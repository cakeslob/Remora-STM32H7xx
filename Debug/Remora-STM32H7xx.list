
Remora-STM32H7xx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013748  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007e4  080139e8  080139e8  000149e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080141cc  080141cc  000151cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000008  080141d4  080141d4  000151d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000008  080141dc  080141dc  000151dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000000bc  24000000  080141e4  00016000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000c4c  240000c0  080142a0  000160c0  2**5
                  ALLOC
  8 ._user_heap_stack 00000604  24000d0c  080142a0  00016d0c  2**0
                  ALLOC
  9 .dma_buffers  00000140  30000000  00000000  00001000  2**5
                  ALLOC
 10 .ARM.attributes 0000002e  00000000  00000000  000160bc  2**0
                  CONTENTS, READONLY
 11 .debug_info   00046516  00000000  00000000  000160ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00006a74  00000000  00000000  0005c600  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00001d98  00000000  00000000  00063078  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 000016bf  00000000  00000000  00064e10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0000c209  00000000  00000000  000664cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00030a1a  00000000  00000000  000726d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    001825ff  00000000  00000000  000a30f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  002256f1  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00009d70  00000000  00000000  00225734  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line_str 00000069  00000000  00000000  0022f4a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240000c0 	.word	0x240000c0
 80002bc:	00000000 	.word	0x00000000
 80002c0:	080139d0 	.word	0x080139d0

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240000c4 	.word	0x240000c4
 80002dc:	080139d0 	.word	0x080139d0

080002e0 <strcmp>:
 80002e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80002e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002e8:	2a01      	cmp	r2, #1
 80002ea:	bf28      	it	cs
 80002ec:	429a      	cmpcs	r2, r3
 80002ee:	d0f7      	beq.n	80002e0 <strcmp>
 80002f0:	1ad0      	subs	r0, r2, r3
 80002f2:	4770      	bx	lr
	...

08000300 <memchr>:
 8000300:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000304:	2a10      	cmp	r2, #16
 8000306:	db2b      	blt.n	8000360 <memchr+0x60>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	d008      	beq.n	8000320 <memchr+0x20>
 800030e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000312:	3a01      	subs	r2, #1
 8000314:	428b      	cmp	r3, r1
 8000316:	d02d      	beq.n	8000374 <memchr+0x74>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	b342      	cbz	r2, 8000370 <memchr+0x70>
 800031e:	d1f6      	bne.n	800030e <memchr+0xe>
 8000320:	b4f0      	push	{r4, r5, r6, r7}
 8000322:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000326:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800032a:	f022 0407 	bic.w	r4, r2, #7
 800032e:	f07f 0700 	mvns.w	r7, #0
 8000332:	2300      	movs	r3, #0
 8000334:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000338:	3c08      	subs	r4, #8
 800033a:	ea85 0501 	eor.w	r5, r5, r1
 800033e:	ea86 0601 	eor.w	r6, r6, r1
 8000342:	fa85 f547 	uadd8	r5, r5, r7
 8000346:	faa3 f587 	sel	r5, r3, r7
 800034a:	fa86 f647 	uadd8	r6, r6, r7
 800034e:	faa5 f687 	sel	r6, r5, r7
 8000352:	b98e      	cbnz	r6, 8000378 <memchr+0x78>
 8000354:	d1ee      	bne.n	8000334 <memchr+0x34>
 8000356:	bcf0      	pop	{r4, r5, r6, r7}
 8000358:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800035c:	f002 0207 	and.w	r2, r2, #7
 8000360:	b132      	cbz	r2, 8000370 <memchr+0x70>
 8000362:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000366:	3a01      	subs	r2, #1
 8000368:	ea83 0301 	eor.w	r3, r3, r1
 800036c:	b113      	cbz	r3, 8000374 <memchr+0x74>
 800036e:	d1f8      	bne.n	8000362 <memchr+0x62>
 8000370:	2000      	movs	r0, #0
 8000372:	4770      	bx	lr
 8000374:	3801      	subs	r0, #1
 8000376:	4770      	bx	lr
 8000378:	2d00      	cmp	r5, #0
 800037a:	bf06      	itte	eq
 800037c:	4635      	moveq	r5, r6
 800037e:	3803      	subeq	r0, #3
 8000380:	3807      	subne	r0, #7
 8000382:	f015 0f01 	tst.w	r5, #1
 8000386:	d107      	bne.n	8000398 <memchr+0x98>
 8000388:	3001      	adds	r0, #1
 800038a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800038e:	bf02      	ittt	eq
 8000390:	3001      	addeq	r0, #1
 8000392:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000396:	3001      	addeq	r0, #1
 8000398:	bcf0      	pop	{r4, r5, r6, r7}
 800039a:	3801      	subs	r0, #1
 800039c:	4770      	bx	lr
 800039e:	bf00      	nop

080003a0 <__aeabi_drsub>:
 80003a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80003a4:	e002      	b.n	80003ac <__adddf3>
 80003a6:	bf00      	nop

080003a8 <__aeabi_dsub>:
 80003a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080003ac <__adddf3>:
 80003ac:	b530      	push	{r4, r5, lr}
 80003ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003b6:	ea94 0f05 	teq	r4, r5
 80003ba:	bf08      	it	eq
 80003bc:	ea90 0f02 	teqeq	r0, r2
 80003c0:	bf1f      	itttt	ne
 80003c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d2:	f000 80e2 	beq.w	800059a <__adddf3+0x1ee>
 80003d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003de:	bfb8      	it	lt
 80003e0:	426d      	neglt	r5, r5
 80003e2:	dd0c      	ble.n	80003fe <__adddf3+0x52>
 80003e4:	442c      	add	r4, r5
 80003e6:	ea80 0202 	eor.w	r2, r0, r2
 80003ea:	ea81 0303 	eor.w	r3, r1, r3
 80003ee:	ea82 0000 	eor.w	r0, r2, r0
 80003f2:	ea83 0101 	eor.w	r1, r3, r1
 80003f6:	ea80 0202 	eor.w	r2, r0, r2
 80003fa:	ea81 0303 	eor.w	r3, r1, r3
 80003fe:	2d36      	cmp	r5, #54	@ 0x36
 8000400:	bf88      	it	hi
 8000402:	bd30      	pophi	{r4, r5, pc}
 8000404:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000408:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800040c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000410:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000414:	d002      	beq.n	800041c <__adddf3+0x70>
 8000416:	4240      	negs	r0, r0
 8000418:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800041c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000420:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000424:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000428:	d002      	beq.n	8000430 <__adddf3+0x84>
 800042a:	4252      	negs	r2, r2
 800042c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000430:	ea94 0f05 	teq	r4, r5
 8000434:	f000 80a7 	beq.w	8000586 <__adddf3+0x1da>
 8000438:	f1a4 0401 	sub.w	r4, r4, #1
 800043c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000440:	db0d      	blt.n	800045e <__adddf3+0xb2>
 8000442:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000446:	fa22 f205 	lsr.w	r2, r2, r5
 800044a:	1880      	adds	r0, r0, r2
 800044c:	f141 0100 	adc.w	r1, r1, #0
 8000450:	fa03 f20e 	lsl.w	r2, r3, lr
 8000454:	1880      	adds	r0, r0, r2
 8000456:	fa43 f305 	asr.w	r3, r3, r5
 800045a:	4159      	adcs	r1, r3
 800045c:	e00e      	b.n	800047c <__adddf3+0xd0>
 800045e:	f1a5 0520 	sub.w	r5, r5, #32
 8000462:	f10e 0e20 	add.w	lr, lr, #32
 8000466:	2a01      	cmp	r2, #1
 8000468:	fa03 fc0e 	lsl.w	ip, r3, lr
 800046c:	bf28      	it	cs
 800046e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000472:	fa43 f305 	asr.w	r3, r3, r5
 8000476:	18c0      	adds	r0, r0, r3
 8000478:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800047c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000480:	d507      	bpl.n	8000492 <__adddf3+0xe6>
 8000482:	f04f 0e00 	mov.w	lr, #0
 8000486:	f1dc 0c00 	rsbs	ip, ip, #0
 800048a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800048e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000492:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000496:	d31b      	bcc.n	80004d0 <__adddf3+0x124>
 8000498:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800049c:	d30c      	bcc.n	80004b8 <__adddf3+0x10c>
 800049e:	0849      	lsrs	r1, r1, #1
 80004a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80004a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004a8:	f104 0401 	add.w	r4, r4, #1
 80004ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80004b4:	f080 809a 	bcs.w	80005ec <__adddf3+0x240>
 80004b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004bc:	bf08      	it	eq
 80004be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004c2:	f150 0000 	adcs.w	r0, r0, #0
 80004c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ca:	ea41 0105 	orr.w	r1, r1, r5
 80004ce:	bd30      	pop	{r4, r5, pc}
 80004d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004d4:	4140      	adcs	r0, r0
 80004d6:	eb41 0101 	adc.w	r1, r1, r1
 80004da:	3c01      	subs	r4, #1
 80004dc:	bf28      	it	cs
 80004de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80004e2:	d2e9      	bcs.n	80004b8 <__adddf3+0x10c>
 80004e4:	f091 0f00 	teq	r1, #0
 80004e8:	bf04      	itt	eq
 80004ea:	4601      	moveq	r1, r0
 80004ec:	2000      	moveq	r0, #0
 80004ee:	fab1 f381 	clz	r3, r1
 80004f2:	bf08      	it	eq
 80004f4:	3320      	addeq	r3, #32
 80004f6:	f1a3 030b 	sub.w	r3, r3, #11
 80004fa:	f1b3 0220 	subs.w	r2, r3, #32
 80004fe:	da0c      	bge.n	800051a <__adddf3+0x16e>
 8000500:	320c      	adds	r2, #12
 8000502:	dd08      	ble.n	8000516 <__adddf3+0x16a>
 8000504:	f102 0c14 	add.w	ip, r2, #20
 8000508:	f1c2 020c 	rsb	r2, r2, #12
 800050c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000510:	fa21 f102 	lsr.w	r1, r1, r2
 8000514:	e00c      	b.n	8000530 <__adddf3+0x184>
 8000516:	f102 0214 	add.w	r2, r2, #20
 800051a:	bfd8      	it	le
 800051c:	f1c2 0c20 	rsble	ip, r2, #32
 8000520:	fa01 f102 	lsl.w	r1, r1, r2
 8000524:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000528:	bfdc      	itt	le
 800052a:	ea41 010c 	orrle.w	r1, r1, ip
 800052e:	4090      	lslle	r0, r2
 8000530:	1ae4      	subs	r4, r4, r3
 8000532:	bfa2      	ittt	ge
 8000534:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000538:	4329      	orrge	r1, r5
 800053a:	bd30      	popge	{r4, r5, pc}
 800053c:	ea6f 0404 	mvn.w	r4, r4
 8000540:	3c1f      	subs	r4, #31
 8000542:	da1c      	bge.n	800057e <__adddf3+0x1d2>
 8000544:	340c      	adds	r4, #12
 8000546:	dc0e      	bgt.n	8000566 <__adddf3+0x1ba>
 8000548:	f104 0414 	add.w	r4, r4, #20
 800054c:	f1c4 0220 	rsb	r2, r4, #32
 8000550:	fa20 f004 	lsr.w	r0, r0, r4
 8000554:	fa01 f302 	lsl.w	r3, r1, r2
 8000558:	ea40 0003 	orr.w	r0, r0, r3
 800055c:	fa21 f304 	lsr.w	r3, r1, r4
 8000560:	ea45 0103 	orr.w	r1, r5, r3
 8000564:	bd30      	pop	{r4, r5, pc}
 8000566:	f1c4 040c 	rsb	r4, r4, #12
 800056a:	f1c4 0220 	rsb	r2, r4, #32
 800056e:	fa20 f002 	lsr.w	r0, r0, r2
 8000572:	fa01 f304 	lsl.w	r3, r1, r4
 8000576:	ea40 0003 	orr.w	r0, r0, r3
 800057a:	4629      	mov	r1, r5
 800057c:	bd30      	pop	{r4, r5, pc}
 800057e:	fa21 f004 	lsr.w	r0, r1, r4
 8000582:	4629      	mov	r1, r5
 8000584:	bd30      	pop	{r4, r5, pc}
 8000586:	f094 0f00 	teq	r4, #0
 800058a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800058e:	bf06      	itte	eq
 8000590:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000594:	3401      	addeq	r4, #1
 8000596:	3d01      	subne	r5, #1
 8000598:	e74e      	b.n	8000438 <__adddf3+0x8c>
 800059a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800059e:	bf18      	it	ne
 80005a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005a4:	d029      	beq.n	80005fa <__adddf3+0x24e>
 80005a6:	ea94 0f05 	teq	r4, r5
 80005aa:	bf08      	it	eq
 80005ac:	ea90 0f02 	teqeq	r0, r2
 80005b0:	d005      	beq.n	80005be <__adddf3+0x212>
 80005b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005b6:	bf04      	itt	eq
 80005b8:	4619      	moveq	r1, r3
 80005ba:	4610      	moveq	r0, r2
 80005bc:	bd30      	pop	{r4, r5, pc}
 80005be:	ea91 0f03 	teq	r1, r3
 80005c2:	bf1e      	ittt	ne
 80005c4:	2100      	movne	r1, #0
 80005c6:	2000      	movne	r0, #0
 80005c8:	bd30      	popne	{r4, r5, pc}
 80005ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005ce:	d105      	bne.n	80005dc <__adddf3+0x230>
 80005d0:	0040      	lsls	r0, r0, #1
 80005d2:	4149      	adcs	r1, r1
 80005d4:	bf28      	it	cs
 80005d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80005da:	bd30      	pop	{r4, r5, pc}
 80005dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80005e0:	bf3c      	itt	cc
 80005e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80005e6:	bd30      	popcc	{r4, r5, pc}
 80005e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80005f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80005f4:	f04f 0000 	mov.w	r0, #0
 80005f8:	bd30      	pop	{r4, r5, pc}
 80005fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005fe:	bf1a      	itte	ne
 8000600:	4619      	movne	r1, r3
 8000602:	4610      	movne	r0, r2
 8000604:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000608:	bf1c      	itt	ne
 800060a:	460b      	movne	r3, r1
 800060c:	4602      	movne	r2, r0
 800060e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000612:	bf06      	itte	eq
 8000614:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000618:	ea91 0f03 	teqeq	r1, r3
 800061c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000620:	bd30      	pop	{r4, r5, pc}
 8000622:	bf00      	nop

08000624 <__aeabi_ui2d>:
 8000624:	f090 0f00 	teq	r0, #0
 8000628:	bf04      	itt	eq
 800062a:	2100      	moveq	r1, #0
 800062c:	4770      	bxeq	lr
 800062e:	b530      	push	{r4, r5, lr}
 8000630:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000634:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000638:	f04f 0500 	mov.w	r5, #0
 800063c:	f04f 0100 	mov.w	r1, #0
 8000640:	e750      	b.n	80004e4 <__adddf3+0x138>
 8000642:	bf00      	nop

08000644 <__aeabi_i2d>:
 8000644:	f090 0f00 	teq	r0, #0
 8000648:	bf04      	itt	eq
 800064a:	2100      	moveq	r1, #0
 800064c:	4770      	bxeq	lr
 800064e:	b530      	push	{r4, r5, lr}
 8000650:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000654:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000658:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800065c:	bf48      	it	mi
 800065e:	4240      	negmi	r0, r0
 8000660:	f04f 0100 	mov.w	r1, #0
 8000664:	e73e      	b.n	80004e4 <__adddf3+0x138>
 8000666:	bf00      	nop

08000668 <__aeabi_f2d>:
 8000668:	0042      	lsls	r2, r0, #1
 800066a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800066e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000672:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000676:	bf1f      	itttt	ne
 8000678:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800067c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000680:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000684:	4770      	bxne	lr
 8000686:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800068a:	bf08      	it	eq
 800068c:	4770      	bxeq	lr
 800068e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000692:	bf04      	itt	eq
 8000694:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000698:	4770      	bxeq	lr
 800069a:	b530      	push	{r4, r5, lr}
 800069c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80006a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80006a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006a8:	e71c      	b.n	80004e4 <__adddf3+0x138>
 80006aa:	bf00      	nop

080006ac <__aeabi_ul2d>:
 80006ac:	ea50 0201 	orrs.w	r2, r0, r1
 80006b0:	bf08      	it	eq
 80006b2:	4770      	bxeq	lr
 80006b4:	b530      	push	{r4, r5, lr}
 80006b6:	f04f 0500 	mov.w	r5, #0
 80006ba:	e00a      	b.n	80006d2 <__aeabi_l2d+0x16>

080006bc <__aeabi_l2d>:
 80006bc:	ea50 0201 	orrs.w	r2, r0, r1
 80006c0:	bf08      	it	eq
 80006c2:	4770      	bxeq	lr
 80006c4:	b530      	push	{r4, r5, lr}
 80006c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80006ca:	d502      	bpl.n	80006d2 <__aeabi_l2d+0x16>
 80006cc:	4240      	negs	r0, r0
 80006ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006de:	f43f aed8 	beq.w	8000492 <__adddf3+0xe6>
 80006e2:	f04f 0203 	mov.w	r2, #3
 80006e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006ea:	bf18      	it	ne
 80006ec:	3203      	addne	r2, #3
 80006ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006f2:	bf18      	it	ne
 80006f4:	3203      	addne	r2, #3
 80006f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006fa:	f1c2 0320 	rsb	r3, r2, #32
 80006fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000702:	fa20 f002 	lsr.w	r0, r0, r2
 8000706:	fa01 fe03 	lsl.w	lr, r1, r3
 800070a:	ea40 000e 	orr.w	r0, r0, lr
 800070e:	fa21 f102 	lsr.w	r1, r1, r2
 8000712:	4414      	add	r4, r2
 8000714:	e6bd      	b.n	8000492 <__adddf3+0xe6>
 8000716:	bf00      	nop

08000718 <__aeabi_uldivmod>:
 8000718:	b953      	cbnz	r3, 8000730 <__aeabi_uldivmod+0x18>
 800071a:	b94a      	cbnz	r2, 8000730 <__aeabi_uldivmod+0x18>
 800071c:	2900      	cmp	r1, #0
 800071e:	bf08      	it	eq
 8000720:	2800      	cmpeq	r0, #0
 8000722:	bf1c      	itt	ne
 8000724:	f04f 31ff 	movne.w	r1, #4294967295
 8000728:	f04f 30ff 	movne.w	r0, #4294967295
 800072c:	f000 b97e 	b.w	8000a2c <__aeabi_idiv0>
 8000730:	f1ad 0c08 	sub.w	ip, sp, #8
 8000734:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000738:	f000 f81a 	bl	8000770 <__udivmoddi4>
 800073c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000740:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000744:	b004      	add	sp, #16
 8000746:	4770      	bx	lr

08000748 <__popcountsi2>:
 8000748:	0843      	lsrs	r3, r0, #1
 800074a:	f003 3355 	and.w	r3, r3, #1431655765	@ 0x55555555
 800074e:	1ac0      	subs	r0, r0, r3
 8000750:	0883      	lsrs	r3, r0, #2
 8000752:	f003 3333 	and.w	r3, r3, #858993459	@ 0x33333333
 8000756:	f000 3033 	and.w	r0, r0, #858993459	@ 0x33333333
 800075a:	4418      	add	r0, r3
 800075c:	eb00 1010 	add.w	r0, r0, r0, lsr #4
 8000760:	f000 300f 	and.w	r0, r0, #252645135	@ 0xf0f0f0f
 8000764:	eb00 2000 	add.w	r0, r0, r0, lsl #8
 8000768:	eb00 4000 	add.w	r0, r0, r0, lsl #16
 800076c:	0e00      	lsrs	r0, r0, #24
 800076e:	4770      	bx	lr

08000770 <__udivmoddi4>:
 8000770:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000774:	9d08      	ldr	r5, [sp, #32]
 8000776:	460c      	mov	r4, r1
 8000778:	2b00      	cmp	r3, #0
 800077a:	d14e      	bne.n	800081a <__udivmoddi4+0xaa>
 800077c:	4694      	mov	ip, r2
 800077e:	458c      	cmp	ip, r1
 8000780:	4686      	mov	lr, r0
 8000782:	fab2 f282 	clz	r2, r2
 8000786:	d962      	bls.n	800084e <__udivmoddi4+0xde>
 8000788:	b14a      	cbz	r2, 800079e <__udivmoddi4+0x2e>
 800078a:	f1c2 0320 	rsb	r3, r2, #32
 800078e:	4091      	lsls	r1, r2
 8000790:	fa20 f303 	lsr.w	r3, r0, r3
 8000794:	fa0c fc02 	lsl.w	ip, ip, r2
 8000798:	4319      	orrs	r1, r3
 800079a:	fa00 fe02 	lsl.w	lr, r0, r2
 800079e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80007a2:	fa1f f68c 	uxth.w	r6, ip
 80007a6:	fbb1 f4f7 	udiv	r4, r1, r7
 80007aa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80007ae:	fb07 1114 	mls	r1, r7, r4, r1
 80007b2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80007b6:	fb04 f106 	mul.w	r1, r4, r6
 80007ba:	4299      	cmp	r1, r3
 80007bc:	d90a      	bls.n	80007d4 <__udivmoddi4+0x64>
 80007be:	eb1c 0303 	adds.w	r3, ip, r3
 80007c2:	f104 30ff 	add.w	r0, r4, #4294967295
 80007c6:	f080 8112 	bcs.w	80009ee <__udivmoddi4+0x27e>
 80007ca:	4299      	cmp	r1, r3
 80007cc:	f240 810f 	bls.w	80009ee <__udivmoddi4+0x27e>
 80007d0:	3c02      	subs	r4, #2
 80007d2:	4463      	add	r3, ip
 80007d4:	1a59      	subs	r1, r3, r1
 80007d6:	fa1f f38e 	uxth.w	r3, lr
 80007da:	fbb1 f0f7 	udiv	r0, r1, r7
 80007de:	fb07 1110 	mls	r1, r7, r0, r1
 80007e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80007e6:	fb00 f606 	mul.w	r6, r0, r6
 80007ea:	429e      	cmp	r6, r3
 80007ec:	d90a      	bls.n	8000804 <__udivmoddi4+0x94>
 80007ee:	eb1c 0303 	adds.w	r3, ip, r3
 80007f2:	f100 31ff 	add.w	r1, r0, #4294967295
 80007f6:	f080 80fc 	bcs.w	80009f2 <__udivmoddi4+0x282>
 80007fa:	429e      	cmp	r6, r3
 80007fc:	f240 80f9 	bls.w	80009f2 <__udivmoddi4+0x282>
 8000800:	4463      	add	r3, ip
 8000802:	3802      	subs	r0, #2
 8000804:	1b9b      	subs	r3, r3, r6
 8000806:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800080a:	2100      	movs	r1, #0
 800080c:	b11d      	cbz	r5, 8000816 <__udivmoddi4+0xa6>
 800080e:	40d3      	lsrs	r3, r2
 8000810:	2200      	movs	r2, #0
 8000812:	e9c5 3200 	strd	r3, r2, [r5]
 8000816:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800081a:	428b      	cmp	r3, r1
 800081c:	d905      	bls.n	800082a <__udivmoddi4+0xba>
 800081e:	b10d      	cbz	r5, 8000824 <__udivmoddi4+0xb4>
 8000820:	e9c5 0100 	strd	r0, r1, [r5]
 8000824:	2100      	movs	r1, #0
 8000826:	4608      	mov	r0, r1
 8000828:	e7f5      	b.n	8000816 <__udivmoddi4+0xa6>
 800082a:	fab3 f183 	clz	r1, r3
 800082e:	2900      	cmp	r1, #0
 8000830:	d146      	bne.n	80008c0 <__udivmoddi4+0x150>
 8000832:	42a3      	cmp	r3, r4
 8000834:	d302      	bcc.n	800083c <__udivmoddi4+0xcc>
 8000836:	4290      	cmp	r0, r2
 8000838:	f0c0 80f0 	bcc.w	8000a1c <__udivmoddi4+0x2ac>
 800083c:	1a86      	subs	r6, r0, r2
 800083e:	eb64 0303 	sbc.w	r3, r4, r3
 8000842:	2001      	movs	r0, #1
 8000844:	2d00      	cmp	r5, #0
 8000846:	d0e6      	beq.n	8000816 <__udivmoddi4+0xa6>
 8000848:	e9c5 6300 	strd	r6, r3, [r5]
 800084c:	e7e3      	b.n	8000816 <__udivmoddi4+0xa6>
 800084e:	2a00      	cmp	r2, #0
 8000850:	f040 8090 	bne.w	8000974 <__udivmoddi4+0x204>
 8000854:	eba1 040c 	sub.w	r4, r1, ip
 8000858:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800085c:	fa1f f78c 	uxth.w	r7, ip
 8000860:	2101      	movs	r1, #1
 8000862:	fbb4 f6f8 	udiv	r6, r4, r8
 8000866:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800086a:	fb08 4416 	mls	r4, r8, r6, r4
 800086e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000872:	fb07 f006 	mul.w	r0, r7, r6
 8000876:	4298      	cmp	r0, r3
 8000878:	d908      	bls.n	800088c <__udivmoddi4+0x11c>
 800087a:	eb1c 0303 	adds.w	r3, ip, r3
 800087e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000882:	d202      	bcs.n	800088a <__udivmoddi4+0x11a>
 8000884:	4298      	cmp	r0, r3
 8000886:	f200 80cd 	bhi.w	8000a24 <__udivmoddi4+0x2b4>
 800088a:	4626      	mov	r6, r4
 800088c:	1a1c      	subs	r4, r3, r0
 800088e:	fa1f f38e 	uxth.w	r3, lr
 8000892:	fbb4 f0f8 	udiv	r0, r4, r8
 8000896:	fb08 4410 	mls	r4, r8, r0, r4
 800089a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800089e:	fb00 f707 	mul.w	r7, r0, r7
 80008a2:	429f      	cmp	r7, r3
 80008a4:	d908      	bls.n	80008b8 <__udivmoddi4+0x148>
 80008a6:	eb1c 0303 	adds.w	r3, ip, r3
 80008aa:	f100 34ff 	add.w	r4, r0, #4294967295
 80008ae:	d202      	bcs.n	80008b6 <__udivmoddi4+0x146>
 80008b0:	429f      	cmp	r7, r3
 80008b2:	f200 80b0 	bhi.w	8000a16 <__udivmoddi4+0x2a6>
 80008b6:	4620      	mov	r0, r4
 80008b8:	1bdb      	subs	r3, r3, r7
 80008ba:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80008be:	e7a5      	b.n	800080c <__udivmoddi4+0x9c>
 80008c0:	f1c1 0620 	rsb	r6, r1, #32
 80008c4:	408b      	lsls	r3, r1
 80008c6:	fa22 f706 	lsr.w	r7, r2, r6
 80008ca:	431f      	orrs	r7, r3
 80008cc:	fa20 fc06 	lsr.w	ip, r0, r6
 80008d0:	fa04 f301 	lsl.w	r3, r4, r1
 80008d4:	ea43 030c 	orr.w	r3, r3, ip
 80008d8:	40f4      	lsrs	r4, r6
 80008da:	fa00 f801 	lsl.w	r8, r0, r1
 80008de:	0c38      	lsrs	r0, r7, #16
 80008e0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80008e4:	fbb4 fef0 	udiv	lr, r4, r0
 80008e8:	fa1f fc87 	uxth.w	ip, r7
 80008ec:	fb00 441e 	mls	r4, r0, lr, r4
 80008f0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80008f4:	fb0e f90c 	mul.w	r9, lr, ip
 80008f8:	45a1      	cmp	r9, r4
 80008fa:	fa02 f201 	lsl.w	r2, r2, r1
 80008fe:	d90a      	bls.n	8000916 <__udivmoddi4+0x1a6>
 8000900:	193c      	adds	r4, r7, r4
 8000902:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000906:	f080 8084 	bcs.w	8000a12 <__udivmoddi4+0x2a2>
 800090a:	45a1      	cmp	r9, r4
 800090c:	f240 8081 	bls.w	8000a12 <__udivmoddi4+0x2a2>
 8000910:	f1ae 0e02 	sub.w	lr, lr, #2
 8000914:	443c      	add	r4, r7
 8000916:	eba4 0409 	sub.w	r4, r4, r9
 800091a:	fa1f f983 	uxth.w	r9, r3
 800091e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000922:	fb00 4413 	mls	r4, r0, r3, r4
 8000926:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800092a:	fb03 fc0c 	mul.w	ip, r3, ip
 800092e:	45a4      	cmp	ip, r4
 8000930:	d907      	bls.n	8000942 <__udivmoddi4+0x1d2>
 8000932:	193c      	adds	r4, r7, r4
 8000934:	f103 30ff 	add.w	r0, r3, #4294967295
 8000938:	d267      	bcs.n	8000a0a <__udivmoddi4+0x29a>
 800093a:	45a4      	cmp	ip, r4
 800093c:	d965      	bls.n	8000a0a <__udivmoddi4+0x29a>
 800093e:	3b02      	subs	r3, #2
 8000940:	443c      	add	r4, r7
 8000942:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000946:	fba0 9302 	umull	r9, r3, r0, r2
 800094a:	eba4 040c 	sub.w	r4, r4, ip
 800094e:	429c      	cmp	r4, r3
 8000950:	46ce      	mov	lr, r9
 8000952:	469c      	mov	ip, r3
 8000954:	d351      	bcc.n	80009fa <__udivmoddi4+0x28a>
 8000956:	d04e      	beq.n	80009f6 <__udivmoddi4+0x286>
 8000958:	b155      	cbz	r5, 8000970 <__udivmoddi4+0x200>
 800095a:	ebb8 030e 	subs.w	r3, r8, lr
 800095e:	eb64 040c 	sbc.w	r4, r4, ip
 8000962:	fa04 f606 	lsl.w	r6, r4, r6
 8000966:	40cb      	lsrs	r3, r1
 8000968:	431e      	orrs	r6, r3
 800096a:	40cc      	lsrs	r4, r1
 800096c:	e9c5 6400 	strd	r6, r4, [r5]
 8000970:	2100      	movs	r1, #0
 8000972:	e750      	b.n	8000816 <__udivmoddi4+0xa6>
 8000974:	f1c2 0320 	rsb	r3, r2, #32
 8000978:	fa20 f103 	lsr.w	r1, r0, r3
 800097c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000980:	fa24 f303 	lsr.w	r3, r4, r3
 8000984:	4094      	lsls	r4, r2
 8000986:	430c      	orrs	r4, r1
 8000988:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800098c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000990:	fa1f f78c 	uxth.w	r7, ip
 8000994:	fbb3 f0f8 	udiv	r0, r3, r8
 8000998:	fb08 3110 	mls	r1, r8, r0, r3
 800099c:	0c23      	lsrs	r3, r4, #16
 800099e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80009a2:	fb00 f107 	mul.w	r1, r0, r7
 80009a6:	4299      	cmp	r1, r3
 80009a8:	d908      	bls.n	80009bc <__udivmoddi4+0x24c>
 80009aa:	eb1c 0303 	adds.w	r3, ip, r3
 80009ae:	f100 36ff 	add.w	r6, r0, #4294967295
 80009b2:	d22c      	bcs.n	8000a0e <__udivmoddi4+0x29e>
 80009b4:	4299      	cmp	r1, r3
 80009b6:	d92a      	bls.n	8000a0e <__udivmoddi4+0x29e>
 80009b8:	3802      	subs	r0, #2
 80009ba:	4463      	add	r3, ip
 80009bc:	1a5b      	subs	r3, r3, r1
 80009be:	b2a4      	uxth	r4, r4
 80009c0:	fbb3 f1f8 	udiv	r1, r3, r8
 80009c4:	fb08 3311 	mls	r3, r8, r1, r3
 80009c8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80009cc:	fb01 f307 	mul.w	r3, r1, r7
 80009d0:	42a3      	cmp	r3, r4
 80009d2:	d908      	bls.n	80009e6 <__udivmoddi4+0x276>
 80009d4:	eb1c 0404 	adds.w	r4, ip, r4
 80009d8:	f101 36ff 	add.w	r6, r1, #4294967295
 80009dc:	d213      	bcs.n	8000a06 <__udivmoddi4+0x296>
 80009de:	42a3      	cmp	r3, r4
 80009e0:	d911      	bls.n	8000a06 <__udivmoddi4+0x296>
 80009e2:	3902      	subs	r1, #2
 80009e4:	4464      	add	r4, ip
 80009e6:	1ae4      	subs	r4, r4, r3
 80009e8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80009ec:	e739      	b.n	8000862 <__udivmoddi4+0xf2>
 80009ee:	4604      	mov	r4, r0
 80009f0:	e6f0      	b.n	80007d4 <__udivmoddi4+0x64>
 80009f2:	4608      	mov	r0, r1
 80009f4:	e706      	b.n	8000804 <__udivmoddi4+0x94>
 80009f6:	45c8      	cmp	r8, r9
 80009f8:	d2ae      	bcs.n	8000958 <__udivmoddi4+0x1e8>
 80009fa:	ebb9 0e02 	subs.w	lr, r9, r2
 80009fe:	eb63 0c07 	sbc.w	ip, r3, r7
 8000a02:	3801      	subs	r0, #1
 8000a04:	e7a8      	b.n	8000958 <__udivmoddi4+0x1e8>
 8000a06:	4631      	mov	r1, r6
 8000a08:	e7ed      	b.n	80009e6 <__udivmoddi4+0x276>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	e799      	b.n	8000942 <__udivmoddi4+0x1d2>
 8000a0e:	4630      	mov	r0, r6
 8000a10:	e7d4      	b.n	80009bc <__udivmoddi4+0x24c>
 8000a12:	46d6      	mov	lr, sl
 8000a14:	e77f      	b.n	8000916 <__udivmoddi4+0x1a6>
 8000a16:	4463      	add	r3, ip
 8000a18:	3802      	subs	r0, #2
 8000a1a:	e74d      	b.n	80008b8 <__udivmoddi4+0x148>
 8000a1c:	4606      	mov	r6, r0
 8000a1e:	4623      	mov	r3, r4
 8000a20:	4608      	mov	r0, r1
 8000a22:	e70f      	b.n	8000844 <__udivmoddi4+0xd4>
 8000a24:	3e02      	subs	r6, #2
 8000a26:	4463      	add	r3, ip
 8000a28:	e730      	b.n	800088c <__udivmoddi4+0x11c>
 8000a2a:	bf00      	nop

08000a2c <__aeabi_idiv0>:
 8000a2c:	4770      	bx	lr
 8000a2e:	bf00      	nop

08000a30 <_ZN9InterruptC1Ev>:

// Define the vector table, it is only declared in the class declaration
Interrupt* Interrupt::ISRVectorTable[] = {0};

// Constructor
Interrupt::Interrupt(void){}
 8000a30:	b480      	push	{r7}
 8000a32:	b083      	sub	sp, #12
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
 8000a38:	4a04      	ldr	r2, [pc, #16]	@ (8000a4c <_ZN9InterruptC1Ev+0x1c>)
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	601a      	str	r2, [r3, #0]
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	4618      	mov	r0, r3
 8000a42:	370c      	adds	r7, #12
 8000a44:	46bd      	mov	sp, r7
 8000a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4a:	4770      	bx	lr
 8000a4c:	0801402c 	.word	0x0801402c

08000a50 <_ZN9Interrupt8RegisterEiPS_>:


// Methods

void Interrupt::Register(int interruptNumber, Interrupt* intThisPtr)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b082      	sub	sp, #8
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
 8000a58:	6039      	str	r1, [r7, #0]
	printf("Registering interrupt for interrupt number = %d\n", interruptNumber);
 8000a5a:	6879      	ldr	r1, [r7, #4]
 8000a5c:	4805      	ldr	r0, [pc, #20]	@ (8000a74 <_ZN9Interrupt8RegisterEiPS_+0x24>)
 8000a5e:	f012 f8f1 	bl	8012c44 <iprintf>
	ISRVectorTable[interruptNumber] = intThisPtr;
 8000a62:	4905      	ldr	r1, [pc, #20]	@ (8000a78 <_ZN9Interrupt8RegisterEiPS_+0x28>)
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	683a      	ldr	r2, [r7, #0]
 8000a68:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000a6c:	bf00      	nop
 8000a6e:	3708      	adds	r7, #8
 8000a70:	46bd      	mov	sp, r7
 8000a72:	bd80      	pop	{r7, pc}
 8000a74:	080139e8 	.word	0x080139e8
 8000a78:	240000dc 	.word	0x240000dc

08000a7c <_ZN9Interrupt13EXTI4_WrapperEv>:

void Interrupt::EXTI4_Wrapper(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	af00      	add	r7, sp, #0
	ISRVectorTable[EXTI4_IRQn]->ISR_Handler();
 8000a80:	4b04      	ldr	r3, [pc, #16]	@ (8000a94 <_ZN9Interrupt13EXTI4_WrapperEv+0x18>)
 8000a82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	4a02      	ldr	r2, [pc, #8]	@ (8000a94 <_ZN9Interrupt13EXTI4_WrapperEv+0x18>)
 8000a8a:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8000a8c:	4610      	mov	r0, r2
 8000a8e:	4798      	blx	r3
}
 8000a90:	bf00      	nop
 8000a92:	bd80      	pop	{r7, pc}
 8000a94:	240000dc 	.word	0x240000dc

08000a98 <_ZN9Interrupt20DMA1_Stream0_WrapperEv>:

void Interrupt::DMA1_Stream0_Wrapper(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	af00      	add	r7, sp, #0
	ISRVectorTable[DMA1_Stream0_IRQn]->ISR_Handler();
 8000a9c:	4b04      	ldr	r3, [pc, #16]	@ (8000ab0 <_ZN9Interrupt20DMA1_Stream0_WrapperEv+0x18>)
 8000a9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	4a02      	ldr	r2, [pc, #8]	@ (8000ab0 <_ZN9Interrupt20DMA1_Stream0_WrapperEv+0x18>)
 8000aa6:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8000aa8:	4610      	mov	r0, r2
 8000aaa:	4798      	blx	r3
}
 8000aac:	bf00      	nop
 8000aae:	bd80      	pop	{r7, pc}
 8000ab0:	240000dc 	.word	0x240000dc

08000ab4 <_ZN9Interrupt20DMA1_Stream1_WrapperEv>:

void Interrupt::DMA1_Stream1_Wrapper(void)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	af00      	add	r7, sp, #0
	ISRVectorTable[DMA1_Stream1_IRQn]->ISR_Handler();
 8000ab8:	4b04      	ldr	r3, [pc, #16]	@ (8000acc <_ZN9Interrupt20DMA1_Stream1_WrapperEv+0x18>)
 8000aba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	4a02      	ldr	r2, [pc, #8]	@ (8000acc <_ZN9Interrupt20DMA1_Stream1_WrapperEv+0x18>)
 8000ac2:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8000ac4:	4610      	mov	r0, r2
 8000ac6:	4798      	blx	r3
}
 8000ac8:	bf00      	nop
 8000aca:	bd80      	pop	{r7, pc}
 8000acc:	240000dc 	.word	0x240000dc

08000ad0 <_ZN9Interrupt12TIM2_WrapperEv>:


void Interrupt::TIM2_Wrapper(void)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	af00      	add	r7, sp, #0
	ISRVectorTable[TIM2_IRQn]->ISR_Handler();
 8000ad4:	4b04      	ldr	r3, [pc, #16]	@ (8000ae8 <_ZN9Interrupt12TIM2_WrapperEv+0x18>)
 8000ad6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	4a02      	ldr	r2, [pc, #8]	@ (8000ae8 <_ZN9Interrupt12TIM2_WrapperEv+0x18>)
 8000ade:	6f12      	ldr	r2, [r2, #112]	@ 0x70
 8000ae0:	4610      	mov	r0, r2
 8000ae2:	4798      	blx	r3
}
 8000ae4:	bf00      	nop
 8000ae6:	bd80      	pop	{r7, pc}
 8000ae8:	240000dc 	.word	0x240000dc

08000aec <_ZN9Interrupt12TIM3_WrapperEv>:

void Interrupt::TIM3_Wrapper(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	af00      	add	r7, sp, #0
	ISRVectorTable[TIM3_IRQn]->ISR_Handler();
 8000af0:	4b04      	ldr	r3, [pc, #16]	@ (8000b04 <_ZN9Interrupt12TIM3_WrapperEv+0x18>)
 8000af2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	4a02      	ldr	r2, [pc, #8]	@ (8000b04 <_ZN9Interrupt12TIM3_WrapperEv+0x18>)
 8000afa:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8000afc:	4610      	mov	r0, r2
 8000afe:	4798      	blx	r3
}
 8000b00:	bf00      	nop
 8000b02:	bd80      	pop	{r7, pc}
 8000b04:	240000dc 	.word	0x240000dc

08000b08 <_ZN9Interrupt12TIM4_WrapperEv>:

void Interrupt::TIM4_Wrapper(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	af00      	add	r7, sp, #0
	ISRVectorTable[TIM4_IRQn]->ISR_Handler();
 8000b0c:	4b04      	ldr	r3, [pc, #16]	@ (8000b20 <_ZN9Interrupt12TIM4_WrapperEv+0x18>)
 8000b0e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	4a02      	ldr	r2, [pc, #8]	@ (8000b20 <_ZN9Interrupt12TIM4_WrapperEv+0x18>)
 8000b16:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 8000b18:	4610      	mov	r0, r2
 8000b1a:	4798      	blx	r3
}
 8000b1c:	bf00      	nop
 8000b1e:	bd80      	pop	{r7, pc}
 8000b20:	240000dc 	.word	0x240000dc

08000b24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b24:	b480      	push	{r7}
 8000b26:	b083      	sub	sp, #12
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	6039      	str	r1, [r7, #0]
 8000b2e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000b30:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	db0a      	blt.n	8000b4e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b38:	683b      	ldr	r3, [r7, #0]
 8000b3a:	b2da      	uxtb	r2, r3
 8000b3c:	490c      	ldr	r1, [pc, #48]	@ (8000b70 <__NVIC_SetPriority+0x4c>)
 8000b3e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000b42:	0112      	lsls	r2, r2, #4
 8000b44:	b2d2      	uxtb	r2, r2
 8000b46:	440b      	add	r3, r1
 8000b48:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b4c:	e00a      	b.n	8000b64 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b4e:	683b      	ldr	r3, [r7, #0]
 8000b50:	b2da      	uxtb	r2, r3
 8000b52:	4908      	ldr	r1, [pc, #32]	@ (8000b74 <__NVIC_SetPriority+0x50>)
 8000b54:	88fb      	ldrh	r3, [r7, #6]
 8000b56:	f003 030f 	and.w	r3, r3, #15
 8000b5a:	3b04      	subs	r3, #4
 8000b5c:	0112      	lsls	r2, r2, #4
 8000b5e:	b2d2      	uxtb	r2, r2
 8000b60:	440b      	add	r3, r1
 8000b62:	761a      	strb	r2, [r3, #24]
}
 8000b64:	bf00      	nop
 8000b66:	370c      	adds	r7, #12
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6e:	4770      	bx	lr
 8000b70:	e000e100 	.word	0xe000e100
 8000b74:	e000ed00 	.word	0xe000ed00

08000b78 <_ZNK19ArduinoJson6101_11014CollectionData4headEv>:
  VariantData *get(size_t index) const;

  template <typename TAdaptedString>
  VariantData *get(TAdaptedString key) const;

  VariantSlot *head() const {
 8000b78:	b480      	push	{r7}
 8000b7a:	b083      	sub	sp, #12
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
    return _head;
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	681b      	ldr	r3, [r3, #0]
  }
 8000b84:	4618      	mov	r0, r3
 8000b86:	370c      	adds	r7, #12
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8e:	4770      	bx	lr

08000b90 <_ZN19ArduinoJson6101_11011VariantSlot4dataEv>:
  // - no constructor
  // - no destructor
  // - no virtual
  // - no inheritance

  VariantData* data() {
 8000b90:	b480      	push	{r7}
 8000b92:	b083      	sub	sp, #12
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<VariantData*>(&_content);
 8000b98:	687b      	ldr	r3, [r7, #4]
  }
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	370c      	adds	r7, #12
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba4:	4770      	bx	lr

08000ba6 <_ZN19ArduinoJson6101_11011VariantSlot4nextEv>:

  const VariantData* data() const {
    return reinterpret_cast<const VariantData*>(&_content);
  }

  VariantSlot* next() {
 8000ba6:	b480      	push	{r7}
 8000ba8:	b083      	sub	sp, #12
 8000baa:	af00      	add	r7, sp, #0
 8000bac:	6078      	str	r0, [r7, #4]
    return _next ? this + _next : 0;
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d006      	beq.n	8000bc6 <_ZN19ArduinoJson6101_11011VariantSlot4nextEv+0x20>
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8000bbe:	011b      	lsls	r3, r3, #4
 8000bc0:	687a      	ldr	r2, [r7, #4]
 8000bc2:	4413      	add	r3, r2
 8000bc4:	e000      	b.n	8000bc8 <_ZN19ArduinoJson6101_11011VariantSlot4nextEv+0x22>
 8000bc6:	2300      	movs	r3, #0
  }
 8000bc8:	4618      	mov	r0, r3
 8000bca:	370c      	adds	r7, #12
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd2:	4770      	bx	lr

08000bd4 <_ZN19ArduinoJson6101_11011VariantSlot14setNextNotNullEPS0_>:

  void setNext(VariantSlot* slot) {
    _next = VariantSlotDiff(slot ? slot - this : 0);
  }

  void setNextNotNull(VariantSlot* slot) {
 8000bd4:	b480      	push	{r7}
 8000bd6:	b083      	sub	sp, #12
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
 8000bdc:	6039      	str	r1, [r7, #0]
    ARDUINOJSON_ASSERT(slot != 0);
    _next = VariantSlotDiff(slot - this);
 8000bde:	683a      	ldr	r2, [r7, #0]
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	1ad3      	subs	r3, r2, r3
 8000be4:	111b      	asrs	r3, r3, #4
 8000be6:	b21a      	sxth	r2, r3
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	815a      	strh	r2, [r3, #10]
  }
 8000bec:	bf00      	nop
 8000bee:	370c      	adds	r7, #12
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf6:	4770      	bx	lr

08000bf8 <_ZN19ArduinoJson6101_11011VariantSlot11setOwnedKeyENS_8not_nullIPKcEE>:

  void setOwnedKey(not_null<const char*> k) {
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b082      	sub	sp, #8
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
 8000c00:	6039      	str	r1, [r7, #0]
    _flags |= KEY_IS_OWNED;
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	7a1b      	ldrb	r3, [r3, #8]
 8000c06:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000c0a:	b2da      	uxtb	r2, r3
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	721a      	strb	r2, [r3, #8]
    _key = k.get();
 8000c10:	463b      	mov	r3, r7
 8000c12:	4618      	mov	r0, r3
 8000c14:	f001 fde4 	bl	80027e0 <_ZNK19ArduinoJson6101_1108not_nullIPKcE3getEv>
 8000c18:	4602      	mov	r2, r0
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	60da      	str	r2, [r3, #12]
  }
 8000c1e:	bf00      	nop
 8000c20:	3708      	adds	r7, #8
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bd80      	pop	{r7, pc}

08000c26 <_ZNK19ArduinoJson6101_11011VariantSlot3keyEv>:
  void setLinkedKey(not_null<const char*> k) {
    _flags &= VALUE_MASK;
    _key = k.get();
  }

  const char* key() const {
 8000c26:	b480      	push	{r7}
 8000c28:	b083      	sub	sp, #12
 8000c2a:	af00      	add	r7, sp, #0
 8000c2c:	6078      	str	r0, [r7, #4]
    return _key;
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	68db      	ldr	r3, [r3, #12]
  }
 8000c32:	4618      	mov	r0, r3
 8000c34:	370c      	adds	r7, #12
 8000c36:	46bd      	mov	sp, r7
 8000c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3c:	4770      	bx	lr

08000c3e <_ZN19ArduinoJson6101_11011VariantSlot5clearEv>:

  bool ownsKey() const {
    return (_flags & KEY_IS_OWNED) != 0;
  }

  void clear() {
 8000c3e:	b480      	push	{r7}
 8000c40:	b083      	sub	sp, #12
 8000c42:	af00      	add	r7, sp, #0
 8000c44:	6078      	str	r0, [r7, #4]
    _next = 0;
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	2200      	movs	r2, #0
 8000c4a:	815a      	strh	r2, [r3, #10]
    _flags = 0;
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	2200      	movs	r2, #0
 8000c50:	721a      	strb	r2, [r3, #8]
    _key = 0;
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	2200      	movs	r2, #0
 8000c56:	60da      	str	r2, [r3, #12]
  }
 8000c58:	bf00      	nop
 8000c5a:	370c      	adds	r7, #12
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c62:	4770      	bx	lr

08000c64 <_ZN19ArduinoJson6101_11010addPaddingEj>:
  const size_t mask = sizeof(void *) - 1;
  size_t addr = reinterpret_cast<size_t>(ptr);
  return (addr & mask) == 0;
}

inline size_t addPadding(size_t bytes) {
 8000c64:	b480      	push	{r7}
 8000c66:	b085      	sub	sp, #20
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
  const size_t mask = sizeof(void *) - 1;
 8000c6c:	2303      	movs	r3, #3
 8000c6e:	60fb      	str	r3, [r7, #12]
  return (bytes + mask) & ~mask;
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	3303      	adds	r3, #3
 8000c74:	f023 0303 	bic.w	r3, r3, #3
}
 8000c78:	4618      	mov	r0, r3
 8000c7a:	3714      	adds	r7, #20
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c82:	4770      	bx	lr

08000c84 <_ZN19ArduinoJson6101_11010MemoryPoolC1EPcj>:
//               ^              ^
//             _left          _right

class MemoryPool {
 public:
  MemoryPool(char* buf, size_t capa)
 8000c84:	b480      	push	{r7}
 8000c86:	b085      	sub	sp, #20
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	60f8      	str	r0, [r7, #12]
 8000c8c:	60b9      	str	r1, [r7, #8]
 8000c8e:	607a      	str	r2, [r7, #4]
      : _begin(buf),
 8000c90:	68fb      	ldr	r3, [r7, #12]
 8000c92:	68ba      	ldr	r2, [r7, #8]
 8000c94:	601a      	str	r2, [r3, #0]
        _left(buf),
 8000c96:	68fb      	ldr	r3, [r7, #12]
 8000c98:	68ba      	ldr	r2, [r7, #8]
 8000c9a:	605a      	str	r2, [r3, #4]
        _right(buf ? buf + capa : 0),
 8000c9c:	68bb      	ldr	r3, [r7, #8]
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d003      	beq.n	8000caa <_ZN19ArduinoJson6101_11010MemoryPoolC1EPcj+0x26>
 8000ca2:	68ba      	ldr	r2, [r7, #8]
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	4413      	add	r3, r2
 8000ca8:	e000      	b.n	8000cac <_ZN19ArduinoJson6101_11010MemoryPoolC1EPcj+0x28>
 8000caa:	2300      	movs	r3, #0
 8000cac:	68fa      	ldr	r2, [r7, #12]
 8000cae:	6093      	str	r3, [r2, #8]
        _end(buf ? buf + capa : 0) {
 8000cb0:	68bb      	ldr	r3, [r7, #8]
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d003      	beq.n	8000cbe <_ZN19ArduinoJson6101_11010MemoryPoolC1EPcj+0x3a>
 8000cb6:	68ba      	ldr	r2, [r7, #8]
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	4413      	add	r3, r2
 8000cbc:	e000      	b.n	8000cc0 <_ZN19ArduinoJson6101_11010MemoryPoolC1EPcj+0x3c>
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	68fa      	ldr	r2, [r7, #12]
 8000cc2:	60d3      	str	r3, [r2, #12]
    ARDUINOJSON_ASSERT(isAligned(_begin));
    ARDUINOJSON_ASSERT(isAligned(_right));
    ARDUINOJSON_ASSERT(isAligned(_end));
  }
 8000cc4:	68fb      	ldr	r3, [r7, #12]
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	3714      	adds	r7, #20
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd0:	4770      	bx	lr

08000cd2 <_ZN19ArduinoJson6101_11010MemoryPool6bufferEv>:

  void* buffer() {
 8000cd2:	b480      	push	{r7}
 8000cd4:	b083      	sub	sp, #12
 8000cd6:	af00      	add	r7, sp, #0
 8000cd8:	6078      	str	r0, [r7, #4]
    return _begin;
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	681b      	ldr	r3, [r3, #0]
  }
 8000cde:	4618      	mov	r0, r3
 8000ce0:	370c      	adds	r7, #12
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce8:	4770      	bx	lr

08000cea <_ZN19ArduinoJson6101_11010MemoryPool12allocVariantEv>:

  size_t size() const {
    return size_t(_left - _begin + _end - _right);
  }

  VariantSlot* allocVariant() {
 8000cea:	b580      	push	{r7, lr}
 8000cec:	b082      	sub	sp, #8
 8000cee:	af00      	add	r7, sp, #0
 8000cf0:	6078      	str	r0, [r7, #4]
    return allocRight<VariantSlot>();
 8000cf2:	6878      	ldr	r0, [r7, #4]
 8000cf4:	f001 fd80 	bl	80027f8 <_ZN19ArduinoJson6101_11010MemoryPool10allocRightINS_11VariantSlotEEEPT_v>
 8000cf8:	4603      	mov	r3, r0
  }
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	3708      	adds	r7, #8
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bd80      	pop	{r7, pc}

08000d02 <_ZN19ArduinoJson6101_11010MemoryPool21allocExpandableStringEv>:
    _left += n;
    checkInvariants();
    return s;
  }

  StringSlot allocExpandableString() {
 8000d02:	b580      	push	{r7, lr}
 8000d04:	b082      	sub	sp, #8
 8000d06:	af00      	add	r7, sp, #0
 8000d08:	6078      	str	r0, [r7, #4]
 8000d0a:	6039      	str	r1, [r7, #0]
    StringSlot s;
    s.value = _left;
 8000d0c:	683b      	ldr	r3, [r7, #0]
 8000d0e:	685a      	ldr	r2, [r3, #4]
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	601a      	str	r2, [r3, #0]
    s.size = size_t(_right - _left);
 8000d14:	683b      	ldr	r3, [r7, #0]
 8000d16:	689a      	ldr	r2, [r3, #8]
 8000d18:	683b      	ldr	r3, [r7, #0]
 8000d1a:	685b      	ldr	r3, [r3, #4]
 8000d1c:	1ad3      	subs	r3, r2, r3
 8000d1e:	461a      	mov	r2, r3
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	605a      	str	r2, [r3, #4]
    _left = _right;
 8000d24:	683b      	ldr	r3, [r7, #0]
 8000d26:	689a      	ldr	r2, [r3, #8]
 8000d28:	683b      	ldr	r3, [r7, #0]
 8000d2a:	605a      	str	r2, [r3, #4]
    checkInvariants();
 8000d2c:	6838      	ldr	r0, [r7, #0]
 8000d2e:	f000 f864 	bl	8000dfa <_ZN19ArduinoJson6101_11010MemoryPool15checkInvariantsEv>
    return s;
 8000d32:	bf00      	nop
  }
 8000d34:	6878      	ldr	r0, [r7, #4]
 8000d36:	3708      	adds	r7, #8
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bd80      	pop	{r7, pc}

08000d3c <_ZN19ArduinoJson6101_11010MemoryPool12freezeStringERNS_10StringSlotEj>:

  void freezeString(StringSlot& s, size_t newSize) {
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b084      	sub	sp, #16
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	60f8      	str	r0, [r7, #12]
 8000d44:	60b9      	str	r1, [r7, #8]
 8000d46:	607a      	str	r2, [r7, #4]
    _left -= (s.size - newSize);
 8000d48:	68fb      	ldr	r3, [r7, #12]
 8000d4a:	685a      	ldr	r2, [r3, #4]
 8000d4c:	68bb      	ldr	r3, [r7, #8]
 8000d4e:	685b      	ldr	r3, [r3, #4]
 8000d50:	6879      	ldr	r1, [r7, #4]
 8000d52:	1acb      	subs	r3, r1, r3
 8000d54:	441a      	add	r2, r3
 8000d56:	68fb      	ldr	r3, [r7, #12]
 8000d58:	605a      	str	r2, [r3, #4]
    s.size = newSize;
 8000d5a:	68bb      	ldr	r3, [r7, #8]
 8000d5c:	687a      	ldr	r2, [r7, #4]
 8000d5e:	605a      	str	r2, [r3, #4]
    checkInvariants();
 8000d60:	68f8      	ldr	r0, [r7, #12]
 8000d62:	f000 f84a 	bl	8000dfa <_ZN19ArduinoJson6101_11010MemoryPool15checkInvariantsEv>
  }
 8000d66:	bf00      	nop
 8000d68:	3710      	adds	r7, #16
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}

08000d6e <_ZN19ArduinoJson6101_11010MemoryPool5clearEv>:

  void clear() {
 8000d6e:	b480      	push	{r7}
 8000d70:	b083      	sub	sp, #12
 8000d72:	af00      	add	r7, sp, #0
 8000d74:	6078      	str	r0, [r7, #4]
    _left = _begin;
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	681a      	ldr	r2, [r3, #0]
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	605a      	str	r2, [r3, #4]
    _right = _end;
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	68da      	ldr	r2, [r3, #12]
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	609a      	str	r2, [r3, #8]
  }
 8000d86:	bf00      	nop
 8000d88:	370c      	adds	r7, #12
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d90:	4770      	bx	lr

08000d92 <_ZNK19ArduinoJson6101_11010MemoryPool8canAllocEj>:

  bool canAlloc(size_t bytes) const {
 8000d92:	b480      	push	{r7}
 8000d94:	b083      	sub	sp, #12
 8000d96:	af00      	add	r7, sp, #0
 8000d98:	6078      	str	r0, [r7, #4]
 8000d9a:	6039      	str	r1, [r7, #0]
    return _left + bytes <= _right;
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	685a      	ldr	r2, [r3, #4]
 8000da0:	683b      	ldr	r3, [r7, #0]
 8000da2:	441a      	add	r2, r3
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	689b      	ldr	r3, [r3, #8]
 8000da8:	429a      	cmp	r2, r3
 8000daa:	bf94      	ite	ls
 8000dac:	2301      	movls	r3, #1
 8000dae:	2300      	movhi	r3, #0
 8000db0:	b2db      	uxtb	r3, r3
  }
 8000db2:	4618      	mov	r0, r3
 8000db4:	370c      	adds	r7, #12
 8000db6:	46bd      	mov	sp, r7
 8000db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbc:	4770      	bx	lr

08000dbe <_ZN19ArduinoJson6101_11010MemoryPool10allocRightEj>:
  template <typename T>
  T* allocRight() {
    return reinterpret_cast<T*>(allocRight(sizeof(T)));
  }

  void* allocRight(size_t bytes) {
 8000dbe:	b580      	push	{r7, lr}
 8000dc0:	b082      	sub	sp, #8
 8000dc2:	af00      	add	r7, sp, #0
 8000dc4:	6078      	str	r0, [r7, #4]
 8000dc6:	6039      	str	r1, [r7, #0]
    if (!canAlloc(bytes)) return 0;
 8000dc8:	6839      	ldr	r1, [r7, #0]
 8000dca:	6878      	ldr	r0, [r7, #4]
 8000dcc:	f7ff ffe1 	bl	8000d92 <_ZNK19ArduinoJson6101_11010MemoryPool8canAllocEj>
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	f083 0301 	eor.w	r3, r3, #1
 8000dd6:	b2db      	uxtb	r3, r3
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d001      	beq.n	8000de0 <_ZN19ArduinoJson6101_11010MemoryPool10allocRightEj+0x22>
 8000ddc:	2300      	movs	r3, #0
 8000dde:	e008      	b.n	8000df2 <_ZN19ArduinoJson6101_11010MemoryPool10allocRightEj+0x34>
    _right -= bytes;
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	689a      	ldr	r2, [r3, #8]
 8000de4:	683b      	ldr	r3, [r7, #0]
 8000de6:	425b      	negs	r3, r3
 8000de8:	441a      	add	r2, r3
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	609a      	str	r2, [r3, #8]
    return _right;
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	689b      	ldr	r3, [r3, #8]
  }
 8000df2:	4618      	mov	r0, r3
 8000df4:	3708      	adds	r7, #8
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}

08000dfa <_ZN19ArduinoJson6101_11010MemoryPool15checkInvariantsEv>:
 private:
  StringSlot* allocStringSlot() {
    return allocRight<StringSlot>();
  }

  void checkInvariants() {
 8000dfa:	b480      	push	{r7}
 8000dfc:	b083      	sub	sp, #12
 8000dfe:	af00      	add	r7, sp, #0
 8000e00:	6078      	str	r0, [r7, #4]
    ARDUINOJSON_ASSERT(_begin <= _left);
    ARDUINOJSON_ASSERT(_left <= _right);
    ARDUINOJSON_ASSERT(_right <= _end);
    ARDUINOJSON_ASSERT(isAligned(_right));
  }
 8000e02:	bf00      	nop
 8000e04:	370c      	adds	r7, #12
 8000e06:	46bd      	mov	sp, r7
 8000e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0c:	4770      	bx	lr

08000e0e <_ZN19ArduinoJson6101_11021ConstRamStringAdapterC1EPKc>:

namespace ARDUINOJSON_NAMESPACE {

class ConstRamStringAdapter {
 public:
  ConstRamStringAdapter(const char* str = 0) : _str(str) {}
 8000e0e:	b480      	push	{r7}
 8000e10:	b083      	sub	sp, #12
 8000e12:	af00      	add	r7, sp, #0
 8000e14:	6078      	str	r0, [r7, #4]
 8000e16:	6039      	str	r1, [r7, #0]
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	683a      	ldr	r2, [r7, #0]
 8000e1c:	601a      	str	r2, [r3, #0]
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	4618      	mov	r0, r3
 8000e22:	370c      	adds	r7, #12
 8000e24:	46bd      	mov	sp, r7
 8000e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2a:	4770      	bx	lr

08000e2c <_ZNK19ArduinoJson6101_11021ConstRamStringAdapter6equalsEPKc>:

  bool equals(const char* expected) const {
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b084      	sub	sp, #16
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
 8000e34:	6039      	str	r1, [r7, #0]
    const char* actual = _str;
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	60fb      	str	r3, [r7, #12]
    if (!actual || !expected) return actual == expected;
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d002      	beq.n	8000e48 <_ZNK19ArduinoJson6101_11021ConstRamStringAdapter6equalsEPKc+0x1c>
 8000e42:	683b      	ldr	r3, [r7, #0]
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d107      	bne.n	8000e58 <_ZNK19ArduinoJson6101_11021ConstRamStringAdapter6equalsEPKc+0x2c>
 8000e48:	68fa      	ldr	r2, [r7, #12]
 8000e4a:	683b      	ldr	r3, [r7, #0]
 8000e4c:	429a      	cmp	r2, r3
 8000e4e:	bf0c      	ite	eq
 8000e50:	2301      	moveq	r3, #1
 8000e52:	2300      	movne	r3, #0
 8000e54:	b2db      	uxtb	r3, r3
 8000e56:	e009      	b.n	8000e6c <_ZNK19ArduinoJson6101_11021ConstRamStringAdapter6equalsEPKc+0x40>
    return strcmp(actual, expected) == 0;
 8000e58:	6839      	ldr	r1, [r7, #0]
 8000e5a:	68f8      	ldr	r0, [r7, #12]
 8000e5c:	f7ff fa40 	bl	80002e0 <strcmp>
 8000e60:	4603      	mov	r3, r0
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	bf0c      	ite	eq
 8000e66:	2301      	moveq	r3, #1
 8000e68:	2300      	movne	r3, #0
 8000e6a:	b2db      	uxtb	r3, r3
  }
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	3710      	adds	r7, #16
 8000e70:	46bd      	mov	sp, r7
 8000e72:	bd80      	pop	{r7, pc}

08000e74 <_ZN19ArduinoJson6101_11011adaptStringEPKc>:

 protected:
  const char* _str;
};

inline ConstRamStringAdapter adaptString(const char* str) {
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b084      	sub	sp, #16
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
  return ConstRamStringAdapter(str);
 8000e7c:	f107 030c 	add.w	r3, r7, #12
 8000e80:	6879      	ldr	r1, [r7, #4]
 8000e82:	4618      	mov	r0, r3
 8000e84:	f7ff ffc3 	bl	8000e0e <_ZN19ArduinoJson6101_11021ConstRamStringAdapterC1EPKc>
 8000e88:	68fb      	ldr	r3, [r7, #12]
}
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	3710      	adds	r7, #16
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}

08000e92 <_ZN19ArduinoJson6101_11011VariantData7asArrayEv>:

  const char *asString() const;

  bool asBoolean() const;

  CollectionData *asArray() {
 8000e92:	b580      	push	{r7, lr}
 8000e94:	b082      	sub	sp, #8
 8000e96:	af00      	add	r7, sp, #0
 8000e98:	6078      	str	r0, [r7, #4]
    return isArray() ? &_content.asCollection : 0;
 8000e9a:	6878      	ldr	r0, [r7, #4]
 8000e9c:	f000 f81b 	bl	8000ed6 <_ZNK19ArduinoJson6101_11011VariantData7isArrayEv>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d001      	beq.n	8000eaa <_ZN19ArduinoJson6101_11011VariantData7asArrayEv+0x18>
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	e000      	b.n	8000eac <_ZN19ArduinoJson6101_11011VariantData7asArrayEv+0x1a>
 8000eaa:	2300      	movs	r3, #0
  }
 8000eac:	4618      	mov	r0, r3
 8000eae:	3708      	adds	r7, #8
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	bd80      	pop	{r7, pc}

08000eb4 <_ZN19ArduinoJson6101_11011VariantData8asObjectEv>:

  const CollectionData *asArray() const {
    return const_cast<VariantData *>(this)->asArray();
  }

  CollectionData *asObject() {
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b082      	sub	sp, #8
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
    return isObject() ? &_content.asCollection : 0;
 8000ebc:	6878      	ldr	r0, [r7, #4]
 8000ebe:	f000 f81d 	bl	8000efc <_ZNK19ArduinoJson6101_11011VariantData8isObjectEv>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d001      	beq.n	8000ecc <_ZN19ArduinoJson6101_11011VariantData8asObjectEv+0x18>
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	e000      	b.n	8000ece <_ZN19ArduinoJson6101_11011VariantData8asObjectEv+0x1a>
 8000ecc:	2300      	movs	r3, #0
  }
 8000ece:	4618      	mov	r0, r3
 8000ed0:	3708      	adds	r7, #8
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}

08000ed6 <_ZNK19ArduinoJson6101_11011VariantData7isArrayEv>:
      default:
        return true;
    }
  }

  bool isArray() const {
 8000ed6:	b480      	push	{r7}
 8000ed8:	b083      	sub	sp, #12
 8000eda:	af00      	add	r7, sp, #0
 8000edc:	6078      	str	r0, [r7, #4]
    return (_flags & VALUE_IS_ARRAY) != 0;
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	7a1b      	ldrb	r3, [r3, #8]
 8000ee2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	bf14      	ite	ne
 8000eea:	2301      	movne	r3, #1
 8000eec:	2300      	moveq	r3, #0
 8000eee:	b2db      	uxtb	r3, r3
  }
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	370c      	adds	r7, #12
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efa:	4770      	bx	lr

08000efc <_ZNK19ArduinoJson6101_11011VariantData8isObjectEv>:

  bool isString() const {
    return type() == VALUE_IS_LINKED_STRING || type() == VALUE_IS_OWNED_STRING;
  }

  bool isObject() const {
 8000efc:	b480      	push	{r7}
 8000efe:	b083      	sub	sp, #12
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
    return (_flags & VALUE_IS_OBJECT) != 0;
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	7a1b      	ldrb	r3, [r3, #8]
 8000f08:	f003 0320 	and.w	r3, r3, #32
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	bf14      	ite	ne
 8000f10:	2301      	movne	r3, #1
 8000f12:	2300      	moveq	r3, #0
 8000f14:	b2db      	uxtb	r3, r3
  }
 8000f16:	4618      	mov	r0, r3
 8000f18:	370c      	adds	r7, #12
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f20:	4770      	bx	lr

08000f22 <_ZN19ArduinoJson6101_11011VariantData10setBooleanEb>:
  template <typename TAdaptedString>
  void remove(TAdaptedString key) {
    if (isObject()) _content.asCollection.remove(key);
  }

  void setBoolean(bool value) {
 8000f22:	b5b0      	push	{r4, r5, r7, lr}
 8000f24:	b082      	sub	sp, #8
 8000f26:	af00      	add	r7, sp, #0
 8000f28:	6078      	str	r0, [r7, #4]
 8000f2a:	460b      	mov	r3, r1
 8000f2c:	70fb      	strb	r3, [r7, #3]
    setType(VALUE_IS_BOOLEAN);
 8000f2e:	2105      	movs	r1, #5
 8000f30:	6878      	ldr	r0, [r7, #4]
 8000f32:	f000 f895 	bl	8001060 <_ZN19ArduinoJson6101_11011VariantData7setTypeEh>
    _content.asInteger = static_cast<UInt>(value);
 8000f36:	78fb      	ldrb	r3, [r7, #3]
 8000f38:	2200      	movs	r2, #0
 8000f3a:	461c      	mov	r4, r3
 8000f3c:	4615      	mov	r5, r2
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	e9c3 4500 	strd	r4, r5, [r3]
  }
 8000f44:	bf00      	nop
 8000f46:	3708      	adds	r7, #8
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bdb0      	pop	{r4, r5, r7, pc}

08000f4c <_ZN19ArduinoJson6101_11011VariantData8setFloatEd>:

  void setFloat(Float value) {
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b084      	sub	sp, #16
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	60f8      	str	r0, [r7, #12]
 8000f54:	ed87 0b00 	vstr	d0, [r7]
    setType(VALUE_IS_FLOAT);
 8000f58:	2108      	movs	r1, #8
 8000f5a:	68f8      	ldr	r0, [r7, #12]
 8000f5c:	f000 f880 	bl	8001060 <_ZN19ArduinoJson6101_11011VariantData7setTypeEh>
    _content.asFloat = value;
 8000f60:	68f9      	ldr	r1, [r7, #12]
 8000f62:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000f66:	e9c1 2300 	strd	r2, r3, [r1]
  }
 8000f6a:	bf00      	nop
 8000f6c:	3710      	adds	r7, #16
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}

08000f72 <_ZN19ArduinoJson6101_11011VariantData18setPositiveIntegerEy>:
    } else {
      setNegativeInteger(~static_cast<UInt>(value) + 1);
    }
  }

  void setPositiveInteger(UInt value) {
 8000f72:	b580      	push	{r7, lr}
 8000f74:	b084      	sub	sp, #16
 8000f76:	af00      	add	r7, sp, #0
 8000f78:	60f8      	str	r0, [r7, #12]
 8000f7a:	e9c7 2300 	strd	r2, r3, [r7]
    setType(VALUE_IS_POSITIVE_INTEGER);
 8000f7e:	2106      	movs	r1, #6
 8000f80:	68f8      	ldr	r0, [r7, #12]
 8000f82:	f000 f86d 	bl	8001060 <_ZN19ArduinoJson6101_11011VariantData7setTypeEh>
    _content.asInteger = value;
 8000f86:	68f9      	ldr	r1, [r7, #12]
 8000f88:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000f8c:	e9c1 2300 	strd	r2, r3, [r1]
  }
 8000f90:	bf00      	nop
 8000f92:	3710      	adds	r7, #16
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bd80      	pop	{r7, pc}

08000f98 <_ZN19ArduinoJson6101_11011VariantData18setNegativeIntegerEy>:

  void setNegativeInteger(UInt value) {
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b084      	sub	sp, #16
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	60f8      	str	r0, [r7, #12]
 8000fa0:	e9c7 2300 	strd	r2, r3, [r7]
    setType(VALUE_IS_NEGATIVE_INTEGER);
 8000fa4:	2107      	movs	r1, #7
 8000fa6:	68f8      	ldr	r0, [r7, #12]
 8000fa8:	f000 f85a 	bl	8001060 <_ZN19ArduinoJson6101_11011VariantData7setTypeEh>
    _content.asInteger = value;
 8000fac:	68f9      	ldr	r1, [r7, #12]
 8000fae:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000fb2:	e9c1 2300 	strd	r2, r3, [r1]
  }
 8000fb6:	bf00      	nop
 8000fb8:	3710      	adds	r7, #16
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}

08000fbe <_ZN19ArduinoJson6101_11011VariantData7setNullEv>:
    } else {
      setType(VALUE_IS_NULL);
    }
  }

  void setNull() {
 8000fbe:	b580      	push	{r7, lr}
 8000fc0:	b082      	sub	sp, #8
 8000fc2:	af00      	add	r7, sp, #0
 8000fc4:	6078      	str	r0, [r7, #4]
    setType(VALUE_IS_NULL);
 8000fc6:	2100      	movs	r1, #0
 8000fc8:	6878      	ldr	r0, [r7, #4]
 8000fca:	f000 f849 	bl	8001060 <_ZN19ArduinoJson6101_11011VariantData7setTypeEh>
  }
 8000fce:	bf00      	nop
 8000fd0:	3708      	adds	r7, #8
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}

08000fd6 <_ZN19ArduinoJson6101_11011VariantData14setOwnedStringENS_8not_nullIPKcEE>:

  void setOwnedString(not_null<const char *> s) {
 8000fd6:	b580      	push	{r7, lr}
 8000fd8:	b082      	sub	sp, #8
 8000fda:	af00      	add	r7, sp, #0
 8000fdc:	6078      	str	r0, [r7, #4]
 8000fde:	6039      	str	r1, [r7, #0]
    setType(VALUE_IS_OWNED_STRING);
 8000fe0:	2104      	movs	r1, #4
 8000fe2:	6878      	ldr	r0, [r7, #4]
 8000fe4:	f000 f83c 	bl	8001060 <_ZN19ArduinoJson6101_11011VariantData7setTypeEh>
    _content.asString = s.get();
 8000fe8:	463b      	mov	r3, r7
 8000fea:	4618      	mov	r0, r3
 8000fec:	f001 fbf8 	bl	80027e0 <_ZNK19ArduinoJson6101_1108not_nullIPKcE3getEv>
 8000ff0:	4602      	mov	r2, r0
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	601a      	str	r2, [r3, #0]
  }
 8000ff6:	bf00      	nop
 8000ff8:	3708      	adds	r7, #8
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}

08000ffe <_ZN19ArduinoJson6101_11011VariantData7toArrayEv>:
  void setUnsignedInteger(UInt value) {
    setType(VALUE_IS_POSITIVE_INTEGER);
    _content.asInteger = static_cast<UInt>(value);
  }

  CollectionData &toArray() {
 8000ffe:	b580      	push	{r7, lr}
 8001000:	b082      	sub	sp, #8
 8001002:	af00      	add	r7, sp, #0
 8001004:	6078      	str	r0, [r7, #4]
    setType(VALUE_IS_ARRAY);
 8001006:	2140      	movs	r1, #64	@ 0x40
 8001008:	6878      	ldr	r0, [r7, #4]
 800100a:	f000 f829 	bl	8001060 <_ZN19ArduinoJson6101_11011VariantData7setTypeEh>
    _content.asCollection.clear();
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	4618      	mov	r0, r3
 8001012:	f000 f957 	bl	80012c4 <_ZN19ArduinoJson6101_11014CollectionData5clearEv>
    return _content.asCollection;
 8001016:	687b      	ldr	r3, [r7, #4]
  }
 8001018:	4618      	mov	r0, r3
 800101a:	3708      	adds	r7, #8
 800101c:	46bd      	mov	sp, r7
 800101e:	bd80      	pop	{r7, pc}

08001020 <_ZN19ArduinoJson6101_11011VariantData8toObjectEv>:

  CollectionData &toObject() {
 8001020:	b580      	push	{r7, lr}
 8001022:	b082      	sub	sp, #8
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
    setType(VALUE_IS_OBJECT);
 8001028:	2120      	movs	r1, #32
 800102a:	6878      	ldr	r0, [r7, #4]
 800102c:	f000 f818 	bl	8001060 <_ZN19ArduinoJson6101_11011VariantData7setTypeEh>
    _content.asCollection.clear();
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	4618      	mov	r0, r3
 8001034:	f000 f946 	bl	80012c4 <_ZN19ArduinoJson6101_11014CollectionData5clearEv>
    return _content.asCollection;
 8001038:	687b      	ldr	r3, [r7, #4]
  }
 800103a:	4618      	mov	r0, r3
 800103c:	3708      	adds	r7, #8
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}

08001042 <_ZNK19ArduinoJson6101_11011VariantData4typeEv>:
    if (var) return var;
    return _content.asCollection.add(key, pool);
  }

 private:
  uint8_t type() const {
 8001042:	b480      	push	{r7}
 8001044:	b083      	sub	sp, #12
 8001046:	af00      	add	r7, sp, #0
 8001048:	6078      	str	r0, [r7, #4]
    return _flags & VALUE_MASK;
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	7a1b      	ldrb	r3, [r3, #8]
 800104e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001052:	b2db      	uxtb	r3, r3
  }
 8001054:	4618      	mov	r0, r3
 8001056:	370c      	adds	r7, #12
 8001058:	46bd      	mov	sp, r7
 800105a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105e:	4770      	bx	lr

08001060 <_ZN19ArduinoJson6101_11011VariantData7setTypeEh>:

  void setType(uint8_t t) {
 8001060:	b480      	push	{r7}
 8001062:	b083      	sub	sp, #12
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
 8001068:	460b      	mov	r3, r1
 800106a:	70fb      	strb	r3, [r7, #3]
    _flags &= KEY_IS_OWNED;
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	7a1b      	ldrb	r3, [r3, #8]
 8001070:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8001074:	b2da      	uxtb	r2, r3
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	721a      	strb	r2, [r3, #8]
    _flags |= t;
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	7a1a      	ldrb	r2, [r3, #8]
 800107e:	78fb      	ldrb	r3, [r7, #3]
 8001080:	4313      	orrs	r3, r2
 8001082:	b2da      	uxtb	r2, r3
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	721a      	strb	r2, [r3, #8]
  }
 8001088:	bf00      	nop
 800108a:	370c      	adds	r7, #12
 800108c:	46bd      	mov	sp, r7
 800108e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001092:	4770      	bx	lr

08001094 <_ZN19ArduinoJson6101_1108slotDataEPNS_11VariantSlotE>:
    var = var->next();
  }
  return n;
}

inline VariantData* slotData(VariantSlot* slot) {
 8001094:	b480      	push	{r7}
 8001096:	b083      	sub	sp, #12
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
  return reinterpret_cast<VariantData*>(slot);
 800109c:	687b      	ldr	r3, [r7, #4]
}
 800109e:	4618      	mov	r0, r3
 80010a0:	370c      	adds	r7, #12
 80010a2:	46bd      	mov	sp, r7
 80010a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a8:	4770      	bx	lr

080010aa <_ZN19ArduinoJson6101_11015variantAsObjectEPNS_11VariantDataE>:

inline const CollectionData *variantAsObject(const VariantData *var) {
  return var != 0 ? var->asObject() : 0;
}

inline CollectionData *variantAsObject(VariantData *var) {
 80010aa:	b580      	push	{r7, lr}
 80010ac:	b082      	sub	sp, #8
 80010ae:	af00      	add	r7, sp, #0
 80010b0:	6078      	str	r0, [r7, #4]
  return var != 0 ? var->asObject() : 0;
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d004      	beq.n	80010c2 <_ZN19ArduinoJson6101_11015variantAsObjectEPNS_11VariantDataE+0x18>
 80010b8:	6878      	ldr	r0, [r7, #4]
 80010ba:	f7ff fefb 	bl	8000eb4 <_ZN19ArduinoJson6101_11011VariantData8asObjectEv>
 80010be:	4603      	mov	r3, r0
 80010c0:	e000      	b.n	80010c4 <_ZN19ArduinoJson6101_11015variantAsObjectEPNS_11VariantDataE+0x1a>
 80010c2:	2300      	movs	r3, #0
}
 80010c4:	4618      	mov	r0, r3
 80010c6:	3708      	adds	r7, #8
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd80      	pop	{r7, pc}

080010cc <_ZN19ArduinoJson6101_11013ArrayIteratorC1Ev>:
  VariantRef _variant;
};

class ArrayIterator {
 public:
  ArrayIterator() : _slot(0) {}
 80010cc:	b480      	push	{r7}
 80010ce:	b083      	sub	sp, #12
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	2200      	movs	r2, #0
 80010d8:	605a      	str	r2, [r3, #4]
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	4618      	mov	r0, r3
 80010de:	370c      	adds	r7, #12
 80010e0:	46bd      	mov	sp, r7
 80010e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e6:	4770      	bx	lr

080010e8 <_ZN19ArduinoJson6101_11013ArrayIteratorC1EPNS_10MemoryPoolEPNS_11VariantSlotE>:
  explicit ArrayIterator(MemoryPool *pool, VariantSlot *slot)
 80010e8:	b480      	push	{r7}
 80010ea:	b085      	sub	sp, #20
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	60f8      	str	r0, [r7, #12]
 80010f0:	60b9      	str	r1, [r7, #8]
 80010f2:	607a      	str	r2, [r7, #4]
      : _pool(pool), _slot(slot) {}
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	68ba      	ldr	r2, [r7, #8]
 80010f8:	601a      	str	r2, [r3, #0]
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	687a      	ldr	r2, [r7, #4]
 80010fe:	605a      	str	r2, [r3, #4]
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	4618      	mov	r0, r3
 8001104:	3714      	adds	r7, #20
 8001106:	46bd      	mov	sp, r7
 8001108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110c:	4770      	bx	lr

0800110e <_ZNK19ArduinoJson6101_11013ArrayIteratordeEv>:

  VariantRef operator*() const {
 800110e:	b590      	push	{r4, r7, lr}
 8001110:	b085      	sub	sp, #20
 8001112:	af00      	add	r7, sp, #0
 8001114:	6078      	str	r0, [r7, #4]
 8001116:	6039      	str	r1, [r7, #0]
    return VariantRef(_pool, _slot->data());
 8001118:	683b      	ldr	r3, [r7, #0]
 800111a:	681c      	ldr	r4, [r3, #0]
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	685b      	ldr	r3, [r3, #4]
 8001120:	4618      	mov	r0, r3
 8001122:	f7ff fd35 	bl	8000b90 <_ZN19ArduinoJson6101_11011VariantSlot4dataEv>
 8001126:	4603      	mov	r3, r0
 8001128:	60fc      	str	r4, [r7, #12]
 800112a:	60bb      	str	r3, [r7, #8]
  friend class VariantConstRef;

 public:
  // Intenal use only
  FORCE_INLINE VariantRef(MemoryPool *pool, VariantData *data)
      : base_type(data), _pool(pool) {}
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	68b9      	ldr	r1, [r7, #8]
 8001130:	4618      	mov	r0, r3
 8001132:	f001 fb7d 	bl	8002830 <_ZN19ArduinoJson6101_11014VariantRefBaseINS_11VariantDataEEC1EPS1_>
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	68fa      	ldr	r2, [r7, #12]
 800113a:	605a      	str	r2, [r3, #4]
 800113c:	bf00      	nop
  }
 800113e:	6878      	ldr	r0, [r7, #4]
 8001140:	3714      	adds	r7, #20
 8001142:	46bd      	mov	sp, r7
 8001144:	bd90      	pop	{r4, r7, pc}

08001146 <_ZNK19ArduinoJson6101_11013ArrayIteratorneERKS0_>:

  bool operator==(const ArrayIterator &other) const {
    return _slot == other._slot;
  }

  bool operator!=(const ArrayIterator &other) const {
 8001146:	b480      	push	{r7}
 8001148:	b083      	sub	sp, #12
 800114a:	af00      	add	r7, sp, #0
 800114c:	6078      	str	r0, [r7, #4]
 800114e:	6039      	str	r1, [r7, #0]
    return _slot != other._slot;
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	685a      	ldr	r2, [r3, #4]
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	685b      	ldr	r3, [r3, #4]
 8001158:	429a      	cmp	r2, r3
 800115a:	bf14      	ite	ne
 800115c:	2301      	movne	r3, #1
 800115e:	2300      	moveq	r3, #0
 8001160:	b2db      	uxtb	r3, r3
  }
 8001162:	4618      	mov	r0, r3
 8001164:	370c      	adds	r7, #12
 8001166:	46bd      	mov	sp, r7
 8001168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116c:	4770      	bx	lr

0800116e <_ZN19ArduinoJson6101_11013ArrayIteratorppEv>:

  ArrayIterator &operator++() {
 800116e:	b580      	push	{r7, lr}
 8001170:	b082      	sub	sp, #8
 8001172:	af00      	add	r7, sp, #0
 8001174:	6078      	str	r0, [r7, #4]
    _slot = _slot->next();
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	685b      	ldr	r3, [r3, #4]
 800117a:	4618      	mov	r0, r3
 800117c:	f7ff fd13 	bl	8000ba6 <_ZN19ArduinoJson6101_11011VariantSlot4nextEv>
 8001180:	4602      	mov	r2, r0
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	605a      	str	r2, [r3, #4]
    return *this;
 8001186:	687b      	ldr	r3, [r7, #4]
  }
 8001188:	4618      	mov	r0, r3
 800118a:	3708      	adds	r7, #8
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}

08001190 <_ZN19ArduinoJson6101_11012JsonDocument5clearEv>:
  template <typename T>
  typename VariantConstAs<T>::type as() const {
    return getVariant().template as<T>();
  }

  void clear() {
 8001190:	b580      	push	{r7, lr}
 8001192:	b082      	sub	sp, #8
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
    _pool.clear();
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	4618      	mov	r0, r3
 800119c:	f7ff fde7 	bl	8000d6e <_ZN19ArduinoJson6101_11010MemoryPool5clearEv>
    _data.setNull();
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	3310      	adds	r3, #16
 80011a4:	4618      	mov	r0, r3
 80011a6:	f7ff ff0a 	bl	8000fbe <_ZN19ArduinoJson6101_11011VariantData7setNullEv>
  }
 80011aa:	bf00      	nop
 80011ac:	3708      	adds	r7, #8
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}

080011b2 <_ZN19ArduinoJson6101_11012JsonDocument10memoryPoolEv>:
    clear();
    return getVariant().template to<T>();
  }

  // for internal use only
  MemoryPool& memoryPool() {
 80011b2:	b480      	push	{r7}
 80011b4:	b083      	sub	sp, #12
 80011b6:	af00      	add	r7, sp, #0
 80011b8:	6078      	str	r0, [r7, #4]
    return _pool;
 80011ba:	687b      	ldr	r3, [r7, #4]
  }
 80011bc:	4618      	mov	r0, r3
 80011be:	370c      	adds	r7, #12
 80011c0:	46bd      	mov	sp, r7
 80011c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c6:	4770      	bx	lr

080011c8 <_ZN19ArduinoJson6101_11012JsonDocument4dataEv>:

  VariantData& data() {
 80011c8:	b480      	push	{r7}
 80011ca:	b083      	sub	sp, #12
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
    return _data;
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	3310      	adds	r3, #16
  }
 80011d4:	4618      	mov	r0, r3
 80011d6:	370c      	adds	r7, #12
 80011d8:	46bd      	mov	sp, r7
 80011da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011de:	4770      	bx	lr

080011e0 <_ZN19ArduinoJson6101_11012JsonDocumentC1ENS_10MemoryPoolE>:
      const TString& key) {
    _data.remove(adaptString(key));
  }

 protected:
  JsonDocument(MemoryPool pool) : _pool(pool) {
 80011e0:	b084      	sub	sp, #16
 80011e2:	b590      	push	{r4, r7, lr}
 80011e4:	b083      	sub	sp, #12
 80011e6:	af00      	add	r7, sp, #0
 80011e8:	6078      	str	r0, [r7, #4]
 80011ea:	f107 001c 	add.w	r0, r7, #28
 80011ee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	461c      	mov	r4, r3
 80011f6:	f107 031c 	add.w	r3, r7, #28
 80011fa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80011fc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    _data.setNull();
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	3310      	adds	r3, #16
 8001204:	4618      	mov	r0, r3
 8001206:	f7ff feda 	bl	8000fbe <_ZN19ArduinoJson6101_11011VariantData7setNullEv>
  }
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	4618      	mov	r0, r3
 800120e:	370c      	adds	r7, #12
 8001210:	46bd      	mov	sp, r7
 8001212:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8001216:	b004      	add	sp, #16
 8001218:	4770      	bx	lr

0800121a <_ZN19ArduinoJson6101_11016DefaultAllocator8allocateEj>:
#include <stdlib.h>  // malloc, free

namespace ARDUINOJSON_NAMESPACE {

struct DefaultAllocator {
  void* allocate(size_t n) {
 800121a:	b580      	push	{r7, lr}
 800121c:	b082      	sub	sp, #8
 800121e:	af00      	add	r7, sp, #0
 8001220:	6078      	str	r0, [r7, #4]
 8001222:	6039      	str	r1, [r7, #0]
    return malloc(n);
 8001224:	6838      	ldr	r0, [r7, #0]
 8001226:	f011 fb37 	bl	8012898 <malloc>
 800122a:	4603      	mov	r3, r0
  }
 800122c:	4618      	mov	r0, r3
 800122e:	3708      	adds	r7, #8
 8001230:	46bd      	mov	sp, r7
 8001232:	bd80      	pop	{r7, pc}

08001234 <_ZN19ArduinoJson6101_11016DefaultAllocator10deallocateEPv>:

  void deallocate(void* p) {
 8001234:	b580      	push	{r7, lr}
 8001236:	b082      	sub	sp, #8
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
 800123c:	6039      	str	r1, [r7, #0]
    free(p);
 800123e:	6838      	ldr	r0, [r7, #0]
 8001240:	f011 fb32 	bl	80128a8 <free>
  }
 8001244:	bf00      	nop
 8001246:	3708      	adds	r7, #8
 8001248:	46bd      	mov	sp, r7
 800124a:	bd80      	pop	{r7, pc}

0800124c <_ZN19ArduinoJson6101_11014CollectionData7addSlotEPNS_10MemoryPoolE>:
#include "../Variant/VariantData.hpp"
#include "CollectionData.hpp"

namespace ARDUINOJSON_NAMESPACE {

inline VariantSlot* CollectionData::addSlot(MemoryPool* pool) {
 800124c:	b580      	push	{r7, lr}
 800124e:	b084      	sub	sp, #16
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
 8001254:	6039      	str	r1, [r7, #0]
  VariantSlot* slot = pool->allocVariant();
 8001256:	6838      	ldr	r0, [r7, #0]
 8001258:	f7ff fd47 	bl	8000cea <_ZN19ArduinoJson6101_11010MemoryPool12allocVariantEv>
 800125c:	60f8      	str	r0, [r7, #12]
  if (!slot) return 0;
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	2b00      	cmp	r3, #0
 8001262:	d101      	bne.n	8001268 <_ZN19ArduinoJson6101_11014CollectionData7addSlotEPNS_10MemoryPoolE+0x1c>
 8001264:	2300      	movs	r3, #0
 8001266:	e017      	b.n	8001298 <_ZN19ArduinoJson6101_11014CollectionData7addSlotEPNS_10MemoryPoolE+0x4c>

  if (_tail) {
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	685b      	ldr	r3, [r3, #4]
 800126c:	2b00      	cmp	r3, #0
 800126e:	d009      	beq.n	8001284 <_ZN19ArduinoJson6101_11014CollectionData7addSlotEPNS_10MemoryPoolE+0x38>
    _tail->setNextNotNull(slot);
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	685b      	ldr	r3, [r3, #4]
 8001274:	68f9      	ldr	r1, [r7, #12]
 8001276:	4618      	mov	r0, r3
 8001278:	f7ff fcac 	bl	8000bd4 <_ZN19ArduinoJson6101_11011VariantSlot14setNextNotNullEPS0_>
    _tail = slot;
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	68fa      	ldr	r2, [r7, #12]
 8001280:	605a      	str	r2, [r3, #4]
 8001282:	e005      	b.n	8001290 <_ZN19ArduinoJson6101_11014CollectionData7addSlotEPNS_10MemoryPoolE+0x44>
  } else {
    _head = slot;
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	68fa      	ldr	r2, [r7, #12]
 8001288:	601a      	str	r2, [r3, #0]
    _tail = slot;
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	68fa      	ldr	r2, [r7, #12]
 800128e:	605a      	str	r2, [r3, #4]
  }

  slot->clear();
 8001290:	68f8      	ldr	r0, [r7, #12]
 8001292:	f7ff fcd4 	bl	8000c3e <_ZN19ArduinoJson6101_11011VariantSlot5clearEv>
  return slot;
 8001296:	68fb      	ldr	r3, [r7, #12]
}
 8001298:	4618      	mov	r0, r3
 800129a:	3710      	adds	r7, #16
 800129c:	46bd      	mov	sp, r7
 800129e:	bd80      	pop	{r7, pc}

080012a0 <_ZN19ArduinoJson6101_11014CollectionData3addEPNS_10MemoryPoolE>:

inline VariantData* CollectionData::add(MemoryPool* pool) {
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b082      	sub	sp, #8
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
 80012a8:	6039      	str	r1, [r7, #0]
  return slotData(addSlot(pool));
 80012aa:	6839      	ldr	r1, [r7, #0]
 80012ac:	6878      	ldr	r0, [r7, #4]
 80012ae:	f7ff ffcd 	bl	800124c <_ZN19ArduinoJson6101_11014CollectionData7addSlotEPNS_10MemoryPoolE>
 80012b2:	4603      	mov	r3, r0
 80012b4:	4618      	mov	r0, r3
 80012b6:	f7ff feed 	bl	8001094 <_ZN19ArduinoJson6101_1108slotDataEPNS_11VariantSlotE>
 80012ba:	4603      	mov	r3, r0
}
 80012bc:	4618      	mov	r0, r3
 80012be:	3708      	adds	r7, #8
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bd80      	pop	{r7, pc}

080012c4 <_ZN19ArduinoJson6101_11014CollectionData5clearEv>:
  VariantSlot* slot = addSlot(pool);
  if (!slotSetKey(slot, key, pool)) return 0;
  return slot->data();
}

inline void CollectionData::clear() {
 80012c4:	b480      	push	{r7}
 80012c6:	b083      	sub	sp, #12
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
  _head = 0;
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	2200      	movs	r2, #0
 80012d0:	601a      	str	r2, [r3, #0]
  _tail = 0;
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	2200      	movs	r2, #0
 80012d6:	605a      	str	r2, [r3, #4]
}
 80012d8:	bf00      	nop
 80012da:	370c      	adds	r7, #12
 80012dc:	46bd      	mov	sp, r7
 80012de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e2:	4770      	bx	lr

080012e4 <_ZN19ArduinoJson6101_1107isdigitEc>:

#pragma once

namespace ARDUINOJSON_NAMESPACE {

inline bool isdigit(char c) {
 80012e4:	b480      	push	{r7}
 80012e6:	b083      	sub	sp, #12
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	4603      	mov	r3, r0
 80012ec:	71fb      	strb	r3, [r7, #7]
  return '0' <= c && c <= '9';
 80012ee:	79fb      	ldrb	r3, [r7, #7]
 80012f0:	2b2f      	cmp	r3, #47	@ 0x2f
 80012f2:	d904      	bls.n	80012fe <_ZN19ArduinoJson6101_1107isdigitEc+0x1a>
 80012f4:	79fb      	ldrb	r3, [r7, #7]
 80012f6:	2b39      	cmp	r3, #57	@ 0x39
 80012f8:	d801      	bhi.n	80012fe <_ZN19ArduinoJson6101_1107isdigitEc+0x1a>
 80012fa:	2301      	movs	r3, #1
 80012fc:	e000      	b.n	8001300 <_ZN19ArduinoJson6101_1107isdigitEc+0x1c>
 80012fe:	2300      	movs	r3, #0
}
 8001300:	4618      	mov	r0, r3
 8001302:	370c      	adds	r7, #12
 8001304:	46bd      	mov	sp, r7
 8001306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130a:	4770      	bx	lr

0800130c <_ZNK19ArduinoJson6101_11011VariantData8asStringEv>:
    default:
      return 0;
  }
}

inline const char *VariantData::asString() const {
 800130c:	b580      	push	{r7, lr}
 800130e:	b082      	sub	sp, #8
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
  switch (type()) {
 8001314:	6878      	ldr	r0, [r7, #4]
 8001316:	f7ff fe94 	bl	8001042 <_ZNK19ArduinoJson6101_11011VariantData4typeEv>
 800131a:	4603      	mov	r3, r0
 800131c:	3b03      	subs	r3, #3
 800131e:	2b01      	cmp	r3, #1
 8001320:	d802      	bhi.n	8001328 <_ZNK19ArduinoJson6101_11011VariantData8asStringEv+0x1c>
    case VALUE_IS_LINKED_STRING:
    case VALUE_IS_OWNED_STRING:
      return _content.asString;
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	e000      	b.n	800132a <_ZNK19ArduinoJson6101_11011VariantData8asStringEv+0x1e>
    default:
      return 0;
 8001328:	2300      	movs	r3, #0
  }
}
 800132a:	4618      	mov	r0, r3
 800132c:	3708      	adds	r7, #8
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}

08001332 <_ZN19ArduinoJson6101_11013StringBuilderC1EPNS_10MemoryPoolE>:

namespace ARDUINOJSON_NAMESPACE {

class StringBuilder {
 public:
  explicit StringBuilder(MemoryPool* parent) : _parent(parent), _size(0) {
 8001332:	b590      	push	{r4, r7, lr}
 8001334:	b085      	sub	sp, #20
 8001336:	af00      	add	r7, sp, #0
 8001338:	60f8      	str	r0, [r7, #12]
 800133a:	60b9      	str	r1, [r7, #8]
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	68ba      	ldr	r2, [r7, #8]
 8001340:	601a      	str	r2, [r3, #0]
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	2200      	movs	r2, #0
 8001346:	605a      	str	r2, [r3, #4]
    _slot = _parent->allocExpandableString();
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	681a      	ldr	r2, [r3, #0]
 800134c:	68fc      	ldr	r4, [r7, #12]
 800134e:	463b      	mov	r3, r7
 8001350:	4611      	mov	r1, r2
 8001352:	4618      	mov	r0, r3
 8001354:	f7ff fcd5 	bl	8000d02 <_ZN19ArduinoJson6101_11010MemoryPool21allocExpandableStringEv>
 8001358:	f104 0308 	add.w	r3, r4, #8
 800135c:	463a      	mov	r2, r7
 800135e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001362:	e883 0003 	stmia.w	r3, {r0, r1}
  }
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	4618      	mov	r0, r3
 800136a:	3714      	adds	r7, #20
 800136c:	46bd      	mov	sp, r7
 800136e:	bd90      	pop	{r4, r7, pc}

08001370 <_ZN19ArduinoJson6101_11013StringBuilder6appendEc>:

  void append(const char* s, size_t n) {
    while (n-- > 0) append(*s++);
  }

  void append(char c) {
 8001370:	b490      	push	{r4, r7}
 8001372:	b082      	sub	sp, #8
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
 8001378:	460b      	mov	r3, r1
 800137a:	70fb      	strb	r3, [r7, #3]
    if (!_slot.value) return;
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	689b      	ldr	r3, [r3, #8]
 8001380:	2b00      	cmp	r3, #0
 8001382:	d015      	beq.n	80013b0 <_ZN19ArduinoJson6101_11013StringBuilder6appendEc+0x40>

    if (_size >= _slot.size) {
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	685a      	ldr	r2, [r3, #4]
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	68db      	ldr	r3, [r3, #12]
 800138c:	429a      	cmp	r2, r3
 800138e:	d303      	bcc.n	8001398 <_ZN19ArduinoJson6101_11013StringBuilder6appendEc+0x28>
      _slot.value = 0;
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	2200      	movs	r2, #0
 8001394:	609a      	str	r2, [r3, #8]
      return;
 8001396:	e00c      	b.n	80013b2 <_ZN19ArduinoJson6101_11013StringBuilder6appendEc+0x42>
    }

    _slot.value[_size++] = c;
 8001398:	78fc      	ldrb	r4, [r7, #3]
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	689a      	ldr	r2, [r3, #8]
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	685b      	ldr	r3, [r3, #4]
 80013a2:	1c58      	adds	r0, r3, #1
 80013a4:	6879      	ldr	r1, [r7, #4]
 80013a6:	6048      	str	r0, [r1, #4]
 80013a8:	4413      	add	r3, r2
 80013aa:	4622      	mov	r2, r4
 80013ac:	701a      	strb	r2, [r3, #0]
 80013ae:	e000      	b.n	80013b2 <_ZN19ArduinoJson6101_11013StringBuilder6appendEc+0x42>
    if (!_slot.value) return;
 80013b0:	bf00      	nop
  }
 80013b2:	3708      	adds	r7, #8
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bc90      	pop	{r4, r7}
 80013b8:	4770      	bx	lr

080013ba <_ZN19ArduinoJson6101_11013StringBuilder8completeEv>:

  char* complete() {
 80013ba:	b580      	push	{r7, lr}
 80013bc:	b082      	sub	sp, #8
 80013be:	af00      	add	r7, sp, #0
 80013c0:	6078      	str	r0, [r7, #4]
    append('\0');
 80013c2:	2100      	movs	r1, #0
 80013c4:	6878      	ldr	r0, [r7, #4]
 80013c6:	f7ff ffd3 	bl	8001370 <_ZN19ArduinoJson6101_11013StringBuilder6appendEc>
    if (_slot.value) {
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	689b      	ldr	r3, [r3, #8]
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d009      	beq.n	80013e6 <_ZN19ArduinoJson6101_11013StringBuilder8completeEv+0x2c>
      _parent->freezeString(_slot, _size);
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	6818      	ldr	r0, [r3, #0]
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	f103 0108 	add.w	r1, r3, #8
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	685b      	ldr	r3, [r3, #4]
 80013e0:	461a      	mov	r2, r3
 80013e2:	f7ff fcab 	bl	8000d3c <_ZN19ArduinoJson6101_11010MemoryPool12freezeStringERNS_10StringSlotEj>
    }
    return _slot.value;
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	689b      	ldr	r3, [r3, #8]
  }
 80013ea:	4618      	mov	r0, r3
 80013ec:	3708      	adds	r7, #8
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}

080013f2 <_ZN19ArduinoJson6101_11012StringCopierC1EPNS_10MemoryPoolE>:

class StringCopier {
 public:
  typedef ARDUINOJSON_NAMESPACE::StringBuilder StringBuilder;

  StringCopier(MemoryPool* pool) : _pool(pool) {}
 80013f2:	b480      	push	{r7}
 80013f4:	b083      	sub	sp, #12
 80013f6:	af00      	add	r7, sp, #0
 80013f8:	6078      	str	r0, [r7, #4]
 80013fa:	6039      	str	r1, [r7, #0]
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	683a      	ldr	r2, [r7, #0]
 8001400:	601a      	str	r2, [r3, #0]
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	4618      	mov	r0, r3
 8001406:	370c      	adds	r7, #12
 8001408:	46bd      	mov	sp, r7
 800140a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140e:	4770      	bx	lr

08001410 <_ZN19ArduinoJson6101_11012StringCopier11startStringEv>:

  StringBuilder startString() {
 8001410:	b580      	push	{r7, lr}
 8001412:	b082      	sub	sp, #8
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
 8001418:	6039      	str	r1, [r7, #0]
    return StringBuilder(_pool);
 800141a:	683b      	ldr	r3, [r7, #0]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	4619      	mov	r1, r3
 8001420:	6878      	ldr	r0, [r7, #4]
 8001422:	f7ff ff86 	bl	8001332 <_ZN19ArduinoJson6101_11013StringBuilderC1EPNS_10MemoryPoolE>
  }
 8001426:	6878      	ldr	r0, [r7, #4]
 8001428:	3708      	adds	r7, #8
 800142a:	46bd      	mov	sp, r7
 800142c:	bd80      	pop	{r7, pc}
	...

08001430 <_ZN19ArduinoJson6101_11023UnsafeCharPointerReaderC1EPKc>:

class UnsafeCharPointerReader {
  const char* _ptr;

 public:
  explicit UnsafeCharPointerReader(const char* ptr)
 8001430:	b480      	push	{r7}
 8001432:	b083      	sub	sp, #12
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
 8001438:	6039      	str	r1, [r7, #0]
      : _ptr(ptr ? ptr : reinterpret_cast<const char*>("")) {}
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	2b00      	cmp	r3, #0
 800143e:	d001      	beq.n	8001444 <_ZN19ArduinoJson6101_11023UnsafeCharPointerReaderC1EPKc+0x14>
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	e000      	b.n	8001446 <_ZN19ArduinoJson6101_11023UnsafeCharPointerReaderC1EPKc+0x16>
 8001444:	4b04      	ldr	r3, [pc, #16]	@ (8001458 <_ZN19ArduinoJson6101_11023UnsafeCharPointerReaderC1EPKc+0x28>)
 8001446:	687a      	ldr	r2, [r7, #4]
 8001448:	6013      	str	r3, [r2, #0]
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	4618      	mov	r0, r3
 800144e:	370c      	adds	r7, #12
 8001450:	46bd      	mov	sp, r7
 8001452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001456:	4770      	bx	lr
 8001458:	08013a1c 	.word	0x08013a1c

0800145c <_ZN19ArduinoJson6101_11023UnsafeCharPointerReader4readEv>:

  char read() {
 800145c:	b480      	push	{r7}
 800145e:	b083      	sub	sp, #12
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
    return static_cast<char>(*_ptr++);
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	1c59      	adds	r1, r3, #1
 800146a:	687a      	ldr	r2, [r7, #4]
 800146c:	6011      	str	r1, [r2, #0]
 800146e:	781b      	ldrb	r3, [r3, #0]
  }
 8001470:	4618      	mov	r0, r3
 8001472:	370c      	adds	r7, #12
 8001474:	46bd      	mov	sp, r7
 8001476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147a:	4770      	bx	lr

0800147c <_ZNK19ArduinoJson6101_11023UnsafeCharPointerReader5endedEv>:

  bool ended() const {
 800147c:	b480      	push	{r7}
 800147e:	b083      	sub	sp, #12
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
    // we cannot know, that's why it's unsafe
    return false;
 8001484:	2300      	movs	r3, #0
  }
 8001486:	4618      	mov	r0, r3
 8001488:	370c      	adds	r7, #12
 800148a:	46bd      	mov	sp, r7
 800148c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001490:	4770      	bx	lr

08001492 <_ZNK19ArduinoJson6101_11020DeserializationError14safeBoolHelperEv>:
namespace ARDUINOJSON_NAMESPACE {

class DeserializationError {
  // safe bool idiom
  typedef void (DeserializationError::*bool_type)() const;
  void safeBoolHelper() const {}
 8001492:	b480      	push	{r7}
 8001494:	b083      	sub	sp, #12
 8001496:	af00      	add	r7, sp, #0
 8001498:	6078      	str	r0, [r7, #4]
 800149a:	bf00      	nop
 800149c:	370c      	adds	r7, #12
 800149e:	46bd      	mov	sp, r7
 80014a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a4:	4770      	bx	lr

080014a6 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>:
    NotSupported,
    TooDeep
  };

  DeserializationError() {}
  DeserializationError(Code c) : _code(c) {}
 80014a6:	b480      	push	{r7}
 80014a8:	b083      	sub	sp, #12
 80014aa:	af00      	add	r7, sp, #0
 80014ac:	6078      	str	r0, [r7, #4]
 80014ae:	460b      	mov	r3, r1
 80014b0:	70fb      	strb	r3, [r7, #3]
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	78fa      	ldrb	r2, [r7, #3]
 80014b6:	701a      	strb	r2, [r3, #0]
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	4618      	mov	r0, r3
 80014bc:	370c      	adds	r7, #12
 80014be:	46bd      	mov	sp, r7
 80014c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c4:	4770      	bx	lr
	...

080014c8 <_ZNK19ArduinoJson6101_11020DeserializationErrorcvMS0_KFvvEEv>:
  friend bool operator!=(Code lhs, const DeserializationError& rhs) {
    return lhs != rhs._code;
  }

  // Behaves like a bool
  operator bool_type() const {
 80014c8:	b480      	push	{r7}
 80014ca:	b083      	sub	sp, #12
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
 80014d0:	6039      	str	r1, [r7, #0]
    return _code != Ok ? &DeserializationError::safeBoolHelper : 0;
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	781b      	ldrb	r3, [r3, #0]
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d106      	bne.n	80014e8 <_ZNK19ArduinoJson6101_11020DeserializationErrorcvMS0_KFvvEEv+0x20>
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	2200      	movs	r2, #0
 80014de:	601a      	str	r2, [r3, #0]
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	2200      	movs	r2, #0
 80014e4:	605a      	str	r2, [r3, #4]
 80014e6:	e005      	b.n	80014f4 <_ZNK19ArduinoJson6101_11020DeserializationErrorcvMS0_KFvvEEv+0x2c>
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	4a05      	ldr	r2, [pc, #20]	@ (8001500 <_ZNK19ArduinoJson6101_11020DeserializationErrorcvMS0_KFvvEEv+0x38>)
 80014ec:	601a      	str	r2, [r3, #0]
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	2200      	movs	r2, #0
 80014f2:	605a      	str	r2, [r3, #4]
  }
 80014f4:	6878      	ldr	r0, [r7, #4]
 80014f6:	370c      	adds	r7, #12
 80014f8:	46bd      	mov	sp, r7
 80014fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fe:	4770      	bx	lr
 8001500:	08001493 	.word	0x08001493

08001504 <_ZNK19ArduinoJson6101_11020DeserializationError4codeEv>:
  friend bool operator!=(const DeserializationError& err, bool value) {
    return static_cast<bool>(err) != value;
  }

  // Returns internal enum, useful for switch statement
  Code code() const {
 8001504:	b480      	push	{r7}
 8001506:	b083      	sub	sp, #12
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
    return _code;
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	781b      	ldrb	r3, [r3, #0]
  }
 8001510:	4618      	mov	r0, r3
 8001512:	370c      	adds	r7, #12
 8001514:	46bd      	mov	sp, r7
 8001516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151a:	4770      	bx	lr

0800151c <_ZNK19ArduinoJson6101_11020DeserializationError5c_strEv>:

  const char* c_str() const {
 800151c:	b480      	push	{r7}
 800151e:	b083      	sub	sp, #12
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
    switch (_code) {
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	781b      	ldrb	r3, [r3, #0]
 8001528:	2b05      	cmp	r3, #5
 800152a:	d81b      	bhi.n	8001564 <_ZNK19ArduinoJson6101_11020DeserializationError5c_strEv+0x48>
 800152c:	a201      	add	r2, pc, #4	@ (adr r2, 8001534 <_ZNK19ArduinoJson6101_11020DeserializationError5c_strEv+0x18>)
 800152e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001532:	bf00      	nop
 8001534:	0800154d 	.word	0x0800154d
 8001538:	0800155d 	.word	0x0800155d
 800153c:	08001559 	.word	0x08001559
 8001540:	08001555 	.word	0x08001555
 8001544:	08001561 	.word	0x08001561
 8001548:	08001551 	.word	0x08001551
      case Ok:
        return "Ok";
 800154c:	4b09      	ldr	r3, [pc, #36]	@ (8001574 <_ZNK19ArduinoJson6101_11020DeserializationError5c_strEv+0x58>)
 800154e:	e00a      	b.n	8001566 <_ZNK19ArduinoJson6101_11020DeserializationError5c_strEv+0x4a>
      case TooDeep:
        return "TooDeep";
 8001550:	4b09      	ldr	r3, [pc, #36]	@ (8001578 <_ZNK19ArduinoJson6101_11020DeserializationError5c_strEv+0x5c>)
 8001552:	e008      	b.n	8001566 <_ZNK19ArduinoJson6101_11020DeserializationError5c_strEv+0x4a>
      case NoMemory:
        return "NoMemory";
 8001554:	4b09      	ldr	r3, [pc, #36]	@ (800157c <_ZNK19ArduinoJson6101_11020DeserializationError5c_strEv+0x60>)
 8001556:	e006      	b.n	8001566 <_ZNK19ArduinoJson6101_11020DeserializationError5c_strEv+0x4a>
      case InvalidInput:
        return "InvalidInput";
 8001558:	4b09      	ldr	r3, [pc, #36]	@ (8001580 <_ZNK19ArduinoJson6101_11020DeserializationError5c_strEv+0x64>)
 800155a:	e004      	b.n	8001566 <_ZNK19ArduinoJson6101_11020DeserializationError5c_strEv+0x4a>
      case IncompleteInput:
        return "IncompleteInput";
 800155c:	4b09      	ldr	r3, [pc, #36]	@ (8001584 <_ZNK19ArduinoJson6101_11020DeserializationError5c_strEv+0x68>)
 800155e:	e002      	b.n	8001566 <_ZNK19ArduinoJson6101_11020DeserializationError5c_strEv+0x4a>
      case NotSupported:
        return "NotSupported";
 8001560:	4b09      	ldr	r3, [pc, #36]	@ (8001588 <_ZNK19ArduinoJson6101_11020DeserializationError5c_strEv+0x6c>)
 8001562:	e000      	b.n	8001566 <_ZNK19ArduinoJson6101_11020DeserializationError5c_strEv+0x4a>
      default:
        return "???";
 8001564:	4b09      	ldr	r3, [pc, #36]	@ (800158c <_ZNK19ArduinoJson6101_11020DeserializationError5c_strEv+0x70>)
    }
  }
 8001566:	4618      	mov	r0, r3
 8001568:	370c      	adds	r7, #12
 800156a:	46bd      	mov	sp, r7
 800156c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001570:	4770      	bx	lr
 8001572:	bf00      	nop
 8001574:	08013a20 	.word	0x08013a20
 8001578:	08013a24 	.word	0x08013a24
 800157c:	08013a2c 	.word	0x08013a2c
 8001580:	08013a38 	.word	0x08013a38
 8001584:	08013a48 	.word	0x08013a48
 8001588:	08013a58 	.word	0x08013a58
 800158c:	08013a68 	.word	0x08013a68

08001590 <_ZN19ArduinoJson6101_11012NestingLimitC1Ev>:
#include "../Configuration.hpp"

namespace ARDUINOJSON_NAMESPACE {

struct NestingLimit {
  NestingLimit() : value(ARDUINOJSON_DEFAULT_NESTING_LIMIT) {}
 8001590:	b480      	push	{r7}
 8001592:	b083      	sub	sp, #12
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	2232      	movs	r2, #50	@ 0x32
 800159c:	701a      	strb	r2, [r3, #0]
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	4618      	mov	r0, r3
 80015a2:	370c      	adds	r7, #12
 80015a4:	46bd      	mov	sp, r7
 80015a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015aa:	4770      	bx	lr

080015ac <_ZN19ArduinoJson6101_11014EscapeSequence12unescapeCharEc>:
    }
    return p[0];
  }

  // Optimized for code size on a 8-bit AVR
  static char unescapeChar(char c) {
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b084      	sub	sp, #16
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	4603      	mov	r3, r0
 80015b4:	71fb      	strb	r3, [r7, #7]
    const char *p = escapeTable(true);
 80015b6:	2001      	movs	r0, #1
 80015b8:	f000 f818 	bl	80015ec <_ZN19ArduinoJson6101_11014EscapeSequence11escapeTableEb>
 80015bc:	60f8      	str	r0, [r7, #12]
    for (;;) {
      if (p[0] == '\0') return c;
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	781b      	ldrb	r3, [r3, #0]
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d101      	bne.n	80015ca <_ZN19ArduinoJson6101_11014EscapeSequence12unescapeCharEc+0x1e>
 80015c6:	79fb      	ldrb	r3, [r7, #7]
 80015c8:	e00c      	b.n	80015e4 <_ZN19ArduinoJson6101_11014EscapeSequence12unescapeCharEc+0x38>
      if (p[0] == c) return p[1];
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	781b      	ldrb	r3, [r3, #0]
 80015ce:	79fa      	ldrb	r2, [r7, #7]
 80015d0:	429a      	cmp	r2, r3
 80015d2:	d103      	bne.n	80015dc <_ZN19ArduinoJson6101_11014EscapeSequence12unescapeCharEc+0x30>
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	3301      	adds	r3, #1
 80015d8:	781b      	ldrb	r3, [r3, #0]
 80015da:	e003      	b.n	80015e4 <_ZN19ArduinoJson6101_11014EscapeSequence12unescapeCharEc+0x38>
      p += 2;
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	3302      	adds	r3, #2
 80015e0:	60fb      	str	r3, [r7, #12]
      if (p[0] == '\0') return c;
 80015e2:	e7ec      	b.n	80015be <_ZN19ArduinoJson6101_11014EscapeSequence12unescapeCharEc+0x12>
    }
  }
 80015e4:	4618      	mov	r0, r3
 80015e6:	3710      	adds	r7, #16
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bd80      	pop	{r7, pc}

080015ec <_ZN19ArduinoJson6101_11014EscapeSequence11escapeTableEb>:

 private:
  static const char *escapeTable(bool excludeIdenticals) {
 80015ec:	b480      	push	{r7}
 80015ee:	b083      	sub	sp, #12
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	4603      	mov	r3, r0
 80015f4:	71fb      	strb	r3, [r7, #7]
    return &"\"\"\\\\b\bf\fn\nr\rt\t"[excludeIdenticals ? 4 : 0];
 80015f6:	79fb      	ldrb	r3, [r7, #7]
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d001      	beq.n	8001600 <_ZN19ArduinoJson6101_11014EscapeSequence11escapeTableEb+0x14>
 80015fc:	2304      	movs	r3, #4
 80015fe:	e000      	b.n	8001602 <_ZN19ArduinoJson6101_11014EscapeSequence11escapeTableEb+0x16>
 8001600:	2300      	movs	r3, #0
 8001602:	4a04      	ldr	r2, [pc, #16]	@ (8001614 <_ZN19ArduinoJson6101_11014EscapeSequence11escapeTableEb+0x28>)
 8001604:	4413      	add	r3, r2
  }
 8001606:	4618      	mov	r0, r3
 8001608:	370c      	adds	r7, #12
 800160a:	46bd      	mov	sp, r7
 800160c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001610:	4770      	bx	lr
 8001612:	bf00      	nop
 8001614:	08013a6c 	.word	0x08013a6c

08001618 <EXTI4_IRQHandler>:
#include "interrupt.h"

extern "C" {

	void EXTI4_IRQHandler()
	{
 8001618:	b580      	push	{r7, lr}
 800161a:	af00      	add	r7, sp, #0
		// Chip select pin is PC_4 (EXTI4 PIN 4)
		if(__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_4) != RESET)
 800161c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001620:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001624:	f003 0310 	and.w	r3, r3, #16
 8001628:	2b00      	cmp	r3, #0
 800162a:	bf14      	ite	ne
 800162c:	2301      	movne	r3, #1
 800162e:	2300      	moveq	r3, #0
 8001630:	b2db      	uxtb	r3, r3
 8001632:	2b00      	cmp	r3, #0
 8001634:	d006      	beq.n	8001644 <EXTI4_IRQHandler+0x2c>
		{
		__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_4);
 8001636:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800163a:	2210      	movs	r2, #16
 800163c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
		Interrupt::EXTI4_Wrapper();
 8001640:	f7ff fa1c 	bl	8000a7c <_ZN9Interrupt13EXTI4_WrapperEv>
		}
	}
 8001644:	bf00      	nop
 8001646:	bd80      	pop	{r7, pc}

08001648 <DMA1_Stream0_IRQHandler>:

	void DMA1_Stream0_IRQHandler()
	{
 8001648:	b580      	push	{r7, lr}
 800164a:	af00      	add	r7, sp, #0
		// DMA interrupt management in the moduelInterrupt handleInterrupt() routine
		Interrupt::DMA1_Stream0_Wrapper();
 800164c:	f7ff fa24 	bl	8000a98 <_ZN9Interrupt20DMA1_Stream0_WrapperEv>
	}
 8001650:	bf00      	nop
 8001652:	bd80      	pop	{r7, pc}

08001654 <DMA1_Stream1_IRQHandler>:

	void DMA1_Stream1_IRQHandler()
	{
 8001654:	b580      	push	{r7, lr}
 8001656:	af00      	add	r7, sp, #0
		// DMA interrupt management in the moduelInterrupt handleInterrupt() routine
		Interrupt::DMA1_Stream1_Wrapper();
 8001658:	f7ff fa2c 	bl	8000ab4 <_ZN9Interrupt20DMA1_Stream1_WrapperEv>
	}
 800165c:	bf00      	nop
 800165e:	bd80      	pop	{r7, pc}

08001660 <TIM2_IRQHandler>:


	void TIM2_IRQHandler()
	{
 8001660:	b580      	push	{r7, lr}
 8001662:	af00      	add	r7, sp, #0
	  if(TIM2->SR & TIM_SR_UIF) // if UIF flag is set
 8001664:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001668:	691b      	ldr	r3, [r3, #16]
 800166a:	f003 0301 	and.w	r3, r3, #1
 800166e:	2b00      	cmp	r3, #0
 8001670:	bf14      	ite	ne
 8001672:	2301      	movne	r3, #1
 8001674:	2300      	moveq	r3, #0
 8001676:	b2db      	uxtb	r3, r3
 8001678:	2b00      	cmp	r3, #0
 800167a:	d009      	beq.n	8001690 <TIM2_IRQHandler+0x30>
	  {
		TIM2->SR &= ~TIM_SR_UIF; // clear UIF flag
 800167c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001680:	691b      	ldr	r3, [r3, #16]
 8001682:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001686:	f023 0301 	bic.w	r3, r3, #1
 800168a:	6113      	str	r3, [r2, #16]

		Interrupt::TIM2_Wrapper();
 800168c:	f7ff fa20 	bl	8000ad0 <_ZN9Interrupt12TIM2_WrapperEv>
	  }
	}
 8001690:	bf00      	nop
 8001692:	bd80      	pop	{r7, pc}

08001694 <TIM3_IRQHandler>:


	void TIM3_IRQHandler()
	{
 8001694:	b580      	push	{r7, lr}
 8001696:	af00      	add	r7, sp, #0
	  if(TIM3->SR & TIM_SR_UIF) // if UIF flag is set
 8001698:	4b0a      	ldr	r3, [pc, #40]	@ (80016c4 <TIM3_IRQHandler+0x30>)
 800169a:	691b      	ldr	r3, [r3, #16]
 800169c:	f003 0301 	and.w	r3, r3, #1
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	bf14      	ite	ne
 80016a4:	2301      	movne	r3, #1
 80016a6:	2300      	moveq	r3, #0
 80016a8:	b2db      	uxtb	r3, r3
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d007      	beq.n	80016be <TIM3_IRQHandler+0x2a>
	  {
		TIM3->SR &= ~TIM_SR_UIF; // clear UIF flag
 80016ae:	4b05      	ldr	r3, [pc, #20]	@ (80016c4 <TIM3_IRQHandler+0x30>)
 80016b0:	691b      	ldr	r3, [r3, #16]
 80016b2:	4a04      	ldr	r2, [pc, #16]	@ (80016c4 <TIM3_IRQHandler+0x30>)
 80016b4:	f023 0301 	bic.w	r3, r3, #1
 80016b8:	6113      	str	r3, [r2, #16]

		Interrupt::TIM3_Wrapper();
 80016ba:	f7ff fa17 	bl	8000aec <_ZN9Interrupt12TIM3_WrapperEv>
	  }
	}
 80016be:	bf00      	nop
 80016c0:	bd80      	pop	{r7, pc}
 80016c2:	bf00      	nop
 80016c4:	40000400 	.word	0x40000400

080016c8 <TIM4_IRQHandler>:

	void TIM4_IRQHandler()
	{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	af00      	add	r7, sp, #0
	  if(TIM4->SR & TIM_SR_UIF) // if UIF flag is set
 80016cc:	4b0a      	ldr	r3, [pc, #40]	@ (80016f8 <TIM4_IRQHandler+0x30>)
 80016ce:	691b      	ldr	r3, [r3, #16]
 80016d0:	f003 0301 	and.w	r3, r3, #1
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	bf14      	ite	ne
 80016d8:	2301      	movne	r3, #1
 80016da:	2300      	moveq	r3, #0
 80016dc:	b2db      	uxtb	r3, r3
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d007      	beq.n	80016f2 <TIM4_IRQHandler+0x2a>
	  {
		TIM4->SR &= ~TIM_SR_UIF; // clear UIF flag
 80016e2:	4b05      	ldr	r3, [pc, #20]	@ (80016f8 <TIM4_IRQHandler+0x30>)
 80016e4:	691b      	ldr	r3, [r3, #16]
 80016e6:	4a04      	ldr	r2, [pc, #16]	@ (80016f8 <TIM4_IRQHandler+0x30>)
 80016e8:	f023 0301 	bic.w	r3, r3, #1
 80016ec:	6113      	str	r3, [r2, #16]

		Interrupt::TIM4_Wrapper();
 80016ee:	f7ff fa0b 	bl	8000b08 <_ZN9Interrupt12TIM4_WrapperEv>
	  }
	}
 80016f2:	bf00      	nop
 80016f4:	bd80      	pop	{r7, pc}
 80016f6:	bf00      	nop
 80016f8:	40000800 	.word	0x40000800

080016fc <_Z13createThreadsv>:
#include "extern.h"


void createThreads(void)
{
 80016fc:	b598      	push	{r3, r4, r7, lr}
 80016fe:	af00      	add	r7, sp, #0
	servoThread = new pruThread(TIM2, TIM2_IRQn, servo_freq);
 8001700:	2030      	movs	r0, #48	@ 0x30
 8001702:	f010 ff08 	bl	8012516 <_Znwj>
 8001706:	4603      	mov	r3, r0
 8001708:	461c      	mov	r4, r3
 800170a:	4b1a      	ldr	r3, [pc, #104]	@ (8001774 <_Z13createThreadsv+0x78>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	221c      	movs	r2, #28
 8001710:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8001714:	4620      	mov	r0, r4
 8001716:	f004 fc85 	bl	8006024 <_ZN9pruThreadC1EP11TIM_TypeDef9IRQn_Typem>
 800171a:	4b17      	ldr	r3, [pc, #92]	@ (8001778 <_Z13createThreadsv+0x7c>)
 800171c:	601c      	str	r4, [r3, #0]
    NVIC_SetPriority(TIM2_IRQn, 2);
 800171e:	2102      	movs	r1, #2
 8001720:	201c      	movs	r0, #28
 8001722:	f7ff f9ff 	bl	8000b24 <__NVIC_SetPriority>

    baseThread = new pruThread(TIM3, TIM3_IRQn , base_freq);
 8001726:	2030      	movs	r0, #48	@ 0x30
 8001728:	f010 fef5 	bl	8012516 <_Znwj>
 800172c:	4603      	mov	r3, r0
 800172e:	461c      	mov	r4, r3
 8001730:	4b12      	ldr	r3, [pc, #72]	@ (800177c <_Z13createThreadsv+0x80>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	221d      	movs	r2, #29
 8001736:	4912      	ldr	r1, [pc, #72]	@ (8001780 <_Z13createThreadsv+0x84>)
 8001738:	4620      	mov	r0, r4
 800173a:	f004 fc73 	bl	8006024 <_ZN9pruThreadC1EP11TIM_TypeDef9IRQn_Typem>
 800173e:	4b11      	ldr	r3, [pc, #68]	@ (8001784 <_Z13createThreadsv+0x88>)
 8001740:	601c      	str	r4, [r3, #0]
    NVIC_SetPriority(TIM3_IRQn , 3);
 8001742:	2103      	movs	r1, #3
 8001744:	201d      	movs	r0, #29
 8001746:	f7ff f9ed 	bl	8000b24 <__NVIC_SetPriority>

    commsThread = new pruThread(TIM4, TIM4_IRQn, PRU_COMMSFREQ);
 800174a:	2030      	movs	r0, #48	@ 0x30
 800174c:	f010 fee3 	bl	8012516 <_Znwj>
 8001750:	4603      	mov	r3, r0
 8001752:	461c      	mov	r4, r3
 8001754:	f44f 4361 	mov.w	r3, #57600	@ 0xe100
 8001758:	221e      	movs	r2, #30
 800175a:	490b      	ldr	r1, [pc, #44]	@ (8001788 <_Z13createThreadsv+0x8c>)
 800175c:	4620      	mov	r0, r4
 800175e:	f004 fc61 	bl	8006024 <_ZN9pruThreadC1EP11TIM_TypeDef9IRQn_Typem>
 8001762:	4b0a      	ldr	r3, [pc, #40]	@ (800178c <_Z13createThreadsv+0x90>)
 8001764:	601c      	str	r4, [r3, #0]
    NVIC_SetPriority(TIM4_IRQn, 4);
 8001766:	2104      	movs	r1, #4
 8001768:	201e      	movs	r0, #30
 800176a:	f7ff f9db 	bl	8000b24 <__NVIC_SetPriority>
}
 800176e:	bf00      	nop
 8001770:	bd98      	pop	{r3, r4, r7, pc}
 8001772:	bf00      	nop
 8001774:	24000004 	.word	0x24000004
 8001778:	24000334 	.word	0x24000334
 800177c:	24000000 	.word	0x24000000
 8001780:	40000400 	.word	0x40000400
 8001784:	24000338 	.word	0x24000338
 8001788:	40000800 	.word	0x40000800
 800178c:	2400033c 	.word	0x2400033c

08001790 <__io_putchar>:


// re-target printf to UART1 by redeclaring week function in syscalls.c
extern "C" {
	int __io_putchar(int ch)
	{
 8001790:	b580      	push	{r7, lr}
 8001792:	b082      	sub	sp, #8
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
	  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 8001798:	1d39      	adds	r1, r7, #4
 800179a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800179e:	2201      	movs	r2, #1
 80017a0:	4803      	ldr	r0, [pc, #12]	@ (80017b0 <__io_putchar+0x20>)
 80017a2:	f00c fade 	bl	800dd62 <HAL_UART_Transmit>
	  return ch;
 80017a6:	687b      	ldr	r3, [r7, #4]
	}
 80017a8:	4618      	mov	r0, r3
 80017aa:	3708      	adds	r7, #8
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bd80      	pop	{r7, pc}
 80017b0:	24000418 	.word	0x24000418

080017b4 <_Z14readJsonConfigv>:
}



void readJsonConfig()
{
 80017b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80017b8:	b08d      	sub	sp, #52	@ 0x34
 80017ba:	af00      	add	r7, sp, #0
	uint32_t bytesread; // bytes read count


    printf("\n1. Reading JSON configuration file\n");
 80017bc:	4854      	ldr	r0, [pc, #336]	@ (8001910 <_Z14readJsonConfigv+0x15c>)
 80017be:	f011 fab1 	bl	8012d24 <puts>

    // Try to mount the file system
    printf("	Mounting the file system... \n");
 80017c2:	4854      	ldr	r0, [pc, #336]	@ (8001914 <_Z14readJsonConfigv+0x160>)
 80017c4:	f011 faae 	bl	8012d24 <puts>
    if(f_mount(&SDFatFS, (TCHAR const*)SDPath, 0) != FR_OK)
 80017c8:	2200      	movs	r2, #0
 80017ca:	4953      	ldr	r1, [pc, #332]	@ (8001918 <_Z14readJsonConfigv+0x164>)
 80017cc:	4853      	ldr	r0, [pc, #332]	@ (800191c <_Z14readJsonConfigv+0x168>)
 80017ce:	f010 fa4b 	bl	8011c68 <f_mount>
 80017d2:	4603      	mov	r3, r0
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	bf14      	ite	ne
 80017d8:	2301      	movne	r3, #1
 80017da:	2300      	moveq	r3, #0
 80017dc:	b2db      	uxtb	r3, r3
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d005      	beq.n	80017ee <_Z14readJsonConfigv+0x3a>
	{
    	printf("	Failed to mount SD card\n\r");
 80017e2:	484f      	ldr	r0, [pc, #316]	@ (8001920 <_Z14readJsonConfigv+0x16c>)
 80017e4:	f011 fa2e 	bl	8012c44 <iprintf>
    	Error_Handler();
 80017e8:	f000 ffee 	bl	80027c8 <Error_Handler>
			}

			f_close(&SDFile);
		}
    }
}
 80017ec:	e08a      	b.n	8001904 <_Z14readJsonConfigv+0x150>
		if(f_open(&SDFile, "config.txt", FA_READ) != FR_OK)
 80017ee:	2201      	movs	r2, #1
 80017f0:	494c      	ldr	r1, [pc, #304]	@ (8001924 <_Z14readJsonConfigv+0x170>)
 80017f2:	484d      	ldr	r0, [pc, #308]	@ (8001928 <_Z14readJsonConfigv+0x174>)
 80017f4:	f010 fa7e 	bl	8011cf4 <f_open>
 80017f8:	4603      	mov	r3, r0
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	bf14      	ite	ne
 80017fe:	2301      	movne	r3, #1
 8001800:	2300      	moveq	r3, #0
 8001802:	b2db      	uxtb	r3, r3
 8001804:	2b00      	cmp	r3, #0
 8001806:	d005      	beq.n	8001814 <_Z14readJsonConfigv+0x60>
			printf("	Failed to open JSON config file\n");
 8001808:	4848      	ldr	r0, [pc, #288]	@ (800192c <_Z14readJsonConfigv+0x178>)
 800180a:	f011 fa8b 	bl	8012d24 <puts>
			Error_Handler();
 800180e:	f000 ffdb 	bl	80027c8 <Error_Handler>
}
 8001812:	e077      	b.n	8001904 <_Z14readJsonConfigv+0x150>
		}
 8001814:	466b      	mov	r3, sp
 8001816:	461e      	mov	r6, r3
			int32_t length = f_size(&SDFile);
 8001818:	4b43      	ldr	r3, [pc, #268]	@ (8001928 <_Z14readJsonConfigv+0x174>)
 800181a:	68db      	ldr	r3, [r3, #12]
 800181c:	62bb      	str	r3, [r7, #40]	@ 0x28
			printf("	JSON config file lenght = %2ld\n", length);
 800181e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001820:	4843      	ldr	r0, [pc, #268]	@ (8001930 <_Z14readJsonConfigv+0x17c>)
 8001822:	f011 fa0f 	bl	8012c44 <iprintf>
			__attribute__((aligned(32))) char rtext[length];
 8001826:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001828:	1e4b      	subs	r3, r1, #1
 800182a:	627b      	str	r3, [r7, #36]	@ 0x24
 800182c:	460a      	mov	r2, r1
 800182e:	2300      	movs	r3, #0
 8001830:	4690      	mov	r8, r2
 8001832:	4699      	mov	r9, r3
 8001834:	f04f 0200 	mov.w	r2, #0
 8001838:	f04f 0300 	mov.w	r3, #0
 800183c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001840:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001844:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001848:	460a      	mov	r2, r1
 800184a:	2300      	movs	r3, #0
 800184c:	4614      	mov	r4, r2
 800184e:	461d      	mov	r5, r3
 8001850:	f04f 0200 	mov.w	r2, #0
 8001854:	f04f 0300 	mov.w	r3, #0
 8001858:	00eb      	lsls	r3, r5, #3
 800185a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800185e:	00e2      	lsls	r2, r4, #3
 8001860:	460b      	mov	r3, r1
 8001862:	3318      	adds	r3, #24
 8001864:	3307      	adds	r3, #7
 8001866:	08db      	lsrs	r3, r3, #3
 8001868:	00db      	lsls	r3, r3, #3
 800186a:	ebad 0d03 	sub.w	sp, sp, r3
 800186e:	466b      	mov	r3, sp
 8001870:	331f      	adds	r3, #31
 8001872:	095b      	lsrs	r3, r3, #5
 8001874:	015b      	lsls	r3, r3, #5
 8001876:	623b      	str	r3, [r7, #32]
			if(f_read(&SDFile, rtext, length, (UINT *)&bytesread) != FR_OK)
 8001878:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800187a:	1d3b      	adds	r3, r7, #4
 800187c:	6a39      	ldr	r1, [r7, #32]
 800187e:	482a      	ldr	r0, [pc, #168]	@ (8001928 <_Z14readJsonConfigv+0x174>)
 8001880:	f010 fbf2 	bl	8012068 <f_read>
 8001884:	4603      	mov	r3, r0
 8001886:	2b00      	cmp	r3, #0
 8001888:	bf14      	ite	ne
 800188a:	2301      	movne	r3, #1
 800188c:	2300      	moveq	r3, #0
 800188e:	b2db      	uxtb	r3, r3
 8001890:	2b00      	cmp	r3, #0
 8001892:	d003      	beq.n	800189c <_Z14readJsonConfigv+0xe8>
				printf("	JSON config file read FAILURE\n");
 8001894:	4827      	ldr	r0, [pc, #156]	@ (8001934 <_Z14readJsonConfigv+0x180>)
 8001896:	f011 fa45 	bl	8012d24 <puts>
 800189a:	e02f      	b.n	80018fc <_Z14readJsonConfigv+0x148>
				printf("	JSON config file read SUCCESS!\n");
 800189c:	4826      	ldr	r0, [pc, #152]	@ (8001938 <_Z14readJsonConfigv+0x184>)
 800189e:	f011 fa41 	bl	8012d24 <puts>
				strJson.reserve(length + 1);
 80018a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80018a4:	3301      	adds	r3, #1
 80018a6:	4619      	mov	r1, r3
 80018a8:	4824      	ldr	r0, [pc, #144]	@ (800193c <_Z14readJsonConfigv+0x188>)
 80018aa:	f010 ff52 	bl	8012752 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7reserveEj>
			    for (int i = 0; i < length; i++) {
 80018ae:	2300      	movs	r3, #0
 80018b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80018b2:	e017      	b.n	80018e4 <_Z14readJsonConfigv+0x130>
			    	strJson = strJson + rtext[i];
 80018b4:	6a3a      	ldr	r2, [r7, #32]
 80018b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80018b8:	4413      	add	r3, r2
 80018ba:	781a      	ldrb	r2, [r3, #0]
 80018bc:	f107 0308 	add.w	r3, r7, #8
 80018c0:	491e      	ldr	r1, [pc, #120]	@ (800193c <_Z14readJsonConfigv+0x188>)
 80018c2:	4618      	mov	r0, r3
 80018c4:	f001 f81a 	bl	80028fc <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_S5_>
 80018c8:	f107 0308 	add.w	r3, r7, #8
 80018cc:	4619      	mov	r1, r3
 80018ce:	481b      	ldr	r0, [pc, #108]	@ (800193c <_Z14readJsonConfigv+0x188>)
 80018d0:	f010 fed0 	bl	8012674 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 80018d4:	f107 0308 	add.w	r3, r7, #8
 80018d8:	4618      	mov	r0, r3
 80018da:	f010 fec5 	bl	8012668 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
			    for (int i = 0; i < length; i++) {
 80018de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80018e0:	3301      	adds	r3, #1
 80018e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80018e4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80018e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80018e8:	429a      	cmp	r2, r3
 80018ea:	dbe3      	blt.n	80018b4 <_Z14readJsonConfigv+0x100>
			    printf("\n%s\n", strJson.c_str());
 80018ec:	4813      	ldr	r0, [pc, #76]	@ (800193c <_Z14readJsonConfigv+0x188>)
 80018ee:	f010 ff93 	bl	8012818 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 80018f2:	4603      	mov	r3, r0
 80018f4:	4619      	mov	r1, r3
 80018f6:	4812      	ldr	r0, [pc, #72]	@ (8001940 <_Z14readJsonConfigv+0x18c>)
 80018f8:	f011 f9a4 	bl	8012c44 <iprintf>
			f_close(&SDFile);
 80018fc:	480a      	ldr	r0, [pc, #40]	@ (8001928 <_Z14readJsonConfigv+0x174>)
 80018fe:	f010 fd70 	bl	80123e2 <f_close>
 8001902:	46b5      	mov	sp, r6
}
 8001904:	bf00      	nop
 8001906:	3734      	adds	r7, #52	@ 0x34
 8001908:	46bd      	mov	sp, r7
 800190a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800190e:	bf00      	nop
 8001910:	08013a7c 	.word	0x08013a7c
 8001914:	08013aa0 	.word	0x08013aa0
 8001918:	24000508 	.word	0x24000508
 800191c:	2400050c 	.word	0x2400050c
 8001920:	08013ac0 	.word	0x08013ac0
 8001924:	08013adc 	.word	0x08013adc
 8001928:	2400073c 	.word	0x2400073c
 800192c:	08013ae8 	.word	0x08013ae8
 8001930:	08013b0c 	.word	0x08013b0c
 8001934:	08013b30 	.word	0x08013b30
 8001938:	08013b50 	.word	0x08013b50
 800193c:	24000344 	.word	0x24000344
 8001940:	08013b70 	.word	0x08013b70

08001944 <_Z5setupv>:

void setup()
{
 8001944:	b580      	push	{r7, lr}
 8001946:	af00      	add	r7, sp, #0
    printf("\n2. Setting up SPI DMA and threads\n");
 8001948:	4807      	ldr	r0, [pc, #28]	@ (8001968 <_Z5setupv+0x24>)
 800194a:	f011 f9eb 	bl	8012d24 <puts>

    // initialise the Remora comms
    comms->init();
 800194e:	4b07      	ldr	r3, [pc, #28]	@ (800196c <_Z5setupv+0x28>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	4618      	mov	r0, r3
 8001954:	f003 f9de 	bl	8004d14 <_ZN11RemoraComms4initEv>
    comms->start();
 8001958:	4b04      	ldr	r3, [pc, #16]	@ (800196c <_Z5setupv+0x28>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	4618      	mov	r0, r3
 800195e:	f003 fb17 	bl	8004f90 <_ZN11RemoraComms5startEv>
}
 8001962:	bf00      	nop
 8001964:	bd80      	pop	{r7, pc}
 8001966:	bf00      	nop
 8001968:	08013b78 	.word	0x08013b78
 800196c:	24000398 	.word	0x24000398

08001970 <_Z15deserialiseJSONv>:


void deserialiseJSON()
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b084      	sub	sp, #16
 8001974:	af00      	add	r7, sp, #0
    printf("\n3. Parsing json configuration file\n");
 8001976:	4826      	ldr	r0, [pc, #152]	@ (8001a10 <_Z15deserialiseJSONv+0xa0>)
 8001978:	f011 f9d4 	bl	8012d24 <puts>

    const char *json = strJson.c_str();
 800197c:	4825      	ldr	r0, [pc, #148]	@ (8001a14 <_Z15deserialiseJSONv+0xa4>)
 800197e:	f010 ff4b 	bl	8012818 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 8001982:	60f8      	str	r0, [r7, #12]

    // parse the json configuration file
    DeserializationError error = deserializeJson(doc, json);
 8001984:	f107 0308 	add.w	r3, r7, #8
 8001988:	4618      	mov	r0, r3
 800198a:	f7ff fe01 	bl	8001590 <_ZN19ArduinoJson6101_11012NestingLimitC1Ev>
 800198e:	7a3a      	ldrb	r2, [r7, #8]
 8001990:	68f9      	ldr	r1, [r7, #12]
 8001992:	4821      	ldr	r0, [pc, #132]	@ (8001a18 <_Z15deserialiseJSONv+0xa8>)
 8001994:	f000 ffc8 	bl	8002928 <_ZN19ArduinoJson6101_11015deserializeJsonIKcEENS_20DeserializationErrorERNS_12JsonDocumentEPT_NS_12NestingLimitE>
 8001998:	4603      	mov	r3, r0
 800199a:	713b      	strb	r3, [r7, #4]

    printf("	Config deserialisation - ");
 800199c:	481f      	ldr	r0, [pc, #124]	@ (8001a1c <_Z15deserialiseJSONv+0xac>)
 800199e:	f011 f951 	bl	8012c44 <iprintf>

    switch (error.code())
 80019a2:	1d3b      	adds	r3, r7, #4
 80019a4:	4618      	mov	r0, r3
 80019a6:	f7ff fdad 	bl	8001504 <_ZNK19ArduinoJson6101_11020DeserializationError4codeEv>
 80019aa:	4603      	mov	r3, r0
 80019ac:	2b03      	cmp	r3, #3
 80019ae:	d011      	beq.n	80019d4 <_Z15deserialiseJSONv+0x64>
 80019b0:	2b03      	cmp	r3, #3
 80019b2:	dc16      	bgt.n	80019e2 <_Z15deserialiseJSONv+0x72>
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d002      	beq.n	80019be <_Z15deserialiseJSONv+0x4e>
 80019b8:	2b02      	cmp	r3, #2
 80019ba:	d004      	beq.n	80019c6 <_Z15deserialiseJSONv+0x56>
 80019bc:	e011      	b.n	80019e2 <_Z15deserialiseJSONv+0x72>
    {
        case DeserializationError::Ok:
            printf("Deserialization succeeded\n");
 80019be:	4818      	ldr	r0, [pc, #96]	@ (8001a20 <_Z15deserialiseJSONv+0xb0>)
 80019c0:	f011 f9b0 	bl	8012d24 <puts>
            break;
 80019c4:	e01f      	b.n	8001a06 <_Z15deserialiseJSONv+0x96>
        case DeserializationError::InvalidInput:
            printf("Invalid input!\n");
 80019c6:	4817      	ldr	r0, [pc, #92]	@ (8001a24 <_Z15deserialiseJSONv+0xb4>)
 80019c8:	f011 f9ac 	bl	8012d24 <puts>
            configError = true;
 80019cc:	4b16      	ldr	r3, [pc, #88]	@ (8001a28 <_Z15deserialiseJSONv+0xb8>)
 80019ce:	2201      	movs	r2, #1
 80019d0:	701a      	strb	r2, [r3, #0]
            break;
 80019d2:	e018      	b.n	8001a06 <_Z15deserialiseJSONv+0x96>
        case DeserializationError::NoMemory:
            printf("Not enough memory\n");
 80019d4:	4815      	ldr	r0, [pc, #84]	@ (8001a2c <_Z15deserialiseJSONv+0xbc>)
 80019d6:	f011 f9a5 	bl	8012d24 <puts>
            configError = true;
 80019da:	4b13      	ldr	r3, [pc, #76]	@ (8001a28 <_Z15deserialiseJSONv+0xb8>)
 80019dc:	2201      	movs	r2, #1
 80019de:	701a      	strb	r2, [r3, #0]
            break;
 80019e0:	e011      	b.n	8001a06 <_Z15deserialiseJSONv+0x96>
        default:
            printf("Deserialization failed: ");
 80019e2:	4813      	ldr	r0, [pc, #76]	@ (8001a30 <_Z15deserialiseJSONv+0xc0>)
 80019e4:	f011 f92e 	bl	8012c44 <iprintf>
            printf(error.c_str());
 80019e8:	1d3b      	adds	r3, r7, #4
 80019ea:	4618      	mov	r0, r3
 80019ec:	f7ff fd96 	bl	800151c <_ZNK19ArduinoJson6101_11020DeserializationError5c_strEv>
 80019f0:	4603      	mov	r3, r0
 80019f2:	4618      	mov	r0, r3
 80019f4:	f011 f926 	bl	8012c44 <iprintf>
            printf("\n");
 80019f8:	200a      	movs	r0, #10
 80019fa:	f011 f935 	bl	8012c68 <putchar>
            configError = true;
 80019fe:	4b0a      	ldr	r3, [pc, #40]	@ (8001a28 <_Z15deserialiseJSONv+0xb8>)
 8001a00:	2201      	movs	r2, #1
 8001a02:	701a      	strb	r2, [r3, #0]
            break;
 8001a04:	bf00      	nop
    }
}
 8001a06:	bf00      	nop
 8001a08:	3710      	adds	r7, #16
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd80      	pop	{r7, pc}
 8001a0e:	bf00      	nop
 8001a10:	08013b9c 	.word	0x08013b9c
 8001a14:	24000344 	.word	0x24000344
 8001a18:	24000368 	.word	0x24000368
 8001a1c:	08013bc0 	.word	0x08013bc0
 8001a20:	08013bdc 	.word	0x08013bdc
 8001a24:	08013bf8 	.word	0x08013bf8
 8001a28:	24000332 	.word	0x24000332
 8001a2c:	08013c08 	.word	0x08013c08
 8001a30:	08013c1c 	.word	0x08013c1c

08001a34 <_Z13configThreadsv>:

void configThreads()
{
 8001a34:	b5b0      	push	{r4, r5, r7, lr}
 8001a36:	b0bc      	sub	sp, #240	@ 0xf0
 8001a38:	af00      	add	r7, sp, #0
    if (configError) return;
 8001a3a:	4bcb      	ldr	r3, [pc, #812]	@ (8001d68 <_Z13configThreadsv+0x334>)
 8001a3c:	781b      	ldrb	r3, [r3, #0]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	f040 818d 	bne.w	8001d5e <_Z13configThreadsv+0x32a>

    printf("\n4. Configuring threads\n");
 8001a44:	48c9      	ldr	r0, [pc, #804]	@ (8001d6c <_Z13configThreadsv+0x338>)
 8001a46:	f011 f96d 	bl	8012d24 <puts>
 8001a4a:	4bc9      	ldr	r3, [pc, #804]	@ (8001d70 <_Z13configThreadsv+0x33c>)
 8001a4c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8001a50:	4bc8      	ldr	r3, [pc, #800]	@ (8001d74 <_Z13configThreadsv+0x340>)
 8001a52:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8001a56:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001a5a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
                    public Visitable {
  typedef MemberProxy<TObject, TStringRef> this_type;

 public:
  FORCE_INLINE MemberProxy(TObject variant, TStringRef key)
      : _object(variant), _key(key) {}
 8001a5e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001a62:	623b      	str	r3, [r7, #32]
 8001a64:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001a68:	627b      	str	r3, [r7, #36]	@ 0x24
    return MemberProxy<JsonDocument&, TChar*>(*this, key);
 8001a6a:	bf00      	nop
template <typename TImpl>
class VariantCasts {
 public:
  template <typename T>
  FORCE_INLINE operator T() const {
    return impl()->template as<T>();
 8001a6c:	f107 0320 	add.w	r3, r7, #32
 8001a70:	4618      	mov	r0, r3
 8001a72:	f000 fff2 	bl	8002a5a <_ZNK19ArduinoJson6101_11012VariantCastsINS_11MemberProxyIRNS_12JsonDocumentEPKcEEE4implEv>
 8001a76:	4603      	mov	r3, r0
 8001a78:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8001a7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001a80:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    return getOrAddUpstreamMember().getOrAddMember(key);
  }

 private:
  FORCE_INLINE VariantRef getUpstreamMember() const {
    return _object.getMember(_key);
 8001a84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001a88:	681a      	ldr	r2, [r3, #0]
 8001a8a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8001a94:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    return VariantRef(&_pool, _data.getMember(adaptString(key)));
 8001a98:	f8d7 40dc 	ldr.w	r4, [r7, #220]	@ 0xdc
 8001a9c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001aa0:	f103 0510 	add.w	r5, r3, #16
 8001aa4:	f8d7 00d8 	ldr.w	r0, [r7, #216]	@ 0xd8
 8001aa8:	f7ff f9e4 	bl	8000e74 <_ZN19ArduinoJson6101_11011adaptStringEPKc>
 8001aac:	4603      	mov	r3, r0
 8001aae:	4619      	mov	r1, r3
 8001ab0:	4628      	mov	r0, r5
 8001ab2:	f001 fe3a 	bl	800372a <_ZNK19ArduinoJson6101_11011VariantData9getMemberINS_21ConstRamStringAdapterEEEPS0_T_>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	f8c7 40d4 	str.w	r4, [r7, #212]	@ 0xd4
 8001abc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8001ac0:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001ac4:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8001ac8:	4618      	mov	r0, r3
 8001aca:	f000 feb1 	bl	8002830 <_ZN19ArduinoJson6101_11014VariantRefBaseINS_11VariantDataEEC1EPS1_>
 8001ace:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8001ad2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001ad4:	bf00      	nop
 8001ad6:	bf00      	nop
}

template <typename T>
inline typename enable_if<is_same<T, ArrayRef>::value, T>::type VariantRef::as()
    const {
  return ArrayRef(_pool, _data != 0 ? _data->asArray() : 0);
 8001ad8:	6cfc      	ldr	r4, [r7, #76]	@ 0x4c
 8001ada:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d005      	beq.n	8001aec <_Z13configThreadsv+0xb8>
 8001ae0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	f7ff f9d5 	bl	8000e92 <_ZN19ArduinoJson6101_11011VariantData7asArrayEv>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	e000      	b.n	8001aee <_Z13configThreadsv+0xba>
 8001aec:	2300      	movs	r3, #0
 8001aee:	f8c7 40cc 	str.w	r4, [r7, #204]	@ 0xcc
 8001af2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 public:
  typedef ArrayIterator iterator;

  FORCE_INLINE ArrayRef() : base_type(0), _pool(0) {}
  FORCE_INLINE ArrayRef(MemoryPool* pool, CollectionData* data)
      : base_type(data), _pool(pool) {}
 8001af6:	f107 0318 	add.w	r3, r7, #24
 8001afa:	f8d7 10c8 	ldr.w	r1, [r7, #200]	@ 0xc8
 8001afe:	4618      	mov	r0, r3
 8001b00:	f000 fea5 	bl	800284e <_ZN19ArduinoJson6101_11012ArrayRefBaseINS_14CollectionDataEEC1EPS1_>
 8001b04:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8001b08:	61fb      	str	r3, [r7, #28]
 8001b0a:	bf00      	nop
    return getUpstreamMember().template as<TValue>();
 8001b0c:	bf00      	nop
 8001b0e:	bf00      	nop
  VariantRef addElement() const {
    return VariantRef(_pool, arrayAdd(_data, _pool));
  }

  FORCE_INLINE iterator begin() const {
    if (!_data) return iterator();
 8001b10:	69bb      	ldr	r3, [r7, #24]
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d105      	bne.n	8001b22 <_Z13configThreadsv+0xee>
 8001b16:	f107 0310 	add.w	r3, r7, #16
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	f7ff fad6 	bl	80010cc <_ZN19ArduinoJson6101_11013ArrayIteratorC1Ev>
 8001b20:	e00b      	b.n	8001b3a <_Z13configThreadsv+0x106>
    return iterator(_pool, _data->head());
 8001b22:	69fc      	ldr	r4, [r7, #28]
 8001b24:	69bb      	ldr	r3, [r7, #24]
 8001b26:	4618      	mov	r0, r3
 8001b28:	f7ff f826 	bl	8000b78 <_ZNK19ArduinoJson6101_11014CollectionData4headEv>
 8001b2c:	4602      	mov	r2, r0
 8001b2e:	f107 0310 	add.w	r3, r7, #16
 8001b32:	4621      	mov	r1, r4
 8001b34:	4618      	mov	r0, r3
 8001b36:	f7ff fad7 	bl	80010e8 <_ZN19ArduinoJson6101_11013ArrayIteratorC1EPNS_10MemoryPoolEPNS_11VariantSlotE>

    JsonArray Threads = doc["Threads"];

    // create objects from JSON data
    for (JsonArray::iterator it=Threads.begin(); it!=Threads.end(); ++it)
 8001b3a:	e0fe      	b.n	8001d3a <_Z13configThreadsv+0x306>
    {
        thread = *it;
 8001b3c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001b40:	f107 0210 	add.w	r2, r7, #16
 8001b44:	4611      	mov	r1, r2
 8001b46:	4618      	mov	r0, r3
 8001b48:	f7ff fae1 	bl	800110e <_ZNK19ArduinoJson6101_11013ArrayIteratordeEv>
 8001b4c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001b50:	4618      	mov	r0, r3
 8001b52:	f000 ff8d 	bl	8002a70 <_ZNK19ArduinoJson6101_11012VariantCastsINS_10VariantRefEE4implEv>
 8001b56:	4603      	mov	r3, r0
 8001b58:	66bb      	str	r3, [r7, #104]	@ 0x68
}

template <typename T>
inline typename enable_if<is_same<T, ObjectRef>::value, T>::type
VariantRef::as() const {
  return ObjectRef(_pool, variantAsObject(_data));
 8001b5a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001b5c:	685c      	ldr	r4, [r3, #4]
 8001b5e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	4618      	mov	r0, r3
 8001b64:	f7ff faa1 	bl	80010aa <_ZN19ArduinoJson6101_11015variantAsObjectEPNS_11VariantDataE>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	667c      	str	r4, [r7, #100]	@ 0x64
 8001b6c:	663b      	str	r3, [r7, #96]	@ 0x60
 public:
  typedef ObjectIterator iterator;

  FORCE_INLINE ObjectRef() : base_type(0), _pool(0) {}
  FORCE_INLINE ObjectRef(MemoryPool* buf, CollectionData* data)
      : base_type(data), _pool(buf) {}
 8001b6e:	f107 0308 	add.w	r3, r7, #8
 8001b72:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8001b74:	4618      	mov	r0, r3
 8001b76:	f000 fe79 	bl	800286c <_ZN19ArduinoJson6101_11013ObjectRefBaseINS_14CollectionDataEEC1EPS1_>
 8001b7a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001b7c:	60fb      	str	r3, [r7, #12]
 8001b7e:	bf00      	nop
 8001b80:	bf00      	nop
 8001b82:	4b7d      	ldr	r3, [pc, #500]	@ (8001d78 <_Z13configThreadsv+0x344>)
 8001b84:	461a      	mov	r2, r3
 8001b86:	f107 0308 	add.w	r3, r7, #8
 8001b8a:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001b8e:	e882 0003 	stmia.w	r2, {r0, r1}
 8001b92:	4b7a      	ldr	r3, [pc, #488]	@ (8001d7c <_Z13configThreadsv+0x348>)
 8001b94:	677b      	str	r3, [r7, #116]	@ 0x74
template <typename TObject>
template <typename TString>
inline typename enable_if<IsString<TString *>::value,
                          MemberProxy<const TObject &, TString *> >::type
    ObjectShortcuts<TObject>::operator[](TString *key) const {
  return MemberProxy<const TObject &, TString *>(*impl(), key);
 8001b96:	4878      	ldr	r0, [pc, #480]	@ (8001d78 <_Z13configThreadsv+0x344>)
 8001b98:	f000 ff75 	bl	8002a86 <_ZNK19ArduinoJson6101_11015ObjectShortcutsINS_9ObjectRefEE4implEv>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	673b      	str	r3, [r7, #112]	@ 0x70
 8001ba0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001ba2:	66fb      	str	r3, [r7, #108]	@ 0x6c
      : _object(variant), _key(key) {}
 8001ba4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001ba6:	633b      	str	r3, [r7, #48]	@ 0x30
 8001ba8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001baa:	637b      	str	r3, [r7, #52]	@ 0x34
  return MemberProxy<const TObject &, TString *>(*impl(), key);
 8001bac:	bf00      	nop
 8001bae:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	f000 ff72 	bl	8002a9c <_ZNK19ArduinoJson6101_11012VariantCastsINS_11MemberProxyIRKNS_9ObjectRefEPKcEEE4implEv>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8001bbe:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001bc2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    return _object.getMember(_key);
 8001bc6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001bca:	681a      	ldr	r2, [r3, #0]
 8001bcc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001bd0:	685b      	ldr	r3, [r3, #4]
 8001bd2:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 8001bd6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  // getMember(char*) const
  // getMember(const char*) const
  // getMember(const __FlashStringHelper*) const
  template <typename TChar>
  FORCE_INLINE VariantRef getMember(TChar* key) const {
    return get_impl(adaptString(key));
 8001bda:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 8001bde:	f7ff f949 	bl	8000e74 <_ZN19ArduinoJson6101_11011adaptStringEPKc>
 8001be2:	4602      	mov	r2, r0
 8001be4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001be8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8001bec:	607a      	str	r2, [r7, #4]
  }

 private:
  template <typename TAdaptedString>
  FORCE_INLINE VariantRef get_impl(TAdaptedString key) const {
    return VariantRef(_pool, objectGet(_data, key));
 8001bee:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001bf2:	685c      	ldr	r4, [r3, #4]
 8001bf4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	6879      	ldr	r1, [r7, #4]
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	f002 f935 	bl	8003e6c <_ZN19ArduinoJson6101_1109objectGetINS_21ConstRamStringAdapterEEEPNS_11VariantDataEPKNS_14CollectionDataET_>
 8001c02:	4603      	mov	r3, r0
 8001c04:	67fc      	str	r4, [r7, #124]	@ 0x7c
 8001c06:	67bb      	str	r3, [r7, #120]	@ 0x78
 8001c08:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8001c0c:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8001c0e:	4618      	mov	r0, r3
 8001c10:	f000 fe0e 	bl	8002830 <_ZN19ArduinoJson6101_11014VariantRefBaseINS_11VariantDataEEC1EPS1_>
 8001c14:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001c16:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001c18:	bf00      	nop
    return get_impl(adaptString(key));
 8001c1a:	bf00      	nop
 8001c1c:	bf00      	nop
  FORCE_INLINE typename enable_if<!is_same<T, ArrayRef>::value &&
                                      !is_same<T, ObjectRef>::value &&
                                      !is_same<T, VariantRef>::value,
                                  typename VariantAs<T>::type>::type
  as() const {
    return variantAs<T>(_data);
 8001c1e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001c20:	4618      	mov	r0, r3
 8001c22:	f001 fc11 	bl	8003448 <_ZN19ArduinoJson6101_1109variantAsIPKcEENS_9enable_ifIXoosrNS_7is_sameIT_S2_EE5valuesrNS4_IS5_PcEE5valueES2_E4typeEPKNS_11VariantDataE>
 8001c26:	4603      	mov	r3, r0
 8001c28:	bf00      	nop
    return getUpstreamMember().template as<TValue>();
 8001c2a:	bf00      	nop
 8001c2c:	bf00      	nop

        const char* configor = thread["Thread"];
 8001c2e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8001c32:	4b53      	ldr	r3, [pc, #332]	@ (8001d80 <_Z13configThreadsv+0x34c>)
 8001c34:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return MemberProxy<const TObject &, TString *>(*impl(), key);
 8001c38:	484f      	ldr	r0, [pc, #316]	@ (8001d78 <_Z13configThreadsv+0x344>)
 8001c3a:	f000 ff24 	bl	8002a86 <_ZNK19ArduinoJson6101_11015ObjectShortcutsINS_9ObjectRefEE4implEv>
 8001c3e:	4603      	mov	r3, r0
 8001c40:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8001c44:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001c48:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      : _object(variant), _key(key) {}
 8001c4c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001c50:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001c52:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001c56:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return MemberProxy<const TObject &, TString *>(*impl(), key);
 8001c58:	bf00      	nop
 8001c5a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001c5e:	4618      	mov	r0, r3
 8001c60:	f000 ff1c 	bl	8002a9c <_ZNK19ArduinoJson6101_11012VariantCastsINS_11MemberProxyIRKNS_9ObjectRefEPKcEEE4implEv>
 8001c64:	4603      	mov	r3, r0
 8001c66:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8001c6a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001c6e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    return _object.getMember(_key);
 8001c72:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001c76:	681a      	ldr	r2, [r3, #0]
 8001c78:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001c7c:	685b      	ldr	r3, [r3, #4]
 8001c7e:	f8c7 20b0 	str.w	r2, [r7, #176]	@ 0xb0
 8001c82:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8001c86:	f8d7 00ac 	ldr.w	r0, [r7, #172]	@ 0xac
 8001c8a:	f7ff f8f3 	bl	8000e74 <_ZN19ArduinoJson6101_11011adaptStringEPKc>
 8001c8e:	4602      	mov	r2, r0
 8001c90:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001c94:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8001c98:	603a      	str	r2, [r7, #0]
    return VariantRef(_pool, objectGet(_data, key));
 8001c9a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001c9e:	685c      	ldr	r4, [r3, #4]
 8001ca0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	6839      	ldr	r1, [r7, #0]
 8001ca8:	4618      	mov	r0, r3
 8001caa:	f002 f8df 	bl	8003e6c <_ZN19ArduinoJson6101_1109objectGetINS_21ConstRamStringAdapterEEEPNS_11VariantDataEPKNS_14CollectionDataET_>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	f8c7 40a4 	str.w	r4, [r7, #164]	@ 0xa4
 8001cb4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      : base_type(data), _pool(pool) {}
 8001cb8:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8001cbc:	f8d7 10a0 	ldr.w	r1, [r7, #160]	@ 0xa0
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	f000 fdb5 	bl	8002830 <_ZN19ArduinoJson6101_11014VariantRefBaseINS_11VariantDataEEC1EPS1_>
 8001cc6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001cca:	657b      	str	r3, [r7, #84]	@ 0x54
 8001ccc:	bf00      	nop
    return get_impl(adaptString(key));
 8001cce:	bf00      	nop
 8001cd0:	bf00      	nop
    return variantAs<T>(_data);
 8001cd2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	f001 fbc8 	bl	800346a <_ZN19ArduinoJson6101_1109variantAsImEENS_9enable_ifIXsrNS_11is_integralIT_EE5valueES3_E4typeEPKNS_11VariantDataE>
 8001cda:	4603      	mov	r3, r0
 8001cdc:	bf00      	nop
    return getUpstreamMember().template as<TValue>();
 8001cde:	bf00      	nop
 8001ce0:	bf00      	nop
        uint32_t    freq = thread["Frequency"];
 8001ce2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8

        if (!strcmp(configor,"Base"))
 8001ce6:	4927      	ldr	r1, [pc, #156]	@ (8001d84 <_Z13configThreadsv+0x350>)
 8001ce8:	f8d7 00ec 	ldr.w	r0, [r7, #236]	@ 0xec
 8001cec:	f7fe faf8 	bl	80002e0 <strcmp>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d10a      	bne.n	8001d0c <_Z13configThreadsv+0x2d8>
        {
            base_freq = freq;
 8001cf6:	4a24      	ldr	r2, [pc, #144]	@ (8001d88 <_Z13configThreadsv+0x354>)
 8001cf8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8001cfc:	6013      	str	r3, [r2, #0]
            printf("	Setting BASE thread frequency to %lu\n", base_freq);
 8001cfe:	4b22      	ldr	r3, [pc, #136]	@ (8001d88 <_Z13configThreadsv+0x354>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	4619      	mov	r1, r3
 8001d04:	4821      	ldr	r0, [pc, #132]	@ (8001d8c <_Z13configThreadsv+0x358>)
 8001d06:	f010 ff9d 	bl	8012c44 <iprintf>
 8001d0a:	e011      	b.n	8001d30 <_Z13configThreadsv+0x2fc>
        }
        else if (!strcmp(configor,"Servo"))
 8001d0c:	4920      	ldr	r1, [pc, #128]	@ (8001d90 <_Z13configThreadsv+0x35c>)
 8001d0e:	f8d7 00ec 	ldr.w	r0, [r7, #236]	@ 0xec
 8001d12:	f7fe fae5 	bl	80002e0 <strcmp>
 8001d16:	4603      	mov	r3, r0
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d109      	bne.n	8001d30 <_Z13configThreadsv+0x2fc>
        {
            servo_freq = freq;
 8001d1c:	4a1d      	ldr	r2, [pc, #116]	@ (8001d94 <_Z13configThreadsv+0x360>)
 8001d1e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8001d22:	6013      	str	r3, [r2, #0]
            printf("	Setting SERVO thread frequency to %lu\n", servo_freq);
 8001d24:	4b1b      	ldr	r3, [pc, #108]	@ (8001d94 <_Z13configThreadsv+0x360>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	4619      	mov	r1, r3
 8001d2a:	481b      	ldr	r0, [pc, #108]	@ (8001d98 <_Z13configThreadsv+0x364>)
 8001d2c:	f010 ff8a 	bl	8012c44 <iprintf>
    for (JsonArray::iterator it=Threads.begin(); it!=Threads.end(); ++it)
 8001d30:	f107 0310 	add.w	r3, r7, #16
 8001d34:	4618      	mov	r0, r3
 8001d36:	f7ff fa1a 	bl	800116e <_ZN19ArduinoJson6101_11013ArrayIteratorppEv>
  }

  FORCE_INLINE iterator end() const {
    return iterator();
 8001d3a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001d3e:	4618      	mov	r0, r3
 8001d40:	f7ff f9c4 	bl	80010cc <_ZN19ArduinoJson6101_11013ArrayIteratorC1Ev>
 8001d44:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8001d48:	f107 0310 	add.w	r3, r7, #16
 8001d4c:	4611      	mov	r1, r2
 8001d4e:	4618      	mov	r0, r3
 8001d50:	f7ff f9f9 	bl	8001146 <_ZNK19ArduinoJson6101_11013ArrayIteratorneERKS0_>
 8001d54:	4603      	mov	r3, r0
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	f47f aef0 	bne.w	8001b3c <_Z13configThreadsv+0x108>
 8001d5c:	e000      	b.n	8001d60 <_Z13configThreadsv+0x32c>
    if (configError) return;
 8001d5e:	bf00      	nop
        }
    }
}
 8001d60:	37f0      	adds	r7, #240	@ 0xf0
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bdb0      	pop	{r4, r5, r7, pc}
 8001d66:	bf00      	nop
 8001d68:	24000332 	.word	0x24000332
 8001d6c:	08013c38 	.word	0x08013c38
 8001d70:	08013c50 	.word	0x08013c50
 8001d74:	24000368 	.word	0x24000368
 8001d78:	24000388 	.word	0x24000388
 8001d7c:	08013c58 	.word	0x08013c58
 8001d80:	08013c60 	.word	0x08013c60
 8001d84:	08013c6c 	.word	0x08013c6c
 8001d88:	24000000 	.word	0x24000000
 8001d8c:	08013c74 	.word	0x08013c74
 8001d90:	08013c9c 	.word	0x08013c9c
 8001d94:	24000004 	.word	0x24000004
 8001d98:	08013ca4 	.word	0x08013ca4

08001d9c <main>:
    //Module* debugOffC = new Debug("PE_6", 0);
    //commsThread->registerModule(debugOffC);
}

int main(void)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b08c      	sub	sp, #48	@ 0x30
 8001da0:	af02      	add	r7, sp, #8
	MPU_Config();
 8001da2:	f000 fcc9 	bl	8002738 <_ZL10MPU_Configv>
	SCB->VTOR = 0x08000000;
 8001da6:	4bae      	ldr	r3, [pc, #696]	@ (8002060 <main+0x2c4>)
 8001da8:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001dac:	609a      	str	r2, [r3, #8]
	HAL_Init();
 8001dae:	f004 fbdf 	bl	8006570 <HAL_Init>
	SystemClock_Config();
 8001db2:	f000 fad7 	bl	8002364 <_Z18SystemClock_Configv>
	PeriphCommonClock_Config();
 8001db6:	f000 fb9f 	bl	80024f8 <_Z24PeriphCommonClock_Configv>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001dba:	f3bf 8f4f 	dsb	sy
}
 8001dbe:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001dc0:	f3bf 8f6f 	isb	sy
}
 8001dc4:	bf00      	nop
__STATIC_FORCEINLINE void SCB_InvalidateICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;
 8001dc6:	4ba6      	ldr	r3, [pc, #664]	@ (8002060 <main+0x2c4>)
 8001dc8:	2200      	movs	r2, #0
 8001dca:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001dce:	f3bf 8f4f 	dsb	sy
}
 8001dd2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001dd4:	f3bf 8f6f 	isb	sy
}
 8001dd8:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8001dda:	bf00      	nop
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001ddc:	4ba0      	ldr	r3, [pc, #640]	@ (8002060 <main+0x2c4>)
 8001dde:	695b      	ldr	r3, [r3, #20]
 8001de0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	bf14      	ite	ne
 8001de8:	2301      	movne	r3, #1
 8001dea:	2300      	moveq	r3, #0
 8001dec:	b2db      	uxtb	r3, r3
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d11b      	bne.n	8001e2a <main+0x8e>
  __ASM volatile ("dsb 0xF":::"memory");
 8001df2:	f3bf 8f4f 	dsb	sy
}
 8001df6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001df8:	f3bf 8f6f 	isb	sy
}
 8001dfc:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001dfe:	4b98      	ldr	r3, [pc, #608]	@ (8002060 <main+0x2c4>)
 8001e00:	2200      	movs	r2, #0
 8001e02:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001e06:	f3bf 8f4f 	dsb	sy
}
 8001e0a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001e0c:	f3bf 8f6f 	isb	sy
}
 8001e10:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001e12:	4b93      	ldr	r3, [pc, #588]	@ (8002060 <main+0x2c4>)
 8001e14:	695b      	ldr	r3, [r3, #20]
 8001e16:	4a92      	ldr	r2, [pc, #584]	@ (8002060 <main+0x2c4>)
 8001e18:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001e1c:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001e1e:	f3bf 8f4f 	dsb	sy
}
 8001e22:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001e24:	f3bf 8f6f 	isb	sy
}
 8001e28:	e000      	b.n	8001e2c <main+0x90>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001e2a:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8001e2c:	4b8c      	ldr	r3, [pc, #560]	@ (8002060 <main+0x2c4>)
 8001e2e:	2200      	movs	r2, #0
 8001e30:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8001e34:	f3bf 8f4f 	dsb	sy
}
 8001e38:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8001e3a:	4b89      	ldr	r3, [pc, #548]	@ (8002060 <main+0x2c4>)
 8001e3c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001e40:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	0b5b      	lsrs	r3, r3, #13
 8001e46:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001e4a:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	08db      	lsrs	r3, r3, #3
 8001e50:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001e54:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001e56:	68bb      	ldr	r3, [r7, #8]
 8001e58:	015a      	lsls	r2, r3, #5
 8001e5a:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 8001e5e:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8001e60:	687a      	ldr	r2, [r7, #4]
 8001e62:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001e64:	497e      	ldr	r1, [pc, #504]	@ (8002060 <main+0x2c4>)
 8001e66:	4313      	orrs	r3, r2
 8001e68:	f8c1 3260 	str.w	r3, [r1, #608]	@ 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	1e5a      	subs	r2, r3, #1
 8001e70:	607a      	str	r2, [r7, #4]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	bf14      	ite	ne
 8001e76:	2301      	movne	r3, #1
 8001e78:	2300      	moveq	r3, #0
 8001e7a:	b2db      	uxtb	r3, r3
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d1ea      	bne.n	8001e56 <main+0xba>
    } while(sets-- != 0U);
 8001e80:	68bb      	ldr	r3, [r7, #8]
 8001e82:	1e5a      	subs	r2, r3, #1
 8001e84:	60ba      	str	r2, [r7, #8]
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	bf14      	ite	ne
 8001e8a:	2301      	movne	r3, #1
 8001e8c:	2300      	moveq	r3, #0
 8001e8e:	b2db      	uxtb	r3, r3
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d1db      	bne.n	8001e4c <main+0xb0>
  __ASM volatile ("dsb 0xF":::"memory");
 8001e94:	f3bf 8f4f 	dsb	sy
}
 8001e98:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001e9a:	f3bf 8f6f 	isb	sy
}
 8001e9e:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8001ea0:	bf00      	nop
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8001ea2:	4b6f      	ldr	r3, [pc, #444]	@ (8002060 <main+0x2c4>)
 8001ea4:	695b      	ldr	r3, [r3, #20]
 8001ea6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	bf14      	ite	ne
 8001eae:	2301      	movne	r3, #1
 8001eb0:	2300      	moveq	r3, #0
 8001eb2:	b2db      	uxtb	r3, r3
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d142      	bne.n	8001f3e <main+0x1a2>
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8001eb8:	4b69      	ldr	r3, [pc, #420]	@ (8002060 <main+0x2c4>)
 8001eba:	2200      	movs	r2, #0
 8001ebc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8001ec0:	f3bf 8f4f 	dsb	sy
}
 8001ec4:	bf00      	nop
    ccsidr = SCB->CCSIDR;
 8001ec6:	4b66      	ldr	r3, [pc, #408]	@ (8002060 <main+0x2c4>)
 8001ec8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001ecc:	61bb      	str	r3, [r7, #24]
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8001ece:	69bb      	ldr	r3, [r7, #24]
 8001ed0:	0b5b      	lsrs	r3, r3, #13
 8001ed2:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001ed6:	617b      	str	r3, [r7, #20]
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8001ed8:	69bb      	ldr	r3, [r7, #24]
 8001eda:	08db      	lsrs	r3, r3, #3
 8001edc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001ee0:	613b      	str	r3, [r7, #16]
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001ee2:	697b      	ldr	r3, [r7, #20]
 8001ee4:	015a      	lsls	r2, r3, #5
 8001ee6:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 8001eea:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8001eec:	693a      	ldr	r2, [r7, #16]
 8001eee:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001ef0:	495b      	ldr	r1, [pc, #364]	@ (8002060 <main+0x2c4>)
 8001ef2:	4313      	orrs	r3, r2
 8001ef4:	f8c1 3260 	str.w	r3, [r1, #608]	@ 0x260
      } while (ways-- != 0U);
 8001ef8:	693b      	ldr	r3, [r7, #16]
 8001efa:	1e5a      	subs	r2, r3, #1
 8001efc:	613a      	str	r2, [r7, #16]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	bf14      	ite	ne
 8001f02:	2301      	movne	r3, #1
 8001f04:	2300      	moveq	r3, #0
 8001f06:	b2db      	uxtb	r3, r3
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d1ea      	bne.n	8001ee2 <main+0x146>
    } while(sets-- != 0U);
 8001f0c:	697b      	ldr	r3, [r7, #20]
 8001f0e:	1e5a      	subs	r2, r3, #1
 8001f10:	617a      	str	r2, [r7, #20]
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	bf14      	ite	ne
 8001f16:	2301      	movne	r3, #1
 8001f18:	2300      	moveq	r3, #0
 8001f1a:	b2db      	uxtb	r3, r3
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d1db      	bne.n	8001ed8 <main+0x13c>
  __ASM volatile ("dsb 0xF":::"memory");
 8001f20:	f3bf 8f4f 	dsb	sy
}
 8001f24:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8001f26:	4b4e      	ldr	r3, [pc, #312]	@ (8002060 <main+0x2c4>)
 8001f28:	695b      	ldr	r3, [r3, #20]
 8001f2a:	4a4d      	ldr	r2, [pc, #308]	@ (8002060 <main+0x2c4>)
 8001f2c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f30:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001f32:	f3bf 8f4f 	dsb	sy
}
 8001f36:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001f38:	f3bf 8f6f 	isb	sy
}
 8001f3c:	e000      	b.n	8001f40 <main+0x1a4>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8001f3e:	bf00      	nop
	SCB_EnableICache();
	SCB_InvalidateDCache();
	SCB_EnableDCache();

	/* DMA controller clock enable */
    __HAL_RCC_DMA1_CLK_ENABLE();
 8001f40:	4b48      	ldr	r3, [pc, #288]	@ (8002064 <main+0x2c8>)
 8001f42:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001f46:	4a47      	ldr	r2, [pc, #284]	@ (8002064 <main+0x2c8>)
 8001f48:	f043 0301 	orr.w	r3, r3, #1
 8001f4c:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8001f50:	4b44      	ldr	r3, [pc, #272]	@ (8002064 <main+0x2c8>)
 8001f52:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001f56:	f003 0301 	and.w	r3, r3, #1
 8001f5a:	603b      	str	r3, [r7, #0]
 8001f5c:	683b      	ldr	r3, [r7, #0]

	MX_GPIO_Init(); 			// used for SD card detect
 8001f5e:	f000 fb8f 	bl	8002680 <_ZL12MX_GPIO_Initv>
	MX_USART1_UART_Init();
 8001f62:	f000 fb2d 	bl	80025c0 <_ZL19MX_USART1_UART_Initv>
	MX_SDMMC1_SD_Init();		// uncomment line 62 #define ENABLE_SD_DMA_CACHE_MAINTENANCE  1 in FATFT/Target/sd_diskio.c
 8001f66:	f000 faff 	bl	8002568 <_ZL17MX_SDMMC1_SD_Initv>
	MX_FATFS_Init();
 8001f6a:	f00d fddf 	bl	800fb2c <MX_FATFS_Init>


	// prepare DMA buffers
	int n = sizeof(txPingPongBuffer.txBuffers[0].txBuffer);
 8001f6e:	2340      	movs	r3, #64	@ 0x40
 8001f70:	627b      	str	r3, [r7, #36]	@ 0x24
	while(n-- > 0)
 8001f72:	e015      	b.n	8001fa0 <main+0x204>
	{
		txPingPongBuffer.txBuffers[0].txBuffer[n] = 0;
 8001f74:	4a3c      	ldr	r2, [pc, #240]	@ (8002068 <main+0x2cc>)
 8001f76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f78:	4413      	add	r3, r2
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	701a      	strb	r2, [r3, #0]
		txPingPongBuffer.txBuffers[1].txBuffer[n] = 0;
 8001f7e:	4a3a      	ldr	r2, [pc, #232]	@ (8002068 <main+0x2cc>)
 8001f80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f82:	4413      	add	r3, r2
 8001f84:	3340      	adds	r3, #64	@ 0x40
 8001f86:	2200      	movs	r2, #0
 8001f88:	701a      	strb	r2, [r3, #0]
		rxPingPongBuffer.rxBuffers[0].rxBuffer[n] = 0;
 8001f8a:	4a38      	ldr	r2, [pc, #224]	@ (800206c <main+0x2d0>)
 8001f8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f8e:	4413      	add	r3, r2
 8001f90:	2200      	movs	r2, #0
 8001f92:	701a      	strb	r2, [r3, #0]
		rxPingPongBuffer.rxBuffers[1].rxBuffer[n] = 0;
 8001f94:	4a35      	ldr	r2, [pc, #212]	@ (800206c <main+0x2d0>)
 8001f96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f98:	4413      	add	r3, r2
 8001f9a:	3340      	adds	r3, #64	@ 0x40
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	701a      	strb	r2, [r3, #0]
	while(n-- > 0)
 8001fa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fa2:	1e5a      	subs	r2, r3, #1
 8001fa4:	627a      	str	r2, [r7, #36]	@ 0x24
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	bfcc      	ite	gt
 8001faa:	2301      	movgt	r3, #1
 8001fac:	2300      	movle	r3, #0
 8001fae:	b2db      	uxtb	r3, r3
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d1df      	bne.n	8001f74 <main+0x1d8>
	}

	txPingPongBuffer.txBuffers[0].header = PRU_DATA;
 8001fb4:	4b2c      	ldr	r3, [pc, #176]	@ (8002068 <main+0x2cc>)
 8001fb6:	4a2e      	ldr	r2, [pc, #184]	@ (8002070 <main+0x2d4>)
 8001fb8:	601a      	str	r2, [r3, #0]
	txPingPongBuffer.txBuffers[1].header = PRU_DATA;
 8001fba:	4b2b      	ldr	r3, [pc, #172]	@ (8002068 <main+0x2cc>)
 8001fbc:	4a2c      	ldr	r2, [pc, #176]	@ (8002070 <main+0x2d4>)
 8001fbe:	641a      	str	r2, [r3, #64]	@ 0x40


	enum State currentState;
	enum State prevState;

	currentState = ST_SETUP;
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
	prevState = ST_RESET;
 8001fc6:	2305      	movs	r3, #5
 8001fc8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22

    comms->setStatus(false);
 8001fcc:	4b29      	ldr	r3, [pc, #164]	@ (8002074 <main+0x2d8>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	2100      	movs	r1, #0
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	f003 ffb1 	bl	8005f3a <_ZN11RemoraComms9setStatusEb>
    comms->setError(false);
 8001fd8:	4b26      	ldr	r3, [pc, #152]	@ (8002074 <main+0x2d8>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	2100      	movs	r1, #0
 8001fde:	4618      	mov	r0, r3
 8001fe0:	f003 ffc8 	bl	8005f74 <_ZN11RemoraComms8setErrorEb>
    resetCnt = 0;
 8001fe4:	4b24      	ldr	r3, [pc, #144]	@ (8002078 <main+0x2dc>)
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	701a      	strb	r2, [r3, #0]

	printf("\nRemora version %d.%d.%d for %s starting\n\n", MAJOR_VERSION, MINOR_VERSION, PATCH, BOARD);
 8001fea:	4b24      	ldr	r3, [pc, #144]	@ (800207c <main+0x2e0>)
 8001fec:	9300      	str	r3, [sp, #0]
 8001fee:	2300      	movs	r3, #0
 8001ff0:	2201      	movs	r2, #1
 8001ff2:	2100      	movs	r1, #0
 8001ff4:	4822      	ldr	r0, [pc, #136]	@ (8002080 <main+0x2e4>)
 8001ff6:	f010 fe25 	bl	8012c44 <iprintf>

	while (1)
	{
		switch(currentState){
 8001ffa:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001ffe:	2b06      	cmp	r3, #6
 8002000:	f200 8123 	bhi.w	800224a <main+0x4ae>
 8002004:	a201      	add	r2, pc, #4	@ (adr r2, 800200c <main+0x270>)
 8002006:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800200a:	bf00      	nop
 800200c:	08002029 	.word	0x08002029
 8002010:	08002089 	.word	0x08002089
 8002014:	080020df 	.word	0x080020df
 8002018:	0800211f 	.word	0x0800211f
 800201c:	080021b7 	.word	0x080021b7
 8002020:	080021d9 	.word	0x080021d9
 8002024:	0800223f 	.word	0x0800223f
			          case ST_SETUP:
			              // do setup tasks
			              if (currentState != prevState)
 8002028:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 800202c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8002030:	429a      	cmp	r2, r3
 8002032:	d002      	beq.n	800203a <main+0x29e>
			              {
			                  printf("\n## Entering SETUP state\n\n");
 8002034:	4813      	ldr	r0, [pc, #76]	@ (8002084 <main+0x2e8>)
 8002036:	f010 fe75 	bl	8012d24 <puts>
			              }
			              prevState = currentState;
 800203a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800203e:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22

			              readJsonConfig();
 8002042:	f7ff fbb7 	bl	80017b4 <_Z14readJsonConfigv>
			              setup();
 8002046:	f7ff fc7d 	bl	8001944 <_Z5setupv>
			              deserialiseJSON();
 800204a:	f7ff fc91 	bl	8001970 <_Z15deserialiseJSONv>
			              configThreads();
 800204e:	f7ff fcf1 	bl	8001a34 <_Z13configThreadsv>
			              createThreads();
 8002052:	f7ff fb53 	bl	80016fc <_Z13createThreadsv>
			              //debugThreadHigh();
			              //loadModules();
			              //debugThreadLow();

			              currentState = ST_START;
 8002056:	2301      	movs	r3, #1
 8002058:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
			              break;
 800205c:	e0f5      	b.n	800224a <main+0x4ae>
 800205e:	bf00      	nop
 8002060:	e000ed00 	.word	0xe000ed00
 8002064:	58024400 	.word	0x58024400
 8002068:	300000a0 	.word	0x300000a0
 800206c:	30000000 	.word	0x30000000
 8002070:	64617461 	.word	0x64617461
 8002074:	24000398 	.word	0x24000398
 8002078:	24000330 	.word	0x24000330
 800207c:	08013d08 	.word	0x08013d08
 8002080:	08013cdc 	.word	0x08013cdc
 8002084:	08013d14 	.word	0x08013d14

			          case ST_START:
			              // do start tasks
			              if (currentState != prevState)
 8002088:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 800208c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8002090:	429a      	cmp	r2, r3
 8002092:	d002      	beq.n	800209a <main+0x2fe>
			              {
			                  printf("\n## Entering START state\n");
 8002094:	486f      	ldr	r0, [pc, #444]	@ (8002254 <main+0x4b8>)
 8002096:	f010 fe45 	bl	8012d24 <puts>
			              }
			              prevState = currentState;
 800209a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800209e:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22

			              if (!threadsRunning)
 80020a2:	4b6d      	ldr	r3, [pc, #436]	@ (8002258 <main+0x4bc>)
 80020a4:	781b      	ldrb	r3, [r3, #0]
 80020a6:	f083 0301 	eor.w	r3, r3, #1
 80020aa:	b2db      	uxtb	r3, r3
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d012      	beq.n	80020d6 <main+0x33a>
			              {
			                  // Start the threads
			                  printf("\nStarting the BASE thread\n");
 80020b0:	486a      	ldr	r0, [pc, #424]	@ (800225c <main+0x4c0>)
 80020b2:	f010 fe37 	bl	8012d24 <puts>
			                  baseThread->startThread();
 80020b6:	4b6a      	ldr	r3, [pc, #424]	@ (8002260 <main+0x4c4>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	4618      	mov	r0, r3
 80020bc:	f003 ffe0 	bl	8006080 <_ZN9pruThread11startThreadEv>

			                  printf("\nStarting the SERVO thread\n");
 80020c0:	4868      	ldr	r0, [pc, #416]	@ (8002264 <main+0x4c8>)
 80020c2:	f010 fe2f 	bl	8012d24 <puts>
			                  servoThread->startThread();
 80020c6:	4b68      	ldr	r3, [pc, #416]	@ (8002268 <main+0x4cc>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	4618      	mov	r0, r3
 80020cc:	f003 ffd8 	bl	8006080 <_ZN9pruThread11startThreadEv>

			                  threadsRunning = true;
 80020d0:	4b61      	ldr	r3, [pc, #388]	@ (8002258 <main+0x4bc>)
 80020d2:	2201      	movs	r2, #1
 80020d4:	701a      	strb	r2, [r3, #0]
			              }

			              currentState = ST_IDLE;
 80020d6:	2302      	movs	r3, #2
 80020d8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

			              break;
 80020dc:	e0b5      	b.n	800224a <main+0x4ae>


			          case ST_IDLE:
			              // do something when idle
			              if (currentState != prevState)
 80020de:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 80020e2:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80020e6:	429a      	cmp	r2, r3
 80020e8:	d002      	beq.n	80020f0 <main+0x354>
			              {
			                  printf("\n## Entering IDLE state\n");
 80020ea:	4860      	ldr	r0, [pc, #384]	@ (800226c <main+0x4d0>)
 80020ec:	f010 fe1a 	bl	8012d24 <puts>
			              }
			              prevState = currentState;
 80020f0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80020f4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22

			              //wait for data before changing to running state
			              if (comms->getStatus())
 80020f8:	4b5d      	ldr	r3, [pc, #372]	@ (8002270 <main+0x4d4>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4618      	mov	r0, r3
 80020fe:	f003 ff0f 	bl	8005f20 <_ZN11RemoraComms9getStatusEv>
 8002102:	4603      	mov	r3, r0
 8002104:	2b00      	cmp	r3, #0
 8002106:	f000 809d 	beq.w	8002244 <main+0x4a8>
			              {
				          	  txPingPongBuffer.txBuffers[0].header =  PRU_DATA;
 800210a:	4b5a      	ldr	r3, [pc, #360]	@ (8002274 <main+0x4d8>)
 800210c:	4a5a      	ldr	r2, [pc, #360]	@ (8002278 <main+0x4dc>)
 800210e:	601a      	str	r2, [r3, #0]
				          	  txPingPongBuffer.txBuffers[1].header =  PRU_DATA;
 8002110:	4b58      	ldr	r3, [pc, #352]	@ (8002274 <main+0x4d8>)
 8002112:	4a59      	ldr	r2, [pc, #356]	@ (8002278 <main+0x4dc>)
 8002114:	641a      	str	r2, [r3, #64]	@ 0x40
			                  currentState = ST_RUNNING;
 8002116:	2303      	movs	r3, #3
 8002118:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
			              }

			              break;
 800211c:	e092      	b.n	8002244 <main+0x4a8>

			          case ST_RUNNING:
			              // do running tasks
			              if (currentState != prevState)
 800211e:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8002122:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8002126:	429a      	cmp	r2, r3
 8002128:	d002      	beq.n	8002130 <main+0x394>
			              {
			                  printf("\n## Entering RUNNING state\n");
 800212a:	4854      	ldr	r0, [pc, #336]	@ (800227c <main+0x4e0>)
 800212c:	f010 fdfa 	bl	8012d24 <puts>
			              }
			              prevState = currentState;
 8002130:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002134:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22


			              // check to see if there there has been SPI errors
			              if (comms->getError())
 8002138:	4b4d      	ldr	r3, [pc, #308]	@ (8002270 <main+0x4d4>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	4618      	mov	r0, r3
 800213e:	f003 ff0c 	bl	8005f5a <_ZN11RemoraComms8getErrorEv>
 8002142:	4603      	mov	r3, r0
 8002144:	2b00      	cmp	r3, #0
 8002146:	d008      	beq.n	800215a <main+0x3be>
			              {
			                  printf("Communication data error\n");
 8002148:	484d      	ldr	r0, [pc, #308]	@ (8002280 <main+0x4e4>)
 800214a:	f010 fdeb 	bl	8012d24 <puts>
			                  comms->setError(false);
 800214e:	4b48      	ldr	r3, [pc, #288]	@ (8002270 <main+0x4d4>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	2100      	movs	r1, #0
 8002154:	4618      	mov	r0, r3
 8002156:	f003 ff0d 	bl	8005f74 <_ZN11RemoraComms8setErrorEb>
			              }

			              if (comms->getStatus())
 800215a:	4b45      	ldr	r3, [pc, #276]	@ (8002270 <main+0x4d4>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	4618      	mov	r0, r3
 8002160:	f003 fede 	bl	8005f20 <_ZN11RemoraComms9getStatusEv>
 8002164:	4603      	mov	r3, r0
 8002166:	2b00      	cmp	r3, #0
 8002168:	d009      	beq.n	800217e <main+0x3e2>
			              {
			                  // SPI data received by DMA
			                  resetCnt = 0;
 800216a:	4b46      	ldr	r3, [pc, #280]	@ (8002284 <main+0x4e8>)
 800216c:	2200      	movs	r2, #0
 800216e:	701a      	strb	r2, [r3, #0]
			                  comms->setStatus(false);
 8002170:	4b3f      	ldr	r3, [pc, #252]	@ (8002270 <main+0x4d4>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	2100      	movs	r1, #0
 8002176:	4618      	mov	r0, r3
 8002178:	f003 fedf 	bl	8005f3a <_ZN11RemoraComms9setStatusEb>
 800217c:	e005      	b.n	800218a <main+0x3ee>
			              }
			              else
			              {
			                  // no data received by DMA
			                  resetCnt++;
 800217e:	4b41      	ldr	r3, [pc, #260]	@ (8002284 <main+0x4e8>)
 8002180:	781b      	ldrb	r3, [r3, #0]
 8002182:	3301      	adds	r3, #1
 8002184:	b2da      	uxtb	r2, r3
 8002186:	4b3f      	ldr	r3, [pc, #252]	@ (8002284 <main+0x4e8>)
 8002188:	701a      	strb	r2, [r3, #0]
			              }

			              if (resetCnt > SPI_ERR_MAX)
 800218a:	4b3e      	ldr	r3, [pc, #248]	@ (8002284 <main+0x4e8>)
 800218c:	781b      	ldrb	r3, [r3, #0]
 800218e:	2b05      	cmp	r3, #5
 8002190:	d908      	bls.n	80021a4 <main+0x408>
			              {
			                  // reset threshold reached, reset the PRU
			                  printf("   Communication data error limit reached, resetting\n");
 8002192:	483d      	ldr	r0, [pc, #244]	@ (8002288 <main+0x4ec>)
 8002194:	f010 fdc6 	bl	8012d24 <puts>
			                  resetCnt = 0;
 8002198:	4b3a      	ldr	r3, [pc, #232]	@ (8002284 <main+0x4e8>)
 800219a:	2200      	movs	r2, #0
 800219c:	701a      	strb	r2, [r3, #0]
			                  currentState = ST_RESET;
 800219e:	2305      	movs	r3, #5
 80021a0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
			              }

			              if (PRUreset)
 80021a4:	4b39      	ldr	r3, [pc, #228]	@ (800228c <main+0x4f0>)
 80021a6:	781b      	ldrb	r3, [r3, #0]
 80021a8:	b2db      	uxtb	r3, r3
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d04c      	beq.n	8002248 <main+0x4ac>
			              {
			                  currentState = ST_WDRESET;
 80021ae:	2306      	movs	r3, #6
 80021b0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
			              }

			              break;
 80021b4:	e048      	b.n	8002248 <main+0x4ac>

			          case ST_STOP:
			              // do stop tasks
			              if (currentState != prevState)
 80021b6:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 80021ba:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80021be:	429a      	cmp	r2, r3
 80021c0:	d002      	beq.n	80021c8 <main+0x42c>
			              {
			                  printf("\n## Entering STOP state\n");
 80021c2:	4833      	ldr	r0, [pc, #204]	@ (8002290 <main+0x4f4>)
 80021c4:	f010 fdae 	bl	8012d24 <puts>
			              }
			              prevState = currentState;
 80021c8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80021cc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22


			              currentState = ST_STOP;
 80021d0:	2304      	movs	r3, #4
 80021d2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
			              break;
 80021d6:	e038      	b.n	800224a <main+0x4ae>

			          case ST_RESET:
			              // do reset tasks
			              if (currentState != prevState)
 80021d8:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 80021dc:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80021e0:	429a      	cmp	r2, r3
 80021e2:	d002      	beq.n	80021ea <main+0x44e>
			              {
			                  printf("\n## Entering RESET state\n");
 80021e4:	482b      	ldr	r0, [pc, #172]	@ (8002294 <main+0x4f8>)
 80021e6:	f010 fd9d 	bl	8012d24 <puts>
			              }
			              prevState = currentState;
 80021ea:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80021ee:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22

			              // set all of the rxData buffer to 0
			              // rxData.rxBuffer is volatile so need to do this the long way. memset cannot be used for volatile

			              pruRxData = getCurrentRxBuffer(&rxPingPongBuffer);
 80021f2:	4829      	ldr	r0, [pc, #164]	@ (8002298 <main+0x4fc>)
 80021f4:	f000 f884 	bl	8002300 <_Z18getCurrentRxBufferP16RxPingPongBuffer>
 80021f8:	4603      	mov	r3, r0
 80021fa:	4a28      	ldr	r2, [pc, #160]	@ (800229c <main+0x500>)
 80021fc:	6013      	str	r3, [r2, #0]

			              printf("   Resetting rxBuffer\n");
 80021fe:	4828      	ldr	r0, [pc, #160]	@ (80022a0 <main+0x504>)
 8002200:	f010 fd90 	bl	8012d24 <puts>
			              {
							  int n = sizeof(pruRxData->rxBuffer);
 8002204:	2340      	movs	r3, #64	@ 0x40
 8002206:	61fb      	str	r3, [r7, #28]
							  while(n-- > 0)
 8002208:	e005      	b.n	8002216 <main+0x47a>
							  {
								  pruRxData->rxBuffer[n] = 0;
 800220a:	4b24      	ldr	r3, [pc, #144]	@ (800229c <main+0x500>)
 800220c:	681a      	ldr	r2, [r3, #0]
 800220e:	69fb      	ldr	r3, [r7, #28]
 8002210:	4413      	add	r3, r2
 8002212:	2200      	movs	r2, #0
 8002214:	701a      	strb	r2, [r3, #0]
							  while(n-- > 0)
 8002216:	69fb      	ldr	r3, [r7, #28]
 8002218:	1e5a      	subs	r2, r3, #1
 800221a:	61fa      	str	r2, [r7, #28]
 800221c:	2b00      	cmp	r3, #0
 800221e:	bfcc      	ite	gt
 8002220:	2301      	movgt	r3, #1
 8002222:	2300      	movle	r3, #0
 8002224:	b2db      	uxtb	r3, r3
 8002226:	2b00      	cmp	r3, #0
 8002228:	d1ef      	bne.n	800220a <main+0x46e>
							  }
			              }
			              txPingPongBuffer.txBuffers[0].header = 0;
 800222a:	4b12      	ldr	r3, [pc, #72]	@ (8002274 <main+0x4d8>)
 800222c:	2200      	movs	r2, #0
 800222e:	601a      	str	r2, [r3, #0]
			              txPingPongBuffer.txBuffers[1].header = 0;
 8002230:	4b10      	ldr	r3, [pc, #64]	@ (8002274 <main+0x4d8>)
 8002232:	2200      	movs	r2, #0
 8002234:	641a      	str	r2, [r3, #64]	@ 0x40

			              currentState = ST_IDLE;
 8002236:	2302      	movs	r3, #2
 8002238:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
			              break;
 800223c:	e005      	b.n	800224a <main+0x4ae>

			          case ST_WDRESET:
			        	  // force a reset
			        	  HAL_NVIC_SystemReset();
 800223e:	f004 fb72 	bl	8006926 <HAL_NVIC_SystemReset>
			              break;
 8002242:	e002      	b.n	800224a <main+0x4ae>
			              break;
 8002244:	bf00      	nop
 8002246:	e000      	b.n	800224a <main+0x4ae>
			              break;
 8002248:	bf00      	nop
			  }
		HAL_Delay(100);
 800224a:	2064      	movs	r0, #100	@ 0x64
 800224c:	f004 fa22 	bl	8006694 <HAL_Delay>
	}
 8002250:	e6d3      	b.n	8001ffa <main+0x25e>
 8002252:	bf00      	nop
 8002254:	08013d30 	.word	0x08013d30
 8002258:	24000333 	.word	0x24000333
 800225c:	08013d4c 	.word	0x08013d4c
 8002260:	24000338 	.word	0x24000338
 8002264:	08013d68 	.word	0x08013d68
 8002268:	24000334 	.word	0x24000334
 800226c:	08013d84 	.word	0x08013d84
 8002270:	24000398 	.word	0x24000398
 8002274:	300000a0 	.word	0x300000a0
 8002278:	64617461 	.word	0x64617461
 800227c:	08013d9c 	.word	0x08013d9c
 8002280:	08013db8 	.word	0x08013db8
 8002284:	24000330 	.word	0x24000330
 8002288:	08013dd4 	.word	0x08013dd4
 800228c:	24000331 	.word	0x24000331
 8002290:	08013e0c 	.word	0x08013e0c
 8002294:	08013e24 	.word	0x08013e24
 8002298:	30000000 	.word	0x30000000
 800229c:	24000340 	.word	0x24000340
 80022a0:	08013e40 	.word	0x08013e40

080022a4 <_Z20initRxPingPongBufferP16RxPingPongBuffer>:
}



void initRxPingPongBuffer(RxPingPongBuffer* buffer) {
 80022a4:	b480      	push	{r7}
 80022a6:	b083      	sub	sp, #12
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
    buffer->currentRxBuffer = 0;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2200      	movs	r2, #0
 80022b0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
}
 80022b4:	bf00      	nop
 80022b6:	370c      	adds	r7, #12
 80022b8:	46bd      	mov	sp, r7
 80022ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022be:	4770      	bx	lr

080022c0 <_Z20initTxPingPongBufferP16TxPingPongBuffer>:

void initTxPingPongBuffer(TxPingPongBuffer* buffer) {
 80022c0:	b480      	push	{r7}
 80022c2:	b083      	sub	sp, #12
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
    buffer->currentTxBuffer = 0;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2200      	movs	r2, #0
 80022cc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
}
 80022d0:	bf00      	nop
 80022d2:	370c      	adds	r7, #12
 80022d4:	46bd      	mov	sp, r7
 80022d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022da:	4770      	bx	lr

080022dc <_Z13swapTxBuffersP16TxPingPongBuffer>:

void swapRxBuffers(RxPingPongBuffer* buffer) {
    buffer->currentRxBuffer = 1 - buffer->currentRxBuffer;
}

void swapTxBuffers(TxPingPongBuffer* buffer) {
 80022dc:	b480      	push	{r7}
 80022de:	b083      	sub	sp, #12
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
    buffer->currentTxBuffer = 1 - buffer->currentTxBuffer;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80022ea:	f1c3 0201 	rsb	r2, r3, #1
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
}
 80022f4:	bf00      	nop
 80022f6:	370c      	adds	r7, #12
 80022f8:	46bd      	mov	sp, r7
 80022fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fe:	4770      	bx	lr

08002300 <_Z18getCurrentRxBufferP16RxPingPongBuffer>:
int getCurrentTxBufferIndex(TxPingPongBuffer* buffer)
{
	return buffer->currentTxBuffer;
}

rxData_t* getCurrentRxBuffer(RxPingPongBuffer* buffer) {
 8002300:	b480      	push	{r7}
 8002302:	b083      	sub	sp, #12
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
    return &buffer->rxBuffers[buffer->currentRxBuffer];
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800230e:	019b      	lsls	r3, r3, #6
 8002310:	687a      	ldr	r2, [r7, #4]
 8002312:	4413      	add	r3, r2
}
 8002314:	4618      	mov	r0, r3
 8002316:	370c      	adds	r7, #12
 8002318:	46bd      	mov	sp, r7
 800231a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231e:	4770      	bx	lr

08002320 <_Z18getCurrentTxBufferP16TxPingPongBuffer>:

txData_t* getCurrentTxBuffer(TxPingPongBuffer* buffer) {
 8002320:	b480      	push	{r7}
 8002322:	b083      	sub	sp, #12
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
    return &buffer->txBuffers[buffer->currentTxBuffer];
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800232e:	019b      	lsls	r3, r3, #6
 8002330:	687a      	ldr	r2, [r7, #4]
 8002332:	4413      	add	r3, r2
}
 8002334:	4618      	mov	r0, r3
 8002336:	370c      	adds	r7, #12
 8002338:	46bd      	mov	sp, r7
 800233a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233e:	4770      	bx	lr

08002340 <_Z14getAltRxBufferP16RxPingPongBuffer>:

rxData_t* getAltRxBuffer(RxPingPongBuffer* buffer) {
 8002340:	b480      	push	{r7}
 8002342:	b083      	sub	sp, #12
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
    return &buffer->rxBuffers[1 - buffer->currentRxBuffer];
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800234e:	f1c3 0301 	rsb	r3, r3, #1
 8002352:	019b      	lsls	r3, r3, #6
 8002354:	687a      	ldr	r2, [r7, #4]
 8002356:	4413      	add	r3, r2
}
 8002358:	4618      	mov	r0, r3
 800235a:	370c      	adds	r7, #12
 800235c:	46bd      	mov	sp, r7
 800235e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002362:	4770      	bx	lr

08002364 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b09e      	sub	sp, #120	@ 0x78
 8002368:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800236a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800236e:	224c      	movs	r2, #76	@ 0x4c
 8002370:	2100      	movs	r1, #0
 8002372:	4618      	mov	r0, r3
 8002374:	f010 fdd0 	bl	8012f18 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002378:	f107 030c 	add.w	r3, r7, #12
 800237c:	2220      	movs	r2, #32
 800237e:	2100      	movs	r1, #0
 8002380:	4618      	mov	r0, r3
 8002382:	f010 fdc9 	bl	8012f18 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8002386:	2002      	movs	r0, #2
 8002388:	f006 f9d0 	bl	800872c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800238c:	2300      	movs	r3, #0
 800238e:	60bb      	str	r3, [r7, #8]
 8002390:	4b56      	ldr	r3, [pc, #344]	@ (80024ec <_Z18SystemClock_Configv+0x188>)
 8002392:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002394:	4a55      	ldr	r2, [pc, #340]	@ (80024ec <_Z18SystemClock_Configv+0x188>)
 8002396:	f023 0301 	bic.w	r3, r3, #1
 800239a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800239c:	4b53      	ldr	r3, [pc, #332]	@ (80024ec <_Z18SystemClock_Configv+0x188>)
 800239e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023a0:	f003 0301 	and.w	r3, r3, #1
 80023a4:	60bb      	str	r3, [r7, #8]
 80023a6:	4b52      	ldr	r3, [pc, #328]	@ (80024f0 <_Z18SystemClock_Configv+0x18c>)
 80023a8:	699b      	ldr	r3, [r3, #24]
 80023aa:	4a51      	ldr	r2, [pc, #324]	@ (80024f0 <_Z18SystemClock_Configv+0x18c>)
 80023ac:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80023b0:	6193      	str	r3, [r2, #24]
 80023b2:	4b4f      	ldr	r3, [pc, #316]	@ (80024f0 <_Z18SystemClock_Configv+0x18c>)
 80023b4:	699b      	ldr	r3, [r3, #24]
 80023b6:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80023ba:	60bb      	str	r3, [r7, #8]
 80023bc:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80023be:	bf00      	nop
 80023c0:	4b4b      	ldr	r3, [pc, #300]	@ (80024f0 <_Z18SystemClock_Configv+0x18c>)
 80023c2:	699b      	ldr	r3, [r3, #24]
 80023c4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80023c8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80023cc:	bf14      	ite	ne
 80023ce:	2301      	movne	r3, #1
 80023d0:	2300      	moveq	r3, #0
 80023d2:	b2db      	uxtb	r3, r3
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d1f3      	bne.n	80023c0 <_Z18SystemClock_Configv+0x5c>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023d8:	4b46      	ldr	r3, [pc, #280]	@ (80024f4 <_Z18SystemClock_Configv+0x190>)
 80023da:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80023de:	4a45      	ldr	r2, [pc, #276]	@ (80024f4 <_Z18SystemClock_Configv+0x190>)
 80023e0:	f043 0302 	orr.w	r3, r3, #2
 80023e4:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80023e8:	4b42      	ldr	r3, [pc, #264]	@ (80024f4 <_Z18SystemClock_Configv+0x190>)
 80023ea:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80023ee:	f003 0302 	and.w	r3, r3, #2
 80023f2:	607b      	str	r3, [r7, #4]
 80023f4:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80023f6:	2300      	movs	r3, #0
 80023f8:	603b      	str	r3, [r7, #0]
 80023fa:	4b3d      	ldr	r3, [pc, #244]	@ (80024f0 <_Z18SystemClock_Configv+0x18c>)
 80023fc:	699b      	ldr	r3, [r3, #24]
 80023fe:	4a3c      	ldr	r2, [pc, #240]	@ (80024f0 <_Z18SystemClock_Configv+0x18c>)
 8002400:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002404:	6193      	str	r3, [r2, #24]
 8002406:	4b3a      	ldr	r3, [pc, #232]	@ (80024f0 <_Z18SystemClock_Configv+0x18c>)
 8002408:	699b      	ldr	r3, [r3, #24]
 800240a:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800240e:	603b      	str	r3, [r7, #0]
 8002410:	4b36      	ldr	r3, [pc, #216]	@ (80024ec <_Z18SystemClock_Configv+0x188>)
 8002412:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002414:	4a35      	ldr	r2, [pc, #212]	@ (80024ec <_Z18SystemClock_Configv+0x188>)
 8002416:	f043 0301 	orr.w	r3, r3, #1
 800241a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800241c:	4b33      	ldr	r3, [pc, #204]	@ (80024ec <_Z18SystemClock_Configv+0x188>)
 800241e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002420:	f003 0301 	and.w	r3, r3, #1
 8002424:	603b      	str	r3, [r7, #0]
 8002426:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8002428:	bf00      	nop
 800242a:	4b31      	ldr	r3, [pc, #196]	@ (80024f0 <_Z18SystemClock_Configv+0x18c>)
 800242c:	699b      	ldr	r3, [r3, #24]
 800242e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002432:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002436:	bf14      	ite	ne
 8002438:	2301      	movne	r3, #1
 800243a:	2300      	moveq	r3, #0
 800243c:	b2db      	uxtb	r3, r3
 800243e:	2b00      	cmp	r3, #0
 8002440:	d1f3      	bne.n	800242a <_Z18SystemClock_Configv+0xc6>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8002442:	4b2c      	ldr	r3, [pc, #176]	@ (80024f4 <_Z18SystemClock_Configv+0x190>)
 8002444:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002446:	f023 0303 	bic.w	r3, r3, #3
 800244a:	4a2a      	ldr	r2, [pc, #168]	@ (80024f4 <_Z18SystemClock_Configv+0x190>)
 800244c:	f043 0302 	orr.w	r3, r3, #2
 8002450:	6293      	str	r3, [r2, #40]	@ 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002452:	2301      	movs	r3, #1
 8002454:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002456:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800245a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800245c:	2302      	movs	r3, #2
 800245e:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002460:	2302      	movs	r3, #2
 8002462:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLM = 5;
 8002464:	2305      	movs	r3, #5
 8002466:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 192;
 8002468:	23c0      	movs	r3, #192	@ 0xc0
 800246a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 800246c:	2302      	movs	r3, #2
 800246e:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002470:	2304      	movs	r3, #4
 8002472:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002474:	2302      	movs	r3, #2
 8002476:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8002478:	2308      	movs	r3, #8
 800247a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800247c:	2300      	movs	r3, #0
 800247e:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8002480:	2300      	movs	r3, #0
 8002482:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002484:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002488:	4618      	mov	r0, r3
 800248a:	f006 f989 	bl	80087a0 <HAL_RCC_OscConfig>
 800248e:	4603      	mov	r3, r0
 8002490:	2b00      	cmp	r3, #0
 8002492:	bf14      	ite	ne
 8002494:	2301      	movne	r3, #1
 8002496:	2300      	moveq	r3, #0
 8002498:	b2db      	uxtb	r3, r3
 800249a:	2b00      	cmp	r3, #0
 800249c:	d001      	beq.n	80024a2 <_Z18SystemClock_Configv+0x13e>
  {
    Error_Handler();
 800249e:	f000 f993 	bl	80027c8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80024a2:	233f      	movs	r3, #63	@ 0x3f
 80024a4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80024a6:	2303      	movs	r3, #3
 80024a8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80024aa:	2300      	movs	r3, #0
 80024ac:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80024ae:	2308      	movs	r3, #8
 80024b0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80024b2:	2340      	movs	r3, #64	@ 0x40
 80024b4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80024b6:	2340      	movs	r3, #64	@ 0x40
 80024b8:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80024ba:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80024be:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80024c0:	2340      	movs	r3, #64	@ 0x40
 80024c2:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80024c4:	f107 030c 	add.w	r3, r7, #12
 80024c8:	2104      	movs	r1, #4
 80024ca:	4618      	mov	r0, r3
 80024cc:	f006 fdc2 	bl	8009054 <HAL_RCC_ClockConfig>
 80024d0:	4603      	mov	r3, r0
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	bf14      	ite	ne
 80024d6:	2301      	movne	r3, #1
 80024d8:	2300      	moveq	r3, #0
 80024da:	b2db      	uxtb	r3, r3
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d001      	beq.n	80024e4 <_Z18SystemClock_Configv+0x180>
  {
    Error_Handler();
 80024e0:	f000 f972 	bl	80027c8 <Error_Handler>
  }
}
 80024e4:	bf00      	nop
 80024e6:	3778      	adds	r7, #120	@ 0x78
 80024e8:	46bd      	mov	sp, r7
 80024ea:	bd80      	pop	{r7, pc}
 80024ec:	58000400 	.word	0x58000400
 80024f0:	58024800 	.word	0x58024800
 80024f4:	58024400 	.word	0x58024400

080024f8 <_Z24PeriphCommonClock_Configv>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b0b0      	sub	sp, #192	@ 0xc0
 80024fc:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80024fe:	463b      	mov	r3, r7
 8002500:	22c0      	movs	r2, #192	@ 0xc0
 8002502:	2100      	movs	r1, #0
 8002504:	4618      	mov	r0, r3
 8002506:	f010 fd07 	bl	8012f18 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC|RCC_PERIPHCLK_SPI1;
 800250a:	f44f 3288 	mov.w	r2, #69632	@ 0x11000
 800250e:	f04f 0300 	mov.w	r3, #0
 8002512:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 2;
 8002516:	2302      	movs	r3, #2
 8002518:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 12;
 800251a:	230c      	movs	r3, #12
 800251c:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 1;
 800251e:	2301      	movs	r3, #1
 8002520:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 10;
 8002522:	230a      	movs	r3, #10
 8002524:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8002526:	2302      	movs	r3, #2
 8002528:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 800252a:	23c0      	movs	r3, #192	@ 0xc0
 800252c:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 800252e:	2320      	movs	r3, #32
 8002530:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8002532:	2300      	movs	r3, #0
 8002534:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL2;
 8002536:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800253a:	653b      	str	r3, [r7, #80]	@ 0x50
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL2;
 800253c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002540:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002542:	463b      	mov	r3, r7
 8002544:	4618      	mov	r0, r3
 8002546:	f007 f911 	bl	800976c <HAL_RCCEx_PeriphCLKConfig>
 800254a:	4603      	mov	r3, r0
 800254c:	2b00      	cmp	r3, #0
 800254e:	bf14      	ite	ne
 8002550:	2301      	movne	r3, #1
 8002552:	2300      	moveq	r3, #0
 8002554:	b2db      	uxtb	r3, r3
 8002556:	2b00      	cmp	r3, #0
 8002558:	d001      	beq.n	800255e <_Z24PeriphCommonClock_Configv+0x66>
  {
    Error_Handler();
 800255a:	f000 f935 	bl	80027c8 <Error_Handler>
  }
}
 800255e:	bf00      	nop
 8002560:	37c0      	adds	r7, #192	@ 0xc0
 8002562:	46bd      	mov	sp, r7
 8002564:	bd80      	pop	{r7, pc}
	...

08002568 <_ZL17MX_SDMMC1_SD_Initv>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 800256c:	4b11      	ldr	r3, [pc, #68]	@ (80025b4 <_ZL17MX_SDMMC1_SD_Initv+0x4c>)
 800256e:	4a12      	ldr	r2, [pc, #72]	@ (80025b8 <_ZL17MX_SDMMC1_SD_Initv+0x50>)
 8002570:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8002572:	4b10      	ldr	r3, [pc, #64]	@ (80025b4 <_ZL17MX_SDMMC1_SD_Initv+0x4c>)
 8002574:	2200      	movs	r2, #0
 8002576:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_ENABLE;
 8002578:	4b0e      	ldr	r3, [pc, #56]	@ (80025b4 <_ZL17MX_SDMMC1_SD_Initv+0x4c>)
 800257a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800257e:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8002580:	4b0c      	ldr	r3, [pc, #48]	@ (80025b4 <_ZL17MX_SDMMC1_SD_Initv+0x4c>)
 8002582:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002586:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8002588:	4b0a      	ldr	r3, [pc, #40]	@ (80025b4 <_ZL17MX_SDMMC1_SD_Initv+0x4c>)
 800258a:	2200      	movs	r2, #0
 800258c:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 8;
 800258e:	4b09      	ldr	r3, [pc, #36]	@ (80025b4 <_ZL17MX_SDMMC1_SD_Initv+0x4c>)
 8002590:	2208      	movs	r2, #8
 8002592:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN SDMMC1_Init 2 */
  if (HAL_SD_Init(&hsd1) != HAL_OK)
 8002594:	4807      	ldr	r0, [pc, #28]	@ (80025b4 <_ZL17MX_SDMMC1_SD_Initv+0x4c>)
 8002596:	f009 fde7 	bl	800c168 <HAL_SD_Init>
 800259a:	4603      	mov	r3, r0
 800259c:	2b00      	cmp	r3, #0
 800259e:	bf14      	ite	ne
 80025a0:	2301      	movne	r3, #1
 80025a2:	2300      	moveq	r3, #0
 80025a4:	b2db      	uxtb	r3, r3
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d002      	beq.n	80025b0 <_ZL17MX_SDMMC1_SD_Initv+0x48>
  {
      printf("SD_Init error\n");
 80025aa:	4804      	ldr	r0, [pc, #16]	@ (80025bc <_ZL17MX_SDMMC1_SD_Initv+0x54>)
 80025ac:	f010 fbba 	bl	8012d24 <puts>
  }
  /* USER CODE END SDMMC1_Init 2 */

}
 80025b0:	bf00      	nop
 80025b2:	bd80      	pop	{r7, pc}
 80025b4:	2400039c 	.word	0x2400039c
 80025b8:	52007000 	.word	0x52007000
 80025bc:	08013e58 	.word	0x08013e58

080025c0 <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80025c4:	4b2c      	ldr	r3, [pc, #176]	@ (8002678 <_ZL19MX_USART1_UART_Initv+0xb8>)
 80025c6:	4a2d      	ldr	r2, [pc, #180]	@ (800267c <_ZL19MX_USART1_UART_Initv+0xbc>)
 80025c8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = PC_BAUD;
 80025ca:	4b2b      	ldr	r3, [pc, #172]	@ (8002678 <_ZL19MX_USART1_UART_Initv+0xb8>)
 80025cc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80025d0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80025d2:	4b29      	ldr	r3, [pc, #164]	@ (8002678 <_ZL19MX_USART1_UART_Initv+0xb8>)
 80025d4:	2200      	movs	r2, #0
 80025d6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80025d8:	4b27      	ldr	r3, [pc, #156]	@ (8002678 <_ZL19MX_USART1_UART_Initv+0xb8>)
 80025da:	2200      	movs	r2, #0
 80025dc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80025de:	4b26      	ldr	r3, [pc, #152]	@ (8002678 <_ZL19MX_USART1_UART_Initv+0xb8>)
 80025e0:	2200      	movs	r2, #0
 80025e2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80025e4:	4b24      	ldr	r3, [pc, #144]	@ (8002678 <_ZL19MX_USART1_UART_Initv+0xb8>)
 80025e6:	220c      	movs	r2, #12
 80025e8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80025ea:	4b23      	ldr	r3, [pc, #140]	@ (8002678 <_ZL19MX_USART1_UART_Initv+0xb8>)
 80025ec:	2200      	movs	r2, #0
 80025ee:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80025f0:	4b21      	ldr	r3, [pc, #132]	@ (8002678 <_ZL19MX_USART1_UART_Initv+0xb8>)
 80025f2:	2200      	movs	r2, #0
 80025f4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80025f6:	4b20      	ldr	r3, [pc, #128]	@ (8002678 <_ZL19MX_USART1_UART_Initv+0xb8>)
 80025f8:	2200      	movs	r2, #0
 80025fa:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80025fc:	4b1e      	ldr	r3, [pc, #120]	@ (8002678 <_ZL19MX_USART1_UART_Initv+0xb8>)
 80025fe:	2200      	movs	r2, #0
 8002600:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002602:	4b1d      	ldr	r3, [pc, #116]	@ (8002678 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8002604:	2200      	movs	r2, #0
 8002606:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002608:	481b      	ldr	r0, [pc, #108]	@ (8002678 <_ZL19MX_USART1_UART_Initv+0xb8>)
 800260a:	f00b fb5a 	bl	800dcc2 <HAL_UART_Init>
 800260e:	4603      	mov	r3, r0
 8002610:	2b00      	cmp	r3, #0
 8002612:	bf14      	ite	ne
 8002614:	2301      	movne	r3, #1
 8002616:	2300      	moveq	r3, #0
 8002618:	b2db      	uxtb	r3, r3
 800261a:	2b00      	cmp	r3, #0
 800261c:	d001      	beq.n	8002622 <_ZL19MX_USART1_UART_Initv+0x62>
  {
    Error_Handler();
 800261e:	f000 f8d3 	bl	80027c8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002622:	2100      	movs	r1, #0
 8002624:	4814      	ldr	r0, [pc, #80]	@ (8002678 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8002626:	f00c fbec 	bl	800ee02 <HAL_UARTEx_SetTxFifoThreshold>
 800262a:	4603      	mov	r3, r0
 800262c:	2b00      	cmp	r3, #0
 800262e:	bf14      	ite	ne
 8002630:	2301      	movne	r3, #1
 8002632:	2300      	moveq	r3, #0
 8002634:	b2db      	uxtb	r3, r3
 8002636:	2b00      	cmp	r3, #0
 8002638:	d001      	beq.n	800263e <_ZL19MX_USART1_UART_Initv+0x7e>
  {
    Error_Handler();
 800263a:	f000 f8c5 	bl	80027c8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800263e:	2100      	movs	r1, #0
 8002640:	480d      	ldr	r0, [pc, #52]	@ (8002678 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8002642:	f00c fc1c 	bl	800ee7e <HAL_UARTEx_SetRxFifoThreshold>
 8002646:	4603      	mov	r3, r0
 8002648:	2b00      	cmp	r3, #0
 800264a:	bf14      	ite	ne
 800264c:	2301      	movne	r3, #1
 800264e:	2300      	moveq	r3, #0
 8002650:	b2db      	uxtb	r3, r3
 8002652:	2b00      	cmp	r3, #0
 8002654:	d001      	beq.n	800265a <_ZL19MX_USART1_UART_Initv+0x9a>
  {
    Error_Handler();
 8002656:	f000 f8b7 	bl	80027c8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800265a:	4807      	ldr	r0, [pc, #28]	@ (8002678 <_ZL19MX_USART1_UART_Initv+0xb8>)
 800265c:	f00c fb98 	bl	800ed90 <HAL_UARTEx_DisableFifoMode>
 8002660:	4603      	mov	r3, r0
 8002662:	2b00      	cmp	r3, #0
 8002664:	bf14      	ite	ne
 8002666:	2301      	movne	r3, #1
 8002668:	2300      	moveq	r3, #0
 800266a:	b2db      	uxtb	r3, r3
 800266c:	2b00      	cmp	r3, #0
 800266e:	d001      	beq.n	8002674 <_ZL19MX_USART1_UART_Initv+0xb4>
  {
    Error_Handler();
 8002670:	f000 f8aa 	bl	80027c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002674:	bf00      	nop
 8002676:	bd80      	pop	{r7, pc}
 8002678:	24000418 	.word	0x24000418
 800267c:	40011000 	.word	0x40011000

08002680 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b08a      	sub	sp, #40	@ 0x28
 8002684:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002686:	f107 0314 	add.w	r3, r7, #20
 800268a:	2200      	movs	r2, #0
 800268c:	601a      	str	r2, [r3, #0]
 800268e:	605a      	str	r2, [r3, #4]
 8002690:	609a      	str	r2, [r3, #8]
 8002692:	60da      	str	r2, [r3, #12]
 8002694:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002696:	4b26      	ldr	r3, [pc, #152]	@ (8002730 <_ZL12MX_GPIO_Initv+0xb0>)
 8002698:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800269c:	4a24      	ldr	r2, [pc, #144]	@ (8002730 <_ZL12MX_GPIO_Initv+0xb0>)
 800269e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80026a2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80026a6:	4b22      	ldr	r3, [pc, #136]	@ (8002730 <_ZL12MX_GPIO_Initv+0xb0>)
 80026a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80026ac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80026b0:	613b      	str	r3, [r7, #16]
 80026b2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80026b4:	4b1e      	ldr	r3, [pc, #120]	@ (8002730 <_ZL12MX_GPIO_Initv+0xb0>)
 80026b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80026ba:	4a1d      	ldr	r2, [pc, #116]	@ (8002730 <_ZL12MX_GPIO_Initv+0xb0>)
 80026bc:	f043 0304 	orr.w	r3, r3, #4
 80026c0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80026c4:	4b1a      	ldr	r3, [pc, #104]	@ (8002730 <_ZL12MX_GPIO_Initv+0xb0>)
 80026c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80026ca:	f003 0304 	and.w	r3, r3, #4
 80026ce:	60fb      	str	r3, [r7, #12]
 80026d0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80026d2:	4b17      	ldr	r3, [pc, #92]	@ (8002730 <_ZL12MX_GPIO_Initv+0xb0>)
 80026d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80026d8:	4a15      	ldr	r2, [pc, #84]	@ (8002730 <_ZL12MX_GPIO_Initv+0xb0>)
 80026da:	f043 0301 	orr.w	r3, r3, #1
 80026de:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80026e2:	4b13      	ldr	r3, [pc, #76]	@ (8002730 <_ZL12MX_GPIO_Initv+0xb0>)
 80026e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80026e8:	f003 0301 	and.w	r3, r3, #1
 80026ec:	60bb      	str	r3, [r7, #8]
 80026ee:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80026f0:	4b0f      	ldr	r3, [pc, #60]	@ (8002730 <_ZL12MX_GPIO_Initv+0xb0>)
 80026f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80026f6:	4a0e      	ldr	r2, [pc, #56]	@ (8002730 <_ZL12MX_GPIO_Initv+0xb0>)
 80026f8:	f043 0308 	orr.w	r3, r3, #8
 80026fc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002700:	4b0b      	ldr	r3, [pc, #44]	@ (8002730 <_ZL12MX_GPIO_Initv+0xb0>)
 8002702:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002706:	f003 0308 	and.w	r3, r3, #8
 800270a:	607b      	str	r3, [r7, #4]
 800270c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800270e:	2310      	movs	r3, #16
 8002710:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002712:	2300      	movs	r3, #0
 8002714:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002716:	2300      	movs	r3, #0
 8002718:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800271a:	f107 0314 	add.w	r3, r7, #20
 800271e:	4619      	mov	r1, r3
 8002720:	4804      	ldr	r0, [pc, #16]	@ (8002734 <_ZL12MX_GPIO_Initv+0xb4>)
 8002722:	f005 fe53 	bl	80083cc <HAL_GPIO_Init>

}
 8002726:	bf00      	nop
 8002728:	3728      	adds	r7, #40	@ 0x28
 800272a:	46bd      	mov	sp, r7
 800272c:	bd80      	pop	{r7, pc}
 800272e:	bf00      	nop
 8002730:	58024400 	.word	0x58024400
 8002734:	58020800 	.word	0x58020800

08002738 <_ZL10MPU_Configv>:
/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

void MPU_Config(void)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b084      	sub	sp, #16
 800273c:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 800273e:	463b      	mov	r3, r7
 8002740:	2200      	movs	r2, #0
 8002742:	601a      	str	r2, [r3, #0]
 8002744:	605a      	str	r2, [r3, #4]
 8002746:	609a      	str	r2, [r3, #8]
 8002748:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 800274a:	f004 f8fd 	bl	8006948 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800274e:	2301      	movs	r3, #1
 8002750:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8002752:	2300      	movs	r3, #0
 8002754:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8002756:	2300      	movs	r3, #0
 8002758:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 800275a:	231f      	movs	r3, #31
 800275c:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 800275e:	2387      	movs	r3, #135	@ 0x87
 8002760:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8002762:	2300      	movs	r3, #0
 8002764:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8002766:	2300      	movs	r3, #0
 8002768:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 800276a:	2301      	movs	r3, #1
 800276c:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 800276e:	2301      	movs	r3, #1
 8002770:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8002772:	2300      	movs	r3, #0
 8002774:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8002776:	2300      	movs	r3, #0
 8002778:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800277a:	463b      	mov	r3, r7
 800277c:	4618      	mov	r0, r3
 800277e:	f004 f91b 	bl	80069b8 <HAL_MPU_ConfigRegion>

  /* Configure the MPU attributes as Device not cacheable
     for DMA buffers */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8002782:	2301      	movs	r3, #1
 8002784:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.BaseAddress = 0x30000000;
 8002786:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 800278a:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_256B;
 800278c:	2307      	movs	r3, #7
 800278e:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8002790:	2303      	movs	r3, #3
 8002792:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8002794:	2301      	movs	r3, #1
 8002796:	73fb      	strb	r3, [r7, #15]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8002798:	2300      	movs	r3, #0
 800279a:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 800279c:	2300      	movs	r3, #0
 800279e:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 80027a0:	2301      	movs	r3, #1
 80027a2:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80027a4:	2300      	movs	r3, #0
 80027a6:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.SubRegionDisable = 0x00;
 80027a8:	2300      	movs	r3, #0
 80027aa:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 80027ac:	2300      	movs	r3, #0
 80027ae:	733b      	strb	r3, [r7, #12]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80027b0:	463b      	mov	r3, r7
 80027b2:	4618      	mov	r0, r3
 80027b4:	f004 f900 	bl	80069b8 <HAL_MPU_ConfigRegion>

  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80027b8:	2004      	movs	r0, #4
 80027ba:	f004 f8dd 	bl	8006978 <HAL_MPU_Enable>

}
 80027be:	bf00      	nop
 80027c0:	3710      	adds	r7, #16
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bd80      	pop	{r7, pc}
	...

080027c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

	printf("error\n\r");
 80027cc:	4803      	ldr	r0, [pc, #12]	@ (80027dc <Error_Handler+0x14>)
 80027ce:	f010 fa39 	bl	8012c44 <iprintf>
  __ASM volatile ("cpsid i" : : : "memory");
 80027d2:	b672      	cpsid	i
}
 80027d4:	bf00      	nop

  __disable_irq();
  while (1)
 80027d6:	bf00      	nop
 80027d8:	e7fd      	b.n	80027d6 <Error_Handler+0xe>
 80027da:	bf00      	nop
 80027dc:	08013e68 	.word	0x08013e68

080027e0 <_ZNK19ArduinoJson6101_1108not_nullIPKcE3getEv>:
 public:
  explicit not_null(T ptr) : _ptr(ptr) {
    ARDUINOJSON_ASSERT(ptr != NULL);
  }

  T get() const {
 80027e0:	b480      	push	{r7}
 80027e2:	b083      	sub	sp, #12
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
    ARDUINOJSON_ASSERT(_ptr != NULL);
    return _ptr;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
  }
 80027ec:	4618      	mov	r0, r3
 80027ee:	370c      	adds	r7, #12
 80027f0:	46bd      	mov	sp, r7
 80027f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f6:	4770      	bx	lr

080027f8 <_ZN19ArduinoJson6101_11010MemoryPool10allocRightINS_11VariantSlotEEEPT_v>:
  T* allocRight() {
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b082      	sub	sp, #8
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<T*>(allocRight(sizeof(T)));
 8002800:	2110      	movs	r1, #16
 8002802:	6878      	ldr	r0, [r7, #4]
 8002804:	f7fe fadb 	bl	8000dbe <_ZN19ArduinoJson6101_11010MemoryPool10allocRightEj>
 8002808:	4603      	mov	r3, r0
  }
 800280a:	4618      	mov	r0, r3
 800280c:	3708      	adds	r7, #8
 800280e:	46bd      	mov	sp, r7
 8002810:	bd80      	pop	{r7, pc}

08002812 <_ZN19ArduinoJson6101_11013make_not_nullIPKcEENS_8not_nullIT_EES4_>:
 private:
  T _ptr;
};

template <typename T>
not_null<T> make_not_null(T ptr) {
 8002812:	b580      	push	{r7, lr}
 8002814:	b084      	sub	sp, #16
 8002816:	af00      	add	r7, sp, #0
 8002818:	6078      	str	r0, [r7, #4]
  ARDUINOJSON_ASSERT(ptr != NULL);
  return not_null<T>(ptr);
 800281a:	f107 030c 	add.w	r3, r7, #12
 800281e:	6879      	ldr	r1, [r7, #4]
 8002820:	4618      	mov	r0, r3
 8002822:	f000 f891 	bl	8002948 <_ZN19ArduinoJson6101_1108not_nullIPKcEC1ES2_>
 8002826:	68fb      	ldr	r3, [r7, #12]
}
 8002828:	4618      	mov	r0, r3
 800282a:	3710      	adds	r7, #16
 800282c:	46bd      	mov	sp, r7
 800282e:	bd80      	pop	{r7, pc}

08002830 <_ZN19ArduinoJson6101_11014VariantRefBaseINS_11VariantDataEEC1EPS1_>:
  VariantRefBase(TData *data) : _data(data) {}
 8002830:	b480      	push	{r7}
 8002832:	b083      	sub	sp, #12
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
 8002838:	6039      	str	r1, [r7, #0]
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	683a      	ldr	r2, [r7, #0]
 800283e:	601a      	str	r2, [r3, #0]
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	4618      	mov	r0, r3
 8002844:	370c      	adds	r7, #12
 8002846:	46bd      	mov	sp, r7
 8002848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284c:	4770      	bx	lr

0800284e <_ZN19ArduinoJson6101_11012ArrayRefBaseINS_14CollectionDataEEC1EPS1_>:
  ArrayRefBase(TData* data) : _data(data) {}
 800284e:	b480      	push	{r7}
 8002850:	b083      	sub	sp, #12
 8002852:	af00      	add	r7, sp, #0
 8002854:	6078      	str	r0, [r7, #4]
 8002856:	6039      	str	r1, [r7, #0]
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	683a      	ldr	r2, [r7, #0]
 800285c:	601a      	str	r2, [r3, #0]
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	4618      	mov	r0, r3
 8002862:	370c      	adds	r7, #12
 8002864:	46bd      	mov	sp, r7
 8002866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286a:	4770      	bx	lr

0800286c <_ZN19ArduinoJson6101_11013ObjectRefBaseINS_14CollectionDataEEC1EPS1_>:
  ObjectRefBase(TData* data) : _data(data) {}
 800286c:	b480      	push	{r7}
 800286e:	b083      	sub	sp, #12
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
 8002874:	6039      	str	r1, [r7, #0]
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	683a      	ldr	r2, [r7, #0]
 800287a:	601a      	str	r2, [r3, #0]
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	4618      	mov	r0, r3
 8002880:	370c      	adds	r7, #12
 8002882:	46bd      	mov	sp, r7
 8002884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002888:	4770      	bx	lr

0800288a <_ZNK19ArduinoJson6101_11014CollectionData3getINS_21ConstRamStringAdapterEEEPNS_11VariantDataET_>:
  }
  return 0;
}

template <typename TAdaptedString>
inline VariantData* CollectionData::get(TAdaptedString key) const {
 800288a:	b580      	push	{r7, lr}
 800288c:	b084      	sub	sp, #16
 800288e:	af00      	add	r7, sp, #0
 8002890:	6078      	str	r0, [r7, #4]
 8002892:	6039      	str	r1, [r7, #0]
  VariantSlot* slot = getSlot(key);
 8002894:	6839      	ldr	r1, [r7, #0]
 8002896:	6878      	ldr	r0, [r7, #4]
 8002898:	f000 f865 	bl	8002966 <_ZNK19ArduinoJson6101_11014CollectionData7getSlotINS_21ConstRamStringAdapterEEEPNS_11VariantSlotET_>
 800289c:	60f8      	str	r0, [r7, #12]
  return slot ? slot->data() : 0;
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d004      	beq.n	80028ae <_ZNK19ArduinoJson6101_11014CollectionData3getINS_21ConstRamStringAdapterEEEPNS_11VariantDataET_+0x24>
 80028a4:	68f8      	ldr	r0, [r7, #12]
 80028a6:	f7fe f973 	bl	8000b90 <_ZN19ArduinoJson6101_11011VariantSlot4dataEv>
 80028aa:	4603      	mov	r3, r0
 80028ac:	e000      	b.n	80028b0 <_ZNK19ArduinoJson6101_11014CollectionData3getINS_21ConstRamStringAdapterEEEPNS_11VariantDataET_+0x26>
 80028ae:	2300      	movs	r3, #0
}
 80028b0:	4618      	mov	r0, r3
 80028b2:	3710      	adds	r7, #16
 80028b4:	46bd      	mov	sp, r7
 80028b6:	bd80      	pop	{r7, pc}

080028b8 <_ZN19ArduinoJson6101_11017BasicJsonDocumentINS_16DefaultAllocatorEEC1EjS1_>:
};

template <typename TAllocator>
class BasicJsonDocument : AllocatorOwner<TAllocator>, public JsonDocument {
 public:
  explicit BasicJsonDocument(size_t capa, TAllocator allocator = TAllocator())
 80028b8:	b590      	push	{r4, r7, lr}
 80028ba:	b08b      	sub	sp, #44	@ 0x2c
 80028bc:	af02      	add	r7, sp, #8
 80028be:	60f8      	str	r0, [r7, #12]
 80028c0:	60b9      	str	r1, [r7, #8]
 80028c2:	713a      	strb	r2, [r7, #4]
      : AllocatorOwner<TAllocator>(allocator), JsonDocument(allocPool(capa)) {}
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	4621      	mov	r1, r4
 80028c8:	4618      	mov	r0, r3
 80028ca:	f000 f888 	bl	80029de <_ZN19ArduinoJson6101_11014AllocatorOwnerINS_16DefaultAllocatorEEC1ES1_>
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	f103 0408 	add.w	r4, r3, #8
 80028d4:	f107 0310 	add.w	r3, r7, #16
 80028d8:	68ba      	ldr	r2, [r7, #8]
 80028da:	68f9      	ldr	r1, [r7, #12]
 80028dc:	4618      	mov	r0, r3
 80028de:	f000 f865 	bl	80029ac <_ZN19ArduinoJson6101_11017BasicJsonDocumentINS_16DefaultAllocatorEE9allocPoolEj>
 80028e2:	69fb      	ldr	r3, [r7, #28]
 80028e4:	9300      	str	r3, [sp, #0]
 80028e6:	f107 0310 	add.w	r3, r7, #16
 80028ea:	cb0e      	ldmia	r3, {r1, r2, r3}
 80028ec:	4620      	mov	r0, r4
 80028ee:	f7fe fc77 	bl	80011e0 <_ZN19ArduinoJson6101_11012JsonDocumentC1ENS_10MemoryPoolE>
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	4618      	mov	r0, r3
 80028f6:	3724      	adds	r7, #36	@ 0x24
 80028f8:	46bd      	mov	sp, r7
 80028fa:	bd90      	pop	{r4, r7, pc}

080028fc <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_S5_>:
   *  @return  New string with @a __lhs followed by @a __rhs.
   */
  template<typename _CharT, typename _Traits, typename _Alloc>
    _GLIBCXX20_CONSTEXPR
    inline basic_string<_CharT, _Traits, _Alloc>
    operator+(const basic_string<_CharT, _Traits, _Alloc>& __lhs, _CharT __rhs)
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b084      	sub	sp, #16
 8002900:	af00      	add	r7, sp, #0
 8002902:	60f8      	str	r0, [r7, #12]
 8002904:	60b9      	str	r1, [r7, #8]
 8002906:	4613      	mov	r3, r2
 8002908:	71fb      	strb	r3, [r7, #7]
    {
      typedef basic_string<_CharT, _Traits, _Alloc>	__string_type;
      typedef typename __string_type::size_type		__size_type;
      __string_type __str(__lhs);
 800290a:	68b9      	ldr	r1, [r7, #8]
 800290c:	68f8      	ldr	r0, [r7, #12]
 800290e:	f00f ffa0 	bl	8012852 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
      __str.append(__size_type(1), __rhs);
 8002912:	79fb      	ldrb	r3, [r7, #7]
 8002914:	461a      	mov	r2, r3
 8002916:	2101      	movs	r1, #1
 8002918:	68f8      	ldr	r0, [r7, #12]
 800291a:	f00f ff73 	bl	8012804 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEjc>
      return __str;
 800291e:	bf00      	nop
    }
 8002920:	68f8      	ldr	r0, [r7, #12]
 8002922:	3710      	adds	r7, #16
 8002924:	46bd      	mov	sp, r7
 8002926:	bd80      	pop	{r7, pc}

08002928 <_ZN19ArduinoJson6101_11015deserializeJsonIKcEENS_20DeserializationErrorERNS_12JsonDocumentEPT_NS_12NestingLimitE>:
    NestingLimit nestingLimit = NestingLimit()) {
  return deserialize<JsonDeserializer>(doc, input, nestingLimit);
}

template <typename TInput>
DeserializationError deserializeJson(
 8002928:	b580      	push	{r7, lr}
 800292a:	b084      	sub	sp, #16
 800292c:	af00      	add	r7, sp, #0
 800292e:	60f8      	str	r0, [r7, #12]
 8002930:	60b9      	str	r1, [r7, #8]
 8002932:	713a      	strb	r2, [r7, #4]
    JsonDocument &doc, TInput *input,
    NestingLimit nestingLimit = NestingLimit()) {
  return deserialize<JsonDeserializer>(doc, input, nestingLimit);
 8002934:	793a      	ldrb	r2, [r7, #4]
 8002936:	68b9      	ldr	r1, [r7, #8]
 8002938:	68f8      	ldr	r0, [r7, #12]
 800293a:	f000 f85c 	bl	80029f6 <_ZN19ArduinoJson6101_11011deserializeINS_16JsonDeserializerEKcEENS_20DeserializationErrorERNS_12JsonDocumentEPT0_NS_12NestingLimitE>
 800293e:	4603      	mov	r3, r0
}
 8002940:	4618      	mov	r0, r3
 8002942:	3710      	adds	r7, #16
 8002944:	46bd      	mov	sp, r7
 8002946:	bd80      	pop	{r7, pc}

08002948 <_ZN19ArduinoJson6101_1108not_nullIPKcEC1ES2_>:
  explicit not_null(T ptr) : _ptr(ptr) {
 8002948:	b480      	push	{r7}
 800294a:	b083      	sub	sp, #12
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
 8002950:	6039      	str	r1, [r7, #0]
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	683a      	ldr	r2, [r7, #0]
 8002956:	601a      	str	r2, [r3, #0]
  }
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	4618      	mov	r0, r3
 800295c:	370c      	adds	r7, #12
 800295e:	46bd      	mov	sp, r7
 8002960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002964:	4770      	bx	lr

08002966 <_ZNK19ArduinoJson6101_11014CollectionData7getSlotINS_21ConstRamStringAdapterEEEPNS_11VariantSlotET_>:
inline VariantSlot* CollectionData::getSlot(TAdaptedString key) const {
 8002966:	b580      	push	{r7, lr}
 8002968:	b084      	sub	sp, #16
 800296a:	af00      	add	r7, sp, #0
 800296c:	6078      	str	r0, [r7, #4]
 800296e:	6039      	str	r1, [r7, #0]
  VariantSlot* slot = _head;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	60fb      	str	r3, [r7, #12]
  while (slot) {
 8002976:	e00f      	b.n	8002998 <_ZNK19ArduinoJson6101_11014CollectionData7getSlotINS_21ConstRamStringAdapterEEEPNS_11VariantSlotET_+0x32>
    if (key.equals(slot->key())) break;
 8002978:	68f8      	ldr	r0, [r7, #12]
 800297a:	f7fe f954 	bl	8000c26 <_ZNK19ArduinoJson6101_11011VariantSlot3keyEv>
 800297e:	4602      	mov	r2, r0
 8002980:	463b      	mov	r3, r7
 8002982:	4611      	mov	r1, r2
 8002984:	4618      	mov	r0, r3
 8002986:	f7fe fa51 	bl	8000e2c <_ZNK19ArduinoJson6101_11021ConstRamStringAdapter6equalsEPKc>
 800298a:	4603      	mov	r3, r0
 800298c:	2b00      	cmp	r3, #0
 800298e:	d107      	bne.n	80029a0 <_ZNK19ArduinoJson6101_11014CollectionData7getSlotINS_21ConstRamStringAdapterEEEPNS_11VariantSlotET_+0x3a>
    slot = slot->next();
 8002990:	68f8      	ldr	r0, [r7, #12]
 8002992:	f7fe f908 	bl	8000ba6 <_ZN19ArduinoJson6101_11011VariantSlot4nextEv>
 8002996:	60f8      	str	r0, [r7, #12]
  while (slot) {
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	2b00      	cmp	r3, #0
 800299c:	d1ec      	bne.n	8002978 <_ZNK19ArduinoJson6101_11014CollectionData7getSlotINS_21ConstRamStringAdapterEEEPNS_11VariantSlotET_+0x12>
 800299e:	e000      	b.n	80029a2 <_ZNK19ArduinoJson6101_11014CollectionData7getSlotINS_21ConstRamStringAdapterEEEPNS_11VariantSlotET_+0x3c>
    if (key.equals(slot->key())) break;
 80029a0:	bf00      	nop
  return slot;
 80029a2:	68fb      	ldr	r3, [r7, #12]
}
 80029a4:	4618      	mov	r0, r3
 80029a6:	3710      	adds	r7, #16
 80029a8:	46bd      	mov	sp, r7
 80029aa:	bd80      	pop	{r7, pc}

080029ac <_ZN19ArduinoJson6101_11017BasicJsonDocumentINS_16DefaultAllocatorEE9allocPoolEj>:
    set(src);
    return *this;
  }

 private:
  MemoryPool allocPool(size_t requiredSize) {
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b086      	sub	sp, #24
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	60f8      	str	r0, [r7, #12]
 80029b4:	60b9      	str	r1, [r7, #8]
 80029b6:	607a      	str	r2, [r7, #4]
    size_t capa = addPadding(requiredSize);
 80029b8:	6878      	ldr	r0, [r7, #4]
 80029ba:	f7fe f953 	bl	8000c64 <_ZN19ArduinoJson6101_11010addPaddingEj>
 80029be:	6178      	str	r0, [r7, #20]
    return MemoryPool(reinterpret_cast<char*>(this->allocate(capa)), capa);
 80029c0:	68bb      	ldr	r3, [r7, #8]
 80029c2:	6979      	ldr	r1, [r7, #20]
 80029c4:	4618      	mov	r0, r3
 80029c6:	f000 f874 	bl	8002ab2 <_ZN19ArduinoJson6101_11014AllocatorOwnerINS_16DefaultAllocatorEE8allocateEj>
 80029ca:	4603      	mov	r3, r0
 80029cc:	697a      	ldr	r2, [r7, #20]
 80029ce:	4619      	mov	r1, r3
 80029d0:	68f8      	ldr	r0, [r7, #12]
 80029d2:	f7fe f957 	bl	8000c84 <_ZN19ArduinoJson6101_11010MemoryPoolC1EPcj>
  }
 80029d6:	68f8      	ldr	r0, [r7, #12]
 80029d8:	3718      	adds	r7, #24
 80029da:	46bd      	mov	sp, r7
 80029dc:	bd80      	pop	{r7, pc}

080029de <_ZN19ArduinoJson6101_11014AllocatorOwnerINS_16DefaultAllocatorEEC1ES1_>:
  AllocatorOwner(TAllocator allocator) : _allocator(allocator) {}
 80029de:	b480      	push	{r7}
 80029e0:	b083      	sub	sp, #12
 80029e2:	af00      	add	r7, sp, #0
 80029e4:	6078      	str	r0, [r7, #4]
 80029e6:	7039      	strb	r1, [r7, #0]
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	4618      	mov	r0, r3
 80029ec:	370c      	adds	r7, #12
 80029ee:	46bd      	mov	sp, r7
 80029f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f4:	4770      	bx	lr

080029f6 <_ZN19ArduinoJson6101_11011deserializeINS_16JsonDeserializerEKcEENS_20DeserializationErrorERNS_12JsonDocumentEPT0_NS_12NestingLimitE>:
//
// deserialize(JsonDocument&, char*);
// deserialize(JsonDocument&, const char*);
// deserialize(JsonDocument&, const __FlashStringHelper*);
template <template <typename, typename> class TDeserializer, typename TChar>
DeserializationError deserialize(JsonDocument &doc, TChar *input,
 80029f6:	b5b0      	push	{r4, r5, r7, lr}
 80029f8:	b08a      	sub	sp, #40	@ 0x28
 80029fa:	af02      	add	r7, sp, #8
 80029fc:	60f8      	str	r0, [r7, #12]
 80029fe:	60b9      	str	r1, [r7, #8]
 8002a00:	713a      	strb	r2, [r7, #4]
                                 NestingLimit nestingLimit) {
  doc.clear();
 8002a02:	68f8      	ldr	r0, [r7, #12]
 8002a04:	f7fe fbc4 	bl	8001190 <_ZN19ArduinoJson6101_11012JsonDocument5clearEv>
  return makeDeserializer<TDeserializer>(
 8002a08:	68f8      	ldr	r0, [r7, #12]
 8002a0a:	f7fe fbd2 	bl	80011b2 <_ZN19ArduinoJson6101_11012JsonDocument10memoryPoolEv>
 8002a0e:	4604      	mov	r4, r0
 8002a10:	68b8      	ldr	r0, [r7, #8]
 8002a12:	f000 f85d 	bl	8002ad0 <_ZN19ArduinoJson6101_11010makeReaderIKcEENS_23UnsafeCharPointerReaderEPT_>
 8002a16:	4605      	mov	r5, r0
 8002a18:	68f8      	ldr	r0, [r7, #12]
 8002a1a:	f7fe fbca 	bl	80011b2 <_ZN19ArduinoJson6101_11012JsonDocument10memoryPoolEv>
 8002a1e:	4603      	mov	r3, r0
 8002a20:	68b9      	ldr	r1, [r7, #8]
 8002a22:	4618      	mov	r0, r3
 8002a24:	f000 f863 	bl	8002aee <_ZN19ArduinoJson6101_11017makeStringStorageIKcEENS_13StringStorageIPT_vE4typeERNS_10MemoryPoolES4_>
 8002a28:	4602      	mov	r2, r0
 8002a2a:	793b      	ldrb	r3, [r7, #4]
 8002a2c:	f107 0010 	add.w	r0, r7, #16
 8002a30:	9300      	str	r3, [sp, #0]
 8002a32:	4613      	mov	r3, r2
 8002a34:	462a      	mov	r2, r5
 8002a36:	4621      	mov	r1, r4
 8002a38:	f000 f868 	bl	8002b0c <_ZN19ArduinoJson6101_11016makeDeserializerINS_16JsonDeserializerENS_23UnsafeCharPointerReaderENS_12StringCopierEEET_IT0_T1_ERNS_10MemoryPoolES5_S6_h>
             doc.memoryPool(), makeReader(input),
             makeStringStorage(doc.memoryPool(), input), nestingLimit.value)
      .parse(doc.data());
 8002a3c:	68f8      	ldr	r0, [r7, #12]
 8002a3e:	f7fe fbc3 	bl	80011c8 <_ZN19ArduinoJson6101_11012JsonDocument4dataEv>
 8002a42:	4602      	mov	r2, r0
 8002a44:	f107 0310 	add.w	r3, r7, #16
 8002a48:	4611      	mov	r1, r2
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	f000 f871 	bl	8002b32 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE5parseERNS_11VariantDataE>
 8002a50:	4603      	mov	r3, r0
}
 8002a52:	4618      	mov	r0, r3
 8002a54:	3720      	adds	r7, #32
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bdb0      	pop	{r4, r5, r7, pc}

08002a5a <_ZNK19ArduinoJson6101_11012VariantCastsINS_11MemberProxyIRNS_12JsonDocumentEPKcEEE4implEv>:
  }

 private:
  const TImpl *impl() const {
 8002a5a:	b480      	push	{r7}
 8002a5c:	b083      	sub	sp, #12
 8002a5e:	af00      	add	r7, sp, #0
 8002a60:	6078      	str	r0, [r7, #4]
    return static_cast<const TImpl *>(this);
 8002a62:	687b      	ldr	r3, [r7, #4]
  }
 8002a64:	4618      	mov	r0, r3
 8002a66:	370c      	adds	r7, #12
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6e:	4770      	bx	lr

08002a70 <_ZNK19ArduinoJson6101_11012VariantCastsINS_10VariantRefEE4implEv>:
  const TImpl *impl() const {
 8002a70:	b480      	push	{r7}
 8002a72:	b083      	sub	sp, #12
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
    return static_cast<const TImpl *>(this);
 8002a78:	687b      	ldr	r3, [r7, #4]
  }
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	370c      	adds	r7, #12
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a84:	4770      	bx	lr

08002a86 <_ZNK19ArduinoJson6101_11015ObjectShortcutsINS_9ObjectRefEE4implEv>:
  // createNestedObject(const __FlashStringHelper*) const
  template <typename TChar>
  ObjectRef createNestedObject(TChar *key) const;

 private:
  const TObject *impl() const {
 8002a86:	b480      	push	{r7}
 8002a88:	b083      	sub	sp, #12
 8002a8a:	af00      	add	r7, sp, #0
 8002a8c:	6078      	str	r0, [r7, #4]
    return static_cast<const TObject *>(this);
 8002a8e:	687b      	ldr	r3, [r7, #4]
  }
 8002a90:	4618      	mov	r0, r3
 8002a92:	370c      	adds	r7, #12
 8002a94:	46bd      	mov	sp, r7
 8002a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9a:	4770      	bx	lr

08002a9c <_ZNK19ArduinoJson6101_11012VariantCastsINS_11MemberProxyIRKNS_9ObjectRefEPKcEEE4implEv>:
  const TImpl *impl() const {
 8002a9c:	b480      	push	{r7}
 8002a9e:	b083      	sub	sp, #12
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
    return static_cast<const TImpl *>(this);
 8002aa4:	687b      	ldr	r3, [r7, #4]
  }
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	370c      	adds	r7, #12
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab0:	4770      	bx	lr

08002ab2 <_ZN19ArduinoJson6101_11014AllocatorOwnerINS_16DefaultAllocatorEE8allocateEj>:
  void* allocate(size_t n) {
 8002ab2:	b580      	push	{r7, lr}
 8002ab4:	b082      	sub	sp, #8
 8002ab6:	af00      	add	r7, sp, #0
 8002ab8:	6078      	str	r0, [r7, #4]
 8002aba:	6039      	str	r1, [r7, #0]
    return _allocator.allocate(n);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6839      	ldr	r1, [r7, #0]
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	f7fe fbaa 	bl	800121a <_ZN19ArduinoJson6101_11016DefaultAllocator8allocateEj>
 8002ac6:	4603      	mov	r3, r0
  }
 8002ac8:	4618      	mov	r0, r3
 8002aca:	3708      	adds	r7, #8
 8002acc:	46bd      	mov	sp, r7
 8002ace:	bd80      	pop	{r7, pc}

08002ad0 <_ZN19ArduinoJson6101_11010makeReaderIKcEENS_23UnsafeCharPointerReaderEPT_>:
    return _ptr == _end;
  }
};

template <typename TChar>
inline UnsafeCharPointerReader makeReader(TChar* input) {
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b084      	sub	sp, #16
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
  return UnsafeCharPointerReader(reinterpret_cast<const char*>(input));
 8002ad8:	f107 030c 	add.w	r3, r7, #12
 8002adc:	6879      	ldr	r1, [r7, #4]
 8002ade:	4618      	mov	r0, r3
 8002ae0:	f7fe fca6 	bl	8001430 <_ZN19ArduinoJson6101_11023UnsafeCharPointerReaderC1EPKc>
 8002ae4:	68fb      	ldr	r3, [r7, #12]
}
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	3710      	adds	r7, #16
 8002aea:	46bd      	mov	sp, r7
 8002aec:	bd80      	pop	{r7, pc}

08002aee <_ZN19ArduinoJson6101_11017makeStringStorageIKcEENS_13StringStorageIPT_vE4typeERNS_10MemoryPoolES4_>:
                                                       TInput& input) {
  return StringStorage<TInput>::create(pool, input);
}

template <typename TChar>
typename StringStorage<TChar*>::type makeStringStorage(MemoryPool& pool,
 8002aee:	b580      	push	{r7, lr}
 8002af0:	b082      	sub	sp, #8
 8002af2:	af00      	add	r7, sp, #0
 8002af4:	6078      	str	r0, [r7, #4]
 8002af6:	6039      	str	r1, [r7, #0]
                                                       TChar* input) {
  return StringStorage<TChar*>::create(pool, input);
 8002af8:	463b      	mov	r3, r7
 8002afa:	4619      	mov	r1, r3
 8002afc:	6878      	ldr	r0, [r7, #4]
 8002afe:	f000 f863 	bl	8002bc8 <_ZN19ArduinoJson6101_11013StringStorageIPKcvE6createERNS_10MemoryPoolERS2_>
 8002b02:	4603      	mov	r3, r0
}
 8002b04:	4618      	mov	r0, r3
 8002b06:	3708      	adds	r7, #8
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	bd80      	pop	{r7, pc}

08002b0c <_ZN19ArduinoJson6101_11016makeDeserializerINS_16JsonDeserializerENS_23UnsafeCharPointerReaderENS_12StringCopierEEET_IT0_T1_ERNS_10MemoryPoolES5_S6_h>:
TDeserializer<TReader, TWriter> makeDeserializer(MemoryPool &pool,
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b086      	sub	sp, #24
 8002b10:	af02      	add	r7, sp, #8
 8002b12:	60f8      	str	r0, [r7, #12]
 8002b14:	60b9      	str	r1, [r7, #8]
 8002b16:	607a      	str	r2, [r7, #4]
 8002b18:	603b      	str	r3, [r7, #0]
  return TDeserializer<TReader, TWriter>(pool, reader, writer, nestingLimit);
 8002b1a:	7e3b      	ldrb	r3, [r7, #24]
 8002b1c:	9300      	str	r3, [sp, #0]
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	687a      	ldr	r2, [r7, #4]
 8002b22:	68b9      	ldr	r1, [r7, #8]
 8002b24:	68f8      	ldr	r0, [r7, #12]
 8002b26:	f000 f85f 	bl	8002be8 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEEC1ERNS_10MemoryPoolES1_S2_h>
}
 8002b2a:	68f8      	ldr	r0, [r7, #12]
 8002b2c:	3710      	adds	r7, #16
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	bd80      	pop	{r7, pc}

08002b32 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE5parseERNS_11VariantDataE>:
  DeserializationError parse(VariantData &variant) {
 8002b32:	b580      	push	{r7, lr}
 8002b34:	b086      	sub	sp, #24
 8002b36:	af00      	add	r7, sp, #0
 8002b38:	6078      	str	r0, [r7, #4]
 8002b3a:	6039      	str	r1, [r7, #0]
    DeserializationError err = skipSpacesAndComments();
 8002b3c:	6878      	ldr	r0, [r7, #4]
 8002b3e:	f000 f871 	bl	8002c24 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv>
 8002b42:	4603      	mov	r3, r0
 8002b44:	733b      	strb	r3, [r7, #12]
    if (err) return err;
 8002b46:	f107 0310 	add.w	r3, r7, #16
 8002b4a:	f107 020c 	add.w	r2, r7, #12
 8002b4e:	4611      	mov	r1, r2
 8002b50:	4618      	mov	r0, r3
 8002b52:	f7fe fcb9 	bl	80014c8 <_ZNK19ArduinoJson6101_11020DeserializationErrorcvMS0_KFvvEEv>
 8002b56:	693b      	ldr	r3, [r7, #16]
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d106      	bne.n	8002b6a <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE5parseERNS_11VariantDataE+0x38>
 8002b5c:	697b      	ldr	r3, [r7, #20]
 8002b5e:	f003 0301 	and.w	r3, r3, #1
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d101      	bne.n	8002b6a <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE5parseERNS_11VariantDataE+0x38>
 8002b66:	2301      	movs	r3, #1
 8002b68:	e000      	b.n	8002b6c <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE5parseERNS_11VariantDataE+0x3a>
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	f083 0301 	eor.w	r3, r3, #1
 8002b70:	b2db      	uxtb	r3, r3
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d001      	beq.n	8002b7a <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE5parseERNS_11VariantDataE+0x48>
 8002b76:	7b3b      	ldrb	r3, [r7, #12]
 8002b78:	e022      	b.n	8002bc0 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE5parseERNS_11VariantDataE+0x8e>
    switch (current()) {
 8002b7a:	6878      	ldr	r0, [r7, #4]
 8002b7c:	f000 f932 	bl	8002de4 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>
 8002b80:	4603      	mov	r3, r0
 8002b82:	2b5b      	cmp	r3, #91	@ 0x5b
 8002b84:	d002      	beq.n	8002b8c <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE5parseERNS_11VariantDataE+0x5a>
 8002b86:	2b7b      	cmp	r3, #123	@ 0x7b
 8002b88:	d00a      	beq.n	8002ba0 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE5parseERNS_11VariantDataE+0x6e>
 8002b8a:	e013      	b.n	8002bb4 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE5parseERNS_11VariantDataE+0x82>
        return parseArray(variant.toArray());
 8002b8c:	6838      	ldr	r0, [r7, #0]
 8002b8e:	f7fe fa36 	bl	8000ffe <_ZN19ArduinoJson6101_11011VariantData7toArrayEv>
 8002b92:	4603      	mov	r3, r0
 8002b94:	4619      	mov	r1, r3
 8002b96:	6878      	ldr	r0, [r7, #4]
 8002b98:	f000 f94d 	bl	8002e36 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE>
 8002b9c:	4603      	mov	r3, r0
 8002b9e:	e00f      	b.n	8002bc0 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE5parseERNS_11VariantDataE+0x8e>
        return parseObject(variant.toObject());
 8002ba0:	6838      	ldr	r0, [r7, #0]
 8002ba2:	f7fe fa3d 	bl	8001020 <_ZN19ArduinoJson6101_11011VariantData8toObjectEv>
 8002ba6:	4603      	mov	r3, r0
 8002ba8:	4619      	mov	r1, r3
 8002baa:	6878      	ldr	r0, [r7, #4]
 8002bac:	f000 fa6a 	bl	8003084 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE>
 8002bb0:	4603      	mov	r3, r0
 8002bb2:	e005      	b.n	8002bc0 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE5parseERNS_11VariantDataE+0x8e>
        return parseValue(variant);
 8002bb4:	6839      	ldr	r1, [r7, #0]
 8002bb6:	6878      	ldr	r0, [r7, #4]
 8002bb8:	f000 fc27 	bl	800340a <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseValueERNS_11VariantDataE>
 8002bbc:	4603      	mov	r3, r0
 8002bbe:	bf00      	nop
  }
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	3718      	adds	r7, #24
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	bd80      	pop	{r7, pc}

08002bc8 <_ZN19ArduinoJson6101_11013StringStorageIPKcvE6createERNS_10MemoryPoolERS2_>:
  static type create(MemoryPool& pool, TInput&) {
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b084      	sub	sp, #16
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
 8002bd0:	6039      	str	r1, [r7, #0]
    return type(&pool);
 8002bd2:	f107 030c 	add.w	r3, r7, #12
 8002bd6:	6879      	ldr	r1, [r7, #4]
 8002bd8:	4618      	mov	r0, r3
 8002bda:	f7fe fc0a 	bl	80013f2 <_ZN19ArduinoJson6101_11012StringCopierC1EPNS_10MemoryPoolE>
 8002bde:	68fb      	ldr	r3, [r7, #12]
  }
 8002be0:	4618      	mov	r0, r3
 8002be2:	3710      	adds	r7, #16
 8002be4:	46bd      	mov	sp, r7
 8002be6:	bd80      	pop	{r7, pc}

08002be8 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEEC1ERNS_10MemoryPoolES1_S2_h>:
  JsonDeserializer(MemoryPool &pool, TReader reader,
 8002be8:	b480      	push	{r7}
 8002bea:	b085      	sub	sp, #20
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	60f8      	str	r0, [r7, #12]
 8002bf0:	60b9      	str	r1, [r7, #8]
 8002bf2:	607a      	str	r2, [r7, #4]
 8002bf4:	603b      	str	r3, [r7, #0]
      : _pool(&pool),
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	68ba      	ldr	r2, [r7, #8]
 8002bfa:	601a      	str	r2, [r3, #0]
        _reader(reader),
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	687a      	ldr	r2, [r7, #4]
 8002c00:	605a      	str	r2, [r3, #4]
        _stringStorage(stringStorage),
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	683a      	ldr	r2, [r7, #0]
 8002c06:	609a      	str	r2, [r3, #8]
        _nestingLimit(nestingLimit),
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	7e3a      	ldrb	r2, [r7, #24]
 8002c0c:	731a      	strb	r2, [r3, #12]
        _loaded(false) {}
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	2200      	movs	r2, #0
 8002c12:	739a      	strb	r2, [r3, #14]
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	4618      	mov	r0, r3
 8002c18:	3714      	adds	r7, #20
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c20:	4770      	bx	lr
	...

08002c24 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv>:
  DeserializationError skipSpacesAndComments() {
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b088      	sub	sp, #32
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
      switch (current()) {
 8002c2c:	6878      	ldr	r0, [r7, #4]
 8002c2e:	f000 f8d9 	bl	8002de4 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>
 8002c32:	4603      	mov	r3, r0
 8002c34:	2b2f      	cmp	r3, #47	@ 0x2f
 8002c36:	f200 80c7 	bhi.w	8002dc8 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv+0x1a4>
 8002c3a:	a201      	add	r2, pc, #4	@ (adr r2, 8002c40 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv+0x1c>)
 8002c3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c40:	08002d01 	.word	0x08002d01
 8002c44:	08002dc9 	.word	0x08002dc9
 8002c48:	08002dc9 	.word	0x08002dc9
 8002c4c:	08002dc9 	.word	0x08002dc9
 8002c50:	08002dc9 	.word	0x08002dc9
 8002c54:	08002dc9 	.word	0x08002dc9
 8002c58:	08002dc9 	.word	0x08002dc9
 8002c5c:	08002dc9 	.word	0x08002dc9
 8002c60:	08002dc9 	.word	0x08002dc9
 8002c64:	08002d11 	.word	0x08002d11
 8002c68:	08002d11 	.word	0x08002d11
 8002c6c:	08002dc9 	.word	0x08002dc9
 8002c70:	08002dc9 	.word	0x08002dc9
 8002c74:	08002d11 	.word	0x08002d11
 8002c78:	08002dc9 	.word	0x08002dc9
 8002c7c:	08002dc9 	.word	0x08002dc9
 8002c80:	08002dc9 	.word	0x08002dc9
 8002c84:	08002dc9 	.word	0x08002dc9
 8002c88:	08002dc9 	.word	0x08002dc9
 8002c8c:	08002dc9 	.word	0x08002dc9
 8002c90:	08002dc9 	.word	0x08002dc9
 8002c94:	08002dc9 	.word	0x08002dc9
 8002c98:	08002dc9 	.word	0x08002dc9
 8002c9c:	08002dc9 	.word	0x08002dc9
 8002ca0:	08002dc9 	.word	0x08002dc9
 8002ca4:	08002dc9 	.word	0x08002dc9
 8002ca8:	08002dc9 	.word	0x08002dc9
 8002cac:	08002dc9 	.word	0x08002dc9
 8002cb0:	08002dc9 	.word	0x08002dc9
 8002cb4:	08002dc9 	.word	0x08002dc9
 8002cb8:	08002dc9 	.word	0x08002dc9
 8002cbc:	08002dc9 	.word	0x08002dc9
 8002cc0:	08002d11 	.word	0x08002d11
 8002cc4:	08002dc9 	.word	0x08002dc9
 8002cc8:	08002dc9 	.word	0x08002dc9
 8002ccc:	08002dc9 	.word	0x08002dc9
 8002cd0:	08002dc9 	.word	0x08002dc9
 8002cd4:	08002dc9 	.word	0x08002dc9
 8002cd8:	08002dc9 	.word	0x08002dc9
 8002cdc:	08002dc9 	.word	0x08002dc9
 8002ce0:	08002dc9 	.word	0x08002dc9
 8002ce4:	08002dc9 	.word	0x08002dc9
 8002ce8:	08002dc9 	.word	0x08002dc9
 8002cec:	08002dc9 	.word	0x08002dc9
 8002cf0:	08002dc9 	.word	0x08002dc9
 8002cf4:	08002dc9 	.word	0x08002dc9
 8002cf8:	08002dc9 	.word	0x08002dc9
 8002cfc:	08002d19 	.word	0x08002d19
          return DeserializationError::IncompleteInput;
 8002d00:	f107 030c 	add.w	r3, r7, #12
 8002d04:	2101      	movs	r1, #1
 8002d06:	4618      	mov	r0, r3
 8002d08:	f7fe fbcd 	bl	80014a6 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 8002d0c:	7b3b      	ldrb	r3, [r7, #12]
 8002d0e:	e064      	b.n	8002dda <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv+0x1b6>
          move();
 8002d10:	6878      	ldr	r0, [r7, #4]
 8002d12:	f000 fbbb 	bl	800348c <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE4moveEv>
          continue;
 8002d16:	e05f      	b.n	8002dd8 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv+0x1b4>
          move();  // skip '/'
 8002d18:	6878      	ldr	r0, [r7, #4]
 8002d1a:	f000 fbb7 	bl	800348c <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE4moveEv>
          switch (current()) {
 8002d1e:	6878      	ldr	r0, [r7, #4]
 8002d20:	f000 f860 	bl	8002de4 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>
 8002d24:	4603      	mov	r3, r0
 8002d26:	2b2a      	cmp	r3, #42	@ 0x2a
 8002d28:	d002      	beq.n	8002d30 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv+0x10c>
 8002d2a:	2b2f      	cmp	r3, #47	@ 0x2f
 8002d2c:	d02a      	beq.n	8002d84 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv+0x160>
 8002d2e:	e042      	b.n	8002db6 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv+0x192>
              move();  // skip '*'
 8002d30:	6878      	ldr	r0, [r7, #4]
 8002d32:	f000 fbab 	bl	800348c <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE4moveEv>
              bool wasStar = false;
 8002d36:	2300      	movs	r3, #0
 8002d38:	77fb      	strb	r3, [r7, #31]
                char c = current();
 8002d3a:	6878      	ldr	r0, [r7, #4]
 8002d3c:	f000 f852 	bl	8002de4 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>
 8002d40:	4603      	mov	r3, r0
 8002d42:	777b      	strb	r3, [r7, #29]
                if (c == '\0') return DeserializationError::IncompleteInput;
 8002d44:	7f7b      	ldrb	r3, [r7, #29]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d107      	bne.n	8002d5a <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv+0x136>
 8002d4a:	f107 0310 	add.w	r3, r7, #16
 8002d4e:	2101      	movs	r1, #1
 8002d50:	4618      	mov	r0, r3
 8002d52:	f7fe fba8 	bl	80014a6 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 8002d56:	7c3b      	ldrb	r3, [r7, #16]
 8002d58:	e03f      	b.n	8002dda <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv+0x1b6>
                if (c == '/' && wasStar) {
 8002d5a:	7f7b      	ldrb	r3, [r7, #29]
 8002d5c:	2b2f      	cmp	r3, #47	@ 0x2f
 8002d5e:	d107      	bne.n	8002d70 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv+0x14c>
 8002d60:	7ffb      	ldrb	r3, [r7, #31]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d004      	beq.n	8002d70 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv+0x14c>
                  move();
 8002d66:	6878      	ldr	r0, [r7, #4]
 8002d68:	f000 fb90 	bl	800348c <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE4moveEv>
                  break;
 8002d6c:	bf00      	nop
              break;
 8002d6e:	e02a      	b.n	8002dc6 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv+0x1a2>
                wasStar = c == '*';
 8002d70:	7f7b      	ldrb	r3, [r7, #29]
 8002d72:	2b2a      	cmp	r3, #42	@ 0x2a
 8002d74:	bf0c      	ite	eq
 8002d76:	2301      	moveq	r3, #1
 8002d78:	2300      	movne	r3, #0
 8002d7a:	77fb      	strb	r3, [r7, #31]
                move();
 8002d7c:	6878      	ldr	r0, [r7, #4]
 8002d7e:	f000 fb85 	bl	800348c <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE4moveEv>
              for (;;) {
 8002d82:	e7da      	b.n	8002d3a <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv+0x116>
                move();
 8002d84:	6878      	ldr	r0, [r7, #4]
 8002d86:	f000 fb81 	bl	800348c <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE4moveEv>
                char c = current();
 8002d8a:	6878      	ldr	r0, [r7, #4]
 8002d8c:	f000 f82a 	bl	8002de4 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>
 8002d90:	4603      	mov	r3, r0
 8002d92:	77bb      	strb	r3, [r7, #30]
                if (c == '\0') return DeserializationError::IncompleteInput;
 8002d94:	7fbb      	ldrb	r3, [r7, #30]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d107      	bne.n	8002daa <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv+0x186>
 8002d9a:	f107 0314 	add.w	r3, r7, #20
 8002d9e:	2101      	movs	r1, #1
 8002da0:	4618      	mov	r0, r3
 8002da2:	f7fe fb80 	bl	80014a6 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 8002da6:	7d3b      	ldrb	r3, [r7, #20]
 8002da8:	e017      	b.n	8002dda <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv+0x1b6>
                if (c == '\n') break;
 8002daa:	7fbb      	ldrb	r3, [r7, #30]
 8002dac:	2b0a      	cmp	r3, #10
 8002dae:	d000      	beq.n	8002db2 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv+0x18e>
              for (;;) {
 8002db0:	e7e8      	b.n	8002d84 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv+0x160>
                if (c == '\n') break;
 8002db2:	bf00      	nop
              break;
 8002db4:	e007      	b.n	8002dc6 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv+0x1a2>
              return DeserializationError::InvalidInput;
 8002db6:	f107 0318 	add.w	r3, r7, #24
 8002dba:	2102      	movs	r1, #2
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	f7fe fb72 	bl	80014a6 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 8002dc2:	7e3b      	ldrb	r3, [r7, #24]
 8002dc4:	e009      	b.n	8002dda <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv+0x1b6>
          break;
 8002dc6:	e007      	b.n	8002dd8 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv+0x1b4>
          return DeserializationError::Ok;
 8002dc8:	f107 031c 	add.w	r3, r7, #28
 8002dcc:	2100      	movs	r1, #0
 8002dce:	4618      	mov	r0, r3
 8002dd0:	f7fe fb69 	bl	80014a6 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 8002dd4:	7f3b      	ldrb	r3, [r7, #28]
 8002dd6:	e000      	b.n	8002dda <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv+0x1b6>
    for (;;) {
 8002dd8:	e728      	b.n	8002c2c <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv+0x8>
  }
 8002dda:	4618      	mov	r0, r3
 8002ddc:	3720      	adds	r7, #32
 8002dde:	46bd      	mov	sp, r7
 8002de0:	bd80      	pop	{r7, pc}
 8002de2:	bf00      	nop

08002de4 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>:
  char current() {
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b082      	sub	sp, #8
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
    if (!_loaded) {
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	7b9b      	ldrb	r3, [r3, #14]
 8002df0:	f083 0301 	eor.w	r3, r3, #1
 8002df4:	b2db      	uxtb	r3, r3
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d017      	beq.n	8002e2a <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv+0x46>
      if (_reader.ended())
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	3304      	adds	r3, #4
 8002dfe:	4618      	mov	r0, r3
 8002e00:	f7fe fb3c 	bl	800147c <_ZNK19ArduinoJson6101_11023UnsafeCharPointerReader5endedEv>
 8002e04:	4603      	mov	r3, r0
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d003      	beq.n	8002e12 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv+0x2e>
        _current = 0;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	735a      	strb	r2, [r3, #13]
 8002e10:	e008      	b.n	8002e24 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv+0x40>
        _current = _reader.read();
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	3304      	adds	r3, #4
 8002e16:	4618      	mov	r0, r3
 8002e18:	f7fe fb20 	bl	800145c <_ZN19ArduinoJson6101_11023UnsafeCharPointerReader4readEv>
 8002e1c:	4603      	mov	r3, r0
 8002e1e:	461a      	mov	r2, r3
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	735a      	strb	r2, [r3, #13]
      _loaded = true;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2201      	movs	r2, #1
 8002e28:	739a      	strb	r2, [r3, #14]
    return _current;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	7b5b      	ldrb	r3, [r3, #13]
  }
 8002e2e:	4618      	mov	r0, r3
 8002e30:	3708      	adds	r7, #8
 8002e32:	46bd      	mov	sp, r7
 8002e34:	bd80      	pop	{r7, pc}

08002e36 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE>:
  DeserializationError parseArray(CollectionData &array) {
 8002e36:	b580      	push	{r7, lr}
 8002e38:	b098      	sub	sp, #96	@ 0x60
 8002e3a:	af00      	add	r7, sp, #0
 8002e3c:	6078      	str	r0, [r7, #4]
 8002e3e:	6039      	str	r1, [r7, #0]
    if (_nestingLimit == 0) return DeserializationError::TooDeep;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	7b1b      	ldrb	r3, [r3, #12]
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d107      	bne.n	8002e58 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x22>
 8002e48:	f107 0310 	add.w	r3, r7, #16
 8002e4c:	2105      	movs	r1, #5
 8002e4e:	4618      	mov	r0, r3
 8002e50:	f7fe fb29 	bl	80014a6 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 8002e54:	7c3b      	ldrb	r3, [r7, #16]
 8002e56:	e111      	b.n	800307c <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x246>
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002e5c:	235b      	movs	r3, #91	@ 0x5b
 8002e5e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
    if (current() != charToSkip) return false;
 8002e62:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8002e64:	f7ff ffbe 	bl	8002de4 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>
 8002e68:	4603      	mov	r3, r0
 8002e6a:	461a      	mov	r2, r3
 8002e6c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8002e70:	4293      	cmp	r3, r2
 8002e72:	bf14      	ite	ne
 8002e74:	2301      	movne	r3, #1
 8002e76:	2300      	moveq	r3, #0
 8002e78:	b2db      	uxtb	r3, r3
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d001      	beq.n	8002e82 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x4c>
 8002e7e:	2300      	movs	r3, #0
 8002e80:	e003      	b.n	8002e8a <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x54>
    move();
 8002e82:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8002e84:	f000 fb02 	bl	800348c <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE4moveEv>
    return true;
 8002e88:	2301      	movs	r3, #1
    if (!eat('[')) return DeserializationError::InvalidInput;
 8002e8a:	f083 0301 	eor.w	r3, r3, #1
 8002e8e:	b2db      	uxtb	r3, r3
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d007      	beq.n	8002ea4 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x6e>
 8002e94:	f107 0314 	add.w	r3, r7, #20
 8002e98:	2102      	movs	r1, #2
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	f7fe fb03 	bl	80014a6 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 8002ea0:	7d3b      	ldrb	r3, [r7, #20]
 8002ea2:	e0eb      	b.n	800307c <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x246>
    DeserializationError err = skipSpacesAndComments();
 8002ea4:	6878      	ldr	r0, [r7, #4]
 8002ea6:	f7ff febd 	bl	8002c24 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv>
 8002eaa:	4603      	mov	r3, r0
 8002eac:	733b      	strb	r3, [r7, #12]
    if (err) return err;
 8002eae:	f107 0318 	add.w	r3, r7, #24
 8002eb2:	f107 020c 	add.w	r2, r7, #12
 8002eb6:	4611      	mov	r1, r2
 8002eb8:	4618      	mov	r0, r3
 8002eba:	f7fe fb05 	bl	80014c8 <_ZNK19ArduinoJson6101_11020DeserializationErrorcvMS0_KFvvEEv>
 8002ebe:	69bb      	ldr	r3, [r7, #24]
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d106      	bne.n	8002ed2 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x9c>
 8002ec4:	69fb      	ldr	r3, [r7, #28]
 8002ec6:	f003 0301 	and.w	r3, r3, #1
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d101      	bne.n	8002ed2 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x9c>
 8002ece:	2301      	movs	r3, #1
 8002ed0:	e000      	b.n	8002ed4 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x9e>
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	f083 0301 	eor.w	r3, r3, #1
 8002ed8:	b2db      	uxtb	r3, r3
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d001      	beq.n	8002ee2 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0xac>
 8002ede:	7b3b      	ldrb	r3, [r7, #12]
 8002ee0:	e0cc      	b.n	800307c <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x246>
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	653b      	str	r3, [r7, #80]	@ 0x50
 8002ee6:	235d      	movs	r3, #93	@ 0x5d
 8002ee8:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    if (current() != charToSkip) return false;
 8002eec:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8002eee:	f7ff ff79 	bl	8002de4 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>
 8002ef2:	4603      	mov	r3, r0
 8002ef4:	461a      	mov	r2, r3
 8002ef6:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8002efa:	4293      	cmp	r3, r2
 8002efc:	bf14      	ite	ne
 8002efe:	2301      	movne	r3, #1
 8002f00:	2300      	moveq	r3, #0
 8002f02:	b2db      	uxtb	r3, r3
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d001      	beq.n	8002f0c <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0xd6>
 8002f08:	2300      	movs	r3, #0
 8002f0a:	e003      	b.n	8002f14 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0xde>
    move();
 8002f0c:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8002f0e:	f000 fabd 	bl	800348c <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE4moveEv>
    return true;
 8002f12:	2301      	movs	r3, #1
    if (eat(']')) return DeserializationError::Ok;
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d008      	beq.n	8002f2a <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0xf4>
 8002f18:	f107 0320 	add.w	r3, r7, #32
 8002f1c:	2100      	movs	r1, #0
 8002f1e:	4618      	mov	r0, r3
 8002f20:	f7fe fac1 	bl	80014a6 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 8002f24:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002f28:	e0a8      	b.n	800307c <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x246>
      VariantData *value = array.add(_pool);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	4619      	mov	r1, r3
 8002f30:	6838      	ldr	r0, [r7, #0]
 8002f32:	f7fe f9b5 	bl	80012a0 <_ZN19ArduinoJson6101_11014CollectionData3addEPNS_10MemoryPoolE>
 8002f36:	65f8      	str	r0, [r7, #92]	@ 0x5c
      if (!value) return DeserializationError::NoMemory;
 8002f38:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d108      	bne.n	8002f50 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x11a>
 8002f3e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002f42:	2103      	movs	r1, #3
 8002f44:	4618      	mov	r0, r3
 8002f46:	f7fe faae 	bl	80014a6 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 8002f4a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8002f4e:	e095      	b.n	800307c <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x246>
      _nestingLimit--;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	7b1b      	ldrb	r3, [r3, #12]
 8002f54:	3b01      	subs	r3, #1
 8002f56:	b2da      	uxtb	r2, r3
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	731a      	strb	r2, [r3, #12]
      err = parse(*value);
 8002f5c:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 8002f5e:	6878      	ldr	r0, [r7, #4]
 8002f60:	f7ff fde7 	bl	8002b32 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE5parseERNS_11VariantDataE>
 8002f64:	4603      	mov	r3, r0
 8002f66:	733b      	strb	r3, [r7, #12]
      _nestingLimit++;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	7b1b      	ldrb	r3, [r3, #12]
 8002f6c:	3301      	adds	r3, #1
 8002f6e:	b2da      	uxtb	r2, r3
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	731a      	strb	r2, [r3, #12]
      if (err) return err;
 8002f74:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002f78:	f107 020c 	add.w	r2, r7, #12
 8002f7c:	4611      	mov	r1, r2
 8002f7e:	4618      	mov	r0, r3
 8002f80:	f7fe faa2 	bl	80014c8 <_ZNK19ArduinoJson6101_11020DeserializationErrorcvMS0_KFvvEEv>
 8002f84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d106      	bne.n	8002f98 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x162>
 8002f8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f8c:	f003 0301 	and.w	r3, r3, #1
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d101      	bne.n	8002f98 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x162>
 8002f94:	2301      	movs	r3, #1
 8002f96:	e000      	b.n	8002f9a <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x164>
 8002f98:	2300      	movs	r3, #0
 8002f9a:	f083 0301 	eor.w	r3, r3, #1
 8002f9e:	b2db      	uxtb	r3, r3
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d001      	beq.n	8002fa8 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x172>
 8002fa4:	7b3b      	ldrb	r3, [r7, #12]
 8002fa6:	e069      	b.n	800307c <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x246>
      err = skipSpacesAndComments();
 8002fa8:	6878      	ldr	r0, [r7, #4]
 8002faa:	f7ff fe3b 	bl	8002c24 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv>
 8002fae:	4603      	mov	r3, r0
 8002fb0:	733b      	strb	r3, [r7, #12]
      if (err) return err;
 8002fb2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002fb6:	f107 020c 	add.w	r2, r7, #12
 8002fba:	4611      	mov	r1, r2
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	f7fe fa83 	bl	80014c8 <_ZNK19ArduinoJson6101_11020DeserializationErrorcvMS0_KFvvEEv>
 8002fc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d106      	bne.n	8002fd6 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x1a0>
 8002fc8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002fca:	f003 0301 	and.w	r3, r3, #1
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d101      	bne.n	8002fd6 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x1a0>
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	e000      	b.n	8002fd8 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x1a2>
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	f083 0301 	eor.w	r3, r3, #1
 8002fdc:	b2db      	uxtb	r3, r3
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d001      	beq.n	8002fe6 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x1b0>
 8002fe2:	7b3b      	ldrb	r3, [r7, #12]
 8002fe4:	e04a      	b.n	800307c <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x246>
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002fea:	235d      	movs	r3, #93	@ 0x5d
 8002fec:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if (current() != charToSkip) return false;
 8002ff0:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8002ff2:	f7ff fef7 	bl	8002de4 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>
 8002ff6:	4603      	mov	r3, r0
 8002ff8:	461a      	mov	r2, r3
 8002ffa:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8002ffe:	4293      	cmp	r3, r2
 8003000:	bf14      	ite	ne
 8003002:	2301      	movne	r3, #1
 8003004:	2300      	moveq	r3, #0
 8003006:	b2db      	uxtb	r3, r3
 8003008:	2b00      	cmp	r3, #0
 800300a:	d001      	beq.n	8003010 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x1da>
 800300c:	2300      	movs	r3, #0
 800300e:	e003      	b.n	8003018 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x1e2>
    move();
 8003010:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8003012:	f000 fa3b 	bl	800348c <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE4moveEv>
    return true;
 8003016:	2301      	movs	r3, #1
      if (eat(']')) return DeserializationError::Ok;
 8003018:	2b00      	cmp	r3, #0
 800301a:	d008      	beq.n	800302e <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x1f8>
 800301c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8003020:	2100      	movs	r1, #0
 8003022:	4618      	mov	r0, r3
 8003024:	f7fe fa3f 	bl	80014a6 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 8003028:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 800302c:	e026      	b.n	800307c <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x246>
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	643b      	str	r3, [r7, #64]	@ 0x40
 8003032:	232c      	movs	r3, #44	@ 0x2c
 8003034:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    if (current() != charToSkip) return false;
 8003038:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 800303a:	f7ff fed3 	bl	8002de4 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>
 800303e:	4603      	mov	r3, r0
 8003040:	461a      	mov	r2, r3
 8003042:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8003046:	4293      	cmp	r3, r2
 8003048:	bf14      	ite	ne
 800304a:	2301      	movne	r3, #1
 800304c:	2300      	moveq	r3, #0
 800304e:	b2db      	uxtb	r3, r3
 8003050:	2b00      	cmp	r3, #0
 8003052:	d001      	beq.n	8003058 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x222>
 8003054:	2300      	movs	r3, #0
 8003056:	e003      	b.n	8003060 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x22a>
    move();
 8003058:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 800305a:	f000 fa17 	bl	800348c <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE4moveEv>
    return true;
 800305e:	2301      	movs	r3, #1
      if (!eat(',')) return DeserializationError::InvalidInput;
 8003060:	f083 0301 	eor.w	r3, r3, #1
 8003064:	b2db      	uxtb	r3, r3
 8003066:	2b00      	cmp	r3, #0
 8003068:	f43f af5f 	beq.w	8002f2a <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0xf4>
 800306c:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8003070:	2102      	movs	r1, #2
 8003072:	4618      	mov	r0, r3
 8003074:	f7fe fa17 	bl	80014a6 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 8003078:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
  }
 800307c:	4618      	mov	r0, r3
 800307e:	3760      	adds	r7, #96	@ 0x60
 8003080:	46bd      	mov	sp, r7
 8003082:	bd80      	pop	{r7, pc}

08003084 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE>:
  DeserializationError parseObject(CollectionData &object) {
 8003084:	b590      	push	{r4, r7, lr}
 8003086:	b0a3      	sub	sp, #140	@ 0x8c
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
 800308c:	6039      	str	r1, [r7, #0]
    if (_nestingLimit == 0) return DeserializationError::TooDeep;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	7b1b      	ldrb	r3, [r3, #12]
 8003092:	2b00      	cmp	r3, #0
 8003094:	d107      	bne.n	80030a6 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x22>
 8003096:	f107 0310 	add.w	r3, r7, #16
 800309a:	2105      	movs	r1, #5
 800309c:	4618      	mov	r0, r3
 800309e:	f7fe fa02 	bl	80014a6 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 80030a2:	7c3b      	ldrb	r3, [r7, #16]
 80030a4:	e1ad      	b.n	8003402 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x37e>
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80030ac:	237b      	movs	r3, #123	@ 0x7b
 80030ae:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    if (current() != charToSkip) return false;
 80030b2:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 80030b6:	f7ff fe95 	bl	8002de4 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>
 80030ba:	4603      	mov	r3, r0
 80030bc:	461a      	mov	r2, r3
 80030be:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 80030c2:	4293      	cmp	r3, r2
 80030c4:	bf14      	ite	ne
 80030c6:	2301      	movne	r3, #1
 80030c8:	2300      	moveq	r3, #0
 80030ca:	b2db      	uxtb	r3, r3
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d001      	beq.n	80030d4 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x50>
 80030d0:	2300      	movs	r3, #0
 80030d2:	e004      	b.n	80030de <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x5a>
    move();
 80030d4:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 80030d8:	f000 f9d8 	bl	800348c <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE4moveEv>
    return true;
 80030dc:	2301      	movs	r3, #1
    if (!eat('{')) return DeserializationError::InvalidInput;
 80030de:	f083 0301 	eor.w	r3, r3, #1
 80030e2:	b2db      	uxtb	r3, r3
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d007      	beq.n	80030f8 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x74>
 80030e8:	f107 0314 	add.w	r3, r7, #20
 80030ec:	2102      	movs	r1, #2
 80030ee:	4618      	mov	r0, r3
 80030f0:	f7fe f9d9 	bl	80014a6 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 80030f4:	7d3b      	ldrb	r3, [r7, #20]
 80030f6:	e184      	b.n	8003402 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x37e>
    DeserializationError err = skipSpacesAndComments();
 80030f8:	6878      	ldr	r0, [r7, #4]
 80030fa:	f7ff fd93 	bl	8002c24 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv>
 80030fe:	4603      	mov	r3, r0
 8003100:	733b      	strb	r3, [r7, #12]
    if (err) return err;
 8003102:	f107 0318 	add.w	r3, r7, #24
 8003106:	f107 020c 	add.w	r2, r7, #12
 800310a:	4611      	mov	r1, r2
 800310c:	4618      	mov	r0, r3
 800310e:	f7fe f9db 	bl	80014c8 <_ZNK19ArduinoJson6101_11020DeserializationErrorcvMS0_KFvvEEv>
 8003112:	69bb      	ldr	r3, [r7, #24]
 8003114:	2b00      	cmp	r3, #0
 8003116:	d106      	bne.n	8003126 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0xa2>
 8003118:	69fb      	ldr	r3, [r7, #28]
 800311a:	f003 0301 	and.w	r3, r3, #1
 800311e:	2b00      	cmp	r3, #0
 8003120:	d101      	bne.n	8003126 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0xa2>
 8003122:	2301      	movs	r3, #1
 8003124:	e000      	b.n	8003128 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0xa4>
 8003126:	2300      	movs	r3, #0
 8003128:	f083 0301 	eor.w	r3, r3, #1
 800312c:	b2db      	uxtb	r3, r3
 800312e:	2b00      	cmp	r3, #0
 8003130:	d001      	beq.n	8003136 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0xb2>
 8003132:	7b3b      	ldrb	r3, [r7, #12]
 8003134:	e165      	b.n	8003402 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x37e>
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	67bb      	str	r3, [r7, #120]	@ 0x78
 800313a:	237d      	movs	r3, #125	@ 0x7d
 800313c:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    if (current() != charToSkip) return false;
 8003140:	6fb8      	ldr	r0, [r7, #120]	@ 0x78
 8003142:	f7ff fe4f 	bl	8002de4 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>
 8003146:	4603      	mov	r3, r0
 8003148:	461a      	mov	r2, r3
 800314a:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800314e:	4293      	cmp	r3, r2
 8003150:	bf14      	ite	ne
 8003152:	2301      	movne	r3, #1
 8003154:	2300      	moveq	r3, #0
 8003156:	b2db      	uxtb	r3, r3
 8003158:	2b00      	cmp	r3, #0
 800315a:	d001      	beq.n	8003160 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0xdc>
 800315c:	2300      	movs	r3, #0
 800315e:	e003      	b.n	8003168 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0xe4>
    move();
 8003160:	6fb8      	ldr	r0, [r7, #120]	@ 0x78
 8003162:	f000 f993 	bl	800348c <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE4moveEv>
    return true;
 8003166:	2301      	movs	r3, #1
    if (eat('}')) return DeserializationError::Ok;
 8003168:	2b00      	cmp	r3, #0
 800316a:	d008      	beq.n	800317e <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0xfa>
 800316c:	f107 0320 	add.w	r3, r7, #32
 8003170:	2100      	movs	r1, #0
 8003172:	4618      	mov	r0, r3
 8003174:	f7fe f997 	bl	80014a6 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 8003178:	f897 3020 	ldrb.w	r3, [r7, #32]
 800317c:	e141      	b.n	8003402 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x37e>
      VariantSlot *slot = object.addSlot(_pool);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	4619      	mov	r1, r3
 8003184:	6838      	ldr	r0, [r7, #0]
 8003186:	f7fe f861 	bl	800124c <_ZN19ArduinoJson6101_11014CollectionData7addSlotEPNS_10MemoryPoolE>
 800318a:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
      if (!slot) return DeserializationError::NoMemory;
 800318e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003192:	2b00      	cmp	r3, #0
 8003194:	d108      	bne.n	80031a8 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x124>
 8003196:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800319a:	2103      	movs	r1, #3
 800319c:	4618      	mov	r0, r3
 800319e:	f7fe f982 	bl	80014a6 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 80031a2:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80031a6:	e12c      	b.n	8003402 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x37e>
      err = parseKey(key);
 80031a8:	f107 0308 	add.w	r3, r7, #8
 80031ac:	4619      	mov	r1, r3
 80031ae:	6878      	ldr	r0, [r7, #4]
 80031b0:	f000 f979 	bl	80034a6 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE8parseKeyERPKc>
 80031b4:	4603      	mov	r3, r0
 80031b6:	733b      	strb	r3, [r7, #12]
      if (err) return err;
 80031b8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80031bc:	f107 020c 	add.w	r2, r7, #12
 80031c0:	4611      	mov	r1, r2
 80031c2:	4618      	mov	r0, r3
 80031c4:	f7fe f980 	bl	80014c8 <_ZNK19ArduinoJson6101_11020DeserializationErrorcvMS0_KFvvEEv>
 80031c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d106      	bne.n	80031dc <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x158>
 80031ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80031d0:	f003 0301 	and.w	r3, r3, #1
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d101      	bne.n	80031dc <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x158>
 80031d8:	2301      	movs	r3, #1
 80031da:	e000      	b.n	80031de <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x15a>
 80031dc:	2300      	movs	r3, #0
 80031de:	f083 0301 	eor.w	r3, r3, #1
 80031e2:	b2db      	uxtb	r3, r3
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d001      	beq.n	80031ec <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x168>
 80031e8:	7b3b      	ldrb	r3, [r7, #12]
 80031ea:	e10a      	b.n	8003402 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x37e>
      slot->setOwnedKey(make_not_null(key));
 80031ec:	f8d7 4084 	ldr.w	r4, [r7, #132]	@ 0x84
 80031f0:	68bb      	ldr	r3, [r7, #8]
 80031f2:	4618      	mov	r0, r3
 80031f4:	f7ff fb0d 	bl	8002812 <_ZN19ArduinoJson6101_11013make_not_nullIPKcEENS_8not_nullIT_EES4_>
 80031f8:	4603      	mov	r3, r0
 80031fa:	4619      	mov	r1, r3
 80031fc:	4620      	mov	r0, r4
 80031fe:	f7fd fcfb 	bl	8000bf8 <_ZN19ArduinoJson6101_11011VariantSlot11setOwnedKeyENS_8not_nullIPKcEE>
      err = skipSpacesAndComments();
 8003202:	6878      	ldr	r0, [r7, #4]
 8003204:	f7ff fd0e 	bl	8002c24 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv>
 8003208:	4603      	mov	r3, r0
 800320a:	733b      	strb	r3, [r7, #12]
      if (err) return err;  // Colon
 800320c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8003210:	f107 020c 	add.w	r2, r7, #12
 8003214:	4611      	mov	r1, r2
 8003216:	4618      	mov	r0, r3
 8003218:	f7fe f956 	bl	80014c8 <_ZNK19ArduinoJson6101_11020DeserializationErrorcvMS0_KFvvEEv>
 800321c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800321e:	2b00      	cmp	r3, #0
 8003220:	d106      	bne.n	8003230 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x1ac>
 8003222:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003224:	f003 0301 	and.w	r3, r3, #1
 8003228:	2b00      	cmp	r3, #0
 800322a:	d101      	bne.n	8003230 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x1ac>
 800322c:	2301      	movs	r3, #1
 800322e:	e000      	b.n	8003232 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x1ae>
 8003230:	2300      	movs	r3, #0
 8003232:	f083 0301 	eor.w	r3, r3, #1
 8003236:	b2db      	uxtb	r3, r3
 8003238:	2b00      	cmp	r3, #0
 800323a:	d001      	beq.n	8003240 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x1bc>
 800323c:	7b3b      	ldrb	r3, [r7, #12]
 800323e:	e0e0      	b.n	8003402 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x37e>
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	673b      	str	r3, [r7, #112]	@ 0x70
 8003244:	233a      	movs	r3, #58	@ 0x3a
 8003246:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
    if (current() != charToSkip) return false;
 800324a:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 800324c:	f7ff fdca 	bl	8002de4 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>
 8003250:	4603      	mov	r3, r0
 8003252:	461a      	mov	r2, r3
 8003254:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8003258:	4293      	cmp	r3, r2
 800325a:	bf14      	ite	ne
 800325c:	2301      	movne	r3, #1
 800325e:	2300      	moveq	r3, #0
 8003260:	b2db      	uxtb	r3, r3
 8003262:	2b00      	cmp	r3, #0
 8003264:	d001      	beq.n	800326a <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x1e6>
 8003266:	2300      	movs	r3, #0
 8003268:	e003      	b.n	8003272 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x1ee>
    move();
 800326a:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 800326c:	f000 f90e 	bl	800348c <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE4moveEv>
    return true;
 8003270:	2301      	movs	r3, #1
      if (!eat(':')) return DeserializationError::InvalidInput;
 8003272:	f083 0301 	eor.w	r3, r3, #1
 8003276:	b2db      	uxtb	r3, r3
 8003278:	2b00      	cmp	r3, #0
 800327a:	d008      	beq.n	800328e <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x20a>
 800327c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8003280:	2102      	movs	r1, #2
 8003282:	4618      	mov	r0, r3
 8003284:	f7fe f90f 	bl	80014a6 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 8003288:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 800328c:	e0b9      	b.n	8003402 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x37e>
      _nestingLimit--;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	7b1b      	ldrb	r3, [r3, #12]
 8003292:	3b01      	subs	r3, #1
 8003294:	b2da      	uxtb	r2, r3
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	731a      	strb	r2, [r3, #12]
      err = parse(*slot->data());
 800329a:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 800329e:	f7fd fc77 	bl	8000b90 <_ZN19ArduinoJson6101_11011VariantSlot4dataEv>
 80032a2:	4603      	mov	r3, r0
 80032a4:	4619      	mov	r1, r3
 80032a6:	6878      	ldr	r0, [r7, #4]
 80032a8:	f7ff fc43 	bl	8002b32 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE5parseERNS_11VariantDataE>
 80032ac:	4603      	mov	r3, r0
 80032ae:	733b      	strb	r3, [r7, #12]
      _nestingLimit++;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	7b1b      	ldrb	r3, [r3, #12]
 80032b4:	3301      	adds	r3, #1
 80032b6:	b2da      	uxtb	r2, r3
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	731a      	strb	r2, [r3, #12]
      if (err) return err;
 80032bc:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80032c0:	f107 020c 	add.w	r2, r7, #12
 80032c4:	4611      	mov	r1, r2
 80032c6:	4618      	mov	r0, r3
 80032c8:	f7fe f8fe 	bl	80014c8 <_ZNK19ArduinoJson6101_11020DeserializationErrorcvMS0_KFvvEEv>
 80032cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d106      	bne.n	80032e0 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x25c>
 80032d2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80032d4:	f003 0301 	and.w	r3, r3, #1
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d101      	bne.n	80032e0 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x25c>
 80032dc:	2301      	movs	r3, #1
 80032de:	e000      	b.n	80032e2 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x25e>
 80032e0:	2300      	movs	r3, #0
 80032e2:	f083 0301 	eor.w	r3, r3, #1
 80032e6:	b2db      	uxtb	r3, r3
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d001      	beq.n	80032f0 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x26c>
 80032ec:	7b3b      	ldrb	r3, [r7, #12]
 80032ee:	e088      	b.n	8003402 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x37e>
      err = skipSpacesAndComments();
 80032f0:	6878      	ldr	r0, [r7, #4]
 80032f2:	f7ff fc97 	bl	8002c24 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv>
 80032f6:	4603      	mov	r3, r0
 80032f8:	733b      	strb	r3, [r7, #12]
      if (err) return err;
 80032fa:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80032fe:	f107 020c 	add.w	r2, r7, #12
 8003302:	4611      	mov	r1, r2
 8003304:	4618      	mov	r0, r3
 8003306:	f7fe f8df 	bl	80014c8 <_ZNK19ArduinoJson6101_11020DeserializationErrorcvMS0_KFvvEEv>
 800330a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800330c:	2b00      	cmp	r3, #0
 800330e:	d106      	bne.n	800331e <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x29a>
 8003310:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003312:	f003 0301 	and.w	r3, r3, #1
 8003316:	2b00      	cmp	r3, #0
 8003318:	d101      	bne.n	800331e <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x29a>
 800331a:	2301      	movs	r3, #1
 800331c:	e000      	b.n	8003320 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x29c>
 800331e:	2300      	movs	r3, #0
 8003320:	f083 0301 	eor.w	r3, r3, #1
 8003324:	b2db      	uxtb	r3, r3
 8003326:	2b00      	cmp	r3, #0
 8003328:	d001      	beq.n	800332e <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x2aa>
 800332a:	7b3b      	ldrb	r3, [r7, #12]
 800332c:	e069      	b.n	8003402 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x37e>
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003332:	237d      	movs	r3, #125	@ 0x7d
 8003334:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
    if (current() != charToSkip) return false;
 8003338:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 800333a:	f7ff fd53 	bl	8002de4 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>
 800333e:	4603      	mov	r3, r0
 8003340:	461a      	mov	r2, r3
 8003342:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8003346:	4293      	cmp	r3, r2
 8003348:	bf14      	ite	ne
 800334a:	2301      	movne	r3, #1
 800334c:	2300      	moveq	r3, #0
 800334e:	b2db      	uxtb	r3, r3
 8003350:	2b00      	cmp	r3, #0
 8003352:	d001      	beq.n	8003358 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x2d4>
 8003354:	2300      	movs	r3, #0
 8003356:	e003      	b.n	8003360 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x2dc>
    move();
 8003358:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 800335a:	f000 f897 	bl	800348c <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE4moveEv>
    return true;
 800335e:	2301      	movs	r3, #1
      if (eat('}')) return DeserializationError::Ok;
 8003360:	2b00      	cmp	r3, #0
 8003362:	d008      	beq.n	8003376 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x2f2>
 8003364:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8003368:	2100      	movs	r1, #0
 800336a:	4618      	mov	r0, r3
 800336c:	f7fe f89b 	bl	80014a6 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 8003370:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 8003374:	e045      	b.n	8003402 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x37e>
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	663b      	str	r3, [r7, #96]	@ 0x60
 800337a:	232c      	movs	r3, #44	@ 0x2c
 800337c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
    if (current() != charToSkip) return false;
 8003380:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 8003382:	f7ff fd2f 	bl	8002de4 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>
 8003386:	4603      	mov	r3, r0
 8003388:	461a      	mov	r2, r3
 800338a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800338e:	4293      	cmp	r3, r2
 8003390:	bf14      	ite	ne
 8003392:	2301      	movne	r3, #1
 8003394:	2300      	moveq	r3, #0
 8003396:	b2db      	uxtb	r3, r3
 8003398:	2b00      	cmp	r3, #0
 800339a:	d001      	beq.n	80033a0 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x31c>
 800339c:	2300      	movs	r3, #0
 800339e:	e003      	b.n	80033a8 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x324>
    move();
 80033a0:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 80033a2:	f000 f873 	bl	800348c <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE4moveEv>
    return true;
 80033a6:	2301      	movs	r3, #1
      if (!eat(',')) return DeserializationError::InvalidInput;
 80033a8:	f083 0301 	eor.w	r3, r3, #1
 80033ac:	b2db      	uxtb	r3, r3
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d008      	beq.n	80033c4 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x340>
 80033b2:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80033b6:	2102      	movs	r1, #2
 80033b8:	4618      	mov	r0, r3
 80033ba:	f7fe f874 	bl	80014a6 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 80033be:	f897 3050 	ldrb.w	r3, [r7, #80]	@ 0x50
 80033c2:	e01e      	b.n	8003402 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x37e>
      err = skipSpacesAndComments();
 80033c4:	6878      	ldr	r0, [r7, #4]
 80033c6:	f7ff fc2d 	bl	8002c24 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv>
 80033ca:	4603      	mov	r3, r0
 80033cc:	733b      	strb	r3, [r7, #12]
      if (err) return err;
 80033ce:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80033d2:	f107 020c 	add.w	r2, r7, #12
 80033d6:	4611      	mov	r1, r2
 80033d8:	4618      	mov	r0, r3
 80033da:	f7fe f875 	bl	80014c8 <_ZNK19ArduinoJson6101_11020DeserializationErrorcvMS0_KFvvEEv>
 80033de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d106      	bne.n	80033f2 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x36e>
 80033e4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80033e6:	f003 0301 	and.w	r3, r3, #1
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d101      	bne.n	80033f2 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x36e>
 80033ee:	2301      	movs	r3, #1
 80033f0:	e000      	b.n	80033f4 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x370>
 80033f2:	2300      	movs	r3, #0
 80033f4:	f083 0301 	eor.w	r3, r3, #1
 80033f8:	b2db      	uxtb	r3, r3
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	f43f aebf 	beq.w	800317e <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0xfa>
 8003400:	7b3b      	ldrb	r3, [r7, #12]
  }
 8003402:	4618      	mov	r0, r3
 8003404:	378c      	adds	r7, #140	@ 0x8c
 8003406:	46bd      	mov	sp, r7
 8003408:	bd90      	pop	{r4, r7, pc}

0800340a <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseValueERNS_11VariantDataE>:
  DeserializationError parseValue(VariantData &variant) {
 800340a:	b580      	push	{r7, lr}
 800340c:	b082      	sub	sp, #8
 800340e:	af00      	add	r7, sp, #0
 8003410:	6078      	str	r0, [r7, #4]
 8003412:	6039      	str	r1, [r7, #0]
    if (isQuote(current())) {
 8003414:	6878      	ldr	r0, [r7, #4]
 8003416:	f7ff fce5 	bl	8002de4 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>
 800341a:	4603      	mov	r3, r0
 800341c:	4618      	mov	r0, r3
 800341e:	f000 f861 	bl	80034e4 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7isQuoteEc>
 8003422:	4603      	mov	r3, r0
 8003424:	2b00      	cmp	r3, #0
 8003426:	d005      	beq.n	8003434 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseValueERNS_11VariantDataE+0x2a>
      return parseStringValue(variant);
 8003428:	6839      	ldr	r1, [r7, #0]
 800342a:	6878      	ldr	r0, [r7, #4]
 800342c:	f000 f86e 	bl	800350c <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE16parseStringValueERNS_11VariantDataE>
 8003430:	4603      	mov	r3, r0
 8003432:	e005      	b.n	8003440 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseValueERNS_11VariantDataE+0x36>
      return parseNumericValue(variant);
 8003434:	6839      	ldr	r1, [r7, #0]
 8003436:	6878      	ldr	r0, [r7, #4]
 8003438:	f000 f8a3 	bl	8003582 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseNumericValueERNS_11VariantDataE>
 800343c:	4603      	mov	r3, r0
 800343e:	bf00      	nop
  }
 8003440:	4618      	mov	r0, r3
 8003442:	3708      	adds	r7, #8
 8003444:	46bd      	mov	sp, r7
 8003446:	bd80      	pop	{r7, pc}

08003448 <_ZN19ArduinoJson6101_1109variantAsIPKcEENS_9enable_ifIXoosrNS_7is_sameIT_S2_EE5valuesrNS4_IS5_PcEE5valueES2_E4typeEPKNS_11VariantDataE>:

template <typename T>
inline typename enable_if<is_same<T, const char*>::value ||
                              is_same<T, char*>::value,
                          const char*>::type
variantAs(const VariantData* _data) {
 8003448:	b580      	push	{r7, lr}
 800344a:	b082      	sub	sp, #8
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
  return _data != 0 ? _data->asString() : 0;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2b00      	cmp	r3, #0
 8003454:	d004      	beq.n	8003460 <_ZN19ArduinoJson6101_1109variantAsIPKcEENS_9enable_ifIXoosrNS_7is_sameIT_S2_EE5valuesrNS4_IS5_PcEE5valueES2_E4typeEPKNS_11VariantDataE+0x18>
 8003456:	6878      	ldr	r0, [r7, #4]
 8003458:	f7fd ff58 	bl	800130c <_ZNK19ArduinoJson6101_11011VariantData8asStringEv>
 800345c:	4603      	mov	r3, r0
 800345e:	e000      	b.n	8003462 <_ZN19ArduinoJson6101_1109variantAsIPKcEENS_9enable_ifIXoosrNS_7is_sameIT_S2_EE5valuesrNS4_IS5_PcEE5valueES2_E4typeEPKNS_11VariantDataE+0x1a>
 8003460:	2300      	movs	r3, #0
}
 8003462:	4618      	mov	r0, r3
 8003464:	3708      	adds	r7, #8
 8003466:	46bd      	mov	sp, r7
 8003468:	bd80      	pop	{r7, pc}

0800346a <_ZN19ArduinoJson6101_1109variantAsImEENS_9enable_ifIXsrNS_11is_integralIT_EE5valueES3_E4typeEPKNS_11VariantDataE>:
inline typename enable_if<is_integral<T>::value, T>::type variantAs(
 800346a:	b580      	push	{r7, lr}
 800346c:	b082      	sub	sp, #8
 800346e:	af00      	add	r7, sp, #0
 8003470:	6078      	str	r0, [r7, #4]
  return _data != 0 ? _data->asIntegral<T>() : T(0);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	2b00      	cmp	r3, #0
 8003476:	d004      	beq.n	8003482 <_ZN19ArduinoJson6101_1109variantAsImEENS_9enable_ifIXsrNS_11is_integralIT_EE5valueES3_E4typeEPKNS_11VariantDataE+0x18>
 8003478:	6878      	ldr	r0, [r7, #4]
 800347a:	f000 f96d 	bl	8003758 <_ZNK19ArduinoJson6101_11011VariantData10asIntegralImEET_v>
 800347e:	4603      	mov	r3, r0
 8003480:	e000      	b.n	8003484 <_ZN19ArduinoJson6101_1109variantAsImEENS_9enable_ifIXsrNS_11is_integralIT_EE5valueES3_E4typeEPKNS_11VariantDataE+0x1a>
 8003482:	2300      	movs	r3, #0
}
 8003484:	4618      	mov	r0, r3
 8003486:	3708      	adds	r7, #8
 8003488:	46bd      	mov	sp, r7
 800348a:	bd80      	pop	{r7, pc}

0800348c <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE4moveEv>:
  void move() {
 800348c:	b480      	push	{r7}
 800348e:	b083      	sub	sp, #12
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
    _loaded = false;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2200      	movs	r2, #0
 8003498:	739a      	strb	r2, [r3, #14]
  }
 800349a:	bf00      	nop
 800349c:	370c      	adds	r7, #12
 800349e:	46bd      	mov	sp, r7
 80034a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a4:	4770      	bx	lr

080034a6 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE8parseKeyERPKc>:
  DeserializationError parseKey(const char *&key) {
 80034a6:	b580      	push	{r7, lr}
 80034a8:	b082      	sub	sp, #8
 80034aa:	af00      	add	r7, sp, #0
 80034ac:	6078      	str	r0, [r7, #4]
 80034ae:	6039      	str	r1, [r7, #0]
    if (isQuote(current())) {
 80034b0:	6878      	ldr	r0, [r7, #4]
 80034b2:	f7ff fc97 	bl	8002de4 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>
 80034b6:	4603      	mov	r3, r0
 80034b8:	4618      	mov	r0, r3
 80034ba:	f000 f813 	bl	80034e4 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7isQuoteEc>
 80034be:	4603      	mov	r3, r0
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d005      	beq.n	80034d0 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE8parseKeyERPKc+0x2a>
      return parseQuotedString(key);
 80034c4:	6839      	ldr	r1, [r7, #0]
 80034c6:	6878      	ldr	r0, [r7, #4]
 80034c8:	f000 f988 	bl	80037dc <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseQuotedStringERPKc>
 80034cc:	4603      	mov	r3, r0
 80034ce:	e005      	b.n	80034dc <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE8parseKeyERPKc+0x36>
      return parseNonQuotedString(key);
 80034d0:	6839      	ldr	r1, [r7, #0]
 80034d2:	6878      	ldr	r0, [r7, #4]
 80034d4:	f000 fa1a 	bl	800390c <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE20parseNonQuotedStringERPKc>
 80034d8:	4603      	mov	r3, r0
 80034da:	bf00      	nop
  }
 80034dc:	4618      	mov	r0, r3
 80034de:	3708      	adds	r7, #8
 80034e0:	46bd      	mov	sp, r7
 80034e2:	bd80      	pop	{r7, pc}

080034e4 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7isQuoteEc>:
  static inline bool isQuote(char c) {
 80034e4:	b480      	push	{r7}
 80034e6:	b083      	sub	sp, #12
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	4603      	mov	r3, r0
 80034ec:	71fb      	strb	r3, [r7, #7]
    return c == '\'' || c == '\"';
 80034ee:	79fb      	ldrb	r3, [r7, #7]
 80034f0:	2b27      	cmp	r3, #39	@ 0x27
 80034f2:	d002      	beq.n	80034fa <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7isQuoteEc+0x16>
 80034f4:	79fb      	ldrb	r3, [r7, #7]
 80034f6:	2b22      	cmp	r3, #34	@ 0x22
 80034f8:	d101      	bne.n	80034fe <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7isQuoteEc+0x1a>
 80034fa:	2301      	movs	r3, #1
 80034fc:	e000      	b.n	8003500 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7isQuoteEc+0x1c>
 80034fe:	2300      	movs	r3, #0
  }
 8003500:	4618      	mov	r0, r3
 8003502:	370c      	adds	r7, #12
 8003504:	46bd      	mov	sp, r7
 8003506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350a:	4770      	bx	lr

0800350c <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE16parseStringValueERNS_11VariantDataE>:
  DeserializationError parseStringValue(VariantData &variant) {
 800350c:	b580      	push	{r7, lr}
 800350e:	b088      	sub	sp, #32
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
 8003514:	6039      	str	r1, [r7, #0]
    DeserializationError err = parseQuotedString(value);
 8003516:	f107 0310 	add.w	r3, r7, #16
 800351a:	4619      	mov	r1, r3
 800351c:	6878      	ldr	r0, [r7, #4]
 800351e:	f000 f95d 	bl	80037dc <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseQuotedStringERPKc>
 8003522:	4603      	mov	r3, r0
 8003524:	733b      	strb	r3, [r7, #12]
    if (err) return err;
 8003526:	f107 0314 	add.w	r3, r7, #20
 800352a:	f107 020c 	add.w	r2, r7, #12
 800352e:	4611      	mov	r1, r2
 8003530:	4618      	mov	r0, r3
 8003532:	f7fd ffc9 	bl	80014c8 <_ZNK19ArduinoJson6101_11020DeserializationErrorcvMS0_KFvvEEv>
 8003536:	697b      	ldr	r3, [r7, #20]
 8003538:	2b00      	cmp	r3, #0
 800353a:	d106      	bne.n	800354a <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE16parseStringValueERNS_11VariantDataE+0x3e>
 800353c:	69bb      	ldr	r3, [r7, #24]
 800353e:	f003 0301 	and.w	r3, r3, #1
 8003542:	2b00      	cmp	r3, #0
 8003544:	d101      	bne.n	800354a <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE16parseStringValueERNS_11VariantDataE+0x3e>
 8003546:	2301      	movs	r3, #1
 8003548:	e000      	b.n	800354c <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE16parseStringValueERNS_11VariantDataE+0x40>
 800354a:	2300      	movs	r3, #0
 800354c:	f083 0301 	eor.w	r3, r3, #1
 8003550:	b2db      	uxtb	r3, r3
 8003552:	2b00      	cmp	r3, #0
 8003554:	d001      	beq.n	800355a <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE16parseStringValueERNS_11VariantDataE+0x4e>
 8003556:	7b3b      	ldrb	r3, [r7, #12]
 8003558:	e00f      	b.n	800357a <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE16parseStringValueERNS_11VariantDataE+0x6e>
    variant.setOwnedString(make_not_null(value));
 800355a:	693b      	ldr	r3, [r7, #16]
 800355c:	4618      	mov	r0, r3
 800355e:	f7ff f958 	bl	8002812 <_ZN19ArduinoJson6101_11013make_not_nullIPKcEENS_8not_nullIT_EES4_>
 8003562:	4603      	mov	r3, r0
 8003564:	4619      	mov	r1, r3
 8003566:	6838      	ldr	r0, [r7, #0]
 8003568:	f7fd fd35 	bl	8000fd6 <_ZN19ArduinoJson6101_11011VariantData14setOwnedStringENS_8not_nullIPKcEE>
    return DeserializationError::Ok;
 800356c:	f107 031c 	add.w	r3, r7, #28
 8003570:	2100      	movs	r1, #0
 8003572:	4618      	mov	r0, r3
 8003574:	f7fd ff97 	bl	80014a6 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 8003578:	7f3b      	ldrb	r3, [r7, #28]
  }
 800357a:	4618      	mov	r0, r3
 800357c:	3720      	adds	r7, #32
 800357e:	46bd      	mov	sp, r7
 8003580:	bd80      	pop	{r7, pc}

08003582 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseNumericValueERNS_11VariantDataE>:
  DeserializationError parseNumericValue(VariantData &result) {
 8003582:	b580      	push	{r7, lr}
 8003584:	b0a0      	sub	sp, #128	@ 0x80
 8003586:	af00      	add	r7, sp, #0
 8003588:	6078      	str	r0, [r7, #4]
 800358a:	6039      	str	r1, [r7, #0]
    uint8_t n = 0;
 800358c:	2300      	movs	r3, #0
 800358e:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    char c = current();
 8003592:	6878      	ldr	r0, [r7, #4]
 8003594:	f7ff fc26 	bl	8002de4 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>
 8003598:	4603      	mov	r3, r0
 800359a:	f887 307e 	strb.w	r3, [r7, #126]	@ 0x7e
    while (canBeInNonQuotedString(c) && n < 63) {
 800359e:	e013      	b.n	80035c8 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseNumericValueERNS_11VariantDataE+0x46>
      move();
 80035a0:	6878      	ldr	r0, [r7, #4]
 80035a2:	f7ff ff73 	bl	800348c <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE4moveEv>
      buffer[n++] = c;
 80035a6:	f897 207e 	ldrb.w	r2, [r7, #126]	@ 0x7e
 80035aa:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 80035ae:	1c59      	adds	r1, r3, #1
 80035b0:	f887 107f 	strb.w	r1, [r7, #127]	@ 0x7f
 80035b4:	3380      	adds	r3, #128	@ 0x80
 80035b6:	443b      	add	r3, r7
 80035b8:	f803 2c5c 	strb.w	r2, [r3, #-92]
      c = current();
 80035bc:	6878      	ldr	r0, [r7, #4]
 80035be:	f7ff fc11 	bl	8002de4 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>
 80035c2:	4603      	mov	r3, r0
 80035c4:	f887 307e 	strb.w	r3, [r7, #126]	@ 0x7e
    while (canBeInNonQuotedString(c) && n < 63) {
 80035c8:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 80035cc:	4618      	mov	r0, r3
 80035ce:	f000 fa08 	bl	80039e2 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE22canBeInNonQuotedStringEc>
 80035d2:	4603      	mov	r3, r0
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d005      	beq.n	80035e4 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseNumericValueERNS_11VariantDataE+0x62>
 80035d8:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 80035dc:	2b3e      	cmp	r3, #62	@ 0x3e
 80035de:	d801      	bhi.n	80035e4 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseNumericValueERNS_11VariantDataE+0x62>
 80035e0:	2301      	movs	r3, #1
 80035e2:	e000      	b.n	80035e6 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseNumericValueERNS_11VariantDataE+0x64>
 80035e4:	2300      	movs	r3, #0
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d1da      	bne.n	80035a0 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseNumericValueERNS_11VariantDataE+0x1e>
    buffer[n] = 0;
 80035ea:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 80035ee:	3380      	adds	r3, #128	@ 0x80
 80035f0:	443b      	add	r3, r7
 80035f2:	2200      	movs	r2, #0
 80035f4:	f803 2c5c 	strb.w	r2, [r3, #-92]
    c = buffer[0];
 80035f8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80035fc:	f887 307e 	strb.w	r3, [r7, #126]	@ 0x7e
    if (c == 't') {  // true
 8003600:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 8003604:	2b74      	cmp	r3, #116	@ 0x74
 8003606:	d114      	bne.n	8003632 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseNumericValueERNS_11VariantDataE+0xb0>
      result.setBoolean(true);
 8003608:	2101      	movs	r1, #1
 800360a:	6838      	ldr	r0, [r7, #0]
 800360c:	f7fd fc89 	bl	8000f22 <_ZN19ArduinoJson6101_11011VariantData10setBooleanEb>
      return n == 4 ? DeserializationError::Ok
 8003610:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8003614:	2b04      	cmp	r3, #4
 8003616:	bf14      	ite	ne
 8003618:	2301      	movne	r3, #1
 800361a:	2300      	moveq	r3, #0
 800361c:	b2db      	uxtb	r3, r3
                    : DeserializationError::IncompleteInput;
 800361e:	461a      	mov	r2, r3
 8003620:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8003624:	4611      	mov	r1, r2
 8003626:	4618      	mov	r0, r3
 8003628:	f7fd ff3d 	bl	80014a6 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 800362c:	f897 3064 	ldrb.w	r3, [r7, #100]	@ 0x64
 8003630:	e077      	b.n	8003722 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseNumericValueERNS_11VariantDataE+0x1a0>
    if (c == 'f') {  // false
 8003632:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 8003636:	2b66      	cmp	r3, #102	@ 0x66
 8003638:	d114      	bne.n	8003664 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseNumericValueERNS_11VariantDataE+0xe2>
      result.setBoolean(false);
 800363a:	2100      	movs	r1, #0
 800363c:	6838      	ldr	r0, [r7, #0]
 800363e:	f7fd fc70 	bl	8000f22 <_ZN19ArduinoJson6101_11011VariantData10setBooleanEb>
      return n == 5 ? DeserializationError::Ok
 8003642:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8003646:	2b05      	cmp	r3, #5
 8003648:	bf14      	ite	ne
 800364a:	2301      	movne	r3, #1
 800364c:	2300      	moveq	r3, #0
 800364e:	b2db      	uxtb	r3, r3
                    : DeserializationError::IncompleteInput;
 8003650:	461a      	mov	r2, r3
 8003652:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8003656:	4611      	mov	r1, r2
 8003658:	4618      	mov	r0, r3
 800365a:	f7fd ff24 	bl	80014a6 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 800365e:	f897 3068 	ldrb.w	r3, [r7, #104]	@ 0x68
 8003662:	e05e      	b.n	8003722 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseNumericValueERNS_11VariantDataE+0x1a0>
    if (c == 'n') {  // null
 8003664:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 8003668:	2b6e      	cmp	r3, #110	@ 0x6e
 800366a:	d110      	bne.n	800368e <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseNumericValueERNS_11VariantDataE+0x10c>
      return n == 4 ? DeserializationError::Ok
 800366c:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8003670:	2b04      	cmp	r3, #4
 8003672:	bf14      	ite	ne
 8003674:	2301      	movne	r3, #1
 8003676:	2300      	moveq	r3, #0
 8003678:	b2db      	uxtb	r3, r3
                    : DeserializationError::IncompleteInput;
 800367a:	461a      	mov	r2, r3
 800367c:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8003680:	4611      	mov	r1, r2
 8003682:	4618      	mov	r0, r3
 8003684:	f7fd ff0f 	bl	80014a6 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 8003688:	f897 306c 	ldrb.w	r3, [r7, #108]	@ 0x6c
 800368c:	e049      	b.n	8003722 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseNumericValueERNS_11VariantDataE+0x1a0>
    ParsedNumber<Float, UInt> num = parseNumber<Float, UInt>(buffer);
 800368e:	f107 0308 	add.w	r3, r7, #8
 8003692:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8003696:	4611      	mov	r1, r2
 8003698:	4618      	mov	r0, r3
 800369a:	f000 f9d5 	bl	8003a48 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc>
    switch (num.type()) {
 800369e:	f107 0308 	add.w	r3, r7, #8
 80036a2:	4618      	mov	r0, r3
 80036a4:	f000 fbd6 	bl	8003e54 <_ZNK19ArduinoJson6101_11012ParsedNumberIdyE4typeEv>
 80036a8:	4603      	mov	r3, r0
 80036aa:	2b08      	cmp	r3, #8
 80036ac:	d021      	beq.n	80036f2 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseNumericValueERNS_11VariantDataE+0x170>
 80036ae:	2b08      	cmp	r3, #8
 80036b0:	dc2f      	bgt.n	8003712 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseNumericValueERNS_11VariantDataE+0x190>
 80036b2:	2b06      	cmp	r3, #6
 80036b4:	d00f      	beq.n	80036d6 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseNumericValueERNS_11VariantDataE+0x154>
 80036b6:	2b07      	cmp	r3, #7
 80036b8:	d12b      	bne.n	8003712 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseNumericValueERNS_11VariantDataE+0x190>
        result.setNegativeInteger(num.uintValue);
 80036ba:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80036be:	6838      	ldr	r0, [r7, #0]
 80036c0:	f7fd fc6a 	bl	8000f98 <_ZN19ArduinoJson6101_11011VariantData18setNegativeIntegerEy>
        return DeserializationError::Ok;
 80036c4:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 80036c8:	2100      	movs	r1, #0
 80036ca:	4618      	mov	r0, r3
 80036cc:	f7fd feeb 	bl	80014a6 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 80036d0:	f897 3070 	ldrb.w	r3, [r7, #112]	@ 0x70
 80036d4:	e025      	b.n	8003722 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseNumericValueERNS_11VariantDataE+0x1a0>
        result.setPositiveInteger(num.uintValue);
 80036d6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80036da:	6838      	ldr	r0, [r7, #0]
 80036dc:	f7fd fc49 	bl	8000f72 <_ZN19ArduinoJson6101_11011VariantData18setPositiveIntegerEy>
        return DeserializationError::Ok;
 80036e0:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 80036e4:	2100      	movs	r1, #0
 80036e6:	4618      	mov	r0, r3
 80036e8:	f7fd fedd 	bl	80014a6 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 80036ec:	f897 3074 	ldrb.w	r3, [r7, #116]	@ 0x74
 80036f0:	e017      	b.n	8003722 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseNumericValueERNS_11VariantDataE+0x1a0>
        result.setFloat(num.floatValue);
 80036f2:	ed97 7b04 	vldr	d7, [r7, #16]
 80036f6:	eeb0 0b47 	vmov.f64	d0, d7
 80036fa:	6838      	ldr	r0, [r7, #0]
 80036fc:	f7fd fc26 	bl	8000f4c <_ZN19ArduinoJson6101_11011VariantData8setFloatEd>
        return DeserializationError::Ok;
 8003700:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8003704:	2100      	movs	r1, #0
 8003706:	4618      	mov	r0, r3
 8003708:	f7fd fecd 	bl	80014a6 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 800370c:	f897 3078 	ldrb.w	r3, [r7, #120]	@ 0x78
 8003710:	e007      	b.n	8003722 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseNumericValueERNS_11VariantDataE+0x1a0>
    return DeserializationError::InvalidInput;
 8003712:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8003716:	2102      	movs	r1, #2
 8003718:	4618      	mov	r0, r3
 800371a:	f7fd fec4 	bl	80014a6 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 800371e:	f897 307c 	ldrb.w	r3, [r7, #124]	@ 0x7c
  }
 8003722:	4618      	mov	r0, r3
 8003724:	3780      	adds	r7, #128	@ 0x80
 8003726:	46bd      	mov	sp, r7
 8003728:	bd80      	pop	{r7, pc}

0800372a <_ZNK19ArduinoJson6101_11011VariantData9getMemberINS_21ConstRamStringAdapterEEEPS0_T_>:
  VariantData *getMember(TAdaptedString key) const {
 800372a:	b580      	push	{r7, lr}
 800372c:	b082      	sub	sp, #8
 800372e:	af00      	add	r7, sp, #0
 8003730:	6078      	str	r0, [r7, #4]
 8003732:	6039      	str	r1, [r7, #0]
    return isObject() ? _content.asCollection.get(key) : 0;
 8003734:	6878      	ldr	r0, [r7, #4]
 8003736:	f7fd fbe1 	bl	8000efc <_ZNK19ArduinoJson6101_11011VariantData8isObjectEv>
 800373a:	4603      	mov	r3, r0
 800373c:	2b00      	cmp	r3, #0
 800373e:	d006      	beq.n	800374e <_ZNK19ArduinoJson6101_11011VariantData9getMemberINS_21ConstRamStringAdapterEEEPS0_T_+0x24>
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6839      	ldr	r1, [r7, #0]
 8003744:	4618      	mov	r0, r3
 8003746:	f7ff f8a0 	bl	800288a <_ZNK19ArduinoJson6101_11014CollectionData3getINS_21ConstRamStringAdapterEEEPNS_11VariantDataET_>
 800374a:	4603      	mov	r3, r0
 800374c:	e000      	b.n	8003750 <_ZNK19ArduinoJson6101_11011VariantData9getMemberINS_21ConstRamStringAdapterEEEPS0_T_+0x26>
 800374e:	2300      	movs	r3, #0
  }
 8003750:	4618      	mov	r0, r3
 8003752:	3708      	adds	r7, #8
 8003754:	46bd      	mov	sp, r7
 8003756:	bd80      	pop	{r7, pc}

08003758 <_ZNK19ArduinoJson6101_11011VariantData10asIntegralImEET_v>:
inline T VariantData::asIntegral() const {
 8003758:	b580      	push	{r7, lr}
 800375a:	b082      	sub	sp, #8
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
  switch (type()) {
 8003760:	6878      	ldr	r0, [r7, #4]
 8003762:	f7fd fc6e 	bl	8001042 <_ZNK19ArduinoJson6101_11011VariantData4typeEv>
 8003766:	4603      	mov	r3, r0
 8003768:	3b03      	subs	r3, #3
 800376a:	2b05      	cmp	r3, #5
 800376c:	d830      	bhi.n	80037d0 <_ZNK19ArduinoJson6101_11011VariantData10asIntegralImEET_v+0x78>
 800376e:	a201      	add	r2, pc, #4	@ (adr r2, 8003774 <_ZNK19ArduinoJson6101_11011VariantData10asIntegralImEET_v+0x1c>)
 8003770:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003774:	080037b1 	.word	0x080037b1
 8003778:	080037b1 	.word	0x080037b1
 800377c:	0800378d 	.word	0x0800378d
 8003780:	0800378d 	.word	0x0800378d
 8003784:	0800379f 	.word	0x0800379f
 8003788:	080037bf 	.word	0x080037bf
      return convertPositiveInteger<T>(_content.asInteger);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003792:	4610      	mov	r0, r2
 8003794:	4619      	mov	r1, r3
 8003796:	f000 fb7e 	bl	8003e96 <_ZN19ArduinoJson6101_11022convertPositiveIntegerImyEET_T0_>
 800379a:	4603      	mov	r3, r0
 800379c:	e019      	b.n	80037d2 <_ZNK19ArduinoJson6101_11011VariantData10asIntegralImEET_v+0x7a>
      return convertNegativeInteger<T>(_content.asInteger);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037a4:	4610      	mov	r0, r2
 80037a6:	4619      	mov	r1, r3
 80037a8:	f000 fb88 	bl	8003ebc <_ZN19ArduinoJson6101_11022convertNegativeIntegerImyEET_T0_>
 80037ac:	4603      	mov	r3, r0
 80037ae:	e010      	b.n	80037d2 <_ZNK19ArduinoJson6101_11011VariantData10asIntegralImEET_v+0x7a>
      return parseInteger<T>(_content.asString);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	4618      	mov	r0, r3
 80037b6:	f000 fb95 	bl	8003ee4 <_ZN19ArduinoJson6101_11012parseIntegerImEET_PKc>
 80037ba:	4603      	mov	r3, r0
 80037bc:	e009      	b.n	80037d2 <_ZNK19ArduinoJson6101_11011VariantData10asIntegralImEET_v+0x7a>
      return convertFloat<T>(_content.asFloat);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	ed93 7b00 	vldr	d7, [r3]
 80037c4:	eeb0 0b47 	vmov.f64	d0, d7
 80037c8:	f000 fba0 	bl	8003f0c <_ZN19ArduinoJson6101_11012convertFloatImdEENS_9enable_ifIXntsrNS_17is_floating_pointIT_EE5valueES3_E4typeET0_>
 80037cc:	4603      	mov	r3, r0
 80037ce:	e000      	b.n	80037d2 <_ZNK19ArduinoJson6101_11011VariantData10asIntegralImEET_v+0x7a>
      return 0;
 80037d0:	2300      	movs	r3, #0
}
 80037d2:	4618      	mov	r0, r3
 80037d4:	3708      	adds	r7, #8
 80037d6:	46bd      	mov	sp, r7
 80037d8:	bd80      	pop	{r7, pc}
 80037da:	bf00      	nop

080037dc <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseQuotedStringERPKc>:
  DeserializationError parseQuotedString(const char *&result) {
 80037dc:	b580      	push	{r7, lr}
 80037de:	b08c      	sub	sp, #48	@ 0x30
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
 80037e4:	6039      	str	r1, [r7, #0]
    StringBuilder builder = _stringStorage.startString();
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	f103 0208 	add.w	r2, r3, #8
 80037ec:	f107 0308 	add.w	r3, r7, #8
 80037f0:	4611      	mov	r1, r2
 80037f2:	4618      	mov	r0, r3
 80037f4:	f7fd fe0c 	bl	8001410 <_ZN19ArduinoJson6101_11012StringCopier11startStringEv>
    const char stopChar = current();
 80037f8:	6878      	ldr	r0, [r7, #4]
 80037fa:	f7ff faf3 	bl	8002de4 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>
 80037fe:	4603      	mov	r3, r0
 8003800:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
    move();
 8003804:	6878      	ldr	r0, [r7, #4]
 8003806:	f7ff fe41 	bl	800348c <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE4moveEv>
      char c = current();
 800380a:	6878      	ldr	r0, [r7, #4]
 800380c:	f7ff faea 	bl	8002de4 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>
 8003810:	4603      	mov	r3, r0
 8003812:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      move();
 8003816:	6878      	ldr	r0, [r7, #4]
 8003818:	f7ff fe38 	bl	800348c <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE4moveEv>
      if (c == stopChar) break;
 800381c:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8003820:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8003824:	429a      	cmp	r2, r3
 8003826:	d04f      	beq.n	80038c8 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseQuotedStringERPKc+0xec>
      if (c == '\0') return DeserializationError::IncompleteInput;
 8003828:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800382c:	2b00      	cmp	r3, #0
 800382e:	d107      	bne.n	8003840 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseQuotedStringERPKc+0x64>
 8003830:	f107 0318 	add.w	r3, r7, #24
 8003834:	2101      	movs	r1, #1
 8003836:	4618      	mov	r0, r3
 8003838:	f7fd fe35 	bl	80014a6 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 800383c:	7e3b      	ldrb	r3, [r7, #24]
 800383e:	e061      	b.n	8003904 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseQuotedStringERPKc+0x128>
      if (c == '\\') {
 8003840:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8003844:	2b5c      	cmp	r3, #92	@ 0x5c
 8003846:	d136      	bne.n	80038b6 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseQuotedStringERPKc+0xda>
        c = current();
 8003848:	6878      	ldr	r0, [r7, #4]
 800384a:	f7ff facb 	bl	8002de4 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>
 800384e:	4603      	mov	r3, r0
 8003850:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        if (c == '\0') return DeserializationError::IncompleteInput;
 8003854:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8003858:	2b00      	cmp	r3, #0
 800385a:	d107      	bne.n	800386c <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseQuotedStringERPKc+0x90>
 800385c:	f107 031c 	add.w	r3, r7, #28
 8003860:	2101      	movs	r1, #1
 8003862:	4618      	mov	r0, r3
 8003864:	f7fd fe1f 	bl	80014a6 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 8003868:	7f3b      	ldrb	r3, [r7, #28]
 800386a:	e04b      	b.n	8003904 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseQuotedStringERPKc+0x128>
        if (c == 'u') {
 800386c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8003870:	2b75      	cmp	r3, #117	@ 0x75
 8003872:	d108      	bne.n	8003886 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseQuotedStringERPKc+0xaa>
          return DeserializationError::NotSupported;
 8003874:	f107 0320 	add.w	r3, r7, #32
 8003878:	2104      	movs	r1, #4
 800387a:	4618      	mov	r0, r3
 800387c:	f7fd fe13 	bl	80014a6 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 8003880:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003884:	e03e      	b.n	8003904 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseQuotedStringERPKc+0x128>
        c = EscapeSequence::unescapeChar(c);
 8003886:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800388a:	4618      	mov	r0, r3
 800388c:	f7fd fe8e 	bl	80015ac <_ZN19ArduinoJson6101_11014EscapeSequence12unescapeCharEc>
 8003890:	4603      	mov	r3, r0
 8003892:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        if (c == '\0') return DeserializationError::InvalidInput;
 8003896:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800389a:	2b00      	cmp	r3, #0
 800389c:	d108      	bne.n	80038b0 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseQuotedStringERPKc+0xd4>
 800389e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80038a2:	2102      	movs	r1, #2
 80038a4:	4618      	mov	r0, r3
 80038a6:	f7fd fdfe 	bl	80014a6 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 80038aa:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80038ae:	e029      	b.n	8003904 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseQuotedStringERPKc+0x128>
        move();
 80038b0:	6878      	ldr	r0, [r7, #4]
 80038b2:	f7ff fdeb 	bl	800348c <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE4moveEv>
      builder.append(c);
 80038b6:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 80038ba:	f107 0308 	add.w	r3, r7, #8
 80038be:	4611      	mov	r1, r2
 80038c0:	4618      	mov	r0, r3
 80038c2:	f7fd fd55 	bl	8001370 <_ZN19ArduinoJson6101_11013StringBuilder6appendEc>
    for (;;) {
 80038c6:	e7a0      	b.n	800380a <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseQuotedStringERPKc+0x2e>
      if (c == stopChar) break;
 80038c8:	bf00      	nop
    result = builder.complete();
 80038ca:	f107 0308 	add.w	r3, r7, #8
 80038ce:	4618      	mov	r0, r3
 80038d0:	f7fd fd73 	bl	80013ba <_ZN19ArduinoJson6101_11013StringBuilder8completeEv>
 80038d4:	4602      	mov	r2, r0
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	601a      	str	r2, [r3, #0]
    if (!result) return DeserializationError::NoMemory;
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d108      	bne.n	80038f4 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseQuotedStringERPKc+0x118>
 80038e2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80038e6:	2103      	movs	r1, #3
 80038e8:	4618      	mov	r0, r3
 80038ea:	f7fd fddc 	bl	80014a6 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 80038ee:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80038f2:	e007      	b.n	8003904 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseQuotedStringERPKc+0x128>
    return DeserializationError::Ok;
 80038f4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80038f8:	2100      	movs	r1, #0
 80038fa:	4618      	mov	r0, r3
 80038fc:	f7fd fdd3 	bl	80014a6 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 8003900:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
  }
 8003904:	4618      	mov	r0, r3
 8003906:	3730      	adds	r7, #48	@ 0x30
 8003908:	46bd      	mov	sp, r7
 800390a:	bd80      	pop	{r7, pc}

0800390c <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE20parseNonQuotedStringERPKc>:
  DeserializationError parseNonQuotedString(const char *&result) {
 800390c:	b580      	push	{r7, lr}
 800390e:	b08a      	sub	sp, #40	@ 0x28
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
 8003914:	6039      	str	r1, [r7, #0]
    StringBuilder builder = _stringStorage.startString();
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	f103 0208 	add.w	r2, r3, #8
 800391c:	f107 0308 	add.w	r3, r7, #8
 8003920:	4611      	mov	r1, r2
 8003922:	4618      	mov	r0, r3
 8003924:	f7fd fd74 	bl	8001410 <_ZN19ArduinoJson6101_11012StringCopier11startStringEv>
    char c = current();
 8003928:	6878      	ldr	r0, [r7, #4]
 800392a:	f7ff fa5b 	bl	8002de4 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>
 800392e:	4603      	mov	r3, r0
 8003930:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (c == '\0') return DeserializationError::IncompleteInput;
 8003934:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003938:	2b00      	cmp	r3, #0
 800393a:	d107      	bne.n	800394c <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE20parseNonQuotedStringERPKc+0x40>
 800393c:	f107 0318 	add.w	r3, r7, #24
 8003940:	2101      	movs	r1, #1
 8003942:	4618      	mov	r0, r3
 8003944:	f7fd fdaf 	bl	80014a6 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 8003948:	7e3b      	ldrb	r3, [r7, #24]
 800394a:	e046      	b.n	80039da <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE20parseNonQuotedStringERPKc+0xce>
    if (canBeInNonQuotedString(c)) {  // no quotes
 800394c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003950:	4618      	mov	r0, r3
 8003952:	f000 f846 	bl	80039e2 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE22canBeInNonQuotedStringEc>
 8003956:	4603      	mov	r3, r0
 8003958:	2b00      	cmp	r3, #0
 800395a:	d019      	beq.n	8003990 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE20parseNonQuotedStringERPKc+0x84>
        move();
 800395c:	6878      	ldr	r0, [r7, #4]
 800395e:	f7ff fd95 	bl	800348c <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE4moveEv>
        builder.append(c);
 8003962:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8003966:	f107 0308 	add.w	r3, r7, #8
 800396a:	4611      	mov	r1, r2
 800396c:	4618      	mov	r0, r3
 800396e:	f7fd fcff 	bl	8001370 <_ZN19ArduinoJson6101_11013StringBuilder6appendEc>
        c = current();
 8003972:	6878      	ldr	r0, [r7, #4]
 8003974:	f7ff fa36 	bl	8002de4 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>
 8003978:	4603      	mov	r3, r0
 800397a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      } while (canBeInNonQuotedString(c));
 800397e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003982:	4618      	mov	r0, r3
 8003984:	f000 f82d 	bl	80039e2 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE22canBeInNonQuotedStringEc>
 8003988:	4603      	mov	r3, r0
 800398a:	2b00      	cmp	r3, #0
 800398c:	d1e6      	bne.n	800395c <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE20parseNonQuotedStringERPKc+0x50>
 800398e:	e007      	b.n	80039a0 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE20parseNonQuotedStringERPKc+0x94>
      return DeserializationError::InvalidInput;
 8003990:	f107 031c 	add.w	r3, r7, #28
 8003994:	2102      	movs	r1, #2
 8003996:	4618      	mov	r0, r3
 8003998:	f7fd fd85 	bl	80014a6 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 800399c:	7f3b      	ldrb	r3, [r7, #28]
 800399e:	e01c      	b.n	80039da <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE20parseNonQuotedStringERPKc+0xce>
    result = builder.complete();
 80039a0:	f107 0308 	add.w	r3, r7, #8
 80039a4:	4618      	mov	r0, r3
 80039a6:	f7fd fd08 	bl	80013ba <_ZN19ArduinoJson6101_11013StringBuilder8completeEv>
 80039aa:	4602      	mov	r2, r0
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	601a      	str	r2, [r3, #0]
    if (!result) return DeserializationError::NoMemory;
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d108      	bne.n	80039ca <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE20parseNonQuotedStringERPKc+0xbe>
 80039b8:	f107 0320 	add.w	r3, r7, #32
 80039bc:	2103      	movs	r1, #3
 80039be:	4618      	mov	r0, r3
 80039c0:	f7fd fd71 	bl	80014a6 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 80039c4:	f897 3020 	ldrb.w	r3, [r7, #32]
 80039c8:	e007      	b.n	80039da <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE20parseNonQuotedStringERPKc+0xce>
    return DeserializationError::Ok;
 80039ca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80039ce:	2100      	movs	r1, #0
 80039d0:	4618      	mov	r0, r3
 80039d2:	f7fd fd68 	bl	80014a6 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 80039d6:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
  }
 80039da:	4618      	mov	r0, r3
 80039dc:	3728      	adds	r7, #40	@ 0x28
 80039de:	46bd      	mov	sp, r7
 80039e0:	bd80      	pop	{r7, pc}

080039e2 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE22canBeInNonQuotedStringEc>:
  static inline bool canBeInNonQuotedString(char c) {
 80039e2:	b580      	push	{r7, lr}
 80039e4:	b082      	sub	sp, #8
 80039e6:	af00      	add	r7, sp, #0
 80039e8:	4603      	mov	r3, r0
 80039ea:	71fb      	strb	r3, [r7, #7]
    return isBetween(c, '0', '9') || isBetween(c, '_', 'z') ||
 80039ec:	79fb      	ldrb	r3, [r7, #7]
 80039ee:	2239      	movs	r2, #57	@ 0x39
 80039f0:	2130      	movs	r1, #48	@ 0x30
 80039f2:	4618      	mov	r0, r3
 80039f4:	f000 fab5 	bl	8003f62 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE9isBetweenEccc>
 80039f8:	4603      	mov	r3, r0
           isBetween(c, 'A', 'Z') || c == '+' || c == '-' || c == '.';
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d11a      	bne.n	8003a34 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE22canBeInNonQuotedStringEc+0x52>
    return isBetween(c, '0', '9') || isBetween(c, '_', 'z') ||
 80039fe:	79fb      	ldrb	r3, [r7, #7]
 8003a00:	227a      	movs	r2, #122	@ 0x7a
 8003a02:	215f      	movs	r1, #95	@ 0x5f
 8003a04:	4618      	mov	r0, r3
 8003a06:	f000 faac 	bl	8003f62 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE9isBetweenEccc>
 8003a0a:	4603      	mov	r3, r0
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d111      	bne.n	8003a34 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE22canBeInNonQuotedStringEc+0x52>
           isBetween(c, 'A', 'Z') || c == '+' || c == '-' || c == '.';
 8003a10:	79fb      	ldrb	r3, [r7, #7]
 8003a12:	225a      	movs	r2, #90	@ 0x5a
 8003a14:	2141      	movs	r1, #65	@ 0x41
 8003a16:	4618      	mov	r0, r3
 8003a18:	f000 faa3 	bl	8003f62 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE9isBetweenEccc>
 8003a1c:	4603      	mov	r3, r0
    return isBetween(c, '0', '9') || isBetween(c, '_', 'z') ||
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d108      	bne.n	8003a34 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE22canBeInNonQuotedStringEc+0x52>
           isBetween(c, 'A', 'Z') || c == '+' || c == '-' || c == '.';
 8003a22:	79fb      	ldrb	r3, [r7, #7]
 8003a24:	2b2b      	cmp	r3, #43	@ 0x2b
 8003a26:	d005      	beq.n	8003a34 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE22canBeInNonQuotedStringEc+0x52>
 8003a28:	79fb      	ldrb	r3, [r7, #7]
 8003a2a:	2b2d      	cmp	r3, #45	@ 0x2d
 8003a2c:	d002      	beq.n	8003a34 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE22canBeInNonQuotedStringEc+0x52>
 8003a2e:	79fb      	ldrb	r3, [r7, #7]
 8003a30:	2b2e      	cmp	r3, #46	@ 0x2e
 8003a32:	d101      	bne.n	8003a38 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE22canBeInNonQuotedStringEc+0x56>
 8003a34:	2301      	movs	r3, #1
 8003a36:	e000      	b.n	8003a3a <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE22canBeInNonQuotedStringEc+0x58>
 8003a38:	2300      	movs	r3, #0
  }
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	3708      	adds	r7, #8
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	bd80      	pop	{r7, pc}
 8003a42:	0000      	movs	r0, r0
 8003a44:	0000      	movs	r0, r0
	...

08003a48 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc>:

template <typename A, typename B>
struct choose_largest : conditional<(sizeof(A) > sizeof(B)), A, B> {};

template <typename TFloat, typename TUInt>
inline ParsedNumber<TFloat, TUInt> parseNumber(const char *s) {
 8003a48:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003a4c:	b0a2      	sub	sp, #136	@ 0x88
 8003a4e:	af02      	add	r7, sp, #8
 8003a50:	6478      	str	r0, [r7, #68]	@ 0x44
 8003a52:	6439      	str	r1, [r7, #64]	@ 0x40
  typedef typename traits::exponent_type exponent_t;
  typedef ParsedNumber<TFloat, TUInt> return_type;

  ARDUINOJSON_ASSERT(s != 0);

  bool is_negative = false;
 8003a54:	2300      	movs	r3, #0
 8003a56:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  switch (*s) {
 8003a5a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003a5c:	781b      	ldrb	r3, [r3, #0]
 8003a5e:	2b2b      	cmp	r3, #43	@ 0x2b
 8003a60:	d008      	beq.n	8003a74 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x2c>
 8003a62:	2b2d      	cmp	r3, #45	@ 0x2d
 8003a64:	d10a      	bne.n	8003a7c <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x34>
    case '-':
      is_negative = true;
 8003a66:	2301      	movs	r3, #1
 8003a68:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
      s++;
 8003a6c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003a6e:	3301      	adds	r3, #1
 8003a70:	643b      	str	r3, [r7, #64]	@ 0x40
      break;
 8003a72:	e003      	b.n	8003a7c <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x34>
    case '+':
      s++;
 8003a74:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003a76:	3301      	adds	r3, #1
 8003a78:	643b      	str	r3, [r7, #64]	@ 0x40
      break;
 8003a7a:	bf00      	nop
  }

  if (*s == 'n' || *s == 'N') return traits::nan();
 8003a7c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003a7e:	781b      	ldrb	r3, [r3, #0]
 8003a80:	2b6e      	cmp	r3, #110	@ 0x6e
 8003a82:	d003      	beq.n	8003a8c <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x44>
 8003a84:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003a86:	781b      	ldrb	r3, [r3, #0]
 8003a88:	2b4e      	cmp	r3, #78	@ 0x4e
 8003a8a:	d109      	bne.n	8003aa0 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x58>
 8003a8c:	f000 fa84 	bl	8003f98 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE3nanEv>
 8003a90:	eeb0 7b40 	vmov.f64	d7, d0
 8003a94:	eeb0 0b47 	vmov.f64	d0, d7
 8003a98:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8003a9a:	f000 fa8b 	bl	8003fb4 <_ZN19ArduinoJson6101_11012ParsedNumberIdyEC1Ed>
 8003a9e:	e1d4      	b.n	8003e4a <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x402>
  if (*s == 'i' || *s == 'I')
 8003aa0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003aa2:	781b      	ldrb	r3, [r3, #0]
 8003aa4:	2b69      	cmp	r3, #105	@ 0x69
 8003aa6:	d003      	beq.n	8003ab0 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x68>
 8003aa8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003aaa:	781b      	ldrb	r3, [r3, #0]
 8003aac:	2b49      	cmp	r3, #73	@ 0x49
 8003aae:	d114      	bne.n	8003ada <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x92>
    return is_negative ? -traits::inf() : traits::inf();
 8003ab0:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d006      	beq.n	8003ac6 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x7e>
 8003ab8:	f000 fa92 	bl	8003fe0 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE3infEv>
 8003abc:	eeb0 7b40 	vmov.f64	d7, d0
 8003ac0:	eeb1 7b47 	vneg.f64	d7, d7
 8003ac4:	e003      	b.n	8003ace <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x86>
 8003ac6:	f000 fa8b 	bl	8003fe0 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE3infEv>
 8003aca:	eeb0 7b40 	vmov.f64	d7, d0
 8003ace:	eeb0 0b47 	vmov.f64	d0, d7
 8003ad2:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8003ad4:	f000 fa6e 	bl	8003fb4 <_ZN19ArduinoJson6101_11012ParsedNumberIdyEC1Ed>
 8003ad8:	e1b7      	b.n	8003e4a <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x402>
  if (!isdigit(*s) && *s != '.') return return_type();
 8003ada:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003adc:	781b      	ldrb	r3, [r3, #0]
 8003ade:	4618      	mov	r0, r3
 8003ae0:	f7fd fc00 	bl	80012e4 <_ZN19ArduinoJson6101_1107isdigitEc>
 8003ae4:	4603      	mov	r3, r0
 8003ae6:	f083 0301 	eor.w	r3, r3, #1
 8003aea:	b2db      	uxtb	r3, r3
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d005      	beq.n	8003afc <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0xb4>
 8003af0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003af2:	781b      	ldrb	r3, [r3, #0]
 8003af4:	2b2e      	cmp	r3, #46	@ 0x2e
 8003af6:	d001      	beq.n	8003afc <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0xb4>
 8003af8:	2301      	movs	r3, #1
 8003afa:	e000      	b.n	8003afe <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0xb6>
 8003afc:	2300      	movs	r3, #0
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d003      	beq.n	8003b0a <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0xc2>
 8003b02:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8003b04:	f000 fa7a 	bl	8003ffc <_ZN19ArduinoJson6101_11012ParsedNumberIdyEC1Ev>
 8003b08:	e19f      	b.n	8003e4a <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x402>

  mantissa_t mantissa = 0;
 8003b0a:	f04f 0200 	mov.w	r2, #0
 8003b0e:	f04f 0300 	mov.w	r3, #0
 8003b12:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
  exponent_t exponent_offset = 0;
 8003b16:	2300      	movs	r3, #0
 8003b18:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  const mantissa_t maxUint = TUInt(-1);
 8003b1c:	f04f 32ff 	mov.w	r2, #4294967295
 8003b20:	f04f 33ff 	mov.w	r3, #4294967295
 8003b24:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58

  while (isdigit(*s)) {
 8003b28:	e054      	b.n	8003bd4 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x18c>
    uint8_t digit = uint8_t(*s - '0');
 8003b2a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003b2c:	781b      	ldrb	r3, [r3, #0]
 8003b2e:	3b30      	subs	r3, #48	@ 0x30
 8003b30:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
    if (mantissa > maxUint / 10) break;
 8003b34:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8003b38:	f112 3f66 	cmn.w	r2, #1717986918	@ 0x66666666
 8003b3c:	49b2      	ldr	r1, [pc, #712]	@ (8003e08 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x3c0>)
 8003b3e:	418b      	sbcs	r3, r1
 8003b40:	d251      	bcs.n	8003be6 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x19e>
    mantissa *= 10;
 8003b42:	e9d7 451c 	ldrd	r4, r5, [r7, #112]	@ 0x70
 8003b46:	4622      	mov	r2, r4
 8003b48:	462b      	mov	r3, r5
 8003b4a:	f04f 0000 	mov.w	r0, #0
 8003b4e:	f04f 0100 	mov.w	r1, #0
 8003b52:	0099      	lsls	r1, r3, #2
 8003b54:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8003b58:	0090      	lsls	r0, r2, #2
 8003b5a:	4602      	mov	r2, r0
 8003b5c:	460b      	mov	r3, r1
 8003b5e:	eb12 0804 	adds.w	r8, r2, r4
 8003b62:	eb43 0905 	adc.w	r9, r3, r5
 8003b66:	eb18 0308 	adds.w	r3, r8, r8
 8003b6a:	61bb      	str	r3, [r7, #24]
 8003b6c:	eb49 0309 	adc.w	r3, r9, r9
 8003b70:	61fb      	str	r3, [r7, #28]
 8003b72:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8003b76:	e9c7 891c 	strd	r8, r9, [r7, #112]	@ 0x70
    if (mantissa > maxUint - digit) break;
 8003b7a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8003b7e:	2200      	movs	r2, #0
 8003b80:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003b82:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003b84:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8003b88:	460b      	mov	r3, r1
 8003b8a:	43db      	mvns	r3, r3
 8003b8c:	633b      	str	r3, [r7, #48]	@ 0x30
 8003b8e:	4613      	mov	r3, r2
 8003b90:	43db      	mvns	r3, r3
 8003b92:	637b      	str	r3, [r7, #52]	@ 0x34
 8003b94:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8003b98:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003b9c:	4621      	mov	r1, r4
 8003b9e:	4291      	cmp	r1, r2
 8003ba0:	4629      	mov	r1, r5
 8003ba2:	eb71 0303 	sbcs.w	r3, r1, r3
 8003ba6:	d320      	bcc.n	8003bea <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x1a2>
    mantissa += digit;
 8003ba8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8003bac:	2200      	movs	r2, #0
 8003bae:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003bb0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003bb2:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8003bb6:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	@ 0x28
 8003bba:	4621      	mov	r1, r4
 8003bbc:	1851      	adds	r1, r2, r1
 8003bbe:	6139      	str	r1, [r7, #16]
 8003bc0:	4629      	mov	r1, r5
 8003bc2:	414b      	adcs	r3, r1
 8003bc4:	617b      	str	r3, [r7, #20]
 8003bc6:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8003bca:	e9c7 341c 	strd	r3, r4, [r7, #112]	@ 0x70
    s++;
 8003bce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003bd0:	3301      	adds	r3, #1
 8003bd2:	643b      	str	r3, [r7, #64]	@ 0x40
  while (isdigit(*s)) {
 8003bd4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003bd6:	781b      	ldrb	r3, [r3, #0]
 8003bd8:	4618      	mov	r0, r3
 8003bda:	f7fd fb83 	bl	80012e4 <_ZN19ArduinoJson6101_1107isdigitEc>
 8003bde:	4603      	mov	r3, r0
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d1a2      	bne.n	8003b2a <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0xe2>
 8003be4:	e002      	b.n	8003bec <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x1a4>
    if (mantissa > maxUint / 10) break;
 8003be6:	bf00      	nop
 8003be8:	e000      	b.n	8003bec <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x1a4>
    if (mantissa > maxUint - digit) break;
 8003bea:	bf00      	nop
  }

  if (*s == '\0') return return_type(TUInt(mantissa), is_negative);
 8003bec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003bee:	781b      	ldrb	r3, [r3, #0]
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d11b      	bne.n	8003c2c <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x1e4>
 8003bf4:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8003bf8:	9300      	str	r3, [sp, #0]
 8003bfa:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8003bfe:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8003c00:	f000 fa18 	bl	8004034 <_ZN19ArduinoJson6101_11012ParsedNumberIdyEC1Eyb>
 8003c04:	e121      	b.n	8003e4a <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x402>

  // avoid mantissa overflow
  while (mantissa > traits::mantissa_max) {
    mantissa /= 10;
 8003c06:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8003c0a:	f04f 020a 	mov.w	r2, #10
 8003c0e:	f04f 0300 	mov.w	r3, #0
 8003c12:	f7fc fd81 	bl	8000718 <__aeabi_uldivmod>
 8003c16:	4602      	mov	r2, r0
 8003c18:	460b      	mov	r3, r1
 8003c1a:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
    exponent_offset++;
 8003c1e:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	@ 0x6e
 8003c22:	b29b      	uxth	r3, r3
 8003c24:	3301      	adds	r3, #1
 8003c26:	b29b      	uxth	r3, r3
 8003c28:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  while (mantissa > traits::mantissa_max) {
 8003c2c:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8003c30:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003c34:	d2e7      	bcs.n	8003c06 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x1be>
  }

  // remaing digits can't fit in the mantissa
  while (isdigit(*s)) {
 8003c36:	e009      	b.n	8003c4c <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x204>
    exponent_offset++;
 8003c38:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	@ 0x6e
 8003c3c:	b29b      	uxth	r3, r3
 8003c3e:	3301      	adds	r3, #1
 8003c40:	b29b      	uxth	r3, r3
 8003c42:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
    s++;
 8003c46:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003c48:	3301      	adds	r3, #1
 8003c4a:	643b      	str	r3, [r7, #64]	@ 0x40
  while (isdigit(*s)) {
 8003c4c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003c4e:	781b      	ldrb	r3, [r3, #0]
 8003c50:	4618      	mov	r0, r3
 8003c52:	f7fd fb47 	bl	80012e4 <_ZN19ArduinoJson6101_1107isdigitEc>
 8003c56:	4603      	mov	r3, r0
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d1ed      	bne.n	8003c38 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x1f0>
  }

  if (*s == '.') {
 8003c5c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003c5e:	781b      	ldrb	r3, [r3, #0]
 8003c60:	2b2e      	cmp	r3, #46	@ 0x2e
 8003c62:	d14c      	bne.n	8003cfe <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x2b6>
    s++;
 8003c64:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003c66:	3301      	adds	r3, #1
 8003c68:	643b      	str	r3, [r7, #64]	@ 0x40
    while (isdigit(*s)) {
 8003c6a:	e040      	b.n	8003cee <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x2a6>
      if (mantissa < traits::mantissa_max / 10) {
 8003c6c:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8003c70:	f1b2 3f99 	cmp.w	r2, #2576980377	@ 0x99999999
 8003c74:	4965      	ldr	r1, [pc, #404]	@ (8003e0c <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x3c4>)
 8003c76:	418b      	sbcs	r3, r1
 8003c78:	d236      	bcs.n	8003ce8 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x2a0>
        mantissa = mantissa * 10 + uint8_t(*s - '0');
 8003c7a:	e9d7 451c 	ldrd	r4, r5, [r7, #112]	@ 0x70
 8003c7e:	4622      	mov	r2, r4
 8003c80:	462b      	mov	r3, r5
 8003c82:	f04f 0000 	mov.w	r0, #0
 8003c86:	f04f 0100 	mov.w	r1, #0
 8003c8a:	0099      	lsls	r1, r3, #2
 8003c8c:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8003c90:	0090      	lsls	r0, r2, #2
 8003c92:	4602      	mov	r2, r0
 8003c94:	460b      	mov	r3, r1
 8003c96:	eb12 0a04 	adds.w	sl, r2, r4
 8003c9a:	eb43 0b05 	adc.w	fp, r3, r5
 8003c9e:	eb1a 030a 	adds.w	r3, sl, sl
 8003ca2:	60bb      	str	r3, [r7, #8]
 8003ca4:	eb4b 030b 	adc.w	r3, fp, fp
 8003ca8:	60fb      	str	r3, [r7, #12]
 8003caa:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8003cae:	4652      	mov	r2, sl
 8003cb0:	465b      	mov	r3, fp
 8003cb2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003cb4:	7809      	ldrb	r1, [r1, #0]
 8003cb6:	3930      	subs	r1, #48	@ 0x30
 8003cb8:	b2c9      	uxtb	r1, r1
 8003cba:	b2c9      	uxtb	r1, r1
 8003cbc:	2000      	movs	r0, #0
 8003cbe:	6239      	str	r1, [r7, #32]
 8003cc0:	6278      	str	r0, [r7, #36]	@ 0x24
 8003cc2:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8003cc6:	4621      	mov	r1, r4
 8003cc8:	1851      	adds	r1, r2, r1
 8003cca:	6039      	str	r1, [r7, #0]
 8003ccc:	4629      	mov	r1, r5
 8003cce:	414b      	adcs	r3, r1
 8003cd0:	607b      	str	r3, [r7, #4]
 8003cd2:	e9d7 3400 	ldrd	r3, r4, [r7]
 8003cd6:	e9c7 341c 	strd	r3, r4, [r7, #112]	@ 0x70
        exponent_offset--;
 8003cda:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	@ 0x6e
 8003cde:	b29b      	uxth	r3, r3
 8003ce0:	3b01      	subs	r3, #1
 8003ce2:	b29b      	uxth	r3, r3
 8003ce4:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
      }
      s++;
 8003ce8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003cea:	3301      	adds	r3, #1
 8003cec:	643b      	str	r3, [r7, #64]	@ 0x40
    while (isdigit(*s)) {
 8003cee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003cf0:	781b      	ldrb	r3, [r3, #0]
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	f7fd faf6 	bl	80012e4 <_ZN19ArduinoJson6101_1107isdigitEc>
 8003cf8:	4603      	mov	r3, r0
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d1b6      	bne.n	8003c6c <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x224>
    }
  }

  int exponent = 0;
 8003cfe:	2300      	movs	r3, #0
 8003d00:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (*s == 'e' || *s == 'E') {
 8003d02:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003d04:	781b      	ldrb	r3, [r3, #0]
 8003d06:	2b65      	cmp	r3, #101	@ 0x65
 8003d08:	d003      	beq.n	8003d12 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x2ca>
 8003d0a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003d0c:	781b      	ldrb	r3, [r3, #0]
 8003d0e:	2b45      	cmp	r3, #69	@ 0x45
 8003d10:	d164      	bne.n	8003ddc <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x394>
    s++;
 8003d12:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003d14:	3301      	adds	r3, #1
 8003d16:	643b      	str	r3, [r7, #64]	@ 0x40
    bool negative_exponent = false;
 8003d18:	2300      	movs	r3, #0
 8003d1a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
    if (*s == '-') {
 8003d1e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003d20:	781b      	ldrb	r3, [r3, #0]
 8003d22:	2b2d      	cmp	r3, #45	@ 0x2d
 8003d24:	d106      	bne.n	8003d34 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x2ec>
      negative_exponent = true;
 8003d26:	2301      	movs	r3, #1
 8003d28:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
      s++;
 8003d2c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003d2e:	3301      	adds	r3, #1
 8003d30:	643b      	str	r3, [r7, #64]	@ 0x40
 8003d32:	e044      	b.n	8003dbe <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x376>
    } else if (*s == '+') {
 8003d34:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003d36:	781b      	ldrb	r3, [r3, #0]
 8003d38:	2b2b      	cmp	r3, #43	@ 0x2b
 8003d3a:	d140      	bne.n	8003dbe <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x376>
      s++;
 8003d3c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003d3e:	3301      	adds	r3, #1
 8003d40:	643b      	str	r3, [r7, #64]	@ 0x40
    }

    while (isdigit(*s)) {
 8003d42:	e03c      	b.n	8003dbe <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x376>
      exponent = exponent * 10 + (*s - '0');
 8003d44:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8003d46:	4613      	mov	r3, r2
 8003d48:	009b      	lsls	r3, r3, #2
 8003d4a:	4413      	add	r3, r2
 8003d4c:	005b      	lsls	r3, r3, #1
 8003d4e:	461a      	mov	r2, r3
 8003d50:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003d52:	781b      	ldrb	r3, [r3, #0]
 8003d54:	3b30      	subs	r3, #48	@ 0x30
 8003d56:	4413      	add	r3, r2
 8003d58:	66bb      	str	r3, [r7, #104]	@ 0x68
      if (exponent + exponent_offset > traits::exponent_max) {
 8003d5a:	f9b7 206e 	ldrsh.w	r2, [r7, #110]	@ 0x6e
 8003d5e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003d60:	4413      	add	r3, r2
 8003d62:	f5b3 7f9a 	cmp.w	r3, #308	@ 0x134
 8003d66:	dd27      	ble.n	8003db8 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x370>
        if (negative_exponent)
 8003d68:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d00e      	beq.n	8003d8e <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x346>
          return is_negative ? -0.0f : 0.0f;
 8003d70:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d002      	beq.n	8003d7e <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x336>
 8003d78:	ed9f 7b1f 	vldr	d7, [pc, #124]	@ 8003df8 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x3b0>
 8003d7c:	e001      	b.n	8003d82 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x33a>
 8003d7e:	ed9f 7b20 	vldr	d7, [pc, #128]	@ 8003e00 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x3b8>
 8003d82:	eeb0 0b47 	vmov.f64	d0, d7
 8003d86:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8003d88:	f000 f914 	bl	8003fb4 <_ZN19ArduinoJson6101_11012ParsedNumberIdyEC1Ed>
 8003d8c:	e05d      	b.n	8003e4a <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x402>
        else
          return is_negative ? -traits::inf() : traits::inf();
 8003d8e:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d006      	beq.n	8003da4 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x35c>
 8003d96:	f000 f923 	bl	8003fe0 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE3infEv>
 8003d9a:	eeb0 7b40 	vmov.f64	d7, d0
 8003d9e:	eeb1 7b47 	vneg.f64	d7, d7
 8003da2:	e003      	b.n	8003dac <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x364>
 8003da4:	f000 f91c 	bl	8003fe0 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE3infEv>
 8003da8:	eeb0 7b40 	vmov.f64	d7, d0
 8003dac:	eeb0 0b47 	vmov.f64	d0, d7
 8003db0:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8003db2:	f000 f8ff 	bl	8003fb4 <_ZN19ArduinoJson6101_11012ParsedNumberIdyEC1Ed>
 8003db6:	e048      	b.n	8003e4a <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x402>
      }
      s++;
 8003db8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003dba:	3301      	adds	r3, #1
 8003dbc:	643b      	str	r3, [r7, #64]	@ 0x40
    while (isdigit(*s)) {
 8003dbe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003dc0:	781b      	ldrb	r3, [r3, #0]
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	f7fd fa8e 	bl	80012e4 <_ZN19ArduinoJson6101_1107isdigitEc>
 8003dc8:	4603      	mov	r3, r0
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d1ba      	bne.n	8003d44 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x2fc>
    }
    if (negative_exponent) exponent = -exponent;
 8003dce:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d002      	beq.n	8003ddc <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x394>
 8003dd6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003dd8:	425b      	negs	r3, r3
 8003dda:	66bb      	str	r3, [r7, #104]	@ 0x68
  }
  exponent += exponent_offset;
 8003ddc:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	@ 0x6e
 8003de0:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8003de2:	4413      	add	r3, r2
 8003de4:	66bb      	str	r3, [r7, #104]	@ 0x68

  // we should be at the end of the string, otherwise it's an error
  if (*s != '\0') return return_type();
 8003de6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003de8:	781b      	ldrb	r3, [r3, #0]
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d010      	beq.n	8003e10 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x3c8>
 8003dee:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8003df0:	f000 f904 	bl	8003ffc <_ZN19ArduinoJson6101_11012ParsedNumberIdyEC1Ev>
 8003df4:	e029      	b.n	8003e4a <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x402>
 8003df6:	bf00      	nop
 8003df8:	00000000 	.word	0x00000000
 8003dfc:	80000000 	.word	0x80000000
	...
 8003e08:	19999999 	.word	0x19999999
 8003e0c:	00019999 	.word	0x00019999

  TFloat result = traits::make_float(static_cast<TFloat>(mantissa), exponent);
 8003e10:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8003e14:	f7fc fc4a 	bl	80006ac <__aeabi_ul2d>
 8003e18:	4602      	mov	r2, r0
 8003e1a:	460b      	mov	r3, r1
 8003e1c:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 8003e1e:	ec43 2b10 	vmov	d0, r2, r3
 8003e22:	f000 f928 	bl	8004076 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE10make_floatIiEEddT_>
 8003e26:	ed87 0b12 	vstr	d0, [r7, #72]	@ 0x48

  return is_negative ? -result : result;
 8003e2a:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d004      	beq.n	8003e3c <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x3f4>
 8003e32:	ed97 7b12 	vldr	d7, [r7, #72]	@ 0x48
 8003e36:	eeb1 7b47 	vneg.f64	d7, d7
 8003e3a:	e001      	b.n	8003e40 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x3f8>
 8003e3c:	ed97 7b12 	vldr	d7, [r7, #72]	@ 0x48
 8003e40:	eeb0 0b47 	vmov.f64	d0, d7
 8003e44:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8003e46:	f000 f8b5 	bl	8003fb4 <_ZN19ArduinoJson6101_11012ParsedNumberIdyEC1Ed>
}
 8003e4a:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8003e4c:	3780      	adds	r7, #128	@ 0x80
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08003e54 <_ZNK19ArduinoJson6101_11012ParsedNumberIdyE4typeEv>:
  uint8_t type() const {
 8003e54:	b480      	push	{r7}
 8003e56:	b083      	sub	sp, #12
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
    return _type;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	7c1b      	ldrb	r3, [r3, #16]
  }
 8003e60:	4618      	mov	r0, r3
 8003e62:	370c      	adds	r7, #12
 8003e64:	46bd      	mov	sp, r7
 8003e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6a:	4770      	bx	lr

08003e6c <_ZN19ArduinoJson6101_1109objectGetINS_21ConstRamStringAdapterEEEPNS_11VariantDataEPKNS_14CollectionDataET_>:
  if (!lhs || !rhs) return false;
  return lhs->equalsObject(*rhs);
}

template <typename TAdaptedString>
inline VariantData *objectGet(const CollectionData *obj, TAdaptedString key) {
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	b082      	sub	sp, #8
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
 8003e74:	6039      	str	r1, [r7, #0]
  if (!obj) return 0;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d101      	bne.n	8003e80 <_ZN19ArduinoJson6101_1109objectGetINS_21ConstRamStringAdapterEEEPNS_11VariantDataEPKNS_14CollectionDataET_+0x14>
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	e006      	b.n	8003e8e <_ZN19ArduinoJson6101_1109objectGetINS_21ConstRamStringAdapterEEEPNS_11VariantDataEPKNS_14CollectionDataET_+0x22>
  return obj->get(key);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6839      	ldr	r1, [r7, #0]
 8003e84:	4618      	mov	r0, r3
 8003e86:	f7fe fd00 	bl	800288a <_ZNK19ArduinoJson6101_11014CollectionData3getINS_21ConstRamStringAdapterEEEPNS_11VariantDataET_>
 8003e8a:	4603      	mov	r3, r0
 8003e8c:	bf00      	nop
}
 8003e8e:	4618      	mov	r0, r3
 8003e90:	3708      	adds	r7, #8
 8003e92:	46bd      	mov	sp, r7
 8003e94:	bd80      	pop	{r7, pc}

08003e96 <_ZN19ArduinoJson6101_11022convertPositiveIntegerImyEET_T0_>:
canStoreNegativeInteger(TIn) {
  return false;
}

template <typename TOut, typename TIn>
TOut convertPositiveInteger(TIn value) {
 8003e96:	b580      	push	{r7, lr}
 8003e98:	b082      	sub	sp, #8
 8003e9a:	af00      	add	r7, sp, #0
 8003e9c:	e9c7 0100 	strd	r0, r1, [r7]
  return canStorePositiveInteger<TOut>(value) ? TOut(value) : 0;
 8003ea0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003ea4:	f000 f937 	bl	8004116 <_ZN19ArduinoJson6101_11023canStorePositiveIntegerImyEENS_9enable_ifIXaasrNS_11is_integralIT_EE5valuelestS3_stT0_EbE4typeES5_>
 8003ea8:	4603      	mov	r3, r0
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d001      	beq.n	8003eb2 <_ZN19ArduinoJson6101_11022convertPositiveIntegerImyEET_T0_+0x1c>
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	e000      	b.n	8003eb4 <_ZN19ArduinoJson6101_11022convertPositiveIntegerImyEET_T0_+0x1e>
 8003eb2:	2300      	movs	r3, #0
}
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	3708      	adds	r7, #8
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	bd80      	pop	{r7, pc}

08003ebc <_ZN19ArduinoJson6101_11022convertNegativeIntegerImyEET_T0_>:

template <typename TOut, typename TIn>
TOut convertNegativeInteger(TIn value) {
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	b082      	sub	sp, #8
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	e9c7 0100 	strd	r0, r1, [r7]
  return canStoreNegativeInteger<TOut>(value) ? TOut(~value + 1) : 0;
 8003ec6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003eca:	f000 f93c 	bl	8004146 <_ZN19ArduinoJson6101_11023canStoreNegativeIntegerImyEENS_9enable_ifIXaasrNS_11is_integralIT_EE5valuesrNS_11is_unsignedIS3_EE5valueEbE4typeET0_>
 8003ece:	4603      	mov	r3, r0
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d002      	beq.n	8003eda <_ZN19ArduinoJson6101_11022convertNegativeIntegerImyEET_T0_+0x1e>
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	425b      	negs	r3, r3
 8003ed8:	e000      	b.n	8003edc <_ZN19ArduinoJson6101_11022convertNegativeIntegerImyEET_T0_+0x20>
 8003eda:	2300      	movs	r3, #0
}
 8003edc:	4618      	mov	r0, r3
 8003ede:	3708      	adds	r7, #8
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	bd80      	pop	{r7, pc}

08003ee4 <_ZN19ArduinoJson6101_11012parseIntegerImEET_PKc>:
#include "convertNumber.hpp"
#include "parseNumber.hpp"

namespace ARDUINOJSON_NAMESPACE {
template <typename T>
T parseInteger(const char *s) {
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b088      	sub	sp, #32
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
  // try to reuse the same parameters as JsonDeserializer
  typedef typename choose_largest<UInt, typename make_unsigned<T>::type>::type
      TUInt;
  return parseNumber<Float, TUInt>(s).template as<T>();
 8003eec:	f107 0308 	add.w	r3, r7, #8
 8003ef0:	6879      	ldr	r1, [r7, #4]
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	f7ff fda8 	bl	8003a48 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc>
 8003ef8:	f107 0308 	add.w	r3, r7, #8
 8003efc:	4618      	mov	r0, r3
 8003efe:	f000 f92e 	bl	800415e <_ZNK19ArduinoJson6101_11012ParsedNumberIdyE2asImEET_v>
 8003f02:	4603      	mov	r3, r0
}
 8003f04:	4618      	mov	r0, r3
 8003f06:	3720      	adds	r7, #32
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	bd80      	pop	{r7, pc}

08003f0c <_ZN19ArduinoJson6101_11012convertFloatImdEENS_9enable_ifIXntsrNS_17is_floating_pointIT_EE5valueES3_E4typeET0_>:
    TIn value) {
  return TOut(value);
}

template <typename TOut, typename TIn>
typename enable_if<!is_floating_point<TOut>::value, TOut>::type convertFloat(
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	b082      	sub	sp, #8
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	ed87 0b00 	vstr	d0, [r7]
    TIn value) {
  return value >= numeric_limits<TOut>::lowest() &&
 8003f16:	f000 f950 	bl	80041ba <_ZN19ArduinoJson6101_11014numeric_limitsImvE6lowestEv>
 8003f1a:	ee07 0a90 	vmov	s15, r0
 8003f1e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
                 value <= numeric_limits<TOut>::highest()
             ? TOut(value)
 8003f22:	ed97 6b00 	vldr	d6, [r7]
 8003f26:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8003f2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f2e:	db13      	blt.n	8003f58 <_ZN19ArduinoJson6101_11012convertFloatImdEENS_9enable_ifIXntsrNS_17is_floating_pointIT_EE5valueES3_E4typeET0_+0x4c>
                 value <= numeric_limits<TOut>::highest()
 8003f30:	f000 f94b 	bl	80041ca <_ZN19ArduinoJson6101_11014numeric_limitsImvE7highestEv>
 8003f34:	ee07 0a90 	vmov	s15, r0
 8003f38:	eeb8 7b67 	vcvt.f64.u32	d7, s15
  return value >= numeric_limits<TOut>::lowest() &&
 8003f3c:	ed97 6b00 	vldr	d6, [r7]
 8003f40:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8003f44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f48:	d806      	bhi.n	8003f58 <_ZN19ArduinoJson6101_11012convertFloatImdEENS_9enable_ifIXntsrNS_17is_floating_pointIT_EE5valueES3_E4typeET0_+0x4c>
             ? TOut(value)
 8003f4a:	ed97 7b00 	vldr	d7, [r7]
 8003f4e:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8003f52:	ee17 3a90 	vmov	r3, s15
 8003f56:	e000      	b.n	8003f5a <_ZN19ArduinoJson6101_11012convertFloatImdEENS_9enable_ifIXntsrNS_17is_floating_pointIT_EE5valueES3_E4typeET0_+0x4e>
 8003f58:	2300      	movs	r3, #0
             : 0;
}
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	3708      	adds	r7, #8
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	bd80      	pop	{r7, pc}

08003f62 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE9isBetweenEccc>:
  static inline bool isBetween(char c, char min, char max) {
 8003f62:	b480      	push	{r7}
 8003f64:	b083      	sub	sp, #12
 8003f66:	af00      	add	r7, sp, #0
 8003f68:	4603      	mov	r3, r0
 8003f6a:	71fb      	strb	r3, [r7, #7]
 8003f6c:	460b      	mov	r3, r1
 8003f6e:	71bb      	strb	r3, [r7, #6]
 8003f70:	4613      	mov	r3, r2
 8003f72:	717b      	strb	r3, [r7, #5]
    return min <= c && c <= max;
 8003f74:	79ba      	ldrb	r2, [r7, #6]
 8003f76:	79fb      	ldrb	r3, [r7, #7]
 8003f78:	429a      	cmp	r2, r3
 8003f7a:	d805      	bhi.n	8003f88 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE9isBetweenEccc+0x26>
 8003f7c:	79fa      	ldrb	r2, [r7, #7]
 8003f7e:	797b      	ldrb	r3, [r7, #5]
 8003f80:	429a      	cmp	r2, r3
 8003f82:	d801      	bhi.n	8003f88 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE9isBetweenEccc+0x26>
 8003f84:	2301      	movs	r3, #1
 8003f86:	e000      	b.n	8003f8a <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE9isBetweenEccc+0x28>
 8003f88:	2300      	movs	r3, #0
  }
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	370c      	adds	r7, #12
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f94:	4770      	bx	lr
	...

08003f98 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE3nanEv>:
        forge(0x0AFE07B2, 0x7DD78B14)   // 1e-255
    };
    return factors[index];
  }

  static T nan() {
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	af00      	add	r7, sp, #0
    return forge(0x7ff80000, 0x00000000);
 8003f9c:	2100      	movs	r1, #0
 8003f9e:	4804      	ldr	r0, [pc, #16]	@ (8003fb0 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE3nanEv+0x18>)
 8003fa0:	f000 f91c 	bl	80041dc <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE5forgeEmm>
 8003fa4:	eeb0 7b40 	vmov.f64	d7, d0
  }
 8003fa8:	eeb0 0b47 	vmov.f64	d0, d7
 8003fac:	bd80      	pop	{r7, pc}
 8003fae:	bf00      	nop
 8003fb0:	7ff80000 	.word	0x7ff80000

08003fb4 <_ZN19ArduinoJson6101_11012ParsedNumberIdyEC1Ed>:
  ParsedNumber(TFloat value) : floatValue(value), _type(VALUE_IS_FLOAT) {}
 8003fb4:	b480      	push	{r7}
 8003fb6:	b085      	sub	sp, #20
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	60f8      	str	r0, [r7, #12]
 8003fbc:	ed87 0b00 	vstr	d0, [r7]
 8003fc0:	68f9      	ldr	r1, [r7, #12]
 8003fc2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003fc6:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	2208      	movs	r2, #8
 8003fce:	741a      	strb	r2, [r3, #16]
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	3714      	adds	r7, #20
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fdc:	4770      	bx	lr
	...

08003fe0 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE3infEv>:

  static T inf() {
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	af00      	add	r7, sp, #0
    return forge(0x7ff00000, 0x00000000);
 8003fe4:	2100      	movs	r1, #0
 8003fe6:	4804      	ldr	r0, [pc, #16]	@ (8003ff8 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE3infEv+0x18>)
 8003fe8:	f000 f8f8 	bl	80041dc <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE5forgeEmm>
 8003fec:	eeb0 7b40 	vmov.f64	d7, d0
  }
 8003ff0:	eeb0 0b47 	vmov.f64	d0, d7
 8003ff4:	bd80      	pop	{r7, pc}
 8003ff6:	bf00      	nop
 8003ff8:	7ff00000 	.word	0x7ff00000

08003ffc <_ZN19ArduinoJson6101_11012ParsedNumberIdyEC1Ev>:
  ParsedNumber() : uintValue(0), floatValue(0), _type(VALUE_IS_NULL) {}
 8003ffc:	b480      	push	{r7}
 8003ffe:	b083      	sub	sp, #12
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
 8004004:	6879      	ldr	r1, [r7, #4]
 8004006:	f04f 0200 	mov.w	r2, #0
 800400a:	f04f 0300 	mov.w	r3, #0
 800400e:	e9c1 2300 	strd	r2, r3, [r1]
 8004012:	6879      	ldr	r1, [r7, #4]
 8004014:	f04f 0200 	mov.w	r2, #0
 8004018:	f04f 0300 	mov.w	r3, #0
 800401c:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2200      	movs	r2, #0
 8004024:	741a      	strb	r2, [r3, #16]
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	4618      	mov	r0, r3
 800402a:	370c      	adds	r7, #12
 800402c:	46bd      	mov	sp, r7
 800402e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004032:	4770      	bx	lr

08004034 <_ZN19ArduinoJson6101_11012ParsedNumberIdyEC1Eyb>:
  ParsedNumber(TUInt value, bool is_negative)
 8004034:	b580      	push	{r7, lr}
 8004036:	b084      	sub	sp, #16
 8004038:	af00      	add	r7, sp, #0
 800403a:	60f8      	str	r0, [r7, #12]
 800403c:	e9c7 2300 	strd	r2, r3, [r7]
      : uintValue(value),
 8004040:	68f9      	ldr	r1, [r7, #12]
 8004042:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004046:	e9c1 2300 	strd	r2, r3, [r1]
        floatValue(TFloat(value)),
 800404a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800404e:	f7fc fb2d 	bl	80006ac <__aeabi_ul2d>
 8004052:	4602      	mov	r2, r0
 8004054:	460b      	mov	r3, r1
 8004056:	68f9      	ldr	r1, [r7, #12]
 8004058:	e9c1 2302 	strd	r2, r3, [r1, #8]
        _type(uint8_t(is_negative ? VALUE_IS_NEGATIVE_INTEGER
 800405c:	7e3b      	ldrb	r3, [r7, #24]
 800405e:	2b00      	cmp	r3, #0
 8004060:	d001      	beq.n	8004066 <_ZN19ArduinoJson6101_11012ParsedNumberIdyEC1Eyb+0x32>
 8004062:	2207      	movs	r2, #7
 8004064:	e000      	b.n	8004068 <_ZN19ArduinoJson6101_11012ParsedNumberIdyEC1Eyb+0x34>
 8004066:	2206      	movs	r2, #6
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	741a      	strb	r2, [r3, #16]
                                  : VALUE_IS_POSITIVE_INTEGER)) {}
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	4618      	mov	r0, r3
 8004070:	3710      	adds	r7, #16
 8004072:	46bd      	mov	sp, r7
 8004074:	bd80      	pop	{r7, pc}

08004076 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE10make_floatIiEEddT_>:
  static T make_float(T m, TExponent e) {
 8004076:	b580      	push	{r7, lr}
 8004078:	b086      	sub	sp, #24
 800407a:	af00      	add	r7, sp, #0
 800407c:	ed87 0b02 	vstr	d0, [r7, #8]
 8004080:	6078      	str	r0, [r7, #4]
    if (e > 0) {
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	2b00      	cmp	r3, #0
 8004086:	dd1d      	ble.n	80040c4 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE10make_floatIiEEddT_+0x4e>
      for (uint8_t index = 0; e != 0; index++) {
 8004088:	2300      	movs	r3, #0
 800408a:	75fb      	strb	r3, [r7, #23]
 800408c:	e016      	b.n	80040bc <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE10make_floatIiEEddT_+0x46>
        if (e & 1) m *= positiveBinaryPowerOfTen(index);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	f003 0301 	and.w	r3, r3, #1
 8004094:	2b00      	cmp	r3, #0
 8004096:	d00b      	beq.n	80040b0 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE10make_floatIiEEddT_+0x3a>
 8004098:	7dfb      	ldrb	r3, [r7, #23]
 800409a:	4618      	mov	r0, r3
 800409c:	f000 f8c2 	bl	8004224 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24positiveBinaryPowerOfTenEi>
 80040a0:	eeb0 6b40 	vmov.f64	d6, d0
 80040a4:	ed97 7b02 	vldr	d7, [r7, #8]
 80040a8:	ee27 7b06 	vmul.f64	d7, d7, d6
 80040ac:	ed87 7b02 	vstr	d7, [r7, #8]
        e >>= 1;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	105b      	asrs	r3, r3, #1
 80040b4:	607b      	str	r3, [r7, #4]
      for (uint8_t index = 0; e != 0; index++) {
 80040b6:	7dfb      	ldrb	r3, [r7, #23]
 80040b8:	3301      	adds	r3, #1
 80040ba:	75fb      	strb	r3, [r7, #23]
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d1e5      	bne.n	800408e <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE10make_floatIiEEddT_+0x18>
 80040c2:	e01f      	b.n	8004104 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE10make_floatIiEEddT_+0x8e>
      e = TExponent(-e);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	425b      	negs	r3, r3
 80040c8:	607b      	str	r3, [r7, #4]
      for (uint8_t index = 0; e != 0; index++) {
 80040ca:	2300      	movs	r3, #0
 80040cc:	75bb      	strb	r3, [r7, #22]
 80040ce:	e016      	b.n	80040fe <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE10make_floatIiEEddT_+0x88>
        if (e & 1) m *= negativeBinaryPowerOfTen(index);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	f003 0301 	and.w	r3, r3, #1
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d00b      	beq.n	80040f2 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE10make_floatIiEEddT_+0x7c>
 80040da:	7dbb      	ldrb	r3, [r7, #22]
 80040dc:	4618      	mov	r0, r3
 80040de:	f000 f905 	bl	80042ec <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi>
 80040e2:	eeb0 6b40 	vmov.f64	d6, d0
 80040e6:	ed97 7b02 	vldr	d7, [r7, #8]
 80040ea:	ee27 7b06 	vmul.f64	d7, d7, d6
 80040ee:	ed87 7b02 	vstr	d7, [r7, #8]
        e >>= 1;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	105b      	asrs	r3, r3, #1
 80040f6:	607b      	str	r3, [r7, #4]
      for (uint8_t index = 0; e != 0; index++) {
 80040f8:	7dbb      	ldrb	r3, [r7, #22]
 80040fa:	3301      	adds	r3, #1
 80040fc:	75bb      	strb	r3, [r7, #22]
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	2b00      	cmp	r3, #0
 8004102:	d1e5      	bne.n	80040d0 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE10make_floatIiEEddT_+0x5a>
    return m;
 8004104:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004108:	ec43 2b17 	vmov	d7, r2, r3
  }
 800410c:	eeb0 0b47 	vmov.f64	d0, d7
 8004110:	3718      	adds	r7, #24
 8004112:	46bd      	mov	sp, r7
 8004114:	bd80      	pop	{r7, pc}

08004116 <_ZN19ArduinoJson6101_11023canStorePositiveIntegerImyEENS_9enable_ifIXaasrNS_11is_integralIT_EE5valuelestS3_stT0_EbE4typeES5_>:
canStorePositiveInteger(TIn value) {
 8004116:	b5b0      	push	{r4, r5, r7, lr}
 8004118:	b082      	sub	sp, #8
 800411a:	af00      	add	r7, sp, #0
 800411c:	e9c7 0100 	strd	r0, r1, [r7]
  return value <= TIn(numeric_limits<TOut>::highest());
 8004120:	f000 f853 	bl	80041ca <_ZN19ArduinoJson6101_11014numeric_limitsImvE7highestEv>
 8004124:	4603      	mov	r3, r0
 8004126:	2200      	movs	r2, #0
 8004128:	461c      	mov	r4, r3
 800412a:	4615      	mov	r5, r2
 800412c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004130:	4294      	cmp	r4, r2
 8004132:	eb75 0303 	sbcs.w	r3, r5, r3
 8004136:	bf2c      	ite	cs
 8004138:	2301      	movcs	r3, #1
 800413a:	2300      	movcc	r3, #0
 800413c:	b2db      	uxtb	r3, r3
}
 800413e:	4618      	mov	r0, r3
 8004140:	3708      	adds	r7, #8
 8004142:	46bd      	mov	sp, r7
 8004144:	bdb0      	pop	{r4, r5, r7, pc}

08004146 <_ZN19ArduinoJson6101_11023canStoreNegativeIntegerImyEENS_9enable_ifIXaasrNS_11is_integralIT_EE5valuesrNS_11is_unsignedIS3_EE5valueEbE4typeET0_>:
canStoreNegativeInteger(TIn) {
 8004146:	b480      	push	{r7}
 8004148:	b083      	sub	sp, #12
 800414a:	af00      	add	r7, sp, #0
 800414c:	e9c7 0100 	strd	r0, r1, [r7]
  return false;
 8004150:	2300      	movs	r3, #0
}
 8004152:	4618      	mov	r0, r3
 8004154:	370c      	adds	r7, #12
 8004156:	46bd      	mov	sp, r7
 8004158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415c:	4770      	bx	lr

0800415e <_ZNK19ArduinoJson6101_11012ParsedNumberIdyE2asImEET_v>:
  T as() const {
 800415e:	b580      	push	{r7, lr}
 8004160:	b082      	sub	sp, #8
 8004162:	af00      	add	r7, sp, #0
 8004164:	6078      	str	r0, [r7, #4]
    switch (_type) {
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	7c1b      	ldrb	r3, [r3, #16]
 800416a:	2b08      	cmp	r3, #8
 800416c:	d017      	beq.n	800419e <_ZNK19ArduinoJson6101_11012ParsedNumberIdyE2asImEET_v+0x40>
 800416e:	2b08      	cmp	r3, #8
 8004170:	dc1e      	bgt.n	80041b0 <_ZNK19ArduinoJson6101_11012ParsedNumberIdyE2asImEET_v+0x52>
 8004172:	2b06      	cmp	r3, #6
 8004174:	d00a      	beq.n	800418c <_ZNK19ArduinoJson6101_11012ParsedNumberIdyE2asImEET_v+0x2e>
 8004176:	2b07      	cmp	r3, #7
 8004178:	d11a      	bne.n	80041b0 <_ZNK19ArduinoJson6101_11012ParsedNumberIdyE2asImEET_v+0x52>
        return convertNegativeInteger<T>(uintValue);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004180:	4610      	mov	r0, r2
 8004182:	4619      	mov	r1, r3
 8004184:	f7ff fe9a 	bl	8003ebc <_ZN19ArduinoJson6101_11022convertNegativeIntegerImyEET_T0_>
 8004188:	4603      	mov	r3, r0
 800418a:	e012      	b.n	80041b2 <_ZNK19ArduinoJson6101_11012ParsedNumberIdyE2asImEET_v+0x54>
        return convertPositiveInteger<T>(uintValue);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004192:	4610      	mov	r0, r2
 8004194:	4619      	mov	r1, r3
 8004196:	f7ff fe7e 	bl	8003e96 <_ZN19ArduinoJson6101_11022convertPositiveIntegerImyEET_T0_>
 800419a:	4603      	mov	r3, r0
 800419c:	e009      	b.n	80041b2 <_ZNK19ArduinoJson6101_11012ParsedNumberIdyE2asImEET_v+0x54>
        return convertFloat<T>(floatValue);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	ed93 7b02 	vldr	d7, [r3, #8]
 80041a4:	eeb0 0b47 	vmov.f64	d0, d7
 80041a8:	f7ff feb0 	bl	8003f0c <_ZN19ArduinoJson6101_11012convertFloatImdEENS_9enable_ifIXntsrNS_17is_floating_pointIT_EE5valueES3_E4typeET0_>
 80041ac:	4603      	mov	r3, r0
 80041ae:	e000      	b.n	80041b2 <_ZNK19ArduinoJson6101_11012ParsedNumberIdyE2asImEET_v+0x54>
        return 0;
 80041b0:	2300      	movs	r3, #0
  }
 80041b2:	4618      	mov	r0, r3
 80041b4:	3708      	adds	r7, #8
 80041b6:	46bd      	mov	sp, r7
 80041b8:	bd80      	pop	{r7, pc}

080041ba <_ZN19ArduinoJson6101_11014numeric_limitsImvE6lowestEv>:
template <typename T, typename Enable = void>
struct numeric_limits;

template <typename T>
struct numeric_limits<T, typename enable_if<is_unsigned<T>::value>::type> {
  static T lowest() {
 80041ba:	b480      	push	{r7}
 80041bc:	af00      	add	r7, sp, #0
    return 0;
 80041be:	2300      	movs	r3, #0
  }
 80041c0:	4618      	mov	r0, r3
 80041c2:	46bd      	mov	sp, r7
 80041c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c8:	4770      	bx	lr

080041ca <_ZN19ArduinoJson6101_11014numeric_limitsImvE7highestEv>:
  static T highest() {
 80041ca:	b480      	push	{r7}
 80041cc:	af00      	add	r7, sp, #0
    return T(-1);
 80041ce:	f04f 33ff 	mov.w	r3, #4294967295
  }
 80041d2:	4618      	mov	r0, r3
 80041d4:	46bd      	mov	sp, r7
 80041d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041da:	4770      	bx	lr

080041dc <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE5forgeEmm>:
  }

  // constructs a double floating point values from its binary representation
  // we use this function to workaround platforms with single precision literals
  // (for example, when -fsingle-precision-constant is passed to GCC)
  static T forge(uint32_t msb, uint32_t lsb) {
 80041dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80041e0:	b082      	sub	sp, #8
 80041e2:	af00      	add	r7, sp, #0
 80041e4:	6078      	str	r0, [r7, #4]
 80041e6:	6039      	str	r1, [r7, #0]
    return alias_cast<T>((uint64_t(msb) << 32) | lsb);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2200      	movs	r2, #0
 80041ec:	469a      	mov	sl, r3
 80041ee:	4693      	mov	fp, r2
 80041f0:	f04f 0200 	mov.w	r2, #0
 80041f4:	f04f 0300 	mov.w	r3, #0
 80041f8:	4653      	mov	r3, sl
 80041fa:	2200      	movs	r2, #0
 80041fc:	6839      	ldr	r1, [r7, #0]
 80041fe:	2000      	movs	r0, #0
 8004200:	460c      	mov	r4, r1
 8004202:	4605      	mov	r5, r0
 8004204:	ea42 0804 	orr.w	r8, r2, r4
 8004208:	ea43 0905 	orr.w	r9, r3, r5
 800420c:	4640      	mov	r0, r8
 800420e:	4649      	mov	r1, r9
 8004210:	f000 f912 	bl	8004438 <_ZN19ArduinoJson6101_11010alias_castIdyEET_T0_>
 8004214:	eeb0 7b40 	vmov.f64	d7, d0
  }
 8004218:	eeb0 0b47 	vmov.f64	d0, d7
 800421c:	3708      	adds	r7, #8
 800421e:	46bd      	mov	sp, r7
 8004220:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08004224 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24positiveBinaryPowerOfTenEi>:
  static T positiveBinaryPowerOfTen(int index) {
 8004224:	b580      	push	{r7, lr}
 8004226:	b082      	sub	sp, #8
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
    static T factors[] = {
 800422c:	4b25      	ldr	r3, [pc, #148]	@ (80042c4 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24positiveBinaryPowerOfTenEi+0xa0>)
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f3bf 8f5b 	dmb	ish
 8004234:	f003 0301 	and.w	r3, r3, #1
 8004238:	2b00      	cmp	r3, #0
 800423a:	bf0c      	ite	eq
 800423c:	2301      	moveq	r3, #1
 800423e:	2300      	movne	r3, #0
 8004240:	b2db      	uxtb	r3, r3
 8004242:	2b00      	cmp	r3, #0
 8004244:	d031      	beq.n	80042aa <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24positiveBinaryPowerOfTenEi+0x86>
 8004246:	481f      	ldr	r0, [pc, #124]	@ (80042c4 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24positiveBinaryPowerOfTenEi+0xa0>)
 8004248:	f00e f956 	bl	80124f8 <__cxa_guard_acquire>
 800424c:	4603      	mov	r3, r0
 800424e:	2b00      	cmp	r3, #0
 8004250:	bf14      	ite	ne
 8004252:	2301      	movne	r3, #1
 8004254:	2300      	moveq	r3, #0
 8004256:	b2db      	uxtb	r3, r3
 8004258:	2b00      	cmp	r3, #0
 800425a:	d026      	beq.n	80042aa <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24positiveBinaryPowerOfTenEi+0x86>
        forge(0x4693B8B5, 0xB5056E17),  // 1e32
 800425c:	491a      	ldr	r1, [pc, #104]	@ (80042c8 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24positiveBinaryPowerOfTenEi+0xa4>)
 800425e:	481b      	ldr	r0, [pc, #108]	@ (80042cc <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24positiveBinaryPowerOfTenEi+0xa8>)
 8004260:	f7ff ffbc 	bl	80041dc <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE5forgeEmm>
 8004264:	eeb0 7b40 	vmov.f64	d7, d0
    static T factors[] = {
 8004268:	4b19      	ldr	r3, [pc, #100]	@ (80042d0 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24positiveBinaryPowerOfTenEi+0xac>)
 800426a:	ed83 7b0a 	vstr	d7, [r3, #40]	@ 0x28
        forge(0x4D384F03, 0xE93FF9F5),  // 1e64
 800426e:	4919      	ldr	r1, [pc, #100]	@ (80042d4 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24positiveBinaryPowerOfTenEi+0xb0>)
 8004270:	4819      	ldr	r0, [pc, #100]	@ (80042d8 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24positiveBinaryPowerOfTenEi+0xb4>)
 8004272:	f7ff ffb3 	bl	80041dc <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE5forgeEmm>
 8004276:	eeb0 7b40 	vmov.f64	d7, d0
    static T factors[] = {
 800427a:	4b15      	ldr	r3, [pc, #84]	@ (80042d0 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24positiveBinaryPowerOfTenEi+0xac>)
 800427c:	ed83 7b0c 	vstr	d7, [r3, #48]	@ 0x30
        forge(0x5A827748, 0xF9301D32),  // 1e128
 8004280:	4916      	ldr	r1, [pc, #88]	@ (80042dc <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24positiveBinaryPowerOfTenEi+0xb8>)
 8004282:	4817      	ldr	r0, [pc, #92]	@ (80042e0 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24positiveBinaryPowerOfTenEi+0xbc>)
 8004284:	f7ff ffaa 	bl	80041dc <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE5forgeEmm>
 8004288:	eeb0 7b40 	vmov.f64	d7, d0
    static T factors[] = {
 800428c:	4b10      	ldr	r3, [pc, #64]	@ (80042d0 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24positiveBinaryPowerOfTenEi+0xac>)
 800428e:	ed83 7b0e 	vstr	d7, [r3, #56]	@ 0x38
        forge(0x75154FDD, 0x7F73BF3C)   // 1e256
 8004292:	4914      	ldr	r1, [pc, #80]	@ (80042e4 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24positiveBinaryPowerOfTenEi+0xc0>)
 8004294:	4814      	ldr	r0, [pc, #80]	@ (80042e8 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24positiveBinaryPowerOfTenEi+0xc4>)
 8004296:	f7ff ffa1 	bl	80041dc <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE5forgeEmm>
 800429a:	eeb0 7b40 	vmov.f64	d7, d0
    static T factors[] = {
 800429e:	4b0c      	ldr	r3, [pc, #48]	@ (80042d0 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24positiveBinaryPowerOfTenEi+0xac>)
 80042a0:	ed83 7b10 	vstr	d7, [r3, #64]	@ 0x40
 80042a4:	4807      	ldr	r0, [pc, #28]	@ (80042c4 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24positiveBinaryPowerOfTenEi+0xa0>)
 80042a6:	f00e f933 	bl	8012510 <__cxa_guard_release>
    return factors[index];
 80042aa:	4a09      	ldr	r2, [pc, #36]	@ (80042d0 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24positiveBinaryPowerOfTenEi+0xac>)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	00db      	lsls	r3, r3, #3
 80042b0:	4413      	add	r3, r2
 80042b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042b6:	ec43 2b17 	vmov	d7, r2, r3
  }
 80042ba:	eeb0 0b47 	vmov.f64	d0, d7
 80042be:	3708      	adds	r7, #8
 80042c0:	46bd      	mov	sp, r7
 80042c2:	bd80      	pop	{r7, pc}
 80042c4:	240004ac 	.word	0x240004ac
 80042c8:	b5056e17 	.word	0xb5056e17
 80042cc:	4693b8b5 	.word	0x4693b8b5
 80042d0:	24000008 	.word	0x24000008
 80042d4:	e93ff9f5 	.word	0xe93ff9f5
 80042d8:	4d384f03 	.word	0x4d384f03
 80042dc:	f9301d32 	.word	0xf9301d32
 80042e0:	5a827748 	.word	0x5a827748
 80042e4:	7f73bf3c 	.word	0x7f73bf3c
 80042e8:	75154fdd 	.word	0x75154fdd

080042ec <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi>:
  static T negativeBinaryPowerOfTen(int index) {
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b082      	sub	sp, #8
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
    static T factors[] = {
 80042f4:	4b3c      	ldr	r3, [pc, #240]	@ (80043e8 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0xfc>)
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f3bf 8f5b 	dmb	ish
 80042fc:	f003 0301 	and.w	r3, r3, #1
 8004300:	2b00      	cmp	r3, #0
 8004302:	bf0c      	ite	eq
 8004304:	2301      	moveq	r3, #1
 8004306:	2300      	movne	r3, #0
 8004308:	b2db      	uxtb	r3, r3
 800430a:	2b00      	cmp	r3, #0
 800430c:	d05e      	beq.n	80043cc <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0xe0>
 800430e:	4836      	ldr	r0, [pc, #216]	@ (80043e8 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0xfc>)
 8004310:	f00e f8f2 	bl	80124f8 <__cxa_guard_acquire>
 8004314:	4603      	mov	r3, r0
 8004316:	2b00      	cmp	r3, #0
 8004318:	bf14      	ite	ne
 800431a:	2301      	movne	r3, #1
 800431c:	2300      	moveq	r3, #0
 800431e:	b2db      	uxtb	r3, r3
 8004320:	2b00      	cmp	r3, #0
 8004322:	d053      	beq.n	80043cc <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0xe0>
        forge(0x3FB99999, 0x9999999A),  // 1e-1
 8004324:	4931      	ldr	r1, [pc, #196]	@ (80043ec <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x100>)
 8004326:	4832      	ldr	r0, [pc, #200]	@ (80043f0 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x104>)
 8004328:	f7ff ff58 	bl	80041dc <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE5forgeEmm>
 800432c:	eeb0 7b40 	vmov.f64	d7, d0
    static T factors[] = {
 8004330:	4b30      	ldr	r3, [pc, #192]	@ (80043f4 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x108>)
 8004332:	ed83 7b00 	vstr	d7, [r3]
        forge(0x3F847AE1, 0x47AE147B),  // 1e-2
 8004336:	4930      	ldr	r1, [pc, #192]	@ (80043f8 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x10c>)
 8004338:	4830      	ldr	r0, [pc, #192]	@ (80043fc <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x110>)
 800433a:	f7ff ff4f 	bl	80041dc <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE5forgeEmm>
 800433e:	eeb0 7b40 	vmov.f64	d7, d0
    static T factors[] = {
 8004342:	4b2c      	ldr	r3, [pc, #176]	@ (80043f4 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x108>)
 8004344:	ed83 7b02 	vstr	d7, [r3, #8]
        forge(0x3F1A36E2, 0xEB1C432D),  // 1e-4
 8004348:	492d      	ldr	r1, [pc, #180]	@ (8004400 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x114>)
 800434a:	482e      	ldr	r0, [pc, #184]	@ (8004404 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x118>)
 800434c:	f7ff ff46 	bl	80041dc <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE5forgeEmm>
 8004350:	eeb0 7b40 	vmov.f64	d7, d0
    static T factors[] = {
 8004354:	4b27      	ldr	r3, [pc, #156]	@ (80043f4 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x108>)
 8004356:	ed83 7b04 	vstr	d7, [r3, #16]
        forge(0x3E45798E, 0xE2308C3A),  // 1e-8
 800435a:	492b      	ldr	r1, [pc, #172]	@ (8004408 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x11c>)
 800435c:	482b      	ldr	r0, [pc, #172]	@ (800440c <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x120>)
 800435e:	f7ff ff3d 	bl	80041dc <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE5forgeEmm>
 8004362:	eeb0 7b40 	vmov.f64	d7, d0
    static T factors[] = {
 8004366:	4b23      	ldr	r3, [pc, #140]	@ (80043f4 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x108>)
 8004368:	ed83 7b06 	vstr	d7, [r3, #24]
        forge(0x3C9CD2B2, 0x97D889BC),  // 1e-16
 800436c:	4928      	ldr	r1, [pc, #160]	@ (8004410 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x124>)
 800436e:	4829      	ldr	r0, [pc, #164]	@ (8004414 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x128>)
 8004370:	f7ff ff34 	bl	80041dc <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE5forgeEmm>
 8004374:	eeb0 7b40 	vmov.f64	d7, d0
    static T factors[] = {
 8004378:	4b1e      	ldr	r3, [pc, #120]	@ (80043f4 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x108>)
 800437a:	ed83 7b08 	vstr	d7, [r3, #32]
        forge(0x3949F623, 0xD5A8A733),  // 1e-32
 800437e:	4926      	ldr	r1, [pc, #152]	@ (8004418 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x12c>)
 8004380:	4826      	ldr	r0, [pc, #152]	@ (800441c <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x130>)
 8004382:	f7ff ff2b 	bl	80041dc <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE5forgeEmm>
 8004386:	eeb0 7b40 	vmov.f64	d7, d0
    static T factors[] = {
 800438a:	4b1a      	ldr	r3, [pc, #104]	@ (80043f4 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x108>)
 800438c:	ed83 7b0a 	vstr	d7, [r3, #40]	@ 0x28
        forge(0x32A50FFD, 0x44F4A73D),  // 1e-64
 8004390:	4923      	ldr	r1, [pc, #140]	@ (8004420 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x134>)
 8004392:	4824      	ldr	r0, [pc, #144]	@ (8004424 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x138>)
 8004394:	f7ff ff22 	bl	80041dc <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE5forgeEmm>
 8004398:	eeb0 7b40 	vmov.f64	d7, d0
    static T factors[] = {
 800439c:	4b15      	ldr	r3, [pc, #84]	@ (80043f4 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x108>)
 800439e:	ed83 7b0c 	vstr	d7, [r3, #48]	@ 0x30
        forge(0x255BBA08, 0xCF8C979D),  // 1e-128
 80043a2:	4921      	ldr	r1, [pc, #132]	@ (8004428 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x13c>)
 80043a4:	4821      	ldr	r0, [pc, #132]	@ (800442c <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x140>)
 80043a6:	f7ff ff19 	bl	80041dc <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE5forgeEmm>
 80043aa:	eeb0 7b40 	vmov.f64	d7, d0
    static T factors[] = {
 80043ae:	4b11      	ldr	r3, [pc, #68]	@ (80043f4 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x108>)
 80043b0:	ed83 7b0e 	vstr	d7, [r3, #56]	@ 0x38
        forge(0x0AC80628, 0x64AC6F43)   // 1e-256
 80043b4:	491e      	ldr	r1, [pc, #120]	@ (8004430 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x144>)
 80043b6:	481f      	ldr	r0, [pc, #124]	@ (8004434 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x148>)
 80043b8:	f7ff ff10 	bl	80041dc <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE5forgeEmm>
 80043bc:	eeb0 7b40 	vmov.f64	d7, d0
    static T factors[] = {
 80043c0:	4b0c      	ldr	r3, [pc, #48]	@ (80043f4 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x108>)
 80043c2:	ed83 7b10 	vstr	d7, [r3, #64]	@ 0x40
 80043c6:	4808      	ldr	r0, [pc, #32]	@ (80043e8 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0xfc>)
 80043c8:	f00e f8a2 	bl	8012510 <__cxa_guard_release>
    return factors[index];
 80043cc:	4a09      	ldr	r2, [pc, #36]	@ (80043f4 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x108>)
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	00db      	lsls	r3, r3, #3
 80043d2:	4413      	add	r3, r2
 80043d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043d8:	ec43 2b17 	vmov	d7, r2, r3
  }
 80043dc:	eeb0 0b47 	vmov.f64	d0, d7
 80043e0:	3708      	adds	r7, #8
 80043e2:	46bd      	mov	sp, r7
 80043e4:	bd80      	pop	{r7, pc}
 80043e6:	bf00      	nop
 80043e8:	240004f8 	.word	0x240004f8
 80043ec:	9999999a 	.word	0x9999999a
 80043f0:	3fb99999 	.word	0x3fb99999
 80043f4:	240004b0 	.word	0x240004b0
 80043f8:	47ae147b 	.word	0x47ae147b
 80043fc:	3f847ae1 	.word	0x3f847ae1
 8004400:	eb1c432d 	.word	0xeb1c432d
 8004404:	3f1a36e2 	.word	0x3f1a36e2
 8004408:	e2308c3a 	.word	0xe2308c3a
 800440c:	3e45798e 	.word	0x3e45798e
 8004410:	97d889bc 	.word	0x97d889bc
 8004414:	3c9cd2b2 	.word	0x3c9cd2b2
 8004418:	d5a8a733 	.word	0xd5a8a733
 800441c:	3949f623 	.word	0x3949f623
 8004420:	44f4a73d 	.word	0x44f4a73d
 8004424:	32a50ffd 	.word	0x32a50ffd
 8004428:	cf8c979d 	.word	0xcf8c979d
 800442c:	255bba08 	.word	0x255bba08
 8004430:	64ac6f43 	.word	0x64ac6f43
 8004434:	0ac80628 	.word	0x0ac80628

08004438 <_ZN19ArduinoJson6101_11010alias_castIdyEET_T0_>:
    T data;
  };
};

template <typename T, typename F>
T alias_cast(F raw_data) {
 8004438:	b480      	push	{r7}
 800443a:	b085      	sub	sp, #20
 800443c:	af00      	add	r7, sp, #0
 800443e:	e9c7 0100 	strd	r0, r1, [r7]
  alias_cast_t<T, F> ac;
  ac.raw = raw_data;
 8004442:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004446:	e9c7 2302 	strd	r2, r3, [r7, #8]
  return ac.data;
 800444a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800444e:	ec43 2b17 	vmov	d7, r2, r3
}
 8004452:	eeb0 0b47 	vmov.f64	d0, d7
 8004456:	3714      	adds	r7, #20
 8004458:	46bd      	mov	sp, r7
 800445a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445e:	4770      	bx	lr

08004460 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8004460:	b590      	push	{r4, r7, lr}
 8004462:	b083      	sub	sp, #12
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
 8004468:	6039      	str	r1, [r7, #0]
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	2b01      	cmp	r3, #1
 800446e:	d12a      	bne.n	80044c6 <_Z41__static_initialization_and_destruction_0ii+0x66>
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004476:	4293      	cmp	r3, r2
 8004478:	d125      	bne.n	80044c6 <_Z41__static_initialization_and_destruction_0ii+0x66>
std::string strJson;
 800447a:	481c      	ldr	r0, [pc, #112]	@ (80044ec <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 800447c:	f00e f8ed 	bl	801265a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
DynamicJsonDocument doc(JSON_BUFF_SIZE);
 8004480:	4622      	mov	r2, r4
 8004482:	f242 7110 	movw	r1, #10000	@ 0x2710
 8004486:	481a      	ldr	r0, [pc, #104]	@ (80044f0 <_Z41__static_initialization_and_destruction_0ii+0x90>)
 8004488:	f7fe fa16 	bl	80028b8 <_ZN19ArduinoJson6101_11017BasicJsonDocumentINS_16DefaultAllocatorEEC1EjS1_>
  FORCE_INLINE ObjectRef() : base_type(0), _pool(0) {}
 800448c:	4b19      	ldr	r3, [pc, #100]	@ (80044f4 <_Z41__static_initialization_and_destruction_0ii+0x94>)
 800448e:	2100      	movs	r1, #0
 8004490:	4618      	mov	r0, r3
 8004492:	f7fe f9eb 	bl	800286c <_ZN19ArduinoJson6101_11013ObjectRefBaseINS_14CollectionDataEEC1EPS1_>
 8004496:	4b17      	ldr	r3, [pc, #92]	@ (80044f4 <_Z41__static_initialization_and_destruction_0ii+0x94>)
 8004498:	2200      	movs	r2, #0
 800449a:	605a      	str	r2, [r3, #4]
 800449c:	4b16      	ldr	r3, [pc, #88]	@ (80044f8 <_Z41__static_initialization_and_destruction_0ii+0x98>)
 800449e:	2100      	movs	r1, #0
 80044a0:	4618      	mov	r0, r3
 80044a2:	f7fe f9e3 	bl	800286c <_ZN19ArduinoJson6101_11013ObjectRefBaseINS_14CollectionDataEEC1EPS1_>
 80044a6:	4b14      	ldr	r3, [pc, #80]	@ (80044f8 <_Z41__static_initialization_and_destruction_0ii+0x98>)
 80044a8:	2200      	movs	r2, #0
 80044aa:	605a      	str	r2, [r3, #4]
RemoraComms* comms = new RemoraComms(SPI1);
 80044ac:	2120      	movs	r1, #32
 80044ae:	f44f 7008 	mov.w	r0, #544	@ 0x220
 80044b2:	f00e f841 	bl	8012538 <_ZnwjSt11align_val_t>
 80044b6:	4603      	mov	r3, r0
 80044b8:	461c      	mov	r4, r3
 80044ba:	4910      	ldr	r1, [pc, #64]	@ (80044fc <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 80044bc:	4620      	mov	r0, r4
 80044be:	f000 fc05 	bl	8004ccc <_ZN11RemoraCommsC1EP11SPI_TypeDef>
 80044c2:	4b0f      	ldr	r3, [pc, #60]	@ (8004500 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 80044c4:	601c      	str	r4, [r3, #0]
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d10a      	bne.n	80044e2 <_Z41__static_initialization_and_destruction_0ii+0x82>
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80044d2:	4293      	cmp	r3, r2
 80044d4:	d105      	bne.n	80044e2 <_Z41__static_initialization_and_destruction_0ii+0x82>
DynamicJsonDocument doc(JSON_BUFF_SIZE);
 80044d6:	4806      	ldr	r0, [pc, #24]	@ (80044f0 <_Z41__static_initialization_and_destruction_0ii+0x90>)
 80044d8:	f000 f814 	bl	8004504 <_ZN19ArduinoJson6101_11017BasicJsonDocumentINS_16DefaultAllocatorEED1Ev>
std::string strJson;
 80044dc:	4803      	ldr	r0, [pc, #12]	@ (80044ec <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 80044de:	f00e f8c3 	bl	8012668 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
}
 80044e2:	bf00      	nop
 80044e4:	370c      	adds	r7, #12
 80044e6:	46bd      	mov	sp, r7
 80044e8:	bd90      	pop	{r4, r7, pc}
 80044ea:	bf00      	nop
 80044ec:	24000344 	.word	0x24000344
 80044f0:	24000360 	.word	0x24000360
 80044f4:	24000388 	.word	0x24000388
 80044f8:	24000390 	.word	0x24000390
 80044fc:	40013000 	.word	0x40013000
 8004500:	24000398 	.word	0x24000398

08004504 <_ZN19ArduinoJson6101_11017BasicJsonDocumentINS_16DefaultAllocatorEED1Ev>:
  ~BasicJsonDocument() {
 8004504:	b580      	push	{r7, lr}
 8004506:	b082      	sub	sp, #8
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
    freePool();
 800450c:	6878      	ldr	r0, [r7, #4]
 800450e:	f000 f805 	bl	800451c <_ZN19ArduinoJson6101_11017BasicJsonDocumentINS_16DefaultAllocatorEE8freePoolEv>
  }
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	4618      	mov	r0, r3
 8004516:	3708      	adds	r7, #8
 8004518:	46bd      	mov	sp, r7
 800451a:	bd80      	pop	{r7, pc}

0800451c <_ZN19ArduinoJson6101_11017BasicJsonDocumentINS_16DefaultAllocatorEE8freePoolEv>:
    if (requiredSize <= capacity()) return;
    freePool();
    replacePool(allocPool(addPadding(requiredSize)));
  }

  void freePool() {
 800451c:	b590      	push	{r4, r7, lr}
 800451e:	b083      	sub	sp, #12
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
    this->deallocate(memoryPool().buffer());
 8004524:	687c      	ldr	r4, [r7, #4]
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	3308      	adds	r3, #8
 800452a:	4618      	mov	r0, r3
 800452c:	f7fc fe41 	bl	80011b2 <_ZN19ArduinoJson6101_11012JsonDocument10memoryPoolEv>
 8004530:	4603      	mov	r3, r0
 8004532:	4618      	mov	r0, r3
 8004534:	f7fc fbcd 	bl	8000cd2 <_ZN19ArduinoJson6101_11010MemoryPool6bufferEv>
 8004538:	4603      	mov	r3, r0
 800453a:	4619      	mov	r1, r3
 800453c:	4620      	mov	r0, r4
 800453e:	f000 f804 	bl	800454a <_ZN19ArduinoJson6101_11014AllocatorOwnerINS_16DefaultAllocatorEE10deallocateEPv>
  }
 8004542:	bf00      	nop
 8004544:	370c      	adds	r7, #12
 8004546:	46bd      	mov	sp, r7
 8004548:	bd90      	pop	{r4, r7, pc}

0800454a <_ZN19ArduinoJson6101_11014AllocatorOwnerINS_16DefaultAllocatorEE10deallocateEPv>:
  void deallocate(void* p) {
 800454a:	b580      	push	{r7, lr}
 800454c:	b082      	sub	sp, #8
 800454e:	af00      	add	r7, sp, #0
 8004550:	6078      	str	r0, [r7, #4]
 8004552:	6039      	str	r1, [r7, #0]
    _allocator.deallocate(p);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	6839      	ldr	r1, [r7, #0]
 8004558:	4618      	mov	r0, r3
 800455a:	f7fc fe6b 	bl	8001234 <_ZN19ArduinoJson6101_11016DefaultAllocator10deallocateEPv>
  }
 800455e:	bf00      	nop
 8004560:	3708      	adds	r7, #8
 8004562:	46bd      	mov	sp, r7
 8004564:	bd80      	pop	{r7, pc}

08004566 <_GLOBAL__sub_I_EXTI4_IRQHandler>:
 8004566:	b580      	push	{r7, lr}
 8004568:	af00      	add	r7, sp, #0
 800456a:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800456e:	2001      	movs	r0, #1
 8004570:	f7ff ff76 	bl	8004460 <_Z41__static_initialization_and_destruction_0ii>
 8004574:	bd80      	pop	{r7, pc}

08004576 <_GLOBAL__sub_D_EXTI4_IRQHandler>:
 8004576:	b580      	push	{r7, lr}
 8004578:	af00      	add	r7, sp, #0
 800457a:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800457e:	2000      	movs	r0, #0
 8004580:	f7ff ff6e 	bl	8004460 <_Z41__static_initialization_and_destruction_0ii>
 8004584:	bd80      	pop	{r7, pc}
	...

08004588 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004588:	b480      	push	{r7}
 800458a:	b083      	sub	sp, #12
 800458c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800458e:	4b0a      	ldr	r3, [pc, #40]	@ (80045b8 <HAL_MspInit+0x30>)
 8004590:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004594:	4a08      	ldr	r2, [pc, #32]	@ (80045b8 <HAL_MspInit+0x30>)
 8004596:	f043 0302 	orr.w	r3, r3, #2
 800459a:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800459e:	4b06      	ldr	r3, [pc, #24]	@ (80045b8 <HAL_MspInit+0x30>)
 80045a0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80045a4:	f003 0302 	and.w	r3, r3, #2
 80045a8:	607b      	str	r3, [r7, #4]
 80045aa:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80045ac:	bf00      	nop
 80045ae:	370c      	adds	r7, #12
 80045b0:	46bd      	mov	sp, r7
 80045b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b6:	4770      	bx	lr
 80045b8:	58024400 	.word	0x58024400

080045bc <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80045bc:	b580      	push	{r7, lr}
 80045be:	b0bc      	sub	sp, #240	@ 0xf0
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80045c4:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80045c8:	2200      	movs	r2, #0
 80045ca:	601a      	str	r2, [r3, #0]
 80045cc:	605a      	str	r2, [r3, #4]
 80045ce:	609a      	str	r2, [r3, #8]
 80045d0:	60da      	str	r2, [r3, #12]
 80045d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80045d4:	f107 0318 	add.w	r3, r7, #24
 80045d8:	22c0      	movs	r2, #192	@ 0xc0
 80045da:	2100      	movs	r1, #0
 80045dc:	4618      	mov	r0, r3
 80045de:	f00e fc9b 	bl	8012f18 <memset>
  if(hsd->Instance==SDMMC1)
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	4a3c      	ldr	r2, [pc, #240]	@ (80046d8 <HAL_SD_MspInit+0x11c>)
 80045e8:	4293      	cmp	r3, r2
 80045ea:	d171      	bne.n	80046d0 <HAL_SD_MspInit+0x114>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 80045ec:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80045f0:	f04f 0300 	mov.w	r3, #0
 80045f4:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 80045f8:	2300      	movs	r3, #0
 80045fa:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80045fc:	f107 0318 	add.w	r3, r7, #24
 8004600:	4618      	mov	r0, r3
 8004602:	f005 f8b3 	bl	800976c <HAL_RCCEx_PeriphCLKConfig>
 8004606:	4603      	mov	r3, r0
 8004608:	2b00      	cmp	r3, #0
 800460a:	d001      	beq.n	8004610 <HAL_SD_MspInit+0x54>
    {
      Error_Handler();
 800460c:	f7fe f8dc 	bl	80027c8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8004610:	4b32      	ldr	r3, [pc, #200]	@ (80046dc <HAL_SD_MspInit+0x120>)
 8004612:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8004616:	4a31      	ldr	r2, [pc, #196]	@ (80046dc <HAL_SD_MspInit+0x120>)
 8004618:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800461c:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 8004620:	4b2e      	ldr	r3, [pc, #184]	@ (80046dc <HAL_SD_MspInit+0x120>)
 8004622:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8004626:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800462a:	617b      	str	r3, [r7, #20]
 800462c:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800462e:	4b2b      	ldr	r3, [pc, #172]	@ (80046dc <HAL_SD_MspInit+0x120>)
 8004630:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004634:	4a29      	ldr	r2, [pc, #164]	@ (80046dc <HAL_SD_MspInit+0x120>)
 8004636:	f043 0304 	orr.w	r3, r3, #4
 800463a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800463e:	4b27      	ldr	r3, [pc, #156]	@ (80046dc <HAL_SD_MspInit+0x120>)
 8004640:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004644:	f003 0304 	and.w	r3, r3, #4
 8004648:	613b      	str	r3, [r7, #16]
 800464a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800464c:	4b23      	ldr	r3, [pc, #140]	@ (80046dc <HAL_SD_MspInit+0x120>)
 800464e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004652:	4a22      	ldr	r2, [pc, #136]	@ (80046dc <HAL_SD_MspInit+0x120>)
 8004654:	f043 0308 	orr.w	r3, r3, #8
 8004658:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800465c:	4b1f      	ldr	r3, [pc, #124]	@ (80046dc <HAL_SD_MspInit+0x120>)
 800465e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004662:	f003 0308 	and.w	r3, r3, #8
 8004666:	60fb      	str	r3, [r7, #12]
 8004668:	68fb      	ldr	r3, [r7, #12]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 800466a:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 800466e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004672:	2302      	movs	r3, #2
 8004674:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004678:	2300      	movs	r3, #0
 800467a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800467e:	2303      	movs	r3, #3
 8004680:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8004684:	230c      	movs	r3, #12
 8004686:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800468a:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800468e:	4619      	mov	r1, r3
 8004690:	4813      	ldr	r0, [pc, #76]	@ (80046e0 <HAL_SD_MspInit+0x124>)
 8004692:	f003 fe9b 	bl	80083cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8004696:	2304      	movs	r3, #4
 8004698:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800469c:	2302      	movs	r3, #2
 800469e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046a2:	2300      	movs	r3, #0
 80046a4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80046a8:	2303      	movs	r3, #3
 80046aa:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 80046ae:	230c      	movs	r3, #12
 80046b0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80046b4:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80046b8:	4619      	mov	r1, r3
 80046ba:	480a      	ldr	r0, [pc, #40]	@ (80046e4 <HAL_SD_MspInit+0x128>)
 80046bc:	f003 fe86 	bl	80083cc <HAL_GPIO_Init>

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 0, 0);
 80046c0:	2200      	movs	r2, #0
 80046c2:	2100      	movs	r1, #0
 80046c4:	2031      	movs	r0, #49	@ 0x31
 80046c6:	f002 f906 	bl	80068d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 80046ca:	2031      	movs	r0, #49	@ 0x31
 80046cc:	f002 f91d 	bl	800690a <HAL_NVIC_EnableIRQ>

  /* USER CODE END SDMMC1_MspInit 1 */

  }

}
 80046d0:	bf00      	nop
 80046d2:	37f0      	adds	r7, #240	@ 0xf0
 80046d4:	46bd      	mov	sp, r7
 80046d6:	bd80      	pop	{r7, pc}
 80046d8:	52007000 	.word	0x52007000
 80046dc:	58024400 	.word	0x58024400
 80046e0:	58020800 	.word	0x58020800
 80046e4:	58020c00 	.word	0x58020c00

080046e8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80046e8:	b580      	push	{r7, lr}
 80046ea:	b0ba      	sub	sp, #232	@ 0xe8
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80046f0:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80046f4:	2200      	movs	r2, #0
 80046f6:	601a      	str	r2, [r3, #0]
 80046f8:	605a      	str	r2, [r3, #4]
 80046fa:	609a      	str	r2, [r3, #8]
 80046fc:	60da      	str	r2, [r3, #12]
 80046fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004700:	f107 0310 	add.w	r3, r7, #16
 8004704:	22c0      	movs	r2, #192	@ 0xc0
 8004706:	2100      	movs	r1, #0
 8004708:	4618      	mov	r0, r3
 800470a:	f00e fc05 	bl	8012f18 <memset>
  if(huart->Instance==USART1)
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	4a27      	ldr	r2, [pc, #156]	@ (80047b0 <HAL_UART_MspInit+0xc8>)
 8004714:	4293      	cmp	r3, r2
 8004716:	d146      	bne.n	80047a6 <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8004718:	f04f 0201 	mov.w	r2, #1
 800471c:	f04f 0300 	mov.w	r3, #0
 8004720:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8004724:	2300      	movs	r3, #0
 8004726:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800472a:	f107 0310 	add.w	r3, r7, #16
 800472e:	4618      	mov	r0, r3
 8004730:	f005 f81c 	bl	800976c <HAL_RCCEx_PeriphCLKConfig>
 8004734:	4603      	mov	r3, r0
 8004736:	2b00      	cmp	r3, #0
 8004738:	d001      	beq.n	800473e <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 800473a:	f7fe f845 	bl	80027c8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800473e:	4b1d      	ldr	r3, [pc, #116]	@ (80047b4 <HAL_UART_MspInit+0xcc>)
 8004740:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004744:	4a1b      	ldr	r2, [pc, #108]	@ (80047b4 <HAL_UART_MspInit+0xcc>)
 8004746:	f043 0310 	orr.w	r3, r3, #16
 800474a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800474e:	4b19      	ldr	r3, [pc, #100]	@ (80047b4 <HAL_UART_MspInit+0xcc>)
 8004750:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004754:	f003 0310 	and.w	r3, r3, #16
 8004758:	60fb      	str	r3, [r7, #12]
 800475a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800475c:	4b15      	ldr	r3, [pc, #84]	@ (80047b4 <HAL_UART_MspInit+0xcc>)
 800475e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004762:	4a14      	ldr	r2, [pc, #80]	@ (80047b4 <HAL_UART_MspInit+0xcc>)
 8004764:	f043 0301 	orr.w	r3, r3, #1
 8004768:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800476c:	4b11      	ldr	r3, [pc, #68]	@ (80047b4 <HAL_UART_MspInit+0xcc>)
 800476e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004772:	f003 0301 	and.w	r3, r3, #1
 8004776:	60bb      	str	r3, [r7, #8]
 8004778:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800477a:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800477e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004782:	2302      	movs	r3, #2
 8004784:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004788:	2300      	movs	r3, #0
 800478a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800478e:	2300      	movs	r3, #0
 8004790:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004794:	2307      	movs	r3, #7
 8004796:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800479a:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800479e:	4619      	mov	r1, r3
 80047a0:	4805      	ldr	r0, [pc, #20]	@ (80047b8 <HAL_UART_MspInit+0xd0>)
 80047a2:	f003 fe13 	bl	80083cc <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 80047a6:	bf00      	nop
 80047a8:	37e8      	adds	r7, #232	@ 0xe8
 80047aa:	46bd      	mov	sp, r7
 80047ac:	bd80      	pop	{r7, pc}
 80047ae:	bf00      	nop
 80047b0:	40011000 	.word	0x40011000
 80047b4:	58024400 	.word	0x58024400
 80047b8:	58020000 	.word	0x58020000

080047bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80047bc:	b480      	push	{r7}
 80047be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80047c0:	bf00      	nop
 80047c2:	e7fd      	b.n	80047c0 <NMI_Handler+0x4>

080047c4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80047c4:	b480      	push	{r7}
 80047c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80047c8:	bf00      	nop
 80047ca:	e7fd      	b.n	80047c8 <HardFault_Handler+0x4>

080047cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80047cc:	b480      	push	{r7}
 80047ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80047d0:	bf00      	nop
 80047d2:	e7fd      	b.n	80047d0 <MemManage_Handler+0x4>

080047d4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80047d4:	b480      	push	{r7}
 80047d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80047d8:	bf00      	nop
 80047da:	e7fd      	b.n	80047d8 <BusFault_Handler+0x4>

080047dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80047dc:	b480      	push	{r7}
 80047de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80047e0:	bf00      	nop
 80047e2:	e7fd      	b.n	80047e0 <UsageFault_Handler+0x4>

080047e4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80047e4:	b480      	push	{r7}
 80047e6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80047e8:	bf00      	nop
 80047ea:	46bd      	mov	sp, r7
 80047ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f0:	4770      	bx	lr

080047f2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80047f2:	b480      	push	{r7}
 80047f4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80047f6:	bf00      	nop
 80047f8:	46bd      	mov	sp, r7
 80047fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fe:	4770      	bx	lr

08004800 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004800:	b480      	push	{r7}
 8004802:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004804:	bf00      	nop
 8004806:	46bd      	mov	sp, r7
 8004808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480c:	4770      	bx	lr

0800480e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800480e:	b580      	push	{r7, lr}
 8004810:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004812:	f001 ff1f 	bl	8006654 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004816:	bf00      	nop
 8004818:	bd80      	pop	{r7, pc}
	...

0800481c <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 800481c:	b580      	push	{r7, lr}
 800481e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 8004820:	4802      	ldr	r0, [pc, #8]	@ (800482c <SDMMC1_IRQHandler+0x10>)
 8004822:	f007 ff11 	bl	800c648 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 8004826:	bf00      	nop
 8004828:	bd80      	pop	{r7, pc}
 800482a:	bf00      	nop
 800482c:	2400039c 	.word	0x2400039c

08004830 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004830:	b480      	push	{r7}
 8004832:	af00      	add	r7, sp, #0
	return 1;
 8004834:	2301      	movs	r3, #1
}
 8004836:	4618      	mov	r0, r3
 8004838:	46bd      	mov	sp, r7
 800483a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483e:	4770      	bx	lr

08004840 <_kill>:

int _kill(int pid, int sig)
{
 8004840:	b580      	push	{r7, lr}
 8004842:	b082      	sub	sp, #8
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]
 8004848:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800484a:	f00e fc07 	bl	801305c <__errno>
 800484e:	4603      	mov	r3, r0
 8004850:	2216      	movs	r2, #22
 8004852:	601a      	str	r2, [r3, #0]
	return -1;
 8004854:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004858:	4618      	mov	r0, r3
 800485a:	3708      	adds	r7, #8
 800485c:	46bd      	mov	sp, r7
 800485e:	bd80      	pop	{r7, pc}

08004860 <_exit>:

void _exit (int status)
{
 8004860:	b580      	push	{r7, lr}
 8004862:	b082      	sub	sp, #8
 8004864:	af00      	add	r7, sp, #0
 8004866:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8004868:	f04f 31ff 	mov.w	r1, #4294967295
 800486c:	6878      	ldr	r0, [r7, #4]
 800486e:	f7ff ffe7 	bl	8004840 <_kill>
	while (1) {}		/* Make sure we hang here */
 8004872:	bf00      	nop
 8004874:	e7fd      	b.n	8004872 <_exit+0x12>

08004876 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004876:	b580      	push	{r7, lr}
 8004878:	b086      	sub	sp, #24
 800487a:	af00      	add	r7, sp, #0
 800487c:	60f8      	str	r0, [r7, #12]
 800487e:	60b9      	str	r1, [r7, #8]
 8004880:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004882:	2300      	movs	r3, #0
 8004884:	617b      	str	r3, [r7, #20]
 8004886:	e00a      	b.n	800489e <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8004888:	f3af 8000 	nop.w
 800488c:	4601      	mov	r1, r0
 800488e:	68bb      	ldr	r3, [r7, #8]
 8004890:	1c5a      	adds	r2, r3, #1
 8004892:	60ba      	str	r2, [r7, #8]
 8004894:	b2ca      	uxtb	r2, r1
 8004896:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004898:	697b      	ldr	r3, [r7, #20]
 800489a:	3301      	adds	r3, #1
 800489c:	617b      	str	r3, [r7, #20]
 800489e:	697a      	ldr	r2, [r7, #20]
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	429a      	cmp	r2, r3
 80048a4:	dbf0      	blt.n	8004888 <_read+0x12>
	}

return len;
 80048a6:	687b      	ldr	r3, [r7, #4]
}
 80048a8:	4618      	mov	r0, r3
 80048aa:	3718      	adds	r7, #24
 80048ac:	46bd      	mov	sp, r7
 80048ae:	bd80      	pop	{r7, pc}

080048b0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80048b0:	b580      	push	{r7, lr}
 80048b2:	b086      	sub	sp, #24
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	60f8      	str	r0, [r7, #12]
 80048b8:	60b9      	str	r1, [r7, #8]
 80048ba:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80048bc:	2300      	movs	r3, #0
 80048be:	617b      	str	r3, [r7, #20]
 80048c0:	e009      	b.n	80048d6 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80048c2:	68bb      	ldr	r3, [r7, #8]
 80048c4:	1c5a      	adds	r2, r3, #1
 80048c6:	60ba      	str	r2, [r7, #8]
 80048c8:	781b      	ldrb	r3, [r3, #0]
 80048ca:	4618      	mov	r0, r3
 80048cc:	f7fc ff60 	bl	8001790 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80048d0:	697b      	ldr	r3, [r7, #20]
 80048d2:	3301      	adds	r3, #1
 80048d4:	617b      	str	r3, [r7, #20]
 80048d6:	697a      	ldr	r2, [r7, #20]
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	429a      	cmp	r2, r3
 80048dc:	dbf1      	blt.n	80048c2 <_write+0x12>
	}
	return len;
 80048de:	687b      	ldr	r3, [r7, #4]
}
 80048e0:	4618      	mov	r0, r3
 80048e2:	3718      	adds	r7, #24
 80048e4:	46bd      	mov	sp, r7
 80048e6:	bd80      	pop	{r7, pc}

080048e8 <_close>:

int _close(int file)
{
 80048e8:	b480      	push	{r7}
 80048ea:	b083      	sub	sp, #12
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
	return -1;
 80048f0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80048f4:	4618      	mov	r0, r3
 80048f6:	370c      	adds	r7, #12
 80048f8:	46bd      	mov	sp, r7
 80048fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fe:	4770      	bx	lr

08004900 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004900:	b480      	push	{r7}
 8004902:	b083      	sub	sp, #12
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]
 8004908:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800490a:	683b      	ldr	r3, [r7, #0]
 800490c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004910:	605a      	str	r2, [r3, #4]
	return 0;
 8004912:	2300      	movs	r3, #0
}
 8004914:	4618      	mov	r0, r3
 8004916:	370c      	adds	r7, #12
 8004918:	46bd      	mov	sp, r7
 800491a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491e:	4770      	bx	lr

08004920 <_isatty>:

int _isatty(int file)
{
 8004920:	b480      	push	{r7}
 8004922:	b083      	sub	sp, #12
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
	return 1;
 8004928:	2301      	movs	r3, #1
}
 800492a:	4618      	mov	r0, r3
 800492c:	370c      	adds	r7, #12
 800492e:	46bd      	mov	sp, r7
 8004930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004934:	4770      	bx	lr

08004936 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004936:	b480      	push	{r7}
 8004938:	b085      	sub	sp, #20
 800493a:	af00      	add	r7, sp, #0
 800493c:	60f8      	str	r0, [r7, #12]
 800493e:	60b9      	str	r1, [r7, #8]
 8004940:	607a      	str	r2, [r7, #4]
	return 0;
 8004942:	2300      	movs	r3, #0
}
 8004944:	4618      	mov	r0, r3
 8004946:	3714      	adds	r7, #20
 8004948:	46bd      	mov	sp, r7
 800494a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494e:	4770      	bx	lr

08004950 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004950:	b580      	push	{r7, lr}
 8004952:	b086      	sub	sp, #24
 8004954:	af00      	add	r7, sp, #0
 8004956:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004958:	4a14      	ldr	r2, [pc, #80]	@ (80049ac <_sbrk+0x5c>)
 800495a:	4b15      	ldr	r3, [pc, #84]	@ (80049b0 <_sbrk+0x60>)
 800495c:	1ad3      	subs	r3, r2, r3
 800495e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004960:	697b      	ldr	r3, [r7, #20]
 8004962:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004964:	4b13      	ldr	r3, [pc, #76]	@ (80049b4 <_sbrk+0x64>)
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	2b00      	cmp	r3, #0
 800496a:	d102      	bne.n	8004972 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800496c:	4b11      	ldr	r3, [pc, #68]	@ (80049b4 <_sbrk+0x64>)
 800496e:	4a12      	ldr	r2, [pc, #72]	@ (80049b8 <_sbrk+0x68>)
 8004970:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004972:	4b10      	ldr	r3, [pc, #64]	@ (80049b4 <_sbrk+0x64>)
 8004974:	681a      	ldr	r2, [r3, #0]
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	4413      	add	r3, r2
 800497a:	693a      	ldr	r2, [r7, #16]
 800497c:	429a      	cmp	r2, r3
 800497e:	d207      	bcs.n	8004990 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004980:	f00e fb6c 	bl	801305c <__errno>
 8004984:	4603      	mov	r3, r0
 8004986:	220c      	movs	r2, #12
 8004988:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800498a:	f04f 33ff 	mov.w	r3, #4294967295
 800498e:	e009      	b.n	80049a4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004990:	4b08      	ldr	r3, [pc, #32]	@ (80049b4 <_sbrk+0x64>)
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004996:	4b07      	ldr	r3, [pc, #28]	@ (80049b4 <_sbrk+0x64>)
 8004998:	681a      	ldr	r2, [r3, #0]
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	4413      	add	r3, r2
 800499e:	4a05      	ldr	r2, [pc, #20]	@ (80049b4 <_sbrk+0x64>)
 80049a0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80049a2:	68fb      	ldr	r3, [r7, #12]
}
 80049a4:	4618      	mov	r0, r3
 80049a6:	3718      	adds	r7, #24
 80049a8:	46bd      	mov	sp, r7
 80049aa:	bd80      	pop	{r7, pc}
 80049ac:	24080000 	.word	0x24080000
 80049b0:	00000400 	.word	0x00000400
 80049b4:	240004fc 	.word	0x240004fc
 80049b8:	24000d10 	.word	0x24000d10

080049bc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80049bc:	b480      	push	{r7}
 80049be:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80049c0:	4b37      	ldr	r3, [pc, #220]	@ (8004aa0 <SystemInit+0xe4>)
 80049c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049c6:	4a36      	ldr	r2, [pc, #216]	@ (8004aa0 <SystemInit+0xe4>)
 80049c8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80049cc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80049d0:	4b34      	ldr	r3, [pc, #208]	@ (8004aa4 <SystemInit+0xe8>)
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f003 030f 	and.w	r3, r3, #15
 80049d8:	2b06      	cmp	r3, #6
 80049da:	d807      	bhi.n	80049ec <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80049dc:	4b31      	ldr	r3, [pc, #196]	@ (8004aa4 <SystemInit+0xe8>)
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f023 030f 	bic.w	r3, r3, #15
 80049e4:	4a2f      	ldr	r2, [pc, #188]	@ (8004aa4 <SystemInit+0xe8>)
 80049e6:	f043 0307 	orr.w	r3, r3, #7
 80049ea:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80049ec:	4b2e      	ldr	r3, [pc, #184]	@ (8004aa8 <SystemInit+0xec>)
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	4a2d      	ldr	r2, [pc, #180]	@ (8004aa8 <SystemInit+0xec>)
 80049f2:	f043 0301 	orr.w	r3, r3, #1
 80049f6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80049f8:	4b2b      	ldr	r3, [pc, #172]	@ (8004aa8 <SystemInit+0xec>)
 80049fa:	2200      	movs	r2, #0
 80049fc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80049fe:	4b2a      	ldr	r3, [pc, #168]	@ (8004aa8 <SystemInit+0xec>)
 8004a00:	681a      	ldr	r2, [r3, #0]
 8004a02:	4929      	ldr	r1, [pc, #164]	@ (8004aa8 <SystemInit+0xec>)
 8004a04:	4b29      	ldr	r3, [pc, #164]	@ (8004aac <SystemInit+0xf0>)
 8004a06:	4013      	ands	r3, r2
 8004a08:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8004a0a:	4b26      	ldr	r3, [pc, #152]	@ (8004aa4 <SystemInit+0xe8>)
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f003 0308 	and.w	r3, r3, #8
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d007      	beq.n	8004a26 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8004a16:	4b23      	ldr	r3, [pc, #140]	@ (8004aa4 <SystemInit+0xe8>)
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f023 030f 	bic.w	r3, r3, #15
 8004a1e:	4a21      	ldr	r2, [pc, #132]	@ (8004aa4 <SystemInit+0xe8>)
 8004a20:	f043 0307 	orr.w	r3, r3, #7
 8004a24:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8004a26:	4b20      	ldr	r3, [pc, #128]	@ (8004aa8 <SystemInit+0xec>)
 8004a28:	2200      	movs	r2, #0
 8004a2a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8004a2c:	4b1e      	ldr	r3, [pc, #120]	@ (8004aa8 <SystemInit+0xec>)
 8004a2e:	2200      	movs	r2, #0
 8004a30:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8004a32:	4b1d      	ldr	r3, [pc, #116]	@ (8004aa8 <SystemInit+0xec>)
 8004a34:	2200      	movs	r2, #0
 8004a36:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8004a38:	4b1b      	ldr	r3, [pc, #108]	@ (8004aa8 <SystemInit+0xec>)
 8004a3a:	4a1d      	ldr	r2, [pc, #116]	@ (8004ab0 <SystemInit+0xf4>)
 8004a3c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8004a3e:	4b1a      	ldr	r3, [pc, #104]	@ (8004aa8 <SystemInit+0xec>)
 8004a40:	4a1c      	ldr	r2, [pc, #112]	@ (8004ab4 <SystemInit+0xf8>)
 8004a42:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8004a44:	4b18      	ldr	r3, [pc, #96]	@ (8004aa8 <SystemInit+0xec>)
 8004a46:	4a1c      	ldr	r2, [pc, #112]	@ (8004ab8 <SystemInit+0xfc>)
 8004a48:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8004a4a:	4b17      	ldr	r3, [pc, #92]	@ (8004aa8 <SystemInit+0xec>)
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8004a50:	4b15      	ldr	r3, [pc, #84]	@ (8004aa8 <SystemInit+0xec>)
 8004a52:	4a19      	ldr	r2, [pc, #100]	@ (8004ab8 <SystemInit+0xfc>)
 8004a54:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8004a56:	4b14      	ldr	r3, [pc, #80]	@ (8004aa8 <SystemInit+0xec>)
 8004a58:	2200      	movs	r2, #0
 8004a5a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8004a5c:	4b12      	ldr	r3, [pc, #72]	@ (8004aa8 <SystemInit+0xec>)
 8004a5e:	4a16      	ldr	r2, [pc, #88]	@ (8004ab8 <SystemInit+0xfc>)
 8004a60:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8004a62:	4b11      	ldr	r3, [pc, #68]	@ (8004aa8 <SystemInit+0xec>)
 8004a64:	2200      	movs	r2, #0
 8004a66:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8004a68:	4b0f      	ldr	r3, [pc, #60]	@ (8004aa8 <SystemInit+0xec>)
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	4a0e      	ldr	r2, [pc, #56]	@ (8004aa8 <SystemInit+0xec>)
 8004a6e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004a72:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8004a74:	4b0c      	ldr	r3, [pc, #48]	@ (8004aa8 <SystemInit+0xec>)
 8004a76:	2200      	movs	r2, #0
 8004a78:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8004a7a:	4b10      	ldr	r3, [pc, #64]	@ (8004abc <SystemInit+0x100>)
 8004a7c:	681a      	ldr	r2, [r3, #0]
 8004a7e:	4b10      	ldr	r3, [pc, #64]	@ (8004ac0 <SystemInit+0x104>)
 8004a80:	4013      	ands	r3, r2
 8004a82:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004a86:	d202      	bcs.n	8004a8e <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8004a88:	4b0e      	ldr	r3, [pc, #56]	@ (8004ac4 <SystemInit+0x108>)
 8004a8a:	2201      	movs	r2, #1
 8004a8c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8004a8e:	4b0e      	ldr	r3, [pc, #56]	@ (8004ac8 <SystemInit+0x10c>)
 8004a90:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8004a94:	601a      	str	r2, [r3, #0]
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/

}
 8004a96:	bf00      	nop
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9e:	4770      	bx	lr
 8004aa0:	e000ed00 	.word	0xe000ed00
 8004aa4:	52002000 	.word	0x52002000
 8004aa8:	58024400 	.word	0x58024400
 8004aac:	eaf6ed7f 	.word	0xeaf6ed7f
 8004ab0:	02020200 	.word	0x02020200
 8004ab4:	01ff0000 	.word	0x01ff0000
 8004ab8:	01010280 	.word	0x01010280
 8004abc:	5c001000 	.word	0x5c001000
 8004ac0:	ffff0000 	.word	0xffff0000
 8004ac4:	51008108 	.word	0x51008108
 8004ac8:	52004000 	.word	0x52004000

08004acc <_ZN6ModuleC1Ev>:
#include "module.h"

#include <cstdio>

Module::Module()
 8004acc:	b580      	push	{r7, lr}
 8004ace:	b082      	sub	sp, #8
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	6078      	str	r0, [r7, #4]
 8004ad4:	4a08      	ldr	r2, [pc, #32]	@ (8004af8 <_ZN6ModuleC1Ev+0x2c>)
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	601a      	str	r2, [r3, #0]
{
	this->counter = 0;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	2200      	movs	r2, #0
 8004ade:	611a      	str	r2, [r3, #16]
	this->updateCount = 1;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2201      	movs	r2, #1
 8004ae4:	60da      	str	r2, [r3, #12]
	printf("\nCreating a std module\n");
 8004ae6:	4805      	ldr	r0, [pc, #20]	@ (8004afc <_ZN6ModuleC1Ev+0x30>)
 8004ae8:	f00e f91c 	bl	8012d24 <puts>
}
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	4618      	mov	r0, r3
 8004af0:	3708      	adds	r7, #8
 8004af2:	46bd      	mov	sp, r7
 8004af4:	bd80      	pop	{r7, pc}
 8004af6:	bf00      	nop
 8004af8:	08014048 	.word	0x08014048
 8004afc:	08013ea4 	.word	0x08013ea4

08004b00 <_ZN6ModuleD1Ev>:
	this->counter = 0;
	this->updateCount = this->threadFreq / this->slowUpdateFreq;
	printf("\nCreating a slower module, updating every %ld thread cycles\n",this->updateCount);
}

Module::~Module(){}
 8004b00:	b480      	push	{r7}
 8004b02:	b083      	sub	sp, #12
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	6078      	str	r0, [r7, #4]
 8004b08:	4a04      	ldr	r2, [pc, #16]	@ (8004b1c <_ZN6ModuleD1Ev+0x1c>)
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	601a      	str	r2, [r3, #0]
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	4618      	mov	r0, r3
 8004b12:	370c      	adds	r7, #12
 8004b14:	46bd      	mov	sp, r7
 8004b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1a:	4770      	bx	lr
 8004b1c:	08014048 	.word	0x08014048

08004b20 <_ZN6ModuleD0Ev>:
 8004b20:	b580      	push	{r7, lr}
 8004b22:	b082      	sub	sp, #8
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	6078      	str	r0, [r7, #4]
 8004b28:	6878      	ldr	r0, [r7, #4]
 8004b2a:	f7ff ffe9 	bl	8004b00 <_ZN6ModuleD1Ev>
 8004b2e:	2114      	movs	r1, #20
 8004b30:	6878      	ldr	r0, [r7, #4]
 8004b32:	f00d fcdc 	bl	80124ee <_ZdlPvj>
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	4618      	mov	r0, r3
 8004b3a:	3708      	adds	r7, #8
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	bd80      	pop	{r7, pc}

08004b40 <_ZN6Module9runModuleEv>:


void Module::runModule()
{
 8004b40:	b580      	push	{r7, lr}
 8004b42:	b082      	sub	sp, #8
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]
	++this->counter;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	691b      	ldr	r3, [r3, #16]
 8004b4c:	1c5a      	adds	r2, r3, #1
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	611a      	str	r2, [r3, #16]

	if (this->counter >= this->updateCount)
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	691a      	ldr	r2, [r3, #16]
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	68db      	ldr	r3, [r3, #12]
 8004b5a:	429a      	cmp	r2, r3
 8004b5c:	db08      	blt.n	8004b70 <_ZN6Module9runModuleEv+0x30>
	{
		this->slowUpdate();
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	3310      	adds	r3, #16
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	6878      	ldr	r0, [r7, #4]
 8004b68:	4798      	blx	r3
		this->counter = 0;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	611a      	str	r2, [r3, #16]
	}

	this->update();
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	3308      	adds	r3, #8
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	6878      	ldr	r0, [r7, #4]
 8004b7a:	4798      	blx	r3
}
 8004b7c:	bf00      	nop
 8004b7e:	3708      	adds	r7, #8
 8004b80:	46bd      	mov	sp, r7
 8004b82:	bd80      	pop	{r7, pc}

08004b84 <_ZN6Module13runModulePostEv>:


void Module::runModulePost()
{
 8004b84:	b580      	push	{r7, lr}
 8004b86:	b082      	sub	sp, #8
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]
	this->updatePost();
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	330c      	adds	r3, #12
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	6878      	ldr	r0, [r7, #4]
 8004b96:	4798      	blx	r3
}
 8004b98:	bf00      	nop
 8004b9a:	3708      	adds	r7, #8
 8004b9c:	46bd      	mov	sp, r7
 8004b9e:	bd80      	pop	{r7, pc}

08004ba0 <_ZN6Module6updateEv>:

void Module::update(){}
 8004ba0:	b480      	push	{r7}
 8004ba2:	b083      	sub	sp, #12
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	6078      	str	r0, [r7, #4]
 8004ba8:	bf00      	nop
 8004baa:	370c      	adds	r7, #12
 8004bac:	46bd      	mov	sp, r7
 8004bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb2:	4770      	bx	lr

08004bb4 <_ZN6Module10updatePostEv>:
void Module::updatePost(){}
 8004bb4:	b480      	push	{r7}
 8004bb6:	b083      	sub	sp, #12
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	6078      	str	r0, [r7, #4]
 8004bbc:	bf00      	nop
 8004bbe:	370c      	adds	r7, #12
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc6:	4770      	bx	lr

08004bc8 <_ZN6Module10slowUpdateEv>:
void Module::slowUpdate(){}
 8004bc8:	b480      	push	{r7}
 8004bca:	b083      	sub	sp, #12
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	6078      	str	r0, [r7, #4]
 8004bd0:	bf00      	nop
 8004bd2:	370c      	adds	r7, #12
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bda:	4770      	bx	lr

08004bdc <_ZN6Module9configureEv>:
void Module::configure(){}
 8004bdc:	b480      	push	{r7}
 8004bde:	b083      	sub	sp, #12
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	6078      	str	r0, [r7, #4]
 8004be4:	bf00      	nop
 8004be6:	370c      	adds	r7, #12
 8004be8:	46bd      	mov	sp, r7
 8004bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bee:	4770      	bx	lr

08004bf0 <_ZN6Module15handleInterruptEv>:
void Module::handleInterrupt(){}
 8004bf0:	b480      	push	{r7}
 8004bf2:	b083      	sub	sp, #12
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	6078      	str	r0, [r7, #4]
 8004bf8:	bf00      	nop
 8004bfa:	370c      	adds	r7, #12
 8004bfc:	46bd      	mov	sp, r7
 8004bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c02:	4770      	bx	lr

08004c04 <_ZN15ModuleInterruptC1E9IRQn_TypeP6ModuleMS1_FvvE>:
#include "../interrupt/interrupt.h"
#include "moduleInterrupt.h"
#include "module.h"


ModuleInterrupt::ModuleInterrupt(IRQn_Type interruptNumber, Module* ownerptr, void (Module::*handler)())
 8004c04:	b082      	sub	sp, #8
 8004c06:	b580      	push	{r7, lr}
 8004c08:	b084      	sub	sp, #16
 8004c0a:	af00      	add	r7, sp, #0
 8004c0c:	60f8      	str	r0, [r7, #12]
 8004c0e:	607a      	str	r2, [r7, #4]
 8004c10:	61fb      	str	r3, [r7, #28]
 8004c12:	460b      	mov	r3, r1
 8004c14:	817b      	strh	r3, [r7, #10]
    : InterruptOwnerPtr(ownerptr),
	  InterruptHandler(handler)
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	4618      	mov	r0, r3
 8004c1a:	f7fb ff09 	bl	8000a30 <_ZN9InterruptC1Ev>
 8004c1e:	4a0e      	ldr	r2, [pc, #56]	@ (8004c58 <_ZN15ModuleInterruptC1E9IRQn_TypeP6ModuleMS1_FvvE+0x54>)
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	601a      	str	r2, [r3, #0]
    : InterruptOwnerPtr(ownerptr),
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	687a      	ldr	r2, [r7, #4]
 8004c28:	605a      	str	r2, [r3, #4]
	  InterruptHandler(handler)
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	3308      	adds	r3, #8
 8004c2e:	f107 021c 	add.w	r2, r7, #28
 8004c32:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004c36:	e883 0003 	stmia.w	r3, {r0, r1}
	// Allows interrupt to access owner's data
	//InterruptOwnerPtr = owner;

	// When a device interrupt object is instantiated, the Register function must be called to let the
	// Interrupt base class know that there is an appropriate ISR function for the given interrupt.
	Interrupt::Register(interruptNumber, this);
 8004c3a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8004c3e:	68fa      	ldr	r2, [r7, #12]
 8004c40:	4611      	mov	r1, r2
 8004c42:	4618      	mov	r0, r3
 8004c44:	f7fb ff04 	bl	8000a50 <_ZN9Interrupt8RegisterEiPS_>
}
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	3710      	adds	r7, #16
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004c54:	b002      	add	sp, #8
 8004c56:	4770      	bx	lr
 8004c58:	0801406c 	.word	0x0801406c

08004c5c <_ZN15ModuleInterrupt11ISR_HandlerEv>:


void ModuleInterrupt::ISR_Handler(void)
{
 8004c5c:	b580      	push	{r7, lr}
 8004c5e:	b082      	sub	sp, #8
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	6078      	str	r0, [r7, #4]
	//this->InterruptOwnerPtr->handleInterrupt();

    if (this->InterruptOwnerPtr && this->InterruptHandler) {
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	685b      	ldr	r3, [r3, #4]
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d02a      	beq.n	8004cc2 <_ZN15ModuleInterrupt11ISR_HandlerEv+0x66>
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	689b      	ldr	r3, [r3, #8]
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d107      	bne.n	8004c84 <_ZN15ModuleInterrupt11ISR_HandlerEv+0x28>
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	68db      	ldr	r3, [r3, #12]
 8004c78:	f003 0301 	and.w	r3, r3, #1
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d101      	bne.n	8004c84 <_ZN15ModuleInterrupt11ISR_HandlerEv+0x28>
 8004c80:	2301      	movs	r3, #1
 8004c82:	e000      	b.n	8004c86 <_ZN15ModuleInterrupt11ISR_HandlerEv+0x2a>
 8004c84:	2300      	movs	r3, #0
 8004c86:	2b01      	cmp	r3, #1
 8004c88:	d01b      	beq.n	8004cc2 <_ZN15ModuleInterrupt11ISR_HandlerEv+0x66>
        (this->InterruptOwnerPtr->*InterruptHandler)(); // Call the member function of the owner
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	68db      	ldr	r3, [r3, #12]
 8004c8e:	f003 0301 	and.w	r3, r3, #1
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d102      	bne.n	8004c9c <_ZN15ModuleInterrupt11ISR_HandlerEv+0x40>
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	689b      	ldr	r3, [r3, #8]
 8004c9a:	e00a      	b.n	8004cb2 <_ZN15ModuleInterrupt11ISR_HandlerEv+0x56>
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	685b      	ldr	r3, [r3, #4]
 8004ca0:	687a      	ldr	r2, [r7, #4]
 8004ca2:	68d2      	ldr	r2, [r2, #12]
 8004ca4:	1052      	asrs	r2, r2, #1
 8004ca6:	4413      	add	r3, r2
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	687a      	ldr	r2, [r7, #4]
 8004cac:	6892      	ldr	r2, [r2, #8]
 8004cae:	4413      	add	r3, r2
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	687a      	ldr	r2, [r7, #4]
 8004cb4:	6852      	ldr	r2, [r2, #4]
 8004cb6:	6879      	ldr	r1, [r7, #4]
 8004cb8:	68c9      	ldr	r1, [r1, #12]
 8004cba:	1049      	asrs	r1, r1, #1
 8004cbc:	440a      	add	r2, r1
 8004cbe:	4610      	mov	r0, r2
 8004cc0:	4798      	blx	r3
    }
}
 8004cc2:	bf00      	nop
 8004cc4:	3708      	adds	r7, #8
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	bd80      	pop	{r7, pc}
	...

08004ccc <_ZN11RemoraCommsC1EP11SPI_TypeDef>:

/**
 * @brief Constructs a new RemoraComms object.
 * @param spiType Pointer to the SPI instance.
 */
RemoraComms::RemoraComms(SPI_TypeDef* spiType) :
 8004ccc:	b580      	push	{r7, lr}
 8004cce:	b082      	sub	sp, #8
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	6078      	str	r0, [r7, #4]
 8004cd4:	6039      	str	r1, [r7, #0]
    spiType(spiType)
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	4618      	mov	r0, r3
 8004cda:	f7ff fef7 	bl	8004acc <_ZN6ModuleC1Ev>
 8004cde:	4a0c      	ldr	r2, [pc, #48]	@ (8004d10 <_ZN11RemoraCommsC1EP11SPI_TypeDef+0x44>)
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	601a      	str	r2, [r3, #0]
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	683a      	ldr	r2, [r7, #0]
 8004ce8:	615a      	str	r2, [r3, #20]
{
    this->spiHandle.Instance = this->spiType;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	695a      	ldr	r2, [r3, #20]
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	635a      	str	r2, [r3, #52]	@ 0x34

    this->irqNss = EXTI4_IRQn;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	220a      	movs	r2, #10
 8004cf6:	859a      	strh	r2, [r3, #44]	@ 0x2c
    this->irqDMAtx = DMA1_Stream0_IRQn;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	220b      	movs	r2, #11
 8004cfc:	861a      	strh	r2, [r3, #48]	@ 0x30
    this->irqDMArx = DMA1_Stream1_IRQn;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	220c      	movs	r2, #12
 8004d02:	85da      	strh	r2, [r3, #46]	@ 0x2e

    // Note: Avoid performing complex initialization here as this constructor is called before DMA and cache setup.
}
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	4618      	mov	r0, r3
 8004d08:	3708      	adds	r7, #8
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	bd80      	pop	{r7, pc}
 8004d0e:	bf00      	nop
 8004d10:	08014078 	.word	0x08014078

08004d14 <_ZN11RemoraComms4initEv>:
 * @brief Initializes the SPI, GPIO, and DMA configurations.
 *
 * Configures SPI as a slave device with associated GPIO and DMA settings.
 */
void RemoraComms::init()
{
 8004d14:	b580      	push	{r7, lr}
 8004d16:	b08a      	sub	sp, #40	@ 0x28
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004d1c:	f107 0314 	add.w	r3, r7, #20
 8004d20:	2200      	movs	r2, #0
 8004d22:	601a      	str	r2, [r3, #0]
 8004d24:	605a      	str	r2, [r3, #4]
 8004d26:	609a      	str	r2, [r3, #8]
 8004d28:	60da      	str	r2, [r3, #12]
 8004d2a:	611a      	str	r2, [r3, #16]

    if(this->spiHandle.Instance == SPI1)
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004d30:	4a8f      	ldr	r2, [pc, #572]	@ (8004f70 <_ZN11RemoraComms4initEv+0x25c>)
 8004d32:	4293      	cmp	r3, r2
 8004d34:	f040 8117 	bne.w	8004f66 <_ZN11RemoraComms4initEv+0x252>
    {
    	// Interrupt pin is the NSS pin
        // Configure GPIO pin : PA_4

        __HAL_RCC_GPIOC_CLK_ENABLE();
 8004d38:	4b8e      	ldr	r3, [pc, #568]	@ (8004f74 <_ZN11RemoraComms4initEv+0x260>)
 8004d3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004d3e:	4a8d      	ldr	r2, [pc, #564]	@ (8004f74 <_ZN11RemoraComms4initEv+0x260>)
 8004d40:	f043 0304 	orr.w	r3, r3, #4
 8004d44:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004d48:	4b8a      	ldr	r3, [pc, #552]	@ (8004f74 <_ZN11RemoraComms4initEv+0x260>)
 8004d4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004d4e:	f003 0304 	and.w	r3, r3, #4
 8004d52:	613b      	str	r3, [r7, #16]
 8004d54:	693b      	ldr	r3, [r7, #16]

        GPIO_InitStruct.Pin = GPIO_PIN_4;
 8004d56:	2310      	movs	r3, #16
 8004d58:	617b      	str	r3, [r7, #20]
        GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004d5a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8004d5e:	61bb      	str	r3, [r7, #24]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d60:	2300      	movs	r3, #0
 8004d62:	61fb      	str	r3, [r7, #28]
        HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004d64:	f107 0314 	add.w	r3, r7, #20
 8004d68:	4619      	mov	r1, r3
 8004d6a:	4883      	ldr	r0, [pc, #524]	@ (8004f78 <_ZN11RemoraComms4initEv+0x264>)
 8004d6c:	f003 fb2e 	bl	80083cc <HAL_GPIO_Init>

        printf("	Initialising SPI1 slave\n");
 8004d70:	4882      	ldr	r0, [pc, #520]	@ (8004f7c <_ZN11RemoraComms4initEv+0x268>)
 8004d72:	f00d ffd7 	bl	8012d24 <puts>

        this->spiHandle.Init.Mode           		= SPI_MODE_SLAVE;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	2200      	movs	r2, #0
 8004d7a:	639a      	str	r2, [r3, #56]	@ 0x38
        this->spiHandle.Init.Direction      		= SPI_DIRECTION_2LINES;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2200      	movs	r2, #0
 8004d80:	63da      	str	r2, [r3, #60]	@ 0x3c
        this->spiHandle.Init.DataSize       		= SPI_DATASIZE_8BIT;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	2207      	movs	r2, #7
 8004d86:	641a      	str	r2, [r3, #64]	@ 0x40
        this->spiHandle.Init.CLKPolarity    		= SPI_POLARITY_LOW;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	645a      	str	r2, [r3, #68]	@ 0x44
        this->spiHandle.Init.CLKPhase       		= SPI_PHASE_1EDGE;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	2200      	movs	r2, #0
 8004d92:	649a      	str	r2, [r3, #72]	@ 0x48
        this->spiHandle.Init.NSS            		= SPI_NSS_HARD_INPUT;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	2200      	movs	r2, #0
 8004d98:	64da      	str	r2, [r3, #76]	@ 0x4c
        this->spiHandle.Init.FirstBit       		= SPI_FIRSTBIT_MSB;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	655a      	str	r2, [r3, #84]	@ 0x54
        this->spiHandle.Init.TIMode         		= SPI_TIMODE_DISABLE;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2200      	movs	r2, #0
 8004da4:	659a      	str	r2, [r3, #88]	@ 0x58
        this->spiHandle.Init.CRCCalculation 		= SPI_CRCCALCULATION_DISABLE;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	2200      	movs	r2, #0
 8004daa:	65da      	str	r2, [r3, #92]	@ 0x5c
        this->spiHandle.Init.CRCPolynomial  		= 0x0;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2200      	movs	r2, #0
 8004db0:	661a      	str	r2, [r3, #96]	@ 0x60
        this->spiHandle.Init.NSSPMode 				= SPI_NSS_PULSE_DISABLE;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	2200      	movs	r2, #0
 8004db6:	669a      	str	r2, [r3, #104]	@ 0x68
        this->spiHandle.Init.NSSPolarity 			= SPI_NSS_POLARITY_LOW;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2200      	movs	r2, #0
 8004dbc:	66da      	str	r2, [r3, #108]	@ 0x6c
        this->spiHandle.Init.FifoThreshold 			= SPI_FIFO_THRESHOLD_01DATA;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	2200      	movs	r2, #0
 8004dc2:	671a      	str	r2, [r3, #112]	@ 0x70
        this->spiHandle.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	2200      	movs	r2, #0
 8004dc8:	675a      	str	r2, [r3, #116]	@ 0x74
        this->spiHandle.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	2200      	movs	r2, #0
 8004dce:	679a      	str	r2, [r3, #120]	@ 0x78
        this->spiHandle.Init.MasterSSIdleness 		= SPI_MASTER_SS_IDLENESS_00CYCLE;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	67da      	str	r2, [r3, #124]	@ 0x7c
        this->spiHandle.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	2200      	movs	r2, #0
 8004dda:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        this->spiHandle.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	2200      	movs	r2, #0
 8004de2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        this->spiHandle.Init.MasterKeepIOState 		= SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	2200      	movs	r2, #0
 8004dea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        this->spiHandle.Init.IOSwap 				= SPI_IO_SWAP_DISABLE;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	2200      	movs	r2, #0
 8004df2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        HAL_SPI_Init(&this->spiHandle);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	3334      	adds	r3, #52	@ 0x34
 8004dfa:	4618      	mov	r0, r3
 8004dfc:	f008 fe18 	bl	800da30 <HAL_SPI_Init>

    	// Peripheral clock enable
    	__HAL_RCC_SPI1_CLK_ENABLE();
 8004e00:	4b5c      	ldr	r3, [pc, #368]	@ (8004f74 <_ZN11RemoraComms4initEv+0x260>)
 8004e02:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004e06:	4a5b      	ldr	r2, [pc, #364]	@ (8004f74 <_ZN11RemoraComms4initEv+0x260>)
 8004e08:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004e0c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004e10:	4b58      	ldr	r3, [pc, #352]	@ (8004f74 <_ZN11RemoraComms4initEv+0x260>)
 8004e12:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004e16:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004e1a:	60fb      	str	r3, [r7, #12]
 8004e1c:	68fb      	ldr	r3, [r7, #12]

		printf("	Initialising GPIO for SPI\n");
 8004e1e:	4858      	ldr	r0, [pc, #352]	@ (8004f80 <_ZN11RemoraComms4initEv+0x26c>)
 8004e20:	f00d ff80 	bl	8012d24 <puts>

	    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004e24:	4b53      	ldr	r3, [pc, #332]	@ (8004f74 <_ZN11RemoraComms4initEv+0x260>)
 8004e26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004e2a:	4a52      	ldr	r2, [pc, #328]	@ (8004f74 <_ZN11RemoraComms4initEv+0x260>)
 8004e2c:	f043 0301 	orr.w	r3, r3, #1
 8004e30:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004e34:	4b4f      	ldr	r3, [pc, #316]	@ (8004f74 <_ZN11RemoraComms4initEv+0x260>)
 8004e36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004e3a:	f003 0301 	and.w	r3, r3, #1
 8004e3e:	60bb      	str	r3, [r7, #8]
 8004e40:	68bb      	ldr	r3, [r7, #8]
	    PA4     ------> SPI1_NSS
	    PA5     ------> SPI1_SCK
	    PA6     ------> SPI1_MISO
	    PA7     ------> SPI1_MOSI
	    */
    	GPIO_InitStruct = {0};
 8004e42:	f107 0314 	add.w	r3, r7, #20
 8004e46:	2200      	movs	r2, #0
 8004e48:	601a      	str	r2, [r3, #0]
 8004e4a:	605a      	str	r2, [r3, #4]
 8004e4c:	609a      	str	r2, [r3, #8]
 8004e4e:	60da      	str	r2, [r3, #12]
 8004e50:	611a      	str	r2, [r3, #16]
	    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8004e52:	23f0      	movs	r3, #240	@ 0xf0
 8004e54:	617b      	str	r3, [r7, #20]
	    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e56:	2302      	movs	r3, #2
 8004e58:	61bb      	str	r3, [r7, #24]
	    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e5a:	2300      	movs	r3, #0
 8004e5c:	61fb      	str	r3, [r7, #28]
	    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004e5e:	2300      	movs	r3, #0
 8004e60:	623b      	str	r3, [r7, #32]
	    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8004e62:	2305      	movs	r3, #5
 8004e64:	627b      	str	r3, [r7, #36]	@ 0x24
	    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004e66:	f107 0314 	add.w	r3, r7, #20
 8004e6a:	4619      	mov	r1, r3
 8004e6c:	4842      	ldr	r0, [pc, #264]	@ (8004f78 <_ZN11RemoraComms4initEv+0x264>)
 8004e6e:	f003 faad 	bl	80083cc <HAL_GPIO_Init>

        printf("	Initialising DMA for SPI\n");
 8004e72:	4844      	ldr	r0, [pc, #272]	@ (8004f84 <_ZN11RemoraComms4initEv+0x270>)
 8004e74:	f00d ff56 	bl	8012d24 <puts>

        this->hdma_spi_rx.Instance 					= DMA1_Stream1;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	4a43      	ldr	r2, [pc, #268]	@ (8004f88 <_ZN11RemoraComms4initEv+0x274>)
 8004e7c:	f8c3 2134 	str.w	r2, [r3, #308]	@ 0x134
        this->hdma_spi_rx.Init.Request 				= DMA_REQUEST_SPI1_RX;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2225      	movs	r2, #37	@ 0x25
 8004e84:	f8c3 2138 	str.w	r2, [r3, #312]	@ 0x138
        this->hdma_spi_rx.Init.Direction 			= DMA_PERIPH_TO_MEMORY;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	2200      	movs	r2, #0
 8004e8c:	f8c3 213c 	str.w	r2, [r3, #316]	@ 0x13c
        this->hdma_spi_rx.Init.PeriphInc 			= DMA_PINC_DISABLE;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2200      	movs	r2, #0
 8004e94:	f8c3 2140 	str.w	r2, [r3, #320]	@ 0x140
        this->hdma_spi_rx.Init.MemInc 				= DMA_MINC_ENABLE;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004e9e:	f8c3 2144 	str.w	r2, [r3, #324]	@ 0x144
        this->hdma_spi_rx.Init.PeriphDataAlignment 	= DMA_PDATAALIGN_BYTE;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	2200      	movs	r2, #0
 8004ea6:	f8c3 2148 	str.w	r2, [r3, #328]	@ 0x148
        this->hdma_spi_rx.Init.MemDataAlignment 	= DMA_MDATAALIGN_BYTE;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	2200      	movs	r2, #0
 8004eae:	f8c3 214c 	str.w	r2, [r3, #332]	@ 0x14c
        this->hdma_spi_rx.Init.Mode 				= DMA_CIRCULAR;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004eb8:	f8c3 2150 	str.w	r2, [r3, #336]	@ 0x150
        this->hdma_spi_rx.Init.Priority 			= DMA_PRIORITY_LOW;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	2200      	movs	r2, #0
 8004ec0:	f8c3 2154 	str.w	r2, [r3, #340]	@ 0x154
        this->hdma_spi_rx.Init.FIFOMode 			= DMA_FIFOMODE_DISABLE;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	2200      	movs	r2, #0
 8004ec8:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

        HAL_DMA_Init(&this->hdma_spi_rx);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	f503 739a 	add.w	r3, r3, #308	@ 0x134
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	f001 fdb0 	bl	8006a38 <HAL_DMA_Init>
        __HAL_LINKDMA(&this->spiHandle, hdmarx, this->hdma_spi_rx);
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	f503 729a 	add.w	r2, r3, #308	@ 0x134
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c

        this->hdma_spi_tx.Instance 					= DMA1_Stream0;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	4a26      	ldr	r2, [pc, #152]	@ (8004f8c <_ZN11RemoraComms4initEv+0x278>)
 8004ef4:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        this->hdma_spi_tx.Init.Request 				= DMA_REQUEST_SPI1_TX;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	2226      	movs	r2, #38	@ 0x26
 8004efc:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
        this->hdma_spi_tx.Init.Direction 			= DMA_MEMORY_TO_PERIPH;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2240      	movs	r2, #64	@ 0x40
 8004f04:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        this->hdma_spi_tx.Init.PeriphInc 			= DMA_PINC_DISABLE;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2200      	movs	r2, #0
 8004f0c:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        this->hdma_spi_tx.Init.MemInc 				= DMA_MINC_ENABLE;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004f16:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc
        this->hdma_spi_tx.Init.PeriphDataAlignment 	= DMA_PDATAALIGN_BYTE;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	2200      	movs	r2, #0
 8004f1e:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
        this->hdma_spi_tx.Init.MemDataAlignment 	= DMA_MDATAALIGN_BYTE;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	2200      	movs	r2, #0
 8004f26:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
        this->hdma_spi_tx.Init.Mode 				= DMA_CIRCULAR;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004f30:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8
        this->hdma_spi_tx.Init.Priority 			= DMA_PRIORITY_LOW;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2200      	movs	r2, #0
 8004f38:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
        this->hdma_spi_tx.Init.FIFOMode 			= DMA_FIFOMODE_DISABLE;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	2200      	movs	r2, #0
 8004f40:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0

        HAL_DMA_Init(&this->hdma_spi_tx);
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	33bc      	adds	r3, #188	@ 0xbc
 8004f48:	4618      	mov	r0, r3
 8004f4a:	f001 fd75 	bl	8006a38 <HAL_DMA_Init>
        __HAL_LINKDMA(&this->spiHandle, hdmatx, this->hdma_spi_tx);
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	f103 02bc 	add.w	r2, r3, #188	@ 0xbc
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	f8c3 20f4 	str.w	r2, [r3, #244]	@ 0xf4
    }
}
 8004f66:	bf00      	nop
 8004f68:	3728      	adds	r7, #40	@ 0x28
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	bd80      	pop	{r7, pc}
 8004f6e:	bf00      	nop
 8004f70:	40013000 	.word	0x40013000
 8004f74:	58024400 	.word	0x58024400
 8004f78:	58020000 	.word	0x58020000
 8004f7c:	08013efc 	.word	0x08013efc
 8004f80:	08013f18 	.word	0x08013f18
 8004f84:	08013f34 	.word	0x08013f34
 8004f88:	40020028 	.word	0x40020028
 8004f8c:	40020010 	.word	0x40020010

08004f90 <_ZN11RemoraComms5startEv>:

/**
 * @brief Starts the SPI communication with configured interrupts and DMA buffers.
 */
void RemoraComms::start()
{
 8004f90:	b590      	push	{r4, r7, lr}
 8004f92:	b08b      	sub	sp, #44	@ 0x2c
 8004f94:	af02      	add	r7, sp, #8
 8004f96:	6078      	str	r0, [r7, #4]
    NssInterrupt = new ModuleInterrupt(this->irqNss, this, static_cast<void (Module::*)()>(&RemoraComms::handleNssInterrupt));
 8004f98:	2010      	movs	r0, #16
 8004f9a:	f00d fabc 	bl	8012516 <_Znwj>
 8004f9e:	4603      	mov	r3, r0
 8004fa0:	461c      	mov	r4, r3
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	f9b3 102c 	ldrsh.w	r1, [r3, #44]	@ 0x2c
 8004fa8:	687a      	ldr	r2, [r7, #4]
 8004faa:	4b49      	ldr	r3, [pc, #292]	@ (80050d0 <_ZN11RemoraComms5startEv+0x140>)
 8004fac:	60bb      	str	r3, [r7, #8]
 8004fae:	2300      	movs	r3, #0
 8004fb0:	60fb      	str	r3, [r7, #12]
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	9300      	str	r3, [sp, #0]
 8004fb6:	68bb      	ldr	r3, [r7, #8]
 8004fb8:	4620      	mov	r0, r4
 8004fba:	f7ff fe23 	bl	8004c04 <_ZN15ModuleInterruptC1E9IRQn_TypeP6ModuleMS1_FvvE>
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	621c      	str	r4, [r3, #32]
	HAL_NVIC_SetPriority(this->irqNss, 6, 0);
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	@ 0x2c
 8004fc8:	2200      	movs	r2, #0
 8004fca:	2106      	movs	r1, #6
 8004fcc:	4618      	mov	r0, r3
 8004fce:	f001 fc82 	bl	80068d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(this->irqNss);
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	@ 0x2c
 8004fd8:	4618      	mov	r0, r3
 8004fda:	f001 fc96 	bl	800690a <HAL_NVIC_EnableIRQ>

    dmaRxInterrupt = new ModuleInterrupt(this->irqDMArx, this, static_cast<void (Module::*)()>(&RemoraComms::handleRxInterrupt));
 8004fde:	2010      	movs	r0, #16
 8004fe0:	f00d fa99 	bl	8012516 <_Znwj>
 8004fe4:	4603      	mov	r3, r0
 8004fe6:	461c      	mov	r4, r3
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	f9b3 102e 	ldrsh.w	r1, [r3, #46]	@ 0x2e
 8004fee:	687a      	ldr	r2, [r7, #4]
 8004ff0:	4b38      	ldr	r3, [pc, #224]	@ (80050d4 <_ZN11RemoraComms5startEv+0x144>)
 8004ff2:	613b      	str	r3, [r7, #16]
 8004ff4:	2300      	movs	r3, #0
 8004ff6:	617b      	str	r3, [r7, #20]
 8004ff8:	697b      	ldr	r3, [r7, #20]
 8004ffa:	9300      	str	r3, [sp, #0]
 8004ffc:	693b      	ldr	r3, [r7, #16]
 8004ffe:	4620      	mov	r0, r4
 8005000:	f7ff fe00 	bl	8004c04 <_ZN15ModuleInterruptC1E9IRQn_TypeP6ModuleMS1_FvvE>
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	629c      	str	r4, [r3, #40]	@ 0x28
	HAL_NVIC_SetPriority(this->irqDMArx, 5, 0);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	@ 0x2e
 800500e:	2200      	movs	r2, #0
 8005010:	2105      	movs	r1, #5
 8005012:	4618      	mov	r0, r3
 8005014:	f001 fc5f 	bl	80068d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(this->irqDMArx);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	@ 0x2e
 800501e:	4618      	mov	r0, r3
 8005020:	f001 fc73 	bl	800690a <HAL_NVIC_EnableIRQ>

    dmaTxInterrupt = new ModuleInterrupt(this->irqDMAtx, this, static_cast<void (Module::*)()>(&RemoraComms::handleTxInterrupt));
 8005024:	2010      	movs	r0, #16
 8005026:	f00d fa76 	bl	8012516 <_Znwj>
 800502a:	4603      	mov	r3, r0
 800502c:	461c      	mov	r4, r3
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	f9b3 1030 	ldrsh.w	r1, [r3, #48]	@ 0x30
 8005034:	687a      	ldr	r2, [r7, #4]
 8005036:	4b28      	ldr	r3, [pc, #160]	@ (80050d8 <_ZN11RemoraComms5startEv+0x148>)
 8005038:	61bb      	str	r3, [r7, #24]
 800503a:	2300      	movs	r3, #0
 800503c:	61fb      	str	r3, [r7, #28]
 800503e:	69fb      	ldr	r3, [r7, #28]
 8005040:	9300      	str	r3, [sp, #0]
 8005042:	69bb      	ldr	r3, [r7, #24]
 8005044:	4620      	mov	r0, r4
 8005046:	f7ff fddd 	bl	8004c04 <_ZN15ModuleInterruptC1E9IRQn_TypeP6ModuleMS1_FvvE>
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	625c      	str	r4, [r3, #36]	@ 0x24
    HAL_NVIC_SetPriority(this->irqDMAtx, 4, 0);	// TX needs to be a higher priority than RX
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8005054:	2200      	movs	r2, #0
 8005056:	2104      	movs	r1, #4
 8005058:	4618      	mov	r0, r3
 800505a:	f001 fc3c 	bl	80068d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(this->irqDMAtx);
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8005064:	4618      	mov	r0, r3
 8005066:	f001 fc50 	bl	800690a <HAL_NVIC_EnableIRQ>

	initTxPingPongBuffer(&txPingPongBuffer);
 800506a:	481c      	ldr	r0, [pc, #112]	@ (80050dc <_ZN11RemoraComms5startEv+0x14c>)
 800506c:	f7fd f928 	bl	80022c0 <_Z20initTxPingPongBufferP16TxPingPongBuffer>
	initRxPingPongBuffer(&rxPingPongBuffer);
 8005070:	481b      	ldr	r0, [pc, #108]	@ (80050e0 <_ZN11RemoraComms5startEv+0x150>)
 8005072:	f7fd f917 	bl	80022a4 <_Z20initRxPingPongBufferP16RxPingPongBuffer>

	// Use single buffer for TX
	txBuffer = getCurrentTxBuffer(&txPingPongBuffer);
 8005076:	4819      	ldr	r0, [pc, #100]	@ (80050dc <_ZN11RemoraComms5startEv+0x14c>)
 8005078:	f7fd f952 	bl	8002320 <_Z18getCurrentTxBufferP16TxPingPongBuffer>
 800507c:	4602      	mov	r2, r0
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	61da      	str	r2, [r3, #28]

	// Use alternate buffer in multi-buffer mode for RX
	rxBuffer = getAltRxBuffer(&rxPingPongBuffer);
 8005082:	4817      	ldr	r0, [pc, #92]	@ (80050e0 <_ZN11RemoraComms5startEv+0x150>)
 8005084:	f7fd f95c 	bl	8002340 <_Z14getAltRxBufferP16RxPingPongBuffer>
 8005088:	4602      	mov	r2, r0
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	619a      	str	r2, [r3, #24]


    this->spiHandle.Lock = HAL_UNLOCKED;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	2200      	movs	r2, #0
 8005092:	f883 20b4 	strb.w	r2, [r3, #180]	@ 0xb4

    // Start DMA in multi-buffer circular mode
	this->dmaStatus = this->startMultiBufferDMASPI((uint8_t *)txBuffer->txBuffer, (uint8_t *)txBuffer->txBuffer, (uint8_t *)rxBuffer->rxBuffer, (uint8_t *)rxBuffer->rxBuffer, SPI_BUFF_SIZE);
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	69db      	ldr	r3, [r3, #28]
 800509a:	4619      	mov	r1, r3
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	69db      	ldr	r3, [r3, #28]
 80050a0:	4618      	mov	r0, r3
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	699b      	ldr	r3, [r3, #24]
 80050a6:	461c      	mov	r4, r3
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	699b      	ldr	r3, [r3, #24]
 80050ac:	461a      	mov	r2, r3
 80050ae:	2340      	movs	r3, #64	@ 0x40
 80050b0:	9301      	str	r3, [sp, #4]
 80050b2:	9200      	str	r2, [sp, #0]
 80050b4:	4623      	mov	r3, r4
 80050b6:	4602      	mov	r2, r0
 80050b8:	6878      	ldr	r0, [r7, #4]
 80050ba:	f000 f813 	bl	80050e4 <_ZN11RemoraComms22startMultiBufferDMASPIEPhS0_S0_S0_t>
 80050be:	4603      	mov	r3, r0
 80050c0:	461a      	mov	r2, r3
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	f883 21ae 	strb.w	r2, [r3, #430]	@ 0x1ae
}
 80050c8:	bf00      	nop
 80050ca:	3724      	adds	r7, #36	@ 0x24
 80050cc:	46bd      	mov	sp, r7
 80050ce:	bd90      	pop	{r4, r7, pc}
 80050d0:	08005d9d 	.word	0x08005d9d
 80050d4:	08005df9 	.word	0x08005df9
 80050d8:	08005dd1 	.word	0x08005dd1
 80050dc:	300000a0 	.word	0x300000a0
 80050e0:	30000000 	.word	0x30000000

080050e4 <_ZN11RemoraComms22startMultiBufferDMASPIEPhS0_S0_S0_t>:
* @note  Circular mode is supported if the DMA is configured appropriately.
*/
HAL_StatusTypeDef RemoraComms::startMultiBufferDMASPI(uint8_t *pTxBuffer0, uint8_t *pTxBuffer1,
                                                      uint8_t *pRxBuffer0, uint8_t *pRxBuffer1,
                                                      uint16_t Size)
{
 80050e4:	b590      	push	{r4, r7, lr}
 80050e6:	b087      	sub	sp, #28
 80050e8:	af02      	add	r7, sp, #8
 80050ea:	60f8      	str	r0, [r7, #12]
 80050ec:	60b9      	str	r1, [r7, #8]
 80050ee:	607a      	str	r2, [r7, #4]
 80050f0:	603b      	str	r3, [r7, #0]
    /* Check Direction parameter */
    assert_param(IS_SPI_DIRECTION_2LINES(this->spiHandle.Init.Direction));

    if (this->spiHandle.State != HAL_SPI_STATE_READY)
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	f893 30b5 	ldrb.w	r3, [r3, #181]	@ 0xb5
 80050f8:	b2db      	uxtb	r3, r3
 80050fa:	2b01      	cmp	r3, #1
 80050fc:	bf14      	ite	ne
 80050fe:	2301      	movne	r3, #1
 8005100:	2300      	moveq	r3, #0
 8005102:	b2db      	uxtb	r3, r3
 8005104:	2b00      	cmp	r3, #0
 8005106:	d001      	beq.n	800510c <_ZN11RemoraComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x28>
    {
        return HAL_BUSY;
 8005108:	2302      	movs	r3, #2
 800510a:	e13e      	b.n	800538a <_ZN11RemoraComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x2a6>
    }

    if ((pTxBuffer0 == NULL) || (pRxBuffer0 == NULL) || (Size == 0UL))
 800510c:	68bb      	ldr	r3, [r7, #8]
 800510e:	2b00      	cmp	r3, #0
 8005110:	d005      	beq.n	800511e <_ZN11RemoraComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x3a>
 8005112:	683b      	ldr	r3, [r7, #0]
 8005114:	2b00      	cmp	r3, #0
 8005116:	d002      	beq.n	800511e <_ZN11RemoraComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x3a>
 8005118:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800511a:	2b00      	cmp	r3, #0
 800511c:	d101      	bne.n	8005122 <_ZN11RemoraComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x3e>
    {
        return HAL_ERROR;
 800511e:	2301      	movs	r3, #1
 8005120:	e133      	b.n	800538a <_ZN11RemoraComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x2a6>
    }

    /* If secondary Tx or Rx buffer is not provided, use the primary buffer */
    if (pTxBuffer1 == NULL)
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	2b00      	cmp	r3, #0
 8005126:	d101      	bne.n	800512c <_ZN11RemoraComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x48>
    {
        pTxBuffer1 = pTxBuffer0;
 8005128:	68bb      	ldr	r3, [r7, #8]
 800512a:	607b      	str	r3, [r7, #4]
    }

    if (pRxBuffer1 == NULL)
 800512c:	6a3b      	ldr	r3, [r7, #32]
 800512e:	2b00      	cmp	r3, #0
 8005130:	d101      	bne.n	8005136 <_ZN11RemoraComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x52>
    {
        pRxBuffer1 = pRxBuffer0;
 8005132:	683b      	ldr	r3, [r7, #0]
 8005134:	623b      	str	r3, [r7, #32]
    }

    /* Lock the process */
    __HAL_LOCK(&this->spiHandle);
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	f893 30b4 	ldrb.w	r3, [r3, #180]	@ 0xb4
 800513c:	2b01      	cmp	r3, #1
 800513e:	d101      	bne.n	8005144 <_ZN11RemoraComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x60>
 8005140:	2302      	movs	r3, #2
 8005142:	e122      	b.n	800538a <_ZN11RemoraComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x2a6>
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	2201      	movs	r2, #1
 8005148:	f883 20b4 	strb.w	r2, [r3, #180]	@ 0xb4

    /* Set the transaction information */
    this->spiHandle.State       = HAL_SPI_STATE_BUSY_TX_RX;
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	2205      	movs	r2, #5
 8005150:	f883 20b5 	strb.w	r2, [r3, #181]	@ 0xb5
    this->spiHandle.ErrorCode   = HAL_SPI_ERROR_NONE;
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	2200      	movs	r2, #0
 8005158:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
    this->spiHandle.TxXferSize  = Size;
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8005160:	f8a3 2094 	strh.w	r2, [r3, #148]	@ 0x94
    this->spiHandle.TxXferCount = Size;
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8005168:	f8a3 2096 	strh.w	r2, [r3, #150]	@ 0x96
    this->spiHandle.RxXferSize  = Size;
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8005170:	f8a3 209c 	strh.w	r2, [r3, #156]	@ 0x9c
    this->spiHandle.RxXferCount = Size;
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8005178:	f8a3 209e 	strh.w	r2, [r3, #158]	@ 0x9e

    /* Init unused fields in handle to zero */
    this->spiHandle.RxISR       = NULL;
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	2200      	movs	r2, #0
 8005180:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
    this->spiHandle.TxISR       = NULL;
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	2200      	movs	r2, #0
 8005188:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8

    /* Set Full-Duplex mode */
    SPI_2LINES(&this->spiHandle);
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005190:	68da      	ldr	r2, [r3, #12]
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005196:	f422 22c0 	bic.w	r2, r2, #393216	@ 0x60000
 800519a:	60da      	str	r2, [r3, #12]

    /* Reset the Tx/Rx DMA bits */
    CLEAR_BIT(this->spiHandle.Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80051a0:	689a      	ldr	r2, [r3, #8]
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80051a6:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 80051aa:	609a      	str	r2, [r3, #8]

    /* Adjust XferCount according to DMA alignment / Data size */
    if (this->spiHandle.Init.DataSize <= SPI_DATASIZE_8BIT)
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051b0:	2b07      	cmp	r3, #7
 80051b2:	d820      	bhi.n	80051f6 <_ZN11RemoraComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x112>
    {
        if (this->hdma_spi_tx.Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80051ba:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80051be:	d109      	bne.n	80051d4 <_ZN11RemoraComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0xf0>
        {
            this->spiHandle.TxXferCount = (this->spiHandle.TxXferCount + 1UL) >> 1UL;
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	f8b3 3096 	ldrh.w	r3, [r3, #150]	@ 0x96
 80051c6:	b29b      	uxth	r3, r3
 80051c8:	3301      	adds	r3, #1
 80051ca:	085b      	lsrs	r3, r3, #1
 80051cc:	b29a      	uxth	r2, r3
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	f8a3 2096 	strh.w	r2, [r3, #150]	@ 0x96
        }
        if (this->hdma_spi_rx.Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
 80051da:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80051de:	d12e      	bne.n	800523e <_ZN11RemoraComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x15a>
        {
            this->spiHandle.RxXferCount = (this->spiHandle.RxXferCount + 1UL) >> 1UL;
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	f8b3 309e 	ldrh.w	r3, [r3, #158]	@ 0x9e
 80051e6:	b29b      	uxth	r3, r3
 80051e8:	3301      	adds	r3, #1
 80051ea:	085b      	lsrs	r3, r3, #1
 80051ec:	b29a      	uxth	r2, r3
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	f8a3 209e 	strh.w	r2, [r3, #158]	@ 0x9e
 80051f4:	e023      	b.n	800523e <_ZN11RemoraComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x15a>
        }
    }
    else if (this->spiHandle.Init.DataSize <= SPI_DATASIZE_16BIT)
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051fa:	2b0f      	cmp	r3, #15
 80051fc:	d81f      	bhi.n	800523e <_ZN11RemoraComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x15a>
    {
        if (this->hdma_spi_tx.Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8005204:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005208:	d109      	bne.n	800521e <_ZN11RemoraComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x13a>
        {
            this->spiHandle.TxXferCount = (this->spiHandle.TxXferCount + 1UL) >> 1UL;
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	f8b3 3096 	ldrh.w	r3, [r3, #150]	@ 0x96
 8005210:	b29b      	uxth	r3, r3
 8005212:	3301      	adds	r3, #1
 8005214:	085b      	lsrs	r3, r3, #1
 8005216:	b29a      	uxth	r2, r3
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	f8a3 2096 	strh.w	r2, [r3, #150]	@ 0x96
        }
        if (this->hdma_spi_rx.Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
 8005224:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005228:	d109      	bne.n	800523e <_ZN11RemoraComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x15a>
        {
            this->spiHandle.RxXferCount = (this->spiHandle.RxXferCount + 1UL) >> 1UL;
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	f8b3 309e 	ldrh.w	r3, [r3, #158]	@ 0x9e
 8005230:	b29b      	uxth	r3, r3
 8005232:	3301      	adds	r3, #1
 8005234:	085b      	lsrs	r3, r3, #1
 8005236:	b29a      	uxth	r2, r3
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	f8a3 209e 	strh.w	r2, [r3, #158]	@ 0x9e
        }
    }

    /* Configure Tx DMA with Multi-Buffer */
    this->hdma_spi_tx.XferHalfCpltCallback = NULL;
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	2200      	movs	r2, #0
 8005242:	f8c3 20fc 	str.w	r2, [r3, #252]	@ 0xfc
    this->hdma_spi_tx.XferCpltCallback     = NULL;
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	2200      	movs	r2, #0
 800524a:	f8c3 20f8 	str.w	r2, [r3, #248]	@ 0xf8
    this->hdma_spi_tx.XferErrorCallback    = NULL;
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	2200      	movs	r2, #0
 8005252:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108

    if (HAL_OK != HAL_DMAEx_MultiBufferStart_IT(&this->hdma_spi_tx,
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	f103 00bc 	add.w	r0, r3, #188	@ 0xbc
 800525c:	68b9      	ldr	r1, [r7, #8]
                                                (uint32_t)pTxBuffer0,
                                                (uint32_t)&this->spiHandle.Instance->TXDR,
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005262:	3320      	adds	r3, #32
    if (HAL_OK != HAL_DMAEx_MultiBufferStart_IT(&this->hdma_spi_tx,
 8005264:	461c      	mov	r4, r3
 8005266:	687a      	ldr	r2, [r7, #4]
                                                (uint32_t)pTxBuffer1,
                                                this->spiHandle.TxXferCount))
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	f8b3 3096 	ldrh.w	r3, [r3, #150]	@ 0x96
 800526e:	b29b      	uxth	r3, r3
    if (HAL_OK != HAL_DMAEx_MultiBufferStart_IT(&this->hdma_spi_tx,
 8005270:	9300      	str	r3, [sp, #0]
 8005272:	4613      	mov	r3, r2
 8005274:	4622      	mov	r2, r4
 8005276:	f002 fc95 	bl	8007ba4 <HAL_DMAEx_MultiBufferStart_IT>
 800527a:	4603      	mov	r3, r0
 800527c:	2b00      	cmp	r3, #0
 800527e:	bf14      	ite	ne
 8005280:	2301      	movne	r3, #1
 8005282:	2300      	moveq	r3, #0
 8005284:	b2db      	uxtb	r3, r3
 8005286:	2b00      	cmp	r3, #0
 8005288:	d005      	beq.n	8005296 <_ZN11RemoraComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x1b2>
    {
        __HAL_UNLOCK(&this->spiHandle);
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	2200      	movs	r2, #0
 800528e:	f883 20b4 	strb.w	r2, [r3, #180]	@ 0xb4
        return HAL_ERROR;
 8005292:	2301      	movs	r3, #1
 8005294:	e079      	b.n	800538a <_ZN11RemoraComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x2a6>
    }

    /* Configure Rx DMA with Multi-Buffer */
    this->hdma_spi_rx.XferHalfCpltCallback = NULL;
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	2200      	movs	r2, #0
 800529a:	f8c3 2174 	str.w	r2, [r3, #372]	@ 0x174
    this->hdma_spi_rx.XferCpltCallback     = NULL;
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	2200      	movs	r2, #0
 80052a2:	f8c3 2170 	str.w	r2, [r3, #368]	@ 0x170
    this->hdma_spi_rx.XferErrorCallback    = NULL;
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	2200      	movs	r2, #0
 80052aa:	f8c3 2180 	str.w	r2, [r3, #384]	@ 0x180

    if (HAL_OK != HAL_DMAEx_MultiBufferStart_IT(&this->hdma_spi_rx,
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	f503 709a 	add.w	r0, r3, #308	@ 0x134
                                                (uint32_t)&this->spiHandle.Instance->RXDR,
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80052b8:	3330      	adds	r3, #48	@ 0x30
    if (HAL_OK != HAL_DMAEx_MultiBufferStart_IT(&this->hdma_spi_rx,
 80052ba:	461c      	mov	r4, r3
 80052bc:	683a      	ldr	r2, [r7, #0]
 80052be:	6a39      	ldr	r1, [r7, #32]
                                                (uint32_t)pRxBuffer0,
                                                (uint32_t)pRxBuffer1,
                                                this->spiHandle.RxXferCount))
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	f8b3 309e 	ldrh.w	r3, [r3, #158]	@ 0x9e
 80052c6:	b29b      	uxth	r3, r3
    if (HAL_OK != HAL_DMAEx_MultiBufferStart_IT(&this->hdma_spi_rx,
 80052c8:	9300      	str	r3, [sp, #0]
 80052ca:	460b      	mov	r3, r1
 80052cc:	4621      	mov	r1, r4
 80052ce:	f002 fc69 	bl	8007ba4 <HAL_DMAEx_MultiBufferStart_IT>
 80052d2:	4603      	mov	r3, r0
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	bf14      	ite	ne
 80052d8:	2301      	movne	r3, #1
 80052da:	2300      	moveq	r3, #0
 80052dc:	b2db      	uxtb	r3, r3
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d00a      	beq.n	80052f8 <_ZN11RemoraComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x214>
    {
        (void)HAL_DMA_Abort(&this->hdma_spi_tx);
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	33bc      	adds	r3, #188	@ 0xbc
 80052e6:	4618      	mov	r0, r3
 80052e8:	f001 ff02 	bl	80070f0 <HAL_DMA_Abort>
        __HAL_UNLOCK(&this->spiHandle);
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	2200      	movs	r2, #0
 80052f0:	f883 20b4 	strb.w	r2, [r3, #180]	@ 0xb4
        return HAL_ERROR;
 80052f4:	2301      	movs	r3, #1
 80052f6:	e048      	b.n	800538a <_ZN11RemoraComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x2a6>
    }

    /* Configure SPI TSIZE for full transfer or circular mode */
    if (this->hdma_spi_rx.Init.Mode == DMA_CIRCULAR || this->hdma_spi_tx.Init.Mode == DMA_CIRCULAR)
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 80052fe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005302:	d005      	beq.n	8005310 <_ZN11RemoraComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x22c>
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800530a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800530e:	d108      	bne.n	8005322 <_ZN11RemoraComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x23e>
    {
        MODIFY_REG(this->spiHandle.Instance->CR2, SPI_CR2_TSIZE, 0UL);
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005314:	6859      	ldr	r1, [r3, #4]
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800531a:	4b1e      	ldr	r3, [pc, #120]	@ (8005394 <_ZN11RemoraComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x2b0>)
 800531c:	400b      	ands	r3, r1
 800531e:	6053      	str	r3, [r2, #4]
 8005320:	e009      	b.n	8005336 <_ZN11RemoraComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x252>
    }
    else
    {
        MODIFY_REG(this->spiHandle.Instance->CR2, SPI_CR2_TSIZE, Size);
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005326:	685a      	ldr	r2, [r3, #4]
 8005328:	4b1a      	ldr	r3, [pc, #104]	@ (8005394 <_ZN11RemoraComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x2b0>)
 800532a:	4013      	ands	r3, r2
 800532c:	8cb9      	ldrh	r1, [r7, #36]	@ 0x24
 800532e:	68fa      	ldr	r2, [r7, #12]
 8005330:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8005332:	430b      	orrs	r3, r1
 8005334:	6053      	str	r3, [r2, #4]
    }

    /* Enable Tx and Rx DMA Requests */
    SET_BIT(this->spiHandle.Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800533a:	689a      	ldr	r2, [r3, #8]
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005340:	f442 4240 	orr.w	r2, r2, #49152	@ 0xc000
 8005344:	609a      	str	r2, [r3, #8]

    /* Enable SPI error interrupt */
    __HAL_SPI_ENABLE_IT(&this->spiHandle, (SPI_IT_OVR | SPI_IT_UDR | SPI_IT_FRE | SPI_IT_MODF));
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800534a:	691a      	ldr	r2, [r3, #16]
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005350:	f442 7258 	orr.w	r2, r2, #864	@ 0x360
 8005354:	611a      	str	r2, [r3, #16]

    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(&this->spiHandle);
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800535a:	681a      	ldr	r2, [r3, #0]
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005360:	f042 0201 	orr.w	r2, r2, #1
 8005364:	601a      	str	r2, [r3, #0]

    if (this->spiHandle.Init.Mode == SPI_MODE_MASTER)
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800536a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800536e:	d107      	bne.n	8005380 <_ZN11RemoraComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x29c>
    {
        SET_BIT(this->spiHandle.Instance->CR1, SPI_CR1_CSTART);
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005374:	681a      	ldr	r2, [r3, #0]
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800537a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800537e:	601a      	str	r2, [r3, #0]
    }

    __HAL_UNLOCK(&this->spiHandle);
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	2200      	movs	r2, #0
 8005384:	f883 20b4 	strb.w	r2, [r3, #180]	@ 0xb4

    return HAL_OK;
 8005388:	2300      	movs	r3, #0
}
 800538a:	4618      	mov	r0, r3
 800538c:	3714      	adds	r7, #20
 800538e:	46bd      	mov	sp, r7
 8005390:	bd90      	pop	{r4, r7, pc}
 8005392:	bf00      	nop
 8005394:	ffff0000 	.word	0xffff0000

08005398 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef>:
  *             - 1: Half transfer complete.
  *             - 2: Full transfer complete.
  *             - 0: Otherwise.
  */
int RemoraComms::DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005398:	b580      	push	{r7, lr}
 800539a:	b088      	sub	sp, #32
 800539c:	af00      	add	r7, sp, #0
 800539e:	6078      	str	r0, [r7, #4]
 80053a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpisr_dma;
  __IO uint32_t count = 0U;
 80053a2:	2300      	movs	r3, #0
 80053a4:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80053a6:	4b62      	ldr	r3, [pc, #392]	@ (8005530 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x198>)
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	4a62      	ldr	r2, [pc, #392]	@ (8005534 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x19c>)
 80053ac:	fba2 2303 	umull	r2, r3, r2, r3
 80053b0:	0a9b      	lsrs	r3, r3, #10
 80053b2:	61bb      	str	r3, [r7, #24]
  int interrupt;

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80053b4:	683b      	ldr	r3, [r7, #0]
 80053b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80053b8:	617b      	str	r3, [r7, #20]

  tmpisr_dma  = regs_dma->ISR;
 80053ba:	697b      	ldr	r3, [r7, #20]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	613b      	str	r3, [r7, #16]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80053c0:	683b      	ldr	r3, [r7, #0]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	4a5c      	ldr	r2, [pc, #368]	@ (8005538 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x1a0>)
 80053c6:	4293      	cmp	r3, r2
 80053c8:	d04a      	beq.n	8005460 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0xc8>
 80053ca:	683b      	ldr	r3, [r7, #0]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	4a5b      	ldr	r2, [pc, #364]	@ (800553c <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x1a4>)
 80053d0:	4293      	cmp	r3, r2
 80053d2:	d045      	beq.n	8005460 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0xc8>
 80053d4:	683b      	ldr	r3, [r7, #0]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	4a59      	ldr	r2, [pc, #356]	@ (8005540 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x1a8>)
 80053da:	4293      	cmp	r3, r2
 80053dc:	d040      	beq.n	8005460 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0xc8>
 80053de:	683b      	ldr	r3, [r7, #0]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	4a58      	ldr	r2, [pc, #352]	@ (8005544 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x1ac>)
 80053e4:	4293      	cmp	r3, r2
 80053e6:	d03b      	beq.n	8005460 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0xc8>
 80053e8:	683b      	ldr	r3, [r7, #0]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	4a56      	ldr	r2, [pc, #344]	@ (8005548 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x1b0>)
 80053ee:	4293      	cmp	r3, r2
 80053f0:	d036      	beq.n	8005460 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0xc8>
 80053f2:	683b      	ldr	r3, [r7, #0]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	4a55      	ldr	r2, [pc, #340]	@ (800554c <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x1b4>)
 80053f8:	4293      	cmp	r3, r2
 80053fa:	d031      	beq.n	8005460 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0xc8>
 80053fc:	683b      	ldr	r3, [r7, #0]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	4a53      	ldr	r2, [pc, #332]	@ (8005550 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x1b8>)
 8005402:	4293      	cmp	r3, r2
 8005404:	d02c      	beq.n	8005460 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0xc8>
 8005406:	683b      	ldr	r3, [r7, #0]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	4a52      	ldr	r2, [pc, #328]	@ (8005554 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x1bc>)
 800540c:	4293      	cmp	r3, r2
 800540e:	d027      	beq.n	8005460 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0xc8>
 8005410:	683b      	ldr	r3, [r7, #0]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	4a50      	ldr	r2, [pc, #320]	@ (8005558 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x1c0>)
 8005416:	4293      	cmp	r3, r2
 8005418:	d022      	beq.n	8005460 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0xc8>
 800541a:	683b      	ldr	r3, [r7, #0]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	4a4f      	ldr	r2, [pc, #316]	@ (800555c <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x1c4>)
 8005420:	4293      	cmp	r3, r2
 8005422:	d01d      	beq.n	8005460 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0xc8>
 8005424:	683b      	ldr	r3, [r7, #0]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	4a4d      	ldr	r2, [pc, #308]	@ (8005560 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x1c8>)
 800542a:	4293      	cmp	r3, r2
 800542c:	d018      	beq.n	8005460 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0xc8>
 800542e:	683b      	ldr	r3, [r7, #0]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	4a4c      	ldr	r2, [pc, #304]	@ (8005564 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x1cc>)
 8005434:	4293      	cmp	r3, r2
 8005436:	d013      	beq.n	8005460 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0xc8>
 8005438:	683b      	ldr	r3, [r7, #0]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	4a4a      	ldr	r2, [pc, #296]	@ (8005568 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x1d0>)
 800543e:	4293      	cmp	r3, r2
 8005440:	d00e      	beq.n	8005460 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0xc8>
 8005442:	683b      	ldr	r3, [r7, #0]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	4a49      	ldr	r2, [pc, #292]	@ (800556c <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x1d4>)
 8005448:	4293      	cmp	r3, r2
 800544a:	d009      	beq.n	8005460 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0xc8>
 800544c:	683b      	ldr	r3, [r7, #0]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	4a47      	ldr	r2, [pc, #284]	@ (8005570 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x1d8>)
 8005452:	4293      	cmp	r3, r2
 8005454:	d004      	beq.n	8005460 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0xc8>
 8005456:	683b      	ldr	r3, [r7, #0]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	4a46      	ldr	r2, [pc, #280]	@ (8005574 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x1dc>)
 800545c:	4293      	cmp	r3, r2
 800545e:	d101      	bne.n	8005464 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0xcc>
 8005460:	2301      	movs	r3, #1
 8005462:	e000      	b.n	8005466 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0xce>
 8005464:	2300      	movs	r3, #0
 8005466:	2b00      	cmp	r3, #0
 8005468:	f000 8437 	beq.w	8005cda <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x942>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800546c:	683b      	ldr	r3, [r7, #0]
 800546e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005470:	f003 031f 	and.w	r3, r3, #31
 8005474:	2208      	movs	r2, #8
 8005476:	409a      	lsls	r2, r3
 8005478:	693b      	ldr	r3, [r7, #16]
 800547a:	4013      	ands	r3, r2
 800547c:	2b00      	cmp	r3, #0
 800547e:	f000 809d 	beq.w	80055bc <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x224>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8005482:	683b      	ldr	r3, [r7, #0]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	4a2c      	ldr	r2, [pc, #176]	@ (8005538 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x1a0>)
 8005488:	4293      	cmp	r3, r2
 800548a:	d04a      	beq.n	8005522 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x18a>
 800548c:	683b      	ldr	r3, [r7, #0]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	4a2a      	ldr	r2, [pc, #168]	@ (800553c <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x1a4>)
 8005492:	4293      	cmp	r3, r2
 8005494:	d045      	beq.n	8005522 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x18a>
 8005496:	683b      	ldr	r3, [r7, #0]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	4a29      	ldr	r2, [pc, #164]	@ (8005540 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x1a8>)
 800549c:	4293      	cmp	r3, r2
 800549e:	d040      	beq.n	8005522 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x18a>
 80054a0:	683b      	ldr	r3, [r7, #0]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	4a27      	ldr	r2, [pc, #156]	@ (8005544 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x1ac>)
 80054a6:	4293      	cmp	r3, r2
 80054a8:	d03b      	beq.n	8005522 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x18a>
 80054aa:	683b      	ldr	r3, [r7, #0]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	4a26      	ldr	r2, [pc, #152]	@ (8005548 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x1b0>)
 80054b0:	4293      	cmp	r3, r2
 80054b2:	d036      	beq.n	8005522 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x18a>
 80054b4:	683b      	ldr	r3, [r7, #0]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	4a24      	ldr	r2, [pc, #144]	@ (800554c <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x1b4>)
 80054ba:	4293      	cmp	r3, r2
 80054bc:	d031      	beq.n	8005522 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x18a>
 80054be:	683b      	ldr	r3, [r7, #0]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	4a23      	ldr	r2, [pc, #140]	@ (8005550 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x1b8>)
 80054c4:	4293      	cmp	r3, r2
 80054c6:	d02c      	beq.n	8005522 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x18a>
 80054c8:	683b      	ldr	r3, [r7, #0]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	4a21      	ldr	r2, [pc, #132]	@ (8005554 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x1bc>)
 80054ce:	4293      	cmp	r3, r2
 80054d0:	d027      	beq.n	8005522 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x18a>
 80054d2:	683b      	ldr	r3, [r7, #0]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	4a20      	ldr	r2, [pc, #128]	@ (8005558 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x1c0>)
 80054d8:	4293      	cmp	r3, r2
 80054da:	d022      	beq.n	8005522 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x18a>
 80054dc:	683b      	ldr	r3, [r7, #0]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	4a1e      	ldr	r2, [pc, #120]	@ (800555c <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x1c4>)
 80054e2:	4293      	cmp	r3, r2
 80054e4:	d01d      	beq.n	8005522 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x18a>
 80054e6:	683b      	ldr	r3, [r7, #0]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	4a1d      	ldr	r2, [pc, #116]	@ (8005560 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x1c8>)
 80054ec:	4293      	cmp	r3, r2
 80054ee:	d018      	beq.n	8005522 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x18a>
 80054f0:	683b      	ldr	r3, [r7, #0]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	4a1b      	ldr	r2, [pc, #108]	@ (8005564 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x1cc>)
 80054f6:	4293      	cmp	r3, r2
 80054f8:	d013      	beq.n	8005522 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x18a>
 80054fa:	683b      	ldr	r3, [r7, #0]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	4a1a      	ldr	r2, [pc, #104]	@ (8005568 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x1d0>)
 8005500:	4293      	cmp	r3, r2
 8005502:	d00e      	beq.n	8005522 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x18a>
 8005504:	683b      	ldr	r3, [r7, #0]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	4a18      	ldr	r2, [pc, #96]	@ (800556c <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x1d4>)
 800550a:	4293      	cmp	r3, r2
 800550c:	d009      	beq.n	8005522 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x18a>
 800550e:	683b      	ldr	r3, [r7, #0]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	4a17      	ldr	r2, [pc, #92]	@ (8005570 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x1d8>)
 8005514:	4293      	cmp	r3, r2
 8005516:	d004      	beq.n	8005522 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x18a>
 8005518:	683b      	ldr	r3, [r7, #0]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	4a15      	ldr	r2, [pc, #84]	@ (8005574 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x1dc>)
 800551e:	4293      	cmp	r3, r2
 8005520:	d12a      	bne.n	8005578 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x1e0>
 8005522:	683b      	ldr	r3, [r7, #0]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f003 0304 	and.w	r3, r3, #4
 800552c:	e029      	b.n	8005582 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x1ea>
 800552e:	bf00      	nop
 8005530:	24000050 	.word	0x24000050
 8005534:	1b4e81b5 	.word	0x1b4e81b5
 8005538:	40020010 	.word	0x40020010
 800553c:	40020028 	.word	0x40020028
 8005540:	40020040 	.word	0x40020040
 8005544:	40020058 	.word	0x40020058
 8005548:	40020070 	.word	0x40020070
 800554c:	40020088 	.word	0x40020088
 8005550:	400200a0 	.word	0x400200a0
 8005554:	400200b8 	.word	0x400200b8
 8005558:	40020410 	.word	0x40020410
 800555c:	40020428 	.word	0x40020428
 8005560:	40020440 	.word	0x40020440
 8005564:	40020458 	.word	0x40020458
 8005568:	40020470 	.word	0x40020470
 800556c:	40020488 	.word	0x40020488
 8005570:	400204a0 	.word	0x400204a0
 8005574:	400204b8 	.word	0x400204b8
 8005578:	683b      	ldr	r3, [r7, #0]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	f003 0308 	and.w	r3, r3, #8
 8005582:	2b00      	cmp	r3, #0
 8005584:	bf14      	ite	ne
 8005586:	2301      	movne	r3, #1
 8005588:	2300      	moveq	r3, #0
 800558a:	b2db      	uxtb	r3, r3
 800558c:	2b00      	cmp	r3, #0
 800558e:	d015      	beq.n	80055bc <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x224>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8005590:	683b      	ldr	r3, [r7, #0]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	681a      	ldr	r2, [r3, #0]
 8005596:	683b      	ldr	r3, [r7, #0]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	f022 0204 	bic.w	r2, r2, #4
 800559e:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80055a0:	683b      	ldr	r3, [r7, #0]
 80055a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80055a4:	f003 031f 	and.w	r3, r3, #31
 80055a8:	2208      	movs	r2, #8
 80055aa:	409a      	lsls	r2, r3
 80055ac:	697b      	ldr	r3, [r7, #20]
 80055ae:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80055b0:	683b      	ldr	r3, [r7, #0]
 80055b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80055b4:	f043 0201 	orr.w	r2, r3, #1
 80055b8:	683b      	ldr	r3, [r7, #0]
 80055ba:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80055bc:	683b      	ldr	r3, [r7, #0]
 80055be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80055c0:	f003 031f 	and.w	r3, r3, #31
 80055c4:	693a      	ldr	r2, [r7, #16]
 80055c6:	fa22 f303 	lsr.w	r3, r2, r3
 80055ca:	f003 0301 	and.w	r3, r3, #1
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d06e      	beq.n	80056b0 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x318>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80055d2:	683b      	ldr	r3, [r7, #0]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	4a67      	ldr	r2, [pc, #412]	@ (8005774 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3dc>)
 80055d8:	4293      	cmp	r3, r2
 80055da:	d04a      	beq.n	8005672 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x2da>
 80055dc:	683b      	ldr	r3, [r7, #0]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	4a65      	ldr	r2, [pc, #404]	@ (8005778 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3e0>)
 80055e2:	4293      	cmp	r3, r2
 80055e4:	d045      	beq.n	8005672 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x2da>
 80055e6:	683b      	ldr	r3, [r7, #0]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	4a64      	ldr	r2, [pc, #400]	@ (800577c <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3e4>)
 80055ec:	4293      	cmp	r3, r2
 80055ee:	d040      	beq.n	8005672 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x2da>
 80055f0:	683b      	ldr	r3, [r7, #0]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	4a62      	ldr	r2, [pc, #392]	@ (8005780 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3e8>)
 80055f6:	4293      	cmp	r3, r2
 80055f8:	d03b      	beq.n	8005672 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x2da>
 80055fa:	683b      	ldr	r3, [r7, #0]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	4a61      	ldr	r2, [pc, #388]	@ (8005784 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3ec>)
 8005600:	4293      	cmp	r3, r2
 8005602:	d036      	beq.n	8005672 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x2da>
 8005604:	683b      	ldr	r3, [r7, #0]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	4a5f      	ldr	r2, [pc, #380]	@ (8005788 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3f0>)
 800560a:	4293      	cmp	r3, r2
 800560c:	d031      	beq.n	8005672 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x2da>
 800560e:	683b      	ldr	r3, [r7, #0]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	4a5e      	ldr	r2, [pc, #376]	@ (800578c <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3f4>)
 8005614:	4293      	cmp	r3, r2
 8005616:	d02c      	beq.n	8005672 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x2da>
 8005618:	683b      	ldr	r3, [r7, #0]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	4a5c      	ldr	r2, [pc, #368]	@ (8005790 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3f8>)
 800561e:	4293      	cmp	r3, r2
 8005620:	d027      	beq.n	8005672 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x2da>
 8005622:	683b      	ldr	r3, [r7, #0]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	4a5b      	ldr	r2, [pc, #364]	@ (8005794 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3fc>)
 8005628:	4293      	cmp	r3, r2
 800562a:	d022      	beq.n	8005672 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x2da>
 800562c:	683b      	ldr	r3, [r7, #0]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	4a59      	ldr	r2, [pc, #356]	@ (8005798 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x400>)
 8005632:	4293      	cmp	r3, r2
 8005634:	d01d      	beq.n	8005672 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x2da>
 8005636:	683b      	ldr	r3, [r7, #0]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	4a58      	ldr	r2, [pc, #352]	@ (800579c <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x404>)
 800563c:	4293      	cmp	r3, r2
 800563e:	d018      	beq.n	8005672 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x2da>
 8005640:	683b      	ldr	r3, [r7, #0]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	4a56      	ldr	r2, [pc, #344]	@ (80057a0 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x408>)
 8005646:	4293      	cmp	r3, r2
 8005648:	d013      	beq.n	8005672 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x2da>
 800564a:	683b      	ldr	r3, [r7, #0]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	4a55      	ldr	r2, [pc, #340]	@ (80057a4 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x40c>)
 8005650:	4293      	cmp	r3, r2
 8005652:	d00e      	beq.n	8005672 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x2da>
 8005654:	683b      	ldr	r3, [r7, #0]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	4a53      	ldr	r2, [pc, #332]	@ (80057a8 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x410>)
 800565a:	4293      	cmp	r3, r2
 800565c:	d009      	beq.n	8005672 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x2da>
 800565e:	683b      	ldr	r3, [r7, #0]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	4a52      	ldr	r2, [pc, #328]	@ (80057ac <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x414>)
 8005664:	4293      	cmp	r3, r2
 8005666:	d004      	beq.n	8005672 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x2da>
 8005668:	683b      	ldr	r3, [r7, #0]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	4a50      	ldr	r2, [pc, #320]	@ (80057b0 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x418>)
 800566e:	4293      	cmp	r3, r2
 8005670:	d105      	bne.n	800567e <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x2e6>
 8005672:	683b      	ldr	r3, [r7, #0]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	695b      	ldr	r3, [r3, #20]
 8005678:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800567c:	e003      	b.n	8005686 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x2ee>
 800567e:	683b      	ldr	r3, [r7, #0]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	2300      	movs	r3, #0
 8005686:	2b00      	cmp	r3, #0
 8005688:	bf14      	ite	ne
 800568a:	2301      	movne	r3, #1
 800568c:	2300      	moveq	r3, #0
 800568e:	b2db      	uxtb	r3, r3
 8005690:	2b00      	cmp	r3, #0
 8005692:	d00d      	beq.n	80056b0 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x318>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005694:	683b      	ldr	r3, [r7, #0]
 8005696:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005698:	f003 031f 	and.w	r3, r3, #31
 800569c:	2201      	movs	r2, #1
 800569e:	409a      	lsls	r2, r3
 80056a0:	697b      	ldr	r3, [r7, #20]
 80056a2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80056a4:	683b      	ldr	r3, [r7, #0]
 80056a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80056a8:	f043 0202 	orr.w	r2, r3, #2
 80056ac:	683b      	ldr	r3, [r7, #0]
 80056ae:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80056b0:	683b      	ldr	r3, [r7, #0]
 80056b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80056b4:	f003 031f 	and.w	r3, r3, #31
 80056b8:	2204      	movs	r2, #4
 80056ba:	409a      	lsls	r2, r3
 80056bc:	693b      	ldr	r3, [r7, #16]
 80056be:	4013      	ands	r3, r2
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	f000 8090 	beq.w	80057e6 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x44e>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80056c6:	683b      	ldr	r3, [r7, #0]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	4a2a      	ldr	r2, [pc, #168]	@ (8005774 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3dc>)
 80056cc:	4293      	cmp	r3, r2
 80056ce:	d04a      	beq.n	8005766 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3ce>
 80056d0:	683b      	ldr	r3, [r7, #0]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	4a28      	ldr	r2, [pc, #160]	@ (8005778 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3e0>)
 80056d6:	4293      	cmp	r3, r2
 80056d8:	d045      	beq.n	8005766 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3ce>
 80056da:	683b      	ldr	r3, [r7, #0]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	4a27      	ldr	r2, [pc, #156]	@ (800577c <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3e4>)
 80056e0:	4293      	cmp	r3, r2
 80056e2:	d040      	beq.n	8005766 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3ce>
 80056e4:	683b      	ldr	r3, [r7, #0]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	4a25      	ldr	r2, [pc, #148]	@ (8005780 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3e8>)
 80056ea:	4293      	cmp	r3, r2
 80056ec:	d03b      	beq.n	8005766 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3ce>
 80056ee:	683b      	ldr	r3, [r7, #0]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	4a24      	ldr	r2, [pc, #144]	@ (8005784 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3ec>)
 80056f4:	4293      	cmp	r3, r2
 80056f6:	d036      	beq.n	8005766 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3ce>
 80056f8:	683b      	ldr	r3, [r7, #0]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	4a22      	ldr	r2, [pc, #136]	@ (8005788 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3f0>)
 80056fe:	4293      	cmp	r3, r2
 8005700:	d031      	beq.n	8005766 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3ce>
 8005702:	683b      	ldr	r3, [r7, #0]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	4a21      	ldr	r2, [pc, #132]	@ (800578c <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3f4>)
 8005708:	4293      	cmp	r3, r2
 800570a:	d02c      	beq.n	8005766 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3ce>
 800570c:	683b      	ldr	r3, [r7, #0]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	4a1f      	ldr	r2, [pc, #124]	@ (8005790 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3f8>)
 8005712:	4293      	cmp	r3, r2
 8005714:	d027      	beq.n	8005766 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3ce>
 8005716:	683b      	ldr	r3, [r7, #0]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	4a1e      	ldr	r2, [pc, #120]	@ (8005794 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3fc>)
 800571c:	4293      	cmp	r3, r2
 800571e:	d022      	beq.n	8005766 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3ce>
 8005720:	683b      	ldr	r3, [r7, #0]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	4a1c      	ldr	r2, [pc, #112]	@ (8005798 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x400>)
 8005726:	4293      	cmp	r3, r2
 8005728:	d01d      	beq.n	8005766 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3ce>
 800572a:	683b      	ldr	r3, [r7, #0]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	4a1b      	ldr	r2, [pc, #108]	@ (800579c <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x404>)
 8005730:	4293      	cmp	r3, r2
 8005732:	d018      	beq.n	8005766 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3ce>
 8005734:	683b      	ldr	r3, [r7, #0]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	4a19      	ldr	r2, [pc, #100]	@ (80057a0 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x408>)
 800573a:	4293      	cmp	r3, r2
 800573c:	d013      	beq.n	8005766 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3ce>
 800573e:	683b      	ldr	r3, [r7, #0]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	4a18      	ldr	r2, [pc, #96]	@ (80057a4 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x40c>)
 8005744:	4293      	cmp	r3, r2
 8005746:	d00e      	beq.n	8005766 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3ce>
 8005748:	683b      	ldr	r3, [r7, #0]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	4a16      	ldr	r2, [pc, #88]	@ (80057a8 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x410>)
 800574e:	4293      	cmp	r3, r2
 8005750:	d009      	beq.n	8005766 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3ce>
 8005752:	683b      	ldr	r3, [r7, #0]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	4a15      	ldr	r2, [pc, #84]	@ (80057ac <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x414>)
 8005758:	4293      	cmp	r3, r2
 800575a:	d004      	beq.n	8005766 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3ce>
 800575c:	683b      	ldr	r3, [r7, #0]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	4a13      	ldr	r2, [pc, #76]	@ (80057b0 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x418>)
 8005762:	4293      	cmp	r3, r2
 8005764:	d126      	bne.n	80057b4 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x41c>
 8005766:	683b      	ldr	r3, [r7, #0]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	f003 0302 	and.w	r3, r3, #2
 8005770:	e024      	b.n	80057bc <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x424>
 8005772:	bf00      	nop
 8005774:	40020010 	.word	0x40020010
 8005778:	40020028 	.word	0x40020028
 800577c:	40020040 	.word	0x40020040
 8005780:	40020058 	.word	0x40020058
 8005784:	40020070 	.word	0x40020070
 8005788:	40020088 	.word	0x40020088
 800578c:	400200a0 	.word	0x400200a0
 8005790:	400200b8 	.word	0x400200b8
 8005794:	40020410 	.word	0x40020410
 8005798:	40020428 	.word	0x40020428
 800579c:	40020440 	.word	0x40020440
 80057a0:	40020458 	.word	0x40020458
 80057a4:	40020470 	.word	0x40020470
 80057a8:	40020488 	.word	0x40020488
 80057ac:	400204a0 	.word	0x400204a0
 80057b0:	400204b8 	.word	0x400204b8
 80057b4:	683b      	ldr	r3, [r7, #0]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	2300      	movs	r3, #0
 80057bc:	2b00      	cmp	r3, #0
 80057be:	bf14      	ite	ne
 80057c0:	2301      	movne	r3, #1
 80057c2:	2300      	moveq	r3, #0
 80057c4:	b2db      	uxtb	r3, r3
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d00d      	beq.n	80057e6 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x44e>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80057ca:	683b      	ldr	r3, [r7, #0]
 80057cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80057ce:	f003 031f 	and.w	r3, r3, #31
 80057d2:	2204      	movs	r2, #4
 80057d4:	409a      	lsls	r2, r3
 80057d6:	697b      	ldr	r3, [r7, #20]
 80057d8:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80057da:	683b      	ldr	r3, [r7, #0]
 80057dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80057de:	f043 0204 	orr.w	r2, r3, #4
 80057e2:	683b      	ldr	r3, [r7, #0]
 80057e4:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80057e6:	683b      	ldr	r3, [r7, #0]
 80057e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80057ea:	f003 031f 	and.w	r3, r3, #31
 80057ee:	2210      	movs	r2, #16
 80057f0:	409a      	lsls	r2, r3
 80057f2:	693b      	ldr	r3, [r7, #16]
 80057f4:	4013      	ands	r3, r2
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	f000 80a0 	beq.w	800593c <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x5a4>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80057fc:	683b      	ldr	r3, [r7, #0]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	4a7f      	ldr	r2, [pc, #508]	@ (8005a00 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x668>)
 8005802:	4293      	cmp	r3, r2
 8005804:	d04a      	beq.n	800589c <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x504>
 8005806:	683b      	ldr	r3, [r7, #0]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	4a7e      	ldr	r2, [pc, #504]	@ (8005a04 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x66c>)
 800580c:	4293      	cmp	r3, r2
 800580e:	d045      	beq.n	800589c <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x504>
 8005810:	683b      	ldr	r3, [r7, #0]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	4a7c      	ldr	r2, [pc, #496]	@ (8005a08 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x670>)
 8005816:	4293      	cmp	r3, r2
 8005818:	d040      	beq.n	800589c <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x504>
 800581a:	683b      	ldr	r3, [r7, #0]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	4a7b      	ldr	r2, [pc, #492]	@ (8005a0c <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x674>)
 8005820:	4293      	cmp	r3, r2
 8005822:	d03b      	beq.n	800589c <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x504>
 8005824:	683b      	ldr	r3, [r7, #0]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	4a79      	ldr	r2, [pc, #484]	@ (8005a10 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x678>)
 800582a:	4293      	cmp	r3, r2
 800582c:	d036      	beq.n	800589c <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x504>
 800582e:	683b      	ldr	r3, [r7, #0]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	4a78      	ldr	r2, [pc, #480]	@ (8005a14 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x67c>)
 8005834:	4293      	cmp	r3, r2
 8005836:	d031      	beq.n	800589c <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x504>
 8005838:	683b      	ldr	r3, [r7, #0]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	4a76      	ldr	r2, [pc, #472]	@ (8005a18 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x680>)
 800583e:	4293      	cmp	r3, r2
 8005840:	d02c      	beq.n	800589c <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x504>
 8005842:	683b      	ldr	r3, [r7, #0]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	4a75      	ldr	r2, [pc, #468]	@ (8005a1c <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x684>)
 8005848:	4293      	cmp	r3, r2
 800584a:	d027      	beq.n	800589c <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x504>
 800584c:	683b      	ldr	r3, [r7, #0]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	4a73      	ldr	r2, [pc, #460]	@ (8005a20 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x688>)
 8005852:	4293      	cmp	r3, r2
 8005854:	d022      	beq.n	800589c <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x504>
 8005856:	683b      	ldr	r3, [r7, #0]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	4a72      	ldr	r2, [pc, #456]	@ (8005a24 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x68c>)
 800585c:	4293      	cmp	r3, r2
 800585e:	d01d      	beq.n	800589c <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x504>
 8005860:	683b      	ldr	r3, [r7, #0]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	4a70      	ldr	r2, [pc, #448]	@ (8005a28 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x690>)
 8005866:	4293      	cmp	r3, r2
 8005868:	d018      	beq.n	800589c <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x504>
 800586a:	683b      	ldr	r3, [r7, #0]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	4a6f      	ldr	r2, [pc, #444]	@ (8005a2c <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x694>)
 8005870:	4293      	cmp	r3, r2
 8005872:	d013      	beq.n	800589c <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x504>
 8005874:	683b      	ldr	r3, [r7, #0]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	4a6d      	ldr	r2, [pc, #436]	@ (8005a30 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x698>)
 800587a:	4293      	cmp	r3, r2
 800587c:	d00e      	beq.n	800589c <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x504>
 800587e:	683b      	ldr	r3, [r7, #0]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	4a6c      	ldr	r2, [pc, #432]	@ (8005a34 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x69c>)
 8005884:	4293      	cmp	r3, r2
 8005886:	d009      	beq.n	800589c <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x504>
 8005888:	683b      	ldr	r3, [r7, #0]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	4a6a      	ldr	r2, [pc, #424]	@ (8005a38 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x6a0>)
 800588e:	4293      	cmp	r3, r2
 8005890:	d004      	beq.n	800589c <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x504>
 8005892:	683b      	ldr	r3, [r7, #0]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	4a69      	ldr	r2, [pc, #420]	@ (8005a3c <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x6a4>)
 8005898:	4293      	cmp	r3, r2
 800589a:	d105      	bne.n	80058a8 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x510>
 800589c:	683b      	ldr	r3, [r7, #0]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	f003 0308 	and.w	r3, r3, #8
 80058a6:	e004      	b.n	80058b2 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x51a>
 80058a8:	683b      	ldr	r3, [r7, #0]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	f003 0304 	and.w	r3, r3, #4
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	bf14      	ite	ne
 80058b6:	2301      	movne	r3, #1
 80058b8:	2300      	moveq	r3, #0
 80058ba:	b2db      	uxtb	r3, r3
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d03d      	beq.n	800593c <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x5a4>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80058c0:	683b      	ldr	r3, [r7, #0]
 80058c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80058c4:	f003 031f 	and.w	r3, r3, #31
 80058c8:	2210      	movs	r2, #16
 80058ca:	409a      	lsls	r2, r3
 80058cc:	697b      	ldr	r3, [r7, #20]
 80058ce:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80058d0:	683b      	ldr	r3, [r7, #0]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80058da:	2b00      	cmp	r3, #0
 80058dc:	bf14      	ite	ne
 80058de:	2301      	movne	r3, #1
 80058e0:	2300      	moveq	r3, #0
 80058e2:	b2db      	uxtb	r3, r3
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d00b      	beq.n	8005900 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x568>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80058e8:	683b      	ldr	r3, [r7, #0]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	bf0c      	ite	eq
 80058f6:	2301      	moveq	r3, #1
 80058f8:	2300      	movne	r3, #0
 80058fa:	b2db      	uxtb	r3, r3
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	e01b      	b.n	8005938 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x5a0>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8005900:	683b      	ldr	r3, [r7, #0]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800590a:	2b00      	cmp	r3, #0
 800590c:	bf0c      	ite	eq
 800590e:	2301      	moveq	r3, #1
 8005910:	2300      	movne	r3, #0
 8005912:	b2db      	uxtb	r3, r3
 8005914:	2b00      	cmp	r3, #0
 8005916:	d007      	beq.n	8005928 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x590>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8005918:	683b      	ldr	r3, [r7, #0]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	681a      	ldr	r2, [r3, #0]
 800591e:	683b      	ldr	r3, [r7, #0]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	f022 0208 	bic.w	r2, r2, #8
 8005926:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8005928:	683b      	ldr	r3, [r7, #0]
 800592a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800592c:	2b00      	cmp	r3, #0
 800592e:	d003      	beq.n	8005938 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x5a0>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005930:	683b      	ldr	r3, [r7, #0]
 8005932:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005934:	6838      	ldr	r0, [r7, #0]
 8005936:	4798      	blx	r3
          }
        }
        interrupt = 1;
 8005938:	2301      	movs	r3, #1
 800593a:	61fb      	str	r3, [r7, #28]
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800593c:	683b      	ldr	r3, [r7, #0]
 800593e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005940:	f003 031f 	and.w	r3, r3, #31
 8005944:	2220      	movs	r2, #32
 8005946:	409a      	lsls	r2, r3
 8005948:	693b      	ldr	r3, [r7, #16]
 800594a:	4013      	ands	r3, r2
 800594c:	2b00      	cmp	r3, #0
 800594e:	f000 810f 	beq.w	8005b70 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x7d8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8005952:	683b      	ldr	r3, [r7, #0]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	4a2a      	ldr	r2, [pc, #168]	@ (8005a00 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x668>)
 8005958:	4293      	cmp	r3, r2
 800595a:	d04a      	beq.n	80059f2 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x65a>
 800595c:	683b      	ldr	r3, [r7, #0]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	4a28      	ldr	r2, [pc, #160]	@ (8005a04 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x66c>)
 8005962:	4293      	cmp	r3, r2
 8005964:	d045      	beq.n	80059f2 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x65a>
 8005966:	683b      	ldr	r3, [r7, #0]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	4a27      	ldr	r2, [pc, #156]	@ (8005a08 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x670>)
 800596c:	4293      	cmp	r3, r2
 800596e:	d040      	beq.n	80059f2 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x65a>
 8005970:	683b      	ldr	r3, [r7, #0]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	4a25      	ldr	r2, [pc, #148]	@ (8005a0c <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x674>)
 8005976:	4293      	cmp	r3, r2
 8005978:	d03b      	beq.n	80059f2 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x65a>
 800597a:	683b      	ldr	r3, [r7, #0]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	4a24      	ldr	r2, [pc, #144]	@ (8005a10 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x678>)
 8005980:	4293      	cmp	r3, r2
 8005982:	d036      	beq.n	80059f2 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x65a>
 8005984:	683b      	ldr	r3, [r7, #0]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	4a22      	ldr	r2, [pc, #136]	@ (8005a14 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x67c>)
 800598a:	4293      	cmp	r3, r2
 800598c:	d031      	beq.n	80059f2 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x65a>
 800598e:	683b      	ldr	r3, [r7, #0]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	4a21      	ldr	r2, [pc, #132]	@ (8005a18 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x680>)
 8005994:	4293      	cmp	r3, r2
 8005996:	d02c      	beq.n	80059f2 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x65a>
 8005998:	683b      	ldr	r3, [r7, #0]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	4a1f      	ldr	r2, [pc, #124]	@ (8005a1c <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x684>)
 800599e:	4293      	cmp	r3, r2
 80059a0:	d027      	beq.n	80059f2 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x65a>
 80059a2:	683b      	ldr	r3, [r7, #0]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	4a1e      	ldr	r2, [pc, #120]	@ (8005a20 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x688>)
 80059a8:	4293      	cmp	r3, r2
 80059aa:	d022      	beq.n	80059f2 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x65a>
 80059ac:	683b      	ldr	r3, [r7, #0]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	4a1c      	ldr	r2, [pc, #112]	@ (8005a24 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x68c>)
 80059b2:	4293      	cmp	r3, r2
 80059b4:	d01d      	beq.n	80059f2 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x65a>
 80059b6:	683b      	ldr	r3, [r7, #0]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	4a1b      	ldr	r2, [pc, #108]	@ (8005a28 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x690>)
 80059bc:	4293      	cmp	r3, r2
 80059be:	d018      	beq.n	80059f2 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x65a>
 80059c0:	683b      	ldr	r3, [r7, #0]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	4a19      	ldr	r2, [pc, #100]	@ (8005a2c <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x694>)
 80059c6:	4293      	cmp	r3, r2
 80059c8:	d013      	beq.n	80059f2 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x65a>
 80059ca:	683b      	ldr	r3, [r7, #0]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	4a18      	ldr	r2, [pc, #96]	@ (8005a30 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x698>)
 80059d0:	4293      	cmp	r3, r2
 80059d2:	d00e      	beq.n	80059f2 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x65a>
 80059d4:	683b      	ldr	r3, [r7, #0]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	4a16      	ldr	r2, [pc, #88]	@ (8005a34 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x69c>)
 80059da:	4293      	cmp	r3, r2
 80059dc:	d009      	beq.n	80059f2 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x65a>
 80059de:	683b      	ldr	r3, [r7, #0]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	4a15      	ldr	r2, [pc, #84]	@ (8005a38 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x6a0>)
 80059e4:	4293      	cmp	r3, r2
 80059e6:	d004      	beq.n	80059f2 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x65a>
 80059e8:	683b      	ldr	r3, [r7, #0]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	4a13      	ldr	r2, [pc, #76]	@ (8005a3c <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x6a4>)
 80059ee:	4293      	cmp	r3, r2
 80059f0:	d126      	bne.n	8005a40 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x6a8>
 80059f2:	683b      	ldr	r3, [r7, #0]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	f003 0310 	and.w	r3, r3, #16
 80059fc:	e025      	b.n	8005a4a <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x6b2>
 80059fe:	bf00      	nop
 8005a00:	40020010 	.word	0x40020010
 8005a04:	40020028 	.word	0x40020028
 8005a08:	40020040 	.word	0x40020040
 8005a0c:	40020058 	.word	0x40020058
 8005a10:	40020070 	.word	0x40020070
 8005a14:	40020088 	.word	0x40020088
 8005a18:	400200a0 	.word	0x400200a0
 8005a1c:	400200b8 	.word	0x400200b8
 8005a20:	40020410 	.word	0x40020410
 8005a24:	40020428 	.word	0x40020428
 8005a28:	40020440 	.word	0x40020440
 8005a2c:	40020458 	.word	0x40020458
 8005a30:	40020470 	.word	0x40020470
 8005a34:	40020488 	.word	0x40020488
 8005a38:	400204a0 	.word	0x400204a0
 8005a3c:	400204b8 	.word	0x400204b8
 8005a40:	683b      	ldr	r3, [r7, #0]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	f003 0302 	and.w	r3, r3, #2
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	bf14      	ite	ne
 8005a4e:	2301      	movne	r3, #1
 8005a50:	2300      	moveq	r3, #0
 8005a52:	b2db      	uxtb	r3, r3
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	f000 808b 	beq.w	8005b70 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x7d8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005a5a:	683b      	ldr	r3, [r7, #0]
 8005a5c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005a5e:	f003 031f 	and.w	r3, r3, #31
 8005a62:	2220      	movs	r2, #32
 8005a64:	409a      	lsls	r2, r3
 8005a66:	697b      	ldr	r3, [r7, #20]
 8005a68:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8005a6a:	683b      	ldr	r3, [r7, #0]
 8005a6c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005a70:	b2db      	uxtb	r3, r3
 8005a72:	2b04      	cmp	r3, #4
 8005a74:	bf0c      	ite	eq
 8005a76:	2301      	moveq	r3, #1
 8005a78:	2300      	movne	r3, #0
 8005a7a:	b2db      	uxtb	r3, r3
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d039      	beq.n	8005af4 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x75c>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005a80:	683b      	ldr	r3, [r7, #0]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	681a      	ldr	r2, [r3, #0]
 8005a86:	683b      	ldr	r3, [r7, #0]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	f022 0216 	bic.w	r2, r2, #22
 8005a8e:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8005a90:	683b      	ldr	r3, [r7, #0]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	695a      	ldr	r2, [r3, #20]
 8005a96:	683b      	ldr	r3, [r7, #0]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005a9e:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005aa0:	683b      	ldr	r3, [r7, #0]
 8005aa2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d103      	bne.n	8005ab0 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x718>
 8005aa8:	683b      	ldr	r3, [r7, #0]
 8005aaa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d007      	beq.n	8005ac0 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x728>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8005ab0:	683b      	ldr	r3, [r7, #0]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	681a      	ldr	r2, [r3, #0]
 8005ab6:	683b      	ldr	r3, [r7, #0]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	f022 0208 	bic.w	r2, r2, #8
 8005abe:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005ac0:	683b      	ldr	r3, [r7, #0]
 8005ac2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005ac4:	f003 031f 	and.w	r3, r3, #31
 8005ac8:	223f      	movs	r2, #63	@ 0x3f
 8005aca:	409a      	lsls	r2, r3
 8005acc:	697b      	ldr	r3, [r7, #20]
 8005ace:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005ad0:	683b      	ldr	r3, [r7, #0]
 8005ad2:	2201      	movs	r2, #1
 8005ad4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005ad8:	683b      	ldr	r3, [r7, #0]
 8005ada:	2200      	movs	r2, #0
 8005adc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 8005ae0:	683b      	ldr	r3, [r7, #0]
 8005ae2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d003      	beq.n	8005af0 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x758>
          {
            hdma->XferAbortCallback(hdma);
 8005ae8:	683b      	ldr	r3, [r7, #0]
 8005aea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005aec:	6838      	ldr	r0, [r7, #0]
 8005aee:	4798      	blx	r3
          }
          interrupt = 0;
 8005af0:	2300      	movs	r3, #0
 8005af2:	61fb      	str	r3, [r7, #28]
        }


        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8005af4:	683b      	ldr	r3, [r7, #0]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	bf14      	ite	ne
 8005b02:	2301      	movne	r3, #1
 8005b04:	2300      	moveq	r3, #0
 8005b06:	b2db      	uxtb	r3, r3
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d00b      	beq.n	8005b24 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x78c>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8005b0c:	683b      	ldr	r3, [r7, #0]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	bf0c      	ite	eq
 8005b1a:	2301      	moveq	r3, #1
 8005b1c:	2300      	movne	r3, #0
 8005b1e:	b2db      	uxtb	r3, r3
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	e023      	b.n	8005b6c <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x7d4>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8005b24:	683b      	ldr	r3, [r7, #0]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	bf0c      	ite	eq
 8005b32:	2301      	moveq	r3, #1
 8005b34:	2300      	movne	r3, #0
 8005b36:	b2db      	uxtb	r3, r3
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d00f      	beq.n	8005b5c <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x7c4>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8005b3c:	683b      	ldr	r3, [r7, #0]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	681a      	ldr	r2, [r3, #0]
 8005b42:	683b      	ldr	r3, [r7, #0]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	f022 0210 	bic.w	r2, r2, #16
 8005b4a:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8005b4c:	683b      	ldr	r3, [r7, #0]
 8005b4e:	2201      	movs	r2, #1
 8005b50:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8005b54:	683b      	ldr	r3, [r7, #0]
 8005b56:	2200      	movs	r2, #0
 8005b58:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8005b5c:	683b      	ldr	r3, [r7, #0]
 8005b5e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d003      	beq.n	8005b6c <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x7d4>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8005b64:	683b      	ldr	r3, [r7, #0]
 8005b66:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b68:	6838      	ldr	r0, [r7, #0]
 8005b6a:	4798      	blx	r3
          }
        }
        interrupt =  2;
 8005b6c:	2302      	movs	r3, #2
 8005b6e:	61fb      	str	r3, [r7, #28]
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005b70:	683b      	ldr	r3, [r7, #0]
 8005b72:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	bf14      	ite	ne
 8005b78:	2301      	movne	r3, #1
 8005b7a:	2300      	moveq	r3, #0
 8005b7c:	b2db      	uxtb	r3, r3
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	f000 80ab 	beq.w	8005cda <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x942>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8005b84:	683b      	ldr	r3, [r7, #0]
 8005b86:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b88:	f003 0301 	and.w	r3, r3, #1
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	bf14      	ite	ne
 8005b90:	2301      	movne	r3, #1
 8005b92:	2300      	moveq	r3, #0
 8005b94:	b2db      	uxtb	r3, r3
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	f000 8097 	beq.w	8005cca <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x932>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8005b9c:	683b      	ldr	r3, [r7, #0]
 8005b9e:	2204      	movs	r2, #4
 8005ba0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8005ba4:	683b      	ldr	r3, [r7, #0]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	4a4e      	ldr	r2, [pc, #312]	@ (8005ce4 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x94c>)
 8005baa:	4293      	cmp	r3, r2
 8005bac:	d04a      	beq.n	8005c44 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x8ac>
 8005bae:	683b      	ldr	r3, [r7, #0]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	4a4d      	ldr	r2, [pc, #308]	@ (8005ce8 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x950>)
 8005bb4:	4293      	cmp	r3, r2
 8005bb6:	d045      	beq.n	8005c44 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x8ac>
 8005bb8:	683b      	ldr	r3, [r7, #0]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	4a4b      	ldr	r2, [pc, #300]	@ (8005cec <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x954>)
 8005bbe:	4293      	cmp	r3, r2
 8005bc0:	d040      	beq.n	8005c44 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x8ac>
 8005bc2:	683b      	ldr	r3, [r7, #0]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	4a4a      	ldr	r2, [pc, #296]	@ (8005cf0 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x958>)
 8005bc8:	4293      	cmp	r3, r2
 8005bca:	d03b      	beq.n	8005c44 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x8ac>
 8005bcc:	683b      	ldr	r3, [r7, #0]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	4a48      	ldr	r2, [pc, #288]	@ (8005cf4 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x95c>)
 8005bd2:	4293      	cmp	r3, r2
 8005bd4:	d036      	beq.n	8005c44 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x8ac>
 8005bd6:	683b      	ldr	r3, [r7, #0]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	4a47      	ldr	r2, [pc, #284]	@ (8005cf8 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x960>)
 8005bdc:	4293      	cmp	r3, r2
 8005bde:	d031      	beq.n	8005c44 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x8ac>
 8005be0:	683b      	ldr	r3, [r7, #0]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	4a45      	ldr	r2, [pc, #276]	@ (8005cfc <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x964>)
 8005be6:	4293      	cmp	r3, r2
 8005be8:	d02c      	beq.n	8005c44 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x8ac>
 8005bea:	683b      	ldr	r3, [r7, #0]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	4a44      	ldr	r2, [pc, #272]	@ (8005d00 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x968>)
 8005bf0:	4293      	cmp	r3, r2
 8005bf2:	d027      	beq.n	8005c44 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x8ac>
 8005bf4:	683b      	ldr	r3, [r7, #0]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	4a42      	ldr	r2, [pc, #264]	@ (8005d04 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x96c>)
 8005bfa:	4293      	cmp	r3, r2
 8005bfc:	d022      	beq.n	8005c44 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x8ac>
 8005bfe:	683b      	ldr	r3, [r7, #0]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	4a41      	ldr	r2, [pc, #260]	@ (8005d08 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x970>)
 8005c04:	4293      	cmp	r3, r2
 8005c06:	d01d      	beq.n	8005c44 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x8ac>
 8005c08:	683b      	ldr	r3, [r7, #0]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	4a3f      	ldr	r2, [pc, #252]	@ (8005d0c <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x974>)
 8005c0e:	4293      	cmp	r3, r2
 8005c10:	d018      	beq.n	8005c44 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x8ac>
 8005c12:	683b      	ldr	r3, [r7, #0]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	4a3e      	ldr	r2, [pc, #248]	@ (8005d10 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x978>)
 8005c18:	4293      	cmp	r3, r2
 8005c1a:	d013      	beq.n	8005c44 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x8ac>
 8005c1c:	683b      	ldr	r3, [r7, #0]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	4a3c      	ldr	r2, [pc, #240]	@ (8005d14 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x97c>)
 8005c22:	4293      	cmp	r3, r2
 8005c24:	d00e      	beq.n	8005c44 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x8ac>
 8005c26:	683b      	ldr	r3, [r7, #0]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	4a3b      	ldr	r2, [pc, #236]	@ (8005d18 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x980>)
 8005c2c:	4293      	cmp	r3, r2
 8005c2e:	d009      	beq.n	8005c44 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x8ac>
 8005c30:	683b      	ldr	r3, [r7, #0]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	4a39      	ldr	r2, [pc, #228]	@ (8005d1c <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x984>)
 8005c36:	4293      	cmp	r3, r2
 8005c38:	d004      	beq.n	8005c44 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x8ac>
 8005c3a:	683b      	ldr	r3, [r7, #0]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	4a38      	ldr	r2, [pc, #224]	@ (8005d20 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x988>)
 8005c40:	4293      	cmp	r3, r2
 8005c42:	d108      	bne.n	8005c56 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x8be>
 8005c44:	683b      	ldr	r3, [r7, #0]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	681a      	ldr	r2, [r3, #0]
 8005c4a:	683b      	ldr	r3, [r7, #0]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	f022 0201 	bic.w	r2, r2, #1
 8005c52:	601a      	str	r2, [r3, #0]
 8005c54:	e007      	b.n	8005c66 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x8ce>
 8005c56:	683b      	ldr	r3, [r7, #0]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	681a      	ldr	r2, [r3, #0]
 8005c5c:	683b      	ldr	r3, [r7, #0]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	f022 0201 	bic.w	r2, r2, #1
 8005c64:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	3301      	adds	r3, #1
 8005c6a:	60fb      	str	r3, [r7, #12]
 8005c6c:	69ba      	ldr	r2, [r7, #24]
 8005c6e:	429a      	cmp	r2, r3
 8005c70:	bf34      	ite	cc
 8005c72:	2301      	movcc	r3, #1
 8005c74:	2300      	movcs	r3, #0
 8005c76:	b2db      	uxtb	r3, r3
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d10c      	bne.n	8005c96 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x8fe>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8005c7c:	683b      	ldr	r3, [r7, #0]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	f003 0301 	and.w	r3, r3, #1
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	bf14      	ite	ne
 8005c8a:	2301      	movne	r3, #1
 8005c8c:	2300      	moveq	r3, #0
 8005c8e:	b2db      	uxtb	r3, r3
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d1e8      	bne.n	8005c66 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x8ce>
 8005c94:	e000      	b.n	8005c98 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x900>
            break;
 8005c96:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005c98:	683b      	ldr	r3, [r7, #0]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	f003 0301 	and.w	r3, r3, #1
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	bf14      	ite	ne
 8005ca6:	2301      	movne	r3, #1
 8005ca8:	2300      	moveq	r3, #0
 8005caa:	b2db      	uxtb	r3, r3
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d004      	beq.n	8005cba <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x922>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8005cb0:	683b      	ldr	r3, [r7, #0]
 8005cb2:	2203      	movs	r2, #3
 8005cb4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8005cb8:	e003      	b.n	8005cc2 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x92a>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8005cba:	683b      	ldr	r3, [r7, #0]
 8005cbc:	2201      	movs	r2, #1
 8005cbe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005cc2:	683b      	ldr	r3, [r7, #0]
 8005cc4:	2200      	movs	r2, #0
 8005cc6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8005cca:	683b      	ldr	r3, [r7, #0]
 8005ccc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d003      	beq.n	8005cda <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x942>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8005cd2:	683b      	ldr	r3, [r7, #0]
 8005cd4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005cd6:	6838      	ldr	r0, [r7, #0]
 8005cd8:	4798      	blx	r3
      }
    }
  }
  return interrupt;
 8005cda:	69fb      	ldr	r3, [r7, #28]
}
 8005cdc:	4618      	mov	r0, r3
 8005cde:	3720      	adds	r7, #32
 8005ce0:	46bd      	mov	sp, r7
 8005ce2:	bd80      	pop	{r7, pc}
 8005ce4:	40020010 	.word	0x40020010
 8005ce8:	40020028 	.word	0x40020028
 8005cec:	40020040 	.word	0x40020040
 8005cf0:	40020058 	.word	0x40020058
 8005cf4:	40020070 	.word	0x40020070
 8005cf8:	40020088 	.word	0x40020088
 8005cfc:	400200a0 	.word	0x400200a0
 8005d00:	400200b8 	.word	0x400200b8
 8005d04:	40020410 	.word	0x40020410
 8005d08:	40020428 	.word	0x40020428
 8005d0c:	40020440 	.word	0x40020440
 8005d10:	40020458 	.word	0x40020458
 8005d14:	40020470 	.word	0x40020470
 8005d18:	40020488 	.word	0x40020488
 8005d1c:	400204a0 	.word	0x400204a0
 8005d20:	400204b8 	.word	0x400204b8

08005d24 <_ZN11RemoraComms18getActiveDMAbufferEP19__DMA_HandleTypeDef>:
 * @retval int Active buffer index:
 *             - 0: First buffer (Memory 0) is active.
 *             - 1: Second buffer (Memory 1) is active.
 */
int RemoraComms::getActiveDMAbuffer(DMA_HandleTypeDef *hdma)
{
 8005d24:	b480      	push	{r7}
 8005d26:	b085      	sub	sp, #20
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	6078      	str	r0, [r7, #4]
 8005d2c:	6039      	str	r1, [r7, #0]
    DMA_Stream_TypeDef *dmaStream = (DMA_Stream_TypeDef *)hdma->Instance;
 8005d2e:	683b      	ldr	r3, [r7, #0]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	60fb      	str	r3, [r7, #12]

    return (dmaStream->CR & DMA_SxCR_CT) ? 1 : 0;
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d001      	beq.n	8005d44 <_ZN11RemoraComms18getActiveDMAbufferEP19__DMA_HandleTypeDef+0x20>
 8005d40:	2301      	movs	r3, #1
 8005d42:	e000      	b.n	8005d46 <_ZN11RemoraComms18getActiveDMAbufferEP19__DMA_HandleTypeDef+0x22>
 8005d44:	2300      	movs	r3, #0
}
 8005d46:	4618      	mov	r0, r3
 8005d48:	3714      	adds	r7, #20
 8005d4a:	46bd      	mov	sp, r7
 8005d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d50:	4770      	bx	lr

08005d52 <_ZN11RemoraComms16changeDMAAddressEP19__DMA_HandleTypeDefmi>:
 * @retval HAL_StatusTypeDef:
 *         - HAL_OK: Address successfully updated.
 *         - HAL_ERROR: Invalid parameters or memory type.
 */
HAL_StatusTypeDef RemoraComms::changeDMAAddress(DMA_HandleTypeDef *hdma, uint32_t Address, int memory)
{
 8005d52:	b480      	push	{r7}
 8005d54:	b085      	sub	sp, #20
 8005d56:	af00      	add	r7, sp, #0
 8005d58:	60f8      	str	r0, [r7, #12]
 8005d5a:	60b9      	str	r1, [r7, #8]
 8005d5c:	607a      	str	r2, [r7, #4]
 8005d5e:	603b      	str	r3, [r7, #0]
    if (hdma == NULL)
 8005d60:	68bb      	ldr	r3, [r7, #8]
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d101      	bne.n	8005d6a <_ZN11RemoraComms16changeDMAAddressEP19__DMA_HandleTypeDefmi+0x18>
    {
        return HAL_ERROR; // Null pointer check
 8005d66:	2301      	movs	r3, #1
 8005d68:	e012      	b.n	8005d90 <_ZN11RemoraComms16changeDMAAddressEP19__DMA_HandleTypeDefmi+0x3e>
    }

    if (memory == MEMORY0)
 8005d6a:	683b      	ldr	r3, [r7, #0]
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d104      	bne.n	8005d7a <_ZN11RemoraComms16changeDMAAddressEP19__DMA_HandleTypeDefmi+0x28>
    {
        ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = Address;
 8005d70:	68bb      	ldr	r3, [r7, #8]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	687a      	ldr	r2, [r7, #4]
 8005d76:	60da      	str	r2, [r3, #12]
 8005d78:	e009      	b.n	8005d8e <_ZN11RemoraComms16changeDMAAddressEP19__DMA_HandleTypeDefmi+0x3c>
    }
    else if (memory == MEMORY1)
 8005d7a:	683b      	ldr	r3, [r7, #0]
 8005d7c:	2b01      	cmp	r3, #1
 8005d7e:	d104      	bne.n	8005d8a <_ZN11RemoraComms16changeDMAAddressEP19__DMA_HandleTypeDefmi+0x38>
    {
        ((DMA_Stream_TypeDef *)hdma->Instance)->M1AR = Address;
 8005d80:	68bb      	ldr	r3, [r7, #8]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	687a      	ldr	r2, [r7, #4]
 8005d86:	611a      	str	r2, [r3, #16]
 8005d88:	e001      	b.n	8005d8e <_ZN11RemoraComms16changeDMAAddressEP19__DMA_HandleTypeDefmi+0x3c>
    }
    else
    {
        return HAL_ERROR; // Invalid memory parameter
 8005d8a:	2301      	movs	r3, #1
 8005d8c:	e000      	b.n	8005d90 <_ZN11RemoraComms16changeDMAAddressEP19__DMA_HandleTypeDefmi+0x3e>
    }

    return HAL_OK;
 8005d8e:	2300      	movs	r3, #0
}
 8005d90:	4618      	mov	r0, r3
 8005d92:	3714      	adds	r7, #20
 8005d94:	46bd      	mov	sp, r7
 8005d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9a:	4770      	bx	lr

08005d9c <_ZN11RemoraComms18handleNssInterruptEv>:
 *
 * @note  Ensure that the `swapTxBuffers` function operates correctly in interrupt-disabled
 *        regions to avoid potential race conditions or deadlocks.
 */
void RemoraComms::handleNssInterrupt()
{
 8005d9c:	b580      	push	{r7, lr}
 8005d9e:	b082      	sub	sp, #8
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	6078      	str	r0, [r7, #4]
    if (this->swapRx == true)
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	f893 31b5 	ldrb.w	r3, [r3, #437]	@ 0x1b5
 8005daa:	2b01      	cmp	r3, #1
 8005dac:	d10a      	bne.n	8005dc4 <_ZN11RemoraComms18handleNssInterruptEv+0x28>
  __ASM volatile ("cpsid i" : : : "memory");
 8005dae:	b672      	cpsid	i
}
 8005db0:	bf00      	nop
    {
        __disable_irq(); 					// Disable interrupts to ensure atomic buffer swapping
        swapTxBuffers(&txPingPongBuffer); 	// Swap the transmit buffers
 8005db2:	4806      	ldr	r0, [pc, #24]	@ (8005dcc <_ZN11RemoraComms18handleNssInterruptEv+0x30>)
 8005db4:	f7fc fa92 	bl	80022dc <_Z13swapTxBuffersP16TxPingPongBuffer>
  __ASM volatile ("cpsie i" : : : "memory");
 8005db8:	b662      	cpsie	i
}
 8005dba:	bf00      	nop
        __enable_irq(); 					// Re-enable interrupts
        this->swapRx = false; 				// Clear the swapRx flag
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	2200      	movs	r2, #0
 8005dc0:	f883 21b5 	strb.w	r2, [r3, #437]	@ 0x1b5
    }
}
 8005dc4:	bf00      	nop
 8005dc6:	3708      	adds	r7, #8
 8005dc8:	46bd      	mov	sp, r7
 8005dca:	bd80      	pop	{r7, pc}
 8005dcc:	300000a0 	.word	0x300000a0

08005dd0 <_ZN11RemoraComms17handleTxInterruptEv>:
 *
 * This function processes the DMA interrupt request for the SPI transmit stream
 * and re-enables the corresponding NVIC interrupt.
 */
void RemoraComms::handleTxInterrupt()
{
 8005dd0:	b580      	push	{r7, lr}
 8005dd2:	b082      	sub	sp, #8
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	6078      	str	r0, [r7, #4]
	DMA_IRQHandler(&this->hdma_spi_tx);
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	33bc      	adds	r3, #188	@ 0xbc
 8005ddc:	4619      	mov	r1, r3
 8005dde:	6878      	ldr	r0, [r7, #4]
 8005de0:	f7ff fada 	bl	8005398 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef>
	HAL_NVIC_EnableIRQ(this->irqDMAtx);
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8005dea:	4618      	mov	r0, r3
 8005dec:	f000 fd8d 	bl	800690a <HAL_NVIC_EnableIRQ>
}
 8005df0:	bf00      	nop
 8005df2:	3708      	adds	r7, #8
 8005df4:	46bd      	mov	sp, r7
 8005df6:	bd80      	pop	{r7, pc}

08005df8 <_ZN11RemoraComms17handleRxInterruptEv>:
 *
 * - Errors:
 *   - If invalid data is received consecutively more than 5 times, `SPIdataError` is set.
 */
void RemoraComms::handleRxInterrupt()
{
 8005df8:	b580      	push	{r7, lr}
 8005dfa:	b082      	sub	sp, #8
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	6078      	str	r0, [r7, #4]
    // Determine the type of interrupt (1 = half-transfer, 2 = transfer complete, 0 = none)
    this->interruptType = DMA_IRQHandler(&this->hdma_spi_rx);
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	f503 739a 	add.w	r3, r3, #308	@ 0x134
 8005e06:	4619      	mov	r1, r3
 8005e08:	6878      	ldr	r0, [r7, #4]
 8005e0a:	f7ff fac5 	bl	8005398 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef>
 8005e0e:	4603      	mov	r3, r0
 8005e10:	b2da      	uxtb	r2, r3
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	f883 21ad 	strb.w	r2, [r3, #429]	@ 0x1ad

    switch (interruptType)
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	f893 31ad 	ldrb.w	r3, [r3, #429]	@ 0x1ad
 8005e1e:	2b01      	cmp	r3, #1
 8005e20:	d002      	beq.n	8005e28 <_ZN11RemoraComms17handleRxInterruptEv+0x30>
 8005e22:	2b02      	cmp	r3, #2
 8005e24:	d02e      	beq.n	8005e84 <_ZN11RemoraComms17handleRxInterruptEv+0x8c>
                // TODO: Implement SPI reset logic if required
            }
            break;

        default:
            break;
 8005e26:	e06a      	b.n	8005efe <_ZN11RemoraComms17handleRxInterruptEv+0x106>
            if (this->rxBuffer->header == PRU_WRITE)
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	699b      	ldr	r3, [r3, #24]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	4a39      	ldr	r2, [pc, #228]	@ (8005f14 <_ZN11RemoraComms17handleRxInterruptEv+0x11c>)
 8005e30:	4293      	cmp	r3, r2
 8005e32:	d161      	bne.n	8005ef8 <_ZN11RemoraComms17handleRxInterruptEv+0x100>
                this->memory = 1 - getActiveDMAbuffer(&this->hdma_spi_rx);
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	f503 739a 	add.w	r3, r3, #308	@ 0x134
 8005e3a:	4619      	mov	r1, r3
 8005e3c:	6878      	ldr	r0, [r7, #4]
 8005e3e:	f7ff ff71 	bl	8005d24 <_ZN11RemoraComms18getActiveDMAbufferEP19__DMA_HandleTypeDef>
 8005e42:	4603      	mov	r3, r0
 8005e44:	b2db      	uxtb	r3, r3
 8005e46:	f1c3 0301 	rsb	r3, r3, #1
 8005e4a:	b2da      	uxtb	r2, r3
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	f883 21b4 	strb.w	r2, [r3, #436]	@ 0x1b4
                this->address = (uint32_t)getAltRxBuffer(&rxPingPongBuffer);
 8005e52:	4831      	ldr	r0, [pc, #196]	@ (8005f18 <_ZN11RemoraComms17handleRxInterruptEv+0x120>)
 8005e54:	f7fc fa74 	bl	8002340 <_Z14getAltRxBufferP16RxPingPongBuffer>
 8005e58:	4603      	mov	r3, r0
 8005e5a:	461a      	mov	r2, r3
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	f8c3 21b0 	str.w	r2, [r3, #432]	@ 0x1b0
                changeDMAAddress(&this->hdma_spi_rx, this->address, this->memory);
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	f503 719a 	add.w	r1, r3, #308	@ 0x134
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	f8d3 21b0 	ldr.w	r2, [r3, #432]	@ 0x1b0
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	f893 31b4 	ldrb.w	r3, [r3, #436]	@ 0x1b4
 8005e74:	6878      	ldr	r0, [r7, #4]
 8005e76:	f7ff ff6c 	bl	8005d52 <_ZN11RemoraComms16changeDMAAddressEP19__DMA_HandleTypeDefmi>
                this->swapRx = true;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	2201      	movs	r2, #1
 8005e7e:	f883 21b5 	strb.w	r2, [r3, #437]	@ 0x1b5
            break;
 8005e82:	e039      	b.n	8005ef8 <_ZN11RemoraComms17handleRxInterruptEv+0x100>
            if (this->rxBuffer->header == PRU_READ || this->rxBuffer->header == PRU_WRITE)
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	699b      	ldr	r3, [r3, #24]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	4a24      	ldr	r2, [pc, #144]	@ (8005f1c <_ZN11RemoraComms17handleRxInterruptEv+0x124>)
 8005e8c:	4293      	cmp	r3, r2
 8005e8e:	d005      	beq.n	8005e9c <_ZN11RemoraComms17handleRxInterruptEv+0xa4>
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	699b      	ldr	r3, [r3, #24]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	4a1f      	ldr	r2, [pc, #124]	@ (8005f14 <_ZN11RemoraComms17handleRxInterruptEv+0x11c>)
 8005e98:	4293      	cmp	r3, r2
 8005e9a:	d11b      	bne.n	8005ed4 <_ZN11RemoraComms17handleRxInterruptEv+0xdc>
                if (this->swapRx == true)
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	f893 31b5 	ldrb.w	r3, [r3, #437]	@ 0x1b5
 8005ea2:	2b01      	cmp	r3, #1
 8005ea4:	d10d      	bne.n	8005ec2 <_ZN11RemoraComms17handleRxInterruptEv+0xca>
                    changeDMAAddress(&this->hdma_spi_rx, this->address, 1 - this->memory);
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	f503 719a 	add.w	r1, r3, #308	@ 0x134
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	f8d3 21b0 	ldr.w	r2, [r3, #432]	@ 0x1b0
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	f893 31b4 	ldrb.w	r3, [r3, #436]	@ 0x1b4
 8005eb8:	f1c3 0301 	rsb	r3, r3, #1
 8005ebc:	6878      	ldr	r0, [r7, #4]
 8005ebe:	f7ff ff48 	bl	8005d52 <_ZN11RemoraComms16changeDMAAddressEP19__DMA_HandleTypeDefmi>
                this->SPIdata = true;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	2201      	movs	r2, #1
 8005ec6:	f883 2203 	strb.w	r2, [r3, #515]	@ 0x203
                this->rejectCnt = 0; // Reset reject counter on valid data
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	2200      	movs	r2, #0
 8005ece:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
            break;
 8005ed2:	e013      	b.n	8005efc <_ZN11RemoraComms17handleRxInterruptEv+0x104>
                this->rejectCnt++;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8005eda:	3301      	adds	r3, #1
 8005edc:	b2da      	uxtb	r2, r3
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
                if (this->rejectCnt > 5)
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8005eea:	2b05      	cmp	r3, #5
 8005eec:	d906      	bls.n	8005efc <_ZN11RemoraComms17handleRxInterruptEv+0x104>
                    this->SPIdataError = true; // Flag data error if rejects exceed threshold
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	2201      	movs	r2, #1
 8005ef2:	f883 2204 	strb.w	r2, [r3, #516]	@ 0x204
            break;
 8005ef6:	e001      	b.n	8005efc <_ZN11RemoraComms17handleRxInterruptEv+0x104>
            break;
 8005ef8:	bf00      	nop
 8005efa:	e000      	b.n	8005efe <_ZN11RemoraComms17handleRxInterruptEv+0x106>
            break;
 8005efc:	bf00      	nop
    }

    // Re-enable the NVIC interrupt for SPI Rx DMA
    HAL_NVIC_EnableIRQ(this->irqDMArx);
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	@ 0x2e
 8005f04:	4618      	mov	r0, r3
 8005f06:	f000 fd00 	bl	800690a <HAL_NVIC_EnableIRQ>
}
 8005f0a:	bf00      	nop
 8005f0c:	3708      	adds	r7, #8
 8005f0e:	46bd      	mov	sp, r7
 8005f10:	bd80      	pop	{r7, pc}
 8005f12:	bf00      	nop
 8005f14:	77726974 	.word	0x77726974
 8005f18:	30000000 	.word	0x30000000
 8005f1c:	72656164 	.word	0x72656164

08005f20 <_ZN11RemoraComms9getStatusEv>:



bool RemoraComms::getStatus(void)
{
 8005f20:	b480      	push	{r7}
 8005f22:	b083      	sub	sp, #12
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	6078      	str	r0, [r7, #4]
    return this->SPIdata;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	f893 3203 	ldrb.w	r3, [r3, #515]	@ 0x203
}
 8005f2e:	4618      	mov	r0, r3
 8005f30:	370c      	adds	r7, #12
 8005f32:	46bd      	mov	sp, r7
 8005f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f38:	4770      	bx	lr

08005f3a <_ZN11RemoraComms9setStatusEb>:

void RemoraComms::setStatus(bool status)
{
 8005f3a:	b480      	push	{r7}
 8005f3c:	b083      	sub	sp, #12
 8005f3e:	af00      	add	r7, sp, #0
 8005f40:	6078      	str	r0, [r7, #4]
 8005f42:	460b      	mov	r3, r1
 8005f44:	70fb      	strb	r3, [r7, #3]
    this->SPIdata = status;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	78fa      	ldrb	r2, [r7, #3]
 8005f4a:	f883 2203 	strb.w	r2, [r3, #515]	@ 0x203
}
 8005f4e:	bf00      	nop
 8005f50:	370c      	adds	r7, #12
 8005f52:	46bd      	mov	sp, r7
 8005f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f58:	4770      	bx	lr

08005f5a <_ZN11RemoraComms8getErrorEv>:

bool RemoraComms::getError(void)
{
 8005f5a:	b480      	push	{r7}
 8005f5c:	b083      	sub	sp, #12
 8005f5e:	af00      	add	r7, sp, #0
 8005f60:	6078      	str	r0, [r7, #4]
    return this->SPIdataError;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	f893 3204 	ldrb.w	r3, [r3, #516]	@ 0x204
}
 8005f68:	4618      	mov	r0, r3
 8005f6a:	370c      	adds	r7, #12
 8005f6c:	46bd      	mov	sp, r7
 8005f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f72:	4770      	bx	lr

08005f74 <_ZN11RemoraComms8setErrorEb>:

void RemoraComms::setError(bool error)
{
 8005f74:	b480      	push	{r7}
 8005f76:	b083      	sub	sp, #12
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	6078      	str	r0, [r7, #4]
 8005f7c:	460b      	mov	r3, r1
 8005f7e:	70fb      	strb	r3, [r7, #3]
    this->SPIdataError = error;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	78fa      	ldrb	r2, [r7, #3]
 8005f84:	f883 2204 	strb.w	r2, [r3, #516]	@ 0x204
}
 8005f88:	bf00      	nop
 8005f8a:	370c      	adds	r7, #12
 8005f8c:	46bd      	mov	sp, r7
 8005f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f92:	4770      	bx	lr

08005f94 <_ZN11RemoraComms6updateEv>:

void RemoraComms::update()
{
 8005f94:	b480      	push	{r7}
 8005f96:	b083      	sub	sp, #12
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	6078      	str	r0, [r7, #4]
	// unused for RemoraComms
}
 8005f9c:	bf00      	nop
 8005f9e:	370c      	adds	r7, #12
 8005fa0:	46bd      	mov	sp, r7
 8005fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa6:	4770      	bx	lr

08005fa8 <_ZN11RemoraCommsD1Ev>:
  __IO uint32_t Reserved0;
  __IO uint32_t IFCR;  /*!< DMA interrupt flag clear register */
} DMA_Base_Registers;


class RemoraComms : public Module
 8005fa8:	b580      	push	{r7, lr}
 8005faa:	b082      	sub	sp, #8
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	6078      	str	r0, [r7, #4]
 8005fb0:	4a05      	ldr	r2, [pc, #20]	@ (8005fc8 <_ZN11RemoraCommsD1Ev+0x20>)
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	601a      	str	r2, [r3, #0]
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	4618      	mov	r0, r3
 8005fba:	f7fe fda1 	bl	8004b00 <_ZN6ModuleD1Ev>
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	4618      	mov	r0, r3
 8005fc2:	3708      	adds	r7, #8
 8005fc4:	46bd      	mov	sp, r7
 8005fc6:	bd80      	pop	{r7, pc}
 8005fc8:	08014078 	.word	0x08014078

08005fcc <_ZN11RemoraCommsD0Ev>:
 8005fcc:	b580      	push	{r7, lr}
 8005fce:	b082      	sub	sp, #8
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	6078      	str	r0, [r7, #4]
 8005fd4:	6878      	ldr	r0, [r7, #4]
 8005fd6:	f7ff ffe7 	bl	8005fa8 <_ZN11RemoraCommsD1Ev>
 8005fda:	2220      	movs	r2, #32
 8005fdc:	f44f 7108 	mov.w	r1, #544	@ 0x220
 8005fe0:	6878      	ldr	r0, [r7, #4]
 8005fe2:	f00c fa86 	bl	80124f2 <_ZdlPvjSt11align_val_t>
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	4618      	mov	r0, r3
 8005fea:	3708      	adds	r7, #8
 8005fec:	46bd      	mov	sp, r7
 8005fee:	bd80      	pop	{r7, pc}

08005ff0 <_ZNSt12_Vector_baseIP6ModuleSaIS1_EEC1Ev>:
      allocator_type
      get_allocator() const _GLIBCXX_NOEXCEPT
      { return allocator_type(_M_get_Tp_allocator()); }

#if __cplusplus >= 201103L
      _Vector_base() = default;
 8005ff0:	b580      	push	{r7, lr}
 8005ff2:	b082      	sub	sp, #8
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	6078      	str	r0, [r7, #4]
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	4618      	mov	r0, r3
 8005ffc:	f000 f8bc 	bl	8006178 <_ZNSt12_Vector_baseIP6ModuleSaIS1_EE12_Vector_implC1Ev>
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	4618      	mov	r0, r3
 8006004:	3708      	adds	r7, #8
 8006006:	46bd      	mov	sp, r7
 8006008:	bd80      	pop	{r7, pc}

0800600a <_ZNSt6vectorIP6ModuleSaIS1_EEC1Ev>:

      /**
       *  @brief  Creates a %vector with no elements.
       */
#if __cplusplus >= 201103L
      vector() = default;
 800600a:	b580      	push	{r7, lr}
 800600c:	b082      	sub	sp, #8
 800600e:	af00      	add	r7, sp, #0
 8006010:	6078      	str	r0, [r7, #4]
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	4618      	mov	r0, r3
 8006016:	f7ff ffeb 	bl	8005ff0 <_ZNSt12_Vector_baseIP6ModuleSaIS1_EEC1Ev>
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	4618      	mov	r0, r3
 800601e:	3708      	adds	r7, #8
 8006020:	46bd      	mov	sp, r7
 8006022:	bd80      	pop	{r7, pc}

08006024 <_ZN9pruThreadC1EP11TIM_TypeDef9IRQn_Typem>:


using namespace std;

// Thread constructor
pruThread::pruThread(TIM_TypeDef* timer, IRQn_Type irq, uint32_t frequency) :
 8006024:	b580      	push	{r7, lr}
 8006026:	b084      	sub	sp, #16
 8006028:	af00      	add	r7, sp, #0
 800602a:	60f8      	str	r0, [r7, #12]
 800602c:	60b9      	str	r1, [r7, #8]
 800602e:	603b      	str	r3, [r7, #0]
 8006030:	4613      	mov	r3, r2
 8006032:	80fb      	strh	r3, [r7, #6]
	timer(timer),
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	68ba      	ldr	r2, [r7, #8]
 8006038:	605a      	str	r2, [r3, #4]
	irq(irq),
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	88fa      	ldrh	r2, [r7, #6]
 800603e:	811a      	strh	r2, [r3, #8]
	frequency(frequency)
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	683a      	ldr	r2, [r7, #0]
 8006044:	60da      	str	r2, [r3, #12]
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	3314      	adds	r3, #20
 800604a:	4618      	mov	r0, r3
 800604c:	f7ff ffdd 	bl	800600a <_ZNSt6vectorIP6ModuleSaIS1_EEC1Ev>
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	3320      	adds	r3, #32
 8006054:	4618      	mov	r0, r3
 8006056:	f7ff ffd8 	bl	800600a <_ZNSt6vectorIP6ModuleSaIS1_EEC1Ev>
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	332c      	adds	r3, #44	@ 0x2c
 800605e:	4618      	mov	r0, r3
 8006060:	f000 f89a 	bl	8006198 <_ZN9__gnu_cxx17__normal_iteratorIPP6ModuleSt6vectorIS2_SaIS2_EEEC1Ev>
{
	printf("	Creating thread %lu\n", this->frequency);
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	68db      	ldr	r3, [r3, #12]
 8006068:	4619      	mov	r1, r3
 800606a:	4804      	ldr	r0, [pc, #16]	@ (800607c <_ZN9pruThreadC1EP11TIM_TypeDef9IRQn_Typem+0x58>)
 800606c:	f00c fdea 	bl	8012c44 <iprintf>
}
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	4618      	mov	r0, r3
 8006074:	3710      	adds	r7, #16
 8006076:	46bd      	mov	sp, r7
 8006078:	bd80      	pop	{r7, pc}
 800607a:	bf00      	nop
 800607c:	08013f50 	.word	0x08013f50

08006080 <_ZN9pruThread11startThreadEv>:

void pruThread::startThread(void)
{
 8006080:	b590      	push	{r4, r7, lr}
 8006082:	b085      	sub	sp, #20
 8006084:	af02      	add	r7, sp, #8
 8006086:	6078      	str	r0, [r7, #4]
	TimerPtr = new pruTimer(this->timer, this->irq, this->frequency, this);
 8006088:	2014      	movs	r0, #20
 800608a:	f00c fa44 	bl	8012516 <_Znwj>
 800608e:	4603      	mov	r3, r0
 8006090:	461c      	mov	r4, r3
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	6859      	ldr	r1, [r3, #4]
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	68d8      	ldr	r0, [r3, #12]
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	9300      	str	r3, [sp, #0]
 80060a4:	4603      	mov	r3, r0
 80060a6:	4620      	mov	r0, r4
 80060a8:	f000 f93e 	bl	8006328 <_ZN8pruTimerC1EP11TIM_TypeDef9IRQn_TypemP9pruThread>
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	601c      	str	r4, [r3, #0]
}
 80060b0:	bf00      	nop
 80060b2:	370c      	adds	r7, #12
 80060b4:	46bd      	mov	sp, r7
 80060b6:	bd90      	pop	{r4, r7, pc}

080060b8 <_ZN9pruThread3runEv>:
	this->hasThreadPost = true;
}


void pruThread::run(void)
{
 80060b8:	b590      	push	{r4, r7, lr}
 80060ba:	b085      	sub	sp, #20
 80060bc:	af00      	add	r7, sp, #0
 80060be:	6078      	str	r0, [r7, #4]
	// iterate over the Thread pointer vector to run all instances of Module::runModule()
	for (iter = vThread.begin(); iter != vThread.end(); ++iter) (*iter)->runModule();
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	3314      	adds	r3, #20
 80060c4:	687c      	ldr	r4, [r7, #4]
 80060c6:	4618      	mov	r0, r3
 80060c8:	f000 f874 	bl	80061b4 <_ZNSt6vectorIP6ModuleSaIS1_EE5beginEv>
 80060cc:	62e0      	str	r0, [r4, #44]	@ 0x2c
 80060ce:	e00e      	b.n	80060ee <_ZN9pruThread3runEv+0x36>
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	332c      	adds	r3, #44	@ 0x2c
 80060d4:	4618      	mov	r0, r3
 80060d6:	f000 f8b6 	bl	8006246 <_ZNK9__gnu_cxx17__normal_iteratorIPP6ModuleSt6vectorIS2_SaIS2_EEEdeEv>
 80060da:	4603      	mov	r3, r0
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	4618      	mov	r0, r3
 80060e0:	f7fe fd2e 	bl	8004b40 <_ZN6Module9runModuleEv>
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	332c      	adds	r3, #44	@ 0x2c
 80060e8:	4618      	mov	r0, r3
 80060ea:	f000 f89c 	bl	8006226 <_ZN9__gnu_cxx17__normal_iteratorIPP6ModuleSt6vectorIS2_SaIS2_EEEppEv>
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	f103 042c 	add.w	r4, r3, #44	@ 0x2c
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	3314      	adds	r3, #20
 80060f8:	4618      	mov	r0, r3
 80060fa:	f000 f86b 	bl	80061d4 <_ZNSt6vectorIP6ModuleSaIS1_EE3endEv>
 80060fe:	4603      	mov	r3, r0
 8006100:	60bb      	str	r3, [r7, #8]
 8006102:	f107 0308 	add.w	r3, r7, #8
 8006106:	4619      	mov	r1, r3
 8006108:	4620      	mov	r0, r4
 800610a:	f000 f874 	bl	80061f6 <_ZN9__gnu_cxxneIPP6ModuleSt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>
 800610e:	4603      	mov	r3, r0
 8006110:	2b00      	cmp	r3, #0
 8006112:	d1dd      	bne.n	80060d0 <_ZN9pruThread3runEv+0x18>

	// iterate over the second vector that contains module pointers to run after (post) the main vector
	if (hasThreadPost)
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	7c1b      	ldrb	r3, [r3, #16]
 8006118:	2b00      	cmp	r3, #0
 800611a:	d029      	beq.n	8006170 <_ZN9pruThread3runEv+0xb8>
	{
		for (iter = vThreadPost.begin(); iter != vThreadPost.end(); ++iter) (*iter)->runModulePost();
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	3320      	adds	r3, #32
 8006120:	687c      	ldr	r4, [r7, #4]
 8006122:	4618      	mov	r0, r3
 8006124:	f000 f846 	bl	80061b4 <_ZNSt6vectorIP6ModuleSaIS1_EE5beginEv>
 8006128:	62e0      	str	r0, [r4, #44]	@ 0x2c
 800612a:	e00e      	b.n	800614a <_ZN9pruThread3runEv+0x92>
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	332c      	adds	r3, #44	@ 0x2c
 8006130:	4618      	mov	r0, r3
 8006132:	f000 f888 	bl	8006246 <_ZNK9__gnu_cxx17__normal_iteratorIPP6ModuleSt6vectorIS2_SaIS2_EEEdeEv>
 8006136:	4603      	mov	r3, r0
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	4618      	mov	r0, r3
 800613c:	f7fe fd22 	bl	8004b84 <_ZN6Module13runModulePostEv>
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	332c      	adds	r3, #44	@ 0x2c
 8006144:	4618      	mov	r0, r3
 8006146:	f000 f86e 	bl	8006226 <_ZN9__gnu_cxx17__normal_iteratorIPP6ModuleSt6vectorIS2_SaIS2_EEEppEv>
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	f103 042c 	add.w	r4, r3, #44	@ 0x2c
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	3320      	adds	r3, #32
 8006154:	4618      	mov	r0, r3
 8006156:	f000 f83d 	bl	80061d4 <_ZNSt6vectorIP6ModuleSaIS1_EE3endEv>
 800615a:	4603      	mov	r3, r0
 800615c:	60fb      	str	r3, [r7, #12]
 800615e:	f107 030c 	add.w	r3, r7, #12
 8006162:	4619      	mov	r1, r3
 8006164:	4620      	mov	r0, r4
 8006166:	f000 f846 	bl	80061f6 <_ZN9__gnu_cxxneIPP6ModuleSt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>
 800616a:	4603      	mov	r3, r0
 800616c:	2b00      	cmp	r3, #0
 800616e:	d1dd      	bne.n	800612c <_ZN9pruThread3runEv+0x74>
	}
}
 8006170:	bf00      	nop
 8006172:	3714      	adds	r7, #20
 8006174:	46bd      	mov	sp, r7
 8006176:	bd90      	pop	{r4, r7, pc}

08006178 <_ZNSt12_Vector_baseIP6ModuleSaIS1_EE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 8006178:	b580      	push	{r7, lr}
 800617a:	b082      	sub	sp, #8
 800617c:	af00      	add	r7, sp, #0
 800617e:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 8006180:	6878      	ldr	r0, [r7, #4]
 8006182:	f000 f86c 	bl	800625e <_ZNSaIP6ModuleEC1Ev>
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	4618      	mov	r0, r3
 800618a:	f000 f874 	bl	8006276 <_ZNSt12_Vector_baseIP6ModuleSaIS1_EE17_Vector_impl_dataC1Ev>
	{ }
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	4618      	mov	r0, r3
 8006192:	3708      	adds	r7, #8
 8006194:	46bd      	mov	sp, r7
 8006196:	bd80      	pop	{r7, pc}

08006198 <_ZN9__gnu_cxx17__normal_iteratorIPP6ModuleSt6vectorIS2_SaIS2_EEEC1Ev>:

#if __cplusplus > 201703L && __cpp_lib_concepts
      using iterator_concept = std::__detail::__iter_concept<_Iterator>;
#endif

      _GLIBCXX_CONSTEXPR __normal_iterator() _GLIBCXX_NOEXCEPT
 8006198:	b480      	push	{r7}
 800619a:	b083      	sub	sp, #12
 800619c:	af00      	add	r7, sp, #0
 800619e:	6078      	str	r0, [r7, #4]
      : _M_current(_Iterator()) { }
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	2200      	movs	r2, #0
 80061a4:	601a      	str	r2, [r3, #0]
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	4618      	mov	r0, r3
 80061aa:	370c      	adds	r7, #12
 80061ac:	46bd      	mov	sp, r7
 80061ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b2:	4770      	bx	lr

080061b4 <_ZNSt6vectorIP6ModuleSaIS1_EE5beginEv>:
       *  element in the %vector.  Iteration is done in ordinary
       *  element order.
       */
      _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
      iterator
      begin() _GLIBCXX_NOEXCEPT
 80061b4:	b580      	push	{r7, lr}
 80061b6:	b084      	sub	sp, #16
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 80061bc:	687a      	ldr	r2, [r7, #4]
 80061be:	f107 030c 	add.w	r3, r7, #12
 80061c2:	4611      	mov	r1, r2
 80061c4:	4618      	mov	r0, r3
 80061c6:	f000 f86a 	bl	800629e <_ZN9__gnu_cxx17__normal_iteratorIPP6ModuleSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	4618      	mov	r0, r3
 80061ce:	3710      	adds	r7, #16
 80061d0:	46bd      	mov	sp, r7
 80061d2:	bd80      	pop	{r7, pc}

080061d4 <_ZNSt6vectorIP6ModuleSaIS1_EE3endEv>:
       *  element in the %vector.  Iteration is done in ordinary
       *  element order.
       */
      _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
      iterator
      end() _GLIBCXX_NOEXCEPT
 80061d4:	b580      	push	{r7, lr}
 80061d6:	b084      	sub	sp, #16
 80061d8:	af00      	add	r7, sp, #0
 80061da:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	1d1a      	adds	r2, r3, #4
 80061e0:	f107 030c 	add.w	r3, r7, #12
 80061e4:	4611      	mov	r1, r2
 80061e6:	4618      	mov	r0, r3
 80061e8:	f000 f859 	bl	800629e <_ZN9__gnu_cxx17__normal_iteratorIPP6ModuleSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	4618      	mov	r0, r3
 80061f0:	3710      	adds	r7, #16
 80061f2:	46bd      	mov	sp, r7
 80061f4:	bd80      	pop	{r7, pc}

080061f6 <_ZN9__gnu_cxxneIPP6ModuleSt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>:
    { return __lhs.base() != __rhs.base(); }

  template<typename _Iterator, typename _Container>
    _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
    inline bool
    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
 80061f6:	b590      	push	{r4, r7, lr}
 80061f8:	b083      	sub	sp, #12
 80061fa:	af00      	add	r7, sp, #0
 80061fc:	6078      	str	r0, [r7, #4]
 80061fe:	6039      	str	r1, [r7, #0]
	       const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() != __rhs.base(); }
 8006200:	6878      	ldr	r0, [r7, #4]
 8006202:	f000 f85c 	bl	80062be <_ZNK9__gnu_cxx17__normal_iteratorIPP6ModuleSt6vectorIS2_SaIS2_EEE4baseEv>
 8006206:	4603      	mov	r3, r0
 8006208:	681c      	ldr	r4, [r3, #0]
 800620a:	6838      	ldr	r0, [r7, #0]
 800620c:	f000 f857 	bl	80062be <_ZNK9__gnu_cxx17__normal_iteratorIPP6ModuleSt6vectorIS2_SaIS2_EEE4baseEv>
 8006210:	4603      	mov	r3, r0
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	429c      	cmp	r4, r3
 8006216:	bf14      	ite	ne
 8006218:	2301      	movne	r3, #1
 800621a:	2300      	moveq	r3, #0
 800621c:	b2db      	uxtb	r3, r3
 800621e:	4618      	mov	r0, r3
 8006220:	370c      	adds	r7, #12
 8006222:	46bd      	mov	sp, r7
 8006224:	bd90      	pop	{r4, r7, pc}

08006226 <_ZN9__gnu_cxx17__normal_iteratorIPP6ModuleSt6vectorIS2_SaIS2_EEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 8006226:	b480      	push	{r7}
 8006228:	b083      	sub	sp, #12
 800622a:	af00      	add	r7, sp, #0
 800622c:	6078      	str	r0, [r7, #4]
	++_M_current;
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	1d1a      	adds	r2, r3, #4
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	601a      	str	r2, [r3, #0]
	return *this;
 8006238:	687b      	ldr	r3, [r7, #4]
      }
 800623a:	4618      	mov	r0, r3
 800623c:	370c      	adds	r7, #12
 800623e:	46bd      	mov	sp, r7
 8006240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006244:	4770      	bx	lr

08006246 <_ZNK9__gnu_cxx17__normal_iteratorIPP6ModuleSt6vectorIS2_SaIS2_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8006246:	b480      	push	{r7}
 8006248:	b083      	sub	sp, #12
 800624a:	af00      	add	r7, sp, #0
 800624c:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	4618      	mov	r0, r3
 8006254:	370c      	adds	r7, #12
 8006256:	46bd      	mov	sp, r7
 8006258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800625c:	4770      	bx	lr

0800625e <_ZNSaIP6ModuleEC1Ev>:
#endif

      // _GLIBCXX_RESOLVE_LIB_DEFECTS
      // 3035. std::allocator's constructors should be constexpr
      _GLIBCXX20_CONSTEXPR
      allocator() _GLIBCXX_NOTHROW { }
 800625e:	b580      	push	{r7, lr}
 8006260:	b082      	sub	sp, #8
 8006262:	af00      	add	r7, sp, #0
 8006264:	6078      	str	r0, [r7, #4]
 8006266:	6878      	ldr	r0, [r7, #4]
 8006268:	f000 f834 	bl	80062d4 <_ZNSt15__new_allocatorIP6ModuleEC1Ev>
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	4618      	mov	r0, r3
 8006270:	3708      	adds	r7, #8
 8006272:	46bd      	mov	sp, r7
 8006274:	bd80      	pop	{r7, pc}

08006276 <_ZNSt12_Vector_baseIP6ModuleSaIS1_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 8006276:	b480      	push	{r7}
 8006278:	b083      	sub	sp, #12
 800627a:	af00      	add	r7, sp, #0
 800627c:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	2200      	movs	r2, #0
 8006282:	601a      	str	r2, [r3, #0]
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	2200      	movs	r2, #0
 8006288:	605a      	str	r2, [r3, #4]
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	2200      	movs	r2, #0
 800628e:	609a      	str	r2, [r3, #8]
	{ }
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	4618      	mov	r0, r3
 8006294:	370c      	adds	r7, #12
 8006296:	46bd      	mov	sp, r7
 8006298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800629c:	4770      	bx	lr

0800629e <_ZN9__gnu_cxx17__normal_iteratorIPP6ModuleSt6vectorIS2_SaIS2_EEEC1ERKS3_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 800629e:	b480      	push	{r7}
 80062a0:	b083      	sub	sp, #12
 80062a2:	af00      	add	r7, sp, #0
 80062a4:	6078      	str	r0, [r7, #4]
 80062a6:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 80062a8:	683b      	ldr	r3, [r7, #0]
 80062aa:	681a      	ldr	r2, [r3, #0]
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	601a      	str	r2, [r3, #0]
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	4618      	mov	r0, r3
 80062b4:	370c      	adds	r7, #12
 80062b6:	46bd      	mov	sp, r7
 80062b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062bc:	4770      	bx	lr

080062be <_ZNK9__gnu_cxx17__normal_iteratorIPP6ModuleSt6vectorIS2_SaIS2_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 80062be:	b480      	push	{r7}
 80062c0:	b083      	sub	sp, #12
 80062c2:	af00      	add	r7, sp, #0
 80062c4:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	4618      	mov	r0, r3
 80062ca:	370c      	adds	r7, #12
 80062cc:	46bd      	mov	sp, r7
 80062ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d2:	4770      	bx	lr

080062d4 <_ZNSt15__new_allocatorIP6ModuleEC1Ev>:
      // 2103. propagate_on_container_move_assignment
      typedef std::true_type propagate_on_container_move_assignment;
#endif

      _GLIBCXX20_CONSTEXPR
      __new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80062d4:	b480      	push	{r7}
 80062d6:	b083      	sub	sp, #12
 80062d8:	af00      	add	r7, sp, #0
 80062da:	6078      	str	r0, [r7, #4]
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	4618      	mov	r0, r3
 80062e0:	370c      	adds	r7, #12
 80062e2:	46bd      	mov	sp, r7
 80062e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e8:	4770      	bx	lr
	...

080062ec <__NVIC_EnableIRQ>:
{
 80062ec:	b480      	push	{r7}
 80062ee:	b083      	sub	sp, #12
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	4603      	mov	r3, r0
 80062f4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80062f6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	db0b      	blt.n	8006316 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80062fe:	88fb      	ldrh	r3, [r7, #6]
 8006300:	f003 021f 	and.w	r2, r3, #31
 8006304:	4907      	ldr	r1, [pc, #28]	@ (8006324 <__NVIC_EnableIRQ+0x38>)
 8006306:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800630a:	095b      	lsrs	r3, r3, #5
 800630c:	2001      	movs	r0, #1
 800630e:	fa00 f202 	lsl.w	r2, r0, r2
 8006312:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8006316:	bf00      	nop
 8006318:	370c      	adds	r7, #12
 800631a:	46bd      	mov	sp, r7
 800631c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006320:	4770      	bx	lr
 8006322:	bf00      	nop
 8006324:	e000e100 	.word	0xe000e100

08006328 <_ZN8pruTimerC1EP11TIM_TypeDef9IRQn_TypemP9pruThread>:
#include "pruThread.h"



// Timer constructor
pruTimer::pruTimer(TIM_TypeDef* timer, IRQn_Type irq, uint32_t frequency, pruThread* ownerPtr):
 8006328:	b590      	push	{r4, r7, lr}
 800632a:	b085      	sub	sp, #20
 800632c:	af00      	add	r7, sp, #0
 800632e:	60f8      	str	r0, [r7, #12]
 8006330:	60b9      	str	r1, [r7, #8]
 8006332:	603b      	str	r3, [r7, #0]
 8006334:	4613      	mov	r3, r2
 8006336:	80fb      	strh	r3, [r7, #6]
	timer(timer),
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	68ba      	ldr	r2, [r7, #8]
 800633c:	605a      	str	r2, [r3, #4]
	irq(irq),
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	88fa      	ldrh	r2, [r7, #6]
 8006342:	811a      	strh	r2, [r3, #8]
	frequency(frequency),
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	683a      	ldr	r2, [r7, #0]
 8006348:	60da      	str	r2, [r3, #12]
	timerOwnerPtr(ownerPtr)
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	6a3a      	ldr	r2, [r7, #32]
 800634e:	611a      	str	r2, [r3, #16]
{
	interruptPtr = new TimerInterrupt(this->irq, this);	// Instantiate a new Timer Interrupt object and pass "this" pointer
 8006350:	2008      	movs	r0, #8
 8006352:	f00c f8e0 	bl	8012516 <_Znwj>
 8006356:	4603      	mov	r3, r0
 8006358:	461c      	mov	r4, r3
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8006360:	68fa      	ldr	r2, [r7, #12]
 8006362:	4619      	mov	r1, r3
 8006364:	4620      	mov	r0, r4
 8006366:	f000 f8af 	bl	80064c8 <_ZN14TimerInterruptC1EiP8pruTimer>
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	601c      	str	r4, [r3, #0]

	this->startTimer();
 800636e:	68f8      	ldr	r0, [r7, #12]
 8006370:	f000 f812 	bl	8006398 <_ZN8pruTimer10startTimerEv>
}
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	4618      	mov	r0, r3
 8006378:	3714      	adds	r7, #20
 800637a:	46bd      	mov	sp, r7
 800637c:	bd90      	pop	{r4, r7, pc}

0800637e <_ZN8pruTimer9timerTickEv>:


void pruTimer::timerTick(void)
{
 800637e:	b580      	push	{r7, lr}
 8006380:	b082      	sub	sp, #8
 8006382:	af00      	add	r7, sp, #0
 8006384:	6078      	str	r0, [r7, #4]
	//Do something here
	this->timerOwnerPtr->run();
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	691b      	ldr	r3, [r3, #16]
 800638a:	4618      	mov	r0, r3
 800638c:	f7ff fe94 	bl	80060b8 <_ZN9pruThread3runEv>
}
 8006390:	bf00      	nop
 8006392:	3708      	adds	r7, #8
 8006394:	46bd      	mov	sp, r7
 8006396:	bd80      	pop	{r7, pc}

08006398 <_ZN8pruTimer10startTimerEv>:



void pruTimer::startTimer(void)
{
 8006398:	b580      	push	{r7, lr}
 800639a:	b086      	sub	sp, #24
 800639c:	af00      	add	r7, sp, #0
 800639e:	6078      	str	r0, [r7, #4]
    uint32_t TIM_CLK;

    if (this->timer == TIM2)
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	685b      	ldr	r3, [r3, #4]
 80063a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80063a8:	d116      	bne.n	80063d8 <_ZN8pruTimer10startTimerEv+0x40>
    {
        printf("	power on Timer 2\n\r");
 80063aa:	483f      	ldr	r0, [pc, #252]	@ (80064a8 <_ZN8pruTimer10startTimerEv+0x110>)
 80063ac:	f00c fc4a 	bl	8012c44 <iprintf>
        __HAL_RCC_TIM2_CLK_ENABLE();
 80063b0:	4b3e      	ldr	r3, [pc, #248]	@ (80064ac <_ZN8pruTimer10startTimerEv+0x114>)
 80063b2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80063b6:	4a3d      	ldr	r2, [pc, #244]	@ (80064ac <_ZN8pruTimer10startTimerEv+0x114>)
 80063b8:	f043 0301 	orr.w	r3, r3, #1
 80063bc:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80063c0:	4b3a      	ldr	r3, [pc, #232]	@ (80064ac <_ZN8pruTimer10startTimerEv+0x114>)
 80063c2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80063c6:	f003 0301 	and.w	r3, r3, #1
 80063ca:	613b      	str	r3, [r7, #16]
 80063cc:	693b      	ldr	r3, [r7, #16]
        TIM_CLK = APB1CLK;
 80063ce:	4b38      	ldr	r3, [pc, #224]	@ (80064b0 <_ZN8pruTimer10startTimerEv+0x118>)
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	085b      	lsrs	r3, r3, #1
 80063d4:	617b      	str	r3, [r7, #20]
 80063d6:	e036      	b.n	8006446 <_ZN8pruTimer10startTimerEv+0xae>
    }
    else if (this->timer == TIM3)
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	685b      	ldr	r3, [r3, #4]
 80063dc:	4a35      	ldr	r2, [pc, #212]	@ (80064b4 <_ZN8pruTimer10startTimerEv+0x11c>)
 80063de:	4293      	cmp	r3, r2
 80063e0:	d116      	bne.n	8006410 <_ZN8pruTimer10startTimerEv+0x78>
    {
        printf("	power on Timer 3\n\r");
 80063e2:	4835      	ldr	r0, [pc, #212]	@ (80064b8 <_ZN8pruTimer10startTimerEv+0x120>)
 80063e4:	f00c fc2e 	bl	8012c44 <iprintf>
        __HAL_RCC_TIM3_CLK_ENABLE();
 80063e8:	4b30      	ldr	r3, [pc, #192]	@ (80064ac <_ZN8pruTimer10startTimerEv+0x114>)
 80063ea:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80063ee:	4a2f      	ldr	r2, [pc, #188]	@ (80064ac <_ZN8pruTimer10startTimerEv+0x114>)
 80063f0:	f043 0302 	orr.w	r3, r3, #2
 80063f4:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80063f8:	4b2c      	ldr	r3, [pc, #176]	@ (80064ac <_ZN8pruTimer10startTimerEv+0x114>)
 80063fa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80063fe:	f003 0302 	and.w	r3, r3, #2
 8006402:	60fb      	str	r3, [r7, #12]
 8006404:	68fb      	ldr	r3, [r7, #12]
        TIM_CLK = APB1CLK;
 8006406:	4b2a      	ldr	r3, [pc, #168]	@ (80064b0 <_ZN8pruTimer10startTimerEv+0x118>)
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	085b      	lsrs	r3, r3, #1
 800640c:	617b      	str	r3, [r7, #20]
 800640e:	e01a      	b.n	8006446 <_ZN8pruTimer10startTimerEv+0xae>
    }
    else if (this->timer == TIM4)
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	685b      	ldr	r3, [r3, #4]
 8006414:	4a29      	ldr	r2, [pc, #164]	@ (80064bc <_ZN8pruTimer10startTimerEv+0x124>)
 8006416:	4293      	cmp	r3, r2
 8006418:	d115      	bne.n	8006446 <_ZN8pruTimer10startTimerEv+0xae>
    {
        printf("	power on Timer 4\n\r");
 800641a:	4829      	ldr	r0, [pc, #164]	@ (80064c0 <_ZN8pruTimer10startTimerEv+0x128>)
 800641c:	f00c fc12 	bl	8012c44 <iprintf>
        __HAL_RCC_TIM4_CLK_ENABLE();
 8006420:	4b22      	ldr	r3, [pc, #136]	@ (80064ac <_ZN8pruTimer10startTimerEv+0x114>)
 8006422:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006426:	4a21      	ldr	r2, [pc, #132]	@ (80064ac <_ZN8pruTimer10startTimerEv+0x114>)
 8006428:	f043 0304 	orr.w	r3, r3, #4
 800642c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8006430:	4b1e      	ldr	r3, [pc, #120]	@ (80064ac <_ZN8pruTimer10startTimerEv+0x114>)
 8006432:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006436:	f003 0304 	and.w	r3, r3, #4
 800643a:	60bb      	str	r3, [r7, #8]
 800643c:	68bb      	ldr	r3, [r7, #8]
        TIM_CLK = APB1CLK;
 800643e:	4b1c      	ldr	r3, [pc, #112]	@ (80064b0 <_ZN8pruTimer10startTimerEv+0x118>)
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	085b      	lsrs	r3, r3, #1
 8006444:	617b      	str	r3, [r7, #20]
    }

    //timer update frequency = TIM_CLK/(TIM_PSC+1)/(TIM_ARR + 1)

    this->timer->CR2 &= 0;                                            // UG used as trigg output
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	685b      	ldr	r3, [r3, #4]
 800644a:	685b      	ldr	r3, [r3, #4]
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	685b      	ldr	r3, [r3, #4]
 8006450:	2200      	movs	r2, #0
 8006452:	605a      	str	r2, [r3, #4]
    this->timer->PSC = TIM_PSC-1;                                     // prescaler
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	685b      	ldr	r3, [r3, #4]
 8006458:	2200      	movs	r2, #0
 800645a:	629a      	str	r2, [r3, #40]	@ 0x28
    this->timer->ARR = ((TIM_CLK / TIM_PSC / this->frequency) - 1);   // period           
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	68db      	ldr	r3, [r3, #12]
 8006460:	697a      	ldr	r2, [r7, #20]
 8006462:	fbb2 f2f3 	udiv	r2, r2, r3
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	685b      	ldr	r3, [r3, #4]
 800646a:	3a01      	subs	r2, #1
 800646c:	62da      	str	r2, [r3, #44]	@ 0x2c
    this->timer->EGR = TIM_EGR_UG;                                    // reinit the counter
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	685b      	ldr	r3, [r3, #4]
 8006472:	2201      	movs	r2, #1
 8006474:	615a      	str	r2, [r3, #20]
    this->timer->DIER = TIM_DIER_UIE;                                 // enable update interrupts
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	685b      	ldr	r3, [r3, #4]
 800647a:	2201      	movs	r2, #1
 800647c:	60da      	str	r2, [r3, #12]

    this->timer->CR1 |= TIM_CR1_CEN;                                  // enable timer
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	685b      	ldr	r3, [r3, #4]
 8006482:	681a      	ldr	r2, [r3, #0]
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	685b      	ldr	r3, [r3, #4]
 8006488:	f042 0201 	orr.w	r2, r2, #1
 800648c:	601a      	str	r2, [r3, #0]

    NVIC_EnableIRQ(this->irq);
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8006494:	4618      	mov	r0, r3
 8006496:	f7ff ff29 	bl	80062ec <__NVIC_EnableIRQ>

    printf("	timer started\n");
 800649a:	480a      	ldr	r0, [pc, #40]	@ (80064c4 <_ZN8pruTimer10startTimerEv+0x12c>)
 800649c:	f00c fc42 	bl	8012d24 <puts>
}
 80064a0:	bf00      	nop
 80064a2:	3718      	adds	r7, #24
 80064a4:	46bd      	mov	sp, r7
 80064a6:	bd80      	pop	{r7, pc}
 80064a8:	08013f84 	.word	0x08013f84
 80064ac:	58024400 	.word	0x58024400
 80064b0:	24000050 	.word	0x24000050
 80064b4:	40000400 	.word	0x40000400
 80064b8:	08013f98 	.word	0x08013f98
 80064bc:	40000800 	.word	0x40000800
 80064c0:	08013fac 	.word	0x08013fac
 80064c4:	08013fc0 	.word	0x08013fc0

080064c8 <_ZN14TimerInterruptC1EiP8pruTimer>:
#include "../interrupt/interrupt.h"
#include "timerInterrupt.h"
#include "timer.h"


TimerInterrupt::TimerInterrupt(int interruptNumber, pruTimer* owner)
 80064c8:	b580      	push	{r7, lr}
 80064ca:	b084      	sub	sp, #16
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	60f8      	str	r0, [r7, #12]
 80064d0:	60b9      	str	r1, [r7, #8]
 80064d2:	607a      	str	r2, [r7, #4]
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	4618      	mov	r0, r3
 80064d8:	f7fa faaa 	bl	8000a30 <_ZN9InterruptC1Ev>
 80064dc:	4a07      	ldr	r2, [pc, #28]	@ (80064fc <_ZN14TimerInterruptC1EiP8pruTimer+0x34>)
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	601a      	str	r2, [r3, #0]
{
	// Allows interrupt to access owner's data
	InterruptOwnerPtr = owner;
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	687a      	ldr	r2, [r7, #4]
 80064e6:	605a      	str	r2, [r3, #4]

	// When a device interrupt object is instantiated, the Register function must be called to let the
	// Interrupt base class know that there is an appropriate ISR function for the given interrupt.
	Interrupt::Register(interruptNumber, this);
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	4619      	mov	r1, r3
 80064ec:	68b8      	ldr	r0, [r7, #8]
 80064ee:	f7fa faaf 	bl	8000a50 <_ZN9Interrupt8RegisterEiPS_>
}
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	4618      	mov	r0, r3
 80064f6:	3710      	adds	r7, #16
 80064f8:	46bd      	mov	sp, r7
 80064fa:	bd80      	pop	{r7, pc}
 80064fc:	0801409c 	.word	0x0801409c

08006500 <_ZN14TimerInterrupt11ISR_HandlerEv>:


void TimerInterrupt::ISR_Handler(void)
{
 8006500:	b580      	push	{r7, lr}
 8006502:	b082      	sub	sp, #8
 8006504:	af00      	add	r7, sp, #0
 8006506:	6078      	str	r0, [r7, #4]
	this->InterruptOwnerPtr->timerTick();
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	685b      	ldr	r3, [r3, #4]
 800650c:	4618      	mov	r0, r3
 800650e:	f7ff ff36 	bl	800637e <_ZN8pruTimer9timerTickEv>
}
 8006512:	bf00      	nop
 8006514:	3708      	adds	r7, #8
 8006516:	46bd      	mov	sp, r7
 8006518:	bd80      	pop	{r7, pc}
	...

0800651c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800651c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8006554 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8006520:	f7fe fa4c 	bl	80049bc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8006524:	480c      	ldr	r0, [pc, #48]	@ (8006558 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8006526:	490d      	ldr	r1, [pc, #52]	@ (800655c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8006528:	4a0d      	ldr	r2, [pc, #52]	@ (8006560 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800652a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800652c:	e002      	b.n	8006534 <LoopCopyDataInit>

0800652e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800652e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006530:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006532:	3304      	adds	r3, #4

08006534 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006534:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006536:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006538:	d3f9      	bcc.n	800652e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800653a:	4a0a      	ldr	r2, [pc, #40]	@ (8006564 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800653c:	4c0a      	ldr	r4, [pc, #40]	@ (8006568 <LoopFillZerobss+0x22>)
  movs r3, #0
 800653e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006540:	e001      	b.n	8006546 <LoopFillZerobss>

08006542 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006542:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006544:	3204      	adds	r2, #4

08006546 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006546:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006548:	d3fb      	bcc.n	8006542 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800654a:	f00c fd8d 	bl	8013068 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800654e:	f7fb fc25 	bl	8001d9c <main>
  bx  lr
 8006552:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8006554:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8006558:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800655c:	240000bc 	.word	0x240000bc
  ldr r2, =_sidata
 8006560:	080141e4 	.word	0x080141e4
  ldr r2, =_sbss
 8006564:	240000c0 	.word	0x240000c0
  ldr r4, =_ebss
 8006568:	24000d0c 	.word	0x24000d0c

0800656c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800656c:	e7fe      	b.n	800656c <ADC3_IRQHandler>
	...

08006570 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006570:	b580      	push	{r7, lr}
 8006572:	b082      	sub	sp, #8
 8006574:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006576:	2003      	movs	r0, #3
 8006578:	f000 f9a2 	bl	80068c0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800657c:	f002 ff20 	bl	80093c0 <HAL_RCC_GetSysClockFreq>
 8006580:	4602      	mov	r2, r0
 8006582:	4b15      	ldr	r3, [pc, #84]	@ (80065d8 <HAL_Init+0x68>)
 8006584:	699b      	ldr	r3, [r3, #24]
 8006586:	0a1b      	lsrs	r3, r3, #8
 8006588:	f003 030f 	and.w	r3, r3, #15
 800658c:	4913      	ldr	r1, [pc, #76]	@ (80065dc <HAL_Init+0x6c>)
 800658e:	5ccb      	ldrb	r3, [r1, r3]
 8006590:	f003 031f 	and.w	r3, r3, #31
 8006594:	fa22 f303 	lsr.w	r3, r2, r3
 8006598:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800659a:	4b0f      	ldr	r3, [pc, #60]	@ (80065d8 <HAL_Init+0x68>)
 800659c:	699b      	ldr	r3, [r3, #24]
 800659e:	f003 030f 	and.w	r3, r3, #15
 80065a2:	4a0e      	ldr	r2, [pc, #56]	@ (80065dc <HAL_Init+0x6c>)
 80065a4:	5cd3      	ldrb	r3, [r2, r3]
 80065a6:	f003 031f 	and.w	r3, r3, #31
 80065aa:	687a      	ldr	r2, [r7, #4]
 80065ac:	fa22 f303 	lsr.w	r3, r2, r3
 80065b0:	4a0b      	ldr	r2, [pc, #44]	@ (80065e0 <HAL_Init+0x70>)
 80065b2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80065b4:	4a0b      	ldr	r2, [pc, #44]	@ (80065e4 <HAL_Init+0x74>)
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80065ba:	200f      	movs	r0, #15
 80065bc:	f000 f814 	bl	80065e8 <HAL_InitTick>
 80065c0:	4603      	mov	r3, r0
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d001      	beq.n	80065ca <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80065c6:	2301      	movs	r3, #1
 80065c8:	e002      	b.n	80065d0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80065ca:	f7fd ffdd 	bl	8004588 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80065ce:	2300      	movs	r3, #0
}
 80065d0:	4618      	mov	r0, r3
 80065d2:	3708      	adds	r7, #8
 80065d4:	46bd      	mov	sp, r7
 80065d6:	bd80      	pop	{r7, pc}
 80065d8:	58024400 	.word	0x58024400
 80065dc:	08014030 	.word	0x08014030
 80065e0:	24000054 	.word	0x24000054
 80065e4:	24000050 	.word	0x24000050

080065e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80065e8:	b580      	push	{r7, lr}
 80065ea:	b082      	sub	sp, #8
 80065ec:	af00      	add	r7, sp, #0
 80065ee:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80065f0:	4b15      	ldr	r3, [pc, #84]	@ (8006648 <HAL_InitTick+0x60>)
 80065f2:	781b      	ldrb	r3, [r3, #0]
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d101      	bne.n	80065fc <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80065f8:	2301      	movs	r3, #1
 80065fa:	e021      	b.n	8006640 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80065fc:	4b13      	ldr	r3, [pc, #76]	@ (800664c <HAL_InitTick+0x64>)
 80065fe:	681a      	ldr	r2, [r3, #0]
 8006600:	4b11      	ldr	r3, [pc, #68]	@ (8006648 <HAL_InitTick+0x60>)
 8006602:	781b      	ldrb	r3, [r3, #0]
 8006604:	4619      	mov	r1, r3
 8006606:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800660a:	fbb3 f3f1 	udiv	r3, r3, r1
 800660e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006612:	4618      	mov	r0, r3
 8006614:	f000 f98b 	bl	800692e <HAL_SYSTICK_Config>
 8006618:	4603      	mov	r3, r0
 800661a:	2b00      	cmp	r3, #0
 800661c:	d001      	beq.n	8006622 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800661e:	2301      	movs	r3, #1
 8006620:	e00e      	b.n	8006640 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	2b0f      	cmp	r3, #15
 8006626:	d80a      	bhi.n	800663e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006628:	2200      	movs	r2, #0
 800662a:	6879      	ldr	r1, [r7, #4]
 800662c:	f04f 30ff 	mov.w	r0, #4294967295
 8006630:	f000 f951 	bl	80068d6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006634:	4a06      	ldr	r2, [pc, #24]	@ (8006650 <HAL_InitTick+0x68>)
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800663a:	2300      	movs	r3, #0
 800663c:	e000      	b.n	8006640 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800663e:	2301      	movs	r3, #1
}
 8006640:	4618      	mov	r0, r3
 8006642:	3708      	adds	r7, #8
 8006644:	46bd      	mov	sp, r7
 8006646:	bd80      	pop	{r7, pc}
 8006648:	2400005c 	.word	0x2400005c
 800664c:	24000050 	.word	0x24000050
 8006650:	24000058 	.word	0x24000058

08006654 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006654:	b480      	push	{r7}
 8006656:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8006658:	4b06      	ldr	r3, [pc, #24]	@ (8006674 <HAL_IncTick+0x20>)
 800665a:	781b      	ldrb	r3, [r3, #0]
 800665c:	461a      	mov	r2, r3
 800665e:	4b06      	ldr	r3, [pc, #24]	@ (8006678 <HAL_IncTick+0x24>)
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	4413      	add	r3, r2
 8006664:	4a04      	ldr	r2, [pc, #16]	@ (8006678 <HAL_IncTick+0x24>)
 8006666:	6013      	str	r3, [r2, #0]
}
 8006668:	bf00      	nop
 800666a:	46bd      	mov	sp, r7
 800666c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006670:	4770      	bx	lr
 8006672:	bf00      	nop
 8006674:	2400005c 	.word	0x2400005c
 8006678:	24000500 	.word	0x24000500

0800667c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800667c:	b480      	push	{r7}
 800667e:	af00      	add	r7, sp, #0
  return uwTick;
 8006680:	4b03      	ldr	r3, [pc, #12]	@ (8006690 <HAL_GetTick+0x14>)
 8006682:	681b      	ldr	r3, [r3, #0]
}
 8006684:	4618      	mov	r0, r3
 8006686:	46bd      	mov	sp, r7
 8006688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800668c:	4770      	bx	lr
 800668e:	bf00      	nop
 8006690:	24000500 	.word	0x24000500

08006694 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006694:	b580      	push	{r7, lr}
 8006696:	b084      	sub	sp, #16
 8006698:	af00      	add	r7, sp, #0
 800669a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800669c:	f7ff ffee 	bl	800667c <HAL_GetTick>
 80066a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066ac:	d005      	beq.n	80066ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80066ae:	4b0a      	ldr	r3, [pc, #40]	@ (80066d8 <HAL_Delay+0x44>)
 80066b0:	781b      	ldrb	r3, [r3, #0]
 80066b2:	461a      	mov	r2, r3
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	4413      	add	r3, r2
 80066b8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80066ba:	bf00      	nop
 80066bc:	f7ff ffde 	bl	800667c <HAL_GetTick>
 80066c0:	4602      	mov	r2, r0
 80066c2:	68bb      	ldr	r3, [r7, #8]
 80066c4:	1ad3      	subs	r3, r2, r3
 80066c6:	68fa      	ldr	r2, [r7, #12]
 80066c8:	429a      	cmp	r2, r3
 80066ca:	d8f7      	bhi.n	80066bc <HAL_Delay+0x28>
  {
  }
}
 80066cc:	bf00      	nop
 80066ce:	bf00      	nop
 80066d0:	3710      	adds	r7, #16
 80066d2:	46bd      	mov	sp, r7
 80066d4:	bd80      	pop	{r7, pc}
 80066d6:	bf00      	nop
 80066d8:	2400005c 	.word	0x2400005c

080066dc <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80066dc:	b480      	push	{r7}
 80066de:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80066e0:	4b03      	ldr	r3, [pc, #12]	@ (80066f0 <HAL_GetREVID+0x14>)
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	0c1b      	lsrs	r3, r3, #16
}
 80066e6:	4618      	mov	r0, r3
 80066e8:	46bd      	mov	sp, r7
 80066ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ee:	4770      	bx	lr
 80066f0:	5c001000 	.word	0x5c001000

080066f4 <__NVIC_SetPriorityGrouping>:
{
 80066f4:	b480      	push	{r7}
 80066f6:	b085      	sub	sp, #20
 80066f8:	af00      	add	r7, sp, #0
 80066fa:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	f003 0307 	and.w	r3, r3, #7
 8006702:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006704:	4b0b      	ldr	r3, [pc, #44]	@ (8006734 <__NVIC_SetPriorityGrouping+0x40>)
 8006706:	68db      	ldr	r3, [r3, #12]
 8006708:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800670a:	68ba      	ldr	r2, [r7, #8]
 800670c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8006710:	4013      	ands	r3, r2
 8006712:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006718:	68bb      	ldr	r3, [r7, #8]
 800671a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800671c:	4b06      	ldr	r3, [pc, #24]	@ (8006738 <__NVIC_SetPriorityGrouping+0x44>)
 800671e:	4313      	orrs	r3, r2
 8006720:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006722:	4a04      	ldr	r2, [pc, #16]	@ (8006734 <__NVIC_SetPriorityGrouping+0x40>)
 8006724:	68bb      	ldr	r3, [r7, #8]
 8006726:	60d3      	str	r3, [r2, #12]
}
 8006728:	bf00      	nop
 800672a:	3714      	adds	r7, #20
 800672c:	46bd      	mov	sp, r7
 800672e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006732:	4770      	bx	lr
 8006734:	e000ed00 	.word	0xe000ed00
 8006738:	05fa0000 	.word	0x05fa0000

0800673c <__NVIC_GetPriorityGrouping>:
{
 800673c:	b480      	push	{r7}
 800673e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006740:	4b04      	ldr	r3, [pc, #16]	@ (8006754 <__NVIC_GetPriorityGrouping+0x18>)
 8006742:	68db      	ldr	r3, [r3, #12]
 8006744:	0a1b      	lsrs	r3, r3, #8
 8006746:	f003 0307 	and.w	r3, r3, #7
}
 800674a:	4618      	mov	r0, r3
 800674c:	46bd      	mov	sp, r7
 800674e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006752:	4770      	bx	lr
 8006754:	e000ed00 	.word	0xe000ed00

08006758 <__NVIC_EnableIRQ>:
{
 8006758:	b480      	push	{r7}
 800675a:	b083      	sub	sp, #12
 800675c:	af00      	add	r7, sp, #0
 800675e:	4603      	mov	r3, r0
 8006760:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8006762:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006766:	2b00      	cmp	r3, #0
 8006768:	db0b      	blt.n	8006782 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800676a:	88fb      	ldrh	r3, [r7, #6]
 800676c:	f003 021f 	and.w	r2, r3, #31
 8006770:	4907      	ldr	r1, [pc, #28]	@ (8006790 <__NVIC_EnableIRQ+0x38>)
 8006772:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006776:	095b      	lsrs	r3, r3, #5
 8006778:	2001      	movs	r0, #1
 800677a:	fa00 f202 	lsl.w	r2, r0, r2
 800677e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8006782:	bf00      	nop
 8006784:	370c      	adds	r7, #12
 8006786:	46bd      	mov	sp, r7
 8006788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800678c:	4770      	bx	lr
 800678e:	bf00      	nop
 8006790:	e000e100 	.word	0xe000e100

08006794 <__NVIC_SetPriority>:
{
 8006794:	b480      	push	{r7}
 8006796:	b083      	sub	sp, #12
 8006798:	af00      	add	r7, sp, #0
 800679a:	4603      	mov	r3, r0
 800679c:	6039      	str	r1, [r7, #0]
 800679e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80067a0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	db0a      	blt.n	80067be <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80067a8:	683b      	ldr	r3, [r7, #0]
 80067aa:	b2da      	uxtb	r2, r3
 80067ac:	490c      	ldr	r1, [pc, #48]	@ (80067e0 <__NVIC_SetPriority+0x4c>)
 80067ae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80067b2:	0112      	lsls	r2, r2, #4
 80067b4:	b2d2      	uxtb	r2, r2
 80067b6:	440b      	add	r3, r1
 80067b8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80067bc:	e00a      	b.n	80067d4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80067be:	683b      	ldr	r3, [r7, #0]
 80067c0:	b2da      	uxtb	r2, r3
 80067c2:	4908      	ldr	r1, [pc, #32]	@ (80067e4 <__NVIC_SetPriority+0x50>)
 80067c4:	88fb      	ldrh	r3, [r7, #6]
 80067c6:	f003 030f 	and.w	r3, r3, #15
 80067ca:	3b04      	subs	r3, #4
 80067cc:	0112      	lsls	r2, r2, #4
 80067ce:	b2d2      	uxtb	r2, r2
 80067d0:	440b      	add	r3, r1
 80067d2:	761a      	strb	r2, [r3, #24]
}
 80067d4:	bf00      	nop
 80067d6:	370c      	adds	r7, #12
 80067d8:	46bd      	mov	sp, r7
 80067da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067de:	4770      	bx	lr
 80067e0:	e000e100 	.word	0xe000e100
 80067e4:	e000ed00 	.word	0xe000ed00

080067e8 <NVIC_EncodePriority>:
{
 80067e8:	b480      	push	{r7}
 80067ea:	b089      	sub	sp, #36	@ 0x24
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	60f8      	str	r0, [r7, #12]
 80067f0:	60b9      	str	r1, [r7, #8]
 80067f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	f003 0307 	and.w	r3, r3, #7
 80067fa:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80067fc:	69fb      	ldr	r3, [r7, #28]
 80067fe:	f1c3 0307 	rsb	r3, r3, #7
 8006802:	2b04      	cmp	r3, #4
 8006804:	bf28      	it	cs
 8006806:	2304      	movcs	r3, #4
 8006808:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800680a:	69fb      	ldr	r3, [r7, #28]
 800680c:	3304      	adds	r3, #4
 800680e:	2b06      	cmp	r3, #6
 8006810:	d902      	bls.n	8006818 <NVIC_EncodePriority+0x30>
 8006812:	69fb      	ldr	r3, [r7, #28]
 8006814:	3b03      	subs	r3, #3
 8006816:	e000      	b.n	800681a <NVIC_EncodePriority+0x32>
 8006818:	2300      	movs	r3, #0
 800681a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800681c:	f04f 32ff 	mov.w	r2, #4294967295
 8006820:	69bb      	ldr	r3, [r7, #24]
 8006822:	fa02 f303 	lsl.w	r3, r2, r3
 8006826:	43da      	mvns	r2, r3
 8006828:	68bb      	ldr	r3, [r7, #8]
 800682a:	401a      	ands	r2, r3
 800682c:	697b      	ldr	r3, [r7, #20]
 800682e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006830:	f04f 31ff 	mov.w	r1, #4294967295
 8006834:	697b      	ldr	r3, [r7, #20]
 8006836:	fa01 f303 	lsl.w	r3, r1, r3
 800683a:	43d9      	mvns	r1, r3
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006840:	4313      	orrs	r3, r2
}
 8006842:	4618      	mov	r0, r3
 8006844:	3724      	adds	r7, #36	@ 0x24
 8006846:	46bd      	mov	sp, r7
 8006848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800684c:	4770      	bx	lr
	...

08006850 <__NVIC_SystemReset>:
{
 8006850:	b480      	push	{r7}
 8006852:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8006854:	f3bf 8f4f 	dsb	sy
}
 8006858:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800685a:	4b06      	ldr	r3, [pc, #24]	@ (8006874 <__NVIC_SystemReset+0x24>)
 800685c:	68db      	ldr	r3, [r3, #12]
 800685e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8006862:	4904      	ldr	r1, [pc, #16]	@ (8006874 <__NVIC_SystemReset+0x24>)
 8006864:	4b04      	ldr	r3, [pc, #16]	@ (8006878 <__NVIC_SystemReset+0x28>)
 8006866:	4313      	orrs	r3, r2
 8006868:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800686a:	f3bf 8f4f 	dsb	sy
}
 800686e:	bf00      	nop
    __NOP();
 8006870:	bf00      	nop
 8006872:	e7fd      	b.n	8006870 <__NVIC_SystemReset+0x20>
 8006874:	e000ed00 	.word	0xe000ed00
 8006878:	05fa0004 	.word	0x05fa0004

0800687c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800687c:	b580      	push	{r7, lr}
 800687e:	b082      	sub	sp, #8
 8006880:	af00      	add	r7, sp, #0
 8006882:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	3b01      	subs	r3, #1
 8006888:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800688c:	d301      	bcc.n	8006892 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800688e:	2301      	movs	r3, #1
 8006890:	e00f      	b.n	80068b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006892:	4a0a      	ldr	r2, [pc, #40]	@ (80068bc <SysTick_Config+0x40>)
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	3b01      	subs	r3, #1
 8006898:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800689a:	210f      	movs	r1, #15
 800689c:	f04f 30ff 	mov.w	r0, #4294967295
 80068a0:	f7ff ff78 	bl	8006794 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80068a4:	4b05      	ldr	r3, [pc, #20]	@ (80068bc <SysTick_Config+0x40>)
 80068a6:	2200      	movs	r2, #0
 80068a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80068aa:	4b04      	ldr	r3, [pc, #16]	@ (80068bc <SysTick_Config+0x40>)
 80068ac:	2207      	movs	r2, #7
 80068ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80068b0:	2300      	movs	r3, #0
}
 80068b2:	4618      	mov	r0, r3
 80068b4:	3708      	adds	r7, #8
 80068b6:	46bd      	mov	sp, r7
 80068b8:	bd80      	pop	{r7, pc}
 80068ba:	bf00      	nop
 80068bc:	e000e010 	.word	0xe000e010

080068c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80068c0:	b580      	push	{r7, lr}
 80068c2:	b082      	sub	sp, #8
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80068c8:	6878      	ldr	r0, [r7, #4]
 80068ca:	f7ff ff13 	bl	80066f4 <__NVIC_SetPriorityGrouping>
}
 80068ce:	bf00      	nop
 80068d0:	3708      	adds	r7, #8
 80068d2:	46bd      	mov	sp, r7
 80068d4:	bd80      	pop	{r7, pc}

080068d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80068d6:	b580      	push	{r7, lr}
 80068d8:	b086      	sub	sp, #24
 80068da:	af00      	add	r7, sp, #0
 80068dc:	4603      	mov	r3, r0
 80068de:	60b9      	str	r1, [r7, #8]
 80068e0:	607a      	str	r2, [r7, #4]
 80068e2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80068e4:	f7ff ff2a 	bl	800673c <__NVIC_GetPriorityGrouping>
 80068e8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80068ea:	687a      	ldr	r2, [r7, #4]
 80068ec:	68b9      	ldr	r1, [r7, #8]
 80068ee:	6978      	ldr	r0, [r7, #20]
 80068f0:	f7ff ff7a 	bl	80067e8 <NVIC_EncodePriority>
 80068f4:	4602      	mov	r2, r0
 80068f6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80068fa:	4611      	mov	r1, r2
 80068fc:	4618      	mov	r0, r3
 80068fe:	f7ff ff49 	bl	8006794 <__NVIC_SetPriority>
}
 8006902:	bf00      	nop
 8006904:	3718      	adds	r7, #24
 8006906:	46bd      	mov	sp, r7
 8006908:	bd80      	pop	{r7, pc}

0800690a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800690a:	b580      	push	{r7, lr}
 800690c:	b082      	sub	sp, #8
 800690e:	af00      	add	r7, sp, #0
 8006910:	4603      	mov	r3, r0
 8006912:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006914:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006918:	4618      	mov	r0, r3
 800691a:	f7ff ff1d 	bl	8006758 <__NVIC_EnableIRQ>
}
 800691e:	bf00      	nop
 8006920:	3708      	adds	r7, #8
 8006922:	46bd      	mov	sp, r7
 8006924:	bd80      	pop	{r7, pc}

08006926 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8006926:	b580      	push	{r7, lr}
 8006928:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 800692a:	f7ff ff91 	bl	8006850 <__NVIC_SystemReset>

0800692e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800692e:	b580      	push	{r7, lr}
 8006930:	b082      	sub	sp, #8
 8006932:	af00      	add	r7, sp, #0
 8006934:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006936:	6878      	ldr	r0, [r7, #4]
 8006938:	f7ff ffa0 	bl	800687c <SysTick_Config>
 800693c:	4603      	mov	r3, r0
}
 800693e:	4618      	mov	r0, r3
 8006940:	3708      	adds	r7, #8
 8006942:	46bd      	mov	sp, r7
 8006944:	bd80      	pop	{r7, pc}
	...

08006948 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8006948:	b480      	push	{r7}
 800694a:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 800694c:	f3bf 8f5f 	dmb	sy
}
 8006950:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8006952:	4b07      	ldr	r3, [pc, #28]	@ (8006970 <HAL_MPU_Disable+0x28>)
 8006954:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006956:	4a06      	ldr	r2, [pc, #24]	@ (8006970 <HAL_MPU_Disable+0x28>)
 8006958:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800695c:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800695e:	4b05      	ldr	r3, [pc, #20]	@ (8006974 <HAL_MPU_Disable+0x2c>)
 8006960:	2200      	movs	r2, #0
 8006962:	605a      	str	r2, [r3, #4]
}
 8006964:	bf00      	nop
 8006966:	46bd      	mov	sp, r7
 8006968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800696c:	4770      	bx	lr
 800696e:	bf00      	nop
 8006970:	e000ed00 	.word	0xe000ed00
 8006974:	e000ed90 	.word	0xe000ed90

08006978 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8006978:	b480      	push	{r7}
 800697a:	b083      	sub	sp, #12
 800697c:	af00      	add	r7, sp, #0
 800697e:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8006980:	4a0b      	ldr	r2, [pc, #44]	@ (80069b0 <HAL_MPU_Enable+0x38>)
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	f043 0301 	orr.w	r3, r3, #1
 8006988:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800698a:	4b0a      	ldr	r3, [pc, #40]	@ (80069b4 <HAL_MPU_Enable+0x3c>)
 800698c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800698e:	4a09      	ldr	r2, [pc, #36]	@ (80069b4 <HAL_MPU_Enable+0x3c>)
 8006990:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006994:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8006996:	f3bf 8f4f 	dsb	sy
}
 800699a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800699c:	f3bf 8f6f 	isb	sy
}
 80069a0:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80069a2:	bf00      	nop
 80069a4:	370c      	adds	r7, #12
 80069a6:	46bd      	mov	sp, r7
 80069a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ac:	4770      	bx	lr
 80069ae:	bf00      	nop
 80069b0:	e000ed90 	.word	0xe000ed90
 80069b4:	e000ed00 	.word	0xe000ed00

080069b8 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 80069b8:	b480      	push	{r7}
 80069ba:	b083      	sub	sp, #12
 80069bc:	af00      	add	r7, sp, #0
 80069be:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	785a      	ldrb	r2, [r3, #1]
 80069c4:	4b1b      	ldr	r3, [pc, #108]	@ (8006a34 <HAL_MPU_ConfigRegion+0x7c>)
 80069c6:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 80069c8:	4b1a      	ldr	r3, [pc, #104]	@ (8006a34 <HAL_MPU_ConfigRegion+0x7c>)
 80069ca:	691b      	ldr	r3, [r3, #16]
 80069cc:	4a19      	ldr	r2, [pc, #100]	@ (8006a34 <HAL_MPU_ConfigRegion+0x7c>)
 80069ce:	f023 0301 	bic.w	r3, r3, #1
 80069d2:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 80069d4:	4a17      	ldr	r2, [pc, #92]	@ (8006a34 <HAL_MPU_ConfigRegion+0x7c>)
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	685b      	ldr	r3, [r3, #4]
 80069da:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	7b1b      	ldrb	r3, [r3, #12]
 80069e0:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	7adb      	ldrb	r3, [r3, #11]
 80069e6:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80069e8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	7a9b      	ldrb	r3, [r3, #10]
 80069ee:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80069f0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	7b5b      	ldrb	r3, [r3, #13]
 80069f6:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80069f8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	7b9b      	ldrb	r3, [r3, #14]
 80069fe:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8006a00:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	7bdb      	ldrb	r3, [r3, #15]
 8006a06:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8006a08:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	7a5b      	ldrb	r3, [r3, #9]
 8006a0e:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8006a10:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	7a1b      	ldrb	r3, [r3, #8]
 8006a16:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8006a18:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8006a1a:	687a      	ldr	r2, [r7, #4]
 8006a1c:	7812      	ldrb	r2, [r2, #0]
 8006a1e:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8006a20:	4a04      	ldr	r2, [pc, #16]	@ (8006a34 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8006a22:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8006a24:	6113      	str	r3, [r2, #16]
}
 8006a26:	bf00      	nop
 8006a28:	370c      	adds	r7, #12
 8006a2a:	46bd      	mov	sp, r7
 8006a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a30:	4770      	bx	lr
 8006a32:	bf00      	nop
 8006a34:	e000ed90 	.word	0xe000ed90

08006a38 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006a38:	b580      	push	{r7, lr}
 8006a3a:	b086      	sub	sp, #24
 8006a3c:	af00      	add	r7, sp, #0
 8006a3e:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8006a40:	f7ff fe1c 	bl	800667c <HAL_GetTick>
 8006a44:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d101      	bne.n	8006a50 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8006a4c:	2301      	movs	r3, #1
 8006a4e:	e316      	b.n	800707e <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	4a66      	ldr	r2, [pc, #408]	@ (8006bf0 <HAL_DMA_Init+0x1b8>)
 8006a56:	4293      	cmp	r3, r2
 8006a58:	d04a      	beq.n	8006af0 <HAL_DMA_Init+0xb8>
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	4a65      	ldr	r2, [pc, #404]	@ (8006bf4 <HAL_DMA_Init+0x1bc>)
 8006a60:	4293      	cmp	r3, r2
 8006a62:	d045      	beq.n	8006af0 <HAL_DMA_Init+0xb8>
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	4a63      	ldr	r2, [pc, #396]	@ (8006bf8 <HAL_DMA_Init+0x1c0>)
 8006a6a:	4293      	cmp	r3, r2
 8006a6c:	d040      	beq.n	8006af0 <HAL_DMA_Init+0xb8>
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	4a62      	ldr	r2, [pc, #392]	@ (8006bfc <HAL_DMA_Init+0x1c4>)
 8006a74:	4293      	cmp	r3, r2
 8006a76:	d03b      	beq.n	8006af0 <HAL_DMA_Init+0xb8>
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	4a60      	ldr	r2, [pc, #384]	@ (8006c00 <HAL_DMA_Init+0x1c8>)
 8006a7e:	4293      	cmp	r3, r2
 8006a80:	d036      	beq.n	8006af0 <HAL_DMA_Init+0xb8>
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	4a5f      	ldr	r2, [pc, #380]	@ (8006c04 <HAL_DMA_Init+0x1cc>)
 8006a88:	4293      	cmp	r3, r2
 8006a8a:	d031      	beq.n	8006af0 <HAL_DMA_Init+0xb8>
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	4a5d      	ldr	r2, [pc, #372]	@ (8006c08 <HAL_DMA_Init+0x1d0>)
 8006a92:	4293      	cmp	r3, r2
 8006a94:	d02c      	beq.n	8006af0 <HAL_DMA_Init+0xb8>
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	4a5c      	ldr	r2, [pc, #368]	@ (8006c0c <HAL_DMA_Init+0x1d4>)
 8006a9c:	4293      	cmp	r3, r2
 8006a9e:	d027      	beq.n	8006af0 <HAL_DMA_Init+0xb8>
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	4a5a      	ldr	r2, [pc, #360]	@ (8006c10 <HAL_DMA_Init+0x1d8>)
 8006aa6:	4293      	cmp	r3, r2
 8006aa8:	d022      	beq.n	8006af0 <HAL_DMA_Init+0xb8>
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	4a59      	ldr	r2, [pc, #356]	@ (8006c14 <HAL_DMA_Init+0x1dc>)
 8006ab0:	4293      	cmp	r3, r2
 8006ab2:	d01d      	beq.n	8006af0 <HAL_DMA_Init+0xb8>
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	4a57      	ldr	r2, [pc, #348]	@ (8006c18 <HAL_DMA_Init+0x1e0>)
 8006aba:	4293      	cmp	r3, r2
 8006abc:	d018      	beq.n	8006af0 <HAL_DMA_Init+0xb8>
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	4a56      	ldr	r2, [pc, #344]	@ (8006c1c <HAL_DMA_Init+0x1e4>)
 8006ac4:	4293      	cmp	r3, r2
 8006ac6:	d013      	beq.n	8006af0 <HAL_DMA_Init+0xb8>
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	4a54      	ldr	r2, [pc, #336]	@ (8006c20 <HAL_DMA_Init+0x1e8>)
 8006ace:	4293      	cmp	r3, r2
 8006ad0:	d00e      	beq.n	8006af0 <HAL_DMA_Init+0xb8>
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	4a53      	ldr	r2, [pc, #332]	@ (8006c24 <HAL_DMA_Init+0x1ec>)
 8006ad8:	4293      	cmp	r3, r2
 8006ada:	d009      	beq.n	8006af0 <HAL_DMA_Init+0xb8>
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	4a51      	ldr	r2, [pc, #324]	@ (8006c28 <HAL_DMA_Init+0x1f0>)
 8006ae2:	4293      	cmp	r3, r2
 8006ae4:	d004      	beq.n	8006af0 <HAL_DMA_Init+0xb8>
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	4a50      	ldr	r2, [pc, #320]	@ (8006c2c <HAL_DMA_Init+0x1f4>)
 8006aec:	4293      	cmp	r3, r2
 8006aee:	d101      	bne.n	8006af4 <HAL_DMA_Init+0xbc>
 8006af0:	2301      	movs	r3, #1
 8006af2:	e000      	b.n	8006af6 <HAL_DMA_Init+0xbe>
 8006af4:	2300      	movs	r3, #0
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	f000 813b 	beq.w	8006d72 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	2202      	movs	r2, #2
 8006b00:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	2200      	movs	r2, #0
 8006b08:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	4a37      	ldr	r2, [pc, #220]	@ (8006bf0 <HAL_DMA_Init+0x1b8>)
 8006b12:	4293      	cmp	r3, r2
 8006b14:	d04a      	beq.n	8006bac <HAL_DMA_Init+0x174>
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	4a36      	ldr	r2, [pc, #216]	@ (8006bf4 <HAL_DMA_Init+0x1bc>)
 8006b1c:	4293      	cmp	r3, r2
 8006b1e:	d045      	beq.n	8006bac <HAL_DMA_Init+0x174>
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	4a34      	ldr	r2, [pc, #208]	@ (8006bf8 <HAL_DMA_Init+0x1c0>)
 8006b26:	4293      	cmp	r3, r2
 8006b28:	d040      	beq.n	8006bac <HAL_DMA_Init+0x174>
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	4a33      	ldr	r2, [pc, #204]	@ (8006bfc <HAL_DMA_Init+0x1c4>)
 8006b30:	4293      	cmp	r3, r2
 8006b32:	d03b      	beq.n	8006bac <HAL_DMA_Init+0x174>
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	4a31      	ldr	r2, [pc, #196]	@ (8006c00 <HAL_DMA_Init+0x1c8>)
 8006b3a:	4293      	cmp	r3, r2
 8006b3c:	d036      	beq.n	8006bac <HAL_DMA_Init+0x174>
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	4a30      	ldr	r2, [pc, #192]	@ (8006c04 <HAL_DMA_Init+0x1cc>)
 8006b44:	4293      	cmp	r3, r2
 8006b46:	d031      	beq.n	8006bac <HAL_DMA_Init+0x174>
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	4a2e      	ldr	r2, [pc, #184]	@ (8006c08 <HAL_DMA_Init+0x1d0>)
 8006b4e:	4293      	cmp	r3, r2
 8006b50:	d02c      	beq.n	8006bac <HAL_DMA_Init+0x174>
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	4a2d      	ldr	r2, [pc, #180]	@ (8006c0c <HAL_DMA_Init+0x1d4>)
 8006b58:	4293      	cmp	r3, r2
 8006b5a:	d027      	beq.n	8006bac <HAL_DMA_Init+0x174>
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	4a2b      	ldr	r2, [pc, #172]	@ (8006c10 <HAL_DMA_Init+0x1d8>)
 8006b62:	4293      	cmp	r3, r2
 8006b64:	d022      	beq.n	8006bac <HAL_DMA_Init+0x174>
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	4a2a      	ldr	r2, [pc, #168]	@ (8006c14 <HAL_DMA_Init+0x1dc>)
 8006b6c:	4293      	cmp	r3, r2
 8006b6e:	d01d      	beq.n	8006bac <HAL_DMA_Init+0x174>
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	4a28      	ldr	r2, [pc, #160]	@ (8006c18 <HAL_DMA_Init+0x1e0>)
 8006b76:	4293      	cmp	r3, r2
 8006b78:	d018      	beq.n	8006bac <HAL_DMA_Init+0x174>
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	4a27      	ldr	r2, [pc, #156]	@ (8006c1c <HAL_DMA_Init+0x1e4>)
 8006b80:	4293      	cmp	r3, r2
 8006b82:	d013      	beq.n	8006bac <HAL_DMA_Init+0x174>
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	4a25      	ldr	r2, [pc, #148]	@ (8006c20 <HAL_DMA_Init+0x1e8>)
 8006b8a:	4293      	cmp	r3, r2
 8006b8c:	d00e      	beq.n	8006bac <HAL_DMA_Init+0x174>
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	4a24      	ldr	r2, [pc, #144]	@ (8006c24 <HAL_DMA_Init+0x1ec>)
 8006b94:	4293      	cmp	r3, r2
 8006b96:	d009      	beq.n	8006bac <HAL_DMA_Init+0x174>
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	4a22      	ldr	r2, [pc, #136]	@ (8006c28 <HAL_DMA_Init+0x1f0>)
 8006b9e:	4293      	cmp	r3, r2
 8006ba0:	d004      	beq.n	8006bac <HAL_DMA_Init+0x174>
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	4a21      	ldr	r2, [pc, #132]	@ (8006c2c <HAL_DMA_Init+0x1f4>)
 8006ba8:	4293      	cmp	r3, r2
 8006baa:	d108      	bne.n	8006bbe <HAL_DMA_Init+0x186>
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	681a      	ldr	r2, [r3, #0]
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	f022 0201 	bic.w	r2, r2, #1
 8006bba:	601a      	str	r2, [r3, #0]
 8006bbc:	e007      	b.n	8006bce <HAL_DMA_Init+0x196>
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	681a      	ldr	r2, [r3, #0]
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	f022 0201 	bic.w	r2, r2, #1
 8006bcc:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8006bce:	e02f      	b.n	8006c30 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006bd0:	f7ff fd54 	bl	800667c <HAL_GetTick>
 8006bd4:	4602      	mov	r2, r0
 8006bd6:	693b      	ldr	r3, [r7, #16]
 8006bd8:	1ad3      	subs	r3, r2, r3
 8006bda:	2b05      	cmp	r3, #5
 8006bdc:	d928      	bls.n	8006c30 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	2220      	movs	r2, #32
 8006be2:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	2203      	movs	r2, #3
 8006be8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8006bec:	2301      	movs	r3, #1
 8006bee:	e246      	b.n	800707e <HAL_DMA_Init+0x646>
 8006bf0:	40020010 	.word	0x40020010
 8006bf4:	40020028 	.word	0x40020028
 8006bf8:	40020040 	.word	0x40020040
 8006bfc:	40020058 	.word	0x40020058
 8006c00:	40020070 	.word	0x40020070
 8006c04:	40020088 	.word	0x40020088
 8006c08:	400200a0 	.word	0x400200a0
 8006c0c:	400200b8 	.word	0x400200b8
 8006c10:	40020410 	.word	0x40020410
 8006c14:	40020428 	.word	0x40020428
 8006c18:	40020440 	.word	0x40020440
 8006c1c:	40020458 	.word	0x40020458
 8006c20:	40020470 	.word	0x40020470
 8006c24:	40020488 	.word	0x40020488
 8006c28:	400204a0 	.word	0x400204a0
 8006c2c:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	f003 0301 	and.w	r3, r3, #1
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d1c8      	bne.n	8006bd0 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8006c46:	697a      	ldr	r2, [r7, #20]
 8006c48:	4b83      	ldr	r3, [pc, #524]	@ (8006e58 <HAL_DMA_Init+0x420>)
 8006c4a:	4013      	ands	r3, r2
 8006c4c:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8006c56:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	691b      	ldr	r3, [r3, #16]
 8006c5c:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006c62:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	699b      	ldr	r3, [r3, #24]
 8006c68:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006c6e:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	6a1b      	ldr	r3, [r3, #32]
 8006c74:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8006c76:	697a      	ldr	r2, [r7, #20]
 8006c78:	4313      	orrs	r3, r2
 8006c7a:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c80:	2b04      	cmp	r3, #4
 8006c82:	d107      	bne.n	8006c94 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c8c:	4313      	orrs	r3, r2
 8006c8e:	697a      	ldr	r2, [r7, #20]
 8006c90:	4313      	orrs	r3, r2
 8006c92:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8006c94:	4b71      	ldr	r3, [pc, #452]	@ (8006e5c <HAL_DMA_Init+0x424>)
 8006c96:	681a      	ldr	r2, [r3, #0]
 8006c98:	4b71      	ldr	r3, [pc, #452]	@ (8006e60 <HAL_DMA_Init+0x428>)
 8006c9a:	4013      	ands	r3, r2
 8006c9c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006ca0:	d328      	bcc.n	8006cf4 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	685b      	ldr	r3, [r3, #4]
 8006ca6:	2b28      	cmp	r3, #40	@ 0x28
 8006ca8:	d903      	bls.n	8006cb2 <HAL_DMA_Init+0x27a>
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	685b      	ldr	r3, [r3, #4]
 8006cae:	2b2e      	cmp	r3, #46	@ 0x2e
 8006cb0:	d917      	bls.n	8006ce2 <HAL_DMA_Init+0x2aa>
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	685b      	ldr	r3, [r3, #4]
 8006cb6:	2b3e      	cmp	r3, #62	@ 0x3e
 8006cb8:	d903      	bls.n	8006cc2 <HAL_DMA_Init+0x28a>
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	685b      	ldr	r3, [r3, #4]
 8006cbe:	2b42      	cmp	r3, #66	@ 0x42
 8006cc0:	d90f      	bls.n	8006ce2 <HAL_DMA_Init+0x2aa>
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	685b      	ldr	r3, [r3, #4]
 8006cc6:	2b46      	cmp	r3, #70	@ 0x46
 8006cc8:	d903      	bls.n	8006cd2 <HAL_DMA_Init+0x29a>
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	685b      	ldr	r3, [r3, #4]
 8006cce:	2b48      	cmp	r3, #72	@ 0x48
 8006cd0:	d907      	bls.n	8006ce2 <HAL_DMA_Init+0x2aa>
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	685b      	ldr	r3, [r3, #4]
 8006cd6:	2b4e      	cmp	r3, #78	@ 0x4e
 8006cd8:	d905      	bls.n	8006ce6 <HAL_DMA_Init+0x2ae>
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	685b      	ldr	r3, [r3, #4]
 8006cde:	2b52      	cmp	r3, #82	@ 0x52
 8006ce0:	d801      	bhi.n	8006ce6 <HAL_DMA_Init+0x2ae>
 8006ce2:	2301      	movs	r3, #1
 8006ce4:	e000      	b.n	8006ce8 <HAL_DMA_Init+0x2b0>
 8006ce6:	2300      	movs	r3, #0
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d003      	beq.n	8006cf4 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8006cec:	697b      	ldr	r3, [r7, #20]
 8006cee:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006cf2:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	697a      	ldr	r2, [r7, #20]
 8006cfa:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	695b      	ldr	r3, [r3, #20]
 8006d02:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8006d04:	697b      	ldr	r3, [r7, #20]
 8006d06:	f023 0307 	bic.w	r3, r3, #7
 8006d0a:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d10:	697a      	ldr	r2, [r7, #20]
 8006d12:	4313      	orrs	r3, r2
 8006d14:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d1a:	2b04      	cmp	r3, #4
 8006d1c:	d117      	bne.n	8006d4e <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d22:	697a      	ldr	r2, [r7, #20]
 8006d24:	4313      	orrs	r3, r2
 8006d26:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d00e      	beq.n	8006d4e <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8006d30:	6878      	ldr	r0, [r7, #4]
 8006d32:	f000 fdad 	bl	8007890 <DMA_CheckFifoParam>
 8006d36:	4603      	mov	r3, r0
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d008      	beq.n	8006d4e <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	2240      	movs	r2, #64	@ 0x40
 8006d40:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	2201      	movs	r2, #1
 8006d46:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8006d4a:	2301      	movs	r3, #1
 8006d4c:	e197      	b.n	800707e <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	697a      	ldr	r2, [r7, #20]
 8006d54:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006d56:	6878      	ldr	r0, [r7, #4]
 8006d58:	f000 fce8 	bl	800772c <DMA_CalcBaseAndBitshift>
 8006d5c:	4603      	mov	r3, r0
 8006d5e:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006d64:	f003 031f 	and.w	r3, r3, #31
 8006d68:	223f      	movs	r2, #63	@ 0x3f
 8006d6a:	409a      	lsls	r2, r3
 8006d6c:	68bb      	ldr	r3, [r7, #8]
 8006d6e:	609a      	str	r2, [r3, #8]
 8006d70:	e0cd      	b.n	8006f0e <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	4a3b      	ldr	r2, [pc, #236]	@ (8006e64 <HAL_DMA_Init+0x42c>)
 8006d78:	4293      	cmp	r3, r2
 8006d7a:	d022      	beq.n	8006dc2 <HAL_DMA_Init+0x38a>
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	4a39      	ldr	r2, [pc, #228]	@ (8006e68 <HAL_DMA_Init+0x430>)
 8006d82:	4293      	cmp	r3, r2
 8006d84:	d01d      	beq.n	8006dc2 <HAL_DMA_Init+0x38a>
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	4a38      	ldr	r2, [pc, #224]	@ (8006e6c <HAL_DMA_Init+0x434>)
 8006d8c:	4293      	cmp	r3, r2
 8006d8e:	d018      	beq.n	8006dc2 <HAL_DMA_Init+0x38a>
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	4a36      	ldr	r2, [pc, #216]	@ (8006e70 <HAL_DMA_Init+0x438>)
 8006d96:	4293      	cmp	r3, r2
 8006d98:	d013      	beq.n	8006dc2 <HAL_DMA_Init+0x38a>
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	4a35      	ldr	r2, [pc, #212]	@ (8006e74 <HAL_DMA_Init+0x43c>)
 8006da0:	4293      	cmp	r3, r2
 8006da2:	d00e      	beq.n	8006dc2 <HAL_DMA_Init+0x38a>
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	4a33      	ldr	r2, [pc, #204]	@ (8006e78 <HAL_DMA_Init+0x440>)
 8006daa:	4293      	cmp	r3, r2
 8006dac:	d009      	beq.n	8006dc2 <HAL_DMA_Init+0x38a>
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	4a32      	ldr	r2, [pc, #200]	@ (8006e7c <HAL_DMA_Init+0x444>)
 8006db4:	4293      	cmp	r3, r2
 8006db6:	d004      	beq.n	8006dc2 <HAL_DMA_Init+0x38a>
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	4a30      	ldr	r2, [pc, #192]	@ (8006e80 <HAL_DMA_Init+0x448>)
 8006dbe:	4293      	cmp	r3, r2
 8006dc0:	d101      	bne.n	8006dc6 <HAL_DMA_Init+0x38e>
 8006dc2:	2301      	movs	r3, #1
 8006dc4:	e000      	b.n	8006dc8 <HAL_DMA_Init+0x390>
 8006dc6:	2300      	movs	r3, #0
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	f000 8097 	beq.w	8006efc <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	4a24      	ldr	r2, [pc, #144]	@ (8006e64 <HAL_DMA_Init+0x42c>)
 8006dd4:	4293      	cmp	r3, r2
 8006dd6:	d021      	beq.n	8006e1c <HAL_DMA_Init+0x3e4>
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	4a22      	ldr	r2, [pc, #136]	@ (8006e68 <HAL_DMA_Init+0x430>)
 8006dde:	4293      	cmp	r3, r2
 8006de0:	d01c      	beq.n	8006e1c <HAL_DMA_Init+0x3e4>
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	4a21      	ldr	r2, [pc, #132]	@ (8006e6c <HAL_DMA_Init+0x434>)
 8006de8:	4293      	cmp	r3, r2
 8006dea:	d017      	beq.n	8006e1c <HAL_DMA_Init+0x3e4>
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	4a1f      	ldr	r2, [pc, #124]	@ (8006e70 <HAL_DMA_Init+0x438>)
 8006df2:	4293      	cmp	r3, r2
 8006df4:	d012      	beq.n	8006e1c <HAL_DMA_Init+0x3e4>
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	4a1e      	ldr	r2, [pc, #120]	@ (8006e74 <HAL_DMA_Init+0x43c>)
 8006dfc:	4293      	cmp	r3, r2
 8006dfe:	d00d      	beq.n	8006e1c <HAL_DMA_Init+0x3e4>
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	4a1c      	ldr	r2, [pc, #112]	@ (8006e78 <HAL_DMA_Init+0x440>)
 8006e06:	4293      	cmp	r3, r2
 8006e08:	d008      	beq.n	8006e1c <HAL_DMA_Init+0x3e4>
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	4a1b      	ldr	r2, [pc, #108]	@ (8006e7c <HAL_DMA_Init+0x444>)
 8006e10:	4293      	cmp	r3, r2
 8006e12:	d003      	beq.n	8006e1c <HAL_DMA_Init+0x3e4>
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	4a19      	ldr	r2, [pc, #100]	@ (8006e80 <HAL_DMA_Init+0x448>)
 8006e1a:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	2202      	movs	r2, #2
 8006e20:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	2200      	movs	r2, #0
 8006e28:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8006e34:	697a      	ldr	r2, [r7, #20]
 8006e36:	4b13      	ldr	r3, [pc, #76]	@ (8006e84 <HAL_DMA_Init+0x44c>)
 8006e38:	4013      	ands	r3, r2
 8006e3a:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	689b      	ldr	r3, [r3, #8]
 8006e40:	2b40      	cmp	r3, #64	@ 0x40
 8006e42:	d021      	beq.n	8006e88 <HAL_DMA_Init+0x450>
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	689b      	ldr	r3, [r3, #8]
 8006e48:	2b80      	cmp	r3, #128	@ 0x80
 8006e4a:	d102      	bne.n	8006e52 <HAL_DMA_Init+0x41a>
 8006e4c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8006e50:	e01b      	b.n	8006e8a <HAL_DMA_Init+0x452>
 8006e52:	2300      	movs	r3, #0
 8006e54:	e019      	b.n	8006e8a <HAL_DMA_Init+0x452>
 8006e56:	bf00      	nop
 8006e58:	fe10803f 	.word	0xfe10803f
 8006e5c:	5c001000 	.word	0x5c001000
 8006e60:	ffff0000 	.word	0xffff0000
 8006e64:	58025408 	.word	0x58025408
 8006e68:	5802541c 	.word	0x5802541c
 8006e6c:	58025430 	.word	0x58025430
 8006e70:	58025444 	.word	0x58025444
 8006e74:	58025458 	.word	0x58025458
 8006e78:	5802546c 	.word	0x5802546c
 8006e7c:	58025480 	.word	0x58025480
 8006e80:	58025494 	.word	0x58025494
 8006e84:	fffe000f 	.word	0xfffe000f
 8006e88:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8006e8a:	687a      	ldr	r2, [r7, #4]
 8006e8c:	68d2      	ldr	r2, [r2, #12]
 8006e8e:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8006e90:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	691b      	ldr	r3, [r3, #16]
 8006e96:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8006e98:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	695b      	ldr	r3, [r3, #20]
 8006e9e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8006ea0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	699b      	ldr	r3, [r3, #24]
 8006ea6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8006ea8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	69db      	ldr	r3, [r3, #28]
 8006eae:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8006eb0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	6a1b      	ldr	r3, [r3, #32]
 8006eb6:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8006eb8:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8006eba:	697a      	ldr	r2, [r7, #20]
 8006ebc:	4313      	orrs	r3, r2
 8006ebe:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	697a      	ldr	r2, [r7, #20]
 8006ec6:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	461a      	mov	r2, r3
 8006ece:	4b6e      	ldr	r3, [pc, #440]	@ (8007088 <HAL_DMA_Init+0x650>)
 8006ed0:	4413      	add	r3, r2
 8006ed2:	4a6e      	ldr	r2, [pc, #440]	@ (800708c <HAL_DMA_Init+0x654>)
 8006ed4:	fba2 2303 	umull	r2, r3, r2, r3
 8006ed8:	091b      	lsrs	r3, r3, #4
 8006eda:	009a      	lsls	r2, r3, #2
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006ee0:	6878      	ldr	r0, [r7, #4]
 8006ee2:	f000 fc23 	bl	800772c <DMA_CalcBaseAndBitshift>
 8006ee6:	4603      	mov	r3, r0
 8006ee8:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006eee:	f003 031f 	and.w	r3, r3, #31
 8006ef2:	2201      	movs	r2, #1
 8006ef4:	409a      	lsls	r2, r3
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	605a      	str	r2, [r3, #4]
 8006efa:	e008      	b.n	8006f0e <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	2240      	movs	r2, #64	@ 0x40
 8006f00:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	2203      	movs	r2, #3
 8006f06:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8006f0a:	2301      	movs	r3, #1
 8006f0c:	e0b7      	b.n	800707e <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	4a5f      	ldr	r2, [pc, #380]	@ (8007090 <HAL_DMA_Init+0x658>)
 8006f14:	4293      	cmp	r3, r2
 8006f16:	d072      	beq.n	8006ffe <HAL_DMA_Init+0x5c6>
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	4a5d      	ldr	r2, [pc, #372]	@ (8007094 <HAL_DMA_Init+0x65c>)
 8006f1e:	4293      	cmp	r3, r2
 8006f20:	d06d      	beq.n	8006ffe <HAL_DMA_Init+0x5c6>
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	4a5c      	ldr	r2, [pc, #368]	@ (8007098 <HAL_DMA_Init+0x660>)
 8006f28:	4293      	cmp	r3, r2
 8006f2a:	d068      	beq.n	8006ffe <HAL_DMA_Init+0x5c6>
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	4a5a      	ldr	r2, [pc, #360]	@ (800709c <HAL_DMA_Init+0x664>)
 8006f32:	4293      	cmp	r3, r2
 8006f34:	d063      	beq.n	8006ffe <HAL_DMA_Init+0x5c6>
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	4a59      	ldr	r2, [pc, #356]	@ (80070a0 <HAL_DMA_Init+0x668>)
 8006f3c:	4293      	cmp	r3, r2
 8006f3e:	d05e      	beq.n	8006ffe <HAL_DMA_Init+0x5c6>
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	4a57      	ldr	r2, [pc, #348]	@ (80070a4 <HAL_DMA_Init+0x66c>)
 8006f46:	4293      	cmp	r3, r2
 8006f48:	d059      	beq.n	8006ffe <HAL_DMA_Init+0x5c6>
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	4a56      	ldr	r2, [pc, #344]	@ (80070a8 <HAL_DMA_Init+0x670>)
 8006f50:	4293      	cmp	r3, r2
 8006f52:	d054      	beq.n	8006ffe <HAL_DMA_Init+0x5c6>
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	4a54      	ldr	r2, [pc, #336]	@ (80070ac <HAL_DMA_Init+0x674>)
 8006f5a:	4293      	cmp	r3, r2
 8006f5c:	d04f      	beq.n	8006ffe <HAL_DMA_Init+0x5c6>
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	4a53      	ldr	r2, [pc, #332]	@ (80070b0 <HAL_DMA_Init+0x678>)
 8006f64:	4293      	cmp	r3, r2
 8006f66:	d04a      	beq.n	8006ffe <HAL_DMA_Init+0x5c6>
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	4a51      	ldr	r2, [pc, #324]	@ (80070b4 <HAL_DMA_Init+0x67c>)
 8006f6e:	4293      	cmp	r3, r2
 8006f70:	d045      	beq.n	8006ffe <HAL_DMA_Init+0x5c6>
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	4a50      	ldr	r2, [pc, #320]	@ (80070b8 <HAL_DMA_Init+0x680>)
 8006f78:	4293      	cmp	r3, r2
 8006f7a:	d040      	beq.n	8006ffe <HAL_DMA_Init+0x5c6>
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	4a4e      	ldr	r2, [pc, #312]	@ (80070bc <HAL_DMA_Init+0x684>)
 8006f82:	4293      	cmp	r3, r2
 8006f84:	d03b      	beq.n	8006ffe <HAL_DMA_Init+0x5c6>
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	4a4d      	ldr	r2, [pc, #308]	@ (80070c0 <HAL_DMA_Init+0x688>)
 8006f8c:	4293      	cmp	r3, r2
 8006f8e:	d036      	beq.n	8006ffe <HAL_DMA_Init+0x5c6>
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	4a4b      	ldr	r2, [pc, #300]	@ (80070c4 <HAL_DMA_Init+0x68c>)
 8006f96:	4293      	cmp	r3, r2
 8006f98:	d031      	beq.n	8006ffe <HAL_DMA_Init+0x5c6>
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	4a4a      	ldr	r2, [pc, #296]	@ (80070c8 <HAL_DMA_Init+0x690>)
 8006fa0:	4293      	cmp	r3, r2
 8006fa2:	d02c      	beq.n	8006ffe <HAL_DMA_Init+0x5c6>
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	4a48      	ldr	r2, [pc, #288]	@ (80070cc <HAL_DMA_Init+0x694>)
 8006faa:	4293      	cmp	r3, r2
 8006fac:	d027      	beq.n	8006ffe <HAL_DMA_Init+0x5c6>
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	4a47      	ldr	r2, [pc, #284]	@ (80070d0 <HAL_DMA_Init+0x698>)
 8006fb4:	4293      	cmp	r3, r2
 8006fb6:	d022      	beq.n	8006ffe <HAL_DMA_Init+0x5c6>
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	4a45      	ldr	r2, [pc, #276]	@ (80070d4 <HAL_DMA_Init+0x69c>)
 8006fbe:	4293      	cmp	r3, r2
 8006fc0:	d01d      	beq.n	8006ffe <HAL_DMA_Init+0x5c6>
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	4a44      	ldr	r2, [pc, #272]	@ (80070d8 <HAL_DMA_Init+0x6a0>)
 8006fc8:	4293      	cmp	r3, r2
 8006fca:	d018      	beq.n	8006ffe <HAL_DMA_Init+0x5c6>
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	4a42      	ldr	r2, [pc, #264]	@ (80070dc <HAL_DMA_Init+0x6a4>)
 8006fd2:	4293      	cmp	r3, r2
 8006fd4:	d013      	beq.n	8006ffe <HAL_DMA_Init+0x5c6>
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	4a41      	ldr	r2, [pc, #260]	@ (80070e0 <HAL_DMA_Init+0x6a8>)
 8006fdc:	4293      	cmp	r3, r2
 8006fde:	d00e      	beq.n	8006ffe <HAL_DMA_Init+0x5c6>
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	4a3f      	ldr	r2, [pc, #252]	@ (80070e4 <HAL_DMA_Init+0x6ac>)
 8006fe6:	4293      	cmp	r3, r2
 8006fe8:	d009      	beq.n	8006ffe <HAL_DMA_Init+0x5c6>
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	4a3e      	ldr	r2, [pc, #248]	@ (80070e8 <HAL_DMA_Init+0x6b0>)
 8006ff0:	4293      	cmp	r3, r2
 8006ff2:	d004      	beq.n	8006ffe <HAL_DMA_Init+0x5c6>
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	4a3c      	ldr	r2, [pc, #240]	@ (80070ec <HAL_DMA_Init+0x6b4>)
 8006ffa:	4293      	cmp	r3, r2
 8006ffc:	d101      	bne.n	8007002 <HAL_DMA_Init+0x5ca>
 8006ffe:	2301      	movs	r3, #1
 8007000:	e000      	b.n	8007004 <HAL_DMA_Init+0x5cc>
 8007002:	2300      	movs	r3, #0
 8007004:	2b00      	cmp	r3, #0
 8007006:	d032      	beq.n	800706e <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8007008:	6878      	ldr	r0, [r7, #4]
 800700a:	f000 fcbd 	bl	8007988 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	689b      	ldr	r3, [r3, #8]
 8007012:	2b80      	cmp	r3, #128	@ 0x80
 8007014:	d102      	bne.n	800701c <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	2200      	movs	r2, #0
 800701a:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	685a      	ldr	r2, [r3, #4]
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007024:	b2d2      	uxtb	r2, r2
 8007026:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800702c:	687a      	ldr	r2, [r7, #4]
 800702e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8007030:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	685b      	ldr	r3, [r3, #4]
 8007036:	2b00      	cmp	r3, #0
 8007038:	d010      	beq.n	800705c <HAL_DMA_Init+0x624>
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	685b      	ldr	r3, [r3, #4]
 800703e:	2b08      	cmp	r3, #8
 8007040:	d80c      	bhi.n	800705c <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8007042:	6878      	ldr	r0, [r7, #4]
 8007044:	f000 fd3a 	bl	8007abc <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800704c:	2200      	movs	r2, #0
 800704e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007054:	687a      	ldr	r2, [r7, #4]
 8007056:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8007058:	605a      	str	r2, [r3, #4]
 800705a:	e008      	b.n	800706e <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	2200      	movs	r2, #0
 8007060:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	2200      	movs	r2, #0
 8007066:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	2200      	movs	r2, #0
 800706c:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	2200      	movs	r2, #0
 8007072:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	2201      	movs	r2, #1
 8007078:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800707c:	2300      	movs	r3, #0
}
 800707e:	4618      	mov	r0, r3
 8007080:	3718      	adds	r7, #24
 8007082:	46bd      	mov	sp, r7
 8007084:	bd80      	pop	{r7, pc}
 8007086:	bf00      	nop
 8007088:	a7fdabf8 	.word	0xa7fdabf8
 800708c:	cccccccd 	.word	0xcccccccd
 8007090:	40020010 	.word	0x40020010
 8007094:	40020028 	.word	0x40020028
 8007098:	40020040 	.word	0x40020040
 800709c:	40020058 	.word	0x40020058
 80070a0:	40020070 	.word	0x40020070
 80070a4:	40020088 	.word	0x40020088
 80070a8:	400200a0 	.word	0x400200a0
 80070ac:	400200b8 	.word	0x400200b8
 80070b0:	40020410 	.word	0x40020410
 80070b4:	40020428 	.word	0x40020428
 80070b8:	40020440 	.word	0x40020440
 80070bc:	40020458 	.word	0x40020458
 80070c0:	40020470 	.word	0x40020470
 80070c4:	40020488 	.word	0x40020488
 80070c8:	400204a0 	.word	0x400204a0
 80070cc:	400204b8 	.word	0x400204b8
 80070d0:	58025408 	.word	0x58025408
 80070d4:	5802541c 	.word	0x5802541c
 80070d8:	58025430 	.word	0x58025430
 80070dc:	58025444 	.word	0x58025444
 80070e0:	58025458 	.word	0x58025458
 80070e4:	5802546c 	.word	0x5802546c
 80070e8:	58025480 	.word	0x58025480
 80070ec:	58025494 	.word	0x58025494

080070f0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80070f0:	b580      	push	{r7, lr}
 80070f2:	b086      	sub	sp, #24
 80070f4:	af00      	add	r7, sp, #0
 80070f6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80070f8:	f7ff fac0 	bl	800667c <HAL_GetTick>
 80070fc:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	2b00      	cmp	r3, #0
 8007102:	d101      	bne.n	8007108 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8007104:	2301      	movs	r3, #1
 8007106:	e2dc      	b.n	80076c2 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800710e:	b2db      	uxtb	r3, r3
 8007110:	2b02      	cmp	r3, #2
 8007112:	d008      	beq.n	8007126 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	2280      	movs	r2, #128	@ 0x80
 8007118:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	2200      	movs	r2, #0
 800711e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 8007122:	2301      	movs	r3, #1
 8007124:	e2cd      	b.n	80076c2 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	4a76      	ldr	r2, [pc, #472]	@ (8007304 <HAL_DMA_Abort+0x214>)
 800712c:	4293      	cmp	r3, r2
 800712e:	d04a      	beq.n	80071c6 <HAL_DMA_Abort+0xd6>
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	4a74      	ldr	r2, [pc, #464]	@ (8007308 <HAL_DMA_Abort+0x218>)
 8007136:	4293      	cmp	r3, r2
 8007138:	d045      	beq.n	80071c6 <HAL_DMA_Abort+0xd6>
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	4a73      	ldr	r2, [pc, #460]	@ (800730c <HAL_DMA_Abort+0x21c>)
 8007140:	4293      	cmp	r3, r2
 8007142:	d040      	beq.n	80071c6 <HAL_DMA_Abort+0xd6>
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	4a71      	ldr	r2, [pc, #452]	@ (8007310 <HAL_DMA_Abort+0x220>)
 800714a:	4293      	cmp	r3, r2
 800714c:	d03b      	beq.n	80071c6 <HAL_DMA_Abort+0xd6>
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	4a70      	ldr	r2, [pc, #448]	@ (8007314 <HAL_DMA_Abort+0x224>)
 8007154:	4293      	cmp	r3, r2
 8007156:	d036      	beq.n	80071c6 <HAL_DMA_Abort+0xd6>
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	4a6e      	ldr	r2, [pc, #440]	@ (8007318 <HAL_DMA_Abort+0x228>)
 800715e:	4293      	cmp	r3, r2
 8007160:	d031      	beq.n	80071c6 <HAL_DMA_Abort+0xd6>
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	4a6d      	ldr	r2, [pc, #436]	@ (800731c <HAL_DMA_Abort+0x22c>)
 8007168:	4293      	cmp	r3, r2
 800716a:	d02c      	beq.n	80071c6 <HAL_DMA_Abort+0xd6>
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	4a6b      	ldr	r2, [pc, #428]	@ (8007320 <HAL_DMA_Abort+0x230>)
 8007172:	4293      	cmp	r3, r2
 8007174:	d027      	beq.n	80071c6 <HAL_DMA_Abort+0xd6>
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	4a6a      	ldr	r2, [pc, #424]	@ (8007324 <HAL_DMA_Abort+0x234>)
 800717c:	4293      	cmp	r3, r2
 800717e:	d022      	beq.n	80071c6 <HAL_DMA_Abort+0xd6>
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	4a68      	ldr	r2, [pc, #416]	@ (8007328 <HAL_DMA_Abort+0x238>)
 8007186:	4293      	cmp	r3, r2
 8007188:	d01d      	beq.n	80071c6 <HAL_DMA_Abort+0xd6>
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	4a67      	ldr	r2, [pc, #412]	@ (800732c <HAL_DMA_Abort+0x23c>)
 8007190:	4293      	cmp	r3, r2
 8007192:	d018      	beq.n	80071c6 <HAL_DMA_Abort+0xd6>
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	4a65      	ldr	r2, [pc, #404]	@ (8007330 <HAL_DMA_Abort+0x240>)
 800719a:	4293      	cmp	r3, r2
 800719c:	d013      	beq.n	80071c6 <HAL_DMA_Abort+0xd6>
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	4a64      	ldr	r2, [pc, #400]	@ (8007334 <HAL_DMA_Abort+0x244>)
 80071a4:	4293      	cmp	r3, r2
 80071a6:	d00e      	beq.n	80071c6 <HAL_DMA_Abort+0xd6>
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	4a62      	ldr	r2, [pc, #392]	@ (8007338 <HAL_DMA_Abort+0x248>)
 80071ae:	4293      	cmp	r3, r2
 80071b0:	d009      	beq.n	80071c6 <HAL_DMA_Abort+0xd6>
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	4a61      	ldr	r2, [pc, #388]	@ (800733c <HAL_DMA_Abort+0x24c>)
 80071b8:	4293      	cmp	r3, r2
 80071ba:	d004      	beq.n	80071c6 <HAL_DMA_Abort+0xd6>
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	4a5f      	ldr	r2, [pc, #380]	@ (8007340 <HAL_DMA_Abort+0x250>)
 80071c2:	4293      	cmp	r3, r2
 80071c4:	d101      	bne.n	80071ca <HAL_DMA_Abort+0xda>
 80071c6:	2301      	movs	r3, #1
 80071c8:	e000      	b.n	80071cc <HAL_DMA_Abort+0xdc>
 80071ca:	2300      	movs	r3, #0
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d013      	beq.n	80071f8 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	681a      	ldr	r2, [r3, #0]
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	f022 021e 	bic.w	r2, r2, #30
 80071de:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	695a      	ldr	r2, [r3, #20]
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80071ee:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	617b      	str	r3, [r7, #20]
 80071f6:	e00a      	b.n	800720e <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	681a      	ldr	r2, [r3, #0]
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	f022 020e 	bic.w	r2, r2, #14
 8007206:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	4a3c      	ldr	r2, [pc, #240]	@ (8007304 <HAL_DMA_Abort+0x214>)
 8007214:	4293      	cmp	r3, r2
 8007216:	d072      	beq.n	80072fe <HAL_DMA_Abort+0x20e>
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	4a3a      	ldr	r2, [pc, #232]	@ (8007308 <HAL_DMA_Abort+0x218>)
 800721e:	4293      	cmp	r3, r2
 8007220:	d06d      	beq.n	80072fe <HAL_DMA_Abort+0x20e>
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	4a39      	ldr	r2, [pc, #228]	@ (800730c <HAL_DMA_Abort+0x21c>)
 8007228:	4293      	cmp	r3, r2
 800722a:	d068      	beq.n	80072fe <HAL_DMA_Abort+0x20e>
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	4a37      	ldr	r2, [pc, #220]	@ (8007310 <HAL_DMA_Abort+0x220>)
 8007232:	4293      	cmp	r3, r2
 8007234:	d063      	beq.n	80072fe <HAL_DMA_Abort+0x20e>
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	4a36      	ldr	r2, [pc, #216]	@ (8007314 <HAL_DMA_Abort+0x224>)
 800723c:	4293      	cmp	r3, r2
 800723e:	d05e      	beq.n	80072fe <HAL_DMA_Abort+0x20e>
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	4a34      	ldr	r2, [pc, #208]	@ (8007318 <HAL_DMA_Abort+0x228>)
 8007246:	4293      	cmp	r3, r2
 8007248:	d059      	beq.n	80072fe <HAL_DMA_Abort+0x20e>
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	4a33      	ldr	r2, [pc, #204]	@ (800731c <HAL_DMA_Abort+0x22c>)
 8007250:	4293      	cmp	r3, r2
 8007252:	d054      	beq.n	80072fe <HAL_DMA_Abort+0x20e>
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	4a31      	ldr	r2, [pc, #196]	@ (8007320 <HAL_DMA_Abort+0x230>)
 800725a:	4293      	cmp	r3, r2
 800725c:	d04f      	beq.n	80072fe <HAL_DMA_Abort+0x20e>
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	4a30      	ldr	r2, [pc, #192]	@ (8007324 <HAL_DMA_Abort+0x234>)
 8007264:	4293      	cmp	r3, r2
 8007266:	d04a      	beq.n	80072fe <HAL_DMA_Abort+0x20e>
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	4a2e      	ldr	r2, [pc, #184]	@ (8007328 <HAL_DMA_Abort+0x238>)
 800726e:	4293      	cmp	r3, r2
 8007270:	d045      	beq.n	80072fe <HAL_DMA_Abort+0x20e>
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	4a2d      	ldr	r2, [pc, #180]	@ (800732c <HAL_DMA_Abort+0x23c>)
 8007278:	4293      	cmp	r3, r2
 800727a:	d040      	beq.n	80072fe <HAL_DMA_Abort+0x20e>
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	4a2b      	ldr	r2, [pc, #172]	@ (8007330 <HAL_DMA_Abort+0x240>)
 8007282:	4293      	cmp	r3, r2
 8007284:	d03b      	beq.n	80072fe <HAL_DMA_Abort+0x20e>
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	4a2a      	ldr	r2, [pc, #168]	@ (8007334 <HAL_DMA_Abort+0x244>)
 800728c:	4293      	cmp	r3, r2
 800728e:	d036      	beq.n	80072fe <HAL_DMA_Abort+0x20e>
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	4a28      	ldr	r2, [pc, #160]	@ (8007338 <HAL_DMA_Abort+0x248>)
 8007296:	4293      	cmp	r3, r2
 8007298:	d031      	beq.n	80072fe <HAL_DMA_Abort+0x20e>
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	4a27      	ldr	r2, [pc, #156]	@ (800733c <HAL_DMA_Abort+0x24c>)
 80072a0:	4293      	cmp	r3, r2
 80072a2:	d02c      	beq.n	80072fe <HAL_DMA_Abort+0x20e>
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	4a25      	ldr	r2, [pc, #148]	@ (8007340 <HAL_DMA_Abort+0x250>)
 80072aa:	4293      	cmp	r3, r2
 80072ac:	d027      	beq.n	80072fe <HAL_DMA_Abort+0x20e>
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	4a24      	ldr	r2, [pc, #144]	@ (8007344 <HAL_DMA_Abort+0x254>)
 80072b4:	4293      	cmp	r3, r2
 80072b6:	d022      	beq.n	80072fe <HAL_DMA_Abort+0x20e>
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	4a22      	ldr	r2, [pc, #136]	@ (8007348 <HAL_DMA_Abort+0x258>)
 80072be:	4293      	cmp	r3, r2
 80072c0:	d01d      	beq.n	80072fe <HAL_DMA_Abort+0x20e>
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	4a21      	ldr	r2, [pc, #132]	@ (800734c <HAL_DMA_Abort+0x25c>)
 80072c8:	4293      	cmp	r3, r2
 80072ca:	d018      	beq.n	80072fe <HAL_DMA_Abort+0x20e>
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	4a1f      	ldr	r2, [pc, #124]	@ (8007350 <HAL_DMA_Abort+0x260>)
 80072d2:	4293      	cmp	r3, r2
 80072d4:	d013      	beq.n	80072fe <HAL_DMA_Abort+0x20e>
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	4a1e      	ldr	r2, [pc, #120]	@ (8007354 <HAL_DMA_Abort+0x264>)
 80072dc:	4293      	cmp	r3, r2
 80072de:	d00e      	beq.n	80072fe <HAL_DMA_Abort+0x20e>
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	4a1c      	ldr	r2, [pc, #112]	@ (8007358 <HAL_DMA_Abort+0x268>)
 80072e6:	4293      	cmp	r3, r2
 80072e8:	d009      	beq.n	80072fe <HAL_DMA_Abort+0x20e>
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	4a1b      	ldr	r2, [pc, #108]	@ (800735c <HAL_DMA_Abort+0x26c>)
 80072f0:	4293      	cmp	r3, r2
 80072f2:	d004      	beq.n	80072fe <HAL_DMA_Abort+0x20e>
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	4a19      	ldr	r2, [pc, #100]	@ (8007360 <HAL_DMA_Abort+0x270>)
 80072fa:	4293      	cmp	r3, r2
 80072fc:	d132      	bne.n	8007364 <HAL_DMA_Abort+0x274>
 80072fe:	2301      	movs	r3, #1
 8007300:	e031      	b.n	8007366 <HAL_DMA_Abort+0x276>
 8007302:	bf00      	nop
 8007304:	40020010 	.word	0x40020010
 8007308:	40020028 	.word	0x40020028
 800730c:	40020040 	.word	0x40020040
 8007310:	40020058 	.word	0x40020058
 8007314:	40020070 	.word	0x40020070
 8007318:	40020088 	.word	0x40020088
 800731c:	400200a0 	.word	0x400200a0
 8007320:	400200b8 	.word	0x400200b8
 8007324:	40020410 	.word	0x40020410
 8007328:	40020428 	.word	0x40020428
 800732c:	40020440 	.word	0x40020440
 8007330:	40020458 	.word	0x40020458
 8007334:	40020470 	.word	0x40020470
 8007338:	40020488 	.word	0x40020488
 800733c:	400204a0 	.word	0x400204a0
 8007340:	400204b8 	.word	0x400204b8
 8007344:	58025408 	.word	0x58025408
 8007348:	5802541c 	.word	0x5802541c
 800734c:	58025430 	.word	0x58025430
 8007350:	58025444 	.word	0x58025444
 8007354:	58025458 	.word	0x58025458
 8007358:	5802546c 	.word	0x5802546c
 800735c:	58025480 	.word	0x58025480
 8007360:	58025494 	.word	0x58025494
 8007364:	2300      	movs	r3, #0
 8007366:	2b00      	cmp	r3, #0
 8007368:	d007      	beq.n	800737a <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800736e:	681a      	ldr	r2, [r3, #0]
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007374:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007378:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	4a6d      	ldr	r2, [pc, #436]	@ (8007534 <HAL_DMA_Abort+0x444>)
 8007380:	4293      	cmp	r3, r2
 8007382:	d04a      	beq.n	800741a <HAL_DMA_Abort+0x32a>
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	4a6b      	ldr	r2, [pc, #428]	@ (8007538 <HAL_DMA_Abort+0x448>)
 800738a:	4293      	cmp	r3, r2
 800738c:	d045      	beq.n	800741a <HAL_DMA_Abort+0x32a>
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	4a6a      	ldr	r2, [pc, #424]	@ (800753c <HAL_DMA_Abort+0x44c>)
 8007394:	4293      	cmp	r3, r2
 8007396:	d040      	beq.n	800741a <HAL_DMA_Abort+0x32a>
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	4a68      	ldr	r2, [pc, #416]	@ (8007540 <HAL_DMA_Abort+0x450>)
 800739e:	4293      	cmp	r3, r2
 80073a0:	d03b      	beq.n	800741a <HAL_DMA_Abort+0x32a>
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	4a67      	ldr	r2, [pc, #412]	@ (8007544 <HAL_DMA_Abort+0x454>)
 80073a8:	4293      	cmp	r3, r2
 80073aa:	d036      	beq.n	800741a <HAL_DMA_Abort+0x32a>
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	4a65      	ldr	r2, [pc, #404]	@ (8007548 <HAL_DMA_Abort+0x458>)
 80073b2:	4293      	cmp	r3, r2
 80073b4:	d031      	beq.n	800741a <HAL_DMA_Abort+0x32a>
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	4a64      	ldr	r2, [pc, #400]	@ (800754c <HAL_DMA_Abort+0x45c>)
 80073bc:	4293      	cmp	r3, r2
 80073be:	d02c      	beq.n	800741a <HAL_DMA_Abort+0x32a>
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	4a62      	ldr	r2, [pc, #392]	@ (8007550 <HAL_DMA_Abort+0x460>)
 80073c6:	4293      	cmp	r3, r2
 80073c8:	d027      	beq.n	800741a <HAL_DMA_Abort+0x32a>
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	4a61      	ldr	r2, [pc, #388]	@ (8007554 <HAL_DMA_Abort+0x464>)
 80073d0:	4293      	cmp	r3, r2
 80073d2:	d022      	beq.n	800741a <HAL_DMA_Abort+0x32a>
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	4a5f      	ldr	r2, [pc, #380]	@ (8007558 <HAL_DMA_Abort+0x468>)
 80073da:	4293      	cmp	r3, r2
 80073dc:	d01d      	beq.n	800741a <HAL_DMA_Abort+0x32a>
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	4a5e      	ldr	r2, [pc, #376]	@ (800755c <HAL_DMA_Abort+0x46c>)
 80073e4:	4293      	cmp	r3, r2
 80073e6:	d018      	beq.n	800741a <HAL_DMA_Abort+0x32a>
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	4a5c      	ldr	r2, [pc, #368]	@ (8007560 <HAL_DMA_Abort+0x470>)
 80073ee:	4293      	cmp	r3, r2
 80073f0:	d013      	beq.n	800741a <HAL_DMA_Abort+0x32a>
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	4a5b      	ldr	r2, [pc, #364]	@ (8007564 <HAL_DMA_Abort+0x474>)
 80073f8:	4293      	cmp	r3, r2
 80073fa:	d00e      	beq.n	800741a <HAL_DMA_Abort+0x32a>
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	4a59      	ldr	r2, [pc, #356]	@ (8007568 <HAL_DMA_Abort+0x478>)
 8007402:	4293      	cmp	r3, r2
 8007404:	d009      	beq.n	800741a <HAL_DMA_Abort+0x32a>
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	4a58      	ldr	r2, [pc, #352]	@ (800756c <HAL_DMA_Abort+0x47c>)
 800740c:	4293      	cmp	r3, r2
 800740e:	d004      	beq.n	800741a <HAL_DMA_Abort+0x32a>
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	4a56      	ldr	r2, [pc, #344]	@ (8007570 <HAL_DMA_Abort+0x480>)
 8007416:	4293      	cmp	r3, r2
 8007418:	d108      	bne.n	800742c <HAL_DMA_Abort+0x33c>
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	681a      	ldr	r2, [r3, #0]
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	f022 0201 	bic.w	r2, r2, #1
 8007428:	601a      	str	r2, [r3, #0]
 800742a:	e007      	b.n	800743c <HAL_DMA_Abort+0x34c>
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	681a      	ldr	r2, [r3, #0]
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	f022 0201 	bic.w	r2, r2, #1
 800743a:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800743c:	e013      	b.n	8007466 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800743e:	f7ff f91d 	bl	800667c <HAL_GetTick>
 8007442:	4602      	mov	r2, r0
 8007444:	693b      	ldr	r3, [r7, #16]
 8007446:	1ad3      	subs	r3, r2, r3
 8007448:	2b05      	cmp	r3, #5
 800744a:	d90c      	bls.n	8007466 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	2220      	movs	r2, #32
 8007450:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	2203      	movs	r2, #3
 8007456:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	2200      	movs	r2, #0
 800745e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8007462:	2301      	movs	r3, #1
 8007464:	e12d      	b.n	80076c2 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8007466:	697b      	ldr	r3, [r7, #20]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	f003 0301 	and.w	r3, r3, #1
 800746e:	2b00      	cmp	r3, #0
 8007470:	d1e5      	bne.n	800743e <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	4a2f      	ldr	r2, [pc, #188]	@ (8007534 <HAL_DMA_Abort+0x444>)
 8007478:	4293      	cmp	r3, r2
 800747a:	d04a      	beq.n	8007512 <HAL_DMA_Abort+0x422>
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	4a2d      	ldr	r2, [pc, #180]	@ (8007538 <HAL_DMA_Abort+0x448>)
 8007482:	4293      	cmp	r3, r2
 8007484:	d045      	beq.n	8007512 <HAL_DMA_Abort+0x422>
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	4a2c      	ldr	r2, [pc, #176]	@ (800753c <HAL_DMA_Abort+0x44c>)
 800748c:	4293      	cmp	r3, r2
 800748e:	d040      	beq.n	8007512 <HAL_DMA_Abort+0x422>
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	4a2a      	ldr	r2, [pc, #168]	@ (8007540 <HAL_DMA_Abort+0x450>)
 8007496:	4293      	cmp	r3, r2
 8007498:	d03b      	beq.n	8007512 <HAL_DMA_Abort+0x422>
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	4a29      	ldr	r2, [pc, #164]	@ (8007544 <HAL_DMA_Abort+0x454>)
 80074a0:	4293      	cmp	r3, r2
 80074a2:	d036      	beq.n	8007512 <HAL_DMA_Abort+0x422>
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	4a27      	ldr	r2, [pc, #156]	@ (8007548 <HAL_DMA_Abort+0x458>)
 80074aa:	4293      	cmp	r3, r2
 80074ac:	d031      	beq.n	8007512 <HAL_DMA_Abort+0x422>
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	4a26      	ldr	r2, [pc, #152]	@ (800754c <HAL_DMA_Abort+0x45c>)
 80074b4:	4293      	cmp	r3, r2
 80074b6:	d02c      	beq.n	8007512 <HAL_DMA_Abort+0x422>
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	4a24      	ldr	r2, [pc, #144]	@ (8007550 <HAL_DMA_Abort+0x460>)
 80074be:	4293      	cmp	r3, r2
 80074c0:	d027      	beq.n	8007512 <HAL_DMA_Abort+0x422>
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	4a23      	ldr	r2, [pc, #140]	@ (8007554 <HAL_DMA_Abort+0x464>)
 80074c8:	4293      	cmp	r3, r2
 80074ca:	d022      	beq.n	8007512 <HAL_DMA_Abort+0x422>
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	4a21      	ldr	r2, [pc, #132]	@ (8007558 <HAL_DMA_Abort+0x468>)
 80074d2:	4293      	cmp	r3, r2
 80074d4:	d01d      	beq.n	8007512 <HAL_DMA_Abort+0x422>
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	4a20      	ldr	r2, [pc, #128]	@ (800755c <HAL_DMA_Abort+0x46c>)
 80074dc:	4293      	cmp	r3, r2
 80074de:	d018      	beq.n	8007512 <HAL_DMA_Abort+0x422>
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	4a1e      	ldr	r2, [pc, #120]	@ (8007560 <HAL_DMA_Abort+0x470>)
 80074e6:	4293      	cmp	r3, r2
 80074e8:	d013      	beq.n	8007512 <HAL_DMA_Abort+0x422>
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	4a1d      	ldr	r2, [pc, #116]	@ (8007564 <HAL_DMA_Abort+0x474>)
 80074f0:	4293      	cmp	r3, r2
 80074f2:	d00e      	beq.n	8007512 <HAL_DMA_Abort+0x422>
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	4a1b      	ldr	r2, [pc, #108]	@ (8007568 <HAL_DMA_Abort+0x478>)
 80074fa:	4293      	cmp	r3, r2
 80074fc:	d009      	beq.n	8007512 <HAL_DMA_Abort+0x422>
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	4a1a      	ldr	r2, [pc, #104]	@ (800756c <HAL_DMA_Abort+0x47c>)
 8007504:	4293      	cmp	r3, r2
 8007506:	d004      	beq.n	8007512 <HAL_DMA_Abort+0x422>
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	4a18      	ldr	r2, [pc, #96]	@ (8007570 <HAL_DMA_Abort+0x480>)
 800750e:	4293      	cmp	r3, r2
 8007510:	d101      	bne.n	8007516 <HAL_DMA_Abort+0x426>
 8007512:	2301      	movs	r3, #1
 8007514:	e000      	b.n	8007518 <HAL_DMA_Abort+0x428>
 8007516:	2300      	movs	r3, #0
 8007518:	2b00      	cmp	r3, #0
 800751a:	d02b      	beq.n	8007574 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007520:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007526:	f003 031f 	and.w	r3, r3, #31
 800752a:	223f      	movs	r2, #63	@ 0x3f
 800752c:	409a      	lsls	r2, r3
 800752e:	68bb      	ldr	r3, [r7, #8]
 8007530:	609a      	str	r2, [r3, #8]
 8007532:	e02a      	b.n	800758a <HAL_DMA_Abort+0x49a>
 8007534:	40020010 	.word	0x40020010
 8007538:	40020028 	.word	0x40020028
 800753c:	40020040 	.word	0x40020040
 8007540:	40020058 	.word	0x40020058
 8007544:	40020070 	.word	0x40020070
 8007548:	40020088 	.word	0x40020088
 800754c:	400200a0 	.word	0x400200a0
 8007550:	400200b8 	.word	0x400200b8
 8007554:	40020410 	.word	0x40020410
 8007558:	40020428 	.word	0x40020428
 800755c:	40020440 	.word	0x40020440
 8007560:	40020458 	.word	0x40020458
 8007564:	40020470 	.word	0x40020470
 8007568:	40020488 	.word	0x40020488
 800756c:	400204a0 	.word	0x400204a0
 8007570:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007578:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800757e:	f003 031f 	and.w	r3, r3, #31
 8007582:	2201      	movs	r2, #1
 8007584:	409a      	lsls	r2, r3
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	4a4f      	ldr	r2, [pc, #316]	@ (80076cc <HAL_DMA_Abort+0x5dc>)
 8007590:	4293      	cmp	r3, r2
 8007592:	d072      	beq.n	800767a <HAL_DMA_Abort+0x58a>
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	4a4d      	ldr	r2, [pc, #308]	@ (80076d0 <HAL_DMA_Abort+0x5e0>)
 800759a:	4293      	cmp	r3, r2
 800759c:	d06d      	beq.n	800767a <HAL_DMA_Abort+0x58a>
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	4a4c      	ldr	r2, [pc, #304]	@ (80076d4 <HAL_DMA_Abort+0x5e4>)
 80075a4:	4293      	cmp	r3, r2
 80075a6:	d068      	beq.n	800767a <HAL_DMA_Abort+0x58a>
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	4a4a      	ldr	r2, [pc, #296]	@ (80076d8 <HAL_DMA_Abort+0x5e8>)
 80075ae:	4293      	cmp	r3, r2
 80075b0:	d063      	beq.n	800767a <HAL_DMA_Abort+0x58a>
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	4a49      	ldr	r2, [pc, #292]	@ (80076dc <HAL_DMA_Abort+0x5ec>)
 80075b8:	4293      	cmp	r3, r2
 80075ba:	d05e      	beq.n	800767a <HAL_DMA_Abort+0x58a>
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	4a47      	ldr	r2, [pc, #284]	@ (80076e0 <HAL_DMA_Abort+0x5f0>)
 80075c2:	4293      	cmp	r3, r2
 80075c4:	d059      	beq.n	800767a <HAL_DMA_Abort+0x58a>
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	4a46      	ldr	r2, [pc, #280]	@ (80076e4 <HAL_DMA_Abort+0x5f4>)
 80075cc:	4293      	cmp	r3, r2
 80075ce:	d054      	beq.n	800767a <HAL_DMA_Abort+0x58a>
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	4a44      	ldr	r2, [pc, #272]	@ (80076e8 <HAL_DMA_Abort+0x5f8>)
 80075d6:	4293      	cmp	r3, r2
 80075d8:	d04f      	beq.n	800767a <HAL_DMA_Abort+0x58a>
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	4a43      	ldr	r2, [pc, #268]	@ (80076ec <HAL_DMA_Abort+0x5fc>)
 80075e0:	4293      	cmp	r3, r2
 80075e2:	d04a      	beq.n	800767a <HAL_DMA_Abort+0x58a>
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	4a41      	ldr	r2, [pc, #260]	@ (80076f0 <HAL_DMA_Abort+0x600>)
 80075ea:	4293      	cmp	r3, r2
 80075ec:	d045      	beq.n	800767a <HAL_DMA_Abort+0x58a>
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	4a40      	ldr	r2, [pc, #256]	@ (80076f4 <HAL_DMA_Abort+0x604>)
 80075f4:	4293      	cmp	r3, r2
 80075f6:	d040      	beq.n	800767a <HAL_DMA_Abort+0x58a>
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	4a3e      	ldr	r2, [pc, #248]	@ (80076f8 <HAL_DMA_Abort+0x608>)
 80075fe:	4293      	cmp	r3, r2
 8007600:	d03b      	beq.n	800767a <HAL_DMA_Abort+0x58a>
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	4a3d      	ldr	r2, [pc, #244]	@ (80076fc <HAL_DMA_Abort+0x60c>)
 8007608:	4293      	cmp	r3, r2
 800760a:	d036      	beq.n	800767a <HAL_DMA_Abort+0x58a>
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	4a3b      	ldr	r2, [pc, #236]	@ (8007700 <HAL_DMA_Abort+0x610>)
 8007612:	4293      	cmp	r3, r2
 8007614:	d031      	beq.n	800767a <HAL_DMA_Abort+0x58a>
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	4a3a      	ldr	r2, [pc, #232]	@ (8007704 <HAL_DMA_Abort+0x614>)
 800761c:	4293      	cmp	r3, r2
 800761e:	d02c      	beq.n	800767a <HAL_DMA_Abort+0x58a>
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	4a38      	ldr	r2, [pc, #224]	@ (8007708 <HAL_DMA_Abort+0x618>)
 8007626:	4293      	cmp	r3, r2
 8007628:	d027      	beq.n	800767a <HAL_DMA_Abort+0x58a>
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	4a37      	ldr	r2, [pc, #220]	@ (800770c <HAL_DMA_Abort+0x61c>)
 8007630:	4293      	cmp	r3, r2
 8007632:	d022      	beq.n	800767a <HAL_DMA_Abort+0x58a>
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	4a35      	ldr	r2, [pc, #212]	@ (8007710 <HAL_DMA_Abort+0x620>)
 800763a:	4293      	cmp	r3, r2
 800763c:	d01d      	beq.n	800767a <HAL_DMA_Abort+0x58a>
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	4a34      	ldr	r2, [pc, #208]	@ (8007714 <HAL_DMA_Abort+0x624>)
 8007644:	4293      	cmp	r3, r2
 8007646:	d018      	beq.n	800767a <HAL_DMA_Abort+0x58a>
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	4a32      	ldr	r2, [pc, #200]	@ (8007718 <HAL_DMA_Abort+0x628>)
 800764e:	4293      	cmp	r3, r2
 8007650:	d013      	beq.n	800767a <HAL_DMA_Abort+0x58a>
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	4a31      	ldr	r2, [pc, #196]	@ (800771c <HAL_DMA_Abort+0x62c>)
 8007658:	4293      	cmp	r3, r2
 800765a:	d00e      	beq.n	800767a <HAL_DMA_Abort+0x58a>
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	4a2f      	ldr	r2, [pc, #188]	@ (8007720 <HAL_DMA_Abort+0x630>)
 8007662:	4293      	cmp	r3, r2
 8007664:	d009      	beq.n	800767a <HAL_DMA_Abort+0x58a>
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	4a2e      	ldr	r2, [pc, #184]	@ (8007724 <HAL_DMA_Abort+0x634>)
 800766c:	4293      	cmp	r3, r2
 800766e:	d004      	beq.n	800767a <HAL_DMA_Abort+0x58a>
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	4a2c      	ldr	r2, [pc, #176]	@ (8007728 <HAL_DMA_Abort+0x638>)
 8007676:	4293      	cmp	r3, r2
 8007678:	d101      	bne.n	800767e <HAL_DMA_Abort+0x58e>
 800767a:	2301      	movs	r3, #1
 800767c:	e000      	b.n	8007680 <HAL_DMA_Abort+0x590>
 800767e:	2300      	movs	r3, #0
 8007680:	2b00      	cmp	r3, #0
 8007682:	d015      	beq.n	80076b0 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007688:	687a      	ldr	r2, [r7, #4]
 800768a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800768c:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007692:	2b00      	cmp	r3, #0
 8007694:	d00c      	beq.n	80076b0 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800769a:	681a      	ldr	r2, [r3, #0]
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80076a0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80076a4:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80076aa:	687a      	ldr	r2, [r7, #4]
 80076ac:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80076ae:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	2201      	movs	r2, #1
 80076b4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	2200      	movs	r2, #0
 80076bc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 80076c0:	2300      	movs	r3, #0
}
 80076c2:	4618      	mov	r0, r3
 80076c4:	3718      	adds	r7, #24
 80076c6:	46bd      	mov	sp, r7
 80076c8:	bd80      	pop	{r7, pc}
 80076ca:	bf00      	nop
 80076cc:	40020010 	.word	0x40020010
 80076d0:	40020028 	.word	0x40020028
 80076d4:	40020040 	.word	0x40020040
 80076d8:	40020058 	.word	0x40020058
 80076dc:	40020070 	.word	0x40020070
 80076e0:	40020088 	.word	0x40020088
 80076e4:	400200a0 	.word	0x400200a0
 80076e8:	400200b8 	.word	0x400200b8
 80076ec:	40020410 	.word	0x40020410
 80076f0:	40020428 	.word	0x40020428
 80076f4:	40020440 	.word	0x40020440
 80076f8:	40020458 	.word	0x40020458
 80076fc:	40020470 	.word	0x40020470
 8007700:	40020488 	.word	0x40020488
 8007704:	400204a0 	.word	0x400204a0
 8007708:	400204b8 	.word	0x400204b8
 800770c:	58025408 	.word	0x58025408
 8007710:	5802541c 	.word	0x5802541c
 8007714:	58025430 	.word	0x58025430
 8007718:	58025444 	.word	0x58025444
 800771c:	58025458 	.word	0x58025458
 8007720:	5802546c 	.word	0x5802546c
 8007724:	58025480 	.word	0x58025480
 8007728:	58025494 	.word	0x58025494

0800772c <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800772c:	b480      	push	{r7}
 800772e:	b085      	sub	sp, #20
 8007730:	af00      	add	r7, sp, #0
 8007732:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	4a42      	ldr	r2, [pc, #264]	@ (8007844 <DMA_CalcBaseAndBitshift+0x118>)
 800773a:	4293      	cmp	r3, r2
 800773c:	d04a      	beq.n	80077d4 <DMA_CalcBaseAndBitshift+0xa8>
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	4a41      	ldr	r2, [pc, #260]	@ (8007848 <DMA_CalcBaseAndBitshift+0x11c>)
 8007744:	4293      	cmp	r3, r2
 8007746:	d045      	beq.n	80077d4 <DMA_CalcBaseAndBitshift+0xa8>
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	4a3f      	ldr	r2, [pc, #252]	@ (800784c <DMA_CalcBaseAndBitshift+0x120>)
 800774e:	4293      	cmp	r3, r2
 8007750:	d040      	beq.n	80077d4 <DMA_CalcBaseAndBitshift+0xa8>
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	4a3e      	ldr	r2, [pc, #248]	@ (8007850 <DMA_CalcBaseAndBitshift+0x124>)
 8007758:	4293      	cmp	r3, r2
 800775a:	d03b      	beq.n	80077d4 <DMA_CalcBaseAndBitshift+0xa8>
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	4a3c      	ldr	r2, [pc, #240]	@ (8007854 <DMA_CalcBaseAndBitshift+0x128>)
 8007762:	4293      	cmp	r3, r2
 8007764:	d036      	beq.n	80077d4 <DMA_CalcBaseAndBitshift+0xa8>
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	4a3b      	ldr	r2, [pc, #236]	@ (8007858 <DMA_CalcBaseAndBitshift+0x12c>)
 800776c:	4293      	cmp	r3, r2
 800776e:	d031      	beq.n	80077d4 <DMA_CalcBaseAndBitshift+0xa8>
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	4a39      	ldr	r2, [pc, #228]	@ (800785c <DMA_CalcBaseAndBitshift+0x130>)
 8007776:	4293      	cmp	r3, r2
 8007778:	d02c      	beq.n	80077d4 <DMA_CalcBaseAndBitshift+0xa8>
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	4a38      	ldr	r2, [pc, #224]	@ (8007860 <DMA_CalcBaseAndBitshift+0x134>)
 8007780:	4293      	cmp	r3, r2
 8007782:	d027      	beq.n	80077d4 <DMA_CalcBaseAndBitshift+0xa8>
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	4a36      	ldr	r2, [pc, #216]	@ (8007864 <DMA_CalcBaseAndBitshift+0x138>)
 800778a:	4293      	cmp	r3, r2
 800778c:	d022      	beq.n	80077d4 <DMA_CalcBaseAndBitshift+0xa8>
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	4a35      	ldr	r2, [pc, #212]	@ (8007868 <DMA_CalcBaseAndBitshift+0x13c>)
 8007794:	4293      	cmp	r3, r2
 8007796:	d01d      	beq.n	80077d4 <DMA_CalcBaseAndBitshift+0xa8>
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	4a33      	ldr	r2, [pc, #204]	@ (800786c <DMA_CalcBaseAndBitshift+0x140>)
 800779e:	4293      	cmp	r3, r2
 80077a0:	d018      	beq.n	80077d4 <DMA_CalcBaseAndBitshift+0xa8>
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	4a32      	ldr	r2, [pc, #200]	@ (8007870 <DMA_CalcBaseAndBitshift+0x144>)
 80077a8:	4293      	cmp	r3, r2
 80077aa:	d013      	beq.n	80077d4 <DMA_CalcBaseAndBitshift+0xa8>
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	4a30      	ldr	r2, [pc, #192]	@ (8007874 <DMA_CalcBaseAndBitshift+0x148>)
 80077b2:	4293      	cmp	r3, r2
 80077b4:	d00e      	beq.n	80077d4 <DMA_CalcBaseAndBitshift+0xa8>
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	4a2f      	ldr	r2, [pc, #188]	@ (8007878 <DMA_CalcBaseAndBitshift+0x14c>)
 80077bc:	4293      	cmp	r3, r2
 80077be:	d009      	beq.n	80077d4 <DMA_CalcBaseAndBitshift+0xa8>
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	4a2d      	ldr	r2, [pc, #180]	@ (800787c <DMA_CalcBaseAndBitshift+0x150>)
 80077c6:	4293      	cmp	r3, r2
 80077c8:	d004      	beq.n	80077d4 <DMA_CalcBaseAndBitshift+0xa8>
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	4a2c      	ldr	r2, [pc, #176]	@ (8007880 <DMA_CalcBaseAndBitshift+0x154>)
 80077d0:	4293      	cmp	r3, r2
 80077d2:	d101      	bne.n	80077d8 <DMA_CalcBaseAndBitshift+0xac>
 80077d4:	2301      	movs	r3, #1
 80077d6:	e000      	b.n	80077da <DMA_CalcBaseAndBitshift+0xae>
 80077d8:	2300      	movs	r3, #0
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d024      	beq.n	8007828 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	b2db      	uxtb	r3, r3
 80077e4:	3b10      	subs	r3, #16
 80077e6:	4a27      	ldr	r2, [pc, #156]	@ (8007884 <DMA_CalcBaseAndBitshift+0x158>)
 80077e8:	fba2 2303 	umull	r2, r3, r2, r3
 80077ec:	091b      	lsrs	r3, r3, #4
 80077ee:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	f003 0307 	and.w	r3, r3, #7
 80077f6:	4a24      	ldr	r2, [pc, #144]	@ (8007888 <DMA_CalcBaseAndBitshift+0x15c>)
 80077f8:	5cd3      	ldrb	r3, [r2, r3]
 80077fa:	461a      	mov	r2, r3
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	2b03      	cmp	r3, #3
 8007804:	d908      	bls.n	8007818 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	461a      	mov	r2, r3
 800780c:	4b1f      	ldr	r3, [pc, #124]	@ (800788c <DMA_CalcBaseAndBitshift+0x160>)
 800780e:	4013      	ands	r3, r2
 8007810:	1d1a      	adds	r2, r3, #4
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	659a      	str	r2, [r3, #88]	@ 0x58
 8007816:	e00d      	b.n	8007834 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	461a      	mov	r2, r3
 800781e:	4b1b      	ldr	r3, [pc, #108]	@ (800788c <DMA_CalcBaseAndBitshift+0x160>)
 8007820:	4013      	ands	r3, r2
 8007822:	687a      	ldr	r2, [r7, #4]
 8007824:	6593      	str	r3, [r2, #88]	@ 0x58
 8007826:	e005      	b.n	8007834 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8007838:	4618      	mov	r0, r3
 800783a:	3714      	adds	r7, #20
 800783c:	46bd      	mov	sp, r7
 800783e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007842:	4770      	bx	lr
 8007844:	40020010 	.word	0x40020010
 8007848:	40020028 	.word	0x40020028
 800784c:	40020040 	.word	0x40020040
 8007850:	40020058 	.word	0x40020058
 8007854:	40020070 	.word	0x40020070
 8007858:	40020088 	.word	0x40020088
 800785c:	400200a0 	.word	0x400200a0
 8007860:	400200b8 	.word	0x400200b8
 8007864:	40020410 	.word	0x40020410
 8007868:	40020428 	.word	0x40020428
 800786c:	40020440 	.word	0x40020440
 8007870:	40020458 	.word	0x40020458
 8007874:	40020470 	.word	0x40020470
 8007878:	40020488 	.word	0x40020488
 800787c:	400204a0 	.word	0x400204a0
 8007880:	400204b8 	.word	0x400204b8
 8007884:	aaaaaaab 	.word	0xaaaaaaab
 8007888:	080140a0 	.word	0x080140a0
 800788c:	fffffc00 	.word	0xfffffc00

08007890 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8007890:	b480      	push	{r7}
 8007892:	b085      	sub	sp, #20
 8007894:	af00      	add	r7, sp, #0
 8007896:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007898:	2300      	movs	r3, #0
 800789a:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	699b      	ldr	r3, [r3, #24]
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d120      	bne.n	80078e6 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80078a8:	2b03      	cmp	r3, #3
 80078aa:	d858      	bhi.n	800795e <DMA_CheckFifoParam+0xce>
 80078ac:	a201      	add	r2, pc, #4	@ (adr r2, 80078b4 <DMA_CheckFifoParam+0x24>)
 80078ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078b2:	bf00      	nop
 80078b4:	080078c5 	.word	0x080078c5
 80078b8:	080078d7 	.word	0x080078d7
 80078bc:	080078c5 	.word	0x080078c5
 80078c0:	0800795f 	.word	0x0800795f
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078c8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d048      	beq.n	8007962 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80078d0:	2301      	movs	r3, #1
 80078d2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80078d4:	e045      	b.n	8007962 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078da:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80078de:	d142      	bne.n	8007966 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80078e0:	2301      	movs	r3, #1
 80078e2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80078e4:	e03f      	b.n	8007966 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	699b      	ldr	r3, [r3, #24]
 80078ea:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80078ee:	d123      	bne.n	8007938 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80078f4:	2b03      	cmp	r3, #3
 80078f6:	d838      	bhi.n	800796a <DMA_CheckFifoParam+0xda>
 80078f8:	a201      	add	r2, pc, #4	@ (adr r2, 8007900 <DMA_CheckFifoParam+0x70>)
 80078fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078fe:	bf00      	nop
 8007900:	08007911 	.word	0x08007911
 8007904:	08007917 	.word	0x08007917
 8007908:	08007911 	.word	0x08007911
 800790c:	08007929 	.word	0x08007929
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8007910:	2301      	movs	r3, #1
 8007912:	73fb      	strb	r3, [r7, #15]
        break;
 8007914:	e030      	b.n	8007978 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800791a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800791e:	2b00      	cmp	r3, #0
 8007920:	d025      	beq.n	800796e <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8007922:	2301      	movs	r3, #1
 8007924:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007926:	e022      	b.n	800796e <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800792c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8007930:	d11f      	bne.n	8007972 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8007932:	2301      	movs	r3, #1
 8007934:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007936:	e01c      	b.n	8007972 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800793c:	2b02      	cmp	r3, #2
 800793e:	d902      	bls.n	8007946 <DMA_CheckFifoParam+0xb6>
 8007940:	2b03      	cmp	r3, #3
 8007942:	d003      	beq.n	800794c <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8007944:	e018      	b.n	8007978 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8007946:	2301      	movs	r3, #1
 8007948:	73fb      	strb	r3, [r7, #15]
        break;
 800794a:	e015      	b.n	8007978 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007950:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007954:	2b00      	cmp	r3, #0
 8007956:	d00e      	beq.n	8007976 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8007958:	2301      	movs	r3, #1
 800795a:	73fb      	strb	r3, [r7, #15]
    break;
 800795c:	e00b      	b.n	8007976 <DMA_CheckFifoParam+0xe6>
        break;
 800795e:	bf00      	nop
 8007960:	e00a      	b.n	8007978 <DMA_CheckFifoParam+0xe8>
        break;
 8007962:	bf00      	nop
 8007964:	e008      	b.n	8007978 <DMA_CheckFifoParam+0xe8>
        break;
 8007966:	bf00      	nop
 8007968:	e006      	b.n	8007978 <DMA_CheckFifoParam+0xe8>
        break;
 800796a:	bf00      	nop
 800796c:	e004      	b.n	8007978 <DMA_CheckFifoParam+0xe8>
        break;
 800796e:	bf00      	nop
 8007970:	e002      	b.n	8007978 <DMA_CheckFifoParam+0xe8>
        break;
 8007972:	bf00      	nop
 8007974:	e000      	b.n	8007978 <DMA_CheckFifoParam+0xe8>
    break;
 8007976:	bf00      	nop
    }
  }

  return status;
 8007978:	7bfb      	ldrb	r3, [r7, #15]
}
 800797a:	4618      	mov	r0, r3
 800797c:	3714      	adds	r7, #20
 800797e:	46bd      	mov	sp, r7
 8007980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007984:	4770      	bx	lr
 8007986:	bf00      	nop

08007988 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007988:	b480      	push	{r7}
 800798a:	b085      	sub	sp, #20
 800798c:	af00      	add	r7, sp, #0
 800798e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	4a38      	ldr	r2, [pc, #224]	@ (8007a7c <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 800799c:	4293      	cmp	r3, r2
 800799e:	d022      	beq.n	80079e6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	4a36      	ldr	r2, [pc, #216]	@ (8007a80 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80079a6:	4293      	cmp	r3, r2
 80079a8:	d01d      	beq.n	80079e6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	4a35      	ldr	r2, [pc, #212]	@ (8007a84 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80079b0:	4293      	cmp	r3, r2
 80079b2:	d018      	beq.n	80079e6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	4a33      	ldr	r2, [pc, #204]	@ (8007a88 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80079ba:	4293      	cmp	r3, r2
 80079bc:	d013      	beq.n	80079e6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	4a32      	ldr	r2, [pc, #200]	@ (8007a8c <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80079c4:	4293      	cmp	r3, r2
 80079c6:	d00e      	beq.n	80079e6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	4a30      	ldr	r2, [pc, #192]	@ (8007a90 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80079ce:	4293      	cmp	r3, r2
 80079d0:	d009      	beq.n	80079e6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	4a2f      	ldr	r2, [pc, #188]	@ (8007a94 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80079d8:	4293      	cmp	r3, r2
 80079da:	d004      	beq.n	80079e6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	4a2d      	ldr	r2, [pc, #180]	@ (8007a98 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80079e2:	4293      	cmp	r3, r2
 80079e4:	d101      	bne.n	80079ea <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80079e6:	2301      	movs	r3, #1
 80079e8:	e000      	b.n	80079ec <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80079ea:	2300      	movs	r3, #0
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d01a      	beq.n	8007a26 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	b2db      	uxtb	r3, r3
 80079f6:	3b08      	subs	r3, #8
 80079f8:	4a28      	ldr	r2, [pc, #160]	@ (8007a9c <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80079fa:	fba2 2303 	umull	r2, r3, r2, r3
 80079fe:	091b      	lsrs	r3, r3, #4
 8007a00:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8007a02:	68fa      	ldr	r2, [r7, #12]
 8007a04:	4b26      	ldr	r3, [pc, #152]	@ (8007aa0 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8007a06:	4413      	add	r3, r2
 8007a08:	009b      	lsls	r3, r3, #2
 8007a0a:	461a      	mov	r2, r3
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	4a24      	ldr	r2, [pc, #144]	@ (8007aa4 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8007a14:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	f003 031f 	and.w	r3, r3, #31
 8007a1c:	2201      	movs	r2, #1
 8007a1e:	409a      	lsls	r2, r3
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8007a24:	e024      	b.n	8007a70 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	b2db      	uxtb	r3, r3
 8007a2c:	3b10      	subs	r3, #16
 8007a2e:	4a1e      	ldr	r2, [pc, #120]	@ (8007aa8 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8007a30:	fba2 2303 	umull	r2, r3, r2, r3
 8007a34:	091b      	lsrs	r3, r3, #4
 8007a36:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8007a38:	68bb      	ldr	r3, [r7, #8]
 8007a3a:	4a1c      	ldr	r2, [pc, #112]	@ (8007aac <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8007a3c:	4293      	cmp	r3, r2
 8007a3e:	d806      	bhi.n	8007a4e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8007a40:	68bb      	ldr	r3, [r7, #8]
 8007a42:	4a1b      	ldr	r2, [pc, #108]	@ (8007ab0 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8007a44:	4293      	cmp	r3, r2
 8007a46:	d902      	bls.n	8007a4e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	3308      	adds	r3, #8
 8007a4c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8007a4e:	68fa      	ldr	r2, [r7, #12]
 8007a50:	4b18      	ldr	r3, [pc, #96]	@ (8007ab4 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8007a52:	4413      	add	r3, r2
 8007a54:	009b      	lsls	r3, r3, #2
 8007a56:	461a      	mov	r2, r3
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	4a16      	ldr	r2, [pc, #88]	@ (8007ab8 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8007a60:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	f003 031f 	and.w	r3, r3, #31
 8007a68:	2201      	movs	r2, #1
 8007a6a:	409a      	lsls	r2, r3
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8007a70:	bf00      	nop
 8007a72:	3714      	adds	r7, #20
 8007a74:	46bd      	mov	sp, r7
 8007a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a7a:	4770      	bx	lr
 8007a7c:	58025408 	.word	0x58025408
 8007a80:	5802541c 	.word	0x5802541c
 8007a84:	58025430 	.word	0x58025430
 8007a88:	58025444 	.word	0x58025444
 8007a8c:	58025458 	.word	0x58025458
 8007a90:	5802546c 	.word	0x5802546c
 8007a94:	58025480 	.word	0x58025480
 8007a98:	58025494 	.word	0x58025494
 8007a9c:	cccccccd 	.word	0xcccccccd
 8007aa0:	16009600 	.word	0x16009600
 8007aa4:	58025880 	.word	0x58025880
 8007aa8:	aaaaaaab 	.word	0xaaaaaaab
 8007aac:	400204b8 	.word	0x400204b8
 8007ab0:	4002040f 	.word	0x4002040f
 8007ab4:	10008200 	.word	0x10008200
 8007ab8:	40020880 	.word	0x40020880

08007abc <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007abc:	b480      	push	{r7}
 8007abe:	b085      	sub	sp, #20
 8007ac0:	af00      	add	r7, sp, #0
 8007ac2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	685b      	ldr	r3, [r3, #4]
 8007ac8:	b2db      	uxtb	r3, r3
 8007aca:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d04a      	beq.n	8007b68 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	2b08      	cmp	r3, #8
 8007ad6:	d847      	bhi.n	8007b68 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	4a25      	ldr	r2, [pc, #148]	@ (8007b74 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8007ade:	4293      	cmp	r3, r2
 8007ae0:	d022      	beq.n	8007b28 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	4a24      	ldr	r2, [pc, #144]	@ (8007b78 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8007ae8:	4293      	cmp	r3, r2
 8007aea:	d01d      	beq.n	8007b28 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	4a22      	ldr	r2, [pc, #136]	@ (8007b7c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8007af2:	4293      	cmp	r3, r2
 8007af4:	d018      	beq.n	8007b28 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	4a21      	ldr	r2, [pc, #132]	@ (8007b80 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8007afc:	4293      	cmp	r3, r2
 8007afe:	d013      	beq.n	8007b28 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	4a1f      	ldr	r2, [pc, #124]	@ (8007b84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8007b06:	4293      	cmp	r3, r2
 8007b08:	d00e      	beq.n	8007b28 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	4a1e      	ldr	r2, [pc, #120]	@ (8007b88 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8007b10:	4293      	cmp	r3, r2
 8007b12:	d009      	beq.n	8007b28 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	4a1c      	ldr	r2, [pc, #112]	@ (8007b8c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8007b1a:	4293      	cmp	r3, r2
 8007b1c:	d004      	beq.n	8007b28 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	4a1b      	ldr	r2, [pc, #108]	@ (8007b90 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8007b24:	4293      	cmp	r3, r2
 8007b26:	d101      	bne.n	8007b2c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8007b28:	2301      	movs	r3, #1
 8007b2a:	e000      	b.n	8007b2e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8007b2c:	2300      	movs	r3, #0
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d00a      	beq.n	8007b48 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8007b32:	68fa      	ldr	r2, [r7, #12]
 8007b34:	4b17      	ldr	r3, [pc, #92]	@ (8007b94 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8007b36:	4413      	add	r3, r2
 8007b38:	009b      	lsls	r3, r3, #2
 8007b3a:	461a      	mov	r2, r3
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	4a15      	ldr	r2, [pc, #84]	@ (8007b98 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8007b44:	671a      	str	r2, [r3, #112]	@ 0x70
 8007b46:	e009      	b.n	8007b5c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8007b48:	68fa      	ldr	r2, [r7, #12]
 8007b4a:	4b14      	ldr	r3, [pc, #80]	@ (8007b9c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8007b4c:	4413      	add	r3, r2
 8007b4e:	009b      	lsls	r3, r3, #2
 8007b50:	461a      	mov	r2, r3
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	4a11      	ldr	r2, [pc, #68]	@ (8007ba0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8007b5a:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	3b01      	subs	r3, #1
 8007b60:	2201      	movs	r2, #1
 8007b62:	409a      	lsls	r2, r3
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8007b68:	bf00      	nop
 8007b6a:	3714      	adds	r7, #20
 8007b6c:	46bd      	mov	sp, r7
 8007b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b72:	4770      	bx	lr
 8007b74:	58025408 	.word	0x58025408
 8007b78:	5802541c 	.word	0x5802541c
 8007b7c:	58025430 	.word	0x58025430
 8007b80:	58025444 	.word	0x58025444
 8007b84:	58025458 	.word	0x58025458
 8007b88:	5802546c 	.word	0x5802546c
 8007b8c:	58025480 	.word	0x58025480
 8007b90:	58025494 	.word	0x58025494
 8007b94:	1600963f 	.word	0x1600963f
 8007b98:	58025940 	.word	0x58025940
 8007b9c:	1000823f 	.word	0x1000823f
 8007ba0:	40020940 	.word	0x40020940

08007ba4 <HAL_DMAEx_MultiBufferStart_IT>:
  * @param  SecondMemAddress: The second memory Buffer address in case of multi buffer Transfer
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_MultiBufferStart_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t SecondMemAddress, uint32_t DataLength)
{
 8007ba4:	b580      	push	{r7, lr}
 8007ba6:	b086      	sub	sp, #24
 8007ba8:	af00      	add	r7, sp, #0
 8007baa:	60f8      	str	r0, [r7, #12]
 8007bac:	60b9      	str	r1, [r7, #8]
 8007bae:	607a      	str	r2, [r7, #4]
 8007bb0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007bb2:	2300      	movs	r3, #0
 8007bb4:	75fb      	strb	r3, [r7, #23]
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Memory-to-memory transfer not supported in double buffering mode */
  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	689b      	ldr	r3, [r3, #8]
 8007bba:	2b80      	cmp	r3, #128	@ 0x80
 8007bbc:	d105      	bne.n	8007bca <HAL_DMAEx_MultiBufferStart_IT+0x26>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007bc4:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8007bc6:	2301      	movs	r3, #1
 8007bc8:	e315      	b.n	80081f6 <HAL_DMAEx_MultiBufferStart_IT+0x652>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8007bd0:	2b01      	cmp	r3, #1
 8007bd2:	d101      	bne.n	8007bd8 <HAL_DMAEx_MultiBufferStart_IT+0x34>
 8007bd4:	2302      	movs	r3, #2
 8007bd6:	e30e      	b.n	80081f6 <HAL_DMAEx_MultiBufferStart_IT+0x652>
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	2201      	movs	r2, #1
 8007bdc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8007be6:	b2db      	uxtb	r3, r3
 8007be8:	2b01      	cmp	r3, #1
 8007bea:	f040 82fd 	bne.w	80081e8 <HAL_DMAEx_MultiBufferStart_IT+0x644>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	2202      	movs	r2, #2
 8007bf2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	2200      	movs	r2, #0
 8007bfa:	655a      	str	r2, [r3, #84]	@ 0x54

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	4a82      	ldr	r2, [pc, #520]	@ (8007e0c <HAL_DMAEx_MultiBufferStart_IT+0x268>)
 8007c02:	4293      	cmp	r3, r2
 8007c04:	d04a      	beq.n	8007c9c <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	4a81      	ldr	r2, [pc, #516]	@ (8007e10 <HAL_DMAEx_MultiBufferStart_IT+0x26c>)
 8007c0c:	4293      	cmp	r3, r2
 8007c0e:	d045      	beq.n	8007c9c <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	4a7f      	ldr	r2, [pc, #508]	@ (8007e14 <HAL_DMAEx_MultiBufferStart_IT+0x270>)
 8007c16:	4293      	cmp	r3, r2
 8007c18:	d040      	beq.n	8007c9c <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	4a7e      	ldr	r2, [pc, #504]	@ (8007e18 <HAL_DMAEx_MultiBufferStart_IT+0x274>)
 8007c20:	4293      	cmp	r3, r2
 8007c22:	d03b      	beq.n	8007c9c <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	4a7c      	ldr	r2, [pc, #496]	@ (8007e1c <HAL_DMAEx_MultiBufferStart_IT+0x278>)
 8007c2a:	4293      	cmp	r3, r2
 8007c2c:	d036      	beq.n	8007c9c <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	4a7b      	ldr	r2, [pc, #492]	@ (8007e20 <HAL_DMAEx_MultiBufferStart_IT+0x27c>)
 8007c34:	4293      	cmp	r3, r2
 8007c36:	d031      	beq.n	8007c9c <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	4a79      	ldr	r2, [pc, #484]	@ (8007e24 <HAL_DMAEx_MultiBufferStart_IT+0x280>)
 8007c3e:	4293      	cmp	r3, r2
 8007c40:	d02c      	beq.n	8007c9c <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	4a78      	ldr	r2, [pc, #480]	@ (8007e28 <HAL_DMAEx_MultiBufferStart_IT+0x284>)
 8007c48:	4293      	cmp	r3, r2
 8007c4a:	d027      	beq.n	8007c9c <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	4a76      	ldr	r2, [pc, #472]	@ (8007e2c <HAL_DMAEx_MultiBufferStart_IT+0x288>)
 8007c52:	4293      	cmp	r3, r2
 8007c54:	d022      	beq.n	8007c9c <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	4a75      	ldr	r2, [pc, #468]	@ (8007e30 <HAL_DMAEx_MultiBufferStart_IT+0x28c>)
 8007c5c:	4293      	cmp	r3, r2
 8007c5e:	d01d      	beq.n	8007c9c <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	4a73      	ldr	r2, [pc, #460]	@ (8007e34 <HAL_DMAEx_MultiBufferStart_IT+0x290>)
 8007c66:	4293      	cmp	r3, r2
 8007c68:	d018      	beq.n	8007c9c <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	4a72      	ldr	r2, [pc, #456]	@ (8007e38 <HAL_DMAEx_MultiBufferStart_IT+0x294>)
 8007c70:	4293      	cmp	r3, r2
 8007c72:	d013      	beq.n	8007c9c <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	4a70      	ldr	r2, [pc, #448]	@ (8007e3c <HAL_DMAEx_MultiBufferStart_IT+0x298>)
 8007c7a:	4293      	cmp	r3, r2
 8007c7c:	d00e      	beq.n	8007c9c <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	4a6f      	ldr	r2, [pc, #444]	@ (8007e40 <HAL_DMAEx_MultiBufferStart_IT+0x29c>)
 8007c84:	4293      	cmp	r3, r2
 8007c86:	d009      	beq.n	8007c9c <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	4a6d      	ldr	r2, [pc, #436]	@ (8007e44 <HAL_DMAEx_MultiBufferStart_IT+0x2a0>)
 8007c8e:	4293      	cmp	r3, r2
 8007c90:	d004      	beq.n	8007c9c <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	4a6c      	ldr	r2, [pc, #432]	@ (8007e48 <HAL_DMAEx_MultiBufferStart_IT+0x2a4>)
 8007c98:	4293      	cmp	r3, r2
 8007c9a:	d101      	bne.n	8007ca0 <HAL_DMAEx_MultiBufferStart_IT+0xfc>
 8007c9c:	2301      	movs	r3, #1
 8007c9e:	e000      	b.n	8007ca2 <HAL_DMAEx_MultiBufferStart_IT+0xfe>
 8007ca0:	2300      	movs	r3, #0
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d018      	beq.n	8007cd8 <HAL_DMAEx_MultiBufferStart_IT+0x134>
    {
      /* Enable the Double buffer mode */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR |= DMA_SxCR_DBM;
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	681a      	ldr	r2, [r3, #0]
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8007cb4:	601a      	str	r2, [r3, #0]

      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M1AR = SecondMemAddress;
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	683a      	ldr	r2, [r7, #0]
 8007cbc:	611a      	str	r2, [r3, #16]

      /* Calculate the interrupt clear flag register (IFCR) base address  */
      ifcRegister_Base = (uint32_t *)((uint32_t)(hdma->StreamBaseAddress + 8U));
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007cc2:	3308      	adds	r3, #8
 8007cc4:	613b      	str	r3, [r7, #16]

      /* Clear all flags */
      *ifcRegister_Base = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007cca:	f003 031f 	and.w	r3, r3, #31
 8007cce:	223f      	movs	r2, #63	@ 0x3f
 8007cd0:	409a      	lsls	r2, r3
 8007cd2:	693b      	ldr	r3, [r7, #16]
 8007cd4:	601a      	str	r2, [r3, #0]
 8007cd6:	e018      	b.n	8007d0a <HAL_DMAEx_MultiBufferStart_IT+0x166>
    }
    else /* BDMA instance(s) */
    {
      /* Enable the Double buffer mode */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR |= (BDMA_CCR_DBM | BDMA_CCR_CIRC);
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	6819      	ldr	r1, [r3, #0]
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	681a      	ldr	r2, [r3, #0]
 8007ce2:	f248 0320 	movw	r3, #32800	@ 0x8020
 8007ce6:	430b      	orrs	r3, r1
 8007ce8:	6013      	str	r3, [r2, #0]

      /* Configure DMA Stream destination address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM1AR = SecondMemAddress;
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	683a      	ldr	r2, [r7, #0]
 8007cf0:	611a      	str	r2, [r3, #16]

      /* Calculate the interrupt clear flag register (IFCR) base address  */
      ifcRegister_Base = (uint32_t *)((uint32_t)(hdma->StreamBaseAddress + 4U));
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007cf6:	3304      	adds	r3, #4
 8007cf8:	613b      	str	r3, [r7, #16]

      /* Clear all flags */
      *ifcRegister_Base = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007cfe:	f003 031f 	and.w	r3, r3, #31
 8007d02:	2201      	movs	r2, #1
 8007d04:	409a      	lsls	r2, r3
 8007d06:	693b      	ldr	r3, [r7, #16]
 8007d08:	601a      	str	r2, [r3, #0]
    }

    /* Configure the source, destination address and the data length */
    DMA_MultiBufferSetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8007d0a:	6a3b      	ldr	r3, [r7, #32]
 8007d0c:	687a      	ldr	r2, [r7, #4]
 8007d0e:	68b9      	ldr	r1, [r7, #8]
 8007d10:	68f8      	ldr	r0, [r7, #12]
 8007d12:	f000 faa5 	bl	8008260 <DMA_MultiBufferSetConfig>

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	4a3c      	ldr	r2, [pc, #240]	@ (8007e0c <HAL_DMAEx_MultiBufferStart_IT+0x268>)
 8007d1c:	4293      	cmp	r3, r2
 8007d1e:	d072      	beq.n	8007e06 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	4a3a      	ldr	r2, [pc, #232]	@ (8007e10 <HAL_DMAEx_MultiBufferStart_IT+0x26c>)
 8007d26:	4293      	cmp	r3, r2
 8007d28:	d06d      	beq.n	8007e06 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	4a39      	ldr	r2, [pc, #228]	@ (8007e14 <HAL_DMAEx_MultiBufferStart_IT+0x270>)
 8007d30:	4293      	cmp	r3, r2
 8007d32:	d068      	beq.n	8007e06 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	4a37      	ldr	r2, [pc, #220]	@ (8007e18 <HAL_DMAEx_MultiBufferStart_IT+0x274>)
 8007d3a:	4293      	cmp	r3, r2
 8007d3c:	d063      	beq.n	8007e06 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	4a36      	ldr	r2, [pc, #216]	@ (8007e1c <HAL_DMAEx_MultiBufferStart_IT+0x278>)
 8007d44:	4293      	cmp	r3, r2
 8007d46:	d05e      	beq.n	8007e06 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	4a34      	ldr	r2, [pc, #208]	@ (8007e20 <HAL_DMAEx_MultiBufferStart_IT+0x27c>)
 8007d4e:	4293      	cmp	r3, r2
 8007d50:	d059      	beq.n	8007e06 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	4a33      	ldr	r2, [pc, #204]	@ (8007e24 <HAL_DMAEx_MultiBufferStart_IT+0x280>)
 8007d58:	4293      	cmp	r3, r2
 8007d5a:	d054      	beq.n	8007e06 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	4a31      	ldr	r2, [pc, #196]	@ (8007e28 <HAL_DMAEx_MultiBufferStart_IT+0x284>)
 8007d62:	4293      	cmp	r3, r2
 8007d64:	d04f      	beq.n	8007e06 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	4a30      	ldr	r2, [pc, #192]	@ (8007e2c <HAL_DMAEx_MultiBufferStart_IT+0x288>)
 8007d6c:	4293      	cmp	r3, r2
 8007d6e:	d04a      	beq.n	8007e06 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	4a2e      	ldr	r2, [pc, #184]	@ (8007e30 <HAL_DMAEx_MultiBufferStart_IT+0x28c>)
 8007d76:	4293      	cmp	r3, r2
 8007d78:	d045      	beq.n	8007e06 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	4a2d      	ldr	r2, [pc, #180]	@ (8007e34 <HAL_DMAEx_MultiBufferStart_IT+0x290>)
 8007d80:	4293      	cmp	r3, r2
 8007d82:	d040      	beq.n	8007e06 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	4a2b      	ldr	r2, [pc, #172]	@ (8007e38 <HAL_DMAEx_MultiBufferStart_IT+0x294>)
 8007d8a:	4293      	cmp	r3, r2
 8007d8c:	d03b      	beq.n	8007e06 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	4a2a      	ldr	r2, [pc, #168]	@ (8007e3c <HAL_DMAEx_MultiBufferStart_IT+0x298>)
 8007d94:	4293      	cmp	r3, r2
 8007d96:	d036      	beq.n	8007e06 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	4a28      	ldr	r2, [pc, #160]	@ (8007e40 <HAL_DMAEx_MultiBufferStart_IT+0x29c>)
 8007d9e:	4293      	cmp	r3, r2
 8007da0:	d031      	beq.n	8007e06 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	4a27      	ldr	r2, [pc, #156]	@ (8007e44 <HAL_DMAEx_MultiBufferStart_IT+0x2a0>)
 8007da8:	4293      	cmp	r3, r2
 8007daa:	d02c      	beq.n	8007e06 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	4a25      	ldr	r2, [pc, #148]	@ (8007e48 <HAL_DMAEx_MultiBufferStart_IT+0x2a4>)
 8007db2:	4293      	cmp	r3, r2
 8007db4:	d027      	beq.n	8007e06 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	4a24      	ldr	r2, [pc, #144]	@ (8007e4c <HAL_DMAEx_MultiBufferStart_IT+0x2a8>)
 8007dbc:	4293      	cmp	r3, r2
 8007dbe:	d022      	beq.n	8007e06 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	4a22      	ldr	r2, [pc, #136]	@ (8007e50 <HAL_DMAEx_MultiBufferStart_IT+0x2ac>)
 8007dc6:	4293      	cmp	r3, r2
 8007dc8:	d01d      	beq.n	8007e06 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	4a21      	ldr	r2, [pc, #132]	@ (8007e54 <HAL_DMAEx_MultiBufferStart_IT+0x2b0>)
 8007dd0:	4293      	cmp	r3, r2
 8007dd2:	d018      	beq.n	8007e06 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	4a1f      	ldr	r2, [pc, #124]	@ (8007e58 <HAL_DMAEx_MultiBufferStart_IT+0x2b4>)
 8007dda:	4293      	cmp	r3, r2
 8007ddc:	d013      	beq.n	8007e06 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	4a1e      	ldr	r2, [pc, #120]	@ (8007e5c <HAL_DMAEx_MultiBufferStart_IT+0x2b8>)
 8007de4:	4293      	cmp	r3, r2
 8007de6:	d00e      	beq.n	8007e06 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	4a1c      	ldr	r2, [pc, #112]	@ (8007e60 <HAL_DMAEx_MultiBufferStart_IT+0x2bc>)
 8007dee:	4293      	cmp	r3, r2
 8007df0:	d009      	beq.n	8007e06 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	4a1b      	ldr	r2, [pc, #108]	@ (8007e64 <HAL_DMAEx_MultiBufferStart_IT+0x2c0>)
 8007df8:	4293      	cmp	r3, r2
 8007dfa:	d004      	beq.n	8007e06 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	4a19      	ldr	r2, [pc, #100]	@ (8007e68 <HAL_DMAEx_MultiBufferStart_IT+0x2c4>)
 8007e02:	4293      	cmp	r3, r2
 8007e04:	d132      	bne.n	8007e6c <HAL_DMAEx_MultiBufferStart_IT+0x2c8>
 8007e06:	2301      	movs	r3, #1
 8007e08:	e031      	b.n	8007e6e <HAL_DMAEx_MultiBufferStart_IT+0x2ca>
 8007e0a:	bf00      	nop
 8007e0c:	40020010 	.word	0x40020010
 8007e10:	40020028 	.word	0x40020028
 8007e14:	40020040 	.word	0x40020040
 8007e18:	40020058 	.word	0x40020058
 8007e1c:	40020070 	.word	0x40020070
 8007e20:	40020088 	.word	0x40020088
 8007e24:	400200a0 	.word	0x400200a0
 8007e28:	400200b8 	.word	0x400200b8
 8007e2c:	40020410 	.word	0x40020410
 8007e30:	40020428 	.word	0x40020428
 8007e34:	40020440 	.word	0x40020440
 8007e38:	40020458 	.word	0x40020458
 8007e3c:	40020470 	.word	0x40020470
 8007e40:	40020488 	.word	0x40020488
 8007e44:	400204a0 	.word	0x400204a0
 8007e48:	400204b8 	.word	0x400204b8
 8007e4c:	58025408 	.word	0x58025408
 8007e50:	5802541c 	.word	0x5802541c
 8007e54:	58025430 	.word	0x58025430
 8007e58:	58025444 	.word	0x58025444
 8007e5c:	58025458 	.word	0x58025458
 8007e60:	5802546c 	.word	0x5802546c
 8007e64:	58025480 	.word	0x58025480
 8007e68:	58025494 	.word	0x58025494
 8007e6c:	2300      	movs	r3, #0
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d00d      	beq.n	8007e8e <HAL_DMAEx_MultiBufferStart_IT+0x2ea>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007e76:	68fa      	ldr	r2, [r7, #12]
 8007e78:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8007e7a:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d004      	beq.n	8007e8e <HAL_DMAEx_MultiBufferStart_IT+0x2ea>
      {
        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007e88:	68fa      	ldr	r2, [r7, #12]
 8007e8a:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8007e8c:	605a      	str	r2, [r3, #4]
      }
    }

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	4a3b      	ldr	r2, [pc, #236]	@ (8007f80 <HAL_DMAEx_MultiBufferStart_IT+0x3dc>)
 8007e94:	4293      	cmp	r3, r2
 8007e96:	d04a      	beq.n	8007f2e <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	4a39      	ldr	r2, [pc, #228]	@ (8007f84 <HAL_DMAEx_MultiBufferStart_IT+0x3e0>)
 8007e9e:	4293      	cmp	r3, r2
 8007ea0:	d045      	beq.n	8007f2e <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	4a38      	ldr	r2, [pc, #224]	@ (8007f88 <HAL_DMAEx_MultiBufferStart_IT+0x3e4>)
 8007ea8:	4293      	cmp	r3, r2
 8007eaa:	d040      	beq.n	8007f2e <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	4a36      	ldr	r2, [pc, #216]	@ (8007f8c <HAL_DMAEx_MultiBufferStart_IT+0x3e8>)
 8007eb2:	4293      	cmp	r3, r2
 8007eb4:	d03b      	beq.n	8007f2e <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	4a35      	ldr	r2, [pc, #212]	@ (8007f90 <HAL_DMAEx_MultiBufferStart_IT+0x3ec>)
 8007ebc:	4293      	cmp	r3, r2
 8007ebe:	d036      	beq.n	8007f2e <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	4a33      	ldr	r2, [pc, #204]	@ (8007f94 <HAL_DMAEx_MultiBufferStart_IT+0x3f0>)
 8007ec6:	4293      	cmp	r3, r2
 8007ec8:	d031      	beq.n	8007f2e <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	4a32      	ldr	r2, [pc, #200]	@ (8007f98 <HAL_DMAEx_MultiBufferStart_IT+0x3f4>)
 8007ed0:	4293      	cmp	r3, r2
 8007ed2:	d02c      	beq.n	8007f2e <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	4a30      	ldr	r2, [pc, #192]	@ (8007f9c <HAL_DMAEx_MultiBufferStart_IT+0x3f8>)
 8007eda:	4293      	cmp	r3, r2
 8007edc:	d027      	beq.n	8007f2e <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	4a2f      	ldr	r2, [pc, #188]	@ (8007fa0 <HAL_DMAEx_MultiBufferStart_IT+0x3fc>)
 8007ee4:	4293      	cmp	r3, r2
 8007ee6:	d022      	beq.n	8007f2e <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	4a2d      	ldr	r2, [pc, #180]	@ (8007fa4 <HAL_DMAEx_MultiBufferStart_IT+0x400>)
 8007eee:	4293      	cmp	r3, r2
 8007ef0:	d01d      	beq.n	8007f2e <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	4a2c      	ldr	r2, [pc, #176]	@ (8007fa8 <HAL_DMAEx_MultiBufferStart_IT+0x404>)
 8007ef8:	4293      	cmp	r3, r2
 8007efa:	d018      	beq.n	8007f2e <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	4a2a      	ldr	r2, [pc, #168]	@ (8007fac <HAL_DMAEx_MultiBufferStart_IT+0x408>)
 8007f02:	4293      	cmp	r3, r2
 8007f04:	d013      	beq.n	8007f2e <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	4a29      	ldr	r2, [pc, #164]	@ (8007fb0 <HAL_DMAEx_MultiBufferStart_IT+0x40c>)
 8007f0c:	4293      	cmp	r3, r2
 8007f0e:	d00e      	beq.n	8007f2e <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	4a27      	ldr	r2, [pc, #156]	@ (8007fb4 <HAL_DMAEx_MultiBufferStart_IT+0x410>)
 8007f16:	4293      	cmp	r3, r2
 8007f18:	d009      	beq.n	8007f2e <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	4a26      	ldr	r2, [pc, #152]	@ (8007fb8 <HAL_DMAEx_MultiBufferStart_IT+0x414>)
 8007f20:	4293      	cmp	r3, r2
 8007f22:	d004      	beq.n	8007f2e <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	4a24      	ldr	r2, [pc, #144]	@ (8007fbc <HAL_DMAEx_MultiBufferStart_IT+0x418>)
 8007f2a:	4293      	cmp	r3, r2
 8007f2c:	d101      	bne.n	8007f32 <HAL_DMAEx_MultiBufferStart_IT+0x38e>
 8007f2e:	2301      	movs	r3, #1
 8007f30:	e000      	b.n	8007f34 <HAL_DMAEx_MultiBufferStart_IT+0x390>
 8007f32:	2300      	movs	r3, #0
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d043      	beq.n	8007fc0 <HAL_DMAEx_MultiBufferStart_IT+0x41c>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	f023 021e 	bic.w	r2, r3, #30
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	f042 0216 	orr.w	r2, r2, #22
 8007f4a:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR |= DMA_IT_FE;
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	695a      	ldr	r2, [r3, #20]
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8007f5a:	615a      	str	r2, [r3, #20]

      if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d103      	bne.n	8007f6c <HAL_DMAEx_MultiBufferStart_IT+0x3c8>
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d043      	beq.n	8007ff4 <HAL_DMAEx_MultiBufferStart_IT+0x450>
      {
        /*Enable Half Transfer IT if corresponding Callback is set*/
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	681a      	ldr	r2, [r3, #0]
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	f042 0208 	orr.w	r2, r2, #8
 8007f7a:	601a      	str	r2, [r3, #0]
 8007f7c:	e03a      	b.n	8007ff4 <HAL_DMAEx_MultiBufferStart_IT+0x450>
 8007f7e:	bf00      	nop
 8007f80:	40020010 	.word	0x40020010
 8007f84:	40020028 	.word	0x40020028
 8007f88:	40020040 	.word	0x40020040
 8007f8c:	40020058 	.word	0x40020058
 8007f90:	40020070 	.word	0x40020070
 8007f94:	40020088 	.word	0x40020088
 8007f98:	400200a0 	.word	0x400200a0
 8007f9c:	400200b8 	.word	0x400200b8
 8007fa0:	40020410 	.word	0x40020410
 8007fa4:	40020428 	.word	0x40020428
 8007fa8:	40020440 	.word	0x40020440
 8007fac:	40020458 	.word	0x40020458
 8007fb0:	40020470 	.word	0x40020470
 8007fb4:	40020488 	.word	0x40020488
 8007fb8:	400204a0 	.word	0x400204a0
 8007fbc:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA instance(s) */
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	f023 020e 	bic.w	r2, r3, #14
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	f042 020a 	orr.w	r2, r2, #10
 8007fd2:	601a      	str	r2, [r3, #0]

      if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d103      	bne.n	8007fe4 <HAL_DMAEx_MultiBufferStart_IT+0x440>
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d007      	beq.n	8007ff4 <HAL_DMAEx_MultiBufferStart_IT+0x450>
      {
        /*Enable Half Transfer IT if corresponding Callback is set*/
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	681a      	ldr	r2, [r3, #0]
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	f042 0204 	orr.w	r2, r2, #4
 8007ff2:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	4a81      	ldr	r2, [pc, #516]	@ (8008200 <HAL_DMAEx_MultiBufferStart_IT+0x65c>)
 8007ffa:	4293      	cmp	r3, r2
 8007ffc:	d072      	beq.n	80080e4 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	4a80      	ldr	r2, [pc, #512]	@ (8008204 <HAL_DMAEx_MultiBufferStart_IT+0x660>)
 8008004:	4293      	cmp	r3, r2
 8008006:	d06d      	beq.n	80080e4 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	4a7e      	ldr	r2, [pc, #504]	@ (8008208 <HAL_DMAEx_MultiBufferStart_IT+0x664>)
 800800e:	4293      	cmp	r3, r2
 8008010:	d068      	beq.n	80080e4 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	4a7d      	ldr	r2, [pc, #500]	@ (800820c <HAL_DMAEx_MultiBufferStart_IT+0x668>)
 8008018:	4293      	cmp	r3, r2
 800801a:	d063      	beq.n	80080e4 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	4a7b      	ldr	r2, [pc, #492]	@ (8008210 <HAL_DMAEx_MultiBufferStart_IT+0x66c>)
 8008022:	4293      	cmp	r3, r2
 8008024:	d05e      	beq.n	80080e4 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	4a7a      	ldr	r2, [pc, #488]	@ (8008214 <HAL_DMAEx_MultiBufferStart_IT+0x670>)
 800802c:	4293      	cmp	r3, r2
 800802e:	d059      	beq.n	80080e4 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	4a78      	ldr	r2, [pc, #480]	@ (8008218 <HAL_DMAEx_MultiBufferStart_IT+0x674>)
 8008036:	4293      	cmp	r3, r2
 8008038:	d054      	beq.n	80080e4 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	4a77      	ldr	r2, [pc, #476]	@ (800821c <HAL_DMAEx_MultiBufferStart_IT+0x678>)
 8008040:	4293      	cmp	r3, r2
 8008042:	d04f      	beq.n	80080e4 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	4a75      	ldr	r2, [pc, #468]	@ (8008220 <HAL_DMAEx_MultiBufferStart_IT+0x67c>)
 800804a:	4293      	cmp	r3, r2
 800804c:	d04a      	beq.n	80080e4 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	4a74      	ldr	r2, [pc, #464]	@ (8008224 <HAL_DMAEx_MultiBufferStart_IT+0x680>)
 8008054:	4293      	cmp	r3, r2
 8008056:	d045      	beq.n	80080e4 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	4a72      	ldr	r2, [pc, #456]	@ (8008228 <HAL_DMAEx_MultiBufferStart_IT+0x684>)
 800805e:	4293      	cmp	r3, r2
 8008060:	d040      	beq.n	80080e4 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	4a71      	ldr	r2, [pc, #452]	@ (800822c <HAL_DMAEx_MultiBufferStart_IT+0x688>)
 8008068:	4293      	cmp	r3, r2
 800806a:	d03b      	beq.n	80080e4 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	4a6f      	ldr	r2, [pc, #444]	@ (8008230 <HAL_DMAEx_MultiBufferStart_IT+0x68c>)
 8008072:	4293      	cmp	r3, r2
 8008074:	d036      	beq.n	80080e4 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	4a6e      	ldr	r2, [pc, #440]	@ (8008234 <HAL_DMAEx_MultiBufferStart_IT+0x690>)
 800807c:	4293      	cmp	r3, r2
 800807e:	d031      	beq.n	80080e4 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	4a6c      	ldr	r2, [pc, #432]	@ (8008238 <HAL_DMAEx_MultiBufferStart_IT+0x694>)
 8008086:	4293      	cmp	r3, r2
 8008088:	d02c      	beq.n	80080e4 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	4a6b      	ldr	r2, [pc, #428]	@ (800823c <HAL_DMAEx_MultiBufferStart_IT+0x698>)
 8008090:	4293      	cmp	r3, r2
 8008092:	d027      	beq.n	80080e4 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	4a69      	ldr	r2, [pc, #420]	@ (8008240 <HAL_DMAEx_MultiBufferStart_IT+0x69c>)
 800809a:	4293      	cmp	r3, r2
 800809c:	d022      	beq.n	80080e4 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	4a68      	ldr	r2, [pc, #416]	@ (8008244 <HAL_DMAEx_MultiBufferStart_IT+0x6a0>)
 80080a4:	4293      	cmp	r3, r2
 80080a6:	d01d      	beq.n	80080e4 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	4a66      	ldr	r2, [pc, #408]	@ (8008248 <HAL_DMAEx_MultiBufferStart_IT+0x6a4>)
 80080ae:	4293      	cmp	r3, r2
 80080b0:	d018      	beq.n	80080e4 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	4a65      	ldr	r2, [pc, #404]	@ (800824c <HAL_DMAEx_MultiBufferStart_IT+0x6a8>)
 80080b8:	4293      	cmp	r3, r2
 80080ba:	d013      	beq.n	80080e4 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	4a63      	ldr	r2, [pc, #396]	@ (8008250 <HAL_DMAEx_MultiBufferStart_IT+0x6ac>)
 80080c2:	4293      	cmp	r3, r2
 80080c4:	d00e      	beq.n	80080e4 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	4a62      	ldr	r2, [pc, #392]	@ (8008254 <HAL_DMAEx_MultiBufferStart_IT+0x6b0>)
 80080cc:	4293      	cmp	r3, r2
 80080ce:	d009      	beq.n	80080e4 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	4a60      	ldr	r2, [pc, #384]	@ (8008258 <HAL_DMAEx_MultiBufferStart_IT+0x6b4>)
 80080d6:	4293      	cmp	r3, r2
 80080d8:	d004      	beq.n	80080e4 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	4a5f      	ldr	r2, [pc, #380]	@ (800825c <HAL_DMAEx_MultiBufferStart_IT+0x6b8>)
 80080e0:	4293      	cmp	r3, r2
 80080e2:	d101      	bne.n	80080e8 <HAL_DMAEx_MultiBufferStart_IT+0x544>
 80080e4:	2301      	movs	r3, #1
 80080e6:	e000      	b.n	80080ea <HAL_DMAEx_MultiBufferStart_IT+0x546>
 80080e8:	2300      	movs	r3, #0
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d01a      	beq.n	8008124 <HAL_DMAEx_MultiBufferStart_IT+0x580>
    {
      /* Check if DMAMUX Synchronization is enabled*/
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d007      	beq.n	800810c <HAL_DMAEx_MultiBufferStart_IT+0x568>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008100:	681a      	ldr	r2, [r3, #0]
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008106:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800810a:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008110:	2b00      	cmp	r3, #0
 8008112:	d007      	beq.n	8008124 <HAL_DMAEx_MultiBufferStart_IT+0x580>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT*/
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008118:	681a      	ldr	r2, [r3, #0]
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800811e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008122:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the peripheral */
    __HAL_DMA_ENABLE(hdma);
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	4a35      	ldr	r2, [pc, #212]	@ (8008200 <HAL_DMAEx_MultiBufferStart_IT+0x65c>)
 800812a:	4293      	cmp	r3, r2
 800812c:	d04a      	beq.n	80081c4 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	4a34      	ldr	r2, [pc, #208]	@ (8008204 <HAL_DMAEx_MultiBufferStart_IT+0x660>)
 8008134:	4293      	cmp	r3, r2
 8008136:	d045      	beq.n	80081c4 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	4a32      	ldr	r2, [pc, #200]	@ (8008208 <HAL_DMAEx_MultiBufferStart_IT+0x664>)
 800813e:	4293      	cmp	r3, r2
 8008140:	d040      	beq.n	80081c4 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	4a31      	ldr	r2, [pc, #196]	@ (800820c <HAL_DMAEx_MultiBufferStart_IT+0x668>)
 8008148:	4293      	cmp	r3, r2
 800814a:	d03b      	beq.n	80081c4 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	4a2f      	ldr	r2, [pc, #188]	@ (8008210 <HAL_DMAEx_MultiBufferStart_IT+0x66c>)
 8008152:	4293      	cmp	r3, r2
 8008154:	d036      	beq.n	80081c4 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	4a2e      	ldr	r2, [pc, #184]	@ (8008214 <HAL_DMAEx_MultiBufferStart_IT+0x670>)
 800815c:	4293      	cmp	r3, r2
 800815e:	d031      	beq.n	80081c4 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	4a2c      	ldr	r2, [pc, #176]	@ (8008218 <HAL_DMAEx_MultiBufferStart_IT+0x674>)
 8008166:	4293      	cmp	r3, r2
 8008168:	d02c      	beq.n	80081c4 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	4a2b      	ldr	r2, [pc, #172]	@ (800821c <HAL_DMAEx_MultiBufferStart_IT+0x678>)
 8008170:	4293      	cmp	r3, r2
 8008172:	d027      	beq.n	80081c4 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	4a29      	ldr	r2, [pc, #164]	@ (8008220 <HAL_DMAEx_MultiBufferStart_IT+0x67c>)
 800817a:	4293      	cmp	r3, r2
 800817c:	d022      	beq.n	80081c4 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	4a28      	ldr	r2, [pc, #160]	@ (8008224 <HAL_DMAEx_MultiBufferStart_IT+0x680>)
 8008184:	4293      	cmp	r3, r2
 8008186:	d01d      	beq.n	80081c4 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	4a26      	ldr	r2, [pc, #152]	@ (8008228 <HAL_DMAEx_MultiBufferStart_IT+0x684>)
 800818e:	4293      	cmp	r3, r2
 8008190:	d018      	beq.n	80081c4 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	4a25      	ldr	r2, [pc, #148]	@ (800822c <HAL_DMAEx_MultiBufferStart_IT+0x688>)
 8008198:	4293      	cmp	r3, r2
 800819a:	d013      	beq.n	80081c4 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	4a23      	ldr	r2, [pc, #140]	@ (8008230 <HAL_DMAEx_MultiBufferStart_IT+0x68c>)
 80081a2:	4293      	cmp	r3, r2
 80081a4:	d00e      	beq.n	80081c4 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	4a22      	ldr	r2, [pc, #136]	@ (8008234 <HAL_DMAEx_MultiBufferStart_IT+0x690>)
 80081ac:	4293      	cmp	r3, r2
 80081ae:	d009      	beq.n	80081c4 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	4a20      	ldr	r2, [pc, #128]	@ (8008238 <HAL_DMAEx_MultiBufferStart_IT+0x694>)
 80081b6:	4293      	cmp	r3, r2
 80081b8:	d004      	beq.n	80081c4 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	4a1f      	ldr	r2, [pc, #124]	@ (800823c <HAL_DMAEx_MultiBufferStart_IT+0x698>)
 80081c0:	4293      	cmp	r3, r2
 80081c2:	d108      	bne.n	80081d6 <HAL_DMAEx_MultiBufferStart_IT+0x632>
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	681a      	ldr	r2, [r3, #0]
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	f042 0201 	orr.w	r2, r2, #1
 80081d2:	601a      	str	r2, [r3, #0]
 80081d4:	e00e      	b.n	80081f4 <HAL_DMAEx_MultiBufferStart_IT+0x650>
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	681a      	ldr	r2, [r3, #0]
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	f042 0201 	orr.w	r2, r2, #1
 80081e4:	601a      	str	r2, [r3, #0]
 80081e6:	e005      	b.n	80081f4 <HAL_DMAEx_MultiBufferStart_IT+0x650>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80081ee:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Return error status */
    status = HAL_ERROR;
 80081f0:	2301      	movs	r3, #1
 80081f2:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80081f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80081f6:	4618      	mov	r0, r3
 80081f8:	3718      	adds	r7, #24
 80081fa:	46bd      	mov	sp, r7
 80081fc:	bd80      	pop	{r7, pc}
 80081fe:	bf00      	nop
 8008200:	40020010 	.word	0x40020010
 8008204:	40020028 	.word	0x40020028
 8008208:	40020040 	.word	0x40020040
 800820c:	40020058 	.word	0x40020058
 8008210:	40020070 	.word	0x40020070
 8008214:	40020088 	.word	0x40020088
 8008218:	400200a0 	.word	0x400200a0
 800821c:	400200b8 	.word	0x400200b8
 8008220:	40020410 	.word	0x40020410
 8008224:	40020428 	.word	0x40020428
 8008228:	40020440 	.word	0x40020440
 800822c:	40020458 	.word	0x40020458
 8008230:	40020470 	.word	0x40020470
 8008234:	40020488 	.word	0x40020488
 8008238:	400204a0 	.word	0x400204a0
 800823c:	400204b8 	.word	0x400204b8
 8008240:	58025408 	.word	0x58025408
 8008244:	5802541c 	.word	0x5802541c
 8008248:	58025430 	.word	0x58025430
 800824c:	58025444 	.word	0x58025444
 8008250:	58025458 	.word	0x58025458
 8008254:	5802546c 	.word	0x5802546c
 8008258:	58025480 	.word	0x58025480
 800825c:	58025494 	.word	0x58025494

08008260 <DMA_MultiBufferSetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_MultiBufferSetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008260:	b480      	push	{r7}
 8008262:	b085      	sub	sp, #20
 8008264:	af00      	add	r7, sp, #0
 8008266:	60f8      	str	r0, [r7, #12]
 8008268:	60b9      	str	r1, [r7, #8]
 800826a:	607a      	str	r2, [r7, #4]
 800826c:	603b      	str	r3, [r7, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	4a46      	ldr	r2, [pc, #280]	@ (800838c <DMA_MultiBufferSetConfig+0x12c>)
 8008274:	4293      	cmp	r3, r2
 8008276:	d04a      	beq.n	800830e <DMA_MultiBufferSetConfig+0xae>
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	4a44      	ldr	r2, [pc, #272]	@ (8008390 <DMA_MultiBufferSetConfig+0x130>)
 800827e:	4293      	cmp	r3, r2
 8008280:	d045      	beq.n	800830e <DMA_MultiBufferSetConfig+0xae>
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	4a43      	ldr	r2, [pc, #268]	@ (8008394 <DMA_MultiBufferSetConfig+0x134>)
 8008288:	4293      	cmp	r3, r2
 800828a:	d040      	beq.n	800830e <DMA_MultiBufferSetConfig+0xae>
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	4a41      	ldr	r2, [pc, #260]	@ (8008398 <DMA_MultiBufferSetConfig+0x138>)
 8008292:	4293      	cmp	r3, r2
 8008294:	d03b      	beq.n	800830e <DMA_MultiBufferSetConfig+0xae>
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	4a40      	ldr	r2, [pc, #256]	@ (800839c <DMA_MultiBufferSetConfig+0x13c>)
 800829c:	4293      	cmp	r3, r2
 800829e:	d036      	beq.n	800830e <DMA_MultiBufferSetConfig+0xae>
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	4a3e      	ldr	r2, [pc, #248]	@ (80083a0 <DMA_MultiBufferSetConfig+0x140>)
 80082a6:	4293      	cmp	r3, r2
 80082a8:	d031      	beq.n	800830e <DMA_MultiBufferSetConfig+0xae>
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	4a3d      	ldr	r2, [pc, #244]	@ (80083a4 <DMA_MultiBufferSetConfig+0x144>)
 80082b0:	4293      	cmp	r3, r2
 80082b2:	d02c      	beq.n	800830e <DMA_MultiBufferSetConfig+0xae>
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	4a3b      	ldr	r2, [pc, #236]	@ (80083a8 <DMA_MultiBufferSetConfig+0x148>)
 80082ba:	4293      	cmp	r3, r2
 80082bc:	d027      	beq.n	800830e <DMA_MultiBufferSetConfig+0xae>
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	4a3a      	ldr	r2, [pc, #232]	@ (80083ac <DMA_MultiBufferSetConfig+0x14c>)
 80082c4:	4293      	cmp	r3, r2
 80082c6:	d022      	beq.n	800830e <DMA_MultiBufferSetConfig+0xae>
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	4a38      	ldr	r2, [pc, #224]	@ (80083b0 <DMA_MultiBufferSetConfig+0x150>)
 80082ce:	4293      	cmp	r3, r2
 80082d0:	d01d      	beq.n	800830e <DMA_MultiBufferSetConfig+0xae>
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	4a37      	ldr	r2, [pc, #220]	@ (80083b4 <DMA_MultiBufferSetConfig+0x154>)
 80082d8:	4293      	cmp	r3, r2
 80082da:	d018      	beq.n	800830e <DMA_MultiBufferSetConfig+0xae>
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	4a35      	ldr	r2, [pc, #212]	@ (80083b8 <DMA_MultiBufferSetConfig+0x158>)
 80082e2:	4293      	cmp	r3, r2
 80082e4:	d013      	beq.n	800830e <DMA_MultiBufferSetConfig+0xae>
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	4a34      	ldr	r2, [pc, #208]	@ (80083bc <DMA_MultiBufferSetConfig+0x15c>)
 80082ec:	4293      	cmp	r3, r2
 80082ee:	d00e      	beq.n	800830e <DMA_MultiBufferSetConfig+0xae>
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	4a32      	ldr	r2, [pc, #200]	@ (80083c0 <DMA_MultiBufferSetConfig+0x160>)
 80082f6:	4293      	cmp	r3, r2
 80082f8:	d009      	beq.n	800830e <DMA_MultiBufferSetConfig+0xae>
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	4a31      	ldr	r2, [pc, #196]	@ (80083c4 <DMA_MultiBufferSetConfig+0x164>)
 8008300:	4293      	cmp	r3, r2
 8008302:	d004      	beq.n	800830e <DMA_MultiBufferSetConfig+0xae>
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	4a2f      	ldr	r2, [pc, #188]	@ (80083c8 <DMA_MultiBufferSetConfig+0x168>)
 800830a:	4293      	cmp	r3, r2
 800830c:	d101      	bne.n	8008312 <DMA_MultiBufferSetConfig+0xb2>
 800830e:	2301      	movs	r3, #1
 8008310:	e000      	b.n	8008314 <DMA_MultiBufferSetConfig+0xb4>
 8008312:	2300      	movs	r3, #0
 8008314:	2b00      	cmp	r3, #0
 8008316:	d019      	beq.n	800834c <DMA_MultiBufferSetConfig+0xec>
  {
    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->NDTR = DataLength;
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	683a      	ldr	r2, [r7, #0]
 800831e:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	689b      	ldr	r3, [r3, #8]
 8008324:	2b40      	cmp	r3, #64	@ 0x40
 8008326:	d108      	bne.n	800833a <DMA_MultiBufferSetConfig+0xda>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->PAR = DstAddress;
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	687a      	ldr	r2, [r7, #4]
 800832e:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = SrcAddress;
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	68ba      	ldr	r2, [r7, #8]
 8008336:	60da      	str	r2, [r3, #12]

      /* Configure DMA Stream destination address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = DstAddress;
    }
  }
}
 8008338:	e021      	b.n	800837e <DMA_MultiBufferSetConfig+0x11e>
      ((DMA_Stream_TypeDef   *)hdma->Instance)->PAR = SrcAddress;
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	68ba      	ldr	r2, [r7, #8]
 8008340:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = DstAddress;
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	687a      	ldr	r2, [r7, #4]
 8008348:	60da      	str	r2, [r3, #12]
}
 800834a:	e018      	b.n	800837e <DMA_MultiBufferSetConfig+0x11e>
    ((BDMA_Channel_TypeDef   *)hdma->Instance)->CNDTR = DataLength;
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	683a      	ldr	r2, [r7, #0]
 8008352:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	689b      	ldr	r3, [r3, #8]
 8008358:	2b40      	cmp	r3, #64	@ 0x40
 800835a:	d108      	bne.n	800836e <DMA_MultiBufferSetConfig+0x10e>
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CPAR = DstAddress;
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	687a      	ldr	r2, [r7, #4]
 8008362:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = SrcAddress;
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	68ba      	ldr	r2, [r7, #8]
 800836a:	60da      	str	r2, [r3, #12]
}
 800836c:	e007      	b.n	800837e <DMA_MultiBufferSetConfig+0x11e>
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CPAR = SrcAddress;
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	68ba      	ldr	r2, [r7, #8]
 8008374:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = DstAddress;
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	687a      	ldr	r2, [r7, #4]
 800837c:	60da      	str	r2, [r3, #12]
}
 800837e:	bf00      	nop
 8008380:	3714      	adds	r7, #20
 8008382:	46bd      	mov	sp, r7
 8008384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008388:	4770      	bx	lr
 800838a:	bf00      	nop
 800838c:	40020010 	.word	0x40020010
 8008390:	40020028 	.word	0x40020028
 8008394:	40020040 	.word	0x40020040
 8008398:	40020058 	.word	0x40020058
 800839c:	40020070 	.word	0x40020070
 80083a0:	40020088 	.word	0x40020088
 80083a4:	400200a0 	.word	0x400200a0
 80083a8:	400200b8 	.word	0x400200b8
 80083ac:	40020410 	.word	0x40020410
 80083b0:	40020428 	.word	0x40020428
 80083b4:	40020440 	.word	0x40020440
 80083b8:	40020458 	.word	0x40020458
 80083bc:	40020470 	.word	0x40020470
 80083c0:	40020488 	.word	0x40020488
 80083c4:	400204a0 	.word	0x400204a0
 80083c8:	400204b8 	.word	0x400204b8

080083cc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80083cc:	b480      	push	{r7}
 80083ce:	b089      	sub	sp, #36	@ 0x24
 80083d0:	af00      	add	r7, sp, #0
 80083d2:	6078      	str	r0, [r7, #4]
 80083d4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80083d6:	2300      	movs	r3, #0
 80083d8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80083da:	4b89      	ldr	r3, [pc, #548]	@ (8008600 <HAL_GPIO_Init+0x234>)
 80083dc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80083de:	e194      	b.n	800870a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80083e0:	683b      	ldr	r3, [r7, #0]
 80083e2:	681a      	ldr	r2, [r3, #0]
 80083e4:	2101      	movs	r1, #1
 80083e6:	69fb      	ldr	r3, [r7, #28]
 80083e8:	fa01 f303 	lsl.w	r3, r1, r3
 80083ec:	4013      	ands	r3, r2
 80083ee:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80083f0:	693b      	ldr	r3, [r7, #16]
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	f000 8186 	beq.w	8008704 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80083f8:	683b      	ldr	r3, [r7, #0]
 80083fa:	685b      	ldr	r3, [r3, #4]
 80083fc:	f003 0303 	and.w	r3, r3, #3
 8008400:	2b01      	cmp	r3, #1
 8008402:	d005      	beq.n	8008410 <HAL_GPIO_Init+0x44>
 8008404:	683b      	ldr	r3, [r7, #0]
 8008406:	685b      	ldr	r3, [r3, #4]
 8008408:	f003 0303 	and.w	r3, r3, #3
 800840c:	2b02      	cmp	r3, #2
 800840e:	d130      	bne.n	8008472 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	689b      	ldr	r3, [r3, #8]
 8008414:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8008416:	69fb      	ldr	r3, [r7, #28]
 8008418:	005b      	lsls	r3, r3, #1
 800841a:	2203      	movs	r2, #3
 800841c:	fa02 f303 	lsl.w	r3, r2, r3
 8008420:	43db      	mvns	r3, r3
 8008422:	69ba      	ldr	r2, [r7, #24]
 8008424:	4013      	ands	r3, r2
 8008426:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8008428:	683b      	ldr	r3, [r7, #0]
 800842a:	68da      	ldr	r2, [r3, #12]
 800842c:	69fb      	ldr	r3, [r7, #28]
 800842e:	005b      	lsls	r3, r3, #1
 8008430:	fa02 f303 	lsl.w	r3, r2, r3
 8008434:	69ba      	ldr	r2, [r7, #24]
 8008436:	4313      	orrs	r3, r2
 8008438:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	69ba      	ldr	r2, [r7, #24]
 800843e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	685b      	ldr	r3, [r3, #4]
 8008444:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8008446:	2201      	movs	r2, #1
 8008448:	69fb      	ldr	r3, [r7, #28]
 800844a:	fa02 f303 	lsl.w	r3, r2, r3
 800844e:	43db      	mvns	r3, r3
 8008450:	69ba      	ldr	r2, [r7, #24]
 8008452:	4013      	ands	r3, r2
 8008454:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008456:	683b      	ldr	r3, [r7, #0]
 8008458:	685b      	ldr	r3, [r3, #4]
 800845a:	091b      	lsrs	r3, r3, #4
 800845c:	f003 0201 	and.w	r2, r3, #1
 8008460:	69fb      	ldr	r3, [r7, #28]
 8008462:	fa02 f303 	lsl.w	r3, r2, r3
 8008466:	69ba      	ldr	r2, [r7, #24]
 8008468:	4313      	orrs	r3, r2
 800846a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	69ba      	ldr	r2, [r7, #24]
 8008470:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008472:	683b      	ldr	r3, [r7, #0]
 8008474:	685b      	ldr	r3, [r3, #4]
 8008476:	f003 0303 	and.w	r3, r3, #3
 800847a:	2b03      	cmp	r3, #3
 800847c:	d017      	beq.n	80084ae <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	68db      	ldr	r3, [r3, #12]
 8008482:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8008484:	69fb      	ldr	r3, [r7, #28]
 8008486:	005b      	lsls	r3, r3, #1
 8008488:	2203      	movs	r2, #3
 800848a:	fa02 f303 	lsl.w	r3, r2, r3
 800848e:	43db      	mvns	r3, r3
 8008490:	69ba      	ldr	r2, [r7, #24]
 8008492:	4013      	ands	r3, r2
 8008494:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008496:	683b      	ldr	r3, [r7, #0]
 8008498:	689a      	ldr	r2, [r3, #8]
 800849a:	69fb      	ldr	r3, [r7, #28]
 800849c:	005b      	lsls	r3, r3, #1
 800849e:	fa02 f303 	lsl.w	r3, r2, r3
 80084a2:	69ba      	ldr	r2, [r7, #24]
 80084a4:	4313      	orrs	r3, r2
 80084a6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	69ba      	ldr	r2, [r7, #24]
 80084ac:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80084ae:	683b      	ldr	r3, [r7, #0]
 80084b0:	685b      	ldr	r3, [r3, #4]
 80084b2:	f003 0303 	and.w	r3, r3, #3
 80084b6:	2b02      	cmp	r3, #2
 80084b8:	d123      	bne.n	8008502 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80084ba:	69fb      	ldr	r3, [r7, #28]
 80084bc:	08da      	lsrs	r2, r3, #3
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	3208      	adds	r2, #8
 80084c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80084c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80084c8:	69fb      	ldr	r3, [r7, #28]
 80084ca:	f003 0307 	and.w	r3, r3, #7
 80084ce:	009b      	lsls	r3, r3, #2
 80084d0:	220f      	movs	r2, #15
 80084d2:	fa02 f303 	lsl.w	r3, r2, r3
 80084d6:	43db      	mvns	r3, r3
 80084d8:	69ba      	ldr	r2, [r7, #24]
 80084da:	4013      	ands	r3, r2
 80084dc:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80084de:	683b      	ldr	r3, [r7, #0]
 80084e0:	691a      	ldr	r2, [r3, #16]
 80084e2:	69fb      	ldr	r3, [r7, #28]
 80084e4:	f003 0307 	and.w	r3, r3, #7
 80084e8:	009b      	lsls	r3, r3, #2
 80084ea:	fa02 f303 	lsl.w	r3, r2, r3
 80084ee:	69ba      	ldr	r2, [r7, #24]
 80084f0:	4313      	orrs	r3, r2
 80084f2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80084f4:	69fb      	ldr	r3, [r7, #28]
 80084f6:	08da      	lsrs	r2, r3, #3
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	3208      	adds	r2, #8
 80084fc:	69b9      	ldr	r1, [r7, #24]
 80084fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8008508:	69fb      	ldr	r3, [r7, #28]
 800850a:	005b      	lsls	r3, r3, #1
 800850c:	2203      	movs	r2, #3
 800850e:	fa02 f303 	lsl.w	r3, r2, r3
 8008512:	43db      	mvns	r3, r3
 8008514:	69ba      	ldr	r2, [r7, #24]
 8008516:	4013      	ands	r3, r2
 8008518:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800851a:	683b      	ldr	r3, [r7, #0]
 800851c:	685b      	ldr	r3, [r3, #4]
 800851e:	f003 0203 	and.w	r2, r3, #3
 8008522:	69fb      	ldr	r3, [r7, #28]
 8008524:	005b      	lsls	r3, r3, #1
 8008526:	fa02 f303 	lsl.w	r3, r2, r3
 800852a:	69ba      	ldr	r2, [r7, #24]
 800852c:	4313      	orrs	r3, r2
 800852e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	69ba      	ldr	r2, [r7, #24]
 8008534:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8008536:	683b      	ldr	r3, [r7, #0]
 8008538:	685b      	ldr	r3, [r3, #4]
 800853a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800853e:	2b00      	cmp	r3, #0
 8008540:	f000 80e0 	beq.w	8008704 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008544:	4b2f      	ldr	r3, [pc, #188]	@ (8008604 <HAL_GPIO_Init+0x238>)
 8008546:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800854a:	4a2e      	ldr	r2, [pc, #184]	@ (8008604 <HAL_GPIO_Init+0x238>)
 800854c:	f043 0302 	orr.w	r3, r3, #2
 8008550:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8008554:	4b2b      	ldr	r3, [pc, #172]	@ (8008604 <HAL_GPIO_Init+0x238>)
 8008556:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800855a:	f003 0302 	and.w	r3, r3, #2
 800855e:	60fb      	str	r3, [r7, #12]
 8008560:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8008562:	4a29      	ldr	r2, [pc, #164]	@ (8008608 <HAL_GPIO_Init+0x23c>)
 8008564:	69fb      	ldr	r3, [r7, #28]
 8008566:	089b      	lsrs	r3, r3, #2
 8008568:	3302      	adds	r3, #2
 800856a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800856e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8008570:	69fb      	ldr	r3, [r7, #28]
 8008572:	f003 0303 	and.w	r3, r3, #3
 8008576:	009b      	lsls	r3, r3, #2
 8008578:	220f      	movs	r2, #15
 800857a:	fa02 f303 	lsl.w	r3, r2, r3
 800857e:	43db      	mvns	r3, r3
 8008580:	69ba      	ldr	r2, [r7, #24]
 8008582:	4013      	ands	r3, r2
 8008584:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	4a20      	ldr	r2, [pc, #128]	@ (800860c <HAL_GPIO_Init+0x240>)
 800858a:	4293      	cmp	r3, r2
 800858c:	d052      	beq.n	8008634 <HAL_GPIO_Init+0x268>
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	4a1f      	ldr	r2, [pc, #124]	@ (8008610 <HAL_GPIO_Init+0x244>)
 8008592:	4293      	cmp	r3, r2
 8008594:	d031      	beq.n	80085fa <HAL_GPIO_Init+0x22e>
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	4a1e      	ldr	r2, [pc, #120]	@ (8008614 <HAL_GPIO_Init+0x248>)
 800859a:	4293      	cmp	r3, r2
 800859c:	d02b      	beq.n	80085f6 <HAL_GPIO_Init+0x22a>
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	4a1d      	ldr	r2, [pc, #116]	@ (8008618 <HAL_GPIO_Init+0x24c>)
 80085a2:	4293      	cmp	r3, r2
 80085a4:	d025      	beq.n	80085f2 <HAL_GPIO_Init+0x226>
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	4a1c      	ldr	r2, [pc, #112]	@ (800861c <HAL_GPIO_Init+0x250>)
 80085aa:	4293      	cmp	r3, r2
 80085ac:	d01f      	beq.n	80085ee <HAL_GPIO_Init+0x222>
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	4a1b      	ldr	r2, [pc, #108]	@ (8008620 <HAL_GPIO_Init+0x254>)
 80085b2:	4293      	cmp	r3, r2
 80085b4:	d019      	beq.n	80085ea <HAL_GPIO_Init+0x21e>
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	4a1a      	ldr	r2, [pc, #104]	@ (8008624 <HAL_GPIO_Init+0x258>)
 80085ba:	4293      	cmp	r3, r2
 80085bc:	d013      	beq.n	80085e6 <HAL_GPIO_Init+0x21a>
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	4a19      	ldr	r2, [pc, #100]	@ (8008628 <HAL_GPIO_Init+0x25c>)
 80085c2:	4293      	cmp	r3, r2
 80085c4:	d00d      	beq.n	80085e2 <HAL_GPIO_Init+0x216>
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	4a18      	ldr	r2, [pc, #96]	@ (800862c <HAL_GPIO_Init+0x260>)
 80085ca:	4293      	cmp	r3, r2
 80085cc:	d007      	beq.n	80085de <HAL_GPIO_Init+0x212>
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	4a17      	ldr	r2, [pc, #92]	@ (8008630 <HAL_GPIO_Init+0x264>)
 80085d2:	4293      	cmp	r3, r2
 80085d4:	d101      	bne.n	80085da <HAL_GPIO_Init+0x20e>
 80085d6:	2309      	movs	r3, #9
 80085d8:	e02d      	b.n	8008636 <HAL_GPIO_Init+0x26a>
 80085da:	230a      	movs	r3, #10
 80085dc:	e02b      	b.n	8008636 <HAL_GPIO_Init+0x26a>
 80085de:	2308      	movs	r3, #8
 80085e0:	e029      	b.n	8008636 <HAL_GPIO_Init+0x26a>
 80085e2:	2307      	movs	r3, #7
 80085e4:	e027      	b.n	8008636 <HAL_GPIO_Init+0x26a>
 80085e6:	2306      	movs	r3, #6
 80085e8:	e025      	b.n	8008636 <HAL_GPIO_Init+0x26a>
 80085ea:	2305      	movs	r3, #5
 80085ec:	e023      	b.n	8008636 <HAL_GPIO_Init+0x26a>
 80085ee:	2304      	movs	r3, #4
 80085f0:	e021      	b.n	8008636 <HAL_GPIO_Init+0x26a>
 80085f2:	2303      	movs	r3, #3
 80085f4:	e01f      	b.n	8008636 <HAL_GPIO_Init+0x26a>
 80085f6:	2302      	movs	r3, #2
 80085f8:	e01d      	b.n	8008636 <HAL_GPIO_Init+0x26a>
 80085fa:	2301      	movs	r3, #1
 80085fc:	e01b      	b.n	8008636 <HAL_GPIO_Init+0x26a>
 80085fe:	bf00      	nop
 8008600:	58000080 	.word	0x58000080
 8008604:	58024400 	.word	0x58024400
 8008608:	58000400 	.word	0x58000400
 800860c:	58020000 	.word	0x58020000
 8008610:	58020400 	.word	0x58020400
 8008614:	58020800 	.word	0x58020800
 8008618:	58020c00 	.word	0x58020c00
 800861c:	58021000 	.word	0x58021000
 8008620:	58021400 	.word	0x58021400
 8008624:	58021800 	.word	0x58021800
 8008628:	58021c00 	.word	0x58021c00
 800862c:	58022000 	.word	0x58022000
 8008630:	58022400 	.word	0x58022400
 8008634:	2300      	movs	r3, #0
 8008636:	69fa      	ldr	r2, [r7, #28]
 8008638:	f002 0203 	and.w	r2, r2, #3
 800863c:	0092      	lsls	r2, r2, #2
 800863e:	4093      	lsls	r3, r2
 8008640:	69ba      	ldr	r2, [r7, #24]
 8008642:	4313      	orrs	r3, r2
 8008644:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8008646:	4938      	ldr	r1, [pc, #224]	@ (8008728 <HAL_GPIO_Init+0x35c>)
 8008648:	69fb      	ldr	r3, [r7, #28]
 800864a:	089b      	lsrs	r3, r3, #2
 800864c:	3302      	adds	r3, #2
 800864e:	69ba      	ldr	r2, [r7, #24]
 8008650:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8008654:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800865c:	693b      	ldr	r3, [r7, #16]
 800865e:	43db      	mvns	r3, r3
 8008660:	69ba      	ldr	r2, [r7, #24]
 8008662:	4013      	ands	r3, r2
 8008664:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8008666:	683b      	ldr	r3, [r7, #0]
 8008668:	685b      	ldr	r3, [r3, #4]
 800866a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800866e:	2b00      	cmp	r3, #0
 8008670:	d003      	beq.n	800867a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8008672:	69ba      	ldr	r2, [r7, #24]
 8008674:	693b      	ldr	r3, [r7, #16]
 8008676:	4313      	orrs	r3, r2
 8008678:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800867a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800867e:	69bb      	ldr	r3, [r7, #24]
 8008680:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8008682:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008686:	685b      	ldr	r3, [r3, #4]
 8008688:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800868a:	693b      	ldr	r3, [r7, #16]
 800868c:	43db      	mvns	r3, r3
 800868e:	69ba      	ldr	r2, [r7, #24]
 8008690:	4013      	ands	r3, r2
 8008692:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8008694:	683b      	ldr	r3, [r7, #0]
 8008696:	685b      	ldr	r3, [r3, #4]
 8008698:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800869c:	2b00      	cmp	r3, #0
 800869e:	d003      	beq.n	80086a8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80086a0:	69ba      	ldr	r2, [r7, #24]
 80086a2:	693b      	ldr	r3, [r7, #16]
 80086a4:	4313      	orrs	r3, r2
 80086a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80086a8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80086ac:	69bb      	ldr	r3, [r7, #24]
 80086ae:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80086b0:	697b      	ldr	r3, [r7, #20]
 80086b2:	685b      	ldr	r3, [r3, #4]
 80086b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80086b6:	693b      	ldr	r3, [r7, #16]
 80086b8:	43db      	mvns	r3, r3
 80086ba:	69ba      	ldr	r2, [r7, #24]
 80086bc:	4013      	ands	r3, r2
 80086be:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80086c0:	683b      	ldr	r3, [r7, #0]
 80086c2:	685b      	ldr	r3, [r3, #4]
 80086c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d003      	beq.n	80086d4 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80086cc:	69ba      	ldr	r2, [r7, #24]
 80086ce:	693b      	ldr	r3, [r7, #16]
 80086d0:	4313      	orrs	r3, r2
 80086d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80086d4:	697b      	ldr	r3, [r7, #20]
 80086d6:	69ba      	ldr	r2, [r7, #24]
 80086d8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80086da:	697b      	ldr	r3, [r7, #20]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80086e0:	693b      	ldr	r3, [r7, #16]
 80086e2:	43db      	mvns	r3, r3
 80086e4:	69ba      	ldr	r2, [r7, #24]
 80086e6:	4013      	ands	r3, r2
 80086e8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80086ea:	683b      	ldr	r3, [r7, #0]
 80086ec:	685b      	ldr	r3, [r3, #4]
 80086ee:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d003      	beq.n	80086fe <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80086f6:	69ba      	ldr	r2, [r7, #24]
 80086f8:	693b      	ldr	r3, [r7, #16]
 80086fa:	4313      	orrs	r3, r2
 80086fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80086fe:	697b      	ldr	r3, [r7, #20]
 8008700:	69ba      	ldr	r2, [r7, #24]
 8008702:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8008704:	69fb      	ldr	r3, [r7, #28]
 8008706:	3301      	adds	r3, #1
 8008708:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800870a:	683b      	ldr	r3, [r7, #0]
 800870c:	681a      	ldr	r2, [r3, #0]
 800870e:	69fb      	ldr	r3, [r7, #28]
 8008710:	fa22 f303 	lsr.w	r3, r2, r3
 8008714:	2b00      	cmp	r3, #0
 8008716:	f47f ae63 	bne.w	80083e0 <HAL_GPIO_Init+0x14>
  }
}
 800871a:	bf00      	nop
 800871c:	bf00      	nop
 800871e:	3724      	adds	r7, #36	@ 0x24
 8008720:	46bd      	mov	sp, r7
 8008722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008726:	4770      	bx	lr
 8008728:	58000400 	.word	0x58000400

0800872c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800872c:	b580      	push	{r7, lr}
 800872e:	b084      	sub	sp, #16
 8008730:	af00      	add	r7, sp, #0
 8008732:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8008734:	4b19      	ldr	r3, [pc, #100]	@ (800879c <HAL_PWREx_ConfigSupply+0x70>)
 8008736:	68db      	ldr	r3, [r3, #12]
 8008738:	f003 0304 	and.w	r3, r3, #4
 800873c:	2b04      	cmp	r3, #4
 800873e:	d00a      	beq.n	8008756 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8008740:	4b16      	ldr	r3, [pc, #88]	@ (800879c <HAL_PWREx_ConfigSupply+0x70>)
 8008742:	68db      	ldr	r3, [r3, #12]
 8008744:	f003 0307 	and.w	r3, r3, #7
 8008748:	687a      	ldr	r2, [r7, #4]
 800874a:	429a      	cmp	r2, r3
 800874c:	d001      	beq.n	8008752 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800874e:	2301      	movs	r3, #1
 8008750:	e01f      	b.n	8008792 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8008752:	2300      	movs	r3, #0
 8008754:	e01d      	b.n	8008792 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8008756:	4b11      	ldr	r3, [pc, #68]	@ (800879c <HAL_PWREx_ConfigSupply+0x70>)
 8008758:	68db      	ldr	r3, [r3, #12]
 800875a:	f023 0207 	bic.w	r2, r3, #7
 800875e:	490f      	ldr	r1, [pc, #60]	@ (800879c <HAL_PWREx_ConfigSupply+0x70>)
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	4313      	orrs	r3, r2
 8008764:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8008766:	f7fd ff89 	bl	800667c <HAL_GetTick>
 800876a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800876c:	e009      	b.n	8008782 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800876e:	f7fd ff85 	bl	800667c <HAL_GetTick>
 8008772:	4602      	mov	r2, r0
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	1ad3      	subs	r3, r2, r3
 8008778:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800877c:	d901      	bls.n	8008782 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800877e:	2301      	movs	r3, #1
 8008780:	e007      	b.n	8008792 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008782:	4b06      	ldr	r3, [pc, #24]	@ (800879c <HAL_PWREx_ConfigSupply+0x70>)
 8008784:	685b      	ldr	r3, [r3, #4]
 8008786:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800878a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800878e:	d1ee      	bne.n	800876e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8008790:	2300      	movs	r3, #0
}
 8008792:	4618      	mov	r0, r3
 8008794:	3710      	adds	r7, #16
 8008796:	46bd      	mov	sp, r7
 8008798:	bd80      	pop	{r7, pc}
 800879a:	bf00      	nop
 800879c:	58024800 	.word	0x58024800

080087a0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80087a0:	b580      	push	{r7, lr}
 80087a2:	b08c      	sub	sp, #48	@ 0x30
 80087a4:	af00      	add	r7, sp, #0
 80087a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d102      	bne.n	80087b4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80087ae:	2301      	movs	r3, #1
 80087b0:	f000 bc48 	b.w	8009044 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	f003 0301 	and.w	r3, r3, #1
 80087bc:	2b00      	cmp	r3, #0
 80087be:	f000 8088 	beq.w	80088d2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80087c2:	4b99      	ldr	r3, [pc, #612]	@ (8008a28 <HAL_RCC_OscConfig+0x288>)
 80087c4:	691b      	ldr	r3, [r3, #16]
 80087c6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80087ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80087cc:	4b96      	ldr	r3, [pc, #600]	@ (8008a28 <HAL_RCC_OscConfig+0x288>)
 80087ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80087d0:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80087d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80087d4:	2b10      	cmp	r3, #16
 80087d6:	d007      	beq.n	80087e8 <HAL_RCC_OscConfig+0x48>
 80087d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80087da:	2b18      	cmp	r3, #24
 80087dc:	d111      	bne.n	8008802 <HAL_RCC_OscConfig+0x62>
 80087de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087e0:	f003 0303 	and.w	r3, r3, #3
 80087e4:	2b02      	cmp	r3, #2
 80087e6:	d10c      	bne.n	8008802 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80087e8:	4b8f      	ldr	r3, [pc, #572]	@ (8008a28 <HAL_RCC_OscConfig+0x288>)
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d06d      	beq.n	80088d0 <HAL_RCC_OscConfig+0x130>
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	685b      	ldr	r3, [r3, #4]
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d169      	bne.n	80088d0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80087fc:	2301      	movs	r3, #1
 80087fe:	f000 bc21 	b.w	8009044 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	685b      	ldr	r3, [r3, #4]
 8008806:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800880a:	d106      	bne.n	800881a <HAL_RCC_OscConfig+0x7a>
 800880c:	4b86      	ldr	r3, [pc, #536]	@ (8008a28 <HAL_RCC_OscConfig+0x288>)
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	4a85      	ldr	r2, [pc, #532]	@ (8008a28 <HAL_RCC_OscConfig+0x288>)
 8008812:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008816:	6013      	str	r3, [r2, #0]
 8008818:	e02e      	b.n	8008878 <HAL_RCC_OscConfig+0xd8>
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	685b      	ldr	r3, [r3, #4]
 800881e:	2b00      	cmp	r3, #0
 8008820:	d10c      	bne.n	800883c <HAL_RCC_OscConfig+0x9c>
 8008822:	4b81      	ldr	r3, [pc, #516]	@ (8008a28 <HAL_RCC_OscConfig+0x288>)
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	4a80      	ldr	r2, [pc, #512]	@ (8008a28 <HAL_RCC_OscConfig+0x288>)
 8008828:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800882c:	6013      	str	r3, [r2, #0]
 800882e:	4b7e      	ldr	r3, [pc, #504]	@ (8008a28 <HAL_RCC_OscConfig+0x288>)
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	4a7d      	ldr	r2, [pc, #500]	@ (8008a28 <HAL_RCC_OscConfig+0x288>)
 8008834:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008838:	6013      	str	r3, [r2, #0]
 800883a:	e01d      	b.n	8008878 <HAL_RCC_OscConfig+0xd8>
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	685b      	ldr	r3, [r3, #4]
 8008840:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008844:	d10c      	bne.n	8008860 <HAL_RCC_OscConfig+0xc0>
 8008846:	4b78      	ldr	r3, [pc, #480]	@ (8008a28 <HAL_RCC_OscConfig+0x288>)
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	4a77      	ldr	r2, [pc, #476]	@ (8008a28 <HAL_RCC_OscConfig+0x288>)
 800884c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008850:	6013      	str	r3, [r2, #0]
 8008852:	4b75      	ldr	r3, [pc, #468]	@ (8008a28 <HAL_RCC_OscConfig+0x288>)
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	4a74      	ldr	r2, [pc, #464]	@ (8008a28 <HAL_RCC_OscConfig+0x288>)
 8008858:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800885c:	6013      	str	r3, [r2, #0]
 800885e:	e00b      	b.n	8008878 <HAL_RCC_OscConfig+0xd8>
 8008860:	4b71      	ldr	r3, [pc, #452]	@ (8008a28 <HAL_RCC_OscConfig+0x288>)
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	4a70      	ldr	r2, [pc, #448]	@ (8008a28 <HAL_RCC_OscConfig+0x288>)
 8008866:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800886a:	6013      	str	r3, [r2, #0]
 800886c:	4b6e      	ldr	r3, [pc, #440]	@ (8008a28 <HAL_RCC_OscConfig+0x288>)
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	4a6d      	ldr	r2, [pc, #436]	@ (8008a28 <HAL_RCC_OscConfig+0x288>)
 8008872:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008876:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	685b      	ldr	r3, [r3, #4]
 800887c:	2b00      	cmp	r3, #0
 800887e:	d013      	beq.n	80088a8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008880:	f7fd fefc 	bl	800667c <HAL_GetTick>
 8008884:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008886:	e008      	b.n	800889a <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008888:	f7fd fef8 	bl	800667c <HAL_GetTick>
 800888c:	4602      	mov	r2, r0
 800888e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008890:	1ad3      	subs	r3, r2, r3
 8008892:	2b64      	cmp	r3, #100	@ 0x64
 8008894:	d901      	bls.n	800889a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008896:	2303      	movs	r3, #3
 8008898:	e3d4      	b.n	8009044 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800889a:	4b63      	ldr	r3, [pc, #396]	@ (8008a28 <HAL_RCC_OscConfig+0x288>)
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d0f0      	beq.n	8008888 <HAL_RCC_OscConfig+0xe8>
 80088a6:	e014      	b.n	80088d2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80088a8:	f7fd fee8 	bl	800667c <HAL_GetTick>
 80088ac:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80088ae:	e008      	b.n	80088c2 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80088b0:	f7fd fee4 	bl	800667c <HAL_GetTick>
 80088b4:	4602      	mov	r2, r0
 80088b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088b8:	1ad3      	subs	r3, r2, r3
 80088ba:	2b64      	cmp	r3, #100	@ 0x64
 80088bc:	d901      	bls.n	80088c2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80088be:	2303      	movs	r3, #3
 80088c0:	e3c0      	b.n	8009044 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80088c2:	4b59      	ldr	r3, [pc, #356]	@ (8008a28 <HAL_RCC_OscConfig+0x288>)
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d1f0      	bne.n	80088b0 <HAL_RCC_OscConfig+0x110>
 80088ce:	e000      	b.n	80088d2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80088d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	f003 0302 	and.w	r3, r3, #2
 80088da:	2b00      	cmp	r3, #0
 80088dc:	f000 80ca 	beq.w	8008a74 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80088e0:	4b51      	ldr	r3, [pc, #324]	@ (8008a28 <HAL_RCC_OscConfig+0x288>)
 80088e2:	691b      	ldr	r3, [r3, #16]
 80088e4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80088e8:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80088ea:	4b4f      	ldr	r3, [pc, #316]	@ (8008a28 <HAL_RCC_OscConfig+0x288>)
 80088ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80088ee:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80088f0:	6a3b      	ldr	r3, [r7, #32]
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d007      	beq.n	8008906 <HAL_RCC_OscConfig+0x166>
 80088f6:	6a3b      	ldr	r3, [r7, #32]
 80088f8:	2b18      	cmp	r3, #24
 80088fa:	d156      	bne.n	80089aa <HAL_RCC_OscConfig+0x20a>
 80088fc:	69fb      	ldr	r3, [r7, #28]
 80088fe:	f003 0303 	and.w	r3, r3, #3
 8008902:	2b00      	cmp	r3, #0
 8008904:	d151      	bne.n	80089aa <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008906:	4b48      	ldr	r3, [pc, #288]	@ (8008a28 <HAL_RCC_OscConfig+0x288>)
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	f003 0304 	and.w	r3, r3, #4
 800890e:	2b00      	cmp	r3, #0
 8008910:	d005      	beq.n	800891e <HAL_RCC_OscConfig+0x17e>
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	68db      	ldr	r3, [r3, #12]
 8008916:	2b00      	cmp	r3, #0
 8008918:	d101      	bne.n	800891e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800891a:	2301      	movs	r3, #1
 800891c:	e392      	b.n	8009044 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800891e:	4b42      	ldr	r3, [pc, #264]	@ (8008a28 <HAL_RCC_OscConfig+0x288>)
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	f023 0219 	bic.w	r2, r3, #25
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	68db      	ldr	r3, [r3, #12]
 800892a:	493f      	ldr	r1, [pc, #252]	@ (8008a28 <HAL_RCC_OscConfig+0x288>)
 800892c:	4313      	orrs	r3, r2
 800892e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008930:	f7fd fea4 	bl	800667c <HAL_GetTick>
 8008934:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008936:	e008      	b.n	800894a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008938:	f7fd fea0 	bl	800667c <HAL_GetTick>
 800893c:	4602      	mov	r2, r0
 800893e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008940:	1ad3      	subs	r3, r2, r3
 8008942:	2b02      	cmp	r3, #2
 8008944:	d901      	bls.n	800894a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8008946:	2303      	movs	r3, #3
 8008948:	e37c      	b.n	8009044 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800894a:	4b37      	ldr	r3, [pc, #220]	@ (8008a28 <HAL_RCC_OscConfig+0x288>)
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	f003 0304 	and.w	r3, r3, #4
 8008952:	2b00      	cmp	r3, #0
 8008954:	d0f0      	beq.n	8008938 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008956:	f7fd fec1 	bl	80066dc <HAL_GetREVID>
 800895a:	4603      	mov	r3, r0
 800895c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8008960:	4293      	cmp	r3, r2
 8008962:	d817      	bhi.n	8008994 <HAL_RCC_OscConfig+0x1f4>
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	691b      	ldr	r3, [r3, #16]
 8008968:	2b40      	cmp	r3, #64	@ 0x40
 800896a:	d108      	bne.n	800897e <HAL_RCC_OscConfig+0x1de>
 800896c:	4b2e      	ldr	r3, [pc, #184]	@ (8008a28 <HAL_RCC_OscConfig+0x288>)
 800896e:	685b      	ldr	r3, [r3, #4]
 8008970:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8008974:	4a2c      	ldr	r2, [pc, #176]	@ (8008a28 <HAL_RCC_OscConfig+0x288>)
 8008976:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800897a:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800897c:	e07a      	b.n	8008a74 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800897e:	4b2a      	ldr	r3, [pc, #168]	@ (8008a28 <HAL_RCC_OscConfig+0x288>)
 8008980:	685b      	ldr	r3, [r3, #4]
 8008982:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	691b      	ldr	r3, [r3, #16]
 800898a:	031b      	lsls	r3, r3, #12
 800898c:	4926      	ldr	r1, [pc, #152]	@ (8008a28 <HAL_RCC_OscConfig+0x288>)
 800898e:	4313      	orrs	r3, r2
 8008990:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008992:	e06f      	b.n	8008a74 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008994:	4b24      	ldr	r3, [pc, #144]	@ (8008a28 <HAL_RCC_OscConfig+0x288>)
 8008996:	685b      	ldr	r3, [r3, #4]
 8008998:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	691b      	ldr	r3, [r3, #16]
 80089a0:	061b      	lsls	r3, r3, #24
 80089a2:	4921      	ldr	r1, [pc, #132]	@ (8008a28 <HAL_RCC_OscConfig+0x288>)
 80089a4:	4313      	orrs	r3, r2
 80089a6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80089a8:	e064      	b.n	8008a74 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	68db      	ldr	r3, [r3, #12]
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d047      	beq.n	8008a42 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80089b2:	4b1d      	ldr	r3, [pc, #116]	@ (8008a28 <HAL_RCC_OscConfig+0x288>)
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	f023 0219 	bic.w	r2, r3, #25
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	68db      	ldr	r3, [r3, #12]
 80089be:	491a      	ldr	r1, [pc, #104]	@ (8008a28 <HAL_RCC_OscConfig+0x288>)
 80089c0:	4313      	orrs	r3, r2
 80089c2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80089c4:	f7fd fe5a 	bl	800667c <HAL_GetTick>
 80089c8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80089ca:	e008      	b.n	80089de <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80089cc:	f7fd fe56 	bl	800667c <HAL_GetTick>
 80089d0:	4602      	mov	r2, r0
 80089d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089d4:	1ad3      	subs	r3, r2, r3
 80089d6:	2b02      	cmp	r3, #2
 80089d8:	d901      	bls.n	80089de <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80089da:	2303      	movs	r3, #3
 80089dc:	e332      	b.n	8009044 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80089de:	4b12      	ldr	r3, [pc, #72]	@ (8008a28 <HAL_RCC_OscConfig+0x288>)
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	f003 0304 	and.w	r3, r3, #4
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d0f0      	beq.n	80089cc <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80089ea:	f7fd fe77 	bl	80066dc <HAL_GetREVID>
 80089ee:	4603      	mov	r3, r0
 80089f0:	f241 0203 	movw	r2, #4099	@ 0x1003
 80089f4:	4293      	cmp	r3, r2
 80089f6:	d819      	bhi.n	8008a2c <HAL_RCC_OscConfig+0x28c>
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	691b      	ldr	r3, [r3, #16]
 80089fc:	2b40      	cmp	r3, #64	@ 0x40
 80089fe:	d108      	bne.n	8008a12 <HAL_RCC_OscConfig+0x272>
 8008a00:	4b09      	ldr	r3, [pc, #36]	@ (8008a28 <HAL_RCC_OscConfig+0x288>)
 8008a02:	685b      	ldr	r3, [r3, #4]
 8008a04:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8008a08:	4a07      	ldr	r2, [pc, #28]	@ (8008a28 <HAL_RCC_OscConfig+0x288>)
 8008a0a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008a0e:	6053      	str	r3, [r2, #4]
 8008a10:	e030      	b.n	8008a74 <HAL_RCC_OscConfig+0x2d4>
 8008a12:	4b05      	ldr	r3, [pc, #20]	@ (8008a28 <HAL_RCC_OscConfig+0x288>)
 8008a14:	685b      	ldr	r3, [r3, #4]
 8008a16:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	691b      	ldr	r3, [r3, #16]
 8008a1e:	031b      	lsls	r3, r3, #12
 8008a20:	4901      	ldr	r1, [pc, #4]	@ (8008a28 <HAL_RCC_OscConfig+0x288>)
 8008a22:	4313      	orrs	r3, r2
 8008a24:	604b      	str	r3, [r1, #4]
 8008a26:	e025      	b.n	8008a74 <HAL_RCC_OscConfig+0x2d4>
 8008a28:	58024400 	.word	0x58024400
 8008a2c:	4b9a      	ldr	r3, [pc, #616]	@ (8008c98 <HAL_RCC_OscConfig+0x4f8>)
 8008a2e:	685b      	ldr	r3, [r3, #4]
 8008a30:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	691b      	ldr	r3, [r3, #16]
 8008a38:	061b      	lsls	r3, r3, #24
 8008a3a:	4997      	ldr	r1, [pc, #604]	@ (8008c98 <HAL_RCC_OscConfig+0x4f8>)
 8008a3c:	4313      	orrs	r3, r2
 8008a3e:	604b      	str	r3, [r1, #4]
 8008a40:	e018      	b.n	8008a74 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008a42:	4b95      	ldr	r3, [pc, #596]	@ (8008c98 <HAL_RCC_OscConfig+0x4f8>)
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	4a94      	ldr	r2, [pc, #592]	@ (8008c98 <HAL_RCC_OscConfig+0x4f8>)
 8008a48:	f023 0301 	bic.w	r3, r3, #1
 8008a4c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008a4e:	f7fd fe15 	bl	800667c <HAL_GetTick>
 8008a52:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008a54:	e008      	b.n	8008a68 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008a56:	f7fd fe11 	bl	800667c <HAL_GetTick>
 8008a5a:	4602      	mov	r2, r0
 8008a5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a5e:	1ad3      	subs	r3, r2, r3
 8008a60:	2b02      	cmp	r3, #2
 8008a62:	d901      	bls.n	8008a68 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8008a64:	2303      	movs	r3, #3
 8008a66:	e2ed      	b.n	8009044 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008a68:	4b8b      	ldr	r3, [pc, #556]	@ (8008c98 <HAL_RCC_OscConfig+0x4f8>)
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	f003 0304 	and.w	r3, r3, #4
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d1f0      	bne.n	8008a56 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	f003 0310 	and.w	r3, r3, #16
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	f000 80a9 	beq.w	8008bd4 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008a82:	4b85      	ldr	r3, [pc, #532]	@ (8008c98 <HAL_RCC_OscConfig+0x4f8>)
 8008a84:	691b      	ldr	r3, [r3, #16]
 8008a86:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008a8a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008a8c:	4b82      	ldr	r3, [pc, #520]	@ (8008c98 <HAL_RCC_OscConfig+0x4f8>)
 8008a8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a90:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8008a92:	69bb      	ldr	r3, [r7, #24]
 8008a94:	2b08      	cmp	r3, #8
 8008a96:	d007      	beq.n	8008aa8 <HAL_RCC_OscConfig+0x308>
 8008a98:	69bb      	ldr	r3, [r7, #24]
 8008a9a:	2b18      	cmp	r3, #24
 8008a9c:	d13a      	bne.n	8008b14 <HAL_RCC_OscConfig+0x374>
 8008a9e:	697b      	ldr	r3, [r7, #20]
 8008aa0:	f003 0303 	and.w	r3, r3, #3
 8008aa4:	2b01      	cmp	r3, #1
 8008aa6:	d135      	bne.n	8008b14 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008aa8:	4b7b      	ldr	r3, [pc, #492]	@ (8008c98 <HAL_RCC_OscConfig+0x4f8>)
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d005      	beq.n	8008ac0 <HAL_RCC_OscConfig+0x320>
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	69db      	ldr	r3, [r3, #28]
 8008ab8:	2b80      	cmp	r3, #128	@ 0x80
 8008aba:	d001      	beq.n	8008ac0 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8008abc:	2301      	movs	r3, #1
 8008abe:	e2c1      	b.n	8009044 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008ac0:	f7fd fe0c 	bl	80066dc <HAL_GetREVID>
 8008ac4:	4603      	mov	r3, r0
 8008ac6:	f241 0203 	movw	r2, #4099	@ 0x1003
 8008aca:	4293      	cmp	r3, r2
 8008acc:	d817      	bhi.n	8008afe <HAL_RCC_OscConfig+0x35e>
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	6a1b      	ldr	r3, [r3, #32]
 8008ad2:	2b20      	cmp	r3, #32
 8008ad4:	d108      	bne.n	8008ae8 <HAL_RCC_OscConfig+0x348>
 8008ad6:	4b70      	ldr	r3, [pc, #448]	@ (8008c98 <HAL_RCC_OscConfig+0x4f8>)
 8008ad8:	685b      	ldr	r3, [r3, #4]
 8008ada:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8008ade:	4a6e      	ldr	r2, [pc, #440]	@ (8008c98 <HAL_RCC_OscConfig+0x4f8>)
 8008ae0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008ae4:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008ae6:	e075      	b.n	8008bd4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008ae8:	4b6b      	ldr	r3, [pc, #428]	@ (8008c98 <HAL_RCC_OscConfig+0x4f8>)
 8008aea:	685b      	ldr	r3, [r3, #4]
 8008aec:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	6a1b      	ldr	r3, [r3, #32]
 8008af4:	069b      	lsls	r3, r3, #26
 8008af6:	4968      	ldr	r1, [pc, #416]	@ (8008c98 <HAL_RCC_OscConfig+0x4f8>)
 8008af8:	4313      	orrs	r3, r2
 8008afa:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008afc:	e06a      	b.n	8008bd4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008afe:	4b66      	ldr	r3, [pc, #408]	@ (8008c98 <HAL_RCC_OscConfig+0x4f8>)
 8008b00:	68db      	ldr	r3, [r3, #12]
 8008b02:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	6a1b      	ldr	r3, [r3, #32]
 8008b0a:	061b      	lsls	r3, r3, #24
 8008b0c:	4962      	ldr	r1, [pc, #392]	@ (8008c98 <HAL_RCC_OscConfig+0x4f8>)
 8008b0e:	4313      	orrs	r3, r2
 8008b10:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008b12:	e05f      	b.n	8008bd4 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	69db      	ldr	r3, [r3, #28]
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d042      	beq.n	8008ba2 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8008b1c:	4b5e      	ldr	r3, [pc, #376]	@ (8008c98 <HAL_RCC_OscConfig+0x4f8>)
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	4a5d      	ldr	r2, [pc, #372]	@ (8008c98 <HAL_RCC_OscConfig+0x4f8>)
 8008b22:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008b26:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008b28:	f7fd fda8 	bl	800667c <HAL_GetTick>
 8008b2c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008b2e:	e008      	b.n	8008b42 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8008b30:	f7fd fda4 	bl	800667c <HAL_GetTick>
 8008b34:	4602      	mov	r2, r0
 8008b36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b38:	1ad3      	subs	r3, r2, r3
 8008b3a:	2b02      	cmp	r3, #2
 8008b3c:	d901      	bls.n	8008b42 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8008b3e:	2303      	movs	r3, #3
 8008b40:	e280      	b.n	8009044 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008b42:	4b55      	ldr	r3, [pc, #340]	@ (8008c98 <HAL_RCC_OscConfig+0x4f8>)
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d0f0      	beq.n	8008b30 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008b4e:	f7fd fdc5 	bl	80066dc <HAL_GetREVID>
 8008b52:	4603      	mov	r3, r0
 8008b54:	f241 0203 	movw	r2, #4099	@ 0x1003
 8008b58:	4293      	cmp	r3, r2
 8008b5a:	d817      	bhi.n	8008b8c <HAL_RCC_OscConfig+0x3ec>
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	6a1b      	ldr	r3, [r3, #32]
 8008b60:	2b20      	cmp	r3, #32
 8008b62:	d108      	bne.n	8008b76 <HAL_RCC_OscConfig+0x3d6>
 8008b64:	4b4c      	ldr	r3, [pc, #304]	@ (8008c98 <HAL_RCC_OscConfig+0x4f8>)
 8008b66:	685b      	ldr	r3, [r3, #4]
 8008b68:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8008b6c:	4a4a      	ldr	r2, [pc, #296]	@ (8008c98 <HAL_RCC_OscConfig+0x4f8>)
 8008b6e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008b72:	6053      	str	r3, [r2, #4]
 8008b74:	e02e      	b.n	8008bd4 <HAL_RCC_OscConfig+0x434>
 8008b76:	4b48      	ldr	r3, [pc, #288]	@ (8008c98 <HAL_RCC_OscConfig+0x4f8>)
 8008b78:	685b      	ldr	r3, [r3, #4]
 8008b7a:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	6a1b      	ldr	r3, [r3, #32]
 8008b82:	069b      	lsls	r3, r3, #26
 8008b84:	4944      	ldr	r1, [pc, #272]	@ (8008c98 <HAL_RCC_OscConfig+0x4f8>)
 8008b86:	4313      	orrs	r3, r2
 8008b88:	604b      	str	r3, [r1, #4]
 8008b8a:	e023      	b.n	8008bd4 <HAL_RCC_OscConfig+0x434>
 8008b8c:	4b42      	ldr	r3, [pc, #264]	@ (8008c98 <HAL_RCC_OscConfig+0x4f8>)
 8008b8e:	68db      	ldr	r3, [r3, #12]
 8008b90:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	6a1b      	ldr	r3, [r3, #32]
 8008b98:	061b      	lsls	r3, r3, #24
 8008b9a:	493f      	ldr	r1, [pc, #252]	@ (8008c98 <HAL_RCC_OscConfig+0x4f8>)
 8008b9c:	4313      	orrs	r3, r2
 8008b9e:	60cb      	str	r3, [r1, #12]
 8008ba0:	e018      	b.n	8008bd4 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8008ba2:	4b3d      	ldr	r3, [pc, #244]	@ (8008c98 <HAL_RCC_OscConfig+0x4f8>)
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	4a3c      	ldr	r2, [pc, #240]	@ (8008c98 <HAL_RCC_OscConfig+0x4f8>)
 8008ba8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008bac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008bae:	f7fd fd65 	bl	800667c <HAL_GetTick>
 8008bb2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008bb4:	e008      	b.n	8008bc8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8008bb6:	f7fd fd61 	bl	800667c <HAL_GetTick>
 8008bba:	4602      	mov	r2, r0
 8008bbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008bbe:	1ad3      	subs	r3, r2, r3
 8008bc0:	2b02      	cmp	r3, #2
 8008bc2:	d901      	bls.n	8008bc8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8008bc4:	2303      	movs	r3, #3
 8008bc6:	e23d      	b.n	8009044 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008bc8:	4b33      	ldr	r3, [pc, #204]	@ (8008c98 <HAL_RCC_OscConfig+0x4f8>)
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d1f0      	bne.n	8008bb6 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	f003 0308 	and.w	r3, r3, #8
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d036      	beq.n	8008c4e <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	695b      	ldr	r3, [r3, #20]
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d019      	beq.n	8008c1c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008be8:	4b2b      	ldr	r3, [pc, #172]	@ (8008c98 <HAL_RCC_OscConfig+0x4f8>)
 8008bea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008bec:	4a2a      	ldr	r2, [pc, #168]	@ (8008c98 <HAL_RCC_OscConfig+0x4f8>)
 8008bee:	f043 0301 	orr.w	r3, r3, #1
 8008bf2:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008bf4:	f7fd fd42 	bl	800667c <HAL_GetTick>
 8008bf8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008bfa:	e008      	b.n	8008c0e <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008bfc:	f7fd fd3e 	bl	800667c <HAL_GetTick>
 8008c00:	4602      	mov	r2, r0
 8008c02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c04:	1ad3      	subs	r3, r2, r3
 8008c06:	2b02      	cmp	r3, #2
 8008c08:	d901      	bls.n	8008c0e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8008c0a:	2303      	movs	r3, #3
 8008c0c:	e21a      	b.n	8009044 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008c0e:	4b22      	ldr	r3, [pc, #136]	@ (8008c98 <HAL_RCC_OscConfig+0x4f8>)
 8008c10:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008c12:	f003 0302 	and.w	r3, r3, #2
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d0f0      	beq.n	8008bfc <HAL_RCC_OscConfig+0x45c>
 8008c1a:	e018      	b.n	8008c4e <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008c1c:	4b1e      	ldr	r3, [pc, #120]	@ (8008c98 <HAL_RCC_OscConfig+0x4f8>)
 8008c1e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008c20:	4a1d      	ldr	r2, [pc, #116]	@ (8008c98 <HAL_RCC_OscConfig+0x4f8>)
 8008c22:	f023 0301 	bic.w	r3, r3, #1
 8008c26:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008c28:	f7fd fd28 	bl	800667c <HAL_GetTick>
 8008c2c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008c2e:	e008      	b.n	8008c42 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008c30:	f7fd fd24 	bl	800667c <HAL_GetTick>
 8008c34:	4602      	mov	r2, r0
 8008c36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c38:	1ad3      	subs	r3, r2, r3
 8008c3a:	2b02      	cmp	r3, #2
 8008c3c:	d901      	bls.n	8008c42 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8008c3e:	2303      	movs	r3, #3
 8008c40:	e200      	b.n	8009044 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008c42:	4b15      	ldr	r3, [pc, #84]	@ (8008c98 <HAL_RCC_OscConfig+0x4f8>)
 8008c44:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008c46:	f003 0302 	and.w	r3, r3, #2
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d1f0      	bne.n	8008c30 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	f003 0320 	and.w	r3, r3, #32
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d039      	beq.n	8008cce <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	699b      	ldr	r3, [r3, #24]
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d01c      	beq.n	8008c9c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8008c62:	4b0d      	ldr	r3, [pc, #52]	@ (8008c98 <HAL_RCC_OscConfig+0x4f8>)
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	4a0c      	ldr	r2, [pc, #48]	@ (8008c98 <HAL_RCC_OscConfig+0x4f8>)
 8008c68:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8008c6c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008c6e:	f7fd fd05 	bl	800667c <HAL_GetTick>
 8008c72:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008c74:	e008      	b.n	8008c88 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008c76:	f7fd fd01 	bl	800667c <HAL_GetTick>
 8008c7a:	4602      	mov	r2, r0
 8008c7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c7e:	1ad3      	subs	r3, r2, r3
 8008c80:	2b02      	cmp	r3, #2
 8008c82:	d901      	bls.n	8008c88 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8008c84:	2303      	movs	r3, #3
 8008c86:	e1dd      	b.n	8009044 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008c88:	4b03      	ldr	r3, [pc, #12]	@ (8008c98 <HAL_RCC_OscConfig+0x4f8>)
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d0f0      	beq.n	8008c76 <HAL_RCC_OscConfig+0x4d6>
 8008c94:	e01b      	b.n	8008cce <HAL_RCC_OscConfig+0x52e>
 8008c96:	bf00      	nop
 8008c98:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8008c9c:	4b9b      	ldr	r3, [pc, #620]	@ (8008f0c <HAL_RCC_OscConfig+0x76c>)
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	4a9a      	ldr	r2, [pc, #616]	@ (8008f0c <HAL_RCC_OscConfig+0x76c>)
 8008ca2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008ca6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008ca8:	f7fd fce8 	bl	800667c <HAL_GetTick>
 8008cac:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008cae:	e008      	b.n	8008cc2 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008cb0:	f7fd fce4 	bl	800667c <HAL_GetTick>
 8008cb4:	4602      	mov	r2, r0
 8008cb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008cb8:	1ad3      	subs	r3, r2, r3
 8008cba:	2b02      	cmp	r3, #2
 8008cbc:	d901      	bls.n	8008cc2 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8008cbe:	2303      	movs	r3, #3
 8008cc0:	e1c0      	b.n	8009044 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008cc2:	4b92      	ldr	r3, [pc, #584]	@ (8008f0c <HAL_RCC_OscConfig+0x76c>)
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d1f0      	bne.n	8008cb0 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	f003 0304 	and.w	r3, r3, #4
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	f000 8081 	beq.w	8008dde <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8008cdc:	4b8c      	ldr	r3, [pc, #560]	@ (8008f10 <HAL_RCC_OscConfig+0x770>)
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	4a8b      	ldr	r2, [pc, #556]	@ (8008f10 <HAL_RCC_OscConfig+0x770>)
 8008ce2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008ce6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008ce8:	f7fd fcc8 	bl	800667c <HAL_GetTick>
 8008cec:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008cee:	e008      	b.n	8008d02 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008cf0:	f7fd fcc4 	bl	800667c <HAL_GetTick>
 8008cf4:	4602      	mov	r2, r0
 8008cf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008cf8:	1ad3      	subs	r3, r2, r3
 8008cfa:	2b64      	cmp	r3, #100	@ 0x64
 8008cfc:	d901      	bls.n	8008d02 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8008cfe:	2303      	movs	r3, #3
 8008d00:	e1a0      	b.n	8009044 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008d02:	4b83      	ldr	r3, [pc, #524]	@ (8008f10 <HAL_RCC_OscConfig+0x770>)
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d0f0      	beq.n	8008cf0 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	689b      	ldr	r3, [r3, #8]
 8008d12:	2b01      	cmp	r3, #1
 8008d14:	d106      	bne.n	8008d24 <HAL_RCC_OscConfig+0x584>
 8008d16:	4b7d      	ldr	r3, [pc, #500]	@ (8008f0c <HAL_RCC_OscConfig+0x76c>)
 8008d18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008d1a:	4a7c      	ldr	r2, [pc, #496]	@ (8008f0c <HAL_RCC_OscConfig+0x76c>)
 8008d1c:	f043 0301 	orr.w	r3, r3, #1
 8008d20:	6713      	str	r3, [r2, #112]	@ 0x70
 8008d22:	e02d      	b.n	8008d80 <HAL_RCC_OscConfig+0x5e0>
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	689b      	ldr	r3, [r3, #8]
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d10c      	bne.n	8008d46 <HAL_RCC_OscConfig+0x5a6>
 8008d2c:	4b77      	ldr	r3, [pc, #476]	@ (8008f0c <HAL_RCC_OscConfig+0x76c>)
 8008d2e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008d30:	4a76      	ldr	r2, [pc, #472]	@ (8008f0c <HAL_RCC_OscConfig+0x76c>)
 8008d32:	f023 0301 	bic.w	r3, r3, #1
 8008d36:	6713      	str	r3, [r2, #112]	@ 0x70
 8008d38:	4b74      	ldr	r3, [pc, #464]	@ (8008f0c <HAL_RCC_OscConfig+0x76c>)
 8008d3a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008d3c:	4a73      	ldr	r2, [pc, #460]	@ (8008f0c <HAL_RCC_OscConfig+0x76c>)
 8008d3e:	f023 0304 	bic.w	r3, r3, #4
 8008d42:	6713      	str	r3, [r2, #112]	@ 0x70
 8008d44:	e01c      	b.n	8008d80 <HAL_RCC_OscConfig+0x5e0>
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	689b      	ldr	r3, [r3, #8]
 8008d4a:	2b05      	cmp	r3, #5
 8008d4c:	d10c      	bne.n	8008d68 <HAL_RCC_OscConfig+0x5c8>
 8008d4e:	4b6f      	ldr	r3, [pc, #444]	@ (8008f0c <HAL_RCC_OscConfig+0x76c>)
 8008d50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008d52:	4a6e      	ldr	r2, [pc, #440]	@ (8008f0c <HAL_RCC_OscConfig+0x76c>)
 8008d54:	f043 0304 	orr.w	r3, r3, #4
 8008d58:	6713      	str	r3, [r2, #112]	@ 0x70
 8008d5a:	4b6c      	ldr	r3, [pc, #432]	@ (8008f0c <HAL_RCC_OscConfig+0x76c>)
 8008d5c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008d5e:	4a6b      	ldr	r2, [pc, #428]	@ (8008f0c <HAL_RCC_OscConfig+0x76c>)
 8008d60:	f043 0301 	orr.w	r3, r3, #1
 8008d64:	6713      	str	r3, [r2, #112]	@ 0x70
 8008d66:	e00b      	b.n	8008d80 <HAL_RCC_OscConfig+0x5e0>
 8008d68:	4b68      	ldr	r3, [pc, #416]	@ (8008f0c <HAL_RCC_OscConfig+0x76c>)
 8008d6a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008d6c:	4a67      	ldr	r2, [pc, #412]	@ (8008f0c <HAL_RCC_OscConfig+0x76c>)
 8008d6e:	f023 0301 	bic.w	r3, r3, #1
 8008d72:	6713      	str	r3, [r2, #112]	@ 0x70
 8008d74:	4b65      	ldr	r3, [pc, #404]	@ (8008f0c <HAL_RCC_OscConfig+0x76c>)
 8008d76:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008d78:	4a64      	ldr	r2, [pc, #400]	@ (8008f0c <HAL_RCC_OscConfig+0x76c>)
 8008d7a:	f023 0304 	bic.w	r3, r3, #4
 8008d7e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	689b      	ldr	r3, [r3, #8]
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d015      	beq.n	8008db4 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008d88:	f7fd fc78 	bl	800667c <HAL_GetTick>
 8008d8c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008d8e:	e00a      	b.n	8008da6 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008d90:	f7fd fc74 	bl	800667c <HAL_GetTick>
 8008d94:	4602      	mov	r2, r0
 8008d96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d98:	1ad3      	subs	r3, r2, r3
 8008d9a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008d9e:	4293      	cmp	r3, r2
 8008da0:	d901      	bls.n	8008da6 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8008da2:	2303      	movs	r3, #3
 8008da4:	e14e      	b.n	8009044 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008da6:	4b59      	ldr	r3, [pc, #356]	@ (8008f0c <HAL_RCC_OscConfig+0x76c>)
 8008da8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008daa:	f003 0302 	and.w	r3, r3, #2
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d0ee      	beq.n	8008d90 <HAL_RCC_OscConfig+0x5f0>
 8008db2:	e014      	b.n	8008dde <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008db4:	f7fd fc62 	bl	800667c <HAL_GetTick>
 8008db8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008dba:	e00a      	b.n	8008dd2 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008dbc:	f7fd fc5e 	bl	800667c <HAL_GetTick>
 8008dc0:	4602      	mov	r2, r0
 8008dc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008dc4:	1ad3      	subs	r3, r2, r3
 8008dc6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008dca:	4293      	cmp	r3, r2
 8008dcc:	d901      	bls.n	8008dd2 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8008dce:	2303      	movs	r3, #3
 8008dd0:	e138      	b.n	8009044 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008dd2:	4b4e      	ldr	r3, [pc, #312]	@ (8008f0c <HAL_RCC_OscConfig+0x76c>)
 8008dd4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008dd6:	f003 0302 	and.w	r3, r3, #2
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d1ee      	bne.n	8008dbc <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	f000 812d 	beq.w	8009042 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8008de8:	4b48      	ldr	r3, [pc, #288]	@ (8008f0c <HAL_RCC_OscConfig+0x76c>)
 8008dea:	691b      	ldr	r3, [r3, #16]
 8008dec:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008df0:	2b18      	cmp	r3, #24
 8008df2:	f000 80bd 	beq.w	8008f70 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008dfa:	2b02      	cmp	r3, #2
 8008dfc:	f040 809e 	bne.w	8008f3c <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008e00:	4b42      	ldr	r3, [pc, #264]	@ (8008f0c <HAL_RCC_OscConfig+0x76c>)
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	4a41      	ldr	r2, [pc, #260]	@ (8008f0c <HAL_RCC_OscConfig+0x76c>)
 8008e06:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008e0a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008e0c:	f7fd fc36 	bl	800667c <HAL_GetTick>
 8008e10:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008e12:	e008      	b.n	8008e26 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008e14:	f7fd fc32 	bl	800667c <HAL_GetTick>
 8008e18:	4602      	mov	r2, r0
 8008e1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e1c:	1ad3      	subs	r3, r2, r3
 8008e1e:	2b02      	cmp	r3, #2
 8008e20:	d901      	bls.n	8008e26 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8008e22:	2303      	movs	r3, #3
 8008e24:	e10e      	b.n	8009044 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008e26:	4b39      	ldr	r3, [pc, #228]	@ (8008f0c <HAL_RCC_OscConfig+0x76c>)
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d1f0      	bne.n	8008e14 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008e32:	4b36      	ldr	r3, [pc, #216]	@ (8008f0c <HAL_RCC_OscConfig+0x76c>)
 8008e34:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008e36:	4b37      	ldr	r3, [pc, #220]	@ (8008f14 <HAL_RCC_OscConfig+0x774>)
 8008e38:	4013      	ands	r3, r2
 8008e3a:	687a      	ldr	r2, [r7, #4]
 8008e3c:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8008e3e:	687a      	ldr	r2, [r7, #4]
 8008e40:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8008e42:	0112      	lsls	r2, r2, #4
 8008e44:	430a      	orrs	r2, r1
 8008e46:	4931      	ldr	r1, [pc, #196]	@ (8008f0c <HAL_RCC_OscConfig+0x76c>)
 8008e48:	4313      	orrs	r3, r2
 8008e4a:	628b      	str	r3, [r1, #40]	@ 0x28
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008e50:	3b01      	subs	r3, #1
 8008e52:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008e5a:	3b01      	subs	r3, #1
 8008e5c:	025b      	lsls	r3, r3, #9
 8008e5e:	b29b      	uxth	r3, r3
 8008e60:	431a      	orrs	r2, r3
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e66:	3b01      	subs	r3, #1
 8008e68:	041b      	lsls	r3, r3, #16
 8008e6a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8008e6e:	431a      	orrs	r2, r3
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008e74:	3b01      	subs	r3, #1
 8008e76:	061b      	lsls	r3, r3, #24
 8008e78:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8008e7c:	4923      	ldr	r1, [pc, #140]	@ (8008f0c <HAL_RCC_OscConfig+0x76c>)
 8008e7e:	4313      	orrs	r3, r2
 8008e80:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8008e82:	4b22      	ldr	r3, [pc, #136]	@ (8008f0c <HAL_RCC_OscConfig+0x76c>)
 8008e84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e86:	4a21      	ldr	r2, [pc, #132]	@ (8008f0c <HAL_RCC_OscConfig+0x76c>)
 8008e88:	f023 0301 	bic.w	r3, r3, #1
 8008e8c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8008e8e:	4b1f      	ldr	r3, [pc, #124]	@ (8008f0c <HAL_RCC_OscConfig+0x76c>)
 8008e90:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008e92:	4b21      	ldr	r3, [pc, #132]	@ (8008f18 <HAL_RCC_OscConfig+0x778>)
 8008e94:	4013      	ands	r3, r2
 8008e96:	687a      	ldr	r2, [r7, #4]
 8008e98:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8008e9a:	00d2      	lsls	r2, r2, #3
 8008e9c:	491b      	ldr	r1, [pc, #108]	@ (8008f0c <HAL_RCC_OscConfig+0x76c>)
 8008e9e:	4313      	orrs	r3, r2
 8008ea0:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8008ea2:	4b1a      	ldr	r3, [pc, #104]	@ (8008f0c <HAL_RCC_OscConfig+0x76c>)
 8008ea4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ea6:	f023 020c 	bic.w	r2, r3, #12
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008eae:	4917      	ldr	r1, [pc, #92]	@ (8008f0c <HAL_RCC_OscConfig+0x76c>)
 8008eb0:	4313      	orrs	r3, r2
 8008eb2:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8008eb4:	4b15      	ldr	r3, [pc, #84]	@ (8008f0c <HAL_RCC_OscConfig+0x76c>)
 8008eb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008eb8:	f023 0202 	bic.w	r2, r3, #2
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008ec0:	4912      	ldr	r1, [pc, #72]	@ (8008f0c <HAL_RCC_OscConfig+0x76c>)
 8008ec2:	4313      	orrs	r3, r2
 8008ec4:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8008ec6:	4b11      	ldr	r3, [pc, #68]	@ (8008f0c <HAL_RCC_OscConfig+0x76c>)
 8008ec8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008eca:	4a10      	ldr	r2, [pc, #64]	@ (8008f0c <HAL_RCC_OscConfig+0x76c>)
 8008ecc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008ed0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008ed2:	4b0e      	ldr	r3, [pc, #56]	@ (8008f0c <HAL_RCC_OscConfig+0x76c>)
 8008ed4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ed6:	4a0d      	ldr	r2, [pc, #52]	@ (8008f0c <HAL_RCC_OscConfig+0x76c>)
 8008ed8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008edc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8008ede:	4b0b      	ldr	r3, [pc, #44]	@ (8008f0c <HAL_RCC_OscConfig+0x76c>)
 8008ee0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ee2:	4a0a      	ldr	r2, [pc, #40]	@ (8008f0c <HAL_RCC_OscConfig+0x76c>)
 8008ee4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008ee8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8008eea:	4b08      	ldr	r3, [pc, #32]	@ (8008f0c <HAL_RCC_OscConfig+0x76c>)
 8008eec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008eee:	4a07      	ldr	r2, [pc, #28]	@ (8008f0c <HAL_RCC_OscConfig+0x76c>)
 8008ef0:	f043 0301 	orr.w	r3, r3, #1
 8008ef4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008ef6:	4b05      	ldr	r3, [pc, #20]	@ (8008f0c <HAL_RCC_OscConfig+0x76c>)
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	4a04      	ldr	r2, [pc, #16]	@ (8008f0c <HAL_RCC_OscConfig+0x76c>)
 8008efc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008f00:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008f02:	f7fd fbbb 	bl	800667c <HAL_GetTick>
 8008f06:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008f08:	e011      	b.n	8008f2e <HAL_RCC_OscConfig+0x78e>
 8008f0a:	bf00      	nop
 8008f0c:	58024400 	.word	0x58024400
 8008f10:	58024800 	.word	0x58024800
 8008f14:	fffffc0c 	.word	0xfffffc0c
 8008f18:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008f1c:	f7fd fbae 	bl	800667c <HAL_GetTick>
 8008f20:	4602      	mov	r2, r0
 8008f22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f24:	1ad3      	subs	r3, r2, r3
 8008f26:	2b02      	cmp	r3, #2
 8008f28:	d901      	bls.n	8008f2e <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8008f2a:	2303      	movs	r3, #3
 8008f2c:	e08a      	b.n	8009044 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008f2e:	4b47      	ldr	r3, [pc, #284]	@ (800904c <HAL_RCC_OscConfig+0x8ac>)
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d0f0      	beq.n	8008f1c <HAL_RCC_OscConfig+0x77c>
 8008f3a:	e082      	b.n	8009042 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008f3c:	4b43      	ldr	r3, [pc, #268]	@ (800904c <HAL_RCC_OscConfig+0x8ac>)
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	4a42      	ldr	r2, [pc, #264]	@ (800904c <HAL_RCC_OscConfig+0x8ac>)
 8008f42:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008f46:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008f48:	f7fd fb98 	bl	800667c <HAL_GetTick>
 8008f4c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008f4e:	e008      	b.n	8008f62 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008f50:	f7fd fb94 	bl	800667c <HAL_GetTick>
 8008f54:	4602      	mov	r2, r0
 8008f56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f58:	1ad3      	subs	r3, r2, r3
 8008f5a:	2b02      	cmp	r3, #2
 8008f5c:	d901      	bls.n	8008f62 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8008f5e:	2303      	movs	r3, #3
 8008f60:	e070      	b.n	8009044 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008f62:	4b3a      	ldr	r3, [pc, #232]	@ (800904c <HAL_RCC_OscConfig+0x8ac>)
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d1f0      	bne.n	8008f50 <HAL_RCC_OscConfig+0x7b0>
 8008f6e:	e068      	b.n	8009042 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8008f70:	4b36      	ldr	r3, [pc, #216]	@ (800904c <HAL_RCC_OscConfig+0x8ac>)
 8008f72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f74:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8008f76:	4b35      	ldr	r3, [pc, #212]	@ (800904c <HAL_RCC_OscConfig+0x8ac>)
 8008f78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008f7a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f80:	2b01      	cmp	r3, #1
 8008f82:	d031      	beq.n	8008fe8 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008f84:	693b      	ldr	r3, [r7, #16]
 8008f86:	f003 0203 	and.w	r2, r3, #3
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008f8e:	429a      	cmp	r2, r3
 8008f90:	d12a      	bne.n	8008fe8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008f92:	693b      	ldr	r3, [r7, #16]
 8008f94:	091b      	lsrs	r3, r3, #4
 8008f96:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008f9e:	429a      	cmp	r2, r3
 8008fa0:	d122      	bne.n	8008fe8 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008fac:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008fae:	429a      	cmp	r2, r3
 8008fb0:	d11a      	bne.n	8008fe8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	0a5b      	lsrs	r3, r3, #9
 8008fb6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008fbe:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008fc0:	429a      	cmp	r2, r3
 8008fc2:	d111      	bne.n	8008fe8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	0c1b      	lsrs	r3, r3, #16
 8008fc8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008fd0:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008fd2:	429a      	cmp	r2, r3
 8008fd4:	d108      	bne.n	8008fe8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	0e1b      	lsrs	r3, r3, #24
 8008fda:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008fe2:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008fe4:	429a      	cmp	r2, r3
 8008fe6:	d001      	beq.n	8008fec <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8008fe8:	2301      	movs	r3, #1
 8008fea:	e02b      	b.n	8009044 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8008fec:	4b17      	ldr	r3, [pc, #92]	@ (800904c <HAL_RCC_OscConfig+0x8ac>)
 8008fee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008ff0:	08db      	lsrs	r3, r3, #3
 8008ff2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008ff6:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008ffc:	693a      	ldr	r2, [r7, #16]
 8008ffe:	429a      	cmp	r2, r3
 8009000:	d01f      	beq.n	8009042 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8009002:	4b12      	ldr	r3, [pc, #72]	@ (800904c <HAL_RCC_OscConfig+0x8ac>)
 8009004:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009006:	4a11      	ldr	r2, [pc, #68]	@ (800904c <HAL_RCC_OscConfig+0x8ac>)
 8009008:	f023 0301 	bic.w	r3, r3, #1
 800900c:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800900e:	f7fd fb35 	bl	800667c <HAL_GetTick>
 8009012:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8009014:	bf00      	nop
 8009016:	f7fd fb31 	bl	800667c <HAL_GetTick>
 800901a:	4602      	mov	r2, r0
 800901c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800901e:	4293      	cmp	r3, r2
 8009020:	d0f9      	beq.n	8009016 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8009022:	4b0a      	ldr	r3, [pc, #40]	@ (800904c <HAL_RCC_OscConfig+0x8ac>)
 8009024:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009026:	4b0a      	ldr	r3, [pc, #40]	@ (8009050 <HAL_RCC_OscConfig+0x8b0>)
 8009028:	4013      	ands	r3, r2
 800902a:	687a      	ldr	r2, [r7, #4]
 800902c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800902e:	00d2      	lsls	r2, r2, #3
 8009030:	4906      	ldr	r1, [pc, #24]	@ (800904c <HAL_RCC_OscConfig+0x8ac>)
 8009032:	4313      	orrs	r3, r2
 8009034:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8009036:	4b05      	ldr	r3, [pc, #20]	@ (800904c <HAL_RCC_OscConfig+0x8ac>)
 8009038:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800903a:	4a04      	ldr	r2, [pc, #16]	@ (800904c <HAL_RCC_OscConfig+0x8ac>)
 800903c:	f043 0301 	orr.w	r3, r3, #1
 8009040:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8009042:	2300      	movs	r3, #0
}
 8009044:	4618      	mov	r0, r3
 8009046:	3730      	adds	r7, #48	@ 0x30
 8009048:	46bd      	mov	sp, r7
 800904a:	bd80      	pop	{r7, pc}
 800904c:	58024400 	.word	0x58024400
 8009050:	ffff0007 	.word	0xffff0007

08009054 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009054:	b580      	push	{r7, lr}
 8009056:	b086      	sub	sp, #24
 8009058:	af00      	add	r7, sp, #0
 800905a:	6078      	str	r0, [r7, #4]
 800905c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	2b00      	cmp	r3, #0
 8009062:	d101      	bne.n	8009068 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009064:	2301      	movs	r3, #1
 8009066:	e19c      	b.n	80093a2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8009068:	4b8a      	ldr	r3, [pc, #552]	@ (8009294 <HAL_RCC_ClockConfig+0x240>)
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	f003 030f 	and.w	r3, r3, #15
 8009070:	683a      	ldr	r2, [r7, #0]
 8009072:	429a      	cmp	r2, r3
 8009074:	d910      	bls.n	8009098 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009076:	4b87      	ldr	r3, [pc, #540]	@ (8009294 <HAL_RCC_ClockConfig+0x240>)
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	f023 020f 	bic.w	r2, r3, #15
 800907e:	4985      	ldr	r1, [pc, #532]	@ (8009294 <HAL_RCC_ClockConfig+0x240>)
 8009080:	683b      	ldr	r3, [r7, #0]
 8009082:	4313      	orrs	r3, r2
 8009084:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009086:	4b83      	ldr	r3, [pc, #524]	@ (8009294 <HAL_RCC_ClockConfig+0x240>)
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	f003 030f 	and.w	r3, r3, #15
 800908e:	683a      	ldr	r2, [r7, #0]
 8009090:	429a      	cmp	r2, r3
 8009092:	d001      	beq.n	8009098 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8009094:	2301      	movs	r3, #1
 8009096:	e184      	b.n	80093a2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	f003 0304 	and.w	r3, r3, #4
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d010      	beq.n	80090c6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	691a      	ldr	r2, [r3, #16]
 80090a8:	4b7b      	ldr	r3, [pc, #492]	@ (8009298 <HAL_RCC_ClockConfig+0x244>)
 80090aa:	699b      	ldr	r3, [r3, #24]
 80090ac:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80090b0:	429a      	cmp	r2, r3
 80090b2:	d908      	bls.n	80090c6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80090b4:	4b78      	ldr	r3, [pc, #480]	@ (8009298 <HAL_RCC_ClockConfig+0x244>)
 80090b6:	699b      	ldr	r3, [r3, #24]
 80090b8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	691b      	ldr	r3, [r3, #16]
 80090c0:	4975      	ldr	r1, [pc, #468]	@ (8009298 <HAL_RCC_ClockConfig+0x244>)
 80090c2:	4313      	orrs	r3, r2
 80090c4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	f003 0308 	and.w	r3, r3, #8
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d010      	beq.n	80090f4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	695a      	ldr	r2, [r3, #20]
 80090d6:	4b70      	ldr	r3, [pc, #448]	@ (8009298 <HAL_RCC_ClockConfig+0x244>)
 80090d8:	69db      	ldr	r3, [r3, #28]
 80090da:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80090de:	429a      	cmp	r2, r3
 80090e0:	d908      	bls.n	80090f4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80090e2:	4b6d      	ldr	r3, [pc, #436]	@ (8009298 <HAL_RCC_ClockConfig+0x244>)
 80090e4:	69db      	ldr	r3, [r3, #28]
 80090e6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	695b      	ldr	r3, [r3, #20]
 80090ee:	496a      	ldr	r1, [pc, #424]	@ (8009298 <HAL_RCC_ClockConfig+0x244>)
 80090f0:	4313      	orrs	r3, r2
 80090f2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	f003 0310 	and.w	r3, r3, #16
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	d010      	beq.n	8009122 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	699a      	ldr	r2, [r3, #24]
 8009104:	4b64      	ldr	r3, [pc, #400]	@ (8009298 <HAL_RCC_ClockConfig+0x244>)
 8009106:	69db      	ldr	r3, [r3, #28]
 8009108:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800910c:	429a      	cmp	r2, r3
 800910e:	d908      	bls.n	8009122 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8009110:	4b61      	ldr	r3, [pc, #388]	@ (8009298 <HAL_RCC_ClockConfig+0x244>)
 8009112:	69db      	ldr	r3, [r3, #28]
 8009114:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	699b      	ldr	r3, [r3, #24]
 800911c:	495e      	ldr	r1, [pc, #376]	@ (8009298 <HAL_RCC_ClockConfig+0x244>)
 800911e:	4313      	orrs	r3, r2
 8009120:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	f003 0320 	and.w	r3, r3, #32
 800912a:	2b00      	cmp	r3, #0
 800912c:	d010      	beq.n	8009150 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	69da      	ldr	r2, [r3, #28]
 8009132:	4b59      	ldr	r3, [pc, #356]	@ (8009298 <HAL_RCC_ClockConfig+0x244>)
 8009134:	6a1b      	ldr	r3, [r3, #32]
 8009136:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800913a:	429a      	cmp	r2, r3
 800913c:	d908      	bls.n	8009150 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800913e:	4b56      	ldr	r3, [pc, #344]	@ (8009298 <HAL_RCC_ClockConfig+0x244>)
 8009140:	6a1b      	ldr	r3, [r3, #32]
 8009142:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	69db      	ldr	r3, [r3, #28]
 800914a:	4953      	ldr	r1, [pc, #332]	@ (8009298 <HAL_RCC_ClockConfig+0x244>)
 800914c:	4313      	orrs	r3, r2
 800914e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	f003 0302 	and.w	r3, r3, #2
 8009158:	2b00      	cmp	r3, #0
 800915a:	d010      	beq.n	800917e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	68da      	ldr	r2, [r3, #12]
 8009160:	4b4d      	ldr	r3, [pc, #308]	@ (8009298 <HAL_RCC_ClockConfig+0x244>)
 8009162:	699b      	ldr	r3, [r3, #24]
 8009164:	f003 030f 	and.w	r3, r3, #15
 8009168:	429a      	cmp	r2, r3
 800916a:	d908      	bls.n	800917e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800916c:	4b4a      	ldr	r3, [pc, #296]	@ (8009298 <HAL_RCC_ClockConfig+0x244>)
 800916e:	699b      	ldr	r3, [r3, #24]
 8009170:	f023 020f 	bic.w	r2, r3, #15
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	68db      	ldr	r3, [r3, #12]
 8009178:	4947      	ldr	r1, [pc, #284]	@ (8009298 <HAL_RCC_ClockConfig+0x244>)
 800917a:	4313      	orrs	r3, r2
 800917c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	f003 0301 	and.w	r3, r3, #1
 8009186:	2b00      	cmp	r3, #0
 8009188:	d055      	beq.n	8009236 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800918a:	4b43      	ldr	r3, [pc, #268]	@ (8009298 <HAL_RCC_ClockConfig+0x244>)
 800918c:	699b      	ldr	r3, [r3, #24]
 800918e:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	689b      	ldr	r3, [r3, #8]
 8009196:	4940      	ldr	r1, [pc, #256]	@ (8009298 <HAL_RCC_ClockConfig+0x244>)
 8009198:	4313      	orrs	r3, r2
 800919a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	685b      	ldr	r3, [r3, #4]
 80091a0:	2b02      	cmp	r3, #2
 80091a2:	d107      	bne.n	80091b4 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80091a4:	4b3c      	ldr	r3, [pc, #240]	@ (8009298 <HAL_RCC_ClockConfig+0x244>)
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d121      	bne.n	80091f4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80091b0:	2301      	movs	r3, #1
 80091b2:	e0f6      	b.n	80093a2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	685b      	ldr	r3, [r3, #4]
 80091b8:	2b03      	cmp	r3, #3
 80091ba:	d107      	bne.n	80091cc <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80091bc:	4b36      	ldr	r3, [pc, #216]	@ (8009298 <HAL_RCC_ClockConfig+0x244>)
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d115      	bne.n	80091f4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80091c8:	2301      	movs	r3, #1
 80091ca:	e0ea      	b.n	80093a2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	685b      	ldr	r3, [r3, #4]
 80091d0:	2b01      	cmp	r3, #1
 80091d2:	d107      	bne.n	80091e4 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80091d4:	4b30      	ldr	r3, [pc, #192]	@ (8009298 <HAL_RCC_ClockConfig+0x244>)
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d109      	bne.n	80091f4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80091e0:	2301      	movs	r3, #1
 80091e2:	e0de      	b.n	80093a2 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80091e4:	4b2c      	ldr	r3, [pc, #176]	@ (8009298 <HAL_RCC_ClockConfig+0x244>)
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	f003 0304 	and.w	r3, r3, #4
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d101      	bne.n	80091f4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80091f0:	2301      	movs	r3, #1
 80091f2:	e0d6      	b.n	80093a2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80091f4:	4b28      	ldr	r3, [pc, #160]	@ (8009298 <HAL_RCC_ClockConfig+0x244>)
 80091f6:	691b      	ldr	r3, [r3, #16]
 80091f8:	f023 0207 	bic.w	r2, r3, #7
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	685b      	ldr	r3, [r3, #4]
 8009200:	4925      	ldr	r1, [pc, #148]	@ (8009298 <HAL_RCC_ClockConfig+0x244>)
 8009202:	4313      	orrs	r3, r2
 8009204:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009206:	f7fd fa39 	bl	800667c <HAL_GetTick>
 800920a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800920c:	e00a      	b.n	8009224 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800920e:	f7fd fa35 	bl	800667c <HAL_GetTick>
 8009212:	4602      	mov	r2, r0
 8009214:	697b      	ldr	r3, [r7, #20]
 8009216:	1ad3      	subs	r3, r2, r3
 8009218:	f241 3288 	movw	r2, #5000	@ 0x1388
 800921c:	4293      	cmp	r3, r2
 800921e:	d901      	bls.n	8009224 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8009220:	2303      	movs	r3, #3
 8009222:	e0be      	b.n	80093a2 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009224:	4b1c      	ldr	r3, [pc, #112]	@ (8009298 <HAL_RCC_ClockConfig+0x244>)
 8009226:	691b      	ldr	r3, [r3, #16]
 8009228:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	685b      	ldr	r3, [r3, #4]
 8009230:	00db      	lsls	r3, r3, #3
 8009232:	429a      	cmp	r2, r3
 8009234:	d1eb      	bne.n	800920e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	f003 0302 	and.w	r3, r3, #2
 800923e:	2b00      	cmp	r3, #0
 8009240:	d010      	beq.n	8009264 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	68da      	ldr	r2, [r3, #12]
 8009246:	4b14      	ldr	r3, [pc, #80]	@ (8009298 <HAL_RCC_ClockConfig+0x244>)
 8009248:	699b      	ldr	r3, [r3, #24]
 800924a:	f003 030f 	and.w	r3, r3, #15
 800924e:	429a      	cmp	r2, r3
 8009250:	d208      	bcs.n	8009264 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009252:	4b11      	ldr	r3, [pc, #68]	@ (8009298 <HAL_RCC_ClockConfig+0x244>)
 8009254:	699b      	ldr	r3, [r3, #24]
 8009256:	f023 020f 	bic.w	r2, r3, #15
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	68db      	ldr	r3, [r3, #12]
 800925e:	490e      	ldr	r1, [pc, #56]	@ (8009298 <HAL_RCC_ClockConfig+0x244>)
 8009260:	4313      	orrs	r3, r2
 8009262:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8009264:	4b0b      	ldr	r3, [pc, #44]	@ (8009294 <HAL_RCC_ClockConfig+0x240>)
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	f003 030f 	and.w	r3, r3, #15
 800926c:	683a      	ldr	r2, [r7, #0]
 800926e:	429a      	cmp	r2, r3
 8009270:	d214      	bcs.n	800929c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009272:	4b08      	ldr	r3, [pc, #32]	@ (8009294 <HAL_RCC_ClockConfig+0x240>)
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	f023 020f 	bic.w	r2, r3, #15
 800927a:	4906      	ldr	r1, [pc, #24]	@ (8009294 <HAL_RCC_ClockConfig+0x240>)
 800927c:	683b      	ldr	r3, [r7, #0]
 800927e:	4313      	orrs	r3, r2
 8009280:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009282:	4b04      	ldr	r3, [pc, #16]	@ (8009294 <HAL_RCC_ClockConfig+0x240>)
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	f003 030f 	and.w	r3, r3, #15
 800928a:	683a      	ldr	r2, [r7, #0]
 800928c:	429a      	cmp	r2, r3
 800928e:	d005      	beq.n	800929c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8009290:	2301      	movs	r3, #1
 8009292:	e086      	b.n	80093a2 <HAL_RCC_ClockConfig+0x34e>
 8009294:	52002000 	.word	0x52002000
 8009298:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	f003 0304 	and.w	r3, r3, #4
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d010      	beq.n	80092ca <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	691a      	ldr	r2, [r3, #16]
 80092ac:	4b3f      	ldr	r3, [pc, #252]	@ (80093ac <HAL_RCC_ClockConfig+0x358>)
 80092ae:	699b      	ldr	r3, [r3, #24]
 80092b0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80092b4:	429a      	cmp	r2, r3
 80092b6:	d208      	bcs.n	80092ca <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80092b8:	4b3c      	ldr	r3, [pc, #240]	@ (80093ac <HAL_RCC_ClockConfig+0x358>)
 80092ba:	699b      	ldr	r3, [r3, #24]
 80092bc:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	691b      	ldr	r3, [r3, #16]
 80092c4:	4939      	ldr	r1, [pc, #228]	@ (80093ac <HAL_RCC_ClockConfig+0x358>)
 80092c6:	4313      	orrs	r3, r2
 80092c8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	f003 0308 	and.w	r3, r3, #8
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d010      	beq.n	80092f8 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	695a      	ldr	r2, [r3, #20]
 80092da:	4b34      	ldr	r3, [pc, #208]	@ (80093ac <HAL_RCC_ClockConfig+0x358>)
 80092dc:	69db      	ldr	r3, [r3, #28]
 80092de:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80092e2:	429a      	cmp	r2, r3
 80092e4:	d208      	bcs.n	80092f8 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80092e6:	4b31      	ldr	r3, [pc, #196]	@ (80093ac <HAL_RCC_ClockConfig+0x358>)
 80092e8:	69db      	ldr	r3, [r3, #28]
 80092ea:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	695b      	ldr	r3, [r3, #20]
 80092f2:	492e      	ldr	r1, [pc, #184]	@ (80093ac <HAL_RCC_ClockConfig+0x358>)
 80092f4:	4313      	orrs	r3, r2
 80092f6:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	f003 0310 	and.w	r3, r3, #16
 8009300:	2b00      	cmp	r3, #0
 8009302:	d010      	beq.n	8009326 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	699a      	ldr	r2, [r3, #24]
 8009308:	4b28      	ldr	r3, [pc, #160]	@ (80093ac <HAL_RCC_ClockConfig+0x358>)
 800930a:	69db      	ldr	r3, [r3, #28]
 800930c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8009310:	429a      	cmp	r2, r3
 8009312:	d208      	bcs.n	8009326 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8009314:	4b25      	ldr	r3, [pc, #148]	@ (80093ac <HAL_RCC_ClockConfig+0x358>)
 8009316:	69db      	ldr	r3, [r3, #28]
 8009318:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	699b      	ldr	r3, [r3, #24]
 8009320:	4922      	ldr	r1, [pc, #136]	@ (80093ac <HAL_RCC_ClockConfig+0x358>)
 8009322:	4313      	orrs	r3, r2
 8009324:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	f003 0320 	and.w	r3, r3, #32
 800932e:	2b00      	cmp	r3, #0
 8009330:	d010      	beq.n	8009354 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	69da      	ldr	r2, [r3, #28]
 8009336:	4b1d      	ldr	r3, [pc, #116]	@ (80093ac <HAL_RCC_ClockConfig+0x358>)
 8009338:	6a1b      	ldr	r3, [r3, #32]
 800933a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800933e:	429a      	cmp	r2, r3
 8009340:	d208      	bcs.n	8009354 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8009342:	4b1a      	ldr	r3, [pc, #104]	@ (80093ac <HAL_RCC_ClockConfig+0x358>)
 8009344:	6a1b      	ldr	r3, [r3, #32]
 8009346:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	69db      	ldr	r3, [r3, #28]
 800934e:	4917      	ldr	r1, [pc, #92]	@ (80093ac <HAL_RCC_ClockConfig+0x358>)
 8009350:	4313      	orrs	r3, r2
 8009352:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8009354:	f000 f834 	bl	80093c0 <HAL_RCC_GetSysClockFreq>
 8009358:	4602      	mov	r2, r0
 800935a:	4b14      	ldr	r3, [pc, #80]	@ (80093ac <HAL_RCC_ClockConfig+0x358>)
 800935c:	699b      	ldr	r3, [r3, #24]
 800935e:	0a1b      	lsrs	r3, r3, #8
 8009360:	f003 030f 	and.w	r3, r3, #15
 8009364:	4912      	ldr	r1, [pc, #72]	@ (80093b0 <HAL_RCC_ClockConfig+0x35c>)
 8009366:	5ccb      	ldrb	r3, [r1, r3]
 8009368:	f003 031f 	and.w	r3, r3, #31
 800936c:	fa22 f303 	lsr.w	r3, r2, r3
 8009370:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009372:	4b0e      	ldr	r3, [pc, #56]	@ (80093ac <HAL_RCC_ClockConfig+0x358>)
 8009374:	699b      	ldr	r3, [r3, #24]
 8009376:	f003 030f 	and.w	r3, r3, #15
 800937a:	4a0d      	ldr	r2, [pc, #52]	@ (80093b0 <HAL_RCC_ClockConfig+0x35c>)
 800937c:	5cd3      	ldrb	r3, [r2, r3]
 800937e:	f003 031f 	and.w	r3, r3, #31
 8009382:	693a      	ldr	r2, [r7, #16]
 8009384:	fa22 f303 	lsr.w	r3, r2, r3
 8009388:	4a0a      	ldr	r2, [pc, #40]	@ (80093b4 <HAL_RCC_ClockConfig+0x360>)
 800938a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800938c:	4a0a      	ldr	r2, [pc, #40]	@ (80093b8 <HAL_RCC_ClockConfig+0x364>)
 800938e:	693b      	ldr	r3, [r7, #16]
 8009390:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8009392:	4b0a      	ldr	r3, [pc, #40]	@ (80093bc <HAL_RCC_ClockConfig+0x368>)
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	4618      	mov	r0, r3
 8009398:	f7fd f926 	bl	80065e8 <HAL_InitTick>
 800939c:	4603      	mov	r3, r0
 800939e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80093a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80093a2:	4618      	mov	r0, r3
 80093a4:	3718      	adds	r7, #24
 80093a6:	46bd      	mov	sp, r7
 80093a8:	bd80      	pop	{r7, pc}
 80093aa:	bf00      	nop
 80093ac:	58024400 	.word	0x58024400
 80093b0:	08014030 	.word	0x08014030
 80093b4:	24000054 	.word	0x24000054
 80093b8:	24000050 	.word	0x24000050
 80093bc:	24000058 	.word	0x24000058

080093c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80093c0:	b480      	push	{r7}
 80093c2:	b089      	sub	sp, #36	@ 0x24
 80093c4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80093c6:	4bb3      	ldr	r3, [pc, #716]	@ (8009694 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80093c8:	691b      	ldr	r3, [r3, #16]
 80093ca:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80093ce:	2b18      	cmp	r3, #24
 80093d0:	f200 8155 	bhi.w	800967e <HAL_RCC_GetSysClockFreq+0x2be>
 80093d4:	a201      	add	r2, pc, #4	@ (adr r2, 80093dc <HAL_RCC_GetSysClockFreq+0x1c>)
 80093d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093da:	bf00      	nop
 80093dc:	08009441 	.word	0x08009441
 80093e0:	0800967f 	.word	0x0800967f
 80093e4:	0800967f 	.word	0x0800967f
 80093e8:	0800967f 	.word	0x0800967f
 80093ec:	0800967f 	.word	0x0800967f
 80093f0:	0800967f 	.word	0x0800967f
 80093f4:	0800967f 	.word	0x0800967f
 80093f8:	0800967f 	.word	0x0800967f
 80093fc:	08009467 	.word	0x08009467
 8009400:	0800967f 	.word	0x0800967f
 8009404:	0800967f 	.word	0x0800967f
 8009408:	0800967f 	.word	0x0800967f
 800940c:	0800967f 	.word	0x0800967f
 8009410:	0800967f 	.word	0x0800967f
 8009414:	0800967f 	.word	0x0800967f
 8009418:	0800967f 	.word	0x0800967f
 800941c:	0800946d 	.word	0x0800946d
 8009420:	0800967f 	.word	0x0800967f
 8009424:	0800967f 	.word	0x0800967f
 8009428:	0800967f 	.word	0x0800967f
 800942c:	0800967f 	.word	0x0800967f
 8009430:	0800967f 	.word	0x0800967f
 8009434:	0800967f 	.word	0x0800967f
 8009438:	0800967f 	.word	0x0800967f
 800943c:	08009473 	.word	0x08009473
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009440:	4b94      	ldr	r3, [pc, #592]	@ (8009694 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	f003 0320 	and.w	r3, r3, #32
 8009448:	2b00      	cmp	r3, #0
 800944a:	d009      	beq.n	8009460 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800944c:	4b91      	ldr	r3, [pc, #580]	@ (8009694 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	08db      	lsrs	r3, r3, #3
 8009452:	f003 0303 	and.w	r3, r3, #3
 8009456:	4a90      	ldr	r2, [pc, #576]	@ (8009698 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009458:	fa22 f303 	lsr.w	r3, r2, r3
 800945c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800945e:	e111      	b.n	8009684 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8009460:	4b8d      	ldr	r3, [pc, #564]	@ (8009698 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009462:	61bb      	str	r3, [r7, #24]
      break;
 8009464:	e10e      	b.n	8009684 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8009466:	4b8d      	ldr	r3, [pc, #564]	@ (800969c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8009468:	61bb      	str	r3, [r7, #24]
      break;
 800946a:	e10b      	b.n	8009684 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800946c:	4b8c      	ldr	r3, [pc, #560]	@ (80096a0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800946e:	61bb      	str	r3, [r7, #24]
      break;
 8009470:	e108      	b.n	8009684 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009472:	4b88      	ldr	r3, [pc, #544]	@ (8009694 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009474:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009476:	f003 0303 	and.w	r3, r3, #3
 800947a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800947c:	4b85      	ldr	r3, [pc, #532]	@ (8009694 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800947e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009480:	091b      	lsrs	r3, r3, #4
 8009482:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009486:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8009488:	4b82      	ldr	r3, [pc, #520]	@ (8009694 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800948a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800948c:	f003 0301 	and.w	r3, r3, #1
 8009490:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8009492:	4b80      	ldr	r3, [pc, #512]	@ (8009694 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009494:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009496:	08db      	lsrs	r3, r3, #3
 8009498:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800949c:	68fa      	ldr	r2, [r7, #12]
 800949e:	fb02 f303 	mul.w	r3, r2, r3
 80094a2:	ee07 3a90 	vmov	s15, r3
 80094a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80094aa:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80094ae:	693b      	ldr	r3, [r7, #16]
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	f000 80e1 	beq.w	8009678 <HAL_RCC_GetSysClockFreq+0x2b8>
 80094b6:	697b      	ldr	r3, [r7, #20]
 80094b8:	2b02      	cmp	r3, #2
 80094ba:	f000 8083 	beq.w	80095c4 <HAL_RCC_GetSysClockFreq+0x204>
 80094be:	697b      	ldr	r3, [r7, #20]
 80094c0:	2b02      	cmp	r3, #2
 80094c2:	f200 80a1 	bhi.w	8009608 <HAL_RCC_GetSysClockFreq+0x248>
 80094c6:	697b      	ldr	r3, [r7, #20]
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	d003      	beq.n	80094d4 <HAL_RCC_GetSysClockFreq+0x114>
 80094cc:	697b      	ldr	r3, [r7, #20]
 80094ce:	2b01      	cmp	r3, #1
 80094d0:	d056      	beq.n	8009580 <HAL_RCC_GetSysClockFreq+0x1c0>
 80094d2:	e099      	b.n	8009608 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80094d4:	4b6f      	ldr	r3, [pc, #444]	@ (8009694 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	f003 0320 	and.w	r3, r3, #32
 80094dc:	2b00      	cmp	r3, #0
 80094de:	d02d      	beq.n	800953c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80094e0:	4b6c      	ldr	r3, [pc, #432]	@ (8009694 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	08db      	lsrs	r3, r3, #3
 80094e6:	f003 0303 	and.w	r3, r3, #3
 80094ea:	4a6b      	ldr	r2, [pc, #428]	@ (8009698 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80094ec:	fa22 f303 	lsr.w	r3, r2, r3
 80094f0:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	ee07 3a90 	vmov	s15, r3
 80094f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80094fc:	693b      	ldr	r3, [r7, #16]
 80094fe:	ee07 3a90 	vmov	s15, r3
 8009502:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009506:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800950a:	4b62      	ldr	r3, [pc, #392]	@ (8009694 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800950c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800950e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009512:	ee07 3a90 	vmov	s15, r3
 8009516:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800951a:	ed97 6a02 	vldr	s12, [r7, #8]
 800951e:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80096a4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009522:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009526:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800952a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800952e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009532:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009536:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800953a:	e087      	b.n	800964c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800953c:	693b      	ldr	r3, [r7, #16]
 800953e:	ee07 3a90 	vmov	s15, r3
 8009542:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009546:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80096a8 <HAL_RCC_GetSysClockFreq+0x2e8>
 800954a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800954e:	4b51      	ldr	r3, [pc, #324]	@ (8009694 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009550:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009552:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009556:	ee07 3a90 	vmov	s15, r3
 800955a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800955e:	ed97 6a02 	vldr	s12, [r7, #8]
 8009562:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80096a4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009566:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800956a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800956e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009572:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009576:	ee67 7a27 	vmul.f32	s15, s14, s15
 800957a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800957e:	e065      	b.n	800964c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009580:	693b      	ldr	r3, [r7, #16]
 8009582:	ee07 3a90 	vmov	s15, r3
 8009586:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800958a:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80096ac <HAL_RCC_GetSysClockFreq+0x2ec>
 800958e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009592:	4b40      	ldr	r3, [pc, #256]	@ (8009694 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009594:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009596:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800959a:	ee07 3a90 	vmov	s15, r3
 800959e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80095a2:	ed97 6a02 	vldr	s12, [r7, #8]
 80095a6:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80096a4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80095aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80095ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80095b2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80095b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80095ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80095be:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80095c2:	e043      	b.n	800964c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80095c4:	693b      	ldr	r3, [r7, #16]
 80095c6:	ee07 3a90 	vmov	s15, r3
 80095ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80095ce:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80096b0 <HAL_RCC_GetSysClockFreq+0x2f0>
 80095d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80095d6:	4b2f      	ldr	r3, [pc, #188]	@ (8009694 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80095d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80095da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80095de:	ee07 3a90 	vmov	s15, r3
 80095e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80095e6:	ed97 6a02 	vldr	s12, [r7, #8]
 80095ea:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80096a4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80095ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80095f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80095f6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80095fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80095fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009602:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8009606:	e021      	b.n	800964c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009608:	693b      	ldr	r3, [r7, #16]
 800960a:	ee07 3a90 	vmov	s15, r3
 800960e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009612:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80096ac <HAL_RCC_GetSysClockFreq+0x2ec>
 8009616:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800961a:	4b1e      	ldr	r3, [pc, #120]	@ (8009694 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800961c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800961e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009622:	ee07 3a90 	vmov	s15, r3
 8009626:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800962a:	ed97 6a02 	vldr	s12, [r7, #8]
 800962e:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80096a4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009632:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009636:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800963a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800963e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009642:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009646:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800964a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800964c:	4b11      	ldr	r3, [pc, #68]	@ (8009694 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800964e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009650:	0a5b      	lsrs	r3, r3, #9
 8009652:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009656:	3301      	adds	r3, #1
 8009658:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800965a:	683b      	ldr	r3, [r7, #0]
 800965c:	ee07 3a90 	vmov	s15, r3
 8009660:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8009664:	edd7 6a07 	vldr	s13, [r7, #28]
 8009668:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800966c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009670:	ee17 3a90 	vmov	r3, s15
 8009674:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8009676:	e005      	b.n	8009684 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8009678:	2300      	movs	r3, #0
 800967a:	61bb      	str	r3, [r7, #24]
      break;
 800967c:	e002      	b.n	8009684 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800967e:	4b07      	ldr	r3, [pc, #28]	@ (800969c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8009680:	61bb      	str	r3, [r7, #24]
      break;
 8009682:	bf00      	nop
  }

  return sysclockfreq;
 8009684:	69bb      	ldr	r3, [r7, #24]
}
 8009686:	4618      	mov	r0, r3
 8009688:	3724      	adds	r7, #36	@ 0x24
 800968a:	46bd      	mov	sp, r7
 800968c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009690:	4770      	bx	lr
 8009692:	bf00      	nop
 8009694:	58024400 	.word	0x58024400
 8009698:	03d09000 	.word	0x03d09000
 800969c:	003d0900 	.word	0x003d0900
 80096a0:	017d7840 	.word	0x017d7840
 80096a4:	46000000 	.word	0x46000000
 80096a8:	4c742400 	.word	0x4c742400
 80096ac:	4a742400 	.word	0x4a742400
 80096b0:	4bbebc20 	.word	0x4bbebc20

080096b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80096b4:	b580      	push	{r7, lr}
 80096b6:	b082      	sub	sp, #8
 80096b8:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80096ba:	f7ff fe81 	bl	80093c0 <HAL_RCC_GetSysClockFreq>
 80096be:	4602      	mov	r2, r0
 80096c0:	4b10      	ldr	r3, [pc, #64]	@ (8009704 <HAL_RCC_GetHCLKFreq+0x50>)
 80096c2:	699b      	ldr	r3, [r3, #24]
 80096c4:	0a1b      	lsrs	r3, r3, #8
 80096c6:	f003 030f 	and.w	r3, r3, #15
 80096ca:	490f      	ldr	r1, [pc, #60]	@ (8009708 <HAL_RCC_GetHCLKFreq+0x54>)
 80096cc:	5ccb      	ldrb	r3, [r1, r3]
 80096ce:	f003 031f 	and.w	r3, r3, #31
 80096d2:	fa22 f303 	lsr.w	r3, r2, r3
 80096d6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80096d8:	4b0a      	ldr	r3, [pc, #40]	@ (8009704 <HAL_RCC_GetHCLKFreq+0x50>)
 80096da:	699b      	ldr	r3, [r3, #24]
 80096dc:	f003 030f 	and.w	r3, r3, #15
 80096e0:	4a09      	ldr	r2, [pc, #36]	@ (8009708 <HAL_RCC_GetHCLKFreq+0x54>)
 80096e2:	5cd3      	ldrb	r3, [r2, r3]
 80096e4:	f003 031f 	and.w	r3, r3, #31
 80096e8:	687a      	ldr	r2, [r7, #4]
 80096ea:	fa22 f303 	lsr.w	r3, r2, r3
 80096ee:	4a07      	ldr	r2, [pc, #28]	@ (800970c <HAL_RCC_GetHCLKFreq+0x58>)
 80096f0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80096f2:	4a07      	ldr	r2, [pc, #28]	@ (8009710 <HAL_RCC_GetHCLKFreq+0x5c>)
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80096f8:	4b04      	ldr	r3, [pc, #16]	@ (800970c <HAL_RCC_GetHCLKFreq+0x58>)
 80096fa:	681b      	ldr	r3, [r3, #0]
}
 80096fc:	4618      	mov	r0, r3
 80096fe:	3708      	adds	r7, #8
 8009700:	46bd      	mov	sp, r7
 8009702:	bd80      	pop	{r7, pc}
 8009704:	58024400 	.word	0x58024400
 8009708:	08014030 	.word	0x08014030
 800970c:	24000054 	.word	0x24000054
 8009710:	24000050 	.word	0x24000050

08009714 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009714:	b580      	push	{r7, lr}
 8009716:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8009718:	f7ff ffcc 	bl	80096b4 <HAL_RCC_GetHCLKFreq>
 800971c:	4602      	mov	r2, r0
 800971e:	4b06      	ldr	r3, [pc, #24]	@ (8009738 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009720:	69db      	ldr	r3, [r3, #28]
 8009722:	091b      	lsrs	r3, r3, #4
 8009724:	f003 0307 	and.w	r3, r3, #7
 8009728:	4904      	ldr	r1, [pc, #16]	@ (800973c <HAL_RCC_GetPCLK1Freq+0x28>)
 800972a:	5ccb      	ldrb	r3, [r1, r3]
 800972c:	f003 031f 	and.w	r3, r3, #31
 8009730:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8009734:	4618      	mov	r0, r3
 8009736:	bd80      	pop	{r7, pc}
 8009738:	58024400 	.word	0x58024400
 800973c:	08014030 	.word	0x08014030

08009740 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009740:	b580      	push	{r7, lr}
 8009742:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8009744:	f7ff ffb6 	bl	80096b4 <HAL_RCC_GetHCLKFreq>
 8009748:	4602      	mov	r2, r0
 800974a:	4b06      	ldr	r3, [pc, #24]	@ (8009764 <HAL_RCC_GetPCLK2Freq+0x24>)
 800974c:	69db      	ldr	r3, [r3, #28]
 800974e:	0a1b      	lsrs	r3, r3, #8
 8009750:	f003 0307 	and.w	r3, r3, #7
 8009754:	4904      	ldr	r1, [pc, #16]	@ (8009768 <HAL_RCC_GetPCLK2Freq+0x28>)
 8009756:	5ccb      	ldrb	r3, [r1, r3]
 8009758:	f003 031f 	and.w	r3, r3, #31
 800975c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8009760:	4618      	mov	r0, r3
 8009762:	bd80      	pop	{r7, pc}
 8009764:	58024400 	.word	0x58024400
 8009768:	08014030 	.word	0x08014030

0800976c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800976c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009770:	b0ca      	sub	sp, #296	@ 0x128
 8009772:	af00      	add	r7, sp, #0
 8009774:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8009778:	2300      	movs	r3, #0
 800977a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800977e:	2300      	movs	r3, #0
 8009780:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8009784:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009788:	e9d3 2300 	ldrd	r2, r3, [r3]
 800978c:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8009790:	2500      	movs	r5, #0
 8009792:	ea54 0305 	orrs.w	r3, r4, r5
 8009796:	d049      	beq.n	800982c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8009798:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800979c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800979e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80097a2:	d02f      	beq.n	8009804 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80097a4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80097a8:	d828      	bhi.n	80097fc <HAL_RCCEx_PeriphCLKConfig+0x90>
 80097aa:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80097ae:	d01a      	beq.n	80097e6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80097b0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80097b4:	d822      	bhi.n	80097fc <HAL_RCCEx_PeriphCLKConfig+0x90>
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d003      	beq.n	80097c2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80097ba:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80097be:	d007      	beq.n	80097d0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80097c0:	e01c      	b.n	80097fc <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80097c2:	4bb8      	ldr	r3, [pc, #736]	@ (8009aa4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80097c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80097c6:	4ab7      	ldr	r2, [pc, #732]	@ (8009aa4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80097c8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80097cc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80097ce:	e01a      	b.n	8009806 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80097d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80097d4:	3308      	adds	r3, #8
 80097d6:	2102      	movs	r1, #2
 80097d8:	4618      	mov	r0, r3
 80097da:	f002 fb61 	bl	800bea0 <RCCEx_PLL2_Config>
 80097de:	4603      	mov	r3, r0
 80097e0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80097e4:	e00f      	b.n	8009806 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80097e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80097ea:	3328      	adds	r3, #40	@ 0x28
 80097ec:	2102      	movs	r1, #2
 80097ee:	4618      	mov	r0, r3
 80097f0:	f002 fc08 	bl	800c004 <RCCEx_PLL3_Config>
 80097f4:	4603      	mov	r3, r0
 80097f6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80097fa:	e004      	b.n	8009806 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80097fc:	2301      	movs	r3, #1
 80097fe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009802:	e000      	b.n	8009806 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8009804:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009806:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800980a:	2b00      	cmp	r3, #0
 800980c:	d10a      	bne.n	8009824 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800980e:	4ba5      	ldr	r3, [pc, #660]	@ (8009aa4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009810:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009812:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8009816:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800981a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800981c:	4aa1      	ldr	r2, [pc, #644]	@ (8009aa4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800981e:	430b      	orrs	r3, r1
 8009820:	6513      	str	r3, [r2, #80]	@ 0x50
 8009822:	e003      	b.n	800982c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009824:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009828:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800982c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009830:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009834:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8009838:	f04f 0900 	mov.w	r9, #0
 800983c:	ea58 0309 	orrs.w	r3, r8, r9
 8009840:	d047      	beq.n	80098d2 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8009842:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009846:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009848:	2b04      	cmp	r3, #4
 800984a:	d82a      	bhi.n	80098a2 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800984c:	a201      	add	r2, pc, #4	@ (adr r2, 8009854 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800984e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009852:	bf00      	nop
 8009854:	08009869 	.word	0x08009869
 8009858:	08009877 	.word	0x08009877
 800985c:	0800988d 	.word	0x0800988d
 8009860:	080098ab 	.word	0x080098ab
 8009864:	080098ab 	.word	0x080098ab
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009868:	4b8e      	ldr	r3, [pc, #568]	@ (8009aa4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800986a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800986c:	4a8d      	ldr	r2, [pc, #564]	@ (8009aa4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800986e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009872:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009874:	e01a      	b.n	80098ac <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009876:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800987a:	3308      	adds	r3, #8
 800987c:	2100      	movs	r1, #0
 800987e:	4618      	mov	r0, r3
 8009880:	f002 fb0e 	bl	800bea0 <RCCEx_PLL2_Config>
 8009884:	4603      	mov	r3, r0
 8009886:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800988a:	e00f      	b.n	80098ac <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800988c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009890:	3328      	adds	r3, #40	@ 0x28
 8009892:	2100      	movs	r1, #0
 8009894:	4618      	mov	r0, r3
 8009896:	f002 fbb5 	bl	800c004 <RCCEx_PLL3_Config>
 800989a:	4603      	mov	r3, r0
 800989c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80098a0:	e004      	b.n	80098ac <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80098a2:	2301      	movs	r3, #1
 80098a4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80098a8:	e000      	b.n	80098ac <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80098aa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80098ac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	d10a      	bne.n	80098ca <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80098b4:	4b7b      	ldr	r3, [pc, #492]	@ (8009aa4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80098b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80098b8:	f023 0107 	bic.w	r1, r3, #7
 80098bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80098c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80098c2:	4a78      	ldr	r2, [pc, #480]	@ (8009aa4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80098c4:	430b      	orrs	r3, r1
 80098c6:	6513      	str	r3, [r2, #80]	@ 0x50
 80098c8:	e003      	b.n	80098d2 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80098ca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80098ce:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80098d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80098d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098da:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 80098de:	f04f 0b00 	mov.w	fp, #0
 80098e2:	ea5a 030b 	orrs.w	r3, sl, fp
 80098e6:	d04c      	beq.n	8009982 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 80098e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80098ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80098ee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80098f2:	d030      	beq.n	8009956 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80098f4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80098f8:	d829      	bhi.n	800994e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80098fa:	2bc0      	cmp	r3, #192	@ 0xc0
 80098fc:	d02d      	beq.n	800995a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80098fe:	2bc0      	cmp	r3, #192	@ 0xc0
 8009900:	d825      	bhi.n	800994e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8009902:	2b80      	cmp	r3, #128	@ 0x80
 8009904:	d018      	beq.n	8009938 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8009906:	2b80      	cmp	r3, #128	@ 0x80
 8009908:	d821      	bhi.n	800994e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800990a:	2b00      	cmp	r3, #0
 800990c:	d002      	beq.n	8009914 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800990e:	2b40      	cmp	r3, #64	@ 0x40
 8009910:	d007      	beq.n	8009922 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8009912:	e01c      	b.n	800994e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009914:	4b63      	ldr	r3, [pc, #396]	@ (8009aa4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009916:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009918:	4a62      	ldr	r2, [pc, #392]	@ (8009aa4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800991a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800991e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8009920:	e01c      	b.n	800995c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009922:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009926:	3308      	adds	r3, #8
 8009928:	2100      	movs	r1, #0
 800992a:	4618      	mov	r0, r3
 800992c:	f002 fab8 	bl	800bea0 <RCCEx_PLL2_Config>
 8009930:	4603      	mov	r3, r0
 8009932:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8009936:	e011      	b.n	800995c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009938:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800993c:	3328      	adds	r3, #40	@ 0x28
 800993e:	2100      	movs	r1, #0
 8009940:	4618      	mov	r0, r3
 8009942:	f002 fb5f 	bl	800c004 <RCCEx_PLL3_Config>
 8009946:	4603      	mov	r3, r0
 8009948:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800994c:	e006      	b.n	800995c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800994e:	2301      	movs	r3, #1
 8009950:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009954:	e002      	b.n	800995c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8009956:	bf00      	nop
 8009958:	e000      	b.n	800995c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800995a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800995c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009960:	2b00      	cmp	r3, #0
 8009962:	d10a      	bne.n	800997a <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8009964:	4b4f      	ldr	r3, [pc, #316]	@ (8009aa4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009966:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009968:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 800996c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009970:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009972:	4a4c      	ldr	r2, [pc, #304]	@ (8009aa4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009974:	430b      	orrs	r3, r1
 8009976:	6513      	str	r3, [r2, #80]	@ 0x50
 8009978:	e003      	b.n	8009982 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800997a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800997e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8009982:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009986:	e9d3 2300 	ldrd	r2, r3, [r3]
 800998a:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800998e:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8009992:	2300      	movs	r3, #0
 8009994:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8009998:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 800999c:	460b      	mov	r3, r1
 800999e:	4313      	orrs	r3, r2
 80099a0:	d053      	beq.n	8009a4a <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80099a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80099a6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80099aa:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80099ae:	d035      	beq.n	8009a1c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80099b0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80099b4:	d82e      	bhi.n	8009a14 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80099b6:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80099ba:	d031      	beq.n	8009a20 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80099bc:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80099c0:	d828      	bhi.n	8009a14 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80099c2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80099c6:	d01a      	beq.n	80099fe <HAL_RCCEx_PeriphCLKConfig+0x292>
 80099c8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80099cc:	d822      	bhi.n	8009a14 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d003      	beq.n	80099da <HAL_RCCEx_PeriphCLKConfig+0x26e>
 80099d2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80099d6:	d007      	beq.n	80099e8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 80099d8:	e01c      	b.n	8009a14 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80099da:	4b32      	ldr	r3, [pc, #200]	@ (8009aa4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80099dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80099de:	4a31      	ldr	r2, [pc, #196]	@ (8009aa4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80099e0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80099e4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80099e6:	e01c      	b.n	8009a22 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80099e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80099ec:	3308      	adds	r3, #8
 80099ee:	2100      	movs	r1, #0
 80099f0:	4618      	mov	r0, r3
 80099f2:	f002 fa55 	bl	800bea0 <RCCEx_PLL2_Config>
 80099f6:	4603      	mov	r3, r0
 80099f8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80099fc:	e011      	b.n	8009a22 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80099fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009a02:	3328      	adds	r3, #40	@ 0x28
 8009a04:	2100      	movs	r1, #0
 8009a06:	4618      	mov	r0, r3
 8009a08:	f002 fafc 	bl	800c004 <RCCEx_PLL3_Config>
 8009a0c:	4603      	mov	r3, r0
 8009a0e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009a12:	e006      	b.n	8009a22 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8009a14:	2301      	movs	r3, #1
 8009a16:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009a1a:	e002      	b.n	8009a22 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8009a1c:	bf00      	nop
 8009a1e:	e000      	b.n	8009a22 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8009a20:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009a22:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d10b      	bne.n	8009a42 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8009a2a:	4b1e      	ldr	r3, [pc, #120]	@ (8009aa4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009a2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009a2e:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8009a32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009a36:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8009a3a:	4a1a      	ldr	r2, [pc, #104]	@ (8009aa4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009a3c:	430b      	orrs	r3, r1
 8009a3e:	6593      	str	r3, [r2, #88]	@ 0x58
 8009a40:	e003      	b.n	8009a4a <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009a42:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009a46:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8009a4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009a4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a52:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8009a56:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8009a5a:	2300      	movs	r3, #0
 8009a5c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8009a60:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8009a64:	460b      	mov	r3, r1
 8009a66:	4313      	orrs	r3, r2
 8009a68:	d056      	beq.n	8009b18 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8009a6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009a6e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8009a72:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009a76:	d038      	beq.n	8009aea <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8009a78:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009a7c:	d831      	bhi.n	8009ae2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8009a7e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8009a82:	d034      	beq.n	8009aee <HAL_RCCEx_PeriphCLKConfig+0x382>
 8009a84:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8009a88:	d82b      	bhi.n	8009ae2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8009a8a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009a8e:	d01d      	beq.n	8009acc <HAL_RCCEx_PeriphCLKConfig+0x360>
 8009a90:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009a94:	d825      	bhi.n	8009ae2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d006      	beq.n	8009aa8 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8009a9a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009a9e:	d00a      	beq.n	8009ab6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8009aa0:	e01f      	b.n	8009ae2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8009aa2:	bf00      	nop
 8009aa4:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009aa8:	4ba2      	ldr	r3, [pc, #648]	@ (8009d34 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009aaa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009aac:	4aa1      	ldr	r2, [pc, #644]	@ (8009d34 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009aae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009ab2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009ab4:	e01c      	b.n	8009af0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009ab6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009aba:	3308      	adds	r3, #8
 8009abc:	2100      	movs	r1, #0
 8009abe:	4618      	mov	r0, r3
 8009ac0:	f002 f9ee 	bl	800bea0 <RCCEx_PLL2_Config>
 8009ac4:	4603      	mov	r3, r0
 8009ac6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8009aca:	e011      	b.n	8009af0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009acc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009ad0:	3328      	adds	r3, #40	@ 0x28
 8009ad2:	2100      	movs	r1, #0
 8009ad4:	4618      	mov	r0, r3
 8009ad6:	f002 fa95 	bl	800c004 <RCCEx_PLL3_Config>
 8009ada:	4603      	mov	r3, r0
 8009adc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009ae0:	e006      	b.n	8009af0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8009ae2:	2301      	movs	r3, #1
 8009ae4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009ae8:	e002      	b.n	8009af0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8009aea:	bf00      	nop
 8009aec:	e000      	b.n	8009af0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8009aee:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009af0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d10b      	bne.n	8009b10 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8009af8:	4b8e      	ldr	r3, [pc, #568]	@ (8009d34 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009afa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009afc:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8009b00:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009b04:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8009b08:	4a8a      	ldr	r2, [pc, #552]	@ (8009d34 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009b0a:	430b      	orrs	r3, r1
 8009b0c:	6593      	str	r3, [r2, #88]	@ 0x58
 8009b0e:	e003      	b.n	8009b18 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009b10:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009b14:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8009b18:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009b1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b20:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8009b24:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8009b28:	2300      	movs	r3, #0
 8009b2a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8009b2e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8009b32:	460b      	mov	r3, r1
 8009b34:	4313      	orrs	r3, r2
 8009b36:	d03a      	beq.n	8009bae <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8009b38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009b3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009b3e:	2b30      	cmp	r3, #48	@ 0x30
 8009b40:	d01f      	beq.n	8009b82 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8009b42:	2b30      	cmp	r3, #48	@ 0x30
 8009b44:	d819      	bhi.n	8009b7a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8009b46:	2b20      	cmp	r3, #32
 8009b48:	d00c      	beq.n	8009b64 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8009b4a:	2b20      	cmp	r3, #32
 8009b4c:	d815      	bhi.n	8009b7a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	d019      	beq.n	8009b86 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8009b52:	2b10      	cmp	r3, #16
 8009b54:	d111      	bne.n	8009b7a <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009b56:	4b77      	ldr	r3, [pc, #476]	@ (8009d34 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009b58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b5a:	4a76      	ldr	r2, [pc, #472]	@ (8009d34 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009b5c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009b60:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8009b62:	e011      	b.n	8009b88 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009b64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009b68:	3308      	adds	r3, #8
 8009b6a:	2102      	movs	r1, #2
 8009b6c:	4618      	mov	r0, r3
 8009b6e:	f002 f997 	bl	800bea0 <RCCEx_PLL2_Config>
 8009b72:	4603      	mov	r3, r0
 8009b74:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8009b78:	e006      	b.n	8009b88 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8009b7a:	2301      	movs	r3, #1
 8009b7c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009b80:	e002      	b.n	8009b88 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8009b82:	bf00      	nop
 8009b84:	e000      	b.n	8009b88 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8009b86:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009b88:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d10a      	bne.n	8009ba6 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8009b90:	4b68      	ldr	r3, [pc, #416]	@ (8009d34 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009b92:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009b94:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8009b98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009b9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009b9e:	4a65      	ldr	r2, [pc, #404]	@ (8009d34 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009ba0:	430b      	orrs	r3, r1
 8009ba2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8009ba4:	e003      	b.n	8009bae <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009ba6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009baa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8009bae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009bb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bb6:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8009bba:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8009bbe:	2300      	movs	r3, #0
 8009bc0:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8009bc4:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8009bc8:	460b      	mov	r3, r1
 8009bca:	4313      	orrs	r3, r2
 8009bcc:	d051      	beq.n	8009c72 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8009bce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009bd2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009bd4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009bd8:	d035      	beq.n	8009c46 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8009bda:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009bde:	d82e      	bhi.n	8009c3e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8009be0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8009be4:	d031      	beq.n	8009c4a <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8009be6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8009bea:	d828      	bhi.n	8009c3e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8009bec:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009bf0:	d01a      	beq.n	8009c28 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8009bf2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009bf6:	d822      	bhi.n	8009c3e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d003      	beq.n	8009c04 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8009bfc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009c00:	d007      	beq.n	8009c12 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8009c02:	e01c      	b.n	8009c3e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009c04:	4b4b      	ldr	r3, [pc, #300]	@ (8009d34 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009c06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c08:	4a4a      	ldr	r2, [pc, #296]	@ (8009d34 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009c0a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009c0e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8009c10:	e01c      	b.n	8009c4c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009c12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009c16:	3308      	adds	r3, #8
 8009c18:	2100      	movs	r1, #0
 8009c1a:	4618      	mov	r0, r3
 8009c1c:	f002 f940 	bl	800bea0 <RCCEx_PLL2_Config>
 8009c20:	4603      	mov	r3, r0
 8009c22:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8009c26:	e011      	b.n	8009c4c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009c28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009c2c:	3328      	adds	r3, #40	@ 0x28
 8009c2e:	2100      	movs	r1, #0
 8009c30:	4618      	mov	r0, r3
 8009c32:	f002 f9e7 	bl	800c004 <RCCEx_PLL3_Config>
 8009c36:	4603      	mov	r3, r0
 8009c38:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8009c3c:	e006      	b.n	8009c4c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009c3e:	2301      	movs	r3, #1
 8009c40:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009c44:	e002      	b.n	8009c4c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8009c46:	bf00      	nop
 8009c48:	e000      	b.n	8009c4c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8009c4a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009c4c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	d10a      	bne.n	8009c6a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8009c54:	4b37      	ldr	r3, [pc, #220]	@ (8009d34 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009c56:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009c58:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8009c5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009c60:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009c62:	4a34      	ldr	r2, [pc, #208]	@ (8009d34 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009c64:	430b      	orrs	r3, r1
 8009c66:	6513      	str	r3, [r2, #80]	@ 0x50
 8009c68:	e003      	b.n	8009c72 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009c6a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009c6e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8009c72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009c76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c7a:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8009c7e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8009c82:	2300      	movs	r3, #0
 8009c84:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8009c88:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8009c8c:	460b      	mov	r3, r1
 8009c8e:	4313      	orrs	r3, r2
 8009c90:	d056      	beq.n	8009d40 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8009c92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009c96:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009c98:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8009c9c:	d033      	beq.n	8009d06 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8009c9e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8009ca2:	d82c      	bhi.n	8009cfe <HAL_RCCEx_PeriphCLKConfig+0x592>
 8009ca4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009ca8:	d02f      	beq.n	8009d0a <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8009caa:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009cae:	d826      	bhi.n	8009cfe <HAL_RCCEx_PeriphCLKConfig+0x592>
 8009cb0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8009cb4:	d02b      	beq.n	8009d0e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8009cb6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8009cba:	d820      	bhi.n	8009cfe <HAL_RCCEx_PeriphCLKConfig+0x592>
 8009cbc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009cc0:	d012      	beq.n	8009ce8 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8009cc2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009cc6:	d81a      	bhi.n	8009cfe <HAL_RCCEx_PeriphCLKConfig+0x592>
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	d022      	beq.n	8009d12 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8009ccc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009cd0:	d115      	bne.n	8009cfe <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009cd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009cd6:	3308      	adds	r3, #8
 8009cd8:	2101      	movs	r1, #1
 8009cda:	4618      	mov	r0, r3
 8009cdc:	f002 f8e0 	bl	800bea0 <RCCEx_PLL2_Config>
 8009ce0:	4603      	mov	r3, r0
 8009ce2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8009ce6:	e015      	b.n	8009d14 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009ce8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009cec:	3328      	adds	r3, #40	@ 0x28
 8009cee:	2101      	movs	r1, #1
 8009cf0:	4618      	mov	r0, r3
 8009cf2:	f002 f987 	bl	800c004 <RCCEx_PLL3_Config>
 8009cf6:	4603      	mov	r3, r0
 8009cf8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8009cfc:	e00a      	b.n	8009d14 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009cfe:	2301      	movs	r3, #1
 8009d00:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009d04:	e006      	b.n	8009d14 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8009d06:	bf00      	nop
 8009d08:	e004      	b.n	8009d14 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8009d0a:	bf00      	nop
 8009d0c:	e002      	b.n	8009d14 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8009d0e:	bf00      	nop
 8009d10:	e000      	b.n	8009d14 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8009d12:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009d14:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	d10d      	bne.n	8009d38 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8009d1c:	4b05      	ldr	r3, [pc, #20]	@ (8009d34 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009d1e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009d20:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8009d24:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009d28:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009d2a:	4a02      	ldr	r2, [pc, #8]	@ (8009d34 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009d2c:	430b      	orrs	r3, r1
 8009d2e:	6513      	str	r3, [r2, #80]	@ 0x50
 8009d30:	e006      	b.n	8009d40 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8009d32:	bf00      	nop
 8009d34:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009d38:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009d3c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8009d40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009d44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d48:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8009d4c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8009d50:	2300      	movs	r3, #0
 8009d52:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8009d56:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8009d5a:	460b      	mov	r3, r1
 8009d5c:	4313      	orrs	r3, r2
 8009d5e:	d055      	beq.n	8009e0c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8009d60:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009d64:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8009d68:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009d6c:	d033      	beq.n	8009dd6 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8009d6e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009d72:	d82c      	bhi.n	8009dce <HAL_RCCEx_PeriphCLKConfig+0x662>
 8009d74:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009d78:	d02f      	beq.n	8009dda <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8009d7a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009d7e:	d826      	bhi.n	8009dce <HAL_RCCEx_PeriphCLKConfig+0x662>
 8009d80:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009d84:	d02b      	beq.n	8009dde <HAL_RCCEx_PeriphCLKConfig+0x672>
 8009d86:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009d8a:	d820      	bhi.n	8009dce <HAL_RCCEx_PeriphCLKConfig+0x662>
 8009d8c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009d90:	d012      	beq.n	8009db8 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8009d92:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009d96:	d81a      	bhi.n	8009dce <HAL_RCCEx_PeriphCLKConfig+0x662>
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d022      	beq.n	8009de2 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8009d9c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009da0:	d115      	bne.n	8009dce <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009da2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009da6:	3308      	adds	r3, #8
 8009da8:	2101      	movs	r1, #1
 8009daa:	4618      	mov	r0, r3
 8009dac:	f002 f878 	bl	800bea0 <RCCEx_PLL2_Config>
 8009db0:	4603      	mov	r3, r0
 8009db2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8009db6:	e015      	b.n	8009de4 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009db8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009dbc:	3328      	adds	r3, #40	@ 0x28
 8009dbe:	2101      	movs	r1, #1
 8009dc0:	4618      	mov	r0, r3
 8009dc2:	f002 f91f 	bl	800c004 <RCCEx_PLL3_Config>
 8009dc6:	4603      	mov	r3, r0
 8009dc8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8009dcc:	e00a      	b.n	8009de4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8009dce:	2301      	movs	r3, #1
 8009dd0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009dd4:	e006      	b.n	8009de4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8009dd6:	bf00      	nop
 8009dd8:	e004      	b.n	8009de4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8009dda:	bf00      	nop
 8009ddc:	e002      	b.n	8009de4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8009dde:	bf00      	nop
 8009de0:	e000      	b.n	8009de4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8009de2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009de4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	d10b      	bne.n	8009e04 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8009dec:	4ba3      	ldr	r3, [pc, #652]	@ (800a07c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009dee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009df0:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8009df4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009df8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8009dfc:	4a9f      	ldr	r2, [pc, #636]	@ (800a07c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009dfe:	430b      	orrs	r3, r1
 8009e00:	6593      	str	r3, [r2, #88]	@ 0x58
 8009e02:	e003      	b.n	8009e0c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009e04:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009e08:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8009e0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009e10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e14:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8009e18:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8009e1c:	2300      	movs	r3, #0
 8009e1e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8009e22:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8009e26:	460b      	mov	r3, r1
 8009e28:	4313      	orrs	r3, r2
 8009e2a:	d037      	beq.n	8009e9c <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8009e2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009e30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009e32:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009e36:	d00e      	beq.n	8009e56 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8009e38:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009e3c:	d816      	bhi.n	8009e6c <HAL_RCCEx_PeriphCLKConfig+0x700>
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	d018      	beq.n	8009e74 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8009e42:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009e46:	d111      	bne.n	8009e6c <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009e48:	4b8c      	ldr	r3, [pc, #560]	@ (800a07c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009e4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e4c:	4a8b      	ldr	r2, [pc, #556]	@ (800a07c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009e4e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009e52:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8009e54:	e00f      	b.n	8009e76 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009e56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009e5a:	3308      	adds	r3, #8
 8009e5c:	2101      	movs	r1, #1
 8009e5e:	4618      	mov	r0, r3
 8009e60:	f002 f81e 	bl	800bea0 <RCCEx_PLL2_Config>
 8009e64:	4603      	mov	r3, r0
 8009e66:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8009e6a:	e004      	b.n	8009e76 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009e6c:	2301      	movs	r3, #1
 8009e6e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009e72:	e000      	b.n	8009e76 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8009e74:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009e76:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	d10a      	bne.n	8009e94 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8009e7e:	4b7f      	ldr	r3, [pc, #508]	@ (800a07c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009e80:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009e82:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8009e86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009e8a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009e8c:	4a7b      	ldr	r2, [pc, #492]	@ (800a07c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009e8e:	430b      	orrs	r3, r1
 8009e90:	6513      	str	r3, [r2, #80]	@ 0x50
 8009e92:	e003      	b.n	8009e9c <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009e94:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009e98:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8009e9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009ea0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ea4:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8009ea8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009eac:	2300      	movs	r3, #0
 8009eae:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8009eb2:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8009eb6:	460b      	mov	r3, r1
 8009eb8:	4313      	orrs	r3, r2
 8009eba:	d039      	beq.n	8009f30 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8009ebc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009ec0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009ec2:	2b03      	cmp	r3, #3
 8009ec4:	d81c      	bhi.n	8009f00 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8009ec6:	a201      	add	r2, pc, #4	@ (adr r2, 8009ecc <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8009ec8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ecc:	08009f09 	.word	0x08009f09
 8009ed0:	08009edd 	.word	0x08009edd
 8009ed4:	08009eeb 	.word	0x08009eeb
 8009ed8:	08009f09 	.word	0x08009f09
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009edc:	4b67      	ldr	r3, [pc, #412]	@ (800a07c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009ede:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ee0:	4a66      	ldr	r2, [pc, #408]	@ (800a07c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009ee2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009ee6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8009ee8:	e00f      	b.n	8009f0a <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009eea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009eee:	3308      	adds	r3, #8
 8009ef0:	2102      	movs	r1, #2
 8009ef2:	4618      	mov	r0, r3
 8009ef4:	f001 ffd4 	bl	800bea0 <RCCEx_PLL2_Config>
 8009ef8:	4603      	mov	r3, r0
 8009efa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8009efe:	e004      	b.n	8009f0a <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8009f00:	2301      	movs	r3, #1
 8009f02:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009f06:	e000      	b.n	8009f0a <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8009f08:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009f0a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	d10a      	bne.n	8009f28 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8009f12:	4b5a      	ldr	r3, [pc, #360]	@ (800a07c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009f14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009f16:	f023 0103 	bic.w	r1, r3, #3
 8009f1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009f1e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009f20:	4a56      	ldr	r2, [pc, #344]	@ (800a07c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009f22:	430b      	orrs	r3, r1
 8009f24:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8009f26:	e003      	b.n	8009f30 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009f28:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009f2c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009f30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009f34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f38:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8009f3c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009f40:	2300      	movs	r3, #0
 8009f42:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8009f46:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8009f4a:	460b      	mov	r3, r1
 8009f4c:	4313      	orrs	r3, r2
 8009f4e:	f000 809f 	beq.w	800a090 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009f52:	4b4b      	ldr	r3, [pc, #300]	@ (800a080 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	4a4a      	ldr	r2, [pc, #296]	@ (800a080 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8009f58:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009f5c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009f5e:	f7fc fb8d 	bl	800667c <HAL_GetTick>
 8009f62:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009f66:	e00b      	b.n	8009f80 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009f68:	f7fc fb88 	bl	800667c <HAL_GetTick>
 8009f6c:	4602      	mov	r2, r0
 8009f6e:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8009f72:	1ad3      	subs	r3, r2, r3
 8009f74:	2b64      	cmp	r3, #100	@ 0x64
 8009f76:	d903      	bls.n	8009f80 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8009f78:	2303      	movs	r3, #3
 8009f7a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009f7e:	e005      	b.n	8009f8c <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009f80:	4b3f      	ldr	r3, [pc, #252]	@ (800a080 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	d0ed      	beq.n	8009f68 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8009f8c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	d179      	bne.n	800a088 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8009f94:	4b39      	ldr	r3, [pc, #228]	@ (800a07c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009f96:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8009f98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009f9c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8009fa0:	4053      	eors	r3, r2
 8009fa2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	d015      	beq.n	8009fd6 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009faa:	4b34      	ldr	r3, [pc, #208]	@ (800a07c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009fac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009fae:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009fb2:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009fb6:	4b31      	ldr	r3, [pc, #196]	@ (800a07c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009fb8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009fba:	4a30      	ldr	r2, [pc, #192]	@ (800a07c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009fbc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009fc0:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009fc2:	4b2e      	ldr	r3, [pc, #184]	@ (800a07c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009fc4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009fc6:	4a2d      	ldr	r2, [pc, #180]	@ (800a07c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009fc8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009fcc:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8009fce:	4a2b      	ldr	r2, [pc, #172]	@ (800a07c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009fd0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8009fd4:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8009fd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009fda:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8009fde:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009fe2:	d118      	bne.n	800a016 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009fe4:	f7fc fb4a 	bl	800667c <HAL_GetTick>
 8009fe8:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009fec:	e00d      	b.n	800a00a <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009fee:	f7fc fb45 	bl	800667c <HAL_GetTick>
 8009ff2:	4602      	mov	r2, r0
 8009ff4:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8009ff8:	1ad2      	subs	r2, r2, r3
 8009ffa:	f241 3388 	movw	r3, #5000	@ 0x1388
 8009ffe:	429a      	cmp	r2, r3
 800a000:	d903      	bls.n	800a00a <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800a002:	2303      	movs	r3, #3
 800a004:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 800a008:	e005      	b.n	800a016 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a00a:	4b1c      	ldr	r3, [pc, #112]	@ (800a07c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a00c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a00e:	f003 0302 	and.w	r3, r3, #2
 800a012:	2b00      	cmp	r3, #0
 800a014:	d0eb      	beq.n	8009fee <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800a016:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	d129      	bne.n	800a072 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a01e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a022:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800a026:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a02a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a02e:	d10e      	bne.n	800a04e <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800a030:	4b12      	ldr	r3, [pc, #72]	@ (800a07c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a032:	691b      	ldr	r3, [r3, #16]
 800a034:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 800a038:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a03c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800a040:	091a      	lsrs	r2, r3, #4
 800a042:	4b10      	ldr	r3, [pc, #64]	@ (800a084 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 800a044:	4013      	ands	r3, r2
 800a046:	4a0d      	ldr	r2, [pc, #52]	@ (800a07c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a048:	430b      	orrs	r3, r1
 800a04a:	6113      	str	r3, [r2, #16]
 800a04c:	e005      	b.n	800a05a <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800a04e:	4b0b      	ldr	r3, [pc, #44]	@ (800a07c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a050:	691b      	ldr	r3, [r3, #16]
 800a052:	4a0a      	ldr	r2, [pc, #40]	@ (800a07c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a054:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800a058:	6113      	str	r3, [r2, #16]
 800a05a:	4b08      	ldr	r3, [pc, #32]	@ (800a07c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a05c:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800a05e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a062:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800a066:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a06a:	4a04      	ldr	r2, [pc, #16]	@ (800a07c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a06c:	430b      	orrs	r3, r1
 800a06e:	6713      	str	r3, [r2, #112]	@ 0x70
 800a070:	e00e      	b.n	800a090 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800a072:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a076:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 800a07a:	e009      	b.n	800a090 <HAL_RCCEx_PeriphCLKConfig+0x924>
 800a07c:	58024400 	.word	0x58024400
 800a080:	58024800 	.word	0x58024800
 800a084:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a088:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a08c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800a090:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a094:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a098:	f002 0301 	and.w	r3, r2, #1
 800a09c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800a0a0:	2300      	movs	r3, #0
 800a0a2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800a0a6:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800a0aa:	460b      	mov	r3, r1
 800a0ac:	4313      	orrs	r3, r2
 800a0ae:	f000 8089 	beq.w	800a1c4 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800a0b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a0b6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a0b8:	2b28      	cmp	r3, #40	@ 0x28
 800a0ba:	d86b      	bhi.n	800a194 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 800a0bc:	a201      	add	r2, pc, #4	@ (adr r2, 800a0c4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800a0be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0c2:	bf00      	nop
 800a0c4:	0800a19d 	.word	0x0800a19d
 800a0c8:	0800a195 	.word	0x0800a195
 800a0cc:	0800a195 	.word	0x0800a195
 800a0d0:	0800a195 	.word	0x0800a195
 800a0d4:	0800a195 	.word	0x0800a195
 800a0d8:	0800a195 	.word	0x0800a195
 800a0dc:	0800a195 	.word	0x0800a195
 800a0e0:	0800a195 	.word	0x0800a195
 800a0e4:	0800a169 	.word	0x0800a169
 800a0e8:	0800a195 	.word	0x0800a195
 800a0ec:	0800a195 	.word	0x0800a195
 800a0f0:	0800a195 	.word	0x0800a195
 800a0f4:	0800a195 	.word	0x0800a195
 800a0f8:	0800a195 	.word	0x0800a195
 800a0fc:	0800a195 	.word	0x0800a195
 800a100:	0800a195 	.word	0x0800a195
 800a104:	0800a17f 	.word	0x0800a17f
 800a108:	0800a195 	.word	0x0800a195
 800a10c:	0800a195 	.word	0x0800a195
 800a110:	0800a195 	.word	0x0800a195
 800a114:	0800a195 	.word	0x0800a195
 800a118:	0800a195 	.word	0x0800a195
 800a11c:	0800a195 	.word	0x0800a195
 800a120:	0800a195 	.word	0x0800a195
 800a124:	0800a19d 	.word	0x0800a19d
 800a128:	0800a195 	.word	0x0800a195
 800a12c:	0800a195 	.word	0x0800a195
 800a130:	0800a195 	.word	0x0800a195
 800a134:	0800a195 	.word	0x0800a195
 800a138:	0800a195 	.word	0x0800a195
 800a13c:	0800a195 	.word	0x0800a195
 800a140:	0800a195 	.word	0x0800a195
 800a144:	0800a19d 	.word	0x0800a19d
 800a148:	0800a195 	.word	0x0800a195
 800a14c:	0800a195 	.word	0x0800a195
 800a150:	0800a195 	.word	0x0800a195
 800a154:	0800a195 	.word	0x0800a195
 800a158:	0800a195 	.word	0x0800a195
 800a15c:	0800a195 	.word	0x0800a195
 800a160:	0800a195 	.word	0x0800a195
 800a164:	0800a19d 	.word	0x0800a19d
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a168:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a16c:	3308      	adds	r3, #8
 800a16e:	2101      	movs	r1, #1
 800a170:	4618      	mov	r0, r3
 800a172:	f001 fe95 	bl	800bea0 <RCCEx_PLL2_Config>
 800a176:	4603      	mov	r3, r0
 800a178:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800a17c:	e00f      	b.n	800a19e <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a17e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a182:	3328      	adds	r3, #40	@ 0x28
 800a184:	2101      	movs	r1, #1
 800a186:	4618      	mov	r0, r3
 800a188:	f001 ff3c 	bl	800c004 <RCCEx_PLL3_Config>
 800a18c:	4603      	mov	r3, r0
 800a18e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800a192:	e004      	b.n	800a19e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a194:	2301      	movs	r3, #1
 800a196:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a19a:	e000      	b.n	800a19e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 800a19c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a19e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	d10a      	bne.n	800a1bc <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800a1a6:	4bbf      	ldr	r3, [pc, #764]	@ (800a4a4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a1a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a1aa:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800a1ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a1b2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a1b4:	4abb      	ldr	r2, [pc, #748]	@ (800a4a4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a1b6:	430b      	orrs	r3, r1
 800a1b8:	6553      	str	r3, [r2, #84]	@ 0x54
 800a1ba:	e003      	b.n	800a1c4 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a1bc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a1c0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800a1c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a1c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1cc:	f002 0302 	and.w	r3, r2, #2
 800a1d0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800a1d4:	2300      	movs	r3, #0
 800a1d6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800a1da:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800a1de:	460b      	mov	r3, r1
 800a1e0:	4313      	orrs	r3, r2
 800a1e2:	d041      	beq.n	800a268 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800a1e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a1e8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a1ea:	2b05      	cmp	r3, #5
 800a1ec:	d824      	bhi.n	800a238 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800a1ee:	a201      	add	r2, pc, #4	@ (adr r2, 800a1f4 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800a1f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1f4:	0800a241 	.word	0x0800a241
 800a1f8:	0800a20d 	.word	0x0800a20d
 800a1fc:	0800a223 	.word	0x0800a223
 800a200:	0800a241 	.word	0x0800a241
 800a204:	0800a241 	.word	0x0800a241
 800a208:	0800a241 	.word	0x0800a241
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a20c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a210:	3308      	adds	r3, #8
 800a212:	2101      	movs	r1, #1
 800a214:	4618      	mov	r0, r3
 800a216:	f001 fe43 	bl	800bea0 <RCCEx_PLL2_Config>
 800a21a:	4603      	mov	r3, r0
 800a21c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800a220:	e00f      	b.n	800a242 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a222:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a226:	3328      	adds	r3, #40	@ 0x28
 800a228:	2101      	movs	r1, #1
 800a22a:	4618      	mov	r0, r3
 800a22c:	f001 feea 	bl	800c004 <RCCEx_PLL3_Config>
 800a230:	4603      	mov	r3, r0
 800a232:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800a236:	e004      	b.n	800a242 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a238:	2301      	movs	r3, #1
 800a23a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a23e:	e000      	b.n	800a242 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 800a240:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a242:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a246:	2b00      	cmp	r3, #0
 800a248:	d10a      	bne.n	800a260 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800a24a:	4b96      	ldr	r3, [pc, #600]	@ (800a4a4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a24c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a24e:	f023 0107 	bic.w	r1, r3, #7
 800a252:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a256:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a258:	4a92      	ldr	r2, [pc, #584]	@ (800a4a4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a25a:	430b      	orrs	r3, r1
 800a25c:	6553      	str	r3, [r2, #84]	@ 0x54
 800a25e:	e003      	b.n	800a268 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a260:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a264:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800a268:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a26c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a270:	f002 0304 	and.w	r3, r2, #4
 800a274:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800a278:	2300      	movs	r3, #0
 800a27a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800a27e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800a282:	460b      	mov	r3, r1
 800a284:	4313      	orrs	r3, r2
 800a286:	d044      	beq.n	800a312 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800a288:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a28c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a290:	2b05      	cmp	r3, #5
 800a292:	d825      	bhi.n	800a2e0 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800a294:	a201      	add	r2, pc, #4	@ (adr r2, 800a29c <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800a296:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a29a:	bf00      	nop
 800a29c:	0800a2e9 	.word	0x0800a2e9
 800a2a0:	0800a2b5 	.word	0x0800a2b5
 800a2a4:	0800a2cb 	.word	0x0800a2cb
 800a2a8:	0800a2e9 	.word	0x0800a2e9
 800a2ac:	0800a2e9 	.word	0x0800a2e9
 800a2b0:	0800a2e9 	.word	0x0800a2e9
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a2b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a2b8:	3308      	adds	r3, #8
 800a2ba:	2101      	movs	r1, #1
 800a2bc:	4618      	mov	r0, r3
 800a2be:	f001 fdef 	bl	800bea0 <RCCEx_PLL2_Config>
 800a2c2:	4603      	mov	r3, r0
 800a2c4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800a2c8:	e00f      	b.n	800a2ea <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a2ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a2ce:	3328      	adds	r3, #40	@ 0x28
 800a2d0:	2101      	movs	r1, #1
 800a2d2:	4618      	mov	r0, r3
 800a2d4:	f001 fe96 	bl	800c004 <RCCEx_PLL3_Config>
 800a2d8:	4603      	mov	r3, r0
 800a2da:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800a2de:	e004      	b.n	800a2ea <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a2e0:	2301      	movs	r3, #1
 800a2e2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a2e6:	e000      	b.n	800a2ea <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 800a2e8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a2ea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	d10b      	bne.n	800a30a <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800a2f2:	4b6c      	ldr	r3, [pc, #432]	@ (800a4a4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a2f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a2f6:	f023 0107 	bic.w	r1, r3, #7
 800a2fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a2fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a302:	4a68      	ldr	r2, [pc, #416]	@ (800a4a4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a304:	430b      	orrs	r3, r1
 800a306:	6593      	str	r3, [r2, #88]	@ 0x58
 800a308:	e003      	b.n	800a312 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a30a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a30e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800a312:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a316:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a31a:	f002 0320 	and.w	r3, r2, #32
 800a31e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800a322:	2300      	movs	r3, #0
 800a324:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800a328:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800a32c:	460b      	mov	r3, r1
 800a32e:	4313      	orrs	r3, r2
 800a330:	d055      	beq.n	800a3de <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800a332:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a336:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a33a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a33e:	d033      	beq.n	800a3a8 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800a340:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a344:	d82c      	bhi.n	800a3a0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800a346:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a34a:	d02f      	beq.n	800a3ac <HAL_RCCEx_PeriphCLKConfig+0xc40>
 800a34c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a350:	d826      	bhi.n	800a3a0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800a352:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800a356:	d02b      	beq.n	800a3b0 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 800a358:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800a35c:	d820      	bhi.n	800a3a0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800a35e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a362:	d012      	beq.n	800a38a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800a364:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a368:	d81a      	bhi.n	800a3a0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	d022      	beq.n	800a3b4 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800a36e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a372:	d115      	bne.n	800a3a0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a374:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a378:	3308      	adds	r3, #8
 800a37a:	2100      	movs	r1, #0
 800a37c:	4618      	mov	r0, r3
 800a37e:	f001 fd8f 	bl	800bea0 <RCCEx_PLL2_Config>
 800a382:	4603      	mov	r3, r0
 800a384:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800a388:	e015      	b.n	800a3b6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a38a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a38e:	3328      	adds	r3, #40	@ 0x28
 800a390:	2102      	movs	r1, #2
 800a392:	4618      	mov	r0, r3
 800a394:	f001 fe36 	bl	800c004 <RCCEx_PLL3_Config>
 800a398:	4603      	mov	r3, r0
 800a39a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800a39e:	e00a      	b.n	800a3b6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a3a0:	2301      	movs	r3, #1
 800a3a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a3a6:	e006      	b.n	800a3b6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800a3a8:	bf00      	nop
 800a3aa:	e004      	b.n	800a3b6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800a3ac:	bf00      	nop
 800a3ae:	e002      	b.n	800a3b6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800a3b0:	bf00      	nop
 800a3b2:	e000      	b.n	800a3b6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800a3b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a3b6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	d10b      	bne.n	800a3d6 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800a3be:	4b39      	ldr	r3, [pc, #228]	@ (800a4a4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a3c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a3c2:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800a3c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a3ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a3ce:	4a35      	ldr	r2, [pc, #212]	@ (800a4a4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a3d0:	430b      	orrs	r3, r1
 800a3d2:	6553      	str	r3, [r2, #84]	@ 0x54
 800a3d4:	e003      	b.n	800a3de <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a3d6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a3da:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800a3de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a3e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3e6:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800a3ea:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800a3ee:	2300      	movs	r3, #0
 800a3f0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800a3f4:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800a3f8:	460b      	mov	r3, r1
 800a3fa:	4313      	orrs	r3, r2
 800a3fc:	d058      	beq.n	800a4b0 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800a3fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a402:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800a406:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800a40a:	d033      	beq.n	800a474 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800a40c:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800a410:	d82c      	bhi.n	800a46c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800a412:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a416:	d02f      	beq.n	800a478 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 800a418:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a41c:	d826      	bhi.n	800a46c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800a41e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800a422:	d02b      	beq.n	800a47c <HAL_RCCEx_PeriphCLKConfig+0xd10>
 800a424:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800a428:	d820      	bhi.n	800a46c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800a42a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a42e:	d012      	beq.n	800a456 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800a430:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a434:	d81a      	bhi.n	800a46c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800a436:	2b00      	cmp	r3, #0
 800a438:	d022      	beq.n	800a480 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800a43a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a43e:	d115      	bne.n	800a46c <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a440:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a444:	3308      	adds	r3, #8
 800a446:	2100      	movs	r1, #0
 800a448:	4618      	mov	r0, r3
 800a44a:	f001 fd29 	bl	800bea0 <RCCEx_PLL2_Config>
 800a44e:	4603      	mov	r3, r0
 800a450:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800a454:	e015      	b.n	800a482 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a456:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a45a:	3328      	adds	r3, #40	@ 0x28
 800a45c:	2102      	movs	r1, #2
 800a45e:	4618      	mov	r0, r3
 800a460:	f001 fdd0 	bl	800c004 <RCCEx_PLL3_Config>
 800a464:	4603      	mov	r3, r0
 800a466:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800a46a:	e00a      	b.n	800a482 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a46c:	2301      	movs	r3, #1
 800a46e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a472:	e006      	b.n	800a482 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800a474:	bf00      	nop
 800a476:	e004      	b.n	800a482 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800a478:	bf00      	nop
 800a47a:	e002      	b.n	800a482 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800a47c:	bf00      	nop
 800a47e:	e000      	b.n	800a482 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800a480:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a482:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a486:	2b00      	cmp	r3, #0
 800a488:	d10e      	bne.n	800a4a8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800a48a:	4b06      	ldr	r3, [pc, #24]	@ (800a4a4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a48c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a48e:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800a492:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a496:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800a49a:	4a02      	ldr	r2, [pc, #8]	@ (800a4a4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a49c:	430b      	orrs	r3, r1
 800a49e:	6593      	str	r3, [r2, #88]	@ 0x58
 800a4a0:	e006      	b.n	800a4b0 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800a4a2:	bf00      	nop
 800a4a4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a4a8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a4ac:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800a4b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a4b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4b8:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800a4bc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800a4c0:	2300      	movs	r3, #0
 800a4c2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800a4c6:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800a4ca:	460b      	mov	r3, r1
 800a4cc:	4313      	orrs	r3, r2
 800a4ce:	d055      	beq.n	800a57c <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800a4d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a4d4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800a4d8:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800a4dc:	d033      	beq.n	800a546 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800a4de:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800a4e2:	d82c      	bhi.n	800a53e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800a4e4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a4e8:	d02f      	beq.n	800a54a <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800a4ea:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a4ee:	d826      	bhi.n	800a53e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800a4f0:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800a4f4:	d02b      	beq.n	800a54e <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800a4f6:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800a4fa:	d820      	bhi.n	800a53e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800a4fc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a500:	d012      	beq.n	800a528 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800a502:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a506:	d81a      	bhi.n	800a53e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800a508:	2b00      	cmp	r3, #0
 800a50a:	d022      	beq.n	800a552 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800a50c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a510:	d115      	bne.n	800a53e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a512:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a516:	3308      	adds	r3, #8
 800a518:	2100      	movs	r1, #0
 800a51a:	4618      	mov	r0, r3
 800a51c:	f001 fcc0 	bl	800bea0 <RCCEx_PLL2_Config>
 800a520:	4603      	mov	r3, r0
 800a522:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800a526:	e015      	b.n	800a554 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a528:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a52c:	3328      	adds	r3, #40	@ 0x28
 800a52e:	2102      	movs	r1, #2
 800a530:	4618      	mov	r0, r3
 800a532:	f001 fd67 	bl	800c004 <RCCEx_PLL3_Config>
 800a536:	4603      	mov	r3, r0
 800a538:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800a53c:	e00a      	b.n	800a554 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a53e:	2301      	movs	r3, #1
 800a540:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a544:	e006      	b.n	800a554 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800a546:	bf00      	nop
 800a548:	e004      	b.n	800a554 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800a54a:	bf00      	nop
 800a54c:	e002      	b.n	800a554 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800a54e:	bf00      	nop
 800a550:	e000      	b.n	800a554 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800a552:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a554:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a558:	2b00      	cmp	r3, #0
 800a55a:	d10b      	bne.n	800a574 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800a55c:	4ba1      	ldr	r3, [pc, #644]	@ (800a7e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a55e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a560:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 800a564:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a568:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800a56c:	4a9d      	ldr	r2, [pc, #628]	@ (800a7e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a56e:	430b      	orrs	r3, r1
 800a570:	6593      	str	r3, [r2, #88]	@ 0x58
 800a572:	e003      	b.n	800a57c <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a574:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a578:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800a57c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a580:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a584:	f002 0308 	and.w	r3, r2, #8
 800a588:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800a58c:	2300      	movs	r3, #0
 800a58e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800a592:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800a596:	460b      	mov	r3, r1
 800a598:	4313      	orrs	r3, r2
 800a59a:	d01e      	beq.n	800a5da <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800a59c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a5a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a5a4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a5a8:	d10c      	bne.n	800a5c4 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800a5aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a5ae:	3328      	adds	r3, #40	@ 0x28
 800a5b0:	2102      	movs	r1, #2
 800a5b2:	4618      	mov	r0, r3
 800a5b4:	f001 fd26 	bl	800c004 <RCCEx_PLL3_Config>
 800a5b8:	4603      	mov	r3, r0
 800a5ba:	2b00      	cmp	r3, #0
 800a5bc:	d002      	beq.n	800a5c4 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800a5be:	2301      	movs	r3, #1
 800a5c0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800a5c4:	4b87      	ldr	r3, [pc, #540]	@ (800a7e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a5c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a5c8:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800a5cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a5d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a5d4:	4a83      	ldr	r2, [pc, #524]	@ (800a7e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a5d6:	430b      	orrs	r3, r1
 800a5d8:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800a5da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a5de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5e2:	f002 0310 	and.w	r3, r2, #16
 800a5e6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800a5ea:	2300      	movs	r3, #0
 800a5ec:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800a5f0:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800a5f4:	460b      	mov	r3, r1
 800a5f6:	4313      	orrs	r3, r2
 800a5f8:	d01e      	beq.n	800a638 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800a5fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a5fe:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800a602:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a606:	d10c      	bne.n	800a622 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800a608:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a60c:	3328      	adds	r3, #40	@ 0x28
 800a60e:	2102      	movs	r1, #2
 800a610:	4618      	mov	r0, r3
 800a612:	f001 fcf7 	bl	800c004 <RCCEx_PLL3_Config>
 800a616:	4603      	mov	r3, r0
 800a618:	2b00      	cmp	r3, #0
 800a61a:	d002      	beq.n	800a622 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 800a61c:	2301      	movs	r3, #1
 800a61e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800a622:	4b70      	ldr	r3, [pc, #448]	@ (800a7e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a624:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a626:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800a62a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a62e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800a632:	4a6c      	ldr	r2, [pc, #432]	@ (800a7e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a634:	430b      	orrs	r3, r1
 800a636:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800a638:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a63c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a640:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800a644:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800a648:	2300      	movs	r3, #0
 800a64a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800a64e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800a652:	460b      	mov	r3, r1
 800a654:	4313      	orrs	r3, r2
 800a656:	d03e      	beq.n	800a6d6 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800a658:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a65c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800a660:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a664:	d022      	beq.n	800a6ac <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800a666:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a66a:	d81b      	bhi.n	800a6a4 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 800a66c:	2b00      	cmp	r3, #0
 800a66e:	d003      	beq.n	800a678 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800a670:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a674:	d00b      	beq.n	800a68e <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800a676:	e015      	b.n	800a6a4 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a678:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a67c:	3308      	adds	r3, #8
 800a67e:	2100      	movs	r1, #0
 800a680:	4618      	mov	r0, r3
 800a682:	f001 fc0d 	bl	800bea0 <RCCEx_PLL2_Config>
 800a686:	4603      	mov	r3, r0
 800a688:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800a68c:	e00f      	b.n	800a6ae <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a68e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a692:	3328      	adds	r3, #40	@ 0x28
 800a694:	2102      	movs	r1, #2
 800a696:	4618      	mov	r0, r3
 800a698:	f001 fcb4 	bl	800c004 <RCCEx_PLL3_Config>
 800a69c:	4603      	mov	r3, r0
 800a69e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800a6a2:	e004      	b.n	800a6ae <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a6a4:	2301      	movs	r3, #1
 800a6a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a6aa:	e000      	b.n	800a6ae <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800a6ac:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a6ae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	d10b      	bne.n	800a6ce <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800a6b6:	4b4b      	ldr	r3, [pc, #300]	@ (800a7e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a6b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a6ba:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800a6be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a6c2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800a6c6:	4a47      	ldr	r2, [pc, #284]	@ (800a7e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a6c8:	430b      	orrs	r3, r1
 800a6ca:	6593      	str	r3, [r2, #88]	@ 0x58
 800a6cc:	e003      	b.n	800a6d6 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a6ce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a6d2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800a6d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a6da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6de:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800a6e2:	67bb      	str	r3, [r7, #120]	@ 0x78
 800a6e4:	2300      	movs	r3, #0
 800a6e6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800a6e8:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800a6ec:	460b      	mov	r3, r1
 800a6ee:	4313      	orrs	r3, r2
 800a6f0:	d03b      	beq.n	800a76a <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800a6f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a6f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a6fa:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800a6fe:	d01f      	beq.n	800a740 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800a700:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800a704:	d818      	bhi.n	800a738 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800a706:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a70a:	d003      	beq.n	800a714 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800a70c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a710:	d007      	beq.n	800a722 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800a712:	e011      	b.n	800a738 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a714:	4b33      	ldr	r3, [pc, #204]	@ (800a7e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a716:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a718:	4a32      	ldr	r2, [pc, #200]	@ (800a7e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a71a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a71e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800a720:	e00f      	b.n	800a742 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a722:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a726:	3328      	adds	r3, #40	@ 0x28
 800a728:	2101      	movs	r1, #1
 800a72a:	4618      	mov	r0, r3
 800a72c:	f001 fc6a 	bl	800c004 <RCCEx_PLL3_Config>
 800a730:	4603      	mov	r3, r0
 800a732:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800a736:	e004      	b.n	800a742 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a738:	2301      	movs	r3, #1
 800a73a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a73e:	e000      	b.n	800a742 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800a740:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a742:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a746:	2b00      	cmp	r3, #0
 800a748:	d10b      	bne.n	800a762 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800a74a:	4b26      	ldr	r3, [pc, #152]	@ (800a7e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a74c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a74e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800a752:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a756:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a75a:	4a22      	ldr	r2, [pc, #136]	@ (800a7e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a75c:	430b      	orrs	r3, r1
 800a75e:	6553      	str	r3, [r2, #84]	@ 0x54
 800a760:	e003      	b.n	800a76a <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a762:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a766:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800a76a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a76e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a772:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800a776:	673b      	str	r3, [r7, #112]	@ 0x70
 800a778:	2300      	movs	r3, #0
 800a77a:	677b      	str	r3, [r7, #116]	@ 0x74
 800a77c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800a780:	460b      	mov	r3, r1
 800a782:	4313      	orrs	r3, r2
 800a784:	d034      	beq.n	800a7f0 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800a786:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a78a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	d003      	beq.n	800a798 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800a790:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a794:	d007      	beq.n	800a7a6 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800a796:	e011      	b.n	800a7bc <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a798:	4b12      	ldr	r3, [pc, #72]	@ (800a7e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a79a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a79c:	4a11      	ldr	r2, [pc, #68]	@ (800a7e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a79e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a7a2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800a7a4:	e00e      	b.n	800a7c4 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a7a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a7aa:	3308      	adds	r3, #8
 800a7ac:	2102      	movs	r1, #2
 800a7ae:	4618      	mov	r0, r3
 800a7b0:	f001 fb76 	bl	800bea0 <RCCEx_PLL2_Config>
 800a7b4:	4603      	mov	r3, r0
 800a7b6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800a7ba:	e003      	b.n	800a7c4 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800a7bc:	2301      	movs	r3, #1
 800a7be:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a7c2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a7c4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	d10d      	bne.n	800a7e8 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800a7cc:	4b05      	ldr	r3, [pc, #20]	@ (800a7e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a7ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a7d0:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800a7d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a7d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a7da:	4a02      	ldr	r2, [pc, #8]	@ (800a7e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a7dc:	430b      	orrs	r3, r1
 800a7de:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800a7e0:	e006      	b.n	800a7f0 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800a7e2:	bf00      	nop
 800a7e4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a7e8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a7ec:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800a7f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a7f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7f8:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800a7fc:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a7fe:	2300      	movs	r3, #0
 800a800:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800a802:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800a806:	460b      	mov	r3, r1
 800a808:	4313      	orrs	r3, r2
 800a80a:	d00c      	beq.n	800a826 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800a80c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a810:	3328      	adds	r3, #40	@ 0x28
 800a812:	2102      	movs	r1, #2
 800a814:	4618      	mov	r0, r3
 800a816:	f001 fbf5 	bl	800c004 <RCCEx_PLL3_Config>
 800a81a:	4603      	mov	r3, r0
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	d002      	beq.n	800a826 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800a820:	2301      	movs	r3, #1
 800a822:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800a826:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a82a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a82e:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800a832:	663b      	str	r3, [r7, #96]	@ 0x60
 800a834:	2300      	movs	r3, #0
 800a836:	667b      	str	r3, [r7, #100]	@ 0x64
 800a838:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800a83c:	460b      	mov	r3, r1
 800a83e:	4313      	orrs	r3, r2
 800a840:	d038      	beq.n	800a8b4 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800a842:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a846:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a84a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a84e:	d018      	beq.n	800a882 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800a850:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a854:	d811      	bhi.n	800a87a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800a856:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a85a:	d014      	beq.n	800a886 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800a85c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a860:	d80b      	bhi.n	800a87a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800a862:	2b00      	cmp	r3, #0
 800a864:	d011      	beq.n	800a88a <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800a866:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a86a:	d106      	bne.n	800a87a <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a86c:	4bc3      	ldr	r3, [pc, #780]	@ (800ab7c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a86e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a870:	4ac2      	ldr	r2, [pc, #776]	@ (800ab7c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a872:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a876:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800a878:	e008      	b.n	800a88c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a87a:	2301      	movs	r3, #1
 800a87c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a880:	e004      	b.n	800a88c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800a882:	bf00      	nop
 800a884:	e002      	b.n	800a88c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800a886:	bf00      	nop
 800a888:	e000      	b.n	800a88c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800a88a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a88c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a890:	2b00      	cmp	r3, #0
 800a892:	d10b      	bne.n	800a8ac <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800a894:	4bb9      	ldr	r3, [pc, #740]	@ (800ab7c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a896:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a898:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800a89c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a8a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a8a4:	4ab5      	ldr	r2, [pc, #724]	@ (800ab7c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a8a6:	430b      	orrs	r3, r1
 800a8a8:	6553      	str	r3, [r2, #84]	@ 0x54
 800a8aa:	e003      	b.n	800a8b4 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a8ac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a8b0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800a8b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a8b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8bc:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800a8c0:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a8c2:	2300      	movs	r3, #0
 800a8c4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a8c6:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800a8ca:	460b      	mov	r3, r1
 800a8cc:	4313      	orrs	r3, r2
 800a8ce:	d009      	beq.n	800a8e4 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800a8d0:	4baa      	ldr	r3, [pc, #680]	@ (800ab7c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a8d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a8d4:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800a8d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a8dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a8de:	4aa7      	ldr	r2, [pc, #668]	@ (800ab7c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a8e0:	430b      	orrs	r3, r1
 800a8e2:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800a8e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a8e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8ec:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 800a8f0:	653b      	str	r3, [r7, #80]	@ 0x50
 800a8f2:	2300      	movs	r3, #0
 800a8f4:	657b      	str	r3, [r7, #84]	@ 0x54
 800a8f6:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800a8fa:	460b      	mov	r3, r1
 800a8fc:	4313      	orrs	r3, r2
 800a8fe:	d00a      	beq.n	800a916 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800a900:	4b9e      	ldr	r3, [pc, #632]	@ (800ab7c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a902:	691b      	ldr	r3, [r3, #16]
 800a904:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 800a908:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a90c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800a910:	4a9a      	ldr	r2, [pc, #616]	@ (800ab7c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a912:	430b      	orrs	r3, r1
 800a914:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800a916:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a91a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a91e:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800a922:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a924:	2300      	movs	r3, #0
 800a926:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a928:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800a92c:	460b      	mov	r3, r1
 800a92e:	4313      	orrs	r3, r2
 800a930:	d009      	beq.n	800a946 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800a932:	4b92      	ldr	r3, [pc, #584]	@ (800ab7c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a934:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a936:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800a93a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a93e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a940:	4a8e      	ldr	r2, [pc, #568]	@ (800ab7c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a942:	430b      	orrs	r3, r1
 800a944:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800a946:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a94a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a94e:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800a952:	643b      	str	r3, [r7, #64]	@ 0x40
 800a954:	2300      	movs	r3, #0
 800a956:	647b      	str	r3, [r7, #68]	@ 0x44
 800a958:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800a95c:	460b      	mov	r3, r1
 800a95e:	4313      	orrs	r3, r2
 800a960:	d00e      	beq.n	800a980 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800a962:	4b86      	ldr	r3, [pc, #536]	@ (800ab7c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a964:	691b      	ldr	r3, [r3, #16]
 800a966:	4a85      	ldr	r2, [pc, #532]	@ (800ab7c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a968:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800a96c:	6113      	str	r3, [r2, #16]
 800a96e:	4b83      	ldr	r3, [pc, #524]	@ (800ab7c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a970:	6919      	ldr	r1, [r3, #16]
 800a972:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a976:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800a97a:	4a80      	ldr	r2, [pc, #512]	@ (800ab7c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a97c:	430b      	orrs	r3, r1
 800a97e:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800a980:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a984:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a988:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800a98c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a98e:	2300      	movs	r3, #0
 800a990:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a992:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800a996:	460b      	mov	r3, r1
 800a998:	4313      	orrs	r3, r2
 800a99a:	d009      	beq.n	800a9b0 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800a99c:	4b77      	ldr	r3, [pc, #476]	@ (800ab7c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a99e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a9a0:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800a9a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a9a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a9aa:	4a74      	ldr	r2, [pc, #464]	@ (800ab7c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a9ac:	430b      	orrs	r3, r1
 800a9ae:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800a9b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a9b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9b8:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800a9bc:	633b      	str	r3, [r7, #48]	@ 0x30
 800a9be:	2300      	movs	r3, #0
 800a9c0:	637b      	str	r3, [r7, #52]	@ 0x34
 800a9c2:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800a9c6:	460b      	mov	r3, r1
 800a9c8:	4313      	orrs	r3, r2
 800a9ca:	d00a      	beq.n	800a9e2 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800a9cc:	4b6b      	ldr	r3, [pc, #428]	@ (800ab7c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a9ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a9d0:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800a9d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a9d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a9dc:	4a67      	ldr	r2, [pc, #412]	@ (800ab7c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a9de:	430b      	orrs	r3, r1
 800a9e0:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800a9e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a9e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9ea:	2100      	movs	r1, #0
 800a9ec:	62b9      	str	r1, [r7, #40]	@ 0x28
 800a9ee:	f003 0301 	and.w	r3, r3, #1
 800a9f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a9f4:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800a9f8:	460b      	mov	r3, r1
 800a9fa:	4313      	orrs	r3, r2
 800a9fc:	d011      	beq.n	800aa22 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a9fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800aa02:	3308      	adds	r3, #8
 800aa04:	2100      	movs	r1, #0
 800aa06:	4618      	mov	r0, r3
 800aa08:	f001 fa4a 	bl	800bea0 <RCCEx_PLL2_Config>
 800aa0c:	4603      	mov	r3, r0
 800aa0e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800aa12:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800aa16:	2b00      	cmp	r3, #0
 800aa18:	d003      	beq.n	800aa22 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aa1a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800aa1e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800aa22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800aa26:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa2a:	2100      	movs	r1, #0
 800aa2c:	6239      	str	r1, [r7, #32]
 800aa2e:	f003 0302 	and.w	r3, r3, #2
 800aa32:	627b      	str	r3, [r7, #36]	@ 0x24
 800aa34:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800aa38:	460b      	mov	r3, r1
 800aa3a:	4313      	orrs	r3, r2
 800aa3c:	d011      	beq.n	800aa62 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800aa3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800aa42:	3308      	adds	r3, #8
 800aa44:	2101      	movs	r1, #1
 800aa46:	4618      	mov	r0, r3
 800aa48:	f001 fa2a 	bl	800bea0 <RCCEx_PLL2_Config>
 800aa4c:	4603      	mov	r3, r0
 800aa4e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800aa52:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	d003      	beq.n	800aa62 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aa5a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800aa5e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800aa62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800aa66:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa6a:	2100      	movs	r1, #0
 800aa6c:	61b9      	str	r1, [r7, #24]
 800aa6e:	f003 0304 	and.w	r3, r3, #4
 800aa72:	61fb      	str	r3, [r7, #28]
 800aa74:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800aa78:	460b      	mov	r3, r1
 800aa7a:	4313      	orrs	r3, r2
 800aa7c:	d011      	beq.n	800aaa2 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800aa7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800aa82:	3308      	adds	r3, #8
 800aa84:	2102      	movs	r1, #2
 800aa86:	4618      	mov	r0, r3
 800aa88:	f001 fa0a 	bl	800bea0 <RCCEx_PLL2_Config>
 800aa8c:	4603      	mov	r3, r0
 800aa8e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800aa92:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	d003      	beq.n	800aaa2 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aa9a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800aa9e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800aaa2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800aaa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aaaa:	2100      	movs	r1, #0
 800aaac:	6139      	str	r1, [r7, #16]
 800aaae:	f003 0308 	and.w	r3, r3, #8
 800aab2:	617b      	str	r3, [r7, #20]
 800aab4:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800aab8:	460b      	mov	r3, r1
 800aaba:	4313      	orrs	r3, r2
 800aabc:	d011      	beq.n	800aae2 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800aabe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800aac2:	3328      	adds	r3, #40	@ 0x28
 800aac4:	2100      	movs	r1, #0
 800aac6:	4618      	mov	r0, r3
 800aac8:	f001 fa9c 	bl	800c004 <RCCEx_PLL3_Config>
 800aacc:	4603      	mov	r3, r0
 800aace:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 800aad2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800aad6:	2b00      	cmp	r3, #0
 800aad8:	d003      	beq.n	800aae2 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aada:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800aade:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800aae2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800aae6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aaea:	2100      	movs	r1, #0
 800aaec:	60b9      	str	r1, [r7, #8]
 800aaee:	f003 0310 	and.w	r3, r3, #16
 800aaf2:	60fb      	str	r3, [r7, #12]
 800aaf4:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800aaf8:	460b      	mov	r3, r1
 800aafa:	4313      	orrs	r3, r2
 800aafc:	d011      	beq.n	800ab22 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800aafe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ab02:	3328      	adds	r3, #40	@ 0x28
 800ab04:	2101      	movs	r1, #1
 800ab06:	4618      	mov	r0, r3
 800ab08:	f001 fa7c 	bl	800c004 <RCCEx_PLL3_Config>
 800ab0c:	4603      	mov	r3, r0
 800ab0e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800ab12:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	d003      	beq.n	800ab22 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ab1a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ab1e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800ab22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ab26:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab2a:	2100      	movs	r1, #0
 800ab2c:	6039      	str	r1, [r7, #0]
 800ab2e:	f003 0320 	and.w	r3, r3, #32
 800ab32:	607b      	str	r3, [r7, #4]
 800ab34:	e9d7 1200 	ldrd	r1, r2, [r7]
 800ab38:	460b      	mov	r3, r1
 800ab3a:	4313      	orrs	r3, r2
 800ab3c:	d011      	beq.n	800ab62 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800ab3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ab42:	3328      	adds	r3, #40	@ 0x28
 800ab44:	2102      	movs	r1, #2
 800ab46:	4618      	mov	r0, r3
 800ab48:	f001 fa5c 	bl	800c004 <RCCEx_PLL3_Config>
 800ab4c:	4603      	mov	r3, r0
 800ab4e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800ab52:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ab56:	2b00      	cmp	r3, #0
 800ab58:	d003      	beq.n	800ab62 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ab5a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ab5e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 800ab62:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	d101      	bne.n	800ab6e <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800ab6a:	2300      	movs	r3, #0
 800ab6c:	e000      	b.n	800ab70 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800ab6e:	2301      	movs	r3, #1
}
 800ab70:	4618      	mov	r0, r3
 800ab72:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 800ab76:	46bd      	mov	sp, r7
 800ab78:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ab7c:	58024400 	.word	0x58024400

0800ab80 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800ab80:	b580      	push	{r7, lr}
 800ab82:	b090      	sub	sp, #64	@ 0x40
 800ab84:	af00      	add	r7, sp, #0
 800ab86:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800ab8a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ab8e:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 800ab92:	430b      	orrs	r3, r1
 800ab94:	f040 8094 	bne.w	800acc0 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800ab98:	4b9e      	ldr	r3, [pc, #632]	@ (800ae14 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ab9a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ab9c:	f003 0307 	and.w	r3, r3, #7
 800aba0:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800aba2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aba4:	2b04      	cmp	r3, #4
 800aba6:	f200 8087 	bhi.w	800acb8 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800abaa:	a201      	add	r2, pc, #4	@ (adr r2, 800abb0 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800abac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800abb0:	0800abc5 	.word	0x0800abc5
 800abb4:	0800abed 	.word	0x0800abed
 800abb8:	0800ac15 	.word	0x0800ac15
 800abbc:	0800acb1 	.word	0x0800acb1
 800abc0:	0800ac3d 	.word	0x0800ac3d
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800abc4:	4b93      	ldr	r3, [pc, #588]	@ (800ae14 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800abc6:	681b      	ldr	r3, [r3, #0]
 800abc8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800abcc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800abd0:	d108      	bne.n	800abe4 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800abd2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800abd6:	4618      	mov	r0, r3
 800abd8:	f001 f810 	bl	800bbfc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800abdc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800abde:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800abe0:	f000 bd45 	b.w	800b66e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800abe4:	2300      	movs	r3, #0
 800abe6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800abe8:	f000 bd41 	b.w	800b66e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800abec:	4b89      	ldr	r3, [pc, #548]	@ (800ae14 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800abee:	681b      	ldr	r3, [r3, #0]
 800abf0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800abf4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800abf8:	d108      	bne.n	800ac0c <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800abfa:	f107 0318 	add.w	r3, r7, #24
 800abfe:	4618      	mov	r0, r3
 800ac00:	f000 fd54 	bl	800b6ac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800ac04:	69bb      	ldr	r3, [r7, #24]
 800ac06:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ac08:	f000 bd31 	b.w	800b66e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ac0c:	2300      	movs	r3, #0
 800ac0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ac10:	f000 bd2d 	b.w	800b66e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ac14:	4b7f      	ldr	r3, [pc, #508]	@ (800ae14 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ac16:	681b      	ldr	r3, [r3, #0]
 800ac18:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800ac1c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ac20:	d108      	bne.n	800ac34 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ac22:	f107 030c 	add.w	r3, r7, #12
 800ac26:	4618      	mov	r0, r3
 800ac28:	f000 fe94 	bl	800b954 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800ac2c:	68fb      	ldr	r3, [r7, #12]
 800ac2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ac30:	f000 bd1d 	b.w	800b66e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ac34:	2300      	movs	r3, #0
 800ac36:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ac38:	f000 bd19 	b.w	800b66e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800ac3c:	4b75      	ldr	r3, [pc, #468]	@ (800ae14 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ac3e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ac40:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800ac44:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800ac46:	4b73      	ldr	r3, [pc, #460]	@ (800ae14 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ac48:	681b      	ldr	r3, [r3, #0]
 800ac4a:	f003 0304 	and.w	r3, r3, #4
 800ac4e:	2b04      	cmp	r3, #4
 800ac50:	d10c      	bne.n	800ac6c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800ac52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ac54:	2b00      	cmp	r3, #0
 800ac56:	d109      	bne.n	800ac6c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ac58:	4b6e      	ldr	r3, [pc, #440]	@ (800ae14 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ac5a:	681b      	ldr	r3, [r3, #0]
 800ac5c:	08db      	lsrs	r3, r3, #3
 800ac5e:	f003 0303 	and.w	r3, r3, #3
 800ac62:	4a6d      	ldr	r2, [pc, #436]	@ (800ae18 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800ac64:	fa22 f303 	lsr.w	r3, r2, r3
 800ac68:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ac6a:	e01f      	b.n	800acac <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800ac6c:	4b69      	ldr	r3, [pc, #420]	@ (800ae14 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ac6e:	681b      	ldr	r3, [r3, #0]
 800ac70:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ac74:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ac78:	d106      	bne.n	800ac88 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800ac7a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ac7c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ac80:	d102      	bne.n	800ac88 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800ac82:	4b66      	ldr	r3, [pc, #408]	@ (800ae1c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800ac84:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ac86:	e011      	b.n	800acac <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800ac88:	4b62      	ldr	r3, [pc, #392]	@ (800ae14 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ac8a:	681b      	ldr	r3, [r3, #0]
 800ac8c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ac90:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ac94:	d106      	bne.n	800aca4 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800ac96:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ac98:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ac9c:	d102      	bne.n	800aca4 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800ac9e:	4b60      	ldr	r3, [pc, #384]	@ (800ae20 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800aca0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800aca2:	e003      	b.n	800acac <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800aca4:	2300      	movs	r3, #0
 800aca6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800aca8:	f000 bce1 	b.w	800b66e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800acac:	f000 bcdf 	b.w	800b66e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800acb0:	4b5c      	ldr	r3, [pc, #368]	@ (800ae24 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800acb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800acb4:	f000 bcdb 	b.w	800b66e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800acb8:	2300      	movs	r3, #0
 800acba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800acbc:	f000 bcd7 	b.w	800b66e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800acc0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800acc4:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 800acc8:	430b      	orrs	r3, r1
 800acca:	f040 80ad 	bne.w	800ae28 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 800acce:	4b51      	ldr	r3, [pc, #324]	@ (800ae14 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800acd0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800acd2:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 800acd6:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800acd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800acda:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800acde:	d056      	beq.n	800ad8e <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 800ace0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ace2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ace6:	f200 8090 	bhi.w	800ae0a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800acea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800acec:	2bc0      	cmp	r3, #192	@ 0xc0
 800acee:	f000 8088 	beq.w	800ae02 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 800acf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800acf4:	2bc0      	cmp	r3, #192	@ 0xc0
 800acf6:	f200 8088 	bhi.w	800ae0a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800acfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800acfc:	2b80      	cmp	r3, #128	@ 0x80
 800acfe:	d032      	beq.n	800ad66 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800ad00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad02:	2b80      	cmp	r3, #128	@ 0x80
 800ad04:	f200 8081 	bhi.w	800ae0a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800ad08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad0a:	2b00      	cmp	r3, #0
 800ad0c:	d003      	beq.n	800ad16 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 800ad0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad10:	2b40      	cmp	r3, #64	@ 0x40
 800ad12:	d014      	beq.n	800ad3e <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 800ad14:	e079      	b.n	800ae0a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ad16:	4b3f      	ldr	r3, [pc, #252]	@ (800ae14 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ad18:	681b      	ldr	r3, [r3, #0]
 800ad1a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ad1e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800ad22:	d108      	bne.n	800ad36 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ad24:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ad28:	4618      	mov	r0, r3
 800ad2a:	f000 ff67 	bl	800bbfc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ad2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad30:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ad32:	f000 bc9c 	b.w	800b66e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ad36:	2300      	movs	r3, #0
 800ad38:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ad3a:	f000 bc98 	b.w	800b66e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ad3e:	4b35      	ldr	r3, [pc, #212]	@ (800ae14 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ad40:	681b      	ldr	r3, [r3, #0]
 800ad42:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ad46:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ad4a:	d108      	bne.n	800ad5e <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ad4c:	f107 0318 	add.w	r3, r7, #24
 800ad50:	4618      	mov	r0, r3
 800ad52:	f000 fcab 	bl	800b6ac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800ad56:	69bb      	ldr	r3, [r7, #24]
 800ad58:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ad5a:	f000 bc88 	b.w	800b66e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ad5e:	2300      	movs	r3, #0
 800ad60:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ad62:	f000 bc84 	b.w	800b66e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ad66:	4b2b      	ldr	r3, [pc, #172]	@ (800ae14 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ad68:	681b      	ldr	r3, [r3, #0]
 800ad6a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800ad6e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ad72:	d108      	bne.n	800ad86 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ad74:	f107 030c 	add.w	r3, r7, #12
 800ad78:	4618      	mov	r0, r3
 800ad7a:	f000 fdeb 	bl	800b954 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800ad7e:	68fb      	ldr	r3, [r7, #12]
 800ad80:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ad82:	f000 bc74 	b.w	800b66e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ad86:	2300      	movs	r3, #0
 800ad88:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ad8a:	f000 bc70 	b.w	800b66e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800ad8e:	4b21      	ldr	r3, [pc, #132]	@ (800ae14 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ad90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ad92:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800ad96:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800ad98:	4b1e      	ldr	r3, [pc, #120]	@ (800ae14 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ad9a:	681b      	ldr	r3, [r3, #0]
 800ad9c:	f003 0304 	and.w	r3, r3, #4
 800ada0:	2b04      	cmp	r3, #4
 800ada2:	d10c      	bne.n	800adbe <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 800ada4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ada6:	2b00      	cmp	r3, #0
 800ada8:	d109      	bne.n	800adbe <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800adaa:	4b1a      	ldr	r3, [pc, #104]	@ (800ae14 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800adac:	681b      	ldr	r3, [r3, #0]
 800adae:	08db      	lsrs	r3, r3, #3
 800adb0:	f003 0303 	and.w	r3, r3, #3
 800adb4:	4a18      	ldr	r2, [pc, #96]	@ (800ae18 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800adb6:	fa22 f303 	lsr.w	r3, r2, r3
 800adba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800adbc:	e01f      	b.n	800adfe <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800adbe:	4b15      	ldr	r3, [pc, #84]	@ (800ae14 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800adc0:	681b      	ldr	r3, [r3, #0]
 800adc2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800adc6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800adca:	d106      	bne.n	800adda <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 800adcc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800adce:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800add2:	d102      	bne.n	800adda <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800add4:	4b11      	ldr	r3, [pc, #68]	@ (800ae1c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800add6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800add8:	e011      	b.n	800adfe <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800adda:	4b0e      	ldr	r3, [pc, #56]	@ (800ae14 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800addc:	681b      	ldr	r3, [r3, #0]
 800adde:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ade2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ade6:	d106      	bne.n	800adf6 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 800ade8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800adea:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800adee:	d102      	bne.n	800adf6 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800adf0:	4b0b      	ldr	r3, [pc, #44]	@ (800ae20 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800adf2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800adf4:	e003      	b.n	800adfe <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800adf6:	2300      	movs	r3, #0
 800adf8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800adfa:	f000 bc38 	b.w	800b66e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800adfe:	f000 bc36 	b.w	800b66e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800ae02:	4b08      	ldr	r3, [pc, #32]	@ (800ae24 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800ae04:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ae06:	f000 bc32 	b.w	800b66e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800ae0a:	2300      	movs	r3, #0
 800ae0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ae0e:	f000 bc2e 	b.w	800b66e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800ae12:	bf00      	nop
 800ae14:	58024400 	.word	0x58024400
 800ae18:	03d09000 	.word	0x03d09000
 800ae1c:	003d0900 	.word	0x003d0900
 800ae20:	017d7840 	.word	0x017d7840
 800ae24:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800ae28:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ae2c:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 800ae30:	430b      	orrs	r3, r1
 800ae32:	f040 809c 	bne.w	800af6e <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800ae36:	4b9e      	ldr	r3, [pc, #632]	@ (800b0b0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ae38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ae3a:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 800ae3e:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800ae40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae42:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800ae46:	d054      	beq.n	800aef2 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 800ae48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae4a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800ae4e:	f200 808b 	bhi.w	800af68 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800ae52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae54:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800ae58:	f000 8083 	beq.w	800af62 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 800ae5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae5e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800ae62:	f200 8081 	bhi.w	800af68 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800ae66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae68:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800ae6c:	d02f      	beq.n	800aece <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 800ae6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae70:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800ae74:	d878      	bhi.n	800af68 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800ae76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae78:	2b00      	cmp	r3, #0
 800ae7a:	d004      	beq.n	800ae86 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800ae7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae7e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800ae82:	d012      	beq.n	800aeaa <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800ae84:	e070      	b.n	800af68 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ae86:	4b8a      	ldr	r3, [pc, #552]	@ (800b0b0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ae88:	681b      	ldr	r3, [r3, #0]
 800ae8a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ae8e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800ae92:	d107      	bne.n	800aea4 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ae94:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ae98:	4618      	mov	r0, r3
 800ae9a:	f000 feaf 	bl	800bbfc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ae9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aea0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aea2:	e3e4      	b.n	800b66e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800aea4:	2300      	movs	r3, #0
 800aea6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aea8:	e3e1      	b.n	800b66e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800aeaa:	4b81      	ldr	r3, [pc, #516]	@ (800b0b0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800aeac:	681b      	ldr	r3, [r3, #0]
 800aeae:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800aeb2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800aeb6:	d107      	bne.n	800aec8 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800aeb8:	f107 0318 	add.w	r3, r7, #24
 800aebc:	4618      	mov	r0, r3
 800aebe:	f000 fbf5 	bl	800b6ac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800aec2:	69bb      	ldr	r3, [r7, #24]
 800aec4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aec6:	e3d2      	b.n	800b66e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800aec8:	2300      	movs	r3, #0
 800aeca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aecc:	e3cf      	b.n	800b66e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800aece:	4b78      	ldr	r3, [pc, #480]	@ (800b0b0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800aed0:	681b      	ldr	r3, [r3, #0]
 800aed2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800aed6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800aeda:	d107      	bne.n	800aeec <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800aedc:	f107 030c 	add.w	r3, r7, #12
 800aee0:	4618      	mov	r0, r3
 800aee2:	f000 fd37 	bl	800b954 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800aee6:	68fb      	ldr	r3, [r7, #12]
 800aee8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aeea:	e3c0      	b.n	800b66e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800aeec:	2300      	movs	r3, #0
 800aeee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aef0:	e3bd      	b.n	800b66e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800aef2:	4b6f      	ldr	r3, [pc, #444]	@ (800b0b0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800aef4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800aef6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800aefa:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800aefc:	4b6c      	ldr	r3, [pc, #432]	@ (800b0b0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800aefe:	681b      	ldr	r3, [r3, #0]
 800af00:	f003 0304 	and.w	r3, r3, #4
 800af04:	2b04      	cmp	r3, #4
 800af06:	d10c      	bne.n	800af22 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 800af08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800af0a:	2b00      	cmp	r3, #0
 800af0c:	d109      	bne.n	800af22 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800af0e:	4b68      	ldr	r3, [pc, #416]	@ (800b0b0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800af10:	681b      	ldr	r3, [r3, #0]
 800af12:	08db      	lsrs	r3, r3, #3
 800af14:	f003 0303 	and.w	r3, r3, #3
 800af18:	4a66      	ldr	r2, [pc, #408]	@ (800b0b4 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800af1a:	fa22 f303 	lsr.w	r3, r2, r3
 800af1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800af20:	e01e      	b.n	800af60 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800af22:	4b63      	ldr	r3, [pc, #396]	@ (800b0b0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800af24:	681b      	ldr	r3, [r3, #0]
 800af26:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800af2a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800af2e:	d106      	bne.n	800af3e <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 800af30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800af32:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800af36:	d102      	bne.n	800af3e <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800af38:	4b5f      	ldr	r3, [pc, #380]	@ (800b0b8 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800af3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800af3c:	e010      	b.n	800af60 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800af3e:	4b5c      	ldr	r3, [pc, #368]	@ (800b0b0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800af40:	681b      	ldr	r3, [r3, #0]
 800af42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800af46:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800af4a:	d106      	bne.n	800af5a <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 800af4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800af4e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800af52:	d102      	bne.n	800af5a <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800af54:	4b59      	ldr	r3, [pc, #356]	@ (800b0bc <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800af56:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800af58:	e002      	b.n	800af60 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800af5a:	2300      	movs	r3, #0
 800af5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800af5e:	e386      	b.n	800b66e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800af60:	e385      	b.n	800b66e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800af62:	4b57      	ldr	r3, [pc, #348]	@ (800b0c0 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800af64:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800af66:	e382      	b.n	800b66e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800af68:	2300      	movs	r3, #0
 800af6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800af6c:	e37f      	b.n	800b66e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800af6e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800af72:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 800af76:	430b      	orrs	r3, r1
 800af78:	f040 80a7 	bne.w	800b0ca <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800af7c:	4b4c      	ldr	r3, [pc, #304]	@ (800b0b0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800af7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800af80:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 800af84:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800af86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af88:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800af8c:	d055      	beq.n	800b03a <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 800af8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af90:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800af94:	f200 8096 	bhi.w	800b0c4 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800af98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af9a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800af9e:	f000 8084 	beq.w	800b0aa <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800afa2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800afa4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800afa8:	f200 808c 	bhi.w	800b0c4 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800afac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800afae:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800afb2:	d030      	beq.n	800b016 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 800afb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800afb6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800afba:	f200 8083 	bhi.w	800b0c4 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800afbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800afc0:	2b00      	cmp	r3, #0
 800afc2:	d004      	beq.n	800afce <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 800afc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800afc6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800afca:	d012      	beq.n	800aff2 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 800afcc:	e07a      	b.n	800b0c4 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800afce:	4b38      	ldr	r3, [pc, #224]	@ (800b0b0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800afd0:	681b      	ldr	r3, [r3, #0]
 800afd2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800afd6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800afda:	d107      	bne.n	800afec <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800afdc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800afe0:	4618      	mov	r0, r3
 800afe2:	f000 fe0b 	bl	800bbfc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800afe6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800afe8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800afea:	e340      	b.n	800b66e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800afec:	2300      	movs	r3, #0
 800afee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aff0:	e33d      	b.n	800b66e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800aff2:	4b2f      	ldr	r3, [pc, #188]	@ (800b0b0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800aff4:	681b      	ldr	r3, [r3, #0]
 800aff6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800affa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800affe:	d107      	bne.n	800b010 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b000:	f107 0318 	add.w	r3, r7, #24
 800b004:	4618      	mov	r0, r3
 800b006:	f000 fb51 	bl	800b6ac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b00a:	69bb      	ldr	r3, [r7, #24]
 800b00c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b00e:	e32e      	b.n	800b66e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b010:	2300      	movs	r3, #0
 800b012:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b014:	e32b      	b.n	800b66e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b016:	4b26      	ldr	r3, [pc, #152]	@ (800b0b0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b018:	681b      	ldr	r3, [r3, #0]
 800b01a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b01e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b022:	d107      	bne.n	800b034 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b024:	f107 030c 	add.w	r3, r7, #12
 800b028:	4618      	mov	r0, r3
 800b02a:	f000 fc93 	bl	800b954 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b02e:	68fb      	ldr	r3, [r7, #12]
 800b030:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b032:	e31c      	b.n	800b66e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b034:	2300      	movs	r3, #0
 800b036:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b038:	e319      	b.n	800b66e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b03a:	4b1d      	ldr	r3, [pc, #116]	@ (800b0b0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b03c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b03e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800b042:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b044:	4b1a      	ldr	r3, [pc, #104]	@ (800b0b0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b046:	681b      	ldr	r3, [r3, #0]
 800b048:	f003 0304 	and.w	r3, r3, #4
 800b04c:	2b04      	cmp	r3, #4
 800b04e:	d10c      	bne.n	800b06a <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 800b050:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b052:	2b00      	cmp	r3, #0
 800b054:	d109      	bne.n	800b06a <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b056:	4b16      	ldr	r3, [pc, #88]	@ (800b0b0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b058:	681b      	ldr	r3, [r3, #0]
 800b05a:	08db      	lsrs	r3, r3, #3
 800b05c:	f003 0303 	and.w	r3, r3, #3
 800b060:	4a14      	ldr	r2, [pc, #80]	@ (800b0b4 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800b062:	fa22 f303 	lsr.w	r3, r2, r3
 800b066:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b068:	e01e      	b.n	800b0a8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b06a:	4b11      	ldr	r3, [pc, #68]	@ (800b0b0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b06c:	681b      	ldr	r3, [r3, #0]
 800b06e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b072:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b076:	d106      	bne.n	800b086 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 800b078:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b07a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b07e:	d102      	bne.n	800b086 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b080:	4b0d      	ldr	r3, [pc, #52]	@ (800b0b8 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800b082:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b084:	e010      	b.n	800b0a8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b086:	4b0a      	ldr	r3, [pc, #40]	@ (800b0b0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b088:	681b      	ldr	r3, [r3, #0]
 800b08a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b08e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b092:	d106      	bne.n	800b0a2 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 800b094:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b096:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b09a:	d102      	bne.n	800b0a2 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b09c:	4b07      	ldr	r3, [pc, #28]	@ (800b0bc <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800b09e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b0a0:	e002      	b.n	800b0a8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b0a2:	2300      	movs	r3, #0
 800b0a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800b0a6:	e2e2      	b.n	800b66e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b0a8:	e2e1      	b.n	800b66e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800b0aa:	4b05      	ldr	r3, [pc, #20]	@ (800b0c0 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800b0ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b0ae:	e2de      	b.n	800b66e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b0b0:	58024400 	.word	0x58024400
 800b0b4:	03d09000 	.word	0x03d09000
 800b0b8:	003d0900 	.word	0x003d0900
 800b0bc:	017d7840 	.word	0x017d7840
 800b0c0:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 800b0c4:	2300      	movs	r3, #0
 800b0c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b0c8:	e2d1      	b.n	800b66e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800b0ca:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b0ce:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 800b0d2:	430b      	orrs	r3, r1
 800b0d4:	f040 809c 	bne.w	800b210 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800b0d8:	4b93      	ldr	r3, [pc, #588]	@ (800b328 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b0da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b0dc:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800b0e0:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800b0e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b0e4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b0e8:	d054      	beq.n	800b194 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800b0ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b0ec:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b0f0:	f200 808b 	bhi.w	800b20a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800b0f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b0f6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800b0fa:	f000 8083 	beq.w	800b204 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 800b0fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b100:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800b104:	f200 8081 	bhi.w	800b20a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800b108:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b10a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b10e:	d02f      	beq.n	800b170 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 800b110:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b112:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b116:	d878      	bhi.n	800b20a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800b118:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b11a:	2b00      	cmp	r3, #0
 800b11c:	d004      	beq.n	800b128 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800b11e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b120:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b124:	d012      	beq.n	800b14c <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 800b126:	e070      	b.n	800b20a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b128:	4b7f      	ldr	r3, [pc, #508]	@ (800b328 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b12a:	681b      	ldr	r3, [r3, #0]
 800b12c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b130:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b134:	d107      	bne.n	800b146 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b136:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b13a:	4618      	mov	r0, r3
 800b13c:	f000 fd5e 	bl	800bbfc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b140:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b142:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b144:	e293      	b.n	800b66e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b146:	2300      	movs	r3, #0
 800b148:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b14a:	e290      	b.n	800b66e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b14c:	4b76      	ldr	r3, [pc, #472]	@ (800b328 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b14e:	681b      	ldr	r3, [r3, #0]
 800b150:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b154:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b158:	d107      	bne.n	800b16a <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b15a:	f107 0318 	add.w	r3, r7, #24
 800b15e:	4618      	mov	r0, r3
 800b160:	f000 faa4 	bl	800b6ac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b164:	69bb      	ldr	r3, [r7, #24]
 800b166:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b168:	e281      	b.n	800b66e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b16a:	2300      	movs	r3, #0
 800b16c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b16e:	e27e      	b.n	800b66e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b170:	4b6d      	ldr	r3, [pc, #436]	@ (800b328 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b172:	681b      	ldr	r3, [r3, #0]
 800b174:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b178:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b17c:	d107      	bne.n	800b18e <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b17e:	f107 030c 	add.w	r3, r7, #12
 800b182:	4618      	mov	r0, r3
 800b184:	f000 fbe6 	bl	800b954 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b188:	68fb      	ldr	r3, [r7, #12]
 800b18a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b18c:	e26f      	b.n	800b66e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b18e:	2300      	movs	r3, #0
 800b190:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b192:	e26c      	b.n	800b66e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b194:	4b64      	ldr	r3, [pc, #400]	@ (800b328 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b196:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b198:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800b19c:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b19e:	4b62      	ldr	r3, [pc, #392]	@ (800b328 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b1a0:	681b      	ldr	r3, [r3, #0]
 800b1a2:	f003 0304 	and.w	r3, r3, #4
 800b1a6:	2b04      	cmp	r3, #4
 800b1a8:	d10c      	bne.n	800b1c4 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 800b1aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b1ac:	2b00      	cmp	r3, #0
 800b1ae:	d109      	bne.n	800b1c4 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b1b0:	4b5d      	ldr	r3, [pc, #372]	@ (800b328 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b1b2:	681b      	ldr	r3, [r3, #0]
 800b1b4:	08db      	lsrs	r3, r3, #3
 800b1b6:	f003 0303 	and.w	r3, r3, #3
 800b1ba:	4a5c      	ldr	r2, [pc, #368]	@ (800b32c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800b1bc:	fa22 f303 	lsr.w	r3, r2, r3
 800b1c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b1c2:	e01e      	b.n	800b202 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b1c4:	4b58      	ldr	r3, [pc, #352]	@ (800b328 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b1c6:	681b      	ldr	r3, [r3, #0]
 800b1c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b1cc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b1d0:	d106      	bne.n	800b1e0 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 800b1d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b1d4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b1d8:	d102      	bne.n	800b1e0 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b1da:	4b55      	ldr	r3, [pc, #340]	@ (800b330 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800b1dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b1de:	e010      	b.n	800b202 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b1e0:	4b51      	ldr	r3, [pc, #324]	@ (800b328 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b1e2:	681b      	ldr	r3, [r3, #0]
 800b1e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b1e8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b1ec:	d106      	bne.n	800b1fc <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800b1ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b1f0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b1f4:	d102      	bne.n	800b1fc <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b1f6:	4b4f      	ldr	r3, [pc, #316]	@ (800b334 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800b1f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b1fa:	e002      	b.n	800b202 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b1fc:	2300      	movs	r3, #0
 800b1fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800b200:	e235      	b.n	800b66e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b202:	e234      	b.n	800b66e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800b204:	4b4c      	ldr	r3, [pc, #304]	@ (800b338 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800b206:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b208:	e231      	b.n	800b66e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800b20a:	2300      	movs	r3, #0
 800b20c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b20e:	e22e      	b.n	800b66e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800b210:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b214:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 800b218:	430b      	orrs	r3, r1
 800b21a:	f040 808f 	bne.w	800b33c <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800b21e:	4b42      	ldr	r3, [pc, #264]	@ (800b328 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b220:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b222:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800b226:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 800b228:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b22a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800b22e:	d06b      	beq.n	800b308 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 800b230:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b232:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800b236:	d874      	bhi.n	800b322 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800b238:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b23a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800b23e:	d056      	beq.n	800b2ee <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 800b240:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b242:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800b246:	d86c      	bhi.n	800b322 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800b248:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b24a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800b24e:	d03b      	beq.n	800b2c8 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 800b250:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b252:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800b256:	d864      	bhi.n	800b322 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800b258:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b25a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b25e:	d021      	beq.n	800b2a4 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800b260:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b262:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b266:	d85c      	bhi.n	800b322 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800b268:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b26a:	2b00      	cmp	r3, #0
 800b26c:	d004      	beq.n	800b278 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 800b26e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b270:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b274:	d004      	beq.n	800b280 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 800b276:	e054      	b.n	800b322 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800b278:	f7fe fa4c 	bl	8009714 <HAL_RCC_GetPCLK1Freq>
 800b27c:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800b27e:	e1f6      	b.n	800b66e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b280:	4b29      	ldr	r3, [pc, #164]	@ (800b328 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b282:	681b      	ldr	r3, [r3, #0]
 800b284:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b288:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b28c:	d107      	bne.n	800b29e <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b28e:	f107 0318 	add.w	r3, r7, #24
 800b292:	4618      	mov	r0, r3
 800b294:	f000 fa0a 	bl	800b6ac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b298:	69fb      	ldr	r3, [r7, #28]
 800b29a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b29c:	e1e7      	b.n	800b66e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b29e:	2300      	movs	r3, #0
 800b2a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b2a2:	e1e4      	b.n	800b66e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b2a4:	4b20      	ldr	r3, [pc, #128]	@ (800b328 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b2a6:	681b      	ldr	r3, [r3, #0]
 800b2a8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b2ac:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b2b0:	d107      	bne.n	800b2c2 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b2b2:	f107 030c 	add.w	r3, r7, #12
 800b2b6:	4618      	mov	r0, r3
 800b2b8:	f000 fb4c 	bl	800b954 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800b2bc:	693b      	ldr	r3, [r7, #16]
 800b2be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b2c0:	e1d5      	b.n	800b66e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b2c2:	2300      	movs	r3, #0
 800b2c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b2c6:	e1d2      	b.n	800b66e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800b2c8:	4b17      	ldr	r3, [pc, #92]	@ (800b328 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b2ca:	681b      	ldr	r3, [r3, #0]
 800b2cc:	f003 0304 	and.w	r3, r3, #4
 800b2d0:	2b04      	cmp	r3, #4
 800b2d2:	d109      	bne.n	800b2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b2d4:	4b14      	ldr	r3, [pc, #80]	@ (800b328 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b2d6:	681b      	ldr	r3, [r3, #0]
 800b2d8:	08db      	lsrs	r3, r3, #3
 800b2da:	f003 0303 	and.w	r3, r3, #3
 800b2de:	4a13      	ldr	r2, [pc, #76]	@ (800b32c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800b2e0:	fa22 f303 	lsr.w	r3, r2, r3
 800b2e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b2e6:	e1c2      	b.n	800b66e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b2e8:	2300      	movs	r3, #0
 800b2ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b2ec:	e1bf      	b.n	800b66e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800b2ee:	4b0e      	ldr	r3, [pc, #56]	@ (800b328 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b2f0:	681b      	ldr	r3, [r3, #0]
 800b2f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b2f6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b2fa:	d102      	bne.n	800b302 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 800b2fc:	4b0c      	ldr	r3, [pc, #48]	@ (800b330 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800b2fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b300:	e1b5      	b.n	800b66e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b302:	2300      	movs	r3, #0
 800b304:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b306:	e1b2      	b.n	800b66e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800b308:	4b07      	ldr	r3, [pc, #28]	@ (800b328 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b30a:	681b      	ldr	r3, [r3, #0]
 800b30c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b310:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b314:	d102      	bne.n	800b31c <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 800b316:	4b07      	ldr	r3, [pc, #28]	@ (800b334 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800b318:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b31a:	e1a8      	b.n	800b66e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b31c:	2300      	movs	r3, #0
 800b31e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b320:	e1a5      	b.n	800b66e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800b322:	2300      	movs	r3, #0
 800b324:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b326:	e1a2      	b.n	800b66e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b328:	58024400 	.word	0x58024400
 800b32c:	03d09000 	.word	0x03d09000
 800b330:	003d0900 	.word	0x003d0900
 800b334:	017d7840 	.word	0x017d7840
 800b338:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800b33c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b340:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 800b344:	430b      	orrs	r3, r1
 800b346:	d173      	bne.n	800b430 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800b348:	4b9c      	ldr	r3, [pc, #624]	@ (800b5bc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b34a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b34c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800b350:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800b352:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b354:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b358:	d02f      	beq.n	800b3ba <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800b35a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b35c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b360:	d863      	bhi.n	800b42a <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 800b362:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b364:	2b00      	cmp	r3, #0
 800b366:	d004      	beq.n	800b372 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 800b368:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b36a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b36e:	d012      	beq.n	800b396 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 800b370:	e05b      	b.n	800b42a <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b372:	4b92      	ldr	r3, [pc, #584]	@ (800b5bc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b374:	681b      	ldr	r3, [r3, #0]
 800b376:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b37a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b37e:	d107      	bne.n	800b390 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b380:	f107 0318 	add.w	r3, r7, #24
 800b384:	4618      	mov	r0, r3
 800b386:	f000 f991 	bl	800b6ac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b38a:	69bb      	ldr	r3, [r7, #24]
 800b38c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b38e:	e16e      	b.n	800b66e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b390:	2300      	movs	r3, #0
 800b392:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b394:	e16b      	b.n	800b66e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b396:	4b89      	ldr	r3, [pc, #548]	@ (800b5bc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b398:	681b      	ldr	r3, [r3, #0]
 800b39a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b39e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b3a2:	d107      	bne.n	800b3b4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b3a4:	f107 030c 	add.w	r3, r7, #12
 800b3a8:	4618      	mov	r0, r3
 800b3aa:	f000 fad3 	bl	800b954 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800b3ae:	697b      	ldr	r3, [r7, #20]
 800b3b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b3b2:	e15c      	b.n	800b66e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b3b4:	2300      	movs	r3, #0
 800b3b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b3b8:	e159      	b.n	800b66e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b3ba:	4b80      	ldr	r3, [pc, #512]	@ (800b5bc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b3bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b3be:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800b3c2:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b3c4:	4b7d      	ldr	r3, [pc, #500]	@ (800b5bc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b3c6:	681b      	ldr	r3, [r3, #0]
 800b3c8:	f003 0304 	and.w	r3, r3, #4
 800b3cc:	2b04      	cmp	r3, #4
 800b3ce:	d10c      	bne.n	800b3ea <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 800b3d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b3d2:	2b00      	cmp	r3, #0
 800b3d4:	d109      	bne.n	800b3ea <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b3d6:	4b79      	ldr	r3, [pc, #484]	@ (800b5bc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b3d8:	681b      	ldr	r3, [r3, #0]
 800b3da:	08db      	lsrs	r3, r3, #3
 800b3dc:	f003 0303 	and.w	r3, r3, #3
 800b3e0:	4a77      	ldr	r2, [pc, #476]	@ (800b5c0 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800b3e2:	fa22 f303 	lsr.w	r3, r2, r3
 800b3e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b3e8:	e01e      	b.n	800b428 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b3ea:	4b74      	ldr	r3, [pc, #464]	@ (800b5bc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b3ec:	681b      	ldr	r3, [r3, #0]
 800b3ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b3f2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b3f6:	d106      	bne.n	800b406 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 800b3f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b3fa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b3fe:	d102      	bne.n	800b406 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b400:	4b70      	ldr	r3, [pc, #448]	@ (800b5c4 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800b402:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b404:	e010      	b.n	800b428 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b406:	4b6d      	ldr	r3, [pc, #436]	@ (800b5bc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b408:	681b      	ldr	r3, [r3, #0]
 800b40a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b40e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b412:	d106      	bne.n	800b422 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 800b414:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b416:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b41a:	d102      	bne.n	800b422 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b41c:	4b6a      	ldr	r3, [pc, #424]	@ (800b5c8 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800b41e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b420:	e002      	b.n	800b428 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b422:	2300      	movs	r3, #0
 800b424:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800b426:	e122      	b.n	800b66e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b428:	e121      	b.n	800b66e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800b42a:	2300      	movs	r3, #0
 800b42c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b42e:	e11e      	b.n	800b66e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800b430:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b434:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 800b438:	430b      	orrs	r3, r1
 800b43a:	d133      	bne.n	800b4a4 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800b43c:	4b5f      	ldr	r3, [pc, #380]	@ (800b5bc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b43e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b440:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800b444:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800b446:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b448:	2b00      	cmp	r3, #0
 800b44a:	d004      	beq.n	800b456 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 800b44c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b44e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b452:	d012      	beq.n	800b47a <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 800b454:	e023      	b.n	800b49e <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b456:	4b59      	ldr	r3, [pc, #356]	@ (800b5bc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b458:	681b      	ldr	r3, [r3, #0]
 800b45a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b45e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b462:	d107      	bne.n	800b474 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b464:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b468:	4618      	mov	r0, r3
 800b46a:	f000 fbc7 	bl	800bbfc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b46e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b470:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b472:	e0fc      	b.n	800b66e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b474:	2300      	movs	r3, #0
 800b476:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b478:	e0f9      	b.n	800b66e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b47a:	4b50      	ldr	r3, [pc, #320]	@ (800b5bc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b47c:	681b      	ldr	r3, [r3, #0]
 800b47e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b482:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b486:	d107      	bne.n	800b498 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b488:	f107 0318 	add.w	r3, r7, #24
 800b48c:	4618      	mov	r0, r3
 800b48e:	f000 f90d 	bl	800b6ac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800b492:	6a3b      	ldr	r3, [r7, #32]
 800b494:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b496:	e0ea      	b.n	800b66e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b498:	2300      	movs	r3, #0
 800b49a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b49c:	e0e7      	b.n	800b66e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800b49e:	2300      	movs	r3, #0
 800b4a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b4a2:	e0e4      	b.n	800b66e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800b4a4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b4a8:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 800b4ac:	430b      	orrs	r3, r1
 800b4ae:	f040 808d 	bne.w	800b5cc <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800b4b2:	4b42      	ldr	r3, [pc, #264]	@ (800b5bc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b4b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b4b6:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 800b4ba:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800b4bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b4be:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b4c2:	d06b      	beq.n	800b59c <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 800b4c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b4c6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b4ca:	d874      	bhi.n	800b5b6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800b4cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b4ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b4d2:	d056      	beq.n	800b582 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 800b4d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b4d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b4da:	d86c      	bhi.n	800b5b6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800b4dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b4de:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800b4e2:	d03b      	beq.n	800b55c <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 800b4e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b4e6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800b4ea:	d864      	bhi.n	800b5b6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800b4ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b4ee:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b4f2:	d021      	beq.n	800b538 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 800b4f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b4f6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b4fa:	d85c      	bhi.n	800b5b6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800b4fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b4fe:	2b00      	cmp	r3, #0
 800b500:	d004      	beq.n	800b50c <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 800b502:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b504:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b508:	d004      	beq.n	800b514 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 800b50a:	e054      	b.n	800b5b6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800b50c:	f000 f8b8 	bl	800b680 <HAL_RCCEx_GetD3PCLK1Freq>
 800b510:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800b512:	e0ac      	b.n	800b66e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b514:	4b29      	ldr	r3, [pc, #164]	@ (800b5bc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b516:	681b      	ldr	r3, [r3, #0]
 800b518:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b51c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b520:	d107      	bne.n	800b532 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b522:	f107 0318 	add.w	r3, r7, #24
 800b526:	4618      	mov	r0, r3
 800b528:	f000 f8c0 	bl	800b6ac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b52c:	69fb      	ldr	r3, [r7, #28]
 800b52e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b530:	e09d      	b.n	800b66e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b532:	2300      	movs	r3, #0
 800b534:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b536:	e09a      	b.n	800b66e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b538:	4b20      	ldr	r3, [pc, #128]	@ (800b5bc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b53a:	681b      	ldr	r3, [r3, #0]
 800b53c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b540:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b544:	d107      	bne.n	800b556 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b546:	f107 030c 	add.w	r3, r7, #12
 800b54a:	4618      	mov	r0, r3
 800b54c:	f000 fa02 	bl	800b954 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800b550:	693b      	ldr	r3, [r7, #16]
 800b552:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b554:	e08b      	b.n	800b66e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b556:	2300      	movs	r3, #0
 800b558:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b55a:	e088      	b.n	800b66e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800b55c:	4b17      	ldr	r3, [pc, #92]	@ (800b5bc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b55e:	681b      	ldr	r3, [r3, #0]
 800b560:	f003 0304 	and.w	r3, r3, #4
 800b564:	2b04      	cmp	r3, #4
 800b566:	d109      	bne.n	800b57c <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b568:	4b14      	ldr	r3, [pc, #80]	@ (800b5bc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b56a:	681b      	ldr	r3, [r3, #0]
 800b56c:	08db      	lsrs	r3, r3, #3
 800b56e:	f003 0303 	and.w	r3, r3, #3
 800b572:	4a13      	ldr	r2, [pc, #76]	@ (800b5c0 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800b574:	fa22 f303 	lsr.w	r3, r2, r3
 800b578:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b57a:	e078      	b.n	800b66e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b57c:	2300      	movs	r3, #0
 800b57e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b580:	e075      	b.n	800b66e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800b582:	4b0e      	ldr	r3, [pc, #56]	@ (800b5bc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b584:	681b      	ldr	r3, [r3, #0]
 800b586:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b58a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b58e:	d102      	bne.n	800b596 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 800b590:	4b0c      	ldr	r3, [pc, #48]	@ (800b5c4 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800b592:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b594:	e06b      	b.n	800b66e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b596:	2300      	movs	r3, #0
 800b598:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b59a:	e068      	b.n	800b66e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800b59c:	4b07      	ldr	r3, [pc, #28]	@ (800b5bc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b59e:	681b      	ldr	r3, [r3, #0]
 800b5a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b5a4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b5a8:	d102      	bne.n	800b5b0 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 800b5aa:	4b07      	ldr	r3, [pc, #28]	@ (800b5c8 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800b5ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b5ae:	e05e      	b.n	800b66e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b5b0:	2300      	movs	r3, #0
 800b5b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b5b4:	e05b      	b.n	800b66e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800b5b6:	2300      	movs	r3, #0
 800b5b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b5ba:	e058      	b.n	800b66e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b5bc:	58024400 	.word	0x58024400
 800b5c0:	03d09000 	.word	0x03d09000
 800b5c4:	003d0900 	.word	0x003d0900
 800b5c8:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800b5cc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b5d0:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 800b5d4:	430b      	orrs	r3, r1
 800b5d6:	d148      	bne.n	800b66a <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800b5d8:	4b27      	ldr	r3, [pc, #156]	@ (800b678 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800b5da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b5dc:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800b5e0:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800b5e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b5e4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b5e8:	d02a      	beq.n	800b640 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 800b5ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b5ec:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b5f0:	d838      	bhi.n	800b664 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 800b5f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b5f4:	2b00      	cmp	r3, #0
 800b5f6:	d004      	beq.n	800b602 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800b5f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b5fa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b5fe:	d00d      	beq.n	800b61c <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 800b600:	e030      	b.n	800b664 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800b602:	4b1d      	ldr	r3, [pc, #116]	@ (800b678 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800b604:	681b      	ldr	r3, [r3, #0]
 800b606:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b60a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b60e:	d102      	bne.n	800b616 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 800b610:	4b1a      	ldr	r3, [pc, #104]	@ (800b67c <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800b612:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b614:	e02b      	b.n	800b66e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b616:	2300      	movs	r3, #0
 800b618:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b61a:	e028      	b.n	800b66e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b61c:	4b16      	ldr	r3, [pc, #88]	@ (800b678 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800b61e:	681b      	ldr	r3, [r3, #0]
 800b620:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b624:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b628:	d107      	bne.n	800b63a <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b62a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b62e:	4618      	mov	r0, r3
 800b630:	f000 fae4 	bl	800bbfc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b634:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b636:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b638:	e019      	b.n	800b66e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b63a:	2300      	movs	r3, #0
 800b63c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b63e:	e016      	b.n	800b66e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b640:	4b0d      	ldr	r3, [pc, #52]	@ (800b678 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800b642:	681b      	ldr	r3, [r3, #0]
 800b644:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b648:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b64c:	d107      	bne.n	800b65e <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b64e:	f107 0318 	add.w	r3, r7, #24
 800b652:	4618      	mov	r0, r3
 800b654:	f000 f82a 	bl	800b6ac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b658:	69fb      	ldr	r3, [r7, #28]
 800b65a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b65c:	e007      	b.n	800b66e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b65e:	2300      	movs	r3, #0
 800b660:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b662:	e004      	b.n	800b66e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800b664:	2300      	movs	r3, #0
 800b666:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b668:	e001      	b.n	800b66e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 800b66a:	2300      	movs	r3, #0
 800b66c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 800b66e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800b670:	4618      	mov	r0, r3
 800b672:	3740      	adds	r7, #64	@ 0x40
 800b674:	46bd      	mov	sp, r7
 800b676:	bd80      	pop	{r7, pc}
 800b678:	58024400 	.word	0x58024400
 800b67c:	017d7840 	.word	0x017d7840

0800b680 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800b680:	b580      	push	{r7, lr}
 800b682:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800b684:	f7fe f816 	bl	80096b4 <HAL_RCC_GetHCLKFreq>
 800b688:	4602      	mov	r2, r0
 800b68a:	4b06      	ldr	r3, [pc, #24]	@ (800b6a4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800b68c:	6a1b      	ldr	r3, [r3, #32]
 800b68e:	091b      	lsrs	r3, r3, #4
 800b690:	f003 0307 	and.w	r3, r3, #7
 800b694:	4904      	ldr	r1, [pc, #16]	@ (800b6a8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800b696:	5ccb      	ldrb	r3, [r1, r3]
 800b698:	f003 031f 	and.w	r3, r3, #31
 800b69c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800b6a0:	4618      	mov	r0, r3
 800b6a2:	bd80      	pop	{r7, pc}
 800b6a4:	58024400 	.word	0x58024400
 800b6a8:	08014030 	.word	0x08014030

0800b6ac <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800b6ac:	b480      	push	{r7}
 800b6ae:	b089      	sub	sp, #36	@ 0x24
 800b6b0:	af00      	add	r7, sp, #0
 800b6b2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b6b4:	4ba1      	ldr	r3, [pc, #644]	@ (800b93c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b6b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b6b8:	f003 0303 	and.w	r3, r3, #3
 800b6bc:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800b6be:	4b9f      	ldr	r3, [pc, #636]	@ (800b93c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b6c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b6c2:	0b1b      	lsrs	r3, r3, #12
 800b6c4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b6c8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800b6ca:	4b9c      	ldr	r3, [pc, #624]	@ (800b93c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b6cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b6ce:	091b      	lsrs	r3, r3, #4
 800b6d0:	f003 0301 	and.w	r3, r3, #1
 800b6d4:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800b6d6:	4b99      	ldr	r3, [pc, #612]	@ (800b93c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b6d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b6da:	08db      	lsrs	r3, r3, #3
 800b6dc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b6e0:	693a      	ldr	r2, [r7, #16]
 800b6e2:	fb02 f303 	mul.w	r3, r2, r3
 800b6e6:	ee07 3a90 	vmov	s15, r3
 800b6ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b6ee:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800b6f2:	697b      	ldr	r3, [r7, #20]
 800b6f4:	2b00      	cmp	r3, #0
 800b6f6:	f000 8111 	beq.w	800b91c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800b6fa:	69bb      	ldr	r3, [r7, #24]
 800b6fc:	2b02      	cmp	r3, #2
 800b6fe:	f000 8083 	beq.w	800b808 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800b702:	69bb      	ldr	r3, [r7, #24]
 800b704:	2b02      	cmp	r3, #2
 800b706:	f200 80a1 	bhi.w	800b84c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800b70a:	69bb      	ldr	r3, [r7, #24]
 800b70c:	2b00      	cmp	r3, #0
 800b70e:	d003      	beq.n	800b718 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800b710:	69bb      	ldr	r3, [r7, #24]
 800b712:	2b01      	cmp	r3, #1
 800b714:	d056      	beq.n	800b7c4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800b716:	e099      	b.n	800b84c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b718:	4b88      	ldr	r3, [pc, #544]	@ (800b93c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b71a:	681b      	ldr	r3, [r3, #0]
 800b71c:	f003 0320 	and.w	r3, r3, #32
 800b720:	2b00      	cmp	r3, #0
 800b722:	d02d      	beq.n	800b780 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b724:	4b85      	ldr	r3, [pc, #532]	@ (800b93c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b726:	681b      	ldr	r3, [r3, #0]
 800b728:	08db      	lsrs	r3, r3, #3
 800b72a:	f003 0303 	and.w	r3, r3, #3
 800b72e:	4a84      	ldr	r2, [pc, #528]	@ (800b940 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800b730:	fa22 f303 	lsr.w	r3, r2, r3
 800b734:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b736:	68bb      	ldr	r3, [r7, #8]
 800b738:	ee07 3a90 	vmov	s15, r3
 800b73c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b740:	697b      	ldr	r3, [r7, #20]
 800b742:	ee07 3a90 	vmov	s15, r3
 800b746:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b74a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b74e:	4b7b      	ldr	r3, [pc, #492]	@ (800b93c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b750:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b752:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b756:	ee07 3a90 	vmov	s15, r3
 800b75a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b75e:	ed97 6a03 	vldr	s12, [r7, #12]
 800b762:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800b944 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b766:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b76a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b76e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b772:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b776:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b77a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800b77e:	e087      	b.n	800b890 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b780:	697b      	ldr	r3, [r7, #20]
 800b782:	ee07 3a90 	vmov	s15, r3
 800b786:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b78a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800b948 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800b78e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b792:	4b6a      	ldr	r3, [pc, #424]	@ (800b93c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b794:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b796:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b79a:	ee07 3a90 	vmov	s15, r3
 800b79e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b7a2:	ed97 6a03 	vldr	s12, [r7, #12]
 800b7a6:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800b944 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b7aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b7ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b7b2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b7b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b7ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b7be:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b7c2:	e065      	b.n	800b890 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b7c4:	697b      	ldr	r3, [r7, #20]
 800b7c6:	ee07 3a90 	vmov	s15, r3
 800b7ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b7ce:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800b94c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800b7d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b7d6:	4b59      	ldr	r3, [pc, #356]	@ (800b93c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b7d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b7da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b7de:	ee07 3a90 	vmov	s15, r3
 800b7e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b7e6:	ed97 6a03 	vldr	s12, [r7, #12]
 800b7ea:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800b944 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b7ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b7f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b7f6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b7fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b7fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b802:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b806:	e043      	b.n	800b890 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b808:	697b      	ldr	r3, [r7, #20]
 800b80a:	ee07 3a90 	vmov	s15, r3
 800b80e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b812:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800b950 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800b816:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b81a:	4b48      	ldr	r3, [pc, #288]	@ (800b93c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b81c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b81e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b822:	ee07 3a90 	vmov	s15, r3
 800b826:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b82a:	ed97 6a03 	vldr	s12, [r7, #12]
 800b82e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800b944 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b832:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b836:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b83a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b83e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b842:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b846:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b84a:	e021      	b.n	800b890 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b84c:	697b      	ldr	r3, [r7, #20]
 800b84e:	ee07 3a90 	vmov	s15, r3
 800b852:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b856:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800b94c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800b85a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b85e:	4b37      	ldr	r3, [pc, #220]	@ (800b93c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b860:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b862:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b866:	ee07 3a90 	vmov	s15, r3
 800b86a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b86e:	ed97 6a03 	vldr	s12, [r7, #12]
 800b872:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800b944 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b876:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b87a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b87e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b882:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b886:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b88a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b88e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800b890:	4b2a      	ldr	r3, [pc, #168]	@ (800b93c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b892:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b894:	0a5b      	lsrs	r3, r3, #9
 800b896:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b89a:	ee07 3a90 	vmov	s15, r3
 800b89e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b8a2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b8a6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b8aa:	edd7 6a07 	vldr	s13, [r7, #28]
 800b8ae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b8b2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b8b6:	ee17 2a90 	vmov	r2, s15
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800b8be:	4b1f      	ldr	r3, [pc, #124]	@ (800b93c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b8c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b8c2:	0c1b      	lsrs	r3, r3, #16
 800b8c4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b8c8:	ee07 3a90 	vmov	s15, r3
 800b8cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b8d0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b8d4:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b8d8:	edd7 6a07 	vldr	s13, [r7, #28]
 800b8dc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b8e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b8e4:	ee17 2a90 	vmov	r2, s15
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800b8ec:	4b13      	ldr	r3, [pc, #76]	@ (800b93c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b8ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b8f0:	0e1b      	lsrs	r3, r3, #24
 800b8f2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b8f6:	ee07 3a90 	vmov	s15, r3
 800b8fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b8fe:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b902:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b906:	edd7 6a07 	vldr	s13, [r7, #28]
 800b90a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b90e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b912:	ee17 2a90 	vmov	r2, s15
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800b91a:	e008      	b.n	800b92e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	2200      	movs	r2, #0
 800b920:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	2200      	movs	r2, #0
 800b926:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	2200      	movs	r2, #0
 800b92c:	609a      	str	r2, [r3, #8]
}
 800b92e:	bf00      	nop
 800b930:	3724      	adds	r7, #36	@ 0x24
 800b932:	46bd      	mov	sp, r7
 800b934:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b938:	4770      	bx	lr
 800b93a:	bf00      	nop
 800b93c:	58024400 	.word	0x58024400
 800b940:	03d09000 	.word	0x03d09000
 800b944:	46000000 	.word	0x46000000
 800b948:	4c742400 	.word	0x4c742400
 800b94c:	4a742400 	.word	0x4a742400
 800b950:	4bbebc20 	.word	0x4bbebc20

0800b954 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800b954:	b480      	push	{r7}
 800b956:	b089      	sub	sp, #36	@ 0x24
 800b958:	af00      	add	r7, sp, #0
 800b95a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b95c:	4ba1      	ldr	r3, [pc, #644]	@ (800bbe4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b95e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b960:	f003 0303 	and.w	r3, r3, #3
 800b964:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800b966:	4b9f      	ldr	r3, [pc, #636]	@ (800bbe4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b968:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b96a:	0d1b      	lsrs	r3, r3, #20
 800b96c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b970:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800b972:	4b9c      	ldr	r3, [pc, #624]	@ (800bbe4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b974:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b976:	0a1b      	lsrs	r3, r3, #8
 800b978:	f003 0301 	and.w	r3, r3, #1
 800b97c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800b97e:	4b99      	ldr	r3, [pc, #612]	@ (800bbe4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b980:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b982:	08db      	lsrs	r3, r3, #3
 800b984:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b988:	693a      	ldr	r2, [r7, #16]
 800b98a:	fb02 f303 	mul.w	r3, r2, r3
 800b98e:	ee07 3a90 	vmov	s15, r3
 800b992:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b996:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800b99a:	697b      	ldr	r3, [r7, #20]
 800b99c:	2b00      	cmp	r3, #0
 800b99e:	f000 8111 	beq.w	800bbc4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800b9a2:	69bb      	ldr	r3, [r7, #24]
 800b9a4:	2b02      	cmp	r3, #2
 800b9a6:	f000 8083 	beq.w	800bab0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800b9aa:	69bb      	ldr	r3, [r7, #24]
 800b9ac:	2b02      	cmp	r3, #2
 800b9ae:	f200 80a1 	bhi.w	800baf4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800b9b2:	69bb      	ldr	r3, [r7, #24]
 800b9b4:	2b00      	cmp	r3, #0
 800b9b6:	d003      	beq.n	800b9c0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800b9b8:	69bb      	ldr	r3, [r7, #24]
 800b9ba:	2b01      	cmp	r3, #1
 800b9bc:	d056      	beq.n	800ba6c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800b9be:	e099      	b.n	800baf4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b9c0:	4b88      	ldr	r3, [pc, #544]	@ (800bbe4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b9c2:	681b      	ldr	r3, [r3, #0]
 800b9c4:	f003 0320 	and.w	r3, r3, #32
 800b9c8:	2b00      	cmp	r3, #0
 800b9ca:	d02d      	beq.n	800ba28 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b9cc:	4b85      	ldr	r3, [pc, #532]	@ (800bbe4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b9ce:	681b      	ldr	r3, [r3, #0]
 800b9d0:	08db      	lsrs	r3, r3, #3
 800b9d2:	f003 0303 	and.w	r3, r3, #3
 800b9d6:	4a84      	ldr	r2, [pc, #528]	@ (800bbe8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800b9d8:	fa22 f303 	lsr.w	r3, r2, r3
 800b9dc:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b9de:	68bb      	ldr	r3, [r7, #8]
 800b9e0:	ee07 3a90 	vmov	s15, r3
 800b9e4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b9e8:	697b      	ldr	r3, [r7, #20]
 800b9ea:	ee07 3a90 	vmov	s15, r3
 800b9ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b9f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b9f6:	4b7b      	ldr	r3, [pc, #492]	@ (800bbe4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b9f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b9fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b9fe:	ee07 3a90 	vmov	s15, r3
 800ba02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ba06:	ed97 6a03 	vldr	s12, [r7, #12]
 800ba0a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800bbec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ba0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ba12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ba16:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ba1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ba1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ba22:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800ba26:	e087      	b.n	800bb38 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ba28:	697b      	ldr	r3, [r7, #20]
 800ba2a:	ee07 3a90 	vmov	s15, r3
 800ba2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ba32:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800bbf0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800ba36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ba3a:	4b6a      	ldr	r3, [pc, #424]	@ (800bbe4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ba3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ba3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ba42:	ee07 3a90 	vmov	s15, r3
 800ba46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ba4a:	ed97 6a03 	vldr	s12, [r7, #12]
 800ba4e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800bbec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ba52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ba56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ba5a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ba5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ba62:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ba66:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ba6a:	e065      	b.n	800bb38 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ba6c:	697b      	ldr	r3, [r7, #20]
 800ba6e:	ee07 3a90 	vmov	s15, r3
 800ba72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ba76:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800bbf4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800ba7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ba7e:	4b59      	ldr	r3, [pc, #356]	@ (800bbe4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ba80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ba82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ba86:	ee07 3a90 	vmov	s15, r3
 800ba8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ba8e:	ed97 6a03 	vldr	s12, [r7, #12]
 800ba92:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800bbec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ba96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ba9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ba9e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800baa2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800baa6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800baaa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800baae:	e043      	b.n	800bb38 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800bab0:	697b      	ldr	r3, [r7, #20]
 800bab2:	ee07 3a90 	vmov	s15, r3
 800bab6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800baba:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800bbf8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800babe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bac2:	4b48      	ldr	r3, [pc, #288]	@ (800bbe4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bac4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bac6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800baca:	ee07 3a90 	vmov	s15, r3
 800bace:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bad2:	ed97 6a03 	vldr	s12, [r7, #12]
 800bad6:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800bbec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800bada:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bade:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bae2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bae6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800baea:	ee67 7a27 	vmul.f32	s15, s14, s15
 800baee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800baf2:	e021      	b.n	800bb38 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800baf4:	697b      	ldr	r3, [r7, #20]
 800baf6:	ee07 3a90 	vmov	s15, r3
 800bafa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bafe:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800bbf4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800bb02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bb06:	4b37      	ldr	r3, [pc, #220]	@ (800bbe4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bb08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bb0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bb0e:	ee07 3a90 	vmov	s15, r3
 800bb12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bb16:	ed97 6a03 	vldr	s12, [r7, #12]
 800bb1a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800bbec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800bb1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bb22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bb26:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bb2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bb2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bb32:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bb36:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800bb38:	4b2a      	ldr	r3, [pc, #168]	@ (800bbe4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bb3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bb3c:	0a5b      	lsrs	r3, r3, #9
 800bb3e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bb42:	ee07 3a90 	vmov	s15, r3
 800bb46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bb4a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800bb4e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bb52:	edd7 6a07 	vldr	s13, [r7, #28]
 800bb56:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bb5a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bb5e:	ee17 2a90 	vmov	r2, s15
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800bb66:	4b1f      	ldr	r3, [pc, #124]	@ (800bbe4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bb68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bb6a:	0c1b      	lsrs	r3, r3, #16
 800bb6c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bb70:	ee07 3a90 	vmov	s15, r3
 800bb74:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bb78:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800bb7c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bb80:	edd7 6a07 	vldr	s13, [r7, #28]
 800bb84:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bb88:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bb8c:	ee17 2a90 	vmov	r2, s15
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800bb94:	4b13      	ldr	r3, [pc, #76]	@ (800bbe4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bb96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bb98:	0e1b      	lsrs	r3, r3, #24
 800bb9a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bb9e:	ee07 3a90 	vmov	s15, r3
 800bba2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bba6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800bbaa:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bbae:	edd7 6a07 	vldr	s13, [r7, #28]
 800bbb2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bbb6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bbba:	ee17 2a90 	vmov	r2, s15
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800bbc2:	e008      	b.n	800bbd6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	2200      	movs	r2, #0
 800bbc8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	2200      	movs	r2, #0
 800bbce:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	2200      	movs	r2, #0
 800bbd4:	609a      	str	r2, [r3, #8]
}
 800bbd6:	bf00      	nop
 800bbd8:	3724      	adds	r7, #36	@ 0x24
 800bbda:	46bd      	mov	sp, r7
 800bbdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbe0:	4770      	bx	lr
 800bbe2:	bf00      	nop
 800bbe4:	58024400 	.word	0x58024400
 800bbe8:	03d09000 	.word	0x03d09000
 800bbec:	46000000 	.word	0x46000000
 800bbf0:	4c742400 	.word	0x4c742400
 800bbf4:	4a742400 	.word	0x4a742400
 800bbf8:	4bbebc20 	.word	0x4bbebc20

0800bbfc <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800bbfc:	b480      	push	{r7}
 800bbfe:	b089      	sub	sp, #36	@ 0x24
 800bc00:	af00      	add	r7, sp, #0
 800bc02:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800bc04:	4ba0      	ldr	r3, [pc, #640]	@ (800be88 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bc06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bc08:	f003 0303 	and.w	r3, r3, #3
 800bc0c:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800bc0e:	4b9e      	ldr	r3, [pc, #632]	@ (800be88 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bc10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bc12:	091b      	lsrs	r3, r3, #4
 800bc14:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800bc18:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800bc1a:	4b9b      	ldr	r3, [pc, #620]	@ (800be88 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bc1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bc1e:	f003 0301 	and.w	r3, r3, #1
 800bc22:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800bc24:	4b98      	ldr	r3, [pc, #608]	@ (800be88 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bc26:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bc28:	08db      	lsrs	r3, r3, #3
 800bc2a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800bc2e:	693a      	ldr	r2, [r7, #16]
 800bc30:	fb02 f303 	mul.w	r3, r2, r3
 800bc34:	ee07 3a90 	vmov	s15, r3
 800bc38:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bc3c:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800bc40:	697b      	ldr	r3, [r7, #20]
 800bc42:	2b00      	cmp	r3, #0
 800bc44:	f000 8111 	beq.w	800be6a <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800bc48:	69bb      	ldr	r3, [r7, #24]
 800bc4a:	2b02      	cmp	r3, #2
 800bc4c:	f000 8083 	beq.w	800bd56 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800bc50:	69bb      	ldr	r3, [r7, #24]
 800bc52:	2b02      	cmp	r3, #2
 800bc54:	f200 80a1 	bhi.w	800bd9a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800bc58:	69bb      	ldr	r3, [r7, #24]
 800bc5a:	2b00      	cmp	r3, #0
 800bc5c:	d003      	beq.n	800bc66 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800bc5e:	69bb      	ldr	r3, [r7, #24]
 800bc60:	2b01      	cmp	r3, #1
 800bc62:	d056      	beq.n	800bd12 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800bc64:	e099      	b.n	800bd9a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bc66:	4b88      	ldr	r3, [pc, #544]	@ (800be88 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bc68:	681b      	ldr	r3, [r3, #0]
 800bc6a:	f003 0320 	and.w	r3, r3, #32
 800bc6e:	2b00      	cmp	r3, #0
 800bc70:	d02d      	beq.n	800bcce <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bc72:	4b85      	ldr	r3, [pc, #532]	@ (800be88 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bc74:	681b      	ldr	r3, [r3, #0]
 800bc76:	08db      	lsrs	r3, r3, #3
 800bc78:	f003 0303 	and.w	r3, r3, #3
 800bc7c:	4a83      	ldr	r2, [pc, #524]	@ (800be8c <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800bc7e:	fa22 f303 	lsr.w	r3, r2, r3
 800bc82:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800bc84:	68bb      	ldr	r3, [r7, #8]
 800bc86:	ee07 3a90 	vmov	s15, r3
 800bc8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bc8e:	697b      	ldr	r3, [r7, #20]
 800bc90:	ee07 3a90 	vmov	s15, r3
 800bc94:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bc98:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bc9c:	4b7a      	ldr	r3, [pc, #488]	@ (800be88 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bc9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bca0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bca4:	ee07 3a90 	vmov	s15, r3
 800bca8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bcac:	ed97 6a03 	vldr	s12, [r7, #12]
 800bcb0:	eddf 5a77 	vldr	s11, [pc, #476]	@ 800be90 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800bcb4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bcb8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bcbc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bcc0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bcc4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bcc8:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800bccc:	e087      	b.n	800bdde <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800bcce:	697b      	ldr	r3, [r7, #20]
 800bcd0:	ee07 3a90 	vmov	s15, r3
 800bcd4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bcd8:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 800be94 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800bcdc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bce0:	4b69      	ldr	r3, [pc, #420]	@ (800be88 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bce2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bce4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bce8:	ee07 3a90 	vmov	s15, r3
 800bcec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bcf0:	ed97 6a03 	vldr	s12, [r7, #12]
 800bcf4:	eddf 5a66 	vldr	s11, [pc, #408]	@ 800be90 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800bcf8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bcfc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bd00:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bd04:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bd08:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bd0c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bd10:	e065      	b.n	800bdde <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800bd12:	697b      	ldr	r3, [r7, #20]
 800bd14:	ee07 3a90 	vmov	s15, r3
 800bd18:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bd1c:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 800be98 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800bd20:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bd24:	4b58      	ldr	r3, [pc, #352]	@ (800be88 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bd26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bd28:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bd2c:	ee07 3a90 	vmov	s15, r3
 800bd30:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bd34:	ed97 6a03 	vldr	s12, [r7, #12]
 800bd38:	eddf 5a55 	vldr	s11, [pc, #340]	@ 800be90 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800bd3c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bd40:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bd44:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bd48:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bd4c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bd50:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bd54:	e043      	b.n	800bdde <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800bd56:	697b      	ldr	r3, [r7, #20]
 800bd58:	ee07 3a90 	vmov	s15, r3
 800bd5c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bd60:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 800be9c <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800bd64:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bd68:	4b47      	ldr	r3, [pc, #284]	@ (800be88 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bd6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bd6c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bd70:	ee07 3a90 	vmov	s15, r3
 800bd74:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bd78:	ed97 6a03 	vldr	s12, [r7, #12]
 800bd7c:	eddf 5a44 	vldr	s11, [pc, #272]	@ 800be90 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800bd80:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bd84:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bd88:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bd8c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bd90:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bd94:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bd98:	e021      	b.n	800bdde <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800bd9a:	697b      	ldr	r3, [r7, #20]
 800bd9c:	ee07 3a90 	vmov	s15, r3
 800bda0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bda4:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 800be94 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800bda8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bdac:	4b36      	ldr	r3, [pc, #216]	@ (800be88 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bdae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bdb0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bdb4:	ee07 3a90 	vmov	s15, r3
 800bdb8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bdbc:	ed97 6a03 	vldr	s12, [r7, #12]
 800bdc0:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800be90 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800bdc4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bdc8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bdcc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bdd0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bdd4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bdd8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bddc:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800bdde:	4b2a      	ldr	r3, [pc, #168]	@ (800be88 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bde0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bde2:	0a5b      	lsrs	r3, r3, #9
 800bde4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bde8:	ee07 3a90 	vmov	s15, r3
 800bdec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bdf0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800bdf4:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bdf8:	edd7 6a07 	vldr	s13, [r7, #28]
 800bdfc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800be00:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800be04:	ee17 2a90 	vmov	r2, s15
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800be0c:	4b1e      	ldr	r3, [pc, #120]	@ (800be88 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800be0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800be10:	0c1b      	lsrs	r3, r3, #16
 800be12:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800be16:	ee07 3a90 	vmov	s15, r3
 800be1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800be1e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800be22:	ee37 7a87 	vadd.f32	s14, s15, s14
 800be26:	edd7 6a07 	vldr	s13, [r7, #28]
 800be2a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800be2e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800be32:	ee17 2a90 	vmov	r2, s15
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800be3a:	4b13      	ldr	r3, [pc, #76]	@ (800be88 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800be3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800be3e:	0e1b      	lsrs	r3, r3, #24
 800be40:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800be44:	ee07 3a90 	vmov	s15, r3
 800be48:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800be4c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800be50:	ee37 7a87 	vadd.f32	s14, s15, s14
 800be54:	edd7 6a07 	vldr	s13, [r7, #28]
 800be58:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800be5c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800be60:	ee17 2a90 	vmov	r2, s15
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800be68:	e008      	b.n	800be7c <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	2200      	movs	r2, #0
 800be6e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	2200      	movs	r2, #0
 800be74:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	2200      	movs	r2, #0
 800be7a:	609a      	str	r2, [r3, #8]
}
 800be7c:	bf00      	nop
 800be7e:	3724      	adds	r7, #36	@ 0x24
 800be80:	46bd      	mov	sp, r7
 800be82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be86:	4770      	bx	lr
 800be88:	58024400 	.word	0x58024400
 800be8c:	03d09000 	.word	0x03d09000
 800be90:	46000000 	.word	0x46000000
 800be94:	4c742400 	.word	0x4c742400
 800be98:	4a742400 	.word	0x4a742400
 800be9c:	4bbebc20 	.word	0x4bbebc20

0800bea0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800bea0:	b580      	push	{r7, lr}
 800bea2:	b084      	sub	sp, #16
 800bea4:	af00      	add	r7, sp, #0
 800bea6:	6078      	str	r0, [r7, #4]
 800bea8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800beaa:	2300      	movs	r3, #0
 800beac:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800beae:	4b53      	ldr	r3, [pc, #332]	@ (800bffc <RCCEx_PLL2_Config+0x15c>)
 800beb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800beb2:	f003 0303 	and.w	r3, r3, #3
 800beb6:	2b03      	cmp	r3, #3
 800beb8:	d101      	bne.n	800bebe <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800beba:	2301      	movs	r3, #1
 800bebc:	e099      	b.n	800bff2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800bebe:	4b4f      	ldr	r3, [pc, #316]	@ (800bffc <RCCEx_PLL2_Config+0x15c>)
 800bec0:	681b      	ldr	r3, [r3, #0]
 800bec2:	4a4e      	ldr	r2, [pc, #312]	@ (800bffc <RCCEx_PLL2_Config+0x15c>)
 800bec4:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800bec8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800beca:	f7fa fbd7 	bl	800667c <HAL_GetTick>
 800bece:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800bed0:	e008      	b.n	800bee4 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800bed2:	f7fa fbd3 	bl	800667c <HAL_GetTick>
 800bed6:	4602      	mov	r2, r0
 800bed8:	68bb      	ldr	r3, [r7, #8]
 800beda:	1ad3      	subs	r3, r2, r3
 800bedc:	2b02      	cmp	r3, #2
 800bede:	d901      	bls.n	800bee4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800bee0:	2303      	movs	r3, #3
 800bee2:	e086      	b.n	800bff2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800bee4:	4b45      	ldr	r3, [pc, #276]	@ (800bffc <RCCEx_PLL2_Config+0x15c>)
 800bee6:	681b      	ldr	r3, [r3, #0]
 800bee8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800beec:	2b00      	cmp	r3, #0
 800beee:	d1f0      	bne.n	800bed2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800bef0:	4b42      	ldr	r3, [pc, #264]	@ (800bffc <RCCEx_PLL2_Config+0x15c>)
 800bef2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bef4:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	681b      	ldr	r3, [r3, #0]
 800befc:	031b      	lsls	r3, r3, #12
 800befe:	493f      	ldr	r1, [pc, #252]	@ (800bffc <RCCEx_PLL2_Config+0x15c>)
 800bf00:	4313      	orrs	r3, r2
 800bf02:	628b      	str	r3, [r1, #40]	@ 0x28
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	685b      	ldr	r3, [r3, #4]
 800bf08:	3b01      	subs	r3, #1
 800bf0a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	689b      	ldr	r3, [r3, #8]
 800bf12:	3b01      	subs	r3, #1
 800bf14:	025b      	lsls	r3, r3, #9
 800bf16:	b29b      	uxth	r3, r3
 800bf18:	431a      	orrs	r2, r3
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	68db      	ldr	r3, [r3, #12]
 800bf1e:	3b01      	subs	r3, #1
 800bf20:	041b      	lsls	r3, r3, #16
 800bf22:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800bf26:	431a      	orrs	r2, r3
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	691b      	ldr	r3, [r3, #16]
 800bf2c:	3b01      	subs	r3, #1
 800bf2e:	061b      	lsls	r3, r3, #24
 800bf30:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800bf34:	4931      	ldr	r1, [pc, #196]	@ (800bffc <RCCEx_PLL2_Config+0x15c>)
 800bf36:	4313      	orrs	r3, r2
 800bf38:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800bf3a:	4b30      	ldr	r3, [pc, #192]	@ (800bffc <RCCEx_PLL2_Config+0x15c>)
 800bf3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bf3e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	695b      	ldr	r3, [r3, #20]
 800bf46:	492d      	ldr	r1, [pc, #180]	@ (800bffc <RCCEx_PLL2_Config+0x15c>)
 800bf48:	4313      	orrs	r3, r2
 800bf4a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800bf4c:	4b2b      	ldr	r3, [pc, #172]	@ (800bffc <RCCEx_PLL2_Config+0x15c>)
 800bf4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bf50:	f023 0220 	bic.w	r2, r3, #32
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	699b      	ldr	r3, [r3, #24]
 800bf58:	4928      	ldr	r1, [pc, #160]	@ (800bffc <RCCEx_PLL2_Config+0x15c>)
 800bf5a:	4313      	orrs	r3, r2
 800bf5c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800bf5e:	4b27      	ldr	r3, [pc, #156]	@ (800bffc <RCCEx_PLL2_Config+0x15c>)
 800bf60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bf62:	4a26      	ldr	r2, [pc, #152]	@ (800bffc <RCCEx_PLL2_Config+0x15c>)
 800bf64:	f023 0310 	bic.w	r3, r3, #16
 800bf68:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800bf6a:	4b24      	ldr	r3, [pc, #144]	@ (800bffc <RCCEx_PLL2_Config+0x15c>)
 800bf6c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800bf6e:	4b24      	ldr	r3, [pc, #144]	@ (800c000 <RCCEx_PLL2_Config+0x160>)
 800bf70:	4013      	ands	r3, r2
 800bf72:	687a      	ldr	r2, [r7, #4]
 800bf74:	69d2      	ldr	r2, [r2, #28]
 800bf76:	00d2      	lsls	r2, r2, #3
 800bf78:	4920      	ldr	r1, [pc, #128]	@ (800bffc <RCCEx_PLL2_Config+0x15c>)
 800bf7a:	4313      	orrs	r3, r2
 800bf7c:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800bf7e:	4b1f      	ldr	r3, [pc, #124]	@ (800bffc <RCCEx_PLL2_Config+0x15c>)
 800bf80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bf82:	4a1e      	ldr	r2, [pc, #120]	@ (800bffc <RCCEx_PLL2_Config+0x15c>)
 800bf84:	f043 0310 	orr.w	r3, r3, #16
 800bf88:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800bf8a:	683b      	ldr	r3, [r7, #0]
 800bf8c:	2b00      	cmp	r3, #0
 800bf8e:	d106      	bne.n	800bf9e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800bf90:	4b1a      	ldr	r3, [pc, #104]	@ (800bffc <RCCEx_PLL2_Config+0x15c>)
 800bf92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bf94:	4a19      	ldr	r2, [pc, #100]	@ (800bffc <RCCEx_PLL2_Config+0x15c>)
 800bf96:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800bf9a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800bf9c:	e00f      	b.n	800bfbe <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800bf9e:	683b      	ldr	r3, [r7, #0]
 800bfa0:	2b01      	cmp	r3, #1
 800bfa2:	d106      	bne.n	800bfb2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800bfa4:	4b15      	ldr	r3, [pc, #84]	@ (800bffc <RCCEx_PLL2_Config+0x15c>)
 800bfa6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bfa8:	4a14      	ldr	r2, [pc, #80]	@ (800bffc <RCCEx_PLL2_Config+0x15c>)
 800bfaa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800bfae:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800bfb0:	e005      	b.n	800bfbe <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800bfb2:	4b12      	ldr	r3, [pc, #72]	@ (800bffc <RCCEx_PLL2_Config+0x15c>)
 800bfb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bfb6:	4a11      	ldr	r2, [pc, #68]	@ (800bffc <RCCEx_PLL2_Config+0x15c>)
 800bfb8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800bfbc:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800bfbe:	4b0f      	ldr	r3, [pc, #60]	@ (800bffc <RCCEx_PLL2_Config+0x15c>)
 800bfc0:	681b      	ldr	r3, [r3, #0]
 800bfc2:	4a0e      	ldr	r2, [pc, #56]	@ (800bffc <RCCEx_PLL2_Config+0x15c>)
 800bfc4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800bfc8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bfca:	f7fa fb57 	bl	800667c <HAL_GetTick>
 800bfce:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800bfd0:	e008      	b.n	800bfe4 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800bfd2:	f7fa fb53 	bl	800667c <HAL_GetTick>
 800bfd6:	4602      	mov	r2, r0
 800bfd8:	68bb      	ldr	r3, [r7, #8]
 800bfda:	1ad3      	subs	r3, r2, r3
 800bfdc:	2b02      	cmp	r3, #2
 800bfde:	d901      	bls.n	800bfe4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800bfe0:	2303      	movs	r3, #3
 800bfe2:	e006      	b.n	800bff2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800bfe4:	4b05      	ldr	r3, [pc, #20]	@ (800bffc <RCCEx_PLL2_Config+0x15c>)
 800bfe6:	681b      	ldr	r3, [r3, #0]
 800bfe8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800bfec:	2b00      	cmp	r3, #0
 800bfee:	d0f0      	beq.n	800bfd2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800bff0:	7bfb      	ldrb	r3, [r7, #15]
}
 800bff2:	4618      	mov	r0, r3
 800bff4:	3710      	adds	r7, #16
 800bff6:	46bd      	mov	sp, r7
 800bff8:	bd80      	pop	{r7, pc}
 800bffa:	bf00      	nop
 800bffc:	58024400 	.word	0x58024400
 800c000:	ffff0007 	.word	0xffff0007

0800c004 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800c004:	b580      	push	{r7, lr}
 800c006:	b084      	sub	sp, #16
 800c008:	af00      	add	r7, sp, #0
 800c00a:	6078      	str	r0, [r7, #4]
 800c00c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c00e:	2300      	movs	r3, #0
 800c010:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800c012:	4b53      	ldr	r3, [pc, #332]	@ (800c160 <RCCEx_PLL3_Config+0x15c>)
 800c014:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c016:	f003 0303 	and.w	r3, r3, #3
 800c01a:	2b03      	cmp	r3, #3
 800c01c:	d101      	bne.n	800c022 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800c01e:	2301      	movs	r3, #1
 800c020:	e099      	b.n	800c156 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800c022:	4b4f      	ldr	r3, [pc, #316]	@ (800c160 <RCCEx_PLL3_Config+0x15c>)
 800c024:	681b      	ldr	r3, [r3, #0]
 800c026:	4a4e      	ldr	r2, [pc, #312]	@ (800c160 <RCCEx_PLL3_Config+0x15c>)
 800c028:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800c02c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c02e:	f7fa fb25 	bl	800667c <HAL_GetTick>
 800c032:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800c034:	e008      	b.n	800c048 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800c036:	f7fa fb21 	bl	800667c <HAL_GetTick>
 800c03a:	4602      	mov	r2, r0
 800c03c:	68bb      	ldr	r3, [r7, #8]
 800c03e:	1ad3      	subs	r3, r2, r3
 800c040:	2b02      	cmp	r3, #2
 800c042:	d901      	bls.n	800c048 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800c044:	2303      	movs	r3, #3
 800c046:	e086      	b.n	800c156 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800c048:	4b45      	ldr	r3, [pc, #276]	@ (800c160 <RCCEx_PLL3_Config+0x15c>)
 800c04a:	681b      	ldr	r3, [r3, #0]
 800c04c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800c050:	2b00      	cmp	r3, #0
 800c052:	d1f0      	bne.n	800c036 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800c054:	4b42      	ldr	r3, [pc, #264]	@ (800c160 <RCCEx_PLL3_Config+0x15c>)
 800c056:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c058:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	681b      	ldr	r3, [r3, #0]
 800c060:	051b      	lsls	r3, r3, #20
 800c062:	493f      	ldr	r1, [pc, #252]	@ (800c160 <RCCEx_PLL3_Config+0x15c>)
 800c064:	4313      	orrs	r3, r2
 800c066:	628b      	str	r3, [r1, #40]	@ 0x28
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	685b      	ldr	r3, [r3, #4]
 800c06c:	3b01      	subs	r3, #1
 800c06e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	689b      	ldr	r3, [r3, #8]
 800c076:	3b01      	subs	r3, #1
 800c078:	025b      	lsls	r3, r3, #9
 800c07a:	b29b      	uxth	r3, r3
 800c07c:	431a      	orrs	r2, r3
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	68db      	ldr	r3, [r3, #12]
 800c082:	3b01      	subs	r3, #1
 800c084:	041b      	lsls	r3, r3, #16
 800c086:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800c08a:	431a      	orrs	r2, r3
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	691b      	ldr	r3, [r3, #16]
 800c090:	3b01      	subs	r3, #1
 800c092:	061b      	lsls	r3, r3, #24
 800c094:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800c098:	4931      	ldr	r1, [pc, #196]	@ (800c160 <RCCEx_PLL3_Config+0x15c>)
 800c09a:	4313      	orrs	r3, r2
 800c09c:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800c09e:	4b30      	ldr	r3, [pc, #192]	@ (800c160 <RCCEx_PLL3_Config+0x15c>)
 800c0a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c0a2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	695b      	ldr	r3, [r3, #20]
 800c0aa:	492d      	ldr	r1, [pc, #180]	@ (800c160 <RCCEx_PLL3_Config+0x15c>)
 800c0ac:	4313      	orrs	r3, r2
 800c0ae:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800c0b0:	4b2b      	ldr	r3, [pc, #172]	@ (800c160 <RCCEx_PLL3_Config+0x15c>)
 800c0b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c0b4:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	699b      	ldr	r3, [r3, #24]
 800c0bc:	4928      	ldr	r1, [pc, #160]	@ (800c160 <RCCEx_PLL3_Config+0x15c>)
 800c0be:	4313      	orrs	r3, r2
 800c0c0:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800c0c2:	4b27      	ldr	r3, [pc, #156]	@ (800c160 <RCCEx_PLL3_Config+0x15c>)
 800c0c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c0c6:	4a26      	ldr	r2, [pc, #152]	@ (800c160 <RCCEx_PLL3_Config+0x15c>)
 800c0c8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c0cc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800c0ce:	4b24      	ldr	r3, [pc, #144]	@ (800c160 <RCCEx_PLL3_Config+0x15c>)
 800c0d0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800c0d2:	4b24      	ldr	r3, [pc, #144]	@ (800c164 <RCCEx_PLL3_Config+0x160>)
 800c0d4:	4013      	ands	r3, r2
 800c0d6:	687a      	ldr	r2, [r7, #4]
 800c0d8:	69d2      	ldr	r2, [r2, #28]
 800c0da:	00d2      	lsls	r2, r2, #3
 800c0dc:	4920      	ldr	r1, [pc, #128]	@ (800c160 <RCCEx_PLL3_Config+0x15c>)
 800c0de:	4313      	orrs	r3, r2
 800c0e0:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800c0e2:	4b1f      	ldr	r3, [pc, #124]	@ (800c160 <RCCEx_PLL3_Config+0x15c>)
 800c0e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c0e6:	4a1e      	ldr	r2, [pc, #120]	@ (800c160 <RCCEx_PLL3_Config+0x15c>)
 800c0e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800c0ec:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800c0ee:	683b      	ldr	r3, [r7, #0]
 800c0f0:	2b00      	cmp	r3, #0
 800c0f2:	d106      	bne.n	800c102 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800c0f4:	4b1a      	ldr	r3, [pc, #104]	@ (800c160 <RCCEx_PLL3_Config+0x15c>)
 800c0f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c0f8:	4a19      	ldr	r2, [pc, #100]	@ (800c160 <RCCEx_PLL3_Config+0x15c>)
 800c0fa:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800c0fe:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800c100:	e00f      	b.n	800c122 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800c102:	683b      	ldr	r3, [r7, #0]
 800c104:	2b01      	cmp	r3, #1
 800c106:	d106      	bne.n	800c116 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800c108:	4b15      	ldr	r3, [pc, #84]	@ (800c160 <RCCEx_PLL3_Config+0x15c>)
 800c10a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c10c:	4a14      	ldr	r2, [pc, #80]	@ (800c160 <RCCEx_PLL3_Config+0x15c>)
 800c10e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800c112:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800c114:	e005      	b.n	800c122 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800c116:	4b12      	ldr	r3, [pc, #72]	@ (800c160 <RCCEx_PLL3_Config+0x15c>)
 800c118:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c11a:	4a11      	ldr	r2, [pc, #68]	@ (800c160 <RCCEx_PLL3_Config+0x15c>)
 800c11c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800c120:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800c122:	4b0f      	ldr	r3, [pc, #60]	@ (800c160 <RCCEx_PLL3_Config+0x15c>)
 800c124:	681b      	ldr	r3, [r3, #0]
 800c126:	4a0e      	ldr	r2, [pc, #56]	@ (800c160 <RCCEx_PLL3_Config+0x15c>)
 800c128:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800c12c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c12e:	f7fa faa5 	bl	800667c <HAL_GetTick>
 800c132:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800c134:	e008      	b.n	800c148 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800c136:	f7fa faa1 	bl	800667c <HAL_GetTick>
 800c13a:	4602      	mov	r2, r0
 800c13c:	68bb      	ldr	r3, [r7, #8]
 800c13e:	1ad3      	subs	r3, r2, r3
 800c140:	2b02      	cmp	r3, #2
 800c142:	d901      	bls.n	800c148 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800c144:	2303      	movs	r3, #3
 800c146:	e006      	b.n	800c156 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800c148:	4b05      	ldr	r3, [pc, #20]	@ (800c160 <RCCEx_PLL3_Config+0x15c>)
 800c14a:	681b      	ldr	r3, [r3, #0]
 800c14c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800c150:	2b00      	cmp	r3, #0
 800c152:	d0f0      	beq.n	800c136 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800c154:	7bfb      	ldrb	r3, [r7, #15]
}
 800c156:	4618      	mov	r0, r3
 800c158:	3710      	adds	r7, #16
 800c15a:	46bd      	mov	sp, r7
 800c15c:	bd80      	pop	{r7, pc}
 800c15e:	bf00      	nop
 800c160:	58024400 	.word	0x58024400
 800c164:	ffff0007 	.word	0xffff0007

0800c168 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800c168:	b580      	push	{r7, lr}
 800c16a:	b08a      	sub	sp, #40	@ 0x28
 800c16c:	af00      	add	r7, sp, #0
 800c16e:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	2b00      	cmp	r3, #0
 800c174:	d101      	bne.n	800c17a <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800c176:	2301      	movs	r3, #1
 800c178:	e075      	b.n	800c266 <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800c180:	b2db      	uxtb	r3, r3
 800c182:	2b00      	cmp	r3, #0
 800c184:	d105      	bne.n	800c192 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	2200      	movs	r2, #0
 800c18a:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800c18c:	6878      	ldr	r0, [r7, #4]
 800c18e:	f7f8 fa15 	bl	80045bc <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	2204      	movs	r2, #4
 800c196:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800c19a:	6878      	ldr	r0, [r7, #4]
 800c19c:	f000 f868 	bl	800c270 <HAL_SD_InitCard>
 800c1a0:	4603      	mov	r3, r0
 800c1a2:	2b00      	cmp	r3, #0
 800c1a4:	d001      	beq.n	800c1aa <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800c1a6:	2301      	movs	r3, #1
 800c1a8:	e05d      	b.n	800c266 <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 800c1aa:	f107 0308 	add.w	r3, r7, #8
 800c1ae:	4619      	mov	r1, r3
 800c1b0:	6878      	ldr	r0, [r7, #4]
 800c1b2:	f000 fdaf 	bl	800cd14 <HAL_SD_GetCardStatus>
 800c1b6:	4603      	mov	r3, r0
 800c1b8:	2b00      	cmp	r3, #0
 800c1ba:	d001      	beq.n	800c1c0 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 800c1bc:	2301      	movs	r3, #1
 800c1be:	e052      	b.n	800c266 <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 800c1c0:	7e3b      	ldrb	r3, [r7, #24]
 800c1c2:	b2db      	uxtb	r3, r3
 800c1c4:	627b      	str	r3, [r7, #36]	@ 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 800c1c6:	7e7b      	ldrb	r3, [r7, #25]
 800c1c8:	b2db      	uxtb	r3, r3
 800c1ca:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c1d0:	2b01      	cmp	r3, #1
 800c1d2:	d10a      	bne.n	800c1ea <HAL_SD_Init+0x82>
 800c1d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c1d6:	2b00      	cmp	r3, #0
 800c1d8:	d102      	bne.n	800c1e0 <HAL_SD_Init+0x78>
 800c1da:	6a3b      	ldr	r3, [r7, #32]
 800c1dc:	2b00      	cmp	r3, #0
 800c1de:	d004      	beq.n	800c1ea <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c1e6:	659a      	str	r2, [r3, #88]	@ 0x58
 800c1e8:	e00b      	b.n	800c202 <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c1ee:	2b01      	cmp	r3, #1
 800c1f0:	d104      	bne.n	800c1fc <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800c1f8:	659a      	str	r2, [r3, #88]	@ 0x58
 800c1fa:	e002      	b.n	800c202 <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	2200      	movs	r2, #0
 800c200:	659a      	str	r2, [r3, #88]	@ 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	68db      	ldr	r3, [r3, #12]
 800c206:	4619      	mov	r1, r3
 800c208:	6878      	ldr	r0, [r7, #4]
 800c20a:	f000 fe6d 	bl	800cee8 <HAL_SD_ConfigWideBusOperation>
 800c20e:	4603      	mov	r3, r0
 800c210:	2b00      	cmp	r3, #0
 800c212:	d001      	beq.n	800c218 <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 800c214:	2301      	movs	r3, #1
 800c216:	e026      	b.n	800c266 <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 800c218:	f7fa fa30 	bl	800667c <HAL_GetTick>
 800c21c:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800c21e:	e011      	b.n	800c244 <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800c220:	f7fa fa2c 	bl	800667c <HAL_GetTick>
 800c224:	4602      	mov	r2, r0
 800c226:	69fb      	ldr	r3, [r7, #28]
 800c228:	1ad3      	subs	r3, r2, r3
 800c22a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c22e:	d109      	bne.n	800c244 <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800c236:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	2201      	movs	r2, #1
 800c23c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      return HAL_TIMEOUT;
 800c240:	2303      	movs	r3, #3
 800c242:	e010      	b.n	800c266 <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800c244:	6878      	ldr	r0, [r7, #4]
 800c246:	f000 ff61 	bl	800d10c <HAL_SD_GetCardState>
 800c24a:	4603      	mov	r3, r0
 800c24c:	2b04      	cmp	r3, #4
 800c24e:	d1e7      	bne.n	800c220 <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	2200      	movs	r2, #0
 800c254:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	2200      	movs	r2, #0
 800c25a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	2201      	movs	r2, #1
 800c260:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return HAL_OK;
 800c264:	2300      	movs	r3, #0
}
 800c266:	4618      	mov	r0, r3
 800c268:	3728      	adds	r7, #40	@ 0x28
 800c26a:	46bd      	mov	sp, r7
 800c26c:	bd80      	pop	{r7, pc}
	...

0800c270 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800c270:	b590      	push	{r4, r7, lr}
 800c272:	b08d      	sub	sp, #52	@ 0x34
 800c274:	af02      	add	r7, sp, #8
 800c276:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800c278:	2300      	movs	r3, #0
 800c27a:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800c27c:	2300      	movs	r3, #0
 800c27e:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800c280:	2300      	movs	r3, #0
 800c282:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800c284:	2300      	movs	r3, #0
 800c286:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800c288:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 800c28c:	f04f 0100 	mov.w	r1, #0
 800c290:	f7fe fc76 	bl	800ab80 <HAL_RCCEx_GetPeriphCLKFreq>
 800c294:	6278      	str	r0, [r7, #36]	@ 0x24
  if (sdmmc_clk == 0U)
 800c296:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c298:	2b00      	cmp	r3, #0
 800c29a:	d109      	bne.n	800c2b0 <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	2201      	movs	r2, #1
 800c2a0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800c2aa:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800c2ac:	2301      	movs	r3, #1
 800c2ae:	e070      	b.n	800c392 <HAL_SD_InitCard+0x122>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 800c2b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c2b2:	0a1b      	lsrs	r3, r3, #8
 800c2b4:	4a39      	ldr	r2, [pc, #228]	@ (800c39c <HAL_SD_InitCard+0x12c>)
 800c2b6:	fba2 2303 	umull	r2, r3, r2, r3
 800c2ba:	091b      	lsrs	r3, r3, #4
 800c2bc:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	681c      	ldr	r4, [r3, #0]
 800c2c2:	466a      	mov	r2, sp
 800c2c4:	f107 0318 	add.w	r3, r7, #24
 800c2c8:	e893 0003 	ldmia.w	r3, {r0, r1}
 800c2cc:	e882 0003 	stmia.w	r2, {r0, r1}
 800c2d0:	f107 030c 	add.w	r3, r7, #12
 800c2d4:	cb0e      	ldmia	r3, {r1, r2, r3}
 800c2d6:	4620      	mov	r0, r4
 800c2d8:	f002 fe5e 	bl	800ef98 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	681b      	ldr	r3, [r3, #0]
 800c2e0:	4618      	mov	r0, r3
 800c2e2:	f002 fea1 	bl	800f028 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  if (Init.ClockDiv != 0U)
 800c2e6:	69fb      	ldr	r3, [r7, #28]
 800c2e8:	2b00      	cmp	r3, #0
 800c2ea:	d005      	beq.n	800c2f8 <HAL_SD_InitCard+0x88>
  {
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 800c2ec:	69fb      	ldr	r3, [r7, #28]
 800c2ee:	005b      	lsls	r3, r3, #1
 800c2f0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c2f2:	fbb2 f3f3 	udiv	r3, r2, r3
 800c2f6:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  if (sdmmc_clk != 0U)
 800c2f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c2fa:	2b00      	cmp	r3, #0
 800c2fc:	d007      	beq.n	800c30e <HAL_SD_InitCard+0x9e>
  {
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 800c2fe:	4a28      	ldr	r2, [pc, #160]	@ (800c3a0 <HAL_SD_InitCard+0x130>)
 800c300:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c302:	fbb2 f3f3 	udiv	r3, r2, r3
 800c306:	3301      	adds	r3, #1
 800c308:	4618      	mov	r0, r3
 800c30a:	f7fa f9c3 	bl	8006694 <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800c30e:	6878      	ldr	r0, [r7, #4]
 800c310:	f000 ffea 	bl	800d2e8 <SD_PowerON>
 800c314:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800c316:	6a3b      	ldr	r3, [r7, #32]
 800c318:	2b00      	cmp	r3, #0
 800c31a:	d00b      	beq.n	800c334 <HAL_SD_InitCard+0xc4>
  {
    hsd->State = HAL_SD_STATE_READY;
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	2201      	movs	r2, #1
 800c320:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c328:	6a3b      	ldr	r3, [r7, #32]
 800c32a:	431a      	orrs	r2, r3
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800c330:	2301      	movs	r3, #1
 800c332:	e02e      	b.n	800c392 <HAL_SD_InitCard+0x122>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800c334:	6878      	ldr	r0, [r7, #4]
 800c336:	f000 ff09 	bl	800d14c <SD_InitCard>
 800c33a:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800c33c:	6a3b      	ldr	r3, [r7, #32]
 800c33e:	2b00      	cmp	r3, #0
 800c340:	d00b      	beq.n	800c35a <HAL_SD_InitCard+0xea>
  {
    hsd->State = HAL_SD_STATE_READY;
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	2201      	movs	r2, #1
 800c346:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c34e:	6a3b      	ldr	r3, [r7, #32]
 800c350:	431a      	orrs	r2, r3
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800c356:	2301      	movs	r3, #1
 800c358:	e01b      	b.n	800c392 <HAL_SD_InitCard+0x122>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	681b      	ldr	r3, [r3, #0]
 800c35e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800c362:	4618      	mov	r0, r3
 800c364:	f002 fef6 	bl	800f154 <SDMMC_CmdBlockLength>
 800c368:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800c36a:	6a3b      	ldr	r3, [r7, #32]
 800c36c:	2b00      	cmp	r3, #0
 800c36e:	d00f      	beq.n	800c390 <HAL_SD_InitCard+0x120>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	681b      	ldr	r3, [r3, #0]
 800c374:	4a0b      	ldr	r2, [pc, #44]	@ (800c3a4 <HAL_SD_InitCard+0x134>)
 800c376:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c37c:	6a3b      	ldr	r3, [r7, #32]
 800c37e:	431a      	orrs	r2, r3
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	2201      	movs	r2, #1
 800c388:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 800c38c:	2301      	movs	r3, #1
 800c38e:	e000      	b.n	800c392 <HAL_SD_InitCard+0x122>
  }

  return HAL_OK;
 800c390:	2300      	movs	r3, #0
}
 800c392:	4618      	mov	r0, r3
 800c394:	372c      	adds	r7, #44	@ 0x2c
 800c396:	46bd      	mov	sp, r7
 800c398:	bd90      	pop	{r4, r7, pc}
 800c39a:	bf00      	nop
 800c39c:	014f8b59 	.word	0x014f8b59
 800c3a0:	00012110 	.word	0x00012110
 800c3a4:	1fe00fff 	.word	0x1fe00fff

0800c3a8 <HAL_SD_ReadBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd,
                                        uint32_t NumberOfBlocks)
{
 800c3a8:	b580      	push	{r7, lr}
 800c3aa:	b08c      	sub	sp, #48	@ 0x30
 800c3ac:	af00      	add	r7, sp, #0
 800c3ae:	60f8      	str	r0, [r7, #12]
 800c3b0:	60b9      	str	r1, [r7, #8]
 800c3b2:	607a      	str	r2, [r7, #4]
 800c3b4:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (NULL == pData)
 800c3ba:	68bb      	ldr	r3, [r7, #8]
 800c3bc:	2b00      	cmp	r3, #0
 800c3be:	d107      	bne.n	800c3d0 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800c3c0:	68fb      	ldr	r3, [r7, #12]
 800c3c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c3c4:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800c3c8:	68fb      	ldr	r3, [r7, #12]
 800c3ca:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800c3cc:	2301      	movs	r3, #1
 800c3ce:	e08d      	b.n	800c4ec <HAL_SD_ReadBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 800c3d0:	68fb      	ldr	r3, [r7, #12]
 800c3d2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800c3d6:	b2db      	uxtb	r3, r3
 800c3d8:	2b01      	cmp	r3, #1
 800c3da:	f040 8086 	bne.w	800c4ea <HAL_SD_ReadBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800c3de:	68fb      	ldr	r3, [r7, #12]
 800c3e0:	2200      	movs	r2, #0
 800c3e2:	635a      	str	r2, [r3, #52]	@ 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800c3e4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c3e6:	683b      	ldr	r3, [r7, #0]
 800c3e8:	441a      	add	r2, r3
 800c3ea:	68fb      	ldr	r3, [r7, #12]
 800c3ec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c3ee:	429a      	cmp	r2, r3
 800c3f0:	d907      	bls.n	800c402 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800c3f2:	68fb      	ldr	r3, [r7, #12]
 800c3f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c3f6:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800c3fa:	68fb      	ldr	r3, [r7, #12]
 800c3fc:	635a      	str	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 800c3fe:	2301      	movs	r3, #1
 800c400:	e074      	b.n	800c4ec <HAL_SD_ReadBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800c402:	68fb      	ldr	r3, [r7, #12]
 800c404:	2203      	movs	r2, #3
 800c406:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800c40a:	68fb      	ldr	r3, [r7, #12]
 800c40c:	681b      	ldr	r3, [r3, #0]
 800c40e:	2200      	movs	r2, #0
 800c410:	62da      	str	r2, [r3, #44]	@ 0x2c

    hsd->pRxBuffPtr = pData;
 800c412:	68fb      	ldr	r3, [r7, #12]
 800c414:	68ba      	ldr	r2, [r7, #8]
 800c416:	625a      	str	r2, [r3, #36]	@ 0x24
    hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 800c418:	683b      	ldr	r3, [r7, #0]
 800c41a:	025a      	lsls	r2, r3, #9
 800c41c:	68fb      	ldr	r3, [r7, #12]
 800c41e:	629a      	str	r2, [r3, #40]	@ 0x28

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800c420:	68fb      	ldr	r3, [r7, #12]
 800c422:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c424:	2b01      	cmp	r3, #1
 800c426:	d002      	beq.n	800c42e <HAL_SD_ReadBlocks_DMA+0x86>
    {
      add *= 512U;
 800c428:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c42a:	025b      	lsls	r3, r3, #9
 800c42c:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800c42e:	f04f 33ff 	mov.w	r3, #4294967295
 800c432:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800c434:	683b      	ldr	r3, [r7, #0]
 800c436:	025b      	lsls	r3, r3, #9
 800c438:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800c43a:	2390      	movs	r3, #144	@ 0x90
 800c43c:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800c43e:	2302      	movs	r3, #2
 800c440:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800c442:	2300      	movs	r3, #0
 800c444:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800c446:	2300      	movs	r3, #0
 800c448:	627b      	str	r3, [r7, #36]	@ 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800c44a:	68fb      	ldr	r3, [r7, #12]
 800c44c:	681b      	ldr	r3, [r3, #0]
 800c44e:	f107 0210 	add.w	r2, r7, #16
 800c452:	4611      	mov	r1, r2
 800c454:	4618      	mov	r0, r3
 800c456:	f002 fe51 	bl	800f0fc <SDMMC_ConfigData>

    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800c45a:	68fb      	ldr	r3, [r7, #12]
 800c45c:	681b      	ldr	r3, [r3, #0]
 800c45e:	68da      	ldr	r2, [r3, #12]
 800c460:	68fb      	ldr	r3, [r7, #12]
 800c462:	681b      	ldr	r3, [r3, #0]
 800c464:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800c468:	60da      	str	r2, [r3, #12]
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800c46a:	68fb      	ldr	r3, [r7, #12]
 800c46c:	681b      	ldr	r3, [r3, #0]
 800c46e:	68ba      	ldr	r2, [r7, #8]
 800c470:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800c472:	68fb      	ldr	r3, [r7, #12]
 800c474:	681b      	ldr	r3, [r3, #0]
 800c476:	2201      	movs	r2, #1
 800c478:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Read Blocks in DMA mode */
    if (NumberOfBlocks > 1U)
 800c47a:	683b      	ldr	r3, [r7, #0]
 800c47c:	2b01      	cmp	r3, #1
 800c47e:	d90a      	bls.n	800c496 <HAL_SD_ReadBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800c480:	68fb      	ldr	r3, [r7, #12]
 800c482:	2282      	movs	r2, #130	@ 0x82
 800c484:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800c486:	68fb      	ldr	r3, [r7, #12]
 800c488:	681b      	ldr	r3, [r3, #0]
 800c48a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c48c:	4618      	mov	r0, r3
 800c48e:	f002 fea7 	bl	800f1e0 <SDMMC_CmdReadMultiBlock>
 800c492:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800c494:	e009      	b.n	800c4aa <HAL_SD_ReadBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800c496:	68fb      	ldr	r3, [r7, #12]
 800c498:	2281      	movs	r2, #129	@ 0x81
 800c49a:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800c49c:	68fb      	ldr	r3, [r7, #12]
 800c49e:	681b      	ldr	r3, [r3, #0]
 800c4a0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c4a2:	4618      	mov	r0, r3
 800c4a4:	f002 fe79 	bl	800f19a <SDMMC_CmdReadSingleBlock>
 800c4a8:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 800c4aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c4ac:	2b00      	cmp	r3, #0
 800c4ae:	d012      	beq.n	800c4d6 <HAL_SD_ReadBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c4b0:	68fb      	ldr	r3, [r7, #12]
 800c4b2:	681b      	ldr	r3, [r3, #0]
 800c4b4:	4a0f      	ldr	r2, [pc, #60]	@ (800c4f4 <HAL_SD_ReadBlocks_DMA+0x14c>)
 800c4b6:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 800c4b8:	68fb      	ldr	r3, [r7, #12]
 800c4ba:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c4bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c4be:	431a      	orrs	r2, r3
 800c4c0:	68fb      	ldr	r3, [r7, #12]
 800c4c2:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800c4c4:	68fb      	ldr	r3, [r7, #12]
 800c4c6:	2201      	movs	r2, #1
 800c4c8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800c4cc:	68fb      	ldr	r3, [r7, #12]
 800c4ce:	2200      	movs	r2, #0
 800c4d0:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 800c4d2:	2301      	movs	r3, #1
 800c4d4:	e00a      	b.n	800c4ec <HAL_SD_ReadBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800c4d6:	68fb      	ldr	r3, [r7, #12]
 800c4d8:	681b      	ldr	r3, [r3, #0]
 800c4da:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800c4dc:	68fb      	ldr	r3, [r7, #12]
 800c4de:	681b      	ldr	r3, [r3, #0]
 800c4e0:	f442 7295 	orr.w	r2, r2, #298	@ 0x12a
 800c4e4:	63da      	str	r2, [r3, #60]	@ 0x3c


    return HAL_OK;
 800c4e6:	2300      	movs	r3, #0
 800c4e8:	e000      	b.n	800c4ec <HAL_SD_ReadBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 800c4ea:	2302      	movs	r3, #2
  }
}
 800c4ec:	4618      	mov	r0, r3
 800c4ee:	3730      	adds	r7, #48	@ 0x30
 800c4f0:	46bd      	mov	sp, r7
 800c4f2:	bd80      	pop	{r7, pc}
 800c4f4:	1fe00fff 	.word	0x1fe00fff

0800c4f8 <HAL_SD_WriteBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, const uint8_t *pData, uint32_t BlockAdd,
                                         uint32_t NumberOfBlocks)
{
 800c4f8:	b580      	push	{r7, lr}
 800c4fa:	b08c      	sub	sp, #48	@ 0x30
 800c4fc:	af00      	add	r7, sp, #0
 800c4fe:	60f8      	str	r0, [r7, #12]
 800c500:	60b9      	str	r1, [r7, #8]
 800c502:	607a      	str	r2, [r7, #4]
 800c504:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (NULL == pData)
 800c50a:	68bb      	ldr	r3, [r7, #8]
 800c50c:	2b00      	cmp	r3, #0
 800c50e:	d107      	bne.n	800c520 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800c510:	68fb      	ldr	r3, [r7, #12]
 800c512:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c514:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800c518:	68fb      	ldr	r3, [r7, #12]
 800c51a:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800c51c:	2301      	movs	r3, #1
 800c51e:	e08d      	b.n	800c63c <HAL_SD_WriteBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 800c520:	68fb      	ldr	r3, [r7, #12]
 800c522:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800c526:	b2db      	uxtb	r3, r3
 800c528:	2b01      	cmp	r3, #1
 800c52a:	f040 8086 	bne.w	800c63a <HAL_SD_WriteBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800c52e:	68fb      	ldr	r3, [r7, #12]
 800c530:	2200      	movs	r2, #0
 800c532:	635a      	str	r2, [r3, #52]	@ 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800c534:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c536:	683b      	ldr	r3, [r7, #0]
 800c538:	441a      	add	r2, r3
 800c53a:	68fb      	ldr	r3, [r7, #12]
 800c53c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c53e:	429a      	cmp	r2, r3
 800c540:	d907      	bls.n	800c552 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800c542:	68fb      	ldr	r3, [r7, #12]
 800c544:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c546:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800c54a:	68fb      	ldr	r3, [r7, #12]
 800c54c:	635a      	str	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 800c54e:	2301      	movs	r3, #1
 800c550:	e074      	b.n	800c63c <HAL_SD_WriteBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800c552:	68fb      	ldr	r3, [r7, #12]
 800c554:	2203      	movs	r2, #3
 800c556:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800c55a:	68fb      	ldr	r3, [r7, #12]
 800c55c:	681b      	ldr	r3, [r3, #0]
 800c55e:	2200      	movs	r2, #0
 800c560:	62da      	str	r2, [r3, #44]	@ 0x2c

    hsd->pTxBuffPtr = pData;
 800c562:	68fb      	ldr	r3, [r7, #12]
 800c564:	68ba      	ldr	r2, [r7, #8]
 800c566:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 800c568:	683b      	ldr	r3, [r7, #0]
 800c56a:	025a      	lsls	r2, r3, #9
 800c56c:	68fb      	ldr	r3, [r7, #12]
 800c56e:	621a      	str	r2, [r3, #32]

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800c570:	68fb      	ldr	r3, [r7, #12]
 800c572:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c574:	2b01      	cmp	r3, #1
 800c576:	d002      	beq.n	800c57e <HAL_SD_WriteBlocks_DMA+0x86>
    {
      add *= 512U;
 800c578:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c57a:	025b      	lsls	r3, r3, #9
 800c57c:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800c57e:	f04f 33ff 	mov.w	r3, #4294967295
 800c582:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800c584:	683b      	ldr	r3, [r7, #0]
 800c586:	025b      	lsls	r3, r3, #9
 800c588:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800c58a:	2390      	movs	r3, #144	@ 0x90
 800c58c:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800c58e:	2300      	movs	r3, #0
 800c590:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800c592:	2300      	movs	r3, #0
 800c594:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800c596:	2300      	movs	r3, #0
 800c598:	627b      	str	r3, [r7, #36]	@ 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800c59a:	68fb      	ldr	r3, [r7, #12]
 800c59c:	681b      	ldr	r3, [r3, #0]
 800c59e:	f107 0210 	add.w	r2, r7, #16
 800c5a2:	4611      	mov	r1, r2
 800c5a4:	4618      	mov	r0, r3
 800c5a6:	f002 fda9 	bl	800f0fc <SDMMC_ConfigData>


    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800c5aa:	68fb      	ldr	r3, [r7, #12]
 800c5ac:	681b      	ldr	r3, [r3, #0]
 800c5ae:	68da      	ldr	r2, [r3, #12]
 800c5b0:	68fb      	ldr	r3, [r7, #12]
 800c5b2:	681b      	ldr	r3, [r3, #0]
 800c5b4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800c5b8:	60da      	str	r2, [r3, #12]

    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800c5ba:	68fb      	ldr	r3, [r7, #12]
 800c5bc:	681b      	ldr	r3, [r3, #0]
 800c5be:	68ba      	ldr	r2, [r7, #8]
 800c5c0:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800c5c2:	68fb      	ldr	r3, [r7, #12]
 800c5c4:	681b      	ldr	r3, [r3, #0]
 800c5c6:	2201      	movs	r2, #1
 800c5c8:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 800c5ca:	683b      	ldr	r3, [r7, #0]
 800c5cc:	2b01      	cmp	r3, #1
 800c5ce:	d90a      	bls.n	800c5e6 <HAL_SD_WriteBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800c5d0:	68fb      	ldr	r3, [r7, #12]
 800c5d2:	22a0      	movs	r2, #160	@ 0xa0
 800c5d4:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800c5d6:	68fb      	ldr	r3, [r7, #12]
 800c5d8:	681b      	ldr	r3, [r3, #0]
 800c5da:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c5dc:	4618      	mov	r0, r3
 800c5de:	f002 fe45 	bl	800f26c <SDMMC_CmdWriteMultiBlock>
 800c5e2:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800c5e4:	e009      	b.n	800c5fa <HAL_SD_WriteBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800c5e6:	68fb      	ldr	r3, [r7, #12]
 800c5e8:	2290      	movs	r2, #144	@ 0x90
 800c5ea:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800c5ec:	68fb      	ldr	r3, [r7, #12]
 800c5ee:	681b      	ldr	r3, [r3, #0]
 800c5f0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c5f2:	4618      	mov	r0, r3
 800c5f4:	f002 fe17 	bl	800f226 <SDMMC_CmdWriteSingleBlock>
 800c5f8:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 800c5fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c5fc:	2b00      	cmp	r3, #0
 800c5fe:	d012      	beq.n	800c626 <HAL_SD_WriteBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c600:	68fb      	ldr	r3, [r7, #12]
 800c602:	681b      	ldr	r3, [r3, #0]
 800c604:	4a0f      	ldr	r2, [pc, #60]	@ (800c644 <HAL_SD_WriteBlocks_DMA+0x14c>)
 800c606:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 800c608:	68fb      	ldr	r3, [r7, #12]
 800c60a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c60c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c60e:	431a      	orrs	r2, r3
 800c610:	68fb      	ldr	r3, [r7, #12]
 800c612:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800c614:	68fb      	ldr	r3, [r7, #12]
 800c616:	2201      	movs	r2, #1
 800c618:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800c61c:	68fb      	ldr	r3, [r7, #12]
 800c61e:	2200      	movs	r2, #0
 800c620:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 800c622:	2301      	movs	r3, #1
 800c624:	e00a      	b.n	800c63c <HAL_SD_WriteBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 800c626:	68fb      	ldr	r3, [r7, #12]
 800c628:	681b      	ldr	r3, [r3, #0]
 800c62a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800c62c:	68fb      	ldr	r3, [r7, #12]
 800c62e:	681b      	ldr	r3, [r3, #0]
 800c630:	f442 728d 	orr.w	r2, r2, #282	@ 0x11a
 800c634:	63da      	str	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800c636:	2300      	movs	r3, #0
 800c638:	e000      	b.n	800c63c <HAL_SD_WriteBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 800c63a:	2302      	movs	r3, #2
  }
}
 800c63c:	4618      	mov	r0, r3
 800c63e:	3730      	adds	r7, #48	@ 0x30
 800c640:	46bd      	mov	sp, r7
 800c642:	bd80      	pop	{r7, pc}
 800c644:	1fe00fff 	.word	0x1fe00fff

0800c648 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800c648:	b580      	push	{r7, lr}
 800c64a:	b084      	sub	sp, #16
 800c64c:	af00      	add	r7, sp, #0
 800c64e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c654:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	681b      	ldr	r3, [r3, #0]
 800c65a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c65c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800c660:	2b00      	cmp	r3, #0
 800c662:	d008      	beq.n	800c676 <HAL_SD_IRQHandler+0x2e>
 800c664:	68fb      	ldr	r3, [r7, #12]
 800c666:	f003 0308 	and.w	r3, r3, #8
 800c66a:	2b00      	cmp	r3, #0
 800c66c:	d003      	beq.n	800c676 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800c66e:	6878      	ldr	r0, [r7, #4]
 800c670:	f001 f926 	bl	800d8c0 <SD_Read_IT>
 800c674:	e19a      	b.n	800c9ac <HAL_SD_IRQHandler+0x364>
  }

  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	681b      	ldr	r3, [r3, #0]
 800c67a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c67c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c680:	2b00      	cmp	r3, #0
 800c682:	f000 80ac 	beq.w	800c7de <HAL_SD_IRQHandler+0x196>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	681b      	ldr	r3, [r3, #0]
 800c68a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800c68e:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	681b      	ldr	r3, [r3, #0]
 800c694:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	681a      	ldr	r2, [r3, #0]
 800c69a:	4b59      	ldr	r3, [pc, #356]	@ (800c800 <HAL_SD_IRQHandler+0x1b8>)
 800c69c:	400b      	ands	r3, r1
 800c69e:	63d3      	str	r3, [r2, #60]	@ 0x3c
                        SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE | \
                        SDMMC_IT_RXFIFOHF);

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	681b      	ldr	r3, [r3, #0]
 800c6a4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	681b      	ldr	r3, [r3, #0]
 800c6aa:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 800c6ae:	63da      	str	r2, [r3, #60]	@ 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	681b      	ldr	r3, [r3, #0]
 800c6b4:	68da      	ldr	r2, [r3, #12]
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	681b      	ldr	r3, [r3, #0]
 800c6ba:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800c6be:	60da      	str	r2, [r3, #12]

    if ((context & SD_CONTEXT_IT) != 0U)
 800c6c0:	68fb      	ldr	r3, [r7, #12]
 800c6c2:	f003 0308 	and.w	r3, r3, #8
 800c6c6:	2b00      	cmp	r3, #0
 800c6c8:	d038      	beq.n	800c73c <HAL_SD_IRQHandler+0xf4>
    {
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800c6ca:	68fb      	ldr	r3, [r7, #12]
 800c6cc:	f003 0302 	and.w	r3, r3, #2
 800c6d0:	2b00      	cmp	r3, #0
 800c6d2:	d104      	bne.n	800c6de <HAL_SD_IRQHandler+0x96>
 800c6d4:	68fb      	ldr	r3, [r7, #12]
 800c6d6:	f003 0320 	and.w	r3, r3, #32
 800c6da:	2b00      	cmp	r3, #0
 800c6dc:	d011      	beq.n	800c702 <HAL_SD_IRQHandler+0xba>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	681b      	ldr	r3, [r3, #0]
 800c6e2:	4618      	mov	r0, r3
 800c6e4:	f002 fde6 	bl	800f2b4 <SDMMC_CmdStopTransfer>
 800c6e8:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 800c6ea:	68bb      	ldr	r3, [r7, #8]
 800c6ec:	2b00      	cmp	r3, #0
 800c6ee:	d008      	beq.n	800c702 <HAL_SD_IRQHandler+0xba>
        {
          hsd->ErrorCode |= errorstate;
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c6f4:	68bb      	ldr	r3, [r7, #8]
 800c6f6:	431a      	orrs	r2, r3
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	635a      	str	r2, [r3, #52]	@ 0x34
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800c6fc:	6878      	ldr	r0, [r7, #4]
 800c6fe:	f000 f95b 	bl	800c9b8 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	681b      	ldr	r3, [r3, #0]
 800c706:	4a3f      	ldr	r2, [pc, #252]	@ (800c804 <HAL_SD_IRQHandler+0x1bc>)
 800c708:	639a      	str	r2, [r3, #56]	@ 0x38

      hsd->State = HAL_SD_STATE_READY;
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	2201      	movs	r2, #1
 800c70e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	2200      	movs	r2, #0
 800c716:	62da      	str	r2, [r3, #44]	@ 0x2c
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800c718:	68fb      	ldr	r3, [r7, #12]
 800c71a:	f003 0301 	and.w	r3, r3, #1
 800c71e:	2b00      	cmp	r3, #0
 800c720:	d104      	bne.n	800c72c <HAL_SD_IRQHandler+0xe4>
 800c722:	68fb      	ldr	r3, [r7, #12]
 800c724:	f003 0302 	and.w	r3, r3, #2
 800c728:	2b00      	cmp	r3, #0
 800c72a:	d003      	beq.n	800c734 <HAL_SD_IRQHandler+0xec>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800c72c:	6878      	ldr	r0, [r7, #4]
 800c72e:	f003 fa73 	bl	800fc18 <HAL_SD_RxCpltCallback>
 800c732:	e13b      	b.n	800c9ac <HAL_SD_IRQHandler+0x364>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800c734:	6878      	ldr	r0, [r7, #4]
 800c736:	f003 fa65 	bl	800fc04 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800c73a:	e137      	b.n	800c9ac <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 800c73c:	68fb      	ldr	r3, [r7, #12]
 800c73e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c742:	2b00      	cmp	r3, #0
 800c744:	f000 8132 	beq.w	800c9ac <HAL_SD_IRQHandler+0x364>
      hsd->Instance->DLEN = 0;
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	681b      	ldr	r3, [r3, #0]
 800c74c:	2200      	movs	r2, #0
 800c74e:	629a      	str	r2, [r3, #40]	@ 0x28
      hsd->Instance->DCTRL = 0;
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	681b      	ldr	r3, [r3, #0]
 800c754:	2200      	movs	r2, #0
 800c756:	62da      	str	r2, [r3, #44]	@ 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	681b      	ldr	r3, [r3, #0]
 800c75c:	2200      	movs	r2, #0
 800c75e:	651a      	str	r2, [r3, #80]	@ 0x50
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800c760:	68fb      	ldr	r3, [r7, #12]
 800c762:	f003 0302 	and.w	r3, r3, #2
 800c766:	2b00      	cmp	r3, #0
 800c768:	d104      	bne.n	800c774 <HAL_SD_IRQHandler+0x12c>
 800c76a:	68fb      	ldr	r3, [r7, #12]
 800c76c:	f003 0320 	and.w	r3, r3, #32
 800c770:	2b00      	cmp	r3, #0
 800c772:	d011      	beq.n	800c798 <HAL_SD_IRQHandler+0x150>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	681b      	ldr	r3, [r3, #0]
 800c778:	4618      	mov	r0, r3
 800c77a:	f002 fd9b 	bl	800f2b4 <SDMMC_CmdStopTransfer>
 800c77e:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 800c780:	68bb      	ldr	r3, [r7, #8]
 800c782:	2b00      	cmp	r3, #0
 800c784:	d008      	beq.n	800c798 <HAL_SD_IRQHandler+0x150>
          hsd->ErrorCode |= errorstate;
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c78a:	68bb      	ldr	r3, [r7, #8]
 800c78c:	431a      	orrs	r2, r3
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	635a      	str	r2, [r3, #52]	@ 0x34
          HAL_SD_ErrorCallback(hsd);
 800c792:	6878      	ldr	r0, [r7, #4]
 800c794:	f000 f910 	bl	800c9b8 <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	2201      	movs	r2, #1
 800c79c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	2200      	movs	r2, #0
 800c7a4:	62da      	str	r2, [r3, #44]	@ 0x2c
      if (((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800c7a6:	68fb      	ldr	r3, [r7, #12]
 800c7a8:	f003 0310 	and.w	r3, r3, #16
 800c7ac:	2b00      	cmp	r3, #0
 800c7ae:	d104      	bne.n	800c7ba <HAL_SD_IRQHandler+0x172>
 800c7b0:	68fb      	ldr	r3, [r7, #12]
 800c7b2:	f003 0320 	and.w	r3, r3, #32
 800c7b6:	2b00      	cmp	r3, #0
 800c7b8:	d002      	beq.n	800c7c0 <HAL_SD_IRQHandler+0x178>
        HAL_SD_TxCpltCallback(hsd);
 800c7ba:	6878      	ldr	r0, [r7, #4]
 800c7bc:	f003 fa22 	bl	800fc04 <HAL_SD_TxCpltCallback>
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800c7c0:	68fb      	ldr	r3, [r7, #12]
 800c7c2:	f003 0301 	and.w	r3, r3, #1
 800c7c6:	2b00      	cmp	r3, #0
 800c7c8:	d105      	bne.n	800c7d6 <HAL_SD_IRQHandler+0x18e>
 800c7ca:	68fb      	ldr	r3, [r7, #12]
 800c7cc:	f003 0302 	and.w	r3, r3, #2
 800c7d0:	2b00      	cmp	r3, #0
 800c7d2:	f000 80eb 	beq.w	800c9ac <HAL_SD_IRQHandler+0x364>
        HAL_SD_RxCpltCallback(hsd);
 800c7d6:	6878      	ldr	r0, [r7, #4]
 800c7d8:	f003 fa1e 	bl	800fc18 <HAL_SD_RxCpltCallback>
}
 800c7dc:	e0e6      	b.n	800c9ac <HAL_SD_IRQHandler+0x364>
  else if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	681b      	ldr	r3, [r3, #0]
 800c7e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c7e4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c7e8:	2b00      	cmp	r3, #0
 800c7ea:	d00d      	beq.n	800c808 <HAL_SD_IRQHandler+0x1c0>
 800c7ec:	68fb      	ldr	r3, [r7, #12]
 800c7ee:	f003 0308 	and.w	r3, r3, #8
 800c7f2:	2b00      	cmp	r3, #0
 800c7f4:	d008      	beq.n	800c808 <HAL_SD_IRQHandler+0x1c0>
    SD_Write_IT(hsd);
 800c7f6:	6878      	ldr	r0, [r7, #4]
 800c7f8:	f001 f8a8 	bl	800d94c <SD_Write_IT>
 800c7fc:	e0d6      	b.n	800c9ac <HAL_SD_IRQHandler+0x364>
 800c7fe:	bf00      	nop
 800c800:	ffff3ec5 	.word	0xffff3ec5
 800c804:	18000f3a 	.word	0x18000f3a
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR |
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	681b      	ldr	r3, [r3, #0]
 800c80c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c80e:	f003 033a 	and.w	r3, r3, #58	@ 0x3a
 800c812:	2b00      	cmp	r3, #0
 800c814:	f000 809d 	beq.w	800c952 <HAL_SD_IRQHandler+0x30a>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	681b      	ldr	r3, [r3, #0]
 800c81c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c81e:	f003 0302 	and.w	r3, r3, #2
 800c822:	2b00      	cmp	r3, #0
 800c824:	d005      	beq.n	800c832 <HAL_SD_IRQHandler+0x1ea>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c82a:	f043 0202 	orr.w	r2, r3, #2
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	635a      	str	r2, [r3, #52]	@ 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	681b      	ldr	r3, [r3, #0]
 800c836:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c838:	f003 0308 	and.w	r3, r3, #8
 800c83c:	2b00      	cmp	r3, #0
 800c83e:	d005      	beq.n	800c84c <HAL_SD_IRQHandler+0x204>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c844:	f043 0208 	orr.w	r2, r3, #8
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	635a      	str	r2, [r3, #52]	@ 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	681b      	ldr	r3, [r3, #0]
 800c850:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c852:	f003 0320 	and.w	r3, r3, #32
 800c856:	2b00      	cmp	r3, #0
 800c858:	d005      	beq.n	800c866 <HAL_SD_IRQHandler+0x21e>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c85e:	f043 0220 	orr.w	r2, r3, #32
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	635a      	str	r2, [r3, #52]	@ 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	681b      	ldr	r3, [r3, #0]
 800c86a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c86c:	f003 0310 	and.w	r3, r3, #16
 800c870:	2b00      	cmp	r3, #0
 800c872:	d005      	beq.n	800c880 <HAL_SD_IRQHandler+0x238>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c878:	f043 0210 	orr.w	r2, r3, #16
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	681b      	ldr	r3, [r3, #0]
 800c884:	4a4b      	ldr	r2, [pc, #300]	@ (800c9b4 <HAL_SD_IRQHandler+0x36c>)
 800c886:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	681b      	ldr	r3, [r3, #0]
 800c88c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	681b      	ldr	r3, [r3, #0]
 800c892:	f422 729d 	bic.w	r2, r2, #314	@ 0x13a
 800c896:	63da      	str	r2, [r3, #60]	@ 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	681b      	ldr	r3, [r3, #0]
 800c89c:	68da      	ldr	r2, [r3, #12]
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	681b      	ldr	r3, [r3, #0]
 800c8a2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800c8a6:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	681b      	ldr	r3, [r3, #0]
 800c8ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	681b      	ldr	r3, [r3, #0]
 800c8b2:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800c8b6:	62da      	str	r2, [r3, #44]	@ 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	681b      	ldr	r3, [r3, #0]
 800c8bc:	68da      	ldr	r2, [r3, #12]
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	681b      	ldr	r3, [r3, #0]
 800c8c2:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800c8c6:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	681b      	ldr	r3, [r3, #0]
 800c8cc:	4618      	mov	r0, r3
 800c8ce:	f002 fcf1 	bl	800f2b4 <SDMMC_CmdStopTransfer>
 800c8d2:	4602      	mov	r2, r0
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c8d8:	431a      	orrs	r2, r3
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	681b      	ldr	r3, [r3, #0]
 800c8e2:	68da      	ldr	r2, [r3, #12]
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	681b      	ldr	r3, [r3, #0]
 800c8e8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800c8ec:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	681b      	ldr	r3, [r3, #0]
 800c8f2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800c8f6:	639a      	str	r2, [r3, #56]	@ 0x38
    if ((context & SD_CONTEXT_IT) != 0U)
 800c8f8:	68fb      	ldr	r3, [r7, #12]
 800c8fa:	f003 0308 	and.w	r3, r3, #8
 800c8fe:	2b00      	cmp	r3, #0
 800c900:	d00a      	beq.n	800c918 <HAL_SD_IRQHandler+0x2d0>
      hsd->State = HAL_SD_STATE_READY;
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	2201      	movs	r2, #1
 800c906:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	2200      	movs	r2, #0
 800c90e:	62da      	str	r2, [r3, #44]	@ 0x2c
      HAL_SD_ErrorCallback(hsd);
 800c910:	6878      	ldr	r0, [r7, #4]
 800c912:	f000 f851 	bl	800c9b8 <HAL_SD_ErrorCallback>
}
 800c916:	e049      	b.n	800c9ac <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 800c918:	68fb      	ldr	r3, [r7, #12]
 800c91a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c91e:	2b00      	cmp	r3, #0
 800c920:	d044      	beq.n	800c9ac <HAL_SD_IRQHandler+0x364>
      if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c926:	2b00      	cmp	r3, #0
 800c928:	d040      	beq.n	800c9ac <HAL_SD_IRQHandler+0x364>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	681b      	ldr	r3, [r3, #0]
 800c92e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	681b      	ldr	r3, [r3, #0]
 800c934:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 800c938:	63da      	str	r2, [r3, #60]	@ 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	681b      	ldr	r3, [r3, #0]
 800c93e:	2200      	movs	r2, #0
 800c940:	651a      	str	r2, [r3, #80]	@ 0x50
        hsd->State = HAL_SD_STATE_READY;
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	2201      	movs	r2, #1
 800c946:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
        HAL_SD_ErrorCallback(hsd);
 800c94a:	6878      	ldr	r0, [r7, #4]
 800c94c:	f000 f834 	bl	800c9b8 <HAL_SD_ErrorCallback>
}
 800c950:	e02c      	b.n	800c9ac <HAL_SD_IRQHandler+0x364>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	681b      	ldr	r3, [r3, #0]
 800c956:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c958:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800c95c:	2b00      	cmp	r3, #0
 800c95e:	d025      	beq.n	800c9ac <HAL_SD_IRQHandler+0x364>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 800c960:	687b      	ldr	r3, [r7, #4]
 800c962:	681b      	ldr	r3, [r3, #0]
 800c964:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c968:	639a      	str	r2, [r3, #56]	@ 0x38
    if (READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	681b      	ldr	r3, [r3, #0]
 800c96e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c970:	f003 0304 	and.w	r3, r3, #4
 800c974:	2b00      	cmp	r3, #0
 800c976:	d10c      	bne.n	800c992 <HAL_SD_IRQHandler+0x34a>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800c978:	68fb      	ldr	r3, [r7, #12]
 800c97a:	f003 0320 	and.w	r3, r3, #32
 800c97e:	2b00      	cmp	r3, #0
 800c980:	d003      	beq.n	800c98a <HAL_SD_IRQHandler+0x342>
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 800c982:	6878      	ldr	r0, [r7, #4]
 800c984:	f001 f84a 	bl	800da1c <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>
}
 800c988:	e010      	b.n	800c9ac <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf1CpltCallback(hsd);
 800c98a:	6878      	ldr	r0, [r7, #4]
 800c98c:	f001 f832 	bl	800d9f4 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>
}
 800c990:	e00c      	b.n	800c9ac <HAL_SD_IRQHandler+0x364>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800c992:	68fb      	ldr	r3, [r7, #12]
 800c994:	f003 0320 	and.w	r3, r3, #32
 800c998:	2b00      	cmp	r3, #0
 800c99a:	d003      	beq.n	800c9a4 <HAL_SD_IRQHandler+0x35c>
        HAL_SDEx_Write_DMADoubleBuf0CpltCallback(hsd);
 800c99c:	6878      	ldr	r0, [r7, #4]
 800c99e:	f001 f833 	bl	800da08 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>
}
 800c9a2:	e003      	b.n	800c9ac <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf0CpltCallback(hsd);
 800c9a4:	6878      	ldr	r0, [r7, #4]
 800c9a6:	f001 f81b 	bl	800d9e0 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>
}
 800c9aa:	e7ff      	b.n	800c9ac <HAL_SD_IRQHandler+0x364>
 800c9ac:	bf00      	nop
 800c9ae:	3710      	adds	r7, #16
 800c9b0:	46bd      	mov	sp, r7
 800c9b2:	bd80      	pop	{r7, pc}
 800c9b4:	18000f3a 	.word	0x18000f3a

0800c9b8 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800c9b8:	b480      	push	{r7}
 800c9ba:	b083      	sub	sp, #12
 800c9bc:	af00      	add	r7, sp, #0
 800c9be:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800c9c0:	bf00      	nop
 800c9c2:	370c      	adds	r7, #12
 800c9c4:	46bd      	mov	sp, r7
 800c9c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9ca:	4770      	bx	lr

0800c9cc <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800c9cc:	b480      	push	{r7}
 800c9ce:	b083      	sub	sp, #12
 800c9d0:	af00      	add	r7, sp, #0
 800c9d2:	6078      	str	r0, [r7, #4]
 800c9d4:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c9da:	0f9b      	lsrs	r3, r3, #30
 800c9dc:	b2da      	uxtb	r2, r3
 800c9de:	683b      	ldr	r3, [r7, #0]
 800c9e0:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c9e6:	0e9b      	lsrs	r3, r3, #26
 800c9e8:	b2db      	uxtb	r3, r3
 800c9ea:	f003 030f 	and.w	r3, r3, #15
 800c9ee:	b2da      	uxtb	r2, r3
 800c9f0:	683b      	ldr	r3, [r7, #0]
 800c9f2:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c9f8:	0e1b      	lsrs	r3, r3, #24
 800c9fa:	b2db      	uxtb	r3, r3
 800c9fc:	f003 0303 	and.w	r3, r3, #3
 800ca00:	b2da      	uxtb	r2, r3
 800ca02:	683b      	ldr	r3, [r7, #0]
 800ca04:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ca0a:	0c1b      	lsrs	r3, r3, #16
 800ca0c:	b2da      	uxtb	r2, r3
 800ca0e:	683b      	ldr	r3, [r7, #0]
 800ca10:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800ca12:	687b      	ldr	r3, [r7, #4]
 800ca14:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ca16:	0a1b      	lsrs	r3, r3, #8
 800ca18:	b2da      	uxtb	r2, r3
 800ca1a:	683b      	ldr	r3, [r7, #0]
 800ca1c:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800ca1e:	687b      	ldr	r3, [r7, #4]
 800ca20:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ca22:	b2da      	uxtb	r2, r3
 800ca24:	683b      	ldr	r3, [r7, #0]
 800ca26:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ca2c:	0d1b      	lsrs	r3, r3, #20
 800ca2e:	b29a      	uxth	r2, r3
 800ca30:	683b      	ldr	r3, [r7, #0]
 800ca32:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ca38:	0c1b      	lsrs	r3, r3, #16
 800ca3a:	b2db      	uxtb	r3, r3
 800ca3c:	f003 030f 	and.w	r3, r3, #15
 800ca40:	b2da      	uxtb	r2, r3
 800ca42:	683b      	ldr	r3, [r7, #0]
 800ca44:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800ca46:	687b      	ldr	r3, [r7, #4]
 800ca48:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ca4a:	0bdb      	lsrs	r3, r3, #15
 800ca4c:	b2db      	uxtb	r3, r3
 800ca4e:	f003 0301 	and.w	r3, r3, #1
 800ca52:	b2da      	uxtb	r2, r3
 800ca54:	683b      	ldr	r3, [r7, #0]
 800ca56:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ca5c:	0b9b      	lsrs	r3, r3, #14
 800ca5e:	b2db      	uxtb	r3, r3
 800ca60:	f003 0301 	and.w	r3, r3, #1
 800ca64:	b2da      	uxtb	r2, r3
 800ca66:	683b      	ldr	r3, [r7, #0]
 800ca68:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ca6e:	0b5b      	lsrs	r3, r3, #13
 800ca70:	b2db      	uxtb	r3, r3
 800ca72:	f003 0301 	and.w	r3, r3, #1
 800ca76:	b2da      	uxtb	r2, r3
 800ca78:	683b      	ldr	r3, [r7, #0]
 800ca7a:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800ca7c:	687b      	ldr	r3, [r7, #4]
 800ca7e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ca80:	0b1b      	lsrs	r3, r3, #12
 800ca82:	b2db      	uxtb	r3, r3
 800ca84:	f003 0301 	and.w	r3, r3, #1
 800ca88:	b2da      	uxtb	r2, r3
 800ca8a:	683b      	ldr	r3, [r7, #0]
 800ca8c:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800ca8e:	683b      	ldr	r3, [r7, #0]
 800ca90:	2200      	movs	r2, #0
 800ca92:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ca98:	2b00      	cmp	r3, #0
 800ca9a:	d163      	bne.n	800cb64 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800caa0:	009a      	lsls	r2, r3, #2
 800caa2:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800caa6:	4013      	ands	r3, r2
 800caa8:	687a      	ldr	r2, [r7, #4]
 800caaa:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 800caac:	0f92      	lsrs	r2, r2, #30
 800caae:	431a      	orrs	r2, r3
 800cab0:	683b      	ldr	r3, [r7, #0]
 800cab2:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cab8:	0edb      	lsrs	r3, r3, #27
 800caba:	b2db      	uxtb	r3, r3
 800cabc:	f003 0307 	and.w	r3, r3, #7
 800cac0:	b2da      	uxtb	r2, r3
 800cac2:	683b      	ldr	r3, [r7, #0]
 800cac4:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800caca:	0e1b      	lsrs	r3, r3, #24
 800cacc:	b2db      	uxtb	r3, r3
 800cace:	f003 0307 	and.w	r3, r3, #7
 800cad2:	b2da      	uxtb	r2, r3
 800cad4:	683b      	ldr	r3, [r7, #0]
 800cad6:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cadc:	0d5b      	lsrs	r3, r3, #21
 800cade:	b2db      	uxtb	r3, r3
 800cae0:	f003 0307 	and.w	r3, r3, #7
 800cae4:	b2da      	uxtb	r2, r3
 800cae6:	683b      	ldr	r3, [r7, #0]
 800cae8:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800caee:	0c9b      	lsrs	r3, r3, #18
 800caf0:	b2db      	uxtb	r3, r3
 800caf2:	f003 0307 	and.w	r3, r3, #7
 800caf6:	b2da      	uxtb	r2, r3
 800caf8:	683b      	ldr	r3, [r7, #0]
 800cafa:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cb00:	0bdb      	lsrs	r3, r3, #15
 800cb02:	b2db      	uxtb	r3, r3
 800cb04:	f003 0307 	and.w	r3, r3, #7
 800cb08:	b2da      	uxtb	r2, r3
 800cb0a:	683b      	ldr	r3, [r7, #0]
 800cb0c:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800cb0e:	683b      	ldr	r3, [r7, #0]
 800cb10:	691b      	ldr	r3, [r3, #16]
 800cb12:	1c5a      	adds	r2, r3, #1
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800cb18:	683b      	ldr	r3, [r7, #0]
 800cb1a:	7e1b      	ldrb	r3, [r3, #24]
 800cb1c:	b2db      	uxtb	r3, r3
 800cb1e:	f003 0307 	and.w	r3, r3, #7
 800cb22:	3302      	adds	r3, #2
 800cb24:	2201      	movs	r2, #1
 800cb26:	fa02 f303 	lsl.w	r3, r2, r3
 800cb2a:	687a      	ldr	r2, [r7, #4]
 800cb2c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800cb2e:	fb03 f202 	mul.w	r2, r3, r2
 800cb32:	687b      	ldr	r3, [r7, #4]
 800cb34:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800cb36:	683b      	ldr	r3, [r7, #0]
 800cb38:	7a1b      	ldrb	r3, [r3, #8]
 800cb3a:	b2db      	uxtb	r3, r3
 800cb3c:	f003 030f 	and.w	r3, r3, #15
 800cb40:	2201      	movs	r2, #1
 800cb42:	409a      	lsls	r2, r3
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	64da      	str	r2, [r3, #76]	@ 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800cb4c:	687a      	ldr	r2, [r7, #4]
 800cb4e:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800cb50:	0a52      	lsrs	r2, r2, #9
 800cb52:	fb03 f202 	mul.w	r2, r3, r2
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.LogBlockSize = 512U;
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800cb60:	655a      	str	r2, [r3, #84]	@ 0x54
 800cb62:	e031      	b.n	800cbc8 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cb68:	2b01      	cmp	r3, #1
 800cb6a:	d11d      	bne.n	800cba8 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800cb70:	041b      	lsls	r3, r3, #16
 800cb72:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cb7a:	0c1b      	lsrs	r3, r3, #16
 800cb7c:	431a      	orrs	r2, r3
 800cb7e:	683b      	ldr	r3, [r7, #0]
 800cb80:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800cb82:	683b      	ldr	r3, [r7, #0]
 800cb84:	691b      	ldr	r3, [r3, #16]
 800cb86:	3301      	adds	r3, #1
 800cb88:	029a      	lsls	r2, r3, #10
 800cb8a:	687b      	ldr	r3, [r7, #4]
 800cb8c:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800cb8e:	687b      	ldr	r3, [r7, #4]
 800cb90:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.BlockSize = 512U;
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800cb9c:	64da      	str	r2, [r3, #76]	@ 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800cb9e:	687b      	ldr	r3, [r7, #4]
 800cba0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	655a      	str	r2, [r3, #84]	@ 0x54
 800cba6:	e00f      	b.n	800cbc8 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	681b      	ldr	r3, [r3, #0]
 800cbac:	4a58      	ldr	r2, [pc, #352]	@ (800cd10 <HAL_SD_GetCardCSD+0x344>)
 800cbae:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cbb4:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800cbb8:	687b      	ldr	r3, [r7, #4]
 800cbba:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	2201      	movs	r2, #1
 800cbc0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 800cbc4:	2301      	movs	r3, #1
 800cbc6:	e09d      	b.n	800cd04 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cbcc:	0b9b      	lsrs	r3, r3, #14
 800cbce:	b2db      	uxtb	r3, r3
 800cbd0:	f003 0301 	and.w	r3, r3, #1
 800cbd4:	b2da      	uxtb	r2, r3
 800cbd6:	683b      	ldr	r3, [r7, #0]
 800cbd8:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cbde:	09db      	lsrs	r3, r3, #7
 800cbe0:	b2db      	uxtb	r3, r3
 800cbe2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800cbe6:	b2da      	uxtb	r2, r3
 800cbe8:	683b      	ldr	r3, [r7, #0]
 800cbea:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cbf0:	b2db      	uxtb	r3, r3
 800cbf2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800cbf6:	b2da      	uxtb	r2, r3
 800cbf8:	683b      	ldr	r3, [r7, #0]
 800cbfa:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800cc00:	0fdb      	lsrs	r3, r3, #31
 800cc02:	b2da      	uxtb	r2, r3
 800cc04:	683b      	ldr	r3, [r7, #0]
 800cc06:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800cc0c:	0f5b      	lsrs	r3, r3, #29
 800cc0e:	b2db      	uxtb	r3, r3
 800cc10:	f003 0303 	and.w	r3, r3, #3
 800cc14:	b2da      	uxtb	r2, r3
 800cc16:	683b      	ldr	r3, [r7, #0]
 800cc18:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800cc1e:	0e9b      	lsrs	r3, r3, #26
 800cc20:	b2db      	uxtb	r3, r3
 800cc22:	f003 0307 	and.w	r3, r3, #7
 800cc26:	b2da      	uxtb	r2, r3
 800cc28:	683b      	ldr	r3, [r7, #0]
 800cc2a:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800cc30:	0d9b      	lsrs	r3, r3, #22
 800cc32:	b2db      	uxtb	r3, r3
 800cc34:	f003 030f 	and.w	r3, r3, #15
 800cc38:	b2da      	uxtb	r2, r3
 800cc3a:	683b      	ldr	r3, [r7, #0]
 800cc3c:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800cc42:	0d5b      	lsrs	r3, r3, #21
 800cc44:	b2db      	uxtb	r3, r3
 800cc46:	f003 0301 	and.w	r3, r3, #1
 800cc4a:	b2da      	uxtb	r2, r3
 800cc4c:	683b      	ldr	r3, [r7, #0]
 800cc4e:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800cc52:	683b      	ldr	r3, [r7, #0]
 800cc54:	2200      	movs	r2, #0
 800cc56:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800cc5e:	0c1b      	lsrs	r3, r3, #16
 800cc60:	b2db      	uxtb	r3, r3
 800cc62:	f003 0301 	and.w	r3, r3, #1
 800cc66:	b2da      	uxtb	r2, r3
 800cc68:	683b      	ldr	r3, [r7, #0]
 800cc6a:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800cc72:	0bdb      	lsrs	r3, r3, #15
 800cc74:	b2db      	uxtb	r3, r3
 800cc76:	f003 0301 	and.w	r3, r3, #1
 800cc7a:	b2da      	uxtb	r2, r3
 800cc7c:	683b      	ldr	r3, [r7, #0]
 800cc7e:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800cc82:	687b      	ldr	r3, [r7, #4]
 800cc84:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800cc86:	0b9b      	lsrs	r3, r3, #14
 800cc88:	b2db      	uxtb	r3, r3
 800cc8a:	f003 0301 	and.w	r3, r3, #1
 800cc8e:	b2da      	uxtb	r2, r3
 800cc90:	683b      	ldr	r3, [r7, #0]
 800cc92:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800cc9a:	0b5b      	lsrs	r3, r3, #13
 800cc9c:	b2db      	uxtb	r3, r3
 800cc9e:	f003 0301 	and.w	r3, r3, #1
 800cca2:	b2da      	uxtb	r2, r3
 800cca4:	683b      	ldr	r3, [r7, #0]
 800cca6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800ccae:	0b1b      	lsrs	r3, r3, #12
 800ccb0:	b2db      	uxtb	r3, r3
 800ccb2:	f003 0301 	and.w	r3, r3, #1
 800ccb6:	b2da      	uxtb	r2, r3
 800ccb8:	683b      	ldr	r3, [r7, #0]
 800ccba:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800ccbe:	687b      	ldr	r3, [r7, #4]
 800ccc0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800ccc2:	0a9b      	lsrs	r3, r3, #10
 800ccc4:	b2db      	uxtb	r3, r3
 800ccc6:	f003 0303 	and.w	r3, r3, #3
 800ccca:	b2da      	uxtb	r2, r3
 800cccc:	683b      	ldr	r3, [r7, #0]
 800ccce:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800ccd6:	0a1b      	lsrs	r3, r3, #8
 800ccd8:	b2db      	uxtb	r3, r3
 800ccda:	f003 0303 	and.w	r3, r3, #3
 800ccde:	b2da      	uxtb	r2, r3
 800cce0:	683b      	ldr	r3, [r7, #0]
 800cce2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800ccea:	085b      	lsrs	r3, r3, #1
 800ccec:	b2db      	uxtb	r3, r3
 800ccee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ccf2:	b2da      	uxtb	r2, r3
 800ccf4:	683b      	ldr	r3, [r7, #0]
 800ccf6:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 800ccfa:	683b      	ldr	r3, [r7, #0]
 800ccfc:	2201      	movs	r2, #1
 800ccfe:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 800cd02:	2300      	movs	r3, #0
}
 800cd04:	4618      	mov	r0, r3
 800cd06:	370c      	adds	r7, #12
 800cd08:	46bd      	mov	sp, r7
 800cd0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd0e:	4770      	bx	lr
 800cd10:	1fe00fff 	.word	0x1fe00fff

0800cd14 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 800cd14:	b580      	push	{r7, lr}
 800cd16:	b094      	sub	sp, #80	@ 0x50
 800cd18:	af00      	add	r7, sp, #0
 800cd1a:	6078      	str	r0, [r7, #4]
 800cd1c:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800cd1e:	2300      	movs	r3, #0
 800cd20:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800cd2a:	b2db      	uxtb	r3, r3
 800cd2c:	2b03      	cmp	r3, #3
 800cd2e:	d101      	bne.n	800cd34 <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 800cd30:	2301      	movs	r3, #1
 800cd32:	e0a7      	b.n	800ce84 <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 800cd34:	f107 0308 	add.w	r3, r7, #8
 800cd38:	4619      	mov	r1, r3
 800cd3a:	6878      	ldr	r0, [r7, #4]
 800cd3c:	f000 fb62 	bl	800d404 <SD_SendSDStatus>
 800cd40:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800cd42:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800cd44:	2b00      	cmp	r3, #0
 800cd46:	d011      	beq.n	800cd6c <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	681b      	ldr	r3, [r3, #0]
 800cd4c:	4a4f      	ldr	r2, [pc, #316]	@ (800ce8c <HAL_SD_GetCardStatus+0x178>)
 800cd4e:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800cd54:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800cd56:	431a      	orrs	r2, r3
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	2201      	movs	r2, #1
 800cd60:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    status = HAL_ERROR;
 800cd64:	2301      	movs	r3, #1
 800cd66:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 800cd6a:	e070      	b.n	800ce4e <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 800cd6c:	68bb      	ldr	r3, [r7, #8]
 800cd6e:	099b      	lsrs	r3, r3, #6
 800cd70:	b2db      	uxtb	r3, r3
 800cd72:	f003 0303 	and.w	r3, r3, #3
 800cd76:	b2da      	uxtb	r2, r3
 800cd78:	683b      	ldr	r3, [r7, #0]
 800cd7a:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 800cd7c:	68bb      	ldr	r3, [r7, #8]
 800cd7e:	095b      	lsrs	r3, r3, #5
 800cd80:	b2db      	uxtb	r3, r3
 800cd82:	f003 0301 	and.w	r3, r3, #1
 800cd86:	b2da      	uxtb	r2, r3
 800cd88:	683b      	ldr	r3, [r7, #0]
 800cd8a:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 800cd8c:	68bb      	ldr	r3, [r7, #8]
 800cd8e:	0a1b      	lsrs	r3, r3, #8
 800cd90:	b29b      	uxth	r3, r3
 800cd92:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800cd96:	b29a      	uxth	r2, r3
 800cd98:	68bb      	ldr	r3, [r7, #8]
 800cd9a:	0e1b      	lsrs	r3, r3, #24
 800cd9c:	b29b      	uxth	r3, r3
 800cd9e:	4313      	orrs	r3, r2
 800cda0:	b29a      	uxth	r2, r3
 800cda2:	683b      	ldr	r3, [r7, #0]
 800cda4:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800cda6:	68fb      	ldr	r3, [r7, #12]
 800cda8:	061a      	lsls	r2, r3, #24
 800cdaa:	68fb      	ldr	r3, [r7, #12]
 800cdac:	021b      	lsls	r3, r3, #8
 800cdae:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800cdb2:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800cdb4:	68fb      	ldr	r3, [r7, #12]
 800cdb6:	0a1b      	lsrs	r3, r3, #8
 800cdb8:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800cdbc:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800cdbe:	68fb      	ldr	r3, [r7, #12]
 800cdc0:	0e1b      	lsrs	r3, r3, #24
 800cdc2:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800cdc4:	683b      	ldr	r3, [r7, #0]
 800cdc6:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 800cdc8:	693b      	ldr	r3, [r7, #16]
 800cdca:	b2da      	uxtb	r2, r3
 800cdcc:	683b      	ldr	r3, [r7, #0]
 800cdce:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 800cdd0:	693b      	ldr	r3, [r7, #16]
 800cdd2:	0a1b      	lsrs	r3, r3, #8
 800cdd4:	b2da      	uxtb	r2, r3
 800cdd6:	683b      	ldr	r3, [r7, #0]
 800cdd8:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800cdda:	693b      	ldr	r3, [r7, #16]
 800cddc:	0d1b      	lsrs	r3, r3, #20
 800cdde:	b2db      	uxtb	r3, r3
 800cde0:	f003 030f 	and.w	r3, r3, #15
 800cde4:	b2da      	uxtb	r2, r3
 800cde6:	683b      	ldr	r3, [r7, #0]
 800cde8:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800cdea:	693b      	ldr	r3, [r7, #16]
 800cdec:	0c1b      	lsrs	r3, r3, #16
 800cdee:	b29b      	uxth	r3, r3
 800cdf0:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800cdf4:	b29a      	uxth	r2, r3
 800cdf6:	697b      	ldr	r3, [r7, #20]
 800cdf8:	b29b      	uxth	r3, r3
 800cdfa:	b2db      	uxtb	r3, r3
 800cdfc:	b29b      	uxth	r3, r3
 800cdfe:	4313      	orrs	r3, r2
 800ce00:	b29a      	uxth	r2, r3
 800ce02:	683b      	ldr	r3, [r7, #0]
 800ce04:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 800ce06:	697b      	ldr	r3, [r7, #20]
 800ce08:	0a9b      	lsrs	r3, r3, #10
 800ce0a:	b2db      	uxtb	r3, r3
 800ce0c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800ce10:	b2da      	uxtb	r2, r3
 800ce12:	683b      	ldr	r3, [r7, #0]
 800ce14:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 800ce16:	697b      	ldr	r3, [r7, #20]
 800ce18:	0a1b      	lsrs	r3, r3, #8
 800ce1a:	b2db      	uxtb	r3, r3
 800ce1c:	f003 0303 	and.w	r3, r3, #3
 800ce20:	b2da      	uxtb	r2, r3
 800ce22:	683b      	ldr	r3, [r7, #0]
 800ce24:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800ce26:	697b      	ldr	r3, [r7, #20]
 800ce28:	091b      	lsrs	r3, r3, #4
 800ce2a:	b2db      	uxtb	r3, r3
 800ce2c:	f003 030f 	and.w	r3, r3, #15
 800ce30:	b2da      	uxtb	r2, r3
 800ce32:	683b      	ldr	r3, [r7, #0]
 800ce34:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800ce36:	697b      	ldr	r3, [r7, #20]
 800ce38:	b2db      	uxtb	r3, r3
 800ce3a:	f003 030f 	and.w	r3, r3, #15
 800ce3e:	b2da      	uxtb	r2, r3
 800ce40:	683b      	ldr	r3, [r7, #0]
 800ce42:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 800ce44:	69bb      	ldr	r3, [r7, #24]
 800ce46:	0e1b      	lsrs	r3, r3, #24
 800ce48:	b2da      	uxtb	r2, r3
 800ce4a:	683b      	ldr	r3, [r7, #0]
 800ce4c:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	681b      	ldr	r3, [r3, #0]
 800ce52:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800ce56:	4618      	mov	r0, r3
 800ce58:	f002 f97c 	bl	800f154 <SDMMC_CmdBlockLength>
 800ce5c:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800ce5e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ce60:	2b00      	cmp	r3, #0
 800ce62:	d00d      	beq.n	800ce80 <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ce64:	687b      	ldr	r3, [r7, #4]
 800ce66:	681b      	ldr	r3, [r3, #0]
 800ce68:	4a08      	ldr	r2, [pc, #32]	@ (800ce8c <HAL_SD_GetCardStatus+0x178>)
 800ce6a:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode = errorstate;
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ce70:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 800ce72:	687b      	ldr	r3, [r7, #4]
 800ce74:	2201      	movs	r2, #1
 800ce76:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    status = HAL_ERROR;
 800ce7a:	2301      	movs	r3, #1
 800ce7c:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  }


  return status;
 800ce80:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
}
 800ce84:	4618      	mov	r0, r3
 800ce86:	3750      	adds	r7, #80	@ 0x50
 800ce88:	46bd      	mov	sp, r7
 800ce8a:	bd80      	pop	{r7, pc}
 800ce8c:	1fe00fff 	.word	0x1fe00fff

0800ce90 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800ce90:	b480      	push	{r7}
 800ce92:	b083      	sub	sp, #12
 800ce94:	af00      	add	r7, sp, #0
 800ce96:	6078      	str	r0, [r7, #4]
 800ce98:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800ce9a:	687b      	ldr	r3, [r7, #4]
 800ce9c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ce9e:	683b      	ldr	r3, [r7, #0]
 800cea0:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800cea6:	683b      	ldr	r3, [r7, #0]
 800cea8:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800ceaa:	687b      	ldr	r3, [r7, #4]
 800ceac:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800ceae:	683b      	ldr	r3, [r7, #0]
 800ceb0:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ceb6:	683b      	ldr	r3, [r7, #0]
 800ceb8:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800cebe:	683b      	ldr	r3, [r7, #0]
 800cec0:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800cec2:	687b      	ldr	r3, [r7, #4]
 800cec4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800cec6:	683b      	ldr	r3, [r7, #0]
 800cec8:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800cece:	683b      	ldr	r3, [r7, #0]
 800ced0:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800ced2:	687b      	ldr	r3, [r7, #4]
 800ced4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800ced6:	683b      	ldr	r3, [r7, #0]
 800ced8:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800ceda:	2300      	movs	r3, #0
}
 800cedc:	4618      	mov	r0, r3
 800cede:	370c      	adds	r7, #12
 800cee0:	46bd      	mov	sp, r7
 800cee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cee6:	4770      	bx	lr

0800cee8 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800cee8:	b590      	push	{r4, r7, lr}
 800ceea:	b08d      	sub	sp, #52	@ 0x34
 800ceec:	af02      	add	r7, sp, #8
 800ceee:	6078      	str	r0, [r7, #4]
 800cef0:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 800cef2:	2300      	movs	r3, #0
 800cef4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	2203      	movs	r2, #3
 800cefc:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cf04:	2b03      	cmp	r3, #3
 800cf06:	d02e      	beq.n	800cf66 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 800cf08:	683b      	ldr	r3, [r7, #0]
 800cf0a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800cf0e:	d106      	bne.n	800cf1e <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cf14:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	635a      	str	r2, [r3, #52]	@ 0x34
 800cf1c:	e029      	b.n	800cf72 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 800cf1e:	683b      	ldr	r3, [r7, #0]
 800cf20:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800cf24:	d10a      	bne.n	800cf3c <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800cf26:	6878      	ldr	r0, [r7, #4]
 800cf28:	f000 fb64 	bl	800d5f4 <SD_WideBus_Enable>
 800cf2c:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800cf32:	6a3b      	ldr	r3, [r7, #32]
 800cf34:	431a      	orrs	r2, r3
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	635a      	str	r2, [r3, #52]	@ 0x34
 800cf3a:	e01a      	b.n	800cf72 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 800cf3c:	683b      	ldr	r3, [r7, #0]
 800cf3e:	2b00      	cmp	r3, #0
 800cf40:	d10a      	bne.n	800cf58 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800cf42:	6878      	ldr	r0, [r7, #4]
 800cf44:	f000 fba1 	bl	800d68a <SD_WideBus_Disable>
 800cf48:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800cf4e:	6a3b      	ldr	r3, [r7, #32]
 800cf50:	431a      	orrs	r2, r3
 800cf52:	687b      	ldr	r3, [r7, #4]
 800cf54:	635a      	str	r2, [r3, #52]	@ 0x34
 800cf56:	e00c      	b.n	800cf72 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cf5c:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	635a      	str	r2, [r3, #52]	@ 0x34
 800cf64:	e005      	b.n	800cf72 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* SD Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cf6a:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800cf6e:	687b      	ldr	r3, [r7, #4]
 800cf70:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800cf72:	687b      	ldr	r3, [r7, #4]
 800cf74:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cf76:	2b00      	cmp	r3, #0
 800cf78:	d007      	beq.n	800cf8a <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	681b      	ldr	r3, [r3, #0]
 800cf7e:	4a5f      	ldr	r2, [pc, #380]	@ (800d0fc <HAL_SD_ConfigWideBusOperation+0x214>)
 800cf80:	639a      	str	r2, [r3, #56]	@ 0x38
    status = HAL_ERROR;
 800cf82:	2301      	movs	r3, #1
 800cf84:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800cf88:	e096      	b.n	800d0b8 <HAL_SD_ConfigWideBusOperation+0x1d0>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800cf8a:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 800cf8e:	f04f 0100 	mov.w	r1, #0
 800cf92:	f7fd fdf5 	bl	800ab80 <HAL_RCCEx_GetPeriphCLKFreq>
 800cf96:	61f8      	str	r0, [r7, #28]
    if (sdmmc_clk != 0U)
 800cf98:	69fb      	ldr	r3, [r7, #28]
 800cf9a:	2b00      	cmp	r3, #0
 800cf9c:	f000 8083 	beq.w	800d0a6 <HAL_SD_ConfigWideBusOperation+0x1be>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	685b      	ldr	r3, [r3, #4]
 800cfa4:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800cfa6:	687b      	ldr	r3, [r7, #4]
 800cfa8:	689b      	ldr	r3, [r3, #8]
 800cfaa:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 800cfac:	683b      	ldr	r3, [r7, #0]
 800cfae:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	691b      	ldr	r3, [r3, #16]
 800cfb4:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 800cfb6:	687b      	ldr	r3, [r7, #4]
 800cfb8:	695a      	ldr	r2, [r3, #20]
 800cfba:	69fb      	ldr	r3, [r7, #28]
 800cfbc:	4950      	ldr	r1, [pc, #320]	@ (800d100 <HAL_SD_ConfigWideBusOperation+0x218>)
 800cfbe:	fba1 1303 	umull	r1, r3, r1, r3
 800cfc2:	0e1b      	lsrs	r3, r3, #24
 800cfc4:	429a      	cmp	r2, r3
 800cfc6:	d303      	bcc.n	800cfd0 <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	695b      	ldr	r3, [r3, #20]
 800cfcc:	61bb      	str	r3, [r7, #24]
 800cfce:	e05a      	b.n	800d086 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800cfd4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800cfd8:	d103      	bne.n	800cfe2 <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 800cfda:	687b      	ldr	r3, [r7, #4]
 800cfdc:	695b      	ldr	r3, [r3, #20]
 800cfde:	61bb      	str	r3, [r7, #24]
 800cfe0:	e051      	b.n	800d086 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 800cfe2:	687b      	ldr	r3, [r7, #4]
 800cfe4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800cfe6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800cfea:	d126      	bne.n	800d03a <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800cfec:	687b      	ldr	r3, [r7, #4]
 800cfee:	695b      	ldr	r3, [r3, #20]
 800cff0:	2b00      	cmp	r3, #0
 800cff2:	d10e      	bne.n	800d012 <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 800cff4:	69fb      	ldr	r3, [r7, #28]
 800cff6:	4a43      	ldr	r2, [pc, #268]	@ (800d104 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800cff8:	4293      	cmp	r3, r2
 800cffa:	d906      	bls.n	800d00a <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800cffc:	69fb      	ldr	r3, [r7, #28]
 800cffe:	4a40      	ldr	r2, [pc, #256]	@ (800d100 <HAL_SD_ConfigWideBusOperation+0x218>)
 800d000:	fba2 2303 	umull	r2, r3, r2, r3
 800d004:	0e5b      	lsrs	r3, r3, #25
 800d006:	61bb      	str	r3, [r7, #24]
 800d008:	e03d      	b.n	800d086 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800d00a:	687b      	ldr	r3, [r7, #4]
 800d00c:	695b      	ldr	r3, [r3, #20]
 800d00e:	61bb      	str	r3, [r7, #24]
 800d010:	e039      	b.n	800d086 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 800d012:	687b      	ldr	r3, [r7, #4]
 800d014:	695b      	ldr	r3, [r3, #20]
 800d016:	005b      	lsls	r3, r3, #1
 800d018:	69fa      	ldr	r2, [r7, #28]
 800d01a:	fbb2 f3f3 	udiv	r3, r2, r3
 800d01e:	4a39      	ldr	r2, [pc, #228]	@ (800d104 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800d020:	4293      	cmp	r3, r2
 800d022:	d906      	bls.n	800d032 <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800d024:	69fb      	ldr	r3, [r7, #28]
 800d026:	4a36      	ldr	r2, [pc, #216]	@ (800d100 <HAL_SD_ConfigWideBusOperation+0x218>)
 800d028:	fba2 2303 	umull	r2, r3, r2, r3
 800d02c:	0e5b      	lsrs	r3, r3, #25
 800d02e:	61bb      	str	r3, [r7, #24]
 800d030:	e029      	b.n	800d086 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800d032:	687b      	ldr	r3, [r7, #4]
 800d034:	695b      	ldr	r3, [r3, #20]
 800d036:	61bb      	str	r3, [r7, #24]
 800d038:	e025      	b.n	800d086 <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800d03a:	687b      	ldr	r3, [r7, #4]
 800d03c:	695b      	ldr	r3, [r3, #20]
 800d03e:	2b00      	cmp	r3, #0
 800d040:	d10e      	bne.n	800d060 <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 800d042:	69fb      	ldr	r3, [r7, #28]
 800d044:	4a30      	ldr	r2, [pc, #192]	@ (800d108 <HAL_SD_ConfigWideBusOperation+0x220>)
 800d046:	4293      	cmp	r3, r2
 800d048:	d906      	bls.n	800d058 <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800d04a:	69fb      	ldr	r3, [r7, #28]
 800d04c:	4a2c      	ldr	r2, [pc, #176]	@ (800d100 <HAL_SD_ConfigWideBusOperation+0x218>)
 800d04e:	fba2 2303 	umull	r2, r3, r2, r3
 800d052:	0e1b      	lsrs	r3, r3, #24
 800d054:	61bb      	str	r3, [r7, #24]
 800d056:	e016      	b.n	800d086 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	695b      	ldr	r3, [r3, #20]
 800d05c:	61bb      	str	r3, [r7, #24]
 800d05e:	e012      	b.n	800d086 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	695b      	ldr	r3, [r3, #20]
 800d064:	005b      	lsls	r3, r3, #1
 800d066:	69fa      	ldr	r2, [r7, #28]
 800d068:	fbb2 f3f3 	udiv	r3, r2, r3
 800d06c:	4a26      	ldr	r2, [pc, #152]	@ (800d108 <HAL_SD_ConfigWideBusOperation+0x220>)
 800d06e:	4293      	cmp	r3, r2
 800d070:	d906      	bls.n	800d080 <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800d072:	69fb      	ldr	r3, [r7, #28]
 800d074:	4a22      	ldr	r2, [pc, #136]	@ (800d100 <HAL_SD_ConfigWideBusOperation+0x218>)
 800d076:	fba2 2303 	umull	r2, r3, r2, r3
 800d07a:	0e1b      	lsrs	r3, r3, #24
 800d07c:	61bb      	str	r3, [r7, #24]
 800d07e:	e002      	b.n	800d086 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	695b      	ldr	r3, [r3, #20]
 800d084:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 800d086:	687b      	ldr	r3, [r7, #4]
 800d088:	681c      	ldr	r4, [r3, #0]
 800d08a:	466a      	mov	r2, sp
 800d08c:	f107 0314 	add.w	r3, r7, #20
 800d090:	e893 0003 	ldmia.w	r3, {r0, r1}
 800d094:	e882 0003 	stmia.w	r2, {r0, r1}
 800d098:	f107 0308 	add.w	r3, r7, #8
 800d09c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800d09e:	4620      	mov	r0, r4
 800d0a0:	f001 ff7a 	bl	800ef98 <SDMMC_Init>
 800d0a4:	e008      	b.n	800d0b8 <HAL_SD_ConfigWideBusOperation+0x1d0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d0aa:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800d0ae:	687b      	ldr	r3, [r7, #4]
 800d0b0:	635a      	str	r2, [r3, #52]	@ 0x34
      status = HAL_ERROR;
 800d0b2:	2301      	movs	r3, #1
 800d0b4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800d0b8:	687b      	ldr	r3, [r7, #4]
 800d0ba:	681b      	ldr	r3, [r3, #0]
 800d0bc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800d0c0:	4618      	mov	r0, r3
 800d0c2:	f002 f847 	bl	800f154 <SDMMC_CmdBlockLength>
 800d0c6:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800d0c8:	6a3b      	ldr	r3, [r7, #32]
 800d0ca:	2b00      	cmp	r3, #0
 800d0cc:	d00c      	beq.n	800d0e8 <HAL_SD_ConfigWideBusOperation+0x200>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	681b      	ldr	r3, [r3, #0]
 800d0d2:	4a0a      	ldr	r2, [pc, #40]	@ (800d0fc <HAL_SD_ConfigWideBusOperation+0x214>)
 800d0d4:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800d0d6:	687b      	ldr	r3, [r7, #4]
 800d0d8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d0da:	6a3b      	ldr	r3, [r7, #32]
 800d0dc:	431a      	orrs	r2, r3
 800d0de:	687b      	ldr	r3, [r7, #4]
 800d0e0:	635a      	str	r2, [r3, #52]	@ 0x34
    status = HAL_ERROR;
 800d0e2:	2301      	movs	r3, #1
 800d0e4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800d0e8:	687b      	ldr	r3, [r7, #4]
 800d0ea:	2201      	movs	r2, #1
 800d0ec:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return status;
 800d0f0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800d0f4:	4618      	mov	r0, r3
 800d0f6:	372c      	adds	r7, #44	@ 0x2c
 800d0f8:	46bd      	mov	sp, r7
 800d0fa:	bd90      	pop	{r4, r7, pc}
 800d0fc:	1fe00fff 	.word	0x1fe00fff
 800d100:	55e63b89 	.word	0x55e63b89
 800d104:	02faf080 	.word	0x02faf080
 800d108:	017d7840 	.word	0x017d7840

0800d10c <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800d10c:	b580      	push	{r7, lr}
 800d10e:	b086      	sub	sp, #24
 800d110:	af00      	add	r7, sp, #0
 800d112:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800d114:	2300      	movs	r3, #0
 800d116:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800d118:	f107 030c 	add.w	r3, r7, #12
 800d11c:	4619      	mov	r1, r3
 800d11e:	6878      	ldr	r0, [r7, #4]
 800d120:	f000 fa40 	bl	800d5a4 <SD_SendStatus>
 800d124:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800d126:	697b      	ldr	r3, [r7, #20]
 800d128:	2b00      	cmp	r3, #0
 800d12a:	d005      	beq.n	800d138 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800d12c:	687b      	ldr	r3, [r7, #4]
 800d12e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d130:	697b      	ldr	r3, [r7, #20]
 800d132:	431a      	orrs	r2, r3
 800d134:	687b      	ldr	r3, [r7, #4]
 800d136:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800d138:	68fb      	ldr	r3, [r7, #12]
 800d13a:	0a5b      	lsrs	r3, r3, #9
 800d13c:	f003 030f 	and.w	r3, r3, #15
 800d140:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800d142:	693b      	ldr	r3, [r7, #16]
}
 800d144:	4618      	mov	r0, r3
 800d146:	3718      	adds	r7, #24
 800d148:	46bd      	mov	sp, r7
 800d14a:	bd80      	pop	{r7, pc}

0800d14c <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800d14c:	b580      	push	{r7, lr}
 800d14e:	b090      	sub	sp, #64	@ 0x40
 800d150:	af00      	add	r7, sp, #0
 800d152:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 800d154:	2300      	movs	r3, #0
 800d156:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 800d158:	f7f9 fa90 	bl	800667c <HAL_GetTick>
 800d15c:	63f8      	str	r0, [r7, #60]	@ 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	681b      	ldr	r3, [r3, #0]
 800d162:	4618      	mov	r0, r3
 800d164:	f001 ff71 	bl	800f04a <SDMMC_GetPowerState>
 800d168:	4603      	mov	r3, r0
 800d16a:	2b00      	cmp	r3, #0
 800d16c:	d102      	bne.n	800d174 <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800d16e:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800d172:	e0b5      	b.n	800d2e0 <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d178:	2b03      	cmp	r3, #3
 800d17a:	d02e      	beq.n	800d1da <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800d17c:	687b      	ldr	r3, [r7, #4]
 800d17e:	681b      	ldr	r3, [r3, #0]
 800d180:	4618      	mov	r0, r3
 800d182:	f002 f9bc 	bl	800f4fe <SDMMC_CmdSendCID>
 800d186:	63b8      	str	r0, [r7, #56]	@ 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800d188:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d18a:	2b00      	cmp	r3, #0
 800d18c:	d001      	beq.n	800d192 <SD_InitCard+0x46>
    {
      return errorstate;
 800d18e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d190:	e0a6      	b.n	800d2e0 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800d192:	687b      	ldr	r3, [r7, #4]
 800d194:	681b      	ldr	r3, [r3, #0]
 800d196:	2100      	movs	r1, #0
 800d198:	4618      	mov	r0, r3
 800d19a:	f001 ff9c 	bl	800f0d6 <SDMMC_GetResponse>
 800d19e:	4602      	mov	r2, r0
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800d1a4:	687b      	ldr	r3, [r7, #4]
 800d1a6:	681b      	ldr	r3, [r3, #0]
 800d1a8:	2104      	movs	r1, #4
 800d1aa:	4618      	mov	r0, r3
 800d1ac:	f001 ff93 	bl	800f0d6 <SDMMC_GetResponse>
 800d1b0:	4602      	mov	r2, r0
 800d1b2:	687b      	ldr	r3, [r7, #4]
 800d1b4:	671a      	str	r2, [r3, #112]	@ 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800d1b6:	687b      	ldr	r3, [r7, #4]
 800d1b8:	681b      	ldr	r3, [r3, #0]
 800d1ba:	2108      	movs	r1, #8
 800d1bc:	4618      	mov	r0, r3
 800d1be:	f001 ff8a 	bl	800f0d6 <SDMMC_GetResponse>
 800d1c2:	4602      	mov	r2, r0
 800d1c4:	687b      	ldr	r3, [r7, #4]
 800d1c6:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800d1c8:	687b      	ldr	r3, [r7, #4]
 800d1ca:	681b      	ldr	r3, [r3, #0]
 800d1cc:	210c      	movs	r1, #12
 800d1ce:	4618      	mov	r0, r3
 800d1d0:	f001 ff81 	bl	800f0d6 <SDMMC_GetResponse>
 800d1d4:	4602      	mov	r2, r0
 800d1d6:	687b      	ldr	r3, [r7, #4]
 800d1d8:	679a      	str	r2, [r3, #120]	@ 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800d1da:	687b      	ldr	r3, [r7, #4]
 800d1dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d1de:	2b03      	cmp	r3, #3
 800d1e0:	d01d      	beq.n	800d21e <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 800d1e2:	e019      	b.n	800d218 <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800d1e4:	687b      	ldr	r3, [r7, #4]
 800d1e6:	681b      	ldr	r3, [r3, #0]
 800d1e8:	f107 020a 	add.w	r2, r7, #10
 800d1ec:	4611      	mov	r1, r2
 800d1ee:	4618      	mov	r0, r3
 800d1f0:	f002 f9c4 	bl	800f57c <SDMMC_CmdSetRelAdd>
 800d1f4:	63b8      	str	r0, [r7, #56]	@ 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 800d1f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d1f8:	2b00      	cmp	r3, #0
 800d1fa:	d001      	beq.n	800d200 <SD_InitCard+0xb4>
      {
        return errorstate;
 800d1fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d1fe:	e06f      	b.n	800d2e0 <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 800d200:	f7f9 fa3c 	bl	800667c <HAL_GetTick>
 800d204:	4602      	mov	r2, r0
 800d206:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d208:	1ad3      	subs	r3, r2, r3
 800d20a:	f241 3287 	movw	r2, #4999	@ 0x1387
 800d20e:	4293      	cmp	r3, r2
 800d210:	d902      	bls.n	800d218 <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 800d212:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800d216:	e063      	b.n	800d2e0 <SD_InitCard+0x194>
    while (sd_rca == 0U)
 800d218:	897b      	ldrh	r3, [r7, #10]
 800d21a:	2b00      	cmp	r3, #0
 800d21c:	d0e2      	beq.n	800d1e4 <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 800d21e:	687b      	ldr	r3, [r7, #4]
 800d220:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d222:	2b03      	cmp	r3, #3
 800d224:	d036      	beq.n	800d294 <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800d226:	897b      	ldrh	r3, [r7, #10]
 800d228:	461a      	mov	r2, r3
 800d22a:	687b      	ldr	r3, [r7, #4]
 800d22c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	681a      	ldr	r2, [r3, #0]
 800d232:	687b      	ldr	r3, [r7, #4]
 800d234:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d236:	041b      	lsls	r3, r3, #16
 800d238:	4619      	mov	r1, r3
 800d23a:	4610      	mov	r0, r2
 800d23c:	f002 f97e 	bl	800f53c <SDMMC_CmdSendCSD>
 800d240:	63b8      	str	r0, [r7, #56]	@ 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800d242:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d244:	2b00      	cmp	r3, #0
 800d246:	d001      	beq.n	800d24c <SD_InitCard+0x100>
    {
      return errorstate;
 800d248:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d24a:	e049      	b.n	800d2e0 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800d24c:	687b      	ldr	r3, [r7, #4]
 800d24e:	681b      	ldr	r3, [r3, #0]
 800d250:	2100      	movs	r1, #0
 800d252:	4618      	mov	r0, r3
 800d254:	f001 ff3f 	bl	800f0d6 <SDMMC_GetResponse>
 800d258:	4602      	mov	r2, r0
 800d25a:	687b      	ldr	r3, [r7, #4]
 800d25c:	65da      	str	r2, [r3, #92]	@ 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800d25e:	687b      	ldr	r3, [r7, #4]
 800d260:	681b      	ldr	r3, [r3, #0]
 800d262:	2104      	movs	r1, #4
 800d264:	4618      	mov	r0, r3
 800d266:	f001 ff36 	bl	800f0d6 <SDMMC_GetResponse>
 800d26a:	4602      	mov	r2, r0
 800d26c:	687b      	ldr	r3, [r7, #4]
 800d26e:	661a      	str	r2, [r3, #96]	@ 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800d270:	687b      	ldr	r3, [r7, #4]
 800d272:	681b      	ldr	r3, [r3, #0]
 800d274:	2108      	movs	r1, #8
 800d276:	4618      	mov	r0, r3
 800d278:	f001 ff2d 	bl	800f0d6 <SDMMC_GetResponse>
 800d27c:	4602      	mov	r2, r0
 800d27e:	687b      	ldr	r3, [r7, #4]
 800d280:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800d282:	687b      	ldr	r3, [r7, #4]
 800d284:	681b      	ldr	r3, [r3, #0]
 800d286:	210c      	movs	r1, #12
 800d288:	4618      	mov	r0, r3
 800d28a:	f001 ff24 	bl	800f0d6 <SDMMC_GetResponse>
 800d28e:	4602      	mov	r2, r0
 800d290:	687b      	ldr	r3, [r7, #4]
 800d292:	669a      	str	r2, [r3, #104]	@ 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800d294:	687b      	ldr	r3, [r7, #4]
 800d296:	681b      	ldr	r3, [r3, #0]
 800d298:	2104      	movs	r1, #4
 800d29a:	4618      	mov	r0, r3
 800d29c:	f001 ff1b 	bl	800f0d6 <SDMMC_GetResponse>
 800d2a0:	4603      	mov	r3, r0
 800d2a2:	0d1a      	lsrs	r2, r3, #20
 800d2a4:	687b      	ldr	r3, [r7, #4]
 800d2a6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800d2a8:	f107 030c 	add.w	r3, r7, #12
 800d2ac:	4619      	mov	r1, r3
 800d2ae:	6878      	ldr	r0, [r7, #4]
 800d2b0:	f7ff fb8c 	bl	800c9cc <HAL_SD_GetCardCSD>
 800d2b4:	4603      	mov	r3, r0
 800d2b6:	2b00      	cmp	r3, #0
 800d2b8:	d002      	beq.n	800d2c0 <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d2ba:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800d2be:	e00f      	b.n	800d2e0 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800d2c0:	687b      	ldr	r3, [r7, #4]
 800d2c2:	681a      	ldr	r2, [r3, #0]
 800d2c4:	687b      	ldr	r3, [r7, #4]
 800d2c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d2c8:	041b      	lsls	r3, r3, #16
 800d2ca:	4619      	mov	r1, r3
 800d2cc:	4610      	mov	r0, r2
 800d2ce:	f002 f82d 	bl	800f32c <SDMMC_CmdSelDesel>
 800d2d2:	63b8      	str	r0, [r7, #56]	@ 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 800d2d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d2d6:	2b00      	cmp	r3, #0
 800d2d8:	d001      	beq.n	800d2de <SD_InitCard+0x192>
  {
    return errorstate;
 800d2da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d2dc:	e000      	b.n	800d2e0 <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800d2de:	2300      	movs	r3, #0
}
 800d2e0:	4618      	mov	r0, r3
 800d2e2:	3740      	adds	r7, #64	@ 0x40
 800d2e4:	46bd      	mov	sp, r7
 800d2e6:	bd80      	pop	{r7, pc}

0800d2e8 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800d2e8:	b580      	push	{r7, lr}
 800d2ea:	b086      	sub	sp, #24
 800d2ec:	af00      	add	r7, sp, #0
 800d2ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800d2f0:	2300      	movs	r3, #0
 800d2f2:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 800d2f4:	2300      	movs	r3, #0
 800d2f6:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 800d2f8:	2300      	movs	r3, #0
 800d2fa:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800d2fc:	687b      	ldr	r3, [r7, #4]
 800d2fe:	681b      	ldr	r3, [r3, #0]
 800d300:	4618      	mov	r0, r3
 800d302:	f002 f836 	bl	800f372 <SDMMC_CmdGoIdleState>
 800d306:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800d308:	68fb      	ldr	r3, [r7, #12]
 800d30a:	2b00      	cmp	r3, #0
 800d30c:	d001      	beq.n	800d312 <SD_PowerON+0x2a>
  {
    return errorstate;
 800d30e:	68fb      	ldr	r3, [r7, #12]
 800d310:	e072      	b.n	800d3f8 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800d312:	687b      	ldr	r3, [r7, #4]
 800d314:	681b      	ldr	r3, [r3, #0]
 800d316:	4618      	mov	r0, r3
 800d318:	f002 f849 	bl	800f3ae <SDMMC_CmdOperCond>
 800d31c:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 800d31e:	68fb      	ldr	r3, [r7, #12]
 800d320:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800d324:	d10d      	bne.n	800d342 <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800d326:	687b      	ldr	r3, [r7, #4]
 800d328:	2200      	movs	r2, #0
 800d32a:	63da      	str	r2, [r3, #60]	@ 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	681b      	ldr	r3, [r3, #0]
 800d330:	4618      	mov	r0, r3
 800d332:	f002 f81e 	bl	800f372 <SDMMC_CmdGoIdleState>
 800d336:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800d338:	68fb      	ldr	r3, [r7, #12]
 800d33a:	2b00      	cmp	r3, #0
 800d33c:	d004      	beq.n	800d348 <SD_PowerON+0x60>
    {
      return errorstate;
 800d33e:	68fb      	ldr	r3, [r7, #12]
 800d340:	e05a      	b.n	800d3f8 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800d342:	687b      	ldr	r3, [r7, #4]
 800d344:	2201      	movs	r2, #1
 800d346:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d34c:	2b01      	cmp	r3, #1
 800d34e:	d137      	bne.n	800d3c0 <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800d350:	687b      	ldr	r3, [r7, #4]
 800d352:	681b      	ldr	r3, [r3, #0]
 800d354:	2100      	movs	r1, #0
 800d356:	4618      	mov	r0, r3
 800d358:	f002 f849 	bl	800f3ee <SDMMC_CmdAppCommand>
 800d35c:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800d35e:	68fb      	ldr	r3, [r7, #12]
 800d360:	2b00      	cmp	r3, #0
 800d362:	d02d      	beq.n	800d3c0 <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d364:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800d368:	e046      	b.n	800d3f8 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800d36a:	687b      	ldr	r3, [r7, #4]
 800d36c:	681b      	ldr	r3, [r3, #0]
 800d36e:	2100      	movs	r1, #0
 800d370:	4618      	mov	r0, r3
 800d372:	f002 f83c 	bl	800f3ee <SDMMC_CmdAppCommand>
 800d376:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800d378:	68fb      	ldr	r3, [r7, #12]
 800d37a:	2b00      	cmp	r3, #0
 800d37c:	d001      	beq.n	800d382 <SD_PowerON+0x9a>
    {
      return errorstate;
 800d37e:	68fb      	ldr	r3, [r7, #12]
 800d380:	e03a      	b.n	800d3f8 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 800d382:	687b      	ldr	r3, [r7, #4]
 800d384:	681b      	ldr	r3, [r3, #0]
 800d386:	491e      	ldr	r1, [pc, #120]	@ (800d400 <SD_PowerON+0x118>)
 800d388:	4618      	mov	r0, r3
 800d38a:	f002 f853 	bl	800f434 <SDMMC_CmdAppOperCommand>
 800d38e:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 800d390:	68fb      	ldr	r3, [r7, #12]
 800d392:	2b00      	cmp	r3, #0
 800d394:	d002      	beq.n	800d39c <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d396:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800d39a:	e02d      	b.n	800d3f8 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800d39c:	687b      	ldr	r3, [r7, #4]
 800d39e:	681b      	ldr	r3, [r3, #0]
 800d3a0:	2100      	movs	r1, #0
 800d3a2:	4618      	mov	r0, r3
 800d3a4:	f001 fe97 	bl	800f0d6 <SDMMC_GetResponse>
 800d3a8:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800d3aa:	697b      	ldr	r3, [r7, #20]
 800d3ac:	0fdb      	lsrs	r3, r3, #31
 800d3ae:	2b01      	cmp	r3, #1
 800d3b0:	d101      	bne.n	800d3b6 <SD_PowerON+0xce>
 800d3b2:	2301      	movs	r3, #1
 800d3b4:	e000      	b.n	800d3b8 <SD_PowerON+0xd0>
 800d3b6:	2300      	movs	r3, #0
 800d3b8:	613b      	str	r3, [r7, #16]

    count++;
 800d3ba:	68bb      	ldr	r3, [r7, #8]
 800d3bc:	3301      	adds	r3, #1
 800d3be:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800d3c0:	68bb      	ldr	r3, [r7, #8]
 800d3c2:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800d3c6:	4293      	cmp	r3, r2
 800d3c8:	d802      	bhi.n	800d3d0 <SD_PowerON+0xe8>
 800d3ca:	693b      	ldr	r3, [r7, #16]
 800d3cc:	2b00      	cmp	r3, #0
 800d3ce:	d0cc      	beq.n	800d36a <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 800d3d0:	68bb      	ldr	r3, [r7, #8]
 800d3d2:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800d3d6:	4293      	cmp	r3, r2
 800d3d8:	d902      	bls.n	800d3e0 <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800d3da:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800d3de:	e00b      	b.n	800d3f8 <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	2200      	movs	r2, #0
 800d3e4:	639a      	str	r2, [r3, #56]	@ 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 800d3e6:	697b      	ldr	r3, [r7, #20]
 800d3e8:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800d3ec:	2b00      	cmp	r3, #0
 800d3ee:	d002      	beq.n	800d3f6 <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800d3f0:	687b      	ldr	r3, [r7, #4]
 800d3f2:	2201      	movs	r2, #1
 800d3f4:	639a      	str	r2, [r3, #56]	@ 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 800d3f6:	2300      	movs	r3, #0
}
 800d3f8:	4618      	mov	r0, r3
 800d3fa:	3718      	adds	r7, #24
 800d3fc:	46bd      	mov	sp, r7
 800d3fe:	bd80      	pop	{r7, pc}
 800d400:	c1100000 	.word	0xc1100000

0800d404 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 800d404:	b580      	push	{r7, lr}
 800d406:	b08c      	sub	sp, #48	@ 0x30
 800d408:	af00      	add	r7, sp, #0
 800d40a:	6078      	str	r0, [r7, #4]
 800d40c:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800d40e:	f7f9 f935 	bl	800667c <HAL_GetTick>
 800d412:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 800d414:	683b      	ldr	r3, [r7, #0]
 800d416:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800d418:	687b      	ldr	r3, [r7, #4]
 800d41a:	681b      	ldr	r3, [r3, #0]
 800d41c:	2100      	movs	r1, #0
 800d41e:	4618      	mov	r0, r3
 800d420:	f001 fe59 	bl	800f0d6 <SDMMC_GetResponse>
 800d424:	4603      	mov	r3, r0
 800d426:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800d42a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800d42e:	d102      	bne.n	800d436 <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800d430:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800d434:	e0b0      	b.n	800d598 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 800d436:	687b      	ldr	r3, [r7, #4]
 800d438:	681b      	ldr	r3, [r3, #0]
 800d43a:	2140      	movs	r1, #64	@ 0x40
 800d43c:	4618      	mov	r0, r3
 800d43e:	f001 fe89 	bl	800f154 <SDMMC_CmdBlockLength>
 800d442:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800d444:	6a3b      	ldr	r3, [r7, #32]
 800d446:	2b00      	cmp	r3, #0
 800d448:	d005      	beq.n	800d456 <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800d44a:	687b      	ldr	r3, [r7, #4]
 800d44c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d44e:	687b      	ldr	r3, [r7, #4]
 800d450:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 800d452:	6a3b      	ldr	r3, [r7, #32]
 800d454:	e0a0      	b.n	800d598 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800d456:	687b      	ldr	r3, [r7, #4]
 800d458:	681a      	ldr	r2, [r3, #0]
 800d45a:	687b      	ldr	r3, [r7, #4]
 800d45c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d45e:	041b      	lsls	r3, r3, #16
 800d460:	4619      	mov	r1, r3
 800d462:	4610      	mov	r0, r2
 800d464:	f001 ffc3 	bl	800f3ee <SDMMC_CmdAppCommand>
 800d468:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800d46a:	6a3b      	ldr	r3, [r7, #32]
 800d46c:	2b00      	cmp	r3, #0
 800d46e:	d005      	beq.n	800d47c <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800d470:	687b      	ldr	r3, [r7, #4]
 800d472:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d474:	687b      	ldr	r3, [r7, #4]
 800d476:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 800d478:	6a3b      	ldr	r3, [r7, #32]
 800d47a:	e08d      	b.n	800d598 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800d47c:	f04f 33ff 	mov.w	r3, #4294967295
 800d480:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 800d482:	2340      	movs	r3, #64	@ 0x40
 800d484:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 800d486:	2360      	movs	r3, #96	@ 0x60
 800d488:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800d48a:	2302      	movs	r3, #2
 800d48c:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800d48e:	2300      	movs	r3, #0
 800d490:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800d492:	2301      	movs	r3, #1
 800d494:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800d496:	687b      	ldr	r3, [r7, #4]
 800d498:	681b      	ldr	r3, [r3, #0]
 800d49a:	f107 0208 	add.w	r2, r7, #8
 800d49e:	4611      	mov	r1, r2
 800d4a0:	4618      	mov	r0, r3
 800d4a2:	f001 fe2b 	bl	800f0fc <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 800d4a6:	687b      	ldr	r3, [r7, #4]
 800d4a8:	681b      	ldr	r3, [r3, #0]
 800d4aa:	4618      	mov	r0, r3
 800d4ac:	f002 f8ab 	bl	800f606 <SDMMC_CmdStatusRegister>
 800d4b0:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800d4b2:	6a3b      	ldr	r3, [r7, #32]
 800d4b4:	2b00      	cmp	r3, #0
 800d4b6:	d02b      	beq.n	800d510 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800d4b8:	687b      	ldr	r3, [r7, #4]
 800d4ba:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d4bc:	687b      	ldr	r3, [r7, #4]
 800d4be:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 800d4c0:	6a3b      	ldr	r3, [r7, #32]
 800d4c2:	e069      	b.n	800d598 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 800d4c4:	687b      	ldr	r3, [r7, #4]
 800d4c6:	681b      	ldr	r3, [r3, #0]
 800d4c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d4ca:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800d4ce:	2b00      	cmp	r3, #0
 800d4d0:	d013      	beq.n	800d4fa <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 800d4d2:	2300      	movs	r3, #0
 800d4d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d4d6:	e00d      	b.n	800d4f4 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 800d4d8:	687b      	ldr	r3, [r7, #4]
 800d4da:	681b      	ldr	r3, [r3, #0]
 800d4dc:	4618      	mov	r0, r3
 800d4de:	f001 fd85 	bl	800efec <SDMMC_ReadFIFO>
 800d4e2:	4602      	mov	r2, r0
 800d4e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d4e6:	601a      	str	r2, [r3, #0]
        pData++;
 800d4e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d4ea:	3304      	adds	r3, #4
 800d4ec:	62bb      	str	r3, [r7, #40]	@ 0x28
      for (count = 0U; count < 8U; count++)
 800d4ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d4f0:	3301      	adds	r3, #1
 800d4f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d4f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d4f6:	2b07      	cmp	r3, #7
 800d4f8:	d9ee      	bls.n	800d4d8 <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800d4fa:	f7f9 f8bf 	bl	800667c <HAL_GetTick>
 800d4fe:	4602      	mov	r2, r0
 800d500:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d502:	1ad3      	subs	r3, r2, r3
 800d504:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d508:	d102      	bne.n	800d510 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800d50a:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800d50e:	e043      	b.n	800d598 <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800d510:	687b      	ldr	r3, [r7, #4]
 800d512:	681b      	ldr	r3, [r3, #0]
 800d514:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d516:	f403 7395 	and.w	r3, r3, #298	@ 0x12a
 800d51a:	2b00      	cmp	r3, #0
 800d51c:	d0d2      	beq.n	800d4c4 <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800d51e:	687b      	ldr	r3, [r7, #4]
 800d520:	681b      	ldr	r3, [r3, #0]
 800d522:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d524:	f003 0308 	and.w	r3, r3, #8
 800d528:	2b00      	cmp	r3, #0
 800d52a:	d001      	beq.n	800d530 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 800d52c:	2308      	movs	r3, #8
 800d52e:	e033      	b.n	800d598 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800d530:	687b      	ldr	r3, [r7, #4]
 800d532:	681b      	ldr	r3, [r3, #0]
 800d534:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d536:	f003 0302 	and.w	r3, r3, #2
 800d53a:	2b00      	cmp	r3, #0
 800d53c:	d001      	beq.n	800d542 <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800d53e:	2302      	movs	r3, #2
 800d540:	e02a      	b.n	800d598 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800d542:	687b      	ldr	r3, [r7, #4]
 800d544:	681b      	ldr	r3, [r3, #0]
 800d546:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d548:	f003 0320 	and.w	r3, r3, #32
 800d54c:	2b00      	cmp	r3, #0
 800d54e:	d017      	beq.n	800d580 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 800d550:	2320      	movs	r3, #32
 800d552:	e021      	b.n	800d598 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 800d554:	687b      	ldr	r3, [r7, #4]
 800d556:	681b      	ldr	r3, [r3, #0]
 800d558:	4618      	mov	r0, r3
 800d55a:	f001 fd47 	bl	800efec <SDMMC_ReadFIFO>
 800d55e:	4602      	mov	r2, r0
 800d560:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d562:	601a      	str	r2, [r3, #0]
    pData++;
 800d564:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d566:	3304      	adds	r3, #4
 800d568:	62bb      	str	r3, [r7, #40]	@ 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800d56a:	f7f9 f887 	bl	800667c <HAL_GetTick>
 800d56e:	4602      	mov	r2, r0
 800d570:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d572:	1ad3      	subs	r3, r2, r3
 800d574:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d578:	d102      	bne.n	800d580 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800d57a:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800d57e:	e00b      	b.n	800d598 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	681b      	ldr	r3, [r3, #0]
 800d584:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d586:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800d58a:	2b00      	cmp	r3, #0
 800d58c:	d1e2      	bne.n	800d554 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800d58e:	687b      	ldr	r3, [r7, #4]
 800d590:	681b      	ldr	r3, [r3, #0]
 800d592:	4a03      	ldr	r2, [pc, #12]	@ (800d5a0 <SD_SendSDStatus+0x19c>)
 800d594:	639a      	str	r2, [r3, #56]	@ 0x38

  return HAL_SD_ERROR_NONE;
 800d596:	2300      	movs	r3, #0
}
 800d598:	4618      	mov	r0, r3
 800d59a:	3730      	adds	r7, #48	@ 0x30
 800d59c:	46bd      	mov	sp, r7
 800d59e:	bd80      	pop	{r7, pc}
 800d5a0:	18000f3a 	.word	0x18000f3a

0800d5a4 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800d5a4:	b580      	push	{r7, lr}
 800d5a6:	b084      	sub	sp, #16
 800d5a8:	af00      	add	r7, sp, #0
 800d5aa:	6078      	str	r0, [r7, #4]
 800d5ac:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 800d5ae:	683b      	ldr	r3, [r7, #0]
 800d5b0:	2b00      	cmp	r3, #0
 800d5b2:	d102      	bne.n	800d5ba <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800d5b4:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800d5b8:	e018      	b.n	800d5ec <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800d5ba:	687b      	ldr	r3, [r7, #4]
 800d5bc:	681a      	ldr	r2, [r3, #0]
 800d5be:	687b      	ldr	r3, [r7, #4]
 800d5c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d5c2:	041b      	lsls	r3, r3, #16
 800d5c4:	4619      	mov	r1, r3
 800d5c6:	4610      	mov	r0, r2
 800d5c8:	f001 fffa 	bl	800f5c0 <SDMMC_CmdSendStatus>
 800d5cc:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800d5ce:	68fb      	ldr	r3, [r7, #12]
 800d5d0:	2b00      	cmp	r3, #0
 800d5d2:	d001      	beq.n	800d5d8 <SD_SendStatus+0x34>
  {
    return errorstate;
 800d5d4:	68fb      	ldr	r3, [r7, #12]
 800d5d6:	e009      	b.n	800d5ec <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800d5d8:	687b      	ldr	r3, [r7, #4]
 800d5da:	681b      	ldr	r3, [r3, #0]
 800d5dc:	2100      	movs	r1, #0
 800d5de:	4618      	mov	r0, r3
 800d5e0:	f001 fd79 	bl	800f0d6 <SDMMC_GetResponse>
 800d5e4:	4602      	mov	r2, r0
 800d5e6:	683b      	ldr	r3, [r7, #0]
 800d5e8:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800d5ea:	2300      	movs	r3, #0
}
 800d5ec:	4618      	mov	r0, r3
 800d5ee:	3710      	adds	r7, #16
 800d5f0:	46bd      	mov	sp, r7
 800d5f2:	bd80      	pop	{r7, pc}

0800d5f4 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800d5f4:	b580      	push	{r7, lr}
 800d5f6:	b086      	sub	sp, #24
 800d5f8:	af00      	add	r7, sp, #0
 800d5fa:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800d5fc:	2300      	movs	r3, #0
 800d5fe:	60fb      	str	r3, [r7, #12]
 800d600:	2300      	movs	r3, #0
 800d602:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800d604:	687b      	ldr	r3, [r7, #4]
 800d606:	681b      	ldr	r3, [r3, #0]
 800d608:	2100      	movs	r1, #0
 800d60a:	4618      	mov	r0, r3
 800d60c:	f001 fd63 	bl	800f0d6 <SDMMC_GetResponse>
 800d610:	4603      	mov	r3, r0
 800d612:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800d616:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800d61a:	d102      	bne.n	800d622 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800d61c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800d620:	e02f      	b.n	800d682 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800d622:	f107 030c 	add.w	r3, r7, #12
 800d626:	4619      	mov	r1, r3
 800d628:	6878      	ldr	r0, [r7, #4]
 800d62a:	f000 f879 	bl	800d720 <SD_FindSCR>
 800d62e:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800d630:	697b      	ldr	r3, [r7, #20]
 800d632:	2b00      	cmp	r3, #0
 800d634:	d001      	beq.n	800d63a <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800d636:	697b      	ldr	r3, [r7, #20]
 800d638:	e023      	b.n	800d682 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800d63a:	693b      	ldr	r3, [r7, #16]
 800d63c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800d640:	2b00      	cmp	r3, #0
 800d642:	d01c      	beq.n	800d67e <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800d644:	687b      	ldr	r3, [r7, #4]
 800d646:	681a      	ldr	r2, [r3, #0]
 800d648:	687b      	ldr	r3, [r7, #4]
 800d64a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d64c:	041b      	lsls	r3, r3, #16
 800d64e:	4619      	mov	r1, r3
 800d650:	4610      	mov	r0, r2
 800d652:	f001 fecc 	bl	800f3ee <SDMMC_CmdAppCommand>
 800d656:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800d658:	697b      	ldr	r3, [r7, #20]
 800d65a:	2b00      	cmp	r3, #0
 800d65c:	d001      	beq.n	800d662 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800d65e:	697b      	ldr	r3, [r7, #20]
 800d660:	e00f      	b.n	800d682 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800d662:	687b      	ldr	r3, [r7, #4]
 800d664:	681b      	ldr	r3, [r3, #0]
 800d666:	2102      	movs	r1, #2
 800d668:	4618      	mov	r0, r3
 800d66a:	f001 ff03 	bl	800f474 <SDMMC_CmdBusWidth>
 800d66e:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800d670:	697b      	ldr	r3, [r7, #20]
 800d672:	2b00      	cmp	r3, #0
 800d674:	d001      	beq.n	800d67a <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800d676:	697b      	ldr	r3, [r7, #20]
 800d678:	e003      	b.n	800d682 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800d67a:	2300      	movs	r3, #0
 800d67c:	e001      	b.n	800d682 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800d67e:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 800d682:	4618      	mov	r0, r3
 800d684:	3718      	adds	r7, #24
 800d686:	46bd      	mov	sp, r7
 800d688:	bd80      	pop	{r7, pc}

0800d68a <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800d68a:	b580      	push	{r7, lr}
 800d68c:	b086      	sub	sp, #24
 800d68e:	af00      	add	r7, sp, #0
 800d690:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800d692:	2300      	movs	r3, #0
 800d694:	60fb      	str	r3, [r7, #12]
 800d696:	2300      	movs	r3, #0
 800d698:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800d69a:	687b      	ldr	r3, [r7, #4]
 800d69c:	681b      	ldr	r3, [r3, #0]
 800d69e:	2100      	movs	r1, #0
 800d6a0:	4618      	mov	r0, r3
 800d6a2:	f001 fd18 	bl	800f0d6 <SDMMC_GetResponse>
 800d6a6:	4603      	mov	r3, r0
 800d6a8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800d6ac:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800d6b0:	d102      	bne.n	800d6b8 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800d6b2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800d6b6:	e02f      	b.n	800d718 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800d6b8:	f107 030c 	add.w	r3, r7, #12
 800d6bc:	4619      	mov	r1, r3
 800d6be:	6878      	ldr	r0, [r7, #4]
 800d6c0:	f000 f82e 	bl	800d720 <SD_FindSCR>
 800d6c4:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800d6c6:	697b      	ldr	r3, [r7, #20]
 800d6c8:	2b00      	cmp	r3, #0
 800d6ca:	d001      	beq.n	800d6d0 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800d6cc:	697b      	ldr	r3, [r7, #20]
 800d6ce:	e023      	b.n	800d718 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800d6d0:	693b      	ldr	r3, [r7, #16]
 800d6d2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800d6d6:	2b00      	cmp	r3, #0
 800d6d8:	d01c      	beq.n	800d714 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800d6da:	687b      	ldr	r3, [r7, #4]
 800d6dc:	681a      	ldr	r2, [r3, #0]
 800d6de:	687b      	ldr	r3, [r7, #4]
 800d6e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d6e2:	041b      	lsls	r3, r3, #16
 800d6e4:	4619      	mov	r1, r3
 800d6e6:	4610      	mov	r0, r2
 800d6e8:	f001 fe81 	bl	800f3ee <SDMMC_CmdAppCommand>
 800d6ec:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800d6ee:	697b      	ldr	r3, [r7, #20]
 800d6f0:	2b00      	cmp	r3, #0
 800d6f2:	d001      	beq.n	800d6f8 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800d6f4:	697b      	ldr	r3, [r7, #20]
 800d6f6:	e00f      	b.n	800d718 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	681b      	ldr	r3, [r3, #0]
 800d6fc:	2100      	movs	r1, #0
 800d6fe:	4618      	mov	r0, r3
 800d700:	f001 feb8 	bl	800f474 <SDMMC_CmdBusWidth>
 800d704:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800d706:	697b      	ldr	r3, [r7, #20]
 800d708:	2b00      	cmp	r3, #0
 800d70a:	d001      	beq.n	800d710 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800d70c:	697b      	ldr	r3, [r7, #20]
 800d70e:	e003      	b.n	800d718 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800d710:	2300      	movs	r3, #0
 800d712:	e001      	b.n	800d718 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800d714:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 800d718:	4618      	mov	r0, r3
 800d71a:	3718      	adds	r7, #24
 800d71c:	46bd      	mov	sp, r7
 800d71e:	bd80      	pop	{r7, pc}

0800d720 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800d720:	b580      	push	{r7, lr}
 800d722:	b08e      	sub	sp, #56	@ 0x38
 800d724:	af00      	add	r7, sp, #0
 800d726:	6078      	str	r0, [r7, #4]
 800d728:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800d72a:	f7f8 ffa7 	bl	800667c <HAL_GetTick>
 800d72e:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t index = 0U;
 800d730:	2300      	movs	r3, #0
 800d732:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 800d734:	2300      	movs	r3, #0
 800d736:	60bb      	str	r3, [r7, #8]
 800d738:	2300      	movs	r3, #0
 800d73a:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800d73c:	683b      	ldr	r3, [r7, #0]
 800d73e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800d740:	687b      	ldr	r3, [r7, #4]
 800d742:	681b      	ldr	r3, [r3, #0]
 800d744:	2108      	movs	r1, #8
 800d746:	4618      	mov	r0, r3
 800d748:	f001 fd04 	bl	800f154 <SDMMC_CmdBlockLength>
 800d74c:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800d74e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d750:	2b00      	cmp	r3, #0
 800d752:	d001      	beq.n	800d758 <SD_FindSCR+0x38>
  {
    return errorstate;
 800d754:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d756:	e0ad      	b.n	800d8b4 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800d758:	687b      	ldr	r3, [r7, #4]
 800d75a:	681a      	ldr	r2, [r3, #0]
 800d75c:	687b      	ldr	r3, [r7, #4]
 800d75e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d760:	041b      	lsls	r3, r3, #16
 800d762:	4619      	mov	r1, r3
 800d764:	4610      	mov	r0, r2
 800d766:	f001 fe42 	bl	800f3ee <SDMMC_CmdAppCommand>
 800d76a:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800d76c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d76e:	2b00      	cmp	r3, #0
 800d770:	d001      	beq.n	800d776 <SD_FindSCR+0x56>
  {
    return errorstate;
 800d772:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d774:	e09e      	b.n	800d8b4 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800d776:	f04f 33ff 	mov.w	r3, #4294967295
 800d77a:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800d77c:	2308      	movs	r3, #8
 800d77e:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800d780:	2330      	movs	r3, #48	@ 0x30
 800d782:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800d784:	2302      	movs	r3, #2
 800d786:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800d788:	2300      	movs	r3, #0
 800d78a:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800d78c:	2301      	movs	r3, #1
 800d78e:	627b      	str	r3, [r7, #36]	@ 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800d790:	687b      	ldr	r3, [r7, #4]
 800d792:	681b      	ldr	r3, [r3, #0]
 800d794:	f107 0210 	add.w	r2, r7, #16
 800d798:	4611      	mov	r1, r2
 800d79a:	4618      	mov	r0, r3
 800d79c:	f001 fcae 	bl	800f0fc <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800d7a0:	687b      	ldr	r3, [r7, #4]
 800d7a2:	681b      	ldr	r3, [r3, #0]
 800d7a4:	4618      	mov	r0, r3
 800d7a6:	f001 fe88 	bl	800f4ba <SDMMC_CmdSendSCR>
 800d7aa:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800d7ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d7ae:	2b00      	cmp	r3, #0
 800d7b0:	d027      	beq.n	800d802 <SD_FindSCR+0xe2>
  {
    return errorstate;
 800d7b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d7b4:	e07e      	b.n	800d8b4 <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800d7b6:	687b      	ldr	r3, [r7, #4]
 800d7b8:	681b      	ldr	r3, [r3, #0]
 800d7ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d7bc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800d7c0:	2b00      	cmp	r3, #0
 800d7c2:	d113      	bne.n	800d7ec <SD_FindSCR+0xcc>
 800d7c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d7c6:	2b00      	cmp	r3, #0
 800d7c8:	d110      	bne.n	800d7ec <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 800d7ca:	687b      	ldr	r3, [r7, #4]
 800d7cc:	681b      	ldr	r3, [r3, #0]
 800d7ce:	4618      	mov	r0, r3
 800d7d0:	f001 fc0c 	bl	800efec <SDMMC_ReadFIFO>
 800d7d4:	4603      	mov	r3, r0
 800d7d6:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 800d7d8:	687b      	ldr	r3, [r7, #4]
 800d7da:	681b      	ldr	r3, [r3, #0]
 800d7dc:	4618      	mov	r0, r3
 800d7de:	f001 fc05 	bl	800efec <SDMMC_ReadFIFO>
 800d7e2:	4603      	mov	r3, r0
 800d7e4:	60fb      	str	r3, [r7, #12]
      index++;
 800d7e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d7e8:	3301      	adds	r3, #1
 800d7ea:	637b      	str	r3, [r7, #52]	@ 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800d7ec:	f7f8 ff46 	bl	800667c <HAL_GetTick>
 800d7f0:	4602      	mov	r2, r0
 800d7f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d7f4:	1ad3      	subs	r3, r2, r3
 800d7f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d7fa:	d102      	bne.n	800d802 <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800d7fc:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800d800:	e058      	b.n	800d8b4 <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 800d802:	687b      	ldr	r3, [r7, #4]
 800d804:	681b      	ldr	r3, [r3, #0]
 800d806:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d808:	f240 532a 	movw	r3, #1322	@ 0x52a
 800d80c:	4013      	ands	r3, r2
 800d80e:	2b00      	cmp	r3, #0
 800d810:	d0d1      	beq.n	800d7b6 <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800d812:	687b      	ldr	r3, [r7, #4]
 800d814:	681b      	ldr	r3, [r3, #0]
 800d816:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d818:	f003 0308 	and.w	r3, r3, #8
 800d81c:	2b00      	cmp	r3, #0
 800d81e:	d005      	beq.n	800d82c <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800d820:	687b      	ldr	r3, [r7, #4]
 800d822:	681b      	ldr	r3, [r3, #0]
 800d824:	2208      	movs	r2, #8
 800d826:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800d828:	2308      	movs	r3, #8
 800d82a:	e043      	b.n	800d8b4 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800d82c:	687b      	ldr	r3, [r7, #4]
 800d82e:	681b      	ldr	r3, [r3, #0]
 800d830:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d832:	f003 0302 	and.w	r3, r3, #2
 800d836:	2b00      	cmp	r3, #0
 800d838:	d005      	beq.n	800d846 <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800d83a:	687b      	ldr	r3, [r7, #4]
 800d83c:	681b      	ldr	r3, [r3, #0]
 800d83e:	2202      	movs	r2, #2
 800d840:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800d842:	2302      	movs	r3, #2
 800d844:	e036      	b.n	800d8b4 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800d846:	687b      	ldr	r3, [r7, #4]
 800d848:	681b      	ldr	r3, [r3, #0]
 800d84a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d84c:	f003 0320 	and.w	r3, r3, #32
 800d850:	2b00      	cmp	r3, #0
 800d852:	d005      	beq.n	800d860 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800d854:	687b      	ldr	r3, [r7, #4]
 800d856:	681b      	ldr	r3, [r3, #0]
 800d858:	2220      	movs	r2, #32
 800d85a:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800d85c:	2320      	movs	r3, #32
 800d85e:	e029      	b.n	800d8b4 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800d860:	687b      	ldr	r3, [r7, #4]
 800d862:	681b      	ldr	r3, [r3, #0]
 800d864:	4a15      	ldr	r2, [pc, #84]	@ (800d8bc <SD_FindSCR+0x19c>)
 800d866:	639a      	str	r2, [r3, #56]	@ 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800d868:	68fb      	ldr	r3, [r7, #12]
 800d86a:	061a      	lsls	r2, r3, #24
 800d86c:	68fb      	ldr	r3, [r7, #12]
 800d86e:	021b      	lsls	r3, r3, #8
 800d870:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800d874:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800d876:	68fb      	ldr	r3, [r7, #12]
 800d878:	0a1b      	lsrs	r3, r3, #8
 800d87a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800d87e:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800d880:	68fb      	ldr	r3, [r7, #12]
 800d882:	0e1b      	lsrs	r3, r3, #24
 800d884:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800d886:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d888:	601a      	str	r2, [r3, #0]
    scr++;
 800d88a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d88c:	3304      	adds	r3, #4
 800d88e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800d890:	68bb      	ldr	r3, [r7, #8]
 800d892:	061a      	lsls	r2, r3, #24
 800d894:	68bb      	ldr	r3, [r7, #8]
 800d896:	021b      	lsls	r3, r3, #8
 800d898:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800d89c:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800d89e:	68bb      	ldr	r3, [r7, #8]
 800d8a0:	0a1b      	lsrs	r3, r3, #8
 800d8a2:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800d8a6:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800d8a8:	68bb      	ldr	r3, [r7, #8]
 800d8aa:	0e1b      	lsrs	r3, r3, #24
 800d8ac:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800d8ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d8b0:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800d8b2:	2300      	movs	r3, #0
}
 800d8b4:	4618      	mov	r0, r3
 800d8b6:	3738      	adds	r7, #56	@ 0x38
 800d8b8:	46bd      	mov	sp, r7
 800d8ba:	bd80      	pop	{r7, pc}
 800d8bc:	18000f3a 	.word	0x18000f3a

0800d8c0 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800d8c0:	b580      	push	{r7, lr}
 800d8c2:	b086      	sub	sp, #24
 800d8c4:	af00      	add	r7, sp, #0
 800d8c6:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pRxBuffPtr;
 800d8c8:	687b      	ldr	r3, [r7, #4]
 800d8ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d8cc:	613b      	str	r3, [r7, #16]

  if (hsd->RxXferSize >= 32U)
 800d8ce:	687b      	ldr	r3, [r7, #4]
 800d8d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d8d2:	2b1f      	cmp	r3, #31
 800d8d4:	d936      	bls.n	800d944 <SD_Read_IT+0x84>
  {
    /* Read data from SDMMC Rx FIFO */
    for (count = 0U; count < 8U; count++)
 800d8d6:	2300      	movs	r3, #0
 800d8d8:	617b      	str	r3, [r7, #20]
 800d8da:	e027      	b.n	800d92c <SD_Read_IT+0x6c>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 800d8dc:	687b      	ldr	r3, [r7, #4]
 800d8de:	681b      	ldr	r3, [r3, #0]
 800d8e0:	4618      	mov	r0, r3
 800d8e2:	f001 fb83 	bl	800efec <SDMMC_ReadFIFO>
 800d8e6:	60f8      	str	r0, [r7, #12]
      *tmp = (uint8_t)(data & 0xFFU);
 800d8e8:	68fb      	ldr	r3, [r7, #12]
 800d8ea:	b2da      	uxtb	r2, r3
 800d8ec:	693b      	ldr	r3, [r7, #16]
 800d8ee:	701a      	strb	r2, [r3, #0]
      tmp++;
 800d8f0:	693b      	ldr	r3, [r7, #16]
 800d8f2:	3301      	adds	r3, #1
 800d8f4:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800d8f6:	68fb      	ldr	r3, [r7, #12]
 800d8f8:	0a1b      	lsrs	r3, r3, #8
 800d8fa:	b2da      	uxtb	r2, r3
 800d8fc:	693b      	ldr	r3, [r7, #16]
 800d8fe:	701a      	strb	r2, [r3, #0]
      tmp++;
 800d900:	693b      	ldr	r3, [r7, #16]
 800d902:	3301      	adds	r3, #1
 800d904:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800d906:	68fb      	ldr	r3, [r7, #12]
 800d908:	0c1b      	lsrs	r3, r3, #16
 800d90a:	b2da      	uxtb	r2, r3
 800d90c:	693b      	ldr	r3, [r7, #16]
 800d90e:	701a      	strb	r2, [r3, #0]
      tmp++;
 800d910:	693b      	ldr	r3, [r7, #16]
 800d912:	3301      	adds	r3, #1
 800d914:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800d916:	68fb      	ldr	r3, [r7, #12]
 800d918:	0e1b      	lsrs	r3, r3, #24
 800d91a:	b2da      	uxtb	r2, r3
 800d91c:	693b      	ldr	r3, [r7, #16]
 800d91e:	701a      	strb	r2, [r3, #0]
      tmp++;
 800d920:	693b      	ldr	r3, [r7, #16]
 800d922:	3301      	adds	r3, #1
 800d924:	613b      	str	r3, [r7, #16]
    for (count = 0U; count < 8U; count++)
 800d926:	697b      	ldr	r3, [r7, #20]
 800d928:	3301      	adds	r3, #1
 800d92a:	617b      	str	r3, [r7, #20]
 800d92c:	697b      	ldr	r3, [r7, #20]
 800d92e:	2b07      	cmp	r3, #7
 800d930:	d9d4      	bls.n	800d8dc <SD_Read_IT+0x1c>
    }

    hsd->pRxBuffPtr = tmp;
 800d932:	687b      	ldr	r3, [r7, #4]
 800d934:	693a      	ldr	r2, [r7, #16]
 800d936:	625a      	str	r2, [r3, #36]	@ 0x24
    hsd->RxXferSize -= 32U;
 800d938:	687b      	ldr	r3, [r7, #4]
 800d93a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d93c:	f1a3 0220 	sub.w	r2, r3, #32
 800d940:	687b      	ldr	r3, [r7, #4]
 800d942:	629a      	str	r2, [r3, #40]	@ 0x28
  }
}
 800d944:	bf00      	nop
 800d946:	3718      	adds	r7, #24
 800d948:	46bd      	mov	sp, r7
 800d94a:	bd80      	pop	{r7, pc}

0800d94c <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800d94c:	b580      	push	{r7, lr}
 800d94e:	b086      	sub	sp, #24
 800d950:	af00      	add	r7, sp, #0
 800d952:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  const uint8_t *tmp;

  tmp = hsd->pTxBuffPtr;
 800d954:	687b      	ldr	r3, [r7, #4]
 800d956:	69db      	ldr	r3, [r3, #28]
 800d958:	613b      	str	r3, [r7, #16]

  if (hsd->TxXferSize >= 32U)
 800d95a:	687b      	ldr	r3, [r7, #4]
 800d95c:	6a1b      	ldr	r3, [r3, #32]
 800d95e:	2b1f      	cmp	r3, #31
 800d960:	d93a      	bls.n	800d9d8 <SD_Write_IT+0x8c>
  {
    /* Write data to SDMMC Tx FIFO */
    for (count = 0U; count < 8U; count++)
 800d962:	2300      	movs	r3, #0
 800d964:	617b      	str	r3, [r7, #20]
 800d966:	e02b      	b.n	800d9c0 <SD_Write_IT+0x74>
    {
      data = (uint32_t)(*tmp);
 800d968:	693b      	ldr	r3, [r7, #16]
 800d96a:	781b      	ldrb	r3, [r3, #0]
 800d96c:	60fb      	str	r3, [r7, #12]
      tmp++;
 800d96e:	693b      	ldr	r3, [r7, #16]
 800d970:	3301      	adds	r3, #1
 800d972:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800d974:	693b      	ldr	r3, [r7, #16]
 800d976:	781b      	ldrb	r3, [r3, #0]
 800d978:	021a      	lsls	r2, r3, #8
 800d97a:	68fb      	ldr	r3, [r7, #12]
 800d97c:	4313      	orrs	r3, r2
 800d97e:	60fb      	str	r3, [r7, #12]
      tmp++;
 800d980:	693b      	ldr	r3, [r7, #16]
 800d982:	3301      	adds	r3, #1
 800d984:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800d986:	693b      	ldr	r3, [r7, #16]
 800d988:	781b      	ldrb	r3, [r3, #0]
 800d98a:	041a      	lsls	r2, r3, #16
 800d98c:	68fb      	ldr	r3, [r7, #12]
 800d98e:	4313      	orrs	r3, r2
 800d990:	60fb      	str	r3, [r7, #12]
      tmp++;
 800d992:	693b      	ldr	r3, [r7, #16]
 800d994:	3301      	adds	r3, #1
 800d996:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800d998:	693b      	ldr	r3, [r7, #16]
 800d99a:	781b      	ldrb	r3, [r3, #0]
 800d99c:	061a      	lsls	r2, r3, #24
 800d99e:	68fb      	ldr	r3, [r7, #12]
 800d9a0:	4313      	orrs	r3, r2
 800d9a2:	60fb      	str	r3, [r7, #12]
      tmp++;
 800d9a4:	693b      	ldr	r3, [r7, #16]
 800d9a6:	3301      	adds	r3, #1
 800d9a8:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800d9aa:	687b      	ldr	r3, [r7, #4]
 800d9ac:	681b      	ldr	r3, [r3, #0]
 800d9ae:	f107 020c 	add.w	r2, r7, #12
 800d9b2:	4611      	mov	r1, r2
 800d9b4:	4618      	mov	r0, r3
 800d9b6:	f001 fb26 	bl	800f006 <SDMMC_WriteFIFO>
    for (count = 0U; count < 8U; count++)
 800d9ba:	697b      	ldr	r3, [r7, #20]
 800d9bc:	3301      	adds	r3, #1
 800d9be:	617b      	str	r3, [r7, #20]
 800d9c0:	697b      	ldr	r3, [r7, #20]
 800d9c2:	2b07      	cmp	r3, #7
 800d9c4:	d9d0      	bls.n	800d968 <SD_Write_IT+0x1c>
    }

    hsd->pTxBuffPtr = tmp;
 800d9c6:	687b      	ldr	r3, [r7, #4]
 800d9c8:	693a      	ldr	r2, [r7, #16]
 800d9ca:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize -= 32U;
 800d9cc:	687b      	ldr	r3, [r7, #4]
 800d9ce:	6a1b      	ldr	r3, [r3, #32]
 800d9d0:	f1a3 0220 	sub.w	r2, r3, #32
 800d9d4:	687b      	ldr	r3, [r7, #4]
 800d9d6:	621a      	str	r2, [r3, #32]
  }
}
 800d9d8:	bf00      	nop
 800d9da:	3718      	adds	r7, #24
 800d9dc:	46bd      	mov	sp, r7
 800d9de:	bd80      	pop	{r7, pc}

0800d9e0 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800d9e0:	b480      	push	{r7}
 800d9e2:	b083      	sub	sp, #12
 800d9e4:	af00      	add	r7, sp, #0
 800d9e6:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800d9e8:	bf00      	nop
 800d9ea:	370c      	adds	r7, #12
 800d9ec:	46bd      	mov	sp, r7
 800d9ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9f2:	4770      	bx	lr

0800d9f4 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800d9f4:	b480      	push	{r7}
 800d9f6:	b083      	sub	sp, #12
 800d9f8:	af00      	add	r7, sp, #0
 800d9fa:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800d9fc:	bf00      	nop
 800d9fe:	370c      	adds	r7, #12
 800da00:	46bd      	mov	sp, r7
 800da02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da06:	4770      	bx	lr

0800da08 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800da08:	b480      	push	{r7}
 800da0a:	b083      	sub	sp, #12
 800da0c:	af00      	add	r7, sp, #0
 800da0e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800da10:	bf00      	nop
 800da12:	370c      	adds	r7, #12
 800da14:	46bd      	mov	sp, r7
 800da16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da1a:	4770      	bx	lr

0800da1c <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800da1c:	b480      	push	{r7}
 800da1e:	b083      	sub	sp, #12
 800da20:	af00      	add	r7, sp, #0
 800da22:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800da24:	bf00      	nop
 800da26:	370c      	adds	r7, #12
 800da28:	46bd      	mov	sp, r7
 800da2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da2e:	4770      	bx	lr

0800da30 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800da30:	b580      	push	{r7, lr}
 800da32:	b084      	sub	sp, #16
 800da34:	af00      	add	r7, sp, #0
 800da36:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800da38:	687b      	ldr	r3, [r7, #4]
 800da3a:	2b00      	cmp	r3, #0
 800da3c:	d101      	bne.n	800da42 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800da3e:	2301      	movs	r3, #1
 800da40:	e10f      	b.n	800dc62 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800da42:	687b      	ldr	r3, [r7, #4]
 800da44:	2200      	movs	r2, #0
 800da46:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800da48:	687b      	ldr	r3, [r7, #4]
 800da4a:	681b      	ldr	r3, [r3, #0]
 800da4c:	4a87      	ldr	r2, [pc, #540]	@ (800dc6c <HAL_SPI_Init+0x23c>)
 800da4e:	4293      	cmp	r3, r2
 800da50:	d00f      	beq.n	800da72 <HAL_SPI_Init+0x42>
 800da52:	687b      	ldr	r3, [r7, #4]
 800da54:	681b      	ldr	r3, [r3, #0]
 800da56:	4a86      	ldr	r2, [pc, #536]	@ (800dc70 <HAL_SPI_Init+0x240>)
 800da58:	4293      	cmp	r3, r2
 800da5a:	d00a      	beq.n	800da72 <HAL_SPI_Init+0x42>
 800da5c:	687b      	ldr	r3, [r7, #4]
 800da5e:	681b      	ldr	r3, [r3, #0]
 800da60:	4a84      	ldr	r2, [pc, #528]	@ (800dc74 <HAL_SPI_Init+0x244>)
 800da62:	4293      	cmp	r3, r2
 800da64:	d005      	beq.n	800da72 <HAL_SPI_Init+0x42>
 800da66:	687b      	ldr	r3, [r7, #4]
 800da68:	68db      	ldr	r3, [r3, #12]
 800da6a:	2b0f      	cmp	r3, #15
 800da6c:	d901      	bls.n	800da72 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800da6e:	2301      	movs	r3, #1
 800da70:	e0f7      	b.n	800dc62 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800da72:	6878      	ldr	r0, [r7, #4]
 800da74:	f000 f90a 	bl	800dc8c <SPI_GetPacketSize>
 800da78:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800da7a:	687b      	ldr	r3, [r7, #4]
 800da7c:	681b      	ldr	r3, [r3, #0]
 800da7e:	4a7b      	ldr	r2, [pc, #492]	@ (800dc6c <HAL_SPI_Init+0x23c>)
 800da80:	4293      	cmp	r3, r2
 800da82:	d00c      	beq.n	800da9e <HAL_SPI_Init+0x6e>
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	681b      	ldr	r3, [r3, #0]
 800da88:	4a79      	ldr	r2, [pc, #484]	@ (800dc70 <HAL_SPI_Init+0x240>)
 800da8a:	4293      	cmp	r3, r2
 800da8c:	d007      	beq.n	800da9e <HAL_SPI_Init+0x6e>
 800da8e:	687b      	ldr	r3, [r7, #4]
 800da90:	681b      	ldr	r3, [r3, #0]
 800da92:	4a78      	ldr	r2, [pc, #480]	@ (800dc74 <HAL_SPI_Init+0x244>)
 800da94:	4293      	cmp	r3, r2
 800da96:	d002      	beq.n	800da9e <HAL_SPI_Init+0x6e>
 800da98:	68fb      	ldr	r3, [r7, #12]
 800da9a:	2b08      	cmp	r3, #8
 800da9c:	d811      	bhi.n	800dac2 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800da9e:	687b      	ldr	r3, [r7, #4]
 800daa0:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800daa2:	4a72      	ldr	r2, [pc, #456]	@ (800dc6c <HAL_SPI_Init+0x23c>)
 800daa4:	4293      	cmp	r3, r2
 800daa6:	d009      	beq.n	800dabc <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800daa8:	687b      	ldr	r3, [r7, #4]
 800daaa:	681b      	ldr	r3, [r3, #0]
 800daac:	4a70      	ldr	r2, [pc, #448]	@ (800dc70 <HAL_SPI_Init+0x240>)
 800daae:	4293      	cmp	r3, r2
 800dab0:	d004      	beq.n	800dabc <HAL_SPI_Init+0x8c>
 800dab2:	687b      	ldr	r3, [r7, #4]
 800dab4:	681b      	ldr	r3, [r3, #0]
 800dab6:	4a6f      	ldr	r2, [pc, #444]	@ (800dc74 <HAL_SPI_Init+0x244>)
 800dab8:	4293      	cmp	r3, r2
 800daba:	d104      	bne.n	800dac6 <HAL_SPI_Init+0x96>
 800dabc:	68fb      	ldr	r3, [r7, #12]
 800dabe:	2b10      	cmp	r3, #16
 800dac0:	d901      	bls.n	800dac6 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800dac2:	2301      	movs	r3, #1
 800dac4:	e0cd      	b.n	800dc62 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800dac6:	687b      	ldr	r3, [r7, #4]
 800dac8:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800dacc:	b2db      	uxtb	r3, r3
 800dace:	2b00      	cmp	r3, #0
 800dad0:	d106      	bne.n	800dae0 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800dad2:	687b      	ldr	r3, [r7, #4]
 800dad4:	2200      	movs	r2, #0
 800dad6:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800dada:	6878      	ldr	r0, [r7, #4]
 800dadc:	f000 f8cc 	bl	800dc78 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800dae0:	687b      	ldr	r3, [r7, #4]
 800dae2:	2202      	movs	r2, #2
 800dae4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800dae8:	687b      	ldr	r3, [r7, #4]
 800daea:	681b      	ldr	r3, [r3, #0]
 800daec:	681a      	ldr	r2, [r3, #0]
 800daee:	687b      	ldr	r3, [r7, #4]
 800daf0:	681b      	ldr	r3, [r3, #0]
 800daf2:	f022 0201 	bic.w	r2, r2, #1
 800daf6:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800daf8:	687b      	ldr	r3, [r7, #4]
 800dafa:	681b      	ldr	r3, [r3, #0]
 800dafc:	689b      	ldr	r3, [r3, #8]
 800dafe:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800db02:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800db04:	687b      	ldr	r3, [r7, #4]
 800db06:	699b      	ldr	r3, [r3, #24]
 800db08:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800db0c:	d119      	bne.n	800db42 <HAL_SPI_Init+0x112>
 800db0e:	687b      	ldr	r3, [r7, #4]
 800db10:	685b      	ldr	r3, [r3, #4]
 800db12:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800db16:	d103      	bne.n	800db20 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800db18:	687b      	ldr	r3, [r7, #4]
 800db1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800db1c:	2b00      	cmp	r3, #0
 800db1e:	d008      	beq.n	800db32 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800db20:	687b      	ldr	r3, [r7, #4]
 800db22:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800db24:	2b00      	cmp	r3, #0
 800db26:	d10c      	bne.n	800db42 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800db28:	687b      	ldr	r3, [r7, #4]
 800db2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800db2c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800db30:	d107      	bne.n	800db42 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800db32:	687b      	ldr	r3, [r7, #4]
 800db34:	681b      	ldr	r3, [r3, #0]
 800db36:	681a      	ldr	r2, [r3, #0]
 800db38:	687b      	ldr	r3, [r7, #4]
 800db3a:	681b      	ldr	r3, [r3, #0]
 800db3c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800db40:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800db42:	687b      	ldr	r3, [r7, #4]
 800db44:	685b      	ldr	r3, [r3, #4]
 800db46:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800db4a:	2b00      	cmp	r3, #0
 800db4c:	d00f      	beq.n	800db6e <HAL_SPI_Init+0x13e>
 800db4e:	687b      	ldr	r3, [r7, #4]
 800db50:	68db      	ldr	r3, [r3, #12]
 800db52:	2b06      	cmp	r3, #6
 800db54:	d90b      	bls.n	800db6e <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800db56:	687b      	ldr	r3, [r7, #4]
 800db58:	681b      	ldr	r3, [r3, #0]
 800db5a:	681b      	ldr	r3, [r3, #0]
 800db5c:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 800db60:	687b      	ldr	r3, [r7, #4]
 800db62:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800db64:	687b      	ldr	r3, [r7, #4]
 800db66:	681b      	ldr	r3, [r3, #0]
 800db68:	430a      	orrs	r2, r1
 800db6a:	601a      	str	r2, [r3, #0]
 800db6c:	e007      	b.n	800db7e <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800db6e:	687b      	ldr	r3, [r7, #4]
 800db70:	681b      	ldr	r3, [r3, #0]
 800db72:	681a      	ldr	r2, [r3, #0]
 800db74:	687b      	ldr	r3, [r7, #4]
 800db76:	681b      	ldr	r3, [r3, #0]
 800db78:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800db7c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800db7e:	687b      	ldr	r3, [r7, #4]
 800db80:	69da      	ldr	r2, [r3, #28]
 800db82:	687b      	ldr	r3, [r7, #4]
 800db84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800db86:	431a      	orrs	r2, r3
 800db88:	68bb      	ldr	r3, [r7, #8]
 800db8a:	431a      	orrs	r2, r3
 800db8c:	687b      	ldr	r3, [r7, #4]
 800db8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800db90:	ea42 0103 	orr.w	r1, r2, r3
 800db94:	687b      	ldr	r3, [r7, #4]
 800db96:	68da      	ldr	r2, [r3, #12]
 800db98:	687b      	ldr	r3, [r7, #4]
 800db9a:	681b      	ldr	r3, [r3, #0]
 800db9c:	430a      	orrs	r2, r1
 800db9e:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800dba0:	687b      	ldr	r3, [r7, #4]
 800dba2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800dba4:	687b      	ldr	r3, [r7, #4]
 800dba6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dba8:	431a      	orrs	r2, r3
 800dbaa:	687b      	ldr	r3, [r7, #4]
 800dbac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dbae:	431a      	orrs	r2, r3
 800dbb0:	687b      	ldr	r3, [r7, #4]
 800dbb2:	699b      	ldr	r3, [r3, #24]
 800dbb4:	431a      	orrs	r2, r3
 800dbb6:	687b      	ldr	r3, [r7, #4]
 800dbb8:	691b      	ldr	r3, [r3, #16]
 800dbba:	431a      	orrs	r2, r3
 800dbbc:	687b      	ldr	r3, [r7, #4]
 800dbbe:	695b      	ldr	r3, [r3, #20]
 800dbc0:	431a      	orrs	r2, r3
 800dbc2:	687b      	ldr	r3, [r7, #4]
 800dbc4:	6a1b      	ldr	r3, [r3, #32]
 800dbc6:	431a      	orrs	r2, r3
 800dbc8:	687b      	ldr	r3, [r7, #4]
 800dbca:	685b      	ldr	r3, [r3, #4]
 800dbcc:	431a      	orrs	r2, r3
 800dbce:	687b      	ldr	r3, [r7, #4]
 800dbd0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800dbd2:	431a      	orrs	r2, r3
 800dbd4:	687b      	ldr	r3, [r7, #4]
 800dbd6:	689b      	ldr	r3, [r3, #8]
 800dbd8:	431a      	orrs	r2, r3
 800dbda:	687b      	ldr	r3, [r7, #4]
 800dbdc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800dbde:	ea42 0103 	orr.w	r1, r2, r3
 800dbe2:	687b      	ldr	r3, [r7, #4]
 800dbe4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800dbe6:	687b      	ldr	r3, [r7, #4]
 800dbe8:	681b      	ldr	r3, [r3, #0]
 800dbea:	430a      	orrs	r2, r1
 800dbec:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800dbee:	687b      	ldr	r3, [r7, #4]
 800dbf0:	685b      	ldr	r3, [r3, #4]
 800dbf2:	2b00      	cmp	r3, #0
 800dbf4:	d113      	bne.n	800dc1e <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800dbf6:	687b      	ldr	r3, [r7, #4]
 800dbf8:	681b      	ldr	r3, [r3, #0]
 800dbfa:	689b      	ldr	r3, [r3, #8]
 800dbfc:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 800dc00:	687b      	ldr	r3, [r7, #4]
 800dc02:	681b      	ldr	r3, [r3, #0]
 800dc04:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800dc08:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800dc0a:	687b      	ldr	r3, [r7, #4]
 800dc0c:	681b      	ldr	r3, [r3, #0]
 800dc0e:	689b      	ldr	r3, [r3, #8]
 800dc10:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 800dc14:	687b      	ldr	r3, [r7, #4]
 800dc16:	681b      	ldr	r3, [r3, #0]
 800dc18:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800dc1c:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800dc1e:	687b      	ldr	r3, [r7, #4]
 800dc20:	681b      	ldr	r3, [r3, #0]
 800dc22:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800dc24:	687b      	ldr	r3, [r7, #4]
 800dc26:	681b      	ldr	r3, [r3, #0]
 800dc28:	f022 0201 	bic.w	r2, r2, #1
 800dc2c:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800dc2e:	687b      	ldr	r3, [r7, #4]
 800dc30:	685b      	ldr	r3, [r3, #4]
 800dc32:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800dc36:	2b00      	cmp	r3, #0
 800dc38:	d00a      	beq.n	800dc50 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800dc3a:	687b      	ldr	r3, [r7, #4]
 800dc3c:	681b      	ldr	r3, [r3, #0]
 800dc3e:	68db      	ldr	r3, [r3, #12]
 800dc40:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800dc44:	687b      	ldr	r3, [r7, #4]
 800dc46:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800dc48:	687b      	ldr	r3, [r7, #4]
 800dc4a:	681b      	ldr	r3, [r3, #0]
 800dc4c:	430a      	orrs	r2, r1
 800dc4e:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800dc50:	687b      	ldr	r3, [r7, #4]
 800dc52:	2200      	movs	r2, #0
 800dc54:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800dc58:	687b      	ldr	r3, [r7, #4]
 800dc5a:	2201      	movs	r2, #1
 800dc5c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 800dc60:	2300      	movs	r3, #0
}
 800dc62:	4618      	mov	r0, r3
 800dc64:	3710      	adds	r7, #16
 800dc66:	46bd      	mov	sp, r7
 800dc68:	bd80      	pop	{r7, pc}
 800dc6a:	bf00      	nop
 800dc6c:	40013000 	.word	0x40013000
 800dc70:	40003800 	.word	0x40003800
 800dc74:	40003c00 	.word	0x40003c00

0800dc78 <HAL_SPI_MspInit>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 800dc78:	b480      	push	{r7}
 800dc7a:	b083      	sub	sp, #12
 800dc7c:	af00      	add	r7, sp, #0
 800dc7e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
   */
}
 800dc80:	bf00      	nop
 800dc82:	370c      	adds	r7, #12
 800dc84:	46bd      	mov	sp, r7
 800dc86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc8a:	4770      	bx	lr

0800dc8c <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800dc8c:	b480      	push	{r7}
 800dc8e:	b085      	sub	sp, #20
 800dc90:	af00      	add	r7, sp, #0
 800dc92:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800dc94:	687b      	ldr	r3, [r7, #4]
 800dc96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800dc98:	095b      	lsrs	r3, r3, #5
 800dc9a:	3301      	adds	r3, #1
 800dc9c:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800dc9e:	687b      	ldr	r3, [r7, #4]
 800dca0:	68db      	ldr	r3, [r3, #12]
 800dca2:	3301      	adds	r3, #1
 800dca4:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800dca6:	68bb      	ldr	r3, [r7, #8]
 800dca8:	3307      	adds	r3, #7
 800dcaa:	08db      	lsrs	r3, r3, #3
 800dcac:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800dcae:	68bb      	ldr	r3, [r7, #8]
 800dcb0:	68fa      	ldr	r2, [r7, #12]
 800dcb2:	fb02 f303 	mul.w	r3, r2, r3
}
 800dcb6:	4618      	mov	r0, r3
 800dcb8:	3714      	adds	r7, #20
 800dcba:	46bd      	mov	sp, r7
 800dcbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcc0:	4770      	bx	lr

0800dcc2 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800dcc2:	b580      	push	{r7, lr}
 800dcc4:	b082      	sub	sp, #8
 800dcc6:	af00      	add	r7, sp, #0
 800dcc8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800dcca:	687b      	ldr	r3, [r7, #4]
 800dccc:	2b00      	cmp	r3, #0
 800dcce:	d101      	bne.n	800dcd4 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800dcd0:	2301      	movs	r3, #1
 800dcd2:	e042      	b.n	800dd5a <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800dcd4:	687b      	ldr	r3, [r7, #4]
 800dcd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800dcda:	2b00      	cmp	r3, #0
 800dcdc:	d106      	bne.n	800dcec <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800dcde:	687b      	ldr	r3, [r7, #4]
 800dce0:	2200      	movs	r2, #0
 800dce2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800dce6:	6878      	ldr	r0, [r7, #4]
 800dce8:	f7f6 fcfe 	bl	80046e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800dcec:	687b      	ldr	r3, [r7, #4]
 800dcee:	2224      	movs	r2, #36	@ 0x24
 800dcf0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800dcf4:	687b      	ldr	r3, [r7, #4]
 800dcf6:	681b      	ldr	r3, [r3, #0]
 800dcf8:	681a      	ldr	r2, [r3, #0]
 800dcfa:	687b      	ldr	r3, [r7, #4]
 800dcfc:	681b      	ldr	r3, [r3, #0]
 800dcfe:	f022 0201 	bic.w	r2, r2, #1
 800dd02:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800dd04:	687b      	ldr	r3, [r7, #4]
 800dd06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dd08:	2b00      	cmp	r3, #0
 800dd0a:	d002      	beq.n	800dd12 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800dd0c:	6878      	ldr	r0, [r7, #4]
 800dd0e:	f000 fe1f 	bl	800e950 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800dd12:	6878      	ldr	r0, [r7, #4]
 800dd14:	f000 f8b4 	bl	800de80 <UART_SetConfig>
 800dd18:	4603      	mov	r3, r0
 800dd1a:	2b01      	cmp	r3, #1
 800dd1c:	d101      	bne.n	800dd22 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800dd1e:	2301      	movs	r3, #1
 800dd20:	e01b      	b.n	800dd5a <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800dd22:	687b      	ldr	r3, [r7, #4]
 800dd24:	681b      	ldr	r3, [r3, #0]
 800dd26:	685a      	ldr	r2, [r3, #4]
 800dd28:	687b      	ldr	r3, [r7, #4]
 800dd2a:	681b      	ldr	r3, [r3, #0]
 800dd2c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800dd30:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800dd32:	687b      	ldr	r3, [r7, #4]
 800dd34:	681b      	ldr	r3, [r3, #0]
 800dd36:	689a      	ldr	r2, [r3, #8]
 800dd38:	687b      	ldr	r3, [r7, #4]
 800dd3a:	681b      	ldr	r3, [r3, #0]
 800dd3c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800dd40:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800dd42:	687b      	ldr	r3, [r7, #4]
 800dd44:	681b      	ldr	r3, [r3, #0]
 800dd46:	681a      	ldr	r2, [r3, #0]
 800dd48:	687b      	ldr	r3, [r7, #4]
 800dd4a:	681b      	ldr	r3, [r3, #0]
 800dd4c:	f042 0201 	orr.w	r2, r2, #1
 800dd50:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800dd52:	6878      	ldr	r0, [r7, #4]
 800dd54:	f000 fe9e 	bl	800ea94 <UART_CheckIdleState>
 800dd58:	4603      	mov	r3, r0
}
 800dd5a:	4618      	mov	r0, r3
 800dd5c:	3708      	adds	r7, #8
 800dd5e:	46bd      	mov	sp, r7
 800dd60:	bd80      	pop	{r7, pc}

0800dd62 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800dd62:	b580      	push	{r7, lr}
 800dd64:	b08a      	sub	sp, #40	@ 0x28
 800dd66:	af02      	add	r7, sp, #8
 800dd68:	60f8      	str	r0, [r7, #12]
 800dd6a:	60b9      	str	r1, [r7, #8]
 800dd6c:	603b      	str	r3, [r7, #0]
 800dd6e:	4613      	mov	r3, r2
 800dd70:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800dd72:	68fb      	ldr	r3, [r7, #12]
 800dd74:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800dd78:	2b20      	cmp	r3, #32
 800dd7a:	d17b      	bne.n	800de74 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800dd7c:	68bb      	ldr	r3, [r7, #8]
 800dd7e:	2b00      	cmp	r3, #0
 800dd80:	d002      	beq.n	800dd88 <HAL_UART_Transmit+0x26>
 800dd82:	88fb      	ldrh	r3, [r7, #6]
 800dd84:	2b00      	cmp	r3, #0
 800dd86:	d101      	bne.n	800dd8c <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800dd88:	2301      	movs	r3, #1
 800dd8a:	e074      	b.n	800de76 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800dd8c:	68fb      	ldr	r3, [r7, #12]
 800dd8e:	2200      	movs	r2, #0
 800dd90:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800dd94:	68fb      	ldr	r3, [r7, #12]
 800dd96:	2221      	movs	r2, #33	@ 0x21
 800dd98:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800dd9c:	f7f8 fc6e 	bl	800667c <HAL_GetTick>
 800dda0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800dda2:	68fb      	ldr	r3, [r7, #12]
 800dda4:	88fa      	ldrh	r2, [r7, #6]
 800dda6:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800ddaa:	68fb      	ldr	r3, [r7, #12]
 800ddac:	88fa      	ldrh	r2, [r7, #6]
 800ddae:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ddb2:	68fb      	ldr	r3, [r7, #12]
 800ddb4:	689b      	ldr	r3, [r3, #8]
 800ddb6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ddba:	d108      	bne.n	800ddce <HAL_UART_Transmit+0x6c>
 800ddbc:	68fb      	ldr	r3, [r7, #12]
 800ddbe:	691b      	ldr	r3, [r3, #16]
 800ddc0:	2b00      	cmp	r3, #0
 800ddc2:	d104      	bne.n	800ddce <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800ddc4:	2300      	movs	r3, #0
 800ddc6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800ddc8:	68bb      	ldr	r3, [r7, #8]
 800ddca:	61bb      	str	r3, [r7, #24]
 800ddcc:	e003      	b.n	800ddd6 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800ddce:	68bb      	ldr	r3, [r7, #8]
 800ddd0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800ddd2:	2300      	movs	r3, #0
 800ddd4:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800ddd6:	e030      	b.n	800de3a <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800ddd8:	683b      	ldr	r3, [r7, #0]
 800ddda:	9300      	str	r3, [sp, #0]
 800dddc:	697b      	ldr	r3, [r7, #20]
 800ddde:	2200      	movs	r2, #0
 800dde0:	2180      	movs	r1, #128	@ 0x80
 800dde2:	68f8      	ldr	r0, [r7, #12]
 800dde4:	f000 ff00 	bl	800ebe8 <UART_WaitOnFlagUntilTimeout>
 800dde8:	4603      	mov	r3, r0
 800ddea:	2b00      	cmp	r3, #0
 800ddec:	d005      	beq.n	800ddfa <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800ddee:	68fb      	ldr	r3, [r7, #12]
 800ddf0:	2220      	movs	r2, #32
 800ddf2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800ddf6:	2303      	movs	r3, #3
 800ddf8:	e03d      	b.n	800de76 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800ddfa:	69fb      	ldr	r3, [r7, #28]
 800ddfc:	2b00      	cmp	r3, #0
 800ddfe:	d10b      	bne.n	800de18 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800de00:	69bb      	ldr	r3, [r7, #24]
 800de02:	881b      	ldrh	r3, [r3, #0]
 800de04:	461a      	mov	r2, r3
 800de06:	68fb      	ldr	r3, [r7, #12]
 800de08:	681b      	ldr	r3, [r3, #0]
 800de0a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800de0e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800de10:	69bb      	ldr	r3, [r7, #24]
 800de12:	3302      	adds	r3, #2
 800de14:	61bb      	str	r3, [r7, #24]
 800de16:	e007      	b.n	800de28 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800de18:	69fb      	ldr	r3, [r7, #28]
 800de1a:	781a      	ldrb	r2, [r3, #0]
 800de1c:	68fb      	ldr	r3, [r7, #12]
 800de1e:	681b      	ldr	r3, [r3, #0]
 800de20:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800de22:	69fb      	ldr	r3, [r7, #28]
 800de24:	3301      	adds	r3, #1
 800de26:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800de28:	68fb      	ldr	r3, [r7, #12]
 800de2a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800de2e:	b29b      	uxth	r3, r3
 800de30:	3b01      	subs	r3, #1
 800de32:	b29a      	uxth	r2, r3
 800de34:	68fb      	ldr	r3, [r7, #12]
 800de36:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800de3a:	68fb      	ldr	r3, [r7, #12]
 800de3c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800de40:	b29b      	uxth	r3, r3
 800de42:	2b00      	cmp	r3, #0
 800de44:	d1c8      	bne.n	800ddd8 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800de46:	683b      	ldr	r3, [r7, #0]
 800de48:	9300      	str	r3, [sp, #0]
 800de4a:	697b      	ldr	r3, [r7, #20]
 800de4c:	2200      	movs	r2, #0
 800de4e:	2140      	movs	r1, #64	@ 0x40
 800de50:	68f8      	ldr	r0, [r7, #12]
 800de52:	f000 fec9 	bl	800ebe8 <UART_WaitOnFlagUntilTimeout>
 800de56:	4603      	mov	r3, r0
 800de58:	2b00      	cmp	r3, #0
 800de5a:	d005      	beq.n	800de68 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800de5c:	68fb      	ldr	r3, [r7, #12]
 800de5e:	2220      	movs	r2, #32
 800de60:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800de64:	2303      	movs	r3, #3
 800de66:	e006      	b.n	800de76 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800de68:	68fb      	ldr	r3, [r7, #12]
 800de6a:	2220      	movs	r2, #32
 800de6c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800de70:	2300      	movs	r3, #0
 800de72:	e000      	b.n	800de76 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800de74:	2302      	movs	r3, #2
  }
}
 800de76:	4618      	mov	r0, r3
 800de78:	3720      	adds	r7, #32
 800de7a:	46bd      	mov	sp, r7
 800de7c:	bd80      	pop	{r7, pc}
	...

0800de80 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800de80:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800de84:	b092      	sub	sp, #72	@ 0x48
 800de86:	af00      	add	r7, sp, #0
 800de88:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800de8a:	2300      	movs	r3, #0
 800de8c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800de90:	697b      	ldr	r3, [r7, #20]
 800de92:	689a      	ldr	r2, [r3, #8]
 800de94:	697b      	ldr	r3, [r7, #20]
 800de96:	691b      	ldr	r3, [r3, #16]
 800de98:	431a      	orrs	r2, r3
 800de9a:	697b      	ldr	r3, [r7, #20]
 800de9c:	695b      	ldr	r3, [r3, #20]
 800de9e:	431a      	orrs	r2, r3
 800dea0:	697b      	ldr	r3, [r7, #20]
 800dea2:	69db      	ldr	r3, [r3, #28]
 800dea4:	4313      	orrs	r3, r2
 800dea6:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800dea8:	697b      	ldr	r3, [r7, #20]
 800deaa:	681b      	ldr	r3, [r3, #0]
 800deac:	681a      	ldr	r2, [r3, #0]
 800deae:	4bbe      	ldr	r3, [pc, #760]	@ (800e1a8 <UART_SetConfig+0x328>)
 800deb0:	4013      	ands	r3, r2
 800deb2:	697a      	ldr	r2, [r7, #20]
 800deb4:	6812      	ldr	r2, [r2, #0]
 800deb6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800deb8:	430b      	orrs	r3, r1
 800deba:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800debc:	697b      	ldr	r3, [r7, #20]
 800debe:	681b      	ldr	r3, [r3, #0]
 800dec0:	685b      	ldr	r3, [r3, #4]
 800dec2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800dec6:	697b      	ldr	r3, [r7, #20]
 800dec8:	68da      	ldr	r2, [r3, #12]
 800deca:	697b      	ldr	r3, [r7, #20]
 800decc:	681b      	ldr	r3, [r3, #0]
 800dece:	430a      	orrs	r2, r1
 800ded0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800ded2:	697b      	ldr	r3, [r7, #20]
 800ded4:	699b      	ldr	r3, [r3, #24]
 800ded6:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800ded8:	697b      	ldr	r3, [r7, #20]
 800deda:	681b      	ldr	r3, [r3, #0]
 800dedc:	4ab3      	ldr	r2, [pc, #716]	@ (800e1ac <UART_SetConfig+0x32c>)
 800dede:	4293      	cmp	r3, r2
 800dee0:	d004      	beq.n	800deec <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800dee2:	697b      	ldr	r3, [r7, #20]
 800dee4:	6a1b      	ldr	r3, [r3, #32]
 800dee6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800dee8:	4313      	orrs	r3, r2
 800deea:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800deec:	697b      	ldr	r3, [r7, #20]
 800deee:	681b      	ldr	r3, [r3, #0]
 800def0:	689a      	ldr	r2, [r3, #8]
 800def2:	4baf      	ldr	r3, [pc, #700]	@ (800e1b0 <UART_SetConfig+0x330>)
 800def4:	4013      	ands	r3, r2
 800def6:	697a      	ldr	r2, [r7, #20]
 800def8:	6812      	ldr	r2, [r2, #0]
 800defa:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800defc:	430b      	orrs	r3, r1
 800defe:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800df00:	697b      	ldr	r3, [r7, #20]
 800df02:	681b      	ldr	r3, [r3, #0]
 800df04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800df06:	f023 010f 	bic.w	r1, r3, #15
 800df0a:	697b      	ldr	r3, [r7, #20]
 800df0c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800df0e:	697b      	ldr	r3, [r7, #20]
 800df10:	681b      	ldr	r3, [r3, #0]
 800df12:	430a      	orrs	r2, r1
 800df14:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800df16:	697b      	ldr	r3, [r7, #20]
 800df18:	681b      	ldr	r3, [r3, #0]
 800df1a:	4aa6      	ldr	r2, [pc, #664]	@ (800e1b4 <UART_SetConfig+0x334>)
 800df1c:	4293      	cmp	r3, r2
 800df1e:	d177      	bne.n	800e010 <UART_SetConfig+0x190>
 800df20:	4ba5      	ldr	r3, [pc, #660]	@ (800e1b8 <UART_SetConfig+0x338>)
 800df22:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800df24:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800df28:	2b28      	cmp	r3, #40	@ 0x28
 800df2a:	d86d      	bhi.n	800e008 <UART_SetConfig+0x188>
 800df2c:	a201      	add	r2, pc, #4	@ (adr r2, 800df34 <UART_SetConfig+0xb4>)
 800df2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800df32:	bf00      	nop
 800df34:	0800dfd9 	.word	0x0800dfd9
 800df38:	0800e009 	.word	0x0800e009
 800df3c:	0800e009 	.word	0x0800e009
 800df40:	0800e009 	.word	0x0800e009
 800df44:	0800e009 	.word	0x0800e009
 800df48:	0800e009 	.word	0x0800e009
 800df4c:	0800e009 	.word	0x0800e009
 800df50:	0800e009 	.word	0x0800e009
 800df54:	0800dfe1 	.word	0x0800dfe1
 800df58:	0800e009 	.word	0x0800e009
 800df5c:	0800e009 	.word	0x0800e009
 800df60:	0800e009 	.word	0x0800e009
 800df64:	0800e009 	.word	0x0800e009
 800df68:	0800e009 	.word	0x0800e009
 800df6c:	0800e009 	.word	0x0800e009
 800df70:	0800e009 	.word	0x0800e009
 800df74:	0800dfe9 	.word	0x0800dfe9
 800df78:	0800e009 	.word	0x0800e009
 800df7c:	0800e009 	.word	0x0800e009
 800df80:	0800e009 	.word	0x0800e009
 800df84:	0800e009 	.word	0x0800e009
 800df88:	0800e009 	.word	0x0800e009
 800df8c:	0800e009 	.word	0x0800e009
 800df90:	0800e009 	.word	0x0800e009
 800df94:	0800dff1 	.word	0x0800dff1
 800df98:	0800e009 	.word	0x0800e009
 800df9c:	0800e009 	.word	0x0800e009
 800dfa0:	0800e009 	.word	0x0800e009
 800dfa4:	0800e009 	.word	0x0800e009
 800dfa8:	0800e009 	.word	0x0800e009
 800dfac:	0800e009 	.word	0x0800e009
 800dfb0:	0800e009 	.word	0x0800e009
 800dfb4:	0800dff9 	.word	0x0800dff9
 800dfb8:	0800e009 	.word	0x0800e009
 800dfbc:	0800e009 	.word	0x0800e009
 800dfc0:	0800e009 	.word	0x0800e009
 800dfc4:	0800e009 	.word	0x0800e009
 800dfc8:	0800e009 	.word	0x0800e009
 800dfcc:	0800e009 	.word	0x0800e009
 800dfd0:	0800e009 	.word	0x0800e009
 800dfd4:	0800e001 	.word	0x0800e001
 800dfd8:	2301      	movs	r3, #1
 800dfda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dfde:	e222      	b.n	800e426 <UART_SetConfig+0x5a6>
 800dfe0:	2304      	movs	r3, #4
 800dfe2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dfe6:	e21e      	b.n	800e426 <UART_SetConfig+0x5a6>
 800dfe8:	2308      	movs	r3, #8
 800dfea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dfee:	e21a      	b.n	800e426 <UART_SetConfig+0x5a6>
 800dff0:	2310      	movs	r3, #16
 800dff2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dff6:	e216      	b.n	800e426 <UART_SetConfig+0x5a6>
 800dff8:	2320      	movs	r3, #32
 800dffa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dffe:	e212      	b.n	800e426 <UART_SetConfig+0x5a6>
 800e000:	2340      	movs	r3, #64	@ 0x40
 800e002:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e006:	e20e      	b.n	800e426 <UART_SetConfig+0x5a6>
 800e008:	2380      	movs	r3, #128	@ 0x80
 800e00a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e00e:	e20a      	b.n	800e426 <UART_SetConfig+0x5a6>
 800e010:	697b      	ldr	r3, [r7, #20]
 800e012:	681b      	ldr	r3, [r3, #0]
 800e014:	4a69      	ldr	r2, [pc, #420]	@ (800e1bc <UART_SetConfig+0x33c>)
 800e016:	4293      	cmp	r3, r2
 800e018:	d130      	bne.n	800e07c <UART_SetConfig+0x1fc>
 800e01a:	4b67      	ldr	r3, [pc, #412]	@ (800e1b8 <UART_SetConfig+0x338>)
 800e01c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e01e:	f003 0307 	and.w	r3, r3, #7
 800e022:	2b05      	cmp	r3, #5
 800e024:	d826      	bhi.n	800e074 <UART_SetConfig+0x1f4>
 800e026:	a201      	add	r2, pc, #4	@ (adr r2, 800e02c <UART_SetConfig+0x1ac>)
 800e028:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e02c:	0800e045 	.word	0x0800e045
 800e030:	0800e04d 	.word	0x0800e04d
 800e034:	0800e055 	.word	0x0800e055
 800e038:	0800e05d 	.word	0x0800e05d
 800e03c:	0800e065 	.word	0x0800e065
 800e040:	0800e06d 	.word	0x0800e06d
 800e044:	2300      	movs	r3, #0
 800e046:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e04a:	e1ec      	b.n	800e426 <UART_SetConfig+0x5a6>
 800e04c:	2304      	movs	r3, #4
 800e04e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e052:	e1e8      	b.n	800e426 <UART_SetConfig+0x5a6>
 800e054:	2308      	movs	r3, #8
 800e056:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e05a:	e1e4      	b.n	800e426 <UART_SetConfig+0x5a6>
 800e05c:	2310      	movs	r3, #16
 800e05e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e062:	e1e0      	b.n	800e426 <UART_SetConfig+0x5a6>
 800e064:	2320      	movs	r3, #32
 800e066:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e06a:	e1dc      	b.n	800e426 <UART_SetConfig+0x5a6>
 800e06c:	2340      	movs	r3, #64	@ 0x40
 800e06e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e072:	e1d8      	b.n	800e426 <UART_SetConfig+0x5a6>
 800e074:	2380      	movs	r3, #128	@ 0x80
 800e076:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e07a:	e1d4      	b.n	800e426 <UART_SetConfig+0x5a6>
 800e07c:	697b      	ldr	r3, [r7, #20]
 800e07e:	681b      	ldr	r3, [r3, #0]
 800e080:	4a4f      	ldr	r2, [pc, #316]	@ (800e1c0 <UART_SetConfig+0x340>)
 800e082:	4293      	cmp	r3, r2
 800e084:	d130      	bne.n	800e0e8 <UART_SetConfig+0x268>
 800e086:	4b4c      	ldr	r3, [pc, #304]	@ (800e1b8 <UART_SetConfig+0x338>)
 800e088:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e08a:	f003 0307 	and.w	r3, r3, #7
 800e08e:	2b05      	cmp	r3, #5
 800e090:	d826      	bhi.n	800e0e0 <UART_SetConfig+0x260>
 800e092:	a201      	add	r2, pc, #4	@ (adr r2, 800e098 <UART_SetConfig+0x218>)
 800e094:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e098:	0800e0b1 	.word	0x0800e0b1
 800e09c:	0800e0b9 	.word	0x0800e0b9
 800e0a0:	0800e0c1 	.word	0x0800e0c1
 800e0a4:	0800e0c9 	.word	0x0800e0c9
 800e0a8:	0800e0d1 	.word	0x0800e0d1
 800e0ac:	0800e0d9 	.word	0x0800e0d9
 800e0b0:	2300      	movs	r3, #0
 800e0b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e0b6:	e1b6      	b.n	800e426 <UART_SetConfig+0x5a6>
 800e0b8:	2304      	movs	r3, #4
 800e0ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e0be:	e1b2      	b.n	800e426 <UART_SetConfig+0x5a6>
 800e0c0:	2308      	movs	r3, #8
 800e0c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e0c6:	e1ae      	b.n	800e426 <UART_SetConfig+0x5a6>
 800e0c8:	2310      	movs	r3, #16
 800e0ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e0ce:	e1aa      	b.n	800e426 <UART_SetConfig+0x5a6>
 800e0d0:	2320      	movs	r3, #32
 800e0d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e0d6:	e1a6      	b.n	800e426 <UART_SetConfig+0x5a6>
 800e0d8:	2340      	movs	r3, #64	@ 0x40
 800e0da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e0de:	e1a2      	b.n	800e426 <UART_SetConfig+0x5a6>
 800e0e0:	2380      	movs	r3, #128	@ 0x80
 800e0e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e0e6:	e19e      	b.n	800e426 <UART_SetConfig+0x5a6>
 800e0e8:	697b      	ldr	r3, [r7, #20]
 800e0ea:	681b      	ldr	r3, [r3, #0]
 800e0ec:	4a35      	ldr	r2, [pc, #212]	@ (800e1c4 <UART_SetConfig+0x344>)
 800e0ee:	4293      	cmp	r3, r2
 800e0f0:	d130      	bne.n	800e154 <UART_SetConfig+0x2d4>
 800e0f2:	4b31      	ldr	r3, [pc, #196]	@ (800e1b8 <UART_SetConfig+0x338>)
 800e0f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e0f6:	f003 0307 	and.w	r3, r3, #7
 800e0fa:	2b05      	cmp	r3, #5
 800e0fc:	d826      	bhi.n	800e14c <UART_SetConfig+0x2cc>
 800e0fe:	a201      	add	r2, pc, #4	@ (adr r2, 800e104 <UART_SetConfig+0x284>)
 800e100:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e104:	0800e11d 	.word	0x0800e11d
 800e108:	0800e125 	.word	0x0800e125
 800e10c:	0800e12d 	.word	0x0800e12d
 800e110:	0800e135 	.word	0x0800e135
 800e114:	0800e13d 	.word	0x0800e13d
 800e118:	0800e145 	.word	0x0800e145
 800e11c:	2300      	movs	r3, #0
 800e11e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e122:	e180      	b.n	800e426 <UART_SetConfig+0x5a6>
 800e124:	2304      	movs	r3, #4
 800e126:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e12a:	e17c      	b.n	800e426 <UART_SetConfig+0x5a6>
 800e12c:	2308      	movs	r3, #8
 800e12e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e132:	e178      	b.n	800e426 <UART_SetConfig+0x5a6>
 800e134:	2310      	movs	r3, #16
 800e136:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e13a:	e174      	b.n	800e426 <UART_SetConfig+0x5a6>
 800e13c:	2320      	movs	r3, #32
 800e13e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e142:	e170      	b.n	800e426 <UART_SetConfig+0x5a6>
 800e144:	2340      	movs	r3, #64	@ 0x40
 800e146:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e14a:	e16c      	b.n	800e426 <UART_SetConfig+0x5a6>
 800e14c:	2380      	movs	r3, #128	@ 0x80
 800e14e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e152:	e168      	b.n	800e426 <UART_SetConfig+0x5a6>
 800e154:	697b      	ldr	r3, [r7, #20]
 800e156:	681b      	ldr	r3, [r3, #0]
 800e158:	4a1b      	ldr	r2, [pc, #108]	@ (800e1c8 <UART_SetConfig+0x348>)
 800e15a:	4293      	cmp	r3, r2
 800e15c:	d142      	bne.n	800e1e4 <UART_SetConfig+0x364>
 800e15e:	4b16      	ldr	r3, [pc, #88]	@ (800e1b8 <UART_SetConfig+0x338>)
 800e160:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e162:	f003 0307 	and.w	r3, r3, #7
 800e166:	2b05      	cmp	r3, #5
 800e168:	d838      	bhi.n	800e1dc <UART_SetConfig+0x35c>
 800e16a:	a201      	add	r2, pc, #4	@ (adr r2, 800e170 <UART_SetConfig+0x2f0>)
 800e16c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e170:	0800e189 	.word	0x0800e189
 800e174:	0800e191 	.word	0x0800e191
 800e178:	0800e199 	.word	0x0800e199
 800e17c:	0800e1a1 	.word	0x0800e1a1
 800e180:	0800e1cd 	.word	0x0800e1cd
 800e184:	0800e1d5 	.word	0x0800e1d5
 800e188:	2300      	movs	r3, #0
 800e18a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e18e:	e14a      	b.n	800e426 <UART_SetConfig+0x5a6>
 800e190:	2304      	movs	r3, #4
 800e192:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e196:	e146      	b.n	800e426 <UART_SetConfig+0x5a6>
 800e198:	2308      	movs	r3, #8
 800e19a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e19e:	e142      	b.n	800e426 <UART_SetConfig+0x5a6>
 800e1a0:	2310      	movs	r3, #16
 800e1a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e1a6:	e13e      	b.n	800e426 <UART_SetConfig+0x5a6>
 800e1a8:	cfff69f3 	.word	0xcfff69f3
 800e1ac:	58000c00 	.word	0x58000c00
 800e1b0:	11fff4ff 	.word	0x11fff4ff
 800e1b4:	40011000 	.word	0x40011000
 800e1b8:	58024400 	.word	0x58024400
 800e1bc:	40004400 	.word	0x40004400
 800e1c0:	40004800 	.word	0x40004800
 800e1c4:	40004c00 	.word	0x40004c00
 800e1c8:	40005000 	.word	0x40005000
 800e1cc:	2320      	movs	r3, #32
 800e1ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e1d2:	e128      	b.n	800e426 <UART_SetConfig+0x5a6>
 800e1d4:	2340      	movs	r3, #64	@ 0x40
 800e1d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e1da:	e124      	b.n	800e426 <UART_SetConfig+0x5a6>
 800e1dc:	2380      	movs	r3, #128	@ 0x80
 800e1de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e1e2:	e120      	b.n	800e426 <UART_SetConfig+0x5a6>
 800e1e4:	697b      	ldr	r3, [r7, #20]
 800e1e6:	681b      	ldr	r3, [r3, #0]
 800e1e8:	4acb      	ldr	r2, [pc, #812]	@ (800e518 <UART_SetConfig+0x698>)
 800e1ea:	4293      	cmp	r3, r2
 800e1ec:	d176      	bne.n	800e2dc <UART_SetConfig+0x45c>
 800e1ee:	4bcb      	ldr	r3, [pc, #812]	@ (800e51c <UART_SetConfig+0x69c>)
 800e1f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e1f2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800e1f6:	2b28      	cmp	r3, #40	@ 0x28
 800e1f8:	d86c      	bhi.n	800e2d4 <UART_SetConfig+0x454>
 800e1fa:	a201      	add	r2, pc, #4	@ (adr r2, 800e200 <UART_SetConfig+0x380>)
 800e1fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e200:	0800e2a5 	.word	0x0800e2a5
 800e204:	0800e2d5 	.word	0x0800e2d5
 800e208:	0800e2d5 	.word	0x0800e2d5
 800e20c:	0800e2d5 	.word	0x0800e2d5
 800e210:	0800e2d5 	.word	0x0800e2d5
 800e214:	0800e2d5 	.word	0x0800e2d5
 800e218:	0800e2d5 	.word	0x0800e2d5
 800e21c:	0800e2d5 	.word	0x0800e2d5
 800e220:	0800e2ad 	.word	0x0800e2ad
 800e224:	0800e2d5 	.word	0x0800e2d5
 800e228:	0800e2d5 	.word	0x0800e2d5
 800e22c:	0800e2d5 	.word	0x0800e2d5
 800e230:	0800e2d5 	.word	0x0800e2d5
 800e234:	0800e2d5 	.word	0x0800e2d5
 800e238:	0800e2d5 	.word	0x0800e2d5
 800e23c:	0800e2d5 	.word	0x0800e2d5
 800e240:	0800e2b5 	.word	0x0800e2b5
 800e244:	0800e2d5 	.word	0x0800e2d5
 800e248:	0800e2d5 	.word	0x0800e2d5
 800e24c:	0800e2d5 	.word	0x0800e2d5
 800e250:	0800e2d5 	.word	0x0800e2d5
 800e254:	0800e2d5 	.word	0x0800e2d5
 800e258:	0800e2d5 	.word	0x0800e2d5
 800e25c:	0800e2d5 	.word	0x0800e2d5
 800e260:	0800e2bd 	.word	0x0800e2bd
 800e264:	0800e2d5 	.word	0x0800e2d5
 800e268:	0800e2d5 	.word	0x0800e2d5
 800e26c:	0800e2d5 	.word	0x0800e2d5
 800e270:	0800e2d5 	.word	0x0800e2d5
 800e274:	0800e2d5 	.word	0x0800e2d5
 800e278:	0800e2d5 	.word	0x0800e2d5
 800e27c:	0800e2d5 	.word	0x0800e2d5
 800e280:	0800e2c5 	.word	0x0800e2c5
 800e284:	0800e2d5 	.word	0x0800e2d5
 800e288:	0800e2d5 	.word	0x0800e2d5
 800e28c:	0800e2d5 	.word	0x0800e2d5
 800e290:	0800e2d5 	.word	0x0800e2d5
 800e294:	0800e2d5 	.word	0x0800e2d5
 800e298:	0800e2d5 	.word	0x0800e2d5
 800e29c:	0800e2d5 	.word	0x0800e2d5
 800e2a0:	0800e2cd 	.word	0x0800e2cd
 800e2a4:	2301      	movs	r3, #1
 800e2a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e2aa:	e0bc      	b.n	800e426 <UART_SetConfig+0x5a6>
 800e2ac:	2304      	movs	r3, #4
 800e2ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e2b2:	e0b8      	b.n	800e426 <UART_SetConfig+0x5a6>
 800e2b4:	2308      	movs	r3, #8
 800e2b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e2ba:	e0b4      	b.n	800e426 <UART_SetConfig+0x5a6>
 800e2bc:	2310      	movs	r3, #16
 800e2be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e2c2:	e0b0      	b.n	800e426 <UART_SetConfig+0x5a6>
 800e2c4:	2320      	movs	r3, #32
 800e2c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e2ca:	e0ac      	b.n	800e426 <UART_SetConfig+0x5a6>
 800e2cc:	2340      	movs	r3, #64	@ 0x40
 800e2ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e2d2:	e0a8      	b.n	800e426 <UART_SetConfig+0x5a6>
 800e2d4:	2380      	movs	r3, #128	@ 0x80
 800e2d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e2da:	e0a4      	b.n	800e426 <UART_SetConfig+0x5a6>
 800e2dc:	697b      	ldr	r3, [r7, #20]
 800e2de:	681b      	ldr	r3, [r3, #0]
 800e2e0:	4a8f      	ldr	r2, [pc, #572]	@ (800e520 <UART_SetConfig+0x6a0>)
 800e2e2:	4293      	cmp	r3, r2
 800e2e4:	d130      	bne.n	800e348 <UART_SetConfig+0x4c8>
 800e2e6:	4b8d      	ldr	r3, [pc, #564]	@ (800e51c <UART_SetConfig+0x69c>)
 800e2e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e2ea:	f003 0307 	and.w	r3, r3, #7
 800e2ee:	2b05      	cmp	r3, #5
 800e2f0:	d826      	bhi.n	800e340 <UART_SetConfig+0x4c0>
 800e2f2:	a201      	add	r2, pc, #4	@ (adr r2, 800e2f8 <UART_SetConfig+0x478>)
 800e2f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e2f8:	0800e311 	.word	0x0800e311
 800e2fc:	0800e319 	.word	0x0800e319
 800e300:	0800e321 	.word	0x0800e321
 800e304:	0800e329 	.word	0x0800e329
 800e308:	0800e331 	.word	0x0800e331
 800e30c:	0800e339 	.word	0x0800e339
 800e310:	2300      	movs	r3, #0
 800e312:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e316:	e086      	b.n	800e426 <UART_SetConfig+0x5a6>
 800e318:	2304      	movs	r3, #4
 800e31a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e31e:	e082      	b.n	800e426 <UART_SetConfig+0x5a6>
 800e320:	2308      	movs	r3, #8
 800e322:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e326:	e07e      	b.n	800e426 <UART_SetConfig+0x5a6>
 800e328:	2310      	movs	r3, #16
 800e32a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e32e:	e07a      	b.n	800e426 <UART_SetConfig+0x5a6>
 800e330:	2320      	movs	r3, #32
 800e332:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e336:	e076      	b.n	800e426 <UART_SetConfig+0x5a6>
 800e338:	2340      	movs	r3, #64	@ 0x40
 800e33a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e33e:	e072      	b.n	800e426 <UART_SetConfig+0x5a6>
 800e340:	2380      	movs	r3, #128	@ 0x80
 800e342:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e346:	e06e      	b.n	800e426 <UART_SetConfig+0x5a6>
 800e348:	697b      	ldr	r3, [r7, #20]
 800e34a:	681b      	ldr	r3, [r3, #0]
 800e34c:	4a75      	ldr	r2, [pc, #468]	@ (800e524 <UART_SetConfig+0x6a4>)
 800e34e:	4293      	cmp	r3, r2
 800e350:	d130      	bne.n	800e3b4 <UART_SetConfig+0x534>
 800e352:	4b72      	ldr	r3, [pc, #456]	@ (800e51c <UART_SetConfig+0x69c>)
 800e354:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e356:	f003 0307 	and.w	r3, r3, #7
 800e35a:	2b05      	cmp	r3, #5
 800e35c:	d826      	bhi.n	800e3ac <UART_SetConfig+0x52c>
 800e35e:	a201      	add	r2, pc, #4	@ (adr r2, 800e364 <UART_SetConfig+0x4e4>)
 800e360:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e364:	0800e37d 	.word	0x0800e37d
 800e368:	0800e385 	.word	0x0800e385
 800e36c:	0800e38d 	.word	0x0800e38d
 800e370:	0800e395 	.word	0x0800e395
 800e374:	0800e39d 	.word	0x0800e39d
 800e378:	0800e3a5 	.word	0x0800e3a5
 800e37c:	2300      	movs	r3, #0
 800e37e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e382:	e050      	b.n	800e426 <UART_SetConfig+0x5a6>
 800e384:	2304      	movs	r3, #4
 800e386:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e38a:	e04c      	b.n	800e426 <UART_SetConfig+0x5a6>
 800e38c:	2308      	movs	r3, #8
 800e38e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e392:	e048      	b.n	800e426 <UART_SetConfig+0x5a6>
 800e394:	2310      	movs	r3, #16
 800e396:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e39a:	e044      	b.n	800e426 <UART_SetConfig+0x5a6>
 800e39c:	2320      	movs	r3, #32
 800e39e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e3a2:	e040      	b.n	800e426 <UART_SetConfig+0x5a6>
 800e3a4:	2340      	movs	r3, #64	@ 0x40
 800e3a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e3aa:	e03c      	b.n	800e426 <UART_SetConfig+0x5a6>
 800e3ac:	2380      	movs	r3, #128	@ 0x80
 800e3ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e3b2:	e038      	b.n	800e426 <UART_SetConfig+0x5a6>
 800e3b4:	697b      	ldr	r3, [r7, #20]
 800e3b6:	681b      	ldr	r3, [r3, #0]
 800e3b8:	4a5b      	ldr	r2, [pc, #364]	@ (800e528 <UART_SetConfig+0x6a8>)
 800e3ba:	4293      	cmp	r3, r2
 800e3bc:	d130      	bne.n	800e420 <UART_SetConfig+0x5a0>
 800e3be:	4b57      	ldr	r3, [pc, #348]	@ (800e51c <UART_SetConfig+0x69c>)
 800e3c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e3c2:	f003 0307 	and.w	r3, r3, #7
 800e3c6:	2b05      	cmp	r3, #5
 800e3c8:	d826      	bhi.n	800e418 <UART_SetConfig+0x598>
 800e3ca:	a201      	add	r2, pc, #4	@ (adr r2, 800e3d0 <UART_SetConfig+0x550>)
 800e3cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e3d0:	0800e3e9 	.word	0x0800e3e9
 800e3d4:	0800e3f1 	.word	0x0800e3f1
 800e3d8:	0800e3f9 	.word	0x0800e3f9
 800e3dc:	0800e401 	.word	0x0800e401
 800e3e0:	0800e409 	.word	0x0800e409
 800e3e4:	0800e411 	.word	0x0800e411
 800e3e8:	2302      	movs	r3, #2
 800e3ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e3ee:	e01a      	b.n	800e426 <UART_SetConfig+0x5a6>
 800e3f0:	2304      	movs	r3, #4
 800e3f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e3f6:	e016      	b.n	800e426 <UART_SetConfig+0x5a6>
 800e3f8:	2308      	movs	r3, #8
 800e3fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e3fe:	e012      	b.n	800e426 <UART_SetConfig+0x5a6>
 800e400:	2310      	movs	r3, #16
 800e402:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e406:	e00e      	b.n	800e426 <UART_SetConfig+0x5a6>
 800e408:	2320      	movs	r3, #32
 800e40a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e40e:	e00a      	b.n	800e426 <UART_SetConfig+0x5a6>
 800e410:	2340      	movs	r3, #64	@ 0x40
 800e412:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e416:	e006      	b.n	800e426 <UART_SetConfig+0x5a6>
 800e418:	2380      	movs	r3, #128	@ 0x80
 800e41a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e41e:	e002      	b.n	800e426 <UART_SetConfig+0x5a6>
 800e420:	2380      	movs	r3, #128	@ 0x80
 800e422:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800e426:	697b      	ldr	r3, [r7, #20]
 800e428:	681b      	ldr	r3, [r3, #0]
 800e42a:	4a3f      	ldr	r2, [pc, #252]	@ (800e528 <UART_SetConfig+0x6a8>)
 800e42c:	4293      	cmp	r3, r2
 800e42e:	f040 80f8 	bne.w	800e622 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800e432:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800e436:	2b20      	cmp	r3, #32
 800e438:	dc46      	bgt.n	800e4c8 <UART_SetConfig+0x648>
 800e43a:	2b02      	cmp	r3, #2
 800e43c:	f2c0 8082 	blt.w	800e544 <UART_SetConfig+0x6c4>
 800e440:	3b02      	subs	r3, #2
 800e442:	2b1e      	cmp	r3, #30
 800e444:	d87e      	bhi.n	800e544 <UART_SetConfig+0x6c4>
 800e446:	a201      	add	r2, pc, #4	@ (adr r2, 800e44c <UART_SetConfig+0x5cc>)
 800e448:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e44c:	0800e4cf 	.word	0x0800e4cf
 800e450:	0800e545 	.word	0x0800e545
 800e454:	0800e4d7 	.word	0x0800e4d7
 800e458:	0800e545 	.word	0x0800e545
 800e45c:	0800e545 	.word	0x0800e545
 800e460:	0800e545 	.word	0x0800e545
 800e464:	0800e4e7 	.word	0x0800e4e7
 800e468:	0800e545 	.word	0x0800e545
 800e46c:	0800e545 	.word	0x0800e545
 800e470:	0800e545 	.word	0x0800e545
 800e474:	0800e545 	.word	0x0800e545
 800e478:	0800e545 	.word	0x0800e545
 800e47c:	0800e545 	.word	0x0800e545
 800e480:	0800e545 	.word	0x0800e545
 800e484:	0800e4f7 	.word	0x0800e4f7
 800e488:	0800e545 	.word	0x0800e545
 800e48c:	0800e545 	.word	0x0800e545
 800e490:	0800e545 	.word	0x0800e545
 800e494:	0800e545 	.word	0x0800e545
 800e498:	0800e545 	.word	0x0800e545
 800e49c:	0800e545 	.word	0x0800e545
 800e4a0:	0800e545 	.word	0x0800e545
 800e4a4:	0800e545 	.word	0x0800e545
 800e4a8:	0800e545 	.word	0x0800e545
 800e4ac:	0800e545 	.word	0x0800e545
 800e4b0:	0800e545 	.word	0x0800e545
 800e4b4:	0800e545 	.word	0x0800e545
 800e4b8:	0800e545 	.word	0x0800e545
 800e4bc:	0800e545 	.word	0x0800e545
 800e4c0:	0800e545 	.word	0x0800e545
 800e4c4:	0800e537 	.word	0x0800e537
 800e4c8:	2b40      	cmp	r3, #64	@ 0x40
 800e4ca:	d037      	beq.n	800e53c <UART_SetConfig+0x6bc>
 800e4cc:	e03a      	b.n	800e544 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800e4ce:	f7fd f8d7 	bl	800b680 <HAL_RCCEx_GetD3PCLK1Freq>
 800e4d2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800e4d4:	e03c      	b.n	800e550 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e4d6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800e4da:	4618      	mov	r0, r3
 800e4dc:	f7fd f8e6 	bl	800b6ac <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800e4e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e4e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e4e4:	e034      	b.n	800e550 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e4e6:	f107 0318 	add.w	r3, r7, #24
 800e4ea:	4618      	mov	r0, r3
 800e4ec:	f7fd fa32 	bl	800b954 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800e4f0:	69fb      	ldr	r3, [r7, #28]
 800e4f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e4f4:	e02c      	b.n	800e550 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e4f6:	4b09      	ldr	r3, [pc, #36]	@ (800e51c <UART_SetConfig+0x69c>)
 800e4f8:	681b      	ldr	r3, [r3, #0]
 800e4fa:	f003 0320 	and.w	r3, r3, #32
 800e4fe:	2b00      	cmp	r3, #0
 800e500:	d016      	beq.n	800e530 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800e502:	4b06      	ldr	r3, [pc, #24]	@ (800e51c <UART_SetConfig+0x69c>)
 800e504:	681b      	ldr	r3, [r3, #0]
 800e506:	08db      	lsrs	r3, r3, #3
 800e508:	f003 0303 	and.w	r3, r3, #3
 800e50c:	4a07      	ldr	r2, [pc, #28]	@ (800e52c <UART_SetConfig+0x6ac>)
 800e50e:	fa22 f303 	lsr.w	r3, r2, r3
 800e512:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800e514:	e01c      	b.n	800e550 <UART_SetConfig+0x6d0>
 800e516:	bf00      	nop
 800e518:	40011400 	.word	0x40011400
 800e51c:	58024400 	.word	0x58024400
 800e520:	40007800 	.word	0x40007800
 800e524:	40007c00 	.word	0x40007c00
 800e528:	58000c00 	.word	0x58000c00
 800e52c:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800e530:	4b9d      	ldr	r3, [pc, #628]	@ (800e7a8 <UART_SetConfig+0x928>)
 800e532:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e534:	e00c      	b.n	800e550 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800e536:	4b9d      	ldr	r3, [pc, #628]	@ (800e7ac <UART_SetConfig+0x92c>)
 800e538:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e53a:	e009      	b.n	800e550 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e53c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800e540:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e542:	e005      	b.n	800e550 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800e544:	2300      	movs	r3, #0
 800e546:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800e548:	2301      	movs	r3, #1
 800e54a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800e54e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800e550:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e552:	2b00      	cmp	r3, #0
 800e554:	f000 81de 	beq.w	800e914 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800e558:	697b      	ldr	r3, [r7, #20]
 800e55a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e55c:	4a94      	ldr	r2, [pc, #592]	@ (800e7b0 <UART_SetConfig+0x930>)
 800e55e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e562:	461a      	mov	r2, r3
 800e564:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e566:	fbb3 f3f2 	udiv	r3, r3, r2
 800e56a:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800e56c:	697b      	ldr	r3, [r7, #20]
 800e56e:	685a      	ldr	r2, [r3, #4]
 800e570:	4613      	mov	r3, r2
 800e572:	005b      	lsls	r3, r3, #1
 800e574:	4413      	add	r3, r2
 800e576:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e578:	429a      	cmp	r2, r3
 800e57a:	d305      	bcc.n	800e588 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800e57c:	697b      	ldr	r3, [r7, #20]
 800e57e:	685b      	ldr	r3, [r3, #4]
 800e580:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800e582:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e584:	429a      	cmp	r2, r3
 800e586:	d903      	bls.n	800e590 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800e588:	2301      	movs	r3, #1
 800e58a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800e58e:	e1c1      	b.n	800e914 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e590:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e592:	2200      	movs	r2, #0
 800e594:	60bb      	str	r3, [r7, #8]
 800e596:	60fa      	str	r2, [r7, #12]
 800e598:	697b      	ldr	r3, [r7, #20]
 800e59a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e59c:	4a84      	ldr	r2, [pc, #528]	@ (800e7b0 <UART_SetConfig+0x930>)
 800e59e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e5a2:	b29b      	uxth	r3, r3
 800e5a4:	2200      	movs	r2, #0
 800e5a6:	603b      	str	r3, [r7, #0]
 800e5a8:	607a      	str	r2, [r7, #4]
 800e5aa:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e5ae:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800e5b2:	f7f2 f8b1 	bl	8000718 <__aeabi_uldivmod>
 800e5b6:	4602      	mov	r2, r0
 800e5b8:	460b      	mov	r3, r1
 800e5ba:	4610      	mov	r0, r2
 800e5bc:	4619      	mov	r1, r3
 800e5be:	f04f 0200 	mov.w	r2, #0
 800e5c2:	f04f 0300 	mov.w	r3, #0
 800e5c6:	020b      	lsls	r3, r1, #8
 800e5c8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800e5cc:	0202      	lsls	r2, r0, #8
 800e5ce:	6979      	ldr	r1, [r7, #20]
 800e5d0:	6849      	ldr	r1, [r1, #4]
 800e5d2:	0849      	lsrs	r1, r1, #1
 800e5d4:	2000      	movs	r0, #0
 800e5d6:	460c      	mov	r4, r1
 800e5d8:	4605      	mov	r5, r0
 800e5da:	eb12 0804 	adds.w	r8, r2, r4
 800e5de:	eb43 0905 	adc.w	r9, r3, r5
 800e5e2:	697b      	ldr	r3, [r7, #20]
 800e5e4:	685b      	ldr	r3, [r3, #4]
 800e5e6:	2200      	movs	r2, #0
 800e5e8:	469a      	mov	sl, r3
 800e5ea:	4693      	mov	fp, r2
 800e5ec:	4652      	mov	r2, sl
 800e5ee:	465b      	mov	r3, fp
 800e5f0:	4640      	mov	r0, r8
 800e5f2:	4649      	mov	r1, r9
 800e5f4:	f7f2 f890 	bl	8000718 <__aeabi_uldivmod>
 800e5f8:	4602      	mov	r2, r0
 800e5fa:	460b      	mov	r3, r1
 800e5fc:	4613      	mov	r3, r2
 800e5fe:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800e600:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e602:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800e606:	d308      	bcc.n	800e61a <UART_SetConfig+0x79a>
 800e608:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e60a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800e60e:	d204      	bcs.n	800e61a <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800e610:	697b      	ldr	r3, [r7, #20]
 800e612:	681b      	ldr	r3, [r3, #0]
 800e614:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e616:	60da      	str	r2, [r3, #12]
 800e618:	e17c      	b.n	800e914 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800e61a:	2301      	movs	r3, #1
 800e61c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800e620:	e178      	b.n	800e914 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800e622:	697b      	ldr	r3, [r7, #20]
 800e624:	69db      	ldr	r3, [r3, #28]
 800e626:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800e62a:	f040 80c5 	bne.w	800e7b8 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800e62e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800e632:	2b20      	cmp	r3, #32
 800e634:	dc48      	bgt.n	800e6c8 <UART_SetConfig+0x848>
 800e636:	2b00      	cmp	r3, #0
 800e638:	db7b      	blt.n	800e732 <UART_SetConfig+0x8b2>
 800e63a:	2b20      	cmp	r3, #32
 800e63c:	d879      	bhi.n	800e732 <UART_SetConfig+0x8b2>
 800e63e:	a201      	add	r2, pc, #4	@ (adr r2, 800e644 <UART_SetConfig+0x7c4>)
 800e640:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e644:	0800e6cf 	.word	0x0800e6cf
 800e648:	0800e6d7 	.word	0x0800e6d7
 800e64c:	0800e733 	.word	0x0800e733
 800e650:	0800e733 	.word	0x0800e733
 800e654:	0800e6df 	.word	0x0800e6df
 800e658:	0800e733 	.word	0x0800e733
 800e65c:	0800e733 	.word	0x0800e733
 800e660:	0800e733 	.word	0x0800e733
 800e664:	0800e6ef 	.word	0x0800e6ef
 800e668:	0800e733 	.word	0x0800e733
 800e66c:	0800e733 	.word	0x0800e733
 800e670:	0800e733 	.word	0x0800e733
 800e674:	0800e733 	.word	0x0800e733
 800e678:	0800e733 	.word	0x0800e733
 800e67c:	0800e733 	.word	0x0800e733
 800e680:	0800e733 	.word	0x0800e733
 800e684:	0800e6ff 	.word	0x0800e6ff
 800e688:	0800e733 	.word	0x0800e733
 800e68c:	0800e733 	.word	0x0800e733
 800e690:	0800e733 	.word	0x0800e733
 800e694:	0800e733 	.word	0x0800e733
 800e698:	0800e733 	.word	0x0800e733
 800e69c:	0800e733 	.word	0x0800e733
 800e6a0:	0800e733 	.word	0x0800e733
 800e6a4:	0800e733 	.word	0x0800e733
 800e6a8:	0800e733 	.word	0x0800e733
 800e6ac:	0800e733 	.word	0x0800e733
 800e6b0:	0800e733 	.word	0x0800e733
 800e6b4:	0800e733 	.word	0x0800e733
 800e6b8:	0800e733 	.word	0x0800e733
 800e6bc:	0800e733 	.word	0x0800e733
 800e6c0:	0800e733 	.word	0x0800e733
 800e6c4:	0800e725 	.word	0x0800e725
 800e6c8:	2b40      	cmp	r3, #64	@ 0x40
 800e6ca:	d02e      	beq.n	800e72a <UART_SetConfig+0x8aa>
 800e6cc:	e031      	b.n	800e732 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e6ce:	f7fb f821 	bl	8009714 <HAL_RCC_GetPCLK1Freq>
 800e6d2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800e6d4:	e033      	b.n	800e73e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e6d6:	f7fb f833 	bl	8009740 <HAL_RCC_GetPCLK2Freq>
 800e6da:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800e6dc:	e02f      	b.n	800e73e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e6de:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800e6e2:	4618      	mov	r0, r3
 800e6e4:	f7fc ffe2 	bl	800b6ac <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800e6e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e6ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e6ec:	e027      	b.n	800e73e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e6ee:	f107 0318 	add.w	r3, r7, #24
 800e6f2:	4618      	mov	r0, r3
 800e6f4:	f7fd f92e 	bl	800b954 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800e6f8:	69fb      	ldr	r3, [r7, #28]
 800e6fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e6fc:	e01f      	b.n	800e73e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e6fe:	4b2d      	ldr	r3, [pc, #180]	@ (800e7b4 <UART_SetConfig+0x934>)
 800e700:	681b      	ldr	r3, [r3, #0]
 800e702:	f003 0320 	and.w	r3, r3, #32
 800e706:	2b00      	cmp	r3, #0
 800e708:	d009      	beq.n	800e71e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800e70a:	4b2a      	ldr	r3, [pc, #168]	@ (800e7b4 <UART_SetConfig+0x934>)
 800e70c:	681b      	ldr	r3, [r3, #0]
 800e70e:	08db      	lsrs	r3, r3, #3
 800e710:	f003 0303 	and.w	r3, r3, #3
 800e714:	4a24      	ldr	r2, [pc, #144]	@ (800e7a8 <UART_SetConfig+0x928>)
 800e716:	fa22 f303 	lsr.w	r3, r2, r3
 800e71a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800e71c:	e00f      	b.n	800e73e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800e71e:	4b22      	ldr	r3, [pc, #136]	@ (800e7a8 <UART_SetConfig+0x928>)
 800e720:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e722:	e00c      	b.n	800e73e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800e724:	4b21      	ldr	r3, [pc, #132]	@ (800e7ac <UART_SetConfig+0x92c>)
 800e726:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e728:	e009      	b.n	800e73e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e72a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800e72e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e730:	e005      	b.n	800e73e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800e732:	2300      	movs	r3, #0
 800e734:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800e736:	2301      	movs	r3, #1
 800e738:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800e73c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800e73e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e740:	2b00      	cmp	r3, #0
 800e742:	f000 80e7 	beq.w	800e914 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e746:	697b      	ldr	r3, [r7, #20]
 800e748:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e74a:	4a19      	ldr	r2, [pc, #100]	@ (800e7b0 <UART_SetConfig+0x930>)
 800e74c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e750:	461a      	mov	r2, r3
 800e752:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e754:	fbb3 f3f2 	udiv	r3, r3, r2
 800e758:	005a      	lsls	r2, r3, #1
 800e75a:	697b      	ldr	r3, [r7, #20]
 800e75c:	685b      	ldr	r3, [r3, #4]
 800e75e:	085b      	lsrs	r3, r3, #1
 800e760:	441a      	add	r2, r3
 800e762:	697b      	ldr	r3, [r7, #20]
 800e764:	685b      	ldr	r3, [r3, #4]
 800e766:	fbb2 f3f3 	udiv	r3, r2, r3
 800e76a:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e76c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e76e:	2b0f      	cmp	r3, #15
 800e770:	d916      	bls.n	800e7a0 <UART_SetConfig+0x920>
 800e772:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e774:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e778:	d212      	bcs.n	800e7a0 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800e77a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e77c:	b29b      	uxth	r3, r3
 800e77e:	f023 030f 	bic.w	r3, r3, #15
 800e782:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800e784:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e786:	085b      	lsrs	r3, r3, #1
 800e788:	b29b      	uxth	r3, r3
 800e78a:	f003 0307 	and.w	r3, r3, #7
 800e78e:	b29a      	uxth	r2, r3
 800e790:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800e792:	4313      	orrs	r3, r2
 800e794:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800e796:	697b      	ldr	r3, [r7, #20]
 800e798:	681b      	ldr	r3, [r3, #0]
 800e79a:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800e79c:	60da      	str	r2, [r3, #12]
 800e79e:	e0b9      	b.n	800e914 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800e7a0:	2301      	movs	r3, #1
 800e7a2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800e7a6:	e0b5      	b.n	800e914 <UART_SetConfig+0xa94>
 800e7a8:	03d09000 	.word	0x03d09000
 800e7ac:	003d0900 	.word	0x003d0900
 800e7b0:	080140a8 	.word	0x080140a8
 800e7b4:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800e7b8:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800e7bc:	2b20      	cmp	r3, #32
 800e7be:	dc49      	bgt.n	800e854 <UART_SetConfig+0x9d4>
 800e7c0:	2b00      	cmp	r3, #0
 800e7c2:	db7c      	blt.n	800e8be <UART_SetConfig+0xa3e>
 800e7c4:	2b20      	cmp	r3, #32
 800e7c6:	d87a      	bhi.n	800e8be <UART_SetConfig+0xa3e>
 800e7c8:	a201      	add	r2, pc, #4	@ (adr r2, 800e7d0 <UART_SetConfig+0x950>)
 800e7ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e7ce:	bf00      	nop
 800e7d0:	0800e85b 	.word	0x0800e85b
 800e7d4:	0800e863 	.word	0x0800e863
 800e7d8:	0800e8bf 	.word	0x0800e8bf
 800e7dc:	0800e8bf 	.word	0x0800e8bf
 800e7e0:	0800e86b 	.word	0x0800e86b
 800e7e4:	0800e8bf 	.word	0x0800e8bf
 800e7e8:	0800e8bf 	.word	0x0800e8bf
 800e7ec:	0800e8bf 	.word	0x0800e8bf
 800e7f0:	0800e87b 	.word	0x0800e87b
 800e7f4:	0800e8bf 	.word	0x0800e8bf
 800e7f8:	0800e8bf 	.word	0x0800e8bf
 800e7fc:	0800e8bf 	.word	0x0800e8bf
 800e800:	0800e8bf 	.word	0x0800e8bf
 800e804:	0800e8bf 	.word	0x0800e8bf
 800e808:	0800e8bf 	.word	0x0800e8bf
 800e80c:	0800e8bf 	.word	0x0800e8bf
 800e810:	0800e88b 	.word	0x0800e88b
 800e814:	0800e8bf 	.word	0x0800e8bf
 800e818:	0800e8bf 	.word	0x0800e8bf
 800e81c:	0800e8bf 	.word	0x0800e8bf
 800e820:	0800e8bf 	.word	0x0800e8bf
 800e824:	0800e8bf 	.word	0x0800e8bf
 800e828:	0800e8bf 	.word	0x0800e8bf
 800e82c:	0800e8bf 	.word	0x0800e8bf
 800e830:	0800e8bf 	.word	0x0800e8bf
 800e834:	0800e8bf 	.word	0x0800e8bf
 800e838:	0800e8bf 	.word	0x0800e8bf
 800e83c:	0800e8bf 	.word	0x0800e8bf
 800e840:	0800e8bf 	.word	0x0800e8bf
 800e844:	0800e8bf 	.word	0x0800e8bf
 800e848:	0800e8bf 	.word	0x0800e8bf
 800e84c:	0800e8bf 	.word	0x0800e8bf
 800e850:	0800e8b1 	.word	0x0800e8b1
 800e854:	2b40      	cmp	r3, #64	@ 0x40
 800e856:	d02e      	beq.n	800e8b6 <UART_SetConfig+0xa36>
 800e858:	e031      	b.n	800e8be <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e85a:	f7fa ff5b 	bl	8009714 <HAL_RCC_GetPCLK1Freq>
 800e85e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800e860:	e033      	b.n	800e8ca <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e862:	f7fa ff6d 	bl	8009740 <HAL_RCC_GetPCLK2Freq>
 800e866:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800e868:	e02f      	b.n	800e8ca <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e86a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800e86e:	4618      	mov	r0, r3
 800e870:	f7fc ff1c 	bl	800b6ac <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800e874:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e876:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e878:	e027      	b.n	800e8ca <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e87a:	f107 0318 	add.w	r3, r7, #24
 800e87e:	4618      	mov	r0, r3
 800e880:	f7fd f868 	bl	800b954 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800e884:	69fb      	ldr	r3, [r7, #28]
 800e886:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e888:	e01f      	b.n	800e8ca <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e88a:	4b2d      	ldr	r3, [pc, #180]	@ (800e940 <UART_SetConfig+0xac0>)
 800e88c:	681b      	ldr	r3, [r3, #0]
 800e88e:	f003 0320 	and.w	r3, r3, #32
 800e892:	2b00      	cmp	r3, #0
 800e894:	d009      	beq.n	800e8aa <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800e896:	4b2a      	ldr	r3, [pc, #168]	@ (800e940 <UART_SetConfig+0xac0>)
 800e898:	681b      	ldr	r3, [r3, #0]
 800e89a:	08db      	lsrs	r3, r3, #3
 800e89c:	f003 0303 	and.w	r3, r3, #3
 800e8a0:	4a28      	ldr	r2, [pc, #160]	@ (800e944 <UART_SetConfig+0xac4>)
 800e8a2:	fa22 f303 	lsr.w	r3, r2, r3
 800e8a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800e8a8:	e00f      	b.n	800e8ca <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800e8aa:	4b26      	ldr	r3, [pc, #152]	@ (800e944 <UART_SetConfig+0xac4>)
 800e8ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e8ae:	e00c      	b.n	800e8ca <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800e8b0:	4b25      	ldr	r3, [pc, #148]	@ (800e948 <UART_SetConfig+0xac8>)
 800e8b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e8b4:	e009      	b.n	800e8ca <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e8b6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800e8ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e8bc:	e005      	b.n	800e8ca <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800e8be:	2300      	movs	r3, #0
 800e8c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800e8c2:	2301      	movs	r3, #1
 800e8c4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800e8c8:	bf00      	nop
    }

    if (pclk != 0U)
 800e8ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e8cc:	2b00      	cmp	r3, #0
 800e8ce:	d021      	beq.n	800e914 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e8d0:	697b      	ldr	r3, [r7, #20]
 800e8d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e8d4:	4a1d      	ldr	r2, [pc, #116]	@ (800e94c <UART_SetConfig+0xacc>)
 800e8d6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e8da:	461a      	mov	r2, r3
 800e8dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e8de:	fbb3 f2f2 	udiv	r2, r3, r2
 800e8e2:	697b      	ldr	r3, [r7, #20]
 800e8e4:	685b      	ldr	r3, [r3, #4]
 800e8e6:	085b      	lsrs	r3, r3, #1
 800e8e8:	441a      	add	r2, r3
 800e8ea:	697b      	ldr	r3, [r7, #20]
 800e8ec:	685b      	ldr	r3, [r3, #4]
 800e8ee:	fbb2 f3f3 	udiv	r3, r2, r3
 800e8f2:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e8f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e8f6:	2b0f      	cmp	r3, #15
 800e8f8:	d909      	bls.n	800e90e <UART_SetConfig+0xa8e>
 800e8fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e8fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e900:	d205      	bcs.n	800e90e <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800e902:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e904:	b29a      	uxth	r2, r3
 800e906:	697b      	ldr	r3, [r7, #20]
 800e908:	681b      	ldr	r3, [r3, #0]
 800e90a:	60da      	str	r2, [r3, #12]
 800e90c:	e002      	b.n	800e914 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800e90e:	2301      	movs	r3, #1
 800e910:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800e914:	697b      	ldr	r3, [r7, #20]
 800e916:	2201      	movs	r2, #1
 800e918:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800e91c:	697b      	ldr	r3, [r7, #20]
 800e91e:	2201      	movs	r2, #1
 800e920:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800e924:	697b      	ldr	r3, [r7, #20]
 800e926:	2200      	movs	r2, #0
 800e928:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800e92a:	697b      	ldr	r3, [r7, #20]
 800e92c:	2200      	movs	r2, #0
 800e92e:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800e930:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800e934:	4618      	mov	r0, r3
 800e936:	3748      	adds	r7, #72	@ 0x48
 800e938:	46bd      	mov	sp, r7
 800e93a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800e93e:	bf00      	nop
 800e940:	58024400 	.word	0x58024400
 800e944:	03d09000 	.word	0x03d09000
 800e948:	003d0900 	.word	0x003d0900
 800e94c:	080140a8 	.word	0x080140a8

0800e950 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800e950:	b480      	push	{r7}
 800e952:	b083      	sub	sp, #12
 800e954:	af00      	add	r7, sp, #0
 800e956:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800e958:	687b      	ldr	r3, [r7, #4]
 800e95a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e95c:	f003 0308 	and.w	r3, r3, #8
 800e960:	2b00      	cmp	r3, #0
 800e962:	d00a      	beq.n	800e97a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800e964:	687b      	ldr	r3, [r7, #4]
 800e966:	681b      	ldr	r3, [r3, #0]
 800e968:	685b      	ldr	r3, [r3, #4]
 800e96a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800e96e:	687b      	ldr	r3, [r7, #4]
 800e970:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800e972:	687b      	ldr	r3, [r7, #4]
 800e974:	681b      	ldr	r3, [r3, #0]
 800e976:	430a      	orrs	r2, r1
 800e978:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800e97a:	687b      	ldr	r3, [r7, #4]
 800e97c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e97e:	f003 0301 	and.w	r3, r3, #1
 800e982:	2b00      	cmp	r3, #0
 800e984:	d00a      	beq.n	800e99c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800e986:	687b      	ldr	r3, [r7, #4]
 800e988:	681b      	ldr	r3, [r3, #0]
 800e98a:	685b      	ldr	r3, [r3, #4]
 800e98c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800e990:	687b      	ldr	r3, [r7, #4]
 800e992:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e994:	687b      	ldr	r3, [r7, #4]
 800e996:	681b      	ldr	r3, [r3, #0]
 800e998:	430a      	orrs	r2, r1
 800e99a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800e99c:	687b      	ldr	r3, [r7, #4]
 800e99e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e9a0:	f003 0302 	and.w	r3, r3, #2
 800e9a4:	2b00      	cmp	r3, #0
 800e9a6:	d00a      	beq.n	800e9be <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800e9a8:	687b      	ldr	r3, [r7, #4]
 800e9aa:	681b      	ldr	r3, [r3, #0]
 800e9ac:	685b      	ldr	r3, [r3, #4]
 800e9ae:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800e9b2:	687b      	ldr	r3, [r7, #4]
 800e9b4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800e9b6:	687b      	ldr	r3, [r7, #4]
 800e9b8:	681b      	ldr	r3, [r3, #0]
 800e9ba:	430a      	orrs	r2, r1
 800e9bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800e9be:	687b      	ldr	r3, [r7, #4]
 800e9c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e9c2:	f003 0304 	and.w	r3, r3, #4
 800e9c6:	2b00      	cmp	r3, #0
 800e9c8:	d00a      	beq.n	800e9e0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800e9ca:	687b      	ldr	r3, [r7, #4]
 800e9cc:	681b      	ldr	r3, [r3, #0]
 800e9ce:	685b      	ldr	r3, [r3, #4]
 800e9d0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800e9d4:	687b      	ldr	r3, [r7, #4]
 800e9d6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800e9d8:	687b      	ldr	r3, [r7, #4]
 800e9da:	681b      	ldr	r3, [r3, #0]
 800e9dc:	430a      	orrs	r2, r1
 800e9de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800e9e0:	687b      	ldr	r3, [r7, #4]
 800e9e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e9e4:	f003 0310 	and.w	r3, r3, #16
 800e9e8:	2b00      	cmp	r3, #0
 800e9ea:	d00a      	beq.n	800ea02 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800e9ec:	687b      	ldr	r3, [r7, #4]
 800e9ee:	681b      	ldr	r3, [r3, #0]
 800e9f0:	689b      	ldr	r3, [r3, #8]
 800e9f2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800e9f6:	687b      	ldr	r3, [r7, #4]
 800e9f8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800e9fa:	687b      	ldr	r3, [r7, #4]
 800e9fc:	681b      	ldr	r3, [r3, #0]
 800e9fe:	430a      	orrs	r2, r1
 800ea00:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800ea02:	687b      	ldr	r3, [r7, #4]
 800ea04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ea06:	f003 0320 	and.w	r3, r3, #32
 800ea0a:	2b00      	cmp	r3, #0
 800ea0c:	d00a      	beq.n	800ea24 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800ea0e:	687b      	ldr	r3, [r7, #4]
 800ea10:	681b      	ldr	r3, [r3, #0]
 800ea12:	689b      	ldr	r3, [r3, #8]
 800ea14:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800ea18:	687b      	ldr	r3, [r7, #4]
 800ea1a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800ea1c:	687b      	ldr	r3, [r7, #4]
 800ea1e:	681b      	ldr	r3, [r3, #0]
 800ea20:	430a      	orrs	r2, r1
 800ea22:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800ea24:	687b      	ldr	r3, [r7, #4]
 800ea26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ea28:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ea2c:	2b00      	cmp	r3, #0
 800ea2e:	d01a      	beq.n	800ea66 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800ea30:	687b      	ldr	r3, [r7, #4]
 800ea32:	681b      	ldr	r3, [r3, #0]
 800ea34:	685b      	ldr	r3, [r3, #4]
 800ea36:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800ea3a:	687b      	ldr	r3, [r7, #4]
 800ea3c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ea3e:	687b      	ldr	r3, [r7, #4]
 800ea40:	681b      	ldr	r3, [r3, #0]
 800ea42:	430a      	orrs	r2, r1
 800ea44:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800ea46:	687b      	ldr	r3, [r7, #4]
 800ea48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ea4a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ea4e:	d10a      	bne.n	800ea66 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800ea50:	687b      	ldr	r3, [r7, #4]
 800ea52:	681b      	ldr	r3, [r3, #0]
 800ea54:	685b      	ldr	r3, [r3, #4]
 800ea56:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800ea5a:	687b      	ldr	r3, [r7, #4]
 800ea5c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800ea5e:	687b      	ldr	r3, [r7, #4]
 800ea60:	681b      	ldr	r3, [r3, #0]
 800ea62:	430a      	orrs	r2, r1
 800ea64:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800ea66:	687b      	ldr	r3, [r7, #4]
 800ea68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ea6a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ea6e:	2b00      	cmp	r3, #0
 800ea70:	d00a      	beq.n	800ea88 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800ea72:	687b      	ldr	r3, [r7, #4]
 800ea74:	681b      	ldr	r3, [r3, #0]
 800ea76:	685b      	ldr	r3, [r3, #4]
 800ea78:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800ea7c:	687b      	ldr	r3, [r7, #4]
 800ea7e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800ea80:	687b      	ldr	r3, [r7, #4]
 800ea82:	681b      	ldr	r3, [r3, #0]
 800ea84:	430a      	orrs	r2, r1
 800ea86:	605a      	str	r2, [r3, #4]
  }
}
 800ea88:	bf00      	nop
 800ea8a:	370c      	adds	r7, #12
 800ea8c:	46bd      	mov	sp, r7
 800ea8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea92:	4770      	bx	lr

0800ea94 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800ea94:	b580      	push	{r7, lr}
 800ea96:	b098      	sub	sp, #96	@ 0x60
 800ea98:	af02      	add	r7, sp, #8
 800ea9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ea9c:	687b      	ldr	r3, [r7, #4]
 800ea9e:	2200      	movs	r2, #0
 800eaa0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800eaa4:	f7f7 fdea 	bl	800667c <HAL_GetTick>
 800eaa8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800eaaa:	687b      	ldr	r3, [r7, #4]
 800eaac:	681b      	ldr	r3, [r3, #0]
 800eaae:	681b      	ldr	r3, [r3, #0]
 800eab0:	f003 0308 	and.w	r3, r3, #8
 800eab4:	2b08      	cmp	r3, #8
 800eab6:	d12f      	bne.n	800eb18 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800eab8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800eabc:	9300      	str	r3, [sp, #0]
 800eabe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800eac0:	2200      	movs	r2, #0
 800eac2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800eac6:	6878      	ldr	r0, [r7, #4]
 800eac8:	f000 f88e 	bl	800ebe8 <UART_WaitOnFlagUntilTimeout>
 800eacc:	4603      	mov	r3, r0
 800eace:	2b00      	cmp	r3, #0
 800ead0:	d022      	beq.n	800eb18 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800ead2:	687b      	ldr	r3, [r7, #4]
 800ead4:	681b      	ldr	r3, [r3, #0]
 800ead6:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ead8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eada:	e853 3f00 	ldrex	r3, [r3]
 800eade:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800eae0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800eae2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800eae6:	653b      	str	r3, [r7, #80]	@ 0x50
 800eae8:	687b      	ldr	r3, [r7, #4]
 800eaea:	681b      	ldr	r3, [r3, #0]
 800eaec:	461a      	mov	r2, r3
 800eaee:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800eaf0:	647b      	str	r3, [r7, #68]	@ 0x44
 800eaf2:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eaf4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800eaf6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800eaf8:	e841 2300 	strex	r3, r2, [r1]
 800eafc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800eafe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800eb00:	2b00      	cmp	r3, #0
 800eb02:	d1e6      	bne.n	800ead2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800eb04:	687b      	ldr	r3, [r7, #4]
 800eb06:	2220      	movs	r2, #32
 800eb08:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800eb0c:	687b      	ldr	r3, [r7, #4]
 800eb0e:	2200      	movs	r2, #0
 800eb10:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800eb14:	2303      	movs	r3, #3
 800eb16:	e063      	b.n	800ebe0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800eb18:	687b      	ldr	r3, [r7, #4]
 800eb1a:	681b      	ldr	r3, [r3, #0]
 800eb1c:	681b      	ldr	r3, [r3, #0]
 800eb1e:	f003 0304 	and.w	r3, r3, #4
 800eb22:	2b04      	cmp	r3, #4
 800eb24:	d149      	bne.n	800ebba <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800eb26:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800eb2a:	9300      	str	r3, [sp, #0]
 800eb2c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800eb2e:	2200      	movs	r2, #0
 800eb30:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800eb34:	6878      	ldr	r0, [r7, #4]
 800eb36:	f000 f857 	bl	800ebe8 <UART_WaitOnFlagUntilTimeout>
 800eb3a:	4603      	mov	r3, r0
 800eb3c:	2b00      	cmp	r3, #0
 800eb3e:	d03c      	beq.n	800ebba <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800eb40:	687b      	ldr	r3, [r7, #4]
 800eb42:	681b      	ldr	r3, [r3, #0]
 800eb44:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eb46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eb48:	e853 3f00 	ldrex	r3, [r3]
 800eb4c:	623b      	str	r3, [r7, #32]
   return(result);
 800eb4e:	6a3b      	ldr	r3, [r7, #32]
 800eb50:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800eb54:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800eb56:	687b      	ldr	r3, [r7, #4]
 800eb58:	681b      	ldr	r3, [r3, #0]
 800eb5a:	461a      	mov	r2, r3
 800eb5c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800eb5e:	633b      	str	r3, [r7, #48]	@ 0x30
 800eb60:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eb62:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800eb64:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800eb66:	e841 2300 	strex	r3, r2, [r1]
 800eb6a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800eb6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eb6e:	2b00      	cmp	r3, #0
 800eb70:	d1e6      	bne.n	800eb40 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800eb72:	687b      	ldr	r3, [r7, #4]
 800eb74:	681b      	ldr	r3, [r3, #0]
 800eb76:	3308      	adds	r3, #8
 800eb78:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eb7a:	693b      	ldr	r3, [r7, #16]
 800eb7c:	e853 3f00 	ldrex	r3, [r3]
 800eb80:	60fb      	str	r3, [r7, #12]
   return(result);
 800eb82:	68fb      	ldr	r3, [r7, #12]
 800eb84:	f023 0301 	bic.w	r3, r3, #1
 800eb88:	64bb      	str	r3, [r7, #72]	@ 0x48
 800eb8a:	687b      	ldr	r3, [r7, #4]
 800eb8c:	681b      	ldr	r3, [r3, #0]
 800eb8e:	3308      	adds	r3, #8
 800eb90:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800eb92:	61fa      	str	r2, [r7, #28]
 800eb94:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eb96:	69b9      	ldr	r1, [r7, #24]
 800eb98:	69fa      	ldr	r2, [r7, #28]
 800eb9a:	e841 2300 	strex	r3, r2, [r1]
 800eb9e:	617b      	str	r3, [r7, #20]
   return(result);
 800eba0:	697b      	ldr	r3, [r7, #20]
 800eba2:	2b00      	cmp	r3, #0
 800eba4:	d1e5      	bne.n	800eb72 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800eba6:	687b      	ldr	r3, [r7, #4]
 800eba8:	2220      	movs	r2, #32
 800ebaa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800ebae:	687b      	ldr	r3, [r7, #4]
 800ebb0:	2200      	movs	r2, #0
 800ebb2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ebb6:	2303      	movs	r3, #3
 800ebb8:	e012      	b.n	800ebe0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800ebba:	687b      	ldr	r3, [r7, #4]
 800ebbc:	2220      	movs	r2, #32
 800ebbe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800ebc2:	687b      	ldr	r3, [r7, #4]
 800ebc4:	2220      	movs	r2, #32
 800ebc6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ebca:	687b      	ldr	r3, [r7, #4]
 800ebcc:	2200      	movs	r2, #0
 800ebce:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ebd0:	687b      	ldr	r3, [r7, #4]
 800ebd2:	2200      	movs	r2, #0
 800ebd4:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800ebd6:	687b      	ldr	r3, [r7, #4]
 800ebd8:	2200      	movs	r2, #0
 800ebda:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ebde:	2300      	movs	r3, #0
}
 800ebe0:	4618      	mov	r0, r3
 800ebe2:	3758      	adds	r7, #88	@ 0x58
 800ebe4:	46bd      	mov	sp, r7
 800ebe6:	bd80      	pop	{r7, pc}

0800ebe8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800ebe8:	b580      	push	{r7, lr}
 800ebea:	b084      	sub	sp, #16
 800ebec:	af00      	add	r7, sp, #0
 800ebee:	60f8      	str	r0, [r7, #12]
 800ebf0:	60b9      	str	r1, [r7, #8]
 800ebf2:	603b      	str	r3, [r7, #0]
 800ebf4:	4613      	mov	r3, r2
 800ebf6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ebf8:	e04f      	b.n	800ec9a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ebfa:	69bb      	ldr	r3, [r7, #24]
 800ebfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ec00:	d04b      	beq.n	800ec9a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ec02:	f7f7 fd3b 	bl	800667c <HAL_GetTick>
 800ec06:	4602      	mov	r2, r0
 800ec08:	683b      	ldr	r3, [r7, #0]
 800ec0a:	1ad3      	subs	r3, r2, r3
 800ec0c:	69ba      	ldr	r2, [r7, #24]
 800ec0e:	429a      	cmp	r2, r3
 800ec10:	d302      	bcc.n	800ec18 <UART_WaitOnFlagUntilTimeout+0x30>
 800ec12:	69bb      	ldr	r3, [r7, #24]
 800ec14:	2b00      	cmp	r3, #0
 800ec16:	d101      	bne.n	800ec1c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800ec18:	2303      	movs	r3, #3
 800ec1a:	e04e      	b.n	800ecba <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800ec1c:	68fb      	ldr	r3, [r7, #12]
 800ec1e:	681b      	ldr	r3, [r3, #0]
 800ec20:	681b      	ldr	r3, [r3, #0]
 800ec22:	f003 0304 	and.w	r3, r3, #4
 800ec26:	2b00      	cmp	r3, #0
 800ec28:	d037      	beq.n	800ec9a <UART_WaitOnFlagUntilTimeout+0xb2>
 800ec2a:	68bb      	ldr	r3, [r7, #8]
 800ec2c:	2b80      	cmp	r3, #128	@ 0x80
 800ec2e:	d034      	beq.n	800ec9a <UART_WaitOnFlagUntilTimeout+0xb2>
 800ec30:	68bb      	ldr	r3, [r7, #8]
 800ec32:	2b40      	cmp	r3, #64	@ 0x40
 800ec34:	d031      	beq.n	800ec9a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800ec36:	68fb      	ldr	r3, [r7, #12]
 800ec38:	681b      	ldr	r3, [r3, #0]
 800ec3a:	69db      	ldr	r3, [r3, #28]
 800ec3c:	f003 0308 	and.w	r3, r3, #8
 800ec40:	2b08      	cmp	r3, #8
 800ec42:	d110      	bne.n	800ec66 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800ec44:	68fb      	ldr	r3, [r7, #12]
 800ec46:	681b      	ldr	r3, [r3, #0]
 800ec48:	2208      	movs	r2, #8
 800ec4a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800ec4c:	68f8      	ldr	r0, [r7, #12]
 800ec4e:	f000 f839 	bl	800ecc4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800ec52:	68fb      	ldr	r3, [r7, #12]
 800ec54:	2208      	movs	r2, #8
 800ec56:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ec5a:	68fb      	ldr	r3, [r7, #12]
 800ec5c:	2200      	movs	r2, #0
 800ec5e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800ec62:	2301      	movs	r3, #1
 800ec64:	e029      	b.n	800ecba <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800ec66:	68fb      	ldr	r3, [r7, #12]
 800ec68:	681b      	ldr	r3, [r3, #0]
 800ec6a:	69db      	ldr	r3, [r3, #28]
 800ec6c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800ec70:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800ec74:	d111      	bne.n	800ec9a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ec76:	68fb      	ldr	r3, [r7, #12]
 800ec78:	681b      	ldr	r3, [r3, #0]
 800ec7a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800ec7e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800ec80:	68f8      	ldr	r0, [r7, #12]
 800ec82:	f000 f81f 	bl	800ecc4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800ec86:	68fb      	ldr	r3, [r7, #12]
 800ec88:	2220      	movs	r2, #32
 800ec8a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ec8e:	68fb      	ldr	r3, [r7, #12]
 800ec90:	2200      	movs	r2, #0
 800ec92:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800ec96:	2303      	movs	r3, #3
 800ec98:	e00f      	b.n	800ecba <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ec9a:	68fb      	ldr	r3, [r7, #12]
 800ec9c:	681b      	ldr	r3, [r3, #0]
 800ec9e:	69da      	ldr	r2, [r3, #28]
 800eca0:	68bb      	ldr	r3, [r7, #8]
 800eca2:	4013      	ands	r3, r2
 800eca4:	68ba      	ldr	r2, [r7, #8]
 800eca6:	429a      	cmp	r2, r3
 800eca8:	bf0c      	ite	eq
 800ecaa:	2301      	moveq	r3, #1
 800ecac:	2300      	movne	r3, #0
 800ecae:	b2db      	uxtb	r3, r3
 800ecb0:	461a      	mov	r2, r3
 800ecb2:	79fb      	ldrb	r3, [r7, #7]
 800ecb4:	429a      	cmp	r2, r3
 800ecb6:	d0a0      	beq.n	800ebfa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800ecb8:	2300      	movs	r3, #0
}
 800ecba:	4618      	mov	r0, r3
 800ecbc:	3710      	adds	r7, #16
 800ecbe:	46bd      	mov	sp, r7
 800ecc0:	bd80      	pop	{r7, pc}
	...

0800ecc4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ecc4:	b480      	push	{r7}
 800ecc6:	b095      	sub	sp, #84	@ 0x54
 800ecc8:	af00      	add	r7, sp, #0
 800ecca:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800eccc:	687b      	ldr	r3, [r7, #4]
 800ecce:	681b      	ldr	r3, [r3, #0]
 800ecd0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ecd2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ecd4:	e853 3f00 	ldrex	r3, [r3]
 800ecd8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800ecda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ecdc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ece0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ece2:	687b      	ldr	r3, [r7, #4]
 800ece4:	681b      	ldr	r3, [r3, #0]
 800ece6:	461a      	mov	r2, r3
 800ece8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ecea:	643b      	str	r3, [r7, #64]	@ 0x40
 800ecec:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ecee:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800ecf0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800ecf2:	e841 2300 	strex	r3, r2, [r1]
 800ecf6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800ecf8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ecfa:	2b00      	cmp	r3, #0
 800ecfc:	d1e6      	bne.n	800eccc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ecfe:	687b      	ldr	r3, [r7, #4]
 800ed00:	681b      	ldr	r3, [r3, #0]
 800ed02:	3308      	adds	r3, #8
 800ed04:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ed06:	6a3b      	ldr	r3, [r7, #32]
 800ed08:	e853 3f00 	ldrex	r3, [r3]
 800ed0c:	61fb      	str	r3, [r7, #28]
   return(result);
 800ed0e:	69fa      	ldr	r2, [r7, #28]
 800ed10:	4b1e      	ldr	r3, [pc, #120]	@ (800ed8c <UART_EndRxTransfer+0xc8>)
 800ed12:	4013      	ands	r3, r2
 800ed14:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ed16:	687b      	ldr	r3, [r7, #4]
 800ed18:	681b      	ldr	r3, [r3, #0]
 800ed1a:	3308      	adds	r3, #8
 800ed1c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ed1e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800ed20:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ed22:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ed24:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ed26:	e841 2300 	strex	r3, r2, [r1]
 800ed2a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800ed2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ed2e:	2b00      	cmp	r3, #0
 800ed30:	d1e5      	bne.n	800ecfe <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ed32:	687b      	ldr	r3, [r7, #4]
 800ed34:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ed36:	2b01      	cmp	r3, #1
 800ed38:	d118      	bne.n	800ed6c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ed3a:	687b      	ldr	r3, [r7, #4]
 800ed3c:	681b      	ldr	r3, [r3, #0]
 800ed3e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ed40:	68fb      	ldr	r3, [r7, #12]
 800ed42:	e853 3f00 	ldrex	r3, [r3]
 800ed46:	60bb      	str	r3, [r7, #8]
   return(result);
 800ed48:	68bb      	ldr	r3, [r7, #8]
 800ed4a:	f023 0310 	bic.w	r3, r3, #16
 800ed4e:	647b      	str	r3, [r7, #68]	@ 0x44
 800ed50:	687b      	ldr	r3, [r7, #4]
 800ed52:	681b      	ldr	r3, [r3, #0]
 800ed54:	461a      	mov	r2, r3
 800ed56:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ed58:	61bb      	str	r3, [r7, #24]
 800ed5a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ed5c:	6979      	ldr	r1, [r7, #20]
 800ed5e:	69ba      	ldr	r2, [r7, #24]
 800ed60:	e841 2300 	strex	r3, r2, [r1]
 800ed64:	613b      	str	r3, [r7, #16]
   return(result);
 800ed66:	693b      	ldr	r3, [r7, #16]
 800ed68:	2b00      	cmp	r3, #0
 800ed6a:	d1e6      	bne.n	800ed3a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ed6c:	687b      	ldr	r3, [r7, #4]
 800ed6e:	2220      	movs	r2, #32
 800ed70:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ed74:	687b      	ldr	r3, [r7, #4]
 800ed76:	2200      	movs	r2, #0
 800ed78:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800ed7a:	687b      	ldr	r3, [r7, #4]
 800ed7c:	2200      	movs	r2, #0
 800ed7e:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800ed80:	bf00      	nop
 800ed82:	3754      	adds	r7, #84	@ 0x54
 800ed84:	46bd      	mov	sp, r7
 800ed86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed8a:	4770      	bx	lr
 800ed8c:	effffffe 	.word	0xeffffffe

0800ed90 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800ed90:	b480      	push	{r7}
 800ed92:	b085      	sub	sp, #20
 800ed94:	af00      	add	r7, sp, #0
 800ed96:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ed98:	687b      	ldr	r3, [r7, #4]
 800ed9a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800ed9e:	2b01      	cmp	r3, #1
 800eda0:	d101      	bne.n	800eda6 <HAL_UARTEx_DisableFifoMode+0x16>
 800eda2:	2302      	movs	r3, #2
 800eda4:	e027      	b.n	800edf6 <HAL_UARTEx_DisableFifoMode+0x66>
 800eda6:	687b      	ldr	r3, [r7, #4]
 800eda8:	2201      	movs	r2, #1
 800edaa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800edae:	687b      	ldr	r3, [r7, #4]
 800edb0:	2224      	movs	r2, #36	@ 0x24
 800edb2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800edb6:	687b      	ldr	r3, [r7, #4]
 800edb8:	681b      	ldr	r3, [r3, #0]
 800edba:	681b      	ldr	r3, [r3, #0]
 800edbc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800edbe:	687b      	ldr	r3, [r7, #4]
 800edc0:	681b      	ldr	r3, [r3, #0]
 800edc2:	681a      	ldr	r2, [r3, #0]
 800edc4:	687b      	ldr	r3, [r7, #4]
 800edc6:	681b      	ldr	r3, [r3, #0]
 800edc8:	f022 0201 	bic.w	r2, r2, #1
 800edcc:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800edce:	68fb      	ldr	r3, [r7, #12]
 800edd0:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800edd4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800edd6:	687b      	ldr	r3, [r7, #4]
 800edd8:	2200      	movs	r2, #0
 800edda:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800eddc:	687b      	ldr	r3, [r7, #4]
 800edde:	681b      	ldr	r3, [r3, #0]
 800ede0:	68fa      	ldr	r2, [r7, #12]
 800ede2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ede4:	687b      	ldr	r3, [r7, #4]
 800ede6:	2220      	movs	r2, #32
 800ede8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800edec:	687b      	ldr	r3, [r7, #4]
 800edee:	2200      	movs	r2, #0
 800edf0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800edf4:	2300      	movs	r3, #0
}
 800edf6:	4618      	mov	r0, r3
 800edf8:	3714      	adds	r7, #20
 800edfa:	46bd      	mov	sp, r7
 800edfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee00:	4770      	bx	lr

0800ee02 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ee02:	b580      	push	{r7, lr}
 800ee04:	b084      	sub	sp, #16
 800ee06:	af00      	add	r7, sp, #0
 800ee08:	6078      	str	r0, [r7, #4]
 800ee0a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ee0c:	687b      	ldr	r3, [r7, #4]
 800ee0e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800ee12:	2b01      	cmp	r3, #1
 800ee14:	d101      	bne.n	800ee1a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800ee16:	2302      	movs	r3, #2
 800ee18:	e02d      	b.n	800ee76 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800ee1a:	687b      	ldr	r3, [r7, #4]
 800ee1c:	2201      	movs	r2, #1
 800ee1e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ee22:	687b      	ldr	r3, [r7, #4]
 800ee24:	2224      	movs	r2, #36	@ 0x24
 800ee26:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ee2a:	687b      	ldr	r3, [r7, #4]
 800ee2c:	681b      	ldr	r3, [r3, #0]
 800ee2e:	681b      	ldr	r3, [r3, #0]
 800ee30:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ee32:	687b      	ldr	r3, [r7, #4]
 800ee34:	681b      	ldr	r3, [r3, #0]
 800ee36:	681a      	ldr	r2, [r3, #0]
 800ee38:	687b      	ldr	r3, [r7, #4]
 800ee3a:	681b      	ldr	r3, [r3, #0]
 800ee3c:	f022 0201 	bic.w	r2, r2, #1
 800ee40:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800ee42:	687b      	ldr	r3, [r7, #4]
 800ee44:	681b      	ldr	r3, [r3, #0]
 800ee46:	689b      	ldr	r3, [r3, #8]
 800ee48:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800ee4c:	687b      	ldr	r3, [r7, #4]
 800ee4e:	681b      	ldr	r3, [r3, #0]
 800ee50:	683a      	ldr	r2, [r7, #0]
 800ee52:	430a      	orrs	r2, r1
 800ee54:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ee56:	6878      	ldr	r0, [r7, #4]
 800ee58:	f000 f850 	bl	800eefc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ee5c:	687b      	ldr	r3, [r7, #4]
 800ee5e:	681b      	ldr	r3, [r3, #0]
 800ee60:	68fa      	ldr	r2, [r7, #12]
 800ee62:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ee64:	687b      	ldr	r3, [r7, #4]
 800ee66:	2220      	movs	r2, #32
 800ee68:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ee6c:	687b      	ldr	r3, [r7, #4]
 800ee6e:	2200      	movs	r2, #0
 800ee70:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ee74:	2300      	movs	r3, #0
}
 800ee76:	4618      	mov	r0, r3
 800ee78:	3710      	adds	r7, #16
 800ee7a:	46bd      	mov	sp, r7
 800ee7c:	bd80      	pop	{r7, pc}

0800ee7e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ee7e:	b580      	push	{r7, lr}
 800ee80:	b084      	sub	sp, #16
 800ee82:	af00      	add	r7, sp, #0
 800ee84:	6078      	str	r0, [r7, #4]
 800ee86:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ee88:	687b      	ldr	r3, [r7, #4]
 800ee8a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800ee8e:	2b01      	cmp	r3, #1
 800ee90:	d101      	bne.n	800ee96 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800ee92:	2302      	movs	r3, #2
 800ee94:	e02d      	b.n	800eef2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800ee96:	687b      	ldr	r3, [r7, #4]
 800ee98:	2201      	movs	r2, #1
 800ee9a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ee9e:	687b      	ldr	r3, [r7, #4]
 800eea0:	2224      	movs	r2, #36	@ 0x24
 800eea2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800eea6:	687b      	ldr	r3, [r7, #4]
 800eea8:	681b      	ldr	r3, [r3, #0]
 800eeaa:	681b      	ldr	r3, [r3, #0]
 800eeac:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800eeae:	687b      	ldr	r3, [r7, #4]
 800eeb0:	681b      	ldr	r3, [r3, #0]
 800eeb2:	681a      	ldr	r2, [r3, #0]
 800eeb4:	687b      	ldr	r3, [r7, #4]
 800eeb6:	681b      	ldr	r3, [r3, #0]
 800eeb8:	f022 0201 	bic.w	r2, r2, #1
 800eebc:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800eebe:	687b      	ldr	r3, [r7, #4]
 800eec0:	681b      	ldr	r3, [r3, #0]
 800eec2:	689b      	ldr	r3, [r3, #8]
 800eec4:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800eec8:	687b      	ldr	r3, [r7, #4]
 800eeca:	681b      	ldr	r3, [r3, #0]
 800eecc:	683a      	ldr	r2, [r7, #0]
 800eece:	430a      	orrs	r2, r1
 800eed0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800eed2:	6878      	ldr	r0, [r7, #4]
 800eed4:	f000 f812 	bl	800eefc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800eed8:	687b      	ldr	r3, [r7, #4]
 800eeda:	681b      	ldr	r3, [r3, #0]
 800eedc:	68fa      	ldr	r2, [r7, #12]
 800eede:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800eee0:	687b      	ldr	r3, [r7, #4]
 800eee2:	2220      	movs	r2, #32
 800eee4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800eee8:	687b      	ldr	r3, [r7, #4]
 800eeea:	2200      	movs	r2, #0
 800eeec:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800eef0:	2300      	movs	r3, #0
}
 800eef2:	4618      	mov	r0, r3
 800eef4:	3710      	adds	r7, #16
 800eef6:	46bd      	mov	sp, r7
 800eef8:	bd80      	pop	{r7, pc}
	...

0800eefc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800eefc:	b480      	push	{r7}
 800eefe:	b085      	sub	sp, #20
 800ef00:	af00      	add	r7, sp, #0
 800ef02:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800ef04:	687b      	ldr	r3, [r7, #4]
 800ef06:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ef08:	2b00      	cmp	r3, #0
 800ef0a:	d108      	bne.n	800ef1e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800ef0c:	687b      	ldr	r3, [r7, #4]
 800ef0e:	2201      	movs	r2, #1
 800ef10:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800ef14:	687b      	ldr	r3, [r7, #4]
 800ef16:	2201      	movs	r2, #1
 800ef18:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800ef1c:	e031      	b.n	800ef82 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800ef1e:	2310      	movs	r3, #16
 800ef20:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800ef22:	2310      	movs	r3, #16
 800ef24:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800ef26:	687b      	ldr	r3, [r7, #4]
 800ef28:	681b      	ldr	r3, [r3, #0]
 800ef2a:	689b      	ldr	r3, [r3, #8]
 800ef2c:	0e5b      	lsrs	r3, r3, #25
 800ef2e:	b2db      	uxtb	r3, r3
 800ef30:	f003 0307 	and.w	r3, r3, #7
 800ef34:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800ef36:	687b      	ldr	r3, [r7, #4]
 800ef38:	681b      	ldr	r3, [r3, #0]
 800ef3a:	689b      	ldr	r3, [r3, #8]
 800ef3c:	0f5b      	lsrs	r3, r3, #29
 800ef3e:	b2db      	uxtb	r3, r3
 800ef40:	f003 0307 	and.w	r3, r3, #7
 800ef44:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ef46:	7bbb      	ldrb	r3, [r7, #14]
 800ef48:	7b3a      	ldrb	r2, [r7, #12]
 800ef4a:	4911      	ldr	r1, [pc, #68]	@ (800ef90 <UARTEx_SetNbDataToProcess+0x94>)
 800ef4c:	5c8a      	ldrb	r2, [r1, r2]
 800ef4e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800ef52:	7b3a      	ldrb	r2, [r7, #12]
 800ef54:	490f      	ldr	r1, [pc, #60]	@ (800ef94 <UARTEx_SetNbDataToProcess+0x98>)
 800ef56:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ef58:	fb93 f3f2 	sdiv	r3, r3, r2
 800ef5c:	b29a      	uxth	r2, r3
 800ef5e:	687b      	ldr	r3, [r7, #4]
 800ef60:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ef64:	7bfb      	ldrb	r3, [r7, #15]
 800ef66:	7b7a      	ldrb	r2, [r7, #13]
 800ef68:	4909      	ldr	r1, [pc, #36]	@ (800ef90 <UARTEx_SetNbDataToProcess+0x94>)
 800ef6a:	5c8a      	ldrb	r2, [r1, r2]
 800ef6c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800ef70:	7b7a      	ldrb	r2, [r7, #13]
 800ef72:	4908      	ldr	r1, [pc, #32]	@ (800ef94 <UARTEx_SetNbDataToProcess+0x98>)
 800ef74:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ef76:	fb93 f3f2 	sdiv	r3, r3, r2
 800ef7a:	b29a      	uxth	r2, r3
 800ef7c:	687b      	ldr	r3, [r7, #4]
 800ef7e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800ef82:	bf00      	nop
 800ef84:	3714      	adds	r7, #20
 800ef86:	46bd      	mov	sp, r7
 800ef88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef8c:	4770      	bx	lr
 800ef8e:	bf00      	nop
 800ef90:	080140c0 	.word	0x080140c0
 800ef94:	080140c8 	.word	0x080140c8

0800ef98 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800ef98:	b084      	sub	sp, #16
 800ef9a:	b480      	push	{r7}
 800ef9c:	b085      	sub	sp, #20
 800ef9e:	af00      	add	r7, sp, #0
 800efa0:	6078      	str	r0, [r7, #4]
 800efa2:	f107 001c 	add.w	r0, r7, #28
 800efa6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800efaa:	2300      	movs	r3, #0
 800efac:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 800efae:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 800efb0:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 800efb2:	431a      	orrs	r2, r3
             Init.BusWide             | \
 800efb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockPowerSave      | \
 800efb6:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 800efb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.BusWide             | \
 800efba:	431a      	orrs	r2, r3
             Init.ClockDiv
 800efbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.HardwareFlowControl | \
 800efbe:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 800efc0:	68fa      	ldr	r2, [r7, #12]
 800efc2:	4313      	orrs	r3, r2
 800efc4:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800efc6:	687b      	ldr	r3, [r7, #4]
 800efc8:	685a      	ldr	r2, [r3, #4]
 800efca:	4b07      	ldr	r3, [pc, #28]	@ (800efe8 <SDMMC_Init+0x50>)
 800efcc:	4013      	ands	r3, r2
 800efce:	68fa      	ldr	r2, [r7, #12]
 800efd0:	431a      	orrs	r2, r3
 800efd2:	687b      	ldr	r3, [r7, #4]
 800efd4:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800efd6:	2300      	movs	r3, #0
}
 800efd8:	4618      	mov	r0, r3
 800efda:	3714      	adds	r7, #20
 800efdc:	46bd      	mov	sp, r7
 800efde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efe2:	b004      	add	sp, #16
 800efe4:	4770      	bx	lr
 800efe6:	bf00      	nop
 800efe8:	ffc02c00 	.word	0xffc02c00

0800efec <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800efec:	b480      	push	{r7}
 800efee:	b083      	sub	sp, #12
 800eff0:	af00      	add	r7, sp, #0
 800eff2:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 800eff4:	687b      	ldr	r3, [r7, #4]
 800eff6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 800effa:	4618      	mov	r0, r3
 800effc:	370c      	adds	r7, #12
 800effe:	46bd      	mov	sp, r7
 800f000:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f004:	4770      	bx	lr

0800f006 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 800f006:	b480      	push	{r7}
 800f008:	b083      	sub	sp, #12
 800f00a:	af00      	add	r7, sp, #0
 800f00c:	6078      	str	r0, [r7, #4]
 800f00e:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 800f010:	683b      	ldr	r3, [r7, #0]
 800f012:	681a      	ldr	r2, [r3, #0]
 800f014:	687b      	ldr	r3, [r7, #4]
 800f016:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 800f01a:	2300      	movs	r3, #0
}
 800f01c:	4618      	mov	r0, r3
 800f01e:	370c      	adds	r7, #12
 800f020:	46bd      	mov	sp, r7
 800f022:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f026:	4770      	bx	lr

0800f028 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 800f028:	b480      	push	{r7}
 800f02a:	b083      	sub	sp, #12
 800f02c:	af00      	add	r7, sp, #0
 800f02e:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 800f030:	687b      	ldr	r3, [r7, #4]
 800f032:	681b      	ldr	r3, [r3, #0]
 800f034:	f043 0203 	orr.w	r2, r3, #3
 800f038:	687b      	ldr	r3, [r7, #4]
 800f03a:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800f03c:	2300      	movs	r3, #0
}
 800f03e:	4618      	mov	r0, r3
 800f040:	370c      	adds	r7, #12
 800f042:	46bd      	mov	sp, r7
 800f044:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f048:	4770      	bx	lr

0800f04a <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 800f04a:	b480      	push	{r7}
 800f04c:	b083      	sub	sp, #12
 800f04e:	af00      	add	r7, sp, #0
 800f050:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800f052:	687b      	ldr	r3, [r7, #4]
 800f054:	681b      	ldr	r3, [r3, #0]
 800f056:	f003 0303 	and.w	r3, r3, #3
}
 800f05a:	4618      	mov	r0, r3
 800f05c:	370c      	adds	r7, #12
 800f05e:	46bd      	mov	sp, r7
 800f060:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f064:	4770      	bx	lr
	...

0800f068 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800f068:	b480      	push	{r7}
 800f06a:	b085      	sub	sp, #20
 800f06c:	af00      	add	r7, sp, #0
 800f06e:	6078      	str	r0, [r7, #4]
 800f070:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800f072:	2300      	movs	r3, #0
 800f074:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800f076:	683b      	ldr	r3, [r7, #0]
 800f078:	681a      	ldr	r2, [r3, #0]
 800f07a:	687b      	ldr	r3, [r7, #4]
 800f07c:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800f07e:	683b      	ldr	r3, [r7, #0]
 800f080:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 800f082:	683b      	ldr	r3, [r7, #0]
 800f084:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800f086:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 800f088:	683b      	ldr	r3, [r7, #0]
 800f08a:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 800f08c:	431a      	orrs	r2, r3
                       Command->CPSM);
 800f08e:	683b      	ldr	r3, [r7, #0]
 800f090:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 800f092:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800f094:	68fa      	ldr	r2, [r7, #12]
 800f096:	4313      	orrs	r3, r2
 800f098:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800f09a:	687b      	ldr	r3, [r7, #4]
 800f09c:	68da      	ldr	r2, [r3, #12]
 800f09e:	4b06      	ldr	r3, [pc, #24]	@ (800f0b8 <SDMMC_SendCommand+0x50>)
 800f0a0:	4013      	ands	r3, r2
 800f0a2:	68fa      	ldr	r2, [r7, #12]
 800f0a4:	431a      	orrs	r2, r3
 800f0a6:	687b      	ldr	r3, [r7, #4]
 800f0a8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800f0aa:	2300      	movs	r3, #0
}
 800f0ac:	4618      	mov	r0, r3
 800f0ae:	3714      	adds	r7, #20
 800f0b0:	46bd      	mov	sp, r7
 800f0b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0b6:	4770      	bx	lr
 800f0b8:	fffee0c0 	.word	0xfffee0c0

0800f0bc <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800f0bc:	b480      	push	{r7}
 800f0be:	b083      	sub	sp, #12
 800f0c0:	af00      	add	r7, sp, #0
 800f0c2:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800f0c4:	687b      	ldr	r3, [r7, #4]
 800f0c6:	691b      	ldr	r3, [r3, #16]
 800f0c8:	b2db      	uxtb	r3, r3
}
 800f0ca:	4618      	mov	r0, r3
 800f0cc:	370c      	adds	r7, #12
 800f0ce:	46bd      	mov	sp, r7
 800f0d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0d4:	4770      	bx	lr

0800f0d6 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800f0d6:	b480      	push	{r7}
 800f0d8:	b085      	sub	sp, #20
 800f0da:	af00      	add	r7, sp, #0
 800f0dc:	6078      	str	r0, [r7, #4]
 800f0de:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800f0e0:	687b      	ldr	r3, [r7, #4]
 800f0e2:	3314      	adds	r3, #20
 800f0e4:	461a      	mov	r2, r3
 800f0e6:	683b      	ldr	r3, [r7, #0]
 800f0e8:	4413      	add	r3, r2
 800f0ea:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 800f0ec:	68fb      	ldr	r3, [r7, #12]
 800f0ee:	681b      	ldr	r3, [r3, #0]
}
 800f0f0:	4618      	mov	r0, r3
 800f0f2:	3714      	adds	r7, #20
 800f0f4:	46bd      	mov	sp, r7
 800f0f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0fa:	4770      	bx	lr

0800f0fc <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 800f0fc:	b480      	push	{r7}
 800f0fe:	b085      	sub	sp, #20
 800f100:	af00      	add	r7, sp, #0
 800f102:	6078      	str	r0, [r7, #4]
 800f104:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800f106:	2300      	movs	r3, #0
 800f108:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800f10a:	683b      	ldr	r3, [r7, #0]
 800f10c:	681a      	ldr	r2, [r3, #0]
 800f10e:	687b      	ldr	r3, [r7, #4]
 800f110:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800f112:	683b      	ldr	r3, [r7, #0]
 800f114:	685a      	ldr	r2, [r3, #4]
 800f116:	687b      	ldr	r3, [r7, #4]
 800f118:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800f11a:	683b      	ldr	r3, [r7, #0]
 800f11c:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 800f11e:	683b      	ldr	r3, [r7, #0]
 800f120:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800f122:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 800f124:	683b      	ldr	r3, [r7, #0]
 800f126:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 800f128:	431a      	orrs	r2, r3
                       Data->DPSM);
 800f12a:	683b      	ldr	r3, [r7, #0]
 800f12c:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 800f12e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800f130:	68fa      	ldr	r2, [r7, #12]
 800f132:	4313      	orrs	r3, r2
 800f134:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800f136:	687b      	ldr	r3, [r7, #4]
 800f138:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f13a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800f13e:	68fb      	ldr	r3, [r7, #12]
 800f140:	431a      	orrs	r2, r3
 800f142:	687b      	ldr	r3, [r7, #4]
 800f144:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800f146:	2300      	movs	r3, #0

}
 800f148:	4618      	mov	r0, r3
 800f14a:	3714      	adds	r7, #20
 800f14c:	46bd      	mov	sp, r7
 800f14e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f152:	4770      	bx	lr

0800f154 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800f154:	b580      	push	{r7, lr}
 800f156:	b088      	sub	sp, #32
 800f158:	af00      	add	r7, sp, #0
 800f15a:	6078      	str	r0, [r7, #4]
 800f15c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800f15e:	683b      	ldr	r3, [r7, #0]
 800f160:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800f162:	2310      	movs	r3, #16
 800f164:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800f166:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800f16a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f16c:	2300      	movs	r3, #0
 800f16e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f170:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800f174:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f176:	f107 0308 	add.w	r3, r7, #8
 800f17a:	4619      	mov	r1, r3
 800f17c:	6878      	ldr	r0, [r7, #4]
 800f17e:	f7ff ff73 	bl	800f068 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800f182:	f241 3288 	movw	r2, #5000	@ 0x1388
 800f186:	2110      	movs	r1, #16
 800f188:	6878      	ldr	r0, [r7, #4]
 800f18a:	f000 fa5f 	bl	800f64c <SDMMC_GetCmdResp1>
 800f18e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f190:	69fb      	ldr	r3, [r7, #28]
}
 800f192:	4618      	mov	r0, r3
 800f194:	3720      	adds	r7, #32
 800f196:	46bd      	mov	sp, r7
 800f198:	bd80      	pop	{r7, pc}

0800f19a <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800f19a:	b580      	push	{r7, lr}
 800f19c:	b088      	sub	sp, #32
 800f19e:	af00      	add	r7, sp, #0
 800f1a0:	6078      	str	r0, [r7, #4]
 800f1a2:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800f1a4:	683b      	ldr	r3, [r7, #0]
 800f1a6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800f1a8:	2311      	movs	r3, #17
 800f1aa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800f1ac:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800f1b0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f1b2:	2300      	movs	r3, #0
 800f1b4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f1b6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800f1ba:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f1bc:	f107 0308 	add.w	r3, r7, #8
 800f1c0:	4619      	mov	r1, r3
 800f1c2:	6878      	ldr	r0, [r7, #4]
 800f1c4:	f7ff ff50 	bl	800f068 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800f1c8:	f241 3288 	movw	r2, #5000	@ 0x1388
 800f1cc:	2111      	movs	r1, #17
 800f1ce:	6878      	ldr	r0, [r7, #4]
 800f1d0:	f000 fa3c 	bl	800f64c <SDMMC_GetCmdResp1>
 800f1d4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f1d6:	69fb      	ldr	r3, [r7, #28]
}
 800f1d8:	4618      	mov	r0, r3
 800f1da:	3720      	adds	r7, #32
 800f1dc:	46bd      	mov	sp, r7
 800f1de:	bd80      	pop	{r7, pc}

0800f1e0 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800f1e0:	b580      	push	{r7, lr}
 800f1e2:	b088      	sub	sp, #32
 800f1e4:	af00      	add	r7, sp, #0
 800f1e6:	6078      	str	r0, [r7, #4]
 800f1e8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800f1ea:	683b      	ldr	r3, [r7, #0]
 800f1ec:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800f1ee:	2312      	movs	r3, #18
 800f1f0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800f1f2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800f1f6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f1f8:	2300      	movs	r3, #0
 800f1fa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f1fc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800f200:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f202:	f107 0308 	add.w	r3, r7, #8
 800f206:	4619      	mov	r1, r3
 800f208:	6878      	ldr	r0, [r7, #4]
 800f20a:	f7ff ff2d 	bl	800f068 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800f20e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800f212:	2112      	movs	r1, #18
 800f214:	6878      	ldr	r0, [r7, #4]
 800f216:	f000 fa19 	bl	800f64c <SDMMC_GetCmdResp1>
 800f21a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f21c:	69fb      	ldr	r3, [r7, #28]
}
 800f21e:	4618      	mov	r0, r3
 800f220:	3720      	adds	r7, #32
 800f222:	46bd      	mov	sp, r7
 800f224:	bd80      	pop	{r7, pc}

0800f226 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800f226:	b580      	push	{r7, lr}
 800f228:	b088      	sub	sp, #32
 800f22a:	af00      	add	r7, sp, #0
 800f22c:	6078      	str	r0, [r7, #4]
 800f22e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800f230:	683b      	ldr	r3, [r7, #0]
 800f232:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800f234:	2318      	movs	r3, #24
 800f236:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800f238:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800f23c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f23e:	2300      	movs	r3, #0
 800f240:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f242:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800f246:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f248:	f107 0308 	add.w	r3, r7, #8
 800f24c:	4619      	mov	r1, r3
 800f24e:	6878      	ldr	r0, [r7, #4]
 800f250:	f7ff ff0a 	bl	800f068 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800f254:	f241 3288 	movw	r2, #5000	@ 0x1388
 800f258:	2118      	movs	r1, #24
 800f25a:	6878      	ldr	r0, [r7, #4]
 800f25c:	f000 f9f6 	bl	800f64c <SDMMC_GetCmdResp1>
 800f260:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f262:	69fb      	ldr	r3, [r7, #28]
}
 800f264:	4618      	mov	r0, r3
 800f266:	3720      	adds	r7, #32
 800f268:	46bd      	mov	sp, r7
 800f26a:	bd80      	pop	{r7, pc}

0800f26c <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800f26c:	b580      	push	{r7, lr}
 800f26e:	b088      	sub	sp, #32
 800f270:	af00      	add	r7, sp, #0
 800f272:	6078      	str	r0, [r7, #4]
 800f274:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800f276:	683b      	ldr	r3, [r7, #0]
 800f278:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800f27a:	2319      	movs	r3, #25
 800f27c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800f27e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800f282:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f284:	2300      	movs	r3, #0
 800f286:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f288:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800f28c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f28e:	f107 0308 	add.w	r3, r7, #8
 800f292:	4619      	mov	r1, r3
 800f294:	6878      	ldr	r0, [r7, #4]
 800f296:	f7ff fee7 	bl	800f068 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800f29a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800f29e:	2119      	movs	r1, #25
 800f2a0:	6878      	ldr	r0, [r7, #4]
 800f2a2:	f000 f9d3 	bl	800f64c <SDMMC_GetCmdResp1>
 800f2a6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f2a8:	69fb      	ldr	r3, [r7, #28]
}
 800f2aa:	4618      	mov	r0, r3
 800f2ac:	3720      	adds	r7, #32
 800f2ae:	46bd      	mov	sp, r7
 800f2b0:	bd80      	pop	{r7, pc}
	...

0800f2b4 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800f2b4:	b580      	push	{r7, lr}
 800f2b6:	b088      	sub	sp, #32
 800f2b8:	af00      	add	r7, sp, #0
 800f2ba:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800f2bc:	2300      	movs	r3, #0
 800f2be:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800f2c0:	230c      	movs	r3, #12
 800f2c2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800f2c4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800f2c8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f2ca:	2300      	movs	r3, #0
 800f2cc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f2ce:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800f2d2:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 800f2d4:	687b      	ldr	r3, [r7, #4]
 800f2d6:	68db      	ldr	r3, [r3, #12]
 800f2d8:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800f2dc:	687b      	ldr	r3, [r7, #4]
 800f2de:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 800f2e0:	687b      	ldr	r3, [r7, #4]
 800f2e2:	68db      	ldr	r3, [r3, #12]
 800f2e4:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 800f2e8:	687b      	ldr	r3, [r7, #4]
 800f2ea:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f2ec:	f107 0308 	add.w	r3, r7, #8
 800f2f0:	4619      	mov	r1, r3
 800f2f2:	6878      	ldr	r0, [r7, #4]
 800f2f4:	f7ff feb8 	bl	800f068 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800f2f8:	4a0b      	ldr	r2, [pc, #44]	@ (800f328 <SDMMC_CmdStopTransfer+0x74>)
 800f2fa:	210c      	movs	r1, #12
 800f2fc:	6878      	ldr	r0, [r7, #4]
 800f2fe:	f000 f9a5 	bl	800f64c <SDMMC_GetCmdResp1>
 800f302:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800f304:	687b      	ldr	r3, [r7, #4]
 800f306:	68db      	ldr	r3, [r3, #12]
 800f308:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800f30c:	687b      	ldr	r3, [r7, #4]
 800f30e:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800f310:	69fb      	ldr	r3, [r7, #28]
 800f312:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800f316:	d101      	bne.n	800f31c <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 800f318:	2300      	movs	r3, #0
 800f31a:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 800f31c:	69fb      	ldr	r3, [r7, #28]
}
 800f31e:	4618      	mov	r0, r3
 800f320:	3720      	adds	r7, #32
 800f322:	46bd      	mov	sp, r7
 800f324:	bd80      	pop	{r7, pc}
 800f326:	bf00      	nop
 800f328:	05f5e100 	.word	0x05f5e100

0800f32c <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 800f32c:	b580      	push	{r7, lr}
 800f32e:	b088      	sub	sp, #32
 800f330:	af00      	add	r7, sp, #0
 800f332:	6078      	str	r0, [r7, #4]
 800f334:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800f336:	683b      	ldr	r3, [r7, #0]
 800f338:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800f33a:	2307      	movs	r3, #7
 800f33c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800f33e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800f342:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f344:	2300      	movs	r3, #0
 800f346:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f348:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800f34c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f34e:	f107 0308 	add.w	r3, r7, #8
 800f352:	4619      	mov	r1, r3
 800f354:	6878      	ldr	r0, [r7, #4]
 800f356:	f7ff fe87 	bl	800f068 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800f35a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800f35e:	2107      	movs	r1, #7
 800f360:	6878      	ldr	r0, [r7, #4]
 800f362:	f000 f973 	bl	800f64c <SDMMC_GetCmdResp1>
 800f366:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f368:	69fb      	ldr	r3, [r7, #28]
}
 800f36a:	4618      	mov	r0, r3
 800f36c:	3720      	adds	r7, #32
 800f36e:	46bd      	mov	sp, r7
 800f370:	bd80      	pop	{r7, pc}

0800f372 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800f372:	b580      	push	{r7, lr}
 800f374:	b088      	sub	sp, #32
 800f376:	af00      	add	r7, sp, #0
 800f378:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800f37a:	2300      	movs	r3, #0
 800f37c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800f37e:	2300      	movs	r3, #0
 800f380:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800f382:	2300      	movs	r3, #0
 800f384:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f386:	2300      	movs	r3, #0
 800f388:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f38a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800f38e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f390:	f107 0308 	add.w	r3, r7, #8
 800f394:	4619      	mov	r1, r3
 800f396:	6878      	ldr	r0, [r7, #4]
 800f398:	f7ff fe66 	bl	800f068 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800f39c:	6878      	ldr	r0, [r7, #4]
 800f39e:	f000 fb97 	bl	800fad0 <SDMMC_GetCmdError>
 800f3a2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f3a4:	69fb      	ldr	r3, [r7, #28]
}
 800f3a6:	4618      	mov	r0, r3
 800f3a8:	3720      	adds	r7, #32
 800f3aa:	46bd      	mov	sp, r7
 800f3ac:	bd80      	pop	{r7, pc}

0800f3ae <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800f3ae:	b580      	push	{r7, lr}
 800f3b0:	b088      	sub	sp, #32
 800f3b2:	af00      	add	r7, sp, #0
 800f3b4:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800f3b6:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 800f3ba:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800f3bc:	2308      	movs	r3, #8
 800f3be:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800f3c0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800f3c4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f3c6:	2300      	movs	r3, #0
 800f3c8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f3ca:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800f3ce:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f3d0:	f107 0308 	add.w	r3, r7, #8
 800f3d4:	4619      	mov	r1, r3
 800f3d6:	6878      	ldr	r0, [r7, #4]
 800f3d8:	f7ff fe46 	bl	800f068 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800f3dc:	6878      	ldr	r0, [r7, #4]
 800f3de:	f000 fb29 	bl	800fa34 <SDMMC_GetCmdResp7>
 800f3e2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f3e4:	69fb      	ldr	r3, [r7, #28]
}
 800f3e6:	4618      	mov	r0, r3
 800f3e8:	3720      	adds	r7, #32
 800f3ea:	46bd      	mov	sp, r7
 800f3ec:	bd80      	pop	{r7, pc}

0800f3ee <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800f3ee:	b580      	push	{r7, lr}
 800f3f0:	b088      	sub	sp, #32
 800f3f2:	af00      	add	r7, sp, #0
 800f3f4:	6078      	str	r0, [r7, #4]
 800f3f6:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800f3f8:	683b      	ldr	r3, [r7, #0]
 800f3fa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800f3fc:	2337      	movs	r3, #55	@ 0x37
 800f3fe:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800f400:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800f404:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f406:	2300      	movs	r3, #0
 800f408:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f40a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800f40e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f410:	f107 0308 	add.w	r3, r7, #8
 800f414:	4619      	mov	r1, r3
 800f416:	6878      	ldr	r0, [r7, #4]
 800f418:	f7ff fe26 	bl	800f068 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800f41c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800f420:	2137      	movs	r1, #55	@ 0x37
 800f422:	6878      	ldr	r0, [r7, #4]
 800f424:	f000 f912 	bl	800f64c <SDMMC_GetCmdResp1>
 800f428:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f42a:	69fb      	ldr	r3, [r7, #28]
}
 800f42c:	4618      	mov	r0, r3
 800f42e:	3720      	adds	r7, #32
 800f430:	46bd      	mov	sp, r7
 800f432:	bd80      	pop	{r7, pc}

0800f434 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800f434:	b580      	push	{r7, lr}
 800f436:	b088      	sub	sp, #32
 800f438:	af00      	add	r7, sp, #0
 800f43a:	6078      	str	r0, [r7, #4]
 800f43c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800f43e:	683b      	ldr	r3, [r7, #0]
 800f440:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800f442:	2329      	movs	r3, #41	@ 0x29
 800f444:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800f446:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800f44a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f44c:	2300      	movs	r3, #0
 800f44e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f450:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800f454:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f456:	f107 0308 	add.w	r3, r7, #8
 800f45a:	4619      	mov	r1, r3
 800f45c:	6878      	ldr	r0, [r7, #4]
 800f45e:	f7ff fe03 	bl	800f068 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800f462:	6878      	ldr	r0, [r7, #4]
 800f464:	f000 fa2e 	bl	800f8c4 <SDMMC_GetCmdResp3>
 800f468:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f46a:	69fb      	ldr	r3, [r7, #28]
}
 800f46c:	4618      	mov	r0, r3
 800f46e:	3720      	adds	r7, #32
 800f470:	46bd      	mov	sp, r7
 800f472:	bd80      	pop	{r7, pc}

0800f474 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800f474:	b580      	push	{r7, lr}
 800f476:	b088      	sub	sp, #32
 800f478:	af00      	add	r7, sp, #0
 800f47a:	6078      	str	r0, [r7, #4]
 800f47c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800f47e:	683b      	ldr	r3, [r7, #0]
 800f480:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800f482:	2306      	movs	r3, #6
 800f484:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800f486:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800f48a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f48c:	2300      	movs	r3, #0
 800f48e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f490:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800f494:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f496:	f107 0308 	add.w	r3, r7, #8
 800f49a:	4619      	mov	r1, r3
 800f49c:	6878      	ldr	r0, [r7, #4]
 800f49e:	f7ff fde3 	bl	800f068 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800f4a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 800f4a6:	2106      	movs	r1, #6
 800f4a8:	6878      	ldr	r0, [r7, #4]
 800f4aa:	f000 f8cf 	bl	800f64c <SDMMC_GetCmdResp1>
 800f4ae:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f4b0:	69fb      	ldr	r3, [r7, #28]
}
 800f4b2:	4618      	mov	r0, r3
 800f4b4:	3720      	adds	r7, #32
 800f4b6:	46bd      	mov	sp, r7
 800f4b8:	bd80      	pop	{r7, pc}

0800f4ba <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800f4ba:	b580      	push	{r7, lr}
 800f4bc:	b088      	sub	sp, #32
 800f4be:	af00      	add	r7, sp, #0
 800f4c0:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800f4c2:	2300      	movs	r3, #0
 800f4c4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800f4c6:	2333      	movs	r3, #51	@ 0x33
 800f4c8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800f4ca:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800f4ce:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f4d0:	2300      	movs	r3, #0
 800f4d2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f4d4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800f4d8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f4da:	f107 0308 	add.w	r3, r7, #8
 800f4de:	4619      	mov	r1, r3
 800f4e0:	6878      	ldr	r0, [r7, #4]
 800f4e2:	f7ff fdc1 	bl	800f068 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800f4e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 800f4ea:	2133      	movs	r1, #51	@ 0x33
 800f4ec:	6878      	ldr	r0, [r7, #4]
 800f4ee:	f000 f8ad 	bl	800f64c <SDMMC_GetCmdResp1>
 800f4f2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f4f4:	69fb      	ldr	r3, [r7, #28]
}
 800f4f6:	4618      	mov	r0, r3
 800f4f8:	3720      	adds	r7, #32
 800f4fa:	46bd      	mov	sp, r7
 800f4fc:	bd80      	pop	{r7, pc}

0800f4fe <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800f4fe:	b580      	push	{r7, lr}
 800f500:	b088      	sub	sp, #32
 800f502:	af00      	add	r7, sp, #0
 800f504:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800f506:	2300      	movs	r3, #0
 800f508:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800f50a:	2302      	movs	r3, #2
 800f50c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800f50e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800f512:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f514:	2300      	movs	r3, #0
 800f516:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f518:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800f51c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f51e:	f107 0308 	add.w	r3, r7, #8
 800f522:	4619      	mov	r1, r3
 800f524:	6878      	ldr	r0, [r7, #4]
 800f526:	f7ff fd9f 	bl	800f068 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800f52a:	6878      	ldr	r0, [r7, #4]
 800f52c:	f000 f980 	bl	800f830 <SDMMC_GetCmdResp2>
 800f530:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f532:	69fb      	ldr	r3, [r7, #28]
}
 800f534:	4618      	mov	r0, r3
 800f536:	3720      	adds	r7, #32
 800f538:	46bd      	mov	sp, r7
 800f53a:	bd80      	pop	{r7, pc}

0800f53c <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800f53c:	b580      	push	{r7, lr}
 800f53e:	b088      	sub	sp, #32
 800f540:	af00      	add	r7, sp, #0
 800f542:	6078      	str	r0, [r7, #4]
 800f544:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800f546:	683b      	ldr	r3, [r7, #0]
 800f548:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800f54a:	2309      	movs	r3, #9
 800f54c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800f54e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800f552:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f554:	2300      	movs	r3, #0
 800f556:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f558:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800f55c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f55e:	f107 0308 	add.w	r3, r7, #8
 800f562:	4619      	mov	r1, r3
 800f564:	6878      	ldr	r0, [r7, #4]
 800f566:	f7ff fd7f 	bl	800f068 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800f56a:	6878      	ldr	r0, [r7, #4]
 800f56c:	f000 f960 	bl	800f830 <SDMMC_GetCmdResp2>
 800f570:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f572:	69fb      	ldr	r3, [r7, #28]
}
 800f574:	4618      	mov	r0, r3
 800f576:	3720      	adds	r7, #32
 800f578:	46bd      	mov	sp, r7
 800f57a:	bd80      	pop	{r7, pc}

0800f57c <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800f57c:	b580      	push	{r7, lr}
 800f57e:	b088      	sub	sp, #32
 800f580:	af00      	add	r7, sp, #0
 800f582:	6078      	str	r0, [r7, #4]
 800f584:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800f586:	2300      	movs	r3, #0
 800f588:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800f58a:	2303      	movs	r3, #3
 800f58c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800f58e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800f592:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f594:	2300      	movs	r3, #0
 800f596:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f598:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800f59c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f59e:	f107 0308 	add.w	r3, r7, #8
 800f5a2:	4619      	mov	r1, r3
 800f5a4:	6878      	ldr	r0, [r7, #4]
 800f5a6:	f7ff fd5f 	bl	800f068 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800f5aa:	683a      	ldr	r2, [r7, #0]
 800f5ac:	2103      	movs	r1, #3
 800f5ae:	6878      	ldr	r0, [r7, #4]
 800f5b0:	f000 f9c8 	bl	800f944 <SDMMC_GetCmdResp6>
 800f5b4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f5b6:	69fb      	ldr	r3, [r7, #28]
}
 800f5b8:	4618      	mov	r0, r3
 800f5ba:	3720      	adds	r7, #32
 800f5bc:	46bd      	mov	sp, r7
 800f5be:	bd80      	pop	{r7, pc}

0800f5c0 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800f5c0:	b580      	push	{r7, lr}
 800f5c2:	b088      	sub	sp, #32
 800f5c4:	af00      	add	r7, sp, #0
 800f5c6:	6078      	str	r0, [r7, #4]
 800f5c8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800f5ca:	683b      	ldr	r3, [r7, #0]
 800f5cc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800f5ce:	230d      	movs	r3, #13
 800f5d0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800f5d2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800f5d6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f5d8:	2300      	movs	r3, #0
 800f5da:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f5dc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800f5e0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f5e2:	f107 0308 	add.w	r3, r7, #8
 800f5e6:	4619      	mov	r1, r3
 800f5e8:	6878      	ldr	r0, [r7, #4]
 800f5ea:	f7ff fd3d 	bl	800f068 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800f5ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 800f5f2:	210d      	movs	r1, #13
 800f5f4:	6878      	ldr	r0, [r7, #4]
 800f5f6:	f000 f829 	bl	800f64c <SDMMC_GetCmdResp1>
 800f5fa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f5fc:	69fb      	ldr	r3, [r7, #28]
}
 800f5fe:	4618      	mov	r0, r3
 800f600:	3720      	adds	r7, #32
 800f602:	46bd      	mov	sp, r7
 800f604:	bd80      	pop	{r7, pc}

0800f606 <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 800f606:	b580      	push	{r7, lr}
 800f608:	b088      	sub	sp, #32
 800f60a:	af00      	add	r7, sp, #0
 800f60c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800f60e:	2300      	movs	r3, #0
 800f610:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 800f612:	230d      	movs	r3, #13
 800f614:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800f616:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800f61a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f61c:	2300      	movs	r3, #0
 800f61e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f620:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800f624:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f626:	f107 0308 	add.w	r3, r7, #8
 800f62a:	4619      	mov	r1, r3
 800f62c:	6878      	ldr	r0, [r7, #4]
 800f62e:	f7ff fd1b 	bl	800f068 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 800f632:	f241 3288 	movw	r2, #5000	@ 0x1388
 800f636:	210d      	movs	r1, #13
 800f638:	6878      	ldr	r0, [r7, #4]
 800f63a:	f000 f807 	bl	800f64c <SDMMC_GetCmdResp1>
 800f63e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f640:	69fb      	ldr	r3, [r7, #28]
}
 800f642:	4618      	mov	r0, r3
 800f644:	3720      	adds	r7, #32
 800f646:	46bd      	mov	sp, r7
 800f648:	bd80      	pop	{r7, pc}
	...

0800f64c <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800f64c:	b580      	push	{r7, lr}
 800f64e:	b088      	sub	sp, #32
 800f650:	af00      	add	r7, sp, #0
 800f652:	60f8      	str	r0, [r7, #12]
 800f654:	460b      	mov	r3, r1
 800f656:	607a      	str	r2, [r7, #4]
 800f658:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800f65a:	4b70      	ldr	r3, [pc, #448]	@ (800f81c <SDMMC_GetCmdResp1+0x1d0>)
 800f65c:	681b      	ldr	r3, [r3, #0]
 800f65e:	4a70      	ldr	r2, [pc, #448]	@ (800f820 <SDMMC_GetCmdResp1+0x1d4>)
 800f660:	fba2 2303 	umull	r2, r3, r2, r3
 800f664:	0a5a      	lsrs	r2, r3, #9
 800f666:	687b      	ldr	r3, [r7, #4]
 800f668:	fb02 f303 	mul.w	r3, r2, r3
 800f66c:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800f66e:	69fb      	ldr	r3, [r7, #28]
 800f670:	1e5a      	subs	r2, r3, #1
 800f672:	61fa      	str	r2, [r7, #28]
 800f674:	2b00      	cmp	r3, #0
 800f676:	d102      	bne.n	800f67e <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800f678:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800f67c:	e0c9      	b.n	800f812 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800f67e:	68fb      	ldr	r3, [r7, #12]
 800f680:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f682:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800f684:	69ba      	ldr	r2, [r7, #24]
 800f686:	4b67      	ldr	r3, [pc, #412]	@ (800f824 <SDMMC_GetCmdResp1+0x1d8>)
 800f688:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800f68a:	2b00      	cmp	r3, #0
 800f68c:	d0ef      	beq.n	800f66e <SDMMC_GetCmdResp1+0x22>
 800f68e:	69bb      	ldr	r3, [r7, #24]
 800f690:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800f694:	2b00      	cmp	r3, #0
 800f696:	d1ea      	bne.n	800f66e <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800f698:	68fb      	ldr	r3, [r7, #12]
 800f69a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f69c:	f003 0304 	and.w	r3, r3, #4
 800f6a0:	2b00      	cmp	r3, #0
 800f6a2:	d004      	beq.n	800f6ae <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800f6a4:	68fb      	ldr	r3, [r7, #12]
 800f6a6:	2204      	movs	r2, #4
 800f6a8:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800f6aa:	2304      	movs	r3, #4
 800f6ac:	e0b1      	b.n	800f812 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800f6ae:	68fb      	ldr	r3, [r7, #12]
 800f6b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f6b2:	f003 0301 	and.w	r3, r3, #1
 800f6b6:	2b00      	cmp	r3, #0
 800f6b8:	d004      	beq.n	800f6c4 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800f6ba:	68fb      	ldr	r3, [r7, #12]
 800f6bc:	2201      	movs	r2, #1
 800f6be:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800f6c0:	2301      	movs	r3, #1
 800f6c2:	e0a6      	b.n	800f812 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800f6c4:	68fb      	ldr	r3, [r7, #12]
 800f6c6:	4a58      	ldr	r2, [pc, #352]	@ (800f828 <SDMMC_GetCmdResp1+0x1dc>)
 800f6c8:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800f6ca:	68f8      	ldr	r0, [r7, #12]
 800f6cc:	f7ff fcf6 	bl	800f0bc <SDMMC_GetCommandResponse>
 800f6d0:	4603      	mov	r3, r0
 800f6d2:	461a      	mov	r2, r3
 800f6d4:	7afb      	ldrb	r3, [r7, #11]
 800f6d6:	4293      	cmp	r3, r2
 800f6d8:	d001      	beq.n	800f6de <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800f6da:	2301      	movs	r3, #1
 800f6dc:	e099      	b.n	800f812 <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800f6de:	2100      	movs	r1, #0
 800f6e0:	68f8      	ldr	r0, [r7, #12]
 800f6e2:	f7ff fcf8 	bl	800f0d6 <SDMMC_GetResponse>
 800f6e6:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800f6e8:	697a      	ldr	r2, [r7, #20]
 800f6ea:	4b50      	ldr	r3, [pc, #320]	@ (800f82c <SDMMC_GetCmdResp1+0x1e0>)
 800f6ec:	4013      	ands	r3, r2
 800f6ee:	2b00      	cmp	r3, #0
 800f6f0:	d101      	bne.n	800f6f6 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800f6f2:	2300      	movs	r3, #0
 800f6f4:	e08d      	b.n	800f812 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800f6f6:	697b      	ldr	r3, [r7, #20]
 800f6f8:	2b00      	cmp	r3, #0
 800f6fa:	da02      	bge.n	800f702 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800f6fc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800f700:	e087      	b.n	800f812 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800f702:	697b      	ldr	r3, [r7, #20]
 800f704:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800f708:	2b00      	cmp	r3, #0
 800f70a:	d001      	beq.n	800f710 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800f70c:	2340      	movs	r3, #64	@ 0x40
 800f70e:	e080      	b.n	800f812 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800f710:	697b      	ldr	r3, [r7, #20]
 800f712:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800f716:	2b00      	cmp	r3, #0
 800f718:	d001      	beq.n	800f71e <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800f71a:	2380      	movs	r3, #128	@ 0x80
 800f71c:	e079      	b.n	800f812 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800f71e:	697b      	ldr	r3, [r7, #20]
 800f720:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800f724:	2b00      	cmp	r3, #0
 800f726:	d002      	beq.n	800f72e <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800f728:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800f72c:	e071      	b.n	800f812 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800f72e:	697b      	ldr	r3, [r7, #20]
 800f730:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800f734:	2b00      	cmp	r3, #0
 800f736:	d002      	beq.n	800f73e <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800f738:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800f73c:	e069      	b.n	800f812 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800f73e:	697b      	ldr	r3, [r7, #20]
 800f740:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800f744:	2b00      	cmp	r3, #0
 800f746:	d002      	beq.n	800f74e <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800f748:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800f74c:	e061      	b.n	800f812 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800f74e:	697b      	ldr	r3, [r7, #20]
 800f750:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800f754:	2b00      	cmp	r3, #0
 800f756:	d002      	beq.n	800f75e <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800f758:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800f75c:	e059      	b.n	800f812 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800f75e:	697b      	ldr	r3, [r7, #20]
 800f760:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800f764:	2b00      	cmp	r3, #0
 800f766:	d002      	beq.n	800f76e <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800f768:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800f76c:	e051      	b.n	800f812 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800f76e:	697b      	ldr	r3, [r7, #20]
 800f770:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800f774:	2b00      	cmp	r3, #0
 800f776:	d002      	beq.n	800f77e <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800f778:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800f77c:	e049      	b.n	800f812 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800f77e:	697b      	ldr	r3, [r7, #20]
 800f780:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800f784:	2b00      	cmp	r3, #0
 800f786:	d002      	beq.n	800f78e <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800f788:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800f78c:	e041      	b.n	800f812 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800f78e:	697b      	ldr	r3, [r7, #20]
 800f790:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800f794:	2b00      	cmp	r3, #0
 800f796:	d002      	beq.n	800f79e <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800f798:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800f79c:	e039      	b.n	800f812 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800f79e:	697b      	ldr	r3, [r7, #20]
 800f7a0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800f7a4:	2b00      	cmp	r3, #0
 800f7a6:	d002      	beq.n	800f7ae <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800f7a8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800f7ac:	e031      	b.n	800f812 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800f7ae:	697b      	ldr	r3, [r7, #20]
 800f7b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800f7b4:	2b00      	cmp	r3, #0
 800f7b6:	d002      	beq.n	800f7be <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800f7b8:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800f7bc:	e029      	b.n	800f812 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800f7be:	697b      	ldr	r3, [r7, #20]
 800f7c0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800f7c4:	2b00      	cmp	r3, #0
 800f7c6:	d002      	beq.n	800f7ce <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800f7c8:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800f7cc:	e021      	b.n	800f812 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800f7ce:	697b      	ldr	r3, [r7, #20]
 800f7d0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800f7d4:	2b00      	cmp	r3, #0
 800f7d6:	d002      	beq.n	800f7de <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800f7d8:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800f7dc:	e019      	b.n	800f812 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800f7de:	697b      	ldr	r3, [r7, #20]
 800f7e0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800f7e4:	2b00      	cmp	r3, #0
 800f7e6:	d002      	beq.n	800f7ee <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800f7e8:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800f7ec:	e011      	b.n	800f812 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800f7ee:	697b      	ldr	r3, [r7, #20]
 800f7f0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800f7f4:	2b00      	cmp	r3, #0
 800f7f6:	d002      	beq.n	800f7fe <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800f7f8:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800f7fc:	e009      	b.n	800f812 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800f7fe:	697b      	ldr	r3, [r7, #20]
 800f800:	f003 0308 	and.w	r3, r3, #8
 800f804:	2b00      	cmp	r3, #0
 800f806:	d002      	beq.n	800f80e <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800f808:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 800f80c:	e001      	b.n	800f812 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800f80e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800f812:	4618      	mov	r0, r3
 800f814:	3720      	adds	r7, #32
 800f816:	46bd      	mov	sp, r7
 800f818:	bd80      	pop	{r7, pc}
 800f81a:	bf00      	nop
 800f81c:	24000050 	.word	0x24000050
 800f820:	10624dd3 	.word	0x10624dd3
 800f824:	00200045 	.word	0x00200045
 800f828:	002000c5 	.word	0x002000c5
 800f82c:	fdffe008 	.word	0xfdffe008

0800f830 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800f830:	b480      	push	{r7}
 800f832:	b085      	sub	sp, #20
 800f834:	af00      	add	r7, sp, #0
 800f836:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800f838:	4b1f      	ldr	r3, [pc, #124]	@ (800f8b8 <SDMMC_GetCmdResp2+0x88>)
 800f83a:	681b      	ldr	r3, [r3, #0]
 800f83c:	4a1f      	ldr	r2, [pc, #124]	@ (800f8bc <SDMMC_GetCmdResp2+0x8c>)
 800f83e:	fba2 2303 	umull	r2, r3, r2, r3
 800f842:	0a5b      	lsrs	r3, r3, #9
 800f844:	f241 3288 	movw	r2, #5000	@ 0x1388
 800f848:	fb02 f303 	mul.w	r3, r2, r3
 800f84c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800f84e:	68fb      	ldr	r3, [r7, #12]
 800f850:	1e5a      	subs	r2, r3, #1
 800f852:	60fa      	str	r2, [r7, #12]
 800f854:	2b00      	cmp	r3, #0
 800f856:	d102      	bne.n	800f85e <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800f858:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800f85c:	e026      	b.n	800f8ac <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800f85e:	687b      	ldr	r3, [r7, #4]
 800f860:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f862:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800f864:	68bb      	ldr	r3, [r7, #8]
 800f866:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800f86a:	2b00      	cmp	r3, #0
 800f86c:	d0ef      	beq.n	800f84e <SDMMC_GetCmdResp2+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800f86e:	68bb      	ldr	r3, [r7, #8]
 800f870:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800f874:	2b00      	cmp	r3, #0
 800f876:	d1ea      	bne.n	800f84e <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800f878:	687b      	ldr	r3, [r7, #4]
 800f87a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f87c:	f003 0304 	and.w	r3, r3, #4
 800f880:	2b00      	cmp	r3, #0
 800f882:	d004      	beq.n	800f88e <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800f884:	687b      	ldr	r3, [r7, #4]
 800f886:	2204      	movs	r2, #4
 800f888:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800f88a:	2304      	movs	r3, #4
 800f88c:	e00e      	b.n	800f8ac <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800f88e:	687b      	ldr	r3, [r7, #4]
 800f890:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f892:	f003 0301 	and.w	r3, r3, #1
 800f896:	2b00      	cmp	r3, #0
 800f898:	d004      	beq.n	800f8a4 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800f89a:	687b      	ldr	r3, [r7, #4]
 800f89c:	2201      	movs	r2, #1
 800f89e:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800f8a0:	2301      	movs	r3, #1
 800f8a2:	e003      	b.n	800f8ac <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800f8a4:	687b      	ldr	r3, [r7, #4]
 800f8a6:	4a06      	ldr	r2, [pc, #24]	@ (800f8c0 <SDMMC_GetCmdResp2+0x90>)
 800f8a8:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800f8aa:	2300      	movs	r3, #0
}
 800f8ac:	4618      	mov	r0, r3
 800f8ae:	3714      	adds	r7, #20
 800f8b0:	46bd      	mov	sp, r7
 800f8b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8b6:	4770      	bx	lr
 800f8b8:	24000050 	.word	0x24000050
 800f8bc:	10624dd3 	.word	0x10624dd3
 800f8c0:	002000c5 	.word	0x002000c5

0800f8c4 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800f8c4:	b480      	push	{r7}
 800f8c6:	b085      	sub	sp, #20
 800f8c8:	af00      	add	r7, sp, #0
 800f8ca:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800f8cc:	4b1a      	ldr	r3, [pc, #104]	@ (800f938 <SDMMC_GetCmdResp3+0x74>)
 800f8ce:	681b      	ldr	r3, [r3, #0]
 800f8d0:	4a1a      	ldr	r2, [pc, #104]	@ (800f93c <SDMMC_GetCmdResp3+0x78>)
 800f8d2:	fba2 2303 	umull	r2, r3, r2, r3
 800f8d6:	0a5b      	lsrs	r3, r3, #9
 800f8d8:	f241 3288 	movw	r2, #5000	@ 0x1388
 800f8dc:	fb02 f303 	mul.w	r3, r2, r3
 800f8e0:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800f8e2:	68fb      	ldr	r3, [r7, #12]
 800f8e4:	1e5a      	subs	r2, r3, #1
 800f8e6:	60fa      	str	r2, [r7, #12]
 800f8e8:	2b00      	cmp	r3, #0
 800f8ea:	d102      	bne.n	800f8f2 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800f8ec:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800f8f0:	e01b      	b.n	800f92a <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800f8f2:	687b      	ldr	r3, [r7, #4]
 800f8f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f8f6:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800f8f8:	68bb      	ldr	r3, [r7, #8]
 800f8fa:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800f8fe:	2b00      	cmp	r3, #0
 800f900:	d0ef      	beq.n	800f8e2 <SDMMC_GetCmdResp3+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800f902:	68bb      	ldr	r3, [r7, #8]
 800f904:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800f908:	2b00      	cmp	r3, #0
 800f90a:	d1ea      	bne.n	800f8e2 <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800f90c:	687b      	ldr	r3, [r7, #4]
 800f90e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f910:	f003 0304 	and.w	r3, r3, #4
 800f914:	2b00      	cmp	r3, #0
 800f916:	d004      	beq.n	800f922 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800f918:	687b      	ldr	r3, [r7, #4]
 800f91a:	2204      	movs	r2, #4
 800f91c:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800f91e:	2304      	movs	r3, #4
 800f920:	e003      	b.n	800f92a <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800f922:	687b      	ldr	r3, [r7, #4]
 800f924:	4a06      	ldr	r2, [pc, #24]	@ (800f940 <SDMMC_GetCmdResp3+0x7c>)
 800f926:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800f928:	2300      	movs	r3, #0
}
 800f92a:	4618      	mov	r0, r3
 800f92c:	3714      	adds	r7, #20
 800f92e:	46bd      	mov	sp, r7
 800f930:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f934:	4770      	bx	lr
 800f936:	bf00      	nop
 800f938:	24000050 	.word	0x24000050
 800f93c:	10624dd3 	.word	0x10624dd3
 800f940:	002000c5 	.word	0x002000c5

0800f944 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800f944:	b580      	push	{r7, lr}
 800f946:	b088      	sub	sp, #32
 800f948:	af00      	add	r7, sp, #0
 800f94a:	60f8      	str	r0, [r7, #12]
 800f94c:	460b      	mov	r3, r1
 800f94e:	607a      	str	r2, [r7, #4]
 800f950:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800f952:	4b35      	ldr	r3, [pc, #212]	@ (800fa28 <SDMMC_GetCmdResp6+0xe4>)
 800f954:	681b      	ldr	r3, [r3, #0]
 800f956:	4a35      	ldr	r2, [pc, #212]	@ (800fa2c <SDMMC_GetCmdResp6+0xe8>)
 800f958:	fba2 2303 	umull	r2, r3, r2, r3
 800f95c:	0a5b      	lsrs	r3, r3, #9
 800f95e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800f962:	fb02 f303 	mul.w	r3, r2, r3
 800f966:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800f968:	69fb      	ldr	r3, [r7, #28]
 800f96a:	1e5a      	subs	r2, r3, #1
 800f96c:	61fa      	str	r2, [r7, #28]
 800f96e:	2b00      	cmp	r3, #0
 800f970:	d102      	bne.n	800f978 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800f972:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800f976:	e052      	b.n	800fa1e <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800f978:	68fb      	ldr	r3, [r7, #12]
 800f97a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f97c:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800f97e:	69bb      	ldr	r3, [r7, #24]
 800f980:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800f984:	2b00      	cmp	r3, #0
 800f986:	d0ef      	beq.n	800f968 <SDMMC_GetCmdResp6+0x24>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800f988:	69bb      	ldr	r3, [r7, #24]
 800f98a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800f98e:	2b00      	cmp	r3, #0
 800f990:	d1ea      	bne.n	800f968 <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800f992:	68fb      	ldr	r3, [r7, #12]
 800f994:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f996:	f003 0304 	and.w	r3, r3, #4
 800f99a:	2b00      	cmp	r3, #0
 800f99c:	d004      	beq.n	800f9a8 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800f99e:	68fb      	ldr	r3, [r7, #12]
 800f9a0:	2204      	movs	r2, #4
 800f9a2:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800f9a4:	2304      	movs	r3, #4
 800f9a6:	e03a      	b.n	800fa1e <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800f9a8:	68fb      	ldr	r3, [r7, #12]
 800f9aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f9ac:	f003 0301 	and.w	r3, r3, #1
 800f9b0:	2b00      	cmp	r3, #0
 800f9b2:	d004      	beq.n	800f9be <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800f9b4:	68fb      	ldr	r3, [r7, #12]
 800f9b6:	2201      	movs	r2, #1
 800f9b8:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800f9ba:	2301      	movs	r3, #1
 800f9bc:	e02f      	b.n	800fa1e <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800f9be:	68f8      	ldr	r0, [r7, #12]
 800f9c0:	f7ff fb7c 	bl	800f0bc <SDMMC_GetCommandResponse>
 800f9c4:	4603      	mov	r3, r0
 800f9c6:	461a      	mov	r2, r3
 800f9c8:	7afb      	ldrb	r3, [r7, #11]
 800f9ca:	4293      	cmp	r3, r2
 800f9cc:	d001      	beq.n	800f9d2 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800f9ce:	2301      	movs	r3, #1
 800f9d0:	e025      	b.n	800fa1e <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800f9d2:	68fb      	ldr	r3, [r7, #12]
 800f9d4:	4a16      	ldr	r2, [pc, #88]	@ (800fa30 <SDMMC_GetCmdResp6+0xec>)
 800f9d6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800f9d8:	2100      	movs	r1, #0
 800f9da:	68f8      	ldr	r0, [r7, #12]
 800f9dc:	f7ff fb7b 	bl	800f0d6 <SDMMC_GetResponse>
 800f9e0:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 800f9e2:	697b      	ldr	r3, [r7, #20]
 800f9e4:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 800f9e8:	2b00      	cmp	r3, #0
 800f9ea:	d106      	bne.n	800f9fa <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 800f9ec:	697b      	ldr	r3, [r7, #20]
 800f9ee:	0c1b      	lsrs	r3, r3, #16
 800f9f0:	b29a      	uxth	r2, r3
 800f9f2:	687b      	ldr	r3, [r7, #4]
 800f9f4:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 800f9f6:	2300      	movs	r3, #0
 800f9f8:	e011      	b.n	800fa1e <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800f9fa:	697b      	ldr	r3, [r7, #20]
 800f9fc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800fa00:	2b00      	cmp	r3, #0
 800fa02:	d002      	beq.n	800fa0a <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800fa04:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800fa08:	e009      	b.n	800fa1e <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800fa0a:	697b      	ldr	r3, [r7, #20]
 800fa0c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800fa10:	2b00      	cmp	r3, #0
 800fa12:	d002      	beq.n	800fa1a <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800fa14:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800fa18:	e001      	b.n	800fa1e <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800fa1a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800fa1e:	4618      	mov	r0, r3
 800fa20:	3720      	adds	r7, #32
 800fa22:	46bd      	mov	sp, r7
 800fa24:	bd80      	pop	{r7, pc}
 800fa26:	bf00      	nop
 800fa28:	24000050 	.word	0x24000050
 800fa2c:	10624dd3 	.word	0x10624dd3
 800fa30:	002000c5 	.word	0x002000c5

0800fa34 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800fa34:	b480      	push	{r7}
 800fa36:	b085      	sub	sp, #20
 800fa38:	af00      	add	r7, sp, #0
 800fa3a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800fa3c:	4b22      	ldr	r3, [pc, #136]	@ (800fac8 <SDMMC_GetCmdResp7+0x94>)
 800fa3e:	681b      	ldr	r3, [r3, #0]
 800fa40:	4a22      	ldr	r2, [pc, #136]	@ (800facc <SDMMC_GetCmdResp7+0x98>)
 800fa42:	fba2 2303 	umull	r2, r3, r2, r3
 800fa46:	0a5b      	lsrs	r3, r3, #9
 800fa48:	f241 3288 	movw	r2, #5000	@ 0x1388
 800fa4c:	fb02 f303 	mul.w	r3, r2, r3
 800fa50:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800fa52:	68fb      	ldr	r3, [r7, #12]
 800fa54:	1e5a      	subs	r2, r3, #1
 800fa56:	60fa      	str	r2, [r7, #12]
 800fa58:	2b00      	cmp	r3, #0
 800fa5a:	d102      	bne.n	800fa62 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800fa5c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800fa60:	e02c      	b.n	800fabc <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800fa62:	687b      	ldr	r3, [r7, #4]
 800fa64:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800fa66:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800fa68:	68bb      	ldr	r3, [r7, #8]
 800fa6a:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800fa6e:	2b00      	cmp	r3, #0
 800fa70:	d0ef      	beq.n	800fa52 <SDMMC_GetCmdResp7+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800fa72:	68bb      	ldr	r3, [r7, #8]
 800fa74:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800fa78:	2b00      	cmp	r3, #0
 800fa7a:	d1ea      	bne.n	800fa52 <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800fa7c:	687b      	ldr	r3, [r7, #4]
 800fa7e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800fa80:	f003 0304 	and.w	r3, r3, #4
 800fa84:	2b00      	cmp	r3, #0
 800fa86:	d004      	beq.n	800fa92 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800fa88:	687b      	ldr	r3, [r7, #4]
 800fa8a:	2204      	movs	r2, #4
 800fa8c:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800fa8e:	2304      	movs	r3, #4
 800fa90:	e014      	b.n	800fabc <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800fa92:	687b      	ldr	r3, [r7, #4]
 800fa94:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800fa96:	f003 0301 	and.w	r3, r3, #1
 800fa9a:	2b00      	cmp	r3, #0
 800fa9c:	d004      	beq.n	800faa8 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800fa9e:	687b      	ldr	r3, [r7, #4]
 800faa0:	2201      	movs	r2, #1
 800faa2:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800faa4:	2301      	movs	r3, #1
 800faa6:	e009      	b.n	800fabc <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800faa8:	687b      	ldr	r3, [r7, #4]
 800faaa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800faac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800fab0:	2b00      	cmp	r3, #0
 800fab2:	d002      	beq.n	800faba <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800fab4:	687b      	ldr	r3, [r7, #4]
 800fab6:	2240      	movs	r2, #64	@ 0x40
 800fab8:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800faba:	2300      	movs	r3, #0

}
 800fabc:	4618      	mov	r0, r3
 800fabe:	3714      	adds	r7, #20
 800fac0:	46bd      	mov	sp, r7
 800fac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fac6:	4770      	bx	lr
 800fac8:	24000050 	.word	0x24000050
 800facc:	10624dd3 	.word	0x10624dd3

0800fad0 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800fad0:	b480      	push	{r7}
 800fad2:	b085      	sub	sp, #20
 800fad4:	af00      	add	r7, sp, #0
 800fad6:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800fad8:	4b11      	ldr	r3, [pc, #68]	@ (800fb20 <SDMMC_GetCmdError+0x50>)
 800fada:	681b      	ldr	r3, [r3, #0]
 800fadc:	4a11      	ldr	r2, [pc, #68]	@ (800fb24 <SDMMC_GetCmdError+0x54>)
 800fade:	fba2 2303 	umull	r2, r3, r2, r3
 800fae2:	0a5b      	lsrs	r3, r3, #9
 800fae4:	f241 3288 	movw	r2, #5000	@ 0x1388
 800fae8:	fb02 f303 	mul.w	r3, r2, r3
 800faec:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800faee:	68fb      	ldr	r3, [r7, #12]
 800faf0:	1e5a      	subs	r2, r3, #1
 800faf2:	60fa      	str	r2, [r7, #12]
 800faf4:	2b00      	cmp	r3, #0
 800faf6:	d102      	bne.n	800fafe <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800faf8:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800fafc:	e009      	b.n	800fb12 <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800fafe:	687b      	ldr	r3, [r7, #4]
 800fb00:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800fb02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800fb06:	2b00      	cmp	r3, #0
 800fb08:	d0f1      	beq.n	800faee <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800fb0a:	687b      	ldr	r3, [r7, #4]
 800fb0c:	4a06      	ldr	r2, [pc, #24]	@ (800fb28 <SDMMC_GetCmdError+0x58>)
 800fb0e:	639a      	str	r2, [r3, #56]	@ 0x38

  return SDMMC_ERROR_NONE;
 800fb10:	2300      	movs	r3, #0
}
 800fb12:	4618      	mov	r0, r3
 800fb14:	3714      	adds	r7, #20
 800fb16:	46bd      	mov	sp, r7
 800fb18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb1c:	4770      	bx	lr
 800fb1e:	bf00      	nop
 800fb20:	24000050 	.word	0x24000050
 800fb24:	10624dd3 	.word	0x10624dd3
 800fb28:	002000c5 	.word	0x002000c5

0800fb2c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800fb2c:	b580      	push	{r7, lr}
 800fb2e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800fb30:	4904      	ldr	r1, [pc, #16]	@ (800fb44 <MX_FATFS_Init+0x18>)
 800fb32:	4805      	ldr	r0, [pc, #20]	@ (800fb48 <MX_FATFS_Init+0x1c>)
 800fb34:	f002 fccc 	bl	80124d0 <FATFS_LinkDriver>
 800fb38:	4603      	mov	r3, r0
 800fb3a:	461a      	mov	r2, r3
 800fb3c:	4b03      	ldr	r3, [pc, #12]	@ (800fb4c <MX_FATFS_Init+0x20>)
 800fb3e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800fb40:	bf00      	nop
 800fb42:	bd80      	pop	{r7, pc}
 800fb44:	24000508 	.word	0x24000508
 800fb48:	080140d0 	.word	0x080140d0
 800fb4c:	24000504 	.word	0x24000504

0800fb50 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800fb50:	b480      	push	{r7}
 800fb52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800fb54:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800fb56:	4618      	mov	r0, r3
 800fb58:	46bd      	mov	sp, r7
 800fb5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb5e:	4770      	bx	lr

0800fb60 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800fb60:	b580      	push	{r7, lr}
 800fb62:	b086      	sub	sp, #24
 800fb64:	af00      	add	r7, sp, #0
 800fb66:	60f8      	str	r0, [r7, #12]
 800fb68:	60b9      	str	r1, [r7, #8]
 800fb6a:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800fb6c:	2300      	movs	r3, #0
 800fb6e:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800fb70:	687b      	ldr	r3, [r7, #4]
 800fb72:	68ba      	ldr	r2, [r7, #8]
 800fb74:	68f9      	ldr	r1, [r7, #12]
 800fb76:	4806      	ldr	r0, [pc, #24]	@ (800fb90 <BSP_SD_ReadBlocks_DMA+0x30>)
 800fb78:	f7fc fc16 	bl	800c3a8 <HAL_SD_ReadBlocks_DMA>
 800fb7c:	4603      	mov	r3, r0
 800fb7e:	2b00      	cmp	r3, #0
 800fb80:	d001      	beq.n	800fb86 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800fb82:	2301      	movs	r3, #1
 800fb84:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800fb86:	7dfb      	ldrb	r3, [r7, #23]
}
 800fb88:	4618      	mov	r0, r3
 800fb8a:	3718      	adds	r7, #24
 800fb8c:	46bd      	mov	sp, r7
 800fb8e:	bd80      	pop	{r7, pc}
 800fb90:	2400039c 	.word	0x2400039c

0800fb94 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800fb94:	b580      	push	{r7, lr}
 800fb96:	b086      	sub	sp, #24
 800fb98:	af00      	add	r7, sp, #0
 800fb9a:	60f8      	str	r0, [r7, #12]
 800fb9c:	60b9      	str	r1, [r7, #8]
 800fb9e:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800fba0:	2300      	movs	r3, #0
 800fba2:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800fba4:	687b      	ldr	r3, [r7, #4]
 800fba6:	68ba      	ldr	r2, [r7, #8]
 800fba8:	68f9      	ldr	r1, [r7, #12]
 800fbaa:	4806      	ldr	r0, [pc, #24]	@ (800fbc4 <BSP_SD_WriteBlocks_DMA+0x30>)
 800fbac:	f7fc fca4 	bl	800c4f8 <HAL_SD_WriteBlocks_DMA>
 800fbb0:	4603      	mov	r3, r0
 800fbb2:	2b00      	cmp	r3, #0
 800fbb4:	d001      	beq.n	800fbba <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800fbb6:	2301      	movs	r3, #1
 800fbb8:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800fbba:	7dfb      	ldrb	r3, [r7, #23]
}
 800fbbc:	4618      	mov	r0, r3
 800fbbe:	3718      	adds	r7, #24
 800fbc0:	46bd      	mov	sp, r7
 800fbc2:	bd80      	pop	{r7, pc}
 800fbc4:	2400039c 	.word	0x2400039c

0800fbc8 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800fbc8:	b580      	push	{r7, lr}
 800fbca:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800fbcc:	4805      	ldr	r0, [pc, #20]	@ (800fbe4 <BSP_SD_GetCardState+0x1c>)
 800fbce:	f7fd fa9d 	bl	800d10c <HAL_SD_GetCardState>
 800fbd2:	4603      	mov	r3, r0
 800fbd4:	2b04      	cmp	r3, #4
 800fbd6:	bf14      	ite	ne
 800fbd8:	2301      	movne	r3, #1
 800fbda:	2300      	moveq	r3, #0
 800fbdc:	b2db      	uxtb	r3, r3
}
 800fbde:	4618      	mov	r0, r3
 800fbe0:	bd80      	pop	{r7, pc}
 800fbe2:	bf00      	nop
 800fbe4:	2400039c 	.word	0x2400039c

0800fbe8 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800fbe8:	b580      	push	{r7, lr}
 800fbea:	b082      	sub	sp, #8
 800fbec:	af00      	add	r7, sp, #0
 800fbee:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800fbf0:	6879      	ldr	r1, [r7, #4]
 800fbf2:	4803      	ldr	r0, [pc, #12]	@ (800fc00 <BSP_SD_GetCardInfo+0x18>)
 800fbf4:	f7fd f94c 	bl	800ce90 <HAL_SD_GetCardInfo>
}
 800fbf8:	bf00      	nop
 800fbfa:	3708      	adds	r7, #8
 800fbfc:	46bd      	mov	sp, r7
 800fbfe:	bd80      	pop	{r7, pc}
 800fc00:	2400039c 	.word	0x2400039c

0800fc04 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800fc04:	b580      	push	{r7, lr}
 800fc06:	b082      	sub	sp, #8
 800fc08:	af00      	add	r7, sp, #0
 800fc0a:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800fc0c:	f000 fad8 	bl	80101c0 <BSP_SD_WriteCpltCallback>
}
 800fc10:	bf00      	nop
 800fc12:	3708      	adds	r7, #8
 800fc14:	46bd      	mov	sp, r7
 800fc16:	bd80      	pop	{r7, pc}

0800fc18 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800fc18:	b580      	push	{r7, lr}
 800fc1a:	b082      	sub	sp, #8
 800fc1c:	af00      	add	r7, sp, #0
 800fc1e:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800fc20:	f000 fada 	bl	80101d8 <BSP_SD_ReadCpltCallback>
}
 800fc24:	bf00      	nop
 800fc26:	3708      	adds	r7, #8
 800fc28:	46bd      	mov	sp, r7
 800fc2a:	bd80      	pop	{r7, pc}

0800fc2c <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800fc2c:	b580      	push	{r7, lr}
 800fc2e:	b084      	sub	sp, #16
 800fc30:	af00      	add	r7, sp, #0
 800fc32:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 800fc34:	f7f6 fd22 	bl	800667c <HAL_GetTick>
 800fc38:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 800fc3a:	e006      	b.n	800fc4a <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800fc3c:	f7ff ffc4 	bl	800fbc8 <BSP_SD_GetCardState>
 800fc40:	4603      	mov	r3, r0
 800fc42:	2b00      	cmp	r3, #0
 800fc44:	d101      	bne.n	800fc4a <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800fc46:	2300      	movs	r3, #0
 800fc48:	e009      	b.n	800fc5e <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 800fc4a:	f7f6 fd17 	bl	800667c <HAL_GetTick>
 800fc4e:	4602      	mov	r2, r0
 800fc50:	68fb      	ldr	r3, [r7, #12]
 800fc52:	1ad3      	subs	r3, r2, r3
 800fc54:	687a      	ldr	r2, [r7, #4]
 800fc56:	429a      	cmp	r2, r3
 800fc58:	d8f0      	bhi.n	800fc3c <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800fc5a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800fc5e:	4618      	mov	r0, r3
 800fc60:	3710      	adds	r7, #16
 800fc62:	46bd      	mov	sp, r7
 800fc64:	bd80      	pop	{r7, pc}
	...

0800fc68 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800fc68:	b580      	push	{r7, lr}
 800fc6a:	b082      	sub	sp, #8
 800fc6c:	af00      	add	r7, sp, #0
 800fc6e:	4603      	mov	r3, r0
 800fc70:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800fc72:	4b0b      	ldr	r3, [pc, #44]	@ (800fca0 <SD_CheckStatus+0x38>)
 800fc74:	2201      	movs	r2, #1
 800fc76:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800fc78:	f7ff ffa6 	bl	800fbc8 <BSP_SD_GetCardState>
 800fc7c:	4603      	mov	r3, r0
 800fc7e:	2b00      	cmp	r3, #0
 800fc80:	d107      	bne.n	800fc92 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800fc82:	4b07      	ldr	r3, [pc, #28]	@ (800fca0 <SD_CheckStatus+0x38>)
 800fc84:	781b      	ldrb	r3, [r3, #0]
 800fc86:	b2db      	uxtb	r3, r3
 800fc88:	f023 0301 	bic.w	r3, r3, #1
 800fc8c:	b2da      	uxtb	r2, r3
 800fc8e:	4b04      	ldr	r3, [pc, #16]	@ (800fca0 <SD_CheckStatus+0x38>)
 800fc90:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800fc92:	4b03      	ldr	r3, [pc, #12]	@ (800fca0 <SD_CheckStatus+0x38>)
 800fc94:	781b      	ldrb	r3, [r3, #0]
 800fc96:	b2db      	uxtb	r3, r3
}
 800fc98:	4618      	mov	r0, r3
 800fc9a:	3708      	adds	r7, #8
 800fc9c:	46bd      	mov	sp, r7
 800fc9e:	bd80      	pop	{r7, pc}
 800fca0:	2400005d 	.word	0x2400005d

0800fca4 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800fca4:	b580      	push	{r7, lr}
 800fca6:	b082      	sub	sp, #8
 800fca8:	af00      	add	r7, sp, #0
 800fcaa:	4603      	mov	r3, r0
 800fcac:	71fb      	strb	r3, [r7, #7]
  {
    Stat = SD_CheckStatus(lun);
  }

#else
  Stat = SD_CheckStatus(lun);
 800fcae:	79fb      	ldrb	r3, [r7, #7]
 800fcb0:	4618      	mov	r0, r3
 800fcb2:	f7ff ffd9 	bl	800fc68 <SD_CheckStatus>
 800fcb6:	4603      	mov	r3, r0
 800fcb8:	461a      	mov	r2, r3
 800fcba:	4b04      	ldr	r3, [pc, #16]	@ (800fccc <SD_initialize+0x28>)
 800fcbc:	701a      	strb	r2, [r3, #0]
#endif

  return Stat;
 800fcbe:	4b03      	ldr	r3, [pc, #12]	@ (800fccc <SD_initialize+0x28>)
 800fcc0:	781b      	ldrb	r3, [r3, #0]
 800fcc2:	b2db      	uxtb	r3, r3
}
 800fcc4:	4618      	mov	r0, r3
 800fcc6:	3708      	adds	r7, #8
 800fcc8:	46bd      	mov	sp, r7
 800fcca:	bd80      	pop	{r7, pc}
 800fccc:	2400005d 	.word	0x2400005d

0800fcd0 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800fcd0:	b580      	push	{r7, lr}
 800fcd2:	b082      	sub	sp, #8
 800fcd4:	af00      	add	r7, sp, #0
 800fcd6:	4603      	mov	r3, r0
 800fcd8:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800fcda:	79fb      	ldrb	r3, [r7, #7]
 800fcdc:	4618      	mov	r0, r3
 800fcde:	f7ff ffc3 	bl	800fc68 <SD_CheckStatus>
 800fce2:	4603      	mov	r3, r0
}
 800fce4:	4618      	mov	r0, r3
 800fce6:	3708      	adds	r7, #8
 800fce8:	46bd      	mov	sp, r7
 800fcea:	bd80      	pop	{r7, pc}

0800fcec <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800fcec:	b580      	push	{r7, lr}
 800fcee:	b090      	sub	sp, #64	@ 0x40
 800fcf0:	af00      	add	r7, sp, #0
 800fcf2:	60b9      	str	r1, [r7, #8]
 800fcf4:	607a      	str	r2, [r7, #4]
 800fcf6:	603b      	str	r3, [r7, #0]
 800fcf8:	4603      	mov	r3, r0
 800fcfa:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800fcfc:	2301      	movs	r3, #1
 800fcfe:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800fd02:	f247 5030 	movw	r0, #30000	@ 0x7530
 800fd06:	f7ff ff91 	bl	800fc2c <SD_CheckStatusWithTimeout>
 800fd0a:	4603      	mov	r3, r0
 800fd0c:	2b00      	cmp	r3, #0
 800fd0e:	da02      	bge.n	800fd16 <SD_read+0x2a>
  {
    return res;
 800fd10:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800fd14:	e0ea      	b.n	800feec <SD_read+0x200>
  }

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
 800fd16:	68bb      	ldr	r3, [r7, #8]
 800fd18:	f003 0303 	and.w	r3, r3, #3
 800fd1c:	2b00      	cmp	r3, #0
 800fd1e:	d16d      	bne.n	800fdfc <SD_read+0x110>
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 800fd20:	683a      	ldr	r2, [r7, #0]
 800fd22:	6879      	ldr	r1, [r7, #4]
 800fd24:	68b8      	ldr	r0, [r7, #8]
 800fd26:	f7ff ff1b 	bl	800fb60 <BSP_SD_ReadBlocks_DMA>
 800fd2a:	4603      	mov	r3, r0
 800fd2c:	2b00      	cmp	r3, #0
 800fd2e:	f040 80db 	bne.w	800fee8 <SD_read+0x1fc>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 800fd32:	4b70      	ldr	r3, [pc, #448]	@ (800fef4 <SD_read+0x208>)
 800fd34:	2200      	movs	r2, #0
 800fd36:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 800fd38:	f7f6 fca0 	bl	800667c <HAL_GetTick>
 800fd3c:	6378      	str	r0, [r7, #52]	@ 0x34
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800fd3e:	bf00      	nop
 800fd40:	4b6c      	ldr	r3, [pc, #432]	@ (800fef4 <SD_read+0x208>)
 800fd42:	681b      	ldr	r3, [r3, #0]
 800fd44:	2b00      	cmp	r3, #0
 800fd46:	d108      	bne.n	800fd5a <SD_read+0x6e>
 800fd48:	f7f6 fc98 	bl	800667c <HAL_GetTick>
 800fd4c:	4602      	mov	r2, r0
 800fd4e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fd50:	1ad3      	subs	r3, r2, r3
 800fd52:	f247 522f 	movw	r2, #29999	@ 0x752f
 800fd56:	4293      	cmp	r3, r2
 800fd58:	d9f2      	bls.n	800fd40 <SD_read+0x54>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 800fd5a:	4b66      	ldr	r3, [pc, #408]	@ (800fef4 <SD_read+0x208>)
 800fd5c:	681b      	ldr	r3, [r3, #0]
 800fd5e:	2b00      	cmp	r3, #0
 800fd60:	d103      	bne.n	800fd6a <SD_read+0x7e>
      {
        res = RES_ERROR;
 800fd62:	2301      	movs	r3, #1
 800fd64:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800fd68:	e0be      	b.n	800fee8 <SD_read+0x1fc>
      }
      else
      {
        ReadStatus = 0;
 800fd6a:	4b62      	ldr	r3, [pc, #392]	@ (800fef4 <SD_read+0x208>)
 800fd6c:	2200      	movs	r2, #0
 800fd6e:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800fd70:	f7f6 fc84 	bl	800667c <HAL_GetTick>
 800fd74:	6378      	str	r0, [r7, #52]	@ 0x34

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800fd76:	e037      	b.n	800fde8 <SD_read+0xfc>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800fd78:	f7ff ff26 	bl	800fbc8 <BSP_SD_GetCardState>
 800fd7c:	4603      	mov	r3, r0
 800fd7e:	2b00      	cmp	r3, #0
 800fd80:	d132      	bne.n	800fde8 <SD_read+0xfc>
          {
            res = RES_OK;
 800fd82:	2300      	movs	r3, #0
 800fd84:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
            /*
            the SCB_InvalidateDCache_by_Addr() requires a 32-Byte aligned address,
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
 800fd88:	68bb      	ldr	r3, [r7, #8]
 800fd8a:	f023 031f 	bic.w	r3, r3, #31
 800fd8e:	633b      	str	r3, [r7, #48]	@ 0x30
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
 800fd90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fd92:	683a      	ldr	r2, [r7, #0]
 800fd94:	0251      	lsls	r1, r2, #9
 800fd96:	68b8      	ldr	r0, [r7, #8]
 800fd98:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800fd9a:	1a82      	subs	r2, r0, r2
 800fd9c:	440a      	add	r2, r1
 800fd9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800fda0:	62ba      	str	r2, [r7, #40]	@ 0x28
    if ( dsize > 0 ) { 
 800fda2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fda4:	2b00      	cmp	r3, #0
 800fda6:	dd1d      	ble.n	800fde4 <SD_read+0xf8>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 800fda8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fdaa:	f003 021f 	and.w	r2, r3, #31
 800fdae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fdb0:	4413      	add	r3, r2
 800fdb2:	627b      	str	r3, [r7, #36]	@ 0x24
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 800fdb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fdb6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("dsb 0xF":::"memory");
 800fdb8:	f3bf 8f4f 	dsb	sy
}
 800fdbc:	bf00      	nop
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 800fdbe:	4a4e      	ldr	r2, [pc, #312]	@ (800fef8 <SD_read+0x20c>)
 800fdc0:	6a3b      	ldr	r3, [r7, #32]
 800fdc2:	f8c2 325c 	str.w	r3, [r2, #604]	@ 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 800fdc6:	6a3b      	ldr	r3, [r7, #32]
 800fdc8:	3320      	adds	r3, #32
 800fdca:	623b      	str	r3, [r7, #32]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 800fdcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fdce:	3b20      	subs	r3, #32
 800fdd0:	627b      	str	r3, [r7, #36]	@ 0x24
      } while ( op_size > 0 );
 800fdd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fdd4:	2b00      	cmp	r3, #0
 800fdd6:	dcf2      	bgt.n	800fdbe <SD_read+0xd2>
  __ASM volatile ("dsb 0xF":::"memory");
 800fdd8:	f3bf 8f4f 	dsb	sy
}
 800fddc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800fdde:	f3bf 8f6f 	isb	sy
}
 800fde2:	bf00      	nop
}
 800fde4:	bf00      	nop
#endif
            break;
 800fde6:	e07f      	b.n	800fee8 <SD_read+0x1fc>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800fde8:	f7f6 fc48 	bl	800667c <HAL_GetTick>
 800fdec:	4602      	mov	r2, r0
 800fdee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fdf0:	1ad3      	subs	r3, r2, r3
 800fdf2:	f247 522f 	movw	r2, #29999	@ 0x752f
 800fdf6:	4293      	cmp	r3, r2
 800fdf8:	d9be      	bls.n	800fd78 <SD_read+0x8c>
 800fdfa:	e075      	b.n	800fee8 <SD_read+0x1fc>
    else
    {
      /* Slow path, fetch each sector a part and memcpy to destination buffer */
      int i;

      for (i = 0; i < count; i++) {
 800fdfc:	2300      	movs	r3, #0
 800fdfe:	63bb      	str	r3, [r7, #56]	@ 0x38
 800fe00:	e061      	b.n	800fec6 <SD_read+0x1da>
        ret = BSP_SD_ReadBlocks_DMA((uint32_t*)scratch, (uint32_t)sector++, 1);
 800fe02:	687b      	ldr	r3, [r7, #4]
 800fe04:	1c5a      	adds	r2, r3, #1
 800fe06:	607a      	str	r2, [r7, #4]
 800fe08:	2201      	movs	r2, #1
 800fe0a:	4619      	mov	r1, r3
 800fe0c:	483b      	ldr	r0, [pc, #236]	@ (800fefc <SD_read+0x210>)
 800fe0e:	f7ff fea7 	bl	800fb60 <BSP_SD_ReadBlocks_DMA>
 800fe12:	4603      	mov	r3, r0
 800fe14:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
        if (ret == MSD_OK) {
 800fe18:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 800fe1c:	2b00      	cmp	r3, #0
 800fe1e:	d157      	bne.n	800fed0 <SD_read+0x1e4>
          /* wait until the read is successful or a timeout occurs */

          timeout = HAL_GetTick();
 800fe20:	f7f6 fc2c 	bl	800667c <HAL_GetTick>
 800fe24:	6378      	str	r0, [r7, #52]	@ 0x34
          while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800fe26:	bf00      	nop
 800fe28:	4b32      	ldr	r3, [pc, #200]	@ (800fef4 <SD_read+0x208>)
 800fe2a:	681b      	ldr	r3, [r3, #0]
 800fe2c:	2b00      	cmp	r3, #0
 800fe2e:	d108      	bne.n	800fe42 <SD_read+0x156>
 800fe30:	f7f6 fc24 	bl	800667c <HAL_GetTick>
 800fe34:	4602      	mov	r2, r0
 800fe36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fe38:	1ad3      	subs	r3, r2, r3
 800fe3a:	f247 522f 	movw	r2, #29999	@ 0x752f
 800fe3e:	4293      	cmp	r3, r2
 800fe40:	d9f2      	bls.n	800fe28 <SD_read+0x13c>
          {
          }
          if (ReadStatus == 0)
 800fe42:	4b2c      	ldr	r3, [pc, #176]	@ (800fef4 <SD_read+0x208>)
 800fe44:	681b      	ldr	r3, [r3, #0]
 800fe46:	2b00      	cmp	r3, #0
 800fe48:	d103      	bne.n	800fe52 <SD_read+0x166>
          {
            res = RES_ERROR;
 800fe4a:	2301      	movs	r3, #1
 800fe4c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
            break;
 800fe50:	e03f      	b.n	800fed2 <SD_read+0x1e6>
          }
          ReadStatus = 0;
 800fe52:	4b28      	ldr	r3, [pc, #160]	@ (800fef4 <SD_read+0x208>)
 800fe54:	2200      	movs	r2, #0
 800fe56:	601a      	str	r2, [r3, #0]
 800fe58:	4b28      	ldr	r3, [pc, #160]	@ (800fefc <SD_read+0x210>)
 800fe5a:	61fb      	str	r3, [r7, #28]
 800fe5c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800fe60:	61bb      	str	r3, [r7, #24]
    if ( dsize > 0 ) { 
 800fe62:	69bb      	ldr	r3, [r7, #24]
 800fe64:	2b00      	cmp	r3, #0
 800fe66:	dd1d      	ble.n	800fea4 <SD_read+0x1b8>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 800fe68:	69fb      	ldr	r3, [r7, #28]
 800fe6a:	f003 021f 	and.w	r2, r3, #31
 800fe6e:	69bb      	ldr	r3, [r7, #24]
 800fe70:	4413      	add	r3, r2
 800fe72:	617b      	str	r3, [r7, #20]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 800fe74:	69fb      	ldr	r3, [r7, #28]
 800fe76:	613b      	str	r3, [r7, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 800fe78:	f3bf 8f4f 	dsb	sy
}
 800fe7c:	bf00      	nop
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 800fe7e:	4a1e      	ldr	r2, [pc, #120]	@ (800fef8 <SD_read+0x20c>)
 800fe80:	693b      	ldr	r3, [r7, #16]
 800fe82:	f8c2 325c 	str.w	r3, [r2, #604]	@ 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 800fe86:	693b      	ldr	r3, [r7, #16]
 800fe88:	3320      	adds	r3, #32
 800fe8a:	613b      	str	r3, [r7, #16]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 800fe8c:	697b      	ldr	r3, [r7, #20]
 800fe8e:	3b20      	subs	r3, #32
 800fe90:	617b      	str	r3, [r7, #20]
      } while ( op_size > 0 );
 800fe92:	697b      	ldr	r3, [r7, #20]
 800fe94:	2b00      	cmp	r3, #0
 800fe96:	dcf2      	bgt.n	800fe7e <SD_read+0x192>
  __ASM volatile ("dsb 0xF":::"memory");
 800fe98:	f3bf 8f4f 	dsb	sy
}
 800fe9c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800fe9e:	f3bf 8f6f 	isb	sy
}
 800fea2:	bf00      	nop
}
 800fea4:	bf00      	nop
          *
          * invalidate the scratch buffer before the next read to get the actual data instead of the cached one
          */
          SCB_InvalidateDCache_by_Addr((uint32_t*)scratch, BLOCKSIZE);
#endif
          memcpy(buff, scratch, BLOCKSIZE);
 800fea6:	68bb      	ldr	r3, [r7, #8]
 800fea8:	4a14      	ldr	r2, [pc, #80]	@ (800fefc <SD_read+0x210>)
 800feaa:	4618      	mov	r0, r3
 800feac:	4611      	mov	r1, r2
 800feae:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800feb2:	461a      	mov	r2, r3
 800feb4:	f003 f8ff 	bl	80130b6 <memcpy>
          buff += BLOCKSIZE;
 800feb8:	68bb      	ldr	r3, [r7, #8]
 800feba:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800febe:	60bb      	str	r3, [r7, #8]
      for (i = 0; i < count; i++) {
 800fec0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fec2:	3301      	adds	r3, #1
 800fec4:	63bb      	str	r3, [r7, #56]	@ 0x38
 800fec6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fec8:	683a      	ldr	r2, [r7, #0]
 800feca:	429a      	cmp	r2, r3
 800fecc:	d899      	bhi.n	800fe02 <SD_read+0x116>
 800fece:	e000      	b.n	800fed2 <SD_read+0x1e6>
        }
        else
        {
          break;
 800fed0:	bf00      	nop
        }
      }

      if ((i == count) && (ret == MSD_OK))
 800fed2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fed4:	683a      	ldr	r2, [r7, #0]
 800fed6:	429a      	cmp	r2, r3
 800fed8:	d106      	bne.n	800fee8 <SD_read+0x1fc>
 800feda:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 800fede:	2b00      	cmp	r3, #0
 800fee0:	d102      	bne.n	800fee8 <SD_read+0x1fc>
        res = RES_OK;
 800fee2:	2300      	movs	r3, #0
 800fee4:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    }
#endif

  return res;
 800fee8:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 800feec:	4618      	mov	r0, r3
 800feee:	3740      	adds	r7, #64	@ 0x40
 800fef0:	46bd      	mov	sp, r7
 800fef2:	bd80      	pop	{r7, pc}
 800fef4:	24000b84 	.word	0x24000b84
 800fef8:	e000ed00 	.word	0xe000ed00
 800fefc:	24000980 	.word	0x24000980

0800ff00 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800ff00:	b580      	push	{r7, lr}
 800ff02:	b090      	sub	sp, #64	@ 0x40
 800ff04:	af00      	add	r7, sp, #0
 800ff06:	60b9      	str	r1, [r7, #8]
 800ff08:	607a      	str	r2, [r7, #4]
 800ff0a:	603b      	str	r3, [r7, #0]
 800ff0c:	4603      	mov	r3, r0
 800ff0e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800ff10:	2301      	movs	r3, #1
 800ff12:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 800ff16:	4b7b      	ldr	r3, [pc, #492]	@ (8010104 <SD_write+0x204>)
 800ff18:	2200      	movs	r2, #0
 800ff1a:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800ff1c:	f247 5030 	movw	r0, #30000	@ 0x7530
 800ff20:	f7ff fe84 	bl	800fc2c <SD_CheckStatusWithTimeout>
 800ff24:	4603      	mov	r3, r0
 800ff26:	2b00      	cmp	r3, #0
 800ff28:	da02      	bge.n	800ff30 <SD_write+0x30>
  {
    return res;
 800ff2a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800ff2e:	e0e5      	b.n	80100fc <SD_write+0x1fc>
  }

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
 800ff30:	68bb      	ldr	r3, [r7, #8]
 800ff32:	f003 0303 	and.w	r3, r3, #3
 800ff36:	2b00      	cmp	r3, #0
 800ff38:	d16a      	bne.n	8010010 <SD_write+0x110>

    /*
    the SCB_CleanDCache_by_Addr() requires a 32-Byte aligned address
    adjust the address and the D-Cache size to clean accordingly.
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
 800ff3a:	68bb      	ldr	r3, [r7, #8]
 800ff3c:	f023 031f 	bic.w	r3, r3, #31
 800ff40:	633b      	str	r3, [r7, #48]	@ 0x30
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
 800ff42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ff44:	683a      	ldr	r2, [r7, #0]
 800ff46:	0251      	lsls	r1, r2, #9
 800ff48:	68b8      	ldr	r0, [r7, #8]
 800ff4a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ff4c:	1a82      	subs	r2, r0, r2
 800ff4e:	440a      	add	r2, r1
 800ff50:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ff52:	62ba      	str	r2, [r7, #40]	@ 0x28
    if ( dsize > 0 ) { 
 800ff54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ff56:	2b00      	cmp	r3, #0
 800ff58:	dd1d      	ble.n	800ff96 <SD_write+0x96>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 800ff5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ff5c:	f003 021f 	and.w	r2, r3, #31
 800ff60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ff62:	4413      	add	r3, r2
 800ff64:	627b      	str	r3, [r7, #36]	@ 0x24
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 800ff66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ff68:	623b      	str	r3, [r7, #32]
  __ASM volatile ("dsb 0xF":::"memory");
 800ff6a:	f3bf 8f4f 	dsb	sy
}
 800ff6e:	bf00      	nop
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 800ff70:	4a65      	ldr	r2, [pc, #404]	@ (8010108 <SD_write+0x208>)
 800ff72:	6a3b      	ldr	r3, [r7, #32]
 800ff74:	f8c2 3268 	str.w	r3, [r2, #616]	@ 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
 800ff78:	6a3b      	ldr	r3, [r7, #32]
 800ff7a:	3320      	adds	r3, #32
 800ff7c:	623b      	str	r3, [r7, #32]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 800ff7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ff80:	3b20      	subs	r3, #32
 800ff82:	627b      	str	r3, [r7, #36]	@ 0x24
      } while ( op_size > 0 );
 800ff84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ff86:	2b00      	cmp	r3, #0
 800ff88:	dcf2      	bgt.n	800ff70 <SD_write+0x70>
  __ASM volatile ("dsb 0xF":::"memory");
 800ff8a:	f3bf 8f4f 	dsb	sy
}
 800ff8e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800ff90:	f3bf 8f6f 	isb	sy
}
 800ff94:	bf00      	nop
}
 800ff96:	bf00      	nop
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800ff98:	683a      	ldr	r2, [r7, #0]
 800ff9a:	6879      	ldr	r1, [r7, #4]
 800ff9c:	68b8      	ldr	r0, [r7, #8]
 800ff9e:	f7ff fdf9 	bl	800fb94 <BSP_SD_WriteBlocks_DMA>
 800ffa2:	4603      	mov	r3, r0
 800ffa4:	2b00      	cmp	r3, #0
 800ffa6:	f040 80a7 	bne.w	80100f8 <SD_write+0x1f8>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 800ffaa:	f7f6 fb67 	bl	800667c <HAL_GetTick>
 800ffae:	6378      	str	r0, [r7, #52]	@ 0x34
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800ffb0:	bf00      	nop
 800ffb2:	4b54      	ldr	r3, [pc, #336]	@ (8010104 <SD_write+0x204>)
 800ffb4:	681b      	ldr	r3, [r3, #0]
 800ffb6:	2b00      	cmp	r3, #0
 800ffb8:	d108      	bne.n	800ffcc <SD_write+0xcc>
 800ffba:	f7f6 fb5f 	bl	800667c <HAL_GetTick>
 800ffbe:	4602      	mov	r2, r0
 800ffc0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ffc2:	1ad3      	subs	r3, r2, r3
 800ffc4:	f247 522f 	movw	r2, #29999	@ 0x752f
 800ffc8:	4293      	cmp	r3, r2
 800ffca:	d9f2      	bls.n	800ffb2 <SD_write+0xb2>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 800ffcc:	4b4d      	ldr	r3, [pc, #308]	@ (8010104 <SD_write+0x204>)
 800ffce:	681b      	ldr	r3, [r3, #0]
 800ffd0:	2b00      	cmp	r3, #0
 800ffd2:	d103      	bne.n	800ffdc <SD_write+0xdc>
      {
        res = RES_ERROR;
 800ffd4:	2301      	movs	r3, #1
 800ffd6:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800ffda:	e08d      	b.n	80100f8 <SD_write+0x1f8>
      }
      else
      {
        WriteStatus = 0;
 800ffdc:	4b49      	ldr	r3, [pc, #292]	@ (8010104 <SD_write+0x204>)
 800ffde:	2200      	movs	r2, #0
 800ffe0:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800ffe2:	f7f6 fb4b 	bl	800667c <HAL_GetTick>
 800ffe6:	6378      	str	r0, [r7, #52]	@ 0x34

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800ffe8:	e008      	b.n	800fffc <SD_write+0xfc>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800ffea:	f7ff fded 	bl	800fbc8 <BSP_SD_GetCardState>
 800ffee:	4603      	mov	r3, r0
 800fff0:	2b00      	cmp	r3, #0
 800fff2:	d103      	bne.n	800fffc <SD_write+0xfc>
          {
            res = RES_OK;
 800fff4:	2300      	movs	r3, #0
 800fff6:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
            break;
 800fffa:	e07d      	b.n	80100f8 <SD_write+0x1f8>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800fffc:	f7f6 fb3e 	bl	800667c <HAL_GetTick>
 8010000:	4602      	mov	r2, r0
 8010002:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010004:	1ad3      	subs	r3, r2, r3
 8010006:	f247 522f 	movw	r2, #29999	@ 0x752f
 801000a:	4293      	cmp	r3, r2
 801000c:	d9ed      	bls.n	800ffea <SD_write+0xea>
 801000e:	e073      	b.n	80100f8 <SD_write+0x1f8>
 8010010:	4b3e      	ldr	r3, [pc, #248]	@ (801010c <SD_write+0x20c>)
 8010012:	61fb      	str	r3, [r7, #28]
 8010014:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8010018:	61bb      	str	r3, [r7, #24]
    if ( dsize > 0 ) { 
 801001a:	69bb      	ldr	r3, [r7, #24]
 801001c:	2b00      	cmp	r3, #0
 801001e:	dd1d      	ble.n	801005c <SD_write+0x15c>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8010020:	69fb      	ldr	r3, [r7, #28]
 8010022:	f003 021f 	and.w	r2, r3, #31
 8010026:	69bb      	ldr	r3, [r7, #24]
 8010028:	4413      	add	r3, r2
 801002a:	617b      	str	r3, [r7, #20]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 801002c:	69fb      	ldr	r3, [r7, #28]
 801002e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8010030:	f3bf 8f4f 	dsb	sy
}
 8010034:	bf00      	nop
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8010036:	4a34      	ldr	r2, [pc, #208]	@ (8010108 <SD_write+0x208>)
 8010038:	693b      	ldr	r3, [r7, #16]
 801003a:	f8c2 325c 	str.w	r3, [r2, #604]	@ 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 801003e:	693b      	ldr	r3, [r7, #16]
 8010040:	3320      	adds	r3, #32
 8010042:	613b      	str	r3, [r7, #16]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8010044:	697b      	ldr	r3, [r7, #20]
 8010046:	3b20      	subs	r3, #32
 8010048:	617b      	str	r3, [r7, #20]
      } while ( op_size > 0 );
 801004a:	697b      	ldr	r3, [r7, #20]
 801004c:	2b00      	cmp	r3, #0
 801004e:	dcf2      	bgt.n	8010036 <SD_write+0x136>
  __ASM volatile ("dsb 0xF":::"memory");
 8010050:	f3bf 8f4f 	dsb	sy
}
 8010054:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8010056:	f3bf 8f6f 	isb	sy
}
 801005a:	bf00      	nop
}
 801005c:	bf00      	nop
      * invalidate the scratch buffer before the next write to get the actual data instead of the cached one
      */
      SCB_InvalidateDCache_by_Addr((uint32_t*)scratch, BLOCKSIZE);
#endif

      for (i = 0; i < count; i++)
 801005e:	2300      	movs	r3, #0
 8010060:	63bb      	str	r3, [r7, #56]	@ 0x38
 8010062:	e036      	b.n	80100d2 <SD_write+0x1d2>
      {
        WriteStatus = 0;
 8010064:	4b27      	ldr	r3, [pc, #156]	@ (8010104 <SD_write+0x204>)
 8010066:	2200      	movs	r2, #0
 8010068:	601a      	str	r2, [r3, #0]

        memcpy((void *)scratch, (void *)buff, BLOCKSIZE);
 801006a:	4a28      	ldr	r2, [pc, #160]	@ (801010c <SD_write+0x20c>)
 801006c:	68bb      	ldr	r3, [r7, #8]
 801006e:	4610      	mov	r0, r2
 8010070:	4619      	mov	r1, r3
 8010072:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8010076:	461a      	mov	r2, r3
 8010078:	f003 f81d 	bl	80130b6 <memcpy>
        buff += BLOCKSIZE;
 801007c:	68bb      	ldr	r3, [r7, #8]
 801007e:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8010082:	60bb      	str	r3, [r7, #8]

        ret = BSP_SD_WriteBlocks_DMA((uint32_t*)scratch, (uint32_t)sector++, 1);
 8010084:	687b      	ldr	r3, [r7, #4]
 8010086:	1c5a      	adds	r2, r3, #1
 8010088:	607a      	str	r2, [r7, #4]
 801008a:	2201      	movs	r2, #1
 801008c:	4619      	mov	r1, r3
 801008e:	481f      	ldr	r0, [pc, #124]	@ (801010c <SD_write+0x20c>)
 8010090:	f7ff fd80 	bl	800fb94 <BSP_SD_WriteBlocks_DMA>
 8010094:	4603      	mov	r3, r0
 8010096:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
        if (ret == MSD_OK) {
 801009a:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 801009e:	2b00      	cmp	r3, #0
 80100a0:	d11c      	bne.n	80100dc <SD_write+0x1dc>
          /* wait for a message from the queue or a timeout */
          timeout = HAL_GetTick();
 80100a2:	f7f6 faeb 	bl	800667c <HAL_GetTick>
 80100a6:	6378      	str	r0, [r7, #52]	@ 0x34
          while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 80100a8:	bf00      	nop
 80100aa:	4b16      	ldr	r3, [pc, #88]	@ (8010104 <SD_write+0x204>)
 80100ac:	681b      	ldr	r3, [r3, #0]
 80100ae:	2b00      	cmp	r3, #0
 80100b0:	d108      	bne.n	80100c4 <SD_write+0x1c4>
 80100b2:	f7f6 fae3 	bl	800667c <HAL_GetTick>
 80100b6:	4602      	mov	r2, r0
 80100b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80100ba:	1ad3      	subs	r3, r2, r3
 80100bc:	f247 522f 	movw	r2, #29999	@ 0x752f
 80100c0:	4293      	cmp	r3, r2
 80100c2:	d9f2      	bls.n	80100aa <SD_write+0x1aa>
          {
          }
          if (WriteStatus == 0)
 80100c4:	4b0f      	ldr	r3, [pc, #60]	@ (8010104 <SD_write+0x204>)
 80100c6:	681b      	ldr	r3, [r3, #0]
 80100c8:	2b00      	cmp	r3, #0
 80100ca:	d009      	beq.n	80100e0 <SD_write+0x1e0>
      for (i = 0; i < count; i++)
 80100cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80100ce:	3301      	adds	r3, #1
 80100d0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80100d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80100d4:	683a      	ldr	r2, [r7, #0]
 80100d6:	429a      	cmp	r2, r3
 80100d8:	d8c4      	bhi.n	8010064 <SD_write+0x164>
 80100da:	e002      	b.n	80100e2 <SD_write+0x1e2>
          }

        }
        else
        {
          break;
 80100dc:	bf00      	nop
 80100de:	e000      	b.n	80100e2 <SD_write+0x1e2>
            break;
 80100e0:	bf00      	nop
        }
      }
      if ((i == count) && (ret == MSD_OK))
 80100e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80100e4:	683a      	ldr	r2, [r7, #0]
 80100e6:	429a      	cmp	r2, r3
 80100e8:	d106      	bne.n	80100f8 <SD_write+0x1f8>
 80100ea:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 80100ee:	2b00      	cmp	r3, #0
 80100f0:	d102      	bne.n	80100f8 <SD_write+0x1f8>
        res = RES_OK;
 80100f2:	2300      	movs	r3, #0
 80100f4:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    }
#endif
  return res;
 80100f8:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 80100fc:	4618      	mov	r0, r3
 80100fe:	3740      	adds	r7, #64	@ 0x40
 8010100:	46bd      	mov	sp, r7
 8010102:	bd80      	pop	{r7, pc}
 8010104:	24000b80 	.word	0x24000b80
 8010108:	e000ed00 	.word	0xe000ed00
 801010c:	24000980 	.word	0x24000980

08010110 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8010110:	b580      	push	{r7, lr}
 8010112:	b08c      	sub	sp, #48	@ 0x30
 8010114:	af00      	add	r7, sp, #0
 8010116:	4603      	mov	r3, r0
 8010118:	603a      	str	r2, [r7, #0]
 801011a:	71fb      	strb	r3, [r7, #7]
 801011c:	460b      	mov	r3, r1
 801011e:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8010120:	2301      	movs	r3, #1
 8010122:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8010126:	4b25      	ldr	r3, [pc, #148]	@ (80101bc <SD_ioctl+0xac>)
 8010128:	781b      	ldrb	r3, [r3, #0]
 801012a:	b2db      	uxtb	r3, r3
 801012c:	f003 0301 	and.w	r3, r3, #1
 8010130:	2b00      	cmp	r3, #0
 8010132:	d001      	beq.n	8010138 <SD_ioctl+0x28>
 8010134:	2303      	movs	r3, #3
 8010136:	e03c      	b.n	80101b2 <SD_ioctl+0xa2>

  switch (cmd)
 8010138:	79bb      	ldrb	r3, [r7, #6]
 801013a:	2b03      	cmp	r3, #3
 801013c:	d834      	bhi.n	80101a8 <SD_ioctl+0x98>
 801013e:	a201      	add	r2, pc, #4	@ (adr r2, 8010144 <SD_ioctl+0x34>)
 8010140:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010144:	08010155 	.word	0x08010155
 8010148:	0801015d 	.word	0x0801015d
 801014c:	08010175 	.word	0x08010175
 8010150:	0801018f 	.word	0x0801018f
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8010154:	2300      	movs	r3, #0
 8010156:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 801015a:	e028      	b.n	80101ae <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 801015c:	f107 0308 	add.w	r3, r7, #8
 8010160:	4618      	mov	r0, r3
 8010162:	f7ff fd41 	bl	800fbe8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8010166:	6a3a      	ldr	r2, [r7, #32]
 8010168:	683b      	ldr	r3, [r7, #0]
 801016a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 801016c:	2300      	movs	r3, #0
 801016e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8010172:	e01c      	b.n	80101ae <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8010174:	f107 0308 	add.w	r3, r7, #8
 8010178:	4618      	mov	r0, r3
 801017a:	f7ff fd35 	bl	800fbe8 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 801017e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010180:	b29a      	uxth	r2, r3
 8010182:	683b      	ldr	r3, [r7, #0]
 8010184:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8010186:	2300      	movs	r3, #0
 8010188:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 801018c:	e00f      	b.n	80101ae <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 801018e:	f107 0308 	add.w	r3, r7, #8
 8010192:	4618      	mov	r0, r3
 8010194:	f7ff fd28 	bl	800fbe8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8010198:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801019a:	0a5a      	lsrs	r2, r3, #9
 801019c:	683b      	ldr	r3, [r7, #0]
 801019e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80101a0:	2300      	movs	r3, #0
 80101a2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 80101a6:	e002      	b.n	80101ae <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 80101a8:	2304      	movs	r3, #4
 80101aa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 80101ae:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80101b2:	4618      	mov	r0, r3
 80101b4:	3730      	adds	r7, #48	@ 0x30
 80101b6:	46bd      	mov	sp, r7
 80101b8:	bd80      	pop	{r7, pc}
 80101ba:	bf00      	nop
 80101bc:	2400005d 	.word	0x2400005d

080101c0 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 80101c0:	b480      	push	{r7}
 80101c2:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 80101c4:	4b03      	ldr	r3, [pc, #12]	@ (80101d4 <BSP_SD_WriteCpltCallback+0x14>)
 80101c6:	2201      	movs	r2, #1
 80101c8:	601a      	str	r2, [r3, #0]
}
 80101ca:	bf00      	nop
 80101cc:	46bd      	mov	sp, r7
 80101ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101d2:	4770      	bx	lr
 80101d4:	24000b80 	.word	0x24000b80

080101d8 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 80101d8:	b480      	push	{r7}
 80101da:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 80101dc:	4b03      	ldr	r3, [pc, #12]	@ (80101ec <BSP_SD_ReadCpltCallback+0x14>)
 80101de:	2201      	movs	r2, #1
 80101e0:	601a      	str	r2, [r3, #0]
}
 80101e2:	bf00      	nop
 80101e4:	46bd      	mov	sp, r7
 80101e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101ea:	4770      	bx	lr
 80101ec:	24000b84 	.word	0x24000b84

080101f0 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80101f0:	b580      	push	{r7, lr}
 80101f2:	b084      	sub	sp, #16
 80101f4:	af00      	add	r7, sp, #0
 80101f6:	4603      	mov	r3, r0
 80101f8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80101fa:	79fb      	ldrb	r3, [r7, #7]
 80101fc:	4a08      	ldr	r2, [pc, #32]	@ (8010220 <disk_status+0x30>)
 80101fe:	009b      	lsls	r3, r3, #2
 8010200:	4413      	add	r3, r2
 8010202:	685b      	ldr	r3, [r3, #4]
 8010204:	685b      	ldr	r3, [r3, #4]
 8010206:	79fa      	ldrb	r2, [r7, #7]
 8010208:	4905      	ldr	r1, [pc, #20]	@ (8010220 <disk_status+0x30>)
 801020a:	440a      	add	r2, r1
 801020c:	7a12      	ldrb	r2, [r2, #8]
 801020e:	4610      	mov	r0, r2
 8010210:	4798      	blx	r3
 8010212:	4603      	mov	r3, r0
 8010214:	73fb      	strb	r3, [r7, #15]
  return stat;
 8010216:	7bfb      	ldrb	r3, [r7, #15]
}
 8010218:	4618      	mov	r0, r3
 801021a:	3710      	adds	r7, #16
 801021c:	46bd      	mov	sp, r7
 801021e:	bd80      	pop	{r7, pc}
 8010220:	24000bb0 	.word	0x24000bb0

08010224 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8010224:	b580      	push	{r7, lr}
 8010226:	b084      	sub	sp, #16
 8010228:	af00      	add	r7, sp, #0
 801022a:	4603      	mov	r3, r0
 801022c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 801022e:	2300      	movs	r3, #0
 8010230:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8010232:	79fb      	ldrb	r3, [r7, #7]
 8010234:	4a0e      	ldr	r2, [pc, #56]	@ (8010270 <disk_initialize+0x4c>)
 8010236:	5cd3      	ldrb	r3, [r2, r3]
 8010238:	2b00      	cmp	r3, #0
 801023a:	d114      	bne.n	8010266 <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 801023c:	79fb      	ldrb	r3, [r7, #7]
 801023e:	4a0c      	ldr	r2, [pc, #48]	@ (8010270 <disk_initialize+0x4c>)
 8010240:	009b      	lsls	r3, r3, #2
 8010242:	4413      	add	r3, r2
 8010244:	685b      	ldr	r3, [r3, #4]
 8010246:	681b      	ldr	r3, [r3, #0]
 8010248:	79fa      	ldrb	r2, [r7, #7]
 801024a:	4909      	ldr	r1, [pc, #36]	@ (8010270 <disk_initialize+0x4c>)
 801024c:	440a      	add	r2, r1
 801024e:	7a12      	ldrb	r2, [r2, #8]
 8010250:	4610      	mov	r0, r2
 8010252:	4798      	blx	r3
 8010254:	4603      	mov	r3, r0
 8010256:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 8010258:	7bfb      	ldrb	r3, [r7, #15]
 801025a:	2b00      	cmp	r3, #0
 801025c:	d103      	bne.n	8010266 <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 801025e:	79fb      	ldrb	r3, [r7, #7]
 8010260:	4a03      	ldr	r2, [pc, #12]	@ (8010270 <disk_initialize+0x4c>)
 8010262:	2101      	movs	r1, #1
 8010264:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 8010266:	7bfb      	ldrb	r3, [r7, #15]
}
 8010268:	4618      	mov	r0, r3
 801026a:	3710      	adds	r7, #16
 801026c:	46bd      	mov	sp, r7
 801026e:	bd80      	pop	{r7, pc}
 8010270:	24000bb0 	.word	0x24000bb0

08010274 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8010274:	b590      	push	{r4, r7, lr}
 8010276:	b087      	sub	sp, #28
 8010278:	af00      	add	r7, sp, #0
 801027a:	60b9      	str	r1, [r7, #8]
 801027c:	607a      	str	r2, [r7, #4]
 801027e:	603b      	str	r3, [r7, #0]
 8010280:	4603      	mov	r3, r0
 8010282:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8010284:	7bfb      	ldrb	r3, [r7, #15]
 8010286:	4a0a      	ldr	r2, [pc, #40]	@ (80102b0 <disk_read+0x3c>)
 8010288:	009b      	lsls	r3, r3, #2
 801028a:	4413      	add	r3, r2
 801028c:	685b      	ldr	r3, [r3, #4]
 801028e:	689c      	ldr	r4, [r3, #8]
 8010290:	7bfb      	ldrb	r3, [r7, #15]
 8010292:	4a07      	ldr	r2, [pc, #28]	@ (80102b0 <disk_read+0x3c>)
 8010294:	4413      	add	r3, r2
 8010296:	7a18      	ldrb	r0, [r3, #8]
 8010298:	683b      	ldr	r3, [r7, #0]
 801029a:	687a      	ldr	r2, [r7, #4]
 801029c:	68b9      	ldr	r1, [r7, #8]
 801029e:	47a0      	blx	r4
 80102a0:	4603      	mov	r3, r0
 80102a2:	75fb      	strb	r3, [r7, #23]
  return res;
 80102a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80102a6:	4618      	mov	r0, r3
 80102a8:	371c      	adds	r7, #28
 80102aa:	46bd      	mov	sp, r7
 80102ac:	bd90      	pop	{r4, r7, pc}
 80102ae:	bf00      	nop
 80102b0:	24000bb0 	.word	0x24000bb0

080102b4 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80102b4:	b590      	push	{r4, r7, lr}
 80102b6:	b087      	sub	sp, #28
 80102b8:	af00      	add	r7, sp, #0
 80102ba:	60b9      	str	r1, [r7, #8]
 80102bc:	607a      	str	r2, [r7, #4]
 80102be:	603b      	str	r3, [r7, #0]
 80102c0:	4603      	mov	r3, r0
 80102c2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80102c4:	7bfb      	ldrb	r3, [r7, #15]
 80102c6:	4a0a      	ldr	r2, [pc, #40]	@ (80102f0 <disk_write+0x3c>)
 80102c8:	009b      	lsls	r3, r3, #2
 80102ca:	4413      	add	r3, r2
 80102cc:	685b      	ldr	r3, [r3, #4]
 80102ce:	68dc      	ldr	r4, [r3, #12]
 80102d0:	7bfb      	ldrb	r3, [r7, #15]
 80102d2:	4a07      	ldr	r2, [pc, #28]	@ (80102f0 <disk_write+0x3c>)
 80102d4:	4413      	add	r3, r2
 80102d6:	7a18      	ldrb	r0, [r3, #8]
 80102d8:	683b      	ldr	r3, [r7, #0]
 80102da:	687a      	ldr	r2, [r7, #4]
 80102dc:	68b9      	ldr	r1, [r7, #8]
 80102de:	47a0      	blx	r4
 80102e0:	4603      	mov	r3, r0
 80102e2:	75fb      	strb	r3, [r7, #23]
  return res;
 80102e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80102e6:	4618      	mov	r0, r3
 80102e8:	371c      	adds	r7, #28
 80102ea:	46bd      	mov	sp, r7
 80102ec:	bd90      	pop	{r4, r7, pc}
 80102ee:	bf00      	nop
 80102f0:	24000bb0 	.word	0x24000bb0

080102f4 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80102f4:	b580      	push	{r7, lr}
 80102f6:	b084      	sub	sp, #16
 80102f8:	af00      	add	r7, sp, #0
 80102fa:	4603      	mov	r3, r0
 80102fc:	603a      	str	r2, [r7, #0]
 80102fe:	71fb      	strb	r3, [r7, #7]
 8010300:	460b      	mov	r3, r1
 8010302:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8010304:	79fb      	ldrb	r3, [r7, #7]
 8010306:	4a09      	ldr	r2, [pc, #36]	@ (801032c <disk_ioctl+0x38>)
 8010308:	009b      	lsls	r3, r3, #2
 801030a:	4413      	add	r3, r2
 801030c:	685b      	ldr	r3, [r3, #4]
 801030e:	691b      	ldr	r3, [r3, #16]
 8010310:	79fa      	ldrb	r2, [r7, #7]
 8010312:	4906      	ldr	r1, [pc, #24]	@ (801032c <disk_ioctl+0x38>)
 8010314:	440a      	add	r2, r1
 8010316:	7a10      	ldrb	r0, [r2, #8]
 8010318:	79b9      	ldrb	r1, [r7, #6]
 801031a:	683a      	ldr	r2, [r7, #0]
 801031c:	4798      	blx	r3
 801031e:	4603      	mov	r3, r0
 8010320:	73fb      	strb	r3, [r7, #15]
  return res;
 8010322:	7bfb      	ldrb	r3, [r7, #15]
}
 8010324:	4618      	mov	r0, r3
 8010326:	3710      	adds	r7, #16
 8010328:	46bd      	mov	sp, r7
 801032a:	bd80      	pop	{r7, pc}
 801032c:	24000bb0 	.word	0x24000bb0

08010330 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8010330:	b480      	push	{r7}
 8010332:	b085      	sub	sp, #20
 8010334:	af00      	add	r7, sp, #0
 8010336:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8010338:	687b      	ldr	r3, [r7, #4]
 801033a:	3301      	adds	r3, #1
 801033c:	781b      	ldrb	r3, [r3, #0]
 801033e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8010340:	89fb      	ldrh	r3, [r7, #14]
 8010342:	021b      	lsls	r3, r3, #8
 8010344:	b21a      	sxth	r2, r3
 8010346:	687b      	ldr	r3, [r7, #4]
 8010348:	781b      	ldrb	r3, [r3, #0]
 801034a:	b21b      	sxth	r3, r3
 801034c:	4313      	orrs	r3, r2
 801034e:	b21b      	sxth	r3, r3
 8010350:	81fb      	strh	r3, [r7, #14]
	return rv;
 8010352:	89fb      	ldrh	r3, [r7, #14]
}
 8010354:	4618      	mov	r0, r3
 8010356:	3714      	adds	r7, #20
 8010358:	46bd      	mov	sp, r7
 801035a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801035e:	4770      	bx	lr

08010360 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8010360:	b480      	push	{r7}
 8010362:	b085      	sub	sp, #20
 8010364:	af00      	add	r7, sp, #0
 8010366:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8010368:	687b      	ldr	r3, [r7, #4]
 801036a:	3303      	adds	r3, #3
 801036c:	781b      	ldrb	r3, [r3, #0]
 801036e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8010370:	68fb      	ldr	r3, [r7, #12]
 8010372:	021b      	lsls	r3, r3, #8
 8010374:	687a      	ldr	r2, [r7, #4]
 8010376:	3202      	adds	r2, #2
 8010378:	7812      	ldrb	r2, [r2, #0]
 801037a:	4313      	orrs	r3, r2
 801037c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 801037e:	68fb      	ldr	r3, [r7, #12]
 8010380:	021b      	lsls	r3, r3, #8
 8010382:	687a      	ldr	r2, [r7, #4]
 8010384:	3201      	adds	r2, #1
 8010386:	7812      	ldrb	r2, [r2, #0]
 8010388:	4313      	orrs	r3, r2
 801038a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 801038c:	68fb      	ldr	r3, [r7, #12]
 801038e:	021b      	lsls	r3, r3, #8
 8010390:	687a      	ldr	r2, [r7, #4]
 8010392:	7812      	ldrb	r2, [r2, #0]
 8010394:	4313      	orrs	r3, r2
 8010396:	60fb      	str	r3, [r7, #12]
	return rv;
 8010398:	68fb      	ldr	r3, [r7, #12]
}
 801039a:	4618      	mov	r0, r3
 801039c:	3714      	adds	r7, #20
 801039e:	46bd      	mov	sp, r7
 80103a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103a4:	4770      	bx	lr

080103a6 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 80103a6:	b480      	push	{r7}
 80103a8:	b083      	sub	sp, #12
 80103aa:	af00      	add	r7, sp, #0
 80103ac:	6078      	str	r0, [r7, #4]
 80103ae:	460b      	mov	r3, r1
 80103b0:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 80103b2:	687b      	ldr	r3, [r7, #4]
 80103b4:	1c5a      	adds	r2, r3, #1
 80103b6:	607a      	str	r2, [r7, #4]
 80103b8:	887a      	ldrh	r2, [r7, #2]
 80103ba:	b2d2      	uxtb	r2, r2
 80103bc:	701a      	strb	r2, [r3, #0]
 80103be:	887b      	ldrh	r3, [r7, #2]
 80103c0:	0a1b      	lsrs	r3, r3, #8
 80103c2:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 80103c4:	687b      	ldr	r3, [r7, #4]
 80103c6:	1c5a      	adds	r2, r3, #1
 80103c8:	607a      	str	r2, [r7, #4]
 80103ca:	887a      	ldrh	r2, [r7, #2]
 80103cc:	b2d2      	uxtb	r2, r2
 80103ce:	701a      	strb	r2, [r3, #0]
}
 80103d0:	bf00      	nop
 80103d2:	370c      	adds	r7, #12
 80103d4:	46bd      	mov	sp, r7
 80103d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103da:	4770      	bx	lr

080103dc <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 80103dc:	b480      	push	{r7}
 80103de:	b083      	sub	sp, #12
 80103e0:	af00      	add	r7, sp, #0
 80103e2:	6078      	str	r0, [r7, #4]
 80103e4:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80103e6:	687b      	ldr	r3, [r7, #4]
 80103e8:	1c5a      	adds	r2, r3, #1
 80103ea:	607a      	str	r2, [r7, #4]
 80103ec:	683a      	ldr	r2, [r7, #0]
 80103ee:	b2d2      	uxtb	r2, r2
 80103f0:	701a      	strb	r2, [r3, #0]
 80103f2:	683b      	ldr	r3, [r7, #0]
 80103f4:	0a1b      	lsrs	r3, r3, #8
 80103f6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80103f8:	687b      	ldr	r3, [r7, #4]
 80103fa:	1c5a      	adds	r2, r3, #1
 80103fc:	607a      	str	r2, [r7, #4]
 80103fe:	683a      	ldr	r2, [r7, #0]
 8010400:	b2d2      	uxtb	r2, r2
 8010402:	701a      	strb	r2, [r3, #0]
 8010404:	683b      	ldr	r3, [r7, #0]
 8010406:	0a1b      	lsrs	r3, r3, #8
 8010408:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 801040a:	687b      	ldr	r3, [r7, #4]
 801040c:	1c5a      	adds	r2, r3, #1
 801040e:	607a      	str	r2, [r7, #4]
 8010410:	683a      	ldr	r2, [r7, #0]
 8010412:	b2d2      	uxtb	r2, r2
 8010414:	701a      	strb	r2, [r3, #0]
 8010416:	683b      	ldr	r3, [r7, #0]
 8010418:	0a1b      	lsrs	r3, r3, #8
 801041a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 801041c:	687b      	ldr	r3, [r7, #4]
 801041e:	1c5a      	adds	r2, r3, #1
 8010420:	607a      	str	r2, [r7, #4]
 8010422:	683a      	ldr	r2, [r7, #0]
 8010424:	b2d2      	uxtb	r2, r2
 8010426:	701a      	strb	r2, [r3, #0]
}
 8010428:	bf00      	nop
 801042a:	370c      	adds	r7, #12
 801042c:	46bd      	mov	sp, r7
 801042e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010432:	4770      	bx	lr

08010434 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8010434:	b480      	push	{r7}
 8010436:	b087      	sub	sp, #28
 8010438:	af00      	add	r7, sp, #0
 801043a:	60f8      	str	r0, [r7, #12]
 801043c:	60b9      	str	r1, [r7, #8]
 801043e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8010440:	68fb      	ldr	r3, [r7, #12]
 8010442:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8010444:	68bb      	ldr	r3, [r7, #8]
 8010446:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8010448:	687b      	ldr	r3, [r7, #4]
 801044a:	2b00      	cmp	r3, #0
 801044c:	d00d      	beq.n	801046a <mem_cpy+0x36>
		do {
			*d++ = *s++;
 801044e:	693a      	ldr	r2, [r7, #16]
 8010450:	1c53      	adds	r3, r2, #1
 8010452:	613b      	str	r3, [r7, #16]
 8010454:	697b      	ldr	r3, [r7, #20]
 8010456:	1c59      	adds	r1, r3, #1
 8010458:	6179      	str	r1, [r7, #20]
 801045a:	7812      	ldrb	r2, [r2, #0]
 801045c:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 801045e:	687b      	ldr	r3, [r7, #4]
 8010460:	3b01      	subs	r3, #1
 8010462:	607b      	str	r3, [r7, #4]
 8010464:	687b      	ldr	r3, [r7, #4]
 8010466:	2b00      	cmp	r3, #0
 8010468:	d1f1      	bne.n	801044e <mem_cpy+0x1a>
	}
}
 801046a:	bf00      	nop
 801046c:	371c      	adds	r7, #28
 801046e:	46bd      	mov	sp, r7
 8010470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010474:	4770      	bx	lr

08010476 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8010476:	b480      	push	{r7}
 8010478:	b087      	sub	sp, #28
 801047a:	af00      	add	r7, sp, #0
 801047c:	60f8      	str	r0, [r7, #12]
 801047e:	60b9      	str	r1, [r7, #8]
 8010480:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8010482:	68fb      	ldr	r3, [r7, #12]
 8010484:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8010486:	697b      	ldr	r3, [r7, #20]
 8010488:	1c5a      	adds	r2, r3, #1
 801048a:	617a      	str	r2, [r7, #20]
 801048c:	68ba      	ldr	r2, [r7, #8]
 801048e:	b2d2      	uxtb	r2, r2
 8010490:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8010492:	687b      	ldr	r3, [r7, #4]
 8010494:	3b01      	subs	r3, #1
 8010496:	607b      	str	r3, [r7, #4]
 8010498:	687b      	ldr	r3, [r7, #4]
 801049a:	2b00      	cmp	r3, #0
 801049c:	d1f3      	bne.n	8010486 <mem_set+0x10>
}
 801049e:	bf00      	nop
 80104a0:	bf00      	nop
 80104a2:	371c      	adds	r7, #28
 80104a4:	46bd      	mov	sp, r7
 80104a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104aa:	4770      	bx	lr

080104ac <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 80104ac:	b480      	push	{r7}
 80104ae:	b089      	sub	sp, #36	@ 0x24
 80104b0:	af00      	add	r7, sp, #0
 80104b2:	60f8      	str	r0, [r7, #12]
 80104b4:	60b9      	str	r1, [r7, #8]
 80104b6:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80104b8:	68fb      	ldr	r3, [r7, #12]
 80104ba:	61fb      	str	r3, [r7, #28]
 80104bc:	68bb      	ldr	r3, [r7, #8]
 80104be:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80104c0:	2300      	movs	r3, #0
 80104c2:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 80104c4:	69fb      	ldr	r3, [r7, #28]
 80104c6:	1c5a      	adds	r2, r3, #1
 80104c8:	61fa      	str	r2, [r7, #28]
 80104ca:	781b      	ldrb	r3, [r3, #0]
 80104cc:	4619      	mov	r1, r3
 80104ce:	69bb      	ldr	r3, [r7, #24]
 80104d0:	1c5a      	adds	r2, r3, #1
 80104d2:	61ba      	str	r2, [r7, #24]
 80104d4:	781b      	ldrb	r3, [r3, #0]
 80104d6:	1acb      	subs	r3, r1, r3
 80104d8:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 80104da:	687b      	ldr	r3, [r7, #4]
 80104dc:	3b01      	subs	r3, #1
 80104de:	607b      	str	r3, [r7, #4]
 80104e0:	687b      	ldr	r3, [r7, #4]
 80104e2:	2b00      	cmp	r3, #0
 80104e4:	d002      	beq.n	80104ec <mem_cmp+0x40>
 80104e6:	697b      	ldr	r3, [r7, #20]
 80104e8:	2b00      	cmp	r3, #0
 80104ea:	d0eb      	beq.n	80104c4 <mem_cmp+0x18>

	return r;
 80104ec:	697b      	ldr	r3, [r7, #20]
}
 80104ee:	4618      	mov	r0, r3
 80104f0:	3724      	adds	r7, #36	@ 0x24
 80104f2:	46bd      	mov	sp, r7
 80104f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104f8:	4770      	bx	lr

080104fa <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 80104fa:	b480      	push	{r7}
 80104fc:	b083      	sub	sp, #12
 80104fe:	af00      	add	r7, sp, #0
 8010500:	6078      	str	r0, [r7, #4]
 8010502:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8010504:	e002      	b.n	801050c <chk_chr+0x12>
 8010506:	687b      	ldr	r3, [r7, #4]
 8010508:	3301      	adds	r3, #1
 801050a:	607b      	str	r3, [r7, #4]
 801050c:	687b      	ldr	r3, [r7, #4]
 801050e:	781b      	ldrb	r3, [r3, #0]
 8010510:	2b00      	cmp	r3, #0
 8010512:	d005      	beq.n	8010520 <chk_chr+0x26>
 8010514:	687b      	ldr	r3, [r7, #4]
 8010516:	781b      	ldrb	r3, [r3, #0]
 8010518:	461a      	mov	r2, r3
 801051a:	683b      	ldr	r3, [r7, #0]
 801051c:	4293      	cmp	r3, r2
 801051e:	d1f2      	bne.n	8010506 <chk_chr+0xc>
	return *str;
 8010520:	687b      	ldr	r3, [r7, #4]
 8010522:	781b      	ldrb	r3, [r3, #0]
}
 8010524:	4618      	mov	r0, r3
 8010526:	370c      	adds	r7, #12
 8010528:	46bd      	mov	sp, r7
 801052a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801052e:	4770      	bx	lr

08010530 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8010530:	b480      	push	{r7}
 8010532:	b085      	sub	sp, #20
 8010534:	af00      	add	r7, sp, #0
 8010536:	6078      	str	r0, [r7, #4]
 8010538:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 801053a:	2300      	movs	r3, #0
 801053c:	60bb      	str	r3, [r7, #8]
 801053e:	68bb      	ldr	r3, [r7, #8]
 8010540:	60fb      	str	r3, [r7, #12]
 8010542:	e029      	b.n	8010598 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8010544:	4a27      	ldr	r2, [pc, #156]	@ (80105e4 <chk_lock+0xb4>)
 8010546:	68fb      	ldr	r3, [r7, #12]
 8010548:	011b      	lsls	r3, r3, #4
 801054a:	4413      	add	r3, r2
 801054c:	681b      	ldr	r3, [r3, #0]
 801054e:	2b00      	cmp	r3, #0
 8010550:	d01d      	beq.n	801058e <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8010552:	4a24      	ldr	r2, [pc, #144]	@ (80105e4 <chk_lock+0xb4>)
 8010554:	68fb      	ldr	r3, [r7, #12]
 8010556:	011b      	lsls	r3, r3, #4
 8010558:	4413      	add	r3, r2
 801055a:	681a      	ldr	r2, [r3, #0]
 801055c:	687b      	ldr	r3, [r7, #4]
 801055e:	681b      	ldr	r3, [r3, #0]
 8010560:	429a      	cmp	r2, r3
 8010562:	d116      	bne.n	8010592 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8010564:	4a1f      	ldr	r2, [pc, #124]	@ (80105e4 <chk_lock+0xb4>)
 8010566:	68fb      	ldr	r3, [r7, #12]
 8010568:	011b      	lsls	r3, r3, #4
 801056a:	4413      	add	r3, r2
 801056c:	3304      	adds	r3, #4
 801056e:	681a      	ldr	r2, [r3, #0]
 8010570:	687b      	ldr	r3, [r7, #4]
 8010572:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8010574:	429a      	cmp	r2, r3
 8010576:	d10c      	bne.n	8010592 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8010578:	4a1a      	ldr	r2, [pc, #104]	@ (80105e4 <chk_lock+0xb4>)
 801057a:	68fb      	ldr	r3, [r7, #12]
 801057c:	011b      	lsls	r3, r3, #4
 801057e:	4413      	add	r3, r2
 8010580:	3308      	adds	r3, #8
 8010582:	681a      	ldr	r2, [r3, #0]
 8010584:	687b      	ldr	r3, [r7, #4]
 8010586:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8010588:	429a      	cmp	r2, r3
 801058a:	d102      	bne.n	8010592 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 801058c:	e007      	b.n	801059e <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 801058e:	2301      	movs	r3, #1
 8010590:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8010592:	68fb      	ldr	r3, [r7, #12]
 8010594:	3301      	adds	r3, #1
 8010596:	60fb      	str	r3, [r7, #12]
 8010598:	68fb      	ldr	r3, [r7, #12]
 801059a:	2b01      	cmp	r3, #1
 801059c:	d9d2      	bls.n	8010544 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 801059e:	68fb      	ldr	r3, [r7, #12]
 80105a0:	2b02      	cmp	r3, #2
 80105a2:	d109      	bne.n	80105b8 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80105a4:	68bb      	ldr	r3, [r7, #8]
 80105a6:	2b00      	cmp	r3, #0
 80105a8:	d102      	bne.n	80105b0 <chk_lock+0x80>
 80105aa:	683b      	ldr	r3, [r7, #0]
 80105ac:	2b02      	cmp	r3, #2
 80105ae:	d101      	bne.n	80105b4 <chk_lock+0x84>
 80105b0:	2300      	movs	r3, #0
 80105b2:	e010      	b.n	80105d6 <chk_lock+0xa6>
 80105b4:	2312      	movs	r3, #18
 80105b6:	e00e      	b.n	80105d6 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80105b8:	683b      	ldr	r3, [r7, #0]
 80105ba:	2b00      	cmp	r3, #0
 80105bc:	d108      	bne.n	80105d0 <chk_lock+0xa0>
 80105be:	4a09      	ldr	r2, [pc, #36]	@ (80105e4 <chk_lock+0xb4>)
 80105c0:	68fb      	ldr	r3, [r7, #12]
 80105c2:	011b      	lsls	r3, r3, #4
 80105c4:	4413      	add	r3, r2
 80105c6:	330c      	adds	r3, #12
 80105c8:	881b      	ldrh	r3, [r3, #0]
 80105ca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80105ce:	d101      	bne.n	80105d4 <chk_lock+0xa4>
 80105d0:	2310      	movs	r3, #16
 80105d2:	e000      	b.n	80105d6 <chk_lock+0xa6>
 80105d4:	2300      	movs	r3, #0
}
 80105d6:	4618      	mov	r0, r3
 80105d8:	3714      	adds	r7, #20
 80105da:	46bd      	mov	sp, r7
 80105dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105e0:	4770      	bx	lr
 80105e2:	bf00      	nop
 80105e4:	24000b90 	.word	0x24000b90

080105e8 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80105e8:	b480      	push	{r7}
 80105ea:	b083      	sub	sp, #12
 80105ec:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80105ee:	2300      	movs	r3, #0
 80105f0:	607b      	str	r3, [r7, #4]
 80105f2:	e002      	b.n	80105fa <enq_lock+0x12>
 80105f4:	687b      	ldr	r3, [r7, #4]
 80105f6:	3301      	adds	r3, #1
 80105f8:	607b      	str	r3, [r7, #4]
 80105fa:	687b      	ldr	r3, [r7, #4]
 80105fc:	2b01      	cmp	r3, #1
 80105fe:	d806      	bhi.n	801060e <enq_lock+0x26>
 8010600:	4a09      	ldr	r2, [pc, #36]	@ (8010628 <enq_lock+0x40>)
 8010602:	687b      	ldr	r3, [r7, #4]
 8010604:	011b      	lsls	r3, r3, #4
 8010606:	4413      	add	r3, r2
 8010608:	681b      	ldr	r3, [r3, #0]
 801060a:	2b00      	cmp	r3, #0
 801060c:	d1f2      	bne.n	80105f4 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 801060e:	687b      	ldr	r3, [r7, #4]
 8010610:	2b02      	cmp	r3, #2
 8010612:	bf14      	ite	ne
 8010614:	2301      	movne	r3, #1
 8010616:	2300      	moveq	r3, #0
 8010618:	b2db      	uxtb	r3, r3
}
 801061a:	4618      	mov	r0, r3
 801061c:	370c      	adds	r7, #12
 801061e:	46bd      	mov	sp, r7
 8010620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010624:	4770      	bx	lr
 8010626:	bf00      	nop
 8010628:	24000b90 	.word	0x24000b90

0801062c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 801062c:	b480      	push	{r7}
 801062e:	b085      	sub	sp, #20
 8010630:	af00      	add	r7, sp, #0
 8010632:	6078      	str	r0, [r7, #4]
 8010634:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8010636:	2300      	movs	r3, #0
 8010638:	60fb      	str	r3, [r7, #12]
 801063a:	e01f      	b.n	801067c <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 801063c:	4a41      	ldr	r2, [pc, #260]	@ (8010744 <inc_lock+0x118>)
 801063e:	68fb      	ldr	r3, [r7, #12]
 8010640:	011b      	lsls	r3, r3, #4
 8010642:	4413      	add	r3, r2
 8010644:	681a      	ldr	r2, [r3, #0]
 8010646:	687b      	ldr	r3, [r7, #4]
 8010648:	681b      	ldr	r3, [r3, #0]
 801064a:	429a      	cmp	r2, r3
 801064c:	d113      	bne.n	8010676 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 801064e:	4a3d      	ldr	r2, [pc, #244]	@ (8010744 <inc_lock+0x118>)
 8010650:	68fb      	ldr	r3, [r7, #12]
 8010652:	011b      	lsls	r3, r3, #4
 8010654:	4413      	add	r3, r2
 8010656:	3304      	adds	r3, #4
 8010658:	681a      	ldr	r2, [r3, #0]
 801065a:	687b      	ldr	r3, [r7, #4]
 801065c:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 801065e:	429a      	cmp	r2, r3
 8010660:	d109      	bne.n	8010676 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8010662:	4a38      	ldr	r2, [pc, #224]	@ (8010744 <inc_lock+0x118>)
 8010664:	68fb      	ldr	r3, [r7, #12]
 8010666:	011b      	lsls	r3, r3, #4
 8010668:	4413      	add	r3, r2
 801066a:	3308      	adds	r3, #8
 801066c:	681a      	ldr	r2, [r3, #0]
 801066e:	687b      	ldr	r3, [r7, #4]
 8010670:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8010672:	429a      	cmp	r2, r3
 8010674:	d006      	beq.n	8010684 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8010676:	68fb      	ldr	r3, [r7, #12]
 8010678:	3301      	adds	r3, #1
 801067a:	60fb      	str	r3, [r7, #12]
 801067c:	68fb      	ldr	r3, [r7, #12]
 801067e:	2b01      	cmp	r3, #1
 8010680:	d9dc      	bls.n	801063c <inc_lock+0x10>
 8010682:	e000      	b.n	8010686 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8010684:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8010686:	68fb      	ldr	r3, [r7, #12]
 8010688:	2b02      	cmp	r3, #2
 801068a:	d132      	bne.n	80106f2 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 801068c:	2300      	movs	r3, #0
 801068e:	60fb      	str	r3, [r7, #12]
 8010690:	e002      	b.n	8010698 <inc_lock+0x6c>
 8010692:	68fb      	ldr	r3, [r7, #12]
 8010694:	3301      	adds	r3, #1
 8010696:	60fb      	str	r3, [r7, #12]
 8010698:	68fb      	ldr	r3, [r7, #12]
 801069a:	2b01      	cmp	r3, #1
 801069c:	d806      	bhi.n	80106ac <inc_lock+0x80>
 801069e:	4a29      	ldr	r2, [pc, #164]	@ (8010744 <inc_lock+0x118>)
 80106a0:	68fb      	ldr	r3, [r7, #12]
 80106a2:	011b      	lsls	r3, r3, #4
 80106a4:	4413      	add	r3, r2
 80106a6:	681b      	ldr	r3, [r3, #0]
 80106a8:	2b00      	cmp	r3, #0
 80106aa:	d1f2      	bne.n	8010692 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80106ac:	68fb      	ldr	r3, [r7, #12]
 80106ae:	2b02      	cmp	r3, #2
 80106b0:	d101      	bne.n	80106b6 <inc_lock+0x8a>
 80106b2:	2300      	movs	r3, #0
 80106b4:	e040      	b.n	8010738 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 80106b6:	687b      	ldr	r3, [r7, #4]
 80106b8:	681a      	ldr	r2, [r3, #0]
 80106ba:	4922      	ldr	r1, [pc, #136]	@ (8010744 <inc_lock+0x118>)
 80106bc:	68fb      	ldr	r3, [r7, #12]
 80106be:	011b      	lsls	r3, r3, #4
 80106c0:	440b      	add	r3, r1
 80106c2:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 80106c4:	687b      	ldr	r3, [r7, #4]
 80106c6:	689a      	ldr	r2, [r3, #8]
 80106c8:	491e      	ldr	r1, [pc, #120]	@ (8010744 <inc_lock+0x118>)
 80106ca:	68fb      	ldr	r3, [r7, #12]
 80106cc:	011b      	lsls	r3, r3, #4
 80106ce:	440b      	add	r3, r1
 80106d0:	3304      	adds	r3, #4
 80106d2:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 80106d4:	687b      	ldr	r3, [r7, #4]
 80106d6:	695a      	ldr	r2, [r3, #20]
 80106d8:	491a      	ldr	r1, [pc, #104]	@ (8010744 <inc_lock+0x118>)
 80106da:	68fb      	ldr	r3, [r7, #12]
 80106dc:	011b      	lsls	r3, r3, #4
 80106de:	440b      	add	r3, r1
 80106e0:	3308      	adds	r3, #8
 80106e2:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 80106e4:	4a17      	ldr	r2, [pc, #92]	@ (8010744 <inc_lock+0x118>)
 80106e6:	68fb      	ldr	r3, [r7, #12]
 80106e8:	011b      	lsls	r3, r3, #4
 80106ea:	4413      	add	r3, r2
 80106ec:	330c      	adds	r3, #12
 80106ee:	2200      	movs	r2, #0
 80106f0:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80106f2:	683b      	ldr	r3, [r7, #0]
 80106f4:	2b00      	cmp	r3, #0
 80106f6:	d009      	beq.n	801070c <inc_lock+0xe0>
 80106f8:	4a12      	ldr	r2, [pc, #72]	@ (8010744 <inc_lock+0x118>)
 80106fa:	68fb      	ldr	r3, [r7, #12]
 80106fc:	011b      	lsls	r3, r3, #4
 80106fe:	4413      	add	r3, r2
 8010700:	330c      	adds	r3, #12
 8010702:	881b      	ldrh	r3, [r3, #0]
 8010704:	2b00      	cmp	r3, #0
 8010706:	d001      	beq.n	801070c <inc_lock+0xe0>
 8010708:	2300      	movs	r3, #0
 801070a:	e015      	b.n	8010738 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 801070c:	683b      	ldr	r3, [r7, #0]
 801070e:	2b00      	cmp	r3, #0
 8010710:	d108      	bne.n	8010724 <inc_lock+0xf8>
 8010712:	4a0c      	ldr	r2, [pc, #48]	@ (8010744 <inc_lock+0x118>)
 8010714:	68fb      	ldr	r3, [r7, #12]
 8010716:	011b      	lsls	r3, r3, #4
 8010718:	4413      	add	r3, r2
 801071a:	330c      	adds	r3, #12
 801071c:	881b      	ldrh	r3, [r3, #0]
 801071e:	3301      	adds	r3, #1
 8010720:	b29a      	uxth	r2, r3
 8010722:	e001      	b.n	8010728 <inc_lock+0xfc>
 8010724:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8010728:	4906      	ldr	r1, [pc, #24]	@ (8010744 <inc_lock+0x118>)
 801072a:	68fb      	ldr	r3, [r7, #12]
 801072c:	011b      	lsls	r3, r3, #4
 801072e:	440b      	add	r3, r1
 8010730:	330c      	adds	r3, #12
 8010732:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8010734:	68fb      	ldr	r3, [r7, #12]
 8010736:	3301      	adds	r3, #1
}
 8010738:	4618      	mov	r0, r3
 801073a:	3714      	adds	r7, #20
 801073c:	46bd      	mov	sp, r7
 801073e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010742:	4770      	bx	lr
 8010744:	24000b90 	.word	0x24000b90

08010748 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8010748:	b480      	push	{r7}
 801074a:	b085      	sub	sp, #20
 801074c:	af00      	add	r7, sp, #0
 801074e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8010750:	687b      	ldr	r3, [r7, #4]
 8010752:	3b01      	subs	r3, #1
 8010754:	607b      	str	r3, [r7, #4]
 8010756:	687b      	ldr	r3, [r7, #4]
 8010758:	2b01      	cmp	r3, #1
 801075a:	d825      	bhi.n	80107a8 <dec_lock+0x60>
		n = Files[i].ctr;
 801075c:	4a17      	ldr	r2, [pc, #92]	@ (80107bc <dec_lock+0x74>)
 801075e:	687b      	ldr	r3, [r7, #4]
 8010760:	011b      	lsls	r3, r3, #4
 8010762:	4413      	add	r3, r2
 8010764:	330c      	adds	r3, #12
 8010766:	881b      	ldrh	r3, [r3, #0]
 8010768:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 801076a:	89fb      	ldrh	r3, [r7, #14]
 801076c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8010770:	d101      	bne.n	8010776 <dec_lock+0x2e>
 8010772:	2300      	movs	r3, #0
 8010774:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8010776:	89fb      	ldrh	r3, [r7, #14]
 8010778:	2b00      	cmp	r3, #0
 801077a:	d002      	beq.n	8010782 <dec_lock+0x3a>
 801077c:	89fb      	ldrh	r3, [r7, #14]
 801077e:	3b01      	subs	r3, #1
 8010780:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8010782:	4a0e      	ldr	r2, [pc, #56]	@ (80107bc <dec_lock+0x74>)
 8010784:	687b      	ldr	r3, [r7, #4]
 8010786:	011b      	lsls	r3, r3, #4
 8010788:	4413      	add	r3, r2
 801078a:	330c      	adds	r3, #12
 801078c:	89fa      	ldrh	r2, [r7, #14]
 801078e:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8010790:	89fb      	ldrh	r3, [r7, #14]
 8010792:	2b00      	cmp	r3, #0
 8010794:	d105      	bne.n	80107a2 <dec_lock+0x5a>
 8010796:	4a09      	ldr	r2, [pc, #36]	@ (80107bc <dec_lock+0x74>)
 8010798:	687b      	ldr	r3, [r7, #4]
 801079a:	011b      	lsls	r3, r3, #4
 801079c:	4413      	add	r3, r2
 801079e:	2200      	movs	r2, #0
 80107a0:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80107a2:	2300      	movs	r3, #0
 80107a4:	737b      	strb	r3, [r7, #13]
 80107a6:	e001      	b.n	80107ac <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80107a8:	2302      	movs	r3, #2
 80107aa:	737b      	strb	r3, [r7, #13]
	}
	return res;
 80107ac:	7b7b      	ldrb	r3, [r7, #13]
}
 80107ae:	4618      	mov	r0, r3
 80107b0:	3714      	adds	r7, #20
 80107b2:	46bd      	mov	sp, r7
 80107b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107b8:	4770      	bx	lr
 80107ba:	bf00      	nop
 80107bc:	24000b90 	.word	0x24000b90

080107c0 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80107c0:	b480      	push	{r7}
 80107c2:	b085      	sub	sp, #20
 80107c4:	af00      	add	r7, sp, #0
 80107c6:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80107c8:	2300      	movs	r3, #0
 80107ca:	60fb      	str	r3, [r7, #12]
 80107cc:	e010      	b.n	80107f0 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80107ce:	4a0d      	ldr	r2, [pc, #52]	@ (8010804 <clear_lock+0x44>)
 80107d0:	68fb      	ldr	r3, [r7, #12]
 80107d2:	011b      	lsls	r3, r3, #4
 80107d4:	4413      	add	r3, r2
 80107d6:	681b      	ldr	r3, [r3, #0]
 80107d8:	687a      	ldr	r2, [r7, #4]
 80107da:	429a      	cmp	r2, r3
 80107dc:	d105      	bne.n	80107ea <clear_lock+0x2a>
 80107de:	4a09      	ldr	r2, [pc, #36]	@ (8010804 <clear_lock+0x44>)
 80107e0:	68fb      	ldr	r3, [r7, #12]
 80107e2:	011b      	lsls	r3, r3, #4
 80107e4:	4413      	add	r3, r2
 80107e6:	2200      	movs	r2, #0
 80107e8:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80107ea:	68fb      	ldr	r3, [r7, #12]
 80107ec:	3301      	adds	r3, #1
 80107ee:	60fb      	str	r3, [r7, #12]
 80107f0:	68fb      	ldr	r3, [r7, #12]
 80107f2:	2b01      	cmp	r3, #1
 80107f4:	d9eb      	bls.n	80107ce <clear_lock+0xe>
	}
}
 80107f6:	bf00      	nop
 80107f8:	bf00      	nop
 80107fa:	3714      	adds	r7, #20
 80107fc:	46bd      	mov	sp, r7
 80107fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010802:	4770      	bx	lr
 8010804:	24000b90 	.word	0x24000b90

08010808 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8010808:	b580      	push	{r7, lr}
 801080a:	b086      	sub	sp, #24
 801080c:	af00      	add	r7, sp, #0
 801080e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8010810:	2300      	movs	r3, #0
 8010812:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8010814:	687b      	ldr	r3, [r7, #4]
 8010816:	78db      	ldrb	r3, [r3, #3]
 8010818:	2b00      	cmp	r3, #0
 801081a:	d034      	beq.n	8010886 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 801081c:	687b      	ldr	r3, [r7, #4]
 801081e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010820:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8010822:	687b      	ldr	r3, [r7, #4]
 8010824:	7858      	ldrb	r0, [r3, #1]
 8010826:	687b      	ldr	r3, [r7, #4]
 8010828:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801082c:	2301      	movs	r3, #1
 801082e:	697a      	ldr	r2, [r7, #20]
 8010830:	f7ff fd40 	bl	80102b4 <disk_write>
 8010834:	4603      	mov	r3, r0
 8010836:	2b00      	cmp	r3, #0
 8010838:	d002      	beq.n	8010840 <sync_window+0x38>
			res = FR_DISK_ERR;
 801083a:	2301      	movs	r3, #1
 801083c:	73fb      	strb	r3, [r7, #15]
 801083e:	e022      	b.n	8010886 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8010840:	687b      	ldr	r3, [r7, #4]
 8010842:	2200      	movs	r2, #0
 8010844:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8010846:	687b      	ldr	r3, [r7, #4]
 8010848:	6a1b      	ldr	r3, [r3, #32]
 801084a:	697a      	ldr	r2, [r7, #20]
 801084c:	1ad2      	subs	r2, r2, r3
 801084e:	687b      	ldr	r3, [r7, #4]
 8010850:	699b      	ldr	r3, [r3, #24]
 8010852:	429a      	cmp	r2, r3
 8010854:	d217      	bcs.n	8010886 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8010856:	687b      	ldr	r3, [r7, #4]
 8010858:	789b      	ldrb	r3, [r3, #2]
 801085a:	613b      	str	r3, [r7, #16]
 801085c:	e010      	b.n	8010880 <sync_window+0x78>
					wsect += fs->fsize;
 801085e:	687b      	ldr	r3, [r7, #4]
 8010860:	699b      	ldr	r3, [r3, #24]
 8010862:	697a      	ldr	r2, [r7, #20]
 8010864:	4413      	add	r3, r2
 8010866:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8010868:	687b      	ldr	r3, [r7, #4]
 801086a:	7858      	ldrb	r0, [r3, #1]
 801086c:	687b      	ldr	r3, [r7, #4]
 801086e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8010872:	2301      	movs	r3, #1
 8010874:	697a      	ldr	r2, [r7, #20]
 8010876:	f7ff fd1d 	bl	80102b4 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801087a:	693b      	ldr	r3, [r7, #16]
 801087c:	3b01      	subs	r3, #1
 801087e:	613b      	str	r3, [r7, #16]
 8010880:	693b      	ldr	r3, [r7, #16]
 8010882:	2b01      	cmp	r3, #1
 8010884:	d8eb      	bhi.n	801085e <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8010886:	7bfb      	ldrb	r3, [r7, #15]
}
 8010888:	4618      	mov	r0, r3
 801088a:	3718      	adds	r7, #24
 801088c:	46bd      	mov	sp, r7
 801088e:	bd80      	pop	{r7, pc}

08010890 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8010890:	b580      	push	{r7, lr}
 8010892:	b084      	sub	sp, #16
 8010894:	af00      	add	r7, sp, #0
 8010896:	6078      	str	r0, [r7, #4]
 8010898:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 801089a:	2300      	movs	r3, #0
 801089c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 801089e:	687b      	ldr	r3, [r7, #4]
 80108a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80108a2:	683a      	ldr	r2, [r7, #0]
 80108a4:	429a      	cmp	r2, r3
 80108a6:	d01b      	beq.n	80108e0 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80108a8:	6878      	ldr	r0, [r7, #4]
 80108aa:	f7ff ffad 	bl	8010808 <sync_window>
 80108ae:	4603      	mov	r3, r0
 80108b0:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80108b2:	7bfb      	ldrb	r3, [r7, #15]
 80108b4:	2b00      	cmp	r3, #0
 80108b6:	d113      	bne.n	80108e0 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80108b8:	687b      	ldr	r3, [r7, #4]
 80108ba:	7858      	ldrb	r0, [r3, #1]
 80108bc:	687b      	ldr	r3, [r7, #4]
 80108be:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80108c2:	2301      	movs	r3, #1
 80108c4:	683a      	ldr	r2, [r7, #0]
 80108c6:	f7ff fcd5 	bl	8010274 <disk_read>
 80108ca:	4603      	mov	r3, r0
 80108cc:	2b00      	cmp	r3, #0
 80108ce:	d004      	beq.n	80108da <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80108d0:	f04f 33ff 	mov.w	r3, #4294967295
 80108d4:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80108d6:	2301      	movs	r3, #1
 80108d8:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80108da:	687b      	ldr	r3, [r7, #4]
 80108dc:	683a      	ldr	r2, [r7, #0]
 80108de:	62da      	str	r2, [r3, #44]	@ 0x2c
		}
	}
	return res;
 80108e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80108e2:	4618      	mov	r0, r3
 80108e4:	3710      	adds	r7, #16
 80108e6:	46bd      	mov	sp, r7
 80108e8:	bd80      	pop	{r7, pc}
	...

080108ec <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 80108ec:	b580      	push	{r7, lr}
 80108ee:	b084      	sub	sp, #16
 80108f0:	af00      	add	r7, sp, #0
 80108f2:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80108f4:	6878      	ldr	r0, [r7, #4]
 80108f6:	f7ff ff87 	bl	8010808 <sync_window>
 80108fa:	4603      	mov	r3, r0
 80108fc:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80108fe:	7bfb      	ldrb	r3, [r7, #15]
 8010900:	2b00      	cmp	r3, #0
 8010902:	d158      	bne.n	80109b6 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8010904:	687b      	ldr	r3, [r7, #4]
 8010906:	781b      	ldrb	r3, [r3, #0]
 8010908:	2b03      	cmp	r3, #3
 801090a:	d148      	bne.n	801099e <sync_fs+0xb2>
 801090c:	687b      	ldr	r3, [r7, #4]
 801090e:	791b      	ldrb	r3, [r3, #4]
 8010910:	2b01      	cmp	r3, #1
 8010912:	d144      	bne.n	801099e <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8010914:	687b      	ldr	r3, [r7, #4]
 8010916:	3330      	adds	r3, #48	@ 0x30
 8010918:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801091c:	2100      	movs	r1, #0
 801091e:	4618      	mov	r0, r3
 8010920:	f7ff fda9 	bl	8010476 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8010924:	687b      	ldr	r3, [r7, #4]
 8010926:	3330      	adds	r3, #48	@ 0x30
 8010928:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 801092c:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 8010930:	4618      	mov	r0, r3
 8010932:	f7ff fd38 	bl	80103a6 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8010936:	687b      	ldr	r3, [r7, #4]
 8010938:	3330      	adds	r3, #48	@ 0x30
 801093a:	4921      	ldr	r1, [pc, #132]	@ (80109c0 <sync_fs+0xd4>)
 801093c:	4618      	mov	r0, r3
 801093e:	f7ff fd4d 	bl	80103dc <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8010942:	687b      	ldr	r3, [r7, #4]
 8010944:	3330      	adds	r3, #48	@ 0x30
 8010946:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 801094a:	491e      	ldr	r1, [pc, #120]	@ (80109c4 <sync_fs+0xd8>)
 801094c:	4618      	mov	r0, r3
 801094e:	f7ff fd45 	bl	80103dc <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8010952:	687b      	ldr	r3, [r7, #4]
 8010954:	3330      	adds	r3, #48	@ 0x30
 8010956:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 801095a:	687b      	ldr	r3, [r7, #4]
 801095c:	691b      	ldr	r3, [r3, #16]
 801095e:	4619      	mov	r1, r3
 8010960:	4610      	mov	r0, r2
 8010962:	f7ff fd3b 	bl	80103dc <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8010966:	687b      	ldr	r3, [r7, #4]
 8010968:	3330      	adds	r3, #48	@ 0x30
 801096a:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 801096e:	687b      	ldr	r3, [r7, #4]
 8010970:	68db      	ldr	r3, [r3, #12]
 8010972:	4619      	mov	r1, r3
 8010974:	4610      	mov	r0, r2
 8010976:	f7ff fd31 	bl	80103dc <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 801097a:	687b      	ldr	r3, [r7, #4]
 801097c:	69db      	ldr	r3, [r3, #28]
 801097e:	1c5a      	adds	r2, r3, #1
 8010980:	687b      	ldr	r3, [r7, #4]
 8010982:	62da      	str	r2, [r3, #44]	@ 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8010984:	687b      	ldr	r3, [r7, #4]
 8010986:	7858      	ldrb	r0, [r3, #1]
 8010988:	687b      	ldr	r3, [r7, #4]
 801098a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801098e:	687b      	ldr	r3, [r7, #4]
 8010990:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010992:	2301      	movs	r3, #1
 8010994:	f7ff fc8e 	bl	80102b4 <disk_write>
			fs->fsi_flag = 0;
 8010998:	687b      	ldr	r3, [r7, #4]
 801099a:	2200      	movs	r2, #0
 801099c:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 801099e:	687b      	ldr	r3, [r7, #4]
 80109a0:	785b      	ldrb	r3, [r3, #1]
 80109a2:	2200      	movs	r2, #0
 80109a4:	2100      	movs	r1, #0
 80109a6:	4618      	mov	r0, r3
 80109a8:	f7ff fca4 	bl	80102f4 <disk_ioctl>
 80109ac:	4603      	mov	r3, r0
 80109ae:	2b00      	cmp	r3, #0
 80109b0:	d001      	beq.n	80109b6 <sync_fs+0xca>
 80109b2:	2301      	movs	r3, #1
 80109b4:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80109b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80109b8:	4618      	mov	r0, r3
 80109ba:	3710      	adds	r7, #16
 80109bc:	46bd      	mov	sp, r7
 80109be:	bd80      	pop	{r7, pc}
 80109c0:	41615252 	.word	0x41615252
 80109c4:	61417272 	.word	0x61417272

080109c8 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80109c8:	b480      	push	{r7}
 80109ca:	b083      	sub	sp, #12
 80109cc:	af00      	add	r7, sp, #0
 80109ce:	6078      	str	r0, [r7, #4]
 80109d0:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80109d2:	683b      	ldr	r3, [r7, #0]
 80109d4:	3b02      	subs	r3, #2
 80109d6:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80109d8:	687b      	ldr	r3, [r7, #4]
 80109da:	695b      	ldr	r3, [r3, #20]
 80109dc:	3b02      	subs	r3, #2
 80109de:	683a      	ldr	r2, [r7, #0]
 80109e0:	429a      	cmp	r2, r3
 80109e2:	d301      	bcc.n	80109e8 <clust2sect+0x20>
 80109e4:	2300      	movs	r3, #0
 80109e6:	e008      	b.n	80109fa <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 80109e8:	687b      	ldr	r3, [r7, #4]
 80109ea:	895b      	ldrh	r3, [r3, #10]
 80109ec:	461a      	mov	r2, r3
 80109ee:	683b      	ldr	r3, [r7, #0]
 80109f0:	fb03 f202 	mul.w	r2, r3, r2
 80109f4:	687b      	ldr	r3, [r7, #4]
 80109f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80109f8:	4413      	add	r3, r2
}
 80109fa:	4618      	mov	r0, r3
 80109fc:	370c      	adds	r7, #12
 80109fe:	46bd      	mov	sp, r7
 8010a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a04:	4770      	bx	lr

08010a06 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8010a06:	b580      	push	{r7, lr}
 8010a08:	b086      	sub	sp, #24
 8010a0a:	af00      	add	r7, sp, #0
 8010a0c:	6078      	str	r0, [r7, #4]
 8010a0e:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8010a10:	687b      	ldr	r3, [r7, #4]
 8010a12:	681b      	ldr	r3, [r3, #0]
 8010a14:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8010a16:	683b      	ldr	r3, [r7, #0]
 8010a18:	2b01      	cmp	r3, #1
 8010a1a:	d904      	bls.n	8010a26 <get_fat+0x20>
 8010a1c:	693b      	ldr	r3, [r7, #16]
 8010a1e:	695b      	ldr	r3, [r3, #20]
 8010a20:	683a      	ldr	r2, [r7, #0]
 8010a22:	429a      	cmp	r2, r3
 8010a24:	d302      	bcc.n	8010a2c <get_fat+0x26>
		val = 1;	/* Internal error */
 8010a26:	2301      	movs	r3, #1
 8010a28:	617b      	str	r3, [r7, #20]
 8010a2a:	e08e      	b.n	8010b4a <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8010a2c:	f04f 33ff 	mov.w	r3, #4294967295
 8010a30:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8010a32:	693b      	ldr	r3, [r7, #16]
 8010a34:	781b      	ldrb	r3, [r3, #0]
 8010a36:	2b03      	cmp	r3, #3
 8010a38:	d061      	beq.n	8010afe <get_fat+0xf8>
 8010a3a:	2b03      	cmp	r3, #3
 8010a3c:	dc7b      	bgt.n	8010b36 <get_fat+0x130>
 8010a3e:	2b01      	cmp	r3, #1
 8010a40:	d002      	beq.n	8010a48 <get_fat+0x42>
 8010a42:	2b02      	cmp	r3, #2
 8010a44:	d041      	beq.n	8010aca <get_fat+0xc4>
 8010a46:	e076      	b.n	8010b36 <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8010a48:	683b      	ldr	r3, [r7, #0]
 8010a4a:	60fb      	str	r3, [r7, #12]
 8010a4c:	68fb      	ldr	r3, [r7, #12]
 8010a4e:	085b      	lsrs	r3, r3, #1
 8010a50:	68fa      	ldr	r2, [r7, #12]
 8010a52:	4413      	add	r3, r2
 8010a54:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8010a56:	693b      	ldr	r3, [r7, #16]
 8010a58:	6a1a      	ldr	r2, [r3, #32]
 8010a5a:	68fb      	ldr	r3, [r7, #12]
 8010a5c:	0a5b      	lsrs	r3, r3, #9
 8010a5e:	4413      	add	r3, r2
 8010a60:	4619      	mov	r1, r3
 8010a62:	6938      	ldr	r0, [r7, #16]
 8010a64:	f7ff ff14 	bl	8010890 <move_window>
 8010a68:	4603      	mov	r3, r0
 8010a6a:	2b00      	cmp	r3, #0
 8010a6c:	d166      	bne.n	8010b3c <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 8010a6e:	68fb      	ldr	r3, [r7, #12]
 8010a70:	1c5a      	adds	r2, r3, #1
 8010a72:	60fa      	str	r2, [r7, #12]
 8010a74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010a78:	693a      	ldr	r2, [r7, #16]
 8010a7a:	4413      	add	r3, r2
 8010a7c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8010a80:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8010a82:	693b      	ldr	r3, [r7, #16]
 8010a84:	6a1a      	ldr	r2, [r3, #32]
 8010a86:	68fb      	ldr	r3, [r7, #12]
 8010a88:	0a5b      	lsrs	r3, r3, #9
 8010a8a:	4413      	add	r3, r2
 8010a8c:	4619      	mov	r1, r3
 8010a8e:	6938      	ldr	r0, [r7, #16]
 8010a90:	f7ff fefe 	bl	8010890 <move_window>
 8010a94:	4603      	mov	r3, r0
 8010a96:	2b00      	cmp	r3, #0
 8010a98:	d152      	bne.n	8010b40 <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 8010a9a:	68fb      	ldr	r3, [r7, #12]
 8010a9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010aa0:	693a      	ldr	r2, [r7, #16]
 8010aa2:	4413      	add	r3, r2
 8010aa4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8010aa8:	021b      	lsls	r3, r3, #8
 8010aaa:	68ba      	ldr	r2, [r7, #8]
 8010aac:	4313      	orrs	r3, r2
 8010aae:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8010ab0:	683b      	ldr	r3, [r7, #0]
 8010ab2:	f003 0301 	and.w	r3, r3, #1
 8010ab6:	2b00      	cmp	r3, #0
 8010ab8:	d002      	beq.n	8010ac0 <get_fat+0xba>
 8010aba:	68bb      	ldr	r3, [r7, #8]
 8010abc:	091b      	lsrs	r3, r3, #4
 8010abe:	e002      	b.n	8010ac6 <get_fat+0xc0>
 8010ac0:	68bb      	ldr	r3, [r7, #8]
 8010ac2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8010ac6:	617b      	str	r3, [r7, #20]
			break;
 8010ac8:	e03f      	b.n	8010b4a <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8010aca:	693b      	ldr	r3, [r7, #16]
 8010acc:	6a1a      	ldr	r2, [r3, #32]
 8010ace:	683b      	ldr	r3, [r7, #0]
 8010ad0:	0a1b      	lsrs	r3, r3, #8
 8010ad2:	4413      	add	r3, r2
 8010ad4:	4619      	mov	r1, r3
 8010ad6:	6938      	ldr	r0, [r7, #16]
 8010ad8:	f7ff feda 	bl	8010890 <move_window>
 8010adc:	4603      	mov	r3, r0
 8010ade:	2b00      	cmp	r3, #0
 8010ae0:	d130      	bne.n	8010b44 <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8010ae2:	693b      	ldr	r3, [r7, #16]
 8010ae4:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8010ae8:	683b      	ldr	r3, [r7, #0]
 8010aea:	005b      	lsls	r3, r3, #1
 8010aec:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8010af0:	4413      	add	r3, r2
 8010af2:	4618      	mov	r0, r3
 8010af4:	f7ff fc1c 	bl	8010330 <ld_word>
 8010af8:	4603      	mov	r3, r0
 8010afa:	617b      	str	r3, [r7, #20]
			break;
 8010afc:	e025      	b.n	8010b4a <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8010afe:	693b      	ldr	r3, [r7, #16]
 8010b00:	6a1a      	ldr	r2, [r3, #32]
 8010b02:	683b      	ldr	r3, [r7, #0]
 8010b04:	09db      	lsrs	r3, r3, #7
 8010b06:	4413      	add	r3, r2
 8010b08:	4619      	mov	r1, r3
 8010b0a:	6938      	ldr	r0, [r7, #16]
 8010b0c:	f7ff fec0 	bl	8010890 <move_window>
 8010b10:	4603      	mov	r3, r0
 8010b12:	2b00      	cmp	r3, #0
 8010b14:	d118      	bne.n	8010b48 <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8010b16:	693b      	ldr	r3, [r7, #16]
 8010b18:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8010b1c:	683b      	ldr	r3, [r7, #0]
 8010b1e:	009b      	lsls	r3, r3, #2
 8010b20:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8010b24:	4413      	add	r3, r2
 8010b26:	4618      	mov	r0, r3
 8010b28:	f7ff fc1a 	bl	8010360 <ld_dword>
 8010b2c:	4603      	mov	r3, r0
 8010b2e:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8010b32:	617b      	str	r3, [r7, #20]
			break;
 8010b34:	e009      	b.n	8010b4a <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8010b36:	2301      	movs	r3, #1
 8010b38:	617b      	str	r3, [r7, #20]
 8010b3a:	e006      	b.n	8010b4a <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8010b3c:	bf00      	nop
 8010b3e:	e004      	b.n	8010b4a <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8010b40:	bf00      	nop
 8010b42:	e002      	b.n	8010b4a <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8010b44:	bf00      	nop
 8010b46:	e000      	b.n	8010b4a <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8010b48:	bf00      	nop
		}
	}

	return val;
 8010b4a:	697b      	ldr	r3, [r7, #20]
}
 8010b4c:	4618      	mov	r0, r3
 8010b4e:	3718      	adds	r7, #24
 8010b50:	46bd      	mov	sp, r7
 8010b52:	bd80      	pop	{r7, pc}

08010b54 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8010b54:	b590      	push	{r4, r7, lr}
 8010b56:	b089      	sub	sp, #36	@ 0x24
 8010b58:	af00      	add	r7, sp, #0
 8010b5a:	60f8      	str	r0, [r7, #12]
 8010b5c:	60b9      	str	r1, [r7, #8]
 8010b5e:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8010b60:	2302      	movs	r3, #2
 8010b62:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8010b64:	68bb      	ldr	r3, [r7, #8]
 8010b66:	2b01      	cmp	r3, #1
 8010b68:	f240 80d9 	bls.w	8010d1e <put_fat+0x1ca>
 8010b6c:	68fb      	ldr	r3, [r7, #12]
 8010b6e:	695b      	ldr	r3, [r3, #20]
 8010b70:	68ba      	ldr	r2, [r7, #8]
 8010b72:	429a      	cmp	r2, r3
 8010b74:	f080 80d3 	bcs.w	8010d1e <put_fat+0x1ca>
		switch (fs->fs_type) {
 8010b78:	68fb      	ldr	r3, [r7, #12]
 8010b7a:	781b      	ldrb	r3, [r3, #0]
 8010b7c:	2b03      	cmp	r3, #3
 8010b7e:	f000 8096 	beq.w	8010cae <put_fat+0x15a>
 8010b82:	2b03      	cmp	r3, #3
 8010b84:	f300 80cb 	bgt.w	8010d1e <put_fat+0x1ca>
 8010b88:	2b01      	cmp	r3, #1
 8010b8a:	d002      	beq.n	8010b92 <put_fat+0x3e>
 8010b8c:	2b02      	cmp	r3, #2
 8010b8e:	d06e      	beq.n	8010c6e <put_fat+0x11a>
 8010b90:	e0c5      	b.n	8010d1e <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8010b92:	68bb      	ldr	r3, [r7, #8]
 8010b94:	61bb      	str	r3, [r7, #24]
 8010b96:	69bb      	ldr	r3, [r7, #24]
 8010b98:	085b      	lsrs	r3, r3, #1
 8010b9a:	69ba      	ldr	r2, [r7, #24]
 8010b9c:	4413      	add	r3, r2
 8010b9e:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8010ba0:	68fb      	ldr	r3, [r7, #12]
 8010ba2:	6a1a      	ldr	r2, [r3, #32]
 8010ba4:	69bb      	ldr	r3, [r7, #24]
 8010ba6:	0a5b      	lsrs	r3, r3, #9
 8010ba8:	4413      	add	r3, r2
 8010baa:	4619      	mov	r1, r3
 8010bac:	68f8      	ldr	r0, [r7, #12]
 8010bae:	f7ff fe6f 	bl	8010890 <move_window>
 8010bb2:	4603      	mov	r3, r0
 8010bb4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8010bb6:	7ffb      	ldrb	r3, [r7, #31]
 8010bb8:	2b00      	cmp	r3, #0
 8010bba:	f040 80a9 	bne.w	8010d10 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 8010bbe:	68fb      	ldr	r3, [r7, #12]
 8010bc0:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8010bc4:	69bb      	ldr	r3, [r7, #24]
 8010bc6:	1c59      	adds	r1, r3, #1
 8010bc8:	61b9      	str	r1, [r7, #24]
 8010bca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010bce:	4413      	add	r3, r2
 8010bd0:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8010bd2:	68bb      	ldr	r3, [r7, #8]
 8010bd4:	f003 0301 	and.w	r3, r3, #1
 8010bd8:	2b00      	cmp	r3, #0
 8010bda:	d00d      	beq.n	8010bf8 <put_fat+0xa4>
 8010bdc:	697b      	ldr	r3, [r7, #20]
 8010bde:	781b      	ldrb	r3, [r3, #0]
 8010be0:	b25b      	sxtb	r3, r3
 8010be2:	f003 030f 	and.w	r3, r3, #15
 8010be6:	b25a      	sxtb	r2, r3
 8010be8:	687b      	ldr	r3, [r7, #4]
 8010bea:	b2db      	uxtb	r3, r3
 8010bec:	011b      	lsls	r3, r3, #4
 8010bee:	b25b      	sxtb	r3, r3
 8010bf0:	4313      	orrs	r3, r2
 8010bf2:	b25b      	sxtb	r3, r3
 8010bf4:	b2db      	uxtb	r3, r3
 8010bf6:	e001      	b.n	8010bfc <put_fat+0xa8>
 8010bf8:	687b      	ldr	r3, [r7, #4]
 8010bfa:	b2db      	uxtb	r3, r3
 8010bfc:	697a      	ldr	r2, [r7, #20]
 8010bfe:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8010c00:	68fb      	ldr	r3, [r7, #12]
 8010c02:	2201      	movs	r2, #1
 8010c04:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8010c06:	68fb      	ldr	r3, [r7, #12]
 8010c08:	6a1a      	ldr	r2, [r3, #32]
 8010c0a:	69bb      	ldr	r3, [r7, #24]
 8010c0c:	0a5b      	lsrs	r3, r3, #9
 8010c0e:	4413      	add	r3, r2
 8010c10:	4619      	mov	r1, r3
 8010c12:	68f8      	ldr	r0, [r7, #12]
 8010c14:	f7ff fe3c 	bl	8010890 <move_window>
 8010c18:	4603      	mov	r3, r0
 8010c1a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8010c1c:	7ffb      	ldrb	r3, [r7, #31]
 8010c1e:	2b00      	cmp	r3, #0
 8010c20:	d178      	bne.n	8010d14 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 8010c22:	68fb      	ldr	r3, [r7, #12]
 8010c24:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8010c28:	69bb      	ldr	r3, [r7, #24]
 8010c2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010c2e:	4413      	add	r3, r2
 8010c30:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8010c32:	68bb      	ldr	r3, [r7, #8]
 8010c34:	f003 0301 	and.w	r3, r3, #1
 8010c38:	2b00      	cmp	r3, #0
 8010c3a:	d003      	beq.n	8010c44 <put_fat+0xf0>
 8010c3c:	687b      	ldr	r3, [r7, #4]
 8010c3e:	091b      	lsrs	r3, r3, #4
 8010c40:	b2db      	uxtb	r3, r3
 8010c42:	e00e      	b.n	8010c62 <put_fat+0x10e>
 8010c44:	697b      	ldr	r3, [r7, #20]
 8010c46:	781b      	ldrb	r3, [r3, #0]
 8010c48:	b25b      	sxtb	r3, r3
 8010c4a:	f023 030f 	bic.w	r3, r3, #15
 8010c4e:	b25a      	sxtb	r2, r3
 8010c50:	687b      	ldr	r3, [r7, #4]
 8010c52:	0a1b      	lsrs	r3, r3, #8
 8010c54:	b25b      	sxtb	r3, r3
 8010c56:	f003 030f 	and.w	r3, r3, #15
 8010c5a:	b25b      	sxtb	r3, r3
 8010c5c:	4313      	orrs	r3, r2
 8010c5e:	b25b      	sxtb	r3, r3
 8010c60:	b2db      	uxtb	r3, r3
 8010c62:	697a      	ldr	r2, [r7, #20]
 8010c64:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8010c66:	68fb      	ldr	r3, [r7, #12]
 8010c68:	2201      	movs	r2, #1
 8010c6a:	70da      	strb	r2, [r3, #3]
			break;
 8010c6c:	e057      	b.n	8010d1e <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8010c6e:	68fb      	ldr	r3, [r7, #12]
 8010c70:	6a1a      	ldr	r2, [r3, #32]
 8010c72:	68bb      	ldr	r3, [r7, #8]
 8010c74:	0a1b      	lsrs	r3, r3, #8
 8010c76:	4413      	add	r3, r2
 8010c78:	4619      	mov	r1, r3
 8010c7a:	68f8      	ldr	r0, [r7, #12]
 8010c7c:	f7ff fe08 	bl	8010890 <move_window>
 8010c80:	4603      	mov	r3, r0
 8010c82:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8010c84:	7ffb      	ldrb	r3, [r7, #31]
 8010c86:	2b00      	cmp	r3, #0
 8010c88:	d146      	bne.n	8010d18 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8010c8a:	68fb      	ldr	r3, [r7, #12]
 8010c8c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8010c90:	68bb      	ldr	r3, [r7, #8]
 8010c92:	005b      	lsls	r3, r3, #1
 8010c94:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8010c98:	4413      	add	r3, r2
 8010c9a:	687a      	ldr	r2, [r7, #4]
 8010c9c:	b292      	uxth	r2, r2
 8010c9e:	4611      	mov	r1, r2
 8010ca0:	4618      	mov	r0, r3
 8010ca2:	f7ff fb80 	bl	80103a6 <st_word>
			fs->wflag = 1;
 8010ca6:	68fb      	ldr	r3, [r7, #12]
 8010ca8:	2201      	movs	r2, #1
 8010caa:	70da      	strb	r2, [r3, #3]
			break;
 8010cac:	e037      	b.n	8010d1e <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8010cae:	68fb      	ldr	r3, [r7, #12]
 8010cb0:	6a1a      	ldr	r2, [r3, #32]
 8010cb2:	68bb      	ldr	r3, [r7, #8]
 8010cb4:	09db      	lsrs	r3, r3, #7
 8010cb6:	4413      	add	r3, r2
 8010cb8:	4619      	mov	r1, r3
 8010cba:	68f8      	ldr	r0, [r7, #12]
 8010cbc:	f7ff fde8 	bl	8010890 <move_window>
 8010cc0:	4603      	mov	r3, r0
 8010cc2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8010cc4:	7ffb      	ldrb	r3, [r7, #31]
 8010cc6:	2b00      	cmp	r3, #0
 8010cc8:	d128      	bne.n	8010d1c <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8010cca:	687b      	ldr	r3, [r7, #4]
 8010ccc:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 8010cd0:	68fb      	ldr	r3, [r7, #12]
 8010cd2:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8010cd6:	68bb      	ldr	r3, [r7, #8]
 8010cd8:	009b      	lsls	r3, r3, #2
 8010cda:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8010cde:	4413      	add	r3, r2
 8010ce0:	4618      	mov	r0, r3
 8010ce2:	f7ff fb3d 	bl	8010360 <ld_dword>
 8010ce6:	4603      	mov	r3, r0
 8010ce8:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8010cec:	4323      	orrs	r3, r4
 8010cee:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8010cf0:	68fb      	ldr	r3, [r7, #12]
 8010cf2:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8010cf6:	68bb      	ldr	r3, [r7, #8]
 8010cf8:	009b      	lsls	r3, r3, #2
 8010cfa:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8010cfe:	4413      	add	r3, r2
 8010d00:	6879      	ldr	r1, [r7, #4]
 8010d02:	4618      	mov	r0, r3
 8010d04:	f7ff fb6a 	bl	80103dc <st_dword>
			fs->wflag = 1;
 8010d08:	68fb      	ldr	r3, [r7, #12]
 8010d0a:	2201      	movs	r2, #1
 8010d0c:	70da      	strb	r2, [r3, #3]
			break;
 8010d0e:	e006      	b.n	8010d1e <put_fat+0x1ca>
			if (res != FR_OK) break;
 8010d10:	bf00      	nop
 8010d12:	e004      	b.n	8010d1e <put_fat+0x1ca>
			if (res != FR_OK) break;
 8010d14:	bf00      	nop
 8010d16:	e002      	b.n	8010d1e <put_fat+0x1ca>
			if (res != FR_OK) break;
 8010d18:	bf00      	nop
 8010d1a:	e000      	b.n	8010d1e <put_fat+0x1ca>
			if (res != FR_OK) break;
 8010d1c:	bf00      	nop
		}
	}
	return res;
 8010d1e:	7ffb      	ldrb	r3, [r7, #31]
}
 8010d20:	4618      	mov	r0, r3
 8010d22:	3724      	adds	r7, #36	@ 0x24
 8010d24:	46bd      	mov	sp, r7
 8010d26:	bd90      	pop	{r4, r7, pc}

08010d28 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8010d28:	b580      	push	{r7, lr}
 8010d2a:	b088      	sub	sp, #32
 8010d2c:	af00      	add	r7, sp, #0
 8010d2e:	60f8      	str	r0, [r7, #12]
 8010d30:	60b9      	str	r1, [r7, #8]
 8010d32:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8010d34:	2300      	movs	r3, #0
 8010d36:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8010d38:	68fb      	ldr	r3, [r7, #12]
 8010d3a:	681b      	ldr	r3, [r3, #0]
 8010d3c:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8010d3e:	68bb      	ldr	r3, [r7, #8]
 8010d40:	2b01      	cmp	r3, #1
 8010d42:	d904      	bls.n	8010d4e <remove_chain+0x26>
 8010d44:	69bb      	ldr	r3, [r7, #24]
 8010d46:	695b      	ldr	r3, [r3, #20]
 8010d48:	68ba      	ldr	r2, [r7, #8]
 8010d4a:	429a      	cmp	r2, r3
 8010d4c:	d301      	bcc.n	8010d52 <remove_chain+0x2a>
 8010d4e:	2302      	movs	r3, #2
 8010d50:	e04b      	b.n	8010dea <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8010d52:	687b      	ldr	r3, [r7, #4]
 8010d54:	2b00      	cmp	r3, #0
 8010d56:	d00c      	beq.n	8010d72 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8010d58:	f04f 32ff 	mov.w	r2, #4294967295
 8010d5c:	6879      	ldr	r1, [r7, #4]
 8010d5e:	69b8      	ldr	r0, [r7, #24]
 8010d60:	f7ff fef8 	bl	8010b54 <put_fat>
 8010d64:	4603      	mov	r3, r0
 8010d66:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8010d68:	7ffb      	ldrb	r3, [r7, #31]
 8010d6a:	2b00      	cmp	r3, #0
 8010d6c:	d001      	beq.n	8010d72 <remove_chain+0x4a>
 8010d6e:	7ffb      	ldrb	r3, [r7, #31]
 8010d70:	e03b      	b.n	8010dea <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8010d72:	68b9      	ldr	r1, [r7, #8]
 8010d74:	68f8      	ldr	r0, [r7, #12]
 8010d76:	f7ff fe46 	bl	8010a06 <get_fat>
 8010d7a:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8010d7c:	697b      	ldr	r3, [r7, #20]
 8010d7e:	2b00      	cmp	r3, #0
 8010d80:	d031      	beq.n	8010de6 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8010d82:	697b      	ldr	r3, [r7, #20]
 8010d84:	2b01      	cmp	r3, #1
 8010d86:	d101      	bne.n	8010d8c <remove_chain+0x64>
 8010d88:	2302      	movs	r3, #2
 8010d8a:	e02e      	b.n	8010dea <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8010d8c:	697b      	ldr	r3, [r7, #20]
 8010d8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010d92:	d101      	bne.n	8010d98 <remove_chain+0x70>
 8010d94:	2301      	movs	r3, #1
 8010d96:	e028      	b.n	8010dea <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8010d98:	2200      	movs	r2, #0
 8010d9a:	68b9      	ldr	r1, [r7, #8]
 8010d9c:	69b8      	ldr	r0, [r7, #24]
 8010d9e:	f7ff fed9 	bl	8010b54 <put_fat>
 8010da2:	4603      	mov	r3, r0
 8010da4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8010da6:	7ffb      	ldrb	r3, [r7, #31]
 8010da8:	2b00      	cmp	r3, #0
 8010daa:	d001      	beq.n	8010db0 <remove_chain+0x88>
 8010dac:	7ffb      	ldrb	r3, [r7, #31]
 8010dae:	e01c      	b.n	8010dea <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8010db0:	69bb      	ldr	r3, [r7, #24]
 8010db2:	691a      	ldr	r2, [r3, #16]
 8010db4:	69bb      	ldr	r3, [r7, #24]
 8010db6:	695b      	ldr	r3, [r3, #20]
 8010db8:	3b02      	subs	r3, #2
 8010dba:	429a      	cmp	r2, r3
 8010dbc:	d20b      	bcs.n	8010dd6 <remove_chain+0xae>
			fs->free_clst++;
 8010dbe:	69bb      	ldr	r3, [r7, #24]
 8010dc0:	691b      	ldr	r3, [r3, #16]
 8010dc2:	1c5a      	adds	r2, r3, #1
 8010dc4:	69bb      	ldr	r3, [r7, #24]
 8010dc6:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 8010dc8:	69bb      	ldr	r3, [r7, #24]
 8010dca:	791b      	ldrb	r3, [r3, #4]
 8010dcc:	f043 0301 	orr.w	r3, r3, #1
 8010dd0:	b2da      	uxtb	r2, r3
 8010dd2:	69bb      	ldr	r3, [r7, #24]
 8010dd4:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8010dd6:	697b      	ldr	r3, [r7, #20]
 8010dd8:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8010dda:	69bb      	ldr	r3, [r7, #24]
 8010ddc:	695b      	ldr	r3, [r3, #20]
 8010dde:	68ba      	ldr	r2, [r7, #8]
 8010de0:	429a      	cmp	r2, r3
 8010de2:	d3c6      	bcc.n	8010d72 <remove_chain+0x4a>
 8010de4:	e000      	b.n	8010de8 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8010de6:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8010de8:	2300      	movs	r3, #0
}
 8010dea:	4618      	mov	r0, r3
 8010dec:	3720      	adds	r7, #32
 8010dee:	46bd      	mov	sp, r7
 8010df0:	bd80      	pop	{r7, pc}

08010df2 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8010df2:	b580      	push	{r7, lr}
 8010df4:	b088      	sub	sp, #32
 8010df6:	af00      	add	r7, sp, #0
 8010df8:	6078      	str	r0, [r7, #4]
 8010dfa:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8010dfc:	687b      	ldr	r3, [r7, #4]
 8010dfe:	681b      	ldr	r3, [r3, #0]
 8010e00:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8010e02:	683b      	ldr	r3, [r7, #0]
 8010e04:	2b00      	cmp	r3, #0
 8010e06:	d10d      	bne.n	8010e24 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8010e08:	693b      	ldr	r3, [r7, #16]
 8010e0a:	68db      	ldr	r3, [r3, #12]
 8010e0c:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8010e0e:	69bb      	ldr	r3, [r7, #24]
 8010e10:	2b00      	cmp	r3, #0
 8010e12:	d004      	beq.n	8010e1e <create_chain+0x2c>
 8010e14:	693b      	ldr	r3, [r7, #16]
 8010e16:	695b      	ldr	r3, [r3, #20]
 8010e18:	69ba      	ldr	r2, [r7, #24]
 8010e1a:	429a      	cmp	r2, r3
 8010e1c:	d31b      	bcc.n	8010e56 <create_chain+0x64>
 8010e1e:	2301      	movs	r3, #1
 8010e20:	61bb      	str	r3, [r7, #24]
 8010e22:	e018      	b.n	8010e56 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8010e24:	6839      	ldr	r1, [r7, #0]
 8010e26:	6878      	ldr	r0, [r7, #4]
 8010e28:	f7ff fded 	bl	8010a06 <get_fat>
 8010e2c:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8010e2e:	68fb      	ldr	r3, [r7, #12]
 8010e30:	2b01      	cmp	r3, #1
 8010e32:	d801      	bhi.n	8010e38 <create_chain+0x46>
 8010e34:	2301      	movs	r3, #1
 8010e36:	e070      	b.n	8010f1a <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8010e38:	68fb      	ldr	r3, [r7, #12]
 8010e3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010e3e:	d101      	bne.n	8010e44 <create_chain+0x52>
 8010e40:	68fb      	ldr	r3, [r7, #12]
 8010e42:	e06a      	b.n	8010f1a <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8010e44:	693b      	ldr	r3, [r7, #16]
 8010e46:	695b      	ldr	r3, [r3, #20]
 8010e48:	68fa      	ldr	r2, [r7, #12]
 8010e4a:	429a      	cmp	r2, r3
 8010e4c:	d201      	bcs.n	8010e52 <create_chain+0x60>
 8010e4e:	68fb      	ldr	r3, [r7, #12]
 8010e50:	e063      	b.n	8010f1a <create_chain+0x128>
		scl = clst;
 8010e52:	683b      	ldr	r3, [r7, #0]
 8010e54:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8010e56:	69bb      	ldr	r3, [r7, #24]
 8010e58:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8010e5a:	69fb      	ldr	r3, [r7, #28]
 8010e5c:	3301      	adds	r3, #1
 8010e5e:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8010e60:	693b      	ldr	r3, [r7, #16]
 8010e62:	695b      	ldr	r3, [r3, #20]
 8010e64:	69fa      	ldr	r2, [r7, #28]
 8010e66:	429a      	cmp	r2, r3
 8010e68:	d307      	bcc.n	8010e7a <create_chain+0x88>
				ncl = 2;
 8010e6a:	2302      	movs	r3, #2
 8010e6c:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8010e6e:	69fa      	ldr	r2, [r7, #28]
 8010e70:	69bb      	ldr	r3, [r7, #24]
 8010e72:	429a      	cmp	r2, r3
 8010e74:	d901      	bls.n	8010e7a <create_chain+0x88>
 8010e76:	2300      	movs	r3, #0
 8010e78:	e04f      	b.n	8010f1a <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8010e7a:	69f9      	ldr	r1, [r7, #28]
 8010e7c:	6878      	ldr	r0, [r7, #4]
 8010e7e:	f7ff fdc2 	bl	8010a06 <get_fat>
 8010e82:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8010e84:	68fb      	ldr	r3, [r7, #12]
 8010e86:	2b00      	cmp	r3, #0
 8010e88:	d00e      	beq.n	8010ea8 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8010e8a:	68fb      	ldr	r3, [r7, #12]
 8010e8c:	2b01      	cmp	r3, #1
 8010e8e:	d003      	beq.n	8010e98 <create_chain+0xa6>
 8010e90:	68fb      	ldr	r3, [r7, #12]
 8010e92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010e96:	d101      	bne.n	8010e9c <create_chain+0xaa>
 8010e98:	68fb      	ldr	r3, [r7, #12]
 8010e9a:	e03e      	b.n	8010f1a <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8010e9c:	69fa      	ldr	r2, [r7, #28]
 8010e9e:	69bb      	ldr	r3, [r7, #24]
 8010ea0:	429a      	cmp	r2, r3
 8010ea2:	d1da      	bne.n	8010e5a <create_chain+0x68>
 8010ea4:	2300      	movs	r3, #0
 8010ea6:	e038      	b.n	8010f1a <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8010ea8:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8010eaa:	f04f 32ff 	mov.w	r2, #4294967295
 8010eae:	69f9      	ldr	r1, [r7, #28]
 8010eb0:	6938      	ldr	r0, [r7, #16]
 8010eb2:	f7ff fe4f 	bl	8010b54 <put_fat>
 8010eb6:	4603      	mov	r3, r0
 8010eb8:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8010eba:	7dfb      	ldrb	r3, [r7, #23]
 8010ebc:	2b00      	cmp	r3, #0
 8010ebe:	d109      	bne.n	8010ed4 <create_chain+0xe2>
 8010ec0:	683b      	ldr	r3, [r7, #0]
 8010ec2:	2b00      	cmp	r3, #0
 8010ec4:	d006      	beq.n	8010ed4 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8010ec6:	69fa      	ldr	r2, [r7, #28]
 8010ec8:	6839      	ldr	r1, [r7, #0]
 8010eca:	6938      	ldr	r0, [r7, #16]
 8010ecc:	f7ff fe42 	bl	8010b54 <put_fat>
 8010ed0:	4603      	mov	r3, r0
 8010ed2:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8010ed4:	7dfb      	ldrb	r3, [r7, #23]
 8010ed6:	2b00      	cmp	r3, #0
 8010ed8:	d116      	bne.n	8010f08 <create_chain+0x116>
		fs->last_clst = ncl;
 8010eda:	693b      	ldr	r3, [r7, #16]
 8010edc:	69fa      	ldr	r2, [r7, #28]
 8010ede:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8010ee0:	693b      	ldr	r3, [r7, #16]
 8010ee2:	691a      	ldr	r2, [r3, #16]
 8010ee4:	693b      	ldr	r3, [r7, #16]
 8010ee6:	695b      	ldr	r3, [r3, #20]
 8010ee8:	3b02      	subs	r3, #2
 8010eea:	429a      	cmp	r2, r3
 8010eec:	d804      	bhi.n	8010ef8 <create_chain+0x106>
 8010eee:	693b      	ldr	r3, [r7, #16]
 8010ef0:	691b      	ldr	r3, [r3, #16]
 8010ef2:	1e5a      	subs	r2, r3, #1
 8010ef4:	693b      	ldr	r3, [r7, #16]
 8010ef6:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 8010ef8:	693b      	ldr	r3, [r7, #16]
 8010efa:	791b      	ldrb	r3, [r3, #4]
 8010efc:	f043 0301 	orr.w	r3, r3, #1
 8010f00:	b2da      	uxtb	r2, r3
 8010f02:	693b      	ldr	r3, [r7, #16]
 8010f04:	711a      	strb	r2, [r3, #4]
 8010f06:	e007      	b.n	8010f18 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8010f08:	7dfb      	ldrb	r3, [r7, #23]
 8010f0a:	2b01      	cmp	r3, #1
 8010f0c:	d102      	bne.n	8010f14 <create_chain+0x122>
 8010f0e:	f04f 33ff 	mov.w	r3, #4294967295
 8010f12:	e000      	b.n	8010f16 <create_chain+0x124>
 8010f14:	2301      	movs	r3, #1
 8010f16:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8010f18:	69fb      	ldr	r3, [r7, #28]
}
 8010f1a:	4618      	mov	r0, r3
 8010f1c:	3720      	adds	r7, #32
 8010f1e:	46bd      	mov	sp, r7
 8010f20:	bd80      	pop	{r7, pc}

08010f22 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8010f22:	b480      	push	{r7}
 8010f24:	b087      	sub	sp, #28
 8010f26:	af00      	add	r7, sp, #0
 8010f28:	6078      	str	r0, [r7, #4]
 8010f2a:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8010f2c:	687b      	ldr	r3, [r7, #4]
 8010f2e:	681b      	ldr	r3, [r3, #0]
 8010f30:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8010f32:	687b      	ldr	r3, [r7, #4]
 8010f34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010f36:	3304      	adds	r3, #4
 8010f38:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8010f3a:	683b      	ldr	r3, [r7, #0]
 8010f3c:	0a5b      	lsrs	r3, r3, #9
 8010f3e:	68fa      	ldr	r2, [r7, #12]
 8010f40:	8952      	ldrh	r2, [r2, #10]
 8010f42:	fbb3 f3f2 	udiv	r3, r3, r2
 8010f46:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8010f48:	693b      	ldr	r3, [r7, #16]
 8010f4a:	1d1a      	adds	r2, r3, #4
 8010f4c:	613a      	str	r2, [r7, #16]
 8010f4e:	681b      	ldr	r3, [r3, #0]
 8010f50:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8010f52:	68bb      	ldr	r3, [r7, #8]
 8010f54:	2b00      	cmp	r3, #0
 8010f56:	d101      	bne.n	8010f5c <clmt_clust+0x3a>
 8010f58:	2300      	movs	r3, #0
 8010f5a:	e010      	b.n	8010f7e <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8010f5c:	697a      	ldr	r2, [r7, #20]
 8010f5e:	68bb      	ldr	r3, [r7, #8]
 8010f60:	429a      	cmp	r2, r3
 8010f62:	d307      	bcc.n	8010f74 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8010f64:	697a      	ldr	r2, [r7, #20]
 8010f66:	68bb      	ldr	r3, [r7, #8]
 8010f68:	1ad3      	subs	r3, r2, r3
 8010f6a:	617b      	str	r3, [r7, #20]
 8010f6c:	693b      	ldr	r3, [r7, #16]
 8010f6e:	3304      	adds	r3, #4
 8010f70:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8010f72:	e7e9      	b.n	8010f48 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8010f74:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8010f76:	693b      	ldr	r3, [r7, #16]
 8010f78:	681a      	ldr	r2, [r3, #0]
 8010f7a:	697b      	ldr	r3, [r7, #20]
 8010f7c:	4413      	add	r3, r2
}
 8010f7e:	4618      	mov	r0, r3
 8010f80:	371c      	adds	r7, #28
 8010f82:	46bd      	mov	sp, r7
 8010f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f88:	4770      	bx	lr

08010f8a <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8010f8a:	b580      	push	{r7, lr}
 8010f8c:	b086      	sub	sp, #24
 8010f8e:	af00      	add	r7, sp, #0
 8010f90:	6078      	str	r0, [r7, #4]
 8010f92:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8010f94:	687b      	ldr	r3, [r7, #4]
 8010f96:	681b      	ldr	r3, [r3, #0]
 8010f98:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8010f9a:	683b      	ldr	r3, [r7, #0]
 8010f9c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8010fa0:	d204      	bcs.n	8010fac <dir_sdi+0x22>
 8010fa2:	683b      	ldr	r3, [r7, #0]
 8010fa4:	f003 031f 	and.w	r3, r3, #31
 8010fa8:	2b00      	cmp	r3, #0
 8010faa:	d001      	beq.n	8010fb0 <dir_sdi+0x26>
		return FR_INT_ERR;
 8010fac:	2302      	movs	r3, #2
 8010fae:	e063      	b.n	8011078 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8010fb0:	687b      	ldr	r3, [r7, #4]
 8010fb2:	683a      	ldr	r2, [r7, #0]
 8010fb4:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8010fb6:	687b      	ldr	r3, [r7, #4]
 8010fb8:	689b      	ldr	r3, [r3, #8]
 8010fba:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8010fbc:	697b      	ldr	r3, [r7, #20]
 8010fbe:	2b00      	cmp	r3, #0
 8010fc0:	d106      	bne.n	8010fd0 <dir_sdi+0x46>
 8010fc2:	693b      	ldr	r3, [r7, #16]
 8010fc4:	781b      	ldrb	r3, [r3, #0]
 8010fc6:	2b02      	cmp	r3, #2
 8010fc8:	d902      	bls.n	8010fd0 <dir_sdi+0x46>
		clst = fs->dirbase;
 8010fca:	693b      	ldr	r3, [r7, #16]
 8010fcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010fce:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8010fd0:	697b      	ldr	r3, [r7, #20]
 8010fd2:	2b00      	cmp	r3, #0
 8010fd4:	d10c      	bne.n	8010ff0 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8010fd6:	683b      	ldr	r3, [r7, #0]
 8010fd8:	095b      	lsrs	r3, r3, #5
 8010fda:	693a      	ldr	r2, [r7, #16]
 8010fdc:	8912      	ldrh	r2, [r2, #8]
 8010fde:	4293      	cmp	r3, r2
 8010fe0:	d301      	bcc.n	8010fe6 <dir_sdi+0x5c>
 8010fe2:	2302      	movs	r3, #2
 8010fe4:	e048      	b.n	8011078 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8010fe6:	693b      	ldr	r3, [r7, #16]
 8010fe8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8010fea:	687b      	ldr	r3, [r7, #4]
 8010fec:	61da      	str	r2, [r3, #28]
 8010fee:	e029      	b.n	8011044 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8010ff0:	693b      	ldr	r3, [r7, #16]
 8010ff2:	895b      	ldrh	r3, [r3, #10]
 8010ff4:	025b      	lsls	r3, r3, #9
 8010ff6:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8010ff8:	e019      	b.n	801102e <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8010ffa:	687b      	ldr	r3, [r7, #4]
 8010ffc:	6979      	ldr	r1, [r7, #20]
 8010ffe:	4618      	mov	r0, r3
 8011000:	f7ff fd01 	bl	8010a06 <get_fat>
 8011004:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8011006:	697b      	ldr	r3, [r7, #20]
 8011008:	f1b3 3fff 	cmp.w	r3, #4294967295
 801100c:	d101      	bne.n	8011012 <dir_sdi+0x88>
 801100e:	2301      	movs	r3, #1
 8011010:	e032      	b.n	8011078 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8011012:	697b      	ldr	r3, [r7, #20]
 8011014:	2b01      	cmp	r3, #1
 8011016:	d904      	bls.n	8011022 <dir_sdi+0x98>
 8011018:	693b      	ldr	r3, [r7, #16]
 801101a:	695b      	ldr	r3, [r3, #20]
 801101c:	697a      	ldr	r2, [r7, #20]
 801101e:	429a      	cmp	r2, r3
 8011020:	d301      	bcc.n	8011026 <dir_sdi+0x9c>
 8011022:	2302      	movs	r3, #2
 8011024:	e028      	b.n	8011078 <dir_sdi+0xee>
			ofs -= csz;
 8011026:	683a      	ldr	r2, [r7, #0]
 8011028:	68fb      	ldr	r3, [r7, #12]
 801102a:	1ad3      	subs	r3, r2, r3
 801102c:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 801102e:	683a      	ldr	r2, [r7, #0]
 8011030:	68fb      	ldr	r3, [r7, #12]
 8011032:	429a      	cmp	r2, r3
 8011034:	d2e1      	bcs.n	8010ffa <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8011036:	6979      	ldr	r1, [r7, #20]
 8011038:	6938      	ldr	r0, [r7, #16]
 801103a:	f7ff fcc5 	bl	80109c8 <clust2sect>
 801103e:	4602      	mov	r2, r0
 8011040:	687b      	ldr	r3, [r7, #4]
 8011042:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8011044:	687b      	ldr	r3, [r7, #4]
 8011046:	697a      	ldr	r2, [r7, #20]
 8011048:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 801104a:	687b      	ldr	r3, [r7, #4]
 801104c:	69db      	ldr	r3, [r3, #28]
 801104e:	2b00      	cmp	r3, #0
 8011050:	d101      	bne.n	8011056 <dir_sdi+0xcc>
 8011052:	2302      	movs	r3, #2
 8011054:	e010      	b.n	8011078 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8011056:	687b      	ldr	r3, [r7, #4]
 8011058:	69da      	ldr	r2, [r3, #28]
 801105a:	683b      	ldr	r3, [r7, #0]
 801105c:	0a5b      	lsrs	r3, r3, #9
 801105e:	441a      	add	r2, r3
 8011060:	687b      	ldr	r3, [r7, #4]
 8011062:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8011064:	693b      	ldr	r3, [r7, #16]
 8011066:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 801106a:	683b      	ldr	r3, [r7, #0]
 801106c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011070:	441a      	add	r2, r3
 8011072:	687b      	ldr	r3, [r7, #4]
 8011074:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8011076:	2300      	movs	r3, #0
}
 8011078:	4618      	mov	r0, r3
 801107a:	3718      	adds	r7, #24
 801107c:	46bd      	mov	sp, r7
 801107e:	bd80      	pop	{r7, pc}

08011080 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8011080:	b580      	push	{r7, lr}
 8011082:	b086      	sub	sp, #24
 8011084:	af00      	add	r7, sp, #0
 8011086:	6078      	str	r0, [r7, #4]
 8011088:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 801108a:	687b      	ldr	r3, [r7, #4]
 801108c:	681b      	ldr	r3, [r3, #0]
 801108e:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8011090:	687b      	ldr	r3, [r7, #4]
 8011092:	695b      	ldr	r3, [r3, #20]
 8011094:	3320      	adds	r3, #32
 8011096:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8011098:	687b      	ldr	r3, [r7, #4]
 801109a:	69db      	ldr	r3, [r3, #28]
 801109c:	2b00      	cmp	r3, #0
 801109e:	d003      	beq.n	80110a8 <dir_next+0x28>
 80110a0:	68bb      	ldr	r3, [r7, #8]
 80110a2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80110a6:	d301      	bcc.n	80110ac <dir_next+0x2c>
 80110a8:	2304      	movs	r3, #4
 80110aa:	e0aa      	b.n	8011202 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80110ac:	68bb      	ldr	r3, [r7, #8]
 80110ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80110b2:	2b00      	cmp	r3, #0
 80110b4:	f040 8098 	bne.w	80111e8 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 80110b8:	687b      	ldr	r3, [r7, #4]
 80110ba:	69db      	ldr	r3, [r3, #28]
 80110bc:	1c5a      	adds	r2, r3, #1
 80110be:	687b      	ldr	r3, [r7, #4]
 80110c0:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 80110c2:	687b      	ldr	r3, [r7, #4]
 80110c4:	699b      	ldr	r3, [r3, #24]
 80110c6:	2b00      	cmp	r3, #0
 80110c8:	d10b      	bne.n	80110e2 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80110ca:	68bb      	ldr	r3, [r7, #8]
 80110cc:	095b      	lsrs	r3, r3, #5
 80110ce:	68fa      	ldr	r2, [r7, #12]
 80110d0:	8912      	ldrh	r2, [r2, #8]
 80110d2:	4293      	cmp	r3, r2
 80110d4:	f0c0 8088 	bcc.w	80111e8 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 80110d8:	687b      	ldr	r3, [r7, #4]
 80110da:	2200      	movs	r2, #0
 80110dc:	61da      	str	r2, [r3, #28]
 80110de:	2304      	movs	r3, #4
 80110e0:	e08f      	b.n	8011202 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 80110e2:	68bb      	ldr	r3, [r7, #8]
 80110e4:	0a5b      	lsrs	r3, r3, #9
 80110e6:	68fa      	ldr	r2, [r7, #12]
 80110e8:	8952      	ldrh	r2, [r2, #10]
 80110ea:	3a01      	subs	r2, #1
 80110ec:	4013      	ands	r3, r2
 80110ee:	2b00      	cmp	r3, #0
 80110f0:	d17a      	bne.n	80111e8 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80110f2:	687a      	ldr	r2, [r7, #4]
 80110f4:	687b      	ldr	r3, [r7, #4]
 80110f6:	699b      	ldr	r3, [r3, #24]
 80110f8:	4619      	mov	r1, r3
 80110fa:	4610      	mov	r0, r2
 80110fc:	f7ff fc83 	bl	8010a06 <get_fat>
 8011100:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8011102:	697b      	ldr	r3, [r7, #20]
 8011104:	2b01      	cmp	r3, #1
 8011106:	d801      	bhi.n	801110c <dir_next+0x8c>
 8011108:	2302      	movs	r3, #2
 801110a:	e07a      	b.n	8011202 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 801110c:	697b      	ldr	r3, [r7, #20]
 801110e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011112:	d101      	bne.n	8011118 <dir_next+0x98>
 8011114:	2301      	movs	r3, #1
 8011116:	e074      	b.n	8011202 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8011118:	68fb      	ldr	r3, [r7, #12]
 801111a:	695b      	ldr	r3, [r3, #20]
 801111c:	697a      	ldr	r2, [r7, #20]
 801111e:	429a      	cmp	r2, r3
 8011120:	d358      	bcc.n	80111d4 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8011122:	683b      	ldr	r3, [r7, #0]
 8011124:	2b00      	cmp	r3, #0
 8011126:	d104      	bne.n	8011132 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8011128:	687b      	ldr	r3, [r7, #4]
 801112a:	2200      	movs	r2, #0
 801112c:	61da      	str	r2, [r3, #28]
 801112e:	2304      	movs	r3, #4
 8011130:	e067      	b.n	8011202 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8011132:	687a      	ldr	r2, [r7, #4]
 8011134:	687b      	ldr	r3, [r7, #4]
 8011136:	699b      	ldr	r3, [r3, #24]
 8011138:	4619      	mov	r1, r3
 801113a:	4610      	mov	r0, r2
 801113c:	f7ff fe59 	bl	8010df2 <create_chain>
 8011140:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8011142:	697b      	ldr	r3, [r7, #20]
 8011144:	2b00      	cmp	r3, #0
 8011146:	d101      	bne.n	801114c <dir_next+0xcc>
 8011148:	2307      	movs	r3, #7
 801114a:	e05a      	b.n	8011202 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 801114c:	697b      	ldr	r3, [r7, #20]
 801114e:	2b01      	cmp	r3, #1
 8011150:	d101      	bne.n	8011156 <dir_next+0xd6>
 8011152:	2302      	movs	r3, #2
 8011154:	e055      	b.n	8011202 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8011156:	697b      	ldr	r3, [r7, #20]
 8011158:	f1b3 3fff 	cmp.w	r3, #4294967295
 801115c:	d101      	bne.n	8011162 <dir_next+0xe2>
 801115e:	2301      	movs	r3, #1
 8011160:	e04f      	b.n	8011202 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8011162:	68f8      	ldr	r0, [r7, #12]
 8011164:	f7ff fb50 	bl	8010808 <sync_window>
 8011168:	4603      	mov	r3, r0
 801116a:	2b00      	cmp	r3, #0
 801116c:	d001      	beq.n	8011172 <dir_next+0xf2>
 801116e:	2301      	movs	r3, #1
 8011170:	e047      	b.n	8011202 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8011172:	68fb      	ldr	r3, [r7, #12]
 8011174:	3330      	adds	r3, #48	@ 0x30
 8011176:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801117a:	2100      	movs	r1, #0
 801117c:	4618      	mov	r0, r3
 801117e:	f7ff f97a 	bl	8010476 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8011182:	2300      	movs	r3, #0
 8011184:	613b      	str	r3, [r7, #16]
 8011186:	6979      	ldr	r1, [r7, #20]
 8011188:	68f8      	ldr	r0, [r7, #12]
 801118a:	f7ff fc1d 	bl	80109c8 <clust2sect>
 801118e:	4602      	mov	r2, r0
 8011190:	68fb      	ldr	r3, [r7, #12]
 8011192:	62da      	str	r2, [r3, #44]	@ 0x2c
 8011194:	e012      	b.n	80111bc <dir_next+0x13c>
						fs->wflag = 1;
 8011196:	68fb      	ldr	r3, [r7, #12]
 8011198:	2201      	movs	r2, #1
 801119a:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 801119c:	68f8      	ldr	r0, [r7, #12]
 801119e:	f7ff fb33 	bl	8010808 <sync_window>
 80111a2:	4603      	mov	r3, r0
 80111a4:	2b00      	cmp	r3, #0
 80111a6:	d001      	beq.n	80111ac <dir_next+0x12c>
 80111a8:	2301      	movs	r3, #1
 80111aa:	e02a      	b.n	8011202 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80111ac:	693b      	ldr	r3, [r7, #16]
 80111ae:	3301      	adds	r3, #1
 80111b0:	613b      	str	r3, [r7, #16]
 80111b2:	68fb      	ldr	r3, [r7, #12]
 80111b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80111b6:	1c5a      	adds	r2, r3, #1
 80111b8:	68fb      	ldr	r3, [r7, #12]
 80111ba:	62da      	str	r2, [r3, #44]	@ 0x2c
 80111bc:	68fb      	ldr	r3, [r7, #12]
 80111be:	895b      	ldrh	r3, [r3, #10]
 80111c0:	461a      	mov	r2, r3
 80111c2:	693b      	ldr	r3, [r7, #16]
 80111c4:	4293      	cmp	r3, r2
 80111c6:	d3e6      	bcc.n	8011196 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 80111c8:	68fb      	ldr	r3, [r7, #12]
 80111ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80111cc:	693b      	ldr	r3, [r7, #16]
 80111ce:	1ad2      	subs	r2, r2, r3
 80111d0:	68fb      	ldr	r3, [r7, #12]
 80111d2:	62da      	str	r2, [r3, #44]	@ 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 80111d4:	687b      	ldr	r3, [r7, #4]
 80111d6:	697a      	ldr	r2, [r7, #20]
 80111d8:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 80111da:	6979      	ldr	r1, [r7, #20]
 80111dc:	68f8      	ldr	r0, [r7, #12]
 80111de:	f7ff fbf3 	bl	80109c8 <clust2sect>
 80111e2:	4602      	mov	r2, r0
 80111e4:	687b      	ldr	r3, [r7, #4]
 80111e6:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 80111e8:	687b      	ldr	r3, [r7, #4]
 80111ea:	68ba      	ldr	r2, [r7, #8]
 80111ec:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80111ee:	68fb      	ldr	r3, [r7, #12]
 80111f0:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80111f4:	68bb      	ldr	r3, [r7, #8]
 80111f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80111fa:	441a      	add	r2, r3
 80111fc:	687b      	ldr	r3, [r7, #4]
 80111fe:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8011200:	2300      	movs	r3, #0
}
 8011202:	4618      	mov	r0, r3
 8011204:	3718      	adds	r7, #24
 8011206:	46bd      	mov	sp, r7
 8011208:	bd80      	pop	{r7, pc}

0801120a <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 801120a:	b580      	push	{r7, lr}
 801120c:	b086      	sub	sp, #24
 801120e:	af00      	add	r7, sp, #0
 8011210:	6078      	str	r0, [r7, #4]
 8011212:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8011214:	687b      	ldr	r3, [r7, #4]
 8011216:	681b      	ldr	r3, [r3, #0]
 8011218:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 801121a:	2100      	movs	r1, #0
 801121c:	6878      	ldr	r0, [r7, #4]
 801121e:	f7ff feb4 	bl	8010f8a <dir_sdi>
 8011222:	4603      	mov	r3, r0
 8011224:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8011226:	7dfb      	ldrb	r3, [r7, #23]
 8011228:	2b00      	cmp	r3, #0
 801122a:	d12b      	bne.n	8011284 <dir_alloc+0x7a>
		n = 0;
 801122c:	2300      	movs	r3, #0
 801122e:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8011230:	687b      	ldr	r3, [r7, #4]
 8011232:	69db      	ldr	r3, [r3, #28]
 8011234:	4619      	mov	r1, r3
 8011236:	68f8      	ldr	r0, [r7, #12]
 8011238:	f7ff fb2a 	bl	8010890 <move_window>
 801123c:	4603      	mov	r3, r0
 801123e:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8011240:	7dfb      	ldrb	r3, [r7, #23]
 8011242:	2b00      	cmp	r3, #0
 8011244:	d11d      	bne.n	8011282 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8011246:	687b      	ldr	r3, [r7, #4]
 8011248:	6a1b      	ldr	r3, [r3, #32]
 801124a:	781b      	ldrb	r3, [r3, #0]
 801124c:	2be5      	cmp	r3, #229	@ 0xe5
 801124e:	d004      	beq.n	801125a <dir_alloc+0x50>
 8011250:	687b      	ldr	r3, [r7, #4]
 8011252:	6a1b      	ldr	r3, [r3, #32]
 8011254:	781b      	ldrb	r3, [r3, #0]
 8011256:	2b00      	cmp	r3, #0
 8011258:	d107      	bne.n	801126a <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 801125a:	693b      	ldr	r3, [r7, #16]
 801125c:	3301      	adds	r3, #1
 801125e:	613b      	str	r3, [r7, #16]
 8011260:	693a      	ldr	r2, [r7, #16]
 8011262:	683b      	ldr	r3, [r7, #0]
 8011264:	429a      	cmp	r2, r3
 8011266:	d102      	bne.n	801126e <dir_alloc+0x64>
 8011268:	e00c      	b.n	8011284 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 801126a:	2300      	movs	r3, #0
 801126c:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 801126e:	2101      	movs	r1, #1
 8011270:	6878      	ldr	r0, [r7, #4]
 8011272:	f7ff ff05 	bl	8011080 <dir_next>
 8011276:	4603      	mov	r3, r0
 8011278:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 801127a:	7dfb      	ldrb	r3, [r7, #23]
 801127c:	2b00      	cmp	r3, #0
 801127e:	d0d7      	beq.n	8011230 <dir_alloc+0x26>
 8011280:	e000      	b.n	8011284 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8011282:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8011284:	7dfb      	ldrb	r3, [r7, #23]
 8011286:	2b04      	cmp	r3, #4
 8011288:	d101      	bne.n	801128e <dir_alloc+0x84>
 801128a:	2307      	movs	r3, #7
 801128c:	75fb      	strb	r3, [r7, #23]
	return res;
 801128e:	7dfb      	ldrb	r3, [r7, #23]
}
 8011290:	4618      	mov	r0, r3
 8011292:	3718      	adds	r7, #24
 8011294:	46bd      	mov	sp, r7
 8011296:	bd80      	pop	{r7, pc}

08011298 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8011298:	b580      	push	{r7, lr}
 801129a:	b084      	sub	sp, #16
 801129c:	af00      	add	r7, sp, #0
 801129e:	6078      	str	r0, [r7, #4]
 80112a0:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 80112a2:	683b      	ldr	r3, [r7, #0]
 80112a4:	331a      	adds	r3, #26
 80112a6:	4618      	mov	r0, r3
 80112a8:	f7ff f842 	bl	8010330 <ld_word>
 80112ac:	4603      	mov	r3, r0
 80112ae:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 80112b0:	687b      	ldr	r3, [r7, #4]
 80112b2:	781b      	ldrb	r3, [r3, #0]
 80112b4:	2b03      	cmp	r3, #3
 80112b6:	d109      	bne.n	80112cc <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80112b8:	683b      	ldr	r3, [r7, #0]
 80112ba:	3314      	adds	r3, #20
 80112bc:	4618      	mov	r0, r3
 80112be:	f7ff f837 	bl	8010330 <ld_word>
 80112c2:	4603      	mov	r3, r0
 80112c4:	041b      	lsls	r3, r3, #16
 80112c6:	68fa      	ldr	r2, [r7, #12]
 80112c8:	4313      	orrs	r3, r2
 80112ca:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 80112cc:	68fb      	ldr	r3, [r7, #12]
}
 80112ce:	4618      	mov	r0, r3
 80112d0:	3710      	adds	r7, #16
 80112d2:	46bd      	mov	sp, r7
 80112d4:	bd80      	pop	{r7, pc}

080112d6 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 80112d6:	b580      	push	{r7, lr}
 80112d8:	b084      	sub	sp, #16
 80112da:	af00      	add	r7, sp, #0
 80112dc:	60f8      	str	r0, [r7, #12]
 80112de:	60b9      	str	r1, [r7, #8]
 80112e0:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 80112e2:	68bb      	ldr	r3, [r7, #8]
 80112e4:	331a      	adds	r3, #26
 80112e6:	687a      	ldr	r2, [r7, #4]
 80112e8:	b292      	uxth	r2, r2
 80112ea:	4611      	mov	r1, r2
 80112ec:	4618      	mov	r0, r3
 80112ee:	f7ff f85a 	bl	80103a6 <st_word>
	if (fs->fs_type == FS_FAT32) {
 80112f2:	68fb      	ldr	r3, [r7, #12]
 80112f4:	781b      	ldrb	r3, [r3, #0]
 80112f6:	2b03      	cmp	r3, #3
 80112f8:	d109      	bne.n	801130e <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 80112fa:	68bb      	ldr	r3, [r7, #8]
 80112fc:	f103 0214 	add.w	r2, r3, #20
 8011300:	687b      	ldr	r3, [r7, #4]
 8011302:	0c1b      	lsrs	r3, r3, #16
 8011304:	b29b      	uxth	r3, r3
 8011306:	4619      	mov	r1, r3
 8011308:	4610      	mov	r0, r2
 801130a:	f7ff f84c 	bl	80103a6 <st_word>
	}
}
 801130e:	bf00      	nop
 8011310:	3710      	adds	r7, #16
 8011312:	46bd      	mov	sp, r7
 8011314:	bd80      	pop	{r7, pc}

08011316 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8011316:	b580      	push	{r7, lr}
 8011318:	b086      	sub	sp, #24
 801131a:	af00      	add	r7, sp, #0
 801131c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 801131e:	687b      	ldr	r3, [r7, #4]
 8011320:	681b      	ldr	r3, [r3, #0]
 8011322:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8011324:	2100      	movs	r1, #0
 8011326:	6878      	ldr	r0, [r7, #4]
 8011328:	f7ff fe2f 	bl	8010f8a <dir_sdi>
 801132c:	4603      	mov	r3, r0
 801132e:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8011330:	7dfb      	ldrb	r3, [r7, #23]
 8011332:	2b00      	cmp	r3, #0
 8011334:	d001      	beq.n	801133a <dir_find+0x24>
 8011336:	7dfb      	ldrb	r3, [r7, #23]
 8011338:	e03e      	b.n	80113b8 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 801133a:	687b      	ldr	r3, [r7, #4]
 801133c:	69db      	ldr	r3, [r3, #28]
 801133e:	4619      	mov	r1, r3
 8011340:	6938      	ldr	r0, [r7, #16]
 8011342:	f7ff faa5 	bl	8010890 <move_window>
 8011346:	4603      	mov	r3, r0
 8011348:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 801134a:	7dfb      	ldrb	r3, [r7, #23]
 801134c:	2b00      	cmp	r3, #0
 801134e:	d12f      	bne.n	80113b0 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8011350:	687b      	ldr	r3, [r7, #4]
 8011352:	6a1b      	ldr	r3, [r3, #32]
 8011354:	781b      	ldrb	r3, [r3, #0]
 8011356:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8011358:	7bfb      	ldrb	r3, [r7, #15]
 801135a:	2b00      	cmp	r3, #0
 801135c:	d102      	bne.n	8011364 <dir_find+0x4e>
 801135e:	2304      	movs	r3, #4
 8011360:	75fb      	strb	r3, [r7, #23]
 8011362:	e028      	b.n	80113b6 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8011364:	687b      	ldr	r3, [r7, #4]
 8011366:	6a1b      	ldr	r3, [r3, #32]
 8011368:	330b      	adds	r3, #11
 801136a:	781b      	ldrb	r3, [r3, #0]
 801136c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8011370:	b2da      	uxtb	r2, r3
 8011372:	687b      	ldr	r3, [r7, #4]
 8011374:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8011376:	687b      	ldr	r3, [r7, #4]
 8011378:	6a1b      	ldr	r3, [r3, #32]
 801137a:	330b      	adds	r3, #11
 801137c:	781b      	ldrb	r3, [r3, #0]
 801137e:	f003 0308 	and.w	r3, r3, #8
 8011382:	2b00      	cmp	r3, #0
 8011384:	d10a      	bne.n	801139c <dir_find+0x86>
 8011386:	687b      	ldr	r3, [r7, #4]
 8011388:	6a18      	ldr	r0, [r3, #32]
 801138a:	687b      	ldr	r3, [r7, #4]
 801138c:	3324      	adds	r3, #36	@ 0x24
 801138e:	220b      	movs	r2, #11
 8011390:	4619      	mov	r1, r3
 8011392:	f7ff f88b 	bl	80104ac <mem_cmp>
 8011396:	4603      	mov	r3, r0
 8011398:	2b00      	cmp	r3, #0
 801139a:	d00b      	beq.n	80113b4 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 801139c:	2100      	movs	r1, #0
 801139e:	6878      	ldr	r0, [r7, #4]
 80113a0:	f7ff fe6e 	bl	8011080 <dir_next>
 80113a4:	4603      	mov	r3, r0
 80113a6:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80113a8:	7dfb      	ldrb	r3, [r7, #23]
 80113aa:	2b00      	cmp	r3, #0
 80113ac:	d0c5      	beq.n	801133a <dir_find+0x24>
 80113ae:	e002      	b.n	80113b6 <dir_find+0xa0>
		if (res != FR_OK) break;
 80113b0:	bf00      	nop
 80113b2:	e000      	b.n	80113b6 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80113b4:	bf00      	nop

	return res;
 80113b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80113b8:	4618      	mov	r0, r3
 80113ba:	3718      	adds	r7, #24
 80113bc:	46bd      	mov	sp, r7
 80113be:	bd80      	pop	{r7, pc}

080113c0 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80113c0:	b580      	push	{r7, lr}
 80113c2:	b084      	sub	sp, #16
 80113c4:	af00      	add	r7, sp, #0
 80113c6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80113c8:	687b      	ldr	r3, [r7, #4]
 80113ca:	681b      	ldr	r3, [r3, #0]
 80113cc:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 80113ce:	2101      	movs	r1, #1
 80113d0:	6878      	ldr	r0, [r7, #4]
 80113d2:	f7ff ff1a 	bl	801120a <dir_alloc>
 80113d6:	4603      	mov	r3, r0
 80113d8:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 80113da:	7bfb      	ldrb	r3, [r7, #15]
 80113dc:	2b00      	cmp	r3, #0
 80113de:	d11c      	bne.n	801141a <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 80113e0:	687b      	ldr	r3, [r7, #4]
 80113e2:	69db      	ldr	r3, [r3, #28]
 80113e4:	4619      	mov	r1, r3
 80113e6:	68b8      	ldr	r0, [r7, #8]
 80113e8:	f7ff fa52 	bl	8010890 <move_window>
 80113ec:	4603      	mov	r3, r0
 80113ee:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80113f0:	7bfb      	ldrb	r3, [r7, #15]
 80113f2:	2b00      	cmp	r3, #0
 80113f4:	d111      	bne.n	801141a <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 80113f6:	687b      	ldr	r3, [r7, #4]
 80113f8:	6a1b      	ldr	r3, [r3, #32]
 80113fa:	2220      	movs	r2, #32
 80113fc:	2100      	movs	r1, #0
 80113fe:	4618      	mov	r0, r3
 8011400:	f7ff f839 	bl	8010476 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8011404:	687b      	ldr	r3, [r7, #4]
 8011406:	6a18      	ldr	r0, [r3, #32]
 8011408:	687b      	ldr	r3, [r7, #4]
 801140a:	3324      	adds	r3, #36	@ 0x24
 801140c:	220b      	movs	r2, #11
 801140e:	4619      	mov	r1, r3
 8011410:	f7ff f810 	bl	8010434 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8011414:	68bb      	ldr	r3, [r7, #8]
 8011416:	2201      	movs	r2, #1
 8011418:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 801141a:	7bfb      	ldrb	r3, [r7, #15]
}
 801141c:	4618      	mov	r0, r3
 801141e:	3710      	adds	r7, #16
 8011420:	46bd      	mov	sp, r7
 8011422:	bd80      	pop	{r7, pc}

08011424 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8011424:	b580      	push	{r7, lr}
 8011426:	b088      	sub	sp, #32
 8011428:	af00      	add	r7, sp, #0
 801142a:	6078      	str	r0, [r7, #4]
 801142c:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 801142e:	683b      	ldr	r3, [r7, #0]
 8011430:	681b      	ldr	r3, [r3, #0]
 8011432:	60fb      	str	r3, [r7, #12]
 8011434:	687b      	ldr	r3, [r7, #4]
 8011436:	3324      	adds	r3, #36	@ 0x24
 8011438:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 801143a:	220b      	movs	r2, #11
 801143c:	2120      	movs	r1, #32
 801143e:	68b8      	ldr	r0, [r7, #8]
 8011440:	f7ff f819 	bl	8010476 <mem_set>
	si = i = 0; ni = 8;
 8011444:	2300      	movs	r3, #0
 8011446:	613b      	str	r3, [r7, #16]
 8011448:	693b      	ldr	r3, [r7, #16]
 801144a:	61fb      	str	r3, [r7, #28]
 801144c:	2308      	movs	r3, #8
 801144e:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8011450:	69fb      	ldr	r3, [r7, #28]
 8011452:	1c5a      	adds	r2, r3, #1
 8011454:	61fa      	str	r2, [r7, #28]
 8011456:	68fa      	ldr	r2, [r7, #12]
 8011458:	4413      	add	r3, r2
 801145a:	781b      	ldrb	r3, [r3, #0]
 801145c:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 801145e:	7efb      	ldrb	r3, [r7, #27]
 8011460:	2b20      	cmp	r3, #32
 8011462:	d94e      	bls.n	8011502 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8011464:	7efb      	ldrb	r3, [r7, #27]
 8011466:	2b2f      	cmp	r3, #47	@ 0x2f
 8011468:	d006      	beq.n	8011478 <create_name+0x54>
 801146a:	7efb      	ldrb	r3, [r7, #27]
 801146c:	2b5c      	cmp	r3, #92	@ 0x5c
 801146e:	d110      	bne.n	8011492 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8011470:	e002      	b.n	8011478 <create_name+0x54>
 8011472:	69fb      	ldr	r3, [r7, #28]
 8011474:	3301      	adds	r3, #1
 8011476:	61fb      	str	r3, [r7, #28]
 8011478:	68fa      	ldr	r2, [r7, #12]
 801147a:	69fb      	ldr	r3, [r7, #28]
 801147c:	4413      	add	r3, r2
 801147e:	781b      	ldrb	r3, [r3, #0]
 8011480:	2b2f      	cmp	r3, #47	@ 0x2f
 8011482:	d0f6      	beq.n	8011472 <create_name+0x4e>
 8011484:	68fa      	ldr	r2, [r7, #12]
 8011486:	69fb      	ldr	r3, [r7, #28]
 8011488:	4413      	add	r3, r2
 801148a:	781b      	ldrb	r3, [r3, #0]
 801148c:	2b5c      	cmp	r3, #92	@ 0x5c
 801148e:	d0f0      	beq.n	8011472 <create_name+0x4e>
			break;
 8011490:	e038      	b.n	8011504 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8011492:	7efb      	ldrb	r3, [r7, #27]
 8011494:	2b2e      	cmp	r3, #46	@ 0x2e
 8011496:	d003      	beq.n	80114a0 <create_name+0x7c>
 8011498:	693a      	ldr	r2, [r7, #16]
 801149a:	697b      	ldr	r3, [r7, #20]
 801149c:	429a      	cmp	r2, r3
 801149e:	d30c      	bcc.n	80114ba <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 80114a0:	697b      	ldr	r3, [r7, #20]
 80114a2:	2b0b      	cmp	r3, #11
 80114a4:	d002      	beq.n	80114ac <create_name+0x88>
 80114a6:	7efb      	ldrb	r3, [r7, #27]
 80114a8:	2b2e      	cmp	r3, #46	@ 0x2e
 80114aa:	d001      	beq.n	80114b0 <create_name+0x8c>
 80114ac:	2306      	movs	r3, #6
 80114ae:	e044      	b.n	801153a <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 80114b0:	2308      	movs	r3, #8
 80114b2:	613b      	str	r3, [r7, #16]
 80114b4:	230b      	movs	r3, #11
 80114b6:	617b      	str	r3, [r7, #20]
			continue;
 80114b8:	e022      	b.n	8011500 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 80114ba:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80114be:	2b00      	cmp	r3, #0
 80114c0:	da04      	bge.n	80114cc <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 80114c2:	7efb      	ldrb	r3, [r7, #27]
 80114c4:	3b80      	subs	r3, #128	@ 0x80
 80114c6:	4a1f      	ldr	r2, [pc, #124]	@ (8011544 <create_name+0x120>)
 80114c8:	5cd3      	ldrb	r3, [r2, r3]
 80114ca:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 80114cc:	7efb      	ldrb	r3, [r7, #27]
 80114ce:	4619      	mov	r1, r3
 80114d0:	481d      	ldr	r0, [pc, #116]	@ (8011548 <create_name+0x124>)
 80114d2:	f7ff f812 	bl	80104fa <chk_chr>
 80114d6:	4603      	mov	r3, r0
 80114d8:	2b00      	cmp	r3, #0
 80114da:	d001      	beq.n	80114e0 <create_name+0xbc>
 80114dc:	2306      	movs	r3, #6
 80114de:	e02c      	b.n	801153a <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 80114e0:	7efb      	ldrb	r3, [r7, #27]
 80114e2:	2b60      	cmp	r3, #96	@ 0x60
 80114e4:	d905      	bls.n	80114f2 <create_name+0xce>
 80114e6:	7efb      	ldrb	r3, [r7, #27]
 80114e8:	2b7a      	cmp	r3, #122	@ 0x7a
 80114ea:	d802      	bhi.n	80114f2 <create_name+0xce>
 80114ec:	7efb      	ldrb	r3, [r7, #27]
 80114ee:	3b20      	subs	r3, #32
 80114f0:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 80114f2:	693b      	ldr	r3, [r7, #16]
 80114f4:	1c5a      	adds	r2, r3, #1
 80114f6:	613a      	str	r2, [r7, #16]
 80114f8:	68ba      	ldr	r2, [r7, #8]
 80114fa:	4413      	add	r3, r2
 80114fc:	7efa      	ldrb	r2, [r7, #27]
 80114fe:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8011500:	e7a6      	b.n	8011450 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8011502:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8011504:	68fa      	ldr	r2, [r7, #12]
 8011506:	69fb      	ldr	r3, [r7, #28]
 8011508:	441a      	add	r2, r3
 801150a:	683b      	ldr	r3, [r7, #0]
 801150c:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 801150e:	693b      	ldr	r3, [r7, #16]
 8011510:	2b00      	cmp	r3, #0
 8011512:	d101      	bne.n	8011518 <create_name+0xf4>
 8011514:	2306      	movs	r3, #6
 8011516:	e010      	b.n	801153a <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8011518:	68bb      	ldr	r3, [r7, #8]
 801151a:	781b      	ldrb	r3, [r3, #0]
 801151c:	2be5      	cmp	r3, #229	@ 0xe5
 801151e:	d102      	bne.n	8011526 <create_name+0x102>
 8011520:	68bb      	ldr	r3, [r7, #8]
 8011522:	2205      	movs	r2, #5
 8011524:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8011526:	7efb      	ldrb	r3, [r7, #27]
 8011528:	2b20      	cmp	r3, #32
 801152a:	d801      	bhi.n	8011530 <create_name+0x10c>
 801152c:	2204      	movs	r2, #4
 801152e:	e000      	b.n	8011532 <create_name+0x10e>
 8011530:	2200      	movs	r2, #0
 8011532:	68bb      	ldr	r3, [r7, #8]
 8011534:	330b      	adds	r3, #11
 8011536:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8011538:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 801153a:	4618      	mov	r0, r3
 801153c:	3720      	adds	r7, #32
 801153e:	46bd      	mov	sp, r7
 8011540:	bd80      	pop	{r7, pc}
 8011542:	bf00      	nop
 8011544:	080140e4 	.word	0x080140e4
 8011548:	08013fe0 	.word	0x08013fe0

0801154c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 801154c:	b580      	push	{r7, lr}
 801154e:	b086      	sub	sp, #24
 8011550:	af00      	add	r7, sp, #0
 8011552:	6078      	str	r0, [r7, #4]
 8011554:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8011556:	687b      	ldr	r3, [r7, #4]
 8011558:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 801155a:	693b      	ldr	r3, [r7, #16]
 801155c:	681b      	ldr	r3, [r3, #0]
 801155e:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8011560:	e002      	b.n	8011568 <follow_path+0x1c>
 8011562:	683b      	ldr	r3, [r7, #0]
 8011564:	3301      	adds	r3, #1
 8011566:	603b      	str	r3, [r7, #0]
 8011568:	683b      	ldr	r3, [r7, #0]
 801156a:	781b      	ldrb	r3, [r3, #0]
 801156c:	2b2f      	cmp	r3, #47	@ 0x2f
 801156e:	d0f8      	beq.n	8011562 <follow_path+0x16>
 8011570:	683b      	ldr	r3, [r7, #0]
 8011572:	781b      	ldrb	r3, [r3, #0]
 8011574:	2b5c      	cmp	r3, #92	@ 0x5c
 8011576:	d0f4      	beq.n	8011562 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8011578:	693b      	ldr	r3, [r7, #16]
 801157a:	2200      	movs	r2, #0
 801157c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 801157e:	683b      	ldr	r3, [r7, #0]
 8011580:	781b      	ldrb	r3, [r3, #0]
 8011582:	2b1f      	cmp	r3, #31
 8011584:	d80a      	bhi.n	801159c <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8011586:	687b      	ldr	r3, [r7, #4]
 8011588:	2280      	movs	r2, #128	@ 0x80
 801158a:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 801158e:	2100      	movs	r1, #0
 8011590:	6878      	ldr	r0, [r7, #4]
 8011592:	f7ff fcfa 	bl	8010f8a <dir_sdi>
 8011596:	4603      	mov	r3, r0
 8011598:	75fb      	strb	r3, [r7, #23]
 801159a:	e043      	b.n	8011624 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 801159c:	463b      	mov	r3, r7
 801159e:	4619      	mov	r1, r3
 80115a0:	6878      	ldr	r0, [r7, #4]
 80115a2:	f7ff ff3f 	bl	8011424 <create_name>
 80115a6:	4603      	mov	r3, r0
 80115a8:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80115aa:	7dfb      	ldrb	r3, [r7, #23]
 80115ac:	2b00      	cmp	r3, #0
 80115ae:	d134      	bne.n	801161a <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 80115b0:	6878      	ldr	r0, [r7, #4]
 80115b2:	f7ff feb0 	bl	8011316 <dir_find>
 80115b6:	4603      	mov	r3, r0
 80115b8:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 80115ba:	687b      	ldr	r3, [r7, #4]
 80115bc:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 80115c0:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 80115c2:	7dfb      	ldrb	r3, [r7, #23]
 80115c4:	2b00      	cmp	r3, #0
 80115c6:	d00a      	beq.n	80115de <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80115c8:	7dfb      	ldrb	r3, [r7, #23]
 80115ca:	2b04      	cmp	r3, #4
 80115cc:	d127      	bne.n	801161e <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80115ce:	7afb      	ldrb	r3, [r7, #11]
 80115d0:	f003 0304 	and.w	r3, r3, #4
 80115d4:	2b00      	cmp	r3, #0
 80115d6:	d122      	bne.n	801161e <follow_path+0xd2>
 80115d8:	2305      	movs	r3, #5
 80115da:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 80115dc:	e01f      	b.n	801161e <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80115de:	7afb      	ldrb	r3, [r7, #11]
 80115e0:	f003 0304 	and.w	r3, r3, #4
 80115e4:	2b00      	cmp	r3, #0
 80115e6:	d11c      	bne.n	8011622 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 80115e8:	693b      	ldr	r3, [r7, #16]
 80115ea:	799b      	ldrb	r3, [r3, #6]
 80115ec:	f003 0310 	and.w	r3, r3, #16
 80115f0:	2b00      	cmp	r3, #0
 80115f2:	d102      	bne.n	80115fa <follow_path+0xae>
				res = FR_NO_PATH; break;
 80115f4:	2305      	movs	r3, #5
 80115f6:	75fb      	strb	r3, [r7, #23]
 80115f8:	e014      	b.n	8011624 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 80115fa:	68fb      	ldr	r3, [r7, #12]
 80115fc:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8011600:	687b      	ldr	r3, [r7, #4]
 8011602:	695b      	ldr	r3, [r3, #20]
 8011604:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011608:	4413      	add	r3, r2
 801160a:	4619      	mov	r1, r3
 801160c:	68f8      	ldr	r0, [r7, #12]
 801160e:	f7ff fe43 	bl	8011298 <ld_clust>
 8011612:	4602      	mov	r2, r0
 8011614:	693b      	ldr	r3, [r7, #16]
 8011616:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8011618:	e7c0      	b.n	801159c <follow_path+0x50>
			if (res != FR_OK) break;
 801161a:	bf00      	nop
 801161c:	e002      	b.n	8011624 <follow_path+0xd8>
				break;
 801161e:	bf00      	nop
 8011620:	e000      	b.n	8011624 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8011622:	bf00      	nop
			}
		}
	}

	return res;
 8011624:	7dfb      	ldrb	r3, [r7, #23]
}
 8011626:	4618      	mov	r0, r3
 8011628:	3718      	adds	r7, #24
 801162a:	46bd      	mov	sp, r7
 801162c:	bd80      	pop	{r7, pc}

0801162e <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 801162e:	b480      	push	{r7}
 8011630:	b087      	sub	sp, #28
 8011632:	af00      	add	r7, sp, #0
 8011634:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8011636:	f04f 33ff 	mov.w	r3, #4294967295
 801163a:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 801163c:	687b      	ldr	r3, [r7, #4]
 801163e:	681b      	ldr	r3, [r3, #0]
 8011640:	2b00      	cmp	r3, #0
 8011642:	d031      	beq.n	80116a8 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8011644:	687b      	ldr	r3, [r7, #4]
 8011646:	681b      	ldr	r3, [r3, #0]
 8011648:	617b      	str	r3, [r7, #20]
 801164a:	e002      	b.n	8011652 <get_ldnumber+0x24>
 801164c:	697b      	ldr	r3, [r7, #20]
 801164e:	3301      	adds	r3, #1
 8011650:	617b      	str	r3, [r7, #20]
 8011652:	697b      	ldr	r3, [r7, #20]
 8011654:	781b      	ldrb	r3, [r3, #0]
 8011656:	2b20      	cmp	r3, #32
 8011658:	d903      	bls.n	8011662 <get_ldnumber+0x34>
 801165a:	697b      	ldr	r3, [r7, #20]
 801165c:	781b      	ldrb	r3, [r3, #0]
 801165e:	2b3a      	cmp	r3, #58	@ 0x3a
 8011660:	d1f4      	bne.n	801164c <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8011662:	697b      	ldr	r3, [r7, #20]
 8011664:	781b      	ldrb	r3, [r3, #0]
 8011666:	2b3a      	cmp	r3, #58	@ 0x3a
 8011668:	d11c      	bne.n	80116a4 <get_ldnumber+0x76>
			tp = *path;
 801166a:	687b      	ldr	r3, [r7, #4]
 801166c:	681b      	ldr	r3, [r3, #0]
 801166e:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8011670:	68fb      	ldr	r3, [r7, #12]
 8011672:	1c5a      	adds	r2, r3, #1
 8011674:	60fa      	str	r2, [r7, #12]
 8011676:	781b      	ldrb	r3, [r3, #0]
 8011678:	3b30      	subs	r3, #48	@ 0x30
 801167a:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 801167c:	68bb      	ldr	r3, [r7, #8]
 801167e:	2b09      	cmp	r3, #9
 8011680:	d80e      	bhi.n	80116a0 <get_ldnumber+0x72>
 8011682:	68fa      	ldr	r2, [r7, #12]
 8011684:	697b      	ldr	r3, [r7, #20]
 8011686:	429a      	cmp	r2, r3
 8011688:	d10a      	bne.n	80116a0 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 801168a:	68bb      	ldr	r3, [r7, #8]
 801168c:	2b00      	cmp	r3, #0
 801168e:	d107      	bne.n	80116a0 <get_ldnumber+0x72>
					vol = (int)i;
 8011690:	68bb      	ldr	r3, [r7, #8]
 8011692:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8011694:	697b      	ldr	r3, [r7, #20]
 8011696:	3301      	adds	r3, #1
 8011698:	617b      	str	r3, [r7, #20]
 801169a:	687b      	ldr	r3, [r7, #4]
 801169c:	697a      	ldr	r2, [r7, #20]
 801169e:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80116a0:	693b      	ldr	r3, [r7, #16]
 80116a2:	e002      	b.n	80116aa <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80116a4:	2300      	movs	r3, #0
 80116a6:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80116a8:	693b      	ldr	r3, [r7, #16]
}
 80116aa:	4618      	mov	r0, r3
 80116ac:	371c      	adds	r7, #28
 80116ae:	46bd      	mov	sp, r7
 80116b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116b4:	4770      	bx	lr
	...

080116b8 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 80116b8:	b580      	push	{r7, lr}
 80116ba:	b082      	sub	sp, #8
 80116bc:	af00      	add	r7, sp, #0
 80116be:	6078      	str	r0, [r7, #4]
 80116c0:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80116c2:	687b      	ldr	r3, [r7, #4]
 80116c4:	2200      	movs	r2, #0
 80116c6:	70da      	strb	r2, [r3, #3]
 80116c8:	687b      	ldr	r3, [r7, #4]
 80116ca:	f04f 32ff 	mov.w	r2, #4294967295
 80116ce:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80116d0:	6839      	ldr	r1, [r7, #0]
 80116d2:	6878      	ldr	r0, [r7, #4]
 80116d4:	f7ff f8dc 	bl	8010890 <move_window>
 80116d8:	4603      	mov	r3, r0
 80116da:	2b00      	cmp	r3, #0
 80116dc:	d001      	beq.n	80116e2 <check_fs+0x2a>
 80116de:	2304      	movs	r3, #4
 80116e0:	e038      	b.n	8011754 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80116e2:	687b      	ldr	r3, [r7, #4]
 80116e4:	3330      	adds	r3, #48	@ 0x30
 80116e6:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 80116ea:	4618      	mov	r0, r3
 80116ec:	f7fe fe20 	bl	8010330 <ld_word>
 80116f0:	4603      	mov	r3, r0
 80116f2:	461a      	mov	r2, r3
 80116f4:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 80116f8:	429a      	cmp	r2, r3
 80116fa:	d001      	beq.n	8011700 <check_fs+0x48>
 80116fc:	2303      	movs	r3, #3
 80116fe:	e029      	b.n	8011754 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8011700:	687b      	ldr	r3, [r7, #4]
 8011702:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8011706:	2be9      	cmp	r3, #233	@ 0xe9
 8011708:	d009      	beq.n	801171e <check_fs+0x66>
 801170a:	687b      	ldr	r3, [r7, #4]
 801170c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8011710:	2beb      	cmp	r3, #235	@ 0xeb
 8011712:	d11e      	bne.n	8011752 <check_fs+0x9a>
 8011714:	687b      	ldr	r3, [r7, #4]
 8011716:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 801171a:	2b90      	cmp	r3, #144	@ 0x90
 801171c:	d119      	bne.n	8011752 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 801171e:	687b      	ldr	r3, [r7, #4]
 8011720:	3330      	adds	r3, #48	@ 0x30
 8011722:	3336      	adds	r3, #54	@ 0x36
 8011724:	4618      	mov	r0, r3
 8011726:	f7fe fe1b 	bl	8010360 <ld_dword>
 801172a:	4603      	mov	r3, r0
 801172c:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8011730:	4a0a      	ldr	r2, [pc, #40]	@ (801175c <check_fs+0xa4>)
 8011732:	4293      	cmp	r3, r2
 8011734:	d101      	bne.n	801173a <check_fs+0x82>
 8011736:	2300      	movs	r3, #0
 8011738:	e00c      	b.n	8011754 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 801173a:	687b      	ldr	r3, [r7, #4]
 801173c:	3330      	adds	r3, #48	@ 0x30
 801173e:	3352      	adds	r3, #82	@ 0x52
 8011740:	4618      	mov	r0, r3
 8011742:	f7fe fe0d 	bl	8010360 <ld_dword>
 8011746:	4603      	mov	r3, r0
 8011748:	4a05      	ldr	r2, [pc, #20]	@ (8011760 <check_fs+0xa8>)
 801174a:	4293      	cmp	r3, r2
 801174c:	d101      	bne.n	8011752 <check_fs+0x9a>
 801174e:	2300      	movs	r3, #0
 8011750:	e000      	b.n	8011754 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8011752:	2302      	movs	r3, #2
}
 8011754:	4618      	mov	r0, r3
 8011756:	3708      	adds	r7, #8
 8011758:	46bd      	mov	sp, r7
 801175a:	bd80      	pop	{r7, pc}
 801175c:	00544146 	.word	0x00544146
 8011760:	33544146 	.word	0x33544146

08011764 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8011764:	b580      	push	{r7, lr}
 8011766:	b096      	sub	sp, #88	@ 0x58
 8011768:	af00      	add	r7, sp, #0
 801176a:	60f8      	str	r0, [r7, #12]
 801176c:	60b9      	str	r1, [r7, #8]
 801176e:	4613      	mov	r3, r2
 8011770:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8011772:	68bb      	ldr	r3, [r7, #8]
 8011774:	2200      	movs	r2, #0
 8011776:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8011778:	68f8      	ldr	r0, [r7, #12]
 801177a:	f7ff ff58 	bl	801162e <get_ldnumber>
 801177e:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8011780:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011782:	2b00      	cmp	r3, #0
 8011784:	da01      	bge.n	801178a <find_volume+0x26>
 8011786:	230b      	movs	r3, #11
 8011788:	e22d      	b.n	8011be6 <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 801178a:	4aa1      	ldr	r2, [pc, #644]	@ (8011a10 <find_volume+0x2ac>)
 801178c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801178e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011792:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8011794:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011796:	2b00      	cmp	r3, #0
 8011798:	d101      	bne.n	801179e <find_volume+0x3a>
 801179a:	230c      	movs	r3, #12
 801179c:	e223      	b.n	8011be6 <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 801179e:	68bb      	ldr	r3, [r7, #8]
 80117a0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80117a2:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80117a4:	79fb      	ldrb	r3, [r7, #7]
 80117a6:	f023 0301 	bic.w	r3, r3, #1
 80117aa:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 80117ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80117ae:	781b      	ldrb	r3, [r3, #0]
 80117b0:	2b00      	cmp	r3, #0
 80117b2:	d01a      	beq.n	80117ea <find_volume+0x86>
		stat = disk_status(fs->drv);
 80117b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80117b6:	785b      	ldrb	r3, [r3, #1]
 80117b8:	4618      	mov	r0, r3
 80117ba:	f7fe fd19 	bl	80101f0 <disk_status>
 80117be:	4603      	mov	r3, r0
 80117c0:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80117c4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80117c8:	f003 0301 	and.w	r3, r3, #1
 80117cc:	2b00      	cmp	r3, #0
 80117ce:	d10c      	bne.n	80117ea <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80117d0:	79fb      	ldrb	r3, [r7, #7]
 80117d2:	2b00      	cmp	r3, #0
 80117d4:	d007      	beq.n	80117e6 <find_volume+0x82>
 80117d6:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80117da:	f003 0304 	and.w	r3, r3, #4
 80117de:	2b00      	cmp	r3, #0
 80117e0:	d001      	beq.n	80117e6 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 80117e2:	230a      	movs	r3, #10
 80117e4:	e1ff      	b.n	8011be6 <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 80117e6:	2300      	movs	r3, #0
 80117e8:	e1fd      	b.n	8011be6 <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80117ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80117ec:	2200      	movs	r2, #0
 80117ee:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80117f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80117f2:	b2da      	uxtb	r2, r3
 80117f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80117f6:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80117f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80117fa:	785b      	ldrb	r3, [r3, #1]
 80117fc:	4618      	mov	r0, r3
 80117fe:	f7fe fd11 	bl	8010224 <disk_initialize>
 8011802:	4603      	mov	r3, r0
 8011804:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8011808:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801180c:	f003 0301 	and.w	r3, r3, #1
 8011810:	2b00      	cmp	r3, #0
 8011812:	d001      	beq.n	8011818 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8011814:	2303      	movs	r3, #3
 8011816:	e1e6      	b.n	8011be6 <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8011818:	79fb      	ldrb	r3, [r7, #7]
 801181a:	2b00      	cmp	r3, #0
 801181c:	d007      	beq.n	801182e <find_volume+0xca>
 801181e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8011822:	f003 0304 	and.w	r3, r3, #4
 8011826:	2b00      	cmp	r3, #0
 8011828:	d001      	beq.n	801182e <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 801182a:	230a      	movs	r3, #10
 801182c:	e1db      	b.n	8011be6 <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 801182e:	2300      	movs	r3, #0
 8011830:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8011832:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8011834:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8011836:	f7ff ff3f 	bl	80116b8 <check_fs>
 801183a:	4603      	mov	r3, r0
 801183c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8011840:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8011844:	2b02      	cmp	r3, #2
 8011846:	d149      	bne.n	80118dc <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8011848:	2300      	movs	r3, #0
 801184a:	643b      	str	r3, [r7, #64]	@ 0x40
 801184c:	e01e      	b.n	801188c <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 801184e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011850:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8011854:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011856:	011b      	lsls	r3, r3, #4
 8011858:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 801185c:	4413      	add	r3, r2
 801185e:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8011860:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011862:	3304      	adds	r3, #4
 8011864:	781b      	ldrb	r3, [r3, #0]
 8011866:	2b00      	cmp	r3, #0
 8011868:	d006      	beq.n	8011878 <find_volume+0x114>
 801186a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801186c:	3308      	adds	r3, #8
 801186e:	4618      	mov	r0, r3
 8011870:	f7fe fd76 	bl	8010360 <ld_dword>
 8011874:	4602      	mov	r2, r0
 8011876:	e000      	b.n	801187a <find_volume+0x116>
 8011878:	2200      	movs	r2, #0
 801187a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801187c:	009b      	lsls	r3, r3, #2
 801187e:	3358      	adds	r3, #88	@ 0x58
 8011880:	443b      	add	r3, r7
 8011882:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8011886:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011888:	3301      	adds	r3, #1
 801188a:	643b      	str	r3, [r7, #64]	@ 0x40
 801188c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801188e:	2b03      	cmp	r3, #3
 8011890:	d9dd      	bls.n	801184e <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8011892:	2300      	movs	r3, #0
 8011894:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 8011896:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011898:	2b00      	cmp	r3, #0
 801189a:	d002      	beq.n	80118a2 <find_volume+0x13e>
 801189c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801189e:	3b01      	subs	r3, #1
 80118a0:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 80118a2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80118a4:	009b      	lsls	r3, r3, #2
 80118a6:	3358      	adds	r3, #88	@ 0x58
 80118a8:	443b      	add	r3, r7
 80118aa:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80118ae:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80118b0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80118b2:	2b00      	cmp	r3, #0
 80118b4:	d005      	beq.n	80118c2 <find_volume+0x15e>
 80118b6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80118b8:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80118ba:	f7ff fefd 	bl	80116b8 <check_fs>
 80118be:	4603      	mov	r3, r0
 80118c0:	e000      	b.n	80118c4 <find_volume+0x160>
 80118c2:	2303      	movs	r3, #3
 80118c4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80118c8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80118cc:	2b01      	cmp	r3, #1
 80118ce:	d905      	bls.n	80118dc <find_volume+0x178>
 80118d0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80118d2:	3301      	adds	r3, #1
 80118d4:	643b      	str	r3, [r7, #64]	@ 0x40
 80118d6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80118d8:	2b03      	cmp	r3, #3
 80118da:	d9e2      	bls.n	80118a2 <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80118dc:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80118e0:	2b04      	cmp	r3, #4
 80118e2:	d101      	bne.n	80118e8 <find_volume+0x184>
 80118e4:	2301      	movs	r3, #1
 80118e6:	e17e      	b.n	8011be6 <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80118e8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80118ec:	2b01      	cmp	r3, #1
 80118ee:	d901      	bls.n	80118f4 <find_volume+0x190>
 80118f0:	230d      	movs	r3, #13
 80118f2:	e178      	b.n	8011be6 <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80118f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80118f6:	3330      	adds	r3, #48	@ 0x30
 80118f8:	330b      	adds	r3, #11
 80118fa:	4618      	mov	r0, r3
 80118fc:	f7fe fd18 	bl	8010330 <ld_word>
 8011900:	4603      	mov	r3, r0
 8011902:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8011906:	d001      	beq.n	801190c <find_volume+0x1a8>
 8011908:	230d      	movs	r3, #13
 801190a:	e16c      	b.n	8011be6 <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 801190c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801190e:	3330      	adds	r3, #48	@ 0x30
 8011910:	3316      	adds	r3, #22
 8011912:	4618      	mov	r0, r3
 8011914:	f7fe fd0c 	bl	8010330 <ld_word>
 8011918:	4603      	mov	r3, r0
 801191a:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 801191c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801191e:	2b00      	cmp	r3, #0
 8011920:	d106      	bne.n	8011930 <find_volume+0x1cc>
 8011922:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011924:	3330      	adds	r3, #48	@ 0x30
 8011926:	3324      	adds	r3, #36	@ 0x24
 8011928:	4618      	mov	r0, r3
 801192a:	f7fe fd19 	bl	8010360 <ld_dword>
 801192e:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 8011930:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011932:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8011934:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8011936:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011938:	f893 2040 	ldrb.w	r2, [r3, #64]	@ 0x40
 801193c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801193e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8011940:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011942:	789b      	ldrb	r3, [r3, #2]
 8011944:	2b01      	cmp	r3, #1
 8011946:	d005      	beq.n	8011954 <find_volume+0x1f0>
 8011948:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801194a:	789b      	ldrb	r3, [r3, #2]
 801194c:	2b02      	cmp	r3, #2
 801194e:	d001      	beq.n	8011954 <find_volume+0x1f0>
 8011950:	230d      	movs	r3, #13
 8011952:	e148      	b.n	8011be6 <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8011954:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011956:	789b      	ldrb	r3, [r3, #2]
 8011958:	461a      	mov	r2, r3
 801195a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801195c:	fb02 f303 	mul.w	r3, r2, r3
 8011960:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8011962:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011964:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8011968:	461a      	mov	r2, r3
 801196a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801196c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 801196e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011970:	895b      	ldrh	r3, [r3, #10]
 8011972:	2b00      	cmp	r3, #0
 8011974:	d008      	beq.n	8011988 <find_volume+0x224>
 8011976:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011978:	895b      	ldrh	r3, [r3, #10]
 801197a:	461a      	mov	r2, r3
 801197c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801197e:	895b      	ldrh	r3, [r3, #10]
 8011980:	3b01      	subs	r3, #1
 8011982:	4013      	ands	r3, r2
 8011984:	2b00      	cmp	r3, #0
 8011986:	d001      	beq.n	801198c <find_volume+0x228>
 8011988:	230d      	movs	r3, #13
 801198a:	e12c      	b.n	8011be6 <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 801198c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801198e:	3330      	adds	r3, #48	@ 0x30
 8011990:	3311      	adds	r3, #17
 8011992:	4618      	mov	r0, r3
 8011994:	f7fe fccc 	bl	8010330 <ld_word>
 8011998:	4603      	mov	r3, r0
 801199a:	461a      	mov	r2, r3
 801199c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801199e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80119a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80119a2:	891b      	ldrh	r3, [r3, #8]
 80119a4:	f003 030f 	and.w	r3, r3, #15
 80119a8:	b29b      	uxth	r3, r3
 80119aa:	2b00      	cmp	r3, #0
 80119ac:	d001      	beq.n	80119b2 <find_volume+0x24e>
 80119ae:	230d      	movs	r3, #13
 80119b0:	e119      	b.n	8011be6 <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80119b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80119b4:	3330      	adds	r3, #48	@ 0x30
 80119b6:	3313      	adds	r3, #19
 80119b8:	4618      	mov	r0, r3
 80119ba:	f7fe fcb9 	bl	8010330 <ld_word>
 80119be:	4603      	mov	r3, r0
 80119c0:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80119c2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80119c4:	2b00      	cmp	r3, #0
 80119c6:	d106      	bne.n	80119d6 <find_volume+0x272>
 80119c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80119ca:	3330      	adds	r3, #48	@ 0x30
 80119cc:	3320      	adds	r3, #32
 80119ce:	4618      	mov	r0, r3
 80119d0:	f7fe fcc6 	bl	8010360 <ld_dword>
 80119d4:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80119d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80119d8:	3330      	adds	r3, #48	@ 0x30
 80119da:	330e      	adds	r3, #14
 80119dc:	4618      	mov	r0, r3
 80119de:	f7fe fca7 	bl	8010330 <ld_word>
 80119e2:	4603      	mov	r3, r0
 80119e4:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80119e6:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80119e8:	2b00      	cmp	r3, #0
 80119ea:	d101      	bne.n	80119f0 <find_volume+0x28c>
 80119ec:	230d      	movs	r3, #13
 80119ee:	e0fa      	b.n	8011be6 <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80119f0:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 80119f2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80119f4:	4413      	add	r3, r2
 80119f6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80119f8:	8912      	ldrh	r2, [r2, #8]
 80119fa:	0912      	lsrs	r2, r2, #4
 80119fc:	b292      	uxth	r2, r2
 80119fe:	4413      	add	r3, r2
 8011a00:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8011a02:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8011a04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011a06:	429a      	cmp	r2, r3
 8011a08:	d204      	bcs.n	8011a14 <find_volume+0x2b0>
 8011a0a:	230d      	movs	r3, #13
 8011a0c:	e0eb      	b.n	8011be6 <find_volume+0x482>
 8011a0e:	bf00      	nop
 8011a10:	24000b88 	.word	0x24000b88
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8011a14:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8011a16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011a18:	1ad3      	subs	r3, r2, r3
 8011a1a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8011a1c:	8952      	ldrh	r2, [r2, #10]
 8011a1e:	fbb3 f3f2 	udiv	r3, r3, r2
 8011a22:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8011a24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011a26:	2b00      	cmp	r3, #0
 8011a28:	d101      	bne.n	8011a2e <find_volume+0x2ca>
 8011a2a:	230d      	movs	r3, #13
 8011a2c:	e0db      	b.n	8011be6 <find_volume+0x482>
		fmt = FS_FAT32;
 8011a2e:	2303      	movs	r3, #3
 8011a30:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8011a34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011a36:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8011a3a:	4293      	cmp	r3, r2
 8011a3c:	d802      	bhi.n	8011a44 <find_volume+0x2e0>
 8011a3e:	2302      	movs	r3, #2
 8011a40:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8011a44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011a46:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8011a4a:	4293      	cmp	r3, r2
 8011a4c:	d802      	bhi.n	8011a54 <find_volume+0x2f0>
 8011a4e:	2301      	movs	r3, #1
 8011a50:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8011a54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011a56:	1c9a      	adds	r2, r3, #2
 8011a58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011a5a:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 8011a5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011a5e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8011a60:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8011a62:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8011a64:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011a66:	441a      	add	r2, r3
 8011a68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011a6a:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8011a6c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8011a6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011a70:	441a      	add	r2, r3
 8011a72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011a74:	629a      	str	r2, [r3, #40]	@ 0x28
		if (fmt == FS_FAT32) {
 8011a76:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8011a7a:	2b03      	cmp	r3, #3
 8011a7c:	d11e      	bne.n	8011abc <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8011a7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011a80:	3330      	adds	r3, #48	@ 0x30
 8011a82:	332a      	adds	r3, #42	@ 0x2a
 8011a84:	4618      	mov	r0, r3
 8011a86:	f7fe fc53 	bl	8010330 <ld_word>
 8011a8a:	4603      	mov	r3, r0
 8011a8c:	2b00      	cmp	r3, #0
 8011a8e:	d001      	beq.n	8011a94 <find_volume+0x330>
 8011a90:	230d      	movs	r3, #13
 8011a92:	e0a8      	b.n	8011be6 <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8011a94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011a96:	891b      	ldrh	r3, [r3, #8]
 8011a98:	2b00      	cmp	r3, #0
 8011a9a:	d001      	beq.n	8011aa0 <find_volume+0x33c>
 8011a9c:	230d      	movs	r3, #13
 8011a9e:	e0a2      	b.n	8011be6 <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8011aa0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011aa2:	3330      	adds	r3, #48	@ 0x30
 8011aa4:	332c      	adds	r3, #44	@ 0x2c
 8011aa6:	4618      	mov	r0, r3
 8011aa8:	f7fe fc5a 	bl	8010360 <ld_dword>
 8011aac:	4602      	mov	r2, r0
 8011aae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011ab0:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8011ab2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011ab4:	695b      	ldr	r3, [r3, #20]
 8011ab6:	009b      	lsls	r3, r3, #2
 8011ab8:	647b      	str	r3, [r7, #68]	@ 0x44
 8011aba:	e01f      	b.n	8011afc <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8011abc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011abe:	891b      	ldrh	r3, [r3, #8]
 8011ac0:	2b00      	cmp	r3, #0
 8011ac2:	d101      	bne.n	8011ac8 <find_volume+0x364>
 8011ac4:	230d      	movs	r3, #13
 8011ac6:	e08e      	b.n	8011be6 <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8011ac8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011aca:	6a1a      	ldr	r2, [r3, #32]
 8011acc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011ace:	441a      	add	r2, r3
 8011ad0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011ad2:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8011ad4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8011ad8:	2b02      	cmp	r3, #2
 8011ada:	d103      	bne.n	8011ae4 <find_volume+0x380>
 8011adc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011ade:	695b      	ldr	r3, [r3, #20]
 8011ae0:	005b      	lsls	r3, r3, #1
 8011ae2:	e00a      	b.n	8011afa <find_volume+0x396>
 8011ae4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011ae6:	695a      	ldr	r2, [r3, #20]
 8011ae8:	4613      	mov	r3, r2
 8011aea:	005b      	lsls	r3, r3, #1
 8011aec:	4413      	add	r3, r2
 8011aee:	085a      	lsrs	r2, r3, #1
 8011af0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011af2:	695b      	ldr	r3, [r3, #20]
 8011af4:	f003 0301 	and.w	r3, r3, #1
 8011af8:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8011afa:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8011afc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011afe:	699a      	ldr	r2, [r3, #24]
 8011b00:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011b02:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 8011b06:	0a5b      	lsrs	r3, r3, #9
 8011b08:	429a      	cmp	r2, r3
 8011b0a:	d201      	bcs.n	8011b10 <find_volume+0x3ac>
 8011b0c:	230d      	movs	r3, #13
 8011b0e:	e06a      	b.n	8011be6 <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8011b10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011b12:	f04f 32ff 	mov.w	r2, #4294967295
 8011b16:	611a      	str	r2, [r3, #16]
 8011b18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011b1a:	691a      	ldr	r2, [r3, #16]
 8011b1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011b1e:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 8011b20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011b22:	2280      	movs	r2, #128	@ 0x80
 8011b24:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8011b26:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8011b2a:	2b03      	cmp	r3, #3
 8011b2c:	d149      	bne.n	8011bc2 <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8011b2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011b30:	3330      	adds	r3, #48	@ 0x30
 8011b32:	3330      	adds	r3, #48	@ 0x30
 8011b34:	4618      	mov	r0, r3
 8011b36:	f7fe fbfb 	bl	8010330 <ld_word>
 8011b3a:	4603      	mov	r3, r0
 8011b3c:	2b01      	cmp	r3, #1
 8011b3e:	d140      	bne.n	8011bc2 <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 8011b40:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011b42:	3301      	adds	r3, #1
 8011b44:	4619      	mov	r1, r3
 8011b46:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8011b48:	f7fe fea2 	bl	8010890 <move_window>
 8011b4c:	4603      	mov	r3, r0
 8011b4e:	2b00      	cmp	r3, #0
 8011b50:	d137      	bne.n	8011bc2 <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 8011b52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011b54:	2200      	movs	r2, #0
 8011b56:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8011b58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011b5a:	3330      	adds	r3, #48	@ 0x30
 8011b5c:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8011b60:	4618      	mov	r0, r3
 8011b62:	f7fe fbe5 	bl	8010330 <ld_word>
 8011b66:	4603      	mov	r3, r0
 8011b68:	461a      	mov	r2, r3
 8011b6a:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8011b6e:	429a      	cmp	r2, r3
 8011b70:	d127      	bne.n	8011bc2 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8011b72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011b74:	3330      	adds	r3, #48	@ 0x30
 8011b76:	4618      	mov	r0, r3
 8011b78:	f7fe fbf2 	bl	8010360 <ld_dword>
 8011b7c:	4603      	mov	r3, r0
 8011b7e:	4a1c      	ldr	r2, [pc, #112]	@ (8011bf0 <find_volume+0x48c>)
 8011b80:	4293      	cmp	r3, r2
 8011b82:	d11e      	bne.n	8011bc2 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8011b84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011b86:	3330      	adds	r3, #48	@ 0x30
 8011b88:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8011b8c:	4618      	mov	r0, r3
 8011b8e:	f7fe fbe7 	bl	8010360 <ld_dword>
 8011b92:	4603      	mov	r3, r0
 8011b94:	4a17      	ldr	r2, [pc, #92]	@ (8011bf4 <find_volume+0x490>)
 8011b96:	4293      	cmp	r3, r2
 8011b98:	d113      	bne.n	8011bc2 <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8011b9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011b9c:	3330      	adds	r3, #48	@ 0x30
 8011b9e:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8011ba2:	4618      	mov	r0, r3
 8011ba4:	f7fe fbdc 	bl	8010360 <ld_dword>
 8011ba8:	4602      	mov	r2, r0
 8011baa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011bac:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8011bae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011bb0:	3330      	adds	r3, #48	@ 0x30
 8011bb2:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8011bb6:	4618      	mov	r0, r3
 8011bb8:	f7fe fbd2 	bl	8010360 <ld_dword>
 8011bbc:	4602      	mov	r2, r0
 8011bbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011bc0:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8011bc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011bc4:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8011bc8:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8011bca:	4b0b      	ldr	r3, [pc, #44]	@ (8011bf8 <find_volume+0x494>)
 8011bcc:	881b      	ldrh	r3, [r3, #0]
 8011bce:	3301      	adds	r3, #1
 8011bd0:	b29a      	uxth	r2, r3
 8011bd2:	4b09      	ldr	r3, [pc, #36]	@ (8011bf8 <find_volume+0x494>)
 8011bd4:	801a      	strh	r2, [r3, #0]
 8011bd6:	4b08      	ldr	r3, [pc, #32]	@ (8011bf8 <find_volume+0x494>)
 8011bd8:	881a      	ldrh	r2, [r3, #0]
 8011bda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011bdc:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8011bde:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8011be0:	f7fe fdee 	bl	80107c0 <clear_lock>
#endif
	return FR_OK;
 8011be4:	2300      	movs	r3, #0
}
 8011be6:	4618      	mov	r0, r3
 8011be8:	3758      	adds	r7, #88	@ 0x58
 8011bea:	46bd      	mov	sp, r7
 8011bec:	bd80      	pop	{r7, pc}
 8011bee:	bf00      	nop
 8011bf0:	41615252 	.word	0x41615252
 8011bf4:	61417272 	.word	0x61417272
 8011bf8:	24000b8c 	.word	0x24000b8c

08011bfc <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8011bfc:	b580      	push	{r7, lr}
 8011bfe:	b084      	sub	sp, #16
 8011c00:	af00      	add	r7, sp, #0
 8011c02:	6078      	str	r0, [r7, #4]
 8011c04:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8011c06:	2309      	movs	r3, #9
 8011c08:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8011c0a:	687b      	ldr	r3, [r7, #4]
 8011c0c:	2b00      	cmp	r3, #0
 8011c0e:	d01c      	beq.n	8011c4a <validate+0x4e>
 8011c10:	687b      	ldr	r3, [r7, #4]
 8011c12:	681b      	ldr	r3, [r3, #0]
 8011c14:	2b00      	cmp	r3, #0
 8011c16:	d018      	beq.n	8011c4a <validate+0x4e>
 8011c18:	687b      	ldr	r3, [r7, #4]
 8011c1a:	681b      	ldr	r3, [r3, #0]
 8011c1c:	781b      	ldrb	r3, [r3, #0]
 8011c1e:	2b00      	cmp	r3, #0
 8011c20:	d013      	beq.n	8011c4a <validate+0x4e>
 8011c22:	687b      	ldr	r3, [r7, #4]
 8011c24:	889a      	ldrh	r2, [r3, #4]
 8011c26:	687b      	ldr	r3, [r7, #4]
 8011c28:	681b      	ldr	r3, [r3, #0]
 8011c2a:	88db      	ldrh	r3, [r3, #6]
 8011c2c:	429a      	cmp	r2, r3
 8011c2e:	d10c      	bne.n	8011c4a <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8011c30:	687b      	ldr	r3, [r7, #4]
 8011c32:	681b      	ldr	r3, [r3, #0]
 8011c34:	785b      	ldrb	r3, [r3, #1]
 8011c36:	4618      	mov	r0, r3
 8011c38:	f7fe fada 	bl	80101f0 <disk_status>
 8011c3c:	4603      	mov	r3, r0
 8011c3e:	f003 0301 	and.w	r3, r3, #1
 8011c42:	2b00      	cmp	r3, #0
 8011c44:	d101      	bne.n	8011c4a <validate+0x4e>
			res = FR_OK;
 8011c46:	2300      	movs	r3, #0
 8011c48:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8011c4a:	7bfb      	ldrb	r3, [r7, #15]
 8011c4c:	2b00      	cmp	r3, #0
 8011c4e:	d102      	bne.n	8011c56 <validate+0x5a>
 8011c50:	687b      	ldr	r3, [r7, #4]
 8011c52:	681b      	ldr	r3, [r3, #0]
 8011c54:	e000      	b.n	8011c58 <validate+0x5c>
 8011c56:	2300      	movs	r3, #0
 8011c58:	683a      	ldr	r2, [r7, #0]
 8011c5a:	6013      	str	r3, [r2, #0]
	return res;
 8011c5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8011c5e:	4618      	mov	r0, r3
 8011c60:	3710      	adds	r7, #16
 8011c62:	46bd      	mov	sp, r7
 8011c64:	bd80      	pop	{r7, pc}
	...

08011c68 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8011c68:	b580      	push	{r7, lr}
 8011c6a:	b088      	sub	sp, #32
 8011c6c:	af00      	add	r7, sp, #0
 8011c6e:	60f8      	str	r0, [r7, #12]
 8011c70:	60b9      	str	r1, [r7, #8]
 8011c72:	4613      	mov	r3, r2
 8011c74:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8011c76:	68bb      	ldr	r3, [r7, #8]
 8011c78:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8011c7a:	f107 0310 	add.w	r3, r7, #16
 8011c7e:	4618      	mov	r0, r3
 8011c80:	f7ff fcd5 	bl	801162e <get_ldnumber>
 8011c84:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8011c86:	69fb      	ldr	r3, [r7, #28]
 8011c88:	2b00      	cmp	r3, #0
 8011c8a:	da01      	bge.n	8011c90 <f_mount+0x28>
 8011c8c:	230b      	movs	r3, #11
 8011c8e:	e02b      	b.n	8011ce8 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8011c90:	4a17      	ldr	r2, [pc, #92]	@ (8011cf0 <f_mount+0x88>)
 8011c92:	69fb      	ldr	r3, [r7, #28]
 8011c94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011c98:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8011c9a:	69bb      	ldr	r3, [r7, #24]
 8011c9c:	2b00      	cmp	r3, #0
 8011c9e:	d005      	beq.n	8011cac <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8011ca0:	69b8      	ldr	r0, [r7, #24]
 8011ca2:	f7fe fd8d 	bl	80107c0 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8011ca6:	69bb      	ldr	r3, [r7, #24]
 8011ca8:	2200      	movs	r2, #0
 8011caa:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8011cac:	68fb      	ldr	r3, [r7, #12]
 8011cae:	2b00      	cmp	r3, #0
 8011cb0:	d002      	beq.n	8011cb8 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8011cb2:	68fb      	ldr	r3, [r7, #12]
 8011cb4:	2200      	movs	r2, #0
 8011cb6:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8011cb8:	68fa      	ldr	r2, [r7, #12]
 8011cba:	490d      	ldr	r1, [pc, #52]	@ (8011cf0 <f_mount+0x88>)
 8011cbc:	69fb      	ldr	r3, [r7, #28]
 8011cbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8011cc2:	68fb      	ldr	r3, [r7, #12]
 8011cc4:	2b00      	cmp	r3, #0
 8011cc6:	d002      	beq.n	8011cce <f_mount+0x66>
 8011cc8:	79fb      	ldrb	r3, [r7, #7]
 8011cca:	2b01      	cmp	r3, #1
 8011ccc:	d001      	beq.n	8011cd2 <f_mount+0x6a>
 8011cce:	2300      	movs	r3, #0
 8011cd0:	e00a      	b.n	8011ce8 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8011cd2:	f107 010c 	add.w	r1, r7, #12
 8011cd6:	f107 0308 	add.w	r3, r7, #8
 8011cda:	2200      	movs	r2, #0
 8011cdc:	4618      	mov	r0, r3
 8011cde:	f7ff fd41 	bl	8011764 <find_volume>
 8011ce2:	4603      	mov	r3, r0
 8011ce4:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8011ce6:	7dfb      	ldrb	r3, [r7, #23]
}
 8011ce8:	4618      	mov	r0, r3
 8011cea:	3720      	adds	r7, #32
 8011cec:	46bd      	mov	sp, r7
 8011cee:	bd80      	pop	{r7, pc}
 8011cf0:	24000b88 	.word	0x24000b88

08011cf4 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8011cf4:	b580      	push	{r7, lr}
 8011cf6:	b098      	sub	sp, #96	@ 0x60
 8011cf8:	af00      	add	r7, sp, #0
 8011cfa:	60f8      	str	r0, [r7, #12]
 8011cfc:	60b9      	str	r1, [r7, #8]
 8011cfe:	4613      	mov	r3, r2
 8011d00:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8011d02:	68fb      	ldr	r3, [r7, #12]
 8011d04:	2b00      	cmp	r3, #0
 8011d06:	d101      	bne.n	8011d0c <f_open+0x18>
 8011d08:	2309      	movs	r3, #9
 8011d0a:	e1a9      	b.n	8012060 <f_open+0x36c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8011d0c:	79fb      	ldrb	r3, [r7, #7]
 8011d0e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8011d12:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8011d14:	79fa      	ldrb	r2, [r7, #7]
 8011d16:	f107 0110 	add.w	r1, r7, #16
 8011d1a:	f107 0308 	add.w	r3, r7, #8
 8011d1e:	4618      	mov	r0, r3
 8011d20:	f7ff fd20 	bl	8011764 <find_volume>
 8011d24:	4603      	mov	r3, r0
 8011d26:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 8011d2a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8011d2e:	2b00      	cmp	r3, #0
 8011d30:	f040 818d 	bne.w	801204e <f_open+0x35a>
		dj.obj.fs = fs;
 8011d34:	693b      	ldr	r3, [r7, #16]
 8011d36:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8011d38:	68ba      	ldr	r2, [r7, #8]
 8011d3a:	f107 0314 	add.w	r3, r7, #20
 8011d3e:	4611      	mov	r1, r2
 8011d40:	4618      	mov	r0, r3
 8011d42:	f7ff fc03 	bl	801154c <follow_path>
 8011d46:	4603      	mov	r3, r0
 8011d48:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8011d4c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8011d50:	2b00      	cmp	r3, #0
 8011d52:	d118      	bne.n	8011d86 <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8011d54:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8011d58:	b25b      	sxtb	r3, r3
 8011d5a:	2b00      	cmp	r3, #0
 8011d5c:	da03      	bge.n	8011d66 <f_open+0x72>
				res = FR_INVALID_NAME;
 8011d5e:	2306      	movs	r3, #6
 8011d60:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8011d64:	e00f      	b.n	8011d86 <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8011d66:	79fb      	ldrb	r3, [r7, #7]
 8011d68:	2b01      	cmp	r3, #1
 8011d6a:	bf8c      	ite	hi
 8011d6c:	2301      	movhi	r3, #1
 8011d6e:	2300      	movls	r3, #0
 8011d70:	b2db      	uxtb	r3, r3
 8011d72:	461a      	mov	r2, r3
 8011d74:	f107 0314 	add.w	r3, r7, #20
 8011d78:	4611      	mov	r1, r2
 8011d7a:	4618      	mov	r0, r3
 8011d7c:	f7fe fbd8 	bl	8010530 <chk_lock>
 8011d80:	4603      	mov	r3, r0
 8011d82:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8011d86:	79fb      	ldrb	r3, [r7, #7]
 8011d88:	f003 031c 	and.w	r3, r3, #28
 8011d8c:	2b00      	cmp	r3, #0
 8011d8e:	d07f      	beq.n	8011e90 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 8011d90:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8011d94:	2b00      	cmp	r3, #0
 8011d96:	d017      	beq.n	8011dc8 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8011d98:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8011d9c:	2b04      	cmp	r3, #4
 8011d9e:	d10e      	bne.n	8011dbe <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8011da0:	f7fe fc22 	bl	80105e8 <enq_lock>
 8011da4:	4603      	mov	r3, r0
 8011da6:	2b00      	cmp	r3, #0
 8011da8:	d006      	beq.n	8011db8 <f_open+0xc4>
 8011daa:	f107 0314 	add.w	r3, r7, #20
 8011dae:	4618      	mov	r0, r3
 8011db0:	f7ff fb06 	bl	80113c0 <dir_register>
 8011db4:	4603      	mov	r3, r0
 8011db6:	e000      	b.n	8011dba <f_open+0xc6>
 8011db8:	2312      	movs	r3, #18
 8011dba:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8011dbe:	79fb      	ldrb	r3, [r7, #7]
 8011dc0:	f043 0308 	orr.w	r3, r3, #8
 8011dc4:	71fb      	strb	r3, [r7, #7]
 8011dc6:	e010      	b.n	8011dea <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8011dc8:	7ebb      	ldrb	r3, [r7, #26]
 8011dca:	f003 0311 	and.w	r3, r3, #17
 8011dce:	2b00      	cmp	r3, #0
 8011dd0:	d003      	beq.n	8011dda <f_open+0xe6>
					res = FR_DENIED;
 8011dd2:	2307      	movs	r3, #7
 8011dd4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8011dd8:	e007      	b.n	8011dea <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8011dda:	79fb      	ldrb	r3, [r7, #7]
 8011ddc:	f003 0304 	and.w	r3, r3, #4
 8011de0:	2b00      	cmp	r3, #0
 8011de2:	d002      	beq.n	8011dea <f_open+0xf6>
 8011de4:	2308      	movs	r3, #8
 8011de6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8011dea:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8011dee:	2b00      	cmp	r3, #0
 8011df0:	d168      	bne.n	8011ec4 <f_open+0x1d0>
 8011df2:	79fb      	ldrb	r3, [r7, #7]
 8011df4:	f003 0308 	and.w	r3, r3, #8
 8011df8:	2b00      	cmp	r3, #0
 8011dfa:	d063      	beq.n	8011ec4 <f_open+0x1d0>
				dw = GET_FATTIME();
 8011dfc:	f7fd fea8 	bl	800fb50 <get_fattime>
 8011e00:	6538      	str	r0, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8011e02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011e04:	330e      	adds	r3, #14
 8011e06:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8011e08:	4618      	mov	r0, r3
 8011e0a:	f7fe fae7 	bl	80103dc <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8011e0e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011e10:	3316      	adds	r3, #22
 8011e12:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8011e14:	4618      	mov	r0, r3
 8011e16:	f7fe fae1 	bl	80103dc <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8011e1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011e1c:	330b      	adds	r3, #11
 8011e1e:	2220      	movs	r2, #32
 8011e20:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8011e22:	693b      	ldr	r3, [r7, #16]
 8011e24:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8011e26:	4611      	mov	r1, r2
 8011e28:	4618      	mov	r0, r3
 8011e2a:	f7ff fa35 	bl	8011298 <ld_clust>
 8011e2e:	64f8      	str	r0, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8011e30:	693b      	ldr	r3, [r7, #16]
 8011e32:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8011e34:	2200      	movs	r2, #0
 8011e36:	4618      	mov	r0, r3
 8011e38:	f7ff fa4d 	bl	80112d6 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8011e3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011e3e:	331c      	adds	r3, #28
 8011e40:	2100      	movs	r1, #0
 8011e42:	4618      	mov	r0, r3
 8011e44:	f7fe faca 	bl	80103dc <st_dword>
					fs->wflag = 1;
 8011e48:	693b      	ldr	r3, [r7, #16]
 8011e4a:	2201      	movs	r2, #1
 8011e4c:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8011e4e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011e50:	2b00      	cmp	r3, #0
 8011e52:	d037      	beq.n	8011ec4 <f_open+0x1d0>
						dw = fs->winsect;
 8011e54:	693b      	ldr	r3, [r7, #16]
 8011e56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011e58:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8011e5a:	f107 0314 	add.w	r3, r7, #20
 8011e5e:	2200      	movs	r2, #0
 8011e60:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8011e62:	4618      	mov	r0, r3
 8011e64:	f7fe ff60 	bl	8010d28 <remove_chain>
 8011e68:	4603      	mov	r3, r0
 8011e6a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 8011e6e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8011e72:	2b00      	cmp	r3, #0
 8011e74:	d126      	bne.n	8011ec4 <f_open+0x1d0>
							res = move_window(fs, dw);
 8011e76:	693b      	ldr	r3, [r7, #16]
 8011e78:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8011e7a:	4618      	mov	r0, r3
 8011e7c:	f7fe fd08 	bl	8010890 <move_window>
 8011e80:	4603      	mov	r3, r0
 8011e82:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8011e86:	693b      	ldr	r3, [r7, #16]
 8011e88:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8011e8a:	3a01      	subs	r2, #1
 8011e8c:	60da      	str	r2, [r3, #12]
 8011e8e:	e019      	b.n	8011ec4 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8011e90:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8011e94:	2b00      	cmp	r3, #0
 8011e96:	d115      	bne.n	8011ec4 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8011e98:	7ebb      	ldrb	r3, [r7, #26]
 8011e9a:	f003 0310 	and.w	r3, r3, #16
 8011e9e:	2b00      	cmp	r3, #0
 8011ea0:	d003      	beq.n	8011eaa <f_open+0x1b6>
					res = FR_NO_FILE;
 8011ea2:	2304      	movs	r3, #4
 8011ea4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8011ea8:	e00c      	b.n	8011ec4 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8011eaa:	79fb      	ldrb	r3, [r7, #7]
 8011eac:	f003 0302 	and.w	r3, r3, #2
 8011eb0:	2b00      	cmp	r3, #0
 8011eb2:	d007      	beq.n	8011ec4 <f_open+0x1d0>
 8011eb4:	7ebb      	ldrb	r3, [r7, #26]
 8011eb6:	f003 0301 	and.w	r3, r3, #1
 8011eba:	2b00      	cmp	r3, #0
 8011ebc:	d002      	beq.n	8011ec4 <f_open+0x1d0>
						res = FR_DENIED;
 8011ebe:	2307      	movs	r3, #7
 8011ec0:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8011ec4:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8011ec8:	2b00      	cmp	r3, #0
 8011eca:	d126      	bne.n	8011f1a <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8011ecc:	79fb      	ldrb	r3, [r7, #7]
 8011ece:	f003 0308 	and.w	r3, r3, #8
 8011ed2:	2b00      	cmp	r3, #0
 8011ed4:	d003      	beq.n	8011ede <f_open+0x1ea>
				mode |= FA_MODIFIED;
 8011ed6:	79fb      	ldrb	r3, [r7, #7]
 8011ed8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011edc:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8011ede:	693b      	ldr	r3, [r7, #16]
 8011ee0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011ee2:	68fb      	ldr	r3, [r7, #12]
 8011ee4:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 8011ee6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8011ee8:	68fb      	ldr	r3, [r7, #12]
 8011eea:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8011eec:	79fb      	ldrb	r3, [r7, #7]
 8011eee:	2b01      	cmp	r3, #1
 8011ef0:	bf8c      	ite	hi
 8011ef2:	2301      	movhi	r3, #1
 8011ef4:	2300      	movls	r3, #0
 8011ef6:	b2db      	uxtb	r3, r3
 8011ef8:	461a      	mov	r2, r3
 8011efa:	f107 0314 	add.w	r3, r7, #20
 8011efe:	4611      	mov	r1, r2
 8011f00:	4618      	mov	r0, r3
 8011f02:	f7fe fb93 	bl	801062c <inc_lock>
 8011f06:	4602      	mov	r2, r0
 8011f08:	68fb      	ldr	r3, [r7, #12]
 8011f0a:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8011f0c:	68fb      	ldr	r3, [r7, #12]
 8011f0e:	691b      	ldr	r3, [r3, #16]
 8011f10:	2b00      	cmp	r3, #0
 8011f12:	d102      	bne.n	8011f1a <f_open+0x226>
 8011f14:	2302      	movs	r3, #2
 8011f16:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8011f1a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8011f1e:	2b00      	cmp	r3, #0
 8011f20:	f040 8095 	bne.w	801204e <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8011f24:	693b      	ldr	r3, [r7, #16]
 8011f26:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8011f28:	4611      	mov	r1, r2
 8011f2a:	4618      	mov	r0, r3
 8011f2c:	f7ff f9b4 	bl	8011298 <ld_clust>
 8011f30:	4602      	mov	r2, r0
 8011f32:	68fb      	ldr	r3, [r7, #12]
 8011f34:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8011f36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011f38:	331c      	adds	r3, #28
 8011f3a:	4618      	mov	r0, r3
 8011f3c:	f7fe fa10 	bl	8010360 <ld_dword>
 8011f40:	4602      	mov	r2, r0
 8011f42:	68fb      	ldr	r3, [r7, #12]
 8011f44:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8011f46:	68fb      	ldr	r3, [r7, #12]
 8011f48:	2200      	movs	r2, #0
 8011f4a:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8011f4c:	693a      	ldr	r2, [r7, #16]
 8011f4e:	68fb      	ldr	r3, [r7, #12]
 8011f50:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8011f52:	693b      	ldr	r3, [r7, #16]
 8011f54:	88da      	ldrh	r2, [r3, #6]
 8011f56:	68fb      	ldr	r3, [r7, #12]
 8011f58:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8011f5a:	68fb      	ldr	r3, [r7, #12]
 8011f5c:	79fa      	ldrb	r2, [r7, #7]
 8011f5e:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8011f60:	68fb      	ldr	r3, [r7, #12]
 8011f62:	2200      	movs	r2, #0
 8011f64:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8011f66:	68fb      	ldr	r3, [r7, #12]
 8011f68:	2200      	movs	r2, #0
 8011f6a:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8011f6c:	68fb      	ldr	r3, [r7, #12]
 8011f6e:	2200      	movs	r2, #0
 8011f70:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8011f72:	68fb      	ldr	r3, [r7, #12]
 8011f74:	3330      	adds	r3, #48	@ 0x30
 8011f76:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8011f7a:	2100      	movs	r1, #0
 8011f7c:	4618      	mov	r0, r3
 8011f7e:	f7fe fa7a 	bl	8010476 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8011f82:	79fb      	ldrb	r3, [r7, #7]
 8011f84:	f003 0320 	and.w	r3, r3, #32
 8011f88:	2b00      	cmp	r3, #0
 8011f8a:	d060      	beq.n	801204e <f_open+0x35a>
 8011f8c:	68fb      	ldr	r3, [r7, #12]
 8011f8e:	68db      	ldr	r3, [r3, #12]
 8011f90:	2b00      	cmp	r3, #0
 8011f92:	d05c      	beq.n	801204e <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8011f94:	68fb      	ldr	r3, [r7, #12]
 8011f96:	68da      	ldr	r2, [r3, #12]
 8011f98:	68fb      	ldr	r3, [r7, #12]
 8011f9a:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8011f9c:	693b      	ldr	r3, [r7, #16]
 8011f9e:	895b      	ldrh	r3, [r3, #10]
 8011fa0:	025b      	lsls	r3, r3, #9
 8011fa2:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8011fa4:	68fb      	ldr	r3, [r7, #12]
 8011fa6:	689b      	ldr	r3, [r3, #8]
 8011fa8:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8011faa:	68fb      	ldr	r3, [r7, #12]
 8011fac:	68db      	ldr	r3, [r3, #12]
 8011fae:	657b      	str	r3, [r7, #84]	@ 0x54
 8011fb0:	e016      	b.n	8011fe0 <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 8011fb2:	68fb      	ldr	r3, [r7, #12]
 8011fb4:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8011fb6:	4618      	mov	r0, r3
 8011fb8:	f7fe fd25 	bl	8010a06 <get_fat>
 8011fbc:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8011fbe:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8011fc0:	2b01      	cmp	r3, #1
 8011fc2:	d802      	bhi.n	8011fca <f_open+0x2d6>
 8011fc4:	2302      	movs	r3, #2
 8011fc6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8011fca:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8011fcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011fd0:	d102      	bne.n	8011fd8 <f_open+0x2e4>
 8011fd2:	2301      	movs	r3, #1
 8011fd4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8011fd8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8011fda:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8011fdc:	1ad3      	subs	r3, r2, r3
 8011fde:	657b      	str	r3, [r7, #84]	@ 0x54
 8011fe0:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8011fe4:	2b00      	cmp	r3, #0
 8011fe6:	d103      	bne.n	8011ff0 <f_open+0x2fc>
 8011fe8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8011fea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8011fec:	429a      	cmp	r2, r3
 8011fee:	d8e0      	bhi.n	8011fb2 <f_open+0x2be>
				}
				fp->clust = clst;
 8011ff0:	68fb      	ldr	r3, [r7, #12]
 8011ff2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8011ff4:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8011ff6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8011ffa:	2b00      	cmp	r3, #0
 8011ffc:	d127      	bne.n	801204e <f_open+0x35a>
 8011ffe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012000:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012004:	2b00      	cmp	r3, #0
 8012006:	d022      	beq.n	801204e <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8012008:	693b      	ldr	r3, [r7, #16]
 801200a:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 801200c:	4618      	mov	r0, r3
 801200e:	f7fe fcdb 	bl	80109c8 <clust2sect>
 8012012:	6478      	str	r0, [r7, #68]	@ 0x44
 8012014:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012016:	2b00      	cmp	r3, #0
 8012018:	d103      	bne.n	8012022 <f_open+0x32e>
						res = FR_INT_ERR;
 801201a:	2302      	movs	r3, #2
 801201c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8012020:	e015      	b.n	801204e <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8012022:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012024:	0a5a      	lsrs	r2, r3, #9
 8012026:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012028:	441a      	add	r2, r3
 801202a:	68fb      	ldr	r3, [r7, #12]
 801202c:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 801202e:	693b      	ldr	r3, [r7, #16]
 8012030:	7858      	ldrb	r0, [r3, #1]
 8012032:	68fb      	ldr	r3, [r7, #12]
 8012034:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8012038:	68fb      	ldr	r3, [r7, #12]
 801203a:	6a1a      	ldr	r2, [r3, #32]
 801203c:	2301      	movs	r3, #1
 801203e:	f7fe f919 	bl	8010274 <disk_read>
 8012042:	4603      	mov	r3, r0
 8012044:	2b00      	cmp	r3, #0
 8012046:	d002      	beq.n	801204e <f_open+0x35a>
 8012048:	2301      	movs	r3, #1
 801204a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 801204e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8012052:	2b00      	cmp	r3, #0
 8012054:	d002      	beq.n	801205c <f_open+0x368>
 8012056:	68fb      	ldr	r3, [r7, #12]
 8012058:	2200      	movs	r2, #0
 801205a:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 801205c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 8012060:	4618      	mov	r0, r3
 8012062:	3760      	adds	r7, #96	@ 0x60
 8012064:	46bd      	mov	sp, r7
 8012066:	bd80      	pop	{r7, pc}

08012068 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8012068:	b580      	push	{r7, lr}
 801206a:	b08e      	sub	sp, #56	@ 0x38
 801206c:	af00      	add	r7, sp, #0
 801206e:	60f8      	str	r0, [r7, #12]
 8012070:	60b9      	str	r1, [r7, #8]
 8012072:	607a      	str	r2, [r7, #4]
 8012074:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8012076:	68bb      	ldr	r3, [r7, #8]
 8012078:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 801207a:	683b      	ldr	r3, [r7, #0]
 801207c:	2200      	movs	r2, #0
 801207e:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8012080:	68fb      	ldr	r3, [r7, #12]
 8012082:	f107 0214 	add.w	r2, r7, #20
 8012086:	4611      	mov	r1, r2
 8012088:	4618      	mov	r0, r3
 801208a:	f7ff fdb7 	bl	8011bfc <validate>
 801208e:	4603      	mov	r3, r0
 8012090:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8012094:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8012098:	2b00      	cmp	r3, #0
 801209a:	d107      	bne.n	80120ac <f_read+0x44>
 801209c:	68fb      	ldr	r3, [r7, #12]
 801209e:	7d5b      	ldrb	r3, [r3, #21]
 80120a0:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 80120a4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80120a8:	2b00      	cmp	r3, #0
 80120aa:	d002      	beq.n	80120b2 <f_read+0x4a>
 80120ac:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80120b0:	e115      	b.n	80122de <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 80120b2:	68fb      	ldr	r3, [r7, #12]
 80120b4:	7d1b      	ldrb	r3, [r3, #20]
 80120b6:	f003 0301 	and.w	r3, r3, #1
 80120ba:	2b00      	cmp	r3, #0
 80120bc:	d101      	bne.n	80120c2 <f_read+0x5a>
 80120be:	2307      	movs	r3, #7
 80120c0:	e10d      	b.n	80122de <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 80120c2:	68fb      	ldr	r3, [r7, #12]
 80120c4:	68da      	ldr	r2, [r3, #12]
 80120c6:	68fb      	ldr	r3, [r7, #12]
 80120c8:	699b      	ldr	r3, [r3, #24]
 80120ca:	1ad3      	subs	r3, r2, r3
 80120cc:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 80120ce:	687a      	ldr	r2, [r7, #4]
 80120d0:	6a3b      	ldr	r3, [r7, #32]
 80120d2:	429a      	cmp	r2, r3
 80120d4:	f240 80fe 	bls.w	80122d4 <f_read+0x26c>
 80120d8:	6a3b      	ldr	r3, [r7, #32]
 80120da:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 80120dc:	e0fa      	b.n	80122d4 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 80120de:	68fb      	ldr	r3, [r7, #12]
 80120e0:	699b      	ldr	r3, [r3, #24]
 80120e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80120e6:	2b00      	cmp	r3, #0
 80120e8:	f040 80c6 	bne.w	8012278 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 80120ec:	68fb      	ldr	r3, [r7, #12]
 80120ee:	699b      	ldr	r3, [r3, #24]
 80120f0:	0a5b      	lsrs	r3, r3, #9
 80120f2:	697a      	ldr	r2, [r7, #20]
 80120f4:	8952      	ldrh	r2, [r2, #10]
 80120f6:	3a01      	subs	r2, #1
 80120f8:	4013      	ands	r3, r2
 80120fa:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 80120fc:	69fb      	ldr	r3, [r7, #28]
 80120fe:	2b00      	cmp	r3, #0
 8012100:	d12f      	bne.n	8012162 <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8012102:	68fb      	ldr	r3, [r7, #12]
 8012104:	699b      	ldr	r3, [r3, #24]
 8012106:	2b00      	cmp	r3, #0
 8012108:	d103      	bne.n	8012112 <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 801210a:	68fb      	ldr	r3, [r7, #12]
 801210c:	689b      	ldr	r3, [r3, #8]
 801210e:	633b      	str	r3, [r7, #48]	@ 0x30
 8012110:	e013      	b.n	801213a <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8012112:	68fb      	ldr	r3, [r7, #12]
 8012114:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012116:	2b00      	cmp	r3, #0
 8012118:	d007      	beq.n	801212a <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 801211a:	68fb      	ldr	r3, [r7, #12]
 801211c:	699b      	ldr	r3, [r3, #24]
 801211e:	4619      	mov	r1, r3
 8012120:	68f8      	ldr	r0, [r7, #12]
 8012122:	f7fe fefe 	bl	8010f22 <clmt_clust>
 8012126:	6338      	str	r0, [r7, #48]	@ 0x30
 8012128:	e007      	b.n	801213a <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 801212a:	68fa      	ldr	r2, [r7, #12]
 801212c:	68fb      	ldr	r3, [r7, #12]
 801212e:	69db      	ldr	r3, [r3, #28]
 8012130:	4619      	mov	r1, r3
 8012132:	4610      	mov	r0, r2
 8012134:	f7fe fc67 	bl	8010a06 <get_fat>
 8012138:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 801213a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801213c:	2b01      	cmp	r3, #1
 801213e:	d804      	bhi.n	801214a <f_read+0xe2>
 8012140:	68fb      	ldr	r3, [r7, #12]
 8012142:	2202      	movs	r2, #2
 8012144:	755a      	strb	r2, [r3, #21]
 8012146:	2302      	movs	r3, #2
 8012148:	e0c9      	b.n	80122de <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801214a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801214c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012150:	d104      	bne.n	801215c <f_read+0xf4>
 8012152:	68fb      	ldr	r3, [r7, #12]
 8012154:	2201      	movs	r2, #1
 8012156:	755a      	strb	r2, [r3, #21]
 8012158:	2301      	movs	r3, #1
 801215a:	e0c0      	b.n	80122de <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 801215c:	68fb      	ldr	r3, [r7, #12]
 801215e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8012160:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8012162:	697a      	ldr	r2, [r7, #20]
 8012164:	68fb      	ldr	r3, [r7, #12]
 8012166:	69db      	ldr	r3, [r3, #28]
 8012168:	4619      	mov	r1, r3
 801216a:	4610      	mov	r0, r2
 801216c:	f7fe fc2c 	bl	80109c8 <clust2sect>
 8012170:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8012172:	69bb      	ldr	r3, [r7, #24]
 8012174:	2b00      	cmp	r3, #0
 8012176:	d104      	bne.n	8012182 <f_read+0x11a>
 8012178:	68fb      	ldr	r3, [r7, #12]
 801217a:	2202      	movs	r2, #2
 801217c:	755a      	strb	r2, [r3, #21]
 801217e:	2302      	movs	r3, #2
 8012180:	e0ad      	b.n	80122de <f_read+0x276>
			sect += csect;
 8012182:	69ba      	ldr	r2, [r7, #24]
 8012184:	69fb      	ldr	r3, [r7, #28]
 8012186:	4413      	add	r3, r2
 8012188:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 801218a:	687b      	ldr	r3, [r7, #4]
 801218c:	0a5b      	lsrs	r3, r3, #9
 801218e:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8012190:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012192:	2b00      	cmp	r3, #0
 8012194:	d039      	beq.n	801220a <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8012196:	69fa      	ldr	r2, [r7, #28]
 8012198:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801219a:	4413      	add	r3, r2
 801219c:	697a      	ldr	r2, [r7, #20]
 801219e:	8952      	ldrh	r2, [r2, #10]
 80121a0:	4293      	cmp	r3, r2
 80121a2:	d905      	bls.n	80121b0 <f_read+0x148>
					cc = fs->csize - csect;
 80121a4:	697b      	ldr	r3, [r7, #20]
 80121a6:	895b      	ldrh	r3, [r3, #10]
 80121a8:	461a      	mov	r2, r3
 80121aa:	69fb      	ldr	r3, [r7, #28]
 80121ac:	1ad3      	subs	r3, r2, r3
 80121ae:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80121b0:	697b      	ldr	r3, [r7, #20]
 80121b2:	7858      	ldrb	r0, [r3, #1]
 80121b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80121b6:	69ba      	ldr	r2, [r7, #24]
 80121b8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80121ba:	f7fe f85b 	bl	8010274 <disk_read>
 80121be:	4603      	mov	r3, r0
 80121c0:	2b00      	cmp	r3, #0
 80121c2:	d004      	beq.n	80121ce <f_read+0x166>
 80121c4:	68fb      	ldr	r3, [r7, #12]
 80121c6:	2201      	movs	r2, #1
 80121c8:	755a      	strb	r2, [r3, #21]
 80121ca:	2301      	movs	r3, #1
 80121cc:	e087      	b.n	80122de <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 80121ce:	68fb      	ldr	r3, [r7, #12]
 80121d0:	7d1b      	ldrb	r3, [r3, #20]
 80121d2:	b25b      	sxtb	r3, r3
 80121d4:	2b00      	cmp	r3, #0
 80121d6:	da14      	bge.n	8012202 <f_read+0x19a>
 80121d8:	68fb      	ldr	r3, [r7, #12]
 80121da:	6a1a      	ldr	r2, [r3, #32]
 80121dc:	69bb      	ldr	r3, [r7, #24]
 80121de:	1ad3      	subs	r3, r2, r3
 80121e0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80121e2:	429a      	cmp	r2, r3
 80121e4:	d90d      	bls.n	8012202 <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 80121e6:	68fb      	ldr	r3, [r7, #12]
 80121e8:	6a1a      	ldr	r2, [r3, #32]
 80121ea:	69bb      	ldr	r3, [r7, #24]
 80121ec:	1ad3      	subs	r3, r2, r3
 80121ee:	025b      	lsls	r3, r3, #9
 80121f0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80121f2:	18d0      	adds	r0, r2, r3
 80121f4:	68fb      	ldr	r3, [r7, #12]
 80121f6:	3330      	adds	r3, #48	@ 0x30
 80121f8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80121fc:	4619      	mov	r1, r3
 80121fe:	f7fe f919 	bl	8010434 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8012202:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012204:	025b      	lsls	r3, r3, #9
 8012206:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 8012208:	e050      	b.n	80122ac <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 801220a:	68fb      	ldr	r3, [r7, #12]
 801220c:	6a1b      	ldr	r3, [r3, #32]
 801220e:	69ba      	ldr	r2, [r7, #24]
 8012210:	429a      	cmp	r2, r3
 8012212:	d02e      	beq.n	8012272 <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8012214:	68fb      	ldr	r3, [r7, #12]
 8012216:	7d1b      	ldrb	r3, [r3, #20]
 8012218:	b25b      	sxtb	r3, r3
 801221a:	2b00      	cmp	r3, #0
 801221c:	da18      	bge.n	8012250 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801221e:	697b      	ldr	r3, [r7, #20]
 8012220:	7858      	ldrb	r0, [r3, #1]
 8012222:	68fb      	ldr	r3, [r7, #12]
 8012224:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8012228:	68fb      	ldr	r3, [r7, #12]
 801222a:	6a1a      	ldr	r2, [r3, #32]
 801222c:	2301      	movs	r3, #1
 801222e:	f7fe f841 	bl	80102b4 <disk_write>
 8012232:	4603      	mov	r3, r0
 8012234:	2b00      	cmp	r3, #0
 8012236:	d004      	beq.n	8012242 <f_read+0x1da>
 8012238:	68fb      	ldr	r3, [r7, #12]
 801223a:	2201      	movs	r2, #1
 801223c:	755a      	strb	r2, [r3, #21]
 801223e:	2301      	movs	r3, #1
 8012240:	e04d      	b.n	80122de <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 8012242:	68fb      	ldr	r3, [r7, #12]
 8012244:	7d1b      	ldrb	r3, [r3, #20]
 8012246:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801224a:	b2da      	uxtb	r2, r3
 801224c:	68fb      	ldr	r3, [r7, #12]
 801224e:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8012250:	697b      	ldr	r3, [r7, #20]
 8012252:	7858      	ldrb	r0, [r3, #1]
 8012254:	68fb      	ldr	r3, [r7, #12]
 8012256:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801225a:	2301      	movs	r3, #1
 801225c:	69ba      	ldr	r2, [r7, #24]
 801225e:	f7fe f809 	bl	8010274 <disk_read>
 8012262:	4603      	mov	r3, r0
 8012264:	2b00      	cmp	r3, #0
 8012266:	d004      	beq.n	8012272 <f_read+0x20a>
 8012268:	68fb      	ldr	r3, [r7, #12]
 801226a:	2201      	movs	r2, #1
 801226c:	755a      	strb	r2, [r3, #21]
 801226e:	2301      	movs	r3, #1
 8012270:	e035      	b.n	80122de <f_read+0x276>
			}
#endif
			fp->sect = sect;
 8012272:	68fb      	ldr	r3, [r7, #12]
 8012274:	69ba      	ldr	r2, [r7, #24]
 8012276:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8012278:	68fb      	ldr	r3, [r7, #12]
 801227a:	699b      	ldr	r3, [r3, #24]
 801227c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012280:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 8012284:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8012286:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8012288:	687b      	ldr	r3, [r7, #4]
 801228a:	429a      	cmp	r2, r3
 801228c:	d901      	bls.n	8012292 <f_read+0x22a>
 801228e:	687b      	ldr	r3, [r7, #4]
 8012290:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8012292:	68fb      	ldr	r3, [r7, #12]
 8012294:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8012298:	68fb      	ldr	r3, [r7, #12]
 801229a:	699b      	ldr	r3, [r3, #24]
 801229c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80122a0:	4413      	add	r3, r2
 80122a2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80122a4:	4619      	mov	r1, r3
 80122a6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80122a8:	f7fe f8c4 	bl	8010434 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 80122ac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80122ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80122b0:	4413      	add	r3, r2
 80122b2:	627b      	str	r3, [r7, #36]	@ 0x24
 80122b4:	68fb      	ldr	r3, [r7, #12]
 80122b6:	699a      	ldr	r2, [r3, #24]
 80122b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80122ba:	441a      	add	r2, r3
 80122bc:	68fb      	ldr	r3, [r7, #12]
 80122be:	619a      	str	r2, [r3, #24]
 80122c0:	683b      	ldr	r3, [r7, #0]
 80122c2:	681a      	ldr	r2, [r3, #0]
 80122c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80122c6:	441a      	add	r2, r3
 80122c8:	683b      	ldr	r3, [r7, #0]
 80122ca:	601a      	str	r2, [r3, #0]
 80122cc:	687a      	ldr	r2, [r7, #4]
 80122ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80122d0:	1ad3      	subs	r3, r2, r3
 80122d2:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 80122d4:	687b      	ldr	r3, [r7, #4]
 80122d6:	2b00      	cmp	r3, #0
 80122d8:	f47f af01 	bne.w	80120de <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 80122dc:	2300      	movs	r3, #0
}
 80122de:	4618      	mov	r0, r3
 80122e0:	3738      	adds	r7, #56	@ 0x38
 80122e2:	46bd      	mov	sp, r7
 80122e4:	bd80      	pop	{r7, pc}

080122e6 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 80122e6:	b580      	push	{r7, lr}
 80122e8:	b086      	sub	sp, #24
 80122ea:	af00      	add	r7, sp, #0
 80122ec:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 80122ee:	687b      	ldr	r3, [r7, #4]
 80122f0:	f107 0208 	add.w	r2, r7, #8
 80122f4:	4611      	mov	r1, r2
 80122f6:	4618      	mov	r0, r3
 80122f8:	f7ff fc80 	bl	8011bfc <validate>
 80122fc:	4603      	mov	r3, r0
 80122fe:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8012300:	7dfb      	ldrb	r3, [r7, #23]
 8012302:	2b00      	cmp	r3, #0
 8012304:	d168      	bne.n	80123d8 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8012306:	687b      	ldr	r3, [r7, #4]
 8012308:	7d1b      	ldrb	r3, [r3, #20]
 801230a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801230e:	2b00      	cmp	r3, #0
 8012310:	d062      	beq.n	80123d8 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8012312:	687b      	ldr	r3, [r7, #4]
 8012314:	7d1b      	ldrb	r3, [r3, #20]
 8012316:	b25b      	sxtb	r3, r3
 8012318:	2b00      	cmp	r3, #0
 801231a:	da15      	bge.n	8012348 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 801231c:	68bb      	ldr	r3, [r7, #8]
 801231e:	7858      	ldrb	r0, [r3, #1]
 8012320:	687b      	ldr	r3, [r7, #4]
 8012322:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8012326:	687b      	ldr	r3, [r7, #4]
 8012328:	6a1a      	ldr	r2, [r3, #32]
 801232a:	2301      	movs	r3, #1
 801232c:	f7fd ffc2 	bl	80102b4 <disk_write>
 8012330:	4603      	mov	r3, r0
 8012332:	2b00      	cmp	r3, #0
 8012334:	d001      	beq.n	801233a <f_sync+0x54>
 8012336:	2301      	movs	r3, #1
 8012338:	e04f      	b.n	80123da <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 801233a:	687b      	ldr	r3, [r7, #4]
 801233c:	7d1b      	ldrb	r3, [r3, #20]
 801233e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8012342:	b2da      	uxtb	r2, r3
 8012344:	687b      	ldr	r3, [r7, #4]
 8012346:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8012348:	f7fd fc02 	bl	800fb50 <get_fattime>
 801234c:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 801234e:	68ba      	ldr	r2, [r7, #8]
 8012350:	687b      	ldr	r3, [r7, #4]
 8012352:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012354:	4619      	mov	r1, r3
 8012356:	4610      	mov	r0, r2
 8012358:	f7fe fa9a 	bl	8010890 <move_window>
 801235c:	4603      	mov	r3, r0
 801235e:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8012360:	7dfb      	ldrb	r3, [r7, #23]
 8012362:	2b00      	cmp	r3, #0
 8012364:	d138      	bne.n	80123d8 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8012366:	687b      	ldr	r3, [r7, #4]
 8012368:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801236a:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 801236c:	68fb      	ldr	r3, [r7, #12]
 801236e:	330b      	adds	r3, #11
 8012370:	781a      	ldrb	r2, [r3, #0]
 8012372:	68fb      	ldr	r3, [r7, #12]
 8012374:	330b      	adds	r3, #11
 8012376:	f042 0220 	orr.w	r2, r2, #32
 801237a:	b2d2      	uxtb	r2, r2
 801237c:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 801237e:	687b      	ldr	r3, [r7, #4]
 8012380:	6818      	ldr	r0, [r3, #0]
 8012382:	687b      	ldr	r3, [r7, #4]
 8012384:	689b      	ldr	r3, [r3, #8]
 8012386:	461a      	mov	r2, r3
 8012388:	68f9      	ldr	r1, [r7, #12]
 801238a:	f7fe ffa4 	bl	80112d6 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 801238e:	68fb      	ldr	r3, [r7, #12]
 8012390:	f103 021c 	add.w	r2, r3, #28
 8012394:	687b      	ldr	r3, [r7, #4]
 8012396:	68db      	ldr	r3, [r3, #12]
 8012398:	4619      	mov	r1, r3
 801239a:	4610      	mov	r0, r2
 801239c:	f7fe f81e 	bl	80103dc <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 80123a0:	68fb      	ldr	r3, [r7, #12]
 80123a2:	3316      	adds	r3, #22
 80123a4:	6939      	ldr	r1, [r7, #16]
 80123a6:	4618      	mov	r0, r3
 80123a8:	f7fe f818 	bl	80103dc <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 80123ac:	68fb      	ldr	r3, [r7, #12]
 80123ae:	3312      	adds	r3, #18
 80123b0:	2100      	movs	r1, #0
 80123b2:	4618      	mov	r0, r3
 80123b4:	f7fd fff7 	bl	80103a6 <st_word>
					fs->wflag = 1;
 80123b8:	68bb      	ldr	r3, [r7, #8]
 80123ba:	2201      	movs	r2, #1
 80123bc:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 80123be:	68bb      	ldr	r3, [r7, #8]
 80123c0:	4618      	mov	r0, r3
 80123c2:	f7fe fa93 	bl	80108ec <sync_fs>
 80123c6:	4603      	mov	r3, r0
 80123c8:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 80123ca:	687b      	ldr	r3, [r7, #4]
 80123cc:	7d1b      	ldrb	r3, [r3, #20]
 80123ce:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80123d2:	b2da      	uxtb	r2, r3
 80123d4:	687b      	ldr	r3, [r7, #4]
 80123d6:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 80123d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80123da:	4618      	mov	r0, r3
 80123dc:	3718      	adds	r7, #24
 80123de:	46bd      	mov	sp, r7
 80123e0:	bd80      	pop	{r7, pc}

080123e2 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 80123e2:	b580      	push	{r7, lr}
 80123e4:	b084      	sub	sp, #16
 80123e6:	af00      	add	r7, sp, #0
 80123e8:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 80123ea:	6878      	ldr	r0, [r7, #4]
 80123ec:	f7ff ff7b 	bl	80122e6 <f_sync>
 80123f0:	4603      	mov	r3, r0
 80123f2:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 80123f4:	7bfb      	ldrb	r3, [r7, #15]
 80123f6:	2b00      	cmp	r3, #0
 80123f8:	d118      	bne.n	801242c <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 80123fa:	687b      	ldr	r3, [r7, #4]
 80123fc:	f107 0208 	add.w	r2, r7, #8
 8012400:	4611      	mov	r1, r2
 8012402:	4618      	mov	r0, r3
 8012404:	f7ff fbfa 	bl	8011bfc <validate>
 8012408:	4603      	mov	r3, r0
 801240a:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 801240c:	7bfb      	ldrb	r3, [r7, #15]
 801240e:	2b00      	cmp	r3, #0
 8012410:	d10c      	bne.n	801242c <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8012412:	687b      	ldr	r3, [r7, #4]
 8012414:	691b      	ldr	r3, [r3, #16]
 8012416:	4618      	mov	r0, r3
 8012418:	f7fe f996 	bl	8010748 <dec_lock>
 801241c:	4603      	mov	r3, r0
 801241e:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8012420:	7bfb      	ldrb	r3, [r7, #15]
 8012422:	2b00      	cmp	r3, #0
 8012424:	d102      	bne.n	801242c <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8012426:	687b      	ldr	r3, [r7, #4]
 8012428:	2200      	movs	r2, #0
 801242a:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 801242c:	7bfb      	ldrb	r3, [r7, #15]
}
 801242e:	4618      	mov	r0, r3
 8012430:	3710      	adds	r7, #16
 8012432:	46bd      	mov	sp, r7
 8012434:	bd80      	pop	{r7, pc}
	...

08012438 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8012438:	b480      	push	{r7}
 801243a:	b087      	sub	sp, #28
 801243c:	af00      	add	r7, sp, #0
 801243e:	60f8      	str	r0, [r7, #12]
 8012440:	60b9      	str	r1, [r7, #8]
 8012442:	4613      	mov	r3, r2
 8012444:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8012446:	2301      	movs	r3, #1
 8012448:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 801244a:	2300      	movs	r3, #0
 801244c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 801244e:	4b1f      	ldr	r3, [pc, #124]	@ (80124cc <FATFS_LinkDriverEx+0x94>)
 8012450:	7a5b      	ldrb	r3, [r3, #9]
 8012452:	b2db      	uxtb	r3, r3
 8012454:	2b00      	cmp	r3, #0
 8012456:	d131      	bne.n	80124bc <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8012458:	4b1c      	ldr	r3, [pc, #112]	@ (80124cc <FATFS_LinkDriverEx+0x94>)
 801245a:	7a5b      	ldrb	r3, [r3, #9]
 801245c:	b2db      	uxtb	r3, r3
 801245e:	461a      	mov	r2, r3
 8012460:	4b1a      	ldr	r3, [pc, #104]	@ (80124cc <FATFS_LinkDriverEx+0x94>)
 8012462:	2100      	movs	r1, #0
 8012464:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8012466:	4b19      	ldr	r3, [pc, #100]	@ (80124cc <FATFS_LinkDriverEx+0x94>)
 8012468:	7a5b      	ldrb	r3, [r3, #9]
 801246a:	b2db      	uxtb	r3, r3
 801246c:	4a17      	ldr	r2, [pc, #92]	@ (80124cc <FATFS_LinkDriverEx+0x94>)
 801246e:	009b      	lsls	r3, r3, #2
 8012470:	4413      	add	r3, r2
 8012472:	68fa      	ldr	r2, [r7, #12]
 8012474:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8012476:	4b15      	ldr	r3, [pc, #84]	@ (80124cc <FATFS_LinkDriverEx+0x94>)
 8012478:	7a5b      	ldrb	r3, [r3, #9]
 801247a:	b2db      	uxtb	r3, r3
 801247c:	461a      	mov	r2, r3
 801247e:	4b13      	ldr	r3, [pc, #76]	@ (80124cc <FATFS_LinkDriverEx+0x94>)
 8012480:	4413      	add	r3, r2
 8012482:	79fa      	ldrb	r2, [r7, #7]
 8012484:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8012486:	4b11      	ldr	r3, [pc, #68]	@ (80124cc <FATFS_LinkDriverEx+0x94>)
 8012488:	7a5b      	ldrb	r3, [r3, #9]
 801248a:	b2db      	uxtb	r3, r3
 801248c:	1c5a      	adds	r2, r3, #1
 801248e:	b2d1      	uxtb	r1, r2
 8012490:	4a0e      	ldr	r2, [pc, #56]	@ (80124cc <FATFS_LinkDriverEx+0x94>)
 8012492:	7251      	strb	r1, [r2, #9]
 8012494:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8012496:	7dbb      	ldrb	r3, [r7, #22]
 8012498:	3330      	adds	r3, #48	@ 0x30
 801249a:	b2da      	uxtb	r2, r3
 801249c:	68bb      	ldr	r3, [r7, #8]
 801249e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80124a0:	68bb      	ldr	r3, [r7, #8]
 80124a2:	3301      	adds	r3, #1
 80124a4:	223a      	movs	r2, #58	@ 0x3a
 80124a6:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80124a8:	68bb      	ldr	r3, [r7, #8]
 80124aa:	3302      	adds	r3, #2
 80124ac:	222f      	movs	r2, #47	@ 0x2f
 80124ae:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80124b0:	68bb      	ldr	r3, [r7, #8]
 80124b2:	3303      	adds	r3, #3
 80124b4:	2200      	movs	r2, #0
 80124b6:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80124b8:	2300      	movs	r3, #0
 80124ba:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80124bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80124be:	4618      	mov	r0, r3
 80124c0:	371c      	adds	r7, #28
 80124c2:	46bd      	mov	sp, r7
 80124c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124c8:	4770      	bx	lr
 80124ca:	bf00      	nop
 80124cc:	24000bb0 	.word	0x24000bb0

080124d0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80124d0:	b580      	push	{r7, lr}
 80124d2:	b082      	sub	sp, #8
 80124d4:	af00      	add	r7, sp, #0
 80124d6:	6078      	str	r0, [r7, #4]
 80124d8:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80124da:	2200      	movs	r2, #0
 80124dc:	6839      	ldr	r1, [r7, #0]
 80124de:	6878      	ldr	r0, [r7, #4]
 80124e0:	f7ff ffaa 	bl	8012438 <FATFS_LinkDriverEx>
 80124e4:	4603      	mov	r3, r0
}
 80124e6:	4618      	mov	r0, r3
 80124e8:	3708      	adds	r7, #8
 80124ea:	46bd      	mov	sp, r7
 80124ec:	bd80      	pop	{r7, pc}

080124ee <_ZdlPvj>:
 80124ee:	f000 b9be 	b.w	801286e <_ZdlPv>

080124f2 <_ZdlPvjSt11align_val_t>:
 80124f2:	4611      	mov	r1, r2
 80124f4:	f000 b9bd 	b.w	8012872 <_ZdlPvSt11align_val_t>

080124f8 <__cxa_guard_acquire>:
 80124f8:	6802      	ldr	r2, [r0, #0]
 80124fa:	07d2      	lsls	r2, r2, #31
 80124fc:	4603      	mov	r3, r0
 80124fe:	d405      	bmi.n	801250c <__cxa_guard_acquire+0x14>
 8012500:	7842      	ldrb	r2, [r0, #1]
 8012502:	b102      	cbz	r2, 8012506 <__cxa_guard_acquire+0xe>
 8012504:	deff      	udf	#255	@ 0xff
 8012506:	2001      	movs	r0, #1
 8012508:	7058      	strb	r0, [r3, #1]
 801250a:	4770      	bx	lr
 801250c:	2000      	movs	r0, #0
 801250e:	4770      	bx	lr

08012510 <__cxa_guard_release>:
 8012510:	2301      	movs	r3, #1
 8012512:	6003      	str	r3, [r0, #0]
 8012514:	4770      	bx	lr

08012516 <_Znwj>:
 8012516:	2801      	cmp	r0, #1
 8012518:	bf38      	it	cc
 801251a:	2001      	movcc	r0, #1
 801251c:	b510      	push	{r4, lr}
 801251e:	4604      	mov	r4, r0
 8012520:	4620      	mov	r0, r4
 8012522:	f000 f9b9 	bl	8012898 <malloc>
 8012526:	b100      	cbz	r0, 801252a <_Znwj+0x14>
 8012528:	bd10      	pop	{r4, pc}
 801252a:	f000 f9a5 	bl	8012878 <_ZSt15get_new_handlerv>
 801252e:	b908      	cbnz	r0, 8012534 <_Znwj+0x1e>
 8012530:	f000 f9aa 	bl	8012888 <abort>
 8012534:	4780      	blx	r0
 8012536:	e7f3      	b.n	8012520 <_Znwj+0xa>

08012538 <_ZnwjSt11align_val_t>:
 8012538:	b538      	push	{r3, r4, r5, lr}
 801253a:	4604      	mov	r4, r0
 801253c:	4608      	mov	r0, r1
 801253e:	460d      	mov	r5, r1
 8012540:	f7ee f902 	bl	8000748 <__popcountsi2>
 8012544:	2801      	cmp	r0, #1
 8012546:	d001      	beq.n	801254c <_ZnwjSt11align_val_t+0x14>
 8012548:	f000 f99e 	bl	8012888 <abort>
 801254c:	2c01      	cmp	r4, #1
 801254e:	bf38      	it	cc
 8012550:	2401      	movcc	r4, #1
 8012552:	4621      	mov	r1, r4
 8012554:	4628      	mov	r0, r5
 8012556:	f000 fa5d 	bl	8012a14 <memalign>
 801255a:	b100      	cbz	r0, 801255e <_ZnwjSt11align_val_t+0x26>
 801255c:	bd38      	pop	{r3, r4, r5, pc}
 801255e:	f000 f98b 	bl	8012878 <_ZSt15get_new_handlerv>
 8012562:	2800      	cmp	r0, #0
 8012564:	d0f0      	beq.n	8012548 <_ZnwjSt11align_val_t+0x10>
 8012566:	4780      	blx	r0
 8012568:	e7f3      	b.n	8012552 <_ZnwjSt11align_val_t+0x1a>

0801256a <_ZSt17__throw_bad_allocv>:
 801256a:	b508      	push	{r3, lr}
 801256c:	f000 f98c 	bl	8012888 <abort>

08012570 <_ZSt20__throw_length_errorPKc>:
 8012570:	b508      	push	{r3, lr}
 8012572:	f000 f989 	bl	8012888 <abort>

08012576 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>:
 8012576:	b10a      	cbz	r2, 801257c <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0+0x6>
 8012578:	f000 bd9d 	b.w	80130b6 <memcpy>
 801257c:	4770      	bx	lr

0801257e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>:
 801257e:	f850 3b08 	ldr.w	r3, [r0], #8
 8012582:	1a1b      	subs	r3, r3, r0
 8012584:	4258      	negs	r0, r3
 8012586:	4158      	adcs	r0, r3
 8012588:	4770      	bx	lr
	...

0801258c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
 801258c:	b508      	push	{r3, lr}
 801258e:	680b      	ldr	r3, [r1, #0]
 8012590:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8012594:	d302      	bcc.n	801259c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x10>
 8012596:	480d      	ldr	r0, [pc, #52]	@ (80125cc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x40>)
 8012598:	f7ff ffea 	bl	8012570 <_ZSt20__throw_length_errorPKc>
 801259c:	4293      	cmp	r3, r2
 801259e:	d90b      	bls.n	80125b8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 80125a0:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
 80125a4:	ea4f 0042 	mov.w	r0, r2, lsl #1
 80125a8:	d206      	bcs.n	80125b8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 80125aa:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 80125ae:	bf2a      	itet	cs
 80125b0:	f06f 4340 	mvncs.w	r3, #3221225472	@ 0xc0000000
 80125b4:	6008      	strcc	r0, [r1, #0]
 80125b6:	600b      	strcs	r3, [r1, #0]
 80125b8:	6808      	ldr	r0, [r1, #0]
 80125ba:	3001      	adds	r0, #1
 80125bc:	d501      	bpl.n	80125c2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x36>
 80125be:	f7ff ffd4 	bl	801256a <_ZSt17__throw_bad_allocv>
 80125c2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80125c6:	f7ff bfa6 	b.w	8012516 <_Znwj>
 80125ca:	bf00      	nop
 80125cc:	08014164 	.word	0x08014164

080125d0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
 80125d0:	b510      	push	{r4, lr}
 80125d2:	4604      	mov	r4, r0
 80125d4:	f7ff ffd3 	bl	801257e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>
 80125d8:	b920      	cbnz	r0, 80125e4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0x14>
 80125da:	6820      	ldr	r0, [r4, #0]
 80125dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80125e0:	f000 b945 	b.w	801286e <_ZdlPv>
 80125e4:	bd10      	pop	{r4, pc}

080125e6 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>:
 80125e6:	6840      	ldr	r0, [r0, #4]
 80125e8:	f101 4180 	add.w	r1, r1, #1073741824	@ 0x40000000
 80125ec:	3901      	subs	r1, #1
 80125ee:	1a09      	subs	r1, r1, r0
 80125f0:	4291      	cmp	r1, r2
 80125f2:	b508      	push	{r3, lr}
 80125f4:	d202      	bcs.n	80125fc <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc+0x16>
 80125f6:	4618      	mov	r0, r3
 80125f8:	f7ff ffba 	bl	8012570 <_ZSt20__throw_length_errorPKc>
 80125fc:	bd08      	pop	{r3, pc}

080125fe <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>:
 80125fe:	2a01      	cmp	r2, #1
 8012600:	b410      	push	{r4}
 8012602:	d104      	bne.n	801260e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0x10>
 8012604:	780a      	ldrb	r2, [r1, #0]
 8012606:	f85d 4b04 	ldr.w	r4, [sp], #4
 801260a:	7002      	strb	r2, [r0, #0]
 801260c:	4770      	bx	lr
 801260e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012612:	f7ff bfb0 	b.w	8012576 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>

08012616 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>:
 8012616:	2a01      	cmp	r2, #1
 8012618:	b430      	push	{r4, r5}
 801261a:	d103      	bne.n	8012624 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj+0xe>
 801261c:	780b      	ldrb	r3, [r1, #0]
 801261e:	7003      	strb	r3, [r0, #0]
 8012620:	bc30      	pop	{r4, r5}
 8012622:	4770      	bx	lr
 8012624:	2a00      	cmp	r2, #0
 8012626:	d0fb      	beq.n	8012620 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj+0xa>
 8012628:	bc30      	pop	{r4, r5}
 801262a:	f000 bc5b 	b.w	8012ee4 <memmove>

0801262e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_S_assignEPcjc>:
 801262e:	460b      	mov	r3, r1
 8012630:	2b01      	cmp	r3, #1
 8012632:	b410      	push	{r4}
 8012634:	4611      	mov	r1, r2
 8012636:	4604      	mov	r4, r0
 8012638:	d103      	bne.n	8012642 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_S_assignEPcjc+0x14>
 801263a:	7022      	strb	r2, [r4, #0]
 801263c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012640:	4770      	bx	lr
 8012642:	2b00      	cmp	r3, #0
 8012644:	d0fa      	beq.n	801263c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_S_assignEPcjc+0xe>
 8012646:	f85d 4b04 	ldr.w	r4, [sp], #4
 801264a:	461a      	mov	r2, r3
 801264c:	f000 bc64 	b.w	8012f18 <memset>

08012650 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>:
 8012650:	b508      	push	{r3, lr}
 8012652:	1a52      	subs	r2, r2, r1
 8012654:	f7ff ffd3 	bl	80125fe <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8012658:	bd08      	pop	{r3, pc}

0801265a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>:
 801265a:	f100 0208 	add.w	r2, r0, #8
 801265e:	6002      	str	r2, [r0, #0]
 8012660:	2200      	movs	r2, #0
 8012662:	6042      	str	r2, [r0, #4]
 8012664:	7202      	strb	r2, [r0, #8]
 8012666:	4770      	bx	lr

08012668 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>:
 8012668:	b510      	push	{r4, lr}
 801266a:	4604      	mov	r4, r0
 801266c:	f7ff ffb0 	bl	80125d0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 8012670:	4620      	mov	r0, r4
 8012672:	bd10      	pop	{r4, pc}

08012674 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>:
 8012674:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012676:	460c      	mov	r4, r1
 8012678:	4605      	mov	r5, r0
 801267a:	f7ff ff80 	bl	801257e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>
 801267e:	4606      	mov	r6, r0
 8012680:	4620      	mov	r0, r4
 8012682:	f7ff ff7c 	bl	801257e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>
 8012686:	b190      	cbz	r0, 80126ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x3a>
 8012688:	42a5      	cmp	r5, r4
 801268a:	d00a      	beq.n	80126a2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x2e>
 801268c:	6862      	ldr	r2, [r4, #4]
 801268e:	b11a      	cbz	r2, 8012698 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x24>
 8012690:	6821      	ldr	r1, [r4, #0]
 8012692:	6828      	ldr	r0, [r5, #0]
 8012694:	f7ff ffb3 	bl	80125fe <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8012698:	6863      	ldr	r3, [r4, #4]
 801269a:	682a      	ldr	r2, [r5, #0]
 801269c:	606b      	str	r3, [r5, #4]
 801269e:	2100      	movs	r1, #0
 80126a0:	54d1      	strb	r1, [r2, r3]
 80126a2:	6822      	ldr	r2, [r4, #0]
 80126a4:	2300      	movs	r3, #0
 80126a6:	6063      	str	r3, [r4, #4]
 80126a8:	7013      	strb	r3, [r2, #0]
 80126aa:	4628      	mov	r0, r5
 80126ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80126ae:	b90e      	cbnz	r6, 80126b4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x40>
 80126b0:	6828      	ldr	r0, [r5, #0]
 80126b2:	68af      	ldr	r7, [r5, #8]
 80126b4:	6823      	ldr	r3, [r4, #0]
 80126b6:	602b      	str	r3, [r5, #0]
 80126b8:	6863      	ldr	r3, [r4, #4]
 80126ba:	606b      	str	r3, [r5, #4]
 80126bc:	68a3      	ldr	r3, [r4, #8]
 80126be:	60ab      	str	r3, [r5, #8]
 80126c0:	b110      	cbz	r0, 80126c8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x54>
 80126c2:	6020      	str	r0, [r4, #0]
 80126c4:	60a7      	str	r7, [r4, #8]
 80126c6:	e7ec      	b.n	80126a2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x2e>
 80126c8:	f104 0308 	add.w	r3, r4, #8
 80126cc:	6023      	str	r3, [r4, #0]
 80126ce:	e7e8      	b.n	80126a2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x2e>

080126d0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv>:
 80126d0:	b510      	push	{r4, lr}
 80126d2:	4604      	mov	r4, r0
 80126d4:	f7ff ff53 	bl	801257e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>
 80126d8:	b908      	cbnz	r0, 80126de <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv+0xe>
 80126da:	68a0      	ldr	r0, [r4, #8]
 80126dc:	bd10      	pop	{r4, pc}
 80126de:	200f      	movs	r0, #15
 80126e0:	e7fc      	b.n	80126dc <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv+0xc>

080126e2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>:
 80126e2:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 80126e6:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 80126e8:	461f      	mov	r7, r3
 80126ea:	6843      	ldr	r3, [r0, #4]
 80126ec:	eb01 0802 	add.w	r8, r1, r2
 80126f0:	1ab2      	subs	r2, r6, r2
 80126f2:	441a      	add	r2, r3
 80126f4:	4604      	mov	r4, r0
 80126f6:	460d      	mov	r5, r1
 80126f8:	eba3 0908 	sub.w	r9, r3, r8
 80126fc:	9201      	str	r2, [sp, #4]
 80126fe:	f7ff ffe7 	bl	80126d0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv>
 8012702:	a901      	add	r1, sp, #4
 8012704:	4602      	mov	r2, r0
 8012706:	4620      	mov	r0, r4
 8012708:	f7ff ff40 	bl	801258c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 801270c:	4682      	mov	sl, r0
 801270e:	b11d      	cbz	r5, 8012718 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x36>
 8012710:	6821      	ldr	r1, [r4, #0]
 8012712:	462a      	mov	r2, r5
 8012714:	f7ff ff73 	bl	80125fe <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8012718:	b137      	cbz	r7, 8012728 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x46>
 801271a:	b12e      	cbz	r6, 8012728 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x46>
 801271c:	4632      	mov	r2, r6
 801271e:	4639      	mov	r1, r7
 8012720:	eb0a 0005 	add.w	r0, sl, r5
 8012724:	f7ff ff6b 	bl	80125fe <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8012728:	f1b9 0f00 	cmp.w	r9, #0
 801272c:	d007      	beq.n	801273e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x5c>
 801272e:	6821      	ldr	r1, [r4, #0]
 8012730:	4435      	add	r5, r6
 8012732:	464a      	mov	r2, r9
 8012734:	4441      	add	r1, r8
 8012736:	eb0a 0005 	add.w	r0, sl, r5
 801273a:	f7ff ff60 	bl	80125fe <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 801273e:	4620      	mov	r0, r4
 8012740:	f7ff ff46 	bl	80125d0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 8012744:	9b01      	ldr	r3, [sp, #4]
 8012746:	f8c4 a000 	str.w	sl, [r4]
 801274a:	60a3      	str	r3, [r4, #8]
 801274c:	b002      	add	sp, #8
 801274e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08012752 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7reserveEj>:
 8012752:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8012754:	4604      	mov	r4, r0
 8012756:	9101      	str	r1, [sp, #4]
 8012758:	f7ff ffba 	bl	80126d0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv>
 801275c:	9b01      	ldr	r3, [sp, #4]
 801275e:	4283      	cmp	r3, r0
 8012760:	4602      	mov	r2, r0
 8012762:	d90f      	bls.n	8012784 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7reserveEj+0x32>
 8012764:	a901      	add	r1, sp, #4
 8012766:	4620      	mov	r0, r4
 8012768:	f7ff ff10 	bl	801258c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 801276c:	6862      	ldr	r2, [r4, #4]
 801276e:	6821      	ldr	r1, [r4, #0]
 8012770:	3201      	adds	r2, #1
 8012772:	4605      	mov	r5, r0
 8012774:	f7ff ff43 	bl	80125fe <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8012778:	4620      	mov	r0, r4
 801277a:	f7ff ff29 	bl	80125d0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 801277e:	9b01      	ldr	r3, [sp, #4]
 8012780:	6025      	str	r5, [r4, #0]
 8012782:	60a3      	str	r3, [r4, #8]
 8012784:	b003      	add	sp, #12
 8012786:	bd30      	pop	{r4, r5, pc}

08012788 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc>:
 8012788:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801278c:	4616      	mov	r6, r2
 801278e:	461d      	mov	r5, r3
 8012790:	4604      	mov	r4, r0
 8012792:	4b1b      	ldr	r3, [pc, #108]	@ (8012800 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc+0x78>)
 8012794:	462a      	mov	r2, r5
 8012796:	460f      	mov	r7, r1
 8012798:	4631      	mov	r1, r6
 801279a:	f7ff ff24 	bl	80125e6 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>
 801279e:	4620      	mov	r0, r4
 80127a0:	f7ff ff96 	bl	80126d0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv>
 80127a4:	f8d4 9004 	ldr.w	r9, [r4, #4]
 80127a8:	eba5 0806 	sub.w	r8, r5, r6
 80127ac:	44c8      	add	r8, r9
 80127ae:	4540      	cmp	r0, r8
 80127b0:	d31d      	bcc.n	80127ee <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc+0x66>
 80127b2:	19f3      	adds	r3, r6, r7
 80127b4:	ebb9 0203 	subs.w	r2, r9, r3
 80127b8:	d007      	beq.n	80127ca <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc+0x42>
 80127ba:	42ae      	cmp	r6, r5
 80127bc:	d005      	beq.n	80127ca <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc+0x42>
 80127be:	6820      	ldr	r0, [r4, #0]
 80127c0:	4438      	add	r0, r7
 80127c2:	1981      	adds	r1, r0, r6
 80127c4:	4428      	add	r0, r5
 80127c6:	f7ff ff26 	bl	8012616 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 80127ca:	b135      	cbz	r5, 80127da <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc+0x52>
 80127cc:	6820      	ldr	r0, [r4, #0]
 80127ce:	f89d 2028 	ldrb.w	r2, [sp, #40]	@ 0x28
 80127d2:	4629      	mov	r1, r5
 80127d4:	4438      	add	r0, r7
 80127d6:	f7ff ff2a 	bl	801262e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_S_assignEPcjc>
 80127da:	6823      	ldr	r3, [r4, #0]
 80127dc:	f8c4 8004 	str.w	r8, [r4, #4]
 80127e0:	2200      	movs	r2, #0
 80127e2:	4620      	mov	r0, r4
 80127e4:	f803 2008 	strb.w	r2, [r3, r8]
 80127e8:	b003      	add	sp, #12
 80127ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80127ee:	9500      	str	r5, [sp, #0]
 80127f0:	2300      	movs	r3, #0
 80127f2:	4632      	mov	r2, r6
 80127f4:	4639      	mov	r1, r7
 80127f6:	4620      	mov	r0, r4
 80127f8:	f7ff ff73 	bl	80126e2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>
 80127fc:	e7e5      	b.n	80127ca <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc+0x42>
 80127fe:	bf00      	nop
 8012800:	0801417c 	.word	0x0801417c

08012804 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEjc>:
 8012804:	b507      	push	{r0, r1, r2, lr}
 8012806:	9200      	str	r2, [sp, #0]
 8012808:	460b      	mov	r3, r1
 801280a:	2200      	movs	r2, #0
 801280c:	6841      	ldr	r1, [r0, #4]
 801280e:	f7ff ffbb 	bl	8012788 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc>
 8012812:	b003      	add	sp, #12
 8012814:	f85d fb04 	ldr.w	pc, [sp], #4

08012818 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>:
 8012818:	6800      	ldr	r0, [r0, #0]
 801281a:	4770      	bx	lr

0801281c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>:
 801281c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801281e:	1a53      	subs	r3, r2, r1
 8012820:	2b0f      	cmp	r3, #15
 8012822:	4604      	mov	r4, r0
 8012824:	460d      	mov	r5, r1
 8012826:	4616      	mov	r6, r2
 8012828:	9301      	str	r3, [sp, #4]
 801282a:	d906      	bls.n	801283a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x1e>
 801282c:	2200      	movs	r2, #0
 801282e:	a901      	add	r1, sp, #4
 8012830:	f7ff feac 	bl	801258c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8012834:	9b01      	ldr	r3, [sp, #4]
 8012836:	6020      	str	r0, [r4, #0]
 8012838:	60a3      	str	r3, [r4, #8]
 801283a:	4632      	mov	r2, r6
 801283c:	4629      	mov	r1, r5
 801283e:	6820      	ldr	r0, [r4, #0]
 8012840:	f7ff ff06 	bl	8012650 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>
 8012844:	9b01      	ldr	r3, [sp, #4]
 8012846:	6822      	ldr	r2, [r4, #0]
 8012848:	6063      	str	r3, [r4, #4]
 801284a:	2100      	movs	r1, #0
 801284c:	54d1      	strb	r1, [r2, r3]
 801284e:	b002      	add	sp, #8
 8012850:	bd70      	pop	{r4, r5, r6, pc}

08012852 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>:
 8012852:	f100 0208 	add.w	r2, r0, #8
 8012856:	b510      	push	{r4, lr}
 8012858:	6002      	str	r2, [r0, #0]
 801285a:	e9d1 1200 	ldrd	r1, r2, [r1]
 801285e:	4604      	mov	r4, r0
 8012860:	f04f 0300 	mov.w	r3, #0
 8012864:	440a      	add	r2, r1
 8012866:	f7ff ffd9 	bl	801281c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>
 801286a:	4620      	mov	r0, r4
 801286c:	bd10      	pop	{r4, pc}

0801286e <_ZdlPv>:
 801286e:	f000 b81b 	b.w	80128a8 <free>

08012872 <_ZdlPvSt11align_val_t>:
 8012872:	f000 b819 	b.w	80128a8 <free>
	...

08012878 <_ZSt15get_new_handlerv>:
 8012878:	4b02      	ldr	r3, [pc, #8]	@ (8012884 <_ZSt15get_new_handlerv+0xc>)
 801287a:	6818      	ldr	r0, [r3, #0]
 801287c:	f3bf 8f5b 	dmb	ish
 8012880:	4770      	bx	lr
 8012882:	bf00      	nop
 8012884:	24000bbc 	.word	0x24000bbc

08012888 <abort>:
 8012888:	b508      	push	{r3, lr}
 801288a:	2006      	movs	r0, #6
 801288c:	f000 fb74 	bl	8012f78 <raise>
 8012890:	2001      	movs	r0, #1
 8012892:	f7f1 ffe5 	bl	8004860 <_exit>
	...

08012898 <malloc>:
 8012898:	4b02      	ldr	r3, [pc, #8]	@ (80128a4 <malloc+0xc>)
 801289a:	4601      	mov	r1, r0
 801289c:	6818      	ldr	r0, [r3, #0]
 801289e:	f000 b82d 	b.w	80128fc <_malloc_r>
 80128a2:	bf00      	nop
 80128a4:	2400006c 	.word	0x2400006c

080128a8 <free>:
 80128a8:	4b02      	ldr	r3, [pc, #8]	@ (80128b4 <free+0xc>)
 80128aa:	4601      	mov	r1, r0
 80128ac:	6818      	ldr	r0, [r3, #0]
 80128ae:	f000 bc11 	b.w	80130d4 <_free_r>
 80128b2:	bf00      	nop
 80128b4:	2400006c 	.word	0x2400006c

080128b8 <sbrk_aligned>:
 80128b8:	b570      	push	{r4, r5, r6, lr}
 80128ba:	4e0f      	ldr	r6, [pc, #60]	@ (80128f8 <sbrk_aligned+0x40>)
 80128bc:	460c      	mov	r4, r1
 80128be:	6831      	ldr	r1, [r6, #0]
 80128c0:	4605      	mov	r5, r0
 80128c2:	b911      	cbnz	r1, 80128ca <sbrk_aligned+0x12>
 80128c4:	f000 fba8 	bl	8013018 <_sbrk_r>
 80128c8:	6030      	str	r0, [r6, #0]
 80128ca:	4621      	mov	r1, r4
 80128cc:	4628      	mov	r0, r5
 80128ce:	f000 fba3 	bl	8013018 <_sbrk_r>
 80128d2:	1c43      	adds	r3, r0, #1
 80128d4:	d103      	bne.n	80128de <sbrk_aligned+0x26>
 80128d6:	f04f 34ff 	mov.w	r4, #4294967295
 80128da:	4620      	mov	r0, r4
 80128dc:	bd70      	pop	{r4, r5, r6, pc}
 80128de:	1cc4      	adds	r4, r0, #3
 80128e0:	f024 0403 	bic.w	r4, r4, #3
 80128e4:	42a0      	cmp	r0, r4
 80128e6:	d0f8      	beq.n	80128da <sbrk_aligned+0x22>
 80128e8:	1a21      	subs	r1, r4, r0
 80128ea:	4628      	mov	r0, r5
 80128ec:	f000 fb94 	bl	8013018 <_sbrk_r>
 80128f0:	3001      	adds	r0, #1
 80128f2:	d1f2      	bne.n	80128da <sbrk_aligned+0x22>
 80128f4:	e7ef      	b.n	80128d6 <sbrk_aligned+0x1e>
 80128f6:	bf00      	nop
 80128f8:	24000bc0 	.word	0x24000bc0

080128fc <_malloc_r>:
 80128fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012900:	1ccd      	adds	r5, r1, #3
 8012902:	f025 0503 	bic.w	r5, r5, #3
 8012906:	3508      	adds	r5, #8
 8012908:	2d0c      	cmp	r5, #12
 801290a:	bf38      	it	cc
 801290c:	250c      	movcc	r5, #12
 801290e:	2d00      	cmp	r5, #0
 8012910:	4606      	mov	r6, r0
 8012912:	db01      	blt.n	8012918 <_malloc_r+0x1c>
 8012914:	42a9      	cmp	r1, r5
 8012916:	d904      	bls.n	8012922 <_malloc_r+0x26>
 8012918:	230c      	movs	r3, #12
 801291a:	6033      	str	r3, [r6, #0]
 801291c:	2000      	movs	r0, #0
 801291e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012922:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80129f8 <_malloc_r+0xfc>
 8012926:	f000 f869 	bl	80129fc <__malloc_lock>
 801292a:	f8d8 3000 	ldr.w	r3, [r8]
 801292e:	461c      	mov	r4, r3
 8012930:	bb44      	cbnz	r4, 8012984 <_malloc_r+0x88>
 8012932:	4629      	mov	r1, r5
 8012934:	4630      	mov	r0, r6
 8012936:	f7ff ffbf 	bl	80128b8 <sbrk_aligned>
 801293a:	1c43      	adds	r3, r0, #1
 801293c:	4604      	mov	r4, r0
 801293e:	d158      	bne.n	80129f2 <_malloc_r+0xf6>
 8012940:	f8d8 4000 	ldr.w	r4, [r8]
 8012944:	4627      	mov	r7, r4
 8012946:	2f00      	cmp	r7, #0
 8012948:	d143      	bne.n	80129d2 <_malloc_r+0xd6>
 801294a:	2c00      	cmp	r4, #0
 801294c:	d04b      	beq.n	80129e6 <_malloc_r+0xea>
 801294e:	6823      	ldr	r3, [r4, #0]
 8012950:	4639      	mov	r1, r7
 8012952:	4630      	mov	r0, r6
 8012954:	eb04 0903 	add.w	r9, r4, r3
 8012958:	f000 fb5e 	bl	8013018 <_sbrk_r>
 801295c:	4581      	cmp	r9, r0
 801295e:	d142      	bne.n	80129e6 <_malloc_r+0xea>
 8012960:	6821      	ldr	r1, [r4, #0]
 8012962:	1a6d      	subs	r5, r5, r1
 8012964:	4629      	mov	r1, r5
 8012966:	4630      	mov	r0, r6
 8012968:	f7ff ffa6 	bl	80128b8 <sbrk_aligned>
 801296c:	3001      	adds	r0, #1
 801296e:	d03a      	beq.n	80129e6 <_malloc_r+0xea>
 8012970:	6823      	ldr	r3, [r4, #0]
 8012972:	442b      	add	r3, r5
 8012974:	6023      	str	r3, [r4, #0]
 8012976:	f8d8 3000 	ldr.w	r3, [r8]
 801297a:	685a      	ldr	r2, [r3, #4]
 801297c:	bb62      	cbnz	r2, 80129d8 <_malloc_r+0xdc>
 801297e:	f8c8 7000 	str.w	r7, [r8]
 8012982:	e00f      	b.n	80129a4 <_malloc_r+0xa8>
 8012984:	6822      	ldr	r2, [r4, #0]
 8012986:	1b52      	subs	r2, r2, r5
 8012988:	d420      	bmi.n	80129cc <_malloc_r+0xd0>
 801298a:	2a0b      	cmp	r2, #11
 801298c:	d917      	bls.n	80129be <_malloc_r+0xc2>
 801298e:	1961      	adds	r1, r4, r5
 8012990:	42a3      	cmp	r3, r4
 8012992:	6025      	str	r5, [r4, #0]
 8012994:	bf18      	it	ne
 8012996:	6059      	strne	r1, [r3, #4]
 8012998:	6863      	ldr	r3, [r4, #4]
 801299a:	bf08      	it	eq
 801299c:	f8c8 1000 	streq.w	r1, [r8]
 80129a0:	5162      	str	r2, [r4, r5]
 80129a2:	604b      	str	r3, [r1, #4]
 80129a4:	4630      	mov	r0, r6
 80129a6:	f000 f82f 	bl	8012a08 <__malloc_unlock>
 80129aa:	f104 000b 	add.w	r0, r4, #11
 80129ae:	1d23      	adds	r3, r4, #4
 80129b0:	f020 0007 	bic.w	r0, r0, #7
 80129b4:	1ac2      	subs	r2, r0, r3
 80129b6:	bf1c      	itt	ne
 80129b8:	1a1b      	subne	r3, r3, r0
 80129ba:	50a3      	strne	r3, [r4, r2]
 80129bc:	e7af      	b.n	801291e <_malloc_r+0x22>
 80129be:	6862      	ldr	r2, [r4, #4]
 80129c0:	42a3      	cmp	r3, r4
 80129c2:	bf0c      	ite	eq
 80129c4:	f8c8 2000 	streq.w	r2, [r8]
 80129c8:	605a      	strne	r2, [r3, #4]
 80129ca:	e7eb      	b.n	80129a4 <_malloc_r+0xa8>
 80129cc:	4623      	mov	r3, r4
 80129ce:	6864      	ldr	r4, [r4, #4]
 80129d0:	e7ae      	b.n	8012930 <_malloc_r+0x34>
 80129d2:	463c      	mov	r4, r7
 80129d4:	687f      	ldr	r7, [r7, #4]
 80129d6:	e7b6      	b.n	8012946 <_malloc_r+0x4a>
 80129d8:	461a      	mov	r2, r3
 80129da:	685b      	ldr	r3, [r3, #4]
 80129dc:	42a3      	cmp	r3, r4
 80129de:	d1fb      	bne.n	80129d8 <_malloc_r+0xdc>
 80129e0:	2300      	movs	r3, #0
 80129e2:	6053      	str	r3, [r2, #4]
 80129e4:	e7de      	b.n	80129a4 <_malloc_r+0xa8>
 80129e6:	230c      	movs	r3, #12
 80129e8:	6033      	str	r3, [r6, #0]
 80129ea:	4630      	mov	r0, r6
 80129ec:	f000 f80c 	bl	8012a08 <__malloc_unlock>
 80129f0:	e794      	b.n	801291c <_malloc_r+0x20>
 80129f2:	6005      	str	r5, [r0, #0]
 80129f4:	e7d6      	b.n	80129a4 <_malloc_r+0xa8>
 80129f6:	bf00      	nop
 80129f8:	24000bc4 	.word	0x24000bc4

080129fc <__malloc_lock>:
 80129fc:	4801      	ldr	r0, [pc, #4]	@ (8012a04 <__malloc_lock+0x8>)
 80129fe:	f000 bb58 	b.w	80130b2 <__retarget_lock_acquire_recursive>
 8012a02:	bf00      	nop
 8012a04:	24000d08 	.word	0x24000d08

08012a08 <__malloc_unlock>:
 8012a08:	4801      	ldr	r0, [pc, #4]	@ (8012a10 <__malloc_unlock+0x8>)
 8012a0a:	f000 bb53 	b.w	80130b4 <__retarget_lock_release_recursive>
 8012a0e:	bf00      	nop
 8012a10:	24000d08 	.word	0x24000d08

08012a14 <memalign>:
 8012a14:	4b02      	ldr	r3, [pc, #8]	@ (8012a20 <memalign+0xc>)
 8012a16:	460a      	mov	r2, r1
 8012a18:	4601      	mov	r1, r0
 8012a1a:	6818      	ldr	r0, [r3, #0]
 8012a1c:	f000 b802 	b.w	8012a24 <_memalign_r>
 8012a20:	2400006c 	.word	0x2400006c

08012a24 <_memalign_r>:
 8012a24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012a26:	1e4b      	subs	r3, r1, #1
 8012a28:	420b      	tst	r3, r1
 8012a2a:	4606      	mov	r6, r0
 8012a2c:	460d      	mov	r5, r1
 8012a2e:	d106      	bne.n	8012a3e <_memalign_r+0x1a>
 8012a30:	2908      	cmp	r1, #8
 8012a32:	bf38      	it	cc
 8012a34:	2508      	movcc	r5, #8
 8012a36:	1d53      	adds	r3, r2, #5
 8012a38:	d904      	bls.n	8012a44 <_memalign_r+0x20>
 8012a3a:	230c      	movs	r3, #12
 8012a3c:	6033      	str	r3, [r6, #0]
 8012a3e:	2500      	movs	r5, #0
 8012a40:	4628      	mov	r0, r5
 8012a42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012a44:	2a04      	cmp	r2, #4
 8012a46:	bf38      	it	cc
 8012a48:	2204      	movcc	r2, #4
 8012a4a:	1cd4      	adds	r4, r2, #3
 8012a4c:	f024 0403 	bic.w	r4, r4, #3
 8012a50:	f1c5 0307 	rsb	r3, r5, #7
 8012a54:	42a3      	cmp	r3, r4
 8012a56:	d3f0      	bcc.n	8012a3a <_memalign_r+0x16>
 8012a58:	f1a5 0108 	sub.w	r1, r5, #8
 8012a5c:	4421      	add	r1, r4
 8012a5e:	f7ff ff4d 	bl	80128fc <_malloc_r>
 8012a62:	2800      	cmp	r0, #0
 8012a64:	d0eb      	beq.n	8012a3e <_memalign_r+0x1a>
 8012a66:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8012a6a:	1f03      	subs	r3, r0, #4
 8012a6c:	2a00      	cmp	r2, #0
 8012a6e:	bfb8      	it	lt
 8012a70:	189b      	addlt	r3, r3, r2
 8012a72:	1cea      	adds	r2, r5, #3
 8012a74:	441a      	add	r2, r3
 8012a76:	426d      	negs	r5, r5
 8012a78:	4015      	ands	r5, r2
 8012a7a:	1d19      	adds	r1, r3, #4
 8012a7c:	1a6a      	subs	r2, r5, r1
 8012a7e:	d00b      	beq.n	8012a98 <_memalign_r+0x74>
 8012a80:	2a0b      	cmp	r2, #11
 8012a82:	eb03 0702 	add.w	r7, r3, r2
 8012a86:	d918      	bls.n	8012aba <_memalign_r+0x96>
 8012a88:	6818      	ldr	r0, [r3, #0]
 8012a8a:	1a80      	subs	r0, r0, r2
 8012a8c:	5098      	str	r0, [r3, r2]
 8012a8e:	601a      	str	r2, [r3, #0]
 8012a90:	4630      	mov	r0, r6
 8012a92:	f000 fb1f 	bl	80130d4 <_free_r>
 8012a96:	463b      	mov	r3, r7
 8012a98:	681a      	ldr	r2, [r3, #0]
 8012a9a:	f104 010c 	add.w	r1, r4, #12
 8012a9e:	1898      	adds	r0, r3, r2
 8012aa0:	4429      	add	r1, r5
 8012aa2:	4288      	cmp	r0, r1
 8012aa4:	d9cc      	bls.n	8012a40 <_memalign_r+0x1c>
 8012aa6:	1929      	adds	r1, r5, r4
 8012aa8:	1ac8      	subs	r0, r1, r3
 8012aaa:	1a12      	subs	r2, r2, r0
 8012aac:	6018      	str	r0, [r3, #0]
 8012aae:	3104      	adds	r1, #4
 8012ab0:	512a      	str	r2, [r5, r4]
 8012ab2:	4630      	mov	r0, r6
 8012ab4:	f000 fb0e 	bl	80130d4 <_free_r>
 8012ab8:	e7c2      	b.n	8012a40 <_memalign_r+0x1c>
 8012aba:	4251      	negs	r1, r2
 8012abc:	5099      	str	r1, [r3, r2]
 8012abe:	e7eb      	b.n	8012a98 <_memalign_r+0x74>

08012ac0 <std>:
 8012ac0:	2300      	movs	r3, #0
 8012ac2:	b510      	push	{r4, lr}
 8012ac4:	4604      	mov	r4, r0
 8012ac6:	e9c0 3300 	strd	r3, r3, [r0]
 8012aca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8012ace:	6083      	str	r3, [r0, #8]
 8012ad0:	8181      	strh	r1, [r0, #12]
 8012ad2:	6643      	str	r3, [r0, #100]	@ 0x64
 8012ad4:	81c2      	strh	r2, [r0, #14]
 8012ad6:	6183      	str	r3, [r0, #24]
 8012ad8:	4619      	mov	r1, r3
 8012ada:	2208      	movs	r2, #8
 8012adc:	305c      	adds	r0, #92	@ 0x5c
 8012ade:	f000 fa1b 	bl	8012f18 <memset>
 8012ae2:	4b0d      	ldr	r3, [pc, #52]	@ (8012b18 <std+0x58>)
 8012ae4:	6263      	str	r3, [r4, #36]	@ 0x24
 8012ae6:	4b0d      	ldr	r3, [pc, #52]	@ (8012b1c <std+0x5c>)
 8012ae8:	62a3      	str	r3, [r4, #40]	@ 0x28
 8012aea:	4b0d      	ldr	r3, [pc, #52]	@ (8012b20 <std+0x60>)
 8012aec:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8012aee:	4b0d      	ldr	r3, [pc, #52]	@ (8012b24 <std+0x64>)
 8012af0:	6323      	str	r3, [r4, #48]	@ 0x30
 8012af2:	4b0d      	ldr	r3, [pc, #52]	@ (8012b28 <std+0x68>)
 8012af4:	6224      	str	r4, [r4, #32]
 8012af6:	429c      	cmp	r4, r3
 8012af8:	d006      	beq.n	8012b08 <std+0x48>
 8012afa:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8012afe:	4294      	cmp	r4, r2
 8012b00:	d002      	beq.n	8012b08 <std+0x48>
 8012b02:	33d0      	adds	r3, #208	@ 0xd0
 8012b04:	429c      	cmp	r4, r3
 8012b06:	d105      	bne.n	8012b14 <std+0x54>
 8012b08:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8012b0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012b10:	f000 bace 	b.w	80130b0 <__retarget_lock_init_recursive>
 8012b14:	bd10      	pop	{r4, pc}
 8012b16:	bf00      	nop
 8012b18:	08012d35 	.word	0x08012d35
 8012b1c:	08012d57 	.word	0x08012d57
 8012b20:	08012d8f 	.word	0x08012d8f
 8012b24:	08012db3 	.word	0x08012db3
 8012b28:	24000bc8 	.word	0x24000bc8

08012b2c <stdio_exit_handler>:
 8012b2c:	4a02      	ldr	r2, [pc, #8]	@ (8012b38 <stdio_exit_handler+0xc>)
 8012b2e:	4903      	ldr	r1, [pc, #12]	@ (8012b3c <stdio_exit_handler+0x10>)
 8012b30:	4803      	ldr	r0, [pc, #12]	@ (8012b40 <stdio_exit_handler+0x14>)
 8012b32:	f000 b869 	b.w	8012c08 <_fwalk_sglue>
 8012b36:	bf00      	nop
 8012b38:	24000060 	.word	0x24000060
 8012b3c:	08013811 	.word	0x08013811
 8012b40:	24000070 	.word	0x24000070

08012b44 <cleanup_stdio>:
 8012b44:	6841      	ldr	r1, [r0, #4]
 8012b46:	4b0c      	ldr	r3, [pc, #48]	@ (8012b78 <cleanup_stdio+0x34>)
 8012b48:	4299      	cmp	r1, r3
 8012b4a:	b510      	push	{r4, lr}
 8012b4c:	4604      	mov	r4, r0
 8012b4e:	d001      	beq.n	8012b54 <cleanup_stdio+0x10>
 8012b50:	f000 fe5e 	bl	8013810 <_fflush_r>
 8012b54:	68a1      	ldr	r1, [r4, #8]
 8012b56:	4b09      	ldr	r3, [pc, #36]	@ (8012b7c <cleanup_stdio+0x38>)
 8012b58:	4299      	cmp	r1, r3
 8012b5a:	d002      	beq.n	8012b62 <cleanup_stdio+0x1e>
 8012b5c:	4620      	mov	r0, r4
 8012b5e:	f000 fe57 	bl	8013810 <_fflush_r>
 8012b62:	68e1      	ldr	r1, [r4, #12]
 8012b64:	4b06      	ldr	r3, [pc, #24]	@ (8012b80 <cleanup_stdio+0x3c>)
 8012b66:	4299      	cmp	r1, r3
 8012b68:	d004      	beq.n	8012b74 <cleanup_stdio+0x30>
 8012b6a:	4620      	mov	r0, r4
 8012b6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012b70:	f000 be4e 	b.w	8013810 <_fflush_r>
 8012b74:	bd10      	pop	{r4, pc}
 8012b76:	bf00      	nop
 8012b78:	24000bc8 	.word	0x24000bc8
 8012b7c:	24000c30 	.word	0x24000c30
 8012b80:	24000c98 	.word	0x24000c98

08012b84 <global_stdio_init.part.0>:
 8012b84:	b510      	push	{r4, lr}
 8012b86:	4b0b      	ldr	r3, [pc, #44]	@ (8012bb4 <global_stdio_init.part.0+0x30>)
 8012b88:	4c0b      	ldr	r4, [pc, #44]	@ (8012bb8 <global_stdio_init.part.0+0x34>)
 8012b8a:	4a0c      	ldr	r2, [pc, #48]	@ (8012bbc <global_stdio_init.part.0+0x38>)
 8012b8c:	601a      	str	r2, [r3, #0]
 8012b8e:	4620      	mov	r0, r4
 8012b90:	2200      	movs	r2, #0
 8012b92:	2104      	movs	r1, #4
 8012b94:	f7ff ff94 	bl	8012ac0 <std>
 8012b98:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8012b9c:	2201      	movs	r2, #1
 8012b9e:	2109      	movs	r1, #9
 8012ba0:	f7ff ff8e 	bl	8012ac0 <std>
 8012ba4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8012ba8:	2202      	movs	r2, #2
 8012baa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012bae:	2112      	movs	r1, #18
 8012bb0:	f7ff bf86 	b.w	8012ac0 <std>
 8012bb4:	24000d00 	.word	0x24000d00
 8012bb8:	24000bc8 	.word	0x24000bc8
 8012bbc:	08012b2d 	.word	0x08012b2d

08012bc0 <__sfp_lock_acquire>:
 8012bc0:	4801      	ldr	r0, [pc, #4]	@ (8012bc8 <__sfp_lock_acquire+0x8>)
 8012bc2:	f000 ba76 	b.w	80130b2 <__retarget_lock_acquire_recursive>
 8012bc6:	bf00      	nop
 8012bc8:	24000d09 	.word	0x24000d09

08012bcc <__sfp_lock_release>:
 8012bcc:	4801      	ldr	r0, [pc, #4]	@ (8012bd4 <__sfp_lock_release+0x8>)
 8012bce:	f000 ba71 	b.w	80130b4 <__retarget_lock_release_recursive>
 8012bd2:	bf00      	nop
 8012bd4:	24000d09 	.word	0x24000d09

08012bd8 <__sinit>:
 8012bd8:	b510      	push	{r4, lr}
 8012bda:	4604      	mov	r4, r0
 8012bdc:	f7ff fff0 	bl	8012bc0 <__sfp_lock_acquire>
 8012be0:	6a23      	ldr	r3, [r4, #32]
 8012be2:	b11b      	cbz	r3, 8012bec <__sinit+0x14>
 8012be4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012be8:	f7ff bff0 	b.w	8012bcc <__sfp_lock_release>
 8012bec:	4b04      	ldr	r3, [pc, #16]	@ (8012c00 <__sinit+0x28>)
 8012bee:	6223      	str	r3, [r4, #32]
 8012bf0:	4b04      	ldr	r3, [pc, #16]	@ (8012c04 <__sinit+0x2c>)
 8012bf2:	681b      	ldr	r3, [r3, #0]
 8012bf4:	2b00      	cmp	r3, #0
 8012bf6:	d1f5      	bne.n	8012be4 <__sinit+0xc>
 8012bf8:	f7ff ffc4 	bl	8012b84 <global_stdio_init.part.0>
 8012bfc:	e7f2      	b.n	8012be4 <__sinit+0xc>
 8012bfe:	bf00      	nop
 8012c00:	08012b45 	.word	0x08012b45
 8012c04:	24000d00 	.word	0x24000d00

08012c08 <_fwalk_sglue>:
 8012c08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012c0c:	4607      	mov	r7, r0
 8012c0e:	4688      	mov	r8, r1
 8012c10:	4614      	mov	r4, r2
 8012c12:	2600      	movs	r6, #0
 8012c14:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8012c18:	f1b9 0901 	subs.w	r9, r9, #1
 8012c1c:	d505      	bpl.n	8012c2a <_fwalk_sglue+0x22>
 8012c1e:	6824      	ldr	r4, [r4, #0]
 8012c20:	2c00      	cmp	r4, #0
 8012c22:	d1f7      	bne.n	8012c14 <_fwalk_sglue+0xc>
 8012c24:	4630      	mov	r0, r6
 8012c26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012c2a:	89ab      	ldrh	r3, [r5, #12]
 8012c2c:	2b01      	cmp	r3, #1
 8012c2e:	d907      	bls.n	8012c40 <_fwalk_sglue+0x38>
 8012c30:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8012c34:	3301      	adds	r3, #1
 8012c36:	d003      	beq.n	8012c40 <_fwalk_sglue+0x38>
 8012c38:	4629      	mov	r1, r5
 8012c3a:	4638      	mov	r0, r7
 8012c3c:	47c0      	blx	r8
 8012c3e:	4306      	orrs	r6, r0
 8012c40:	3568      	adds	r5, #104	@ 0x68
 8012c42:	e7e9      	b.n	8012c18 <_fwalk_sglue+0x10>

08012c44 <iprintf>:
 8012c44:	b40f      	push	{r0, r1, r2, r3}
 8012c46:	b507      	push	{r0, r1, r2, lr}
 8012c48:	4906      	ldr	r1, [pc, #24]	@ (8012c64 <iprintf+0x20>)
 8012c4a:	ab04      	add	r3, sp, #16
 8012c4c:	6808      	ldr	r0, [r1, #0]
 8012c4e:	f853 2b04 	ldr.w	r2, [r3], #4
 8012c52:	6881      	ldr	r1, [r0, #8]
 8012c54:	9301      	str	r3, [sp, #4]
 8012c56:	f000 fab1 	bl	80131bc <_vfiprintf_r>
 8012c5a:	b003      	add	sp, #12
 8012c5c:	f85d eb04 	ldr.w	lr, [sp], #4
 8012c60:	b004      	add	sp, #16
 8012c62:	4770      	bx	lr
 8012c64:	2400006c 	.word	0x2400006c

08012c68 <putchar>:
 8012c68:	4b02      	ldr	r3, [pc, #8]	@ (8012c74 <putchar+0xc>)
 8012c6a:	4601      	mov	r1, r0
 8012c6c:	6818      	ldr	r0, [r3, #0]
 8012c6e:	6882      	ldr	r2, [r0, #8]
 8012c70:	f000 be58 	b.w	8013924 <_putc_r>
 8012c74:	2400006c 	.word	0x2400006c

08012c78 <_puts_r>:
 8012c78:	6a03      	ldr	r3, [r0, #32]
 8012c7a:	b570      	push	{r4, r5, r6, lr}
 8012c7c:	6884      	ldr	r4, [r0, #8]
 8012c7e:	4605      	mov	r5, r0
 8012c80:	460e      	mov	r6, r1
 8012c82:	b90b      	cbnz	r3, 8012c88 <_puts_r+0x10>
 8012c84:	f7ff ffa8 	bl	8012bd8 <__sinit>
 8012c88:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8012c8a:	07db      	lsls	r3, r3, #31
 8012c8c:	d405      	bmi.n	8012c9a <_puts_r+0x22>
 8012c8e:	89a3      	ldrh	r3, [r4, #12]
 8012c90:	0598      	lsls	r0, r3, #22
 8012c92:	d402      	bmi.n	8012c9a <_puts_r+0x22>
 8012c94:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8012c96:	f000 fa0c 	bl	80130b2 <__retarget_lock_acquire_recursive>
 8012c9a:	89a3      	ldrh	r3, [r4, #12]
 8012c9c:	0719      	lsls	r1, r3, #28
 8012c9e:	d502      	bpl.n	8012ca6 <_puts_r+0x2e>
 8012ca0:	6923      	ldr	r3, [r4, #16]
 8012ca2:	2b00      	cmp	r3, #0
 8012ca4:	d135      	bne.n	8012d12 <_puts_r+0x9a>
 8012ca6:	4621      	mov	r1, r4
 8012ca8:	4628      	mov	r0, r5
 8012caa:	f000 f8c5 	bl	8012e38 <__swsetup_r>
 8012cae:	b380      	cbz	r0, 8012d12 <_puts_r+0x9a>
 8012cb0:	f04f 35ff 	mov.w	r5, #4294967295
 8012cb4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8012cb6:	07da      	lsls	r2, r3, #31
 8012cb8:	d405      	bmi.n	8012cc6 <_puts_r+0x4e>
 8012cba:	89a3      	ldrh	r3, [r4, #12]
 8012cbc:	059b      	lsls	r3, r3, #22
 8012cbe:	d402      	bmi.n	8012cc6 <_puts_r+0x4e>
 8012cc0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8012cc2:	f000 f9f7 	bl	80130b4 <__retarget_lock_release_recursive>
 8012cc6:	4628      	mov	r0, r5
 8012cc8:	bd70      	pop	{r4, r5, r6, pc}
 8012cca:	2b00      	cmp	r3, #0
 8012ccc:	da04      	bge.n	8012cd8 <_puts_r+0x60>
 8012cce:	69a2      	ldr	r2, [r4, #24]
 8012cd0:	429a      	cmp	r2, r3
 8012cd2:	dc17      	bgt.n	8012d04 <_puts_r+0x8c>
 8012cd4:	290a      	cmp	r1, #10
 8012cd6:	d015      	beq.n	8012d04 <_puts_r+0x8c>
 8012cd8:	6823      	ldr	r3, [r4, #0]
 8012cda:	1c5a      	adds	r2, r3, #1
 8012cdc:	6022      	str	r2, [r4, #0]
 8012cde:	7019      	strb	r1, [r3, #0]
 8012ce0:	68a3      	ldr	r3, [r4, #8]
 8012ce2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8012ce6:	3b01      	subs	r3, #1
 8012ce8:	60a3      	str	r3, [r4, #8]
 8012cea:	2900      	cmp	r1, #0
 8012cec:	d1ed      	bne.n	8012cca <_puts_r+0x52>
 8012cee:	2b00      	cmp	r3, #0
 8012cf0:	da11      	bge.n	8012d16 <_puts_r+0x9e>
 8012cf2:	4622      	mov	r2, r4
 8012cf4:	210a      	movs	r1, #10
 8012cf6:	4628      	mov	r0, r5
 8012cf8:	f000 f85f 	bl	8012dba <__swbuf_r>
 8012cfc:	3001      	adds	r0, #1
 8012cfe:	d0d7      	beq.n	8012cb0 <_puts_r+0x38>
 8012d00:	250a      	movs	r5, #10
 8012d02:	e7d7      	b.n	8012cb4 <_puts_r+0x3c>
 8012d04:	4622      	mov	r2, r4
 8012d06:	4628      	mov	r0, r5
 8012d08:	f000 f857 	bl	8012dba <__swbuf_r>
 8012d0c:	3001      	adds	r0, #1
 8012d0e:	d1e7      	bne.n	8012ce0 <_puts_r+0x68>
 8012d10:	e7ce      	b.n	8012cb0 <_puts_r+0x38>
 8012d12:	3e01      	subs	r6, #1
 8012d14:	e7e4      	b.n	8012ce0 <_puts_r+0x68>
 8012d16:	6823      	ldr	r3, [r4, #0]
 8012d18:	1c5a      	adds	r2, r3, #1
 8012d1a:	6022      	str	r2, [r4, #0]
 8012d1c:	220a      	movs	r2, #10
 8012d1e:	701a      	strb	r2, [r3, #0]
 8012d20:	e7ee      	b.n	8012d00 <_puts_r+0x88>
	...

08012d24 <puts>:
 8012d24:	4b02      	ldr	r3, [pc, #8]	@ (8012d30 <puts+0xc>)
 8012d26:	4601      	mov	r1, r0
 8012d28:	6818      	ldr	r0, [r3, #0]
 8012d2a:	f7ff bfa5 	b.w	8012c78 <_puts_r>
 8012d2e:	bf00      	nop
 8012d30:	2400006c 	.word	0x2400006c

08012d34 <__sread>:
 8012d34:	b510      	push	{r4, lr}
 8012d36:	460c      	mov	r4, r1
 8012d38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012d3c:	f000 f946 	bl	8012fcc <_read_r>
 8012d40:	2800      	cmp	r0, #0
 8012d42:	bfab      	itete	ge
 8012d44:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8012d46:	89a3      	ldrhlt	r3, [r4, #12]
 8012d48:	181b      	addge	r3, r3, r0
 8012d4a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8012d4e:	bfac      	ite	ge
 8012d50:	6563      	strge	r3, [r4, #84]	@ 0x54
 8012d52:	81a3      	strhlt	r3, [r4, #12]
 8012d54:	bd10      	pop	{r4, pc}

08012d56 <__swrite>:
 8012d56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012d5a:	461f      	mov	r7, r3
 8012d5c:	898b      	ldrh	r3, [r1, #12]
 8012d5e:	05db      	lsls	r3, r3, #23
 8012d60:	4605      	mov	r5, r0
 8012d62:	460c      	mov	r4, r1
 8012d64:	4616      	mov	r6, r2
 8012d66:	d505      	bpl.n	8012d74 <__swrite+0x1e>
 8012d68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012d6c:	2302      	movs	r3, #2
 8012d6e:	2200      	movs	r2, #0
 8012d70:	f000 f91a 	bl	8012fa8 <_lseek_r>
 8012d74:	89a3      	ldrh	r3, [r4, #12]
 8012d76:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012d7a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8012d7e:	81a3      	strh	r3, [r4, #12]
 8012d80:	4632      	mov	r2, r6
 8012d82:	463b      	mov	r3, r7
 8012d84:	4628      	mov	r0, r5
 8012d86:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012d8a:	f000 b955 	b.w	8013038 <_write_r>

08012d8e <__sseek>:
 8012d8e:	b510      	push	{r4, lr}
 8012d90:	460c      	mov	r4, r1
 8012d92:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012d96:	f000 f907 	bl	8012fa8 <_lseek_r>
 8012d9a:	1c43      	adds	r3, r0, #1
 8012d9c:	89a3      	ldrh	r3, [r4, #12]
 8012d9e:	bf15      	itete	ne
 8012da0:	6560      	strne	r0, [r4, #84]	@ 0x54
 8012da2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8012da6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8012daa:	81a3      	strheq	r3, [r4, #12]
 8012dac:	bf18      	it	ne
 8012dae:	81a3      	strhne	r3, [r4, #12]
 8012db0:	bd10      	pop	{r4, pc}

08012db2 <__sclose>:
 8012db2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012db6:	f000 b8e7 	b.w	8012f88 <_close_r>

08012dba <__swbuf_r>:
 8012dba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012dbc:	460e      	mov	r6, r1
 8012dbe:	4614      	mov	r4, r2
 8012dc0:	4605      	mov	r5, r0
 8012dc2:	b118      	cbz	r0, 8012dcc <__swbuf_r+0x12>
 8012dc4:	6a03      	ldr	r3, [r0, #32]
 8012dc6:	b90b      	cbnz	r3, 8012dcc <__swbuf_r+0x12>
 8012dc8:	f7ff ff06 	bl	8012bd8 <__sinit>
 8012dcc:	69a3      	ldr	r3, [r4, #24]
 8012dce:	60a3      	str	r3, [r4, #8]
 8012dd0:	89a3      	ldrh	r3, [r4, #12]
 8012dd2:	071a      	lsls	r2, r3, #28
 8012dd4:	d501      	bpl.n	8012dda <__swbuf_r+0x20>
 8012dd6:	6923      	ldr	r3, [r4, #16]
 8012dd8:	b943      	cbnz	r3, 8012dec <__swbuf_r+0x32>
 8012dda:	4621      	mov	r1, r4
 8012ddc:	4628      	mov	r0, r5
 8012dde:	f000 f82b 	bl	8012e38 <__swsetup_r>
 8012de2:	b118      	cbz	r0, 8012dec <__swbuf_r+0x32>
 8012de4:	f04f 37ff 	mov.w	r7, #4294967295
 8012de8:	4638      	mov	r0, r7
 8012dea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012dec:	6823      	ldr	r3, [r4, #0]
 8012dee:	6922      	ldr	r2, [r4, #16]
 8012df0:	1a98      	subs	r0, r3, r2
 8012df2:	6963      	ldr	r3, [r4, #20]
 8012df4:	b2f6      	uxtb	r6, r6
 8012df6:	4283      	cmp	r3, r0
 8012df8:	4637      	mov	r7, r6
 8012dfa:	dc05      	bgt.n	8012e08 <__swbuf_r+0x4e>
 8012dfc:	4621      	mov	r1, r4
 8012dfe:	4628      	mov	r0, r5
 8012e00:	f000 fd06 	bl	8013810 <_fflush_r>
 8012e04:	2800      	cmp	r0, #0
 8012e06:	d1ed      	bne.n	8012de4 <__swbuf_r+0x2a>
 8012e08:	68a3      	ldr	r3, [r4, #8]
 8012e0a:	3b01      	subs	r3, #1
 8012e0c:	60a3      	str	r3, [r4, #8]
 8012e0e:	6823      	ldr	r3, [r4, #0]
 8012e10:	1c5a      	adds	r2, r3, #1
 8012e12:	6022      	str	r2, [r4, #0]
 8012e14:	701e      	strb	r6, [r3, #0]
 8012e16:	6962      	ldr	r2, [r4, #20]
 8012e18:	1c43      	adds	r3, r0, #1
 8012e1a:	429a      	cmp	r2, r3
 8012e1c:	d004      	beq.n	8012e28 <__swbuf_r+0x6e>
 8012e1e:	89a3      	ldrh	r3, [r4, #12]
 8012e20:	07db      	lsls	r3, r3, #31
 8012e22:	d5e1      	bpl.n	8012de8 <__swbuf_r+0x2e>
 8012e24:	2e0a      	cmp	r6, #10
 8012e26:	d1df      	bne.n	8012de8 <__swbuf_r+0x2e>
 8012e28:	4621      	mov	r1, r4
 8012e2a:	4628      	mov	r0, r5
 8012e2c:	f000 fcf0 	bl	8013810 <_fflush_r>
 8012e30:	2800      	cmp	r0, #0
 8012e32:	d0d9      	beq.n	8012de8 <__swbuf_r+0x2e>
 8012e34:	e7d6      	b.n	8012de4 <__swbuf_r+0x2a>
	...

08012e38 <__swsetup_r>:
 8012e38:	b538      	push	{r3, r4, r5, lr}
 8012e3a:	4b29      	ldr	r3, [pc, #164]	@ (8012ee0 <__swsetup_r+0xa8>)
 8012e3c:	4605      	mov	r5, r0
 8012e3e:	6818      	ldr	r0, [r3, #0]
 8012e40:	460c      	mov	r4, r1
 8012e42:	b118      	cbz	r0, 8012e4c <__swsetup_r+0x14>
 8012e44:	6a03      	ldr	r3, [r0, #32]
 8012e46:	b90b      	cbnz	r3, 8012e4c <__swsetup_r+0x14>
 8012e48:	f7ff fec6 	bl	8012bd8 <__sinit>
 8012e4c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012e50:	0719      	lsls	r1, r3, #28
 8012e52:	d422      	bmi.n	8012e9a <__swsetup_r+0x62>
 8012e54:	06da      	lsls	r2, r3, #27
 8012e56:	d407      	bmi.n	8012e68 <__swsetup_r+0x30>
 8012e58:	2209      	movs	r2, #9
 8012e5a:	602a      	str	r2, [r5, #0]
 8012e5c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012e60:	81a3      	strh	r3, [r4, #12]
 8012e62:	f04f 30ff 	mov.w	r0, #4294967295
 8012e66:	e033      	b.n	8012ed0 <__swsetup_r+0x98>
 8012e68:	0758      	lsls	r0, r3, #29
 8012e6a:	d512      	bpl.n	8012e92 <__swsetup_r+0x5a>
 8012e6c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8012e6e:	b141      	cbz	r1, 8012e82 <__swsetup_r+0x4a>
 8012e70:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8012e74:	4299      	cmp	r1, r3
 8012e76:	d002      	beq.n	8012e7e <__swsetup_r+0x46>
 8012e78:	4628      	mov	r0, r5
 8012e7a:	f000 f92b 	bl	80130d4 <_free_r>
 8012e7e:	2300      	movs	r3, #0
 8012e80:	6363      	str	r3, [r4, #52]	@ 0x34
 8012e82:	89a3      	ldrh	r3, [r4, #12]
 8012e84:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8012e88:	81a3      	strh	r3, [r4, #12]
 8012e8a:	2300      	movs	r3, #0
 8012e8c:	6063      	str	r3, [r4, #4]
 8012e8e:	6923      	ldr	r3, [r4, #16]
 8012e90:	6023      	str	r3, [r4, #0]
 8012e92:	89a3      	ldrh	r3, [r4, #12]
 8012e94:	f043 0308 	orr.w	r3, r3, #8
 8012e98:	81a3      	strh	r3, [r4, #12]
 8012e9a:	6923      	ldr	r3, [r4, #16]
 8012e9c:	b94b      	cbnz	r3, 8012eb2 <__swsetup_r+0x7a>
 8012e9e:	89a3      	ldrh	r3, [r4, #12]
 8012ea0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8012ea4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8012ea8:	d003      	beq.n	8012eb2 <__swsetup_r+0x7a>
 8012eaa:	4621      	mov	r1, r4
 8012eac:	4628      	mov	r0, r5
 8012eae:	f000 fcfd 	bl	80138ac <__smakebuf_r>
 8012eb2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012eb6:	f013 0201 	ands.w	r2, r3, #1
 8012eba:	d00a      	beq.n	8012ed2 <__swsetup_r+0x9a>
 8012ebc:	2200      	movs	r2, #0
 8012ebe:	60a2      	str	r2, [r4, #8]
 8012ec0:	6962      	ldr	r2, [r4, #20]
 8012ec2:	4252      	negs	r2, r2
 8012ec4:	61a2      	str	r2, [r4, #24]
 8012ec6:	6922      	ldr	r2, [r4, #16]
 8012ec8:	b942      	cbnz	r2, 8012edc <__swsetup_r+0xa4>
 8012eca:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8012ece:	d1c5      	bne.n	8012e5c <__swsetup_r+0x24>
 8012ed0:	bd38      	pop	{r3, r4, r5, pc}
 8012ed2:	0799      	lsls	r1, r3, #30
 8012ed4:	bf58      	it	pl
 8012ed6:	6962      	ldrpl	r2, [r4, #20]
 8012ed8:	60a2      	str	r2, [r4, #8]
 8012eda:	e7f4      	b.n	8012ec6 <__swsetup_r+0x8e>
 8012edc:	2000      	movs	r0, #0
 8012ede:	e7f7      	b.n	8012ed0 <__swsetup_r+0x98>
 8012ee0:	2400006c 	.word	0x2400006c

08012ee4 <memmove>:
 8012ee4:	4288      	cmp	r0, r1
 8012ee6:	b510      	push	{r4, lr}
 8012ee8:	eb01 0402 	add.w	r4, r1, r2
 8012eec:	d902      	bls.n	8012ef4 <memmove+0x10>
 8012eee:	4284      	cmp	r4, r0
 8012ef0:	4623      	mov	r3, r4
 8012ef2:	d807      	bhi.n	8012f04 <memmove+0x20>
 8012ef4:	1e43      	subs	r3, r0, #1
 8012ef6:	42a1      	cmp	r1, r4
 8012ef8:	d008      	beq.n	8012f0c <memmove+0x28>
 8012efa:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012efe:	f803 2f01 	strb.w	r2, [r3, #1]!
 8012f02:	e7f8      	b.n	8012ef6 <memmove+0x12>
 8012f04:	4402      	add	r2, r0
 8012f06:	4601      	mov	r1, r0
 8012f08:	428a      	cmp	r2, r1
 8012f0a:	d100      	bne.n	8012f0e <memmove+0x2a>
 8012f0c:	bd10      	pop	{r4, pc}
 8012f0e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8012f12:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8012f16:	e7f7      	b.n	8012f08 <memmove+0x24>

08012f18 <memset>:
 8012f18:	4402      	add	r2, r0
 8012f1a:	4603      	mov	r3, r0
 8012f1c:	4293      	cmp	r3, r2
 8012f1e:	d100      	bne.n	8012f22 <memset+0xa>
 8012f20:	4770      	bx	lr
 8012f22:	f803 1b01 	strb.w	r1, [r3], #1
 8012f26:	e7f9      	b.n	8012f1c <memset+0x4>

08012f28 <_raise_r>:
 8012f28:	291f      	cmp	r1, #31
 8012f2a:	b538      	push	{r3, r4, r5, lr}
 8012f2c:	4605      	mov	r5, r0
 8012f2e:	460c      	mov	r4, r1
 8012f30:	d904      	bls.n	8012f3c <_raise_r+0x14>
 8012f32:	2316      	movs	r3, #22
 8012f34:	6003      	str	r3, [r0, #0]
 8012f36:	f04f 30ff 	mov.w	r0, #4294967295
 8012f3a:	bd38      	pop	{r3, r4, r5, pc}
 8012f3c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8012f3e:	b112      	cbz	r2, 8012f46 <_raise_r+0x1e>
 8012f40:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8012f44:	b94b      	cbnz	r3, 8012f5a <_raise_r+0x32>
 8012f46:	4628      	mov	r0, r5
 8012f48:	f000 f864 	bl	8013014 <_getpid_r>
 8012f4c:	4622      	mov	r2, r4
 8012f4e:	4601      	mov	r1, r0
 8012f50:	4628      	mov	r0, r5
 8012f52:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012f56:	f000 b84b 	b.w	8012ff0 <_kill_r>
 8012f5a:	2b01      	cmp	r3, #1
 8012f5c:	d00a      	beq.n	8012f74 <_raise_r+0x4c>
 8012f5e:	1c59      	adds	r1, r3, #1
 8012f60:	d103      	bne.n	8012f6a <_raise_r+0x42>
 8012f62:	2316      	movs	r3, #22
 8012f64:	6003      	str	r3, [r0, #0]
 8012f66:	2001      	movs	r0, #1
 8012f68:	e7e7      	b.n	8012f3a <_raise_r+0x12>
 8012f6a:	2100      	movs	r1, #0
 8012f6c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8012f70:	4620      	mov	r0, r4
 8012f72:	4798      	blx	r3
 8012f74:	2000      	movs	r0, #0
 8012f76:	e7e0      	b.n	8012f3a <_raise_r+0x12>

08012f78 <raise>:
 8012f78:	4b02      	ldr	r3, [pc, #8]	@ (8012f84 <raise+0xc>)
 8012f7a:	4601      	mov	r1, r0
 8012f7c:	6818      	ldr	r0, [r3, #0]
 8012f7e:	f7ff bfd3 	b.w	8012f28 <_raise_r>
 8012f82:	bf00      	nop
 8012f84:	2400006c 	.word	0x2400006c

08012f88 <_close_r>:
 8012f88:	b538      	push	{r3, r4, r5, lr}
 8012f8a:	4d06      	ldr	r5, [pc, #24]	@ (8012fa4 <_close_r+0x1c>)
 8012f8c:	2300      	movs	r3, #0
 8012f8e:	4604      	mov	r4, r0
 8012f90:	4608      	mov	r0, r1
 8012f92:	602b      	str	r3, [r5, #0]
 8012f94:	f7f1 fca8 	bl	80048e8 <_close>
 8012f98:	1c43      	adds	r3, r0, #1
 8012f9a:	d102      	bne.n	8012fa2 <_close_r+0x1a>
 8012f9c:	682b      	ldr	r3, [r5, #0]
 8012f9e:	b103      	cbz	r3, 8012fa2 <_close_r+0x1a>
 8012fa0:	6023      	str	r3, [r4, #0]
 8012fa2:	bd38      	pop	{r3, r4, r5, pc}
 8012fa4:	24000d04 	.word	0x24000d04

08012fa8 <_lseek_r>:
 8012fa8:	b538      	push	{r3, r4, r5, lr}
 8012faa:	4d07      	ldr	r5, [pc, #28]	@ (8012fc8 <_lseek_r+0x20>)
 8012fac:	4604      	mov	r4, r0
 8012fae:	4608      	mov	r0, r1
 8012fb0:	4611      	mov	r1, r2
 8012fb2:	2200      	movs	r2, #0
 8012fb4:	602a      	str	r2, [r5, #0]
 8012fb6:	461a      	mov	r2, r3
 8012fb8:	f7f1 fcbd 	bl	8004936 <_lseek>
 8012fbc:	1c43      	adds	r3, r0, #1
 8012fbe:	d102      	bne.n	8012fc6 <_lseek_r+0x1e>
 8012fc0:	682b      	ldr	r3, [r5, #0]
 8012fc2:	b103      	cbz	r3, 8012fc6 <_lseek_r+0x1e>
 8012fc4:	6023      	str	r3, [r4, #0]
 8012fc6:	bd38      	pop	{r3, r4, r5, pc}
 8012fc8:	24000d04 	.word	0x24000d04

08012fcc <_read_r>:
 8012fcc:	b538      	push	{r3, r4, r5, lr}
 8012fce:	4d07      	ldr	r5, [pc, #28]	@ (8012fec <_read_r+0x20>)
 8012fd0:	4604      	mov	r4, r0
 8012fd2:	4608      	mov	r0, r1
 8012fd4:	4611      	mov	r1, r2
 8012fd6:	2200      	movs	r2, #0
 8012fd8:	602a      	str	r2, [r5, #0]
 8012fda:	461a      	mov	r2, r3
 8012fdc:	f7f1 fc4b 	bl	8004876 <_read>
 8012fe0:	1c43      	adds	r3, r0, #1
 8012fe2:	d102      	bne.n	8012fea <_read_r+0x1e>
 8012fe4:	682b      	ldr	r3, [r5, #0]
 8012fe6:	b103      	cbz	r3, 8012fea <_read_r+0x1e>
 8012fe8:	6023      	str	r3, [r4, #0]
 8012fea:	bd38      	pop	{r3, r4, r5, pc}
 8012fec:	24000d04 	.word	0x24000d04

08012ff0 <_kill_r>:
 8012ff0:	b538      	push	{r3, r4, r5, lr}
 8012ff2:	4d07      	ldr	r5, [pc, #28]	@ (8013010 <_kill_r+0x20>)
 8012ff4:	2300      	movs	r3, #0
 8012ff6:	4604      	mov	r4, r0
 8012ff8:	4608      	mov	r0, r1
 8012ffa:	4611      	mov	r1, r2
 8012ffc:	602b      	str	r3, [r5, #0]
 8012ffe:	f7f1 fc1f 	bl	8004840 <_kill>
 8013002:	1c43      	adds	r3, r0, #1
 8013004:	d102      	bne.n	801300c <_kill_r+0x1c>
 8013006:	682b      	ldr	r3, [r5, #0]
 8013008:	b103      	cbz	r3, 801300c <_kill_r+0x1c>
 801300a:	6023      	str	r3, [r4, #0]
 801300c:	bd38      	pop	{r3, r4, r5, pc}
 801300e:	bf00      	nop
 8013010:	24000d04 	.word	0x24000d04

08013014 <_getpid_r>:
 8013014:	f7f1 bc0c 	b.w	8004830 <_getpid>

08013018 <_sbrk_r>:
 8013018:	b538      	push	{r3, r4, r5, lr}
 801301a:	4d06      	ldr	r5, [pc, #24]	@ (8013034 <_sbrk_r+0x1c>)
 801301c:	2300      	movs	r3, #0
 801301e:	4604      	mov	r4, r0
 8013020:	4608      	mov	r0, r1
 8013022:	602b      	str	r3, [r5, #0]
 8013024:	f7f1 fc94 	bl	8004950 <_sbrk>
 8013028:	1c43      	adds	r3, r0, #1
 801302a:	d102      	bne.n	8013032 <_sbrk_r+0x1a>
 801302c:	682b      	ldr	r3, [r5, #0]
 801302e:	b103      	cbz	r3, 8013032 <_sbrk_r+0x1a>
 8013030:	6023      	str	r3, [r4, #0]
 8013032:	bd38      	pop	{r3, r4, r5, pc}
 8013034:	24000d04 	.word	0x24000d04

08013038 <_write_r>:
 8013038:	b538      	push	{r3, r4, r5, lr}
 801303a:	4d07      	ldr	r5, [pc, #28]	@ (8013058 <_write_r+0x20>)
 801303c:	4604      	mov	r4, r0
 801303e:	4608      	mov	r0, r1
 8013040:	4611      	mov	r1, r2
 8013042:	2200      	movs	r2, #0
 8013044:	602a      	str	r2, [r5, #0]
 8013046:	461a      	mov	r2, r3
 8013048:	f7f1 fc32 	bl	80048b0 <_write>
 801304c:	1c43      	adds	r3, r0, #1
 801304e:	d102      	bne.n	8013056 <_write_r+0x1e>
 8013050:	682b      	ldr	r3, [r5, #0]
 8013052:	b103      	cbz	r3, 8013056 <_write_r+0x1e>
 8013054:	6023      	str	r3, [r4, #0]
 8013056:	bd38      	pop	{r3, r4, r5, pc}
 8013058:	24000d04 	.word	0x24000d04

0801305c <__errno>:
 801305c:	4b01      	ldr	r3, [pc, #4]	@ (8013064 <__errno+0x8>)
 801305e:	6818      	ldr	r0, [r3, #0]
 8013060:	4770      	bx	lr
 8013062:	bf00      	nop
 8013064:	2400006c 	.word	0x2400006c

08013068 <__libc_init_array>:
 8013068:	b570      	push	{r4, r5, r6, lr}
 801306a:	4d0d      	ldr	r5, [pc, #52]	@ (80130a0 <__libc_init_array+0x38>)
 801306c:	4c0d      	ldr	r4, [pc, #52]	@ (80130a4 <__libc_init_array+0x3c>)
 801306e:	1b64      	subs	r4, r4, r5
 8013070:	10a4      	asrs	r4, r4, #2
 8013072:	2600      	movs	r6, #0
 8013074:	42a6      	cmp	r6, r4
 8013076:	d109      	bne.n	801308c <__libc_init_array+0x24>
 8013078:	4d0b      	ldr	r5, [pc, #44]	@ (80130a8 <__libc_init_array+0x40>)
 801307a:	4c0c      	ldr	r4, [pc, #48]	@ (80130ac <__libc_init_array+0x44>)
 801307c:	f000 fca8 	bl	80139d0 <_init>
 8013080:	1b64      	subs	r4, r4, r5
 8013082:	10a4      	asrs	r4, r4, #2
 8013084:	2600      	movs	r6, #0
 8013086:	42a6      	cmp	r6, r4
 8013088:	d105      	bne.n	8013096 <__libc_init_array+0x2e>
 801308a:	bd70      	pop	{r4, r5, r6, pc}
 801308c:	f855 3b04 	ldr.w	r3, [r5], #4
 8013090:	4798      	blx	r3
 8013092:	3601      	adds	r6, #1
 8013094:	e7ee      	b.n	8013074 <__libc_init_array+0xc>
 8013096:	f855 3b04 	ldr.w	r3, [r5], #4
 801309a:	4798      	blx	r3
 801309c:	3601      	adds	r6, #1
 801309e:	e7f2      	b.n	8013086 <__libc_init_array+0x1e>
 80130a0:	080141d4 	.word	0x080141d4
 80130a4:	080141d4 	.word	0x080141d4
 80130a8:	080141d4 	.word	0x080141d4
 80130ac:	080141dc 	.word	0x080141dc

080130b0 <__retarget_lock_init_recursive>:
 80130b0:	4770      	bx	lr

080130b2 <__retarget_lock_acquire_recursive>:
 80130b2:	4770      	bx	lr

080130b4 <__retarget_lock_release_recursive>:
 80130b4:	4770      	bx	lr

080130b6 <memcpy>:
 80130b6:	440a      	add	r2, r1
 80130b8:	4291      	cmp	r1, r2
 80130ba:	f100 33ff 	add.w	r3, r0, #4294967295
 80130be:	d100      	bne.n	80130c2 <memcpy+0xc>
 80130c0:	4770      	bx	lr
 80130c2:	b510      	push	{r4, lr}
 80130c4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80130c8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80130cc:	4291      	cmp	r1, r2
 80130ce:	d1f9      	bne.n	80130c4 <memcpy+0xe>
 80130d0:	bd10      	pop	{r4, pc}
	...

080130d4 <_free_r>:
 80130d4:	b538      	push	{r3, r4, r5, lr}
 80130d6:	4605      	mov	r5, r0
 80130d8:	2900      	cmp	r1, #0
 80130da:	d041      	beq.n	8013160 <_free_r+0x8c>
 80130dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80130e0:	1f0c      	subs	r4, r1, #4
 80130e2:	2b00      	cmp	r3, #0
 80130e4:	bfb8      	it	lt
 80130e6:	18e4      	addlt	r4, r4, r3
 80130e8:	f7ff fc88 	bl	80129fc <__malloc_lock>
 80130ec:	4a1d      	ldr	r2, [pc, #116]	@ (8013164 <_free_r+0x90>)
 80130ee:	6813      	ldr	r3, [r2, #0]
 80130f0:	b933      	cbnz	r3, 8013100 <_free_r+0x2c>
 80130f2:	6063      	str	r3, [r4, #4]
 80130f4:	6014      	str	r4, [r2, #0]
 80130f6:	4628      	mov	r0, r5
 80130f8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80130fc:	f7ff bc84 	b.w	8012a08 <__malloc_unlock>
 8013100:	42a3      	cmp	r3, r4
 8013102:	d908      	bls.n	8013116 <_free_r+0x42>
 8013104:	6820      	ldr	r0, [r4, #0]
 8013106:	1821      	adds	r1, r4, r0
 8013108:	428b      	cmp	r3, r1
 801310a:	bf01      	itttt	eq
 801310c:	6819      	ldreq	r1, [r3, #0]
 801310e:	685b      	ldreq	r3, [r3, #4]
 8013110:	1809      	addeq	r1, r1, r0
 8013112:	6021      	streq	r1, [r4, #0]
 8013114:	e7ed      	b.n	80130f2 <_free_r+0x1e>
 8013116:	461a      	mov	r2, r3
 8013118:	685b      	ldr	r3, [r3, #4]
 801311a:	b10b      	cbz	r3, 8013120 <_free_r+0x4c>
 801311c:	42a3      	cmp	r3, r4
 801311e:	d9fa      	bls.n	8013116 <_free_r+0x42>
 8013120:	6811      	ldr	r1, [r2, #0]
 8013122:	1850      	adds	r0, r2, r1
 8013124:	42a0      	cmp	r0, r4
 8013126:	d10b      	bne.n	8013140 <_free_r+0x6c>
 8013128:	6820      	ldr	r0, [r4, #0]
 801312a:	4401      	add	r1, r0
 801312c:	1850      	adds	r0, r2, r1
 801312e:	4283      	cmp	r3, r0
 8013130:	6011      	str	r1, [r2, #0]
 8013132:	d1e0      	bne.n	80130f6 <_free_r+0x22>
 8013134:	6818      	ldr	r0, [r3, #0]
 8013136:	685b      	ldr	r3, [r3, #4]
 8013138:	6053      	str	r3, [r2, #4]
 801313a:	4408      	add	r0, r1
 801313c:	6010      	str	r0, [r2, #0]
 801313e:	e7da      	b.n	80130f6 <_free_r+0x22>
 8013140:	d902      	bls.n	8013148 <_free_r+0x74>
 8013142:	230c      	movs	r3, #12
 8013144:	602b      	str	r3, [r5, #0]
 8013146:	e7d6      	b.n	80130f6 <_free_r+0x22>
 8013148:	6820      	ldr	r0, [r4, #0]
 801314a:	1821      	adds	r1, r4, r0
 801314c:	428b      	cmp	r3, r1
 801314e:	bf04      	itt	eq
 8013150:	6819      	ldreq	r1, [r3, #0]
 8013152:	685b      	ldreq	r3, [r3, #4]
 8013154:	6063      	str	r3, [r4, #4]
 8013156:	bf04      	itt	eq
 8013158:	1809      	addeq	r1, r1, r0
 801315a:	6021      	streq	r1, [r4, #0]
 801315c:	6054      	str	r4, [r2, #4]
 801315e:	e7ca      	b.n	80130f6 <_free_r+0x22>
 8013160:	bd38      	pop	{r3, r4, r5, pc}
 8013162:	bf00      	nop
 8013164:	24000bc4 	.word	0x24000bc4

08013168 <__sfputc_r>:
 8013168:	6893      	ldr	r3, [r2, #8]
 801316a:	3b01      	subs	r3, #1
 801316c:	2b00      	cmp	r3, #0
 801316e:	b410      	push	{r4}
 8013170:	6093      	str	r3, [r2, #8]
 8013172:	da08      	bge.n	8013186 <__sfputc_r+0x1e>
 8013174:	6994      	ldr	r4, [r2, #24]
 8013176:	42a3      	cmp	r3, r4
 8013178:	db01      	blt.n	801317e <__sfputc_r+0x16>
 801317a:	290a      	cmp	r1, #10
 801317c:	d103      	bne.n	8013186 <__sfputc_r+0x1e>
 801317e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013182:	f7ff be1a 	b.w	8012dba <__swbuf_r>
 8013186:	6813      	ldr	r3, [r2, #0]
 8013188:	1c58      	adds	r0, r3, #1
 801318a:	6010      	str	r0, [r2, #0]
 801318c:	7019      	strb	r1, [r3, #0]
 801318e:	4608      	mov	r0, r1
 8013190:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013194:	4770      	bx	lr

08013196 <__sfputs_r>:
 8013196:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013198:	4606      	mov	r6, r0
 801319a:	460f      	mov	r7, r1
 801319c:	4614      	mov	r4, r2
 801319e:	18d5      	adds	r5, r2, r3
 80131a0:	42ac      	cmp	r4, r5
 80131a2:	d101      	bne.n	80131a8 <__sfputs_r+0x12>
 80131a4:	2000      	movs	r0, #0
 80131a6:	e007      	b.n	80131b8 <__sfputs_r+0x22>
 80131a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80131ac:	463a      	mov	r2, r7
 80131ae:	4630      	mov	r0, r6
 80131b0:	f7ff ffda 	bl	8013168 <__sfputc_r>
 80131b4:	1c43      	adds	r3, r0, #1
 80131b6:	d1f3      	bne.n	80131a0 <__sfputs_r+0xa>
 80131b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080131bc <_vfiprintf_r>:
 80131bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80131c0:	460d      	mov	r5, r1
 80131c2:	b09d      	sub	sp, #116	@ 0x74
 80131c4:	4614      	mov	r4, r2
 80131c6:	4698      	mov	r8, r3
 80131c8:	4606      	mov	r6, r0
 80131ca:	b118      	cbz	r0, 80131d4 <_vfiprintf_r+0x18>
 80131cc:	6a03      	ldr	r3, [r0, #32]
 80131ce:	b90b      	cbnz	r3, 80131d4 <_vfiprintf_r+0x18>
 80131d0:	f7ff fd02 	bl	8012bd8 <__sinit>
 80131d4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80131d6:	07d9      	lsls	r1, r3, #31
 80131d8:	d405      	bmi.n	80131e6 <_vfiprintf_r+0x2a>
 80131da:	89ab      	ldrh	r3, [r5, #12]
 80131dc:	059a      	lsls	r2, r3, #22
 80131de:	d402      	bmi.n	80131e6 <_vfiprintf_r+0x2a>
 80131e0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80131e2:	f7ff ff66 	bl	80130b2 <__retarget_lock_acquire_recursive>
 80131e6:	89ab      	ldrh	r3, [r5, #12]
 80131e8:	071b      	lsls	r3, r3, #28
 80131ea:	d501      	bpl.n	80131f0 <_vfiprintf_r+0x34>
 80131ec:	692b      	ldr	r3, [r5, #16]
 80131ee:	b99b      	cbnz	r3, 8013218 <_vfiprintf_r+0x5c>
 80131f0:	4629      	mov	r1, r5
 80131f2:	4630      	mov	r0, r6
 80131f4:	f7ff fe20 	bl	8012e38 <__swsetup_r>
 80131f8:	b170      	cbz	r0, 8013218 <_vfiprintf_r+0x5c>
 80131fa:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80131fc:	07dc      	lsls	r4, r3, #31
 80131fe:	d504      	bpl.n	801320a <_vfiprintf_r+0x4e>
 8013200:	f04f 30ff 	mov.w	r0, #4294967295
 8013204:	b01d      	add	sp, #116	@ 0x74
 8013206:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801320a:	89ab      	ldrh	r3, [r5, #12]
 801320c:	0598      	lsls	r0, r3, #22
 801320e:	d4f7      	bmi.n	8013200 <_vfiprintf_r+0x44>
 8013210:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8013212:	f7ff ff4f 	bl	80130b4 <__retarget_lock_release_recursive>
 8013216:	e7f3      	b.n	8013200 <_vfiprintf_r+0x44>
 8013218:	2300      	movs	r3, #0
 801321a:	9309      	str	r3, [sp, #36]	@ 0x24
 801321c:	2320      	movs	r3, #32
 801321e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8013222:	f8cd 800c 	str.w	r8, [sp, #12]
 8013226:	2330      	movs	r3, #48	@ 0x30
 8013228:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80133d8 <_vfiprintf_r+0x21c>
 801322c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8013230:	f04f 0901 	mov.w	r9, #1
 8013234:	4623      	mov	r3, r4
 8013236:	469a      	mov	sl, r3
 8013238:	f813 2b01 	ldrb.w	r2, [r3], #1
 801323c:	b10a      	cbz	r2, 8013242 <_vfiprintf_r+0x86>
 801323e:	2a25      	cmp	r2, #37	@ 0x25
 8013240:	d1f9      	bne.n	8013236 <_vfiprintf_r+0x7a>
 8013242:	ebba 0b04 	subs.w	fp, sl, r4
 8013246:	d00b      	beq.n	8013260 <_vfiprintf_r+0xa4>
 8013248:	465b      	mov	r3, fp
 801324a:	4622      	mov	r2, r4
 801324c:	4629      	mov	r1, r5
 801324e:	4630      	mov	r0, r6
 8013250:	f7ff ffa1 	bl	8013196 <__sfputs_r>
 8013254:	3001      	adds	r0, #1
 8013256:	f000 80a7 	beq.w	80133a8 <_vfiprintf_r+0x1ec>
 801325a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801325c:	445a      	add	r2, fp
 801325e:	9209      	str	r2, [sp, #36]	@ 0x24
 8013260:	f89a 3000 	ldrb.w	r3, [sl]
 8013264:	2b00      	cmp	r3, #0
 8013266:	f000 809f 	beq.w	80133a8 <_vfiprintf_r+0x1ec>
 801326a:	2300      	movs	r3, #0
 801326c:	f04f 32ff 	mov.w	r2, #4294967295
 8013270:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013274:	f10a 0a01 	add.w	sl, sl, #1
 8013278:	9304      	str	r3, [sp, #16]
 801327a:	9307      	str	r3, [sp, #28]
 801327c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8013280:	931a      	str	r3, [sp, #104]	@ 0x68
 8013282:	4654      	mov	r4, sl
 8013284:	2205      	movs	r2, #5
 8013286:	f814 1b01 	ldrb.w	r1, [r4], #1
 801328a:	4853      	ldr	r0, [pc, #332]	@ (80133d8 <_vfiprintf_r+0x21c>)
 801328c:	f7ed f838 	bl	8000300 <memchr>
 8013290:	9a04      	ldr	r2, [sp, #16]
 8013292:	b9d8      	cbnz	r0, 80132cc <_vfiprintf_r+0x110>
 8013294:	06d1      	lsls	r1, r2, #27
 8013296:	bf44      	itt	mi
 8013298:	2320      	movmi	r3, #32
 801329a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801329e:	0713      	lsls	r3, r2, #28
 80132a0:	bf44      	itt	mi
 80132a2:	232b      	movmi	r3, #43	@ 0x2b
 80132a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80132a8:	f89a 3000 	ldrb.w	r3, [sl]
 80132ac:	2b2a      	cmp	r3, #42	@ 0x2a
 80132ae:	d015      	beq.n	80132dc <_vfiprintf_r+0x120>
 80132b0:	9a07      	ldr	r2, [sp, #28]
 80132b2:	4654      	mov	r4, sl
 80132b4:	2000      	movs	r0, #0
 80132b6:	f04f 0c0a 	mov.w	ip, #10
 80132ba:	4621      	mov	r1, r4
 80132bc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80132c0:	3b30      	subs	r3, #48	@ 0x30
 80132c2:	2b09      	cmp	r3, #9
 80132c4:	d94b      	bls.n	801335e <_vfiprintf_r+0x1a2>
 80132c6:	b1b0      	cbz	r0, 80132f6 <_vfiprintf_r+0x13a>
 80132c8:	9207      	str	r2, [sp, #28]
 80132ca:	e014      	b.n	80132f6 <_vfiprintf_r+0x13a>
 80132cc:	eba0 0308 	sub.w	r3, r0, r8
 80132d0:	fa09 f303 	lsl.w	r3, r9, r3
 80132d4:	4313      	orrs	r3, r2
 80132d6:	9304      	str	r3, [sp, #16]
 80132d8:	46a2      	mov	sl, r4
 80132da:	e7d2      	b.n	8013282 <_vfiprintf_r+0xc6>
 80132dc:	9b03      	ldr	r3, [sp, #12]
 80132de:	1d19      	adds	r1, r3, #4
 80132e0:	681b      	ldr	r3, [r3, #0]
 80132e2:	9103      	str	r1, [sp, #12]
 80132e4:	2b00      	cmp	r3, #0
 80132e6:	bfbb      	ittet	lt
 80132e8:	425b      	neglt	r3, r3
 80132ea:	f042 0202 	orrlt.w	r2, r2, #2
 80132ee:	9307      	strge	r3, [sp, #28]
 80132f0:	9307      	strlt	r3, [sp, #28]
 80132f2:	bfb8      	it	lt
 80132f4:	9204      	strlt	r2, [sp, #16]
 80132f6:	7823      	ldrb	r3, [r4, #0]
 80132f8:	2b2e      	cmp	r3, #46	@ 0x2e
 80132fa:	d10a      	bne.n	8013312 <_vfiprintf_r+0x156>
 80132fc:	7863      	ldrb	r3, [r4, #1]
 80132fe:	2b2a      	cmp	r3, #42	@ 0x2a
 8013300:	d132      	bne.n	8013368 <_vfiprintf_r+0x1ac>
 8013302:	9b03      	ldr	r3, [sp, #12]
 8013304:	1d1a      	adds	r2, r3, #4
 8013306:	681b      	ldr	r3, [r3, #0]
 8013308:	9203      	str	r2, [sp, #12]
 801330a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801330e:	3402      	adds	r4, #2
 8013310:	9305      	str	r3, [sp, #20]
 8013312:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80133e8 <_vfiprintf_r+0x22c>
 8013316:	7821      	ldrb	r1, [r4, #0]
 8013318:	2203      	movs	r2, #3
 801331a:	4650      	mov	r0, sl
 801331c:	f7ec fff0 	bl	8000300 <memchr>
 8013320:	b138      	cbz	r0, 8013332 <_vfiprintf_r+0x176>
 8013322:	9b04      	ldr	r3, [sp, #16]
 8013324:	eba0 000a 	sub.w	r0, r0, sl
 8013328:	2240      	movs	r2, #64	@ 0x40
 801332a:	4082      	lsls	r2, r0
 801332c:	4313      	orrs	r3, r2
 801332e:	3401      	adds	r4, #1
 8013330:	9304      	str	r3, [sp, #16]
 8013332:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013336:	4829      	ldr	r0, [pc, #164]	@ (80133dc <_vfiprintf_r+0x220>)
 8013338:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801333c:	2206      	movs	r2, #6
 801333e:	f7ec ffdf 	bl	8000300 <memchr>
 8013342:	2800      	cmp	r0, #0
 8013344:	d03f      	beq.n	80133c6 <_vfiprintf_r+0x20a>
 8013346:	4b26      	ldr	r3, [pc, #152]	@ (80133e0 <_vfiprintf_r+0x224>)
 8013348:	bb1b      	cbnz	r3, 8013392 <_vfiprintf_r+0x1d6>
 801334a:	9b03      	ldr	r3, [sp, #12]
 801334c:	3307      	adds	r3, #7
 801334e:	f023 0307 	bic.w	r3, r3, #7
 8013352:	3308      	adds	r3, #8
 8013354:	9303      	str	r3, [sp, #12]
 8013356:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013358:	443b      	add	r3, r7
 801335a:	9309      	str	r3, [sp, #36]	@ 0x24
 801335c:	e76a      	b.n	8013234 <_vfiprintf_r+0x78>
 801335e:	fb0c 3202 	mla	r2, ip, r2, r3
 8013362:	460c      	mov	r4, r1
 8013364:	2001      	movs	r0, #1
 8013366:	e7a8      	b.n	80132ba <_vfiprintf_r+0xfe>
 8013368:	2300      	movs	r3, #0
 801336a:	3401      	adds	r4, #1
 801336c:	9305      	str	r3, [sp, #20]
 801336e:	4619      	mov	r1, r3
 8013370:	f04f 0c0a 	mov.w	ip, #10
 8013374:	4620      	mov	r0, r4
 8013376:	f810 2b01 	ldrb.w	r2, [r0], #1
 801337a:	3a30      	subs	r2, #48	@ 0x30
 801337c:	2a09      	cmp	r2, #9
 801337e:	d903      	bls.n	8013388 <_vfiprintf_r+0x1cc>
 8013380:	2b00      	cmp	r3, #0
 8013382:	d0c6      	beq.n	8013312 <_vfiprintf_r+0x156>
 8013384:	9105      	str	r1, [sp, #20]
 8013386:	e7c4      	b.n	8013312 <_vfiprintf_r+0x156>
 8013388:	fb0c 2101 	mla	r1, ip, r1, r2
 801338c:	4604      	mov	r4, r0
 801338e:	2301      	movs	r3, #1
 8013390:	e7f0      	b.n	8013374 <_vfiprintf_r+0x1b8>
 8013392:	ab03      	add	r3, sp, #12
 8013394:	9300      	str	r3, [sp, #0]
 8013396:	462a      	mov	r2, r5
 8013398:	4b12      	ldr	r3, [pc, #72]	@ (80133e4 <_vfiprintf_r+0x228>)
 801339a:	a904      	add	r1, sp, #16
 801339c:	4630      	mov	r0, r6
 801339e:	f3af 8000 	nop.w
 80133a2:	4607      	mov	r7, r0
 80133a4:	1c78      	adds	r0, r7, #1
 80133a6:	d1d6      	bne.n	8013356 <_vfiprintf_r+0x19a>
 80133a8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80133aa:	07d9      	lsls	r1, r3, #31
 80133ac:	d405      	bmi.n	80133ba <_vfiprintf_r+0x1fe>
 80133ae:	89ab      	ldrh	r3, [r5, #12]
 80133b0:	059a      	lsls	r2, r3, #22
 80133b2:	d402      	bmi.n	80133ba <_vfiprintf_r+0x1fe>
 80133b4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80133b6:	f7ff fe7d 	bl	80130b4 <__retarget_lock_release_recursive>
 80133ba:	89ab      	ldrh	r3, [r5, #12]
 80133bc:	065b      	lsls	r3, r3, #25
 80133be:	f53f af1f 	bmi.w	8013200 <_vfiprintf_r+0x44>
 80133c2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80133c4:	e71e      	b.n	8013204 <_vfiprintf_r+0x48>
 80133c6:	ab03      	add	r3, sp, #12
 80133c8:	9300      	str	r3, [sp, #0]
 80133ca:	462a      	mov	r2, r5
 80133cc:	4b05      	ldr	r3, [pc, #20]	@ (80133e4 <_vfiprintf_r+0x228>)
 80133ce:	a904      	add	r1, sp, #16
 80133d0:	4630      	mov	r0, r6
 80133d2:	f000 f879 	bl	80134c8 <_printf_i>
 80133d6:	e7e4      	b.n	80133a2 <_vfiprintf_r+0x1e6>
 80133d8:	08014199 	.word	0x08014199
 80133dc:	080141a3 	.word	0x080141a3
 80133e0:	00000000 	.word	0x00000000
 80133e4:	08013197 	.word	0x08013197
 80133e8:	0801419f 	.word	0x0801419f

080133ec <_printf_common>:
 80133ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80133f0:	4616      	mov	r6, r2
 80133f2:	4698      	mov	r8, r3
 80133f4:	688a      	ldr	r2, [r1, #8]
 80133f6:	690b      	ldr	r3, [r1, #16]
 80133f8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80133fc:	4293      	cmp	r3, r2
 80133fe:	bfb8      	it	lt
 8013400:	4613      	movlt	r3, r2
 8013402:	6033      	str	r3, [r6, #0]
 8013404:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8013408:	4607      	mov	r7, r0
 801340a:	460c      	mov	r4, r1
 801340c:	b10a      	cbz	r2, 8013412 <_printf_common+0x26>
 801340e:	3301      	adds	r3, #1
 8013410:	6033      	str	r3, [r6, #0]
 8013412:	6823      	ldr	r3, [r4, #0]
 8013414:	0699      	lsls	r1, r3, #26
 8013416:	bf42      	ittt	mi
 8013418:	6833      	ldrmi	r3, [r6, #0]
 801341a:	3302      	addmi	r3, #2
 801341c:	6033      	strmi	r3, [r6, #0]
 801341e:	6825      	ldr	r5, [r4, #0]
 8013420:	f015 0506 	ands.w	r5, r5, #6
 8013424:	d106      	bne.n	8013434 <_printf_common+0x48>
 8013426:	f104 0a19 	add.w	sl, r4, #25
 801342a:	68e3      	ldr	r3, [r4, #12]
 801342c:	6832      	ldr	r2, [r6, #0]
 801342e:	1a9b      	subs	r3, r3, r2
 8013430:	42ab      	cmp	r3, r5
 8013432:	dc26      	bgt.n	8013482 <_printf_common+0x96>
 8013434:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8013438:	6822      	ldr	r2, [r4, #0]
 801343a:	3b00      	subs	r3, #0
 801343c:	bf18      	it	ne
 801343e:	2301      	movne	r3, #1
 8013440:	0692      	lsls	r2, r2, #26
 8013442:	d42b      	bmi.n	801349c <_printf_common+0xb0>
 8013444:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8013448:	4641      	mov	r1, r8
 801344a:	4638      	mov	r0, r7
 801344c:	47c8      	blx	r9
 801344e:	3001      	adds	r0, #1
 8013450:	d01e      	beq.n	8013490 <_printf_common+0xa4>
 8013452:	6823      	ldr	r3, [r4, #0]
 8013454:	6922      	ldr	r2, [r4, #16]
 8013456:	f003 0306 	and.w	r3, r3, #6
 801345a:	2b04      	cmp	r3, #4
 801345c:	bf02      	ittt	eq
 801345e:	68e5      	ldreq	r5, [r4, #12]
 8013460:	6833      	ldreq	r3, [r6, #0]
 8013462:	1aed      	subeq	r5, r5, r3
 8013464:	68a3      	ldr	r3, [r4, #8]
 8013466:	bf0c      	ite	eq
 8013468:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801346c:	2500      	movne	r5, #0
 801346e:	4293      	cmp	r3, r2
 8013470:	bfc4      	itt	gt
 8013472:	1a9b      	subgt	r3, r3, r2
 8013474:	18ed      	addgt	r5, r5, r3
 8013476:	2600      	movs	r6, #0
 8013478:	341a      	adds	r4, #26
 801347a:	42b5      	cmp	r5, r6
 801347c:	d11a      	bne.n	80134b4 <_printf_common+0xc8>
 801347e:	2000      	movs	r0, #0
 8013480:	e008      	b.n	8013494 <_printf_common+0xa8>
 8013482:	2301      	movs	r3, #1
 8013484:	4652      	mov	r2, sl
 8013486:	4641      	mov	r1, r8
 8013488:	4638      	mov	r0, r7
 801348a:	47c8      	blx	r9
 801348c:	3001      	adds	r0, #1
 801348e:	d103      	bne.n	8013498 <_printf_common+0xac>
 8013490:	f04f 30ff 	mov.w	r0, #4294967295
 8013494:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013498:	3501      	adds	r5, #1
 801349a:	e7c6      	b.n	801342a <_printf_common+0x3e>
 801349c:	18e1      	adds	r1, r4, r3
 801349e:	1c5a      	adds	r2, r3, #1
 80134a0:	2030      	movs	r0, #48	@ 0x30
 80134a2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80134a6:	4422      	add	r2, r4
 80134a8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80134ac:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80134b0:	3302      	adds	r3, #2
 80134b2:	e7c7      	b.n	8013444 <_printf_common+0x58>
 80134b4:	2301      	movs	r3, #1
 80134b6:	4622      	mov	r2, r4
 80134b8:	4641      	mov	r1, r8
 80134ba:	4638      	mov	r0, r7
 80134bc:	47c8      	blx	r9
 80134be:	3001      	adds	r0, #1
 80134c0:	d0e6      	beq.n	8013490 <_printf_common+0xa4>
 80134c2:	3601      	adds	r6, #1
 80134c4:	e7d9      	b.n	801347a <_printf_common+0x8e>
	...

080134c8 <_printf_i>:
 80134c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80134cc:	7e0f      	ldrb	r7, [r1, #24]
 80134ce:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80134d0:	2f78      	cmp	r7, #120	@ 0x78
 80134d2:	4691      	mov	r9, r2
 80134d4:	4680      	mov	r8, r0
 80134d6:	460c      	mov	r4, r1
 80134d8:	469a      	mov	sl, r3
 80134da:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80134de:	d807      	bhi.n	80134f0 <_printf_i+0x28>
 80134e0:	2f62      	cmp	r7, #98	@ 0x62
 80134e2:	d80a      	bhi.n	80134fa <_printf_i+0x32>
 80134e4:	2f00      	cmp	r7, #0
 80134e6:	f000 80d2 	beq.w	801368e <_printf_i+0x1c6>
 80134ea:	2f58      	cmp	r7, #88	@ 0x58
 80134ec:	f000 80b9 	beq.w	8013662 <_printf_i+0x19a>
 80134f0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80134f4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80134f8:	e03a      	b.n	8013570 <_printf_i+0xa8>
 80134fa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80134fe:	2b15      	cmp	r3, #21
 8013500:	d8f6      	bhi.n	80134f0 <_printf_i+0x28>
 8013502:	a101      	add	r1, pc, #4	@ (adr r1, 8013508 <_printf_i+0x40>)
 8013504:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8013508:	08013561 	.word	0x08013561
 801350c:	08013575 	.word	0x08013575
 8013510:	080134f1 	.word	0x080134f1
 8013514:	080134f1 	.word	0x080134f1
 8013518:	080134f1 	.word	0x080134f1
 801351c:	080134f1 	.word	0x080134f1
 8013520:	08013575 	.word	0x08013575
 8013524:	080134f1 	.word	0x080134f1
 8013528:	080134f1 	.word	0x080134f1
 801352c:	080134f1 	.word	0x080134f1
 8013530:	080134f1 	.word	0x080134f1
 8013534:	08013675 	.word	0x08013675
 8013538:	0801359f 	.word	0x0801359f
 801353c:	0801362f 	.word	0x0801362f
 8013540:	080134f1 	.word	0x080134f1
 8013544:	080134f1 	.word	0x080134f1
 8013548:	08013697 	.word	0x08013697
 801354c:	080134f1 	.word	0x080134f1
 8013550:	0801359f 	.word	0x0801359f
 8013554:	080134f1 	.word	0x080134f1
 8013558:	080134f1 	.word	0x080134f1
 801355c:	08013637 	.word	0x08013637
 8013560:	6833      	ldr	r3, [r6, #0]
 8013562:	1d1a      	adds	r2, r3, #4
 8013564:	681b      	ldr	r3, [r3, #0]
 8013566:	6032      	str	r2, [r6, #0]
 8013568:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801356c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8013570:	2301      	movs	r3, #1
 8013572:	e09d      	b.n	80136b0 <_printf_i+0x1e8>
 8013574:	6833      	ldr	r3, [r6, #0]
 8013576:	6820      	ldr	r0, [r4, #0]
 8013578:	1d19      	adds	r1, r3, #4
 801357a:	6031      	str	r1, [r6, #0]
 801357c:	0606      	lsls	r6, r0, #24
 801357e:	d501      	bpl.n	8013584 <_printf_i+0xbc>
 8013580:	681d      	ldr	r5, [r3, #0]
 8013582:	e003      	b.n	801358c <_printf_i+0xc4>
 8013584:	0645      	lsls	r5, r0, #25
 8013586:	d5fb      	bpl.n	8013580 <_printf_i+0xb8>
 8013588:	f9b3 5000 	ldrsh.w	r5, [r3]
 801358c:	2d00      	cmp	r5, #0
 801358e:	da03      	bge.n	8013598 <_printf_i+0xd0>
 8013590:	232d      	movs	r3, #45	@ 0x2d
 8013592:	426d      	negs	r5, r5
 8013594:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8013598:	4859      	ldr	r0, [pc, #356]	@ (8013700 <_printf_i+0x238>)
 801359a:	230a      	movs	r3, #10
 801359c:	e011      	b.n	80135c2 <_printf_i+0xfa>
 801359e:	6821      	ldr	r1, [r4, #0]
 80135a0:	6833      	ldr	r3, [r6, #0]
 80135a2:	0608      	lsls	r0, r1, #24
 80135a4:	f853 5b04 	ldr.w	r5, [r3], #4
 80135a8:	d402      	bmi.n	80135b0 <_printf_i+0xe8>
 80135aa:	0649      	lsls	r1, r1, #25
 80135ac:	bf48      	it	mi
 80135ae:	b2ad      	uxthmi	r5, r5
 80135b0:	2f6f      	cmp	r7, #111	@ 0x6f
 80135b2:	4853      	ldr	r0, [pc, #332]	@ (8013700 <_printf_i+0x238>)
 80135b4:	6033      	str	r3, [r6, #0]
 80135b6:	bf14      	ite	ne
 80135b8:	230a      	movne	r3, #10
 80135ba:	2308      	moveq	r3, #8
 80135bc:	2100      	movs	r1, #0
 80135be:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80135c2:	6866      	ldr	r6, [r4, #4]
 80135c4:	60a6      	str	r6, [r4, #8]
 80135c6:	2e00      	cmp	r6, #0
 80135c8:	bfa2      	ittt	ge
 80135ca:	6821      	ldrge	r1, [r4, #0]
 80135cc:	f021 0104 	bicge.w	r1, r1, #4
 80135d0:	6021      	strge	r1, [r4, #0]
 80135d2:	b90d      	cbnz	r5, 80135d8 <_printf_i+0x110>
 80135d4:	2e00      	cmp	r6, #0
 80135d6:	d04b      	beq.n	8013670 <_printf_i+0x1a8>
 80135d8:	4616      	mov	r6, r2
 80135da:	fbb5 f1f3 	udiv	r1, r5, r3
 80135de:	fb03 5711 	mls	r7, r3, r1, r5
 80135e2:	5dc7      	ldrb	r7, [r0, r7]
 80135e4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80135e8:	462f      	mov	r7, r5
 80135ea:	42bb      	cmp	r3, r7
 80135ec:	460d      	mov	r5, r1
 80135ee:	d9f4      	bls.n	80135da <_printf_i+0x112>
 80135f0:	2b08      	cmp	r3, #8
 80135f2:	d10b      	bne.n	801360c <_printf_i+0x144>
 80135f4:	6823      	ldr	r3, [r4, #0]
 80135f6:	07df      	lsls	r7, r3, #31
 80135f8:	d508      	bpl.n	801360c <_printf_i+0x144>
 80135fa:	6923      	ldr	r3, [r4, #16]
 80135fc:	6861      	ldr	r1, [r4, #4]
 80135fe:	4299      	cmp	r1, r3
 8013600:	bfde      	ittt	le
 8013602:	2330      	movle	r3, #48	@ 0x30
 8013604:	f806 3c01 	strble.w	r3, [r6, #-1]
 8013608:	f106 36ff 	addle.w	r6, r6, #4294967295
 801360c:	1b92      	subs	r2, r2, r6
 801360e:	6122      	str	r2, [r4, #16]
 8013610:	f8cd a000 	str.w	sl, [sp]
 8013614:	464b      	mov	r3, r9
 8013616:	aa03      	add	r2, sp, #12
 8013618:	4621      	mov	r1, r4
 801361a:	4640      	mov	r0, r8
 801361c:	f7ff fee6 	bl	80133ec <_printf_common>
 8013620:	3001      	adds	r0, #1
 8013622:	d14a      	bne.n	80136ba <_printf_i+0x1f2>
 8013624:	f04f 30ff 	mov.w	r0, #4294967295
 8013628:	b004      	add	sp, #16
 801362a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801362e:	6823      	ldr	r3, [r4, #0]
 8013630:	f043 0320 	orr.w	r3, r3, #32
 8013634:	6023      	str	r3, [r4, #0]
 8013636:	4833      	ldr	r0, [pc, #204]	@ (8013704 <_printf_i+0x23c>)
 8013638:	2778      	movs	r7, #120	@ 0x78
 801363a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801363e:	6823      	ldr	r3, [r4, #0]
 8013640:	6831      	ldr	r1, [r6, #0]
 8013642:	061f      	lsls	r7, r3, #24
 8013644:	f851 5b04 	ldr.w	r5, [r1], #4
 8013648:	d402      	bmi.n	8013650 <_printf_i+0x188>
 801364a:	065f      	lsls	r7, r3, #25
 801364c:	bf48      	it	mi
 801364e:	b2ad      	uxthmi	r5, r5
 8013650:	6031      	str	r1, [r6, #0]
 8013652:	07d9      	lsls	r1, r3, #31
 8013654:	bf44      	itt	mi
 8013656:	f043 0320 	orrmi.w	r3, r3, #32
 801365a:	6023      	strmi	r3, [r4, #0]
 801365c:	b11d      	cbz	r5, 8013666 <_printf_i+0x19e>
 801365e:	2310      	movs	r3, #16
 8013660:	e7ac      	b.n	80135bc <_printf_i+0xf4>
 8013662:	4827      	ldr	r0, [pc, #156]	@ (8013700 <_printf_i+0x238>)
 8013664:	e7e9      	b.n	801363a <_printf_i+0x172>
 8013666:	6823      	ldr	r3, [r4, #0]
 8013668:	f023 0320 	bic.w	r3, r3, #32
 801366c:	6023      	str	r3, [r4, #0]
 801366e:	e7f6      	b.n	801365e <_printf_i+0x196>
 8013670:	4616      	mov	r6, r2
 8013672:	e7bd      	b.n	80135f0 <_printf_i+0x128>
 8013674:	6833      	ldr	r3, [r6, #0]
 8013676:	6825      	ldr	r5, [r4, #0]
 8013678:	6961      	ldr	r1, [r4, #20]
 801367a:	1d18      	adds	r0, r3, #4
 801367c:	6030      	str	r0, [r6, #0]
 801367e:	062e      	lsls	r6, r5, #24
 8013680:	681b      	ldr	r3, [r3, #0]
 8013682:	d501      	bpl.n	8013688 <_printf_i+0x1c0>
 8013684:	6019      	str	r1, [r3, #0]
 8013686:	e002      	b.n	801368e <_printf_i+0x1c6>
 8013688:	0668      	lsls	r0, r5, #25
 801368a:	d5fb      	bpl.n	8013684 <_printf_i+0x1bc>
 801368c:	8019      	strh	r1, [r3, #0]
 801368e:	2300      	movs	r3, #0
 8013690:	6123      	str	r3, [r4, #16]
 8013692:	4616      	mov	r6, r2
 8013694:	e7bc      	b.n	8013610 <_printf_i+0x148>
 8013696:	6833      	ldr	r3, [r6, #0]
 8013698:	1d1a      	adds	r2, r3, #4
 801369a:	6032      	str	r2, [r6, #0]
 801369c:	681e      	ldr	r6, [r3, #0]
 801369e:	6862      	ldr	r2, [r4, #4]
 80136a0:	2100      	movs	r1, #0
 80136a2:	4630      	mov	r0, r6
 80136a4:	f7ec fe2c 	bl	8000300 <memchr>
 80136a8:	b108      	cbz	r0, 80136ae <_printf_i+0x1e6>
 80136aa:	1b80      	subs	r0, r0, r6
 80136ac:	6060      	str	r0, [r4, #4]
 80136ae:	6863      	ldr	r3, [r4, #4]
 80136b0:	6123      	str	r3, [r4, #16]
 80136b2:	2300      	movs	r3, #0
 80136b4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80136b8:	e7aa      	b.n	8013610 <_printf_i+0x148>
 80136ba:	6923      	ldr	r3, [r4, #16]
 80136bc:	4632      	mov	r2, r6
 80136be:	4649      	mov	r1, r9
 80136c0:	4640      	mov	r0, r8
 80136c2:	47d0      	blx	sl
 80136c4:	3001      	adds	r0, #1
 80136c6:	d0ad      	beq.n	8013624 <_printf_i+0x15c>
 80136c8:	6823      	ldr	r3, [r4, #0]
 80136ca:	079b      	lsls	r3, r3, #30
 80136cc:	d413      	bmi.n	80136f6 <_printf_i+0x22e>
 80136ce:	68e0      	ldr	r0, [r4, #12]
 80136d0:	9b03      	ldr	r3, [sp, #12]
 80136d2:	4298      	cmp	r0, r3
 80136d4:	bfb8      	it	lt
 80136d6:	4618      	movlt	r0, r3
 80136d8:	e7a6      	b.n	8013628 <_printf_i+0x160>
 80136da:	2301      	movs	r3, #1
 80136dc:	4632      	mov	r2, r6
 80136de:	4649      	mov	r1, r9
 80136e0:	4640      	mov	r0, r8
 80136e2:	47d0      	blx	sl
 80136e4:	3001      	adds	r0, #1
 80136e6:	d09d      	beq.n	8013624 <_printf_i+0x15c>
 80136e8:	3501      	adds	r5, #1
 80136ea:	68e3      	ldr	r3, [r4, #12]
 80136ec:	9903      	ldr	r1, [sp, #12]
 80136ee:	1a5b      	subs	r3, r3, r1
 80136f0:	42ab      	cmp	r3, r5
 80136f2:	dcf2      	bgt.n	80136da <_printf_i+0x212>
 80136f4:	e7eb      	b.n	80136ce <_printf_i+0x206>
 80136f6:	2500      	movs	r5, #0
 80136f8:	f104 0619 	add.w	r6, r4, #25
 80136fc:	e7f5      	b.n	80136ea <_printf_i+0x222>
 80136fe:	bf00      	nop
 8013700:	080141aa 	.word	0x080141aa
 8013704:	080141bb 	.word	0x080141bb

08013708 <__sflush_r>:
 8013708:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801370c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013710:	0716      	lsls	r6, r2, #28
 8013712:	4605      	mov	r5, r0
 8013714:	460c      	mov	r4, r1
 8013716:	d454      	bmi.n	80137c2 <__sflush_r+0xba>
 8013718:	684b      	ldr	r3, [r1, #4]
 801371a:	2b00      	cmp	r3, #0
 801371c:	dc02      	bgt.n	8013724 <__sflush_r+0x1c>
 801371e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8013720:	2b00      	cmp	r3, #0
 8013722:	dd48      	ble.n	80137b6 <__sflush_r+0xae>
 8013724:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8013726:	2e00      	cmp	r6, #0
 8013728:	d045      	beq.n	80137b6 <__sflush_r+0xae>
 801372a:	2300      	movs	r3, #0
 801372c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8013730:	682f      	ldr	r7, [r5, #0]
 8013732:	6a21      	ldr	r1, [r4, #32]
 8013734:	602b      	str	r3, [r5, #0]
 8013736:	d030      	beq.n	801379a <__sflush_r+0x92>
 8013738:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801373a:	89a3      	ldrh	r3, [r4, #12]
 801373c:	0759      	lsls	r1, r3, #29
 801373e:	d505      	bpl.n	801374c <__sflush_r+0x44>
 8013740:	6863      	ldr	r3, [r4, #4]
 8013742:	1ad2      	subs	r2, r2, r3
 8013744:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8013746:	b10b      	cbz	r3, 801374c <__sflush_r+0x44>
 8013748:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801374a:	1ad2      	subs	r2, r2, r3
 801374c:	2300      	movs	r3, #0
 801374e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8013750:	6a21      	ldr	r1, [r4, #32]
 8013752:	4628      	mov	r0, r5
 8013754:	47b0      	blx	r6
 8013756:	1c43      	adds	r3, r0, #1
 8013758:	89a3      	ldrh	r3, [r4, #12]
 801375a:	d106      	bne.n	801376a <__sflush_r+0x62>
 801375c:	6829      	ldr	r1, [r5, #0]
 801375e:	291d      	cmp	r1, #29
 8013760:	d82b      	bhi.n	80137ba <__sflush_r+0xb2>
 8013762:	4a2a      	ldr	r2, [pc, #168]	@ (801380c <__sflush_r+0x104>)
 8013764:	410a      	asrs	r2, r1
 8013766:	07d6      	lsls	r6, r2, #31
 8013768:	d427      	bmi.n	80137ba <__sflush_r+0xb2>
 801376a:	2200      	movs	r2, #0
 801376c:	6062      	str	r2, [r4, #4]
 801376e:	04d9      	lsls	r1, r3, #19
 8013770:	6922      	ldr	r2, [r4, #16]
 8013772:	6022      	str	r2, [r4, #0]
 8013774:	d504      	bpl.n	8013780 <__sflush_r+0x78>
 8013776:	1c42      	adds	r2, r0, #1
 8013778:	d101      	bne.n	801377e <__sflush_r+0x76>
 801377a:	682b      	ldr	r3, [r5, #0]
 801377c:	b903      	cbnz	r3, 8013780 <__sflush_r+0x78>
 801377e:	6560      	str	r0, [r4, #84]	@ 0x54
 8013780:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8013782:	602f      	str	r7, [r5, #0]
 8013784:	b1b9      	cbz	r1, 80137b6 <__sflush_r+0xae>
 8013786:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801378a:	4299      	cmp	r1, r3
 801378c:	d002      	beq.n	8013794 <__sflush_r+0x8c>
 801378e:	4628      	mov	r0, r5
 8013790:	f7ff fca0 	bl	80130d4 <_free_r>
 8013794:	2300      	movs	r3, #0
 8013796:	6363      	str	r3, [r4, #52]	@ 0x34
 8013798:	e00d      	b.n	80137b6 <__sflush_r+0xae>
 801379a:	2301      	movs	r3, #1
 801379c:	4628      	mov	r0, r5
 801379e:	47b0      	blx	r6
 80137a0:	4602      	mov	r2, r0
 80137a2:	1c50      	adds	r0, r2, #1
 80137a4:	d1c9      	bne.n	801373a <__sflush_r+0x32>
 80137a6:	682b      	ldr	r3, [r5, #0]
 80137a8:	2b00      	cmp	r3, #0
 80137aa:	d0c6      	beq.n	801373a <__sflush_r+0x32>
 80137ac:	2b1d      	cmp	r3, #29
 80137ae:	d001      	beq.n	80137b4 <__sflush_r+0xac>
 80137b0:	2b16      	cmp	r3, #22
 80137b2:	d11e      	bne.n	80137f2 <__sflush_r+0xea>
 80137b4:	602f      	str	r7, [r5, #0]
 80137b6:	2000      	movs	r0, #0
 80137b8:	e022      	b.n	8013800 <__sflush_r+0xf8>
 80137ba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80137be:	b21b      	sxth	r3, r3
 80137c0:	e01b      	b.n	80137fa <__sflush_r+0xf2>
 80137c2:	690f      	ldr	r7, [r1, #16]
 80137c4:	2f00      	cmp	r7, #0
 80137c6:	d0f6      	beq.n	80137b6 <__sflush_r+0xae>
 80137c8:	0793      	lsls	r3, r2, #30
 80137ca:	680e      	ldr	r6, [r1, #0]
 80137cc:	bf08      	it	eq
 80137ce:	694b      	ldreq	r3, [r1, #20]
 80137d0:	600f      	str	r7, [r1, #0]
 80137d2:	bf18      	it	ne
 80137d4:	2300      	movne	r3, #0
 80137d6:	eba6 0807 	sub.w	r8, r6, r7
 80137da:	608b      	str	r3, [r1, #8]
 80137dc:	f1b8 0f00 	cmp.w	r8, #0
 80137e0:	dde9      	ble.n	80137b6 <__sflush_r+0xae>
 80137e2:	6a21      	ldr	r1, [r4, #32]
 80137e4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80137e6:	4643      	mov	r3, r8
 80137e8:	463a      	mov	r2, r7
 80137ea:	4628      	mov	r0, r5
 80137ec:	47b0      	blx	r6
 80137ee:	2800      	cmp	r0, #0
 80137f0:	dc08      	bgt.n	8013804 <__sflush_r+0xfc>
 80137f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80137f6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80137fa:	81a3      	strh	r3, [r4, #12]
 80137fc:	f04f 30ff 	mov.w	r0, #4294967295
 8013800:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013804:	4407      	add	r7, r0
 8013806:	eba8 0800 	sub.w	r8, r8, r0
 801380a:	e7e7      	b.n	80137dc <__sflush_r+0xd4>
 801380c:	dfbffffe 	.word	0xdfbffffe

08013810 <_fflush_r>:
 8013810:	b538      	push	{r3, r4, r5, lr}
 8013812:	690b      	ldr	r3, [r1, #16]
 8013814:	4605      	mov	r5, r0
 8013816:	460c      	mov	r4, r1
 8013818:	b913      	cbnz	r3, 8013820 <_fflush_r+0x10>
 801381a:	2500      	movs	r5, #0
 801381c:	4628      	mov	r0, r5
 801381e:	bd38      	pop	{r3, r4, r5, pc}
 8013820:	b118      	cbz	r0, 801382a <_fflush_r+0x1a>
 8013822:	6a03      	ldr	r3, [r0, #32]
 8013824:	b90b      	cbnz	r3, 801382a <_fflush_r+0x1a>
 8013826:	f7ff f9d7 	bl	8012bd8 <__sinit>
 801382a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801382e:	2b00      	cmp	r3, #0
 8013830:	d0f3      	beq.n	801381a <_fflush_r+0xa>
 8013832:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8013834:	07d0      	lsls	r0, r2, #31
 8013836:	d404      	bmi.n	8013842 <_fflush_r+0x32>
 8013838:	0599      	lsls	r1, r3, #22
 801383a:	d402      	bmi.n	8013842 <_fflush_r+0x32>
 801383c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801383e:	f7ff fc38 	bl	80130b2 <__retarget_lock_acquire_recursive>
 8013842:	4628      	mov	r0, r5
 8013844:	4621      	mov	r1, r4
 8013846:	f7ff ff5f 	bl	8013708 <__sflush_r>
 801384a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801384c:	07da      	lsls	r2, r3, #31
 801384e:	4605      	mov	r5, r0
 8013850:	d4e4      	bmi.n	801381c <_fflush_r+0xc>
 8013852:	89a3      	ldrh	r3, [r4, #12]
 8013854:	059b      	lsls	r3, r3, #22
 8013856:	d4e1      	bmi.n	801381c <_fflush_r+0xc>
 8013858:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801385a:	f7ff fc2b 	bl	80130b4 <__retarget_lock_release_recursive>
 801385e:	e7dd      	b.n	801381c <_fflush_r+0xc>

08013860 <__swhatbuf_r>:
 8013860:	b570      	push	{r4, r5, r6, lr}
 8013862:	460c      	mov	r4, r1
 8013864:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013868:	2900      	cmp	r1, #0
 801386a:	b096      	sub	sp, #88	@ 0x58
 801386c:	4615      	mov	r5, r2
 801386e:	461e      	mov	r6, r3
 8013870:	da0d      	bge.n	801388e <__swhatbuf_r+0x2e>
 8013872:	89a3      	ldrh	r3, [r4, #12]
 8013874:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8013878:	f04f 0100 	mov.w	r1, #0
 801387c:	bf14      	ite	ne
 801387e:	2340      	movne	r3, #64	@ 0x40
 8013880:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8013884:	2000      	movs	r0, #0
 8013886:	6031      	str	r1, [r6, #0]
 8013888:	602b      	str	r3, [r5, #0]
 801388a:	b016      	add	sp, #88	@ 0x58
 801388c:	bd70      	pop	{r4, r5, r6, pc}
 801388e:	466a      	mov	r2, sp
 8013890:	f000 f87c 	bl	801398c <_fstat_r>
 8013894:	2800      	cmp	r0, #0
 8013896:	dbec      	blt.n	8013872 <__swhatbuf_r+0x12>
 8013898:	9901      	ldr	r1, [sp, #4]
 801389a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801389e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80138a2:	4259      	negs	r1, r3
 80138a4:	4159      	adcs	r1, r3
 80138a6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80138aa:	e7eb      	b.n	8013884 <__swhatbuf_r+0x24>

080138ac <__smakebuf_r>:
 80138ac:	898b      	ldrh	r3, [r1, #12]
 80138ae:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80138b0:	079d      	lsls	r5, r3, #30
 80138b2:	4606      	mov	r6, r0
 80138b4:	460c      	mov	r4, r1
 80138b6:	d507      	bpl.n	80138c8 <__smakebuf_r+0x1c>
 80138b8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80138bc:	6023      	str	r3, [r4, #0]
 80138be:	6123      	str	r3, [r4, #16]
 80138c0:	2301      	movs	r3, #1
 80138c2:	6163      	str	r3, [r4, #20]
 80138c4:	b003      	add	sp, #12
 80138c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80138c8:	ab01      	add	r3, sp, #4
 80138ca:	466a      	mov	r2, sp
 80138cc:	f7ff ffc8 	bl	8013860 <__swhatbuf_r>
 80138d0:	9f00      	ldr	r7, [sp, #0]
 80138d2:	4605      	mov	r5, r0
 80138d4:	4639      	mov	r1, r7
 80138d6:	4630      	mov	r0, r6
 80138d8:	f7ff f810 	bl	80128fc <_malloc_r>
 80138dc:	b948      	cbnz	r0, 80138f2 <__smakebuf_r+0x46>
 80138de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80138e2:	059a      	lsls	r2, r3, #22
 80138e4:	d4ee      	bmi.n	80138c4 <__smakebuf_r+0x18>
 80138e6:	f023 0303 	bic.w	r3, r3, #3
 80138ea:	f043 0302 	orr.w	r3, r3, #2
 80138ee:	81a3      	strh	r3, [r4, #12]
 80138f0:	e7e2      	b.n	80138b8 <__smakebuf_r+0xc>
 80138f2:	89a3      	ldrh	r3, [r4, #12]
 80138f4:	6020      	str	r0, [r4, #0]
 80138f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80138fa:	81a3      	strh	r3, [r4, #12]
 80138fc:	9b01      	ldr	r3, [sp, #4]
 80138fe:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8013902:	b15b      	cbz	r3, 801391c <__smakebuf_r+0x70>
 8013904:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013908:	4630      	mov	r0, r6
 801390a:	f000 f851 	bl	80139b0 <_isatty_r>
 801390e:	b128      	cbz	r0, 801391c <__smakebuf_r+0x70>
 8013910:	89a3      	ldrh	r3, [r4, #12]
 8013912:	f023 0303 	bic.w	r3, r3, #3
 8013916:	f043 0301 	orr.w	r3, r3, #1
 801391a:	81a3      	strh	r3, [r4, #12]
 801391c:	89a3      	ldrh	r3, [r4, #12]
 801391e:	431d      	orrs	r5, r3
 8013920:	81a5      	strh	r5, [r4, #12]
 8013922:	e7cf      	b.n	80138c4 <__smakebuf_r+0x18>

08013924 <_putc_r>:
 8013924:	b570      	push	{r4, r5, r6, lr}
 8013926:	460d      	mov	r5, r1
 8013928:	4614      	mov	r4, r2
 801392a:	4606      	mov	r6, r0
 801392c:	b118      	cbz	r0, 8013936 <_putc_r+0x12>
 801392e:	6a03      	ldr	r3, [r0, #32]
 8013930:	b90b      	cbnz	r3, 8013936 <_putc_r+0x12>
 8013932:	f7ff f951 	bl	8012bd8 <__sinit>
 8013936:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8013938:	07d8      	lsls	r0, r3, #31
 801393a:	d405      	bmi.n	8013948 <_putc_r+0x24>
 801393c:	89a3      	ldrh	r3, [r4, #12]
 801393e:	0599      	lsls	r1, r3, #22
 8013940:	d402      	bmi.n	8013948 <_putc_r+0x24>
 8013942:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8013944:	f7ff fbb5 	bl	80130b2 <__retarget_lock_acquire_recursive>
 8013948:	68a3      	ldr	r3, [r4, #8]
 801394a:	3b01      	subs	r3, #1
 801394c:	2b00      	cmp	r3, #0
 801394e:	60a3      	str	r3, [r4, #8]
 8013950:	da05      	bge.n	801395e <_putc_r+0x3a>
 8013952:	69a2      	ldr	r2, [r4, #24]
 8013954:	4293      	cmp	r3, r2
 8013956:	db12      	blt.n	801397e <_putc_r+0x5a>
 8013958:	b2eb      	uxtb	r3, r5
 801395a:	2b0a      	cmp	r3, #10
 801395c:	d00f      	beq.n	801397e <_putc_r+0x5a>
 801395e:	6823      	ldr	r3, [r4, #0]
 8013960:	1c5a      	adds	r2, r3, #1
 8013962:	6022      	str	r2, [r4, #0]
 8013964:	701d      	strb	r5, [r3, #0]
 8013966:	b2ed      	uxtb	r5, r5
 8013968:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801396a:	07da      	lsls	r2, r3, #31
 801396c:	d405      	bmi.n	801397a <_putc_r+0x56>
 801396e:	89a3      	ldrh	r3, [r4, #12]
 8013970:	059b      	lsls	r3, r3, #22
 8013972:	d402      	bmi.n	801397a <_putc_r+0x56>
 8013974:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8013976:	f7ff fb9d 	bl	80130b4 <__retarget_lock_release_recursive>
 801397a:	4628      	mov	r0, r5
 801397c:	bd70      	pop	{r4, r5, r6, pc}
 801397e:	4629      	mov	r1, r5
 8013980:	4622      	mov	r2, r4
 8013982:	4630      	mov	r0, r6
 8013984:	f7ff fa19 	bl	8012dba <__swbuf_r>
 8013988:	4605      	mov	r5, r0
 801398a:	e7ed      	b.n	8013968 <_putc_r+0x44>

0801398c <_fstat_r>:
 801398c:	b538      	push	{r3, r4, r5, lr}
 801398e:	4d07      	ldr	r5, [pc, #28]	@ (80139ac <_fstat_r+0x20>)
 8013990:	2300      	movs	r3, #0
 8013992:	4604      	mov	r4, r0
 8013994:	4608      	mov	r0, r1
 8013996:	4611      	mov	r1, r2
 8013998:	602b      	str	r3, [r5, #0]
 801399a:	f7f0 ffb1 	bl	8004900 <_fstat>
 801399e:	1c43      	adds	r3, r0, #1
 80139a0:	d102      	bne.n	80139a8 <_fstat_r+0x1c>
 80139a2:	682b      	ldr	r3, [r5, #0]
 80139a4:	b103      	cbz	r3, 80139a8 <_fstat_r+0x1c>
 80139a6:	6023      	str	r3, [r4, #0]
 80139a8:	bd38      	pop	{r3, r4, r5, pc}
 80139aa:	bf00      	nop
 80139ac:	24000d04 	.word	0x24000d04

080139b0 <_isatty_r>:
 80139b0:	b538      	push	{r3, r4, r5, lr}
 80139b2:	4d06      	ldr	r5, [pc, #24]	@ (80139cc <_isatty_r+0x1c>)
 80139b4:	2300      	movs	r3, #0
 80139b6:	4604      	mov	r4, r0
 80139b8:	4608      	mov	r0, r1
 80139ba:	602b      	str	r3, [r5, #0]
 80139bc:	f7f0 ffb0 	bl	8004920 <_isatty>
 80139c0:	1c43      	adds	r3, r0, #1
 80139c2:	d102      	bne.n	80139ca <_isatty_r+0x1a>
 80139c4:	682b      	ldr	r3, [r5, #0]
 80139c6:	b103      	cbz	r3, 80139ca <_isatty_r+0x1a>
 80139c8:	6023      	str	r3, [r4, #0]
 80139ca:	bd38      	pop	{r3, r4, r5, pc}
 80139cc:	24000d04 	.word	0x24000d04

080139d0 <_init>:
 80139d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80139d2:	bf00      	nop
 80139d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80139d6:	bc08      	pop	{r3}
 80139d8:	469e      	mov	lr, r3
 80139da:	4770      	bx	lr

080139dc <_fini>:
 80139dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80139de:	bf00      	nop
 80139e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80139e2:	bc08      	pop	{r3}
 80139e4:	469e      	mov	lr, r3
 80139e6:	4770      	bx	lr
