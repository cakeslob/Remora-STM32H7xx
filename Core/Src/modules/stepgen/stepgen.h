#ifndef STEPGEN_H
#define STEPGEN_H

#include <cstdint>
#include <string>
#include <iostream>

#include "../../modules/module.h"
#include "../../drivers/pin/pin.h"

#include "extern.h"

void createStepgen(void);

class Stepgen : public Module
{
  private:

    int 				jointNumber;              		// LinuxCNC joint number
    std::string 		enable, step, direction;		// physical pins connections
    int32_t 			stepBit;                		// position in the DDS accumulator that triggers a step pulse
    volatile int32_t 	*ptrFrequencyCommand; 			// pointer to the data source where to get the frequency command
    volatile int32_t 	*ptrFeedback;       			// pointer where to put the feedback
    volatile uint8_t 	*ptrJointEnable;				// pointer to the joint enables

    int 	mask;

    bool 	isEnabled;        				// flag to enable the step generator
    bool 	isForward;        				// current direction
    bool 	isStepping;

    int32_t frequencyCommand;     			// the joint frequency command generated by LinuxCNC
    int32_t rawCount;             			// current position raw count - not currently used - mirrors original stepgen.c
    int32_t DDSaccumulator;       			// Direct Digital Synthesis (DDS) accumulator
    float   frequencyScale;		  	  		// frequency scale
  	int32_t	DDSaddValue;		  	    	// DDS accumulator add vdd value

    Pin *enablePin, *stepPin, *directionPin;

    void makePulses();
    void stopPulses();

  public:

    Stepgen(int32_t, int, std::string, std::string, std::string, int, volatile int32_t&, volatile int32_t&, volatile uint8_t&);  // constructor

    virtual void update(void);           	// Module default interface
    virtual void updatePost(void);
    virtual void slowUpdate(void);

    void setEnabled(bool);
};


#endif
