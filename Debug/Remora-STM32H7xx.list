
Remora-STM32H7xx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001f3b8  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001180  0801f658  0801f658  00020658  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080207d8  080207d8  000217d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000010  080207e0  080207e0  000217e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000008  080207f0  080207f0  000217f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000009c  24000000  080207f8  00022000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000c44  2400009c  08020894  0002209c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24000ce0  08020894  00022ce0  2**0
                  ALLOC
  9 .dma_buffers  00000100  30000000  00000000  00001000  2**5
                  ALLOC
 10 .ARM.attributes 0000002e  00000000  00000000  0002209c  2**0
                  CONTENTS, READONLY
 11 .debug_info   000dd5ce  00000000  00000000  000220ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 0000f22d  00000000  00000000  000ff698  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 000053e8  00000000  00000000  0010e8c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 00004042  00000000  00000000  00113cb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0004af12  00000000  00000000  00117cf2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0005d702  00000000  00000000  00162c04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    001aeb41  00000000  00000000  001c0306  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  0036ee47  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00019b64  00000000  00000000  0036ee8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line_str 00000069  00000000  00000000  003889f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	2400009c 	.word	0x2400009c
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0801f640 	.word	0x0801f640

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240000a0 	.word	0x240000a0
 80002dc:	0801f640 	.word	0x0801f640

080002e0 <strcmp>:
 80002e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80002e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002e8:	2a01      	cmp	r2, #1
 80002ea:	bf28      	it	cs
 80002ec:	429a      	cmpcs	r2, r3
 80002ee:	d0f7      	beq.n	80002e0 <strcmp>
 80002f0:	1ad0      	subs	r0, r2, r3
 80002f2:	4770      	bx	lr
	...

08000300 <memchr>:
 8000300:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000304:	2a10      	cmp	r2, #16
 8000306:	db2b      	blt.n	8000360 <memchr+0x60>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	d008      	beq.n	8000320 <memchr+0x20>
 800030e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000312:	3a01      	subs	r2, #1
 8000314:	428b      	cmp	r3, r1
 8000316:	d02d      	beq.n	8000374 <memchr+0x74>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	b342      	cbz	r2, 8000370 <memchr+0x70>
 800031e:	d1f6      	bne.n	800030e <memchr+0xe>
 8000320:	b4f0      	push	{r4, r5, r6, r7}
 8000322:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000326:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800032a:	f022 0407 	bic.w	r4, r2, #7
 800032e:	f07f 0700 	mvns.w	r7, #0
 8000332:	2300      	movs	r3, #0
 8000334:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000338:	3c08      	subs	r4, #8
 800033a:	ea85 0501 	eor.w	r5, r5, r1
 800033e:	ea86 0601 	eor.w	r6, r6, r1
 8000342:	fa85 f547 	uadd8	r5, r5, r7
 8000346:	faa3 f587 	sel	r5, r3, r7
 800034a:	fa86 f647 	uadd8	r6, r6, r7
 800034e:	faa5 f687 	sel	r6, r5, r7
 8000352:	b98e      	cbnz	r6, 8000378 <memchr+0x78>
 8000354:	d1ee      	bne.n	8000334 <memchr+0x34>
 8000356:	bcf0      	pop	{r4, r5, r6, r7}
 8000358:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800035c:	f002 0207 	and.w	r2, r2, #7
 8000360:	b132      	cbz	r2, 8000370 <memchr+0x70>
 8000362:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000366:	3a01      	subs	r2, #1
 8000368:	ea83 0301 	eor.w	r3, r3, r1
 800036c:	b113      	cbz	r3, 8000374 <memchr+0x74>
 800036e:	d1f8      	bne.n	8000362 <memchr+0x62>
 8000370:	2000      	movs	r0, #0
 8000372:	4770      	bx	lr
 8000374:	3801      	subs	r0, #1
 8000376:	4770      	bx	lr
 8000378:	2d00      	cmp	r5, #0
 800037a:	bf06      	itte	eq
 800037c:	4635      	moveq	r5, r6
 800037e:	3803      	subeq	r0, #3
 8000380:	3807      	subne	r0, #7
 8000382:	f015 0f01 	tst.w	r5, #1
 8000386:	d107      	bne.n	8000398 <memchr+0x98>
 8000388:	3001      	adds	r0, #1
 800038a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800038e:	bf02      	ittt	eq
 8000390:	3001      	addeq	r0, #1
 8000392:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000396:	3001      	addeq	r0, #1
 8000398:	bcf0      	pop	{r4, r5, r6, r7}
 800039a:	3801      	subs	r0, #1
 800039c:	4770      	bx	lr
 800039e:	bf00      	nop

080003a0 <strlen>:
 80003a0:	4603      	mov	r3, r0
 80003a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80003a6:	2a00      	cmp	r2, #0
 80003a8:	d1fb      	bne.n	80003a2 <strlen+0x2>
 80003aa:	1a18      	subs	r0, r3, r0
 80003ac:	3801      	subs	r0, #1
 80003ae:	4770      	bx	lr

080003b0 <__aeabi_drsub>:
 80003b0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80003b4:	e002      	b.n	80003bc <__adddf3>
 80003b6:	bf00      	nop

080003b8 <__aeabi_dsub>:
 80003b8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080003bc <__adddf3>:
 80003bc:	b530      	push	{r4, r5, lr}
 80003be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003c6:	ea94 0f05 	teq	r4, r5
 80003ca:	bf08      	it	eq
 80003cc:	ea90 0f02 	teqeq	r0, r2
 80003d0:	bf1f      	itttt	ne
 80003d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003e2:	f000 80e2 	beq.w	80005aa <__adddf3+0x1ee>
 80003e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003ee:	bfb8      	it	lt
 80003f0:	426d      	neglt	r5, r5
 80003f2:	dd0c      	ble.n	800040e <__adddf3+0x52>
 80003f4:	442c      	add	r4, r5
 80003f6:	ea80 0202 	eor.w	r2, r0, r2
 80003fa:	ea81 0303 	eor.w	r3, r1, r3
 80003fe:	ea82 0000 	eor.w	r0, r2, r0
 8000402:	ea83 0101 	eor.w	r1, r3, r1
 8000406:	ea80 0202 	eor.w	r2, r0, r2
 800040a:	ea81 0303 	eor.w	r3, r1, r3
 800040e:	2d36      	cmp	r5, #54	@ 0x36
 8000410:	bf88      	it	hi
 8000412:	bd30      	pophi	{r4, r5, pc}
 8000414:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000418:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800041c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000420:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000424:	d002      	beq.n	800042c <__adddf3+0x70>
 8000426:	4240      	negs	r0, r0
 8000428:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800042c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000430:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000434:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000438:	d002      	beq.n	8000440 <__adddf3+0x84>
 800043a:	4252      	negs	r2, r2
 800043c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000440:	ea94 0f05 	teq	r4, r5
 8000444:	f000 80a7 	beq.w	8000596 <__adddf3+0x1da>
 8000448:	f1a4 0401 	sub.w	r4, r4, #1
 800044c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000450:	db0d      	blt.n	800046e <__adddf3+0xb2>
 8000452:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000456:	fa22 f205 	lsr.w	r2, r2, r5
 800045a:	1880      	adds	r0, r0, r2
 800045c:	f141 0100 	adc.w	r1, r1, #0
 8000460:	fa03 f20e 	lsl.w	r2, r3, lr
 8000464:	1880      	adds	r0, r0, r2
 8000466:	fa43 f305 	asr.w	r3, r3, r5
 800046a:	4159      	adcs	r1, r3
 800046c:	e00e      	b.n	800048c <__adddf3+0xd0>
 800046e:	f1a5 0520 	sub.w	r5, r5, #32
 8000472:	f10e 0e20 	add.w	lr, lr, #32
 8000476:	2a01      	cmp	r2, #1
 8000478:	fa03 fc0e 	lsl.w	ip, r3, lr
 800047c:	bf28      	it	cs
 800047e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000482:	fa43 f305 	asr.w	r3, r3, r5
 8000486:	18c0      	adds	r0, r0, r3
 8000488:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800048c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000490:	d507      	bpl.n	80004a2 <__adddf3+0xe6>
 8000492:	f04f 0e00 	mov.w	lr, #0
 8000496:	f1dc 0c00 	rsbs	ip, ip, #0
 800049a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800049e:	eb6e 0101 	sbc.w	r1, lr, r1
 80004a2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80004a6:	d31b      	bcc.n	80004e0 <__adddf3+0x124>
 80004a8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80004ac:	d30c      	bcc.n	80004c8 <__adddf3+0x10c>
 80004ae:	0849      	lsrs	r1, r1, #1
 80004b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80004b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004b8:	f104 0401 	add.w	r4, r4, #1
 80004bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004c0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80004c4:	f080 809a 	bcs.w	80005fc <__adddf3+0x240>
 80004c8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004cc:	bf08      	it	eq
 80004ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004d2:	f150 0000 	adcs.w	r0, r0, #0
 80004d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004da:	ea41 0105 	orr.w	r1, r1, r5
 80004de:	bd30      	pop	{r4, r5, pc}
 80004e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004e4:	4140      	adcs	r0, r0
 80004e6:	eb41 0101 	adc.w	r1, r1, r1
 80004ea:	3c01      	subs	r4, #1
 80004ec:	bf28      	it	cs
 80004ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80004f2:	d2e9      	bcs.n	80004c8 <__adddf3+0x10c>
 80004f4:	f091 0f00 	teq	r1, #0
 80004f8:	bf04      	itt	eq
 80004fa:	4601      	moveq	r1, r0
 80004fc:	2000      	moveq	r0, #0
 80004fe:	fab1 f381 	clz	r3, r1
 8000502:	bf08      	it	eq
 8000504:	3320      	addeq	r3, #32
 8000506:	f1a3 030b 	sub.w	r3, r3, #11
 800050a:	f1b3 0220 	subs.w	r2, r3, #32
 800050e:	da0c      	bge.n	800052a <__adddf3+0x16e>
 8000510:	320c      	adds	r2, #12
 8000512:	dd08      	ble.n	8000526 <__adddf3+0x16a>
 8000514:	f102 0c14 	add.w	ip, r2, #20
 8000518:	f1c2 020c 	rsb	r2, r2, #12
 800051c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000520:	fa21 f102 	lsr.w	r1, r1, r2
 8000524:	e00c      	b.n	8000540 <__adddf3+0x184>
 8000526:	f102 0214 	add.w	r2, r2, #20
 800052a:	bfd8      	it	le
 800052c:	f1c2 0c20 	rsble	ip, r2, #32
 8000530:	fa01 f102 	lsl.w	r1, r1, r2
 8000534:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000538:	bfdc      	itt	le
 800053a:	ea41 010c 	orrle.w	r1, r1, ip
 800053e:	4090      	lslle	r0, r2
 8000540:	1ae4      	subs	r4, r4, r3
 8000542:	bfa2      	ittt	ge
 8000544:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000548:	4329      	orrge	r1, r5
 800054a:	bd30      	popge	{r4, r5, pc}
 800054c:	ea6f 0404 	mvn.w	r4, r4
 8000550:	3c1f      	subs	r4, #31
 8000552:	da1c      	bge.n	800058e <__adddf3+0x1d2>
 8000554:	340c      	adds	r4, #12
 8000556:	dc0e      	bgt.n	8000576 <__adddf3+0x1ba>
 8000558:	f104 0414 	add.w	r4, r4, #20
 800055c:	f1c4 0220 	rsb	r2, r4, #32
 8000560:	fa20 f004 	lsr.w	r0, r0, r4
 8000564:	fa01 f302 	lsl.w	r3, r1, r2
 8000568:	ea40 0003 	orr.w	r0, r0, r3
 800056c:	fa21 f304 	lsr.w	r3, r1, r4
 8000570:	ea45 0103 	orr.w	r1, r5, r3
 8000574:	bd30      	pop	{r4, r5, pc}
 8000576:	f1c4 040c 	rsb	r4, r4, #12
 800057a:	f1c4 0220 	rsb	r2, r4, #32
 800057e:	fa20 f002 	lsr.w	r0, r0, r2
 8000582:	fa01 f304 	lsl.w	r3, r1, r4
 8000586:	ea40 0003 	orr.w	r0, r0, r3
 800058a:	4629      	mov	r1, r5
 800058c:	bd30      	pop	{r4, r5, pc}
 800058e:	fa21 f004 	lsr.w	r0, r1, r4
 8000592:	4629      	mov	r1, r5
 8000594:	bd30      	pop	{r4, r5, pc}
 8000596:	f094 0f00 	teq	r4, #0
 800059a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800059e:	bf06      	itte	eq
 80005a0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80005a4:	3401      	addeq	r4, #1
 80005a6:	3d01      	subne	r5, #1
 80005a8:	e74e      	b.n	8000448 <__adddf3+0x8c>
 80005aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ae:	bf18      	it	ne
 80005b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005b4:	d029      	beq.n	800060a <__adddf3+0x24e>
 80005b6:	ea94 0f05 	teq	r4, r5
 80005ba:	bf08      	it	eq
 80005bc:	ea90 0f02 	teqeq	r0, r2
 80005c0:	d005      	beq.n	80005ce <__adddf3+0x212>
 80005c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005c6:	bf04      	itt	eq
 80005c8:	4619      	moveq	r1, r3
 80005ca:	4610      	moveq	r0, r2
 80005cc:	bd30      	pop	{r4, r5, pc}
 80005ce:	ea91 0f03 	teq	r1, r3
 80005d2:	bf1e      	ittt	ne
 80005d4:	2100      	movne	r1, #0
 80005d6:	2000      	movne	r0, #0
 80005d8:	bd30      	popne	{r4, r5, pc}
 80005da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005de:	d105      	bne.n	80005ec <__adddf3+0x230>
 80005e0:	0040      	lsls	r0, r0, #1
 80005e2:	4149      	adcs	r1, r1
 80005e4:	bf28      	it	cs
 80005e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80005ea:	bd30      	pop	{r4, r5, pc}
 80005ec:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80005f0:	bf3c      	itt	cc
 80005f2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80005f6:	bd30      	popcc	{r4, r5, pc}
 80005f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005fc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000600:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000604:	f04f 0000 	mov.w	r0, #0
 8000608:	bd30      	pop	{r4, r5, pc}
 800060a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800060e:	bf1a      	itte	ne
 8000610:	4619      	movne	r1, r3
 8000612:	4610      	movne	r0, r2
 8000614:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000618:	bf1c      	itt	ne
 800061a:	460b      	movne	r3, r1
 800061c:	4602      	movne	r2, r0
 800061e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000622:	bf06      	itte	eq
 8000624:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000628:	ea91 0f03 	teqeq	r1, r3
 800062c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000630:	bd30      	pop	{r4, r5, pc}
 8000632:	bf00      	nop

08000634 <__aeabi_ui2d>:
 8000634:	f090 0f00 	teq	r0, #0
 8000638:	bf04      	itt	eq
 800063a:	2100      	moveq	r1, #0
 800063c:	4770      	bxeq	lr
 800063e:	b530      	push	{r4, r5, lr}
 8000640:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000644:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000648:	f04f 0500 	mov.w	r5, #0
 800064c:	f04f 0100 	mov.w	r1, #0
 8000650:	e750      	b.n	80004f4 <__adddf3+0x138>
 8000652:	bf00      	nop

08000654 <__aeabi_i2d>:
 8000654:	f090 0f00 	teq	r0, #0
 8000658:	bf04      	itt	eq
 800065a:	2100      	moveq	r1, #0
 800065c:	4770      	bxeq	lr
 800065e:	b530      	push	{r4, r5, lr}
 8000660:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000664:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000668:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800066c:	bf48      	it	mi
 800066e:	4240      	negmi	r0, r0
 8000670:	f04f 0100 	mov.w	r1, #0
 8000674:	e73e      	b.n	80004f4 <__adddf3+0x138>
 8000676:	bf00      	nop

08000678 <__aeabi_f2d>:
 8000678:	0042      	lsls	r2, r0, #1
 800067a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800067e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000682:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000686:	bf1f      	itttt	ne
 8000688:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800068c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000690:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000694:	4770      	bxne	lr
 8000696:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800069a:	bf08      	it	eq
 800069c:	4770      	bxeq	lr
 800069e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80006a2:	bf04      	itt	eq
 80006a4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80006a8:	4770      	bxeq	lr
 80006aa:	b530      	push	{r4, r5, lr}
 80006ac:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80006b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80006b4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006b8:	e71c      	b.n	80004f4 <__adddf3+0x138>
 80006ba:	bf00      	nop

080006bc <__aeabi_ul2d>:
 80006bc:	ea50 0201 	orrs.w	r2, r0, r1
 80006c0:	bf08      	it	eq
 80006c2:	4770      	bxeq	lr
 80006c4:	b530      	push	{r4, r5, lr}
 80006c6:	f04f 0500 	mov.w	r5, #0
 80006ca:	e00a      	b.n	80006e2 <__aeabi_l2d+0x16>

080006cc <__aeabi_l2d>:
 80006cc:	ea50 0201 	orrs.w	r2, r0, r1
 80006d0:	bf08      	it	eq
 80006d2:	4770      	bxeq	lr
 80006d4:	b530      	push	{r4, r5, lr}
 80006d6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80006da:	d502      	bpl.n	80006e2 <__aeabi_l2d+0x16>
 80006dc:	4240      	negs	r0, r0
 80006de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006e2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006e6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006ee:	f43f aed8 	beq.w	80004a2 <__adddf3+0xe6>
 80006f2:	f04f 0203 	mov.w	r2, #3
 80006f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006fa:	bf18      	it	ne
 80006fc:	3203      	addne	r2, #3
 80006fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000702:	bf18      	it	ne
 8000704:	3203      	addne	r2, #3
 8000706:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800070a:	f1c2 0320 	rsb	r3, r2, #32
 800070e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000712:	fa20 f002 	lsr.w	r0, r0, r2
 8000716:	fa01 fe03 	lsl.w	lr, r1, r3
 800071a:	ea40 000e 	orr.w	r0, r0, lr
 800071e:	fa21 f102 	lsr.w	r1, r1, r2
 8000722:	4414      	add	r4, r2
 8000724:	e6bd      	b.n	80004a2 <__adddf3+0xe6>
 8000726:	bf00      	nop

08000728 <__aeabi_frsub>:
 8000728:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 800072c:	e002      	b.n	8000734 <__addsf3>
 800072e:	bf00      	nop

08000730 <__aeabi_fsub>:
 8000730:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000734 <__addsf3>:
 8000734:	0042      	lsls	r2, r0, #1
 8000736:	bf1f      	itttt	ne
 8000738:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 800073c:	ea92 0f03 	teqne	r2, r3
 8000740:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000744:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000748:	d06a      	beq.n	8000820 <__addsf3+0xec>
 800074a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 800074e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000752:	bfc1      	itttt	gt
 8000754:	18d2      	addgt	r2, r2, r3
 8000756:	4041      	eorgt	r1, r0
 8000758:	4048      	eorgt	r0, r1
 800075a:	4041      	eorgt	r1, r0
 800075c:	bfb8      	it	lt
 800075e:	425b      	neglt	r3, r3
 8000760:	2b19      	cmp	r3, #25
 8000762:	bf88      	it	hi
 8000764:	4770      	bxhi	lr
 8000766:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 800076a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800076e:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000772:	bf18      	it	ne
 8000774:	4240      	negne	r0, r0
 8000776:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800077a:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 800077e:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000782:	bf18      	it	ne
 8000784:	4249      	negne	r1, r1
 8000786:	ea92 0f03 	teq	r2, r3
 800078a:	d03f      	beq.n	800080c <__addsf3+0xd8>
 800078c:	f1a2 0201 	sub.w	r2, r2, #1
 8000790:	fa41 fc03 	asr.w	ip, r1, r3
 8000794:	eb10 000c 	adds.w	r0, r0, ip
 8000798:	f1c3 0320 	rsb	r3, r3, #32
 800079c:	fa01 f103 	lsl.w	r1, r1, r3
 80007a0:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80007a4:	d502      	bpl.n	80007ac <__addsf3+0x78>
 80007a6:	4249      	negs	r1, r1
 80007a8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80007ac:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 80007b0:	d313      	bcc.n	80007da <__addsf3+0xa6>
 80007b2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 80007b6:	d306      	bcc.n	80007c6 <__addsf3+0x92>
 80007b8:	0840      	lsrs	r0, r0, #1
 80007ba:	ea4f 0131 	mov.w	r1, r1, rrx
 80007be:	f102 0201 	add.w	r2, r2, #1
 80007c2:	2afe      	cmp	r2, #254	@ 0xfe
 80007c4:	d251      	bcs.n	800086a <__addsf3+0x136>
 80007c6:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 80007ca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80007ce:	bf08      	it	eq
 80007d0:	f020 0001 	biceq.w	r0, r0, #1
 80007d4:	ea40 0003 	orr.w	r0, r0, r3
 80007d8:	4770      	bx	lr
 80007da:	0049      	lsls	r1, r1, #1
 80007dc:	eb40 0000 	adc.w	r0, r0, r0
 80007e0:	3a01      	subs	r2, #1
 80007e2:	bf28      	it	cs
 80007e4:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 80007e8:	d2ed      	bcs.n	80007c6 <__addsf3+0x92>
 80007ea:	fab0 fc80 	clz	ip, r0
 80007ee:	f1ac 0c08 	sub.w	ip, ip, #8
 80007f2:	ebb2 020c 	subs.w	r2, r2, ip
 80007f6:	fa00 f00c 	lsl.w	r0, r0, ip
 80007fa:	bfaa      	itet	ge
 80007fc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000800:	4252      	neglt	r2, r2
 8000802:	4318      	orrge	r0, r3
 8000804:	bfbc      	itt	lt
 8000806:	40d0      	lsrlt	r0, r2
 8000808:	4318      	orrlt	r0, r3
 800080a:	4770      	bx	lr
 800080c:	f092 0f00 	teq	r2, #0
 8000810:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000814:	bf06      	itte	eq
 8000816:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 800081a:	3201      	addeq	r2, #1
 800081c:	3b01      	subne	r3, #1
 800081e:	e7b5      	b.n	800078c <__addsf3+0x58>
 8000820:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000824:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000828:	bf18      	it	ne
 800082a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800082e:	d021      	beq.n	8000874 <__addsf3+0x140>
 8000830:	ea92 0f03 	teq	r2, r3
 8000834:	d004      	beq.n	8000840 <__addsf3+0x10c>
 8000836:	f092 0f00 	teq	r2, #0
 800083a:	bf08      	it	eq
 800083c:	4608      	moveq	r0, r1
 800083e:	4770      	bx	lr
 8000840:	ea90 0f01 	teq	r0, r1
 8000844:	bf1c      	itt	ne
 8000846:	2000      	movne	r0, #0
 8000848:	4770      	bxne	lr
 800084a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 800084e:	d104      	bne.n	800085a <__addsf3+0x126>
 8000850:	0040      	lsls	r0, r0, #1
 8000852:	bf28      	it	cs
 8000854:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000858:	4770      	bx	lr
 800085a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 800085e:	bf3c      	itt	cc
 8000860:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000864:	4770      	bxcc	lr
 8000866:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 800086a:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 800086e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000872:	4770      	bx	lr
 8000874:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000878:	bf16      	itet	ne
 800087a:	4608      	movne	r0, r1
 800087c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000880:	4601      	movne	r1, r0
 8000882:	0242      	lsls	r2, r0, #9
 8000884:	bf06      	itte	eq
 8000886:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 800088a:	ea90 0f01 	teqeq	r0, r1
 800088e:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000892:	4770      	bx	lr

08000894 <__aeabi_ui2f>:
 8000894:	f04f 0300 	mov.w	r3, #0
 8000898:	e004      	b.n	80008a4 <__aeabi_i2f+0x8>
 800089a:	bf00      	nop

0800089c <__aeabi_i2f>:
 800089c:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 80008a0:	bf48      	it	mi
 80008a2:	4240      	negmi	r0, r0
 80008a4:	ea5f 0c00 	movs.w	ip, r0
 80008a8:	bf08      	it	eq
 80008aa:	4770      	bxeq	lr
 80008ac:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 80008b0:	4601      	mov	r1, r0
 80008b2:	f04f 0000 	mov.w	r0, #0
 80008b6:	e01c      	b.n	80008f2 <__aeabi_l2f+0x2a>

080008b8 <__aeabi_ul2f>:
 80008b8:	ea50 0201 	orrs.w	r2, r0, r1
 80008bc:	bf08      	it	eq
 80008be:	4770      	bxeq	lr
 80008c0:	f04f 0300 	mov.w	r3, #0
 80008c4:	e00a      	b.n	80008dc <__aeabi_l2f+0x14>
 80008c6:	bf00      	nop

080008c8 <__aeabi_l2f>:
 80008c8:	ea50 0201 	orrs.w	r2, r0, r1
 80008cc:	bf08      	it	eq
 80008ce:	4770      	bxeq	lr
 80008d0:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 80008d4:	d502      	bpl.n	80008dc <__aeabi_l2f+0x14>
 80008d6:	4240      	negs	r0, r0
 80008d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80008dc:	ea5f 0c01 	movs.w	ip, r1
 80008e0:	bf02      	ittt	eq
 80008e2:	4684      	moveq	ip, r0
 80008e4:	4601      	moveq	r1, r0
 80008e6:	2000      	moveq	r0, #0
 80008e8:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 80008ec:	bf08      	it	eq
 80008ee:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 80008f2:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 80008f6:	fabc f28c 	clz	r2, ip
 80008fa:	3a08      	subs	r2, #8
 80008fc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000900:	db10      	blt.n	8000924 <__aeabi_l2f+0x5c>
 8000902:	fa01 fc02 	lsl.w	ip, r1, r2
 8000906:	4463      	add	r3, ip
 8000908:	fa00 fc02 	lsl.w	ip, r0, r2
 800090c:	f1c2 0220 	rsb	r2, r2, #32
 8000910:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000914:	fa20 f202 	lsr.w	r2, r0, r2
 8000918:	eb43 0002 	adc.w	r0, r3, r2
 800091c:	bf08      	it	eq
 800091e:	f020 0001 	biceq.w	r0, r0, #1
 8000922:	4770      	bx	lr
 8000924:	f102 0220 	add.w	r2, r2, #32
 8000928:	fa01 fc02 	lsl.w	ip, r1, r2
 800092c:	f1c2 0220 	rsb	r2, r2, #32
 8000930:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000934:	fa21 f202 	lsr.w	r2, r1, r2
 8000938:	eb43 0002 	adc.w	r0, r3, r2
 800093c:	bf08      	it	eq
 800093e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000942:	4770      	bx	lr

08000944 <__aeabi_uldivmod>:
 8000944:	b953      	cbnz	r3, 800095c <__aeabi_uldivmod+0x18>
 8000946:	b94a      	cbnz	r2, 800095c <__aeabi_uldivmod+0x18>
 8000948:	2900      	cmp	r1, #0
 800094a:	bf08      	it	eq
 800094c:	2800      	cmpeq	r0, #0
 800094e:	bf1c      	itt	ne
 8000950:	f04f 31ff 	movne.w	r1, #4294967295
 8000954:	f04f 30ff 	movne.w	r0, #4294967295
 8000958:	f000 b96a 	b.w	8000c30 <__aeabi_idiv0>
 800095c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000960:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000964:	f000 f806 	bl	8000974 <__udivmoddi4>
 8000968:	f8dd e004 	ldr.w	lr, [sp, #4]
 800096c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000970:	b004      	add	sp, #16
 8000972:	4770      	bx	lr

08000974 <__udivmoddi4>:
 8000974:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000978:	9d08      	ldr	r5, [sp, #32]
 800097a:	460c      	mov	r4, r1
 800097c:	2b00      	cmp	r3, #0
 800097e:	d14e      	bne.n	8000a1e <__udivmoddi4+0xaa>
 8000980:	4694      	mov	ip, r2
 8000982:	458c      	cmp	ip, r1
 8000984:	4686      	mov	lr, r0
 8000986:	fab2 f282 	clz	r2, r2
 800098a:	d962      	bls.n	8000a52 <__udivmoddi4+0xde>
 800098c:	b14a      	cbz	r2, 80009a2 <__udivmoddi4+0x2e>
 800098e:	f1c2 0320 	rsb	r3, r2, #32
 8000992:	4091      	lsls	r1, r2
 8000994:	fa20 f303 	lsr.w	r3, r0, r3
 8000998:	fa0c fc02 	lsl.w	ip, ip, r2
 800099c:	4319      	orrs	r1, r3
 800099e:	fa00 fe02 	lsl.w	lr, r0, r2
 80009a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80009a6:	fa1f f68c 	uxth.w	r6, ip
 80009aa:	fbb1 f4f7 	udiv	r4, r1, r7
 80009ae:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80009b2:	fb07 1114 	mls	r1, r7, r4, r1
 80009b6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80009ba:	fb04 f106 	mul.w	r1, r4, r6
 80009be:	4299      	cmp	r1, r3
 80009c0:	d90a      	bls.n	80009d8 <__udivmoddi4+0x64>
 80009c2:	eb1c 0303 	adds.w	r3, ip, r3
 80009c6:	f104 30ff 	add.w	r0, r4, #4294967295
 80009ca:	f080 8112 	bcs.w	8000bf2 <__udivmoddi4+0x27e>
 80009ce:	4299      	cmp	r1, r3
 80009d0:	f240 810f 	bls.w	8000bf2 <__udivmoddi4+0x27e>
 80009d4:	3c02      	subs	r4, #2
 80009d6:	4463      	add	r3, ip
 80009d8:	1a59      	subs	r1, r3, r1
 80009da:	fa1f f38e 	uxth.w	r3, lr
 80009de:	fbb1 f0f7 	udiv	r0, r1, r7
 80009e2:	fb07 1110 	mls	r1, r7, r0, r1
 80009e6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80009ea:	fb00 f606 	mul.w	r6, r0, r6
 80009ee:	429e      	cmp	r6, r3
 80009f0:	d90a      	bls.n	8000a08 <__udivmoddi4+0x94>
 80009f2:	eb1c 0303 	adds.w	r3, ip, r3
 80009f6:	f100 31ff 	add.w	r1, r0, #4294967295
 80009fa:	f080 80fc 	bcs.w	8000bf6 <__udivmoddi4+0x282>
 80009fe:	429e      	cmp	r6, r3
 8000a00:	f240 80f9 	bls.w	8000bf6 <__udivmoddi4+0x282>
 8000a04:	4463      	add	r3, ip
 8000a06:	3802      	subs	r0, #2
 8000a08:	1b9b      	subs	r3, r3, r6
 8000a0a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000a0e:	2100      	movs	r1, #0
 8000a10:	b11d      	cbz	r5, 8000a1a <__udivmoddi4+0xa6>
 8000a12:	40d3      	lsrs	r3, r2
 8000a14:	2200      	movs	r2, #0
 8000a16:	e9c5 3200 	strd	r3, r2, [r5]
 8000a1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a1e:	428b      	cmp	r3, r1
 8000a20:	d905      	bls.n	8000a2e <__udivmoddi4+0xba>
 8000a22:	b10d      	cbz	r5, 8000a28 <__udivmoddi4+0xb4>
 8000a24:	e9c5 0100 	strd	r0, r1, [r5]
 8000a28:	2100      	movs	r1, #0
 8000a2a:	4608      	mov	r0, r1
 8000a2c:	e7f5      	b.n	8000a1a <__udivmoddi4+0xa6>
 8000a2e:	fab3 f183 	clz	r1, r3
 8000a32:	2900      	cmp	r1, #0
 8000a34:	d146      	bne.n	8000ac4 <__udivmoddi4+0x150>
 8000a36:	42a3      	cmp	r3, r4
 8000a38:	d302      	bcc.n	8000a40 <__udivmoddi4+0xcc>
 8000a3a:	4290      	cmp	r0, r2
 8000a3c:	f0c0 80f0 	bcc.w	8000c20 <__udivmoddi4+0x2ac>
 8000a40:	1a86      	subs	r6, r0, r2
 8000a42:	eb64 0303 	sbc.w	r3, r4, r3
 8000a46:	2001      	movs	r0, #1
 8000a48:	2d00      	cmp	r5, #0
 8000a4a:	d0e6      	beq.n	8000a1a <__udivmoddi4+0xa6>
 8000a4c:	e9c5 6300 	strd	r6, r3, [r5]
 8000a50:	e7e3      	b.n	8000a1a <__udivmoddi4+0xa6>
 8000a52:	2a00      	cmp	r2, #0
 8000a54:	f040 8090 	bne.w	8000b78 <__udivmoddi4+0x204>
 8000a58:	eba1 040c 	sub.w	r4, r1, ip
 8000a5c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000a60:	fa1f f78c 	uxth.w	r7, ip
 8000a64:	2101      	movs	r1, #1
 8000a66:	fbb4 f6f8 	udiv	r6, r4, r8
 8000a6a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000a6e:	fb08 4416 	mls	r4, r8, r6, r4
 8000a72:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000a76:	fb07 f006 	mul.w	r0, r7, r6
 8000a7a:	4298      	cmp	r0, r3
 8000a7c:	d908      	bls.n	8000a90 <__udivmoddi4+0x11c>
 8000a7e:	eb1c 0303 	adds.w	r3, ip, r3
 8000a82:	f106 34ff 	add.w	r4, r6, #4294967295
 8000a86:	d202      	bcs.n	8000a8e <__udivmoddi4+0x11a>
 8000a88:	4298      	cmp	r0, r3
 8000a8a:	f200 80cd 	bhi.w	8000c28 <__udivmoddi4+0x2b4>
 8000a8e:	4626      	mov	r6, r4
 8000a90:	1a1c      	subs	r4, r3, r0
 8000a92:	fa1f f38e 	uxth.w	r3, lr
 8000a96:	fbb4 f0f8 	udiv	r0, r4, r8
 8000a9a:	fb08 4410 	mls	r4, r8, r0, r4
 8000a9e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000aa2:	fb00 f707 	mul.w	r7, r0, r7
 8000aa6:	429f      	cmp	r7, r3
 8000aa8:	d908      	bls.n	8000abc <__udivmoddi4+0x148>
 8000aaa:	eb1c 0303 	adds.w	r3, ip, r3
 8000aae:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ab2:	d202      	bcs.n	8000aba <__udivmoddi4+0x146>
 8000ab4:	429f      	cmp	r7, r3
 8000ab6:	f200 80b0 	bhi.w	8000c1a <__udivmoddi4+0x2a6>
 8000aba:	4620      	mov	r0, r4
 8000abc:	1bdb      	subs	r3, r3, r7
 8000abe:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ac2:	e7a5      	b.n	8000a10 <__udivmoddi4+0x9c>
 8000ac4:	f1c1 0620 	rsb	r6, r1, #32
 8000ac8:	408b      	lsls	r3, r1
 8000aca:	fa22 f706 	lsr.w	r7, r2, r6
 8000ace:	431f      	orrs	r7, r3
 8000ad0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ad4:	fa04 f301 	lsl.w	r3, r4, r1
 8000ad8:	ea43 030c 	orr.w	r3, r3, ip
 8000adc:	40f4      	lsrs	r4, r6
 8000ade:	fa00 f801 	lsl.w	r8, r0, r1
 8000ae2:	0c38      	lsrs	r0, r7, #16
 8000ae4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ae8:	fbb4 fef0 	udiv	lr, r4, r0
 8000aec:	fa1f fc87 	uxth.w	ip, r7
 8000af0:	fb00 441e 	mls	r4, r0, lr, r4
 8000af4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000af8:	fb0e f90c 	mul.w	r9, lr, ip
 8000afc:	45a1      	cmp	r9, r4
 8000afe:	fa02 f201 	lsl.w	r2, r2, r1
 8000b02:	d90a      	bls.n	8000b1a <__udivmoddi4+0x1a6>
 8000b04:	193c      	adds	r4, r7, r4
 8000b06:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000b0a:	f080 8084 	bcs.w	8000c16 <__udivmoddi4+0x2a2>
 8000b0e:	45a1      	cmp	r9, r4
 8000b10:	f240 8081 	bls.w	8000c16 <__udivmoddi4+0x2a2>
 8000b14:	f1ae 0e02 	sub.w	lr, lr, #2
 8000b18:	443c      	add	r4, r7
 8000b1a:	eba4 0409 	sub.w	r4, r4, r9
 8000b1e:	fa1f f983 	uxth.w	r9, r3
 8000b22:	fbb4 f3f0 	udiv	r3, r4, r0
 8000b26:	fb00 4413 	mls	r4, r0, r3, r4
 8000b2a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000b2e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000b32:	45a4      	cmp	ip, r4
 8000b34:	d907      	bls.n	8000b46 <__udivmoddi4+0x1d2>
 8000b36:	193c      	adds	r4, r7, r4
 8000b38:	f103 30ff 	add.w	r0, r3, #4294967295
 8000b3c:	d267      	bcs.n	8000c0e <__udivmoddi4+0x29a>
 8000b3e:	45a4      	cmp	ip, r4
 8000b40:	d965      	bls.n	8000c0e <__udivmoddi4+0x29a>
 8000b42:	3b02      	subs	r3, #2
 8000b44:	443c      	add	r4, r7
 8000b46:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000b4a:	fba0 9302 	umull	r9, r3, r0, r2
 8000b4e:	eba4 040c 	sub.w	r4, r4, ip
 8000b52:	429c      	cmp	r4, r3
 8000b54:	46ce      	mov	lr, r9
 8000b56:	469c      	mov	ip, r3
 8000b58:	d351      	bcc.n	8000bfe <__udivmoddi4+0x28a>
 8000b5a:	d04e      	beq.n	8000bfa <__udivmoddi4+0x286>
 8000b5c:	b155      	cbz	r5, 8000b74 <__udivmoddi4+0x200>
 8000b5e:	ebb8 030e 	subs.w	r3, r8, lr
 8000b62:	eb64 040c 	sbc.w	r4, r4, ip
 8000b66:	fa04 f606 	lsl.w	r6, r4, r6
 8000b6a:	40cb      	lsrs	r3, r1
 8000b6c:	431e      	orrs	r6, r3
 8000b6e:	40cc      	lsrs	r4, r1
 8000b70:	e9c5 6400 	strd	r6, r4, [r5]
 8000b74:	2100      	movs	r1, #0
 8000b76:	e750      	b.n	8000a1a <__udivmoddi4+0xa6>
 8000b78:	f1c2 0320 	rsb	r3, r2, #32
 8000b7c:	fa20 f103 	lsr.w	r1, r0, r3
 8000b80:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b84:	fa24 f303 	lsr.w	r3, r4, r3
 8000b88:	4094      	lsls	r4, r2
 8000b8a:	430c      	orrs	r4, r1
 8000b8c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b90:	fa00 fe02 	lsl.w	lr, r0, r2
 8000b94:	fa1f f78c 	uxth.w	r7, ip
 8000b98:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b9c:	fb08 3110 	mls	r1, r8, r0, r3
 8000ba0:	0c23      	lsrs	r3, r4, #16
 8000ba2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ba6:	fb00 f107 	mul.w	r1, r0, r7
 8000baa:	4299      	cmp	r1, r3
 8000bac:	d908      	bls.n	8000bc0 <__udivmoddi4+0x24c>
 8000bae:	eb1c 0303 	adds.w	r3, ip, r3
 8000bb2:	f100 36ff 	add.w	r6, r0, #4294967295
 8000bb6:	d22c      	bcs.n	8000c12 <__udivmoddi4+0x29e>
 8000bb8:	4299      	cmp	r1, r3
 8000bba:	d92a      	bls.n	8000c12 <__udivmoddi4+0x29e>
 8000bbc:	3802      	subs	r0, #2
 8000bbe:	4463      	add	r3, ip
 8000bc0:	1a5b      	subs	r3, r3, r1
 8000bc2:	b2a4      	uxth	r4, r4
 8000bc4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000bc8:	fb08 3311 	mls	r3, r8, r1, r3
 8000bcc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000bd0:	fb01 f307 	mul.w	r3, r1, r7
 8000bd4:	42a3      	cmp	r3, r4
 8000bd6:	d908      	bls.n	8000bea <__udivmoddi4+0x276>
 8000bd8:	eb1c 0404 	adds.w	r4, ip, r4
 8000bdc:	f101 36ff 	add.w	r6, r1, #4294967295
 8000be0:	d213      	bcs.n	8000c0a <__udivmoddi4+0x296>
 8000be2:	42a3      	cmp	r3, r4
 8000be4:	d911      	bls.n	8000c0a <__udivmoddi4+0x296>
 8000be6:	3902      	subs	r1, #2
 8000be8:	4464      	add	r4, ip
 8000bea:	1ae4      	subs	r4, r4, r3
 8000bec:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000bf0:	e739      	b.n	8000a66 <__udivmoddi4+0xf2>
 8000bf2:	4604      	mov	r4, r0
 8000bf4:	e6f0      	b.n	80009d8 <__udivmoddi4+0x64>
 8000bf6:	4608      	mov	r0, r1
 8000bf8:	e706      	b.n	8000a08 <__udivmoddi4+0x94>
 8000bfa:	45c8      	cmp	r8, r9
 8000bfc:	d2ae      	bcs.n	8000b5c <__udivmoddi4+0x1e8>
 8000bfe:	ebb9 0e02 	subs.w	lr, r9, r2
 8000c02:	eb63 0c07 	sbc.w	ip, r3, r7
 8000c06:	3801      	subs	r0, #1
 8000c08:	e7a8      	b.n	8000b5c <__udivmoddi4+0x1e8>
 8000c0a:	4631      	mov	r1, r6
 8000c0c:	e7ed      	b.n	8000bea <__udivmoddi4+0x276>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	e799      	b.n	8000b46 <__udivmoddi4+0x1d2>
 8000c12:	4630      	mov	r0, r6
 8000c14:	e7d4      	b.n	8000bc0 <__udivmoddi4+0x24c>
 8000c16:	46d6      	mov	lr, sl
 8000c18:	e77f      	b.n	8000b1a <__udivmoddi4+0x1a6>
 8000c1a:	4463      	add	r3, ip
 8000c1c:	3802      	subs	r0, #2
 8000c1e:	e74d      	b.n	8000abc <__udivmoddi4+0x148>
 8000c20:	4606      	mov	r6, r0
 8000c22:	4623      	mov	r3, r4
 8000c24:	4608      	mov	r0, r1
 8000c26:	e70f      	b.n	8000a48 <__udivmoddi4+0xd4>
 8000c28:	3e02      	subs	r6, #2
 8000c2a:	4463      	add	r3, ip
 8000c2c:	e730      	b.n	8000a90 <__udivmoddi4+0x11c>
 8000c2e:	bf00      	nop

08000c30 <__aeabi_idiv0>:
 8000c30:	4770      	bx	lr
 8000c32:	bf00      	nop

08000c34 <_ZN8rxData_tC1Ev>:
    uint8_t jointEnable;
    uint16_t outputs;
    uint8_t spare0;
  };

  rxData_t() {
 8000c34:	b480      	push	{r7}
 8000c36:	b085      	sub	sp, #20
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
      header = 0;
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	2200      	movs	r2, #0
 8000c40:	601a      	str	r2, [r3, #0]
      outputs = 0;
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	2200      	movs	r2, #0
 8000c46:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      jointEnable = 0;
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	2200      	movs	r2, #0
 8000c54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
      for (uint8_t i=0;i<Config::joints;i++) {
 8000c58:	2300      	movs	r3, #0
 8000c5a:	73fb      	strb	r3, [r7, #15]
 8000c5c:	e008      	b.n	8000c70 <_ZN8rxData_tC1Ev+0x3c>
         jointFreqCmd[i] = 0;
 8000c5e:	7bfb      	ldrb	r3, [r7, #15]
 8000c60:	687a      	ldr	r2, [r7, #4]
 8000c62:	009b      	lsls	r3, r3, #2
 8000c64:	4413      	add	r3, r2
 8000c66:	2200      	movs	r2, #0
 8000c68:	605a      	str	r2, [r3, #4]
      for (uint8_t i=0;i<Config::joints;i++) {
 8000c6a:	7bfb      	ldrb	r3, [r7, #15]
 8000c6c:	3301      	adds	r3, #1
 8000c6e:	73fb      	strb	r3, [r7, #15]
 8000c70:	7bfb      	ldrb	r3, [r7, #15]
 8000c72:	2b07      	cmp	r3, #7
 8000c74:	d9f3      	bls.n	8000c5e <_ZN8rxData_tC1Ev+0x2a>
      }
      for (uint8_t i=0;i<Config::variables;i++) {
 8000c76:	2300      	movs	r3, #0
 8000c78:	73bb      	strb	r3, [r7, #14]
 8000c7a:	e00b      	b.n	8000c94 <_ZN8rxData_tC1Ev+0x60>
         setPoint[i] = 0.0;
 8000c7c:	7bbb      	ldrb	r3, [r7, #14]
 8000c7e:	687a      	ldr	r2, [r7, #4]
 8000c80:	3308      	adds	r3, #8
 8000c82:	009b      	lsls	r3, r3, #2
 8000c84:	4413      	add	r3, r2
 8000c86:	3304      	adds	r3, #4
 8000c88:	f04f 0200 	mov.w	r2, #0
 8000c8c:	601a      	str	r2, [r3, #0]
      for (uint8_t i=0;i<Config::variables;i++) {
 8000c8e:	7bbb      	ldrb	r3, [r7, #14]
 8000c90:	3301      	adds	r3, #1
 8000c92:	73bb      	strb	r3, [r7, #14]
 8000c94:	7bbb      	ldrb	r3, [r7, #14]
 8000c96:	2b05      	cmp	r3, #5
 8000c98:	d9f0      	bls.n	8000c7c <_ZN8rxData_tC1Ev+0x48>
     }
  }
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	3714      	adds	r7, #20
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca6:	4770      	bx	lr

08000ca8 <_ZNSt14_Function_baseD1Ev>:
	  { return true; }
      };

    _Function_base() = default;

    ~_Function_base()
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b082      	sub	sp, #8
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
    {
      if (_M_manager)
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	689b      	ldr	r3, [r3, #8]
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d005      	beq.n	8000cc4 <_ZNSt14_Function_baseD1Ev+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	689b      	ldr	r3, [r3, #8]
 8000cbc:	6878      	ldr	r0, [r7, #4]
 8000cbe:	6879      	ldr	r1, [r7, #4]
 8000cc0:	2203      	movs	r2, #3
 8000cc2:	4798      	blx	r3
    }
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	3708      	adds	r7, #8
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}

08000cce <_ZNKSt14_Function_base8_M_emptyEv>:

    bool _M_empty() const { return !_M_manager; }
 8000cce:	b480      	push	{r7}
 8000cd0:	b083      	sub	sp, #12
 8000cd2:	af00      	add	r7, sp, #0
 8000cd4:	6078      	str	r0, [r7, #4]
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	689b      	ldr	r3, [r3, #8]
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	bf0c      	ite	eq
 8000cde:	2301      	moveq	r3, #1
 8000ce0:	2300      	movne	r3, #0
 8000ce2:	b2db      	uxtb	r3, r3
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	370c      	adds	r7, #12
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cee:	4770      	bx	lr

08000cf0 <_ZNK6Module17getUsesModulePostEv>:
		virtual void update();		// the standard interface for update of the module - use for stepgen, PWM etc
		virtual void updatePost();
		virtual void slowUpdate();	// the standard interface for the slow update - use for PID controller etc
        virtual void configure();   // the standard interface for one off configuration

        virtual bool getUsesModulePost() const { return usesModulePost; }
 8000cf0:	b480      	push	{r7}
 8000cf2:	b083      	sub	sp, #12
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	7d1b      	ldrb	r3, [r3, #20]
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	370c      	adds	r7, #12
 8000d00:	46bd      	mov	sp, r7
 8000d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d06:	4770      	bx	lr

08000d08 <_ZNK11ArduinoJson8V730HB226detail9RamStringixEj>:

  size_t size() const {
    return size_;
  }

  char operator[](size_t i) const {
 8000d08:	b480      	push	{r7}
 8000d0a:	b083      	sub	sp, #12
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
 8000d10:	6039      	str	r1, [r7, #0]
    ARDUINOJSON_ASSERT(str_ != 0);
    ARDUINOJSON_ASSERT(i <= size());
    return str_[i];
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	681a      	ldr	r2, [r3, #0]
 8000d16:	683b      	ldr	r3, [r7, #0]
 8000d18:	4413      	add	r3, r2
 8000d1a:	781b      	ldrb	r3, [r3, #0]
  }
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	370c      	adds	r7, #12
 8000d20:	46bd      	mov	sp, r7
 8000d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d26:	4770      	bx	lr

08000d28 <_ZN14DMA_RxBuffer_tC1Ev>:
} __attribute__((aligned(32))) txData_t;


typedef struct {
    volatile rxData_t buffer[2]; // DMA RX buffers
} DMA_RxBuffer_t;
 8000d28:	b5b0      	push	{r4, r5, r7, lr}
 8000d2a:	b082      	sub	sp, #8
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	2401      	movs	r4, #1
 8000d34:	461d      	mov	r5, r3
 8000d36:	e004      	b.n	8000d42 <_ZN14DMA_RxBuffer_tC1Ev+0x1a>
 8000d38:	4628      	mov	r0, r5
 8000d3a:	f7ff ff7b 	bl	8000c34 <_ZN8rxData_tC1Ev>
 8000d3e:	3c01      	subs	r4, #1
 8000d40:	3540      	adds	r5, #64	@ 0x40
 8000d42:	2c00      	cmp	r4, #0
 8000d44:	daf8      	bge.n	8000d38 <_ZN14DMA_RxBuffer_tC1Ev+0x10>
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	4618      	mov	r0, r3
 8000d4a:	3708      	adds	r7, #8
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	bdb0      	pop	{r4, r5, r7, pc}

08000d50 <_ZNSt8functionIFvbEED1Ev>:
   *  @brief Polymorphic function wrapper.
   *  @ingroup functors
   *  @since C++11
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b082      	sub	sp, #8
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	f7ff ffa4 	bl	8000ca8 <_ZNSt14_Function_baseD1Ev>
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	4618      	mov	r0, r3
 8000d64:	3708      	adds	r7, #8
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}
	...

08000d6c <_ZN14CommsInterfaceD1Ev>:

#include <functional>

#include "../../modules/module.h"

class CommsInterface : public Module {
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b082      	sub	sp, #8
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
 8000d74:	4a08      	ldr	r2, [pc, #32]	@ (8000d98 <_ZN14CommsInterfaceD1Ev+0x2c>)
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	601a      	str	r2, [r3, #0]
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	3318      	adds	r3, #24
 8000d7e:	4618      	mov	r0, r3
 8000d80:	f7ff ffe6 	bl	8000d50 <_ZNSt8functionIFvbEED1Ev>
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	4618      	mov	r0, r3
 8000d88:	f00d f95c 	bl	800e044 <_ZN6ModuleD1Ev>
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	4618      	mov	r0, r3
 8000d90:	3708      	adds	r7, #8
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	bf00      	nop
 8000d98:	08020444 	.word	0x08020444

08000d9c <_ZN14CommsInterfaceD0Ev>:
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b082      	sub	sp, #8
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
 8000da4:	6878      	ldr	r0, [r7, #4]
 8000da6:	f7ff ffe1 	bl	8000d6c <_ZN14CommsInterfaceD1Ev>
 8000daa:	2128      	movs	r1, #40	@ 0x28
 8000dac:	6878      	ldr	r0, [r7, #4]
 8000dae:	f01d f9e4 	bl	801e17a <_ZdlPvj>
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	4618      	mov	r0, r3
 8000db6:	3708      	adds	r7, #8
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bd80      	pop	{r7, pc}

08000dbc <_ZN8SPICommsC1EPV8rxData_tPV8txData_tP11SPI_TypeDef>:
#include "SPIComms.h"

__attribute__((section(".DmaSection"))) volatile DMA_RxBuffer_t rxDMABuffer;


SPIComms::SPIComms(volatile rxData_t* _ptrRxData, volatile txData_t* _ptrTxData, SPI_TypeDef* _spiType) :
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b084      	sub	sp, #16
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	60f8      	str	r0, [r7, #12]
 8000dc4:	60b9      	str	r1, [r7, #8]
 8000dc6:	607a      	str	r2, [r7, #4]
 8000dc8:	603b      	str	r3, [r7, #0]
	ptrRxData(_ptrRxData),
	ptrTxData(_ptrTxData),
	spiType(_spiType)
 8000dca:	68fb      	ldr	r3, [r7, #12]
 8000dcc:	4618      	mov	r0, r3
 8000dce:	f001 f9a5 	bl	800211c <_ZN14CommsInterfaceC1Ev>
 8000dd2:	4a10      	ldr	r2, [pc, #64]	@ (8000e14 <_ZN8SPICommsC1EPV8rxData_tPV8txData_tP11SPI_TypeDef+0x58>)
 8000dd4:	68fb      	ldr	r3, [r7, #12]
 8000dd6:	601a      	str	r2, [r3, #0]
	ptrRxData(_ptrRxData),
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	68ba      	ldr	r2, [r7, #8]
 8000ddc:	629a      	str	r2, [r3, #40]	@ 0x28
	ptrTxData(_ptrTxData),
 8000dde:	68fb      	ldr	r3, [r7, #12]
 8000de0:	687a      	ldr	r2, [r7, #4]
 8000de2:	62da      	str	r2, [r3, #44]	@ 0x2c
	spiType(_spiType)
 8000de4:	68fb      	ldr	r3, [r7, #12]
 8000de6:	683a      	ldr	r2, [r7, #0]
 8000de8:	635a      	str	r2, [r3, #52]	@ 0x34
{
    spiHandle.Instance = this->spiType;
 8000dea:	68fb      	ldr	r3, [r7, #12]
 8000dec:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000dee:	68fb      	ldr	r3, [r7, #12]
 8000df0:	651a      	str	r2, [r3, #80]	@ 0x50

    irqNss = EXTI4_IRQn;
 8000df2:	68fb      	ldr	r3, [r7, #12]
 8000df4:	220a      	movs	r2, #10
 8000df6:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    irqDMAtx = DMA1_Stream0_IRQn;
 8000dfa:	68fb      	ldr	r3, [r7, #12]
 8000dfc:	220b      	movs	r2, #11
 8000dfe:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
    irqDMArx = DMA1_Stream1_IRQn;
 8000e02:	68fb      	ldr	r3, [r7, #12]
 8000e04:	220c      	movs	r2, #12
 8000e06:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
}
 8000e0a:	68fb      	ldr	r3, [r7, #12]
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	3710      	adds	r7, #16
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bd80      	pop	{r7, pc}
 8000e14:	08020414 	.word	0x08020414

08000e18 <_ZN8SPICommsD1Ev>:

SPIComms::~SPIComms() {
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b082      	sub	sp, #8
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
 8000e20:	4a05      	ldr	r2, [pc, #20]	@ (8000e38 <_ZN8SPICommsD1Ev+0x20>)
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	601a      	str	r2, [r3, #0]

}
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	4618      	mov	r0, r3
 8000e2a:	f7ff ff9f 	bl	8000d6c <_ZN14CommsInterfaceD1Ev>
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	4618      	mov	r0, r3
 8000e32:	3708      	adds	r7, #8
 8000e34:	46bd      	mov	sp, r7
 8000e36:	bd80      	pop	{r7, pc}
 8000e38:	08020414 	.word	0x08020414

08000e3c <_ZN8SPICommsD0Ev>:
SPIComms::~SPIComms() {
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b082      	sub	sp, #8
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
}
 8000e44:	6878      	ldr	r0, [r7, #4]
 8000e46:	f7ff ffe7 	bl	8000e18 <_ZN8SPICommsD1Ev>
 8000e4a:	f44f 7111 	mov.w	r1, #580	@ 0x244
 8000e4e:	6878      	ldr	r0, [r7, #4]
 8000e50:	f01d f993 	bl	801e17a <_ZdlPvj>
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	4618      	mov	r0, r3
 8000e58:	3708      	adds	r7, #8
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd80      	pop	{r7, pc}
	...

08000e60 <_ZN8SPIComms4initEv>:

void SPIComms::init() {
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b08a      	sub	sp, #40	@ 0x28
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e68:	f107 0314 	add.w	r3, r7, #20
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	601a      	str	r2, [r3, #0]
 8000e70:	605a      	str	r2, [r3, #4]
 8000e72:	609a      	str	r2, [r3, #8]
 8000e74:	60da      	str	r2, [r3, #12]
 8000e76:	611a      	str	r2, [r3, #16]

    if(spiHandle.Instance == SPI1)
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000e7c:	4ab1      	ldr	r2, [pc, #708]	@ (8001144 <_ZN8SPIComms4initEv+0x2e4>)
 8000e7e:	4293      	cmp	r3, r2
 8000e80:	f040 815c 	bne.w	800113c <_ZN8SPIComms4initEv+0x2dc>
    {
    	// Interrupt pin is the NSS pin
        // Configure GPIO pin : PA_4

        __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e84:	4bb0      	ldr	r3, [pc, #704]	@ (8001148 <_ZN8SPIComms4initEv+0x2e8>)
 8000e86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e8a:	4aaf      	ldr	r2, [pc, #700]	@ (8001148 <_ZN8SPIComms4initEv+0x2e8>)
 8000e8c:	f043 0304 	orr.w	r3, r3, #4
 8000e90:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e94:	4bac      	ldr	r3, [pc, #688]	@ (8001148 <_ZN8SPIComms4initEv+0x2e8>)
 8000e96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e9a:	f003 0304 	and.w	r3, r3, #4
 8000e9e:	613b      	str	r3, [r7, #16]
 8000ea0:	693b      	ldr	r3, [r7, #16]

        GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000ea2:	2310      	movs	r3, #16
 8000ea4:	617b      	str	r3, [r7, #20]
        GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ea6:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000eaa:	61bb      	str	r3, [r7, #24]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eac:	2300      	movs	r3, #0
 8000eae:	61fb      	str	r3, [r7, #28]
        HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eb0:	f107 0314 	add.w	r3, r7, #20
 8000eb4:	4619      	mov	r1, r3
 8000eb6:	48a5      	ldr	r0, [pc, #660]	@ (800114c <_ZN8SPIComms4initEv+0x2ec>)
 8000eb8:	f013 f978 	bl	80141ac <HAL_GPIO_Init>

        printf("	Initialising SPI1 slave\n");
 8000ebc:	48a4      	ldr	r0, [pc, #656]	@ (8001150 <_ZN8SPIComms4initEv+0x2f0>)
 8000ebe:	f01d fd61 	bl	801e984 <puts>

        spiHandle.Init.Mode           			= SPI_MODE_SLAVE;
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	655a      	str	r2, [r3, #84]	@ 0x54
        spiHandle.Init.Direction      			= SPI_DIRECTION_2LINES;
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	2200      	movs	r2, #0
 8000ecc:	659a      	str	r2, [r3, #88]	@ 0x58
        spiHandle.Init.DataSize       			= SPI_DATASIZE_8BIT;
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	2207      	movs	r2, #7
 8000ed2:	65da      	str	r2, [r3, #92]	@ 0x5c
        spiHandle.Init.CLKPolarity    			= SPI_POLARITY_LOW;
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	661a      	str	r2, [r3, #96]	@ 0x60
        spiHandle.Init.CLKPhase       			= SPI_PHASE_1EDGE;
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	2200      	movs	r2, #0
 8000ede:	665a      	str	r2, [r3, #100]	@ 0x64
        spiHandle.Init.NSS            			= SPI_NSS_HARD_INPUT;
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	669a      	str	r2, [r3, #104]	@ 0x68
        spiHandle.Init.FirstBit       			= SPI_FIRSTBIT_MSB;
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	2200      	movs	r2, #0
 8000eea:	671a      	str	r2, [r3, #112]	@ 0x70
        spiHandle.Init.TIMode         			= SPI_TIMODE_DISABLE;
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	2200      	movs	r2, #0
 8000ef0:	675a      	str	r2, [r3, #116]	@ 0x74
        spiHandle.Init.CRCCalculation 			= SPI_CRCCALCULATION_DISABLE;
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	679a      	str	r2, [r3, #120]	@ 0x78
        spiHandle.Init.CRCPolynomial  			= 0x0;
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	2200      	movs	r2, #0
 8000efc:	67da      	str	r2, [r3, #124]	@ 0x7c
        spiHandle.Init.NSSPMode 				= SPI_NSS_PULSE_DISABLE;
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	2200      	movs	r2, #0
 8000f02:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        spiHandle.Init.NSSPolarity 				= SPI_NSS_POLARITY_LOW;
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	2200      	movs	r2, #0
 8000f0a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        spiHandle.Init.FifoThreshold 			= SPI_FIFO_THRESHOLD_01DATA;
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	2200      	movs	r2, #0
 8000f12:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        spiHandle.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	2200      	movs	r2, #0
 8000f1a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        spiHandle.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	2200      	movs	r2, #0
 8000f22:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        spiHandle.Init.MasterSSIdleness 		= SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	2200      	movs	r2, #0
 8000f2a:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        spiHandle.Init.MasterInterDataIdleness 	= SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	2200      	movs	r2, #0
 8000f32:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        spiHandle.Init.MasterReceiverAutoSusp 	= SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	2200      	movs	r2, #0
 8000f3a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        spiHandle.Init.MasterKeepIOState 		= SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	2200      	movs	r2, #0
 8000f42:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        spiHandle.Init.IOSwap 					= SPI_IO_SWAP_DISABLE;
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	2200      	movs	r2, #0
 8000f4a:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8

        HAL_SPI_Init(&this->spiHandle);
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	3350      	adds	r3, #80	@ 0x50
 8000f52:	4618      	mov	r0, r3
 8000f54:	f018 fc76 	bl	8019844 <HAL_SPI_Init>

    	// Peripheral clock enable
    	__HAL_RCC_SPI1_CLK_ENABLE();
 8000f58:	4b7b      	ldr	r3, [pc, #492]	@ (8001148 <_ZN8SPIComms4initEv+0x2e8>)
 8000f5a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000f5e:	4a7a      	ldr	r2, [pc, #488]	@ (8001148 <_ZN8SPIComms4initEv+0x2e8>)
 8000f60:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000f64:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8000f68:	4b77      	ldr	r3, [pc, #476]	@ (8001148 <_ZN8SPIComms4initEv+0x2e8>)
 8000f6a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000f6e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000f72:	60fb      	str	r3, [r7, #12]
 8000f74:	68fb      	ldr	r3, [r7, #12]

		printf("	Initialising GPIO for SPI\n");
 8000f76:	4877      	ldr	r0, [pc, #476]	@ (8001154 <_ZN8SPIComms4initEv+0x2f4>)
 8000f78:	f01d fd04 	bl	801e984 <puts>

	    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f7c:	4b72      	ldr	r3, [pc, #456]	@ (8001148 <_ZN8SPIComms4initEv+0x2e8>)
 8000f7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f82:	4a71      	ldr	r2, [pc, #452]	@ (8001148 <_ZN8SPIComms4initEv+0x2e8>)
 8000f84:	f043 0301 	orr.w	r3, r3, #1
 8000f88:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f8c:	4b6e      	ldr	r3, [pc, #440]	@ (8001148 <_ZN8SPIComms4initEv+0x2e8>)
 8000f8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f92:	f003 0301 	and.w	r3, r3, #1
 8000f96:	60bb      	str	r3, [r7, #8]
 8000f98:	68bb      	ldr	r3, [r7, #8]
	    PA4     ------> SPI1_NSS
	    PA5     ------> SPI1_SCK
	    PA6     ------> SPI1_MISO
	    PA7     ------> SPI1_MOSI
	    */
    	GPIO_InitStruct = {0};
 8000f9a:	f107 0314 	add.w	r3, r7, #20
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	601a      	str	r2, [r3, #0]
 8000fa2:	605a      	str	r2, [r3, #4]
 8000fa4:	609a      	str	r2, [r3, #8]
 8000fa6:	60da      	str	r2, [r3, #12]
 8000fa8:	611a      	str	r2, [r3, #16]
	    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000faa:	23f0      	movs	r3, #240	@ 0xf0
 8000fac:	617b      	str	r3, [r7, #20]
	    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fae:	2302      	movs	r3, #2
 8000fb0:	61bb      	str	r3, [r7, #24]
	    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	61fb      	str	r3, [r7, #28]
	    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	623b      	str	r3, [r7, #32]
	    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000fba:	2305      	movs	r3, #5
 8000fbc:	627b      	str	r3, [r7, #36]	@ 0x24
	    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fbe:	f107 0314 	add.w	r3, r7, #20
 8000fc2:	4619      	mov	r1, r3
 8000fc4:	4861      	ldr	r0, [pc, #388]	@ (800114c <_ZN8SPIComms4initEv+0x2ec>)
 8000fc6:	f013 f8f1 	bl	80141ac <HAL_GPIO_Init>

        printf("	Initialising DMA for SPI\n");
 8000fca:	4863      	ldr	r0, [pc, #396]	@ (8001158 <_ZN8SPIComms4initEv+0x2f8>)
 8000fcc:	f01d fcda 	bl	801e984 <puts>

        hdma_spi_tx.Instance 					= DMA1_Stream0;
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	4a62      	ldr	r2, [pc, #392]	@ (800115c <_ZN8SPIComms4initEv+0x2fc>)
 8000fd4:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8
        hdma_spi_tx.Init.Request 				= DMA_REQUEST_SPI1_TX;
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	2226      	movs	r2, #38	@ 0x26
 8000fdc:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
        hdma_spi_tx.Init.Direction 				= DMA_MEMORY_TO_PERIPH;
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	2240      	movs	r2, #64	@ 0x40
 8000fe4:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
        hdma_spi_tx.Init.PeriphInc 				= DMA_PINC_DISABLE;
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	2200      	movs	r2, #0
 8000fec:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
        hdma_spi_tx.Init.MemInc 				= DMA_MINC_ENABLE;
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000ff6:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8
        hdma_spi_tx.Init.PeriphDataAlignment 	= DMA_PDATAALIGN_BYTE;
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	f8c3 20ec 	str.w	r2, [r3, #236]	@ 0xec
        hdma_spi_tx.Init.MemDataAlignment 		= DMA_MDATAALIGN_BYTE;
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	2200      	movs	r2, #0
 8001006:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0
        hdma_spi_tx.Init.Mode 					= DMA_CIRCULAR;
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001010:	f8c3 20f4 	str.w	r2, [r3, #244]	@ 0xf4
        hdma_spi_tx.Init.Priority 				= DMA_PRIORITY_LOW;
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	2200      	movs	r2, #0
 8001018:	f8c3 20f8 	str.w	r2, [r3, #248]	@ 0xf8
        hdma_spi_tx.Init.FIFOMode 				= DMA_FIFOMODE_DISABLE;
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	2200      	movs	r2, #0
 8001020:	f8c3 20fc 	str.w	r2, [r3, #252]	@ 0xfc

        HAL_DMA_Init(&hdma_spi_tx);
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	33d8      	adds	r3, #216	@ 0xd8
 8001028:	4618      	mov	r0, r3
 800102a:	f010 fd7f 	bl	8011b2c <HAL_DMA_Init>
        __HAL_LINKDMA(&spiHandle, hdmatx, hdma_spi_tx);
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	f103 02d8 	add.w	r2, r3, #216	@ 0xd8
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	f103 0250 	add.w	r2, r3, #80	@ 0x50
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110

        hdma_spi_rx.Instance 					= DMA1_Stream1;
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	4a45      	ldr	r2, [pc, #276]	@ (8001160 <_ZN8SPIComms4initEv+0x300>)
 800104a:	f8c3 2150 	str.w	r2, [r3, #336]	@ 0x150
        hdma_spi_rx.Init.Request 				= DMA_REQUEST_SPI1_RX;
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	2225      	movs	r2, #37	@ 0x25
 8001052:	f8c3 2154 	str.w	r2, [r3, #340]	@ 0x154
        hdma_spi_rx.Init.Direction 				= DMA_PERIPH_TO_MEMORY;
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	2200      	movs	r2, #0
 800105a:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158
        hdma_spi_rx.Init.PeriphInc 				= DMA_PINC_DISABLE;
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	2200      	movs	r2, #0
 8001062:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
        hdma_spi_rx.Init.MemInc 				= DMA_MINC_ENABLE;
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800106c:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160
        hdma_spi_rx.Init.PeriphDataAlignment 	= DMA_PDATAALIGN_BYTE;
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	2200      	movs	r2, #0
 8001074:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164
        hdma_spi_rx.Init.MemDataAlignment 		= DMA_MDATAALIGN_BYTE;
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	2200      	movs	r2, #0
 800107c:	f8c3 2168 	str.w	r2, [r3, #360]	@ 0x168
        hdma_spi_rx.Init.Mode 					= DMA_CIRCULAR;
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001086:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
        hdma_spi_rx.Init.Priority 				= DMA_PRIORITY_LOW;
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	2200      	movs	r2, #0
 800108e:	f8c3 2170 	str.w	r2, [r3, #368]	@ 0x170
        hdma_spi_rx.Init.FIFOMode 				= DMA_FIFOMODE_DISABLE;
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	2200      	movs	r2, #0
 8001096:	f8c3 2174 	str.w	r2, [r3, #372]	@ 0x174

        HAL_DMA_Init(&hdma_spi_rx);
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80010a0:	4618      	mov	r0, r3
 80010a2:	f010 fd43 	bl	8011b2c <HAL_DMA_Init>
        __HAL_LINKDMA(&spiHandle, hdmarx, hdma_spi_rx);
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	f503 72a8 	add.w	r2, r3, #336	@ 0x150
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	f103 0250 	add.w	r2, r3, #80	@ 0x50
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	f8c3 2188 	str.w	r2, [r3, #392]	@ 0x188

        printf("	Initialising DMA for Memory to Memory transfer\n");
 80010be:	4829      	ldr	r0, [pc, #164]	@ (8001164 <_ZN8SPIComms4initEv+0x304>)
 80010c0:	f01d fc60 	bl	801e984 <puts>

        hdma_memtomem.Instance 					= DMA1_Stream2;
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	4a28      	ldr	r2, [pc, #160]	@ (8001168 <_ZN8SPIComms4initEv+0x308>)
 80010c8:	f8c3 21c8 	str.w	r2, [r3, #456]	@ 0x1c8
        hdma_memtomem.Init.Request 				= DMA_REQUEST_MEM2MEM;
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	2200      	movs	r2, #0
 80010d0:	f8c3 21cc 	str.w	r2, [r3, #460]	@ 0x1cc
        hdma_memtomem.Init.Direction 			= DMA_MEMORY_TO_MEMORY;
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	2280      	movs	r2, #128	@ 0x80
 80010d8:	f8c3 21d0 	str.w	r2, [r3, #464]	@ 0x1d0
        hdma_memtomem.Init.PeriphInc 			= DMA_PINC_ENABLE;
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80010e2:	f8c3 21d4 	str.w	r2, [r3, #468]	@ 0x1d4
        hdma_memtomem.Init.MemInc 				= DMA_MINC_ENABLE;
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80010ec:	f8c3 21d8 	str.w	r2, [r3, #472]	@ 0x1d8
        hdma_memtomem.Init.PeriphDataAlignment 	= DMA_PDATAALIGN_BYTE;
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	2200      	movs	r2, #0
 80010f4:	f8c3 21dc 	str.w	r2, [r3, #476]	@ 0x1dc
        hdma_memtomem.Init.MemDataAlignment 	= DMA_MDATAALIGN_BYTE;
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	2200      	movs	r2, #0
 80010fc:	f8c3 21e0 	str.w	r2, [r3, #480]	@ 0x1e0
        hdma_memtomem.Init.Mode 				= DMA_NORMAL;
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	2200      	movs	r2, #0
 8001104:	f8c3 21e4 	str.w	r2, [r3, #484]	@ 0x1e4
        hdma_memtomem.Init.Priority 			= DMA_PRIORITY_LOW;
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	2200      	movs	r2, #0
 800110c:	f8c3 21e8 	str.w	r2, [r3, #488]	@ 0x1e8
        hdma_memtomem.Init.FIFOMode 			= DMA_FIFOMODE_ENABLE;
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	2204      	movs	r2, #4
 8001114:	f8c3 21ec 	str.w	r2, [r3, #492]	@ 0x1ec
        hdma_memtomem.Init.FIFOThreshold 		= DMA_FIFO_THRESHOLD_FULL;
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	2203      	movs	r2, #3
 800111c:	f8c3 21f0 	str.w	r2, [r3, #496]	@ 0x1f0
        hdma_memtomem.Init.MemBurst 			= DMA_MBURST_SINGLE;
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	2200      	movs	r2, #0
 8001124:	f8c3 21f4 	str.w	r2, [r3, #500]	@ 0x1f4
        hdma_memtomem.Init.PeriphBurst 			= DMA_PBURST_SINGLE;
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	2200      	movs	r2, #0
 800112c:	f8c3 21f8 	str.w	r2, [r3, #504]	@ 0x1f8

        HAL_DMA_Init(&hdma_memtomem);
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	f503 73e4 	add.w	r3, r3, #456	@ 0x1c8
 8001136:	4618      	mov	r0, r3
 8001138:	f010 fcf8 	bl	8011b2c <HAL_DMA_Init>
    }
}
 800113c:	bf00      	nop
 800113e:	3728      	adds	r7, #40	@ 0x28
 8001140:	46bd      	mov	sp, r7
 8001142:	bd80      	pop	{r7, pc}
 8001144:	40013000 	.word	0x40013000
 8001148:	58024400 	.word	0x58024400
 800114c:	58020000 	.word	0x58020000
 8001150:	0801f658 	.word	0x0801f658
 8001154:	0801f674 	.word	0x0801f674
 8001158:	0801f690 	.word	0x0801f690
 800115c:	40020010 	.word	0x40020010
 8001160:	40020028 	.word	0x40020028
 8001164:	0801f6ac 	.word	0x0801f6ac
 8001168:	40020040 	.word	0x40020040

0800116c <_ZN8SPIComms5startEv>:

void SPIComms::start() {
 800116c:	b590      	push	{r4, r7, lr}
 800116e:	b08f      	sub	sp, #60	@ 0x3c
 8001170:	af02      	add	r7, sp, #8
 8001172:	6078      	str	r0, [r7, #4]
    // Register the NSS (slave select) interrupt
    NssInterrupt = new ModuleInterrupt<SPIComms>(
        irqNss,
        this,
        &SPIComms::handleNssInterrupt
    );
 8001174:	2010      	movs	r0, #16
 8001176:	f01d f811 	bl	801e19c <_Znwj>
 800117a:	4603      	mov	r3, r0
 800117c:	461c      	mov	r4, r3
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	f9b3 1048 	ldrsh.w	r1, [r3, #72]	@ 0x48
 8001184:	4b6d      	ldr	r3, [pc, #436]	@ (800133c <_ZN8SPIComms5startEv+0x1d0>)
 8001186:	60bb      	str	r3, [r7, #8]
 8001188:	2300      	movs	r3, #0
 800118a:	60fb      	str	r3, [r7, #12]
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	9300      	str	r3, [sp, #0]
 8001190:	68bb      	ldr	r3, [r7, #8]
 8001192:	687a      	ldr	r2, [r7, #4]
 8001194:	4620      	mov	r0, r4
 8001196:	f000 fec5 	bl	8001f24 <_ZN15ModuleInterruptI8SPICommsEC1E9IRQn_TypePS0_MS0_FvvE>
    NssInterrupt = new ModuleInterrupt<SPIComms>(
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	63dc      	str	r4, [r3, #60]	@ 0x3c
    HAL_NVIC_SetPriority(irqNss, Config::spiNssIrqPriority, 0);
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	f9b3 3048 	ldrsh.w	r3, [r3, #72]	@ 0x48
 80011a4:	2200      	movs	r2, #0
 80011a6:	2106      	movs	r1, #6
 80011a8:	4618      	mov	r0, r3
 80011aa:	f010 fc0e 	bl	80119ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(irqNss);
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	f9b3 3048 	ldrsh.w	r3, [r3, #72]	@ 0x48
 80011b4:	4618      	mov	r0, r3
 80011b6:	f010 fc22 	bl	80119fe <HAL_NVIC_EnableIRQ>
    // Register the DMA Rx interrupt
    dmaRxInterrupt = new ModuleInterrupt<SPIComms>(
        irqDMArx,
        this,
        &SPIComms::handleRxInterrupt
    );
 80011ba:	2010      	movs	r0, #16
 80011bc:	f01c ffee 	bl	801e19c <_Znwj>
 80011c0:	4603      	mov	r3, r0
 80011c2:	461c      	mov	r4, r3
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	f9b3 104a 	ldrsh.w	r1, [r3, #74]	@ 0x4a
 80011ca:	4b5d      	ldr	r3, [pc, #372]	@ (8001340 <_ZN8SPIComms5startEv+0x1d4>)
 80011cc:	613b      	str	r3, [r7, #16]
 80011ce:	2300      	movs	r3, #0
 80011d0:	617b      	str	r3, [r7, #20]
 80011d2:	697b      	ldr	r3, [r7, #20]
 80011d4:	9300      	str	r3, [sp, #0]
 80011d6:	693b      	ldr	r3, [r7, #16]
 80011d8:	687a      	ldr	r2, [r7, #4]
 80011da:	4620      	mov	r0, r4
 80011dc:	f000 fea2 	bl	8001f24 <_ZN15ModuleInterruptI8SPICommsEC1E9IRQn_TypePS0_MS0_FvvE>
    dmaRxInterrupt = new ModuleInterrupt<SPIComms>(
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	645c      	str	r4, [r3, #68]	@ 0x44
    HAL_NVIC_SetPriority(irqDMArx, Config::spiDmaRxIrqPriority, 0);
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	f9b3 304a 	ldrsh.w	r3, [r3, #74]	@ 0x4a
 80011ea:	2200      	movs	r2, #0
 80011ec:	2105      	movs	r1, #5
 80011ee:	4618      	mov	r0, r3
 80011f0:	f010 fbeb 	bl	80119ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(irqDMArx);
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	f9b3 304a 	ldrsh.w	r3, [r3, #74]	@ 0x4a
 80011fa:	4618      	mov	r0, r3
 80011fc:	f010 fbff 	bl	80119fe <HAL_NVIC_EnableIRQ>
    // Register the DMA Tx interrupt
    dmaTxInterrupt = new ModuleInterrupt<SPIComms>(
        irqDMAtx,
        this,
        &SPIComms::handleTxInterrupt
    );
 8001200:	2010      	movs	r0, #16
 8001202:	f01c ffcb 	bl	801e19c <_Znwj>
 8001206:	4603      	mov	r3, r0
 8001208:	461c      	mov	r4, r3
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	f9b3 104c 	ldrsh.w	r1, [r3, #76]	@ 0x4c
 8001210:	4b4c      	ldr	r3, [pc, #304]	@ (8001344 <_ZN8SPIComms5startEv+0x1d8>)
 8001212:	61bb      	str	r3, [r7, #24]
 8001214:	2300      	movs	r3, #0
 8001216:	61fb      	str	r3, [r7, #28]
 8001218:	69fb      	ldr	r3, [r7, #28]
 800121a:	9300      	str	r3, [sp, #0]
 800121c:	69bb      	ldr	r3, [r7, #24]
 800121e:	687a      	ldr	r2, [r7, #4]
 8001220:	4620      	mov	r0, r4
 8001222:	f000 fe7f 	bl	8001f24 <_ZN15ModuleInterruptI8SPICommsEC1E9IRQn_TypePS0_MS0_FvvE>
    dmaTxInterrupt = new ModuleInterrupt<SPIComms>(
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	641c      	str	r4, [r3, #64]	@ 0x40
    HAL_NVIC_SetPriority(irqDMAtx, Config::spiDmaTxIrqPriority, 0); // TX needs higher priority than RX
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	f9b3 304c 	ldrsh.w	r3, [r3, #76]	@ 0x4c
 8001230:	2200      	movs	r2, #0
 8001232:	2104      	movs	r1, #4
 8001234:	4618      	mov	r0, r3
 8001236:	f010 fbc8 	bl	80119ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(irqDMAtx);
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	f9b3 304c 	ldrsh.w	r3, [r3, #76]	@ 0x4c
 8001240:	4618      	mov	r0, r3
 8001242:	f010 fbdc 	bl	80119fe <HAL_NVIC_EnableIRQ>

    // Initialize the data buffers
    std::fill(std::begin(ptrTxData->txBuffer), std::end(ptrTxData->txBuffer), 0);
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800124a:	4618      	mov	r0, r3
 800124c:	f000 fe96 	bl	8001f7c <_ZSt5beginIVhLj64EEPT_RAT0__S1_>
 8001250:	4604      	mov	r4, r0
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001256:	4618      	mov	r0, r3
 8001258:	f000 fe9b 	bl	8001f92 <_ZSt3endIVhLj64EEPT_RAT0__S1_>
 800125c:	4601      	mov	r1, r0
 800125e:	2300      	movs	r3, #0
 8001260:	623b      	str	r3, [r7, #32]
 8001262:	f107 0320 	add.w	r3, r7, #32
 8001266:	461a      	mov	r2, r3
 8001268:	4620      	mov	r0, r4
 800126a:	f000 fe9e 	bl	8001faa <_ZSt4fillIPVhiEvT_S2_RKT0_>
    std::fill(std::begin(ptrRxData->rxBuffer), std::end(ptrRxData->rxBuffer), 0);
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001272:	4618      	mov	r0, r3
 8001274:	f000 fe82 	bl	8001f7c <_ZSt5beginIVhLj64EEPT_RAT0__S1_>
 8001278:	4604      	mov	r4, r0
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800127e:	4618      	mov	r0, r3
 8001280:	f000 fe87 	bl	8001f92 <_ZSt3endIVhLj64EEPT_RAT0__S1_>
 8001284:	4601      	mov	r1, r0
 8001286:	2300      	movs	r3, #0
 8001288:	627b      	str	r3, [r7, #36]	@ 0x24
 800128a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800128e:	461a      	mov	r2, r3
 8001290:	4620      	mov	r0, r4
 8001292:	f000 fe8a 	bl	8001faa <_ZSt4fillIPVhiEvT_S2_RKT0_>
    std::fill(std::begin(ptrRxDMABuffer->buffer[0].rxBuffer), std::end(ptrRxDMABuffer->buffer[0].rxBuffer), 0);
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800129a:	4618      	mov	r0, r3
 800129c:	f000 fe6e 	bl	8001f7c <_ZSt5beginIVhLj64EEPT_RAT0__S1_>
 80012a0:	4604      	mov	r4, r0
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012a6:	4618      	mov	r0, r3
 80012a8:	f000 fe73 	bl	8001f92 <_ZSt3endIVhLj64EEPT_RAT0__S1_>
 80012ac:	4601      	mov	r1, r0
 80012ae:	2300      	movs	r3, #0
 80012b0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80012b2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80012b6:	461a      	mov	r2, r3
 80012b8:	4620      	mov	r0, r4
 80012ba:	f000 fe76 	bl	8001faa <_ZSt4fillIPVhiEvT_S2_RKT0_>
    std::fill(std::begin(ptrRxDMABuffer->buffer[1].rxBuffer), std::end(ptrRxDMABuffer->buffer[1].rxBuffer), 0);
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012c2:	3340      	adds	r3, #64	@ 0x40
 80012c4:	4618      	mov	r0, r3
 80012c6:	f000 fe59 	bl	8001f7c <_ZSt5beginIVhLj64EEPT_RAT0__S1_>
 80012ca:	4604      	mov	r4, r0
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012d0:	3340      	adds	r3, #64	@ 0x40
 80012d2:	4618      	mov	r0, r3
 80012d4:	f000 fe5d 	bl	8001f92 <_ZSt3endIVhLj64EEPT_RAT0__S1_>
 80012d8:	4601      	mov	r1, r0
 80012da:	2300      	movs	r3, #0
 80012dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80012de:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80012e2:	461a      	mov	r2, r3
 80012e4:	4620      	mov	r0, r4
 80012e6:	f000 fe60 	bl	8001faa <_ZSt4fillIPVhiEvT_S2_RKT0_>

    ptrTxData->header = Config::pruData;
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80012ee:	4a16      	ldr	r2, [pc, #88]	@ (8001348 <_ZN8SPIComms5startEv+0x1dc>)
 80012f0:	601a      	str	r2, [r3, #0]

    // Start the multi-buffer DMA SPI communication
    dmaStatus = startMultiBufferDMASPI(
        (uint8_t*)ptrTxData->txBuffer,
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80012f6:	4619      	mov	r1, r3
        (uint8_t*)ptrTxData->txBuffer,
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80012fc:	4618      	mov	r0, r3
        (uint8_t*)ptrRxDMABuffer->buffer[0].rxBuffer,
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001302:	461c      	mov	r4, r3
        (uint8_t*)ptrRxDMABuffer->buffer[1].rxBuffer,
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001308:	3340      	adds	r3, #64	@ 0x40
    dmaStatus = startMultiBufferDMASPI(
 800130a:	2240      	movs	r2, #64	@ 0x40
 800130c:	9201      	str	r2, [sp, #4]
 800130e:	9300      	str	r3, [sp, #0]
 8001310:	4623      	mov	r3, r4
 8001312:	4602      	mov	r2, r0
 8001314:	6878      	ldr	r0, [r7, #4]
 8001316:	f000 f81b 	bl	8001350 <_ZN8SPIComms22startMultiBufferDMASPIEPhS0_S0_S0_t>
 800131a:	4603      	mov	r3, r0
 800131c:	461a      	mov	r2, r3
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	f883 2240 	strb.w	r2, [r3, #576]	@ 0x240
        Config::dataBuffSize
    );

    // Check for DMA initialization errors
    if (dmaStatus != HAL_OK) {
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	f893 3240 	ldrb.w	r3, [r3, #576]	@ 0x240
 800132a:	2b00      	cmp	r3, #0
 800132c:	d002      	beq.n	8001334 <_ZN8SPIComms5startEv+0x1c8>
        printf("DMA SPI error\n");
 800132e:	4807      	ldr	r0, [pc, #28]	@ (800134c <_ZN8SPIComms5startEv+0x1e0>)
 8001330:	f01d fb28 	bl	801e984 <puts>
    }
}
 8001334:	bf00      	nop
 8001336:	3734      	adds	r7, #52	@ 0x34
 8001338:	46bd      	mov	sp, r7
 800133a:	bd90      	pop	{r4, r7, pc}
 800133c:	08001d73 	.word	0x08001d73
 8001340:	08001dc9 	.word	0x08001dc9
 8001344:	08001da1 	.word	0x08001da1
 8001348:	64617461 	.word	0x64617461
 800134c:	0801f6dc 	.word	0x0801f6dc

08001350 <_ZN8SPIComms22startMultiBufferDMASPIEPhS0_S0_S0_t>:

HAL_StatusTypeDef SPIComms::startMultiBufferDMASPI(uint8_t *pTxBuffer0, uint8_t *pTxBuffer1,
                                                   uint8_t *pRxBuffer0, uint8_t *pRxBuffer1,
                                                   uint16_t Size)
{
 8001350:	b590      	push	{r4, r7, lr}
 8001352:	b087      	sub	sp, #28
 8001354:	af02      	add	r7, sp, #8
 8001356:	60f8      	str	r0, [r7, #12]
 8001358:	60b9      	str	r1, [r7, #8]
 800135a:	607a      	str	r2, [r7, #4]
 800135c:	603b      	str	r3, [r7, #0]
    /* Check Direction parameter */
    assert_param(IS_SPI_DIRECTION_2LINES(spiHandle.Init.Direction));

    if (spiHandle.State != HAL_SPI_STATE_READY)
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	f893 30d1 	ldrb.w	r3, [r3, #209]	@ 0xd1
 8001364:	b2db      	uxtb	r3, r3
 8001366:	2b01      	cmp	r3, #1
 8001368:	bf14      	ite	ne
 800136a:	2301      	movne	r3, #1
 800136c:	2300      	moveq	r3, #0
 800136e:	b2db      	uxtb	r3, r3
 8001370:	2b00      	cmp	r3, #0
 8001372:	d001      	beq.n	8001378 <_ZN8SPIComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x28>
    {
        return HAL_BUSY;
 8001374:	2302      	movs	r3, #2
 8001376:	e13e      	b.n	80015f6 <_ZN8SPIComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x2a6>
    }

    if ((pTxBuffer0 == NULL) || (pRxBuffer0 == NULL) || (Size == 0UL))
 8001378:	68bb      	ldr	r3, [r7, #8]
 800137a:	2b00      	cmp	r3, #0
 800137c:	d005      	beq.n	800138a <_ZN8SPIComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x3a>
 800137e:	683b      	ldr	r3, [r7, #0]
 8001380:	2b00      	cmp	r3, #0
 8001382:	d002      	beq.n	800138a <_ZN8SPIComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x3a>
 8001384:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001386:	2b00      	cmp	r3, #0
 8001388:	d101      	bne.n	800138e <_ZN8SPIComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x3e>
    {
        return HAL_ERROR;
 800138a:	2301      	movs	r3, #1
 800138c:	e133      	b.n	80015f6 <_ZN8SPIComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x2a6>
    }

    /* If secondary Tx or Rx buffer is not provided, use the primary buffer */
    if (pTxBuffer1 == NULL)
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	2b00      	cmp	r3, #0
 8001392:	d101      	bne.n	8001398 <_ZN8SPIComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x48>
    {
        pTxBuffer1 = pTxBuffer0;
 8001394:	68bb      	ldr	r3, [r7, #8]
 8001396:	607b      	str	r3, [r7, #4]
    }

    if (pRxBuffer1 == NULL)
 8001398:	6a3b      	ldr	r3, [r7, #32]
 800139a:	2b00      	cmp	r3, #0
 800139c:	d101      	bne.n	80013a2 <_ZN8SPIComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x52>
    {
        pRxBuffer1 = pRxBuffer0;
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	623b      	str	r3, [r7, #32]
    }

    /* Lock the process */
    __HAL_LOCK(&spiHandle);
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	f893 30d0 	ldrb.w	r3, [r3, #208]	@ 0xd0
 80013a8:	2b01      	cmp	r3, #1
 80013aa:	d101      	bne.n	80013b0 <_ZN8SPIComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x60>
 80013ac:	2302      	movs	r3, #2
 80013ae:	e122      	b.n	80015f6 <_ZN8SPIComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x2a6>
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	2201      	movs	r2, #1
 80013b4:	f883 20d0 	strb.w	r2, [r3, #208]	@ 0xd0

    /* Set the transaction information */
    spiHandle.State       = HAL_SPI_STATE_BUSY_TX_RX;
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	2205      	movs	r2, #5
 80013bc:	f883 20d1 	strb.w	r2, [r3, #209]	@ 0xd1
    spiHandle.ErrorCode   = HAL_SPI_ERROR_NONE;
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	2200      	movs	r2, #0
 80013c4:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
    spiHandle.TxXferSize  = Size;
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80013cc:	f8a3 20b0 	strh.w	r2, [r3, #176]	@ 0xb0
    spiHandle.TxXferCount = Size;
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80013d4:	f8a3 20b2 	strh.w	r2, [r3, #178]	@ 0xb2
    spiHandle.RxXferSize  = Size;
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80013dc:	f8a3 20b8 	strh.w	r2, [r3, #184]	@ 0xb8
    spiHandle.RxXferCount = Size;
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80013e4:	f8a3 20ba 	strh.w	r2, [r3, #186]	@ 0xba

    /* Init unused fields in handle to zero */
    spiHandle.RxISR       = NULL;
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	2200      	movs	r2, #0
 80013ec:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
    spiHandle.TxISR       = NULL;
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	2200      	movs	r2, #0
 80013f4:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4

    /* Set Full-Duplex mode */
    SPI_2LINES(&spiHandle);
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80013fc:	68da      	ldr	r2, [r3, #12]
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001402:	f422 22c0 	bic.w	r2, r2, #393216	@ 0x60000
 8001406:	60da      	str	r2, [r3, #12]

    /* Reset the Tx/Rx DMA bits */
    CLEAR_BIT(spiHandle.Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800140c:	689a      	ldr	r2, [r3, #8]
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001412:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8001416:	609a      	str	r2, [r3, #8]

    /* Adjust XferCount according to DMA alignment / Data size */
    if (spiHandle.Init.DataSize <= SPI_DATASIZE_8BIT)
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800141c:	2b07      	cmp	r3, #7
 800141e:	d820      	bhi.n	8001462 <_ZN8SPIComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x112>
    {
        if (hdma_spi_tx.Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001426:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800142a:	d109      	bne.n	8001440 <_ZN8SPIComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0xf0>
        {
            spiHandle.TxXferCount = (spiHandle.TxXferCount + 1UL) >> 1UL;
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	f8b3 30b2 	ldrh.w	r3, [r3, #178]	@ 0xb2
 8001432:	b29b      	uxth	r3, r3
 8001434:	3301      	adds	r3, #1
 8001436:	085b      	lsrs	r3, r3, #1
 8001438:	b29a      	uxth	r2, r3
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	f8a3 20b2 	strh.w	r2, [r3, #178]	@ 0xb2
        }
        if (hdma_spi_rx.Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	f8d3 3168 	ldr.w	r3, [r3, #360]	@ 0x168
 8001446:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800144a:	d12e      	bne.n	80014aa <_ZN8SPIComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x15a>
        {
            spiHandle.RxXferCount = (spiHandle.RxXferCount + 1UL) >> 1UL;
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	f8b3 30ba 	ldrh.w	r3, [r3, #186]	@ 0xba
 8001452:	b29b      	uxth	r3, r3
 8001454:	3301      	adds	r3, #1
 8001456:	085b      	lsrs	r3, r3, #1
 8001458:	b29a      	uxth	r2, r3
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	f8a3 20ba 	strh.w	r2, [r3, #186]	@ 0xba
 8001460:	e023      	b.n	80014aa <_ZN8SPIComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x15a>
        }
    }
    else if (spiHandle.Init.DataSize <= SPI_DATASIZE_16BIT)
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001466:	2b0f      	cmp	r3, #15
 8001468:	d81f      	bhi.n	80014aa <_ZN8SPIComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x15a>
    {
        if (hdma_spi_tx.Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001470:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001474:	d109      	bne.n	800148a <_ZN8SPIComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x13a>
        {
            spiHandle.TxXferCount = (spiHandle.TxXferCount + 1UL) >> 1UL;
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	f8b3 30b2 	ldrh.w	r3, [r3, #178]	@ 0xb2
 800147c:	b29b      	uxth	r3, r3
 800147e:	3301      	adds	r3, #1
 8001480:	085b      	lsrs	r3, r3, #1
 8001482:	b29a      	uxth	r2, r3
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	f8a3 20b2 	strh.w	r2, [r3, #178]	@ 0xb2
        }
        if (hdma_spi_rx.Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	f8d3 3168 	ldr.w	r3, [r3, #360]	@ 0x168
 8001490:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001494:	d109      	bne.n	80014aa <_ZN8SPIComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x15a>
        {
            spiHandle.RxXferCount = (spiHandle.RxXferCount + 1UL) >> 1UL;
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	f8b3 30ba 	ldrh.w	r3, [r3, #186]	@ 0xba
 800149c:	b29b      	uxth	r3, r3
 800149e:	3301      	adds	r3, #1
 80014a0:	085b      	lsrs	r3, r3, #1
 80014a2:	b29a      	uxth	r2, r3
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	f8a3 20ba 	strh.w	r2, [r3, #186]	@ 0xba
        }
    }

    /* Configure Tx DMA with Multi-Buffer */
    hdma_spi_tx.XferHalfCpltCallback = NULL;
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	2200      	movs	r2, #0
 80014ae:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118
    hdma_spi_tx.XferCpltCallback     = NULL;
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	2200      	movs	r2, #0
 80014b6:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
    hdma_spi_tx.XferErrorCallback    = NULL;
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	2200      	movs	r2, #0
 80014be:	f8c3 2124 	str.w	r2, [r3, #292]	@ 0x124

    if (HAL_OK != HAL_DMAEx_MultiBufferStart_IT(&hdma_spi_tx,
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	f103 00d8 	add.w	r0, r3, #216	@ 0xd8
 80014c8:	68b9      	ldr	r1, [r7, #8]
                                                (uint32_t)pTxBuffer0,
                                                (uint32_t)&spiHandle.Instance->TXDR,
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80014ce:	3320      	adds	r3, #32
    if (HAL_OK != HAL_DMAEx_MultiBufferStart_IT(&hdma_spi_tx,
 80014d0:	461c      	mov	r4, r3
 80014d2:	687a      	ldr	r2, [r7, #4]
                                                (uint32_t)pTxBuffer1,
                                                spiHandle.TxXferCount))
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	f8b3 30b2 	ldrh.w	r3, [r3, #178]	@ 0xb2
 80014da:	b29b      	uxth	r3, r3
    if (HAL_OK != HAL_DMAEx_MultiBufferStart_IT(&hdma_spi_tx,
 80014dc:	9300      	str	r3, [sp, #0]
 80014de:	4613      	mov	r3, r2
 80014e0:	4622      	mov	r2, r4
 80014e2:	f012 fa4f 	bl	8013984 <HAL_DMAEx_MultiBufferStart_IT>
 80014e6:	4603      	mov	r3, r0
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	bf14      	ite	ne
 80014ec:	2301      	movne	r3, #1
 80014ee:	2300      	moveq	r3, #0
 80014f0:	b2db      	uxtb	r3, r3
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d005      	beq.n	8001502 <_ZN8SPIComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x1b2>
    {
        __HAL_UNLOCK(&spiHandle);
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	2200      	movs	r2, #0
 80014fa:	f883 20d0 	strb.w	r2, [r3, #208]	@ 0xd0
        return HAL_ERROR;
 80014fe:	2301      	movs	r3, #1
 8001500:	e079      	b.n	80015f6 <_ZN8SPIComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x2a6>
    }

    /* Configure Rx DMA with Multi-Buffer */
    hdma_spi_rx.XferHalfCpltCallback = NULL;
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	2200      	movs	r2, #0
 8001506:	f8c3 2190 	str.w	r2, [r3, #400]	@ 0x190
    hdma_spi_rx.XferCpltCallback     = NULL;
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	2200      	movs	r2, #0
 800150e:	f8c3 218c 	str.w	r2, [r3, #396]	@ 0x18c
    hdma_spi_rx.XferErrorCallback    = NULL;
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	2200      	movs	r2, #0
 8001516:	f8c3 219c 	str.w	r2, [r3, #412]	@ 0x19c

    if (HAL_OK != HAL_DMAEx_MultiBufferStart_IT(&hdma_spi_rx,
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	f503 70a8 	add.w	r0, r3, #336	@ 0x150
                                                (uint32_t)&spiHandle.Instance->RXDR,
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001524:	3330      	adds	r3, #48	@ 0x30
    if (HAL_OK != HAL_DMAEx_MultiBufferStart_IT(&hdma_spi_rx,
 8001526:	461c      	mov	r4, r3
 8001528:	683a      	ldr	r2, [r7, #0]
 800152a:	6a39      	ldr	r1, [r7, #32]
                                                (uint32_t)pRxBuffer0,
                                                (uint32_t)pRxBuffer1,
                                                spiHandle.RxXferCount))
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	f8b3 30ba 	ldrh.w	r3, [r3, #186]	@ 0xba
 8001532:	b29b      	uxth	r3, r3
    if (HAL_OK != HAL_DMAEx_MultiBufferStart_IT(&hdma_spi_rx,
 8001534:	9300      	str	r3, [sp, #0]
 8001536:	460b      	mov	r3, r1
 8001538:	4621      	mov	r1, r4
 800153a:	f012 fa23 	bl	8013984 <HAL_DMAEx_MultiBufferStart_IT>
 800153e:	4603      	mov	r3, r0
 8001540:	2b00      	cmp	r3, #0
 8001542:	bf14      	ite	ne
 8001544:	2301      	movne	r3, #1
 8001546:	2300      	moveq	r3, #0
 8001548:	b2db      	uxtb	r3, r3
 800154a:	2b00      	cmp	r3, #0
 800154c:	d00a      	beq.n	8001564 <_ZN8SPIComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x214>
    {
        (void)HAL_DMA_Abort(&hdma_spi_tx);
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	33d8      	adds	r3, #216	@ 0xd8
 8001552:	4618      	mov	r0, r3
 8001554:	f010 ff66 	bl	8012424 <HAL_DMA_Abort>
        __HAL_UNLOCK(&spiHandle);
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	2200      	movs	r2, #0
 800155c:	f883 20d0 	strb.w	r2, [r3, #208]	@ 0xd0
        return HAL_ERROR;
 8001560:	2301      	movs	r3, #1
 8001562:	e048      	b.n	80015f6 <_ZN8SPIComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x2a6>
    }

    /* Configure SPI TSIZE for full transfer or circular mode */
    if (hdma_spi_rx.Init.Mode == DMA_CIRCULAR || hdma_spi_tx.Init.Mode == DMA_CIRCULAR)
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	f8d3 316c 	ldr.w	r3, [r3, #364]	@ 0x16c
 800156a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800156e:	d005      	beq.n	800157c <_ZN8SPIComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x22c>
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001576:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800157a:	d108      	bne.n	800158e <_ZN8SPIComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x23e>
    {
        MODIFY_REG(spiHandle.Instance->CR2, SPI_CR2_TSIZE, 0UL);
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001580:	6859      	ldr	r1, [r3, #4]
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001586:	4b1e      	ldr	r3, [pc, #120]	@ (8001600 <_ZN8SPIComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x2b0>)
 8001588:	400b      	ands	r3, r1
 800158a:	6053      	str	r3, [r2, #4]
 800158c:	e009      	b.n	80015a2 <_ZN8SPIComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x252>
    }
    else
    {
        MODIFY_REG(spiHandle.Instance->CR2, SPI_CR2_TSIZE, Size);
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001592:	685a      	ldr	r2, [r3, #4]
 8001594:	4b1a      	ldr	r3, [pc, #104]	@ (8001600 <_ZN8SPIComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x2b0>)
 8001596:	4013      	ands	r3, r2
 8001598:	8cb9      	ldrh	r1, [r7, #36]	@ 0x24
 800159a:	68fa      	ldr	r2, [r7, #12]
 800159c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800159e:	430b      	orrs	r3, r1
 80015a0:	6053      	str	r3, [r2, #4]
    }

    /* Enable Tx and Rx DMA Requests */
    SET_BIT(spiHandle.Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80015a6:	689a      	ldr	r2, [r3, #8]
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80015ac:	f442 4240 	orr.w	r2, r2, #49152	@ 0xc000
 80015b0:	609a      	str	r2, [r3, #8]

    /* Enable SPI error interrupt */
    __HAL_SPI_ENABLE_IT(&spiHandle, (SPI_IT_OVR | SPI_IT_UDR | SPI_IT_FRE | SPI_IT_MODF));
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80015b6:	691a      	ldr	r2, [r3, #16]
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80015bc:	f442 7258 	orr.w	r2, r2, #864	@ 0x360
 80015c0:	611a      	str	r2, [r3, #16]

    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(&spiHandle);
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80015c6:	681a      	ldr	r2, [r3, #0]
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80015cc:	f042 0201 	orr.w	r2, r2, #1
 80015d0:	601a      	str	r2, [r3, #0]

    if (spiHandle.Init.Mode == SPI_MODE_MASTER)
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80015d6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80015da:	d107      	bne.n	80015ec <_ZN8SPIComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x29c>
    {
        SET_BIT(spiHandle.Instance->CR1, SPI_CR1_CSTART);
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80015e0:	681a      	ldr	r2, [r3, #0]
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80015e6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80015ea:	601a      	str	r2, [r3, #0]
    }

    __HAL_UNLOCK(&spiHandle);
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	2200      	movs	r2, #0
 80015f0:	f883 20d0 	strb.w	r2, [r3, #208]	@ 0xd0

    return HAL_OK;
 80015f4:	2300      	movs	r3, #0
}
 80015f6:	4618      	mov	r0, r3
 80015f8:	3714      	adds	r7, #20
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd90      	pop	{r4, r7, pc}
 80015fe:	bf00      	nop
 8001600:	ffff0000 	.word	0xffff0000

08001604 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef>:

int SPIComms::DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001604:	b480      	push	{r7}
 8001606:	b087      	sub	sp, #28
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
 800160c:	6039      	str	r1, [r7, #0]
  uint32_t tmpisr_dma;
  int interrupt;

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800160e:	683b      	ldr	r3, [r7, #0]
 8001610:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001612:	613b      	str	r3, [r7, #16]

  tmpisr_dma  = regs_dma->ISR;
 8001614:	693b      	ldr	r3, [r7, #16]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	60fb      	str	r3, [r7, #12]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800161a:	683b      	ldr	r3, [r7, #0]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	4a5a      	ldr	r2, [pc, #360]	@ (8001788 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x184>)
 8001620:	4293      	cmp	r3, r2
 8001622:	d04a      	beq.n	80016ba <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0xb6>
 8001624:	683b      	ldr	r3, [r7, #0]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	4a58      	ldr	r2, [pc, #352]	@ (800178c <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x188>)
 800162a:	4293      	cmp	r3, r2
 800162c:	d045      	beq.n	80016ba <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0xb6>
 800162e:	683b      	ldr	r3, [r7, #0]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	4a57      	ldr	r2, [pc, #348]	@ (8001790 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x18c>)
 8001634:	4293      	cmp	r3, r2
 8001636:	d040      	beq.n	80016ba <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0xb6>
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	4a55      	ldr	r2, [pc, #340]	@ (8001794 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x190>)
 800163e:	4293      	cmp	r3, r2
 8001640:	d03b      	beq.n	80016ba <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0xb6>
 8001642:	683b      	ldr	r3, [r7, #0]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	4a54      	ldr	r2, [pc, #336]	@ (8001798 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x194>)
 8001648:	4293      	cmp	r3, r2
 800164a:	d036      	beq.n	80016ba <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0xb6>
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	4a52      	ldr	r2, [pc, #328]	@ (800179c <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x198>)
 8001652:	4293      	cmp	r3, r2
 8001654:	d031      	beq.n	80016ba <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0xb6>
 8001656:	683b      	ldr	r3, [r7, #0]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	4a51      	ldr	r2, [pc, #324]	@ (80017a0 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x19c>)
 800165c:	4293      	cmp	r3, r2
 800165e:	d02c      	beq.n	80016ba <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0xb6>
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	4a4f      	ldr	r2, [pc, #316]	@ (80017a4 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x1a0>)
 8001666:	4293      	cmp	r3, r2
 8001668:	d027      	beq.n	80016ba <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0xb6>
 800166a:	683b      	ldr	r3, [r7, #0]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	4a4e      	ldr	r2, [pc, #312]	@ (80017a8 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x1a4>)
 8001670:	4293      	cmp	r3, r2
 8001672:	d022      	beq.n	80016ba <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0xb6>
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	4a4c      	ldr	r2, [pc, #304]	@ (80017ac <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x1a8>)
 800167a:	4293      	cmp	r3, r2
 800167c:	d01d      	beq.n	80016ba <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0xb6>
 800167e:	683b      	ldr	r3, [r7, #0]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	4a4b      	ldr	r2, [pc, #300]	@ (80017b0 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x1ac>)
 8001684:	4293      	cmp	r3, r2
 8001686:	d018      	beq.n	80016ba <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0xb6>
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	4a49      	ldr	r2, [pc, #292]	@ (80017b4 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x1b0>)
 800168e:	4293      	cmp	r3, r2
 8001690:	d013      	beq.n	80016ba <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0xb6>
 8001692:	683b      	ldr	r3, [r7, #0]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	4a48      	ldr	r2, [pc, #288]	@ (80017b8 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x1b4>)
 8001698:	4293      	cmp	r3, r2
 800169a:	d00e      	beq.n	80016ba <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0xb6>
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	4a46      	ldr	r2, [pc, #280]	@ (80017bc <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x1b8>)
 80016a2:	4293      	cmp	r3, r2
 80016a4:	d009      	beq.n	80016ba <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0xb6>
 80016a6:	683b      	ldr	r3, [r7, #0]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	4a45      	ldr	r2, [pc, #276]	@ (80017c0 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x1bc>)
 80016ac:	4293      	cmp	r3, r2
 80016ae:	d004      	beq.n	80016ba <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0xb6>
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	4a43      	ldr	r2, [pc, #268]	@ (80017c4 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x1c0>)
 80016b6:	4293      	cmp	r3, r2
 80016b8:	d101      	bne.n	80016be <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0xba>
 80016ba:	2301      	movs	r3, #1
 80016bc:	e000      	b.n	80016c0 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0xbc>
 80016be:	2300      	movs	r3, #0
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	f000 8338 	beq.w	8001d36 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x732>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80016c6:	683b      	ldr	r3, [r7, #0]
 80016c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80016ca:	f003 031f 	and.w	r3, r3, #31
 80016ce:	2208      	movs	r2, #8
 80016d0:	409a      	lsls	r2, r3
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	4013      	ands	r3, r2
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	f000 809a 	beq.w	8001810 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x20c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	4a29      	ldr	r2, [pc, #164]	@ (8001788 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x184>)
 80016e2:	4293      	cmp	r3, r2
 80016e4:	d04a      	beq.n	800177c <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x178>
 80016e6:	683b      	ldr	r3, [r7, #0]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	4a28      	ldr	r2, [pc, #160]	@ (800178c <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x188>)
 80016ec:	4293      	cmp	r3, r2
 80016ee:	d045      	beq.n	800177c <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x178>
 80016f0:	683b      	ldr	r3, [r7, #0]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	4a26      	ldr	r2, [pc, #152]	@ (8001790 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x18c>)
 80016f6:	4293      	cmp	r3, r2
 80016f8:	d040      	beq.n	800177c <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x178>
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	4a25      	ldr	r2, [pc, #148]	@ (8001794 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x190>)
 8001700:	4293      	cmp	r3, r2
 8001702:	d03b      	beq.n	800177c <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x178>
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	4a23      	ldr	r2, [pc, #140]	@ (8001798 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x194>)
 800170a:	4293      	cmp	r3, r2
 800170c:	d036      	beq.n	800177c <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x178>
 800170e:	683b      	ldr	r3, [r7, #0]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	4a22      	ldr	r2, [pc, #136]	@ (800179c <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x198>)
 8001714:	4293      	cmp	r3, r2
 8001716:	d031      	beq.n	800177c <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x178>
 8001718:	683b      	ldr	r3, [r7, #0]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	4a20      	ldr	r2, [pc, #128]	@ (80017a0 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x19c>)
 800171e:	4293      	cmp	r3, r2
 8001720:	d02c      	beq.n	800177c <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x178>
 8001722:	683b      	ldr	r3, [r7, #0]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	4a1f      	ldr	r2, [pc, #124]	@ (80017a4 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x1a0>)
 8001728:	4293      	cmp	r3, r2
 800172a:	d027      	beq.n	800177c <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x178>
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	4a1d      	ldr	r2, [pc, #116]	@ (80017a8 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x1a4>)
 8001732:	4293      	cmp	r3, r2
 8001734:	d022      	beq.n	800177c <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x178>
 8001736:	683b      	ldr	r3, [r7, #0]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	4a1c      	ldr	r2, [pc, #112]	@ (80017ac <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x1a8>)
 800173c:	4293      	cmp	r3, r2
 800173e:	d01d      	beq.n	800177c <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x178>
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	4a1a      	ldr	r2, [pc, #104]	@ (80017b0 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x1ac>)
 8001746:	4293      	cmp	r3, r2
 8001748:	d018      	beq.n	800177c <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x178>
 800174a:	683b      	ldr	r3, [r7, #0]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	4a19      	ldr	r2, [pc, #100]	@ (80017b4 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x1b0>)
 8001750:	4293      	cmp	r3, r2
 8001752:	d013      	beq.n	800177c <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x178>
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	4a17      	ldr	r2, [pc, #92]	@ (80017b8 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x1b4>)
 800175a:	4293      	cmp	r3, r2
 800175c:	d00e      	beq.n	800177c <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x178>
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	4a16      	ldr	r2, [pc, #88]	@ (80017bc <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x1b8>)
 8001764:	4293      	cmp	r3, r2
 8001766:	d009      	beq.n	800177c <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x178>
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	4a14      	ldr	r2, [pc, #80]	@ (80017c0 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x1bc>)
 800176e:	4293      	cmp	r3, r2
 8001770:	d004      	beq.n	800177c <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x178>
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	4a13      	ldr	r2, [pc, #76]	@ (80017c4 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x1c0>)
 8001778:	4293      	cmp	r3, r2
 800177a:	d125      	bne.n	80017c8 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x1c4>
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f003 0304 	and.w	r3, r3, #4
 8001786:	e024      	b.n	80017d2 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x1ce>
 8001788:	40020010 	.word	0x40020010
 800178c:	40020028 	.word	0x40020028
 8001790:	40020040 	.word	0x40020040
 8001794:	40020058 	.word	0x40020058
 8001798:	40020070 	.word	0x40020070
 800179c:	40020088 	.word	0x40020088
 80017a0:	400200a0 	.word	0x400200a0
 80017a4:	400200b8 	.word	0x400200b8
 80017a8:	40020410 	.word	0x40020410
 80017ac:	40020428 	.word	0x40020428
 80017b0:	40020440 	.word	0x40020440
 80017b4:	40020458 	.word	0x40020458
 80017b8:	40020470 	.word	0x40020470
 80017bc:	40020488 	.word	0x40020488
 80017c0:	400204a0 	.word	0x400204a0
 80017c4:	400204b8 	.word	0x400204b8
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f003 0308 	and.w	r3, r3, #8
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	bf14      	ite	ne
 80017d6:	2301      	movne	r3, #1
 80017d8:	2300      	moveq	r3, #0
 80017da:	b2db      	uxtb	r3, r3
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d017      	beq.n	8001810 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x20c>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	681a      	ldr	r2, [r3, #0]
 80017e6:	683b      	ldr	r3, [r7, #0]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f022 0204 	bic.w	r2, r2, #4
 80017ee:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80017f4:	f003 031f 	and.w	r3, r3, #31
 80017f8:	2208      	movs	r2, #8
 80017fa:	409a      	lsls	r2, r3
 80017fc:	693b      	ldr	r3, [r7, #16]
 80017fe:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001804:	f043 0201 	orr.w	r2, r3, #1
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	655a      	str	r2, [r3, #84]	@ 0x54
        interrupt =  DMA_OTHER;
 800180c:	2303      	movs	r3, #3
 800180e:	617b      	str	r3, [r7, #20]
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001814:	f003 031f 	and.w	r3, r3, #31
 8001818:	68fa      	ldr	r2, [r7, #12]
 800181a:	fa22 f303 	lsr.w	r3, r2, r3
 800181e:	f003 0301 	and.w	r3, r3, #1
 8001822:	2b00      	cmp	r3, #0
 8001824:	d070      	beq.n	8001908 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x304>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	4a68      	ldr	r2, [pc, #416]	@ (80019cc <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3c8>)
 800182c:	4293      	cmp	r3, r2
 800182e:	d04a      	beq.n	80018c6 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x2c2>
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	4a66      	ldr	r2, [pc, #408]	@ (80019d0 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3cc>)
 8001836:	4293      	cmp	r3, r2
 8001838:	d045      	beq.n	80018c6 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x2c2>
 800183a:	683b      	ldr	r3, [r7, #0]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	4a65      	ldr	r2, [pc, #404]	@ (80019d4 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3d0>)
 8001840:	4293      	cmp	r3, r2
 8001842:	d040      	beq.n	80018c6 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x2c2>
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	4a63      	ldr	r2, [pc, #396]	@ (80019d8 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3d4>)
 800184a:	4293      	cmp	r3, r2
 800184c:	d03b      	beq.n	80018c6 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x2c2>
 800184e:	683b      	ldr	r3, [r7, #0]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	4a62      	ldr	r2, [pc, #392]	@ (80019dc <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3d8>)
 8001854:	4293      	cmp	r3, r2
 8001856:	d036      	beq.n	80018c6 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x2c2>
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	4a60      	ldr	r2, [pc, #384]	@ (80019e0 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3dc>)
 800185e:	4293      	cmp	r3, r2
 8001860:	d031      	beq.n	80018c6 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x2c2>
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	4a5f      	ldr	r2, [pc, #380]	@ (80019e4 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3e0>)
 8001868:	4293      	cmp	r3, r2
 800186a:	d02c      	beq.n	80018c6 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x2c2>
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	4a5d      	ldr	r2, [pc, #372]	@ (80019e8 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3e4>)
 8001872:	4293      	cmp	r3, r2
 8001874:	d027      	beq.n	80018c6 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x2c2>
 8001876:	683b      	ldr	r3, [r7, #0]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	4a5c      	ldr	r2, [pc, #368]	@ (80019ec <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3e8>)
 800187c:	4293      	cmp	r3, r2
 800187e:	d022      	beq.n	80018c6 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x2c2>
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	4a5a      	ldr	r2, [pc, #360]	@ (80019f0 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3ec>)
 8001886:	4293      	cmp	r3, r2
 8001888:	d01d      	beq.n	80018c6 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x2c2>
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	4a59      	ldr	r2, [pc, #356]	@ (80019f4 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3f0>)
 8001890:	4293      	cmp	r3, r2
 8001892:	d018      	beq.n	80018c6 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x2c2>
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	4a57      	ldr	r2, [pc, #348]	@ (80019f8 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3f4>)
 800189a:	4293      	cmp	r3, r2
 800189c:	d013      	beq.n	80018c6 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x2c2>
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	4a56      	ldr	r2, [pc, #344]	@ (80019fc <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3f8>)
 80018a4:	4293      	cmp	r3, r2
 80018a6:	d00e      	beq.n	80018c6 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x2c2>
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	4a54      	ldr	r2, [pc, #336]	@ (8001a00 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3fc>)
 80018ae:	4293      	cmp	r3, r2
 80018b0:	d009      	beq.n	80018c6 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x2c2>
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	4a53      	ldr	r2, [pc, #332]	@ (8001a04 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x400>)
 80018b8:	4293      	cmp	r3, r2
 80018ba:	d004      	beq.n	80018c6 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x2c2>
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	4a51      	ldr	r2, [pc, #324]	@ (8001a08 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x404>)
 80018c2:	4293      	cmp	r3, r2
 80018c4:	d105      	bne.n	80018d2 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x2ce>
 80018c6:	683b      	ldr	r3, [r7, #0]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	695b      	ldr	r3, [r3, #20]
 80018cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80018d0:	e003      	b.n	80018da <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x2d6>
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	2300      	movs	r3, #0
 80018da:	2b00      	cmp	r3, #0
 80018dc:	bf14      	ite	ne
 80018de:	2301      	movne	r3, #1
 80018e0:	2300      	moveq	r3, #0
 80018e2:	b2db      	uxtb	r3, r3
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d00f      	beq.n	8001908 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x304>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80018ec:	f003 031f 	and.w	r3, r3, #31
 80018f0:	2201      	movs	r2, #1
 80018f2:	409a      	lsls	r2, r3
 80018f4:	693b      	ldr	r3, [r7, #16]
 80018f6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80018fc:	f043 0202 	orr.w	r2, r3, #2
 8001900:	683b      	ldr	r3, [r7, #0]
 8001902:	655a      	str	r2, [r3, #84]	@ 0x54
        interrupt =  DMA_OTHER;
 8001904:	2303      	movs	r3, #3
 8001906:	617b      	str	r3, [r7, #20]
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800190c:	f003 031f 	and.w	r3, r3, #31
 8001910:	2204      	movs	r2, #4
 8001912:	409a      	lsls	r2, r3
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	4013      	ands	r3, r2
 8001918:	2b00      	cmp	r3, #0
 800191a:	f000 8092 	beq.w	8001a42 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x43e>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	4a2a      	ldr	r2, [pc, #168]	@ (80019cc <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3c8>)
 8001924:	4293      	cmp	r3, r2
 8001926:	d04a      	beq.n	80019be <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3ba>
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	4a28      	ldr	r2, [pc, #160]	@ (80019d0 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3cc>)
 800192e:	4293      	cmp	r3, r2
 8001930:	d045      	beq.n	80019be <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3ba>
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	4a27      	ldr	r2, [pc, #156]	@ (80019d4 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3d0>)
 8001938:	4293      	cmp	r3, r2
 800193a:	d040      	beq.n	80019be <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3ba>
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	4a25      	ldr	r2, [pc, #148]	@ (80019d8 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3d4>)
 8001942:	4293      	cmp	r3, r2
 8001944:	d03b      	beq.n	80019be <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3ba>
 8001946:	683b      	ldr	r3, [r7, #0]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	4a24      	ldr	r2, [pc, #144]	@ (80019dc <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3d8>)
 800194c:	4293      	cmp	r3, r2
 800194e:	d036      	beq.n	80019be <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3ba>
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	4a22      	ldr	r2, [pc, #136]	@ (80019e0 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3dc>)
 8001956:	4293      	cmp	r3, r2
 8001958:	d031      	beq.n	80019be <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3ba>
 800195a:	683b      	ldr	r3, [r7, #0]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	4a21      	ldr	r2, [pc, #132]	@ (80019e4 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3e0>)
 8001960:	4293      	cmp	r3, r2
 8001962:	d02c      	beq.n	80019be <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3ba>
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	4a1f      	ldr	r2, [pc, #124]	@ (80019e8 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3e4>)
 800196a:	4293      	cmp	r3, r2
 800196c:	d027      	beq.n	80019be <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3ba>
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	4a1e      	ldr	r2, [pc, #120]	@ (80019ec <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3e8>)
 8001974:	4293      	cmp	r3, r2
 8001976:	d022      	beq.n	80019be <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3ba>
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	4a1c      	ldr	r2, [pc, #112]	@ (80019f0 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3ec>)
 800197e:	4293      	cmp	r3, r2
 8001980:	d01d      	beq.n	80019be <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3ba>
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	4a1b      	ldr	r2, [pc, #108]	@ (80019f4 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3f0>)
 8001988:	4293      	cmp	r3, r2
 800198a:	d018      	beq.n	80019be <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3ba>
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	4a19      	ldr	r2, [pc, #100]	@ (80019f8 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3f4>)
 8001992:	4293      	cmp	r3, r2
 8001994:	d013      	beq.n	80019be <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3ba>
 8001996:	683b      	ldr	r3, [r7, #0]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	4a18      	ldr	r2, [pc, #96]	@ (80019fc <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3f8>)
 800199c:	4293      	cmp	r3, r2
 800199e:	d00e      	beq.n	80019be <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3ba>
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	4a16      	ldr	r2, [pc, #88]	@ (8001a00 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3fc>)
 80019a6:	4293      	cmp	r3, r2
 80019a8:	d009      	beq.n	80019be <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3ba>
 80019aa:	683b      	ldr	r3, [r7, #0]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	4a15      	ldr	r2, [pc, #84]	@ (8001a04 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x400>)
 80019b0:	4293      	cmp	r3, r2
 80019b2:	d004      	beq.n	80019be <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3ba>
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	4a13      	ldr	r2, [pc, #76]	@ (8001a08 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x404>)
 80019ba:	4293      	cmp	r3, r2
 80019bc:	d126      	bne.n	8001a0c <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x408>
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f003 0302 	and.w	r3, r3, #2
 80019c8:	e024      	b.n	8001a14 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x410>
 80019ca:	bf00      	nop
 80019cc:	40020010 	.word	0x40020010
 80019d0:	40020028 	.word	0x40020028
 80019d4:	40020040 	.word	0x40020040
 80019d8:	40020058 	.word	0x40020058
 80019dc:	40020070 	.word	0x40020070
 80019e0:	40020088 	.word	0x40020088
 80019e4:	400200a0 	.word	0x400200a0
 80019e8:	400200b8 	.word	0x400200b8
 80019ec:	40020410 	.word	0x40020410
 80019f0:	40020428 	.word	0x40020428
 80019f4:	40020440 	.word	0x40020440
 80019f8:	40020458 	.word	0x40020458
 80019fc:	40020470 	.word	0x40020470
 8001a00:	40020488 	.word	0x40020488
 8001a04:	400204a0 	.word	0x400204a0
 8001a08:	400204b8 	.word	0x400204b8
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	2300      	movs	r3, #0
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	bf14      	ite	ne
 8001a18:	2301      	movne	r3, #1
 8001a1a:	2300      	moveq	r3, #0
 8001a1c:	b2db      	uxtb	r3, r3
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d00f      	beq.n	8001a42 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x43e>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8001a22:	683b      	ldr	r3, [r7, #0]
 8001a24:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a26:	f003 031f 	and.w	r3, r3, #31
 8001a2a:	2204      	movs	r2, #4
 8001a2c:	409a      	lsls	r2, r3
 8001a2e:	693b      	ldr	r3, [r7, #16]
 8001a30:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a36:	f043 0204 	orr.w	r2, r3, #4
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	655a      	str	r2, [r3, #84]	@ 0x54
        interrupt =  DMA_OTHER;
 8001a3e:	2303      	movs	r3, #3
 8001a40:	617b      	str	r3, [r7, #20]
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a46:	f003 031f 	and.w	r3, r3, #31
 8001a4a:	2210      	movs	r2, #16
 8001a4c:	409a      	lsls	r2, r3
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	4013      	ands	r3, r2
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d07f      	beq.n	8001b56 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x552>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8001a56:	683b      	ldr	r3, [r7, #0]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	4a6f      	ldr	r2, [pc, #444]	@ (8001c18 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x614>)
 8001a5c:	4293      	cmp	r3, r2
 8001a5e:	d04a      	beq.n	8001af6 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x4f2>
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	4a6d      	ldr	r2, [pc, #436]	@ (8001c1c <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x618>)
 8001a66:	4293      	cmp	r3, r2
 8001a68:	d045      	beq.n	8001af6 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x4f2>
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	4a6c      	ldr	r2, [pc, #432]	@ (8001c20 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x61c>)
 8001a70:	4293      	cmp	r3, r2
 8001a72:	d040      	beq.n	8001af6 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x4f2>
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	4a6a      	ldr	r2, [pc, #424]	@ (8001c24 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x620>)
 8001a7a:	4293      	cmp	r3, r2
 8001a7c:	d03b      	beq.n	8001af6 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x4f2>
 8001a7e:	683b      	ldr	r3, [r7, #0]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	4a69      	ldr	r2, [pc, #420]	@ (8001c28 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x624>)
 8001a84:	4293      	cmp	r3, r2
 8001a86:	d036      	beq.n	8001af6 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x4f2>
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4a67      	ldr	r2, [pc, #412]	@ (8001c2c <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x628>)
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d031      	beq.n	8001af6 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x4f2>
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	4a66      	ldr	r2, [pc, #408]	@ (8001c30 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x62c>)
 8001a98:	4293      	cmp	r3, r2
 8001a9a:	d02c      	beq.n	8001af6 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x4f2>
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	4a64      	ldr	r2, [pc, #400]	@ (8001c34 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x630>)
 8001aa2:	4293      	cmp	r3, r2
 8001aa4:	d027      	beq.n	8001af6 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x4f2>
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	4a63      	ldr	r2, [pc, #396]	@ (8001c38 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x634>)
 8001aac:	4293      	cmp	r3, r2
 8001aae:	d022      	beq.n	8001af6 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x4f2>
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	4a61      	ldr	r2, [pc, #388]	@ (8001c3c <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x638>)
 8001ab6:	4293      	cmp	r3, r2
 8001ab8:	d01d      	beq.n	8001af6 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x4f2>
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	4a60      	ldr	r2, [pc, #384]	@ (8001c40 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x63c>)
 8001ac0:	4293      	cmp	r3, r2
 8001ac2:	d018      	beq.n	8001af6 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x4f2>
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	4a5e      	ldr	r2, [pc, #376]	@ (8001c44 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x640>)
 8001aca:	4293      	cmp	r3, r2
 8001acc:	d013      	beq.n	8001af6 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x4f2>
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	4a5d      	ldr	r2, [pc, #372]	@ (8001c48 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x644>)
 8001ad4:	4293      	cmp	r3, r2
 8001ad6:	d00e      	beq.n	8001af6 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x4f2>
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	4a5b      	ldr	r2, [pc, #364]	@ (8001c4c <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x648>)
 8001ade:	4293      	cmp	r3, r2
 8001ae0:	d009      	beq.n	8001af6 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x4f2>
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	4a5a      	ldr	r2, [pc, #360]	@ (8001c50 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x64c>)
 8001ae8:	4293      	cmp	r3, r2
 8001aea:	d004      	beq.n	8001af6 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x4f2>
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	4a58      	ldr	r2, [pc, #352]	@ (8001c54 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x650>)
 8001af2:	4293      	cmp	r3, r2
 8001af4:	d105      	bne.n	8001b02 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x4fe>
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f003 0308 	and.w	r3, r3, #8
 8001b00:	e004      	b.n	8001b0c <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x508>
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f003 0304 	and.w	r3, r3, #4
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	bf14      	ite	ne
 8001b10:	2301      	movne	r3, #1
 8001b12:	2300      	moveq	r3, #0
 8001b14:	b2db      	uxtb	r3, r3
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d01b      	beq.n	8001b52 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x54e>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b1e:	f003 031f 	and.w	r3, r3, #31
 8001b22:	2210      	movs	r2, #16
 8001b24:	409a      	lsls	r2, r3
 8001b26:	693b      	ldr	r3, [r7, #16]
 8001b28:	609a      	str	r2, [r3, #8]

        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	bf0c      	ite	eq
 8001b38:	2301      	moveq	r3, #1
 8001b3a:	2300      	movne	r3, #0
 8001b3c:	b2db      	uxtb	r3, r3
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d007      	beq.n	8001b52 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x54e>
        {
          /* Disable the half transfer interrupt */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	681a      	ldr	r2, [r3, #0]
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f022 0208 	bic.w	r2, r2, #8
 8001b50:	601a      	str	r2, [r3, #0]
        }

      }
      interrupt = DMA_HALF_TRANSFER;
 8001b52:	2301      	movs	r3, #1
 8001b54:	617b      	str	r3, [r7, #20]
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b5a:	f003 031f 	and.w	r3, r3, #31
 8001b5e:	2220      	movs	r2, #32
 8001b60:	409a      	lsls	r2, r3
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	4013      	ands	r3, r2
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	f000 80e5 	beq.w	8001d36 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x732>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	4a29      	ldr	r2, [pc, #164]	@ (8001c18 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x614>)
 8001b72:	4293      	cmp	r3, r2
 8001b74:	d04a      	beq.n	8001c0c <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x608>
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	4a28      	ldr	r2, [pc, #160]	@ (8001c1c <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x618>)
 8001b7c:	4293      	cmp	r3, r2
 8001b7e:	d045      	beq.n	8001c0c <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x608>
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	4a26      	ldr	r2, [pc, #152]	@ (8001c20 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x61c>)
 8001b86:	4293      	cmp	r3, r2
 8001b88:	d040      	beq.n	8001c0c <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x608>
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	4a25      	ldr	r2, [pc, #148]	@ (8001c24 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x620>)
 8001b90:	4293      	cmp	r3, r2
 8001b92:	d03b      	beq.n	8001c0c <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x608>
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	4a23      	ldr	r2, [pc, #140]	@ (8001c28 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x624>)
 8001b9a:	4293      	cmp	r3, r2
 8001b9c:	d036      	beq.n	8001c0c <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x608>
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	4a22      	ldr	r2, [pc, #136]	@ (8001c2c <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x628>)
 8001ba4:	4293      	cmp	r3, r2
 8001ba6:	d031      	beq.n	8001c0c <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x608>
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	4a20      	ldr	r2, [pc, #128]	@ (8001c30 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x62c>)
 8001bae:	4293      	cmp	r3, r2
 8001bb0:	d02c      	beq.n	8001c0c <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x608>
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	4a1f      	ldr	r2, [pc, #124]	@ (8001c34 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x630>)
 8001bb8:	4293      	cmp	r3, r2
 8001bba:	d027      	beq.n	8001c0c <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x608>
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	4a1d      	ldr	r2, [pc, #116]	@ (8001c38 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x634>)
 8001bc2:	4293      	cmp	r3, r2
 8001bc4:	d022      	beq.n	8001c0c <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x608>
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	4a1c      	ldr	r2, [pc, #112]	@ (8001c3c <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x638>)
 8001bcc:	4293      	cmp	r3, r2
 8001bce:	d01d      	beq.n	8001c0c <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x608>
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	4a1a      	ldr	r2, [pc, #104]	@ (8001c40 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x63c>)
 8001bd6:	4293      	cmp	r3, r2
 8001bd8:	d018      	beq.n	8001c0c <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x608>
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	4a19      	ldr	r2, [pc, #100]	@ (8001c44 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x640>)
 8001be0:	4293      	cmp	r3, r2
 8001be2:	d013      	beq.n	8001c0c <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x608>
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	4a17      	ldr	r2, [pc, #92]	@ (8001c48 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x644>)
 8001bea:	4293      	cmp	r3, r2
 8001bec:	d00e      	beq.n	8001c0c <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x608>
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	4a16      	ldr	r2, [pc, #88]	@ (8001c4c <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x648>)
 8001bf4:	4293      	cmp	r3, r2
 8001bf6:	d009      	beq.n	8001c0c <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x608>
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4a14      	ldr	r2, [pc, #80]	@ (8001c50 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x64c>)
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	d004      	beq.n	8001c0c <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x608>
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	4a13      	ldr	r2, [pc, #76]	@ (8001c54 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x650>)
 8001c08:	4293      	cmp	r3, r2
 8001c0a:	d125      	bne.n	8001c58 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x654>
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f003 0310 	and.w	r3, r3, #16
 8001c16:	e024      	b.n	8001c62 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x65e>
 8001c18:	40020010 	.word	0x40020010
 8001c1c:	40020028 	.word	0x40020028
 8001c20:	40020040 	.word	0x40020040
 8001c24:	40020058 	.word	0x40020058
 8001c28:	40020070 	.word	0x40020070
 8001c2c:	40020088 	.word	0x40020088
 8001c30:	400200a0 	.word	0x400200a0
 8001c34:	400200b8 	.word	0x400200b8
 8001c38:	40020410 	.word	0x40020410
 8001c3c:	40020428 	.word	0x40020428
 8001c40:	40020440 	.word	0x40020440
 8001c44:	40020458 	.word	0x40020458
 8001c48:	40020470 	.word	0x40020470
 8001c4c:	40020488 	.word	0x40020488
 8001c50:	400204a0 	.word	0x400204a0
 8001c54:	400204b8 	.word	0x400204b8
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f003 0302 	and.w	r3, r3, #2
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	bf14      	ite	ne
 8001c66:	2301      	movne	r3, #1
 8001c68:	2300      	moveq	r3, #0
 8001c6a:	b2db      	uxtb	r3, r3
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d062      	beq.n	8001d36 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x732>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c74:	f003 031f 	and.w	r3, r3, #31
 8001c78:	2220      	movs	r2, #32
 8001c7a:	409a      	lsls	r2, r3
 8001c7c:	693b      	ldr	r3, [r7, #16]
 8001c7e:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001c86:	b2db      	uxtb	r3, r3
 8001c88:	2b04      	cmp	r3, #4
 8001c8a:	bf0c      	ite	eq
 8001c8c:	2301      	moveq	r3, #1
 8001c8e:	2300      	movne	r3, #0
 8001c90:	b2db      	uxtb	r3, r3
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d031      	beq.n	8001cfa <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x6f6>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	681a      	ldr	r2, [r3, #0]
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f022 0216 	bic.w	r2, r2, #22
 8001ca4:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	695a      	ldr	r2, [r3, #20]
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001cb4:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d103      	bne.n	8001cc6 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x6c2>
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d007      	beq.n	8001cd6 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x6d2>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	681a      	ldr	r2, [r3, #0]
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f022 0208 	bic.w	r2, r2, #8
 8001cd4:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001cda:	f003 031f 	and.w	r3, r3, #31
 8001cde:	223f      	movs	r2, #63	@ 0x3f
 8001ce0:	409a      	lsls	r2, r3
 8001ce2:	693b      	ldr	r3, [r7, #16]
 8001ce4:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	2201      	movs	r2, #1
 8001cea:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          interrupt = DMA_TRANSFER_COMPLETE;
 8001cf6:	2302      	movs	r3, #2
 8001cf8:	617b      	str	r3, [r7, #20]
        }

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	bf0c      	ite	eq
 8001d08:	2301      	moveq	r3, #1
 8001d0a:	2300      	movne	r3, #0
 8001d0c:	b2db      	uxtb	r3, r3
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d00f      	beq.n	8001d32 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x72e>
        {
          /* Disable the transfer complete interrupt */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	681a      	ldr	r2, [r3, #0]
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f022 0210 	bic.w	r2, r2, #16
 8001d20:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	2201      	movs	r2, #1
 8001d26:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }
        interrupt =  2;
 8001d32:	2302      	movs	r3, #2
 8001d34:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return interrupt;
 8001d36:	697b      	ldr	r3, [r7, #20]
}
 8001d38:	4618      	mov	r0, r3
 8001d3a:	371c      	adds	r7, #28
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d42:	4770      	bx	lr

08001d44 <_ZN8SPIComms18getActiveDMAmemoryEP19__DMA_HandleTypeDef>:

int SPIComms::getActiveDMAmemory(DMA_HandleTypeDef *hdma)
{
 8001d44:	b480      	push	{r7}
 8001d46:	b085      	sub	sp, #20
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
 8001d4c:	6039      	str	r1, [r7, #0]
    DMA_Stream_TypeDef *dmaStream = (DMA_Stream_TypeDef *)hdma->Instance;
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	60fb      	str	r3, [r7, #12]

    return (dmaStream->CR & DMA_SxCR_CT) ? 1 : 0;
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d001      	beq.n	8001d64 <_ZN8SPIComms18getActiveDMAmemoryEP19__DMA_HandleTypeDef+0x20>
 8001d60:	2301      	movs	r3, #1
 8001d62:	e000      	b.n	8001d66 <_ZN8SPIComms18getActiveDMAmemoryEP19__DMA_HandleTypeDef+0x22>
 8001d64:	2300      	movs	r3, #0
}
 8001d66:	4618      	mov	r0, r3
 8001d68:	3714      	adds	r7, #20
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d70:	4770      	bx	lr

08001d72 <_ZN8SPIComms18handleNssInterruptEv>:

void SPIComms::handleNssInterrupt()
{
 8001d72:	b480      	push	{r7}
 8001d74:	b083      	sub	sp, #12
 8001d76:	af00      	add	r7, sp, #0
 8001d78:	6078      	str	r0, [r7, #4]
	// SPI packet has been fully received
	// Flag the copy the RX buffer if new WRITE data has been received
	// DMA copy is performed during the servo thread update
	if (newWriteData)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	f893 3242 	ldrb.w	r3, [r3, #578]	@ 0x242
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d007      	beq.n	8001d94 <_ZN8SPIComms18handleNssInterruptEv+0x22>
	{
		copyRXbuffer = true;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2201      	movs	r2, #1
 8001d88:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
		newWriteData = false;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2200      	movs	r2, #0
 8001d90:	f883 2242 	strb.w	r2, [r3, #578]	@ 0x242
	}
}
 8001d94:	bf00      	nop
 8001d96:	370c      	adds	r7, #12
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9e:	4770      	bx	lr

08001da0 <_ZN8SPIComms17handleTxInterruptEv>:

void SPIComms::handleTxInterrupt()
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b082      	sub	sp, #8
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
	DMA_IRQHandler(&hdma_spi_tx);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	33d8      	adds	r3, #216	@ 0xd8
 8001dac:	4619      	mov	r1, r3
 8001dae:	6878      	ldr	r0, [r7, #4]
 8001db0:	f7ff fc28 	bl	8001604 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef>
	HAL_NVIC_EnableIRQ(irqDMAtx);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	f9b3 304c 	ldrsh.w	r3, [r3, #76]	@ 0x4c
 8001dba:	4618      	mov	r0, r3
 8001dbc:	f00f fe1f 	bl	80119fe <HAL_NVIC_EnableIRQ>
}
 8001dc0:	bf00      	nop
 8001dc2:	3708      	adds	r7, #8
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	bd80      	pop	{r7, pc}

08001dc8 <_ZN8SPIComms17handleRxInterruptEv>:

void SPIComms::handleRxInterrupt()
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b082      	sub	sp, #8
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
    // Handle the interrupt and determine the type of interrupt
    interruptType = DMA_IRQHandler(&hdma_spi_rx);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001dd6:	4619      	mov	r1, r3
 8001dd8:	6878      	ldr	r0, [r7, #4]
 8001dda:	f7ff fc13 	bl	8001604 <_ZN8SPIComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef>
 8001dde:	4603      	mov	r3, r0
 8001de0:	b2da      	uxtb	r2, r3
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	f883 2241 	strb.w	r2, [r3, #577]	@ 0x241

    RxDMAmemoryIdx = getActiveDMAmemory(&hdma_spi_rx);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001dee:	4619      	mov	r1, r3
 8001df0:	6878      	ldr	r0, [r7, #4]
 8001df2:	f7ff ffa7 	bl	8001d44 <_ZN8SPIComms18getActiveDMAmemoryEP19__DMA_HandleTypeDef>
 8001df6:	4603      	mov	r3, r0
 8001df8:	b2da      	uxtb	r2, r3
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    if (interruptType == DMA_HALF_TRANSFER) // Use the HTC interrupt to check the packet being received
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	f893 3241 	ldrb.w	r3, [r3, #577]	@ 0x241
 8001e06:	2b01      	cmp	r3, #1
 8001e08:	d12d      	bne.n	8001e66 <_ZN8SPIComms17handleRxInterruptEv+0x9e>
    {
        switch (ptrRxDMABuffer->buffer[RxDMAmemoryIdx].header)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001e14:	019b      	lsls	r3, r3, #6
 8001e16:	4413      	add	r3, r2
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	4a1c      	ldr	r2, [pc, #112]	@ (8001e8c <_ZN8SPIComms17handleRxInterruptEv+0xc4>)
 8001e1c:	4293      	cmp	r3, r2
 8001e1e:	d003      	beq.n	8001e28 <_ZN8SPIComms17handleRxInterruptEv+0x60>
 8001e20:	4a1b      	ldr	r2, [pc, #108]	@ (8001e90 <_ZN8SPIComms17handleRxInterruptEv+0xc8>)
 8001e22:	4293      	cmp	r3, r2
 8001e24:	d007      	beq.n	8001e36 <_ZN8SPIComms17handleRxInterruptEv+0x6e>
 8001e26:	e017      	b.n	8001e58 <_ZN8SPIComms17handleRxInterruptEv+0x90>
        {
            case Config::pruRead:
                // No action needed for PRU_READ.
            	dataCallback(true);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	3318      	adds	r3, #24
 8001e2c:	2101      	movs	r1, #1
 8001e2e:	4618      	mov	r0, r3
 8001e30:	f000 f8ca 	bl	8001fc8 <_ZNKSt8functionIFvbEEclEb>
                break;
 8001e34:	e01f      	b.n	8001e76 <_ZN8SPIComms17handleRxInterruptEv+0xae>

            case Config::pruWrite:
            	// Valid PRU_WRITE header, flag RX data transfer.
            	dataCallback(true);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	3318      	adds	r3, #24
 8001e3a:	2101      	movs	r1, #1
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	f000 f8c3 	bl	8001fc8 <_ZNKSt8functionIFvbEEclEb>
            	newWriteData = true;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	2201      	movs	r2, #1
 8001e46:	f883 2242 	strb.w	r2, [r3, #578]	@ 0x242
                RXbufferIdx = RxDMAmemoryIdx;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	f893 2038 	ldrb.w	r2, [r3, #56]	@ 0x38
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
                break;
 8001e56:	e00e      	b.n	8001e76 <_ZN8SPIComms17handleRxInterruptEv+0xae>

            default:
            	dataCallback(false);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	3318      	adds	r3, #24
 8001e5c:	2100      	movs	r1, #0
 8001e5e:	4618      	mov	r0, r3
 8001e60:	f000 f8b2 	bl	8001fc8 <_ZNKSt8functionIFvbEEclEb>
                break;
 8001e64:	e007      	b.n	8001e76 <_ZN8SPIComms17handleRxInterruptEv+0xae>
        }
    }
    else if (interruptType == DMA_TRANSFER_COMPLETE) // Transfer complete interrupt
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	f893 3241 	ldrb.w	r3, [r3, #577]	@ 0x241
 8001e6c:	2b02      	cmp	r3, #2
 8001e6e:	d002      	beq.n	8001e76 <_ZN8SPIComms17handleRxInterruptEv+0xae>
    {
        // Placeholder for transfer complete handling if needed in the future.
    }
    else // Other interrupt sources
    {
        printf("DMA SPI Rx error\n");
 8001e70:	4808      	ldr	r0, [pc, #32]	@ (8001e94 <_ZN8SPIComms17handleRxInterruptEv+0xcc>)
 8001e72:	f01c fd87 	bl	801e984 <puts>
    }

    HAL_NVIC_EnableIRQ(irqDMArx);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	f9b3 304a 	ldrsh.w	r3, [r3, #74]	@ 0x4a
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	f00f fdbe 	bl	80119fe <HAL_NVIC_EnableIRQ>
}
 8001e82:	bf00      	nop
 8001e84:	3708      	adds	r7, #8
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bd80      	pop	{r7, pc}
 8001e8a:	bf00      	nop
 8001e8c:	72656164 	.word	0x72656164
 8001e90:	77726974 	.word	0x77726974
 8001e94:	0801f6ec 	.word	0x0801f6ec

08001e98 <_ZN8SPIComms5tasksEv>:

void SPIComms::tasks() {
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b084      	sub	sp, #16
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]

	if (copyRXbuffer == true)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8001ea6:	2b01      	cmp	r3, #1
 8001ea8:	d138      	bne.n	8001f1c <_ZN8SPIComms5tasksEv+0x84>
    {
	    uint8_t* srcBuffer = (uint8_t*)ptrRxDMABuffer->buffer[RXbufferIdx].rxBuffer;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8001eb4:	019b      	lsls	r3, r3, #6
 8001eb6:	4413      	add	r3, r2
 8001eb8:	60fb      	str	r3, [r7, #12]
	    uint8_t* destBuffer = (uint8_t*)ptrRxData->rxBuffer;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ebe:	60bb      	str	r3, [r7, #8]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ec0:	b672      	cpsid	i
}
 8001ec2:	bf00      	nop

	    __disable_irq();

	    dmaStatus = HAL_DMA_Start(
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	f503 70e4 	add.w	r0, r3, #456	@ 0x1c8
 8001eca:	68f9      	ldr	r1, [r7, #12]
 8001ecc:	68ba      	ldr	r2, [r7, #8]
 8001ece:	2340      	movs	r3, #64	@ 0x40
 8001ed0:	f010 f988 	bl	80121e4 <HAL_DMA_Start>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	461a      	mov	r2, r3
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	f883 2240 	strb.w	r2, [r3, #576]	@ 0x240
									(uint32_t)srcBuffer,
									(uint32_t)destBuffer,
									Config::dataBuffSize
	    							);

	    if (dmaStatus == HAL_OK) {
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	f893 3240 	ldrb.w	r3, [r3, #576]	@ 0x240
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d10d      	bne.n	8001f04 <_ZN8SPIComms5tasksEv+0x6c>
	        dmaStatus = HAL_DMA_PollForTransfer(&hdma_memtomem, HAL_DMA_FULL_TRANSFER, HAL_MAX_DELAY);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	f503 73e4 	add.w	r3, r3, #456	@ 0x1c8
 8001eee:	f04f 32ff 	mov.w	r2, #4294967295
 8001ef2:	2100      	movs	r1, #0
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	f010 fdb3 	bl	8012a60 <HAL_DMA_PollForTransfer>
 8001efa:	4603      	mov	r3, r0
 8001efc:	461a      	mov	r2, r3
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	f883 2240 	strb.w	r2, [r3, #576]	@ 0x240
  __ASM volatile ("cpsie i" : : : "memory");
 8001f04:	b662      	cpsie	i
}
 8001f06:	bf00      	nop
	    }

	    __enable_irq();
	    HAL_DMA_Abort(&hdma_memtomem);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	f503 73e4 	add.w	r3, r3, #456	@ 0x1c8
 8001f0e:	4618      	mov	r0, r3
 8001f10:	f010 fa88 	bl	8012424 <HAL_DMA_Abort>
		copyRXbuffer = false;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	2200      	movs	r2, #0
 8001f18:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
    }
}
 8001f1c:	bf00      	nop
 8001f1e:	3710      	adds	r7, #16
 8001f20:	46bd      	mov	sp, r7
 8001f22:	bd80      	pop	{r7, pc}

08001f24 <_ZN15ModuleInterruptI8SPICommsEC1E9IRQn_TypePS0_MS0_FvvE>:
private:
	DerivedModule* InterruptOwnerPtr;                                // Pointer to the owning module
	void (DerivedModule::*InterruptHandler)();                       // Member function pointer for the ISR
	
public:
    ModuleInterrupt(IRQn_Type interruptNumber, DerivedModule* ownerPtr, void (DerivedModule::*handler)())
 8001f24:	b082      	sub	sp, #8
 8001f26:	b580      	push	{r7, lr}
 8001f28:	b084      	sub	sp, #16
 8001f2a:	af00      	add	r7, sp, #0
 8001f2c:	60f8      	str	r0, [r7, #12]
 8001f2e:	607a      	str	r2, [r7, #4]
 8001f30:	61fb      	str	r3, [r7, #28]
 8001f32:	460b      	mov	r3, r1
 8001f34:	817b      	strh	r3, [r7, #10]
        : InterruptOwnerPtr(ownerPtr), InterruptHandler(handler)
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	4618      	mov	r0, r3
 8001f3a:	f000 fa89 	bl	8002450 <_ZN9InterruptC1Ev>
 8001f3e:	4a0e      	ldr	r2, [pc, #56]	@ (8001f78 <_ZN15ModuleInterruptI8SPICommsEC1E9IRQn_TypePS0_MS0_FvvE+0x54>)
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	601a      	str	r2, [r3, #0]
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	687a      	ldr	r2, [r7, #4]
 8001f48:	605a      	str	r2, [r3, #4]
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	3308      	adds	r3, #8
 8001f4e:	f107 021c 	add.w	r2, r7, #28
 8001f52:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001f56:	e883 0003 	stmia.w	r3, {r0, r1}
    {
        // Register the interrupt
        Interrupt::Register(interruptNumber, this);
 8001f5a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001f5e:	68fa      	ldr	r2, [r7, #12]
 8001f60:	4611      	mov	r1, r2
 8001f62:	4618      	mov	r0, r3
 8001f64:	f000 fa84 	bl	8002470 <_ZN9Interrupt8RegisterEiPS_>
    }
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	3710      	adds	r7, #16
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001f74:	b002      	add	sp, #8
 8001f76:	4770      	bx	lr
 8001f78:	08020408 	.word	0x08020408

08001f7c <_ZSt5beginIVhLj64EEPT_RAT0__S1_>:
   *  @param  __arr  Array.
   */
  template<typename _Tp, size_t _Nm>
    [[__nodiscard__]]
    inline _GLIBCXX14_CONSTEXPR _Tp*
    begin(_Tp (&__arr)[_Nm]) noexcept
 8001f7c:	b480      	push	{r7}
 8001f7e:	b083      	sub	sp, #12
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
    { return __arr; }
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	4618      	mov	r0, r3
 8001f88:	370c      	adds	r7, #12
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f90:	4770      	bx	lr

08001f92 <_ZSt3endIVhLj64EEPT_RAT0__S1_>:
   *  @param  __arr  Array.
   */
  template<typename _Tp, size_t _Nm>
    [[__nodiscard__]]
    inline _GLIBCXX14_CONSTEXPR _Tp*
    end(_Tp (&__arr)[_Nm]) noexcept
 8001f92:	b480      	push	{r7}
 8001f94:	b083      	sub	sp, #12
 8001f96:	af00      	add	r7, sp, #0
 8001f98:	6078      	str	r0, [r7, #4]
    { return __arr + _Nm; }
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	3340      	adds	r3, #64	@ 0x40
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	370c      	adds	r7, #12
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa8:	4770      	bx	lr

08001faa <_ZSt4fillIPVhiEvT_S2_RKT0_>:
   *  to @c memset or @c wmemset.
  */
  template<typename _ForwardIterator, typename _Tp>
    _GLIBCXX20_CONSTEXPR
    inline void
    fill(_ForwardIterator __first, _ForwardIterator __last, const _Tp& __value)
 8001faa:	b580      	push	{r7, lr}
 8001fac:	b084      	sub	sp, #16
 8001fae:	af00      	add	r7, sp, #0
 8001fb0:	60f8      	str	r0, [r7, #12]
 8001fb2:	60b9      	str	r1, [r7, #8]
 8001fb4:	607a      	str	r2, [r7, #4]
      // concept requirements
      __glibcxx_function_requires(_Mutable_ForwardIteratorConcept<
				  _ForwardIterator>)
      __glibcxx_requires_valid_range(__first, __last);

      std::__fill_a(__first, __last, __value);
 8001fb6:	687a      	ldr	r2, [r7, #4]
 8001fb8:	68b9      	ldr	r1, [r7, #8]
 8001fba:	68f8      	ldr	r0, [r7, #12]
 8001fbc:	f000 f82d 	bl	800201a <_ZSt8__fill_aIPVhiEvT_S2_RKT0_>
    }
 8001fc0:	bf00      	nop
 8001fc2:	3710      	adds	r7, #16
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	bd80      	pop	{r7, pc}

08001fc8 <_ZNKSt8functionIFvbEEclEb>:
       *
       *  The function call operator invokes the target function object
       *  stored by `this`.
       */
      _Res
      operator()(_ArgTypes... __args) const
 8001fc8:	b5b0      	push	{r4, r5, r7, lr}
 8001fca:	b082      	sub	sp, #8
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
 8001fd0:	460b      	mov	r3, r1
 8001fd2:	70fb      	strb	r3, [r7, #3]
      {
	if (_M_empty())
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	f7fe fe79 	bl	8000cce <_ZNKSt14_Function_base8_M_emptyEv>
 8001fdc:	4603      	mov	r3, r0
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d001      	beq.n	8001fe6 <_ZNKSt8functionIFvbEEclEb+0x1e>
	  __throw_bad_function_call();
 8001fe2:	f01c f8fa 	bl	801e1da <_ZSt25__throw_bad_function_callv>
	return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	68dc      	ldr	r4, [r3, #12]
 8001fea:	687d      	ldr	r5, [r7, #4]
 8001fec:	1cfb      	adds	r3, r7, #3
 8001fee:	4618      	mov	r0, r3
 8001ff0:	f000 f808 	bl	8002004 <_ZSt7forwardIbEOT_RNSt16remove_referenceIS0_E4typeE>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	4619      	mov	r1, r3
 8001ff8:	4628      	mov	r0, r5
 8001ffa:	47a0      	blx	r4
 8001ffc:	bf00      	nop
      }
 8001ffe:	3708      	adds	r7, #8
 8002000:	46bd      	mov	sp, r7
 8002002:	bdb0      	pop	{r4, r5, r7, pc}

08002004 <_ZSt7forwardIbEOT_RNSt16remove_referenceIS0_E4typeE>:
   *  This function is used to implement "perfect forwarding".
   */
  template<typename _Tp>
    _GLIBCXX_NODISCARD
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8002004:	b480      	push	{r7}
 8002006:	b083      	sub	sp, #12
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	4618      	mov	r0, r3
 8002010:	370c      	adds	r7, #12
 8002012:	46bd      	mov	sp, r7
 8002014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002018:	4770      	bx	lr

0800201a <_ZSt8__fill_aIPVhiEvT_S2_RKT0_>:
    __fill_a(_FIte __first, _FIte __last, const _Tp& __value)
 800201a:	b580      	push	{r7, lr}
 800201c:	b084      	sub	sp, #16
 800201e:	af00      	add	r7, sp, #0
 8002020:	60f8      	str	r0, [r7, #12]
 8002022:	60b9      	str	r1, [r7, #8]
 8002024:	607a      	str	r2, [r7, #4]
    { std::__fill_a1(__first, __last, __value); }
 8002026:	687a      	ldr	r2, [r7, #4]
 8002028:	68b9      	ldr	r1, [r7, #8]
 800202a:	68f8      	ldr	r0, [r7, #12]
 800202c:	f000 f804 	bl	8002038 <_ZSt9__fill_a1IPVhiEN9__gnu_cxx11__enable_ifIXsrSt11__is_scalarIT0_E7__valueEvE6__typeET_S9_RKS5_>
 8002030:	bf00      	nop
 8002032:	3710      	adds	r7, #16
 8002034:	46bd      	mov	sp, r7
 8002036:	bd80      	pop	{r7, pc}

08002038 <_ZSt9__fill_a1IPVhiEN9__gnu_cxx11__enable_ifIXsrSt11__is_scalarIT0_E7__valueEvE6__typeET_S9_RKS5_>:
    __fill_a1(_ForwardIterator __first, _ForwardIterator __last,
 8002038:	b480      	push	{r7}
 800203a:	b087      	sub	sp, #28
 800203c:	af00      	add	r7, sp, #0
 800203e:	60f8      	str	r0, [r7, #12]
 8002040:	60b9      	str	r1, [r7, #8]
 8002042:	607a      	str	r2, [r7, #4]
      const _Tp __tmp = __value;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	617b      	str	r3, [r7, #20]
      for (; __first != __last; ++__first)
 800204a:	e006      	b.n	800205a <_ZSt9__fill_a1IPVhiEN9__gnu_cxx11__enable_ifIXsrSt11__is_scalarIT0_E7__valueEvE6__typeET_S9_RKS5_+0x22>
	*__first = __tmp;
 800204c:	697b      	ldr	r3, [r7, #20]
 800204e:	b2da      	uxtb	r2, r3
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	701a      	strb	r2, [r3, #0]
      for (; __first != __last; ++__first)
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	3301      	adds	r3, #1
 8002058:	60fb      	str	r3, [r7, #12]
 800205a:	68fa      	ldr	r2, [r7, #12]
 800205c:	68bb      	ldr	r3, [r7, #8]
 800205e:	429a      	cmp	r2, r3
 8002060:	d1f4      	bne.n	800204c <_ZSt9__fill_a1IPVhiEN9__gnu_cxx11__enable_ifIXsrSt11__is_scalarIT0_E7__valueEvE6__typeET_S9_RKS5_+0x14>
    }
 8002062:	bf00      	nop
 8002064:	bf00      	nop
 8002066:	371c      	adds	r7, #28
 8002068:	46bd      	mov	sp, r7
 800206a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206e:	4770      	bx	lr

08002070 <_Z41__static_initialization_and_destruction_0ii>:
 8002070:	b580      	push	{r7, lr}
 8002072:	b082      	sub	sp, #8
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
 8002078:	6039      	str	r1, [r7, #0]
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	2b01      	cmp	r3, #1
 800207e:	d107      	bne.n	8002090 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002086:	4293      	cmp	r3, r2
 8002088:	d102      	bne.n	8002090 <_Z41__static_initialization_and_destruction_0ii+0x20>
__attribute__((section(".DmaSection"))) volatile DMA_RxBuffer_t rxDMABuffer;
 800208a:	4803      	ldr	r0, [pc, #12]	@ (8002098 <_Z41__static_initialization_and_destruction_0ii+0x28>)
 800208c:	f7fe fe4c 	bl	8000d28 <_ZN14DMA_RxBuffer_tC1Ev>
}
 8002090:	bf00      	nop
 8002092:	3708      	adds	r7, #8
 8002094:	46bd      	mov	sp, r7
 8002096:	bd80      	pop	{r7, pc}
 8002098:	30000000 	.word	0x30000000

0800209c <_ZN15ModuleInterruptI8SPICommsE11ISR_HandlerEv>:

    void ISR_Handler(void) {
 800209c:	b580      	push	{r7, lr}
 800209e:	b082      	sub	sp, #8
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
        if (this->InterruptOwnerPtr && this->InterruptHandler) {
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	685b      	ldr	r3, [r3, #4]
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d02a      	beq.n	8002102 <_ZN15ModuleInterruptI8SPICommsE11ISR_HandlerEv+0x66>
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	689b      	ldr	r3, [r3, #8]
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d107      	bne.n	80020c4 <_ZN15ModuleInterruptI8SPICommsE11ISR_HandlerEv+0x28>
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	68db      	ldr	r3, [r3, #12]
 80020b8:	f003 0301 	and.w	r3, r3, #1
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d101      	bne.n	80020c4 <_ZN15ModuleInterruptI8SPICommsE11ISR_HandlerEv+0x28>
 80020c0:	2301      	movs	r3, #1
 80020c2:	e000      	b.n	80020c6 <_ZN15ModuleInterruptI8SPICommsE11ISR_HandlerEv+0x2a>
 80020c4:	2300      	movs	r3, #0
 80020c6:	2b01      	cmp	r3, #1
 80020c8:	d01b      	beq.n	8002102 <_ZN15ModuleInterruptI8SPICommsE11ISR_HandlerEv+0x66>
            (this->InterruptOwnerPtr->*InterruptHandler)(); // Call the member function of the owner
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	68db      	ldr	r3, [r3, #12]
 80020ce:	f003 0301 	and.w	r3, r3, #1
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d102      	bne.n	80020dc <_ZN15ModuleInterruptI8SPICommsE11ISR_HandlerEv+0x40>
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	689b      	ldr	r3, [r3, #8]
 80020da:	e00a      	b.n	80020f2 <_ZN15ModuleInterruptI8SPICommsE11ISR_HandlerEv+0x56>
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	687a      	ldr	r2, [r7, #4]
 80020e2:	68d2      	ldr	r2, [r2, #12]
 80020e4:	1052      	asrs	r2, r2, #1
 80020e6:	4413      	add	r3, r2
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	687a      	ldr	r2, [r7, #4]
 80020ec:	6892      	ldr	r2, [r2, #8]
 80020ee:	4413      	add	r3, r2
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	687a      	ldr	r2, [r7, #4]
 80020f4:	6852      	ldr	r2, [r2, #4]
 80020f6:	6879      	ldr	r1, [r7, #4]
 80020f8:	68c9      	ldr	r1, [r1, #12]
 80020fa:	1049      	asrs	r1, r1, #1
 80020fc:	440a      	add	r2, r1
 80020fe:	4610      	mov	r0, r2
 8002100:	4798      	blx	r3
        }
    }
 8002102:	bf00      	nop
 8002104:	3708      	adds	r7, #8
 8002106:	46bd      	mov	sp, r7
 8002108:	bd80      	pop	{r7, pc}

0800210a <_GLOBAL__sub_I_rxDMABuffer>:
 800210a:	b580      	push	{r7, lr}
 800210c:	af00      	add	r7, sp, #0
 800210e:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8002112:	2001      	movs	r0, #1
 8002114:	f7ff ffac 	bl	8002070 <_Z41__static_initialization_and_destruction_0ii>
 8002118:	bd80      	pop	{r7, pc}
	...

0800211c <_ZN14CommsInterfaceC1Ev>:
#include "commsInterface.h"

CommsInterface::CommsInterface() {
 800211c:	b580      	push	{r7, lr}
 800211e:	b082      	sub	sp, #8
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	4618      	mov	r0, r3
 8002128:	f00b ff70 	bl	800e00c <_ZN6ModuleC1Ev>
 800212c:	4a06      	ldr	r2, [pc, #24]	@ (8002148 <_ZN14CommsInterfaceC1Ev+0x2c>)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	601a      	str	r2, [r3, #0]
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	3318      	adds	r3, #24
 8002136:	4618      	mov	r0, r3
 8002138:	f000 f839 	bl	80021ae <_ZNSt8functionIFvbEEC1Ev>
    // Constructor implementation
}
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	4618      	mov	r0, r3
 8002140:	3708      	adds	r7, #8
 8002142:	46bd      	mov	sp, r7
 8002144:	bd80      	pop	{r7, pc}
 8002146:	bf00      	nop
 8002148:	08020444 	.word	0x08020444

0800214c <_ZN14CommsInterface4initEv>:

void CommsInterface::init(){}
 800214c:	b480      	push	{r7}
 800214e:	b083      	sub	sp, #12
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
 8002154:	bf00      	nop
 8002156:	370c      	adds	r7, #12
 8002158:	46bd      	mov	sp, r7
 800215a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215e:	4770      	bx	lr

08002160 <_ZN14CommsInterface5startEv>:
void CommsInterface::start(){}
 8002160:	b480      	push	{r7}
 8002162:	b083      	sub	sp, #12
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
 8002168:	bf00      	nop
 800216a:	370c      	adds	r7, #12
 800216c:	46bd      	mov	sp, r7
 800216e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002172:	4770      	bx	lr

08002174 <_ZN14CommsInterface5tasksEv>:
void CommsInterface::tasks(){}
 8002174:	b480      	push	{r7}
 8002176:	b083      	sub	sp, #12
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
 800217c:	bf00      	nop
 800217e:	370c      	adds	r7, #12
 8002180:	46bd      	mov	sp, r7
 8002182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002186:	4770      	bx	lr

08002188 <_ZNSt14_Function_baseC1Ev>:
    _Function_base() = default;
 8002188:	b480      	push	{r7}
 800218a:	b083      	sub	sp, #12
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	461a      	mov	r2, r3
 8002194:	2300      	movs	r3, #0
 8002196:	6013      	str	r3, [r2, #0]
 8002198:	6053      	str	r3, [r2, #4]
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	2200      	movs	r2, #0
 800219e:	609a      	str	r2, [r3, #8]
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	4618      	mov	r0, r3
 80021a4:	370c      	adds	r7, #12
 80021a6:	46bd      	mov	sp, r7
 80021a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ac:	4770      	bx	lr

080021ae <_ZNSt8functionIFvbEEC1Ev>:
      function() noexcept
 80021ae:	b580      	push	{r7, lr}
 80021b0:	b082      	sub	sp, #8
 80021b2:	af00      	add	r7, sp, #0
 80021b4:	6078      	str	r0, [r7, #4]
      : _Function_base() { }
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	461a      	mov	r2, r3
 80021ba:	2300      	movs	r3, #0
 80021bc:	6013      	str	r3, [r2, #0]
 80021be:	6053      	str	r3, [r2, #4]
 80021c0:	6093      	str	r3, [r2, #8]
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	4618      	mov	r0, r3
 80021c6:	f7ff ffdf 	bl	8002188 <_ZNSt14_Function_baseC1Ev>
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	2200      	movs	r2, #0
 80021ce:	60da      	str	r2, [r3, #12]
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	4618      	mov	r0, r3
 80021d4:	3708      	adds	r7, #8
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bd80      	pop	{r7, pc}

080021da <_ZN3PinC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi>:
#include <cstdio>
#include <cerrno>
#include <string>


Pin::Pin(std::string portAndPin, int dir) :
 80021da:	b580      	push	{r7, lr}
 80021dc:	b084      	sub	sp, #16
 80021de:	af00      	add	r7, sp, #0
 80021e0:	60f8      	str	r0, [r7, #12]
 80021e2:	60b9      	str	r1, [r7, #8]
 80021e4:	607a      	str	r2, [r7, #4]
    portAndPin(portAndPin),
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	68b9      	ldr	r1, [r7, #8]
 80021ea:	4618      	mov	r0, r3
 80021ec:	f01c f983 	bl	801e4f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
    dir(dir)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	b2da      	uxtb	r2, r3
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	761a      	strb	r2, [r3, #24]
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	3330      	adds	r3, #48	@ 0x30
 80021fc:	2200      	movs	r2, #0
 80021fe:	601a      	str	r2, [r3, #0]
 8002200:	605a      	str	r2, [r3, #4]
 8002202:	609a      	str	r2, [r3, #8]
 8002204:	60da      	str	r2, [r3, #12]
 8002206:	611a      	str	r2, [r3, #16]
{
    // Set direction
    if (this->dir == INPUT)
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	7e1b      	ldrb	r3, [r3, #24]
 800220c:	2b00      	cmp	r3, #0
 800220e:	d106      	bne.n	800221e <_ZN3PinC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi+0x44>
    {
        this->mode = GPIO_MODE_INPUT;
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	2200      	movs	r2, #0
 8002214:	621a      	str	r2, [r3, #32]
        this->pull = GPIO_NOPULL;
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	2200      	movs	r2, #0
 800221a:	625a      	str	r2, [r3, #36]	@ 0x24
 800221c:	e005      	b.n	800222a <_ZN3PinC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi+0x50>
    }
    else
    {
        this->mode = GPIO_MODE_OUTPUT_PP;
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	2201      	movs	r2, #1
 8002222:	621a      	str	r2, [r3, #32]
        this->pull = GPIO_NOPULL;
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	2200      	movs	r2, #0
 8002228:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    this->configPin();
 800222a:	68f8      	ldr	r0, [r7, #12]
 800222c:	f000 f806 	bl	800223c <_ZN3Pin9configPinEv>
}
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	4618      	mov	r0, r3
 8002234:	3710      	adds	r7, #16
 8002236:	46bd      	mov	sp, r7
 8002238:	bd80      	pop	{r7, pc}
	...

0800223c <_ZN3Pin9configPinEv>:

    this->configPin();
}

void Pin::configPin()
{
 800223c:	b5b0      	push	{r4, r5, r7, lr}
 800223e:	b08e      	sub	sp, #56	@ 0x38
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
    printf("Creating Pin @\n");
 8002244:	4868      	ldr	r0, [pc, #416]	@ (80023e8 <_ZN3Pin9configPinEv+0x1ac>)
 8002246:	f01c fb9d 	bl	801e984 <puts>

    //x can be (A..H) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
    GPIO_TypeDef* gpios[5] ={GPIOA,GPIOB,GPIOC,GPIOD,GPIOE};
 800224a:	4b68      	ldr	r3, [pc, #416]	@ (80023ec <_ZN3Pin9configPinEv+0x1b0>)
 800224c:	f107 0420 	add.w	r4, r7, #32
 8002250:	461d      	mov	r5, r3
 8002252:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002254:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002256:	682b      	ldr	r3, [r5, #0]
 8002258:	6023      	str	r3, [r4, #0]
    

    if (this->portAndPin[0] == 'P') // PXXX e.g.PA_2 PC_15
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	2100      	movs	r1, #0
 800225e:	4618      	mov	r0, r3
 8002260:	f01c f8de 	bl	801e420 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>
 8002264:	4603      	mov	r3, r0
 8002266:	781b      	ldrb	r3, [r3, #0]
 8002268:	2b50      	cmp	r3, #80	@ 0x50
 800226a:	bf0c      	ite	eq
 800226c:	2301      	moveq	r3, #1
 800226e:	2300      	movne	r3, #0
 8002270:	b2db      	uxtb	r3, r3
 8002272:	2b00      	cmp	r3, #0
 8002274:	d05e      	beq.n	8002334 <_ZN3Pin9configPinEv+0xf8>
    {  
        this->portIndex     = this->portAndPin[1] - 'A';
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	2101      	movs	r1, #1
 800227a:	4618      	mov	r0, r3
 800227c:	f01c f8d0 	bl	801e420 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>
 8002280:	4603      	mov	r3, r0
 8002282:	781b      	ldrb	r3, [r3, #0]
 8002284:	3b41      	subs	r3, #65	@ 0x41
 8002286:	b2da      	uxtb	r2, r3
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	769a      	strb	r2, [r3, #26]
        this->pinNumber     = this->portAndPin[3] - '0';       
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2103      	movs	r1, #3
 8002290:	4618      	mov	r0, r3
 8002292:	f01c f8c5 	bl	801e420 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>
 8002296:	4603      	mov	r3, r0
 8002298:	781b      	ldrb	r3, [r3, #0]
 800229a:	3b30      	subs	r3, #48	@ 0x30
 800229c:	b29a      	uxth	r2, r3
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	839a      	strh	r2, [r3, #28]
        uint16_t pin2       = this->portAndPin[4] - '0';       
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	2104      	movs	r1, #4
 80022a6:	4618      	mov	r0, r3
 80022a8:	f01c f8ba 	bl	801e420 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>
 80022ac:	4603      	mov	r3, r0
 80022ae:	781b      	ldrb	r3, [r3, #0]
 80022b0:	3b30      	subs	r3, #48	@ 0x30
 80022b2:	86fb      	strh	r3, [r7, #54]	@ 0x36

        if (pin2 <= 8) 
 80022b4:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80022b6:	2b08      	cmp	r3, #8
 80022b8:	d80b      	bhi.n	80022d2 <_ZN3Pin9configPinEv+0x96>
        {
            this->pinNumber = this->pinNumber * 10 + pin2;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	8b9b      	ldrh	r3, [r3, #28]
 80022be:	461a      	mov	r2, r3
 80022c0:	0092      	lsls	r2, r2, #2
 80022c2:	4413      	add	r3, r2
 80022c4:	005b      	lsls	r3, r3, #1
 80022c6:	b29a      	uxth	r2, r3
 80022c8:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80022ca:	4413      	add	r3, r2
 80022cc:	b29a      	uxth	r2, r3
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	839a      	strh	r2, [r3, #28]
        }

        this->pin = 1 << this->pinNumber; // this is equivalent to GPIO_PIN_x definition
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	8b9b      	ldrh	r3, [r3, #28]
 80022d6:	461a      	mov	r2, r3
 80022d8:	2301      	movs	r3, #1
 80022da:	4093      	lsls	r3, r2
 80022dc:	b29a      	uxth	r2, r3
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	83da      	strh	r2, [r3, #30]
    {
        printf("  Invalid port and pin definition\n");
        return;
    }    

    printf("  port = GPIO%c\n", char('A' + this->portIndex));
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	7e9b      	ldrb	r3, [r3, #26]
 80022e6:	3341      	adds	r3, #65	@ 0x41
 80022e8:	b2db      	uxtb	r3, r3
 80022ea:	4619      	mov	r1, r3
 80022ec:	4840      	ldr	r0, [pc, #256]	@ (80023f0 <_ZN3Pin9configPinEv+0x1b4>)
 80022ee:	f01c fad9 	bl	801e8a4 <iprintf>
    printf("  pin = %d\n", this->pinNumber);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	8b9b      	ldrh	r3, [r3, #28]
 80022f6:	4619      	mov	r1, r3
 80022f8:	483e      	ldr	r0, [pc, #248]	@ (80023f4 <_ZN3Pin9configPinEv+0x1b8>)
 80022fa:	f01c fad3 	bl	801e8a4 <iprintf>

    // translate port index into something useful
    this->GPIOx = gpios[this->portIndex];
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	7e9b      	ldrb	r3, [r3, #26]
 8002302:	009b      	lsls	r3, r3, #2
 8002304:	3338      	adds	r3, #56	@ 0x38
 8002306:	443b      	add	r3, r7
 8002308:	f853 2c18 	ldr.w	r2, [r3, #-24]
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	62da      	str	r2, [r3, #44]	@ 0x2c

    // enable the peripheral clock
    switch (portIndex){
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	7e9b      	ldrb	r3, [r3, #26]
 8002314:	2b04      	cmp	r3, #4
 8002316:	d861      	bhi.n	80023dc <_ZN3Pin9configPinEv+0x1a0>
 8002318:	a201      	add	r2, pc, #4	@ (adr r2, 8002320 <_ZN3Pin9configPinEv+0xe4>)
 800231a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800231e:	bf00      	nop
 8002320:	0800233d 	.word	0x0800233d
 8002324:	0800235d 	.word	0x0800235d
 8002328:	0800237d 	.word	0x0800237d
 800232c:	0800239d 	.word	0x0800239d
 8002330:	080023bd 	.word	0x080023bd
        printf("  Invalid port and pin definition\n");
 8002334:	4830      	ldr	r0, [pc, #192]	@ (80023f8 <_ZN3Pin9configPinEv+0x1bc>)
 8002336:	f01c fb25 	bl	801e984 <puts>
 800233a:	e052      	b.n	80023e2 <_ZN3Pin9configPinEv+0x1a6>
        case 0:
            __HAL_RCC_GPIOA_CLK_ENABLE();
 800233c:	4b2f      	ldr	r3, [pc, #188]	@ (80023fc <_ZN3Pin9configPinEv+0x1c0>)
 800233e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002342:	4a2e      	ldr	r2, [pc, #184]	@ (80023fc <_ZN3Pin9configPinEv+0x1c0>)
 8002344:	f043 0301 	orr.w	r3, r3, #1
 8002348:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800234c:	4b2b      	ldr	r3, [pc, #172]	@ (80023fc <_ZN3Pin9configPinEv+0x1c0>)
 800234e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002352:	f003 0301 	and.w	r3, r3, #1
 8002356:	61fb      	str	r3, [r7, #28]
 8002358:	69fb      	ldr	r3, [r7, #28]
            break;
 800235a:	e03f      	b.n	80023dc <_ZN3Pin9configPinEv+0x1a0>

        case 1:
            __HAL_RCC_GPIOB_CLK_ENABLE();
 800235c:	4b27      	ldr	r3, [pc, #156]	@ (80023fc <_ZN3Pin9configPinEv+0x1c0>)
 800235e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002362:	4a26      	ldr	r2, [pc, #152]	@ (80023fc <_ZN3Pin9configPinEv+0x1c0>)
 8002364:	f043 0302 	orr.w	r3, r3, #2
 8002368:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800236c:	4b23      	ldr	r3, [pc, #140]	@ (80023fc <_ZN3Pin9configPinEv+0x1c0>)
 800236e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002372:	f003 0302 	and.w	r3, r3, #2
 8002376:	61bb      	str	r3, [r7, #24]
 8002378:	69bb      	ldr	r3, [r7, #24]
            break;
 800237a:	e02f      	b.n	80023dc <_ZN3Pin9configPinEv+0x1a0>

        case 2:
            __HAL_RCC_GPIOC_CLK_ENABLE();
 800237c:	4b1f      	ldr	r3, [pc, #124]	@ (80023fc <_ZN3Pin9configPinEv+0x1c0>)
 800237e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002382:	4a1e      	ldr	r2, [pc, #120]	@ (80023fc <_ZN3Pin9configPinEv+0x1c0>)
 8002384:	f043 0304 	orr.w	r3, r3, #4
 8002388:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800238c:	4b1b      	ldr	r3, [pc, #108]	@ (80023fc <_ZN3Pin9configPinEv+0x1c0>)
 800238e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002392:	f003 0304 	and.w	r3, r3, #4
 8002396:	617b      	str	r3, [r7, #20]
 8002398:	697b      	ldr	r3, [r7, #20]
            break;
 800239a:	e01f      	b.n	80023dc <_ZN3Pin9configPinEv+0x1a0>
        
        case 3:
            __HAL_RCC_GPIOD_CLK_ENABLE();
 800239c:	4b17      	ldr	r3, [pc, #92]	@ (80023fc <_ZN3Pin9configPinEv+0x1c0>)
 800239e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80023a2:	4a16      	ldr	r2, [pc, #88]	@ (80023fc <_ZN3Pin9configPinEv+0x1c0>)
 80023a4:	f043 0308 	orr.w	r3, r3, #8
 80023a8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80023ac:	4b13      	ldr	r3, [pc, #76]	@ (80023fc <_ZN3Pin9configPinEv+0x1c0>)
 80023ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80023b2:	f003 0308 	and.w	r3, r3, #8
 80023b6:	613b      	str	r3, [r7, #16]
 80023b8:	693b      	ldr	r3, [r7, #16]
            break;
 80023ba:	e00f      	b.n	80023dc <_ZN3Pin9configPinEv+0x1a0>

        case 4:
            __HAL_RCC_GPIOE_CLK_ENABLE();
 80023bc:	4b0f      	ldr	r3, [pc, #60]	@ (80023fc <_ZN3Pin9configPinEv+0x1c0>)
 80023be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80023c2:	4a0e      	ldr	r2, [pc, #56]	@ (80023fc <_ZN3Pin9configPinEv+0x1c0>)
 80023c4:	f043 0310 	orr.w	r3, r3, #16
 80023c8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80023cc:	4b0b      	ldr	r3, [pc, #44]	@ (80023fc <_ZN3Pin9configPinEv+0x1c0>)
 80023ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80023d2:	f003 0310 	and.w	r3, r3, #16
 80023d6:	60fb      	str	r3, [r7, #12]
 80023d8:	68fb      	ldr	r3, [r7, #12]
            break;
 80023da:	bf00      	nop
    }

    this->initPin();
 80023dc:	6878      	ldr	r0, [r7, #4]
 80023de:	f000 f80f 	bl	8002400 <_ZN3Pin7initPinEv>
}
 80023e2:	3738      	adds	r7, #56	@ 0x38
 80023e4:	46bd      	mov	sp, r7
 80023e6:	bdb0      	pop	{r4, r5, r7, pc}
 80023e8:	0801f754 	.word	0x0801f754
 80023ec:	0801f7a8 	.word	0x0801f7a8
 80023f0:	0801f788 	.word	0x0801f788
 80023f4:	0801f79c 	.word	0x0801f79c
 80023f8:	0801f764 	.word	0x0801f764
 80023fc:	58024400 	.word	0x58024400

08002400 <_ZN3Pin7initPinEv>:


void Pin::initPin()
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b082      	sub	sp, #8
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
    // Configure GPIO pin Output Level
    HAL_GPIO_WritePin(this->GPIOx, this->pin, GPIO_PIN_RESET);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	8bdb      	ldrh	r3, [r3, #30]
 8002410:	2200      	movs	r2, #0
 8002412:	4619      	mov	r1, r3
 8002414:	f012 f87a 	bl	801450c <HAL_GPIO_WritePin>

    // Configure the GPIO pin
    this->GPIO_InitStruct.Pin = this->pin;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	8bdb      	ldrh	r3, [r3, #30]
 800241c:	461a      	mov	r2, r3
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	631a      	str	r2, [r3, #48]	@ 0x30
    this->GPIO_InitStruct.Mode = this->mode;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6a1a      	ldr	r2, [r3, #32]
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	635a      	str	r2, [r3, #52]	@ 0x34
    this->GPIO_InitStruct.Pull = this->pull;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	639a      	str	r2, [r3, #56]	@ 0x38
    this->GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	2202      	movs	r2, #2
 8002436:	63da      	str	r2, [r3, #60]	@ 0x3c
    HAL_GPIO_Init(this->GPIOx, &this->GPIO_InitStruct);  
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	3330      	adds	r3, #48	@ 0x30
 8002440:	4619      	mov	r1, r3
 8002442:	4610      	mov	r0, r2
 8002444:	f011 feb2 	bl	80141ac <HAL_GPIO_Init>
}
 8002448:	bf00      	nop
 800244a:	3708      	adds	r7, #8
 800244c:	46bd      	mov	sp, r7
 800244e:	bd80      	pop	{r7, pc}

08002450 <_ZN9InterruptC1Ev>:

// Define the vector table, it is only declared in the class declaration
Interrupt* Interrupt::ISRVectorTable[] = {0};

// Constructor
Interrupt::Interrupt(void){}
 8002450:	b480      	push	{r7}
 8002452:	b083      	sub	sp, #12
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
 8002458:	4a04      	ldr	r2, [pc, #16]	@ (800246c <_ZN9InterruptC1Ev+0x1c>)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	601a      	str	r2, [r3, #0]
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	4618      	mov	r0, r3
 8002462:	370c      	adds	r7, #12
 8002464:	46bd      	mov	sp, r7
 8002466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246a:	4770      	bx	lr
 800246c:	08020474 	.word	0x08020474

08002470 <_ZN9Interrupt8RegisterEiPS_>:


// Methods

void Interrupt::Register(int interruptNumber, Interrupt* intThisPtr)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b082      	sub	sp, #8
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
 8002478:	6039      	str	r1, [r7, #0]
	printf("Registering interrupt for interrupt number = %d\n", interruptNumber);
 800247a:	6879      	ldr	r1, [r7, #4]
 800247c:	4805      	ldr	r0, [pc, #20]	@ (8002494 <_ZN9Interrupt8RegisterEiPS_+0x24>)
 800247e:	f01c fa11 	bl	801e8a4 <iprintf>
	ISRVectorTable[interruptNumber] = intThisPtr;
 8002482:	4905      	ldr	r1, [pc, #20]	@ (8002498 <_ZN9Interrupt8RegisterEiPS_+0x28>)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	683a      	ldr	r2, [r7, #0]
 8002488:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800248c:	bf00      	nop
 800248e:	3708      	adds	r7, #8
 8002490:	46bd      	mov	sp, r7
 8002492:	bd80      	pop	{r7, pc}
 8002494:	0801f7bc 	.word	0x0801f7bc
 8002498:	240000b8 	.word	0x240000b8

0800249c <_ZN9Interrupt13EXTI4_WrapperEv>:

void Interrupt::EXTI4_Wrapper(void)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	af00      	add	r7, sp, #0
	ISRVectorTable[EXTI4_IRQn]->ISR_Handler();
 80024a0:	4b04      	ldr	r3, [pc, #16]	@ (80024b4 <_ZN9Interrupt13EXTI4_WrapperEv+0x18>)
 80024a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	4a02      	ldr	r2, [pc, #8]	@ (80024b4 <_ZN9Interrupt13EXTI4_WrapperEv+0x18>)
 80024aa:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80024ac:	4610      	mov	r0, r2
 80024ae:	4798      	blx	r3
}
 80024b0:	bf00      	nop
 80024b2:	bd80      	pop	{r7, pc}
 80024b4:	240000b8 	.word	0x240000b8

080024b8 <_ZN9Interrupt20DMA1_Stream0_WrapperEv>:

void Interrupt::DMA1_Stream0_Wrapper(void)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	af00      	add	r7, sp, #0
	ISRVectorTable[DMA1_Stream0_IRQn]->ISR_Handler();
 80024bc:	4b04      	ldr	r3, [pc, #16]	@ (80024d0 <_ZN9Interrupt20DMA1_Stream0_WrapperEv+0x18>)
 80024be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	4a02      	ldr	r2, [pc, #8]	@ (80024d0 <_ZN9Interrupt20DMA1_Stream0_WrapperEv+0x18>)
 80024c6:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80024c8:	4610      	mov	r0, r2
 80024ca:	4798      	blx	r3
}
 80024cc:	bf00      	nop
 80024ce:	bd80      	pop	{r7, pc}
 80024d0:	240000b8 	.word	0x240000b8

080024d4 <_ZN9Interrupt20DMA1_Stream1_WrapperEv>:

void Interrupt::DMA1_Stream1_Wrapper(void)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	af00      	add	r7, sp, #0
	ISRVectorTable[DMA1_Stream1_IRQn]->ISR_Handler();
 80024d8:	4b04      	ldr	r3, [pc, #16]	@ (80024ec <_ZN9Interrupt20DMA1_Stream1_WrapperEv+0x18>)
 80024da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	4a02      	ldr	r2, [pc, #8]	@ (80024ec <_ZN9Interrupt20DMA1_Stream1_WrapperEv+0x18>)
 80024e2:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80024e4:	4610      	mov	r0, r2
 80024e6:	4798      	blx	r3
}
 80024e8:	bf00      	nop
 80024ea:	bd80      	pop	{r7, pc}
 80024ec:	240000b8 	.word	0x240000b8

080024f0 <_ZN9Interrupt12TIM2_WrapperEv>:


void Interrupt::TIM2_Wrapper(void)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	af00      	add	r7, sp, #0
	ISRVectorTable[TIM2_IRQn]->ISR_Handler();
 80024f4:	4b04      	ldr	r3, [pc, #16]	@ (8002508 <_ZN9Interrupt12TIM2_WrapperEv+0x18>)
 80024f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4a02      	ldr	r2, [pc, #8]	@ (8002508 <_ZN9Interrupt12TIM2_WrapperEv+0x18>)
 80024fe:	6f12      	ldr	r2, [r2, #112]	@ 0x70
 8002500:	4610      	mov	r0, r2
 8002502:	4798      	blx	r3
}
 8002504:	bf00      	nop
 8002506:	bd80      	pop	{r7, pc}
 8002508:	240000b8 	.word	0x240000b8

0800250c <_ZN9Interrupt12TIM3_WrapperEv>:

void Interrupt::TIM3_Wrapper(void)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	af00      	add	r7, sp, #0
	ISRVectorTable[TIM3_IRQn]->ISR_Handler();
 8002510:	4b04      	ldr	r3, [pc, #16]	@ (8002524 <_ZN9Interrupt12TIM3_WrapperEv+0x18>)
 8002512:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	4a02      	ldr	r2, [pc, #8]	@ (8002524 <_ZN9Interrupt12TIM3_WrapperEv+0x18>)
 800251a:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800251c:	4610      	mov	r0, r2
 800251e:	4798      	blx	r3
}
 8002520:	bf00      	nop
 8002522:	bd80      	pop	{r7, pc}
 8002524:	240000b8 	.word	0x240000b8

08002528 <_ZN9Interrupt12TIM4_WrapperEv>:

void Interrupt::TIM4_Wrapper(void)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	af00      	add	r7, sp, #0
	ISRVectorTable[TIM4_IRQn]->ISR_Handler();
 800252c:	4b04      	ldr	r3, [pc, #16]	@ (8002540 <_ZN9Interrupt12TIM4_WrapperEv+0x18>)
 800252e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	4a02      	ldr	r2, [pc, #8]	@ (8002540 <_ZN9Interrupt12TIM4_WrapperEv+0x18>)
 8002536:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 8002538:	4610      	mov	r0, r2
 800253a:	4798      	blx	r3
}
 800253c:	bf00      	nop
 800253e:	bd80      	pop	{r7, pc}
 8002540:	240000b8 	.word	0x240000b8

08002544 <_ZSt23__is_constant_evaluatedv>:
  // This can be used without checking if the compiler supports the feature.
  // The macro _GLIBCXX_HAVE_IS_CONSTANT_EVALUATED can be used to check if
  // the compiler support is present to make this function work as expected.
  _GLIBCXX_CONSTEXPR inline bool
  __is_constant_evaluated() _GLIBCXX_NOEXCEPT
  {
 8002544:	b480      	push	{r7}
 8002546:	af00      	add	r7, sp, #0
#if __cpp_if_consteval >= 202106L
# define _GLIBCXX_HAVE_IS_CONSTANT_EVALUATED 1
    if consteval { return true; } else { return false; }
#elif __cplusplus >= 201103L && __has_builtin(__builtin_is_constant_evaluated)
# define _GLIBCXX_HAVE_IS_CONSTANT_EVALUATED 1
    return __builtin_is_constant_evaluated();
 8002548:	2300      	movs	r3, #0
#else
    return false;
#endif
  }
 800254a:	4618      	mov	r0, r3
 800254c:	46bd      	mov	sp, r7
 800254e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002552:	4770      	bx	lr

08002554 <_ZNSt11char_traitsIcE6lengthEPKc>:
#endif
	return __builtin_memcmp(__s1, __s2, __n);
      }

      static _GLIBCXX17_CONSTEXPR size_t
      length(const char_type* __s)
 8002554:	b580      	push	{r7, lr}
 8002556:	b082      	sub	sp, #8
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
      {
#if __cplusplus >= 201703L
	if (std::__is_constant_evaluated())
 800255c:	f7ff fff2 	bl	8002544 <_ZSt23__is_constant_evaluatedv>
 8002560:	4603      	mov	r3, r0
 8002562:	2b00      	cmp	r3, #0
 8002564:	d004      	beq.n	8002570 <_ZNSt11char_traitsIcE6lengthEPKc+0x1c>
	  return __gnu_cxx::char_traits<char_type>::length(__s);
 8002566:	6878      	ldr	r0, [r7, #4]
 8002568:	f002 f948 	bl	80047fc <_ZN9__gnu_cxx11char_traitsIcE6lengthEPKc>
 800256c:	4603      	mov	r3, r0
 800256e:	e004      	b.n	800257a <_ZNSt11char_traitsIcE6lengthEPKc+0x26>
#endif
	return __builtin_strlen(__s);
 8002570:	6878      	ldr	r0, [r7, #4]
 8002572:	f7fd ff15 	bl	80003a0 <strlen>
 8002576:	4603      	mov	r3, r0
 8002578:	bf00      	nop
      }
 800257a:	4618      	mov	r0, r3
 800257c:	3708      	adds	r7, #8
 800257e:	46bd      	mov	sp, r7
 8002580:	bd80      	pop	{r7, pc}

08002582 <_ZN11ArduinoJson8V730HB226detail16DefaultAllocator8allocateEj>:
};

namespace detail {
class DefaultAllocator : public Allocator {
 public:
  void* allocate(size_t size) override {
 8002582:	b580      	push	{r7, lr}
 8002584:	b082      	sub	sp, #8
 8002586:	af00      	add	r7, sp, #0
 8002588:	6078      	str	r0, [r7, #4]
 800258a:	6039      	str	r1, [r7, #0]
    return malloc(size);
 800258c:	6838      	ldr	r0, [r7, #0]
 800258e:	f01b ffd3 	bl	801e538 <malloc>
 8002592:	4603      	mov	r3, r0
  }
 8002594:	4618      	mov	r0, r3
 8002596:	3708      	adds	r7, #8
 8002598:	46bd      	mov	sp, r7
 800259a:	bd80      	pop	{r7, pc}

0800259c <_ZN11ArduinoJson8V730HB226detail16DefaultAllocator10deallocateEPv>:

  void deallocate(void* ptr) override {
 800259c:	b580      	push	{r7, lr}
 800259e:	b082      	sub	sp, #8
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
 80025a4:	6039      	str	r1, [r7, #0]
    free(ptr);
 80025a6:	6838      	ldr	r0, [r7, #0]
 80025a8:	f01b ffce 	bl	801e548 <free>
  }
 80025ac:	bf00      	nop
 80025ae:	3708      	adds	r7, #8
 80025b0:	46bd      	mov	sp, r7
 80025b2:	bd80      	pop	{r7, pc}

080025b4 <_ZN11ArduinoJson8V730HB226detail16DefaultAllocator10reallocateEPvj>:

  void* reallocate(void* ptr, size_t new_size) override {
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b084      	sub	sp, #16
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	60f8      	str	r0, [r7, #12]
 80025bc:	60b9      	str	r1, [r7, #8]
 80025be:	607a      	str	r2, [r7, #4]
    return realloc(ptr, new_size);
 80025c0:	6879      	ldr	r1, [r7, #4]
 80025c2:	68b8      	ldr	r0, [r7, #8]
 80025c4:	f01c f876 	bl	801e6b4 <realloc>
 80025c8:	4603      	mov	r3, r0
  }
 80025ca:	4618      	mov	r0, r3
 80025cc:	3710      	adds	r7, #16
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bd80      	pop	{r7, pc}
	...

080025d4 <_ZN11ArduinoJson8V730HB226detail16DefaultAllocator8instanceEv>:

  static Allocator* instance() {
 80025d4:	b480      	push	{r7}
 80025d6:	af00      	add	r7, sp, #0
    static DefaultAllocator allocator;
    return &allocator;
 80025d8:	4b02      	ldr	r3, [pc, #8]	@ (80025e4 <_ZN11ArduinoJson8V730HB226detail16DefaultAllocator8instanceEv+0x10>)
  }
 80025da:	4618      	mov	r0, r3
 80025dc:	46bd      	mov	sp, r7
 80025de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e2:	4770      	bx	lr
 80025e4:	24000000 	.word	0x24000000

080025e8 <_ZN11ArduinoJson8V730HB226detail10StringNode13sizeForLengthEj>:
  length_type length;
  char data[1];

  static constexpr size_t maxLength = numeric_limits<length_type>::highest();

  static constexpr size_t sizeForLength(size_t n) {
 80025e8:	b480      	push	{r7}
 80025ea:	b083      	sub	sp, #12
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
    return n + 1 + offsetof(StringNode, data);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	3309      	adds	r3, #9
  }
 80025f4:	4618      	mov	r0, r3
 80025f6:	370c      	adds	r7, #12
 80025f8:	46bd      	mov	sp, r7
 80025fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fe:	4770      	bx	lr

08002600 <_ZN11ArduinoJson8V730HB226detail10StringNode6createEjPNS0_9AllocatorE>:

  static StringNode* create(size_t length, Allocator* allocator) {
 8002600:	b580      	push	{r7, lr}
 8002602:	b084      	sub	sp, #16
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
 8002608:	6039      	str	r1, [r7, #0]
    if (length > maxLength)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002610:	d301      	bcc.n	8002616 <_ZN11ArduinoJson8V730HB226detail10StringNode6createEjPNS0_9AllocatorE+0x16>
      return nullptr;
 8002612:	2300      	movs	r3, #0
 8002614:	e01b      	b.n	800264e <_ZN11ArduinoJson8V730HB226detail10StringNode6createEjPNS0_9AllocatorE+0x4e>
    auto size = sizeForLength(length);
 8002616:	6878      	ldr	r0, [r7, #4]
 8002618:	f7ff ffe6 	bl	80025e8 <_ZN11ArduinoJson8V730HB226detail10StringNode13sizeForLengthEj>
 800261c:	60f8      	str	r0, [r7, #12]
    if (size < length)  // integer overflow
 800261e:	68fa      	ldr	r2, [r7, #12]
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	429a      	cmp	r2, r3
 8002624:	d201      	bcs.n	800262a <_ZN11ArduinoJson8V730HB226detail10StringNode6createEjPNS0_9AllocatorE+0x2a>
      return nullptr;   // (not testable on 64-bit)
 8002626:	2300      	movs	r3, #0
 8002628:	e011      	b.n	800264e <_ZN11ArduinoJson8V730HB226detail10StringNode6createEjPNS0_9AllocatorE+0x4e>
    auto node = reinterpret_cast<StringNode*>(allocator->allocate(size));
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	68f9      	ldr	r1, [r7, #12]
 8002632:	6838      	ldr	r0, [r7, #0]
 8002634:	4798      	blx	r3
 8002636:	60b8      	str	r0, [r7, #8]
    if (node) {
 8002638:	68bb      	ldr	r3, [r7, #8]
 800263a:	2b00      	cmp	r3, #0
 800263c:	d006      	beq.n	800264c <_ZN11ArduinoJson8V730HB226detail10StringNode6createEjPNS0_9AllocatorE+0x4c>
      node->length = length_type(length);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	b29a      	uxth	r2, r3
 8002642:	68bb      	ldr	r3, [r7, #8]
 8002644:	80da      	strh	r2, [r3, #6]
      node->references = 1;
 8002646:	68bb      	ldr	r3, [r7, #8]
 8002648:	2201      	movs	r2, #1
 800264a:	809a      	strh	r2, [r3, #4]
    }
    return node;
 800264c:	68bb      	ldr	r3, [r7, #8]
  }
 800264e:	4618      	mov	r0, r3
 8002650:	3710      	adds	r7, #16
 8002652:	46bd      	mov	sp, r7
 8002654:	bd80      	pop	{r7, pc}

08002656 <_ZN11ArduinoJson8V730HB226detail10StringNode6resizeEPS2_jPNS0_9AllocatorE>:

  static StringNode* resize(StringNode* node, size_t length,
 8002656:	b5b0      	push	{r4, r5, r7, lr}
 8002658:	b086      	sub	sp, #24
 800265a:	af00      	add	r7, sp, #0
 800265c:	60f8      	str	r0, [r7, #12]
 800265e:	60b9      	str	r1, [r7, #8]
 8002660:	607a      	str	r2, [r7, #4]
                            Allocator* allocator) {
    ARDUINOJSON_ASSERT(node != nullptr);
    StringNode* newNode;
    if (length <= maxLength)
 8002662:	68bb      	ldr	r3, [r7, #8]
 8002664:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002668:	d20e      	bcs.n	8002688 <_ZN11ArduinoJson8V730HB226detail10StringNode6resizeEPS2_jPNS0_9AllocatorE+0x32>
      newNode = reinterpret_cast<StringNode*>(
          allocator->reallocate(node, sizeForLength(length)));
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	3308      	adds	r3, #8
 8002670:	681c      	ldr	r4, [r3, #0]
 8002672:	687d      	ldr	r5, [r7, #4]
 8002674:	68b8      	ldr	r0, [r7, #8]
 8002676:	f7ff ffb7 	bl	80025e8 <_ZN11ArduinoJson8V730HB226detail10StringNode13sizeForLengthEj>
 800267a:	4603      	mov	r3, r0
 800267c:	461a      	mov	r2, r3
 800267e:	68f9      	ldr	r1, [r7, #12]
 8002680:	4628      	mov	r0, r5
 8002682:	47a0      	blx	r4
 8002684:	6178      	str	r0, [r7, #20]
 8002686:	e001      	b.n	800268c <_ZN11ArduinoJson8V730HB226detail10StringNode6resizeEPS2_jPNS0_9AllocatorE+0x36>
    else
      newNode = nullptr;
 8002688:	2300      	movs	r3, #0
 800268a:	617b      	str	r3, [r7, #20]
    if (newNode)
 800268c:	697b      	ldr	r3, [r7, #20]
 800268e:	2b00      	cmp	r3, #0
 8002690:	d004      	beq.n	800269c <_ZN11ArduinoJson8V730HB226detail10StringNode6resizeEPS2_jPNS0_9AllocatorE+0x46>
      newNode->length = length_type(length);
 8002692:	68bb      	ldr	r3, [r7, #8]
 8002694:	b29a      	uxth	r2, r3
 8002696:	697b      	ldr	r3, [r7, #20]
 8002698:	80da      	strh	r2, [r3, #6]
 800269a:	e006      	b.n	80026aa <_ZN11ArduinoJson8V730HB226detail10StringNode6resizeEPS2_jPNS0_9AllocatorE+0x54>
    else
      allocator->deallocate(node);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	3304      	adds	r3, #4
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	68f9      	ldr	r1, [r7, #12]
 80026a6:	6878      	ldr	r0, [r7, #4]
 80026a8:	4798      	blx	r3
    return newNode;
 80026aa:	697b      	ldr	r3, [r7, #20]
  }
 80026ac:	4618      	mov	r0, r3
 80026ae:	3718      	adds	r7, #24
 80026b0:	46bd      	mov	sp, r7
 80026b2:	bdb0      	pop	{r4, r5, r7, pc}

080026b4 <_ZN11ArduinoJson8V730HB226detail10StringNode7destroyEPS2_PNS0_9AllocatorE>:

  static void destroy(StringNode* node, Allocator* allocator) {
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b082      	sub	sp, #8
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
 80026bc:	6039      	str	r1, [r7, #0]
    allocator->deallocate(node);
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	3304      	adds	r3, #4
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	6879      	ldr	r1, [r7, #4]
 80026c8:	6838      	ldr	r0, [r7, #0]
 80026ca:	4798      	blx	r3
  }
 80026cc:	bf00      	nop
 80026ce:	3708      	adds	r7, #8
 80026d0:	46bd      	mov	sp, r7
 80026d2:	bd80      	pop	{r7, pc}

080026d4 <_ZN11ArduinoJson8V730HB226detail9RamStringC1EPKcjb>:
  RamString(const char* str, size_t sz, bool isStatic = false)
 80026d4:	b480      	push	{r7}
 80026d6:	b085      	sub	sp, #20
 80026d8:	af00      	add	r7, sp, #0
 80026da:	60f8      	str	r0, [r7, #12]
 80026dc:	60b9      	str	r1, [r7, #8]
 80026de:	607a      	str	r2, [r7, #4]
 80026e0:	70fb      	strb	r3, [r7, #3]
      : str_(str), size_(sz & sizeMask), static_(isStatic) {
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	68ba      	ldr	r2, [r7, #8]
 80026e6:	601a      	str	r2, [r3, #0]
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	687a      	ldr	r2, [r7, #4]
 80026ec:	605a      	str	r2, [r3, #4]
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	78fa      	ldrb	r2, [r7, #3]
 80026f2:	721a      	strb	r2, [r3, #8]
  }
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	4618      	mov	r0, r3
 80026f8:	3714      	adds	r7, #20
 80026fa:	46bd      	mov	sp, r7
 80026fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002700:	4770      	bx	lr

08002702 <_ZNK11ArduinoJson8V730HB226detail9RamString6isNullEv>:
  bool isNull() const {
 8002702:	b480      	push	{r7}
 8002704:	b083      	sub	sp, #12
 8002706:	af00      	add	r7, sp, #0
 8002708:	6078      	str	r0, [r7, #4]
    return !str_;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	2b00      	cmp	r3, #0
 8002710:	bf0c      	ite	eq
 8002712:	2301      	moveq	r3, #1
 8002714:	2300      	movne	r3, #0
 8002716:	b2db      	uxtb	r3, r3
  }
 8002718:	4618      	mov	r0, r3
 800271a:	370c      	adds	r7, #12
 800271c:	46bd      	mov	sp, r7
 800271e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002722:	4770      	bx	lr

08002724 <_ZNK11ArduinoJson8V730HB226detail9RamString4sizeEv>:
  size_t size() const {
 8002724:	b480      	push	{r7}
 8002726:	b083      	sub	sp, #12
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
    return size_;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	685b      	ldr	r3, [r3, #4]
  }
 8002730:	4618      	mov	r0, r3
 8002732:	370c      	adds	r7, #12
 8002734:	46bd      	mov	sp, r7
 8002736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273a:	4770      	bx	lr

0800273c <_ZNK11ArduinoJson8V730HB226detail9RamString4dataEv>:

  const char* data() const {
 800273c:	b480      	push	{r7}
 800273e:	b083      	sub	sp, #12
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
    return str_;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
  }
 8002748:	4618      	mov	r0, r3
 800274a:	370c      	adds	r7, #12
 800274c:	46bd      	mov	sp, r7
 800274e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002752:	4770      	bx	lr

08002754 <_ZN11ArduinoJson8V730HB226detail10StringPool5clearEPNS0_9AllocatorE>:

  friend void swap(StringPool& a, StringPool& b) {
    swap_(a.strings_, b.strings_);
  }

  void clear(Allocator* allocator) {
 8002754:	b580      	push	{r7, lr}
 8002756:	b084      	sub	sp, #16
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
 800275c:	6039      	str	r1, [r7, #0]
    while (strings_) {
 800275e:	e00a      	b.n	8002776 <_ZN11ArduinoJson8V730HB226detail10StringPool5clearEPNS0_9AllocatorE+0x22>
      auto node = strings_;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	60fb      	str	r3, [r7, #12]
      strings_ = node->next;
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	681a      	ldr	r2, [r3, #0]
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	601a      	str	r2, [r3, #0]
      StringNode::destroy(node, allocator);
 800276e:	6839      	ldr	r1, [r7, #0]
 8002770:	68f8      	ldr	r0, [r7, #12]
 8002772:	f7ff ff9f 	bl	80026b4 <_ZN11ArduinoJson8V730HB226detail10StringNode7destroyEPS2_PNS0_9AllocatorE>
    while (strings_) {
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	2b00      	cmp	r3, #0
 800277c:	d1f0      	bne.n	8002760 <_ZN11ArduinoJson8V730HB226detail10StringPool5clearEPNS0_9AllocatorE+0xc>
    }
  }
 800277e:	bf00      	nop
 8002780:	bf00      	nop
 8002782:	3710      	adds	r7, #16
 8002784:	46bd      	mov	sp, r7
 8002786:	bd80      	pop	{r7, pc}

08002788 <_ZN11ArduinoJson8V730HB226detail10StringPool3addEPNS1_10StringNodeE>:
    node->data[n] = 0;  // force NUL terminator
    add(node);
    return node;
  }

  void add(StringNode* node) {
 8002788:	b480      	push	{r7}
 800278a:	b083      	sub	sp, #12
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
 8002790:	6039      	str	r1, [r7, #0]
    ARDUINOJSON_ASSERT(node != nullptr);
    node->next = strings_;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681a      	ldr	r2, [r3, #0]
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	601a      	str	r2, [r3, #0]
    strings_ = node;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	683a      	ldr	r2, [r7, #0]
 800279e:	601a      	str	r2, [r3, #0]
  }
 80027a0:	bf00      	nop
 80027a2:	370c      	adds	r7, #12
 80027a4:	46bd      	mov	sp, r7
 80027a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027aa:	4770      	bx	lr

080027ac <_ZN11ArduinoJson8V730HB226detail10StringPool11dereferenceEPKcPNS0_9AllocatorE>:
        return node;
    }
    return nullptr;
  }

  void dereference(const char* s, Allocator* allocator) {
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b086      	sub	sp, #24
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	60f8      	str	r0, [r7, #12]
 80027b4:	60b9      	str	r1, [r7, #8]
 80027b6:	607a      	str	r2, [r7, #4]
    StringNode* prev = nullptr;
 80027b8:	2300      	movs	r3, #0
 80027ba:	617b      	str	r3, [r7, #20]
    for (auto node = strings_; node; node = node->next) {
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	613b      	str	r3, [r7, #16]
 80027c2:	e029      	b.n	8002818 <_ZN11ArduinoJson8V730HB226detail10StringPool11dereferenceEPKcPNS0_9AllocatorE+0x6c>
      if (node->data == s) {
 80027c4:	693b      	ldr	r3, [r7, #16]
 80027c6:	3308      	adds	r3, #8
 80027c8:	68ba      	ldr	r2, [r7, #8]
 80027ca:	429a      	cmp	r2, r3
 80027cc:	d11f      	bne.n	800280e <_ZN11ArduinoJson8V730HB226detail10StringPool11dereferenceEPKcPNS0_9AllocatorE+0x62>
        if (--node->references == 0) {
 80027ce:	693b      	ldr	r3, [r7, #16]
 80027d0:	889b      	ldrh	r3, [r3, #4]
 80027d2:	3b01      	subs	r3, #1
 80027d4:	b29a      	uxth	r2, r3
 80027d6:	693b      	ldr	r3, [r7, #16]
 80027d8:	809a      	strh	r2, [r3, #4]
 80027da:	693b      	ldr	r3, [r7, #16]
 80027dc:	889b      	ldrh	r3, [r3, #4]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	bf0c      	ite	eq
 80027e2:	2301      	moveq	r3, #1
 80027e4:	2300      	movne	r3, #0
 80027e6:	b2db      	uxtb	r3, r3
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d019      	beq.n	8002820 <_ZN11ArduinoJson8V730HB226detail10StringPool11dereferenceEPKcPNS0_9AllocatorE+0x74>
          if (prev)
 80027ec:	697b      	ldr	r3, [r7, #20]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d004      	beq.n	80027fc <_ZN11ArduinoJson8V730HB226detail10StringPool11dereferenceEPKcPNS0_9AllocatorE+0x50>
            prev->next = node->next;
 80027f2:	693b      	ldr	r3, [r7, #16]
 80027f4:	681a      	ldr	r2, [r3, #0]
 80027f6:	697b      	ldr	r3, [r7, #20]
 80027f8:	601a      	str	r2, [r3, #0]
 80027fa:	e003      	b.n	8002804 <_ZN11ArduinoJson8V730HB226detail10StringPool11dereferenceEPKcPNS0_9AllocatorE+0x58>
          else
            strings_ = node->next;
 80027fc:	693b      	ldr	r3, [r7, #16]
 80027fe:	681a      	ldr	r2, [r3, #0]
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	601a      	str	r2, [r3, #0]
          StringNode::destroy(node, allocator);
 8002804:	6879      	ldr	r1, [r7, #4]
 8002806:	6938      	ldr	r0, [r7, #16]
 8002808:	f7ff ff54 	bl	80026b4 <_ZN11ArduinoJson8V730HB226detail10StringNode7destroyEPS2_PNS0_9AllocatorE>
        }
        return;
 800280c:	e008      	b.n	8002820 <_ZN11ArduinoJson8V730HB226detail10StringPool11dereferenceEPKcPNS0_9AllocatorE+0x74>
      }
      prev = node;
 800280e:	693b      	ldr	r3, [r7, #16]
 8002810:	617b      	str	r3, [r7, #20]
    for (auto node = strings_; node; node = node->next) {
 8002812:	693b      	ldr	r3, [r7, #16]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	613b      	str	r3, [r7, #16]
 8002818:	693b      	ldr	r3, [r7, #16]
 800281a:	2b00      	cmp	r3, #0
 800281c:	d1d2      	bne.n	80027c4 <_ZN11ArduinoJson8V730HB226detail10StringPool11dereferenceEPKcPNS0_9AllocatorE+0x18>
 800281e:	e000      	b.n	8002822 <_ZN11ArduinoJson8V730HB226detail10StringPool11dereferenceEPKcPNS0_9AllocatorE+0x76>
        return;
 8002820:	bf00      	nop
    }
  }
 8002822:	3718      	adds	r7, #24
 8002824:	46bd      	mov	sp, r7
 8002826:	bd80      	pop	{r7, pc}

08002828 <_ZN11ArduinoJson8V730HB2210JsonStringC1Ev>:
// https://arduinojson.org/v7/api/jsonstring/
class JsonString {
  friend struct detail::StringAdapter<JsonString>;

 public:
  JsonString() : str_(nullptr, 0, true) {}
 8002828:	b580      	push	{r7, lr}
 800282a:	b082      	sub	sp, #8
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
 8002830:	6878      	ldr	r0, [r7, #4]
 8002832:	2301      	movs	r3, #1
 8002834:	2200      	movs	r2, #0
 8002836:	2100      	movs	r1, #0
 8002838:	f7ff ff4c 	bl	80026d4 <_ZN11ArduinoJson8V730HB226detail9RamStringC1EPKcjb>
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	4618      	mov	r0, r3
 8002840:	3708      	adds	r7, #8
 8002842:	46bd      	mov	sp, r7
 8002844:	bd80      	pop	{r7, pc}

08002846 <_ZN11ArduinoJson8V730HB2210JsonStringC1EPKcb>:

  JsonString(const char* data, bool isStatic = false)
 8002846:	b590      	push	{r4, r7, lr}
 8002848:	b085      	sub	sp, #20
 800284a:	af00      	add	r7, sp, #0
 800284c:	60f8      	str	r0, [r7, #12]
 800284e:	60b9      	str	r1, [r7, #8]
 8002850:	4613      	mov	r3, r2
 8002852:	71fb      	strb	r3, [r7, #7]
      : str_(data, data ? ::strlen(data) : 0, isStatic) {}
 8002854:	68fc      	ldr	r4, [r7, #12]
 8002856:	68bb      	ldr	r3, [r7, #8]
 8002858:	2b00      	cmp	r3, #0
 800285a:	d004      	beq.n	8002866 <_ZN11ArduinoJson8V730HB2210JsonStringC1EPKcb+0x20>
 800285c:	68b8      	ldr	r0, [r7, #8]
 800285e:	f7fd fd9f 	bl	80003a0 <strlen>
 8002862:	4602      	mov	r2, r0
 8002864:	e000      	b.n	8002868 <_ZN11ArduinoJson8V730HB2210JsonStringC1EPKcb+0x22>
 8002866:	2200      	movs	r2, #0
 8002868:	79fb      	ldrb	r3, [r7, #7]
 800286a:	68b9      	ldr	r1, [r7, #8]
 800286c:	4620      	mov	r0, r4
 800286e:	f7ff ff31 	bl	80026d4 <_ZN11ArduinoJson8V730HB226detail9RamStringC1EPKcjb>
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	4618      	mov	r0, r3
 8002876:	3714      	adds	r7, #20
 8002878:	46bd      	mov	sp, r7
 800287a:	bd90      	pop	{r4, r7, pc}

0800287c <_ZNK11ArduinoJson8V730HB2210JsonString5c_strEv>:
                                int> = 0>
  JsonString(const char* data, TSize sz, bool isStatic = false)
      : str_(data, size_t(sz), isStatic) {}

  // Returns a pointer to the characters.
  const char* c_str() const {
 800287c:	b580      	push	{r7, lr}
 800287e:	b082      	sub	sp, #8
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
    return str_.data();
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	4618      	mov	r0, r3
 8002888:	f7ff ff58 	bl	800273c <_ZNK11ArduinoJson8V730HB226detail9RamString4dataEv>
 800288c:	4603      	mov	r3, r0
  }
 800288e:	4618      	mov	r0, r3
 8002890:	3708      	adds	r7, #8
 8002892:	46bd      	mov	sp, r7
 8002894:	bd80      	pop	{r7, pc}

08002896 <_ZN11ArduinoJson8V730HB226detail13StringAdapterINS0_10JsonStringEvE5adaptERKS3_>:
namespace detail {
template <>
struct StringAdapter<JsonString> {
  using AdaptedString = RamString;

  static const AdaptedString& adapt(const JsonString& s) {
 8002896:	b480      	push	{r7}
 8002898:	b083      	sub	sp, #12
 800289a:	af00      	add	r7, sp, #0
 800289c:	6078      	str	r0, [r7, #4]
    return s.str_;
 800289e:	687b      	ldr	r3, [r7, #4]
  }
 80028a0:	4618      	mov	r0, r3
 80028a2:	370c      	adds	r7, #12
 80028a4:	46bd      	mov	sp, r7
 80028a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028aa:	4770      	bx	lr

080028ac <_ZN11ArduinoJson8V730HB226detail18CollectionIteratorC1Ev>:

class CollectionIterator {
  friend class CollectionData;

 public:
  CollectionIterator() : slot_(nullptr), currentId_(NULL_SLOT) {}
 80028ac:	b480      	push	{r7}
 80028ae:	b083      	sub	sp, #12
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2200      	movs	r2, #0
 80028b8:	601a      	str	r2, [r3, #0]
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80028c0:	809a      	strh	r2, [r3, #4]
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	4618      	mov	r0, r3
 80028c6:	370c      	adds	r7, #12
 80028c8:	46bd      	mov	sp, r7
 80028ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ce:	4770      	bx	lr

080028d0 <_ZNK11ArduinoJson8V730HB226detail18CollectionIterator4doneEv>:

  void next(const ResourceManager* resources);

  bool done() const {
 80028d0:	b480      	push	{r7}
 80028d2:	b083      	sub	sp, #12
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
    return slot_ == nullptr;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	2b00      	cmp	r3, #0
 80028de:	bf0c      	ite	eq
 80028e0:	2301      	moveq	r3, #1
 80028e2:	2300      	movne	r3, #0
 80028e4:	b2db      	uxtb	r3, r3
  }
 80028e6:	4618      	mov	r0, r3
 80028e8:	370c      	adds	r7, #12
 80028ea:	46bd      	mov	sp, r7
 80028ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f0:	4770      	bx	lr

080028f2 <_ZNK11ArduinoJson8V730HB226detail18CollectionIteratorneERKS2_>:

  bool operator==(const CollectionIterator& other) const {
    return slot_ == other.slot_;
  }

  bool operator!=(const CollectionIterator& other) const {
 80028f2:	b480      	push	{r7}
 80028f4:	b083      	sub	sp, #12
 80028f6:	af00      	add	r7, sp, #0
 80028f8:	6078      	str	r0, [r7, #4]
 80028fa:	6039      	str	r1, [r7, #0]
    return slot_ != other.slot_;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681a      	ldr	r2, [r3, #0]
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	429a      	cmp	r2, r3
 8002906:	bf14      	ite	ne
 8002908:	2301      	movne	r3, #1
 800290a:	2300      	moveq	r3, #0
 800290c:	b2db      	uxtb	r3, r3
  }
 800290e:	4618      	mov	r0, r3
 8002910:	370c      	adds	r7, #12
 8002912:	46bd      	mov	sp, r7
 8002914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002918:	4770      	bx	lr

0800291a <_ZN11ArduinoJson8V730HB226detail18CollectionIteratorptEv>:

  VariantData* operator->() {
 800291a:	b580      	push	{r7, lr}
 800291c:	b082      	sub	sp, #8
 800291e:	af00      	add	r7, sp, #0
 8002920:	6078      	str	r0, [r7, #4]
    ARDUINOJSON_ASSERT(slot_ != nullptr);
    return data();
 8002922:	6878      	ldr	r0, [r7, #4]
 8002924:	f000 f805 	bl	8002932 <_ZN11ArduinoJson8V730HB226detail18CollectionIterator4dataEv>
 8002928:	4603      	mov	r3, r0
  }
 800292a:	4618      	mov	r0, r3
 800292c:	3708      	adds	r7, #8
 800292e:	46bd      	mov	sp, r7
 8002930:	bd80      	pop	{r7, pc}

08002932 <_ZN11ArduinoJson8V730HB226detail18CollectionIterator4dataEv>:
  const VariantData& operator*() const {
    ARDUINOJSON_ASSERT(slot_ != nullptr);
    return *data();
  }

  VariantData* data() {
 8002932:	b480      	push	{r7}
 8002934:	b083      	sub	sp, #12
 8002936:	af00      	add	r7, sp, #0
 8002938:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<VariantData*>(slot_);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
  }
 800293e:	4618      	mov	r0, r3
 8002940:	370c      	adds	r7, #12
 8002942:	46bd      	mov	sp, r7
 8002944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002948:	4770      	bx	lr

0800294a <_ZN11ArduinoJson8V730HB226detail14CollectionDatanwEjPv>:
  SlotId head_ = NULL_SLOT;
  SlotId tail_ = NULL_SLOT;

 public:
  // Placement new
  static void* operator new(size_t, void* p) noexcept {
 800294a:	b480      	push	{r7}
 800294c:	b083      	sub	sp, #12
 800294e:	af00      	add	r7, sp, #0
 8002950:	6078      	str	r0, [r7, #4]
 8002952:	6039      	str	r1, [r7, #0]
    return p;
 8002954:	683b      	ldr	r3, [r7, #0]
  }
 8002956:	4618      	mov	r0, r3
 8002958:	370c      	adds	r7, #12
 800295a:	46bd      	mov	sp, r7
 800295c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002960:	4770      	bx	lr

08002962 <_ZN11ArduinoJson8V730HB226detail19collectionToVariantEPNS1_14CollectionDataE>:
    const CollectionData* collection) {
  const void* data = collection;  // prevent warning cast-align
  return reinterpret_cast<const VariantData*>(data);
}

inline VariantData* collectionToVariant(CollectionData* collection) {
 8002962:	b480      	push	{r7}
 8002964:	b085      	sub	sp, #20
 8002966:	af00      	add	r7, sp, #0
 8002968:	6078      	str	r0, [r7, #4]
  void* data = collection;  // prevent warning cast-align
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	60fb      	str	r3, [r7, #12]
  return reinterpret_cast<VariantData*>(data);
 800296e:	68fb      	ldr	r3, [r7, #12]
}
 8002970:	4618      	mov	r0, r3
 8002972:	3714      	adds	r7, #20
 8002974:	46bd      	mov	sp, r7
 8002976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297a:	4770      	bx	lr

0800297c <_ZN11ArduinoJson8V730HB226detailanENS1_11VariantTypeENS1_15VariantTypeBitsE>:
#endif
  Object = 0x20,
  Array = 0x40,
};

inline bool operator&(VariantType type, VariantTypeBits bit) {
 800297c:	b480      	push	{r7}
 800297e:	b083      	sub	sp, #12
 8002980:	af00      	add	r7, sp, #0
 8002982:	4603      	mov	r3, r0
 8002984:	460a      	mov	r2, r1
 8002986:	71fb      	strb	r3, [r7, #7]
 8002988:	4613      	mov	r3, r2
 800298a:	71bb      	strb	r3, [r7, #6]
  return (uint8_t(type) & uint8_t(bit)) != 0;
 800298c:	79fa      	ldrb	r2, [r7, #7]
 800298e:	79bb      	ldrb	r3, [r7, #6]
 8002990:	4013      	ands	r3, r2
 8002992:	b2db      	uxtb	r3, r3
 8002994:	2b00      	cmp	r3, #0
 8002996:	bf14      	ite	ne
 8002998:	2301      	movne	r3, #1
 800299a:	2300      	moveq	r3, #0
 800299c:	b2db      	uxtb	r3, r3
}
 800299e:	4618      	mov	r0, r3
 80029a0:	370c      	adds	r7, #12
 80029a2:	46bd      	mov	sp, r7
 80029a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a8:	4770      	bx	lr

080029aa <_ZN11ArduinoJson8V730HB226detail14VariantContentC1Ev>:

union VariantContent {
  VariantContent() {}
 80029aa:	b480      	push	{r7}
 80029ac:	b083      	sub	sp, #12
 80029ae:	af00      	add	r7, sp, #0
 80029b0:	6078      	str	r0, [r7, #4]
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	4618      	mov	r0, r3
 80029b6:	370c      	adds	r7, #12
 80029b8:	46bd      	mov	sp, r7
 80029ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029be:	4770      	bx	lr

080029c0 <_ZN11ArduinoJson8V730HB226detail11VariantDatanwEjPv>:
  VariantType type_;
  SlotId next_;

 public:
  // Placement new
  static void* operator new(size_t, void* p) noexcept {
 80029c0:	b480      	push	{r7}
 80029c2:	b083      	sub	sp, #12
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
 80029c8:	6039      	str	r1, [r7, #0]
    return p;
 80029ca:	683b      	ldr	r3, [r7, #0]
  }
 80029cc:	4618      	mov	r0, r3
 80029ce:	370c      	adds	r7, #12
 80029d0:	46bd      	mov	sp, r7
 80029d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d6:	4770      	bx	lr

080029d8 <_ZN11ArduinoJson8V730HB226detail11VariantDataC1Ev>:

  static void operator delete(void*, void*) noexcept {}

  VariantData() : type_(VariantType::Null), next_(NULL_SLOT) {}
 80029d8:	b580      	push	{r7, lr}
 80029da:	b082      	sub	sp, #8
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	4618      	mov	r0, r3
 80029e4:	f7ff ffe1 	bl	80029aa <_ZN11ArduinoJson8V730HB226detail14VariantContentC1Ev>
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2200      	movs	r2, #0
 80029ec:	711a      	strb	r2, [r3, #4]
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80029f4:	80da      	strh	r2, [r3, #6]
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	4618      	mov	r0, r3
 80029fa:	3708      	adds	r7, #8
 80029fc:	46bd      	mov	sp, r7
 80029fe:	bd80      	pop	{r7, pc}

08002a00 <_ZNK11ArduinoJson8V730HB226detail11VariantData4nextEv>:

  SlotId next() const {
 8002a00:	b480      	push	{r7}
 8002a02:	b083      	sub	sp, #12
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
    return next_;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	88db      	ldrh	r3, [r3, #6]
  }
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	370c      	adds	r7, #12
 8002a10:	46bd      	mov	sp, r7
 8002a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a16:	4770      	bx	lr

08002a18 <_ZN11ArduinoJson8V730HB226detail11VariantData7setNextEt>:

  void setNext(SlotId slot) {
 8002a18:	b480      	push	{r7}
 8002a1a:	b083      	sub	sp, #12
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
 8002a20:	460b      	mov	r3, r1
 8002a22:	807b      	strh	r3, [r7, #2]
    next_ = slot;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	887a      	ldrh	r2, [r7, #2]
 8002a28:	80da      	strh	r2, [r3, #6]
  }
 8002a2a:	bf00      	nop
 8002a2c:	370c      	adds	r7, #12
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a34:	4770      	bx	lr

08002a36 <_ZN11ArduinoJson8V730HB226detail11VariantData7asArrayEv>:
      default:
        return true;
    }
  }

  ArrayData* asArray() {
 8002a36:	b580      	push	{r7, lr}
 8002a38:	b082      	sub	sp, #8
 8002a3a:	af00      	add	r7, sp, #0
 8002a3c:	6078      	str	r0, [r7, #4]
    return isArray() ? &content_.asArray : 0;
 8002a3e:	6878      	ldr	r0, [r7, #4]
 8002a40:	f000 f85f 	bl	8002b02 <_ZNK11ArduinoJson8V730HB226detail11VariantData7isArrayEv>
 8002a44:	4603      	mov	r3, r0
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d001      	beq.n	8002a4e <_ZN11ArduinoJson8V730HB226detail11VariantData7asArrayEv+0x18>
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	e000      	b.n	8002a50 <_ZN11ArduinoJson8V730HB226detail11VariantData7asArrayEv+0x1a>
 8002a4e:	2300      	movs	r3, #0
  }
 8002a50:	4618      	mov	r0, r3
 8002a52:	3708      	adds	r7, #8
 8002a54:	46bd      	mov	sp, r7
 8002a56:	bd80      	pop	{r7, pc}

08002a58 <_ZN11ArduinoJson8V730HB226detail11VariantData12asCollectionEv>:

  const ArrayData* asArray() const {
    return const_cast<VariantData*>(this)->asArray();
  }

  CollectionData* asCollection() {
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b082      	sub	sp, #8
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
    return isCollection() ? &content_.asCollection : 0;
 8002a60:	6878      	ldr	r0, [r7, #4]
 8002a62:	f000 f85f 	bl	8002b24 <_ZNK11ArduinoJson8V730HB226detail11VariantData12isCollectionEv>
 8002a66:	4603      	mov	r3, r0
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d001      	beq.n	8002a70 <_ZN11ArduinoJson8V730HB226detail11VariantData12asCollectionEv+0x18>
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	e000      	b.n	8002a72 <_ZN11ArduinoJson8V730HB226detail11VariantData12asCollectionEv+0x1a>
 8002a70:	2300      	movs	r3, #0
  }
 8002a72:	4618      	mov	r0, r3
 8002a74:	3708      	adds	r7, #8
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bd80      	pop	{r7, pc}

08002a7a <_ZN11ArduinoJson8V730HB226detail11VariantData8asObjectEv>:
      default:
        return 0;
    }
  }

  ObjectData* asObject() {
 8002a7a:	b580      	push	{r7, lr}
 8002a7c:	b082      	sub	sp, #8
 8002a7e:	af00      	add	r7, sp, #0
 8002a80:	6078      	str	r0, [r7, #4]
    return isObject() ? &content_.asObject : 0;
 8002a82:	6878      	ldr	r0, [r7, #4]
 8002a84:	f000 f86c 	bl	8002b60 <_ZNK11ArduinoJson8V730HB226detail11VariantData8isObjectEv>
 8002a88:	4603      	mov	r3, r0
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d001      	beq.n	8002a92 <_ZN11ArduinoJson8V730HB226detail11VariantData8asObjectEv+0x18>
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	e000      	b.n	8002a94 <_ZN11ArduinoJson8V730HB226detail11VariantData8asObjectEv+0x1a>
 8002a92:	2300      	movs	r3, #0
  }
 8002a94:	4618      	mov	r0, r3
 8002a96:	3708      	adds	r7, #8
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	bd80      	pop	{r7, pc}

08002a9c <_ZNK11ArduinoJson8V730HB226detail11VariantData8asObjectEv>:

  const ObjectData* asObject() const {
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b082      	sub	sp, #8
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
    return const_cast<VariantData*>(this)->asObject();
 8002aa4:	6878      	ldr	r0, [r7, #4]
 8002aa6:	f7ff ffe8 	bl	8002a7a <_ZN11ArduinoJson8V730HB226detail11VariantData8asObjectEv>
 8002aaa:	4603      	mov	r3, r0
  }
 8002aac:	4618      	mov	r0, r3
 8002aae:	3708      	adds	r7, #8
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	bd80      	pop	{r7, pc}

08002ab4 <_ZNK11ArduinoJson8V730HB226detail11VariantData8asStringEv>:
      default:
        return JsonString();
    }
  }

  JsonString asString() const {
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b082      	sub	sp, #8
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
 8002abc:	6039      	str	r1, [r7, #0]
    switch (type_) {
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	791b      	ldrb	r3, [r3, #4]
 8002ac2:	2b04      	cmp	r3, #4
 8002ac4:	d002      	beq.n	8002acc <_ZNK11ArduinoJson8V730HB226detail11VariantData8asStringEv+0x18>
 8002ac6:	2b05      	cmp	r3, #5
 8002ac8:	d008      	beq.n	8002adc <_ZNK11ArduinoJson8V730HB226detail11VariantData8asStringEv+0x28>
 8002aca:	e013      	b.n	8002af4 <_ZNK11ArduinoJson8V730HB226detail11VariantData8asStringEv+0x40>
      case VariantType::LinkedString:
        return JsonString(content_.asLinkedString, true);
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	2201      	movs	r2, #1
 8002ad2:	4619      	mov	r1, r3
 8002ad4:	6878      	ldr	r0, [r7, #4]
 8002ad6:	f7ff feb6 	bl	8002846 <_ZN11ArduinoJson8V730HB2210JsonStringC1EPKcb>
 8002ada:	e00e      	b.n	8002afa <_ZNK11ArduinoJson8V730HB226detail11VariantData8asStringEv+0x46>
      case VariantType::OwnedString:
        return JsonString(content_.asOwnedString->data,
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f103 0108 	add.w	r1, r3, #8
                          content_.asOwnedString->length);
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	88da      	ldrh	r2, [r3, #6]
 8002aea:	2300      	movs	r3, #0
 8002aec:	6878      	ldr	r0, [r7, #4]
 8002aee:	f001 fea5 	bl	800483c <_ZN11ArduinoJson8V730HB2210JsonStringC1ItLi0EEEPKcT_b>
 8002af2:	e002      	b.n	8002afa <_ZNK11ArduinoJson8V730HB226detail11VariantData8asStringEv+0x46>
      default:
        return JsonString();
 8002af4:	6878      	ldr	r0, [r7, #4]
 8002af6:	f7ff fe97 	bl	8002828 <_ZN11ArduinoJson8V730HB2210JsonStringC1Ev>
    }
  }
 8002afa:	6878      	ldr	r0, [r7, #4]
 8002afc:	3708      	adds	r7, #8
 8002afe:	46bd      	mov	sp, r7
 8002b00:	bd80      	pop	{r7, pc}

08002b02 <_ZNK11ArduinoJson8V730HB226detail11VariantData7isArrayEv>:
    if (!obj)
      return nullptr;
    return obj->getOrAddMember(key, resources);
  }

  bool isArray() const {
 8002b02:	b480      	push	{r7}
 8002b04:	b083      	sub	sp, #12
 8002b06:	af00      	add	r7, sp, #0
 8002b08:	6078      	str	r0, [r7, #4]
    return type_ == VariantType::Array;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	791b      	ldrb	r3, [r3, #4]
 8002b0e:	2b40      	cmp	r3, #64	@ 0x40
 8002b10:	bf0c      	ite	eq
 8002b12:	2301      	moveq	r3, #1
 8002b14:	2300      	movne	r3, #0
 8002b16:	b2db      	uxtb	r3, r3
  }
 8002b18:	4618      	mov	r0, r3
 8002b1a:	370c      	adds	r7, #12
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b22:	4770      	bx	lr

08002b24 <_ZNK11ArduinoJson8V730HB226detail11VariantData12isCollectionEv>:

  bool isBoolean() const {
    return type_ == VariantType::Boolean;
  }

  bool isCollection() const {
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b082      	sub	sp, #8
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
    return type_ & VariantTypeBits::CollectionMask;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	791b      	ldrb	r3, [r3, #4]
 8002b30:	2160      	movs	r1, #96	@ 0x60
 8002b32:	4618      	mov	r0, r3
 8002b34:	f7ff ff22 	bl	800297c <_ZN11ArduinoJson8V730HB226detailanENS1_11VariantTypeENS1_15VariantTypeBitsE>
 8002b38:	4603      	mov	r3, r0
  }
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	3708      	adds	r7, #8
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	bd80      	pop	{r7, pc}

08002b42 <_ZNK11ArduinoJson8V730HB226detail11VariantData7isFloatEv>:

  bool isFloat() const {
 8002b42:	b580      	push	{r7, lr}
 8002b44:	b082      	sub	sp, #8
 8002b46:	af00      	add	r7, sp, #0
 8002b48:	6078      	str	r0, [r7, #4]
    return type_ & VariantTypeBits::NumberBit;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	791b      	ldrb	r3, [r3, #4]
 8002b4e:	2108      	movs	r1, #8
 8002b50:	4618      	mov	r0, r3
 8002b52:	f7ff ff13 	bl	800297c <_ZN11ArduinoJson8V730HB226detailanENS1_11VariantTypeENS1_15VariantTypeBitsE>
 8002b56:	4603      	mov	r3, r0
  }
 8002b58:	4618      	mov	r0, r3
 8002b5a:	3708      	adds	r7, #8
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	bd80      	pop	{r7, pc}

08002b60 <_ZNK11ArduinoJson8V730HB226detail11VariantData8isObjectEv>:
    if (!var)
      return true;
    return var->isNull();
  }

  bool isObject() const {
 8002b60:	b480      	push	{r7}
 8002b62:	b083      	sub	sp, #12
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
    return type_ == VariantType::Object;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	791b      	ldrb	r3, [r3, #4]
 8002b6c:	2b20      	cmp	r3, #32
 8002b6e:	bf0c      	ite	eq
 8002b70:	2301      	moveq	r3, #1
 8002b72:	2300      	movne	r3, #0
 8002b74:	b2db      	uxtb	r3, r3
  }
 8002b76:	4618      	mov	r0, r3
 8002b78:	370c      	adds	r7, #12
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b80:	4770      	bx	lr

08002b82 <_ZN11ArduinoJson8V730HB226detail11VariantData5resetEv>:
    if (!var)
      return;
    var->removeMember(key, resources);
  }

  void reset() {  // TODO: remove
 8002b82:	b480      	push	{r7}
 8002b84:	b083      	sub	sp, #12
 8002b86:	af00      	add	r7, sp, #0
 8002b88:	6078      	str	r0, [r7, #4]
    type_ = VariantType::Null;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	711a      	strb	r2, [r3, #4]
  }
 8002b90:	bf00      	nop
 8002b92:	370c      	adds	r7, #12
 8002b94:	46bd      	mov	sp, r7
 8002b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9a:	4770      	bx	lr

08002b9c <_ZN11ArduinoJson8V730HB226detail11VariantData10setBooleanEb>:

  void setBoolean(bool value) {
 8002b9c:	b480      	push	{r7}
 8002b9e:	b083      	sub	sp, #12
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
 8002ba4:	460b      	mov	r3, r1
 8002ba6:	70fb      	strb	r3, [r7, #3]
    ARDUINOJSON_ASSERT(type_ == VariantType::Null);  // must call clear() first
    type_ = VariantType::Boolean;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2206      	movs	r2, #6
 8002bac:	711a      	strb	r2, [r3, #4]
    content_.asBoolean = value;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	78fa      	ldrb	r2, [r7, #3]
 8002bb2:	701a      	strb	r2, [r3, #0]
  }
 8002bb4:	bf00      	nop
 8002bb6:	370c      	adds	r7, #12
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbe:	4770      	bx	lr

08002bc0 <_ZN11ArduinoJson8V730HB226detail11VariantData9setStringEPNS1_10StringNodeEPNS1_15ResourceManagerE>:
  }

  template <typename TAdaptedString>
  bool setString(TAdaptedString value, ResourceManager* resources);

  bool setString(StringNode* s, ResourceManager*) {
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b084      	sub	sp, #16
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	60f8      	str	r0, [r7, #12]
 8002bc8:	60b9      	str	r1, [r7, #8]
 8002bca:	607a      	str	r2, [r7, #4]
    setOwnedString(s);
 8002bcc:	68b9      	ldr	r1, [r7, #8]
 8002bce:	68f8      	ldr	r0, [r7, #12]
 8002bd0:	f000 f805 	bl	8002bde <_ZN11ArduinoJson8V730HB226detail11VariantData14setOwnedStringEPNS1_10StringNodeE>
    return true;
 8002bd4:	2301      	movs	r3, #1
  }
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	3710      	adds	r7, #16
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	bd80      	pop	{r7, pc}

08002bde <_ZN11ArduinoJson8V730HB226detail11VariantData14setOwnedStringEPNS1_10StringNodeE>:
    ARDUINOJSON_ASSERT(s);
    type_ = VariantType::LinkedString;
    content_.asLinkedString = s;
  }

  void setOwnedString(StringNode* s) {
 8002bde:	b480      	push	{r7}
 8002be0:	b083      	sub	sp, #12
 8002be2:	af00      	add	r7, sp, #0
 8002be4:	6078      	str	r0, [r7, #4]
 8002be6:	6039      	str	r1, [r7, #0]
    ARDUINOJSON_ASSERT(type_ == VariantType::Null);  // must call clear() first
    ARDUINOJSON_ASSERT(s);
    type_ = VariantType::OwnedString;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2205      	movs	r2, #5
 8002bec:	711a      	strb	r2, [r3, #4]
    content_.asOwnedString = s;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	683a      	ldr	r2, [r7, #0]
 8002bf2:	601a      	str	r2, [r3, #0]
  }
 8002bf4:	bf00      	nop
 8002bf6:	370c      	adds	r7, #12
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfe:	4770      	bx	lr

08002c00 <_ZN11ArduinoJson8V730HB226detail14CollectionDataC1Ev>:
class CollectionData {
 8002c00:	b480      	push	{r7}
 8002c02:	b083      	sub	sp, #12
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002c0e:	801a      	strh	r2, [r3, #0]
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002c16:	805a      	strh	r2, [r3, #2]
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	370c      	adds	r7, #12
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c24:	4770      	bx	lr

08002c26 <_ZN11ArduinoJson8V730HB226detail9ArrayDataC1Ev>:

#include <ArduinoJson/Collection/CollectionData.hpp>

ARDUINOJSON_BEGIN_PRIVATE_NAMESPACE

class ArrayData : public CollectionData {
 8002c26:	b580      	push	{r7, lr}
 8002c28:	b082      	sub	sp, #8
 8002c2a:	af00      	add	r7, sp, #0
 8002c2c:	6078      	str	r0, [r7, #4]
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	4618      	mov	r0, r3
 8002c32:	f7ff ffe5 	bl	8002c00 <_ZN11ArduinoJson8V730HB226detail14CollectionDataC1Ev>
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	4618      	mov	r0, r3
 8002c3a:	3708      	adds	r7, #8
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	bd80      	pop	{r7, pc}

08002c40 <_ZN11ArduinoJson8V730HB226detail11VariantData7toArrayEv>:

  static size_t size(const VariantData* var, const ResourceManager* resources) {
    return var != 0 ? var->size(resources) : 0;
  }

  ArrayData& toArray() {
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b082      	sub	sp, #8
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
    ARDUINOJSON_ASSERT(type_ == VariantType::Null);  // must call clear() first
    type_ = VariantType::Array;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2240      	movs	r2, #64	@ 0x40
 8002c4c:	711a      	strb	r2, [r3, #4]
    new (&content_.asArray) ArrayData();
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	4619      	mov	r1, r3
 8002c52:	2004      	movs	r0, #4
 8002c54:	f7ff fe79 	bl	800294a <_ZN11ArduinoJson8V730HB226detail14CollectionDatanwEjPv>
 8002c58:	4603      	mov	r3, r0
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d006      	beq.n	8002c6c <_ZN11ArduinoJson8V730HB226detail11VariantData7toArrayEv+0x2c>
 8002c5e:	2200      	movs	r2, #0
 8002c60:	801a      	strh	r2, [r3, #0]
 8002c62:	2200      	movs	r2, #0
 8002c64:	805a      	strh	r2, [r3, #2]
 8002c66:	4618      	mov	r0, r3
 8002c68:	f7ff ffdd 	bl	8002c26 <_ZN11ArduinoJson8V730HB226detail9ArrayDataC1Ev>
    return content_.asArray;
 8002c6c:	687b      	ldr	r3, [r7, #4]
  }
 8002c6e:	4618      	mov	r0, r3
 8002c70:	3708      	adds	r7, #8
 8002c72:	46bd      	mov	sp, r7
 8002c74:	bd80      	pop	{r7, pc}

08002c76 <_ZN11ArduinoJson8V730HB226detail10ObjectDataC1Ev>:

#include <ArduinoJson/Collection/CollectionData.hpp>

ARDUINOJSON_BEGIN_PRIVATE_NAMESPACE

class ObjectData : public CollectionData {
 8002c76:	b580      	push	{r7, lr}
 8002c78:	b082      	sub	sp, #8
 8002c7a:	af00      	add	r7, sp, #0
 8002c7c:	6078      	str	r0, [r7, #4]
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	4618      	mov	r0, r3
 8002c82:	f7ff ffbd 	bl	8002c00 <_ZN11ArduinoJson8V730HB226detail14CollectionDataC1Ev>
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	4618      	mov	r0, r3
 8002c8a:	3708      	adds	r7, #8
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	bd80      	pop	{r7, pc}

08002c90 <_ZN11ArduinoJson8V730HB226detail11VariantData8toObjectEv>:
      return 0;
    var->clear(resources);
    return &var->toArray();
  }

  ObjectData& toObject() {
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b082      	sub	sp, #8
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
    ARDUINOJSON_ASSERT(type_ == VariantType::Null);  // must call clear() first
    type_ = VariantType::Object;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2220      	movs	r2, #32
 8002c9c:	711a      	strb	r2, [r3, #4]
    new (&content_.asObject) ObjectData();
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	4619      	mov	r1, r3
 8002ca2:	2004      	movs	r0, #4
 8002ca4:	f7ff fe51 	bl	800294a <_ZN11ArduinoJson8V730HB226detail14CollectionDatanwEjPv>
 8002ca8:	4603      	mov	r3, r0
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d006      	beq.n	8002cbc <_ZN11ArduinoJson8V730HB226detail11VariantData8toObjectEv+0x2c>
 8002cae:	2200      	movs	r2, #0
 8002cb0:	801a      	strh	r2, [r3, #0]
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	805a      	strh	r2, [r3, #2]
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	f7ff ffdd 	bl	8002c76 <_ZN11ArduinoJson8V730HB226detail10ObjectDataC1Ev>
    return content_.asObject;
 8002cbc:	687b      	ldr	r3, [r7, #4]
  }
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	3708      	adds	r7, #8
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	bd80      	pop	{r7, pc}

08002cc6 <_ZN11ArduinoJson8V730HB226detail10StringPoolC1Ev>:
  StringPool() = default;
 8002cc6:	b480      	push	{r7}
 8002cc8:	b083      	sub	sp, #12
 8002cca:	af00      	add	r7, sp, #0
 8002ccc:	6078      	str	r0, [r7, #4]
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	601a      	str	r2, [r3, #0]
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	370c      	adds	r7, #12
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce0:	4770      	bx	lr

08002ce2 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEEC1Ev>:
  static_assert(sizeof(FreeSlot) <= sizeof(T), "T is too small");

 public:
  using Pool = MemoryPool<T>;

  MemoryPoolList() = default;
 8002ce2:	b480      	push	{r7}
 8002ce4:	b083      	sub	sp, #12
 8002ce6:	af00      	add	r7, sp, #0
 8002ce8:	6078      	str	r0, [r7, #4]
 8002cea:	687a      	ldr	r2, [r7, #4]
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	621a      	str	r2, [r3, #32]
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	849a      	strh	r2, [r3, #36]	@ 0x24
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	2204      	movs	r2, #4
 8002cfa:	84da      	strh	r2, [r3, #38]	@ 0x26
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002d02:	851a      	strh	r2, [r3, #40]	@ 0x28
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	4618      	mov	r0, r3
 8002d08:	370c      	adds	r7, #12
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d10:	4770      	bx	lr

08002d12 <_ZN11ArduinoJson8V730HB226detail15ResourceManagerC1EPNS0_9AllocatorE>:
  };

 public:
  constexpr static size_t slotSize = sizeof(SlotData);

  ResourceManager(Allocator* allocator = DefaultAllocator::instance())
 8002d12:	b580      	push	{r7, lr}
 8002d14:	b082      	sub	sp, #8
 8002d16:	af00      	add	r7, sp, #0
 8002d18:	6078      	str	r0, [r7, #4]
 8002d1a:	6039      	str	r1, [r7, #0]
      : allocator_(allocator), overflowed_(false) {}
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	683a      	ldr	r2, [r7, #0]
 8002d20:	601a      	str	r2, [r3, #0]
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	2200      	movs	r2, #0
 8002d26:	711a      	strb	r2, [r3, #4]
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	3308      	adds	r3, #8
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	f7ff ffca 	bl	8002cc6 <_ZN11ArduinoJson8V730HB226detail10StringPoolC1Ev>
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	330c      	adds	r3, #12
 8002d36:	4618      	mov	r0, r3
 8002d38:	f7ff ffd3 	bl	8002ce2 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEEC1Ev>
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	4618      	mov	r0, r3
 8002d40:	3708      	adds	r7, #8
 8002d42:	46bd      	mov	sp, r7
 8002d44:	bd80      	pop	{r7, pc}

08002d46 <_ZN11ArduinoJson8V730HB226detail15ResourceManager10saveStringEPNS1_10StringNodeE>:
      overflowed_ = true;

    return node;
  }

  void saveString(StringNode* node) {
 8002d46:	b580      	push	{r7, lr}
 8002d48:	b082      	sub	sp, #8
 8002d4a:	af00      	add	r7, sp, #0
 8002d4c:	6078      	str	r0, [r7, #4]
 8002d4e:	6039      	str	r1, [r7, #0]
    stringPool_.add(node);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	3308      	adds	r3, #8
 8002d54:	6839      	ldr	r1, [r7, #0]
 8002d56:	4618      	mov	r0, r3
 8002d58:	f7ff fd16 	bl	8002788 <_ZN11ArduinoJson8V730HB226detail10StringPool3addEPNS1_10StringNodeE>
  }
 8002d5c:	bf00      	nop
 8002d5e:	3708      	adds	r7, #8
 8002d60:	46bd      	mov	sp, r7
 8002d62:	bd80      	pop	{r7, pc}

08002d64 <_ZN11ArduinoJson8V730HB226detail15ResourceManager12createStringEj>:
  template <typename TAdaptedString>
  StringNode* getString(const TAdaptedString& str) const {
    return stringPool_.get(str);
  }

  StringNode* createString(size_t length) {
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b084      	sub	sp, #16
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
 8002d6c:	6039      	str	r1, [r7, #0]
    auto node = StringNode::create(length, allocator_);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	4619      	mov	r1, r3
 8002d74:	6838      	ldr	r0, [r7, #0]
 8002d76:	f7ff fc43 	bl	8002600 <_ZN11ArduinoJson8V730HB226detail10StringNode6createEjPNS0_9AllocatorE>
 8002d7a:	60f8      	str	r0, [r7, #12]
    if (!node)
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d102      	bne.n	8002d88 <_ZN11ArduinoJson8V730HB226detail15ResourceManager12createStringEj+0x24>
      overflowed_ = true;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	2201      	movs	r2, #1
 8002d86:	711a      	strb	r2, [r3, #4]
    return node;
 8002d88:	68fb      	ldr	r3, [r7, #12]
  }
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	3710      	adds	r7, #16
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	bd80      	pop	{r7, pc}

08002d92 <_ZN11ArduinoJson8V730HB226detail15ResourceManager12resizeStringEPNS1_10StringNodeEj>:

  StringNode* resizeString(StringNode* node, size_t length) {
 8002d92:	b580      	push	{r7, lr}
 8002d94:	b084      	sub	sp, #16
 8002d96:	af00      	add	r7, sp, #0
 8002d98:	60f8      	str	r0, [r7, #12]
 8002d9a:	60b9      	str	r1, [r7, #8]
 8002d9c:	607a      	str	r2, [r7, #4]
    node = StringNode::resize(node, length, allocator_);
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	461a      	mov	r2, r3
 8002da4:	6879      	ldr	r1, [r7, #4]
 8002da6:	68b8      	ldr	r0, [r7, #8]
 8002da8:	f7ff fc55 	bl	8002656 <_ZN11ArduinoJson8V730HB226detail10StringNode6resizeEPS2_jPNS0_9AllocatorE>
 8002dac:	60b8      	str	r0, [r7, #8]
    if (!node)
 8002dae:	68bb      	ldr	r3, [r7, #8]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d102      	bne.n	8002dba <_ZN11ArduinoJson8V730HB226detail15ResourceManager12resizeStringEPNS1_10StringNodeEj+0x28>
      overflowed_ = true;
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	2201      	movs	r2, #1
 8002db8:	711a      	strb	r2, [r3, #4]
    return node;
 8002dba:	68bb      	ldr	r3, [r7, #8]
  }
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	3710      	adds	r7, #16
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	bd80      	pop	{r7, pc}

08002dc4 <_ZN11ArduinoJson8V730HB226detail15ResourceManager13destroyStringEPNS1_10StringNodeE>:

  void destroyString(StringNode* node) {
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b082      	sub	sp, #8
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
 8002dcc:	6039      	str	r1, [r7, #0]
    StringNode::destroy(node, allocator_);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	4619      	mov	r1, r3
 8002dd4:	6838      	ldr	r0, [r7, #0]
 8002dd6:	f7ff fc6d 	bl	80026b4 <_ZN11ArduinoJson8V730HB226detail10StringNode7destroyEPS2_PNS0_9AllocatorE>
  }
 8002dda:	bf00      	nop
 8002ddc:	3708      	adds	r7, #8
 8002dde:	46bd      	mov	sp, r7
 8002de0:	bd80      	pop	{r7, pc}

08002de2 <_ZN11ArduinoJson8V730HB226detail15ResourceManager17dereferenceStringEPKc>:

  void dereferenceString(const char* s) {
 8002de2:	b580      	push	{r7, lr}
 8002de4:	b082      	sub	sp, #8
 8002de6:	af00      	add	r7, sp, #0
 8002de8:	6078      	str	r0, [r7, #4]
 8002dea:	6039      	str	r1, [r7, #0]
    stringPool_.dereference(s, allocator_);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	f103 0008 	add.w	r0, r3, #8
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	461a      	mov	r2, r3
 8002df8:	6839      	ldr	r1, [r7, #0]
 8002dfa:	f7ff fcd7 	bl	80027ac <_ZN11ArduinoJson8V730HB226detail10StringPool11dereferenceEPKcPNS0_9AllocatorE>
  }
 8002dfe:	bf00      	nop
 8002e00:	3708      	adds	r7, #8
 8002e02:	46bd      	mov	sp, r7
 8002e04:	bd80      	pop	{r7, pc}

08002e06 <_ZN11ArduinoJson8V730HB226detail15ResourceManager5clearEv>:

  void clear() {
 8002e06:	b580      	push	{r7, lr}
 8002e08:	b082      	sub	sp, #8
 8002e0a:	af00      	add	r7, sp, #0
 8002e0c:	6078      	str	r0, [r7, #4]
    variantPools_.clear(allocator_);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	f103 020c 	add.w	r2, r3, #12
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	4619      	mov	r1, r3
 8002e1a:	4610      	mov	r0, r2
 8002e1c:	f001 fd24 	bl	8004868 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE5clearEPNS0_9AllocatorE>
    overflowed_ = false;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2200      	movs	r2, #0
 8002e24:	711a      	strb	r2, [r3, #4]
    stringPool_.clear(allocator_);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	f103 0208 	add.w	r2, r3, #8
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	4619      	mov	r1, r3
 8002e32:	4610      	mov	r0, r2
 8002e34:	f7ff fc8e 	bl	8002754 <_ZN11ArduinoJson8V730HB226detail10StringPool5clearEPNS0_9AllocatorE>
  }
 8002e38:	bf00      	nop
 8002e3a:	3708      	adds	r7, #8
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	bd80      	pop	{r7, pc}

08002e40 <_ZN11ArduinoJson8V730HB226detail15ResourceManager11shrinkToFitEv>:

  void shrinkToFit() {
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b082      	sub	sp, #8
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
    variantPools_.shrinkToFit(allocator_);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	f103 020c 	add.w	r2, r3, #12
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	4619      	mov	r1, r3
 8002e54:	4610      	mov	r0, r2
 8002e56:	f001 fd3f 	bl	80048d8 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE11shrinkToFitEPNS0_9AllocatorE>
  }
 8002e5a:	bf00      	nop
 8002e5c:	3708      	adds	r7, #8
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	bd80      	pop	{r7, pc}

08002e62 <_ZN11ArduinoJson8V730HB2216JsonVariantConstC1EPKNS0_6detail11VariantDataEPKNS2_15ResourceManagerE>:
 public:
  // Creates an unbound reference.
  JsonVariantConst() : data_(nullptr), resources_(nullptr) {}

  // INTERNAL USE ONLY
  explicit JsonVariantConst(const detail::VariantData* data,
 8002e62:	b480      	push	{r7}
 8002e64:	b085      	sub	sp, #20
 8002e66:	af00      	add	r7, sp, #0
 8002e68:	60f8      	str	r0, [r7, #12]
 8002e6a:	60b9      	str	r1, [r7, #8]
 8002e6c:	607a      	str	r2, [r7, #4]
                            const detail::ResourceManager* resources)
      : data_(data), resources_(resources) {}
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	68ba      	ldr	r2, [r7, #8]
 8002e72:	601a      	str	r2, [r3, #0]
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	687a      	ldr	r2, [r7, #4]
 8002e78:	605a      	str	r2, [r3, #4]
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	3714      	adds	r7, #20
 8002e80:	46bd      	mov	sp, r7
 8002e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e86:	4770      	bx	lr

08002e88 <_ZNK11ArduinoJson8V730HB2216JsonVariantConst7getDataEv>:
  size_t memoryUsage() const {
    return 0;
  }

 protected:
  const detail::VariantData* getData() const {
 8002e88:	b480      	push	{r7}
 8002e8a:	b083      	sub	sp, #12
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
    return data_;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
  }
 8002e94:	4618      	mov	r0, r3
 8002e96:	370c      	adds	r7, #12
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9e:	4770      	bx	lr

08002ea0 <_ZNK11ArduinoJson8V730HB2216JsonVariantConst18getResourceManagerEv>:

  const detail::ResourceManager* getResourceManager() const {
 8002ea0:	b480      	push	{r7}
 8002ea2:	b083      	sub	sp, #12
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
    return resources_;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	685b      	ldr	r3, [r3, #4]
  }
 8002eac:	4618      	mov	r0, r3
 8002eae:	370c      	adds	r7, #12
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb6:	4770      	bx	lr

08002eb8 <_ZN11ArduinoJson8V730HB2211JsonVariantC1EPNS0_6detail11VariantDataEPNS2_15ResourceManagerE>:
 public:
  // Creates an unbound reference.
  JsonVariant() : data_(0), resources_(0) {}

  // INTERNAL USE ONLY
  JsonVariant(detail::VariantData* data, detail::ResourceManager* resources)
 8002eb8:	b480      	push	{r7}
 8002eba:	b085      	sub	sp, #20
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	60f8      	str	r0, [r7, #12]
 8002ec0:	60b9      	str	r1, [r7, #8]
 8002ec2:	607a      	str	r2, [r7, #4]
      : data_(data), resources_(resources) {}
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	68ba      	ldr	r2, [r7, #8]
 8002ec8:	601a      	str	r2, [r3, #0]
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	687a      	ldr	r2, [r7, #4]
 8002ece:	605a      	str	r2, [r3, #4]
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	3714      	adds	r7, #20
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002edc:	4770      	bx	lr

08002ede <_ZNK11ArduinoJson8V730HB2211JsonVariant18getResourceManagerEv>:

 private:
  detail::ResourceManager* getResourceManager() const {
 8002ede:	b480      	push	{r7}
 8002ee0:	b083      	sub	sp, #12
 8002ee2:	af00      	add	r7, sp, #0
 8002ee4:	6078      	str	r0, [r7, #4]
    return resources_;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	685b      	ldr	r3, [r3, #4]
  }
 8002eea:	4618      	mov	r0, r3
 8002eec:	370c      	adds	r7, #12
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef4:	4770      	bx	lr

08002ef6 <_ZNK11ArduinoJson8V730HB2211JsonVariant7getDataEv>:

  detail::VariantData* getData() const {
 8002ef6:	b480      	push	{r7}
 8002ef8:	b083      	sub	sp, #12
 8002efa:	af00      	add	r7, sp, #0
 8002efc:	6078      	str	r0, [r7, #4]
    return data_;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
  }
 8002f02:	4618      	mov	r0, r3
 8002f04:	370c      	adds	r7, #12
 8002f06:	46bd      	mov	sp, r7
 8002f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0c:	4770      	bx	lr

08002f0e <_ZN11ArduinoJson8V730HB229ConverterINS0_11JsonVariantEvE9checkJsonES2_>:

  static JsonVariant fromJson(JsonVariant src) {
    return src;
  }

  static bool checkJson(JsonVariant src) {
 8002f0e:	b580      	push	{r7, lr}
 8002f10:	b084      	sub	sp, #16
 8002f12:	af00      	add	r7, sp, #0
 8002f14:	463b      	mov	r3, r7
 8002f16:	e883 0003 	stmia.w	r3, {r0, r1}
    auto data = getData(src);
 8002f1a:	463b      	mov	r3, r7
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	f001 fd13 	bl	8004948 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataINS0_11JsonVariantEEEDTcldtfp_7getDataEERT_>
 8002f22:	60f8      	str	r0, [r7, #12]
    return !!data;
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	bf14      	ite	ne
 8002f2a:	2301      	movne	r3, #1
 8002f2c:	2300      	moveq	r3, #0
 8002f2e:	b2db      	uxtb	r3, r3
  }
 8002f30:	4618      	mov	r0, r3
 8002f32:	3710      	adds	r7, #16
 8002f34:	46bd      	mov	sp, r7
 8002f36:	bd80      	pop	{r7, pc}

08002f38 <_ZN11ArduinoJson8V730HB2217JsonArrayIteratorC1Ev>:

class JsonArrayIterator {
  friend class JsonArray;

 public:
  JsonArrayIterator() {}
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b082      	sub	sp, #8
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	4618      	mov	r0, r3
 8002f44:	f7ff fcb2 	bl	80028ac <_ZN11ArduinoJson8V730HB226detail18CollectionIteratorC1Ev>
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	3708      	adds	r7, #8
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	bd80      	pop	{r7, pc}

08002f52 <_ZN11ArduinoJson8V730HB2217JsonArrayIteratorC1ENS0_6detail18CollectionIteratorEPNS2_15ResourceManagerE>:
  explicit JsonArrayIterator(detail::ArrayData::iterator iterator,
 8002f52:	b480      	push	{r7}
 8002f54:	b085      	sub	sp, #20
 8002f56:	af00      	add	r7, sp, #0
 8002f58:	60f8      	str	r0, [r7, #12]
 8002f5a:	1d38      	adds	r0, r7, #4
 8002f5c:	e880 0006 	stmia.w	r0, {r1, r2}
 8002f60:	603b      	str	r3, [r7, #0]
                             detail::ResourceManager* resources)
      : iterator_(iterator), resources_(resources) {}
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	461a      	mov	r2, r3
 8002f66:	1d3b      	adds	r3, r7, #4
 8002f68:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002f6c:	e882 0003 	stmia.w	r2, {r0, r1}
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	683a      	ldr	r2, [r7, #0]
 8002f74:	609a      	str	r2, [r3, #8]
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	4618      	mov	r0, r3
 8002f7a:	3714      	adds	r7, #20
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f82:	4770      	bx	lr

08002f84 <_ZN11ArduinoJson8V730HB2217JsonArrayIteratordeEv>:

  JsonVariant operator*() {
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b082      	sub	sp, #8
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
 8002f8c:	6039      	str	r1, [r7, #0]
    return JsonVariant(iterator_.data(), resources_);
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	4618      	mov	r0, r3
 8002f92:	f7ff fcce 	bl	8002932 <_ZN11ArduinoJson8V730HB226detail18CollectionIterator4dataEv>
 8002f96:	4601      	mov	r1, r0
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	689b      	ldr	r3, [r3, #8]
 8002f9c:	461a      	mov	r2, r3
 8002f9e:	6878      	ldr	r0, [r7, #4]
 8002fa0:	f7ff ff8a 	bl	8002eb8 <_ZN11ArduinoJson8V730HB2211JsonVariantC1EPNS0_6detail11VariantDataEPNS2_15ResourceManagerE>
  }
 8002fa4:	6878      	ldr	r0, [r7, #4]
 8002fa6:	3708      	adds	r7, #8
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	bd80      	pop	{r7, pc}

08002fac <_ZNK11ArduinoJson8V730HB2217JsonArrayIteratorneERKS1_>:

  bool operator==(const JsonArrayIterator& other) const {
    return iterator_ == other.iterator_;
  }

  bool operator!=(const JsonArrayIterator& other) const {
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b082      	sub	sp, #8
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
 8002fb4:	6039      	str	r1, [r7, #0]
    return iterator_ != other.iterator_;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	683a      	ldr	r2, [r7, #0]
 8002fba:	4611      	mov	r1, r2
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	f7ff fc98 	bl	80028f2 <_ZNK11ArduinoJson8V730HB226detail18CollectionIteratorneERKS2_>
 8002fc2:	4603      	mov	r3, r0
  }
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	3708      	adds	r7, #8
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	bd80      	pop	{r7, pc}

08002fcc <_ZN11ArduinoJson8V730HB2217JsonArrayIteratorppEv>:

  JsonArrayIterator& operator++() {
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b082      	sub	sp, #8
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
    iterator_.next(resources_);
 8002fd4:	687a      	ldr	r2, [r7, #4]
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	689b      	ldr	r3, [r3, #8]
 8002fda:	4619      	mov	r1, r3
 8002fdc:	4610      	mov	r0, r2
 8002fde:	f000 f936 	bl	800324e <_ZN11ArduinoJson8V730HB226detail18CollectionIterator4nextEPKNS1_15ResourceManagerE>
    return *this;
 8002fe2:	687b      	ldr	r3, [r7, #4]
  }
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	3708      	adds	r7, #8
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	bd80      	pop	{r7, pc}

08002fec <_ZN11ArduinoJson8V730HB229JsonArrayC1Ev>:

 public:
  using iterator = JsonArrayIterator;

  // Constructs an unbound reference.
  JsonArray() : data_(0), resources_(0) {}
 8002fec:	b480      	push	{r7}
 8002fee:	b083      	sub	sp, #12
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	601a      	str	r2, [r3, #0]
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	605a      	str	r2, [r3, #4]
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	4618      	mov	r0, r3
 8003004:	370c      	adds	r7, #12
 8003006:	46bd      	mov	sp, r7
 8003008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300c:	4770      	bx	lr

0800300e <_ZN11ArduinoJson8V730HB229JsonArrayC1EPNS0_6detail9ArrayDataEPNS2_15ResourceManagerE>:

  // INTERNAL USE ONLY
  JsonArray(detail::ArrayData* data, detail::ResourceManager* resources)
 800300e:	b480      	push	{r7}
 8003010:	b085      	sub	sp, #20
 8003012:	af00      	add	r7, sp, #0
 8003014:	60f8      	str	r0, [r7, #12]
 8003016:	60b9      	str	r1, [r7, #8]
 8003018:	607a      	str	r2, [r7, #4]
      : data_(data), resources_(resources) {}
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	68ba      	ldr	r2, [r7, #8]
 800301e:	601a      	str	r2, [r3, #0]
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	687a      	ldr	r2, [r7, #4]
 8003024:	605a      	str	r2, [r3, #4]
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	4618      	mov	r0, r3
 800302a:	3714      	adds	r7, #20
 800302c:	46bd      	mov	sp, r7
 800302e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003032:	4770      	bx	lr

08003034 <_ZNK11ArduinoJson8V730HB229JsonArray5beginEv>:
    return detail::ArrayData::addValue(data_, value, resources_);
  }

  // Returns an iterator to the first element of the array.
  // https://arduinojson.org/v7/api/jsonarray/begin/
  iterator begin() const {
 8003034:	b580      	push	{r7, lr}
 8003036:	b084      	sub	sp, #16
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
 800303c:	6039      	str	r1, [r7, #0]
    if (!data_)
 800303e:	683b      	ldr	r3, [r7, #0]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	2b00      	cmp	r3, #0
 8003044:	d103      	bne.n	800304e <_ZNK11ArduinoJson8V730HB229JsonArray5beginEv+0x1a>
      return iterator();
 8003046:	6878      	ldr	r0, [r7, #4]
 8003048:	f7ff ff76 	bl	8002f38 <_ZN11ArduinoJson8V730HB2217JsonArrayIteratorC1Ev>
 800304c:	e011      	b.n	8003072 <_ZNK11ArduinoJson8V730HB229JsonArray5beginEv+0x3e>
    return iterator(data_->createIterator(resources_), resources_);
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	4619      	mov	r1, r3
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	685a      	ldr	r2, [r3, #4]
 8003058:	f107 0308 	add.w	r3, r7, #8
 800305c:	4618      	mov	r0, r3
 800305e:	f000 f919 	bl	8003294 <_ZNK11ArduinoJson8V730HB226detail14CollectionData14createIteratorEPKNS1_15ResourceManagerE>
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	685b      	ldr	r3, [r3, #4]
 8003066:	f107 0208 	add.w	r2, r7, #8
 800306a:	ca06      	ldmia	r2, {r1, r2}
 800306c:	6878      	ldr	r0, [r7, #4]
 800306e:	f7ff ff70 	bl	8002f52 <_ZN11ArduinoJson8V730HB2217JsonArrayIteratorC1ENS0_6detail18CollectionIteratorEPNS2_15ResourceManagerE>
  }
 8003072:	6878      	ldr	r0, [r7, #4]
 8003074:	3710      	adds	r7, #16
 8003076:	46bd      	mov	sp, r7
 8003078:	bd80      	pop	{r7, pc}

0800307a <_ZNK11ArduinoJson8V730HB229JsonArray3endEv>:

  // Returns an iterator following the last element of the array.
  // https://arduinojson.org/v7/api/jsonarray/end/
  iterator end() const {
 800307a:	b580      	push	{r7, lr}
 800307c:	b082      	sub	sp, #8
 800307e:	af00      	add	r7, sp, #0
 8003080:	6078      	str	r0, [r7, #4]
 8003082:	6039      	str	r1, [r7, #0]
    return iterator();
 8003084:	6878      	ldr	r0, [r7, #4]
 8003086:	f7ff ff57 	bl	8002f38 <_ZN11ArduinoJson8V730HB2217JsonArrayIteratorC1Ev>
  }
 800308a:	6878      	ldr	r0, [r7, #4]
 800308c:	3708      	adds	r7, #8
 800308e:	46bd      	mov	sp, r7
 8003090:	bd80      	pop	{r7, pc}

08003092 <_ZN11ArduinoJson8V730HB2210JsonObjectC1Ev>:

 public:
  using iterator = JsonObjectIterator;

  // Creates an unbound reference.
  JsonObject() : data_(0), resources_(0) {}
 8003092:	b480      	push	{r7}
 8003094:	b083      	sub	sp, #12
 8003096:	af00      	add	r7, sp, #0
 8003098:	6078      	str	r0, [r7, #4]
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2200      	movs	r2, #0
 800309e:	601a      	str	r2, [r3, #0]
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2200      	movs	r2, #0
 80030a4:	605a      	str	r2, [r3, #4]
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	4618      	mov	r0, r3
 80030aa:	370c      	adds	r7, #12
 80030ac:	46bd      	mov	sp, r7
 80030ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b2:	4770      	bx	lr

080030b4 <_ZN11ArduinoJson8V730HB2210JsonObjectC1EPNS0_6detail10ObjectDataEPNS2_15ResourceManagerE>:

  // INTERNAL USE ONLY
  JsonObject(detail::ObjectData* data, detail::ResourceManager* resource)
 80030b4:	b480      	push	{r7}
 80030b6:	b085      	sub	sp, #20
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	60f8      	str	r0, [r7, #12]
 80030bc:	60b9      	str	r1, [r7, #8]
 80030be:	607a      	str	r2, [r7, #4]
      : data_(data), resources_(resource) {}
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	68ba      	ldr	r2, [r7, #8]
 80030c4:	601a      	str	r2, [r3, #0]
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	687a      	ldr	r2, [r7, #4]
 80030ca:	605a      	str	r2, [r3, #4]
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	4618      	mov	r0, r3
 80030d0:	3714      	adds	r7, #20
 80030d2:	46bd      	mov	sp, r7
 80030d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d8:	4770      	bx	lr

080030da <_ZNK11ArduinoJson8V730HB2210JsonObject18getResourceManagerEv>:
  size_t memoryUsage() const {
    return 0;
  }

 private:
  detail::ResourceManager* getResourceManager() const {
 80030da:	b480      	push	{r7}
 80030dc:	b083      	sub	sp, #12
 80030de:	af00      	add	r7, sp, #0
 80030e0:	6078      	str	r0, [r7, #4]
    return resources_;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	685b      	ldr	r3, [r3, #4]
  }
 80030e6:	4618      	mov	r0, r3
 80030e8:	370c      	adds	r7, #12
 80030ea:	46bd      	mov	sp, r7
 80030ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f0:	4770      	bx	lr

080030f2 <_ZNK11ArduinoJson8V730HB2210JsonObject7getDataEv>:

  detail::VariantData* getData() const {
 80030f2:	b580      	push	{r7, lr}
 80030f4:	b082      	sub	sp, #8
 80030f6:	af00      	add	r7, sp, #0
 80030f8:	6078      	str	r0, [r7, #4]
    return detail::collectionToVariant(data_);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	4618      	mov	r0, r3
 8003100:	f7ff fc2f 	bl	8002962 <_ZN11ArduinoJson8V730HB226detail19collectionToVariantEPNS1_14CollectionDataE>
 8003104:	4603      	mov	r3, r0
  }
 8003106:	4618      	mov	r0, r3
 8003108:	3708      	adds	r7, #8
 800310a:	46bd      	mov	sp, r7
 800310c:	bd80      	pop	{r7, pc}

0800310e <_ZN11ArduinoJson8V730HB2212JsonDocumentC1EPNS0_9AllocatorE>:
// https://arduinojson.org/v7/api/jsondocument/
class JsonDocument : public detail::VariantOperators<const JsonDocument&> {
  friend class detail::VariantAttorney;

 public:
  explicit JsonDocument(Allocator* alloc = detail::DefaultAllocator::instance())
 800310e:	b580      	push	{r7, lr}
 8003110:	b082      	sub	sp, #8
 8003112:	af00      	add	r7, sp, #0
 8003114:	6078      	str	r0, [r7, #4]
 8003116:	6039      	str	r1, [r7, #0]
      : resources_(alloc) {}
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6839      	ldr	r1, [r7, #0]
 800311c:	4618      	mov	r0, r3
 800311e:	f7ff fdf8 	bl	8002d12 <_ZN11ArduinoJson8V730HB226detail15ResourceManagerC1EPNS0_9AllocatorE>
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	3338      	adds	r3, #56	@ 0x38
 8003126:	4618      	mov	r0, r3
 8003128:	f7ff fc56 	bl	80029d8 <_ZN11ArduinoJson8V730HB226detail11VariantDataC1Ev>
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	4618      	mov	r0, r3
 8003130:	3708      	adds	r7, #8
 8003132:	46bd      	mov	sp, r7
 8003134:	bd80      	pop	{r7, pc}

08003136 <_ZN11ArduinoJson8V730HB2212JsonDocument11shrinkToFitEv>:
    return resources_.allocator();
  }

  // Reduces the capacity of the memory pool to match the current usage.
  // https://arduinojson.org/v7/api/jsondocument/shrinktofit/
  void shrinkToFit() {
 8003136:	b580      	push	{r7, lr}
 8003138:	b082      	sub	sp, #8
 800313a:	af00      	add	r7, sp, #0
 800313c:	6078      	str	r0, [r7, #4]
    resources_.shrinkToFit();
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	4618      	mov	r0, r3
 8003142:	f7ff fe7d 	bl	8002e40 <_ZN11ArduinoJson8V730HB226detail15ResourceManager11shrinkToFitEv>
  }
 8003146:	bf00      	nop
 8003148:	3708      	adds	r7, #8
 800314a:	46bd      	mov	sp, r7
 800314c:	bd80      	pop	{r7, pc}

0800314e <_ZN11ArduinoJson8V730HB2212JsonDocument5clearEv>:
    return getVariant().template as<T>();
  }

  // Empties the document and resets the memory pool
  // https://arduinojson.org/v7/api/jsondocument/clear/
  void clear() {
 800314e:	b580      	push	{r7, lr}
 8003150:	b082      	sub	sp, #8
 8003152:	af00      	add	r7, sp, #0
 8003154:	6078      	str	r0, [r7, #4]
    resources_.clear();
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	4618      	mov	r0, r3
 800315a:	f7ff fe54 	bl	8002e06 <_ZN11ArduinoJson8V730HB226detail15ResourceManager5clearEv>
    data_.reset();
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	3338      	adds	r3, #56	@ 0x38
 8003162:	4618      	mov	r0, r3
 8003164:	f7ff fd0d 	bl	8002b82 <_ZN11ArduinoJson8V730HB226detail11VariantData5resetEv>
  }
 8003168:	bf00      	nop
 800316a:	3708      	adds	r7, #8
 800316c:	46bd      	mov	sp, r7
 800316e:	bd80      	pop	{r7, pc}

08003170 <_ZN11ArduinoJson8V730HB2212JsonDocument18getResourceManagerEv>:

  JsonVariantConst getVariant() const {
    return JsonVariantConst(&data_, &resources_);
  }

  detail::ResourceManager* getResourceManager() {
 8003170:	b480      	push	{r7}
 8003172:	b083      	sub	sp, #12
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
    return &resources_;
 8003178:	687b      	ldr	r3, [r7, #4]
  }
 800317a:	4618      	mov	r0, r3
 800317c:	370c      	adds	r7, #12
 800317e:	46bd      	mov	sp, r7
 8003180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003184:	4770      	bx	lr

08003186 <_ZN11ArduinoJson8V730HB2212JsonDocument7getDataEv>:

  detail::VariantData* getData() {
 8003186:	b480      	push	{r7}
 8003188:	b083      	sub	sp, #12
 800318a:	af00      	add	r7, sp, #0
 800318c:	6078      	str	r0, [r7, #4]
    return &data_;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	3338      	adds	r3, #56	@ 0x38
  }
 8003192:	4618      	mov	r0, r3
 8003194:	370c      	adds	r7, #12
 8003196:	46bd      	mov	sp, r7
 8003198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319c:	4770      	bx	lr

0800319e <_ZN11ArduinoJson8V730HB2212JsonDocument15getOrCreateDataEv>:

  const detail::VariantData* getData() const {
    return &data_;
  }

  detail::VariantData* getOrCreateData() {
 800319e:	b480      	push	{r7}
 80031a0:	b083      	sub	sp, #12
 80031a2:	af00      	add	r7, sp, #0
 80031a4:	6078      	str	r0, [r7, #4]
    return &data_;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	3338      	adds	r3, #56	@ 0x38
  }
 80031aa:	4618      	mov	r0, r3
 80031ac:	370c      	adds	r7, #12
 80031ae:	46bd      	mov	sp, r7
 80031b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b4:	4770      	bx	lr

080031b6 <_ZN11ArduinoJson8V730HB226detail9ArrayData10addElementEPNS1_15ResourceManagerE>:
    --index;
  }
  return it;
}

inline VariantData* ArrayData::addElement(ResourceManager* resources) {
 80031b6:	b580      	push	{r7, lr}
 80031b8:	b084      	sub	sp, #16
 80031ba:	af00      	add	r7, sp, #0
 80031bc:	6078      	str	r0, [r7, #4]
 80031be:	6039      	str	r1, [r7, #0]
  auto slot = resources->allocVariant();
 80031c0:	f107 0308 	add.w	r3, r7, #8
 80031c4:	6839      	ldr	r1, [r7, #0]
 80031c6:	4618      	mov	r0, r3
 80031c8:	f000 f93e 	bl	8003448 <_ZN11ArduinoJson8V730HB226detail15ResourceManager12allocVariantEv>
  if (!slot)
 80031cc:	f107 0308 	add.w	r3, r7, #8
 80031d0:	4618      	mov	r0, r3
 80031d2:	f001 fbdd 	bl	8004990 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEEcvbEv>
 80031d6:	4603      	mov	r3, r0
 80031d8:	f083 0301 	eor.w	r3, r3, #1
 80031dc:	b2db      	uxtb	r3, r3
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d001      	beq.n	80031e6 <_ZN11ArduinoJson8V730HB226detail9ArrayData10addElementEPNS1_15ResourceManagerE+0x30>
    return nullptr;
 80031e2:	2300      	movs	r3, #0
 80031e4:	e00d      	b.n	8003202 <_ZN11ArduinoJson8V730HB226detail9ArrayData10addElementEPNS1_15ResourceManagerE+0x4c>
  CollectionData::appendOne(slot, resources);
 80031e6:	6878      	ldr	r0, [r7, #4]
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	f107 0208 	add.w	r2, r7, #8
 80031ee:	ca06      	ldmia	r2, {r1, r2}
 80031f0:	f000 f867 	bl	80032c2 <_ZN11ArduinoJson8V730HB226detail14CollectionData9appendOneENS1_4SlotINS1_11VariantDataEEEPKNS1_15ResourceManagerE>
  return slot.ptr();
 80031f4:	f107 0308 	add.w	r3, r7, #8
 80031f8:	4618      	mov	r0, r3
 80031fa:	f001 fbda 	bl	80049b2 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEE3ptrEv>
 80031fe:	4603      	mov	r3, r0
 8003200:	bf00      	nop
}
 8003202:	4618      	mov	r0, r3
 8003204:	3710      	adds	r7, #16
 8003206:	46bd      	mov	sp, r7
 8003208:	bd80      	pop	{r7, pc}

0800320a <_ZN11ArduinoJson8V730HB226detail18CollectionIteratorC1EPNS1_11VariantDataEt>:
#include <ArduinoJson/Variant/VariantCompare.hpp>
#include <ArduinoJson/Variant/VariantData.hpp>

ARDUINOJSON_BEGIN_PRIVATE_NAMESPACE

inline CollectionIterator::CollectionIterator(VariantData* slot, SlotId slotId)
 800320a:	b580      	push	{r7, lr}
 800320c:	b084      	sub	sp, #16
 800320e:	af00      	add	r7, sp, #0
 8003210:	60f8      	str	r0, [r7, #12]
 8003212:	60b9      	str	r1, [r7, #8]
 8003214:	4613      	mov	r3, r2
 8003216:	80fb      	strh	r3, [r7, #6]
    : slot_(slot), currentId_(slotId) {
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	68ba      	ldr	r2, [r7, #8]
 800321c:	601a      	str	r2, [r3, #0]
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	88fa      	ldrh	r2, [r7, #6]
 8003222:	809a      	strh	r2, [r3, #4]
  nextId_ = slot_ ? slot_->next() : NULL_SLOT;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	2b00      	cmp	r3, #0
 800322a:	d007      	beq.n	800323c <_ZN11ArduinoJson8V730HB226detail18CollectionIteratorC1EPNS1_11VariantDataEt+0x32>
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	4618      	mov	r0, r3
 8003232:	f7ff fbe5 	bl	8002a00 <_ZNK11ArduinoJson8V730HB226detail11VariantData4nextEv>
 8003236:	4603      	mov	r3, r0
 8003238:	461a      	mov	r2, r3
 800323a:	e001      	b.n	8003240 <_ZN11ArduinoJson8V730HB226detail18CollectionIteratorC1EPNS1_11VariantDataEt+0x36>
 800323c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	80da      	strh	r2, [r3, #6]
}
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	4618      	mov	r0, r3
 8003248:	3710      	adds	r7, #16
 800324a:	46bd      	mov	sp, r7
 800324c:	bd80      	pop	{r7, pc}

0800324e <_ZN11ArduinoJson8V730HB226detail18CollectionIterator4nextEPKNS1_15ResourceManagerE>:

inline void CollectionIterator::next(const ResourceManager* resources) {
 800324e:	b580      	push	{r7, lr}
 8003250:	b082      	sub	sp, #8
 8003252:	af00      	add	r7, sp, #0
 8003254:	6078      	str	r0, [r7, #4]
 8003256:	6039      	str	r1, [r7, #0]
  ARDUINOJSON_ASSERT(currentId_ != NULL_SLOT);
  slot_ = resources->getVariant(nextId_);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	88db      	ldrh	r3, [r3, #6]
 800325c:	4619      	mov	r1, r3
 800325e:	6838      	ldr	r0, [r7, #0]
 8003260:	f000 f965 	bl	800352e <_ZNK11ArduinoJson8V730HB226detail15ResourceManager10getVariantEt>
 8003264:	4602      	mov	r2, r0
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	601a      	str	r2, [r3, #0]
  currentId_ = nextId_;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	88da      	ldrh	r2, [r3, #6]
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	809a      	strh	r2, [r3, #4]
  if (slot_)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	2b00      	cmp	r3, #0
 8003278:	d008      	beq.n	800328c <_ZN11ArduinoJson8V730HB226detail18CollectionIterator4nextEPKNS1_15ResourceManagerE+0x3e>
    nextId_ = slot_->next();
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	4618      	mov	r0, r3
 8003280:	f7ff fbbe 	bl	8002a00 <_ZNK11ArduinoJson8V730HB226detail11VariantData4nextEv>
 8003284:	4603      	mov	r3, r0
 8003286:	461a      	mov	r2, r3
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	80da      	strh	r2, [r3, #6]
}
 800328c:	bf00      	nop
 800328e:	3708      	adds	r7, #8
 8003290:	46bd      	mov	sp, r7
 8003292:	bd80      	pop	{r7, pc}

08003294 <_ZNK11ArduinoJson8V730HB226detail14CollectionData14createIteratorEPKNS1_15ResourceManagerE>:

inline CollectionData::iterator CollectionData::createIterator(
    const ResourceManager* resources) const {
 8003294:	b580      	push	{r7, lr}
 8003296:	b084      	sub	sp, #16
 8003298:	af00      	add	r7, sp, #0
 800329a:	60f8      	str	r0, [r7, #12]
 800329c:	60b9      	str	r1, [r7, #8]
 800329e:	607a      	str	r2, [r7, #4]
  return iterator(resources->getVariant(head_), head_);
 80032a0:	68bb      	ldr	r3, [r7, #8]
 80032a2:	881b      	ldrh	r3, [r3, #0]
 80032a4:	4619      	mov	r1, r3
 80032a6:	6878      	ldr	r0, [r7, #4]
 80032a8:	f000 f941 	bl	800352e <_ZNK11ArduinoJson8V730HB226detail15ResourceManager10getVariantEt>
 80032ac:	4601      	mov	r1, r0
 80032ae:	68bb      	ldr	r3, [r7, #8]
 80032b0:	881b      	ldrh	r3, [r3, #0]
 80032b2:	461a      	mov	r2, r3
 80032b4:	68f8      	ldr	r0, [r7, #12]
 80032b6:	f7ff ffa8 	bl	800320a <_ZN11ArduinoJson8V730HB226detail18CollectionIteratorC1EPNS1_11VariantDataEt>
}
 80032ba:	68f8      	ldr	r0, [r7, #12]
 80032bc:	3710      	adds	r7, #16
 80032be:	46bd      	mov	sp, r7
 80032c0:	bd80      	pop	{r7, pc}

080032c2 <_ZN11ArduinoJson8V730HB226detail14CollectionData9appendOneENS1_4SlotINS1_11VariantDataEEEPKNS1_15ResourceManagerE>:

inline void CollectionData::appendOne(Slot<VariantData> slot,
                                      const ResourceManager* resources) {
 80032c2:	b590      	push	{r4, r7, lr}
 80032c4:	b087      	sub	sp, #28
 80032c6:	af00      	add	r7, sp, #0
 80032c8:	60f8      	str	r0, [r7, #12]
 80032ca:	1d38      	adds	r0, r7, #4
 80032cc:	e880 0006 	stmia.w	r0, {r1, r2}
 80032d0:	603b      	str	r3, [r7, #0]
  if (tail_ != NULL_SLOT) {
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	885b      	ldrh	r3, [r3, #2]
 80032d6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80032da:	4293      	cmp	r3, r2
 80032dc:	d019      	beq.n	8003312 <_ZN11ArduinoJson8V730HB226detail14CollectionData9appendOneENS1_4SlotINS1_11VariantDataEEEPKNS1_15ResourceManagerE+0x50>
    auto tail = resources->getVariant(tail_);
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	885b      	ldrh	r3, [r3, #2]
 80032e2:	4619      	mov	r1, r3
 80032e4:	6838      	ldr	r0, [r7, #0]
 80032e6:	f000 f922 	bl	800352e <_ZNK11ArduinoJson8V730HB226detail15ResourceManager10getVariantEt>
 80032ea:	6178      	str	r0, [r7, #20]
    tail->setNext(slot.id());
 80032ec:	697c      	ldr	r4, [r7, #20]
 80032ee:	1d3b      	adds	r3, r7, #4
 80032f0:	4618      	mov	r0, r3
 80032f2:	f001 fb6a 	bl	80049ca <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEE2idEv>
 80032f6:	4603      	mov	r3, r0
 80032f8:	4619      	mov	r1, r3
 80032fa:	4620      	mov	r0, r4
 80032fc:	f7ff fb8c 	bl	8002a18 <_ZN11ArduinoJson8V730HB226detail11VariantData7setNextEt>
    tail_ = slot.id();
 8003300:	1d3b      	adds	r3, r7, #4
 8003302:	4618      	mov	r0, r3
 8003304:	f001 fb61 	bl	80049ca <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEE2idEv>
 8003308:	4603      	mov	r3, r0
 800330a:	461a      	mov	r2, r3
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	805a      	strh	r2, [r3, #2]
  } else {
    head_ = slot.id();
    tail_ = slot.id();
  }
}
 8003310:	e00f      	b.n	8003332 <_ZN11ArduinoJson8V730HB226detail14CollectionData9appendOneENS1_4SlotINS1_11VariantDataEEEPKNS1_15ResourceManagerE+0x70>
    head_ = slot.id();
 8003312:	1d3b      	adds	r3, r7, #4
 8003314:	4618      	mov	r0, r3
 8003316:	f001 fb58 	bl	80049ca <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEE2idEv>
 800331a:	4603      	mov	r3, r0
 800331c:	461a      	mov	r2, r3
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	801a      	strh	r2, [r3, #0]
    tail_ = slot.id();
 8003322:	1d3b      	adds	r3, r7, #4
 8003324:	4618      	mov	r0, r3
 8003326:	f001 fb50 	bl	80049ca <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEE2idEv>
 800332a:	4603      	mov	r3, r0
 800332c:	461a      	mov	r2, r3
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	805a      	strh	r2, [r3, #2]
}
 8003332:	bf00      	nop
 8003334:	371c      	adds	r7, #28
 8003336:	46bd      	mov	sp, r7
 8003338:	bd90      	pop	{r4, r7, pc}

0800333a <_ZN11ArduinoJson8V730HB226detail14CollectionData10appendPairENS1_4SlotINS1_11VariantDataEEES5_PKNS1_15ResourceManagerE>:

inline void CollectionData::appendPair(Slot<VariantData> key,
                                       Slot<VariantData> value,
                                       const ResourceManager* resources) {
 800333a:	b082      	sub	sp, #8
 800333c:	b590      	push	{r4, r7, lr}
 800333e:	b087      	sub	sp, #28
 8003340:	af00      	add	r7, sp, #0
 8003342:	60f8      	str	r0, [r7, #12]
 8003344:	1d38      	adds	r0, r7, #4
 8003346:	e880 0006 	stmia.w	r0, {r1, r2}
 800334a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  key->setNext(value.id());
 800334c:	1d3b      	adds	r3, r7, #4
 800334e:	4618      	mov	r0, r3
 8003350:	f001 fb47 	bl	80049e2 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEEptEv>
 8003354:	4604      	mov	r4, r0
 8003356:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800335a:	4618      	mov	r0, r3
 800335c:	f001 fb35 	bl	80049ca <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEE2idEv>
 8003360:	4603      	mov	r3, r0
 8003362:	4619      	mov	r1, r3
 8003364:	4620      	mov	r0, r4
 8003366:	f7ff fb57 	bl	8002a18 <_ZN11ArduinoJson8V730HB226detail11VariantData7setNextEt>

  if (tail_ != NULL_SLOT) {
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	885b      	ldrh	r3, [r3, #2]
 800336e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003372:	4293      	cmp	r3, r2
 8003374:	d01a      	beq.n	80033ac <_ZN11ArduinoJson8V730HB226detail14CollectionData10appendPairENS1_4SlotINS1_11VariantDataEEES5_PKNS1_15ResourceManagerE+0x72>
    auto tail = resources->getVariant(tail_);
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	885b      	ldrh	r3, [r3, #2]
 800337a:	4619      	mov	r1, r3
 800337c:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800337e:	f000 f8d6 	bl	800352e <_ZNK11ArduinoJson8V730HB226detail15ResourceManager10getVariantEt>
 8003382:	6178      	str	r0, [r7, #20]
    tail->setNext(key.id());
 8003384:	697c      	ldr	r4, [r7, #20]
 8003386:	1d3b      	adds	r3, r7, #4
 8003388:	4618      	mov	r0, r3
 800338a:	f001 fb1e 	bl	80049ca <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEE2idEv>
 800338e:	4603      	mov	r3, r0
 8003390:	4619      	mov	r1, r3
 8003392:	4620      	mov	r0, r4
 8003394:	f7ff fb40 	bl	8002a18 <_ZN11ArduinoJson8V730HB226detail11VariantData7setNextEt>
    tail_ = value.id();
 8003398:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800339c:	4618      	mov	r0, r3
 800339e:	f001 fb14 	bl	80049ca <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEE2idEv>
 80033a2:	4603      	mov	r3, r0
 80033a4:	461a      	mov	r2, r3
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	805a      	strh	r2, [r3, #2]
  } else {
    head_ = key.id();
    tail_ = value.id();
  }
}
 80033aa:	e010      	b.n	80033ce <_ZN11ArduinoJson8V730HB226detail14CollectionData10appendPairENS1_4SlotINS1_11VariantDataEEES5_PKNS1_15ResourceManagerE+0x94>
    head_ = key.id();
 80033ac:	1d3b      	adds	r3, r7, #4
 80033ae:	4618      	mov	r0, r3
 80033b0:	f001 fb0b 	bl	80049ca <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEE2idEv>
 80033b4:	4603      	mov	r3, r0
 80033b6:	461a      	mov	r2, r3
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	801a      	strh	r2, [r3, #0]
    tail_ = value.id();
 80033bc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80033c0:	4618      	mov	r0, r3
 80033c2:	f001 fb02 	bl	80049ca <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEE2idEv>
 80033c6:	4603      	mov	r3, r0
 80033c8:	461a      	mov	r2, r3
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	805a      	strh	r2, [r3, #2]
}
 80033ce:	bf00      	nop
 80033d0:	371c      	adds	r7, #28
 80033d2:	46bd      	mov	sp, r7
 80033d4:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80033d8:	b002      	add	sp, #8
 80033da:	4770      	bx	lr

080033dc <_ZN11ArduinoJson8V730HB226detail14CollectionData5clearEPNS1_15ResourceManagerE>:

inline void CollectionData::clear(ResourceManager* resources) {
 80033dc:	b590      	push	{r4, r7, lr}
 80033de:	b087      	sub	sp, #28
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
 80033e4:	6039      	str	r1, [r7, #0]
  auto next = head_;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	881b      	ldrh	r3, [r3, #0]
 80033ea:	82fb      	strh	r3, [r7, #22]
  while (next != NULL_SLOT) {
 80033ec:	e01b      	b.n	8003426 <_ZN11ArduinoJson8V730HB226detail14CollectionData5clearEPNS1_15ResourceManagerE+0x4a>
    auto currId = next;
 80033ee:	8afb      	ldrh	r3, [r7, #22]
 80033f0:	82bb      	strh	r3, [r7, #20]
    auto slot = resources->getVariant(next);
 80033f2:	8afb      	ldrh	r3, [r7, #22]
 80033f4:	4619      	mov	r1, r3
 80033f6:	6838      	ldr	r0, [r7, #0]
 80033f8:	f000 f899 	bl	800352e <_ZNK11ArduinoJson8V730HB226detail15ResourceManager10getVariantEt>
 80033fc:	6138      	str	r0, [r7, #16]
    next = slot->next();
 80033fe:	6938      	ldr	r0, [r7, #16]
 8003400:	f7ff fafe 	bl	8002a00 <_ZNK11ArduinoJson8V730HB226detail11VariantData4nextEv>
 8003404:	4603      	mov	r3, r0
 8003406:	82fb      	strh	r3, [r7, #22]
    resources->freeVariant({slot, currId});
 8003408:	683c      	ldr	r4, [r7, #0]
 800340a:	8aba      	ldrh	r2, [r7, #20]
 800340c:	f107 0308 	add.w	r3, r7, #8
 8003410:	6939      	ldr	r1, [r7, #16]
 8003412:	4618      	mov	r0, r3
 8003414:	f001 faf1 	bl	80049fa <_ZN11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEEC1EPS3_t>
 8003418:	f107 0308 	add.w	r3, r7, #8
 800341c:	e893 0006 	ldmia.w	r3, {r1, r2}
 8003420:	4620      	mov	r0, r4
 8003422:	f000 f851 	bl	80034c8 <_ZN11ArduinoJson8V730HB226detail15ResourceManager11freeVariantENS1_4SlotINS1_11VariantDataEEE>
  while (next != NULL_SLOT) {
 8003426:	8afb      	ldrh	r3, [r7, #22]
 8003428:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800342c:	4293      	cmp	r3, r2
 800342e:	d1de      	bne.n	80033ee <_ZN11ArduinoJson8V730HB226detail14CollectionData5clearEPNS1_15ResourceManagerE+0x12>
  }

  head_ = NULL_SLOT;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003436:	801a      	strh	r2, [r3, #0]
  tail_ = NULL_SLOT;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800343e:	805a      	strh	r2, [r3, #2]
}
 8003440:	bf00      	nop
 8003442:	371c      	adds	r7, #28
 8003444:	46bd      	mov	sp, r7
 8003446:	bd90      	pop	{r4, r7, pc}

08003448 <_ZN11ArduinoJson8V730HB226detail15ResourceManager12allocVariantEv>:
#include <ArduinoJson/Polyfills/alias_cast.hpp>
#include <ArduinoJson/Variant/VariantData.hpp>

ARDUINOJSON_BEGIN_PRIVATE_NAMESPACE

inline Slot<VariantData> ResourceManager::allocVariant() {
 8003448:	b590      	push	{r4, r7, lr}
 800344a:	b085      	sub	sp, #20
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
 8003450:	6039      	str	r1, [r7, #0]
  auto p = variantPools_.allocSlot(allocator_);
 8003452:	683b      	ldr	r3, [r7, #0]
 8003454:	f103 010c 	add.w	r1, r3, #12
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	681a      	ldr	r2, [r3, #0]
 800345c:	f107 0308 	add.w	r3, r7, #8
 8003460:	4618      	mov	r0, r3
 8003462:	f001 faf0 	bl	8004a46 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE9allocSlotEPNS0_9AllocatorE>
  if (!p) {
 8003466:	f107 0308 	add.w	r3, r7, #8
 800346a:	4618      	mov	r0, r3
 800346c:	f001 fb2e 	bl	8004acc <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_15ResourceManager8SlotDataEEcvbEv>
 8003470:	4603      	mov	r3, r0
 8003472:	f083 0301 	eor.w	r3, r3, #1
 8003476:	b2db      	uxtb	r3, r3
 8003478:	2b00      	cmp	r3, #0
 800347a:	d006      	beq.n	800348a <_ZN11ArduinoJson8V730HB226detail15ResourceManager12allocVariantEv+0x42>
    overflowed_ = true;
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	2201      	movs	r2, #1
 8003480:	711a      	strb	r2, [r3, #4]
    return {};
 8003482:	6878      	ldr	r0, [r7, #4]
 8003484:	f001 facd 	bl	8004a22 <_ZN11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEEC1Ev>
 8003488:	e01a      	b.n	80034c0 <_ZN11ArduinoJson8V730HB226detail15ResourceManager12allocVariantEv+0x78>
  }
  return {new (&p->variant) VariantData, p.id()};
 800348a:	f107 0308 	add.w	r3, r7, #8
 800348e:	4618      	mov	r0, r3
 8003490:	f001 fb2d 	bl	8004aee <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_15ResourceManager8SlotDataEEptEv>
 8003494:	4603      	mov	r3, r0
 8003496:	4619      	mov	r1, r3
 8003498:	2008      	movs	r0, #8
 800349a:	f7ff fa91 	bl	80029c0 <_ZN11ArduinoJson8V730HB226detail11VariantDatanwEjPv>
 800349e:	4604      	mov	r4, r0
 80034a0:	2c00      	cmp	r4, #0
 80034a2:	d002      	beq.n	80034aa <_ZN11ArduinoJson8V730HB226detail15ResourceManager12allocVariantEv+0x62>
 80034a4:	4620      	mov	r0, r4
 80034a6:	f7ff fa97 	bl	80029d8 <_ZN11ArduinoJson8V730HB226detail11VariantDataC1Ev>
 80034aa:	f107 0308 	add.w	r3, r7, #8
 80034ae:	4618      	mov	r0, r3
 80034b0:	f001 fb29 	bl	8004b06 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_15ResourceManager8SlotDataEE2idEv>
 80034b4:	4603      	mov	r3, r0
 80034b6:	461a      	mov	r2, r3
 80034b8:	4621      	mov	r1, r4
 80034ba:	6878      	ldr	r0, [r7, #4]
 80034bc:	f001 fa9d 	bl	80049fa <_ZN11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEEC1EPS3_t>
}
 80034c0:	6878      	ldr	r0, [r7, #4]
 80034c2:	3714      	adds	r7, #20
 80034c4:	46bd      	mov	sp, r7
 80034c6:	bd90      	pop	{r4, r7, pc}

080034c8 <_ZN11ArduinoJson8V730HB226detail15ResourceManager11freeVariantENS1_4SlotINS1_11VariantDataEEE>:

inline void ResourceManager::freeVariant(Slot<VariantData> variant) {
 80034c8:	b5b0      	push	{r4, r5, r7, lr}
 80034ca:	b086      	sub	sp, #24
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	60f8      	str	r0, [r7, #12]
 80034d0:	1d3b      	adds	r3, r7, #4
 80034d2:	e883 0006 	stmia.w	r3, {r1, r2}
  variant->clear(this);
 80034d6:	1d3b      	adds	r3, r7, #4
 80034d8:	4618      	mov	r0, r3
 80034da:	f001 fa82 	bl	80049e2 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEEptEv>
 80034de:	4603      	mov	r3, r0
 80034e0:	68f9      	ldr	r1, [r7, #12]
 80034e2:	4618      	mov	r0, r3
 80034e4:	f000 fa1c 	bl	8003920 <_ZN11ArduinoJson8V730HB226detail11VariantData5clearEPNS1_15ResourceManagerE>
  variantPools_.freeSlot({alias_cast<SlotData*>(variant.ptr()), variant.id()});
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	f103 040c 	add.w	r4, r3, #12
 80034ee:	1d3b      	adds	r3, r7, #4
 80034f0:	4618      	mov	r0, r3
 80034f2:	f001 fa5e 	bl	80049b2 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEE3ptrEv>
 80034f6:	4603      	mov	r3, r0
 80034f8:	4618      	mov	r0, r3
 80034fa:	f001 fb10 	bl	8004b1e <_ZN11ArduinoJson8V730HB226detail10alias_castIPNS1_15ResourceManager8SlotDataEPNS1_11VariantDataEEET_T0_>
 80034fe:	4605      	mov	r5, r0
 8003500:	1d3b      	adds	r3, r7, #4
 8003502:	4618      	mov	r0, r3
 8003504:	f001 fa61 	bl	80049ca <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEE2idEv>
 8003508:	4603      	mov	r3, r0
 800350a:	461a      	mov	r2, r3
 800350c:	f107 0310 	add.w	r3, r7, #16
 8003510:	4629      	mov	r1, r5
 8003512:	4618      	mov	r0, r3
 8003514:	f001 fb10 	bl	8004b38 <_ZN11ArduinoJson8V730HB226detail4SlotINS1_15ResourceManager8SlotDataEEC1EPS4_t>
 8003518:	f107 0310 	add.w	r3, r7, #16
 800351c:	e893 0006 	ldmia.w	r3, {r1, r2}
 8003520:	4620      	mov	r0, r4
 8003522:	f001 fb1d 	bl	8004b60 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE8freeSlotENS1_4SlotIS4_EE>
}
 8003526:	bf00      	nop
 8003528:	3718      	adds	r7, #24
 800352a:	46bd      	mov	sp, r7
 800352c:	bdb0      	pop	{r4, r5, r7, pc}

0800352e <_ZNK11ArduinoJson8V730HB226detail15ResourceManager10getVariantEt>:

inline VariantData* ResourceManager::getVariant(SlotId id) const {
 800352e:	b580      	push	{r7, lr}
 8003530:	b082      	sub	sp, #8
 8003532:	af00      	add	r7, sp, #0
 8003534:	6078      	str	r0, [r7, #4]
 8003536:	460b      	mov	r3, r1
 8003538:	807b      	strh	r3, [r7, #2]
  return reinterpret_cast<VariantData*>(variantPools_.getSlot(id));
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	330c      	adds	r3, #12
 800353e:	887a      	ldrh	r2, [r7, #2]
 8003540:	4611      	mov	r1, r2
 8003542:	4618      	mov	r0, r3
 8003544:	f001 fb28 	bl	8004b98 <_ZNK11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE7getSlotEt>
 8003548:	4603      	mov	r3, r0
}
 800354a:	4618      	mov	r0, r3
 800354c:	3708      	adds	r7, #8
 800354e:	46bd      	mov	sp, r7
 8003550:	bd80      	pop	{r7, pc}

08003552 <_ZN11ArduinoJson8V730HB226detail15ResourceManager14allocExtensionEv>:

#if ARDUINOJSON_USE_EXTENSIONS
inline Slot<VariantExtension> ResourceManager::allocExtension() {
 8003552:	b590      	push	{r4, r7, lr}
 8003554:	b085      	sub	sp, #20
 8003556:	af00      	add	r7, sp, #0
 8003558:	6078      	str	r0, [r7, #4]
 800355a:	6039      	str	r1, [r7, #0]
  auto p = variantPools_.allocSlot(allocator_);
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	f103 010c 	add.w	r1, r3, #12
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	681a      	ldr	r2, [r3, #0]
 8003566:	f107 0308 	add.w	r3, r7, #8
 800356a:	4618      	mov	r0, r3
 800356c:	f001 fa6b 	bl	8004a46 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE9allocSlotEPNS0_9AllocatorE>
  if (!p) {
 8003570:	f107 0308 	add.w	r3, r7, #8
 8003574:	4618      	mov	r0, r3
 8003576:	f001 faa9 	bl	8004acc <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_15ResourceManager8SlotDataEEcvbEv>
 800357a:	4603      	mov	r3, r0
 800357c:	f083 0301 	eor.w	r3, r3, #1
 8003580:	b2db      	uxtb	r3, r3
 8003582:	2b00      	cmp	r3, #0
 8003584:	d006      	beq.n	8003594 <_ZN11ArduinoJson8V730HB226detail15ResourceManager14allocExtensionEv+0x42>
    overflowed_ = true;
 8003586:	683b      	ldr	r3, [r7, #0]
 8003588:	2201      	movs	r2, #1
 800358a:	711a      	strb	r2, [r3, #4]
    return {};
 800358c:	6878      	ldr	r0, [r7, #4]
 800358e:	f001 fb27 	bl	8004be0 <_ZN11ArduinoJson8V730HB226detail4SlotINS1_16VariantExtensionEEC1Ev>
 8003592:	e011      	b.n	80035b8 <_ZN11ArduinoJson8V730HB226detail15ResourceManager14allocExtensionEv+0x66>
  }
  return {&p->extension, p.id()};
 8003594:	f107 0308 	add.w	r3, r7, #8
 8003598:	4618      	mov	r0, r3
 800359a:	f001 faa8 	bl	8004aee <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_15ResourceManager8SlotDataEEptEv>
 800359e:	4603      	mov	r3, r0
 80035a0:	461c      	mov	r4, r3
 80035a2:	f107 0308 	add.w	r3, r7, #8
 80035a6:	4618      	mov	r0, r3
 80035a8:	f001 faad 	bl	8004b06 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_15ResourceManager8SlotDataEE2idEv>
 80035ac:	4603      	mov	r3, r0
 80035ae:	461a      	mov	r2, r3
 80035b0:	4621      	mov	r1, r4
 80035b2:	6878      	ldr	r0, [r7, #4]
 80035b4:	f001 fb26 	bl	8004c04 <_ZN11ArduinoJson8V730HB226detail4SlotINS1_16VariantExtensionEEC1EPS3_t>
}
 80035b8:	6878      	ldr	r0, [r7, #4]
 80035ba:	3714      	adds	r7, #20
 80035bc:	46bd      	mov	sp, r7
 80035be:	bd90      	pop	{r4, r7, pc}

080035c0 <_ZN11ArduinoJson8V730HB226detail15ResourceManager13freeExtensionEt>:

inline void ResourceManager::freeExtension(SlotId id) {
 80035c0:	b590      	push	{r4, r7, lr}
 80035c2:	b087      	sub	sp, #28
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
 80035c8:	460b      	mov	r3, r1
 80035ca:	807b      	strh	r3, [r7, #2]
  auto p = getExtension(id);
 80035cc:	887b      	ldrh	r3, [r7, #2]
 80035ce:	4619      	mov	r1, r3
 80035d0:	6878      	ldr	r0, [r7, #4]
 80035d2:	f000 f816 	bl	8003602 <_ZNK11ArduinoJson8V730HB226detail15ResourceManager12getExtensionEt>
 80035d6:	6178      	str	r0, [r7, #20]
  variantPools_.freeSlot({reinterpret_cast<SlotData*>(p), id});
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	f103 040c 	add.w	r4, r3, #12
 80035de:	887a      	ldrh	r2, [r7, #2]
 80035e0:	f107 030c 	add.w	r3, r7, #12
 80035e4:	6979      	ldr	r1, [r7, #20]
 80035e6:	4618      	mov	r0, r3
 80035e8:	f001 faa6 	bl	8004b38 <_ZN11ArduinoJson8V730HB226detail4SlotINS1_15ResourceManager8SlotDataEEC1EPS4_t>
 80035ec:	f107 030c 	add.w	r3, r7, #12
 80035f0:	e893 0006 	ldmia.w	r3, {r1, r2}
 80035f4:	4620      	mov	r0, r4
 80035f6:	f001 fab3 	bl	8004b60 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE8freeSlotENS1_4SlotIS4_EE>
}
 80035fa:	bf00      	nop
 80035fc:	371c      	adds	r7, #28
 80035fe:	46bd      	mov	sp, r7
 8003600:	bd90      	pop	{r4, r7, pc}

08003602 <_ZNK11ArduinoJson8V730HB226detail15ResourceManager12getExtensionEt>:

inline VariantExtension* ResourceManager::getExtension(SlotId id) const {
 8003602:	b580      	push	{r7, lr}
 8003604:	b082      	sub	sp, #8
 8003606:	af00      	add	r7, sp, #0
 8003608:	6078      	str	r0, [r7, #4]
 800360a:	460b      	mov	r3, r1
 800360c:	807b      	strh	r3, [r7, #2]
  return &variantPools_.getSlot(id)->extension;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	330c      	adds	r3, #12
 8003612:	887a      	ldrh	r2, [r7, #2]
 8003614:	4611      	mov	r1, r2
 8003616:	4618      	mov	r0, r3
 8003618:	f001 fabe 	bl	8004b98 <_ZNK11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE7getSlotEt>
 800361c:	4603      	mov	r3, r0
}
 800361e:	4618      	mov	r0, r3
 8003620:	3708      	adds	r7, #8
 8003622:	46bd      	mov	sp, r7
 8003624:	bd80      	pop	{r7, pc}

08003626 <_ZN11ArduinoJson8V730HB226detail14EscapeSequence12unescapeCharEc>:
    }
    return p[0];
  }

  // Optimized for code size on a 8-bit AVR
  static char unescapeChar(char c) {
 8003626:	b580      	push	{r7, lr}
 8003628:	b084      	sub	sp, #16
 800362a:	af00      	add	r7, sp, #0
 800362c:	4603      	mov	r3, r0
 800362e:	71fb      	strb	r3, [r7, #7]
    const char* p = escapeTable(false);
 8003630:	2000      	movs	r0, #0
 8003632:	f000 f819 	bl	8003668 <_ZN11ArduinoJson8V730HB226detail14EscapeSequence11escapeTableEb>
 8003636:	60f8      	str	r0, [r7, #12]
    for (;;) {
      if (p[0] == '\0')
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	781b      	ldrb	r3, [r3, #0]
 800363c:	2b00      	cmp	r3, #0
 800363e:	d101      	bne.n	8003644 <_ZN11ArduinoJson8V730HB226detail14EscapeSequence12unescapeCharEc+0x1e>
        return 0;
 8003640:	2300      	movs	r3, #0
 8003642:	e00c      	b.n	800365e <_ZN11ArduinoJson8V730HB226detail14EscapeSequence12unescapeCharEc+0x38>
      if (p[0] == c)
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	781b      	ldrb	r3, [r3, #0]
 8003648:	79fa      	ldrb	r2, [r7, #7]
 800364a:	429a      	cmp	r2, r3
 800364c:	d103      	bne.n	8003656 <_ZN11ArduinoJson8V730HB226detail14EscapeSequence12unescapeCharEc+0x30>
        return p[1];
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	3301      	adds	r3, #1
 8003652:	781b      	ldrb	r3, [r3, #0]
 8003654:	e003      	b.n	800365e <_ZN11ArduinoJson8V730HB226detail14EscapeSequence12unescapeCharEc+0x38>
      p += 2;
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	3302      	adds	r3, #2
 800365a:	60fb      	str	r3, [r7, #12]
      if (p[0] == '\0')
 800365c:	e7ec      	b.n	8003638 <_ZN11ArduinoJson8V730HB226detail14EscapeSequence12unescapeCharEc+0x12>
    }
  }
 800365e:	4618      	mov	r0, r3
 8003660:	3710      	adds	r7, #16
 8003662:	46bd      	mov	sp, r7
 8003664:	bd80      	pop	{r7, pc}
	...

08003668 <_ZN11ArduinoJson8V730HB226detail14EscapeSequence11escapeTableEb>:

 private:
  static const char* escapeTable(bool isSerializing) {
 8003668:	b480      	push	{r7}
 800366a:	b083      	sub	sp, #12
 800366c:	af00      	add	r7, sp, #0
 800366e:	4603      	mov	r3, r0
 8003670:	71fb      	strb	r3, [r7, #7]
    return &"//''\"\"\\\\b\bf\fn\nr\rt\t"[isSerializing ? 4 : 0];
 8003672:	79fb      	ldrb	r3, [r7, #7]
 8003674:	2b00      	cmp	r3, #0
 8003676:	d001      	beq.n	800367c <_ZN11ArduinoJson8V730HB226detail14EscapeSequence11escapeTableEb+0x14>
 8003678:	2304      	movs	r3, #4
 800367a:	e000      	b.n	800367e <_ZN11ArduinoJson8V730HB226detail14EscapeSequence11escapeTableEb+0x16>
 800367c:	2300      	movs	r3, #0
 800367e:	4a04      	ldr	r2, [pc, #16]	@ (8003690 <_ZN11ArduinoJson8V730HB226detail14EscapeSequence11escapeTableEb+0x28>)
 8003680:	4413      	add	r3, r2
  }
 8003682:	4618      	mov	r0, r3
 8003684:	370c      	adds	r7, #12
 8003686:	46bd      	mov	sp, r7
 8003688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368c:	4770      	bx	lr
 800368e:	bf00      	nop
 8003690:	0801f7f0 	.word	0x0801f7f0

08003694 <_ZN11ArduinoJson8V730HB226detail13StringBuilderC1EPNS1_15ResourceManagerE>:

class StringBuilder {
 public:
  static const size_t initialCapacity = 31;

  StringBuilder(ResourceManager* resources) : resources_(resources) {}
 8003694:	b480      	push	{r7}
 8003696:	b083      	sub	sp, #12
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
 800369c:	6039      	str	r1, [r7, #0]
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	683a      	ldr	r2, [r7, #0]
 80036a2:	601a      	str	r2, [r3, #0]
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2200      	movs	r2, #0
 80036a8:	605a      	str	r2, [r3, #4]
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	2200      	movs	r2, #0
 80036ae:	609a      	str	r2, [r3, #8]
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	4618      	mov	r0, r3
 80036b4:	370c      	adds	r7, #12
 80036b6:	46bd      	mov	sp, r7
 80036b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036bc:	4770      	bx	lr

080036be <_ZN11ArduinoJson8V730HB226detail13StringBuilderD1Ev>:

  ~StringBuilder() {
 80036be:	b580      	push	{r7, lr}
 80036c0:	b082      	sub	sp, #8
 80036c2:	af00      	add	r7, sp, #0
 80036c4:	6078      	str	r0, [r7, #4]
    if (node_)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	685b      	ldr	r3, [r3, #4]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d007      	beq.n	80036de <_ZN11ArduinoJson8V730HB226detail13StringBuilderD1Ev+0x20>
      resources_->destroyString(node_);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681a      	ldr	r2, [r3, #0]
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	685b      	ldr	r3, [r3, #4]
 80036d6:	4619      	mov	r1, r3
 80036d8:	4610      	mov	r0, r2
 80036da:	f7ff fb73 	bl	8002dc4 <_ZN11ArduinoJson8V730HB226detail15ResourceManager13destroyStringEPNS1_10StringNodeE>
  }
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	4618      	mov	r0, r3
 80036e2:	3708      	adds	r7, #8
 80036e4:	46bd      	mov	sp, r7
 80036e6:	bd80      	pop	{r7, pc}

080036e8 <_ZN11ArduinoJson8V730HB226detail13StringBuilder11startStringEv>:

  void startString() {
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b082      	sub	sp, #8
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
    size_ = 0;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2200      	movs	r2, #0
 80036f4:	609a      	str	r2, [r3, #8]
    if (!node_)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	685b      	ldr	r3, [r3, #4]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d108      	bne.n	8003710 <_ZN11ArduinoJson8V730HB226detail13StringBuilder11startStringEv+0x28>
      node_ = resources_->createString(initialCapacity);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	211f      	movs	r1, #31
 8003704:	4618      	mov	r0, r3
 8003706:	f7ff fb2d 	bl	8002d64 <_ZN11ArduinoJson8V730HB226detail15ResourceManager12createStringEj>
 800370a:	4602      	mov	r2, r0
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	605a      	str	r2, [r3, #4]
  }
 8003710:	bf00      	nop
 8003712:	3708      	adds	r7, #8
 8003714:	46bd      	mov	sp, r7
 8003716:	bd80      	pop	{r7, pc}

08003718 <_ZN11ArduinoJson8V730HB226detail13StringBuilder4saveEv>:

  StringNode* save() {
 8003718:	b590      	push	{r4, r7, lr}
 800371a:	b087      	sub	sp, #28
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
    ARDUINOJSON_ASSERT(node_ != nullptr);
    node_->data[size_] = 0;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	685a      	ldr	r2, [r3, #4]
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	689b      	ldr	r3, [r3, #8]
 8003728:	4413      	add	r3, r2
 800372a:	2200      	movs	r2, #0
 800372c:	721a      	strb	r2, [r3, #8]
    StringNode* node = resources_->getString(adaptString(node_->data, size_));
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681c      	ldr	r4, [r3, #0]
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	685b      	ldr	r3, [r3, #4]
 8003736:	f103 0108 	add.w	r1, r3, #8
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	689a      	ldr	r2, [r3, #8]
 800373e:	f107 0308 	add.w	r3, r7, #8
 8003742:	4618      	mov	r0, r3
 8003744:	f001 fa72 	bl	8004c2c <_ZN11ArduinoJson8V730HB226detail11adaptStringIcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIPT_EE5valueES7_NS1_9remove_cvINS1_16remove_referenceIS7_E4typeEE4typeEE4typeEvE13AdaptedStringES7_j>
 8003748:	f107 0308 	add.w	r3, r7, #8
 800374c:	4619      	mov	r1, r3
 800374e:	4620      	mov	r0, r4
 8003750:	f001 fa7d 	bl	8004c4e <_ZNK11ArduinoJson8V730HB226detail15ResourceManager9getStringINS1_9RamStringEEEPNS1_10StringNodeERKT_>
 8003754:	6178      	str	r0, [r7, #20]
    if (!node) {
 8003756:	697b      	ldr	r3, [r7, #20]
 8003758:	2b00      	cmp	r3, #0
 800375a:	d113      	bne.n	8003784 <_ZN11ArduinoJson8V730HB226detail13StringBuilder4saveEv+0x6c>
      node = resources_->resizeString(node_, size_);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6818      	ldr	r0, [r3, #0]
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6859      	ldr	r1, [r3, #4]
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	689b      	ldr	r3, [r3, #8]
 8003768:	461a      	mov	r2, r3
 800376a:	f7ff fb12 	bl	8002d92 <_ZN11ArduinoJson8V730HB226detail15ResourceManager12resizeStringEPNS1_10StringNodeEj>
 800376e:	6178      	str	r0, [r7, #20]
      ARDUINOJSON_ASSERT(node != nullptr);  // realloc to smaller can't fail
      resources_->saveString(node);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	6979      	ldr	r1, [r7, #20]
 8003776:	4618      	mov	r0, r3
 8003778:	f7ff fae5 	bl	8002d46 <_ZN11ArduinoJson8V730HB226detail15ResourceManager10saveStringEPNS1_10StringNodeE>
      node_ = nullptr;  // next time we need a new string
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2200      	movs	r2, #0
 8003780:	605a      	str	r2, [r3, #4]
 8003782:	e005      	b.n	8003790 <_ZN11ArduinoJson8V730HB226detail13StringBuilder4saveEv+0x78>
    } else {
      node->references++;
 8003784:	697b      	ldr	r3, [r7, #20]
 8003786:	889b      	ldrh	r3, [r3, #4]
 8003788:	3301      	adds	r3, #1
 800378a:	b29a      	uxth	r2, r3
 800378c:	697b      	ldr	r3, [r7, #20]
 800378e:	809a      	strh	r2, [r3, #4]
    }
    return node;
 8003790:	697b      	ldr	r3, [r7, #20]
  }
 8003792:	4618      	mov	r0, r3
 8003794:	371c      	adds	r7, #28
 8003796:	46bd      	mov	sp, r7
 8003798:	bd90      	pop	{r4, r7, pc}

0800379a <_ZN11ArduinoJson8V730HB226detail13StringBuilder6appendEc>:
  void append(const char* s, size_t n) {
    while (n-- > 0)  // TODO: memcpy
      append(*s++);
  }

  void append(char c) {
 800379a:	b590      	push	{r4, r7, lr}
 800379c:	b083      	sub	sp, #12
 800379e:	af00      	add	r7, sp, #0
 80037a0:	6078      	str	r0, [r7, #4]
 80037a2:	460b      	mov	r3, r1
 80037a4:	70fb      	strb	r3, [r7, #3]
    if (node_ && size_ == node_->length)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	685b      	ldr	r3, [r3, #4]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d014      	beq.n	80037d8 <_ZN11ArduinoJson8V730HB226detail13StringBuilder6appendEc+0x3e>
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	689b      	ldr	r3, [r3, #8]
 80037b2:	687a      	ldr	r2, [r7, #4]
 80037b4:	6852      	ldr	r2, [r2, #4]
 80037b6:	88d2      	ldrh	r2, [r2, #6]
 80037b8:	4293      	cmp	r3, r2
 80037ba:	d10d      	bne.n	80037d8 <_ZN11ArduinoJson8V730HB226detail13StringBuilder6appendEc+0x3e>
      node_ = resources_->resizeString(node_, size_ * 2U + 1);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6818      	ldr	r0, [r3, #0]
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6859      	ldr	r1, [r3, #4]
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	689b      	ldr	r3, [r3, #8]
 80037c8:	005b      	lsls	r3, r3, #1
 80037ca:	3301      	adds	r3, #1
 80037cc:	461a      	mov	r2, r3
 80037ce:	f7ff fae0 	bl	8002d92 <_ZN11ArduinoJson8V730HB226detail15ResourceManager12resizeStringEPNS1_10StringNodeEj>
 80037d2:	4602      	mov	r2, r0
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	605a      	str	r2, [r3, #4]
    if (node_)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	685b      	ldr	r3, [r3, #4]
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d00a      	beq.n	80037f6 <_ZN11ArduinoJson8V730HB226detail13StringBuilder6appendEc+0x5c>
      node_->data[size_++] = c;
 80037e0:	78fc      	ldrb	r4, [r7, #3]
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	685a      	ldr	r2, [r3, #4]
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	689b      	ldr	r3, [r3, #8]
 80037ea:	1c58      	adds	r0, r3, #1
 80037ec:	6879      	ldr	r1, [r7, #4]
 80037ee:	6088      	str	r0, [r1, #8]
 80037f0:	4413      	add	r3, r2
 80037f2:	4622      	mov	r2, r4
 80037f4:	721a      	strb	r2, [r3, #8]
  }
 80037f6:	bf00      	nop
 80037f8:	370c      	adds	r7, #12
 80037fa:	46bd      	mov	sp, r7
 80037fc:	bd90      	pop	{r4, r7, pc}

080037fe <_ZNK11ArduinoJson8V730HB226detail13StringBuilder7isValidEv>:

  bool isValid() const {
 80037fe:	b480      	push	{r7}
 8003800:	b083      	sub	sp, #12
 8003802:	af00      	add	r7, sp, #0
 8003804:	6078      	str	r0, [r7, #4]
    return node_ != nullptr;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	685b      	ldr	r3, [r3, #4]
 800380a:	2b00      	cmp	r3, #0
 800380c:	bf14      	ite	ne
 800380e:	2301      	movne	r3, #1
 8003810:	2300      	moveq	r3, #0
 8003812:	b2db      	uxtb	r3, r3
  }
 8003814:	4618      	mov	r0, r3
 8003816:	370c      	adds	r7, #12
 8003818:	46bd      	mov	sp, r7
 800381a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381e:	4770      	bx	lr

08003820 <_ZNK11ArduinoJson8V730HB226detail13StringBuilder3strEv>:

  size_t size() const {
    return size_;
  }

  JsonString str() const {
 8003820:	b580      	push	{r7, lr}
 8003822:	b082      	sub	sp, #8
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
 8003828:	6039      	str	r1, [r7, #0]
    ARDUINOJSON_ASSERT(node_ != nullptr);
    node_->data[size_] = 0;
 800382a:	683b      	ldr	r3, [r7, #0]
 800382c:	685a      	ldr	r2, [r3, #4]
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	689b      	ldr	r3, [r3, #8]
 8003832:	4413      	add	r3, r2
 8003834:	2200      	movs	r2, #0
 8003836:	721a      	strb	r2, [r3, #8]
    return JsonString(node_->data, size_);
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	685b      	ldr	r3, [r3, #4]
 800383c:	f103 0108 	add.w	r1, r3, #8
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	689a      	ldr	r2, [r3, #8]
 8003844:	2300      	movs	r3, #0
 8003846:	6878      	ldr	r0, [r7, #4]
 8003848:	f001 fa11 	bl	8004c6e <_ZN11ArduinoJson8V730HB2210JsonStringC1IjLi0EEEPKcT_b>
  }
 800384c:	6878      	ldr	r0, [r7, #4]
 800384e:	3708      	adds	r7, #8
 8003850:	46bd      	mov	sp, r7
 8003852:	bd80      	pop	{r7, pc}

08003854 <_ZN11ArduinoJson8V730HB229ConverterIPKcvE8fromJsonENS0_16JsonVariantConstE>:
  static void toJson(const char* src, JsonVariant dst) {
    detail::VariantData::setString(getData(dst), detail::adaptString(src),
                                   getResourceManager(dst));
  }

  static const char* fromJson(JsonVariantConst src) {
 8003854:	b580      	push	{r7, lr}
 8003856:	b086      	sub	sp, #24
 8003858:	af00      	add	r7, sp, #0
 800385a:	463b      	mov	r3, r7
 800385c:	e883 0003 	stmia.w	r3, {r0, r1}
    auto data = getData(src);
 8003860:	463b      	mov	r3, r7
 8003862:	4618      	mov	r0, r3
 8003864:	f001 f87c 	bl	8004960 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataINS0_16JsonVariantConstEEEDTcldtfp_7getDataEERT_>
 8003868:	6178      	str	r0, [r7, #20]
    return data ? data->asString().c_str() : 0;
 800386a:	697b      	ldr	r3, [r7, #20]
 800386c:	2b00      	cmp	r3, #0
 800386e:	d00c      	beq.n	800388a <_ZN11ArduinoJson8V730HB229ConverterIPKcvE8fromJsonENS0_16JsonVariantConstE+0x36>
 8003870:	f107 0308 	add.w	r3, r7, #8
 8003874:	6979      	ldr	r1, [r7, #20]
 8003876:	4618      	mov	r0, r3
 8003878:	f7ff f91c 	bl	8002ab4 <_ZNK11ArduinoJson8V730HB226detail11VariantData8asStringEv>
 800387c:	f107 0308 	add.w	r3, r7, #8
 8003880:	4618      	mov	r0, r3
 8003882:	f7fe fffb 	bl	800287c <_ZNK11ArduinoJson8V730HB2210JsonString5c_strEv>
 8003886:	4603      	mov	r3, r0
 8003888:	e000      	b.n	800388c <_ZN11ArduinoJson8V730HB229ConverterIPKcvE8fromJsonENS0_16JsonVariantConstE+0x38>
 800388a:	2300      	movs	r3, #0
  }
 800388c:	4618      	mov	r0, r3
 800388e:	3718      	adds	r7, #24
 8003890:	46bd      	mov	sp, r7
 8003892:	bd80      	pop	{r7, pc}

08003894 <_ZN11ArduinoJson8V730HB229ConverterINS0_9JsonArrayEvE8fromJsonENS0_11JsonVariantE>:
      dst.set(nullptr);
    else
      dst.to<JsonArray>().set(src);
  }

  static JsonArray fromJson(JsonVariant src) {
 8003894:	b580      	push	{r7, lr}
 8003896:	b086      	sub	sp, #24
 8003898:	af00      	add	r7, sp, #0
 800389a:	60f8      	str	r0, [r7, #12]
 800389c:	1d3b      	adds	r3, r7, #4
 800389e:	e883 0006 	stmia.w	r3, {r1, r2}
    auto data = getData(src);
 80038a2:	1d3b      	adds	r3, r7, #4
 80038a4:	4618      	mov	r0, r3
 80038a6:	f001 f84f 	bl	8004948 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataINS0_11JsonVariantEEEDTcldtfp_7getDataEERT_>
 80038aa:	6178      	str	r0, [r7, #20]
    auto resources = getResourceManager(src);
 80038ac:	1d3b      	adds	r3, r7, #4
 80038ae:	4618      	mov	r0, r3
 80038b0:	f001 f9ef 	bl	8004c92 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerINS0_11JsonVariantEEEDTcldtfp_18getResourceManagerEERT_>
 80038b4:	6138      	str	r0, [r7, #16]
    return JsonArray(data != 0 ? data->asArray() : 0, resources);
 80038b6:	697b      	ldr	r3, [r7, #20]
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d004      	beq.n	80038c6 <_ZN11ArduinoJson8V730HB229ConverterINS0_9JsonArrayEvE8fromJsonENS0_11JsonVariantE+0x32>
 80038bc:	6978      	ldr	r0, [r7, #20]
 80038be:	f7ff f8ba 	bl	8002a36 <_ZN11ArduinoJson8V730HB226detail11VariantData7asArrayEv>
 80038c2:	4603      	mov	r3, r0
 80038c4:	e000      	b.n	80038c8 <_ZN11ArduinoJson8V730HB229ConverterINS0_9JsonArrayEvE8fromJsonENS0_11JsonVariantE+0x34>
 80038c6:	2300      	movs	r3, #0
 80038c8:	693a      	ldr	r2, [r7, #16]
 80038ca:	4619      	mov	r1, r3
 80038cc:	68f8      	ldr	r0, [r7, #12]
 80038ce:	f7ff fb9e 	bl	800300e <_ZN11ArduinoJson8V730HB229JsonArrayC1EPNS0_6detail9ArrayDataEPNS2_15ResourceManagerE>
  }
 80038d2:	68f8      	ldr	r0, [r7, #12]
 80038d4:	3718      	adds	r7, #24
 80038d6:	46bd      	mov	sp, r7
 80038d8:	bd80      	pop	{r7, pc}

080038da <_ZN11ArduinoJson8V730HB229ConverterINS0_10JsonObjectEvE8fromJsonENS0_11JsonVariantE>:
      dst.set(nullptr);
    else
      dst.to<JsonObject>().set(src);
  }

  static JsonObject fromJson(JsonVariant src) {
 80038da:	b580      	push	{r7, lr}
 80038dc:	b086      	sub	sp, #24
 80038de:	af00      	add	r7, sp, #0
 80038e0:	60f8      	str	r0, [r7, #12]
 80038e2:	1d3b      	adds	r3, r7, #4
 80038e4:	e883 0006 	stmia.w	r3, {r1, r2}
    auto data = getData(src);
 80038e8:	1d3b      	adds	r3, r7, #4
 80038ea:	4618      	mov	r0, r3
 80038ec:	f001 f82c 	bl	8004948 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataINS0_11JsonVariantEEEDTcldtfp_7getDataEERT_>
 80038f0:	6178      	str	r0, [r7, #20]
    auto resources = getResourceManager(src);
 80038f2:	1d3b      	adds	r3, r7, #4
 80038f4:	4618      	mov	r0, r3
 80038f6:	f001 f9cc 	bl	8004c92 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerINS0_11JsonVariantEEEDTcldtfp_18getResourceManagerEERT_>
 80038fa:	6138      	str	r0, [r7, #16]
    return JsonObject(data != 0 ? data->asObject() : 0, resources);
 80038fc:	697b      	ldr	r3, [r7, #20]
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d004      	beq.n	800390c <_ZN11ArduinoJson8V730HB229ConverterINS0_10JsonObjectEvE8fromJsonENS0_11JsonVariantE+0x32>
 8003902:	6978      	ldr	r0, [r7, #20]
 8003904:	f7ff f8b9 	bl	8002a7a <_ZN11ArduinoJson8V730HB226detail11VariantData8asObjectEv>
 8003908:	4603      	mov	r3, r0
 800390a:	e000      	b.n	800390e <_ZN11ArduinoJson8V730HB229ConverterINS0_10JsonObjectEvE8fromJsonENS0_11JsonVariantE+0x34>
 800390c:	2300      	movs	r3, #0
 800390e:	693a      	ldr	r2, [r7, #16]
 8003910:	4619      	mov	r1, r3
 8003912:	68f8      	ldr	r0, [r7, #12]
 8003914:	f7ff fbce 	bl	80030b4 <_ZN11ArduinoJson8V730HB2210JsonObjectC1EPNS0_6detail10ObjectDataEPNS2_15ResourceManagerE>
  }
 8003918:	68f8      	ldr	r0, [r7, #12]
 800391a:	3718      	adds	r7, #24
 800391c:	46bd      	mov	sp, r7
 800391e:	bd80      	pop	{r7, pc}

08003920 <_ZN11ArduinoJson8V730HB226detail11VariantData5clearEPNS1_15ResourceManagerE>:
  }

  return false;
}

inline void VariantData::clear(ResourceManager* resources) {
 8003920:	b580      	push	{r7, lr}
 8003922:	b084      	sub	sp, #16
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
 8003928:	6039      	str	r1, [r7, #0]
  if (type_ & VariantTypeBits::OwnedStringBit)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	791b      	ldrb	r3, [r3, #4]
 800392e:	2101      	movs	r1, #1
 8003930:	4618      	mov	r0, r3
 8003932:	f7ff f823 	bl	800297c <_ZN11ArduinoJson8V730HB226detailanENS1_11VariantTypeENS1_15VariantTypeBitsE>
 8003936:	4603      	mov	r3, r0
 8003938:	2b00      	cmp	r3, #0
 800393a:	d006      	beq.n	800394a <_ZN11ArduinoJson8V730HB226detail11VariantData5clearEPNS1_15ResourceManagerE+0x2a>
    resources->dereferenceString(content_.asOwnedString->data);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	3308      	adds	r3, #8
 8003942:	4619      	mov	r1, r3
 8003944:	6838      	ldr	r0, [r7, #0]
 8003946:	f7ff fa4c 	bl	8002de2 <_ZN11ArduinoJson8V730HB226detail15ResourceManager17dereferenceStringEPKc>

#if ARDUINOJSON_USE_EXTENSIONS
  if (type_ & VariantTypeBits::ExtensionBit)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	791b      	ldrb	r3, [r3, #4]
 800394e:	2110      	movs	r1, #16
 8003950:	4618      	mov	r0, r3
 8003952:	f7ff f813 	bl	800297c <_ZN11ArduinoJson8V730HB226detailanENS1_11VariantTypeENS1_15VariantTypeBitsE>
 8003956:	4603      	mov	r3, r0
 8003958:	2b00      	cmp	r3, #0
 800395a:	d005      	beq.n	8003968 <_ZN11ArduinoJson8V730HB226detail11VariantData5clearEPNS1_15ResourceManagerE+0x48>
    resources->freeExtension(content_.asSlotId);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	881b      	ldrh	r3, [r3, #0]
 8003960:	4619      	mov	r1, r3
 8003962:	6838      	ldr	r0, [r7, #0]
 8003964:	f7ff fe2c 	bl	80035c0 <_ZN11ArduinoJson8V730HB226detail15ResourceManager13freeExtensionEt>
#endif

  auto collection = asCollection();
 8003968:	6878      	ldr	r0, [r7, #4]
 800396a:	f7ff f875 	bl	8002a58 <_ZN11ArduinoJson8V730HB226detail11VariantData12asCollectionEv>
 800396e:	60f8      	str	r0, [r7, #12]
  if (collection)
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	2b00      	cmp	r3, #0
 8003974:	d003      	beq.n	800397e <_ZN11ArduinoJson8V730HB226detail11VariantData5clearEPNS1_15ResourceManagerE+0x5e>
    collection->clear(resources);
 8003976:	6839      	ldr	r1, [r7, #0]
 8003978:	68f8      	ldr	r0, [r7, #12]
 800397a:	f7ff fd2f 	bl	80033dc <_ZN11ArduinoJson8V730HB226detail14CollectionData5clearEPNS1_15ResourceManagerE>

  type_ = VariantType::Null;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	2200      	movs	r2, #0
 8003982:	711a      	strb	r2, [r3, #4]
}
 8003984:	bf00      	nop
 8003986:	3710      	adds	r7, #16
 8003988:	46bd      	mov	sp, r7
 800398a:	bd80      	pop	{r7, pc}

0800398c <_ZNK11ArduinoJson8V730HB226detail11VariantData12getExtensionEPKNS1_15ResourceManagerE>:

#if ARDUINOJSON_USE_EXTENSIONS
inline const VariantExtension* VariantData::getExtension(
    const ResourceManager* resources) const {
 800398c:	b580      	push	{r7, lr}
 800398e:	b082      	sub	sp, #8
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
 8003994:	6039      	str	r1, [r7, #0]
  return type_ & VariantTypeBits::ExtensionBit
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	791b      	ldrb	r3, [r3, #4]
 800399a:	2110      	movs	r1, #16
 800399c:	4618      	mov	r0, r3
 800399e:	f7fe ffed 	bl	800297c <_ZN11ArduinoJson8V730HB226detailanENS1_11VariantTypeENS1_15VariantTypeBitsE>
 80039a2:	4603      	mov	r3, r0
             ? resources->getExtension(content_.asSlotId)
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d007      	beq.n	80039b8 <_ZNK11ArduinoJson8V730HB226detail11VariantData12getExtensionEPKNS1_15ResourceManagerE+0x2c>
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	881b      	ldrh	r3, [r3, #0]
 80039ac:	4619      	mov	r1, r3
 80039ae:	6838      	ldr	r0, [r7, #0]
 80039b0:	f7ff fe27 	bl	8003602 <_ZNK11ArduinoJson8V730HB226detail15ResourceManager12getExtensionEt>
 80039b4:	4603      	mov	r3, r0
             : nullptr;
 80039b6:	e000      	b.n	80039ba <_ZNK11ArduinoJson8V730HB226detail11VariantData12getExtensionEPKNS1_15ResourceManagerE+0x2e>
             ? resources->getExtension(content_.asSlotId)
 80039b8:	2300      	movs	r3, #0
}
 80039ba:	4618      	mov	r0, r3
 80039bc:	3708      	adds	r7, #8
 80039be:	46bd      	mov	sp, r7
 80039c0:	bd80      	pop	{r7, pc}

080039c2 <_ZN11ArduinoJson8V730HB2220DeserializationErrorC1ENS1_4CodeE>:
    NoMemory,
    TooDeep
  };

  DeserializationError() {}
  DeserializationError(Code c) : code_(c) {}
 80039c2:	b480      	push	{r7}
 80039c4:	b083      	sub	sp, #12
 80039c6:	af00      	add	r7, sp, #0
 80039c8:	6078      	str	r0, [r7, #4]
 80039ca:	460b      	mov	r3, r1
 80039cc:	70fb      	strb	r3, [r7, #3]
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	78fa      	ldrb	r2, [r7, #3]
 80039d2:	701a      	strb	r2, [r3, #0]
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	4618      	mov	r0, r3
 80039d8:	370c      	adds	r7, #12
 80039da:	46bd      	mov	sp, r7
 80039dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e0:	4770      	bx	lr

080039e2 <_ZNK11ArduinoJson8V730HB2220DeserializationError4codeEv>:
  explicit operator bool() const {
    return code_ != Ok;
  }

  // Returns internal enum, useful for switch statement
  Code code() const {
 80039e2:	b480      	push	{r7}
 80039e4:	b083      	sub	sp, #12
 80039e6:	af00      	add	r7, sp, #0
 80039e8:	6078      	str	r0, [r7, #4]
    return code_;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	781b      	ldrb	r3, [r3, #0]
  }
 80039ee:	4618      	mov	r0, r3
 80039f0:	370c      	adds	r7, #12
 80039f2:	46bd      	mov	sp, r7
 80039f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f8:	4770      	bx	lr
	...

080039fc <_ZNK11ArduinoJson8V730HB2220DeserializationError5c_strEv>:

  const char* c_str() const {
 80039fc:	b480      	push	{r7}
 80039fe:	b083      	sub	sp, #12
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
    static const char* messages[] = {
        "Ok",           "EmptyInput", "IncompleteInput",
        "InvalidInput", "NoMemory",   "TooDeep"};
    ARDUINOJSON_ASSERT(static_cast<size_t>(code_) <
                       sizeof(messages) / sizeof(messages[0]));
    return messages[code_];
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	781b      	ldrb	r3, [r3, #0]
 8003a08:	461a      	mov	r2, r3
 8003a0a:	4b04      	ldr	r3, [pc, #16]	@ (8003a1c <_ZNK11ArduinoJson8V730HB2220DeserializationError5c_strEv+0x20>)
 8003a0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  }
 8003a10:	4618      	mov	r0, r3
 8003a12:	370c      	adds	r7, #12
 8003a14:	46bd      	mov	sp, r7
 8003a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1a:	4770      	bx	lr
 8003a1c:	24000004 	.word	0x24000004

08003a20 <_ZNK11ArduinoJson8V730HB226detail14AllowAllFilter5allowEv>:
};
}  // namespace DeserializationOption

namespace detail {
struct AllowAllFilter {
  bool allow() const {
 8003a20:	b480      	push	{r7}
 8003a22:	b083      	sub	sp, #12
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
    return true;
 8003a28:	2301      	movs	r3, #1
  }
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	370c      	adds	r7, #12
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a34:	4770      	bx	lr

08003a36 <_ZNK11ArduinoJson8V730HB226detail14AllowAllFilter10allowArrayEv>:

  bool allowArray() const {
 8003a36:	b480      	push	{r7}
 8003a38:	b083      	sub	sp, #12
 8003a3a:	af00      	add	r7, sp, #0
 8003a3c:	6078      	str	r0, [r7, #4]
    return true;
 8003a3e:	2301      	movs	r3, #1
  }
 8003a40:	4618      	mov	r0, r3
 8003a42:	370c      	adds	r7, #12
 8003a44:	46bd      	mov	sp, r7
 8003a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4a:	4770      	bx	lr

08003a4c <_ZNK11ArduinoJson8V730HB226detail14AllowAllFilter11allowObjectEv>:

  bool allowObject() const {
 8003a4c:	b480      	push	{r7}
 8003a4e:	b083      	sub	sp, #12
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
    return true;
 8003a54:	2301      	movs	r3, #1
  }
 8003a56:	4618      	mov	r0, r3
 8003a58:	370c      	adds	r7, #12
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a60:	4770      	bx	lr

08003a62 <_ZNK11ArduinoJson8V730HB226detail14AllowAllFilter10allowValueEv>:

  bool allowValue() const {
 8003a62:	b480      	push	{r7}
 8003a64:	b083      	sub	sp, #12
 8003a66:	af00      	add	r7, sp, #0
 8003a68:	6078      	str	r0, [r7, #4]
    return true;
 8003a6a:	2301      	movs	r3, #1
  }
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	370c      	adds	r7, #12
 8003a70:	46bd      	mov	sp, r7
 8003a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a76:	4770      	bx	lr

08003a78 <_ZN11ArduinoJson8V730HB2221DeserializationOption12NestingLimitC1Ev>:
ARDUINOJSON_BEGIN_PUBLIC_NAMESPACE

namespace DeserializationOption {
class NestingLimit {
 public:
  NestingLimit() : value_(ARDUINOJSON_DEFAULT_NESTING_LIMIT) {}
 8003a78:	b480      	push	{r7}
 8003a7a:	b083      	sub	sp, #12
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	220a      	movs	r2, #10
 8003a84:	701a      	strb	r2, [r3, #0]
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	4618      	mov	r0, r3
 8003a8a:	370c      	adds	r7, #12
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a92:	4770      	bx	lr

08003a94 <_ZN11ArduinoJson8V730HB2221DeserializationOption12NestingLimitC1Eh>:
  explicit NestingLimit(uint8_t n) : value_(n) {}
 8003a94:	b480      	push	{r7}
 8003a96:	b083      	sub	sp, #12
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
 8003a9c:	460b      	mov	r3, r1
 8003a9e:	70fb      	strb	r3, [r7, #3]
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	78fa      	ldrb	r2, [r7, #3]
 8003aa4:	701a      	strb	r2, [r3, #0]
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	370c      	adds	r7, #12
 8003aac:	46bd      	mov	sp, r7
 8003aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab2:	4770      	bx	lr

08003ab4 <_ZNK11ArduinoJson8V730HB2221DeserializationOption12NestingLimit9decrementEv>:

  NestingLimit decrement() const {
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b084      	sub	sp, #16
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
    ARDUINOJSON_ASSERT(value_ > 0);
    return NestingLimit(static_cast<uint8_t>(value_ - 1));
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	781b      	ldrb	r3, [r3, #0]
 8003ac0:	3b01      	subs	r3, #1
 8003ac2:	b2da      	uxtb	r2, r3
 8003ac4:	f107 030c 	add.w	r3, r7, #12
 8003ac8:	4611      	mov	r1, r2
 8003aca:	4618      	mov	r0, r3
 8003acc:	f7ff ffe2 	bl	8003a94 <_ZN11ArduinoJson8V730HB2221DeserializationOption12NestingLimitC1Eh>
 8003ad0:	7b3b      	ldrb	r3, [r7, #12]
  }
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	3710      	adds	r7, #16
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	bd80      	pop	{r7, pc}

08003ada <_ZNK11ArduinoJson8V730HB2221DeserializationOption12NestingLimit7reachedEv>:

  bool reached() const {
 8003ada:	b480      	push	{r7}
 8003adc:	b083      	sub	sp, #12
 8003ade:	af00      	add	r7, sp, #0
 8003ae0:	6078      	str	r0, [r7, #4]
    return value_ == 0;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	781b      	ldrb	r3, [r3, #0]
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	bf0c      	ite	eq
 8003aea:	2301      	moveq	r3, #1
 8003aec:	2300      	movne	r3, #0
 8003aee:	b2db      	uxtb	r3, r3
  }
 8003af0:	4618      	mov	r0, r3
 8003af2:	370c      	adds	r7, #12
 8003af4:	46bd      	mov	sp, r7
 8003af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afa:	4770      	bx	lr

08003afc <_ZN11ArduinoJson8V730HB226detail26makeDeserializationOptionsENS0_21DeserializationOption12NestingLimitE>:
    DeserializationOption::NestingLimit nestingLimit, TFilter filter) {
  return {filter, nestingLimit};
}

inline DeserializationOptions<AllowAllFilter> makeDeserializationOptions(
    DeserializationOption::NestingLimit nestingLimit = {}) {
 8003afc:	b480      	push	{r7}
 8003afe:	b085      	sub	sp, #20
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	7138      	strb	r0, [r7, #4]
  return {{}, nestingLimit};
 8003b04:	793b      	ldrb	r3, [r7, #4]
 8003b06:	737b      	strb	r3, [r7, #13]
 8003b08:	2300      	movs	r3, #0
 8003b0a:	7b3a      	ldrb	r2, [r7, #12]
 8003b0c:	f362 0307 	bfi	r3, r2, #0, #8
 8003b10:	7b7a      	ldrb	r2, [r7, #13]
 8003b12:	f362 230f 	bfi	r3, r2, #8, #8
}
 8003b16:	4618      	mov	r0, r3
 8003b18:	3714      	adds	r7, #20
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b20:	4770      	bx	lr

08003b22 <_ZN11ArduinoJson8V730HB226detail18shrinkJsonDocumentERNS0_12JsonDocumentE>:
inline void shrinkJsonDocument(TDestination&) {
  // no-op by default
}

#if ARDUINOJSON_AUTO_SHRINK
inline void shrinkJsonDocument(JsonDocument& doc) {
 8003b22:	b580      	push	{r7, lr}
 8003b24:	b082      	sub	sp, #8
 8003b26:	af00      	add	r7, sp, #0
 8003b28:	6078      	str	r0, [r7, #4]
  doc.shrinkToFit();
 8003b2a:	6878      	ldr	r0, [r7, #4]
 8003b2c:	f7ff fb03 	bl	8003136 <_ZN11ArduinoJson8V730HB2212JsonDocument11shrinkToFitEv>
}
 8003b30:	bf00      	nop
 8003b32:	3708      	adds	r7, #8
 8003b34:	46bd      	mov	sp, r7
 8003b36:	bd80      	pop	{r7, pc}

08003b38 <_ZN11ArduinoJson8V730HB226detail5Utf1615isHighSurrogateEt>:
#endif

ARDUINOJSON_BEGIN_PRIVATE_NAMESPACE

namespace Utf16 {
inline bool isHighSurrogate(uint16_t codeunit) {
 8003b38:	b480      	push	{r7}
 8003b3a:	b083      	sub	sp, #12
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	4603      	mov	r3, r0
 8003b40:	80fb      	strh	r3, [r7, #6]
  return codeunit >= 0xD800 && codeunit < 0xDC00;
 8003b42:	88fb      	ldrh	r3, [r7, #6]
 8003b44:	f5b3 4f58 	cmp.w	r3, #55296	@ 0xd800
 8003b48:	d305      	bcc.n	8003b56 <_ZN11ArduinoJson8V730HB226detail5Utf1615isHighSurrogateEt+0x1e>
 8003b4a:	88fb      	ldrh	r3, [r7, #6]
 8003b4c:	f5b3 4f5c 	cmp.w	r3, #56320	@ 0xdc00
 8003b50:	d201      	bcs.n	8003b56 <_ZN11ArduinoJson8V730HB226detail5Utf1615isHighSurrogateEt+0x1e>
 8003b52:	2301      	movs	r3, #1
 8003b54:	e000      	b.n	8003b58 <_ZN11ArduinoJson8V730HB226detail5Utf1615isHighSurrogateEt+0x20>
 8003b56:	2300      	movs	r3, #0
}
 8003b58:	4618      	mov	r0, r3
 8003b5a:	370c      	adds	r7, #12
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b62:	4770      	bx	lr

08003b64 <_ZN11ArduinoJson8V730HB226detail5Utf1614isLowSurrogateEt>:

inline bool isLowSurrogate(uint16_t codeunit) {
 8003b64:	b480      	push	{r7}
 8003b66:	b083      	sub	sp, #12
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	4603      	mov	r3, r0
 8003b6c:	80fb      	strh	r3, [r7, #6]
  return codeunit >= 0xDC00 && codeunit < 0xE000;
 8003b6e:	88fb      	ldrh	r3, [r7, #6]
 8003b70:	f5b3 4f5c 	cmp.w	r3, #56320	@ 0xdc00
 8003b74:	d305      	bcc.n	8003b82 <_ZN11ArduinoJson8V730HB226detail5Utf1614isLowSurrogateEt+0x1e>
 8003b76:	88fb      	ldrh	r3, [r7, #6]
 8003b78:	f5b3 4f60 	cmp.w	r3, #57344	@ 0xe000
 8003b7c:	d201      	bcs.n	8003b82 <_ZN11ArduinoJson8V730HB226detail5Utf1614isLowSurrogateEt+0x1e>
 8003b7e:	2301      	movs	r3, #1
 8003b80:	e000      	b.n	8003b84 <_ZN11ArduinoJson8V730HB226detail5Utf1614isLowSurrogateEt+0x20>
 8003b82:	2300      	movs	r3, #0
}
 8003b84:	4618      	mov	r0, r3
 8003b86:	370c      	adds	r7, #12
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8e:	4770      	bx	lr

08003b90 <_ZN11ArduinoJson8V730HB226detail5Utf169CodepointC1Ev>:

class Codepoint {
 public:
  Codepoint() : highSurrogate_(0), codepoint_(0) {}
 8003b90:	b480      	push	{r7}
 8003b92:	b083      	sub	sp, #12
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	801a      	strh	r2, [r3, #0]
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	605a      	str	r2, [r3, #4]
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	370c      	adds	r7, #12
 8003baa:	46bd      	mov	sp, r7
 8003bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb0:	4770      	bx	lr

08003bb2 <_ZN11ArduinoJson8V730HB226detail5Utf169Codepoint6appendEt>:

  bool append(uint16_t codeunit) {
 8003bb2:	b580      	push	{r7, lr}
 8003bb4:	b082      	sub	sp, #8
 8003bb6:	af00      	add	r7, sp, #0
 8003bb8:	6078      	str	r0, [r7, #4]
 8003bba:	460b      	mov	r3, r1
 8003bbc:	807b      	strh	r3, [r7, #2]
    if (isHighSurrogate(codeunit)) {
 8003bbe:	887b      	ldrh	r3, [r7, #2]
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	f7ff ffb9 	bl	8003b38 <_ZN11ArduinoJson8V730HB226detail5Utf1615isHighSurrogateEt>
 8003bc6:	4603      	mov	r3, r0
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d007      	beq.n	8003bdc <_ZN11ArduinoJson8V730HB226detail5Utf169Codepoint6appendEt+0x2a>
      highSurrogate_ = codeunit & 0x3FF;
 8003bcc:	887b      	ldrh	r3, [r7, #2]
 8003bce:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003bd2:	b29a      	uxth	r2, r3
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	801a      	strh	r2, [r3, #0]
      return false;
 8003bd8:	2300      	movs	r3, #0
 8003bda:	e018      	b.n	8003c0e <_ZN11ArduinoJson8V730HB226detail5Utf169Codepoint6appendEt+0x5c>
    }

    if (isLowSurrogate(codeunit)) {
 8003bdc:	887b      	ldrh	r3, [r7, #2]
 8003bde:	4618      	mov	r0, r3
 8003be0:	f7ff ffc0 	bl	8003b64 <_ZN11ArduinoJson8V730HB226detail5Utf1614isLowSurrogateEt>
 8003be4:	4603      	mov	r3, r0
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d00d      	beq.n	8003c06 <_ZN11ArduinoJson8V730HB226detail5Utf169Codepoint6appendEt+0x54>
      codepoint_ =
          uint32_t(0x10000 + ((highSurrogate_ << 10) | (codeunit & 0x3FF)));
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	881b      	ldrh	r3, [r3, #0]
 8003bee:	029a      	lsls	r2, r3, #10
 8003bf0:	887b      	ldrh	r3, [r7, #2]
 8003bf2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003bf6:	4313      	orrs	r3, r2
 8003bf8:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 8003bfc:	461a      	mov	r2, r3
      codepoint_ =
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	605a      	str	r2, [r3, #4]
      return true;
 8003c02:	2301      	movs	r3, #1
 8003c04:	e003      	b.n	8003c0e <_ZN11ArduinoJson8V730HB226detail5Utf169Codepoint6appendEt+0x5c>
    }

    codepoint_ = codeunit;
 8003c06:	887a      	ldrh	r2, [r7, #2]
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	605a      	str	r2, [r3, #4]
    return true;
 8003c0c:	2301      	movs	r3, #1
  }
 8003c0e:	4618      	mov	r0, r3
 8003c10:	3708      	adds	r7, #8
 8003c12:	46bd      	mov	sp, r7
 8003c14:	bd80      	pop	{r7, pc}

08003c16 <_ZNK11ArduinoJson8V730HB226detail5Utf169Codepoint5valueEv>:

  uint32_t value() const {
 8003c16:	b480      	push	{r7}
 8003c18:	b083      	sub	sp, #12
 8003c1a:	af00      	add	r7, sp, #0
 8003c1c:	6078      	str	r0, [r7, #4]
    return codepoint_;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	685b      	ldr	r3, [r3, #4]
  }
 8003c22:	4618      	mov	r0, r3
 8003c24:	370c      	adds	r7, #12
 8003c26:	46bd      	mov	sp, r7
 8003c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2c:	4770      	bx	lr

08003c2e <_ZN11ArduinoJson8V730HB226detail7isdigitEc>:
#include <ArduinoJson/Namespace.hpp>

ARDUINOJSON_BEGIN_PRIVATE_NAMESPACE

#ifndef isdigit
inline bool isdigit(char c) {
 8003c2e:	b480      	push	{r7}
 8003c30:	b083      	sub	sp, #12
 8003c32:	af00      	add	r7, sp, #0
 8003c34:	4603      	mov	r3, r0
 8003c36:	71fb      	strb	r3, [r7, #7]
  return '0' <= c && c <= '9';
 8003c38:	79fb      	ldrb	r3, [r7, #7]
 8003c3a:	2b2f      	cmp	r3, #47	@ 0x2f
 8003c3c:	d904      	bls.n	8003c48 <_ZN11ArduinoJson8V730HB226detail7isdigitEc+0x1a>
 8003c3e:	79fb      	ldrb	r3, [r7, #7]
 8003c40:	2b39      	cmp	r3, #57	@ 0x39
 8003c42:	d801      	bhi.n	8003c48 <_ZN11ArduinoJson8V730HB226detail7isdigitEc+0x1a>
 8003c44:	2301      	movs	r3, #1
 8003c46:	e000      	b.n	8003c4a <_ZN11ArduinoJson8V730HB226detail7isdigitEc+0x1c>
 8003c48:	2300      	movs	r3, #0
}
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	370c      	adds	r7, #12
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c54:	4770      	bx	lr

08003c56 <_ZN11ArduinoJson8V730HB226detail11NumberValueC1Ev>:
  Double,
#endif
};

union NumberValue {
  NumberValue() {}
 8003c56:	b480      	push	{r7}
 8003c58:	b083      	sub	sp, #12
 8003c5a:	af00      	add	r7, sp, #0
 8003c5c:	6078      	str	r0, [r7, #4]
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	4618      	mov	r0, r3
 8003c62:	370c      	adds	r7, #12
 8003c64:	46bd      	mov	sp, r7
 8003c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6a:	4770      	bx	lr

08003c6c <_ZN11ArduinoJson8V730HB226detail11NumberValueC1Ef>:
  NumberValue(float x) : asFloat(x) {}
 8003c6c:	b480      	push	{r7}
 8003c6e:	b083      	sub	sp, #12
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
 8003c74:	ed87 0a00 	vstr	s0, [r7]
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	683a      	ldr	r2, [r7, #0]
 8003c7c:	601a      	str	r2, [r3, #0]
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	4618      	mov	r0, r3
 8003c82:	370c      	adds	r7, #12
 8003c84:	46bd      	mov	sp, r7
 8003c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8a:	4770      	bx	lr

08003c8c <_ZN11ArduinoJson8V730HB226detail11NumberValueC1Ex>:
  NumberValue(JsonInteger x) : asSignedInteger(x) {}
 8003c8c:	b480      	push	{r7}
 8003c8e:	b085      	sub	sp, #20
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	60f8      	str	r0, [r7, #12]
 8003c94:	e9c7 2300 	strd	r2, r3, [r7]
 8003c98:	68f9      	ldr	r1, [r7, #12]
 8003c9a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003c9e:	e9c1 2300 	strd	r2, r3, [r1]
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	3714      	adds	r7, #20
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cae:	4770      	bx	lr

08003cb0 <_ZN11ArduinoJson8V730HB226detail11NumberValueC1Ey>:
  NumberValue(JsonUInt x) : asUnsignedInteger(x) {}
 8003cb0:	b480      	push	{r7}
 8003cb2:	b085      	sub	sp, #20
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	60f8      	str	r0, [r7, #12]
 8003cb8:	e9c7 2300 	strd	r2, r3, [r7]
 8003cbc:	68f9      	ldr	r1, [r7, #12]
 8003cbe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003cc2:	e9c1 2300 	strd	r2, r3, [r1]
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	4618      	mov	r0, r3
 8003cca:	3714      	adds	r7, #20
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd2:	4770      	bx	lr

08003cd4 <_ZN11ArduinoJson8V730HB226detail11NumberValueC1Ed>:
#if ARDUINOJSON_USE_DOUBLE
  NumberValue(double x) : asDouble(x) {}
 8003cd4:	b480      	push	{r7}
 8003cd6:	b085      	sub	sp, #20
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	60f8      	str	r0, [r7, #12]
 8003cdc:	ed87 0b00 	vstr	d0, [r7]
 8003ce0:	68f9      	ldr	r1, [r7, #12]
 8003ce2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003ce6:	e9c1 2300 	strd	r2, r3, [r1]
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	4618      	mov	r0, r3
 8003cee:	3714      	adds	r7, #20
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf6:	4770      	bx	lr

08003cf8 <_ZN11ArduinoJson8V730HB226detail6NumberC1Ev>:
class Number {
  NumberType type_;
  NumberValue value_;

 public:
  Number() : type_(NumberType::Invalid) {}
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	b082      	sub	sp, #8
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2200      	movs	r2, #0
 8003d04:	701a      	strb	r2, [r3, #0]
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	3308      	adds	r3, #8
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	f7ff ffa3 	bl	8003c56 <_ZN11ArduinoJson8V730HB226detail11NumberValueC1Ev>
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	4618      	mov	r0, r3
 8003d14:	3708      	adds	r7, #8
 8003d16:	46bd      	mov	sp, r7
 8003d18:	bd80      	pop	{r7, pc}

08003d1a <_ZN11ArduinoJson8V730HB226detail6NumberC1Ef>:
  Number(float value) : type_(NumberType::Float), value_(value) {}
 8003d1a:	b580      	push	{r7, lr}
 8003d1c:	b082      	sub	sp, #8
 8003d1e:	af00      	add	r7, sp, #0
 8003d20:	6078      	str	r0, [r7, #4]
 8003d22:	ed87 0a00 	vstr	s0, [r7]
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	2201      	movs	r2, #1
 8003d2a:	701a      	strb	r2, [r3, #0]
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	3308      	adds	r3, #8
 8003d30:	ed97 0a00 	vldr	s0, [r7]
 8003d34:	4618      	mov	r0, r3
 8003d36:	f7ff ff99 	bl	8003c6c <_ZN11ArduinoJson8V730HB226detail11NumberValueC1Ef>
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	3708      	adds	r7, #8
 8003d40:	46bd      	mov	sp, r7
 8003d42:	bd80      	pop	{r7, pc}

08003d44 <_ZN11ArduinoJson8V730HB226detail6NumberC1Ex>:
  Number(JsonInteger value) : type_(NumberType::SignedInteger), value_(value) {}
 8003d44:	b580      	push	{r7, lr}
 8003d46:	b084      	sub	sp, #16
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	60f8      	str	r0, [r7, #12]
 8003d4c:	e9c7 2300 	strd	r2, r3, [r7]
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	2202      	movs	r2, #2
 8003d54:	701a      	strb	r2, [r3, #0]
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	f103 0108 	add.w	r1, r3, #8
 8003d5c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003d60:	4608      	mov	r0, r1
 8003d62:	f7ff ff93 	bl	8003c8c <_ZN11ArduinoJson8V730HB226detail11NumberValueC1Ex>
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	4618      	mov	r0, r3
 8003d6a:	3710      	adds	r7, #16
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	bd80      	pop	{r7, pc}

08003d70 <_ZN11ArduinoJson8V730HB226detail6NumberC1Ey>:
  Number(JsonUInt value) : type_(NumberType::UnsignedInteger), value_(value) {}
 8003d70:	b580      	push	{r7, lr}
 8003d72:	b084      	sub	sp, #16
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	60f8      	str	r0, [r7, #12]
 8003d78:	e9c7 2300 	strd	r2, r3, [r7]
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	2203      	movs	r2, #3
 8003d80:	701a      	strb	r2, [r3, #0]
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	f103 0108 	add.w	r1, r3, #8
 8003d88:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003d8c:	4608      	mov	r0, r1
 8003d8e:	f7ff ff8f 	bl	8003cb0 <_ZN11ArduinoJson8V730HB226detail11NumberValueC1Ey>
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	4618      	mov	r0, r3
 8003d96:	3710      	adds	r7, #16
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	bd80      	pop	{r7, pc}

08003d9c <_ZN11ArduinoJson8V730HB226detail6NumberC1Ed>:
#if ARDUINOJSON_USE_DOUBLE
  Number(double value) : type_(NumberType::Double), value_(value) {}
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	b084      	sub	sp, #16
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	60f8      	str	r0, [r7, #12]
 8003da4:	ed87 0b00 	vstr	d0, [r7]
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	2204      	movs	r2, #4
 8003dac:	701a      	strb	r2, [r3, #0]
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	3308      	adds	r3, #8
 8003db2:	ed97 0b00 	vldr	d0, [r7]
 8003db6:	4618      	mov	r0, r3
 8003db8:	f7ff ff8c 	bl	8003cd4 <_ZN11ArduinoJson8V730HB226detail11NumberValueC1Ed>
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	3710      	adds	r7, #16
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	bd80      	pop	{r7, pc}

08003dc6 <_ZNK11ArduinoJson8V730HB226detail6Number4typeEv>:
      default:
        return T();
    }
  }

  NumberType type() const {
 8003dc6:	b480      	push	{r7}
 8003dc8:	b083      	sub	sp, #12
 8003dca:	af00      	add	r7, sp, #0
 8003dcc:	6078      	str	r0, [r7, #4]
    return type_;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	781b      	ldrb	r3, [r3, #0]
  }
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	370c      	adds	r7, #12
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ddc:	4770      	bx	lr

08003dde <_ZNK11ArduinoJson8V730HB226detail6Number15asSignedIntegerEv>:

  JsonInteger asSignedInteger() const {
 8003dde:	b480      	push	{r7}
 8003de0:	b083      	sub	sp, #12
 8003de2:	af00      	add	r7, sp, #0
 8003de4:	6078      	str	r0, [r7, #4]
    ARDUINOJSON_ASSERT(type_ == NumberType::SignedInteger);
    return value_.asSignedInteger;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
  }
 8003dec:	4610      	mov	r0, r2
 8003dee:	4619      	mov	r1, r3
 8003df0:	370c      	adds	r7, #12
 8003df2:	46bd      	mov	sp, r7
 8003df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df8:	4770      	bx	lr

08003dfa <_ZNK11ArduinoJson8V730HB226detail6Number17asUnsignedIntegerEv>:

  JsonUInt asUnsignedInteger() const {
 8003dfa:	b480      	push	{r7}
 8003dfc:	b083      	sub	sp, #12
 8003dfe:	af00      	add	r7, sp, #0
 8003e00:	6078      	str	r0, [r7, #4]
    ARDUINOJSON_ASSERT(type_ == NumberType::UnsignedInteger);
    return value_.asUnsignedInteger;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
  }
 8003e08:	4610      	mov	r0, r2
 8003e0a:	4619      	mov	r1, r3
 8003e0c:	370c      	adds	r7, #12
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e14:	4770      	bx	lr

08003e16 <_ZNK11ArduinoJson8V730HB226detail6Number7asFloatEv>:

  float asFloat() const {
 8003e16:	b480      	push	{r7}
 8003e18:	b083      	sub	sp, #12
 8003e1a:	af00      	add	r7, sp, #0
 8003e1c:	6078      	str	r0, [r7, #4]
    ARDUINOJSON_ASSERT(type_ == NumberType::Float);
    return value_.asFloat;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	689b      	ldr	r3, [r3, #8]
 8003e22:	ee07 3a90 	vmov	s15, r3
  }
 8003e26:	eeb0 0a67 	vmov.f32	s0, s15
 8003e2a:	370c      	adds	r7, #12
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e32:	4770      	bx	lr

08003e34 <_ZNK11ArduinoJson8V730HB226detail6Number8asDoubleEv>:

#if ARDUINOJSON_USE_DOUBLE
  double asDouble() const {
 8003e34:	b480      	push	{r7}
 8003e36:	b083      	sub	sp, #12
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
    ARDUINOJSON_ASSERT(type_ == NumberType::Double);
    return value_.asDouble;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8003e42:	ec43 2b17 	vmov	d7, r2, r3
  }
 8003e46:	eeb0 0b47 	vmov.f64	d0, d7
 8003e4a:	370c      	adds	r7, #12
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e52:	4770      	bx	lr

08003e54 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc>:
#endif
};

inline Number parseNumber(const char* s) {
 8003e54:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003e58:	b0a6      	sub	sp, #152	@ 0x98
 8003e5a:	af00      	add	r7, sp, #0
 8003e5c:	64f8      	str	r0, [r7, #76]	@ 0x4c
 8003e5e:	64b9      	str	r1, [r7, #72]	@ 0x48
  using mantissa_t = largest_type<traits::mantissa_type, JsonUInt>;
  using exponent_t = traits::exponent_type;

  ARDUINOJSON_ASSERT(s != 0);

  bool is_negative = false;
 8003e60:	2300      	movs	r3, #0
 8003e62:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
  switch (*s) {
 8003e66:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003e68:	781b      	ldrb	r3, [r3, #0]
 8003e6a:	2b2b      	cmp	r3, #43	@ 0x2b
 8003e6c:	d008      	beq.n	8003e80 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x2c>
 8003e6e:	2b2d      	cmp	r3, #45	@ 0x2d
 8003e70:	d10a      	bne.n	8003e88 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x34>
    case '-':
      is_negative = true;
 8003e72:	2301      	movs	r3, #1
 8003e74:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
      s++;
 8003e78:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003e7a:	3301      	adds	r3, #1
 8003e7c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003e7e:	e003      	b.n	8003e88 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x34>
    case '+':
      s++;
 8003e80:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003e82:	3301      	adds	r3, #1
 8003e84:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003e86:	bf00      	nop
  if (*s == 'i' || *s == 'I') {
    return Number(is_negative ? -traits::inf() : traits::inf());
  }
#endif

  if (!isdigit(*s) && *s != '.')
 8003e88:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003e8a:	781b      	ldrb	r3, [r3, #0]
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	f7ff fece 	bl	8003c2e <_ZN11ArduinoJson8V730HB226detail7isdigitEc>
 8003e92:	4603      	mov	r3, r0
 8003e94:	f083 0301 	eor.w	r3, r3, #1
 8003e98:	b2db      	uxtb	r3, r3
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d005      	beq.n	8003eaa <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x56>
 8003e9e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003ea0:	781b      	ldrb	r3, [r3, #0]
 8003ea2:	2b2e      	cmp	r3, #46	@ 0x2e
 8003ea4:	d001      	beq.n	8003eaa <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x56>
 8003ea6:	2301      	movs	r3, #1
 8003ea8:	e000      	b.n	8003eac <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x58>
 8003eaa:	2300      	movs	r3, #0
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d003      	beq.n	8003eb8 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x64>
    return Number();
 8003eb0:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8003eb2:	f7ff ff21 	bl	8003cf8 <_ZN11ArduinoJson8V730HB226detail6NumberC1Ev>
 8003eb6:	e1f5      	b.n	80042a4 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x450>

  mantissa_t mantissa = 0;
 8003eb8:	f04f 0200 	mov.w	r2, #0
 8003ebc:	f04f 0300 	mov.w	r3, #0
 8003ec0:	e9c7 2322 	strd	r2, r3, [r7, #136]	@ 0x88
  exponent_t exponent_offset = 0;
 8003ec4:	2300      	movs	r3, #0
 8003ec6:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
  const mantissa_t maxUint = JsonUInt(-1);
 8003eca:	f04f 32ff 	mov.w	r2, #4294967295
 8003ece:	f04f 33ff 	mov.w	r3, #4294967295
 8003ed2:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70

  while (isdigit(*s)) {
 8003ed6:	e054      	b.n	8003f82 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x12e>
    uint8_t digit = uint8_t(*s - '0');
 8003ed8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003eda:	781b      	ldrb	r3, [r3, #0]
 8003edc:	3b30      	subs	r3, #48	@ 0x30
 8003ede:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
    if (mantissa > maxUint / 10)
 8003ee2:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8003ee6:	f112 3f66 	cmn.w	r2, #1717986918	@ 0x66666666
 8003eea:	49ae      	ldr	r1, [pc, #696]	@ (80041a4 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x350>)
 8003eec:	418b      	sbcs	r3, r1
 8003eee:	d251      	bcs.n	8003f94 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x140>
      break;
    mantissa *= 10;
 8003ef0:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	@ 0x88
 8003ef4:	4622      	mov	r2, r4
 8003ef6:	462b      	mov	r3, r5
 8003ef8:	f04f 0000 	mov.w	r0, #0
 8003efc:	f04f 0100 	mov.w	r1, #0
 8003f00:	0099      	lsls	r1, r3, #2
 8003f02:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8003f06:	0090      	lsls	r0, r2, #2
 8003f08:	4602      	mov	r2, r0
 8003f0a:	460b      	mov	r3, r1
 8003f0c:	eb12 0804 	adds.w	r8, r2, r4
 8003f10:	eb43 0905 	adc.w	r9, r3, r5
 8003f14:	eb18 0308 	adds.w	r3, r8, r8
 8003f18:	61bb      	str	r3, [r7, #24]
 8003f1a:	eb49 0309 	adc.w	r3, r9, r9
 8003f1e:	61fb      	str	r3, [r7, #28]
 8003f20:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8003f24:	e9c7 8922 	strd	r8, r9, [r7, #136]	@ 0x88
    if (mantissa > maxUint - digit)
 8003f28:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	643b      	str	r3, [r7, #64]	@ 0x40
 8003f30:	647a      	str	r2, [r7, #68]	@ 0x44
 8003f32:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8003f36:	460b      	mov	r3, r1
 8003f38:	43db      	mvns	r3, r3
 8003f3a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003f3c:	4613      	mov	r3, r2
 8003f3e:	43db      	mvns	r3, r3
 8003f40:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003f42:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8003f46:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	@ 0x38
 8003f4a:	4621      	mov	r1, r4
 8003f4c:	4291      	cmp	r1, r2
 8003f4e:	4629      	mov	r1, r5
 8003f50:	eb71 0303 	sbcs.w	r3, r1, r3
 8003f54:	d320      	bcc.n	8003f98 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x144>
      break;
    mantissa += digit;
 8003f56:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	633b      	str	r3, [r7, #48]	@ 0x30
 8003f5e:	637a      	str	r2, [r7, #52]	@ 0x34
 8003f60:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8003f64:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003f68:	4621      	mov	r1, r4
 8003f6a:	1851      	adds	r1, r2, r1
 8003f6c:	6139      	str	r1, [r7, #16]
 8003f6e:	4629      	mov	r1, r5
 8003f70:	414b      	adcs	r3, r1
 8003f72:	617b      	str	r3, [r7, #20]
 8003f74:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8003f78:	e9c7 3422 	strd	r3, r4, [r7, #136]	@ 0x88
    s++;
 8003f7c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003f7e:	3301      	adds	r3, #1
 8003f80:	64bb      	str	r3, [r7, #72]	@ 0x48
  while (isdigit(*s)) {
 8003f82:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003f84:	781b      	ldrb	r3, [r3, #0]
 8003f86:	4618      	mov	r0, r3
 8003f88:	f7ff fe51 	bl	8003c2e <_ZN11ArduinoJson8V730HB226detail7isdigitEc>
 8003f8c:	4603      	mov	r3, r0
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d1a2      	bne.n	8003ed8 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x84>
 8003f92:	e002      	b.n	8003f9a <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x146>
      break;
 8003f94:	bf00      	nop
 8003f96:	e000      	b.n	8003f9a <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x146>
      break;
 8003f98:	bf00      	nop
  }

  if (*s == '\0') {
 8003f9a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003f9c:	781b      	ldrb	r3, [r3, #0]
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d136      	bne.n	8004010 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x1bc>
    if (is_negative) {
 8003fa2:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d019      	beq.n	8003fde <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x18a>
      const mantissa_t sintMantissaMax = mantissa_t(1)
 8003faa:	f04f 0200 	mov.w	r2, #0
 8003fae:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8003fb2:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60
                                         << (sizeof(JsonInteger) * 8 - 1);
      if (mantissa <= sintMantissaMax) {
 8003fb6:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8003fba:	2a01      	cmp	r2, #1
 8003fbc:	f173 4300 	sbcs.w	r3, r3, #2147483648	@ 0x80000000
 8003fc0:	d226      	bcs.n	8004010 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x1bc>
        return Number(JsonInteger(~mantissa + 1));
 8003fc2:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8003fc6:	2100      	movs	r1, #0
 8003fc8:	4250      	negs	r0, r2
 8003fca:	62b8      	str	r0, [r7, #40]	@ 0x28
 8003fcc:	eb61 0303 	sbc.w	r3, r1, r3
 8003fd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003fd2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003fd6:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8003fd8:	f7ff feb4 	bl	8003d44 <_ZN11ArduinoJson8V730HB226detail6NumberC1Ex>
 8003fdc:	e162      	b.n	80042a4 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x450>
      }
    } else {
      return Number(JsonUInt(mantissa));
 8003fde:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8003fe2:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8003fe4:	f7ff fec4 	bl	8003d70 <_ZN11ArduinoJson8V730HB226detail6NumberC1Ey>
 8003fe8:	e15c      	b.n	80042a4 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x450>
    }
  }

  // avoid mantissa overflow
  while (mantissa > traits::mantissa_max) {
    mantissa /= 10;
 8003fea:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
 8003fee:	f04f 020a 	mov.w	r2, #10
 8003ff2:	f04f 0300 	mov.w	r3, #0
 8003ff6:	f7fc fca5 	bl	8000944 <__aeabi_uldivmod>
 8003ffa:	4602      	mov	r2, r0
 8003ffc:	460b      	mov	r3, r1
 8003ffe:	e9c7 2322 	strd	r2, r3, [r7, #136]	@ 0x88
    exponent_offset++;
 8004002:	f9b7 3086 	ldrsh.w	r3, [r7, #134]	@ 0x86
 8004006:	b29b      	uxth	r3, r3
 8004008:	3301      	adds	r3, #1
 800400a:	b29b      	uxth	r3, r3
 800400c:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
  while (mantissa > traits::mantissa_max) {
 8004010:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8004014:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004018:	d2e7      	bcs.n	8003fea <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x196>
  }

  // remaing digits can't fit in the mantissa
  while (isdigit(*s)) {
 800401a:	e009      	b.n	8004030 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x1dc>
    exponent_offset++;
 800401c:	f9b7 3086 	ldrsh.w	r3, [r7, #134]	@ 0x86
 8004020:	b29b      	uxth	r3, r3
 8004022:	3301      	adds	r3, #1
 8004024:	b29b      	uxth	r3, r3
 8004026:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
    s++;
 800402a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800402c:	3301      	adds	r3, #1
 800402e:	64bb      	str	r3, [r7, #72]	@ 0x48
  while (isdigit(*s)) {
 8004030:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004032:	781b      	ldrb	r3, [r3, #0]
 8004034:	4618      	mov	r0, r3
 8004036:	f7ff fdfa 	bl	8003c2e <_ZN11ArduinoJson8V730HB226detail7isdigitEc>
 800403a:	4603      	mov	r3, r0
 800403c:	2b00      	cmp	r3, #0
 800403e:	d1ed      	bne.n	800401c <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x1c8>
  }

  if (*s == '.') {
 8004040:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004042:	781b      	ldrb	r3, [r3, #0]
 8004044:	2b2e      	cmp	r3, #46	@ 0x2e
 8004046:	d14c      	bne.n	80040e2 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x28e>
    s++;
 8004048:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800404a:	3301      	adds	r3, #1
 800404c:	64bb      	str	r3, [r7, #72]	@ 0x48
    while (isdigit(*s)) {
 800404e:	e040      	b.n	80040d2 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x27e>
      if (mantissa < traits::mantissa_max / 10) {
 8004050:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8004054:	f1b2 3f99 	cmp.w	r2, #2576980377	@ 0x99999999
 8004058:	4953      	ldr	r1, [pc, #332]	@ (80041a8 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x354>)
 800405a:	418b      	sbcs	r3, r1
 800405c:	d236      	bcs.n	80040cc <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x278>
        mantissa = mantissa * 10 + uint8_t(*s - '0');
 800405e:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	@ 0x88
 8004062:	4622      	mov	r2, r4
 8004064:	462b      	mov	r3, r5
 8004066:	f04f 0000 	mov.w	r0, #0
 800406a:	f04f 0100 	mov.w	r1, #0
 800406e:	0099      	lsls	r1, r3, #2
 8004070:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8004074:	0090      	lsls	r0, r2, #2
 8004076:	4602      	mov	r2, r0
 8004078:	460b      	mov	r3, r1
 800407a:	eb12 0a04 	adds.w	sl, r2, r4
 800407e:	eb43 0b05 	adc.w	fp, r3, r5
 8004082:	eb1a 030a 	adds.w	r3, sl, sl
 8004086:	60bb      	str	r3, [r7, #8]
 8004088:	eb4b 030b 	adc.w	r3, fp, fp
 800408c:	60fb      	str	r3, [r7, #12]
 800408e:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8004092:	4652      	mov	r2, sl
 8004094:	465b      	mov	r3, fp
 8004096:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8004098:	7809      	ldrb	r1, [r1, #0]
 800409a:	3930      	subs	r1, #48	@ 0x30
 800409c:	b2c9      	uxtb	r1, r1
 800409e:	b2c9      	uxtb	r1, r1
 80040a0:	2000      	movs	r0, #0
 80040a2:	6239      	str	r1, [r7, #32]
 80040a4:	6278      	str	r0, [r7, #36]	@ 0x24
 80040a6:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80040aa:	4621      	mov	r1, r4
 80040ac:	1851      	adds	r1, r2, r1
 80040ae:	6039      	str	r1, [r7, #0]
 80040b0:	4629      	mov	r1, r5
 80040b2:	414b      	adcs	r3, r1
 80040b4:	607b      	str	r3, [r7, #4]
 80040b6:	e9d7 3400 	ldrd	r3, r4, [r7]
 80040ba:	e9c7 3422 	strd	r3, r4, [r7, #136]	@ 0x88
        exponent_offset--;
 80040be:	f9b7 3086 	ldrsh.w	r3, [r7, #134]	@ 0x86
 80040c2:	b29b      	uxth	r3, r3
 80040c4:	3b01      	subs	r3, #1
 80040c6:	b29b      	uxth	r3, r3
 80040c8:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
      }
      s++;
 80040cc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80040ce:	3301      	adds	r3, #1
 80040d0:	64bb      	str	r3, [r7, #72]	@ 0x48
    while (isdigit(*s)) {
 80040d2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80040d4:	781b      	ldrb	r3, [r3, #0]
 80040d6:	4618      	mov	r0, r3
 80040d8:	f7ff fda9 	bl	8003c2e <_ZN11ArduinoJson8V730HB226detail7isdigitEc>
 80040dc:	4603      	mov	r3, r0
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d1b6      	bne.n	8004050 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x1fc>
    }
  }

  int exponent = 0;
 80040e2:	2300      	movs	r3, #0
 80040e4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (*s == 'e' || *s == 'E') {
 80040e8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80040ea:	781b      	ldrb	r3, [r3, #0]
 80040ec:	2b65      	cmp	r3, #101	@ 0x65
 80040ee:	d003      	beq.n	80040f8 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x2a4>
 80040f0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80040f2:	781b      	ldrb	r3, [r3, #0]
 80040f4:	2b45      	cmp	r3, #69	@ 0x45
 80040f6:	d171      	bne.n	80041dc <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x388>
    s++;
 80040f8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80040fa:	3301      	adds	r3, #1
 80040fc:	64bb      	str	r3, [r7, #72]	@ 0x48
    bool negative_exponent = false;
 80040fe:	2300      	movs	r3, #0
 8004100:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    if (*s == '-') {
 8004104:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004106:	781b      	ldrb	r3, [r3, #0]
 8004108:	2b2d      	cmp	r3, #45	@ 0x2d
 800410a:	d106      	bne.n	800411a <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x2c6>
      negative_exponent = true;
 800410c:	2301      	movs	r3, #1
 800410e:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
      s++;
 8004112:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004114:	3301      	adds	r3, #1
 8004116:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004118:	e04f      	b.n	80041ba <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x366>
    } else if (*s == '+') {
 800411a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800411c:	781b      	ldrb	r3, [r3, #0]
 800411e:	2b2b      	cmp	r3, #43	@ 0x2b
 8004120:	d14b      	bne.n	80041ba <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x366>
      s++;
 8004122:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004124:	3301      	adds	r3, #1
 8004126:	64bb      	str	r3, [r7, #72]	@ 0x48
    }

    while (isdigit(*s)) {
 8004128:	e047      	b.n	80041ba <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x366>
      exponent = exponent * 10 + (*s - '0');
 800412a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800412e:	4613      	mov	r3, r2
 8004130:	009b      	lsls	r3, r3, #2
 8004132:	4413      	add	r3, r2
 8004134:	005b      	lsls	r3, r3, #1
 8004136:	461a      	mov	r2, r3
 8004138:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800413a:	781b      	ldrb	r3, [r3, #0]
 800413c:	3b30      	subs	r3, #48	@ 0x30
 800413e:	4413      	add	r3, r2
 8004140:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
      if (exponent + exponent_offset > traits::exponent_max) {
 8004144:	f9b7 2086 	ldrsh.w	r2, [r7, #134]	@ 0x86
 8004148:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800414c:	4413      	add	r3, r2
 800414e:	f5b3 7f9a 	cmp.w	r3, #308	@ 0x134
 8004152:	dd2f      	ble.n	80041b4 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x360>
        if (negative_exponent)
 8004154:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8004158:	2b00      	cmp	r3, #0
 800415a:	d00e      	beq.n	800417a <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x326>
          return Number(is_negative ? -0.0f : 0.0f);
 800415c:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8004160:	2b00      	cmp	r3, #0
 8004162:	d002      	beq.n	800416a <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x316>
 8004164:	eddf 7a11 	vldr	s15, [pc, #68]	@ 80041ac <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x358>
 8004168:	e001      	b.n	800416e <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x31a>
 800416a:	eddf 7a11 	vldr	s15, [pc, #68]	@ 80041b0 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x35c>
 800416e:	eeb0 0a67 	vmov.f32	s0, s15
 8004172:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8004174:	f7ff fdd1 	bl	8003d1a <_ZN11ArduinoJson8V730HB226detail6NumberC1Ef>
 8004178:	e094      	b.n	80042a4 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x450>
        else
          return Number(is_negative ? -traits::inf() : traits::inf());
 800417a:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 800417e:	2b00      	cmp	r3, #0
 8004180:	d006      	beq.n	8004190 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x33c>
 8004182:	f000 fda7 	bl	8004cd4 <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIdLj8EE3infEv>
 8004186:	eeb0 7b40 	vmov.f64	d7, d0
 800418a:	eeb1 7b47 	vneg.f64	d7, d7
 800418e:	e003      	b.n	8004198 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x344>
 8004190:	f000 fda0 	bl	8004cd4 <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIdLj8EE3infEv>
 8004194:	eeb0 7b40 	vmov.f64	d7, d0
 8004198:	eeb0 0b47 	vmov.f64	d0, d7
 800419c:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 800419e:	f7ff fdfd 	bl	8003d9c <_ZN11ArduinoJson8V730HB226detail6NumberC1Ed>
 80041a2:	e07f      	b.n	80042a4 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x450>
 80041a4:	19999999 	.word	0x19999999
 80041a8:	00019999 	.word	0x00019999
 80041ac:	80000000 	.word	0x80000000
 80041b0:	00000000 	.word	0x00000000
      }
      s++;
 80041b4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80041b6:	3301      	adds	r3, #1
 80041b8:	64bb      	str	r3, [r7, #72]	@ 0x48
    while (isdigit(*s)) {
 80041ba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80041bc:	781b      	ldrb	r3, [r3, #0]
 80041be:	4618      	mov	r0, r3
 80041c0:	f7ff fd35 	bl	8003c2e <_ZN11ArduinoJson8V730HB226detail7isdigitEc>
 80041c4:	4603      	mov	r3, r0
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d1af      	bne.n	800412a <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x2d6>
    }
    if (negative_exponent)
 80041ca:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d004      	beq.n	80041dc <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x388>
      exponent = -exponent;
 80041d2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80041d6:	425b      	negs	r3, r3
 80041d8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  }
  exponent += exponent_offset;
 80041dc:	f9b7 3086 	ldrsh.w	r3, [r7, #134]	@ 0x86
 80041e0:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80041e4:	4413      	add	r3, r2
 80041e6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80

  // we should be at the end of the string, otherwise it's an error
  if (*s != '\0')
 80041ea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80041ec:	781b      	ldrb	r3, [r3, #0]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d003      	beq.n	80041fa <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x3a6>
    return Number();
 80041f2:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 80041f4:	f7ff fd80 	bl	8003cf8 <_ZN11ArduinoJson8V730HB226detail6NumberC1Ev>
 80041f8:	e054      	b.n	80042a4 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x450>

#if ARDUINOJSON_USE_DOUBLE
  bool isDouble = exponent < -FloatTraits<float>::exponent_max ||
                  exponent > FloatTraits<float>::exponent_max ||
 80041fa:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80041fe:	f113 0f26 	cmn.w	r3, #38	@ 0x26
 8004202:	db0a      	blt.n	800421a <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x3c6>
  bool isDouble = exponent < -FloatTraits<float>::exponent_max ||
 8004204:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004208:	2b26      	cmp	r3, #38	@ 0x26
 800420a:	dc06      	bgt.n	800421a <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x3c6>
                  exponent > FloatTraits<float>::exponent_max ||
 800420c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8004210:	f5b2 0f00 	cmp.w	r2, #8388608	@ 0x800000
 8004214:	f173 0300 	sbcs.w	r3, r3, #0
 8004218:	d301      	bcc.n	800421e <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x3ca>
 800421a:	2301      	movs	r3, #1
 800421c:	e000      	b.n	8004220 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x3cc>
 800421e:	2300      	movs	r3, #0
  bool isDouble = exponent < -FloatTraits<float>::exponent_max ||
 8004220:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
                  mantissa > FloatTraits<float>::mantissa_max;
  if (isDouble) {
 8004224:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8004228:	2b00      	cmp	r3, #0
 800422a:	d01e      	beq.n	800426a <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x416>
    auto final_result = make_float(double(mantissa), exponent);
 800422c:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
 8004230:	f7fc fa44 	bl	80006bc <__aeabi_ul2d>
 8004234:	4602      	mov	r2, r0
 8004236:	460b      	mov	r3, r1
 8004238:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 800423c:	ec43 2b10 	vmov	d0, r2, r3
 8004240:	f000 fd56 	bl	8004cf0 <_ZN11ArduinoJson8V730HB226detail10make_floatIdiEET_S3_T0_>
 8004244:	ed87 0b14 	vstr	d0, [r7, #80]	@ 0x50
    return Number(is_negative ? -final_result : final_result);
 8004248:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 800424c:	2b00      	cmp	r3, #0
 800424e:	d004      	beq.n	800425a <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x406>
 8004250:	ed97 7b14 	vldr	d7, [r7, #80]	@ 0x50
 8004254:	eeb1 7b47 	vneg.f64	d7, d7
 8004258:	e001      	b.n	800425e <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x40a>
 800425a:	ed97 7b14 	vldr	d7, [r7, #80]	@ 0x50
 800425e:	eeb0 0b47 	vmov.f64	d0, d7
 8004262:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8004264:	f7ff fd9a 	bl	8003d9c <_ZN11ArduinoJson8V730HB226detail6NumberC1Ed>
 8004268:	e01c      	b.n	80042a4 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x450>
  } else
#endif
  {
    auto final_result = make_float(float(mantissa), exponent);
 800426a:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
 800426e:	f7fc fb23 	bl	80008b8 <__aeabi_ul2f>
 8004272:	4603      	mov	r3, r0
 8004274:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 8004278:	ee00 3a10 	vmov	s0, r3
 800427c:	f000 fd79 	bl	8004d72 <_ZN11ArduinoJson8V730HB226detail10make_floatIfiEET_S3_T0_>
 8004280:	ed87 0a16 	vstr	s0, [r7, #88]	@ 0x58
    return Number(is_negative ? -final_result : final_result);
 8004284:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8004288:	2b00      	cmp	r3, #0
 800428a:	d004      	beq.n	8004296 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x442>
 800428c:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 8004290:	eef1 7a67 	vneg.f32	s15, s15
 8004294:	e001      	b.n	800429a <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc+0x446>
 8004296:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 800429a:	eeb0 0a67 	vmov.f32	s0, s15
 800429e:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 80042a0:	f7ff fd3b 	bl	8003d1a <_ZN11ArduinoJson8V730HB226detail6NumberC1Ef>
  }
}
 80042a4:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 80042a6:	3798      	adds	r7, #152	@ 0x98
 80042a8:	46bd      	mov	sp, r7
 80042aa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80042ae:	bf00      	nop

080042b0 <_ZN6Remora11setBaseFreqEm>:
    void loadModules();

public:

	Remora();
    void setBaseFreq(uint32_t freq) { baseFreq = freq; }
 80042b0:	b480      	push	{r7}
 80042b2:	b083      	sub	sp, #12
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
 80042b8:	6039      	str	r1, [r7, #0]
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	683a      	ldr	r2, [r7, #0]
 80042be:	619a      	str	r2, [r3, #24]
 80042c0:	bf00      	nop
 80042c2:	370c      	adds	r7, #12
 80042c4:	46bd      	mov	sp, r7
 80042c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ca:	4770      	bx	lr

080042cc <_ZN6Remora12setServoFreqEm>:
    void setServoFreq(uint32_t freq) { servoFreq = freq; }
 80042cc:	b480      	push	{r7}
 80042ce:	b083      	sub	sp, #12
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
 80042d4:	6039      	str	r1, [r7, #0]
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	683a      	ldr	r2, [r7, #0]
 80042da:	61da      	str	r2, [r3, #28]
 80042dc:	bf00      	nop
 80042de:	370c      	adds	r7, #12
 80042e0:	46bd      	mov	sp, r7
 80042e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e6:	4770      	bx	lr

080042e8 <_ZN17JsonConfigHandlerC1EP6Remora>:

#include "jsonConfigHandler.h"
#include "../remora.h"


JsonConfigHandler::JsonConfigHandler(Remora* _remora) :
 80042e8:	b590      	push	{r4, r7, lr}
 80042ea:	b085      	sub	sp, #20
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
 80042f0:	6039      	str	r1, [r7, #0]
	remoraInstance(_remora),
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	683a      	ldr	r2, [r7, #0]
 80042f6:	601a      	str	r2, [r3, #0]
	configError(false)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	1d1c      	adds	r4, r3, #4
 80042fc:	f107 030c 	add.w	r3, r7, #12
 8004300:	4618      	mov	r0, r3
 8004302:	f019 ff5c 	bl	801e1be <_ZNSaIcEC1Ev>
 8004306:	f107 030c 	add.w	r3, r7, #12
 800430a:	461a      	mov	r2, r3
 800430c:	4914      	ldr	r1, [pc, #80]	@ (8004360 <_ZN17JsonConfigHandlerC1EP6Remora+0x78>)
 800430e:	4620      	mov	r0, r4
 8004310:	f000 fd70 	bl	8004df4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 8004314:	f107 030c 	add.w	r3, r7, #12
 8004318:	4618      	mov	r0, r3
 800431a:	f019 ff51 	bl	801e1c0 <_ZNSaIcED1Ev>
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	4a10      	ldr	r2, [pc, #64]	@ (8004364 <_ZN17JsonConfigHandlerC1EP6Remora+0x7c>)
 8004322:	61da      	str	r2, [r3, #28]
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	f103 0420 	add.w	r4, r3, #32
 800432a:	f7fe f953 	bl	80025d4 <_ZN11ArduinoJson8V730HB226detail16DefaultAllocator8instanceEv>
 800432e:	4603      	mov	r3, r0
 8004330:	4619      	mov	r1, r3
 8004332:	4620      	mov	r0, r4
 8004334:	f7fe feeb 	bl	800310e <_ZN11ArduinoJson8V730HB2212JsonDocumentC1EPNS0_9AllocatorE>
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	3360      	adds	r3, #96	@ 0x60
 800433c:	4618      	mov	r0, r3
 800433e:	f7fe fea8 	bl	8003092 <_ZN11ArduinoJson8V730HB2210JsonObjectC1Ev>
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	2200      	movs	r2, #0
 8004346:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
{
	loadConfiguration();
 800434a:	6878      	ldr	r0, [r7, #4]
 800434c:	f000 f80c 	bl	8004368 <_ZN17JsonConfigHandler17loadConfigurationEv>
    updateThreadFreq();
 8004350:	6878      	ldr	r0, [r7, #4]
 8004352:	f000 f82b 	bl	80043ac <_ZN17JsonConfigHandler16updateThreadFreqEv>
}
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	4618      	mov	r0, r3
 800435a:	3714      	adds	r7, #20
 800435c:	46bd      	mov	sp, r7
 800435e:	bd90      	pop	{r4, r7, pc}
 8004360:	0801f848 	.word	0x0801f848
 8004364:	0801f84c 	.word	0x0801f84c

08004368 <_ZN17JsonConfigHandler17loadConfigurationEv>:

bool JsonConfigHandler::loadConfiguration() {
 8004368:	b580      	push	{r7, lr}
 800436a:	b082      	sub	sp, #8
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
	// Clear any existing configuration
    jsonContent.clear();
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	3304      	adds	r3, #4
 8004374:	4618      	mov	r0, r3
 8004376:	f01a f84e 	bl	801e416 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5clearEv>
    doc.clear();
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	3320      	adds	r3, #32
 800437e:	4618      	mov	r0, r3
 8004380:	f7fe fee5 	bl	800314e <_ZN11ArduinoJson8V730HB2212JsonDocument5clearEv>

    // Read and parse the configuration file
    if (!readFileContents()) {
 8004384:	6878      	ldr	r0, [r7, #4]
 8004386:	f000 f903 	bl	8004590 <_ZN17JsonConfigHandler16readFileContentsEv>
 800438a:	4603      	mov	r3, r0
 800438c:	f083 0301 	eor.w	r3, r3, #1
 8004390:	b2db      	uxtb	r3, r3
 8004392:	2b00      	cmp	r3, #0
 8004394:	d001      	beq.n	800439a <_ZN17JsonConfigHandler17loadConfigurationEv+0x32>
        return false;
 8004396:	2300      	movs	r3, #0
 8004398:	e003      	b.n	80043a2 <_ZN17JsonConfigHandler17loadConfigurationEv+0x3a>
    }
    parseJson();
 800439a:	6878      	ldr	r0, [r7, #4]
 800439c:	f000 f9c8 	bl	8004730 <_ZN17JsonConfigHandler9parseJsonEv>
    return true;
 80043a0:	2301      	movs	r3, #1
}
 80043a2:	4618      	mov	r0, r3
 80043a4:	3708      	adds	r7, #8
 80043a6:	46bd      	mov	sp, r7
 80043a8:	bd80      	pop	{r7, pc}
	...

080043ac <_ZN17JsonConfigHandler16updateThreadFreqEv>:


void JsonConfigHandler::updateThreadFreq() {
 80043ac:	b590      	push	{r4, r7, lr}
 80043ae:	b0a1      	sub	sp, #132	@ 0x84
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	60f8      	str	r0, [r7, #12]
    if (configError) return;
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	f040 808e 	bne.w	80044dc <_ZN17JsonConfigHandler16updateThreadFreqEv+0x130>

    printf("\n5. Updating thread frequencies\n");
 80043c0:	4848      	ldr	r0, [pc, #288]	@ (80044e4 <_ZN17JsonConfigHandler16updateThreadFreqEv+0x138>)
 80043c2:	f01a fadf 	bl	801e984 <puts>

    JsonArray Threads = doc["Threads"];
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	f103 0120 	add.w	r1, r3, #32
 80043cc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80043d0:	4a45      	ldr	r2, [pc, #276]	@ (80044e8 <_ZN17JsonConfigHandler16updateThreadFreqEv+0x13c>)
 80043d2:	4618      	mov	r0, r3
 80043d4:	f000 fd38 	bl	8004e48 <_ZN11ArduinoJson8V730HB2212JsonDocumentixIA8_cLi0EEENS0_6detail11MemberProxyIRS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueESA_NS4_9remove_cvINS4_16remove_referenceISA_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKSA_>
 80043d8:	f107 031c 	add.w	r3, r7, #28
 80043dc:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 80043e0:	4611      	mov	r1, r2
 80043e2:	4618      	mov	r0, r3
 80043e4:	f000 fd49 	bl	8004e7a <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentENS1_9RamStringEEEEcvT_INS0_9JsonArrayELi0EEEv>

    // create objects from JSON data
    for (JsonArray::iterator it=Threads.begin(); it!=Threads.end(); ++it) {
 80043e8:	f107 0310 	add.w	r3, r7, #16
 80043ec:	f107 021c 	add.w	r2, r7, #28
 80043f0:	4611      	mov	r1, r2
 80043f2:	4618      	mov	r0, r3
 80043f4:	f7fe fe1e 	bl	8003034 <_ZNK11ArduinoJson8V730HB229JsonArray5beginEv>
 80043f8:	e05c      	b.n	80044b4 <_ZN17JsonConfigHandler16updateThreadFreqEv+0x108>
        thread = *it;
 80043fa:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80043fe:	f107 0210 	add.w	r2, r7, #16
 8004402:	4611      	mov	r1, r2
 8004404:	4618      	mov	r0, r3
 8004406:	f7fe fdbd 	bl	8002f84 <_ZN11ArduinoJson8V730HB2217JsonArrayIteratordeEv>
 800440a:	68fc      	ldr	r4, [r7, #12]
 800440c:	463b      	mov	r3, r7
 800440e:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 8004412:	4611      	mov	r1, r2
 8004414:	4618      	mov	r0, r3
 8004416:	f000 fd3f 	bl	8004e98 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS0_11JsonVariantEEcvT_INS0_10JsonObjectELi0EEEv>
 800441a:	f104 0360 	add.w	r3, r4, #96	@ 0x60
 800441e:	463a      	mov	r2, r7
 8004420:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004424:	e883 0003 	stmia.w	r3, {r0, r1}
        const char* configor = thread["Thread"];
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	f103 0160 	add.w	r1, r3, #96	@ 0x60
 800442e:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8004432:	4a2e      	ldr	r2, [pc, #184]	@ (80044ec <_ZN17JsonConfigHandler16updateThreadFreqEv+0x140>)
 8004434:	4618      	mov	r0, r3
 8004436:	f000 fd3e 	bl	8004eb6 <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA7_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 800443a:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800443e:	4618      	mov	r0, r3
 8004440:	f000 fd5e 	bl	8004f00 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_IPKcLi0EEEv>
 8004444:	67f8      	str	r0, [r7, #124]	@ 0x7c
        uint32_t    freq = thread["Frequency"];
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	f103 0160 	add.w	r1, r3, #96	@ 0x60
 800444c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8004450:	4a27      	ldr	r2, [pc, #156]	@ (80044f0 <_ZN17JsonConfigHandler16updateThreadFreqEv+0x144>)
 8004452:	4618      	mov	r0, r3
 8004454:	f000 fd60 	bl	8004f18 <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA10_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 8004458:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800445c:	4618      	mov	r0, r3
 800445e:	f000 fd80 	bl	8004f62 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_ImLi0EEEv>
 8004462:	67b8      	str	r0, [r7, #120]	@ 0x78
        if (!strcmp(configor,"Base")) {
 8004464:	4923      	ldr	r1, [pc, #140]	@ (80044f4 <_ZN17JsonConfigHandler16updateThreadFreqEv+0x148>)
 8004466:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 8004468:	f7fb ff3a 	bl	80002e0 <strcmp>
 800446c:	4603      	mov	r3, r0
 800446e:	2b00      	cmp	r3, #0
 8004470:	d10a      	bne.n	8004488 <_ZN17JsonConfigHandler16updateThreadFreqEv+0xdc>
            printf("	Setting BASE thread frequency to %lu\n", freq);
 8004472:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8004474:	4820      	ldr	r0, [pc, #128]	@ (80044f8 <_ZN17JsonConfigHandler16updateThreadFreqEv+0x14c>)
 8004476:	f01a fa15 	bl	801e8a4 <iprintf>
            remoraInstance->setBaseFreq(freq);
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8004480:	4618      	mov	r0, r3
 8004482:	f7ff ff15 	bl	80042b0 <_ZN6Remora11setBaseFreqEm>
 8004486:	e010      	b.n	80044aa <_ZN17JsonConfigHandler16updateThreadFreqEv+0xfe>
        }
        else if (!strcmp(configor,"Servo")) {
 8004488:	491c      	ldr	r1, [pc, #112]	@ (80044fc <_ZN17JsonConfigHandler16updateThreadFreqEv+0x150>)
 800448a:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 800448c:	f7fb ff28 	bl	80002e0 <strcmp>
 8004490:	4603      	mov	r3, r0
 8004492:	2b00      	cmp	r3, #0
 8004494:	d109      	bne.n	80044aa <_ZN17JsonConfigHandler16updateThreadFreqEv+0xfe>
            printf("	Setting SERVO thread frequency to %lu\n", freq);
 8004496:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8004498:	4819      	ldr	r0, [pc, #100]	@ (8004500 <_ZN17JsonConfigHandler16updateThreadFreqEv+0x154>)
 800449a:	f01a fa03 	bl	801e8a4 <iprintf>
            remoraInstance->setServoFreq(freq);
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 80044a4:	4618      	mov	r0, r3
 80044a6:	f7ff ff11 	bl	80042cc <_ZN6Remora12setServoFreqEm>
    for (JsonArray::iterator it=Threads.begin(); it!=Threads.end(); ++it) {
 80044aa:	f107 0310 	add.w	r3, r7, #16
 80044ae:	4618      	mov	r0, r3
 80044b0:	f7fe fd8c 	bl	8002fcc <_ZN11ArduinoJson8V730HB2217JsonArrayIteratorppEv>
 80044b4:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80044b8:	f107 021c 	add.w	r2, r7, #28
 80044bc:	4611      	mov	r1, r2
 80044be:	4618      	mov	r0, r3
 80044c0:	f7fe fddb 	bl	800307a <_ZNK11ArduinoJson8V730HB229JsonArray3endEv>
 80044c4:	f107 026c 	add.w	r2, r7, #108	@ 0x6c
 80044c8:	f107 0310 	add.w	r3, r7, #16
 80044cc:	4611      	mov	r1, r2
 80044ce:	4618      	mov	r0, r3
 80044d0:	f7fe fd6c 	bl	8002fac <_ZNK11ArduinoJson8V730HB2217JsonArrayIteratorneERKS1_>
 80044d4:	4603      	mov	r3, r0
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d18f      	bne.n	80043fa <_ZN17JsonConfigHandler16updateThreadFreqEv+0x4e>
 80044da:	e000      	b.n	80044de <_ZN17JsonConfigHandler16updateThreadFreqEv+0x132>
    if (configError) return;
 80044dc:	bf00      	nop
        }
    }
}
 80044de:	3784      	adds	r7, #132	@ 0x84
 80044e0:	46bd      	mov	sp, r7
 80044e2:	bd90      	pop	{r4, r7, pc}
 80044e4:	0801f858 	.word	0x0801f858
 80044e8:	0801f878 	.word	0x0801f878
 80044ec:	0801f880 	.word	0x0801f880
 80044f0:	0801f888 	.word	0x0801f888
 80044f4:	0801f894 	.word	0x0801f894
 80044f8:	0801f89c 	.word	0x0801f89c
 80044fc:	0801f8c4 	.word	0x0801f8c4
 8004500:	0801f8cc 	.word	0x0801f8cc

08004504 <_ZN17JsonConfigHandler10getModulesEv>:


JsonArray JsonConfigHandler::getModules() {
 8004504:	b590      	push	{r4, r7, lr}
 8004506:	b08f      	sub	sp, #60	@ 0x3c
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
 800450c:	6039      	str	r1, [r7, #0]
	if (doc["Modules"].is<JsonVariant>())
 800450e:	683b      	ldr	r3, [r7, #0]
 8004510:	f103 0120 	add.w	r1, r3, #32
 8004514:	f107 0308 	add.w	r3, r7, #8
 8004518:	4a1c      	ldr	r2, [pc, #112]	@ (800458c <_ZN17JsonConfigHandler10getModulesEv+0x88>)
 800451a:	4618      	mov	r0, r3
 800451c:	f000 fc94 	bl	8004e48 <_ZN11ArduinoJson8V730HB2212JsonDocumentixIA8_cLi0EEENS0_6detail11MemberProxyIRS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueESA_NS4_9remove_cvINS4_16remove_referenceISA_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKSA_>
 8004520:	f107 0308 	add.w	r3, r7, #8
 8004524:	637b      	str	r3, [r7, #52]	@ 0x34
 8004526:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004528:	633b      	str	r3, [r7, #48]	@ 0x30
  return containsKey(key.template as<const char*>());
}

template <typename TDerived>
inline JsonVariant VariantRefBase<TDerived>::getVariant() const {
  return JsonVariant(getData(), getResourceManager());
 800452a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800452c:	f001 fc9a 	bl	8005e64 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentENS1_9RamStringEEEE7getDataEv>
 8004530:	4604      	mov	r4, r0
 8004532:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004534:	f001 fca6 	bl	8005e84 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentENS1_9RamStringEEEE18getResourceManagerEv>
 8004538:	4602      	mov	r2, r0
 800453a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800453e:	4621      	mov	r1, r4
 8004540:	4618      	mov	r0, r3
 8004542:	f7fe fcb9 	bl	8002eb8 <_ZN11ArduinoJson8V730HB2211JsonVariantC1EPNS0_6detail11VariantDataEPNS2_15ResourceManagerE>
  }

  template <typename T>
  FORCE_INLINE enable_if_t<is_same<T, JsonVariant>::value, T> getVariant()
      const {
    return getVariant();
 8004546:	bf00      	nop
template <typename TDerived>
template <typename T>
inline bool VariantRefBase<TDerived>::is() const {
  using variant_type =  // JsonVariantConst or JsonVariant?
      typename function_traits<decltype(&Converter<T>::checkJson)>::arg1_type;
  return Converter<T>::checkJson(getVariant<variant_type>());
 8004548:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800454c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004550:	f7fe fcdd 	bl	8002f0e <_ZN11ArduinoJson8V730HB229ConverterINS0_11JsonVariantEvE9checkJsonES2_>
 8004554:	4603      	mov	r3, r0
 8004556:	bf00      	nop
 8004558:	2b00      	cmp	r3, #0
 800455a:	d010      	beq.n	800457e <_ZN17JsonConfigHandler10getModulesEv+0x7a>
        return doc["Modules"].as<JsonArray>();
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	f103 0120 	add.w	r1, r3, #32
 8004562:	f107 0318 	add.w	r3, r7, #24
 8004566:	4a09      	ldr	r2, [pc, #36]	@ (800458c <_ZN17JsonConfigHandler10getModulesEv+0x88>)
 8004568:	4618      	mov	r0, r3
 800456a:	f000 fc6d 	bl	8004e48 <_ZN11ArduinoJson8V730HB2212JsonDocumentixIA8_cLi0EEENS0_6detail11MemberProxyIRS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueESA_NS4_9remove_cvINS4_16remove_referenceISA_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKSA_>
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	f107 0218 	add.w	r2, r7, #24
 8004574:	4611      	mov	r1, r2
 8004576:	4618      	mov	r0, r3
 8004578:	f000 fcff 	bl	8004f7a <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentENS1_9RamStringEEEE2asINS0_9JsonArrayEEET_v>
 800457c:	e002      	b.n	8004584 <_ZN17JsonConfigHandler10getModulesEv+0x80>
    else
        return JsonArray();
 800457e:	6878      	ldr	r0, [r7, #4]
 8004580:	f7fe fd34 	bl	8002fec <_ZN11ArduinoJson8V730HB229JsonArrayC1Ev>
}
 8004584:	6878      	ldr	r0, [r7, #4]
 8004586:	373c      	adds	r7, #60	@ 0x3c
 8004588:	46bd      	mov	sp, r7
 800458a:	bd90      	pop	{r4, r7, pc}
 800458c:	0801f8f4 	.word	0x0801f8f4

08004590 <_ZN17JsonConfigHandler16readFileContentsEv>:
    }
    return JsonObject(); // Return empty object if not found
}
*/

bool JsonConfigHandler::readFileContents() {
 8004590:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004594:	b08f      	sub	sp, #60	@ 0x3c
 8004596:	af00      	add	r7, sp, #0
 8004598:	6078      	str	r0, [r7, #4]

	uint32_t bytesread; // bytes read count


    printf("\n1. Reading JSON configuration file\n");
 800459a:	485a      	ldr	r0, [pc, #360]	@ (8004704 <_ZN17JsonConfigHandler16readFileContentsEv+0x174>)
 800459c:	f01a f9f2 	bl	801e984 <puts>

    // Try to mount the file system
    printf("	Mounting the file system... \n");
 80045a0:	4859      	ldr	r0, [pc, #356]	@ (8004708 <_ZN17JsonConfigHandler16readFileContentsEv+0x178>)
 80045a2:	f01a f9ef 	bl	801e984 <puts>
    if(f_mount(&SDFatFS, (TCHAR const*)SDPath, 0) != FR_OK)
 80045a6:	2200      	movs	r2, #0
 80045a8:	4958      	ldr	r1, [pc, #352]	@ (800470c <_ZN17JsonConfigHandler16readFileContentsEv+0x17c>)
 80045aa:	4859      	ldr	r0, [pc, #356]	@ (8004710 <_ZN17JsonConfigHandler16readFileContentsEv+0x180>)
 80045ac:	f019 f9a2 	bl	801d8f4 <f_mount>
 80045b0:	4603      	mov	r3, r0
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	bf14      	ite	ne
 80045b6:	2301      	movne	r3, #1
 80045b8:	2300      	moveq	r3, #0
 80045ba:	b2db      	uxtb	r3, r3
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d005      	beq.n	80045cc <_ZN17JsonConfigHandler16readFileContentsEv+0x3c>
	{
    	printf("	Failed to mount SD card\n\r");
 80045c0:	4854      	ldr	r0, [pc, #336]	@ (8004714 <_ZN17JsonConfigHandler16readFileContentsEv+0x184>)
 80045c2:	f01a f96f 	bl	801e8a4 <iprintf>
    	Error_Handler();
 80045c6:	f004 fa4f 	bl	8008a68 <Error_Handler>
 80045ca:	e094      	b.n	80046f6 <_ZN17JsonConfigHandler16readFileContentsEv+0x166>
	}
    else
    {
		//Open file for reading
		if(f_open(&SDFile, filename, FA_READ) != FR_OK)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	69db      	ldr	r3, [r3, #28]
 80045d0:	2201      	movs	r2, #1
 80045d2:	4619      	mov	r1, r3
 80045d4:	4850      	ldr	r0, [pc, #320]	@ (8004718 <_ZN17JsonConfigHandler16readFileContentsEv+0x188>)
 80045d6:	f019 f9d3 	bl	801d980 <f_open>
 80045da:	4603      	mov	r3, r0
 80045dc:	2b00      	cmp	r3, #0
 80045de:	bf14      	ite	ne
 80045e0:	2301      	movne	r3, #1
 80045e2:	2300      	moveq	r3, #0
 80045e4:	b2db      	uxtb	r3, r3
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d005      	beq.n	80045f6 <_ZN17JsonConfigHandler16readFileContentsEv+0x66>
		{
			printf("	Failed to open JSON config file\n");
 80045ea:	484c      	ldr	r0, [pc, #304]	@ (800471c <_ZN17JsonConfigHandler16readFileContentsEv+0x18c>)
 80045ec:	f01a f9ca 	bl	801e984 <puts>
			Error_Handler();
 80045f0:	f004 fa3a 	bl	8008a68 <Error_Handler>
 80045f4:	e07f      	b.n	80046f6 <_ZN17JsonConfigHandler16readFileContentsEv+0x166>
			    // Remove comments from next line to print out the JSON config file
			    printf("\n%s\n", jsonContent.c_str());
			}

			f_close(&SDFile);
		}
 80045f6:	466b      	mov	r3, sp
 80045f8:	461e      	mov	r6, r3
			int32_t length = f_size(&SDFile);
 80045fa:	4b47      	ldr	r3, [pc, #284]	@ (8004718 <_ZN17JsonConfigHandler16readFileContentsEv+0x188>)
 80045fc:	68db      	ldr	r3, [r3, #12]
 80045fe:	633b      	str	r3, [r7, #48]	@ 0x30
			printf("	JSON config file lenght = %2ld\n", length);
 8004600:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004602:	4847      	ldr	r0, [pc, #284]	@ (8004720 <_ZN17JsonConfigHandler16readFileContentsEv+0x190>)
 8004604:	f01a f94e 	bl	801e8a4 <iprintf>
			__attribute__((aligned(32))) char rtext[length];
 8004608:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800460a:	1e4b      	subs	r3, r1, #1
 800460c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800460e:	460a      	mov	r2, r1
 8004610:	2300      	movs	r3, #0
 8004612:	4690      	mov	r8, r2
 8004614:	4699      	mov	r9, r3
 8004616:	f04f 0200 	mov.w	r2, #0
 800461a:	f04f 0300 	mov.w	r3, #0
 800461e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004622:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004626:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800462a:	460a      	mov	r2, r1
 800462c:	2300      	movs	r3, #0
 800462e:	4614      	mov	r4, r2
 8004630:	461d      	mov	r5, r3
 8004632:	f04f 0200 	mov.w	r2, #0
 8004636:	f04f 0300 	mov.w	r3, #0
 800463a:	00eb      	lsls	r3, r5, #3
 800463c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004640:	00e2      	lsls	r2, r4, #3
 8004642:	460b      	mov	r3, r1
 8004644:	3318      	adds	r3, #24
 8004646:	3307      	adds	r3, #7
 8004648:	08db      	lsrs	r3, r3, #3
 800464a:	00db      	lsls	r3, r3, #3
 800464c:	ebad 0d03 	sub.w	sp, sp, r3
 8004650:	466b      	mov	r3, sp
 8004652:	331f      	adds	r3, #31
 8004654:	095b      	lsrs	r3, r3, #5
 8004656:	015b      	lsls	r3, r3, #5
 8004658:	62bb      	str	r3, [r7, #40]	@ 0x28
			if(f_read(&SDFile, rtext, length, (UINT *)&bytesread) != FR_OK)
 800465a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800465c:	f107 030c 	add.w	r3, r7, #12
 8004660:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004662:	482d      	ldr	r0, [pc, #180]	@ (8004718 <_ZN17JsonConfigHandler16readFileContentsEv+0x188>)
 8004664:	f019 fb46 	bl	801dcf4 <f_read>
 8004668:	4603      	mov	r3, r0
 800466a:	2b00      	cmp	r3, #0
 800466c:	bf14      	ite	ne
 800466e:	2301      	movne	r3, #1
 8004670:	2300      	moveq	r3, #0
 8004672:	b2db      	uxtb	r3, r3
 8004674:	2b00      	cmp	r3, #0
 8004676:	d003      	beq.n	8004680 <_ZN17JsonConfigHandler16readFileContentsEv+0xf0>
				printf("	JSON config file read FAILURE\n");
 8004678:	482a      	ldr	r0, [pc, #168]	@ (8004724 <_ZN17JsonConfigHandler16readFileContentsEv+0x194>)
 800467a:	f01a f983 	bl	801e984 <puts>
 800467e:	e036      	b.n	80046ee <_ZN17JsonConfigHandler16readFileContentsEv+0x15e>
				printf("	JSON config file read SUCCESS!\n");
 8004680:	4829      	ldr	r0, [pc, #164]	@ (8004728 <_ZN17JsonConfigHandler16readFileContentsEv+0x198>)
 8004682:	f01a f97f 	bl	801e984 <puts>
				jsonContent.reserve(length + 1);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	1d1a      	adds	r2, r3, #4
 800468a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800468c:	3301      	adds	r3, #1
 800468e:	4619      	mov	r1, r3
 8004690:	4610      	mov	r0, r2
 8004692:	f019 fea5 	bl	801e3e0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7reserveEj>
			    for (int i = 0; i < length; i++) {
 8004696:	2300      	movs	r3, #0
 8004698:	637b      	str	r3, [r7, #52]	@ 0x34
 800469a:	e01a      	b.n	80046d2 <_ZN17JsonConfigHandler16readFileContentsEv+0x142>
			    	jsonContent = jsonContent + rtext[i];
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	1d19      	adds	r1, r3, #4
 80046a0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80046a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80046a4:	4413      	add	r3, r2
 80046a6:	781a      	ldrb	r2, [r3, #0]
 80046a8:	f107 0310 	add.w	r3, r7, #16
 80046ac:	4618      	mov	r0, r3
 80046ae:	f000 fc88 	bl	8004fc2 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_S5_>
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	3304      	adds	r3, #4
 80046b6:	f107 0210 	add.w	r2, r7, #16
 80046ba:	4611      	mov	r1, r2
 80046bc:	4618      	mov	r0, r3
 80046be:	f019 fe20 	bl	801e302 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 80046c2:	f107 0310 	add.w	r3, r7, #16
 80046c6:	4618      	mov	r0, r3
 80046c8:	f019 fe15 	bl	801e2f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
			    for (int i = 0; i < length; i++) {
 80046cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80046ce:	3301      	adds	r3, #1
 80046d0:	637b      	str	r3, [r7, #52]	@ 0x34
 80046d2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80046d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046d6:	429a      	cmp	r2, r3
 80046d8:	dbe0      	blt.n	800469c <_ZN17JsonConfigHandler16readFileContentsEv+0x10c>
			    printf("\n%s\n", jsonContent.c_str());
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	3304      	adds	r3, #4
 80046de:	4618      	mov	r0, r3
 80046e0:	f019 feea 	bl	801e4b8 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 80046e4:	4603      	mov	r3, r0
 80046e6:	4619      	mov	r1, r3
 80046e8:	4810      	ldr	r0, [pc, #64]	@ (800472c <_ZN17JsonConfigHandler16readFileContentsEv+0x19c>)
 80046ea:	f01a f8db 	bl	801e8a4 <iprintf>
			f_close(&SDFile);
 80046ee:	480a      	ldr	r0, [pc, #40]	@ (8004718 <_ZN17JsonConfigHandler16readFileContentsEv+0x188>)
 80046f0:	f019 fcbd 	bl	801e06e <f_close>
 80046f4:	46b5      	mov	sp, r6
    }

	return true;
 80046f6:	2301      	movs	r3, #1
}
 80046f8:	4618      	mov	r0, r3
 80046fa:	373c      	adds	r7, #60	@ 0x3c
 80046fc:	46bd      	mov	sp, r7
 80046fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004702:	bf00      	nop
 8004704:	0801f8fc 	.word	0x0801f8fc
 8004708:	0801f920 	.word	0x0801f920
 800470c:	240004f0 	.word	0x240004f0
 8004710:	240004f4 	.word	0x240004f4
 8004714:	0801f940 	.word	0x0801f940
 8004718:	24000724 	.word	0x24000724
 800471c:	0801f95c 	.word	0x0801f95c
 8004720:	0801f980 	.word	0x0801f980
 8004724:	0801f9a4 	.word	0x0801f9a4
 8004728:	0801f9c4 	.word	0x0801f9c4
 800472c:	0801f9e4 	.word	0x0801f9e4

08004730 <_ZN17JsonConfigHandler9parseJsonEv>:


bool JsonConfigHandler::parseJson() {
 8004730:	b590      	push	{r4, r7, lr}
 8004732:	b085      	sub	sp, #20
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
	
	printf("\n3. Parsing json configuration file\n");
 8004738:	482a      	ldr	r0, [pc, #168]	@ (80047e4 <_ZN17JsonConfigHandler9parseJsonEv+0xb4>)
 800473a:	f01a f923 	bl	801e984 <puts>
	
    // Clear any existing parsed data
    doc.clear();
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	3320      	adds	r3, #32
 8004742:	4618      	mov	r0, r3
 8004744:	f7fe fd03 	bl	800314e <_ZN11ArduinoJson8V730HB2212JsonDocument5clearEv>

    // Parse JSON
    DeserializationError error = deserializeJson(doc, jsonContent.c_str());
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	f103 0420 	add.w	r4, r3, #32
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	3304      	adds	r3, #4
 8004752:	4618      	mov	r0, r3
 8004754:	f019 feb0 	bl	801e4b8 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 8004758:	4603      	mov	r3, r0
 800475a:	4619      	mov	r1, r3
 800475c:	4620      	mov	r0, r4
 800475e:	f000 fc46 	bl	8004fee <_ZN11ArduinoJson8V730HB2215deserializeJsonIRNS0_12JsonDocumentEKcJELi0EEENS0_20DeserializationErrorEOT_PT0_DpOT1_>
 8004762:	4603      	mov	r3, r0
 8004764:	733b      	strb	r3, [r7, #12]

    printf("	Config deserialisation - ");
 8004766:	4820      	ldr	r0, [pc, #128]	@ (80047e8 <_ZN17JsonConfigHandler9parseJsonEv+0xb8>)
 8004768:	f01a f89c 	bl	801e8a4 <iprintf>

    switch (error.code())
 800476c:	f107 030c 	add.w	r3, r7, #12
 8004770:	4618      	mov	r0, r3
 8004772:	f7ff f936 	bl	80039e2 <_ZNK11ArduinoJson8V730HB2220DeserializationError4codeEv>
 8004776:	4603      	mov	r3, r0
 8004778:	2b04      	cmp	r3, #4
 800477a:	d012      	beq.n	80047a2 <_ZN17JsonConfigHandler9parseJsonEv+0x72>
 800477c:	2b04      	cmp	r3, #4
 800477e:	dc18      	bgt.n	80047b2 <_ZN17JsonConfigHandler9parseJsonEv+0x82>
 8004780:	2b00      	cmp	r3, #0
 8004782:	d002      	beq.n	800478a <_ZN17JsonConfigHandler9parseJsonEv+0x5a>
 8004784:	2b03      	cmp	r3, #3
 8004786:	d004      	beq.n	8004792 <_ZN17JsonConfigHandler9parseJsonEv+0x62>
 8004788:	e013      	b.n	80047b2 <_ZN17JsonConfigHandler9parseJsonEv+0x82>
    {
        case DeserializationError::Ok:
            printf("Deserialization succeeded\n");
 800478a:	4818      	ldr	r0, [pc, #96]	@ (80047ec <_ZN17JsonConfigHandler9parseJsonEv+0xbc>)
 800478c:	f01a f8fa 	bl	801e984 <puts>
            break;
 8004790:	e023      	b.n	80047da <_ZN17JsonConfigHandler9parseJsonEv+0xaa>
        case DeserializationError::InvalidInput:
            printf("Invalid input!\n");
 8004792:	4817      	ldr	r0, [pc, #92]	@ (80047f0 <_ZN17JsonConfigHandler9parseJsonEv+0xc0>)
 8004794:	f01a f8f6 	bl	801e984 <puts>
            configError = true;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2201      	movs	r2, #1
 800479c:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
            break;
 80047a0:	e01b      	b.n	80047da <_ZN17JsonConfigHandler9parseJsonEv+0xaa>
        case DeserializationError::NoMemory:
            printf("Not enough memory\n");
 80047a2:	4814      	ldr	r0, [pc, #80]	@ (80047f4 <_ZN17JsonConfigHandler9parseJsonEv+0xc4>)
 80047a4:	f01a f8ee 	bl	801e984 <puts>
            configError = true;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2201      	movs	r2, #1
 80047ac:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
            break;
 80047b0:	e013      	b.n	80047da <_ZN17JsonConfigHandler9parseJsonEv+0xaa>
        default:
            printf("Deserialization failed: ");
 80047b2:	4811      	ldr	r0, [pc, #68]	@ (80047f8 <_ZN17JsonConfigHandler9parseJsonEv+0xc8>)
 80047b4:	f01a f876 	bl	801e8a4 <iprintf>
            printf(error.c_str());
 80047b8:	f107 030c 	add.w	r3, r7, #12
 80047bc:	4618      	mov	r0, r3
 80047be:	f7ff f91d 	bl	80039fc <_ZNK11ArduinoJson8V730HB2220DeserializationError5c_strEv>
 80047c2:	4603      	mov	r3, r0
 80047c4:	4618      	mov	r0, r3
 80047c6:	f01a f86d 	bl	801e8a4 <iprintf>
            printf("\n");
 80047ca:	200a      	movs	r0, #10
 80047cc:	f01a f87c 	bl	801e8c8 <putchar>
            configError = true;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2201      	movs	r2, #1
 80047d4:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
            break;
 80047d8:	bf00      	nop
    }

    return true;
 80047da:	2301      	movs	r3, #1
}
 80047dc:	4618      	mov	r0, r3
 80047de:	3714      	adds	r7, #20
 80047e0:	46bd      	mov	sp, r7
 80047e2:	bd90      	pop	{r4, r7, pc}
 80047e4:	0801f9ec 	.word	0x0801f9ec
 80047e8:	0801fa10 	.word	0x0801fa10
 80047ec:	0801fa2c 	.word	0x0801fa2c
 80047f0:	0801fa48 	.word	0x0801fa48
 80047f4:	0801fa58 	.word	0x0801fa58
 80047f8:	0801fa6c 	.word	0x0801fa6c

080047fc <_ZN9__gnu_cxx11char_traitsIcE6lengthEPKc>:
    char_traits<_CharT>::
 80047fc:	b580      	push	{r7, lr}
 80047fe:	b084      	sub	sp, #16
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
      std::size_t __i = 0;
 8004804:	2300      	movs	r3, #0
 8004806:	60fb      	str	r3, [r7, #12]
      while (!eq(__p[__i], char_type()))
 8004808:	e002      	b.n	8004810 <_ZN9__gnu_cxx11char_traitsIcE6lengthEPKc+0x14>
        ++__i;
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	3301      	adds	r3, #1
 800480e:	60fb      	str	r3, [r7, #12]
      while (!eq(__p[__i], char_type()))
 8004810:	687a      	ldr	r2, [r7, #4]
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	4413      	add	r3, r2
 8004816:	2200      	movs	r2, #0
 8004818:	72fa      	strb	r2, [r7, #11]
 800481a:	f107 020b 	add.w	r2, r7, #11
 800481e:	4611      	mov	r1, r2
 8004820:	4618      	mov	r0, r3
 8004822:	f000 fbf7 	bl	8005014 <_ZN9__gnu_cxx11char_traitsIcE2eqERKcS3_>
 8004826:	4603      	mov	r3, r0
 8004828:	f083 0301 	eor.w	r3, r3, #1
 800482c:	b2db      	uxtb	r3, r3
 800482e:	2b00      	cmp	r3, #0
 8004830:	d1eb      	bne.n	800480a <_ZN9__gnu_cxx11char_traitsIcE6lengthEPKc+0xe>
      return __i;
 8004832:	68fb      	ldr	r3, [r7, #12]
    }
 8004834:	4618      	mov	r0, r3
 8004836:	3710      	adds	r7, #16
 8004838:	46bd      	mov	sp, r7
 800483a:	bd80      	pop	{r7, pc}

0800483c <_ZN11ArduinoJson8V730HB2210JsonStringC1ItLi0EEEPKcT_b>:
  JsonString(const char* data, TSize sz, bool isStatic = false)
 800483c:	b580      	push	{r7, lr}
 800483e:	b084      	sub	sp, #16
 8004840:	af00      	add	r7, sp, #0
 8004842:	60f8      	str	r0, [r7, #12]
 8004844:	60b9      	str	r1, [r7, #8]
 8004846:	4611      	mov	r1, r2
 8004848:	461a      	mov	r2, r3
 800484a:	460b      	mov	r3, r1
 800484c:	80fb      	strh	r3, [r7, #6]
 800484e:	4613      	mov	r3, r2
 8004850:	717b      	strb	r3, [r7, #5]
      : str_(data, size_t(sz), isStatic) {}
 8004852:	68f8      	ldr	r0, [r7, #12]
 8004854:	88fa      	ldrh	r2, [r7, #6]
 8004856:	797b      	ldrb	r3, [r7, #5]
 8004858:	68b9      	ldr	r1, [r7, #8]
 800485a:	f7fd ff3b 	bl	80026d4 <_ZN11ArduinoJson8V730HB226detail9RamStringC1EPKcjb>
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	4618      	mov	r0, r3
 8004862:	3710      	adds	r7, #16
 8004864:	46bd      	mov	sp, r7
 8004866:	bd80      	pop	{r7, pc}

08004868 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE5clearEPNS0_9AllocatorE>:
    auto indexInPool = SlotId(id % ARDUINOJSON_POOL_CAPACITY);
    ARDUINOJSON_ASSERT(poolIndex < count_);
    return pools_[poolIndex].getSlot(indexInPool);
  }

  void clear(Allocator* allocator) {
 8004868:	b580      	push	{r7, lr}
 800486a:	b084      	sub	sp, #16
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]
 8004870:	6039      	str	r1, [r7, #0]
    for (PoolCount i = 0; i < count_; i++)
 8004872:	2300      	movs	r3, #0
 8004874:	81fb      	strh	r3, [r7, #14]
 8004876:	e00b      	b.n	8004890 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE5clearEPNS0_9AllocatorE+0x28>
      pools_[i].destroy(allocator);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	6a1a      	ldr	r2, [r3, #32]
 800487c:	89fb      	ldrh	r3, [r7, #14]
 800487e:	00db      	lsls	r3, r3, #3
 8004880:	4413      	add	r3, r2
 8004882:	6839      	ldr	r1, [r7, #0]
 8004884:	4618      	mov	r0, r3
 8004886:	f000 fc40 	bl	800510a <_ZN11ArduinoJson8V730HB226detail10MemoryPoolINS1_15ResourceManager8SlotDataEE7destroyEPNS0_9AllocatorE>
    for (PoolCount i = 0; i < count_; i++)
 800488a:	89fb      	ldrh	r3, [r7, #14]
 800488c:	3301      	adds	r3, #1
 800488e:	81fb      	strh	r3, [r7, #14]
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8004894:	89fa      	ldrh	r2, [r7, #14]
 8004896:	429a      	cmp	r2, r3
 8004898:	d3ee      	bcc.n	8004878 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE5clearEPNS0_9AllocatorE+0x10>
    count_ = 0;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	2200      	movs	r2, #0
 800489e:	849a      	strh	r2, [r3, #36]	@ 0x24
    freeList_ = NULL_SLOT;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80048a6:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (pools_ != preallocatedPools_) {
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	6a1a      	ldr	r2, [r3, #32]
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	429a      	cmp	r2, r3
 80048b0:	d00e      	beq.n	80048d0 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE5clearEPNS0_9AllocatorE+0x68>
      allocator->deallocate(pools_);
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	3304      	adds	r3, #4
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	687a      	ldr	r2, [r7, #4]
 80048bc:	6a12      	ldr	r2, [r2, #32]
 80048be:	4611      	mov	r1, r2
 80048c0:	6838      	ldr	r0, [r7, #0]
 80048c2:	4798      	blx	r3
      pools_ = preallocatedPools_;
 80048c4:	687a      	ldr	r2, [r7, #4]
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	621a      	str	r2, [r3, #32]
      capacity_ = ARDUINOJSON_INITIAL_POOL_COUNT;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	2204      	movs	r2, #4
 80048ce:	84da      	strh	r2, [r3, #38]	@ 0x26
    }
  }
 80048d0:	bf00      	nop
 80048d2:	3710      	adds	r7, #16
 80048d4:	46bd      	mov	sp, r7
 80048d6:	bd80      	pop	{r7, pc}

080048d8 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE11shrinkToFitEPNS0_9AllocatorE>:

  size_t size() const {
    return Pool::slotsToBytes(usage());
  }

  void shrinkToFit(Allocator* allocator) {
 80048d8:	b580      	push	{r7, lr}
 80048da:	b082      	sub	sp, #8
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]
 80048e0:	6039      	str	r1, [r7, #0]
    if (count_ > 0)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d00d      	beq.n	8004906 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE11shrinkToFitEPNS0_9AllocatorE+0x2e>
      pools_[count_ - 1].shrinkToFit(allocator);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6a1a      	ldr	r2, [r3, #32]
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80048f2:	4619      	mov	r1, r3
 80048f4:	f06f 4360 	mvn.w	r3, #3758096384	@ 0xe0000000
 80048f8:	440b      	add	r3, r1
 80048fa:	00db      	lsls	r3, r3, #3
 80048fc:	4413      	add	r3, r2
 80048fe:	6839      	ldr	r1, [r7, #0]
 8004900:	4618      	mov	r0, r3
 8004902:	f000 fc2e 	bl	8005162 <_ZN11ArduinoJson8V730HB226detail10MemoryPoolINS1_15ResourceManager8SlotDataEE11shrinkToFitEPNS0_9AllocatorE>
    if (pools_ != preallocatedPools_ && count_ != capacity_) {
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	6a1a      	ldr	r2, [r3, #32]
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	429a      	cmp	r2, r3
 800490e:	d017      	beq.n	8004940 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE11shrinkToFitEPNS0_9AllocatorE+0x68>
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	8c9a      	ldrh	r2, [r3, #36]	@ 0x24
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004918:	429a      	cmp	r2, r3
 800491a:	d011      	beq.n	8004940 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE11shrinkToFitEPNS0_9AllocatorE+0x68>
      pools_ = static_cast<Pool*>(
          allocator->reallocate(pools_, count_ * sizeof(Pool)));
 800491c:	683b      	ldr	r3, [r7, #0]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	3308      	adds	r3, #8
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	687a      	ldr	r2, [r7, #4]
 8004926:	6a11      	ldr	r1, [r2, #32]
 8004928:	687a      	ldr	r2, [r7, #4]
 800492a:	8c92      	ldrh	r2, [r2, #36]	@ 0x24
 800492c:	00d2      	lsls	r2, r2, #3
 800492e:	6838      	ldr	r0, [r7, #0]
 8004930:	4798      	blx	r3
 8004932:	4602      	mov	r2, r0
      pools_ = static_cast<Pool*>(
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	621a      	str	r2, [r3, #32]
      ARDUINOJSON_ASSERT(pools_ != nullptr);  // realloc to smaller can't fail
      capacity_ = count_;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	8c9a      	ldrh	r2, [r3, #36]	@ 0x24
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	84da      	strh	r2, [r3, #38]	@ 0x26
    }
  }
 8004940:	bf00      	nop
 8004942:	3708      	adds	r7, #8
 8004944:	46bd      	mov	sp, r7
 8004946:	bd80      	pop	{r7, pc}

08004948 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataINS0_11JsonVariantEEEDTcldtfp_7getDataEERT_>:
      -> decltype(client.getResourceManager()) {
    return client.getResourceManager();
  }

  template <typename TClient>
  static auto getData(TClient& client) -> decltype(client.getData()) {
 8004948:	b580      	push	{r7, lr}
 800494a:	b082      	sub	sp, #8
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]
    return client.getData();
 8004950:	6878      	ldr	r0, [r7, #4]
 8004952:	f7fe fad0 	bl	8002ef6 <_ZNK11ArduinoJson8V730HB2211JsonVariant7getDataEv>
 8004956:	4603      	mov	r3, r0
  }
 8004958:	4618      	mov	r0, r3
 800495a:	3708      	adds	r7, #8
 800495c:	46bd      	mov	sp, r7
 800495e:	bd80      	pop	{r7, pc}

08004960 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataINS0_16JsonVariantConstEEEDTcldtfp_7getDataEERT_>:
  static auto getData(TClient& client) -> decltype(client.getData()) {
 8004960:	b580      	push	{r7, lr}
 8004962:	b082      	sub	sp, #8
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
    return client.getData();
 8004968:	6878      	ldr	r0, [r7, #4]
 800496a:	f7fe fa8d 	bl	8002e88 <_ZNK11ArduinoJson8V730HB2216JsonVariantConst7getDataEv>
 800496e:	4603      	mov	r3, r0
  }
 8004970:	4618      	mov	r0, r3
 8004972:	3708      	adds	r7, #8
 8004974:	46bd      	mov	sp, r7
 8004976:	bd80      	pop	{r7, pc}

08004978 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerINS0_16JsonVariantConstEEEDTcldtfp_18getResourceManagerEERT_>:
  static auto getResourceManager(TClient& client)
 8004978:	b580      	push	{r7, lr}
 800497a:	b082      	sub	sp, #8
 800497c:	af00      	add	r7, sp, #0
 800497e:	6078      	str	r0, [r7, #4]
    return client.getResourceManager();
 8004980:	6878      	ldr	r0, [r7, #4]
 8004982:	f7fe fa8d 	bl	8002ea0 <_ZNK11ArduinoJson8V730HB2216JsonVariantConst18getResourceManagerEv>
 8004986:	4603      	mov	r3, r0
  }
 8004988:	4618      	mov	r0, r3
 800498a:	3708      	adds	r7, #8
 800498c:	46bd      	mov	sp, r7
 800498e:	bd80      	pop	{r7, pc}

08004990 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEEcvbEv>:
  Slot() : ptr_(nullptr), id_(NULL_SLOT) {}
  Slot(T* p, SlotId id) : ptr_(p), id_(id) {
    ARDUINOJSON_ASSERT((p == nullptr) == (id == NULL_SLOT));
  }

  explicit operator bool() const {
 8004990:	b480      	push	{r7}
 8004992:	b083      	sub	sp, #12
 8004994:	af00      	add	r7, sp, #0
 8004996:	6078      	str	r0, [r7, #4]
    return ptr_ != nullptr;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	2b00      	cmp	r3, #0
 800499e:	bf14      	ite	ne
 80049a0:	2301      	movne	r3, #1
 80049a2:	2300      	moveq	r3, #0
 80049a4:	b2db      	uxtb	r3, r3
  }
 80049a6:	4618      	mov	r0, r3
 80049a8:	370c      	adds	r7, #12
 80049aa:	46bd      	mov	sp, r7
 80049ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b0:	4770      	bx	lr

080049b2 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEE3ptrEv>:

  SlotId id() const {
    return id_;
  }

  T* ptr() const {
 80049b2:	b480      	push	{r7}
 80049b4:	b083      	sub	sp, #12
 80049b6:	af00      	add	r7, sp, #0
 80049b8:	6078      	str	r0, [r7, #4]
    return ptr_;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
  }
 80049be:	4618      	mov	r0, r3
 80049c0:	370c      	adds	r7, #12
 80049c2:	46bd      	mov	sp, r7
 80049c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c8:	4770      	bx	lr

080049ca <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEE2idEv>:
  SlotId id() const {
 80049ca:	b480      	push	{r7}
 80049cc:	b083      	sub	sp, #12
 80049ce:	af00      	add	r7, sp, #0
 80049d0:	6078      	str	r0, [r7, #4]
    return id_;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	889b      	ldrh	r3, [r3, #4]
  }
 80049d6:	4618      	mov	r0, r3
 80049d8:	370c      	adds	r7, #12
 80049da:	46bd      	mov	sp, r7
 80049dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e0:	4770      	bx	lr

080049e2 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEEptEv>:

  T* operator->() const {
 80049e2:	b480      	push	{r7}
 80049e4:	b083      	sub	sp, #12
 80049e6:	af00      	add	r7, sp, #0
 80049e8:	6078      	str	r0, [r7, #4]
    ARDUINOJSON_ASSERT(ptr_ != nullptr);
    return ptr_;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
  }
 80049ee:	4618      	mov	r0, r3
 80049f0:	370c      	adds	r7, #12
 80049f2:	46bd      	mov	sp, r7
 80049f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f8:	4770      	bx	lr

080049fa <_ZN11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEEC1EPS3_t>:
  Slot(T* p, SlotId id) : ptr_(p), id_(id) {
 80049fa:	b480      	push	{r7}
 80049fc:	b085      	sub	sp, #20
 80049fe:	af00      	add	r7, sp, #0
 8004a00:	60f8      	str	r0, [r7, #12]
 8004a02:	60b9      	str	r1, [r7, #8]
 8004a04:	4613      	mov	r3, r2
 8004a06:	80fb      	strh	r3, [r7, #6]
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	68ba      	ldr	r2, [r7, #8]
 8004a0c:	601a      	str	r2, [r3, #0]
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	88fa      	ldrh	r2, [r7, #6]
 8004a12:	809a      	strh	r2, [r3, #4]
  }
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	4618      	mov	r0, r3
 8004a18:	3714      	adds	r7, #20
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a20:	4770      	bx	lr

08004a22 <_ZN11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEEC1Ev>:
  Slot() : ptr_(nullptr), id_(NULL_SLOT) {}
 8004a22:	b480      	push	{r7}
 8004a24:	b083      	sub	sp, #12
 8004a26:	af00      	add	r7, sp, #0
 8004a28:	6078      	str	r0, [r7, #4]
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	601a      	str	r2, [r3, #0]
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004a36:	809a      	strh	r2, [r3, #4]
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	370c      	adds	r7, #12
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a44:	4770      	bx	lr

08004a46 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE9allocSlotEPNS0_9AllocatorE>:
  Slot<T> allocSlot(Allocator* allocator) {
 8004a46:	b580      	push	{r7, lr}
 8004a48:	b088      	sub	sp, #32
 8004a4a:	af00      	add	r7, sp, #0
 8004a4c:	60f8      	str	r0, [r7, #12]
 8004a4e:	60b9      	str	r1, [r7, #8]
 8004a50:	607a      	str	r2, [r7, #4]
    if (freeList_ != NULL_SLOT) {
 8004a52:	68bb      	ldr	r3, [r7, #8]
 8004a54:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a56:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004a5a:	4293      	cmp	r3, r2
 8004a5c:	d005      	beq.n	8004a6a <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE9allocSlotEPNS0_9AllocatorE+0x24>
      return allocFromFreeList();
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	68b9      	ldr	r1, [r7, #8]
 8004a62:	4618      	mov	r0, r3
 8004a64:	f000 fbda 	bl	800521c <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE17allocFromFreeListEv>
 8004a68:	e02c      	b.n	8004ac4 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE9allocSlotEPNS0_9AllocatorE+0x7e>
    if (count_) {
 8004a6a:	68bb      	ldr	r3, [r7, #8]
 8004a6c:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d016      	beq.n	8004aa0 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE9allocSlotEPNS0_9AllocatorE+0x5a>
      auto slot = allocFromLastPool();
 8004a72:	f107 0314 	add.w	r3, r7, #20
 8004a76:	68b9      	ldr	r1, [r7, #8]
 8004a78:	4618      	mov	r0, r3
 8004a7a:	f000 fbec 	bl	8005256 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE17allocFromLastPoolEv>
      if (slot)
 8004a7e:	f107 0314 	add.w	r3, r7, #20
 8004a82:	4618      	mov	r0, r3
 8004a84:	f000 f822 	bl	8004acc <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_15ResourceManager8SlotDataEEcvbEv>
 8004a88:	4603      	mov	r3, r0
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d008      	beq.n	8004aa0 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE9allocSlotEPNS0_9AllocatorE+0x5a>
        return slot;
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	461a      	mov	r2, r3
 8004a92:	f107 0314 	add.w	r3, r7, #20
 8004a96:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004a9a:	e882 0003 	stmia.w	r2, {r0, r1}
  }
 8004a9e:	e011      	b.n	8004ac4 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE9allocSlotEPNS0_9AllocatorE+0x7e>
    auto pool = addPool(allocator);
 8004aa0:	6879      	ldr	r1, [r7, #4]
 8004aa2:	68b8      	ldr	r0, [r7, #8]
 8004aa4:	f000 fc14 	bl	80052d0 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE7addPoolEPNS0_9AllocatorE>
 8004aa8:	61f8      	str	r0, [r7, #28]
    if (!pool)
 8004aaa:	69fb      	ldr	r3, [r7, #28]
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d103      	bne.n	8004ab8 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE9allocSlotEPNS0_9AllocatorE+0x72>
      return {};
 8004ab0:	68f8      	ldr	r0, [r7, #12]
 8004ab2:	f000 fc49 	bl	8005348 <_ZN11ArduinoJson8V730HB226detail4SlotINS1_15ResourceManager8SlotDataEEC1Ev>
 8004ab6:	e005      	b.n	8004ac4 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE9allocSlotEPNS0_9AllocatorE+0x7e>
    return allocFromLastPool();
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	68b9      	ldr	r1, [r7, #8]
 8004abc:	4618      	mov	r0, r3
 8004abe:	f000 fbca 	bl	8005256 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE17allocFromLastPoolEv>
 8004ac2:	bf00      	nop
  }
 8004ac4:	68f8      	ldr	r0, [r7, #12]
 8004ac6:	3720      	adds	r7, #32
 8004ac8:	46bd      	mov	sp, r7
 8004aca:	bd80      	pop	{r7, pc}

08004acc <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_15ResourceManager8SlotDataEEcvbEv>:
  explicit operator bool() const {
 8004acc:	b480      	push	{r7}
 8004ace:	b083      	sub	sp, #12
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	6078      	str	r0, [r7, #4]
    return ptr_ != nullptr;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	bf14      	ite	ne
 8004adc:	2301      	movne	r3, #1
 8004ade:	2300      	moveq	r3, #0
 8004ae0:	b2db      	uxtb	r3, r3
  }
 8004ae2:	4618      	mov	r0, r3
 8004ae4:	370c      	adds	r7, #12
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aec:	4770      	bx	lr

08004aee <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_15ResourceManager8SlotDataEEptEv>:
  T* operator->() const {
 8004aee:	b480      	push	{r7}
 8004af0:	b083      	sub	sp, #12
 8004af2:	af00      	add	r7, sp, #0
 8004af4:	6078      	str	r0, [r7, #4]
    return ptr_;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
  }
 8004afa:	4618      	mov	r0, r3
 8004afc:	370c      	adds	r7, #12
 8004afe:	46bd      	mov	sp, r7
 8004b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b04:	4770      	bx	lr

08004b06 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_15ResourceManager8SlotDataEE2idEv>:
  SlotId id() const {
 8004b06:	b480      	push	{r7}
 8004b08:	b083      	sub	sp, #12
 8004b0a:	af00      	add	r7, sp, #0
 8004b0c:	6078      	str	r0, [r7, #4]
    return id_;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	889b      	ldrh	r3, [r3, #4]
  }
 8004b12:	4618      	mov	r0, r3
 8004b14:	370c      	adds	r7, #12
 8004b16:	46bd      	mov	sp, r7
 8004b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1c:	4770      	bx	lr

08004b1e <_ZN11ArduinoJson8V730HB226detail10alias_castIPNS1_15ResourceManager8SlotDataEPNS1_11VariantDataEEET_T0_>:
    T data;
  };
};

template <typename T, typename F>
T alias_cast(F raw_data) {
 8004b1e:	b480      	push	{r7}
 8004b20:	b085      	sub	sp, #20
 8004b22:	af00      	add	r7, sp, #0
 8004b24:	6078      	str	r0, [r7, #4]
  alias_cast_t<T, F> ac;
  ac.raw = raw_data;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	60fb      	str	r3, [r7, #12]
  return ac.data;
 8004b2a:	68fb      	ldr	r3, [r7, #12]
}
 8004b2c:	4618      	mov	r0, r3
 8004b2e:	3714      	adds	r7, #20
 8004b30:	46bd      	mov	sp, r7
 8004b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b36:	4770      	bx	lr

08004b38 <_ZN11ArduinoJson8V730HB226detail4SlotINS1_15ResourceManager8SlotDataEEC1EPS4_t>:
  Slot(T* p, SlotId id) : ptr_(p), id_(id) {
 8004b38:	b480      	push	{r7}
 8004b3a:	b085      	sub	sp, #20
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	60f8      	str	r0, [r7, #12]
 8004b40:	60b9      	str	r1, [r7, #8]
 8004b42:	4613      	mov	r3, r2
 8004b44:	80fb      	strh	r3, [r7, #6]
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	68ba      	ldr	r2, [r7, #8]
 8004b4a:	601a      	str	r2, [r3, #0]
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	88fa      	ldrh	r2, [r7, #6]
 8004b50:	809a      	strh	r2, [r3, #4]
  }
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	4618      	mov	r0, r3
 8004b56:	3714      	adds	r7, #20
 8004b58:	46bd      	mov	sp, r7
 8004b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5e:	4770      	bx	lr

08004b60 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE8freeSlotENS1_4SlotIS4_EE>:
  void freeSlot(Slot<T> slot) {
 8004b60:	b590      	push	{r4, r7, lr}
 8004b62:	b085      	sub	sp, #20
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	60f8      	str	r0, [r7, #12]
 8004b68:	1d3b      	adds	r3, r7, #4
 8004b6a:	e883 0006 	stmia.w	r3, {r1, r2}
    reinterpret_cast<FreeSlot*>(slot.ptr())->next = freeList_;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	8d1c      	ldrh	r4, [r3, #40]	@ 0x28
 8004b72:	1d3b      	adds	r3, r7, #4
 8004b74:	4618      	mov	r0, r3
 8004b76:	f000 fbf9 	bl	800536c <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_15ResourceManager8SlotDataEE3ptrEv>
 8004b7a:	4603      	mov	r3, r0
 8004b7c:	4622      	mov	r2, r4
 8004b7e:	801a      	strh	r2, [r3, #0]
    freeList_ = slot.id();
 8004b80:	1d3b      	adds	r3, r7, #4
 8004b82:	4618      	mov	r0, r3
 8004b84:	f7ff ffbf 	bl	8004b06 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_15ResourceManager8SlotDataEE2idEv>
 8004b88:	4603      	mov	r3, r0
 8004b8a:	461a      	mov	r2, r3
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	851a      	strh	r2, [r3, #40]	@ 0x28
  }
 8004b90:	bf00      	nop
 8004b92:	3714      	adds	r7, #20
 8004b94:	46bd      	mov	sp, r7
 8004b96:	bd90      	pop	{r4, r7, pc}

08004b98 <_ZNK11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE7getSlotEt>:
  T* getSlot(SlotId id) const {
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	b084      	sub	sp, #16
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	6078      	str	r0, [r7, #4]
 8004ba0:	460b      	mov	r3, r1
 8004ba2:	807b      	strh	r3, [r7, #2]
    if (id == NULL_SLOT)
 8004ba4:	887b      	ldrh	r3, [r7, #2]
 8004ba6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004baa:	4293      	cmp	r3, r2
 8004bac:	d101      	bne.n	8004bb2 <_ZNK11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE7getSlotEt+0x1a>
      return nullptr;
 8004bae:	2300      	movs	r3, #0
 8004bb0:	e012      	b.n	8004bd8 <_ZNK11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE7getSlotEt+0x40>
    auto poolIndex = SlotId(id / ARDUINOJSON_POOL_CAPACITY);
 8004bb2:	887b      	ldrh	r3, [r7, #2]
 8004bb4:	09db      	lsrs	r3, r3, #7
 8004bb6:	81fb      	strh	r3, [r7, #14]
    auto indexInPool = SlotId(id % ARDUINOJSON_POOL_CAPACITY);
 8004bb8:	887b      	ldrh	r3, [r7, #2]
 8004bba:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004bbe:	81bb      	strh	r3, [r7, #12]
    return pools_[poolIndex].getSlot(indexInPool);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	6a1a      	ldr	r2, [r3, #32]
 8004bc4:	89fb      	ldrh	r3, [r7, #14]
 8004bc6:	00db      	lsls	r3, r3, #3
 8004bc8:	4413      	add	r3, r2
 8004bca:	89ba      	ldrh	r2, [r7, #12]
 8004bcc:	4611      	mov	r1, r2
 8004bce:	4618      	mov	r0, r3
 8004bd0:	f000 fbd8 	bl	8005384 <_ZNK11ArduinoJson8V730HB226detail10MemoryPoolINS1_15ResourceManager8SlotDataEE7getSlotEt>
 8004bd4:	4603      	mov	r3, r0
 8004bd6:	bf00      	nop
  }
 8004bd8:	4618      	mov	r0, r3
 8004bda:	3710      	adds	r7, #16
 8004bdc:	46bd      	mov	sp, r7
 8004bde:	bd80      	pop	{r7, pc}

08004be0 <_ZN11ArduinoJson8V730HB226detail4SlotINS1_16VariantExtensionEEC1Ev>:
  Slot() : ptr_(nullptr), id_(NULL_SLOT) {}
 8004be0:	b480      	push	{r7}
 8004be2:	b083      	sub	sp, #12
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	6078      	str	r0, [r7, #4]
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2200      	movs	r2, #0
 8004bec:	601a      	str	r2, [r3, #0]
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004bf4:	809a      	strh	r2, [r3, #4]
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	4618      	mov	r0, r3
 8004bfa:	370c      	adds	r7, #12
 8004bfc:	46bd      	mov	sp, r7
 8004bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c02:	4770      	bx	lr

08004c04 <_ZN11ArduinoJson8V730HB226detail4SlotINS1_16VariantExtensionEEC1EPS3_t>:
  Slot(T* p, SlotId id) : ptr_(p), id_(id) {
 8004c04:	b480      	push	{r7}
 8004c06:	b085      	sub	sp, #20
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	60f8      	str	r0, [r7, #12]
 8004c0c:	60b9      	str	r1, [r7, #8]
 8004c0e:	4613      	mov	r3, r2
 8004c10:	80fb      	strh	r3, [r7, #6]
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	68ba      	ldr	r2, [r7, #8]
 8004c16:	601a      	str	r2, [r3, #0]
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	88fa      	ldrh	r2, [r7, #6]
 8004c1c:	809a      	strh	r2, [r3, #4]
  }
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	4618      	mov	r0, r3
 8004c22:	3714      	adds	r7, #20
 8004c24:	46bd      	mov	sp, r7
 8004c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2a:	4770      	bx	lr

08004c2c <_ZN11ArduinoJson8V730HB226detail11adaptStringIcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIPT_EE5valueES7_NS1_9remove_cvINS1_16remove_referenceIS7_E4typeEE4typeEE4typeEvE13AdaptedStringES7_j>:
AdaptedString<TChar*> adaptString(TChar* p) {
  return StringAdapter<TChar*>::adapt(p);
}

template <typename TChar>
AdaptedString<TChar*> adaptString(TChar* p, size_t n) {
 8004c2c:	b580      	push	{r7, lr}
 8004c2e:	b084      	sub	sp, #16
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	60f8      	str	r0, [r7, #12]
 8004c34:	60b9      	str	r1, [r7, #8]
 8004c36:	607a      	str	r2, [r7, #4]
  return SizedStringAdapter<TChar*>::adapt(p, n);
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	687a      	ldr	r2, [r7, #4]
 8004c3c:	68b9      	ldr	r1, [r7, #8]
 8004c3e:	4618      	mov	r0, r3
 8004c40:	f000 fbe6 	bl	8005410 <_ZN11ArduinoJson8V730HB226detail18SizedStringAdapterIPcvE5adaptEPKcj>
 8004c44:	bf00      	nop
}
 8004c46:	68f8      	ldr	r0, [r7, #12]
 8004c48:	3710      	adds	r7, #16
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	bd80      	pop	{r7, pc}

08004c4e <_ZNK11ArduinoJson8V730HB226detail15ResourceManager9getStringINS1_9RamStringEEEPNS1_10StringNodeERKT_>:
  StringNode* getString(const TAdaptedString& str) const {
 8004c4e:	b580      	push	{r7, lr}
 8004c50:	b082      	sub	sp, #8
 8004c52:	af00      	add	r7, sp, #0
 8004c54:	6078      	str	r0, [r7, #4]
 8004c56:	6039      	str	r1, [r7, #0]
    return stringPool_.get(str);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	3308      	adds	r3, #8
 8004c5c:	6839      	ldr	r1, [r7, #0]
 8004c5e:	4618      	mov	r0, r3
 8004c60:	f000 fbe6 	bl	8005430 <_ZNK11ArduinoJson8V730HB226detail10StringPool3getINS1_9RamStringEEEPNS1_10StringNodeERKT_>
 8004c64:	4603      	mov	r3, r0
  }
 8004c66:	4618      	mov	r0, r3
 8004c68:	3708      	adds	r7, #8
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	bd80      	pop	{r7, pc}

08004c6e <_ZN11ArduinoJson8V730HB2210JsonStringC1IjLi0EEEPKcT_b>:
  JsonString(const char* data, TSize sz, bool isStatic = false)
 8004c6e:	b580      	push	{r7, lr}
 8004c70:	b084      	sub	sp, #16
 8004c72:	af00      	add	r7, sp, #0
 8004c74:	60f8      	str	r0, [r7, #12]
 8004c76:	60b9      	str	r1, [r7, #8]
 8004c78:	607a      	str	r2, [r7, #4]
 8004c7a:	70fb      	strb	r3, [r7, #3]
      : str_(data, size_t(sz), isStatic) {}
 8004c7c:	68f8      	ldr	r0, [r7, #12]
 8004c7e:	78fb      	ldrb	r3, [r7, #3]
 8004c80:	687a      	ldr	r2, [r7, #4]
 8004c82:	68b9      	ldr	r1, [r7, #8]
 8004c84:	f7fd fd26 	bl	80026d4 <_ZN11ArduinoJson8V730HB226detail9RamStringC1EPKcjb>
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	4618      	mov	r0, r3
 8004c8c:	3710      	adds	r7, #16
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	bd80      	pop	{r7, pc}

08004c92 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerINS0_11JsonVariantEEEDTcldtfp_18getResourceManagerEERT_>:
  static auto getResourceManager(TClient& client)
 8004c92:	b580      	push	{r7, lr}
 8004c94:	b082      	sub	sp, #8
 8004c96:	af00      	add	r7, sp, #0
 8004c98:	6078      	str	r0, [r7, #4]
    return client.getResourceManager();
 8004c9a:	6878      	ldr	r0, [r7, #4]
 8004c9c:	f7fe f91f 	bl	8002ede <_ZNK11ArduinoJson8V730HB2211JsonVariant18getResourceManagerEv>
 8004ca0:	4603      	mov	r3, r0
  }
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	3708      	adds	r7, #8
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	bd80      	pop	{r7, pc}

08004caa <_ZN11ArduinoJson8V730HB226detail11adaptStringIRNS0_10JsonStringEEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES8_NS1_9remove_cvINS1_16remove_referenceIS8_E4typeEE4typeEE4typeEvE13AdaptedStringEOS8_>:
AdaptedString<TString> adaptString(TString&& s) {
 8004caa:	b580      	push	{r7, lr}
 8004cac:	b082      	sub	sp, #8
 8004cae:	af00      	add	r7, sp, #0
 8004cb0:	6078      	str	r0, [r7, #4]
 8004cb2:	6039      	str	r1, [r7, #0]
  return StringAdapterFor<TString>::adapt(detail::forward<TString>(s));
 8004cb4:	6838      	ldr	r0, [r7, #0]
 8004cb6:	f000 fbf6 	bl	80054a6 <_ZN11ArduinoJson8V730HB226detail7forwardIRNS0_10JsonStringEEEOT_RNS1_16remove_referenceIS5_E4typeE>
 8004cba:	4603      	mov	r3, r0
 8004cbc:	4618      	mov	r0, r3
 8004cbe:	f7fd fdea 	bl	8002896 <_ZN11ArduinoJson8V730HB226detail13StringAdapterINS0_10JsonStringEvE5adaptERKS3_>
 8004cc2:	4602      	mov	r2, r0
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	ca07      	ldmia	r2, {r0, r1, r2}
 8004cc8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
}
 8004ccc:	6878      	ldr	r0, [r7, #4]
 8004cce:	3708      	adds	r7, #8
 8004cd0:	46bd      	mov	sp, r7
 8004cd2:	bd80      	pop	{r7, pc}

08004cd4 <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIdLj8EE3infEv>:

  static T nan() {
    return forge(0x7ff8000000000000);
  }

  static T inf() {
 8004cd4:	b580      	push	{r7, lr}
 8004cd6:	af00      	add	r7, sp, #0
    return forge(0x7ff0000000000000);
 8004cd8:	f04f 0000 	mov.w	r0, #0
 8004cdc:	4903      	ldr	r1, [pc, #12]	@ (8004cec <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIdLj8EE3infEv+0x18>)
 8004cde:	f000 fc0d 	bl	80054fc <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIdLj8EE5forgeEy>
 8004ce2:	eeb0 7b40 	vmov.f64	d7, d0
  }
 8004ce6:	eeb0 0b47 	vmov.f64	d0, d7
 8004cea:	bd80      	pop	{r7, pc}
 8004cec:	7ff00000 	.word	0x7ff00000

08004cf0 <_ZN11ArduinoJson8V730HB226detail10make_floatIdiEET_S3_T0_>:
    return forge(0xFf7fffff);
  }
};

template <typename TFloat, typename TExponent>
inline TFloat make_float(TFloat m, TExponent e) {
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	b086      	sub	sp, #24
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	ed87 0b02 	vstr	d0, [r7, #8]
 8004cfa:	6078      	str	r0, [r7, #4]
  using traits = FloatTraits<TFloat>;

  auto powersOfTen = e > 0 ? traits::positiveBinaryPowersOfTen()
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	dd04      	ble.n	8004d0c <_ZN11ArduinoJson8V730HB226detail10make_floatIdiEET_S3_T0_+0x1c>
 8004d02:	f000 fb51 	bl	80053a8 <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIdLj8EE25positiveBinaryPowersOfTenEv>
 8004d06:	4603      	mov	r3, r0
 8004d08:	613b      	str	r3, [r7, #16]
 8004d0a:	e003      	b.n	8004d14 <_ZN11ArduinoJson8V730HB226detail10make_floatIdiEET_S3_T0_+0x24>
                           : traits::negativeBinaryPowersOfTen();
 8004d0c:	f000 fb70 	bl	80053f0 <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIdLj8EE25negativeBinaryPowersOfTenEv>
 8004d10:	4603      	mov	r3, r0
 8004d12:	613b      	str	r3, [r7, #16]
  if (e <= 0)
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	dc02      	bgt.n	8004d20 <_ZN11ArduinoJson8V730HB226detail10make_floatIdiEET_S3_T0_+0x30>
    e = TExponent(-e);
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	425b      	negs	r3, r3
 8004d1e:	607b      	str	r3, [r7, #4]

  for (uint8_t index = 0; e != 0; index++) {
 8004d20:	2300      	movs	r3, #0
 8004d22:	75fb      	strb	r3, [r7, #23]
 8004d24:	e019      	b.n	8004d5a <_ZN11ArduinoJson8V730HB226detail10make_floatIdiEET_S3_T0_+0x6a>
    if (e & 1)
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	f003 0301 	and.w	r3, r3, #1
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d00e      	beq.n	8004d4e <_ZN11ArduinoJson8V730HB226detail10make_floatIdiEET_S3_T0_+0x5e>
      m *= powersOfTen[index];
 8004d30:	7dfa      	ldrb	r2, [r7, #23]
 8004d32:	f107 0310 	add.w	r3, r7, #16
 8004d36:	4611      	mov	r1, r2
 8004d38:	4618      	mov	r0, r3
 8004d3a:	f000 fb45 	bl	80053c8 <_ZNK11ArduinoJson8V730HB226detail7pgm_ptrIdEixEi>
 8004d3e:	eeb0 6b40 	vmov.f64	d6, d0
 8004d42:	ed97 7b02 	vldr	d7, [r7, #8]
 8004d46:	ee27 7b06 	vmul.f64	d7, d7, d6
 8004d4a:	ed87 7b02 	vstr	d7, [r7, #8]
    e >>= 1;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	105b      	asrs	r3, r3, #1
 8004d52:	607b      	str	r3, [r7, #4]
  for (uint8_t index = 0; e != 0; index++) {
 8004d54:	7dfb      	ldrb	r3, [r7, #23]
 8004d56:	3301      	adds	r3, #1
 8004d58:	75fb      	strb	r3, [r7, #23]
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d1e2      	bne.n	8004d26 <_ZN11ArduinoJson8V730HB226detail10make_floatIdiEET_S3_T0_+0x36>
  }
  return m;
 8004d60:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004d64:	ec43 2b17 	vmov	d7, r2, r3
}
 8004d68:	eeb0 0b47 	vmov.f64	d0, d7
 8004d6c:	3718      	adds	r7, #24
 8004d6e:	46bd      	mov	sp, r7
 8004d70:	bd80      	pop	{r7, pc}

08004d72 <_ZN11ArduinoJson8V730HB226detail10make_floatIfiEET_S3_T0_>:
inline TFloat make_float(TFloat m, TExponent e) {
 8004d72:	b580      	push	{r7, lr}
 8004d74:	b084      	sub	sp, #16
 8004d76:	af00      	add	r7, sp, #0
 8004d78:	ed87 0a01 	vstr	s0, [r7, #4]
 8004d7c:	6038      	str	r0, [r7, #0]
  auto powersOfTen = e > 0 ? traits::positiveBinaryPowersOfTen()
 8004d7e:	683b      	ldr	r3, [r7, #0]
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	dd04      	ble.n	8004d8e <_ZN11ArduinoJson8V730HB226detail10make_floatIfiEET_S3_T0_+0x1c>
 8004d84:	f000 fbca 	bl	800551c <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIfLj4EE25positiveBinaryPowersOfTenEv>
 8004d88:	4603      	mov	r3, r0
 8004d8a:	60bb      	str	r3, [r7, #8]
 8004d8c:	e003      	b.n	8004d96 <_ZN11ArduinoJson8V730HB226detail10make_floatIfiEET_S3_T0_+0x24>
                           : traits::negativeBinaryPowersOfTen();
 8004d8e:	f000 fbd5 	bl	800553c <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIfLj4EE25negativeBinaryPowersOfTenEv>
 8004d92:	4603      	mov	r3, r0
 8004d94:	60bb      	str	r3, [r7, #8]
  if (e <= 0)
 8004d96:	683b      	ldr	r3, [r7, #0]
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	dc02      	bgt.n	8004da2 <_ZN11ArduinoJson8V730HB226detail10make_floatIfiEET_S3_T0_+0x30>
    e = TExponent(-e);
 8004d9c:	683b      	ldr	r3, [r7, #0]
 8004d9e:	425b      	negs	r3, r3
 8004da0:	603b      	str	r3, [r7, #0]
  for (uint8_t index = 0; e != 0; index++) {
 8004da2:	2300      	movs	r3, #0
 8004da4:	73fb      	strb	r3, [r7, #15]
 8004da6:	e019      	b.n	8004ddc <_ZN11ArduinoJson8V730HB226detail10make_floatIfiEET_S3_T0_+0x6a>
    if (e & 1)
 8004da8:	683b      	ldr	r3, [r7, #0]
 8004daa:	f003 0301 	and.w	r3, r3, #1
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d00e      	beq.n	8004dd0 <_ZN11ArduinoJson8V730HB226detail10make_floatIfiEET_S3_T0_+0x5e>
      m *= powersOfTen[index];
 8004db2:	7bfa      	ldrb	r2, [r7, #15]
 8004db4:	f107 0308 	add.w	r3, r7, #8
 8004db8:	4611      	mov	r1, r2
 8004dba:	4618      	mov	r0, r3
 8004dbc:	f000 fbce 	bl	800555c <_ZNK11ArduinoJson8V730HB226detail7pgm_ptrIfEixEi>
 8004dc0:	eeb0 7a40 	vmov.f32	s14, s0
 8004dc4:	edd7 7a01 	vldr	s15, [r7, #4]
 8004dc8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004dcc:	edc7 7a01 	vstr	s15, [r7, #4]
    e >>= 1;
 8004dd0:	683b      	ldr	r3, [r7, #0]
 8004dd2:	105b      	asrs	r3, r3, #1
 8004dd4:	603b      	str	r3, [r7, #0]
  for (uint8_t index = 0; e != 0; index++) {
 8004dd6:	7bfb      	ldrb	r3, [r7, #15]
 8004dd8:	3301      	adds	r3, #1
 8004dda:	73fb      	strb	r3, [r7, #15]
 8004ddc:	683b      	ldr	r3, [r7, #0]
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d1e2      	bne.n	8004da8 <_ZN11ArduinoJson8V730HB226detail10make_floatIfiEET_S3_T0_+0x36>
  return m;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	ee07 3a90 	vmov	s15, r3
}
 8004de8:	eeb0 0a67 	vmov.f32	s0, s15
 8004dec:	3710      	adds	r7, #16
 8004dee:	46bd      	mov	sp, r7
 8004df0:	bd80      	pop	{r7, pc}
	...

08004df4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>:
      // _GLIBCXX_RESOLVE_LIB_DEFECTS
      // 3076. basic_string CTAD ambiguity
      template<typename = _RequireAllocator<_Alloc>>
#endif
      _GLIBCXX20_CONSTEXPR
      basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
 8004df4:	b5b0      	push	{r4, r5, r7, lr}
 8004df6:	b086      	sub	sp, #24
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	60f8      	str	r0, [r7, #12]
 8004dfc:	60b9      	str	r1, [r7, #8]
 8004dfe:	607a      	str	r2, [r7, #4]
      : _M_dataplus(_M_local_data(), __a)
 8004e00:	68fc      	ldr	r4, [r7, #12]
 8004e02:	68f8      	ldr	r0, [r7, #12]
 8004e04:	f019 f9f4 	bl	801e1f0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_local_dataEv>
 8004e08:	4603      	mov	r3, r0
 8004e0a:	687a      	ldr	r2, [r7, #4]
 8004e0c:	4619      	mov	r1, r3
 8004e0e:	4620      	mov	r0, r4
 8004e10:	f019 fb54 	bl	801e4bc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderC1EPcRKS3_>
      {
	// NB: Not required, but considered best practice.
	if (__s == 0)
 8004e14:	68bb      	ldr	r3, [r7, #8]
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d102      	bne.n	8004e20 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_+0x2c>
	  std::__throw_logic_error(__N("basic_string: "
 8004e1a:	480a      	ldr	r0, [pc, #40]	@ (8004e44 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_+0x50>)
 8004e1c:	f019 f9d7 	bl	801e1ce <_ZSt19__throw_logic_errorPKc>
				       "construction from null is not valid"));
	const _CharT* __end = __s + traits_type::length(__s);
 8004e20:	68b8      	ldr	r0, [r7, #8]
 8004e22:	f7fd fb97 	bl	8002554 <_ZNSt11char_traitsIcE6lengthEPKc>
 8004e26:	4602      	mov	r2, r0
 8004e28:	68bb      	ldr	r3, [r7, #8]
 8004e2a:	4413      	add	r3, r2
 8004e2c:	617b      	str	r3, [r7, #20]
	_M_construct(__s, __end, forward_iterator_tag());
 8004e2e:	462b      	mov	r3, r5
 8004e30:	697a      	ldr	r2, [r7, #20]
 8004e32:	68b9      	ldr	r1, [r7, #8]
 8004e34:	68f8      	ldr	r0, [r7, #12]
 8004e36:	f000 f922 	bl	800507e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>
      }
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	4618      	mov	r0, r3
 8004e3e:	3718      	adds	r7, #24
 8004e40:	46bd      	mov	sp, r7
 8004e42:	bdb0      	pop	{r4, r5, r7, pc}
 8004e44:	0801fa88 	.word	0x0801fa88

08004e48 <_ZN11ArduinoJson8V730HB2212JsonDocumentixIA8_cLi0EEENS0_6detail11MemberProxyIRS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueESA_NS4_9remove_cvINS4_16remove_referenceISA_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKSA_>:
  detail::MemberProxy<JsonDocument&, detail::AdaptedString<TString>> operator[](
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	b08a      	sub	sp, #40	@ 0x28
 8004e4c:	af02      	add	r7, sp, #8
 8004e4e:	60f8      	str	r0, [r7, #12]
 8004e50:	60b9      	str	r1, [r7, #8]
 8004e52:	607a      	str	r2, [r7, #4]
    return {*this, detail::adaptString(key)};
 8004e54:	f107 0314 	add.w	r3, r7, #20
 8004e58:	6879      	ldr	r1, [r7, #4]
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	f000 fb92 	bl	8005584 <_ZN11ArduinoJson8V730HB226detail11adaptStringIRA8_KcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES9_NS1_9remove_cvINS1_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEOS9_>
 8004e60:	69fb      	ldr	r3, [r7, #28]
 8004e62:	9300      	str	r3, [sp, #0]
 8004e64:	f107 0314 	add.w	r3, r7, #20
 8004e68:	cb0c      	ldmia	r3, {r2, r3}
 8004e6a:	68b9      	ldr	r1, [r7, #8]
 8004e6c:	68f8      	ldr	r0, [r7, #12]
 8004e6e:	f000 fb9c 	bl	80055aa <_ZN11ArduinoJson8V730HB226detail11MemberProxyIRNS0_12JsonDocumentENS1_9RamStringEEC1ES4_S5_>
  }
 8004e72:	68f8      	ldr	r0, [r7, #12]
 8004e74:	3720      	adds	r7, #32
 8004e76:	46bd      	mov	sp, r7
 8004e78:	bd80      	pop	{r7, pc}

08004e7a <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentENS1_9RamStringEEEEcvT_INS0_9JsonArrayELi0EEEv>:
  operator T() const {
 8004e7a:	b580      	push	{r7, lr}
 8004e7c:	b082      	sub	sp, #8
 8004e7e:	af00      	add	r7, sp, #0
 8004e80:	6078      	str	r0, [r7, #4]
 8004e82:	6039      	str	r1, [r7, #0]
    return as<T>();
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	6839      	ldr	r1, [r7, #0]
 8004e88:	4618      	mov	r0, r3
 8004e8a:	f000 f876 	bl	8004f7a <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentENS1_9RamStringEEEE2asINS0_9JsonArrayEEET_v>
 8004e8e:	bf00      	nop
  }
 8004e90:	6878      	ldr	r0, [r7, #4]
 8004e92:	3708      	adds	r7, #8
 8004e94:	46bd      	mov	sp, r7
 8004e96:	bd80      	pop	{r7, pc}

08004e98 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS0_11JsonVariantEEcvT_INS0_10JsonObjectELi0EEEv>:
  operator T() const {
 8004e98:	b580      	push	{r7, lr}
 8004e9a:	b082      	sub	sp, #8
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	6078      	str	r0, [r7, #4]
 8004ea0:	6039      	str	r1, [r7, #0]
    return as<T>();
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	6839      	ldr	r1, [r7, #0]
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	f000 fb9b 	bl	80055e2 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS0_11JsonVariantEE2asINS0_10JsonObjectEEET_v>
 8004eac:	bf00      	nop
  }
 8004eae:	6878      	ldr	r0, [r7, #4]
 8004eb0:	3708      	adds	r7, #8
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	bd80      	pop	{r7, pc}

08004eb6 <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA7_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>:
  detail::MemberProxy<JsonObject, detail::AdaptedString<TString>> operator[](
 8004eb6:	b580      	push	{r7, lr}
 8004eb8:	b08c      	sub	sp, #48	@ 0x30
 8004eba:	af02      	add	r7, sp, #8
 8004ebc:	60f8      	str	r0, [r7, #12]
 8004ebe:	60b9      	str	r1, [r7, #8]
 8004ec0:	607a      	str	r2, [r7, #4]
    return {*this, detail::adaptString(key)};
 8004ec2:	68ba      	ldr	r2, [r7, #8]
 8004ec4:	f107 0314 	add.w	r3, r7, #20
 8004ec8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004ecc:	e883 0003 	stmia.w	r3, {r0, r1}
 8004ed0:	f107 031c 	add.w	r3, r7, #28
 8004ed4:	6879      	ldr	r1, [r7, #4]
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	f000 fba7 	bl	800562a <_ZN11ArduinoJson8V730HB226detail11adaptStringIRA7_KcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES9_NS1_9remove_cvINS1_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEOS9_>
 8004edc:	466a      	mov	r2, sp
 8004ede:	f107 0320 	add.w	r3, r7, #32
 8004ee2:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004ee6:	e882 0003 	stmia.w	r2, {r0, r1}
 8004eea:	69fb      	ldr	r3, [r7, #28]
 8004eec:	f107 0214 	add.w	r2, r7, #20
 8004ef0:	ca06      	ldmia	r2, {r1, r2}
 8004ef2:	68f8      	ldr	r0, [r7, #12]
 8004ef4:	f000 f973 	bl	80051de <_ZN11ArduinoJson8V730HB226detail11MemberProxyINS0_10JsonObjectENS1_9RamStringEEC1ES3_S4_>
  }
 8004ef8:	68f8      	ldr	r0, [r7, #12]
 8004efa:	3728      	adds	r7, #40	@ 0x28
 8004efc:	46bd      	mov	sp, r7
 8004efe:	bd80      	pop	{r7, pc}

08004f00 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_IPKcLi0EEEv>:
  operator T() const {
 8004f00:	b580      	push	{r7, lr}
 8004f02:	b082      	sub	sp, #8
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	6078      	str	r0, [r7, #4]
    return as<T>();
 8004f08:	6878      	ldr	r0, [r7, #4]
 8004f0a:	f000 fba1 	bl	8005650 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEE2asIPKcEET_v>
 8004f0e:	4603      	mov	r3, r0
  }
 8004f10:	4618      	mov	r0, r3
 8004f12:	3708      	adds	r7, #8
 8004f14:	46bd      	mov	sp, r7
 8004f16:	bd80      	pop	{r7, pc}

08004f18 <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA10_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>:
  detail::MemberProxy<JsonObject, detail::AdaptedString<TString>> operator[](
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	b08c      	sub	sp, #48	@ 0x30
 8004f1c:	af02      	add	r7, sp, #8
 8004f1e:	60f8      	str	r0, [r7, #12]
 8004f20:	60b9      	str	r1, [r7, #8]
 8004f22:	607a      	str	r2, [r7, #4]
    return {*this, detail::adaptString(key)};
 8004f24:	68ba      	ldr	r2, [r7, #8]
 8004f26:	f107 0314 	add.w	r3, r7, #20
 8004f2a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004f2e:	e883 0003 	stmia.w	r3, {r0, r1}
 8004f32:	f107 031c 	add.w	r3, r7, #28
 8004f36:	6879      	ldr	r1, [r7, #4]
 8004f38:	4618      	mov	r0, r3
 8004f3a:	f000 fbab 	bl	8005694 <_ZN11ArduinoJson8V730HB226detail11adaptStringIRA10_KcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES9_NS1_9remove_cvINS1_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEOS9_>
 8004f3e:	466a      	mov	r2, sp
 8004f40:	f107 0320 	add.w	r3, r7, #32
 8004f44:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004f48:	e882 0003 	stmia.w	r2, {r0, r1}
 8004f4c:	69fb      	ldr	r3, [r7, #28]
 8004f4e:	f107 0214 	add.w	r2, r7, #20
 8004f52:	ca06      	ldmia	r2, {r1, r2}
 8004f54:	68f8      	ldr	r0, [r7, #12]
 8004f56:	f000 f942 	bl	80051de <_ZN11ArduinoJson8V730HB226detail11MemberProxyINS0_10JsonObjectENS1_9RamStringEEC1ES3_S4_>
  }
 8004f5a:	68f8      	ldr	r0, [r7, #12]
 8004f5c:	3728      	adds	r7, #40	@ 0x28
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	bd80      	pop	{r7, pc}

08004f62 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_ImLi0EEEv>:
  operator T() const {
 8004f62:	b580      	push	{r7, lr}
 8004f64:	b082      	sub	sp, #8
 8004f66:	af00      	add	r7, sp, #0
 8004f68:	6078      	str	r0, [r7, #4]
    return as<T>();
 8004f6a:	6878      	ldr	r0, [r7, #4]
 8004f6c:	f000 fba5 	bl	80056ba <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEE2asImEET_v>
 8004f70:	4603      	mov	r3, r0
  }
 8004f72:	4618      	mov	r0, r3
 8004f74:	3708      	adds	r7, #8
 8004f76:	46bd      	mov	sp, r7
 8004f78:	bd80      	pop	{r7, pc}

08004f7a <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentENS1_9RamStringEEEE2asINS0_9JsonArrayEEET_v>:
inline T VariantRefBase<TDerived>::as() const {
 8004f7a:	b590      	push	{r4, r7, lr}
 8004f7c:	b087      	sub	sp, #28
 8004f7e:	af00      	add	r7, sp, #0
 8004f80:	6078      	str	r0, [r7, #4]
 8004f82:	6039      	str	r1, [r7, #0]
 8004f84:	683b      	ldr	r3, [r7, #0]
 8004f86:	617b      	str	r3, [r7, #20]
 8004f88:	697b      	ldr	r3, [r7, #20]
 8004f8a:	613b      	str	r3, [r7, #16]
  return JsonVariant(getData(), getResourceManager());
 8004f8c:	6938      	ldr	r0, [r7, #16]
 8004f8e:	f000 ff69 	bl	8005e64 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentENS1_9RamStringEEEE7getDataEv>
 8004f92:	4604      	mov	r4, r0
 8004f94:	6938      	ldr	r0, [r7, #16]
 8004f96:	f000 ff75 	bl	8005e84 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentENS1_9RamStringEEEE18getResourceManagerEv>
 8004f9a:	4602      	mov	r2, r0
 8004f9c:	f107 0308 	add.w	r3, r7, #8
 8004fa0:	4621      	mov	r1, r4
 8004fa2:	4618      	mov	r0, r3
 8004fa4:	f7fd ff88 	bl	8002eb8 <_ZN11ArduinoJson8V730HB2211JsonVariantC1EPNS0_6detail11VariantDataEPNS2_15ResourceManagerE>
    return getVariant();
 8004fa8:	bf00      	nop
  return Converter<T>::fromJson(getVariant<variant_type>());
 8004faa:	6878      	ldr	r0, [r7, #4]
 8004fac:	f107 0308 	add.w	r3, r7, #8
 8004fb0:	e893 0006 	ldmia.w	r3, {r1, r2}
 8004fb4:	f7fe fc6e 	bl	8003894 <_ZN11ArduinoJson8V730HB229ConverterINS0_9JsonArrayEvE8fromJsonENS0_11JsonVariantE>
 8004fb8:	bf00      	nop
}
 8004fba:	6878      	ldr	r0, [r7, #4]
 8004fbc:	371c      	adds	r7, #28
 8004fbe:	46bd      	mov	sp, r7
 8004fc0:	bd90      	pop	{r4, r7, pc}

08004fc2 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_S5_>:
   *  @return  New string with @a __lhs followed by @a __rhs.
   */
  template<typename _CharT, typename _Traits, typename _Alloc>
    _GLIBCXX20_CONSTEXPR
    inline basic_string<_CharT, _Traits, _Alloc>
    operator+(const basic_string<_CharT, _Traits, _Alloc>& __lhs, _CharT __rhs)
 8004fc2:	b580      	push	{r7, lr}
 8004fc4:	b084      	sub	sp, #16
 8004fc6:	af00      	add	r7, sp, #0
 8004fc8:	60f8      	str	r0, [r7, #12]
 8004fca:	60b9      	str	r1, [r7, #8]
 8004fcc:	4613      	mov	r3, r2
 8004fce:	71fb      	strb	r3, [r7, #7]
    {
      typedef basic_string<_CharT, _Traits, _Alloc>	__string_type;
      typedef typename __string_type::size_type		__size_type;
      __string_type __str(__lhs);
 8004fd0:	68b9      	ldr	r1, [r7, #8]
 8004fd2:	68f8      	ldr	r0, [r7, #12]
 8004fd4:	f019 fa8f 	bl	801e4f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
      __str.append(__size_type(1), __rhs);
 8004fd8:	79fb      	ldrb	r3, [r7, #7]
 8004fda:	461a      	mov	r2, r3
 8004fdc:	2101      	movs	r1, #1
 8004fde:	68f8      	ldr	r0, [r7, #12]
 8004fe0:	f019 fa60 	bl	801e4a4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEjc>
      return __str;
 8004fe4:	bf00      	nop
    }
 8004fe6:	68f8      	ldr	r0, [r7, #12]
 8004fe8:	3710      	adds	r7, #16
 8004fea:	46bd      	mov	sp, r7
 8004fec:	bd80      	pop	{r7, pc}

08004fee <_ZN11ArduinoJson8V730HB2215deserializeJsonIRNS0_12JsonDocumentEKcJELi0EEENS0_20DeserializationErrorEOT_PT0_DpOT1_>:
// Parses a JSON input, filters, and puts the result in a JsonDocument.
// https://arduinojson.org/v7/api/json/deserializejson/
template <typename TDestination, typename TChar, typename... Args,
          detail::enable_if_t<
              detail::is_deserialize_destination<TDestination>::value, int> = 0>
inline DeserializationError deserializeJson(TDestination&& dst, TChar* input,
 8004fee:	b580      	push	{r7, lr}
 8004ff0:	b082      	sub	sp, #8
 8004ff2:	af00      	add	r7, sp, #0
 8004ff4:	6078      	str	r0, [r7, #4]
 8004ff6:	6039      	str	r1, [r7, #0]
                                            Args&&... args) {
  using namespace detail;
  return deserialize<JsonDeserializer>(detail::forward<TDestination>(dst),
 8004ff8:	6878      	ldr	r0, [r7, #4]
 8004ffa:	f000 fb80 	bl	80056fe <_ZN11ArduinoJson8V730HB226detail7forwardIRNS0_12JsonDocumentEEEOT_RNS1_16remove_referenceIS5_E4typeE>
 8004ffe:	4602      	mov	r2, r0
 8005000:	463b      	mov	r3, r7
 8005002:	4619      	mov	r1, r3
 8005004:	4610      	mov	r0, r2
 8005006:	f000 fb85 	bl	8005714 <_ZN11ArduinoJson8V730HB226detail11deserializeINS1_16JsonDeserializerERNS0_12JsonDocumentERPKcJELi0EEENS0_20DeserializationErrorEOT0_OT1_DpT2_>
 800500a:	4603      	mov	r3, r0
                                       input, detail::forward<Args>(args)...);
}
 800500c:	4618      	mov	r0, r3
 800500e:	3708      	adds	r7, #8
 8005010:	46bd      	mov	sp, r7
 8005012:	bd80      	pop	{r7, pc}

08005014 <_ZN9__gnu_cxx11char_traitsIcE2eqERKcS3_>:
      eq(const char_type& __c1, const char_type& __c2)
 8005014:	b480      	push	{r7}
 8005016:	b083      	sub	sp, #12
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
 800501c:	6039      	str	r1, [r7, #0]
      { return __c1 == __c2; }
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	781a      	ldrb	r2, [r3, #0]
 8005022:	683b      	ldr	r3, [r7, #0]
 8005024:	781b      	ldrb	r3, [r3, #0]
 8005026:	429a      	cmp	r2, r3
 8005028:	bf0c      	ite	eq
 800502a:	2301      	moveq	r3, #1
 800502c:	2300      	movne	r3, #0
 800502e:	b2db      	uxtb	r3, r3
 8005030:	4618      	mov	r0, r3
 8005032:	370c      	adds	r7, #12
 8005034:	46bd      	mov	sp, r7
 8005036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503a:	4770      	bx	lr

0800503c <_ZZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tagEN6_GuardC1EPS4_>:

	// Check for out_of_range and length_error exceptions.
	struct _Guard
	{
	  _GLIBCXX20_CONSTEXPR
	  explicit _Guard(basic_string* __s) : _M_guarded(__s) { }
 800503c:	b480      	push	{r7}
 800503e:	b083      	sub	sp, #12
 8005040:	af00      	add	r7, sp, #0
 8005042:	6078      	str	r0, [r7, #4]
 8005044:	6039      	str	r1, [r7, #0]
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	683a      	ldr	r2, [r7, #0]
 800504a:	601a      	str	r2, [r3, #0]
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	4618      	mov	r0, r3
 8005050:	370c      	adds	r7, #12
 8005052:	46bd      	mov	sp, r7
 8005054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005058:	4770      	bx	lr

0800505a <_ZZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tagEN6_GuardD1Ev>:

	  _GLIBCXX20_CONSTEXPR
	  ~_Guard() { if (_M_guarded) _M_guarded->_M_dispose(); }
 800505a:	b580      	push	{r7, lr}
 800505c:	b082      	sub	sp, #8
 800505e:	af00      	add	r7, sp, #0
 8005060:	6078      	str	r0, [r7, #4]
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	2b00      	cmp	r3, #0
 8005068:	d004      	beq.n	8005074 <_ZZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tagEN6_GuardD1Ev+0x1a>
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	4618      	mov	r0, r3
 8005070:	f019 f8f0 	bl	801e254 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	4618      	mov	r0, r3
 8005078:	3708      	adds	r7, #8
 800507a:	46bd      	mov	sp, r7
 800507c:	bd80      	pop	{r7, pc}

0800507e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>:
      basic_string<_CharT, _Traits, _Alloc>::
 800507e:	b580      	push	{r7, lr}
 8005080:	b088      	sub	sp, #32
 8005082:	af00      	add	r7, sp, #0
 8005084:	60f8      	str	r0, [r7, #12]
 8005086:	60b9      	str	r1, [r7, #8]
 8005088:	607a      	str	r2, [r7, #4]
 800508a:	703b      	strb	r3, [r7, #0]
	size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));
 800508c:	6879      	ldr	r1, [r7, #4]
 800508e:	68b8      	ldr	r0, [r7, #8]
 8005090:	f000 fb61 	bl	8005756 <_ZSt8distanceIPKcENSt15iterator_traitsIT_E15difference_typeES3_S3_>
 8005094:	4603      	mov	r3, r0
 8005096:	61bb      	str	r3, [r7, #24]
	if (__dnew > size_type(_S_local_capacity))
 8005098:	69bb      	ldr	r3, [r7, #24]
 800509a:	2b0f      	cmp	r3, #15
 800509c:	d911      	bls.n	80050c2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x44>
	    _M_data(_M_create(__dnew, size_type(0)));
 800509e:	f107 0318 	add.w	r3, r7, #24
 80050a2:	2200      	movs	r2, #0
 80050a4:	4619      	mov	r1, r3
 80050a6:	68f8      	ldr	r0, [r7, #12]
 80050a8:	f019 f8b2 	bl	801e210 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 80050ac:	4603      	mov	r3, r0
 80050ae:	4619      	mov	r1, r3
 80050b0:	68f8      	ldr	r0, [r7, #12]
 80050b2:	f019 f899 	bl	801e1e8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEPc>
	    _M_capacity(__dnew);
 80050b6:	69bb      	ldr	r3, [r7, #24]
 80050b8:	4619      	mov	r1, r3
 80050ba:	68f8      	ldr	r0, [r7, #12]
 80050bc:	f019 f89a 	bl	801e1f4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_capacityEj>
 80050c0:	e005      	b.n	80050ce <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x50>
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	61fb      	str	r3, [r7, #28]
	return _M_local_data();
 80050c6:	69f8      	ldr	r0, [r7, #28]
 80050c8:	f019 f892 	bl	801e1f0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_local_dataEv>
 80050cc:	bf00      	nop

	  basic_string* _M_guarded;
	} __guard(this);
 80050ce:	f107 0314 	add.w	r3, r7, #20
 80050d2:	68f9      	ldr	r1, [r7, #12]
 80050d4:	4618      	mov	r0, r3
 80050d6:	f7ff ffb1 	bl	800503c <_ZZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tagEN6_GuardC1EPS4_>

	this->_S_copy_chars(_M_data(), __beg, __end);
 80050da:	68f8      	ldr	r0, [r7, #12]
 80050dc:	f019 f886 	bl	801e1ec <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>
 80050e0:	4603      	mov	r3, r0
 80050e2:	687a      	ldr	r2, [r7, #4]
 80050e4:	68b9      	ldr	r1, [r7, #8]
 80050e6:	4618      	mov	r0, r3
 80050e8:	f019 f8f9 	bl	801e2de <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>

	__guard._M_guarded = 0;
 80050ec:	2300      	movs	r3, #0
 80050ee:	617b      	str	r3, [r7, #20]

	_M_set_length(__dnew);
 80050f0:	69bb      	ldr	r3, [r7, #24]
 80050f2:	4619      	mov	r1, r3
 80050f4:	68f8      	ldr	r0, [r7, #12]
 80050f6:	f019 f87f 	bl	801e1f8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_set_lengthEj>
      }
 80050fa:	f107 0314 	add.w	r3, r7, #20
 80050fe:	4618      	mov	r0, r3
 8005100:	f7ff ffab 	bl	800505a <_ZZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tagEN6_GuardD1Ev>
 8005104:	3720      	adds	r7, #32
 8005106:	46bd      	mov	sp, r7
 8005108:	bd80      	pop	{r7, pc}

0800510a <_ZN11ArduinoJson8V730HB226detail10MemoryPoolINS1_15ResourceManager8SlotDataEE7destroyEPNS0_9AllocatorE>:
    slots_ = reinterpret_cast<T*>(allocator->allocate(slotsToBytes(cap)));
    capacity_ = slots_ ? cap : 0;
    usage_ = 0;
  }

  void destroy(Allocator* allocator) {
 800510a:	b580      	push	{r7, lr}
 800510c:	b082      	sub	sp, #8
 800510e:	af00      	add	r7, sp, #0
 8005110:	6078      	str	r0, [r7, #4]
 8005112:	6039      	str	r1, [r7, #0]
    if (slots_)
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	685b      	ldr	r3, [r3, #4]
 8005118:	2b00      	cmp	r3, #0
 800511a:	d008      	beq.n	800512e <_ZN11ArduinoJson8V730HB226detail10MemoryPoolINS1_15ResourceManager8SlotDataEE7destroyEPNS0_9AllocatorE+0x24>
      allocator->deallocate(slots_);
 800511c:	683b      	ldr	r3, [r7, #0]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	3304      	adds	r3, #4
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	687a      	ldr	r2, [r7, #4]
 8005126:	6852      	ldr	r2, [r2, #4]
 8005128:	4611      	mov	r1, r2
 800512a:	6838      	ldr	r0, [r7, #0]
 800512c:	4798      	blx	r3
    slots_ = nullptr;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	2200      	movs	r2, #0
 8005132:	605a      	str	r2, [r3, #4]
    capacity_ = 0;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	2200      	movs	r2, #0
 8005138:	801a      	strh	r2, [r3, #0]
    usage_ = 0;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	2200      	movs	r2, #0
 800513e:	805a      	strh	r2, [r3, #2]
  }
 8005140:	bf00      	nop
 8005142:	3708      	adds	r7, #8
 8005144:	46bd      	mov	sp, r7
 8005146:	bd80      	pop	{r7, pc}

08005148 <_ZN11ArduinoJson8V730HB226detail10MemoryPoolINS1_15ResourceManager8SlotDataEE12slotsToBytesEt>:

  static SlotCount bytesToSlots(size_t n) {
    return static_cast<SlotCount>(n / sizeof(T));
  }

  static size_t slotsToBytes(SlotCount n) {
 8005148:	b480      	push	{r7}
 800514a:	b083      	sub	sp, #12
 800514c:	af00      	add	r7, sp, #0
 800514e:	4603      	mov	r3, r0
 8005150:	80fb      	strh	r3, [r7, #6]
    return n * sizeof(T);
 8005152:	88fb      	ldrh	r3, [r7, #6]
 8005154:	00db      	lsls	r3, r3, #3
  }
 8005156:	4618      	mov	r0, r3
 8005158:	370c      	adds	r7, #12
 800515a:	46bd      	mov	sp, r7
 800515c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005160:	4770      	bx	lr

08005162 <_ZN11ArduinoJson8V730HB226detail10MemoryPoolINS1_15ResourceManager8SlotDataEE11shrinkToFitEPNS0_9AllocatorE>:
  void shrinkToFit(Allocator* allocator) {
 8005162:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005164:	b085      	sub	sp, #20
 8005166:	af00      	add	r7, sp, #0
 8005168:	6078      	str	r0, [r7, #4]
 800516a:	6039      	str	r1, [r7, #0]
        allocator->reallocate(slots_, slotsToBytes(usage_)));
 800516c:	683b      	ldr	r3, [r7, #0]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	3308      	adds	r3, #8
 8005172:	681c      	ldr	r4, [r3, #0]
 8005174:	683d      	ldr	r5, [r7, #0]
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	685e      	ldr	r6, [r3, #4]
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	885b      	ldrh	r3, [r3, #2]
 800517e:	4618      	mov	r0, r3
 8005180:	f7ff ffe2 	bl	8005148 <_ZN11ArduinoJson8V730HB226detail10MemoryPoolINS1_15ResourceManager8SlotDataEE12slotsToBytesEt>
 8005184:	4603      	mov	r3, r0
 8005186:	461a      	mov	r2, r3
 8005188:	4631      	mov	r1, r6
 800518a:	4628      	mov	r0, r5
 800518c:	47a0      	blx	r4
 800518e:	60f8      	str	r0, [r7, #12]
    if (newSlots) {
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	2b00      	cmp	r3, #0
 8005194:	d006      	beq.n	80051a4 <_ZN11ArduinoJson8V730HB226detail10MemoryPoolINS1_15ResourceManager8SlotDataEE11shrinkToFitEPNS0_9AllocatorE+0x42>
      slots_ = newSlots;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	68fa      	ldr	r2, [r7, #12]
 800519a:	605a      	str	r2, [r3, #4]
      capacity_ = usage_;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	885a      	ldrh	r2, [r3, #2]
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	801a      	strh	r2, [r3, #0]
  }
 80051a4:	bf00      	nop
 80051a6:	3714      	adds	r7, #20
 80051a8:	46bd      	mov	sp, r7
 80051aa:	bdf0      	pop	{r4, r5, r6, r7, pc}

080051ac <_ZN11ArduinoJson8V730HB226detail10ObjectData9getMemberINS1_9RamStringEEEPNS1_11VariantDataEPKS2_T_PKNS1_15ResourceManagerE>:
  template <typename TAdaptedString>
  VariantData* getMember(TAdaptedString key,
                         const ResourceManager* resources) const;

  template <typename TAdaptedString>
  static VariantData* getMember(const ObjectData* object, TAdaptedString key,
 80051ac:	b580      	push	{r7, lr}
 80051ae:	b086      	sub	sp, #24
 80051b0:	af02      	add	r7, sp, #8
 80051b2:	60f8      	str	r0, [r7, #12]
 80051b4:	4638      	mov	r0, r7
 80051b6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
                                const ResourceManager* resources) {
    if (!object)
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d101      	bne.n	80051c4 <_ZN11ArduinoJson8V730HB226detail10ObjectData9getMemberINS1_9RamStringEEEPNS1_11VariantDataEPKS2_T_PKNS1_15ResourceManagerE+0x18>
      return nullptr;
 80051c0:	2300      	movs	r3, #0
 80051c2:	e008      	b.n	80051d6 <_ZN11ArduinoJson8V730HB226detail10ObjectData9getMemberINS1_9RamStringEEEPNS1_11VariantDataEPKS2_T_PKNS1_15ResourceManagerE+0x2a>
    return object->getMember(key, resources);
 80051c4:	68f8      	ldr	r0, [r7, #12]
 80051c6:	69bb      	ldr	r3, [r7, #24]
 80051c8:	9300      	str	r3, [sp, #0]
 80051ca:	463b      	mov	r3, r7
 80051cc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80051ce:	f000 fad6 	bl	800577e <_ZNK11ArduinoJson8V730HB226detail10ObjectData9getMemberINS1_9RamStringEEEPNS1_11VariantDataET_PKNS1_15ResourceManagerE>
 80051d2:	4603      	mov	r3, r0
 80051d4:	bf00      	nop
  }
 80051d6:	4618      	mov	r0, r3
 80051d8:	3710      	adds	r7, #16
 80051da:	46bd      	mov	sp, r7
 80051dc:	bd80      	pop	{r7, pc}

080051de <_ZN11ArduinoJson8V730HB226detail11MemberProxyINS0_10JsonObjectENS1_9RamStringEEC1ES3_S4_>:

  template <typename>
  friend class ElementProxy;

 public:
  MemberProxy(TUpstream upstream, AdaptedString key)
 80051de:	b082      	sub	sp, #8
 80051e0:	b480      	push	{r7}
 80051e2:	b085      	sub	sp, #20
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	60f8      	str	r0, [r7, #12]
 80051e8:	1d38      	adds	r0, r7, #4
 80051ea:	e880 0006 	stmia.w	r0, {r1, r2}
 80051ee:	61fb      	str	r3, [r7, #28]
      : upstream_(upstream), key_(key) {}
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	3304      	adds	r3, #4
 80051f4:	1d3a      	adds	r2, r7, #4
 80051f6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80051fa:	e883 0003 	stmia.w	r3, {r0, r1}
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	330c      	adds	r3, #12
 8005202:	f107 021c 	add.w	r2, r7, #28
 8005206:	ca07      	ldmia	r2, {r0, r1, r2}
 8005208:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	4618      	mov	r0, r3
 8005210:	3714      	adds	r7, #20
 8005212:	46bd      	mov	sp, r7
 8005214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005218:	b002      	add	sp, #8
 800521a:	4770      	bx	lr

0800521c <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE17allocFromFreeListEv>:

 private:
  Slot<T> allocFromFreeList() {
 800521c:	b580      	push	{r7, lr}
 800521e:	b084      	sub	sp, #16
 8005220:	af00      	add	r7, sp, #0
 8005222:	6078      	str	r0, [r7, #4]
 8005224:	6039      	str	r1, [r7, #0]
    ARDUINOJSON_ASSERT(freeList_ != NULL_SLOT);
    auto id = freeList_;
 8005226:	683b      	ldr	r3, [r7, #0]
 8005228:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800522a:	81fb      	strh	r3, [r7, #14]
    auto slot = getSlot(freeList_);
 800522c:	683b      	ldr	r3, [r7, #0]
 800522e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005230:	4619      	mov	r1, r3
 8005232:	6838      	ldr	r0, [r7, #0]
 8005234:	f7ff fcb0 	bl	8004b98 <_ZNK11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE7getSlotEt>
 8005238:	60b8      	str	r0, [r7, #8]
    freeList_ = reinterpret_cast<FreeSlot*>(slot)->next;
 800523a:	68bb      	ldr	r3, [r7, #8]
 800523c:	881a      	ldrh	r2, [r3, #0]
 800523e:	683b      	ldr	r3, [r7, #0]
 8005240:	851a      	strh	r2, [r3, #40]	@ 0x28
    return {slot, id};
 8005242:	89fb      	ldrh	r3, [r7, #14]
 8005244:	461a      	mov	r2, r3
 8005246:	68b9      	ldr	r1, [r7, #8]
 8005248:	6878      	ldr	r0, [r7, #4]
 800524a:	f7ff fc75 	bl	8004b38 <_ZN11ArduinoJson8V730HB226detail4SlotINS1_15ResourceManager8SlotDataEEC1EPS4_t>
  }
 800524e:	6878      	ldr	r0, [r7, #4]
 8005250:	3710      	adds	r7, #16
 8005252:	46bd      	mov	sp, r7
 8005254:	bd80      	pop	{r7, pc}

08005256 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE17allocFromLastPoolEv>:

  Slot<T> allocFromLastPool() {
 8005256:	b5b0      	push	{r4, r5, r7, lr}
 8005258:	b086      	sub	sp, #24
 800525a:	af00      	add	r7, sp, #0
 800525c:	6078      	str	r0, [r7, #4]
 800525e:	6039      	str	r1, [r7, #0]
    ARDUINOJSON_ASSERT(count_ > 0);
    auto poolIndex = SlotId(count_ - 1);
 8005260:	683b      	ldr	r3, [r7, #0]
 8005262:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8005264:	3b01      	subs	r3, #1
 8005266:	82fb      	strh	r3, [r7, #22]
    auto slot = pools_[poolIndex].allocSlot();
 8005268:	683b      	ldr	r3, [r7, #0]
 800526a:	6a1a      	ldr	r2, [r3, #32]
 800526c:	8afb      	ldrh	r3, [r7, #22]
 800526e:	00db      	lsls	r3, r3, #3
 8005270:	441a      	add	r2, r3
 8005272:	f107 030c 	add.w	r3, r7, #12
 8005276:	4611      	mov	r1, r2
 8005278:	4618      	mov	r0, r3
 800527a:	f000 faad 	bl	80057d8 <_ZN11ArduinoJson8V730HB226detail10MemoryPoolINS1_15ResourceManager8SlotDataEE9allocSlotEv>
    if (!slot)
 800527e:	f107 030c 	add.w	r3, r7, #12
 8005282:	4618      	mov	r0, r3
 8005284:	f7ff fc22 	bl	8004acc <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_15ResourceManager8SlotDataEEcvbEv>
 8005288:	4603      	mov	r3, r0
 800528a:	f083 0301 	eor.w	r3, r3, #1
 800528e:	b2db      	uxtb	r3, r3
 8005290:	2b00      	cmp	r3, #0
 8005292:	d003      	beq.n	800529c <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE17allocFromLastPoolEv+0x46>
      return {};
 8005294:	6878      	ldr	r0, [r7, #4]
 8005296:	f000 f857 	bl	8005348 <_ZN11ArduinoJson8V730HB226detail4SlotINS1_15ResourceManager8SlotDataEEC1Ev>
 800529a:	e015      	b.n	80052c8 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE17allocFromLastPoolEv+0x72>
    return {slot.ptr(),
            SlotId(poolIndex * ARDUINOJSON_POOL_CAPACITY + slot.id())};
 800529c:	f107 030c 	add.w	r3, r7, #12
 80052a0:	4618      	mov	r0, r3
 80052a2:	f000 f863 	bl	800536c <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_15ResourceManager8SlotDataEE3ptrEv>
 80052a6:	4605      	mov	r5, r0
 80052a8:	8afb      	ldrh	r3, [r7, #22]
 80052aa:	01db      	lsls	r3, r3, #7
 80052ac:	b29c      	uxth	r4, r3
 80052ae:	f107 030c 	add.w	r3, r7, #12
 80052b2:	4618      	mov	r0, r3
 80052b4:	f7ff fc27 	bl	8004b06 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_15ResourceManager8SlotDataEE2idEv>
 80052b8:	4603      	mov	r3, r0
 80052ba:	4423      	add	r3, r4
 80052bc:	b29b      	uxth	r3, r3
 80052be:	461a      	mov	r2, r3
 80052c0:	4629      	mov	r1, r5
 80052c2:	6878      	ldr	r0, [r7, #4]
 80052c4:	f7ff fc38 	bl	8004b38 <_ZN11ArduinoJson8V730HB226detail4SlotINS1_15ResourceManager8SlotDataEEC1EPS4_t>
  }
 80052c8:	6878      	ldr	r0, [r7, #4]
 80052ca:	3718      	adds	r7, #24
 80052cc:	46bd      	mov	sp, r7
 80052ce:	bdb0      	pop	{r4, r5, r7, pc}

080052d0 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE7addPoolEPNS0_9AllocatorE>:

  Pool* addPool(Allocator* allocator) {
 80052d0:	b580      	push	{r7, lr}
 80052d2:	b084      	sub	sp, #16
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	6078      	str	r0, [r7, #4]
 80052d8:	6039      	str	r1, [r7, #0]
    if (count_ == capacity_ && !increaseCapacity(allocator))
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	8c9a      	ldrh	r2, [r3, #36]	@ 0x24
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80052e2:	429a      	cmp	r2, r3
 80052e4:	d10b      	bne.n	80052fe <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE7addPoolEPNS0_9AllocatorE+0x2e>
 80052e6:	6839      	ldr	r1, [r7, #0]
 80052e8:	6878      	ldr	r0, [r7, #4]
 80052ea:	f000 faa1 	bl	8005830 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE16increaseCapacityEPNS0_9AllocatorE>
 80052ee:	4603      	mov	r3, r0
 80052f0:	f083 0301 	eor.w	r3, r3, #1
 80052f4:	b2db      	uxtb	r3, r3
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d001      	beq.n	80052fe <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE7addPoolEPNS0_9AllocatorE+0x2e>
 80052fa:	2301      	movs	r3, #1
 80052fc:	e000      	b.n	8005300 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE7addPoolEPNS0_9AllocatorE+0x30>
 80052fe:	2300      	movs	r3, #0
 8005300:	2b00      	cmp	r3, #0
 8005302:	d001      	beq.n	8005308 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE7addPoolEPNS0_9AllocatorE+0x38>
      return nullptr;
 8005304:	2300      	movs	r3, #0
 8005306:	e01b      	b.n	8005340 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE7addPoolEPNS0_9AllocatorE+0x70>
    auto pool = &pools_[count_++];
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	6a1a      	ldr	r2, [r3, #32]
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8005310:	1c59      	adds	r1, r3, #1
 8005312:	b288      	uxth	r0, r1
 8005314:	6879      	ldr	r1, [r7, #4]
 8005316:	8488      	strh	r0, [r1, #36]	@ 0x24
 8005318:	00db      	lsls	r3, r3, #3
 800531a:	4413      	add	r3, r2
 800531c:	60bb      	str	r3, [r7, #8]
    SlotCount poolCapacity = ARDUINOJSON_POOL_CAPACITY;
 800531e:	2380      	movs	r3, #128	@ 0x80
 8005320:	81fb      	strh	r3, [r7, #14]
    if (count_ == maxPools)  // last pool is smaller because of NULL_SLOT
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8005326:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800532a:	d102      	bne.n	8005332 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE7addPoolEPNS0_9AllocatorE+0x62>
      poolCapacity--;
 800532c:	89fb      	ldrh	r3, [r7, #14]
 800532e:	3b01      	subs	r3, #1
 8005330:	81fb      	strh	r3, [r7, #14]
    pool->create(poolCapacity, allocator);
 8005332:	89fb      	ldrh	r3, [r7, #14]
 8005334:	683a      	ldr	r2, [r7, #0]
 8005336:	4619      	mov	r1, r3
 8005338:	68b8      	ldr	r0, [r7, #8]
 800533a:	f000 fabe 	bl	80058ba <_ZN11ArduinoJson8V730HB226detail10MemoryPoolINS1_15ResourceManager8SlotDataEE6createEtPNS0_9AllocatorE>
    return pool;
 800533e:	68bb      	ldr	r3, [r7, #8]
  }
 8005340:	4618      	mov	r0, r3
 8005342:	3710      	adds	r7, #16
 8005344:	46bd      	mov	sp, r7
 8005346:	bd80      	pop	{r7, pc}

08005348 <_ZN11ArduinoJson8V730HB226detail4SlotINS1_15ResourceManager8SlotDataEEC1Ev>:
  Slot() : ptr_(nullptr), id_(NULL_SLOT) {}
 8005348:	b480      	push	{r7}
 800534a:	b083      	sub	sp, #12
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2200      	movs	r2, #0
 8005354:	601a      	str	r2, [r3, #0]
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800535c:	809a      	strh	r2, [r3, #4]
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	4618      	mov	r0, r3
 8005362:	370c      	adds	r7, #12
 8005364:	46bd      	mov	sp, r7
 8005366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536a:	4770      	bx	lr

0800536c <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_15ResourceManager8SlotDataEE3ptrEv>:
  T* ptr() const {
 800536c:	b480      	push	{r7}
 800536e:	b083      	sub	sp, #12
 8005370:	af00      	add	r7, sp, #0
 8005372:	6078      	str	r0, [r7, #4]
    return ptr_;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
  }
 8005378:	4618      	mov	r0, r3
 800537a:	370c      	adds	r7, #12
 800537c:	46bd      	mov	sp, r7
 800537e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005382:	4770      	bx	lr

08005384 <_ZNK11ArduinoJson8V730HB226detail10MemoryPoolINS1_15ResourceManager8SlotDataEE7getSlotEt>:
  T* getSlot(SlotId id) const {
 8005384:	b480      	push	{r7}
 8005386:	b083      	sub	sp, #12
 8005388:	af00      	add	r7, sp, #0
 800538a:	6078      	str	r0, [r7, #4]
 800538c:	460b      	mov	r3, r1
 800538e:	807b      	strh	r3, [r7, #2]
    return slots_ + id;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	685a      	ldr	r2, [r3, #4]
 8005394:	887b      	ldrh	r3, [r7, #2]
 8005396:	00db      	lsls	r3, r3, #3
 8005398:	4413      	add	r3, r2
  }
 800539a:	4618      	mov	r0, r3
 800539c:	370c      	adds	r7, #12
 800539e:	46bd      	mov	sp, r7
 80053a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a4:	4770      	bx	lr
	...

080053a8 <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIdLj8EE25positiveBinaryPowersOfTenEv>:
  static pgm_ptr<T> positiveBinaryPowersOfTen() {
 80053a8:	b580      	push	{r7, lr}
 80053aa:	b082      	sub	sp, #8
 80053ac:	af00      	add	r7, sp, #0
    return pgm_ptr<T>(reinterpret_cast<const T*>(factors));
 80053ae:	1d3b      	adds	r3, r7, #4
 80053b0:	4904      	ldr	r1, [pc, #16]	@ (80053c4 <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIdLj8EE25positiveBinaryPowersOfTenEv+0x1c>)
 80053b2:	4618      	mov	r0, r3
 80053b4:	f000 faa7 	bl	8005906 <_ZN11ArduinoJson8V730HB226detail7pgm_ptrIdEC1EPKd>
 80053b8:	687b      	ldr	r3, [r7, #4]
  }
 80053ba:	4618      	mov	r0, r3
 80053bc:	3708      	adds	r7, #8
 80053be:	46bd      	mov	sp, r7
 80053c0:	bd80      	pop	{r7, pc}
 80053c2:	bf00      	nop
 80053c4:	08020478 	.word	0x08020478

080053c8 <_ZNK11ArduinoJson8V730HB226detail7pgm_ptrIdEixEi>:
template <typename T>
class pgm_ptr {
 public:
  explicit pgm_ptr(const T* ptr) : ptr_(ptr) {}

  T operator[](intptr_t index) const {
 80053c8:	b580      	push	{r7, lr}
 80053ca:	b082      	sub	sp, #8
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	6078      	str	r0, [r7, #4]
 80053d0:	6039      	str	r1, [r7, #0]
    return pgm_read(ptr_ + index);
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681a      	ldr	r2, [r3, #0]
 80053d6:	683b      	ldr	r3, [r7, #0]
 80053d8:	00db      	lsls	r3, r3, #3
 80053da:	4413      	add	r3, r2
 80053dc:	4618      	mov	r0, r3
 80053de:	f000 faa1 	bl	8005924 <_ZN11ArduinoJson8V730HB226detail8pgm_readIdEET_PKS3_>
 80053e2:	eeb0 7b40 	vmov.f64	d7, d0
  }
 80053e6:	eeb0 0b47 	vmov.f64	d0, d7
 80053ea:	3708      	adds	r7, #8
 80053ec:	46bd      	mov	sp, r7
 80053ee:	bd80      	pop	{r7, pc}

080053f0 <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIdLj8EE25negativeBinaryPowersOfTenEv>:
  static pgm_ptr<T> negativeBinaryPowersOfTen() {
 80053f0:	b580      	push	{r7, lr}
 80053f2:	b082      	sub	sp, #8
 80053f4:	af00      	add	r7, sp, #0
    return pgm_ptr<T>(reinterpret_cast<const T*>(factors));
 80053f6:	1d3b      	adds	r3, r7, #4
 80053f8:	4904      	ldr	r1, [pc, #16]	@ (800540c <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIdLj8EE25negativeBinaryPowersOfTenEv+0x1c>)
 80053fa:	4618      	mov	r0, r3
 80053fc:	f000 fa83 	bl	8005906 <_ZN11ArduinoJson8V730HB226detail7pgm_ptrIdEC1EPKd>
 8005400:	687b      	ldr	r3, [r7, #4]
  }
 8005402:	4618      	mov	r0, r3
 8005404:	3708      	adds	r7, #8
 8005406:	46bd      	mov	sp, r7
 8005408:	bd80      	pop	{r7, pc}
 800540a:	bf00      	nop
 800540c:	080204c0 	.word	0x080204c0

08005410 <_ZN11ArduinoJson8V730HB226detail18SizedStringAdapterIPcvE5adaptEPKcj>:

template <typename TChar>
struct SizedStringAdapter<TChar*, enable_if_t<IsChar<TChar>::value>> {
  using AdaptedString = RamString;

  static AdaptedString adapt(const TChar* p, size_t n) {
 8005410:	b580      	push	{r7, lr}
 8005412:	b084      	sub	sp, #16
 8005414:	af00      	add	r7, sp, #0
 8005416:	60f8      	str	r0, [r7, #12]
 8005418:	60b9      	str	r1, [r7, #8]
 800541a:	607a      	str	r2, [r7, #4]
    return AdaptedString(reinterpret_cast<const char*>(p), n);
 800541c:	2300      	movs	r3, #0
 800541e:	687a      	ldr	r2, [r7, #4]
 8005420:	68b9      	ldr	r1, [r7, #8]
 8005422:	68f8      	ldr	r0, [r7, #12]
 8005424:	f7fd f956 	bl	80026d4 <_ZN11ArduinoJson8V730HB226detail9RamStringC1EPKcjb>
  }
 8005428:	68f8      	ldr	r0, [r7, #12]
 800542a:	3710      	adds	r7, #16
 800542c:	46bd      	mov	sp, r7
 800542e:	bd80      	pop	{r7, pc}

08005430 <_ZNK11ArduinoJson8V730HB226detail10StringPool3getINS1_9RamStringEEEPNS1_10StringNodeERKT_>:
  StringNode* get(const TAdaptedString& str) const {
 8005430:	b590      	push	{r4, r7, lr}
 8005432:	b089      	sub	sp, #36	@ 0x24
 8005434:	af02      	add	r7, sp, #8
 8005436:	6078      	str	r0, [r7, #4]
 8005438:	6039      	str	r1, [r7, #0]
    for (auto node = strings_; node; node = node->next) {
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	617b      	str	r3, [r7, #20]
 8005440:	e01e      	b.n	8005480 <_ZNK11ArduinoJson8V730HB226detail10StringPool3getINS1_9RamStringEEEPNS1_10StringNodeERKT_+0x50>
      if (stringEquals(str, adaptString(node->data, node->length)))
 8005442:	697b      	ldr	r3, [r7, #20]
 8005444:	f103 0108 	add.w	r1, r3, #8
 8005448:	697b      	ldr	r3, [r7, #20]
 800544a:	88db      	ldrh	r3, [r3, #6]
 800544c:	461a      	mov	r2, r3
 800544e:	f107 0308 	add.w	r3, r7, #8
 8005452:	4618      	mov	r0, r3
 8005454:	f7ff fbea 	bl	8004c2c <_ZN11ArduinoJson8V730HB226detail11adaptStringIcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIPT_EE5valueES7_NS1_9remove_cvINS1_16remove_referenceIS7_E4typeEE4typeEE4typeEvE13AdaptedStringES7_j>
 8005458:	683a      	ldr	r2, [r7, #0]
 800545a:	466c      	mov	r4, sp
 800545c:	f107 030c 	add.w	r3, r7, #12
 8005460:	e893 0003 	ldmia.w	r3, {r0, r1}
 8005464:	e884 0003 	stmia.w	r4, {r0, r1}
 8005468:	68bb      	ldr	r3, [r7, #8]
 800546a:	ca07      	ldmia	r2, {r0, r1, r2}
 800546c:	f000 fa6a 	bl	8005944 <_ZN11ArduinoJson8V730HB226detail12stringEqualsINS1_9RamStringES3_EENS1_9enable_ifIXlesrT_11typeSortKeysrT0_11typeSortKeyEbE4typeES5_S6_>
 8005470:	4603      	mov	r3, r0
 8005472:	2b00      	cmp	r3, #0
 8005474:	d001      	beq.n	800547a <_ZNK11ArduinoJson8V730HB226detail10StringPool3getINS1_9RamStringEEEPNS1_10StringNodeERKT_+0x4a>
        return node;
 8005476:	697b      	ldr	r3, [r7, #20]
 8005478:	e006      	b.n	8005488 <_ZNK11ArduinoJson8V730HB226detail10StringPool3getINS1_9RamStringEEEPNS1_10StringNodeERKT_+0x58>
    for (auto node = strings_; node; node = node->next) {
 800547a:	697b      	ldr	r3, [r7, #20]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	617b      	str	r3, [r7, #20]
 8005480:	697b      	ldr	r3, [r7, #20]
 8005482:	2b00      	cmp	r3, #0
 8005484:	d1dd      	bne.n	8005442 <_ZNK11ArduinoJson8V730HB226detail10StringPool3getINS1_9RamStringEEEPNS1_10StringNodeERKT_+0x12>
    return nullptr;
 8005486:	2300      	movs	r3, #0
  }
 8005488:	4618      	mov	r0, r3
 800548a:	371c      	adds	r7, #28
 800548c:	46bd      	mov	sp, r7
 800548e:	bd90      	pop	{r4, r7, pc}

08005490 <_ZN11ArduinoJson8V730HB226detail7forwardIRPKcEEOT_RNS1_16remove_referenceIS6_E4typeE>:
ARDUINOJSON_BEGIN_PRIVATE_NAMESPACE

using nullptr_t = decltype(nullptr);

template <class T>
T&& forward(remove_reference_t<T>& t) noexcept {
 8005490:	b480      	push	{r7}
 8005492:	b083      	sub	sp, #12
 8005494:	af00      	add	r7, sp, #0
 8005496:	6078      	str	r0, [r7, #4]
  return static_cast<T&&>(t);
 8005498:	687b      	ldr	r3, [r7, #4]
}
 800549a:	4618      	mov	r0, r3
 800549c:	370c      	adds	r7, #12
 800549e:	46bd      	mov	sp, r7
 80054a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a4:	4770      	bx	lr

080054a6 <_ZN11ArduinoJson8V730HB226detail7forwardIRNS0_10JsonStringEEEOT_RNS1_16remove_referenceIS5_E4typeE>:
T&& forward(remove_reference_t<T>& t) noexcept {
 80054a6:	b480      	push	{r7}
 80054a8:	b083      	sub	sp, #12
 80054aa:	af00      	add	r7, sp, #0
 80054ac:	6078      	str	r0, [r7, #4]
  return static_cast<T&&>(t);
 80054ae:	687b      	ldr	r3, [r7, #4]
}
 80054b0:	4618      	mov	r0, r3
 80054b2:	370c      	adds	r7, #12
 80054b4:	46bd      	mov	sp, r7
 80054b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ba:	4770      	bx	lr

080054bc <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS0_11JsonVariantEE18getResourceManagerEv>:
  ResourceManager* getResourceManager() const {
 80054bc:	b580      	push	{r7, lr}
 80054be:	b082      	sub	sp, #8
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	6078      	str	r0, [r7, #4]
    return VariantAttorney::getResourceManager(derived());
 80054c4:	6878      	ldr	r0, [r7, #4]
 80054c6:	f000 fa7f 	bl	80059c8 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS0_11JsonVariantEE7derivedEv>
 80054ca:	4603      	mov	r3, r0
 80054cc:	4618      	mov	r0, r3
 80054ce:	f000 fa86 	bl	80059de <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerIKNS0_11JsonVariantEEEDTcldtfp_18getResourceManagerEERT_>
 80054d2:	4603      	mov	r3, r0
  }
 80054d4:	4618      	mov	r0, r3
 80054d6:	3708      	adds	r7, #8
 80054d8:	46bd      	mov	sp, r7
 80054da:	bd80      	pop	{r7, pc}

080054dc <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS0_11JsonVariantEE7getDataEv>:
  VariantData* getData() const {
 80054dc:	b580      	push	{r7, lr}
 80054de:	b082      	sub	sp, #8
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	6078      	str	r0, [r7, #4]
    return VariantAttorney::getData(derived());
 80054e4:	6878      	ldr	r0, [r7, #4]
 80054e6:	f000 fa6f 	bl	80059c8 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS0_11JsonVariantEE7derivedEv>
 80054ea:	4603      	mov	r3, r0
 80054ec:	4618      	mov	r0, r3
 80054ee:	f000 fa82 	bl	80059f6 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataIKNS0_11JsonVariantEEEDTcldtfp_7getDataEERT_>
 80054f2:	4603      	mov	r3, r0
  }
 80054f4:	4618      	mov	r0, r3
 80054f6:	3708      	adds	r7, #8
 80054f8:	46bd      	mov	sp, r7
 80054fa:	bd80      	pop	{r7, pc}

080054fc <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIdLj8EE5forgeEy>:
  static T forge(uint64_t bits) {
 80054fc:	b580      	push	{r7, lr}
 80054fe:	b082      	sub	sp, #8
 8005500:	af00      	add	r7, sp, #0
 8005502:	e9c7 0100 	strd	r0, r1, [r7]
    return alias_cast<T>(bits);
 8005506:	e9d7 0100 	ldrd	r0, r1, [r7]
 800550a:	f000 fa80 	bl	8005a0e <_ZN11ArduinoJson8V730HB226detail10alias_castIdyEET_T0_>
 800550e:	eeb0 7b40 	vmov.f64	d7, d0
  }
 8005512:	eeb0 0b47 	vmov.f64	d0, d7
 8005516:	3708      	adds	r7, #8
 8005518:	46bd      	mov	sp, r7
 800551a:	bd80      	pop	{r7, pc}

0800551c <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIfLj4EE25positiveBinaryPowersOfTenEv>:
  static pgm_ptr<T> positiveBinaryPowersOfTen() {
 800551c:	b580      	push	{r7, lr}
 800551e:	b082      	sub	sp, #8
 8005520:	af00      	add	r7, sp, #0
    return pgm_ptr<T>(reinterpret_cast<const T*>(factors));
 8005522:	1d3b      	adds	r3, r7, #4
 8005524:	4904      	ldr	r1, [pc, #16]	@ (8005538 <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIfLj4EE25positiveBinaryPowersOfTenEv+0x1c>)
 8005526:	4618      	mov	r0, r3
 8005528:	f000 fa85 	bl	8005a36 <_ZN11ArduinoJson8V730HB226detail7pgm_ptrIfEC1EPKf>
 800552c:	687b      	ldr	r3, [r7, #4]
  }
 800552e:	4618      	mov	r0, r3
 8005530:	3708      	adds	r7, #8
 8005532:	46bd      	mov	sp, r7
 8005534:	bd80      	pop	{r7, pc}
 8005536:	bf00      	nop
 8005538:	08020508 	.word	0x08020508

0800553c <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIfLj4EE25negativeBinaryPowersOfTenEv>:
  static pgm_ptr<T> negativeBinaryPowersOfTen() {
 800553c:	b580      	push	{r7, lr}
 800553e:	b082      	sub	sp, #8
 8005540:	af00      	add	r7, sp, #0
    return pgm_ptr<T>(reinterpret_cast<const T*>(factors));
 8005542:	1d3b      	adds	r3, r7, #4
 8005544:	4904      	ldr	r1, [pc, #16]	@ (8005558 <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIfLj4EE25negativeBinaryPowersOfTenEv+0x1c>)
 8005546:	4618      	mov	r0, r3
 8005548:	f000 fa75 	bl	8005a36 <_ZN11ArduinoJson8V730HB226detail7pgm_ptrIfEC1EPKf>
 800554c:	687b      	ldr	r3, [r7, #4]
  }
 800554e:	4618      	mov	r0, r3
 8005550:	3708      	adds	r7, #8
 8005552:	46bd      	mov	sp, r7
 8005554:	bd80      	pop	{r7, pc}
 8005556:	bf00      	nop
 8005558:	08020520 	.word	0x08020520

0800555c <_ZNK11ArduinoJson8V730HB226detail7pgm_ptrIfEixEi>:
  T operator[](intptr_t index) const {
 800555c:	b580      	push	{r7, lr}
 800555e:	b082      	sub	sp, #8
 8005560:	af00      	add	r7, sp, #0
 8005562:	6078      	str	r0, [r7, #4]
 8005564:	6039      	str	r1, [r7, #0]
    return pgm_read(ptr_ + index);
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681a      	ldr	r2, [r3, #0]
 800556a:	683b      	ldr	r3, [r7, #0]
 800556c:	009b      	lsls	r3, r3, #2
 800556e:	4413      	add	r3, r2
 8005570:	4618      	mov	r0, r3
 8005572:	f000 fa6f 	bl	8005a54 <_ZN11ArduinoJson8V730HB226detail8pgm_readIfEET_PKS3_>
 8005576:	eef0 7a40 	vmov.f32	s15, s0
  }
 800557a:	eeb0 0a67 	vmov.f32	s0, s15
 800557e:	3708      	adds	r7, #8
 8005580:	46bd      	mov	sp, r7
 8005582:	bd80      	pop	{r7, pc}

08005584 <_ZN11ArduinoJson8V730HB226detail11adaptStringIRA8_KcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES9_NS1_9remove_cvINS1_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEOS9_>:
AdaptedString<TString> adaptString(TString&& s) {
 8005584:	b580      	push	{r7, lr}
 8005586:	b082      	sub	sp, #8
 8005588:	af00      	add	r7, sp, #0
 800558a:	6078      	str	r0, [r7, #4]
 800558c:	6039      	str	r1, [r7, #0]
  return StringAdapterFor<TString>::adapt(detail::forward<TString>(s));
 800558e:	6838      	ldr	r0, [r7, #0]
 8005590:	f000 fa6f 	bl	8005a72 <_ZN11ArduinoJson8V730HB226detail7forwardIRA8_KcEEOT_RNS1_16remove_referenceIS6_E4typeE>
 8005594:	4602      	mov	r2, r0
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	4611      	mov	r1, r2
 800559a:	4618      	mov	r0, r3
 800559c:	f000 fa74 	bl	8005a88 <_ZN11ArduinoJson8V730HB226detail13StringAdapterIRA8_KcvE5adaptES5_>
 80055a0:	bf00      	nop
}
 80055a2:	6878      	ldr	r0, [r7, #4]
 80055a4:	3708      	adds	r7, #8
 80055a6:	46bd      	mov	sp, r7
 80055a8:	bd80      	pop	{r7, pc}

080055aa <_ZN11ArduinoJson8V730HB226detail11MemberProxyIRNS0_12JsonDocumentENS1_9RamStringEEC1ES4_S5_>:
  MemberProxy(TUpstream upstream, AdaptedString key)
 80055aa:	b082      	sub	sp, #8
 80055ac:	b480      	push	{r7}
 80055ae:	b083      	sub	sp, #12
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	6078      	str	r0, [r7, #4]
 80055b4:	6039      	str	r1, [r7, #0]
 80055b6:	f107 0110 	add.w	r1, r7, #16
 80055ba:	e881 000c 	stmia.w	r1, {r2, r3}
      : upstream_(upstream), key_(key) {}
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	683a      	ldr	r2, [r7, #0]
 80055c2:	601a      	str	r2, [r3, #0]
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	3304      	adds	r3, #4
 80055c8:	f107 0210 	add.w	r2, r7, #16
 80055cc:	ca07      	ldmia	r2, {r0, r1, r2}
 80055ce:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	4618      	mov	r0, r3
 80055d6:	370c      	adds	r7, #12
 80055d8:	46bd      	mov	sp, r7
 80055da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055de:	b002      	add	sp, #8
 80055e0:	4770      	bx	lr

080055e2 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS0_11JsonVariantEE2asINS0_10JsonObjectEEET_v>:
inline T VariantRefBase<TDerived>::as() const {
 80055e2:	b590      	push	{r4, r7, lr}
 80055e4:	b087      	sub	sp, #28
 80055e6:	af00      	add	r7, sp, #0
 80055e8:	6078      	str	r0, [r7, #4]
 80055ea:	6039      	str	r1, [r7, #0]
 80055ec:	683b      	ldr	r3, [r7, #0]
 80055ee:	617b      	str	r3, [r7, #20]
 80055f0:	697b      	ldr	r3, [r7, #20]
 80055f2:	613b      	str	r3, [r7, #16]
  return JsonVariant(getData(), getResourceManager());
 80055f4:	6938      	ldr	r0, [r7, #16]
 80055f6:	f7ff ff71 	bl	80054dc <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS0_11JsonVariantEE7getDataEv>
 80055fa:	4604      	mov	r4, r0
 80055fc:	6938      	ldr	r0, [r7, #16]
 80055fe:	f7ff ff5d 	bl	80054bc <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS0_11JsonVariantEE18getResourceManagerEv>
 8005602:	4602      	mov	r2, r0
 8005604:	f107 0308 	add.w	r3, r7, #8
 8005608:	4621      	mov	r1, r4
 800560a:	4618      	mov	r0, r3
 800560c:	f7fd fc54 	bl	8002eb8 <_ZN11ArduinoJson8V730HB2211JsonVariantC1EPNS0_6detail11VariantDataEPNS2_15ResourceManagerE>
    return getVariant();
 8005610:	bf00      	nop
  return Converter<T>::fromJson(getVariant<variant_type>());
 8005612:	6878      	ldr	r0, [r7, #4]
 8005614:	f107 0308 	add.w	r3, r7, #8
 8005618:	e893 0006 	ldmia.w	r3, {r1, r2}
 800561c:	f7fe f95d 	bl	80038da <_ZN11ArduinoJson8V730HB229ConverterINS0_10JsonObjectEvE8fromJsonENS0_11JsonVariantE>
 8005620:	bf00      	nop
}
 8005622:	6878      	ldr	r0, [r7, #4]
 8005624:	371c      	adds	r7, #28
 8005626:	46bd      	mov	sp, r7
 8005628:	bd90      	pop	{r4, r7, pc}

0800562a <_ZN11ArduinoJson8V730HB226detail11adaptStringIRA7_KcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES9_NS1_9remove_cvINS1_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEOS9_>:
AdaptedString<TString> adaptString(TString&& s) {
 800562a:	b580      	push	{r7, lr}
 800562c:	b082      	sub	sp, #8
 800562e:	af00      	add	r7, sp, #0
 8005630:	6078      	str	r0, [r7, #4]
 8005632:	6039      	str	r1, [r7, #0]
  return StringAdapterFor<TString>::adapt(detail::forward<TString>(s));
 8005634:	6838      	ldr	r0, [r7, #0]
 8005636:	f000 fa36 	bl	8005aa6 <_ZN11ArduinoJson8V730HB226detail7forwardIRA7_KcEEOT_RNS1_16remove_referenceIS6_E4typeE>
 800563a:	4602      	mov	r2, r0
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	4611      	mov	r1, r2
 8005640:	4618      	mov	r0, r3
 8005642:	f000 fa3b 	bl	8005abc <_ZN11ArduinoJson8V730HB226detail13StringAdapterIRA7_KcvE5adaptES5_>
 8005646:	bf00      	nop
}
 8005648:	6878      	ldr	r0, [r7, #4]
 800564a:	3708      	adds	r7, #8
 800564c:	46bd      	mov	sp, r7
 800564e:	bd80      	pop	{r7, pc}

08005650 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEE2asIPKcEET_v>:
inline T VariantRefBase<TDerived>::as() const {
 8005650:	b590      	push	{r4, r7, lr}
 8005652:	b087      	sub	sp, #28
 8005654:	af00      	add	r7, sp, #0
 8005656:	6078      	str	r0, [r7, #4]
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	617b      	str	r3, [r7, #20]
 800565c:	697b      	ldr	r3, [r7, #20]
 800565e:	613b      	str	r3, [r7, #16]
    return ArduinoJson::JsonVariantConst(getData(), getResourceManager());
 8005660:	6938      	ldr	r0, [r7, #16]
 8005662:	f000 fcce 	bl	8006002 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEE7getDataEv>
 8005666:	4604      	mov	r4, r0
 8005668:	6938      	ldr	r0, [r7, #16]
 800566a:	f000 fb58 	bl	8005d1e <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEE18getResourceManagerEv>
 800566e:	4602      	mov	r2, r0
 8005670:	f107 0308 	add.w	r3, r7, #8
 8005674:	4621      	mov	r1, r4
 8005676:	4618      	mov	r0, r3
 8005678:	f7fd fbf3 	bl	8002e62 <_ZN11ArduinoJson8V730HB2216JsonVariantConstC1EPKNS0_6detail11VariantDataEPKNS2_15ResourceManagerE>
    return getVariantConst();
 800567c:	bf00      	nop
  return Converter<T>::fromJson(getVariant<variant_type>());
 800567e:	f107 0308 	add.w	r3, r7, #8
 8005682:	e893 0003 	ldmia.w	r3, {r0, r1}
 8005686:	f7fe f8e5 	bl	8003854 <_ZN11ArduinoJson8V730HB229ConverterIPKcvE8fromJsonENS0_16JsonVariantConstE>
 800568a:	4603      	mov	r3, r0
}
 800568c:	4618      	mov	r0, r3
 800568e:	371c      	adds	r7, #28
 8005690:	46bd      	mov	sp, r7
 8005692:	bd90      	pop	{r4, r7, pc}

08005694 <_ZN11ArduinoJson8V730HB226detail11adaptStringIRA10_KcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES9_NS1_9remove_cvINS1_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEOS9_>:
AdaptedString<TString> adaptString(TString&& s) {
 8005694:	b580      	push	{r7, lr}
 8005696:	b082      	sub	sp, #8
 8005698:	af00      	add	r7, sp, #0
 800569a:	6078      	str	r0, [r7, #4]
 800569c:	6039      	str	r1, [r7, #0]
  return StringAdapterFor<TString>::adapt(detail::forward<TString>(s));
 800569e:	6838      	ldr	r0, [r7, #0]
 80056a0:	f000 fa1b 	bl	8005ada <_ZN11ArduinoJson8V730HB226detail7forwardIRA10_KcEEOT_RNS1_16remove_referenceIS6_E4typeE>
 80056a4:	4602      	mov	r2, r0
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	4611      	mov	r1, r2
 80056aa:	4618      	mov	r0, r3
 80056ac:	f000 fa20 	bl	8005af0 <_ZN11ArduinoJson8V730HB226detail13StringAdapterIRA10_KcvE5adaptES5_>
 80056b0:	bf00      	nop
}
 80056b2:	6878      	ldr	r0, [r7, #4]
 80056b4:	3708      	adds	r7, #8
 80056b6:	46bd      	mov	sp, r7
 80056b8:	bd80      	pop	{r7, pc}

080056ba <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEE2asImEET_v>:
inline T VariantRefBase<TDerived>::as() const {
 80056ba:	b590      	push	{r4, r7, lr}
 80056bc:	b087      	sub	sp, #28
 80056be:	af00      	add	r7, sp, #0
 80056c0:	6078      	str	r0, [r7, #4]
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	617b      	str	r3, [r7, #20]
 80056c6:	697b      	ldr	r3, [r7, #20]
 80056c8:	613b      	str	r3, [r7, #16]
    return ArduinoJson::JsonVariantConst(getData(), getResourceManager());
 80056ca:	6938      	ldr	r0, [r7, #16]
 80056cc:	f000 fc99 	bl	8006002 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEE7getDataEv>
 80056d0:	4604      	mov	r4, r0
 80056d2:	6938      	ldr	r0, [r7, #16]
 80056d4:	f000 fb23 	bl	8005d1e <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEE18getResourceManagerEv>
 80056d8:	4602      	mov	r2, r0
 80056da:	f107 0308 	add.w	r3, r7, #8
 80056de:	4621      	mov	r1, r4
 80056e0:	4618      	mov	r0, r3
 80056e2:	f7fd fbbe 	bl	8002e62 <_ZN11ArduinoJson8V730HB2216JsonVariantConstC1EPKNS0_6detail11VariantDataEPKNS2_15ResourceManagerE>
    return getVariantConst();
 80056e6:	bf00      	nop
  return Converter<T>::fromJson(getVariant<variant_type>());
 80056e8:	f107 0308 	add.w	r3, r7, #8
 80056ec:	e893 0003 	ldmia.w	r3, {r0, r1}
 80056f0:	f000 fa0d 	bl	8005b0e <_ZN11ArduinoJson8V730HB229ConverterImvE8fromJsonENS0_16JsonVariantConstE>
 80056f4:	4603      	mov	r3, r0
}
 80056f6:	4618      	mov	r0, r3
 80056f8:	371c      	adds	r7, #28
 80056fa:	46bd      	mov	sp, r7
 80056fc:	bd90      	pop	{r4, r7, pc}

080056fe <_ZN11ArduinoJson8V730HB226detail7forwardIRNS0_12JsonDocumentEEEOT_RNS1_16remove_referenceIS5_E4typeE>:
T&& forward(remove_reference_t<T>& t) noexcept {
 80056fe:	b480      	push	{r7}
 8005700:	b083      	sub	sp, #12
 8005702:	af00      	add	r7, sp, #0
 8005704:	6078      	str	r0, [r7, #4]
  return static_cast<T&&>(t);
 8005706:	687b      	ldr	r3, [r7, #4]
}
 8005708:	4618      	mov	r0, r3
 800570a:	370c      	adds	r7, #12
 800570c:	46bd      	mov	sp, r7
 800570e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005712:	4770      	bx	lr

08005714 <_ZN11ArduinoJson8V730HB226detail11deserializeINS1_16JsonDeserializerERNS0_12JsonDocumentERPKcJELi0EEENS0_20DeserializationErrorEOT0_OT1_DpT2_>:
template <
    template <typename> class TDeserializer, typename TDestination,
    typename TStream, typename... Args,
    enable_if_t<  // issue #1897
        !is_integral<typename first_or_void<Args...>::type>::value, int> = 0>
DeserializationError deserialize(TDestination&& dst, TStream&& input,
 8005714:	b590      	push	{r4, r7, lr}
 8005716:	b085      	sub	sp, #20
 8005718:	af00      	add	r7, sp, #0
 800571a:	6078      	str	r0, [r7, #4]
 800571c:	6039      	str	r1, [r7, #0]
                                 Args... args) {
  return doDeserialize<TDeserializer>(
 800571e:	6838      	ldr	r0, [r7, #0]
 8005720:	f7ff feb6 	bl	8005490 <_ZN11ArduinoJson8V730HB226detail7forwardIRPKcEEOT_RNS1_16remove_referenceIS6_E4typeE>
 8005724:	4603      	mov	r3, r0
 8005726:	4618      	mov	r0, r3
 8005728:	f000 fa0f 	bl	8005b4a <_ZN11ArduinoJson8V730HB226detail10makeReaderIRPKcEENS1_6ReaderINS1_16remove_referenceIT_E4typeEvEEOS8_>
 800572c:	4604      	mov	r4, r0
 800572e:	f107 0308 	add.w	r3, r7, #8
 8005732:	4618      	mov	r0, r3
 8005734:	f7fe f9a0 	bl	8003a78 <_ZN11ArduinoJson8V730HB2221DeserializationOption12NestingLimitC1Ev>
 8005738:	7a38      	ldrb	r0, [r7, #8]
 800573a:	f7fe f9df 	bl	8003afc <_ZN11ArduinoJson8V730HB226detail26makeDeserializationOptionsENS0_21DeserializationOption12NestingLimitE>
 800573e:	4603      	mov	r3, r0
 8005740:	81bb      	strh	r3, [r7, #12]
 8005742:	68fa      	ldr	r2, [r7, #12]
 8005744:	4621      	mov	r1, r4
 8005746:	6878      	ldr	r0, [r7, #4]
 8005748:	f000 fa20 	bl	8005b8c <_ZN11ArduinoJson8V730HB226detail13doDeserializeINS1_16JsonDeserializerERNS0_12JsonDocumentENS1_6ReaderIPKcvEENS1_22DeserializationOptionsINS1_14AllowAllFilterEEEEENS0_20DeserializationErrorEOT0_T1_T2_>
 800574c:	4603      	mov	r3, r0
      dst, makeReader(detail::forward<TStream>(input)),
      makeDeserializationOptions(args...));
}
 800574e:	4618      	mov	r0, r3
 8005750:	3714      	adds	r7, #20
 8005752:	46bd      	mov	sp, r7
 8005754:	bd90      	pop	{r4, r7, pc}

08005756 <_ZSt8distanceIPKcENSt15iterator_traitsIT_E15difference_typeES3_S3_>:
  */
  template<typename _InputIterator>
    _GLIBCXX_NODISCARD
    inline _GLIBCXX17_CONSTEXPR
    typename iterator_traits<_InputIterator>::difference_type
    distance(_InputIterator __first, _InputIterator __last)
 8005756:	b5b0      	push	{r4, r5, r7, lr}
 8005758:	b082      	sub	sp, #8
 800575a:	af00      	add	r7, sp, #0
 800575c:	6078      	str	r0, [r7, #4]
 800575e:	6039      	str	r1, [r7, #0]
    {
      // concept requirements -- taken care of in __distance
      return std::__distance(__first, __last,
 8005760:	687c      	ldr	r4, [r7, #4]
			     std::__iterator_category(__first));
 8005762:	1d3b      	adds	r3, r7, #4
 8005764:	4618      	mov	r0, r3
 8005766:	f000 fa4a 	bl	8005bfe <_ZSt19__iterator_categoryIPKcENSt15iterator_traitsIT_E17iterator_categoryERKS3_>
      return std::__distance(__first, __last,
 800576a:	462a      	mov	r2, r5
 800576c:	6839      	ldr	r1, [r7, #0]
 800576e:	4620      	mov	r0, r4
 8005770:	f000 fa4f 	bl	8005c12 <_ZSt10__distanceIPKcENSt15iterator_traitsIT_E15difference_typeES3_S3_St26random_access_iterator_tag>
 8005774:	4603      	mov	r3, r0
    }
 8005776:	4618      	mov	r0, r3
 8005778:	3708      	adds	r7, #8
 800577a:	46bd      	mov	sp, r7
 800577c:	bdb0      	pop	{r4, r5, r7, pc}

0800577e <_ZNK11ArduinoJson8V730HB226detail10ObjectData9getMemberINS1_9RamStringEEEPNS1_11VariantDataET_PKNS1_15ResourceManagerE>:
#include <ArduinoJson/Variant/VariantData.hpp>

ARDUINOJSON_BEGIN_PRIVATE_NAMESPACE

template <typename TAdaptedString>
inline VariantData* ObjectData::getMember(
 800577e:	b580      	push	{r7, lr}
 8005780:	b088      	sub	sp, #32
 8005782:	af02      	add	r7, sp, #8
 8005784:	60f8      	str	r0, [r7, #12]
 8005786:	4638      	mov	r0, r7
 8005788:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    TAdaptedString key, const ResourceManager* resources) const {
  auto it = findKey(key, resources);
 800578c:	f107 0010 	add.w	r0, r7, #16
 8005790:	6a3b      	ldr	r3, [r7, #32]
 8005792:	9301      	str	r3, [sp, #4]
 8005794:	68bb      	ldr	r3, [r7, #8]
 8005796:	9300      	str	r3, [sp, #0]
 8005798:	463b      	mov	r3, r7
 800579a:	cb0c      	ldmia	r3, {r2, r3}
 800579c:	68f9      	ldr	r1, [r7, #12]
 800579e:	f000 fa47 	bl	8005c30 <_ZNK11ArduinoJson8V730HB226detail10ObjectData7findKeyINS1_9RamStringEEENS1_18CollectionIteratorET_PKNS1_15ResourceManagerE>
  if (it.done())
 80057a2:	f107 0310 	add.w	r3, r7, #16
 80057a6:	4618      	mov	r0, r3
 80057a8:	f7fd f892 	bl	80028d0 <_ZNK11ArduinoJson8V730HB226detail18CollectionIterator4doneEv>
 80057ac:	4603      	mov	r3, r0
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d001      	beq.n	80057b6 <_ZNK11ArduinoJson8V730HB226detail10ObjectData9getMemberINS1_9RamStringEEEPNS1_11VariantDataET_PKNS1_15ResourceManagerE+0x38>
    return nullptr;
 80057b2:	2300      	movs	r3, #0
 80057b4:	e00c      	b.n	80057d0 <_ZNK11ArduinoJson8V730HB226detail10ObjectData9getMemberINS1_9RamStringEEEPNS1_11VariantDataET_PKNS1_15ResourceManagerE+0x52>
  it.next(resources);
 80057b6:	f107 0310 	add.w	r3, r7, #16
 80057ba:	6a39      	ldr	r1, [r7, #32]
 80057bc:	4618      	mov	r0, r3
 80057be:	f7fd fd46 	bl	800324e <_ZN11ArduinoJson8V730HB226detail18CollectionIterator4nextEPKNS1_15ResourceManagerE>
  return it.data();
 80057c2:	f107 0310 	add.w	r3, r7, #16
 80057c6:	4618      	mov	r0, r3
 80057c8:	f7fd f8b3 	bl	8002932 <_ZN11ArduinoJson8V730HB226detail18CollectionIterator4dataEv>
 80057cc:	4603      	mov	r3, r0
 80057ce:	bf00      	nop
}
 80057d0:	4618      	mov	r0, r3
 80057d2:	3718      	adds	r7, #24
 80057d4:	46bd      	mov	sp, r7
 80057d6:	bd80      	pop	{r7, pc}

080057d8 <_ZN11ArduinoJson8V730HB226detail10MemoryPoolINS1_15ResourceManager8SlotDataEE9allocSlotEv>:
  Slot<T> allocSlot() {
 80057d8:	b580      	push	{r7, lr}
 80057da:	b084      	sub	sp, #16
 80057dc:	af00      	add	r7, sp, #0
 80057de:	6078      	str	r0, [r7, #4]
 80057e0:	6039      	str	r1, [r7, #0]
    if (!slots_)
 80057e2:	683b      	ldr	r3, [r7, #0]
 80057e4:	685b      	ldr	r3, [r3, #4]
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d103      	bne.n	80057f2 <_ZN11ArduinoJson8V730HB226detail10MemoryPoolINS1_15ResourceManager8SlotDataEE9allocSlotEv+0x1a>
      return {};
 80057ea:	6878      	ldr	r0, [r7, #4]
 80057ec:	f7ff fdac 	bl	8005348 <_ZN11ArduinoJson8V730HB226detail4SlotINS1_15ResourceManager8SlotDataEEC1Ev>
 80057f0:	e01a      	b.n	8005828 <_ZN11ArduinoJson8V730HB226detail10MemoryPoolINS1_15ResourceManager8SlotDataEE9allocSlotEv+0x50>
    if (usage_ >= capacity_)
 80057f2:	683b      	ldr	r3, [r7, #0]
 80057f4:	885a      	ldrh	r2, [r3, #2]
 80057f6:	683b      	ldr	r3, [r7, #0]
 80057f8:	881b      	ldrh	r3, [r3, #0]
 80057fa:	429a      	cmp	r2, r3
 80057fc:	d303      	bcc.n	8005806 <_ZN11ArduinoJson8V730HB226detail10MemoryPoolINS1_15ResourceManager8SlotDataEE9allocSlotEv+0x2e>
      return {};
 80057fe:	6878      	ldr	r0, [r7, #4]
 8005800:	f7ff fda2 	bl	8005348 <_ZN11ArduinoJson8V730HB226detail4SlotINS1_15ResourceManager8SlotDataEEC1Ev>
 8005804:	e010      	b.n	8005828 <_ZN11ArduinoJson8V730HB226detail10MemoryPoolINS1_15ResourceManager8SlotDataEE9allocSlotEv+0x50>
    auto index = usage_++;
 8005806:	683b      	ldr	r3, [r7, #0]
 8005808:	885b      	ldrh	r3, [r3, #2]
 800580a:	1c5a      	adds	r2, r3, #1
 800580c:	b291      	uxth	r1, r2
 800580e:	683a      	ldr	r2, [r7, #0]
 8005810:	8051      	strh	r1, [r2, #2]
 8005812:	81fb      	strh	r3, [r7, #14]
    return {slots_ + index, SlotId(index)};
 8005814:	683b      	ldr	r3, [r7, #0]
 8005816:	685a      	ldr	r2, [r3, #4]
 8005818:	89fb      	ldrh	r3, [r7, #14]
 800581a:	00db      	lsls	r3, r3, #3
 800581c:	4413      	add	r3, r2
 800581e:	89fa      	ldrh	r2, [r7, #14]
 8005820:	4619      	mov	r1, r3
 8005822:	6878      	ldr	r0, [r7, #4]
 8005824:	f7ff f988 	bl	8004b38 <_ZN11ArduinoJson8V730HB226detail4SlotINS1_15ResourceManager8SlotDataEEC1EPS4_t>
  }
 8005828:	6878      	ldr	r0, [r7, #4]
 800582a:	3710      	adds	r7, #16
 800582c:	46bd      	mov	sp, r7
 800582e:	bd80      	pop	{r7, pc}

08005830 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE16increaseCapacityEPNS0_9AllocatorE>:

  bool increaseCapacity(Allocator* allocator) {
 8005830:	b580      	push	{r7, lr}
 8005832:	b084      	sub	sp, #16
 8005834:	af00      	add	r7, sp, #0
 8005836:	6078      	str	r0, [r7, #4]
 8005838:	6039      	str	r1, [r7, #0]
    if (capacity_ == maxPools)
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800583e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005842:	d101      	bne.n	8005848 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE16increaseCapacityEPNS0_9AllocatorE+0x18>
      return false;
 8005844:	2300      	movs	r3, #0
 8005846:	e034      	b.n	80058b2 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE16increaseCapacityEPNS0_9AllocatorE+0x82>
    void* newPools;
    auto newCapacity = PoolCount(capacity_ * 2);
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800584c:	005b      	lsls	r3, r3, #1
 800584e:	817b      	strh	r3, [r7, #10]

    if (pools_ == preallocatedPools_) {
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	6a1a      	ldr	r2, [r3, #32]
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	429a      	cmp	r2, r3
 8005858:	d114      	bne.n	8005884 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE16increaseCapacityEPNS0_9AllocatorE+0x54>
      newPools = allocator->allocate(newCapacity * sizeof(Pool));
 800585a:	683b      	ldr	r3, [r7, #0]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	897a      	ldrh	r2, [r7, #10]
 8005862:	00d2      	lsls	r2, r2, #3
 8005864:	4611      	mov	r1, r2
 8005866:	6838      	ldr	r0, [r7, #0]
 8005868:	4798      	blx	r3
 800586a:	60f8      	str	r0, [r7, #12]
      if (!newPools)
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	2b00      	cmp	r3, #0
 8005870:	d101      	bne.n	8005876 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE16increaseCapacityEPNS0_9AllocatorE+0x46>
        return false;
 8005872:	2300      	movs	r3, #0
 8005874:	e01d      	b.n	80058b2 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE16increaseCapacityEPNS0_9AllocatorE+0x82>
      memcpy(newPools, preallocatedPools_, sizeof(preallocatedPools_));
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	2220      	movs	r2, #32
 800587a:	4619      	mov	r1, r3
 800587c:	68f8      	ldr	r0, [r7, #12]
 800587e:	f019 fa4a 	bl	801ed16 <memcpy>
 8005882:	e00f      	b.n	80058a4 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE16increaseCapacityEPNS0_9AllocatorE+0x74>
    } else {
      newPools = allocator->reallocate(pools_, newCapacity * sizeof(Pool));
 8005884:	683b      	ldr	r3, [r7, #0]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	3308      	adds	r3, #8
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	687a      	ldr	r2, [r7, #4]
 800588e:	6a11      	ldr	r1, [r2, #32]
 8005890:	897a      	ldrh	r2, [r7, #10]
 8005892:	00d2      	lsls	r2, r2, #3
 8005894:	6838      	ldr	r0, [r7, #0]
 8005896:	4798      	blx	r3
 8005898:	60f8      	str	r0, [r7, #12]
      if (!newPools)
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	2b00      	cmp	r3, #0
 800589e:	d101      	bne.n	80058a4 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE16increaseCapacityEPNS0_9AllocatorE+0x74>
        return false;
 80058a0:	2300      	movs	r3, #0
 80058a2:	e006      	b.n	80058b2 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE16increaseCapacityEPNS0_9AllocatorE+0x82>
    }

    pools_ = static_cast<Pool*>(newPools);
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	68fa      	ldr	r2, [r7, #12]
 80058a8:	621a      	str	r2, [r3, #32]
    capacity_ = newCapacity;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	897a      	ldrh	r2, [r7, #10]
 80058ae:	84da      	strh	r2, [r3, #38]	@ 0x26
    return true;
 80058b0:	2301      	movs	r3, #1
  }
 80058b2:	4618      	mov	r0, r3
 80058b4:	3710      	adds	r7, #16
 80058b6:	46bd      	mov	sp, r7
 80058b8:	bd80      	pop	{r7, pc}

080058ba <_ZN11ArduinoJson8V730HB226detail10MemoryPoolINS1_15ResourceManager8SlotDataEE6createEtPNS0_9AllocatorE>:
  void create(SlotCount cap, Allocator* allocator) {
 80058ba:	b5b0      	push	{r4, r5, r7, lr}
 80058bc:	b084      	sub	sp, #16
 80058be:	af00      	add	r7, sp, #0
 80058c0:	60f8      	str	r0, [r7, #12]
 80058c2:	460b      	mov	r3, r1
 80058c4:	607a      	str	r2, [r7, #4]
 80058c6:	817b      	strh	r3, [r7, #10]
    slots_ = reinterpret_cast<T*>(allocator->allocate(slotsToBytes(cap)));
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	681c      	ldr	r4, [r3, #0]
 80058ce:	687d      	ldr	r5, [r7, #4]
 80058d0:	897b      	ldrh	r3, [r7, #10]
 80058d2:	4618      	mov	r0, r3
 80058d4:	f7ff fc38 	bl	8005148 <_ZN11ArduinoJson8V730HB226detail10MemoryPoolINS1_15ResourceManager8SlotDataEE12slotsToBytesEt>
 80058d8:	4603      	mov	r3, r0
 80058da:	4619      	mov	r1, r3
 80058dc:	4628      	mov	r0, r5
 80058de:	47a0      	blx	r4
 80058e0:	4602      	mov	r2, r0
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	605a      	str	r2, [r3, #4]
    capacity_ = slots_ ? cap : 0;
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	685b      	ldr	r3, [r3, #4]
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d001      	beq.n	80058f2 <_ZN11ArduinoJson8V730HB226detail10MemoryPoolINS1_15ResourceManager8SlotDataEE6createEtPNS0_9AllocatorE+0x38>
 80058ee:	897a      	ldrh	r2, [r7, #10]
 80058f0:	e000      	b.n	80058f4 <_ZN11ArduinoJson8V730HB226detail10MemoryPoolINS1_15ResourceManager8SlotDataEE6createEtPNS0_9AllocatorE+0x3a>
 80058f2:	2200      	movs	r2, #0
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	801a      	strh	r2, [r3, #0]
    usage_ = 0;
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	2200      	movs	r2, #0
 80058fc:	805a      	strh	r2, [r3, #2]
  }
 80058fe:	bf00      	nop
 8005900:	3710      	adds	r7, #16
 8005902:	46bd      	mov	sp, r7
 8005904:	bdb0      	pop	{r4, r5, r7, pc}

08005906 <_ZN11ArduinoJson8V730HB226detail7pgm_ptrIdEC1EPKd>:
  explicit pgm_ptr(const T* ptr) : ptr_(ptr) {}
 8005906:	b480      	push	{r7}
 8005908:	b083      	sub	sp, #12
 800590a:	af00      	add	r7, sp, #0
 800590c:	6078      	str	r0, [r7, #4]
 800590e:	6039      	str	r1, [r7, #0]
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	683a      	ldr	r2, [r7, #0]
 8005914:	601a      	str	r2, [r3, #0]
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	4618      	mov	r0, r3
 800591a:	370c      	adds	r7, #12
 800591c:	46bd      	mov	sp, r7
 800591e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005922:	4770      	bx	lr

08005924 <_ZN11ArduinoJson8V730HB226detail8pgm_readIdEET_PKS3_>:
inline T pgm_read(const T* p) {
 8005924:	b480      	push	{r7}
 8005926:	b083      	sub	sp, #12
 8005928:	af00      	add	r7, sp, #0
 800592a:	6078      	str	r0, [r7, #4]
  return *p;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005932:	ec43 2b17 	vmov	d7, r2, r3
}
 8005936:	eeb0 0b47 	vmov.f64	d0, d7
 800593a:	370c      	adds	r7, #12
 800593c:	46bd      	mov	sp, r7
 800593e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005942:	4770      	bx	lr

08005944 <_ZN11ArduinoJson8V730HB226detail12stringEqualsINS1_9RamStringES3_EENS1_9enable_ifIXlesrT_11typeSortKeysrT0_11typeSortKeyEbE4typeES5_S6_>:
  return -stringCompare(s2, s1);
}

template <typename TAdaptedString1, typename TAdaptedString2>
enable_if_t<TAdaptedString1::typeSortKey <= TAdaptedString2::typeSortKey, bool>
stringEquals(TAdaptedString1 s1, TAdaptedString2 s2) {
 8005944:	b082      	sub	sp, #8
 8005946:	b590      	push	{r4, r7, lr}
 8005948:	b089      	sub	sp, #36	@ 0x24
 800594a:	af00      	add	r7, sp, #0
 800594c:	1d3c      	adds	r4, r7, #4
 800594e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8005952:	637b      	str	r3, [r7, #52]	@ 0x34
  ARDUINOJSON_ASSERT(!s1.isNull());
  ARDUINOJSON_ASSERT(!s2.isNull());
  size_t size1 = s1.size();
 8005954:	1d3b      	adds	r3, r7, #4
 8005956:	4618      	mov	r0, r3
 8005958:	f7fc fee4 	bl	8002724 <_ZNK11ArduinoJson8V730HB226detail9RamString4sizeEv>
 800595c:	61b8      	str	r0, [r7, #24]
  size_t size2 = s2.size();
 800595e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8005962:	4618      	mov	r0, r3
 8005964:	f7fc fede 	bl	8002724 <_ZNK11ArduinoJson8V730HB226detail9RamString4sizeEv>
 8005968:	6178      	str	r0, [r7, #20]
  if (size1 != size2)
 800596a:	69ba      	ldr	r2, [r7, #24]
 800596c:	697b      	ldr	r3, [r7, #20]
 800596e:	429a      	cmp	r2, r3
 8005970:	d001      	beq.n	8005976 <_ZN11ArduinoJson8V730HB226detail12stringEqualsINS1_9RamStringES3_EENS1_9enable_ifIXlesrT_11typeSortKeysrT0_11typeSortKeyEbE4typeES5_S6_+0x32>
    return false;
 8005972:	2300      	movs	r3, #0
 8005974:	e021      	b.n	80059ba <_ZN11ArduinoJson8V730HB226detail12stringEqualsINS1_9RamStringES3_EENS1_9enable_ifIXlesrT_11typeSortKeysrT0_11typeSortKeyEbE4typeES5_S6_+0x76>
  for (size_t i = 0; i < size1; i++) {
 8005976:	2300      	movs	r3, #0
 8005978:	61fb      	str	r3, [r7, #28]
 800597a:	e019      	b.n	80059b0 <_ZN11ArduinoJson8V730HB226detail12stringEqualsINS1_9RamStringES3_EENS1_9enable_ifIXlesrT_11typeSortKeysrT0_11typeSortKeyEbE4typeES5_S6_+0x6c>
    if (s1[i] != s2[i])
 800597c:	1d3b      	adds	r3, r7, #4
 800597e:	69f9      	ldr	r1, [r7, #28]
 8005980:	4618      	mov	r0, r3
 8005982:	f7fb f9c1 	bl	8000d08 <_ZNK11ArduinoJson8V730HB226detail9RamStringixEj>
 8005986:	4603      	mov	r3, r0
 8005988:	461c      	mov	r4, r3
 800598a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800598e:	69f9      	ldr	r1, [r7, #28]
 8005990:	4618      	mov	r0, r3
 8005992:	f7fb f9b9 	bl	8000d08 <_ZNK11ArduinoJson8V730HB226detail9RamStringixEj>
 8005996:	4603      	mov	r3, r0
 8005998:	429c      	cmp	r4, r3
 800599a:	bf14      	ite	ne
 800599c:	2301      	movne	r3, #1
 800599e:	2300      	moveq	r3, #0
 80059a0:	b2db      	uxtb	r3, r3
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d001      	beq.n	80059aa <_ZN11ArduinoJson8V730HB226detail12stringEqualsINS1_9RamStringES3_EENS1_9enable_ifIXlesrT_11typeSortKeysrT0_11typeSortKeyEbE4typeES5_S6_+0x66>
      return false;
 80059a6:	2300      	movs	r3, #0
 80059a8:	e007      	b.n	80059ba <_ZN11ArduinoJson8V730HB226detail12stringEqualsINS1_9RamStringES3_EENS1_9enable_ifIXlesrT_11typeSortKeysrT0_11typeSortKeyEbE4typeES5_S6_+0x76>
  for (size_t i = 0; i < size1; i++) {
 80059aa:	69fb      	ldr	r3, [r7, #28]
 80059ac:	3301      	adds	r3, #1
 80059ae:	61fb      	str	r3, [r7, #28]
 80059b0:	69fa      	ldr	r2, [r7, #28]
 80059b2:	69bb      	ldr	r3, [r7, #24]
 80059b4:	429a      	cmp	r2, r3
 80059b6:	d3e1      	bcc.n	800597c <_ZN11ArduinoJson8V730HB226detail12stringEqualsINS1_9RamStringES3_EENS1_9enable_ifIXlesrT_11typeSortKeysrT0_11typeSortKeyEbE4typeES5_S6_+0x38>
  }
  return true;
 80059b8:	2301      	movs	r3, #1
}
 80059ba:	4618      	mov	r0, r3
 80059bc:	3724      	adds	r7, #36	@ 0x24
 80059be:	46bd      	mov	sp, r7
 80059c0:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80059c4:	b002      	add	sp, #8
 80059c6:	4770      	bx	lr

080059c8 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS0_11JsonVariantEE7derivedEv>:
  const TDerived& derived() const {
 80059c8:	b480      	push	{r7}
 80059ca:	b083      	sub	sp, #12
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	6078      	str	r0, [r7, #4]
    return static_cast<const TDerived&>(*this);
 80059d0:	687b      	ldr	r3, [r7, #4]
  }
 80059d2:	4618      	mov	r0, r3
 80059d4:	370c      	adds	r7, #12
 80059d6:	46bd      	mov	sp, r7
 80059d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059dc:	4770      	bx	lr

080059de <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerIKNS0_11JsonVariantEEEDTcldtfp_18getResourceManagerEERT_>:
  static auto getResourceManager(TClient& client)
 80059de:	b580      	push	{r7, lr}
 80059e0:	b082      	sub	sp, #8
 80059e2:	af00      	add	r7, sp, #0
 80059e4:	6078      	str	r0, [r7, #4]
    return client.getResourceManager();
 80059e6:	6878      	ldr	r0, [r7, #4]
 80059e8:	f7fd fa79 	bl	8002ede <_ZNK11ArduinoJson8V730HB2211JsonVariant18getResourceManagerEv>
 80059ec:	4603      	mov	r3, r0
  }
 80059ee:	4618      	mov	r0, r3
 80059f0:	3708      	adds	r7, #8
 80059f2:	46bd      	mov	sp, r7
 80059f4:	bd80      	pop	{r7, pc}

080059f6 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataIKNS0_11JsonVariantEEEDTcldtfp_7getDataEERT_>:
  static auto getData(TClient& client) -> decltype(client.getData()) {
 80059f6:	b580      	push	{r7, lr}
 80059f8:	b082      	sub	sp, #8
 80059fa:	af00      	add	r7, sp, #0
 80059fc:	6078      	str	r0, [r7, #4]
    return client.getData();
 80059fe:	6878      	ldr	r0, [r7, #4]
 8005a00:	f7fd fa79 	bl	8002ef6 <_ZNK11ArduinoJson8V730HB2211JsonVariant7getDataEv>
 8005a04:	4603      	mov	r3, r0
  }
 8005a06:	4618      	mov	r0, r3
 8005a08:	3708      	adds	r7, #8
 8005a0a:	46bd      	mov	sp, r7
 8005a0c:	bd80      	pop	{r7, pc}

08005a0e <_ZN11ArduinoJson8V730HB226detail10alias_castIdyEET_T0_>:
T alias_cast(F raw_data) {
 8005a0e:	b480      	push	{r7}
 8005a10:	b085      	sub	sp, #20
 8005a12:	af00      	add	r7, sp, #0
 8005a14:	e9c7 0100 	strd	r0, r1, [r7]
  ac.raw = raw_data;
 8005a18:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005a1c:	e9c7 2302 	strd	r2, r3, [r7, #8]
  return ac.data;
 8005a20:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005a24:	ec43 2b17 	vmov	d7, r2, r3
}
 8005a28:	eeb0 0b47 	vmov.f64	d0, d7
 8005a2c:	3714      	adds	r7, #20
 8005a2e:	46bd      	mov	sp, r7
 8005a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a34:	4770      	bx	lr

08005a36 <_ZN11ArduinoJson8V730HB226detail7pgm_ptrIfEC1EPKf>:
  explicit pgm_ptr(const T* ptr) : ptr_(ptr) {}
 8005a36:	b480      	push	{r7}
 8005a38:	b083      	sub	sp, #12
 8005a3a:	af00      	add	r7, sp, #0
 8005a3c:	6078      	str	r0, [r7, #4]
 8005a3e:	6039      	str	r1, [r7, #0]
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	683a      	ldr	r2, [r7, #0]
 8005a44:	601a      	str	r2, [r3, #0]
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	4618      	mov	r0, r3
 8005a4a:	370c      	adds	r7, #12
 8005a4c:	46bd      	mov	sp, r7
 8005a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a52:	4770      	bx	lr

08005a54 <_ZN11ArduinoJson8V730HB226detail8pgm_readIfEET_PKS3_>:
inline T pgm_read(const T* p) {
 8005a54:	b480      	push	{r7}
 8005a56:	b083      	sub	sp, #12
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	6078      	str	r0, [r7, #4]
  return *p;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	ee07 3a90 	vmov	s15, r3
}
 8005a64:	eeb0 0a67 	vmov.f32	s0, s15
 8005a68:	370c      	adds	r7, #12
 8005a6a:	46bd      	mov	sp, r7
 8005a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a70:	4770      	bx	lr

08005a72 <_ZN11ArduinoJson8V730HB226detail7forwardIRA8_KcEEOT_RNS1_16remove_referenceIS6_E4typeE>:
T&& forward(remove_reference_t<T>& t) noexcept {
 8005a72:	b480      	push	{r7}
 8005a74:	b083      	sub	sp, #12
 8005a76:	af00      	add	r7, sp, #0
 8005a78:	6078      	str	r0, [r7, #4]
  return static_cast<T&&>(t);
 8005a7a:	687b      	ldr	r3, [r7, #4]
}
 8005a7c:	4618      	mov	r0, r3
 8005a7e:	370c      	adds	r7, #12
 8005a80:	46bd      	mov	sp, r7
 8005a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a86:	4770      	bx	lr

08005a88 <_ZN11ArduinoJson8V730HB226detail13StringAdapterIRA8_KcvE5adaptES5_>:
  static AdaptedString adapt(const char (&p)[N]) {
 8005a88:	b580      	push	{r7, lr}
 8005a8a:	b082      	sub	sp, #8
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	6078      	str	r0, [r7, #4]
 8005a90:	6039      	str	r1, [r7, #0]
    return RamString(p, N - 1, true);
 8005a92:	2301      	movs	r3, #1
 8005a94:	2207      	movs	r2, #7
 8005a96:	6839      	ldr	r1, [r7, #0]
 8005a98:	6878      	ldr	r0, [r7, #4]
 8005a9a:	f7fc fe1b 	bl	80026d4 <_ZN11ArduinoJson8V730HB226detail9RamStringC1EPKcjb>
  }
 8005a9e:	6878      	ldr	r0, [r7, #4]
 8005aa0:	3708      	adds	r7, #8
 8005aa2:	46bd      	mov	sp, r7
 8005aa4:	bd80      	pop	{r7, pc}

08005aa6 <_ZN11ArduinoJson8V730HB226detail7forwardIRA7_KcEEOT_RNS1_16remove_referenceIS6_E4typeE>:
T&& forward(remove_reference_t<T>& t) noexcept {
 8005aa6:	b480      	push	{r7}
 8005aa8:	b083      	sub	sp, #12
 8005aaa:	af00      	add	r7, sp, #0
 8005aac:	6078      	str	r0, [r7, #4]
  return static_cast<T&&>(t);
 8005aae:	687b      	ldr	r3, [r7, #4]
}
 8005ab0:	4618      	mov	r0, r3
 8005ab2:	370c      	adds	r7, #12
 8005ab4:	46bd      	mov	sp, r7
 8005ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aba:	4770      	bx	lr

08005abc <_ZN11ArduinoJson8V730HB226detail13StringAdapterIRA7_KcvE5adaptES5_>:
  static AdaptedString adapt(const char (&p)[N]) {
 8005abc:	b580      	push	{r7, lr}
 8005abe:	b082      	sub	sp, #8
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	6078      	str	r0, [r7, #4]
 8005ac4:	6039      	str	r1, [r7, #0]
    return RamString(p, N - 1, true);
 8005ac6:	2301      	movs	r3, #1
 8005ac8:	2206      	movs	r2, #6
 8005aca:	6839      	ldr	r1, [r7, #0]
 8005acc:	6878      	ldr	r0, [r7, #4]
 8005ace:	f7fc fe01 	bl	80026d4 <_ZN11ArduinoJson8V730HB226detail9RamStringC1EPKcjb>
  }
 8005ad2:	6878      	ldr	r0, [r7, #4]
 8005ad4:	3708      	adds	r7, #8
 8005ad6:	46bd      	mov	sp, r7
 8005ad8:	bd80      	pop	{r7, pc}

08005ada <_ZN11ArduinoJson8V730HB226detail7forwardIRA10_KcEEOT_RNS1_16remove_referenceIS6_E4typeE>:
T&& forward(remove_reference_t<T>& t) noexcept {
 8005ada:	b480      	push	{r7}
 8005adc:	b083      	sub	sp, #12
 8005ade:	af00      	add	r7, sp, #0
 8005ae0:	6078      	str	r0, [r7, #4]
  return static_cast<T&&>(t);
 8005ae2:	687b      	ldr	r3, [r7, #4]
}
 8005ae4:	4618      	mov	r0, r3
 8005ae6:	370c      	adds	r7, #12
 8005ae8:	46bd      	mov	sp, r7
 8005aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aee:	4770      	bx	lr

08005af0 <_ZN11ArduinoJson8V730HB226detail13StringAdapterIRA10_KcvE5adaptES5_>:
  static AdaptedString adapt(const char (&p)[N]) {
 8005af0:	b580      	push	{r7, lr}
 8005af2:	b082      	sub	sp, #8
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	6078      	str	r0, [r7, #4]
 8005af8:	6039      	str	r1, [r7, #0]
    return RamString(p, N - 1, true);
 8005afa:	2301      	movs	r3, #1
 8005afc:	2209      	movs	r2, #9
 8005afe:	6839      	ldr	r1, [r7, #0]
 8005b00:	6878      	ldr	r0, [r7, #4]
 8005b02:	f7fc fde7 	bl	80026d4 <_ZN11ArduinoJson8V730HB226detail9RamStringC1EPKcjb>
  }
 8005b06:	6878      	ldr	r0, [r7, #4]
 8005b08:	3708      	adds	r7, #8
 8005b0a:	46bd      	mov	sp, r7
 8005b0c:	bd80      	pop	{r7, pc}

08005b0e <_ZN11ArduinoJson8V730HB229ConverterImvE8fromJsonENS0_16JsonVariantConstE>:
  static T fromJson(JsonVariantConst src) {
 8005b0e:	b580      	push	{r7, lr}
 8005b10:	b084      	sub	sp, #16
 8005b12:	af00      	add	r7, sp, #0
 8005b14:	463b      	mov	r3, r7
 8005b16:	e883 0003 	stmia.w	r3, {r0, r1}
    auto data = getData(src);
 8005b1a:	463b      	mov	r3, r7
 8005b1c:	4618      	mov	r0, r3
 8005b1e:	f7fe ff1f 	bl	8004960 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataINS0_16JsonVariantConstEEEDTcldtfp_7getDataEERT_>
 8005b22:	60f8      	str	r0, [r7, #12]
    auto resources = getResourceManager(src);
 8005b24:	463b      	mov	r3, r7
 8005b26:	4618      	mov	r0, r3
 8005b28:	f7fe ff26 	bl	8004978 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerINS0_16JsonVariantConstEEEDTcldtfp_18getResourceManagerEERT_>
 8005b2c:	60b8      	str	r0, [r7, #8]
    return data ? data->template asIntegral<T>(resources) : T();
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d005      	beq.n	8005b40 <_ZN11ArduinoJson8V730HB229ConverterImvE8fromJsonENS0_16JsonVariantConstE+0x32>
 8005b34:	68b9      	ldr	r1, [r7, #8]
 8005b36:	68f8      	ldr	r0, [r7, #12]
 8005b38:	f000 f902 	bl	8005d40 <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralImEET_PKNS1_15ResourceManagerE>
 8005b3c:	4603      	mov	r3, r0
 8005b3e:	e000      	b.n	8005b42 <_ZN11ArduinoJson8V730HB229ConverterImvE8fromJsonENS0_16JsonVariantConstE+0x34>
 8005b40:	2300      	movs	r3, #0
  }
 8005b42:	4618      	mov	r0, r3
 8005b44:	3710      	adds	r7, #16
 8005b46:	46bd      	mov	sp, r7
 8005b48:	bd80      	pop	{r7, pc}

08005b4a <_ZN11ArduinoJson8V730HB226detail10makeReaderIRPKcEENS1_6ReaderINS1_16remove_referenceIT_E4typeEvEEOS8_>:
#endif

ARDUINOJSON_BEGIN_PRIVATE_NAMESPACE

template <typename TInput>
Reader<remove_reference_t<TInput>> makeReader(TInput&& input) {
 8005b4a:	b580      	push	{r7, lr}
 8005b4c:	b084      	sub	sp, #16
 8005b4e:	af00      	add	r7, sp, #0
 8005b50:	6078      	str	r0, [r7, #4]
  return Reader<remove_reference_t<TInput>>{detail::forward<TInput>(input)};
 8005b52:	6878      	ldr	r0, [r7, #4]
 8005b54:	f7ff fc9c 	bl	8005490 <_ZN11ArduinoJson8V730HB226detail7forwardIRPKcEEOT_RNS1_16remove_referenceIS6_E4typeE>
 8005b58:	4603      	mov	r3, r0
 8005b5a:	681a      	ldr	r2, [r3, #0]
 8005b5c:	f107 030c 	add.w	r3, r7, #12
 8005b60:	4611      	mov	r1, r2
 8005b62:	4618      	mov	r0, r3
 8005b64:	f000 f99e 	bl	8005ea4 <_ZN11ArduinoJson8V730HB226detail6ReaderIPKcvEC1EPKv>
 8005b68:	68fb      	ldr	r3, [r7, #12]
}
 8005b6a:	4618      	mov	r0, r3
 8005b6c:	3710      	adds	r7, #16
 8005b6e:	46bd      	mov	sp, r7
 8005b70:	bd80      	pop	{r7, pc}

08005b72 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEED1Ev>:
class JsonDeserializer {
 8005b72:	b580      	push	{r7, lr}
 8005b74:	b082      	sub	sp, #8
 8005b76:	af00      	add	r7, sp, #0
 8005b78:	6078      	str	r0, [r7, #4]
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	4618      	mov	r0, r3
 8005b7e:	f7fd fd9e 	bl	80036be <_ZN11ArduinoJson8V730HB226detail13StringBuilderD1Ev>
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	4618      	mov	r0, r3
 8005b86:	3708      	adds	r7, #8
 8005b88:	46bd      	mov	sp, r7
 8005b8a:	bd80      	pop	{r7, pc}

08005b8c <_ZN11ArduinoJson8V730HB226detail13doDeserializeINS1_16JsonDeserializerERNS0_12JsonDocumentENS1_6ReaderIPKcvEENS1_22DeserializationOptionsINS1_14AllowAllFilterEEEEENS0_20DeserializationErrorEOT0_T1_T2_>:
DeserializationError doDeserialize(TDestination&& dst, TReader reader,
 8005b8c:	b590      	push	{r4, r7, lr}
 8005b8e:	b0a1      	sub	sp, #132	@ 0x84
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	60f8      	str	r0, [r7, #12]
 8005b94:	60b9      	str	r1, [r7, #8]
 8005b96:	80ba      	strh	r2, [r7, #4]
  auto data = VariantAttorney::getOrCreateData(dst);
 8005b98:	68f8      	ldr	r0, [r7, #12]
 8005b9a:	f000 f999 	bl	8005ed0 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney15getOrCreateDataINS0_12JsonDocumentEEEPNS1_11VariantDataERT_>
 8005b9e:	67f8      	str	r0, [r7, #124]	@ 0x7c
  if (!data)
 8005ba0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d107      	bne.n	8005bb6 <_ZN11ArduinoJson8V730HB226detail13doDeserializeINS1_16JsonDeserializerERNS0_12JsonDocumentENS1_6ReaderIPKcvEENS1_22DeserializationOptionsINS1_14AllowAllFilterEEEEENS0_20DeserializationErrorEOT0_T1_T2_+0x2a>
    return DeserializationError::NoMemory;
 8005ba6:	f107 0318 	add.w	r3, r7, #24
 8005baa:	2104      	movs	r1, #4
 8005bac:	4618      	mov	r0, r3
 8005bae:	f7fd ff08 	bl	80039c2 <_ZN11ArduinoJson8V730HB2220DeserializationErrorC1ENS1_4CodeE>
 8005bb2:	7e3b      	ldrb	r3, [r7, #24]
 8005bb4:	e01f      	b.n	8005bf6 <_ZN11ArduinoJson8V730HB226detail13doDeserializeINS1_16JsonDeserializerERNS0_12JsonDocumentENS1_6ReaderIPKcvEENS1_22DeserializationOptionsINS1_14AllowAllFilterEEEEENS0_20DeserializationErrorEOT0_T1_T2_+0x6a>
  auto resources = VariantAttorney::getResourceManager(dst);
 8005bb6:	68f8      	ldr	r0, [r7, #12]
 8005bb8:	f000 f996 	bl	8005ee8 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerINS0_12JsonDocumentEEEDTcldtfp_18getResourceManagerEERT_>
 8005bbc:	67b8      	str	r0, [r7, #120]	@ 0x78
  dst.clear();
 8005bbe:	68f8      	ldr	r0, [r7, #12]
 8005bc0:	f7fd fac5 	bl	800314e <_ZN11ArduinoJson8V730HB2212JsonDocument5clearEv>
  auto err = TDeserializer<TReader>(resources, reader)
 8005bc4:	f107 031c 	add.w	r3, r7, #28
 8005bc8:	68ba      	ldr	r2, [r7, #8]
 8005bca:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8005bcc:	4618      	mov	r0, r3
 8005bce:	f000 f997 	bl	8005f00 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEEC1EPNS1_15ResourceManagerES6_>
                 .parse(*data, options.filter, options.nestingLimit);
 8005bd2:	f107 001c 	add.w	r0, r7, #28
 8005bd6:	797b      	ldrb	r3, [r7, #5]
 8005bd8:	4622      	mov	r2, r4
 8005bda:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005bdc:	f000 f9ac 	bl	8005f38 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE5parseINS1_14AllowAllFilterEEENS0_20DeserializationErrorERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE>
 8005be0:	4603      	mov	r3, r0
 8005be2:	753b      	strb	r3, [r7, #20]
  auto err = TDeserializer<TReader>(resources, reader)
 8005be4:	f107 031c 	add.w	r3, r7, #28
 8005be8:	4618      	mov	r0, r3
 8005bea:	f7ff ffc2 	bl	8005b72 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEED1Ev>
  shrinkJsonDocument(dst);
 8005bee:	68f8      	ldr	r0, [r7, #12]
 8005bf0:	f7fd ff97 	bl	8003b22 <_ZN11ArduinoJson8V730HB226detail18shrinkJsonDocumentERNS0_12JsonDocumentE>
  return err;
 8005bf4:	7d3b      	ldrb	r3, [r7, #20]
}
 8005bf6:	4618      	mov	r0, r3
 8005bf8:	3784      	adds	r7, #132	@ 0x84
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	bd90      	pop	{r4, r7, pc}

08005bfe <_ZSt19__iterator_categoryIPKcENSt15iterator_traitsIT_E17iterator_categoryERKS3_>:
   *  sugar for internal library use only.
  */
  template<typename _Iter>
    inline _GLIBCXX_CONSTEXPR
    typename iterator_traits<_Iter>::iterator_category
    __iterator_category(const _Iter&)
 8005bfe:	b480      	push	{r7}
 8005c00:	b083      	sub	sp, #12
 8005c02:	af00      	add	r7, sp, #0
 8005c04:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 8005c06:	4618      	mov	r0, r3
 8005c08:	370c      	adds	r7, #12
 8005c0a:	46bd      	mov	sp, r7
 8005c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c10:	4770      	bx	lr

08005c12 <_ZSt10__distanceIPKcENSt15iterator_traitsIT_E15difference_typeES3_S3_St26random_access_iterator_tag>:
    __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,
 8005c12:	b480      	push	{r7}
 8005c14:	b085      	sub	sp, #20
 8005c16:	af00      	add	r7, sp, #0
 8005c18:	60f8      	str	r0, [r7, #12]
 8005c1a:	60b9      	str	r1, [r7, #8]
 8005c1c:	713a      	strb	r2, [r7, #4]
      return __last - __first;
 8005c1e:	68ba      	ldr	r2, [r7, #8]
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	1ad3      	subs	r3, r2, r3
    }
 8005c24:	4618      	mov	r0, r3
 8005c26:	3714      	adds	r7, #20
 8005c28:	46bd      	mov	sp, r7
 8005c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2e:	4770      	bx	lr

08005c30 <_ZNK11ArduinoJson8V730HB226detail10ObjectData7findKeyINS1_9RamStringEEENS1_18CollectionIteratorET_PKNS1_15ResourceManagerE>:
    return data;
  return addMember(key, resources);
}

template <typename TAdaptedString>
inline ObjectData::iterator ObjectData::findKey(
 8005c30:	b082      	sub	sp, #8
 8005c32:	b580      	push	{r7, lr}
 8005c34:	b08e      	sub	sp, #56	@ 0x38
 8005c36:	af02      	add	r7, sp, #8
 8005c38:	6078      	str	r0, [r7, #4]
 8005c3a:	6039      	str	r1, [r7, #0]
 8005c3c:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 8005c40:	e881 000c 	stmia.w	r1, {r2, r3}
    TAdaptedString key, const ResourceManager* resources) const {
  if (key.isNull())
 8005c44:	f107 0038 	add.w	r0, r7, #56	@ 0x38
 8005c48:	f7fc fd5b 	bl	8002702 <_ZNK11ArduinoJson8V730HB226detail9RamString6isNullEv>
 8005c4c:	4603      	mov	r3, r0
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d003      	beq.n	8005c5a <_ZNK11ArduinoJson8V730HB226detail10ObjectData7findKeyINS1_9RamStringEEENS1_18CollectionIteratorET_PKNS1_15ResourceManagerE+0x2a>
    return iterator();
 8005c52:	6878      	ldr	r0, [r7, #4]
 8005c54:	f7fc fe2a 	bl	80028ac <_ZN11ArduinoJson8V730HB226detail18CollectionIteratorC1Ev>
 8005c58:	e05a      	b.n	8005d10 <_ZNK11ArduinoJson8V730HB226detail10ObjectData7findKeyINS1_9RamStringEEENS1_18CollectionIteratorET_PKNS1_15ResourceManagerE+0xe0>
  bool isKey = true;
 8005c5a:	2301      	movs	r3, #1
 8005c5c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  for (auto it = createIterator(resources); !it.done(); it.next(resources)) {
 8005c60:	6839      	ldr	r1, [r7, #0]
 8005c62:	f107 030c 	add.w	r3, r7, #12
 8005c66:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005c68:	4618      	mov	r0, r3
 8005c6a:	f7fd fb13 	bl	8003294 <_ZNK11ArduinoJson8V730HB226detail14CollectionData14createIteratorEPKNS1_15ResourceManagerE>
 8005c6e:	e041      	b.n	8005cf4 <_ZNK11ArduinoJson8V730HB226detail10ObjectData7findKeyINS1_9RamStringEEENS1_18CollectionIteratorET_PKNS1_15ResourceManagerE+0xc4>
    if (isKey && stringEquals(key, adaptString(it->asString())))
 8005c70:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d025      	beq.n	8005cc4 <_ZNK11ArduinoJson8V730HB226detail10ObjectData7findKeyINS1_9RamStringEEENS1_18CollectionIteratorET_PKNS1_15ResourceManagerE+0x94>
 8005c78:	f107 030c 	add.w	r3, r7, #12
 8005c7c:	4618      	mov	r0, r3
 8005c7e:	f7fc fe4c 	bl	800291a <_ZN11ArduinoJson8V730HB226detail18CollectionIteratorptEv>
 8005c82:	4602      	mov	r2, r0
 8005c84:	f107 0314 	add.w	r3, r7, #20
 8005c88:	4611      	mov	r1, r2
 8005c8a:	4618      	mov	r0, r3
 8005c8c:	f7fc ff12 	bl	8002ab4 <_ZNK11ArduinoJson8V730HB226detail11VariantData8asStringEv>
 8005c90:	f107 0320 	add.w	r3, r7, #32
 8005c94:	f107 0214 	add.w	r2, r7, #20
 8005c98:	4611      	mov	r1, r2
 8005c9a:	4618      	mov	r0, r3
 8005c9c:	f000 f985 	bl	8005faa <_ZN11ArduinoJson8V730HB226detail11adaptStringINS0_10JsonStringEEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES7_NS1_9remove_cvINS1_16remove_referenceIS7_E4typeEE4typeEE4typeEvE13AdaptedStringEOS7_>
 8005ca0:	466a      	mov	r2, sp
 8005ca2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005ca6:	e893 0003 	ldmia.w	r3, {r0, r1}
 8005caa:	e882 0003 	stmia.w	r2, {r0, r1}
 8005cae:	6a3b      	ldr	r3, [r7, #32]
 8005cb0:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 8005cb4:	ca07      	ldmia	r2, {r0, r1, r2}
 8005cb6:	f7ff fe45 	bl	8005944 <_ZN11ArduinoJson8V730HB226detail12stringEqualsINS1_9RamStringES3_EENS1_9enable_ifIXlesrT_11typeSortKeysrT0_11typeSortKeyEbE4typeES5_S6_>
 8005cba:	4603      	mov	r3, r0
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d001      	beq.n	8005cc4 <_ZNK11ArduinoJson8V730HB226detail10ObjectData7findKeyINS1_9RamStringEEENS1_18CollectionIteratorET_PKNS1_15ResourceManagerE+0x94>
 8005cc0:	2301      	movs	r3, #1
 8005cc2:	e000      	b.n	8005cc6 <_ZNK11ArduinoJson8V730HB226detail10ObjectData7findKeyINS1_9RamStringEEENS1_18CollectionIteratorET_PKNS1_15ResourceManagerE+0x96>
 8005cc4:	2300      	movs	r3, #0
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d008      	beq.n	8005cdc <_ZNK11ArduinoJson8V730HB226detail10ObjectData7findKeyINS1_9RamStringEEENS1_18CollectionIteratorET_PKNS1_15ResourceManagerE+0xac>
      return it;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	461a      	mov	r2, r3
 8005cce:	f107 030c 	add.w	r3, r7, #12
 8005cd2:	e893 0003 	ldmia.w	r3, {r0, r1}
 8005cd6:	e882 0003 	stmia.w	r2, {r0, r1}
    isKey = !isKey;
  }
  return iterator();
}
 8005cda:	e019      	b.n	8005d10 <_ZNK11ArduinoJson8V730HB226detail10ObjectData7findKeyINS1_9RamStringEEENS1_18CollectionIteratorET_PKNS1_15ResourceManagerE+0xe0>
    isKey = !isKey;
 8005cdc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005ce0:	f083 0301 	eor.w	r3, r3, #1
 8005ce4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  for (auto it = createIterator(resources); !it.done(); it.next(resources)) {
 8005ce8:	f107 030c 	add.w	r3, r7, #12
 8005cec:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005cee:	4618      	mov	r0, r3
 8005cf0:	f7fd faad 	bl	800324e <_ZN11ArduinoJson8V730HB226detail18CollectionIterator4nextEPKNS1_15ResourceManagerE>
 8005cf4:	f107 030c 	add.w	r3, r7, #12
 8005cf8:	4618      	mov	r0, r3
 8005cfa:	f7fc fde9 	bl	80028d0 <_ZNK11ArduinoJson8V730HB226detail18CollectionIterator4doneEv>
 8005cfe:	4603      	mov	r3, r0
 8005d00:	f083 0301 	eor.w	r3, r3, #1
 8005d04:	b2db      	uxtb	r3, r3
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d1b2      	bne.n	8005c70 <_ZNK11ArduinoJson8V730HB226detail10ObjectData7findKeyINS1_9RamStringEEENS1_18CollectionIteratorET_PKNS1_15ResourceManagerE+0x40>
  return iterator();
 8005d0a:	6878      	ldr	r0, [r7, #4]
 8005d0c:	f7fc fdce 	bl	80028ac <_ZN11ArduinoJson8V730HB226detail18CollectionIteratorC1Ev>
}
 8005d10:	6878      	ldr	r0, [r7, #4]
 8005d12:	3730      	adds	r7, #48	@ 0x30
 8005d14:	46bd      	mov	sp, r7
 8005d16:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005d1a:	b002      	add	sp, #8
 8005d1c:	4770      	bx	lr

08005d1e <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEE18getResourceManagerEv>:
  ResourceManager* getResourceManager() const {
 8005d1e:	b580      	push	{r7, lr}
 8005d20:	b082      	sub	sp, #8
 8005d22:	af00      	add	r7, sp, #0
 8005d24:	6078      	str	r0, [r7, #4]
    return VariantAttorney::getResourceManager(derived());
 8005d26:	6878      	ldr	r0, [r7, #4]
 8005d28:	f000 f954 	bl	8005fd4 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEE7derivedEv>
 8005d2c:	4603      	mov	r3, r0
 8005d2e:	4618      	mov	r0, r3
 8005d30:	f000 f95b 	bl	8005fea <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerIKNS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEEDTcldtfp_18getResourceManagerEERT_>
 8005d34:	4603      	mov	r3, r0
  }
 8005d36:	4618      	mov	r0, r3
 8005d38:	3708      	adds	r7, #8
 8005d3a:	46bd      	mov	sp, r7
 8005d3c:	bd80      	pop	{r7, pc}
	...

08005d40 <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralImEET_PKNS1_15ResourceManagerE>:
  T asIntegral(const ResourceManager* resources) const {
 8005d40:	b580      	push	{r7, lr}
 8005d42:	b084      	sub	sp, #16
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	6078      	str	r0, [r7, #4]
 8005d48:	6039      	str	r1, [r7, #0]
    auto extension = getExtension(resources);
 8005d4a:	6839      	ldr	r1, [r7, #0]
 8005d4c:	6878      	ldr	r0, [r7, #4]
 8005d4e:	f7fd fe1d 	bl	800398c <_ZNK11ArduinoJson8V730HB226detail11VariantData12getExtensionEPKNS1_15ResourceManagerE>
 8005d52:	60f8      	str	r0, [r7, #12]
    switch (type_) {
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	791b      	ldrb	r3, [r3, #4]
 8005d58:	3b04      	subs	r3, #4
 8005d5a:	2b1a      	cmp	r3, #26
 8005d5c:	d87c      	bhi.n	8005e58 <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralImEET_PKNS1_15ResourceManagerE+0x118>
 8005d5e:	a201      	add	r2, pc, #4	@ (adr r2, 8005d64 <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralImEET_PKNS1_15ResourceManagerE+0x24>)
 8005d60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d64:	08005e17 	.word	0x08005e17
 8005d68:	08005e25 	.word	0x08005e25
 8005d6c:	08005dd1 	.word	0x08005dd1
 8005d70:	08005e59 	.word	0x08005e59
 8005d74:	08005e59 	.word	0x08005e59
 8005d78:	08005e59 	.word	0x08005e59
 8005d7c:	08005dd7 	.word	0x08005dd7
 8005d80:	08005e59 	.word	0x08005e59
 8005d84:	08005de5 	.word	0x08005de5
 8005d88:	08005e59 	.word	0x08005e59
 8005d8c:	08005e35 	.word	0x08005e35
 8005d90:	08005e59 	.word	0x08005e59
 8005d94:	08005e59 	.word	0x08005e59
 8005d98:	08005e59 	.word	0x08005e59
 8005d9c:	08005e59 	.word	0x08005e59
 8005da0:	08005e59 	.word	0x08005e59
 8005da4:	08005e59 	.word	0x08005e59
 8005da8:	08005e59 	.word	0x08005e59
 8005dac:	08005e59 	.word	0x08005e59
 8005db0:	08005e59 	.word	0x08005e59
 8005db4:	08005e59 	.word	0x08005e59
 8005db8:	08005e59 	.word	0x08005e59
 8005dbc:	08005df3 	.word	0x08005df3
 8005dc0:	08005e59 	.word	0x08005e59
 8005dc4:	08005e05 	.word	0x08005e05
 8005dc8:	08005e59 	.word	0x08005e59
 8005dcc:	08005e47 	.word	0x08005e47
        return content_.asBoolean;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	781b      	ldrb	r3, [r3, #0]
 8005dd4:	e041      	b.n	8005e5a <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralImEET_PKNS1_15ResourceManagerE+0x11a>
        return convertNumber<T>(content_.asUint32);
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	4618      	mov	r0, r3
 8005ddc:	f000 f921 	bl	8006022 <_ZN11ArduinoJson8V730HB226detail13convertNumberImmEET_T0_>
 8005de0:	4603      	mov	r3, r0
 8005de2:	e03a      	b.n	8005e5a <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralImEET_PKNS1_15ResourceManagerE+0x11a>
        return convertNumber<T>(content_.asInt32);
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	4618      	mov	r0, r3
 8005dea:	f000 f92b 	bl	8006044 <_ZN11ArduinoJson8V730HB226detail13convertNumberImlEET_T0_>
 8005dee:	4603      	mov	r3, r0
 8005df0:	e033      	b.n	8005e5a <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralImEET_PKNS1_15ResourceManagerE+0x11a>
        return convertNumber<T>(extension->asUint64);
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005df8:	4610      	mov	r0, r2
 8005dfa:	4619      	mov	r1, r3
 8005dfc:	f000 f933 	bl	8006066 <_ZN11ArduinoJson8V730HB226detail13convertNumberImyEET_T0_>
 8005e00:	4603      	mov	r3, r0
 8005e02:	e02a      	b.n	8005e5a <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralImEET_PKNS1_15ResourceManagerE+0x11a>
        return convertNumber<T>(extension->asInt64);
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e0a:	4610      	mov	r0, r2
 8005e0c:	4619      	mov	r1, r3
 8005e0e:	f000 f93d 	bl	800608c <_ZN11ArduinoJson8V730HB226detail13convertNumberImxEET_T0_>
 8005e12:	4603      	mov	r3, r0
 8005e14:	e021      	b.n	8005e5a <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralImEET_PKNS1_15ResourceManagerE+0x11a>
        return parseNumber<T>(content_.asLinkedString);
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	4618      	mov	r0, r3
 8005e1c:	f000 f949 	bl	80060b2 <_ZN11ArduinoJson8V730HB226detail11parseNumberImEET_PKc>
 8005e20:	4603      	mov	r3, r0
 8005e22:	e01a      	b.n	8005e5a <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralImEET_PKNS1_15ResourceManagerE+0x11a>
        return parseNumber<T>(content_.asOwnedString->data);
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	3308      	adds	r3, #8
 8005e2a:	4618      	mov	r0, r3
 8005e2c:	f000 f941 	bl	80060b2 <_ZN11ArduinoJson8V730HB226detail11parseNumberImEET_PKc>
 8005e30:	4603      	mov	r3, r0
 8005e32:	e012      	b.n	8005e5a <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralImEET_PKNS1_15ResourceManagerE+0x11a>
        return convertNumber<T>(content_.asFloat);
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	edd3 7a00 	vldr	s15, [r3]
 8005e3a:	eeb0 0a67 	vmov.f32	s0, s15
 8005e3e:	f000 f94c 	bl	80060da <_ZN11ArduinoJson8V730HB226detail13convertNumberImfEET_T0_>
 8005e42:	4603      	mov	r3, r0
 8005e44:	e009      	b.n	8005e5a <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralImEET_PKNS1_15ResourceManagerE+0x11a>
        return convertNumber<T>(extension->asDouble);
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	ed93 7b00 	vldr	d7, [r3]
 8005e4c:	eeb0 0b47 	vmov.f64	d0, d7
 8005e50:	f000 f95b 	bl	800610a <_ZN11ArduinoJson8V730HB226detail13convertNumberImdEET_T0_>
 8005e54:	4603      	mov	r3, r0
 8005e56:	e000      	b.n	8005e5a <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralImEET_PKNS1_15ResourceManagerE+0x11a>
        return 0;
 8005e58:	2300      	movs	r3, #0
  }
 8005e5a:	4618      	mov	r0, r3
 8005e5c:	3710      	adds	r7, #16
 8005e5e:	46bd      	mov	sp, r7
 8005e60:	bd80      	pop	{r7, pc}
 8005e62:	bf00      	nop

08005e64 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentENS1_9RamStringEEEE7getDataEv>:
  VariantData* getData() const {
 8005e64:	b580      	push	{r7, lr}
 8005e66:	b082      	sub	sp, #8
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	6078      	str	r0, [r7, #4]
    return VariantAttorney::getData(derived());
 8005e6c:	6878      	ldr	r0, [r7, #4]
 8005e6e:	f000 f964 	bl	800613a <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentENS1_9RamStringEEEE7derivedEv>
 8005e72:	4603      	mov	r3, r0
 8005e74:	4618      	mov	r0, r3
 8005e76:	f000 f96b 	bl	8006150 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataIKNS1_11MemberProxyIRNS0_12JsonDocumentENS1_9RamStringEEEEEDTcldtfp_7getDataEERT_>
 8005e7a:	4603      	mov	r3, r0
  }
 8005e7c:	4618      	mov	r0, r3
 8005e7e:	3708      	adds	r7, #8
 8005e80:	46bd      	mov	sp, r7
 8005e82:	bd80      	pop	{r7, pc}

08005e84 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentENS1_9RamStringEEEE18getResourceManagerEv>:
  ResourceManager* getResourceManager() const {
 8005e84:	b580      	push	{r7, lr}
 8005e86:	b082      	sub	sp, #8
 8005e88:	af00      	add	r7, sp, #0
 8005e8a:	6078      	str	r0, [r7, #4]
    return VariantAttorney::getResourceManager(derived());
 8005e8c:	6878      	ldr	r0, [r7, #4]
 8005e8e:	f000 f954 	bl	800613a <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentENS1_9RamStringEEEE7derivedEv>
 8005e92:	4603      	mov	r3, r0
 8005e94:	4618      	mov	r0, r3
 8005e96:	f000 f967 	bl	8006168 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerIKNS1_11MemberProxyIRNS0_12JsonDocumentENS1_9RamStringEEEEEDTcldtfp_18getResourceManagerEERT_>
 8005e9a:	4603      	mov	r3, r0
  }
 8005e9c:	4618      	mov	r0, r3
 8005e9e:	3708      	adds	r7, #8
 8005ea0:	46bd      	mov	sp, r7
 8005ea2:	bd80      	pop	{r7, pc}

08005ea4 <_ZN11ArduinoJson8V730HB226detail6ReaderIPKcvEC1EPKv>:
template <typename TSource>
struct Reader<TSource*, enable_if_t<IsCharOrVoid<TSource>::value>> {
  const char* ptr_;

 public:
  explicit Reader(const void* ptr)
 8005ea4:	b480      	push	{r7}
 8005ea6:	b083      	sub	sp, #12
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	6078      	str	r0, [r7, #4]
 8005eac:	6039      	str	r1, [r7, #0]
      : ptr_(ptr ? reinterpret_cast<const char*>(ptr) : "") {}
 8005eae:	683b      	ldr	r3, [r7, #0]
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d001      	beq.n	8005eb8 <_ZN11ArduinoJson8V730HB226detail6ReaderIPKcvEC1EPKv+0x14>
 8005eb4:	683b      	ldr	r3, [r7, #0]
 8005eb6:	e000      	b.n	8005eba <_ZN11ArduinoJson8V730HB226detail6ReaderIPKcvEC1EPKv+0x16>
 8005eb8:	4b04      	ldr	r3, [pc, #16]	@ (8005ecc <_ZN11ArduinoJson8V730HB226detail6ReaderIPKcvEC1EPKv+0x28>)
 8005eba:	687a      	ldr	r2, [r7, #4]
 8005ebc:	6013      	str	r3, [r2, #0]
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	4618      	mov	r0, r3
 8005ec2:	370c      	adds	r7, #12
 8005ec4:	46bd      	mov	sp, r7
 8005ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eca:	4770      	bx	lr
 8005ecc:	0801f848 	.word	0x0801f848

08005ed0 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney15getOrCreateDataINS0_12JsonDocumentEEEPNS1_11VariantDataERT_>:

  template <typename TClient>
  static VariantData* getOrCreateData(TClient& client) {
 8005ed0:	b580      	push	{r7, lr}
 8005ed2:	b082      	sub	sp, #8
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	6078      	str	r0, [r7, #4]
    return client.getOrCreateData();
 8005ed8:	6878      	ldr	r0, [r7, #4]
 8005eda:	f7fd f960 	bl	800319e <_ZN11ArduinoJson8V730HB2212JsonDocument15getOrCreateDataEv>
 8005ede:	4603      	mov	r3, r0
  }
 8005ee0:	4618      	mov	r0, r3
 8005ee2:	3708      	adds	r7, #8
 8005ee4:	46bd      	mov	sp, r7
 8005ee6:	bd80      	pop	{r7, pc}

08005ee8 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerINS0_12JsonDocumentEEEDTcldtfp_18getResourceManagerEERT_>:
  static auto getResourceManager(TClient& client)
 8005ee8:	b580      	push	{r7, lr}
 8005eea:	b082      	sub	sp, #8
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	6078      	str	r0, [r7, #4]
    return client.getResourceManager();
 8005ef0:	6878      	ldr	r0, [r7, #4]
 8005ef2:	f7fd f93d 	bl	8003170 <_ZN11ArduinoJson8V730HB2212JsonDocument18getResourceManagerEv>
 8005ef6:	4603      	mov	r3, r0
  }
 8005ef8:	4618      	mov	r0, r3
 8005efa:	3708      	adds	r7, #8
 8005efc:	46bd      	mov	sp, r7
 8005efe:	bd80      	pop	{r7, pc}

08005f00 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEEC1EPNS1_15ResourceManagerES6_>:
  JsonDeserializer(ResourceManager* resources, TReader reader)
 8005f00:	b580      	push	{r7, lr}
 8005f02:	b084      	sub	sp, #16
 8005f04:	af00      	add	r7, sp, #0
 8005f06:	60f8      	str	r0, [r7, #12]
 8005f08:	60b9      	str	r1, [r7, #8]
 8005f0a:	607a      	str	r2, [r7, #4]
      : stringBuilder_(resources),
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	68b9      	ldr	r1, [r7, #8]
 8005f10:	4618      	mov	r0, r3
 8005f12:	f7fd fbbf 	bl	8003694 <_ZN11ArduinoJson8V730HB226detail13StringBuilderC1EPNS1_15ResourceManagerE>
        foundSomething_(false),
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	2200      	movs	r2, #0
 8005f1a:	731a      	strb	r2, [r3, #12]
        latch_(reader),
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	3310      	adds	r3, #16
 8005f20:	6879      	ldr	r1, [r7, #4]
 8005f22:	4618      	mov	r0, r3
 8005f24:	f000 f92c 	bl	8006180 <_ZN11ArduinoJson8V730HB226detail5LatchINS1_6ReaderIPKcvEEEC1ES6_>
        resources_(resources) {}
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	68ba      	ldr	r2, [r7, #8]
 8005f2c:	619a      	str	r2, [r3, #24]
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	4618      	mov	r0, r3
 8005f32:	3710      	adds	r7, #16
 8005f34:	46bd      	mov	sp, r7
 8005f36:	bd80      	pop	{r7, pc}

08005f38 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE5parseINS1_14AllowAllFilterEEENS0_20DeserializationErrorERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE>:
  DeserializationError parse(VariantData& variant, TFilter filter,
 8005f38:	b590      	push	{r4, r7, lr}
 8005f3a:	b089      	sub	sp, #36	@ 0x24
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	60f8      	str	r0, [r7, #12]
 8005f40:	60b9      	str	r1, [r7, #8]
 8005f42:	713a      	strb	r2, [r7, #4]
 8005f44:	703b      	strb	r3, [r7, #0]
    err = parseVariant(variant, filter, nestingLimit);
 8005f46:	783b      	ldrb	r3, [r7, #0]
 8005f48:	4622      	mov	r2, r4
 8005f4a:	68b9      	ldr	r1, [r7, #8]
 8005f4c:	68f8      	ldr	r0, [r7, #12]
 8005f4e:	f000 f929 	bl	80061a4 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE>
 8005f52:	4603      	mov	r3, r0
 8005f54:	75fb      	strb	r3, [r7, #23]
    if (!err && latch_.last() != 0 && variant.isFloat()) {
 8005f56:	7dfb      	ldrb	r3, [r7, #23]
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d10f      	bne.n	8005f7c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE5parseINS1_14AllowAllFilterEEENS0_20DeserializationErrorERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x44>
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	3310      	adds	r3, #16
 8005f60:	4618      	mov	r0, r3
 8005f62:	f000 fa0d 	bl	8006380 <_ZNK11ArduinoJson8V730HB226detail5LatchINS1_6ReaderIPKcvEEE4lastEv>
 8005f66:	4603      	mov	r3, r0
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d007      	beq.n	8005f7c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE5parseINS1_14AllowAllFilterEEENS0_20DeserializationErrorERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x44>
 8005f6c:	68b8      	ldr	r0, [r7, #8]
 8005f6e:	f7fc fde8 	bl	8002b42 <_ZNK11ArduinoJson8V730HB226detail11VariantData7isFloatEv>
 8005f72:	4603      	mov	r3, r0
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d001      	beq.n	8005f7c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE5parseINS1_14AllowAllFilterEEENS0_20DeserializationErrorERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x44>
 8005f78:	2301      	movs	r3, #1
 8005f7a:	e000      	b.n	8005f7e <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE5parseINS1_14AllowAllFilterEEENS0_20DeserializationErrorERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x46>
 8005f7c:	2300      	movs	r3, #0
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d007      	beq.n	8005f92 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE5parseINS1_14AllowAllFilterEEENS0_20DeserializationErrorERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x5a>
      return DeserializationError::InvalidInput;
 8005f82:	f107 0318 	add.w	r3, r7, #24
 8005f86:	2103      	movs	r1, #3
 8005f88:	4618      	mov	r0, r3
 8005f8a:	f7fd fd1a 	bl	80039c2 <_ZN11ArduinoJson8V730HB2220DeserializationErrorC1ENS1_4CodeE>
 8005f8e:	7e3b      	ldrb	r3, [r7, #24]
 8005f90:	e007      	b.n	8005fa2 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE5parseINS1_14AllowAllFilterEEENS0_20DeserializationErrorERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x6a>
    return err;
 8005f92:	7dfa      	ldrb	r2, [r7, #23]
 8005f94:	f107 031c 	add.w	r3, r7, #28
 8005f98:	4611      	mov	r1, r2
 8005f9a:	4618      	mov	r0, r3
 8005f9c:	f7fd fd11 	bl	80039c2 <_ZN11ArduinoJson8V730HB2220DeserializationErrorC1ENS1_4CodeE>
 8005fa0:	7f3b      	ldrb	r3, [r7, #28]
  }
 8005fa2:	4618      	mov	r0, r3
 8005fa4:	3724      	adds	r7, #36	@ 0x24
 8005fa6:	46bd      	mov	sp, r7
 8005fa8:	bd90      	pop	{r4, r7, pc}

08005faa <_ZN11ArduinoJson8V730HB226detail11adaptStringINS0_10JsonStringEEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES7_NS1_9remove_cvINS1_16remove_referenceIS7_E4typeEE4typeEE4typeEvE13AdaptedStringEOS7_>:
AdaptedString<TString> adaptString(TString&& s) {
 8005faa:	b580      	push	{r7, lr}
 8005fac:	b082      	sub	sp, #8
 8005fae:	af00      	add	r7, sp, #0
 8005fb0:	6078      	str	r0, [r7, #4]
 8005fb2:	6039      	str	r1, [r7, #0]
  return StringAdapterFor<TString>::adapt(detail::forward<TString>(s));
 8005fb4:	6838      	ldr	r0, [r7, #0]
 8005fb6:	f000 f9ef 	bl	8006398 <_ZN11ArduinoJson8V730HB226detail7forwardINS0_10JsonStringEEEOT_RNS1_16remove_referenceIS4_E4typeE>
 8005fba:	4603      	mov	r3, r0
 8005fbc:	4618      	mov	r0, r3
 8005fbe:	f7fc fc6a 	bl	8002896 <_ZN11ArduinoJson8V730HB226detail13StringAdapterINS0_10JsonStringEvE5adaptERKS3_>
 8005fc2:	4602      	mov	r2, r0
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	ca07      	ldmia	r2, {r0, r1, r2}
 8005fc8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
}
 8005fcc:	6878      	ldr	r0, [r7, #4]
 8005fce:	3708      	adds	r7, #8
 8005fd0:	46bd      	mov	sp, r7
 8005fd2:	bd80      	pop	{r7, pc}

08005fd4 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEE7derivedEv>:
  const TDerived& derived() const {
 8005fd4:	b480      	push	{r7}
 8005fd6:	b083      	sub	sp, #12
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	6078      	str	r0, [r7, #4]
    return static_cast<const TDerived&>(*this);
 8005fdc:	687b      	ldr	r3, [r7, #4]
  }
 8005fde:	4618      	mov	r0, r3
 8005fe0:	370c      	adds	r7, #12
 8005fe2:	46bd      	mov	sp, r7
 8005fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe8:	4770      	bx	lr

08005fea <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerIKNS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEEDTcldtfp_18getResourceManagerEERT_>:
  static auto getResourceManager(TClient& client)
 8005fea:	b580      	push	{r7, lr}
 8005fec:	b082      	sub	sp, #8
 8005fee:	af00      	add	r7, sp, #0
 8005ff0:	6078      	str	r0, [r7, #4]
    return client.getResourceManager();
 8005ff2:	6878      	ldr	r0, [r7, #4]
 8005ff4:	f000 f9db 	bl	80063ae <_ZNK11ArduinoJson8V730HB226detail11MemberProxyINS0_10JsonObjectENS1_9RamStringEE18getResourceManagerEv>
 8005ff8:	4603      	mov	r3, r0
  }
 8005ffa:	4618      	mov	r0, r3
 8005ffc:	3708      	adds	r7, #8
 8005ffe:	46bd      	mov	sp, r7
 8006000:	bd80      	pop	{r7, pc}

08006002 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEE7getDataEv>:
  VariantData* getData() const {
 8006002:	b580      	push	{r7, lr}
 8006004:	b082      	sub	sp, #8
 8006006:	af00      	add	r7, sp, #0
 8006008:	6078      	str	r0, [r7, #4]
    return VariantAttorney::getData(derived());
 800600a:	6878      	ldr	r0, [r7, #4]
 800600c:	f7ff ffe2 	bl	8005fd4 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEE7derivedEv>
 8006010:	4603      	mov	r3, r0
 8006012:	4618      	mov	r0, r3
 8006014:	f000 f9d9 	bl	80063ca <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataIKNS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEEDTcldtfp_7getDataEERT_>
 8006018:	4603      	mov	r3, r0
  }
 800601a:	4618      	mov	r0, r3
 800601c:	3708      	adds	r7, #8
 800601e:	46bd      	mov	sp, r7
 8006020:	bd80      	pop	{r7, pc}

08006022 <_ZN11ArduinoJson8V730HB226detail13convertNumberImmEET_T0_>:
canConvertNumber(TIn) {
  return true;
}

template <typename TOut, typename TIn>
TOut convertNumber(TIn value) {
 8006022:	b580      	push	{r7, lr}
 8006024:	b082      	sub	sp, #8
 8006026:	af00      	add	r7, sp, #0
 8006028:	6078      	str	r0, [r7, #4]
  return canConvertNumber<TOut>(value) ? TOut(value) : 0;
 800602a:	6878      	ldr	r0, [r7, #4]
 800602c:	f000 f9d9 	bl	80063e2 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberImmEENS1_9enable_ifIXaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_11is_unsignedIS5_EE5valuesrNS4_IT_EE5valuelestS9_stS5_EbE4typeES5_>
 8006030:	4603      	mov	r3, r0
 8006032:	2b00      	cmp	r3, #0
 8006034:	d001      	beq.n	800603a <_ZN11ArduinoJson8V730HB226detail13convertNumberImmEET_T0_+0x18>
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	e000      	b.n	800603c <_ZN11ArduinoJson8V730HB226detail13convertNumberImmEET_T0_+0x1a>
 800603a:	2300      	movs	r3, #0
}
 800603c:	4618      	mov	r0, r3
 800603e:	3708      	adds	r7, #8
 8006040:	46bd      	mov	sp, r7
 8006042:	bd80      	pop	{r7, pc}

08006044 <_ZN11ArduinoJson8V730HB226detail13convertNumberImlEET_T0_>:
TOut convertNumber(TIn value) {
 8006044:	b580      	push	{r7, lr}
 8006046:	b082      	sub	sp, #8
 8006048:	af00      	add	r7, sp, #0
 800604a:	6078      	str	r0, [r7, #4]
  return canConvertNumber<TOut>(value) ? TOut(value) : 0;
 800604c:	6878      	ldr	r0, [r7, #4]
 800604e:	f000 f9d9 	bl	8006404 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberImlEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS1_11is_unsignedIS9_EE5valuegestS9_stS5_EbE4typeES5_>
 8006052:	4603      	mov	r3, r0
 8006054:	2b00      	cmp	r3, #0
 8006056:	d001      	beq.n	800605c <_ZN11ArduinoJson8V730HB226detail13convertNumberImlEET_T0_+0x18>
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	e000      	b.n	800605e <_ZN11ArduinoJson8V730HB226detail13convertNumberImlEET_T0_+0x1a>
 800605c:	2300      	movs	r3, #0
}
 800605e:	4618      	mov	r0, r3
 8006060:	3708      	adds	r7, #8
 8006062:	46bd      	mov	sp, r7
 8006064:	bd80      	pop	{r7, pc}

08006066 <_ZN11ArduinoJson8V730HB226detail13convertNumberImyEET_T0_>:
TOut convertNumber(TIn value) {
 8006066:	b580      	push	{r7, lr}
 8006068:	b082      	sub	sp, #8
 800606a:	af00      	add	r7, sp, #0
 800606c:	e9c7 0100 	strd	r0, r1, [r7]
  return canConvertNumber<TOut>(value) ? TOut(value) : 0;
 8006070:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006074:	f000 f9dc 	bl	8006430 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberImyEENS1_9enable_ifIXaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_11is_unsignedIS5_EE5valuesrNS4_IT_EE5valuelestS9_stS5_EbE4typeES5_>
 8006078:	4603      	mov	r3, r0
 800607a:	2b00      	cmp	r3, #0
 800607c:	d001      	beq.n	8006082 <_ZN11ArduinoJson8V730HB226detail13convertNumberImyEET_T0_+0x1c>
 800607e:	683b      	ldr	r3, [r7, #0]
 8006080:	e000      	b.n	8006084 <_ZN11ArduinoJson8V730HB226detail13convertNumberImyEET_T0_+0x1e>
 8006082:	2300      	movs	r3, #0
}
 8006084:	4618      	mov	r0, r3
 8006086:	3708      	adds	r7, #8
 8006088:	46bd      	mov	sp, r7
 800608a:	bd80      	pop	{r7, pc}

0800608c <_ZN11ArduinoJson8V730HB226detail13convertNumberImxEET_T0_>:
TOut convertNumber(TIn value) {
 800608c:	b580      	push	{r7, lr}
 800608e:	b082      	sub	sp, #8
 8006090:	af00      	add	r7, sp, #0
 8006092:	e9c7 0100 	strd	r0, r1, [r7]
  return canConvertNumber<TOut>(value) ? TOut(value) : 0;
 8006096:	e9d7 0100 	ldrd	r0, r1, [r7]
 800609a:	f000 f9e1 	bl	8006460 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberImxEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS1_11is_unsignedIS9_EE5valueltstS9_stS5_EbE4typeES5_>
 800609e:	4603      	mov	r3, r0
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d001      	beq.n	80060a8 <_ZN11ArduinoJson8V730HB226detail13convertNumberImxEET_T0_+0x1c>
 80060a4:	683b      	ldr	r3, [r7, #0]
 80060a6:	e000      	b.n	80060aa <_ZN11ArduinoJson8V730HB226detail13convertNumberImxEET_T0_+0x1e>
 80060a8:	2300      	movs	r3, #0
}
 80060aa:	4618      	mov	r0, r3
 80060ac:	3708      	adds	r7, #8
 80060ae:	46bd      	mov	sp, r7
 80060b0:	bd80      	pop	{r7, pc}

080060b2 <_ZN11ArduinoJson8V730HB226detail11parseNumberImEET_PKc>:

template <typename T>
inline T parseNumber(const char* s) {
 80060b2:	b580      	push	{r7, lr}
 80060b4:	b086      	sub	sp, #24
 80060b6:	af00      	add	r7, sp, #0
 80060b8:	6078      	str	r0, [r7, #4]
  return parseNumber(s).convertTo<T>();
 80060ba:	f107 0308 	add.w	r3, r7, #8
 80060be:	6879      	ldr	r1, [r7, #4]
 80060c0:	4618      	mov	r0, r3
 80060c2:	f7fd fec7 	bl	8003e54 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc>
 80060c6:	f107 0308 	add.w	r3, r7, #8
 80060ca:	4618      	mov	r0, r3
 80060cc:	f000 f9e6 	bl	800649c <_ZNK11ArduinoJson8V730HB226detail6Number9convertToImEET_v>
 80060d0:	4603      	mov	r3, r0
}
 80060d2:	4618      	mov	r0, r3
 80060d4:	3718      	adds	r7, #24
 80060d6:	46bd      	mov	sp, r7
 80060d8:	bd80      	pop	{r7, pc}

080060da <_ZN11ArduinoJson8V730HB226detail13convertNumberImfEET_T0_>:
TOut convertNumber(TIn value) {
 80060da:	b580      	push	{r7, lr}
 80060dc:	b082      	sub	sp, #8
 80060de:	af00      	add	r7, sp, #0
 80060e0:	ed87 0a01 	vstr	s0, [r7, #4]
  return canConvertNumber<TOut>(value) ? TOut(value) : 0;
 80060e4:	ed97 0a01 	vldr	s0, [r7, #4]
 80060e8:	f000 fa1e 	bl	8006528 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberImfEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valuegestS8_stS5_EbE4typeES5_>
 80060ec:	4603      	mov	r3, r0
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d006      	beq.n	8006100 <_ZN11ArduinoJson8V730HB226detail13convertNumberImfEET_T0_+0x26>
 80060f2:	edd7 7a01 	vldr	s15, [r7, #4]
 80060f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80060fa:	ee17 3a90 	vmov	r3, s15
 80060fe:	e000      	b.n	8006102 <_ZN11ArduinoJson8V730HB226detail13convertNumberImfEET_T0_+0x28>
 8006100:	2300      	movs	r3, #0
}
 8006102:	4618      	mov	r0, r3
 8006104:	3708      	adds	r7, #8
 8006106:	46bd      	mov	sp, r7
 8006108:	bd80      	pop	{r7, pc}

0800610a <_ZN11ArduinoJson8V730HB226detail13convertNumberImdEET_T0_>:
TOut convertNumber(TIn value) {
 800610a:	b580      	push	{r7, lr}
 800610c:	b082      	sub	sp, #8
 800610e:	af00      	add	r7, sp, #0
 8006110:	ed87 0b00 	vstr	d0, [r7]
  return canConvertNumber<TOut>(value) ? TOut(value) : 0;
 8006114:	ed97 0b00 	vldr	d0, [r7]
 8006118:	f000 fa34 	bl	8006584 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberImdEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valueltstS8_stS5_EbE4typeES5_>
 800611c:	4603      	mov	r3, r0
 800611e:	2b00      	cmp	r3, #0
 8006120:	d006      	beq.n	8006130 <_ZN11ArduinoJson8V730HB226detail13convertNumberImdEET_T0_+0x26>
 8006122:	ed97 7b00 	vldr	d7, [r7]
 8006126:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800612a:	ee17 3a90 	vmov	r3, s15
 800612e:	e000      	b.n	8006132 <_ZN11ArduinoJson8V730HB226detail13convertNumberImdEET_T0_+0x28>
 8006130:	2300      	movs	r3, #0
}
 8006132:	4618      	mov	r0, r3
 8006134:	3708      	adds	r7, #8
 8006136:	46bd      	mov	sp, r7
 8006138:	bd80      	pop	{r7, pc}

0800613a <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentENS1_9RamStringEEEE7derivedEv>:
  const TDerived& derived() const {
 800613a:	b480      	push	{r7}
 800613c:	b083      	sub	sp, #12
 800613e:	af00      	add	r7, sp, #0
 8006140:	6078      	str	r0, [r7, #4]
    return static_cast<const TDerived&>(*this);
 8006142:	687b      	ldr	r3, [r7, #4]
  }
 8006144:	4618      	mov	r0, r3
 8006146:	370c      	adds	r7, #12
 8006148:	46bd      	mov	sp, r7
 800614a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800614e:	4770      	bx	lr

08006150 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataIKNS1_11MemberProxyIRNS0_12JsonDocumentENS1_9RamStringEEEEEDTcldtfp_7getDataEERT_>:
  static auto getData(TClient& client) -> decltype(client.getData()) {
 8006150:	b580      	push	{r7, lr}
 8006152:	b082      	sub	sp, #8
 8006154:	af00      	add	r7, sp, #0
 8006156:	6078      	str	r0, [r7, #4]
    return client.getData();
 8006158:	6878      	ldr	r0, [r7, #4]
 800615a:	f000 fa39 	bl	80065d0 <_ZNK11ArduinoJson8V730HB226detail11MemberProxyIRNS0_12JsonDocumentENS1_9RamStringEE7getDataEv>
 800615e:	4603      	mov	r3, r0
  }
 8006160:	4618      	mov	r0, r3
 8006162:	3708      	adds	r7, #8
 8006164:	46bd      	mov	sp, r7
 8006166:	bd80      	pop	{r7, pc}

08006168 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerIKNS1_11MemberProxyIRNS0_12JsonDocumentENS1_9RamStringEEEEEDTcldtfp_18getResourceManagerEERT_>:
  static auto getResourceManager(TClient& client)
 8006168:	b580      	push	{r7, lr}
 800616a:	b082      	sub	sp, #8
 800616c:	af00      	add	r7, sp, #0
 800616e:	6078      	str	r0, [r7, #4]
    return client.getResourceManager();
 8006170:	6878      	ldr	r0, [r7, #4]
 8006172:	f000 fa49 	bl	8006608 <_ZNK11ArduinoJson8V730HB226detail11MemberProxyIRNS0_12JsonDocumentENS1_9RamStringEE18getResourceManagerEv>
 8006176:	4603      	mov	r3, r0
  }
 8006178:	4618      	mov	r0, r3
 800617a:	3708      	adds	r7, #8
 800617c:	46bd      	mov	sp, r7
 800617e:	bd80      	pop	{r7, pc}

08006180 <_ZN11ArduinoJson8V730HB226detail5LatchINS1_6ReaderIPKcvEEEC1ES6_>:
ARDUINOJSON_BEGIN_PRIVATE_NAMESPACE

template <typename TReader>
class Latch {
 public:
  Latch(TReader reader) : reader_(reader), loaded_(false) {
 8006180:	b480      	push	{r7}
 8006182:	b083      	sub	sp, #12
 8006184:	af00      	add	r7, sp, #0
 8006186:	6078      	str	r0, [r7, #4]
 8006188:	6039      	str	r1, [r7, #0]
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	683a      	ldr	r2, [r7, #0]
 800618e:	601a      	str	r2, [r3, #0]
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	2200      	movs	r2, #0
 8006194:	715a      	strb	r2, [r3, #5]
#if ARDUINOJSON_DEBUG
    ended_ = false;
#endif
  }
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	4618      	mov	r0, r3
 800619a:	370c      	adds	r7, #12
 800619c:	46bd      	mov	sp, r7
 800619e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a2:	4770      	bx	lr

080061a4 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE>:
  DeserializationError::Code parseVariant(
 80061a4:	b5b0      	push	{r4, r5, r7, lr}
 80061a6:	b086      	sub	sp, #24
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	60f8      	str	r0, [r7, #12]
 80061ac:	60b9      	str	r1, [r7, #8]
 80061ae:	713a      	strb	r2, [r7, #4]
 80061b0:	703b      	strb	r3, [r7, #0]
    err = skipSpacesAndComments();
 80061b2:	68f8      	ldr	r0, [r7, #12]
 80061b4:	f000 fa36 	bl	8006624 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE21skipSpacesAndCommentsEv>
 80061b8:	4603      	mov	r3, r0
 80061ba:	75fb      	strb	r3, [r7, #23]
    if (err)
 80061bc:	7dfb      	ldrb	r3, [r7, #23]
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d001      	beq.n	80061c6 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x22>
      return err;
 80061c2:	7dfb      	ldrb	r3, [r7, #23]
 80061c4:	e0d2      	b.n	800636c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x1c8>
    switch (current()) {
 80061c6:	68f8      	ldr	r0, [r7, #12]
 80061c8:	f000 fa62 	bl	8006690 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7currentEv>
 80061cc:	4603      	mov	r3, r0
 80061ce:	2b7b      	cmp	r3, #123	@ 0x7b
 80061d0:	f300 80ba 	bgt.w	8006348 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x1a4>
 80061d4:	2b5b      	cmp	r3, #91	@ 0x5b
 80061d6:	da04      	bge.n	80061e2 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x3e>
 80061d8:	2b22      	cmp	r3, #34	@ 0x22
 80061da:	d07b      	beq.n	80062d4 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x130>
 80061dc:	2b27      	cmp	r3, #39	@ 0x27
 80061de:	d079      	beq.n	80062d4 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x130>
 80061e0:	e0b2      	b.n	8006348 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x1a4>
 80061e2:	3b5b      	subs	r3, #91	@ 0x5b
 80061e4:	2b20      	cmp	r3, #32
 80061e6:	f200 80af 	bhi.w	8006348 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x1a4>
 80061ea:	a201      	add	r2, pc, #4	@ (adr r2, 80061f0 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x4c>)
 80061ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061f0:	08006275 	.word	0x08006275
 80061f4:	08006349 	.word	0x08006349
 80061f8:	08006349 	.word	0x08006349
 80061fc:	08006349 	.word	0x08006349
 8006200:	08006349 	.word	0x08006349
 8006204:	08006349 	.word	0x08006349
 8006208:	08006349 	.word	0x08006349
 800620c:	08006349 	.word	0x08006349
 8006210:	08006349 	.word	0x08006349
 8006214:	08006349 	.word	0x08006349
 8006218:	08006349 	.word	0x08006349
 800621c:	0800631b 	.word	0x0800631b
 8006220:	08006349 	.word	0x08006349
 8006224:	08006349 	.word	0x08006349
 8006228:	08006349 	.word	0x08006349
 800622c:	08006349 	.word	0x08006349
 8006230:	08006349 	.word	0x08006349
 8006234:	08006349 	.word	0x08006349
 8006238:	08006349 	.word	0x08006349
 800623c:	0800633d 	.word	0x0800633d
 8006240:	08006349 	.word	0x08006349
 8006244:	08006349 	.word	0x08006349
 8006248:	08006349 	.word	0x08006349
 800624c:	08006349 	.word	0x08006349
 8006250:	08006349 	.word	0x08006349
 8006254:	080062f9 	.word	0x080062f9
 8006258:	08006349 	.word	0x08006349
 800625c:	08006349 	.word	0x08006349
 8006260:	08006349 	.word	0x08006349
 8006264:	08006349 	.word	0x08006349
 8006268:	08006349 	.word	0x08006349
 800626c:	08006349 	.word	0x08006349
 8006270:	080062a5 	.word	0x080062a5
        if (filter.allowArray())
 8006274:	1d3b      	adds	r3, r7, #4
 8006276:	4618      	mov	r0, r3
 8006278:	f7fd fbdd 	bl	8003a36 <_ZNK11ArduinoJson8V730HB226detail14AllowAllFilter10allowArrayEv>
 800627c:	4603      	mov	r3, r0
 800627e:	2b00      	cmp	r3, #0
 8006280:	d00a      	beq.n	8006298 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0xf4>
          return parseArray(variant.toArray(), filter, nestingLimit);
 8006282:	68b8      	ldr	r0, [r7, #8]
 8006284:	f7fc fcdc 	bl	8002c40 <_ZN11ArduinoJson8V730HB226detail11VariantData7toArrayEv>
 8006288:	4601      	mov	r1, r0
 800628a:	783b      	ldrb	r3, [r7, #0]
 800628c:	462a      	mov	r2, r5
 800628e:	68f8      	ldr	r0, [r7, #12]
 8006290:	f000 fa15 	bl	80066be <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10parseArrayINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_9ArrayDataET_NS0_21DeserializationOption12NestingLimitE>
 8006294:	4603      	mov	r3, r0
 8006296:	e069      	b.n	800636c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x1c8>
          return skipArray(nestingLimit);
 8006298:	7839      	ldrb	r1, [r7, #0]
 800629a:	68f8      	ldr	r0, [r7, #12]
 800629c:	f000 fa95 	bl	80067ca <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9skipArrayENS0_21DeserializationOption12NestingLimitE>
 80062a0:	4603      	mov	r3, r0
 80062a2:	e063      	b.n	800636c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x1c8>
        if (filter.allowObject())
 80062a4:	1d3b      	adds	r3, r7, #4
 80062a6:	4618      	mov	r0, r3
 80062a8:	f7fd fbd0 	bl	8003a4c <_ZNK11ArduinoJson8V730HB226detail14AllowAllFilter11allowObjectEv>
 80062ac:	4603      	mov	r3, r0
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d00a      	beq.n	80062c8 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x124>
          return parseObject(variant.toObject(), filter, nestingLimit);
 80062b2:	68b8      	ldr	r0, [r7, #8]
 80062b4:	f7fc fcec 	bl	8002c90 <_ZN11ArduinoJson8V730HB226detail11VariantData8toObjectEv>
 80062b8:	4601      	mov	r1, r0
 80062ba:	783b      	ldrb	r3, [r7, #0]
 80062bc:	4622      	mov	r2, r4
 80062be:	68f8      	ldr	r0, [r7, #12]
 80062c0:	f000 fac6 	bl	8006850 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE>
 80062c4:	4603      	mov	r3, r0
 80062c6:	e051      	b.n	800636c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x1c8>
          return skipObject(nestingLimit);
 80062c8:	7839      	ldrb	r1, [r7, #0]
 80062ca:	68f8      	ldr	r0, [r7, #12]
 80062cc:	f000 fbac 	bl	8006a28 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10skipObjectENS0_21DeserializationOption12NestingLimitE>
 80062d0:	4603      	mov	r3, r0
 80062d2:	e04b      	b.n	800636c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x1c8>
        if (filter.allowValue())
 80062d4:	1d3b      	adds	r3, r7, #4
 80062d6:	4618      	mov	r0, r3
 80062d8:	f7fd fbc3 	bl	8003a62 <_ZNK11ArduinoJson8V730HB226detail14AllowAllFilter10allowValueEv>
 80062dc:	4603      	mov	r3, r0
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d005      	beq.n	80062ee <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x14a>
          return parseStringValue(variant);
 80062e2:	68b9      	ldr	r1, [r7, #8]
 80062e4:	68f8      	ldr	r0, [r7, #12]
 80062e6:	f000 fc1f 	bl	8006b28 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE16parseStringValueERNS1_11VariantDataE>
 80062ea:	4603      	mov	r3, r0
 80062ec:	e03e      	b.n	800636c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x1c8>
          return skipQuotedString();
 80062ee:	68f8      	ldr	r0, [r7, #12]
 80062f0:	f000 fc3b 	bl	8006b6a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE16skipQuotedStringEv>
 80062f4:	4603      	mov	r3, r0
 80062f6:	e039      	b.n	800636c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x1c8>
        if (filter.allowValue())
 80062f8:	1d3b      	adds	r3, r7, #4
 80062fa:	4618      	mov	r0, r3
 80062fc:	f7fd fbb1 	bl	8003a62 <_ZNK11ArduinoJson8V730HB226detail14AllowAllFilter10allowValueEv>
 8006300:	4603      	mov	r3, r0
 8006302:	2b00      	cmp	r3, #0
 8006304:	d003      	beq.n	800630e <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x16a>
          variant.setBoolean(true);
 8006306:	2101      	movs	r1, #1
 8006308:	68b8      	ldr	r0, [r7, #8]
 800630a:	f7fc fc47 	bl	8002b9c <_ZN11ArduinoJson8V730HB226detail11VariantData10setBooleanEb>
        return skipKeyword("true");
 800630e:	4919      	ldr	r1, [pc, #100]	@ (8006374 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x1d0>)
 8006310:	68f8      	ldr	r0, [r7, #12]
 8006312:	f000 fc5f 	bl	8006bd4 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipKeywordES5_>
 8006316:	4603      	mov	r3, r0
 8006318:	e028      	b.n	800636c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x1c8>
        if (filter.allowValue())
 800631a:	1d3b      	adds	r3, r7, #4
 800631c:	4618      	mov	r0, r3
 800631e:	f7fd fba0 	bl	8003a62 <_ZNK11ArduinoJson8V730HB226detail14AllowAllFilter10allowValueEv>
 8006322:	4603      	mov	r3, r0
 8006324:	2b00      	cmp	r3, #0
 8006326:	d003      	beq.n	8006330 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x18c>
          variant.setBoolean(false);
 8006328:	2100      	movs	r1, #0
 800632a:	68b8      	ldr	r0, [r7, #8]
 800632c:	f7fc fc36 	bl	8002b9c <_ZN11ArduinoJson8V730HB226detail11VariantData10setBooleanEb>
        return skipKeyword("false");
 8006330:	4911      	ldr	r1, [pc, #68]	@ (8006378 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x1d4>)
 8006332:	68f8      	ldr	r0, [r7, #12]
 8006334:	f000 fc4e 	bl	8006bd4 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipKeywordES5_>
 8006338:	4603      	mov	r3, r0
 800633a:	e017      	b.n	800636c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x1c8>
        return skipKeyword("null");
 800633c:	490f      	ldr	r1, [pc, #60]	@ (800637c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x1d8>)
 800633e:	68f8      	ldr	r0, [r7, #12]
 8006340:	f000 fc48 	bl	8006bd4 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipKeywordES5_>
 8006344:	4603      	mov	r3, r0
 8006346:	e011      	b.n	800636c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x1c8>
        if (filter.allowValue())
 8006348:	1d3b      	adds	r3, r7, #4
 800634a:	4618      	mov	r0, r3
 800634c:	f7fd fb89 	bl	8003a62 <_ZNK11ArduinoJson8V730HB226detail14AllowAllFilter10allowValueEv>
 8006350:	4603      	mov	r3, r0
 8006352:	2b00      	cmp	r3, #0
 8006354:	d005      	beq.n	8006362 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x1be>
          return parseNumericValue(variant);
 8006356:	68b9      	ldr	r1, [r7, #8]
 8006358:	68f8      	ldr	r0, [r7, #12]
 800635a:	f000 fc61 	bl	8006c20 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseNumericValueERNS1_11VariantDataE>
 800635e:	4603      	mov	r3, r0
 8006360:	e004      	b.n	800636c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x1c8>
          return skipNumericValue();
 8006362:	68f8      	ldr	r0, [r7, #12]
 8006364:	f000 fd04 	bl	8006d70 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE16skipNumericValueEv>
 8006368:	4603      	mov	r3, r0
 800636a:	bf00      	nop
  }
 800636c:	4618      	mov	r0, r3
 800636e:	3718      	adds	r7, #24
 8006370:	46bd      	mov	sp, r7
 8006372:	bdb0      	pop	{r4, r5, r7, pc}
 8006374:	0801fabc 	.word	0x0801fabc
 8006378:	0801fac4 	.word	0x0801fac4
 800637c:	0801facc 	.word	0x0801facc

08006380 <_ZNK11ArduinoJson8V730HB226detail5LatchINS1_6ReaderIPKcvEEE4lastEv>:

  void clear() {
    loaded_ = false;
  }

  int last() const {
 8006380:	b480      	push	{r7}
 8006382:	b083      	sub	sp, #12
 8006384:	af00      	add	r7, sp, #0
 8006386:	6078      	str	r0, [r7, #4]
    return current_;
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	791b      	ldrb	r3, [r3, #4]
  }
 800638c:	4618      	mov	r0, r3
 800638e:	370c      	adds	r7, #12
 8006390:	46bd      	mov	sp, r7
 8006392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006396:	4770      	bx	lr

08006398 <_ZN11ArduinoJson8V730HB226detail7forwardINS0_10JsonStringEEEOT_RNS1_16remove_referenceIS4_E4typeE>:
T&& forward(remove_reference_t<T>& t) noexcept {
 8006398:	b480      	push	{r7}
 800639a:	b083      	sub	sp, #12
 800639c:	af00      	add	r7, sp, #0
 800639e:	6078      	str	r0, [r7, #4]
  return static_cast<T&&>(t);
 80063a0:	687b      	ldr	r3, [r7, #4]
}
 80063a2:	4618      	mov	r0, r3
 80063a4:	370c      	adds	r7, #12
 80063a6:	46bd      	mov	sp, r7
 80063a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ac:	4770      	bx	lr

080063ae <_ZNK11ArduinoJson8V730HB226detail11MemberProxyINS0_10JsonObjectENS1_9RamStringEE18getResourceManagerEv>:
  // clang-format off
  MemberProxy(const MemberProxy& src) // Error here? See https://arduinojson.org/v7/proxy-non-copyable/
      : upstream_(src.upstream_), key_(src.key_) {}
  // clang-format on

  ResourceManager* getResourceManager() const {
 80063ae:	b580      	push	{r7, lr}
 80063b0:	b082      	sub	sp, #8
 80063b2:	af00      	add	r7, sp, #0
 80063b4:	6078      	str	r0, [r7, #4]
    return VariantAttorney::getResourceManager(upstream_);
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	3304      	adds	r3, #4
 80063ba:	4618      	mov	r0, r3
 80063bc:	f000 fcf6 	bl	8006dac <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerIKNS0_10JsonObjectEEEDTcldtfp_18getResourceManagerEERT_>
 80063c0:	4603      	mov	r3, r0
  }
 80063c2:	4618      	mov	r0, r3
 80063c4:	3708      	adds	r7, #8
 80063c6:	46bd      	mov	sp, r7
 80063c8:	bd80      	pop	{r7, pc}

080063ca <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataIKNS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEEDTcldtfp_7getDataEERT_>:
  static auto getData(TClient& client) -> decltype(client.getData()) {
 80063ca:	b580      	push	{r7, lr}
 80063cc:	b082      	sub	sp, #8
 80063ce:	af00      	add	r7, sp, #0
 80063d0:	6078      	str	r0, [r7, #4]
    return client.getData();
 80063d2:	6878      	ldr	r0, [r7, #4]
 80063d4:	f000 fd04 	bl	8006de0 <_ZNK11ArduinoJson8V730HB226detail11MemberProxyINS0_10JsonObjectENS1_9RamStringEE7getDataEv>
 80063d8:	4603      	mov	r3, r0
  }
 80063da:	4618      	mov	r0, r3
 80063dc:	3708      	adds	r7, #8
 80063de:	46bd      	mov	sp, r7
 80063e0:	bd80      	pop	{r7, pc}

080063e2 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberImmEENS1_9enable_ifIXaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_11is_unsignedIS5_EE5valuesrNS4_IT_EE5valuelestS9_stS5_EbE4typeES5_>:
canConvertNumber(TIn value) {
 80063e2:	b580      	push	{r7, lr}
 80063e4:	b082      	sub	sp, #8
 80063e6:	af00      	add	r7, sp, #0
 80063e8:	6078      	str	r0, [r7, #4]
  return value <= TIn(numeric_limits<TOut>::highest());
 80063ea:	f000 f8c2 	bl	8006572 <_ZN11ArduinoJson8V730HB226detail14numeric_limitsImvE7highestEv>
 80063ee:	4602      	mov	r2, r0
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	4293      	cmp	r3, r2
 80063f4:	bf94      	ite	ls
 80063f6:	2301      	movls	r3, #1
 80063f8:	2300      	movhi	r3, #0
 80063fa:	b2db      	uxtb	r3, r3
}
 80063fc:	4618      	mov	r0, r3
 80063fe:	3708      	adds	r7, #8
 8006400:	46bd      	mov	sp, r7
 8006402:	bd80      	pop	{r7, pc}

08006404 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberImlEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS1_11is_unsignedIS9_EE5valuegestS9_stS5_EbE4typeES5_>:
canConvertNumber(TIn value) {
 8006404:	b580      	push	{r7, lr}
 8006406:	b082      	sub	sp, #8
 8006408:	af00      	add	r7, sp, #0
 800640a:	6078      	str	r0, [r7, #4]
  if (value < 0)
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	2b00      	cmp	r3, #0
 8006410:	da01      	bge.n	8006416 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberImlEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS1_11is_unsignedIS9_EE5valuegestS9_stS5_EbE4typeES5_+0x12>
    return false;
 8006412:	2300      	movs	r3, #0
 8006414:	e008      	b.n	8006428 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberImlEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS1_11is_unsignedIS9_EE5valuegestS9_stS5_EbE4typeES5_+0x24>
  return TOut(value) <= numeric_limits<TOut>::highest();
 8006416:	f000 f8ac 	bl	8006572 <_ZN11ArduinoJson8V730HB226detail14numeric_limitsImvE7highestEv>
 800641a:	4602      	mov	r2, r0
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	429a      	cmp	r2, r3
 8006420:	bf2c      	ite	cs
 8006422:	2301      	movcs	r3, #1
 8006424:	2300      	movcc	r3, #0
 8006426:	b2db      	uxtb	r3, r3
}
 8006428:	4618      	mov	r0, r3
 800642a:	3708      	adds	r7, #8
 800642c:	46bd      	mov	sp, r7
 800642e:	bd80      	pop	{r7, pc}

08006430 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberImyEENS1_9enable_ifIXaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_11is_unsignedIS5_EE5valuesrNS4_IT_EE5valuelestS9_stS5_EbE4typeES5_>:
canConvertNumber(TIn value) {
 8006430:	b5b0      	push	{r4, r5, r7, lr}
 8006432:	b082      	sub	sp, #8
 8006434:	af00      	add	r7, sp, #0
 8006436:	e9c7 0100 	strd	r0, r1, [r7]
  return value <= TIn(numeric_limits<TOut>::highest());
 800643a:	f000 f89a 	bl	8006572 <_ZN11ArduinoJson8V730HB226detail14numeric_limitsImvE7highestEv>
 800643e:	4603      	mov	r3, r0
 8006440:	2200      	movs	r2, #0
 8006442:	461c      	mov	r4, r3
 8006444:	4615      	mov	r5, r2
 8006446:	e9d7 2300 	ldrd	r2, r3, [r7]
 800644a:	4294      	cmp	r4, r2
 800644c:	eb75 0303 	sbcs.w	r3, r5, r3
 8006450:	bf2c      	ite	cs
 8006452:	2301      	movcs	r3, #1
 8006454:	2300      	movcc	r3, #0
 8006456:	b2db      	uxtb	r3, r3
}
 8006458:	4618      	mov	r0, r3
 800645a:	3708      	adds	r7, #8
 800645c:	46bd      	mov	sp, r7
 800645e:	bdb0      	pop	{r4, r5, r7, pc}

08006460 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberImxEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS1_11is_unsignedIS9_EE5valueltstS9_stS5_EbE4typeES5_>:
canConvertNumber(TIn value) {
 8006460:	b5b0      	push	{r4, r5, r7, lr}
 8006462:	b082      	sub	sp, #8
 8006464:	af00      	add	r7, sp, #0
 8006466:	e9c7 0100 	strd	r0, r1, [r7]
  if (value < 0)
 800646a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800646e:	2b00      	cmp	r3, #0
 8006470:	da01      	bge.n	8006476 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberImxEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS1_11is_unsignedIS9_EE5valueltstS9_stS5_EbE4typeES5_+0x16>
    return false;
 8006472:	2300      	movs	r3, #0
 8006474:	e00e      	b.n	8006494 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberImxEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS1_11is_unsignedIS9_EE5valueltstS9_stS5_EbE4typeES5_+0x34>
  return value <= TIn(numeric_limits<TOut>::highest());
 8006476:	f000 f87c 	bl	8006572 <_ZN11ArduinoJson8V730HB226detail14numeric_limitsImvE7highestEv>
 800647a:	4603      	mov	r3, r0
 800647c:	2200      	movs	r2, #0
 800647e:	461c      	mov	r4, r3
 8006480:	4615      	mov	r5, r2
 8006482:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006486:	4294      	cmp	r4, r2
 8006488:	eb75 0303 	sbcs.w	r3, r5, r3
 800648c:	bfac      	ite	ge
 800648e:	2301      	movge	r3, #1
 8006490:	2300      	movlt	r3, #0
 8006492:	b2db      	uxtb	r3, r3
}
 8006494:	4618      	mov	r0, r3
 8006496:	3708      	adds	r7, #8
 8006498:	46bd      	mov	sp, r7
 800649a:	bdb0      	pop	{r4, r5, r7, pc}

0800649c <_ZNK11ArduinoJson8V730HB226detail6Number9convertToImEET_v>:
  T convertTo() const {
 800649c:	b580      	push	{r7, lr}
 800649e:	b082      	sub	sp, #8
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	6078      	str	r0, [r7, #4]
    switch (type_) {
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	781b      	ldrb	r3, [r3, #0]
 80064a8:	3b01      	subs	r3, #1
 80064aa:	2b03      	cmp	r3, #3
 80064ac:	d82e      	bhi.n	800650c <_ZNK11ArduinoJson8V730HB226detail6Number9convertToImEET_v+0x70>
 80064ae:	a201      	add	r2, pc, #4	@ (adr r2, 80064b4 <_ZNK11ArduinoJson8V730HB226detail6Number9convertToImEET_v+0x18>)
 80064b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064b4:	080064c5 	.word	0x080064c5
 80064b8:	080064d7 	.word	0x080064d7
 80064bc:	080064e9 	.word	0x080064e9
 80064c0:	080064fb 	.word	0x080064fb
        return convertNumber<T>(value_.asFloat);
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	edd3 7a02 	vldr	s15, [r3, #8]
 80064ca:	eeb0 0a67 	vmov.f32	s0, s15
 80064ce:	f7ff fe04 	bl	80060da <_ZN11ArduinoJson8V730HB226detail13convertNumberImfEET_T0_>
 80064d2:	4603      	mov	r3, r0
 80064d4:	e01b      	b.n	800650e <_ZNK11ArduinoJson8V730HB226detail6Number9convertToImEET_v+0x72>
        return convertNumber<T>(value_.asSignedInteger);
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80064dc:	4610      	mov	r0, r2
 80064de:	4619      	mov	r1, r3
 80064e0:	f7ff fdd4 	bl	800608c <_ZN11ArduinoJson8V730HB226detail13convertNumberImxEET_T0_>
 80064e4:	4603      	mov	r3, r0
 80064e6:	e012      	b.n	800650e <_ZNK11ArduinoJson8V730HB226detail6Number9convertToImEET_v+0x72>
        return convertNumber<T>(value_.asUnsignedInteger);
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80064ee:	4610      	mov	r0, r2
 80064f0:	4619      	mov	r1, r3
 80064f2:	f7ff fdb8 	bl	8006066 <_ZN11ArduinoJson8V730HB226detail13convertNumberImyEET_T0_>
 80064f6:	4603      	mov	r3, r0
 80064f8:	e009      	b.n	800650e <_ZNK11ArduinoJson8V730HB226detail6Number9convertToImEET_v+0x72>
        return convertNumber<T>(value_.asDouble);
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	ed93 7b02 	vldr	d7, [r3, #8]
 8006500:	eeb0 0b47 	vmov.f64	d0, d7
 8006504:	f7ff fe01 	bl	800610a <_ZN11ArduinoJson8V730HB226detail13convertNumberImdEET_T0_>
 8006508:	4603      	mov	r3, r0
 800650a:	e000      	b.n	800650e <_ZNK11ArduinoJson8V730HB226detail6Number9convertToImEET_v+0x72>
        return T();
 800650c:	2300      	movs	r3, #0
  }
 800650e:	4618      	mov	r0, r3
 8006510:	3708      	adds	r7, #8
 8006512:	46bd      	mov	sp, r7
 8006514:	bd80      	pop	{r7, pc}
 8006516:	bf00      	nop

08006518 <_ZN11ArduinoJson8V730HB226detail14numeric_limitsImvE6lowestEv>:
template <typename T, typename Enable = void>
struct numeric_limits;

template <typename T>
struct numeric_limits<T, enable_if_t<is_unsigned<T>::value>> {
  static constexpr T lowest() {
 8006518:	b480      	push	{r7}
 800651a:	af00      	add	r7, sp, #0
    return 0;
 800651c:	2300      	movs	r3, #0
  }
 800651e:	4618      	mov	r0, r3
 8006520:	46bd      	mov	sp, r7
 8006522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006526:	4770      	bx	lr

08006528 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberImfEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valuegestS8_stS5_EbE4typeES5_>:
canConvertNumber(TIn value) {
 8006528:	b580      	push	{r7, lr}
 800652a:	b082      	sub	sp, #8
 800652c:	af00      	add	r7, sp, #0
 800652e:	ed87 0a01 	vstr	s0, [r7, #4]
  return value >= numeric_limits<TOut>::lowest() &&
 8006532:	f7ff fff1 	bl	8006518 <_ZN11ArduinoJson8V730HB226detail14numeric_limitsImvE6lowestEv>
 8006536:	ee07 0a90 	vmov	s15, r0
 800653a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800653e:	ed97 7a01 	vldr	s14, [r7, #4]
 8006542:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006546:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800654a:	db0d      	blt.n	8006568 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberImfEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valuegestS8_stS5_EbE4typeES5_+0x40>
         value <= FloatTraits<TIn>::template highest_for<TOut>();
 800654c:	2000      	movs	r0, #0
 800654e:	f000 fc63 	bl	8006e18 <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIfLj4EE11highest_forImEEfPNS1_9enable_ifIXaaaasrNS1_11is_integralIT_EE5valuesrNS1_11is_unsignedIS7_EE5valueeqstS7_Li4EEjE4typeE>
 8006552:	eeb0 7a40 	vmov.f32	s14, s0
  return value >= numeric_limits<TOut>::lowest() &&
 8006556:	edd7 7a01 	vldr	s15, [r7, #4]
 800655a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800655e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006562:	d801      	bhi.n	8006568 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberImfEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valuegestS8_stS5_EbE4typeES5_+0x40>
 8006564:	2301      	movs	r3, #1
 8006566:	e000      	b.n	800656a <_ZN11ArduinoJson8V730HB226detail16canConvertNumberImfEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valuegestS8_stS5_EbE4typeES5_+0x42>
 8006568:	2300      	movs	r3, #0
}
 800656a:	4618      	mov	r0, r3
 800656c:	3708      	adds	r7, #8
 800656e:	46bd      	mov	sp, r7
 8006570:	bd80      	pop	{r7, pc}

08006572 <_ZN11ArduinoJson8V730HB226detail14numeric_limitsImvE7highestEv>:
  static constexpr T highest() {
 8006572:	b480      	push	{r7}
 8006574:	af00      	add	r7, sp, #0
    return T(-1);
 8006576:	f04f 33ff 	mov.w	r3, #4294967295
  }
 800657a:	4618      	mov	r0, r3
 800657c:	46bd      	mov	sp, r7
 800657e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006582:	4770      	bx	lr

08006584 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberImdEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valueltstS8_stS5_EbE4typeES5_>:
canConvertNumber(TIn value) {
 8006584:	b580      	push	{r7, lr}
 8006586:	b082      	sub	sp, #8
 8006588:	af00      	add	r7, sp, #0
 800658a:	ed87 0b00 	vstr	d0, [r7]
  return value >= numeric_limits<TOut>::lowest() &&
 800658e:	f7ff ffc3 	bl	8006518 <_ZN11ArduinoJson8V730HB226detail14numeric_limitsImvE6lowestEv>
 8006592:	ee07 0a90 	vmov	s15, r0
 8006596:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800659a:	ed97 6b00 	vldr	d6, [r7]
 800659e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80065a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80065a6:	db0e      	blt.n	80065c6 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberImdEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valueltstS8_stS5_EbE4typeES5_+0x42>
         value <= numeric_limits<TOut>::highest();
 80065a8:	f7ff ffe3 	bl	8006572 <_ZN11ArduinoJson8V730HB226detail14numeric_limitsImvE7highestEv>
 80065ac:	ee07 0a90 	vmov	s15, r0
 80065b0:	eeb8 7b67 	vcvt.f64.u32	d7, s15
  return value >= numeric_limits<TOut>::lowest() &&
 80065b4:	ed97 6b00 	vldr	d6, [r7]
 80065b8:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80065bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80065c0:	d801      	bhi.n	80065c6 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberImdEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valueltstS8_stS5_EbE4typeES5_+0x42>
 80065c2:	2301      	movs	r3, #1
 80065c4:	e000      	b.n	80065c8 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberImdEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valueltstS8_stS5_EbE4typeES5_+0x44>
 80065c6:	2300      	movs	r3, #0
}
 80065c8:	4618      	mov	r0, r3
 80065ca:	3708      	adds	r7, #8
 80065cc:	46bd      	mov	sp, r7
 80065ce:	bd80      	pop	{r7, pc}

080065d0 <_ZNK11ArduinoJson8V730HB226detail11MemberProxyIRNS0_12JsonDocumentENS1_9RamStringEE7getDataEv>:

  VariantData* getData() const {
 80065d0:	b590      	push	{r4, r7, lr}
 80065d2:	b085      	sub	sp, #20
 80065d4:	af02      	add	r7, sp, #8
 80065d6:	6078      	str	r0, [r7, #4]
    return VariantData::getMember(
        VariantAttorney::getData(upstream_), key_,
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	4618      	mov	r0, r3
 80065de:	f000 fc2b 	bl	8006e38 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataINS0_12JsonDocumentEEEDTcldtfp_7getDataEERT_>
 80065e2:	4604      	mov	r4, r0
        VariantAttorney::getResourceManager(upstream_));
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	4618      	mov	r0, r3
 80065ea:	f7ff fc7d 	bl	8005ee8 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerINS0_12JsonDocumentEEEDTcldtfp_18getResourceManagerEERT_>
 80065ee:	4602      	mov	r2, r0
    return VariantData::getMember(
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	9200      	str	r2, [sp, #0]
 80065f4:	3304      	adds	r3, #4
 80065f6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80065f8:	4620      	mov	r0, r4
 80065fa:	f000 fc29 	bl	8006e50 <_ZN11ArduinoJson8V730HB226detail11VariantData9getMemberINS1_9RamStringEEEPS2_PKS2_T_PKNS1_15ResourceManagerE>
 80065fe:	4603      	mov	r3, r0
  }
 8006600:	4618      	mov	r0, r3
 8006602:	370c      	adds	r7, #12
 8006604:	46bd      	mov	sp, r7
 8006606:	bd90      	pop	{r4, r7, pc}

08006608 <_ZNK11ArduinoJson8V730HB226detail11MemberProxyIRNS0_12JsonDocumentENS1_9RamStringEE18getResourceManagerEv>:
  ResourceManager* getResourceManager() const {
 8006608:	b580      	push	{r7, lr}
 800660a:	b082      	sub	sp, #8
 800660c:	af00      	add	r7, sp, #0
 800660e:	6078      	str	r0, [r7, #4]
    return VariantAttorney::getResourceManager(upstream_);
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	4618      	mov	r0, r3
 8006616:	f7ff fc67 	bl	8005ee8 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerINS0_12JsonDocumentEEEDTcldtfp_18getResourceManagerEERT_>
 800661a:	4603      	mov	r3, r0
  }
 800661c:	4618      	mov	r0, r3
 800661e:	3708      	adds	r7, #8
 8006620:	46bd      	mov	sp, r7
 8006622:	bd80      	pop	{r7, pc}

08006624 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE21skipSpacesAndCommentsEv>:
  DeserializationError::Code skipSpacesAndComments() {
 8006624:	b580      	push	{r7, lr}
 8006626:	b082      	sub	sp, #8
 8006628:	af00      	add	r7, sp, #0
 800662a:	6078      	str	r0, [r7, #4]
      switch (current()) {
 800662c:	6878      	ldr	r0, [r7, #4]
 800662e:	f000 f82f 	bl	8006690 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7currentEv>
 8006632:	4603      	mov	r3, r0
 8006634:	2b00      	cmp	r3, #0
 8006636:	d013      	beq.n	8006660 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE21skipSpacesAndCommentsEv+0x3c>
 8006638:	2b00      	cmp	r3, #0
 800663a:	db1d      	blt.n	8006678 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE21skipSpacesAndCommentsEv+0x54>
 800663c:	2b20      	cmp	r3, #32
 800663e:	dc1b      	bgt.n	8006678 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE21skipSpacesAndCommentsEv+0x54>
 8006640:	2b09      	cmp	r3, #9
 8006642:	db19      	blt.n	8006678 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE21skipSpacesAndCommentsEv+0x54>
 8006644:	3b09      	subs	r3, #9
 8006646:	4a11      	ldr	r2, [pc, #68]	@ (800668c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE21skipSpacesAndCommentsEv+0x68>)
 8006648:	fa22 f303 	lsr.w	r3, r2, r3
 800664c:	f003 0301 	and.w	r3, r3, #1
 8006650:	2b00      	cmp	r3, #0
 8006652:	bf14      	ite	ne
 8006654:	2301      	movne	r3, #1
 8006656:	2300      	moveq	r3, #0
 8006658:	b2db      	uxtb	r3, r3
 800665a:	2b00      	cmp	r3, #0
 800665c:	d108      	bne.n	8006670 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE21skipSpacesAndCommentsEv+0x4c>
 800665e:	e00b      	b.n	8006678 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE21skipSpacesAndCommentsEv+0x54>
          return foundSomething_ ? DeserializationError::IncompleteInput
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	7b1b      	ldrb	r3, [r3, #12]
 8006664:	2b00      	cmp	r3, #0
 8006666:	d001      	beq.n	800666c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE21skipSpacesAndCommentsEv+0x48>
 8006668:	2302      	movs	r3, #2
                                 : DeserializationError::EmptyInput;
 800666a:	e00b      	b.n	8006684 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE21skipSpacesAndCommentsEv+0x60>
          return foundSomething_ ? DeserializationError::IncompleteInput
 800666c:	2301      	movs	r3, #1
                                 : DeserializationError::EmptyInput;
 800666e:	e009      	b.n	8006684 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE21skipSpacesAndCommentsEv+0x60>
          move();
 8006670:	6878      	ldr	r0, [r7, #4]
 8006672:	f000 fc06 	bl	8006e82 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE4moveEv>
          continue;
 8006676:	e004      	b.n	8006682 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE21skipSpacesAndCommentsEv+0x5e>
          foundSomething_ = true;
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	2201      	movs	r2, #1
 800667c:	731a      	strb	r2, [r3, #12]
          return DeserializationError::Ok;
 800667e:	2300      	movs	r3, #0
 8006680:	e000      	b.n	8006684 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE21skipSpacesAndCommentsEv+0x60>
      switch (current()) {
 8006682:	e7d3      	b.n	800662c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE21skipSpacesAndCommentsEv+0x8>
  }
 8006684:	4618      	mov	r0, r3
 8006686:	3708      	adds	r7, #8
 8006688:	46bd      	mov	sp, r7
 800668a:	bd80      	pop	{r7, pc}
 800668c:	00800013 	.word	0x00800013

08006690 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7currentEv>:
  char current() {
 8006690:	b580      	push	{r7, lr}
 8006692:	b084      	sub	sp, #16
 8006694:	af00      	add	r7, sp, #0
 8006696:	6078      	str	r0, [r7, #4]
    return latch_.current();
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	3310      	adds	r3, #16
 800669c:	60fb      	str	r3, [r7, #12]

  FORCE_INLINE char current() {
    if (!loaded_) {
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	795b      	ldrb	r3, [r3, #5]
 80066a2:	f083 0301 	eor.w	r3, r3, #1
 80066a6:	b2db      	uxtb	r3, r3
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d002      	beq.n	80066b2 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7currentEv+0x22>
      load();
 80066ac:	68f8      	ldr	r0, [r7, #12]
 80066ae:	f000 ff1a 	bl	80074e6 <_ZN11ArduinoJson8V730HB226detail5LatchINS1_6ReaderIPKcvEEE4loadEv>
    }
    return current_;
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	791b      	ldrb	r3, [r3, #4]
  }
 80066b6:	4618      	mov	r0, r3
 80066b8:	3710      	adds	r7, #16
 80066ba:	46bd      	mov	sp, r7
 80066bc:	bd80      	pop	{r7, pc}

080066be <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10parseArrayINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_9ArrayDataET_NS0_21DeserializationOption12NestingLimitE>:
  DeserializationError::Code parseArray(
 80066be:	b590      	push	{r4, r7, lr}
 80066c0:	b089      	sub	sp, #36	@ 0x24
 80066c2:	af00      	add	r7, sp, #0
 80066c4:	60f8      	str	r0, [r7, #12]
 80066c6:	60b9      	str	r1, [r7, #8]
 80066c8:	713a      	strb	r2, [r7, #4]
 80066ca:	703b      	strb	r3, [r7, #0]
    if (nestingLimit.reached())
 80066cc:	463b      	mov	r3, r7
 80066ce:	4618      	mov	r0, r3
 80066d0:	f7fd fa03 	bl	8003ada <_ZNK11ArduinoJson8V730HB2221DeserializationOption12NestingLimit7reachedEv>
 80066d4:	4603      	mov	r3, r0
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d001      	beq.n	80066de <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10parseArrayINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_9ArrayDataET_NS0_21DeserializationOption12NestingLimitE+0x20>
      return DeserializationError::TooDeep;
 80066da:	2305      	movs	r3, #5
 80066dc:	e071      	b.n	80067c2 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10parseArrayINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_9ArrayDataET_NS0_21DeserializationOption12NestingLimitE+0x104>
    move();
 80066de:	68f8      	ldr	r0, [r7, #12]
 80066e0:	f000 fbcf 	bl	8006e82 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE4moveEv>
    err = skipSpacesAndComments();
 80066e4:	68f8      	ldr	r0, [r7, #12]
 80066e6:	f7ff ff9d 	bl	8006624 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE21skipSpacesAndCommentsEv>
 80066ea:	4603      	mov	r3, r0
 80066ec:	77fb      	strb	r3, [r7, #31]
    if (err)
 80066ee:	7ffb      	ldrb	r3, [r7, #31]
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d001      	beq.n	80066f8 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10parseArrayINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_9ArrayDataET_NS0_21DeserializationOption12NestingLimitE+0x3a>
      return err;
 80066f4:	7ffb      	ldrb	r3, [r7, #31]
 80066f6:	e064      	b.n	80067c2 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10parseArrayINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_9ArrayDataET_NS0_21DeserializationOption12NestingLimitE+0x104>
    if (eat(']'))
 80066f8:	215d      	movs	r1, #93	@ 0x5d
 80066fa:	68f8      	ldr	r0, [r7, #12]
 80066fc:	f000 fbce 	bl	8006e9c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE3eatEc>
 8006700:	4603      	mov	r3, r0
 8006702:	2b00      	cmp	r3, #0
 8006704:	d001      	beq.n	800670a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10parseArrayINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_9ArrayDataET_NS0_21DeserializationOption12NestingLimitE+0x4c>
      return DeserializationError::Ok;
 8006706:	2300      	movs	r3, #0
 8006708:	e05b      	b.n	80067c2 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10parseArrayINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_9ArrayDataET_NS0_21DeserializationOption12NestingLimitE+0x104>
    TFilter elementFilter = filter[0UL];
 800670a:	2300      	movs	r3, #0
 800670c:	617b      	str	r3, [r7, #20]
 800670e:	f107 0214 	add.w	r2, r7, #20
 8006712:	1d3b      	adds	r3, r7, #4
 8006714:	4611      	mov	r1, r2
 8006716:	4618      	mov	r0, r3
 8006718:	f000 fbdd 	bl	8006ed6 <_ZNK11ArduinoJson8V730HB226detail14AllowAllFilterixImEES2_RKT_>
      if (elementFilter.allow()) {
 800671c:	f107 0310 	add.w	r3, r7, #16
 8006720:	4618      	mov	r0, r3
 8006722:	f7fd f97d 	bl	8003a20 <_ZNK11ArduinoJson8V730HB226detail14AllowAllFilter5allowEv>
 8006726:	4603      	mov	r3, r0
 8006728:	2b00      	cmp	r3, #0
 800672a:	d01c      	beq.n	8006766 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10parseArrayINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_9ArrayDataET_NS0_21DeserializationOption12NestingLimitE+0xa8>
        VariantData* value = array.addElement(resources_);
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	699b      	ldr	r3, [r3, #24]
 8006730:	4619      	mov	r1, r3
 8006732:	68b8      	ldr	r0, [r7, #8]
 8006734:	f7fc fd3f 	bl	80031b6 <_ZN11ArduinoJson8V730HB226detail9ArrayData10addElementEPNS1_15ResourceManagerE>
 8006738:	61b8      	str	r0, [r7, #24]
        if (!value)
 800673a:	69bb      	ldr	r3, [r7, #24]
 800673c:	2b00      	cmp	r3, #0
 800673e:	d101      	bne.n	8006744 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10parseArrayINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_9ArrayDataET_NS0_21DeserializationOption12NestingLimitE+0x86>
          return DeserializationError::NoMemory;
 8006740:	2304      	movs	r3, #4
 8006742:	e03e      	b.n	80067c2 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10parseArrayINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_9ArrayDataET_NS0_21DeserializationOption12NestingLimitE+0x104>
        err = parseVariant(*value, elementFilter, nestingLimit.decrement());
 8006744:	463b      	mov	r3, r7
 8006746:	4618      	mov	r0, r3
 8006748:	f7fd f9b4 	bl	8003ab4 <_ZNK11ArduinoJson8V730HB2221DeserializationOption12NestingLimit9decrementEv>
 800674c:	4603      	mov	r3, r0
 800674e:	4622      	mov	r2, r4
 8006750:	69b9      	ldr	r1, [r7, #24]
 8006752:	68f8      	ldr	r0, [r7, #12]
 8006754:	f7ff fd26 	bl	80061a4 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE>
 8006758:	4603      	mov	r3, r0
 800675a:	77fb      	strb	r3, [r7, #31]
        if (err)
 800675c:	7ffb      	ldrb	r3, [r7, #31]
 800675e:	2b00      	cmp	r3, #0
 8006760:	d011      	beq.n	8006786 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10parseArrayINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_9ArrayDataET_NS0_21DeserializationOption12NestingLimitE+0xc8>
          return err;
 8006762:	7ffb      	ldrb	r3, [r7, #31]
 8006764:	e02d      	b.n	80067c2 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10parseArrayINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_9ArrayDataET_NS0_21DeserializationOption12NestingLimitE+0x104>
        err = skipVariant(nestingLimit.decrement());
 8006766:	463b      	mov	r3, r7
 8006768:	4618      	mov	r0, r3
 800676a:	f7fd f9a3 	bl	8003ab4 <_ZNK11ArduinoJson8V730HB2221DeserializationOption12NestingLimit9decrementEv>
 800676e:	4603      	mov	r3, r0
 8006770:	4619      	mov	r1, r3
 8006772:	68f8      	ldr	r0, [r7, #12]
 8006774:	f000 fbbc 	bl	8006ef0 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipVariantENS0_21DeserializationOption12NestingLimitE>
 8006778:	4603      	mov	r3, r0
 800677a:	77fb      	strb	r3, [r7, #31]
        if (err)
 800677c:	7ffb      	ldrb	r3, [r7, #31]
 800677e:	2b00      	cmp	r3, #0
 8006780:	d001      	beq.n	8006786 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10parseArrayINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_9ArrayDataET_NS0_21DeserializationOption12NestingLimitE+0xc8>
          return err;
 8006782:	7ffb      	ldrb	r3, [r7, #31]
 8006784:	e01d      	b.n	80067c2 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10parseArrayINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_9ArrayDataET_NS0_21DeserializationOption12NestingLimitE+0x104>
      err = skipSpacesAndComments();
 8006786:	68f8      	ldr	r0, [r7, #12]
 8006788:	f7ff ff4c 	bl	8006624 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE21skipSpacesAndCommentsEv>
 800678c:	4603      	mov	r3, r0
 800678e:	77fb      	strb	r3, [r7, #31]
      if (err)
 8006790:	7ffb      	ldrb	r3, [r7, #31]
 8006792:	2b00      	cmp	r3, #0
 8006794:	d001      	beq.n	800679a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10parseArrayINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_9ArrayDataET_NS0_21DeserializationOption12NestingLimitE+0xdc>
        return err;
 8006796:	7ffb      	ldrb	r3, [r7, #31]
 8006798:	e013      	b.n	80067c2 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10parseArrayINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_9ArrayDataET_NS0_21DeserializationOption12NestingLimitE+0x104>
      if (eat(']'))
 800679a:	215d      	movs	r1, #93	@ 0x5d
 800679c:	68f8      	ldr	r0, [r7, #12]
 800679e:	f000 fb7d 	bl	8006e9c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE3eatEc>
 80067a2:	4603      	mov	r3, r0
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d001      	beq.n	80067ac <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10parseArrayINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_9ArrayDataET_NS0_21DeserializationOption12NestingLimitE+0xee>
        return DeserializationError::Ok;
 80067a8:	2300      	movs	r3, #0
 80067aa:	e00a      	b.n	80067c2 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10parseArrayINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_9ArrayDataET_NS0_21DeserializationOption12NestingLimitE+0x104>
      if (!eat(','))
 80067ac:	212c      	movs	r1, #44	@ 0x2c
 80067ae:	68f8      	ldr	r0, [r7, #12]
 80067b0:	f000 fb74 	bl	8006e9c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE3eatEc>
 80067b4:	4603      	mov	r3, r0
 80067b6:	f083 0301 	eor.w	r3, r3, #1
 80067ba:	b2db      	uxtb	r3, r3
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d0ad      	beq.n	800671c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10parseArrayINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_9ArrayDataET_NS0_21DeserializationOption12NestingLimitE+0x5e>
        return DeserializationError::InvalidInput;
 80067c0:	2303      	movs	r3, #3
  }
 80067c2:	4618      	mov	r0, r3
 80067c4:	3724      	adds	r7, #36	@ 0x24
 80067c6:	46bd      	mov	sp, r7
 80067c8:	bd90      	pop	{r4, r7, pc}

080067ca <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9skipArrayENS0_21DeserializationOption12NestingLimitE>:
  DeserializationError::Code skipArray(
 80067ca:	b580      	push	{r7, lr}
 80067cc:	b084      	sub	sp, #16
 80067ce:	af00      	add	r7, sp, #0
 80067d0:	6078      	str	r0, [r7, #4]
 80067d2:	7039      	strb	r1, [r7, #0]
    if (nestingLimit.reached())
 80067d4:	463b      	mov	r3, r7
 80067d6:	4618      	mov	r0, r3
 80067d8:	f7fd f97f 	bl	8003ada <_ZNK11ArduinoJson8V730HB2221DeserializationOption12NestingLimit7reachedEv>
 80067dc:	4603      	mov	r3, r0
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d001      	beq.n	80067e6 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9skipArrayENS0_21DeserializationOption12NestingLimitE+0x1c>
      return DeserializationError::TooDeep;
 80067e2:	2305      	movs	r3, #5
 80067e4:	e030      	b.n	8006848 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9skipArrayENS0_21DeserializationOption12NestingLimitE+0x7e>
    move();
 80067e6:	6878      	ldr	r0, [r7, #4]
 80067e8:	f000 fb4b 	bl	8006e82 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE4moveEv>
      err = skipVariant(nestingLimit.decrement());
 80067ec:	463b      	mov	r3, r7
 80067ee:	4618      	mov	r0, r3
 80067f0:	f7fd f960 	bl	8003ab4 <_ZNK11ArduinoJson8V730HB2221DeserializationOption12NestingLimit9decrementEv>
 80067f4:	4603      	mov	r3, r0
 80067f6:	4619      	mov	r1, r3
 80067f8:	6878      	ldr	r0, [r7, #4]
 80067fa:	f000 fb79 	bl	8006ef0 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipVariantENS0_21DeserializationOption12NestingLimitE>
 80067fe:	4603      	mov	r3, r0
 8006800:	73fb      	strb	r3, [r7, #15]
      if (err)
 8006802:	7bfb      	ldrb	r3, [r7, #15]
 8006804:	2b00      	cmp	r3, #0
 8006806:	d001      	beq.n	800680c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9skipArrayENS0_21DeserializationOption12NestingLimitE+0x42>
        return err;
 8006808:	7bfb      	ldrb	r3, [r7, #15]
 800680a:	e01d      	b.n	8006848 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9skipArrayENS0_21DeserializationOption12NestingLimitE+0x7e>
      err = skipSpacesAndComments();
 800680c:	6878      	ldr	r0, [r7, #4]
 800680e:	f7ff ff09 	bl	8006624 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE21skipSpacesAndCommentsEv>
 8006812:	4603      	mov	r3, r0
 8006814:	73fb      	strb	r3, [r7, #15]
      if (err)
 8006816:	7bfb      	ldrb	r3, [r7, #15]
 8006818:	2b00      	cmp	r3, #0
 800681a:	d001      	beq.n	8006820 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9skipArrayENS0_21DeserializationOption12NestingLimitE+0x56>
        return err;
 800681c:	7bfb      	ldrb	r3, [r7, #15]
 800681e:	e013      	b.n	8006848 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9skipArrayENS0_21DeserializationOption12NestingLimitE+0x7e>
      if (eat(']'))
 8006820:	215d      	movs	r1, #93	@ 0x5d
 8006822:	6878      	ldr	r0, [r7, #4]
 8006824:	f000 fb3a 	bl	8006e9c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE3eatEc>
 8006828:	4603      	mov	r3, r0
 800682a:	2b00      	cmp	r3, #0
 800682c:	d001      	beq.n	8006832 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9skipArrayENS0_21DeserializationOption12NestingLimitE+0x68>
        return DeserializationError::Ok;
 800682e:	2300      	movs	r3, #0
 8006830:	e00a      	b.n	8006848 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9skipArrayENS0_21DeserializationOption12NestingLimitE+0x7e>
      if (!eat(','))
 8006832:	212c      	movs	r1, #44	@ 0x2c
 8006834:	6878      	ldr	r0, [r7, #4]
 8006836:	f000 fb31 	bl	8006e9c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE3eatEc>
 800683a:	4603      	mov	r3, r0
 800683c:	f083 0301 	eor.w	r3, r3, #1
 8006840:	b2db      	uxtb	r3, r3
 8006842:	2b00      	cmp	r3, #0
 8006844:	d0d2      	beq.n	80067ec <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9skipArrayENS0_21DeserializationOption12NestingLimitE+0x22>
        return DeserializationError::InvalidInput;
 8006846:	2303      	movs	r3, #3
  }
 8006848:	4618      	mov	r0, r3
 800684a:	3710      	adds	r7, #16
 800684c:	46bd      	mov	sp, r7
 800684e:	bd80      	pop	{r7, pc}

08006850 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE>:
  DeserializationError::Code parseObject(
 8006850:	b590      	push	{r4, r7, lr}
 8006852:	b091      	sub	sp, #68	@ 0x44
 8006854:	af02      	add	r7, sp, #8
 8006856:	60f8      	str	r0, [r7, #12]
 8006858:	60b9      	str	r1, [r7, #8]
 800685a:	713a      	strb	r2, [r7, #4]
 800685c:	703b      	strb	r3, [r7, #0]
    if (nestingLimit.reached())
 800685e:	463b      	mov	r3, r7
 8006860:	4618      	mov	r0, r3
 8006862:	f7fd f93a 	bl	8003ada <_ZNK11ArduinoJson8V730HB2221DeserializationOption12NestingLimit7reachedEv>
 8006866:	4603      	mov	r3, r0
 8006868:	2b00      	cmp	r3, #0
 800686a:	d001      	beq.n	8006870 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE+0x20>
      return DeserializationError::TooDeep;
 800686c:	2305      	movs	r3, #5
 800686e:	e0d7      	b.n	8006a20 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE+0x1d0>
    move();
 8006870:	68f8      	ldr	r0, [r7, #12]
 8006872:	f000 fb06 	bl	8006e82 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE4moveEv>
    err = skipSpacesAndComments();
 8006876:	68f8      	ldr	r0, [r7, #12]
 8006878:	f7ff fed4 	bl	8006624 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE21skipSpacesAndCommentsEv>
 800687c:	4603      	mov	r3, r0
 800687e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (err)
 8006882:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8006886:	2b00      	cmp	r3, #0
 8006888:	d002      	beq.n	8006890 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE+0x40>
      return err;
 800688a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800688e:	e0c7      	b.n	8006a20 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE+0x1d0>
    if (eat('}'))
 8006890:	217d      	movs	r1, #125	@ 0x7d
 8006892:	68f8      	ldr	r0, [r7, #12]
 8006894:	f000 fb02 	bl	8006e9c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE3eatEc>
 8006898:	4603      	mov	r3, r0
 800689a:	2b00      	cmp	r3, #0
 800689c:	d001      	beq.n	80068a2 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE+0x52>
      return DeserializationError::Ok;
 800689e:	2300      	movs	r3, #0
 80068a0:	e0be      	b.n	8006a20 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE+0x1d0>
      err = parseKey();
 80068a2:	68f8      	ldr	r0, [r7, #12]
 80068a4:	f000 fbba 	bl	800701c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE8parseKeyEv>
 80068a8:	4603      	mov	r3, r0
 80068aa:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      if (err)
 80068ae:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d002      	beq.n	80068bc <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE+0x6c>
        return err;
 80068b6:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80068ba:	e0b1      	b.n	8006a20 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE+0x1d0>
      err = skipSpacesAndComments();
 80068bc:	68f8      	ldr	r0, [r7, #12]
 80068be:	f7ff feb1 	bl	8006624 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE21skipSpacesAndCommentsEv>
 80068c2:	4603      	mov	r3, r0
 80068c4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      if (err)
 80068c8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d002      	beq.n	80068d6 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE+0x86>
        return err;
 80068d0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80068d4:	e0a4      	b.n	8006a20 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE+0x1d0>
      if (!eat(':'))
 80068d6:	213a      	movs	r1, #58	@ 0x3a
 80068d8:	68f8      	ldr	r0, [r7, #12]
 80068da:	f000 fadf 	bl	8006e9c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE3eatEc>
 80068de:	4603      	mov	r3, r0
 80068e0:	f083 0301 	eor.w	r3, r3, #1
 80068e4:	b2db      	uxtb	r3, r3
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d001      	beq.n	80068ee <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE+0x9e>
        return DeserializationError::InvalidInput;
 80068ea:	2303      	movs	r3, #3
 80068ec:	e098      	b.n	8006a20 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE+0x1d0>
      JsonString key = stringBuilder_.str();
 80068ee:	68fa      	ldr	r2, [r7, #12]
 80068f0:	f107 0314 	add.w	r3, r7, #20
 80068f4:	4611      	mov	r1, r2
 80068f6:	4618      	mov	r0, r3
 80068f8:	f7fc ff92 	bl	8003820 <_ZNK11ArduinoJson8V730HB226detail13StringBuilder3strEv>
      TFilter memberFilter = filter[key];
 80068fc:	f107 0214 	add.w	r2, r7, #20
 8006900:	1d3b      	adds	r3, r7, #4
 8006902:	4611      	mov	r1, r2
 8006904:	4618      	mov	r0, r3
 8006906:	f000 fba9 	bl	800705c <_ZNK11ArduinoJson8V730HB226detail14AllowAllFilterixINS0_10JsonStringEEES2_RKT_>
      if (memberFilter.allow()) {
 800690a:	f107 0310 	add.w	r3, r7, #16
 800690e:	4618      	mov	r0, r3
 8006910:	f7fd f886 	bl	8003a20 <_ZNK11ArduinoJson8V730HB226detail14AllowAllFilter5allowEv>
 8006914:	4603      	mov	r3, r0
 8006916:	2b00      	cmp	r3, #0
 8006918:	d040      	beq.n	800699c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE+0x14c>
        auto member = object.getMember(adaptString(key), resources_);
 800691a:	f107 0320 	add.w	r3, r7, #32
 800691e:	f107 0214 	add.w	r2, r7, #20
 8006922:	4611      	mov	r1, r2
 8006924:	4618      	mov	r0, r3
 8006926:	f7fe f9c0 	bl	8004caa <_ZN11ArduinoJson8V730HB226detail11adaptStringIRNS0_10JsonStringEEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES8_NS1_9remove_cvINS1_16remove_referenceIS8_E4typeEE4typeEE4typeEvE13AdaptedStringEOS8_>
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	699b      	ldr	r3, [r3, #24]
 800692e:	9300      	str	r3, [sp, #0]
 8006930:	f107 0320 	add.w	r3, r7, #32
 8006934:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006936:	68b8      	ldr	r0, [r7, #8]
 8006938:	f7fe ff21 	bl	800577e <_ZNK11ArduinoJson8V730HB226detail10ObjectData9getMemberINS1_9RamStringEEEPNS1_11VariantDataET_PKNS1_15ResourceManagerE>
 800693c:	6378      	str	r0, [r7, #52]	@ 0x34
        if (!member) {
 800693e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006940:	2b00      	cmp	r3, #0
 8006942:	d111      	bne.n	8006968 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE+0x118>
          auto savedKey = stringBuilder_.save();
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	4618      	mov	r0, r3
 8006948:	f7fc fee6 	bl	8003718 <_ZN11ArduinoJson8V730HB226detail13StringBuilder4saveEv>
 800694c:	62f8      	str	r0, [r7, #44]	@ 0x2c
          member = object.addMember(savedKey, resources_);
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	699b      	ldr	r3, [r3, #24]
 8006952:	461a      	mov	r2, r3
 8006954:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006956:	68b8      	ldr	r0, [r7, #8]
 8006958:	f000 fb8c 	bl	8007074 <_ZN11ArduinoJson8V730HB226detail10ObjectData9addMemberIPNS1_10StringNodeEEEPNS1_11VariantDataET_PNS1_15ResourceManagerE>
 800695c:	6378      	str	r0, [r7, #52]	@ 0x34
          if (!member)
 800695e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006960:	2b00      	cmp	r3, #0
 8006962:	d107      	bne.n	8006974 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE+0x124>
            return DeserializationError::NoMemory;
 8006964:	2304      	movs	r3, #4
 8006966:	e05b      	b.n	8006a20 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE+0x1d0>
          member->clear(resources_);
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	699b      	ldr	r3, [r3, #24]
 800696c:	4619      	mov	r1, r3
 800696e:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8006970:	f7fc ffd6 	bl	8003920 <_ZN11ArduinoJson8V730HB226detail11VariantData5clearEPNS1_15ResourceManagerE>
        err = parseVariant(*member, memberFilter, nestingLimit.decrement());
 8006974:	463b      	mov	r3, r7
 8006976:	4618      	mov	r0, r3
 8006978:	f7fd f89c 	bl	8003ab4 <_ZNK11ArduinoJson8V730HB2221DeserializationOption12NestingLimit9decrementEv>
 800697c:	4603      	mov	r3, r0
 800697e:	4622      	mov	r2, r4
 8006980:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8006982:	68f8      	ldr	r0, [r7, #12]
 8006984:	f7ff fc0e 	bl	80061a4 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE>
 8006988:	4603      	mov	r3, r0
 800698a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
        if (err)
 800698e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8006992:	2b00      	cmp	r3, #0
 8006994:	d015      	beq.n	80069c2 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE+0x172>
          return err;
 8006996:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800699a:	e041      	b.n	8006a20 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE+0x1d0>
        err = skipVariant(nestingLimit.decrement());
 800699c:	463b      	mov	r3, r7
 800699e:	4618      	mov	r0, r3
 80069a0:	f7fd f888 	bl	8003ab4 <_ZNK11ArduinoJson8V730HB2221DeserializationOption12NestingLimit9decrementEv>
 80069a4:	4603      	mov	r3, r0
 80069a6:	4619      	mov	r1, r3
 80069a8:	68f8      	ldr	r0, [r7, #12]
 80069aa:	f000 faa1 	bl	8006ef0 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipVariantENS0_21DeserializationOption12NestingLimitE>
 80069ae:	4603      	mov	r3, r0
 80069b0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
        if (err)
 80069b4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d002      	beq.n	80069c2 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE+0x172>
          return err;
 80069bc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80069c0:	e02e      	b.n	8006a20 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE+0x1d0>
      err = skipSpacesAndComments();
 80069c2:	68f8      	ldr	r0, [r7, #12]
 80069c4:	f7ff fe2e 	bl	8006624 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE21skipSpacesAndCommentsEv>
 80069c8:	4603      	mov	r3, r0
 80069ca:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      if (err)
 80069ce:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d002      	beq.n	80069dc <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE+0x18c>
        return err;
 80069d6:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80069da:	e021      	b.n	8006a20 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE+0x1d0>
      if (eat('}'))
 80069dc:	217d      	movs	r1, #125	@ 0x7d
 80069de:	68f8      	ldr	r0, [r7, #12]
 80069e0:	f000 fa5c 	bl	8006e9c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE3eatEc>
 80069e4:	4603      	mov	r3, r0
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d001      	beq.n	80069ee <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE+0x19e>
        return DeserializationError::Ok;
 80069ea:	2300      	movs	r3, #0
 80069ec:	e018      	b.n	8006a20 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE+0x1d0>
      if (!eat(','))
 80069ee:	212c      	movs	r1, #44	@ 0x2c
 80069f0:	68f8      	ldr	r0, [r7, #12]
 80069f2:	f000 fa53 	bl	8006e9c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE3eatEc>
 80069f6:	4603      	mov	r3, r0
 80069f8:	f083 0301 	eor.w	r3, r3, #1
 80069fc:	b2db      	uxtb	r3, r3
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d001      	beq.n	8006a06 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE+0x1b6>
        return DeserializationError::InvalidInput;
 8006a02:	2303      	movs	r3, #3
 8006a04:	e00c      	b.n	8006a20 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE+0x1d0>
      err = skipSpacesAndComments();
 8006a06:	68f8      	ldr	r0, [r7, #12]
 8006a08:	f7ff fe0c 	bl	8006624 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE21skipSpacesAndCommentsEv>
 8006a0c:	4603      	mov	r3, r0
 8006a0e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      if (err)
 8006a12:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	f43f af43 	beq.w	80068a2 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_10ObjectDataET_NS0_21DeserializationOption12NestingLimitE+0x52>
        return err;
 8006a1c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
  }
 8006a20:	4618      	mov	r0, r3
 8006a22:	373c      	adds	r7, #60	@ 0x3c
 8006a24:	46bd      	mov	sp, r7
 8006a26:	bd90      	pop	{r4, r7, pc}

08006a28 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10skipObjectENS0_21DeserializationOption12NestingLimitE>:
  DeserializationError::Code skipObject(
 8006a28:	b580      	push	{r7, lr}
 8006a2a:	b084      	sub	sp, #16
 8006a2c:	af00      	add	r7, sp, #0
 8006a2e:	6078      	str	r0, [r7, #4]
 8006a30:	7039      	strb	r1, [r7, #0]
    if (nestingLimit.reached())
 8006a32:	463b      	mov	r3, r7
 8006a34:	4618      	mov	r0, r3
 8006a36:	f7fd f850 	bl	8003ada <_ZNK11ArduinoJson8V730HB2221DeserializationOption12NestingLimit7reachedEv>
 8006a3a:	4603      	mov	r3, r0
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d001      	beq.n	8006a44 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0x1c>
      return DeserializationError::TooDeep;
 8006a40:	2305      	movs	r3, #5
 8006a42:	e06d      	b.n	8006b20 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0xf8>
    move();
 8006a44:	6878      	ldr	r0, [r7, #4]
 8006a46:	f000 fa1c 	bl	8006e82 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE4moveEv>
    err = skipSpacesAndComments();
 8006a4a:	6878      	ldr	r0, [r7, #4]
 8006a4c:	f7ff fdea 	bl	8006624 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE21skipSpacesAndCommentsEv>
 8006a50:	4603      	mov	r3, r0
 8006a52:	73fb      	strb	r3, [r7, #15]
    if (err)
 8006a54:	7bfb      	ldrb	r3, [r7, #15]
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d001      	beq.n	8006a5e <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0x36>
      return err;
 8006a5a:	7bfb      	ldrb	r3, [r7, #15]
 8006a5c:	e060      	b.n	8006b20 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0xf8>
    if (eat('}'))
 8006a5e:	217d      	movs	r1, #125	@ 0x7d
 8006a60:	6878      	ldr	r0, [r7, #4]
 8006a62:	f000 fa1b 	bl	8006e9c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE3eatEc>
 8006a66:	4603      	mov	r3, r0
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d001      	beq.n	8006a70 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0x48>
      return DeserializationError::Ok;
 8006a6c:	2300      	movs	r3, #0
 8006a6e:	e057      	b.n	8006b20 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0xf8>
      err = skipKey();
 8006a70:	6878      	ldr	r0, [r7, #4]
 8006a72:	f000 fb54 	bl	800711e <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7skipKeyEv>
 8006a76:	4603      	mov	r3, r0
 8006a78:	73fb      	strb	r3, [r7, #15]
      if (err)
 8006a7a:	7bfb      	ldrb	r3, [r7, #15]
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d001      	beq.n	8006a84 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0x5c>
        return err;
 8006a80:	7bfb      	ldrb	r3, [r7, #15]
 8006a82:	e04d      	b.n	8006b20 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0xf8>
      err = skipSpacesAndComments();
 8006a84:	6878      	ldr	r0, [r7, #4]
 8006a86:	f7ff fdcd 	bl	8006624 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE21skipSpacesAndCommentsEv>
 8006a8a:	4603      	mov	r3, r0
 8006a8c:	73fb      	strb	r3, [r7, #15]
      if (err)
 8006a8e:	7bfb      	ldrb	r3, [r7, #15]
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d001      	beq.n	8006a98 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0x70>
        return err;
 8006a94:	7bfb      	ldrb	r3, [r7, #15]
 8006a96:	e043      	b.n	8006b20 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0xf8>
      if (!eat(':'))
 8006a98:	213a      	movs	r1, #58	@ 0x3a
 8006a9a:	6878      	ldr	r0, [r7, #4]
 8006a9c:	f000 f9fe 	bl	8006e9c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE3eatEc>
 8006aa0:	4603      	mov	r3, r0
 8006aa2:	f083 0301 	eor.w	r3, r3, #1
 8006aa6:	b2db      	uxtb	r3, r3
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d001      	beq.n	8006ab0 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0x88>
        return DeserializationError::InvalidInput;
 8006aac:	2303      	movs	r3, #3
 8006aae:	e037      	b.n	8006b20 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0xf8>
      err = skipVariant(nestingLimit.decrement());
 8006ab0:	463b      	mov	r3, r7
 8006ab2:	4618      	mov	r0, r3
 8006ab4:	f7fc fffe 	bl	8003ab4 <_ZNK11ArduinoJson8V730HB2221DeserializationOption12NestingLimit9decrementEv>
 8006ab8:	4603      	mov	r3, r0
 8006aba:	4619      	mov	r1, r3
 8006abc:	6878      	ldr	r0, [r7, #4]
 8006abe:	f000 fa17 	bl	8006ef0 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipVariantENS0_21DeserializationOption12NestingLimitE>
 8006ac2:	4603      	mov	r3, r0
 8006ac4:	73fb      	strb	r3, [r7, #15]
      if (err)
 8006ac6:	7bfb      	ldrb	r3, [r7, #15]
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d001      	beq.n	8006ad0 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0xa8>
        return err;
 8006acc:	7bfb      	ldrb	r3, [r7, #15]
 8006ace:	e027      	b.n	8006b20 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0xf8>
      err = skipSpacesAndComments();
 8006ad0:	6878      	ldr	r0, [r7, #4]
 8006ad2:	f7ff fda7 	bl	8006624 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE21skipSpacesAndCommentsEv>
 8006ad6:	4603      	mov	r3, r0
 8006ad8:	73fb      	strb	r3, [r7, #15]
      if (err)
 8006ada:	7bfb      	ldrb	r3, [r7, #15]
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d001      	beq.n	8006ae4 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0xbc>
        return err;
 8006ae0:	7bfb      	ldrb	r3, [r7, #15]
 8006ae2:	e01d      	b.n	8006b20 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0xf8>
      if (eat('}'))
 8006ae4:	217d      	movs	r1, #125	@ 0x7d
 8006ae6:	6878      	ldr	r0, [r7, #4]
 8006ae8:	f000 f9d8 	bl	8006e9c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE3eatEc>
 8006aec:	4603      	mov	r3, r0
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d001      	beq.n	8006af6 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0xce>
        return DeserializationError::Ok;
 8006af2:	2300      	movs	r3, #0
 8006af4:	e014      	b.n	8006b20 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0xf8>
      if (!eat(','))
 8006af6:	212c      	movs	r1, #44	@ 0x2c
 8006af8:	6878      	ldr	r0, [r7, #4]
 8006afa:	f000 f9cf 	bl	8006e9c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE3eatEc>
 8006afe:	4603      	mov	r3, r0
 8006b00:	f083 0301 	eor.w	r3, r3, #1
 8006b04:	b2db      	uxtb	r3, r3
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d001      	beq.n	8006b0e <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0xe6>
        return DeserializationError::InvalidInput;
 8006b0a:	2303      	movs	r3, #3
 8006b0c:	e008      	b.n	8006b20 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0xf8>
      err = skipSpacesAndComments();
 8006b0e:	6878      	ldr	r0, [r7, #4]
 8006b10:	f7ff fd88 	bl	8006624 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE21skipSpacesAndCommentsEv>
 8006b14:	4603      	mov	r3, r0
 8006b16:	73fb      	strb	r3, [r7, #15]
      if (err)
 8006b18:	7bfb      	ldrb	r3, [r7, #15]
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d0a8      	beq.n	8006a70 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0x48>
        return err;
 8006b1e:	7bfb      	ldrb	r3, [r7, #15]
  }
 8006b20:	4618      	mov	r0, r3
 8006b22:	3710      	adds	r7, #16
 8006b24:	46bd      	mov	sp, r7
 8006b26:	bd80      	pop	{r7, pc}

08006b28 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE16parseStringValueERNS1_11VariantDataE>:
  DeserializationError::Code parseStringValue(VariantData& variant) {
 8006b28:	b580      	push	{r7, lr}
 8006b2a:	b084      	sub	sp, #16
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	6078      	str	r0, [r7, #4]
 8006b30:	6039      	str	r1, [r7, #0]
    stringBuilder_.startString();
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	4618      	mov	r0, r3
 8006b36:	f7fc fdd7 	bl	80036e8 <_ZN11ArduinoJson8V730HB226detail13StringBuilder11startStringEv>
    err = parseQuotedString();
 8006b3a:	6878      	ldr	r0, [r7, #4]
 8006b3c:	f000 fb0b 	bl	8007156 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseQuotedStringEv>
 8006b40:	4603      	mov	r3, r0
 8006b42:	73fb      	strb	r3, [r7, #15]
    if (err)
 8006b44:	7bfb      	ldrb	r3, [r7, #15]
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d001      	beq.n	8006b4e <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE16parseStringValueERNS1_11VariantDataE+0x26>
      return err;
 8006b4a:	7bfb      	ldrb	r3, [r7, #15]
 8006b4c:	e009      	b.n	8006b62 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE16parseStringValueERNS1_11VariantDataE+0x3a>
    variant.setOwnedString(stringBuilder_.save());
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	4618      	mov	r0, r3
 8006b52:	f7fc fde1 	bl	8003718 <_ZN11ArduinoJson8V730HB226detail13StringBuilder4saveEv>
 8006b56:	4603      	mov	r3, r0
 8006b58:	4619      	mov	r1, r3
 8006b5a:	6838      	ldr	r0, [r7, #0]
 8006b5c:	f7fc f83f 	bl	8002bde <_ZN11ArduinoJson8V730HB226detail11VariantData14setOwnedStringEPNS1_10StringNodeE>
    return DeserializationError::Ok;
 8006b60:	2300      	movs	r3, #0
  }
 8006b62:	4618      	mov	r0, r3
 8006b64:	3710      	adds	r7, #16
 8006b66:	46bd      	mov	sp, r7
 8006b68:	bd80      	pop	{r7, pc}

08006b6a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE16skipQuotedStringEv>:
  DeserializationError::Code skipQuotedString() {
 8006b6a:	b580      	push	{r7, lr}
 8006b6c:	b084      	sub	sp, #16
 8006b6e:	af00      	add	r7, sp, #0
 8006b70:	6078      	str	r0, [r7, #4]
    const char stopChar = current();
 8006b72:	6878      	ldr	r0, [r7, #4]
 8006b74:	f7ff fd8c 	bl	8006690 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7currentEv>
 8006b78:	4603      	mov	r3, r0
 8006b7a:	73fb      	strb	r3, [r7, #15]
    move();
 8006b7c:	6878      	ldr	r0, [r7, #4]
 8006b7e:	f000 f980 	bl	8006e82 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE4moveEv>
      char c = current();
 8006b82:	6878      	ldr	r0, [r7, #4]
 8006b84:	f7ff fd84 	bl	8006690 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7currentEv>
 8006b88:	4603      	mov	r3, r0
 8006b8a:	73bb      	strb	r3, [r7, #14]
      move();
 8006b8c:	6878      	ldr	r0, [r7, #4]
 8006b8e:	f000 f978 	bl	8006e82 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE4moveEv>
      if (c == stopChar)
 8006b92:	7bba      	ldrb	r2, [r7, #14]
 8006b94:	7bfb      	ldrb	r3, [r7, #15]
 8006b96:	429a      	cmp	r2, r3
 8006b98:	d016      	beq.n	8006bc8 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE16skipQuotedStringEv+0x5e>
      if (c == '\0')
 8006b9a:	7bbb      	ldrb	r3, [r7, #14]
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d101      	bne.n	8006ba4 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE16skipQuotedStringEv+0x3a>
        return DeserializationError::IncompleteInput;
 8006ba0:	2302      	movs	r3, #2
 8006ba2:	e013      	b.n	8006bcc <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE16skipQuotedStringEv+0x62>
      if (c == '\\') {
 8006ba4:	7bbb      	ldrb	r3, [r7, #14]
 8006ba6:	2b5c      	cmp	r3, #92	@ 0x5c
 8006ba8:	d1eb      	bne.n	8006b82 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE16skipQuotedStringEv+0x18>
        if (current() != '\0')
 8006baa:	6878      	ldr	r0, [r7, #4]
 8006bac:	f7ff fd70 	bl	8006690 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7currentEv>
 8006bb0:	4603      	mov	r3, r0
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	bf14      	ite	ne
 8006bb6:	2301      	movne	r3, #1
 8006bb8:	2300      	moveq	r3, #0
 8006bba:	b2db      	uxtb	r3, r3
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d0e0      	beq.n	8006b82 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE16skipQuotedStringEv+0x18>
          move();
 8006bc0:	6878      	ldr	r0, [r7, #4]
 8006bc2:	f000 f95e 	bl	8006e82 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE4moveEv>
    for (;;) {
 8006bc6:	e7dc      	b.n	8006b82 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE16skipQuotedStringEv+0x18>
        break;
 8006bc8:	bf00      	nop
    return DeserializationError::Ok;
 8006bca:	2300      	movs	r3, #0
  }
 8006bcc:	4618      	mov	r0, r3
 8006bce:	3710      	adds	r7, #16
 8006bd0:	46bd      	mov	sp, r7
 8006bd2:	bd80      	pop	{r7, pc}

08006bd4 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipKeywordES5_>:
  DeserializationError::Code skipKeyword(const char* s) {
 8006bd4:	b580      	push	{r7, lr}
 8006bd6:	b084      	sub	sp, #16
 8006bd8:	af00      	add	r7, sp, #0
 8006bda:	6078      	str	r0, [r7, #4]
 8006bdc:	6039      	str	r1, [r7, #0]
    while (*s) {
 8006bde:	e016      	b.n	8006c0e <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipKeywordES5_+0x3a>
      char c = current();
 8006be0:	6878      	ldr	r0, [r7, #4]
 8006be2:	f7ff fd55 	bl	8006690 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7currentEv>
 8006be6:	4603      	mov	r3, r0
 8006be8:	73fb      	strb	r3, [r7, #15]
      if (c == '\0')
 8006bea:	7bfb      	ldrb	r3, [r7, #15]
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d101      	bne.n	8006bf4 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipKeywordES5_+0x20>
        return DeserializationError::IncompleteInput;
 8006bf0:	2302      	movs	r3, #2
 8006bf2:	e011      	b.n	8006c18 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipKeywordES5_+0x44>
      if (*s != c)
 8006bf4:	683b      	ldr	r3, [r7, #0]
 8006bf6:	781b      	ldrb	r3, [r3, #0]
 8006bf8:	7bfa      	ldrb	r2, [r7, #15]
 8006bfa:	429a      	cmp	r2, r3
 8006bfc:	d001      	beq.n	8006c02 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipKeywordES5_+0x2e>
        return DeserializationError::InvalidInput;
 8006bfe:	2303      	movs	r3, #3
 8006c00:	e00a      	b.n	8006c18 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipKeywordES5_+0x44>
      ++s;
 8006c02:	683b      	ldr	r3, [r7, #0]
 8006c04:	3301      	adds	r3, #1
 8006c06:	603b      	str	r3, [r7, #0]
      move();
 8006c08:	6878      	ldr	r0, [r7, #4]
 8006c0a:	f000 f93a 	bl	8006e82 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE4moveEv>
    while (*s) {
 8006c0e:	683b      	ldr	r3, [r7, #0]
 8006c10:	781b      	ldrb	r3, [r3, #0]
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d1e4      	bne.n	8006be0 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipKeywordES5_+0xc>
    return DeserializationError::Ok;
 8006c16:	2300      	movs	r3, #0
  }
 8006c18:	4618      	mov	r0, r3
 8006c1a:	3710      	adds	r7, #16
 8006c1c:	46bd      	mov	sp, r7
 8006c1e:	bd80      	pop	{r7, pc}

08006c20 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseNumericValueERNS1_11VariantDataE>:
  DeserializationError::Code parseNumericValue(VariantData& result) {
 8006c20:	b580      	push	{r7, lr}
 8006c22:	b08a      	sub	sp, #40	@ 0x28
 8006c24:	af02      	add	r7, sp, #8
 8006c26:	6078      	str	r0, [r7, #4]
 8006c28:	6039      	str	r1, [r7, #0]
    uint8_t n = 0;
 8006c2a:	2300      	movs	r3, #0
 8006c2c:	77fb      	strb	r3, [r7, #31]
    char c = current();
 8006c2e:	6878      	ldr	r0, [r7, #4]
 8006c30:	f7ff fd2e 	bl	8006690 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7currentEv>
 8006c34:	4603      	mov	r3, r0
 8006c36:	77bb      	strb	r3, [r7, #30]
    while (canBeInNumber(c) && n < 63) {
 8006c38:	e00f      	b.n	8006c5a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseNumericValueERNS1_11VariantDataE+0x3a>
      move();
 8006c3a:	6878      	ldr	r0, [r7, #4]
 8006c3c:	f000 f921 	bl	8006e82 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE4moveEv>
      buffer_[n++] = c;
 8006c40:	7fba      	ldrb	r2, [r7, #30]
 8006c42:	7ffb      	ldrb	r3, [r7, #31]
 8006c44:	1c59      	adds	r1, r3, #1
 8006c46:	77f9      	strb	r1, [r7, #31]
 8006c48:	4619      	mov	r1, r3
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	440b      	add	r3, r1
 8006c4e:	771a      	strb	r2, [r3, #28]
      c = current();
 8006c50:	6878      	ldr	r0, [r7, #4]
 8006c52:	f7ff fd1d 	bl	8006690 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7currentEv>
 8006c56:	4603      	mov	r3, r0
 8006c58:	77bb      	strb	r3, [r7, #30]
    while (canBeInNumber(c) && n < 63) {
 8006c5a:	7fbb      	ldrb	r3, [r7, #30]
 8006c5c:	4618      	mov	r0, r3
 8006c5e:	f000 fafb 	bl	8007258 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE13canBeInNumberEc>
 8006c62:	4603      	mov	r3, r0
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d004      	beq.n	8006c72 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseNumericValueERNS1_11VariantDataE+0x52>
 8006c68:	7ffb      	ldrb	r3, [r7, #31]
 8006c6a:	2b3e      	cmp	r3, #62	@ 0x3e
 8006c6c:	d801      	bhi.n	8006c72 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseNumericValueERNS1_11VariantDataE+0x52>
 8006c6e:	2301      	movs	r3, #1
 8006c70:	e000      	b.n	8006c74 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseNumericValueERNS1_11VariantDataE+0x54>
 8006c72:	2300      	movs	r3, #0
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d1e0      	bne.n	8006c3a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseNumericValueERNS1_11VariantDataE+0x1a>
    buffer_[n] = 0;
 8006c78:	7ffb      	ldrb	r3, [r7, #31]
 8006c7a:	687a      	ldr	r2, [r7, #4]
 8006c7c:	4413      	add	r3, r2
 8006c7e:	2200      	movs	r2, #0
 8006c80:	771a      	strb	r2, [r3, #28]
    auto number = parseNumber(buffer_);
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	f103 021c 	add.w	r2, r3, #28
 8006c88:	f107 0308 	add.w	r3, r7, #8
 8006c8c:	4611      	mov	r1, r2
 8006c8e:	4618      	mov	r0, r3
 8006c90:	f7fd f8e0 	bl	8003e54 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc>
    switch (number.type()) {
 8006c94:	f107 0308 	add.w	r3, r7, #8
 8006c98:	4618      	mov	r0, r3
 8006c9a:	f7fd f894 	bl	8003dc6 <_ZNK11ArduinoJson8V730HB226detail6Number4typeEv>
 8006c9e:	4603      	mov	r3, r0
 8006ca0:	3b01      	subs	r3, #1
 8006ca2:	2b03      	cmp	r3, #3
 8006ca4:	d85e      	bhi.n	8006d64 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseNumericValueERNS1_11VariantDataE+0x144>
 8006ca6:	a201      	add	r2, pc, #4	@ (adr r2, 8006cac <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseNumericValueERNS1_11VariantDataE+0x8c>)
 8006ca8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cac:	08006d0d 	.word	0x08006d0d
 8006cb0:	08006ce5 	.word	0x08006ce5
 8006cb4:	08006cbd 	.word	0x08006cbd
 8006cb8:	08006d39 	.word	0x08006d39
        if (result.setInteger(number.asUnsignedInteger(), resources_))
 8006cbc:	f107 0308 	add.w	r3, r7, #8
 8006cc0:	4618      	mov	r0, r3
 8006cc2:	f7fd f89a 	bl	8003dfa <_ZNK11ArduinoJson8V730HB226detail6Number17asUnsignedIntegerEv>
 8006cc6:	4602      	mov	r2, r0
 8006cc8:	460b      	mov	r3, r1
 8006cca:	6879      	ldr	r1, [r7, #4]
 8006ccc:	6989      	ldr	r1, [r1, #24]
 8006cce:	9100      	str	r1, [sp, #0]
 8006cd0:	6838      	ldr	r0, [r7, #0]
 8006cd2:	f000 fae5 	bl	80072a0 <_ZN11ArduinoJson8V730HB226detail11VariantData10setIntegerIyEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEbE4typeES6_PNS1_15ResourceManagerE>
 8006cd6:	4603      	mov	r3, r0
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d001      	beq.n	8006ce0 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseNumericValueERNS1_11VariantDataE+0xc0>
          return DeserializationError::Ok;
 8006cdc:	2300      	movs	r3, #0
 8006cde:	e042      	b.n	8006d66 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseNumericValueERNS1_11VariantDataE+0x146>
          return DeserializationError::NoMemory;
 8006ce0:	2304      	movs	r3, #4
 8006ce2:	e040      	b.n	8006d66 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseNumericValueERNS1_11VariantDataE+0x146>
        if (result.setInteger(number.asSignedInteger(), resources_))
 8006ce4:	f107 0308 	add.w	r3, r7, #8
 8006ce8:	4618      	mov	r0, r3
 8006cea:	f7fd f878 	bl	8003dde <_ZNK11ArduinoJson8V730HB226detail6Number15asSignedIntegerEv>
 8006cee:	4602      	mov	r2, r0
 8006cf0:	460b      	mov	r3, r1
 8006cf2:	6879      	ldr	r1, [r7, #4]
 8006cf4:	6989      	ldr	r1, [r1, #24]
 8006cf6:	9100      	str	r1, [sp, #0]
 8006cf8:	6838      	ldr	r0, [r7, #0]
 8006cfa:	f000 fb13 	bl	8007324 <_ZN11ArduinoJson8V730HB226detail11VariantData10setIntegerIxEENS1_9enable_ifIXsrNS1_9is_signedIT_EE5valueEbE4typeES6_PNS1_15ResourceManagerE>
 8006cfe:	4603      	mov	r3, r0
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d001      	beq.n	8006d08 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseNumericValueERNS1_11VariantDataE+0xe8>
          return DeserializationError::Ok;
 8006d04:	2300      	movs	r3, #0
 8006d06:	e02e      	b.n	8006d66 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseNumericValueERNS1_11VariantDataE+0x146>
          return DeserializationError::NoMemory;
 8006d08:	2304      	movs	r3, #4
 8006d0a:	e02c      	b.n	8006d66 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseNumericValueERNS1_11VariantDataE+0x146>
        if (result.setFloat(number.asFloat(), resources_))
 8006d0c:	f107 0308 	add.w	r3, r7, #8
 8006d10:	4618      	mov	r0, r3
 8006d12:	f7fd f880 	bl	8003e16 <_ZNK11ArduinoJson8V730HB226detail6Number7asFloatEv>
 8006d16:	eef0 7a40 	vmov.f32	s15, s0
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	699b      	ldr	r3, [r3, #24]
 8006d1e:	4619      	mov	r1, r3
 8006d20:	eeb0 0a67 	vmov.f32	s0, s15
 8006d24:	6838      	ldr	r0, [r7, #0]
 8006d26:	f000 fb3f 	bl	80073a8 <_ZN11ArduinoJson8V730HB226detail11VariantData8setFloatIfEENS1_9enable_ifIXeqstT_Li4EEbE4typeES5_PNS1_15ResourceManagerE>
 8006d2a:	4603      	mov	r3, r0
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d001      	beq.n	8006d34 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseNumericValueERNS1_11VariantDataE+0x114>
          return DeserializationError::Ok;
 8006d30:	2300      	movs	r3, #0
 8006d32:	e018      	b.n	8006d66 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseNumericValueERNS1_11VariantDataE+0x146>
          return DeserializationError::NoMemory;
 8006d34:	2304      	movs	r3, #4
 8006d36:	e016      	b.n	8006d66 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseNumericValueERNS1_11VariantDataE+0x146>
        if (result.setFloat(number.asDouble(), resources_))
 8006d38:	f107 0308 	add.w	r3, r7, #8
 8006d3c:	4618      	mov	r0, r3
 8006d3e:	f7fd f879 	bl	8003e34 <_ZNK11ArduinoJson8V730HB226detail6Number8asDoubleEv>
 8006d42:	eeb0 7b40 	vmov.f64	d7, d0
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	699b      	ldr	r3, [r3, #24]
 8006d4a:	4619      	mov	r1, r3
 8006d4c:	eeb0 0b47 	vmov.f64	d0, d7
 8006d50:	6838      	ldr	r0, [r7, #0]
 8006d52:	f000 fb3d 	bl	80073d0 <_ZN11ArduinoJson8V730HB226detail11VariantData8setFloatIdEENS1_9enable_ifIXeqstT_Li8EEbE4typeES5_PNS1_15ResourceManagerE>
 8006d56:	4603      	mov	r3, r0
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d001      	beq.n	8006d60 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseNumericValueERNS1_11VariantDataE+0x140>
          return DeserializationError::Ok;
 8006d5c:	2300      	movs	r3, #0
 8006d5e:	e002      	b.n	8006d66 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseNumericValueERNS1_11VariantDataE+0x146>
          return DeserializationError::NoMemory;
 8006d60:	2304      	movs	r3, #4
 8006d62:	e000      	b.n	8006d66 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseNumericValueERNS1_11VariantDataE+0x146>
        return DeserializationError::InvalidInput;
 8006d64:	2303      	movs	r3, #3
  }
 8006d66:	4618      	mov	r0, r3
 8006d68:	3720      	adds	r7, #32
 8006d6a:	46bd      	mov	sp, r7
 8006d6c:	bd80      	pop	{r7, pc}
 8006d6e:	bf00      	nop

08006d70 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE16skipNumericValueEv>:
  DeserializationError::Code skipNumericValue() {
 8006d70:	b580      	push	{r7, lr}
 8006d72:	b084      	sub	sp, #16
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	6078      	str	r0, [r7, #4]
    char c = current();
 8006d78:	6878      	ldr	r0, [r7, #4]
 8006d7a:	f7ff fc89 	bl	8006690 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7currentEv>
 8006d7e:	4603      	mov	r3, r0
 8006d80:	73fb      	strb	r3, [r7, #15]
    while (canBeInNumber(c)) {
 8006d82:	e007      	b.n	8006d94 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE16skipNumericValueEv+0x24>
      move();
 8006d84:	6878      	ldr	r0, [r7, #4]
 8006d86:	f000 f87c 	bl	8006e82 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE4moveEv>
      c = current();
 8006d8a:	6878      	ldr	r0, [r7, #4]
 8006d8c:	f7ff fc80 	bl	8006690 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7currentEv>
 8006d90:	4603      	mov	r3, r0
 8006d92:	73fb      	strb	r3, [r7, #15]
    while (canBeInNumber(c)) {
 8006d94:	7bfb      	ldrb	r3, [r7, #15]
 8006d96:	4618      	mov	r0, r3
 8006d98:	f000 fa5e 	bl	8007258 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE13canBeInNumberEc>
 8006d9c:	4603      	mov	r3, r0
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d1f0      	bne.n	8006d84 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE16skipNumericValueEv+0x14>
    return DeserializationError::Ok;
 8006da2:	2300      	movs	r3, #0
  }
 8006da4:	4618      	mov	r0, r3
 8006da6:	3710      	adds	r7, #16
 8006da8:	46bd      	mov	sp, r7
 8006daa:	bd80      	pop	{r7, pc}

08006dac <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerIKNS0_10JsonObjectEEEDTcldtfp_18getResourceManagerEERT_>:
  static auto getResourceManager(TClient& client)
 8006dac:	b580      	push	{r7, lr}
 8006dae:	b082      	sub	sp, #8
 8006db0:	af00      	add	r7, sp, #0
 8006db2:	6078      	str	r0, [r7, #4]
    return client.getResourceManager();
 8006db4:	6878      	ldr	r0, [r7, #4]
 8006db6:	f7fc f990 	bl	80030da <_ZNK11ArduinoJson8V730HB2210JsonObject18getResourceManagerEv>
 8006dba:	4603      	mov	r3, r0
  }
 8006dbc:	4618      	mov	r0, r3
 8006dbe:	3708      	adds	r7, #8
 8006dc0:	46bd      	mov	sp, r7
 8006dc2:	bd80      	pop	{r7, pc}

08006dc4 <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIfLj4EE5forgeEm>:
  static T forge(uint32_t bits) {
 8006dc4:	b580      	push	{r7, lr}
 8006dc6:	b082      	sub	sp, #8
 8006dc8:	af00      	add	r7, sp, #0
 8006dca:	6078      	str	r0, [r7, #4]
    return alias_cast<T>(bits);
 8006dcc:	6878      	ldr	r0, [r7, #4]
 8006dce:	f000 fb4c 	bl	800746a <_ZN11ArduinoJson8V730HB226detail10alias_castIfmEET_T0_>
 8006dd2:	eef0 7a40 	vmov.f32	s15, s0
  }
 8006dd6:	eeb0 0a67 	vmov.f32	s0, s15
 8006dda:	3708      	adds	r7, #8
 8006ddc:	46bd      	mov	sp, r7
 8006dde:	bd80      	pop	{r7, pc}

08006de0 <_ZNK11ArduinoJson8V730HB226detail11MemberProxyINS0_10JsonObjectENS1_9RamStringEE7getDataEv>:
  VariantData* getData() const {
 8006de0:	b590      	push	{r4, r7, lr}
 8006de2:	b085      	sub	sp, #20
 8006de4:	af02      	add	r7, sp, #8
 8006de6:	6078      	str	r0, [r7, #4]
        VariantAttorney::getData(upstream_), key_,
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	3304      	adds	r3, #4
 8006dec:	4618      	mov	r0, r3
 8006dee:	f000 fb4c 	bl	800748a <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataIKNS0_10JsonObjectEEEDTcldtfp_7getDataEERT_>
 8006df2:	4604      	mov	r4, r0
        VariantAttorney::getResourceManager(upstream_));
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	3304      	adds	r3, #4
 8006df8:	4618      	mov	r0, r3
 8006dfa:	f7ff ffd7 	bl	8006dac <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerIKNS0_10JsonObjectEEEDTcldtfp_18getResourceManagerEERT_>
 8006dfe:	4602      	mov	r2, r0
    return VariantData::getMember(
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	9200      	str	r2, [sp, #0]
 8006e04:	330c      	adds	r3, #12
 8006e06:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006e08:	4620      	mov	r0, r4
 8006e0a:	f000 f821 	bl	8006e50 <_ZN11ArduinoJson8V730HB226detail11VariantData9getMemberINS1_9RamStringEEEPS2_PKS2_T_PKNS1_15ResourceManagerE>
 8006e0e:	4603      	mov	r3, r0
  }
 8006e10:	4618      	mov	r0, r3
 8006e12:	370c      	adds	r7, #12
 8006e14:	46bd      	mov	sp, r7
 8006e16:	bd90      	pop	{r4, r7, pc}

08006e18 <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIfLj4EE11highest_forImEEfPNS1_9enable_ifIXaaaasrNS1_11is_integralIT_EE5valuesrNS1_11is_unsignedIS7_EE5valueeqstS7_Li4EEjE4typeE>:
  static T highest_for(
 8006e18:	b580      	push	{r7, lr}
 8006e1a:	b082      	sub	sp, #8
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	6078      	str	r0, [r7, #4]
    return forge(0x4F7FFFFF);  // 4.29496704E9
 8006e20:	4804      	ldr	r0, [pc, #16]	@ (8006e34 <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIfLj4EE11highest_forImEEfPNS1_9enable_ifIXaaaasrNS1_11is_integralIT_EE5valuesrNS1_11is_unsignedIS7_EE5valueeqstS7_Li4EEjE4typeE+0x1c>)
 8006e22:	f7ff ffcf 	bl	8006dc4 <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIfLj4EE5forgeEm>
 8006e26:	eef0 7a40 	vmov.f32	s15, s0
  }
 8006e2a:	eeb0 0a67 	vmov.f32	s0, s15
 8006e2e:	3708      	adds	r7, #8
 8006e30:	46bd      	mov	sp, r7
 8006e32:	bd80      	pop	{r7, pc}
 8006e34:	4f7fffff 	.word	0x4f7fffff

08006e38 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataINS0_12JsonDocumentEEEDTcldtfp_7getDataEERT_>:
  static auto getData(TClient& client) -> decltype(client.getData()) {
 8006e38:	b580      	push	{r7, lr}
 8006e3a:	b082      	sub	sp, #8
 8006e3c:	af00      	add	r7, sp, #0
 8006e3e:	6078      	str	r0, [r7, #4]
    return client.getData();
 8006e40:	6878      	ldr	r0, [r7, #4]
 8006e42:	f7fc f9a0 	bl	8003186 <_ZN11ArduinoJson8V730HB2212JsonDocument7getDataEv>
 8006e46:	4603      	mov	r3, r0
  }
 8006e48:	4618      	mov	r0, r3
 8006e4a:	3708      	adds	r7, #8
 8006e4c:	46bd      	mov	sp, r7
 8006e4e:	bd80      	pop	{r7, pc}

08006e50 <_ZN11ArduinoJson8V730HB226detail11VariantData9getMemberINS1_9RamStringEEEPS2_PKS2_T_PKNS1_15ResourceManagerE>:
  static VariantData* getMember(const VariantData* var, TAdaptedString key,
 8006e50:	b580      	push	{r7, lr}
 8006e52:	b086      	sub	sp, #24
 8006e54:	af02      	add	r7, sp, #8
 8006e56:	60f8      	str	r0, [r7, #12]
 8006e58:	4638      	mov	r0, r7
 8006e5a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    if (!var)
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d101      	bne.n	8006e68 <_ZN11ArduinoJson8V730HB226detail11VariantData9getMemberINS1_9RamStringEEEPS2_PKS2_T_PKNS1_15ResourceManagerE+0x18>
      return 0;
 8006e64:	2300      	movs	r3, #0
 8006e66:	e008      	b.n	8006e7a <_ZN11ArduinoJson8V730HB226detail11VariantData9getMemberINS1_9RamStringEEEPS2_PKS2_T_PKNS1_15ResourceManagerE+0x2a>
    return var->getMember(key, resources);
 8006e68:	68f8      	ldr	r0, [r7, #12]
 8006e6a:	69bb      	ldr	r3, [r7, #24]
 8006e6c:	9300      	str	r3, [sp, #0]
 8006e6e:	463b      	mov	r3, r7
 8006e70:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006e72:	f000 fb16 	bl	80074a2 <_ZNK11ArduinoJson8V730HB226detail11VariantData9getMemberINS1_9RamStringEEEPS2_T_PKNS1_15ResourceManagerE>
 8006e76:	4603      	mov	r3, r0
 8006e78:	bf00      	nop
  }
 8006e7a:	4618      	mov	r0, r3
 8006e7c:	3710      	adds	r7, #16
 8006e7e:	46bd      	mov	sp, r7
 8006e80:	bd80      	pop	{r7, pc}

08006e82 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE4moveEv>:
  void move() {
 8006e82:	b580      	push	{r7, lr}
 8006e84:	b082      	sub	sp, #8
 8006e86:	af00      	add	r7, sp, #0
 8006e88:	6078      	str	r0, [r7, #4]
    latch_.clear();
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	3310      	adds	r3, #16
 8006e8e:	4618      	mov	r0, r3
 8006e90:	f000 fb1c 	bl	80074cc <_ZN11ArduinoJson8V730HB226detail5LatchINS1_6ReaderIPKcvEEE5clearEv>
  }
 8006e94:	bf00      	nop
 8006e96:	3708      	adds	r7, #8
 8006e98:	46bd      	mov	sp, r7
 8006e9a:	bd80      	pop	{r7, pc}

08006e9c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE3eatEc>:
  bool eat(char charToSkip) {
 8006e9c:	b580      	push	{r7, lr}
 8006e9e:	b082      	sub	sp, #8
 8006ea0:	af00      	add	r7, sp, #0
 8006ea2:	6078      	str	r0, [r7, #4]
 8006ea4:	460b      	mov	r3, r1
 8006ea6:	70fb      	strb	r3, [r7, #3]
    if (current() != charToSkip)
 8006ea8:	6878      	ldr	r0, [r7, #4]
 8006eaa:	f7ff fbf1 	bl	8006690 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7currentEv>
 8006eae:	4603      	mov	r3, r0
 8006eb0:	461a      	mov	r2, r3
 8006eb2:	78fb      	ldrb	r3, [r7, #3]
 8006eb4:	4293      	cmp	r3, r2
 8006eb6:	bf14      	ite	ne
 8006eb8:	2301      	movne	r3, #1
 8006eba:	2300      	moveq	r3, #0
 8006ebc:	b2db      	uxtb	r3, r3
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d001      	beq.n	8006ec6 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE3eatEc+0x2a>
      return false;
 8006ec2:	2300      	movs	r3, #0
 8006ec4:	e003      	b.n	8006ece <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE3eatEc+0x32>
    move();
 8006ec6:	6878      	ldr	r0, [r7, #4]
 8006ec8:	f7ff ffdb 	bl	8006e82 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE4moveEv>
    return true;
 8006ecc:	2301      	movs	r3, #1
  }
 8006ece:	4618      	mov	r0, r3
 8006ed0:	3708      	adds	r7, #8
 8006ed2:	46bd      	mov	sp, r7
 8006ed4:	bd80      	pop	{r7, pc}

08006ed6 <_ZNK11ArduinoJson8V730HB226detail14AllowAllFilterixImEES2_RKT_>:

  template <typename TKey>
  AllowAllFilter operator[](const TKey&) const {
 8006ed6:	b480      	push	{r7}
 8006ed8:	b083      	sub	sp, #12
 8006eda:	af00      	add	r7, sp, #0
 8006edc:	6078      	str	r0, [r7, #4]
 8006ede:	6039      	str	r1, [r7, #0]
    return AllowAllFilter();
 8006ee0:	bf00      	nop
  }
 8006ee2:	4618      	mov	r0, r3
 8006ee4:	370c      	adds	r7, #12
 8006ee6:	46bd      	mov	sp, r7
 8006ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eec:	4770      	bx	lr
	...

08006ef0 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipVariantENS0_21DeserializationOption12NestingLimitE>:
  DeserializationError::Code skipVariant(
 8006ef0:	b580      	push	{r7, lr}
 8006ef2:	b084      	sub	sp, #16
 8006ef4:	af00      	add	r7, sp, #0
 8006ef6:	6078      	str	r0, [r7, #4]
 8006ef8:	7039      	strb	r1, [r7, #0]
    err = skipSpacesAndComments();
 8006efa:	6878      	ldr	r0, [r7, #4]
 8006efc:	f7ff fb92 	bl	8006624 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE21skipSpacesAndCommentsEv>
 8006f00:	4603      	mov	r3, r0
 8006f02:	73fb      	strb	r3, [r7, #15]
    if (err)
 8006f04:	7bfb      	ldrb	r3, [r7, #15]
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d001      	beq.n	8006f0e <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipVariantENS0_21DeserializationOption12NestingLimitE+0x1e>
      return err;
 8006f0a:	7bfb      	ldrb	r3, [r7, #15]
 8006f0c:	e07c      	b.n	8007008 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipVariantENS0_21DeserializationOption12NestingLimitE+0x118>
    switch (current()) {
 8006f0e:	6878      	ldr	r0, [r7, #4]
 8006f10:	f7ff fbbe 	bl	8006690 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7currentEv>
 8006f14:	4603      	mov	r3, r0
 8006f16:	2b7b      	cmp	r3, #123	@ 0x7b
 8006f18:	dc71      	bgt.n	8006ffe <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipVariantENS0_21DeserializationOption12NestingLimitE+0x10e>
 8006f1a:	2b5b      	cmp	r3, #91	@ 0x5b
 8006f1c:	da04      	bge.n	8006f28 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipVariantENS0_21DeserializationOption12NestingLimitE+0x38>
 8006f1e:	2b22      	cmp	r3, #34	@ 0x22
 8006f20:	d056      	beq.n	8006fd0 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipVariantENS0_21DeserializationOption12NestingLimitE+0xe0>
 8006f22:	2b27      	cmp	r3, #39	@ 0x27
 8006f24:	d054      	beq.n	8006fd0 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipVariantENS0_21DeserializationOption12NestingLimitE+0xe0>
 8006f26:	e06a      	b.n	8006ffe <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipVariantENS0_21DeserializationOption12NestingLimitE+0x10e>
 8006f28:	3b5b      	subs	r3, #91	@ 0x5b
 8006f2a:	2b20      	cmp	r3, #32
 8006f2c:	d867      	bhi.n	8006ffe <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipVariantENS0_21DeserializationOption12NestingLimitE+0x10e>
 8006f2e:	a201      	add	r2, pc, #4	@ (adr r2, 8006f34 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipVariantENS0_21DeserializationOption12NestingLimitE+0x44>)
 8006f30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f34:	08006fb9 	.word	0x08006fb9
 8006f38:	08006fff 	.word	0x08006fff
 8006f3c:	08006fff 	.word	0x08006fff
 8006f40:	08006fff 	.word	0x08006fff
 8006f44:	08006fff 	.word	0x08006fff
 8006f48:	08006fff 	.word	0x08006fff
 8006f4c:	08006fff 	.word	0x08006fff
 8006f50:	08006fff 	.word	0x08006fff
 8006f54:	08006fff 	.word	0x08006fff
 8006f58:	08006fff 	.word	0x08006fff
 8006f5c:	08006fff 	.word	0x08006fff
 8006f60:	08006fe7 	.word	0x08006fe7
 8006f64:	08006fff 	.word	0x08006fff
 8006f68:	08006fff 	.word	0x08006fff
 8006f6c:	08006fff 	.word	0x08006fff
 8006f70:	08006fff 	.word	0x08006fff
 8006f74:	08006fff 	.word	0x08006fff
 8006f78:	08006fff 	.word	0x08006fff
 8006f7c:	08006fff 	.word	0x08006fff
 8006f80:	08006ff3 	.word	0x08006ff3
 8006f84:	08006fff 	.word	0x08006fff
 8006f88:	08006fff 	.word	0x08006fff
 8006f8c:	08006fff 	.word	0x08006fff
 8006f90:	08006fff 	.word	0x08006fff
 8006f94:	08006fff 	.word	0x08006fff
 8006f98:	08006fdb 	.word	0x08006fdb
 8006f9c:	08006fff 	.word	0x08006fff
 8006fa0:	08006fff 	.word	0x08006fff
 8006fa4:	08006fff 	.word	0x08006fff
 8006fa8:	08006fff 	.word	0x08006fff
 8006fac:	08006fff 	.word	0x08006fff
 8006fb0:	08006fff 	.word	0x08006fff
 8006fb4:	08006fc5 	.word	0x08006fc5
        return skipArray(nestingLimit);
 8006fb8:	7839      	ldrb	r1, [r7, #0]
 8006fba:	6878      	ldr	r0, [r7, #4]
 8006fbc:	f7ff fc05 	bl	80067ca <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9skipArrayENS0_21DeserializationOption12NestingLimitE>
 8006fc0:	4603      	mov	r3, r0
 8006fc2:	e021      	b.n	8007008 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipVariantENS0_21DeserializationOption12NestingLimitE+0x118>
        return skipObject(nestingLimit);
 8006fc4:	7839      	ldrb	r1, [r7, #0]
 8006fc6:	6878      	ldr	r0, [r7, #4]
 8006fc8:	f7ff fd2e 	bl	8006a28 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE10skipObjectENS0_21DeserializationOption12NestingLimitE>
 8006fcc:	4603      	mov	r3, r0
 8006fce:	e01b      	b.n	8007008 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipVariantENS0_21DeserializationOption12NestingLimitE+0x118>
        return skipQuotedString();
 8006fd0:	6878      	ldr	r0, [r7, #4]
 8006fd2:	f7ff fdca 	bl	8006b6a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE16skipQuotedStringEv>
 8006fd6:	4603      	mov	r3, r0
 8006fd8:	e016      	b.n	8007008 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipVariantENS0_21DeserializationOption12NestingLimitE+0x118>
        return skipKeyword("true");
 8006fda:	490d      	ldr	r1, [pc, #52]	@ (8007010 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipVariantENS0_21DeserializationOption12NestingLimitE+0x120>)
 8006fdc:	6878      	ldr	r0, [r7, #4]
 8006fde:	f7ff fdf9 	bl	8006bd4 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipKeywordES5_>
 8006fe2:	4603      	mov	r3, r0
 8006fe4:	e010      	b.n	8007008 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipVariantENS0_21DeserializationOption12NestingLimitE+0x118>
        return skipKeyword("false");
 8006fe6:	490b      	ldr	r1, [pc, #44]	@ (8007014 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipVariantENS0_21DeserializationOption12NestingLimitE+0x124>)
 8006fe8:	6878      	ldr	r0, [r7, #4]
 8006fea:	f7ff fdf3 	bl	8006bd4 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipKeywordES5_>
 8006fee:	4603      	mov	r3, r0
 8006ff0:	e00a      	b.n	8007008 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipVariantENS0_21DeserializationOption12NestingLimitE+0x118>
        return skipKeyword("null");
 8006ff2:	4909      	ldr	r1, [pc, #36]	@ (8007018 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipVariantENS0_21DeserializationOption12NestingLimitE+0x128>)
 8006ff4:	6878      	ldr	r0, [r7, #4]
 8006ff6:	f7ff fded 	bl	8006bd4 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipKeywordES5_>
 8006ffa:	4603      	mov	r3, r0
 8006ffc:	e004      	b.n	8007008 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE11skipVariantENS0_21DeserializationOption12NestingLimitE+0x118>
        return skipNumericValue();
 8006ffe:	6878      	ldr	r0, [r7, #4]
 8007000:	f7ff feb6 	bl	8006d70 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE16skipNumericValueEv>
 8007004:	4603      	mov	r3, r0
 8007006:	bf00      	nop
  }
 8007008:	4618      	mov	r0, r3
 800700a:	3710      	adds	r7, #16
 800700c:	46bd      	mov	sp, r7
 800700e:	bd80      	pop	{r7, pc}
 8007010:	0801fabc 	.word	0x0801fabc
 8007014:	0801fac4 	.word	0x0801fac4
 8007018:	0801facc 	.word	0x0801facc

0800701c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE8parseKeyEv>:
  DeserializationError::Code parseKey() {
 800701c:	b580      	push	{r7, lr}
 800701e:	b082      	sub	sp, #8
 8007020:	af00      	add	r7, sp, #0
 8007022:	6078      	str	r0, [r7, #4]
    stringBuilder_.startString();
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	4618      	mov	r0, r3
 8007028:	f7fc fb5e 	bl	80036e8 <_ZN11ArduinoJson8V730HB226detail13StringBuilder11startStringEv>
    if (isQuote(current())) {
 800702c:	6878      	ldr	r0, [r7, #4]
 800702e:	f7ff fb2f 	bl	8006690 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7currentEv>
 8007032:	4603      	mov	r3, r0
 8007034:	4618      	mov	r0, r3
 8007036:	f000 fa6c 	bl	8007512 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7isQuoteEc>
 800703a:	4603      	mov	r3, r0
 800703c:	2b00      	cmp	r3, #0
 800703e:	d004      	beq.n	800704a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE8parseKeyEv+0x2e>
      return parseQuotedString();
 8007040:	6878      	ldr	r0, [r7, #4]
 8007042:	f000 f888 	bl	8007156 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseQuotedStringEv>
 8007046:	4603      	mov	r3, r0
 8007048:	e004      	b.n	8007054 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE8parseKeyEv+0x38>
      return parseNonQuotedString();
 800704a:	6878      	ldr	r0, [r7, #4]
 800704c:	f000 fa75 	bl	800753a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE20parseNonQuotedStringEv>
 8007050:	4603      	mov	r3, r0
 8007052:	bf00      	nop
  }
 8007054:	4618      	mov	r0, r3
 8007056:	3708      	adds	r7, #8
 8007058:	46bd      	mov	sp, r7
 800705a:	bd80      	pop	{r7, pc}

0800705c <_ZNK11ArduinoJson8V730HB226detail14AllowAllFilterixINS0_10JsonStringEEES2_RKT_>:
  AllowAllFilter operator[](const TKey&) const {
 800705c:	b480      	push	{r7}
 800705e:	b083      	sub	sp, #12
 8007060:	af00      	add	r7, sp, #0
 8007062:	6078      	str	r0, [r7, #4]
 8007064:	6039      	str	r1, [r7, #0]
    return AllowAllFilter();
 8007066:	bf00      	nop
  }
 8007068:	4618      	mov	r0, r3
 800706a:	370c      	adds	r7, #12
 800706c:	46bd      	mov	sp, r7
 800706e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007072:	4770      	bx	lr

08007074 <_ZN11ArduinoJson8V730HB226detail10ObjectData9addMemberIPNS1_10StringNodeEEEPNS1_11VariantDataET_PNS1_15ResourceManagerE>:
                                     ResourceManager* resources) {
  remove(findKey(key, resources), resources);
}

template <typename TAdaptedString>
inline VariantData* ObjectData::addMember(TAdaptedString key,
 8007074:	b580      	push	{r7, lr}
 8007076:	b08a      	sub	sp, #40	@ 0x28
 8007078:	af02      	add	r7, sp, #8
 800707a:	60f8      	str	r0, [r7, #12]
 800707c:	60b9      	str	r1, [r7, #8]
 800707e:	607a      	str	r2, [r7, #4]
                                          ResourceManager* resources) {
  auto keySlot = resources->allocVariant();
 8007080:	f107 0318 	add.w	r3, r7, #24
 8007084:	6879      	ldr	r1, [r7, #4]
 8007086:	4618      	mov	r0, r3
 8007088:	f7fc f9de 	bl	8003448 <_ZN11ArduinoJson8V730HB226detail15ResourceManager12allocVariantEv>
  if (!keySlot)
 800708c:	f107 0318 	add.w	r3, r7, #24
 8007090:	4618      	mov	r0, r3
 8007092:	f7fd fc7d 	bl	8004990 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEEcvbEv>
 8007096:	4603      	mov	r3, r0
 8007098:	f083 0301 	eor.w	r3, r3, #1
 800709c:	b2db      	uxtb	r3, r3
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d001      	beq.n	80070a6 <_ZN11ArduinoJson8V730HB226detail10ObjectData9addMemberIPNS1_10StringNodeEEEPNS1_11VariantDataET_PNS1_15ResourceManagerE+0x32>
    return nullptr;
 80070a2:	2300      	movs	r3, #0
 80070a4:	e037      	b.n	8007116 <_ZN11ArduinoJson8V730HB226detail10ObjectData9addMemberIPNS1_10StringNodeEEEPNS1_11VariantDataET_PNS1_15ResourceManagerE+0xa2>

  auto valueSlot = resources->allocVariant();
 80070a6:	f107 0310 	add.w	r3, r7, #16
 80070aa:	6879      	ldr	r1, [r7, #4]
 80070ac:	4618      	mov	r0, r3
 80070ae:	f7fc f9cb 	bl	8003448 <_ZN11ArduinoJson8V730HB226detail15ResourceManager12allocVariantEv>
  if (!valueSlot)
 80070b2:	f107 0310 	add.w	r3, r7, #16
 80070b6:	4618      	mov	r0, r3
 80070b8:	f7fd fc6a 	bl	8004990 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEEcvbEv>
 80070bc:	4603      	mov	r3, r0
 80070be:	f083 0301 	eor.w	r3, r3, #1
 80070c2:	b2db      	uxtb	r3, r3
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d001      	beq.n	80070cc <_ZN11ArduinoJson8V730HB226detail10ObjectData9addMemberIPNS1_10StringNodeEEEPNS1_11VariantDataET_PNS1_15ResourceManagerE+0x58>
    return nullptr;
 80070c8:	2300      	movs	r3, #0
 80070ca:	e024      	b.n	8007116 <_ZN11ArduinoJson8V730HB226detail10ObjectData9addMemberIPNS1_10StringNodeEEEPNS1_11VariantDataET_PNS1_15ResourceManagerE+0xa2>

  if (!keySlot->setString(key, resources))
 80070cc:	f107 0318 	add.w	r3, r7, #24
 80070d0:	4618      	mov	r0, r3
 80070d2:	f7fd fc86 	bl	80049e2 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEEptEv>
 80070d6:	4603      	mov	r3, r0
 80070d8:	687a      	ldr	r2, [r7, #4]
 80070da:	68b9      	ldr	r1, [r7, #8]
 80070dc:	4618      	mov	r0, r3
 80070de:	f7fb fd6f 	bl	8002bc0 <_ZN11ArduinoJson8V730HB226detail11VariantData9setStringEPNS1_10StringNodeEPNS1_15ResourceManagerE>
 80070e2:	4603      	mov	r3, r0
 80070e4:	f083 0301 	eor.w	r3, r3, #1
 80070e8:	b2db      	uxtb	r3, r3
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d001      	beq.n	80070f2 <_ZN11ArduinoJson8V730HB226detail10ObjectData9addMemberIPNS1_10StringNodeEEEPNS1_11VariantDataET_PNS1_15ResourceManagerE+0x7e>
    return nullptr;
 80070ee:	2300      	movs	r3, #0
 80070f0:	e011      	b.n	8007116 <_ZN11ArduinoJson8V730HB226detail10ObjectData9addMemberIPNS1_10StringNodeEEEPNS1_11VariantDataET_PNS1_15ResourceManagerE+0xa2>

  CollectionData::appendPair(keySlot, valueSlot, resources);
 80070f2:	68f8      	ldr	r0, [r7, #12]
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	9301      	str	r3, [sp, #4]
 80070f8:	697b      	ldr	r3, [r7, #20]
 80070fa:	9300      	str	r3, [sp, #0]
 80070fc:	693b      	ldr	r3, [r7, #16]
 80070fe:	f107 0218 	add.w	r2, r7, #24
 8007102:	ca06      	ldmia	r2, {r1, r2}
 8007104:	f7fc f919 	bl	800333a <_ZN11ArduinoJson8V730HB226detail14CollectionData10appendPairENS1_4SlotINS1_11VariantDataEEES5_PKNS1_15ResourceManagerE>

  return valueSlot.ptr();
 8007108:	f107 0310 	add.w	r3, r7, #16
 800710c:	4618      	mov	r0, r3
 800710e:	f7fd fc50 	bl	80049b2 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEE3ptrEv>
 8007112:	4603      	mov	r3, r0
 8007114:	bf00      	nop
}
 8007116:	4618      	mov	r0, r3
 8007118:	3720      	adds	r7, #32
 800711a:	46bd      	mov	sp, r7
 800711c:	bd80      	pop	{r7, pc}

0800711e <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7skipKeyEv>:
  DeserializationError::Code skipKey() {
 800711e:	b580      	push	{r7, lr}
 8007120:	b082      	sub	sp, #8
 8007122:	af00      	add	r7, sp, #0
 8007124:	6078      	str	r0, [r7, #4]
    if (isQuote(current())) {
 8007126:	6878      	ldr	r0, [r7, #4]
 8007128:	f7ff fab2 	bl	8006690 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7currentEv>
 800712c:	4603      	mov	r3, r0
 800712e:	4618      	mov	r0, r3
 8007130:	f000 f9ef 	bl	8007512 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7isQuoteEc>
 8007134:	4603      	mov	r3, r0
 8007136:	2b00      	cmp	r3, #0
 8007138:	d004      	beq.n	8007144 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7skipKeyEv+0x26>
      return skipQuotedString();
 800713a:	6878      	ldr	r0, [r7, #4]
 800713c:	f7ff fd15 	bl	8006b6a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE16skipQuotedStringEv>
 8007140:	4603      	mov	r3, r0
 8007142:	e004      	b.n	800714e <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7skipKeyEv+0x30>
      return skipNonQuotedString();
 8007144:	6878      	ldr	r0, [r7, #4]
 8007146:	f000 fa31 	bl	80075ac <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE19skipNonQuotedStringEv>
 800714a:	4603      	mov	r3, r0
 800714c:	bf00      	nop
  }
 800714e:	4618      	mov	r0, r3
 8007150:	3708      	adds	r7, #8
 8007152:	46bd      	mov	sp, r7
 8007154:	bd80      	pop	{r7, pc}

08007156 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseQuotedStringEv>:
  DeserializationError::Code parseQuotedString() {
 8007156:	b580      	push	{r7, lr}
 8007158:	b086      	sub	sp, #24
 800715a:	af00      	add	r7, sp, #0
 800715c:	6078      	str	r0, [r7, #4]
    Utf16::Codepoint codepoint;
 800715e:	f107 030c 	add.w	r3, r7, #12
 8007162:	4618      	mov	r0, r3
 8007164:	f7fc fd14 	bl	8003b90 <_ZN11ArduinoJson8V730HB226detail5Utf169CodepointC1Ev>
    const char stopChar = current();
 8007168:	6878      	ldr	r0, [r7, #4]
 800716a:	f7ff fa91 	bl	8006690 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7currentEv>
 800716e:	4603      	mov	r3, r0
 8007170:	75bb      	strb	r3, [r7, #22]
    move();
 8007172:	6878      	ldr	r0, [r7, #4]
 8007174:	f7ff fe85 	bl	8006e82 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE4moveEv>
      char c = current();
 8007178:	6878      	ldr	r0, [r7, #4]
 800717a:	f7ff fa89 	bl	8006690 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7currentEv>
 800717e:	4603      	mov	r3, r0
 8007180:	75fb      	strb	r3, [r7, #23]
      move();
 8007182:	6878      	ldr	r0, [r7, #4]
 8007184:	f7ff fe7d 	bl	8006e82 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE4moveEv>
      if (c == stopChar)
 8007188:	7dfa      	ldrb	r2, [r7, #23]
 800718a:	7dbb      	ldrb	r3, [r7, #22]
 800718c:	429a      	cmp	r2, r3
 800718e:	d051      	beq.n	8007234 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseQuotedStringEv+0xde>
      if (c == '\0')
 8007190:	7dfb      	ldrb	r3, [r7, #23]
 8007192:	2b00      	cmp	r3, #0
 8007194:	d101      	bne.n	800719a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseQuotedStringEv+0x44>
        return DeserializationError::IncompleteInput;
 8007196:	2302      	movs	r3, #2
 8007198:	e05a      	b.n	8007250 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseQuotedStringEv+0xfa>
      if (c == '\\') {
 800719a:	7dfb      	ldrb	r3, [r7, #23]
 800719c:	2b5c      	cmp	r3, #92	@ 0x5c
 800719e:	d140      	bne.n	8007222 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseQuotedStringEv+0xcc>
        c = current();
 80071a0:	6878      	ldr	r0, [r7, #4]
 80071a2:	f7ff fa75 	bl	8006690 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7currentEv>
 80071a6:	4603      	mov	r3, r0
 80071a8:	75fb      	strb	r3, [r7, #23]
        if (c == '\0')
 80071aa:	7dfb      	ldrb	r3, [r7, #23]
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d101      	bne.n	80071b4 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseQuotedStringEv+0x5e>
          return DeserializationError::IncompleteInput;
 80071b0:	2302      	movs	r3, #2
 80071b2:	e04d      	b.n	8007250 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseQuotedStringEv+0xfa>
        if (c == 'u') {
 80071b4:	7dfb      	ldrb	r3, [r7, #23]
 80071b6:	2b75      	cmp	r3, #117	@ 0x75
 80071b8:	d125      	bne.n	8007206 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseQuotedStringEv+0xb0>
          move();
 80071ba:	6878      	ldr	r0, [r7, #4]
 80071bc:	f7ff fe61 	bl	8006e82 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE4moveEv>
          err = parseHex4(codeunit);
 80071c0:	f107 030a 	add.w	r3, r7, #10
 80071c4:	4619      	mov	r1, r3
 80071c6:	6878      	ldr	r0, [r7, #4]
 80071c8:	f000 fa0e 	bl	80075e8 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9parseHex4ERt>
 80071cc:	4603      	mov	r3, r0
 80071ce:	757b      	strb	r3, [r7, #21]
          if (err)
 80071d0:	7d7b      	ldrb	r3, [r7, #21]
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d001      	beq.n	80071da <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseQuotedStringEv+0x84>
            return err;
 80071d6:	7d7b      	ldrb	r3, [r7, #21]
 80071d8:	e03a      	b.n	8007250 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseQuotedStringEv+0xfa>
          if (codepoint.append(codeunit))
 80071da:	897a      	ldrh	r2, [r7, #10]
 80071dc:	f107 030c 	add.w	r3, r7, #12
 80071e0:	4611      	mov	r1, r2
 80071e2:	4618      	mov	r0, r3
 80071e4:	f7fc fce5 	bl	8003bb2 <_ZN11ArduinoJson8V730HB226detail5Utf169Codepoint6appendEt>
 80071e8:	4603      	mov	r3, r0
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d020      	beq.n	8007230 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseQuotedStringEv+0xda>
            Utf8::encodeCodepoint(codepoint.value(), stringBuilder_);
 80071ee:	f107 030c 	add.w	r3, r7, #12
 80071f2:	4618      	mov	r0, r3
 80071f4:	f7fc fd0f 	bl	8003c16 <_ZNK11ArduinoJson8V730HB226detail5Utf169Codepoint5valueEv>
 80071f8:	4602      	mov	r2, r0
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	4619      	mov	r1, r3
 80071fe:	4610      	mov	r0, r2
 8007200:	f000 fa2b 	bl	800765a <_ZN11ArduinoJson8V730HB226detail4Utf815encodeCodepointINS1_13StringBuilderEEEvmRT_>
 8007204:	e7b8      	b.n	8007178 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseQuotedStringEv+0x22>
        c = EscapeSequence::unescapeChar(c);
 8007206:	7dfb      	ldrb	r3, [r7, #23]
 8007208:	4618      	mov	r0, r3
 800720a:	f7fc fa0c 	bl	8003626 <_ZN11ArduinoJson8V730HB226detail14EscapeSequence12unescapeCharEc>
 800720e:	4603      	mov	r3, r0
 8007210:	75fb      	strb	r3, [r7, #23]
        if (c == '\0')
 8007212:	7dfb      	ldrb	r3, [r7, #23]
 8007214:	2b00      	cmp	r3, #0
 8007216:	d101      	bne.n	800721c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseQuotedStringEv+0xc6>
          return DeserializationError::InvalidInput;
 8007218:	2303      	movs	r3, #3
 800721a:	e019      	b.n	8007250 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseQuotedStringEv+0xfa>
        move();
 800721c:	6878      	ldr	r0, [r7, #4]
 800721e:	f7ff fe30 	bl	8006e82 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE4moveEv>
      stringBuilder_.append(c);
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	7dfa      	ldrb	r2, [r7, #23]
 8007226:	4611      	mov	r1, r2
 8007228:	4618      	mov	r0, r3
 800722a:	f7fc fab6 	bl	800379a <_ZN11ArduinoJson8V730HB226detail13StringBuilder6appendEc>
 800722e:	e7a3      	b.n	8007178 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseQuotedStringEv+0x22>
          continue;
 8007230:	bf00      	nop
    for (;;) {
 8007232:	e7a1      	b.n	8007178 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseQuotedStringEv+0x22>
        break;
 8007234:	bf00      	nop
    if (!stringBuilder_.isValid())
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	4618      	mov	r0, r3
 800723a:	f7fc fae0 	bl	80037fe <_ZNK11ArduinoJson8V730HB226detail13StringBuilder7isValidEv>
 800723e:	4603      	mov	r3, r0
 8007240:	f083 0301 	eor.w	r3, r3, #1
 8007244:	b2db      	uxtb	r3, r3
 8007246:	2b00      	cmp	r3, #0
 8007248:	d001      	beq.n	800724e <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseQuotedStringEv+0xf8>
      return DeserializationError::NoMemory;
 800724a:	2304      	movs	r3, #4
 800724c:	e000      	b.n	8007250 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE17parseQuotedStringEv+0xfa>
    return DeserializationError::Ok;
 800724e:	2300      	movs	r3, #0
  }
 8007250:	4618      	mov	r0, r3
 8007252:	3718      	adds	r7, #24
 8007254:	46bd      	mov	sp, r7
 8007256:	bd80      	pop	{r7, pc}

08007258 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE13canBeInNumberEc>:
  static inline bool canBeInNumber(char c) {
 8007258:	b580      	push	{r7, lr}
 800725a:	b082      	sub	sp, #8
 800725c:	af00      	add	r7, sp, #0
 800725e:	4603      	mov	r3, r0
 8007260:	71fb      	strb	r3, [r7, #7]
    return isBetween(c, '0', '9') || c == '+' || c == '-' || c == '.' ||
 8007262:	79fb      	ldrb	r3, [r7, #7]
 8007264:	2239      	movs	r2, #57	@ 0x39
 8007266:	2130      	movs	r1, #48	@ 0x30
 8007268:	4618      	mov	r0, r3
 800726a:	f000 fa7a 	bl	8007762 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9isBetweenEccc>
 800726e:	4603      	mov	r3, r0
           c == 'e' || c == 'E';
 8007270:	2b00      	cmp	r3, #0
 8007272:	d10e      	bne.n	8007292 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE13canBeInNumberEc+0x3a>
    return isBetween(c, '0', '9') || c == '+' || c == '-' || c == '.' ||
 8007274:	79fb      	ldrb	r3, [r7, #7]
 8007276:	2b2b      	cmp	r3, #43	@ 0x2b
 8007278:	d00b      	beq.n	8007292 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE13canBeInNumberEc+0x3a>
 800727a:	79fb      	ldrb	r3, [r7, #7]
 800727c:	2b2d      	cmp	r3, #45	@ 0x2d
 800727e:	d008      	beq.n	8007292 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE13canBeInNumberEc+0x3a>
 8007280:	79fb      	ldrb	r3, [r7, #7]
 8007282:	2b2e      	cmp	r3, #46	@ 0x2e
 8007284:	d005      	beq.n	8007292 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE13canBeInNumberEc+0x3a>
 8007286:	79fb      	ldrb	r3, [r7, #7]
 8007288:	2b65      	cmp	r3, #101	@ 0x65
 800728a:	d002      	beq.n	8007292 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE13canBeInNumberEc+0x3a>
           c == 'e' || c == 'E';
 800728c:	79fb      	ldrb	r3, [r7, #7]
 800728e:	2b45      	cmp	r3, #69	@ 0x45
 8007290:	d101      	bne.n	8007296 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE13canBeInNumberEc+0x3e>
 8007292:	2301      	movs	r3, #1
 8007294:	e000      	b.n	8007298 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE13canBeInNumberEc+0x40>
 8007296:	2300      	movs	r3, #0
  }
 8007298:	4618      	mov	r0, r3
 800729a:	3708      	adds	r7, #8
 800729c:	46bd      	mov	sp, r7
 800729e:	bd80      	pop	{r7, pc}

080072a0 <_ZN11ArduinoJson8V730HB226detail11VariantData10setIntegerIyEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEbE4typeES6_PNS1_15ResourceManagerE>:
#endif
  return true;
}

template <typename T>
enable_if_t<is_unsigned<T>::value, bool> VariantData::setInteger(
 80072a0:	b5b0      	push	{r4, r5, r7, lr}
 80072a2:	b086      	sub	sp, #24
 80072a4:	af00      	add	r7, sp, #0
 80072a6:	60f8      	str	r0, [r7, #12]
 80072a8:	e9c7 2300 	strd	r2, r3, [r7]
    T value, ResourceManager* resources) {
  ARDUINOJSON_ASSERT(type_ == VariantType::Null);  // must call clear() first
  (void)resources;                                 // silence warning

  if (canConvertNumber<uint32_t>(value)) {
 80072ac:	e9d7 0100 	ldrd	r0, r1, [r7]
 80072b0:	f7ff f8be 	bl	8006430 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberImyEENS1_9enable_ifIXaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_11is_unsignedIS5_EE5valuesrNS4_IT_EE5valuelestS9_stS5_EbE4typeES5_>
 80072b4:	4603      	mov	r3, r0
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d006      	beq.n	80072c8 <_ZN11ArduinoJson8V730HB226detail11VariantData10setIntegerIyEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEbE4typeES6_PNS1_15ResourceManagerE+0x28>
    type_ = VariantType::Uint32;
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	220a      	movs	r2, #10
 80072be:	711a      	strb	r2, [r3, #4]
    content_.asUint32 = static_cast<uint32_t>(value);
 80072c0:	683a      	ldr	r2, [r7, #0]
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	601a      	str	r2, [r3, #0]
 80072c6:	e028      	b.n	800731a <_ZN11ArduinoJson8V730HB226detail11VariantData10setIntegerIyEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEbE4typeES6_PNS1_15ResourceManagerE+0x7a>
  }
#if ARDUINOJSON_USE_LONG_LONG
  else {
    auto extension = resources->allocExtension();
 80072c8:	f107 0310 	add.w	r3, r7, #16
 80072cc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80072ce:	4618      	mov	r0, r3
 80072d0:	f7fc f93f 	bl	8003552 <_ZN11ArduinoJson8V730HB226detail15ResourceManager14allocExtensionEv>
    if (!extension)
 80072d4:	f107 0310 	add.w	r3, r7, #16
 80072d8:	4618      	mov	r0, r3
 80072da:	f000 fa5c 	bl	8007796 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_16VariantExtensionEEcvbEv>
 80072de:	4603      	mov	r3, r0
 80072e0:	f083 0301 	eor.w	r3, r3, #1
 80072e4:	b2db      	uxtb	r3, r3
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d001      	beq.n	80072ee <_ZN11ArduinoJson8V730HB226detail11VariantData10setIntegerIyEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEbE4typeES6_PNS1_15ResourceManagerE+0x4e>
      return false;
 80072ea:	2300      	movs	r3, #0
 80072ec:	e016      	b.n	800731c <_ZN11ArduinoJson8V730HB226detail11VariantData10setIntegerIyEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEbE4typeES6_PNS1_15ResourceManagerE+0x7c>
    type_ = VariantType::Uint64;
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	221a      	movs	r2, #26
 80072f2:	711a      	strb	r2, [r3, #4]
    content_.asSlotId = extension.id();
 80072f4:	f107 0310 	add.w	r3, r7, #16
 80072f8:	4618      	mov	r0, r3
 80072fa:	f000 fa5d 	bl	80077b8 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_16VariantExtensionEE2idEv>
 80072fe:	4603      	mov	r3, r0
 8007300:	461a      	mov	r2, r3
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	801a      	strh	r2, [r3, #0]
    extension->asUint64 = value;
 8007306:	e9d7 4500 	ldrd	r4, r5, [r7]
 800730a:	f107 0310 	add.w	r3, r7, #16
 800730e:	4618      	mov	r0, r3
 8007310:	f000 fa5e 	bl	80077d0 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_16VariantExtensionEEptEv>
 8007314:	4603      	mov	r3, r0
 8007316:	e9c3 4500 	strd	r4, r5, [r3]
  }
#endif
  return true;
 800731a:	2301      	movs	r3, #1
}
 800731c:	4618      	mov	r0, r3
 800731e:	3718      	adds	r7, #24
 8007320:	46bd      	mov	sp, r7
 8007322:	bdb0      	pop	{r4, r5, r7, pc}

08007324 <_ZN11ArduinoJson8V730HB226detail11VariantData10setIntegerIxEENS1_9enable_ifIXsrNS1_9is_signedIT_EE5valueEbE4typeES6_PNS1_15ResourceManagerE>:
enable_if_t<is_signed<T>::value, bool> VariantData::setInteger(
 8007324:	b5b0      	push	{r4, r5, r7, lr}
 8007326:	b086      	sub	sp, #24
 8007328:	af00      	add	r7, sp, #0
 800732a:	60f8      	str	r0, [r7, #12]
 800732c:	e9c7 2300 	strd	r2, r3, [r7]
  if (canConvertNumber<int32_t>(value)) {
 8007330:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007334:	f000 fa58 	bl	80077e8 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIlxEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS7_IS9_EE5valueltstS9_stS5_EbE4typeES5_>
 8007338:	4603      	mov	r3, r0
 800733a:	2b00      	cmp	r3, #0
 800733c:	d006      	beq.n	800734c <_ZN11ArduinoJson8V730HB226detail11VariantData10setIntegerIxEENS1_9enable_ifIXsrNS1_9is_signedIT_EE5valueEbE4typeES6_PNS1_15ResourceManagerE+0x28>
    type_ = VariantType::Int32;
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	220c      	movs	r2, #12
 8007342:	711a      	strb	r2, [r3, #4]
    content_.asInt32 = static_cast<int32_t>(value);
 8007344:	683a      	ldr	r2, [r7, #0]
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	601a      	str	r2, [r3, #0]
 800734a:	e028      	b.n	800739e <_ZN11ArduinoJson8V730HB226detail11VariantData10setIntegerIxEENS1_9enable_ifIXsrNS1_9is_signedIT_EE5valueEbE4typeES6_PNS1_15ResourceManagerE+0x7a>
    auto extension = resources->allocExtension();
 800734c:	f107 0310 	add.w	r3, r7, #16
 8007350:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007352:	4618      	mov	r0, r3
 8007354:	f7fc f8fd 	bl	8003552 <_ZN11ArduinoJson8V730HB226detail15ResourceManager14allocExtensionEv>
    if (!extension)
 8007358:	f107 0310 	add.w	r3, r7, #16
 800735c:	4618      	mov	r0, r3
 800735e:	f000 fa1a 	bl	8007796 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_16VariantExtensionEEcvbEv>
 8007362:	4603      	mov	r3, r0
 8007364:	f083 0301 	eor.w	r3, r3, #1
 8007368:	b2db      	uxtb	r3, r3
 800736a:	2b00      	cmp	r3, #0
 800736c:	d001      	beq.n	8007372 <_ZN11ArduinoJson8V730HB226detail11VariantData10setIntegerIxEENS1_9enable_ifIXsrNS1_9is_signedIT_EE5valueEbE4typeES6_PNS1_15ResourceManagerE+0x4e>
      return false;
 800736e:	2300      	movs	r3, #0
 8007370:	e016      	b.n	80073a0 <_ZN11ArduinoJson8V730HB226detail11VariantData10setIntegerIxEENS1_9enable_ifIXsrNS1_9is_signedIT_EE5valueEbE4typeES6_PNS1_15ResourceManagerE+0x7c>
    type_ = VariantType::Int64;
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	221c      	movs	r2, #28
 8007376:	711a      	strb	r2, [r3, #4]
    content_.asSlotId = extension.id();
 8007378:	f107 0310 	add.w	r3, r7, #16
 800737c:	4618      	mov	r0, r3
 800737e:	f000 fa1b 	bl	80077b8 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_16VariantExtensionEE2idEv>
 8007382:	4603      	mov	r3, r0
 8007384:	461a      	mov	r2, r3
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	801a      	strh	r2, [r3, #0]
    extension->asInt64 = value;
 800738a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800738e:	f107 0310 	add.w	r3, r7, #16
 8007392:	4618      	mov	r0, r3
 8007394:	f000 fa1c 	bl	80077d0 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_16VariantExtensionEEptEv>
 8007398:	4603      	mov	r3, r0
 800739a:	e9c3 4500 	strd	r4, r5, [r3]
  return true;
 800739e:	2301      	movs	r3, #1
}
 80073a0:	4618      	mov	r0, r3
 80073a2:	3718      	adds	r7, #24
 80073a4:	46bd      	mov	sp, r7
 80073a6:	bdb0      	pop	{r4, r5, r7, pc}

080073a8 <_ZN11ArduinoJson8V730HB226detail11VariantData8setFloatIfEENS1_9enable_ifIXeqstT_Li4EEbE4typeES5_PNS1_15ResourceManagerE>:
  enable_if_t<sizeof(T) == 4, bool> setFloat(T value, ResourceManager*) {
 80073a8:	b480      	push	{r7}
 80073aa:	b085      	sub	sp, #20
 80073ac:	af00      	add	r7, sp, #0
 80073ae:	60f8      	str	r0, [r7, #12]
 80073b0:	ed87 0a02 	vstr	s0, [r7, #8]
 80073b4:	6079      	str	r1, [r7, #4]
    type_ = VariantType::Float;
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	220e      	movs	r2, #14
 80073ba:	711a      	strb	r2, [r3, #4]
    content_.asFloat = value;
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	68ba      	ldr	r2, [r7, #8]
 80073c0:	601a      	str	r2, [r3, #0]
    return true;
 80073c2:	2301      	movs	r3, #1
  }
 80073c4:	4618      	mov	r0, r3
 80073c6:	3714      	adds	r7, #20
 80073c8:	46bd      	mov	sp, r7
 80073ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ce:	4770      	bx	lr

080073d0 <_ZN11ArduinoJson8V730HB226detail11VariantData8setFloatIdEENS1_9enable_ifIXeqstT_Li8EEbE4typeES5_PNS1_15ResourceManagerE>:
enable_if_t<sizeof(T) == 8, bool> VariantData::setFloat(
 80073d0:	b5b0      	push	{r4, r5, r7, lr}
 80073d2:	b088      	sub	sp, #32
 80073d4:	af00      	add	r7, sp, #0
 80073d6:	60f8      	str	r0, [r7, #12]
 80073d8:	ed87 0b00 	vstr	d0, [r7]
 80073dc:	60b9      	str	r1, [r7, #8]
  float valueAsFloat = static_cast<float>(value);
 80073de:	ed97 7b00 	vldr	d7, [r7]
 80073e2:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80073e6:	edc7 7a07 	vstr	s15, [r7, #28]
  if (value == valueAsFloat) {
 80073ea:	edd7 7a07 	vldr	s15, [r7, #28]
 80073ee:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80073f2:	ed97 6b00 	vldr	d6, [r7]
 80073f6:	eeb4 6b47 	vcmp.f64	d6, d7
 80073fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80073fe:	d106      	bne.n	800740e <_ZN11ArduinoJson8V730HB226detail11VariantData8setFloatIdEENS1_9enable_ifIXeqstT_Li8EEbE4typeES5_PNS1_15ResourceManagerE+0x3e>
    type_ = VariantType::Float;
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	220e      	movs	r2, #14
 8007404:	711a      	strb	r2, [r3, #4]
    content_.asFloat = valueAsFloat;
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	69fa      	ldr	r2, [r7, #28]
 800740a:	601a      	str	r2, [r3, #0]
 800740c:	e028      	b.n	8007460 <_ZN11ArduinoJson8V730HB226detail11VariantData8setFloatIdEENS1_9enable_ifIXeqstT_Li8EEbE4typeES5_PNS1_15ResourceManagerE+0x90>
    auto extension = resources->allocExtension();
 800740e:	f107 0314 	add.w	r3, r7, #20
 8007412:	68b9      	ldr	r1, [r7, #8]
 8007414:	4618      	mov	r0, r3
 8007416:	f7fc f89c 	bl	8003552 <_ZN11ArduinoJson8V730HB226detail15ResourceManager14allocExtensionEv>
    if (!extension)
 800741a:	f107 0314 	add.w	r3, r7, #20
 800741e:	4618      	mov	r0, r3
 8007420:	f000 f9b9 	bl	8007796 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_16VariantExtensionEEcvbEv>
 8007424:	4603      	mov	r3, r0
 8007426:	f083 0301 	eor.w	r3, r3, #1
 800742a:	b2db      	uxtb	r3, r3
 800742c:	2b00      	cmp	r3, #0
 800742e:	d001      	beq.n	8007434 <_ZN11ArduinoJson8V730HB226detail11VariantData8setFloatIdEENS1_9enable_ifIXeqstT_Li8EEbE4typeES5_PNS1_15ResourceManagerE+0x64>
      return false;
 8007430:	2300      	movs	r3, #0
 8007432:	e016      	b.n	8007462 <_ZN11ArduinoJson8V730HB226detail11VariantData8setFloatIdEENS1_9enable_ifIXeqstT_Li8EEbE4typeES5_PNS1_15ResourceManagerE+0x92>
    type_ = VariantType::Double;
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	221e      	movs	r2, #30
 8007438:	711a      	strb	r2, [r3, #4]
    content_.asSlotId = extension.id();
 800743a:	f107 0314 	add.w	r3, r7, #20
 800743e:	4618      	mov	r0, r3
 8007440:	f000 f9ba 	bl	80077b8 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_16VariantExtensionEE2idEv>
 8007444:	4603      	mov	r3, r0
 8007446:	461a      	mov	r2, r3
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	801a      	strh	r2, [r3, #0]
    extension->asDouble = value;
 800744c:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007450:	f107 0314 	add.w	r3, r7, #20
 8007454:	4618      	mov	r0, r3
 8007456:	f000 f9bb 	bl	80077d0 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_16VariantExtensionEEptEv>
 800745a:	4603      	mov	r3, r0
 800745c:	e9c3 4500 	strd	r4, r5, [r3]
  return true;
 8007460:	2301      	movs	r3, #1
}
 8007462:	4618      	mov	r0, r3
 8007464:	3720      	adds	r7, #32
 8007466:	46bd      	mov	sp, r7
 8007468:	bdb0      	pop	{r4, r5, r7, pc}

0800746a <_ZN11ArduinoJson8V730HB226detail10alias_castIfmEET_T0_>:
T alias_cast(F raw_data) {
 800746a:	b480      	push	{r7}
 800746c:	b085      	sub	sp, #20
 800746e:	af00      	add	r7, sp, #0
 8007470:	6078      	str	r0, [r7, #4]
  ac.raw = raw_data;
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	60fb      	str	r3, [r7, #12]
  return ac.data;
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	ee07 3a90 	vmov	s15, r3
}
 800747c:	eeb0 0a67 	vmov.f32	s0, s15
 8007480:	3714      	adds	r7, #20
 8007482:	46bd      	mov	sp, r7
 8007484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007488:	4770      	bx	lr

0800748a <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataIKNS0_10JsonObjectEEEDTcldtfp_7getDataEERT_>:
  static auto getData(TClient& client) -> decltype(client.getData()) {
 800748a:	b580      	push	{r7, lr}
 800748c:	b082      	sub	sp, #8
 800748e:	af00      	add	r7, sp, #0
 8007490:	6078      	str	r0, [r7, #4]
    return client.getData();
 8007492:	6878      	ldr	r0, [r7, #4]
 8007494:	f7fb fe2d 	bl	80030f2 <_ZNK11ArduinoJson8V730HB2210JsonObject7getDataEv>
 8007498:	4603      	mov	r3, r0
  }
 800749a:	4618      	mov	r0, r3
 800749c:	3708      	adds	r7, #8
 800749e:	46bd      	mov	sp, r7
 80074a0:	bd80      	pop	{r7, pc}

080074a2 <_ZNK11ArduinoJson8V730HB226detail11VariantData9getMemberINS1_9RamStringEEEPS2_T_PKNS1_15ResourceManagerE>:
  VariantData* getMember(TAdaptedString key,
 80074a2:	b580      	push	{r7, lr}
 80074a4:	b086      	sub	sp, #24
 80074a6:	af02      	add	r7, sp, #8
 80074a8:	60f8      	str	r0, [r7, #12]
 80074aa:	4638      	mov	r0, r7
 80074ac:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    return ObjectData::getMember(asObject(), key, resources);
 80074b0:	68f8      	ldr	r0, [r7, #12]
 80074b2:	f7fb faf3 	bl	8002a9c <_ZNK11ArduinoJson8V730HB226detail11VariantData8asObjectEv>
 80074b6:	69bb      	ldr	r3, [r7, #24]
 80074b8:	9300      	str	r3, [sp, #0]
 80074ba:	463b      	mov	r3, r7
 80074bc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80074be:	f7fd fe75 	bl	80051ac <_ZN11ArduinoJson8V730HB226detail10ObjectData9getMemberINS1_9RamStringEEEPNS1_11VariantDataEPKS2_T_PKNS1_15ResourceManagerE>
 80074c2:	4603      	mov	r3, r0
  }
 80074c4:	4618      	mov	r0, r3
 80074c6:	3710      	adds	r7, #16
 80074c8:	46bd      	mov	sp, r7
 80074ca:	bd80      	pop	{r7, pc}

080074cc <_ZN11ArduinoJson8V730HB226detail5LatchINS1_6ReaderIPKcvEEE5clearEv>:
  void clear() {
 80074cc:	b480      	push	{r7}
 80074ce:	b083      	sub	sp, #12
 80074d0:	af00      	add	r7, sp, #0
 80074d2:	6078      	str	r0, [r7, #4]
    loaded_ = false;
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	2200      	movs	r2, #0
 80074d8:	715a      	strb	r2, [r3, #5]
  }
 80074da:	bf00      	nop
 80074dc:	370c      	adds	r7, #12
 80074de:	46bd      	mov	sp, r7
 80074e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e4:	4770      	bx	lr

080074e6 <_ZN11ArduinoJson8V730HB226detail5LatchINS1_6ReaderIPKcvEEE4loadEv>:
  }

 private:
  void load() {
 80074e6:	b580      	push	{r7, lr}
 80074e8:	b084      	sub	sp, #16
 80074ea:	af00      	add	r7, sp, #0
 80074ec:	6078      	str	r0, [r7, #4]
    ARDUINOJSON_ASSERT(!ended_);
    int c = reader_.read();
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	4618      	mov	r0, r3
 80074f2:	f000 f99f 	bl	8007834 <_ZN11ArduinoJson8V730HB226detail6ReaderIPKcvE4readEv>
 80074f6:	60f8      	str	r0, [r7, #12]
#if ARDUINOJSON_DEBUG
    if (c <= 0)
      ended_ = true;
#endif
    current_ = static_cast<char>(c > 0 ? c : 0);
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80074fe:	b2da      	uxtb	r2, r3
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	711a      	strb	r2, [r3, #4]
    loaded_ = true;
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	2201      	movs	r2, #1
 8007508:	715a      	strb	r2, [r3, #5]
  }
 800750a:	bf00      	nop
 800750c:	3710      	adds	r7, #16
 800750e:	46bd      	mov	sp, r7
 8007510:	bd80      	pop	{r7, pc}

08007512 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7isQuoteEc>:
  static inline bool isQuote(char c) {
 8007512:	b480      	push	{r7}
 8007514:	b083      	sub	sp, #12
 8007516:	af00      	add	r7, sp, #0
 8007518:	4603      	mov	r3, r0
 800751a:	71fb      	strb	r3, [r7, #7]
    return c == '\'' || c == '\"';
 800751c:	79fb      	ldrb	r3, [r7, #7]
 800751e:	2b27      	cmp	r3, #39	@ 0x27
 8007520:	d002      	beq.n	8007528 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7isQuoteEc+0x16>
 8007522:	79fb      	ldrb	r3, [r7, #7]
 8007524:	2b22      	cmp	r3, #34	@ 0x22
 8007526:	d101      	bne.n	800752c <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7isQuoteEc+0x1a>
 8007528:	2301      	movs	r3, #1
 800752a:	e000      	b.n	800752e <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7isQuoteEc+0x1c>
 800752c:	2300      	movs	r3, #0
  }
 800752e:	4618      	mov	r0, r3
 8007530:	370c      	adds	r7, #12
 8007532:	46bd      	mov	sp, r7
 8007534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007538:	4770      	bx	lr

0800753a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE20parseNonQuotedStringEv>:
  DeserializationError::Code parseNonQuotedString() {
 800753a:	b580      	push	{r7, lr}
 800753c:	b084      	sub	sp, #16
 800753e:	af00      	add	r7, sp, #0
 8007540:	6078      	str	r0, [r7, #4]
    char c = current();
 8007542:	6878      	ldr	r0, [r7, #4]
 8007544:	f7ff f8a4 	bl	8006690 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7currentEv>
 8007548:	4603      	mov	r3, r0
 800754a:	73fb      	strb	r3, [r7, #15]
    if (canBeInNonQuotedString(c)) {  // no quotes
 800754c:	7bfb      	ldrb	r3, [r7, #15]
 800754e:	4618      	mov	r0, r3
 8007550:	f000 f980 	bl	8007854 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE22canBeInNonQuotedStringEc>
 8007554:	4603      	mov	r3, r0
 8007556:	2b00      	cmp	r3, #0
 8007558:	d015      	beq.n	8007586 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE20parseNonQuotedStringEv+0x4c>
        move();
 800755a:	6878      	ldr	r0, [r7, #4]
 800755c:	f7ff fc91 	bl	8006e82 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE4moveEv>
        stringBuilder_.append(c);
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	7bfa      	ldrb	r2, [r7, #15]
 8007564:	4611      	mov	r1, r2
 8007566:	4618      	mov	r0, r3
 8007568:	f7fc f917 	bl	800379a <_ZN11ArduinoJson8V730HB226detail13StringBuilder6appendEc>
        c = current();
 800756c:	6878      	ldr	r0, [r7, #4]
 800756e:	f7ff f88f 	bl	8006690 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7currentEv>
 8007572:	4603      	mov	r3, r0
 8007574:	73fb      	strb	r3, [r7, #15]
      } while (canBeInNonQuotedString(c));
 8007576:	7bfb      	ldrb	r3, [r7, #15]
 8007578:	4618      	mov	r0, r3
 800757a:	f000 f96b 	bl	8007854 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE22canBeInNonQuotedStringEc>
 800757e:	4603      	mov	r3, r0
 8007580:	2b00      	cmp	r3, #0
 8007582:	d1ea      	bne.n	800755a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE20parseNonQuotedStringEv+0x20>
 8007584:	e001      	b.n	800758a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE20parseNonQuotedStringEv+0x50>
      return DeserializationError::InvalidInput;
 8007586:	2303      	movs	r3, #3
 8007588:	e00c      	b.n	80075a4 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE20parseNonQuotedStringEv+0x6a>
    if (!stringBuilder_.isValid())
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	4618      	mov	r0, r3
 800758e:	f7fc f936 	bl	80037fe <_ZNK11ArduinoJson8V730HB226detail13StringBuilder7isValidEv>
 8007592:	4603      	mov	r3, r0
 8007594:	f083 0301 	eor.w	r3, r3, #1
 8007598:	b2db      	uxtb	r3, r3
 800759a:	2b00      	cmp	r3, #0
 800759c:	d001      	beq.n	80075a2 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE20parseNonQuotedStringEv+0x68>
      return DeserializationError::NoMemory;
 800759e:	2304      	movs	r3, #4
 80075a0:	e000      	b.n	80075a4 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE20parseNonQuotedStringEv+0x6a>
    return DeserializationError::Ok;
 80075a2:	2300      	movs	r3, #0
  }
 80075a4:	4618      	mov	r0, r3
 80075a6:	3710      	adds	r7, #16
 80075a8:	46bd      	mov	sp, r7
 80075aa:	bd80      	pop	{r7, pc}

080075ac <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE19skipNonQuotedStringEv>:
  DeserializationError::Code skipNonQuotedString() {
 80075ac:	b580      	push	{r7, lr}
 80075ae:	b084      	sub	sp, #16
 80075b0:	af00      	add	r7, sp, #0
 80075b2:	6078      	str	r0, [r7, #4]
    char c = current();
 80075b4:	6878      	ldr	r0, [r7, #4]
 80075b6:	f7ff f86b 	bl	8006690 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7currentEv>
 80075ba:	4603      	mov	r3, r0
 80075bc:	73fb      	strb	r3, [r7, #15]
    while (canBeInNonQuotedString(c)) {
 80075be:	e007      	b.n	80075d0 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE19skipNonQuotedStringEv+0x24>
      move();
 80075c0:	6878      	ldr	r0, [r7, #4]
 80075c2:	f7ff fc5e 	bl	8006e82 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE4moveEv>
      c = current();
 80075c6:	6878      	ldr	r0, [r7, #4]
 80075c8:	f7ff f862 	bl	8006690 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7currentEv>
 80075cc:	4603      	mov	r3, r0
 80075ce:	73fb      	strb	r3, [r7, #15]
    while (canBeInNonQuotedString(c)) {
 80075d0:	7bfb      	ldrb	r3, [r7, #15]
 80075d2:	4618      	mov	r0, r3
 80075d4:	f000 f93e 	bl	8007854 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE22canBeInNonQuotedStringEc>
 80075d8:	4603      	mov	r3, r0
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d1f0      	bne.n	80075c0 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE19skipNonQuotedStringEv+0x14>
    return DeserializationError::Ok;
 80075de:	2300      	movs	r3, #0
  }
 80075e0:	4618      	mov	r0, r3
 80075e2:	3710      	adds	r7, #16
 80075e4:	46bd      	mov	sp, r7
 80075e6:	bd80      	pop	{r7, pc}

080075e8 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9parseHex4ERt>:
  DeserializationError::Code parseHex4(uint16_t& result) {
 80075e8:	b580      	push	{r7, lr}
 80075ea:	b084      	sub	sp, #16
 80075ec:	af00      	add	r7, sp, #0
 80075ee:	6078      	str	r0, [r7, #4]
 80075f0:	6039      	str	r1, [r7, #0]
    result = 0;
 80075f2:	683b      	ldr	r3, [r7, #0]
 80075f4:	2200      	movs	r2, #0
 80075f6:	801a      	strh	r2, [r3, #0]
    for (uint8_t i = 0; i < 4; ++i) {
 80075f8:	2300      	movs	r3, #0
 80075fa:	73fb      	strb	r3, [r7, #15]
 80075fc:	e025      	b.n	800764a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9parseHex4ERt+0x62>
      char digit = current();
 80075fe:	6878      	ldr	r0, [r7, #4]
 8007600:	f7ff f846 	bl	8006690 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE7currentEv>
 8007604:	4603      	mov	r3, r0
 8007606:	73bb      	strb	r3, [r7, #14]
      if (!digit)
 8007608:	7bbb      	ldrb	r3, [r7, #14]
 800760a:	2b00      	cmp	r3, #0
 800760c:	d101      	bne.n	8007612 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9parseHex4ERt+0x2a>
        return DeserializationError::IncompleteInput;
 800760e:	2302      	movs	r3, #2
 8007610:	e01f      	b.n	8007652 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9parseHex4ERt+0x6a>
      uint8_t value = decodeHex(digit);
 8007612:	7bbb      	ldrb	r3, [r7, #14]
 8007614:	4618      	mov	r0, r3
 8007616:	f000 f944 	bl	80078a2 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9decodeHexEc>
 800761a:	4603      	mov	r3, r0
 800761c:	737b      	strb	r3, [r7, #13]
      if (value > 0x0F)
 800761e:	7b7b      	ldrb	r3, [r7, #13]
 8007620:	2b0f      	cmp	r3, #15
 8007622:	d901      	bls.n	8007628 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9parseHex4ERt+0x40>
        return DeserializationError::InvalidInput;
 8007624:	2303      	movs	r3, #3
 8007626:	e014      	b.n	8007652 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9parseHex4ERt+0x6a>
      result = uint16_t((result << 4) | value);
 8007628:	683b      	ldr	r3, [r7, #0]
 800762a:	881b      	ldrh	r3, [r3, #0]
 800762c:	011b      	lsls	r3, r3, #4
 800762e:	b21a      	sxth	r2, r3
 8007630:	7b7b      	ldrb	r3, [r7, #13]
 8007632:	b21b      	sxth	r3, r3
 8007634:	4313      	orrs	r3, r2
 8007636:	b21b      	sxth	r3, r3
 8007638:	b29a      	uxth	r2, r3
 800763a:	683b      	ldr	r3, [r7, #0]
 800763c:	801a      	strh	r2, [r3, #0]
      move();
 800763e:	6878      	ldr	r0, [r7, #4]
 8007640:	f7ff fc1f 	bl	8006e82 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE4moveEv>
    for (uint8_t i = 0; i < 4; ++i) {
 8007644:	7bfb      	ldrb	r3, [r7, #15]
 8007646:	3301      	adds	r3, #1
 8007648:	73fb      	strb	r3, [r7, #15]
 800764a:	7bfb      	ldrb	r3, [r7, #15]
 800764c:	2b03      	cmp	r3, #3
 800764e:	d9d6      	bls.n	80075fe <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9parseHex4ERt+0x16>
    return DeserializationError::Ok;
 8007650:	2300      	movs	r3, #0
  }
 8007652:	4618      	mov	r0, r3
 8007654:	3710      	adds	r7, #16
 8007656:	46bd      	mov	sp, r7
 8007658:	bd80      	pop	{r7, pc}

0800765a <_ZN11ArduinoJson8V730HB226detail4Utf815encodeCodepointINS1_13StringBuilderEEEvmRT_>:

ARDUINOJSON_BEGIN_PRIVATE_NAMESPACE

namespace Utf8 {
template <typename TStringBuilder>
inline void encodeCodepoint(uint32_t codepoint32, TStringBuilder& str) {
 800765a:	b580      	push	{r7, lr}
 800765c:	b086      	sub	sp, #24
 800765e:	af00      	add	r7, sp, #0
 8007660:	6078      	str	r0, [r7, #4]
 8007662:	6039      	str	r1, [r7, #0]
  // this function was optimize for code size on AVR

  if (codepoint32 < 0x80) {
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	2b7f      	cmp	r3, #127	@ 0x7f
 8007668:	d806      	bhi.n	8007678 <_ZN11ArduinoJson8V730HB226detail4Utf815encodeCodepointINS1_13StringBuilderEEEvmRT_+0x1e>
    str.append(char(codepoint32));
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	b2db      	uxtb	r3, r3
 800766e:	4619      	mov	r1, r3
 8007670:	6838      	ldr	r0, [r7, #0]
 8007672:	f7fc f892 	bl	800379a <_ZN11ArduinoJson8V730HB226detail13StringBuilder6appendEc>

    while (*(--p)) {
      str.append(*p);
    }
  }
}
 8007676:	e070      	b.n	800775a <_ZN11ArduinoJson8V730HB226detail4Utf815encodeCodepointINS1_13StringBuilderEEEvmRT_+0x100>
    char* p = buf;
 8007678:	f107 030c 	add.w	r3, r7, #12
 800767c:	617b      	str	r3, [r7, #20]
    *(p++) = 0;
 800767e:	697b      	ldr	r3, [r7, #20]
 8007680:	1c5a      	adds	r2, r3, #1
 8007682:	617a      	str	r2, [r7, #20]
 8007684:	2200      	movs	r2, #0
 8007686:	701a      	strb	r2, [r3, #0]
    *(p++) = char((codepoint32 | 0x80) & 0xBF);
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	b2db      	uxtb	r3, r3
 800768c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007690:	b2db      	uxtb	r3, r3
 8007692:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8007696:	b2d9      	uxtb	r1, r3
 8007698:	697b      	ldr	r3, [r7, #20]
 800769a:	1c5a      	adds	r2, r3, #1
 800769c:	617a      	str	r2, [r7, #20]
 800769e:	460a      	mov	r2, r1
 80076a0:	701a      	strb	r2, [r3, #0]
    uint16_t codepoint16 = uint16_t(codepoint32 >> 6);
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	099b      	lsrs	r3, r3, #6
 80076a6:	827b      	strh	r3, [r7, #18]
    if (codepoint16 < 0x20) {  // 0x800
 80076a8:	8a7b      	ldrh	r3, [r7, #18]
 80076aa:	2b1f      	cmp	r3, #31
 80076ac:	d80a      	bhi.n	80076c4 <_ZN11ArduinoJson8V730HB226detail4Utf815encodeCodepointINS1_13StringBuilderEEEvmRT_+0x6a>
      *(p++) = char(codepoint16 | 0xC0);
 80076ae:	8a7b      	ldrh	r3, [r7, #18]
 80076b0:	b2db      	uxtb	r3, r3
 80076b2:	f063 033f 	orn	r3, r3, #63	@ 0x3f
 80076b6:	b2d9      	uxtb	r1, r3
 80076b8:	697b      	ldr	r3, [r7, #20]
 80076ba:	1c5a      	adds	r2, r3, #1
 80076bc:	617a      	str	r2, [r7, #20]
 80076be:	460a      	mov	r2, r1
 80076c0:	701a      	strb	r2, [r3, #0]
 80076c2:	e03e      	b.n	8007742 <_ZN11ArduinoJson8V730HB226detail4Utf815encodeCodepointINS1_13StringBuilderEEEvmRT_+0xe8>
      *(p++) = char((codepoint16 | 0x80) & 0xBF);
 80076c4:	8a7b      	ldrh	r3, [r7, #18]
 80076c6:	b2db      	uxtb	r3, r3
 80076c8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80076cc:	b2db      	uxtb	r3, r3
 80076ce:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80076d2:	b2d9      	uxtb	r1, r3
 80076d4:	697b      	ldr	r3, [r7, #20]
 80076d6:	1c5a      	adds	r2, r3, #1
 80076d8:	617a      	str	r2, [r7, #20]
 80076da:	460a      	mov	r2, r1
 80076dc:	701a      	strb	r2, [r3, #0]
      codepoint16 = uint16_t(codepoint16 >> 6);
 80076de:	8a7b      	ldrh	r3, [r7, #18]
 80076e0:	099b      	lsrs	r3, r3, #6
 80076e2:	827b      	strh	r3, [r7, #18]
      if (codepoint16 < 0x10) {  // 0x10000
 80076e4:	8a7b      	ldrh	r3, [r7, #18]
 80076e6:	2b0f      	cmp	r3, #15
 80076e8:	d80a      	bhi.n	8007700 <_ZN11ArduinoJson8V730HB226detail4Utf815encodeCodepointINS1_13StringBuilderEEEvmRT_+0xa6>
        *(p++) = char(codepoint16 | 0xE0);
 80076ea:	8a7b      	ldrh	r3, [r7, #18]
 80076ec:	b2db      	uxtb	r3, r3
 80076ee:	f063 031f 	orn	r3, r3, #31
 80076f2:	b2d9      	uxtb	r1, r3
 80076f4:	697b      	ldr	r3, [r7, #20]
 80076f6:	1c5a      	adds	r2, r3, #1
 80076f8:	617a      	str	r2, [r7, #20]
 80076fa:	460a      	mov	r2, r1
 80076fc:	701a      	strb	r2, [r3, #0]
 80076fe:	e020      	b.n	8007742 <_ZN11ArduinoJson8V730HB226detail4Utf815encodeCodepointINS1_13StringBuilderEEEvmRT_+0xe8>
        *(p++) = char((codepoint16 | 0x80) & 0xBF);
 8007700:	8a7b      	ldrh	r3, [r7, #18]
 8007702:	b2db      	uxtb	r3, r3
 8007704:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007708:	b2db      	uxtb	r3, r3
 800770a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800770e:	b2d9      	uxtb	r1, r3
 8007710:	697b      	ldr	r3, [r7, #20]
 8007712:	1c5a      	adds	r2, r3, #1
 8007714:	617a      	str	r2, [r7, #20]
 8007716:	460a      	mov	r2, r1
 8007718:	701a      	strb	r2, [r3, #0]
        codepoint16 = uint16_t(codepoint16 >> 6);
 800771a:	8a7b      	ldrh	r3, [r7, #18]
 800771c:	099b      	lsrs	r3, r3, #6
 800771e:	827b      	strh	r3, [r7, #18]
        *(p++) = char(codepoint16 | 0xF0);
 8007720:	8a7b      	ldrh	r3, [r7, #18]
 8007722:	b2db      	uxtb	r3, r3
 8007724:	f063 030f 	orn	r3, r3, #15
 8007728:	b2d9      	uxtb	r1, r3
 800772a:	697b      	ldr	r3, [r7, #20]
 800772c:	1c5a      	adds	r2, r3, #1
 800772e:	617a      	str	r2, [r7, #20]
 8007730:	460a      	mov	r2, r1
 8007732:	701a      	strb	r2, [r3, #0]
    while (*(--p)) {
 8007734:	e005      	b.n	8007742 <_ZN11ArduinoJson8V730HB226detail4Utf815encodeCodepointINS1_13StringBuilderEEEvmRT_+0xe8>
      str.append(*p);
 8007736:	697b      	ldr	r3, [r7, #20]
 8007738:	781b      	ldrb	r3, [r3, #0]
 800773a:	4619      	mov	r1, r3
 800773c:	6838      	ldr	r0, [r7, #0]
 800773e:	f7fc f82c 	bl	800379a <_ZN11ArduinoJson8V730HB226detail13StringBuilder6appendEc>
    while (*(--p)) {
 8007742:	697b      	ldr	r3, [r7, #20]
 8007744:	3b01      	subs	r3, #1
 8007746:	617b      	str	r3, [r7, #20]
 8007748:	697b      	ldr	r3, [r7, #20]
 800774a:	781b      	ldrb	r3, [r3, #0]
 800774c:	2b00      	cmp	r3, #0
 800774e:	bf14      	ite	ne
 8007750:	2301      	movne	r3, #1
 8007752:	2300      	moveq	r3, #0
 8007754:	b2db      	uxtb	r3, r3
 8007756:	2b00      	cmp	r3, #0
 8007758:	d1ed      	bne.n	8007736 <_ZN11ArduinoJson8V730HB226detail4Utf815encodeCodepointINS1_13StringBuilderEEEvmRT_+0xdc>
}
 800775a:	bf00      	nop
 800775c:	3718      	adds	r7, #24
 800775e:	46bd      	mov	sp, r7
 8007760:	bd80      	pop	{r7, pc}

08007762 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9isBetweenEccc>:
  static inline bool isBetween(char c, char min, char max) {
 8007762:	b480      	push	{r7}
 8007764:	b083      	sub	sp, #12
 8007766:	af00      	add	r7, sp, #0
 8007768:	4603      	mov	r3, r0
 800776a:	71fb      	strb	r3, [r7, #7]
 800776c:	460b      	mov	r3, r1
 800776e:	71bb      	strb	r3, [r7, #6]
 8007770:	4613      	mov	r3, r2
 8007772:	717b      	strb	r3, [r7, #5]
    return min <= c && c <= max;
 8007774:	79ba      	ldrb	r2, [r7, #6]
 8007776:	79fb      	ldrb	r3, [r7, #7]
 8007778:	429a      	cmp	r2, r3
 800777a:	d805      	bhi.n	8007788 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9isBetweenEccc+0x26>
 800777c:	79fa      	ldrb	r2, [r7, #7]
 800777e:	797b      	ldrb	r3, [r7, #5]
 8007780:	429a      	cmp	r2, r3
 8007782:	d801      	bhi.n	8007788 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9isBetweenEccc+0x26>
 8007784:	2301      	movs	r3, #1
 8007786:	e000      	b.n	800778a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9isBetweenEccc+0x28>
 8007788:	2300      	movs	r3, #0
  }
 800778a:	4618      	mov	r0, r3
 800778c:	370c      	adds	r7, #12
 800778e:	46bd      	mov	sp, r7
 8007790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007794:	4770      	bx	lr

08007796 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_16VariantExtensionEEcvbEv>:
  explicit operator bool() const {
 8007796:	b480      	push	{r7}
 8007798:	b083      	sub	sp, #12
 800779a:	af00      	add	r7, sp, #0
 800779c:	6078      	str	r0, [r7, #4]
    return ptr_ != nullptr;
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	bf14      	ite	ne
 80077a6:	2301      	movne	r3, #1
 80077a8:	2300      	moveq	r3, #0
 80077aa:	b2db      	uxtb	r3, r3
  }
 80077ac:	4618      	mov	r0, r3
 80077ae:	370c      	adds	r7, #12
 80077b0:	46bd      	mov	sp, r7
 80077b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b6:	4770      	bx	lr

080077b8 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_16VariantExtensionEE2idEv>:
  SlotId id() const {
 80077b8:	b480      	push	{r7}
 80077ba:	b083      	sub	sp, #12
 80077bc:	af00      	add	r7, sp, #0
 80077be:	6078      	str	r0, [r7, #4]
    return id_;
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	889b      	ldrh	r3, [r3, #4]
  }
 80077c4:	4618      	mov	r0, r3
 80077c6:	370c      	adds	r7, #12
 80077c8:	46bd      	mov	sp, r7
 80077ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ce:	4770      	bx	lr

080077d0 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_16VariantExtensionEEptEv>:
  T* operator->() const {
 80077d0:	b480      	push	{r7}
 80077d2:	b083      	sub	sp, #12
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	6078      	str	r0, [r7, #4]
    return ptr_;
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
  }
 80077dc:	4618      	mov	r0, r3
 80077de:	370c      	adds	r7, #12
 80077e0:	46bd      	mov	sp, r7
 80077e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e6:	4770      	bx	lr

080077e8 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIlxEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS7_IS9_EE5valueltstS9_stS5_EbE4typeES5_>:
canConvertNumber(TIn value) {
 80077e8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80077ec:	b082      	sub	sp, #8
 80077ee:	af00      	add	r7, sp, #0
 80077f0:	e9c7 0100 	strd	r0, r1, [r7]
  return value >= TIn(numeric_limits<TOut>::lowest()) &&
 80077f4:	f000 f86e 	bl	80078d4 <_ZN11ArduinoJson8V730HB226detail14numeric_limitsIlvE6lowestEv>
 80077f8:	4603      	mov	r3, r0
 80077fa:	17da      	asrs	r2, r3, #31
 80077fc:	4698      	mov	r8, r3
 80077fe:	4691      	mov	r9, r2
 8007800:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007804:	4542      	cmp	r2, r8
 8007806:	eb73 0309 	sbcs.w	r3, r3, r9
 800780a:	db0d      	blt.n	8007828 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIlxEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS7_IS9_EE5valueltstS9_stS5_EbE4typeES5_+0x40>
         value <= TIn(numeric_limits<TOut>::highest());
 800780c:	f000 f86b 	bl	80078e6 <_ZN11ArduinoJson8V730HB226detail14numeric_limitsIlvE7highestEv>
 8007810:	4603      	mov	r3, r0
 8007812:	17da      	asrs	r2, r3, #31
 8007814:	461c      	mov	r4, r3
 8007816:	4615      	mov	r5, r2
  return value >= TIn(numeric_limits<TOut>::lowest()) &&
 8007818:	e9d7 2300 	ldrd	r2, r3, [r7]
 800781c:	4294      	cmp	r4, r2
 800781e:	eb75 0303 	sbcs.w	r3, r5, r3
 8007822:	db01      	blt.n	8007828 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIlxEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS7_IS9_EE5valueltstS9_stS5_EbE4typeES5_+0x40>
 8007824:	2301      	movs	r3, #1
 8007826:	e000      	b.n	800782a <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIlxEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS7_IS9_EE5valueltstS9_stS5_EbE4typeES5_+0x42>
 8007828:	2300      	movs	r3, #0
}
 800782a:	4618      	mov	r0, r3
 800782c:	3708      	adds	r7, #8
 800782e:	46bd      	mov	sp, r7
 8007830:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08007834 <_ZN11ArduinoJson8V730HB226detail6ReaderIPKcvE4readEv>:

  int read() {
 8007834:	b480      	push	{r7}
 8007836:	b083      	sub	sp, #12
 8007838:	af00      	add	r7, sp, #0
 800783a:	6078      	str	r0, [r7, #4]
    return static_cast<unsigned char>(*ptr_++);
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	1c59      	adds	r1, r3, #1
 8007842:	687a      	ldr	r2, [r7, #4]
 8007844:	6011      	str	r1, [r2, #0]
 8007846:	781b      	ldrb	r3, [r3, #0]
  }
 8007848:	4618      	mov	r0, r3
 800784a:	370c      	adds	r7, #12
 800784c:	46bd      	mov	sp, r7
 800784e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007852:	4770      	bx	lr

08007854 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE22canBeInNonQuotedStringEc>:
  static inline bool canBeInNonQuotedString(char c) {
 8007854:	b580      	push	{r7, lr}
 8007856:	b082      	sub	sp, #8
 8007858:	af00      	add	r7, sp, #0
 800785a:	4603      	mov	r3, r0
 800785c:	71fb      	strb	r3, [r7, #7]
    return isBetween(c, '0', '9') || isBetween(c, '_', 'z') ||
 800785e:	79fb      	ldrb	r3, [r7, #7]
 8007860:	2239      	movs	r2, #57	@ 0x39
 8007862:	2130      	movs	r1, #48	@ 0x30
 8007864:	4618      	mov	r0, r3
 8007866:	f7ff ff7c 	bl	8007762 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9isBetweenEccc>
 800786a:	4603      	mov	r3, r0
 800786c:	2b00      	cmp	r3, #0
 800786e:	d111      	bne.n	8007894 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE22canBeInNonQuotedStringEc+0x40>
 8007870:	79fb      	ldrb	r3, [r7, #7]
 8007872:	227a      	movs	r2, #122	@ 0x7a
 8007874:	215f      	movs	r1, #95	@ 0x5f
 8007876:	4618      	mov	r0, r3
 8007878:	f7ff ff73 	bl	8007762 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9isBetweenEccc>
 800787c:	4603      	mov	r3, r0
 800787e:	2b00      	cmp	r3, #0
 8007880:	d108      	bne.n	8007894 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE22canBeInNonQuotedStringEc+0x40>
           isBetween(c, 'A', 'Z');
 8007882:	79fb      	ldrb	r3, [r7, #7]
 8007884:	225a      	movs	r2, #90	@ 0x5a
 8007886:	2141      	movs	r1, #65	@ 0x41
 8007888:	4618      	mov	r0, r3
 800788a:	f7ff ff6a 	bl	8007762 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9isBetweenEccc>
 800788e:	4603      	mov	r3, r0
    return isBetween(c, '0', '9') || isBetween(c, '_', 'z') ||
 8007890:	2b00      	cmp	r3, #0
 8007892:	d001      	beq.n	8007898 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE22canBeInNonQuotedStringEc+0x44>
 8007894:	2301      	movs	r3, #1
 8007896:	e000      	b.n	800789a <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE22canBeInNonQuotedStringEc+0x46>
 8007898:	2300      	movs	r3, #0
  }
 800789a:	4618      	mov	r0, r3
 800789c:	3708      	adds	r7, #8
 800789e:	46bd      	mov	sp, r7
 80078a0:	bd80      	pop	{r7, pc}

080078a2 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9decodeHexEc>:
  static inline uint8_t decodeHex(char c) {
 80078a2:	b480      	push	{r7}
 80078a4:	b083      	sub	sp, #12
 80078a6:	af00      	add	r7, sp, #0
 80078a8:	4603      	mov	r3, r0
 80078aa:	71fb      	strb	r3, [r7, #7]
    if (c < 'A')
 80078ac:	79fb      	ldrb	r3, [r7, #7]
 80078ae:	2b40      	cmp	r3, #64	@ 0x40
 80078b0:	d803      	bhi.n	80078ba <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9decodeHexEc+0x18>
      return uint8_t(c - '0');
 80078b2:	79fb      	ldrb	r3, [r7, #7]
 80078b4:	3b30      	subs	r3, #48	@ 0x30
 80078b6:	b2db      	uxtb	r3, r3
 80078b8:	e006      	b.n	80078c8 <_ZN11ArduinoJson8V730HB226detail16JsonDeserializerINS1_6ReaderIPKcvEEE9decodeHexEc+0x26>
    c = char(c & ~0x20);  // uppercase
 80078ba:	79fb      	ldrb	r3, [r7, #7]
 80078bc:	f023 0320 	bic.w	r3, r3, #32
 80078c0:	71fb      	strb	r3, [r7, #7]
    return uint8_t(c - 'A' + 10);
 80078c2:	79fb      	ldrb	r3, [r7, #7]
 80078c4:	3b37      	subs	r3, #55	@ 0x37
 80078c6:	b2db      	uxtb	r3, r3
  }
 80078c8:	4618      	mov	r0, r3
 80078ca:	370c      	adds	r7, #12
 80078cc:	46bd      	mov	sp, r7
 80078ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d2:	4770      	bx	lr

080078d4 <_ZN11ArduinoJson8V730HB226detail14numeric_limitsIlvE6lowestEv>:
};

template <typename T>
struct numeric_limits<
    T, enable_if_t<is_integral<T>::value && is_signed<T>::value>> {
  static constexpr T lowest() {
 80078d4:	b480      	push	{r7}
 80078d6:	af00      	add	r7, sp, #0
    return T(T(1) << (sizeof(T) * 8 - 1));
 80078d8:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
  }
 80078dc:	4618      	mov	r0, r3
 80078de:	46bd      	mov	sp, r7
 80078e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e4:	4770      	bx	lr

080078e6 <_ZN11ArduinoJson8V730HB226detail14numeric_limitsIlvE7highestEv>:
  static constexpr T highest() {
 80078e6:	b580      	push	{r7, lr}
 80078e8:	af00      	add	r7, sp, #0
    return T(~lowest());
 80078ea:	f7ff fff3 	bl	80078d4 <_ZN11ArduinoJson8V730HB226detail14numeric_limitsIlvE6lowestEv>
 80078ee:	4603      	mov	r3, r0
 80078f0:	43db      	mvns	r3, r3
  }
 80078f2:	4618      	mov	r0, r3
 80078f4:	bd80      	pop	{r7, pc}

080078f6 <_ZN11ArduinoJson8V730HB226detail10StringPoolD1Ev>:
  ~StringPool() {
 80078f6:	b480      	push	{r7}
 80078f8:	b083      	sub	sp, #12
 80078fa:	af00      	add	r7, sp, #0
 80078fc:	6078      	str	r0, [r7, #4]
  }
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	4618      	mov	r0, r3
 8007902:	370c      	adds	r7, #12
 8007904:	46bd      	mov	sp, r7
 8007906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800790a:	4770      	bx	lr

0800790c <_ZN11ArduinoJson8V730HB226detail15ResourceManagerD1Ev>:
  ~ResourceManager() {
 800790c:	b580      	push	{r7, lr}
 800790e:	b082      	sub	sp, #8
 8007910:	af00      	add	r7, sp, #0
 8007912:	6078      	str	r0, [r7, #4]
    stringPool_.clear(allocator_);
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	f103 0208 	add.w	r2, r3, #8
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	4619      	mov	r1, r3
 8007920:	4610      	mov	r0, r2
 8007922:	f7fa ff17 	bl	8002754 <_ZN11ArduinoJson8V730HB226detail10StringPool5clearEPNS0_9AllocatorE>
    variantPools_.clear(allocator_);
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	f103 020c 	add.w	r2, r3, #12
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	4619      	mov	r1, r3
 8007932:	4610      	mov	r0, r2
 8007934:	f7fc ff98 	bl	8004868 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEE5clearEPNS0_9AllocatorE>
  }
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	330c      	adds	r3, #12
 800793c:	4618      	mov	r0, r3
 800793e:	f001 f89f 	bl	8008a80 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEED1Ev>
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	3308      	adds	r3, #8
 8007946:	4618      	mov	r0, r3
 8007948:	f7ff ffd5 	bl	80078f6 <_ZN11ArduinoJson8V730HB226detail10StringPoolD1Ev>
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	4618      	mov	r0, r3
 8007950:	3708      	adds	r7, #8
 8007952:	46bd      	mov	sp, r7
 8007954:	bd80      	pop	{r7, pc}

08007956 <_ZN11ArduinoJson8V730HB2212JsonDocumentD1Ev>:

ARDUINOJSON_BEGIN_PUBLIC_NAMESPACE

// A JSON document.
// https://arduinojson.org/v7/api/jsondocument/
class JsonDocument : public detail::VariantOperators<const JsonDocument&> {
 8007956:	b580      	push	{r7, lr}
 8007958:	b082      	sub	sp, #8
 800795a:	af00      	add	r7, sp, #0
 800795c:	6078      	str	r0, [r7, #4]
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	4618      	mov	r0, r3
 8007962:	f7ff ffd3 	bl	800790c <_ZN11ArduinoJson8V730HB226detail15ResourceManagerD1Ev>
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	4618      	mov	r0, r3
 800796a:	3708      	adds	r7, #8
 800796c:	46bd      	mov	sp, r7
 800796e:	bd80      	pop	{r7, pc}

08007970 <EXTI4_IRQHandler>:
#include "interrupt.h"

extern "C" {

	void EXTI4_IRQHandler()
	{
 8007970:	b580      	push	{r7, lr}
 8007972:	af00      	add	r7, sp, #0
		// Chip select pin is PA_4 (EXTI4 PIN 4)
		if(__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_4) != RESET)
 8007974:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007978:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800797c:	f003 0310 	and.w	r3, r3, #16
 8007980:	2b00      	cmp	r3, #0
 8007982:	bf14      	ite	ne
 8007984:	2301      	movne	r3, #1
 8007986:	2300      	moveq	r3, #0
 8007988:	b2db      	uxtb	r3, r3
 800798a:	2b00      	cmp	r3, #0
 800798c:	d006      	beq.n	800799c <EXTI4_IRQHandler+0x2c>
		{
		__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_4);
 800798e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007992:	2210      	movs	r2, #16
 8007994:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
		Interrupt::EXTI4_Wrapper();
 8007998:	f7fa fd80 	bl	800249c <_ZN9Interrupt13EXTI4_WrapperEv>
		}
	}
 800799c:	bf00      	nop
 800799e:	bd80      	pop	{r7, pc}

080079a0 <DMA1_Stream0_IRQHandler>:

	void DMA1_Stream0_IRQHandler()
	{
 80079a0:	b580      	push	{r7, lr}
 80079a2:	af00      	add	r7, sp, #0
		// DMA interrupt management in the moduelInterrupt handleInterrupt() routine
		Interrupt::DMA1_Stream0_Wrapper();
 80079a4:	f7fa fd88 	bl	80024b8 <_ZN9Interrupt20DMA1_Stream0_WrapperEv>
	}
 80079a8:	bf00      	nop
 80079aa:	bd80      	pop	{r7, pc}

080079ac <DMA1_Stream1_IRQHandler>:

	void DMA1_Stream1_IRQHandler()
	{
 80079ac:	b580      	push	{r7, lr}
 80079ae:	af00      	add	r7, sp, #0
		// DMA interrupt management in the moduelInterrupt handleInterrupt() routine
		Interrupt::DMA1_Stream1_Wrapper();
 80079b0:	f7fa fd90 	bl	80024d4 <_ZN9Interrupt20DMA1_Stream1_WrapperEv>
	}
 80079b4:	bf00      	nop
 80079b6:	bd80      	pop	{r7, pc}

080079b8 <TIM2_IRQHandler>:


	void TIM2_IRQHandler()
	{
 80079b8:	b580      	push	{r7, lr}
 80079ba:	af00      	add	r7, sp, #0
	  if(TIM2->SR & TIM_SR_UIF) // if UIF flag is set
 80079bc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80079c0:	691b      	ldr	r3, [r3, #16]
 80079c2:	f003 0301 	and.w	r3, r3, #1
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	bf14      	ite	ne
 80079ca:	2301      	movne	r3, #1
 80079cc:	2300      	moveq	r3, #0
 80079ce:	b2db      	uxtb	r3, r3
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d009      	beq.n	80079e8 <TIM2_IRQHandler+0x30>
	  {
		TIM2->SR &= ~TIM_SR_UIF; // clear UIF flag
 80079d4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80079d8:	691b      	ldr	r3, [r3, #16]
 80079da:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80079de:	f023 0301 	bic.w	r3, r3, #1
 80079e2:	6113      	str	r3, [r2, #16]

		Interrupt::TIM2_Wrapper();
 80079e4:	f7fa fd84 	bl	80024f0 <_ZN9Interrupt12TIM2_WrapperEv>
	  }
	}
 80079e8:	bf00      	nop
 80079ea:	bd80      	pop	{r7, pc}

080079ec <TIM3_IRQHandler>:


	void TIM3_IRQHandler()
	{
 80079ec:	b580      	push	{r7, lr}
 80079ee:	af00      	add	r7, sp, #0
	  if(TIM3->SR & TIM_SR_UIF) // if UIF flag is set
 80079f0:	4b0a      	ldr	r3, [pc, #40]	@ (8007a1c <TIM3_IRQHandler+0x30>)
 80079f2:	691b      	ldr	r3, [r3, #16]
 80079f4:	f003 0301 	and.w	r3, r3, #1
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	bf14      	ite	ne
 80079fc:	2301      	movne	r3, #1
 80079fe:	2300      	moveq	r3, #0
 8007a00:	b2db      	uxtb	r3, r3
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d007      	beq.n	8007a16 <TIM3_IRQHandler+0x2a>
	  {
		TIM3->SR &= ~TIM_SR_UIF; // clear UIF flag
 8007a06:	4b05      	ldr	r3, [pc, #20]	@ (8007a1c <TIM3_IRQHandler+0x30>)
 8007a08:	691b      	ldr	r3, [r3, #16]
 8007a0a:	4a04      	ldr	r2, [pc, #16]	@ (8007a1c <TIM3_IRQHandler+0x30>)
 8007a0c:	f023 0301 	bic.w	r3, r3, #1
 8007a10:	6113      	str	r3, [r2, #16]

		Interrupt::TIM3_Wrapper();
 8007a12:	f7fa fd7b 	bl	800250c <_ZN9Interrupt12TIM3_WrapperEv>
	  }
	}
 8007a16:	bf00      	nop
 8007a18:	bd80      	pop	{r7, pc}
 8007a1a:	bf00      	nop
 8007a1c:	40000400 	.word	0x40000400

08007a20 <TIM4_IRQHandler>:

	void TIM4_IRQHandler()
	{
 8007a20:	b580      	push	{r7, lr}
 8007a22:	af00      	add	r7, sp, #0
	  if(TIM4->SR & TIM_SR_UIF) // if UIF flag is set
 8007a24:	4b0a      	ldr	r3, [pc, #40]	@ (8007a50 <TIM4_IRQHandler+0x30>)
 8007a26:	691b      	ldr	r3, [r3, #16]
 8007a28:	f003 0301 	and.w	r3, r3, #1
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	bf14      	ite	ne
 8007a30:	2301      	movne	r3, #1
 8007a32:	2300      	moveq	r3, #0
 8007a34:	b2db      	uxtb	r3, r3
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d007      	beq.n	8007a4a <TIM4_IRQHandler+0x2a>
	  {
		TIM4->SR &= ~TIM_SR_UIF; // clear UIF flag
 8007a3a:	4b05      	ldr	r3, [pc, #20]	@ (8007a50 <TIM4_IRQHandler+0x30>)
 8007a3c:	691b      	ldr	r3, [r3, #16]
 8007a3e:	4a04      	ldr	r2, [pc, #16]	@ (8007a50 <TIM4_IRQHandler+0x30>)
 8007a40:	f023 0301 	bic.w	r3, r3, #1
 8007a44:	6113      	str	r3, [r2, #16]

		Interrupt::TIM4_Wrapper();
 8007a46:	f7fa fd6f 	bl	8002528 <_ZN9Interrupt12TIM4_WrapperEv>
	  }
	}
 8007a4a:	bf00      	nop
 8007a4c:	bd80      	pop	{r7, pc}
 8007a4e:	bf00      	nop
 8007a50:	40000800 	.word	0x40000800

08007a54 <_Z13createThreadsv>:
#include "extern.h"


void createThreads(void)
{
 8007a54:	b480      	push	{r7}
 8007a56:	af00      	add	r7, sp, #0
	NVIC_SetPriority(TIM2_IRQn, SERVO_THREAD_IRQ_PRIORITY);

	commsThread = new pruThread(TIM4, TIM4_IRQn, PRU_COMMSFREQ, commsCount);
	NVIC_SetPriority(TIM4_IRQn, COMMS_THREAD_IRQ_PRIORITY);
	*/
}
 8007a58:	bf00      	nop
 8007a5a:	46bd      	mov	sp, r7
 8007a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a60:	4770      	bx	lr
	...

08007a64 <__io_putchar>:


// re-target printf to UART1 by redeclaring week function in syscalls.c
extern "C" {
	int __io_putchar(int ch)
	{
 8007a64:	b580      	push	{r7, lr}
 8007a66:	b082      	sub	sp, #8
 8007a68:	af00      	add	r7, sp, #0
 8007a6a:	6078      	str	r0, [r7, #4]
	  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 8007a6c:	1d39      	adds	r1, r7, #4
 8007a6e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8007a72:	2201      	movs	r2, #1
 8007a74:	4803      	ldr	r0, [pc, #12]	@ (8007a84 <__io_putchar+0x20>)
 8007a76:	f012 f87e 	bl	8019b76 <HAL_UART_Transmit>
	  return ch;
 8007a7a:	687b      	ldr	r3, [r7, #4]
	}
 8007a7c:	4618      	mov	r0, r3
 8007a7e:	3708      	adds	r7, #8
 8007a80:	46bd      	mov	sp, r7
 8007a82:	bd80      	pop	{r7, pc}
 8007a84:	24000448 	.word	0x24000448

08007a88 <_Z9initCommsv>:
}


void initComms()
{
 8007a88:	b580      	push	{r7, lr}
 8007a8a:	af00      	add	r7, sp, #0
    printf("\n1. Starting up Remora communications\n");
 8007a8c:	4807      	ldr	r0, [pc, #28]	@ (8007aac <_Z9initCommsv+0x24>)
 8007a8e:	f016 ff79 	bl	801e984 <puts>

    // initialise and start the Remora communications module
    comms->init();
 8007a92:	4b07      	ldr	r3, [pc, #28]	@ (8007ab0 <_Z9initCommsv+0x28>)
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	4618      	mov	r0, r3
 8007a98:	f006 fcca 	bl	800e430 <_ZN11RemoraComms4initEv>
    comms->start();
 8007a9c:	4b04      	ldr	r3, [pc, #16]	@ (8007ab0 <_Z9initCommsv+0x28>)
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	4618      	mov	r0, r3
 8007aa2:	f006 fe4b 	bl	800e73c <_ZN11RemoraComms5startEv>
}
 8007aa6:	bf00      	nop
 8007aa8:	bd80      	pop	{r7, pc}
 8007aaa:	bf00      	nop
 8007aac:	0801fb2c 	.word	0x0801fb2c
 8007ab0:	240003c8 	.word	0x240003c8

08007ab4 <_Z10commsTasksv>:


void commsTasks()
{
 8007ab4:	b580      	push	{r7, lr}
 8007ab6:	af00      	add	r7, sp, #0
	// check and process communications packets
	comms->processPacket();
 8007ab8:	4b03      	ldr	r3, [pc, #12]	@ (8007ac8 <_Z10commsTasksv+0x14>)
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	4618      	mov	r0, r3
 8007abe:	f007 fca6 	bl	800f40e <_ZN11RemoraComms13processPacketEv>
}
 8007ac2:	bf00      	nop
 8007ac4:	bd80      	pop	{r7, pc}
 8007ac6:	bf00      	nop
 8007ac8:	240003c8 	.word	0x240003c8

08007acc <_Z14readJsonConfigv>:


void readJsonConfig()
{
 8007acc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007ad0:	b08d      	sub	sp, #52	@ 0x34
 8007ad2:	af00      	add	r7, sp, #0
	uint32_t bytesread; // bytes read count


    printf("\n2. Reading JSON configuration file\n");
 8007ad4:	4854      	ldr	r0, [pc, #336]	@ (8007c28 <_Z14readJsonConfigv+0x15c>)
 8007ad6:	f016 ff55 	bl	801e984 <puts>

    // Try to mount the file system
    printf("	Mounting the file system... \n");
 8007ada:	4854      	ldr	r0, [pc, #336]	@ (8007c2c <_Z14readJsonConfigv+0x160>)
 8007adc:	f016 ff52 	bl	801e984 <puts>
    if(f_mount(&SDFatFS, (TCHAR const*)SDPath, 0) != FR_OK)
 8007ae0:	2200      	movs	r2, #0
 8007ae2:	4953      	ldr	r1, [pc, #332]	@ (8007c30 <_Z14readJsonConfigv+0x164>)
 8007ae4:	4853      	ldr	r0, [pc, #332]	@ (8007c34 <_Z14readJsonConfigv+0x168>)
 8007ae6:	f015 ff05 	bl	801d8f4 <f_mount>
 8007aea:	4603      	mov	r3, r0
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	bf14      	ite	ne
 8007af0:	2301      	movne	r3, #1
 8007af2:	2300      	moveq	r3, #0
 8007af4:	b2db      	uxtb	r3, r3
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d005      	beq.n	8007b06 <_Z14readJsonConfigv+0x3a>
	{
    	printf("	Failed to mount SD card\n\r");
 8007afa:	484f      	ldr	r0, [pc, #316]	@ (8007c38 <_Z14readJsonConfigv+0x16c>)
 8007afc:	f016 fed2 	bl	801e8a4 <iprintf>
    	Error_Handler();
 8007b00:	f000 ffb2 	bl	8008a68 <Error_Handler>
			}

			f_close(&SDFile);
		}
    }
}
 8007b04:	e08a      	b.n	8007c1c <_Z14readJsonConfigv+0x150>
		if(f_open(&SDFile, "config.txt", FA_READ) != FR_OK)
 8007b06:	2201      	movs	r2, #1
 8007b08:	494c      	ldr	r1, [pc, #304]	@ (8007c3c <_Z14readJsonConfigv+0x170>)
 8007b0a:	484d      	ldr	r0, [pc, #308]	@ (8007c40 <_Z14readJsonConfigv+0x174>)
 8007b0c:	f015 ff38 	bl	801d980 <f_open>
 8007b10:	4603      	mov	r3, r0
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	bf14      	ite	ne
 8007b16:	2301      	movne	r3, #1
 8007b18:	2300      	moveq	r3, #0
 8007b1a:	b2db      	uxtb	r3, r3
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d005      	beq.n	8007b2c <_Z14readJsonConfigv+0x60>
			printf("	Failed to open JSON config file\n");
 8007b20:	4848      	ldr	r0, [pc, #288]	@ (8007c44 <_Z14readJsonConfigv+0x178>)
 8007b22:	f016 ff2f 	bl	801e984 <puts>
			Error_Handler();
 8007b26:	f000 ff9f 	bl	8008a68 <Error_Handler>
}
 8007b2a:	e077      	b.n	8007c1c <_Z14readJsonConfigv+0x150>
		}
 8007b2c:	466b      	mov	r3, sp
 8007b2e:	461e      	mov	r6, r3
			int32_t length = f_size(&SDFile);
 8007b30:	4b43      	ldr	r3, [pc, #268]	@ (8007c40 <_Z14readJsonConfigv+0x174>)
 8007b32:	68db      	ldr	r3, [r3, #12]
 8007b34:	62bb      	str	r3, [r7, #40]	@ 0x28
			printf("	JSON config file lenght = %2ld\n", length);
 8007b36:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007b38:	4843      	ldr	r0, [pc, #268]	@ (8007c48 <_Z14readJsonConfigv+0x17c>)
 8007b3a:	f016 feb3 	bl	801e8a4 <iprintf>
			__attribute__((aligned(32))) char rtext[length];
 8007b3e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007b40:	1e4b      	subs	r3, r1, #1
 8007b42:	627b      	str	r3, [r7, #36]	@ 0x24
 8007b44:	460a      	mov	r2, r1
 8007b46:	2300      	movs	r3, #0
 8007b48:	4690      	mov	r8, r2
 8007b4a:	4699      	mov	r9, r3
 8007b4c:	f04f 0200 	mov.w	r2, #0
 8007b50:	f04f 0300 	mov.w	r3, #0
 8007b54:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007b58:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007b5c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007b60:	460a      	mov	r2, r1
 8007b62:	2300      	movs	r3, #0
 8007b64:	4614      	mov	r4, r2
 8007b66:	461d      	mov	r5, r3
 8007b68:	f04f 0200 	mov.w	r2, #0
 8007b6c:	f04f 0300 	mov.w	r3, #0
 8007b70:	00eb      	lsls	r3, r5, #3
 8007b72:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007b76:	00e2      	lsls	r2, r4, #3
 8007b78:	460b      	mov	r3, r1
 8007b7a:	3318      	adds	r3, #24
 8007b7c:	3307      	adds	r3, #7
 8007b7e:	08db      	lsrs	r3, r3, #3
 8007b80:	00db      	lsls	r3, r3, #3
 8007b82:	ebad 0d03 	sub.w	sp, sp, r3
 8007b86:	466b      	mov	r3, sp
 8007b88:	331f      	adds	r3, #31
 8007b8a:	095b      	lsrs	r3, r3, #5
 8007b8c:	015b      	lsls	r3, r3, #5
 8007b8e:	623b      	str	r3, [r7, #32]
			if(f_read(&SDFile, rtext, length, (UINT *)&bytesread) != FR_OK)
 8007b90:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007b92:	1d3b      	adds	r3, r7, #4
 8007b94:	6a39      	ldr	r1, [r7, #32]
 8007b96:	482a      	ldr	r0, [pc, #168]	@ (8007c40 <_Z14readJsonConfigv+0x174>)
 8007b98:	f016 f8ac 	bl	801dcf4 <f_read>
 8007b9c:	4603      	mov	r3, r0
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	bf14      	ite	ne
 8007ba2:	2301      	movne	r3, #1
 8007ba4:	2300      	moveq	r3, #0
 8007ba6:	b2db      	uxtb	r3, r3
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d003      	beq.n	8007bb4 <_Z14readJsonConfigv+0xe8>
				printf("	JSON config file read FAILURE\n");
 8007bac:	4827      	ldr	r0, [pc, #156]	@ (8007c4c <_Z14readJsonConfigv+0x180>)
 8007bae:	f016 fee9 	bl	801e984 <puts>
 8007bb2:	e02f      	b.n	8007c14 <_Z14readJsonConfigv+0x148>
				printf("	JSON config file read SUCCESS!\n");
 8007bb4:	4826      	ldr	r0, [pc, #152]	@ (8007c50 <_Z14readJsonConfigv+0x184>)
 8007bb6:	f016 fee5 	bl	801e984 <puts>
				strJson.reserve(length + 1);
 8007bba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007bbc:	3301      	adds	r3, #1
 8007bbe:	4619      	mov	r1, r3
 8007bc0:	4824      	ldr	r0, [pc, #144]	@ (8007c54 <_Z14readJsonConfigv+0x188>)
 8007bc2:	f016 fc0d 	bl	801e3e0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7reserveEj>
			    for (int i = 0; i < length; i++) {
 8007bc6:	2300      	movs	r3, #0
 8007bc8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007bca:	e017      	b.n	8007bfc <_Z14readJsonConfigv+0x130>
			    	strJson = strJson + rtext[i];
 8007bcc:	6a3a      	ldr	r2, [r7, #32]
 8007bce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007bd0:	4413      	add	r3, r2
 8007bd2:	781a      	ldrb	r2, [r3, #0]
 8007bd4:	f107 0308 	add.w	r3, r7, #8
 8007bd8:	491e      	ldr	r1, [pc, #120]	@ (8007c54 <_Z14readJsonConfigv+0x188>)
 8007bda:	4618      	mov	r0, r3
 8007bdc:	f7fd f9f1 	bl	8004fc2 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_S5_>
 8007be0:	f107 0308 	add.w	r3, r7, #8
 8007be4:	4619      	mov	r1, r3
 8007be6:	481b      	ldr	r0, [pc, #108]	@ (8007c54 <_Z14readJsonConfigv+0x188>)
 8007be8:	f016 fb8b 	bl	801e302 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 8007bec:	f107 0308 	add.w	r3, r7, #8
 8007bf0:	4618      	mov	r0, r3
 8007bf2:	f016 fb80 	bl	801e2f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
			    for (int i = 0; i < length; i++) {
 8007bf6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007bf8:	3301      	adds	r3, #1
 8007bfa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007bfc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007bfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c00:	429a      	cmp	r2, r3
 8007c02:	dbe3      	blt.n	8007bcc <_Z14readJsonConfigv+0x100>
			    printf("\n%s\n", strJson.c_str());
 8007c04:	4813      	ldr	r0, [pc, #76]	@ (8007c54 <_Z14readJsonConfigv+0x188>)
 8007c06:	f016 fc57 	bl	801e4b8 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 8007c0a:	4603      	mov	r3, r0
 8007c0c:	4619      	mov	r1, r3
 8007c0e:	4812      	ldr	r0, [pc, #72]	@ (8007c58 <_Z14readJsonConfigv+0x18c>)
 8007c10:	f016 fe48 	bl	801e8a4 <iprintf>
			f_close(&SDFile);
 8007c14:	480a      	ldr	r0, [pc, #40]	@ (8007c40 <_Z14readJsonConfigv+0x174>)
 8007c16:	f016 fa2a 	bl	801e06e <f_close>
 8007c1a:	46b5      	mov	sp, r6
}
 8007c1c:	bf00      	nop
 8007c1e:	3734      	adds	r7, #52	@ 0x34
 8007c20:	46bd      	mov	sp, r7
 8007c22:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007c26:	bf00      	nop
 8007c28:	0801fb54 	.word	0x0801fb54
 8007c2c:	0801fb78 	.word	0x0801fb78
 8007c30:	240004f0 	.word	0x240004f0
 8007c34:	240004f4 	.word	0x240004f4
 8007c38:	0801fb98 	.word	0x0801fb98
 8007c3c:	0801fbb4 	.word	0x0801fbb4
 8007c40:	24000724 	.word	0x24000724
 8007c44:	0801fbc0 	.word	0x0801fbc0
 8007c48:	0801fbe4 	.word	0x0801fbe4
 8007c4c:	0801fc08 	.word	0x0801fc08
 8007c50:	0801fc28 	.word	0x0801fc28
 8007c54:	24000360 	.word	0x24000360
 8007c58:	0801fc48 	.word	0x0801fc48

08007c5c <_Z15deserialiseJSONv>:


void deserialiseJSON()
{
 8007c5c:	b580      	push	{r7, lr}
 8007c5e:	b082      	sub	sp, #8
 8007c60:	af00      	add	r7, sp, #0
    printf("\n3. Parsing json configuration file\n");
 8007c62:	4823      	ldr	r0, [pc, #140]	@ (8007cf0 <_Z15deserialiseJSONv+0x94>)
 8007c64:	f016 fe8e 	bl	801e984 <puts>

    const char *json = strJson.c_str();
 8007c68:	4822      	ldr	r0, [pc, #136]	@ (8007cf4 <_Z15deserialiseJSONv+0x98>)
 8007c6a:	f016 fc25 	bl	801e4b8 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 8007c6e:	6078      	str	r0, [r7, #4]

    // parse the json configuration file
    DeserializationError error = deserializeJson(doc, json);
 8007c70:	6879      	ldr	r1, [r7, #4]
 8007c72:	4821      	ldr	r0, [pc, #132]	@ (8007cf8 <_Z15deserialiseJSONv+0x9c>)
 8007c74:	f7fd f9bb 	bl	8004fee <_ZN11ArduinoJson8V730HB2215deserializeJsonIRNS0_12JsonDocumentEKcJELi0EEENS0_20DeserializationErrorEOT_PT0_DpOT1_>
 8007c78:	4603      	mov	r3, r0
 8007c7a:	703b      	strb	r3, [r7, #0]

    printf("	Config deserialisation - ");
 8007c7c:	481f      	ldr	r0, [pc, #124]	@ (8007cfc <_Z15deserialiseJSONv+0xa0>)
 8007c7e:	f016 fe11 	bl	801e8a4 <iprintf>

    switch (error.code())
 8007c82:	463b      	mov	r3, r7
 8007c84:	4618      	mov	r0, r3
 8007c86:	f7fb feac 	bl	80039e2 <_ZNK11ArduinoJson8V730HB2220DeserializationError4codeEv>
 8007c8a:	4603      	mov	r3, r0
 8007c8c:	2b04      	cmp	r3, #4
 8007c8e:	d011      	beq.n	8007cb4 <_Z15deserialiseJSONv+0x58>
 8007c90:	2b04      	cmp	r3, #4
 8007c92:	dc16      	bgt.n	8007cc2 <_Z15deserialiseJSONv+0x66>
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d002      	beq.n	8007c9e <_Z15deserialiseJSONv+0x42>
 8007c98:	2b03      	cmp	r3, #3
 8007c9a:	d004      	beq.n	8007ca6 <_Z15deserialiseJSONv+0x4a>
 8007c9c:	e011      	b.n	8007cc2 <_Z15deserialiseJSONv+0x66>
    {
        case DeserializationError::Ok:
            printf("Deserialization succeeded\n");
 8007c9e:	4818      	ldr	r0, [pc, #96]	@ (8007d00 <_Z15deserialiseJSONv+0xa4>)
 8007ca0:	f016 fe70 	bl	801e984 <puts>
            break;
 8007ca4:	e01f      	b.n	8007ce6 <_Z15deserialiseJSONv+0x8a>
        case DeserializationError::InvalidInput:
            printf("Invalid input!\n");
 8007ca6:	4817      	ldr	r0, [pc, #92]	@ (8007d04 <_Z15deserialiseJSONv+0xa8>)
 8007ca8:	f016 fe6c 	bl	801e984 <puts>
            configError = true;
 8007cac:	4b16      	ldr	r3, [pc, #88]	@ (8007d08 <_Z15deserialiseJSONv+0xac>)
 8007cae:	2201      	movs	r2, #1
 8007cb0:	701a      	strb	r2, [r3, #0]
            break;
 8007cb2:	e018      	b.n	8007ce6 <_Z15deserialiseJSONv+0x8a>
        case DeserializationError::NoMemory:
            printf("Not enough memory\n");
 8007cb4:	4815      	ldr	r0, [pc, #84]	@ (8007d0c <_Z15deserialiseJSONv+0xb0>)
 8007cb6:	f016 fe65 	bl	801e984 <puts>
            configError = true;
 8007cba:	4b13      	ldr	r3, [pc, #76]	@ (8007d08 <_Z15deserialiseJSONv+0xac>)
 8007cbc:	2201      	movs	r2, #1
 8007cbe:	701a      	strb	r2, [r3, #0]
            break;
 8007cc0:	e011      	b.n	8007ce6 <_Z15deserialiseJSONv+0x8a>
        default:
            printf("Deserialization failed: ");
 8007cc2:	4813      	ldr	r0, [pc, #76]	@ (8007d10 <_Z15deserialiseJSONv+0xb4>)
 8007cc4:	f016 fdee 	bl	801e8a4 <iprintf>
            printf(error.c_str());
 8007cc8:	463b      	mov	r3, r7
 8007cca:	4618      	mov	r0, r3
 8007ccc:	f7fb fe96 	bl	80039fc <_ZNK11ArduinoJson8V730HB2220DeserializationError5c_strEv>
 8007cd0:	4603      	mov	r3, r0
 8007cd2:	4618      	mov	r0, r3
 8007cd4:	f016 fde6 	bl	801e8a4 <iprintf>
            printf("\n");
 8007cd8:	200a      	movs	r0, #10
 8007cda:	f016 fdf5 	bl	801e8c8 <putchar>
            configError = true;
 8007cde:	4b0a      	ldr	r3, [pc, #40]	@ (8007d08 <_Z15deserialiseJSONv+0xac>)
 8007ce0:	2201      	movs	r2, #1
 8007ce2:	701a      	strb	r2, [r3, #0]
            break;
 8007ce4:	bf00      	nop
    }
}
 8007ce6:	bf00      	nop
 8007ce8:	3708      	adds	r7, #8
 8007cea:	46bd      	mov	sp, r7
 8007cec:	bd80      	pop	{r7, pc}
 8007cee:	bf00      	nop
 8007cf0:	0801fc50 	.word	0x0801fc50
 8007cf4:	24000360 	.word	0x24000360
 8007cf8:	24000378 	.word	0x24000378
 8007cfc:	0801fc74 	.word	0x0801fc74
 8007d00:	0801fc90 	.word	0x0801fc90
 8007d04:	0801fcac 	.word	0x0801fcac
 8007d08:	2400030f 	.word	0x2400030f
 8007d0c:	0801fcbc 	.word	0x0801fcbc
 8007d10:	0801fcd0 	.word	0x0801fcd0

08007d14 <_Z12countModulesv>:


void countModules()
{
 8007d14:	b580      	push	{r7, lr}
 8007d16:	b098      	sub	sp, #96	@ 0x60
 8007d18:	af00      	add	r7, sp, #0
    baseCount = 0;
 8007d1a:	4b4a      	ldr	r3, [pc, #296]	@ (8007e44 <_Z12countModulesv+0x130>)
 8007d1c:	2200      	movs	r2, #0
 8007d1e:	701a      	strb	r2, [r3, #0]
    servoCount = 0;
 8007d20:	4b49      	ldr	r3, [pc, #292]	@ (8007e48 <_Z12countModulesv+0x134>)
 8007d22:	2200      	movs	r2, #0
 8007d24:	701a      	strb	r2, [r3, #0]

    printf("\n4. Counting modules\n");
 8007d26:	4849      	ldr	r0, [pc, #292]	@ (8007e4c <_Z12countModulesv+0x138>)
 8007d28:	f016 fe2c 	bl	801e984 <puts>

    JsonArray Modules = doc["Modules"];
 8007d2c:	f107 0320 	add.w	r3, r7, #32
 8007d30:	4a47      	ldr	r2, [pc, #284]	@ (8007e50 <_Z12countModulesv+0x13c>)
 8007d32:	4948      	ldr	r1, [pc, #288]	@ (8007e54 <_Z12countModulesv+0x140>)
 8007d34:	4618      	mov	r0, r3
 8007d36:	f7fd f887 	bl	8004e48 <_ZN11ArduinoJson8V730HB2212JsonDocumentixIA8_cLi0EEENS0_6detail11MemberProxyIRS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueESA_NS4_9remove_cvINS4_16remove_referenceISA_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKSA_>
 8007d3a:	f107 0318 	add.w	r3, r7, #24
 8007d3e:	f107 0220 	add.w	r2, r7, #32
 8007d42:	4611      	mov	r1, r2
 8007d44:	4618      	mov	r0, r3
 8007d46:	f7fd f898 	bl	8004e7a <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentENS1_9RamStringEEEEcvT_INS0_9JsonArrayELi0EEEv>
    for (JsonArray::iterator it = Modules.begin(); it != Modules.end(); ++it) {
 8007d4a:	f107 030c 	add.w	r3, r7, #12
 8007d4e:	f107 0218 	add.w	r2, r7, #24
 8007d52:	4611      	mov	r1, r2
 8007d54:	4618      	mov	r0, r3
 8007d56:	f7fb f96d 	bl	8003034 <_ZNK11ArduinoJson8V730HB229JsonArray5beginEv>
 8007d5a:	e03e      	b.n	8007dda <_Z12countModulesv+0xc6>
        JsonObject module = *it;
 8007d5c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8007d60:	f107 020c 	add.w	r2, r7, #12
 8007d64:	4611      	mov	r1, r2
 8007d66:	4618      	mov	r0, r3
 8007d68:	f7fb f90c 	bl	8002f84 <_ZN11ArduinoJson8V730HB2217JsonArrayIteratordeEv>
 8007d6c:	1d3b      	adds	r3, r7, #4
 8007d6e:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8007d72:	4611      	mov	r1, r2
 8007d74:	4618      	mov	r0, r3
 8007d76:	f7fd f88f 	bl	8004e98 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS0_11JsonVariantEEcvT_INS0_10JsonObjectELi0EEEv>

        const char* thread = module["Thread"];
 8007d7a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8007d7e:	1d39      	adds	r1, r7, #4
 8007d80:	4a35      	ldr	r2, [pc, #212]	@ (8007e58 <_Z12countModulesv+0x144>)
 8007d82:	4618      	mov	r0, r3
 8007d84:	f7fd f897 	bl	8004eb6 <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA7_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 8007d88:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8007d8c:	4618      	mov	r0, r3
 8007d8e:	f7fd f8b7 	bl	8004f00 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_IPKcLi0EEEv>
 8007d92:	65f8      	str	r0, [r7, #92]	@ 0x5c
        if (thread) {
 8007d94:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d01a      	beq.n	8007dd0 <_Z12countModulesv+0xbc>
            if (!strcmp(thread, "Base")) {
 8007d9a:	4930      	ldr	r1, [pc, #192]	@ (8007e5c <_Z12countModulesv+0x148>)
 8007d9c:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 8007d9e:	f7f8 fa9f 	bl	80002e0 <strcmp>
 8007da2:	4603      	mov	r3, r0
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d106      	bne.n	8007db6 <_Z12countModulesv+0xa2>
                ++baseCount;
 8007da8:	4b26      	ldr	r3, [pc, #152]	@ (8007e44 <_Z12countModulesv+0x130>)
 8007daa:	781b      	ldrb	r3, [r3, #0]
 8007dac:	3301      	adds	r3, #1
 8007dae:	b2da      	uxtb	r2, r3
 8007db0:	4b24      	ldr	r3, [pc, #144]	@ (8007e44 <_Z12countModulesv+0x130>)
 8007db2:	701a      	strb	r2, [r3, #0]
 8007db4:	e00c      	b.n	8007dd0 <_Z12countModulesv+0xbc>
            } else if (!strcmp(thread, "Servo")) {
 8007db6:	492a      	ldr	r1, [pc, #168]	@ (8007e60 <_Z12countModulesv+0x14c>)
 8007db8:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 8007dba:	f7f8 fa91 	bl	80002e0 <strcmp>
 8007dbe:	4603      	mov	r3, r0
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d105      	bne.n	8007dd0 <_Z12countModulesv+0xbc>
                ++servoCount;
 8007dc4:	4b20      	ldr	r3, [pc, #128]	@ (8007e48 <_Z12countModulesv+0x134>)
 8007dc6:	781b      	ldrb	r3, [r3, #0]
 8007dc8:	3301      	adds	r3, #1
 8007dca:	b2da      	uxtb	r2, r3
 8007dcc:	4b1e      	ldr	r3, [pc, #120]	@ (8007e48 <_Z12countModulesv+0x134>)
 8007dce:	701a      	strb	r2, [r3, #0]
    for (JsonArray::iterator it = Modules.begin(); it != Modules.end(); ++it) {
 8007dd0:	f107 030c 	add.w	r3, r7, #12
 8007dd4:	4618      	mov	r0, r3
 8007dd6:	f7fb f8f9 	bl	8002fcc <_ZN11ArduinoJson8V730HB2217JsonArrayIteratorppEv>
 8007dda:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8007dde:	f107 0218 	add.w	r2, r7, #24
 8007de2:	4611      	mov	r1, r2
 8007de4:	4618      	mov	r0, r3
 8007de6:	f7fb f948 	bl	800307a <_ZNK11ArduinoJson8V730HB229JsonArray3endEv>
 8007dea:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 8007dee:	f107 030c 	add.w	r3, r7, #12
 8007df2:	4611      	mov	r1, r2
 8007df4:	4618      	mov	r0, r3
 8007df6:	f7fb f8d9 	bl	8002fac <_ZNK11ArduinoJson8V730HB2217JsonArrayIteratorneERKS1_>
 8007dfa:	4603      	mov	r3, r0
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d1ad      	bne.n	8007d5c <_Z12countModulesv+0x48>
            }
        }
    }

    // add the communication monitoring module to the servo thread count
    ++servoCount;
 8007e00:	4b11      	ldr	r3, [pc, #68]	@ (8007e48 <_Z12countModulesv+0x134>)
 8007e02:	781b      	ldrb	r3, [r3, #0]
 8007e04:	3301      	adds	r3, #1
 8007e06:	b2da      	uxtb	r2, r3
 8007e08:	4b0f      	ldr	r3, [pc, #60]	@ (8007e48 <_Z12countModulesv+0x134>)
 8007e0a:	701a      	strb	r2, [r3, #0]

    if (DEBUG_THREADS)
    {
    	baseCount = baseCount + 2;
 8007e0c:	4b0d      	ldr	r3, [pc, #52]	@ (8007e44 <_Z12countModulesv+0x130>)
 8007e0e:	781b      	ldrb	r3, [r3, #0]
 8007e10:	3302      	adds	r3, #2
 8007e12:	b2da      	uxtb	r2, r3
 8007e14:	4b0b      	ldr	r3, [pc, #44]	@ (8007e44 <_Z12countModulesv+0x130>)
 8007e16:	701a      	strb	r2, [r3, #0]
    	servoCount = servoCount + 2;
 8007e18:	4b0b      	ldr	r3, [pc, #44]	@ (8007e48 <_Z12countModulesv+0x134>)
 8007e1a:	781b      	ldrb	r3, [r3, #0]
 8007e1c:	3302      	adds	r3, #2
 8007e1e:	b2da      	uxtb	r2, r3
 8007e20:	4b09      	ldr	r3, [pc, #36]	@ (8007e48 <_Z12countModulesv+0x134>)
 8007e22:	701a      	strb	r2, [r3, #0]
    }

    printf("	Base thread modules: %d\n", baseCount);
 8007e24:	4b07      	ldr	r3, [pc, #28]	@ (8007e44 <_Z12countModulesv+0x130>)
 8007e26:	781b      	ldrb	r3, [r3, #0]
 8007e28:	4619      	mov	r1, r3
 8007e2a:	480e      	ldr	r0, [pc, #56]	@ (8007e64 <_Z12countModulesv+0x150>)
 8007e2c:	f016 fd3a 	bl	801e8a4 <iprintf>
    printf("	Servo thread modules: %d\n", servoCount);
 8007e30:	4b05      	ldr	r3, [pc, #20]	@ (8007e48 <_Z12countModulesv+0x134>)
 8007e32:	781b      	ldrb	r3, [r3, #0]
 8007e34:	4619      	mov	r1, r3
 8007e36:	480c      	ldr	r0, [pc, #48]	@ (8007e68 <_Z12countModulesv+0x154>)
 8007e38:	f016 fd34 	bl	801e8a4 <iprintf>
}
 8007e3c:	bf00      	nop
 8007e3e:	3760      	adds	r7, #96	@ 0x60
 8007e40:	46bd      	mov	sp, r7
 8007e42:	bd80      	pop	{r7, pc}
 8007e44:	2400030d 	.word	0x2400030d
 8007e48:	2400030e 	.word	0x2400030e
 8007e4c:	0801fcec 	.word	0x0801fcec
 8007e50:	0801fd04 	.word	0x0801fd04
 8007e54:	24000378 	.word	0x24000378
 8007e58:	0801fd0c 	.word	0x0801fd0c
 8007e5c:	0801fd14 	.word	0x0801fd14
 8007e60:	0801fd1c 	.word	0x0801fd1c
 8007e64:	0801fd24 	.word	0x0801fd24
 8007e68:	0801fd40 	.word	0x0801fd40

08007e6c <_Z13configThreadsv>:


void configThreads()
{
 8007e6c:	b590      	push	{r4, r7, lr}
 8007e6e:	b09f      	sub	sp, #124	@ 0x7c
 8007e70:	af00      	add	r7, sp, #0
    if (configError) return;
 8007e72:	4b47      	ldr	r3, [pc, #284]	@ (8007f90 <_Z13configThreadsv+0x124>)
 8007e74:	781b      	ldrb	r3, [r3, #0]
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	f040 8085 	bne.w	8007f86 <_Z13configThreadsv+0x11a>

    printf("\n5. Configuring threads\n");
 8007e7c:	4845      	ldr	r0, [pc, #276]	@ (8007f94 <_Z13configThreadsv+0x128>)
 8007e7e:	f016 fd81 	bl	801e984 <puts>

    JsonArray Threads = doc["Threads"];
 8007e82:	f107 031c 	add.w	r3, r7, #28
 8007e86:	4a44      	ldr	r2, [pc, #272]	@ (8007f98 <_Z13configThreadsv+0x12c>)
 8007e88:	4944      	ldr	r1, [pc, #272]	@ (8007f9c <_Z13configThreadsv+0x130>)
 8007e8a:	4618      	mov	r0, r3
 8007e8c:	f7fc ffdc 	bl	8004e48 <_ZN11ArduinoJson8V730HB2212JsonDocumentixIA8_cLi0EEENS0_6detail11MemberProxyIRS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueESA_NS4_9remove_cvINS4_16remove_referenceISA_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKSA_>
 8007e90:	f107 0314 	add.w	r3, r7, #20
 8007e94:	f107 021c 	add.w	r2, r7, #28
 8007e98:	4611      	mov	r1, r2
 8007e9a:	4618      	mov	r0, r3
 8007e9c:	f7fc ffed 	bl	8004e7a <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentENS1_9RamStringEEEEcvT_INS0_9JsonArrayELi0EEEv>

    // create objects from JSON data
    for (JsonArray::iterator it=Threads.begin(); it!=Threads.end(); ++it)
 8007ea0:	f107 0308 	add.w	r3, r7, #8
 8007ea4:	f107 0214 	add.w	r2, r7, #20
 8007ea8:	4611      	mov	r1, r2
 8007eaa:	4618      	mov	r0, r3
 8007eac:	f7fb f8c2 	bl	8003034 <_ZNK11ArduinoJson8V730HB229JsonArray5beginEv>
 8007eb0:	e055      	b.n	8007f5e <_Z13configThreadsv+0xf2>
    {
        thread = *it;
 8007eb2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8007eb6:	f107 0208 	add.w	r2, r7, #8
 8007eba:	4611      	mov	r1, r2
 8007ebc:	4618      	mov	r0, r3
 8007ebe:	f7fb f861 	bl	8002f84 <_ZN11ArduinoJson8V730HB2217JsonArrayIteratordeEv>
 8007ec2:	4c37      	ldr	r4, [pc, #220]	@ (8007fa0 <_Z13configThreadsv+0x134>)
 8007ec4:	463b      	mov	r3, r7
 8007ec6:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8007eca:	4611      	mov	r1, r2
 8007ecc:	4618      	mov	r0, r3
 8007ece:	f7fc ffe3 	bl	8004e98 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS0_11JsonVariantEEcvT_INS0_10JsonObjectELi0EEEv>
 8007ed2:	4622      	mov	r2, r4
 8007ed4:	463b      	mov	r3, r7
 8007ed6:	e893 0003 	ldmia.w	r3, {r0, r1}
 8007eda:	e882 0003 	stmia.w	r2, {r0, r1}

        const char* configor = thread["Thread"];
 8007ede:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8007ee2:	4a30      	ldr	r2, [pc, #192]	@ (8007fa4 <_Z13configThreadsv+0x138>)
 8007ee4:	492e      	ldr	r1, [pc, #184]	@ (8007fa0 <_Z13configThreadsv+0x134>)
 8007ee6:	4618      	mov	r0, r3
 8007ee8:	f7fc ffe5 	bl	8004eb6 <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA7_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 8007eec:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8007ef0:	4618      	mov	r0, r3
 8007ef2:	f7fd f805 	bl	8004f00 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_IPKcLi0EEEv>
 8007ef6:	6778      	str	r0, [r7, #116]	@ 0x74
        uint32_t    freq = thread["Frequency"];
 8007ef8:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8007efc:	4a2a      	ldr	r2, [pc, #168]	@ (8007fa8 <_Z13configThreadsv+0x13c>)
 8007efe:	4928      	ldr	r1, [pc, #160]	@ (8007fa0 <_Z13configThreadsv+0x134>)
 8007f00:	4618      	mov	r0, r3
 8007f02:	f7fd f809 	bl	8004f18 <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA10_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 8007f06:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8007f0a:	4618      	mov	r0, r3
 8007f0c:	f7fd f829 	bl	8004f62 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_ImLi0EEEv>
 8007f10:	6738      	str	r0, [r7, #112]	@ 0x70

        if (!strcmp(configor,"Base"))
 8007f12:	4926      	ldr	r1, [pc, #152]	@ (8007fac <_Z13configThreadsv+0x140>)
 8007f14:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 8007f16:	f7f8 f9e3 	bl	80002e0 <strcmp>
 8007f1a:	4603      	mov	r3, r0
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d109      	bne.n	8007f34 <_Z13configThreadsv+0xc8>
        {
            baseFreq = freq;
 8007f20:	4a23      	ldr	r2, [pc, #140]	@ (8007fb0 <_Z13configThreadsv+0x144>)
 8007f22:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007f24:	6013      	str	r3, [r2, #0]
            printf("	Setting BASE thread frequency to %lu\n", baseFreq);
 8007f26:	4b22      	ldr	r3, [pc, #136]	@ (8007fb0 <_Z13configThreadsv+0x144>)
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	4619      	mov	r1, r3
 8007f2c:	4821      	ldr	r0, [pc, #132]	@ (8007fb4 <_Z13configThreadsv+0x148>)
 8007f2e:	f016 fcb9 	bl	801e8a4 <iprintf>
 8007f32:	e00f      	b.n	8007f54 <_Z13configThreadsv+0xe8>
        }
        else if (!strcmp(configor,"Servo"))
 8007f34:	4920      	ldr	r1, [pc, #128]	@ (8007fb8 <_Z13configThreadsv+0x14c>)
 8007f36:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 8007f38:	f7f8 f9d2 	bl	80002e0 <strcmp>
 8007f3c:	4603      	mov	r3, r0
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d108      	bne.n	8007f54 <_Z13configThreadsv+0xe8>
        {
            servoFreq = freq;
 8007f42:	4a1e      	ldr	r2, [pc, #120]	@ (8007fbc <_Z13configThreadsv+0x150>)
 8007f44:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007f46:	6013      	str	r3, [r2, #0]
            printf("	Setting SERVO thread frequency to %lu\n", servoFreq);
 8007f48:	4b1c      	ldr	r3, [pc, #112]	@ (8007fbc <_Z13configThreadsv+0x150>)
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	4619      	mov	r1, r3
 8007f4e:	481c      	ldr	r0, [pc, #112]	@ (8007fc0 <_Z13configThreadsv+0x154>)
 8007f50:	f016 fca8 	bl	801e8a4 <iprintf>
    for (JsonArray::iterator it=Threads.begin(); it!=Threads.end(); ++it)
 8007f54:	f107 0308 	add.w	r3, r7, #8
 8007f58:	4618      	mov	r0, r3
 8007f5a:	f7fb f837 	bl	8002fcc <_ZN11ArduinoJson8V730HB2217JsonArrayIteratorppEv>
 8007f5e:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8007f62:	f107 0214 	add.w	r2, r7, #20
 8007f66:	4611      	mov	r1, r2
 8007f68:	4618      	mov	r0, r3
 8007f6a:	f7fb f886 	bl	800307a <_ZNK11ArduinoJson8V730HB229JsonArray3endEv>
 8007f6e:	f107 0264 	add.w	r2, r7, #100	@ 0x64
 8007f72:	f107 0308 	add.w	r3, r7, #8
 8007f76:	4611      	mov	r1, r2
 8007f78:	4618      	mov	r0, r3
 8007f7a:	f7fb f817 	bl	8002fac <_ZNK11ArduinoJson8V730HB2217JsonArrayIteratorneERKS1_>
 8007f7e:	4603      	mov	r3, r0
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d196      	bne.n	8007eb2 <_Z13configThreadsv+0x46>
 8007f84:	e000      	b.n	8007f88 <_Z13configThreadsv+0x11c>
    if (configError) return;
 8007f86:	bf00      	nop
        }
    }
}
 8007f88:	377c      	adds	r7, #124	@ 0x7c
 8007f8a:	46bd      	mov	sp, r7
 8007f8c:	bd90      	pop	{r4, r7, pc}
 8007f8e:	bf00      	nop
 8007f90:	2400030f 	.word	0x2400030f
 8007f94:	0801fd5c 	.word	0x0801fd5c
 8007f98:	0801fd74 	.word	0x0801fd74
 8007f9c:	24000378 	.word	0x24000378
 8007fa0:	240003b8 	.word	0x240003b8
 8007fa4:	0801fd0c 	.word	0x0801fd0c
 8007fa8:	0801fd7c 	.word	0x0801fd7c
 8007fac:	0801fd14 	.word	0x0801fd14
 8007fb0:	2400001c 	.word	0x2400001c
 8007fb4:	0801fd88 	.word	0x0801fd88
 8007fb8:	0801fd1c 	.word	0x0801fd1c
 8007fbc:	24000020 	.word	0x24000020
 8007fc0:	0801fdb0 	.word	0x0801fdb0

08007fc4 <_Z11loadModulesv>:


void loadModules()
{
 8007fc4:	b590      	push	{r4, r7, lr}
 8007fc6:	b09f      	sub	sp, #124	@ 0x7c
 8007fc8:	af00      	add	r7, sp, #0
    if (configError) return;
 8007fca:	4b73      	ldr	r3, [pc, #460]	@ (8008198 <_Z11loadModulesv+0x1d4>)
 8007fcc:	781b      	ldrb	r3, [r3, #0]
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	f040 80de 	bne.w	8008190 <_Z11loadModulesv+0x1cc>

    printf("\n6. Loading modules\n");
 8007fd4:	4871      	ldr	r0, [pc, #452]	@ (800819c <_Z11loadModulesv+0x1d8>)
 8007fd6:	f016 fcd5 	bl	801e984 <puts>

    // Communication monitoring
    //servoThread->registerModule(comms);

    JsonArray Modules = doc["Modules"];
 8007fda:	f107 031c 	add.w	r3, r7, #28
 8007fde:	4a70      	ldr	r2, [pc, #448]	@ (80081a0 <_Z11loadModulesv+0x1dc>)
 8007fe0:	4970      	ldr	r1, [pc, #448]	@ (80081a4 <_Z11loadModulesv+0x1e0>)
 8007fe2:	4618      	mov	r0, r3
 8007fe4:	f7fc ff30 	bl	8004e48 <_ZN11ArduinoJson8V730HB2212JsonDocumentixIA8_cLi0EEENS0_6detail11MemberProxyIRS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueESA_NS4_9remove_cvINS4_16remove_referenceISA_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKSA_>
 8007fe8:	f107 0314 	add.w	r3, r7, #20
 8007fec:	f107 021c 	add.w	r2, r7, #28
 8007ff0:	4611      	mov	r1, r2
 8007ff2:	4618      	mov	r0, r3
 8007ff4:	f7fc ff41 	bl	8004e7a <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentENS1_9RamStringEEEEcvT_INS0_9JsonArrayELi0EEEv>

    // create objects from json data
    for (JsonArray::iterator it=Modules.begin(); it!=Modules.end(); ++it)
 8007ff8:	f107 0308 	add.w	r3, r7, #8
 8007ffc:	f107 0214 	add.w	r2, r7, #20
 8008000:	4611      	mov	r1, r2
 8008002:	4618      	mov	r0, r3
 8008004:	f7fb f816 	bl	8003034 <_ZNK11ArduinoJson8V730HB229JsonArray5beginEv>
 8008008:	e0ad      	b.n	8008166 <_Z11loadModulesv+0x1a2>
    {
        module = *it;
 800800a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800800e:	f107 0208 	add.w	r2, r7, #8
 8008012:	4611      	mov	r1, r2
 8008014:	4618      	mov	r0, r3
 8008016:	f7fa ffb5 	bl	8002f84 <_ZN11ArduinoJson8V730HB2217JsonArrayIteratordeEv>
 800801a:	4c63      	ldr	r4, [pc, #396]	@ (80081a8 <_Z11loadModulesv+0x1e4>)
 800801c:	463b      	mov	r3, r7
 800801e:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8008022:	4611      	mov	r1, r2
 8008024:	4618      	mov	r0, r3
 8008026:	f7fc ff37 	bl	8004e98 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS0_11JsonVariantEEcvT_INS0_10JsonObjectELi0EEEv>
 800802a:	4622      	mov	r2, r4
 800802c:	463b      	mov	r3, r7
 800802e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8008032:	e882 0003 	stmia.w	r2, {r0, r1}

        const char* thread = module["Thread"];
 8008036:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800803a:	4a5c      	ldr	r2, [pc, #368]	@ (80081ac <_Z11loadModulesv+0x1e8>)
 800803c:	495a      	ldr	r1, [pc, #360]	@ (80081a8 <_Z11loadModulesv+0x1e4>)
 800803e:	4618      	mov	r0, r3
 8008040:	f7fc ff39 	bl	8004eb6 <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA7_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 8008044:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8008048:	4618      	mov	r0, r3
 800804a:	f7fc ff59 	bl	8004f00 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_IPKcLi0EEEv>
 800804e:	6778      	str	r0, [r7, #116]	@ 0x74
        const char* type = module["Type"];
 8008050:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8008054:	4a56      	ldr	r2, [pc, #344]	@ (80081b0 <_Z11loadModulesv+0x1ec>)
 8008056:	4954      	ldr	r1, [pc, #336]	@ (80081a8 <_Z11loadModulesv+0x1e4>)
 8008058:	4618      	mov	r0, r3
 800805a:	f000 fd1c 	bl	8008a96 <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA5_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 800805e:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8008062:	4618      	mov	r0, r3
 8008064:	f7fc ff4c 	bl	8004f00 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_IPKcLi0EEEv>
 8008068:	6738      	str	r0, [r7, #112]	@ 0x70

        if (!strcmp(thread,"Base"))
 800806a:	4952      	ldr	r1, [pc, #328]	@ (80081b4 <_Z11loadModulesv+0x1f0>)
 800806c:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 800806e:	f7f8 f937 	bl	80002e0 <strcmp>
 8008072:	4603      	mov	r3, r0
 8008074:	2b00      	cmp	r3, #0
 8008076:	d115      	bne.n	80080a4 <_Z11loadModulesv+0xe0>
        {
            printf("\nBase thread object\n");
 8008078:	484f      	ldr	r0, [pc, #316]	@ (80081b8 <_Z11loadModulesv+0x1f4>)
 800807a:	f016 fc83 	bl	801e984 <puts>

            if (!strcmp(type,"Stepgen"))
 800807e:	494f      	ldr	r1, [pc, #316]	@ (80081bc <_Z11loadModulesv+0x1f8>)
 8008080:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 8008082:	f7f8 f92d 	bl	80002e0 <strcmp>
 8008086:	4603      	mov	r3, r0
 8008088:	2b00      	cmp	r3, #0
 800808a:	d067      	beq.n	800815c <_Z11loadModulesv+0x198>
            {
                //createStepgen();
            }
            else if (!strcmp(type,"Encoder"))
 800808c:	494c      	ldr	r1, [pc, #304]	@ (80081c0 <_Z11loadModulesv+0x1fc>)
 800808e:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 8008090:	f7f8 f926 	bl	80002e0 <strcmp>
 8008094:	4603      	mov	r3, r0
 8008096:	2b00      	cmp	r3, #0
 8008098:	d060      	beq.n	800815c <_Z11loadModulesv+0x198>
            {
                //createEncoder();
            }
            else if (!strcmp(type,"RCServo"))
 800809a:	494a      	ldr	r1, [pc, #296]	@ (80081c4 <_Z11loadModulesv+0x200>)
 800809c:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 800809e:	f7f8 f91f 	bl	80002e0 <strcmp>
 80080a2:	e05b      	b.n	800815c <_Z11loadModulesv+0x198>
            {
                //createRCServo();
            }
        }
        else if (!strcmp(thread,"Servo"))
 80080a4:	4948      	ldr	r1, [pc, #288]	@ (80081c8 <_Z11loadModulesv+0x204>)
 80080a6:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 80080a8:	f7f8 f91a 	bl	80002e0 <strcmp>
 80080ac:	4603      	mov	r3, r0
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d138      	bne.n	8008124 <_Z11loadModulesv+0x160>
        {
            printf("\nServo thread object\n");
 80080b2:	4846      	ldr	r0, [pc, #280]	@ (80081cc <_Z11loadModulesv+0x208>)
 80080b4:	f016 fc66 	bl	801e984 <puts>

            if (!strcmp(type, "eStop"))
 80080b8:	4945      	ldr	r1, [pc, #276]	@ (80081d0 <_Z11loadModulesv+0x20c>)
 80080ba:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 80080bc:	f7f8 f910 	bl	80002e0 <strcmp>
 80080c0:	4603      	mov	r3, r0
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d04a      	beq.n	800815c <_Z11loadModulesv+0x198>
            {
                //createEStop();
            }
            else if (!strcmp(type, "Reset Pin"))
 80080c6:	4943      	ldr	r1, [pc, #268]	@ (80081d4 <_Z11loadModulesv+0x210>)
 80080c8:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 80080ca:	f7f8 f909 	bl	80002e0 <strcmp>
 80080ce:	4603      	mov	r3, r0
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d043      	beq.n	800815c <_Z11loadModulesv+0x198>
            {
                //createResetPin();
            }
            else if (!strcmp(type, "Blink"))
 80080d4:	4940      	ldr	r1, [pc, #256]	@ (80081d8 <_Z11loadModulesv+0x214>)
 80080d6:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 80080d8:	f7f8 f902 	bl	80002e0 <strcmp>
 80080dc:	4603      	mov	r3, r0
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d03c      	beq.n	800815c <_Z11loadModulesv+0x198>
            {
                //createBlink();
            }
            else if (!strcmp(type,"Digital Pin"))
 80080e2:	493e      	ldr	r1, [pc, #248]	@ (80081dc <_Z11loadModulesv+0x218>)
 80080e4:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 80080e6:	f7f8 f8fb 	bl	80002e0 <strcmp>
 80080ea:	4603      	mov	r3, r0
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d035      	beq.n	800815c <_Z11loadModulesv+0x198>
            {
                //createDigitalPin();
            }
            else if (!strcmp(type,"PWM"))
 80080f0:	493b      	ldr	r1, [pc, #236]	@ (80081e0 <_Z11loadModulesv+0x21c>)
 80080f2:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 80080f4:	f7f8 f8f4 	bl	80002e0 <strcmp>
 80080f8:	4603      	mov	r3, r0
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d02e      	beq.n	800815c <_Z11loadModulesv+0x198>
            {
                //createPWM();
            }
            else if (!strcmp(type,"Temperature"))
 80080fe:	4939      	ldr	r1, [pc, #228]	@ (80081e4 <_Z11loadModulesv+0x220>)
 8008100:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 8008102:	f7f8 f8ed 	bl	80002e0 <strcmp>
 8008106:	4603      	mov	r3, r0
 8008108:	2b00      	cmp	r3, #0
 800810a:	d027      	beq.n	800815c <_Z11loadModulesv+0x198>
            {
                //createTemperature();
            }
            else if (!strcmp(type,"Switch"))
 800810c:	4936      	ldr	r1, [pc, #216]	@ (80081e8 <_Z11loadModulesv+0x224>)
 800810e:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 8008110:	f7f8 f8e6 	bl	80002e0 <strcmp>
 8008114:	4603      	mov	r3, r0
 8008116:	2b00      	cmp	r3, #0
 8008118:	d020      	beq.n	800815c <_Z11loadModulesv+0x198>
            {
                //createSwitch();
            }
            else if (!strcmp(type,"QEI"))
 800811a:	4934      	ldr	r1, [pc, #208]	@ (80081ec <_Z11loadModulesv+0x228>)
 800811c:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 800811e:	f7f8 f8df 	bl	80002e0 <strcmp>
 8008122:	e01b      	b.n	800815c <_Z11loadModulesv+0x198>
            {
                //createQEI();
            }
        }
        else if (!strcmp(thread,"On load"))
 8008124:	4932      	ldr	r1, [pc, #200]	@ (80081f0 <_Z11loadModulesv+0x22c>)
 8008126:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 8008128:	f7f8 f8da 	bl	80002e0 <strcmp>
 800812c:	4603      	mov	r3, r0
 800812e:	2b00      	cmp	r3, #0
 8008130:	d114      	bne.n	800815c <_Z11loadModulesv+0x198>
        {
            printf("\nOn load - run once module\n");
 8008132:	4830      	ldr	r0, [pc, #192]	@ (80081f4 <_Z11loadModulesv+0x230>)
 8008134:	f016 fc26 	bl	801e984 <puts>

            if (!strcmp(type,"Motor Power"))
 8008138:	492f      	ldr	r1, [pc, #188]	@ (80081f8 <_Z11loadModulesv+0x234>)
 800813a:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 800813c:	f7f8 f8d0 	bl	80002e0 <strcmp>
 8008140:	4603      	mov	r3, r0
 8008142:	2b00      	cmp	r3, #0
 8008144:	d00a      	beq.n	800815c <_Z11loadModulesv+0x198>
            {
                //createMotorPower();
            }
            else if (!strcmp(type,"TMC2208"))
 8008146:	492d      	ldr	r1, [pc, #180]	@ (80081fc <_Z11loadModulesv+0x238>)
 8008148:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 800814a:	f7f8 f8c9 	bl	80002e0 <strcmp>
 800814e:	4603      	mov	r3, r0
 8008150:	2b00      	cmp	r3, #0
 8008152:	d003      	beq.n	800815c <_Z11loadModulesv+0x198>
            {
                //createTMC2208();
            }
            else if (!strcmp(type,"TMC2209"))
 8008154:	492a      	ldr	r1, [pc, #168]	@ (8008200 <_Z11loadModulesv+0x23c>)
 8008156:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 8008158:	f7f8 f8c2 	bl	80002e0 <strcmp>
    for (JsonArray::iterator it=Modules.begin(); it!=Modules.end(); ++it)
 800815c:	f107 0308 	add.w	r3, r7, #8
 8008160:	4618      	mov	r0, r3
 8008162:	f7fa ff33 	bl	8002fcc <_ZN11ArduinoJson8V730HB2217JsonArrayIteratorppEv>
 8008166:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800816a:	f107 0214 	add.w	r2, r7, #20
 800816e:	4611      	mov	r1, r2
 8008170:	4618      	mov	r0, r3
 8008172:	f7fa ff82 	bl	800307a <_ZNK11ArduinoJson8V730HB229JsonArray3endEv>
 8008176:	f107 0264 	add.w	r2, r7, #100	@ 0x64
 800817a:	f107 0308 	add.w	r3, r7, #8
 800817e:	4611      	mov	r1, r2
 8008180:	4618      	mov	r0, r3
 8008182:	f7fa ff13 	bl	8002fac <_ZNK11ArduinoJson8V730HB2217JsonArrayIteratorneERKS1_>
 8008186:	4603      	mov	r3, r0
 8008188:	2b00      	cmp	r3, #0
 800818a:	f47f af3e 	bne.w	800800a <_Z11loadModulesv+0x46>
 800818e:	e000      	b.n	8008192 <_Z11loadModulesv+0x1ce>
    if (configError) return;
 8008190:	bf00      	nop
            {
                //createTMC2209();
            }
        }
    }
}
 8008192:	377c      	adds	r7, #124	@ 0x7c
 8008194:	46bd      	mov	sp, r7
 8008196:	bd90      	pop	{r4, r7, pc}
 8008198:	2400030f 	.word	0x2400030f
 800819c:	0801fdd8 	.word	0x0801fdd8
 80081a0:	0801fd04 	.word	0x0801fd04
 80081a4:	24000378 	.word	0x24000378
 80081a8:	240003c0 	.word	0x240003c0
 80081ac:	0801fd0c 	.word	0x0801fd0c
 80081b0:	0801fdec 	.word	0x0801fdec
 80081b4:	0801fd14 	.word	0x0801fd14
 80081b8:	0801fdf4 	.word	0x0801fdf4
 80081bc:	0801fe08 	.word	0x0801fe08
 80081c0:	0801fe10 	.word	0x0801fe10
 80081c4:	0801fe18 	.word	0x0801fe18
 80081c8:	0801fd1c 	.word	0x0801fd1c
 80081cc:	0801fe20 	.word	0x0801fe20
 80081d0:	0801fe38 	.word	0x0801fe38
 80081d4:	0801fe40 	.word	0x0801fe40
 80081d8:	0801fe4c 	.word	0x0801fe4c
 80081dc:	0801fe54 	.word	0x0801fe54
 80081e0:	0801fe60 	.word	0x0801fe60
 80081e4:	0801fe64 	.word	0x0801fe64
 80081e8:	0801fe70 	.word	0x0801fe70
 80081ec:	0801fe78 	.word	0x0801fe78
 80081f0:	0801fe7c 	.word	0x0801fe7c
 80081f4:	0801fe84 	.word	0x0801fe84
 80081f8:	0801fea0 	.word	0x0801fea0
 80081fc:	0801feac 	.word	0x0801feac
 8008200:	0801feb4 	.word	0x0801feb4

08008204 <_Z15debugThreadHighv>:


void debugThreadHigh()
{
 8008204:	b590      	push	{r4, r7, lr}
 8008206:	b091      	sub	sp, #68	@ 0x44
 8008208:	af00      	add	r7, sp, #0
    Module* debugOnB = new Debug(BASE_PIN, 1);
 800820a:	201c      	movs	r0, #28
 800820c:	f015 ffc6 	bl	801e19c <_Znwj>
 8008210:	4603      	mov	r3, r0
 8008212:	461c      	mov	r4, r3
 8008214:	f107 0318 	add.w	r3, r7, #24
 8008218:	4618      	mov	r0, r3
 800821a:	f015 ffd0 	bl	801e1be <_ZNSaIcEC1Ev>
 800821e:	f107 0218 	add.w	r2, r7, #24
 8008222:	463b      	mov	r3, r7
 8008224:	491d      	ldr	r1, [pc, #116]	@ (800829c <_Z15debugThreadHighv+0x98>)
 8008226:	4618      	mov	r0, r3
 8008228:	f7fc fde4 	bl	8004df4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 800822c:	463b      	mov	r3, r7
 800822e:	2201      	movs	r2, #1
 8008230:	4619      	mov	r1, r3
 8008232:	4620      	mov	r0, r4
 8008234:	f005 fe7c 	bl	800df30 <_ZN5DebugC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb>
 8008238:	63fc      	str	r4, [r7, #60]	@ 0x3c
 800823a:	463b      	mov	r3, r7
 800823c:	4618      	mov	r0, r3
 800823e:	f016 f85a 	bl	801e2f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8008242:	f107 0318 	add.w	r3, r7, #24
 8008246:	4618      	mov	r0, r3
 8008248:	f015 ffba 	bl	801e1c0 <_ZNSaIcED1Ev>
    //baseThread->registerModule(debugOnB);

    Module* debugOnS = new Debug(SERVO_PIN, 1);
 800824c:	201c      	movs	r0, #28
 800824e:	f015 ffa5 	bl	801e19c <_Znwj>
 8008252:	4603      	mov	r3, r0
 8008254:	461c      	mov	r4, r3
 8008256:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800825a:	4618      	mov	r0, r3
 800825c:	f015 ffaf 	bl	801e1be <_ZNSaIcEC1Ev>
 8008260:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 8008264:	f107 031c 	add.w	r3, r7, #28
 8008268:	490d      	ldr	r1, [pc, #52]	@ (80082a0 <_Z15debugThreadHighv+0x9c>)
 800826a:	4618      	mov	r0, r3
 800826c:	f7fc fdc2 	bl	8004df4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 8008270:	f107 031c 	add.w	r3, r7, #28
 8008274:	2201      	movs	r2, #1
 8008276:	4619      	mov	r1, r3
 8008278:	4620      	mov	r0, r4
 800827a:	f005 fe59 	bl	800df30 <_ZN5DebugC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb>
 800827e:	63bc      	str	r4, [r7, #56]	@ 0x38
 8008280:	f107 031c 	add.w	r3, r7, #28
 8008284:	4618      	mov	r0, r3
 8008286:	f016 f836 	bl	801e2f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800828a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800828e:	4618      	mov	r0, r3
 8008290:	f015 ff96 	bl	801e1c0 <_ZNSaIcED1Ev>
    //servoThread->registerModule(debugOnS);

    //Module* debugOnC = new Debug("PE_6", 1);
    //commsThread->registerModule(debugOnC);
}
 8008294:	bf00      	nop
 8008296:	3744      	adds	r7, #68	@ 0x44
 8008298:	46bd      	mov	sp, r7
 800829a:	bd90      	pop	{r4, r7, pc}
 800829c:	0801febc 	.word	0x0801febc
 80082a0:	0801fec4 	.word	0x0801fec4

080082a4 <_Z14debugThreadLowv>:

void debugThreadLow()
{
 80082a4:	b590      	push	{r4, r7, lr}
 80082a6:	b091      	sub	sp, #68	@ 0x44
 80082a8:	af00      	add	r7, sp, #0
    Module* debugOffB = new Debug("PE_9", 0);
 80082aa:	201c      	movs	r0, #28
 80082ac:	f015 ff76 	bl	801e19c <_Znwj>
 80082b0:	4603      	mov	r3, r0
 80082b2:	461c      	mov	r4, r3
 80082b4:	f107 0318 	add.w	r3, r7, #24
 80082b8:	4618      	mov	r0, r3
 80082ba:	f015 ff80 	bl	801e1be <_ZNSaIcEC1Ev>
 80082be:	f107 0218 	add.w	r2, r7, #24
 80082c2:	463b      	mov	r3, r7
 80082c4:	491d      	ldr	r1, [pc, #116]	@ (800833c <_Z14debugThreadLowv+0x98>)
 80082c6:	4618      	mov	r0, r3
 80082c8:	f7fc fd94 	bl	8004df4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 80082cc:	463b      	mov	r3, r7
 80082ce:	2200      	movs	r2, #0
 80082d0:	4619      	mov	r1, r3
 80082d2:	4620      	mov	r0, r4
 80082d4:	f005 fe2c 	bl	800df30 <_ZN5DebugC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb>
 80082d8:	63fc      	str	r4, [r7, #60]	@ 0x3c
 80082da:	463b      	mov	r3, r7
 80082dc:	4618      	mov	r0, r3
 80082de:	f016 f80a 	bl	801e2f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80082e2:	f107 0318 	add.w	r3, r7, #24
 80082e6:	4618      	mov	r0, r3
 80082e8:	f015 ff6a 	bl	801e1c0 <_ZNSaIcED1Ev>
    //baseThread->registerModule(debugOffB);

    Module* debugOffS = new Debug("PE_10", 0);
 80082ec:	201c      	movs	r0, #28
 80082ee:	f015 ff55 	bl	801e19c <_Znwj>
 80082f2:	4603      	mov	r3, r0
 80082f4:	461c      	mov	r4, r3
 80082f6:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80082fa:	4618      	mov	r0, r3
 80082fc:	f015 ff5f 	bl	801e1be <_ZNSaIcEC1Ev>
 8008300:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 8008304:	f107 031c 	add.w	r3, r7, #28
 8008308:	490d      	ldr	r1, [pc, #52]	@ (8008340 <_Z14debugThreadLowv+0x9c>)
 800830a:	4618      	mov	r0, r3
 800830c:	f7fc fd72 	bl	8004df4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 8008310:	f107 031c 	add.w	r3, r7, #28
 8008314:	2200      	movs	r2, #0
 8008316:	4619      	mov	r1, r3
 8008318:	4620      	mov	r0, r4
 800831a:	f005 fe09 	bl	800df30 <_ZN5DebugC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb>
 800831e:	63bc      	str	r4, [r7, #56]	@ 0x38
 8008320:	f107 031c 	add.w	r3, r7, #28
 8008324:	4618      	mov	r0, r3
 8008326:	f015 ffe6 	bl	801e2f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800832a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800832e:	4618      	mov	r0, r3
 8008330:	f015 ff46 	bl	801e1c0 <_ZNSaIcED1Ev>
    //servoThread->registerModule(debugOffS);

    //commsThread->startThread();
    //Module* debugOffC = new Debug("PE_6", 0);
    //commsThread->registerModule(debugOffC);
}
 8008334:	bf00      	nop
 8008336:	3744      	adds	r7, #68	@ 0x44
 8008338:	46bd      	mov	sp, r7
 800833a:	bd90      	pop	{r4, r7, pc}
 800833c:	0801febc 	.word	0x0801febc
 8008340:	0801fec4 	.word	0x0801fec4

08008344 <main>:

int main(void)
{
 8008344:	b590      	push	{r4, r7, lr}
 8008346:	b087      	sub	sp, #28
 8008348:	af02      	add	r7, sp, #8
	MPU_Config();
 800834a:	f000 fb45 	bl	80089d8 <_ZL10MPU_Configv>
	SCB->VTOR = 0x08000000;
 800834e:	4b9a      	ldr	r3, [pc, #616]	@ (80085b8 <main+0x274>)
 8008350:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8008354:	609a      	str	r2, [r3, #8]
	HAL_Init();
 8008356:	f009 f985 	bl	8011664 <HAL_Init>
	SystemClock_Config();
 800835a:	f000 f953 	bl	8008604 <_Z18SystemClock_Configv>
	PeriphCommonClock_Config();
 800835e:	f000 fa1b 	bl	8008798 <_Z24PeriphCommonClock_Configv>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8008362:	f3bf 8f4f 	dsb	sy
}
 8008366:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8008368:	f3bf 8f6f 	isb	sy
}
 800836c:	bf00      	nop
__STATIC_FORCEINLINE void SCB_InvalidateICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;
 800836e:	4b92      	ldr	r3, [pc, #584]	@ (80085b8 <main+0x274>)
 8008370:	2200      	movs	r2, #0
 8008372:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8008376:	f3bf 8f4f 	dsb	sy
}
 800837a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800837c:	f3bf 8f6f 	isb	sy
}
 8008380:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8008382:	bf00      	nop
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8008384:	4b8c      	ldr	r3, [pc, #560]	@ (80085b8 <main+0x274>)
 8008386:	695b      	ldr	r3, [r3, #20]
 8008388:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800838c:	2b00      	cmp	r3, #0
 800838e:	bf14      	ite	ne
 8008390:	2301      	movne	r3, #1
 8008392:	2300      	moveq	r3, #0
 8008394:	b2db      	uxtb	r3, r3
 8008396:	2b00      	cmp	r3, #0
 8008398:	d11b      	bne.n	80083d2 <main+0x8e>
  __ASM volatile ("dsb 0xF":::"memory");
 800839a:	f3bf 8f4f 	dsb	sy
}
 800839e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80083a0:	f3bf 8f6f 	isb	sy
}
 80083a4:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80083a6:	4b84      	ldr	r3, [pc, #528]	@ (80085b8 <main+0x274>)
 80083a8:	2200      	movs	r2, #0
 80083aa:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80083ae:	f3bf 8f4f 	dsb	sy
}
 80083b2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80083b4:	f3bf 8f6f 	isb	sy
}
 80083b8:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80083ba:	4b7f      	ldr	r3, [pc, #508]	@ (80085b8 <main+0x274>)
 80083bc:	695b      	ldr	r3, [r3, #20]
 80083be:	4a7e      	ldr	r2, [pc, #504]	@ (80085b8 <main+0x274>)
 80083c0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80083c4:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80083c6:	f3bf 8f4f 	dsb	sy
}
 80083ca:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80083cc:	f3bf 8f6f 	isb	sy
}
 80083d0:	e000      	b.n	80083d4 <main+0x90>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80083d2:	bf00      	nop
	SCB_EnableICache();
	//SCB_InvalidateDCache();
	//SCB_EnableDCache();

	/* DMA controller clock enable */
    __HAL_RCC_DMA1_CLK_ENABLE();
 80083d4:	4b79      	ldr	r3, [pc, #484]	@ (80085bc <main+0x278>)
 80083d6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80083da:	4a78      	ldr	r2, [pc, #480]	@ (80085bc <main+0x278>)
 80083dc:	f043 0301 	orr.w	r3, r3, #1
 80083e0:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80083e4:	4b75      	ldr	r3, [pc, #468]	@ (80085bc <main+0x278>)
 80083e6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80083ea:	f003 0301 	and.w	r3, r3, #1
 80083ee:	603b      	str	r3, [r7, #0]
 80083f0:	683b      	ldr	r3, [r7, #0]

	MX_GPIO_Init(); 			// used for SD card detect
 80083f2:	f000 fa95 	bl	8008920 <_ZL12MX_GPIO_Initv>
	MX_USART1_UART_Init();
 80083f6:	f000 fa33 	bl	8008860 <_ZL19MX_USART1_UART_Initv>
	MX_SDMMC1_SD_Init();		// uncomment line 62 #define ENABLE_SD_DMA_CACHE_MAINTENANCE  1 in FATFT/Target/sd_diskio.c
 80083fa:	f000 fa05 	bl	8008808 <_ZL17MX_SDMMC1_SD_Initv>
	MX_FATFS_Init();
 80083fe:	f013 fa9f 	bl	801b940 <MX_FATFS_Init>

	enum State currentState;
	enum State prevState;

	currentState = ST_SETUP;
 8008402:	2300      	movs	r3, #0
 8008404:	73fb      	strb	r3, [r7, #15]
	prevState = ST_RESET;
 8008406:	2305      	movs	r3, #5
 8008408:	73bb      	strb	r3, [r7, #14]

	Remora *remora = new Remora();
 800840a:	2024      	movs	r0, #36	@ 0x24
 800840c:	f015 fec6 	bl	801e19c <_Znwj>
 8008410:	4603      	mov	r3, r0
 8008412:	461c      	mov	r4, r3
 8008414:	4620      	mov	r0, r4
 8008416:	f000 fee9 	bl	80091ec <_ZN6RemoraC1Ev>
 800841a:	607c      	str	r4, [r7, #4]

	initComms();
 800841c:	f7ff fb34 	bl	8007a88 <_Z9initCommsv>

	printf("\nRemora version %d.%d.%d for %s starting\n\n", MAJOR_VERSION, MINOR_VERSION, PATCH, BOARD);
 8008420:	4b67      	ldr	r3, [pc, #412]	@ (80085c0 <main+0x27c>)
 8008422:	9300      	str	r3, [sp, #0]
 8008424:	2300      	movs	r3, #0
 8008426:	2201      	movs	r2, #1
 8008428:	2100      	movs	r1, #0
 800842a:	4866      	ldr	r0, [pc, #408]	@ (80085c4 <main+0x280>)
 800842c:	f016 fa3a 	bl	801e8a4 <iprintf>

	while (1)
	{
		switch(currentState){
 8008430:	7bfb      	ldrb	r3, [r7, #15]
 8008432:	2b06      	cmp	r3, #6
 8008434:	f200 80bc 	bhi.w	80085b0 <main+0x26c>
 8008438:	a201      	add	r2, pc, #4	@ (adr r2, 8008440 <main+0xfc>)
 800843a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800843e:	bf00      	nop
 8008440:	0800845d 	.word	0x0800845d
 8008444:	08008495 	.word	0x08008495
 8008448:	080084e1 	.word	0x080084e1
 800844c:	08008509 	.word	0x08008509
 8008450:	08008549 	.word	0x08008549
 8008454:	08008561 	.word	0x08008561
 8008458:	080085a5 	.word	0x080085a5
			          case ST_SETUP:
			              // do setup tasks
			              if (currentState != prevState)
 800845c:	7bfa      	ldrb	r2, [r7, #15]
 800845e:	7bbb      	ldrb	r3, [r7, #14]
 8008460:	429a      	cmp	r2, r3
 8008462:	d002      	beq.n	800846a <main+0x126>
			              {
			                  printf("\n## Entering SETUP state\n\n");
 8008464:	4858      	ldr	r0, [pc, #352]	@ (80085c8 <main+0x284>)
 8008466:	f016 fa8d 	bl	801e984 <puts>
			              }
			              prevState = currentState;
 800846a:	7bfb      	ldrb	r3, [r7, #15]
 800846c:	73bb      	strb	r3, [r7, #14]

			              readJsonConfig();
 800846e:	f7ff fb2d 	bl	8007acc <_Z14readJsonConfigv>
			              deserialiseJSON();
 8008472:	f7ff fbf3 	bl	8007c5c <_Z15deserialiseJSONv>
			              countModules();
 8008476:	f7ff fc4d 	bl	8007d14 <_Z12countModulesv>
			              configThreads();
 800847a:	f7ff fcf7 	bl	8007e6c <_Z13configThreadsv>
			              createThreads();
 800847e:	f7ff fae9 	bl	8007a54 <_Z13createThreadsv>
			              if (DEBUG_THREADS) debugThreadHigh();
 8008482:	f7ff febf 	bl	8008204 <_Z15debugThreadHighv>
			              loadModules();
 8008486:	f7ff fd9d 	bl	8007fc4 <_Z11loadModulesv>
			              if (DEBUG_THREADS) debugThreadLow();
 800848a:	f7ff ff0b 	bl	80082a4 <_Z14debugThreadLowv>

			              currentState = ST_START;
 800848e:	2301      	movs	r3, #1
 8008490:	73fb      	strb	r3, [r7, #15]
			              break;
 8008492:	e08d      	b.n	80085b0 <main+0x26c>

			          case ST_START:
			              // do start tasks
			              if (currentState != prevState)
 8008494:	7bfa      	ldrb	r2, [r7, #15]
 8008496:	7bbb      	ldrb	r3, [r7, #14]
 8008498:	429a      	cmp	r2, r3
 800849a:	d002      	beq.n	80084a2 <main+0x15e>
			              {
			                  printf("\n## Entering START state\n");
 800849c:	484b      	ldr	r0, [pc, #300]	@ (80085cc <main+0x288>)
 800849e:	f016 fa71 	bl	801e984 <puts>
			              }
			              prevState = currentState;
 80084a2:	7bfb      	ldrb	r3, [r7, #15]
 80084a4:	73bb      	strb	r3, [r7, #14]

			              if (!threadsRunning)
 80084a6:	4b4a      	ldr	r3, [pc, #296]	@ (80085d0 <main+0x28c>)
 80084a8:	781b      	ldrb	r3, [r3, #0]
 80084aa:	f083 0301 	eor.w	r3, r3, #1
 80084ae:	b2db      	uxtb	r3, r3
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d012      	beq.n	80084da <main+0x196>
			              {
			                  // Start the threads
			                  printf("\nStarting the SERVO thread\n");
 80084b4:	4847      	ldr	r0, [pc, #284]	@ (80085d4 <main+0x290>)
 80084b6:	f016 fa65 	bl	801e984 <puts>
			                  servoThread->startThread();
 80084ba:	4b47      	ldr	r3, [pc, #284]	@ (80085d8 <main+0x294>)
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	4618      	mov	r0, r3
 80084c0:	f008 fb3c 	bl	8010b3c <_ZN9pruThread11startThreadEv>

			                  printf("\nStarting the BASE thread\n");
 80084c4:	4845      	ldr	r0, [pc, #276]	@ (80085dc <main+0x298>)
 80084c6:	f016 fa5d 	bl	801e984 <puts>
			                  baseThread->startThread();
 80084ca:	4b45      	ldr	r3, [pc, #276]	@ (80085e0 <main+0x29c>)
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	4618      	mov	r0, r3
 80084d0:	f008 fb34 	bl	8010b3c <_ZN9pruThread11startThreadEv>

			                  threadsRunning = true;
 80084d4:	4b3e      	ldr	r3, [pc, #248]	@ (80085d0 <main+0x28c>)
 80084d6:	2201      	movs	r2, #1
 80084d8:	701a      	strb	r2, [r3, #0]
			              }

			              currentState = ST_IDLE;
 80084da:	2302      	movs	r3, #2
 80084dc:	73fb      	strb	r3, [r7, #15]

			              break;
 80084de:	e067      	b.n	80085b0 <main+0x26c>


			          case ST_IDLE:
			              // do something when idle
			              if (currentState != prevState)
 80084e0:	7bfa      	ldrb	r2, [r7, #15]
 80084e2:	7bbb      	ldrb	r3, [r7, #14]
 80084e4:	429a      	cmp	r2, r3
 80084e6:	d002      	beq.n	80084ee <main+0x1aa>
			              {
			                  printf("\n## Entering IDLE state\n");
 80084e8:	483e      	ldr	r0, [pc, #248]	@ (80085e4 <main+0x2a0>)
 80084ea:	f016 fa4b 	bl	801e984 <puts>
			              }
			              prevState = currentState;
 80084ee:	7bfb      	ldrb	r3, [r7, #15]
 80084f0:	73bb      	strb	r3, [r7, #14]

			              //wait for data before changing to running state
			              if (comms->getStatus())
 80084f2:	4b3d      	ldr	r3, [pc, #244]	@ (80085e8 <main+0x2a4>)
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	4618      	mov	r0, r3
 80084f8:	f006 ff7c 	bl	800f3f4 <_ZN11RemoraComms9getStatusEv>
 80084fc:	4603      	mov	r3, r0
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d053      	beq.n	80085aa <main+0x266>
			              {
			                  currentState = ST_RUNNING;
 8008502:	2303      	movs	r3, #3
 8008504:	73fb      	strb	r3, [r7, #15]
			              }

			              break;
 8008506:	e050      	b.n	80085aa <main+0x266>

			          case ST_RUNNING:
			              // do running tasks
			              if (currentState != prevState)
 8008508:	7bfa      	ldrb	r2, [r7, #15]
 800850a:	7bbb      	ldrb	r3, [r7, #14]
 800850c:	429a      	cmp	r2, r3
 800850e:	d002      	beq.n	8008516 <main+0x1d2>
			              {
			                  printf("\n## Entering RUNNING state\n");
 8008510:	4836      	ldr	r0, [pc, #216]	@ (80085ec <main+0x2a8>)
 8008512:	f016 fa37 	bl	801e984 <puts>
			              }
			              prevState = currentState;
 8008516:	7bfb      	ldrb	r3, [r7, #15]
 8008518:	73bb      	strb	r3, [r7, #14]

			              if (comms->getStatus() == false)
 800851a:	4b33      	ldr	r3, [pc, #204]	@ (80085e8 <main+0x2a4>)
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	4618      	mov	r0, r3
 8008520:	f006 ff68 	bl	800f3f4 <_ZN11RemoraComms9getStatusEv>
 8008524:	4603      	mov	r3, r0
 8008526:	2b00      	cmp	r3, #0
 8008528:	bf0c      	ite	eq
 800852a:	2301      	moveq	r3, #1
 800852c:	2300      	movne	r3, #0
 800852e:	b2db      	uxtb	r3, r3
 8008530:	2b00      	cmp	r3, #0
 8008532:	d001      	beq.n	8008538 <main+0x1f4>
			              {
			                  currentState = ST_RESET;
 8008534:	2305      	movs	r3, #5
 8008536:	73fb      	strb	r3, [r7, #15]
			              }

			              if (PRUreset)
 8008538:	4b2d      	ldr	r3, [pc, #180]	@ (80085f0 <main+0x2ac>)
 800853a:	781b      	ldrb	r3, [r3, #0]
 800853c:	b2db      	uxtb	r3, r3
 800853e:	2b00      	cmp	r3, #0
 8008540:	d035      	beq.n	80085ae <main+0x26a>
			              {
			                  currentState = ST_WDRESET;
 8008542:	2306      	movs	r3, #6
 8008544:	73fb      	strb	r3, [r7, #15]
			              }

			              break;
 8008546:	e032      	b.n	80085ae <main+0x26a>

			          case ST_STOP:
			              // do stop tasks
			              if (currentState != prevState)
 8008548:	7bfa      	ldrb	r2, [r7, #15]
 800854a:	7bbb      	ldrb	r3, [r7, #14]
 800854c:	429a      	cmp	r2, r3
 800854e:	d002      	beq.n	8008556 <main+0x212>
			              {
			                  printf("\n## Entering STOP state\n");
 8008550:	4828      	ldr	r0, [pc, #160]	@ (80085f4 <main+0x2b0>)
 8008552:	f016 fa17 	bl	801e984 <puts>
			              }
			              prevState = currentState;
 8008556:	7bfb      	ldrb	r3, [r7, #15]
 8008558:	73bb      	strb	r3, [r7, #14]


			              currentState = ST_STOP;
 800855a:	2304      	movs	r3, #4
 800855c:	73fb      	strb	r3, [r7, #15]
			              break;
 800855e:	e027      	b.n	80085b0 <main+0x26c>

			          case ST_RESET:
			              // do reset tasks
			              if (currentState != prevState)
 8008560:	7bfa      	ldrb	r2, [r7, #15]
 8008562:	7bbb      	ldrb	r3, [r7, #14]
 8008564:	429a      	cmp	r2, r3
 8008566:	d002      	beq.n	800856e <main+0x22a>
			              {
			                  printf("\n## Entering RESET state\n");
 8008568:	4823      	ldr	r0, [pc, #140]	@ (80085f8 <main+0x2b4>)
 800856a:	f016 fa0b 	bl	801e984 <puts>
			              }
			              prevState = currentState;
 800856e:	7bfb      	ldrb	r3, [r7, #15]
 8008570:	73bb      	strb	r3, [r7, #14]

			              // set all of the rxData buffer to 0
			              printf("   Resetting rxBuffer\n");
 8008572:	4822      	ldr	r0, [pc, #136]	@ (80085fc <main+0x2b8>)
 8008574:	f016 fa06 	bl	801e984 <puts>
			              {
							  int n = Config::dataBuffSize;
 8008578:	2340      	movs	r3, #64	@ 0x40
 800857a:	60bb      	str	r3, [r7, #8]
							  while(n-- > 0)
 800857c:	e005      	b.n	800858a <main+0x246>
							  {
								  ptrRxData->rxBuffer[n] = 0;
 800857e:	4b20      	ldr	r3, [pc, #128]	@ (8008600 <main+0x2bc>)
 8008580:	681a      	ldr	r2, [r3, #0]
 8008582:	68bb      	ldr	r3, [r7, #8]
 8008584:	4413      	add	r3, r2
 8008586:	2200      	movs	r2, #0
 8008588:	701a      	strb	r2, [r3, #0]
							  while(n-- > 0)
 800858a:	68bb      	ldr	r3, [r7, #8]
 800858c:	1e5a      	subs	r2, r3, #1
 800858e:	60ba      	str	r2, [r7, #8]
 8008590:	2b00      	cmp	r3, #0
 8008592:	bfcc      	ite	gt
 8008594:	2301      	movgt	r3, #1
 8008596:	2300      	movle	r3, #0
 8008598:	b2db      	uxtb	r3, r3
 800859a:	2b00      	cmp	r3, #0
 800859c:	d1ef      	bne.n	800857e <main+0x23a>
							  }
			              }

			              currentState = ST_IDLE;
 800859e:	2302      	movs	r3, #2
 80085a0:	73fb      	strb	r3, [r7, #15]
			              break;
 80085a2:	e005      	b.n	80085b0 <main+0x26c>

			          case ST_WDRESET:
			        	  // force a reset
			        	  HAL_NVIC_SystemReset();
 80085a4:	f009 fa39 	bl	8011a1a <HAL_NVIC_SystemReset>
			              break;
 80085a8:	e002      	b.n	80085b0 <main+0x26c>
			              break;
 80085aa:	bf00      	nop
 80085ac:	e000      	b.n	80085b0 <main+0x26c>
			              break;
 80085ae:	bf00      	nop
			  }
		commsTasks();
 80085b0:	f7ff fa80 	bl	8007ab4 <_Z10commsTasksv>
	}
 80085b4:	e73c      	b.n	8008430 <main+0xec>
 80085b6:	bf00      	nop
 80085b8:	e000ed00 	.word	0xe000ed00
 80085bc:	58024400 	.word	0x58024400
 80085c0:	0801fef8 	.word	0x0801fef8
 80085c4:	0801fecc 	.word	0x0801fecc
 80085c8:	0801ff04 	.word	0x0801ff04
 80085cc:	0801ff20 	.word	0x0801ff20
 80085d0:	24000310 	.word	0x24000310
 80085d4:	0801ff3c 	.word	0x0801ff3c
 80085d8:	24000314 	.word	0x24000314
 80085dc:	0801ff58 	.word	0x0801ff58
 80085e0:	24000318 	.word	0x24000318
 80085e4:	0801ff74 	.word	0x0801ff74
 80085e8:	240003c8 	.word	0x240003c8
 80085ec:	0801ff8c 	.word	0x0801ff8c
 80085f0:	2400030c 	.word	0x2400030c
 80085f4:	0801ffa8 	.word	0x0801ffa8
 80085f8:	0801ffc0 	.word	0x0801ffc0
 80085fc:	0801ffdc 	.word	0x0801ffdc
 8008600:	24000028 	.word	0x24000028

08008604 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8008604:	b580      	push	{r7, lr}
 8008606:	b09e      	sub	sp, #120	@ 0x78
 8008608:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800860a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800860e:	224c      	movs	r2, #76	@ 0x4c
 8008610:	2100      	movs	r1, #0
 8008612:	4618      	mov	r0, r3
 8008614:	f016 fab0 	bl	801eb78 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8008618:	f107 030c 	add.w	r3, r7, #12
 800861c:	2220      	movs	r2, #32
 800861e:	2100      	movs	r1, #0
 8008620:	4618      	mov	r0, r3
 8008622:	f016 faa9 	bl	801eb78 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8008626:	2002      	movs	r0, #2
 8008628:	f00b ff8a 	bl	8014540 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800862c:	2300      	movs	r3, #0
 800862e:	60bb      	str	r3, [r7, #8]
 8008630:	4b56      	ldr	r3, [pc, #344]	@ (800878c <_Z18SystemClock_Configv+0x188>)
 8008632:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008634:	4a55      	ldr	r2, [pc, #340]	@ (800878c <_Z18SystemClock_Configv+0x188>)
 8008636:	f023 0301 	bic.w	r3, r3, #1
 800863a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800863c:	4b53      	ldr	r3, [pc, #332]	@ (800878c <_Z18SystemClock_Configv+0x188>)
 800863e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008640:	f003 0301 	and.w	r3, r3, #1
 8008644:	60bb      	str	r3, [r7, #8]
 8008646:	4b52      	ldr	r3, [pc, #328]	@ (8008790 <_Z18SystemClock_Configv+0x18c>)
 8008648:	699b      	ldr	r3, [r3, #24]
 800864a:	4a51      	ldr	r2, [pc, #324]	@ (8008790 <_Z18SystemClock_Configv+0x18c>)
 800864c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008650:	6193      	str	r3, [r2, #24]
 8008652:	4b4f      	ldr	r3, [pc, #316]	@ (8008790 <_Z18SystemClock_Configv+0x18c>)
 8008654:	699b      	ldr	r3, [r3, #24]
 8008656:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800865a:	60bb      	str	r3, [r7, #8]
 800865c:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800865e:	bf00      	nop
 8008660:	4b4b      	ldr	r3, [pc, #300]	@ (8008790 <_Z18SystemClock_Configv+0x18c>)
 8008662:	699b      	ldr	r3, [r3, #24]
 8008664:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008668:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800866c:	bf14      	ite	ne
 800866e:	2301      	movne	r3, #1
 8008670:	2300      	moveq	r3, #0
 8008672:	b2db      	uxtb	r3, r3
 8008674:	2b00      	cmp	r3, #0
 8008676:	d1f3      	bne.n	8008660 <_Z18SystemClock_Configv+0x5c>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008678:	4b46      	ldr	r3, [pc, #280]	@ (8008794 <_Z18SystemClock_Configv+0x190>)
 800867a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800867e:	4a45      	ldr	r2, [pc, #276]	@ (8008794 <_Z18SystemClock_Configv+0x190>)
 8008680:	f043 0302 	orr.w	r3, r3, #2
 8008684:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8008688:	4b42      	ldr	r3, [pc, #264]	@ (8008794 <_Z18SystemClock_Configv+0x190>)
 800868a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800868e:	f003 0302 	and.w	r3, r3, #2
 8008692:	607b      	str	r3, [r7, #4]
 8008694:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8008696:	2300      	movs	r3, #0
 8008698:	603b      	str	r3, [r7, #0]
 800869a:	4b3d      	ldr	r3, [pc, #244]	@ (8008790 <_Z18SystemClock_Configv+0x18c>)
 800869c:	699b      	ldr	r3, [r3, #24]
 800869e:	4a3c      	ldr	r2, [pc, #240]	@ (8008790 <_Z18SystemClock_Configv+0x18c>)
 80086a0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80086a4:	6193      	str	r3, [r2, #24]
 80086a6:	4b3a      	ldr	r3, [pc, #232]	@ (8008790 <_Z18SystemClock_Configv+0x18c>)
 80086a8:	699b      	ldr	r3, [r3, #24]
 80086aa:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80086ae:	603b      	str	r3, [r7, #0]
 80086b0:	4b36      	ldr	r3, [pc, #216]	@ (800878c <_Z18SystemClock_Configv+0x188>)
 80086b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80086b4:	4a35      	ldr	r2, [pc, #212]	@ (800878c <_Z18SystemClock_Configv+0x188>)
 80086b6:	f043 0301 	orr.w	r3, r3, #1
 80086ba:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80086bc:	4b33      	ldr	r3, [pc, #204]	@ (800878c <_Z18SystemClock_Configv+0x188>)
 80086be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80086c0:	f003 0301 	and.w	r3, r3, #1
 80086c4:	603b      	str	r3, [r7, #0]
 80086c6:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80086c8:	bf00      	nop
 80086ca:	4b31      	ldr	r3, [pc, #196]	@ (8008790 <_Z18SystemClock_Configv+0x18c>)
 80086cc:	699b      	ldr	r3, [r3, #24]
 80086ce:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80086d2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80086d6:	bf14      	ite	ne
 80086d8:	2301      	movne	r3, #1
 80086da:	2300      	moveq	r3, #0
 80086dc:	b2db      	uxtb	r3, r3
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d1f3      	bne.n	80086ca <_Z18SystemClock_Configv+0xc6>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 80086e2:	4b2c      	ldr	r3, [pc, #176]	@ (8008794 <_Z18SystemClock_Configv+0x190>)
 80086e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80086e6:	f023 0303 	bic.w	r3, r3, #3
 80086ea:	4a2a      	ldr	r2, [pc, #168]	@ (8008794 <_Z18SystemClock_Configv+0x190>)
 80086ec:	f043 0302 	orr.w	r3, r3, #2
 80086f0:	6293      	str	r3, [r2, #40]	@ 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80086f2:	2301      	movs	r3, #1
 80086f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80086f6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80086fa:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80086fc:	2302      	movs	r3, #2
 80086fe:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8008700:	2302      	movs	r3, #2
 8008702:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLM = 5;
 8008704:	2305      	movs	r3, #5
 8008706:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 192;
 8008708:	23c0      	movs	r3, #192	@ 0xc0
 800870a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 800870c:	2302      	movs	r3, #2
 800870e:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8008710:	2304      	movs	r3, #4
 8008712:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLR = 2;
 8008714:	2302      	movs	r3, #2
 8008716:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8008718:	2308      	movs	r3, #8
 800871a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800871c:	2300      	movs	r3, #0
 800871e:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8008720:	2300      	movs	r3, #0
 8008722:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8008724:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8008728:	4618      	mov	r0, r3
 800872a:	f00b ff43 	bl	80145b4 <HAL_RCC_OscConfig>
 800872e:	4603      	mov	r3, r0
 8008730:	2b00      	cmp	r3, #0
 8008732:	bf14      	ite	ne
 8008734:	2301      	movne	r3, #1
 8008736:	2300      	moveq	r3, #0
 8008738:	b2db      	uxtb	r3, r3
 800873a:	2b00      	cmp	r3, #0
 800873c:	d001      	beq.n	8008742 <_Z18SystemClock_Configv+0x13e>
  {
    Error_Handler();
 800873e:	f000 f993 	bl	8008a68 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8008742:	233f      	movs	r3, #63	@ 0x3f
 8008744:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8008746:	2303      	movs	r3, #3
 8008748:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800874a:	2300      	movs	r3, #0
 800874c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800874e:	2308      	movs	r3, #8
 8008750:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8008752:	2340      	movs	r3, #64	@ 0x40
 8008754:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8008756:	2340      	movs	r3, #64	@ 0x40
 8008758:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800875a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800875e:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8008760:	2340      	movs	r3, #64	@ 0x40
 8008762:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8008764:	f107 030c 	add.w	r3, r7, #12
 8008768:	2104      	movs	r1, #4
 800876a:	4618      	mov	r0, r3
 800876c:	f00c fb7c 	bl	8014e68 <HAL_RCC_ClockConfig>
 8008770:	4603      	mov	r3, r0
 8008772:	2b00      	cmp	r3, #0
 8008774:	bf14      	ite	ne
 8008776:	2301      	movne	r3, #1
 8008778:	2300      	moveq	r3, #0
 800877a:	b2db      	uxtb	r3, r3
 800877c:	2b00      	cmp	r3, #0
 800877e:	d001      	beq.n	8008784 <_Z18SystemClock_Configv+0x180>
  {
    Error_Handler();
 8008780:	f000 f972 	bl	8008a68 <Error_Handler>
  }
}
 8008784:	bf00      	nop
 8008786:	3778      	adds	r7, #120	@ 0x78
 8008788:	46bd      	mov	sp, r7
 800878a:	bd80      	pop	{r7, pc}
 800878c:	58000400 	.word	0x58000400
 8008790:	58024800 	.word	0x58024800
 8008794:	58024400 	.word	0x58024400

08008798 <_Z24PeriphCommonClock_Configv>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8008798:	b580      	push	{r7, lr}
 800879a:	b0b0      	sub	sp, #192	@ 0xc0
 800879c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800879e:	463b      	mov	r3, r7
 80087a0:	22c0      	movs	r2, #192	@ 0xc0
 80087a2:	2100      	movs	r1, #0
 80087a4:	4618      	mov	r0, r3
 80087a6:	f016 f9e7 	bl	801eb78 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC|RCC_PERIPHCLK_SPI1;
 80087aa:	f44f 3288 	mov.w	r2, #69632	@ 0x11000
 80087ae:	f04f 0300 	mov.w	r3, #0
 80087b2:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 2;
 80087b6:	2302      	movs	r3, #2
 80087b8:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 12;
 80087ba:	230c      	movs	r3, #12
 80087bc:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 1;
 80087be:	2301      	movs	r3, #1
 80087c0:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 10;
 80087c2:	230a      	movs	r3, #10
 80087c4:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 80087c6:	2302      	movs	r3, #2
 80087c8:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 80087ca:	23c0      	movs	r3, #192	@ 0xc0
 80087cc:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 80087ce:	2320      	movs	r3, #32
 80087d0:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 80087d2:	2300      	movs	r3, #0
 80087d4:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL2;
 80087d6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80087da:	653b      	str	r3, [r7, #80]	@ 0x50
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL2;
 80087dc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80087e0:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80087e2:	463b      	mov	r3, r7
 80087e4:	4618      	mov	r0, r3
 80087e6:	f00c fecb 	bl	8015580 <HAL_RCCEx_PeriphCLKConfig>
 80087ea:	4603      	mov	r3, r0
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	bf14      	ite	ne
 80087f0:	2301      	movne	r3, #1
 80087f2:	2300      	moveq	r3, #0
 80087f4:	b2db      	uxtb	r3, r3
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d001      	beq.n	80087fe <_Z24PeriphCommonClock_Configv+0x66>
  {
    Error_Handler();
 80087fa:	f000 f935 	bl	8008a68 <Error_Handler>
  }
}
 80087fe:	bf00      	nop
 8008800:	37c0      	adds	r7, #192	@ 0xc0
 8008802:	46bd      	mov	sp, r7
 8008804:	bd80      	pop	{r7, pc}
	...

08008808 <_ZL17MX_SDMMC1_SD_Initv>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8008808:	b580      	push	{r7, lr}
 800880a:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 800880c:	4b11      	ldr	r3, [pc, #68]	@ (8008854 <_ZL17MX_SDMMC1_SD_Initv+0x4c>)
 800880e:	4a12      	ldr	r2, [pc, #72]	@ (8008858 <_ZL17MX_SDMMC1_SD_Initv+0x50>)
 8008810:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8008812:	4b10      	ldr	r3, [pc, #64]	@ (8008854 <_ZL17MX_SDMMC1_SD_Initv+0x4c>)
 8008814:	2200      	movs	r2, #0
 8008816:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_ENABLE;
 8008818:	4b0e      	ldr	r3, [pc, #56]	@ (8008854 <_ZL17MX_SDMMC1_SD_Initv+0x4c>)
 800881a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800881e:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8008820:	4b0c      	ldr	r3, [pc, #48]	@ (8008854 <_ZL17MX_SDMMC1_SD_Initv+0x4c>)
 8008822:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8008826:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8008828:	4b0a      	ldr	r3, [pc, #40]	@ (8008854 <_ZL17MX_SDMMC1_SD_Initv+0x4c>)
 800882a:	2200      	movs	r2, #0
 800882c:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 8;
 800882e:	4b09      	ldr	r3, [pc, #36]	@ (8008854 <_ZL17MX_SDMMC1_SD_Initv+0x4c>)
 8008830:	2208      	movs	r2, #8
 8008832:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN SDMMC1_Init 2 */
  if (HAL_SD_Init(&hsd1) != HAL_OK)
 8008834:	4807      	ldr	r0, [pc, #28]	@ (8008854 <_ZL17MX_SDMMC1_SD_Initv+0x4c>)
 8008836:	f00f fba1 	bl	8017f7c <HAL_SD_Init>
 800883a:	4603      	mov	r3, r0
 800883c:	2b00      	cmp	r3, #0
 800883e:	bf14      	ite	ne
 8008840:	2301      	movne	r3, #1
 8008842:	2300      	moveq	r3, #0
 8008844:	b2db      	uxtb	r3, r3
 8008846:	2b00      	cmp	r3, #0
 8008848:	d002      	beq.n	8008850 <_ZL17MX_SDMMC1_SD_Initv+0x48>
  {
      printf("SD_Init error\n");
 800884a:	4804      	ldr	r0, [pc, #16]	@ (800885c <_ZL17MX_SDMMC1_SD_Initv+0x54>)
 800884c:	f016 f89a 	bl	801e984 <puts>
  }
  /* USER CODE END SDMMC1_Init 2 */

}
 8008850:	bf00      	nop
 8008852:	bd80      	pop	{r7, pc}
 8008854:	240003cc 	.word	0x240003cc
 8008858:	52007000 	.word	0x52007000
 800885c:	0801fff4 	.word	0x0801fff4

08008860 <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8008860:	b580      	push	{r7, lr}
 8008862:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8008864:	4b2c      	ldr	r3, [pc, #176]	@ (8008918 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8008866:	4a2d      	ldr	r2, [pc, #180]	@ (800891c <_ZL19MX_USART1_UART_Initv+0xbc>)
 8008868:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = Config::pcBaud;
 800886a:	4b2b      	ldr	r3, [pc, #172]	@ (8008918 <_ZL19MX_USART1_UART_Initv+0xb8>)
 800886c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8008870:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8008872:	4b29      	ldr	r3, [pc, #164]	@ (8008918 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8008874:	2200      	movs	r2, #0
 8008876:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8008878:	4b27      	ldr	r3, [pc, #156]	@ (8008918 <_ZL19MX_USART1_UART_Initv+0xb8>)
 800887a:	2200      	movs	r2, #0
 800887c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800887e:	4b26      	ldr	r3, [pc, #152]	@ (8008918 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8008880:	2200      	movs	r2, #0
 8008882:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8008884:	4b24      	ldr	r3, [pc, #144]	@ (8008918 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8008886:	220c      	movs	r2, #12
 8008888:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800888a:	4b23      	ldr	r3, [pc, #140]	@ (8008918 <_ZL19MX_USART1_UART_Initv+0xb8>)
 800888c:	2200      	movs	r2, #0
 800888e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8008890:	4b21      	ldr	r3, [pc, #132]	@ (8008918 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8008892:	2200      	movs	r2, #0
 8008894:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8008896:	4b20      	ldr	r3, [pc, #128]	@ (8008918 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8008898:	2200      	movs	r2, #0
 800889a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800889c:	4b1e      	ldr	r3, [pc, #120]	@ (8008918 <_ZL19MX_USART1_UART_Initv+0xb8>)
 800889e:	2200      	movs	r2, #0
 80088a0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80088a2:	4b1d      	ldr	r3, [pc, #116]	@ (8008918 <_ZL19MX_USART1_UART_Initv+0xb8>)
 80088a4:	2200      	movs	r2, #0
 80088a6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80088a8:	481b      	ldr	r0, [pc, #108]	@ (8008918 <_ZL19MX_USART1_UART_Initv+0xb8>)
 80088aa:	f011 f914 	bl	8019ad6 <HAL_UART_Init>
 80088ae:	4603      	mov	r3, r0
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	bf14      	ite	ne
 80088b4:	2301      	movne	r3, #1
 80088b6:	2300      	moveq	r3, #0
 80088b8:	b2db      	uxtb	r3, r3
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d001      	beq.n	80088c2 <_ZL19MX_USART1_UART_Initv+0x62>
  {
    Error_Handler();
 80088be:	f000 f8d3 	bl	8008a68 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80088c2:	2100      	movs	r1, #0
 80088c4:	4814      	ldr	r0, [pc, #80]	@ (8008918 <_ZL19MX_USART1_UART_Initv+0xb8>)
 80088c6:	f012 f9a6 	bl	801ac16 <HAL_UARTEx_SetTxFifoThreshold>
 80088ca:	4603      	mov	r3, r0
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	bf14      	ite	ne
 80088d0:	2301      	movne	r3, #1
 80088d2:	2300      	moveq	r3, #0
 80088d4:	b2db      	uxtb	r3, r3
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d001      	beq.n	80088de <_ZL19MX_USART1_UART_Initv+0x7e>
  {
    Error_Handler();
 80088da:	f000 f8c5 	bl	8008a68 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80088de:	2100      	movs	r1, #0
 80088e0:	480d      	ldr	r0, [pc, #52]	@ (8008918 <_ZL19MX_USART1_UART_Initv+0xb8>)
 80088e2:	f012 f9d6 	bl	801ac92 <HAL_UARTEx_SetRxFifoThreshold>
 80088e6:	4603      	mov	r3, r0
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	bf14      	ite	ne
 80088ec:	2301      	movne	r3, #1
 80088ee:	2300      	moveq	r3, #0
 80088f0:	b2db      	uxtb	r3, r3
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d001      	beq.n	80088fa <_ZL19MX_USART1_UART_Initv+0x9a>
  {
    Error_Handler();
 80088f6:	f000 f8b7 	bl	8008a68 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80088fa:	4807      	ldr	r0, [pc, #28]	@ (8008918 <_ZL19MX_USART1_UART_Initv+0xb8>)
 80088fc:	f012 f952 	bl	801aba4 <HAL_UARTEx_DisableFifoMode>
 8008900:	4603      	mov	r3, r0
 8008902:	2b00      	cmp	r3, #0
 8008904:	bf14      	ite	ne
 8008906:	2301      	movne	r3, #1
 8008908:	2300      	moveq	r3, #0
 800890a:	b2db      	uxtb	r3, r3
 800890c:	2b00      	cmp	r3, #0
 800890e:	d001      	beq.n	8008914 <_ZL19MX_USART1_UART_Initv+0xb4>
  {
    Error_Handler();
 8008910:	f000 f8aa 	bl	8008a68 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8008914:	bf00      	nop
 8008916:	bd80      	pop	{r7, pc}
 8008918:	24000448 	.word	0x24000448
 800891c:	40011000 	.word	0x40011000

08008920 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8008920:	b580      	push	{r7, lr}
 8008922:	b08a      	sub	sp, #40	@ 0x28
 8008924:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008926:	f107 0314 	add.w	r3, r7, #20
 800892a:	2200      	movs	r2, #0
 800892c:	601a      	str	r2, [r3, #0]
 800892e:	605a      	str	r2, [r3, #4]
 8008930:	609a      	str	r2, [r3, #8]
 8008932:	60da      	str	r2, [r3, #12]
 8008934:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8008936:	4b26      	ldr	r3, [pc, #152]	@ (80089d0 <_ZL12MX_GPIO_Initv+0xb0>)
 8008938:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800893c:	4a24      	ldr	r2, [pc, #144]	@ (80089d0 <_ZL12MX_GPIO_Initv+0xb0>)
 800893e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008942:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8008946:	4b22      	ldr	r3, [pc, #136]	@ (80089d0 <_ZL12MX_GPIO_Initv+0xb0>)
 8008948:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800894c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008950:	613b      	str	r3, [r7, #16]
 8008952:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8008954:	4b1e      	ldr	r3, [pc, #120]	@ (80089d0 <_ZL12MX_GPIO_Initv+0xb0>)
 8008956:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800895a:	4a1d      	ldr	r2, [pc, #116]	@ (80089d0 <_ZL12MX_GPIO_Initv+0xb0>)
 800895c:	f043 0304 	orr.w	r3, r3, #4
 8008960:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8008964:	4b1a      	ldr	r3, [pc, #104]	@ (80089d0 <_ZL12MX_GPIO_Initv+0xb0>)
 8008966:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800896a:	f003 0304 	and.w	r3, r3, #4
 800896e:	60fb      	str	r3, [r7, #12]
 8008970:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8008972:	4b17      	ldr	r3, [pc, #92]	@ (80089d0 <_ZL12MX_GPIO_Initv+0xb0>)
 8008974:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008978:	4a15      	ldr	r2, [pc, #84]	@ (80089d0 <_ZL12MX_GPIO_Initv+0xb0>)
 800897a:	f043 0301 	orr.w	r3, r3, #1
 800897e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8008982:	4b13      	ldr	r3, [pc, #76]	@ (80089d0 <_ZL12MX_GPIO_Initv+0xb0>)
 8008984:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008988:	f003 0301 	and.w	r3, r3, #1
 800898c:	60bb      	str	r3, [r7, #8]
 800898e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8008990:	4b0f      	ldr	r3, [pc, #60]	@ (80089d0 <_ZL12MX_GPIO_Initv+0xb0>)
 8008992:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008996:	4a0e      	ldr	r2, [pc, #56]	@ (80089d0 <_ZL12MX_GPIO_Initv+0xb0>)
 8008998:	f043 0308 	orr.w	r3, r3, #8
 800899c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80089a0:	4b0b      	ldr	r3, [pc, #44]	@ (80089d0 <_ZL12MX_GPIO_Initv+0xb0>)
 80089a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80089a6:	f003 0308 	and.w	r3, r3, #8
 80089aa:	607b      	str	r3, [r7, #4]
 80089ac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80089ae:	2310      	movs	r3, #16
 80089b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80089b2:	2300      	movs	r3, #0
 80089b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80089b6:	2300      	movs	r3, #0
 80089b8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80089ba:	f107 0314 	add.w	r3, r7, #20
 80089be:	4619      	mov	r1, r3
 80089c0:	4804      	ldr	r0, [pc, #16]	@ (80089d4 <_ZL12MX_GPIO_Initv+0xb4>)
 80089c2:	f00b fbf3 	bl	80141ac <HAL_GPIO_Init>

}
 80089c6:	bf00      	nop
 80089c8:	3728      	adds	r7, #40	@ 0x28
 80089ca:	46bd      	mov	sp, r7
 80089cc:	bd80      	pop	{r7, pc}
 80089ce:	bf00      	nop
 80089d0:	58024400 	.word	0x58024400
 80089d4:	58020800 	.word	0x58020800

080089d8 <_ZL10MPU_Configv>:
/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

void MPU_Config(void)
{
 80089d8:	b580      	push	{r7, lr}
 80089da:	b084      	sub	sp, #16
 80089dc:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80089de:	463b      	mov	r3, r7
 80089e0:	2200      	movs	r2, #0
 80089e2:	601a      	str	r2, [r3, #0]
 80089e4:	605a      	str	r2, [r3, #4]
 80089e6:	609a      	str	r2, [r3, #8]
 80089e8:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 80089ea:	f009 f827 	bl	8011a3c <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80089ee:	2301      	movs	r3, #1
 80089f0:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80089f2:	2300      	movs	r3, #0
 80089f4:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 80089f6:	2300      	movs	r3, #0
 80089f8:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 80089fa:	231f      	movs	r3, #31
 80089fc:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 80089fe:	2387      	movs	r3, #135	@ 0x87
 8008a00:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8008a02:	2300      	movs	r3, #0
 8008a04:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8008a06:	2300      	movs	r3, #0
 8008a08:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8008a0a:	2301      	movs	r3, #1
 8008a0c:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8008a0e:	2301      	movs	r3, #1
 8008a10:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8008a12:	2300      	movs	r3, #0
 8008a14:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8008a16:	2300      	movs	r3, #0
 8008a18:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8008a1a:	463b      	mov	r3, r7
 8008a1c:	4618      	mov	r0, r3
 8008a1e:	f009 f845 	bl	8011aac <HAL_MPU_ConfigRegion>

  /* Configure the MPU attributes as Device not cacheable
     for DMA buffers */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8008a22:	2301      	movs	r3, #1
 8008a24:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.BaseAddress = 0x30000000;
 8008a26:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 8008a2a:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_256B;
 8008a2c:	2307      	movs	r3, #7
 8008a2e:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8008a30:	2303      	movs	r3, #3
 8008a32:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8008a34:	2301      	movs	r3, #1
 8008a36:	73fb      	strb	r3, [r7, #15]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8008a38:	2300      	movs	r3, #0
 8008a3a:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8008a3c:	2300      	movs	r3, #0
 8008a3e:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8008a40:	2301      	movs	r3, #1
 8008a42:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8008a44:	2300      	movs	r3, #0
 8008a46:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.SubRegionDisable = 0x00;
 8008a48:	2300      	movs	r3, #0
 8008a4a:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8008a4c:	2300      	movs	r3, #0
 8008a4e:	733b      	strb	r3, [r7, #12]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8008a50:	463b      	mov	r3, r7
 8008a52:	4618      	mov	r0, r3
 8008a54:	f009 f82a 	bl	8011aac <HAL_MPU_ConfigRegion>

  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8008a58:	2004      	movs	r0, #4
 8008a5a:	f009 f807 	bl	8011a6c <HAL_MPU_Enable>

}
 8008a5e:	bf00      	nop
 8008a60:	3710      	adds	r7, #16
 8008a62:	46bd      	mov	sp, r7
 8008a64:	bd80      	pop	{r7, pc}
	...

08008a68 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8008a68:	b580      	push	{r7, lr}
 8008a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

	printf("error\n\r");
 8008a6c:	4803      	ldr	r0, [pc, #12]	@ (8008a7c <Error_Handler+0x14>)
 8008a6e:	f015 ff19 	bl	801e8a4 <iprintf>
  __ASM volatile ("cpsid i" : : : "memory");
 8008a72:	b672      	cpsid	i
}
 8008a74:	bf00      	nop

  __disable_irq();
  while (1)
 8008a76:	bf00      	nop
 8008a78:	e7fd      	b.n	8008a76 <Error_Handler+0xe>
 8008a7a:	bf00      	nop
 8008a7c:	08020004 	.word	0x08020004

08008a80 <_ZN11ArduinoJson8V730HB226detail14MemoryPoolListINS1_15ResourceManager8SlotDataEED1Ev>:
  ~MemoryPoolList() {
 8008a80:	b480      	push	{r7}
 8008a82:	b083      	sub	sp, #12
 8008a84:	af00      	add	r7, sp, #0
 8008a86:	6078      	str	r0, [r7, #4]
  }
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	4618      	mov	r0, r3
 8008a8c:	370c      	adds	r7, #12
 8008a8e:	46bd      	mov	sp, r7
 8008a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a94:	4770      	bx	lr

08008a96 <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA5_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>:

  // Gets or sets the member with specified key.
  // https://arduinojson.org/v7/api/jsonobject/subscript/
  template <typename TString,
            detail::enable_if_t<detail::IsString<TString>::value, int> = 0>
  detail::MemberProxy<JsonObject, detail::AdaptedString<TString>> operator[](
 8008a96:	b580      	push	{r7, lr}
 8008a98:	b08c      	sub	sp, #48	@ 0x30
 8008a9a:	af02      	add	r7, sp, #8
 8008a9c:	60f8      	str	r0, [r7, #12]
 8008a9e:	60b9      	str	r1, [r7, #8]
 8008aa0:	607a      	str	r2, [r7, #4]
      const TString& key) const {
    return {*this, detail::adaptString(key)};
 8008aa2:	68ba      	ldr	r2, [r7, #8]
 8008aa4:	f107 0314 	add.w	r3, r7, #20
 8008aa8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008aac:	e883 0003 	stmia.w	r3, {r0, r1}
 8008ab0:	f107 031c 	add.w	r3, r7, #28
 8008ab4:	6879      	ldr	r1, [r7, #4]
 8008ab6:	4618      	mov	r0, r3
 8008ab8:	f000 f812 	bl	8008ae0 <_ZN11ArduinoJson8V730HB226detail11adaptStringIRA5_KcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES9_NS1_9remove_cvINS1_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEOS9_>
 8008abc:	466a      	mov	r2, sp
 8008abe:	f107 0320 	add.w	r3, r7, #32
 8008ac2:	e893 0003 	ldmia.w	r3, {r0, r1}
 8008ac6:	e882 0003 	stmia.w	r2, {r0, r1}
 8008aca:	69fb      	ldr	r3, [r7, #28]
 8008acc:	f107 0214 	add.w	r2, r7, #20
 8008ad0:	ca06      	ldmia	r2, {r1, r2}
 8008ad2:	68f8      	ldr	r0, [r7, #12]
 8008ad4:	f7fc fb83 	bl	80051de <_ZN11ArduinoJson8V730HB226detail11MemberProxyINS0_10JsonObjectENS1_9RamStringEEC1ES3_S4_>
  }
 8008ad8:	68f8      	ldr	r0, [r7, #12]
 8008ada:	3728      	adds	r7, #40	@ 0x28
 8008adc:	46bd      	mov	sp, r7
 8008ade:	bd80      	pop	{r7, pc}

08008ae0 <_ZN11ArduinoJson8V730HB226detail11adaptStringIRA5_KcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES9_NS1_9remove_cvINS1_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEOS9_>:
AdaptedString<TString> adaptString(TString&& s) {
 8008ae0:	b580      	push	{r7, lr}
 8008ae2:	b082      	sub	sp, #8
 8008ae4:	af00      	add	r7, sp, #0
 8008ae6:	6078      	str	r0, [r7, #4]
 8008ae8:	6039      	str	r1, [r7, #0]
  return StringAdapterFor<TString>::adapt(detail::forward<TString>(s));
 8008aea:	6838      	ldr	r0, [r7, #0]
 8008aec:	f000 f80b 	bl	8008b06 <_ZN11ArduinoJson8V730HB226detail7forwardIRA5_KcEEOT_RNS1_16remove_referenceIS6_E4typeE>
 8008af0:	4602      	mov	r2, r0
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	4611      	mov	r1, r2
 8008af6:	4618      	mov	r0, r3
 8008af8:	f000 f810 	bl	8008b1c <_ZN11ArduinoJson8V730HB226detail13StringAdapterIRA5_KcvE5adaptES5_>
 8008afc:	bf00      	nop
}
 8008afe:	6878      	ldr	r0, [r7, #4]
 8008b00:	3708      	adds	r7, #8
 8008b02:	46bd      	mov	sp, r7
 8008b04:	bd80      	pop	{r7, pc}

08008b06 <_ZN11ArduinoJson8V730HB226detail7forwardIRA5_KcEEOT_RNS1_16remove_referenceIS6_E4typeE>:
T&& forward(remove_reference_t<T>& t) noexcept {
 8008b06:	b480      	push	{r7}
 8008b08:	b083      	sub	sp, #12
 8008b0a:	af00      	add	r7, sp, #0
 8008b0c:	6078      	str	r0, [r7, #4]
  return static_cast<T&&>(t);
 8008b0e:	687b      	ldr	r3, [r7, #4]
}
 8008b10:	4618      	mov	r0, r3
 8008b12:	370c      	adds	r7, #12
 8008b14:	46bd      	mov	sp, r7
 8008b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b1a:	4770      	bx	lr

08008b1c <_ZN11ArduinoJson8V730HB226detail13StringAdapterIRA5_KcvE5adaptES5_>:
  static AdaptedString adapt(const char (&p)[N]) {
 8008b1c:	b580      	push	{r7, lr}
 8008b1e:	b082      	sub	sp, #8
 8008b20:	af00      	add	r7, sp, #0
 8008b22:	6078      	str	r0, [r7, #4]
 8008b24:	6039      	str	r1, [r7, #0]
    return RamString(p, N - 1, true);
 8008b26:	2301      	movs	r3, #1
 8008b28:	2204      	movs	r2, #4
 8008b2a:	6839      	ldr	r1, [r7, #0]
 8008b2c:	6878      	ldr	r0, [r7, #4]
 8008b2e:	f7f9 fdd1 	bl	80026d4 <_ZN11ArduinoJson8V730HB226detail9RamStringC1EPKcjb>
  }
 8008b32:	6878      	ldr	r0, [r7, #4]
 8008b34:	3708      	adds	r7, #8
 8008b36:	46bd      	mov	sp, r7
 8008b38:	bd80      	pop	{r7, pc}
	...

08008b3c <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8008b3c:	b590      	push	{r4, r7, lr}
 8008b3e:	b085      	sub	sp, #20
 8008b40:	af02      	add	r7, sp, #8
 8008b42:	6078      	str	r0, [r7, #4]
 8008b44:	6039      	str	r1, [r7, #0]
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	2b01      	cmp	r3, #1
 8008b4a:	d127      	bne.n	8008b9c <_Z41__static_initialization_and_destruction_0ii+0x60>
 8008b4c:	683b      	ldr	r3, [r7, #0]
 8008b4e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8008b52:	4293      	cmp	r3, r2
 8008b54:	d122      	bne.n	8008b9c <_Z41__static_initialization_and_destruction_0ii+0x60>
std::string 		strJson;
 8008b56:	481a      	ldr	r0, [pc, #104]	@ (8008bc0 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8008b58:	f015 fbc6 	bl	801e2e8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
JsonDocument 		doc;
 8008b5c:	f7f9 fd3a 	bl	80025d4 <_ZN11ArduinoJson8V730HB226detail16DefaultAllocator8instanceEv>
 8008b60:	4603      	mov	r3, r0
 8008b62:	4619      	mov	r1, r3
 8008b64:	4817      	ldr	r0, [pc, #92]	@ (8008bc4 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8008b66:	f7fa fad2 	bl	800310e <_ZN11ArduinoJson8V730HB2212JsonDocumentC1EPNS0_9AllocatorE>
JsonObject 			thread;
 8008b6a:	4817      	ldr	r0, [pc, #92]	@ (8008bc8 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 8008b6c:	f7fa fa91 	bl	8003092 <_ZN11ArduinoJson8V730HB2210JsonObjectC1Ev>
JsonObject 			module;
 8008b70:	4816      	ldr	r0, [pc, #88]	@ (8008bcc <_Z41__static_initialization_and_destruction_0ii+0x90>)
 8008b72:	f7fa fa8e 	bl	8003092 <_ZN11ArduinoJson8V730HB2210JsonObjectC1Ev>
RemoraComms* comms = new RemoraComms(ptrRxData, ptrTxData, ptrRxDMABuffer, SPI1);
 8008b76:	f44f 7010 	mov.w	r0, #576	@ 0x240
 8008b7a:	f015 fb0f 	bl	801e19c <_Znwj>
 8008b7e:	4603      	mov	r3, r0
 8008b80:	461c      	mov	r4, r3
 8008b82:	4b13      	ldr	r3, [pc, #76]	@ (8008bd0 <_Z41__static_initialization_and_destruction_0ii+0x94>)
 8008b84:	6819      	ldr	r1, [r3, #0]
 8008b86:	4b13      	ldr	r3, [pc, #76]	@ (8008bd4 <_Z41__static_initialization_and_destruction_0ii+0x98>)
 8008b88:	681a      	ldr	r2, [r3, #0]
 8008b8a:	4b13      	ldr	r3, [pc, #76]	@ (8008bd8 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	4813      	ldr	r0, [pc, #76]	@ (8008bdc <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 8008b90:	9000      	str	r0, [sp, #0]
 8008b92:	4620      	mov	r0, r4
 8008b94:	f005 fbc8 	bl	800e328 <_ZN11RemoraCommsC1EPV8rxData_tPV8txData_tPV14DMA_RxBuffer_tP11SPI_TypeDef>
 8008b98:	4b11      	ldr	r3, [pc, #68]	@ (8008be0 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 8008b9a:	601c      	str	r4, [r3, #0]
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d10a      	bne.n	8008bb8 <_Z41__static_initialization_and_destruction_0ii+0x7c>
 8008ba2:	683b      	ldr	r3, [r7, #0]
 8008ba4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8008ba8:	4293      	cmp	r3, r2
 8008baa:	d105      	bne.n	8008bb8 <_Z41__static_initialization_and_destruction_0ii+0x7c>
JsonDocument 		doc;
 8008bac:	4805      	ldr	r0, [pc, #20]	@ (8008bc4 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8008bae:	f7fe fed2 	bl	8007956 <_ZN11ArduinoJson8V730HB2212JsonDocumentD1Ev>
std::string 		strJson;
 8008bb2:	4803      	ldr	r0, [pc, #12]	@ (8008bc0 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8008bb4:	f015 fb9f 	bl	801e2f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
}
 8008bb8:	bf00      	nop
 8008bba:	370c      	adds	r7, #12
 8008bbc:	46bd      	mov	sp, r7
 8008bbe:	bd90      	pop	{r4, r7, pc}
 8008bc0:	24000360 	.word	0x24000360
 8008bc4:	24000378 	.word	0x24000378
 8008bc8:	240003b8 	.word	0x240003b8
 8008bcc:	240003c0 	.word	0x240003c0
 8008bd0:	24000028 	.word	0x24000028
 8008bd4:	24000024 	.word	0x24000024
 8008bd8:	2400002c 	.word	0x2400002c
 8008bdc:	40013000 	.word	0x40013000
 8008be0:	240003c8 	.word	0x240003c8

08008be4 <_GLOBAL__sub_I_EXTI4_IRQHandler>:
 8008be4:	b580      	push	{r7, lr}
 8008be6:	af00      	add	r7, sp, #0
 8008be8:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8008bec:	2001      	movs	r0, #1
 8008bee:	f7ff ffa5 	bl	8008b3c <_Z41__static_initialization_and_destruction_0ii>
 8008bf2:	bd80      	pop	{r7, pc}

08008bf4 <_GLOBAL__sub_D_EXTI4_IRQHandler>:
 8008bf4:	b580      	push	{r7, lr}
 8008bf6:	af00      	add	r7, sp, #0
 8008bf8:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8008bfc:	2000      	movs	r0, #0
 8008bfe:	f7ff ff9d 	bl	8008b3c <_Z41__static_initialization_and_destruction_0ii>
 8008c02:	bd80      	pop	{r7, pc}

08008c04 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE15_M_add_ref_copyEv>:
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
 8008c04:	b480      	push	{r7}
 8008c06:	b083      	sub	sp, #12
 8008c08:	af00      	add	r7, sp, #0
 8008c0a:	6078      	str	r0, [r7, #4]
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	685b      	ldr	r3, [r3, #4]
 8008c10:	1c5a      	adds	r2, r3, #1
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	605a      	str	r2, [r3, #4]
 8008c16:	bf00      	nop
 8008c18:	370c      	adds	r7, #12
 8008c1a:	46bd      	mov	sp, r7
 8008c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c20:	4770      	bx	lr

08008c22 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>:

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
 8008c22:	b580      	push	{r7, lr}
 8008c24:	b082      	sub	sp, #8
 8008c26:	af00      	add	r7, sp, #0
 8008c28:	6078      	str	r0, [r7, #4]
      if (--_M_use_count == 0)
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	685b      	ldr	r3, [r3, #4]
 8008c2e:	1e5a      	subs	r2, r3, #1
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	605a      	str	r2, [r3, #4]
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	685b      	ldr	r3, [r3, #4]
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	bf0c      	ite	eq
 8008c3c:	2301      	moveq	r3, #1
 8008c3e:	2300      	movne	r3, #0
 8008c40:	b2db      	uxtb	r3, r3
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d019      	beq.n	8008c7a <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x58>
        {
          _M_dispose();
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	3308      	adds	r3, #8
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	6878      	ldr	r0, [r7, #4]
 8008c50:	4798      	blx	r3
          if (--_M_weak_count == 0)
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	689b      	ldr	r3, [r3, #8]
 8008c56:	1e5a      	subs	r2, r3, #1
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	609a      	str	r2, [r3, #8]
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	689b      	ldr	r3, [r3, #8]
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	bf0c      	ite	eq
 8008c64:	2301      	moveq	r3, #1
 8008c66:	2300      	movne	r3, #0
 8008c68:	b2db      	uxtb	r3, r3
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d005      	beq.n	8008c7a <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x58>
            _M_destroy();
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	330c      	adds	r3, #12
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	6878      	ldr	r0, [r7, #4]
 8008c78:	4798      	blx	r3
        }
    }
 8008c7a:	bf00      	nop
 8008c7c:	3708      	adds	r7, #8
 8008c7e:	46bd      	mov	sp, r7
 8008c80:	bd80      	pop	{r7, pc}

08008c82 <_ZN8txData_tC1Ev>:
    int32_t jointFeedback[Config::joints];	  // Base thread feedback ??
    float processVariable[Config::variables];		     // Servo thread feedback ??
	uint16_t inputs;
  };

  txData_t() {
 8008c82:	b480      	push	{r7}
 8008c84:	b085      	sub	sp, #20
 8008c86:	af00      	add	r7, sp, #0
 8008c88:	6078      	str	r0, [r7, #4]
      header = 0;
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	2200      	movs	r2, #0
 8008c8e:	601a      	str	r2, [r3, #0]
      inputs = 0;
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	2200      	movs	r2, #0
 8008c94:	879a      	strh	r2, [r3, #60]	@ 0x3c
      for (uint8_t i=0;i<Config::joints;i++) {
 8008c96:	2300      	movs	r3, #0
 8008c98:	73fb      	strb	r3, [r7, #15]
 8008c9a:	e008      	b.n	8008cae <_ZN8txData_tC1Ev+0x2c>
         jointFeedback[i] = 0;
 8008c9c:	7bfb      	ldrb	r3, [r7, #15]
 8008c9e:	687a      	ldr	r2, [r7, #4]
 8008ca0:	009b      	lsls	r3, r3, #2
 8008ca2:	4413      	add	r3, r2
 8008ca4:	2200      	movs	r2, #0
 8008ca6:	605a      	str	r2, [r3, #4]
      for (uint8_t i=0;i<Config::joints;i++) {
 8008ca8:	7bfb      	ldrb	r3, [r7, #15]
 8008caa:	3301      	adds	r3, #1
 8008cac:	73fb      	strb	r3, [r7, #15]
 8008cae:	7bfb      	ldrb	r3, [r7, #15]
 8008cb0:	2b07      	cmp	r3, #7
 8008cb2:	d9f3      	bls.n	8008c9c <_ZN8txData_tC1Ev+0x1a>
      }
      for (uint8_t i=0;i<Config::variables;i++) {
 8008cb4:	2300      	movs	r3, #0
 8008cb6:	73bb      	strb	r3, [r7, #14]
 8008cb8:	e00b      	b.n	8008cd2 <_ZN8txData_tC1Ev+0x50>
         processVariable[i] = 0.0;
 8008cba:	7bbb      	ldrb	r3, [r7, #14]
 8008cbc:	687a      	ldr	r2, [r7, #4]
 8008cbe:	3308      	adds	r3, #8
 8008cc0:	009b      	lsls	r3, r3, #2
 8008cc2:	4413      	add	r3, r2
 8008cc4:	3304      	adds	r3, #4
 8008cc6:	f04f 0200 	mov.w	r2, #0
 8008cca:	601a      	str	r2, [r3, #0]
      for (uint8_t i=0;i<Config::variables;i++) {
 8008ccc:	7bbb      	ldrb	r3, [r7, #14]
 8008cce:	3301      	adds	r3, #1
 8008cd0:	73bb      	strb	r3, [r7, #14]
 8008cd2:	7bbb      	ldrb	r3, [r7, #14]
 8008cd4:	2b05      	cmp	r3, #5
 8008cd6:	d9f0      	bls.n	8008cba <_ZN8txData_tC1Ev+0x38>
     }
  }
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	4618      	mov	r0, r3
 8008cdc:	3714      	adds	r7, #20
 8008cde:	46bd      	mov	sp, r7
 8008ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ce4:	4770      	bx	lr

08008ce6 <_ZNK11ArduinoJson8V730HB226detail9RamString8isStaticEv>:
  bool isStatic() const {
 8008ce6:	b480      	push	{r7}
 8008ce8:	b083      	sub	sp, #12
 8008cea:	af00      	add	r7, sp, #0
 8008cec:	6078      	str	r0, [r7, #4]
    return static_;
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	7a1b      	ldrb	r3, [r3, #8]
  }
 8008cf2:	4618      	mov	r0, r3
 8008cf4:	370c      	adds	r7, #12
 8008cf6:	46bd      	mov	sp, r7
 8008cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cfc:	4770      	bx	lr

08008cfe <_ZN11ArduinoJson8V730HB226detail9ArrayData10getElementEPKS2_jPKNS1_15ResourceManagerE>:

  VariantData* getOrAddElement(size_t index, ResourceManager* resources);

  VariantData* getElement(size_t index, const ResourceManager* resources) const;

  static VariantData* getElement(const ArrayData* array, size_t index,
 8008cfe:	b580      	push	{r7, lr}
 8008d00:	b084      	sub	sp, #16
 8008d02:	af00      	add	r7, sp, #0
 8008d04:	60f8      	str	r0, [r7, #12]
 8008d06:	60b9      	str	r1, [r7, #8]
 8008d08:	607a      	str	r2, [r7, #4]
                                 const ResourceManager* resources) {
    if (!array)
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d101      	bne.n	8008d14 <_ZN11ArduinoJson8V730HB226detail9ArrayData10getElementEPKS2_jPKNS1_15ResourceManagerE+0x16>
      return nullptr;
 8008d10:	2300      	movs	r3, #0
 8008d12:	e006      	b.n	8008d22 <_ZN11ArduinoJson8V730HB226detail9ArrayData10getElementEPKS2_jPKNS1_15ResourceManagerE+0x24>
    return array->getElement(index, resources);
 8008d14:	687a      	ldr	r2, [r7, #4]
 8008d16:	68b9      	ldr	r1, [r7, #8]
 8008d18:	68f8      	ldr	r0, [r7, #12]
 8008d1a:	f000 f979 	bl	8009010 <_ZNK11ArduinoJson8V730HB226detail9ArrayData10getElementEjPKNS1_15ResourceManagerE>
 8008d1e:	4603      	mov	r3, r0
 8008d20:	bf00      	nop
  }
 8008d22:	4618      	mov	r0, r3
 8008d24:	3710      	adds	r7, #16
 8008d26:	46bd      	mov	sp, r7
 8008d28:	bd80      	pop	{r7, pc}

08008d2a <_ZNK11ArduinoJson8V730HB226detail11VariantData7asArrayEv>:
  const ArrayData* asArray() const {
 8008d2a:	b580      	push	{r7, lr}
 8008d2c:	b082      	sub	sp, #8
 8008d2e:	af00      	add	r7, sp, #0
 8008d30:	6078      	str	r0, [r7, #4]
    return const_cast<VariantData*>(this)->asArray();
 8008d32:	6878      	ldr	r0, [r7, #4]
 8008d34:	f7f9 fe7f 	bl	8002a36 <_ZN11ArduinoJson8V730HB226detail11VariantData7asArrayEv>
 8008d38:	4603      	mov	r3, r0
  }
 8008d3a:	4618      	mov	r0, r3
 8008d3c:	3708      	adds	r7, #8
 8008d3e:	46bd      	mov	sp, r7
 8008d40:	bd80      	pop	{r7, pc}

08008d42 <_ZNK11ArduinoJson8V730HB226detail11VariantData10getElementEjPKNS1_15ResourceManagerE>:
  VariantData* getElement(size_t index,
 8008d42:	b580      	push	{r7, lr}
 8008d44:	b084      	sub	sp, #16
 8008d46:	af00      	add	r7, sp, #0
 8008d48:	60f8      	str	r0, [r7, #12]
 8008d4a:	60b9      	str	r1, [r7, #8]
 8008d4c:	607a      	str	r2, [r7, #4]
    return ArrayData::getElement(asArray(), index, resources);
 8008d4e:	68f8      	ldr	r0, [r7, #12]
 8008d50:	f7ff ffeb 	bl	8008d2a <_ZNK11ArduinoJson8V730HB226detail11VariantData7asArrayEv>
 8008d54:	4603      	mov	r3, r0
 8008d56:	687a      	ldr	r2, [r7, #4]
 8008d58:	68b9      	ldr	r1, [r7, #8]
 8008d5a:	4618      	mov	r0, r3
 8008d5c:	f7ff ffcf 	bl	8008cfe <_ZN11ArduinoJson8V730HB226detail9ArrayData10getElementEPKS2_jPKNS1_15ResourceManagerE>
 8008d60:	4603      	mov	r3, r0
  }
 8008d62:	4618      	mov	r0, r3
 8008d64:	3710      	adds	r7, #16
 8008d66:	46bd      	mov	sp, r7
 8008d68:	bd80      	pop	{r7, pc}

08008d6a <_ZN11ArduinoJson8V730HB226detail11VariantData10getElementEPKS2_jPKNS1_15ResourceManagerE>:
  static VariantData* getElement(const VariantData* var, size_t index,
 8008d6a:	b580      	push	{r7, lr}
 8008d6c:	b084      	sub	sp, #16
 8008d6e:	af00      	add	r7, sp, #0
 8008d70:	60f8      	str	r0, [r7, #12]
 8008d72:	60b9      	str	r1, [r7, #8]
 8008d74:	607a      	str	r2, [r7, #4]
    return var != 0 ? var->getElement(index, resources) : 0;
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d006      	beq.n	8008d8a <_ZN11ArduinoJson8V730HB226detail11VariantData10getElementEPKS2_jPKNS1_15ResourceManagerE+0x20>
 8008d7c:	687a      	ldr	r2, [r7, #4]
 8008d7e:	68b9      	ldr	r1, [r7, #8]
 8008d80:	68f8      	ldr	r0, [r7, #12]
 8008d82:	f7ff ffde 	bl	8008d42 <_ZNK11ArduinoJson8V730HB226detail11VariantData10getElementEjPKNS1_15ResourceManagerE>
 8008d86:	4603      	mov	r3, r0
 8008d88:	e000      	b.n	8008d8c <_ZN11ArduinoJson8V730HB226detail11VariantData10getElementEPKS2_jPKNS1_15ResourceManagerE+0x22>
 8008d8a:	2300      	movs	r3, #0
  }
 8008d8c:	4618      	mov	r0, r3
 8008d8e:	3710      	adds	r7, #16
 8008d90:	46bd      	mov	sp, r7
 8008d92:	bd80      	pop	{r7, pc}

08008d94 <_ZN11ArduinoJson8V730HB226detail11VariantData15getOrAddElementEjPNS1_15ResourceManagerE>:
  VariantData* getOrAddElement(size_t index, ResourceManager* resources) {
 8008d94:	b580      	push	{r7, lr}
 8008d96:	b086      	sub	sp, #24
 8008d98:	af00      	add	r7, sp, #0
 8008d9a:	60f8      	str	r0, [r7, #12]
 8008d9c:	60b9      	str	r1, [r7, #8]
 8008d9e:	607a      	str	r2, [r7, #4]
    auto array = isNull() ? &toArray() : asArray();
 8008da0:	68f8      	ldr	r0, [r7, #12]
 8008da2:	f000 f81d 	bl	8008de0 <_ZNK11ArduinoJson8V730HB226detail11VariantData6isNullEv>
 8008da6:	4603      	mov	r3, r0
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d004      	beq.n	8008db6 <_ZN11ArduinoJson8V730HB226detail11VariantData15getOrAddElementEjPNS1_15ResourceManagerE+0x22>
 8008dac:	68f8      	ldr	r0, [r7, #12]
 8008dae:	f7f9 ff47 	bl	8002c40 <_ZN11ArduinoJson8V730HB226detail11VariantData7toArrayEv>
 8008db2:	4603      	mov	r3, r0
 8008db4:	e003      	b.n	8008dbe <_ZN11ArduinoJson8V730HB226detail11VariantData15getOrAddElementEjPNS1_15ResourceManagerE+0x2a>
 8008db6:	68f8      	ldr	r0, [r7, #12]
 8008db8:	f7f9 fe3d 	bl	8002a36 <_ZN11ArduinoJson8V730HB226detail11VariantData7asArrayEv>
 8008dbc:	4603      	mov	r3, r0
 8008dbe:	617b      	str	r3, [r7, #20]
    if (!array)
 8008dc0:	697b      	ldr	r3, [r7, #20]
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d101      	bne.n	8008dca <_ZN11ArduinoJson8V730HB226detail11VariantData15getOrAddElementEjPNS1_15ResourceManagerE+0x36>
      return nullptr;
 8008dc6:	2300      	movs	r3, #0
 8008dc8:	e006      	b.n	8008dd8 <_ZN11ArduinoJson8V730HB226detail11VariantData15getOrAddElementEjPNS1_15ResourceManagerE+0x44>
    return array->getOrAddElement(index, resources);
 8008dca:	687a      	ldr	r2, [r7, #4]
 8008dcc:	68b9      	ldr	r1, [r7, #8]
 8008dce:	6978      	ldr	r0, [r7, #20]
 8008dd0:	f000 f8cd 	bl	8008f6e <_ZN11ArduinoJson8V730HB226detail9ArrayData15getOrAddElementEjPNS1_15ResourceManagerE>
 8008dd4:	4603      	mov	r3, r0
 8008dd6:	bf00      	nop
  }
 8008dd8:	4618      	mov	r0, r3
 8008dda:	3718      	adds	r7, #24
 8008ddc:	46bd      	mov	sp, r7
 8008dde:	bd80      	pop	{r7, pc}

08008de0 <_ZNK11ArduinoJson8V730HB226detail11VariantData6isNullEv>:
  bool isNull() const {
 8008de0:	b480      	push	{r7}
 8008de2:	b083      	sub	sp, #12
 8008de4:	af00      	add	r7, sp, #0
 8008de6:	6078      	str	r0, [r7, #4]
    return type_ == VariantType::Null;
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	791b      	ldrb	r3, [r3, #4]
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	bf0c      	ite	eq
 8008df0:	2301      	moveq	r3, #1
 8008df2:	2300      	movne	r3, #0
 8008df4:	b2db      	uxtb	r3, r3
  }
 8008df6:	4618      	mov	r0, r3
 8008df8:	370c      	adds	r7, #12
 8008dfa:	46bd      	mov	sp, r7
 8008dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e00:	4770      	bx	lr

08008e02 <_ZNK11ArduinoJson8V730HB226detail11VariantData8isStringEv>:
  bool isString() const {
 8008e02:	b480      	push	{r7}
 8008e04:	b083      	sub	sp, #12
 8008e06:	af00      	add	r7, sp, #0
 8008e08:	6078      	str	r0, [r7, #4]
    return type_ == VariantType::LinkedString ||
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	791b      	ldrb	r3, [r3, #4]
 8008e0e:	2b04      	cmp	r3, #4
 8008e10:	d003      	beq.n	8008e1a <_ZNK11ArduinoJson8V730HB226detail11VariantData8isStringEv+0x18>
           type_ == VariantType::OwnedString;
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	791b      	ldrb	r3, [r3, #4]
    return type_ == VariantType::LinkedString ||
 8008e16:	2b05      	cmp	r3, #5
 8008e18:	d101      	bne.n	8008e1e <_ZNK11ArduinoJson8V730HB226detail11VariantData8isStringEv+0x1c>
 8008e1a:	2301      	movs	r3, #1
 8008e1c:	e000      	b.n	8008e20 <_ZNK11ArduinoJson8V730HB226detail11VariantData8isStringEv+0x1e>
 8008e1e:	2300      	movs	r3, #0
  }
 8008e20:	4618      	mov	r0, r3
 8008e22:	370c      	adds	r7, #12
 8008e24:	46bd      	mov	sp, r7
 8008e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e2a:	4770      	bx	lr

08008e2c <_ZN11ArduinoJson8V730HB226detail11VariantData15setLinkedStringEPKc>:
  void setLinkedString(const char* s) {
 8008e2c:	b480      	push	{r7}
 8008e2e:	b083      	sub	sp, #12
 8008e30:	af00      	add	r7, sp, #0
 8008e32:	6078      	str	r0, [r7, #4]
 8008e34:	6039      	str	r1, [r7, #0]
    type_ = VariantType::LinkedString;
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	2204      	movs	r2, #4
 8008e3a:	711a      	strb	r2, [r3, #4]
    content_.asLinkedString = s;
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	683a      	ldr	r2, [r7, #0]
 8008e40:	601a      	str	r2, [r3, #0]
  }
 8008e42:	bf00      	nop
 8008e44:	370c      	adds	r7, #12
 8008e46:	46bd      	mov	sp, r7
 8008e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e4c:	4770      	bx	lr

08008e4e <_ZN11ArduinoJson8V730HB229ConverterINS0_11JsonVariantEvE8fromJsonES2_>:
  static JsonVariant fromJson(JsonVariant src) {
 8008e4e:	b480      	push	{r7}
 8008e50:	b085      	sub	sp, #20
 8008e52:	af00      	add	r7, sp, #0
 8008e54:	60f8      	str	r0, [r7, #12]
 8008e56:	1d3b      	adds	r3, r7, #4
 8008e58:	e883 0006 	stmia.w	r3, {r1, r2}
    return src;
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	461a      	mov	r2, r3
 8008e60:	1d3b      	adds	r3, r7, #4
 8008e62:	e893 0003 	ldmia.w	r3, {r0, r1}
 8008e66:	e882 0003 	stmia.w	r2, {r0, r1}
  }
 8008e6a:	68f8      	ldr	r0, [r7, #12]
 8008e6c:	3714      	adds	r7, #20
 8008e6e:	46bd      	mov	sp, r7
 8008e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e74:	4770      	bx	lr

08008e76 <_ZNK11ArduinoJson8V730HB229JsonArray6isNullEv>:
    return JsonVariantConst(collectionToVariant(data_), resources_);
  }

  // Returns true if the reference is unbound.
  // https://arduinojson.org/v7/api/jsonarray/isnull/
  bool isNull() const {
 8008e76:	b480      	push	{r7}
 8008e78:	b083      	sub	sp, #12
 8008e7a:	af00      	add	r7, sp, #0
 8008e7c:	6078      	str	r0, [r7, #4]
    return data_ == 0;
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	bf0c      	ite	eq
 8008e86:	2301      	moveq	r3, #1
 8008e88:	2300      	movne	r3, #0
 8008e8a:	b2db      	uxtb	r3, r3
  }
 8008e8c:	4618      	mov	r0, r3
 8008e8e:	370c      	adds	r7, #12
 8008e90:	46bd      	mov	sp, r7
 8008e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e96:	4770      	bx	lr

08008e98 <_ZNK11ArduinoJson8V730HB229JsonArray4sizeEv>:
    return detail::VariantData::nesting(collectionToVariant(data_), resources_);
  }

  // Returns the number of elements in the array.
  // https://arduinojson.org/v7/api/jsonarray/size/
  size_t size() const {
 8008e98:	b580      	push	{r7, lr}
 8008e9a:	b082      	sub	sp, #8
 8008e9c:	af00      	add	r7, sp, #0
 8008e9e:	6078      	str	r0, [r7, #4]
    return data_ ? data_->size(resources_) : 0;
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d00a      	beq.n	8008ebe <_ZNK11ArduinoJson8V730HB229JsonArray4sizeEv+0x26>
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	461a      	mov	r2, r3
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	685b      	ldr	r3, [r3, #4]
 8008eb2:	4619      	mov	r1, r3
 8008eb4:	4610      	mov	r0, r2
 8008eb6:	f000 f8c2 	bl	800903e <_ZNK11ArduinoJson8V730HB226detail14CollectionData4sizeEPKNS1_15ResourceManagerE>
 8008eba:	4603      	mov	r3, r0
 8008ebc:	e000      	b.n	8008ec0 <_ZNK11ArduinoJson8V730HB229JsonArray4sizeEv+0x28>
 8008ebe:	2300      	movs	r3, #0
  }
 8008ec0:	4618      	mov	r0, r3
 8008ec2:	3708      	adds	r7, #8
 8008ec4:	46bd      	mov	sp, r7
 8008ec6:	bd80      	pop	{r7, pc}

08008ec8 <_ZNK11ArduinoJson8V730HB229JsonArray18getResourceManagerEv>:
  size_t memoryUsage() const {
    return 0;
  }

 private:
  detail::ResourceManager* getResourceManager() const {
 8008ec8:	b480      	push	{r7}
 8008eca:	b083      	sub	sp, #12
 8008ecc:	af00      	add	r7, sp, #0
 8008ece:	6078      	str	r0, [r7, #4]
    return resources_;
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	685b      	ldr	r3, [r3, #4]
  }
 8008ed4:	4618      	mov	r0, r3
 8008ed6:	370c      	adds	r7, #12
 8008ed8:	46bd      	mov	sp, r7
 8008eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ede:	4770      	bx	lr

08008ee0 <_ZNK11ArduinoJson8V730HB229JsonArray7getDataEv>:

  detail::VariantData* getData() const {
 8008ee0:	b580      	push	{r7, lr}
 8008ee2:	b082      	sub	sp, #8
 8008ee4:	af00      	add	r7, sp, #0
 8008ee6:	6078      	str	r0, [r7, #4]
    return collectionToVariant(data_);
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	4618      	mov	r0, r3
 8008eee:	f7f9 fd38 	bl	8002962 <_ZN11ArduinoJson8V730HB226detail19collectionToVariantEPNS1_14CollectionDataE>
 8008ef2:	4603      	mov	r3, r0
  }
 8008ef4:	4618      	mov	r0, r3
 8008ef6:	3708      	adds	r7, #8
 8008ef8:	46bd      	mov	sp, r7
 8008efa:	bd80      	pop	{r7, pc}

08008efc <_ZNK11ArduinoJson8V730HB229JsonArray15getOrCreateDataEv>:

  detail::VariantData* getOrCreateData() const {
 8008efc:	b580      	push	{r7, lr}
 8008efe:	b082      	sub	sp, #8
 8008f00:	af00      	add	r7, sp, #0
 8008f02:	6078      	str	r0, [r7, #4]
    return collectionToVariant(data_);
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	4618      	mov	r0, r3
 8008f0a:	f7f9 fd2a 	bl	8002962 <_ZN11ArduinoJson8V730HB226detail19collectionToVariantEPNS1_14CollectionDataE>
 8008f0e:	4603      	mov	r3, r0
  }
 8008f10:	4618      	mov	r0, r3
 8008f12:	3708      	adds	r7, #8
 8008f14:	46bd      	mov	sp, r7
 8008f16:	bd80      	pop	{r7, pc}

08008f18 <_ZNK11ArduinoJson8V730HB226detail9ArrayData2atEjPKNS1_15ResourceManagerE>:
#include <ArduinoJson/Variant/VariantData.hpp>

ARDUINOJSON_BEGIN_PRIVATE_NAMESPACE

inline ArrayData::iterator ArrayData::at(
    size_t index, const ResourceManager* resources) const {
 8008f18:	b580      	push	{r7, lr}
 8008f1a:	b084      	sub	sp, #16
 8008f1c:	af00      	add	r7, sp, #0
 8008f1e:	60f8      	str	r0, [r7, #12]
 8008f20:	60b9      	str	r1, [r7, #8]
 8008f22:	607a      	str	r2, [r7, #4]
 8008f24:	603b      	str	r3, [r7, #0]
  auto it = createIterator(resources);
 8008f26:	68b9      	ldr	r1, [r7, #8]
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	683a      	ldr	r2, [r7, #0]
 8008f2c:	4618      	mov	r0, r3
 8008f2e:	f7fa f9b1 	bl	8003294 <_ZNK11ArduinoJson8V730HB226detail14CollectionData14createIteratorEPKNS1_15ResourceManagerE>
  while (!it.done() && index) {
 8008f32:	e006      	b.n	8008f42 <_ZNK11ArduinoJson8V730HB226detail9ArrayData2atEjPKNS1_15ResourceManagerE+0x2a>
    it.next(resources);
 8008f34:	6839      	ldr	r1, [r7, #0]
 8008f36:	68f8      	ldr	r0, [r7, #12]
 8008f38:	f7fa f989 	bl	800324e <_ZN11ArduinoJson8V730HB226detail18CollectionIterator4nextEPKNS1_15ResourceManagerE>
    --index;
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	3b01      	subs	r3, #1
 8008f40:	607b      	str	r3, [r7, #4]
  while (!it.done() && index) {
 8008f42:	68f8      	ldr	r0, [r7, #12]
 8008f44:	f7f9 fcc4 	bl	80028d0 <_ZNK11ArduinoJson8V730HB226detail18CollectionIterator4doneEv>
 8008f48:	4603      	mov	r3, r0
 8008f4a:	f083 0301 	eor.w	r3, r3, #1
 8008f4e:	b2db      	uxtb	r3, r3
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d004      	beq.n	8008f5e <_ZNK11ArduinoJson8V730HB226detail9ArrayData2atEjPKNS1_15ResourceManagerE+0x46>
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d001      	beq.n	8008f5e <_ZNK11ArduinoJson8V730HB226detail9ArrayData2atEjPKNS1_15ResourceManagerE+0x46>
 8008f5a:	2301      	movs	r3, #1
 8008f5c:	e000      	b.n	8008f60 <_ZNK11ArduinoJson8V730HB226detail9ArrayData2atEjPKNS1_15ResourceManagerE+0x48>
 8008f5e:	2300      	movs	r3, #0
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d1e7      	bne.n	8008f34 <_ZNK11ArduinoJson8V730HB226detail9ArrayData2atEjPKNS1_15ResourceManagerE+0x1c>
  }
  return it;
 8008f64:	bf00      	nop
}
 8008f66:	68f8      	ldr	r0, [r7, #12]
 8008f68:	3710      	adds	r7, #16
 8008f6a:	46bd      	mov	sp, r7
 8008f6c:	bd80      	pop	{r7, pc}

08008f6e <_ZN11ArduinoJson8V730HB226detail9ArrayData15getOrAddElementEjPNS1_15ResourceManagerE>:
  CollectionData::appendOne(slot, resources);
  return slot.ptr();
}

inline VariantData* ArrayData::getOrAddElement(size_t index,
                                               ResourceManager* resources) {
 8008f6e:	b580      	push	{r7, lr}
 8008f70:	b088      	sub	sp, #32
 8008f72:	af00      	add	r7, sp, #0
 8008f74:	60f8      	str	r0, [r7, #12]
 8008f76:	60b9      	str	r1, [r7, #8]
 8008f78:	607a      	str	r2, [r7, #4]
  auto it = createIterator(resources);
 8008f7a:	68f9      	ldr	r1, [r7, #12]
 8008f7c:	f107 0314 	add.w	r3, r7, #20
 8008f80:	687a      	ldr	r2, [r7, #4]
 8008f82:	4618      	mov	r0, r3
 8008f84:	f7fa f986 	bl	8003294 <_ZNK11ArduinoJson8V730HB226detail14CollectionData14createIteratorEPKNS1_15ResourceManagerE>
  while (!it.done() && index > 0) {
 8008f88:	e008      	b.n	8008f9c <_ZN11ArduinoJson8V730HB226detail9ArrayData15getOrAddElementEjPNS1_15ResourceManagerE+0x2e>
    it.next(resources);
 8008f8a:	f107 0314 	add.w	r3, r7, #20
 8008f8e:	6879      	ldr	r1, [r7, #4]
 8008f90:	4618      	mov	r0, r3
 8008f92:	f7fa f95c 	bl	800324e <_ZN11ArduinoJson8V730HB226detail18CollectionIterator4nextEPKNS1_15ResourceManagerE>
    index--;
 8008f96:	68bb      	ldr	r3, [r7, #8]
 8008f98:	3b01      	subs	r3, #1
 8008f9a:	60bb      	str	r3, [r7, #8]
  while (!it.done() && index > 0) {
 8008f9c:	f107 0314 	add.w	r3, r7, #20
 8008fa0:	4618      	mov	r0, r3
 8008fa2:	f7f9 fc95 	bl	80028d0 <_ZNK11ArduinoJson8V730HB226detail18CollectionIterator4doneEv>
 8008fa6:	4603      	mov	r3, r0
 8008fa8:	f083 0301 	eor.w	r3, r3, #1
 8008fac:	b2db      	uxtb	r3, r3
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d004      	beq.n	8008fbc <_ZN11ArduinoJson8V730HB226detail9ArrayData15getOrAddElementEjPNS1_15ResourceManagerE+0x4e>
 8008fb2:	68bb      	ldr	r3, [r7, #8]
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d001      	beq.n	8008fbc <_ZN11ArduinoJson8V730HB226detail9ArrayData15getOrAddElementEjPNS1_15ResourceManagerE+0x4e>
 8008fb8:	2301      	movs	r3, #1
 8008fba:	e000      	b.n	8008fbe <_ZN11ArduinoJson8V730HB226detail9ArrayData15getOrAddElementEjPNS1_15ResourceManagerE+0x50>
 8008fbc:	2300      	movs	r3, #0
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d1e3      	bne.n	8008f8a <_ZN11ArduinoJson8V730HB226detail9ArrayData15getOrAddElementEjPNS1_15ResourceManagerE+0x1c>
  }
  if (it.done())
 8008fc2:	f107 0314 	add.w	r3, r7, #20
 8008fc6:	4618      	mov	r0, r3
 8008fc8:	f7f9 fc82 	bl	80028d0 <_ZNK11ArduinoJson8V730HB226detail18CollectionIterator4doneEv>
 8008fcc:	4603      	mov	r3, r0
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d002      	beq.n	8008fd8 <_ZN11ArduinoJson8V730HB226detail9ArrayData15getOrAddElementEjPNS1_15ResourceManagerE+0x6a>
    index++;
 8008fd2:	68bb      	ldr	r3, [r7, #8]
 8008fd4:	3301      	adds	r3, #1
 8008fd6:	60bb      	str	r3, [r7, #8]
  VariantData* element = it.data();
 8008fd8:	f107 0314 	add.w	r3, r7, #20
 8008fdc:	4618      	mov	r0, r3
 8008fde:	f7f9 fca8 	bl	8002932 <_ZN11ArduinoJson8V730HB226detail18CollectionIterator4dataEv>
 8008fe2:	61f8      	str	r0, [r7, #28]
  while (index > 0) {
 8008fe4:	e00c      	b.n	8009000 <_ZN11ArduinoJson8V730HB226detail9ArrayData15getOrAddElementEjPNS1_15ResourceManagerE+0x92>
    element = addElement(resources);
 8008fe6:	6879      	ldr	r1, [r7, #4]
 8008fe8:	68f8      	ldr	r0, [r7, #12]
 8008fea:	f7fa f8e4 	bl	80031b6 <_ZN11ArduinoJson8V730HB226detail9ArrayData10addElementEPNS1_15ResourceManagerE>
 8008fee:	61f8      	str	r0, [r7, #28]
    if (!element)
 8008ff0:	69fb      	ldr	r3, [r7, #28]
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d101      	bne.n	8008ffa <_ZN11ArduinoJson8V730HB226detail9ArrayData15getOrAddElementEjPNS1_15ResourceManagerE+0x8c>
      return nullptr;
 8008ff6:	2300      	movs	r3, #0
 8008ff8:	e006      	b.n	8009008 <_ZN11ArduinoJson8V730HB226detail9ArrayData15getOrAddElementEjPNS1_15ResourceManagerE+0x9a>
    index--;
 8008ffa:	68bb      	ldr	r3, [r7, #8]
 8008ffc:	3b01      	subs	r3, #1
 8008ffe:	60bb      	str	r3, [r7, #8]
  while (index > 0) {
 8009000:	68bb      	ldr	r3, [r7, #8]
 8009002:	2b00      	cmp	r3, #0
 8009004:	d1ef      	bne.n	8008fe6 <_ZN11ArduinoJson8V730HB226detail9ArrayData15getOrAddElementEjPNS1_15ResourceManagerE+0x78>
  }
  return element;
 8009006:	69fb      	ldr	r3, [r7, #28]
}
 8009008:	4618      	mov	r0, r3
 800900a:	3720      	adds	r7, #32
 800900c:	46bd      	mov	sp, r7
 800900e:	bd80      	pop	{r7, pc}

08009010 <_ZNK11ArduinoJson8V730HB226detail9ArrayData10getElementEjPKNS1_15ResourceManagerE>:

inline VariantData* ArrayData::getElement(
    size_t index, const ResourceManager* resources) const {
 8009010:	b580      	push	{r7, lr}
 8009012:	b086      	sub	sp, #24
 8009014:	af00      	add	r7, sp, #0
 8009016:	60f8      	str	r0, [r7, #12]
 8009018:	60b9      	str	r1, [r7, #8]
 800901a:	607a      	str	r2, [r7, #4]
  return at(index, resources).data();
 800901c:	f107 0010 	add.w	r0, r7, #16
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	68ba      	ldr	r2, [r7, #8]
 8009024:	68f9      	ldr	r1, [r7, #12]
 8009026:	f7ff ff77 	bl	8008f18 <_ZNK11ArduinoJson8V730HB226detail9ArrayData2atEjPKNS1_15ResourceManagerE>
 800902a:	f107 0310 	add.w	r3, r7, #16
 800902e:	4618      	mov	r0, r3
 8009030:	f7f9 fc7f 	bl	8002932 <_ZN11ArduinoJson8V730HB226detail18CollectionIterator4dataEv>
 8009034:	4603      	mov	r3, r0
}
 8009036:	4618      	mov	r0, r3
 8009038:	3718      	adds	r7, #24
 800903a:	46bd      	mov	sp, r7
 800903c:	bd80      	pop	{r7, pc}

0800903e <_ZNK11ArduinoJson8V730HB226detail14CollectionData4sizeEPKNS1_15ResourceManagerE>:
      maxChildNesting = childNesting;
  }
  return maxChildNesting + 1;
}

inline size_t CollectionData::size(const ResourceManager* resources) const {
 800903e:	b580      	push	{r7, lr}
 8009040:	b086      	sub	sp, #24
 8009042:	af00      	add	r7, sp, #0
 8009044:	6078      	str	r0, [r7, #4]
 8009046:	6039      	str	r1, [r7, #0]
  size_t count = 0;
 8009048:	2300      	movs	r3, #0
 800904a:	617b      	str	r3, [r7, #20]
  for (auto it = createIterator(resources); !it.done(); it.next(resources))
 800904c:	f107 030c 	add.w	r3, r7, #12
 8009050:	683a      	ldr	r2, [r7, #0]
 8009052:	6879      	ldr	r1, [r7, #4]
 8009054:	4618      	mov	r0, r3
 8009056:	f7fa f91d 	bl	8003294 <_ZNK11ArduinoJson8V730HB226detail14CollectionData14createIteratorEPKNS1_15ResourceManagerE>
 800905a:	e008      	b.n	800906e <_ZNK11ArduinoJson8V730HB226detail14CollectionData4sizeEPKNS1_15ResourceManagerE+0x30>
    count++;
 800905c:	697b      	ldr	r3, [r7, #20]
 800905e:	3301      	adds	r3, #1
 8009060:	617b      	str	r3, [r7, #20]
  for (auto it = createIterator(resources); !it.done(); it.next(resources))
 8009062:	f107 030c 	add.w	r3, r7, #12
 8009066:	6839      	ldr	r1, [r7, #0]
 8009068:	4618      	mov	r0, r3
 800906a:	f7fa f8f0 	bl	800324e <_ZN11ArduinoJson8V730HB226detail18CollectionIterator4nextEPKNS1_15ResourceManagerE>
 800906e:	f107 030c 	add.w	r3, r7, #12
 8009072:	4618      	mov	r0, r3
 8009074:	f7f9 fc2c 	bl	80028d0 <_ZNK11ArduinoJson8V730HB226detail18CollectionIterator4doneEv>
 8009078:	4603      	mov	r3, r0
 800907a:	f083 0301 	eor.w	r3, r3, #1
 800907e:	b2db      	uxtb	r3, r3
 8009080:	2b00      	cmp	r3, #0
 8009082:	d1eb      	bne.n	800905c <_ZNK11ArduinoJson8V730HB226detail14CollectionData4sizeEPKNS1_15ResourceManagerE+0x1e>
  return count;
 8009084:	697b      	ldr	r3, [r7, #20]
}
 8009086:	4618      	mov	r0, r3
 8009088:	3718      	adds	r7, #24
 800908a:	46bd      	mov	sp, r7
 800908c:	bd80      	pop	{r7, pc}

0800908e <_ZN11ArduinoJson8V730HB229ConverterIPKcvE9checkJsonENS0_16JsonVariantConstE>:
  static const char* fromJson(JsonVariantConst src) {
    auto data = getData(src);
    return data ? data->asString().c_str() : 0;
  }

  static bool checkJson(JsonVariantConst src) {
 800908e:	b580      	push	{r7, lr}
 8009090:	b084      	sub	sp, #16
 8009092:	af00      	add	r7, sp, #0
 8009094:	463b      	mov	r3, r7
 8009096:	e883 0003 	stmia.w	r3, {r0, r1}
    auto data = getData(src);
 800909a:	463b      	mov	r3, r7
 800909c:	4618      	mov	r0, r3
 800909e:	f7fb fc5f 	bl	8004960 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataINS0_16JsonVariantConstEEEDTcldtfp_7getDataEERT_>
 80090a2:	60f8      	str	r0, [r7, #12]
    return data && data->isString();
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d007      	beq.n	80090ba <_ZN11ArduinoJson8V730HB229ConverterIPKcvE9checkJsonENS0_16JsonVariantConstE+0x2c>
 80090aa:	68f8      	ldr	r0, [r7, #12]
 80090ac:	f7ff fea9 	bl	8008e02 <_ZNK11ArduinoJson8V730HB226detail11VariantData8isStringEv>
 80090b0:	4603      	mov	r3, r0
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d001      	beq.n	80090ba <_ZN11ArduinoJson8V730HB229ConverterIPKcvE9checkJsonENS0_16JsonVariantConstE+0x2c>
 80090b6:	2301      	movs	r3, #1
 80090b8:	e000      	b.n	80090bc <_ZN11ArduinoJson8V730HB229ConverterIPKcvE9checkJsonENS0_16JsonVariantConstE+0x2e>
 80090ba:	2300      	movs	r3, #0
  }
 80090bc:	4618      	mov	r0, r3
 80090be:	3710      	adds	r7, #16
 80090c0:	46bd      	mov	sp, r7
 80090c2:	bd80      	pop	{r7, pc}

080090c4 <_ZNSt15__uniq_ptr_dataI14CommsInterfaceSt14default_deleteIS0_ELb1ELb1EEaSEOS3_>:
	    bool = is_move_assignable<_Dp>::value>
    struct __uniq_ptr_data : __uniq_ptr_impl<_Tp, _Dp>
    {
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
      __uniq_ptr_data(__uniq_ptr_data&&) = default;
      __uniq_ptr_data& operator=(__uniq_ptr_data&&) = default;
 80090c4:	b580      	push	{r7, lr}
 80090c6:	b082      	sub	sp, #8
 80090c8:	af00      	add	r7, sp, #0
 80090ca:	6078      	str	r0, [r7, #4]
 80090cc:	6039      	str	r1, [r7, #0]
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	683a      	ldr	r2, [r7, #0]
 80090d2:	4611      	mov	r1, r2
 80090d4:	4618      	mov	r0, r3
 80090d6:	f000 fc38 	bl	800994a <_ZNSt15__uniq_ptr_implI14CommsInterfaceSt14default_deleteIS0_EEaSEOS3_>
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	4618      	mov	r0, r3
 80090de:	3708      	adds	r7, #8
 80090e0:	46bd      	mov	sp, r7
 80090e2:	bd80      	pop	{r7, pc}

080090e4 <_ZNSt10unique_ptrI14CommsInterfaceSt14default_deleteIS0_EEaSEOS3_>:

      /** @brief Move assignment operator.
       *
       * Invokes the deleter if this object owns a pointer.
       */
      unique_ptr& operator=(unique_ptr&&) = default;
 80090e4:	b580      	push	{r7, lr}
 80090e6:	b082      	sub	sp, #8
 80090e8:	af00      	add	r7, sp, #0
 80090ea:	6078      	str	r0, [r7, #4]
 80090ec:	6039      	str	r1, [r7, #0]
 80090ee:	683a      	ldr	r2, [r7, #0]
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	4611      	mov	r1, r2
 80090f4:	4618      	mov	r0, r3
 80090f6:	f7ff ffe5 	bl	80090c4 <_ZNSt15__uniq_ptr_dataI14CommsInterfaceSt14default_deleteIS0_ELb1ELb1EEaSEOS3_>
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	4618      	mov	r0, r3
 80090fe:	3708      	adds	r7, #8
 8009100:	46bd      	mov	sp, r7
 8009102:	bd80      	pop	{r7, pc}

08009104 <_ZN12CommsHandler12setInterfaceESt10unique_ptrI14CommsInterfaceSt14default_deleteIS1_EE>:
	virtual ~CommsHandler();

	void update(void) override;
	void tasks();

    void setInterface(std::unique_ptr<CommsInterface> commsInterface) {
 8009104:	b580      	push	{r7, lr}
 8009106:	b082      	sub	sp, #8
 8009108:	af00      	add	r7, sp, #0
 800910a:	6078      	str	r0, [r7, #4]
 800910c:	6039      	str	r1, [r7, #0]
        interface = std::move(commsInterface);
 800910e:	6838      	ldr	r0, [r7, #0]
 8009110:	f000 fc10 	bl	8009934 <_ZSt4moveIRSt10unique_ptrI14CommsInterfaceSt14default_deleteIS1_EEEONSt16remove_referenceIT_E4typeEOS7_>
 8009114:	4602      	mov	r2, r0
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	3318      	adds	r3, #24
 800911a:	4611      	mov	r1, r2
 800911c:	4618      	mov	r0, r3
 800911e:	f7ff ffe1 	bl	80090e4 <_ZNSt10unique_ptrI14CommsInterfaceSt14default_deleteIS0_EEaSEOS3_>
    }
 8009122:	bf00      	nop
 8009124:	3708      	adds	r7, #8
 8009126:	46bd      	mov	sp, r7
 8009128:	bd80      	pop	{r7, pc}

0800912a <_ZNSt15__uniq_ptr_dataI17JsonConfigHandlerSt14default_deleteIS0_ELb1ELb1EEaSEOS3_>:
      __uniq_ptr_data& operator=(__uniq_ptr_data&&) = default;
 800912a:	b580      	push	{r7, lr}
 800912c:	b082      	sub	sp, #8
 800912e:	af00      	add	r7, sp, #0
 8009130:	6078      	str	r0, [r7, #4]
 8009132:	6039      	str	r1, [r7, #0]
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	683a      	ldr	r2, [r7, #0]
 8009138:	4611      	mov	r1, r2
 800913a:	4618      	mov	r0, r3
 800913c:	f000 fd20 	bl	8009b80 <_ZNSt15__uniq_ptr_implI17JsonConfigHandlerSt14default_deleteIS0_EEaSEOS3_>
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	4618      	mov	r0, r3
 8009144:	3708      	adds	r7, #8
 8009146:	46bd      	mov	sp, r7
 8009148:	bd80      	pop	{r7, pc}

0800914a <_ZNSt10unique_ptrI17JsonConfigHandlerSt14default_deleteIS0_EEaSEOS3_>:
      unique_ptr& operator=(unique_ptr&&) = default;
 800914a:	b580      	push	{r7, lr}
 800914c:	b082      	sub	sp, #8
 800914e:	af00      	add	r7, sp, #0
 8009150:	6078      	str	r0, [r7, #4]
 8009152:	6039      	str	r1, [r7, #0]
 8009154:	683a      	ldr	r2, [r7, #0]
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	4611      	mov	r1, r2
 800915a:	4618      	mov	r0, r3
 800915c:	f7ff ffe5 	bl	800912a <_ZNSt15__uniq_ptr_dataI17JsonConfigHandlerSt14default_deleteIS0_ELb1ELb1EEaSEOS3_>
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	4618      	mov	r0, r3
 8009164:	3708      	adds	r7, #8
 8009166:	46bd      	mov	sp, r7
 8009168:	bd80      	pop	{r7, pc}

0800916a <_ZNSt15__uniq_ptr_dataI12CommsHandlerSt14default_deleteIS0_ELb1ELb1EEaSEOS3_>:
      __uniq_ptr_data& operator=(__uniq_ptr_data&&) = default;
 800916a:	b580      	push	{r7, lr}
 800916c:	b082      	sub	sp, #8
 800916e:	af00      	add	r7, sp, #0
 8009170:	6078      	str	r0, [r7, #4]
 8009172:	6039      	str	r1, [r7, #0]
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	683a      	ldr	r2, [r7, #0]
 8009178:	4611      	mov	r1, r2
 800917a:	4618      	mov	r0, r3
 800917c:	f000 fd59 	bl	8009c32 <_ZNSt15__uniq_ptr_implI12CommsHandlerSt14default_deleteIS0_EEaSEOS3_>
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	4618      	mov	r0, r3
 8009184:	3708      	adds	r7, #8
 8009186:	46bd      	mov	sp, r7
 8009188:	bd80      	pop	{r7, pc}

0800918a <_ZNSt10unique_ptrI12CommsHandlerSt14default_deleteIS0_EEaSEOS3_>:
      unique_ptr& operator=(unique_ptr&&) = default;
 800918a:	b580      	push	{r7, lr}
 800918c:	b082      	sub	sp, #8
 800918e:	af00      	add	r7, sp, #0
 8009190:	6078      	str	r0, [r7, #4]
 8009192:	6039      	str	r1, [r7, #0]
 8009194:	683a      	ldr	r2, [r7, #0]
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	4611      	mov	r1, r2
 800919a:	4618      	mov	r0, r3
 800919c:	f7ff ffe5 	bl	800916a <_ZNSt15__uniq_ptr_dataI12CommsHandlerSt14default_deleteIS0_ELb1ELb1EEaSEOS3_>
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	4618      	mov	r0, r3
 80091a4:	3708      	adds	r7, #8
 80091a6:	46bd      	mov	sp, r7
 80091a8:	bd80      	pop	{r7, pc}

080091aa <_ZNSt15__uniq_ptr_dataI9pruThreadSt14default_deleteIS0_ELb1ELb1EEaSEOS3_>:
      __uniq_ptr_data& operator=(__uniq_ptr_data&&) = default;
 80091aa:	b580      	push	{r7, lr}
 80091ac:	b082      	sub	sp, #8
 80091ae:	af00      	add	r7, sp, #0
 80091b0:	6078      	str	r0, [r7, #4]
 80091b2:	6039      	str	r1, [r7, #0]
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	683a      	ldr	r2, [r7, #0]
 80091b8:	4611      	mov	r1, r2
 80091ba:	4618      	mov	r0, r3
 80091bc:	f000 fe0c 	bl	8009dd8 <_ZNSt15__uniq_ptr_implI9pruThreadSt14default_deleteIS0_EEaSEOS3_>
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	4618      	mov	r0, r3
 80091c4:	3708      	adds	r7, #8
 80091c6:	46bd      	mov	sp, r7
 80091c8:	bd80      	pop	{r7, pc}

080091ca <_ZNSt10unique_ptrI9pruThreadSt14default_deleteIS0_EEaSEOS3_>:
      unique_ptr& operator=(unique_ptr&&) = default;
 80091ca:	b580      	push	{r7, lr}
 80091cc:	b082      	sub	sp, #8
 80091ce:	af00      	add	r7, sp, #0
 80091d0:	6078      	str	r0, [r7, #4]
 80091d2:	6039      	str	r1, [r7, #0]
 80091d4:	683a      	ldr	r2, [r7, #0]
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	4611      	mov	r1, r2
 80091da:	4618      	mov	r0, r3
 80091dc:	f7ff ffe5 	bl	80091aa <_ZNSt15__uniq_ptr_dataI9pruThreadSt14default_deleteIS0_ELb1ELb1EEaSEOS3_>
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	4618      	mov	r0, r3
 80091e4:	3708      	adds	r7, #8
 80091e6:	46bd      	mov	sp, r7
 80091e8:	bd80      	pop	{r7, pc}
	...

080091ec <_ZN6RemoraC1Ev>:
// unions for TX and RX data
__attribute__((section(".DmaSection"))) volatile txData_t txData;
__attribute__((section(".DmaSection"))) volatile rxData_t rxData;


Remora::Remora() :
 80091ec:	b590      	push	{r4, r7, lr}
 80091ee:	b091      	sub	sp, #68	@ 0x44
 80091f0:	af02      	add	r7, sp, #8
 80091f2:	6078      	str	r0, [r7, #4]
	baseFreq(Config::pruBaseFreq),
	servoFreq(Config::pruServoFreq),
	commsFreq(Config::pruCommsFreq)
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	4618      	mov	r0, r3
 80091f8:	f000 fbdd 	bl	80099b6 <_ZNSt10unique_ptrI17JsonConfigHandlerSt14default_deleteIS0_EEC1IS2_vEEv>
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	3304      	adds	r3, #4
 8009200:	4618      	mov	r0, r3
 8009202:	f000 fc24 	bl	8009a4e <_ZNSt10unique_ptrI12CommsHandlerSt14default_deleteIS0_EEC1IS2_vEEv>
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	3308      	adds	r3, #8
 800920a:	4618      	mov	r0, r3
 800920c:	f000 fc6b 	bl	8009ae6 <_ZNSt10unique_ptrI9pruThreadSt14default_deleteIS0_EEC1IS2_vEEv>
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	330c      	adds	r3, #12
 8009214:	4618      	mov	r0, r3
 8009216:	f000 fc66 	bl	8009ae6 <_ZNSt10unique_ptrI9pruThreadSt14default_deleteIS0_EEC1IS2_vEEv>
	baseFreq(Config::pruBaseFreq),
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	f649 4240 	movw	r2, #40000	@ 0x9c40
 8009220:	619a      	str	r2, [r3, #24]
	servoFreq(Config::pruServoFreq),
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8009228:	61da      	str	r2, [r3, #28]
	commsFreq(Config::pruCommsFreq)
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	f44f 4261 	mov.w	r2, #57600	@ 0xe100
 8009230:	621a      	str	r2, [r3, #32]
{

	configHandler = std::make_unique<JsonConfigHandler>(this);
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	613b      	str	r3, [r7, #16]
 8009236:	f107 030c 	add.w	r3, r7, #12
 800923a:	f107 0210 	add.w	r2, r7, #16
 800923e:	4611      	mov	r1, r2
 8009240:	4618      	mov	r0, r3
 8009242:	f000 fc82 	bl	8009b4a <_ZSt11make_uniqueI17JsonConfigHandlerJP6RemoraEENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	f107 020c 	add.w	r2, r7, #12
 800924c:	4611      	mov	r1, r2
 800924e:	4618      	mov	r0, r3
 8009250:	f7ff ff7b 	bl	800914a <_ZNSt10unique_ptrI17JsonConfigHandlerSt14default_deleteIS0_EEaSEOS3_>
 8009254:	f107 030c 	add.w	r3, r7, #12
 8009258:	4618      	mov	r0, r3
 800925a:	f000 fbbc 	bl	80099d6 <_ZNSt10unique_ptrI17JsonConfigHandlerSt14default_deleteIS0_EED1Ev>

    ptrTxData = &txData;
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	4a50      	ldr	r2, [pc, #320]	@ (80093a4 <_ZN6RemoraC1Ev+0x1b8>)
 8009262:	611a      	str	r2, [r3, #16]
    ptrRxData = &rxData;
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	4a50      	ldr	r2, [pc, #320]	@ (80093a8 <_ZN6RemoraC1Ev+0x1bc>)
 8009268:	615a      	str	r2, [r3, #20]

	auto spiComms = std::make_unique<SPIComms>(ptrRxData, ptrTxData, SPI1);
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	f103 0114 	add.w	r1, r3, #20
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	f103 0210 	add.w	r2, r3, #16
 8009276:	4b4d      	ldr	r3, [pc, #308]	@ (80093ac <_ZN6RemoraC1Ev+0x1c0>)
 8009278:	617b      	str	r3, [r7, #20]
 800927a:	f107 0008 	add.w	r0, r7, #8
 800927e:	f107 0314 	add.w	r3, r7, #20
 8009282:	f000 fc99 	bl	8009bb8 <_ZSt11make_uniqueI8SPICommsJRPV8rxData_tRPV8txData_tP11SPI_TypeDefEENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>

	comms = std::make_unique<CommsHandler>();
 8009286:	f107 0318 	add.w	r3, r7, #24
 800928a:	4618      	mov	r0, r3
 800928c:	f000 fcbd 	bl	8009c0a <_ZSt11make_uniqueI12CommsHandlerJEENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	3304      	adds	r3, #4
 8009294:	f107 0218 	add.w	r2, r7, #24
 8009298:	4611      	mov	r1, r2
 800929a:	4618      	mov	r0, r3
 800929c:	f7ff ff75 	bl	800918a <_ZNSt10unique_ptrI12CommsHandlerSt14default_deleteIS0_EEaSEOS3_>
 80092a0:	f107 0318 	add.w	r3, r7, #24
 80092a4:	4618      	mov	r0, r3
 80092a6:	f000 fbe2 	bl	8009a6e <_ZNSt10unique_ptrI12CommsHandlerSt14default_deleteIS0_EED1Ev>
	comms->setInterface(std::move(spiComms));
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	3304      	adds	r3, #4
 80092ae:	4618      	mov	r0, r3
 80092b0:	f000 fcdb 	bl	8009c6a <_ZNKSt10unique_ptrI12CommsHandlerSt14default_deleteIS0_EEptEv>
 80092b4:	4604      	mov	r4, r0
 80092b6:	f107 0308 	add.w	r3, r7, #8
 80092ba:	4618      	mov	r0, r3
 80092bc:	f000 fce1 	bl	8009c82 <_ZSt4moveIRSt10unique_ptrI8SPICommsSt14default_deleteIS1_EEEONSt16remove_referenceIT_E4typeEOS7_>
 80092c0:	4602      	mov	r2, r0
 80092c2:	f107 031c 	add.w	r3, r7, #28
 80092c6:	4611      	mov	r1, r2
 80092c8:	4618      	mov	r0, r3
 80092ca:	f000 fcf6 	bl	8009cba <_ZNSt10unique_ptrI14CommsInterfaceSt14default_deleteIS0_EEC1I8SPICommsS1_IS5_EvEEOS_IT_T0_E>
 80092ce:	f107 031c 	add.w	r3, r7, #28
 80092d2:	4619      	mov	r1, r3
 80092d4:	4620      	mov	r0, r4
 80092d6:	f7ff ff15 	bl	8009104 <_ZN12CommsHandler12setInterfaceESt10unique_ptrI14CommsInterfaceSt14default_deleteIS1_EE>
 80092da:	f107 031c 	add.w	r3, r7, #28
 80092de:	4618      	mov	r0, r3
 80092e0:	f000 fd07 	bl	8009cf2 <_ZNSt10unique_ptrI14CommsInterfaceSt14default_deleteIS0_EED1Ev>
	comms->init();
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	3304      	adds	r3, #4
 80092e8:	4618      	mov	r0, r3
 80092ea:	f000 fcbe 	bl	8009c6a <_ZNKSt10unique_ptrI12CommsHandlerSt14default_deleteIS0_EEptEv>
 80092ee:	4603      	mov	r3, r0
 80092f0:	4618      	mov	r0, r3
 80092f2:	f004 fa3c 	bl	800d76e <_ZN12CommsHandler4initEv>
	comms->start();
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	3304      	adds	r3, #4
 80092fa:	4618      	mov	r0, r3
 80092fc:	f000 fcb5 	bl	8009c6a <_ZNKSt10unique_ptrI12CommsHandlerSt14default_deleteIS0_EEptEv>
 8009300:	4603      	mov	r3, r0
 8009302:	4618      	mov	r0, r3
 8009304:	f004 fa61 	bl	800d7ca <_ZN12CommsHandler5startEv>
	NVIC_SetPriority(TIM4_IRQn, COMMS_THREAD_IRQ_PRIORITY);
	*/

    baseThread = make_unique<pruThread>(
    									"Base",
										TIM3,
 8009308:	4b29      	ldr	r3, [pc, #164]	@ (80093b0 <_ZN6RemoraC1Ev+0x1c4>)
 800930a:	627b      	str	r3, [r7, #36]	@ 0x24
										TIM3_IRQn,
 800930c:	231d      	movs	r3, #29
 800930e:	857b      	strh	r3, [r7, #42]	@ 0x2a
										baseFreq,
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	3318      	adds	r3, #24
    baseThread = make_unique<pruThread>(
 8009314:	f107 0020 	add.w	r0, r7, #32
 8009318:	f107 012a 	add.w	r1, r7, #42	@ 0x2a
 800931c:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8009320:	4c24      	ldr	r4, [pc, #144]	@ (80093b4 <_ZN6RemoraC1Ev+0x1c8>)
 8009322:	9401      	str	r4, [sp, #4]
 8009324:	9300      	str	r3, [sp, #0]
 8009326:	460b      	mov	r3, r1
 8009328:	4923      	ldr	r1, [pc, #140]	@ (80093b8 <_ZN6RemoraC1Ev+0x1cc>)
 800932a:	f000 fd04 	bl	8009d36 <_ZSt11make_uniqueI9pruThreadJRA5_KcP11TIM_TypeDef9IRQn_TypeRmRKmEENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>
										Config::baseThreadIrqPriority
										);
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	3308      	adds	r3, #8
 8009332:	f107 0220 	add.w	r2, r7, #32
 8009336:	4611      	mov	r1, r2
 8009338:	4618      	mov	r0, r3
 800933a:	f7ff ff46 	bl	80091ca <_ZNSt10unique_ptrI9pruThreadSt14default_deleteIS0_EEaSEOS3_>
    baseThread = make_unique<pruThread>(
 800933e:	f107 0320 	add.w	r3, r7, #32
 8009342:	4618      	mov	r0, r3
 8009344:	f000 fbdf 	bl	8009b06 <_ZNSt10unique_ptrI9pruThreadSt14default_deleteIS0_EED1Ev>
    servoThread = make_unique<pruThread>(
    									"Servo",
										TIM2,
 8009348:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800934c:	633b      	str	r3, [r7, #48]	@ 0x30
										TIM2_IRQn,
 800934e:	231c      	movs	r3, #28
 8009350:	86fb      	strh	r3, [r7, #54]	@ 0x36
										servoFreq,
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	331c      	adds	r3, #28
    servoThread = make_unique<pruThread>(
 8009356:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 800935a:	f107 0136 	add.w	r1, r7, #54	@ 0x36
 800935e:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8009362:	4c16      	ldr	r4, [pc, #88]	@ (80093bc <_ZN6RemoraC1Ev+0x1d0>)
 8009364:	9401      	str	r4, [sp, #4]
 8009366:	9300      	str	r3, [sp, #0]
 8009368:	460b      	mov	r3, r1
 800936a:	4915      	ldr	r1, [pc, #84]	@ (80093c0 <_ZN6RemoraC1Ev+0x1d4>)
 800936c:	f000 fd50 	bl	8009e10 <_ZSt11make_uniqueI9pruThreadJRA6_KcP11TIM_TypeDef9IRQn_TypeRmRKmEENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>
										Config::servoThreadIrqPriority
										);
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	330c      	adds	r3, #12
 8009374:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8009378:	4611      	mov	r1, r2
 800937a:	4618      	mov	r0, r3
 800937c:	f7ff ff25 	bl	80091ca <_ZNSt10unique_ptrI9pruThreadSt14default_deleteIS0_EEaSEOS3_>
    servoThread = make_unique<pruThread>(
 8009380:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8009384:	4618      	mov	r0, r3
 8009386:	f000 fbbe 	bl	8009b06 <_ZNSt10unique_ptrI9pruThreadSt14default_deleteIS0_EED1Ev>

    loadModules();
 800938a:	6878      	ldr	r0, [r7, #4]
 800938c:	f000 f85c 	bl	8009448 <_ZN6Remora11loadModulesEv>
    while (1) {
    	comms->tasks();
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	3304      	adds	r3, #4
 8009394:	4618      	mov	r0, r3
 8009396:	f000 fc68 	bl	8009c6a <_ZNKSt10unique_ptrI12CommsHandlerSt14default_deleteIS0_EEptEv>
 800939a:	4603      	mov	r3, r0
 800939c:	4618      	mov	r0, r3
 800939e:	f004 fa27 	bl	800d7f0 <_ZN12CommsHandler5tasksEv>
 80093a2:	e7f5      	b.n	8009390 <_ZN6RemoraC1Ev+0x1a4>
 80093a4:	30000080 	.word	0x30000080
 80093a8:	300000c0 	.word	0x300000c0
 80093ac:	40013000 	.word	0x40013000
 80093b0:	40000400 	.word	0x40000400
 80093b4:	0802054c 	.word	0x0802054c
 80093b8:	0802005c 	.word	0x0802005c
 80093bc:	08020550 	.word	0x08020550
 80093c0:	08020064 	.word	0x08020064

080093c4 <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EED1Ev>:
	  __r._M_ptr = nullptr;
	}

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80093c4:	b580      	push	{r7, lr}
 80093c6:	b082      	sub	sp, #8
 80093c8:	af00      	add	r7, sp, #0
 80093ca:	6078      	str	r0, [r7, #4]
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	3304      	adds	r3, #4
 80093d0:	4618      	mov	r0, r3
 80093d2:	f000 fdb3 	bl	8009f3c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	4618      	mov	r0, r3
 80093da:	3708      	adds	r7, #8
 80093dc:	46bd      	mov	sp, r7
 80093de:	bd80      	pop	{r7, pc}

080093e0 <_ZNSt10shared_ptrI6ModuleED1Ev>:
   * the stored pointer returned by `get()`, not the owned pointer.
   * To test whether two `shared_ptr` objects share ownership of the same
   * pointer see `std::shared_ptr::owner_before` and `std::owner_less`.
  */
  template<typename _Tp>
    class shared_ptr : public __shared_ptr<_Tp>
 80093e0:	b580      	push	{r7, lr}
 80093e2:	b082      	sub	sp, #8
 80093e4:	af00      	add	r7, sp, #0
 80093e6:	6078      	str	r0, [r7, #4]
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	4618      	mov	r0, r3
 80093ec:	f7ff ffea 	bl	80093c4 <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	4618      	mov	r0, r3
 80093f4:	3708      	adds	r7, #8
 80093f6:	46bd      	mov	sp, r7
 80093f8:	bd80      	pop	{r7, pc}

080093fa <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EEC1ERKS3_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
 80093fa:	b580      	push	{r7, lr}
 80093fc:	b082      	sub	sp, #8
 80093fe:	af00      	add	r7, sp, #0
 8009400:	6078      	str	r0, [r7, #4]
 8009402:	6039      	str	r1, [r7, #0]
 8009404:	683b      	ldr	r3, [r7, #0]
 8009406:	681a      	ldr	r2, [r3, #0]
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	601a      	str	r2, [r3, #0]
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	1d1a      	adds	r2, r3, #4
 8009410:	683b      	ldr	r3, [r7, #0]
 8009412:	3304      	adds	r3, #4
 8009414:	4619      	mov	r1, r3
 8009416:	4610      	mov	r0, r2
 8009418:	f000 fdba 	bl	8009f90 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	4618      	mov	r0, r3
 8009420:	3708      	adds	r7, #8
 8009422:	46bd      	mov	sp, r7
 8009424:	bd80      	pop	{r7, pc}

08009426 <_ZNSt10shared_ptrI6ModuleEC1ERKS1_>:
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
 8009426:	b580      	push	{r7, lr}
 8009428:	b082      	sub	sp, #8
 800942a:	af00      	add	r7, sp, #0
 800942c:	6078      	str	r0, [r7, #4]
 800942e:	6039      	str	r1, [r7, #0]
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	683a      	ldr	r2, [r7, #0]
 8009434:	4611      	mov	r1, r2
 8009436:	4618      	mov	r0, r3
 8009438:	f7ff ffdf 	bl	80093fa <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EEC1ERKS3_>
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	4618      	mov	r0, r3
 8009440:	3708      	adds	r7, #8
 8009442:	46bd      	mov	sp, r7
 8009444:	bd80      	pop	{r7, pc}
	...

08009448 <_ZN6Remora11loadModulesEv>:
    }
}

void Remora::loadModules() {
 8009448:	b5b0      	push	{r4, r5, r7, lr}
 800944a:	f5ad 7d04 	sub.w	sp, sp, #528	@ 0x210
 800944e:	af02      	add	r7, sp, #8
 8009450:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8009454:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8009458:	6018      	str	r0, [r3, #0]
    ModuleFactory* factory = ModuleFactory::getInstance();
 800945a:	f004 ff09 	bl	800e270 <_ZN13ModuleFactory11getInstanceEv>
 800945e:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
    JsonArray modules = configHandler->getModules();
 8009462:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8009466:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	4618      	mov	r0, r3
 800946e:	f000 fd20 	bl	8009eb2 <_ZNKSt10unique_ptrI17JsonConfigHandlerSt14default_deleteIS0_EEptEv>
 8009472:	4602      	mov	r2, r0
 8009474:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8009478:	f5a3 73f8 	sub.w	r3, r3, #496	@ 0x1f0
 800947c:	4611      	mov	r1, r2
 800947e:	4618      	mov	r0, r3
 8009480:	f7fb f840 	bl	8004504 <_ZN17JsonConfigHandler10getModulesEv>
    if (modules.isNull()) {
 8009484:	f107 0318 	add.w	r3, r7, #24
 8009488:	4618      	mov	r0, r3
 800948a:	f7ff fcf4 	bl	8008e76 <_ZNK11ArduinoJson8V730HB229JsonArray6isNullEv>
      //printf something here
    }

    for (size_t i = 0; i < modules.size(); i++) {
 800948e:	2300      	movs	r3, #0
 8009490:	f8c7 3204 	str.w	r3, [r7, #516]	@ 0x204
 8009494:	e236      	b.n	8009904 <_ZN6Remora11loadModulesEv+0x4bc>
        //if (modules[i].containsKey("Thread") && modules[i].containsKey("Type")) {
    	if (modules[i]["Thread"].is<const char*>() && modules[i]["Type"].is<const char*>()) {
 8009496:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800949a:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 800949e:	f107 0118 	add.w	r1, r7, #24
 80094a2:	f8d7 2204 	ldr.w	r2, [r7, #516]	@ 0x204
 80094a6:	4618      	mov	r0, r3
 80094a8:	f000 fd0f 	bl	8009eca <_ZNK11ArduinoJson8V730HB229JsonArrayixIjLi0EEENS0_6detail12ElementProxyIS1_EET_>
 80094ac:	f107 0420 	add.w	r4, r7, #32

template <typename TDerived>
template <typename TString, enable_if_t<IsString<TString>::value, int>>
inline MemberProxy<TDerived, AdaptedString<TString>>
VariantRefBase<TDerived>::operator[](const TString& key) const {
  return {derived(), adaptString(key)};
 80094b0:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80094b4:	4618      	mov	r0, r3
 80094b6:	f001 f97e 	bl	800a7b6 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_12ElementProxyINS0_9JsonArrayEEEE7derivedEv>
 80094ba:	4602      	mov	r2, r0
 80094bc:	f507 73ae 	add.w	r3, r7, #348	@ 0x15c
 80094c0:	4611      	mov	r1, r2
 80094c2:	4618      	mov	r0, r3
 80094c4:	f001 f982 	bl	800a7cc <_ZN11ArduinoJson8V730HB226detail12ElementProxyINS0_9JsonArrayEEC1ERKS4_>
 80094c8:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 80094cc:	49e0      	ldr	r1, [pc, #896]	@ (8009850 <_ZN6Remora11loadModulesEv+0x408>)
 80094ce:	4618      	mov	r0, r3
 80094d0:	f7fc f8ab 	bl	800562a <_ZN11ArduinoJson8V730HB226detail11adaptStringIRA7_KcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES9_NS1_9remove_cvINS1_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEOS9_>
 80094d4:	f507 71ae 	add.w	r1, r7, #348	@ 0x15c
 80094d8:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 80094dc:	9300      	str	r3, [sp, #0]
 80094de:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 80094e2:	cb0c      	ldmia	r3, {r2, r3}
 80094e4:	4620      	mov	r0, r4
 80094e6:	f001 f989 	bl	800a7fc <_ZN11ArduinoJson8V730HB226detail11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEC1ES5_S6_>
 80094ea:	f107 0320 	add.w	r3, r7, #32
 80094ee:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
 80094f2:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 80094f6:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    return ArduinoJson::JsonVariantConst(getData(), getResourceManager());
 80094fa:	f8d7 01ec 	ldr.w	r0, [r7, #492]	@ 0x1ec
 80094fe:	f001 fd7a 	bl	800aff6 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEE7getDataEv>
 8009502:	4604      	mov	r4, r0
 8009504:	f8d7 01ec 	ldr.w	r0, [r7, #492]	@ 0x1ec
 8009508:	f001 fd85 	bl	800b016 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEE18getResourceManagerEv>
 800950c:	4602      	mov	r2, r0
 800950e:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8009512:	4621      	mov	r1, r4
 8009514:	4618      	mov	r0, r3
 8009516:	f7f9 fca4 	bl	8002e62 <_ZN11ArduinoJson8V730HB2216JsonVariantConstC1EPKNS0_6detail11VariantDataEPKNS2_15ResourceManagerE>
    return getVariantConst();
 800951a:	bf00      	nop
  return Converter<T>::checkJson(getVariant<variant_type>());
 800951c:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8009520:	e893 0003 	ldmia.w	r3, {r0, r1}
 8009524:	f7ff fdb3 	bl	800908e <_ZN11ArduinoJson8V730HB229ConverterIPKcvE9checkJsonENS0_16JsonVariantConstE>
 8009528:	4603      	mov	r3, r0
 800952a:	bf00      	nop
 800952c:	2b00      	cmp	r3, #0
 800952e:	d04e      	beq.n	80095ce <_ZN6Remora11loadModulesEv+0x186>
 8009530:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8009534:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8009538:	f107 0118 	add.w	r1, r7, #24
 800953c:	f8d7 2204 	ldr.w	r2, [r7, #516]	@ 0x204
 8009540:	4618      	mov	r0, r3
 8009542:	f000 fcc2 	bl	8009eca <_ZNK11ArduinoJson8V730HB229JsonArrayixIjLi0EEENS0_6detail12ElementProxyIS1_EET_>
 8009546:	f107 0450 	add.w	r4, r7, #80	@ 0x50
  return {derived(), adaptString(key)};
 800954a:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 800954e:	4618      	mov	r0, r3
 8009550:	f001 f931 	bl	800a7b6 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_12ElementProxyINS0_9JsonArrayEEEE7derivedEv>
 8009554:	4602      	mov	r2, r0
 8009556:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 800955a:	4611      	mov	r1, r2
 800955c:	4618      	mov	r0, r3
 800955e:	f001 f935 	bl	800a7cc <_ZN11ArduinoJson8V730HB226detail12ElementProxyINS0_9JsonArrayEEC1ERKS4_>
 8009562:	f507 73ba 	add.w	r3, r7, #372	@ 0x174
 8009566:	49bb      	ldr	r1, [pc, #748]	@ (8009854 <_ZN6Remora11loadModulesEv+0x40c>)
 8009568:	4618      	mov	r0, r3
 800956a:	f7ff fab9 	bl	8008ae0 <_ZN11ArduinoJson8V730HB226detail11adaptStringIRA5_KcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES9_NS1_9remove_cvINS1_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEOS9_>
 800956e:	f507 71c0 	add.w	r1, r7, #384	@ 0x180
 8009572:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 8009576:	9300      	str	r3, [sp, #0]
 8009578:	f507 73ba 	add.w	r3, r7, #372	@ 0x174
 800957c:	cb0c      	ldmia	r3, {r2, r3}
 800957e:	4620      	mov	r0, r4
 8009580:	f001 f93c 	bl	800a7fc <_ZN11ArduinoJson8V730HB226detail11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEC1ES5_S6_>
 8009584:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8009588:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
 800958c:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8009590:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
    return ArduinoJson::JsonVariantConst(getData(), getResourceManager());
 8009594:	f8d7 01e4 	ldr.w	r0, [r7, #484]	@ 0x1e4
 8009598:	f001 fd2d 	bl	800aff6 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEE7getDataEv>
 800959c:	4604      	mov	r4, r0
 800959e:	f8d7 01e4 	ldr.w	r0, [r7, #484]	@ 0x1e4
 80095a2:	f001 fd38 	bl	800b016 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEE18getResourceManagerEv>
 80095a6:	4602      	mov	r2, r0
 80095a8:	f507 73b6 	add.w	r3, r7, #364	@ 0x16c
 80095ac:	4621      	mov	r1, r4
 80095ae:	4618      	mov	r0, r3
 80095b0:	f7f9 fc57 	bl	8002e62 <_ZN11ArduinoJson8V730HB2216JsonVariantConstC1EPKNS0_6detail11VariantDataEPKNS2_15ResourceManagerE>
    return getVariantConst();
 80095b4:	bf00      	nop
  return Converter<T>::checkJson(getVariant<variant_type>());
 80095b6:	f507 73b6 	add.w	r3, r7, #364	@ 0x16c
 80095ba:	e893 0003 	ldmia.w	r3, {r0, r1}
 80095be:	f7ff fd66 	bl	800908e <_ZN11ArduinoJson8V730HB229ConverterIPKcvE9checkJsonENS0_16JsonVariantConstE>
 80095c2:	4603      	mov	r3, r0
 80095c4:	bf00      	nop
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d001      	beq.n	80095ce <_ZN6Remora11loadModulesEv+0x186>
 80095ca:	2301      	movs	r3, #1
 80095cc:	e000      	b.n	80095d0 <_ZN6Remora11loadModulesEv+0x188>
 80095ce:	2300      	movs	r3, #0
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	f000 8192 	beq.w	80098fa <_ZN6Remora11loadModulesEv+0x4b2>
            const char* threadName = modules[i]["Thread"];
 80095d6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80095da:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80095de:	f107 0118 	add.w	r1, r7, #24
 80095e2:	f8d7 2204 	ldr.w	r2, [r7, #516]	@ 0x204
 80095e6:	4618      	mov	r0, r3
 80095e8:	f000 fc6f 	bl	8009eca <_ZNK11ArduinoJson8V730HB229JsonArrayixIjLi0EEENS0_6detail12ElementProxyIS1_EET_>
 80095ec:	f107 0480 	add.w	r4, r7, #128	@ 0x80
  return {derived(), adaptString(key)};
 80095f0:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 80095f4:	4618      	mov	r0, r3
 80095f6:	f001 f8de 	bl	800a7b6 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_12ElementProxyINS0_9JsonArrayEEEE7derivedEv>
 80095fa:	4602      	mov	r2, r0
 80095fc:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 8009600:	4611      	mov	r1, r2
 8009602:	4618      	mov	r0, r3
 8009604:	f001 f8e2 	bl	800a7cc <_ZN11ArduinoJson8V730HB226detail12ElementProxyINS0_9JsonArrayEEC1ERKS4_>
 8009608:	f507 73d6 	add.w	r3, r7, #428	@ 0x1ac
 800960c:	4990      	ldr	r1, [pc, #576]	@ (8009850 <_ZN6Remora11loadModulesEv+0x408>)
 800960e:	4618      	mov	r0, r3
 8009610:	f7fc f80b 	bl	800562a <_ZN11ArduinoJson8V730HB226detail11adaptStringIRA7_KcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES9_NS1_9remove_cvINS1_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEOS9_>
 8009614:	f507 71dc 	add.w	r1, r7, #440	@ 0x1b8
 8009618:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 800961c:	9300      	str	r3, [sp, #0]
 800961e:	f507 73d6 	add.w	r3, r7, #428	@ 0x1ac
 8009622:	cb0c      	ldmia	r3, {r2, r3}
 8009624:	4620      	mov	r0, r4
 8009626:	f001 f8e9 	bl	800a7fc <_ZN11ArduinoJson8V730HB226detail11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEC1ES5_S6_>
 800962a:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 800962e:	4618      	mov	r0, r3
 8009630:	f000 fc5b 	bl	8009eea <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEEcvT_IPKcLi0EEEv>
 8009634:	f8c7 01fc 	str.w	r0, [r7, #508]	@ 0x1fc
            const char* moduleType = modules[i]["Type"];
 8009638:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800963c:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8009640:	f107 0118 	add.w	r1, r7, #24
 8009644:	f8d7 2204 	ldr.w	r2, [r7, #516]	@ 0x204
 8009648:	4618      	mov	r0, r3
 800964a:	f000 fc3e 	bl	8009eca <_ZNK11ArduinoJson8V730HB229JsonArrayixIjLi0EEENS0_6detail12ElementProxyIS1_EET_>
 800964e:	f107 04b0 	add.w	r4, r7, #176	@ 0xb0
 8009652:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 8009656:	4618      	mov	r0, r3
 8009658:	f001 f8ad 	bl	800a7b6 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_12ElementProxyINS0_9JsonArrayEEEE7derivedEv>
 800965c:	4602      	mov	r2, r0
 800965e:	f507 73ce 	add.w	r3, r7, #412	@ 0x19c
 8009662:	4611      	mov	r1, r2
 8009664:	4618      	mov	r0, r3
 8009666:	f001 f8b1 	bl	800a7cc <_ZN11ArduinoJson8V730HB226detail12ElementProxyINS0_9JsonArrayEEC1ERKS4_>
 800966a:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 800966e:	4979      	ldr	r1, [pc, #484]	@ (8009854 <_ZN6Remora11loadModulesEv+0x40c>)
 8009670:	4618      	mov	r0, r3
 8009672:	f7ff fa35 	bl	8008ae0 <_ZN11ArduinoJson8V730HB226detail11adaptStringIRA5_KcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES9_NS1_9remove_cvINS1_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEOS9_>
 8009676:	f507 71ce 	add.w	r1, r7, #412	@ 0x19c
 800967a:	f8d7 3198 	ldr.w	r3, [r7, #408]	@ 0x198
 800967e:	9300      	str	r3, [sp, #0]
 8009680:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8009684:	cb0c      	ldmia	r3, {r2, r3}
 8009686:	4620      	mov	r0, r4
 8009688:	f001 f8b8 	bl	800a7fc <_ZN11ArduinoJson8V730HB226detail11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEC1ES5_S6_>
 800968c:	f107 03b0 	add.w	r3, r7, #176	@ 0xb0
 8009690:	4618      	mov	r0, r3
 8009692:	f000 fc2a 	bl	8009eea <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEEcvT_IPKcLi0EEEv>
 8009696:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
            uint32_t threadFreq = 0;
 800969a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800969e:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 80096a2:	2200      	movs	r2, #0
 80096a4:	601a      	str	r2, [r3, #0]

            // Determine the thread frequency based on the thread name
            if (strcmp(threadName, "Servo") == 0) {
 80096a6:	496c      	ldr	r1, [pc, #432]	@ (8009858 <_ZN6Remora11loadModulesEv+0x410>)
 80096a8:	f8d7 01fc 	ldr.w	r0, [r7, #508]	@ 0x1fc
 80096ac:	f7f6 fe18 	bl	80002e0 <strcmp>
 80096b0:	4603      	mov	r3, r0
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d10b      	bne.n	80096ce <_ZN6Remora11loadModulesEv+0x286>
                threadFreq = servoFreq;
 80096b6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80096ba:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	69da      	ldr	r2, [r3, #28]
 80096c2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80096c6:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 80096ca:	601a      	str	r2, [r3, #0]
 80096cc:	e012      	b.n	80096f4 <_ZN6Remora11loadModulesEv+0x2ac>
            } else if (strcmp(threadName, "Base") == 0) {
 80096ce:	4963      	ldr	r1, [pc, #396]	@ (800985c <_ZN6Remora11loadModulesEv+0x414>)
 80096d0:	f8d7 01fc 	ldr.w	r0, [r7, #508]	@ 0x1fc
 80096d4:	f7f6 fe04 	bl	80002e0 <strcmp>
 80096d8:	4603      	mov	r3, r0
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d10a      	bne.n	80096f4 <_ZN6Remora11loadModulesEv+0x2ac>
                threadFreq = baseFreq;
 80096de:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80096e2:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	699a      	ldr	r2, [r3, #24]
 80096ea:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80096ee:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 80096f2:	601a      	str	r2, [r3, #0]
            }

            // Add the "ThreadFreq" key and its value to the module's JSON object
            modules[i]["ThreadFreq"] = threadFreq;
 80096f4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80096f8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80096fc:	f107 0118 	add.w	r1, r7, #24
 8009700:	f8d7 2204 	ldr.w	r2, [r7, #516]	@ 0x204
 8009704:	4618      	mov	r0, r3
 8009706:	f000 fbe0 	bl	8009eca <_ZNK11ArduinoJson8V730HB229JsonArrayixIjLi0EEENS0_6detail12ElementProxyIS1_EET_>
 800970a:	f107 04e0 	add.w	r4, r7, #224	@ 0xe0
 800970e:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 8009712:	4618      	mov	r0, r3
 8009714:	f001 f84f 	bl	800a7b6 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_12ElementProxyINS0_9JsonArrayEEEE7derivedEv>
 8009718:	4602      	mov	r2, r0
 800971a:	f507 73ea 	add.w	r3, r7, #468	@ 0x1d4
 800971e:	4611      	mov	r1, r2
 8009720:	4618      	mov	r0, r3
 8009722:	f001 f853 	bl	800a7cc <_ZN11ArduinoJson8V730HB226detail12ElementProxyINS0_9JsonArrayEEC1ERKS4_>
 8009726:	f507 73e4 	add.w	r3, r7, #456	@ 0x1c8
 800972a:	494d      	ldr	r1, [pc, #308]	@ (8009860 <_ZN6Remora11loadModulesEv+0x418>)
 800972c:	4618      	mov	r0, r3
 800972e:	f001 f8a6 	bl	800a87e <_ZN11ArduinoJson8V730HB226detail11adaptStringIRA11_KcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES9_NS1_9remove_cvINS1_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEOS9_>
 8009732:	f507 71ea 	add.w	r1, r7, #468	@ 0x1d4
 8009736:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 800973a:	9300      	str	r3, [sp, #0]
 800973c:	f507 73e4 	add.w	r3, r7, #456	@ 0x1c8
 8009740:	cb0c      	ldmia	r3, {r2, r3}
 8009742:	4620      	mov	r0, r4
 8009744:	f001 f85a 	bl	800a7fc <_ZN11ArduinoJson8V730HB226detail11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEC1ES5_S6_>
 8009748:	f107 0214 	add.w	r2, r7, #20
 800974c:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 8009750:	4611      	mov	r1, r2
 8009752:	4618      	mov	r0, r3
 8009754:	f000 fbd5 	bl	8009f02 <_ZN11ArduinoJson8V730HB226detail11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEaSImEERS7_RKT_>

            // Create module using factory
            std::shared_ptr<Module> _mod = factory->createModule(threadName, moduleType, modules[i]);
 8009758:	f8d7 5200 	ldr.w	r5, [r7, #512]	@ 0x200
 800975c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009760:	f107 0118 	add.w	r1, r7, #24
 8009764:	f8d7 2204 	ldr.w	r2, [r7, #516]	@ 0x204
 8009768:	4618      	mov	r0, r3
 800976a:	f000 fbae 	bl	8009eca <_ZNK11ArduinoJson8V730HB229JsonArrayixIjLi0EEENS0_6detail12ElementProxyIS1_EET_>
 800976e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8009772:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8009776:	4611      	mov	r1, r2
 8009778:	4618      	mov	r0, r3
 800977a:	f000 fbd0 	bl	8009f1e <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_12ElementProxyINS0_9JsonArrayEEEEcvT_INS0_11JsonVariantELi0EEEv>
 800977e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8009782:	f5a3 74fe 	sub.w	r4, r3, #508	@ 0x1fc
 8009786:	466a      	mov	r2, sp
 8009788:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800978c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8009790:	e882 0003 	stmia.w	r2, {r0, r1}
 8009794:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8009798:	f8d7 21fc 	ldr.w	r2, [r7, #508]	@ 0x1fc
 800979c:	4629      	mov	r1, r5
 800979e:	4620      	mov	r0, r4
 80097a0:	f004 fd02 	bl	800e1a8 <_ZN13ModuleFactory12createModuleEPKcS1_N11ArduinoJson8V730HB2211JsonVariantE>
            bool _modPost = _mod->getUsesModulePost();
 80097a4:	f107 030c 	add.w	r3, r7, #12
 80097a8:	4618      	mov	r0, r3
 80097aa:	f000 fbd9 	bl	8009f60 <_ZNKSt19__shared_ptr_accessI6ModuleLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 80097ae:	4603      	mov	r3, r0
 80097b0:	681a      	ldr	r2, [r3, #0]
 80097b2:	3218      	adds	r2, #24
 80097b4:	6812      	ldr	r2, [r2, #0]
 80097b6:	4618      	mov	r0, r3
 80097b8:	4790      	blx	r2
 80097ba:	4603      	mov	r3, r0
 80097bc:	f887 31f7 	strb.w	r3, [r7, #503]	@ 0x1f7
            if (strcmp(threadName, "Servo") == 0) {
 80097c0:	4925      	ldr	r1, [pc, #148]	@ (8009858 <_ZN6Remora11loadModulesEv+0x410>)
 80097c2:	f8d7 01fc 	ldr.w	r0, [r7, #508]	@ 0x1fc
 80097c6:	f7f6 fd8b 	bl	80002e0 <strcmp>
 80097ca:	4603      	mov	r3, r0
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d149      	bne.n	8009864 <_ZN6Remora11loadModulesEv+0x41c>
                servoThread->registerModule(_mod);
 80097d0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80097d4:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	330c      	adds	r3, #12
 80097dc:	4618      	mov	r0, r3
 80097de:	f000 fbcb 	bl	8009f78 <_ZNKSt10unique_ptrI9pruThreadSt14default_deleteIS0_EEptEv>
 80097e2:	4604      	mov	r4, r0
 80097e4:	f107 020c 	add.w	r2, r7, #12
 80097e8:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80097ec:	4611      	mov	r1, r2
 80097ee:	4618      	mov	r0, r3
 80097f0:	f7ff fe19 	bl	8009426 <_ZNSt10shared_ptrI6ModuleEC1ERKS1_>
 80097f4:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80097f8:	4619      	mov	r1, r3
 80097fa:	4620      	mov	r0, r4
 80097fc:	f007 f962 	bl	8010ac4 <_ZN9pruThread14registerModuleESt10shared_ptrI6ModuleE>
 8009800:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8009804:	4618      	mov	r0, r3
 8009806:	f7ff fdeb 	bl	80093e0 <_ZNSt10shared_ptrI6ModuleED1Ev>
            	if (_modPost) {
 800980a:	f897 31f7 	ldrb.w	r3, [r7, #503]	@ 0x1f7
 800980e:	2b00      	cmp	r3, #0
 8009810:	d06e      	beq.n	80098f0 <_ZN6Remora11loadModulesEv+0x4a8>
            		servoThread->registerModulePost(_mod);
 8009812:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8009816:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	330c      	adds	r3, #12
 800981e:	4618      	mov	r0, r3
 8009820:	f000 fbaa 	bl	8009f78 <_ZNKSt10unique_ptrI9pruThreadSt14default_deleteIS0_EEptEv>
 8009824:	4604      	mov	r4, r0
 8009826:	f107 020c 	add.w	r2, r7, #12
 800982a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800982e:	4611      	mov	r1, r2
 8009830:	4618      	mov	r0, r3
 8009832:	f7ff fdf8 	bl	8009426 <_ZNSt10shared_ptrI6ModuleEC1ERKS1_>
 8009836:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800983a:	4619      	mov	r1, r3
 800983c:	4620      	mov	r0, r4
 800983e:	f007 f95d 	bl	8010afc <_ZN9pruThread18registerModulePostESt10shared_ptrI6ModuleE>
 8009842:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009846:	4618      	mov	r0, r3
 8009848:	f7ff fdca 	bl	80093e0 <_ZNSt10shared_ptrI6ModuleED1Ev>
 800984c:	e050      	b.n	80098f0 <_ZN6Remora11loadModulesEv+0x4a8>
 800984e:	bf00      	nop
 8009850:	0802006c 	.word	0x0802006c
 8009854:	08020074 	.word	0x08020074
 8009858:	08020064 	.word	0x08020064
 800985c:	0802005c 	.word	0x0802005c
 8009860:	0802007c 	.word	0x0802007c
            	}
            }
            else if (strcmp(threadName, "Base") == 0) {
 8009864:	4932      	ldr	r1, [pc, #200]	@ (8009930 <_ZN6Remora11loadModulesEv+0x4e8>)
 8009866:	f8d7 01fc 	ldr.w	r0, [r7, #508]	@ 0x1fc
 800986a:	f7f6 fd39 	bl	80002e0 <strcmp>
 800986e:	4603      	mov	r3, r0
 8009870:	2b00      	cmp	r3, #0
 8009872:	d13d      	bne.n	80098f0 <_ZN6Remora11loadModulesEv+0x4a8>
                baseThread->registerModule(_mod);
 8009874:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8009878:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	3308      	adds	r3, #8
 8009880:	4618      	mov	r0, r3
 8009882:	f000 fb79 	bl	8009f78 <_ZNKSt10unique_ptrI9pruThreadSt14default_deleteIS0_EEptEv>
 8009886:	4604      	mov	r4, r0
 8009888:	f107 020c 	add.w	r2, r7, #12
 800988c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8009890:	4611      	mov	r1, r2
 8009892:	4618      	mov	r0, r3
 8009894:	f7ff fdc7 	bl	8009426 <_ZNSt10shared_ptrI6ModuleEC1ERKS1_>
 8009898:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800989c:	4619      	mov	r1, r3
 800989e:	4620      	mov	r0, r4
 80098a0:	f007 f910 	bl	8010ac4 <_ZN9pruThread14registerModuleESt10shared_ptrI6ModuleE>
 80098a4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80098a8:	4618      	mov	r0, r3
 80098aa:	f7ff fd99 	bl	80093e0 <_ZNSt10shared_ptrI6ModuleED1Ev>
            	if (_modPost) {
 80098ae:	f897 31f7 	ldrb.w	r3, [r7, #503]	@ 0x1f7
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d01c      	beq.n	80098f0 <_ZN6Remora11loadModulesEv+0x4a8>
            		servoThread->registerModulePost(_mod);
 80098b6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80098ba:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	330c      	adds	r3, #12
 80098c2:	4618      	mov	r0, r3
 80098c4:	f000 fb58 	bl	8009f78 <_ZNKSt10unique_ptrI9pruThreadSt14default_deleteIS0_EEptEv>
 80098c8:	4604      	mov	r4, r0
 80098ca:	f107 020c 	add.w	r2, r7, #12
 80098ce:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80098d2:	4611      	mov	r1, r2
 80098d4:	4618      	mov	r0, r3
 80098d6:	f7ff fda6 	bl	8009426 <_ZNSt10shared_ptrI6ModuleEC1ERKS1_>
 80098da:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80098de:	4619      	mov	r1, r3
 80098e0:	4620      	mov	r0, r4
 80098e2:	f007 f90b 	bl	8010afc <_ZN9pruThread18registerModulePostESt10shared_ptrI6ModuleE>
 80098e6:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80098ea:	4618      	mov	r0, r3
 80098ec:	f7ff fd78 	bl	80093e0 <_ZNSt10shared_ptrI6ModuleED1Ev>
            	}
            }
            else {
                //onLoad.push_back(move(_mod));
            }
        }
 80098f0:	f107 030c 	add.w	r3, r7, #12
 80098f4:	4618      	mov	r0, r3
 80098f6:	f7ff fd73 	bl	80093e0 <_ZNSt10shared_ptrI6ModuleED1Ev>
    for (size_t i = 0; i < modules.size(); i++) {
 80098fa:	f8d7 3204 	ldr.w	r3, [r7, #516]	@ 0x204
 80098fe:	3301      	adds	r3, #1
 8009900:	f8c7 3204 	str.w	r3, [r7, #516]	@ 0x204
 8009904:	f107 0318 	add.w	r3, r7, #24
 8009908:	4618      	mov	r0, r3
 800990a:	f7ff fac5 	bl	8008e98 <_ZNK11ArduinoJson8V730HB229JsonArray4sizeEv>
 800990e:	4602      	mov	r2, r0
 8009910:	f8d7 3204 	ldr.w	r3, [r7, #516]	@ 0x204
 8009914:	4293      	cmp	r3, r2
 8009916:	bf34      	ite	cc
 8009918:	2301      	movcc	r3, #1
 800991a:	2300      	movcs	r3, #0
 800991c:	b2db      	uxtb	r3, r3
 800991e:	2b00      	cmp	r3, #0
 8009920:	f47f adb9 	bne.w	8009496 <_ZN6Remora11loadModulesEv+0x4e>
    }

}
 8009924:	bf00      	nop
 8009926:	bf00      	nop
 8009928:	f507 7702 	add.w	r7, r7, #520	@ 0x208
 800992c:	46bd      	mov	sp, r7
 800992e:	bdb0      	pop	{r4, r5, r7, pc}
 8009930:	0802005c 	.word	0x0802005c

08009934 <_ZSt4moveIRSt10unique_ptrI14CommsInterfaceSt14default_deleteIS1_EEEONSt16remove_referenceIT_E4typeEOS7_>:
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    _GLIBCXX_NODISCARD
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 8009934:	b480      	push	{r7}
 8009936:	b083      	sub	sp, #12
 8009938:	af00      	add	r7, sp, #0
 800993a:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	4618      	mov	r0, r3
 8009940:	370c      	adds	r7, #12
 8009942:	46bd      	mov	sp, r7
 8009944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009948:	4770      	bx	lr

0800994a <_ZNSt15__uniq_ptr_implI14CommsInterfaceSt14default_deleteIS0_EEaSEOS3_>:
      __uniq_ptr_impl& operator=(__uniq_ptr_impl&& __u) noexcept
 800994a:	b580      	push	{r7, lr}
 800994c:	b082      	sub	sp, #8
 800994e:	af00      	add	r7, sp, #0
 8009950:	6078      	str	r0, [r7, #4]
 8009952:	6039      	str	r1, [r7, #0]
	reset(__u.release());
 8009954:	6838      	ldr	r0, [r7, #0]
 8009956:	f000 fb88 	bl	800a06a <_ZNSt15__uniq_ptr_implI14CommsInterfaceSt14default_deleteIS0_EE7releaseEv>
 800995a:	4603      	mov	r3, r0
 800995c:	4619      	mov	r1, r3
 800995e:	6878      	ldr	r0, [r7, #4]
 8009960:	f000 fb63 	bl	800a02a <_ZNSt15__uniq_ptr_implI14CommsInterfaceSt14default_deleteIS0_EE5resetEPS0_>
	_M_deleter() = std::forward<_Dp>(__u._M_deleter());
 8009964:	6838      	ldr	r0, [r7, #0]
 8009966:	f000 fb95 	bl	800a094 <_ZNSt15__uniq_ptr_implI14CommsInterfaceSt14default_deleteIS0_EE10_M_deleterEv>
 800996a:	4603      	mov	r3, r0
 800996c:	4618      	mov	r0, r3
 800996e:	f000 fb9e 	bl	800a0ae <_ZSt7forwardISt14default_deleteI14CommsInterfaceEEOT_RNSt16remove_referenceIS3_E4typeE>
 8009972:	6878      	ldr	r0, [r7, #4]
 8009974:	f000 fb8e 	bl	800a094 <_ZNSt15__uniq_ptr_implI14CommsInterfaceSt14default_deleteIS0_EE10_M_deleterEv>
	return *this;
 8009978:	687b      	ldr	r3, [r7, #4]
      }
 800997a:	4618      	mov	r0, r3
 800997c:	3708      	adds	r7, #8
 800997e:	46bd      	mov	sp, r7
 8009980:	bd80      	pop	{r7, pc}

08009982 <_ZNSt15__uniq_ptr_implI17JsonConfigHandlerSt14default_deleteIS0_EEC1Ev>:
      __uniq_ptr_impl() = default;
 8009982:	b580      	push	{r7, lr}
 8009984:	b082      	sub	sp, #8
 8009986:	af00      	add	r7, sp, #0
 8009988:	6078      	str	r0, [r7, #4]
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	4618      	mov	r0, r3
 800998e:	f000 fb99 	bl	800a0c4 <_ZNSt5tupleIJP17JsonConfigHandlerSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	4618      	mov	r0, r3
 8009996:	3708      	adds	r7, #8
 8009998:	46bd      	mov	sp, r7
 800999a:	bd80      	pop	{r7, pc}

0800999c <_ZNSt15__uniq_ptr_dataI17JsonConfigHandlerSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEv>:
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 800999c:	b580      	push	{r7, lr}
 800999e:	b082      	sub	sp, #8
 80099a0:	af00      	add	r7, sp, #0
 80099a2:	6078      	str	r0, [r7, #4]
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	4618      	mov	r0, r3
 80099a8:	f7ff ffeb 	bl	8009982 <_ZNSt15__uniq_ptr_implI17JsonConfigHandlerSt14default_deleteIS0_EEC1Ev>
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	4618      	mov	r0, r3
 80099b0:	3708      	adds	r7, #8
 80099b2:	46bd      	mov	sp, r7
 80099b4:	bd80      	pop	{r7, pc}

080099b6 <_ZNSt10unique_ptrI17JsonConfigHandlerSt14default_deleteIS0_EEC1IS2_vEEv>:
	constexpr unique_ptr() noexcept
 80099b6:	b580      	push	{r7, lr}
 80099b8:	b082      	sub	sp, #8
 80099ba:	af00      	add	r7, sp, #0
 80099bc:	6078      	str	r0, [r7, #4]
	: _M_t()
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	2200      	movs	r2, #0
 80099c2:	601a      	str	r2, [r3, #0]
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	4618      	mov	r0, r3
 80099c8:	f7ff ffe8 	bl	800999c <_ZNSt15__uniq_ptr_dataI17JsonConfigHandlerSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEv>
	{ }
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	4618      	mov	r0, r3
 80099d0:	3708      	adds	r7, #8
 80099d2:	46bd      	mov	sp, r7
 80099d4:	bd80      	pop	{r7, pc}

080099d6 <_ZNSt10unique_ptrI17JsonConfigHandlerSt14default_deleteIS0_EED1Ev>:
      ~unique_ptr() noexcept
 80099d6:	b590      	push	{r4, r7, lr}
 80099d8:	b085      	sub	sp, #20
 80099da:	af00      	add	r7, sp, #0
 80099dc:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	4618      	mov	r0, r3
 80099e2:	f000 fb7c 	bl	800a0de <_ZNSt15__uniq_ptr_implI17JsonConfigHandlerSt14default_deleteIS0_EE6_M_ptrEv>
 80099e6:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	d00c      	beq.n	8009a0a <_ZNSt10unique_ptrI17JsonConfigHandlerSt14default_deleteIS0_EED1Ev+0x34>
	  get_deleter()(std::move(__ptr));
 80099f0:	6878      	ldr	r0, [r7, #4]
 80099f2:	f000 fb81 	bl	800a0f8 <_ZNSt10unique_ptrI17JsonConfigHandlerSt14default_deleteIS0_EE11get_deleterEv>
 80099f6:	4604      	mov	r4, r0
 80099f8:	68f8      	ldr	r0, [r7, #12]
 80099fa:	f000 fb8a 	bl	800a112 <_ZSt4moveIRP17JsonConfigHandlerEONSt16remove_referenceIT_E4typeEOS4_>
 80099fe:	4603      	mov	r3, r0
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	4619      	mov	r1, r3
 8009a04:	4620      	mov	r0, r4
 8009a06:	f000 fba2 	bl	800a14e <_ZNKSt14default_deleteI17JsonConfigHandlerEclEPS0_>
	__ptr = pointer();
 8009a0a:	68fb      	ldr	r3, [r7, #12]
 8009a0c:	2200      	movs	r2, #0
 8009a0e:	601a      	str	r2, [r3, #0]
      }
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	4618      	mov	r0, r3
 8009a14:	3714      	adds	r7, #20
 8009a16:	46bd      	mov	sp, r7
 8009a18:	bd90      	pop	{r4, r7, pc}

08009a1a <_ZNSt15__uniq_ptr_implI12CommsHandlerSt14default_deleteIS0_EEC1Ev>:
      __uniq_ptr_impl() = default;
 8009a1a:	b580      	push	{r7, lr}
 8009a1c:	b082      	sub	sp, #8
 8009a1e:	af00      	add	r7, sp, #0
 8009a20:	6078      	str	r0, [r7, #4]
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	4618      	mov	r0, r3
 8009a26:	f000 fba5 	bl	800a174 <_ZNSt5tupleIJP12CommsHandlerSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	4618      	mov	r0, r3
 8009a2e:	3708      	adds	r7, #8
 8009a30:	46bd      	mov	sp, r7
 8009a32:	bd80      	pop	{r7, pc}

08009a34 <_ZNSt15__uniq_ptr_dataI12CommsHandlerSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEv>:
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 8009a34:	b580      	push	{r7, lr}
 8009a36:	b082      	sub	sp, #8
 8009a38:	af00      	add	r7, sp, #0
 8009a3a:	6078      	str	r0, [r7, #4]
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	4618      	mov	r0, r3
 8009a40:	f7ff ffeb 	bl	8009a1a <_ZNSt15__uniq_ptr_implI12CommsHandlerSt14default_deleteIS0_EEC1Ev>
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	4618      	mov	r0, r3
 8009a48:	3708      	adds	r7, #8
 8009a4a:	46bd      	mov	sp, r7
 8009a4c:	bd80      	pop	{r7, pc}

08009a4e <_ZNSt10unique_ptrI12CommsHandlerSt14default_deleteIS0_EEC1IS2_vEEv>:
	constexpr unique_ptr() noexcept
 8009a4e:	b580      	push	{r7, lr}
 8009a50:	b082      	sub	sp, #8
 8009a52:	af00      	add	r7, sp, #0
 8009a54:	6078      	str	r0, [r7, #4]
	: _M_t()
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	2200      	movs	r2, #0
 8009a5a:	601a      	str	r2, [r3, #0]
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	4618      	mov	r0, r3
 8009a60:	f7ff ffe8 	bl	8009a34 <_ZNSt15__uniq_ptr_dataI12CommsHandlerSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEv>
	{ }
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	4618      	mov	r0, r3
 8009a68:	3708      	adds	r7, #8
 8009a6a:	46bd      	mov	sp, r7
 8009a6c:	bd80      	pop	{r7, pc}

08009a6e <_ZNSt10unique_ptrI12CommsHandlerSt14default_deleteIS0_EED1Ev>:
      ~unique_ptr() noexcept
 8009a6e:	b590      	push	{r4, r7, lr}
 8009a70:	b085      	sub	sp, #20
 8009a72:	af00      	add	r7, sp, #0
 8009a74:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	4618      	mov	r0, r3
 8009a7a:	f000 fb88 	bl	800a18e <_ZNSt15__uniq_ptr_implI12CommsHandlerSt14default_deleteIS0_EE6_M_ptrEv>
 8009a7e:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	d00c      	beq.n	8009aa2 <_ZNSt10unique_ptrI12CommsHandlerSt14default_deleteIS0_EED1Ev+0x34>
	  get_deleter()(std::move(__ptr));
 8009a88:	6878      	ldr	r0, [r7, #4]
 8009a8a:	f000 fb8d 	bl	800a1a8 <_ZNSt10unique_ptrI12CommsHandlerSt14default_deleteIS0_EE11get_deleterEv>
 8009a8e:	4604      	mov	r4, r0
 8009a90:	68f8      	ldr	r0, [r7, #12]
 8009a92:	f000 fb96 	bl	800a1c2 <_ZSt4moveIRP12CommsHandlerEONSt16remove_referenceIT_E4typeEOS4_>
 8009a96:	4603      	mov	r3, r0
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	4619      	mov	r1, r3
 8009a9c:	4620      	mov	r0, r4
 8009a9e:	f000 fb9b 	bl	800a1d8 <_ZNKSt14default_deleteI12CommsHandlerEclEPS0_>
	__ptr = pointer();
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	2200      	movs	r2, #0
 8009aa6:	601a      	str	r2, [r3, #0]
      }
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	4618      	mov	r0, r3
 8009aac:	3714      	adds	r7, #20
 8009aae:	46bd      	mov	sp, r7
 8009ab0:	bd90      	pop	{r4, r7, pc}

08009ab2 <_ZNSt15__uniq_ptr_implI9pruThreadSt14default_deleteIS0_EEC1Ev>:
      __uniq_ptr_impl() = default;
 8009ab2:	b580      	push	{r7, lr}
 8009ab4:	b082      	sub	sp, #8
 8009ab6:	af00      	add	r7, sp, #0
 8009ab8:	6078      	str	r0, [r7, #4]
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	4618      	mov	r0, r3
 8009abe:	f000 fb9c 	bl	800a1fa <_ZNSt5tupleIJP9pruThreadSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	4618      	mov	r0, r3
 8009ac6:	3708      	adds	r7, #8
 8009ac8:	46bd      	mov	sp, r7
 8009aca:	bd80      	pop	{r7, pc}

08009acc <_ZNSt15__uniq_ptr_dataI9pruThreadSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEv>:
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 8009acc:	b580      	push	{r7, lr}
 8009ace:	b082      	sub	sp, #8
 8009ad0:	af00      	add	r7, sp, #0
 8009ad2:	6078      	str	r0, [r7, #4]
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	4618      	mov	r0, r3
 8009ad8:	f7ff ffeb 	bl	8009ab2 <_ZNSt15__uniq_ptr_implI9pruThreadSt14default_deleteIS0_EEC1Ev>
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	4618      	mov	r0, r3
 8009ae0:	3708      	adds	r7, #8
 8009ae2:	46bd      	mov	sp, r7
 8009ae4:	bd80      	pop	{r7, pc}

08009ae6 <_ZNSt10unique_ptrI9pruThreadSt14default_deleteIS0_EEC1IS2_vEEv>:
	constexpr unique_ptr() noexcept
 8009ae6:	b580      	push	{r7, lr}
 8009ae8:	b082      	sub	sp, #8
 8009aea:	af00      	add	r7, sp, #0
 8009aec:	6078      	str	r0, [r7, #4]
	: _M_t()
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	2200      	movs	r2, #0
 8009af2:	601a      	str	r2, [r3, #0]
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	4618      	mov	r0, r3
 8009af8:	f7ff ffe8 	bl	8009acc <_ZNSt15__uniq_ptr_dataI9pruThreadSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEv>
	{ }
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	4618      	mov	r0, r3
 8009b00:	3708      	adds	r7, #8
 8009b02:	46bd      	mov	sp, r7
 8009b04:	bd80      	pop	{r7, pc}

08009b06 <_ZNSt10unique_ptrI9pruThreadSt14default_deleteIS0_EED1Ev>:
      ~unique_ptr() noexcept
 8009b06:	b590      	push	{r4, r7, lr}
 8009b08:	b085      	sub	sp, #20
 8009b0a:	af00      	add	r7, sp, #0
 8009b0c:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	4618      	mov	r0, r3
 8009b12:	f000 fb7f 	bl	800a214 <_ZNSt15__uniq_ptr_implI9pruThreadSt14default_deleteIS0_EE6_M_ptrEv>
 8009b16:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	d00c      	beq.n	8009b3a <_ZNSt10unique_ptrI9pruThreadSt14default_deleteIS0_EED1Ev+0x34>
	  get_deleter()(std::move(__ptr));
 8009b20:	6878      	ldr	r0, [r7, #4]
 8009b22:	f000 fb84 	bl	800a22e <_ZNSt10unique_ptrI9pruThreadSt14default_deleteIS0_EE11get_deleterEv>
 8009b26:	4604      	mov	r4, r0
 8009b28:	68f8      	ldr	r0, [r7, #12]
 8009b2a:	f000 fb8d 	bl	800a248 <_ZSt4moveIRP9pruThreadEONSt16remove_referenceIT_E4typeEOS4_>
 8009b2e:	4603      	mov	r3, r0
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	4619      	mov	r1, r3
 8009b34:	4620      	mov	r0, r4
 8009b36:	f000 fba9 	bl	800a28c <_ZNKSt14default_deleteI9pruThreadEclEPS0_>
	__ptr = pointer();
 8009b3a:	68fb      	ldr	r3, [r7, #12]
 8009b3c:	2200      	movs	r2, #0
 8009b3e:	601a      	str	r2, [r3, #0]
      }
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	4618      	mov	r0, r3
 8009b44:	3714      	adds	r7, #20
 8009b46:	46bd      	mov	sp, r7
 8009b48:	bd90      	pop	{r4, r7, pc}

08009b4a <_ZSt11make_uniqueI17JsonConfigHandlerJP6RemoraEENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>:
   *  @relates unique_ptr
   */
  template<typename _Tp, typename... _Args>
    _GLIBCXX23_CONSTEXPR
    inline __detail::__unique_ptr_t<_Tp>
    make_unique(_Args&&... __args)
 8009b4a:	b590      	push	{r4, r7, lr}
 8009b4c:	b083      	sub	sp, #12
 8009b4e:	af00      	add	r7, sp, #0
 8009b50:	6078      	str	r0, [r7, #4]
 8009b52:	6039      	str	r1, [r7, #0]
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
 8009b54:	206c      	movs	r0, #108	@ 0x6c
 8009b56:	f014 fb21 	bl	801e19c <_Znwj>
 8009b5a:	4603      	mov	r3, r0
 8009b5c:	461c      	mov	r4, r3
 8009b5e:	6838      	ldr	r0, [r7, #0]
 8009b60:	f000 fba7 	bl	800a2b2 <_ZSt7forwardIP6RemoraEOT_RNSt16remove_referenceIS2_E4typeE>
 8009b64:	4603      	mov	r3, r0
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	4619      	mov	r1, r3
 8009b6a:	4620      	mov	r0, r4
 8009b6c:	f7fa fbbc 	bl	80042e8 <_ZN17JsonConfigHandlerC1EP6Remora>
 8009b70:	4621      	mov	r1, r4
 8009b72:	6878      	ldr	r0, [r7, #4]
 8009b74:	f000 fbb8 	bl	800a2e8 <_ZNSt10unique_ptrI17JsonConfigHandlerSt14default_deleteIS0_EEC1IS2_vEEPS0_>
 8009b78:	6878      	ldr	r0, [r7, #4]
 8009b7a:	370c      	adds	r7, #12
 8009b7c:	46bd      	mov	sp, r7
 8009b7e:	bd90      	pop	{r4, r7, pc}

08009b80 <_ZNSt15__uniq_ptr_implI17JsonConfigHandlerSt14default_deleteIS0_EEaSEOS3_>:
      __uniq_ptr_impl& operator=(__uniq_ptr_impl&& __u) noexcept
 8009b80:	b580      	push	{r7, lr}
 8009b82:	b082      	sub	sp, #8
 8009b84:	af00      	add	r7, sp, #0
 8009b86:	6078      	str	r0, [r7, #4]
 8009b88:	6039      	str	r1, [r7, #0]
	reset(__u.release());
 8009b8a:	6838      	ldr	r0, [r7, #0]
 8009b8c:	f000 fbdb 	bl	800a346 <_ZNSt15__uniq_ptr_implI17JsonConfigHandlerSt14default_deleteIS0_EE7releaseEv>
 8009b90:	4603      	mov	r3, r0
 8009b92:	4619      	mov	r1, r3
 8009b94:	6878      	ldr	r0, [r7, #4]
 8009b96:	f000 fbb6 	bl	800a306 <_ZNSt15__uniq_ptr_implI17JsonConfigHandlerSt14default_deleteIS0_EE5resetEPS0_>
	_M_deleter() = std::forward<_Dp>(__u._M_deleter());
 8009b9a:	6838      	ldr	r0, [r7, #0]
 8009b9c:	f000 fbe8 	bl	800a370 <_ZNSt15__uniq_ptr_implI17JsonConfigHandlerSt14default_deleteIS0_EE10_M_deleterEv>
 8009ba0:	4603      	mov	r3, r0
 8009ba2:	4618      	mov	r0, r3
 8009ba4:	f000 fbf1 	bl	800a38a <_ZSt7forwardISt14default_deleteI17JsonConfigHandlerEEOT_RNSt16remove_referenceIS3_E4typeE>
 8009ba8:	6878      	ldr	r0, [r7, #4]
 8009baa:	f000 fbe1 	bl	800a370 <_ZNSt15__uniq_ptr_implI17JsonConfigHandlerSt14default_deleteIS0_EE10_M_deleterEv>
	return *this;
 8009bae:	687b      	ldr	r3, [r7, #4]
      }
 8009bb0:	4618      	mov	r0, r3
 8009bb2:	3708      	adds	r7, #8
 8009bb4:	46bd      	mov	sp, r7
 8009bb6:	bd80      	pop	{r7, pc}

08009bb8 <_ZSt11make_uniqueI8SPICommsJRPV8rxData_tRPV8txData_tP11SPI_TypeDefEENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>:
    make_unique(_Args&&... __args)
 8009bb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009bba:	b085      	sub	sp, #20
 8009bbc:	af00      	add	r7, sp, #0
 8009bbe:	60f8      	str	r0, [r7, #12]
 8009bc0:	60b9      	str	r1, [r7, #8]
 8009bc2:	607a      	str	r2, [r7, #4]
 8009bc4:	603b      	str	r3, [r7, #0]
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
 8009bc6:	f44f 7011 	mov.w	r0, #580	@ 0x244
 8009bca:	f014 fae7 	bl	801e19c <_Znwj>
 8009bce:	4603      	mov	r3, r0
 8009bd0:	461e      	mov	r6, r3
 8009bd2:	68b8      	ldr	r0, [r7, #8]
 8009bd4:	f000 fbe4 	bl	800a3a0 <_ZSt7forwardIRPV8rxData_tEOT_RNSt16remove_referenceIS4_E4typeE>
 8009bd8:	4603      	mov	r3, r0
 8009bda:	681c      	ldr	r4, [r3, #0]
 8009bdc:	6878      	ldr	r0, [r7, #4]
 8009bde:	f000 fbea 	bl	800a3b6 <_ZSt7forwardIRPV8txData_tEOT_RNSt16remove_referenceIS4_E4typeE>
 8009be2:	4603      	mov	r3, r0
 8009be4:	681d      	ldr	r5, [r3, #0]
 8009be6:	6838      	ldr	r0, [r7, #0]
 8009be8:	f000 fbf0 	bl	800a3cc <_ZSt7forwardIP11SPI_TypeDefEOT_RNSt16remove_referenceIS2_E4typeE>
 8009bec:	4603      	mov	r3, r0
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	462a      	mov	r2, r5
 8009bf2:	4621      	mov	r1, r4
 8009bf4:	4630      	mov	r0, r6
 8009bf6:	f7f7 f8e1 	bl	8000dbc <_ZN8SPICommsC1EPV8rxData_tPV8txData_tP11SPI_TypeDef>
 8009bfa:	4631      	mov	r1, r6
 8009bfc:	68f8      	ldr	r0, [r7, #12]
 8009bfe:	f000 fc00 	bl	800a402 <_ZNSt10unique_ptrI8SPICommsSt14default_deleteIS0_EEC1IS2_vEEPS0_>
 8009c02:	68f8      	ldr	r0, [r7, #12]
 8009c04:	3714      	adds	r7, #20
 8009c06:	46bd      	mov	sp, r7
 8009c08:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009c0a <_ZSt11make_uniqueI12CommsHandlerJEENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>:
    make_unique(_Args&&... __args)
 8009c0a:	b590      	push	{r4, r7, lr}
 8009c0c:	b083      	sub	sp, #12
 8009c0e:	af00      	add	r7, sp, #0
 8009c10:	6078      	str	r0, [r7, #4]
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
 8009c12:	2020      	movs	r0, #32
 8009c14:	f014 fac2 	bl	801e19c <_Znwj>
 8009c18:	4603      	mov	r3, r0
 8009c1a:	461c      	mov	r4, r3
 8009c1c:	4620      	mov	r0, r4
 8009c1e:	f003 fd4d 	bl	800d6bc <_ZN12CommsHandlerC1Ev>
 8009c22:	4621      	mov	r1, r4
 8009c24:	6878      	ldr	r0, [r7, #4]
 8009c26:	f000 fc25 	bl	800a474 <_ZNSt10unique_ptrI12CommsHandlerSt14default_deleteIS0_EEC1IS2_vEEPS0_>
 8009c2a:	6878      	ldr	r0, [r7, #4]
 8009c2c:	370c      	adds	r7, #12
 8009c2e:	46bd      	mov	sp, r7
 8009c30:	bd90      	pop	{r4, r7, pc}

08009c32 <_ZNSt15__uniq_ptr_implI12CommsHandlerSt14default_deleteIS0_EEaSEOS3_>:
      __uniq_ptr_impl& operator=(__uniq_ptr_impl&& __u) noexcept
 8009c32:	b580      	push	{r7, lr}
 8009c34:	b082      	sub	sp, #8
 8009c36:	af00      	add	r7, sp, #0
 8009c38:	6078      	str	r0, [r7, #4]
 8009c3a:	6039      	str	r1, [r7, #0]
	reset(__u.release());
 8009c3c:	6838      	ldr	r0, [r7, #0]
 8009c3e:	f000 fc48 	bl	800a4d2 <_ZNSt15__uniq_ptr_implI12CommsHandlerSt14default_deleteIS0_EE7releaseEv>
 8009c42:	4603      	mov	r3, r0
 8009c44:	4619      	mov	r1, r3
 8009c46:	6878      	ldr	r0, [r7, #4]
 8009c48:	f000 fc23 	bl	800a492 <_ZNSt15__uniq_ptr_implI12CommsHandlerSt14default_deleteIS0_EE5resetEPS0_>
	_M_deleter() = std::forward<_Dp>(__u._M_deleter());
 8009c4c:	6838      	ldr	r0, [r7, #0]
 8009c4e:	f000 fc55 	bl	800a4fc <_ZNSt15__uniq_ptr_implI12CommsHandlerSt14default_deleteIS0_EE10_M_deleterEv>
 8009c52:	4603      	mov	r3, r0
 8009c54:	4618      	mov	r0, r3
 8009c56:	f000 fc5e 	bl	800a516 <_ZSt7forwardISt14default_deleteI12CommsHandlerEEOT_RNSt16remove_referenceIS3_E4typeE>
 8009c5a:	6878      	ldr	r0, [r7, #4]
 8009c5c:	f000 fc4e 	bl	800a4fc <_ZNSt15__uniq_ptr_implI12CommsHandlerSt14default_deleteIS0_EE10_M_deleterEv>
	return *this;
 8009c60:	687b      	ldr	r3, [r7, #4]
      }
 8009c62:	4618      	mov	r0, r3
 8009c64:	3708      	adds	r7, #8
 8009c66:	46bd      	mov	sp, r7
 8009c68:	bd80      	pop	{r7, pc}

08009c6a <_ZNKSt10unique_ptrI12CommsHandlerSt14default_deleteIS0_EEptEv>:
      operator->() const noexcept
 8009c6a:	b580      	push	{r7, lr}
 8009c6c:	b082      	sub	sp, #8
 8009c6e:	af00      	add	r7, sp, #0
 8009c70:	6078      	str	r0, [r7, #4]
	return get();
 8009c72:	6878      	ldr	r0, [r7, #4]
 8009c74:	f000 fc5a 	bl	800a52c <_ZNKSt10unique_ptrI12CommsHandlerSt14default_deleteIS0_EE3getEv>
 8009c78:	4603      	mov	r3, r0
      }
 8009c7a:	4618      	mov	r0, r3
 8009c7c:	3708      	adds	r7, #8
 8009c7e:	46bd      	mov	sp, r7
 8009c80:	bd80      	pop	{r7, pc}

08009c82 <_ZSt4moveIRSt10unique_ptrI8SPICommsSt14default_deleteIS1_EEEONSt16remove_referenceIT_E4typeEOS7_>:
    move(_Tp&& __t) noexcept
 8009c82:	b480      	push	{r7}
 8009c84:	b083      	sub	sp, #12
 8009c86:	af00      	add	r7, sp, #0
 8009c88:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	4618      	mov	r0, r3
 8009c8e:	370c      	adds	r7, #12
 8009c90:	46bd      	mov	sp, r7
 8009c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c96:	4770      	bx	lr

08009c98 <_ZNSt15__uniq_ptr_dataI14CommsInterfaceSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EIS1_I8SPICommsEEEPS0_OT_>:
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 8009c98:	b580      	push	{r7, lr}
 8009c9a:	b084      	sub	sp, #16
 8009c9c:	af00      	add	r7, sp, #0
 8009c9e:	60f8      	str	r0, [r7, #12]
 8009ca0:	60b9      	str	r1, [r7, #8]
 8009ca2:	607a      	str	r2, [r7, #4]
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	68b9      	ldr	r1, [r7, #8]
 8009ca8:	687a      	ldr	r2, [r7, #4]
 8009caa:	4618      	mov	r0, r3
 8009cac:	f000 fc63 	bl	800a576 <_ZNSt15__uniq_ptr_implI14CommsInterfaceSt14default_deleteIS0_EEC1IS1_I8SPICommsEEEPS0_OT_>
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	4618      	mov	r0, r3
 8009cb4:	3710      	adds	r7, #16
 8009cb6:	46bd      	mov	sp, r7
 8009cb8:	bd80      	pop	{r7, pc}

08009cba <_ZNSt10unique_ptrI14CommsInterfaceSt14default_deleteIS0_EEC1I8SPICommsS1_IS5_EvEEOS_IT_T0_E>:
	unique_ptr(unique_ptr<_Up, _Ep>&& __u) noexcept
 8009cba:	b5b0      	push	{r4, r5, r7, lr}
 8009cbc:	b082      	sub	sp, #8
 8009cbe:	af00      	add	r7, sp, #0
 8009cc0:	6078      	str	r0, [r7, #4]
 8009cc2:	6039      	str	r1, [r7, #0]
	: _M_t(__u.release(), std::forward<_Ep>(__u.get_deleter()))
 8009cc4:	687c      	ldr	r4, [r7, #4]
 8009cc6:	6838      	ldr	r0, [r7, #0]
 8009cc8:	f000 fc3d 	bl	800a546 <_ZNSt10unique_ptrI8SPICommsSt14default_deleteIS0_EE7releaseEv>
 8009ccc:	4605      	mov	r5, r0
 8009cce:	6838      	ldr	r0, [r7, #0]
 8009cd0:	f000 fbb3 	bl	800a43a <_ZNSt10unique_ptrI8SPICommsSt14default_deleteIS0_EE11get_deleterEv>
 8009cd4:	4603      	mov	r3, r0
 8009cd6:	4618      	mov	r0, r3
 8009cd8:	f000 fc42 	bl	800a560 <_ZSt7forwardISt14default_deleteI8SPICommsEEOT_RNSt16remove_referenceIS3_E4typeE>
 8009cdc:	4603      	mov	r3, r0
 8009cde:	461a      	mov	r2, r3
 8009ce0:	4629      	mov	r1, r5
 8009ce2:	4620      	mov	r0, r4
 8009ce4:	f7ff ffd8 	bl	8009c98 <_ZNSt15__uniq_ptr_dataI14CommsInterfaceSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EIS1_I8SPICommsEEEPS0_OT_>
	{ }
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	4618      	mov	r0, r3
 8009cec:	3708      	adds	r7, #8
 8009cee:	46bd      	mov	sp, r7
 8009cf0:	bdb0      	pop	{r4, r5, r7, pc}

08009cf2 <_ZNSt10unique_ptrI14CommsInterfaceSt14default_deleteIS0_EED1Ev>:
      ~unique_ptr() noexcept
 8009cf2:	b590      	push	{r4, r7, lr}
 8009cf4:	b085      	sub	sp, #20
 8009cf6:	af00      	add	r7, sp, #0
 8009cf8:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	4618      	mov	r0, r3
 8009cfe:	f000 fc50 	bl	800a5a2 <_ZNSt15__uniq_ptr_implI14CommsInterfaceSt14default_deleteIS0_EE6_M_ptrEv>
 8009d02:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	d00c      	beq.n	8009d26 <_ZNSt10unique_ptrI14CommsInterfaceSt14default_deleteIS0_EED1Ev+0x34>
	  get_deleter()(std::move(__ptr));
 8009d0c:	6878      	ldr	r0, [r7, #4]
 8009d0e:	f000 fc55 	bl	800a5bc <_ZNSt10unique_ptrI14CommsInterfaceSt14default_deleteIS0_EE11get_deleterEv>
 8009d12:	4604      	mov	r4, r0
 8009d14:	68f8      	ldr	r0, [r7, #12]
 8009d16:	f000 fc5e 	bl	800a5d6 <_ZSt4moveIRP14CommsInterfaceEONSt16remove_referenceIT_E4typeEOS4_>
 8009d1a:	4603      	mov	r3, r0
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	4619      	mov	r1, r3
 8009d20:	4620      	mov	r0, r4
 8009d22:	f000 fc63 	bl	800a5ec <_ZNKSt14default_deleteI14CommsInterfaceEclEPS0_>
	__ptr = pointer();
 8009d26:	68fb      	ldr	r3, [r7, #12]
 8009d28:	2200      	movs	r2, #0
 8009d2a:	601a      	str	r2, [r3, #0]
      }
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	4618      	mov	r0, r3
 8009d30:	3714      	adds	r7, #20
 8009d32:	46bd      	mov	sp, r7
 8009d34:	bd90      	pop	{r4, r7, pc}

08009d36 <_ZSt11make_uniqueI9pruThreadJRA5_KcP11TIM_TypeDef9IRQn_TypeRmRKmEENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>:
    make_unique(_Args&&... __args)
 8009d36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009d3a:	b08e      	sub	sp, #56	@ 0x38
 8009d3c:	af02      	add	r7, sp, #8
 8009d3e:	60f8      	str	r0, [r7, #12]
 8009d40:	60b9      	str	r1, [r7, #8]
 8009d42:	607a      	str	r2, [r7, #4]
 8009d44:	603b      	str	r3, [r7, #0]
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
 8009d46:	2044      	movs	r0, #68	@ 0x44
 8009d48:	f014 fa28 	bl	801e19c <_Znwj>
 8009d4c:	4603      	mov	r3, r0
 8009d4e:	4698      	mov	r8, r3
 8009d50:	68b8      	ldr	r0, [r7, #8]
 8009d52:	f000 fc5c 	bl	800a60e <_ZSt7forwardIRA5_KcEOT_RNSt16remove_referenceIS3_E4typeE>
 8009d56:	4604      	mov	r4, r0
 8009d58:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8009d5c:	4618      	mov	r0, r3
 8009d5e:	f014 fa2e 	bl	801e1be <_ZNSaIcEC1Ev>
 8009d62:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8009d66:	f107 0314 	add.w	r3, r7, #20
 8009d6a:	4621      	mov	r1, r4
 8009d6c:	4618      	mov	r0, r3
 8009d6e:	f7fb f841 	bl	8004df4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 8009d72:	6878      	ldr	r0, [r7, #4]
 8009d74:	f000 fc56 	bl	800a624 <_ZSt7forwardIP11TIM_TypeDefEOT_RNSt16remove_referenceIS2_E4typeE>
 8009d78:	4603      	mov	r3, r0
 8009d7a:	681d      	ldr	r5, [r3, #0]
 8009d7c:	6838      	ldr	r0, [r7, #0]
 8009d7e:	f000 fc5c 	bl	800a63a <_ZSt7forwardI9IRQn_TypeEOT_RNSt16remove_referenceIS1_E4typeE>
 8009d82:	4603      	mov	r3, r0
 8009d84:	f9b3 6000 	ldrsh.w	r6, [r3]
 8009d88:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8009d8a:	f000 fc61 	bl	800a650 <_ZSt7forwardIRmEOT_RNSt16remove_referenceIS1_E4typeE>
 8009d8e:	4603      	mov	r3, r0
 8009d90:	681c      	ldr	r4, [r3, #0]
 8009d92:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8009d94:	f000 fc67 	bl	800a666 <_ZSt7forwardIRKmEOT_RNSt16remove_referenceIS2_E4typeE>
 8009d98:	4603      	mov	r3, r0
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	b2db      	uxtb	r3, r3
 8009d9e:	f107 0114 	add.w	r1, r7, #20
 8009da2:	9301      	str	r3, [sp, #4]
 8009da4:	9400      	str	r4, [sp, #0]
 8009da6:	4633      	mov	r3, r6
 8009da8:	462a      	mov	r2, r5
 8009daa:	4640      	mov	r0, r8
 8009dac:	f006 fdce 	bl	801094c <_ZN9pruThreadC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP11TIM_TypeDef9IRQn_Typemh>
 8009db0:	4641      	mov	r1, r8
 8009db2:	68f8      	ldr	r0, [r7, #12]
 8009db4:	f000 fc72 	bl	800a69c <_ZNSt10unique_ptrI9pruThreadSt14default_deleteIS0_EEC1IS2_vEEPS0_>
 8009db8:	f107 0314 	add.w	r3, r7, #20
 8009dbc:	4618      	mov	r0, r3
 8009dbe:	f014 fa9a 	bl	801e2f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8009dc2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8009dc6:	4618      	mov	r0, r3
 8009dc8:	f014 f9fa 	bl	801e1c0 <_ZNSaIcED1Ev>
 8009dcc:	bf00      	nop
 8009dce:	68f8      	ldr	r0, [r7, #12]
 8009dd0:	3730      	adds	r7, #48	@ 0x30
 8009dd2:	46bd      	mov	sp, r7
 8009dd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08009dd8 <_ZNSt15__uniq_ptr_implI9pruThreadSt14default_deleteIS0_EEaSEOS3_>:
      __uniq_ptr_impl& operator=(__uniq_ptr_impl&& __u) noexcept
 8009dd8:	b580      	push	{r7, lr}
 8009dda:	b082      	sub	sp, #8
 8009ddc:	af00      	add	r7, sp, #0
 8009dde:	6078      	str	r0, [r7, #4]
 8009de0:	6039      	str	r1, [r7, #0]
	reset(__u.release());
 8009de2:	6838      	ldr	r0, [r7, #0]
 8009de4:	f000 fc89 	bl	800a6fa <_ZNSt15__uniq_ptr_implI9pruThreadSt14default_deleteIS0_EE7releaseEv>
 8009de8:	4603      	mov	r3, r0
 8009dea:	4619      	mov	r1, r3
 8009dec:	6878      	ldr	r0, [r7, #4]
 8009dee:	f000 fc64 	bl	800a6ba <_ZNSt15__uniq_ptr_implI9pruThreadSt14default_deleteIS0_EE5resetEPS0_>
	_M_deleter() = std::forward<_Dp>(__u._M_deleter());
 8009df2:	6838      	ldr	r0, [r7, #0]
 8009df4:	f000 fc96 	bl	800a724 <_ZNSt15__uniq_ptr_implI9pruThreadSt14default_deleteIS0_EE10_M_deleterEv>
 8009df8:	4603      	mov	r3, r0
 8009dfa:	4618      	mov	r0, r3
 8009dfc:	f000 fc9f 	bl	800a73e <_ZSt7forwardISt14default_deleteI9pruThreadEEOT_RNSt16remove_referenceIS3_E4typeE>
 8009e00:	6878      	ldr	r0, [r7, #4]
 8009e02:	f000 fc8f 	bl	800a724 <_ZNSt15__uniq_ptr_implI9pruThreadSt14default_deleteIS0_EE10_M_deleterEv>
	return *this;
 8009e06:	687b      	ldr	r3, [r7, #4]
      }
 8009e08:	4618      	mov	r0, r3
 8009e0a:	3708      	adds	r7, #8
 8009e0c:	46bd      	mov	sp, r7
 8009e0e:	bd80      	pop	{r7, pc}

08009e10 <_ZSt11make_uniqueI9pruThreadJRA6_KcP11TIM_TypeDef9IRQn_TypeRmRKmEENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>:
    make_unique(_Args&&... __args)
 8009e10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009e14:	b08e      	sub	sp, #56	@ 0x38
 8009e16:	af02      	add	r7, sp, #8
 8009e18:	60f8      	str	r0, [r7, #12]
 8009e1a:	60b9      	str	r1, [r7, #8]
 8009e1c:	607a      	str	r2, [r7, #4]
 8009e1e:	603b      	str	r3, [r7, #0]
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
 8009e20:	2044      	movs	r0, #68	@ 0x44
 8009e22:	f014 f9bb 	bl	801e19c <_Znwj>
 8009e26:	4603      	mov	r3, r0
 8009e28:	4698      	mov	r8, r3
 8009e2a:	68b8      	ldr	r0, [r7, #8]
 8009e2c:	f000 fc92 	bl	800a754 <_ZSt7forwardIRA6_KcEOT_RNSt16remove_referenceIS3_E4typeE>
 8009e30:	4604      	mov	r4, r0
 8009e32:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8009e36:	4618      	mov	r0, r3
 8009e38:	f014 f9c1 	bl	801e1be <_ZNSaIcEC1Ev>
 8009e3c:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8009e40:	f107 0314 	add.w	r3, r7, #20
 8009e44:	4621      	mov	r1, r4
 8009e46:	4618      	mov	r0, r3
 8009e48:	f7fa ffd4 	bl	8004df4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 8009e4c:	6878      	ldr	r0, [r7, #4]
 8009e4e:	f000 fbe9 	bl	800a624 <_ZSt7forwardIP11TIM_TypeDefEOT_RNSt16remove_referenceIS2_E4typeE>
 8009e52:	4603      	mov	r3, r0
 8009e54:	681d      	ldr	r5, [r3, #0]
 8009e56:	6838      	ldr	r0, [r7, #0]
 8009e58:	f000 fbef 	bl	800a63a <_ZSt7forwardI9IRQn_TypeEOT_RNSt16remove_referenceIS1_E4typeE>
 8009e5c:	4603      	mov	r3, r0
 8009e5e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8009e62:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8009e64:	f000 fbf4 	bl	800a650 <_ZSt7forwardIRmEOT_RNSt16remove_referenceIS1_E4typeE>
 8009e68:	4603      	mov	r3, r0
 8009e6a:	681c      	ldr	r4, [r3, #0]
 8009e6c:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8009e6e:	f000 fbfa 	bl	800a666 <_ZSt7forwardIRKmEOT_RNSt16remove_referenceIS2_E4typeE>
 8009e72:	4603      	mov	r3, r0
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	b2db      	uxtb	r3, r3
 8009e78:	f107 0114 	add.w	r1, r7, #20
 8009e7c:	9301      	str	r3, [sp, #4]
 8009e7e:	9400      	str	r4, [sp, #0]
 8009e80:	4633      	mov	r3, r6
 8009e82:	462a      	mov	r2, r5
 8009e84:	4640      	mov	r0, r8
 8009e86:	f006 fd61 	bl	801094c <_ZN9pruThreadC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP11TIM_TypeDef9IRQn_Typemh>
 8009e8a:	4641      	mov	r1, r8
 8009e8c:	68f8      	ldr	r0, [r7, #12]
 8009e8e:	f000 fc05 	bl	800a69c <_ZNSt10unique_ptrI9pruThreadSt14default_deleteIS0_EEC1IS2_vEEPS0_>
 8009e92:	f107 0314 	add.w	r3, r7, #20
 8009e96:	4618      	mov	r0, r3
 8009e98:	f014 fa2d 	bl	801e2f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8009e9c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8009ea0:	4618      	mov	r0, r3
 8009ea2:	f014 f98d 	bl	801e1c0 <_ZNSaIcED1Ev>
 8009ea6:	bf00      	nop
 8009ea8:	68f8      	ldr	r0, [r7, #12]
 8009eaa:	3730      	adds	r7, #48	@ 0x30
 8009eac:	46bd      	mov	sp, r7
 8009eae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08009eb2 <_ZNKSt10unique_ptrI17JsonConfigHandlerSt14default_deleteIS0_EEptEv>:
      operator->() const noexcept
 8009eb2:	b580      	push	{r7, lr}
 8009eb4:	b082      	sub	sp, #8
 8009eb6:	af00      	add	r7, sp, #0
 8009eb8:	6078      	str	r0, [r7, #4]
	return get();
 8009eba:	6878      	ldr	r0, [r7, #4]
 8009ebc:	f000 fc55 	bl	800a76a <_ZNKSt10unique_ptrI17JsonConfigHandlerSt14default_deleteIS0_EE3getEv>
 8009ec0:	4603      	mov	r3, r0
      }
 8009ec2:	4618      	mov	r0, r3
 8009ec4:	3708      	adds	r7, #8
 8009ec6:	46bd      	mov	sp, r7
 8009ec8:	bd80      	pop	{r7, pc}

08009eca <_ZNK11ArduinoJson8V730HB229JsonArrayixIjLi0EEENS0_6detail12ElementProxyIS1_EET_>:
  detail::ElementProxy<JsonArray> operator[](T index) const {
 8009eca:	b580      	push	{r7, lr}
 8009ecc:	b084      	sub	sp, #16
 8009ece:	af00      	add	r7, sp, #0
 8009ed0:	60f8      	str	r0, [r7, #12]
 8009ed2:	60b9      	str	r1, [r7, #8]
 8009ed4:	607a      	str	r2, [r7, #4]
    return {*this, size_t(index)};
 8009ed6:	68ba      	ldr	r2, [r7, #8]
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	ca06      	ldmia	r2, {r1, r2}
 8009edc:	68f8      	ldr	r0, [r7, #12]
 8009ede:	f000 fc51 	bl	800a784 <_ZN11ArduinoJson8V730HB226detail12ElementProxyINS0_9JsonArrayEEC1ES3_j>
  }
 8009ee2:	68f8      	ldr	r0, [r7, #12]
 8009ee4:	3710      	adds	r7, #16
 8009ee6:	46bd      	mov	sp, r7
 8009ee8:	bd80      	pop	{r7, pc}

08009eea <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEEcvT_IPKcLi0EEEv>:
  operator T() const {
 8009eea:	b580      	push	{r7, lr}
 8009eec:	b082      	sub	sp, #8
 8009eee:	af00      	add	r7, sp, #0
 8009ef0:	6078      	str	r0, [r7, #4]
    return as<T>();
 8009ef2:	6878      	ldr	r0, [r7, #4]
 8009ef4:	f000 fca1 	bl	800a83a <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEE2asIPKcEET_v>
 8009ef8:	4603      	mov	r3, r0
  }
 8009efa:	4618      	mov	r0, r3
 8009efc:	3708      	adds	r7, #8
 8009efe:	46bd      	mov	sp, r7
 8009f00:	bd80      	pop	{r7, pc}

08009f02 <_ZN11ArduinoJson8V730HB226detail11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEaSImEERS7_RKT_>:
  MemberProxy& operator=(const T& src) {
 8009f02:	b580      	push	{r7, lr}
 8009f04:	b082      	sub	sp, #8
 8009f06:	af00      	add	r7, sp, #0
 8009f08:	6078      	str	r0, [r7, #4]
 8009f0a:	6039      	str	r1, [r7, #0]
    this->set(src);
 8009f0c:	6839      	ldr	r1, [r7, #0]
 8009f0e:	6878      	ldr	r0, [r7, #4]
 8009f10:	f000 fcc8 	bl	800a8a4 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEE3setImEEbRKT_>
    return *this;
 8009f14:	687b      	ldr	r3, [r7, #4]
  }
 8009f16:	4618      	mov	r0, r3
 8009f18:	3708      	adds	r7, #8
 8009f1a:	46bd      	mov	sp, r7
 8009f1c:	bd80      	pop	{r7, pc}

08009f1e <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_12ElementProxyINS0_9JsonArrayEEEEcvT_INS0_11JsonVariantELi0EEEv>:
  operator T() const {
 8009f1e:	b580      	push	{r7, lr}
 8009f20:	b082      	sub	sp, #8
 8009f22:	af00      	add	r7, sp, #0
 8009f24:	6078      	str	r0, [r7, #4]
 8009f26:	6039      	str	r1, [r7, #0]
    return as<T>();
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	6839      	ldr	r1, [r7, #0]
 8009f2c:	4618      	mov	r0, r3
 8009f2e:	f000 fcc7 	bl	800a8c0 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_12ElementProxyINS0_9JsonArrayEEEE2asINS0_11JsonVariantEEET_v>
 8009f32:	bf00      	nop
  }
 8009f34:	6878      	ldr	r0, [r7, #4]
 8009f36:	3708      	adds	r7, #8
 8009f38:	46bd      	mov	sp, r7
 8009f3a:	bd80      	pop	{r7, pc}

08009f3c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
 8009f3c:	b580      	push	{r7, lr}
 8009f3e:	b082      	sub	sp, #8
 8009f40:	af00      	add	r7, sp, #0
 8009f42:	6078      	str	r0, [r7, #4]
	if (_M_pi != nullptr)
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	d004      	beq.n	8009f56 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x1a>
	  _M_pi->_M_release();
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	4618      	mov	r0, r3
 8009f52:	f7fe fe66 	bl	8008c22 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
      }
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	4618      	mov	r0, r3
 8009f5a:	3708      	adds	r7, #8
 8009f5c:	46bd      	mov	sp, r7
 8009f5e:	bd80      	pop	{r7, pc}

08009f60 <_ZNKSt19__shared_ptr_accessI6ModuleLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>:
      operator->() const noexcept
 8009f60:	b580      	push	{r7, lr}
 8009f62:	b082      	sub	sp, #8
 8009f64:	af00      	add	r7, sp, #0
 8009f66:	6078      	str	r0, [r7, #4]
	return _M_get();
 8009f68:	6878      	ldr	r0, [r7, #4]
 8009f6a:	f000 fccd 	bl	800a908 <_ZNKSt19__shared_ptr_accessI6ModuleLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EE6_M_getEv>
 8009f6e:	4603      	mov	r3, r0
      }
 8009f70:	4618      	mov	r0, r3
 8009f72:	3708      	adds	r7, #8
 8009f74:	46bd      	mov	sp, r7
 8009f76:	bd80      	pop	{r7, pc}

08009f78 <_ZNKSt10unique_ptrI9pruThreadSt14default_deleteIS0_EEptEv>:
      operator->() const noexcept
 8009f78:	b580      	push	{r7, lr}
 8009f7a:	b082      	sub	sp, #8
 8009f7c:	af00      	add	r7, sp, #0
 8009f7e:	6078      	str	r0, [r7, #4]
	return get();
 8009f80:	6878      	ldr	r0, [r7, #4]
 8009f82:	f000 fccd 	bl	800a920 <_ZNKSt10unique_ptrI9pruThreadSt14default_deleteIS0_EE3getEv>
 8009f86:	4603      	mov	r3, r0
      }
 8009f88:	4618      	mov	r0, r3
 8009f8a:	3708      	adds	r7, #8
 8009f8c:	46bd      	mov	sp, r7
 8009f8e:	bd80      	pop	{r7, pc}

08009f90 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
      __shared_count(const __shared_count& __r) noexcept
 8009f90:	b580      	push	{r7, lr}
 8009f92:	b082      	sub	sp, #8
 8009f94:	af00      	add	r7, sp, #0
 8009f96:	6078      	str	r0, [r7, #4]
 8009f98:	6039      	str	r1, [r7, #0]
      : _M_pi(__r._M_pi)
 8009f9a:	683b      	ldr	r3, [r7, #0]
 8009f9c:	681a      	ldr	r2, [r3, #0]
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	601a      	str	r2, [r3, #0]
	if (_M_pi != nullptr)
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	d004      	beq.n	8009fb4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0x24>
	  _M_pi->_M_add_ref_copy();
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	4618      	mov	r0, r3
 8009fb0:	f7fe fe28 	bl	8008c04 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE15_M_add_ref_copyEv>
      }
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	4618      	mov	r0, r3
 8009fb8:	3708      	adds	r7, #8
 8009fba:	46bd      	mov	sp, r7
 8009fbc:	bd80      	pop	{r7, pc}

08009fbe <_ZN11ArduinoJson8V730HB226detail11VariantData9setStringINS1_9RamStringEEEbT_PNS1_15ResourceManagerE>:
  if (dup)
    setRawString(dup);
}

template <typename TAdaptedString>
inline bool VariantData::setString(TAdaptedString value,
 8009fbe:	b580      	push	{r7, lr}
 8009fc0:	b086      	sub	sp, #24
 8009fc2:	af00      	add	r7, sp, #0
 8009fc4:	60f8      	str	r0, [r7, #12]
 8009fc6:	4638      	mov	r0, r7
 8009fc8:	e880 000e 	stmia.w	r0, {r1, r2, r3}
                                   ResourceManager* resources) {
  ARDUINOJSON_ASSERT(type_ == VariantType::Null);  // must call clear() first

  if (value.isNull())
 8009fcc:	463b      	mov	r3, r7
 8009fce:	4618      	mov	r0, r3
 8009fd0:	f7f8 fb97 	bl	8002702 <_ZNK11ArduinoJson8V730HB226detail9RamString6isNullEv>
 8009fd4:	4603      	mov	r3, r0
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	d001      	beq.n	8009fde <_ZN11ArduinoJson8V730HB226detail11VariantData9setStringINS1_9RamStringEEEbT_PNS1_15ResourceManagerE+0x20>
    return false;
 8009fda:	2300      	movs	r3, #0
 8009fdc:	e021      	b.n	800a022 <_ZN11ArduinoJson8V730HB226detail11VariantData9setStringINS1_9RamStringEEEbT_PNS1_15ResourceManagerE+0x64>

  if (value.isStatic()) {
 8009fde:	463b      	mov	r3, r7
 8009fe0:	4618      	mov	r0, r3
 8009fe2:	f7fe fe80 	bl	8008ce6 <_ZNK11ArduinoJson8V730HB226detail9RamString8isStaticEv>
 8009fe6:	4603      	mov	r3, r0
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	d00a      	beq.n	800a002 <_ZN11ArduinoJson8V730HB226detail11VariantData9setStringINS1_9RamStringEEEbT_PNS1_15ResourceManagerE+0x44>
    setLinkedString(value.data());
 8009fec:	463b      	mov	r3, r7
 8009fee:	4618      	mov	r0, r3
 8009ff0:	f7f8 fba4 	bl	800273c <_ZNK11ArduinoJson8V730HB226detail9RamString4dataEv>
 8009ff4:	4603      	mov	r3, r0
 8009ff6:	4619      	mov	r1, r3
 8009ff8:	68f8      	ldr	r0, [r7, #12]
 8009ffa:	f7fe ff17 	bl	8008e2c <_ZN11ArduinoJson8V730HB226detail11VariantData15setLinkedStringEPKc>
    return true;
 8009ffe:	2301      	movs	r3, #1
 800a000:	e00f      	b.n	800a022 <_ZN11ArduinoJson8V730HB226detail11VariantData9setStringINS1_9RamStringEEEbT_PNS1_15ResourceManagerE+0x64>
  }

  auto dup = resources->saveString(value);
 800a002:	6a38      	ldr	r0, [r7, #32]
 800a004:	463b      	mov	r3, r7
 800a006:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a008:	f000 fc97 	bl	800a93a <_ZN11ArduinoJson8V730HB226detail15ResourceManager10saveStringINS1_9RamStringEEEPNS1_10StringNodeET_>
 800a00c:	6178      	str	r0, [r7, #20]
  if (dup) {
 800a00e:	697b      	ldr	r3, [r7, #20]
 800a010:	2b00      	cmp	r3, #0
 800a012:	d005      	beq.n	800a020 <_ZN11ArduinoJson8V730HB226detail11VariantData9setStringINS1_9RamStringEEEbT_PNS1_15ResourceManagerE+0x62>
    setOwnedString(dup);
 800a014:	6979      	ldr	r1, [r7, #20]
 800a016:	68f8      	ldr	r0, [r7, #12]
 800a018:	f7f8 fde1 	bl	8002bde <_ZN11ArduinoJson8V730HB226detail11VariantData14setOwnedStringEPNS1_10StringNodeE>
    return true;
 800a01c:	2301      	movs	r3, #1
 800a01e:	e000      	b.n	800a022 <_ZN11ArduinoJson8V730HB226detail11VariantData9setStringINS1_9RamStringEEEbT_PNS1_15ResourceManagerE+0x64>
  }

  return false;
 800a020:	2300      	movs	r3, #0
}
 800a022:	4618      	mov	r0, r3
 800a024:	3718      	adds	r7, #24
 800a026:	46bd      	mov	sp, r7
 800a028:	bd80      	pop	{r7, pc}

0800a02a <_ZNSt15__uniq_ptr_implI14CommsInterfaceSt14default_deleteIS0_EE5resetEPS0_>:
      void reset(pointer __p) noexcept
 800a02a:	b590      	push	{r4, r7, lr}
 800a02c:	b085      	sub	sp, #20
 800a02e:	af00      	add	r7, sp, #0
 800a030:	6078      	str	r0, [r7, #4]
 800a032:	6039      	str	r1, [r7, #0]
	const pointer __old_p = _M_ptr();
 800a034:	6878      	ldr	r0, [r7, #4]
 800a036:	f000 fab4 	bl	800a5a2 <_ZNSt15__uniq_ptr_implI14CommsInterfaceSt14default_deleteIS0_EE6_M_ptrEv>
 800a03a:	4603      	mov	r3, r0
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	60fb      	str	r3, [r7, #12]
	_M_ptr() = __p;
 800a040:	683c      	ldr	r4, [r7, #0]
 800a042:	6878      	ldr	r0, [r7, #4]
 800a044:	f000 faad 	bl	800a5a2 <_ZNSt15__uniq_ptr_implI14CommsInterfaceSt14default_deleteIS0_EE6_M_ptrEv>
 800a048:	4603      	mov	r3, r0
 800a04a:	601c      	str	r4, [r3, #0]
	if (__old_p)
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	2b00      	cmp	r3, #0
 800a050:	d007      	beq.n	800a062 <_ZNSt15__uniq_ptr_implI14CommsInterfaceSt14default_deleteIS0_EE5resetEPS0_+0x38>
	  _M_deleter()(__old_p);
 800a052:	6878      	ldr	r0, [r7, #4]
 800a054:	f000 f81e 	bl	800a094 <_ZNSt15__uniq_ptr_implI14CommsInterfaceSt14default_deleteIS0_EE10_M_deleterEv>
 800a058:	4603      	mov	r3, r0
 800a05a:	68f9      	ldr	r1, [r7, #12]
 800a05c:	4618      	mov	r0, r3
 800a05e:	f000 fac5 	bl	800a5ec <_ZNKSt14default_deleteI14CommsInterfaceEclEPS0_>
      }
 800a062:	bf00      	nop
 800a064:	3714      	adds	r7, #20
 800a066:	46bd      	mov	sp, r7
 800a068:	bd90      	pop	{r4, r7, pc}

0800a06a <_ZNSt15__uniq_ptr_implI14CommsInterfaceSt14default_deleteIS0_EE7releaseEv>:
      pointer release() noexcept
 800a06a:	b580      	push	{r7, lr}
 800a06c:	b084      	sub	sp, #16
 800a06e:	af00      	add	r7, sp, #0
 800a070:	6078      	str	r0, [r7, #4]
	pointer __p = _M_ptr();
 800a072:	6878      	ldr	r0, [r7, #4]
 800a074:	f000 fa95 	bl	800a5a2 <_ZNSt15__uniq_ptr_implI14CommsInterfaceSt14default_deleteIS0_EE6_M_ptrEv>
 800a078:	4603      	mov	r3, r0
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	60fb      	str	r3, [r7, #12]
	_M_ptr() = nullptr;
 800a07e:	6878      	ldr	r0, [r7, #4]
 800a080:	f000 fa8f 	bl	800a5a2 <_ZNSt15__uniq_ptr_implI14CommsInterfaceSt14default_deleteIS0_EE6_M_ptrEv>
 800a084:	4603      	mov	r3, r0
 800a086:	2200      	movs	r2, #0
 800a088:	601a      	str	r2, [r3, #0]
	return __p;
 800a08a:	68fb      	ldr	r3, [r7, #12]
      }
 800a08c:	4618      	mov	r0, r3
 800a08e:	3710      	adds	r7, #16
 800a090:	46bd      	mov	sp, r7
 800a092:	bd80      	pop	{r7, pc}

0800a094 <_ZNSt15__uniq_ptr_implI14CommsInterfaceSt14default_deleteIS0_EE10_M_deleterEv>:
      _Dp&       _M_deleter() noexcept { return std::get<1>(_M_t); }
 800a094:	b580      	push	{r7, lr}
 800a096:	b082      	sub	sp, #8
 800a098:	af00      	add	r7, sp, #0
 800a09a:	6078      	str	r0, [r7, #4]
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	4618      	mov	r0, r3
 800a0a0:	f000 fc71 	bl	800a986 <_ZSt3getILj1EJP14CommsInterfaceSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 800a0a4:	4603      	mov	r3, r0
 800a0a6:	4618      	mov	r0, r3
 800a0a8:	3708      	adds	r7, #8
 800a0aa:	46bd      	mov	sp, r7
 800a0ac:	bd80      	pop	{r7, pc}

0800a0ae <_ZSt7forwardISt14default_deleteI14CommsInterfaceEEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800a0ae:	b480      	push	{r7}
 800a0b0:	b083      	sub	sp, #12
 800a0b2:	af00      	add	r7, sp, #0
 800a0b4:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	4618      	mov	r0, r3
 800a0ba:	370c      	adds	r7, #12
 800a0bc:	46bd      	mov	sp, r7
 800a0be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0c2:	4770      	bx	lr

0800a0c4 <_ZNSt5tupleIJP17JsonConfigHandlerSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>:

    public:
      template<bool _Dummy = true,
	       _ImplicitDefaultCtor<_Dummy, _T1, _T2> = true>
	constexpr
	tuple()
 800a0c4:	b580      	push	{r7, lr}
 800a0c6:	b082      	sub	sp, #8
 800a0c8:	af00      	add	r7, sp, #0
 800a0ca:	6078      	str	r0, [r7, #4]
	noexcept(__nothrow_default_constructible())
	: _Inherited() { }
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	4618      	mov	r0, r3
 800a0d0:	f000 fc65 	bl	800a99e <_ZNSt11_Tuple_implILj0EJP17JsonConfigHandlerSt14default_deleteIS0_EEEC1Ev>
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	4618      	mov	r0, r3
 800a0d8:	3708      	adds	r7, #8
 800a0da:	46bd      	mov	sp, r7
 800a0dc:	bd80      	pop	{r7, pc}

0800a0de <_ZNSt15__uniq_ptr_implI17JsonConfigHandlerSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer&   _M_ptr() noexcept { return std::get<0>(_M_t); }
 800a0de:	b580      	push	{r7, lr}
 800a0e0:	b082      	sub	sp, #8
 800a0e2:	af00      	add	r7, sp, #0
 800a0e4:	6078      	str	r0, [r7, #4]
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	4618      	mov	r0, r3
 800a0ea:	f000 fc68 	bl	800a9be <_ZSt3getILj0EJP17JsonConfigHandlerSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 800a0ee:	4603      	mov	r3, r0
 800a0f0:	4618      	mov	r0, r3
 800a0f2:	3708      	adds	r7, #8
 800a0f4:	46bd      	mov	sp, r7
 800a0f6:	bd80      	pop	{r7, pc}

0800a0f8 <_ZNSt10unique_ptrI17JsonConfigHandlerSt14default_deleteIS0_EE11get_deleterEv>:
      get_deleter() noexcept
 800a0f8:	b580      	push	{r7, lr}
 800a0fa:	b082      	sub	sp, #8
 800a0fc:	af00      	add	r7, sp, #0
 800a0fe:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	4618      	mov	r0, r3
 800a104:	f000 f934 	bl	800a370 <_ZNSt15__uniq_ptr_implI17JsonConfigHandlerSt14default_deleteIS0_EE10_M_deleterEv>
 800a108:	4603      	mov	r3, r0
 800a10a:	4618      	mov	r0, r3
 800a10c:	3708      	adds	r7, #8
 800a10e:	46bd      	mov	sp, r7
 800a110:	bd80      	pop	{r7, pc}

0800a112 <_ZSt4moveIRP17JsonConfigHandlerEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 800a112:	b480      	push	{r7}
 800a114:	b083      	sub	sp, #12
 800a116:	af00      	add	r7, sp, #0
 800a118:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	4618      	mov	r0, r3
 800a11e:	370c      	adds	r7, #12
 800a120:	46bd      	mov	sp, r7
 800a122:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a126:	4770      	bx	lr

0800a128 <_ZN17JsonConfigHandlerD1Ev>:
#include "../lib/ArduinoJson7/ArduinoJson.h"
#include "fatfs.h"

class Remora; //forward declaration

class JsonConfigHandler {
 800a128:	b580      	push	{r7, lr}
 800a12a:	b082      	sub	sp, #8
 800a12c:	af00      	add	r7, sp, #0
 800a12e:	6078      	str	r0, [r7, #4]
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	3320      	adds	r3, #32
 800a134:	4618      	mov	r0, r3
 800a136:	f7fd fc0e 	bl	8007956 <_ZN11ArduinoJson8V730HB2212JsonDocumentD1Ev>
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	3304      	adds	r3, #4
 800a13e:	4618      	mov	r0, r3
 800a140:	f014 f8d9 	bl	801e2f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	4618      	mov	r0, r3
 800a148:	3708      	adds	r7, #8
 800a14a:	46bd      	mov	sp, r7
 800a14c:	bd80      	pop	{r7, pc}

0800a14e <_ZNKSt14default_deleteI17JsonConfigHandlerEclEPS0_>:
      operator()(_Tp* __ptr) const
 800a14e:	b590      	push	{r4, r7, lr}
 800a150:	b083      	sub	sp, #12
 800a152:	af00      	add	r7, sp, #0
 800a154:	6078      	str	r0, [r7, #4]
 800a156:	6039      	str	r1, [r7, #0]
	delete __ptr;
 800a158:	683c      	ldr	r4, [r7, #0]
 800a15a:	2c00      	cmp	r4, #0
 800a15c:	d006      	beq.n	800a16c <_ZNKSt14default_deleteI17JsonConfigHandlerEclEPS0_+0x1e>
 800a15e:	4620      	mov	r0, r4
 800a160:	f7ff ffe2 	bl	800a128 <_ZN17JsonConfigHandlerD1Ev>
 800a164:	216c      	movs	r1, #108	@ 0x6c
 800a166:	4620      	mov	r0, r4
 800a168:	f014 f807 	bl	801e17a <_ZdlPvj>
      }
 800a16c:	bf00      	nop
 800a16e:	370c      	adds	r7, #12
 800a170:	46bd      	mov	sp, r7
 800a172:	bd90      	pop	{r4, r7, pc}

0800a174 <_ZNSt5tupleIJP12CommsHandlerSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>:
	tuple()
 800a174:	b580      	push	{r7, lr}
 800a176:	b082      	sub	sp, #8
 800a178:	af00      	add	r7, sp, #0
 800a17a:	6078      	str	r0, [r7, #4]
	: _Inherited() { }
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	4618      	mov	r0, r3
 800a180:	f000 fc2a 	bl	800a9d8 <_ZNSt11_Tuple_implILj0EJP12CommsHandlerSt14default_deleteIS0_EEEC1Ev>
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	4618      	mov	r0, r3
 800a188:	3708      	adds	r7, #8
 800a18a:	46bd      	mov	sp, r7
 800a18c:	bd80      	pop	{r7, pc}

0800a18e <_ZNSt15__uniq_ptr_implI12CommsHandlerSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer&   _M_ptr() noexcept { return std::get<0>(_M_t); }
 800a18e:	b580      	push	{r7, lr}
 800a190:	b082      	sub	sp, #8
 800a192:	af00      	add	r7, sp, #0
 800a194:	6078      	str	r0, [r7, #4]
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	4618      	mov	r0, r3
 800a19a:	f000 fc2d 	bl	800a9f8 <_ZSt3getILj0EJP12CommsHandlerSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 800a19e:	4603      	mov	r3, r0
 800a1a0:	4618      	mov	r0, r3
 800a1a2:	3708      	adds	r7, #8
 800a1a4:	46bd      	mov	sp, r7
 800a1a6:	bd80      	pop	{r7, pc}

0800a1a8 <_ZNSt10unique_ptrI12CommsHandlerSt14default_deleteIS0_EE11get_deleterEv>:
      get_deleter() noexcept
 800a1a8:	b580      	push	{r7, lr}
 800a1aa:	b082      	sub	sp, #8
 800a1ac:	af00      	add	r7, sp, #0
 800a1ae:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	4618      	mov	r0, r3
 800a1b4:	f000 f9a2 	bl	800a4fc <_ZNSt15__uniq_ptr_implI12CommsHandlerSt14default_deleteIS0_EE10_M_deleterEv>
 800a1b8:	4603      	mov	r3, r0
 800a1ba:	4618      	mov	r0, r3
 800a1bc:	3708      	adds	r7, #8
 800a1be:	46bd      	mov	sp, r7
 800a1c0:	bd80      	pop	{r7, pc}

0800a1c2 <_ZSt4moveIRP12CommsHandlerEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 800a1c2:	b480      	push	{r7}
 800a1c4:	b083      	sub	sp, #12
 800a1c6:	af00      	add	r7, sp, #0
 800a1c8:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	4618      	mov	r0, r3
 800a1ce:	370c      	adds	r7, #12
 800a1d0:	46bd      	mov	sp, r7
 800a1d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1d6:	4770      	bx	lr

0800a1d8 <_ZNKSt14default_deleteI12CommsHandlerEclEPS0_>:
      operator()(_Tp* __ptr) const
 800a1d8:	b580      	push	{r7, lr}
 800a1da:	b082      	sub	sp, #8
 800a1dc:	af00      	add	r7, sp, #0
 800a1de:	6078      	str	r0, [r7, #4]
 800a1e0:	6039      	str	r1, [r7, #0]
	delete __ptr;
 800a1e2:	683b      	ldr	r3, [r7, #0]
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	d004      	beq.n	800a1f2 <_ZNKSt14default_deleteI12CommsHandlerEclEPS0_+0x1a>
 800a1e8:	681a      	ldr	r2, [r3, #0]
 800a1ea:	3204      	adds	r2, #4
 800a1ec:	6812      	ldr	r2, [r2, #0]
 800a1ee:	4618      	mov	r0, r3
 800a1f0:	4790      	blx	r2
      }
 800a1f2:	bf00      	nop
 800a1f4:	3708      	adds	r7, #8
 800a1f6:	46bd      	mov	sp, r7
 800a1f8:	bd80      	pop	{r7, pc}

0800a1fa <_ZNSt5tupleIJP9pruThreadSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>:
	tuple()
 800a1fa:	b580      	push	{r7, lr}
 800a1fc:	b082      	sub	sp, #8
 800a1fe:	af00      	add	r7, sp, #0
 800a200:	6078      	str	r0, [r7, #4]
	: _Inherited() { }
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	4618      	mov	r0, r3
 800a206:	f000 fc04 	bl	800aa12 <_ZNSt11_Tuple_implILj0EJP9pruThreadSt14default_deleteIS0_EEEC1Ev>
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	4618      	mov	r0, r3
 800a20e:	3708      	adds	r7, #8
 800a210:	46bd      	mov	sp, r7
 800a212:	bd80      	pop	{r7, pc}

0800a214 <_ZNSt15__uniq_ptr_implI9pruThreadSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer&   _M_ptr() noexcept { return std::get<0>(_M_t); }
 800a214:	b580      	push	{r7, lr}
 800a216:	b082      	sub	sp, #8
 800a218:	af00      	add	r7, sp, #0
 800a21a:	6078      	str	r0, [r7, #4]
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	4618      	mov	r0, r3
 800a220:	f000 fc07 	bl	800aa32 <_ZSt3getILj0EJP9pruThreadSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 800a224:	4603      	mov	r3, r0
 800a226:	4618      	mov	r0, r3
 800a228:	3708      	adds	r7, #8
 800a22a:	46bd      	mov	sp, r7
 800a22c:	bd80      	pop	{r7, pc}

0800a22e <_ZNSt10unique_ptrI9pruThreadSt14default_deleteIS0_EE11get_deleterEv>:
      get_deleter() noexcept
 800a22e:	b580      	push	{r7, lr}
 800a230:	b082      	sub	sp, #8
 800a232:	af00      	add	r7, sp, #0
 800a234:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	4618      	mov	r0, r3
 800a23a:	f000 fa73 	bl	800a724 <_ZNSt15__uniq_ptr_implI9pruThreadSt14default_deleteIS0_EE10_M_deleterEv>
 800a23e:	4603      	mov	r3, r0
 800a240:	4618      	mov	r0, r3
 800a242:	3708      	adds	r7, #8
 800a244:	46bd      	mov	sp, r7
 800a246:	bd80      	pop	{r7, pc}

0800a248 <_ZSt4moveIRP9pruThreadEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 800a248:	b480      	push	{r7}
 800a24a:	b083      	sub	sp, #12
 800a24c:	af00      	add	r7, sp, #0
 800a24e:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	4618      	mov	r0, r3
 800a254:	370c      	adds	r7, #12
 800a256:	46bd      	mov	sp, r7
 800a258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a25c:	4770      	bx	lr

0800a25e <_ZN9pruThreadD1Ev>:

using namespace std;

class Module;

class pruThread
 800a25e:	b580      	push	{r7, lr}
 800a260:	b082      	sub	sp, #8
 800a262:	af00      	add	r7, sp, #0
 800a264:	6078      	str	r0, [r7, #4]
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	3338      	adds	r3, #56	@ 0x38
 800a26a:	4618      	mov	r0, r3
 800a26c:	f000 fbee 	bl	800aa4c <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EED1Ev>
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	332c      	adds	r3, #44	@ 0x2c
 800a274:	4618      	mov	r0, r3
 800a276:	f000 fbe9 	bl	800aa4c <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EED1Ev>
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	4618      	mov	r0, r3
 800a27e:	f014 f83a 	bl	801e2f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	4618      	mov	r0, r3
 800a286:	3708      	adds	r7, #8
 800a288:	46bd      	mov	sp, r7
 800a28a:	bd80      	pop	{r7, pc}

0800a28c <_ZNKSt14default_deleteI9pruThreadEclEPS0_>:
      operator()(_Tp* __ptr) const
 800a28c:	b590      	push	{r4, r7, lr}
 800a28e:	b083      	sub	sp, #12
 800a290:	af00      	add	r7, sp, #0
 800a292:	6078      	str	r0, [r7, #4]
 800a294:	6039      	str	r1, [r7, #0]
	delete __ptr;
 800a296:	683c      	ldr	r4, [r7, #0]
 800a298:	2c00      	cmp	r4, #0
 800a29a:	d006      	beq.n	800a2aa <_ZNKSt14default_deleteI9pruThreadEclEPS0_+0x1e>
 800a29c:	4620      	mov	r0, r4
 800a29e:	f7ff ffde 	bl	800a25e <_ZN9pruThreadD1Ev>
 800a2a2:	2144      	movs	r1, #68	@ 0x44
 800a2a4:	4620      	mov	r0, r4
 800a2a6:	f013 ff68 	bl	801e17a <_ZdlPvj>
      }
 800a2aa:	bf00      	nop
 800a2ac:	370c      	adds	r7, #12
 800a2ae:	46bd      	mov	sp, r7
 800a2b0:	bd90      	pop	{r4, r7, pc}

0800a2b2 <_ZSt7forwardIP6RemoraEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800a2b2:	b480      	push	{r7}
 800a2b4:	b083      	sub	sp, #12
 800a2b6:	af00      	add	r7, sp, #0
 800a2b8:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	4618      	mov	r0, r3
 800a2be:	370c      	adds	r7, #12
 800a2c0:	46bd      	mov	sp, r7
 800a2c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2c6:	4770      	bx	lr

0800a2c8 <_ZNSt15__uniq_ptr_dataI17JsonConfigHandlerSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEPS0_>:
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 800a2c8:	b580      	push	{r7, lr}
 800a2ca:	b082      	sub	sp, #8
 800a2cc:	af00      	add	r7, sp, #0
 800a2ce:	6078      	str	r0, [r7, #4]
 800a2d0:	6039      	str	r1, [r7, #0]
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	683a      	ldr	r2, [r7, #0]
 800a2d6:	4611      	mov	r1, r2
 800a2d8:	4618      	mov	r0, r3
 800a2da:	f000 fbd2 	bl	800aa82 <_ZNSt15__uniq_ptr_implI17JsonConfigHandlerSt14default_deleteIS0_EEC1EPS0_>
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	4618      	mov	r0, r3
 800a2e2:	3708      	adds	r7, #8
 800a2e4:	46bd      	mov	sp, r7
 800a2e6:	bd80      	pop	{r7, pc}

0800a2e8 <_ZNSt10unique_ptrI17JsonConfigHandlerSt14default_deleteIS0_EEC1IS2_vEEPS0_>:
	unique_ptr(pointer __p) noexcept
 800a2e8:	b580      	push	{r7, lr}
 800a2ea:	b082      	sub	sp, #8
 800a2ec:	af00      	add	r7, sp, #0
 800a2ee:	6078      	str	r0, [r7, #4]
 800a2f0:	6039      	str	r1, [r7, #0]
	: _M_t(__p)
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	6839      	ldr	r1, [r7, #0]
 800a2f6:	4618      	mov	r0, r3
 800a2f8:	f7ff ffe6 	bl	800a2c8 <_ZNSt15__uniq_ptr_dataI17JsonConfigHandlerSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEPS0_>
        { }
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	4618      	mov	r0, r3
 800a300:	3708      	adds	r7, #8
 800a302:	46bd      	mov	sp, r7
 800a304:	bd80      	pop	{r7, pc}

0800a306 <_ZNSt15__uniq_ptr_implI17JsonConfigHandlerSt14default_deleteIS0_EE5resetEPS0_>:
      void reset(pointer __p) noexcept
 800a306:	b590      	push	{r4, r7, lr}
 800a308:	b085      	sub	sp, #20
 800a30a:	af00      	add	r7, sp, #0
 800a30c:	6078      	str	r0, [r7, #4]
 800a30e:	6039      	str	r1, [r7, #0]
	const pointer __old_p = _M_ptr();
 800a310:	6878      	ldr	r0, [r7, #4]
 800a312:	f7ff fee4 	bl	800a0de <_ZNSt15__uniq_ptr_implI17JsonConfigHandlerSt14default_deleteIS0_EE6_M_ptrEv>
 800a316:	4603      	mov	r3, r0
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	60fb      	str	r3, [r7, #12]
	_M_ptr() = __p;
 800a31c:	683c      	ldr	r4, [r7, #0]
 800a31e:	6878      	ldr	r0, [r7, #4]
 800a320:	f7ff fedd 	bl	800a0de <_ZNSt15__uniq_ptr_implI17JsonConfigHandlerSt14default_deleteIS0_EE6_M_ptrEv>
 800a324:	4603      	mov	r3, r0
 800a326:	601c      	str	r4, [r3, #0]
	if (__old_p)
 800a328:	68fb      	ldr	r3, [r7, #12]
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	d007      	beq.n	800a33e <_ZNSt15__uniq_ptr_implI17JsonConfigHandlerSt14default_deleteIS0_EE5resetEPS0_+0x38>
	  _M_deleter()(__old_p);
 800a32e:	6878      	ldr	r0, [r7, #4]
 800a330:	f000 f81e 	bl	800a370 <_ZNSt15__uniq_ptr_implI17JsonConfigHandlerSt14default_deleteIS0_EE10_M_deleterEv>
 800a334:	4603      	mov	r3, r0
 800a336:	68f9      	ldr	r1, [r7, #12]
 800a338:	4618      	mov	r0, r3
 800a33a:	f7ff ff08 	bl	800a14e <_ZNKSt14default_deleteI17JsonConfigHandlerEclEPS0_>
      }
 800a33e:	bf00      	nop
 800a340:	3714      	adds	r7, #20
 800a342:	46bd      	mov	sp, r7
 800a344:	bd90      	pop	{r4, r7, pc}

0800a346 <_ZNSt15__uniq_ptr_implI17JsonConfigHandlerSt14default_deleteIS0_EE7releaseEv>:
      pointer release() noexcept
 800a346:	b580      	push	{r7, lr}
 800a348:	b084      	sub	sp, #16
 800a34a:	af00      	add	r7, sp, #0
 800a34c:	6078      	str	r0, [r7, #4]
	pointer __p = _M_ptr();
 800a34e:	6878      	ldr	r0, [r7, #4]
 800a350:	f7ff fec5 	bl	800a0de <_ZNSt15__uniq_ptr_implI17JsonConfigHandlerSt14default_deleteIS0_EE6_M_ptrEv>
 800a354:	4603      	mov	r3, r0
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	60fb      	str	r3, [r7, #12]
	_M_ptr() = nullptr;
 800a35a:	6878      	ldr	r0, [r7, #4]
 800a35c:	f7ff febf 	bl	800a0de <_ZNSt15__uniq_ptr_implI17JsonConfigHandlerSt14default_deleteIS0_EE6_M_ptrEv>
 800a360:	4603      	mov	r3, r0
 800a362:	2200      	movs	r2, #0
 800a364:	601a      	str	r2, [r3, #0]
	return __p;
 800a366:	68fb      	ldr	r3, [r7, #12]
      }
 800a368:	4618      	mov	r0, r3
 800a36a:	3710      	adds	r7, #16
 800a36c:	46bd      	mov	sp, r7
 800a36e:	bd80      	pop	{r7, pc}

0800a370 <_ZNSt15__uniq_ptr_implI17JsonConfigHandlerSt14default_deleteIS0_EE10_M_deleterEv>:
      _Dp&       _M_deleter() noexcept { return std::get<1>(_M_t); }
 800a370:	b580      	push	{r7, lr}
 800a372:	b082      	sub	sp, #8
 800a374:	af00      	add	r7, sp, #0
 800a376:	6078      	str	r0, [r7, #4]
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	4618      	mov	r0, r3
 800a37c:	f000 fb95 	bl	800aaaa <_ZSt3getILj1EJP17JsonConfigHandlerSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 800a380:	4603      	mov	r3, r0
 800a382:	4618      	mov	r0, r3
 800a384:	3708      	adds	r7, #8
 800a386:	46bd      	mov	sp, r7
 800a388:	bd80      	pop	{r7, pc}

0800a38a <_ZSt7forwardISt14default_deleteI17JsonConfigHandlerEEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800a38a:	b480      	push	{r7}
 800a38c:	b083      	sub	sp, #12
 800a38e:	af00      	add	r7, sp, #0
 800a390:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	4618      	mov	r0, r3
 800a396:	370c      	adds	r7, #12
 800a398:	46bd      	mov	sp, r7
 800a39a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a39e:	4770      	bx	lr

0800a3a0 <_ZSt7forwardIRPV8rxData_tEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800a3a0:	b480      	push	{r7}
 800a3a2:	b083      	sub	sp, #12
 800a3a4:	af00      	add	r7, sp, #0
 800a3a6:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	4618      	mov	r0, r3
 800a3ac:	370c      	adds	r7, #12
 800a3ae:	46bd      	mov	sp, r7
 800a3b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3b4:	4770      	bx	lr

0800a3b6 <_ZSt7forwardIRPV8txData_tEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800a3b6:	b480      	push	{r7}
 800a3b8:	b083      	sub	sp, #12
 800a3ba:	af00      	add	r7, sp, #0
 800a3bc:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	4618      	mov	r0, r3
 800a3c2:	370c      	adds	r7, #12
 800a3c4:	46bd      	mov	sp, r7
 800a3c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ca:	4770      	bx	lr

0800a3cc <_ZSt7forwardIP11SPI_TypeDefEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800a3cc:	b480      	push	{r7}
 800a3ce:	b083      	sub	sp, #12
 800a3d0:	af00      	add	r7, sp, #0
 800a3d2:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	4618      	mov	r0, r3
 800a3d8:	370c      	adds	r7, #12
 800a3da:	46bd      	mov	sp, r7
 800a3dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3e0:	4770      	bx	lr

0800a3e2 <_ZNSt15__uniq_ptr_dataI8SPICommsSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEPS0_>:
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 800a3e2:	b580      	push	{r7, lr}
 800a3e4:	b082      	sub	sp, #8
 800a3e6:	af00      	add	r7, sp, #0
 800a3e8:	6078      	str	r0, [r7, #4]
 800a3ea:	6039      	str	r1, [r7, #0]
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	683a      	ldr	r2, [r7, #0]
 800a3f0:	4611      	mov	r1, r2
 800a3f2:	4618      	mov	r0, r3
 800a3f4:	f000 fb65 	bl	800aac2 <_ZNSt15__uniq_ptr_implI8SPICommsSt14default_deleteIS0_EEC1EPS0_>
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	4618      	mov	r0, r3
 800a3fc:	3708      	adds	r7, #8
 800a3fe:	46bd      	mov	sp, r7
 800a400:	bd80      	pop	{r7, pc}

0800a402 <_ZNSt10unique_ptrI8SPICommsSt14default_deleteIS0_EEC1IS2_vEEPS0_>:
	unique_ptr(pointer __p) noexcept
 800a402:	b580      	push	{r7, lr}
 800a404:	b082      	sub	sp, #8
 800a406:	af00      	add	r7, sp, #0
 800a408:	6078      	str	r0, [r7, #4]
 800a40a:	6039      	str	r1, [r7, #0]
	: _M_t(__p)
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	6839      	ldr	r1, [r7, #0]
 800a410:	4618      	mov	r0, r3
 800a412:	f7ff ffe6 	bl	800a3e2 <_ZNSt15__uniq_ptr_dataI8SPICommsSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEPS0_>
        { }
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	4618      	mov	r0, r3
 800a41a:	3708      	adds	r7, #8
 800a41c:	46bd      	mov	sp, r7
 800a41e:	bd80      	pop	{r7, pc}

0800a420 <_ZNSt15__uniq_ptr_implI8SPICommsSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer&   _M_ptr() noexcept { return std::get<0>(_M_t); }
 800a420:	b580      	push	{r7, lr}
 800a422:	b082      	sub	sp, #8
 800a424:	af00      	add	r7, sp, #0
 800a426:	6078      	str	r0, [r7, #4]
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	4618      	mov	r0, r3
 800a42c:	f000 fb5d 	bl	800aaea <_ZSt3getILj0EJP8SPICommsSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 800a430:	4603      	mov	r3, r0
 800a432:	4618      	mov	r0, r3
 800a434:	3708      	adds	r7, #8
 800a436:	46bd      	mov	sp, r7
 800a438:	bd80      	pop	{r7, pc}

0800a43a <_ZNSt10unique_ptrI8SPICommsSt14default_deleteIS0_EE11get_deleterEv>:
      get_deleter() noexcept
 800a43a:	b580      	push	{r7, lr}
 800a43c:	b082      	sub	sp, #8
 800a43e:	af00      	add	r7, sp, #0
 800a440:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	4618      	mov	r0, r3
 800a446:	f000 fb5d 	bl	800ab04 <_ZNSt15__uniq_ptr_implI8SPICommsSt14default_deleteIS0_EE10_M_deleterEv>
 800a44a:	4603      	mov	r3, r0
 800a44c:	4618      	mov	r0, r3
 800a44e:	3708      	adds	r7, #8
 800a450:	46bd      	mov	sp, r7
 800a452:	bd80      	pop	{r7, pc}

0800a454 <_ZNSt15__uniq_ptr_dataI12CommsHandlerSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEPS0_>:
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 800a454:	b580      	push	{r7, lr}
 800a456:	b082      	sub	sp, #8
 800a458:	af00      	add	r7, sp, #0
 800a45a:	6078      	str	r0, [r7, #4]
 800a45c:	6039      	str	r1, [r7, #0]
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	683a      	ldr	r2, [r7, #0]
 800a462:	4611      	mov	r1, r2
 800a464:	4618      	mov	r0, r3
 800a466:	f000 fb5a 	bl	800ab1e <_ZNSt15__uniq_ptr_implI12CommsHandlerSt14default_deleteIS0_EEC1EPS0_>
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	4618      	mov	r0, r3
 800a46e:	3708      	adds	r7, #8
 800a470:	46bd      	mov	sp, r7
 800a472:	bd80      	pop	{r7, pc}

0800a474 <_ZNSt10unique_ptrI12CommsHandlerSt14default_deleteIS0_EEC1IS2_vEEPS0_>:
	unique_ptr(pointer __p) noexcept
 800a474:	b580      	push	{r7, lr}
 800a476:	b082      	sub	sp, #8
 800a478:	af00      	add	r7, sp, #0
 800a47a:	6078      	str	r0, [r7, #4]
 800a47c:	6039      	str	r1, [r7, #0]
	: _M_t(__p)
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	6839      	ldr	r1, [r7, #0]
 800a482:	4618      	mov	r0, r3
 800a484:	f7ff ffe6 	bl	800a454 <_ZNSt15__uniq_ptr_dataI12CommsHandlerSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEPS0_>
        { }
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	4618      	mov	r0, r3
 800a48c:	3708      	adds	r7, #8
 800a48e:	46bd      	mov	sp, r7
 800a490:	bd80      	pop	{r7, pc}

0800a492 <_ZNSt15__uniq_ptr_implI12CommsHandlerSt14default_deleteIS0_EE5resetEPS0_>:
      void reset(pointer __p) noexcept
 800a492:	b590      	push	{r4, r7, lr}
 800a494:	b085      	sub	sp, #20
 800a496:	af00      	add	r7, sp, #0
 800a498:	6078      	str	r0, [r7, #4]
 800a49a:	6039      	str	r1, [r7, #0]
	const pointer __old_p = _M_ptr();
 800a49c:	6878      	ldr	r0, [r7, #4]
 800a49e:	f7ff fe76 	bl	800a18e <_ZNSt15__uniq_ptr_implI12CommsHandlerSt14default_deleteIS0_EE6_M_ptrEv>
 800a4a2:	4603      	mov	r3, r0
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	60fb      	str	r3, [r7, #12]
	_M_ptr() = __p;
 800a4a8:	683c      	ldr	r4, [r7, #0]
 800a4aa:	6878      	ldr	r0, [r7, #4]
 800a4ac:	f7ff fe6f 	bl	800a18e <_ZNSt15__uniq_ptr_implI12CommsHandlerSt14default_deleteIS0_EE6_M_ptrEv>
 800a4b0:	4603      	mov	r3, r0
 800a4b2:	601c      	str	r4, [r3, #0]
	if (__old_p)
 800a4b4:	68fb      	ldr	r3, [r7, #12]
 800a4b6:	2b00      	cmp	r3, #0
 800a4b8:	d007      	beq.n	800a4ca <_ZNSt15__uniq_ptr_implI12CommsHandlerSt14default_deleteIS0_EE5resetEPS0_+0x38>
	  _M_deleter()(__old_p);
 800a4ba:	6878      	ldr	r0, [r7, #4]
 800a4bc:	f000 f81e 	bl	800a4fc <_ZNSt15__uniq_ptr_implI12CommsHandlerSt14default_deleteIS0_EE10_M_deleterEv>
 800a4c0:	4603      	mov	r3, r0
 800a4c2:	68f9      	ldr	r1, [r7, #12]
 800a4c4:	4618      	mov	r0, r3
 800a4c6:	f7ff fe87 	bl	800a1d8 <_ZNKSt14default_deleteI12CommsHandlerEclEPS0_>
      }
 800a4ca:	bf00      	nop
 800a4cc:	3714      	adds	r7, #20
 800a4ce:	46bd      	mov	sp, r7
 800a4d0:	bd90      	pop	{r4, r7, pc}

0800a4d2 <_ZNSt15__uniq_ptr_implI12CommsHandlerSt14default_deleteIS0_EE7releaseEv>:
      pointer release() noexcept
 800a4d2:	b580      	push	{r7, lr}
 800a4d4:	b084      	sub	sp, #16
 800a4d6:	af00      	add	r7, sp, #0
 800a4d8:	6078      	str	r0, [r7, #4]
	pointer __p = _M_ptr();
 800a4da:	6878      	ldr	r0, [r7, #4]
 800a4dc:	f7ff fe57 	bl	800a18e <_ZNSt15__uniq_ptr_implI12CommsHandlerSt14default_deleteIS0_EE6_M_ptrEv>
 800a4e0:	4603      	mov	r3, r0
 800a4e2:	681b      	ldr	r3, [r3, #0]
 800a4e4:	60fb      	str	r3, [r7, #12]
	_M_ptr() = nullptr;
 800a4e6:	6878      	ldr	r0, [r7, #4]
 800a4e8:	f7ff fe51 	bl	800a18e <_ZNSt15__uniq_ptr_implI12CommsHandlerSt14default_deleteIS0_EE6_M_ptrEv>
 800a4ec:	4603      	mov	r3, r0
 800a4ee:	2200      	movs	r2, #0
 800a4f0:	601a      	str	r2, [r3, #0]
	return __p;
 800a4f2:	68fb      	ldr	r3, [r7, #12]
      }
 800a4f4:	4618      	mov	r0, r3
 800a4f6:	3710      	adds	r7, #16
 800a4f8:	46bd      	mov	sp, r7
 800a4fa:	bd80      	pop	{r7, pc}

0800a4fc <_ZNSt15__uniq_ptr_implI12CommsHandlerSt14default_deleteIS0_EE10_M_deleterEv>:
      _Dp&       _M_deleter() noexcept { return std::get<1>(_M_t); }
 800a4fc:	b580      	push	{r7, lr}
 800a4fe:	b082      	sub	sp, #8
 800a500:	af00      	add	r7, sp, #0
 800a502:	6078      	str	r0, [r7, #4]
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	4618      	mov	r0, r3
 800a508:	f000 fb1d 	bl	800ab46 <_ZSt3getILj1EJP12CommsHandlerSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 800a50c:	4603      	mov	r3, r0
 800a50e:	4618      	mov	r0, r3
 800a510:	3708      	adds	r7, #8
 800a512:	46bd      	mov	sp, r7
 800a514:	bd80      	pop	{r7, pc}

0800a516 <_ZSt7forwardISt14default_deleteI12CommsHandlerEEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800a516:	b480      	push	{r7}
 800a518:	b083      	sub	sp, #12
 800a51a:	af00      	add	r7, sp, #0
 800a51c:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	4618      	mov	r0, r3
 800a522:	370c      	adds	r7, #12
 800a524:	46bd      	mov	sp, r7
 800a526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a52a:	4770      	bx	lr

0800a52c <_ZNKSt10unique_ptrI12CommsHandlerSt14default_deleteIS0_EE3getEv>:
      get() const noexcept
 800a52c:	b580      	push	{r7, lr}
 800a52e:	b082      	sub	sp, #8
 800a530:	af00      	add	r7, sp, #0
 800a532:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	4618      	mov	r0, r3
 800a538:	f000 fb11 	bl	800ab5e <_ZNKSt15__uniq_ptr_implI12CommsHandlerSt14default_deleteIS0_EE6_M_ptrEv>
 800a53c:	4603      	mov	r3, r0
 800a53e:	4618      	mov	r0, r3
 800a540:	3708      	adds	r7, #8
 800a542:	46bd      	mov	sp, r7
 800a544:	bd80      	pop	{r7, pc}

0800a546 <_ZNSt10unique_ptrI8SPICommsSt14default_deleteIS0_EE7releaseEv>:
      release() noexcept
 800a546:	b580      	push	{r7, lr}
 800a548:	b082      	sub	sp, #8
 800a54a:	af00      	add	r7, sp, #0
 800a54c:	6078      	str	r0, [r7, #4]
      { return _M_t.release(); }
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	4618      	mov	r0, r3
 800a552:	f000 fb12 	bl	800ab7a <_ZNSt15__uniq_ptr_implI8SPICommsSt14default_deleteIS0_EE7releaseEv>
 800a556:	4603      	mov	r3, r0
 800a558:	4618      	mov	r0, r3
 800a55a:	3708      	adds	r7, #8
 800a55c:	46bd      	mov	sp, r7
 800a55e:	bd80      	pop	{r7, pc}

0800a560 <_ZSt7forwardISt14default_deleteI8SPICommsEEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800a560:	b480      	push	{r7}
 800a562:	b083      	sub	sp, #12
 800a564:	af00      	add	r7, sp, #0
 800a566:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	4618      	mov	r0, r3
 800a56c:	370c      	adds	r7, #12
 800a56e:	46bd      	mov	sp, r7
 800a570:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a574:	4770      	bx	lr

0800a576 <_ZNSt15__uniq_ptr_implI14CommsInterfaceSt14default_deleteIS0_EEC1IS1_I8SPICommsEEEPS0_OT_>:
	__uniq_ptr_impl(pointer __p, _Del&& __d)
 800a576:	b590      	push	{r4, r7, lr}
 800a578:	b085      	sub	sp, #20
 800a57a:	af00      	add	r7, sp, #0
 800a57c:	60f8      	str	r0, [r7, #12]
 800a57e:	60b9      	str	r1, [r7, #8]
 800a580:	607a      	str	r2, [r7, #4]
	: _M_t(__p, std::forward<_Del>(__d)) { }
 800a582:	68fc      	ldr	r4, [r7, #12]
 800a584:	6878      	ldr	r0, [r7, #4]
 800a586:	f7ff ffeb 	bl	800a560 <_ZSt7forwardISt14default_deleteI8SPICommsEEOT_RNSt16remove_referenceIS3_E4typeE>
 800a58a:	4602      	mov	r2, r0
 800a58c:	f107 0308 	add.w	r3, r7, #8
 800a590:	4619      	mov	r1, r3
 800a592:	4620      	mov	r0, r4
 800a594:	f000 fb06 	bl	800aba4 <_ZNSt5tupleIJP14CommsInterfaceSt14default_deleteIS0_EEEC1IRS1_S2_I8SPICommsELb1EEEOT_OT0_>
 800a598:	68fb      	ldr	r3, [r7, #12]
 800a59a:	4618      	mov	r0, r3
 800a59c:	3714      	adds	r7, #20
 800a59e:	46bd      	mov	sp, r7
 800a5a0:	bd90      	pop	{r4, r7, pc}

0800a5a2 <_ZNSt15__uniq_ptr_implI14CommsInterfaceSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer&   _M_ptr() noexcept { return std::get<0>(_M_t); }
 800a5a2:	b580      	push	{r7, lr}
 800a5a4:	b082      	sub	sp, #8
 800a5a6:	af00      	add	r7, sp, #0
 800a5a8:	6078      	str	r0, [r7, #4]
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	4618      	mov	r0, r3
 800a5ae:	f000 fb12 	bl	800abd6 <_ZSt3getILj0EJP14CommsInterfaceSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 800a5b2:	4603      	mov	r3, r0
 800a5b4:	4618      	mov	r0, r3
 800a5b6:	3708      	adds	r7, #8
 800a5b8:	46bd      	mov	sp, r7
 800a5ba:	bd80      	pop	{r7, pc}

0800a5bc <_ZNSt10unique_ptrI14CommsInterfaceSt14default_deleteIS0_EE11get_deleterEv>:
      get_deleter() noexcept
 800a5bc:	b580      	push	{r7, lr}
 800a5be:	b082      	sub	sp, #8
 800a5c0:	af00      	add	r7, sp, #0
 800a5c2:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	4618      	mov	r0, r3
 800a5c8:	f7ff fd64 	bl	800a094 <_ZNSt15__uniq_ptr_implI14CommsInterfaceSt14default_deleteIS0_EE10_M_deleterEv>
 800a5cc:	4603      	mov	r3, r0
 800a5ce:	4618      	mov	r0, r3
 800a5d0:	3708      	adds	r7, #8
 800a5d2:	46bd      	mov	sp, r7
 800a5d4:	bd80      	pop	{r7, pc}

0800a5d6 <_ZSt4moveIRP14CommsInterfaceEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 800a5d6:	b480      	push	{r7}
 800a5d8:	b083      	sub	sp, #12
 800a5da:	af00      	add	r7, sp, #0
 800a5dc:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	4618      	mov	r0, r3
 800a5e2:	370c      	adds	r7, #12
 800a5e4:	46bd      	mov	sp, r7
 800a5e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ea:	4770      	bx	lr

0800a5ec <_ZNKSt14default_deleteI14CommsInterfaceEclEPS0_>:
      operator()(_Tp* __ptr) const
 800a5ec:	b580      	push	{r7, lr}
 800a5ee:	b082      	sub	sp, #8
 800a5f0:	af00      	add	r7, sp, #0
 800a5f2:	6078      	str	r0, [r7, #4]
 800a5f4:	6039      	str	r1, [r7, #0]
	delete __ptr;
 800a5f6:	683b      	ldr	r3, [r7, #0]
 800a5f8:	2b00      	cmp	r3, #0
 800a5fa:	d004      	beq.n	800a606 <_ZNKSt14default_deleteI14CommsInterfaceEclEPS0_+0x1a>
 800a5fc:	681a      	ldr	r2, [r3, #0]
 800a5fe:	3204      	adds	r2, #4
 800a600:	6812      	ldr	r2, [r2, #0]
 800a602:	4618      	mov	r0, r3
 800a604:	4790      	blx	r2
      }
 800a606:	bf00      	nop
 800a608:	3708      	adds	r7, #8
 800a60a:	46bd      	mov	sp, r7
 800a60c:	bd80      	pop	{r7, pc}

0800a60e <_ZSt7forwardIRA5_KcEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800a60e:	b480      	push	{r7}
 800a610:	b083      	sub	sp, #12
 800a612:	af00      	add	r7, sp, #0
 800a614:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	4618      	mov	r0, r3
 800a61a:	370c      	adds	r7, #12
 800a61c:	46bd      	mov	sp, r7
 800a61e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a622:	4770      	bx	lr

0800a624 <_ZSt7forwardIP11TIM_TypeDefEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800a624:	b480      	push	{r7}
 800a626:	b083      	sub	sp, #12
 800a628:	af00      	add	r7, sp, #0
 800a62a:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	4618      	mov	r0, r3
 800a630:	370c      	adds	r7, #12
 800a632:	46bd      	mov	sp, r7
 800a634:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a638:	4770      	bx	lr

0800a63a <_ZSt7forwardI9IRQn_TypeEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800a63a:	b480      	push	{r7}
 800a63c:	b083      	sub	sp, #12
 800a63e:	af00      	add	r7, sp, #0
 800a640:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	4618      	mov	r0, r3
 800a646:	370c      	adds	r7, #12
 800a648:	46bd      	mov	sp, r7
 800a64a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a64e:	4770      	bx	lr

0800a650 <_ZSt7forwardIRmEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800a650:	b480      	push	{r7}
 800a652:	b083      	sub	sp, #12
 800a654:	af00      	add	r7, sp, #0
 800a656:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	4618      	mov	r0, r3
 800a65c:	370c      	adds	r7, #12
 800a65e:	46bd      	mov	sp, r7
 800a660:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a664:	4770      	bx	lr

0800a666 <_ZSt7forwardIRKmEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800a666:	b480      	push	{r7}
 800a668:	b083      	sub	sp, #12
 800a66a:	af00      	add	r7, sp, #0
 800a66c:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	4618      	mov	r0, r3
 800a672:	370c      	adds	r7, #12
 800a674:	46bd      	mov	sp, r7
 800a676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a67a:	4770      	bx	lr

0800a67c <_ZNSt15__uniq_ptr_dataI9pruThreadSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEPS0_>:
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 800a67c:	b580      	push	{r7, lr}
 800a67e:	b082      	sub	sp, #8
 800a680:	af00      	add	r7, sp, #0
 800a682:	6078      	str	r0, [r7, #4]
 800a684:	6039      	str	r1, [r7, #0]
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	683a      	ldr	r2, [r7, #0]
 800a68a:	4611      	mov	r1, r2
 800a68c:	4618      	mov	r0, r3
 800a68e:	f000 faaf 	bl	800abf0 <_ZNSt15__uniq_ptr_implI9pruThreadSt14default_deleteIS0_EEC1EPS0_>
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	4618      	mov	r0, r3
 800a696:	3708      	adds	r7, #8
 800a698:	46bd      	mov	sp, r7
 800a69a:	bd80      	pop	{r7, pc}

0800a69c <_ZNSt10unique_ptrI9pruThreadSt14default_deleteIS0_EEC1IS2_vEEPS0_>:
	unique_ptr(pointer __p) noexcept
 800a69c:	b580      	push	{r7, lr}
 800a69e:	b082      	sub	sp, #8
 800a6a0:	af00      	add	r7, sp, #0
 800a6a2:	6078      	str	r0, [r7, #4]
 800a6a4:	6039      	str	r1, [r7, #0]
	: _M_t(__p)
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	6839      	ldr	r1, [r7, #0]
 800a6aa:	4618      	mov	r0, r3
 800a6ac:	f7ff ffe6 	bl	800a67c <_ZNSt15__uniq_ptr_dataI9pruThreadSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEPS0_>
        { }
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	4618      	mov	r0, r3
 800a6b4:	3708      	adds	r7, #8
 800a6b6:	46bd      	mov	sp, r7
 800a6b8:	bd80      	pop	{r7, pc}

0800a6ba <_ZNSt15__uniq_ptr_implI9pruThreadSt14default_deleteIS0_EE5resetEPS0_>:
      void reset(pointer __p) noexcept
 800a6ba:	b590      	push	{r4, r7, lr}
 800a6bc:	b085      	sub	sp, #20
 800a6be:	af00      	add	r7, sp, #0
 800a6c0:	6078      	str	r0, [r7, #4]
 800a6c2:	6039      	str	r1, [r7, #0]
	const pointer __old_p = _M_ptr();
 800a6c4:	6878      	ldr	r0, [r7, #4]
 800a6c6:	f7ff fda5 	bl	800a214 <_ZNSt15__uniq_ptr_implI9pruThreadSt14default_deleteIS0_EE6_M_ptrEv>
 800a6ca:	4603      	mov	r3, r0
 800a6cc:	681b      	ldr	r3, [r3, #0]
 800a6ce:	60fb      	str	r3, [r7, #12]
	_M_ptr() = __p;
 800a6d0:	683c      	ldr	r4, [r7, #0]
 800a6d2:	6878      	ldr	r0, [r7, #4]
 800a6d4:	f7ff fd9e 	bl	800a214 <_ZNSt15__uniq_ptr_implI9pruThreadSt14default_deleteIS0_EE6_M_ptrEv>
 800a6d8:	4603      	mov	r3, r0
 800a6da:	601c      	str	r4, [r3, #0]
	if (__old_p)
 800a6dc:	68fb      	ldr	r3, [r7, #12]
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	d007      	beq.n	800a6f2 <_ZNSt15__uniq_ptr_implI9pruThreadSt14default_deleteIS0_EE5resetEPS0_+0x38>
	  _M_deleter()(__old_p);
 800a6e2:	6878      	ldr	r0, [r7, #4]
 800a6e4:	f000 f81e 	bl	800a724 <_ZNSt15__uniq_ptr_implI9pruThreadSt14default_deleteIS0_EE10_M_deleterEv>
 800a6e8:	4603      	mov	r3, r0
 800a6ea:	68f9      	ldr	r1, [r7, #12]
 800a6ec:	4618      	mov	r0, r3
 800a6ee:	f7ff fdcd 	bl	800a28c <_ZNKSt14default_deleteI9pruThreadEclEPS0_>
      }
 800a6f2:	bf00      	nop
 800a6f4:	3714      	adds	r7, #20
 800a6f6:	46bd      	mov	sp, r7
 800a6f8:	bd90      	pop	{r4, r7, pc}

0800a6fa <_ZNSt15__uniq_ptr_implI9pruThreadSt14default_deleteIS0_EE7releaseEv>:
      pointer release() noexcept
 800a6fa:	b580      	push	{r7, lr}
 800a6fc:	b084      	sub	sp, #16
 800a6fe:	af00      	add	r7, sp, #0
 800a700:	6078      	str	r0, [r7, #4]
	pointer __p = _M_ptr();
 800a702:	6878      	ldr	r0, [r7, #4]
 800a704:	f7ff fd86 	bl	800a214 <_ZNSt15__uniq_ptr_implI9pruThreadSt14default_deleteIS0_EE6_M_ptrEv>
 800a708:	4603      	mov	r3, r0
 800a70a:	681b      	ldr	r3, [r3, #0]
 800a70c:	60fb      	str	r3, [r7, #12]
	_M_ptr() = nullptr;
 800a70e:	6878      	ldr	r0, [r7, #4]
 800a710:	f7ff fd80 	bl	800a214 <_ZNSt15__uniq_ptr_implI9pruThreadSt14default_deleteIS0_EE6_M_ptrEv>
 800a714:	4603      	mov	r3, r0
 800a716:	2200      	movs	r2, #0
 800a718:	601a      	str	r2, [r3, #0]
	return __p;
 800a71a:	68fb      	ldr	r3, [r7, #12]
      }
 800a71c:	4618      	mov	r0, r3
 800a71e:	3710      	adds	r7, #16
 800a720:	46bd      	mov	sp, r7
 800a722:	bd80      	pop	{r7, pc}

0800a724 <_ZNSt15__uniq_ptr_implI9pruThreadSt14default_deleteIS0_EE10_M_deleterEv>:
      _Dp&       _M_deleter() noexcept { return std::get<1>(_M_t); }
 800a724:	b580      	push	{r7, lr}
 800a726:	b082      	sub	sp, #8
 800a728:	af00      	add	r7, sp, #0
 800a72a:	6078      	str	r0, [r7, #4]
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	4618      	mov	r0, r3
 800a730:	f000 fa72 	bl	800ac18 <_ZSt3getILj1EJP9pruThreadSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 800a734:	4603      	mov	r3, r0
 800a736:	4618      	mov	r0, r3
 800a738:	3708      	adds	r7, #8
 800a73a:	46bd      	mov	sp, r7
 800a73c:	bd80      	pop	{r7, pc}

0800a73e <_ZSt7forwardISt14default_deleteI9pruThreadEEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800a73e:	b480      	push	{r7}
 800a740:	b083      	sub	sp, #12
 800a742:	af00      	add	r7, sp, #0
 800a744:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	4618      	mov	r0, r3
 800a74a:	370c      	adds	r7, #12
 800a74c:	46bd      	mov	sp, r7
 800a74e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a752:	4770      	bx	lr

0800a754 <_ZSt7forwardIRA6_KcEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800a754:	b480      	push	{r7}
 800a756:	b083      	sub	sp, #12
 800a758:	af00      	add	r7, sp, #0
 800a75a:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	4618      	mov	r0, r3
 800a760:	370c      	adds	r7, #12
 800a762:	46bd      	mov	sp, r7
 800a764:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a768:	4770      	bx	lr

0800a76a <_ZNKSt10unique_ptrI17JsonConfigHandlerSt14default_deleteIS0_EE3getEv>:
      get() const noexcept
 800a76a:	b580      	push	{r7, lr}
 800a76c:	b082      	sub	sp, #8
 800a76e:	af00      	add	r7, sp, #0
 800a770:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	4618      	mov	r0, r3
 800a776:	f000 fa5b 	bl	800ac30 <_ZNKSt15__uniq_ptr_implI17JsonConfigHandlerSt14default_deleteIS0_EE6_M_ptrEv>
 800a77a:	4603      	mov	r3, r0
 800a77c:	4618      	mov	r0, r3
 800a77e:	3708      	adds	r7, #8
 800a780:	46bd      	mov	sp, r7
 800a782:	bd80      	pop	{r7, pc}

0800a784 <_ZN11ArduinoJson8V730HB226detail12ElementProxyINS0_9JsonArrayEEC1ES3_j>:

  template <typename>
  friend class ElementProxy;

 public:
  ElementProxy(TUpstream upstream, size_t index)
 800a784:	b480      	push	{r7}
 800a786:	b085      	sub	sp, #20
 800a788:	af00      	add	r7, sp, #0
 800a78a:	60f8      	str	r0, [r7, #12]
 800a78c:	1d38      	adds	r0, r7, #4
 800a78e:	e880 0006 	stmia.w	r0, {r1, r2}
 800a792:	603b      	str	r3, [r7, #0]
      : upstream_(upstream), index_(index) {}
 800a794:	68fb      	ldr	r3, [r7, #12]
 800a796:	3304      	adds	r3, #4
 800a798:	1d3a      	adds	r2, r7, #4
 800a79a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a79e:	e883 0003 	stmia.w	r3, {r0, r1}
 800a7a2:	68fb      	ldr	r3, [r7, #12]
 800a7a4:	683a      	ldr	r2, [r7, #0]
 800a7a6:	60da      	str	r2, [r3, #12]
 800a7a8:	68fb      	ldr	r3, [r7, #12]
 800a7aa:	4618      	mov	r0, r3
 800a7ac:	3714      	adds	r7, #20
 800a7ae:	46bd      	mov	sp, r7
 800a7b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7b4:	4770      	bx	lr

0800a7b6 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_12ElementProxyINS0_9JsonArrayEEEE7derivedEv>:
  const TDerived& derived() const {
 800a7b6:	b480      	push	{r7}
 800a7b8:	b083      	sub	sp, #12
 800a7ba:	af00      	add	r7, sp, #0
 800a7bc:	6078      	str	r0, [r7, #4]
    return static_cast<const TDerived&>(*this);
 800a7be:	687b      	ldr	r3, [r7, #4]
  }
 800a7c0:	4618      	mov	r0, r3
 800a7c2:	370c      	adds	r7, #12
 800a7c4:	46bd      	mov	sp, r7
 800a7c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ca:	4770      	bx	lr

0800a7cc <_ZN11ArduinoJson8V730HB226detail12ElementProxyINS0_9JsonArrayEEC1ERKS4_>:
    return *this;
  }

 private:
  // clang-format off
  ElementProxy(const ElementProxy& src)  // Error here? See https://arduinojson.org/v7/proxy-non-copyable/
 800a7cc:	b480      	push	{r7}
 800a7ce:	b083      	sub	sp, #12
 800a7d0:	af00      	add	r7, sp, #0
 800a7d2:	6078      	str	r0, [r7, #4]
 800a7d4:	6039      	str	r1, [r7, #0]
      : upstream_(src.upstream_), index_(src.index_) {}
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	683a      	ldr	r2, [r7, #0]
 800a7da:	3304      	adds	r3, #4
 800a7dc:	3204      	adds	r2, #4
 800a7de:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a7e2:	e883 0003 	stmia.w	r3, {r0, r1}
 800a7e6:	683b      	ldr	r3, [r7, #0]
 800a7e8:	68da      	ldr	r2, [r3, #12]
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	60da      	str	r2, [r3, #12]
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	4618      	mov	r0, r3
 800a7f2:	370c      	adds	r7, #12
 800a7f4:	46bd      	mov	sp, r7
 800a7f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7fa:	4770      	bx	lr

0800a7fc <_ZN11ArduinoJson8V730HB226detail11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEC1ES5_S6_>:
  MemberProxy(TUpstream upstream, AdaptedString key)
 800a7fc:	b082      	sub	sp, #8
 800a7fe:	b580      	push	{r7, lr}
 800a800:	b082      	sub	sp, #8
 800a802:	af00      	add	r7, sp, #0
 800a804:	6078      	str	r0, [r7, #4]
 800a806:	6039      	str	r1, [r7, #0]
 800a808:	f107 0110 	add.w	r1, r7, #16
 800a80c:	e881 000c 	stmia.w	r1, {r2, r3}
      : upstream_(upstream), key_(key) {}
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	3304      	adds	r3, #4
 800a814:	6839      	ldr	r1, [r7, #0]
 800a816:	4618      	mov	r0, r3
 800a818:	f7ff ffd8 	bl	800a7cc <_ZN11ArduinoJson8V730HB226detail12ElementProxyINS0_9JsonArrayEEC1ERKS4_>
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	3314      	adds	r3, #20
 800a820:	f107 0210 	add.w	r2, r7, #16
 800a824:	ca07      	ldmia	r2, {r0, r1, r2}
 800a826:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	4618      	mov	r0, r3
 800a82e:	3708      	adds	r7, #8
 800a830:	46bd      	mov	sp, r7
 800a832:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a836:	b002      	add	sp, #8
 800a838:	4770      	bx	lr

0800a83a <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEE2asIPKcEET_v>:
inline T VariantRefBase<TDerived>::as() const {
 800a83a:	b590      	push	{r4, r7, lr}
 800a83c:	b087      	sub	sp, #28
 800a83e:	af00      	add	r7, sp, #0
 800a840:	6078      	str	r0, [r7, #4]
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	617b      	str	r3, [r7, #20]
 800a846:	697b      	ldr	r3, [r7, #20]
 800a848:	613b      	str	r3, [r7, #16]
    return ArduinoJson::JsonVariantConst(getData(), getResourceManager());
 800a84a:	6938      	ldr	r0, [r7, #16]
 800a84c:	f000 fbd3 	bl	800aff6 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEE7getDataEv>
 800a850:	4604      	mov	r4, r0
 800a852:	6938      	ldr	r0, [r7, #16]
 800a854:	f000 fbdf 	bl	800b016 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEE18getResourceManagerEv>
 800a858:	4602      	mov	r2, r0
 800a85a:	f107 0308 	add.w	r3, r7, #8
 800a85e:	4621      	mov	r1, r4
 800a860:	4618      	mov	r0, r3
 800a862:	f7f8 fafe 	bl	8002e62 <_ZN11ArduinoJson8V730HB2216JsonVariantConstC1EPKNS0_6detail11VariantDataEPKNS2_15ResourceManagerE>
    return getVariantConst();
 800a866:	bf00      	nop
  return Converter<T>::fromJson(getVariant<variant_type>());
 800a868:	f107 0308 	add.w	r3, r7, #8
 800a86c:	e893 0003 	ldmia.w	r3, {r0, r1}
 800a870:	f7f8 fff0 	bl	8003854 <_ZN11ArduinoJson8V730HB229ConverterIPKcvE8fromJsonENS0_16JsonVariantConstE>
 800a874:	4603      	mov	r3, r0
}
 800a876:	4618      	mov	r0, r3
 800a878:	371c      	adds	r7, #28
 800a87a:	46bd      	mov	sp, r7
 800a87c:	bd90      	pop	{r4, r7, pc}

0800a87e <_ZN11ArduinoJson8V730HB226detail11adaptStringIRA11_KcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES9_NS1_9remove_cvINS1_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEOS9_>:
AdaptedString<TString> adaptString(TString&& s) {
 800a87e:	b580      	push	{r7, lr}
 800a880:	b082      	sub	sp, #8
 800a882:	af00      	add	r7, sp, #0
 800a884:	6078      	str	r0, [r7, #4]
 800a886:	6039      	str	r1, [r7, #0]
  return StringAdapterFor<TString>::adapt(detail::forward<TString>(s));
 800a888:	6838      	ldr	r0, [r7, #0]
 800a88a:	f000 f9df 	bl	800ac4c <_ZN11ArduinoJson8V730HB226detail7forwardIRA11_KcEEOT_RNS1_16remove_referenceIS6_E4typeE>
 800a88e:	4602      	mov	r2, r0
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	4611      	mov	r1, r2
 800a894:	4618      	mov	r0, r3
 800a896:	f000 f9e4 	bl	800ac62 <_ZN11ArduinoJson8V730HB226detail13StringAdapterIRA11_KcvE5adaptES5_>
 800a89a:	bf00      	nop
}
 800a89c:	6878      	ldr	r0, [r7, #4]
 800a89e:	3708      	adds	r7, #8
 800a8a0:	46bd      	mov	sp, r7
 800a8a2:	bd80      	pop	{r7, pc}

0800a8a4 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEE3setImEEbRKT_>:
  bool set(const T& value) const {
 800a8a4:	b580      	push	{r7, lr}
 800a8a6:	b082      	sub	sp, #8
 800a8a8:	af00      	add	r7, sp, #0
 800a8aa:	6078      	str	r0, [r7, #4]
 800a8ac:	6039      	str	r1, [r7, #0]
    return doSet<Converter<TypeForConverter>>(value);
 800a8ae:	6839      	ldr	r1, [r7, #0]
 800a8b0:	6878      	ldr	r0, [r7, #4]
 800a8b2:	f000 f9e5 	bl	800ac80 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEE5doSetINS0_9ConverterImvEEmEEbRKT0_>
 800a8b6:	4603      	mov	r3, r0
  }
 800a8b8:	4618      	mov	r0, r3
 800a8ba:	3708      	adds	r7, #8
 800a8bc:	46bd      	mov	sp, r7
 800a8be:	bd80      	pop	{r7, pc}

0800a8c0 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_12ElementProxyINS0_9JsonArrayEEEE2asINS0_11JsonVariantEEET_v>:
inline T VariantRefBase<TDerived>::as() const {
 800a8c0:	b590      	push	{r4, r7, lr}
 800a8c2:	b087      	sub	sp, #28
 800a8c4:	af00      	add	r7, sp, #0
 800a8c6:	6078      	str	r0, [r7, #4]
 800a8c8:	6039      	str	r1, [r7, #0]
 800a8ca:	683b      	ldr	r3, [r7, #0]
 800a8cc:	617b      	str	r3, [r7, #20]
 800a8ce:	697b      	ldr	r3, [r7, #20]
 800a8d0:	613b      	str	r3, [r7, #16]
  return JsonVariant(getData(), getResourceManager());
 800a8d2:	6938      	ldr	r0, [r7, #16]
 800a8d4:	f000 fd69 	bl	800b3aa <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_12ElementProxyINS0_9JsonArrayEEEE7getDataEv>
 800a8d8:	4604      	mov	r4, r0
 800a8da:	6938      	ldr	r0, [r7, #16]
 800a8dc:	f000 fd75 	bl	800b3ca <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_12ElementProxyINS0_9JsonArrayEEEE18getResourceManagerEv>
 800a8e0:	4602      	mov	r2, r0
 800a8e2:	f107 0308 	add.w	r3, r7, #8
 800a8e6:	4621      	mov	r1, r4
 800a8e8:	4618      	mov	r0, r3
 800a8ea:	f7f8 fae5 	bl	8002eb8 <_ZN11ArduinoJson8V730HB2211JsonVariantC1EPNS0_6detail11VariantDataEPNS2_15ResourceManagerE>
    return getVariant();
 800a8ee:	bf00      	nop
  return Converter<T>::fromJson(getVariant<variant_type>());
 800a8f0:	6878      	ldr	r0, [r7, #4]
 800a8f2:	f107 0308 	add.w	r3, r7, #8
 800a8f6:	e893 0006 	ldmia.w	r3, {r1, r2}
 800a8fa:	f7fe faa8 	bl	8008e4e <_ZN11ArduinoJson8V730HB229ConverterINS0_11JsonVariantEvE8fromJsonES2_>
 800a8fe:	bf00      	nop
}
 800a900:	6878      	ldr	r0, [r7, #4]
 800a902:	371c      	adds	r7, #28
 800a904:	46bd      	mov	sp, r7
 800a906:	bd90      	pop	{r4, r7, pc}

0800a908 <_ZNKSt19__shared_ptr_accessI6ModuleLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EE6_M_getEv>:
      _M_get() const noexcept
 800a908:	b580      	push	{r7, lr}
 800a90a:	b082      	sub	sp, #8
 800a90c:	af00      	add	r7, sp, #0
 800a90e:	6078      	str	r0, [r7, #4]
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
 800a910:	6878      	ldr	r0, [r7, #4]
 800a912:	f000 f9c4 	bl	800ac9e <_ZNKSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EE3getEv>
 800a916:	4603      	mov	r3, r0
 800a918:	4618      	mov	r0, r3
 800a91a:	3708      	adds	r7, #8
 800a91c:	46bd      	mov	sp, r7
 800a91e:	bd80      	pop	{r7, pc}

0800a920 <_ZNKSt10unique_ptrI9pruThreadSt14default_deleteIS0_EE3getEv>:
      get() const noexcept
 800a920:	b580      	push	{r7, lr}
 800a922:	b082      	sub	sp, #8
 800a924:	af00      	add	r7, sp, #0
 800a926:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	4618      	mov	r0, r3
 800a92c:	f000 f9c3 	bl	800acb6 <_ZNKSt15__uniq_ptr_implI9pruThreadSt14default_deleteIS0_EE6_M_ptrEv>
 800a930:	4603      	mov	r3, r0
 800a932:	4618      	mov	r0, r3
 800a934:	3708      	adds	r7, #8
 800a936:	46bd      	mov	sp, r7
 800a938:	bd80      	pop	{r7, pc}

0800a93a <_ZN11ArduinoJson8V730HB226detail15ResourceManager10saveStringINS1_9RamStringEEEPNS1_10StringNodeET_>:
  StringNode* saveString(TAdaptedString str) {
 800a93a:	b580      	push	{r7, lr}
 800a93c:	b088      	sub	sp, #32
 800a93e:	af02      	add	r7, sp, #8
 800a940:	60f8      	str	r0, [r7, #12]
 800a942:	4638      	mov	r0, r7
 800a944:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    if (str.isNull())
 800a948:	463b      	mov	r3, r7
 800a94a:	4618      	mov	r0, r3
 800a94c:	f7f7 fed9 	bl	8002702 <_ZNK11ArduinoJson8V730HB226detail9RamString6isNullEv>
 800a950:	4603      	mov	r3, r0
 800a952:	2b00      	cmp	r3, #0
 800a954:	d001      	beq.n	800a95a <_ZN11ArduinoJson8V730HB226detail15ResourceManager10saveStringINS1_9RamStringEEEPNS1_10StringNodeET_+0x20>
      return 0;
 800a956:	2300      	movs	r3, #0
 800a958:	e011      	b.n	800a97e <_ZN11ArduinoJson8V730HB226detail15ResourceManager10saveStringINS1_9RamStringEEEPNS1_10StringNodeET_+0x44>
    auto node = stringPool_.add(str, allocator_);
 800a95a:	68fb      	ldr	r3, [r7, #12]
 800a95c:	f103 0008 	add.w	r0, r3, #8
 800a960:	68fb      	ldr	r3, [r7, #12]
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	9300      	str	r3, [sp, #0]
 800a966:	463b      	mov	r3, r7
 800a968:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a96a:	f000 f9b2 	bl	800acd2 <_ZN11ArduinoJson8V730HB226detail10StringPool3addINS1_9RamStringEEEPNS1_10StringNodeET_PNS0_9AllocatorE>
 800a96e:	6178      	str	r0, [r7, #20]
    if (!node)
 800a970:	697b      	ldr	r3, [r7, #20]
 800a972:	2b00      	cmp	r3, #0
 800a974:	d102      	bne.n	800a97c <_ZN11ArduinoJson8V730HB226detail15ResourceManager10saveStringINS1_9RamStringEEEPNS1_10StringNodeET_+0x42>
      overflowed_ = true;
 800a976:	68fb      	ldr	r3, [r7, #12]
 800a978:	2201      	movs	r2, #1
 800a97a:	711a      	strb	r2, [r3, #4]
    return node;
 800a97c:	697b      	ldr	r3, [r7, #20]
  }
 800a97e:	4618      	mov	r0, r3
 800a980:	3718      	adds	r7, #24
 800a982:	46bd      	mov	sp, r7
 800a984:	bd80      	pop	{r7, pc}

0800a986 <_ZSt3getILj1EJP14CommsInterfaceSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    __get_helper(const tuple<_Types...>&) = delete;

  /// Return a reference to the ith element of a tuple.
  template<size_t __i, typename... _Elements>
    constexpr __tuple_element_t<__i, tuple<_Elements...>>&
    get(tuple<_Elements...>& __t) noexcept
 800a986:	b580      	push	{r7, lr}
 800a988:	b082      	sub	sp, #8
 800a98a:	af00      	add	r7, sp, #0
 800a98c:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800a98e:	6878      	ldr	r0, [r7, #4]
 800a990:	f000 f9df 	bl	800ad52 <_ZSt12__get_helperILj1ESt14default_deleteI14CommsInterfaceEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>
 800a994:	4603      	mov	r3, r0
 800a996:	4618      	mov	r0, r3
 800a998:	3708      	adds	r7, #8
 800a99a:	46bd      	mov	sp, r7
 800a99c:	bd80      	pop	{r7, pc}

0800a99e <_ZNSt11_Tuple_implILj0EJP17JsonConfigHandlerSt14default_deleteIS0_EEEC1Ev>:
      constexpr _Tuple_impl()
 800a99e:	b580      	push	{r7, lr}
 800a9a0:	b082      	sub	sp, #8
 800a9a2:	af00      	add	r7, sp, #0
 800a9a4:	6078      	str	r0, [r7, #4]
      : _Inherited(), _Base() { }
 800a9a6:	6878      	ldr	r0, [r7, #4]
 800a9a8:	f000 f9df 	bl	800ad6a <_ZNSt11_Tuple_implILj1EJSt14default_deleteI17JsonConfigHandlerEEEC1Ev>
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	4618      	mov	r0, r3
 800a9b0:	f000 f9e7 	bl	800ad82 <_ZNSt10_Head_baseILj0EP17JsonConfigHandlerLb0EEC1Ev>
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	4618      	mov	r0, r3
 800a9b8:	3708      	adds	r7, #8
 800a9ba:	46bd      	mov	sp, r7
 800a9bc:	bd80      	pop	{r7, pc}

0800a9be <_ZSt3getILj0EJP17JsonConfigHandlerSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 800a9be:	b580      	push	{r7, lr}
 800a9c0:	b082      	sub	sp, #8
 800a9c2:	af00      	add	r7, sp, #0
 800a9c4:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	4618      	mov	r0, r3
 800a9ca:	f000 f9e8 	bl	800ad9e <_ZSt12__get_helperILj0EP17JsonConfigHandlerJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 800a9ce:	4603      	mov	r3, r0
 800a9d0:	4618      	mov	r0, r3
 800a9d2:	3708      	adds	r7, #8
 800a9d4:	46bd      	mov	sp, r7
 800a9d6:	bd80      	pop	{r7, pc}

0800a9d8 <_ZNSt11_Tuple_implILj0EJP12CommsHandlerSt14default_deleteIS0_EEEC1Ev>:
      constexpr _Tuple_impl()
 800a9d8:	b580      	push	{r7, lr}
 800a9da:	b082      	sub	sp, #8
 800a9dc:	af00      	add	r7, sp, #0
 800a9de:	6078      	str	r0, [r7, #4]
      : _Inherited(), _Base() { }
 800a9e0:	6878      	ldr	r0, [r7, #4]
 800a9e2:	f000 f9e8 	bl	800adb6 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI12CommsHandlerEEEC1Ev>
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	4618      	mov	r0, r3
 800a9ea:	f000 f9f0 	bl	800adce <_ZNSt10_Head_baseILj0EP12CommsHandlerLb0EEC1Ev>
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	4618      	mov	r0, r3
 800a9f2:	3708      	adds	r7, #8
 800a9f4:	46bd      	mov	sp, r7
 800a9f6:	bd80      	pop	{r7, pc}

0800a9f8 <_ZSt3getILj0EJP12CommsHandlerSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 800a9f8:	b580      	push	{r7, lr}
 800a9fa:	b082      	sub	sp, #8
 800a9fc:	af00      	add	r7, sp, #0
 800a9fe:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	4618      	mov	r0, r3
 800aa04:	f000 f9f1 	bl	800adea <_ZSt12__get_helperILj0EP12CommsHandlerJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 800aa08:	4603      	mov	r3, r0
 800aa0a:	4618      	mov	r0, r3
 800aa0c:	3708      	adds	r7, #8
 800aa0e:	46bd      	mov	sp, r7
 800aa10:	bd80      	pop	{r7, pc}

0800aa12 <_ZNSt11_Tuple_implILj0EJP9pruThreadSt14default_deleteIS0_EEEC1Ev>:
      constexpr _Tuple_impl()
 800aa12:	b580      	push	{r7, lr}
 800aa14:	b082      	sub	sp, #8
 800aa16:	af00      	add	r7, sp, #0
 800aa18:	6078      	str	r0, [r7, #4]
      : _Inherited(), _Base() { }
 800aa1a:	6878      	ldr	r0, [r7, #4]
 800aa1c:	f000 f9f1 	bl	800ae02 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI9pruThreadEEEC1Ev>
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	4618      	mov	r0, r3
 800aa24:	f000 f9f9 	bl	800ae1a <_ZNSt10_Head_baseILj0EP9pruThreadLb0EEC1Ev>
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	4618      	mov	r0, r3
 800aa2c:	3708      	adds	r7, #8
 800aa2e:	46bd      	mov	sp, r7
 800aa30:	bd80      	pop	{r7, pc}

0800aa32 <_ZSt3getILj0EJP9pruThreadSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 800aa32:	b580      	push	{r7, lr}
 800aa34:	b082      	sub	sp, #8
 800aa36:	af00      	add	r7, sp, #0
 800aa38:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	4618      	mov	r0, r3
 800aa3e:	f000 f9fa 	bl	800ae36 <_ZSt12__get_helperILj0EP9pruThreadJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 800aa42:	4603      	mov	r3, r0
 800aa44:	4618      	mov	r0, r3
 800aa46:	3708      	adds	r7, #8
 800aa48:	46bd      	mov	sp, r7
 800aa4a:	bd80      	pop	{r7, pc}

0800aa4c <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EED1Ev>:
       *  elements themselves are pointers, the pointed-to memory is
       *  not touched in any way.  Managing the pointer is the user's
       *  responsibility.
       */
      _GLIBCXX20_CONSTEXPR
      ~vector() _GLIBCXX_NOEXCEPT
 800aa4c:	b5b0      	push	{r4, r5, r7, lr}
 800aa4e:	b082      	sub	sp, #8
 800aa50:	af00      	add	r7, sp, #0
 800aa52:	6078      	str	r0, [r7, #4]
      {
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	681c      	ldr	r4, [r3, #0]
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	4618      	mov	r0, r3
 800aa60:	f000 fa1a 	bl	800ae98 <_ZNSt12_Vector_baseISt10shared_ptrI6ModuleESaIS2_EE19_M_get_Tp_allocatorEv>
 800aa64:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800aa66:	461a      	mov	r2, r3
 800aa68:	4629      	mov	r1, r5
 800aa6a:	4620      	mov	r0, r4
 800aa6c:	f000 fa1f 	bl	800aeae <_ZSt8_DestroyIPSt10shared_ptrI6ModuleES2_EvT_S4_RSaIT0_E>
	_GLIBCXX_ASAN_ANNOTATE_BEFORE_DEALLOC;
      }
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	4618      	mov	r0, r3
 800aa74:	f000 f9f7 	bl	800ae66 <_ZNSt12_Vector_baseISt10shared_ptrI6ModuleESaIS2_EED1Ev>
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	4618      	mov	r0, r3
 800aa7c:	3708      	adds	r7, #8
 800aa7e:	46bd      	mov	sp, r7
 800aa80:	bdb0      	pop	{r4, r5, r7, pc}

0800aa82 <_ZNSt15__uniq_ptr_implI17JsonConfigHandlerSt14default_deleteIS0_EEC1EPS0_>:
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
 800aa82:	b590      	push	{r4, r7, lr}
 800aa84:	b083      	sub	sp, #12
 800aa86:	af00      	add	r7, sp, #0
 800aa88:	6078      	str	r0, [r7, #4]
 800aa8a:	6039      	str	r1, [r7, #0]
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	4618      	mov	r0, r3
 800aa90:	f7ff fb18 	bl	800a0c4 <_ZNSt5tupleIJP17JsonConfigHandlerSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>
 800aa94:	683c      	ldr	r4, [r7, #0]
 800aa96:	6878      	ldr	r0, [r7, #4]
 800aa98:	f7ff fb21 	bl	800a0de <_ZNSt15__uniq_ptr_implI17JsonConfigHandlerSt14default_deleteIS0_EE6_M_ptrEv>
 800aa9c:	4603      	mov	r3, r0
 800aa9e:	601c      	str	r4, [r3, #0]
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	4618      	mov	r0, r3
 800aaa4:	370c      	adds	r7, #12
 800aaa6:	46bd      	mov	sp, r7
 800aaa8:	bd90      	pop	{r4, r7, pc}

0800aaaa <_ZSt3getILj1EJP17JsonConfigHandlerSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 800aaaa:	b580      	push	{r7, lr}
 800aaac:	b082      	sub	sp, #8
 800aaae:	af00      	add	r7, sp, #0
 800aab0:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800aab2:	6878      	ldr	r0, [r7, #4]
 800aab4:	f000 fa09 	bl	800aeca <_ZSt12__get_helperILj1ESt14default_deleteI17JsonConfigHandlerEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>
 800aab8:	4603      	mov	r3, r0
 800aaba:	4618      	mov	r0, r3
 800aabc:	3708      	adds	r7, #8
 800aabe:	46bd      	mov	sp, r7
 800aac0:	bd80      	pop	{r7, pc}

0800aac2 <_ZNSt15__uniq_ptr_implI8SPICommsSt14default_deleteIS0_EEC1EPS0_>:
 800aac2:	b590      	push	{r4, r7, lr}
 800aac4:	b083      	sub	sp, #12
 800aac6:	af00      	add	r7, sp, #0
 800aac8:	6078      	str	r0, [r7, #4]
 800aaca:	6039      	str	r1, [r7, #0]
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	4618      	mov	r0, r3
 800aad0:	f000 fa07 	bl	800aee2 <_ZNSt5tupleIJP8SPICommsSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>
 800aad4:	683c      	ldr	r4, [r7, #0]
 800aad6:	6878      	ldr	r0, [r7, #4]
 800aad8:	f7ff fca2 	bl	800a420 <_ZNSt15__uniq_ptr_implI8SPICommsSt14default_deleteIS0_EE6_M_ptrEv>
 800aadc:	4603      	mov	r3, r0
 800aade:	601c      	str	r4, [r3, #0]
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	4618      	mov	r0, r3
 800aae4:	370c      	adds	r7, #12
 800aae6:	46bd      	mov	sp, r7
 800aae8:	bd90      	pop	{r4, r7, pc}

0800aaea <_ZSt3getILj0EJP8SPICommsSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 800aaea:	b580      	push	{r7, lr}
 800aaec:	b082      	sub	sp, #8
 800aaee:	af00      	add	r7, sp, #0
 800aaf0:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	4618      	mov	r0, r3
 800aaf6:	f000 fa01 	bl	800aefc <_ZSt12__get_helperILj0EP8SPICommsJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 800aafa:	4603      	mov	r3, r0
 800aafc:	4618      	mov	r0, r3
 800aafe:	3708      	adds	r7, #8
 800ab00:	46bd      	mov	sp, r7
 800ab02:	bd80      	pop	{r7, pc}

0800ab04 <_ZNSt15__uniq_ptr_implI8SPICommsSt14default_deleteIS0_EE10_M_deleterEv>:
      _Dp&       _M_deleter() noexcept { return std::get<1>(_M_t); }
 800ab04:	b580      	push	{r7, lr}
 800ab06:	b082      	sub	sp, #8
 800ab08:	af00      	add	r7, sp, #0
 800ab0a:	6078      	str	r0, [r7, #4]
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	4618      	mov	r0, r3
 800ab10:	f000 fa00 	bl	800af14 <_ZSt3getILj1EJP8SPICommsSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 800ab14:	4603      	mov	r3, r0
 800ab16:	4618      	mov	r0, r3
 800ab18:	3708      	adds	r7, #8
 800ab1a:	46bd      	mov	sp, r7
 800ab1c:	bd80      	pop	{r7, pc}

0800ab1e <_ZNSt15__uniq_ptr_implI12CommsHandlerSt14default_deleteIS0_EEC1EPS0_>:
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
 800ab1e:	b590      	push	{r4, r7, lr}
 800ab20:	b083      	sub	sp, #12
 800ab22:	af00      	add	r7, sp, #0
 800ab24:	6078      	str	r0, [r7, #4]
 800ab26:	6039      	str	r1, [r7, #0]
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	4618      	mov	r0, r3
 800ab2c:	f7ff fb22 	bl	800a174 <_ZNSt5tupleIJP12CommsHandlerSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>
 800ab30:	683c      	ldr	r4, [r7, #0]
 800ab32:	6878      	ldr	r0, [r7, #4]
 800ab34:	f7ff fb2b 	bl	800a18e <_ZNSt15__uniq_ptr_implI12CommsHandlerSt14default_deleteIS0_EE6_M_ptrEv>
 800ab38:	4603      	mov	r3, r0
 800ab3a:	601c      	str	r4, [r3, #0]
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	4618      	mov	r0, r3
 800ab40:	370c      	adds	r7, #12
 800ab42:	46bd      	mov	sp, r7
 800ab44:	bd90      	pop	{r4, r7, pc}

0800ab46 <_ZSt3getILj1EJP12CommsHandlerSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 800ab46:	b580      	push	{r7, lr}
 800ab48:	b082      	sub	sp, #8
 800ab4a:	af00      	add	r7, sp, #0
 800ab4c:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800ab4e:	6878      	ldr	r0, [r7, #4]
 800ab50:	f000 f9ec 	bl	800af2c <_ZSt12__get_helperILj1ESt14default_deleteI12CommsHandlerEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>
 800ab54:	4603      	mov	r3, r0
 800ab56:	4618      	mov	r0, r3
 800ab58:	3708      	adds	r7, #8
 800ab5a:	46bd      	mov	sp, r7
 800ab5c:	bd80      	pop	{r7, pc}

0800ab5e <_ZNKSt15__uniq_ptr_implI12CommsHandlerSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer    _M_ptr() const noexcept { return std::get<0>(_M_t); }
 800ab5e:	b580      	push	{r7, lr}
 800ab60:	b082      	sub	sp, #8
 800ab62:	af00      	add	r7, sp, #0
 800ab64:	6078      	str	r0, [r7, #4]
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	4618      	mov	r0, r3
 800ab6a:	f000 f9eb 	bl	800af44 <_ZSt3getILj0EJP12CommsHandlerSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>
 800ab6e:	4603      	mov	r3, r0
 800ab70:	681b      	ldr	r3, [r3, #0]
 800ab72:	4618      	mov	r0, r3
 800ab74:	3708      	adds	r7, #8
 800ab76:	46bd      	mov	sp, r7
 800ab78:	bd80      	pop	{r7, pc}

0800ab7a <_ZNSt15__uniq_ptr_implI8SPICommsSt14default_deleteIS0_EE7releaseEv>:
      pointer release() noexcept
 800ab7a:	b580      	push	{r7, lr}
 800ab7c:	b084      	sub	sp, #16
 800ab7e:	af00      	add	r7, sp, #0
 800ab80:	6078      	str	r0, [r7, #4]
	pointer __p = _M_ptr();
 800ab82:	6878      	ldr	r0, [r7, #4]
 800ab84:	f7ff fc4c 	bl	800a420 <_ZNSt15__uniq_ptr_implI8SPICommsSt14default_deleteIS0_EE6_M_ptrEv>
 800ab88:	4603      	mov	r3, r0
 800ab8a:	681b      	ldr	r3, [r3, #0]
 800ab8c:	60fb      	str	r3, [r7, #12]
	_M_ptr() = nullptr;
 800ab8e:	6878      	ldr	r0, [r7, #4]
 800ab90:	f7ff fc46 	bl	800a420 <_ZNSt15__uniq_ptr_implI8SPICommsSt14default_deleteIS0_EE6_M_ptrEv>
 800ab94:	4603      	mov	r3, r0
 800ab96:	2200      	movs	r2, #0
 800ab98:	601a      	str	r2, [r3, #0]
	return __p;
 800ab9a:	68fb      	ldr	r3, [r7, #12]
      }
 800ab9c:	4618      	mov	r0, r3
 800ab9e:	3710      	adds	r7, #16
 800aba0:	46bd      	mov	sp, r7
 800aba2:	bd80      	pop	{r7, pc}

0800aba4 <_ZNSt5tupleIJP14CommsInterfaceSt14default_deleteIS0_EEEC1IRS1_S2_I8SPICommsELb1EEEOT_OT0_>:
	tuple(_U1&& __a1, _U2&& __a2)
 800aba4:	b5b0      	push	{r4, r5, r7, lr}
 800aba6:	b084      	sub	sp, #16
 800aba8:	af00      	add	r7, sp, #0
 800abaa:	60f8      	str	r0, [r7, #12]
 800abac:	60b9      	str	r1, [r7, #8]
 800abae:	607a      	str	r2, [r7, #4]
	: _Inherited(std::forward<_U1>(__a1), std::forward<_U2>(__a2)) { }
 800abb0:	68fc      	ldr	r4, [r7, #12]
 800abb2:	68b8      	ldr	r0, [r7, #8]
 800abb4:	f000 f9d3 	bl	800af5e <_ZSt7forwardIRP14CommsInterfaceEOT_RNSt16remove_referenceIS3_E4typeE>
 800abb8:	4605      	mov	r5, r0
 800abba:	6878      	ldr	r0, [r7, #4]
 800abbc:	f7ff fcd0 	bl	800a560 <_ZSt7forwardISt14default_deleteI8SPICommsEEOT_RNSt16remove_referenceIS3_E4typeE>
 800abc0:	4603      	mov	r3, r0
 800abc2:	461a      	mov	r2, r3
 800abc4:	4629      	mov	r1, r5
 800abc6:	4620      	mov	r0, r4
 800abc8:	f000 f9d4 	bl	800af74 <_ZNSt11_Tuple_implILj0EJP14CommsInterfaceSt14default_deleteIS0_EEEC1IRS1_JS2_I8SPICommsEEvEEOT_DpOT0_>
 800abcc:	68fb      	ldr	r3, [r7, #12]
 800abce:	4618      	mov	r0, r3
 800abd0:	3710      	adds	r7, #16
 800abd2:	46bd      	mov	sp, r7
 800abd4:	bdb0      	pop	{r4, r5, r7, pc}

0800abd6 <_ZSt3getILj0EJP14CommsInterfaceSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 800abd6:	b580      	push	{r7, lr}
 800abd8:	b082      	sub	sp, #8
 800abda:	af00      	add	r7, sp, #0
 800abdc:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	4618      	mov	r0, r3
 800abe2:	f000 f9e3 	bl	800afac <_ZSt12__get_helperILj0EP14CommsInterfaceJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 800abe6:	4603      	mov	r3, r0
 800abe8:	4618      	mov	r0, r3
 800abea:	3708      	adds	r7, #8
 800abec:	46bd      	mov	sp, r7
 800abee:	bd80      	pop	{r7, pc}

0800abf0 <_ZNSt15__uniq_ptr_implI9pruThreadSt14default_deleteIS0_EEC1EPS0_>:
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
 800abf0:	b590      	push	{r4, r7, lr}
 800abf2:	b083      	sub	sp, #12
 800abf4:	af00      	add	r7, sp, #0
 800abf6:	6078      	str	r0, [r7, #4]
 800abf8:	6039      	str	r1, [r7, #0]
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	4618      	mov	r0, r3
 800abfe:	f7ff fafc 	bl	800a1fa <_ZNSt5tupleIJP9pruThreadSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>
 800ac02:	683c      	ldr	r4, [r7, #0]
 800ac04:	6878      	ldr	r0, [r7, #4]
 800ac06:	f7ff fb05 	bl	800a214 <_ZNSt15__uniq_ptr_implI9pruThreadSt14default_deleteIS0_EE6_M_ptrEv>
 800ac0a:	4603      	mov	r3, r0
 800ac0c:	601c      	str	r4, [r3, #0]
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	4618      	mov	r0, r3
 800ac12:	370c      	adds	r7, #12
 800ac14:	46bd      	mov	sp, r7
 800ac16:	bd90      	pop	{r4, r7, pc}

0800ac18 <_ZSt3getILj1EJP9pruThreadSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 800ac18:	b580      	push	{r7, lr}
 800ac1a:	b082      	sub	sp, #8
 800ac1c:	af00      	add	r7, sp, #0
 800ac1e:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800ac20:	6878      	ldr	r0, [r7, #4]
 800ac22:	f000 f9cf 	bl	800afc4 <_ZSt12__get_helperILj1ESt14default_deleteI9pruThreadEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>
 800ac26:	4603      	mov	r3, r0
 800ac28:	4618      	mov	r0, r3
 800ac2a:	3708      	adds	r7, #8
 800ac2c:	46bd      	mov	sp, r7
 800ac2e:	bd80      	pop	{r7, pc}

0800ac30 <_ZNKSt15__uniq_ptr_implI17JsonConfigHandlerSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer    _M_ptr() const noexcept { return std::get<0>(_M_t); }
 800ac30:	b580      	push	{r7, lr}
 800ac32:	b082      	sub	sp, #8
 800ac34:	af00      	add	r7, sp, #0
 800ac36:	6078      	str	r0, [r7, #4]
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	4618      	mov	r0, r3
 800ac3c:	f000 f9ce 	bl	800afdc <_ZSt3getILj0EJP17JsonConfigHandlerSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>
 800ac40:	4603      	mov	r3, r0
 800ac42:	681b      	ldr	r3, [r3, #0]
 800ac44:	4618      	mov	r0, r3
 800ac46:	3708      	adds	r7, #8
 800ac48:	46bd      	mov	sp, r7
 800ac4a:	bd80      	pop	{r7, pc}

0800ac4c <_ZN11ArduinoJson8V730HB226detail7forwardIRA11_KcEEOT_RNS1_16remove_referenceIS6_E4typeE>:
T&& forward(remove_reference_t<T>& t) noexcept {
 800ac4c:	b480      	push	{r7}
 800ac4e:	b083      	sub	sp, #12
 800ac50:	af00      	add	r7, sp, #0
 800ac52:	6078      	str	r0, [r7, #4]
  return static_cast<T&&>(t);
 800ac54:	687b      	ldr	r3, [r7, #4]
}
 800ac56:	4618      	mov	r0, r3
 800ac58:	370c      	adds	r7, #12
 800ac5a:	46bd      	mov	sp, r7
 800ac5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac60:	4770      	bx	lr

0800ac62 <_ZN11ArduinoJson8V730HB226detail13StringAdapterIRA11_KcvE5adaptES5_>:
  static AdaptedString adapt(const char (&p)[N]) {
 800ac62:	b580      	push	{r7, lr}
 800ac64:	b082      	sub	sp, #8
 800ac66:	af00      	add	r7, sp, #0
 800ac68:	6078      	str	r0, [r7, #4]
 800ac6a:	6039      	str	r1, [r7, #0]
    return RamString(p, N - 1, true);
 800ac6c:	2301      	movs	r3, #1
 800ac6e:	220a      	movs	r2, #10
 800ac70:	6839      	ldr	r1, [r7, #0]
 800ac72:	6878      	ldr	r0, [r7, #4]
 800ac74:	f7f7 fd2e 	bl	80026d4 <_ZN11ArduinoJson8V730HB226detail9RamStringC1EPKcjb>
  }
 800ac78:	6878      	ldr	r0, [r7, #4]
 800ac7a:	3708      	adds	r7, #8
 800ac7c:	46bd      	mov	sp, r7
 800ac7e:	bd80      	pop	{r7, pc}

0800ac80 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEE5doSetINS0_9ConverterImvEEmEEbRKT0_>:
  }

  template <typename TConverter, typename T>
  bool doSet(const T& value) const {
 800ac80:	b580      	push	{r7, lr}
 800ac82:	b084      	sub	sp, #16
 800ac84:	af00      	add	r7, sp, #0
 800ac86:	6078      	str	r0, [r7, #4]
 800ac88:	6039      	str	r1, [r7, #0]
    return doSet<TConverter>(
 800ac8a:	461a      	mov	r2, r3
 800ac8c:	6839      	ldr	r1, [r7, #0]
 800ac8e:	6878      	ldr	r0, [r7, #4]
 800ac90:	f000 f9d1 	bl	800b036 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEE5doSetINS0_9ConverterImvEEmEEbRKT0_NS1_17integral_constantIbLb1EEE>
 800ac94:	4603      	mov	r3, r0
        value, is_same<typename function_traits<
                           decltype(&TConverter::toJson)>::return_type,
                       bool>{});
  }
 800ac96:	4618      	mov	r0, r3
 800ac98:	3710      	adds	r7, #16
 800ac9a:	46bd      	mov	sp, r7
 800ac9c:	bd80      	pop	{r7, pc}

0800ac9e <_ZNKSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EE3getEv>:
	reset(_Yp* __p, _Deleter __d, _Alloc __a)
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
 800ac9e:	b480      	push	{r7}
 800aca0:	b083      	sub	sp, #12
 800aca2:	af00      	add	r7, sp, #0
 800aca4:	6078      	str	r0, [r7, #4]
      { return _M_ptr; }
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	681b      	ldr	r3, [r3, #0]
 800acaa:	4618      	mov	r0, r3
 800acac:	370c      	adds	r7, #12
 800acae:	46bd      	mov	sp, r7
 800acb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acb4:	4770      	bx	lr

0800acb6 <_ZNKSt15__uniq_ptr_implI9pruThreadSt14default_deleteIS0_EE6_M_ptrEv>:
 800acb6:	b580      	push	{r7, lr}
 800acb8:	b082      	sub	sp, #8
 800acba:	af00      	add	r7, sp, #0
 800acbc:	6078      	str	r0, [r7, #4]
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	4618      	mov	r0, r3
 800acc2:	f000 f9d2 	bl	800b06a <_ZSt3getILj0EJP9pruThreadSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>
 800acc6:	4603      	mov	r3, r0
 800acc8:	681b      	ldr	r3, [r3, #0]
 800acca:	4618      	mov	r0, r3
 800accc:	3708      	adds	r7, #8
 800acce:	46bd      	mov	sp, r7
 800acd0:	bd80      	pop	{r7, pc}

0800acd2 <_ZN11ArduinoJson8V730HB226detail10StringPool3addINS1_9RamStringEEEPNS1_10StringNodeET_PNS0_9AllocatorE>:
  StringNode* add(TAdaptedString str, Allocator* allocator) {
 800acd2:	b580      	push	{r7, lr}
 800acd4:	b088      	sub	sp, #32
 800acd6:	af02      	add	r7, sp, #8
 800acd8:	60f8      	str	r0, [r7, #12]
 800acda:	4638      	mov	r0, r7
 800acdc:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    auto node = get(str);
 800ace0:	463b      	mov	r3, r7
 800ace2:	4619      	mov	r1, r3
 800ace4:	68f8      	ldr	r0, [r7, #12]
 800ace6:	f7fa fba3 	bl	8005430 <_ZNK11ArduinoJson8V730HB226detail10StringPool3getINS1_9RamStringEEEPNS1_10StringNodeERKT_>
 800acea:	6178      	str	r0, [r7, #20]
    if (node) {
 800acec:	697b      	ldr	r3, [r7, #20]
 800acee:	2b00      	cmp	r3, #0
 800acf0:	d007      	beq.n	800ad02 <_ZN11ArduinoJson8V730HB226detail10StringPool3addINS1_9RamStringEEEPNS1_10StringNodeET_PNS0_9AllocatorE+0x30>
      node->references++;
 800acf2:	697b      	ldr	r3, [r7, #20]
 800acf4:	889b      	ldrh	r3, [r3, #4]
 800acf6:	3301      	adds	r3, #1
 800acf8:	b29a      	uxth	r2, r3
 800acfa:	697b      	ldr	r3, [r7, #20]
 800acfc:	809a      	strh	r2, [r3, #4]
      return node;
 800acfe:	697b      	ldr	r3, [r7, #20]
 800ad00:	e023      	b.n	800ad4a <_ZN11ArduinoJson8V730HB226detail10StringPool3addINS1_9RamStringEEEPNS1_10StringNodeET_PNS0_9AllocatorE+0x78>
    size_t n = str.size();
 800ad02:	463b      	mov	r3, r7
 800ad04:	4618      	mov	r0, r3
 800ad06:	f7f7 fd0d 	bl	8002724 <_ZNK11ArduinoJson8V730HB226detail9RamString4sizeEv>
 800ad0a:	6138      	str	r0, [r7, #16]
    node = StringNode::create(n, allocator);
 800ad0c:	6a39      	ldr	r1, [r7, #32]
 800ad0e:	6938      	ldr	r0, [r7, #16]
 800ad10:	f7f7 fc76 	bl	8002600 <_ZN11ArduinoJson8V730HB226detail10StringNode6createEjPNS0_9AllocatorE>
 800ad14:	6178      	str	r0, [r7, #20]
    if (!node)
 800ad16:	697b      	ldr	r3, [r7, #20]
 800ad18:	2b00      	cmp	r3, #0
 800ad1a:	d101      	bne.n	800ad20 <_ZN11ArduinoJson8V730HB226detail10StringPool3addINS1_9RamStringEEEPNS1_10StringNodeET_PNS0_9AllocatorE+0x4e>
      return nullptr;
 800ad1c:	2300      	movs	r3, #0
 800ad1e:	e014      	b.n	800ad4a <_ZN11ArduinoJson8V730HB226detail10StringPool3addINS1_9RamStringEEEPNS1_10StringNodeET_PNS0_9AllocatorE+0x78>
    stringGetChars(str, node->data, n);
 800ad20:	697b      	ldr	r3, [r7, #20]
 800ad22:	f103 0208 	add.w	r2, r3, #8
 800ad26:	693b      	ldr	r3, [r7, #16]
 800ad28:	9300      	str	r3, [sp, #0]
 800ad2a:	4613      	mov	r3, r2
 800ad2c:	463a      	mov	r2, r7
 800ad2e:	ca07      	ldmia	r2, {r0, r1, r2}
 800ad30:	f000 f9a8 	bl	800b084 <_ZN11ArduinoJson8V730HB226detailL14stringGetCharsINS1_9RamStringEEEvT_Pcj>
    node->data[n] = 0;  // force NUL terminator
 800ad34:	697a      	ldr	r2, [r7, #20]
 800ad36:	693b      	ldr	r3, [r7, #16]
 800ad38:	4413      	add	r3, r2
 800ad3a:	3308      	adds	r3, #8
 800ad3c:	2200      	movs	r2, #0
 800ad3e:	701a      	strb	r2, [r3, #0]
    add(node);
 800ad40:	6979      	ldr	r1, [r7, #20]
 800ad42:	68f8      	ldr	r0, [r7, #12]
 800ad44:	f7f7 fd20 	bl	8002788 <_ZN11ArduinoJson8V730HB226detail10StringPool3addEPNS1_10StringNodeE>
    return node;
 800ad48:	697b      	ldr	r3, [r7, #20]
  }
 800ad4a:	4618      	mov	r0, r3
 800ad4c:	3718      	adds	r7, #24
 800ad4e:	46bd      	mov	sp, r7
 800ad50:	bd80      	pop	{r7, pc}

0800ad52 <_ZSt12__get_helperILj1ESt14default_deleteI14CommsInterfaceEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800ad52:	b580      	push	{r7, lr}
 800ad54:	b082      	sub	sp, #8
 800ad56:	af00      	add	r7, sp, #0
 800ad58:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800ad5a:	6878      	ldr	r0, [r7, #4]
 800ad5c:	f000 f9b2 	bl	800b0c4 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI14CommsInterfaceEEE7_M_headERS3_>
 800ad60:	4603      	mov	r3, r0
 800ad62:	4618      	mov	r0, r3
 800ad64:	3708      	adds	r7, #8
 800ad66:	46bd      	mov	sp, r7
 800ad68:	bd80      	pop	{r7, pc}

0800ad6a <_ZNSt11_Tuple_implILj1EJSt14default_deleteI17JsonConfigHandlerEEEC1Ev>:
      _Tuple_impl()
 800ad6a:	b580      	push	{r7, lr}
 800ad6c:	b082      	sub	sp, #8
 800ad6e:	af00      	add	r7, sp, #0
 800ad70:	6078      	str	r0, [r7, #4]
      : _Base() { }
 800ad72:	6878      	ldr	r0, [r7, #4]
 800ad74:	f000 f9b2 	bl	800b0dc <_ZNSt10_Head_baseILj1ESt14default_deleteI17JsonConfigHandlerELb1EEC1Ev>
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	4618      	mov	r0, r3
 800ad7c:	3708      	adds	r7, #8
 800ad7e:	46bd      	mov	sp, r7
 800ad80:	bd80      	pop	{r7, pc}

0800ad82 <_ZNSt10_Head_baseILj0EP17JsonConfigHandlerLb0EEC1Ev>:
      constexpr _Head_base()
 800ad82:	b480      	push	{r7}
 800ad84:	b083      	sub	sp, #12
 800ad86:	af00      	add	r7, sp, #0
 800ad88:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	2200      	movs	r2, #0
 800ad8e:	601a      	str	r2, [r3, #0]
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	4618      	mov	r0, r3
 800ad94:	370c      	adds	r7, #12
 800ad96:	46bd      	mov	sp, r7
 800ad98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad9c:	4770      	bx	lr

0800ad9e <_ZSt12__get_helperILj0EP17JsonConfigHandlerJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800ad9e:	b580      	push	{r7, lr}
 800ada0:	b082      	sub	sp, #8
 800ada2:	af00      	add	r7, sp, #0
 800ada4:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800ada6:	6878      	ldr	r0, [r7, #4]
 800ada8:	f000 f9a3 	bl	800b0f2 <_ZNSt11_Tuple_implILj0EJP17JsonConfigHandlerSt14default_deleteIS0_EEE7_M_headERS4_>
 800adac:	4603      	mov	r3, r0
 800adae:	4618      	mov	r0, r3
 800adb0:	3708      	adds	r7, #8
 800adb2:	46bd      	mov	sp, r7
 800adb4:	bd80      	pop	{r7, pc}

0800adb6 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI12CommsHandlerEEEC1Ev>:
      _Tuple_impl()
 800adb6:	b580      	push	{r7, lr}
 800adb8:	b082      	sub	sp, #8
 800adba:	af00      	add	r7, sp, #0
 800adbc:	6078      	str	r0, [r7, #4]
      : _Base() { }
 800adbe:	6878      	ldr	r0, [r7, #4]
 800adc0:	f000 f9a4 	bl	800b10c <_ZNSt10_Head_baseILj1ESt14default_deleteI12CommsHandlerELb1EEC1Ev>
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	4618      	mov	r0, r3
 800adc8:	3708      	adds	r7, #8
 800adca:	46bd      	mov	sp, r7
 800adcc:	bd80      	pop	{r7, pc}

0800adce <_ZNSt10_Head_baseILj0EP12CommsHandlerLb0EEC1Ev>:
      constexpr _Head_base()
 800adce:	b480      	push	{r7}
 800add0:	b083      	sub	sp, #12
 800add2:	af00      	add	r7, sp, #0
 800add4:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	2200      	movs	r2, #0
 800adda:	601a      	str	r2, [r3, #0]
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	4618      	mov	r0, r3
 800ade0:	370c      	adds	r7, #12
 800ade2:	46bd      	mov	sp, r7
 800ade4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ade8:	4770      	bx	lr

0800adea <_ZSt12__get_helperILj0EP12CommsHandlerJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800adea:	b580      	push	{r7, lr}
 800adec:	b082      	sub	sp, #8
 800adee:	af00      	add	r7, sp, #0
 800adf0:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800adf2:	6878      	ldr	r0, [r7, #4]
 800adf4:	f000 f995 	bl	800b122 <_ZNSt11_Tuple_implILj0EJP12CommsHandlerSt14default_deleteIS0_EEE7_M_headERS4_>
 800adf8:	4603      	mov	r3, r0
 800adfa:	4618      	mov	r0, r3
 800adfc:	3708      	adds	r7, #8
 800adfe:	46bd      	mov	sp, r7
 800ae00:	bd80      	pop	{r7, pc}

0800ae02 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI9pruThreadEEEC1Ev>:
      _Tuple_impl()
 800ae02:	b580      	push	{r7, lr}
 800ae04:	b082      	sub	sp, #8
 800ae06:	af00      	add	r7, sp, #0
 800ae08:	6078      	str	r0, [r7, #4]
      : _Base() { }
 800ae0a:	6878      	ldr	r0, [r7, #4]
 800ae0c:	f000 f996 	bl	800b13c <_ZNSt10_Head_baseILj1ESt14default_deleteI9pruThreadELb1EEC1Ev>
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	4618      	mov	r0, r3
 800ae14:	3708      	adds	r7, #8
 800ae16:	46bd      	mov	sp, r7
 800ae18:	bd80      	pop	{r7, pc}

0800ae1a <_ZNSt10_Head_baseILj0EP9pruThreadLb0EEC1Ev>:
      constexpr _Head_base()
 800ae1a:	b480      	push	{r7}
 800ae1c:	b083      	sub	sp, #12
 800ae1e:	af00      	add	r7, sp, #0
 800ae20:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	2200      	movs	r2, #0
 800ae26:	601a      	str	r2, [r3, #0]
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	4618      	mov	r0, r3
 800ae2c:	370c      	adds	r7, #12
 800ae2e:	46bd      	mov	sp, r7
 800ae30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae34:	4770      	bx	lr

0800ae36 <_ZSt12__get_helperILj0EP9pruThreadJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800ae36:	b580      	push	{r7, lr}
 800ae38:	b082      	sub	sp, #8
 800ae3a:	af00      	add	r7, sp, #0
 800ae3c:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800ae3e:	6878      	ldr	r0, [r7, #4]
 800ae40:	f000 f987 	bl	800b152 <_ZNSt11_Tuple_implILj0EJP9pruThreadSt14default_deleteIS0_EEE7_M_headERS4_>
 800ae44:	4603      	mov	r3, r0
 800ae46:	4618      	mov	r0, r3
 800ae48:	3708      	adds	r7, #8
 800ae4a:	46bd      	mov	sp, r7
 800ae4c:	bd80      	pop	{r7, pc}

0800ae4e <_ZNSt12_Vector_baseISt10shared_ptrI6ModuleESaIS2_EE12_Vector_implD1Ev>:
      struct _Vector_impl
 800ae4e:	b580      	push	{r7, lr}
 800ae50:	b082      	sub	sp, #8
 800ae52:	af00      	add	r7, sp, #0
 800ae54:	6078      	str	r0, [r7, #4]
 800ae56:	6878      	ldr	r0, [r7, #4]
 800ae58:	f000 f988 	bl	800b16c <_ZNSaISt10shared_ptrI6ModuleEED1Ev>
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	4618      	mov	r0, r3
 800ae60:	3708      	adds	r7, #8
 800ae62:	46bd      	mov	sp, r7
 800ae64:	bd80      	pop	{r7, pc}

0800ae66 <_ZNSt12_Vector_baseISt10shared_ptrI6ModuleESaIS2_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 800ae66:	b580      	push	{r7, lr}
 800ae68:	b082      	sub	sp, #8
 800ae6a:	af00      	add	r7, sp, #0
 800ae6c:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	689a      	ldr	r2, [r3, #8]
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	681b      	ldr	r3, [r3, #0]
 800ae7a:	1ad3      	subs	r3, r2, r3
 800ae7c:	10db      	asrs	r3, r3, #3
	_M_deallocate(_M_impl._M_start,
 800ae7e:	461a      	mov	r2, r3
 800ae80:	6878      	ldr	r0, [r7, #4]
 800ae82:	f000 f97f 	bl	800b184 <_ZNSt12_Vector_baseISt10shared_ptrI6ModuleESaIS2_EE13_M_deallocateEPS2_j>
      }
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	4618      	mov	r0, r3
 800ae8a:	f7ff ffe0 	bl	800ae4e <_ZNSt12_Vector_baseISt10shared_ptrI6ModuleESaIS2_EE12_Vector_implD1Ev>
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	4618      	mov	r0, r3
 800ae92:	3708      	adds	r7, #8
 800ae94:	46bd      	mov	sp, r7
 800ae96:	bd80      	pop	{r7, pc}

0800ae98 <_ZNSt12_Vector_baseISt10shared_ptrI6ModuleESaIS2_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 800ae98:	b480      	push	{r7}
 800ae9a:	b083      	sub	sp, #12
 800ae9c:	af00      	add	r7, sp, #0
 800ae9e:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	4618      	mov	r0, r3
 800aea4:	370c      	adds	r7, #12
 800aea6:	46bd      	mov	sp, r7
 800aea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeac:	4770      	bx	lr

0800aeae <_ZSt8_DestroyIPSt10shared_ptrI6ModuleES2_EvT_S4_RSaIT0_E>:
    }

  template<typename _ForwardIterator, typename _Tp>
    _GLIBCXX20_CONSTEXPR
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 800aeae:	b580      	push	{r7, lr}
 800aeb0:	b084      	sub	sp, #16
 800aeb2:	af00      	add	r7, sp, #0
 800aeb4:	60f8      	str	r0, [r7, #12]
 800aeb6:	60b9      	str	r1, [r7, #8]
 800aeb8:	607a      	str	r2, [r7, #4]
	     allocator<_Tp>&)
    {
      _Destroy(__first, __last);
 800aeba:	68b9      	ldr	r1, [r7, #8]
 800aebc:	68f8      	ldr	r0, [r7, #12]
 800aebe:	f000 f974 	bl	800b1aa <_ZSt8_DestroyIPSt10shared_ptrI6ModuleEEvT_S4_>
    }
 800aec2:	bf00      	nop
 800aec4:	3710      	adds	r7, #16
 800aec6:	46bd      	mov	sp, r7
 800aec8:	bd80      	pop	{r7, pc}

0800aeca <_ZSt12__get_helperILj1ESt14default_deleteI17JsonConfigHandlerEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800aeca:	b580      	push	{r7, lr}
 800aecc:	b082      	sub	sp, #8
 800aece:	af00      	add	r7, sp, #0
 800aed0:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800aed2:	6878      	ldr	r0, [r7, #4]
 800aed4:	f000 f976 	bl	800b1c4 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI17JsonConfigHandlerEEE7_M_headERS3_>
 800aed8:	4603      	mov	r3, r0
 800aeda:	4618      	mov	r0, r3
 800aedc:	3708      	adds	r7, #8
 800aede:	46bd      	mov	sp, r7
 800aee0:	bd80      	pop	{r7, pc}

0800aee2 <_ZNSt5tupleIJP8SPICommsSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>:
	tuple()
 800aee2:	b580      	push	{r7, lr}
 800aee4:	b082      	sub	sp, #8
 800aee6:	af00      	add	r7, sp, #0
 800aee8:	6078      	str	r0, [r7, #4]
	: _Inherited() { }
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	4618      	mov	r0, r3
 800aeee:	f000 f975 	bl	800b1dc <_ZNSt11_Tuple_implILj0EJP8SPICommsSt14default_deleteIS0_EEEC1Ev>
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	4618      	mov	r0, r3
 800aef6:	3708      	adds	r7, #8
 800aef8:	46bd      	mov	sp, r7
 800aefa:	bd80      	pop	{r7, pc}

0800aefc <_ZSt12__get_helperILj0EP8SPICommsJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800aefc:	b580      	push	{r7, lr}
 800aefe:	b082      	sub	sp, #8
 800af00:	af00      	add	r7, sp, #0
 800af02:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800af04:	6878      	ldr	r0, [r7, #4]
 800af06:	f000 f979 	bl	800b1fc <_ZNSt11_Tuple_implILj0EJP8SPICommsSt14default_deleteIS0_EEE7_M_headERS4_>
 800af0a:	4603      	mov	r3, r0
 800af0c:	4618      	mov	r0, r3
 800af0e:	3708      	adds	r7, #8
 800af10:	46bd      	mov	sp, r7
 800af12:	bd80      	pop	{r7, pc}

0800af14 <_ZSt3getILj1EJP8SPICommsSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 800af14:	b580      	push	{r7, lr}
 800af16:	b082      	sub	sp, #8
 800af18:	af00      	add	r7, sp, #0
 800af1a:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800af1c:	6878      	ldr	r0, [r7, #4]
 800af1e:	f000 f97a 	bl	800b216 <_ZSt12__get_helperILj1ESt14default_deleteI8SPICommsEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>
 800af22:	4603      	mov	r3, r0
 800af24:	4618      	mov	r0, r3
 800af26:	3708      	adds	r7, #8
 800af28:	46bd      	mov	sp, r7
 800af2a:	bd80      	pop	{r7, pc}

0800af2c <_ZSt12__get_helperILj1ESt14default_deleteI12CommsHandlerEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800af2c:	b580      	push	{r7, lr}
 800af2e:	b082      	sub	sp, #8
 800af30:	af00      	add	r7, sp, #0
 800af32:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800af34:	6878      	ldr	r0, [r7, #4]
 800af36:	f000 f97a 	bl	800b22e <_ZNSt11_Tuple_implILj1EJSt14default_deleteI12CommsHandlerEEE7_M_headERS3_>
 800af3a:	4603      	mov	r3, r0
 800af3c:	4618      	mov	r0, r3
 800af3e:	3708      	adds	r7, #8
 800af40:	46bd      	mov	sp, r7
 800af42:	bd80      	pop	{r7, pc}

0800af44 <_ZSt3getILj0EJP12CommsHandlerSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>:

  /// Return a const reference to the ith element of a const tuple.
  template<size_t __i, typename... _Elements>
    constexpr const __tuple_element_t<__i, tuple<_Elements...>>&
    get(const tuple<_Elements...>& __t) noexcept
 800af44:	b580      	push	{r7, lr}
 800af46:	b082      	sub	sp, #8
 800af48:	af00      	add	r7, sp, #0
 800af4a:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	4618      	mov	r0, r3
 800af50:	f000 f979 	bl	800b246 <_ZSt12__get_helperILj0EP12CommsHandlerJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>
 800af54:	4603      	mov	r3, r0
 800af56:	4618      	mov	r0, r3
 800af58:	3708      	adds	r7, #8
 800af5a:	46bd      	mov	sp, r7
 800af5c:	bd80      	pop	{r7, pc}

0800af5e <_ZSt7forwardIRP14CommsInterfaceEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800af5e:	b480      	push	{r7}
 800af60:	b083      	sub	sp, #12
 800af62:	af00      	add	r7, sp, #0
 800af64:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	4618      	mov	r0, r3
 800af6a:	370c      	adds	r7, #12
 800af6c:	46bd      	mov	sp, r7
 800af6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af72:	4770      	bx	lr

0800af74 <_ZNSt11_Tuple_implILj0EJP14CommsInterfaceSt14default_deleteIS0_EEEC1IRS1_JS2_I8SPICommsEEvEEOT_DpOT0_>:
	_Tuple_impl(_UHead&& __head, _UTail&&... __tail)
 800af74:	b590      	push	{r4, r7, lr}
 800af76:	b085      	sub	sp, #20
 800af78:	af00      	add	r7, sp, #0
 800af7a:	60f8      	str	r0, [r7, #12]
 800af7c:	60b9      	str	r1, [r7, #8]
 800af7e:	607a      	str	r2, [r7, #4]
	  _Base(std::forward<_UHead>(__head))
 800af80:	6878      	ldr	r0, [r7, #4]
 800af82:	f7ff faed 	bl	800a560 <_ZSt7forwardISt14default_deleteI8SPICommsEEOT_RNSt16remove_referenceIS3_E4typeE>
 800af86:	4603      	mov	r3, r0
 800af88:	4619      	mov	r1, r3
 800af8a:	68f8      	ldr	r0, [r7, #12]
 800af8c:	f000 f967 	bl	800b25e <_ZNSt11_Tuple_implILj1EJSt14default_deleteI14CommsInterfaceEEEC1IS0_I8SPICommsEEEOT_>
 800af90:	68fc      	ldr	r4, [r7, #12]
 800af92:	68b8      	ldr	r0, [r7, #8]
 800af94:	f7ff ffe3 	bl	800af5e <_ZSt7forwardIRP14CommsInterfaceEOT_RNSt16remove_referenceIS3_E4typeE>
 800af98:	4603      	mov	r3, r0
 800af9a:	4619      	mov	r1, r3
 800af9c:	4620      	mov	r0, r4
 800af9e:	f000 f970 	bl	800b282 <_ZNSt10_Head_baseILj0EP14CommsInterfaceLb0EEC1IRS1_EEOT_>
	{ }
 800afa2:	68fb      	ldr	r3, [r7, #12]
 800afa4:	4618      	mov	r0, r3
 800afa6:	3714      	adds	r7, #20
 800afa8:	46bd      	mov	sp, r7
 800afaa:	bd90      	pop	{r4, r7, pc}

0800afac <_ZSt12__get_helperILj0EP14CommsInterfaceJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800afac:	b580      	push	{r7, lr}
 800afae:	b082      	sub	sp, #8
 800afb0:	af00      	add	r7, sp, #0
 800afb2:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800afb4:	6878      	ldr	r0, [r7, #4]
 800afb6:	f000 f975 	bl	800b2a4 <_ZNSt11_Tuple_implILj0EJP14CommsInterfaceSt14default_deleteIS0_EEE7_M_headERS4_>
 800afba:	4603      	mov	r3, r0
 800afbc:	4618      	mov	r0, r3
 800afbe:	3708      	adds	r7, #8
 800afc0:	46bd      	mov	sp, r7
 800afc2:	bd80      	pop	{r7, pc}

0800afc4 <_ZSt12__get_helperILj1ESt14default_deleteI9pruThreadEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800afc4:	b580      	push	{r7, lr}
 800afc6:	b082      	sub	sp, #8
 800afc8:	af00      	add	r7, sp, #0
 800afca:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800afcc:	6878      	ldr	r0, [r7, #4]
 800afce:	f000 f976 	bl	800b2be <_ZNSt11_Tuple_implILj1EJSt14default_deleteI9pruThreadEEE7_M_headERS3_>
 800afd2:	4603      	mov	r3, r0
 800afd4:	4618      	mov	r0, r3
 800afd6:	3708      	adds	r7, #8
 800afd8:	46bd      	mov	sp, r7
 800afda:	bd80      	pop	{r7, pc}

0800afdc <_ZSt3getILj0EJP17JsonConfigHandlerSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>:
    get(const tuple<_Elements...>& __t) noexcept
 800afdc:	b580      	push	{r7, lr}
 800afde:	b082      	sub	sp, #8
 800afe0:	af00      	add	r7, sp, #0
 800afe2:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	4618      	mov	r0, r3
 800afe8:	f000 f975 	bl	800b2d6 <_ZSt12__get_helperILj0EP17JsonConfigHandlerJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>
 800afec:	4603      	mov	r3, r0
 800afee:	4618      	mov	r0, r3
 800aff0:	3708      	adds	r7, #8
 800aff2:	46bd      	mov	sp, r7
 800aff4:	bd80      	pop	{r7, pc}

0800aff6 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEE7getDataEv>:
  VariantData* getData() const {
 800aff6:	b580      	push	{r7, lr}
 800aff8:	b082      	sub	sp, #8
 800affa:	af00      	add	r7, sp, #0
 800affc:	6078      	str	r0, [r7, #4]
    return VariantAttorney::getData(derived());
 800affe:	6878      	ldr	r0, [r7, #4]
 800b000:	f000 f975 	bl	800b2ee <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEE7derivedEv>
 800b004:	4603      	mov	r3, r0
 800b006:	4618      	mov	r0, r3
 800b008:	f000 f97c 	bl	800b304 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataIKNS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEEEDTcldtfp_7getDataEERT_>
 800b00c:	4603      	mov	r3, r0
  }
 800b00e:	4618      	mov	r0, r3
 800b010:	3708      	adds	r7, #8
 800b012:	46bd      	mov	sp, r7
 800b014:	bd80      	pop	{r7, pc}

0800b016 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEE18getResourceManagerEv>:
  ResourceManager* getResourceManager() const {
 800b016:	b580      	push	{r7, lr}
 800b018:	b082      	sub	sp, #8
 800b01a:	af00      	add	r7, sp, #0
 800b01c:	6078      	str	r0, [r7, #4]
    return VariantAttorney::getResourceManager(derived());
 800b01e:	6878      	ldr	r0, [r7, #4]
 800b020:	f000 f965 	bl	800b2ee <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEE7derivedEv>
 800b024:	4603      	mov	r3, r0
 800b026:	4618      	mov	r0, r3
 800b028:	f000 f978 	bl	800b31c <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerIKNS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEEEDTcldtfp_18getResourceManagerEERT_>
 800b02c:	4603      	mov	r3, r0
  }
 800b02e:	4618      	mov	r0, r3
 800b030:	3708      	adds	r7, #8
 800b032:	46bd      	mov	sp, r7
 800b034:	bd80      	pop	{r7, pc}

0800b036 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEE5doSetINS0_9ConverterImvEEmEEbRKT0_NS1_17integral_constantIbLb1EEE>:
  return resources && !resources->overflowed();
}

template <typename TDerived>
template <typename TConverter, typename T>
inline bool VariantRefBase<TDerived>::doSet(const T& value, true_type) const {
 800b036:	b590      	push	{r4, r7, lr}
 800b038:	b087      	sub	sp, #28
 800b03a:	af00      	add	r7, sp, #0
 800b03c:	60f8      	str	r0, [r7, #12]
 800b03e:	60b9      	str	r1, [r7, #8]
 800b040:	713a      	strb	r2, [r7, #4]
  return TConverter::toJson(value, getOrCreateVariant());
 800b042:	68bb      	ldr	r3, [r7, #8]
 800b044:	681c      	ldr	r4, [r3, #0]
 800b046:	f107 0310 	add.w	r3, r7, #16
 800b04a:	68f9      	ldr	r1, [r7, #12]
 800b04c:	4618      	mov	r0, r3
 800b04e:	f000 f971 	bl	800b334 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEE18getOrCreateVariantEv>
 800b052:	f107 0310 	add.w	r3, r7, #16
 800b056:	e893 0006 	ldmia.w	r3, {r1, r2}
 800b05a:	4620      	mov	r0, r4
 800b05c:	f000 f980 	bl	800b360 <_ZN11ArduinoJson8V730HB229ConverterImvE6toJsonEmNS0_11JsonVariantE>
 800b060:	4603      	mov	r3, r0
}
 800b062:	4618      	mov	r0, r3
 800b064:	371c      	adds	r7, #28
 800b066:	46bd      	mov	sp, r7
 800b068:	bd90      	pop	{r4, r7, pc}

0800b06a <_ZSt3getILj0EJP9pruThreadSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>:
    get(const tuple<_Elements...>& __t) noexcept
 800b06a:	b580      	push	{r7, lr}
 800b06c:	b082      	sub	sp, #8
 800b06e:	af00      	add	r7, sp, #0
 800b070:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	4618      	mov	r0, r3
 800b076:	f000 f9b8 	bl	800b3ea <_ZSt12__get_helperILj0EP9pruThreadJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>
 800b07a:	4603      	mov	r3, r0
 800b07c:	4618      	mov	r0, r3
 800b07e:	3708      	adds	r7, #8
 800b080:	46bd      	mov	sp, r7
 800b082:	bd80      	pop	{r7, pc}

0800b084 <_ZN11ArduinoJson8V730HB226detailL14stringGetCharsINS1_9RamStringEEEvT_Pcj>:
stringEquals(TAdaptedString1 s1, TAdaptedString2 s2) {
  return stringEquals(s2, s1);
}

template <typename TAdaptedString>
static void stringGetChars(TAdaptedString s, char* p, size_t n) {
 800b084:	b590      	push	{r4, r7, lr}
 800b086:	b087      	sub	sp, #28
 800b088:	af00      	add	r7, sp, #0
 800b08a:	1d3c      	adds	r4, r7, #4
 800b08c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800b090:	603b      	str	r3, [r7, #0]
  ARDUINOJSON_ASSERT(s.size() <= n);
  for (size_t i = 0; i < n; i++) {
 800b092:	2300      	movs	r3, #0
 800b094:	617b      	str	r3, [r7, #20]
 800b096:	e00c      	b.n	800b0b2 <_ZN11ArduinoJson8V730HB226detailL14stringGetCharsINS1_9RamStringEEEvT_Pcj+0x2e>
    p[i] = s[i];
 800b098:	683a      	ldr	r2, [r7, #0]
 800b09a:	697b      	ldr	r3, [r7, #20]
 800b09c:	18d4      	adds	r4, r2, r3
 800b09e:	1d3b      	adds	r3, r7, #4
 800b0a0:	6979      	ldr	r1, [r7, #20]
 800b0a2:	4618      	mov	r0, r3
 800b0a4:	f7f5 fe30 	bl	8000d08 <_ZNK11ArduinoJson8V730HB226detail9RamStringixEj>
 800b0a8:	4603      	mov	r3, r0
 800b0aa:	7023      	strb	r3, [r4, #0]
  for (size_t i = 0; i < n; i++) {
 800b0ac:	697b      	ldr	r3, [r7, #20]
 800b0ae:	3301      	adds	r3, #1
 800b0b0:	617b      	str	r3, [r7, #20]
 800b0b2:	697a      	ldr	r2, [r7, #20]
 800b0b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b0b6:	429a      	cmp	r2, r3
 800b0b8:	d3ee      	bcc.n	800b098 <_ZN11ArduinoJson8V730HB226detailL14stringGetCharsINS1_9RamStringEEEvT_Pcj+0x14>
  }
}
 800b0ba:	bf00      	nop
 800b0bc:	bf00      	nop
 800b0be:	371c      	adds	r7, #28
 800b0c0:	46bd      	mov	sp, r7
 800b0c2:	bd90      	pop	{r4, r7, pc}

0800b0c4 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI14CommsInterfaceEEE7_M_headERS3_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800b0c4:	b580      	push	{r7, lr}
 800b0c6:	b082      	sub	sp, #8
 800b0c8:	af00      	add	r7, sp, #0
 800b0ca:	6078      	str	r0, [r7, #4]
 800b0cc:	6878      	ldr	r0, [r7, #4]
 800b0ce:	f000 f998 	bl	800b402 <_ZNSt10_Head_baseILj1ESt14default_deleteI14CommsInterfaceELb1EE7_M_headERS3_>
 800b0d2:	4603      	mov	r3, r0
 800b0d4:	4618      	mov	r0, r3
 800b0d6:	3708      	adds	r7, #8
 800b0d8:	46bd      	mov	sp, r7
 800b0da:	bd80      	pop	{r7, pc}

0800b0dc <_ZNSt10_Head_baseILj1ESt14default_deleteI17JsonConfigHandlerELb1EEC1Ev>:
      constexpr _Head_base()
 800b0dc:	b480      	push	{r7}
 800b0de:	b083      	sub	sp, #12
 800b0e0:	af00      	add	r7, sp, #0
 800b0e2:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	4618      	mov	r0, r3
 800b0e8:	370c      	adds	r7, #12
 800b0ea:	46bd      	mov	sp, r7
 800b0ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0f0:	4770      	bx	lr

0800b0f2 <_ZNSt11_Tuple_implILj0EJP17JsonConfigHandlerSt14default_deleteIS0_EEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800b0f2:	b580      	push	{r7, lr}
 800b0f4:	b082      	sub	sp, #8
 800b0f6:	af00      	add	r7, sp, #0
 800b0f8:	6078      	str	r0, [r7, #4]
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	4618      	mov	r0, r3
 800b0fe:	f000 f98b 	bl	800b418 <_ZNSt10_Head_baseILj0EP17JsonConfigHandlerLb0EE7_M_headERS2_>
 800b102:	4603      	mov	r3, r0
 800b104:	4618      	mov	r0, r3
 800b106:	3708      	adds	r7, #8
 800b108:	46bd      	mov	sp, r7
 800b10a:	bd80      	pop	{r7, pc}

0800b10c <_ZNSt10_Head_baseILj1ESt14default_deleteI12CommsHandlerELb1EEC1Ev>:
      constexpr _Head_base()
 800b10c:	b480      	push	{r7}
 800b10e:	b083      	sub	sp, #12
 800b110:	af00      	add	r7, sp, #0
 800b112:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	4618      	mov	r0, r3
 800b118:	370c      	adds	r7, #12
 800b11a:	46bd      	mov	sp, r7
 800b11c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b120:	4770      	bx	lr

0800b122 <_ZNSt11_Tuple_implILj0EJP12CommsHandlerSt14default_deleteIS0_EEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800b122:	b580      	push	{r7, lr}
 800b124:	b082      	sub	sp, #8
 800b126:	af00      	add	r7, sp, #0
 800b128:	6078      	str	r0, [r7, #4]
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	4618      	mov	r0, r3
 800b12e:	f000 f97e 	bl	800b42e <_ZNSt10_Head_baseILj0EP12CommsHandlerLb0EE7_M_headERS2_>
 800b132:	4603      	mov	r3, r0
 800b134:	4618      	mov	r0, r3
 800b136:	3708      	adds	r7, #8
 800b138:	46bd      	mov	sp, r7
 800b13a:	bd80      	pop	{r7, pc}

0800b13c <_ZNSt10_Head_baseILj1ESt14default_deleteI9pruThreadELb1EEC1Ev>:
      constexpr _Head_base()
 800b13c:	b480      	push	{r7}
 800b13e:	b083      	sub	sp, #12
 800b140:	af00      	add	r7, sp, #0
 800b142:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	4618      	mov	r0, r3
 800b148:	370c      	adds	r7, #12
 800b14a:	46bd      	mov	sp, r7
 800b14c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b150:	4770      	bx	lr

0800b152 <_ZNSt11_Tuple_implILj0EJP9pruThreadSt14default_deleteIS0_EEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800b152:	b580      	push	{r7, lr}
 800b154:	b082      	sub	sp, #8
 800b156:	af00      	add	r7, sp, #0
 800b158:	6078      	str	r0, [r7, #4]
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	4618      	mov	r0, r3
 800b15e:	f000 f971 	bl	800b444 <_ZNSt10_Head_baseILj0EP9pruThreadLb0EE7_M_headERS2_>
 800b162:	4603      	mov	r3, r0
 800b164:	4618      	mov	r0, r3
 800b166:	3708      	adds	r7, #8
 800b168:	46bd      	mov	sp, r7
 800b16a:	bd80      	pop	{r7, pc}

0800b16c <_ZNSaISt10shared_ptrI6ModuleEED1Ev>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }

#if __cpp_constexpr_dynamic_alloc
      constexpr
#endif
      ~allocator() _GLIBCXX_NOTHROW { }
 800b16c:	b580      	push	{r7, lr}
 800b16e:	b082      	sub	sp, #8
 800b170:	af00      	add	r7, sp, #0
 800b172:	6078      	str	r0, [r7, #4]
 800b174:	6878      	ldr	r0, [r7, #4]
 800b176:	f000 f970 	bl	800b45a <_ZNSt15__new_allocatorISt10shared_ptrI6ModuleEED1Ev>
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	4618      	mov	r0, r3
 800b17e:	3708      	adds	r7, #8
 800b180:	46bd      	mov	sp, r7
 800b182:	bd80      	pop	{r7, pc}

0800b184 <_ZNSt12_Vector_baseISt10shared_ptrI6ModuleESaIS2_EE13_M_deallocateEPS2_j>:
      _M_deallocate(pointer __p, size_t __n)
 800b184:	b580      	push	{r7, lr}
 800b186:	b084      	sub	sp, #16
 800b188:	af00      	add	r7, sp, #0
 800b18a:	60f8      	str	r0, [r7, #12]
 800b18c:	60b9      	str	r1, [r7, #8]
 800b18e:	607a      	str	r2, [r7, #4]
	if (__p)
 800b190:	68bb      	ldr	r3, [r7, #8]
 800b192:	2b00      	cmp	r3, #0
 800b194:	d005      	beq.n	800b1a2 <_ZNSt12_Vector_baseISt10shared_ptrI6ModuleESaIS2_EE13_M_deallocateEPS2_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 800b196:	68fb      	ldr	r3, [r7, #12]
 800b198:	687a      	ldr	r2, [r7, #4]
 800b19a:	68b9      	ldr	r1, [r7, #8]
 800b19c:	4618      	mov	r0, r3
 800b19e:	f000 f967 	bl	800b470 <_ZNSt16allocator_traitsISaISt10shared_ptrI6ModuleEEE10deallocateERS3_PS2_j>
      }
 800b1a2:	bf00      	nop
 800b1a4:	3710      	adds	r7, #16
 800b1a6:	46bd      	mov	sp, r7
 800b1a8:	bd80      	pop	{r7, pc}

0800b1aa <_ZSt8_DestroyIPSt10shared_ptrI6ModuleEEvT_S4_>:
   * a trivial destructor, the compiler should optimize all of this
   * away, otherwise the objects' destructors must be invoked.
   */
  template<typename _ForwardIterator>
    _GLIBCXX20_CONSTEXPR inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 800b1aa:	b580      	push	{r7, lr}
 800b1ac:	b082      	sub	sp, #8
 800b1ae:	af00      	add	r7, sp, #0
 800b1b0:	6078      	str	r0, [r7, #4]
 800b1b2:	6039      	str	r1, [r7, #0]
#if __cplusplus >= 202002L
      if (std::__is_constant_evaluated())
	return _Destroy_aux<false>::__destroy(__first, __last);
#endif
      std::_Destroy_aux<__has_trivial_destructor(_Value_type)>::
	__destroy(__first, __last);
 800b1b4:	6839      	ldr	r1, [r7, #0]
 800b1b6:	6878      	ldr	r0, [r7, #4]
 800b1b8:	f000 f969 	bl	800b48e <_ZNSt12_Destroy_auxILb0EE9__destroyIPSt10shared_ptrI6ModuleEEEvT_S6_>
    }
 800b1bc:	bf00      	nop
 800b1be:	3708      	adds	r7, #8
 800b1c0:	46bd      	mov	sp, r7
 800b1c2:	bd80      	pop	{r7, pc}

0800b1c4 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI17JsonConfigHandlerEEE7_M_headERS3_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800b1c4:	b580      	push	{r7, lr}
 800b1c6:	b082      	sub	sp, #8
 800b1c8:	af00      	add	r7, sp, #0
 800b1ca:	6078      	str	r0, [r7, #4]
 800b1cc:	6878      	ldr	r0, [r7, #4]
 800b1ce:	f000 f977 	bl	800b4c0 <_ZNSt10_Head_baseILj1ESt14default_deleteI17JsonConfigHandlerELb1EE7_M_headERS3_>
 800b1d2:	4603      	mov	r3, r0
 800b1d4:	4618      	mov	r0, r3
 800b1d6:	3708      	adds	r7, #8
 800b1d8:	46bd      	mov	sp, r7
 800b1da:	bd80      	pop	{r7, pc}

0800b1dc <_ZNSt11_Tuple_implILj0EJP8SPICommsSt14default_deleteIS0_EEEC1Ev>:
      constexpr _Tuple_impl()
 800b1dc:	b580      	push	{r7, lr}
 800b1de:	b082      	sub	sp, #8
 800b1e0:	af00      	add	r7, sp, #0
 800b1e2:	6078      	str	r0, [r7, #4]
      : _Inherited(), _Base() { }
 800b1e4:	6878      	ldr	r0, [r7, #4]
 800b1e6:	f000 f976 	bl	800b4d6 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI8SPICommsEEEC1Ev>
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	4618      	mov	r0, r3
 800b1ee:	f000 f97e 	bl	800b4ee <_ZNSt10_Head_baseILj0EP8SPICommsLb0EEC1Ev>
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	4618      	mov	r0, r3
 800b1f6:	3708      	adds	r7, #8
 800b1f8:	46bd      	mov	sp, r7
 800b1fa:	bd80      	pop	{r7, pc}

0800b1fc <_ZNSt11_Tuple_implILj0EJP8SPICommsSt14default_deleteIS0_EEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800b1fc:	b580      	push	{r7, lr}
 800b1fe:	b082      	sub	sp, #8
 800b200:	af00      	add	r7, sp, #0
 800b202:	6078      	str	r0, [r7, #4]
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	4618      	mov	r0, r3
 800b208:	f000 f97f 	bl	800b50a <_ZNSt10_Head_baseILj0EP8SPICommsLb0EE7_M_headERS2_>
 800b20c:	4603      	mov	r3, r0
 800b20e:	4618      	mov	r0, r3
 800b210:	3708      	adds	r7, #8
 800b212:	46bd      	mov	sp, r7
 800b214:	bd80      	pop	{r7, pc}

0800b216 <_ZSt12__get_helperILj1ESt14default_deleteI8SPICommsEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800b216:	b580      	push	{r7, lr}
 800b218:	b082      	sub	sp, #8
 800b21a:	af00      	add	r7, sp, #0
 800b21c:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800b21e:	6878      	ldr	r0, [r7, #4]
 800b220:	f000 f97e 	bl	800b520 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI8SPICommsEEE7_M_headERS3_>
 800b224:	4603      	mov	r3, r0
 800b226:	4618      	mov	r0, r3
 800b228:	3708      	adds	r7, #8
 800b22a:	46bd      	mov	sp, r7
 800b22c:	bd80      	pop	{r7, pc}

0800b22e <_ZNSt11_Tuple_implILj1EJSt14default_deleteI12CommsHandlerEEE7_M_headERS3_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800b22e:	b580      	push	{r7, lr}
 800b230:	b082      	sub	sp, #8
 800b232:	af00      	add	r7, sp, #0
 800b234:	6078      	str	r0, [r7, #4]
 800b236:	6878      	ldr	r0, [r7, #4]
 800b238:	f000 f97e 	bl	800b538 <_ZNSt10_Head_baseILj1ESt14default_deleteI12CommsHandlerELb1EE7_M_headERS3_>
 800b23c:	4603      	mov	r3, r0
 800b23e:	4618      	mov	r0, r3
 800b240:	3708      	adds	r7, #8
 800b242:	46bd      	mov	sp, r7
 800b244:	bd80      	pop	{r7, pc}

0800b246 <_ZSt12__get_helperILj0EP12CommsHandlerJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800b246:	b580      	push	{r7, lr}
 800b248:	b082      	sub	sp, #8
 800b24a:	af00      	add	r7, sp, #0
 800b24c:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800b24e:	6878      	ldr	r0, [r7, #4]
 800b250:	f000 f97d 	bl	800b54e <_ZNSt11_Tuple_implILj0EJP12CommsHandlerSt14default_deleteIS0_EEE7_M_headERKS4_>
 800b254:	4603      	mov	r3, r0
 800b256:	4618      	mov	r0, r3
 800b258:	3708      	adds	r7, #8
 800b25a:	46bd      	mov	sp, r7
 800b25c:	bd80      	pop	{r7, pc}

0800b25e <_ZNSt11_Tuple_implILj1EJSt14default_deleteI14CommsInterfaceEEEC1IS0_I8SPICommsEEEOT_>:
	_Tuple_impl(_UHead&& __head)
 800b25e:	b580      	push	{r7, lr}
 800b260:	b082      	sub	sp, #8
 800b262:	af00      	add	r7, sp, #0
 800b264:	6078      	str	r0, [r7, #4]
 800b266:	6039      	str	r1, [r7, #0]
	: _Base(std::forward<_UHead>(__head))
 800b268:	6838      	ldr	r0, [r7, #0]
 800b26a:	f7ff f979 	bl	800a560 <_ZSt7forwardISt14default_deleteI8SPICommsEEOT_RNSt16remove_referenceIS3_E4typeE>
 800b26e:	4603      	mov	r3, r0
 800b270:	4619      	mov	r1, r3
 800b272:	6878      	ldr	r0, [r7, #4]
 800b274:	f000 f978 	bl	800b568 <_ZNSt10_Head_baseILj1ESt14default_deleteI14CommsInterfaceELb1EEC1IS0_I8SPICommsEEEOT_>
	{ }
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	4618      	mov	r0, r3
 800b27c:	3708      	adds	r7, #8
 800b27e:	46bd      	mov	sp, r7
 800b280:	bd80      	pop	{r7, pc}

0800b282 <_ZNSt10_Head_baseILj0EP14CommsInterfaceLb0EEC1IRS1_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
 800b282:	b580      	push	{r7, lr}
 800b284:	b082      	sub	sp, #8
 800b286:	af00      	add	r7, sp, #0
 800b288:	6078      	str	r0, [r7, #4]
 800b28a:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 800b28c:	6838      	ldr	r0, [r7, #0]
 800b28e:	f7ff fe66 	bl	800af5e <_ZSt7forwardIRP14CommsInterfaceEOT_RNSt16remove_referenceIS3_E4typeE>
 800b292:	4603      	mov	r3, r0
 800b294:	681a      	ldr	r2, [r3, #0]
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	601a      	str	r2, [r3, #0]
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	4618      	mov	r0, r3
 800b29e:	3708      	adds	r7, #8
 800b2a0:	46bd      	mov	sp, r7
 800b2a2:	bd80      	pop	{r7, pc}

0800b2a4 <_ZNSt11_Tuple_implILj0EJP14CommsInterfaceSt14default_deleteIS0_EEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800b2a4:	b580      	push	{r7, lr}
 800b2a6:	b082      	sub	sp, #8
 800b2a8:	af00      	add	r7, sp, #0
 800b2aa:	6078      	str	r0, [r7, #4]
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	4618      	mov	r0, r3
 800b2b0:	f000 f96d 	bl	800b58e <_ZNSt10_Head_baseILj0EP14CommsInterfaceLb0EE7_M_headERS2_>
 800b2b4:	4603      	mov	r3, r0
 800b2b6:	4618      	mov	r0, r3
 800b2b8:	3708      	adds	r7, #8
 800b2ba:	46bd      	mov	sp, r7
 800b2bc:	bd80      	pop	{r7, pc}

0800b2be <_ZNSt11_Tuple_implILj1EJSt14default_deleteI9pruThreadEEE7_M_headERS3_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800b2be:	b580      	push	{r7, lr}
 800b2c0:	b082      	sub	sp, #8
 800b2c2:	af00      	add	r7, sp, #0
 800b2c4:	6078      	str	r0, [r7, #4]
 800b2c6:	6878      	ldr	r0, [r7, #4]
 800b2c8:	f000 f96c 	bl	800b5a4 <_ZNSt10_Head_baseILj1ESt14default_deleteI9pruThreadELb1EE7_M_headERS3_>
 800b2cc:	4603      	mov	r3, r0
 800b2ce:	4618      	mov	r0, r3
 800b2d0:	3708      	adds	r7, #8
 800b2d2:	46bd      	mov	sp, r7
 800b2d4:	bd80      	pop	{r7, pc}

0800b2d6 <_ZSt12__get_helperILj0EP17JsonConfigHandlerJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800b2d6:	b580      	push	{r7, lr}
 800b2d8:	b082      	sub	sp, #8
 800b2da:	af00      	add	r7, sp, #0
 800b2dc:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800b2de:	6878      	ldr	r0, [r7, #4]
 800b2e0:	f000 f96b 	bl	800b5ba <_ZNSt11_Tuple_implILj0EJP17JsonConfigHandlerSt14default_deleteIS0_EEE7_M_headERKS4_>
 800b2e4:	4603      	mov	r3, r0
 800b2e6:	4618      	mov	r0, r3
 800b2e8:	3708      	adds	r7, #8
 800b2ea:	46bd      	mov	sp, r7
 800b2ec:	bd80      	pop	{r7, pc}

0800b2ee <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEE7derivedEv>:
  const TDerived& derived() const {
 800b2ee:	b480      	push	{r7}
 800b2f0:	b083      	sub	sp, #12
 800b2f2:	af00      	add	r7, sp, #0
 800b2f4:	6078      	str	r0, [r7, #4]
    return static_cast<const TDerived&>(*this);
 800b2f6:	687b      	ldr	r3, [r7, #4]
  }
 800b2f8:	4618      	mov	r0, r3
 800b2fa:	370c      	adds	r7, #12
 800b2fc:	46bd      	mov	sp, r7
 800b2fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b302:	4770      	bx	lr

0800b304 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataIKNS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEEEDTcldtfp_7getDataEERT_>:
  static auto getData(TClient& client) -> decltype(client.getData()) {
 800b304:	b580      	push	{r7, lr}
 800b306:	b082      	sub	sp, #8
 800b308:	af00      	add	r7, sp, #0
 800b30a:	6078      	str	r0, [r7, #4]
    return client.getData();
 800b30c:	6878      	ldr	r0, [r7, #4]
 800b30e:	f000 f961 	bl	800b5d4 <_ZNK11ArduinoJson8V730HB226detail11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEE7getDataEv>
 800b312:	4603      	mov	r3, r0
  }
 800b314:	4618      	mov	r0, r3
 800b316:	3708      	adds	r7, #8
 800b318:	46bd      	mov	sp, r7
 800b31a:	bd80      	pop	{r7, pc}

0800b31c <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerIKNS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEEEDTcldtfp_18getResourceManagerEERT_>:
  static auto getResourceManager(TClient& client)
 800b31c:	b580      	push	{r7, lr}
 800b31e:	b082      	sub	sp, #8
 800b320:	af00      	add	r7, sp, #0
 800b322:	6078      	str	r0, [r7, #4]
    return client.getResourceManager();
 800b324:	6878      	ldr	r0, [r7, #4]
 800b326:	f000 f971 	bl	800b60c <_ZNK11ArduinoJson8V730HB226detail11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEE18getResourceManagerEv>
 800b32a:	4603      	mov	r3, r0
  }
 800b32c:	4618      	mov	r0, r3
 800b32e:	3708      	adds	r7, #8
 800b330:	46bd      	mov	sp, r7
 800b332:	bd80      	pop	{r7, pc}

0800b334 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEE18getOrCreateVariantEv>:
inline JsonVariant VariantRefBase<TDerived>::getOrCreateVariant() const {
 800b334:	b590      	push	{r4, r7, lr}
 800b336:	b083      	sub	sp, #12
 800b338:	af00      	add	r7, sp, #0
 800b33a:	6078      	str	r0, [r7, #4]
 800b33c:	6039      	str	r1, [r7, #0]
  return JsonVariant(getOrCreateData(), getResourceManager());
 800b33e:	6838      	ldr	r0, [r7, #0]
 800b340:	f000 f972 	bl	800b628 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEE15getOrCreateDataEv>
 800b344:	4604      	mov	r4, r0
 800b346:	6838      	ldr	r0, [r7, #0]
 800b348:	f7ff fe65 	bl	800b016 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEE18getResourceManagerEv>
 800b34c:	4603      	mov	r3, r0
 800b34e:	461a      	mov	r2, r3
 800b350:	4621      	mov	r1, r4
 800b352:	6878      	ldr	r0, [r7, #4]
 800b354:	f7f7 fdb0 	bl	8002eb8 <_ZN11ArduinoJson8V730HB2211JsonVariantC1EPNS0_6detail11VariantDataEPNS2_15ResourceManagerE>
}
 800b358:	6878      	ldr	r0, [r7, #4]
 800b35a:	370c      	adds	r7, #12
 800b35c:	46bd      	mov	sp, r7
 800b35e:	bd90      	pop	{r4, r7, pc}

0800b360 <_ZN11ArduinoJson8V730HB229ConverterImvE6toJsonEmNS0_11JsonVariantE>:
  static bool toJson(T src, JsonVariant dst) {
 800b360:	b580      	push	{r7, lr}
 800b362:	b086      	sub	sp, #24
 800b364:	af00      	add	r7, sp, #0
 800b366:	60f8      	str	r0, [r7, #12]
 800b368:	1d3b      	adds	r3, r7, #4
 800b36a:	e883 0006 	stmia.w	r3, {r1, r2}
    auto data = getData(dst);
 800b36e:	1d3b      	adds	r3, r7, #4
 800b370:	4618      	mov	r0, r3
 800b372:	f7f9 fae9 	bl	8004948 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataINS0_11JsonVariantEEEDTcldtfp_7getDataEERT_>
 800b376:	6178      	str	r0, [r7, #20]
    if (!data)
 800b378:	697b      	ldr	r3, [r7, #20]
 800b37a:	2b00      	cmp	r3, #0
 800b37c:	d101      	bne.n	800b382 <_ZN11ArduinoJson8V730HB229ConverterImvE6toJsonEmNS0_11JsonVariantE+0x22>
      return false;
 800b37e:	2300      	movs	r3, #0
 800b380:	e00f      	b.n	800b3a2 <_ZN11ArduinoJson8V730HB229ConverterImvE6toJsonEmNS0_11JsonVariantE+0x42>
    auto resources = getResourceManager(dst);
 800b382:	1d3b      	adds	r3, r7, #4
 800b384:	4618      	mov	r0, r3
 800b386:	f7f9 fc84 	bl	8004c92 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerINS0_11JsonVariantEEEDTcldtfp_18getResourceManagerEERT_>
 800b38a:	6138      	str	r0, [r7, #16]
    data->clear(resources);
 800b38c:	6939      	ldr	r1, [r7, #16]
 800b38e:	6978      	ldr	r0, [r7, #20]
 800b390:	f7f8 fac6 	bl	8003920 <_ZN11ArduinoJson8V730HB226detail11VariantData5clearEPNS1_15ResourceManagerE>
    return data->setInteger(src, resources);
 800b394:	693a      	ldr	r2, [r7, #16]
 800b396:	68f9      	ldr	r1, [r7, #12]
 800b398:	6978      	ldr	r0, [r7, #20]
 800b39a:	f000 f955 	bl	800b648 <_ZN11ArduinoJson8V730HB226detail11VariantData10setIntegerImEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEbE4typeES6_PNS1_15ResourceManagerE>
 800b39e:	4603      	mov	r3, r0
 800b3a0:	bf00      	nop
  }
 800b3a2:	4618      	mov	r0, r3
 800b3a4:	3718      	adds	r7, #24
 800b3a6:	46bd      	mov	sp, r7
 800b3a8:	bd80      	pop	{r7, pc}

0800b3aa <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_12ElementProxyINS0_9JsonArrayEEEE7getDataEv>:
  VariantData* getData() const {
 800b3aa:	b580      	push	{r7, lr}
 800b3ac:	b082      	sub	sp, #8
 800b3ae:	af00      	add	r7, sp, #0
 800b3b0:	6078      	str	r0, [r7, #4]
    return VariantAttorney::getData(derived());
 800b3b2:	6878      	ldr	r0, [r7, #4]
 800b3b4:	f7ff f9ff 	bl	800a7b6 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_12ElementProxyINS0_9JsonArrayEEEE7derivedEv>
 800b3b8:	4603      	mov	r3, r0
 800b3ba:	4618      	mov	r0, r3
 800b3bc:	f000 f987 	bl	800b6ce <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataIKNS1_12ElementProxyINS0_9JsonArrayEEEEEDTcldtfp_7getDataEERT_>
 800b3c0:	4603      	mov	r3, r0
  }
 800b3c2:	4618      	mov	r0, r3
 800b3c4:	3708      	adds	r7, #8
 800b3c6:	46bd      	mov	sp, r7
 800b3c8:	bd80      	pop	{r7, pc}

0800b3ca <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_12ElementProxyINS0_9JsonArrayEEEE18getResourceManagerEv>:
  ResourceManager* getResourceManager() const {
 800b3ca:	b580      	push	{r7, lr}
 800b3cc:	b082      	sub	sp, #8
 800b3ce:	af00      	add	r7, sp, #0
 800b3d0:	6078      	str	r0, [r7, #4]
    return VariantAttorney::getResourceManager(derived());
 800b3d2:	6878      	ldr	r0, [r7, #4]
 800b3d4:	f7ff f9ef 	bl	800a7b6 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_12ElementProxyINS0_9JsonArrayEEEE7derivedEv>
 800b3d8:	4603      	mov	r3, r0
 800b3da:	4618      	mov	r0, r3
 800b3dc:	f000 f996 	bl	800b70c <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerIKNS1_12ElementProxyINS0_9JsonArrayEEEEEDTcldtfp_18getResourceManagerEERT_>
 800b3e0:	4603      	mov	r3, r0
  }
 800b3e2:	4618      	mov	r0, r3
 800b3e4:	3708      	adds	r7, #8
 800b3e6:	46bd      	mov	sp, r7
 800b3e8:	bd80      	pop	{r7, pc}

0800b3ea <_ZSt12__get_helperILj0EP9pruThreadJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800b3ea:	b580      	push	{r7, lr}
 800b3ec:	b082      	sub	sp, #8
 800b3ee:	af00      	add	r7, sp, #0
 800b3f0:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800b3f2:	6878      	ldr	r0, [r7, #4]
 800b3f4:	f000 f996 	bl	800b724 <_ZNSt11_Tuple_implILj0EJP9pruThreadSt14default_deleteIS0_EEE7_M_headERKS4_>
 800b3f8:	4603      	mov	r3, r0
 800b3fa:	4618      	mov	r0, r3
 800b3fc:	3708      	adds	r7, #8
 800b3fe:	46bd      	mov	sp, r7
 800b400:	bd80      	pop	{r7, pc}

0800b402 <_ZNSt10_Head_baseILj1ESt14default_deleteI14CommsInterfaceELb1EE7_M_headERS3_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 800b402:	b480      	push	{r7}
 800b404:	b083      	sub	sp, #12
 800b406:	af00      	add	r7, sp, #0
 800b408:	6078      	str	r0, [r7, #4]
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	4618      	mov	r0, r3
 800b40e:	370c      	adds	r7, #12
 800b410:	46bd      	mov	sp, r7
 800b412:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b416:	4770      	bx	lr

0800b418 <_ZNSt10_Head_baseILj0EP17JsonConfigHandlerLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 800b418:	b480      	push	{r7}
 800b41a:	b083      	sub	sp, #12
 800b41c:	af00      	add	r7, sp, #0
 800b41e:	6078      	str	r0, [r7, #4]
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	4618      	mov	r0, r3
 800b424:	370c      	adds	r7, #12
 800b426:	46bd      	mov	sp, r7
 800b428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b42c:	4770      	bx	lr

0800b42e <_ZNSt10_Head_baseILj0EP12CommsHandlerLb0EE7_M_headERS2_>:
 800b42e:	b480      	push	{r7}
 800b430:	b083      	sub	sp, #12
 800b432:	af00      	add	r7, sp, #0
 800b434:	6078      	str	r0, [r7, #4]
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	4618      	mov	r0, r3
 800b43a:	370c      	adds	r7, #12
 800b43c:	46bd      	mov	sp, r7
 800b43e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b442:	4770      	bx	lr

0800b444 <_ZNSt10_Head_baseILj0EP9pruThreadLb0EE7_M_headERS2_>:
 800b444:	b480      	push	{r7}
 800b446:	b083      	sub	sp, #12
 800b448:	af00      	add	r7, sp, #0
 800b44a:	6078      	str	r0, [r7, #4]
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	4618      	mov	r0, r3
 800b450:	370c      	adds	r7, #12
 800b452:	46bd      	mov	sp, r7
 800b454:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b458:	4770      	bx	lr

0800b45a <_ZNSt15__new_allocatorISt10shared_ptrI6ModuleEED1Ev>:
      template<typename _Tp1>
	_GLIBCXX20_CONSTEXPR
	__new_allocator(const __new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }

#if __cplusplus <= 201703L
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800b45a:	b480      	push	{r7}
 800b45c:	b083      	sub	sp, #12
 800b45e:	af00      	add	r7, sp, #0
 800b460:	6078      	str	r0, [r7, #4]
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	4618      	mov	r0, r3
 800b466:	370c      	adds	r7, #12
 800b468:	46bd      	mov	sp, r7
 800b46a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b46e:	4770      	bx	lr

0800b470 <_ZNSt16allocator_traitsISaISt10shared_ptrI6ModuleEEE10deallocateERS3_PS2_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 800b470:	b580      	push	{r7, lr}
 800b472:	b084      	sub	sp, #16
 800b474:	af00      	add	r7, sp, #0
 800b476:	60f8      	str	r0, [r7, #12]
 800b478:	60b9      	str	r1, [r7, #8]
 800b47a:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 800b47c:	687a      	ldr	r2, [r7, #4]
 800b47e:	68b9      	ldr	r1, [r7, #8]
 800b480:	68f8      	ldr	r0, [r7, #12]
 800b482:	f000 f95c 	bl	800b73e <_ZNSt15__new_allocatorISt10shared_ptrI6ModuleEE10deallocateEPS2_j>
 800b486:	bf00      	nop
 800b488:	3710      	adds	r7, #16
 800b48a:	46bd      	mov	sp, r7
 800b48c:	bd80      	pop	{r7, pc}

0800b48e <_ZNSt12_Destroy_auxILb0EE9__destroyIPSt10shared_ptrI6ModuleEEEvT_S6_>:
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
 800b48e:	b580      	push	{r7, lr}
 800b490:	b082      	sub	sp, #8
 800b492:	af00      	add	r7, sp, #0
 800b494:	6078      	str	r0, [r7, #4]
 800b496:	6039      	str	r1, [r7, #0]
	  for (; __first != __last; ++__first)
 800b498:	e009      	b.n	800b4ae <_ZNSt12_Destroy_auxILb0EE9__destroyIPSt10shared_ptrI6ModuleEEEvT_S6_+0x20>
	    std::_Destroy(std::__addressof(*__first));
 800b49a:	6878      	ldr	r0, [r7, #4]
 800b49c:	f000 f95e 	bl	800b75c <_ZSt11__addressofISt10shared_ptrI6ModuleEEPT_RS3_>
 800b4a0:	4603      	mov	r3, r0
 800b4a2:	4618      	mov	r0, r3
 800b4a4:	f000 f965 	bl	800b772 <_ZSt8_DestroyISt10shared_ptrI6ModuleEEvPT_>
	  for (; __first != __last; ++__first)
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	3308      	adds	r3, #8
 800b4ac:	607b      	str	r3, [r7, #4]
 800b4ae:	687a      	ldr	r2, [r7, #4]
 800b4b0:	683b      	ldr	r3, [r7, #0]
 800b4b2:	429a      	cmp	r2, r3
 800b4b4:	d1f1      	bne.n	800b49a <_ZNSt12_Destroy_auxILb0EE9__destroyIPSt10shared_ptrI6ModuleEEEvT_S6_+0xc>
	}
 800b4b6:	bf00      	nop
 800b4b8:	bf00      	nop
 800b4ba:	3708      	adds	r7, #8
 800b4bc:	46bd      	mov	sp, r7
 800b4be:	bd80      	pop	{r7, pc}

0800b4c0 <_ZNSt10_Head_baseILj1ESt14default_deleteI17JsonConfigHandlerELb1EE7_M_headERS3_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 800b4c0:	b480      	push	{r7}
 800b4c2:	b083      	sub	sp, #12
 800b4c4:	af00      	add	r7, sp, #0
 800b4c6:	6078      	str	r0, [r7, #4]
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	4618      	mov	r0, r3
 800b4cc:	370c      	adds	r7, #12
 800b4ce:	46bd      	mov	sp, r7
 800b4d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4d4:	4770      	bx	lr

0800b4d6 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI8SPICommsEEEC1Ev>:
      _Tuple_impl()
 800b4d6:	b580      	push	{r7, lr}
 800b4d8:	b082      	sub	sp, #8
 800b4da:	af00      	add	r7, sp, #0
 800b4dc:	6078      	str	r0, [r7, #4]
      : _Base() { }
 800b4de:	6878      	ldr	r0, [r7, #4]
 800b4e0:	f000 f952 	bl	800b788 <_ZNSt10_Head_baseILj1ESt14default_deleteI8SPICommsELb1EEC1Ev>
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	4618      	mov	r0, r3
 800b4e8:	3708      	adds	r7, #8
 800b4ea:	46bd      	mov	sp, r7
 800b4ec:	bd80      	pop	{r7, pc}

0800b4ee <_ZNSt10_Head_baseILj0EP8SPICommsLb0EEC1Ev>:
      constexpr _Head_base()
 800b4ee:	b480      	push	{r7}
 800b4f0:	b083      	sub	sp, #12
 800b4f2:	af00      	add	r7, sp, #0
 800b4f4:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	2200      	movs	r2, #0
 800b4fa:	601a      	str	r2, [r3, #0]
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	4618      	mov	r0, r3
 800b500:	370c      	adds	r7, #12
 800b502:	46bd      	mov	sp, r7
 800b504:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b508:	4770      	bx	lr

0800b50a <_ZNSt10_Head_baseILj0EP8SPICommsLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 800b50a:	b480      	push	{r7}
 800b50c:	b083      	sub	sp, #12
 800b50e:	af00      	add	r7, sp, #0
 800b510:	6078      	str	r0, [r7, #4]
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	4618      	mov	r0, r3
 800b516:	370c      	adds	r7, #12
 800b518:	46bd      	mov	sp, r7
 800b51a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b51e:	4770      	bx	lr

0800b520 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI8SPICommsEEE7_M_headERS3_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800b520:	b580      	push	{r7, lr}
 800b522:	b082      	sub	sp, #8
 800b524:	af00      	add	r7, sp, #0
 800b526:	6078      	str	r0, [r7, #4]
 800b528:	6878      	ldr	r0, [r7, #4]
 800b52a:	f000 f938 	bl	800b79e <_ZNSt10_Head_baseILj1ESt14default_deleteI8SPICommsELb1EE7_M_headERS3_>
 800b52e:	4603      	mov	r3, r0
 800b530:	4618      	mov	r0, r3
 800b532:	3708      	adds	r7, #8
 800b534:	46bd      	mov	sp, r7
 800b536:	bd80      	pop	{r7, pc}

0800b538 <_ZNSt10_Head_baseILj1ESt14default_deleteI12CommsHandlerELb1EE7_M_headERS3_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 800b538:	b480      	push	{r7}
 800b53a:	b083      	sub	sp, #12
 800b53c:	af00      	add	r7, sp, #0
 800b53e:	6078      	str	r0, [r7, #4]
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	4618      	mov	r0, r3
 800b544:	370c      	adds	r7, #12
 800b546:	46bd      	mov	sp, r7
 800b548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b54c:	4770      	bx	lr

0800b54e <_ZNSt11_Tuple_implILj0EJP12CommsHandlerSt14default_deleteIS0_EEE7_M_headERKS4_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800b54e:	b580      	push	{r7, lr}
 800b550:	b082      	sub	sp, #8
 800b552:	af00      	add	r7, sp, #0
 800b554:	6078      	str	r0, [r7, #4]
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	4618      	mov	r0, r3
 800b55a:	f000 f92b 	bl	800b7b4 <_ZNSt10_Head_baseILj0EP12CommsHandlerLb0EE7_M_headERKS2_>
 800b55e:	4603      	mov	r3, r0
 800b560:	4618      	mov	r0, r3
 800b562:	3708      	adds	r7, #8
 800b564:	46bd      	mov	sp, r7
 800b566:	bd80      	pop	{r7, pc}

0800b568 <_ZNSt10_Head_baseILj1ESt14default_deleteI14CommsInterfaceELb1EEC1IS0_I8SPICommsEEEOT_>:
	constexpr _Head_base(_UHead&& __h)
 800b568:	b590      	push	{r4, r7, lr}
 800b56a:	b083      	sub	sp, #12
 800b56c:	af00      	add	r7, sp, #0
 800b56e:	6078      	str	r0, [r7, #4]
 800b570:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 800b572:	687c      	ldr	r4, [r7, #4]
 800b574:	6838      	ldr	r0, [r7, #0]
 800b576:	f7fe fff3 	bl	800a560 <_ZSt7forwardISt14default_deleteI8SPICommsEEOT_RNSt16remove_referenceIS3_E4typeE>
 800b57a:	4603      	mov	r3, r0
 800b57c:	4619      	mov	r1, r3
 800b57e:	4620      	mov	r0, r4
 800b580:	f000 f923 	bl	800b7ca <_ZNSt14default_deleteI14CommsInterfaceEC1I8SPICommsvEERKS_IT_E>
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	4618      	mov	r0, r3
 800b588:	370c      	adds	r7, #12
 800b58a:	46bd      	mov	sp, r7
 800b58c:	bd90      	pop	{r4, r7, pc}

0800b58e <_ZNSt10_Head_baseILj0EP14CommsInterfaceLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 800b58e:	b480      	push	{r7}
 800b590:	b083      	sub	sp, #12
 800b592:	af00      	add	r7, sp, #0
 800b594:	6078      	str	r0, [r7, #4]
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	4618      	mov	r0, r3
 800b59a:	370c      	adds	r7, #12
 800b59c:	46bd      	mov	sp, r7
 800b59e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5a2:	4770      	bx	lr

0800b5a4 <_ZNSt10_Head_baseILj1ESt14default_deleteI9pruThreadELb1EE7_M_headERS3_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 800b5a4:	b480      	push	{r7}
 800b5a6:	b083      	sub	sp, #12
 800b5a8:	af00      	add	r7, sp, #0
 800b5aa:	6078      	str	r0, [r7, #4]
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	4618      	mov	r0, r3
 800b5b0:	370c      	adds	r7, #12
 800b5b2:	46bd      	mov	sp, r7
 800b5b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5b8:	4770      	bx	lr

0800b5ba <_ZNSt11_Tuple_implILj0EJP17JsonConfigHandlerSt14default_deleteIS0_EEE7_M_headERKS4_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800b5ba:	b580      	push	{r7, lr}
 800b5bc:	b082      	sub	sp, #8
 800b5be:	af00      	add	r7, sp, #0
 800b5c0:	6078      	str	r0, [r7, #4]
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	4618      	mov	r0, r3
 800b5c6:	f000 f90c 	bl	800b7e2 <_ZNSt10_Head_baseILj0EP17JsonConfigHandlerLb0EE7_M_headERKS2_>
 800b5ca:	4603      	mov	r3, r0
 800b5cc:	4618      	mov	r0, r3
 800b5ce:	3708      	adds	r7, #8
 800b5d0:	46bd      	mov	sp, r7
 800b5d2:	bd80      	pop	{r7, pc}

0800b5d4 <_ZNK11ArduinoJson8V730HB226detail11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEE7getDataEv>:
  VariantData* getData() const {
 800b5d4:	b590      	push	{r4, r7, lr}
 800b5d6:	b085      	sub	sp, #20
 800b5d8:	af02      	add	r7, sp, #8
 800b5da:	6078      	str	r0, [r7, #4]
        VariantAttorney::getData(upstream_), key_,
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	3304      	adds	r3, #4
 800b5e0:	4618      	mov	r0, r3
 800b5e2:	f000 f874 	bl	800b6ce <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataIKNS1_12ElementProxyINS0_9JsonArrayEEEEEDTcldtfp_7getDataEERT_>
 800b5e6:	4604      	mov	r4, r0
        VariantAttorney::getResourceManager(upstream_));
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	3304      	adds	r3, #4
 800b5ec:	4618      	mov	r0, r3
 800b5ee:	f000 f88d 	bl	800b70c <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerIKNS1_12ElementProxyINS0_9JsonArrayEEEEEDTcldtfp_18getResourceManagerEERT_>
 800b5f2:	4602      	mov	r2, r0
    return VariantData::getMember(
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	9200      	str	r2, [sp, #0]
 800b5f8:	3314      	adds	r3, #20
 800b5fa:	cb0e      	ldmia	r3, {r1, r2, r3}
 800b5fc:	4620      	mov	r0, r4
 800b5fe:	f7fb fc27 	bl	8006e50 <_ZN11ArduinoJson8V730HB226detail11VariantData9getMemberINS1_9RamStringEEEPS2_PKS2_T_PKNS1_15ResourceManagerE>
 800b602:	4603      	mov	r3, r0
  }
 800b604:	4618      	mov	r0, r3
 800b606:	370c      	adds	r7, #12
 800b608:	46bd      	mov	sp, r7
 800b60a:	bd90      	pop	{r4, r7, pc}

0800b60c <_ZNK11ArduinoJson8V730HB226detail11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEE18getResourceManagerEv>:
  ResourceManager* getResourceManager() const {
 800b60c:	b580      	push	{r7, lr}
 800b60e:	b082      	sub	sp, #8
 800b610:	af00      	add	r7, sp, #0
 800b612:	6078      	str	r0, [r7, #4]
    return VariantAttorney::getResourceManager(upstream_);
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	3304      	adds	r3, #4
 800b618:	4618      	mov	r0, r3
 800b61a:	f000 f877 	bl	800b70c <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerIKNS1_12ElementProxyINS0_9JsonArrayEEEEEDTcldtfp_18getResourceManagerEERT_>
 800b61e:	4603      	mov	r3, r0
  }
 800b620:	4618      	mov	r0, r3
 800b622:	3708      	adds	r7, #8
 800b624:	46bd      	mov	sp, r7
 800b626:	bd80      	pop	{r7, pc}

0800b628 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEE15getOrCreateDataEv>:
  VariantData* getOrCreateData() const {
 800b628:	b580      	push	{r7, lr}
 800b62a:	b082      	sub	sp, #8
 800b62c:	af00      	add	r7, sp, #0
 800b62e:	6078      	str	r0, [r7, #4]
    return VariantAttorney::getOrCreateData(derived());
 800b630:	6878      	ldr	r0, [r7, #4]
 800b632:	f7ff fe5c 	bl	800b2ee <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEE7derivedEv>
 800b636:	4603      	mov	r3, r0
 800b638:	4618      	mov	r0, r3
 800b63a:	f000 f8dd 	bl	800b7f8 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney15getOrCreateDataIKNS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEEEPNS1_11VariantDataERT_>
 800b63e:	4603      	mov	r3, r0
  }
 800b640:	4618      	mov	r0, r3
 800b642:	3708      	adds	r7, #8
 800b644:	46bd      	mov	sp, r7
 800b646:	bd80      	pop	{r7, pc}

0800b648 <_ZN11ArduinoJson8V730HB226detail11VariantData10setIntegerImEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEbE4typeES6_PNS1_15ResourceManagerE>:
#endif
  return true;
}

template <typename T>
enable_if_t<is_unsigned<T>::value, bool> VariantData::setInteger(
 800b648:	b5b0      	push	{r4, r5, r7, lr}
 800b64a:	b086      	sub	sp, #24
 800b64c:	af00      	add	r7, sp, #0
 800b64e:	60f8      	str	r0, [r7, #12]
 800b650:	60b9      	str	r1, [r7, #8]
 800b652:	607a      	str	r2, [r7, #4]
    T value, ResourceManager* resources) {
  ARDUINOJSON_ASSERT(type_ == VariantType::Null);  // must call clear() first
  (void)resources;                                 // silence warning

  if (canConvertNumber<uint32_t>(value)) {
 800b654:	68b8      	ldr	r0, [r7, #8]
 800b656:	f7fa fec4 	bl	80063e2 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberImmEENS1_9enable_ifIXaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_11is_unsignedIS5_EE5valuesrNS4_IT_EE5valuelestS9_stS5_EbE4typeES5_>
 800b65a:	4603      	mov	r3, r0
 800b65c:	2b00      	cmp	r3, #0
 800b65e:	d006      	beq.n	800b66e <_ZN11ArduinoJson8V730HB226detail11VariantData10setIntegerImEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEbE4typeES6_PNS1_15ResourceManagerE+0x26>
    type_ = VariantType::Uint32;
 800b660:	68fb      	ldr	r3, [r7, #12]
 800b662:	220a      	movs	r2, #10
 800b664:	711a      	strb	r2, [r3, #4]
    content_.asUint32 = static_cast<uint32_t>(value);
 800b666:	68fb      	ldr	r3, [r7, #12]
 800b668:	68ba      	ldr	r2, [r7, #8]
 800b66a:	601a      	str	r2, [r3, #0]
 800b66c:	e02a      	b.n	800b6c4 <_ZN11ArduinoJson8V730HB226detail11VariantData10setIntegerImEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEbE4typeES6_PNS1_15ResourceManagerE+0x7c>
  }
#if ARDUINOJSON_USE_LONG_LONG
  else {
    auto extension = resources->allocExtension();
 800b66e:	f107 0310 	add.w	r3, r7, #16
 800b672:	6879      	ldr	r1, [r7, #4]
 800b674:	4618      	mov	r0, r3
 800b676:	f7f7 ff6c 	bl	8003552 <_ZN11ArduinoJson8V730HB226detail15ResourceManager14allocExtensionEv>
    if (!extension)
 800b67a:	f107 0310 	add.w	r3, r7, #16
 800b67e:	4618      	mov	r0, r3
 800b680:	f7fc f889 	bl	8007796 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_16VariantExtensionEEcvbEv>
 800b684:	4603      	mov	r3, r0
 800b686:	f083 0301 	eor.w	r3, r3, #1
 800b68a:	b2db      	uxtb	r3, r3
 800b68c:	2b00      	cmp	r3, #0
 800b68e:	d001      	beq.n	800b694 <_ZN11ArduinoJson8V730HB226detail11VariantData10setIntegerImEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEbE4typeES6_PNS1_15ResourceManagerE+0x4c>
      return false;
 800b690:	2300      	movs	r3, #0
 800b692:	e018      	b.n	800b6c6 <_ZN11ArduinoJson8V730HB226detail11VariantData10setIntegerImEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEbE4typeES6_PNS1_15ResourceManagerE+0x7e>
    type_ = VariantType::Uint64;
 800b694:	68fb      	ldr	r3, [r7, #12]
 800b696:	221a      	movs	r2, #26
 800b698:	711a      	strb	r2, [r3, #4]
    content_.asSlotId = extension.id();
 800b69a:	f107 0310 	add.w	r3, r7, #16
 800b69e:	4618      	mov	r0, r3
 800b6a0:	f7fc f88a 	bl	80077b8 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_16VariantExtensionEE2idEv>
 800b6a4:	4603      	mov	r3, r0
 800b6a6:	461a      	mov	r2, r3
 800b6a8:	68fb      	ldr	r3, [r7, #12]
 800b6aa:	801a      	strh	r2, [r3, #0]
    extension->asUint64 = value;
 800b6ac:	68bb      	ldr	r3, [r7, #8]
 800b6ae:	2200      	movs	r2, #0
 800b6b0:	461c      	mov	r4, r3
 800b6b2:	4615      	mov	r5, r2
 800b6b4:	f107 0310 	add.w	r3, r7, #16
 800b6b8:	4618      	mov	r0, r3
 800b6ba:	f7fc f889 	bl	80077d0 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_16VariantExtensionEEptEv>
 800b6be:	4603      	mov	r3, r0
 800b6c0:	e9c3 4500 	strd	r4, r5, [r3]
  }
#endif
  return true;
 800b6c4:	2301      	movs	r3, #1
}
 800b6c6:	4618      	mov	r0, r3
 800b6c8:	3718      	adds	r7, #24
 800b6ca:	46bd      	mov	sp, r7
 800b6cc:	bdb0      	pop	{r4, r5, r7, pc}

0800b6ce <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataIKNS1_12ElementProxyINS0_9JsonArrayEEEEEDTcldtfp_7getDataEERT_>:
  static auto getData(TClient& client) -> decltype(client.getData()) {
 800b6ce:	b5b0      	push	{r4, r5, r7, lr}
 800b6d0:	b084      	sub	sp, #16
 800b6d2:	af00      	add	r7, sp, #0
 800b6d4:	6078      	str	r0, [r7, #4]
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	60fb      	str	r3, [r7, #12]
    return VariantAttorney::getResourceManager(upstream_);
  }

  FORCE_INLINE VariantData* getData() const {
    return VariantData::getElement(
        VariantAttorney::getData(upstream_), index_,
 800b6da:	68fb      	ldr	r3, [r7, #12]
 800b6dc:	3304      	adds	r3, #4
 800b6de:	4618      	mov	r0, r3
 800b6e0:	f000 f904 	bl	800b8ec <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataIKNS0_9JsonArrayEEEDTcldtfp_7getDataEERT_>
 800b6e4:	4605      	mov	r5, r0
 800b6e6:	68fb      	ldr	r3, [r7, #12]
 800b6e8:	68dc      	ldr	r4, [r3, #12]
        VariantAttorney::getResourceManager(upstream_));
 800b6ea:	68fb      	ldr	r3, [r7, #12]
 800b6ec:	3304      	adds	r3, #4
 800b6ee:	4618      	mov	r0, r3
 800b6f0:	f000 f908 	bl	800b904 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerIKNS0_9JsonArrayEEEDTcldtfp_18getResourceManagerEERT_>
 800b6f4:	4603      	mov	r3, r0
    return VariantData::getElement(
 800b6f6:	461a      	mov	r2, r3
 800b6f8:	4621      	mov	r1, r4
 800b6fa:	4628      	mov	r0, r5
 800b6fc:	f7fd fb35 	bl	8008d6a <_ZN11ArduinoJson8V730HB226detail11VariantData10getElementEPKS2_jPKNS1_15ResourceManagerE>
 800b700:	4603      	mov	r3, r0
        VariantAttorney::getResourceManager(upstream_));
 800b702:	bf00      	nop
  }
 800b704:	4618      	mov	r0, r3
 800b706:	3710      	adds	r7, #16
 800b708:	46bd      	mov	sp, r7
 800b70a:	bdb0      	pop	{r4, r5, r7, pc}

0800b70c <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerIKNS1_12ElementProxyINS0_9JsonArrayEEEEEDTcldtfp_18getResourceManagerEERT_>:
  static auto getResourceManager(TClient& client)
 800b70c:	b580      	push	{r7, lr}
 800b70e:	b082      	sub	sp, #8
 800b710:	af00      	add	r7, sp, #0
 800b712:	6078      	str	r0, [r7, #4]
    return client.getResourceManager();
 800b714:	6878      	ldr	r0, [r7, #4]
 800b716:	f000 f87b 	bl	800b810 <_ZNK11ArduinoJson8V730HB226detail12ElementProxyINS0_9JsonArrayEE18getResourceManagerEv>
 800b71a:	4603      	mov	r3, r0
  }
 800b71c:	4618      	mov	r0, r3
 800b71e:	3708      	adds	r7, #8
 800b720:	46bd      	mov	sp, r7
 800b722:	bd80      	pop	{r7, pc}

0800b724 <_ZNSt11_Tuple_implILj0EJP9pruThreadSt14default_deleteIS0_EEE7_M_headERKS4_>:
 800b724:	b580      	push	{r7, lr}
 800b726:	b082      	sub	sp, #8
 800b728:	af00      	add	r7, sp, #0
 800b72a:	6078      	str	r0, [r7, #4]
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	4618      	mov	r0, r3
 800b730:	f000 f87c 	bl	800b82c <_ZNSt10_Head_baseILj0EP9pruThreadLb0EE7_M_headERKS2_>
 800b734:	4603      	mov	r3, r0
 800b736:	4618      	mov	r0, r3
 800b738:	3708      	adds	r7, #8
 800b73a:	46bd      	mov	sp, r7
 800b73c:	bd80      	pop	{r7, pc}

0800b73e <_ZNSt15__new_allocatorISt10shared_ptrI6ModuleEE10deallocateEPS2_j>:
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
 800b73e:	b580      	push	{r7, lr}
 800b740:	b084      	sub	sp, #16
 800b742:	af00      	add	r7, sp, #0
 800b744:	60f8      	str	r0, [r7, #12]
 800b746:	60b9      	str	r1, [r7, #8]
 800b748:	607a      	str	r2, [r7, #4]
	    _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n),
				     std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	00db      	lsls	r3, r3, #3
 800b74e:	4619      	mov	r1, r3
 800b750:	68b8      	ldr	r0, [r7, #8]
 800b752:	f012 fd12 	bl	801e17a <_ZdlPvj>
      }
 800b756:	3710      	adds	r7, #16
 800b758:	46bd      	mov	sp, r7
 800b75a:	bd80      	pop	{r7, pc}

0800b75c <_ZSt11__addressofISt10shared_ptrI6ModuleEEPT_RS3_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 800b75c:	b480      	push	{r7}
 800b75e:	b083      	sub	sp, #12
 800b760:	af00      	add	r7, sp, #0
 800b762:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	4618      	mov	r0, r3
 800b768:	370c      	adds	r7, #12
 800b76a:	46bd      	mov	sp, r7
 800b76c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b770:	4770      	bx	lr

0800b772 <_ZSt8_DestroyISt10shared_ptrI6ModuleEEvPT_>:
    _Destroy(_Tp* __pointer)
 800b772:	b580      	push	{r7, lr}
 800b774:	b082      	sub	sp, #8
 800b776:	af00      	add	r7, sp, #0
 800b778:	6078      	str	r0, [r7, #4]
      __pointer->~_Tp();
 800b77a:	6878      	ldr	r0, [r7, #4]
 800b77c:	f7fd fe30 	bl	80093e0 <_ZNSt10shared_ptrI6ModuleED1Ev>
    }
 800b780:	bf00      	nop
 800b782:	3708      	adds	r7, #8
 800b784:	46bd      	mov	sp, r7
 800b786:	bd80      	pop	{r7, pc}

0800b788 <_ZNSt10_Head_baseILj1ESt14default_deleteI8SPICommsELb1EEC1Ev>:
      constexpr _Head_base()
 800b788:	b480      	push	{r7}
 800b78a:	b083      	sub	sp, #12
 800b78c:	af00      	add	r7, sp, #0
 800b78e:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	4618      	mov	r0, r3
 800b794:	370c      	adds	r7, #12
 800b796:	46bd      	mov	sp, r7
 800b798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b79c:	4770      	bx	lr

0800b79e <_ZNSt10_Head_baseILj1ESt14default_deleteI8SPICommsELb1EE7_M_headERS3_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 800b79e:	b480      	push	{r7}
 800b7a0:	b083      	sub	sp, #12
 800b7a2:	af00      	add	r7, sp, #0
 800b7a4:	6078      	str	r0, [r7, #4]
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	4618      	mov	r0, r3
 800b7aa:	370c      	adds	r7, #12
 800b7ac:	46bd      	mov	sp, r7
 800b7ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7b2:	4770      	bx	lr

0800b7b4 <_ZNSt10_Head_baseILj0EP12CommsHandlerLb0EE7_M_headERKS2_>:
      _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }
 800b7b4:	b480      	push	{r7}
 800b7b6:	b083      	sub	sp, #12
 800b7b8:	af00      	add	r7, sp, #0
 800b7ba:	6078      	str	r0, [r7, #4]
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	4618      	mov	r0, r3
 800b7c0:	370c      	adds	r7, #12
 800b7c2:	46bd      	mov	sp, r7
 800b7c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7c8:	4770      	bx	lr

0800b7ca <_ZNSt14default_deleteI14CommsInterfaceEC1I8SPICommsvEERKS_IT_E>:
        default_delete(const default_delete<_Up>&) noexcept { }
 800b7ca:	b480      	push	{r7}
 800b7cc:	b083      	sub	sp, #12
 800b7ce:	af00      	add	r7, sp, #0
 800b7d0:	6078      	str	r0, [r7, #4]
 800b7d2:	6039      	str	r1, [r7, #0]
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	4618      	mov	r0, r3
 800b7d8:	370c      	adds	r7, #12
 800b7da:	46bd      	mov	sp, r7
 800b7dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7e0:	4770      	bx	lr

0800b7e2 <_ZNSt10_Head_baseILj0EP17JsonConfigHandlerLb0EE7_M_headERKS2_>:
 800b7e2:	b480      	push	{r7}
 800b7e4:	b083      	sub	sp, #12
 800b7e6:	af00      	add	r7, sp, #0
 800b7e8:	6078      	str	r0, [r7, #4]
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	4618      	mov	r0, r3
 800b7ee:	370c      	adds	r7, #12
 800b7f0:	46bd      	mov	sp, r7
 800b7f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7f6:	4770      	bx	lr

0800b7f8 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney15getOrCreateDataIKNS1_11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEEEEEPNS1_11VariantDataERT_>:
  static VariantData* getOrCreateData(TClient& client) {
 800b7f8:	b580      	push	{r7, lr}
 800b7fa:	b082      	sub	sp, #8
 800b7fc:	af00      	add	r7, sp, #0
 800b7fe:	6078      	str	r0, [r7, #4]
    return client.getOrCreateData();
 800b800:	6878      	ldr	r0, [r7, #4]
 800b802:	f000 f850 	bl	800b8a6 <_ZNK11ArduinoJson8V730HB226detail11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEE15getOrCreateDataEv>
 800b806:	4603      	mov	r3, r0
  }
 800b808:	4618      	mov	r0, r3
 800b80a:	3708      	adds	r7, #8
 800b80c:	46bd      	mov	sp, r7
 800b80e:	bd80      	pop	{r7, pc}

0800b810 <_ZNK11ArduinoJson8V730HB226detail12ElementProxyINS0_9JsonArrayEE18getResourceManagerEv>:
  ResourceManager* getResourceManager() const {
 800b810:	b580      	push	{r7, lr}
 800b812:	b082      	sub	sp, #8
 800b814:	af00      	add	r7, sp, #0
 800b816:	6078      	str	r0, [r7, #4]
    return VariantAttorney::getResourceManager(upstream_);
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	3304      	adds	r3, #4
 800b81c:	4618      	mov	r0, r3
 800b81e:	f000 f871 	bl	800b904 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerIKNS0_9JsonArrayEEEDTcldtfp_18getResourceManagerEERT_>
 800b822:	4603      	mov	r3, r0
  }
 800b824:	4618      	mov	r0, r3
 800b826:	3708      	adds	r7, #8
 800b828:	46bd      	mov	sp, r7
 800b82a:	bd80      	pop	{r7, pc}

0800b82c <_ZNSt10_Head_baseILj0EP9pruThreadLb0EE7_M_headERKS2_>:
 800b82c:	b480      	push	{r7}
 800b82e:	b083      	sub	sp, #12
 800b830:	af00      	add	r7, sp, #0
 800b832:	6078      	str	r0, [r7, #4]
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	4618      	mov	r0, r3
 800b838:	370c      	adds	r7, #12
 800b83a:	46bd      	mov	sp, r7
 800b83c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b840:	4770      	bx	lr

0800b842 <_ZN11ArduinoJson8V730HB226detail11VariantData14getOrAddMemberINS1_9RamStringEEEPS2_T_PNS1_15ResourceManagerE>:
  VariantData* getOrAddMember(TAdaptedString key, ResourceManager* resources) {
 800b842:	b580      	push	{r7, lr}
 800b844:	b088      	sub	sp, #32
 800b846:	af02      	add	r7, sp, #8
 800b848:	60f8      	str	r0, [r7, #12]
 800b84a:	4638      	mov	r0, r7
 800b84c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    if (key.isNull())
 800b850:	463b      	mov	r3, r7
 800b852:	4618      	mov	r0, r3
 800b854:	f7f6 ff55 	bl	8002702 <_ZNK11ArduinoJson8V730HB226detail9RamString6isNullEv>
 800b858:	4603      	mov	r3, r0
 800b85a:	2b00      	cmp	r3, #0
 800b85c:	d001      	beq.n	800b862 <_ZN11ArduinoJson8V730HB226detail11VariantData14getOrAddMemberINS1_9RamStringEEEPS2_T_PNS1_15ResourceManagerE+0x20>
      return nullptr;
 800b85e:	2300      	movs	r3, #0
 800b860:	e01d      	b.n	800b89e <_ZN11ArduinoJson8V730HB226detail11VariantData14getOrAddMemberINS1_9RamStringEEEPS2_T_PNS1_15ResourceManagerE+0x5c>
    auto obj = isNull() ? &toObject() : asObject();
 800b862:	68f8      	ldr	r0, [r7, #12]
 800b864:	f7fd fabc 	bl	8008de0 <_ZNK11ArduinoJson8V730HB226detail11VariantData6isNullEv>
 800b868:	4603      	mov	r3, r0
 800b86a:	2b00      	cmp	r3, #0
 800b86c:	d004      	beq.n	800b878 <_ZN11ArduinoJson8V730HB226detail11VariantData14getOrAddMemberINS1_9RamStringEEEPS2_T_PNS1_15ResourceManagerE+0x36>
 800b86e:	68f8      	ldr	r0, [r7, #12]
 800b870:	f7f7 fa0e 	bl	8002c90 <_ZN11ArduinoJson8V730HB226detail11VariantData8toObjectEv>
 800b874:	4603      	mov	r3, r0
 800b876:	e003      	b.n	800b880 <_ZN11ArduinoJson8V730HB226detail11VariantData14getOrAddMemberINS1_9RamStringEEEPS2_T_PNS1_15ResourceManagerE+0x3e>
 800b878:	68f8      	ldr	r0, [r7, #12]
 800b87a:	f7f7 f8fe 	bl	8002a7a <_ZN11ArduinoJson8V730HB226detail11VariantData8asObjectEv>
 800b87e:	4603      	mov	r3, r0
 800b880:	617b      	str	r3, [r7, #20]
    if (!obj)
 800b882:	697b      	ldr	r3, [r7, #20]
 800b884:	2b00      	cmp	r3, #0
 800b886:	d101      	bne.n	800b88c <_ZN11ArduinoJson8V730HB226detail11VariantData14getOrAddMemberINS1_9RamStringEEEPS2_T_PNS1_15ResourceManagerE+0x4a>
      return nullptr;
 800b888:	2300      	movs	r3, #0
 800b88a:	e008      	b.n	800b89e <_ZN11ArduinoJson8V730HB226detail11VariantData14getOrAddMemberINS1_9RamStringEEEPS2_T_PNS1_15ResourceManagerE+0x5c>
    return obj->getOrAddMember(key, resources);
 800b88c:	6978      	ldr	r0, [r7, #20]
 800b88e:	6a3b      	ldr	r3, [r7, #32]
 800b890:	9300      	str	r3, [sp, #0]
 800b892:	463b      	mov	r3, r7
 800b894:	cb0e      	ldmia	r3, {r1, r2, r3}
 800b896:	f000 f841 	bl	800b91c <_ZN11ArduinoJson8V730HB226detail10ObjectData14getOrAddMemberINS1_9RamStringEEEPNS1_11VariantDataET_PNS1_15ResourceManagerE>
 800b89a:	4603      	mov	r3, r0
 800b89c:	bf00      	nop
  }
 800b89e:	4618      	mov	r0, r3
 800b8a0:	3718      	adds	r7, #24
 800b8a2:	46bd      	mov	sp, r7
 800b8a4:	bd80      	pop	{r7, pc}

0800b8a6 <_ZNK11ArduinoJson8V730HB226detail11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEE15getOrCreateDataEv>:

  VariantData* getOrCreateData() const {
 800b8a6:	b590      	push	{r4, r7, lr}
 800b8a8:	b087      	sub	sp, #28
 800b8aa:	af02      	add	r7, sp, #8
 800b8ac:	6078      	str	r0, [r7, #4]
    auto data = VariantAttorney::getOrCreateData(upstream_);
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	3304      	adds	r3, #4
 800b8b2:	4618      	mov	r0, r3
 800b8b4:	f000 f853 	bl	800b95e <_ZN11ArduinoJson8V730HB226detail15VariantAttorney15getOrCreateDataIKNS1_12ElementProxyINS0_9JsonArrayEEEEEPNS1_11VariantDataERT_>
 800b8b8:	60f8      	str	r0, [r7, #12]
    if (!data)
 800b8ba:	68fb      	ldr	r3, [r7, #12]
 800b8bc:	2b00      	cmp	r3, #0
 800b8be:	d101      	bne.n	800b8c4 <_ZNK11ArduinoJson8V730HB226detail11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEE15getOrCreateDataEv+0x1e>
      return nullptr;
 800b8c0:	2300      	movs	r3, #0
 800b8c2:	e00f      	b.n	800b8e4 <_ZNK11ArduinoJson8V730HB226detail11MemberProxyINS1_12ElementProxyINS0_9JsonArrayEEENS1_9RamStringEE15getOrCreateDataEv+0x3e>
    return data->getOrAddMember(key_,
 800b8c4:	68fc      	ldr	r4, [r7, #12]
                                VariantAttorney::getResourceManager(upstream_));
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	3304      	adds	r3, #4
    return data->getOrAddMember(key_,
 800b8ca:	4618      	mov	r0, r3
 800b8cc:	f7ff ff1e 	bl	800b70c <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerIKNS1_12ElementProxyINS0_9JsonArrayEEEEEDTcldtfp_18getResourceManagerEERT_>
 800b8d0:	4602      	mov	r2, r0
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	9200      	str	r2, [sp, #0]
 800b8d6:	3314      	adds	r3, #20
 800b8d8:	cb0e      	ldmia	r3, {r1, r2, r3}
 800b8da:	4620      	mov	r0, r4
 800b8dc:	f7ff ffb1 	bl	800b842 <_ZN11ArduinoJson8V730HB226detail11VariantData14getOrAddMemberINS1_9RamStringEEEPS2_T_PNS1_15ResourceManagerE>
 800b8e0:	4603      	mov	r3, r0
                                VariantAttorney::getResourceManager(upstream_));
 800b8e2:	bf00      	nop
  }
 800b8e4:	4618      	mov	r0, r3
 800b8e6:	3714      	adds	r7, #20
 800b8e8:	46bd      	mov	sp, r7
 800b8ea:	bd90      	pop	{r4, r7, pc}

0800b8ec <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataIKNS0_9JsonArrayEEEDTcldtfp_7getDataEERT_>:
  static auto getData(TClient& client) -> decltype(client.getData()) {
 800b8ec:	b580      	push	{r7, lr}
 800b8ee:	b082      	sub	sp, #8
 800b8f0:	af00      	add	r7, sp, #0
 800b8f2:	6078      	str	r0, [r7, #4]
    return client.getData();
 800b8f4:	6878      	ldr	r0, [r7, #4]
 800b8f6:	f7fd faf3 	bl	8008ee0 <_ZNK11ArduinoJson8V730HB229JsonArray7getDataEv>
 800b8fa:	4603      	mov	r3, r0
  }
 800b8fc:	4618      	mov	r0, r3
 800b8fe:	3708      	adds	r7, #8
 800b900:	46bd      	mov	sp, r7
 800b902:	bd80      	pop	{r7, pc}

0800b904 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerIKNS0_9JsonArrayEEEDTcldtfp_18getResourceManagerEERT_>:
  static auto getResourceManager(TClient& client)
 800b904:	b580      	push	{r7, lr}
 800b906:	b082      	sub	sp, #8
 800b908:	af00      	add	r7, sp, #0
 800b90a:	6078      	str	r0, [r7, #4]
    return client.getResourceManager();
 800b90c:	6878      	ldr	r0, [r7, #4]
 800b90e:	f7fd fadb 	bl	8008ec8 <_ZNK11ArduinoJson8V730HB229JsonArray18getResourceManagerEv>
 800b912:	4603      	mov	r3, r0
  }
 800b914:	4618      	mov	r0, r3
 800b916:	3708      	adds	r7, #8
 800b918:	46bd      	mov	sp, r7
 800b91a:	bd80      	pop	{r7, pc}

0800b91c <_ZN11ArduinoJson8V730HB226detail10ObjectData14getOrAddMemberINS1_9RamStringEEEPNS1_11VariantDataET_PNS1_15ResourceManagerE>:
  it.next(resources);
  return it.data();
}

template <typename TAdaptedString>
VariantData* ObjectData::getOrAddMember(TAdaptedString key,
 800b91c:	b580      	push	{r7, lr}
 800b91e:	b088      	sub	sp, #32
 800b920:	af02      	add	r7, sp, #8
 800b922:	60f8      	str	r0, [r7, #12]
 800b924:	4638      	mov	r0, r7
 800b926:	e880 000e 	stmia.w	r0, {r1, r2, r3}
                                        ResourceManager* resources) {
  auto data = getMember(key, resources);
 800b92a:	6a3b      	ldr	r3, [r7, #32]
 800b92c:	9300      	str	r3, [sp, #0]
 800b92e:	463b      	mov	r3, r7
 800b930:	cb0e      	ldmia	r3, {r1, r2, r3}
 800b932:	68f8      	ldr	r0, [r7, #12]
 800b934:	f7f9 ff23 	bl	800577e <_ZNK11ArduinoJson8V730HB226detail10ObjectData9getMemberINS1_9RamStringEEEPNS1_11VariantDataET_PKNS1_15ResourceManagerE>
 800b938:	6178      	str	r0, [r7, #20]
  if (data)
 800b93a:	697b      	ldr	r3, [r7, #20]
 800b93c:	2b00      	cmp	r3, #0
 800b93e:	d001      	beq.n	800b944 <_ZN11ArduinoJson8V730HB226detail10ObjectData14getOrAddMemberINS1_9RamStringEEEPNS1_11VariantDataET_PNS1_15ResourceManagerE+0x28>
    return data;
 800b940:	697b      	ldr	r3, [r7, #20]
 800b942:	e008      	b.n	800b956 <_ZN11ArduinoJson8V730HB226detail10ObjectData14getOrAddMemberINS1_9RamStringEEEPNS1_11VariantDataET_PNS1_15ResourceManagerE+0x3a>
  return addMember(key, resources);
 800b944:	6a3b      	ldr	r3, [r7, #32]
 800b946:	9300      	str	r3, [sp, #0]
 800b948:	463b      	mov	r3, r7
 800b94a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800b94c:	68f8      	ldr	r0, [r7, #12]
 800b94e:	f000 f812 	bl	800b976 <_ZN11ArduinoJson8V730HB226detail10ObjectData9addMemberINS1_9RamStringEEEPNS1_11VariantDataET_PNS1_15ResourceManagerE>
 800b952:	4603      	mov	r3, r0
 800b954:	bf00      	nop
}
 800b956:	4618      	mov	r0, r3
 800b958:	3718      	adds	r7, #24
 800b95a:	46bd      	mov	sp, r7
 800b95c:	bd80      	pop	{r7, pc}

0800b95e <_ZN11ArduinoJson8V730HB226detail15VariantAttorney15getOrCreateDataIKNS1_12ElementProxyINS0_9JsonArrayEEEEEPNS1_11VariantDataERT_>:
  static VariantData* getOrCreateData(TClient& client) {
 800b95e:	b580      	push	{r7, lr}
 800b960:	b082      	sub	sp, #8
 800b962:	af00      	add	r7, sp, #0
 800b964:	6078      	str	r0, [r7, #4]
    return client.getOrCreateData();
 800b966:	6878      	ldr	r0, [r7, #4]
 800b968:	f000 f85b 	bl	800ba22 <_ZNK11ArduinoJson8V730HB226detail12ElementProxyINS0_9JsonArrayEE15getOrCreateDataEv>
 800b96c:	4603      	mov	r3, r0
  }
 800b96e:	4618      	mov	r0, r3
 800b970:	3708      	adds	r7, #8
 800b972:	46bd      	mov	sp, r7
 800b974:	bd80      	pop	{r7, pc}

0800b976 <_ZN11ArduinoJson8V730HB226detail10ObjectData9addMemberINS1_9RamStringEEEPNS1_11VariantDataET_PNS1_15ResourceManagerE>:
                                     ResourceManager* resources) {
  remove(findKey(key, resources), resources);
}

template <typename TAdaptedString>
inline VariantData* ObjectData::addMember(TAdaptedString key,
 800b976:	b580      	push	{r7, lr}
 800b978:	b08a      	sub	sp, #40	@ 0x28
 800b97a:	af02      	add	r7, sp, #8
 800b97c:	60f8      	str	r0, [r7, #12]
 800b97e:	4638      	mov	r0, r7
 800b980:	e880 000e 	stmia.w	r0, {r1, r2, r3}
                                          ResourceManager* resources) {
  auto keySlot = resources->allocVariant();
 800b984:	f107 0318 	add.w	r3, r7, #24
 800b988:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b98a:	4618      	mov	r0, r3
 800b98c:	f7f7 fd5c 	bl	8003448 <_ZN11ArduinoJson8V730HB226detail15ResourceManager12allocVariantEv>
  if (!keySlot)
 800b990:	f107 0318 	add.w	r3, r7, #24
 800b994:	4618      	mov	r0, r3
 800b996:	f7f8 fffb 	bl	8004990 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEEcvbEv>
 800b99a:	4603      	mov	r3, r0
 800b99c:	f083 0301 	eor.w	r3, r3, #1
 800b9a0:	b2db      	uxtb	r3, r3
 800b9a2:	2b00      	cmp	r3, #0
 800b9a4:	d001      	beq.n	800b9aa <_ZN11ArduinoJson8V730HB226detail10ObjectData9addMemberINS1_9RamStringEEEPNS1_11VariantDataET_PNS1_15ResourceManagerE+0x34>
    return nullptr;
 800b9a6:	2300      	movs	r3, #0
 800b9a8:	e037      	b.n	800ba1a <_ZN11ArduinoJson8V730HB226detail10ObjectData9addMemberINS1_9RamStringEEEPNS1_11VariantDataET_PNS1_15ResourceManagerE+0xa4>

  auto valueSlot = resources->allocVariant();
 800b9aa:	f107 0310 	add.w	r3, r7, #16
 800b9ae:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b9b0:	4618      	mov	r0, r3
 800b9b2:	f7f7 fd49 	bl	8003448 <_ZN11ArduinoJson8V730HB226detail15ResourceManager12allocVariantEv>
  if (!valueSlot)
 800b9b6:	f107 0310 	add.w	r3, r7, #16
 800b9ba:	4618      	mov	r0, r3
 800b9bc:	f7f8 ffe8 	bl	8004990 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEEcvbEv>
 800b9c0:	4603      	mov	r3, r0
 800b9c2:	f083 0301 	eor.w	r3, r3, #1
 800b9c6:	b2db      	uxtb	r3, r3
 800b9c8:	2b00      	cmp	r3, #0
 800b9ca:	d001      	beq.n	800b9d0 <_ZN11ArduinoJson8V730HB226detail10ObjectData9addMemberINS1_9RamStringEEEPNS1_11VariantDataET_PNS1_15ResourceManagerE+0x5a>
    return nullptr;
 800b9cc:	2300      	movs	r3, #0
 800b9ce:	e024      	b.n	800ba1a <_ZN11ArduinoJson8V730HB226detail10ObjectData9addMemberINS1_9RamStringEEEPNS1_11VariantDataET_PNS1_15ResourceManagerE+0xa4>

  if (!keySlot->setString(key, resources))
 800b9d0:	f107 0318 	add.w	r3, r7, #24
 800b9d4:	4618      	mov	r0, r3
 800b9d6:	f7f9 f804 	bl	80049e2 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEEptEv>
 800b9da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b9dc:	9300      	str	r3, [sp, #0]
 800b9de:	463b      	mov	r3, r7
 800b9e0:	cb0e      	ldmia	r3, {r1, r2, r3}
 800b9e2:	f7fe faec 	bl	8009fbe <_ZN11ArduinoJson8V730HB226detail11VariantData9setStringINS1_9RamStringEEEbT_PNS1_15ResourceManagerE>
 800b9e6:	4603      	mov	r3, r0
 800b9e8:	f083 0301 	eor.w	r3, r3, #1
 800b9ec:	b2db      	uxtb	r3, r3
 800b9ee:	2b00      	cmp	r3, #0
 800b9f0:	d001      	beq.n	800b9f6 <_ZN11ArduinoJson8V730HB226detail10ObjectData9addMemberINS1_9RamStringEEEPNS1_11VariantDataET_PNS1_15ResourceManagerE+0x80>
    return nullptr;
 800b9f2:	2300      	movs	r3, #0
 800b9f4:	e011      	b.n	800ba1a <_ZN11ArduinoJson8V730HB226detail10ObjectData9addMemberINS1_9RamStringEEEPNS1_11VariantDataET_PNS1_15ResourceManagerE+0xa4>

  CollectionData::appendPair(keySlot, valueSlot, resources);
 800b9f6:	68f8      	ldr	r0, [r7, #12]
 800b9f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b9fa:	9301      	str	r3, [sp, #4]
 800b9fc:	697b      	ldr	r3, [r7, #20]
 800b9fe:	9300      	str	r3, [sp, #0]
 800ba00:	693b      	ldr	r3, [r7, #16]
 800ba02:	f107 0218 	add.w	r2, r7, #24
 800ba06:	ca06      	ldmia	r2, {r1, r2}
 800ba08:	f7f7 fc97 	bl	800333a <_ZN11ArduinoJson8V730HB226detail14CollectionData10appendPairENS1_4SlotINS1_11VariantDataEEES5_PKNS1_15ResourceManagerE>

  return valueSlot.ptr();
 800ba0c:	f107 0310 	add.w	r3, r7, #16
 800ba10:	4618      	mov	r0, r3
 800ba12:	f7f8 ffce 	bl	80049b2 <_ZNK11ArduinoJson8V730HB226detail4SlotINS1_11VariantDataEE3ptrEv>
 800ba16:	4603      	mov	r3, r0
 800ba18:	bf00      	nop
}
 800ba1a:	4618      	mov	r0, r3
 800ba1c:	3720      	adds	r7, #32
 800ba1e:	46bd      	mov	sp, r7
 800ba20:	bd80      	pop	{r7, pc}

0800ba22 <_ZNK11ArduinoJson8V730HB226detail12ElementProxyINS0_9JsonArrayEE15getOrCreateDataEv>:
  }

  VariantData* getOrCreateData() const {
 800ba22:	b5b0      	push	{r4, r5, r7, lr}
 800ba24:	b084      	sub	sp, #16
 800ba26:	af00      	add	r7, sp, #0
 800ba28:	6078      	str	r0, [r7, #4]
    auto data = VariantAttorney::getOrCreateData(upstream_);
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	3304      	adds	r3, #4
 800ba2e:	4618      	mov	r0, r3
 800ba30:	f000 f81a 	bl	800ba68 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney15getOrCreateDataIKNS0_9JsonArrayEEEPNS1_11VariantDataERT_>
 800ba34:	60f8      	str	r0, [r7, #12]
    if (!data)
 800ba36:	68fb      	ldr	r3, [r7, #12]
 800ba38:	2b00      	cmp	r3, #0
 800ba3a:	d101      	bne.n	800ba40 <_ZNK11ArduinoJson8V730HB226detail12ElementProxyINS0_9JsonArrayEE15getOrCreateDataEv+0x1e>
      return nullptr;
 800ba3c:	2300      	movs	r3, #0
 800ba3e:	e00f      	b.n	800ba60 <_ZNK11ArduinoJson8V730HB226detail12ElementProxyINS0_9JsonArrayEE15getOrCreateDataEv+0x3e>
    return data->getOrAddElement(
 800ba40:	68fc      	ldr	r4, [r7, #12]
        index_, VariantAttorney::getResourceManager(upstream_));
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	68dd      	ldr	r5, [r3, #12]
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	3304      	adds	r3, #4
    return data->getOrAddElement(
 800ba4a:	4618      	mov	r0, r3
 800ba4c:	f7ff ff5a 	bl	800b904 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerIKNS0_9JsonArrayEEEDTcldtfp_18getResourceManagerEERT_>
 800ba50:	4603      	mov	r3, r0
 800ba52:	461a      	mov	r2, r3
 800ba54:	4629      	mov	r1, r5
 800ba56:	4620      	mov	r0, r4
 800ba58:	f7fd f99c 	bl	8008d94 <_ZN11ArduinoJson8V730HB226detail11VariantData15getOrAddElementEjPNS1_15ResourceManagerE>
 800ba5c:	4603      	mov	r3, r0
        index_, VariantAttorney::getResourceManager(upstream_));
 800ba5e:	bf00      	nop
  }
 800ba60:	4618      	mov	r0, r3
 800ba62:	3710      	adds	r7, #16
 800ba64:	46bd      	mov	sp, r7
 800ba66:	bdb0      	pop	{r4, r5, r7, pc}

0800ba68 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney15getOrCreateDataIKNS0_9JsonArrayEEEPNS1_11VariantDataERT_>:
  static VariantData* getOrCreateData(TClient& client) {
 800ba68:	b580      	push	{r7, lr}
 800ba6a:	b082      	sub	sp, #8
 800ba6c:	af00      	add	r7, sp, #0
 800ba6e:	6078      	str	r0, [r7, #4]
    return client.getOrCreateData();
 800ba70:	6878      	ldr	r0, [r7, #4]
 800ba72:	f7fd fa43 	bl	8008efc <_ZNK11ArduinoJson8V730HB229JsonArray15getOrCreateDataEv>
 800ba76:	4603      	mov	r3, r0
  }
 800ba78:	4618      	mov	r0, r3
 800ba7a:	3708      	adds	r7, #8
 800ba7c:	46bd      	mov	sp, r7
 800ba7e:	bd80      	pop	{r7, pc}

0800ba80 <_Z41__static_initialization_and_destruction_0ii>:
 800ba80:	b580      	push	{r7, lr}
 800ba82:	b082      	sub	sp, #8
 800ba84:	af00      	add	r7, sp, #0
 800ba86:	6078      	str	r0, [r7, #4]
 800ba88:	6039      	str	r1, [r7, #0]
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	2b01      	cmp	r3, #1
 800ba8e:	d10a      	bne.n	800baa6 <_Z41__static_initialization_and_destruction_0ii+0x26>
 800ba90:	683b      	ldr	r3, [r7, #0]
 800ba92:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800ba96:	4293      	cmp	r3, r2
 800ba98:	d105      	bne.n	800baa6 <_Z41__static_initialization_and_destruction_0ii+0x26>
__attribute__((section(".DmaSection"))) volatile txData_t txData;
 800ba9a:	4805      	ldr	r0, [pc, #20]	@ (800bab0 <_Z41__static_initialization_and_destruction_0ii+0x30>)
 800ba9c:	f7fd f8f1 	bl	8008c82 <_ZN8txData_tC1Ev>
__attribute__((section(".DmaSection"))) volatile rxData_t rxData;
 800baa0:	4804      	ldr	r0, [pc, #16]	@ (800bab4 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 800baa2:	f7f5 f8c7 	bl	8000c34 <_ZN8rxData_tC1Ev>
}
 800baa6:	bf00      	nop
 800baa8:	3708      	adds	r7, #8
 800baaa:	46bd      	mov	sp, r7
 800baac:	bd80      	pop	{r7, pc}
 800baae:	bf00      	nop
 800bab0:	30000080 	.word	0x30000080
 800bab4:	300000c0 	.word	0x300000c0

0800bab8 <_GLOBAL__sub_I_txData>:
 800bab8:	b580      	push	{r7, lr}
 800baba:	af00      	add	r7, sp, #0
 800babc:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800bac0:	2001      	movs	r0, #1
 800bac2:	f7ff ffdd 	bl	800ba80 <_Z41__static_initialization_and_destruction_0ii>
 800bac6:	bd80      	pop	{r7, pc}

0800bac8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800bac8:	b480      	push	{r7}
 800baca:	b083      	sub	sp, #12
 800bacc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800bace:	4b0a      	ldr	r3, [pc, #40]	@ (800baf8 <HAL_MspInit+0x30>)
 800bad0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800bad4:	4a08      	ldr	r2, [pc, #32]	@ (800baf8 <HAL_MspInit+0x30>)
 800bad6:	f043 0302 	orr.w	r3, r3, #2
 800bada:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800bade:	4b06      	ldr	r3, [pc, #24]	@ (800baf8 <HAL_MspInit+0x30>)
 800bae0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800bae4:	f003 0302 	and.w	r3, r3, #2
 800bae8:	607b      	str	r3, [r7, #4]
 800baea:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800baec:	bf00      	nop
 800baee:	370c      	adds	r7, #12
 800baf0:	46bd      	mov	sp, r7
 800baf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baf6:	4770      	bx	lr
 800baf8:	58024400 	.word	0x58024400

0800bafc <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 800bafc:	b580      	push	{r7, lr}
 800bafe:	b0bc      	sub	sp, #240	@ 0xf0
 800bb00:	af00      	add	r7, sp, #0
 800bb02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800bb04:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800bb08:	2200      	movs	r2, #0
 800bb0a:	601a      	str	r2, [r3, #0]
 800bb0c:	605a      	str	r2, [r3, #4]
 800bb0e:	609a      	str	r2, [r3, #8]
 800bb10:	60da      	str	r2, [r3, #12]
 800bb12:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800bb14:	f107 0318 	add.w	r3, r7, #24
 800bb18:	22c0      	movs	r2, #192	@ 0xc0
 800bb1a:	2100      	movs	r1, #0
 800bb1c:	4618      	mov	r0, r3
 800bb1e:	f013 f82b 	bl	801eb78 <memset>
  if(hsd->Instance==SDMMC1)
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	681b      	ldr	r3, [r3, #0]
 800bb26:	4a3c      	ldr	r2, [pc, #240]	@ (800bc18 <HAL_SD_MspInit+0x11c>)
 800bb28:	4293      	cmp	r3, r2
 800bb2a:	d171      	bne.n	800bc10 <HAL_SD_MspInit+0x114>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 800bb2c:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800bb30:	f04f 0300 	mov.w	r3, #0
 800bb34:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 800bb38:	2300      	movs	r3, #0
 800bb3a:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800bb3c:	f107 0318 	add.w	r3, r7, #24
 800bb40:	4618      	mov	r0, r3
 800bb42:	f009 fd1d 	bl	8015580 <HAL_RCCEx_PeriphCLKConfig>
 800bb46:	4603      	mov	r3, r0
 800bb48:	2b00      	cmp	r3, #0
 800bb4a:	d001      	beq.n	800bb50 <HAL_SD_MspInit+0x54>
    {
      Error_Handler();
 800bb4c:	f7fc ff8c 	bl	8008a68 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 800bb50:	4b32      	ldr	r3, [pc, #200]	@ (800bc1c <HAL_SD_MspInit+0x120>)
 800bb52:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800bb56:	4a31      	ldr	r2, [pc, #196]	@ (800bc1c <HAL_SD_MspInit+0x120>)
 800bb58:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800bb5c:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 800bb60:	4b2e      	ldr	r3, [pc, #184]	@ (800bc1c <HAL_SD_MspInit+0x120>)
 800bb62:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800bb66:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800bb6a:	617b      	str	r3, [r7, #20]
 800bb6c:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800bb6e:	4b2b      	ldr	r3, [pc, #172]	@ (800bc1c <HAL_SD_MspInit+0x120>)
 800bb70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800bb74:	4a29      	ldr	r2, [pc, #164]	@ (800bc1c <HAL_SD_MspInit+0x120>)
 800bb76:	f043 0304 	orr.w	r3, r3, #4
 800bb7a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800bb7e:	4b27      	ldr	r3, [pc, #156]	@ (800bc1c <HAL_SD_MspInit+0x120>)
 800bb80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800bb84:	f003 0304 	and.w	r3, r3, #4
 800bb88:	613b      	str	r3, [r7, #16]
 800bb8a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800bb8c:	4b23      	ldr	r3, [pc, #140]	@ (800bc1c <HAL_SD_MspInit+0x120>)
 800bb8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800bb92:	4a22      	ldr	r2, [pc, #136]	@ (800bc1c <HAL_SD_MspInit+0x120>)
 800bb94:	f043 0308 	orr.w	r3, r3, #8
 800bb98:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800bb9c:	4b1f      	ldr	r3, [pc, #124]	@ (800bc1c <HAL_SD_MspInit+0x120>)
 800bb9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800bba2:	f003 0308 	and.w	r3, r3, #8
 800bba6:	60fb      	str	r3, [r7, #12]
 800bba8:	68fb      	ldr	r3, [r7, #12]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 800bbaa:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 800bbae:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bbb2:	2302      	movs	r3, #2
 800bbb4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bbb8:	2300      	movs	r3, #0
 800bbba:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800bbbe:	2303      	movs	r3, #3
 800bbc0:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 800bbc4:	230c      	movs	r3, #12
 800bbc6:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800bbca:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800bbce:	4619      	mov	r1, r3
 800bbd0:	4813      	ldr	r0, [pc, #76]	@ (800bc20 <HAL_SD_MspInit+0x124>)
 800bbd2:	f008 faeb 	bl	80141ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800bbd6:	2304      	movs	r3, #4
 800bbd8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bbdc:	2302      	movs	r3, #2
 800bbde:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bbe2:	2300      	movs	r3, #0
 800bbe4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800bbe8:	2303      	movs	r3, #3
 800bbea:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 800bbee:	230c      	movs	r3, #12
 800bbf0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800bbf4:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800bbf8:	4619      	mov	r1, r3
 800bbfa:	480a      	ldr	r0, [pc, #40]	@ (800bc24 <HAL_SD_MspInit+0x128>)
 800bbfc:	f008 fad6 	bl	80141ac <HAL_GPIO_Init>

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 0, 0);
 800bc00:	2200      	movs	r2, #0
 800bc02:	2100      	movs	r1, #0
 800bc04:	2031      	movs	r0, #49	@ 0x31
 800bc06:	f005 fee0 	bl	80119ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 800bc0a:	2031      	movs	r0, #49	@ 0x31
 800bc0c:	f005 fef7 	bl	80119fe <HAL_NVIC_EnableIRQ>

  /* USER CODE END SDMMC1_MspInit 1 */

  }

}
 800bc10:	bf00      	nop
 800bc12:	37f0      	adds	r7, #240	@ 0xf0
 800bc14:	46bd      	mov	sp, r7
 800bc16:	bd80      	pop	{r7, pc}
 800bc18:	52007000 	.word	0x52007000
 800bc1c:	58024400 	.word	0x58024400
 800bc20:	58020800 	.word	0x58020800
 800bc24:	58020c00 	.word	0x58020c00

0800bc28 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800bc28:	b580      	push	{r7, lr}
 800bc2a:	b0ba      	sub	sp, #232	@ 0xe8
 800bc2c:	af00      	add	r7, sp, #0
 800bc2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800bc30:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800bc34:	2200      	movs	r2, #0
 800bc36:	601a      	str	r2, [r3, #0]
 800bc38:	605a      	str	r2, [r3, #4]
 800bc3a:	609a      	str	r2, [r3, #8]
 800bc3c:	60da      	str	r2, [r3, #12]
 800bc3e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800bc40:	f107 0310 	add.w	r3, r7, #16
 800bc44:	22c0      	movs	r2, #192	@ 0xc0
 800bc46:	2100      	movs	r1, #0
 800bc48:	4618      	mov	r0, r3
 800bc4a:	f012 ff95 	bl	801eb78 <memset>
  if(huart->Instance==USART1)
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	681b      	ldr	r3, [r3, #0]
 800bc52:	4a27      	ldr	r2, [pc, #156]	@ (800bcf0 <HAL_UART_MspInit+0xc8>)
 800bc54:	4293      	cmp	r3, r2
 800bc56:	d146      	bne.n	800bce6 <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800bc58:	f04f 0201 	mov.w	r2, #1
 800bc5c:	f04f 0300 	mov.w	r3, #0
 800bc60:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 800bc64:	2300      	movs	r3, #0
 800bc66:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800bc6a:	f107 0310 	add.w	r3, r7, #16
 800bc6e:	4618      	mov	r0, r3
 800bc70:	f009 fc86 	bl	8015580 <HAL_RCCEx_PeriphCLKConfig>
 800bc74:	4603      	mov	r3, r0
 800bc76:	2b00      	cmp	r3, #0
 800bc78:	d001      	beq.n	800bc7e <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 800bc7a:	f7fc fef5 	bl	8008a68 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800bc7e:	4b1d      	ldr	r3, [pc, #116]	@ (800bcf4 <HAL_UART_MspInit+0xcc>)
 800bc80:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800bc84:	4a1b      	ldr	r2, [pc, #108]	@ (800bcf4 <HAL_UART_MspInit+0xcc>)
 800bc86:	f043 0310 	orr.w	r3, r3, #16
 800bc8a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800bc8e:	4b19      	ldr	r3, [pc, #100]	@ (800bcf4 <HAL_UART_MspInit+0xcc>)
 800bc90:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800bc94:	f003 0310 	and.w	r3, r3, #16
 800bc98:	60fb      	str	r3, [r7, #12]
 800bc9a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800bc9c:	4b15      	ldr	r3, [pc, #84]	@ (800bcf4 <HAL_UART_MspInit+0xcc>)
 800bc9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800bca2:	4a14      	ldr	r2, [pc, #80]	@ (800bcf4 <HAL_UART_MspInit+0xcc>)
 800bca4:	f043 0301 	orr.w	r3, r3, #1
 800bca8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800bcac:	4b11      	ldr	r3, [pc, #68]	@ (800bcf4 <HAL_UART_MspInit+0xcc>)
 800bcae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800bcb2:	f003 0301 	and.w	r3, r3, #1
 800bcb6:	60bb      	str	r3, [r7, #8]
 800bcb8:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800bcba:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800bcbe:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bcc2:	2302      	movs	r3, #2
 800bcc4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bcc8:	2300      	movs	r3, #0
 800bcca:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800bcce:	2300      	movs	r3, #0
 800bcd0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800bcd4:	2307      	movs	r3, #7
 800bcd6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800bcda:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800bcde:	4619      	mov	r1, r3
 800bce0:	4805      	ldr	r0, [pc, #20]	@ (800bcf8 <HAL_UART_MspInit+0xd0>)
 800bce2:	f008 fa63 	bl	80141ac <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 800bce6:	bf00      	nop
 800bce8:	37e8      	adds	r7, #232	@ 0xe8
 800bcea:	46bd      	mov	sp, r7
 800bcec:	bd80      	pop	{r7, pc}
 800bcee:	bf00      	nop
 800bcf0:	40011000 	.word	0x40011000
 800bcf4:	58024400 	.word	0x58024400
 800bcf8:	58020000 	.word	0x58020000

0800bcfc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800bcfc:	b480      	push	{r7}
 800bcfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800bd00:	bf00      	nop
 800bd02:	e7fd      	b.n	800bd00 <NMI_Handler+0x4>

0800bd04 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800bd04:	b480      	push	{r7}
 800bd06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800bd08:	bf00      	nop
 800bd0a:	e7fd      	b.n	800bd08 <HardFault_Handler+0x4>

0800bd0c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800bd0c:	b480      	push	{r7}
 800bd0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800bd10:	bf00      	nop
 800bd12:	e7fd      	b.n	800bd10 <MemManage_Handler+0x4>

0800bd14 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800bd14:	b480      	push	{r7}
 800bd16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800bd18:	bf00      	nop
 800bd1a:	e7fd      	b.n	800bd18 <BusFault_Handler+0x4>

0800bd1c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800bd1c:	b480      	push	{r7}
 800bd1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800bd20:	bf00      	nop
 800bd22:	e7fd      	b.n	800bd20 <UsageFault_Handler+0x4>

0800bd24 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800bd24:	b480      	push	{r7}
 800bd26:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800bd28:	bf00      	nop
 800bd2a:	46bd      	mov	sp, r7
 800bd2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd30:	4770      	bx	lr

0800bd32 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800bd32:	b480      	push	{r7}
 800bd34:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800bd36:	bf00      	nop
 800bd38:	46bd      	mov	sp, r7
 800bd3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd3e:	4770      	bx	lr

0800bd40 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800bd40:	b480      	push	{r7}
 800bd42:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800bd44:	bf00      	nop
 800bd46:	46bd      	mov	sp, r7
 800bd48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd4c:	4770      	bx	lr

0800bd4e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800bd4e:	b580      	push	{r7, lr}
 800bd50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800bd52:	f005 fcf9 	bl	8011748 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800bd56:	bf00      	nop
 800bd58:	bd80      	pop	{r7, pc}
	...

0800bd5c <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 800bd5c:	b580      	push	{r7, lr}
 800bd5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 800bd60:	4802      	ldr	r0, [pc, #8]	@ (800bd6c <SDMMC1_IRQHandler+0x10>)
 800bd62:	f00c fb7b 	bl	801845c <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 800bd66:	bf00      	nop
 800bd68:	bd80      	pop	{r7, pc}
 800bd6a:	bf00      	nop
 800bd6c:	240003cc 	.word	0x240003cc

0800bd70 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800bd70:	b480      	push	{r7}
 800bd72:	af00      	add	r7, sp, #0
	return 1;
 800bd74:	2301      	movs	r3, #1
}
 800bd76:	4618      	mov	r0, r3
 800bd78:	46bd      	mov	sp, r7
 800bd7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd7e:	4770      	bx	lr

0800bd80 <_kill>:

int _kill(int pid, int sig)
{
 800bd80:	b580      	push	{r7, lr}
 800bd82:	b082      	sub	sp, #8
 800bd84:	af00      	add	r7, sp, #0
 800bd86:	6078      	str	r0, [r7, #4]
 800bd88:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800bd8a:	f012 ff97 	bl	801ecbc <__errno>
 800bd8e:	4603      	mov	r3, r0
 800bd90:	2216      	movs	r2, #22
 800bd92:	601a      	str	r2, [r3, #0]
	return -1;
 800bd94:	f04f 33ff 	mov.w	r3, #4294967295
}
 800bd98:	4618      	mov	r0, r3
 800bd9a:	3708      	adds	r7, #8
 800bd9c:	46bd      	mov	sp, r7
 800bd9e:	bd80      	pop	{r7, pc}

0800bda0 <_exit>:

void _exit (int status)
{
 800bda0:	b580      	push	{r7, lr}
 800bda2:	b082      	sub	sp, #8
 800bda4:	af00      	add	r7, sp, #0
 800bda6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800bda8:	f04f 31ff 	mov.w	r1, #4294967295
 800bdac:	6878      	ldr	r0, [r7, #4]
 800bdae:	f7ff ffe7 	bl	800bd80 <_kill>
	while (1) {}		/* Make sure we hang here */
 800bdb2:	bf00      	nop
 800bdb4:	e7fd      	b.n	800bdb2 <_exit+0x12>

0800bdb6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800bdb6:	b580      	push	{r7, lr}
 800bdb8:	b086      	sub	sp, #24
 800bdba:	af00      	add	r7, sp, #0
 800bdbc:	60f8      	str	r0, [r7, #12]
 800bdbe:	60b9      	str	r1, [r7, #8]
 800bdc0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800bdc2:	2300      	movs	r3, #0
 800bdc4:	617b      	str	r3, [r7, #20]
 800bdc6:	e00a      	b.n	800bdde <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800bdc8:	f3af 8000 	nop.w
 800bdcc:	4601      	mov	r1, r0
 800bdce:	68bb      	ldr	r3, [r7, #8]
 800bdd0:	1c5a      	adds	r2, r3, #1
 800bdd2:	60ba      	str	r2, [r7, #8]
 800bdd4:	b2ca      	uxtb	r2, r1
 800bdd6:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800bdd8:	697b      	ldr	r3, [r7, #20]
 800bdda:	3301      	adds	r3, #1
 800bddc:	617b      	str	r3, [r7, #20]
 800bdde:	697a      	ldr	r2, [r7, #20]
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	429a      	cmp	r2, r3
 800bde4:	dbf0      	blt.n	800bdc8 <_read+0x12>
	}

return len;
 800bde6:	687b      	ldr	r3, [r7, #4]
}
 800bde8:	4618      	mov	r0, r3
 800bdea:	3718      	adds	r7, #24
 800bdec:	46bd      	mov	sp, r7
 800bdee:	bd80      	pop	{r7, pc}

0800bdf0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800bdf0:	b580      	push	{r7, lr}
 800bdf2:	b086      	sub	sp, #24
 800bdf4:	af00      	add	r7, sp, #0
 800bdf6:	60f8      	str	r0, [r7, #12]
 800bdf8:	60b9      	str	r1, [r7, #8]
 800bdfa:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800bdfc:	2300      	movs	r3, #0
 800bdfe:	617b      	str	r3, [r7, #20]
 800be00:	e009      	b.n	800be16 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800be02:	68bb      	ldr	r3, [r7, #8]
 800be04:	1c5a      	adds	r2, r3, #1
 800be06:	60ba      	str	r2, [r7, #8]
 800be08:	781b      	ldrb	r3, [r3, #0]
 800be0a:	4618      	mov	r0, r3
 800be0c:	f7fb fe2a 	bl	8007a64 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800be10:	697b      	ldr	r3, [r7, #20]
 800be12:	3301      	adds	r3, #1
 800be14:	617b      	str	r3, [r7, #20]
 800be16:	697a      	ldr	r2, [r7, #20]
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	429a      	cmp	r2, r3
 800be1c:	dbf1      	blt.n	800be02 <_write+0x12>
	}
	return len;
 800be1e:	687b      	ldr	r3, [r7, #4]
}
 800be20:	4618      	mov	r0, r3
 800be22:	3718      	adds	r7, #24
 800be24:	46bd      	mov	sp, r7
 800be26:	bd80      	pop	{r7, pc}

0800be28 <_close>:

int _close(int file)
{
 800be28:	b480      	push	{r7}
 800be2a:	b083      	sub	sp, #12
 800be2c:	af00      	add	r7, sp, #0
 800be2e:	6078      	str	r0, [r7, #4]
	return -1;
 800be30:	f04f 33ff 	mov.w	r3, #4294967295
}
 800be34:	4618      	mov	r0, r3
 800be36:	370c      	adds	r7, #12
 800be38:	46bd      	mov	sp, r7
 800be3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be3e:	4770      	bx	lr

0800be40 <_fstat>:


int _fstat(int file, struct stat *st)
{
 800be40:	b480      	push	{r7}
 800be42:	b083      	sub	sp, #12
 800be44:	af00      	add	r7, sp, #0
 800be46:	6078      	str	r0, [r7, #4]
 800be48:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800be4a:	683b      	ldr	r3, [r7, #0]
 800be4c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800be50:	605a      	str	r2, [r3, #4]
	return 0;
 800be52:	2300      	movs	r3, #0
}
 800be54:	4618      	mov	r0, r3
 800be56:	370c      	adds	r7, #12
 800be58:	46bd      	mov	sp, r7
 800be5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be5e:	4770      	bx	lr

0800be60 <_isatty>:

int _isatty(int file)
{
 800be60:	b480      	push	{r7}
 800be62:	b083      	sub	sp, #12
 800be64:	af00      	add	r7, sp, #0
 800be66:	6078      	str	r0, [r7, #4]
	return 1;
 800be68:	2301      	movs	r3, #1
}
 800be6a:	4618      	mov	r0, r3
 800be6c:	370c      	adds	r7, #12
 800be6e:	46bd      	mov	sp, r7
 800be70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be74:	4770      	bx	lr

0800be76 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800be76:	b480      	push	{r7}
 800be78:	b085      	sub	sp, #20
 800be7a:	af00      	add	r7, sp, #0
 800be7c:	60f8      	str	r0, [r7, #12]
 800be7e:	60b9      	str	r1, [r7, #8]
 800be80:	607a      	str	r2, [r7, #4]
	return 0;
 800be82:	2300      	movs	r3, #0
}
 800be84:	4618      	mov	r0, r3
 800be86:	3714      	adds	r7, #20
 800be88:	46bd      	mov	sp, r7
 800be8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be8e:	4770      	bx	lr

0800be90 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800be90:	b580      	push	{r7, lr}
 800be92:	b086      	sub	sp, #24
 800be94:	af00      	add	r7, sp, #0
 800be96:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800be98:	4a14      	ldr	r2, [pc, #80]	@ (800beec <_sbrk+0x5c>)
 800be9a:	4b15      	ldr	r3, [pc, #84]	@ (800bef0 <_sbrk+0x60>)
 800be9c:	1ad3      	subs	r3, r2, r3
 800be9e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800bea0:	697b      	ldr	r3, [r7, #20]
 800bea2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800bea4:	4b13      	ldr	r3, [pc, #76]	@ (800bef4 <_sbrk+0x64>)
 800bea6:	681b      	ldr	r3, [r3, #0]
 800bea8:	2b00      	cmp	r3, #0
 800beaa:	d102      	bne.n	800beb2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800beac:	4b11      	ldr	r3, [pc, #68]	@ (800bef4 <_sbrk+0x64>)
 800beae:	4a12      	ldr	r2, [pc, #72]	@ (800bef8 <_sbrk+0x68>)
 800beb0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800beb2:	4b10      	ldr	r3, [pc, #64]	@ (800bef4 <_sbrk+0x64>)
 800beb4:	681a      	ldr	r2, [r3, #0]
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	4413      	add	r3, r2
 800beba:	693a      	ldr	r2, [r7, #16]
 800bebc:	429a      	cmp	r2, r3
 800bebe:	d207      	bcs.n	800bed0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 800bec0:	f012 fefc 	bl	801ecbc <__errno>
 800bec4:	4603      	mov	r3, r0
 800bec6:	220c      	movs	r2, #12
 800bec8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800beca:	f04f 33ff 	mov.w	r3, #4294967295
 800bece:	e009      	b.n	800bee4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800bed0:	4b08      	ldr	r3, [pc, #32]	@ (800bef4 <_sbrk+0x64>)
 800bed2:	681b      	ldr	r3, [r3, #0]
 800bed4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800bed6:	4b07      	ldr	r3, [pc, #28]	@ (800bef4 <_sbrk+0x64>)
 800bed8:	681a      	ldr	r2, [r3, #0]
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	4413      	add	r3, r2
 800bede:	4a05      	ldr	r2, [pc, #20]	@ (800bef4 <_sbrk+0x64>)
 800bee0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800bee2:	68fb      	ldr	r3, [r7, #12]
}
 800bee4:	4618      	mov	r0, r3
 800bee6:	3718      	adds	r7, #24
 800bee8:	46bd      	mov	sp, r7
 800beea:	bd80      	pop	{r7, pc}
 800beec:	24080000 	.word	0x24080000
 800bef0:	00000400 	.word	0x00000400
 800bef4:	240004dc 	.word	0x240004dc
 800bef8:	24000ce0 	.word	0x24000ce0

0800befc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800befc:	b480      	push	{r7}
 800befe:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800bf00:	4b37      	ldr	r3, [pc, #220]	@ (800bfe0 <SystemInit+0xe4>)
 800bf02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bf06:	4a36      	ldr	r2, [pc, #216]	@ (800bfe0 <SystemInit+0xe4>)
 800bf08:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800bf0c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800bf10:	4b34      	ldr	r3, [pc, #208]	@ (800bfe4 <SystemInit+0xe8>)
 800bf12:	681b      	ldr	r3, [r3, #0]
 800bf14:	f003 030f 	and.w	r3, r3, #15
 800bf18:	2b06      	cmp	r3, #6
 800bf1a:	d807      	bhi.n	800bf2c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800bf1c:	4b31      	ldr	r3, [pc, #196]	@ (800bfe4 <SystemInit+0xe8>)
 800bf1e:	681b      	ldr	r3, [r3, #0]
 800bf20:	f023 030f 	bic.w	r3, r3, #15
 800bf24:	4a2f      	ldr	r2, [pc, #188]	@ (800bfe4 <SystemInit+0xe8>)
 800bf26:	f043 0307 	orr.w	r3, r3, #7
 800bf2a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800bf2c:	4b2e      	ldr	r3, [pc, #184]	@ (800bfe8 <SystemInit+0xec>)
 800bf2e:	681b      	ldr	r3, [r3, #0]
 800bf30:	4a2d      	ldr	r2, [pc, #180]	@ (800bfe8 <SystemInit+0xec>)
 800bf32:	f043 0301 	orr.w	r3, r3, #1
 800bf36:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800bf38:	4b2b      	ldr	r3, [pc, #172]	@ (800bfe8 <SystemInit+0xec>)
 800bf3a:	2200      	movs	r2, #0
 800bf3c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800bf3e:	4b2a      	ldr	r3, [pc, #168]	@ (800bfe8 <SystemInit+0xec>)
 800bf40:	681a      	ldr	r2, [r3, #0]
 800bf42:	4929      	ldr	r1, [pc, #164]	@ (800bfe8 <SystemInit+0xec>)
 800bf44:	4b29      	ldr	r3, [pc, #164]	@ (800bfec <SystemInit+0xf0>)
 800bf46:	4013      	ands	r3, r2
 800bf48:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800bf4a:	4b26      	ldr	r3, [pc, #152]	@ (800bfe4 <SystemInit+0xe8>)
 800bf4c:	681b      	ldr	r3, [r3, #0]
 800bf4e:	f003 0308 	and.w	r3, r3, #8
 800bf52:	2b00      	cmp	r3, #0
 800bf54:	d007      	beq.n	800bf66 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800bf56:	4b23      	ldr	r3, [pc, #140]	@ (800bfe4 <SystemInit+0xe8>)
 800bf58:	681b      	ldr	r3, [r3, #0]
 800bf5a:	f023 030f 	bic.w	r3, r3, #15
 800bf5e:	4a21      	ldr	r2, [pc, #132]	@ (800bfe4 <SystemInit+0xe8>)
 800bf60:	f043 0307 	orr.w	r3, r3, #7
 800bf64:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800bf66:	4b20      	ldr	r3, [pc, #128]	@ (800bfe8 <SystemInit+0xec>)
 800bf68:	2200      	movs	r2, #0
 800bf6a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800bf6c:	4b1e      	ldr	r3, [pc, #120]	@ (800bfe8 <SystemInit+0xec>)
 800bf6e:	2200      	movs	r2, #0
 800bf70:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800bf72:	4b1d      	ldr	r3, [pc, #116]	@ (800bfe8 <SystemInit+0xec>)
 800bf74:	2200      	movs	r2, #0
 800bf76:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800bf78:	4b1b      	ldr	r3, [pc, #108]	@ (800bfe8 <SystemInit+0xec>)
 800bf7a:	4a1d      	ldr	r2, [pc, #116]	@ (800bff0 <SystemInit+0xf4>)
 800bf7c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800bf7e:	4b1a      	ldr	r3, [pc, #104]	@ (800bfe8 <SystemInit+0xec>)
 800bf80:	4a1c      	ldr	r2, [pc, #112]	@ (800bff4 <SystemInit+0xf8>)
 800bf82:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800bf84:	4b18      	ldr	r3, [pc, #96]	@ (800bfe8 <SystemInit+0xec>)
 800bf86:	4a1c      	ldr	r2, [pc, #112]	@ (800bff8 <SystemInit+0xfc>)
 800bf88:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800bf8a:	4b17      	ldr	r3, [pc, #92]	@ (800bfe8 <SystemInit+0xec>)
 800bf8c:	2200      	movs	r2, #0
 800bf8e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800bf90:	4b15      	ldr	r3, [pc, #84]	@ (800bfe8 <SystemInit+0xec>)
 800bf92:	4a19      	ldr	r2, [pc, #100]	@ (800bff8 <SystemInit+0xfc>)
 800bf94:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800bf96:	4b14      	ldr	r3, [pc, #80]	@ (800bfe8 <SystemInit+0xec>)
 800bf98:	2200      	movs	r2, #0
 800bf9a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800bf9c:	4b12      	ldr	r3, [pc, #72]	@ (800bfe8 <SystemInit+0xec>)
 800bf9e:	4a16      	ldr	r2, [pc, #88]	@ (800bff8 <SystemInit+0xfc>)
 800bfa0:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800bfa2:	4b11      	ldr	r3, [pc, #68]	@ (800bfe8 <SystemInit+0xec>)
 800bfa4:	2200      	movs	r2, #0
 800bfa6:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800bfa8:	4b0f      	ldr	r3, [pc, #60]	@ (800bfe8 <SystemInit+0xec>)
 800bfaa:	681b      	ldr	r3, [r3, #0]
 800bfac:	4a0e      	ldr	r2, [pc, #56]	@ (800bfe8 <SystemInit+0xec>)
 800bfae:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800bfb2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800bfb4:	4b0c      	ldr	r3, [pc, #48]	@ (800bfe8 <SystemInit+0xec>)
 800bfb6:	2200      	movs	r2, #0
 800bfb8:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800bfba:	4b10      	ldr	r3, [pc, #64]	@ (800bffc <SystemInit+0x100>)
 800bfbc:	681a      	ldr	r2, [r3, #0]
 800bfbe:	4b10      	ldr	r3, [pc, #64]	@ (800c000 <SystemInit+0x104>)
 800bfc0:	4013      	ands	r3, r2
 800bfc2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800bfc6:	d202      	bcs.n	800bfce <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800bfc8:	4b0e      	ldr	r3, [pc, #56]	@ (800c004 <SystemInit+0x108>)
 800bfca:	2201      	movs	r2, #1
 800bfcc:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800bfce:	4b0e      	ldr	r3, [pc, #56]	@ (800c008 <SystemInit+0x10c>)
 800bfd0:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 800bfd4:	601a      	str	r2, [r3, #0]
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/

}
 800bfd6:	bf00      	nop
 800bfd8:	46bd      	mov	sp, r7
 800bfda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfde:	4770      	bx	lr
 800bfe0:	e000ed00 	.word	0xe000ed00
 800bfe4:	52002000 	.word	0x52002000
 800bfe8:	58024400 	.word	0x58024400
 800bfec:	eaf6ed7f 	.word	0xeaf6ed7f
 800bff0:	02020200 	.word	0x02020200
 800bff4:	01ff0000 	.word	0x01ff0000
 800bff8:	01010280 	.word	0x01010280
 800bffc:	5c001000 	.word	0x5c001000
 800c000:	ffff0000 	.word	0xffff0000
 800c004:	51008108 	.word	0x51008108
 800c008:	52004000 	.word	0x52004000

0800c00c <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 800c00c:	b480      	push	{r7}
 800c00e:	b083      	sub	sp, #12
 800c010:	af00      	add	r7, sp, #0
 800c012:	6078      	str	r0, [r7, #4]
 800c014:	6039      	str	r1, [r7, #0]
 800c016:	683b      	ldr	r3, [r7, #0]
 800c018:	4618      	mov	r0, r3
 800c01a:	370c      	adds	r7, #12
 800c01c:	46bd      	mov	sp, r7
 800c01e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c022:	4770      	bx	lr

0800c024 <_ZN3Pin3setEb>:
        inline bool get()
        {
            return HAL_GPIO_ReadPin(this->GPIOx, this->pin);
        }

        inline void set(bool value)
 800c024:	b580      	push	{r7, lr}
 800c026:	b082      	sub	sp, #8
 800c028:	af00      	add	r7, sp, #0
 800c02a:	6078      	str	r0, [r7, #4]
 800c02c:	460b      	mov	r3, r1
 800c02e:	70fb      	strb	r3, [r7, #3]
        {
            if (value)
 800c030:	78fb      	ldrb	r3, [r7, #3]
 800c032:	2b00      	cmp	r3, #0
 800c034:	d008      	beq.n	800c048 <_ZN3Pin3setEb+0x24>
            {
                HAL_GPIO_WritePin(this->GPIOx, this->pin, GPIO_PIN_SET);
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	8bdb      	ldrh	r3, [r3, #30]
 800c03e:	2201      	movs	r2, #1
 800c040:	4619      	mov	r1, r3
 800c042:	f008 fa63 	bl	801450c <HAL_GPIO_WritePin>
            }
            else
            {
                HAL_GPIO_WritePin(this->GPIOx, this->pin, GPIO_PIN_RESET);
            }
        }
 800c046:	e007      	b.n	800c058 <_ZN3Pin3setEb+0x34>
                HAL_GPIO_WritePin(this->GPIOx, this->pin, GPIO_PIN_RESET);
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	8bdb      	ldrh	r3, [r3, #30]
 800c050:	2200      	movs	r2, #0
 800c052:	4619      	mov	r1, r3
 800c054:	f008 fa5a 	bl	801450c <HAL_GPIO_WritePin>
        }
 800c058:	bf00      	nop
 800c05a:	3708      	adds	r7, #8
 800c05c:	46bd      	mov	sp, r7
 800c05e:	bd80      	pop	{r7, pc}

0800c060 <_Z11createBlinkRKN11ArduinoJson8V730HB2210JsonObjectE>:

/***********************************************************************
                MODULE CONFIGURATION AND CREATION FROM JSON     
************************************************************************/

shared_ptr<Module> createBlink(const JsonObject& config) {
 800c060:	b580      	push	{r7, lr}
 800c062:	b098      	sub	sp, #96	@ 0x60
 800c064:	af00      	add	r7, sp, #0
 800c066:	6078      	str	r0, [r7, #4]
 800c068:	6039      	str	r1, [r7, #0]
    const char* pin = config["Pin"];
 800c06a:	f107 0314 	add.w	r3, r7, #20
 800c06e:	4a24      	ldr	r2, [pc, #144]	@ (800c100 <_Z11createBlinkRKN11ArduinoJson8V730HB2210JsonObjectE+0xa0>)
 800c070:	6839      	ldr	r1, [r7, #0]
 800c072:	4618      	mov	r0, r3
 800c074:	f000 f8c9 	bl	800c20a <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA4_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 800c078:	f107 0314 	add.w	r3, r7, #20
 800c07c:	4618      	mov	r0, r3
 800c07e:	f7f8 ff3f 	bl	8004f00 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_IPKcLi0EEEv>
 800c082:	4603      	mov	r3, r0
 800c084:	613b      	str	r3, [r7, #16]
    int frequency = config["Frequency"];
 800c086:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800c08a:	4a1e      	ldr	r2, [pc, #120]	@ (800c104 <_Z11createBlinkRKN11ArduinoJson8V730HB2210JsonObjectE+0xa4>)
 800c08c:	6839      	ldr	r1, [r7, #0]
 800c08e:	4618      	mov	r0, r3
 800c090:	f7f8 ff42 	bl	8004f18 <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA10_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 800c094:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800c098:	4618      	mov	r0, r3
 800c09a:	f000 f8db 	bl	800c254 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_IiLi0EEEv>
 800c09e:	4603      	mov	r3, r0
 800c0a0:	60fb      	str	r3, [r7, #12]
    uint32_t threadFreq = config["ThreadFreq"];
 800c0a2:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 800c0a6:	4a18      	ldr	r2, [pc, #96]	@ (800c108 <_Z11createBlinkRKN11ArduinoJson8V730HB2210JsonObjectE+0xa8>)
 800c0a8:	6839      	ldr	r1, [r7, #0]
 800c0aa:	4618      	mov	r0, r3
 800c0ac:	f000 f8de 	bl	800c26c <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA11_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 800c0b0:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 800c0b4:	4618      	mov	r0, r3
 800c0b6:	f7f8 ff54 	bl	8004f62 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_ImLi0EEEv>
 800c0ba:	4603      	mov	r3, r0
 800c0bc:	60bb      	str	r3, [r7, #8]
    
    printf("Creating Blink module on pin %s with frequency %d Hz\n", pin, frequency);
 800c0be:	693b      	ldr	r3, [r7, #16]
 800c0c0:	68fa      	ldr	r2, [r7, #12]
 800c0c2:	4619      	mov	r1, r3
 800c0c4:	4811      	ldr	r0, [pc, #68]	@ (800c10c <_Z11createBlinkRKN11ArduinoJson8V730HB2210JsonObjectE+0xac>)
 800c0c6:	f012 fbed 	bl	801e8a4 <iprintf>
	return std::make_unique<Blink>(pin, threadFreq, frequency);
 800c0ca:	f107 005c 	add.w	r0, r7, #92	@ 0x5c
 800c0ce:	f107 030c 	add.w	r3, r7, #12
 800c0d2:	f107 0208 	add.w	r2, r7, #8
 800c0d6:	f107 0110 	add.w	r1, r7, #16
 800c0da:	f000 f8ec 	bl	800c2b6 <_ZSt11make_uniqueI5BlinkJRPKcRmRiEENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>
 800c0de:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800c0e2:	4619      	mov	r1, r3
 800c0e4:	6878      	ldr	r0, [r7, #4]
 800c0e6:	f000 f949 	bl	800c37c <_ZNSt10shared_ptrI6ModuleEC1I5BlinkSt14default_deleteIS3_EvEEOSt10unique_ptrIT_T0_E>
 800c0ea:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800c0ee:	4618      	mov	r0, r3
 800c0f0:	f000 f922 	bl	800c338 <_ZNSt10unique_ptrI5BlinkSt14default_deleteIS0_EED1Ev>
 800c0f4:	bf00      	nop
}
 800c0f6:	6878      	ldr	r0, [r7, #4]
 800c0f8:	3760      	adds	r7, #96	@ 0x60
 800c0fa:	46bd      	mov	sp, r7
 800c0fc:	bd80      	pop	{r7, pc}
 800c0fe:	bf00      	nop
 800c100:	080200bc 	.word	0x080200bc
 800c104:	080200c0 	.word	0x080200c0
 800c108:	080200cc 	.word	0x080200cc
 800c10c:	080200d8 	.word	0x080200d8

0800c110 <_ZN5BlinkC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEmm>:
 * @brief Constructs a Blink module.
 * 
 * Initializes the blink pin and sets up the toggle period based on the 
 * servo thread frequency and desired blink frequency.
 */
Blink::Blink(std::string _portAndPin, uint32_t _threadFreq, uint32_t _freq) :
 800c110:	b580      	push	{r7, lr}
 800c112:	b086      	sub	sp, #24
 800c114:	af00      	add	r7, sp, #0
 800c116:	60f8      	str	r0, [r7, #12]
 800c118:	60b9      	str	r1, [r7, #8]
 800c11a:	607a      	str	r2, [r7, #4]
 800c11c:	603b      	str	r3, [r7, #0]
	bState(false),
    periodCount(_threadFreq / _freq),
    blinkCount(0),
    blinkPin(std::make_unique<Pin>(_portAndPin, OUTPUT))
 800c11e:	68fb      	ldr	r3, [r7, #12]
 800c120:	4618      	mov	r0, r3
 800c122:	f001 ff73 	bl	800e00c <_ZN6ModuleC1Ev>
 800c126:	4a15      	ldr	r2, [pc, #84]	@ (800c17c <_ZN5BlinkC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEmm+0x6c>)
 800c128:	68fb      	ldr	r3, [r7, #12]
 800c12a:	601a      	str	r2, [r3, #0]
	bState(false),
 800c12c:	68fb      	ldr	r3, [r7, #12]
 800c12e:	2200      	movs	r2, #0
 800c130:	755a      	strb	r2, [r3, #21]
    periodCount(_threadFreq / _freq),
 800c132:	687a      	ldr	r2, [r7, #4]
 800c134:	683b      	ldr	r3, [r7, #0]
 800c136:	fbb2 f2f3 	udiv	r2, r2, r3
 800c13a:	68fb      	ldr	r3, [r7, #12]
 800c13c:	619a      	str	r2, [r3, #24]
    blinkCount(0),
 800c13e:	68fb      	ldr	r3, [r7, #12]
 800c140:	2200      	movs	r2, #0
 800c142:	61da      	str	r2, [r3, #28]
    blinkPin(std::make_unique<Pin>(_portAndPin, OUTPUT))
 800c144:	2301      	movs	r3, #1
 800c146:	617b      	str	r3, [r7, #20]
 800c148:	68fb      	ldr	r3, [r7, #12]
 800c14a:	3320      	adds	r3, #32
 800c14c:	f107 0214 	add.w	r2, r7, #20
 800c150:	68b9      	ldr	r1, [r7, #8]
 800c152:	4618      	mov	r0, r3
 800c154:	f000 f925 	bl	800c3a2 <_ZSt11make_uniqueI3PinJRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEiEENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>
{
	blinkPin->set(bState);
 800c158:	68fb      	ldr	r3, [r7, #12]
 800c15a:	3320      	adds	r3, #32
 800c15c:	4618      	mov	r0, r3
 800c15e:	f000 f970 	bl	800c442 <_ZNKSt10unique_ptrI3PinSt14default_deleteIS0_EEptEv>
 800c162:	4602      	mov	r2, r0
 800c164:	68fb      	ldr	r3, [r7, #12]
 800c166:	7d5b      	ldrb	r3, [r3, #21]
 800c168:	4619      	mov	r1, r3
 800c16a:	4610      	mov	r0, r2
 800c16c:	f7ff ff5a 	bl	800c024 <_ZN3Pin3setEb>
}
 800c170:	68fb      	ldr	r3, [r7, #12]
 800c172:	4618      	mov	r0, r3
 800c174:	3718      	adds	r7, #24
 800c176:	46bd      	mov	sp, r7
 800c178:	bd80      	pop	{r7, pc}
 800c17a:	bf00      	nop
 800c17c:	08020588 	.word	0x08020588

0800c180 <_ZN5Blink6updateEv>:

void Blink::update(void)
{
 800c180:	b580      	push	{r7, lr}
 800c182:	b082      	sub	sp, #8
 800c184:	af00      	add	r7, sp, #0
 800c186:	6078      	str	r0, [r7, #4]
	++blinkCount;
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	69db      	ldr	r3, [r3, #28]
 800c18c:	1c5a      	adds	r2, r3, #1
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	61da      	str	r2, [r3, #28]
	if (blinkCount >= periodCount / 2)
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	69da      	ldr	r2, [r3, #28]
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	699b      	ldr	r3, [r3, #24]
 800c19a:	085b      	lsrs	r3, r3, #1
 800c19c:	429a      	cmp	r2, r3
 800c19e:	d315      	bcc.n	800c1cc <_ZN5Blink6updateEv+0x4c>
	{
        bState = !bState;
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	7d5b      	ldrb	r3, [r3, #21]
 800c1a4:	f083 0301 	eor.w	r3, r3, #1
 800c1a8:	b2da      	uxtb	r2, r3
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	755a      	strb	r2, [r3, #21]
        blinkPin->set(bState);
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	3320      	adds	r3, #32
 800c1b2:	4618      	mov	r0, r3
 800c1b4:	f000 f945 	bl	800c442 <_ZNKSt10unique_ptrI3PinSt14default_deleteIS0_EEptEv>
 800c1b8:	4602      	mov	r2, r0
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	7d5b      	ldrb	r3, [r3, #21]
 800c1be:	4619      	mov	r1, r3
 800c1c0:	4610      	mov	r0, r2
 800c1c2:	f7ff ff2f 	bl	800c024 <_ZN3Pin3setEb>
        blinkCount = 0;
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	2200      	movs	r2, #0
 800c1ca:	61da      	str	r2, [r3, #28]
	}
}
 800c1cc:	bf00      	nop
 800c1ce:	3708      	adds	r7, #8
 800c1d0:	46bd      	mov	sp, r7
 800c1d2:	bd80      	pop	{r7, pc}

0800c1d4 <_ZN5Blink10slowUpdateEv>:

void Blink::slowUpdate(void)
{
 800c1d4:	b480      	push	{r7}
 800c1d6:	b083      	sub	sp, #12
 800c1d8:	af00      	add	r7, sp, #0
 800c1da:	6078      	str	r0, [r7, #4]
	return;
 800c1dc:	bf00      	nop
}
 800c1de:	370c      	adds	r7, #12
 800c1e0:	46bd      	mov	sp, r7
 800c1e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1e6:	4770      	bx	lr

0800c1e8 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
 800c1e8:	b580      	push	{r7, lr}
 800c1ea:	b082      	sub	sp, #8
 800c1ec:	af00      	add	r7, sp, #0
 800c1ee:	6078      	str	r0, [r7, #4]
      { delete this; }
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	2b00      	cmp	r3, #0
 800c1f4:	d005      	beq.n	800c202 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x1a>
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	681b      	ldr	r3, [r3, #0]
 800c1fa:	3304      	adds	r3, #4
 800c1fc:	681b      	ldr	r3, [r3, #0]
 800c1fe:	6878      	ldr	r0, [r7, #4]
 800c200:	4798      	blx	r3
 800c202:	bf00      	nop
 800c204:	3708      	adds	r7, #8
 800c206:	46bd      	mov	sp, r7
 800c208:	bd80      	pop	{r7, pc}

0800c20a <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA4_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>:

  // Gets or sets the member with specified key.
  // https://arduinojson.org/v7/api/jsonobject/subscript/
  template <typename TString,
            detail::enable_if_t<detail::IsString<TString>::value, int> = 0>
  detail::MemberProxy<JsonObject, detail::AdaptedString<TString>> operator[](
 800c20a:	b580      	push	{r7, lr}
 800c20c:	b08c      	sub	sp, #48	@ 0x30
 800c20e:	af02      	add	r7, sp, #8
 800c210:	60f8      	str	r0, [r7, #12]
 800c212:	60b9      	str	r1, [r7, #8]
 800c214:	607a      	str	r2, [r7, #4]
      const TString& key) const {
    return {*this, detail::adaptString(key)};
 800c216:	68ba      	ldr	r2, [r7, #8]
 800c218:	f107 0314 	add.w	r3, r7, #20
 800c21c:	e892 0003 	ldmia.w	r2, {r0, r1}
 800c220:	e883 0003 	stmia.w	r3, {r0, r1}
 800c224:	f107 031c 	add.w	r3, r7, #28
 800c228:	6879      	ldr	r1, [r7, #4]
 800c22a:	4618      	mov	r0, r3
 800c22c:	f000 f941 	bl	800c4b2 <_ZN11ArduinoJson8V730HB226detail11adaptStringIRA4_KcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES9_NS1_9remove_cvINS1_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEOS9_>
 800c230:	466a      	mov	r2, sp
 800c232:	f107 0320 	add.w	r3, r7, #32
 800c236:	e893 0003 	ldmia.w	r3, {r0, r1}
 800c23a:	e882 0003 	stmia.w	r2, {r0, r1}
 800c23e:	69fb      	ldr	r3, [r7, #28]
 800c240:	f107 0214 	add.w	r2, r7, #20
 800c244:	ca06      	ldmia	r2, {r1, r2}
 800c246:	68f8      	ldr	r0, [r7, #12]
 800c248:	f7f8 ffc9 	bl	80051de <_ZN11ArduinoJson8V730HB226detail11MemberProxyINS0_10JsonObjectENS1_9RamStringEEC1ES3_S4_>
  }
 800c24c:	68f8      	ldr	r0, [r7, #12]
 800c24e:	3728      	adds	r7, #40	@ 0x28
 800c250:	46bd      	mov	sp, r7
 800c252:	bd80      	pop	{r7, pc}

0800c254 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_IiLi0EEEv>:
  operator T() const {
 800c254:	b580      	push	{r7, lr}
 800c256:	b082      	sub	sp, #8
 800c258:	af00      	add	r7, sp, #0
 800c25a:	6078      	str	r0, [r7, #4]
    return as<T>();
 800c25c:	6878      	ldr	r0, [r7, #4]
 800c25e:	f000 f93b 	bl	800c4d8 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEE2asIiEET_v>
 800c262:	4603      	mov	r3, r0
  }
 800c264:	4618      	mov	r0, r3
 800c266:	3708      	adds	r7, #8
 800c268:	46bd      	mov	sp, r7
 800c26a:	bd80      	pop	{r7, pc}

0800c26c <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA11_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>:
  detail::MemberProxy<JsonObject, detail::AdaptedString<TString>> operator[](
 800c26c:	b580      	push	{r7, lr}
 800c26e:	b08c      	sub	sp, #48	@ 0x30
 800c270:	af02      	add	r7, sp, #8
 800c272:	60f8      	str	r0, [r7, #12]
 800c274:	60b9      	str	r1, [r7, #8]
 800c276:	607a      	str	r2, [r7, #4]
    return {*this, detail::adaptString(key)};
 800c278:	68ba      	ldr	r2, [r7, #8]
 800c27a:	f107 0314 	add.w	r3, r7, #20
 800c27e:	e892 0003 	ldmia.w	r2, {r0, r1}
 800c282:	e883 0003 	stmia.w	r3, {r0, r1}
 800c286:	f107 031c 	add.w	r3, r7, #28
 800c28a:	6879      	ldr	r1, [r7, #4]
 800c28c:	4618      	mov	r0, r3
 800c28e:	f7fe faf6 	bl	800a87e <_ZN11ArduinoJson8V730HB226detail11adaptStringIRA11_KcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES9_NS1_9remove_cvINS1_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEOS9_>
 800c292:	466a      	mov	r2, sp
 800c294:	f107 0320 	add.w	r3, r7, #32
 800c298:	e893 0003 	ldmia.w	r3, {r0, r1}
 800c29c:	e882 0003 	stmia.w	r2, {r0, r1}
 800c2a0:	69fb      	ldr	r3, [r7, #28]
 800c2a2:	f107 0214 	add.w	r2, r7, #20
 800c2a6:	ca06      	ldmia	r2, {r1, r2}
 800c2a8:	68f8      	ldr	r0, [r7, #12]
 800c2aa:	f7f8 ff98 	bl	80051de <_ZN11ArduinoJson8V730HB226detail11MemberProxyINS0_10JsonObjectENS1_9RamStringEEC1ES3_S4_>
  }
 800c2ae:	68f8      	ldr	r0, [r7, #12]
 800c2b0:	3728      	adds	r7, #40	@ 0x28
 800c2b2:	46bd      	mov	sp, r7
 800c2b4:	bd80      	pop	{r7, pc}

0800c2b6 <_ZSt11make_uniqueI5BlinkJRPKcRmRiEENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>:
    make_unique(_Args&&... __args)
 800c2b6:	b5b0      	push	{r4, r5, r7, lr}
 800c2b8:	b08c      	sub	sp, #48	@ 0x30
 800c2ba:	af00      	add	r7, sp, #0
 800c2bc:	60f8      	str	r0, [r7, #12]
 800c2be:	60b9      	str	r1, [r7, #8]
 800c2c0:	607a      	str	r2, [r7, #4]
 800c2c2:	603b      	str	r3, [r7, #0]
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
 800c2c4:	2024      	movs	r0, #36	@ 0x24
 800c2c6:	f011 ff69 	bl	801e19c <_Znwj>
 800c2ca:	4603      	mov	r3, r0
 800c2cc:	461d      	mov	r5, r3
 800c2ce:	68b8      	ldr	r0, [r7, #8]
 800c2d0:	f000 f924 	bl	800c51c <_ZSt7forwardIRPKcEOT_RNSt16remove_referenceIS3_E4typeE>
 800c2d4:	4603      	mov	r3, r0
 800c2d6:	681c      	ldr	r4, [r3, #0]
 800c2d8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800c2dc:	4618      	mov	r0, r3
 800c2de:	f011 ff6e 	bl	801e1be <_ZNSaIcEC1Ev>
 800c2e2:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 800c2e6:	f107 0314 	add.w	r3, r7, #20
 800c2ea:	4621      	mov	r1, r4
 800c2ec:	4618      	mov	r0, r3
 800c2ee:	f7f8 fd81 	bl	8004df4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 800c2f2:	6878      	ldr	r0, [r7, #4]
 800c2f4:	f7fe f9ac 	bl	800a650 <_ZSt7forwardIRmEOT_RNSt16remove_referenceIS1_E4typeE>
 800c2f8:	4603      	mov	r3, r0
 800c2fa:	681c      	ldr	r4, [r3, #0]
 800c2fc:	6838      	ldr	r0, [r7, #0]
 800c2fe:	f000 f918 	bl	800c532 <_ZSt7forwardIRiEOT_RNSt16remove_referenceIS1_E4typeE>
 800c302:	4603      	mov	r3, r0
 800c304:	681b      	ldr	r3, [r3, #0]
 800c306:	f107 0114 	add.w	r1, r7, #20
 800c30a:	4622      	mov	r2, r4
 800c30c:	4628      	mov	r0, r5
 800c30e:	f7ff feff 	bl	800c110 <_ZN5BlinkC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEmm>
 800c312:	4629      	mov	r1, r5
 800c314:	68f8      	ldr	r0, [r7, #12]
 800c316:	f000 f927 	bl	800c568 <_ZNSt10unique_ptrI5BlinkSt14default_deleteIS0_EEC1IS2_vEEPS0_>
 800c31a:	f107 0314 	add.w	r3, r7, #20
 800c31e:	4618      	mov	r0, r3
 800c320:	f011 ffe9 	bl	801e2f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800c324:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800c328:	4618      	mov	r0, r3
 800c32a:	f011 ff49 	bl	801e1c0 <_ZNSaIcED1Ev>
 800c32e:	bf00      	nop
 800c330:	68f8      	ldr	r0, [r7, #12]
 800c332:	3730      	adds	r7, #48	@ 0x30
 800c334:	46bd      	mov	sp, r7
 800c336:	bdb0      	pop	{r4, r5, r7, pc}

0800c338 <_ZNSt10unique_ptrI5BlinkSt14default_deleteIS0_EED1Ev>:
      ~unique_ptr() noexcept
 800c338:	b590      	push	{r4, r7, lr}
 800c33a:	b085      	sub	sp, #20
 800c33c:	af00      	add	r7, sp, #0
 800c33e:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	4618      	mov	r0, r3
 800c344:	f000 f91f 	bl	800c586 <_ZNSt15__uniq_ptr_implI5BlinkSt14default_deleteIS0_EE6_M_ptrEv>
 800c348:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 800c34a:	68fb      	ldr	r3, [r7, #12]
 800c34c:	681b      	ldr	r3, [r3, #0]
 800c34e:	2b00      	cmp	r3, #0
 800c350:	d00c      	beq.n	800c36c <_ZNSt10unique_ptrI5BlinkSt14default_deleteIS0_EED1Ev+0x34>
	  get_deleter()(std::move(__ptr));
 800c352:	6878      	ldr	r0, [r7, #4]
 800c354:	f000 f924 	bl	800c5a0 <_ZNSt10unique_ptrI5BlinkSt14default_deleteIS0_EE11get_deleterEv>
 800c358:	4604      	mov	r4, r0
 800c35a:	68f8      	ldr	r0, [r7, #12]
 800c35c:	f000 f92d 	bl	800c5ba <_ZSt4moveIRP5BlinkEONSt16remove_referenceIT_E4typeEOS4_>
 800c360:	4603      	mov	r3, r0
 800c362:	681b      	ldr	r3, [r3, #0]
 800c364:	4619      	mov	r1, r3
 800c366:	4620      	mov	r0, r4
 800c368:	f000 f95a 	bl	800c620 <_ZNKSt14default_deleteI5BlinkEclEPS0_>
	__ptr = pointer();
 800c36c:	68fb      	ldr	r3, [r7, #12]
 800c36e:	2200      	movs	r2, #0
 800c370:	601a      	str	r2, [r3, #0]
      }
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	4618      	mov	r0, r3
 800c376:	3714      	adds	r7, #20
 800c378:	46bd      	mov	sp, r7
 800c37a:	bd90      	pop	{r4, r7, pc}

0800c37c <_ZNSt10shared_ptrI6ModuleEC1I5BlinkSt14default_deleteIS3_EvEEOSt10unique_ptrIT_T0_E>:

      // _GLIBCXX_RESOLVE_LIB_DEFECTS
      // 2399. shared_ptr's constructor from unique_ptr should be constrained
      template<typename _Yp, typename _Del,
	       typename = _Constructible<unique_ptr<_Yp, _Del>>>
	shared_ptr(unique_ptr<_Yp, _Del>&& __r)
 800c37c:	b590      	push	{r4, r7, lr}
 800c37e:	b083      	sub	sp, #12
 800c380:	af00      	add	r7, sp, #0
 800c382:	6078      	str	r0, [r7, #4]
 800c384:	6039      	str	r1, [r7, #0]
	: __shared_ptr<_Tp>(std::move(__r)) { }
 800c386:	687c      	ldr	r4, [r7, #4]
 800c388:	6838      	ldr	r0, [r7, #0]
 800c38a:	f000 f95a 	bl	800c642 <_ZSt4moveIRSt10unique_ptrI5BlinkSt14default_deleteIS1_EEEONSt16remove_referenceIT_E4typeEOS7_>
 800c38e:	4603      	mov	r3, r0
 800c390:	4619      	mov	r1, r3
 800c392:	4620      	mov	r0, r4
 800c394:	f000 f960 	bl	800c658 <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EEC1I5BlinkSt14default_deleteIS5_EvEEOSt10unique_ptrIT_T0_E>
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	4618      	mov	r0, r3
 800c39c:	370c      	adds	r7, #12
 800c39e:	46bd      	mov	sp, r7
 800c3a0:	bd90      	pop	{r4, r7, pc}

0800c3a2 <_ZSt11make_uniqueI3PinJRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEiEENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>:
    make_unique(_Args&&... __args)
 800c3a2:	b590      	push	{r4, r7, lr}
 800c3a4:	b08b      	sub	sp, #44	@ 0x2c
 800c3a6:	af00      	add	r7, sp, #0
 800c3a8:	60f8      	str	r0, [r7, #12]
 800c3aa:	60b9      	str	r1, [r7, #8]
 800c3ac:	607a      	str	r2, [r7, #4]
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
 800c3ae:	2044      	movs	r0, #68	@ 0x44
 800c3b0:	f011 fef4 	bl	801e19c <_Znwj>
 800c3b4:	4603      	mov	r3, r0
 800c3b6:	461c      	mov	r4, r3
 800c3b8:	68b8      	ldr	r0, [r7, #8]
 800c3ba:	f000 f985 	bl	800c6c8 <_ZSt7forwardIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS7_E4typeE>
 800c3be:	4602      	mov	r2, r0
 800c3c0:	f107 0310 	add.w	r3, r7, #16
 800c3c4:	4611      	mov	r1, r2
 800c3c6:	4618      	mov	r0, r3
 800c3c8:	f012 f895 	bl	801e4f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 800c3cc:	6878      	ldr	r0, [r7, #4]
 800c3ce:	f000 f865 	bl	800c49c <_ZSt7forwardIiEOT_RNSt16remove_referenceIS0_E4typeE>
 800c3d2:	4603      	mov	r3, r0
 800c3d4:	681a      	ldr	r2, [r3, #0]
 800c3d6:	f107 0310 	add.w	r3, r7, #16
 800c3da:	4619      	mov	r1, r3
 800c3dc:	4620      	mov	r0, r4
 800c3de:	f7f5 fefc 	bl	80021da <_ZN3PinC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi>
 800c3e2:	4621      	mov	r1, r4
 800c3e4:	68f8      	ldr	r0, [r7, #12]
 800c3e6:	f000 f98a 	bl	800c6fe <_ZNSt10unique_ptrI3PinSt14default_deleteIS0_EEC1IS2_vEEPS0_>
 800c3ea:	f107 0310 	add.w	r3, r7, #16
 800c3ee:	4618      	mov	r0, r3
 800c3f0:	f011 ff81 	bl	801e2f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800c3f4:	bf00      	nop
 800c3f6:	68f8      	ldr	r0, [r7, #12]
 800c3f8:	372c      	adds	r7, #44	@ 0x2c
 800c3fa:	46bd      	mov	sp, r7
 800c3fc:	bd90      	pop	{r4, r7, pc}

0800c3fe <_ZNSt10unique_ptrI3PinSt14default_deleteIS0_EED1Ev>:
      ~unique_ptr() noexcept
 800c3fe:	b590      	push	{r4, r7, lr}
 800c400:	b085      	sub	sp, #20
 800c402:	af00      	add	r7, sp, #0
 800c404:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	4618      	mov	r0, r3
 800c40a:	f000 f987 	bl	800c71c <_ZNSt15__uniq_ptr_implI3PinSt14default_deleteIS0_EE6_M_ptrEv>
 800c40e:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 800c410:	68fb      	ldr	r3, [r7, #12]
 800c412:	681b      	ldr	r3, [r3, #0]
 800c414:	2b00      	cmp	r3, #0
 800c416:	d00c      	beq.n	800c432 <_ZNSt10unique_ptrI3PinSt14default_deleteIS0_EED1Ev+0x34>
	  get_deleter()(std::move(__ptr));
 800c418:	6878      	ldr	r0, [r7, #4]
 800c41a:	f000 f98c 	bl	800c736 <_ZNSt10unique_ptrI3PinSt14default_deleteIS0_EE11get_deleterEv>
 800c41e:	4604      	mov	r4, r0
 800c420:	68f8      	ldr	r0, [r7, #12]
 800c422:	f000 f995 	bl	800c750 <_ZSt4moveIRP3PinEONSt16remove_referenceIT_E4typeEOS4_>
 800c426:	4603      	mov	r3, r0
 800c428:	681b      	ldr	r3, [r3, #0]
 800c42a:	4619      	mov	r1, r3
 800c42c:	4620      	mov	r0, r4
 800c42e:	f000 f9a7 	bl	800c780 <_ZNKSt14default_deleteI3PinEclEPS0_>
	__ptr = pointer();
 800c432:	68fb      	ldr	r3, [r7, #12]
 800c434:	2200      	movs	r2, #0
 800c436:	601a      	str	r2, [r3, #0]
      }
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	4618      	mov	r0, r3
 800c43c:	3714      	adds	r7, #20
 800c43e:	46bd      	mov	sp, r7
 800c440:	bd90      	pop	{r4, r7, pc}

0800c442 <_ZNKSt10unique_ptrI3PinSt14default_deleteIS0_EEptEv>:
      operator->() const noexcept
 800c442:	b580      	push	{r7, lr}
 800c444:	b082      	sub	sp, #8
 800c446:	af00      	add	r7, sp, #0
 800c448:	6078      	str	r0, [r7, #4]
	return get();
 800c44a:	6878      	ldr	r0, [r7, #4]
 800c44c:	f000 f9ab 	bl	800c7a6 <_ZNKSt10unique_ptrI3PinSt14default_deleteIS0_EE3getEv>
 800c450:	4603      	mov	r3, r0
      }
 800c452:	4618      	mov	r0, r3
 800c454:	3708      	adds	r7, #8
 800c456:	46bd      	mov	sp, r7
 800c458:	bd80      	pop	{r7, pc}
	...

0800c45c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_base() noexcept
 800c45c:	b480      	push	{r7}
 800c45e:	b083      	sub	sp, #12
 800c460:	af00      	add	r7, sp, #0
 800c462:	6078      	str	r0, [r7, #4]
      { }
 800c464:	4a04      	ldr	r2, [pc, #16]	@ (800c478 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x1c>)
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	601a      	str	r2, [r3, #0]
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	4618      	mov	r0, r3
 800c46e:	370c      	adds	r7, #12
 800c470:	46bd      	mov	sp, r7
 800c472:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c476:	4770      	bx	lr
 800c478:	080205ac 	.word	0x080205ac

0800c47c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_base() noexcept
 800c47c:	b580      	push	{r7, lr}
 800c47e:	b082      	sub	sp, #8
 800c480:	af00      	add	r7, sp, #0
 800c482:	6078      	str	r0, [r7, #4]
      { }
 800c484:	6878      	ldr	r0, [r7, #4]
 800c486:	f7ff ffe9 	bl	800c45c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 800c48a:	210c      	movs	r1, #12
 800c48c:	6878      	ldr	r0, [r7, #4]
 800c48e:	f011 fe74 	bl	801e17a <_ZdlPvj>
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	4618      	mov	r0, r3
 800c496:	3708      	adds	r7, #8
 800c498:	46bd      	mov	sp, r7
 800c49a:	bd80      	pop	{r7, pc}

0800c49c <_ZSt7forwardIiEOT_RNSt16remove_referenceIS0_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800c49c:	b480      	push	{r7}
 800c49e:	b083      	sub	sp, #12
 800c4a0:	af00      	add	r7, sp, #0
 800c4a2:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	4618      	mov	r0, r3
 800c4a8:	370c      	adds	r7, #12
 800c4aa:	46bd      	mov	sp, r7
 800c4ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4b0:	4770      	bx	lr

0800c4b2 <_ZN11ArduinoJson8V730HB226detail11adaptStringIRA4_KcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES9_NS1_9remove_cvINS1_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEOS9_>:
AdaptedString<TString> adaptString(TString&& s) {
 800c4b2:	b580      	push	{r7, lr}
 800c4b4:	b082      	sub	sp, #8
 800c4b6:	af00      	add	r7, sp, #0
 800c4b8:	6078      	str	r0, [r7, #4]
 800c4ba:	6039      	str	r1, [r7, #0]
  return StringAdapterFor<TString>::adapt(detail::forward<TString>(s));
 800c4bc:	6838      	ldr	r0, [r7, #0]
 800c4be:	f000 f97f 	bl	800c7c0 <_ZN11ArduinoJson8V730HB226detail7forwardIRA4_KcEEOT_RNS1_16remove_referenceIS6_E4typeE>
 800c4c2:	4602      	mov	r2, r0
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	4611      	mov	r1, r2
 800c4c8:	4618      	mov	r0, r3
 800c4ca:	f000 f984 	bl	800c7d6 <_ZN11ArduinoJson8V730HB226detail13StringAdapterIRA4_KcvE5adaptES5_>
 800c4ce:	bf00      	nop
}
 800c4d0:	6878      	ldr	r0, [r7, #4]
 800c4d2:	3708      	adds	r7, #8
 800c4d4:	46bd      	mov	sp, r7
 800c4d6:	bd80      	pop	{r7, pc}

0800c4d8 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEE2asIiEET_v>:
  return add<JsonVariant>();
}

template <typename TDerived>
template <typename T>
inline T VariantRefBase<TDerived>::as() const {
 800c4d8:	b590      	push	{r4, r7, lr}
 800c4da:	b087      	sub	sp, #28
 800c4dc:	af00      	add	r7, sp, #0
 800c4de:	6078      	str	r0, [r7, #4]
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	617b      	str	r3, [r7, #20]
 800c4e4:	697b      	ldr	r3, [r7, #20]
 800c4e6:	613b      	str	r3, [r7, #16]
    return ArduinoJson::JsonVariantConst(getData(), getResourceManager());
 800c4e8:	6938      	ldr	r0, [r7, #16]
 800c4ea:	f7f9 fd8a 	bl	8006002 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEE7getDataEv>
 800c4ee:	4604      	mov	r4, r0
 800c4f0:	6938      	ldr	r0, [r7, #16]
 800c4f2:	f7f9 fc14 	bl	8005d1e <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEE18getResourceManagerEv>
 800c4f6:	4602      	mov	r2, r0
 800c4f8:	f107 0308 	add.w	r3, r7, #8
 800c4fc:	4621      	mov	r1, r4
 800c4fe:	4618      	mov	r0, r3
 800c500:	f7f6 fcaf 	bl	8002e62 <_ZN11ArduinoJson8V730HB2216JsonVariantConstC1EPKNS0_6detail11VariantDataEPKNS2_15ResourceManagerE>
    return getVariantConst();
 800c504:	bf00      	nop
  using variant_type =  // JsonVariantConst or JsonVariant?
      typename function_traits<decltype(&Converter<T>::fromJson)>::arg1_type;
  return Converter<T>::fromJson(getVariant<variant_type>());
 800c506:	f107 0308 	add.w	r3, r7, #8
 800c50a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800c50e:	f000 f971 	bl	800c7f4 <_ZN11ArduinoJson8V730HB229ConverterIivE8fromJsonENS0_16JsonVariantConstE>
 800c512:	4603      	mov	r3, r0
}
 800c514:	4618      	mov	r0, r3
 800c516:	371c      	adds	r7, #28
 800c518:	46bd      	mov	sp, r7
 800c51a:	bd90      	pop	{r4, r7, pc}

0800c51c <_ZSt7forwardIRPKcEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800c51c:	b480      	push	{r7}
 800c51e:	b083      	sub	sp, #12
 800c520:	af00      	add	r7, sp, #0
 800c522:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	4618      	mov	r0, r3
 800c528:	370c      	adds	r7, #12
 800c52a:	46bd      	mov	sp, r7
 800c52c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c530:	4770      	bx	lr

0800c532 <_ZSt7forwardIRiEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800c532:	b480      	push	{r7}
 800c534:	b083      	sub	sp, #12
 800c536:	af00      	add	r7, sp, #0
 800c538:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	4618      	mov	r0, r3
 800c53e:	370c      	adds	r7, #12
 800c540:	46bd      	mov	sp, r7
 800c542:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c546:	4770      	bx	lr

0800c548 <_ZNSt15__uniq_ptr_dataI5BlinkSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEPS0_>:
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 800c548:	b580      	push	{r7, lr}
 800c54a:	b082      	sub	sp, #8
 800c54c:	af00      	add	r7, sp, #0
 800c54e:	6078      	str	r0, [r7, #4]
 800c550:	6039      	str	r1, [r7, #0]
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	683a      	ldr	r2, [r7, #0]
 800c556:	4611      	mov	r1, r2
 800c558:	4618      	mov	r0, r3
 800c55a:	f000 f969 	bl	800c830 <_ZNSt15__uniq_ptr_implI5BlinkSt14default_deleteIS0_EEC1EPS0_>
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	4618      	mov	r0, r3
 800c562:	3708      	adds	r7, #8
 800c564:	46bd      	mov	sp, r7
 800c566:	bd80      	pop	{r7, pc}

0800c568 <_ZNSt10unique_ptrI5BlinkSt14default_deleteIS0_EEC1IS2_vEEPS0_>:
	unique_ptr(pointer __p) noexcept
 800c568:	b580      	push	{r7, lr}
 800c56a:	b082      	sub	sp, #8
 800c56c:	af00      	add	r7, sp, #0
 800c56e:	6078      	str	r0, [r7, #4]
 800c570:	6039      	str	r1, [r7, #0]
	: _M_t(__p)
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	6839      	ldr	r1, [r7, #0]
 800c576:	4618      	mov	r0, r3
 800c578:	f7ff ffe6 	bl	800c548 <_ZNSt15__uniq_ptr_dataI5BlinkSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEPS0_>
        { }
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	4618      	mov	r0, r3
 800c580:	3708      	adds	r7, #8
 800c582:	46bd      	mov	sp, r7
 800c584:	bd80      	pop	{r7, pc}

0800c586 <_ZNSt15__uniq_ptr_implI5BlinkSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer&   _M_ptr() noexcept { return std::get<0>(_M_t); }
 800c586:	b580      	push	{r7, lr}
 800c588:	b082      	sub	sp, #8
 800c58a:	af00      	add	r7, sp, #0
 800c58c:	6078      	str	r0, [r7, #4]
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	4618      	mov	r0, r3
 800c592:	f000 f961 	bl	800c858 <_ZSt3getILj0EJP5BlinkSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 800c596:	4603      	mov	r3, r0
 800c598:	4618      	mov	r0, r3
 800c59a:	3708      	adds	r7, #8
 800c59c:	46bd      	mov	sp, r7
 800c59e:	bd80      	pop	{r7, pc}

0800c5a0 <_ZNSt10unique_ptrI5BlinkSt14default_deleteIS0_EE11get_deleterEv>:
      get_deleter() noexcept
 800c5a0:	b580      	push	{r7, lr}
 800c5a2:	b082      	sub	sp, #8
 800c5a4:	af00      	add	r7, sp, #0
 800c5a6:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	4618      	mov	r0, r3
 800c5ac:	f000 f961 	bl	800c872 <_ZNSt15__uniq_ptr_implI5BlinkSt14default_deleteIS0_EE10_M_deleterEv>
 800c5b0:	4603      	mov	r3, r0
 800c5b2:	4618      	mov	r0, r3
 800c5b4:	3708      	adds	r7, #8
 800c5b6:	46bd      	mov	sp, r7
 800c5b8:	bd80      	pop	{r7, pc}

0800c5ba <_ZSt4moveIRP5BlinkEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 800c5ba:	b480      	push	{r7}
 800c5bc:	b083      	sub	sp, #12
 800c5be:	af00      	add	r7, sp, #0
 800c5c0:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	4618      	mov	r0, r3
 800c5c6:	370c      	adds	r7, #12
 800c5c8:	46bd      	mov	sp, r7
 800c5ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5ce:	4770      	bx	lr

0800c5d0 <_ZN5BlinkD1Ev>:
 * @class Blink
 * @brief A module for toggling a pin at a specific frequency.
 * 
 * The Blink class controls a GPIO pin, toggling its state at a specified frequency.
 */
class Blink : public Module
 800c5d0:	b580      	push	{r7, lr}
 800c5d2:	b082      	sub	sp, #8
 800c5d4:	af00      	add	r7, sp, #0
 800c5d6:	6078      	str	r0, [r7, #4]
 800c5d8:	4a08      	ldr	r2, [pc, #32]	@ (800c5fc <_ZN5BlinkD1Ev+0x2c>)
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	601a      	str	r2, [r3, #0]
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	3320      	adds	r3, #32
 800c5e2:	4618      	mov	r0, r3
 800c5e4:	f7ff ff0b 	bl	800c3fe <_ZNSt10unique_ptrI3PinSt14default_deleteIS0_EED1Ev>
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	4618      	mov	r0, r3
 800c5ec:	f001 fd2a 	bl	800e044 <_ZN6ModuleD1Ev>
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	4618      	mov	r0, r3
 800c5f4:	3708      	adds	r7, #8
 800c5f6:	46bd      	mov	sp, r7
 800c5f8:	bd80      	pop	{r7, pc}
 800c5fa:	bf00      	nop
 800c5fc:	08020588 	.word	0x08020588

0800c600 <_ZN5BlinkD0Ev>:
 800c600:	b580      	push	{r7, lr}
 800c602:	b082      	sub	sp, #8
 800c604:	af00      	add	r7, sp, #0
 800c606:	6078      	str	r0, [r7, #4]
 800c608:	6878      	ldr	r0, [r7, #4]
 800c60a:	f7ff ffe1 	bl	800c5d0 <_ZN5BlinkD1Ev>
 800c60e:	2124      	movs	r1, #36	@ 0x24
 800c610:	6878      	ldr	r0, [r7, #4]
 800c612:	f011 fdb2 	bl	801e17a <_ZdlPvj>
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	4618      	mov	r0, r3
 800c61a:	3708      	adds	r7, #8
 800c61c:	46bd      	mov	sp, r7
 800c61e:	bd80      	pop	{r7, pc}

0800c620 <_ZNKSt14default_deleteI5BlinkEclEPS0_>:
      operator()(_Tp* __ptr) const
 800c620:	b580      	push	{r7, lr}
 800c622:	b082      	sub	sp, #8
 800c624:	af00      	add	r7, sp, #0
 800c626:	6078      	str	r0, [r7, #4]
 800c628:	6039      	str	r1, [r7, #0]
	delete __ptr;
 800c62a:	683b      	ldr	r3, [r7, #0]
 800c62c:	2b00      	cmp	r3, #0
 800c62e:	d004      	beq.n	800c63a <_ZNKSt14default_deleteI5BlinkEclEPS0_+0x1a>
 800c630:	681a      	ldr	r2, [r3, #0]
 800c632:	3204      	adds	r2, #4
 800c634:	6812      	ldr	r2, [r2, #0]
 800c636:	4618      	mov	r0, r3
 800c638:	4790      	blx	r2
      }
 800c63a:	bf00      	nop
 800c63c:	3708      	adds	r7, #8
 800c63e:	46bd      	mov	sp, r7
 800c640:	bd80      	pop	{r7, pc}

0800c642 <_ZSt4moveIRSt10unique_ptrI5BlinkSt14default_deleteIS1_EEEONSt16remove_referenceIT_E4typeEOS7_>:
    move(_Tp&& __t) noexcept
 800c642:	b480      	push	{r7}
 800c644:	b083      	sub	sp, #12
 800c646:	af00      	add	r7, sp, #0
 800c648:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	4618      	mov	r0, r3
 800c64e:	370c      	adds	r7, #12
 800c650:	46bd      	mov	sp, r7
 800c652:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c656:	4770      	bx	lr

0800c658 <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EEC1I5BlinkSt14default_deleteIS5_EvEEOSt10unique_ptrIT_T0_E>:
	__shared_ptr(unique_ptr<_Yp, _Del>&& __r)
 800c658:	b580      	push	{r7, lr}
 800c65a:	b084      	sub	sp, #16
 800c65c:	af00      	add	r7, sp, #0
 800c65e:	6078      	str	r0, [r7, #4]
 800c660:	6039      	str	r1, [r7, #0]
	: _M_ptr(__r.get()), _M_refcount()
 800c662:	6838      	ldr	r0, [r7, #0]
 800c664:	f000 f912 	bl	800c88c <_ZNKSt10unique_ptrI5BlinkSt14default_deleteIS0_EE3getEv>
 800c668:	4602      	mov	r2, r0
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	601a      	str	r2, [r3, #0]
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	3304      	adds	r3, #4
 800c672:	4618      	mov	r0, r3
 800c674:	f000 f917 	bl	800c8a6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
	  auto __raw = __to_address(__r.get());
 800c678:	6838      	ldr	r0, [r7, #0]
 800c67a:	f000 f907 	bl	800c88c <_ZNKSt10unique_ptrI5BlinkSt14default_deleteIS0_EE3getEv>
 800c67e:	4603      	mov	r3, r0
 800c680:	4618      	mov	r0, r3
 800c682:	f000 f91e 	bl	800c8c2 <_ZSt12__to_addressI5BlinkEPT_S2_>
 800c686:	60f8      	str	r0, [r7, #12]
	  _M_refcount = __shared_count<_Lp>(std::move(__r));
 800c688:	6838      	ldr	r0, [r7, #0]
 800c68a:	f7ff ffda 	bl	800c642 <_ZSt4moveIRSt10unique_ptrI5BlinkSt14default_deleteIS1_EEEONSt16remove_referenceIT_E4typeEOS7_>
 800c68e:	4602      	mov	r2, r0
 800c690:	f107 0308 	add.w	r3, r7, #8
 800c694:	4611      	mov	r1, r2
 800c696:	4618      	mov	r0, r3
 800c698:	f000 f91e 	bl	800c8d8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1I5BlinkSt14default_deleteIS4_EEEOSt10unique_ptrIT_T0_E>
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	3304      	adds	r3, #4
 800c6a0:	f107 0208 	add.w	r2, r7, #8
 800c6a4:	4611      	mov	r1, r2
 800c6a6:	4618      	mov	r0, r3
 800c6a8:	f000 f958 	bl	800c95c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_>
 800c6ac:	f107 0308 	add.w	r3, r7, #8
 800c6b0:	4618      	mov	r0, r3
 800c6b2:	f7fd fc43 	bl	8009f3c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
	  _M_enable_shared_from_this_with(__raw);
 800c6b6:	68f9      	ldr	r1, [r7, #12]
 800c6b8:	6878      	ldr	r0, [r7, #4]
 800c6ba:	f000 f973 	bl	800c9a4 <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withI5BlinkS5_EENSt9enable_ifIXntsrNS3_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>
	}
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	4618      	mov	r0, r3
 800c6c2:	3710      	adds	r7, #16
 800c6c4:	46bd      	mov	sp, r7
 800c6c6:	bd80      	pop	{r7, pc}

0800c6c8 <_ZSt7forwardIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS7_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800c6c8:	b480      	push	{r7}
 800c6ca:	b083      	sub	sp, #12
 800c6cc:	af00      	add	r7, sp, #0
 800c6ce:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	4618      	mov	r0, r3
 800c6d4:	370c      	adds	r7, #12
 800c6d6:	46bd      	mov	sp, r7
 800c6d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6dc:	4770      	bx	lr

0800c6de <_ZNSt15__uniq_ptr_dataI3PinSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEPS0_>:
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 800c6de:	b580      	push	{r7, lr}
 800c6e0:	b082      	sub	sp, #8
 800c6e2:	af00      	add	r7, sp, #0
 800c6e4:	6078      	str	r0, [r7, #4]
 800c6e6:	6039      	str	r1, [r7, #0]
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	683a      	ldr	r2, [r7, #0]
 800c6ec:	4611      	mov	r1, r2
 800c6ee:	4618      	mov	r0, r3
 800c6f0:	f000 f963 	bl	800c9ba <_ZNSt15__uniq_ptr_implI3PinSt14default_deleteIS0_EEC1EPS0_>
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	4618      	mov	r0, r3
 800c6f8:	3708      	adds	r7, #8
 800c6fa:	46bd      	mov	sp, r7
 800c6fc:	bd80      	pop	{r7, pc}

0800c6fe <_ZNSt10unique_ptrI3PinSt14default_deleteIS0_EEC1IS2_vEEPS0_>:
	unique_ptr(pointer __p) noexcept
 800c6fe:	b580      	push	{r7, lr}
 800c700:	b082      	sub	sp, #8
 800c702:	af00      	add	r7, sp, #0
 800c704:	6078      	str	r0, [r7, #4]
 800c706:	6039      	str	r1, [r7, #0]
	: _M_t(__p)
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	6839      	ldr	r1, [r7, #0]
 800c70c:	4618      	mov	r0, r3
 800c70e:	f7ff ffe6 	bl	800c6de <_ZNSt15__uniq_ptr_dataI3PinSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEPS0_>
        { }
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	4618      	mov	r0, r3
 800c716:	3708      	adds	r7, #8
 800c718:	46bd      	mov	sp, r7
 800c71a:	bd80      	pop	{r7, pc}

0800c71c <_ZNSt15__uniq_ptr_implI3PinSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer&   _M_ptr() noexcept { return std::get<0>(_M_t); }
 800c71c:	b580      	push	{r7, lr}
 800c71e:	b082      	sub	sp, #8
 800c720:	af00      	add	r7, sp, #0
 800c722:	6078      	str	r0, [r7, #4]
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	4618      	mov	r0, r3
 800c728:	f000 f95b 	bl	800c9e2 <_ZSt3getILj0EJP3PinSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 800c72c:	4603      	mov	r3, r0
 800c72e:	4618      	mov	r0, r3
 800c730:	3708      	adds	r7, #8
 800c732:	46bd      	mov	sp, r7
 800c734:	bd80      	pop	{r7, pc}

0800c736 <_ZNSt10unique_ptrI3PinSt14default_deleteIS0_EE11get_deleterEv>:
      get_deleter() noexcept
 800c736:	b580      	push	{r7, lr}
 800c738:	b082      	sub	sp, #8
 800c73a:	af00      	add	r7, sp, #0
 800c73c:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	4618      	mov	r0, r3
 800c742:	f000 f95b 	bl	800c9fc <_ZNSt15__uniq_ptr_implI3PinSt14default_deleteIS0_EE10_M_deleterEv>
 800c746:	4603      	mov	r3, r0
 800c748:	4618      	mov	r0, r3
 800c74a:	3708      	adds	r7, #8
 800c74c:	46bd      	mov	sp, r7
 800c74e:	bd80      	pop	{r7, pc}

0800c750 <_ZSt4moveIRP3PinEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 800c750:	b480      	push	{r7}
 800c752:	b083      	sub	sp, #12
 800c754:	af00      	add	r7, sp, #0
 800c756:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	4618      	mov	r0, r3
 800c75c:	370c      	adds	r7, #12
 800c75e:	46bd      	mov	sp, r7
 800c760:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c764:	4770      	bx	lr

0800c766 <_ZN3PinD1Ev>:
class Pin
 800c766:	b580      	push	{r7, lr}
 800c768:	b082      	sub	sp, #8
 800c76a:	af00      	add	r7, sp, #0
 800c76c:	6078      	str	r0, [r7, #4]
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	4618      	mov	r0, r3
 800c772:	f011 fdc0 	bl	801e2f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	4618      	mov	r0, r3
 800c77a:	3708      	adds	r7, #8
 800c77c:	46bd      	mov	sp, r7
 800c77e:	bd80      	pop	{r7, pc}

0800c780 <_ZNKSt14default_deleteI3PinEclEPS0_>:
      operator()(_Tp* __ptr) const
 800c780:	b590      	push	{r4, r7, lr}
 800c782:	b083      	sub	sp, #12
 800c784:	af00      	add	r7, sp, #0
 800c786:	6078      	str	r0, [r7, #4]
 800c788:	6039      	str	r1, [r7, #0]
	delete __ptr;
 800c78a:	683c      	ldr	r4, [r7, #0]
 800c78c:	2c00      	cmp	r4, #0
 800c78e:	d006      	beq.n	800c79e <_ZNKSt14default_deleteI3PinEclEPS0_+0x1e>
 800c790:	4620      	mov	r0, r4
 800c792:	f7ff ffe8 	bl	800c766 <_ZN3PinD1Ev>
 800c796:	2144      	movs	r1, #68	@ 0x44
 800c798:	4620      	mov	r0, r4
 800c79a:	f011 fcee 	bl	801e17a <_ZdlPvj>
      }
 800c79e:	bf00      	nop
 800c7a0:	370c      	adds	r7, #12
 800c7a2:	46bd      	mov	sp, r7
 800c7a4:	bd90      	pop	{r4, r7, pc}

0800c7a6 <_ZNKSt10unique_ptrI3PinSt14default_deleteIS0_EE3getEv>:
      get() const noexcept
 800c7a6:	b580      	push	{r7, lr}
 800c7a8:	b082      	sub	sp, #8
 800c7aa:	af00      	add	r7, sp, #0
 800c7ac:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	4618      	mov	r0, r3
 800c7b2:	f000 f930 	bl	800ca16 <_ZNKSt15__uniq_ptr_implI3PinSt14default_deleteIS0_EE6_M_ptrEv>
 800c7b6:	4603      	mov	r3, r0
 800c7b8:	4618      	mov	r0, r3
 800c7ba:	3708      	adds	r7, #8
 800c7bc:	46bd      	mov	sp, r7
 800c7be:	bd80      	pop	{r7, pc}

0800c7c0 <_ZN11ArduinoJson8V730HB226detail7forwardIRA4_KcEEOT_RNS1_16remove_referenceIS6_E4typeE>:
T&& forward(remove_reference_t<T>& t) noexcept {
 800c7c0:	b480      	push	{r7}
 800c7c2:	b083      	sub	sp, #12
 800c7c4:	af00      	add	r7, sp, #0
 800c7c6:	6078      	str	r0, [r7, #4]
  return static_cast<T&&>(t);
 800c7c8:	687b      	ldr	r3, [r7, #4]
}
 800c7ca:	4618      	mov	r0, r3
 800c7cc:	370c      	adds	r7, #12
 800c7ce:	46bd      	mov	sp, r7
 800c7d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7d4:	4770      	bx	lr

0800c7d6 <_ZN11ArduinoJson8V730HB226detail13StringAdapterIRA4_KcvE5adaptES5_>:
  static AdaptedString adapt(const char (&p)[N]) {
 800c7d6:	b580      	push	{r7, lr}
 800c7d8:	b082      	sub	sp, #8
 800c7da:	af00      	add	r7, sp, #0
 800c7dc:	6078      	str	r0, [r7, #4]
 800c7de:	6039      	str	r1, [r7, #0]
    return RamString(p, N - 1, true);
 800c7e0:	2301      	movs	r3, #1
 800c7e2:	2203      	movs	r2, #3
 800c7e4:	6839      	ldr	r1, [r7, #0]
 800c7e6:	6878      	ldr	r0, [r7, #4]
 800c7e8:	f7f5 ff74 	bl	80026d4 <_ZN11ArduinoJson8V730HB226detail9RamStringC1EPKcjb>
  }
 800c7ec:	6878      	ldr	r0, [r7, #4]
 800c7ee:	3708      	adds	r7, #8
 800c7f0:	46bd      	mov	sp, r7
 800c7f2:	bd80      	pop	{r7, pc}

0800c7f4 <_ZN11ArduinoJson8V730HB229ConverterIivE8fromJsonENS0_16JsonVariantConstE>:
    auto resources = getResourceManager(dst);
    data->clear(resources);
    return data->setInteger(src, resources);
  }

  static T fromJson(JsonVariantConst src) {
 800c7f4:	b580      	push	{r7, lr}
 800c7f6:	b084      	sub	sp, #16
 800c7f8:	af00      	add	r7, sp, #0
 800c7fa:	463b      	mov	r3, r7
 800c7fc:	e883 0003 	stmia.w	r3, {r0, r1}
    ARDUINOJSON_ASSERT_INTEGER_TYPE_IS_SUPPORTED(T);
    auto data = getData(src);
 800c800:	463b      	mov	r3, r7
 800c802:	4618      	mov	r0, r3
 800c804:	f7f8 f8ac 	bl	8004960 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney7getDataINS0_16JsonVariantConstEEEDTcldtfp_7getDataEERT_>
 800c808:	60f8      	str	r0, [r7, #12]
    auto resources = getResourceManager(src);
 800c80a:	463b      	mov	r3, r7
 800c80c:	4618      	mov	r0, r3
 800c80e:	f7f8 f8b3 	bl	8004978 <_ZN11ArduinoJson8V730HB226detail15VariantAttorney18getResourceManagerINS0_16JsonVariantConstEEEDTcldtfp_18getResourceManagerEERT_>
 800c812:	60b8      	str	r0, [r7, #8]
    return data ? data->template asIntegral<T>(resources) : T();
 800c814:	68fb      	ldr	r3, [r7, #12]
 800c816:	2b00      	cmp	r3, #0
 800c818:	d005      	beq.n	800c826 <_ZN11ArduinoJson8V730HB229ConverterIivE8fromJsonENS0_16JsonVariantConstE+0x32>
 800c81a:	68b9      	ldr	r1, [r7, #8]
 800c81c:	68f8      	ldr	r0, [r7, #12]
 800c81e:	f000 f909 	bl	800ca34 <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralIiEET_PKNS1_15ResourceManagerE>
 800c822:	4603      	mov	r3, r0
 800c824:	e000      	b.n	800c828 <_ZN11ArduinoJson8V730HB229ConverterIivE8fromJsonENS0_16JsonVariantConstE+0x34>
 800c826:	2300      	movs	r3, #0
  }
 800c828:	4618      	mov	r0, r3
 800c82a:	3710      	adds	r7, #16
 800c82c:	46bd      	mov	sp, r7
 800c82e:	bd80      	pop	{r7, pc}

0800c830 <_ZNSt15__uniq_ptr_implI5BlinkSt14default_deleteIS0_EEC1EPS0_>:
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
 800c830:	b590      	push	{r4, r7, lr}
 800c832:	b083      	sub	sp, #12
 800c834:	af00      	add	r7, sp, #0
 800c836:	6078      	str	r0, [r7, #4]
 800c838:	6039      	str	r1, [r7, #0]
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	4618      	mov	r0, r3
 800c83e:	f000 f98b 	bl	800cb58 <_ZNSt5tupleIJP5BlinkSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>
 800c842:	683c      	ldr	r4, [r7, #0]
 800c844:	6878      	ldr	r0, [r7, #4]
 800c846:	f7ff fe9e 	bl	800c586 <_ZNSt15__uniq_ptr_implI5BlinkSt14default_deleteIS0_EE6_M_ptrEv>
 800c84a:	4603      	mov	r3, r0
 800c84c:	601c      	str	r4, [r3, #0]
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	4618      	mov	r0, r3
 800c852:	370c      	adds	r7, #12
 800c854:	46bd      	mov	sp, r7
 800c856:	bd90      	pop	{r4, r7, pc}

0800c858 <_ZSt3getILj0EJP5BlinkSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 800c858:	b580      	push	{r7, lr}
 800c85a:	b082      	sub	sp, #8
 800c85c:	af00      	add	r7, sp, #0
 800c85e:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	4618      	mov	r0, r3
 800c864:	f000 f985 	bl	800cb72 <_ZSt12__get_helperILj0EP5BlinkJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 800c868:	4603      	mov	r3, r0
 800c86a:	4618      	mov	r0, r3
 800c86c:	3708      	adds	r7, #8
 800c86e:	46bd      	mov	sp, r7
 800c870:	bd80      	pop	{r7, pc}

0800c872 <_ZNSt15__uniq_ptr_implI5BlinkSt14default_deleteIS0_EE10_M_deleterEv>:
      _Dp&       _M_deleter() noexcept { return std::get<1>(_M_t); }
 800c872:	b580      	push	{r7, lr}
 800c874:	b082      	sub	sp, #8
 800c876:	af00      	add	r7, sp, #0
 800c878:	6078      	str	r0, [r7, #4]
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	4618      	mov	r0, r3
 800c87e:	f000 f984 	bl	800cb8a <_ZSt3getILj1EJP5BlinkSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 800c882:	4603      	mov	r3, r0
 800c884:	4618      	mov	r0, r3
 800c886:	3708      	adds	r7, #8
 800c888:	46bd      	mov	sp, r7
 800c88a:	bd80      	pop	{r7, pc}

0800c88c <_ZNKSt10unique_ptrI5BlinkSt14default_deleteIS0_EE3getEv>:
      get() const noexcept
 800c88c:	b580      	push	{r7, lr}
 800c88e:	b082      	sub	sp, #8
 800c890:	af00      	add	r7, sp, #0
 800c892:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	4618      	mov	r0, r3
 800c898:	f000 f983 	bl	800cba2 <_ZNKSt15__uniq_ptr_implI5BlinkSt14default_deleteIS0_EE6_M_ptrEv>
 800c89c:	4603      	mov	r3, r0
 800c89e:	4618      	mov	r0, r3
 800c8a0:	3708      	adds	r7, #8
 800c8a2:	46bd      	mov	sp, r7
 800c8a4:	bd80      	pop	{r7, pc}

0800c8a6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>:
      constexpr __shared_count() noexcept : _M_pi(0)
 800c8a6:	b480      	push	{r7}
 800c8a8:	b083      	sub	sp, #12
 800c8aa:	af00      	add	r7, sp, #0
 800c8ac:	6078      	str	r0, [r7, #4]
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	2200      	movs	r2, #0
 800c8b2:	601a      	str	r2, [r3, #0]
      { }
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	4618      	mov	r0, r3
 800c8b8:	370c      	adds	r7, #12
 800c8ba:	46bd      	mov	sp, r7
 800c8bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8c0:	4770      	bx	lr

0800c8c2 <_ZSt12__to_addressI5BlinkEPT_S2_>:
  template<typename _Ptr, typename _Tp>
    using __ptr_rebind = typename pointer_traits<_Ptr>::template rebind<_Tp>;

  template<typename _Tp>
    constexpr _Tp*
    __to_address(_Tp* __ptr) noexcept
 800c8c2:	b480      	push	{r7}
 800c8c4:	b083      	sub	sp, #12
 800c8c6:	af00      	add	r7, sp, #0
 800c8c8:	6078      	str	r0, [r7, #4]
    {
      static_assert(!std::is_function<_Tp>::value, "not a function pointer");
      return __ptr;
 800c8ca:	687b      	ldr	r3, [r7, #4]
    }
 800c8cc:	4618      	mov	r0, r3
 800c8ce:	370c      	adds	r7, #12
 800c8d0:	46bd      	mov	sp, r7
 800c8d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8d6:	4770      	bx	lr

0800c8d8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1I5BlinkSt14default_deleteIS4_EEEOSt10unique_ptrIT_T0_E>:
	__shared_count(std::unique_ptr<_Tp, _Del>&& __r) : _M_pi(0)
 800c8d8:	b580      	push	{r7, lr}
 800c8da:	b086      	sub	sp, #24
 800c8dc:	af00      	add	r7, sp, #0
 800c8de:	6078      	str	r0, [r7, #4]
 800c8e0:	6039      	str	r1, [r7, #0]
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	2200      	movs	r2, #0
 800c8e6:	601a      	str	r2, [r3, #0]
	  if (__r.get() == nullptr)
 800c8e8:	6838      	ldr	r0, [r7, #0]
 800c8ea:	f7ff ffcf 	bl	800c88c <_ZNKSt10unique_ptrI5BlinkSt14default_deleteIS0_EE3getEv>
 800c8ee:	4603      	mov	r3, r0
 800c8f0:	2b00      	cmp	r3, #0
 800c8f2:	bf0c      	ite	eq
 800c8f4:	2301      	moveq	r3, #1
 800c8f6:	2300      	movne	r3, #0
 800c8f8:	b2db      	uxtb	r3, r3
 800c8fa:	2b00      	cmp	r3, #0
 800c8fc:	d128      	bne.n	800c950 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1I5BlinkSt14default_deleteIS4_EEEOSt10unique_ptrIT_T0_E+0x78>
	  _Alloc __a;
 800c8fe:	f107 030c 	add.w	r3, r7, #12
 800c902:	4618      	mov	r0, r3
 800c904:	f000 f95b 	bl	800cbbe <_ZNSaISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEC1Ev>
	  _Sp_cd_type* __mem = _Alloc_traits::allocate(__a, 1);
 800c908:	f107 030c 	add.w	r3, r7, #12
 800c90c:	2101      	movs	r1, #1
 800c90e:	4618      	mov	r0, r3
 800c910:	f000 f96d 	bl	800cbee <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEE8allocateERS9_j>
 800c914:	6178      	str	r0, [r7, #20]
	  _Alloc_traits::construct(__a, __mem, __r.release(),
 800c916:	6838      	ldr	r0, [r7, #0]
 800c918:	f000 f978 	bl	800cc0c <_ZNSt10unique_ptrI5BlinkSt14default_deleteIS0_EE7releaseEv>
 800c91c:	4603      	mov	r3, r0
 800c91e:	613b      	str	r3, [r7, #16]
				   std::forward<_Del>(__r.get_deleter()));
 800c920:	6838      	ldr	r0, [r7, #0]
 800c922:	f7ff fe3d 	bl	800c5a0 <_ZNSt10unique_ptrI5BlinkSt14default_deleteIS0_EE11get_deleterEv>
 800c926:	4603      	mov	r3, r0
	  _Alloc_traits::construct(__a, __mem, __r.release(),
 800c928:	4618      	mov	r0, r3
 800c92a:	f000 f97c 	bl	800cc26 <_ZSt7forwardISt14default_deleteI5BlinkEEOT_RNSt16remove_referenceIS3_E4typeE>
 800c92e:	4603      	mov	r3, r0
 800c930:	f107 0210 	add.w	r2, r7, #16
 800c934:	f107 000c 	add.w	r0, r7, #12
 800c938:	6979      	ldr	r1, [r7, #20]
 800c93a:	f000 f97f 	bl	800cc3c <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEE9constructIS8_JS2_S4_EEEvRS9_PT_DpOT0_>
	  _M_pi = __mem;
 800c93e:	687b      	ldr	r3, [r7, #4]
 800c940:	697a      	ldr	r2, [r7, #20]
 800c942:	601a      	str	r2, [r3, #0]
	}
 800c944:	f107 030c 	add.w	r3, r7, #12
 800c948:	4618      	mov	r0, r3
 800c94a:	f000 f944 	bl	800cbd6 <_ZNSaISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>
 800c94e:	e000      	b.n	800c952 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1I5BlinkSt14default_deleteIS4_EEEOSt10unique_ptrIT_T0_E+0x7a>
	    return;
 800c950:	bf00      	nop
	}
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	4618      	mov	r0, r3
 800c956:	3718      	adds	r7, #24
 800c958:	46bd      	mov	sp, r7
 800c95a:	bd80      	pop	{r7, pc}

0800c95c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_>:
      operator=(const __shared_count& __r) noexcept
 800c95c:	b580      	push	{r7, lr}
 800c95e:	b084      	sub	sp, #16
 800c960:	af00      	add	r7, sp, #0
 800c962:	6078      	str	r0, [r7, #4]
 800c964:	6039      	str	r1, [r7, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 800c966:	683b      	ldr	r3, [r7, #0]
 800c968:	681b      	ldr	r3, [r3, #0]
 800c96a:	60fb      	str	r3, [r7, #12]
	if (__tmp != _M_pi)
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	681b      	ldr	r3, [r3, #0]
 800c970:	68fa      	ldr	r2, [r7, #12]
 800c972:	429a      	cmp	r2, r3
 800c974:	d011      	beq.n	800c99a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_+0x3e>
	    if (__tmp != nullptr)
 800c976:	68fb      	ldr	r3, [r7, #12]
 800c978:	2b00      	cmp	r3, #0
 800c97a:	d002      	beq.n	800c982 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_+0x26>
	      __tmp->_M_add_ref_copy();
 800c97c:	68f8      	ldr	r0, [r7, #12]
 800c97e:	f7fc f941 	bl	8008c04 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE15_M_add_ref_copyEv>
	    if (_M_pi != nullptr)
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	681b      	ldr	r3, [r3, #0]
 800c986:	2b00      	cmp	r3, #0
 800c988:	d004      	beq.n	800c994 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_+0x38>
	      _M_pi->_M_release();
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	681b      	ldr	r3, [r3, #0]
 800c98e:	4618      	mov	r0, r3
 800c990:	f7fc f947 	bl	8008c22 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
	    _M_pi = __tmp;
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	68fa      	ldr	r2, [r7, #12]
 800c998:	601a      	str	r2, [r3, #0]
	return *this;
 800c99a:	687b      	ldr	r3, [r7, #4]
      }
 800c99c:	4618      	mov	r0, r3
 800c99e:	3710      	adds	r7, #16
 800c9a0:	46bd      	mov	sp, r7
 800c9a2:	bd80      	pop	{r7, pc}

0800c9a4 <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withI5BlinkS5_EENSt9enable_ifIXntsrNS3_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>:
	    __base->_M_weak_assign(const_cast<_Yp2*>(__p), _M_refcount);
	}

      template<typename _Yp, typename _Yp2 = typename remove_cv<_Yp>::type>
	typename enable_if<!__has_esft_base<_Yp2>::value>::type
	_M_enable_shared_from_this_with(_Yp*) noexcept
 800c9a4:	b480      	push	{r7}
 800c9a6:	b083      	sub	sp, #12
 800c9a8:	af00      	add	r7, sp, #0
 800c9aa:	6078      	str	r0, [r7, #4]
 800c9ac:	6039      	str	r1, [r7, #0]
	{ }
 800c9ae:	bf00      	nop
 800c9b0:	370c      	adds	r7, #12
 800c9b2:	46bd      	mov	sp, r7
 800c9b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9b8:	4770      	bx	lr

0800c9ba <_ZNSt15__uniq_ptr_implI3PinSt14default_deleteIS0_EEC1EPS0_>:
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
 800c9ba:	b590      	push	{r4, r7, lr}
 800c9bc:	b083      	sub	sp, #12
 800c9be:	af00      	add	r7, sp, #0
 800c9c0:	6078      	str	r0, [r7, #4]
 800c9c2:	6039      	str	r1, [r7, #0]
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	4618      	mov	r0, r3
 800c9c8:	f000 f950 	bl	800cc6c <_ZNSt5tupleIJP3PinSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>
 800c9cc:	683c      	ldr	r4, [r7, #0]
 800c9ce:	6878      	ldr	r0, [r7, #4]
 800c9d0:	f7ff fea4 	bl	800c71c <_ZNSt15__uniq_ptr_implI3PinSt14default_deleteIS0_EE6_M_ptrEv>
 800c9d4:	4603      	mov	r3, r0
 800c9d6:	601c      	str	r4, [r3, #0]
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	4618      	mov	r0, r3
 800c9dc:	370c      	adds	r7, #12
 800c9de:	46bd      	mov	sp, r7
 800c9e0:	bd90      	pop	{r4, r7, pc}

0800c9e2 <_ZSt3getILj0EJP3PinSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 800c9e2:	b580      	push	{r7, lr}
 800c9e4:	b082      	sub	sp, #8
 800c9e6:	af00      	add	r7, sp, #0
 800c9e8:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	4618      	mov	r0, r3
 800c9ee:	f000 f94a 	bl	800cc86 <_ZSt12__get_helperILj0EP3PinJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 800c9f2:	4603      	mov	r3, r0
 800c9f4:	4618      	mov	r0, r3
 800c9f6:	3708      	adds	r7, #8
 800c9f8:	46bd      	mov	sp, r7
 800c9fa:	bd80      	pop	{r7, pc}

0800c9fc <_ZNSt15__uniq_ptr_implI3PinSt14default_deleteIS0_EE10_M_deleterEv>:
      _Dp&       _M_deleter() noexcept { return std::get<1>(_M_t); }
 800c9fc:	b580      	push	{r7, lr}
 800c9fe:	b082      	sub	sp, #8
 800ca00:	af00      	add	r7, sp, #0
 800ca02:	6078      	str	r0, [r7, #4]
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	4618      	mov	r0, r3
 800ca08:	f000 f949 	bl	800cc9e <_ZSt3getILj1EJP3PinSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 800ca0c:	4603      	mov	r3, r0
 800ca0e:	4618      	mov	r0, r3
 800ca10:	3708      	adds	r7, #8
 800ca12:	46bd      	mov	sp, r7
 800ca14:	bd80      	pop	{r7, pc}

0800ca16 <_ZNKSt15__uniq_ptr_implI3PinSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer    _M_ptr() const noexcept { return std::get<0>(_M_t); }
 800ca16:	b580      	push	{r7, lr}
 800ca18:	b082      	sub	sp, #8
 800ca1a:	af00      	add	r7, sp, #0
 800ca1c:	6078      	str	r0, [r7, #4]
 800ca1e:	687b      	ldr	r3, [r7, #4]
 800ca20:	4618      	mov	r0, r3
 800ca22:	f000 f948 	bl	800ccb6 <_ZSt3getILj0EJP3PinSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>
 800ca26:	4603      	mov	r3, r0
 800ca28:	681b      	ldr	r3, [r3, #0]
 800ca2a:	4618      	mov	r0, r3
 800ca2c:	3708      	adds	r7, #8
 800ca2e:	46bd      	mov	sp, r7
 800ca30:	bd80      	pop	{r7, pc}
	...

0800ca34 <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralIiEET_PKNS1_15ResourceManagerE>:
  T asIntegral(const ResourceManager* resources) const {
 800ca34:	b580      	push	{r7, lr}
 800ca36:	b084      	sub	sp, #16
 800ca38:	af00      	add	r7, sp, #0
 800ca3a:	6078      	str	r0, [r7, #4]
 800ca3c:	6039      	str	r1, [r7, #0]
    auto extension = getExtension(resources);
 800ca3e:	6839      	ldr	r1, [r7, #0]
 800ca40:	6878      	ldr	r0, [r7, #4]
 800ca42:	f7f6 ffa3 	bl	800398c <_ZNK11ArduinoJson8V730HB226detail11VariantData12getExtensionEPKNS1_15ResourceManagerE>
 800ca46:	60f8      	str	r0, [r7, #12]
    switch (type_) {
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	791b      	ldrb	r3, [r3, #4]
 800ca4c:	3b04      	subs	r3, #4
 800ca4e:	2b1a      	cmp	r3, #26
 800ca50:	d87c      	bhi.n	800cb4c <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralIiEET_PKNS1_15ResourceManagerE+0x118>
 800ca52:	a201      	add	r2, pc, #4	@ (adr r2, 800ca58 <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralIiEET_PKNS1_15ResourceManagerE+0x24>)
 800ca54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca58:	0800cb0b 	.word	0x0800cb0b
 800ca5c:	0800cb19 	.word	0x0800cb19
 800ca60:	0800cac5 	.word	0x0800cac5
 800ca64:	0800cb4d 	.word	0x0800cb4d
 800ca68:	0800cb4d 	.word	0x0800cb4d
 800ca6c:	0800cb4d 	.word	0x0800cb4d
 800ca70:	0800cacb 	.word	0x0800cacb
 800ca74:	0800cb4d 	.word	0x0800cb4d
 800ca78:	0800cad9 	.word	0x0800cad9
 800ca7c:	0800cb4d 	.word	0x0800cb4d
 800ca80:	0800cb29 	.word	0x0800cb29
 800ca84:	0800cb4d 	.word	0x0800cb4d
 800ca88:	0800cb4d 	.word	0x0800cb4d
 800ca8c:	0800cb4d 	.word	0x0800cb4d
 800ca90:	0800cb4d 	.word	0x0800cb4d
 800ca94:	0800cb4d 	.word	0x0800cb4d
 800ca98:	0800cb4d 	.word	0x0800cb4d
 800ca9c:	0800cb4d 	.word	0x0800cb4d
 800caa0:	0800cb4d 	.word	0x0800cb4d
 800caa4:	0800cb4d 	.word	0x0800cb4d
 800caa8:	0800cb4d 	.word	0x0800cb4d
 800caac:	0800cb4d 	.word	0x0800cb4d
 800cab0:	0800cae7 	.word	0x0800cae7
 800cab4:	0800cb4d 	.word	0x0800cb4d
 800cab8:	0800caf9 	.word	0x0800caf9
 800cabc:	0800cb4d 	.word	0x0800cb4d
 800cac0:	0800cb3b 	.word	0x0800cb3b
        return content_.asBoolean;
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	781b      	ldrb	r3, [r3, #0]
 800cac8:	e041      	b.n	800cb4e <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralIiEET_PKNS1_15ResourceManagerE+0x11a>
        return convertNumber<T>(content_.asUint32);
 800caca:	687b      	ldr	r3, [r7, #4]
 800cacc:	681b      	ldr	r3, [r3, #0]
 800cace:	4618      	mov	r0, r3
 800cad0:	f000 f8fe 	bl	800ccd0 <_ZN11ArduinoJson8V730HB226detail13convertNumberIimEET_T0_>
 800cad4:	4603      	mov	r3, r0
 800cad6:	e03a      	b.n	800cb4e <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralIiEET_PKNS1_15ResourceManagerE+0x11a>
        return convertNumber<T>(content_.asInt32);
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	681b      	ldr	r3, [r3, #0]
 800cadc:	4618      	mov	r0, r3
 800cade:	f000 f908 	bl	800ccf2 <_ZN11ArduinoJson8V730HB226detail13convertNumberIilEET_T0_>
 800cae2:	4603      	mov	r3, r0
 800cae4:	e033      	b.n	800cb4e <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralIiEET_PKNS1_15ResourceManagerE+0x11a>
        return convertNumber<T>(extension->asUint64);
 800cae6:	68fb      	ldr	r3, [r7, #12]
 800cae8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800caec:	4610      	mov	r0, r2
 800caee:	4619      	mov	r1, r3
 800caf0:	f000 f910 	bl	800cd14 <_ZN11ArduinoJson8V730HB226detail13convertNumberIiyEET_T0_>
 800caf4:	4603      	mov	r3, r0
 800caf6:	e02a      	b.n	800cb4e <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralIiEET_PKNS1_15ResourceManagerE+0x11a>
        return convertNumber<T>(extension->asInt64);
 800caf8:	68fb      	ldr	r3, [r7, #12]
 800cafa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cafe:	4610      	mov	r0, r2
 800cb00:	4619      	mov	r1, r3
 800cb02:	f000 f91a 	bl	800cd3a <_ZN11ArduinoJson8V730HB226detail13convertNumberIixEET_T0_>
 800cb06:	4603      	mov	r3, r0
 800cb08:	e021      	b.n	800cb4e <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralIiEET_PKNS1_15ResourceManagerE+0x11a>
        return parseNumber<T>(content_.asLinkedString);
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	681b      	ldr	r3, [r3, #0]
 800cb0e:	4618      	mov	r0, r3
 800cb10:	f000 f926 	bl	800cd60 <_ZN11ArduinoJson8V730HB226detail11parseNumberIiEET_PKc>
 800cb14:	4603      	mov	r3, r0
 800cb16:	e01a      	b.n	800cb4e <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralIiEET_PKNS1_15ResourceManagerE+0x11a>
        return parseNumber<T>(content_.asOwnedString->data);
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	681b      	ldr	r3, [r3, #0]
 800cb1c:	3308      	adds	r3, #8
 800cb1e:	4618      	mov	r0, r3
 800cb20:	f000 f91e 	bl	800cd60 <_ZN11ArduinoJson8V730HB226detail11parseNumberIiEET_PKc>
 800cb24:	4603      	mov	r3, r0
 800cb26:	e012      	b.n	800cb4e <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralIiEET_PKNS1_15ResourceManagerE+0x11a>
        return convertNumber<T>(content_.asFloat);
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	edd3 7a00 	vldr	s15, [r3]
 800cb2e:	eeb0 0a67 	vmov.f32	s0, s15
 800cb32:	f000 f929 	bl	800cd88 <_ZN11ArduinoJson8V730HB226detail13convertNumberIifEET_T0_>
 800cb36:	4603      	mov	r3, r0
 800cb38:	e009      	b.n	800cb4e <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralIiEET_PKNS1_15ResourceManagerE+0x11a>
        return convertNumber<T>(extension->asDouble);
 800cb3a:	68fb      	ldr	r3, [r7, #12]
 800cb3c:	ed93 7b00 	vldr	d7, [r3]
 800cb40:	eeb0 0b47 	vmov.f64	d0, d7
 800cb44:	f000 f938 	bl	800cdb8 <_ZN11ArduinoJson8V730HB226detail13convertNumberIidEET_T0_>
 800cb48:	4603      	mov	r3, r0
 800cb4a:	e000      	b.n	800cb4e <_ZNK11ArduinoJson8V730HB226detail11VariantData10asIntegralIiEET_PKNS1_15ResourceManagerE+0x11a>
        return 0;
 800cb4c:	2300      	movs	r3, #0
  }
 800cb4e:	4618      	mov	r0, r3
 800cb50:	3710      	adds	r7, #16
 800cb52:	46bd      	mov	sp, r7
 800cb54:	bd80      	pop	{r7, pc}
 800cb56:	bf00      	nop

0800cb58 <_ZNSt5tupleIJP5BlinkSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>:
	tuple()
 800cb58:	b580      	push	{r7, lr}
 800cb5a:	b082      	sub	sp, #8
 800cb5c:	af00      	add	r7, sp, #0
 800cb5e:	6078      	str	r0, [r7, #4]
	: _Inherited() { }
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	4618      	mov	r0, r3
 800cb64:	f000 f940 	bl	800cde8 <_ZNSt11_Tuple_implILj0EJP5BlinkSt14default_deleteIS0_EEEC1Ev>
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	4618      	mov	r0, r3
 800cb6c:	3708      	adds	r7, #8
 800cb6e:	46bd      	mov	sp, r7
 800cb70:	bd80      	pop	{r7, pc}

0800cb72 <_ZSt12__get_helperILj0EP5BlinkJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800cb72:	b580      	push	{r7, lr}
 800cb74:	b082      	sub	sp, #8
 800cb76:	af00      	add	r7, sp, #0
 800cb78:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800cb7a:	6878      	ldr	r0, [r7, #4]
 800cb7c:	f000 f944 	bl	800ce08 <_ZNSt11_Tuple_implILj0EJP5BlinkSt14default_deleteIS0_EEE7_M_headERS4_>
 800cb80:	4603      	mov	r3, r0
 800cb82:	4618      	mov	r0, r3
 800cb84:	3708      	adds	r7, #8
 800cb86:	46bd      	mov	sp, r7
 800cb88:	bd80      	pop	{r7, pc}

0800cb8a <_ZSt3getILj1EJP5BlinkSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 800cb8a:	b580      	push	{r7, lr}
 800cb8c:	b082      	sub	sp, #8
 800cb8e:	af00      	add	r7, sp, #0
 800cb90:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800cb92:	6878      	ldr	r0, [r7, #4]
 800cb94:	f000 f945 	bl	800ce22 <_ZSt12__get_helperILj1ESt14default_deleteI5BlinkEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>
 800cb98:	4603      	mov	r3, r0
 800cb9a:	4618      	mov	r0, r3
 800cb9c:	3708      	adds	r7, #8
 800cb9e:	46bd      	mov	sp, r7
 800cba0:	bd80      	pop	{r7, pc}

0800cba2 <_ZNKSt15__uniq_ptr_implI5BlinkSt14default_deleteIS0_EE6_M_ptrEv>:
 800cba2:	b580      	push	{r7, lr}
 800cba4:	b082      	sub	sp, #8
 800cba6:	af00      	add	r7, sp, #0
 800cba8:	6078      	str	r0, [r7, #4]
 800cbaa:	687b      	ldr	r3, [r7, #4]
 800cbac:	4618      	mov	r0, r3
 800cbae:	f000 f944 	bl	800ce3a <_ZSt3getILj0EJP5BlinkSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>
 800cbb2:	4603      	mov	r3, r0
 800cbb4:	681b      	ldr	r3, [r3, #0]
 800cbb6:	4618      	mov	r0, r3
 800cbb8:	3708      	adds	r7, #8
 800cbba:	46bd      	mov	sp, r7
 800cbbc:	bd80      	pop	{r7, pc}

0800cbbe <_ZNSaISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 800cbbe:	b580      	push	{r7, lr}
 800cbc0:	b082      	sub	sp, #8
 800cbc2:	af00      	add	r7, sp, #0
 800cbc4:	6078      	str	r0, [r7, #4]
 800cbc6:	6878      	ldr	r0, [r7, #4]
 800cbc8:	f000 f944 	bl	800ce54 <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEC1Ev>
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	4618      	mov	r0, r3
 800cbd0:	3708      	adds	r7, #8
 800cbd2:	46bd      	mov	sp, r7
 800cbd4:	bd80      	pop	{r7, pc}

0800cbd6 <_ZNSaISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 800cbd6:	b580      	push	{r7, lr}
 800cbd8:	b082      	sub	sp, #8
 800cbda:	af00      	add	r7, sp, #0
 800cbdc:	6078      	str	r0, [r7, #4]
 800cbde:	6878      	ldr	r0, [r7, #4]
 800cbe0:	f000 f943 	bl	800ce6a <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	4618      	mov	r0, r3
 800cbe8:	3708      	adds	r7, #8
 800cbea:	46bd      	mov	sp, r7
 800cbec:	bd80      	pop	{r7, pc}

0800cbee <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEE8allocateERS9_j>:
      allocate(allocator_type& __a, size_type __n)
 800cbee:	b580      	push	{r7, lr}
 800cbf0:	b082      	sub	sp, #8
 800cbf2:	af00      	add	r7, sp, #0
 800cbf4:	6078      	str	r0, [r7, #4]
 800cbf6:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 800cbf8:	2200      	movs	r2, #0
 800cbfa:	6839      	ldr	r1, [r7, #0]
 800cbfc:	6878      	ldr	r0, [r7, #4]
 800cbfe:	f000 f93f 	bl	800ce80 <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE8allocateEjPKv>
 800cc02:	4603      	mov	r3, r0
 800cc04:	4618      	mov	r0, r3
 800cc06:	3708      	adds	r7, #8
 800cc08:	46bd      	mov	sp, r7
 800cc0a:	bd80      	pop	{r7, pc}

0800cc0c <_ZNSt10unique_ptrI5BlinkSt14default_deleteIS0_EE7releaseEv>:
      release() noexcept
 800cc0c:	b580      	push	{r7, lr}
 800cc0e:	b082      	sub	sp, #8
 800cc10:	af00      	add	r7, sp, #0
 800cc12:	6078      	str	r0, [r7, #4]
      { return _M_t.release(); }
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	4618      	mov	r0, r3
 800cc18:	f000 f95c 	bl	800ced4 <_ZNSt15__uniq_ptr_implI5BlinkSt14default_deleteIS0_EE7releaseEv>
 800cc1c:	4603      	mov	r3, r0
 800cc1e:	4618      	mov	r0, r3
 800cc20:	3708      	adds	r7, #8
 800cc22:	46bd      	mov	sp, r7
 800cc24:	bd80      	pop	{r7, pc}

0800cc26 <_ZSt7forwardISt14default_deleteI5BlinkEEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800cc26:	b480      	push	{r7}
 800cc28:	b083      	sub	sp, #12
 800cc2a:	af00      	add	r7, sp, #0
 800cc2c:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800cc2e:	687b      	ldr	r3, [r7, #4]
 800cc30:	4618      	mov	r0, r3
 800cc32:	370c      	adds	r7, #12
 800cc34:	46bd      	mov	sp, r7
 800cc36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc3a:	4770      	bx	lr

0800cc3c <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEE9constructIS8_JS2_S4_EEEvRS9_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 800cc3c:	b590      	push	{r4, r7, lr}
 800cc3e:	b085      	sub	sp, #20
 800cc40:	af00      	add	r7, sp, #0
 800cc42:	60f8      	str	r0, [r7, #12]
 800cc44:	60b9      	str	r1, [r7, #8]
 800cc46:	607a      	str	r2, [r7, #4]
 800cc48:	603b      	str	r3, [r7, #0]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 800cc4a:	6878      	ldr	r0, [r7, #4]
 800cc4c:	f000 f957 	bl	800cefe <_ZSt7forwardIP5BlinkEOT_RNSt16remove_referenceIS2_E4typeE>
 800cc50:	4604      	mov	r4, r0
 800cc52:	6838      	ldr	r0, [r7, #0]
 800cc54:	f7ff ffe7 	bl	800cc26 <_ZSt7forwardISt14default_deleteI5BlinkEEOT_RNSt16remove_referenceIS3_E4typeE>
 800cc58:	4603      	mov	r3, r0
 800cc5a:	4622      	mov	r2, r4
 800cc5c:	68b9      	ldr	r1, [r7, #8]
 800cc5e:	68f8      	ldr	r0, [r7, #12]
 800cc60:	f000 f958 	bl	800cf14 <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE9constructIS8_JS2_S4_EEEvPT_DpOT0_>
	}
 800cc64:	bf00      	nop
 800cc66:	3714      	adds	r7, #20
 800cc68:	46bd      	mov	sp, r7
 800cc6a:	bd90      	pop	{r4, r7, pc}

0800cc6c <_ZNSt5tupleIJP3PinSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>:
	tuple()
 800cc6c:	b580      	push	{r7, lr}
 800cc6e:	b082      	sub	sp, #8
 800cc70:	af00      	add	r7, sp, #0
 800cc72:	6078      	str	r0, [r7, #4]
	: _Inherited() { }
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	4618      	mov	r0, r3
 800cc78:	f000 f96a 	bl	800cf50 <_ZNSt11_Tuple_implILj0EJP3PinSt14default_deleteIS0_EEEC1Ev>
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	4618      	mov	r0, r3
 800cc80:	3708      	adds	r7, #8
 800cc82:	46bd      	mov	sp, r7
 800cc84:	bd80      	pop	{r7, pc}

0800cc86 <_ZSt12__get_helperILj0EP3PinJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800cc86:	b580      	push	{r7, lr}
 800cc88:	b082      	sub	sp, #8
 800cc8a:	af00      	add	r7, sp, #0
 800cc8c:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800cc8e:	6878      	ldr	r0, [r7, #4]
 800cc90:	f000 f96e 	bl	800cf70 <_ZNSt11_Tuple_implILj0EJP3PinSt14default_deleteIS0_EEE7_M_headERS4_>
 800cc94:	4603      	mov	r3, r0
 800cc96:	4618      	mov	r0, r3
 800cc98:	3708      	adds	r7, #8
 800cc9a:	46bd      	mov	sp, r7
 800cc9c:	bd80      	pop	{r7, pc}

0800cc9e <_ZSt3getILj1EJP3PinSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 800cc9e:	b580      	push	{r7, lr}
 800cca0:	b082      	sub	sp, #8
 800cca2:	af00      	add	r7, sp, #0
 800cca4:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800cca6:	6878      	ldr	r0, [r7, #4]
 800cca8:	f000 f96f 	bl	800cf8a <_ZSt12__get_helperILj1ESt14default_deleteI3PinEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>
 800ccac:	4603      	mov	r3, r0
 800ccae:	4618      	mov	r0, r3
 800ccb0:	3708      	adds	r7, #8
 800ccb2:	46bd      	mov	sp, r7
 800ccb4:	bd80      	pop	{r7, pc}

0800ccb6 <_ZSt3getILj0EJP3PinSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>:
    get(const tuple<_Elements...>& __t) noexcept
 800ccb6:	b580      	push	{r7, lr}
 800ccb8:	b082      	sub	sp, #8
 800ccba:	af00      	add	r7, sp, #0
 800ccbc:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800ccbe:	687b      	ldr	r3, [r7, #4]
 800ccc0:	4618      	mov	r0, r3
 800ccc2:	f000 f96e 	bl	800cfa2 <_ZSt12__get_helperILj0EP3PinJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>
 800ccc6:	4603      	mov	r3, r0
 800ccc8:	4618      	mov	r0, r3
 800ccca:	3708      	adds	r7, #8
 800cccc:	46bd      	mov	sp, r7
 800ccce:	bd80      	pop	{r7, pc}

0800ccd0 <_ZN11ArduinoJson8V730HB226detail13convertNumberIimEET_T0_>:
TOut convertNumber(TIn value) {
 800ccd0:	b580      	push	{r7, lr}
 800ccd2:	b082      	sub	sp, #8
 800ccd4:	af00      	add	r7, sp, #0
 800ccd6:	6078      	str	r0, [r7, #4]
  return canConvertNumber<TOut>(value) ? TOut(value) : 0;
 800ccd8:	6878      	ldr	r0, [r7, #4]
 800ccda:	f000 f96e 	bl	800cfba <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIimEENS1_9enable_ifIXaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_11is_unsignedIS5_EE5valuesrNS4_IT_EE5valuelestS9_stS5_EbE4typeES5_>
 800ccde:	4603      	mov	r3, r0
 800cce0:	2b00      	cmp	r3, #0
 800cce2:	d001      	beq.n	800cce8 <_ZN11ArduinoJson8V730HB226detail13convertNumberIimEET_T0_+0x18>
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	e000      	b.n	800ccea <_ZN11ArduinoJson8V730HB226detail13convertNumberIimEET_T0_+0x1a>
 800cce8:	2300      	movs	r3, #0
}
 800ccea:	4618      	mov	r0, r3
 800ccec:	3708      	adds	r7, #8
 800ccee:	46bd      	mov	sp, r7
 800ccf0:	bd80      	pop	{r7, pc}

0800ccf2 <_ZN11ArduinoJson8V730HB226detail13convertNumberIilEET_T0_>:
TOut convertNumber(TIn value) {
 800ccf2:	b580      	push	{r7, lr}
 800ccf4:	b082      	sub	sp, #8
 800ccf6:	af00      	add	r7, sp, #0
 800ccf8:	6078      	str	r0, [r7, #4]
  return canConvertNumber<TOut>(value) ? TOut(value) : 0;
 800ccfa:	6878      	ldr	r0, [r7, #4]
 800ccfc:	f000 f96f 	bl	800cfde <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIilEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS7_IS9_EE5valuelestS5_stS9_EbE4typeES5_>
 800cd00:	4603      	mov	r3, r0
 800cd02:	2b00      	cmp	r3, #0
 800cd04:	d001      	beq.n	800cd0a <_ZN11ArduinoJson8V730HB226detail13convertNumberIilEET_T0_+0x18>
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	e000      	b.n	800cd0c <_ZN11ArduinoJson8V730HB226detail13convertNumberIilEET_T0_+0x1a>
 800cd0a:	2300      	movs	r3, #0
}
 800cd0c:	4618      	mov	r0, r3
 800cd0e:	3708      	adds	r7, #8
 800cd10:	46bd      	mov	sp, r7
 800cd12:	bd80      	pop	{r7, pc}

0800cd14 <_ZN11ArduinoJson8V730HB226detail13convertNumberIiyEET_T0_>:
TOut convertNumber(TIn value) {
 800cd14:	b580      	push	{r7, lr}
 800cd16:	b082      	sub	sp, #8
 800cd18:	af00      	add	r7, sp, #0
 800cd1a:	e9c7 0100 	strd	r0, r1, [r7]
  return canConvertNumber<TOut>(value) ? TOut(value) : 0;
 800cd1e:	e9d7 0100 	ldrd	r0, r1, [r7]
 800cd22:	f000 f967 	bl	800cff4 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIiyEENS1_9enable_ifIXaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_11is_unsignedIS5_EE5valuesrNS4_IT_EE5valuelestS9_stS5_EbE4typeES5_>
 800cd26:	4603      	mov	r3, r0
 800cd28:	2b00      	cmp	r3, #0
 800cd2a:	d001      	beq.n	800cd30 <_ZN11ArduinoJson8V730HB226detail13convertNumberIiyEET_T0_+0x1c>
 800cd2c:	683b      	ldr	r3, [r7, #0]
 800cd2e:	e000      	b.n	800cd32 <_ZN11ArduinoJson8V730HB226detail13convertNumberIiyEET_T0_+0x1e>
 800cd30:	2300      	movs	r3, #0
}
 800cd32:	4618      	mov	r0, r3
 800cd34:	3708      	adds	r7, #8
 800cd36:	46bd      	mov	sp, r7
 800cd38:	bd80      	pop	{r7, pc}

0800cd3a <_ZN11ArduinoJson8V730HB226detail13convertNumberIixEET_T0_>:
TOut convertNumber(TIn value) {
 800cd3a:	b580      	push	{r7, lr}
 800cd3c:	b082      	sub	sp, #8
 800cd3e:	af00      	add	r7, sp, #0
 800cd40:	e9c7 0100 	strd	r0, r1, [r7]
  return canConvertNumber<TOut>(value) ? TOut(value) : 0;
 800cd44:	e9d7 0100 	ldrd	r0, r1, [r7]
 800cd48:	f000 f96c 	bl	800d024 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIixEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS7_IS9_EE5valueltstS9_stS5_EbE4typeES5_>
 800cd4c:	4603      	mov	r3, r0
 800cd4e:	2b00      	cmp	r3, #0
 800cd50:	d001      	beq.n	800cd56 <_ZN11ArduinoJson8V730HB226detail13convertNumberIixEET_T0_+0x1c>
 800cd52:	683b      	ldr	r3, [r7, #0]
 800cd54:	e000      	b.n	800cd58 <_ZN11ArduinoJson8V730HB226detail13convertNumberIixEET_T0_+0x1e>
 800cd56:	2300      	movs	r3, #0
}
 800cd58:	4618      	mov	r0, r3
 800cd5a:	3708      	adds	r7, #8
 800cd5c:	46bd      	mov	sp, r7
 800cd5e:	bd80      	pop	{r7, pc}

0800cd60 <_ZN11ArduinoJson8V730HB226detail11parseNumberIiEET_PKc>:
inline T parseNumber(const char* s) {
 800cd60:	b580      	push	{r7, lr}
 800cd62:	b086      	sub	sp, #24
 800cd64:	af00      	add	r7, sp, #0
 800cd66:	6078      	str	r0, [r7, #4]
  return parseNumber(s).convertTo<T>();
 800cd68:	f107 0308 	add.w	r3, r7, #8
 800cd6c:	6879      	ldr	r1, [r7, #4]
 800cd6e:	4618      	mov	r0, r3
 800cd70:	f7f7 f870 	bl	8003e54 <_ZN11ArduinoJson8V730HB226detail11parseNumberEPKc>
 800cd74:	f107 0308 	add.w	r3, r7, #8
 800cd78:	4618      	mov	r0, r3
 800cd7a:	f000 f979 	bl	800d070 <_ZNK11ArduinoJson8V730HB226detail6Number9convertToIiEET_v>
 800cd7e:	4603      	mov	r3, r0
}
 800cd80:	4618      	mov	r0, r3
 800cd82:	3718      	adds	r7, #24
 800cd84:	46bd      	mov	sp, r7
 800cd86:	bd80      	pop	{r7, pc}

0800cd88 <_ZN11ArduinoJson8V730HB226detail13convertNumberIifEET_T0_>:
TOut convertNumber(TIn value) {
 800cd88:	b580      	push	{r7, lr}
 800cd8a:	b082      	sub	sp, #8
 800cd8c:	af00      	add	r7, sp, #0
 800cd8e:	ed87 0a01 	vstr	s0, [r7, #4]
  return canConvertNumber<TOut>(value) ? TOut(value) : 0;
 800cd92:	ed97 0a01 	vldr	s0, [r7, #4]
 800cd96:	f000 f9b2 	bl	800d0fe <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIifEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valuegestS8_stS5_EbE4typeES5_>
 800cd9a:	4603      	mov	r3, r0
 800cd9c:	2b00      	cmp	r3, #0
 800cd9e:	d006      	beq.n	800cdae <_ZN11ArduinoJson8V730HB226detail13convertNumberIifEET_T0_+0x26>
 800cda0:	edd7 7a01 	vldr	s15, [r7, #4]
 800cda4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800cda8:	ee17 3a90 	vmov	r3, s15
 800cdac:	e000      	b.n	800cdb0 <_ZN11ArduinoJson8V730HB226detail13convertNumberIifEET_T0_+0x28>
 800cdae:	2300      	movs	r3, #0
}
 800cdb0:	4618      	mov	r0, r3
 800cdb2:	3708      	adds	r7, #8
 800cdb4:	46bd      	mov	sp, r7
 800cdb6:	bd80      	pop	{r7, pc}

0800cdb8 <_ZN11ArduinoJson8V730HB226detail13convertNumberIidEET_T0_>:
TOut convertNumber(TIn value) {
 800cdb8:	b580      	push	{r7, lr}
 800cdba:	b082      	sub	sp, #8
 800cdbc:	af00      	add	r7, sp, #0
 800cdbe:	ed87 0b00 	vstr	d0, [r7]
  return canConvertNumber<TOut>(value) ? TOut(value) : 0;
 800cdc2:	ed97 0b00 	vldr	d0, [r7]
 800cdc6:	f000 f9c7 	bl	800d158 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIidEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valueltstS8_stS5_EbE4typeES5_>
 800cdca:	4603      	mov	r3, r0
 800cdcc:	2b00      	cmp	r3, #0
 800cdce:	d006      	beq.n	800cdde <_ZN11ArduinoJson8V730HB226detail13convertNumberIidEET_T0_+0x26>
 800cdd0:	ed97 7b00 	vldr	d7, [r7]
 800cdd4:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800cdd8:	ee17 3a90 	vmov	r3, s15
 800cddc:	e000      	b.n	800cde0 <_ZN11ArduinoJson8V730HB226detail13convertNumberIidEET_T0_+0x28>
 800cdde:	2300      	movs	r3, #0
}
 800cde0:	4618      	mov	r0, r3
 800cde2:	3708      	adds	r7, #8
 800cde4:	46bd      	mov	sp, r7
 800cde6:	bd80      	pop	{r7, pc}

0800cde8 <_ZNSt11_Tuple_implILj0EJP5BlinkSt14default_deleteIS0_EEEC1Ev>:
      constexpr _Tuple_impl()
 800cde8:	b580      	push	{r7, lr}
 800cdea:	b082      	sub	sp, #8
 800cdec:	af00      	add	r7, sp, #0
 800cdee:	6078      	str	r0, [r7, #4]
      : _Inherited(), _Base() { }
 800cdf0:	6878      	ldr	r0, [r7, #4]
 800cdf2:	f000 f9d7 	bl	800d1a4 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI5BlinkEEEC1Ev>
 800cdf6:	687b      	ldr	r3, [r7, #4]
 800cdf8:	4618      	mov	r0, r3
 800cdfa:	f000 f9df 	bl	800d1bc <_ZNSt10_Head_baseILj0EP5BlinkLb0EEC1Ev>
 800cdfe:	687b      	ldr	r3, [r7, #4]
 800ce00:	4618      	mov	r0, r3
 800ce02:	3708      	adds	r7, #8
 800ce04:	46bd      	mov	sp, r7
 800ce06:	bd80      	pop	{r7, pc}

0800ce08 <_ZNSt11_Tuple_implILj0EJP5BlinkSt14default_deleteIS0_EEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800ce08:	b580      	push	{r7, lr}
 800ce0a:	b082      	sub	sp, #8
 800ce0c:	af00      	add	r7, sp, #0
 800ce0e:	6078      	str	r0, [r7, #4]
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	4618      	mov	r0, r3
 800ce14:	f000 f9e0 	bl	800d1d8 <_ZNSt10_Head_baseILj0EP5BlinkLb0EE7_M_headERS2_>
 800ce18:	4603      	mov	r3, r0
 800ce1a:	4618      	mov	r0, r3
 800ce1c:	3708      	adds	r7, #8
 800ce1e:	46bd      	mov	sp, r7
 800ce20:	bd80      	pop	{r7, pc}

0800ce22 <_ZSt12__get_helperILj1ESt14default_deleteI5BlinkEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800ce22:	b580      	push	{r7, lr}
 800ce24:	b082      	sub	sp, #8
 800ce26:	af00      	add	r7, sp, #0
 800ce28:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800ce2a:	6878      	ldr	r0, [r7, #4]
 800ce2c:	f000 f9df 	bl	800d1ee <_ZNSt11_Tuple_implILj1EJSt14default_deleteI5BlinkEEE7_M_headERS3_>
 800ce30:	4603      	mov	r3, r0
 800ce32:	4618      	mov	r0, r3
 800ce34:	3708      	adds	r7, #8
 800ce36:	46bd      	mov	sp, r7
 800ce38:	bd80      	pop	{r7, pc}

0800ce3a <_ZSt3getILj0EJP5BlinkSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>:
    get(const tuple<_Elements...>& __t) noexcept
 800ce3a:	b580      	push	{r7, lr}
 800ce3c:	b082      	sub	sp, #8
 800ce3e:	af00      	add	r7, sp, #0
 800ce40:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	4618      	mov	r0, r3
 800ce46:	f000 f9de 	bl	800d206 <_ZSt12__get_helperILj0EP5BlinkJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>
 800ce4a:	4603      	mov	r3, r0
 800ce4c:	4618      	mov	r0, r3
 800ce4e:	3708      	adds	r7, #8
 800ce50:	46bd      	mov	sp, r7
 800ce52:	bd80      	pop	{r7, pc}

0800ce54 <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEC1Ev>:
      __new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800ce54:	b480      	push	{r7}
 800ce56:	b083      	sub	sp, #12
 800ce58:	af00      	add	r7, sp, #0
 800ce5a:	6078      	str	r0, [r7, #4]
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	4618      	mov	r0, r3
 800ce60:	370c      	adds	r7, #12
 800ce62:	46bd      	mov	sp, r7
 800ce64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce68:	4770      	bx	lr

0800ce6a <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>:
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800ce6a:	b480      	push	{r7}
 800ce6c:	b083      	sub	sp, #12
 800ce6e:	af00      	add	r7, sp, #0
 800ce70:	6078      	str	r0, [r7, #4]
 800ce72:	687b      	ldr	r3, [r7, #4]
 800ce74:	4618      	mov	r0, r3
 800ce76:	370c      	adds	r7, #12
 800ce78:	46bd      	mov	sp, r7
 800ce7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce7e:	4770      	bx	lr

0800ce80 <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 800ce80:	b580      	push	{r7, lr}
 800ce82:	b084      	sub	sp, #16
 800ce84:	af00      	add	r7, sp, #0
 800ce86:	60f8      	str	r0, [r7, #12]
 800ce88:	60b9      	str	r1, [r7, #8]
 800ce8a:	607a      	str	r2, [r7, #4]
	if (__builtin_expect(__n > this->_M_max_size(), false))
 800ce8c:	68f8      	ldr	r0, [r7, #12]
 800ce8e:	f000 f9c6 	bl	800d21e <_ZNKSt15__new_allocatorISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE11_M_max_sizeEv>
 800ce92:	4602      	mov	r2, r0
 800ce94:	68bb      	ldr	r3, [r7, #8]
 800ce96:	4293      	cmp	r3, r2
 800ce98:	bf8c      	ite	hi
 800ce9a:	2301      	movhi	r3, #1
 800ce9c:	2300      	movls	r3, #0
 800ce9e:	b2db      	uxtb	r3, r3
 800cea0:	2b00      	cmp	r3, #0
 800cea2:	bf14      	ite	ne
 800cea4:	2301      	movne	r3, #1
 800cea6:	2300      	moveq	r3, #0
 800cea8:	b2db      	uxtb	r3, r3
 800ceaa:	2b00      	cmp	r3, #0
 800ceac:	d007      	beq.n	800cebe <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE8allocateEjPKv+0x3e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 800ceae:	68bb      	ldr	r3, [r7, #8]
 800ceb0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ceb4:	d301      	bcc.n	800ceba <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE8allocateEjPKv+0x3a>
	      std::__throw_bad_array_new_length();
 800ceb6:	f011 f987 	bl	801e1c8 <_ZSt28__throw_bad_array_new_lengthv>
	    std::__throw_bad_alloc();
 800ceba:	f011 f982 	bl	801e1c2 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 800cebe:	68bb      	ldr	r3, [r7, #8]
 800cec0:	011b      	lsls	r3, r3, #4
 800cec2:	4618      	mov	r0, r3
 800cec4:	f011 f96a 	bl	801e19c <_Znwj>
 800cec8:	4603      	mov	r3, r0
 800ceca:	bf00      	nop
      }
 800cecc:	4618      	mov	r0, r3
 800cece:	3710      	adds	r7, #16
 800ced0:	46bd      	mov	sp, r7
 800ced2:	bd80      	pop	{r7, pc}

0800ced4 <_ZNSt15__uniq_ptr_implI5BlinkSt14default_deleteIS0_EE7releaseEv>:
      pointer release() noexcept
 800ced4:	b580      	push	{r7, lr}
 800ced6:	b084      	sub	sp, #16
 800ced8:	af00      	add	r7, sp, #0
 800ceda:	6078      	str	r0, [r7, #4]
	pointer __p = _M_ptr();
 800cedc:	6878      	ldr	r0, [r7, #4]
 800cede:	f7ff fb52 	bl	800c586 <_ZNSt15__uniq_ptr_implI5BlinkSt14default_deleteIS0_EE6_M_ptrEv>
 800cee2:	4603      	mov	r3, r0
 800cee4:	681b      	ldr	r3, [r3, #0]
 800cee6:	60fb      	str	r3, [r7, #12]
	_M_ptr() = nullptr;
 800cee8:	6878      	ldr	r0, [r7, #4]
 800ceea:	f7ff fb4c 	bl	800c586 <_ZNSt15__uniq_ptr_implI5BlinkSt14default_deleteIS0_EE6_M_ptrEv>
 800ceee:	4603      	mov	r3, r0
 800cef0:	2200      	movs	r2, #0
 800cef2:	601a      	str	r2, [r3, #0]
	return __p;
 800cef4:	68fb      	ldr	r3, [r7, #12]
      }
 800cef6:	4618      	mov	r0, r3
 800cef8:	3710      	adds	r7, #16
 800cefa:	46bd      	mov	sp, r7
 800cefc:	bd80      	pop	{r7, pc}

0800cefe <_ZSt7forwardIP5BlinkEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800cefe:	b480      	push	{r7}
 800cf00:	b083      	sub	sp, #12
 800cf02:	af00      	add	r7, sp, #0
 800cf04:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800cf06:	687b      	ldr	r3, [r7, #4]
 800cf08:	4618      	mov	r0, r3
 800cf0a:	370c      	adds	r7, #12
 800cf0c:	46bd      	mov	sp, r7
 800cf0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf12:	4770      	bx	lr

0800cf14 <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE9constructIS8_JS2_S4_EEEvPT_DpOT0_>:
      { return _M_max_size(); }

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
 800cf14:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cf16:	b085      	sub	sp, #20
 800cf18:	af00      	add	r7, sp, #0
 800cf1a:	60f8      	str	r0, [r7, #12]
 800cf1c:	60b9      	str	r1, [r7, #8]
 800cf1e:	607a      	str	r2, [r7, #4]
 800cf20:	603b      	str	r3, [r7, #0]
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 800cf22:	68bb      	ldr	r3, [r7, #8]
 800cf24:	4619      	mov	r1, r3
 800cf26:	2010      	movs	r0, #16
 800cf28:	f7ff f870 	bl	800c00c <_ZnwjPv>
 800cf2c:	4605      	mov	r5, r0
 800cf2e:	6878      	ldr	r0, [r7, #4]
 800cf30:	f7ff ffe5 	bl	800cefe <_ZSt7forwardIP5BlinkEOT_RNSt16remove_referenceIS2_E4typeE>
 800cf34:	4603      	mov	r3, r0
 800cf36:	681c      	ldr	r4, [r3, #0]
 800cf38:	6838      	ldr	r0, [r7, #0]
 800cf3a:	f7ff fe74 	bl	800cc26 <_ZSt7forwardISt14default_deleteI5BlinkEEOT_RNSt16remove_referenceIS3_E4typeE>
 800cf3e:	4632      	mov	r2, r6
 800cf40:	4621      	mov	r1, r4
 800cf42:	4628      	mov	r0, r5
 800cf44:	f000 f978 	bl	800d238 <_ZNSt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEC1ES1_S3_>
 800cf48:	bf00      	nop
 800cf4a:	3714      	adds	r7, #20
 800cf4c:	46bd      	mov	sp, r7
 800cf4e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800cf50 <_ZNSt11_Tuple_implILj0EJP3PinSt14default_deleteIS0_EEEC1Ev>:
      constexpr _Tuple_impl()
 800cf50:	b580      	push	{r7, lr}
 800cf52:	b082      	sub	sp, #8
 800cf54:	af00      	add	r7, sp, #0
 800cf56:	6078      	str	r0, [r7, #4]
      : _Inherited(), _Base() { }
 800cf58:	6878      	ldr	r0, [r7, #4]
 800cf5a:	f000 f98f 	bl	800d27c <_ZNSt11_Tuple_implILj1EJSt14default_deleteI3PinEEEC1Ev>
 800cf5e:	687b      	ldr	r3, [r7, #4]
 800cf60:	4618      	mov	r0, r3
 800cf62:	f000 f997 	bl	800d294 <_ZNSt10_Head_baseILj0EP3PinLb0EEC1Ev>
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	4618      	mov	r0, r3
 800cf6a:	3708      	adds	r7, #8
 800cf6c:	46bd      	mov	sp, r7
 800cf6e:	bd80      	pop	{r7, pc}

0800cf70 <_ZNSt11_Tuple_implILj0EJP3PinSt14default_deleteIS0_EEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800cf70:	b580      	push	{r7, lr}
 800cf72:	b082      	sub	sp, #8
 800cf74:	af00      	add	r7, sp, #0
 800cf76:	6078      	str	r0, [r7, #4]
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	4618      	mov	r0, r3
 800cf7c:	f000 f998 	bl	800d2b0 <_ZNSt10_Head_baseILj0EP3PinLb0EE7_M_headERS2_>
 800cf80:	4603      	mov	r3, r0
 800cf82:	4618      	mov	r0, r3
 800cf84:	3708      	adds	r7, #8
 800cf86:	46bd      	mov	sp, r7
 800cf88:	bd80      	pop	{r7, pc}

0800cf8a <_ZSt12__get_helperILj1ESt14default_deleteI3PinEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800cf8a:	b580      	push	{r7, lr}
 800cf8c:	b082      	sub	sp, #8
 800cf8e:	af00      	add	r7, sp, #0
 800cf90:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800cf92:	6878      	ldr	r0, [r7, #4]
 800cf94:	f000 f997 	bl	800d2c6 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI3PinEEE7_M_headERS3_>
 800cf98:	4603      	mov	r3, r0
 800cf9a:	4618      	mov	r0, r3
 800cf9c:	3708      	adds	r7, #8
 800cf9e:	46bd      	mov	sp, r7
 800cfa0:	bd80      	pop	{r7, pc}

0800cfa2 <_ZSt12__get_helperILj0EP3PinJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800cfa2:	b580      	push	{r7, lr}
 800cfa4:	b082      	sub	sp, #8
 800cfa6:	af00      	add	r7, sp, #0
 800cfa8:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800cfaa:	6878      	ldr	r0, [r7, #4]
 800cfac:	f000 f997 	bl	800d2de <_ZNSt11_Tuple_implILj0EJP3PinSt14default_deleteIS0_EEE7_M_headERKS4_>
 800cfb0:	4603      	mov	r3, r0
 800cfb2:	4618      	mov	r0, r3
 800cfb4:	3708      	adds	r7, #8
 800cfb6:	46bd      	mov	sp, r7
 800cfb8:	bd80      	pop	{r7, pc}

0800cfba <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIimEENS1_9enable_ifIXaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_11is_unsignedIS5_EE5valuesrNS4_IT_EE5valuelestS9_stS5_EbE4typeES5_>:
canConvertNumber(TIn value) {
 800cfba:	b580      	push	{r7, lr}
 800cfbc:	b082      	sub	sp, #8
 800cfbe:	af00      	add	r7, sp, #0
 800cfc0:	6078      	str	r0, [r7, #4]
  return value <= TIn(numeric_limits<TOut>::highest());
 800cfc2:	f000 f8c1 	bl	800d148 <_ZN11ArduinoJson8V730HB226detail14numeric_limitsIivE7highestEv>
 800cfc6:	4603      	mov	r3, r0
 800cfc8:	461a      	mov	r2, r3
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	4293      	cmp	r3, r2
 800cfce:	bf94      	ite	ls
 800cfd0:	2301      	movls	r3, #1
 800cfd2:	2300      	movhi	r3, #0
 800cfd4:	b2db      	uxtb	r3, r3
}
 800cfd6:	4618      	mov	r0, r3
 800cfd8:	3708      	adds	r7, #8
 800cfda:	46bd      	mov	sp, r7
 800cfdc:	bd80      	pop	{r7, pc}

0800cfde <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIilEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS7_IS9_EE5valuelestS5_stS9_EbE4typeES5_>:
canConvertNumber(TIn) {
 800cfde:	b480      	push	{r7}
 800cfe0:	b083      	sub	sp, #12
 800cfe2:	af00      	add	r7, sp, #0
 800cfe4:	6078      	str	r0, [r7, #4]
  return true;
 800cfe6:	2301      	movs	r3, #1
}
 800cfe8:	4618      	mov	r0, r3
 800cfea:	370c      	adds	r7, #12
 800cfec:	46bd      	mov	sp, r7
 800cfee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cff2:	4770      	bx	lr

0800cff4 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIiyEENS1_9enable_ifIXaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_11is_unsignedIS5_EE5valuesrNS4_IT_EE5valuelestS9_stS5_EbE4typeES5_>:
canConvertNumber(TIn value) {
 800cff4:	b5b0      	push	{r4, r5, r7, lr}
 800cff6:	b082      	sub	sp, #8
 800cff8:	af00      	add	r7, sp, #0
 800cffa:	e9c7 0100 	strd	r0, r1, [r7]
  return value <= TIn(numeric_limits<TOut>::highest());
 800cffe:	f000 f8a3 	bl	800d148 <_ZN11ArduinoJson8V730HB226detail14numeric_limitsIivE7highestEv>
 800d002:	4603      	mov	r3, r0
 800d004:	17da      	asrs	r2, r3, #31
 800d006:	461c      	mov	r4, r3
 800d008:	4615      	mov	r5, r2
 800d00a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d00e:	4294      	cmp	r4, r2
 800d010:	eb75 0303 	sbcs.w	r3, r5, r3
 800d014:	bf2c      	ite	cs
 800d016:	2301      	movcs	r3, #1
 800d018:	2300      	movcc	r3, #0
 800d01a:	b2db      	uxtb	r3, r3
}
 800d01c:	4618      	mov	r0, r3
 800d01e:	3708      	adds	r7, #8
 800d020:	46bd      	mov	sp, r7
 800d022:	bdb0      	pop	{r4, r5, r7, pc}

0800d024 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIixEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS7_IS9_EE5valueltstS9_stS5_EbE4typeES5_>:
canConvertNumber(TIn value) {
 800d024:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800d028:	b082      	sub	sp, #8
 800d02a:	af00      	add	r7, sp, #0
 800d02c:	e9c7 0100 	strd	r0, r1, [r7]
  return value >= TIn(numeric_limits<TOut>::lowest()) &&
 800d030:	f000 f85c 	bl	800d0ec <_ZN11ArduinoJson8V730HB226detail14numeric_limitsIivE6lowestEv>
 800d034:	4603      	mov	r3, r0
 800d036:	17da      	asrs	r2, r3, #31
 800d038:	4698      	mov	r8, r3
 800d03a:	4691      	mov	r9, r2
 800d03c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d040:	4542      	cmp	r2, r8
 800d042:	eb73 0309 	sbcs.w	r3, r3, r9
 800d046:	db0d      	blt.n	800d064 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIixEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS7_IS9_EE5valueltstS9_stS5_EbE4typeES5_+0x40>
         value <= TIn(numeric_limits<TOut>::highest());
 800d048:	f000 f87e 	bl	800d148 <_ZN11ArduinoJson8V730HB226detail14numeric_limitsIivE7highestEv>
 800d04c:	4603      	mov	r3, r0
 800d04e:	17da      	asrs	r2, r3, #31
 800d050:	461c      	mov	r4, r3
 800d052:	4615      	mov	r5, r2
  return value >= TIn(numeric_limits<TOut>::lowest()) &&
 800d054:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d058:	4294      	cmp	r4, r2
 800d05a:	eb75 0303 	sbcs.w	r3, r5, r3
 800d05e:	db01      	blt.n	800d064 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIixEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS7_IS9_EE5valueltstS9_stS5_EbE4typeES5_+0x40>
 800d060:	2301      	movs	r3, #1
 800d062:	e000      	b.n	800d066 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIixEENS1_9enable_ifIXaaaaaaaasrNS1_11is_integralIT0_EE5valuesrNS1_9is_signedIS5_EE5valuesrNS4_IT_EE5valuesrNS7_IS9_EE5valueltstS9_stS5_EbE4typeES5_+0x42>
 800d064:	2300      	movs	r3, #0
}
 800d066:	4618      	mov	r0, r3
 800d068:	3708      	adds	r7, #8
 800d06a:	46bd      	mov	sp, r7
 800d06c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

0800d070 <_ZNK11ArduinoJson8V730HB226detail6Number9convertToIiEET_v>:
  T convertTo() const {
 800d070:	b580      	push	{r7, lr}
 800d072:	b082      	sub	sp, #8
 800d074:	af00      	add	r7, sp, #0
 800d076:	6078      	str	r0, [r7, #4]
    switch (type_) {
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	781b      	ldrb	r3, [r3, #0]
 800d07c:	3b01      	subs	r3, #1
 800d07e:	2b03      	cmp	r3, #3
 800d080:	d82e      	bhi.n	800d0e0 <_ZNK11ArduinoJson8V730HB226detail6Number9convertToIiEET_v+0x70>
 800d082:	a201      	add	r2, pc, #4	@ (adr r2, 800d088 <_ZNK11ArduinoJson8V730HB226detail6Number9convertToIiEET_v+0x18>)
 800d084:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d088:	0800d099 	.word	0x0800d099
 800d08c:	0800d0ab 	.word	0x0800d0ab
 800d090:	0800d0bd 	.word	0x0800d0bd
 800d094:	0800d0cf 	.word	0x0800d0cf
        return convertNumber<T>(value_.asFloat);
 800d098:	687b      	ldr	r3, [r7, #4]
 800d09a:	edd3 7a02 	vldr	s15, [r3, #8]
 800d09e:	eeb0 0a67 	vmov.f32	s0, s15
 800d0a2:	f7ff fe71 	bl	800cd88 <_ZN11ArduinoJson8V730HB226detail13convertNumberIifEET_T0_>
 800d0a6:	4603      	mov	r3, r0
 800d0a8:	e01b      	b.n	800d0e2 <_ZNK11ArduinoJson8V730HB226detail6Number9convertToIiEET_v+0x72>
        return convertNumber<T>(value_.asSignedInteger);
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800d0b0:	4610      	mov	r0, r2
 800d0b2:	4619      	mov	r1, r3
 800d0b4:	f7ff fe41 	bl	800cd3a <_ZN11ArduinoJson8V730HB226detail13convertNumberIixEET_T0_>
 800d0b8:	4603      	mov	r3, r0
 800d0ba:	e012      	b.n	800d0e2 <_ZNK11ArduinoJson8V730HB226detail6Number9convertToIiEET_v+0x72>
        return convertNumber<T>(value_.asUnsignedInteger);
 800d0bc:	687b      	ldr	r3, [r7, #4]
 800d0be:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800d0c2:	4610      	mov	r0, r2
 800d0c4:	4619      	mov	r1, r3
 800d0c6:	f7ff fe25 	bl	800cd14 <_ZN11ArduinoJson8V730HB226detail13convertNumberIiyEET_T0_>
 800d0ca:	4603      	mov	r3, r0
 800d0cc:	e009      	b.n	800d0e2 <_ZNK11ArduinoJson8V730HB226detail6Number9convertToIiEET_v+0x72>
        return convertNumber<T>(value_.asDouble);
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	ed93 7b02 	vldr	d7, [r3, #8]
 800d0d4:	eeb0 0b47 	vmov.f64	d0, d7
 800d0d8:	f7ff fe6e 	bl	800cdb8 <_ZN11ArduinoJson8V730HB226detail13convertNumberIidEET_T0_>
 800d0dc:	4603      	mov	r3, r0
 800d0de:	e000      	b.n	800d0e2 <_ZNK11ArduinoJson8V730HB226detail6Number9convertToIiEET_v+0x72>
        return T();
 800d0e0:	2300      	movs	r3, #0
  }
 800d0e2:	4618      	mov	r0, r3
 800d0e4:	3708      	adds	r7, #8
 800d0e6:	46bd      	mov	sp, r7
 800d0e8:	bd80      	pop	{r7, pc}
 800d0ea:	bf00      	nop

0800d0ec <_ZN11ArduinoJson8V730HB226detail14numeric_limitsIivE6lowestEv>:
  static constexpr T lowest() {
 800d0ec:	b480      	push	{r7}
 800d0ee:	af00      	add	r7, sp, #0
    return T(T(1) << (sizeof(T) * 8 - 1));
 800d0f0:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
  }
 800d0f4:	4618      	mov	r0, r3
 800d0f6:	46bd      	mov	sp, r7
 800d0f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0fc:	4770      	bx	lr

0800d0fe <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIifEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valuegestS8_stS5_EbE4typeES5_>:
canConvertNumber(TIn value) {
 800d0fe:	b580      	push	{r7, lr}
 800d100:	b082      	sub	sp, #8
 800d102:	af00      	add	r7, sp, #0
 800d104:	ed87 0a01 	vstr	s0, [r7, #4]
  return value >= numeric_limits<TOut>::lowest() &&
 800d108:	f7ff fff0 	bl	800d0ec <_ZN11ArduinoJson8V730HB226detail14numeric_limitsIivE6lowestEv>
 800d10c:	ee07 0a90 	vmov	s15, r0
 800d110:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d114:	ed97 7a01 	vldr	s14, [r7, #4]
 800d118:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800d11c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d120:	db0d      	blt.n	800d13e <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIifEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valuegestS8_stS5_EbE4typeES5_+0x40>
         value <= FloatTraits<TIn>::template highest_for<TOut>();
 800d122:	2000      	movs	r0, #0
 800d124:	f000 f8e8 	bl	800d2f8 <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIfLj4EE11highest_forIiEEfPNS1_9enable_ifIXaaaasrNS1_11is_integralIT_EE5valuesrNS1_9is_signedIS7_EE5valueeqstS7_Li4EEiE4typeE>
 800d128:	eeb0 7a40 	vmov.f32	s14, s0
  return value >= numeric_limits<TOut>::lowest() &&
 800d12c:	edd7 7a01 	vldr	s15, [r7, #4]
 800d130:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d134:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d138:	d801      	bhi.n	800d13e <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIifEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valuegestS8_stS5_EbE4typeES5_+0x40>
 800d13a:	2301      	movs	r3, #1
 800d13c:	e000      	b.n	800d140 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIifEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valuegestS8_stS5_EbE4typeES5_+0x42>
 800d13e:	2300      	movs	r3, #0
}
 800d140:	4618      	mov	r0, r3
 800d142:	3708      	adds	r7, #8
 800d144:	46bd      	mov	sp, r7
 800d146:	bd80      	pop	{r7, pc}

0800d148 <_ZN11ArduinoJson8V730HB226detail14numeric_limitsIivE7highestEv>:
  static constexpr T highest() {
 800d148:	b580      	push	{r7, lr}
 800d14a:	af00      	add	r7, sp, #0
    return T(~lowest());
 800d14c:	f7ff ffce 	bl	800d0ec <_ZN11ArduinoJson8V730HB226detail14numeric_limitsIivE6lowestEv>
 800d150:	4603      	mov	r3, r0
 800d152:	43db      	mvns	r3, r3
  }
 800d154:	4618      	mov	r0, r3
 800d156:	bd80      	pop	{r7, pc}

0800d158 <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIidEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valueltstS8_stS5_EbE4typeES5_>:
canConvertNumber(TIn value) {
 800d158:	b580      	push	{r7, lr}
 800d15a:	b082      	sub	sp, #8
 800d15c:	af00      	add	r7, sp, #0
 800d15e:	ed87 0b00 	vstr	d0, [r7]
  return value >= numeric_limits<TOut>::lowest() &&
 800d162:	f7ff ffc3 	bl	800d0ec <_ZN11ArduinoJson8V730HB226detail14numeric_limitsIivE6lowestEv>
 800d166:	ee07 0a90 	vmov	s15, r0
 800d16a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800d16e:	ed97 6b00 	vldr	d6, [r7]
 800d172:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800d176:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d17a:	db0e      	blt.n	800d19a <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIidEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valueltstS8_stS5_EbE4typeES5_+0x42>
         value <= numeric_limits<TOut>::highest();
 800d17c:	f7ff ffe4 	bl	800d148 <_ZN11ArduinoJson8V730HB226detail14numeric_limitsIivE7highestEv>
 800d180:	ee07 0a90 	vmov	s15, r0
 800d184:	eeb8 7be7 	vcvt.f64.s32	d7, s15
  return value >= numeric_limits<TOut>::lowest() &&
 800d188:	ed97 6b00 	vldr	d6, [r7]
 800d18c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800d190:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d194:	d801      	bhi.n	800d19a <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIidEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valueltstS8_stS5_EbE4typeES5_+0x42>
 800d196:	2301      	movs	r3, #1
 800d198:	e000      	b.n	800d19c <_ZN11ArduinoJson8V730HB226detail16canConvertNumberIidEENS1_9enable_ifIXaaaasrNS1_17is_floating_pointIT0_EE5valuesrNS1_11is_integralIT_EE5valueltstS8_stS5_EbE4typeES5_+0x44>
 800d19a:	2300      	movs	r3, #0
}
 800d19c:	4618      	mov	r0, r3
 800d19e:	3708      	adds	r7, #8
 800d1a0:	46bd      	mov	sp, r7
 800d1a2:	bd80      	pop	{r7, pc}

0800d1a4 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI5BlinkEEEC1Ev>:
      _Tuple_impl()
 800d1a4:	b580      	push	{r7, lr}
 800d1a6:	b082      	sub	sp, #8
 800d1a8:	af00      	add	r7, sp, #0
 800d1aa:	6078      	str	r0, [r7, #4]
      : _Base() { }
 800d1ac:	6878      	ldr	r0, [r7, #4]
 800d1ae:	f000 f8b2 	bl	800d316 <_ZNSt10_Head_baseILj1ESt14default_deleteI5BlinkELb1EEC1Ev>
 800d1b2:	687b      	ldr	r3, [r7, #4]
 800d1b4:	4618      	mov	r0, r3
 800d1b6:	3708      	adds	r7, #8
 800d1b8:	46bd      	mov	sp, r7
 800d1ba:	bd80      	pop	{r7, pc}

0800d1bc <_ZNSt10_Head_baseILj0EP5BlinkLb0EEC1Ev>:
      constexpr _Head_base()
 800d1bc:	b480      	push	{r7}
 800d1be:	b083      	sub	sp, #12
 800d1c0:	af00      	add	r7, sp, #0
 800d1c2:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 800d1c4:	687b      	ldr	r3, [r7, #4]
 800d1c6:	2200      	movs	r2, #0
 800d1c8:	601a      	str	r2, [r3, #0]
 800d1ca:	687b      	ldr	r3, [r7, #4]
 800d1cc:	4618      	mov	r0, r3
 800d1ce:	370c      	adds	r7, #12
 800d1d0:	46bd      	mov	sp, r7
 800d1d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1d6:	4770      	bx	lr

0800d1d8 <_ZNSt10_Head_baseILj0EP5BlinkLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 800d1d8:	b480      	push	{r7}
 800d1da:	b083      	sub	sp, #12
 800d1dc:	af00      	add	r7, sp, #0
 800d1de:	6078      	str	r0, [r7, #4]
 800d1e0:	687b      	ldr	r3, [r7, #4]
 800d1e2:	4618      	mov	r0, r3
 800d1e4:	370c      	adds	r7, #12
 800d1e6:	46bd      	mov	sp, r7
 800d1e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1ec:	4770      	bx	lr

0800d1ee <_ZNSt11_Tuple_implILj1EJSt14default_deleteI5BlinkEEE7_M_headERS3_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800d1ee:	b580      	push	{r7, lr}
 800d1f0:	b082      	sub	sp, #8
 800d1f2:	af00      	add	r7, sp, #0
 800d1f4:	6078      	str	r0, [r7, #4]
 800d1f6:	6878      	ldr	r0, [r7, #4]
 800d1f8:	f000 f898 	bl	800d32c <_ZNSt10_Head_baseILj1ESt14default_deleteI5BlinkELb1EE7_M_headERS3_>
 800d1fc:	4603      	mov	r3, r0
 800d1fe:	4618      	mov	r0, r3
 800d200:	3708      	adds	r7, #8
 800d202:	46bd      	mov	sp, r7
 800d204:	bd80      	pop	{r7, pc}

0800d206 <_ZSt12__get_helperILj0EP5BlinkJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800d206:	b580      	push	{r7, lr}
 800d208:	b082      	sub	sp, #8
 800d20a:	af00      	add	r7, sp, #0
 800d20c:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800d20e:	6878      	ldr	r0, [r7, #4]
 800d210:	f000 f897 	bl	800d342 <_ZNSt11_Tuple_implILj0EJP5BlinkSt14default_deleteIS0_EEE7_M_headERKS4_>
 800d214:	4603      	mov	r3, r0
 800d216:	4618      	mov	r0, r3
 800d218:	3708      	adds	r7, #8
 800d21a:	46bd      	mov	sp, r7
 800d21c:	bd80      	pop	{r7, pc}

0800d21e <_ZNKSt15__new_allocatorISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE11_M_max_sizeEv>:
	{ return false; }
#endif

    private:
      _GLIBCXX_CONSTEXPR size_type
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 800d21e:	b480      	push	{r7}
 800d220:	b083      	sub	sp, #12
 800d222:	af00      	add	r7, sp, #0
 800d224:	6078      	str	r0, [r7, #4]
      {
#if __PTRDIFF_MAX__ < __SIZE_MAX__
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 800d226:	f06f 4378 	mvn.w	r3, #4160749568	@ 0xf8000000
#else
	return std::size_t(-1) / sizeof(_Tp);
#endif
      }
 800d22a:	4618      	mov	r0, r3
 800d22c:	370c      	adds	r7, #12
 800d22e:	46bd      	mov	sp, r7
 800d230:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d234:	4770      	bx	lr
	...

0800d238 <_ZNSt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEC1ES1_S3_>:
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
 800d238:	b5b0      	push	{r4, r5, r7, lr}
 800d23a:	b086      	sub	sp, #24
 800d23c:	af00      	add	r7, sp, #0
 800d23e:	60f8      	str	r0, [r7, #12]
 800d240:	60b9      	str	r1, [r7, #8]
 800d242:	713a      	strb	r2, [r7, #4]
      : _M_impl(__p, std::move(__d), _Alloc()) { }
 800d244:	68fb      	ldr	r3, [r7, #12]
 800d246:	4618      	mov	r0, r3
 800d248:	f000 f894 	bl	800d374 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
 800d24c:	4a0a      	ldr	r2, [pc, #40]	@ (800d278 <_ZNSt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEC1ES1_S3_+0x40>)
 800d24e:	68fb      	ldr	r3, [r7, #12]
 800d250:	601a      	str	r2, [r3, #0]
 800d252:	68fb      	ldr	r3, [r7, #12]
 800d254:	f103 040c 	add.w	r4, r3, #12
 800d258:	1d3b      	adds	r3, r7, #4
 800d25a:	4618      	mov	r0, r3
 800d25c:	f000 f87e 	bl	800d35c <_ZSt4moveIRSt14default_deleteI5BlinkEEONSt16remove_referenceIT_E4typeEOS5_>
 800d260:	f107 0314 	add.w	r3, r7, #20
 800d264:	462a      	mov	r2, r5
 800d266:	68b9      	ldr	r1, [r7, #8]
 800d268:	4620      	mov	r0, r4
 800d26a:	f000 f899 	bl	800d3a0 <_ZNSt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE5_ImplC1ES1_S3_RKS4_>
 800d26e:	68fb      	ldr	r3, [r7, #12]
 800d270:	4618      	mov	r0, r3
 800d272:	3718      	adds	r7, #24
 800d274:	46bd      	mov	sp, r7
 800d276:	bdb0      	pop	{r4, r5, r7, pc}
 800d278:	0802056c 	.word	0x0802056c

0800d27c <_ZNSt11_Tuple_implILj1EJSt14default_deleteI3PinEEEC1Ev>:
      _Tuple_impl()
 800d27c:	b580      	push	{r7, lr}
 800d27e:	b082      	sub	sp, #8
 800d280:	af00      	add	r7, sp, #0
 800d282:	6078      	str	r0, [r7, #4]
      : _Base() { }
 800d284:	6878      	ldr	r0, [r7, #4]
 800d286:	f000 f8a7 	bl	800d3d8 <_ZNSt10_Head_baseILj1ESt14default_deleteI3PinELb1EEC1Ev>
 800d28a:	687b      	ldr	r3, [r7, #4]
 800d28c:	4618      	mov	r0, r3
 800d28e:	3708      	adds	r7, #8
 800d290:	46bd      	mov	sp, r7
 800d292:	bd80      	pop	{r7, pc}

0800d294 <_ZNSt10_Head_baseILj0EP3PinLb0EEC1Ev>:
      constexpr _Head_base()
 800d294:	b480      	push	{r7}
 800d296:	b083      	sub	sp, #12
 800d298:	af00      	add	r7, sp, #0
 800d29a:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 800d29c:	687b      	ldr	r3, [r7, #4]
 800d29e:	2200      	movs	r2, #0
 800d2a0:	601a      	str	r2, [r3, #0]
 800d2a2:	687b      	ldr	r3, [r7, #4]
 800d2a4:	4618      	mov	r0, r3
 800d2a6:	370c      	adds	r7, #12
 800d2a8:	46bd      	mov	sp, r7
 800d2aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2ae:	4770      	bx	lr

0800d2b0 <_ZNSt10_Head_baseILj0EP3PinLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 800d2b0:	b480      	push	{r7}
 800d2b2:	b083      	sub	sp, #12
 800d2b4:	af00      	add	r7, sp, #0
 800d2b6:	6078      	str	r0, [r7, #4]
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	4618      	mov	r0, r3
 800d2bc:	370c      	adds	r7, #12
 800d2be:	46bd      	mov	sp, r7
 800d2c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2c4:	4770      	bx	lr

0800d2c6 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI3PinEEE7_M_headERS3_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800d2c6:	b580      	push	{r7, lr}
 800d2c8:	b082      	sub	sp, #8
 800d2ca:	af00      	add	r7, sp, #0
 800d2cc:	6078      	str	r0, [r7, #4]
 800d2ce:	6878      	ldr	r0, [r7, #4]
 800d2d0:	f000 f88d 	bl	800d3ee <_ZNSt10_Head_baseILj1ESt14default_deleteI3PinELb1EE7_M_headERS3_>
 800d2d4:	4603      	mov	r3, r0
 800d2d6:	4618      	mov	r0, r3
 800d2d8:	3708      	adds	r7, #8
 800d2da:	46bd      	mov	sp, r7
 800d2dc:	bd80      	pop	{r7, pc}

0800d2de <_ZNSt11_Tuple_implILj0EJP3PinSt14default_deleteIS0_EEE7_M_headERKS4_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800d2de:	b580      	push	{r7, lr}
 800d2e0:	b082      	sub	sp, #8
 800d2e2:	af00      	add	r7, sp, #0
 800d2e4:	6078      	str	r0, [r7, #4]
 800d2e6:	687b      	ldr	r3, [r7, #4]
 800d2e8:	4618      	mov	r0, r3
 800d2ea:	f000 f88b 	bl	800d404 <_ZNSt10_Head_baseILj0EP3PinLb0EE7_M_headERKS2_>
 800d2ee:	4603      	mov	r3, r0
 800d2f0:	4618      	mov	r0, r3
 800d2f2:	3708      	adds	r7, #8
 800d2f4:	46bd      	mov	sp, r7
 800d2f6:	bd80      	pop	{r7, pc}

0800d2f8 <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIfLj4EE11highest_forIiEEfPNS1_9enable_ifIXaaaasrNS1_11is_integralIT_EE5valuesrNS1_9is_signedIS7_EE5valueeqstS7_Li4EEiE4typeE>:
  static T highest_for(
 800d2f8:	b580      	push	{r7, lr}
 800d2fa:	b082      	sub	sp, #8
 800d2fc:	af00      	add	r7, sp, #0
 800d2fe:	6078      	str	r0, [r7, #4]
    return forge(0x4EFFFFFF);  // 2.14748352E9
 800d300:	f06f 4031 	mvn.w	r0, #2969567232	@ 0xb1000000
 800d304:	f7f9 fd5e 	bl	8006dc4 <_ZN11ArduinoJson8V730HB226detail11FloatTraitsIfLj4EE5forgeEm>
 800d308:	eef0 7a40 	vmov.f32	s15, s0
  }
 800d30c:	eeb0 0a67 	vmov.f32	s0, s15
 800d310:	3708      	adds	r7, #8
 800d312:	46bd      	mov	sp, r7
 800d314:	bd80      	pop	{r7, pc}

0800d316 <_ZNSt10_Head_baseILj1ESt14default_deleteI5BlinkELb1EEC1Ev>:
      constexpr _Head_base()
 800d316:	b480      	push	{r7}
 800d318:	b083      	sub	sp, #12
 800d31a:	af00      	add	r7, sp, #0
 800d31c:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 800d31e:	687b      	ldr	r3, [r7, #4]
 800d320:	4618      	mov	r0, r3
 800d322:	370c      	adds	r7, #12
 800d324:	46bd      	mov	sp, r7
 800d326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d32a:	4770      	bx	lr

0800d32c <_ZNSt10_Head_baseILj1ESt14default_deleteI5BlinkELb1EE7_M_headERS3_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 800d32c:	b480      	push	{r7}
 800d32e:	b083      	sub	sp, #12
 800d330:	af00      	add	r7, sp, #0
 800d332:	6078      	str	r0, [r7, #4]
 800d334:	687b      	ldr	r3, [r7, #4]
 800d336:	4618      	mov	r0, r3
 800d338:	370c      	adds	r7, #12
 800d33a:	46bd      	mov	sp, r7
 800d33c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d340:	4770      	bx	lr

0800d342 <_ZNSt11_Tuple_implILj0EJP5BlinkSt14default_deleteIS0_EEE7_M_headERKS4_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800d342:	b580      	push	{r7, lr}
 800d344:	b082      	sub	sp, #8
 800d346:	af00      	add	r7, sp, #0
 800d348:	6078      	str	r0, [r7, #4]
 800d34a:	687b      	ldr	r3, [r7, #4]
 800d34c:	4618      	mov	r0, r3
 800d34e:	f000 f864 	bl	800d41a <_ZNSt10_Head_baseILj0EP5BlinkLb0EE7_M_headERKS2_>
 800d352:	4603      	mov	r3, r0
 800d354:	4618      	mov	r0, r3
 800d356:	3708      	adds	r7, #8
 800d358:	46bd      	mov	sp, r7
 800d35a:	bd80      	pop	{r7, pc}

0800d35c <_ZSt4moveIRSt14default_deleteI5BlinkEEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 800d35c:	b480      	push	{r7}
 800d35e:	b083      	sub	sp, #12
 800d360:	af00      	add	r7, sp, #0
 800d362:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800d364:	687b      	ldr	r3, [r7, #4]
 800d366:	4618      	mov	r0, r3
 800d368:	370c      	adds	r7, #12
 800d36a:	46bd      	mov	sp, r7
 800d36c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d370:	4770      	bx	lr
	...

0800d374 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EEC1Ev>:
      _Sp_counted_base() noexcept
 800d374:	b480      	push	{r7}
 800d376:	b083      	sub	sp, #12
 800d378:	af00      	add	r7, sp, #0
 800d37a:	6078      	str	r0, [r7, #4]
      : _M_use_count(1), _M_weak_count(1) { }
 800d37c:	4a07      	ldr	r2, [pc, #28]	@ (800d39c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EEC1Ev+0x28>)
 800d37e:	687b      	ldr	r3, [r7, #4]
 800d380:	601a      	str	r2, [r3, #0]
 800d382:	687b      	ldr	r3, [r7, #4]
 800d384:	2201      	movs	r2, #1
 800d386:	605a      	str	r2, [r3, #4]
 800d388:	687b      	ldr	r3, [r7, #4]
 800d38a:	2201      	movs	r2, #1
 800d38c:	609a      	str	r2, [r3, #8]
 800d38e:	687b      	ldr	r3, [r7, #4]
 800d390:	4618      	mov	r0, r3
 800d392:	370c      	adds	r7, #12
 800d394:	46bd      	mov	sp, r7
 800d396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d39a:	4770      	bx	lr
 800d39c:	080205ac 	.word	0x080205ac

0800d3a0 <_ZNSt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE5_ImplC1ES1_S3_RKS4_>:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
 800d3a0:	b580      	push	{r7, lr}
 800d3a2:	b084      	sub	sp, #16
 800d3a4:	af00      	add	r7, sp, #0
 800d3a6:	60f8      	str	r0, [r7, #12]
 800d3a8:	60b9      	str	r1, [r7, #8]
 800d3aa:	713a      	strb	r2, [r7, #4]
 800d3ac:	603b      	str	r3, [r7, #0]
	: _Del_base(std::move(__d)), _Alloc_base(__a), _M_ptr(__p)
 800d3ae:	1d3b      	adds	r3, r7, #4
 800d3b0:	4618      	mov	r0, r3
 800d3b2:	f7ff ffd3 	bl	800d35c <_ZSt4moveIRSt14default_deleteI5BlinkEEONSt16remove_referenceIT_E4typeEOS5_>
 800d3b6:	4603      	mov	r3, r0
 800d3b8:	4619      	mov	r1, r3
 800d3ba:	68f8      	ldr	r0, [r7, #12]
 800d3bc:	f000 f838 	bl	800d430 <_ZNSt14_Sp_ebo_helperILi0ESt14default_deleteI5BlinkELb1EEC1EOS2_>
 800d3c0:	6839      	ldr	r1, [r7, #0]
 800d3c2:	68f8      	ldr	r0, [r7, #12]
 800d3c4:	f000 f841 	bl	800d44a <_ZNSt14_Sp_ebo_helperILi1ESaIvELb1EEC1ERKS0_>
 800d3c8:	68fb      	ldr	r3, [r7, #12]
 800d3ca:	68ba      	ldr	r2, [r7, #8]
 800d3cc:	601a      	str	r2, [r3, #0]
	{ }
 800d3ce:	68fb      	ldr	r3, [r7, #12]
 800d3d0:	4618      	mov	r0, r3
 800d3d2:	3710      	adds	r7, #16
 800d3d4:	46bd      	mov	sp, r7
 800d3d6:	bd80      	pop	{r7, pc}

0800d3d8 <_ZNSt10_Head_baseILj1ESt14default_deleteI3PinELb1EEC1Ev>:
      constexpr _Head_base()
 800d3d8:	b480      	push	{r7}
 800d3da:	b083      	sub	sp, #12
 800d3dc:	af00      	add	r7, sp, #0
 800d3de:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	4618      	mov	r0, r3
 800d3e4:	370c      	adds	r7, #12
 800d3e6:	46bd      	mov	sp, r7
 800d3e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3ec:	4770      	bx	lr

0800d3ee <_ZNSt10_Head_baseILj1ESt14default_deleteI3PinELb1EE7_M_headERS3_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 800d3ee:	b480      	push	{r7}
 800d3f0:	b083      	sub	sp, #12
 800d3f2:	af00      	add	r7, sp, #0
 800d3f4:	6078      	str	r0, [r7, #4]
 800d3f6:	687b      	ldr	r3, [r7, #4]
 800d3f8:	4618      	mov	r0, r3
 800d3fa:	370c      	adds	r7, #12
 800d3fc:	46bd      	mov	sp, r7
 800d3fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d402:	4770      	bx	lr

0800d404 <_ZNSt10_Head_baseILj0EP3PinLb0EE7_M_headERKS2_>:
      _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }
 800d404:	b480      	push	{r7}
 800d406:	b083      	sub	sp, #12
 800d408:	af00      	add	r7, sp, #0
 800d40a:	6078      	str	r0, [r7, #4]
 800d40c:	687b      	ldr	r3, [r7, #4]
 800d40e:	4618      	mov	r0, r3
 800d410:	370c      	adds	r7, #12
 800d412:	46bd      	mov	sp, r7
 800d414:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d418:	4770      	bx	lr

0800d41a <_ZNSt10_Head_baseILj0EP5BlinkLb0EE7_M_headERKS2_>:
 800d41a:	b480      	push	{r7}
 800d41c:	b083      	sub	sp, #12
 800d41e:	af00      	add	r7, sp, #0
 800d420:	6078      	str	r0, [r7, #4]
 800d422:	687b      	ldr	r3, [r7, #4]
 800d424:	4618      	mov	r0, r3
 800d426:	370c      	adds	r7, #12
 800d428:	46bd      	mov	sp, r7
 800d42a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d42e:	4770      	bx	lr

0800d430 <_ZNSt14_Sp_ebo_helperILi0ESt14default_deleteI5BlinkELb1EEC1EOS2_>:
      explicit _Sp_ebo_helper(_Tp&& __tp) : _Tp(std::move(__tp)) { }
 800d430:	b580      	push	{r7, lr}
 800d432:	b082      	sub	sp, #8
 800d434:	af00      	add	r7, sp, #0
 800d436:	6078      	str	r0, [r7, #4]
 800d438:	6039      	str	r1, [r7, #0]
 800d43a:	6838      	ldr	r0, [r7, #0]
 800d43c:	f7ff ff8e 	bl	800d35c <_ZSt4moveIRSt14default_deleteI5BlinkEEONSt16remove_referenceIT_E4typeEOS5_>
 800d440:	687b      	ldr	r3, [r7, #4]
 800d442:	4618      	mov	r0, r3
 800d444:	3708      	adds	r7, #8
 800d446:	46bd      	mov	sp, r7
 800d448:	bd80      	pop	{r7, pc}

0800d44a <_ZNSt14_Sp_ebo_helperILi1ESaIvELb1EEC1ERKS0_>:
      explicit _Sp_ebo_helper(const _Tp& __tp) : _Tp(__tp) { }
 800d44a:	b480      	push	{r7}
 800d44c:	b083      	sub	sp, #12
 800d44e:	af00      	add	r7, sp, #0
 800d450:	6078      	str	r0, [r7, #4]
 800d452:	6039      	str	r1, [r7, #0]
 800d454:	687b      	ldr	r3, [r7, #4]
 800d456:	4618      	mov	r0, r3
 800d458:	370c      	adds	r7, #12
 800d45a:	46bd      	mov	sp, r7
 800d45c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d460:	4770      	bx	lr
	...

0800d464 <_ZNSt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_deleter() noexcept { }
 800d464:	b580      	push	{r7, lr}
 800d466:	b082      	sub	sp, #8
 800d468:	af00      	add	r7, sp, #0
 800d46a:	6078      	str	r0, [r7, #4]
 800d46c:	4a05      	ldr	r2, [pc, #20]	@ (800d484 <_ZNSt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EED1Ev+0x20>)
 800d46e:	687b      	ldr	r3, [r7, #4]
 800d470:	601a      	str	r2, [r3, #0]
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	4618      	mov	r0, r3
 800d476:	f7fe fff1 	bl	800c45c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 800d47a:	687b      	ldr	r3, [r7, #4]
 800d47c:	4618      	mov	r0, r3
 800d47e:	3708      	adds	r7, #8
 800d480:	46bd      	mov	sp, r7
 800d482:	bd80      	pop	{r7, pc}
 800d484:	0802056c 	.word	0x0802056c

0800d488 <_ZNSt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
 800d488:	b580      	push	{r7, lr}
 800d48a:	b082      	sub	sp, #8
 800d48c:	af00      	add	r7, sp, #0
 800d48e:	6078      	str	r0, [r7, #4]
 800d490:	6878      	ldr	r0, [r7, #4]
 800d492:	f7ff ffe7 	bl	800d464 <_ZNSt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EED1Ev>
 800d496:	2110      	movs	r1, #16
 800d498:	6878      	ldr	r0, [r7, #4]
 800d49a:	f010 fe6e 	bl	801e17a <_ZdlPvj>
 800d49e:	687b      	ldr	r3, [r7, #4]
 800d4a0:	4618      	mov	r0, r3
 800d4a2:	3708      	adds	r7, #8
 800d4a4:	46bd      	mov	sp, r7
 800d4a6:	bd80      	pop	{r7, pc}

0800d4a8 <_ZNSt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
 800d4a8:	b580      	push	{r7, lr}
 800d4aa:	b082      	sub	sp, #8
 800d4ac:	af00      	add	r7, sp, #0
 800d4ae:	6078      	str	r0, [r7, #4]
      { _M_impl._M_del()(_M_impl._M_ptr); }
 800d4b0:	687b      	ldr	r3, [r7, #4]
 800d4b2:	330c      	adds	r3, #12
 800d4b4:	4618      	mov	r0, r3
 800d4b6:	f000 f83f 	bl	800d538 <_ZNSt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE5_Impl6_M_delEv>
 800d4ba:	4602      	mov	r2, r0
 800d4bc:	687b      	ldr	r3, [r7, #4]
 800d4be:	68db      	ldr	r3, [r3, #12]
 800d4c0:	4619      	mov	r1, r3
 800d4c2:	4610      	mov	r0, r2
 800d4c4:	f7ff f8ac 	bl	800c620 <_ZNKSt14default_deleteI5BlinkEclEPS0_>
 800d4c8:	bf00      	nop
 800d4ca:	3708      	adds	r7, #8
 800d4cc:	46bd      	mov	sp, r7
 800d4ce:	bd80      	pop	{r7, pc}

0800d4d0 <_ZNSt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
 800d4d0:	b580      	push	{r7, lr}
 800d4d2:	b086      	sub	sp, #24
 800d4d4:	af00      	add	r7, sp, #0
 800d4d6:	6078      	str	r0, [r7, #4]
	__allocator_type __a(_M_impl._M_alloc());
 800d4d8:	687b      	ldr	r3, [r7, #4]
 800d4da:	330c      	adds	r3, #12
 800d4dc:	4618      	mov	r0, r3
 800d4de:	f000 f837 	bl	800d550 <_ZNSt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE5_Impl8_M_allocEv>
 800d4e2:	4602      	mov	r2, r0
 800d4e4:	f107 0314 	add.w	r3, r7, #20
 800d4e8:	4611      	mov	r1, r2
 800d4ea:	4618      	mov	r0, r3
 800d4ec:	f000 f83c 	bl	800d568 <_ZNSaISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEC1IvEERKSaIT_E>
	__allocated_ptr<__allocator_type> __guard_ptr{ __a, this };
 800d4f0:	f107 0114 	add.w	r1, r7, #20
 800d4f4:	f107 030c 	add.w	r3, r7, #12
 800d4f8:	687a      	ldr	r2, [r7, #4]
 800d4fa:	4618      	mov	r0, r3
 800d4fc:	f000 f841 	bl	800d582 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEEC1ERS9_PS8_>
	this->~_Sp_counted_deleter();
 800d500:	6878      	ldr	r0, [r7, #4]
 800d502:	f7ff ffaf 	bl	800d464 <_ZNSt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EED1Ev>
      }
 800d506:	f107 030c 	add.w	r3, r7, #12
 800d50a:	4618      	mov	r0, r3
 800d50c:	f000 f84d 	bl	800d5aa <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEED1Ev>
 800d510:	f107 0314 	add.w	r3, r7, #20
 800d514:	4618      	mov	r0, r3
 800d516:	f7ff fb5e 	bl	800cbd6 <_ZNSaISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>
 800d51a:	3718      	adds	r7, #24
 800d51c:	46bd      	mov	sp, r7
 800d51e:	bd80      	pop	{r7, pc}

0800d520 <_ZNSt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_get_deleter(const type_info& __ti [[__gnu__::__unused__]]) noexcept
 800d520:	b480      	push	{r7}
 800d522:	b083      	sub	sp, #12
 800d524:	af00      	add	r7, sp, #0
 800d526:	6078      	str	r0, [r7, #4]
 800d528:	6039      	str	r1, [r7, #0]
        return nullptr;
 800d52a:	2300      	movs	r3, #0
      }
 800d52c:	4618      	mov	r0, r3
 800d52e:	370c      	adds	r7, #12
 800d530:	46bd      	mov	sp, r7
 800d532:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d536:	4770      	bx	lr

0800d538 <_ZNSt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE5_Impl6_M_delEv>:
	_Deleter& _M_del() noexcept { return _Del_base::_S_get(*this); }
 800d538:	b580      	push	{r7, lr}
 800d53a:	b082      	sub	sp, #8
 800d53c:	af00      	add	r7, sp, #0
 800d53e:	6078      	str	r0, [r7, #4]
 800d540:	6878      	ldr	r0, [r7, #4]
 800d542:	f000 f847 	bl	800d5d4 <_ZNSt14_Sp_ebo_helperILi0ESt14default_deleteI5BlinkELb1EE6_S_getERS3_>
 800d546:	4603      	mov	r3, r0
 800d548:	4618      	mov	r0, r3
 800d54a:	3708      	adds	r7, #8
 800d54c:	46bd      	mov	sp, r7
 800d54e:	bd80      	pop	{r7, pc}

0800d550 <_ZNSt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE5_Impl8_M_allocEv>:
	_Alloc& _M_alloc() noexcept { return _Alloc_base::_S_get(*this); }
 800d550:	b580      	push	{r7, lr}
 800d552:	b082      	sub	sp, #8
 800d554:	af00      	add	r7, sp, #0
 800d556:	6078      	str	r0, [r7, #4]
 800d558:	6878      	ldr	r0, [r7, #4]
 800d55a:	f000 f846 	bl	800d5ea <_ZNSt14_Sp_ebo_helperILi1ESaIvELb1EE6_S_getERS1_>
 800d55e:	4603      	mov	r3, r0
 800d560:	4618      	mov	r0, r3
 800d562:	3708      	adds	r7, #8
 800d564:	46bd      	mov	sp, r7
 800d566:	bd80      	pop	{r7, pc}

0800d568 <_ZNSaISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEC1IvEERKSaIT_E>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }
 800d568:	b580      	push	{r7, lr}
 800d56a:	b082      	sub	sp, #8
 800d56c:	af00      	add	r7, sp, #0
 800d56e:	6078      	str	r0, [r7, #4]
 800d570:	6039      	str	r1, [r7, #0]
 800d572:	6878      	ldr	r0, [r7, #4]
 800d574:	f7ff fc6e 	bl	800ce54 <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEC1Ev>
 800d578:	687b      	ldr	r3, [r7, #4]
 800d57a:	4618      	mov	r0, r3
 800d57c:	3708      	adds	r7, #8
 800d57e:	46bd      	mov	sp, r7
 800d580:	bd80      	pop	{r7, pc}

0800d582 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEEC1ERS9_PS8_>:
    {
      using pointer = typename allocator_traits<_Alloc>::pointer;
      using value_type = typename allocator_traits<_Alloc>::value_type;

      /// Take ownership of __ptr
      __allocated_ptr(_Alloc& __a, pointer __ptr) noexcept
 800d582:	b580      	push	{r7, lr}
 800d584:	b084      	sub	sp, #16
 800d586:	af00      	add	r7, sp, #0
 800d588:	60f8      	str	r0, [r7, #12]
 800d58a:	60b9      	str	r1, [r7, #8]
 800d58c:	607a      	str	r2, [r7, #4]
      : _M_alloc(std::__addressof(__a)), _M_ptr(__ptr)
 800d58e:	68b8      	ldr	r0, [r7, #8]
 800d590:	f000 f836 	bl	800d600 <_ZSt11__addressofISaISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEEPT_RSA_>
 800d594:	4602      	mov	r2, r0
 800d596:	68fb      	ldr	r3, [r7, #12]
 800d598:	601a      	str	r2, [r3, #0]
 800d59a:	68fb      	ldr	r3, [r7, #12]
 800d59c:	687a      	ldr	r2, [r7, #4]
 800d59e:	605a      	str	r2, [r3, #4]
      { }
 800d5a0:	68fb      	ldr	r3, [r7, #12]
 800d5a2:	4618      	mov	r0, r3
 800d5a4:	3710      	adds	r7, #16
 800d5a6:	46bd      	mov	sp, r7
 800d5a8:	bd80      	pop	{r7, pc}

0800d5aa <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEED1Ev>:
      __allocated_ptr(__allocated_ptr&& __gd) noexcept
      : _M_alloc(__gd._M_alloc), _M_ptr(__gd._M_ptr)
      { __gd._M_ptr = nullptr; }

      /// Deallocate the owned pointer
      ~__allocated_ptr()
 800d5aa:	b580      	push	{r7, lr}
 800d5ac:	b082      	sub	sp, #8
 800d5ae:	af00      	add	r7, sp, #0
 800d5b0:	6078      	str	r0, [r7, #4]
      {
	if (_M_ptr != nullptr)
 800d5b2:	687b      	ldr	r3, [r7, #4]
 800d5b4:	685b      	ldr	r3, [r3, #4]
 800d5b6:	2b00      	cmp	r3, #0
 800d5b8:	d007      	beq.n	800d5ca <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEED1Ev+0x20>
	  std::allocator_traits<_Alloc>::deallocate(*_M_alloc, _M_ptr, 1);
 800d5ba:	687b      	ldr	r3, [r7, #4]
 800d5bc:	6818      	ldr	r0, [r3, #0]
 800d5be:	687b      	ldr	r3, [r7, #4]
 800d5c0:	685b      	ldr	r3, [r3, #4]
 800d5c2:	2201      	movs	r2, #1
 800d5c4:	4619      	mov	r1, r3
 800d5c6:	f000 f826 	bl	800d616 <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEE10deallocateERS9_PS8_j>
      }
 800d5ca:	687b      	ldr	r3, [r7, #4]
 800d5cc:	4618      	mov	r0, r3
 800d5ce:	3708      	adds	r7, #8
 800d5d0:	46bd      	mov	sp, r7
 800d5d2:	bd80      	pop	{r7, pc}

0800d5d4 <_ZNSt14_Sp_ebo_helperILi0ESt14default_deleteI5BlinkELb1EE6_S_getERS3_>:
      _S_get(_Sp_ebo_helper& __eboh) { return static_cast<_Tp&>(__eboh); }
 800d5d4:	b480      	push	{r7}
 800d5d6:	b083      	sub	sp, #12
 800d5d8:	af00      	add	r7, sp, #0
 800d5da:	6078      	str	r0, [r7, #4]
 800d5dc:	687b      	ldr	r3, [r7, #4]
 800d5de:	4618      	mov	r0, r3
 800d5e0:	370c      	adds	r7, #12
 800d5e2:	46bd      	mov	sp, r7
 800d5e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5e8:	4770      	bx	lr

0800d5ea <_ZNSt14_Sp_ebo_helperILi1ESaIvELb1EE6_S_getERS1_>:
 800d5ea:	b480      	push	{r7}
 800d5ec:	b083      	sub	sp, #12
 800d5ee:	af00      	add	r7, sp, #0
 800d5f0:	6078      	str	r0, [r7, #4]
 800d5f2:	687b      	ldr	r3, [r7, #4]
 800d5f4:	4618      	mov	r0, r3
 800d5f6:	370c      	adds	r7, #12
 800d5f8:	46bd      	mov	sp, r7
 800d5fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5fe:	4770      	bx	lr

0800d600 <_ZSt11__addressofISaISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEEPT_RSA_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 800d600:	b480      	push	{r7}
 800d602:	b083      	sub	sp, #12
 800d604:	af00      	add	r7, sp, #0
 800d606:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 800d608:	687b      	ldr	r3, [r7, #4]
 800d60a:	4618      	mov	r0, r3
 800d60c:	370c      	adds	r7, #12
 800d60e:	46bd      	mov	sp, r7
 800d610:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d614:	4770      	bx	lr

0800d616 <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEE10deallocateERS9_PS8_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 800d616:	b580      	push	{r7, lr}
 800d618:	b084      	sub	sp, #16
 800d61a:	af00      	add	r7, sp, #0
 800d61c:	60f8      	str	r0, [r7, #12]
 800d61e:	60b9      	str	r1, [r7, #8]
 800d620:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 800d622:	687a      	ldr	r2, [r7, #4]
 800d624:	68b9      	ldr	r1, [r7, #8]
 800d626:	68f8      	ldr	r0, [r7, #12]
 800d628:	f000 f804 	bl	800d634 <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE10deallocateEPS8_j>
 800d62c:	bf00      	nop
 800d62e:	3710      	adds	r7, #16
 800d630:	46bd      	mov	sp, r7
 800d632:	bd80      	pop	{r7, pc}

0800d634 <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP5BlinkSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE10deallocateEPS8_j>:
      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
 800d634:	b580      	push	{r7, lr}
 800d636:	b084      	sub	sp, #16
 800d638:	af00      	add	r7, sp, #0
 800d63a:	60f8      	str	r0, [r7, #12]
 800d63c:	60b9      	str	r1, [r7, #8]
 800d63e:	607a      	str	r2, [r7, #4]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 800d640:	687b      	ldr	r3, [r7, #4]
 800d642:	011b      	lsls	r3, r3, #4
 800d644:	4619      	mov	r1, r3
 800d646:	68b8      	ldr	r0, [r7, #8]
 800d648:	f010 fd97 	bl	801e17a <_ZdlPvj>
      }
 800d64c:	3710      	adds	r7, #16
 800d64e:	46bd      	mov	sp, r7
 800d650:	bd80      	pop	{r7, pc}

0800d652 <_ZNSt9_Any_data9_M_accessEv>:
    void*       _M_access()       noexcept { return &_M_pod_data[0]; }
 800d652:	b480      	push	{r7}
 800d654:	b083      	sub	sp, #12
 800d656:	af00      	add	r7, sp, #0
 800d658:	6078      	str	r0, [r7, #4]
 800d65a:	687b      	ldr	r3, [r7, #4]
 800d65c:	4618      	mov	r0, r3
 800d65e:	370c      	adds	r7, #12
 800d660:	46bd      	mov	sp, r7
 800d662:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d666:	4770      	bx	lr

0800d668 <_ZNKSt9_Any_data9_M_accessEv>:
    const void* _M_access() const noexcept { return &_M_pod_data[0]; }
 800d668:	b480      	push	{r7}
 800d66a:	b083      	sub	sp, #12
 800d66c:	af00      	add	r7, sp, #0
 800d66e:	6078      	str	r0, [r7, #4]
 800d670:	687b      	ldr	r3, [r7, #4]
 800d672:	4618      	mov	r0, r3
 800d674:	370c      	adds	r7, #12
 800d676:	46bd      	mov	sp, r7
 800d678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d67c:	4770      	bx	lr

0800d67e <_ZN14CommsInterface15setDataCallbackERKSt8functionIFvbEE>:

	virtual void init(void);
	virtual void start(void);
	virtual void tasks(void);

    void setDataCallback(const std::function<void(bool)>& callback) {
 800d67e:	b580      	push	{r7, lr}
 800d680:	b082      	sub	sp, #8
 800d682:	af00      	add	r7, sp, #0
 800d684:	6078      	str	r0, [r7, #4]
 800d686:	6039      	str	r1, [r7, #0]
        dataCallback = callback;
 800d688:	687b      	ldr	r3, [r7, #4]
 800d68a:	3318      	adds	r3, #24
 800d68c:	6839      	ldr	r1, [r7, #0]
 800d68e:	4618      	mov	r0, r3
 800d690:	f000 f8e9 	bl	800d866 <_ZNSt8functionIFvbEEaSERKS1_>
    }
 800d694:	bf00      	nop
 800d696:	3708      	adds	r7, #8
 800d698:	46bd      	mov	sp, r7
 800d69a:	bd80      	pop	{r7, pc}

0800d69c <_ZN12CommsHandler7setDataEb>:

    void init();
    void start();

    void setData(bool value) { data = value; }
 800d69c:	b480      	push	{r7}
 800d69e:	b083      	sub	sp, #12
 800d6a0:	af00      	add	r7, sp, #0
 800d6a2:	6078      	str	r0, [r7, #4]
 800d6a4:	460b      	mov	r3, r1
 800d6a6:	70fb      	strb	r3, [r7, #3]
 800d6a8:	687b      	ldr	r3, [r7, #4]
 800d6aa:	78fa      	ldrb	r2, [r7, #3]
 800d6ac:	771a      	strb	r2, [r3, #28]
 800d6ae:	bf00      	nop
 800d6b0:	370c      	adds	r7, #12
 800d6b2:	46bd      	mov	sp, r7
 800d6b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6b8:	4770      	bx	lr
	...

0800d6bc <_ZN12CommsHandlerC1Ev>:
#include "commsHandler.h"
#include "../../remora.h"

CommsHandler::CommsHandler() : data(false), noDataCount(0), status(false) {
 800d6bc:	b580      	push	{r7, lr}
 800d6be:	b082      	sub	sp, #8
 800d6c0:	af00      	add	r7, sp, #0
 800d6c2:	6078      	str	r0, [r7, #4]
 800d6c4:	687b      	ldr	r3, [r7, #4]
 800d6c6:	4618      	mov	r0, r3
 800d6c8:	f000 fca0 	bl	800e00c <_ZN6ModuleC1Ev>
 800d6cc:	4a0a      	ldr	r2, [pc, #40]	@ (800d6f8 <_ZN12CommsHandlerC1Ev+0x3c>)
 800d6ce:	687b      	ldr	r3, [r7, #4]
 800d6d0:	601a      	str	r2, [r3, #0]
 800d6d2:	687b      	ldr	r3, [r7, #4]
 800d6d4:	3318      	adds	r3, #24
 800d6d6:	4618      	mov	r0, r3
 800d6d8:	f000 f8fa 	bl	800d8d0 <_ZNSt10unique_ptrI14CommsInterfaceSt14default_deleteIS0_EEC1IS2_vEEv>
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	2200      	movs	r2, #0
 800d6e0:	771a      	strb	r2, [r3, #28]
 800d6e2:	687b      	ldr	r3, [r7, #4]
 800d6e4:	2200      	movs	r2, #0
 800d6e6:	775a      	strb	r2, [r3, #29]
 800d6e8:	687b      	ldr	r3, [r7, #4]
 800d6ea:	2200      	movs	r2, #0
 800d6ec:	779a      	strb	r2, [r3, #30]

}
 800d6ee:	687b      	ldr	r3, [r7, #4]
 800d6f0:	4618      	mov	r0, r3
 800d6f2:	3708      	adds	r7, #8
 800d6f4:	46bd      	mov	sp, r7
 800d6f6:	bd80      	pop	{r7, pc}
 800d6f8:	080205c8 	.word	0x080205c8

0800d6fc <_ZN12CommsHandlerD1Ev>:

CommsHandler::~CommsHandler() {}
 800d6fc:	b580      	push	{r7, lr}
 800d6fe:	b082      	sub	sp, #8
 800d700:	af00      	add	r7, sp, #0
 800d702:	6078      	str	r0, [r7, #4]
 800d704:	4a08      	ldr	r2, [pc, #32]	@ (800d728 <_ZN12CommsHandlerD1Ev+0x2c>)
 800d706:	687b      	ldr	r3, [r7, #4]
 800d708:	601a      	str	r2, [r3, #0]
 800d70a:	687b      	ldr	r3, [r7, #4]
 800d70c:	3318      	adds	r3, #24
 800d70e:	4618      	mov	r0, r3
 800d710:	f7fc faef 	bl	8009cf2 <_ZNSt10unique_ptrI14CommsInterfaceSt14default_deleteIS0_EED1Ev>
 800d714:	687b      	ldr	r3, [r7, #4]
 800d716:	4618      	mov	r0, r3
 800d718:	f000 fc94 	bl	800e044 <_ZN6ModuleD1Ev>
 800d71c:	687b      	ldr	r3, [r7, #4]
 800d71e:	4618      	mov	r0, r3
 800d720:	3708      	adds	r7, #8
 800d722:	46bd      	mov	sp, r7
 800d724:	bd80      	pop	{r7, pc}
 800d726:	bf00      	nop
 800d728:	080205c8 	.word	0x080205c8

0800d72c <_ZN12CommsHandlerD0Ev>:
 800d72c:	b580      	push	{r7, lr}
 800d72e:	b082      	sub	sp, #8
 800d730:	af00      	add	r7, sp, #0
 800d732:	6078      	str	r0, [r7, #4]
 800d734:	6878      	ldr	r0, [r7, #4]
 800d736:	f7ff ffe1 	bl	800d6fc <_ZN12CommsHandlerD1Ev>
 800d73a:	2120      	movs	r1, #32
 800d73c:	6878      	ldr	r0, [r7, #4]
 800d73e:	f010 fd1c 	bl	801e17a <_ZdlPvj>
 800d742:	687b      	ldr	r3, [r7, #4]
 800d744:	4618      	mov	r0, r3
 800d746:	3708      	adds	r7, #8
 800d748:	46bd      	mov	sp, r7
 800d74a:	bd80      	pop	{r7, pc}

0800d74c <_ZZN12CommsHandler4initEvENKUlbE_clEb>:

void CommsHandler::init() {
    interface->setDataCallback([this](bool dataReceived) {
 800d74c:	b580      	push	{r7, lr}
 800d74e:	b082      	sub	sp, #8
 800d750:	af00      	add	r7, sp, #0
 800d752:	6078      	str	r0, [r7, #4]
 800d754:	460b      	mov	r3, r1
 800d756:	70fb      	strb	r3, [r7, #3]
 800d758:	687b      	ldr	r3, [r7, #4]
 800d75a:	681b      	ldr	r3, [r3, #0]
        this->setData(dataReceived);
 800d75c:	78fa      	ldrb	r2, [r7, #3]
 800d75e:	4611      	mov	r1, r2
 800d760:	4618      	mov	r0, r3
 800d762:	f7ff ff9b 	bl	800d69c <_ZN12CommsHandler7setDataEb>
    });
 800d766:	bf00      	nop
 800d768:	3708      	adds	r7, #8
 800d76a:	46bd      	mov	sp, r7
 800d76c:	bd80      	pop	{r7, pc}

0800d76e <_ZN12CommsHandler4initEv>:
void CommsHandler::init() {
 800d76e:	b590      	push	{r4, r7, lr}
 800d770:	b089      	sub	sp, #36	@ 0x24
 800d772:	af00      	add	r7, sp, #0
 800d774:	6078      	str	r0, [r7, #4]
    interface->setDataCallback([this](bool dataReceived) {
 800d776:	687b      	ldr	r3, [r7, #4]
 800d778:	3318      	adds	r3, #24
 800d77a:	4618      	mov	r0, r3
 800d77c:	f000 f8b8 	bl	800d8f0 <_ZNKSt10unique_ptrI14CommsInterfaceSt14default_deleteIS0_EEptEv>
 800d780:	4604      	mov	r4, r0
 800d782:	687b      	ldr	r3, [r7, #4]
 800d784:	61fb      	str	r3, [r7, #28]
 800d786:	f107 021c 	add.w	r2, r7, #28
 800d78a:	f107 030c 	add.w	r3, r7, #12
 800d78e:	4611      	mov	r1, r2
 800d790:	4618      	mov	r0, r3
 800d792:	f000 f8b9 	bl	800d908 <_ZNSt8functionIFvbEEC1IZN12CommsHandler4initEvEUlbE_vEEOT_>
 800d796:	f107 030c 	add.w	r3, r7, #12
 800d79a:	4619      	mov	r1, r3
 800d79c:	4620      	mov	r0, r4
 800d79e:	f7ff ff6e 	bl	800d67e <_ZN14CommsInterface15setDataCallbackERKSt8functionIFvbEE>
 800d7a2:	f107 030c 	add.w	r3, r7, #12
 800d7a6:	4618      	mov	r0, r3
 800d7a8:	f7f3 fad2 	bl	8000d50 <_ZNSt8functionIFvbEED1Ev>

    interface->init();
 800d7ac:	687b      	ldr	r3, [r7, #4]
 800d7ae:	3318      	adds	r3, #24
 800d7b0:	4618      	mov	r0, r3
 800d7b2:	f000 f89d 	bl	800d8f0 <_ZNKSt10unique_ptrI14CommsInterfaceSt14default_deleteIS0_EEptEv>
 800d7b6:	4603      	mov	r3, r0
 800d7b8:	681a      	ldr	r2, [r3, #0]
 800d7ba:	321c      	adds	r2, #28
 800d7bc:	6812      	ldr	r2, [r2, #0]
 800d7be:	4618      	mov	r0, r3
 800d7c0:	4790      	blx	r2
}
 800d7c2:	bf00      	nop
 800d7c4:	3724      	adds	r7, #36	@ 0x24
 800d7c6:	46bd      	mov	sp, r7
 800d7c8:	bd90      	pop	{r4, r7, pc}

0800d7ca <_ZN12CommsHandler5startEv>:

void CommsHandler::start() {
 800d7ca:	b580      	push	{r7, lr}
 800d7cc:	b082      	sub	sp, #8
 800d7ce:	af00      	add	r7, sp, #0
 800d7d0:	6078      	str	r0, [r7, #4]
	interface->start();
 800d7d2:	687b      	ldr	r3, [r7, #4]
 800d7d4:	3318      	adds	r3, #24
 800d7d6:	4618      	mov	r0, r3
 800d7d8:	f000 f88a 	bl	800d8f0 <_ZNKSt10unique_ptrI14CommsInterfaceSt14default_deleteIS0_EEptEv>
 800d7dc:	4603      	mov	r3, r0
 800d7de:	681a      	ldr	r2, [r3, #0]
 800d7e0:	3220      	adds	r2, #32
 800d7e2:	6812      	ldr	r2, [r2, #0]
 800d7e4:	4618      	mov	r0, r3
 800d7e6:	4790      	blx	r2
}
 800d7e8:	bf00      	nop
 800d7ea:	3708      	adds	r7, #8
 800d7ec:	46bd      	mov	sp, r7
 800d7ee:	bd80      	pop	{r7, pc}

0800d7f0 <_ZN12CommsHandler5tasksEv>:

// tasks is run in the main loop to do polling tasks, eg Ethernet, processing data etc
void CommsHandler::tasks() {
 800d7f0:	b580      	push	{r7, lr}
 800d7f2:	b082      	sub	sp, #8
 800d7f4:	af00      	add	r7, sp, #0
 800d7f6:	6078      	str	r0, [r7, #4]
	interface->tasks();
 800d7f8:	687b      	ldr	r3, [r7, #4]
 800d7fa:	3318      	adds	r3, #24
 800d7fc:	4618      	mov	r0, r3
 800d7fe:	f000 f877 	bl	800d8f0 <_ZNKSt10unique_ptrI14CommsInterfaceSt14default_deleteIS0_EEptEv>
 800d802:	4603      	mov	r3, r0
 800d804:	681a      	ldr	r2, [r3, #0]
 800d806:	3224      	adds	r2, #36	@ 0x24
 800d808:	6812      	ldr	r2, [r2, #0]
 800d80a:	4618      	mov	r0, r3
 800d80c:	4790      	blx	r2
}
 800d80e:	bf00      	nop
 800d810:	3708      	adds	r7, #8
 800d812:	46bd      	mov	sp, r7
 800d814:	bd80      	pop	{r7, pc}

0800d816 <_ZN12CommsHandler6updateEv>:

// update it run in the servo thread to monitor communications
void CommsHandler::update() {
 800d816:	b480      	push	{r7}
 800d818:	b083      	sub	sp, #12
 800d81a:	af00      	add	r7, sp, #0
 800d81c:	6078      	str	r0, [r7, #4]
	if (data)
 800d81e:	687b      	ldr	r3, [r7, #4]
 800d820:	7f1b      	ldrb	r3, [r3, #28]
 800d822:	2b00      	cmp	r3, #0
 800d824:	d006      	beq.n	800d834 <_ZN12CommsHandler6updateEv+0x1e>
	{
		noDataCount = 0;
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	2200      	movs	r2, #0
 800d82a:	775a      	strb	r2, [r3, #29]
		status = true;
 800d82c:	687b      	ldr	r3, [r7, #4]
 800d82e:	2201      	movs	r2, #1
 800d830:	779a      	strb	r2, [r3, #30]
 800d832:	e005      	b.n	800d840 <_ZN12CommsHandler6updateEv+0x2a>
	}
	else
	{
		noDataCount++;
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	7f5b      	ldrb	r3, [r3, #29]
 800d838:	3301      	adds	r3, #1
 800d83a:	b2da      	uxtb	r2, r3
 800d83c:	687b      	ldr	r3, [r7, #4]
 800d83e:	775a      	strb	r2, [r3, #29]
	}

	if (noDataCount > Config::dataErrMax)
 800d840:	687b      	ldr	r3, [r7, #4]
 800d842:	7f5b      	ldrb	r3, [r3, #29]
 800d844:	2b64      	cmp	r3, #100	@ 0x64
 800d846:	d905      	bls.n	800d854 <_ZN12CommsHandler6updateEv+0x3e>
	{
		noDataCount = 0;
 800d848:	687b      	ldr	r3, [r7, #4]
 800d84a:	2200      	movs	r2, #0
 800d84c:	775a      	strb	r2, [r3, #29]
		status = false;
 800d84e:	687b      	ldr	r3, [r7, #4]
 800d850:	2200      	movs	r2, #0
 800d852:	779a      	strb	r2, [r3, #30]
	}

	data = false;
 800d854:	687b      	ldr	r3, [r7, #4]
 800d856:	2200      	movs	r2, #0
 800d858:	771a      	strb	r2, [r3, #28]
}
 800d85a:	bf00      	nop
 800d85c:	370c      	adds	r7, #12
 800d85e:	46bd      	mov	sp, r7
 800d860:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d864:	4770      	bx	lr

0800d866 <_ZNSt8functionIFvbEEaSERKS1_>:
      operator=(const function& __x)
 800d866:	b580      	push	{r7, lr}
 800d868:	b086      	sub	sp, #24
 800d86a:	af00      	add	r7, sp, #0
 800d86c:	6078      	str	r0, [r7, #4]
 800d86e:	6039      	str	r1, [r7, #0]
	function(__x).swap(*this);
 800d870:	f107 0308 	add.w	r3, r7, #8
 800d874:	6839      	ldr	r1, [r7, #0]
 800d876:	4618      	mov	r0, r3
 800d878:	f000 f876 	bl	800d968 <_ZNSt8functionIFvbEEC1ERKS1_>
 800d87c:	f107 0308 	add.w	r3, r7, #8
 800d880:	6879      	ldr	r1, [r7, #4]
 800d882:	4618      	mov	r0, r3
 800d884:	f000 f89b 	bl	800d9be <_ZNSt8functionIFvbEE4swapERS1_>
 800d888:	f107 0308 	add.w	r3, r7, #8
 800d88c:	4618      	mov	r0, r3
 800d88e:	f7f3 fa5f 	bl	8000d50 <_ZNSt8functionIFvbEED1Ev>
	return *this;
 800d892:	687b      	ldr	r3, [r7, #4]
      }
 800d894:	4618      	mov	r0, r3
 800d896:	3718      	adds	r7, #24
 800d898:	46bd      	mov	sp, r7
 800d89a:	bd80      	pop	{r7, pc}

0800d89c <_ZNSt15__uniq_ptr_implI14CommsInterfaceSt14default_deleteIS0_EEC1Ev>:
      __uniq_ptr_impl() = default;
 800d89c:	b580      	push	{r7, lr}
 800d89e:	b082      	sub	sp, #8
 800d8a0:	af00      	add	r7, sp, #0
 800d8a2:	6078      	str	r0, [r7, #4]
 800d8a4:	687b      	ldr	r3, [r7, #4]
 800d8a6:	4618      	mov	r0, r3
 800d8a8:	f000 f8aa 	bl	800da00 <_ZNSt5tupleIJP14CommsInterfaceSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>
 800d8ac:	687b      	ldr	r3, [r7, #4]
 800d8ae:	4618      	mov	r0, r3
 800d8b0:	3708      	adds	r7, #8
 800d8b2:	46bd      	mov	sp, r7
 800d8b4:	bd80      	pop	{r7, pc}

0800d8b6 <_ZNSt15__uniq_ptr_dataI14CommsInterfaceSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEv>:
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 800d8b6:	b580      	push	{r7, lr}
 800d8b8:	b082      	sub	sp, #8
 800d8ba:	af00      	add	r7, sp, #0
 800d8bc:	6078      	str	r0, [r7, #4]
 800d8be:	687b      	ldr	r3, [r7, #4]
 800d8c0:	4618      	mov	r0, r3
 800d8c2:	f7ff ffeb 	bl	800d89c <_ZNSt15__uniq_ptr_implI14CommsInterfaceSt14default_deleteIS0_EEC1Ev>
 800d8c6:	687b      	ldr	r3, [r7, #4]
 800d8c8:	4618      	mov	r0, r3
 800d8ca:	3708      	adds	r7, #8
 800d8cc:	46bd      	mov	sp, r7
 800d8ce:	bd80      	pop	{r7, pc}

0800d8d0 <_ZNSt10unique_ptrI14CommsInterfaceSt14default_deleteIS0_EEC1IS2_vEEv>:
	constexpr unique_ptr() noexcept
 800d8d0:	b580      	push	{r7, lr}
 800d8d2:	b082      	sub	sp, #8
 800d8d4:	af00      	add	r7, sp, #0
 800d8d6:	6078      	str	r0, [r7, #4]
	: _M_t()
 800d8d8:	687b      	ldr	r3, [r7, #4]
 800d8da:	2200      	movs	r2, #0
 800d8dc:	601a      	str	r2, [r3, #0]
 800d8de:	687b      	ldr	r3, [r7, #4]
 800d8e0:	4618      	mov	r0, r3
 800d8e2:	f7ff ffe8 	bl	800d8b6 <_ZNSt15__uniq_ptr_dataI14CommsInterfaceSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEv>
	{ }
 800d8e6:	687b      	ldr	r3, [r7, #4]
 800d8e8:	4618      	mov	r0, r3
 800d8ea:	3708      	adds	r7, #8
 800d8ec:	46bd      	mov	sp, r7
 800d8ee:	bd80      	pop	{r7, pc}

0800d8f0 <_ZNKSt10unique_ptrI14CommsInterfaceSt14default_deleteIS0_EEptEv>:
      operator->() const noexcept
 800d8f0:	b580      	push	{r7, lr}
 800d8f2:	b082      	sub	sp, #8
 800d8f4:	af00      	add	r7, sp, #0
 800d8f6:	6078      	str	r0, [r7, #4]
	return get();
 800d8f8:	6878      	ldr	r0, [r7, #4]
 800d8fa:	f000 f88e 	bl	800da1a <_ZNKSt10unique_ptrI14CommsInterfaceSt14default_deleteIS0_EE3getEv>
 800d8fe:	4603      	mov	r3, r0
      }
 800d900:	4618      	mov	r0, r3
 800d902:	3708      	adds	r7, #8
 800d904:	46bd      	mov	sp, r7
 800d906:	bd80      	pop	{r7, pc}

0800d908 <_ZNSt8functionIFvbEEC1IZN12CommsHandler4initEvEUlbE_vEEOT_>:
	function(_Functor&& __f)
 800d908:	b590      	push	{r4, r7, lr}
 800d90a:	b083      	sub	sp, #12
 800d90c:	af00      	add	r7, sp, #0
 800d90e:	6078      	str	r0, [r7, #4]
 800d910:	6039      	str	r1, [r7, #0]
	: _Function_base()
 800d912:	687b      	ldr	r3, [r7, #4]
 800d914:	461a      	mov	r2, r3
 800d916:	2300      	movs	r3, #0
 800d918:	6013      	str	r3, [r2, #0]
 800d91a:	6053      	str	r3, [r2, #4]
 800d91c:	6093      	str	r3, [r2, #8]
 800d91e:	687b      	ldr	r3, [r7, #4]
 800d920:	4618      	mov	r0, r3
 800d922:	f7f4 fc31 	bl	8002188 <_ZNSt14_Function_baseC1Ev>
 800d926:	687b      	ldr	r3, [r7, #4]
 800d928:	2200      	movs	r2, #0
 800d92a:	60da      	str	r2, [r3, #12]
	  if (_My_handler::_M_not_empty_function(__f))
 800d92c:	6838      	ldr	r0, [r7, #0]
 800d92e:	f000 f881 	bl	800da34 <_ZNSt14_Function_base13_Base_managerIZN12CommsHandler4initEvEUlbE_E21_M_not_empty_functionIS2_EEbRKT_>
 800d932:	4603      	mov	r3, r0
 800d934:	2b00      	cmp	r3, #0
 800d936:	d00e      	beq.n	800d956 <_ZNSt8functionIFvbEEC1IZN12CommsHandler4initEvEUlbE_vEEOT_+0x4e>
	      _My_handler::_M_init_functor(_M_functor,
 800d938:	687c      	ldr	r4, [r7, #4]
 800d93a:	6838      	ldr	r0, [r7, #0]
 800d93c:	f000 f885 	bl	800da4a <_ZSt7forwardIZN12CommsHandler4initEvEUlbE_EOT_RNSt16remove_referenceIS2_E4typeE>
 800d940:	4603      	mov	r3, r0
 800d942:	4619      	mov	r1, r3
 800d944:	4620      	mov	r0, r4
 800d946:	f000 f88b 	bl	800da60 <_ZNSt14_Function_base13_Base_managerIZN12CommsHandler4initEvEUlbE_E15_M_init_functorIS2_EEvRSt9_Any_dataOT_>
	      _M_invoker = &_My_handler::_M_invoke;
 800d94a:	687b      	ldr	r3, [r7, #4]
 800d94c:	4a04      	ldr	r2, [pc, #16]	@ (800d960 <_ZNSt8functionIFvbEEC1IZN12CommsHandler4initEvEUlbE_vEEOT_+0x58>)
 800d94e:	60da      	str	r2, [r3, #12]
	      _M_manager = &_My_handler::_M_manager;
 800d950:	687b      	ldr	r3, [r7, #4]
 800d952:	4a04      	ldr	r2, [pc, #16]	@ (800d964 <_ZNSt8functionIFvbEEC1IZN12CommsHandler4initEvEUlbE_vEEOT_+0x5c>)
 800d954:	609a      	str	r2, [r3, #8]
	}
 800d956:	687b      	ldr	r3, [r7, #4]
 800d958:	4618      	mov	r0, r3
 800d95a:	370c      	adds	r7, #12
 800d95c:	46bd      	mov	sp, r7
 800d95e:	bd90      	pop	{r4, r7, pc}
 800d960:	0800da85 	.word	0x0800da85
 800d964:	0800daaf 	.word	0x0800daaf

0800d968 <_ZNSt8functionIFvbEEC1ERKS1_>:
      function(const function& __x)
 800d968:	b580      	push	{r7, lr}
 800d96a:	b082      	sub	sp, #8
 800d96c:	af00      	add	r7, sp, #0
 800d96e:	6078      	str	r0, [r7, #4]
 800d970:	6039      	str	r1, [r7, #0]
      : _Function_base()
 800d972:	687b      	ldr	r3, [r7, #4]
 800d974:	461a      	mov	r2, r3
 800d976:	2300      	movs	r3, #0
 800d978:	6013      	str	r3, [r2, #0]
 800d97a:	6053      	str	r3, [r2, #4]
 800d97c:	6093      	str	r3, [r2, #8]
 800d97e:	687b      	ldr	r3, [r7, #4]
 800d980:	4618      	mov	r0, r3
 800d982:	f7f4 fc01 	bl	8002188 <_ZNSt14_Function_baseC1Ev>
 800d986:	687b      	ldr	r3, [r7, #4]
 800d988:	2200      	movs	r2, #0
 800d98a:	60da      	str	r2, [r3, #12]
	if (static_cast<bool>(__x))
 800d98c:	6838      	ldr	r0, [r7, #0]
 800d98e:	f000 f8ad 	bl	800daec <_ZNKSt8functionIFvbEEcvbEv>
 800d992:	4603      	mov	r3, r0
 800d994:	2b00      	cmp	r3, #0
 800d996:	d00d      	beq.n	800d9b4 <_ZNSt8functionIFvbEEC1ERKS1_+0x4c>
	    __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 800d998:	683b      	ldr	r3, [r7, #0]
 800d99a:	689b      	ldr	r3, [r3, #8]
 800d99c:	6878      	ldr	r0, [r7, #4]
 800d99e:	6839      	ldr	r1, [r7, #0]
 800d9a0:	2202      	movs	r2, #2
 800d9a2:	4798      	blx	r3
	    _M_invoker = __x._M_invoker;
 800d9a4:	683b      	ldr	r3, [r7, #0]
 800d9a6:	68da      	ldr	r2, [r3, #12]
 800d9a8:	687b      	ldr	r3, [r7, #4]
 800d9aa:	60da      	str	r2, [r3, #12]
	    _M_manager = __x._M_manager;
 800d9ac:	683b      	ldr	r3, [r7, #0]
 800d9ae:	689a      	ldr	r2, [r3, #8]
 800d9b0:	687b      	ldr	r3, [r7, #4]
 800d9b2:	609a      	str	r2, [r3, #8]
      }
 800d9b4:	687b      	ldr	r3, [r7, #4]
 800d9b6:	4618      	mov	r0, r3
 800d9b8:	3708      	adds	r7, #8
 800d9ba:	46bd      	mov	sp, r7
 800d9bc:	bd80      	pop	{r7, pc}

0800d9be <_ZNSt8functionIFvbEE4swapERS1_>:
      void swap(function& __x) noexcept
 800d9be:	b580      	push	{r7, lr}
 800d9c0:	b082      	sub	sp, #8
 800d9c2:	af00      	add	r7, sp, #0
 800d9c4:	6078      	str	r0, [r7, #4]
 800d9c6:	6039      	str	r1, [r7, #0]
	std::swap(_M_functor, __x._M_functor);
 800d9c8:	687b      	ldr	r3, [r7, #4]
 800d9ca:	683a      	ldr	r2, [r7, #0]
 800d9cc:	4611      	mov	r1, r2
 800d9ce:	4618      	mov	r0, r3
 800d9d0:	f000 f89c 	bl	800db0c <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
	std::swap(_M_manager, __x._M_manager);
 800d9d4:	687b      	ldr	r3, [r7, #4]
 800d9d6:	f103 0208 	add.w	r2, r3, #8
 800d9da:	683b      	ldr	r3, [r7, #0]
 800d9dc:	3308      	adds	r3, #8
 800d9de:	4619      	mov	r1, r3
 800d9e0:	4610      	mov	r0, r2
 800d9e2:	f000 f8ba 	bl	800db5a <_ZSt4swapIPFbRSt9_Any_dataRKS0_St18_Manager_operationEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISB_ESt18is_move_assignableISB_EEE5valueEvE4typeERSB_SL_>
	std::swap(_M_invoker, __x._M_invoker);
 800d9e6:	687b      	ldr	r3, [r7, #4]
 800d9e8:	f103 020c 	add.w	r2, r3, #12
 800d9ec:	683b      	ldr	r3, [r7, #0]
 800d9ee:	330c      	adds	r3, #12
 800d9f0:	4619      	mov	r1, r3
 800d9f2:	4610      	mov	r0, r2
 800d9f4:	f000 f8d0 	bl	800db98 <_ZSt4swapIPFvRKSt9_Any_dataObEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISA_ESt18is_move_assignableISA_EEE5valueEvE4typeERSA_SK_>
      }
 800d9f8:	bf00      	nop
 800d9fa:	3708      	adds	r7, #8
 800d9fc:	46bd      	mov	sp, r7
 800d9fe:	bd80      	pop	{r7, pc}

0800da00 <_ZNSt5tupleIJP14CommsInterfaceSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>:
	tuple()
 800da00:	b580      	push	{r7, lr}
 800da02:	b082      	sub	sp, #8
 800da04:	af00      	add	r7, sp, #0
 800da06:	6078      	str	r0, [r7, #4]
	: _Inherited() { }
 800da08:	687b      	ldr	r3, [r7, #4]
 800da0a:	4618      	mov	r0, r3
 800da0c:	f000 f8e3 	bl	800dbd6 <_ZNSt11_Tuple_implILj0EJP14CommsInterfaceSt14default_deleteIS0_EEEC1Ev>
 800da10:	687b      	ldr	r3, [r7, #4]
 800da12:	4618      	mov	r0, r3
 800da14:	3708      	adds	r7, #8
 800da16:	46bd      	mov	sp, r7
 800da18:	bd80      	pop	{r7, pc}

0800da1a <_ZNKSt10unique_ptrI14CommsInterfaceSt14default_deleteIS0_EE3getEv>:
      get() const noexcept
 800da1a:	b580      	push	{r7, lr}
 800da1c:	b082      	sub	sp, #8
 800da1e:	af00      	add	r7, sp, #0
 800da20:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 800da22:	687b      	ldr	r3, [r7, #4]
 800da24:	4618      	mov	r0, r3
 800da26:	f000 f8e6 	bl	800dbf6 <_ZNKSt15__uniq_ptr_implI14CommsInterfaceSt14default_deleteIS0_EE6_M_ptrEv>
 800da2a:	4603      	mov	r3, r0
 800da2c:	4618      	mov	r0, r3
 800da2e:	3708      	adds	r7, #8
 800da30:	46bd      	mov	sp, r7
 800da32:	bd80      	pop	{r7, pc}

0800da34 <_ZNSt14_Function_base13_Base_managerIZN12CommsHandler4initEvEUlbE_E21_M_not_empty_functionIS2_EEbRKT_>:
	  _M_not_empty_function(const _Tp&) noexcept
 800da34:	b480      	push	{r7}
 800da36:	b083      	sub	sp, #12
 800da38:	af00      	add	r7, sp, #0
 800da3a:	6078      	str	r0, [r7, #4]
	  { return true; }
 800da3c:	2301      	movs	r3, #1
 800da3e:	4618      	mov	r0, r3
 800da40:	370c      	adds	r7, #12
 800da42:	46bd      	mov	sp, r7
 800da44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da48:	4770      	bx	lr

0800da4a <_ZSt7forwardIZN12CommsHandler4initEvEUlbE_EOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800da4a:	b480      	push	{r7}
 800da4c:	b083      	sub	sp, #12
 800da4e:	af00      	add	r7, sp, #0
 800da50:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800da52:	687b      	ldr	r3, [r7, #4]
 800da54:	4618      	mov	r0, r3
 800da56:	370c      	adds	r7, #12
 800da58:	46bd      	mov	sp, r7
 800da5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da5e:	4770      	bx	lr

0800da60 <_ZNSt14_Function_base13_Base_managerIZN12CommsHandler4initEvEUlbE_E15_M_init_functorIS2_EEvRSt9_Any_dataOT_>:
	  _M_init_functor(_Any_data& __functor, _Fn&& __f)
 800da60:	b590      	push	{r4, r7, lr}
 800da62:	b083      	sub	sp, #12
 800da64:	af00      	add	r7, sp, #0
 800da66:	6078      	str	r0, [r7, #4]
 800da68:	6039      	str	r1, [r7, #0]
	    _M_create(__functor, std::forward<_Fn>(__f), _Local_storage());
 800da6a:	6838      	ldr	r0, [r7, #0]
 800da6c:	f7ff ffed 	bl	800da4a <_ZSt7forwardIZN12CommsHandler4initEvEUlbE_EOT_RNSt16remove_referenceIS2_E4typeE>
 800da70:	4603      	mov	r3, r0
 800da72:	4622      	mov	r2, r4
 800da74:	4619      	mov	r1, r3
 800da76:	6878      	ldr	r0, [r7, #4]
 800da78:	f000 f8cb 	bl	800dc12 <_ZNSt14_Function_base13_Base_managerIZN12CommsHandler4initEvEUlbE_E9_M_createIS2_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>
	  }
 800da7c:	bf00      	nop
 800da7e:	370c      	adds	r7, #12
 800da80:	46bd      	mov	sp, r7
 800da82:	bd90      	pop	{r4, r7, pc}

0800da84 <_ZNSt17_Function_handlerIFvbEZN12CommsHandler4initEvEUlbE_E9_M_invokeERKSt9_Any_dataOb>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 800da84:	b590      	push	{r4, r7, lr}
 800da86:	b083      	sub	sp, #12
 800da88:	af00      	add	r7, sp, #0
 800da8a:	6078      	str	r0, [r7, #4]
 800da8c:	6039      	str	r1, [r7, #0]
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
 800da8e:	6878      	ldr	r0, [r7, #4]
 800da90:	f000 f8d8 	bl	800dc44 <_ZNSt14_Function_base13_Base_managerIZN12CommsHandler4initEvEUlbE_E14_M_get_pointerERKSt9_Any_data>
 800da94:	4604      	mov	r4, r0
 800da96:	6838      	ldr	r0, [r7, #0]
 800da98:	f7f4 fab4 	bl	8002004 <_ZSt7forwardIbEOT_RNSt16remove_referenceIS0_E4typeE>
 800da9c:	4603      	mov	r3, r0
 800da9e:	4619      	mov	r1, r3
 800daa0:	4620      	mov	r0, r4
 800daa2:	f000 f8df 	bl	800dc64 <_ZSt10__invoke_rIvRZN12CommsHandler4initEvEUlbE_JbEENSt9enable_ifIX16is_invocable_r_vIT_T0_DpT1_EES4_E4typeEOS5_DpOS6_>
				     std::forward<_ArgTypes>(__args)...);
 800daa6:	bf00      	nop
      }
 800daa8:	370c      	adds	r7, #12
 800daaa:	46bd      	mov	sp, r7
 800daac:	bd90      	pop	{r4, r7, pc}

0800daae <_ZNSt17_Function_handlerIFvbEZN12CommsHandler4initEvEUlbE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>:
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 800daae:	b590      	push	{r4, r7, lr}
 800dab0:	b085      	sub	sp, #20
 800dab2:	af00      	add	r7, sp, #0
 800dab4:	60f8      	str	r0, [r7, #12]
 800dab6:	60b9      	str	r1, [r7, #8]
 800dab8:	4613      	mov	r3, r2
 800daba:	71fb      	strb	r3, [r7, #7]
	switch (__op)
 800dabc:	79fb      	ldrb	r3, [r7, #7]
 800dabe:	2b01      	cmp	r3, #1
 800dac0:	d109      	bne.n	800dad6 <_ZNSt17_Function_handlerIFvbEZN12CommsHandler4initEvEUlbE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x28>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 800dac2:	68b8      	ldr	r0, [r7, #8]
 800dac4:	f000 f8be 	bl	800dc44 <_ZNSt14_Function_base13_Base_managerIZN12CommsHandler4initEvEUlbE_E14_M_get_pointerERKSt9_Any_data>
 800dac8:	4604      	mov	r4, r0
 800daca:	68f8      	ldr	r0, [r7, #12]
 800dacc:	f000 f8e0 	bl	800dc90 <_ZNSt9_Any_data9_M_accessIPZN12CommsHandler4initEvEUlbE_EERT_v>
 800dad0:	4603      	mov	r3, r0
 800dad2:	601c      	str	r4, [r3, #0]
	    break;
 800dad4:	e005      	b.n	800dae2 <_ZNSt17_Function_handlerIFvbEZN12CommsHandler4initEvEUlbE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x34>
	    _Base::_M_manager(__dest, __source, __op);
 800dad6:	79fb      	ldrb	r3, [r7, #7]
 800dad8:	461a      	mov	r2, r3
 800dada:	68b9      	ldr	r1, [r7, #8]
 800dadc:	68f8      	ldr	r0, [r7, #12]
 800dade:	f000 f8e3 	bl	800dca8 <_ZNSt14_Function_base13_Base_managerIZN12CommsHandler4initEvEUlbE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>
	return false;
 800dae2:	2300      	movs	r3, #0
      }
 800dae4:	4618      	mov	r0, r3
 800dae6:	3714      	adds	r7, #20
 800dae8:	46bd      	mov	sp, r7
 800daea:	bd90      	pop	{r4, r7, pc}

0800daec <_ZNKSt8functionIFvbEEcvbEv>:
      explicit operator bool() const noexcept
 800daec:	b580      	push	{r7, lr}
 800daee:	b082      	sub	sp, #8
 800daf0:	af00      	add	r7, sp, #0
 800daf2:	6078      	str	r0, [r7, #4]
      { return !_M_empty(); }
 800daf4:	687b      	ldr	r3, [r7, #4]
 800daf6:	4618      	mov	r0, r3
 800daf8:	f7f3 f8e9 	bl	8000cce <_ZNKSt14_Function_base8_M_emptyEv>
 800dafc:	4603      	mov	r3, r0
 800dafe:	f083 0301 	eor.w	r3, r3, #1
 800db02:	b2db      	uxtb	r3, r3
 800db04:	4618      	mov	r0, r3
 800db06:	3708      	adds	r7, #8
 800db08:	46bd      	mov	sp, r7
 800db0a:	bd80      	pop	{r7, pc}

0800db0c <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
#else
    void
#endif
    swap(_Tp& __a, _Tp& __b)
 800db0c:	b580      	push	{r7, lr}
 800db0e:	b084      	sub	sp, #16
 800db10:	af00      	add	r7, sp, #0
 800db12:	6078      	str	r0, [r7, #4]
 800db14:	6039      	str	r1, [r7, #0]
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 800db16:	6878      	ldr	r0, [r7, #4]
 800db18:	f000 f900 	bl	800dd1c <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 800db1c:	4602      	mov	r2, r0
 800db1e:	f107 0308 	add.w	r3, r7, #8
 800db22:	e892 0003 	ldmia.w	r2, {r0, r1}
 800db26:	e883 0003 	stmia.w	r3, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 800db2a:	6838      	ldr	r0, [r7, #0]
 800db2c:	f000 f8f6 	bl	800dd1c <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 800db30:	4602      	mov	r2, r0
 800db32:	687b      	ldr	r3, [r7, #4]
 800db34:	e892 0003 	ldmia.w	r2, {r0, r1}
 800db38:	e883 0003 	stmia.w	r3, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 800db3c:	f107 0308 	add.w	r3, r7, #8
 800db40:	4618      	mov	r0, r3
 800db42:	f000 f8eb 	bl	800dd1c <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 800db46:	4602      	mov	r2, r0
 800db48:	683b      	ldr	r3, [r7, #0]
 800db4a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800db4e:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 800db52:	bf00      	nop
 800db54:	3710      	adds	r7, #16
 800db56:	46bd      	mov	sp, r7
 800db58:	bd80      	pop	{r7, pc}

0800db5a <_ZSt4swapIPFbRSt9_Any_dataRKS0_St18_Manager_operationEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISB_ESt18is_move_assignableISB_EEE5valueEvE4typeERSB_SL_>:
    swap(_Tp& __a, _Tp& __b)
 800db5a:	b580      	push	{r7, lr}
 800db5c:	b084      	sub	sp, #16
 800db5e:	af00      	add	r7, sp, #0
 800db60:	6078      	str	r0, [r7, #4]
 800db62:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 800db64:	6878      	ldr	r0, [r7, #4]
 800db66:	f000 f8e4 	bl	800dd32 <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 800db6a:	4603      	mov	r3, r0
 800db6c:	681b      	ldr	r3, [r3, #0]
 800db6e:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 800db70:	6838      	ldr	r0, [r7, #0]
 800db72:	f000 f8de 	bl	800dd32 <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 800db76:	4603      	mov	r3, r0
 800db78:	681a      	ldr	r2, [r3, #0]
 800db7a:	687b      	ldr	r3, [r7, #4]
 800db7c:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 800db7e:	f107 030c 	add.w	r3, r7, #12
 800db82:	4618      	mov	r0, r3
 800db84:	f000 f8d5 	bl	800dd32 <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 800db88:	4603      	mov	r3, r0
 800db8a:	681a      	ldr	r2, [r3, #0]
 800db8c:	683b      	ldr	r3, [r7, #0]
 800db8e:	601a      	str	r2, [r3, #0]
    }
 800db90:	bf00      	nop
 800db92:	3710      	adds	r7, #16
 800db94:	46bd      	mov	sp, r7
 800db96:	bd80      	pop	{r7, pc}

0800db98 <_ZSt4swapIPFvRKSt9_Any_dataObEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISA_ESt18is_move_assignableISA_EEE5valueEvE4typeERSA_SK_>:
    swap(_Tp& __a, _Tp& __b)
 800db98:	b580      	push	{r7, lr}
 800db9a:	b084      	sub	sp, #16
 800db9c:	af00      	add	r7, sp, #0
 800db9e:	6078      	str	r0, [r7, #4]
 800dba0:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 800dba2:	6878      	ldr	r0, [r7, #4]
 800dba4:	f000 f8d0 	bl	800dd48 <_ZSt4moveIRPFvRKSt9_Any_dataObEEONSt16remove_referenceIT_E4typeEOS8_>
 800dba8:	4603      	mov	r3, r0
 800dbaa:	681b      	ldr	r3, [r3, #0]
 800dbac:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 800dbae:	6838      	ldr	r0, [r7, #0]
 800dbb0:	f000 f8ca 	bl	800dd48 <_ZSt4moveIRPFvRKSt9_Any_dataObEEONSt16remove_referenceIT_E4typeEOS8_>
 800dbb4:	4603      	mov	r3, r0
 800dbb6:	681a      	ldr	r2, [r3, #0]
 800dbb8:	687b      	ldr	r3, [r7, #4]
 800dbba:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 800dbbc:	f107 030c 	add.w	r3, r7, #12
 800dbc0:	4618      	mov	r0, r3
 800dbc2:	f000 f8c1 	bl	800dd48 <_ZSt4moveIRPFvRKSt9_Any_dataObEEONSt16remove_referenceIT_E4typeEOS8_>
 800dbc6:	4603      	mov	r3, r0
 800dbc8:	681a      	ldr	r2, [r3, #0]
 800dbca:	683b      	ldr	r3, [r7, #0]
 800dbcc:	601a      	str	r2, [r3, #0]
    }
 800dbce:	bf00      	nop
 800dbd0:	3710      	adds	r7, #16
 800dbd2:	46bd      	mov	sp, r7
 800dbd4:	bd80      	pop	{r7, pc}

0800dbd6 <_ZNSt11_Tuple_implILj0EJP14CommsInterfaceSt14default_deleteIS0_EEEC1Ev>:
      constexpr _Tuple_impl()
 800dbd6:	b580      	push	{r7, lr}
 800dbd8:	b082      	sub	sp, #8
 800dbda:	af00      	add	r7, sp, #0
 800dbdc:	6078      	str	r0, [r7, #4]
      : _Inherited(), _Base() { }
 800dbde:	6878      	ldr	r0, [r7, #4]
 800dbe0:	f000 f8bd 	bl	800dd5e <_ZNSt11_Tuple_implILj1EJSt14default_deleteI14CommsInterfaceEEEC1Ev>
 800dbe4:	687b      	ldr	r3, [r7, #4]
 800dbe6:	4618      	mov	r0, r3
 800dbe8:	f000 f8c5 	bl	800dd76 <_ZNSt10_Head_baseILj0EP14CommsInterfaceLb0EEC1Ev>
 800dbec:	687b      	ldr	r3, [r7, #4]
 800dbee:	4618      	mov	r0, r3
 800dbf0:	3708      	adds	r7, #8
 800dbf2:	46bd      	mov	sp, r7
 800dbf4:	bd80      	pop	{r7, pc}

0800dbf6 <_ZNKSt15__uniq_ptr_implI14CommsInterfaceSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer    _M_ptr() const noexcept { return std::get<0>(_M_t); }
 800dbf6:	b580      	push	{r7, lr}
 800dbf8:	b082      	sub	sp, #8
 800dbfa:	af00      	add	r7, sp, #0
 800dbfc:	6078      	str	r0, [r7, #4]
 800dbfe:	687b      	ldr	r3, [r7, #4]
 800dc00:	4618      	mov	r0, r3
 800dc02:	f000 f8c6 	bl	800dd92 <_ZSt3getILj0EJP14CommsInterfaceSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>
 800dc06:	4603      	mov	r3, r0
 800dc08:	681b      	ldr	r3, [r3, #0]
 800dc0a:	4618      	mov	r0, r3
 800dc0c:	3708      	adds	r7, #8
 800dc0e:	46bd      	mov	sp, r7
 800dc10:	bd80      	pop	{r7, pc}

0800dc12 <_ZNSt14_Function_base13_Base_managerIZN12CommsHandler4initEvEUlbE_E9_M_createIS2_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>:
	  _M_create(_Any_data& __dest, _Fn&& __f, true_type)
 800dc12:	b590      	push	{r4, r7, lr}
 800dc14:	b085      	sub	sp, #20
 800dc16:	af00      	add	r7, sp, #0
 800dc18:	60f8      	str	r0, [r7, #12]
 800dc1a:	60b9      	str	r1, [r7, #8]
 800dc1c:	713a      	strb	r2, [r7, #4]
	    ::new (__dest._M_access()) _Functor(std::forward<_Fn>(__f));
 800dc1e:	68f8      	ldr	r0, [r7, #12]
 800dc20:	f7ff fd17 	bl	800d652 <_ZNSt9_Any_data9_M_accessEv>
 800dc24:	4603      	mov	r3, r0
 800dc26:	4619      	mov	r1, r3
 800dc28:	2004      	movs	r0, #4
 800dc2a:	f7fe f9ef 	bl	800c00c <_ZnwjPv>
 800dc2e:	4604      	mov	r4, r0
 800dc30:	68b8      	ldr	r0, [r7, #8]
 800dc32:	f7ff ff0a 	bl	800da4a <_ZSt7forwardIZN12CommsHandler4initEvEUlbE_EOT_RNSt16remove_referenceIS2_E4typeE>
 800dc36:	4603      	mov	r3, r0
 800dc38:	681b      	ldr	r3, [r3, #0]
 800dc3a:	6023      	str	r3, [r4, #0]
	  }
 800dc3c:	bf00      	nop
 800dc3e:	3714      	adds	r7, #20
 800dc40:	46bd      	mov	sp, r7
 800dc42:	bd90      	pop	{r4, r7, pc}

0800dc44 <_ZNSt14_Function_base13_Base_managerIZN12CommsHandler4initEvEUlbE_E14_M_get_pointerERKSt9_Any_data>:
	_M_get_pointer(const _Any_data& __source) noexcept
 800dc44:	b580      	push	{r7, lr}
 800dc46:	b084      	sub	sp, #16
 800dc48:	af00      	add	r7, sp, #0
 800dc4a:	6078      	str	r0, [r7, #4]
	      const _Functor& __f = __source._M_access<_Functor>();
 800dc4c:	6878      	ldr	r0, [r7, #4]
 800dc4e:	f000 f8ad 	bl	800ddac <_ZNKSt9_Any_data9_M_accessIZN12CommsHandler4initEvEUlbE_EERKT_v>
 800dc52:	60f8      	str	r0, [r7, #12]
	      return const_cast<_Functor*>(std::__addressof(__f));
 800dc54:	68f8      	ldr	r0, [r7, #12]
 800dc56:	f000 f8b5 	bl	800ddc4 <_ZSt11__addressofIKZN12CommsHandler4initEvEUlbE_EPT_RS3_>
 800dc5a:	4603      	mov	r3, r0
	}
 800dc5c:	4618      	mov	r0, r3
 800dc5e:	3710      	adds	r7, #16
 800dc60:	46bd      	mov	sp, r7
 800dc62:	bd80      	pop	{r7, pc}

0800dc64 <_ZSt10__invoke_rIvRZN12CommsHandler4initEvEUlbE_JbEENSt9enable_ifIX16is_invocable_r_vIT_T0_DpT1_EES4_E4typeEOS5_DpOS6_>:

#if __cplusplus >= 201703L
  // INVOKE<R>: Invoke a callable object and convert the result to R.
  template<typename _Res, typename _Callable, typename... _Args>
    constexpr enable_if_t<is_invocable_r_v<_Res, _Callable, _Args...>, _Res>
    __invoke_r(_Callable&& __fn, _Args&&... __args)
 800dc64:	b5b0      	push	{r4, r5, r7, lr}
 800dc66:	b082      	sub	sp, #8
 800dc68:	af00      	add	r7, sp, #0
 800dc6a:	6078      	str	r0, [r7, #4]
 800dc6c:	6039      	str	r1, [r7, #0]
    {
      using __result = __invoke_result<_Callable, _Args...>;
      using __type = typename __result::type;
      using __tag = typename __result::__invoke_type;
      if constexpr (is_void_v<_Res>)
	std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 800dc6e:	6878      	ldr	r0, [r7, #4]
 800dc70:	f000 f8b3 	bl	800ddda <_ZSt7forwardIRZN12CommsHandler4initEvEUlbE_EOT_RNSt16remove_referenceIS3_E4typeE>
 800dc74:	4604      	mov	r4, r0
 800dc76:	6838      	ldr	r0, [r7, #0]
 800dc78:	f7f4 f9c4 	bl	8002004 <_ZSt7forwardIbEOT_RNSt16remove_referenceIS0_E4typeE>
 800dc7c:	4603      	mov	r3, r0
 800dc7e:	461a      	mov	r2, r3
 800dc80:	4621      	mov	r1, r4
 800dc82:	4628      	mov	r0, r5
 800dc84:	f000 f8b4 	bl	800ddf0 <_ZSt13__invoke_implIvRZN12CommsHandler4initEvEUlbE_JbEET_St14__invoke_otherOT0_DpOT1_>
					std::forward<_Args>(__args)...);
      else
	return std::__invoke_impl<__type>(__tag{},
					  std::forward<_Callable>(__fn),
					  std::forward<_Args>(__args)...);
    }
 800dc88:	bf00      	nop
 800dc8a:	3708      	adds	r7, #8
 800dc8c:	46bd      	mov	sp, r7
 800dc8e:	bdb0      	pop	{r4, r5, r7, pc}

0800dc90 <_ZNSt9_Any_data9_M_accessIPZN12CommsHandler4initEvEUlbE_EERT_v>:
      _M_access() noexcept
 800dc90:	b580      	push	{r7, lr}
 800dc92:	b082      	sub	sp, #8
 800dc94:	af00      	add	r7, sp, #0
 800dc96:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 800dc98:	6878      	ldr	r0, [r7, #4]
 800dc9a:	f7ff fcda 	bl	800d652 <_ZNSt9_Any_data9_M_accessEv>
 800dc9e:	4603      	mov	r3, r0
 800dca0:	4618      	mov	r0, r3
 800dca2:	3708      	adds	r7, #8
 800dca4:	46bd      	mov	sp, r7
 800dca6:	bd80      	pop	{r7, pc}

0800dca8 <_ZNSt14_Function_base13_Base_managerIZN12CommsHandler4initEvEUlbE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>:
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 800dca8:	b590      	push	{r4, r7, lr}
 800dcaa:	b085      	sub	sp, #20
 800dcac:	af00      	add	r7, sp, #0
 800dcae:	60f8      	str	r0, [r7, #12]
 800dcb0:	60b9      	str	r1, [r7, #8]
 800dcb2:	4613      	mov	r3, r2
 800dcb4:	71fb      	strb	r3, [r7, #7]
	  switch (__op)
 800dcb6:	79fb      	ldrb	r3, [r7, #7]
 800dcb8:	2b03      	cmp	r3, #3
 800dcba:	d82a      	bhi.n	800dd12 <_ZNSt14_Function_base13_Base_managerIZN12CommsHandler4initEvEUlbE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x6a>
 800dcbc:	a201      	add	r2, pc, #4	@ (adr r2, 800dcc4 <_ZNSt14_Function_base13_Base_managerIZN12CommsHandler4initEvEUlbE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x1c>)
 800dcbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dcc2:	bf00      	nop
 800dcc4:	0800dcd5 	.word	0x0800dcd5
 800dcc8:	0800dce3 	.word	0x0800dce3
 800dccc:	0800dcf7 	.word	0x0800dcf7
 800dcd0:	0800dd09 	.word	0x0800dd09
	      __dest._M_access<const type_info*>() = nullptr;
 800dcd4:	68f8      	ldr	r0, [r7, #12]
 800dcd6:	f000 f8a2 	bl	800de1e <_ZNSt9_Any_data9_M_accessIPKSt9type_infoEERT_v>
 800dcda:	4603      	mov	r3, r0
 800dcdc:	2200      	movs	r2, #0
 800dcde:	601a      	str	r2, [r3, #0]
	      break;
 800dce0:	e017      	b.n	800dd12 <_ZNSt14_Function_base13_Base_managerIZN12CommsHandler4initEvEUlbE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x6a>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 800dce2:	68b8      	ldr	r0, [r7, #8]
 800dce4:	f7ff ffae 	bl	800dc44 <_ZNSt14_Function_base13_Base_managerIZN12CommsHandler4initEvEUlbE_E14_M_get_pointerERKSt9_Any_data>
 800dce8:	4604      	mov	r4, r0
 800dcea:	68f8      	ldr	r0, [r7, #12]
 800dcec:	f7ff ffd0 	bl	800dc90 <_ZNSt9_Any_data9_M_accessIPZN12CommsHandler4initEvEUlbE_EERT_v>
 800dcf0:	4603      	mov	r3, r0
 800dcf2:	601c      	str	r4, [r3, #0]
	      break;
 800dcf4:	e00d      	b.n	800dd12 <_ZNSt14_Function_base13_Base_managerIZN12CommsHandler4initEvEUlbE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x6a>
		  *const_cast<const _Functor*>(_M_get_pointer(__source)));
 800dcf6:	68b8      	ldr	r0, [r7, #8]
 800dcf8:	f7ff ffa4 	bl	800dc44 <_ZNSt14_Function_base13_Base_managerIZN12CommsHandler4initEvEUlbE_E14_M_get_pointerERKSt9_Any_data>
 800dcfc:	4603      	mov	r3, r0
	      _M_init_functor(__dest,
 800dcfe:	4619      	mov	r1, r3
 800dd00:	68f8      	ldr	r0, [r7, #12]
 800dd02:	f000 f898 	bl	800de36 <_ZNSt14_Function_base13_Base_managerIZN12CommsHandler4initEvEUlbE_E15_M_init_functorIRKS2_EEvRSt9_Any_dataOT_>
	      break;
 800dd06:	e004      	b.n	800dd12 <_ZNSt14_Function_base13_Base_managerIZN12CommsHandler4initEvEUlbE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x6a>
	      _M_destroy(__dest, _Local_storage());
 800dd08:	4621      	mov	r1, r4
 800dd0a:	68f8      	ldr	r0, [r7, #12]
 800dd0c:	f000 f8a5 	bl	800de5a <_ZNSt14_Function_base13_Base_managerIZN12CommsHandler4initEvEUlbE_E10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>
	      break;
 800dd10:	bf00      	nop
	  return false;
 800dd12:	2300      	movs	r3, #0
	}
 800dd14:	4618      	mov	r0, r3
 800dd16:	3714      	adds	r7, #20
 800dd18:	46bd      	mov	sp, r7
 800dd1a:	bd90      	pop	{r4, r7, pc}

0800dd1c <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>:
    move(_Tp&& __t) noexcept
 800dd1c:	b480      	push	{r7}
 800dd1e:	b083      	sub	sp, #12
 800dd20:	af00      	add	r7, sp, #0
 800dd22:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800dd24:	687b      	ldr	r3, [r7, #4]
 800dd26:	4618      	mov	r0, r3
 800dd28:	370c      	adds	r7, #12
 800dd2a:	46bd      	mov	sp, r7
 800dd2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd30:	4770      	bx	lr

0800dd32 <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>:
    move(_Tp&& __t) noexcept
 800dd32:	b480      	push	{r7}
 800dd34:	b083      	sub	sp, #12
 800dd36:	af00      	add	r7, sp, #0
 800dd38:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800dd3a:	687b      	ldr	r3, [r7, #4]
 800dd3c:	4618      	mov	r0, r3
 800dd3e:	370c      	adds	r7, #12
 800dd40:	46bd      	mov	sp, r7
 800dd42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd46:	4770      	bx	lr

0800dd48 <_ZSt4moveIRPFvRKSt9_Any_dataObEEONSt16remove_referenceIT_E4typeEOS8_>:
    move(_Tp&& __t) noexcept
 800dd48:	b480      	push	{r7}
 800dd4a:	b083      	sub	sp, #12
 800dd4c:	af00      	add	r7, sp, #0
 800dd4e:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800dd50:	687b      	ldr	r3, [r7, #4]
 800dd52:	4618      	mov	r0, r3
 800dd54:	370c      	adds	r7, #12
 800dd56:	46bd      	mov	sp, r7
 800dd58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd5c:	4770      	bx	lr

0800dd5e <_ZNSt11_Tuple_implILj1EJSt14default_deleteI14CommsInterfaceEEEC1Ev>:
      _Tuple_impl()
 800dd5e:	b580      	push	{r7, lr}
 800dd60:	b082      	sub	sp, #8
 800dd62:	af00      	add	r7, sp, #0
 800dd64:	6078      	str	r0, [r7, #4]
      : _Base() { }
 800dd66:	6878      	ldr	r0, [r7, #4]
 800dd68:	f000 f883 	bl	800de72 <_ZNSt10_Head_baseILj1ESt14default_deleteI14CommsInterfaceELb1EEC1Ev>
 800dd6c:	687b      	ldr	r3, [r7, #4]
 800dd6e:	4618      	mov	r0, r3
 800dd70:	3708      	adds	r7, #8
 800dd72:	46bd      	mov	sp, r7
 800dd74:	bd80      	pop	{r7, pc}

0800dd76 <_ZNSt10_Head_baseILj0EP14CommsInterfaceLb0EEC1Ev>:
      constexpr _Head_base()
 800dd76:	b480      	push	{r7}
 800dd78:	b083      	sub	sp, #12
 800dd7a:	af00      	add	r7, sp, #0
 800dd7c:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 800dd7e:	687b      	ldr	r3, [r7, #4]
 800dd80:	2200      	movs	r2, #0
 800dd82:	601a      	str	r2, [r3, #0]
 800dd84:	687b      	ldr	r3, [r7, #4]
 800dd86:	4618      	mov	r0, r3
 800dd88:	370c      	adds	r7, #12
 800dd8a:	46bd      	mov	sp, r7
 800dd8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd90:	4770      	bx	lr

0800dd92 <_ZSt3getILj0EJP14CommsInterfaceSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>:
    get(const tuple<_Elements...>& __t) noexcept
 800dd92:	b580      	push	{r7, lr}
 800dd94:	b082      	sub	sp, #8
 800dd96:	af00      	add	r7, sp, #0
 800dd98:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800dd9a:	687b      	ldr	r3, [r7, #4]
 800dd9c:	4618      	mov	r0, r3
 800dd9e:	f000 f873 	bl	800de88 <_ZSt12__get_helperILj0EP14CommsInterfaceJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>
 800dda2:	4603      	mov	r3, r0
 800dda4:	4618      	mov	r0, r3
 800dda6:	3708      	adds	r7, #8
 800dda8:	46bd      	mov	sp, r7
 800ddaa:	bd80      	pop	{r7, pc}

0800ddac <_ZNKSt9_Any_data9_M_accessIZN12CommsHandler4initEvEUlbE_EERKT_v>:
      _M_access() const noexcept
 800ddac:	b580      	push	{r7, lr}
 800ddae:	b082      	sub	sp, #8
 800ddb0:	af00      	add	r7, sp, #0
 800ddb2:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp*>(_M_access()); }
 800ddb4:	6878      	ldr	r0, [r7, #4]
 800ddb6:	f7ff fc57 	bl	800d668 <_ZNKSt9_Any_data9_M_accessEv>
 800ddba:	4603      	mov	r3, r0
 800ddbc:	4618      	mov	r0, r3
 800ddbe:	3708      	adds	r7, #8
 800ddc0:	46bd      	mov	sp, r7
 800ddc2:	bd80      	pop	{r7, pc}

0800ddc4 <_ZSt11__addressofIKZN12CommsHandler4initEvEUlbE_EPT_RS3_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 800ddc4:	b480      	push	{r7}
 800ddc6:	b083      	sub	sp, #12
 800ddc8:	af00      	add	r7, sp, #0
 800ddca:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 800ddcc:	687b      	ldr	r3, [r7, #4]
 800ddce:	4618      	mov	r0, r3
 800ddd0:	370c      	adds	r7, #12
 800ddd2:	46bd      	mov	sp, r7
 800ddd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddd8:	4770      	bx	lr

0800ddda <_ZSt7forwardIRZN12CommsHandler4initEvEUlbE_EOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800ddda:	b480      	push	{r7}
 800dddc:	b083      	sub	sp, #12
 800ddde:	af00      	add	r7, sp, #0
 800dde0:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800dde2:	687b      	ldr	r3, [r7, #4]
 800dde4:	4618      	mov	r0, r3
 800dde6:	370c      	adds	r7, #12
 800dde8:	46bd      	mov	sp, r7
 800ddea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddee:	4770      	bx	lr

0800ddf0 <_ZSt13__invoke_implIvRZN12CommsHandler4initEvEUlbE_JbEET_St14__invoke_otherOT0_DpOT1_>:
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 800ddf0:	b590      	push	{r4, r7, lr}
 800ddf2:	b085      	sub	sp, #20
 800ddf4:	af00      	add	r7, sp, #0
 800ddf6:	7338      	strb	r0, [r7, #12]
 800ddf8:	60b9      	str	r1, [r7, #8]
 800ddfa:	607a      	str	r2, [r7, #4]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 800ddfc:	68b8      	ldr	r0, [r7, #8]
 800ddfe:	f7ff ffec 	bl	800ddda <_ZSt7forwardIRZN12CommsHandler4initEvEUlbE_EOT_RNSt16remove_referenceIS3_E4typeE>
 800de02:	4604      	mov	r4, r0
 800de04:	6878      	ldr	r0, [r7, #4]
 800de06:	f7f4 f8fd 	bl	8002004 <_ZSt7forwardIbEOT_RNSt16remove_referenceIS0_E4typeE>
 800de0a:	4603      	mov	r3, r0
 800de0c:	781b      	ldrb	r3, [r3, #0]
 800de0e:	4619      	mov	r1, r3
 800de10:	4620      	mov	r0, r4
 800de12:	f7ff fc9b 	bl	800d74c <_ZZN12CommsHandler4initEvENKUlbE_clEb>
 800de16:	bf00      	nop
 800de18:	3714      	adds	r7, #20
 800de1a:	46bd      	mov	sp, r7
 800de1c:	bd90      	pop	{r4, r7, pc}

0800de1e <_ZNSt9_Any_data9_M_accessIPKSt9type_infoEERT_v>:
      _M_access() noexcept
 800de1e:	b580      	push	{r7, lr}
 800de20:	b082      	sub	sp, #8
 800de22:	af00      	add	r7, sp, #0
 800de24:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 800de26:	6878      	ldr	r0, [r7, #4]
 800de28:	f7ff fc13 	bl	800d652 <_ZNSt9_Any_data9_M_accessEv>
 800de2c:	4603      	mov	r3, r0
 800de2e:	4618      	mov	r0, r3
 800de30:	3708      	adds	r7, #8
 800de32:	46bd      	mov	sp, r7
 800de34:	bd80      	pop	{r7, pc}

0800de36 <_ZNSt14_Function_base13_Base_managerIZN12CommsHandler4initEvEUlbE_E15_M_init_functorIRKS2_EEvRSt9_Any_dataOT_>:
	  _M_init_functor(_Any_data& __functor, _Fn&& __f)
 800de36:	b590      	push	{r4, r7, lr}
 800de38:	b083      	sub	sp, #12
 800de3a:	af00      	add	r7, sp, #0
 800de3c:	6078      	str	r0, [r7, #4]
 800de3e:	6039      	str	r1, [r7, #0]
	    _M_create(__functor, std::forward<_Fn>(__f), _Local_storage());
 800de40:	6838      	ldr	r0, [r7, #0]
 800de42:	f000 f82d 	bl	800dea0 <_ZSt7forwardIRKZN12CommsHandler4initEvEUlbE_EOT_RNSt16remove_referenceIS4_E4typeE>
 800de46:	4603      	mov	r3, r0
 800de48:	4622      	mov	r2, r4
 800de4a:	4619      	mov	r1, r3
 800de4c:	6878      	ldr	r0, [r7, #4]
 800de4e:	f000 f832 	bl	800deb6 <_ZNSt14_Function_base13_Base_managerIZN12CommsHandler4initEvEUlbE_E9_M_createIRKS2_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>
	  }
 800de52:	bf00      	nop
 800de54:	370c      	adds	r7, #12
 800de56:	46bd      	mov	sp, r7
 800de58:	bd90      	pop	{r4, r7, pc}

0800de5a <_ZNSt14_Function_base13_Base_managerIZN12CommsHandler4initEvEUlbE_E10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>:
	_M_destroy(_Any_data& __victim, true_type)
 800de5a:	b580      	push	{r7, lr}
 800de5c:	b082      	sub	sp, #8
 800de5e:	af00      	add	r7, sp, #0
 800de60:	6078      	str	r0, [r7, #4]
 800de62:	7039      	strb	r1, [r7, #0]
	  __victim._M_access<_Functor>().~_Functor();
 800de64:	6878      	ldr	r0, [r7, #4]
 800de66:	f000 f83f 	bl	800dee8 <_ZNSt9_Any_data9_M_accessIZN12CommsHandler4initEvEUlbE_EERT_v>
	}
 800de6a:	bf00      	nop
 800de6c:	3708      	adds	r7, #8
 800de6e:	46bd      	mov	sp, r7
 800de70:	bd80      	pop	{r7, pc}

0800de72 <_ZNSt10_Head_baseILj1ESt14default_deleteI14CommsInterfaceELb1EEC1Ev>:
      constexpr _Head_base()
 800de72:	b480      	push	{r7}
 800de74:	b083      	sub	sp, #12
 800de76:	af00      	add	r7, sp, #0
 800de78:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 800de7a:	687b      	ldr	r3, [r7, #4]
 800de7c:	4618      	mov	r0, r3
 800de7e:	370c      	adds	r7, #12
 800de80:	46bd      	mov	sp, r7
 800de82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de86:	4770      	bx	lr

0800de88 <_ZSt12__get_helperILj0EP14CommsInterfaceJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800de88:	b580      	push	{r7, lr}
 800de8a:	b082      	sub	sp, #8
 800de8c:	af00      	add	r7, sp, #0
 800de8e:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800de90:	6878      	ldr	r0, [r7, #4]
 800de92:	f000 f835 	bl	800df00 <_ZNSt11_Tuple_implILj0EJP14CommsInterfaceSt14default_deleteIS0_EEE7_M_headERKS4_>
 800de96:	4603      	mov	r3, r0
 800de98:	4618      	mov	r0, r3
 800de9a:	3708      	adds	r7, #8
 800de9c:	46bd      	mov	sp, r7
 800de9e:	bd80      	pop	{r7, pc}

0800dea0 <_ZSt7forwardIRKZN12CommsHandler4initEvEUlbE_EOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800dea0:	b480      	push	{r7}
 800dea2:	b083      	sub	sp, #12
 800dea4:	af00      	add	r7, sp, #0
 800dea6:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800dea8:	687b      	ldr	r3, [r7, #4]
 800deaa:	4618      	mov	r0, r3
 800deac:	370c      	adds	r7, #12
 800deae:	46bd      	mov	sp, r7
 800deb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deb4:	4770      	bx	lr

0800deb6 <_ZNSt14_Function_base13_Base_managerIZN12CommsHandler4initEvEUlbE_E9_M_createIRKS2_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>:
	  _M_create(_Any_data& __dest, _Fn&& __f, true_type)
 800deb6:	b590      	push	{r4, r7, lr}
 800deb8:	b085      	sub	sp, #20
 800deba:	af00      	add	r7, sp, #0
 800debc:	60f8      	str	r0, [r7, #12]
 800debe:	60b9      	str	r1, [r7, #8]
 800dec0:	713a      	strb	r2, [r7, #4]
	    ::new (__dest._M_access()) _Functor(std::forward<_Fn>(__f));
 800dec2:	68f8      	ldr	r0, [r7, #12]
 800dec4:	f7ff fbc5 	bl	800d652 <_ZNSt9_Any_data9_M_accessEv>
 800dec8:	4603      	mov	r3, r0
 800deca:	4619      	mov	r1, r3
 800decc:	2004      	movs	r0, #4
 800dece:	f7fe f89d 	bl	800c00c <_ZnwjPv>
 800ded2:	4604      	mov	r4, r0
 800ded4:	68b8      	ldr	r0, [r7, #8]
 800ded6:	f7ff ffe3 	bl	800dea0 <_ZSt7forwardIRKZN12CommsHandler4initEvEUlbE_EOT_RNSt16remove_referenceIS4_E4typeE>
 800deda:	4603      	mov	r3, r0
 800dedc:	681b      	ldr	r3, [r3, #0]
 800dede:	6023      	str	r3, [r4, #0]
	  }
 800dee0:	bf00      	nop
 800dee2:	3714      	adds	r7, #20
 800dee4:	46bd      	mov	sp, r7
 800dee6:	bd90      	pop	{r4, r7, pc}

0800dee8 <_ZNSt9_Any_data9_M_accessIZN12CommsHandler4initEvEUlbE_EERT_v>:
      _M_access() noexcept
 800dee8:	b580      	push	{r7, lr}
 800deea:	b082      	sub	sp, #8
 800deec:	af00      	add	r7, sp, #0
 800deee:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 800def0:	6878      	ldr	r0, [r7, #4]
 800def2:	f7ff fbae 	bl	800d652 <_ZNSt9_Any_data9_M_accessEv>
 800def6:	4603      	mov	r3, r0
 800def8:	4618      	mov	r0, r3
 800defa:	3708      	adds	r7, #8
 800defc:	46bd      	mov	sp, r7
 800defe:	bd80      	pop	{r7, pc}

0800df00 <_ZNSt11_Tuple_implILj0EJP14CommsInterfaceSt14default_deleteIS0_EEE7_M_headERKS4_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800df00:	b580      	push	{r7, lr}
 800df02:	b082      	sub	sp, #8
 800df04:	af00      	add	r7, sp, #0
 800df06:	6078      	str	r0, [r7, #4]
 800df08:	687b      	ldr	r3, [r7, #4]
 800df0a:	4618      	mov	r0, r3
 800df0c:	f000 f805 	bl	800df1a <_ZNSt10_Head_baseILj0EP14CommsInterfaceLb0EE7_M_headERKS2_>
 800df10:	4603      	mov	r3, r0
 800df12:	4618      	mov	r0, r3
 800df14:	3708      	adds	r7, #8
 800df16:	46bd      	mov	sp, r7
 800df18:	bd80      	pop	{r7, pc}

0800df1a <_ZNSt10_Head_baseILj0EP14CommsInterfaceLb0EE7_M_headERKS2_>:
      _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }
 800df1a:	b480      	push	{r7}
 800df1c:	b083      	sub	sp, #12
 800df1e:	af00      	add	r7, sp, #0
 800df20:	6078      	str	r0, [r7, #4]
 800df22:	687b      	ldr	r3, [r7, #4]
 800df24:	4618      	mov	r0, r3
 800df26:	370c      	adds	r7, #12
 800df28:	46bd      	mov	sp, r7
 800df2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df2e:	4770      	bx	lr

0800df30 <_ZN5DebugC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb>:
#include "debug.h"


Debug::Debug(std::string portAndPin, bool bstate) :
 800df30:	b590      	push	{r4, r7, lr}
 800df32:	b08b      	sub	sp, #44	@ 0x2c
 800df34:	af00      	add	r7, sp, #0
 800df36:	60f8      	str	r0, [r7, #12]
 800df38:	60b9      	str	r1, [r7, #8]
 800df3a:	4613      	mov	r3, r2
 800df3c:	71fb      	strb	r3, [r7, #7]
    bState(bstate)
 800df3e:	68fb      	ldr	r3, [r7, #12]
 800df40:	4618      	mov	r0, r3
 800df42:	f000 f863 	bl	800e00c <_ZN6ModuleC1Ev>
 800df46:	4a12      	ldr	r2, [pc, #72]	@ (800df90 <_ZN5DebugC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEb+0x60>)
 800df48:	68fb      	ldr	r3, [r7, #12]
 800df4a:	601a      	str	r2, [r3, #0]
 800df4c:	68fb      	ldr	r3, [r7, #12]
 800df4e:	79fa      	ldrb	r2, [r7, #7]
 800df50:	755a      	strb	r2, [r3, #21]
{
	this->debugPin = new Pin(portAndPin, OUTPUT);
 800df52:	2044      	movs	r0, #68	@ 0x44
 800df54:	f010 f922 	bl	801e19c <_Znwj>
 800df58:	4603      	mov	r3, r0
 800df5a:	461c      	mov	r4, r3
 800df5c:	f107 0310 	add.w	r3, r7, #16
 800df60:	68b9      	ldr	r1, [r7, #8]
 800df62:	4618      	mov	r0, r3
 800df64:	f010 fac7 	bl	801e4f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 800df68:	f107 0310 	add.w	r3, r7, #16
 800df6c:	2201      	movs	r2, #1
 800df6e:	4619      	mov	r1, r3
 800df70:	4620      	mov	r0, r4
 800df72:	f7f4 f932 	bl	80021da <_ZN3PinC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi>
 800df76:	68fb      	ldr	r3, [r7, #12]
 800df78:	619c      	str	r4, [r3, #24]
 800df7a:	f107 0310 	add.w	r3, r7, #16
 800df7e:	4618      	mov	r0, r3
 800df80:	f010 f9b9 	bl	801e2f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
}
 800df84:	68fb      	ldr	r3, [r7, #12]
 800df86:	4618      	mov	r0, r3
 800df88:	372c      	adds	r7, #44	@ 0x2c
 800df8a:	46bd      	mov	sp, r7
 800df8c:	bd90      	pop	{r4, r7, pc}
 800df8e:	bf00      	nop
 800df90:	080205ec 	.word	0x080205ec

0800df94 <_ZN5Debug6updateEv>:

void Debug::update(void)
{
 800df94:	b580      	push	{r7, lr}
 800df96:	b082      	sub	sp, #8
 800df98:	af00      	add	r7, sp, #0
 800df9a:	6078      	str	r0, [r7, #4]
	this->debugPin->set(bState);
 800df9c:	687b      	ldr	r3, [r7, #4]
 800df9e:	699a      	ldr	r2, [r3, #24]
 800dfa0:	687b      	ldr	r3, [r7, #4]
 800dfa2:	7d5b      	ldrb	r3, [r3, #21]
 800dfa4:	4619      	mov	r1, r3
 800dfa6:	4610      	mov	r0, r2
 800dfa8:	f7fe f83c 	bl	800c024 <_ZN3Pin3setEb>
}
 800dfac:	bf00      	nop
 800dfae:	3708      	adds	r7, #8
 800dfb0:	46bd      	mov	sp, r7
 800dfb2:	bd80      	pop	{r7, pc}

0800dfb4 <_ZN5Debug10slowUpdateEv>:

void Debug::slowUpdate(void)
{
 800dfb4:	b480      	push	{r7}
 800dfb6:	b083      	sub	sp, #12
 800dfb8:	af00      	add	r7, sp, #0
 800dfba:	6078      	str	r0, [r7, #4]
	return;
 800dfbc:	bf00      	nop
}
 800dfbe:	370c      	adds	r7, #12
 800dfc0:	46bd      	mov	sp, r7
 800dfc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfc6:	4770      	bx	lr

0800dfc8 <_ZN5DebugD1Ev>:
#include <string>

#include "../../modules/module.h"
#include "../../drivers/pin/pin.h"

class Debug : public Module
 800dfc8:	b580      	push	{r7, lr}
 800dfca:	b082      	sub	sp, #8
 800dfcc:	af00      	add	r7, sp, #0
 800dfce:	6078      	str	r0, [r7, #4]
 800dfd0:	4a05      	ldr	r2, [pc, #20]	@ (800dfe8 <_ZN5DebugD1Ev+0x20>)
 800dfd2:	687b      	ldr	r3, [r7, #4]
 800dfd4:	601a      	str	r2, [r3, #0]
 800dfd6:	687b      	ldr	r3, [r7, #4]
 800dfd8:	4618      	mov	r0, r3
 800dfda:	f000 f833 	bl	800e044 <_ZN6ModuleD1Ev>
 800dfde:	687b      	ldr	r3, [r7, #4]
 800dfe0:	4618      	mov	r0, r3
 800dfe2:	3708      	adds	r7, #8
 800dfe4:	46bd      	mov	sp, r7
 800dfe6:	bd80      	pop	{r7, pc}
 800dfe8:	080205ec 	.word	0x080205ec

0800dfec <_ZN5DebugD0Ev>:
 800dfec:	b580      	push	{r7, lr}
 800dfee:	b082      	sub	sp, #8
 800dff0:	af00      	add	r7, sp, #0
 800dff2:	6078      	str	r0, [r7, #4]
 800dff4:	6878      	ldr	r0, [r7, #4]
 800dff6:	f7ff ffe7 	bl	800dfc8 <_ZN5DebugD1Ev>
 800dffa:	211c      	movs	r1, #28
 800dffc:	6878      	ldr	r0, [r7, #4]
 800dffe:	f010 f8bc 	bl	801e17a <_ZdlPvj>
 800e002:	687b      	ldr	r3, [r7, #4]
 800e004:	4618      	mov	r0, r3
 800e006:	3708      	adds	r7, #8
 800e008:	46bd      	mov	sp, r7
 800e00a:	bd80      	pop	{r7, pc}

0800e00c <_ZN6ModuleC1Ev>:
#include "module.h"

#include <cstdio>

Module::Module()
 800e00c:	b580      	push	{r7, lr}
 800e00e:	b082      	sub	sp, #8
 800e010:	af00      	add	r7, sp, #0
 800e012:	6078      	str	r0, [r7, #4]
 800e014:	4a09      	ldr	r2, [pc, #36]	@ (800e03c <_ZN6ModuleC1Ev+0x30>)
 800e016:	687b      	ldr	r3, [r7, #4]
 800e018:	601a      	str	r2, [r3, #0]
 800e01a:	687b      	ldr	r3, [r7, #4]
 800e01c:	2200      	movs	r2, #0
 800e01e:	751a      	strb	r2, [r3, #20]
{
	this->counter = 0;
 800e020:	687b      	ldr	r3, [r7, #4]
 800e022:	2200      	movs	r2, #0
 800e024:	611a      	str	r2, [r3, #16]
	this->updateCount = 1;
 800e026:	687b      	ldr	r3, [r7, #4]
 800e028:	2201      	movs	r2, #1
 800e02a:	60da      	str	r2, [r3, #12]
	printf("\nCreating a std module\n");
 800e02c:	4804      	ldr	r0, [pc, #16]	@ (800e040 <_ZN6ModuleC1Ev+0x34>)
 800e02e:	f010 fca9 	bl	801e984 <puts>
}
 800e032:	687b      	ldr	r3, [r7, #4]
 800e034:	4618      	mov	r0, r3
 800e036:	3708      	adds	r7, #8
 800e038:	46bd      	mov	sp, r7
 800e03a:	bd80      	pop	{r7, pc}
 800e03c:	08020610 	.word	0x08020610
 800e040:	08020144 	.word	0x08020144

0800e044 <_ZN6ModuleD1Ev>:
	this->counter = 0;
	this->updateCount = this->threadFreq / this->slowUpdateFreq;
	printf("\nCreating a slower module, updating every %ld thread cycles\n",this->updateCount);
}

Module::~Module(){}
 800e044:	b480      	push	{r7}
 800e046:	b083      	sub	sp, #12
 800e048:	af00      	add	r7, sp, #0
 800e04a:	6078      	str	r0, [r7, #4]
 800e04c:	4a04      	ldr	r2, [pc, #16]	@ (800e060 <_ZN6ModuleD1Ev+0x1c>)
 800e04e:	687b      	ldr	r3, [r7, #4]
 800e050:	601a      	str	r2, [r3, #0]
 800e052:	687b      	ldr	r3, [r7, #4]
 800e054:	4618      	mov	r0, r3
 800e056:	370c      	adds	r7, #12
 800e058:	46bd      	mov	sp, r7
 800e05a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e05e:	4770      	bx	lr
 800e060:	08020610 	.word	0x08020610

0800e064 <_ZN6ModuleD0Ev>:
 800e064:	b580      	push	{r7, lr}
 800e066:	b082      	sub	sp, #8
 800e068:	af00      	add	r7, sp, #0
 800e06a:	6078      	str	r0, [r7, #4]
 800e06c:	6878      	ldr	r0, [r7, #4]
 800e06e:	f7ff ffe9 	bl	800e044 <_ZN6ModuleD1Ev>
 800e072:	2118      	movs	r1, #24
 800e074:	6878      	ldr	r0, [r7, #4]
 800e076:	f010 f880 	bl	801e17a <_ZdlPvj>
 800e07a:	687b      	ldr	r3, [r7, #4]
 800e07c:	4618      	mov	r0, r3
 800e07e:	3708      	adds	r7, #8
 800e080:	46bd      	mov	sp, r7
 800e082:	bd80      	pop	{r7, pc}

0800e084 <_ZN6Module9runModuleEv>:


void Module::runModule()
{
 800e084:	b580      	push	{r7, lr}
 800e086:	b082      	sub	sp, #8
 800e088:	af00      	add	r7, sp, #0
 800e08a:	6078      	str	r0, [r7, #4]
	++this->counter;
 800e08c:	687b      	ldr	r3, [r7, #4]
 800e08e:	691b      	ldr	r3, [r3, #16]
 800e090:	1c5a      	adds	r2, r3, #1
 800e092:	687b      	ldr	r3, [r7, #4]
 800e094:	611a      	str	r2, [r3, #16]

	if (this->counter >= this->updateCount)
 800e096:	687b      	ldr	r3, [r7, #4]
 800e098:	691a      	ldr	r2, [r3, #16]
 800e09a:	687b      	ldr	r3, [r7, #4]
 800e09c:	68db      	ldr	r3, [r3, #12]
 800e09e:	429a      	cmp	r2, r3
 800e0a0:	db08      	blt.n	800e0b4 <_ZN6Module9runModuleEv+0x30>
	{
		this->slowUpdate();
 800e0a2:	687b      	ldr	r3, [r7, #4]
 800e0a4:	681b      	ldr	r3, [r3, #0]
 800e0a6:	3310      	adds	r3, #16
 800e0a8:	681b      	ldr	r3, [r3, #0]
 800e0aa:	6878      	ldr	r0, [r7, #4]
 800e0ac:	4798      	blx	r3
		this->counter = 0;
 800e0ae:	687b      	ldr	r3, [r7, #4]
 800e0b0:	2200      	movs	r2, #0
 800e0b2:	611a      	str	r2, [r3, #16]
	}

	this->update();
 800e0b4:	687b      	ldr	r3, [r7, #4]
 800e0b6:	681b      	ldr	r3, [r3, #0]
 800e0b8:	3308      	adds	r3, #8
 800e0ba:	681b      	ldr	r3, [r3, #0]
 800e0bc:	6878      	ldr	r0, [r7, #4]
 800e0be:	4798      	blx	r3
}
 800e0c0:	bf00      	nop
 800e0c2:	3708      	adds	r7, #8
 800e0c4:	46bd      	mov	sp, r7
 800e0c6:	bd80      	pop	{r7, pc}

0800e0c8 <_ZN6Module6updateEv>:
void Module::runModulePost()
{
	this->updatePost();
}

void Module::update(){}
 800e0c8:	b480      	push	{r7}
 800e0ca:	b083      	sub	sp, #12
 800e0cc:	af00      	add	r7, sp, #0
 800e0ce:	6078      	str	r0, [r7, #4]
 800e0d0:	bf00      	nop
 800e0d2:	370c      	adds	r7, #12
 800e0d4:	46bd      	mov	sp, r7
 800e0d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0da:	4770      	bx	lr

0800e0dc <_ZN6Module10updatePostEv>:
void Module::updatePost(){}
 800e0dc:	b480      	push	{r7}
 800e0de:	b083      	sub	sp, #12
 800e0e0:	af00      	add	r7, sp, #0
 800e0e2:	6078      	str	r0, [r7, #4]
 800e0e4:	bf00      	nop
 800e0e6:	370c      	adds	r7, #12
 800e0e8:	46bd      	mov	sp, r7
 800e0ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0ee:	4770      	bx	lr

0800e0f0 <_ZN6Module10slowUpdateEv>:
void Module::slowUpdate(){}
 800e0f0:	b480      	push	{r7}
 800e0f2:	b083      	sub	sp, #12
 800e0f4:	af00      	add	r7, sp, #0
 800e0f6:	6078      	str	r0, [r7, #4]
 800e0f8:	bf00      	nop
 800e0fa:	370c      	adds	r7, #12
 800e0fc:	46bd      	mov	sp, r7
 800e0fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e102:	4770      	bx	lr

0800e104 <_ZN6Module9configureEv>:
void Module::configure(){}
 800e104:	b480      	push	{r7}
 800e106:	b083      	sub	sp, #12
 800e108:	af00      	add	r7, sp, #0
 800e10a:	6078      	str	r0, [r7, #4]
 800e10c:	bf00      	nop
 800e10e:	370c      	adds	r7, #12
 800e110:	46bd      	mov	sp, r7
 800e112:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e116:	4770      	bx	lr

0800e118 <_ZN13ModuleFactoryC1Ev>:
    ModuleCreator createServoModule(const char* modN);
    ModuleCreator createBaseModule(const char* modN);
    //unordered_map<const char*, unordered_map<const char*, ModuleCreator>> moduleCreators;

    // Private constructor for singleton
    ModuleFactory() {};
 800e118:	b480      	push	{r7}
 800e11a:	b083      	sub	sp, #12
 800e11c:	af00      	add	r7, sp, #0
 800e11e:	6078      	str	r0, [r7, #4]
 800e120:	687b      	ldr	r3, [r7, #4]
 800e122:	4618      	mov	r0, r3
 800e124:	370c      	adds	r7, #12
 800e126:	46bd      	mov	sp, r7
 800e128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e12c:	4770      	bx	lr
	...

0800e130 <_ZN13ModuleFactory16createBaseModuleEPKc>:

#include "moduleList.h"
#include "moduleFactory.h"


ModuleCreator ModuleFactory::createBaseModule(const char* modN) {
 800e130:	b580      	push	{r7, lr}
 800e132:	b082      	sub	sp, #8
 800e134:	af00      	add	r7, sp, #0
 800e136:	6078      	str	r0, [r7, #4]
 800e138:	6039      	str	r1, [r7, #0]

    if (strcmp(modN,"Stepgen") == 0)
 800e13a:	4907      	ldr	r1, [pc, #28]	@ (800e158 <_ZN13ModuleFactory16createBaseModuleEPKc+0x28>)
 800e13c:	6838      	ldr	r0, [r7, #0]
 800e13e:	f7f2 f8cf 	bl	80002e0 <strcmp>
 800e142:	4603      	mov	r3, r0
 800e144:	2b00      	cmp	r3, #0
 800e146:	d101      	bne.n	800e14c <_ZN13ModuleFactory16createBaseModuleEPKc+0x1c>
        return createStepgen;
 800e148:	4b04      	ldr	r3, [pc, #16]	@ (800e15c <_ZN13ModuleFactory16createBaseModuleEPKc+0x2c>)
 800e14a:	e000      	b.n	800e14e <_ZN13ModuleFactory16createBaseModuleEPKc+0x1e>

    if (strcmp(modN,"RCServo") == 0)
        return createRCServo;
*/

    return nullptr;
 800e14c:	2300      	movs	r3, #0
}
 800e14e:	4618      	mov	r0, r3
 800e150:	3708      	adds	r7, #8
 800e152:	46bd      	mov	sp, r7
 800e154:	bd80      	pop	{r7, pc}
 800e156:	bf00      	nop
 800e158:	0802019c 	.word	0x0802019c
 800e15c:	0800f62d 	.word	0x0800f62d

0800e160 <_ZN13ModuleFactory17createServoModuleEPKc>:

// Servo thread modules
ModuleCreator ModuleFactory::createServoModule(const char* modN) {
 800e160:	b580      	push	{r7, lr}
 800e162:	b082      	sub	sp, #8
 800e164:	af00      	add	r7, sp, #0
 800e166:	6078      	str	r0, [r7, #4]
 800e168:	6039      	str	r1, [r7, #0]

    if (strcmp(modN,"Blink") == 0)
 800e16a:	4907      	ldr	r1, [pc, #28]	@ (800e188 <_ZN13ModuleFactory17createServoModuleEPKc+0x28>)
 800e16c:	6838      	ldr	r0, [r7, #0]
 800e16e:	f7f2 f8b7 	bl	80002e0 <strcmp>
 800e172:	4603      	mov	r3, r0
 800e174:	2b00      	cmp	r3, #0
 800e176:	d101      	bne.n	800e17c <_ZN13ModuleFactory17createServoModuleEPKc+0x1c>
        return createBlink;
 800e178:	4b04      	ldr	r3, [pc, #16]	@ (800e18c <_ZN13ModuleFactory17createServoModuleEPKc+0x2c>)
 800e17a:	e000      	b.n	800e17e <_ZN13ModuleFactory17createServoModuleEPKc+0x1e>
        return createQEI;

    if (strcmp(modN,"Reset Pin") == 0)
        return createResetPin;
*/
    return nullptr;
 800e17c:	2300      	movs	r3, #0
}
 800e17e:	4618      	mov	r0, r3
 800e180:	3708      	adds	r7, #8
 800e182:	46bd      	mov	sp, r7
 800e184:	bd80      	pop	{r7, pc}
 800e186:	bf00      	nop
 800e188:	080201a4 	.word	0x080201a4
 800e18c:	0800c061 	.word	0x0800c061

0800e190 <_ZN13ModuleFactory18createOnLoadModuleEPKc>:

    // On load modules
ModuleCreator ModuleFactory::createOnLoadModule(const char* modN) {
 800e190:	b480      	push	{r7}
 800e192:	b083      	sub	sp, #12
 800e194:	af00      	add	r7, sp, #0
 800e196:	6078      	str	r0, [r7, #4]
 800e198:	6039      	str	r1, [r7, #0]
        return createTMC2209;

    if (strcmp(modN,"TMC5160") == 0)
        return createTMC5160;
*/
    return nullptr;
 800e19a:	2300      	movs	r3, #0
}
 800e19c:	4618      	mov	r0, r3
 800e19e:	370c      	adds	r7, #12
 800e1a0:	46bd      	mov	sp, r7
 800e1a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1a6:	4770      	bx	lr

0800e1a8 <_ZN13ModuleFactory12createModuleEPKcS1_N11ArduinoJson8V730HB2211JsonVariantE>:

// Create module based on thread and type
std::shared_ptr<Module> ModuleFactory::createModule(const char* _tname,
                                   const char* _mtype,
                                   const JsonVariant config) {
 800e1a8:	b590      	push	{r4, r7, lr}
 800e1aa:	b08b      	sub	sp, #44	@ 0x2c
 800e1ac:	af00      	add	r7, sp, #0
 800e1ae:	60f8      	str	r0, [r7, #12]
 800e1b0:	60b9      	str	r1, [r7, #8]
 800e1b2:	607a      	str	r2, [r7, #4]
 800e1b4:	603b      	str	r3, [r7, #0]
    if (strcmp(_tname,"Base") == 0)
 800e1b6:	492b      	ldr	r1, [pc, #172]	@ (800e264 <_ZN13ModuleFactory12createModuleEPKcS1_N11ArduinoJson8V730HB2211JsonVariantE+0xbc>)
 800e1b8:	6878      	ldr	r0, [r7, #4]
 800e1ba:	f7f2 f891 	bl	80002e0 <strcmp>
 800e1be:	4603      	mov	r3, r0
 800e1c0:	2b00      	cmp	r3, #0
 800e1c2:	d112      	bne.n	800e1ea <_ZN13ModuleFactory12createModuleEPKcS1_N11ArduinoJson8V730HB2211JsonVariantE+0x42>
        return createBaseModule(_mtype)(config);
 800e1c4:	6839      	ldr	r1, [r7, #0]
 800e1c6:	68b8      	ldr	r0, [r7, #8]
 800e1c8:	f7ff ffb2 	bl	800e130 <_ZN13ModuleFactory16createBaseModuleEPKc>
 800e1cc:	4604      	mov	r4, r0
 800e1ce:	f107 0310 	add.w	r3, r7, #16
 800e1d2:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 800e1d6:	4618      	mov	r0, r3
 800e1d8:	f7f6 fe5e 	bl	8004e98 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS0_11JsonVariantEEcvT_INS0_10JsonObjectELi0EEEv>
 800e1dc:	68fb      	ldr	r3, [r7, #12]
 800e1de:	f107 0210 	add.w	r2, r7, #16
 800e1e2:	4611      	mov	r1, r2
 800e1e4:	4618      	mov	r0, r3
 800e1e6:	47a0      	blx	r4
        return createServoModule(_mtype)(config);
    if (strcmp(_tname,"On load") == 0)
        return createOnLoadModule(_mtype)(config); // Dont return On Load modules

    return nullptr;
}
 800e1e8:	e037      	b.n	800e25a <_ZN13ModuleFactory12createModuleEPKcS1_N11ArduinoJson8V730HB2211JsonVariantE+0xb2>
    if (strcmp(_tname,"Servo") == 0)
 800e1ea:	491f      	ldr	r1, [pc, #124]	@ (800e268 <_ZN13ModuleFactory12createModuleEPKcS1_N11ArduinoJson8V730HB2211JsonVariantE+0xc0>)
 800e1ec:	6878      	ldr	r0, [r7, #4]
 800e1ee:	f7f2 f877 	bl	80002e0 <strcmp>
 800e1f2:	4603      	mov	r3, r0
 800e1f4:	2b00      	cmp	r3, #0
 800e1f6:	d112      	bne.n	800e21e <_ZN13ModuleFactory12createModuleEPKcS1_N11ArduinoJson8V730HB2211JsonVariantE+0x76>
        return createServoModule(_mtype)(config);
 800e1f8:	6839      	ldr	r1, [r7, #0]
 800e1fa:	68b8      	ldr	r0, [r7, #8]
 800e1fc:	f7ff ffb0 	bl	800e160 <_ZN13ModuleFactory17createServoModuleEPKc>
 800e200:	4604      	mov	r4, r0
 800e202:	f107 0318 	add.w	r3, r7, #24
 800e206:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 800e20a:	4618      	mov	r0, r3
 800e20c:	f7f6 fe44 	bl	8004e98 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS0_11JsonVariantEEcvT_INS0_10JsonObjectELi0EEEv>
 800e210:	68fb      	ldr	r3, [r7, #12]
 800e212:	f107 0218 	add.w	r2, r7, #24
 800e216:	4611      	mov	r1, r2
 800e218:	4618      	mov	r0, r3
 800e21a:	47a0      	blx	r4
}
 800e21c:	e01d      	b.n	800e25a <_ZN13ModuleFactory12createModuleEPKcS1_N11ArduinoJson8V730HB2211JsonVariantE+0xb2>
    if (strcmp(_tname,"On load") == 0)
 800e21e:	4913      	ldr	r1, [pc, #76]	@ (800e26c <_ZN13ModuleFactory12createModuleEPKcS1_N11ArduinoJson8V730HB2211JsonVariantE+0xc4>)
 800e220:	6878      	ldr	r0, [r7, #4]
 800e222:	f7f2 f85d 	bl	80002e0 <strcmp>
 800e226:	4603      	mov	r3, r0
 800e228:	2b00      	cmp	r3, #0
 800e22a:	d112      	bne.n	800e252 <_ZN13ModuleFactory12createModuleEPKcS1_N11ArduinoJson8V730HB2211JsonVariantE+0xaa>
        return createOnLoadModule(_mtype)(config); // Dont return On Load modules
 800e22c:	6839      	ldr	r1, [r7, #0]
 800e22e:	68b8      	ldr	r0, [r7, #8]
 800e230:	f7ff ffae 	bl	800e190 <_ZN13ModuleFactory18createOnLoadModuleEPKc>
 800e234:	4604      	mov	r4, r0
 800e236:	f107 0320 	add.w	r3, r7, #32
 800e23a:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 800e23e:	4618      	mov	r0, r3
 800e240:	f7f6 fe2a 	bl	8004e98 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS0_11JsonVariantEEcvT_INS0_10JsonObjectELi0EEEv>
 800e244:	68fb      	ldr	r3, [r7, #12]
 800e246:	f107 0220 	add.w	r2, r7, #32
 800e24a:	4611      	mov	r1, r2
 800e24c:	4618      	mov	r0, r3
 800e24e:	47a0      	blx	r4
}
 800e250:	e003      	b.n	800e25a <_ZN13ModuleFactory12createModuleEPKcS1_N11ArduinoJson8V730HB2211JsonVariantE+0xb2>
    return nullptr;
 800e252:	2100      	movs	r1, #0
 800e254:	68f8      	ldr	r0, [r7, #12]
 800e256:	f000 f83b 	bl	800e2d0 <_ZNSt10shared_ptrI6ModuleEC1EDn>
}
 800e25a:	68f8      	ldr	r0, [r7, #12]
 800e25c:	372c      	adds	r7, #44	@ 0x2c
 800e25e:	46bd      	mov	sp, r7
 800e260:	bd90      	pop	{r4, r7, pc}
 800e262:	bf00      	nop
 800e264:	080201ac 	.word	0x080201ac
 800e268:	080201b4 	.word	0x080201b4
 800e26c:	080201bc 	.word	0x080201bc

0800e270 <_ZN13ModuleFactory11getInstanceEv>:

// Static instance accessor
ModuleFactory* ModuleFactory::getInstance() {
 800e270:	b598      	push	{r3, r4, r7, lr}
 800e272:	af00      	add	r7, sp, #0
    static ModuleFactory* instance = new ModuleFactory();
 800e274:	4b14      	ldr	r3, [pc, #80]	@ (800e2c8 <_ZN13ModuleFactory11getInstanceEv+0x58>)
 800e276:	681b      	ldr	r3, [r3, #0]
 800e278:	f3bf 8f5b 	dmb	ish
 800e27c:	f003 0301 	and.w	r3, r3, #1
 800e280:	2b00      	cmp	r3, #0
 800e282:	bf0c      	ite	eq
 800e284:	2301      	moveq	r3, #1
 800e286:	2300      	movne	r3, #0
 800e288:	b2db      	uxtb	r3, r3
 800e28a:	2b00      	cmp	r3, #0
 800e28c:	d017      	beq.n	800e2be <_ZN13ModuleFactory11getInstanceEv+0x4e>
 800e28e:	480e      	ldr	r0, [pc, #56]	@ (800e2c8 <_ZN13ModuleFactory11getInstanceEv+0x58>)
 800e290:	f00f ff75 	bl	801e17e <__cxa_guard_acquire>
 800e294:	4603      	mov	r3, r0
 800e296:	2b00      	cmp	r3, #0
 800e298:	bf14      	ite	ne
 800e29a:	2301      	movne	r3, #1
 800e29c:	2300      	moveq	r3, #0
 800e29e:	b2db      	uxtb	r3, r3
 800e2a0:	2b00      	cmp	r3, #0
 800e2a2:	d00c      	beq.n	800e2be <_ZN13ModuleFactory11getInstanceEv+0x4e>
 800e2a4:	2001      	movs	r0, #1
 800e2a6:	f00f ff79 	bl	801e19c <_Znwj>
 800e2aa:	4603      	mov	r3, r0
 800e2ac:	461c      	mov	r4, r3
 800e2ae:	4620      	mov	r0, r4
 800e2b0:	f7ff ff32 	bl	800e118 <_ZN13ModuleFactoryC1Ev>
 800e2b4:	4b05      	ldr	r3, [pc, #20]	@ (800e2cc <_ZN13ModuleFactory11getInstanceEv+0x5c>)
 800e2b6:	601c      	str	r4, [r3, #0]
 800e2b8:	4803      	ldr	r0, [pc, #12]	@ (800e2c8 <_ZN13ModuleFactory11getInstanceEv+0x58>)
 800e2ba:	f00f ff6c 	bl	801e196 <__cxa_guard_release>
    return instance;
 800e2be:	4b03      	ldr	r3, [pc, #12]	@ (800e2cc <_ZN13ModuleFactory11getInstanceEv+0x5c>)
 800e2c0:	681b      	ldr	r3, [r3, #0]
}
 800e2c2:	4618      	mov	r0, r3
 800e2c4:	bd98      	pop	{r3, r4, r7, pc}
 800e2c6:	bf00      	nop
 800e2c8:	240004e4 	.word	0x240004e4
 800e2cc:	240004e0 	.word	0x240004e0

0800e2d0 <_ZNSt10shared_ptrI6ModuleEC1EDn>:

      /**
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count() == 0 && get() == nullptr
       */
      constexpr shared_ptr(nullptr_t) noexcept : shared_ptr() { }
 800e2d0:	b580      	push	{r7, lr}
 800e2d2:	b082      	sub	sp, #8
 800e2d4:	af00      	add	r7, sp, #0
 800e2d6:	6078      	str	r0, [r7, #4]
 800e2d8:	6039      	str	r1, [r7, #0]
 800e2da:	6878      	ldr	r0, [r7, #4]
 800e2dc:	f000 f805 	bl	800e2ea <_ZNSt10shared_ptrI6ModuleEC1Ev>
 800e2e0:	687b      	ldr	r3, [r7, #4]
 800e2e2:	4618      	mov	r0, r3
 800e2e4:	3708      	adds	r7, #8
 800e2e6:	46bd      	mov	sp, r7
 800e2e8:	bd80      	pop	{r7, pc}

0800e2ea <_ZNSt10shared_ptrI6ModuleEC1Ev>:
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }
 800e2ea:	b580      	push	{r7, lr}
 800e2ec:	b082      	sub	sp, #8
 800e2ee:	af00      	add	r7, sp, #0
 800e2f0:	6078      	str	r0, [r7, #4]
 800e2f2:	687b      	ldr	r3, [r7, #4]
 800e2f4:	4618      	mov	r0, r3
 800e2f6:	f000 f805 	bl	800e304 <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EEC1Ev>
 800e2fa:	687b      	ldr	r3, [r7, #4]
 800e2fc:	4618      	mov	r0, r3
 800e2fe:	3708      	adds	r7, #8
 800e300:	46bd      	mov	sp, r7
 800e302:	bd80      	pop	{r7, pc}

0800e304 <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EEC1Ev>:
      constexpr __shared_ptr() noexcept
 800e304:	b580      	push	{r7, lr}
 800e306:	b082      	sub	sp, #8
 800e308:	af00      	add	r7, sp, #0
 800e30a:	6078      	str	r0, [r7, #4]
      : _M_ptr(0), _M_refcount()
 800e30c:	687b      	ldr	r3, [r7, #4]
 800e30e:	2200      	movs	r2, #0
 800e310:	601a      	str	r2, [r3, #0]
 800e312:	687b      	ldr	r3, [r7, #4]
 800e314:	3304      	adds	r3, #4
 800e316:	4618      	mov	r0, r3
 800e318:	f7fe fac5 	bl	800c8a6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
      { }
 800e31c:	687b      	ldr	r3, [r7, #4]
 800e31e:	4618      	mov	r0, r3
 800e320:	3708      	adds	r7, #8
 800e322:	46bd      	mov	sp, r7
 800e324:	bd80      	pop	{r7, pc}
	...

0800e328 <_ZN11RemoraCommsC1EPV8rxData_tPV8txData_tPV14DMA_RxBuffer_tP11SPI_TypeDef>:

/**
 * @brief Constructs a new RemoraComms object.
 * @param spiType Pointer to the SPI instance.
 */
RemoraComms::RemoraComms(volatile rxData_t* ptrRxData, volatile txData_t* ptrTxData, volatile DMA_RxBuffer_t* ptrRxDMABuffer, SPI_TypeDef* spiType) :
 800e328:	b590      	push	{r4, r7, lr}
 800e32a:	b093      	sub	sp, #76	@ 0x4c
 800e32c:	af00      	add	r7, sp, #0
 800e32e:	60f8      	str	r0, [r7, #12]
 800e330:	60b9      	str	r1, [r7, #8]
 800e332:	607a      	str	r2, [r7, #4]
 800e334:	603b      	str	r3, [r7, #0]
	ptrRxData(ptrRxData),
	ptrTxData(ptrTxData),
	ptrRxDMABuffer(ptrRxDMABuffer),
	spiType(spiType)
 800e336:	68fb      	ldr	r3, [r7, #12]
 800e338:	4618      	mov	r0, r3
 800e33a:	f7ff fe67 	bl	800e00c <_ZN6ModuleC1Ev>
 800e33e:	4a39      	ldr	r2, [pc, #228]	@ (800e424 <_ZN11RemoraCommsC1EPV8rxData_tPV8txData_tPV14DMA_RxBuffer_tP11SPI_TypeDef+0xfc>)
 800e340:	68fb      	ldr	r3, [r7, #12]
 800e342:	601a      	str	r2, [r3, #0]
	ptrRxData(ptrRxData),
 800e344:	68fb      	ldr	r3, [r7, #12]
 800e346:	68ba      	ldr	r2, [r7, #8]
 800e348:	621a      	str	r2, [r3, #32]
	ptrTxData(ptrTxData),
 800e34a:	68fb      	ldr	r3, [r7, #12]
 800e34c:	687a      	ldr	r2, [r7, #4]
 800e34e:	625a      	str	r2, [r3, #36]	@ 0x24
	ptrRxDMABuffer(ptrRxDMABuffer),
 800e350:	68fb      	ldr	r3, [r7, #12]
 800e352:	683a      	ldr	r2, [r7, #0]
 800e354:	629a      	str	r2, [r3, #40]	@ 0x28
	spiType(spiType)
 800e356:	68fb      	ldr	r3, [r7, #12]
 800e358:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800e35a:	62da      	str	r2, [r3, #44]	@ 0x2c
{
    this->spiHandle.Instance = this->spiType;
 800e35c:	68fb      	ldr	r3, [r7, #12]
 800e35e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e360:	68fb      	ldr	r3, [r7, #12]
 800e362:	649a      	str	r2, [r3, #72]	@ 0x48
    this->status = false;
 800e364:	68fb      	ldr	r3, [r7, #12]
 800e366:	2200      	movs	r2, #0
 800e368:	f883 223c 	strb.w	r2, [r3, #572]	@ 0x23c

    this->irqNss = 		EXTI4_IRQn;
 800e36c:	68fb      	ldr	r3, [r7, #12]
 800e36e:	220a      	movs	r2, #10
 800e370:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    this->irqDMAtx = 	DMA1_Stream0_IRQn;
 800e374:	68fb      	ldr	r3, [r7, #12]
 800e376:	220b      	movs	r2, #11
 800e378:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    this->irqDMArx = 	DMA1_Stream1_IRQn;
 800e37c:	68fb      	ldr	r3, [r7, #12]
 800e37e:	220c      	movs	r2, #12
 800e380:	f8a3 2042 	strh.w	r2, [r3, #66]	@ 0x42

    // Note: Avoid performing complex initialisation here as this constructor is called before DMA and cache setup.

    pin1 = new Pin("PE_11", OUTPUT);
 800e384:	2044      	movs	r0, #68	@ 0x44
 800e386:	f00f ff09 	bl	801e19c <_Znwj>
 800e38a:	4603      	mov	r3, r0
 800e38c:	461c      	mov	r4, r3
 800e38e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800e392:	4618      	mov	r0, r3
 800e394:	f00f ff13 	bl	801e1be <_ZNSaIcEC1Ev>
 800e398:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 800e39c:	f107 0310 	add.w	r3, r7, #16
 800e3a0:	4921      	ldr	r1, [pc, #132]	@ (800e428 <_ZN11RemoraCommsC1EPV8rxData_tPV8txData_tPV14DMA_RxBuffer_tP11SPI_TypeDef+0x100>)
 800e3a2:	4618      	mov	r0, r3
 800e3a4:	f7f6 fd26 	bl	8004df4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 800e3a8:	f107 0310 	add.w	r3, r7, #16
 800e3ac:	2201      	movs	r2, #1
 800e3ae:	4619      	mov	r1, r3
 800e3b0:	4620      	mov	r0, r4
 800e3b2:	f7f3 ff12 	bl	80021da <_ZN3PinC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi>
 800e3b6:	68fb      	ldr	r3, [r7, #12]
 800e3b8:	619c      	str	r4, [r3, #24]
 800e3ba:	f107 0310 	add.w	r3, r7, #16
 800e3be:	4618      	mov	r0, r3
 800e3c0:	f00f ff99 	bl	801e2f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800e3c4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800e3c8:	4618      	mov	r0, r3
 800e3ca:	f00f fef9 	bl	801e1c0 <_ZNSaIcED1Ev>
    pin2 = new Pin("PE_12", OUTPUT);
 800e3ce:	2044      	movs	r0, #68	@ 0x44
 800e3d0:	f00f fee4 	bl	801e19c <_Znwj>
 800e3d4:	4603      	mov	r3, r0
 800e3d6:	461c      	mov	r4, r3
 800e3d8:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 800e3dc:	4618      	mov	r0, r3
 800e3de:	f00f feee 	bl	801e1be <_ZNSaIcEC1Ev>
 800e3e2:	f107 0244 	add.w	r2, r7, #68	@ 0x44
 800e3e6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800e3ea:	4910      	ldr	r1, [pc, #64]	@ (800e42c <_ZN11RemoraCommsC1EPV8rxData_tPV8txData_tPV14DMA_RxBuffer_tP11SPI_TypeDef+0x104>)
 800e3ec:	4618      	mov	r0, r3
 800e3ee:	f7f6 fd01 	bl	8004df4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 800e3f2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800e3f6:	2201      	movs	r2, #1
 800e3f8:	4619      	mov	r1, r3
 800e3fa:	4620      	mov	r0, r4
 800e3fc:	f7f3 feed 	bl	80021da <_ZN3PinC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi>
 800e400:	68fb      	ldr	r3, [r7, #12]
 800e402:	61dc      	str	r4, [r3, #28]
 800e404:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800e408:	4618      	mov	r0, r3
 800e40a:	f00f ff74 	bl	801e2f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800e40e:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 800e412:	4618      	mov	r0, r3
 800e414:	f00f fed4 	bl	801e1c0 <_ZNSaIcED1Ev>
}
 800e418:	68fb      	ldr	r3, [r7, #12]
 800e41a:	4618      	mov	r0, r3
 800e41c:	374c      	adds	r7, #76	@ 0x4c
 800e41e:	46bd      	mov	sp, r7
 800e420:	bd90      	pop	{r4, r7, pc}
 800e422:	bf00      	nop
 800e424:	08020640 	.word	0x08020640
 800e428:	080201c4 	.word	0x080201c4
 800e42c:	080201cc 	.word	0x080201cc

0800e430 <_ZN11RemoraComms4initEv>:
 * @brief Initializes the SPI, GPIO, and DMA configurations.
 *
 * Configures SPI as a slave device with associated GPIO and DMA settings.
 */
void RemoraComms::init()
{
 800e430:	b580      	push	{r7, lr}
 800e432:	b08a      	sub	sp, #40	@ 0x28
 800e434:	af00      	add	r7, sp, #0
 800e436:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e438:	f107 0314 	add.w	r3, r7, #20
 800e43c:	2200      	movs	r2, #0
 800e43e:	601a      	str	r2, [r3, #0]
 800e440:	605a      	str	r2, [r3, #4]
 800e442:	609a      	str	r2, [r3, #8]
 800e444:	60da      	str	r2, [r3, #12]
 800e446:	611a      	str	r2, [r3, #16]

    if(this->spiHandle.Instance == SPI1)
 800e448:	687b      	ldr	r3, [r7, #4]
 800e44a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800e44c:	4ab1      	ldr	r2, [pc, #708]	@ (800e714 <_ZN11RemoraComms4initEv+0x2e4>)
 800e44e:	4293      	cmp	r3, r2
 800e450:	f040 815b 	bne.w	800e70a <_ZN11RemoraComms4initEv+0x2da>
    {
    	// Interrupt pin is the NSS pin
        // Configure GPIO pin : PA_4

        __HAL_RCC_GPIOC_CLK_ENABLE();
 800e454:	4bb0      	ldr	r3, [pc, #704]	@ (800e718 <_ZN11RemoraComms4initEv+0x2e8>)
 800e456:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800e45a:	4aaf      	ldr	r2, [pc, #700]	@ (800e718 <_ZN11RemoraComms4initEv+0x2e8>)
 800e45c:	f043 0304 	orr.w	r3, r3, #4
 800e460:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800e464:	4bac      	ldr	r3, [pc, #688]	@ (800e718 <_ZN11RemoraComms4initEv+0x2e8>)
 800e466:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800e46a:	f003 0304 	and.w	r3, r3, #4
 800e46e:	613b      	str	r3, [r7, #16]
 800e470:	693b      	ldr	r3, [r7, #16]

        GPIO_InitStruct.Pin = GPIO_PIN_4;
 800e472:	2310      	movs	r3, #16
 800e474:	617b      	str	r3, [r7, #20]
        GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800e476:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800e47a:	61bb      	str	r3, [r7, #24]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e47c:	2300      	movs	r3, #0
 800e47e:	61fb      	str	r3, [r7, #28]
        HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e480:	f107 0314 	add.w	r3, r7, #20
 800e484:	4619      	mov	r1, r3
 800e486:	48a5      	ldr	r0, [pc, #660]	@ (800e71c <_ZN11RemoraComms4initEv+0x2ec>)
 800e488:	f005 fe90 	bl	80141ac <HAL_GPIO_Init>

        printf("	Initialising SPI1 slave\n");
 800e48c:	48a4      	ldr	r0, [pc, #656]	@ (800e720 <_ZN11RemoraComms4initEv+0x2f0>)
 800e48e:	f010 fa79 	bl	801e984 <puts>

        this->spiHandle.Init.Mode           		= SPI_MODE_SLAVE;
 800e492:	687b      	ldr	r3, [r7, #4]
 800e494:	2200      	movs	r2, #0
 800e496:	64da      	str	r2, [r3, #76]	@ 0x4c
        this->spiHandle.Init.Direction      		= SPI_DIRECTION_2LINES;
 800e498:	687b      	ldr	r3, [r7, #4]
 800e49a:	2200      	movs	r2, #0
 800e49c:	651a      	str	r2, [r3, #80]	@ 0x50
        this->spiHandle.Init.DataSize       		= SPI_DATASIZE_8BIT;
 800e49e:	687b      	ldr	r3, [r7, #4]
 800e4a0:	2207      	movs	r2, #7
 800e4a2:	655a      	str	r2, [r3, #84]	@ 0x54
        this->spiHandle.Init.CLKPolarity    		= SPI_POLARITY_LOW;
 800e4a4:	687b      	ldr	r3, [r7, #4]
 800e4a6:	2200      	movs	r2, #0
 800e4a8:	659a      	str	r2, [r3, #88]	@ 0x58
        this->spiHandle.Init.CLKPhase       		= SPI_PHASE_1EDGE;
 800e4aa:	687b      	ldr	r3, [r7, #4]
 800e4ac:	2200      	movs	r2, #0
 800e4ae:	65da      	str	r2, [r3, #92]	@ 0x5c
        this->spiHandle.Init.NSS            		= SPI_NSS_HARD_INPUT;
 800e4b0:	687b      	ldr	r3, [r7, #4]
 800e4b2:	2200      	movs	r2, #0
 800e4b4:	661a      	str	r2, [r3, #96]	@ 0x60
        this->spiHandle.Init.FirstBit       		= SPI_FIRSTBIT_MSB;
 800e4b6:	687b      	ldr	r3, [r7, #4]
 800e4b8:	2200      	movs	r2, #0
 800e4ba:	669a      	str	r2, [r3, #104]	@ 0x68
        this->spiHandle.Init.TIMode         		= SPI_TIMODE_DISABLE;
 800e4bc:	687b      	ldr	r3, [r7, #4]
 800e4be:	2200      	movs	r2, #0
 800e4c0:	66da      	str	r2, [r3, #108]	@ 0x6c
        this->spiHandle.Init.CRCCalculation 		= SPI_CRCCALCULATION_DISABLE;
 800e4c2:	687b      	ldr	r3, [r7, #4]
 800e4c4:	2200      	movs	r2, #0
 800e4c6:	671a      	str	r2, [r3, #112]	@ 0x70
        this->spiHandle.Init.CRCPolynomial  		= 0x0;
 800e4c8:	687b      	ldr	r3, [r7, #4]
 800e4ca:	2200      	movs	r2, #0
 800e4cc:	675a      	str	r2, [r3, #116]	@ 0x74
        this->spiHandle.Init.NSSPMode 				= SPI_NSS_PULSE_DISABLE;
 800e4ce:	687b      	ldr	r3, [r7, #4]
 800e4d0:	2200      	movs	r2, #0
 800e4d2:	67da      	str	r2, [r3, #124]	@ 0x7c
        this->spiHandle.Init.NSSPolarity 			= SPI_NSS_POLARITY_LOW;
 800e4d4:	687b      	ldr	r3, [r7, #4]
 800e4d6:	2200      	movs	r2, #0
 800e4d8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        this->spiHandle.Init.FifoThreshold 			= SPI_FIFO_THRESHOLD_01DATA;
 800e4dc:	687b      	ldr	r3, [r7, #4]
 800e4de:	2200      	movs	r2, #0
 800e4e0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        this->spiHandle.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800e4e4:	687b      	ldr	r3, [r7, #4]
 800e4e6:	2200      	movs	r2, #0
 800e4e8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        this->spiHandle.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800e4ec:	687b      	ldr	r3, [r7, #4]
 800e4ee:	2200      	movs	r2, #0
 800e4f0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        this->spiHandle.Init.MasterSSIdleness 		= SPI_MASTER_SS_IDLENESS_00CYCLE;
 800e4f4:	687b      	ldr	r3, [r7, #4]
 800e4f6:	2200      	movs	r2, #0
 800e4f8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        this->spiHandle.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800e4fc:	687b      	ldr	r3, [r7, #4]
 800e4fe:	2200      	movs	r2, #0
 800e500:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        this->spiHandle.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800e504:	687b      	ldr	r3, [r7, #4]
 800e506:	2200      	movs	r2, #0
 800e508:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        this->spiHandle.Init.MasterKeepIOState 		= SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800e50c:	687b      	ldr	r3, [r7, #4]
 800e50e:	2200      	movs	r2, #0
 800e510:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        this->spiHandle.Init.IOSwap 				= SPI_IO_SWAP_DISABLE;
 800e514:	687b      	ldr	r3, [r7, #4]
 800e516:	2200      	movs	r2, #0
 800e518:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

        HAL_SPI_Init(&this->spiHandle);
 800e51c:	687b      	ldr	r3, [r7, #4]
 800e51e:	3348      	adds	r3, #72	@ 0x48
 800e520:	4618      	mov	r0, r3
 800e522:	f00b f98f 	bl	8019844 <HAL_SPI_Init>

    	// Peripheral clock enable
    	__HAL_RCC_SPI1_CLK_ENABLE();
 800e526:	4b7c      	ldr	r3, [pc, #496]	@ (800e718 <_ZN11RemoraComms4initEv+0x2e8>)
 800e528:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800e52c:	4a7a      	ldr	r2, [pc, #488]	@ (800e718 <_ZN11RemoraComms4initEv+0x2e8>)
 800e52e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800e532:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800e536:	4b78      	ldr	r3, [pc, #480]	@ (800e718 <_ZN11RemoraComms4initEv+0x2e8>)
 800e538:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800e53c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800e540:	60fb      	str	r3, [r7, #12]
 800e542:	68fb      	ldr	r3, [r7, #12]

		printf("	Initialising GPIO for SPI\n");
 800e544:	4877      	ldr	r0, [pc, #476]	@ (800e724 <_ZN11RemoraComms4initEv+0x2f4>)
 800e546:	f010 fa1d 	bl	801e984 <puts>

	    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e54a:	4b73      	ldr	r3, [pc, #460]	@ (800e718 <_ZN11RemoraComms4initEv+0x2e8>)
 800e54c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800e550:	4a71      	ldr	r2, [pc, #452]	@ (800e718 <_ZN11RemoraComms4initEv+0x2e8>)
 800e552:	f043 0301 	orr.w	r3, r3, #1
 800e556:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800e55a:	4b6f      	ldr	r3, [pc, #444]	@ (800e718 <_ZN11RemoraComms4initEv+0x2e8>)
 800e55c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800e560:	f003 0301 	and.w	r3, r3, #1
 800e564:	60bb      	str	r3, [r7, #8]
 800e566:	68bb      	ldr	r3, [r7, #8]
	    PA4     ------> SPI1_NSS
	    PA5     ------> SPI1_SCK
	    PA6     ------> SPI1_MISO
	    PA7     ------> SPI1_MOSI
	    */
    	GPIO_InitStruct = {0};
 800e568:	f107 0314 	add.w	r3, r7, #20
 800e56c:	2200      	movs	r2, #0
 800e56e:	601a      	str	r2, [r3, #0]
 800e570:	605a      	str	r2, [r3, #4]
 800e572:	609a      	str	r2, [r3, #8]
 800e574:	60da      	str	r2, [r3, #12]
 800e576:	611a      	str	r2, [r3, #16]
	    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800e578:	23f0      	movs	r3, #240	@ 0xf0
 800e57a:	617b      	str	r3, [r7, #20]
	    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e57c:	2302      	movs	r3, #2
 800e57e:	61bb      	str	r3, [r7, #24]
	    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e580:	2300      	movs	r3, #0
 800e582:	61fb      	str	r3, [r7, #28]
	    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e584:	2300      	movs	r3, #0
 800e586:	623b      	str	r3, [r7, #32]
	    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800e588:	2305      	movs	r3, #5
 800e58a:	627b      	str	r3, [r7, #36]	@ 0x24
	    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e58c:	f107 0314 	add.w	r3, r7, #20
 800e590:	4619      	mov	r1, r3
 800e592:	4862      	ldr	r0, [pc, #392]	@ (800e71c <_ZN11RemoraComms4initEv+0x2ec>)
 800e594:	f005 fe0a 	bl	80141ac <HAL_GPIO_Init>

        printf("	Initialising DMA for SPI\n");
 800e598:	4863      	ldr	r0, [pc, #396]	@ (800e728 <_ZN11RemoraComms4initEv+0x2f8>)
 800e59a:	f010 f9f3 	bl	801e984 <puts>

        this->hdma_spi_tx.Instance 					= DMA1_Stream0;
 800e59e:	687b      	ldr	r3, [r7, #4]
 800e5a0:	4a62      	ldr	r2, [pc, #392]	@ (800e72c <_ZN11RemoraComms4initEv+0x2fc>)
 800e5a2:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
        this->hdma_spi_tx.Init.Request 				= DMA_REQUEST_SPI1_TX;
 800e5a6:	687b      	ldr	r3, [r7, #4]
 800e5a8:	2226      	movs	r2, #38	@ 0x26
 800e5aa:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
        this->hdma_spi_tx.Init.Direction 			= DMA_MEMORY_TO_PERIPH;
 800e5ae:	687b      	ldr	r3, [r7, #4]
 800e5b0:	2240      	movs	r2, #64	@ 0x40
 800e5b2:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8
        this->hdma_spi_tx.Init.PeriphInc 			= DMA_PINC_DISABLE;
 800e5b6:	687b      	ldr	r3, [r7, #4]
 800e5b8:	2200      	movs	r2, #0
 800e5ba:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
        this->hdma_spi_tx.Init.MemInc 				= DMA_MINC_ENABLE;
 800e5be:	687b      	ldr	r3, [r7, #4]
 800e5c0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800e5c4:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
        this->hdma_spi_tx.Init.PeriphDataAlignment 	= DMA_PDATAALIGN_BYTE;
 800e5c8:	687b      	ldr	r3, [r7, #4]
 800e5ca:	2200      	movs	r2, #0
 800e5cc:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
        this->hdma_spi_tx.Init.MemDataAlignment 	= DMA_MDATAALIGN_BYTE;
 800e5d0:	687b      	ldr	r3, [r7, #4]
 800e5d2:	2200      	movs	r2, #0
 800e5d4:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8
        this->hdma_spi_tx.Init.Mode 				= DMA_CIRCULAR;
 800e5d8:	687b      	ldr	r3, [r7, #4]
 800e5da:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800e5de:	f8c3 20ec 	str.w	r2, [r3, #236]	@ 0xec
        this->hdma_spi_tx.Init.Priority 			= DMA_PRIORITY_LOW;
 800e5e2:	687b      	ldr	r3, [r7, #4]
 800e5e4:	2200      	movs	r2, #0
 800e5e6:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0
        this->hdma_spi_tx.Init.FIFOMode 			= DMA_FIFOMODE_DISABLE;
 800e5ea:	687b      	ldr	r3, [r7, #4]
 800e5ec:	2200      	movs	r2, #0
 800e5ee:	f8c3 20f4 	str.w	r2, [r3, #244]	@ 0xf4

        HAL_DMA_Init(&this->hdma_spi_tx);
 800e5f2:	687b      	ldr	r3, [r7, #4]
 800e5f4:	33d0      	adds	r3, #208	@ 0xd0
 800e5f6:	4618      	mov	r0, r3
 800e5f8:	f003 fa98 	bl	8011b2c <HAL_DMA_Init>
        __HAL_LINKDMA(&this->spiHandle, hdmatx, this->hdma_spi_tx);
 800e5fc:	687b      	ldr	r3, [r7, #4]
 800e5fe:	f103 02d0 	add.w	r2, r3, #208	@ 0xd0
 800e602:	687b      	ldr	r3, [r7, #4]
 800e604:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
 800e608:	687b      	ldr	r3, [r7, #4]
 800e60a:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 800e60e:	687b      	ldr	r3, [r7, #4]
 800e610:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108

        this->hdma_spi_rx.Instance 					= DMA1_Stream1;
 800e614:	687b      	ldr	r3, [r7, #4]
 800e616:	4a46      	ldr	r2, [pc, #280]	@ (800e730 <_ZN11RemoraComms4initEv+0x300>)
 800e618:	f8c3 2148 	str.w	r2, [r3, #328]	@ 0x148
        this->hdma_spi_rx.Init.Request 				= DMA_REQUEST_SPI1_RX;
 800e61c:	687b      	ldr	r3, [r7, #4]
 800e61e:	2225      	movs	r2, #37	@ 0x25
 800e620:	f8c3 214c 	str.w	r2, [r3, #332]	@ 0x14c
        this->hdma_spi_rx.Init.Direction 			= DMA_PERIPH_TO_MEMORY;
 800e624:	687b      	ldr	r3, [r7, #4]
 800e626:	2200      	movs	r2, #0
 800e628:	f8c3 2150 	str.w	r2, [r3, #336]	@ 0x150
        this->hdma_spi_rx.Init.PeriphInc 			= DMA_PINC_DISABLE;
 800e62c:	687b      	ldr	r3, [r7, #4]
 800e62e:	2200      	movs	r2, #0
 800e630:	f8c3 2154 	str.w	r2, [r3, #340]	@ 0x154
        this->hdma_spi_rx.Init.MemInc 				= DMA_MINC_ENABLE;
 800e634:	687b      	ldr	r3, [r7, #4]
 800e636:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800e63a:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158
        this->hdma_spi_rx.Init.PeriphDataAlignment 	= DMA_PDATAALIGN_BYTE;
 800e63e:	687b      	ldr	r3, [r7, #4]
 800e640:	2200      	movs	r2, #0
 800e642:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
        this->hdma_spi_rx.Init.MemDataAlignment 	= DMA_MDATAALIGN_BYTE;
 800e646:	687b      	ldr	r3, [r7, #4]
 800e648:	2200      	movs	r2, #0
 800e64a:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160
        this->hdma_spi_rx.Init.Mode 				= DMA_CIRCULAR;
 800e64e:	687b      	ldr	r3, [r7, #4]
 800e650:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800e654:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164
        this->hdma_spi_rx.Init.Priority 			= DMA_PRIORITY_LOW;
 800e658:	687b      	ldr	r3, [r7, #4]
 800e65a:	2200      	movs	r2, #0
 800e65c:	f8c3 2168 	str.w	r2, [r3, #360]	@ 0x168
        this->hdma_spi_rx.Init.FIFOMode 			= DMA_FIFOMODE_DISABLE;
 800e660:	687b      	ldr	r3, [r7, #4]
 800e662:	2200      	movs	r2, #0
 800e664:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c

        HAL_DMA_Init(&this->hdma_spi_rx);
 800e668:	687b      	ldr	r3, [r7, #4]
 800e66a:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 800e66e:	4618      	mov	r0, r3
 800e670:	f003 fa5c 	bl	8011b2c <HAL_DMA_Init>
        __HAL_LINKDMA(&this->spiHandle, hdmarx, this->hdma_spi_rx);
 800e674:	687b      	ldr	r3, [r7, #4]
 800e676:	f503 72a4 	add.w	r2, r3, #328	@ 0x148
 800e67a:	687b      	ldr	r3, [r7, #4]
 800e67c:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
 800e680:	687b      	ldr	r3, [r7, #4]
 800e682:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 800e686:	687b      	ldr	r3, [r7, #4]
 800e688:	f8c3 2180 	str.w	r2, [r3, #384]	@ 0x180

        printf("	Initialising DMA for Memory to Memory transfer\n");
 800e68c:	4829      	ldr	r0, [pc, #164]	@ (800e734 <_ZN11RemoraComms4initEv+0x304>)
 800e68e:	f010 f979 	bl	801e984 <puts>

        this->hdma_memtomem.Instance 				= DMA1_Stream2;
 800e692:	687b      	ldr	r3, [r7, #4]
 800e694:	4a28      	ldr	r2, [pc, #160]	@ (800e738 <_ZN11RemoraComms4initEv+0x308>)
 800e696:	f8c3 21c0 	str.w	r2, [r3, #448]	@ 0x1c0
        this->hdma_memtomem.Init.Request 			= DMA_REQUEST_MEM2MEM;
 800e69a:	687b      	ldr	r3, [r7, #4]
 800e69c:	2200      	movs	r2, #0
 800e69e:	f8c3 21c4 	str.w	r2, [r3, #452]	@ 0x1c4
        this->hdma_memtomem.Init.Direction 			= DMA_MEMORY_TO_MEMORY;
 800e6a2:	687b      	ldr	r3, [r7, #4]
 800e6a4:	2280      	movs	r2, #128	@ 0x80
 800e6a6:	f8c3 21c8 	str.w	r2, [r3, #456]	@ 0x1c8
        this->hdma_memtomem.Init.PeriphInc 			= DMA_PINC_ENABLE;
 800e6aa:	687b      	ldr	r3, [r7, #4]
 800e6ac:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e6b0:	f8c3 21cc 	str.w	r2, [r3, #460]	@ 0x1cc
        this->hdma_memtomem.Init.MemInc 			= DMA_MINC_ENABLE;
 800e6b4:	687b      	ldr	r3, [r7, #4]
 800e6b6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800e6ba:	f8c3 21d0 	str.w	r2, [r3, #464]	@ 0x1d0
        this->hdma_memtomem.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800e6be:	687b      	ldr	r3, [r7, #4]
 800e6c0:	2200      	movs	r2, #0
 800e6c2:	f8c3 21d4 	str.w	r2, [r3, #468]	@ 0x1d4
        this->hdma_memtomem.Init.MemDataAlignment 	= DMA_MDATAALIGN_BYTE;
 800e6c6:	687b      	ldr	r3, [r7, #4]
 800e6c8:	2200      	movs	r2, #0
 800e6ca:	f8c3 21d8 	str.w	r2, [r3, #472]	@ 0x1d8
        this->hdma_memtomem.Init.Mode 				= DMA_NORMAL;
 800e6ce:	687b      	ldr	r3, [r7, #4]
 800e6d0:	2200      	movs	r2, #0
 800e6d2:	f8c3 21dc 	str.w	r2, [r3, #476]	@ 0x1dc
        this->hdma_memtomem.Init.Priority 			= DMA_PRIORITY_LOW;
 800e6d6:	687b      	ldr	r3, [r7, #4]
 800e6d8:	2200      	movs	r2, #0
 800e6da:	f8c3 21e0 	str.w	r2, [r3, #480]	@ 0x1e0
        this->hdma_memtomem.Init.FIFOMode 			= DMA_FIFOMODE_ENABLE;
 800e6de:	687b      	ldr	r3, [r7, #4]
 800e6e0:	2204      	movs	r2, #4
 800e6e2:	f8c3 21e4 	str.w	r2, [r3, #484]	@ 0x1e4
        this->hdma_memtomem.Init.FIFOThreshold 		= DMA_FIFO_THRESHOLD_FULL;
 800e6e6:	687b      	ldr	r3, [r7, #4]
 800e6e8:	2203      	movs	r2, #3
 800e6ea:	f8c3 21e8 	str.w	r2, [r3, #488]	@ 0x1e8
        this->hdma_memtomem.Init.MemBurst 			= DMA_MBURST_SINGLE;
 800e6ee:	687b      	ldr	r3, [r7, #4]
 800e6f0:	2200      	movs	r2, #0
 800e6f2:	f8c3 21ec 	str.w	r2, [r3, #492]	@ 0x1ec
        this->hdma_memtomem.Init.PeriphBurst 		= DMA_PBURST_SINGLE;
 800e6f6:	687b      	ldr	r3, [r7, #4]
 800e6f8:	2200      	movs	r2, #0
 800e6fa:	f8c3 21f0 	str.w	r2, [r3, #496]	@ 0x1f0

        HAL_DMA_Init(&this->hdma_memtomem);
 800e6fe:	687b      	ldr	r3, [r7, #4]
 800e700:	f503 73e0 	add.w	r3, r3, #448	@ 0x1c0
 800e704:	4618      	mov	r0, r3
 800e706:	f003 fa11 	bl	8011b2c <HAL_DMA_Init>
    }
}
 800e70a:	bf00      	nop
 800e70c:	3728      	adds	r7, #40	@ 0x28
 800e70e:	46bd      	mov	sp, r7
 800e710:	bd80      	pop	{r7, pc}
 800e712:	bf00      	nop
 800e714:	40013000 	.word	0x40013000
 800e718:	58024400 	.word	0x58024400
 800e71c:	58020000 	.word	0x58020000
 800e720:	080201d4 	.word	0x080201d4
 800e724:	080201f0 	.word	0x080201f0
 800e728:	0802020c 	.word	0x0802020c
 800e72c:	40020010 	.word	0x40020010
 800e730:	40020028 	.word	0x40020028
 800e734:	08020228 	.word	0x08020228
 800e738:	40020040 	.word	0x40020040

0800e73c <_ZN11RemoraComms5startEv>:
 * This function sets up the SPI and DMA communication by registering interrupt handlers for
 * NSS (slave select), DMA Rx, and DMA Tx. It also initializes the data buffers and starts
 * the multi-buffer DMA SPI communication.
 */
void RemoraComms::start()
{
 800e73c:	b590      	push	{r4, r7, lr}
 800e73e:	b08b      	sub	sp, #44	@ 0x2c
 800e740:	af02      	add	r7, sp, #8
 800e742:	6078      	str	r0, [r7, #4]
    // Register the NSS (slave select) interrupt
    NssInterrupt = new ModuleInterrupt<RemoraComms>(
        this->irqNss,
        this,
        &RemoraComms::handleNssInterrupt
    );
 800e744:	2010      	movs	r0, #16
 800e746:	f00f fd29 	bl	801e19c <_Znwj>
 800e74a:	4603      	mov	r3, r0
 800e74c:	461c      	mov	r4, r3
 800e74e:	687b      	ldr	r3, [r7, #4]
 800e750:	f9b3 1040 	ldrsh.w	r1, [r3, #64]	@ 0x40
 800e754:	4b53      	ldr	r3, [pc, #332]	@ (800e8a4 <_ZN11RemoraComms5startEv+0x168>)
 800e756:	60bb      	str	r3, [r7, #8]
 800e758:	2300      	movs	r3, #0
 800e75a:	60fb      	str	r3, [r7, #12]
 800e75c:	68fb      	ldr	r3, [r7, #12]
 800e75e:	9300      	str	r3, [sp, #0]
 800e760:	68bb      	ldr	r3, [r7, #8]
 800e762:	687a      	ldr	r2, [r7, #4]
 800e764:	4620      	mov	r0, r4
 800e766:	f000 fedb 	bl	800f520 <_ZN15ModuleInterruptI11RemoraCommsEC1E9IRQn_TypePS0_MS0_FvvE>
    NssInterrupt = new ModuleInterrupt<RemoraComms>(
 800e76a:	687b      	ldr	r3, [r7, #4]
 800e76c:	635c      	str	r4, [r3, #52]	@ 0x34
    HAL_NVIC_SetPriority(this->irqNss, Config::spiNssIrqPriority, 0);
 800e76e:	687b      	ldr	r3, [r7, #4]
 800e770:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 800e774:	2200      	movs	r2, #0
 800e776:	2106      	movs	r1, #6
 800e778:	4618      	mov	r0, r3
 800e77a:	f003 f926 	bl	80119ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(this->irqNss);
 800e77e:	687b      	ldr	r3, [r7, #4]
 800e780:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 800e784:	4618      	mov	r0, r3
 800e786:	f003 f93a 	bl	80119fe <HAL_NVIC_EnableIRQ>
    // Register the DMA Rx interrupt
    dmaRxInterrupt = new ModuleInterrupt<RemoraComms>(
        this->irqDMArx,
        this,
        &RemoraComms::handleRxInterrupt
    );
 800e78a:	2010      	movs	r0, #16
 800e78c:	f00f fd06 	bl	801e19c <_Znwj>
 800e790:	4603      	mov	r3, r0
 800e792:	461c      	mov	r4, r3
 800e794:	687b      	ldr	r3, [r7, #4]
 800e796:	f9b3 1042 	ldrsh.w	r1, [r3, #66]	@ 0x42
 800e79a:	4b43      	ldr	r3, [pc, #268]	@ (800e8a8 <_ZN11RemoraComms5startEv+0x16c>)
 800e79c:	613b      	str	r3, [r7, #16]
 800e79e:	2300      	movs	r3, #0
 800e7a0:	617b      	str	r3, [r7, #20]
 800e7a2:	697b      	ldr	r3, [r7, #20]
 800e7a4:	9300      	str	r3, [sp, #0]
 800e7a6:	693b      	ldr	r3, [r7, #16]
 800e7a8:	687a      	ldr	r2, [r7, #4]
 800e7aa:	4620      	mov	r0, r4
 800e7ac:	f000 feb8 	bl	800f520 <_ZN15ModuleInterruptI11RemoraCommsEC1E9IRQn_TypePS0_MS0_FvvE>
    dmaRxInterrupt = new ModuleInterrupt<RemoraComms>(
 800e7b0:	687b      	ldr	r3, [r7, #4]
 800e7b2:	63dc      	str	r4, [r3, #60]	@ 0x3c
    HAL_NVIC_SetPriority(this->irqDMArx, Config::spiDmaRxIrqPriority, 0);
 800e7b4:	687b      	ldr	r3, [r7, #4]
 800e7b6:	f9b3 3042 	ldrsh.w	r3, [r3, #66]	@ 0x42
 800e7ba:	2200      	movs	r2, #0
 800e7bc:	2105      	movs	r1, #5
 800e7be:	4618      	mov	r0, r3
 800e7c0:	f003 f903 	bl	80119ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(this->irqDMArx);
 800e7c4:	687b      	ldr	r3, [r7, #4]
 800e7c6:	f9b3 3042 	ldrsh.w	r3, [r3, #66]	@ 0x42
 800e7ca:	4618      	mov	r0, r3
 800e7cc:	f003 f917 	bl	80119fe <HAL_NVIC_EnableIRQ>
    // Register the DMA Tx interrupt
    dmaTxInterrupt = new ModuleInterrupt<RemoraComms>(
        this->irqDMAtx,
        this,
        &RemoraComms::handleTxInterrupt
    );
 800e7d0:	2010      	movs	r0, #16
 800e7d2:	f00f fce3 	bl	801e19c <_Znwj>
 800e7d6:	4603      	mov	r3, r0
 800e7d8:	461c      	mov	r4, r3
 800e7da:	687b      	ldr	r3, [r7, #4]
 800e7dc:	f9b3 1044 	ldrsh.w	r1, [r3, #68]	@ 0x44
 800e7e0:	4b32      	ldr	r3, [pc, #200]	@ (800e8ac <_ZN11RemoraComms5startEv+0x170>)
 800e7e2:	61bb      	str	r3, [r7, #24]
 800e7e4:	2300      	movs	r3, #0
 800e7e6:	61fb      	str	r3, [r7, #28]
 800e7e8:	69fb      	ldr	r3, [r7, #28]
 800e7ea:	9300      	str	r3, [sp, #0]
 800e7ec:	69bb      	ldr	r3, [r7, #24]
 800e7ee:	687a      	ldr	r2, [r7, #4]
 800e7f0:	4620      	mov	r0, r4
 800e7f2:	f000 fe95 	bl	800f520 <_ZN15ModuleInterruptI11RemoraCommsEC1E9IRQn_TypePS0_MS0_FvvE>
    dmaTxInterrupt = new ModuleInterrupt<RemoraComms>(
 800e7f6:	687b      	ldr	r3, [r7, #4]
 800e7f8:	639c      	str	r4, [r3, #56]	@ 0x38
    HAL_NVIC_SetPriority(this->irqDMAtx, Config::spiDmaTxIrqPriority, 0); // TX needs higher priority than RX
 800e7fa:	687b      	ldr	r3, [r7, #4]
 800e7fc:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	@ 0x44
 800e800:	2200      	movs	r2, #0
 800e802:	2104      	movs	r1, #4
 800e804:	4618      	mov	r0, r3
 800e806:	f003 f8e0 	bl	80119ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(this->irqDMAtx);
 800e80a:	687b      	ldr	r3, [r7, #4]
 800e80c:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	@ 0x44
 800e810:	4618      	mov	r0, r3
 800e812:	f003 f8f4 	bl	80119fe <HAL_NVIC_EnableIRQ>

    // Initialize the data buffers
    memset((void*)this->ptrTxData->txBuffer, 0, sizeof(this->ptrTxData->txBuffer));
 800e816:	687b      	ldr	r3, [r7, #4]
 800e818:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e81a:	2240      	movs	r2, #64	@ 0x40
 800e81c:	2100      	movs	r1, #0
 800e81e:	4618      	mov	r0, r3
 800e820:	f010 f9aa 	bl	801eb78 <memset>
    memset((void*)this->ptrRxData->rxBuffer, 0, sizeof(this->ptrRxData->rxBuffer));
 800e824:	687b      	ldr	r3, [r7, #4]
 800e826:	6a1b      	ldr	r3, [r3, #32]
 800e828:	2240      	movs	r2, #64	@ 0x40
 800e82a:	2100      	movs	r1, #0
 800e82c:	4618      	mov	r0, r3
 800e82e:	f010 f9a3 	bl	801eb78 <memset>
    memset((void*)this->ptrRxDMABuffer->buffer[0].rxBuffer, 0, sizeof(this->ptrRxDMABuffer->buffer[0].rxBuffer));
 800e832:	687b      	ldr	r3, [r7, #4]
 800e834:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e836:	2240      	movs	r2, #64	@ 0x40
 800e838:	2100      	movs	r1, #0
 800e83a:	4618      	mov	r0, r3
 800e83c:	f010 f99c 	bl	801eb78 <memset>
    memset((void*)this->ptrRxDMABuffer->buffer[1].rxBuffer, 0, sizeof(this->ptrRxDMABuffer->buffer[1].rxBuffer));
 800e840:	687b      	ldr	r3, [r7, #4]
 800e842:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e844:	3340      	adds	r3, #64	@ 0x40
 800e846:	2240      	movs	r2, #64	@ 0x40
 800e848:	2100      	movs	r1, #0
 800e84a:	4618      	mov	r0, r3
 800e84c:	f010 f994 	bl	801eb78 <memset>
    this->ptrTxData->header = Config::pruData;
 800e850:	687b      	ldr	r3, [r7, #4]
 800e852:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e854:	4a16      	ldr	r2, [pc, #88]	@ (800e8b0 <_ZN11RemoraComms5startEv+0x174>)
 800e856:	601a      	str	r2, [r3, #0]

    // Start the multi-buffer DMA SPI communication
    this->dmaStatus = this->startMultiBufferDMASPI(
        (uint8_t*)this->ptrTxData->txBuffer,
 800e858:	687b      	ldr	r3, [r7, #4]
 800e85a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e85c:	4619      	mov	r1, r3
        (uint8_t*)this->ptrTxData->txBuffer,
 800e85e:	687b      	ldr	r3, [r7, #4]
 800e860:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e862:	4618      	mov	r0, r3
        (uint8_t*)this->ptrRxDMABuffer->buffer[0].rxBuffer,
 800e864:	687b      	ldr	r3, [r7, #4]
 800e866:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e868:	461c      	mov	r4, r3
        (uint8_t*)this->ptrRxDMABuffer->buffer[1].rxBuffer,
 800e86a:	687b      	ldr	r3, [r7, #4]
 800e86c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e86e:	3340      	adds	r3, #64	@ 0x40
    this->dmaStatus = this->startMultiBufferDMASPI(
 800e870:	2240      	movs	r2, #64	@ 0x40
 800e872:	9201      	str	r2, [sp, #4]
 800e874:	9300      	str	r3, [sp, #0]
 800e876:	4623      	mov	r3, r4
 800e878:	4602      	mov	r2, r0
 800e87a:	6878      	ldr	r0, [r7, #4]
 800e87c:	f000 f81c 	bl	800e8b8 <_ZN11RemoraComms22startMultiBufferDMASPIEPhS0_S0_S0_t>
 800e880:	4603      	mov	r3, r0
 800e882:	461a      	mov	r2, r3
 800e884:	687b      	ldr	r3, [r7, #4]
 800e886:	f883 2238 	strb.w	r2, [r3, #568]	@ 0x238
		Config::dataBuffSize
    );

    // Check for DMA initialization errors
    if (this->dmaStatus != HAL_OK)
 800e88a:	687b      	ldr	r3, [r7, #4]
 800e88c:	f893 3238 	ldrb.w	r3, [r3, #568]	@ 0x238
 800e890:	2b00      	cmp	r3, #0
 800e892:	d002      	beq.n	800e89a <_ZN11RemoraComms5startEv+0x15e>
    {
        printf("DMA SPI error\n");
 800e894:	4807      	ldr	r0, [pc, #28]	@ (800e8b4 <_ZN11RemoraComms5startEv+0x178>)
 800e896:	f010 f875 	bl	801e984 <puts>
    }
}
 800e89a:	bf00      	nop
 800e89c:	3724      	adds	r7, #36	@ 0x24
 800e89e:	46bd      	mov	sp, r7
 800e8a0:	bd90      	pop	{r4, r7, pc}
 800e8a2:	bf00      	nop
 800e8a4:	0800f2db 	.word	0x0800f2db
 800e8a8:	0800f331 	.word	0x0800f331
 800e8ac:	0800f309 	.word	0x0800f309
 800e8b0:	64617461 	.word	0x64617461
 800e8b4:	08020258 	.word	0x08020258

0800e8b8 <_ZN11RemoraComms22startMultiBufferDMASPIEPhS0_S0_S0_t>:
* @note  Circular mode is supported if the DMA is configured appropriately.
*/
HAL_StatusTypeDef RemoraComms::startMultiBufferDMASPI(uint8_t *pTxBuffer0, uint8_t *pTxBuffer1,
                                                      uint8_t *pRxBuffer0, uint8_t *pRxBuffer1,
                                                      uint16_t Size)
{
 800e8b8:	b590      	push	{r4, r7, lr}
 800e8ba:	b087      	sub	sp, #28
 800e8bc:	af02      	add	r7, sp, #8
 800e8be:	60f8      	str	r0, [r7, #12]
 800e8c0:	60b9      	str	r1, [r7, #8]
 800e8c2:	607a      	str	r2, [r7, #4]
 800e8c4:	603b      	str	r3, [r7, #0]
    /* Check Direction parameter */
    assert_param(IS_SPI_DIRECTION_2LINES(this->spiHandle.Init.Direction));

    if (this->spiHandle.State != HAL_SPI_STATE_READY)
 800e8c6:	68fb      	ldr	r3, [r7, #12]
 800e8c8:	f893 30c9 	ldrb.w	r3, [r3, #201]	@ 0xc9
 800e8cc:	b2db      	uxtb	r3, r3
 800e8ce:	2b01      	cmp	r3, #1
 800e8d0:	bf14      	ite	ne
 800e8d2:	2301      	movne	r3, #1
 800e8d4:	2300      	moveq	r3, #0
 800e8d6:	b2db      	uxtb	r3, r3
 800e8d8:	2b00      	cmp	r3, #0
 800e8da:	d001      	beq.n	800e8e0 <_ZN11RemoraComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x28>
    {
        return HAL_BUSY;
 800e8dc:	2302      	movs	r3, #2
 800e8de:	e13e      	b.n	800eb5e <_ZN11RemoraComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x2a6>
    }

    if ((pTxBuffer0 == NULL) || (pRxBuffer0 == NULL) || (Size == 0UL))
 800e8e0:	68bb      	ldr	r3, [r7, #8]
 800e8e2:	2b00      	cmp	r3, #0
 800e8e4:	d005      	beq.n	800e8f2 <_ZN11RemoraComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x3a>
 800e8e6:	683b      	ldr	r3, [r7, #0]
 800e8e8:	2b00      	cmp	r3, #0
 800e8ea:	d002      	beq.n	800e8f2 <_ZN11RemoraComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x3a>
 800e8ec:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e8ee:	2b00      	cmp	r3, #0
 800e8f0:	d101      	bne.n	800e8f6 <_ZN11RemoraComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x3e>
    {
        return HAL_ERROR;
 800e8f2:	2301      	movs	r3, #1
 800e8f4:	e133      	b.n	800eb5e <_ZN11RemoraComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x2a6>
    }

    /* If secondary Tx or Rx buffer is not provided, use the primary buffer */
    if (pTxBuffer1 == NULL)
 800e8f6:	687b      	ldr	r3, [r7, #4]
 800e8f8:	2b00      	cmp	r3, #0
 800e8fa:	d101      	bne.n	800e900 <_ZN11RemoraComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x48>
    {
        pTxBuffer1 = pTxBuffer0;
 800e8fc:	68bb      	ldr	r3, [r7, #8]
 800e8fe:	607b      	str	r3, [r7, #4]
    }

    if (pRxBuffer1 == NULL)
 800e900:	6a3b      	ldr	r3, [r7, #32]
 800e902:	2b00      	cmp	r3, #0
 800e904:	d101      	bne.n	800e90a <_ZN11RemoraComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x52>
    {
        pRxBuffer1 = pRxBuffer0;
 800e906:	683b      	ldr	r3, [r7, #0]
 800e908:	623b      	str	r3, [r7, #32]
    }

    /* Lock the process */
    __HAL_LOCK(&this->spiHandle);
 800e90a:	68fb      	ldr	r3, [r7, #12]
 800e90c:	f893 30c8 	ldrb.w	r3, [r3, #200]	@ 0xc8
 800e910:	2b01      	cmp	r3, #1
 800e912:	d101      	bne.n	800e918 <_ZN11RemoraComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x60>
 800e914:	2302      	movs	r3, #2
 800e916:	e122      	b.n	800eb5e <_ZN11RemoraComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x2a6>
 800e918:	68fb      	ldr	r3, [r7, #12]
 800e91a:	2201      	movs	r2, #1
 800e91c:	f883 20c8 	strb.w	r2, [r3, #200]	@ 0xc8

    /* Set the transaction information */
    this->spiHandle.State       = HAL_SPI_STATE_BUSY_TX_RX;
 800e920:	68fb      	ldr	r3, [r7, #12]
 800e922:	2205      	movs	r2, #5
 800e924:	f883 20c9 	strb.w	r2, [r3, #201]	@ 0xc9
    this->spiHandle.ErrorCode   = HAL_SPI_ERROR_NONE;
 800e928:	68fb      	ldr	r3, [r7, #12]
 800e92a:	2200      	movs	r2, #0
 800e92c:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc
    this->spiHandle.TxXferSize  = Size;
 800e930:	68fb      	ldr	r3, [r7, #12]
 800e932:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800e934:	f8a3 20a8 	strh.w	r2, [r3, #168]	@ 0xa8
    this->spiHandle.TxXferCount = Size;
 800e938:	68fb      	ldr	r3, [r7, #12]
 800e93a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800e93c:	f8a3 20aa 	strh.w	r2, [r3, #170]	@ 0xaa
    this->spiHandle.RxXferSize  = Size;
 800e940:	68fb      	ldr	r3, [r7, #12]
 800e942:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800e944:	f8a3 20b0 	strh.w	r2, [r3, #176]	@ 0xb0
    this->spiHandle.RxXferCount = Size;
 800e948:	68fb      	ldr	r3, [r7, #12]
 800e94a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800e94c:	f8a3 20b2 	strh.w	r2, [r3, #178]	@ 0xb2

    /* Init unused fields in handle to zero */
    this->spiHandle.RxISR       = NULL;
 800e950:	68fb      	ldr	r3, [r7, #12]
 800e952:	2200      	movs	r2, #0
 800e954:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
    this->spiHandle.TxISR       = NULL;
 800e958:	68fb      	ldr	r3, [r7, #12]
 800e95a:	2200      	movs	r2, #0
 800e95c:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc

    /* Set Full-Duplex mode */
    SPI_2LINES(&this->spiHandle);
 800e960:	68fb      	ldr	r3, [r7, #12]
 800e962:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800e964:	68da      	ldr	r2, [r3, #12]
 800e966:	68fb      	ldr	r3, [r7, #12]
 800e968:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800e96a:	f422 22c0 	bic.w	r2, r2, #393216	@ 0x60000
 800e96e:	60da      	str	r2, [r3, #12]

    /* Reset the Tx/Rx DMA bits */
    CLEAR_BIT(this->spiHandle.Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800e970:	68fb      	ldr	r3, [r7, #12]
 800e972:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800e974:	689a      	ldr	r2, [r3, #8]
 800e976:	68fb      	ldr	r3, [r7, #12]
 800e978:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800e97a:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800e97e:	609a      	str	r2, [r3, #8]

    /* Adjust XferCount according to DMA alignment / Data size */
    if (this->spiHandle.Init.DataSize <= SPI_DATASIZE_8BIT)
 800e980:	68fb      	ldr	r3, [r7, #12]
 800e982:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e984:	2b07      	cmp	r3, #7
 800e986:	d820      	bhi.n	800e9ca <_ZN11RemoraComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x112>
    {
        if (this->hdma_spi_tx.Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800e988:	68fb      	ldr	r3, [r7, #12]
 800e98a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800e98e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800e992:	d109      	bne.n	800e9a8 <_ZN11RemoraComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0xf0>
        {
            this->spiHandle.TxXferCount = (this->spiHandle.TxXferCount + 1UL) >> 1UL;
 800e994:	68fb      	ldr	r3, [r7, #12]
 800e996:	f8b3 30aa 	ldrh.w	r3, [r3, #170]	@ 0xaa
 800e99a:	b29b      	uxth	r3, r3
 800e99c:	3301      	adds	r3, #1
 800e99e:	085b      	lsrs	r3, r3, #1
 800e9a0:	b29a      	uxth	r2, r3
 800e9a2:	68fb      	ldr	r3, [r7, #12]
 800e9a4:	f8a3 20aa 	strh.w	r2, [r3, #170]	@ 0xaa
        }
        if (this->hdma_spi_rx.Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800e9a8:	68fb      	ldr	r3, [r7, #12]
 800e9aa:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 800e9ae:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800e9b2:	d12e      	bne.n	800ea12 <_ZN11RemoraComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x15a>
        {
            this->spiHandle.RxXferCount = (this->spiHandle.RxXferCount + 1UL) >> 1UL;
 800e9b4:	68fb      	ldr	r3, [r7, #12]
 800e9b6:	f8b3 30b2 	ldrh.w	r3, [r3, #178]	@ 0xb2
 800e9ba:	b29b      	uxth	r3, r3
 800e9bc:	3301      	adds	r3, #1
 800e9be:	085b      	lsrs	r3, r3, #1
 800e9c0:	b29a      	uxth	r2, r3
 800e9c2:	68fb      	ldr	r3, [r7, #12]
 800e9c4:	f8a3 20b2 	strh.w	r2, [r3, #178]	@ 0xb2
 800e9c8:	e023      	b.n	800ea12 <_ZN11RemoraComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x15a>
        }
    }
    else if (this->spiHandle.Init.DataSize <= SPI_DATASIZE_16BIT)
 800e9ca:	68fb      	ldr	r3, [r7, #12]
 800e9cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e9ce:	2b0f      	cmp	r3, #15
 800e9d0:	d81f      	bhi.n	800ea12 <_ZN11RemoraComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x15a>
    {
        if (this->hdma_spi_tx.Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800e9d2:	68fb      	ldr	r3, [r7, #12]
 800e9d4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800e9d8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800e9dc:	d109      	bne.n	800e9f2 <_ZN11RemoraComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x13a>
        {
            this->spiHandle.TxXferCount = (this->spiHandle.TxXferCount + 1UL) >> 1UL;
 800e9de:	68fb      	ldr	r3, [r7, #12]
 800e9e0:	f8b3 30aa 	ldrh.w	r3, [r3, #170]	@ 0xaa
 800e9e4:	b29b      	uxth	r3, r3
 800e9e6:	3301      	adds	r3, #1
 800e9e8:	085b      	lsrs	r3, r3, #1
 800e9ea:	b29a      	uxth	r2, r3
 800e9ec:	68fb      	ldr	r3, [r7, #12]
 800e9ee:	f8a3 20aa 	strh.w	r2, [r3, #170]	@ 0xaa
        }
        if (this->hdma_spi_rx.Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800e9f2:	68fb      	ldr	r3, [r7, #12]
 800e9f4:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 800e9f8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800e9fc:	d109      	bne.n	800ea12 <_ZN11RemoraComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x15a>
        {
            this->spiHandle.RxXferCount = (this->spiHandle.RxXferCount + 1UL) >> 1UL;
 800e9fe:	68fb      	ldr	r3, [r7, #12]
 800ea00:	f8b3 30b2 	ldrh.w	r3, [r3, #178]	@ 0xb2
 800ea04:	b29b      	uxth	r3, r3
 800ea06:	3301      	adds	r3, #1
 800ea08:	085b      	lsrs	r3, r3, #1
 800ea0a:	b29a      	uxth	r2, r3
 800ea0c:	68fb      	ldr	r3, [r7, #12]
 800ea0e:	f8a3 20b2 	strh.w	r2, [r3, #178]	@ 0xb2
        }
    }

    /* Configure Tx DMA with Multi-Buffer */
    this->hdma_spi_tx.XferHalfCpltCallback = NULL;
 800ea12:	68fb      	ldr	r3, [r7, #12]
 800ea14:	2200      	movs	r2, #0
 800ea16:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
    this->hdma_spi_tx.XferCpltCallback     = NULL;
 800ea1a:	68fb      	ldr	r3, [r7, #12]
 800ea1c:	2200      	movs	r2, #0
 800ea1e:	f8c3 210c 	str.w	r2, [r3, #268]	@ 0x10c
    this->hdma_spi_tx.XferErrorCallback    = NULL;
 800ea22:	68fb      	ldr	r3, [r7, #12]
 800ea24:	2200      	movs	r2, #0
 800ea26:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c

    if (HAL_OK != HAL_DMAEx_MultiBufferStart_IT(&this->hdma_spi_tx,
 800ea2a:	68fb      	ldr	r3, [r7, #12]
 800ea2c:	f103 00d0 	add.w	r0, r3, #208	@ 0xd0
 800ea30:	68b9      	ldr	r1, [r7, #8]
                                                (uint32_t)pTxBuffer0,
                                                (uint32_t)&this->spiHandle.Instance->TXDR,
 800ea32:	68fb      	ldr	r3, [r7, #12]
 800ea34:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ea36:	3320      	adds	r3, #32
    if (HAL_OK != HAL_DMAEx_MultiBufferStart_IT(&this->hdma_spi_tx,
 800ea38:	461c      	mov	r4, r3
 800ea3a:	687a      	ldr	r2, [r7, #4]
                                                (uint32_t)pTxBuffer1,
                                                this->spiHandle.TxXferCount))
 800ea3c:	68fb      	ldr	r3, [r7, #12]
 800ea3e:	f8b3 30aa 	ldrh.w	r3, [r3, #170]	@ 0xaa
 800ea42:	b29b      	uxth	r3, r3
    if (HAL_OK != HAL_DMAEx_MultiBufferStart_IT(&this->hdma_spi_tx,
 800ea44:	9300      	str	r3, [sp, #0]
 800ea46:	4613      	mov	r3, r2
 800ea48:	4622      	mov	r2, r4
 800ea4a:	f004 ff9b 	bl	8013984 <HAL_DMAEx_MultiBufferStart_IT>
 800ea4e:	4603      	mov	r3, r0
 800ea50:	2b00      	cmp	r3, #0
 800ea52:	bf14      	ite	ne
 800ea54:	2301      	movne	r3, #1
 800ea56:	2300      	moveq	r3, #0
 800ea58:	b2db      	uxtb	r3, r3
 800ea5a:	2b00      	cmp	r3, #0
 800ea5c:	d005      	beq.n	800ea6a <_ZN11RemoraComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x1b2>
    {
        __HAL_UNLOCK(&this->spiHandle);
 800ea5e:	68fb      	ldr	r3, [r7, #12]
 800ea60:	2200      	movs	r2, #0
 800ea62:	f883 20c8 	strb.w	r2, [r3, #200]	@ 0xc8
        return HAL_ERROR;
 800ea66:	2301      	movs	r3, #1
 800ea68:	e079      	b.n	800eb5e <_ZN11RemoraComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x2a6>
    }

    /* Configure Rx DMA with Multi-Buffer */
    this->hdma_spi_rx.XferHalfCpltCallback = NULL;
 800ea6a:	68fb      	ldr	r3, [r7, #12]
 800ea6c:	2200      	movs	r2, #0
 800ea6e:	f8c3 2188 	str.w	r2, [r3, #392]	@ 0x188
    this->hdma_spi_rx.XferCpltCallback     = NULL;
 800ea72:	68fb      	ldr	r3, [r7, #12]
 800ea74:	2200      	movs	r2, #0
 800ea76:	f8c3 2184 	str.w	r2, [r3, #388]	@ 0x184
    this->hdma_spi_rx.XferErrorCallback    = NULL;
 800ea7a:	68fb      	ldr	r3, [r7, #12]
 800ea7c:	2200      	movs	r2, #0
 800ea7e:	f8c3 2194 	str.w	r2, [r3, #404]	@ 0x194

    if (HAL_OK != HAL_DMAEx_MultiBufferStart_IT(&this->hdma_spi_rx,
 800ea82:	68fb      	ldr	r3, [r7, #12]
 800ea84:	f503 70a4 	add.w	r0, r3, #328	@ 0x148
                                                (uint32_t)&this->spiHandle.Instance->RXDR,
 800ea88:	68fb      	ldr	r3, [r7, #12]
 800ea8a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ea8c:	3330      	adds	r3, #48	@ 0x30
    if (HAL_OK != HAL_DMAEx_MultiBufferStart_IT(&this->hdma_spi_rx,
 800ea8e:	461c      	mov	r4, r3
 800ea90:	683a      	ldr	r2, [r7, #0]
 800ea92:	6a39      	ldr	r1, [r7, #32]
                                                (uint32_t)pRxBuffer0,
                                                (uint32_t)pRxBuffer1,
                                                this->spiHandle.RxXferCount))
 800ea94:	68fb      	ldr	r3, [r7, #12]
 800ea96:	f8b3 30b2 	ldrh.w	r3, [r3, #178]	@ 0xb2
 800ea9a:	b29b      	uxth	r3, r3
    if (HAL_OK != HAL_DMAEx_MultiBufferStart_IT(&this->hdma_spi_rx,
 800ea9c:	9300      	str	r3, [sp, #0]
 800ea9e:	460b      	mov	r3, r1
 800eaa0:	4621      	mov	r1, r4
 800eaa2:	f004 ff6f 	bl	8013984 <HAL_DMAEx_MultiBufferStart_IT>
 800eaa6:	4603      	mov	r3, r0
 800eaa8:	2b00      	cmp	r3, #0
 800eaaa:	bf14      	ite	ne
 800eaac:	2301      	movne	r3, #1
 800eaae:	2300      	moveq	r3, #0
 800eab0:	b2db      	uxtb	r3, r3
 800eab2:	2b00      	cmp	r3, #0
 800eab4:	d00a      	beq.n	800eacc <_ZN11RemoraComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x214>
    {
        (void)HAL_DMA_Abort(&this->hdma_spi_tx);
 800eab6:	68fb      	ldr	r3, [r7, #12]
 800eab8:	33d0      	adds	r3, #208	@ 0xd0
 800eaba:	4618      	mov	r0, r3
 800eabc:	f003 fcb2 	bl	8012424 <HAL_DMA_Abort>
        __HAL_UNLOCK(&this->spiHandle);
 800eac0:	68fb      	ldr	r3, [r7, #12]
 800eac2:	2200      	movs	r2, #0
 800eac4:	f883 20c8 	strb.w	r2, [r3, #200]	@ 0xc8
        return HAL_ERROR;
 800eac8:	2301      	movs	r3, #1
 800eaca:	e048      	b.n	800eb5e <_ZN11RemoraComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x2a6>
    }

    /* Configure SPI TSIZE for full transfer or circular mode */
    if (this->hdma_spi_rx.Init.Mode == DMA_CIRCULAR || this->hdma_spi_tx.Init.Mode == DMA_CIRCULAR)
 800eacc:	68fb      	ldr	r3, [r7, #12]
 800eace:	f8d3 3164 	ldr.w	r3, [r3, #356]	@ 0x164
 800ead2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ead6:	d005      	beq.n	800eae4 <_ZN11RemoraComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x22c>
 800ead8:	68fb      	ldr	r3, [r7, #12]
 800eada:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 800eade:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800eae2:	d108      	bne.n	800eaf6 <_ZN11RemoraComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x23e>
    {
        MODIFY_REG(this->spiHandle.Instance->CR2, SPI_CR2_TSIZE, 0UL);
 800eae4:	68fb      	ldr	r3, [r7, #12]
 800eae6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800eae8:	6859      	ldr	r1, [r3, #4]
 800eaea:	68fb      	ldr	r3, [r7, #12]
 800eaec:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800eaee:	4b1e      	ldr	r3, [pc, #120]	@ (800eb68 <_ZN11RemoraComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x2b0>)
 800eaf0:	400b      	ands	r3, r1
 800eaf2:	6053      	str	r3, [r2, #4]
 800eaf4:	e009      	b.n	800eb0a <_ZN11RemoraComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x252>
    }
    else
    {
        MODIFY_REG(this->spiHandle.Instance->CR2, SPI_CR2_TSIZE, Size);
 800eaf6:	68fb      	ldr	r3, [r7, #12]
 800eaf8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800eafa:	685a      	ldr	r2, [r3, #4]
 800eafc:	4b1a      	ldr	r3, [pc, #104]	@ (800eb68 <_ZN11RemoraComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x2b0>)
 800eafe:	4013      	ands	r3, r2
 800eb00:	8cb9      	ldrh	r1, [r7, #36]	@ 0x24
 800eb02:	68fa      	ldr	r2, [r7, #12]
 800eb04:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800eb06:	430b      	orrs	r3, r1
 800eb08:	6053      	str	r3, [r2, #4]
    }

    /* Enable Tx and Rx DMA Requests */
    SET_BIT(this->spiHandle.Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800eb0a:	68fb      	ldr	r3, [r7, #12]
 800eb0c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800eb0e:	689a      	ldr	r2, [r3, #8]
 800eb10:	68fb      	ldr	r3, [r7, #12]
 800eb12:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800eb14:	f442 4240 	orr.w	r2, r2, #49152	@ 0xc000
 800eb18:	609a      	str	r2, [r3, #8]

    /* Enable SPI error interrupt */
    __HAL_SPI_ENABLE_IT(&this->spiHandle, (SPI_IT_OVR | SPI_IT_UDR | SPI_IT_FRE | SPI_IT_MODF));
 800eb1a:	68fb      	ldr	r3, [r7, #12]
 800eb1c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800eb1e:	691a      	ldr	r2, [r3, #16]
 800eb20:	68fb      	ldr	r3, [r7, #12]
 800eb22:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800eb24:	f442 7258 	orr.w	r2, r2, #864	@ 0x360
 800eb28:	611a      	str	r2, [r3, #16]

    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(&this->spiHandle);
 800eb2a:	68fb      	ldr	r3, [r7, #12]
 800eb2c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800eb2e:	681a      	ldr	r2, [r3, #0]
 800eb30:	68fb      	ldr	r3, [r7, #12]
 800eb32:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800eb34:	f042 0201 	orr.w	r2, r2, #1
 800eb38:	601a      	str	r2, [r3, #0]

    if (this->spiHandle.Init.Mode == SPI_MODE_MASTER)
 800eb3a:	68fb      	ldr	r3, [r7, #12]
 800eb3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800eb3e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800eb42:	d107      	bne.n	800eb54 <_ZN11RemoraComms22startMultiBufferDMASPIEPhS0_S0_S0_t+0x29c>
    {
        SET_BIT(this->spiHandle.Instance->CR1, SPI_CR1_CSTART);
 800eb44:	68fb      	ldr	r3, [r7, #12]
 800eb46:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800eb48:	681a      	ldr	r2, [r3, #0]
 800eb4a:	68fb      	ldr	r3, [r7, #12]
 800eb4c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800eb4e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800eb52:	601a      	str	r2, [r3, #0]
    }

    __HAL_UNLOCK(&this->spiHandle);
 800eb54:	68fb      	ldr	r3, [r7, #12]
 800eb56:	2200      	movs	r2, #0
 800eb58:	f883 20c8 	strb.w	r2, [r3, #200]	@ 0xc8

    return HAL_OK;
 800eb5c:	2300      	movs	r3, #0
}
 800eb5e:	4618      	mov	r0, r3
 800eb60:	3714      	adds	r7, #20
 800eb62:	46bd      	mov	sp, r7
 800eb64:	bd90      	pop	{r4, r7, pc}
 800eb66:	bf00      	nop
 800eb68:	ffff0000 	.word	0xffff0000

0800eb6c <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef>:
  *             - 1: Half transfer complete.
  *             - 2: Full transfer complete.
  *             - 3: Otherwise.
  */
int RemoraComms::DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800eb6c:	b480      	push	{r7}
 800eb6e:	b087      	sub	sp, #28
 800eb70:	af00      	add	r7, sp, #0
 800eb72:	6078      	str	r0, [r7, #4]
 800eb74:	6039      	str	r1, [r7, #0]
  uint32_t tmpisr_dma;
  int interrupt;

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800eb76:	683b      	ldr	r3, [r7, #0]
 800eb78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800eb7a:	613b      	str	r3, [r7, #16]

  tmpisr_dma  = regs_dma->ISR;
 800eb7c:	693b      	ldr	r3, [r7, #16]
 800eb7e:	681b      	ldr	r3, [r3, #0]
 800eb80:	60fb      	str	r3, [r7, #12]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800eb82:	683b      	ldr	r3, [r7, #0]
 800eb84:	681b      	ldr	r3, [r3, #0]
 800eb86:	4a5a      	ldr	r2, [pc, #360]	@ (800ecf0 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x184>)
 800eb88:	4293      	cmp	r3, r2
 800eb8a:	d04a      	beq.n	800ec22 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0xb6>
 800eb8c:	683b      	ldr	r3, [r7, #0]
 800eb8e:	681b      	ldr	r3, [r3, #0]
 800eb90:	4a58      	ldr	r2, [pc, #352]	@ (800ecf4 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x188>)
 800eb92:	4293      	cmp	r3, r2
 800eb94:	d045      	beq.n	800ec22 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0xb6>
 800eb96:	683b      	ldr	r3, [r7, #0]
 800eb98:	681b      	ldr	r3, [r3, #0]
 800eb9a:	4a57      	ldr	r2, [pc, #348]	@ (800ecf8 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x18c>)
 800eb9c:	4293      	cmp	r3, r2
 800eb9e:	d040      	beq.n	800ec22 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0xb6>
 800eba0:	683b      	ldr	r3, [r7, #0]
 800eba2:	681b      	ldr	r3, [r3, #0]
 800eba4:	4a55      	ldr	r2, [pc, #340]	@ (800ecfc <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x190>)
 800eba6:	4293      	cmp	r3, r2
 800eba8:	d03b      	beq.n	800ec22 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0xb6>
 800ebaa:	683b      	ldr	r3, [r7, #0]
 800ebac:	681b      	ldr	r3, [r3, #0]
 800ebae:	4a54      	ldr	r2, [pc, #336]	@ (800ed00 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x194>)
 800ebb0:	4293      	cmp	r3, r2
 800ebb2:	d036      	beq.n	800ec22 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0xb6>
 800ebb4:	683b      	ldr	r3, [r7, #0]
 800ebb6:	681b      	ldr	r3, [r3, #0]
 800ebb8:	4a52      	ldr	r2, [pc, #328]	@ (800ed04 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x198>)
 800ebba:	4293      	cmp	r3, r2
 800ebbc:	d031      	beq.n	800ec22 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0xb6>
 800ebbe:	683b      	ldr	r3, [r7, #0]
 800ebc0:	681b      	ldr	r3, [r3, #0]
 800ebc2:	4a51      	ldr	r2, [pc, #324]	@ (800ed08 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x19c>)
 800ebc4:	4293      	cmp	r3, r2
 800ebc6:	d02c      	beq.n	800ec22 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0xb6>
 800ebc8:	683b      	ldr	r3, [r7, #0]
 800ebca:	681b      	ldr	r3, [r3, #0]
 800ebcc:	4a4f      	ldr	r2, [pc, #316]	@ (800ed0c <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x1a0>)
 800ebce:	4293      	cmp	r3, r2
 800ebd0:	d027      	beq.n	800ec22 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0xb6>
 800ebd2:	683b      	ldr	r3, [r7, #0]
 800ebd4:	681b      	ldr	r3, [r3, #0]
 800ebd6:	4a4e      	ldr	r2, [pc, #312]	@ (800ed10 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x1a4>)
 800ebd8:	4293      	cmp	r3, r2
 800ebda:	d022      	beq.n	800ec22 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0xb6>
 800ebdc:	683b      	ldr	r3, [r7, #0]
 800ebde:	681b      	ldr	r3, [r3, #0]
 800ebe0:	4a4c      	ldr	r2, [pc, #304]	@ (800ed14 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x1a8>)
 800ebe2:	4293      	cmp	r3, r2
 800ebe4:	d01d      	beq.n	800ec22 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0xb6>
 800ebe6:	683b      	ldr	r3, [r7, #0]
 800ebe8:	681b      	ldr	r3, [r3, #0]
 800ebea:	4a4b      	ldr	r2, [pc, #300]	@ (800ed18 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x1ac>)
 800ebec:	4293      	cmp	r3, r2
 800ebee:	d018      	beq.n	800ec22 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0xb6>
 800ebf0:	683b      	ldr	r3, [r7, #0]
 800ebf2:	681b      	ldr	r3, [r3, #0]
 800ebf4:	4a49      	ldr	r2, [pc, #292]	@ (800ed1c <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x1b0>)
 800ebf6:	4293      	cmp	r3, r2
 800ebf8:	d013      	beq.n	800ec22 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0xb6>
 800ebfa:	683b      	ldr	r3, [r7, #0]
 800ebfc:	681b      	ldr	r3, [r3, #0]
 800ebfe:	4a48      	ldr	r2, [pc, #288]	@ (800ed20 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x1b4>)
 800ec00:	4293      	cmp	r3, r2
 800ec02:	d00e      	beq.n	800ec22 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0xb6>
 800ec04:	683b      	ldr	r3, [r7, #0]
 800ec06:	681b      	ldr	r3, [r3, #0]
 800ec08:	4a46      	ldr	r2, [pc, #280]	@ (800ed24 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x1b8>)
 800ec0a:	4293      	cmp	r3, r2
 800ec0c:	d009      	beq.n	800ec22 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0xb6>
 800ec0e:	683b      	ldr	r3, [r7, #0]
 800ec10:	681b      	ldr	r3, [r3, #0]
 800ec12:	4a45      	ldr	r2, [pc, #276]	@ (800ed28 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x1bc>)
 800ec14:	4293      	cmp	r3, r2
 800ec16:	d004      	beq.n	800ec22 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0xb6>
 800ec18:	683b      	ldr	r3, [r7, #0]
 800ec1a:	681b      	ldr	r3, [r3, #0]
 800ec1c:	4a43      	ldr	r2, [pc, #268]	@ (800ed2c <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x1c0>)
 800ec1e:	4293      	cmp	r3, r2
 800ec20:	d101      	bne.n	800ec26 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0xba>
 800ec22:	2301      	movs	r3, #1
 800ec24:	e000      	b.n	800ec28 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0xbc>
 800ec26:	2300      	movs	r3, #0
 800ec28:	2b00      	cmp	r3, #0
 800ec2a:	f000 8338 	beq.w	800f29e <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x732>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800ec2e:	683b      	ldr	r3, [r7, #0]
 800ec30:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ec32:	f003 031f 	and.w	r3, r3, #31
 800ec36:	2208      	movs	r2, #8
 800ec38:	409a      	lsls	r2, r3
 800ec3a:	68fb      	ldr	r3, [r7, #12]
 800ec3c:	4013      	ands	r3, r2
 800ec3e:	2b00      	cmp	r3, #0
 800ec40:	f000 809a 	beq.w	800ed78 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x20c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 800ec44:	683b      	ldr	r3, [r7, #0]
 800ec46:	681b      	ldr	r3, [r3, #0]
 800ec48:	4a29      	ldr	r2, [pc, #164]	@ (800ecf0 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x184>)
 800ec4a:	4293      	cmp	r3, r2
 800ec4c:	d04a      	beq.n	800ece4 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x178>
 800ec4e:	683b      	ldr	r3, [r7, #0]
 800ec50:	681b      	ldr	r3, [r3, #0]
 800ec52:	4a28      	ldr	r2, [pc, #160]	@ (800ecf4 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x188>)
 800ec54:	4293      	cmp	r3, r2
 800ec56:	d045      	beq.n	800ece4 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x178>
 800ec58:	683b      	ldr	r3, [r7, #0]
 800ec5a:	681b      	ldr	r3, [r3, #0]
 800ec5c:	4a26      	ldr	r2, [pc, #152]	@ (800ecf8 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x18c>)
 800ec5e:	4293      	cmp	r3, r2
 800ec60:	d040      	beq.n	800ece4 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x178>
 800ec62:	683b      	ldr	r3, [r7, #0]
 800ec64:	681b      	ldr	r3, [r3, #0]
 800ec66:	4a25      	ldr	r2, [pc, #148]	@ (800ecfc <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x190>)
 800ec68:	4293      	cmp	r3, r2
 800ec6a:	d03b      	beq.n	800ece4 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x178>
 800ec6c:	683b      	ldr	r3, [r7, #0]
 800ec6e:	681b      	ldr	r3, [r3, #0]
 800ec70:	4a23      	ldr	r2, [pc, #140]	@ (800ed00 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x194>)
 800ec72:	4293      	cmp	r3, r2
 800ec74:	d036      	beq.n	800ece4 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x178>
 800ec76:	683b      	ldr	r3, [r7, #0]
 800ec78:	681b      	ldr	r3, [r3, #0]
 800ec7a:	4a22      	ldr	r2, [pc, #136]	@ (800ed04 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x198>)
 800ec7c:	4293      	cmp	r3, r2
 800ec7e:	d031      	beq.n	800ece4 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x178>
 800ec80:	683b      	ldr	r3, [r7, #0]
 800ec82:	681b      	ldr	r3, [r3, #0]
 800ec84:	4a20      	ldr	r2, [pc, #128]	@ (800ed08 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x19c>)
 800ec86:	4293      	cmp	r3, r2
 800ec88:	d02c      	beq.n	800ece4 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x178>
 800ec8a:	683b      	ldr	r3, [r7, #0]
 800ec8c:	681b      	ldr	r3, [r3, #0]
 800ec8e:	4a1f      	ldr	r2, [pc, #124]	@ (800ed0c <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x1a0>)
 800ec90:	4293      	cmp	r3, r2
 800ec92:	d027      	beq.n	800ece4 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x178>
 800ec94:	683b      	ldr	r3, [r7, #0]
 800ec96:	681b      	ldr	r3, [r3, #0]
 800ec98:	4a1d      	ldr	r2, [pc, #116]	@ (800ed10 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x1a4>)
 800ec9a:	4293      	cmp	r3, r2
 800ec9c:	d022      	beq.n	800ece4 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x178>
 800ec9e:	683b      	ldr	r3, [r7, #0]
 800eca0:	681b      	ldr	r3, [r3, #0]
 800eca2:	4a1c      	ldr	r2, [pc, #112]	@ (800ed14 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x1a8>)
 800eca4:	4293      	cmp	r3, r2
 800eca6:	d01d      	beq.n	800ece4 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x178>
 800eca8:	683b      	ldr	r3, [r7, #0]
 800ecaa:	681b      	ldr	r3, [r3, #0]
 800ecac:	4a1a      	ldr	r2, [pc, #104]	@ (800ed18 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x1ac>)
 800ecae:	4293      	cmp	r3, r2
 800ecb0:	d018      	beq.n	800ece4 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x178>
 800ecb2:	683b      	ldr	r3, [r7, #0]
 800ecb4:	681b      	ldr	r3, [r3, #0]
 800ecb6:	4a19      	ldr	r2, [pc, #100]	@ (800ed1c <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x1b0>)
 800ecb8:	4293      	cmp	r3, r2
 800ecba:	d013      	beq.n	800ece4 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x178>
 800ecbc:	683b      	ldr	r3, [r7, #0]
 800ecbe:	681b      	ldr	r3, [r3, #0]
 800ecc0:	4a17      	ldr	r2, [pc, #92]	@ (800ed20 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x1b4>)
 800ecc2:	4293      	cmp	r3, r2
 800ecc4:	d00e      	beq.n	800ece4 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x178>
 800ecc6:	683b      	ldr	r3, [r7, #0]
 800ecc8:	681b      	ldr	r3, [r3, #0]
 800ecca:	4a16      	ldr	r2, [pc, #88]	@ (800ed24 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x1b8>)
 800eccc:	4293      	cmp	r3, r2
 800ecce:	d009      	beq.n	800ece4 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x178>
 800ecd0:	683b      	ldr	r3, [r7, #0]
 800ecd2:	681b      	ldr	r3, [r3, #0]
 800ecd4:	4a14      	ldr	r2, [pc, #80]	@ (800ed28 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x1bc>)
 800ecd6:	4293      	cmp	r3, r2
 800ecd8:	d004      	beq.n	800ece4 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x178>
 800ecda:	683b      	ldr	r3, [r7, #0]
 800ecdc:	681b      	ldr	r3, [r3, #0]
 800ecde:	4a13      	ldr	r2, [pc, #76]	@ (800ed2c <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x1c0>)
 800ece0:	4293      	cmp	r3, r2
 800ece2:	d125      	bne.n	800ed30 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x1c4>
 800ece4:	683b      	ldr	r3, [r7, #0]
 800ece6:	681b      	ldr	r3, [r3, #0]
 800ece8:	681b      	ldr	r3, [r3, #0]
 800ecea:	f003 0304 	and.w	r3, r3, #4
 800ecee:	e024      	b.n	800ed3a <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x1ce>
 800ecf0:	40020010 	.word	0x40020010
 800ecf4:	40020028 	.word	0x40020028
 800ecf8:	40020040 	.word	0x40020040
 800ecfc:	40020058 	.word	0x40020058
 800ed00:	40020070 	.word	0x40020070
 800ed04:	40020088 	.word	0x40020088
 800ed08:	400200a0 	.word	0x400200a0
 800ed0c:	400200b8 	.word	0x400200b8
 800ed10:	40020410 	.word	0x40020410
 800ed14:	40020428 	.word	0x40020428
 800ed18:	40020440 	.word	0x40020440
 800ed1c:	40020458 	.word	0x40020458
 800ed20:	40020470 	.word	0x40020470
 800ed24:	40020488 	.word	0x40020488
 800ed28:	400204a0 	.word	0x400204a0
 800ed2c:	400204b8 	.word	0x400204b8
 800ed30:	683b      	ldr	r3, [r7, #0]
 800ed32:	681b      	ldr	r3, [r3, #0]
 800ed34:	681b      	ldr	r3, [r3, #0]
 800ed36:	f003 0308 	and.w	r3, r3, #8
 800ed3a:	2b00      	cmp	r3, #0
 800ed3c:	bf14      	ite	ne
 800ed3e:	2301      	movne	r3, #1
 800ed40:	2300      	moveq	r3, #0
 800ed42:	b2db      	uxtb	r3, r3
 800ed44:	2b00      	cmp	r3, #0
 800ed46:	d017      	beq.n	800ed78 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x20c>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 800ed48:	683b      	ldr	r3, [r7, #0]
 800ed4a:	681b      	ldr	r3, [r3, #0]
 800ed4c:	681a      	ldr	r2, [r3, #0]
 800ed4e:	683b      	ldr	r3, [r7, #0]
 800ed50:	681b      	ldr	r3, [r3, #0]
 800ed52:	f022 0204 	bic.w	r2, r2, #4
 800ed56:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800ed58:	683b      	ldr	r3, [r7, #0]
 800ed5a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ed5c:	f003 031f 	and.w	r3, r3, #31
 800ed60:	2208      	movs	r2, #8
 800ed62:	409a      	lsls	r2, r3
 800ed64:	693b      	ldr	r3, [r7, #16]
 800ed66:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800ed68:	683b      	ldr	r3, [r7, #0]
 800ed6a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ed6c:	f043 0201 	orr.w	r2, r3, #1
 800ed70:	683b      	ldr	r3, [r7, #0]
 800ed72:	655a      	str	r2, [r3, #84]	@ 0x54
        interrupt =  DMA_OTHER;
 800ed74:	2303      	movs	r3, #3
 800ed76:	617b      	str	r3, [r7, #20]
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800ed78:	683b      	ldr	r3, [r7, #0]
 800ed7a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ed7c:	f003 031f 	and.w	r3, r3, #31
 800ed80:	68fa      	ldr	r2, [r7, #12]
 800ed82:	fa22 f303 	lsr.w	r3, r2, r3
 800ed86:	f003 0301 	and.w	r3, r3, #1
 800ed8a:	2b00      	cmp	r3, #0
 800ed8c:	d070      	beq.n	800ee70 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x304>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800ed8e:	683b      	ldr	r3, [r7, #0]
 800ed90:	681b      	ldr	r3, [r3, #0]
 800ed92:	4a68      	ldr	r2, [pc, #416]	@ (800ef34 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3c8>)
 800ed94:	4293      	cmp	r3, r2
 800ed96:	d04a      	beq.n	800ee2e <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x2c2>
 800ed98:	683b      	ldr	r3, [r7, #0]
 800ed9a:	681b      	ldr	r3, [r3, #0]
 800ed9c:	4a66      	ldr	r2, [pc, #408]	@ (800ef38 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3cc>)
 800ed9e:	4293      	cmp	r3, r2
 800eda0:	d045      	beq.n	800ee2e <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x2c2>
 800eda2:	683b      	ldr	r3, [r7, #0]
 800eda4:	681b      	ldr	r3, [r3, #0]
 800eda6:	4a65      	ldr	r2, [pc, #404]	@ (800ef3c <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3d0>)
 800eda8:	4293      	cmp	r3, r2
 800edaa:	d040      	beq.n	800ee2e <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x2c2>
 800edac:	683b      	ldr	r3, [r7, #0]
 800edae:	681b      	ldr	r3, [r3, #0]
 800edb0:	4a63      	ldr	r2, [pc, #396]	@ (800ef40 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3d4>)
 800edb2:	4293      	cmp	r3, r2
 800edb4:	d03b      	beq.n	800ee2e <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x2c2>
 800edb6:	683b      	ldr	r3, [r7, #0]
 800edb8:	681b      	ldr	r3, [r3, #0]
 800edba:	4a62      	ldr	r2, [pc, #392]	@ (800ef44 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3d8>)
 800edbc:	4293      	cmp	r3, r2
 800edbe:	d036      	beq.n	800ee2e <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x2c2>
 800edc0:	683b      	ldr	r3, [r7, #0]
 800edc2:	681b      	ldr	r3, [r3, #0]
 800edc4:	4a60      	ldr	r2, [pc, #384]	@ (800ef48 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3dc>)
 800edc6:	4293      	cmp	r3, r2
 800edc8:	d031      	beq.n	800ee2e <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x2c2>
 800edca:	683b      	ldr	r3, [r7, #0]
 800edcc:	681b      	ldr	r3, [r3, #0]
 800edce:	4a5f      	ldr	r2, [pc, #380]	@ (800ef4c <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3e0>)
 800edd0:	4293      	cmp	r3, r2
 800edd2:	d02c      	beq.n	800ee2e <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x2c2>
 800edd4:	683b      	ldr	r3, [r7, #0]
 800edd6:	681b      	ldr	r3, [r3, #0]
 800edd8:	4a5d      	ldr	r2, [pc, #372]	@ (800ef50 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3e4>)
 800edda:	4293      	cmp	r3, r2
 800eddc:	d027      	beq.n	800ee2e <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x2c2>
 800edde:	683b      	ldr	r3, [r7, #0]
 800ede0:	681b      	ldr	r3, [r3, #0]
 800ede2:	4a5c      	ldr	r2, [pc, #368]	@ (800ef54 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3e8>)
 800ede4:	4293      	cmp	r3, r2
 800ede6:	d022      	beq.n	800ee2e <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x2c2>
 800ede8:	683b      	ldr	r3, [r7, #0]
 800edea:	681b      	ldr	r3, [r3, #0]
 800edec:	4a5a      	ldr	r2, [pc, #360]	@ (800ef58 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3ec>)
 800edee:	4293      	cmp	r3, r2
 800edf0:	d01d      	beq.n	800ee2e <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x2c2>
 800edf2:	683b      	ldr	r3, [r7, #0]
 800edf4:	681b      	ldr	r3, [r3, #0]
 800edf6:	4a59      	ldr	r2, [pc, #356]	@ (800ef5c <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3f0>)
 800edf8:	4293      	cmp	r3, r2
 800edfa:	d018      	beq.n	800ee2e <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x2c2>
 800edfc:	683b      	ldr	r3, [r7, #0]
 800edfe:	681b      	ldr	r3, [r3, #0]
 800ee00:	4a57      	ldr	r2, [pc, #348]	@ (800ef60 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3f4>)
 800ee02:	4293      	cmp	r3, r2
 800ee04:	d013      	beq.n	800ee2e <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x2c2>
 800ee06:	683b      	ldr	r3, [r7, #0]
 800ee08:	681b      	ldr	r3, [r3, #0]
 800ee0a:	4a56      	ldr	r2, [pc, #344]	@ (800ef64 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3f8>)
 800ee0c:	4293      	cmp	r3, r2
 800ee0e:	d00e      	beq.n	800ee2e <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x2c2>
 800ee10:	683b      	ldr	r3, [r7, #0]
 800ee12:	681b      	ldr	r3, [r3, #0]
 800ee14:	4a54      	ldr	r2, [pc, #336]	@ (800ef68 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3fc>)
 800ee16:	4293      	cmp	r3, r2
 800ee18:	d009      	beq.n	800ee2e <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x2c2>
 800ee1a:	683b      	ldr	r3, [r7, #0]
 800ee1c:	681b      	ldr	r3, [r3, #0]
 800ee1e:	4a53      	ldr	r2, [pc, #332]	@ (800ef6c <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x400>)
 800ee20:	4293      	cmp	r3, r2
 800ee22:	d004      	beq.n	800ee2e <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x2c2>
 800ee24:	683b      	ldr	r3, [r7, #0]
 800ee26:	681b      	ldr	r3, [r3, #0]
 800ee28:	4a51      	ldr	r2, [pc, #324]	@ (800ef70 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x404>)
 800ee2a:	4293      	cmp	r3, r2
 800ee2c:	d105      	bne.n	800ee3a <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x2ce>
 800ee2e:	683b      	ldr	r3, [r7, #0]
 800ee30:	681b      	ldr	r3, [r3, #0]
 800ee32:	695b      	ldr	r3, [r3, #20]
 800ee34:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ee38:	e003      	b.n	800ee42 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x2d6>
 800ee3a:	683b      	ldr	r3, [r7, #0]
 800ee3c:	681b      	ldr	r3, [r3, #0]
 800ee3e:	681b      	ldr	r3, [r3, #0]
 800ee40:	2300      	movs	r3, #0
 800ee42:	2b00      	cmp	r3, #0
 800ee44:	bf14      	ite	ne
 800ee46:	2301      	movne	r3, #1
 800ee48:	2300      	moveq	r3, #0
 800ee4a:	b2db      	uxtb	r3, r3
 800ee4c:	2b00      	cmp	r3, #0
 800ee4e:	d00f      	beq.n	800ee70 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x304>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800ee50:	683b      	ldr	r3, [r7, #0]
 800ee52:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ee54:	f003 031f 	and.w	r3, r3, #31
 800ee58:	2201      	movs	r2, #1
 800ee5a:	409a      	lsls	r2, r3
 800ee5c:	693b      	ldr	r3, [r7, #16]
 800ee5e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800ee60:	683b      	ldr	r3, [r7, #0]
 800ee62:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ee64:	f043 0202 	orr.w	r2, r3, #2
 800ee68:	683b      	ldr	r3, [r7, #0]
 800ee6a:	655a      	str	r2, [r3, #84]	@ 0x54
        interrupt =  DMA_OTHER;
 800ee6c:	2303      	movs	r3, #3
 800ee6e:	617b      	str	r3, [r7, #20]
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800ee70:	683b      	ldr	r3, [r7, #0]
 800ee72:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ee74:	f003 031f 	and.w	r3, r3, #31
 800ee78:	2204      	movs	r2, #4
 800ee7a:	409a      	lsls	r2, r3
 800ee7c:	68fb      	ldr	r3, [r7, #12]
 800ee7e:	4013      	ands	r3, r2
 800ee80:	2b00      	cmp	r3, #0
 800ee82:	f000 8092 	beq.w	800efaa <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x43e>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800ee86:	683b      	ldr	r3, [r7, #0]
 800ee88:	681b      	ldr	r3, [r3, #0]
 800ee8a:	4a2a      	ldr	r2, [pc, #168]	@ (800ef34 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3c8>)
 800ee8c:	4293      	cmp	r3, r2
 800ee8e:	d04a      	beq.n	800ef26 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3ba>
 800ee90:	683b      	ldr	r3, [r7, #0]
 800ee92:	681b      	ldr	r3, [r3, #0]
 800ee94:	4a28      	ldr	r2, [pc, #160]	@ (800ef38 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3cc>)
 800ee96:	4293      	cmp	r3, r2
 800ee98:	d045      	beq.n	800ef26 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3ba>
 800ee9a:	683b      	ldr	r3, [r7, #0]
 800ee9c:	681b      	ldr	r3, [r3, #0]
 800ee9e:	4a27      	ldr	r2, [pc, #156]	@ (800ef3c <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3d0>)
 800eea0:	4293      	cmp	r3, r2
 800eea2:	d040      	beq.n	800ef26 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3ba>
 800eea4:	683b      	ldr	r3, [r7, #0]
 800eea6:	681b      	ldr	r3, [r3, #0]
 800eea8:	4a25      	ldr	r2, [pc, #148]	@ (800ef40 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3d4>)
 800eeaa:	4293      	cmp	r3, r2
 800eeac:	d03b      	beq.n	800ef26 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3ba>
 800eeae:	683b      	ldr	r3, [r7, #0]
 800eeb0:	681b      	ldr	r3, [r3, #0]
 800eeb2:	4a24      	ldr	r2, [pc, #144]	@ (800ef44 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3d8>)
 800eeb4:	4293      	cmp	r3, r2
 800eeb6:	d036      	beq.n	800ef26 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3ba>
 800eeb8:	683b      	ldr	r3, [r7, #0]
 800eeba:	681b      	ldr	r3, [r3, #0]
 800eebc:	4a22      	ldr	r2, [pc, #136]	@ (800ef48 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3dc>)
 800eebe:	4293      	cmp	r3, r2
 800eec0:	d031      	beq.n	800ef26 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3ba>
 800eec2:	683b      	ldr	r3, [r7, #0]
 800eec4:	681b      	ldr	r3, [r3, #0]
 800eec6:	4a21      	ldr	r2, [pc, #132]	@ (800ef4c <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3e0>)
 800eec8:	4293      	cmp	r3, r2
 800eeca:	d02c      	beq.n	800ef26 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3ba>
 800eecc:	683b      	ldr	r3, [r7, #0]
 800eece:	681b      	ldr	r3, [r3, #0]
 800eed0:	4a1f      	ldr	r2, [pc, #124]	@ (800ef50 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3e4>)
 800eed2:	4293      	cmp	r3, r2
 800eed4:	d027      	beq.n	800ef26 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3ba>
 800eed6:	683b      	ldr	r3, [r7, #0]
 800eed8:	681b      	ldr	r3, [r3, #0]
 800eeda:	4a1e      	ldr	r2, [pc, #120]	@ (800ef54 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3e8>)
 800eedc:	4293      	cmp	r3, r2
 800eede:	d022      	beq.n	800ef26 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3ba>
 800eee0:	683b      	ldr	r3, [r7, #0]
 800eee2:	681b      	ldr	r3, [r3, #0]
 800eee4:	4a1c      	ldr	r2, [pc, #112]	@ (800ef58 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3ec>)
 800eee6:	4293      	cmp	r3, r2
 800eee8:	d01d      	beq.n	800ef26 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3ba>
 800eeea:	683b      	ldr	r3, [r7, #0]
 800eeec:	681b      	ldr	r3, [r3, #0]
 800eeee:	4a1b      	ldr	r2, [pc, #108]	@ (800ef5c <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3f0>)
 800eef0:	4293      	cmp	r3, r2
 800eef2:	d018      	beq.n	800ef26 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3ba>
 800eef4:	683b      	ldr	r3, [r7, #0]
 800eef6:	681b      	ldr	r3, [r3, #0]
 800eef8:	4a19      	ldr	r2, [pc, #100]	@ (800ef60 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3f4>)
 800eefa:	4293      	cmp	r3, r2
 800eefc:	d013      	beq.n	800ef26 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3ba>
 800eefe:	683b      	ldr	r3, [r7, #0]
 800ef00:	681b      	ldr	r3, [r3, #0]
 800ef02:	4a18      	ldr	r2, [pc, #96]	@ (800ef64 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3f8>)
 800ef04:	4293      	cmp	r3, r2
 800ef06:	d00e      	beq.n	800ef26 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3ba>
 800ef08:	683b      	ldr	r3, [r7, #0]
 800ef0a:	681b      	ldr	r3, [r3, #0]
 800ef0c:	4a16      	ldr	r2, [pc, #88]	@ (800ef68 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3fc>)
 800ef0e:	4293      	cmp	r3, r2
 800ef10:	d009      	beq.n	800ef26 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3ba>
 800ef12:	683b      	ldr	r3, [r7, #0]
 800ef14:	681b      	ldr	r3, [r3, #0]
 800ef16:	4a15      	ldr	r2, [pc, #84]	@ (800ef6c <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x400>)
 800ef18:	4293      	cmp	r3, r2
 800ef1a:	d004      	beq.n	800ef26 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x3ba>
 800ef1c:	683b      	ldr	r3, [r7, #0]
 800ef1e:	681b      	ldr	r3, [r3, #0]
 800ef20:	4a13      	ldr	r2, [pc, #76]	@ (800ef70 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x404>)
 800ef22:	4293      	cmp	r3, r2
 800ef24:	d126      	bne.n	800ef74 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x408>
 800ef26:	683b      	ldr	r3, [r7, #0]
 800ef28:	681b      	ldr	r3, [r3, #0]
 800ef2a:	681b      	ldr	r3, [r3, #0]
 800ef2c:	f003 0302 	and.w	r3, r3, #2
 800ef30:	e024      	b.n	800ef7c <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x410>
 800ef32:	bf00      	nop
 800ef34:	40020010 	.word	0x40020010
 800ef38:	40020028 	.word	0x40020028
 800ef3c:	40020040 	.word	0x40020040
 800ef40:	40020058 	.word	0x40020058
 800ef44:	40020070 	.word	0x40020070
 800ef48:	40020088 	.word	0x40020088
 800ef4c:	400200a0 	.word	0x400200a0
 800ef50:	400200b8 	.word	0x400200b8
 800ef54:	40020410 	.word	0x40020410
 800ef58:	40020428 	.word	0x40020428
 800ef5c:	40020440 	.word	0x40020440
 800ef60:	40020458 	.word	0x40020458
 800ef64:	40020470 	.word	0x40020470
 800ef68:	40020488 	.word	0x40020488
 800ef6c:	400204a0 	.word	0x400204a0
 800ef70:	400204b8 	.word	0x400204b8
 800ef74:	683b      	ldr	r3, [r7, #0]
 800ef76:	681b      	ldr	r3, [r3, #0]
 800ef78:	681b      	ldr	r3, [r3, #0]
 800ef7a:	2300      	movs	r3, #0
 800ef7c:	2b00      	cmp	r3, #0
 800ef7e:	bf14      	ite	ne
 800ef80:	2301      	movne	r3, #1
 800ef82:	2300      	moveq	r3, #0
 800ef84:	b2db      	uxtb	r3, r3
 800ef86:	2b00      	cmp	r3, #0
 800ef88:	d00f      	beq.n	800efaa <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x43e>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800ef8a:	683b      	ldr	r3, [r7, #0]
 800ef8c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ef8e:	f003 031f 	and.w	r3, r3, #31
 800ef92:	2204      	movs	r2, #4
 800ef94:	409a      	lsls	r2, r3
 800ef96:	693b      	ldr	r3, [r7, #16]
 800ef98:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800ef9a:	683b      	ldr	r3, [r7, #0]
 800ef9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ef9e:	f043 0204 	orr.w	r2, r3, #4
 800efa2:	683b      	ldr	r3, [r7, #0]
 800efa4:	655a      	str	r2, [r3, #84]	@ 0x54
        interrupt =  DMA_OTHER;
 800efa6:	2303      	movs	r3, #3
 800efa8:	617b      	str	r3, [r7, #20]
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800efaa:	683b      	ldr	r3, [r7, #0]
 800efac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800efae:	f003 031f 	and.w	r3, r3, #31
 800efb2:	2210      	movs	r2, #16
 800efb4:	409a      	lsls	r2, r3
 800efb6:	68fb      	ldr	r3, [r7, #12]
 800efb8:	4013      	ands	r3, r2
 800efba:	2b00      	cmp	r3, #0
 800efbc:	d07f      	beq.n	800f0be <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x552>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800efbe:	683b      	ldr	r3, [r7, #0]
 800efc0:	681b      	ldr	r3, [r3, #0]
 800efc2:	4a6f      	ldr	r2, [pc, #444]	@ (800f180 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x614>)
 800efc4:	4293      	cmp	r3, r2
 800efc6:	d04a      	beq.n	800f05e <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x4f2>
 800efc8:	683b      	ldr	r3, [r7, #0]
 800efca:	681b      	ldr	r3, [r3, #0]
 800efcc:	4a6d      	ldr	r2, [pc, #436]	@ (800f184 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x618>)
 800efce:	4293      	cmp	r3, r2
 800efd0:	d045      	beq.n	800f05e <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x4f2>
 800efd2:	683b      	ldr	r3, [r7, #0]
 800efd4:	681b      	ldr	r3, [r3, #0]
 800efd6:	4a6c      	ldr	r2, [pc, #432]	@ (800f188 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x61c>)
 800efd8:	4293      	cmp	r3, r2
 800efda:	d040      	beq.n	800f05e <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x4f2>
 800efdc:	683b      	ldr	r3, [r7, #0]
 800efde:	681b      	ldr	r3, [r3, #0]
 800efe0:	4a6a      	ldr	r2, [pc, #424]	@ (800f18c <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x620>)
 800efe2:	4293      	cmp	r3, r2
 800efe4:	d03b      	beq.n	800f05e <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x4f2>
 800efe6:	683b      	ldr	r3, [r7, #0]
 800efe8:	681b      	ldr	r3, [r3, #0]
 800efea:	4a69      	ldr	r2, [pc, #420]	@ (800f190 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x624>)
 800efec:	4293      	cmp	r3, r2
 800efee:	d036      	beq.n	800f05e <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x4f2>
 800eff0:	683b      	ldr	r3, [r7, #0]
 800eff2:	681b      	ldr	r3, [r3, #0]
 800eff4:	4a67      	ldr	r2, [pc, #412]	@ (800f194 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x628>)
 800eff6:	4293      	cmp	r3, r2
 800eff8:	d031      	beq.n	800f05e <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x4f2>
 800effa:	683b      	ldr	r3, [r7, #0]
 800effc:	681b      	ldr	r3, [r3, #0]
 800effe:	4a66      	ldr	r2, [pc, #408]	@ (800f198 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x62c>)
 800f000:	4293      	cmp	r3, r2
 800f002:	d02c      	beq.n	800f05e <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x4f2>
 800f004:	683b      	ldr	r3, [r7, #0]
 800f006:	681b      	ldr	r3, [r3, #0]
 800f008:	4a64      	ldr	r2, [pc, #400]	@ (800f19c <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x630>)
 800f00a:	4293      	cmp	r3, r2
 800f00c:	d027      	beq.n	800f05e <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x4f2>
 800f00e:	683b      	ldr	r3, [r7, #0]
 800f010:	681b      	ldr	r3, [r3, #0]
 800f012:	4a63      	ldr	r2, [pc, #396]	@ (800f1a0 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x634>)
 800f014:	4293      	cmp	r3, r2
 800f016:	d022      	beq.n	800f05e <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x4f2>
 800f018:	683b      	ldr	r3, [r7, #0]
 800f01a:	681b      	ldr	r3, [r3, #0]
 800f01c:	4a61      	ldr	r2, [pc, #388]	@ (800f1a4 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x638>)
 800f01e:	4293      	cmp	r3, r2
 800f020:	d01d      	beq.n	800f05e <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x4f2>
 800f022:	683b      	ldr	r3, [r7, #0]
 800f024:	681b      	ldr	r3, [r3, #0]
 800f026:	4a60      	ldr	r2, [pc, #384]	@ (800f1a8 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x63c>)
 800f028:	4293      	cmp	r3, r2
 800f02a:	d018      	beq.n	800f05e <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x4f2>
 800f02c:	683b      	ldr	r3, [r7, #0]
 800f02e:	681b      	ldr	r3, [r3, #0]
 800f030:	4a5e      	ldr	r2, [pc, #376]	@ (800f1ac <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x640>)
 800f032:	4293      	cmp	r3, r2
 800f034:	d013      	beq.n	800f05e <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x4f2>
 800f036:	683b      	ldr	r3, [r7, #0]
 800f038:	681b      	ldr	r3, [r3, #0]
 800f03a:	4a5d      	ldr	r2, [pc, #372]	@ (800f1b0 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x644>)
 800f03c:	4293      	cmp	r3, r2
 800f03e:	d00e      	beq.n	800f05e <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x4f2>
 800f040:	683b      	ldr	r3, [r7, #0]
 800f042:	681b      	ldr	r3, [r3, #0]
 800f044:	4a5b      	ldr	r2, [pc, #364]	@ (800f1b4 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x648>)
 800f046:	4293      	cmp	r3, r2
 800f048:	d009      	beq.n	800f05e <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x4f2>
 800f04a:	683b      	ldr	r3, [r7, #0]
 800f04c:	681b      	ldr	r3, [r3, #0]
 800f04e:	4a5a      	ldr	r2, [pc, #360]	@ (800f1b8 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x64c>)
 800f050:	4293      	cmp	r3, r2
 800f052:	d004      	beq.n	800f05e <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x4f2>
 800f054:	683b      	ldr	r3, [r7, #0]
 800f056:	681b      	ldr	r3, [r3, #0]
 800f058:	4a58      	ldr	r2, [pc, #352]	@ (800f1bc <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x650>)
 800f05a:	4293      	cmp	r3, r2
 800f05c:	d105      	bne.n	800f06a <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x4fe>
 800f05e:	683b      	ldr	r3, [r7, #0]
 800f060:	681b      	ldr	r3, [r3, #0]
 800f062:	681b      	ldr	r3, [r3, #0]
 800f064:	f003 0308 	and.w	r3, r3, #8
 800f068:	e004      	b.n	800f074 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x508>
 800f06a:	683b      	ldr	r3, [r7, #0]
 800f06c:	681b      	ldr	r3, [r3, #0]
 800f06e:	681b      	ldr	r3, [r3, #0]
 800f070:	f003 0304 	and.w	r3, r3, #4
 800f074:	2b00      	cmp	r3, #0
 800f076:	bf14      	ite	ne
 800f078:	2301      	movne	r3, #1
 800f07a:	2300      	moveq	r3, #0
 800f07c:	b2db      	uxtb	r3, r3
 800f07e:	2b00      	cmp	r3, #0
 800f080:	d01b      	beq.n	800f0ba <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x54e>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 800f082:	683b      	ldr	r3, [r7, #0]
 800f084:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800f086:	f003 031f 	and.w	r3, r3, #31
 800f08a:	2210      	movs	r2, #16
 800f08c:	409a      	lsls	r2, r3
 800f08e:	693b      	ldr	r3, [r7, #16]
 800f090:	609a      	str	r2, [r3, #8]

        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800f092:	683b      	ldr	r3, [r7, #0]
 800f094:	681b      	ldr	r3, [r3, #0]
 800f096:	681b      	ldr	r3, [r3, #0]
 800f098:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f09c:	2b00      	cmp	r3, #0
 800f09e:	bf0c      	ite	eq
 800f0a0:	2301      	moveq	r3, #1
 800f0a2:	2300      	movne	r3, #0
 800f0a4:	b2db      	uxtb	r3, r3
 800f0a6:	2b00      	cmp	r3, #0
 800f0a8:	d007      	beq.n	800f0ba <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x54e>
        {
          /* Disable the half transfer interrupt */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800f0aa:	683b      	ldr	r3, [r7, #0]
 800f0ac:	681b      	ldr	r3, [r3, #0]
 800f0ae:	681a      	ldr	r2, [r3, #0]
 800f0b0:	683b      	ldr	r3, [r7, #0]
 800f0b2:	681b      	ldr	r3, [r3, #0]
 800f0b4:	f022 0208 	bic.w	r2, r2, #8
 800f0b8:	601a      	str	r2, [r3, #0]
        }

      }
      interrupt = DMA_HALF_TRANSFER;
 800f0ba:	2301      	movs	r3, #1
 800f0bc:	617b      	str	r3, [r7, #20]
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800f0be:	683b      	ldr	r3, [r7, #0]
 800f0c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800f0c2:	f003 031f 	and.w	r3, r3, #31
 800f0c6:	2220      	movs	r2, #32
 800f0c8:	409a      	lsls	r2, r3
 800f0ca:	68fb      	ldr	r3, [r7, #12]
 800f0cc:	4013      	ands	r3, r2
 800f0ce:	2b00      	cmp	r3, #0
 800f0d0:	f000 80e5 	beq.w	800f29e <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x732>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800f0d4:	683b      	ldr	r3, [r7, #0]
 800f0d6:	681b      	ldr	r3, [r3, #0]
 800f0d8:	4a29      	ldr	r2, [pc, #164]	@ (800f180 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x614>)
 800f0da:	4293      	cmp	r3, r2
 800f0dc:	d04a      	beq.n	800f174 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x608>
 800f0de:	683b      	ldr	r3, [r7, #0]
 800f0e0:	681b      	ldr	r3, [r3, #0]
 800f0e2:	4a28      	ldr	r2, [pc, #160]	@ (800f184 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x618>)
 800f0e4:	4293      	cmp	r3, r2
 800f0e6:	d045      	beq.n	800f174 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x608>
 800f0e8:	683b      	ldr	r3, [r7, #0]
 800f0ea:	681b      	ldr	r3, [r3, #0]
 800f0ec:	4a26      	ldr	r2, [pc, #152]	@ (800f188 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x61c>)
 800f0ee:	4293      	cmp	r3, r2
 800f0f0:	d040      	beq.n	800f174 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x608>
 800f0f2:	683b      	ldr	r3, [r7, #0]
 800f0f4:	681b      	ldr	r3, [r3, #0]
 800f0f6:	4a25      	ldr	r2, [pc, #148]	@ (800f18c <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x620>)
 800f0f8:	4293      	cmp	r3, r2
 800f0fa:	d03b      	beq.n	800f174 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x608>
 800f0fc:	683b      	ldr	r3, [r7, #0]
 800f0fe:	681b      	ldr	r3, [r3, #0]
 800f100:	4a23      	ldr	r2, [pc, #140]	@ (800f190 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x624>)
 800f102:	4293      	cmp	r3, r2
 800f104:	d036      	beq.n	800f174 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x608>
 800f106:	683b      	ldr	r3, [r7, #0]
 800f108:	681b      	ldr	r3, [r3, #0]
 800f10a:	4a22      	ldr	r2, [pc, #136]	@ (800f194 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x628>)
 800f10c:	4293      	cmp	r3, r2
 800f10e:	d031      	beq.n	800f174 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x608>
 800f110:	683b      	ldr	r3, [r7, #0]
 800f112:	681b      	ldr	r3, [r3, #0]
 800f114:	4a20      	ldr	r2, [pc, #128]	@ (800f198 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x62c>)
 800f116:	4293      	cmp	r3, r2
 800f118:	d02c      	beq.n	800f174 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x608>
 800f11a:	683b      	ldr	r3, [r7, #0]
 800f11c:	681b      	ldr	r3, [r3, #0]
 800f11e:	4a1f      	ldr	r2, [pc, #124]	@ (800f19c <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x630>)
 800f120:	4293      	cmp	r3, r2
 800f122:	d027      	beq.n	800f174 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x608>
 800f124:	683b      	ldr	r3, [r7, #0]
 800f126:	681b      	ldr	r3, [r3, #0]
 800f128:	4a1d      	ldr	r2, [pc, #116]	@ (800f1a0 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x634>)
 800f12a:	4293      	cmp	r3, r2
 800f12c:	d022      	beq.n	800f174 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x608>
 800f12e:	683b      	ldr	r3, [r7, #0]
 800f130:	681b      	ldr	r3, [r3, #0]
 800f132:	4a1c      	ldr	r2, [pc, #112]	@ (800f1a4 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x638>)
 800f134:	4293      	cmp	r3, r2
 800f136:	d01d      	beq.n	800f174 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x608>
 800f138:	683b      	ldr	r3, [r7, #0]
 800f13a:	681b      	ldr	r3, [r3, #0]
 800f13c:	4a1a      	ldr	r2, [pc, #104]	@ (800f1a8 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x63c>)
 800f13e:	4293      	cmp	r3, r2
 800f140:	d018      	beq.n	800f174 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x608>
 800f142:	683b      	ldr	r3, [r7, #0]
 800f144:	681b      	ldr	r3, [r3, #0]
 800f146:	4a19      	ldr	r2, [pc, #100]	@ (800f1ac <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x640>)
 800f148:	4293      	cmp	r3, r2
 800f14a:	d013      	beq.n	800f174 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x608>
 800f14c:	683b      	ldr	r3, [r7, #0]
 800f14e:	681b      	ldr	r3, [r3, #0]
 800f150:	4a17      	ldr	r2, [pc, #92]	@ (800f1b0 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x644>)
 800f152:	4293      	cmp	r3, r2
 800f154:	d00e      	beq.n	800f174 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x608>
 800f156:	683b      	ldr	r3, [r7, #0]
 800f158:	681b      	ldr	r3, [r3, #0]
 800f15a:	4a16      	ldr	r2, [pc, #88]	@ (800f1b4 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x648>)
 800f15c:	4293      	cmp	r3, r2
 800f15e:	d009      	beq.n	800f174 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x608>
 800f160:	683b      	ldr	r3, [r7, #0]
 800f162:	681b      	ldr	r3, [r3, #0]
 800f164:	4a14      	ldr	r2, [pc, #80]	@ (800f1b8 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x64c>)
 800f166:	4293      	cmp	r3, r2
 800f168:	d004      	beq.n	800f174 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x608>
 800f16a:	683b      	ldr	r3, [r7, #0]
 800f16c:	681b      	ldr	r3, [r3, #0]
 800f16e:	4a13      	ldr	r2, [pc, #76]	@ (800f1bc <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x650>)
 800f170:	4293      	cmp	r3, r2
 800f172:	d125      	bne.n	800f1c0 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x654>
 800f174:	683b      	ldr	r3, [r7, #0]
 800f176:	681b      	ldr	r3, [r3, #0]
 800f178:	681b      	ldr	r3, [r3, #0]
 800f17a:	f003 0310 	and.w	r3, r3, #16
 800f17e:	e024      	b.n	800f1ca <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x65e>
 800f180:	40020010 	.word	0x40020010
 800f184:	40020028 	.word	0x40020028
 800f188:	40020040 	.word	0x40020040
 800f18c:	40020058 	.word	0x40020058
 800f190:	40020070 	.word	0x40020070
 800f194:	40020088 	.word	0x40020088
 800f198:	400200a0 	.word	0x400200a0
 800f19c:	400200b8 	.word	0x400200b8
 800f1a0:	40020410 	.word	0x40020410
 800f1a4:	40020428 	.word	0x40020428
 800f1a8:	40020440 	.word	0x40020440
 800f1ac:	40020458 	.word	0x40020458
 800f1b0:	40020470 	.word	0x40020470
 800f1b4:	40020488 	.word	0x40020488
 800f1b8:	400204a0 	.word	0x400204a0
 800f1bc:	400204b8 	.word	0x400204b8
 800f1c0:	683b      	ldr	r3, [r7, #0]
 800f1c2:	681b      	ldr	r3, [r3, #0]
 800f1c4:	681b      	ldr	r3, [r3, #0]
 800f1c6:	f003 0302 	and.w	r3, r3, #2
 800f1ca:	2b00      	cmp	r3, #0
 800f1cc:	bf14      	ite	ne
 800f1ce:	2301      	movne	r3, #1
 800f1d0:	2300      	moveq	r3, #0
 800f1d2:	b2db      	uxtb	r3, r3
 800f1d4:	2b00      	cmp	r3, #0
 800f1d6:	d062      	beq.n	800f29e <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x732>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800f1d8:	683b      	ldr	r3, [r7, #0]
 800f1da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800f1dc:	f003 031f 	and.w	r3, r3, #31
 800f1e0:	2220      	movs	r2, #32
 800f1e2:	409a      	lsls	r2, r3
 800f1e4:	693b      	ldr	r3, [r7, #16]
 800f1e6:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800f1e8:	683b      	ldr	r3, [r7, #0]
 800f1ea:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800f1ee:	b2db      	uxtb	r3, r3
 800f1f0:	2b04      	cmp	r3, #4
 800f1f2:	bf0c      	ite	eq
 800f1f4:	2301      	moveq	r3, #1
 800f1f6:	2300      	movne	r3, #0
 800f1f8:	b2db      	uxtb	r3, r3
 800f1fa:	2b00      	cmp	r3, #0
 800f1fc:	d031      	beq.n	800f262 <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x6f6>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800f1fe:	683b      	ldr	r3, [r7, #0]
 800f200:	681b      	ldr	r3, [r3, #0]
 800f202:	681a      	ldr	r2, [r3, #0]
 800f204:	683b      	ldr	r3, [r7, #0]
 800f206:	681b      	ldr	r3, [r3, #0]
 800f208:	f022 0216 	bic.w	r2, r2, #22
 800f20c:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800f20e:	683b      	ldr	r3, [r7, #0]
 800f210:	681b      	ldr	r3, [r3, #0]
 800f212:	695a      	ldr	r2, [r3, #20]
 800f214:	683b      	ldr	r3, [r7, #0]
 800f216:	681b      	ldr	r3, [r3, #0]
 800f218:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800f21c:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800f21e:	683b      	ldr	r3, [r7, #0]
 800f220:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f222:	2b00      	cmp	r3, #0
 800f224:	d103      	bne.n	800f22e <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x6c2>
 800f226:	683b      	ldr	r3, [r7, #0]
 800f228:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800f22a:	2b00      	cmp	r3, #0
 800f22c:	d007      	beq.n	800f23e <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x6d2>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800f22e:	683b      	ldr	r3, [r7, #0]
 800f230:	681b      	ldr	r3, [r3, #0]
 800f232:	681a      	ldr	r2, [r3, #0]
 800f234:	683b      	ldr	r3, [r7, #0]
 800f236:	681b      	ldr	r3, [r3, #0]
 800f238:	f022 0208 	bic.w	r2, r2, #8
 800f23c:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800f23e:	683b      	ldr	r3, [r7, #0]
 800f240:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800f242:	f003 031f 	and.w	r3, r3, #31
 800f246:	223f      	movs	r2, #63	@ 0x3f
 800f248:	409a      	lsls	r2, r3
 800f24a:	693b      	ldr	r3, [r7, #16]
 800f24c:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800f24e:	683b      	ldr	r3, [r7, #0]
 800f250:	2201      	movs	r2, #1
 800f252:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800f256:	683b      	ldr	r3, [r7, #0]
 800f258:	2200      	movs	r2, #0
 800f25a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          interrupt = DMA_TRANSFER_COMPLETE;
 800f25e:	2302      	movs	r3, #2
 800f260:	617b      	str	r3, [r7, #20]
        }

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800f262:	683b      	ldr	r3, [r7, #0]
 800f264:	681b      	ldr	r3, [r3, #0]
 800f266:	681b      	ldr	r3, [r3, #0]
 800f268:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f26c:	2b00      	cmp	r3, #0
 800f26e:	bf0c      	ite	eq
 800f270:	2301      	moveq	r3, #1
 800f272:	2300      	movne	r3, #0
 800f274:	b2db      	uxtb	r3, r3
 800f276:	2b00      	cmp	r3, #0
 800f278:	d00f      	beq.n	800f29a <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef+0x72e>
        {
          /* Disable the transfer complete interrupt */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 800f27a:	683b      	ldr	r3, [r7, #0]
 800f27c:	681b      	ldr	r3, [r3, #0]
 800f27e:	681a      	ldr	r2, [r3, #0]
 800f280:	683b      	ldr	r3, [r7, #0]
 800f282:	681b      	ldr	r3, [r3, #0]
 800f284:	f022 0210 	bic.w	r2, r2, #16
 800f288:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800f28a:	683b      	ldr	r3, [r7, #0]
 800f28c:	2201      	movs	r2, #1
 800f28e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800f292:	683b      	ldr	r3, [r7, #0]
 800f294:	2200      	movs	r2, #0
 800f296:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }
        interrupt =  2;
 800f29a:	2302      	movs	r3, #2
 800f29c:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return interrupt;
 800f29e:	697b      	ldr	r3, [r7, #20]
}
 800f2a0:	4618      	mov	r0, r3
 800f2a2:	371c      	adds	r7, #28
 800f2a4:	46bd      	mov	sp, r7
 800f2a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2aa:	4770      	bx	lr

0800f2ac <_ZN11RemoraComms18getActiveDMAmemoryEP19__DMA_HandleTypeDef>:
 * @retval int Active buffer index:
 *             - 0: First buffer (Memory 0) is active.
 *             - 1: Second buffer (Memory 1) is active.
 */
int RemoraComms::getActiveDMAmemory(DMA_HandleTypeDef *hdma)
{
 800f2ac:	b480      	push	{r7}
 800f2ae:	b085      	sub	sp, #20
 800f2b0:	af00      	add	r7, sp, #0
 800f2b2:	6078      	str	r0, [r7, #4]
 800f2b4:	6039      	str	r1, [r7, #0]
    DMA_Stream_TypeDef *dmaStream = (DMA_Stream_TypeDef *)hdma->Instance;
 800f2b6:	683b      	ldr	r3, [r7, #0]
 800f2b8:	681b      	ldr	r3, [r3, #0]
 800f2ba:	60fb      	str	r3, [r7, #12]

    return (dmaStream->CR & DMA_SxCR_CT) ? 1 : 0;
 800f2bc:	68fb      	ldr	r3, [r7, #12]
 800f2be:	681b      	ldr	r3, [r3, #0]
 800f2c0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800f2c4:	2b00      	cmp	r3, #0
 800f2c6:	d001      	beq.n	800f2cc <_ZN11RemoraComms18getActiveDMAmemoryEP19__DMA_HandleTypeDef+0x20>
 800f2c8:	2301      	movs	r3, #1
 800f2ca:	e000      	b.n	800f2ce <_ZN11RemoraComms18getActiveDMAmemoryEP19__DMA_HandleTypeDef+0x22>
 800f2cc:	2300      	movs	r3, #0
}
 800f2ce:	4618      	mov	r0, r3
 800f2d0:	3714      	adds	r7, #20
 800f2d2:	46bd      	mov	sp, r7
 800f2d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2d8:	4770      	bx	lr

0800f2da <_ZN11RemoraComms18handleNssInterruptEv>:
 * @details
 * - If the `newData` flag is set, the `copyRXbuffer` flag is marked as `true`.
 *   The actual DMA-based buffer copy operation is deferred to the servo thread update.
 */
void RemoraComms::handleNssInterrupt()
{
 800f2da:	b480      	push	{r7}
 800f2dc:	b083      	sub	sp, #12
 800f2de:	af00      	add	r7, sp, #0
 800f2e0:	6078      	str	r0, [r7, #4]
	// SPI packet has been fully received
	// Flag the copy the RX buffer if new WRITE data has been received
	// DMA copy is performed during the servo thread update
	if (this->newWriteData)
 800f2e2:	687b      	ldr	r3, [r7, #4]
 800f2e4:	f893 323b 	ldrb.w	r3, [r3, #571]	@ 0x23b
 800f2e8:	2b00      	cmp	r3, #0
 800f2ea:	d007      	beq.n	800f2fc <_ZN11RemoraComms18handleNssInterruptEv+0x22>
	{
		this->copyRXbuffer = true;
 800f2ec:	687b      	ldr	r3, [r7, #4]
 800f2ee:	2201      	movs	r2, #1
 800f2f0:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
		this->newWriteData = false;
 800f2f4:	687b      	ldr	r3, [r7, #4]
 800f2f6:	2200      	movs	r2, #0
 800f2f8:	f883 223b 	strb.w	r2, [r3, #571]	@ 0x23b
	}
}
 800f2fc:	bf00      	nop
 800f2fe:	370c      	adds	r7, #12
 800f300:	46bd      	mov	sp, r7
 800f302:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f306:	4770      	bx	lr

0800f308 <_ZN11RemoraComms17handleTxInterruptEv>:
 *
 * This function processes the DMA interrupt request for the SPI transmit stream
 * and re-enables the corresponding NVIC interrupt.
 */
void RemoraComms::handleTxInterrupt()
{
 800f308:	b580      	push	{r7, lr}
 800f30a:	b082      	sub	sp, #8
 800f30c:	af00      	add	r7, sp, #0
 800f30e:	6078      	str	r0, [r7, #4]
	DMA_IRQHandler(&this->hdma_spi_tx);
 800f310:	687b      	ldr	r3, [r7, #4]
 800f312:	33d0      	adds	r3, #208	@ 0xd0
 800f314:	4619      	mov	r1, r3
 800f316:	6878      	ldr	r0, [r7, #4]
 800f318:	f7ff fc28 	bl	800eb6c <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef>
	HAL_NVIC_EnableIRQ(this->irqDMAtx);
 800f31c:	687b      	ldr	r3, [r7, #4]
 800f31e:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	@ 0x44
 800f322:	4618      	mov	r0, r3
 800f324:	f002 fb6b 	bl	80119fe <HAL_NVIC_EnableIRQ>
}
 800f328:	bf00      	nop
 800f32a:	3708      	adds	r7, #8
 800f32c:	46bd      	mov	sp, r7
 800f32e:	bd80      	pop	{r7, pc}

0800f330 <_ZN11RemoraComms17handleRxInterruptEv>:
 *
 * - **Other Interrupts:**
 *   - Prints an error message to indicate an unexpected DMA SPI Rx error.
 */
void RemoraComms::handleRxInterrupt()
{
 800f330:	b580      	push	{r7, lr}
 800f332:	b082      	sub	sp, #8
 800f334:	af00      	add	r7, sp, #0
 800f336:	6078      	str	r0, [r7, #4]
    // Handle the interrupt and determine the type of interrupt
    this->interruptType = DMA_IRQHandler(&this->hdma_spi_rx);
 800f338:	687b      	ldr	r3, [r7, #4]
 800f33a:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 800f33e:	4619      	mov	r1, r3
 800f340:	6878      	ldr	r0, [r7, #4]
 800f342:	f7ff fc13 	bl	800eb6c <_ZN11RemoraComms14DMA_IRQHandlerEP19__DMA_HandleTypeDef>
 800f346:	4603      	mov	r3, r0
 800f348:	b2da      	uxtb	r2, r3
 800f34a:	687b      	ldr	r3, [r7, #4]
 800f34c:	f883 2239 	strb.w	r2, [r3, #569]	@ 0x239

    this->RxDMAmemoryIdx = getActiveDMAmemory(&this->hdma_spi_rx);
 800f350:	687b      	ldr	r3, [r7, #4]
 800f352:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 800f356:	4619      	mov	r1, r3
 800f358:	6878      	ldr	r0, [r7, #4]
 800f35a:	f7ff ffa7 	bl	800f2ac <_ZN11RemoraComms18getActiveDMAmemoryEP19__DMA_HandleTypeDef>
 800f35e:	4603      	mov	r3, r0
 800f360:	b2da      	uxtb	r2, r3
 800f362:	687b      	ldr	r3, [r7, #4]
 800f364:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    if (this->interruptType == DMA_HALF_TRANSFER) // Use the HTC interrupt to check the packet being received
 800f368:	687b      	ldr	r3, [r7, #4]
 800f36a:	f893 3239 	ldrb.w	r3, [r3, #569]	@ 0x239
 800f36e:	2b01      	cmp	r3, #1
 800f370:	d127      	bne.n	800f3c2 <_ZN11RemoraComms17handleRxInterruptEv+0x92>
    {
        switch (this->ptrRxDMABuffer->buffer[RxDMAmemoryIdx].header)
 800f372:	687b      	ldr	r3, [r7, #4]
 800f374:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800f376:	687b      	ldr	r3, [r7, #4]
 800f378:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800f37c:	019b      	lsls	r3, r3, #6
 800f37e:	4413      	add	r3, r2
 800f380:	681b      	ldr	r3, [r3, #0]
 800f382:	4a19      	ldr	r2, [pc, #100]	@ (800f3e8 <_ZN11RemoraComms17handleRxInterruptEv+0xb8>)
 800f384:	4293      	cmp	r3, r2
 800f386:	d003      	beq.n	800f390 <_ZN11RemoraComms17handleRxInterruptEv+0x60>
 800f388:	4a18      	ldr	r2, [pc, #96]	@ (800f3ec <_ZN11RemoraComms17handleRxInterruptEv+0xbc>)
 800f38a:	4293      	cmp	r3, r2
 800f38c:	d005      	beq.n	800f39a <_ZN11RemoraComms17handleRxInterruptEv+0x6a>
 800f38e:	e013      	b.n	800f3b8 <_ZN11RemoraComms17handleRxInterruptEv+0x88>
        {
            case Config::pruRead:
                // No action needed for PRU_READ.
                this->data = true;
 800f390:	687b      	ldr	r3, [r7, #4]
 800f392:	2201      	movs	r2, #1
 800f394:	f883 223a 	strb.w	r2, [r3, #570]	@ 0x23a
                break;
 800f398:	e01b      	b.n	800f3d2 <_ZN11RemoraComms17handleRxInterruptEv+0xa2>

            case Config::pruWrite:
            	// Valid PRU_WRITE header, flag RX data transfer.
            	this->data = true;
 800f39a:	687b      	ldr	r3, [r7, #4]
 800f39c:	2201      	movs	r2, #1
 800f39e:	f883 223a 	strb.w	r2, [r3, #570]	@ 0x23a
            	this->newWriteData = true;
 800f3a2:	687b      	ldr	r3, [r7, #4]
 800f3a4:	2201      	movs	r2, #1
 800f3a6:	f883 223b 	strb.w	r2, [r3, #571]	@ 0x23b
                RXbufferIdx = RxDMAmemoryIdx;
 800f3aa:	687b      	ldr	r3, [r7, #4]
 800f3ac:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 800f3b0:	687b      	ldr	r3, [r7, #4]
 800f3b2:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
                break;
 800f3b6:	e00c      	b.n	800f3d2 <_ZN11RemoraComms17handleRxInterruptEv+0xa2>

            default:
                this->data = false;
 800f3b8:	687b      	ldr	r3, [r7, #4]
 800f3ba:	2200      	movs	r2, #0
 800f3bc:	f883 223a 	strb.w	r2, [r3, #570]	@ 0x23a
                break;
 800f3c0:	e007      	b.n	800f3d2 <_ZN11RemoraComms17handleRxInterruptEv+0xa2>
        }
    }
    else if (this->interruptType == DMA_TRANSFER_COMPLETE) // Transfer complete interrupt
 800f3c2:	687b      	ldr	r3, [r7, #4]
 800f3c4:	f893 3239 	ldrb.w	r3, [r3, #569]	@ 0x239
 800f3c8:	2b02      	cmp	r3, #2
 800f3ca:	d002      	beq.n	800f3d2 <_ZN11RemoraComms17handleRxInterruptEv+0xa2>
    {
        // Placeholder for transfer complete handling if needed in the future.
    }
    else // Other interrupt sources
    {
        printf("DMA SPI Rx error\n");
 800f3cc:	4808      	ldr	r0, [pc, #32]	@ (800f3f0 <_ZN11RemoraComms17handleRxInterruptEv+0xc0>)
 800f3ce:	f00f fad9 	bl	801e984 <puts>
    }

    HAL_NVIC_EnableIRQ(this->irqDMArx);
 800f3d2:	687b      	ldr	r3, [r7, #4]
 800f3d4:	f9b3 3042 	ldrsh.w	r3, [r3, #66]	@ 0x42
 800f3d8:	4618      	mov	r0, r3
 800f3da:	f002 fb10 	bl	80119fe <HAL_NVIC_EnableIRQ>
}
 800f3de:	bf00      	nop
 800f3e0:	3708      	adds	r7, #8
 800f3e2:	46bd      	mov	sp, r7
 800f3e4:	bd80      	pop	{r7, pc}
 800f3e6:	bf00      	nop
 800f3e8:	72656164 	.word	0x72656164
 800f3ec:	77726974 	.word	0x77726974
 800f3f0:	08020268 	.word	0x08020268

0800f3f4 <_ZN11RemoraComms9getStatusEv>:
 * @return The current status as a boolean value:
 *         - `true`: Communication is operating correctly.
 *         - `false`: Communication error detected.
 */
bool RemoraComms::getStatus(void)
{
 800f3f4:	b480      	push	{r7}
 800f3f6:	b083      	sub	sp, #12
 800f3f8:	af00      	add	r7, sp, #0
 800f3fa:	6078      	str	r0, [r7, #4]
    return this->status;
 800f3fc:	687b      	ldr	r3, [r7, #4]
 800f3fe:	f893 323c 	ldrb.w	r3, [r3, #572]	@ 0x23c
}
 800f402:	4618      	mov	r0, r3
 800f404:	370c      	adds	r7, #12
 800f406:	46bd      	mov	sp, r7
 800f408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f40c:	4770      	bx	lr

0800f40e <_ZN11RemoraComms13processPacketEv>:


void RemoraComms::processPacket()
{
 800f40e:	b580      	push	{r7, lr}
 800f410:	b084      	sub	sp, #16
 800f412:	af00      	add	r7, sp, #0
 800f414:	6078      	str	r0, [r7, #4]
	if (this->copyRXbuffer == true)
 800f416:	687b      	ldr	r3, [r7, #4]
 800f418:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800f41c:	2b01      	cmp	r3, #1
 800f41e:	d140      	bne.n	800f4a2 <_ZN11RemoraComms13processPacketEv+0x94>
    {
		this->pin1->set(1);
 800f420:	687b      	ldr	r3, [r7, #4]
 800f422:	699b      	ldr	r3, [r3, #24]
 800f424:	2101      	movs	r1, #1
 800f426:	4618      	mov	r0, r3
 800f428:	f7fc fdfc 	bl	800c024 <_ZN3Pin3setEb>

	    uint8_t* srcBuffer = (uint8_t*)this->ptrRxDMABuffer->buffer[this->RXbufferIdx].rxBuffer;
 800f42c:	687b      	ldr	r3, [r7, #4]
 800f42e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800f430:	687b      	ldr	r3, [r7, #4]
 800f432:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800f436:	019b      	lsls	r3, r3, #6
 800f438:	4413      	add	r3, r2
 800f43a:	60fb      	str	r3, [r7, #12]
	    uint8_t* destBuffer = (uint8_t*)this->ptrRxData->rxBuffer;
 800f43c:	687b      	ldr	r3, [r7, #4]
 800f43e:	6a1b      	ldr	r3, [r3, #32]
 800f440:	60bb      	str	r3, [r7, #8]

	    this->dmaStatus = HAL_DMA_Start(
 800f442:	687b      	ldr	r3, [r7, #4]
 800f444:	f503 70e0 	add.w	r0, r3, #448	@ 0x1c0
 800f448:	68f9      	ldr	r1, [r7, #12]
 800f44a:	68ba      	ldr	r2, [r7, #8]
 800f44c:	2340      	movs	r3, #64	@ 0x40
 800f44e:	f002 fec9 	bl	80121e4 <HAL_DMA_Start>
 800f452:	4603      	mov	r3, r0
 800f454:	461a      	mov	r2, r3
 800f456:	687b      	ldr	r3, [r7, #4]
 800f458:	f883 2238 	strb.w	r2, [r3, #568]	@ 0x238
									(uint32_t)destBuffer,
									Config::dataBuffSize
	    							);

	    // Wait for transfer to complete
	    if (this->dmaStatus == HAL_OK) {
 800f45c:	687b      	ldr	r3, [r7, #4]
 800f45e:	f893 3238 	ldrb.w	r3, [r3, #568]	@ 0x238
 800f462:	2b00      	cmp	r3, #0
 800f464:	d10d      	bne.n	800f482 <_ZN11RemoraComms13processPacketEv+0x74>
	        this->dmaStatus = HAL_DMA_PollForTransfer(&hdma_memtomem, HAL_DMA_FULL_TRANSFER, HAL_MAX_DELAY);
 800f466:	687b      	ldr	r3, [r7, #4]
 800f468:	f503 73e0 	add.w	r3, r3, #448	@ 0x1c0
 800f46c:	f04f 32ff 	mov.w	r2, #4294967295
 800f470:	2100      	movs	r1, #0
 800f472:	4618      	mov	r0, r3
 800f474:	f003 faf4 	bl	8012a60 <HAL_DMA_PollForTransfer>
 800f478:	4603      	mov	r3, r0
 800f47a:	461a      	mov	r2, r3
 800f47c:	687b      	ldr	r3, [r7, #4]
 800f47e:	f883 2238 	strb.w	r2, [r3, #568]	@ 0x238
	    }

	    // Stop the DMA if needed (optional for safety)
	    HAL_DMA_Abort(&this->hdma_memtomem);
 800f482:	687b      	ldr	r3, [r7, #4]
 800f484:	f503 73e0 	add.w	r3, r3, #448	@ 0x1c0
 800f488:	4618      	mov	r0, r3
 800f48a:	f002 ffcb 	bl	8012424 <HAL_DMA_Abort>

		this->copyRXbuffer = false;
 800f48e:	687b      	ldr	r3, [r7, #4]
 800f490:	2200      	movs	r2, #0
 800f492:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32

		this->pin1->set(0);
 800f496:	687b      	ldr	r3, [r7, #4]
 800f498:	699b      	ldr	r3, [r3, #24]
 800f49a:	2100      	movs	r1, #0
 800f49c:	4618      	mov	r0, r3
 800f49e:	f7fc fdc1 	bl	800c024 <_ZN3Pin3setEb>
    }
}
 800f4a2:	bf00      	nop
 800f4a4:	3710      	adds	r7, #16
 800f4a6:	46bd      	mov	sp, r7
 800f4a8:	bd80      	pop	{r7, pc}

0800f4aa <_ZN11RemoraComms6updateEv>:
 *   - If data is processed, `noDataCount` is reset, and the status is set to `true`.
 *   - If no data is processed for a defined maximum period (`DATA_ERR_MAX`),
 *     the status is set to `false`, and `noDataCount` is reset.
 */
void RemoraComms::update()
{
 800f4aa:	b580      	push	{r7, lr}
 800f4ac:	b082      	sub	sp, #8
 800f4ae:	af00      	add	r7, sp, #0
 800f4b0:	6078      	str	r0, [r7, #4]
	this->pin2->set(1);
 800f4b2:	687b      	ldr	r3, [r7, #4]
 800f4b4:	69db      	ldr	r3, [r3, #28]
 800f4b6:	2101      	movs	r1, #1
 800f4b8:	4618      	mov	r0, r3
 800f4ba:	f7fc fdb3 	bl	800c024 <_ZN3Pin3setEb>

	if (this->data)
 800f4be:	687b      	ldr	r3, [r7, #4]
 800f4c0:	f893 323a 	ldrb.w	r3, [r3, #570]	@ 0x23a
 800f4c4:	2b00      	cmp	r3, #0
 800f4c6:	d008      	beq.n	800f4da <_ZN11RemoraComms6updateEv+0x30>
	{
		this->noDataCount = 0;
 800f4c8:	687b      	ldr	r3, [r7, #4]
 800f4ca:	2200      	movs	r2, #0
 800f4cc:	f883 223d 	strb.w	r2, [r3, #573]	@ 0x23d
		this->status = true;
 800f4d0:	687b      	ldr	r3, [r7, #4]
 800f4d2:	2201      	movs	r2, #1
 800f4d4:	f883 223c 	strb.w	r2, [r3, #572]	@ 0x23c
 800f4d8:	e007      	b.n	800f4ea <_ZN11RemoraComms6updateEv+0x40>
	}
	else
	{
		this->noDataCount++;
 800f4da:	687b      	ldr	r3, [r7, #4]
 800f4dc:	f893 323d 	ldrb.w	r3, [r3, #573]	@ 0x23d
 800f4e0:	3301      	adds	r3, #1
 800f4e2:	b2da      	uxtb	r2, r3
 800f4e4:	687b      	ldr	r3, [r7, #4]
 800f4e6:	f883 223d 	strb.w	r2, [r3, #573]	@ 0x23d
	}

	if (this->noDataCount > Config::dataErrMax)
 800f4ea:	687b      	ldr	r3, [r7, #4]
 800f4ec:	f893 323d 	ldrb.w	r3, [r3, #573]	@ 0x23d
 800f4f0:	2b64      	cmp	r3, #100	@ 0x64
 800f4f2:	d907      	bls.n	800f504 <_ZN11RemoraComms6updateEv+0x5a>
	{
		this->noDataCount = 0;
 800f4f4:	687b      	ldr	r3, [r7, #4]
 800f4f6:	2200      	movs	r2, #0
 800f4f8:	f883 223d 	strb.w	r2, [r3, #573]	@ 0x23d
		this->status = false;
 800f4fc:	687b      	ldr	r3, [r7, #4]
 800f4fe:	2200      	movs	r2, #0
 800f500:	f883 223c 	strb.w	r2, [r3, #572]	@ 0x23c
	}

	this->data = false;
 800f504:	687b      	ldr	r3, [r7, #4]
 800f506:	2200      	movs	r2, #0
 800f508:	f883 223a 	strb.w	r2, [r3, #570]	@ 0x23a

	this->pin2->set(0);
 800f50c:	687b      	ldr	r3, [r7, #4]
 800f50e:	69db      	ldr	r3, [r3, #28]
 800f510:	2100      	movs	r1, #0
 800f512:	4618      	mov	r0, r3
 800f514:	f7fc fd86 	bl	800c024 <_ZN3Pin3setEb>
}
 800f518:	bf00      	nop
 800f51a:	3708      	adds	r7, #8
 800f51c:	46bd      	mov	sp, r7
 800f51e:	bd80      	pop	{r7, pc}

0800f520 <_ZN15ModuleInterruptI11RemoraCommsEC1E9IRQn_TypePS0_MS0_FvvE>:
private:
	DerivedModule* InterruptOwnerPtr;                                // Pointer to the owning module
	void (DerivedModule::*InterruptHandler)();                       // Member function pointer for the ISR
	
public:
    ModuleInterrupt(IRQn_Type interruptNumber, DerivedModule* ownerPtr, void (DerivedModule::*handler)())
 800f520:	b082      	sub	sp, #8
 800f522:	b580      	push	{r7, lr}
 800f524:	b084      	sub	sp, #16
 800f526:	af00      	add	r7, sp, #0
 800f528:	60f8      	str	r0, [r7, #12]
 800f52a:	607a      	str	r2, [r7, #4]
 800f52c:	61fb      	str	r3, [r7, #28]
 800f52e:	460b      	mov	r3, r1
 800f530:	817b      	strh	r3, [r7, #10]
        : InterruptOwnerPtr(ownerPtr), InterruptHandler(handler)
 800f532:	68fb      	ldr	r3, [r7, #12]
 800f534:	4618      	mov	r0, r3
 800f536:	f7f2 ff8b 	bl	8002450 <_ZN9InterruptC1Ev>
 800f53a:	4a0e      	ldr	r2, [pc, #56]	@ (800f574 <_ZN15ModuleInterruptI11RemoraCommsEC1E9IRQn_TypePS0_MS0_FvvE+0x54>)
 800f53c:	68fb      	ldr	r3, [r7, #12]
 800f53e:	601a      	str	r2, [r3, #0]
 800f540:	68fb      	ldr	r3, [r7, #12]
 800f542:	687a      	ldr	r2, [r7, #4]
 800f544:	605a      	str	r2, [r3, #4]
 800f546:	68fb      	ldr	r3, [r7, #12]
 800f548:	3308      	adds	r3, #8
 800f54a:	f107 021c 	add.w	r2, r7, #28
 800f54e:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f552:	e883 0003 	stmia.w	r3, {r0, r1}
    {
        // Register the interrupt
        Interrupt::Register(interruptNumber, this);
 800f556:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800f55a:	68fa      	ldr	r2, [r7, #12]
 800f55c:	4611      	mov	r1, r2
 800f55e:	4618      	mov	r0, r3
 800f560:	f7f2 ff86 	bl	8002470 <_ZN9Interrupt8RegisterEiPS_>
    }
 800f564:	68fb      	ldr	r3, [r7, #12]
 800f566:	4618      	mov	r0, r3
 800f568:	3710      	adds	r7, #16
 800f56a:	46bd      	mov	sp, r7
 800f56c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800f570:	b002      	add	sp, #8
 800f572:	4770      	bx	lr
 800f574:	08020634 	.word	0x08020634

0800f578 <_ZN11RemoraCommsD1Ev>:
    DMA_TRANSFER_COMPLETE = 2, // Full transfer completed
    DMA_OTHER = 3        // Other or error status
} DMA_TransferStatus_t;


class RemoraComms : public Module
 800f578:	b580      	push	{r7, lr}
 800f57a:	b082      	sub	sp, #8
 800f57c:	af00      	add	r7, sp, #0
 800f57e:	6078      	str	r0, [r7, #4]
 800f580:	4a05      	ldr	r2, [pc, #20]	@ (800f598 <_ZN11RemoraCommsD1Ev+0x20>)
 800f582:	687b      	ldr	r3, [r7, #4]
 800f584:	601a      	str	r2, [r3, #0]
 800f586:	687b      	ldr	r3, [r7, #4]
 800f588:	4618      	mov	r0, r3
 800f58a:	f7fe fd5b 	bl	800e044 <_ZN6ModuleD1Ev>
 800f58e:	687b      	ldr	r3, [r7, #4]
 800f590:	4618      	mov	r0, r3
 800f592:	3708      	adds	r7, #8
 800f594:	46bd      	mov	sp, r7
 800f596:	bd80      	pop	{r7, pc}
 800f598:	08020640 	.word	0x08020640

0800f59c <_ZN11RemoraCommsD0Ev>:
 800f59c:	b580      	push	{r7, lr}
 800f59e:	b082      	sub	sp, #8
 800f5a0:	af00      	add	r7, sp, #0
 800f5a2:	6078      	str	r0, [r7, #4]
 800f5a4:	6878      	ldr	r0, [r7, #4]
 800f5a6:	f7ff ffe7 	bl	800f578 <_ZN11RemoraCommsD1Ev>
 800f5aa:	f44f 7110 	mov.w	r1, #576	@ 0x240
 800f5ae:	6878      	ldr	r0, [r7, #4]
 800f5b0:	f00e fde3 	bl	801e17a <_ZdlPvj>
 800f5b4:	687b      	ldr	r3, [r7, #4]
 800f5b6:	4618      	mov	r0, r3
 800f5b8:	3708      	adds	r7, #8
 800f5ba:	46bd      	mov	sp, r7
 800f5bc:	bd80      	pop	{r7, pc}

0800f5be <_ZN15ModuleInterruptI11RemoraCommsE11ISR_HandlerEv>:

    void ISR_Handler(void) {
 800f5be:	b580      	push	{r7, lr}
 800f5c0:	b082      	sub	sp, #8
 800f5c2:	af00      	add	r7, sp, #0
 800f5c4:	6078      	str	r0, [r7, #4]
        if (this->InterruptOwnerPtr && this->InterruptHandler) {
 800f5c6:	687b      	ldr	r3, [r7, #4]
 800f5c8:	685b      	ldr	r3, [r3, #4]
 800f5ca:	2b00      	cmp	r3, #0
 800f5cc:	d02a      	beq.n	800f624 <_ZN15ModuleInterruptI11RemoraCommsE11ISR_HandlerEv+0x66>
 800f5ce:	687b      	ldr	r3, [r7, #4]
 800f5d0:	689b      	ldr	r3, [r3, #8]
 800f5d2:	2b00      	cmp	r3, #0
 800f5d4:	d107      	bne.n	800f5e6 <_ZN15ModuleInterruptI11RemoraCommsE11ISR_HandlerEv+0x28>
 800f5d6:	687b      	ldr	r3, [r7, #4]
 800f5d8:	68db      	ldr	r3, [r3, #12]
 800f5da:	f003 0301 	and.w	r3, r3, #1
 800f5de:	2b00      	cmp	r3, #0
 800f5e0:	d101      	bne.n	800f5e6 <_ZN15ModuleInterruptI11RemoraCommsE11ISR_HandlerEv+0x28>
 800f5e2:	2301      	movs	r3, #1
 800f5e4:	e000      	b.n	800f5e8 <_ZN15ModuleInterruptI11RemoraCommsE11ISR_HandlerEv+0x2a>
 800f5e6:	2300      	movs	r3, #0
 800f5e8:	2b01      	cmp	r3, #1
 800f5ea:	d01b      	beq.n	800f624 <_ZN15ModuleInterruptI11RemoraCommsE11ISR_HandlerEv+0x66>
            (this->InterruptOwnerPtr->*InterruptHandler)(); // Call the member function of the owner
 800f5ec:	687b      	ldr	r3, [r7, #4]
 800f5ee:	68db      	ldr	r3, [r3, #12]
 800f5f0:	f003 0301 	and.w	r3, r3, #1
 800f5f4:	2b00      	cmp	r3, #0
 800f5f6:	d102      	bne.n	800f5fe <_ZN15ModuleInterruptI11RemoraCommsE11ISR_HandlerEv+0x40>
 800f5f8:	687b      	ldr	r3, [r7, #4]
 800f5fa:	689b      	ldr	r3, [r3, #8]
 800f5fc:	e00a      	b.n	800f614 <_ZN15ModuleInterruptI11RemoraCommsE11ISR_HandlerEv+0x56>
 800f5fe:	687b      	ldr	r3, [r7, #4]
 800f600:	685b      	ldr	r3, [r3, #4]
 800f602:	687a      	ldr	r2, [r7, #4]
 800f604:	68d2      	ldr	r2, [r2, #12]
 800f606:	1052      	asrs	r2, r2, #1
 800f608:	4413      	add	r3, r2
 800f60a:	681b      	ldr	r3, [r3, #0]
 800f60c:	687a      	ldr	r2, [r7, #4]
 800f60e:	6892      	ldr	r2, [r2, #8]
 800f610:	4413      	add	r3, r2
 800f612:	681b      	ldr	r3, [r3, #0]
 800f614:	687a      	ldr	r2, [r7, #4]
 800f616:	6852      	ldr	r2, [r2, #4]
 800f618:	6879      	ldr	r1, [r7, #4]
 800f61a:	68c9      	ldr	r1, [r1, #12]
 800f61c:	1049      	asrs	r1, r1, #1
 800f61e:	440a      	add	r2, r1
 800f620:	4610      	mov	r0, r2
 800f622:	4798      	blx	r3
        }
    }
 800f624:	bf00      	nop
 800f626:	3708      	adds	r7, #8
 800f628:	46bd      	mov	sp, r7
 800f62a:	bd80      	pop	{r7, pc}

0800f62c <_Z13createStepgenRKN11ArduinoJson8V730HB2210JsonObjectE>:
 * 
 * @param config The JSON object containing the configuration for the Stepgen.
 * @return A unique pointer to the created Stepgen module.
 */
shared_ptr<Module> createStepgen(const JsonObject& config)
{
 800f62c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f62e:	b0b1      	sub	sp, #196	@ 0xc4
 800f630:	af08      	add	r7, sp, #32
 800f632:	6078      	str	r0, [r7, #4]
 800f634:	6039      	str	r1, [r7, #0]
    const char* comment = config["Comment"];
 800f636:	f107 0320 	add.w	r3, r7, #32
 800f63a:	4a49      	ldr	r2, [pc, #292]	@ (800f760 <_Z13createStepgenRKN11ArduinoJson8V730HB2210JsonObjectE+0x134>)
 800f63c:	6839      	ldr	r1, [r7, #0]
 800f63e:	4618      	mov	r0, r3
 800f640:	f000 fa3a 	bl	800fab8 <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA8_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 800f644:	f107 0320 	add.w	r3, r7, #32
 800f648:	4618      	mov	r0, r3
 800f64a:	f7f5 fc59 	bl	8004f00 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_IPKcLi0EEEv>
 800f64e:	f8c7 009c 	str.w	r0, [r7, #156]	@ 0x9c
    printf("%s\n", comment);
 800f652:	f8d7 009c 	ldr.w	r0, [r7, #156]	@ 0x9c
 800f656:	f00f f995 	bl	801e984 <puts>

    int joint = config["Joint Number"];
 800f65a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800f65e:	4a41      	ldr	r2, [pc, #260]	@ (800f764 <_Z13createStepgenRKN11ArduinoJson8V730HB2210JsonObjectE+0x138>)
 800f660:	6839      	ldr	r1, [r7, #0]
 800f662:	4618      	mov	r0, r3
 800f664:	f000 fa4d 	bl	800fb02 <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA13_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 800f668:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800f66c:	4618      	mov	r0, r3
 800f66e:	f7fc fdf1 	bl	800c254 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_IiLi0EEEv>
 800f672:	4603      	mov	r3, r0
 800f674:	61fb      	str	r3, [r7, #28]
    const char* enable = config["Enable Pin"];
 800f676:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800f67a:	4a3b      	ldr	r2, [pc, #236]	@ (800f768 <_Z13createStepgenRKN11ArduinoJson8V730HB2210JsonObjectE+0x13c>)
 800f67c:	6839      	ldr	r1, [r7, #0]
 800f67e:	4618      	mov	r0, r3
 800f680:	f7fc fdf4 	bl	800c26c <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA11_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 800f684:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800f688:	4618      	mov	r0, r3
 800f68a:	f7f5 fc39 	bl	8004f00 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_IPKcLi0EEEv>
 800f68e:	4603      	mov	r3, r0
 800f690:	61bb      	str	r3, [r7, #24]
    const char* step = config["Step Pin"];
 800f692:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800f696:	4a35      	ldr	r2, [pc, #212]	@ (800f76c <_Z13createStepgenRKN11ArduinoJson8V730HB2210JsonObjectE+0x140>)
 800f698:	6839      	ldr	r1, [r7, #0]
 800f69a:	4618      	mov	r0, r3
 800f69c:	f000 fa56 	bl	800fb4c <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA9_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 800f6a0:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800f6a4:	4618      	mov	r0, r3
 800f6a6:	f7f5 fc2b 	bl	8004f00 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_IPKcLi0EEEv>
 800f6aa:	4603      	mov	r3, r0
 800f6ac:	617b      	str	r3, [r7, #20]
    const char* dir = config["Direction Pin"];
 800f6ae:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 800f6b2:	4a2f      	ldr	r2, [pc, #188]	@ (800f770 <_Z13createStepgenRKN11ArduinoJson8V730HB2210JsonObjectE+0x144>)
 800f6b4:	6839      	ldr	r1, [r7, #0]
 800f6b6:	4618      	mov	r0, r3
 800f6b8:	f000 fa6d 	bl	800fb96 <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA14_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>
 800f6bc:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 800f6c0:	4618      	mov	r0, r3
 800f6c2:	f7f5 fc1d 	bl	8004f00 <_ZNK11ArduinoJson8V730HB226detail14VariantRefBaseINS1_11MemberProxyINS0_10JsonObjectENS1_9RamStringEEEEcvT_IPKcLi0EEEv>
 800f6c6:	4603      	mov	r3, r0
 800f6c8:	613b      	str	r3, [r7, #16]

    // Configure pointers to data source and feedback location
    ptrJointFreqCmd[joint] = &rxData.jointFreqCmd[joint];
 800f6ca:	69fa      	ldr	r2, [r7, #28]
 800f6cc:	69fb      	ldr	r3, [r7, #28]
 800f6ce:	0092      	lsls	r2, r2, #2
 800f6d0:	4928      	ldr	r1, [pc, #160]	@ (800f774 <_Z13createStepgenRKN11ArduinoJson8V730HB2210JsonObjectE+0x148>)
 800f6d2:	440a      	add	r2, r1
 800f6d4:	3204      	adds	r2, #4
 800f6d6:	4928      	ldr	r1, [pc, #160]	@ (800f778 <_Z13createStepgenRKN11ArduinoJson8V730HB2210JsonObjectE+0x14c>)
 800f6d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    ptrJointFeedback[joint] = &txData.jointFeedback[joint];
 800f6dc:	69fa      	ldr	r2, [r7, #28]
 800f6de:	69fb      	ldr	r3, [r7, #28]
 800f6e0:	0092      	lsls	r2, r2, #2
 800f6e2:	4926      	ldr	r1, [pc, #152]	@ (800f77c <_Z13createStepgenRKN11ArduinoJson8V730HB2210JsonObjectE+0x150>)
 800f6e4:	440a      	add	r2, r1
 800f6e6:	3204      	adds	r2, #4
 800f6e8:	4925      	ldr	r1, [pc, #148]	@ (800f780 <_Z13createStepgenRKN11ArduinoJson8V730HB2210JsonObjectE+0x154>)
 800f6ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    ptrJointEnable = &rxData.jointEnable;
 800f6ee:	4b25      	ldr	r3, [pc, #148]	@ (800f784 <_Z13createStepgenRKN11ArduinoJson8V730HB2210JsonObjectE+0x158>)
 800f6f0:	4a25      	ldr	r2, [pc, #148]	@ (800f788 <_Z13createStepgenRKN11ArduinoJson8V730HB2210JsonObjectE+0x15c>)
 800f6f2:	601a      	str	r2, [r3, #0]

    bool usesModulePost = true;		// stepgen uses the thread modulesPost vector
 800f6f4:	2301      	movs	r3, #1
 800f6f6:	73fb      	strb	r3, [r7, #15]

    // Create the step generator and register it in the thread
    return make_unique<Stepgen>(baseFreq, joint, enable, step, dir, Config::stepBit, *ptrJointFreqCmd[joint], *ptrJointFeedback[joint], *ptrJointEnable, usesModulePost);
 800f6f8:	69fb      	ldr	r3, [r7, #28]
 800f6fa:	4a1f      	ldr	r2, [pc, #124]	@ (800f778 <_Z13createStepgenRKN11ArduinoJson8V730HB2210JsonObjectE+0x14c>)
 800f6fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f700:	69fa      	ldr	r2, [r7, #28]
 800f702:	491f      	ldr	r1, [pc, #124]	@ (800f780 <_Z13createStepgenRKN11ArduinoJson8V730HB2210JsonObjectE+0x154>)
 800f704:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800f708:	491e      	ldr	r1, [pc, #120]	@ (800f784 <_Z13createStepgenRKN11ArduinoJson8V730HB2210JsonObjectE+0x158>)
 800f70a:	6809      	ldr	r1, [r1, #0]
 800f70c:	f107 0498 	add.w	r4, r7, #152	@ 0x98
 800f710:	f107 0618 	add.w	r6, r7, #24
 800f714:	f107 051c 	add.w	r5, r7, #28
 800f718:	f107 000f 	add.w	r0, r7, #15
 800f71c:	9006      	str	r0, [sp, #24]
 800f71e:	9105      	str	r1, [sp, #20]
 800f720:	9204      	str	r2, [sp, #16]
 800f722:	9303      	str	r3, [sp, #12]
 800f724:	4b19      	ldr	r3, [pc, #100]	@ (800f78c <_Z13createStepgenRKN11ArduinoJson8V730HB2210JsonObjectE+0x160>)
 800f726:	9302      	str	r3, [sp, #8]
 800f728:	f107 0310 	add.w	r3, r7, #16
 800f72c:	9301      	str	r3, [sp, #4]
 800f72e:	f107 0314 	add.w	r3, r7, #20
 800f732:	9300      	str	r3, [sp, #0]
 800f734:	4633      	mov	r3, r6
 800f736:	462a      	mov	r2, r5
 800f738:	4915      	ldr	r1, [pc, #84]	@ (800f790 <_Z13createStepgenRKN11ArduinoJson8V730HB2210JsonObjectE+0x164>)
 800f73a:	4620      	mov	r0, r4
 800f73c:	f000 fa50 	bl	800fbe0 <_ZSt11make_uniqueI7StepgenJRmRiRPKcS5_S5_RKmRVlS9_RVhRbEENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>
 800f740:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 800f744:	4619      	mov	r1, r3
 800f746:	6878      	ldr	r0, [r7, #4]
 800f748:	f000 fac6 	bl	800fcd8 <_ZNSt10shared_ptrI6ModuleEC1I7StepgenSt14default_deleteIS3_EvEEOSt10unique_ptrIT_T0_E>
 800f74c:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 800f750:	4618      	mov	r0, r3
 800f752:	f000 fa9f 	bl	800fc94 <_ZNSt10unique_ptrI7StepgenSt14default_deleteIS0_EED1Ev>
 800f756:	bf00      	nop
}
 800f758:	6878      	ldr	r0, [r7, #4]
 800f75a:	37a4      	adds	r7, #164	@ 0xa4
 800f75c:	46bd      	mov	sp, r7
 800f75e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f760:	080202b0 	.word	0x080202b0
 800f764:	080202b8 	.word	0x080202b8
 800f768:	080202c8 	.word	0x080202c8
 800f76c:	080202d4 	.word	0x080202d4
 800f770:	080202e0 	.word	0x080202e0
 800f774:	300000c0 	.word	0x300000c0
 800f778:	2400031c 	.word	0x2400031c
 800f77c:	30000080 	.word	0x30000080
 800f780:	2400033c 	.word	0x2400033c
 800f784:	2400035c 	.word	0x2400035c
 800f788:	300000fc 	.word	0x300000fc
 800f78c:	0802065c 	.word	0x0802065c
 800f790:	2400001c 	.word	0x2400001c

0800f794 <_ZN7StepgenC1EliPKcS1_S1_iRVlS3_RVhb>:
 * @param _stepBit The number of bits used for the step value.
 * @param _ptrFrequencyCommand A reference to the frequency command data for the joint.
 * @param _ptrFeedback A reference to the feedback data for the joint.
 * @param _ptrJointEnable A reference to the joint enable data.
 */
Stepgen::Stepgen(int32_t _threadFreq, int _jointNumber, const char* _enable, const char* _step, const char* _direction, int _stepBit, volatile int32_t& _ptrFrequencyCommand, volatile int32_t& _ptrFeedback,  volatile uint8_t& _ptrJointEnable, bool _usesModulePost)
 800f794:	b590      	push	{r4, r7, lr}
 800f796:	b09b      	sub	sp, #108	@ 0x6c
 800f798:	af00      	add	r7, sp, #0
 800f79a:	60f8      	str	r0, [r7, #12]
 800f79c:	60b9      	str	r1, [r7, #8]
 800f79e:	607a      	str	r2, [r7, #4]
 800f7a0:	603b      	str	r3, [r7, #0]
      DDSaccumulator(0),
      frequencyScale(1.0f * (1 << _stepBit) / _threadFreq),  // Frequency scaling without unnecessary cast
      mask(1 << _jointNumber),  // Mask for checking the joint number
      isEnabled(false),
      isForward(false),
      isStepping(false)
 800f7a2:	68fb      	ldr	r3, [r7, #12]
 800f7a4:	4618      	mov	r0, r3
 800f7a6:	f7fe fc31 	bl	800e00c <_ZN6ModuleC1Ev>
 800f7aa:	4a5c      	ldr	r2, [pc, #368]	@ (800f91c <_ZN7StepgenC1EliPKcS1_S1_iRVlS3_RVhb+0x188>)
 800f7ac:	68fb      	ldr	r3, [r7, #12]
 800f7ae:	601a      	str	r2, [r3, #0]
    : jointNumber(_jointNumber),
 800f7b0:	68fb      	ldr	r3, [r7, #12]
 800f7b2:	687a      	ldr	r2, [r7, #4]
 800f7b4:	619a      	str	r2, [r3, #24]
      enable(_enable),
 800f7b6:	68fb      	ldr	r3, [r7, #12]
 800f7b8:	683a      	ldr	r2, [r7, #0]
 800f7ba:	61da      	str	r2, [r3, #28]
      step(_step),
 800f7bc:	68fb      	ldr	r3, [r7, #12]
 800f7be:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800f7c0:	621a      	str	r2, [r3, #32]
      direction(_direction),
 800f7c2:	68fb      	ldr	r3, [r7, #12]
 800f7c4:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800f7c6:	625a      	str	r2, [r3, #36]	@ 0x24
      stepBit(_stepBit),
 800f7c8:	68fb      	ldr	r3, [r7, #12]
 800f7ca:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800f7ce:	629a      	str	r2, [r3, #40]	@ 0x28
      ptrFrequencyCommand(&_ptrFrequencyCommand),
 800f7d0:	68fb      	ldr	r3, [r7, #12]
 800f7d2:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800f7d6:	62da      	str	r2, [r3, #44]	@ 0x2c
      ptrFeedback(&_ptrFeedback),
 800f7d8:	68fb      	ldr	r3, [r7, #12]
 800f7da:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800f7de:	631a      	str	r2, [r3, #48]	@ 0x30
      ptrJointEnable(&_ptrJointEnable),
 800f7e0:	68fb      	ldr	r3, [r7, #12]
 800f7e2:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 800f7e6:	635a      	str	r2, [r3, #52]	@ 0x34
	  enablePin(_enable, OUTPUT),
 800f7e8:	68fb      	ldr	r3, [r7, #12]
 800f7ea:	f103 0438 	add.w	r4, r3, #56	@ 0x38
 800f7ee:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800f7f2:	4618      	mov	r0, r3
 800f7f4:	f00e fce3 	bl	801e1be <_ZNSaIcEC1Ev>
 800f7f8:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 800f7fc:	f107 0314 	add.w	r3, r7, #20
 800f800:	6839      	ldr	r1, [r7, #0]
 800f802:	4618      	mov	r0, r3
 800f804:	f7f5 faf6 	bl	8004df4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 800f808:	f107 0314 	add.w	r3, r7, #20
 800f80c:	2201      	movs	r2, #1
 800f80e:	4619      	mov	r1, r3
 800f810:	4620      	mov	r0, r4
 800f812:	f7f2 fce2 	bl	80021da <_ZN3PinC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi>
 800f816:	f107 0314 	add.w	r3, r7, #20
 800f81a:	4618      	mov	r0, r3
 800f81c:	f00e fd6b 	bl	801e2f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800f820:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800f824:	4618      	mov	r0, r3
 800f826:	f00e fccb 	bl	801e1c0 <_ZNSaIcED1Ev>
      stepPin(_step, OUTPUT),
 800f82a:	68fb      	ldr	r3, [r7, #12]
 800f82c:	f103 047c 	add.w	r4, r3, #124	@ 0x7c
 800f830:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800f834:	4618      	mov	r0, r3
 800f836:	f00e fcc2 	bl	801e1be <_ZNSaIcEC1Ev>
 800f83a:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 800f83e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800f842:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 800f844:	4618      	mov	r0, r3
 800f846:	f7f5 fad5 	bl	8004df4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 800f84a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800f84e:	2201      	movs	r2, #1
 800f850:	4619      	mov	r1, r3
 800f852:	4620      	mov	r0, r4
 800f854:	f7f2 fcc1 	bl	80021da <_ZN3PinC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi>
 800f858:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800f85c:	4618      	mov	r0, r3
 800f85e:	f00e fd4a 	bl	801e2f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800f862:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800f866:	4618      	mov	r0, r3
 800f868:	f00e fcaa 	bl	801e1c0 <_ZNSaIcED1Ev>
      directionPin(_direction, OUTPUT),
 800f86c:	68fb      	ldr	r3, [r7, #12]
 800f86e:	f103 04c0 	add.w	r4, r3, #192	@ 0xc0
 800f872:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800f876:	4618      	mov	r0, r3
 800f878:	f00e fca1 	bl	801e1be <_ZNSaIcEC1Ev>
 800f87c:	f107 0264 	add.w	r2, r7, #100	@ 0x64
 800f880:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800f884:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800f886:	4618      	mov	r0, r3
 800f888:	f7f5 fab4 	bl	8004df4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 800f88c:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800f890:	2201      	movs	r2, #1
 800f892:	4619      	mov	r1, r3
 800f894:	4620      	mov	r0, r4
 800f896:	f7f2 fca0 	bl	80021da <_ZN3PinC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi>
 800f89a:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800f89e:	4618      	mov	r0, r3
 800f8a0:	f00e fd29 	bl	801e2f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800f8a4:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800f8a8:	4618      	mov	r0, r3
 800f8aa:	f00e fc89 	bl	801e1c0 <_ZNSaIcED1Ev>
      rawCount(0),
 800f8ae:	68fb      	ldr	r3, [r7, #12]
 800f8b0:	2200      	movs	r2, #0
 800f8b2:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104
      DDSaccumulator(0),
 800f8b6:	68fb      	ldr	r3, [r7, #12]
 800f8b8:	2200      	movs	r2, #0
 800f8ba:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
      frequencyScale(1.0f * (1 << _stepBit) / _threadFreq),  // Frequency scaling without unnecessary cast
 800f8be:	2201      	movs	r2, #1
 800f8c0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800f8c4:	fa02 f303 	lsl.w	r3, r2, r3
 800f8c8:	ee07 3a90 	vmov	s15, r3
 800f8cc:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800f8d0:	68bb      	ldr	r3, [r7, #8]
 800f8d2:	ee07 3a90 	vmov	s15, r3
 800f8d6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800f8da:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f8de:	68fb      	ldr	r3, [r7, #12]
 800f8e0:	edc3 7a43 	vstr	s15, [r3, #268]	@ 0x10c
      mask(1 << _jointNumber),  // Mask for checking the joint number
 800f8e4:	2201      	movs	r2, #1
 800f8e6:	687b      	ldr	r3, [r7, #4]
 800f8e8:	409a      	lsls	r2, r3
 800f8ea:	68fb      	ldr	r3, [r7, #12]
 800f8ec:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118
      isEnabled(false),
 800f8f0:	68fb      	ldr	r3, [r7, #12]
 800f8f2:	2200      	movs	r2, #0
 800f8f4:	f883 211c 	strb.w	r2, [r3, #284]	@ 0x11c
      isForward(false),
 800f8f8:	68fb      	ldr	r3, [r7, #12]
 800f8fa:	2200      	movs	r2, #0
 800f8fc:	f883 211d 	strb.w	r2, [r3, #285]	@ 0x11d
      isStepping(false)
 800f900:	68fb      	ldr	r3, [r7, #12]
 800f902:	2200      	movs	r2, #0
 800f904:	f883 211e 	strb.w	r2, [r3, #286]	@ 0x11e
{
	usesModulePost = _usesModulePost;
 800f908:	68fb      	ldr	r3, [r7, #12]
 800f90a:	f897 2090 	ldrb.w	r2, [r7, #144]	@ 0x90
 800f90e:	751a      	strb	r2, [r3, #20]
}
 800f910:	68fb      	ldr	r3, [r7, #12]
 800f912:	4618      	mov	r0, r3
 800f914:	376c      	adds	r7, #108	@ 0x6c
 800f916:	46bd      	mov	sp, r7
 800f918:	bd90      	pop	{r4, r7, pc}
 800f91a:	bf00      	nop
 800f91c:	08020684 	.word	0x08020684

0800f920 <_ZN7Stepgen6updateEv>:
 * 
 * This method generates pulses for stepping according to the current
 * frequency command and direction.
 */
void Stepgen::update()
{
 800f920:	b580      	push	{r7, lr}
 800f922:	b082      	sub	sp, #8
 800f924:	af00      	add	r7, sp, #0
 800f926:	6078      	str	r0, [r7, #4]
    makePulses();  // Generate pulses for stepping and direction
 800f928:	6878      	ldr	r0, [r7, #4]
 800f92a:	f000 f819 	bl	800f960 <_ZN7Stepgen10makePulsesEv>
}
 800f92e:	bf00      	nop
 800f930:	3708      	adds	r7, #8
 800f932:	46bd      	mov	sp, r7
 800f934:	bd80      	pop	{r7, pc}

0800f936 <_ZN7Stepgen10updatePostEv>:
 * @brief Post-update method for the Stepgen.
 * 
 * This method stops any ongoing pulses after the update phase.
 */
void Stepgen::updatePost()
{
 800f936:	b580      	push	{r7, lr}
 800f938:	b082      	sub	sp, #8
 800f93a:	af00      	add	r7, sp, #0
 800f93c:	6078      	str	r0, [r7, #4]
    stopPulses();  // Stop pulse generation after update
 800f93e:	6878      	ldr	r0, [r7, #4]
 800f940:	f000 f8a8 	bl	800fa94 <_ZN7Stepgen10stopPulsesEv>
}
 800f944:	bf00      	nop
 800f946:	3708      	adds	r7, #8
 800f948:	46bd      	mov	sp, r7
 800f94a:	bd80      	pop	{r7, pc}

0800f94c <_ZN7Stepgen10slowUpdateEv>:
 * 
 * This is a placeholder for performing any slow or low-priority updates,
 * though it currently does nothing.
 */
void Stepgen::slowUpdate()
{
 800f94c:	b480      	push	{r7}
 800f94e:	b083      	sub	sp, #12
 800f950:	af00      	add	r7, sp, #0
 800f952:	6078      	str	r0, [r7, #4]
    // Currently no operation for slow update
}
 800f954:	bf00      	nop
 800f956:	370c      	adds	r7, #12
 800f958:	46bd      	mov	sp, r7
 800f95a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f95e:	4770      	bx	lr

0800f960 <_ZN7Stepgen10makePulsesEv>:
 * This method calculates the next step and updates the step and direction
 * pins accordingly. It uses the DDS (Direct Digital Synthesis) technique
 * to generate precise frequency-based stepping.
 */
void Stepgen::makePulses()
{
 800f960:	b580      	push	{r7, lr}
 800f962:	b084      	sub	sp, #16
 800f964:	af00      	add	r7, sp, #0
 800f966:	6078      	str	r0, [r7, #4]
    isEnabled = ((*(ptrJointEnable) & mask) != 0);
 800f968:	687b      	ldr	r3, [r7, #4]
 800f96a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f96c:	781b      	ldrb	r3, [r3, #0]
 800f96e:	b2db      	uxtb	r3, r3
 800f970:	461a      	mov	r2, r3
 800f972:	687b      	ldr	r3, [r7, #4]
 800f974:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 800f978:	4013      	ands	r3, r2
 800f97a:	2b00      	cmp	r3, #0
 800f97c:	bf14      	ite	ne
 800f97e:	2301      	movne	r3, #1
 800f980:	2300      	moveq	r3, #0
 800f982:	b2da      	uxtb	r2, r3
 800f984:	687b      	ldr	r3, [r7, #4]
 800f986:	f883 211c 	strb.w	r2, [r3, #284]	@ 0x11c
    if (!isEnabled)
 800f98a:	687b      	ldr	r3, [r7, #4]
 800f98c:	f893 311c 	ldrb.w	r3, [r3, #284]	@ 0x11c
 800f990:	f083 0301 	eor.w	r3, r3, #1
 800f994:	b2db      	uxtb	r3, r3
 800f996:	2b00      	cmp	r3, #0
 800f998:	d006      	beq.n	800f9a8 <_ZN7Stepgen10makePulsesEv+0x48>
    {
        enablePin.set(true);  	// Disable the driver if not enabled
 800f99a:	687b      	ldr	r3, [r7, #4]
 800f99c:	3338      	adds	r3, #56	@ 0x38
 800f99e:	2101      	movs	r1, #1
 800f9a0:	4618      	mov	r0, r3
 800f9a2:	f7fc fb3f 	bl	800c024 <_ZN3Pin3setEb>
        return;  				// Exit early if the generator is disabled
 800f9a6:	e072      	b.n	800fa8e <_ZN7Stepgen10makePulsesEv+0x12e>
    }

    enablePin.set(false); 		// Enable the driver
 800f9a8:	687b      	ldr	r3, [r7, #4]
 800f9aa:	3338      	adds	r3, #56	@ 0x38
 800f9ac:	2100      	movs	r1, #0
 800f9ae:	4618      	mov	r0, r3
 800f9b0:	f7fc fb38 	bl	800c024 <_ZN3Pin3setEb>

    // Get the current frequency command and scale it using the frequency scale
    frequencyCommand = *ptrFrequencyCommand;
 800f9b4:	687b      	ldr	r3, [r7, #4]
 800f9b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f9b8:	681a      	ldr	r2, [r3, #0]
 800f9ba:	687b      	ldr	r3, [r7, #4]
 800f9bc:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
    DDSaddValue = frequencyCommand * frequencyScale;
 800f9c0:	687b      	ldr	r3, [r7, #4]
 800f9c2:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 800f9c6:	ee07 3a90 	vmov	s15, r3
 800f9ca:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800f9ce:	687b      	ldr	r3, [r7, #4]
 800f9d0:	edd3 7a43 	vldr	s15, [r3, #268]	@ 0x10c
 800f9d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f9d8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f9dc:	ee17 2a90 	vmov	r2, s15
 800f9e0:	687b      	ldr	r3, [r7, #4]
 800f9e2:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114

    // Save the current DDS accumulator value and update it
    int32_t stepNow = DDSaccumulator;
 800f9e6:	687b      	ldr	r3, [r7, #4]
 800f9e8:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800f9ec:	60fb      	str	r3, [r7, #12]
    DDSaccumulator += DDSaddValue;
 800f9ee:	687b      	ldr	r3, [r7, #4]
 800f9f0:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 800f9f4:	687b      	ldr	r3, [r7, #4]
 800f9f6:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800f9fa:	441a      	add	r2, r3
 800f9fc:	687b      	ldr	r3, [r7, #4]
 800f9fe:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108

    // Check for changes in the low half of the DDS accumulator
    stepNow ^= DDSaccumulator;
 800fa02:	687b      	ldr	r3, [r7, #4]
 800fa04:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800fa08:	68fa      	ldr	r2, [r7, #12]
 800fa0a:	4053      	eors	r3, r2
 800fa0c:	60fb      	str	r3, [r7, #12]
    stepNow &= (1L << stepBit);  // Check for the step bit
 800fa0e:	687b      	ldr	r3, [r7, #4]
 800fa10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fa12:	2201      	movs	r2, #1
 800fa14:	fa02 f303 	lsl.w	r3, r2, r3
 800fa18:	68fa      	ldr	r2, [r7, #12]
 800fa1a:	4013      	ands	r3, r2
 800fa1c:	60fb      	str	r3, [r7, #12]

    // Determine direction based on the sign of DDSaddValue
    isForward = DDSaddValue > 0;
 800fa1e:	687b      	ldr	r3, [r7, #4]
 800fa20:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800fa24:	2b00      	cmp	r3, #0
 800fa26:	bfcc      	ite	gt
 800fa28:	2301      	movgt	r3, #1
 800fa2a:	2300      	movle	r3, #0
 800fa2c:	b2da      	uxtb	r2, r3
 800fa2e:	687b      	ldr	r3, [r7, #4]
 800fa30:	f883 211d 	strb.w	r2, [r3, #285]	@ 0x11d

    // If a step is to be made, set the direction and step pins accordingly
    if (stepNow)
 800fa34:	68fb      	ldr	r3, [r7, #12]
 800fa36:	2b00      	cmp	r3, #0
 800fa38:	d029      	beq.n	800fa8e <_ZN7Stepgen10makePulsesEv+0x12e>
    {
        directionPin.set(isForward);  // Set direction pin
 800fa3a:	687b      	ldr	r3, [r7, #4]
 800fa3c:	f103 02c0 	add.w	r2, r3, #192	@ 0xc0
 800fa40:	687b      	ldr	r3, [r7, #4]
 800fa42:	f893 311d 	ldrb.w	r3, [r3, #285]	@ 0x11d
 800fa46:	4619      	mov	r1, r3
 800fa48:	4610      	mov	r0, r2
 800fa4a:	f7fc faeb 	bl	800c024 <_ZN3Pin3setEb>
        stepPin.set(true);  // Set the step pin
 800fa4e:	687b      	ldr	r3, [r7, #4]
 800fa50:	337c      	adds	r3, #124	@ 0x7c
 800fa52:	2101      	movs	r1, #1
 800fa54:	4618      	mov	r0, r3
 800fa56:	f7fc fae5 	bl	800c024 <_ZN3Pin3setEb>
        rawCount += (isForward ? 1 : -1);  // Update rawCount based on direction
 800fa5a:	687b      	ldr	r3, [r7, #4]
 800fa5c:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 800fa60:	687a      	ldr	r2, [r7, #4]
 800fa62:	f892 211d 	ldrb.w	r2, [r2, #285]	@ 0x11d
 800fa66:	2a00      	cmp	r2, #0
 800fa68:	d001      	beq.n	800fa6e <_ZN7Stepgen10makePulsesEv+0x10e>
 800fa6a:	2201      	movs	r2, #1
 800fa6c:	e001      	b.n	800fa72 <_ZN7Stepgen10makePulsesEv+0x112>
 800fa6e:	f04f 32ff 	mov.w	r2, #4294967295
 800fa72:	441a      	add	r2, r3
 800fa74:	687b      	ldr	r3, [r7, #4]
 800fa76:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104
        *ptrFeedback = rawCount;  // Update the feedback with the raw count
 800fa7a:	687b      	ldr	r3, [r7, #4]
 800fa7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fa7e:	687a      	ldr	r2, [r7, #4]
 800fa80:	f8d2 2104 	ldr.w	r2, [r2, #260]	@ 0x104
 800fa84:	601a      	str	r2, [r3, #0]
        isStepping = true;  // Indicate that stepping is occurring
 800fa86:	687b      	ldr	r3, [r7, #4]
 800fa88:	2201      	movs	r2, #1
 800fa8a:	f883 211e 	strb.w	r2, [r3, #286]	@ 0x11e
    }
}
 800fa8e:	3710      	adds	r7, #16
 800fa90:	46bd      	mov	sp, r7
 800fa92:	bd80      	pop	{r7, pc}

0800fa94 <_ZN7Stepgen10stopPulsesEv>:
 * @brief Stops the pulse generation.
 * 
 * This method resets the step pin to low and stops any ongoing stepping.
 */
void Stepgen::stopPulses()
{
 800fa94:	b580      	push	{r7, lr}
 800fa96:	b082      	sub	sp, #8
 800fa98:	af00      	add	r7, sp, #0
 800fa9a:	6078      	str	r0, [r7, #4]
    stepPin.set(false);  // Reset step pin to low
 800fa9c:	687b      	ldr	r3, [r7, #4]
 800fa9e:	337c      	adds	r3, #124	@ 0x7c
 800faa0:	2100      	movs	r1, #0
 800faa2:	4618      	mov	r0, r3
 800faa4:	f7fc fabe 	bl	800c024 <_ZN3Pin3setEb>
    isStepping = false;  // Indicate that stepping has stopped
 800faa8:	687b      	ldr	r3, [r7, #4]
 800faaa:	2200      	movs	r2, #0
 800faac:	f883 211e 	strb.w	r2, [r3, #286]	@ 0x11e
}
 800fab0:	bf00      	nop
 800fab2:	3708      	adds	r7, #8
 800fab4:	46bd      	mov	sp, r7
 800fab6:	bd80      	pop	{r7, pc}

0800fab8 <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA8_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>:

  // Gets or sets the member with specified key.
  // https://arduinojson.org/v7/api/jsonobject/subscript/
  template <typename TString,
            detail::enable_if_t<detail::IsString<TString>::value, int> = 0>
  detail::MemberProxy<JsonObject, detail::AdaptedString<TString>> operator[](
 800fab8:	b580      	push	{r7, lr}
 800faba:	b08c      	sub	sp, #48	@ 0x30
 800fabc:	af02      	add	r7, sp, #8
 800fabe:	60f8      	str	r0, [r7, #12]
 800fac0:	60b9      	str	r1, [r7, #8]
 800fac2:	607a      	str	r2, [r7, #4]
      const TString& key) const {
    return {*this, detail::adaptString(key)};
 800fac4:	68ba      	ldr	r2, [r7, #8]
 800fac6:	f107 0314 	add.w	r3, r7, #20
 800faca:	e892 0003 	ldmia.w	r2, {r0, r1}
 800face:	e883 0003 	stmia.w	r3, {r0, r1}
 800fad2:	f107 031c 	add.w	r3, r7, #28
 800fad6:	6879      	ldr	r1, [r7, #4]
 800fad8:	4618      	mov	r0, r3
 800fada:	f7f5 fd53 	bl	8005584 <_ZN11ArduinoJson8V730HB226detail11adaptStringIRA8_KcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES9_NS1_9remove_cvINS1_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEOS9_>
 800fade:	466a      	mov	r2, sp
 800fae0:	f107 0320 	add.w	r3, r7, #32
 800fae4:	e893 0003 	ldmia.w	r3, {r0, r1}
 800fae8:	e882 0003 	stmia.w	r2, {r0, r1}
 800faec:	69fb      	ldr	r3, [r7, #28]
 800faee:	f107 0214 	add.w	r2, r7, #20
 800faf2:	ca06      	ldmia	r2, {r1, r2}
 800faf4:	68f8      	ldr	r0, [r7, #12]
 800faf6:	f7f5 fb72 	bl	80051de <_ZN11ArduinoJson8V730HB226detail11MemberProxyINS0_10JsonObjectENS1_9RamStringEEC1ES3_S4_>
  }
 800fafa:	68f8      	ldr	r0, [r7, #12]
 800fafc:	3728      	adds	r7, #40	@ 0x28
 800fafe:	46bd      	mov	sp, r7
 800fb00:	bd80      	pop	{r7, pc}

0800fb02 <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA13_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>:
  detail::MemberProxy<JsonObject, detail::AdaptedString<TString>> operator[](
 800fb02:	b580      	push	{r7, lr}
 800fb04:	b08c      	sub	sp, #48	@ 0x30
 800fb06:	af02      	add	r7, sp, #8
 800fb08:	60f8      	str	r0, [r7, #12]
 800fb0a:	60b9      	str	r1, [r7, #8]
 800fb0c:	607a      	str	r2, [r7, #4]
    return {*this, detail::adaptString(key)};
 800fb0e:	68ba      	ldr	r2, [r7, #8]
 800fb10:	f107 0314 	add.w	r3, r7, #20
 800fb14:	e892 0003 	ldmia.w	r2, {r0, r1}
 800fb18:	e883 0003 	stmia.w	r3, {r0, r1}
 800fb1c:	f107 031c 	add.w	r3, r7, #28
 800fb20:	6879      	ldr	r1, [r7, #4]
 800fb22:	4618      	mov	r0, r3
 800fb24:	f000 f8eb 	bl	800fcfe <_ZN11ArduinoJson8V730HB226detail11adaptStringIRA13_KcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES9_NS1_9remove_cvINS1_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEOS9_>
 800fb28:	466a      	mov	r2, sp
 800fb2a:	f107 0320 	add.w	r3, r7, #32
 800fb2e:	e893 0003 	ldmia.w	r3, {r0, r1}
 800fb32:	e882 0003 	stmia.w	r2, {r0, r1}
 800fb36:	69fb      	ldr	r3, [r7, #28]
 800fb38:	f107 0214 	add.w	r2, r7, #20
 800fb3c:	ca06      	ldmia	r2, {r1, r2}
 800fb3e:	68f8      	ldr	r0, [r7, #12]
 800fb40:	f7f5 fb4d 	bl	80051de <_ZN11ArduinoJson8V730HB226detail11MemberProxyINS0_10JsonObjectENS1_9RamStringEEC1ES3_S4_>
  }
 800fb44:	68f8      	ldr	r0, [r7, #12]
 800fb46:	3728      	adds	r7, #40	@ 0x28
 800fb48:	46bd      	mov	sp, r7
 800fb4a:	bd80      	pop	{r7, pc}

0800fb4c <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA9_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>:
  detail::MemberProxy<JsonObject, detail::AdaptedString<TString>> operator[](
 800fb4c:	b580      	push	{r7, lr}
 800fb4e:	b08c      	sub	sp, #48	@ 0x30
 800fb50:	af02      	add	r7, sp, #8
 800fb52:	60f8      	str	r0, [r7, #12]
 800fb54:	60b9      	str	r1, [r7, #8]
 800fb56:	607a      	str	r2, [r7, #4]
    return {*this, detail::adaptString(key)};
 800fb58:	68ba      	ldr	r2, [r7, #8]
 800fb5a:	f107 0314 	add.w	r3, r7, #20
 800fb5e:	e892 0003 	ldmia.w	r2, {r0, r1}
 800fb62:	e883 0003 	stmia.w	r3, {r0, r1}
 800fb66:	f107 031c 	add.w	r3, r7, #28
 800fb6a:	6879      	ldr	r1, [r7, #4]
 800fb6c:	4618      	mov	r0, r3
 800fb6e:	f000 f8d9 	bl	800fd24 <_ZN11ArduinoJson8V730HB226detail11adaptStringIRA9_KcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES9_NS1_9remove_cvINS1_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEOS9_>
 800fb72:	466a      	mov	r2, sp
 800fb74:	f107 0320 	add.w	r3, r7, #32
 800fb78:	e893 0003 	ldmia.w	r3, {r0, r1}
 800fb7c:	e882 0003 	stmia.w	r2, {r0, r1}
 800fb80:	69fb      	ldr	r3, [r7, #28]
 800fb82:	f107 0214 	add.w	r2, r7, #20
 800fb86:	ca06      	ldmia	r2, {r1, r2}
 800fb88:	68f8      	ldr	r0, [r7, #12]
 800fb8a:	f7f5 fb28 	bl	80051de <_ZN11ArduinoJson8V730HB226detail11MemberProxyINS0_10JsonObjectENS1_9RamStringEEC1ES3_S4_>
  }
 800fb8e:	68f8      	ldr	r0, [r7, #12]
 800fb90:	3728      	adds	r7, #40	@ 0x28
 800fb92:	46bd      	mov	sp, r7
 800fb94:	bd80      	pop	{r7, pc}

0800fb96 <_ZNK11ArduinoJson8V730HB2210JsonObjectixIA14_cLi0EEENS0_6detail11MemberProxyIS1_NS4_13StringAdapterINS4_11conditionalIXsrNS4_15IsStringLiteralIT_EE5valueES9_NS4_9remove_cvINS4_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEEERKS9_>:
  detail::MemberProxy<JsonObject, detail::AdaptedString<TString>> operator[](
 800fb96:	b580      	push	{r7, lr}
 800fb98:	b08c      	sub	sp, #48	@ 0x30
 800fb9a:	af02      	add	r7, sp, #8
 800fb9c:	60f8      	str	r0, [r7, #12]
 800fb9e:	60b9      	str	r1, [r7, #8]
 800fba0:	607a      	str	r2, [r7, #4]
    return {*this, detail::adaptString(key)};
 800fba2:	68ba      	ldr	r2, [r7, #8]
 800fba4:	f107 0314 	add.w	r3, r7, #20
 800fba8:	e892 0003 	ldmia.w	r2, {r0, r1}
 800fbac:	e883 0003 	stmia.w	r3, {r0, r1}
 800fbb0:	f107 031c 	add.w	r3, r7, #28
 800fbb4:	6879      	ldr	r1, [r7, #4]
 800fbb6:	4618      	mov	r0, r3
 800fbb8:	f000 f8c7 	bl	800fd4a <_ZN11ArduinoJson8V730HB226detail11adaptStringIRA14_KcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES9_NS1_9remove_cvINS1_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEOS9_>
 800fbbc:	466a      	mov	r2, sp
 800fbbe:	f107 0320 	add.w	r3, r7, #32
 800fbc2:	e893 0003 	ldmia.w	r3, {r0, r1}
 800fbc6:	e882 0003 	stmia.w	r2, {r0, r1}
 800fbca:	69fb      	ldr	r3, [r7, #28]
 800fbcc:	f107 0214 	add.w	r2, r7, #20
 800fbd0:	ca06      	ldmia	r2, {r1, r2}
 800fbd2:	68f8      	ldr	r0, [r7, #12]
 800fbd4:	f7f5 fb03 	bl	80051de <_ZN11ArduinoJson8V730HB226detail11MemberProxyINS0_10JsonObjectENS1_9RamStringEEC1ES3_S4_>
  }
 800fbd8:	68f8      	ldr	r0, [r7, #12]
 800fbda:	3728      	adds	r7, #40	@ 0x28
 800fbdc:	46bd      	mov	sp, r7
 800fbde:	bd80      	pop	{r7, pc}

0800fbe0 <_ZSt11make_uniqueI7StepgenJRmRiRPKcS5_S5_RKmRVlS9_RVhRbEENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>:
    make_unique(_Args&&... __args)
 800fbe0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800fbe4:	b093      	sub	sp, #76	@ 0x4c
 800fbe6:	af08      	add	r7, sp, #32
 800fbe8:	6278      	str	r0, [r7, #36]	@ 0x24
 800fbea:	6239      	str	r1, [r7, #32]
 800fbec:	61fa      	str	r2, [r7, #28]
 800fbee:	61bb      	str	r3, [r7, #24]
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
 800fbf0:	f44f 7090 	mov.w	r0, #288	@ 0x120
 800fbf4:	f00e fad2 	bl	801e19c <_Znwj>
 800fbf8:	4603      	mov	r3, r0
 800fbfa:	4698      	mov	r8, r3
 800fbfc:	6a38      	ldr	r0, [r7, #32]
 800fbfe:	f7fa fd27 	bl	800a650 <_ZSt7forwardIRmEOT_RNSt16remove_referenceIS1_E4typeE>
 800fc02:	4603      	mov	r3, r0
 800fc04:	681b      	ldr	r3, [r3, #0]
 800fc06:	4699      	mov	r9, r3
 800fc08:	69f8      	ldr	r0, [r7, #28]
 800fc0a:	f7fc fc92 	bl	800c532 <_ZSt7forwardIRiEOT_RNSt16remove_referenceIS1_E4typeE>
 800fc0e:	4603      	mov	r3, r0
 800fc10:	681e      	ldr	r6, [r3, #0]
 800fc12:	69b8      	ldr	r0, [r7, #24]
 800fc14:	f7fc fc82 	bl	800c51c <_ZSt7forwardIRPKcEOT_RNSt16remove_referenceIS3_E4typeE>
 800fc18:	4603      	mov	r3, r0
 800fc1a:	681b      	ldr	r3, [r3, #0]
 800fc1c:	617b      	str	r3, [r7, #20]
 800fc1e:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 800fc20:	f7fc fc7c 	bl	800c51c <_ZSt7forwardIRPKcEOT_RNSt16remove_referenceIS3_E4typeE>
 800fc24:	4603      	mov	r3, r0
 800fc26:	681c      	ldr	r4, [r3, #0]
 800fc28:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 800fc2a:	f7fc fc77 	bl	800c51c <_ZSt7forwardIRPKcEOT_RNSt16remove_referenceIS3_E4typeE>
 800fc2e:	4603      	mov	r3, r0
 800fc30:	681d      	ldr	r5, [r3, #0]
 800fc32:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800fc34:	f7fa fd17 	bl	800a666 <_ZSt7forwardIRKmEOT_RNSt16remove_referenceIS2_E4typeE>
 800fc38:	4603      	mov	r3, r0
 800fc3a:	681b      	ldr	r3, [r3, #0]
 800fc3c:	613b      	str	r3, [r7, #16]
 800fc3e:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 800fc40:	f000 f896 	bl	800fd70 <_ZSt7forwardIRVlEOT_RNSt16remove_referenceIS2_E4typeE>
 800fc44:	60f8      	str	r0, [r7, #12]
 800fc46:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800fc48:	f000 f892 	bl	800fd70 <_ZSt7forwardIRVlEOT_RNSt16remove_referenceIS2_E4typeE>
 800fc4c:	60b8      	str	r0, [r7, #8]
 800fc4e:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 800fc50:	f000 f899 	bl	800fd86 <_ZSt7forwardIRVhEOT_RNSt16remove_referenceIS2_E4typeE>
 800fc54:	6078      	str	r0, [r7, #4]
 800fc56:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 800fc58:	f000 f8a0 	bl	800fd9c <_ZSt7forwardIRbEOT_RNSt16remove_referenceIS1_E4typeE>
 800fc5c:	4603      	mov	r3, r0
 800fc5e:	781b      	ldrb	r3, [r3, #0]
 800fc60:	9306      	str	r3, [sp, #24]
 800fc62:	687a      	ldr	r2, [r7, #4]
 800fc64:	9205      	str	r2, [sp, #20]
 800fc66:	68ba      	ldr	r2, [r7, #8]
 800fc68:	9204      	str	r2, [sp, #16]
 800fc6a:	68fa      	ldr	r2, [r7, #12]
 800fc6c:	9203      	str	r2, [sp, #12]
 800fc6e:	693a      	ldr	r2, [r7, #16]
 800fc70:	9202      	str	r2, [sp, #8]
 800fc72:	9501      	str	r5, [sp, #4]
 800fc74:	9400      	str	r4, [sp, #0]
 800fc76:	697b      	ldr	r3, [r7, #20]
 800fc78:	4632      	mov	r2, r6
 800fc7a:	4649      	mov	r1, r9
 800fc7c:	4640      	mov	r0, r8
 800fc7e:	f7ff fd89 	bl	800f794 <_ZN7StepgenC1EliPKcS1_S1_iRVlS3_RVhb>
 800fc82:	4641      	mov	r1, r8
 800fc84:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800fc86:	f000 f8a4 	bl	800fdd2 <_ZNSt10unique_ptrI7StepgenSt14default_deleteIS0_EEC1IS2_vEEPS0_>
 800fc8a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800fc8c:	372c      	adds	r7, #44	@ 0x2c
 800fc8e:	46bd      	mov	sp, r7
 800fc90:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800fc94 <_ZNSt10unique_ptrI7StepgenSt14default_deleteIS0_EED1Ev>:
      ~unique_ptr() noexcept
 800fc94:	b590      	push	{r4, r7, lr}
 800fc96:	b085      	sub	sp, #20
 800fc98:	af00      	add	r7, sp, #0
 800fc9a:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 800fc9c:	687b      	ldr	r3, [r7, #4]
 800fc9e:	4618      	mov	r0, r3
 800fca0:	f000 f8a6 	bl	800fdf0 <_ZNSt15__uniq_ptr_implI7StepgenSt14default_deleteIS0_EE6_M_ptrEv>
 800fca4:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 800fca6:	68fb      	ldr	r3, [r7, #12]
 800fca8:	681b      	ldr	r3, [r3, #0]
 800fcaa:	2b00      	cmp	r3, #0
 800fcac:	d00c      	beq.n	800fcc8 <_ZNSt10unique_ptrI7StepgenSt14default_deleteIS0_EED1Ev+0x34>
	  get_deleter()(std::move(__ptr));
 800fcae:	6878      	ldr	r0, [r7, #4]
 800fcb0:	f000 f8ab 	bl	800fe0a <_ZNSt10unique_ptrI7StepgenSt14default_deleteIS0_EE11get_deleterEv>
 800fcb4:	4604      	mov	r4, r0
 800fcb6:	68f8      	ldr	r0, [r7, #12]
 800fcb8:	f000 f8b4 	bl	800fe24 <_ZSt4moveIRP7StepgenEONSt16remove_referenceIT_E4typeEOS4_>
 800fcbc:	4603      	mov	r3, r0
 800fcbe:	681b      	ldr	r3, [r3, #0]
 800fcc0:	4619      	mov	r1, r3
 800fcc2:	4620      	mov	r0, r4
 800fcc4:	f000 f8ed 	bl	800fea2 <_ZNKSt14default_deleteI7StepgenEclEPS0_>
	__ptr = pointer();
 800fcc8:	68fb      	ldr	r3, [r7, #12]
 800fcca:	2200      	movs	r2, #0
 800fccc:	601a      	str	r2, [r3, #0]
      }
 800fcce:	687b      	ldr	r3, [r7, #4]
 800fcd0:	4618      	mov	r0, r3
 800fcd2:	3714      	adds	r7, #20
 800fcd4:	46bd      	mov	sp, r7
 800fcd6:	bd90      	pop	{r4, r7, pc}

0800fcd8 <_ZNSt10shared_ptrI6ModuleEC1I7StepgenSt14default_deleteIS3_EvEEOSt10unique_ptrIT_T0_E>:
	shared_ptr(unique_ptr<_Yp, _Del>&& __r)
 800fcd8:	b590      	push	{r4, r7, lr}
 800fcda:	b083      	sub	sp, #12
 800fcdc:	af00      	add	r7, sp, #0
 800fcde:	6078      	str	r0, [r7, #4]
 800fce0:	6039      	str	r1, [r7, #0]
	: __shared_ptr<_Tp>(std::move(__r)) { }
 800fce2:	687c      	ldr	r4, [r7, #4]
 800fce4:	6838      	ldr	r0, [r7, #0]
 800fce6:	f000 f8ed 	bl	800fec4 <_ZSt4moveIRSt10unique_ptrI7StepgenSt14default_deleteIS1_EEEONSt16remove_referenceIT_E4typeEOS7_>
 800fcea:	4603      	mov	r3, r0
 800fcec:	4619      	mov	r1, r3
 800fcee:	4620      	mov	r0, r4
 800fcf0:	f000 f8f3 	bl	800feda <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EEC1I7StepgenSt14default_deleteIS5_EvEEOSt10unique_ptrIT_T0_E>
 800fcf4:	687b      	ldr	r3, [r7, #4]
 800fcf6:	4618      	mov	r0, r3
 800fcf8:	370c      	adds	r7, #12
 800fcfa:	46bd      	mov	sp, r7
 800fcfc:	bd90      	pop	{r4, r7, pc}

0800fcfe <_ZN11ArduinoJson8V730HB226detail11adaptStringIRA13_KcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES9_NS1_9remove_cvINS1_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEOS9_>:
AdaptedString<TString> adaptString(TString&& s) {
 800fcfe:	b580      	push	{r7, lr}
 800fd00:	b082      	sub	sp, #8
 800fd02:	af00      	add	r7, sp, #0
 800fd04:	6078      	str	r0, [r7, #4]
 800fd06:	6039      	str	r1, [r7, #0]
  return StringAdapterFor<TString>::adapt(detail::forward<TString>(s));
 800fd08:	6838      	ldr	r0, [r7, #0]
 800fd0a:	f000 f91e 	bl	800ff4a <_ZN11ArduinoJson8V730HB226detail7forwardIRA13_KcEEOT_RNS1_16remove_referenceIS6_E4typeE>
 800fd0e:	4602      	mov	r2, r0
 800fd10:	687b      	ldr	r3, [r7, #4]
 800fd12:	4611      	mov	r1, r2
 800fd14:	4618      	mov	r0, r3
 800fd16:	f000 f923 	bl	800ff60 <_ZN11ArduinoJson8V730HB226detail13StringAdapterIRA13_KcvE5adaptES5_>
 800fd1a:	bf00      	nop
}
 800fd1c:	6878      	ldr	r0, [r7, #4]
 800fd1e:	3708      	adds	r7, #8
 800fd20:	46bd      	mov	sp, r7
 800fd22:	bd80      	pop	{r7, pc}

0800fd24 <_ZN11ArduinoJson8V730HB226detail11adaptStringIRA9_KcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES9_NS1_9remove_cvINS1_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEOS9_>:
AdaptedString<TString> adaptString(TString&& s) {
 800fd24:	b580      	push	{r7, lr}
 800fd26:	b082      	sub	sp, #8
 800fd28:	af00      	add	r7, sp, #0
 800fd2a:	6078      	str	r0, [r7, #4]
 800fd2c:	6039      	str	r1, [r7, #0]
  return StringAdapterFor<TString>::adapt(detail::forward<TString>(s));
 800fd2e:	6838      	ldr	r0, [r7, #0]
 800fd30:	f000 f925 	bl	800ff7e <_ZN11ArduinoJson8V730HB226detail7forwardIRA9_KcEEOT_RNS1_16remove_referenceIS6_E4typeE>
 800fd34:	4602      	mov	r2, r0
 800fd36:	687b      	ldr	r3, [r7, #4]
 800fd38:	4611      	mov	r1, r2
 800fd3a:	4618      	mov	r0, r3
 800fd3c:	f000 f92a 	bl	800ff94 <_ZN11ArduinoJson8V730HB226detail13StringAdapterIRA9_KcvE5adaptES5_>
 800fd40:	bf00      	nop
}
 800fd42:	6878      	ldr	r0, [r7, #4]
 800fd44:	3708      	adds	r7, #8
 800fd46:	46bd      	mov	sp, r7
 800fd48:	bd80      	pop	{r7, pc}

0800fd4a <_ZN11ArduinoJson8V730HB226detail11adaptStringIRA14_KcEENS1_16StringAdapterForINS1_11conditionalIXsrNS1_15IsStringLiteralIT_EE5valueES9_NS1_9remove_cvINS1_16remove_referenceIS9_E4typeEE4typeEE4typeEvE13AdaptedStringEOS9_>:
AdaptedString<TString> adaptString(TString&& s) {
 800fd4a:	b580      	push	{r7, lr}
 800fd4c:	b082      	sub	sp, #8
 800fd4e:	af00      	add	r7, sp, #0
 800fd50:	6078      	str	r0, [r7, #4]
 800fd52:	6039      	str	r1, [r7, #0]
  return StringAdapterFor<TString>::adapt(detail::forward<TString>(s));
 800fd54:	6838      	ldr	r0, [r7, #0]
 800fd56:	f000 f92c 	bl	800ffb2 <_ZN11ArduinoJson8V730HB226detail7forwardIRA14_KcEEOT_RNS1_16remove_referenceIS6_E4typeE>
 800fd5a:	4602      	mov	r2, r0
 800fd5c:	687b      	ldr	r3, [r7, #4]
 800fd5e:	4611      	mov	r1, r2
 800fd60:	4618      	mov	r0, r3
 800fd62:	f000 f931 	bl	800ffc8 <_ZN11ArduinoJson8V730HB226detail13StringAdapterIRA14_KcvE5adaptES5_>
 800fd66:	bf00      	nop
}
 800fd68:	6878      	ldr	r0, [r7, #4]
 800fd6a:	3708      	adds	r7, #8
 800fd6c:	46bd      	mov	sp, r7
 800fd6e:	bd80      	pop	{r7, pc}

0800fd70 <_ZSt7forwardIRVlEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800fd70:	b480      	push	{r7}
 800fd72:	b083      	sub	sp, #12
 800fd74:	af00      	add	r7, sp, #0
 800fd76:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800fd78:	687b      	ldr	r3, [r7, #4]
 800fd7a:	4618      	mov	r0, r3
 800fd7c:	370c      	adds	r7, #12
 800fd7e:	46bd      	mov	sp, r7
 800fd80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd84:	4770      	bx	lr

0800fd86 <_ZSt7forwardIRVhEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800fd86:	b480      	push	{r7}
 800fd88:	b083      	sub	sp, #12
 800fd8a:	af00      	add	r7, sp, #0
 800fd8c:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800fd8e:	687b      	ldr	r3, [r7, #4]
 800fd90:	4618      	mov	r0, r3
 800fd92:	370c      	adds	r7, #12
 800fd94:	46bd      	mov	sp, r7
 800fd96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd9a:	4770      	bx	lr

0800fd9c <_ZSt7forwardIRbEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800fd9c:	b480      	push	{r7}
 800fd9e:	b083      	sub	sp, #12
 800fda0:	af00      	add	r7, sp, #0
 800fda2:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800fda4:	687b      	ldr	r3, [r7, #4]
 800fda6:	4618      	mov	r0, r3
 800fda8:	370c      	adds	r7, #12
 800fdaa:	46bd      	mov	sp, r7
 800fdac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdb0:	4770      	bx	lr

0800fdb2 <_ZNSt15__uniq_ptr_dataI7StepgenSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEPS0_>:
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 800fdb2:	b580      	push	{r7, lr}
 800fdb4:	b082      	sub	sp, #8
 800fdb6:	af00      	add	r7, sp, #0
 800fdb8:	6078      	str	r0, [r7, #4]
 800fdba:	6039      	str	r1, [r7, #0]
 800fdbc:	687b      	ldr	r3, [r7, #4]
 800fdbe:	683a      	ldr	r2, [r7, #0]
 800fdc0:	4611      	mov	r1, r2
 800fdc2:	4618      	mov	r0, r3
 800fdc4:	f000 f90f 	bl	800ffe6 <_ZNSt15__uniq_ptr_implI7StepgenSt14default_deleteIS0_EEC1EPS0_>
 800fdc8:	687b      	ldr	r3, [r7, #4]
 800fdca:	4618      	mov	r0, r3
 800fdcc:	3708      	adds	r7, #8
 800fdce:	46bd      	mov	sp, r7
 800fdd0:	bd80      	pop	{r7, pc}

0800fdd2 <_ZNSt10unique_ptrI7StepgenSt14default_deleteIS0_EEC1IS2_vEEPS0_>:
	unique_ptr(pointer __p) noexcept
 800fdd2:	b580      	push	{r7, lr}
 800fdd4:	b082      	sub	sp, #8
 800fdd6:	af00      	add	r7, sp, #0
 800fdd8:	6078      	str	r0, [r7, #4]
 800fdda:	6039      	str	r1, [r7, #0]
	: _M_t(__p)
 800fddc:	687b      	ldr	r3, [r7, #4]
 800fdde:	6839      	ldr	r1, [r7, #0]
 800fde0:	4618      	mov	r0, r3
 800fde2:	f7ff ffe6 	bl	800fdb2 <_ZNSt15__uniq_ptr_dataI7StepgenSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEPS0_>
        { }
 800fde6:	687b      	ldr	r3, [r7, #4]
 800fde8:	4618      	mov	r0, r3
 800fdea:	3708      	adds	r7, #8
 800fdec:	46bd      	mov	sp, r7
 800fdee:	bd80      	pop	{r7, pc}

0800fdf0 <_ZNSt15__uniq_ptr_implI7StepgenSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer&   _M_ptr() noexcept { return std::get<0>(_M_t); }
 800fdf0:	b580      	push	{r7, lr}
 800fdf2:	b082      	sub	sp, #8
 800fdf4:	af00      	add	r7, sp, #0
 800fdf6:	6078      	str	r0, [r7, #4]
 800fdf8:	687b      	ldr	r3, [r7, #4]
 800fdfa:	4618      	mov	r0, r3
 800fdfc:	f000 f907 	bl	801000e <_ZSt3getILj0EJP7StepgenSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 800fe00:	4603      	mov	r3, r0
 800fe02:	4618      	mov	r0, r3
 800fe04:	3708      	adds	r7, #8
 800fe06:	46bd      	mov	sp, r7
 800fe08:	bd80      	pop	{r7, pc}

0800fe0a <_ZNSt10unique_ptrI7StepgenSt14default_deleteIS0_EE11get_deleterEv>:
      get_deleter() noexcept
 800fe0a:	b580      	push	{r7, lr}
 800fe0c:	b082      	sub	sp, #8
 800fe0e:	af00      	add	r7, sp, #0
 800fe10:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 800fe12:	687b      	ldr	r3, [r7, #4]
 800fe14:	4618      	mov	r0, r3
 800fe16:	f000 f907 	bl	8010028 <_ZNSt15__uniq_ptr_implI7StepgenSt14default_deleteIS0_EE10_M_deleterEv>
 800fe1a:	4603      	mov	r3, r0
 800fe1c:	4618      	mov	r0, r3
 800fe1e:	3708      	adds	r7, #8
 800fe20:	46bd      	mov	sp, r7
 800fe22:	bd80      	pop	{r7, pc}

0800fe24 <_ZSt4moveIRP7StepgenEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 800fe24:	b480      	push	{r7}
 800fe26:	b083      	sub	sp, #12
 800fe28:	af00      	add	r7, sp, #0
 800fe2a:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800fe2c:	687b      	ldr	r3, [r7, #4]
 800fe2e:	4618      	mov	r0, r3
 800fe30:	370c      	adds	r7, #12
 800fe32:	46bd      	mov	sp, r7
 800fe34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe38:	4770      	bx	lr
	...

0800fe3c <_ZN7StepgenD1Ev>:
 *
 * The Stepgen class is responsible for controlling a stepper motor by generating
 * pulses based on frequency commands received from a controller, as well as managing
 * the motor's direction and enable states.
 */
class Stepgen : public Module
 800fe3c:	b580      	push	{r7, lr}
 800fe3e:	b082      	sub	sp, #8
 800fe40:	af00      	add	r7, sp, #0
 800fe42:	6078      	str	r0, [r7, #4]
 800fe44:	4a0d      	ldr	r2, [pc, #52]	@ (800fe7c <_ZN7StepgenD1Ev+0x40>)
 800fe46:	687b      	ldr	r3, [r7, #4]
 800fe48:	601a      	str	r2, [r3, #0]
 800fe4a:	687b      	ldr	r3, [r7, #4]
 800fe4c:	33c0      	adds	r3, #192	@ 0xc0
 800fe4e:	4618      	mov	r0, r3
 800fe50:	f7fc fc89 	bl	800c766 <_ZN3PinD1Ev>
 800fe54:	687b      	ldr	r3, [r7, #4]
 800fe56:	337c      	adds	r3, #124	@ 0x7c
 800fe58:	4618      	mov	r0, r3
 800fe5a:	f7fc fc84 	bl	800c766 <_ZN3PinD1Ev>
 800fe5e:	687b      	ldr	r3, [r7, #4]
 800fe60:	3338      	adds	r3, #56	@ 0x38
 800fe62:	4618      	mov	r0, r3
 800fe64:	f7fc fc7f 	bl	800c766 <_ZN3PinD1Ev>
 800fe68:	687b      	ldr	r3, [r7, #4]
 800fe6a:	4618      	mov	r0, r3
 800fe6c:	f7fe f8ea 	bl	800e044 <_ZN6ModuleD1Ev>
 800fe70:	687b      	ldr	r3, [r7, #4]
 800fe72:	4618      	mov	r0, r3
 800fe74:	3708      	adds	r7, #8
 800fe76:	46bd      	mov	sp, r7
 800fe78:	bd80      	pop	{r7, pc}
 800fe7a:	bf00      	nop
 800fe7c:	08020684 	.word	0x08020684

0800fe80 <_ZN7StepgenD0Ev>:
 800fe80:	b580      	push	{r7, lr}
 800fe82:	b082      	sub	sp, #8
 800fe84:	af00      	add	r7, sp, #0
 800fe86:	6078      	str	r0, [r7, #4]
 800fe88:	6878      	ldr	r0, [r7, #4]
 800fe8a:	f7ff ffd7 	bl	800fe3c <_ZN7StepgenD1Ev>
 800fe8e:	f44f 7190 	mov.w	r1, #288	@ 0x120
 800fe92:	6878      	ldr	r0, [r7, #4]
 800fe94:	f00e f971 	bl	801e17a <_ZdlPvj>
 800fe98:	687b      	ldr	r3, [r7, #4]
 800fe9a:	4618      	mov	r0, r3
 800fe9c:	3708      	adds	r7, #8
 800fe9e:	46bd      	mov	sp, r7
 800fea0:	bd80      	pop	{r7, pc}

0800fea2 <_ZNKSt14default_deleteI7StepgenEclEPS0_>:
      operator()(_Tp* __ptr) const
 800fea2:	b580      	push	{r7, lr}
 800fea4:	b082      	sub	sp, #8
 800fea6:	af00      	add	r7, sp, #0
 800fea8:	6078      	str	r0, [r7, #4]
 800feaa:	6039      	str	r1, [r7, #0]
	delete __ptr;
 800feac:	683b      	ldr	r3, [r7, #0]
 800feae:	2b00      	cmp	r3, #0
 800feb0:	d004      	beq.n	800febc <_ZNKSt14default_deleteI7StepgenEclEPS0_+0x1a>
 800feb2:	681a      	ldr	r2, [r3, #0]
 800feb4:	3204      	adds	r2, #4
 800feb6:	6812      	ldr	r2, [r2, #0]
 800feb8:	4618      	mov	r0, r3
 800feba:	4790      	blx	r2
      }
 800febc:	bf00      	nop
 800febe:	3708      	adds	r7, #8
 800fec0:	46bd      	mov	sp, r7
 800fec2:	bd80      	pop	{r7, pc}

0800fec4 <_ZSt4moveIRSt10unique_ptrI7StepgenSt14default_deleteIS1_EEEONSt16remove_referenceIT_E4typeEOS7_>:
    move(_Tp&& __t) noexcept
 800fec4:	b480      	push	{r7}
 800fec6:	b083      	sub	sp, #12
 800fec8:	af00      	add	r7, sp, #0
 800feca:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800fecc:	687b      	ldr	r3, [r7, #4]
 800fece:	4618      	mov	r0, r3
 800fed0:	370c      	adds	r7, #12
 800fed2:	46bd      	mov	sp, r7
 800fed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fed8:	4770      	bx	lr

0800feda <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EEC1I7StepgenSt14default_deleteIS5_EvEEOSt10unique_ptrIT_T0_E>:
	__shared_ptr(unique_ptr<_Yp, _Del>&& __r)
 800feda:	b580      	push	{r7, lr}
 800fedc:	b084      	sub	sp, #16
 800fede:	af00      	add	r7, sp, #0
 800fee0:	6078      	str	r0, [r7, #4]
 800fee2:	6039      	str	r1, [r7, #0]
	: _M_ptr(__r.get()), _M_refcount()
 800fee4:	6838      	ldr	r0, [r7, #0]
 800fee6:	f000 f8ac 	bl	8010042 <_ZNKSt10unique_ptrI7StepgenSt14default_deleteIS0_EE3getEv>
 800feea:	4602      	mov	r2, r0
 800feec:	687b      	ldr	r3, [r7, #4]
 800feee:	601a      	str	r2, [r3, #0]
 800fef0:	687b      	ldr	r3, [r7, #4]
 800fef2:	3304      	adds	r3, #4
 800fef4:	4618      	mov	r0, r3
 800fef6:	f7fc fcd6 	bl	800c8a6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
	  auto __raw = __to_address(__r.get());
 800fefa:	6838      	ldr	r0, [r7, #0]
 800fefc:	f000 f8a1 	bl	8010042 <_ZNKSt10unique_ptrI7StepgenSt14default_deleteIS0_EE3getEv>
 800ff00:	4603      	mov	r3, r0
 800ff02:	4618      	mov	r0, r3
 800ff04:	f000 f8aa 	bl	801005c <_ZSt12__to_addressI7StepgenEPT_S2_>
 800ff08:	60f8      	str	r0, [r7, #12]
	  _M_refcount = __shared_count<_Lp>(std::move(__r));
 800ff0a:	6838      	ldr	r0, [r7, #0]
 800ff0c:	f7ff ffda 	bl	800fec4 <_ZSt4moveIRSt10unique_ptrI7StepgenSt14default_deleteIS1_EEEONSt16remove_referenceIT_E4typeEOS7_>
 800ff10:	4602      	mov	r2, r0
 800ff12:	f107 0308 	add.w	r3, r7, #8
 800ff16:	4611      	mov	r1, r2
 800ff18:	4618      	mov	r0, r3
 800ff1a:	f000 f8aa 	bl	8010072 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1I7StepgenSt14default_deleteIS4_EEEOSt10unique_ptrIT_T0_E>
 800ff1e:	687b      	ldr	r3, [r7, #4]
 800ff20:	3304      	adds	r3, #4
 800ff22:	f107 0208 	add.w	r2, r7, #8
 800ff26:	4611      	mov	r1, r2
 800ff28:	4618      	mov	r0, r3
 800ff2a:	f7fc fd17 	bl	800c95c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_>
 800ff2e:	f107 0308 	add.w	r3, r7, #8
 800ff32:	4618      	mov	r0, r3
 800ff34:	f7fa f802 	bl	8009f3c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
	  _M_enable_shared_from_this_with(__raw);
 800ff38:	68f9      	ldr	r1, [r7, #12]
 800ff3a:	6878      	ldr	r0, [r7, #4]
 800ff3c:	f000 f8db 	bl	80100f6 <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withI7StepgenS5_EENSt9enable_ifIXntsrNS3_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>
	}
 800ff40:	687b      	ldr	r3, [r7, #4]
 800ff42:	4618      	mov	r0, r3
 800ff44:	3710      	adds	r7, #16
 800ff46:	46bd      	mov	sp, r7
 800ff48:	bd80      	pop	{r7, pc}

0800ff4a <_ZN11ArduinoJson8V730HB226detail7forwardIRA13_KcEEOT_RNS1_16remove_referenceIS6_E4typeE>:
T&& forward(remove_reference_t<T>& t) noexcept {
 800ff4a:	b480      	push	{r7}
 800ff4c:	b083      	sub	sp, #12
 800ff4e:	af00      	add	r7, sp, #0
 800ff50:	6078      	str	r0, [r7, #4]
  return static_cast<T&&>(t);
 800ff52:	687b      	ldr	r3, [r7, #4]
}
 800ff54:	4618      	mov	r0, r3
 800ff56:	370c      	adds	r7, #12
 800ff58:	46bd      	mov	sp, r7
 800ff5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff5e:	4770      	bx	lr

0800ff60 <_ZN11ArduinoJson8V730HB226detail13StringAdapterIRA13_KcvE5adaptES5_>:
  static AdaptedString adapt(const char (&p)[N]) {
 800ff60:	b580      	push	{r7, lr}
 800ff62:	b082      	sub	sp, #8
 800ff64:	af00      	add	r7, sp, #0
 800ff66:	6078      	str	r0, [r7, #4]
 800ff68:	6039      	str	r1, [r7, #0]
    return RamString(p, N - 1, true);
 800ff6a:	2301      	movs	r3, #1
 800ff6c:	220c      	movs	r2, #12
 800ff6e:	6839      	ldr	r1, [r7, #0]
 800ff70:	6878      	ldr	r0, [r7, #4]
 800ff72:	f7f2 fbaf 	bl	80026d4 <_ZN11ArduinoJson8V730HB226detail9RamStringC1EPKcjb>
  }
 800ff76:	6878      	ldr	r0, [r7, #4]
 800ff78:	3708      	adds	r7, #8
 800ff7a:	46bd      	mov	sp, r7
 800ff7c:	bd80      	pop	{r7, pc}

0800ff7e <_ZN11ArduinoJson8V730HB226detail7forwardIRA9_KcEEOT_RNS1_16remove_referenceIS6_E4typeE>:
T&& forward(remove_reference_t<T>& t) noexcept {
 800ff7e:	b480      	push	{r7}
 800ff80:	b083      	sub	sp, #12
 800ff82:	af00      	add	r7, sp, #0
 800ff84:	6078      	str	r0, [r7, #4]
  return static_cast<T&&>(t);
 800ff86:	687b      	ldr	r3, [r7, #4]
}
 800ff88:	4618      	mov	r0, r3
 800ff8a:	370c      	adds	r7, #12
 800ff8c:	46bd      	mov	sp, r7
 800ff8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff92:	4770      	bx	lr

0800ff94 <_ZN11ArduinoJson8V730HB226detail13StringAdapterIRA9_KcvE5adaptES5_>:
  static AdaptedString adapt(const char (&p)[N]) {
 800ff94:	b580      	push	{r7, lr}
 800ff96:	b082      	sub	sp, #8
 800ff98:	af00      	add	r7, sp, #0
 800ff9a:	6078      	str	r0, [r7, #4]
 800ff9c:	6039      	str	r1, [r7, #0]
    return RamString(p, N - 1, true);
 800ff9e:	2301      	movs	r3, #1
 800ffa0:	2208      	movs	r2, #8
 800ffa2:	6839      	ldr	r1, [r7, #0]
 800ffa4:	6878      	ldr	r0, [r7, #4]
 800ffa6:	f7f2 fb95 	bl	80026d4 <_ZN11ArduinoJson8V730HB226detail9RamStringC1EPKcjb>
  }
 800ffaa:	6878      	ldr	r0, [r7, #4]
 800ffac:	3708      	adds	r7, #8
 800ffae:	46bd      	mov	sp, r7
 800ffb0:	bd80      	pop	{r7, pc}

0800ffb2 <_ZN11ArduinoJson8V730HB226detail7forwardIRA14_KcEEOT_RNS1_16remove_referenceIS6_E4typeE>:
T&& forward(remove_reference_t<T>& t) noexcept {
 800ffb2:	b480      	push	{r7}
 800ffb4:	b083      	sub	sp, #12
 800ffb6:	af00      	add	r7, sp, #0
 800ffb8:	6078      	str	r0, [r7, #4]
  return static_cast<T&&>(t);
 800ffba:	687b      	ldr	r3, [r7, #4]
}
 800ffbc:	4618      	mov	r0, r3
 800ffbe:	370c      	adds	r7, #12
 800ffc0:	46bd      	mov	sp, r7
 800ffc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffc6:	4770      	bx	lr

0800ffc8 <_ZN11ArduinoJson8V730HB226detail13StringAdapterIRA14_KcvE5adaptES5_>:
  static AdaptedString adapt(const char (&p)[N]) {
 800ffc8:	b580      	push	{r7, lr}
 800ffca:	b082      	sub	sp, #8
 800ffcc:	af00      	add	r7, sp, #0
 800ffce:	6078      	str	r0, [r7, #4]
 800ffd0:	6039      	str	r1, [r7, #0]
    return RamString(p, N - 1, true);
 800ffd2:	2301      	movs	r3, #1
 800ffd4:	220d      	movs	r2, #13
 800ffd6:	6839      	ldr	r1, [r7, #0]
 800ffd8:	6878      	ldr	r0, [r7, #4]
 800ffda:	f7f2 fb7b 	bl	80026d4 <_ZN11ArduinoJson8V730HB226detail9RamStringC1EPKcjb>
  }
 800ffde:	6878      	ldr	r0, [r7, #4]
 800ffe0:	3708      	adds	r7, #8
 800ffe2:	46bd      	mov	sp, r7
 800ffe4:	bd80      	pop	{r7, pc}

0800ffe6 <_ZNSt15__uniq_ptr_implI7StepgenSt14default_deleteIS0_EEC1EPS0_>:
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
 800ffe6:	b590      	push	{r4, r7, lr}
 800ffe8:	b083      	sub	sp, #12
 800ffea:	af00      	add	r7, sp, #0
 800ffec:	6078      	str	r0, [r7, #4]
 800ffee:	6039      	str	r1, [r7, #0]
 800fff0:	687b      	ldr	r3, [r7, #4]
 800fff2:	4618      	mov	r0, r3
 800fff4:	f000 f88a 	bl	801010c <_ZNSt5tupleIJP7StepgenSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>
 800fff8:	683c      	ldr	r4, [r7, #0]
 800fffa:	6878      	ldr	r0, [r7, #4]
 800fffc:	f7ff fef8 	bl	800fdf0 <_ZNSt15__uniq_ptr_implI7StepgenSt14default_deleteIS0_EE6_M_ptrEv>
 8010000:	4603      	mov	r3, r0
 8010002:	601c      	str	r4, [r3, #0]
 8010004:	687b      	ldr	r3, [r7, #4]
 8010006:	4618      	mov	r0, r3
 8010008:	370c      	adds	r7, #12
 801000a:	46bd      	mov	sp, r7
 801000c:	bd90      	pop	{r4, r7, pc}

0801000e <_ZSt3getILj0EJP7StepgenSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 801000e:	b580      	push	{r7, lr}
 8010010:	b082      	sub	sp, #8
 8010012:	af00      	add	r7, sp, #0
 8010014:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8010016:	687b      	ldr	r3, [r7, #4]
 8010018:	4618      	mov	r0, r3
 801001a:	f000 f884 	bl	8010126 <_ZSt12__get_helperILj0EP7StepgenJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 801001e:	4603      	mov	r3, r0
 8010020:	4618      	mov	r0, r3
 8010022:	3708      	adds	r7, #8
 8010024:	46bd      	mov	sp, r7
 8010026:	bd80      	pop	{r7, pc}

08010028 <_ZNSt15__uniq_ptr_implI7StepgenSt14default_deleteIS0_EE10_M_deleterEv>:
      _Dp&       _M_deleter() noexcept { return std::get<1>(_M_t); }
 8010028:	b580      	push	{r7, lr}
 801002a:	b082      	sub	sp, #8
 801002c:	af00      	add	r7, sp, #0
 801002e:	6078      	str	r0, [r7, #4]
 8010030:	687b      	ldr	r3, [r7, #4]
 8010032:	4618      	mov	r0, r3
 8010034:	f000 f883 	bl	801013e <_ZSt3getILj1EJP7StepgenSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 8010038:	4603      	mov	r3, r0
 801003a:	4618      	mov	r0, r3
 801003c:	3708      	adds	r7, #8
 801003e:	46bd      	mov	sp, r7
 8010040:	bd80      	pop	{r7, pc}

08010042 <_ZNKSt10unique_ptrI7StepgenSt14default_deleteIS0_EE3getEv>:
      get() const noexcept
 8010042:	b580      	push	{r7, lr}
 8010044:	b082      	sub	sp, #8
 8010046:	af00      	add	r7, sp, #0
 8010048:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 801004a:	687b      	ldr	r3, [r7, #4]
 801004c:	4618      	mov	r0, r3
 801004e:	f000 f882 	bl	8010156 <_ZNKSt15__uniq_ptr_implI7StepgenSt14default_deleteIS0_EE6_M_ptrEv>
 8010052:	4603      	mov	r3, r0
 8010054:	4618      	mov	r0, r3
 8010056:	3708      	adds	r7, #8
 8010058:	46bd      	mov	sp, r7
 801005a:	bd80      	pop	{r7, pc}

0801005c <_ZSt12__to_addressI7StepgenEPT_S2_>:
    __to_address(_Tp* __ptr) noexcept
 801005c:	b480      	push	{r7}
 801005e:	b083      	sub	sp, #12
 8010060:	af00      	add	r7, sp, #0
 8010062:	6078      	str	r0, [r7, #4]
      return __ptr;
 8010064:	687b      	ldr	r3, [r7, #4]
    }
 8010066:	4618      	mov	r0, r3
 8010068:	370c      	adds	r7, #12
 801006a:	46bd      	mov	sp, r7
 801006c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010070:	4770      	bx	lr

08010072 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1I7StepgenSt14default_deleteIS4_EEEOSt10unique_ptrIT_T0_E>:
	__shared_count(std::unique_ptr<_Tp, _Del>&& __r) : _M_pi(0)
 8010072:	b580      	push	{r7, lr}
 8010074:	b086      	sub	sp, #24
 8010076:	af00      	add	r7, sp, #0
 8010078:	6078      	str	r0, [r7, #4]
 801007a:	6039      	str	r1, [r7, #0]
 801007c:	687b      	ldr	r3, [r7, #4]
 801007e:	2200      	movs	r2, #0
 8010080:	601a      	str	r2, [r3, #0]
	  if (__r.get() == nullptr)
 8010082:	6838      	ldr	r0, [r7, #0]
 8010084:	f7ff ffdd 	bl	8010042 <_ZNKSt10unique_ptrI7StepgenSt14default_deleteIS0_EE3getEv>
 8010088:	4603      	mov	r3, r0
 801008a:	2b00      	cmp	r3, #0
 801008c:	bf0c      	ite	eq
 801008e:	2301      	moveq	r3, #1
 8010090:	2300      	movne	r3, #0
 8010092:	b2db      	uxtb	r3, r3
 8010094:	2b00      	cmp	r3, #0
 8010096:	d128      	bne.n	80100ea <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1I7StepgenSt14default_deleteIS4_EEEOSt10unique_ptrIT_T0_E+0x78>
	  _Alloc __a;
 8010098:	f107 030c 	add.w	r3, r7, #12
 801009c:	4618      	mov	r0, r3
 801009e:	f000 f868 	bl	8010172 <_ZNSaISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEC1Ev>
	  _Sp_cd_type* __mem = _Alloc_traits::allocate(__a, 1);
 80100a2:	f107 030c 	add.w	r3, r7, #12
 80100a6:	2101      	movs	r1, #1
 80100a8:	4618      	mov	r0, r3
 80100aa:	f000 f87a 	bl	80101a2 <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEE8allocateERS9_j>
 80100ae:	6178      	str	r0, [r7, #20]
	  _Alloc_traits::construct(__a, __mem, __r.release(),
 80100b0:	6838      	ldr	r0, [r7, #0]
 80100b2:	f000 f885 	bl	80101c0 <_ZNSt10unique_ptrI7StepgenSt14default_deleteIS0_EE7releaseEv>
 80100b6:	4603      	mov	r3, r0
 80100b8:	613b      	str	r3, [r7, #16]
				   std::forward<_Del>(__r.get_deleter()));
 80100ba:	6838      	ldr	r0, [r7, #0]
 80100bc:	f7ff fea5 	bl	800fe0a <_ZNSt10unique_ptrI7StepgenSt14default_deleteIS0_EE11get_deleterEv>
 80100c0:	4603      	mov	r3, r0
	  _Alloc_traits::construct(__a, __mem, __r.release(),
 80100c2:	4618      	mov	r0, r3
 80100c4:	f000 f889 	bl	80101da <_ZSt7forwardISt14default_deleteI7StepgenEEOT_RNSt16remove_referenceIS3_E4typeE>
 80100c8:	4603      	mov	r3, r0
 80100ca:	f107 0210 	add.w	r2, r7, #16
 80100ce:	f107 000c 	add.w	r0, r7, #12
 80100d2:	6979      	ldr	r1, [r7, #20]
 80100d4:	f000 f88c 	bl	80101f0 <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEE9constructIS8_JS2_S4_EEEvRS9_PT_DpOT0_>
	  _M_pi = __mem;
 80100d8:	687b      	ldr	r3, [r7, #4]
 80100da:	697a      	ldr	r2, [r7, #20]
 80100dc:	601a      	str	r2, [r3, #0]
	}
 80100de:	f107 030c 	add.w	r3, r7, #12
 80100e2:	4618      	mov	r0, r3
 80100e4:	f000 f851 	bl	801018a <_ZNSaISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>
 80100e8:	e000      	b.n	80100ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1I7StepgenSt14default_deleteIS4_EEEOSt10unique_ptrIT_T0_E+0x7a>
	    return;
 80100ea:	bf00      	nop
	}
 80100ec:	687b      	ldr	r3, [r7, #4]
 80100ee:	4618      	mov	r0, r3
 80100f0:	3718      	adds	r7, #24
 80100f2:	46bd      	mov	sp, r7
 80100f4:	bd80      	pop	{r7, pc}

080100f6 <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EE31_M_enable_shared_from_this_withI7StepgenS5_EENSt9enable_ifIXntsrNS3_15__has_esft_baseIT0_vEE5valueEvE4typeEPT_>:
	_M_enable_shared_from_this_with(_Yp*) noexcept
 80100f6:	b480      	push	{r7}
 80100f8:	b083      	sub	sp, #12
 80100fa:	af00      	add	r7, sp, #0
 80100fc:	6078      	str	r0, [r7, #4]
 80100fe:	6039      	str	r1, [r7, #0]
	{ }
 8010100:	bf00      	nop
 8010102:	370c      	adds	r7, #12
 8010104:	46bd      	mov	sp, r7
 8010106:	f85d 7b04 	ldr.w	r7, [sp], #4
 801010a:	4770      	bx	lr

0801010c <_ZNSt5tupleIJP7StepgenSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>:
	tuple()
 801010c:	b580      	push	{r7, lr}
 801010e:	b082      	sub	sp, #8
 8010110:	af00      	add	r7, sp, #0
 8010112:	6078      	str	r0, [r7, #4]
	: _Inherited() { }
 8010114:	687b      	ldr	r3, [r7, #4]
 8010116:	4618      	mov	r0, r3
 8010118:	f000 f882 	bl	8010220 <_ZNSt11_Tuple_implILj0EJP7StepgenSt14default_deleteIS0_EEEC1Ev>
 801011c:	687b      	ldr	r3, [r7, #4]
 801011e:	4618      	mov	r0, r3
 8010120:	3708      	adds	r7, #8
 8010122:	46bd      	mov	sp, r7
 8010124:	bd80      	pop	{r7, pc}

08010126 <_ZSt12__get_helperILj0EP7StepgenJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8010126:	b580      	push	{r7, lr}
 8010128:	b082      	sub	sp, #8
 801012a:	af00      	add	r7, sp, #0
 801012c:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 801012e:	6878      	ldr	r0, [r7, #4]
 8010130:	f000 f886 	bl	8010240 <_ZNSt11_Tuple_implILj0EJP7StepgenSt14default_deleteIS0_EEE7_M_headERS4_>
 8010134:	4603      	mov	r3, r0
 8010136:	4618      	mov	r0, r3
 8010138:	3708      	adds	r7, #8
 801013a:	46bd      	mov	sp, r7
 801013c:	bd80      	pop	{r7, pc}

0801013e <_ZSt3getILj1EJP7StepgenSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 801013e:	b580      	push	{r7, lr}
 8010140:	b082      	sub	sp, #8
 8010142:	af00      	add	r7, sp, #0
 8010144:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8010146:	6878      	ldr	r0, [r7, #4]
 8010148:	f000 f887 	bl	801025a <_ZSt12__get_helperILj1ESt14default_deleteI7StepgenEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>
 801014c:	4603      	mov	r3, r0
 801014e:	4618      	mov	r0, r3
 8010150:	3708      	adds	r7, #8
 8010152:	46bd      	mov	sp, r7
 8010154:	bd80      	pop	{r7, pc}

08010156 <_ZNKSt15__uniq_ptr_implI7StepgenSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer    _M_ptr() const noexcept { return std::get<0>(_M_t); }
 8010156:	b580      	push	{r7, lr}
 8010158:	b082      	sub	sp, #8
 801015a:	af00      	add	r7, sp, #0
 801015c:	6078      	str	r0, [r7, #4]
 801015e:	687b      	ldr	r3, [r7, #4]
 8010160:	4618      	mov	r0, r3
 8010162:	f000 f886 	bl	8010272 <_ZSt3getILj0EJP7StepgenSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>
 8010166:	4603      	mov	r3, r0
 8010168:	681b      	ldr	r3, [r3, #0]
 801016a:	4618      	mov	r0, r3
 801016c:	3708      	adds	r7, #8
 801016e:	46bd      	mov	sp, r7
 8010170:	bd80      	pop	{r7, pc}

08010172 <_ZNSaISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 8010172:	b580      	push	{r7, lr}
 8010174:	b082      	sub	sp, #8
 8010176:	af00      	add	r7, sp, #0
 8010178:	6078      	str	r0, [r7, #4]
 801017a:	6878      	ldr	r0, [r7, #4]
 801017c:	f000 f886 	bl	801028c <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEC1Ev>
 8010180:	687b      	ldr	r3, [r7, #4]
 8010182:	4618      	mov	r0, r3
 8010184:	3708      	adds	r7, #8
 8010186:	46bd      	mov	sp, r7
 8010188:	bd80      	pop	{r7, pc}

0801018a <_ZNSaISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 801018a:	b580      	push	{r7, lr}
 801018c:	b082      	sub	sp, #8
 801018e:	af00      	add	r7, sp, #0
 8010190:	6078      	str	r0, [r7, #4]
 8010192:	6878      	ldr	r0, [r7, #4]
 8010194:	f000 f885 	bl	80102a2 <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>
 8010198:	687b      	ldr	r3, [r7, #4]
 801019a:	4618      	mov	r0, r3
 801019c:	3708      	adds	r7, #8
 801019e:	46bd      	mov	sp, r7
 80101a0:	bd80      	pop	{r7, pc}

080101a2 <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEE8allocateERS9_j>:
      allocate(allocator_type& __a, size_type __n)
 80101a2:	b580      	push	{r7, lr}
 80101a4:	b082      	sub	sp, #8
 80101a6:	af00      	add	r7, sp, #0
 80101a8:	6078      	str	r0, [r7, #4]
 80101aa:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 80101ac:	2200      	movs	r2, #0
 80101ae:	6839      	ldr	r1, [r7, #0]
 80101b0:	6878      	ldr	r0, [r7, #4]
 80101b2:	f000 f881 	bl	80102b8 <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE8allocateEjPKv>
 80101b6:	4603      	mov	r3, r0
 80101b8:	4618      	mov	r0, r3
 80101ba:	3708      	adds	r7, #8
 80101bc:	46bd      	mov	sp, r7
 80101be:	bd80      	pop	{r7, pc}

080101c0 <_ZNSt10unique_ptrI7StepgenSt14default_deleteIS0_EE7releaseEv>:
      release() noexcept
 80101c0:	b580      	push	{r7, lr}
 80101c2:	b082      	sub	sp, #8
 80101c4:	af00      	add	r7, sp, #0
 80101c6:	6078      	str	r0, [r7, #4]
      { return _M_t.release(); }
 80101c8:	687b      	ldr	r3, [r7, #4]
 80101ca:	4618      	mov	r0, r3
 80101cc:	f000 f89e 	bl	801030c <_ZNSt15__uniq_ptr_implI7StepgenSt14default_deleteIS0_EE7releaseEv>
 80101d0:	4603      	mov	r3, r0
 80101d2:	4618      	mov	r0, r3
 80101d4:	3708      	adds	r7, #8
 80101d6:	46bd      	mov	sp, r7
 80101d8:	bd80      	pop	{r7, pc}

080101da <_ZSt7forwardISt14default_deleteI7StepgenEEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80101da:	b480      	push	{r7}
 80101dc:	b083      	sub	sp, #12
 80101de:	af00      	add	r7, sp, #0
 80101e0:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80101e2:	687b      	ldr	r3, [r7, #4]
 80101e4:	4618      	mov	r0, r3
 80101e6:	370c      	adds	r7, #12
 80101e8:	46bd      	mov	sp, r7
 80101ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101ee:	4770      	bx	lr

080101f0 <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEE9constructIS8_JS2_S4_EEEvRS9_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 80101f0:	b590      	push	{r4, r7, lr}
 80101f2:	b085      	sub	sp, #20
 80101f4:	af00      	add	r7, sp, #0
 80101f6:	60f8      	str	r0, [r7, #12]
 80101f8:	60b9      	str	r1, [r7, #8]
 80101fa:	607a      	str	r2, [r7, #4]
 80101fc:	603b      	str	r3, [r7, #0]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 80101fe:	6878      	ldr	r0, [r7, #4]
 8010200:	f000 f899 	bl	8010336 <_ZSt7forwardIP7StepgenEOT_RNSt16remove_referenceIS2_E4typeE>
 8010204:	4604      	mov	r4, r0
 8010206:	6838      	ldr	r0, [r7, #0]
 8010208:	f7ff ffe7 	bl	80101da <_ZSt7forwardISt14default_deleteI7StepgenEEOT_RNSt16remove_referenceIS3_E4typeE>
 801020c:	4603      	mov	r3, r0
 801020e:	4622      	mov	r2, r4
 8010210:	68b9      	ldr	r1, [r7, #8]
 8010212:	68f8      	ldr	r0, [r7, #12]
 8010214:	f000 f89a 	bl	801034c <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE9constructIS8_JS2_S4_EEEvPT_DpOT0_>
	}
 8010218:	bf00      	nop
 801021a:	3714      	adds	r7, #20
 801021c:	46bd      	mov	sp, r7
 801021e:	bd90      	pop	{r4, r7, pc}

08010220 <_ZNSt11_Tuple_implILj0EJP7StepgenSt14default_deleteIS0_EEEC1Ev>:
      constexpr _Tuple_impl()
 8010220:	b580      	push	{r7, lr}
 8010222:	b082      	sub	sp, #8
 8010224:	af00      	add	r7, sp, #0
 8010226:	6078      	str	r0, [r7, #4]
      : _Inherited(), _Base() { }
 8010228:	6878      	ldr	r0, [r7, #4]
 801022a:	f000 f8ad 	bl	8010388 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI7StepgenEEEC1Ev>
 801022e:	687b      	ldr	r3, [r7, #4]
 8010230:	4618      	mov	r0, r3
 8010232:	f000 f8b5 	bl	80103a0 <_ZNSt10_Head_baseILj0EP7StepgenLb0EEC1Ev>
 8010236:	687b      	ldr	r3, [r7, #4]
 8010238:	4618      	mov	r0, r3
 801023a:	3708      	adds	r7, #8
 801023c:	46bd      	mov	sp, r7
 801023e:	bd80      	pop	{r7, pc}

08010240 <_ZNSt11_Tuple_implILj0EJP7StepgenSt14default_deleteIS0_EEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8010240:	b580      	push	{r7, lr}
 8010242:	b082      	sub	sp, #8
 8010244:	af00      	add	r7, sp, #0
 8010246:	6078      	str	r0, [r7, #4]
 8010248:	687b      	ldr	r3, [r7, #4]
 801024a:	4618      	mov	r0, r3
 801024c:	f000 f8b6 	bl	80103bc <_ZNSt10_Head_baseILj0EP7StepgenLb0EE7_M_headERS2_>
 8010250:	4603      	mov	r3, r0
 8010252:	4618      	mov	r0, r3
 8010254:	3708      	adds	r7, #8
 8010256:	46bd      	mov	sp, r7
 8010258:	bd80      	pop	{r7, pc}

0801025a <_ZSt12__get_helperILj1ESt14default_deleteI7StepgenEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 801025a:	b580      	push	{r7, lr}
 801025c:	b082      	sub	sp, #8
 801025e:	af00      	add	r7, sp, #0
 8010260:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8010262:	6878      	ldr	r0, [r7, #4]
 8010264:	f000 f8b5 	bl	80103d2 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI7StepgenEEE7_M_headERS3_>
 8010268:	4603      	mov	r3, r0
 801026a:	4618      	mov	r0, r3
 801026c:	3708      	adds	r7, #8
 801026e:	46bd      	mov	sp, r7
 8010270:	bd80      	pop	{r7, pc}

08010272 <_ZSt3getILj0EJP7StepgenSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>:
    get(const tuple<_Elements...>& __t) noexcept
 8010272:	b580      	push	{r7, lr}
 8010274:	b082      	sub	sp, #8
 8010276:	af00      	add	r7, sp, #0
 8010278:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 801027a:	687b      	ldr	r3, [r7, #4]
 801027c:	4618      	mov	r0, r3
 801027e:	f000 f8b4 	bl	80103ea <_ZSt12__get_helperILj0EP7StepgenJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>
 8010282:	4603      	mov	r3, r0
 8010284:	4618      	mov	r0, r3
 8010286:	3708      	adds	r7, #8
 8010288:	46bd      	mov	sp, r7
 801028a:	bd80      	pop	{r7, pc}

0801028c <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEC1Ev>:
      __new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 801028c:	b480      	push	{r7}
 801028e:	b083      	sub	sp, #12
 8010290:	af00      	add	r7, sp, #0
 8010292:	6078      	str	r0, [r7, #4]
 8010294:	687b      	ldr	r3, [r7, #4]
 8010296:	4618      	mov	r0, r3
 8010298:	370c      	adds	r7, #12
 801029a:	46bd      	mov	sp, r7
 801029c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102a0:	4770      	bx	lr

080102a2 <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>:
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80102a2:	b480      	push	{r7}
 80102a4:	b083      	sub	sp, #12
 80102a6:	af00      	add	r7, sp, #0
 80102a8:	6078      	str	r0, [r7, #4]
 80102aa:	687b      	ldr	r3, [r7, #4]
 80102ac:	4618      	mov	r0, r3
 80102ae:	370c      	adds	r7, #12
 80102b0:	46bd      	mov	sp, r7
 80102b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102b6:	4770      	bx	lr

080102b8 <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 80102b8:	b580      	push	{r7, lr}
 80102ba:	b084      	sub	sp, #16
 80102bc:	af00      	add	r7, sp, #0
 80102be:	60f8      	str	r0, [r7, #12]
 80102c0:	60b9      	str	r1, [r7, #8]
 80102c2:	607a      	str	r2, [r7, #4]
	if (__builtin_expect(__n > this->_M_max_size(), false))
 80102c4:	68f8      	ldr	r0, [r7, #12]
 80102c6:	f000 f89c 	bl	8010402 <_ZNKSt15__new_allocatorISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE11_M_max_sizeEv>
 80102ca:	4602      	mov	r2, r0
 80102cc:	68bb      	ldr	r3, [r7, #8]
 80102ce:	4293      	cmp	r3, r2
 80102d0:	bf8c      	ite	hi
 80102d2:	2301      	movhi	r3, #1
 80102d4:	2300      	movls	r3, #0
 80102d6:	b2db      	uxtb	r3, r3
 80102d8:	2b00      	cmp	r3, #0
 80102da:	bf14      	ite	ne
 80102dc:	2301      	movne	r3, #1
 80102de:	2300      	moveq	r3, #0
 80102e0:	b2db      	uxtb	r3, r3
 80102e2:	2b00      	cmp	r3, #0
 80102e4:	d007      	beq.n	80102f6 <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE8allocateEjPKv+0x3e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 80102e6:	68bb      	ldr	r3, [r7, #8]
 80102e8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80102ec:	d301      	bcc.n	80102f2 <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE8allocateEjPKv+0x3a>
	      std::__throw_bad_array_new_length();
 80102ee:	f00d ff6b 	bl	801e1c8 <_ZSt28__throw_bad_array_new_lengthv>
	    std::__throw_bad_alloc();
 80102f2:	f00d ff66 	bl	801e1c2 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 80102f6:	68bb      	ldr	r3, [r7, #8]
 80102f8:	011b      	lsls	r3, r3, #4
 80102fa:	4618      	mov	r0, r3
 80102fc:	f00d ff4e 	bl	801e19c <_Znwj>
 8010300:	4603      	mov	r3, r0
 8010302:	bf00      	nop
      }
 8010304:	4618      	mov	r0, r3
 8010306:	3710      	adds	r7, #16
 8010308:	46bd      	mov	sp, r7
 801030a:	bd80      	pop	{r7, pc}

0801030c <_ZNSt15__uniq_ptr_implI7StepgenSt14default_deleteIS0_EE7releaseEv>:
      pointer release() noexcept
 801030c:	b580      	push	{r7, lr}
 801030e:	b084      	sub	sp, #16
 8010310:	af00      	add	r7, sp, #0
 8010312:	6078      	str	r0, [r7, #4]
	pointer __p = _M_ptr();
 8010314:	6878      	ldr	r0, [r7, #4]
 8010316:	f7ff fd6b 	bl	800fdf0 <_ZNSt15__uniq_ptr_implI7StepgenSt14default_deleteIS0_EE6_M_ptrEv>
 801031a:	4603      	mov	r3, r0
 801031c:	681b      	ldr	r3, [r3, #0]
 801031e:	60fb      	str	r3, [r7, #12]
	_M_ptr() = nullptr;
 8010320:	6878      	ldr	r0, [r7, #4]
 8010322:	f7ff fd65 	bl	800fdf0 <_ZNSt15__uniq_ptr_implI7StepgenSt14default_deleteIS0_EE6_M_ptrEv>
 8010326:	4603      	mov	r3, r0
 8010328:	2200      	movs	r2, #0
 801032a:	601a      	str	r2, [r3, #0]
	return __p;
 801032c:	68fb      	ldr	r3, [r7, #12]
      }
 801032e:	4618      	mov	r0, r3
 8010330:	3710      	adds	r7, #16
 8010332:	46bd      	mov	sp, r7
 8010334:	bd80      	pop	{r7, pc}

08010336 <_ZSt7forwardIP7StepgenEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8010336:	b480      	push	{r7}
 8010338:	b083      	sub	sp, #12
 801033a:	af00      	add	r7, sp, #0
 801033c:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 801033e:	687b      	ldr	r3, [r7, #4]
 8010340:	4618      	mov	r0, r3
 8010342:	370c      	adds	r7, #12
 8010344:	46bd      	mov	sp, r7
 8010346:	f85d 7b04 	ldr.w	r7, [sp], #4
 801034a:	4770      	bx	lr

0801034c <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE9constructIS8_JS2_S4_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 801034c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801034e:	b085      	sub	sp, #20
 8010350:	af00      	add	r7, sp, #0
 8010352:	60f8      	str	r0, [r7, #12]
 8010354:	60b9      	str	r1, [r7, #8]
 8010356:	607a      	str	r2, [r7, #4]
 8010358:	603b      	str	r3, [r7, #0]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 801035a:	68bb      	ldr	r3, [r7, #8]
 801035c:	4619      	mov	r1, r3
 801035e:	2010      	movs	r0, #16
 8010360:	f7fb fe54 	bl	800c00c <_ZnwjPv>
 8010364:	4605      	mov	r5, r0
 8010366:	6878      	ldr	r0, [r7, #4]
 8010368:	f7ff ffe5 	bl	8010336 <_ZSt7forwardIP7StepgenEOT_RNSt16remove_referenceIS2_E4typeE>
 801036c:	4603      	mov	r3, r0
 801036e:	681c      	ldr	r4, [r3, #0]
 8010370:	6838      	ldr	r0, [r7, #0]
 8010372:	f7ff ff32 	bl	80101da <_ZSt7forwardISt14default_deleteI7StepgenEEOT_RNSt16remove_referenceIS3_E4typeE>
 8010376:	4632      	mov	r2, r6
 8010378:	4621      	mov	r1, r4
 801037a:	4628      	mov	r0, r5
 801037c:	f000 f84e 	bl	801041c <_ZNSt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEC1ES1_S3_>
 8010380:	bf00      	nop
 8010382:	3714      	adds	r7, #20
 8010384:	46bd      	mov	sp, r7
 8010386:	bdf0      	pop	{r4, r5, r6, r7, pc}

08010388 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI7StepgenEEEC1Ev>:
      _Tuple_impl()
 8010388:	b580      	push	{r7, lr}
 801038a:	b082      	sub	sp, #8
 801038c:	af00      	add	r7, sp, #0
 801038e:	6078      	str	r0, [r7, #4]
      : _Base() { }
 8010390:	6878      	ldr	r0, [r7, #4]
 8010392:	f000 f865 	bl	8010460 <_ZNSt10_Head_baseILj1ESt14default_deleteI7StepgenELb1EEC1Ev>
 8010396:	687b      	ldr	r3, [r7, #4]
 8010398:	4618      	mov	r0, r3
 801039a:	3708      	adds	r7, #8
 801039c:	46bd      	mov	sp, r7
 801039e:	bd80      	pop	{r7, pc}

080103a0 <_ZNSt10_Head_baseILj0EP7StepgenLb0EEC1Ev>:
      constexpr _Head_base()
 80103a0:	b480      	push	{r7}
 80103a2:	b083      	sub	sp, #12
 80103a4:	af00      	add	r7, sp, #0
 80103a6:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 80103a8:	687b      	ldr	r3, [r7, #4]
 80103aa:	2200      	movs	r2, #0
 80103ac:	601a      	str	r2, [r3, #0]
 80103ae:	687b      	ldr	r3, [r7, #4]
 80103b0:	4618      	mov	r0, r3
 80103b2:	370c      	adds	r7, #12
 80103b4:	46bd      	mov	sp, r7
 80103b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103ba:	4770      	bx	lr

080103bc <_ZNSt10_Head_baseILj0EP7StepgenLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 80103bc:	b480      	push	{r7}
 80103be:	b083      	sub	sp, #12
 80103c0:	af00      	add	r7, sp, #0
 80103c2:	6078      	str	r0, [r7, #4]
 80103c4:	687b      	ldr	r3, [r7, #4]
 80103c6:	4618      	mov	r0, r3
 80103c8:	370c      	adds	r7, #12
 80103ca:	46bd      	mov	sp, r7
 80103cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103d0:	4770      	bx	lr

080103d2 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI7StepgenEEE7_M_headERS3_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 80103d2:	b580      	push	{r7, lr}
 80103d4:	b082      	sub	sp, #8
 80103d6:	af00      	add	r7, sp, #0
 80103d8:	6078      	str	r0, [r7, #4]
 80103da:	6878      	ldr	r0, [r7, #4]
 80103dc:	f000 f84b 	bl	8010476 <_ZNSt10_Head_baseILj1ESt14default_deleteI7StepgenELb1EE7_M_headERS3_>
 80103e0:	4603      	mov	r3, r0
 80103e2:	4618      	mov	r0, r3
 80103e4:	3708      	adds	r7, #8
 80103e6:	46bd      	mov	sp, r7
 80103e8:	bd80      	pop	{r7, pc}

080103ea <_ZSt12__get_helperILj0EP7StepgenJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 80103ea:	b580      	push	{r7, lr}
 80103ec:	b082      	sub	sp, #8
 80103ee:	af00      	add	r7, sp, #0
 80103f0:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 80103f2:	6878      	ldr	r0, [r7, #4]
 80103f4:	f000 f84a 	bl	801048c <_ZNSt11_Tuple_implILj0EJP7StepgenSt14default_deleteIS0_EEE7_M_headERKS4_>
 80103f8:	4603      	mov	r3, r0
 80103fa:	4618      	mov	r0, r3
 80103fc:	3708      	adds	r7, #8
 80103fe:	46bd      	mov	sp, r7
 8010400:	bd80      	pop	{r7, pc}

08010402 <_ZNKSt15__new_allocatorISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8010402:	b480      	push	{r7}
 8010404:	b083      	sub	sp, #12
 8010406:	af00      	add	r7, sp, #0
 8010408:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 801040a:	f06f 4378 	mvn.w	r3, #4160749568	@ 0xf8000000
      }
 801040e:	4618      	mov	r0, r3
 8010410:	370c      	adds	r7, #12
 8010412:	46bd      	mov	sp, r7
 8010414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010418:	4770      	bx	lr
	...

0801041c <_ZNSt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEC1ES1_S3_>:
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
 801041c:	b5b0      	push	{r4, r5, r7, lr}
 801041e:	b086      	sub	sp, #24
 8010420:	af00      	add	r7, sp, #0
 8010422:	60f8      	str	r0, [r7, #12]
 8010424:	60b9      	str	r1, [r7, #8]
 8010426:	713a      	strb	r2, [r7, #4]
      : _M_impl(__p, std::move(__d), _Alloc()) { }
 8010428:	68fb      	ldr	r3, [r7, #12]
 801042a:	4618      	mov	r0, r3
 801042c:	f7fc ffa2 	bl	800d374 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
 8010430:	4a0a      	ldr	r2, [pc, #40]	@ (801045c <_ZNSt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEC1ES1_S3_+0x40>)
 8010432:	68fb      	ldr	r3, [r7, #12]
 8010434:	601a      	str	r2, [r3, #0]
 8010436:	68fb      	ldr	r3, [r7, #12]
 8010438:	f103 040c 	add.w	r4, r3, #12
 801043c:	1d3b      	adds	r3, r7, #4
 801043e:	4618      	mov	r0, r3
 8010440:	f000 f831 	bl	80104a6 <_ZSt4moveIRSt14default_deleteI7StepgenEEONSt16remove_referenceIT_E4typeEOS5_>
 8010444:	f107 0314 	add.w	r3, r7, #20
 8010448:	462a      	mov	r2, r5
 801044a:	68b9      	ldr	r1, [r7, #8]
 801044c:	4620      	mov	r0, r4
 801044e:	f000 f835 	bl	80104bc <_ZNSt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE5_ImplC1ES1_S3_RKS4_>
 8010452:	68fb      	ldr	r3, [r7, #12]
 8010454:	4618      	mov	r0, r3
 8010456:	3718      	adds	r7, #24
 8010458:	46bd      	mov	sp, r7
 801045a:	bdb0      	pop	{r4, r5, r7, pc}
 801045c:	08020668 	.word	0x08020668

08010460 <_ZNSt10_Head_baseILj1ESt14default_deleteI7StepgenELb1EEC1Ev>:
      constexpr _Head_base()
 8010460:	b480      	push	{r7}
 8010462:	b083      	sub	sp, #12
 8010464:	af00      	add	r7, sp, #0
 8010466:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 8010468:	687b      	ldr	r3, [r7, #4]
 801046a:	4618      	mov	r0, r3
 801046c:	370c      	adds	r7, #12
 801046e:	46bd      	mov	sp, r7
 8010470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010474:	4770      	bx	lr

08010476 <_ZNSt10_Head_baseILj1ESt14default_deleteI7StepgenELb1EE7_M_headERS3_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8010476:	b480      	push	{r7}
 8010478:	b083      	sub	sp, #12
 801047a:	af00      	add	r7, sp, #0
 801047c:	6078      	str	r0, [r7, #4]
 801047e:	687b      	ldr	r3, [r7, #4]
 8010480:	4618      	mov	r0, r3
 8010482:	370c      	adds	r7, #12
 8010484:	46bd      	mov	sp, r7
 8010486:	f85d 7b04 	ldr.w	r7, [sp], #4
 801048a:	4770      	bx	lr

0801048c <_ZNSt11_Tuple_implILj0EJP7StepgenSt14default_deleteIS0_EEE7_M_headERKS4_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 801048c:	b580      	push	{r7, lr}
 801048e:	b082      	sub	sp, #8
 8010490:	af00      	add	r7, sp, #0
 8010492:	6078      	str	r0, [r7, #4]
 8010494:	687b      	ldr	r3, [r7, #4]
 8010496:	4618      	mov	r0, r3
 8010498:	f000 f82c 	bl	80104f4 <_ZNSt10_Head_baseILj0EP7StepgenLb0EE7_M_headERKS2_>
 801049c:	4603      	mov	r3, r0
 801049e:	4618      	mov	r0, r3
 80104a0:	3708      	adds	r7, #8
 80104a2:	46bd      	mov	sp, r7
 80104a4:	bd80      	pop	{r7, pc}

080104a6 <_ZSt4moveIRSt14default_deleteI7StepgenEEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 80104a6:	b480      	push	{r7}
 80104a8:	b083      	sub	sp, #12
 80104aa:	af00      	add	r7, sp, #0
 80104ac:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80104ae:	687b      	ldr	r3, [r7, #4]
 80104b0:	4618      	mov	r0, r3
 80104b2:	370c      	adds	r7, #12
 80104b4:	46bd      	mov	sp, r7
 80104b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104ba:	4770      	bx	lr

080104bc <_ZNSt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE5_ImplC1ES1_S3_RKS4_>:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
 80104bc:	b580      	push	{r7, lr}
 80104be:	b084      	sub	sp, #16
 80104c0:	af00      	add	r7, sp, #0
 80104c2:	60f8      	str	r0, [r7, #12]
 80104c4:	60b9      	str	r1, [r7, #8]
 80104c6:	713a      	strb	r2, [r7, #4]
 80104c8:	603b      	str	r3, [r7, #0]
	: _Del_base(std::move(__d)), _Alloc_base(__a), _M_ptr(__p)
 80104ca:	1d3b      	adds	r3, r7, #4
 80104cc:	4618      	mov	r0, r3
 80104ce:	f7ff ffea 	bl	80104a6 <_ZSt4moveIRSt14default_deleteI7StepgenEEONSt16remove_referenceIT_E4typeEOS5_>
 80104d2:	4603      	mov	r3, r0
 80104d4:	4619      	mov	r1, r3
 80104d6:	68f8      	ldr	r0, [r7, #12]
 80104d8:	f000 f817 	bl	801050a <_ZNSt14_Sp_ebo_helperILi0ESt14default_deleteI7StepgenELb1EEC1EOS2_>
 80104dc:	6839      	ldr	r1, [r7, #0]
 80104de:	68f8      	ldr	r0, [r7, #12]
 80104e0:	f7fc ffb3 	bl	800d44a <_ZNSt14_Sp_ebo_helperILi1ESaIvELb1EEC1ERKS0_>
 80104e4:	68fb      	ldr	r3, [r7, #12]
 80104e6:	68ba      	ldr	r2, [r7, #8]
 80104e8:	601a      	str	r2, [r3, #0]
	{ }
 80104ea:	68fb      	ldr	r3, [r7, #12]
 80104ec:	4618      	mov	r0, r3
 80104ee:	3710      	adds	r7, #16
 80104f0:	46bd      	mov	sp, r7
 80104f2:	bd80      	pop	{r7, pc}

080104f4 <_ZNSt10_Head_baseILj0EP7StepgenLb0EE7_M_headERKS2_>:
      _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }
 80104f4:	b480      	push	{r7}
 80104f6:	b083      	sub	sp, #12
 80104f8:	af00      	add	r7, sp, #0
 80104fa:	6078      	str	r0, [r7, #4]
 80104fc:	687b      	ldr	r3, [r7, #4]
 80104fe:	4618      	mov	r0, r3
 8010500:	370c      	adds	r7, #12
 8010502:	46bd      	mov	sp, r7
 8010504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010508:	4770      	bx	lr

0801050a <_ZNSt14_Sp_ebo_helperILi0ESt14default_deleteI7StepgenELb1EEC1EOS2_>:
      explicit _Sp_ebo_helper(_Tp&& __tp) : _Tp(std::move(__tp)) { }
 801050a:	b580      	push	{r7, lr}
 801050c:	b082      	sub	sp, #8
 801050e:	af00      	add	r7, sp, #0
 8010510:	6078      	str	r0, [r7, #4]
 8010512:	6039      	str	r1, [r7, #0]
 8010514:	6838      	ldr	r0, [r7, #0]
 8010516:	f7ff ffc6 	bl	80104a6 <_ZSt4moveIRSt14default_deleteI7StepgenEEONSt16remove_referenceIT_E4typeEOS5_>
 801051a:	687b      	ldr	r3, [r7, #4]
 801051c:	4618      	mov	r0, r3
 801051e:	3708      	adds	r7, #8
 8010520:	46bd      	mov	sp, r7
 8010522:	bd80      	pop	{r7, pc}

08010524 <_ZNSt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_deleter() noexcept { }
 8010524:	b580      	push	{r7, lr}
 8010526:	b082      	sub	sp, #8
 8010528:	af00      	add	r7, sp, #0
 801052a:	6078      	str	r0, [r7, #4]
 801052c:	4a05      	ldr	r2, [pc, #20]	@ (8010544 <_ZNSt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EED1Ev+0x20>)
 801052e:	687b      	ldr	r3, [r7, #4]
 8010530:	601a      	str	r2, [r3, #0]
 8010532:	687b      	ldr	r3, [r7, #4]
 8010534:	4618      	mov	r0, r3
 8010536:	f7fb ff91 	bl	800c45c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 801053a:	687b      	ldr	r3, [r7, #4]
 801053c:	4618      	mov	r0, r3
 801053e:	3708      	adds	r7, #8
 8010540:	46bd      	mov	sp, r7
 8010542:	bd80      	pop	{r7, pc}
 8010544:	08020668 	.word	0x08020668

08010548 <_ZNSt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
 8010548:	b580      	push	{r7, lr}
 801054a:	b082      	sub	sp, #8
 801054c:	af00      	add	r7, sp, #0
 801054e:	6078      	str	r0, [r7, #4]
 8010550:	6878      	ldr	r0, [r7, #4]
 8010552:	f7ff ffe7 	bl	8010524 <_ZNSt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8010556:	2110      	movs	r1, #16
 8010558:	6878      	ldr	r0, [r7, #4]
 801055a:	f00d fe0e 	bl	801e17a <_ZdlPvj>
 801055e:	687b      	ldr	r3, [r7, #4]
 8010560:	4618      	mov	r0, r3
 8010562:	3708      	adds	r7, #8
 8010564:	46bd      	mov	sp, r7
 8010566:	bd80      	pop	{r7, pc}

08010568 <_ZNSt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
 8010568:	b580      	push	{r7, lr}
 801056a:	b082      	sub	sp, #8
 801056c:	af00      	add	r7, sp, #0
 801056e:	6078      	str	r0, [r7, #4]
      { _M_impl._M_del()(_M_impl._M_ptr); }
 8010570:	687b      	ldr	r3, [r7, #4]
 8010572:	330c      	adds	r3, #12
 8010574:	4618      	mov	r0, r3
 8010576:	f000 f83f 	bl	80105f8 <_ZNSt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE5_Impl6_M_delEv>
 801057a:	4602      	mov	r2, r0
 801057c:	687b      	ldr	r3, [r7, #4]
 801057e:	68db      	ldr	r3, [r3, #12]
 8010580:	4619      	mov	r1, r3
 8010582:	4610      	mov	r0, r2
 8010584:	f7ff fc8d 	bl	800fea2 <_ZNKSt14default_deleteI7StepgenEclEPS0_>
 8010588:	bf00      	nop
 801058a:	3708      	adds	r7, #8
 801058c:	46bd      	mov	sp, r7
 801058e:	bd80      	pop	{r7, pc}

08010590 <_ZNSt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
 8010590:	b580      	push	{r7, lr}
 8010592:	b086      	sub	sp, #24
 8010594:	af00      	add	r7, sp, #0
 8010596:	6078      	str	r0, [r7, #4]
	__allocator_type __a(_M_impl._M_alloc());
 8010598:	687b      	ldr	r3, [r7, #4]
 801059a:	330c      	adds	r3, #12
 801059c:	4618      	mov	r0, r3
 801059e:	f000 f837 	bl	8010610 <_ZNSt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE5_Impl8_M_allocEv>
 80105a2:	4602      	mov	r2, r0
 80105a4:	f107 0314 	add.w	r3, r7, #20
 80105a8:	4611      	mov	r1, r2
 80105aa:	4618      	mov	r0, r3
 80105ac:	f000 f83c 	bl	8010628 <_ZNSaISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEC1IvEERKSaIT_E>
	__allocated_ptr<__allocator_type> __guard_ptr{ __a, this };
 80105b0:	f107 0114 	add.w	r1, r7, #20
 80105b4:	f107 030c 	add.w	r3, r7, #12
 80105b8:	687a      	ldr	r2, [r7, #4]
 80105ba:	4618      	mov	r0, r3
 80105bc:	f000 f841 	bl	8010642 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEEC1ERS9_PS8_>
	this->~_Sp_counted_deleter();
 80105c0:	6878      	ldr	r0, [r7, #4]
 80105c2:	f7ff ffaf 	bl	8010524 <_ZNSt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EED1Ev>
      }
 80105c6:	f107 030c 	add.w	r3, r7, #12
 80105ca:	4618      	mov	r0, r3
 80105cc:	f000 f84d 	bl	801066a <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEED1Ev>
 80105d0:	f107 0314 	add.w	r3, r7, #20
 80105d4:	4618      	mov	r0, r3
 80105d6:	f7ff fdd8 	bl	801018a <_ZNSaISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEED1Ev>
 80105da:	3718      	adds	r7, #24
 80105dc:	46bd      	mov	sp, r7
 80105de:	bd80      	pop	{r7, pc}

080105e0 <_ZNSt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_get_deleter(const type_info& __ti [[__gnu__::__unused__]]) noexcept
 80105e0:	b480      	push	{r7}
 80105e2:	b083      	sub	sp, #12
 80105e4:	af00      	add	r7, sp, #0
 80105e6:	6078      	str	r0, [r7, #4]
 80105e8:	6039      	str	r1, [r7, #0]
        return nullptr;
 80105ea:	2300      	movs	r3, #0
      }
 80105ec:	4618      	mov	r0, r3
 80105ee:	370c      	adds	r7, #12
 80105f0:	46bd      	mov	sp, r7
 80105f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105f6:	4770      	bx	lr

080105f8 <_ZNSt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE5_Impl6_M_delEv>:
	_Deleter& _M_del() noexcept { return _Del_base::_S_get(*this); }
 80105f8:	b580      	push	{r7, lr}
 80105fa:	b082      	sub	sp, #8
 80105fc:	af00      	add	r7, sp, #0
 80105fe:	6078      	str	r0, [r7, #4]
 8010600:	6878      	ldr	r0, [r7, #4]
 8010602:	f000 f847 	bl	8010694 <_ZNSt14_Sp_ebo_helperILi0ESt14default_deleteI7StepgenELb1EE6_S_getERS3_>
 8010606:	4603      	mov	r3, r0
 8010608:	4618      	mov	r0, r3
 801060a:	3708      	adds	r7, #8
 801060c:	46bd      	mov	sp, r7
 801060e:	bd80      	pop	{r7, pc}

08010610 <_ZNSt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EE5_Impl8_M_allocEv>:
	_Alloc& _M_alloc() noexcept { return _Alloc_base::_S_get(*this); }
 8010610:	b580      	push	{r7, lr}
 8010612:	b082      	sub	sp, #8
 8010614:	af00      	add	r7, sp, #0
 8010616:	6078      	str	r0, [r7, #4]
 8010618:	6878      	ldr	r0, [r7, #4]
 801061a:	f7fc ffe6 	bl	800d5ea <_ZNSt14_Sp_ebo_helperILi1ESaIvELb1EE6_S_getERS1_>
 801061e:	4603      	mov	r3, r0
 8010620:	4618      	mov	r0, r3
 8010622:	3708      	adds	r7, #8
 8010624:	46bd      	mov	sp, r7
 8010626:	bd80      	pop	{r7, pc}

08010628 <_ZNSaISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS0_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEC1IvEERKSaIT_E>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }
 8010628:	b580      	push	{r7, lr}
 801062a:	b082      	sub	sp, #8
 801062c:	af00      	add	r7, sp, #0
 801062e:	6078      	str	r0, [r7, #4]
 8010630:	6039      	str	r1, [r7, #0]
 8010632:	6878      	ldr	r0, [r7, #4]
 8010634:	f7ff fe2a 	bl	801028c <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEC1Ev>
 8010638:	687b      	ldr	r3, [r7, #4]
 801063a:	4618      	mov	r0, r3
 801063c:	3708      	adds	r7, #8
 801063e:	46bd      	mov	sp, r7
 8010640:	bd80      	pop	{r7, pc}

08010642 <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEEC1ERS9_PS8_>:
      __allocated_ptr(_Alloc& __a, pointer __ptr) noexcept
 8010642:	b580      	push	{r7, lr}
 8010644:	b084      	sub	sp, #16
 8010646:	af00      	add	r7, sp, #0
 8010648:	60f8      	str	r0, [r7, #12]
 801064a:	60b9      	str	r1, [r7, #8]
 801064c:	607a      	str	r2, [r7, #4]
      : _M_alloc(std::__addressof(__a)), _M_ptr(__ptr)
 801064e:	68b8      	ldr	r0, [r7, #8]
 8010650:	f000 f82b 	bl	80106aa <_ZSt11__addressofISaISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEEPT_RSA_>
 8010654:	4602      	mov	r2, r0
 8010656:	68fb      	ldr	r3, [r7, #12]
 8010658:	601a      	str	r2, [r3, #0]
 801065a:	68fb      	ldr	r3, [r7, #12]
 801065c:	687a      	ldr	r2, [r7, #4]
 801065e:	605a      	str	r2, [r3, #4]
      { }
 8010660:	68fb      	ldr	r3, [r7, #12]
 8010662:	4618      	mov	r0, r3
 8010664:	3710      	adds	r7, #16
 8010666:	46bd      	mov	sp, r7
 8010668:	bd80      	pop	{r7, pc}

0801066a <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEED1Ev>:
      ~__allocated_ptr()
 801066a:	b580      	push	{r7, lr}
 801066c:	b082      	sub	sp, #8
 801066e:	af00      	add	r7, sp, #0
 8010670:	6078      	str	r0, [r7, #4]
	if (_M_ptr != nullptr)
 8010672:	687b      	ldr	r3, [r7, #4]
 8010674:	685b      	ldr	r3, [r3, #4]
 8010676:	2b00      	cmp	r3, #0
 8010678:	d007      	beq.n	801068a <_ZNSt15__allocated_ptrISaISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEED1Ev+0x20>
	  std::allocator_traits<_Alloc>::deallocate(*_M_alloc, _M_ptr, 1);
 801067a:	687b      	ldr	r3, [r7, #4]
 801067c:	6818      	ldr	r0, [r3, #0]
 801067e:	687b      	ldr	r3, [r7, #4]
 8010680:	685b      	ldr	r3, [r3, #4]
 8010682:	2201      	movs	r2, #1
 8010684:	4619      	mov	r1, r3
 8010686:	f000 f81b 	bl	80106c0 <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEE10deallocateERS9_PS8_j>
      }
 801068a:	687b      	ldr	r3, [r7, #4]
 801068c:	4618      	mov	r0, r3
 801068e:	3708      	adds	r7, #8
 8010690:	46bd      	mov	sp, r7
 8010692:	bd80      	pop	{r7, pc}

08010694 <_ZNSt14_Sp_ebo_helperILi0ESt14default_deleteI7StepgenELb1EE6_S_getERS3_>:
      _S_get(_Sp_ebo_helper& __eboh) { return static_cast<_Tp&>(__eboh); }
 8010694:	b480      	push	{r7}
 8010696:	b083      	sub	sp, #12
 8010698:	af00      	add	r7, sp, #0
 801069a:	6078      	str	r0, [r7, #4]
 801069c:	687b      	ldr	r3, [r7, #4]
 801069e:	4618      	mov	r0, r3
 80106a0:	370c      	adds	r7, #12
 80106a2:	46bd      	mov	sp, r7
 80106a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106a8:	4770      	bx	lr

080106aa <_ZSt11__addressofISaISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEEPT_RSA_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 80106aa:	b480      	push	{r7}
 80106ac:	b083      	sub	sp, #12
 80106ae:	af00      	add	r7, sp, #0
 80106b0:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 80106b2:	687b      	ldr	r3, [r7, #4]
 80106b4:	4618      	mov	r0, r3
 80106b6:	370c      	adds	r7, #12
 80106b8:	46bd      	mov	sp, r7
 80106ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106be:	4770      	bx	lr

080106c0 <_ZNSt16allocator_traitsISaISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEEE10deallocateERS9_PS8_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 80106c0:	b580      	push	{r7, lr}
 80106c2:	b084      	sub	sp, #16
 80106c4:	af00      	add	r7, sp, #0
 80106c6:	60f8      	str	r0, [r7, #12]
 80106c8:	60b9      	str	r1, [r7, #8]
 80106ca:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 80106cc:	687a      	ldr	r2, [r7, #4]
 80106ce:	68b9      	ldr	r1, [r7, #8]
 80106d0:	68f8      	ldr	r0, [r7, #12]
 80106d2:	f000 f804 	bl	80106de <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE10deallocateEPS8_j>
 80106d6:	bf00      	nop
 80106d8:	3710      	adds	r7, #16
 80106da:	46bd      	mov	sp, r7
 80106dc:	bd80      	pop	{r7, pc}

080106de <_ZNSt15__new_allocatorISt19_Sp_counted_deleterIP7StepgenSt14default_deleteIS1_ESaIvELN9__gnu_cxx12_Lock_policyE0EEE10deallocateEPS8_j>:
      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
 80106de:	b580      	push	{r7, lr}
 80106e0:	b084      	sub	sp, #16
 80106e2:	af00      	add	r7, sp, #0
 80106e4:	60f8      	str	r0, [r7, #12]
 80106e6:	60b9      	str	r1, [r7, #8]
 80106e8:	607a      	str	r2, [r7, #4]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 80106ea:	687b      	ldr	r3, [r7, #4]
 80106ec:	011b      	lsls	r3, r3, #4
 80106ee:	4619      	mov	r1, r3
 80106f0:	68b8      	ldr	r0, [r7, #8]
 80106f2:	f00d fd42 	bl	801e17a <_ZdlPvj>
      }
 80106f6:	3710      	adds	r7, #16
 80106f8:	46bd      	mov	sp, r7
 80106fa:	bd80      	pop	{r7, pc}

080106fc <__NVIC_SetPriority>:
{
 80106fc:	b480      	push	{r7}
 80106fe:	b083      	sub	sp, #12
 8010700:	af00      	add	r7, sp, #0
 8010702:	4603      	mov	r3, r0
 8010704:	6039      	str	r1, [r7, #0]
 8010706:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8010708:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801070c:	2b00      	cmp	r3, #0
 801070e:	db0a      	blt.n	8010726 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8010710:	683b      	ldr	r3, [r7, #0]
 8010712:	b2da      	uxtb	r2, r3
 8010714:	490c      	ldr	r1, [pc, #48]	@ (8010748 <__NVIC_SetPriority+0x4c>)
 8010716:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801071a:	0112      	lsls	r2, r2, #4
 801071c:	b2d2      	uxtb	r2, r2
 801071e:	440b      	add	r3, r1
 8010720:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8010724:	e00a      	b.n	801073c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8010726:	683b      	ldr	r3, [r7, #0]
 8010728:	b2da      	uxtb	r2, r3
 801072a:	4908      	ldr	r1, [pc, #32]	@ (801074c <__NVIC_SetPriority+0x50>)
 801072c:	88fb      	ldrh	r3, [r7, #6]
 801072e:	f003 030f 	and.w	r3, r3, #15
 8010732:	3b04      	subs	r3, #4
 8010734:	0112      	lsls	r2, r2, #4
 8010736:	b2d2      	uxtb	r2, r2
 8010738:	440b      	add	r3, r1
 801073a:	761a      	strb	r2, [r3, #24]
}
 801073c:	bf00      	nop
 801073e:	370c      	adds	r7, #12
 8010740:	46bd      	mov	sp, r7
 8010742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010746:	4770      	bx	lr
 8010748:	e000e100 	.word	0xe000e100
 801074c:	e000ed00 	.word	0xe000ed00

08010750 <_ZStanSt12memory_orderSt23__memory_order_modifier>:
    return memory_order(int(__m) | int(__mod));
  }

  constexpr memory_order
  operator&(memory_order __m, __memory_order_modifier __mod)
  {
 8010750:	b480      	push	{r7}
 8010752:	b083      	sub	sp, #12
 8010754:	af00      	add	r7, sp, #0
 8010756:	4603      	mov	r3, r0
 8010758:	6039      	str	r1, [r7, #0]
 801075a:	71fb      	strb	r3, [r7, #7]
    return memory_order(int(__m) & int(__mod));
 801075c:	683b      	ldr	r3, [r7, #0]
 801075e:	b25a      	sxtb	r2, r3
 8010760:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010764:	4013      	ands	r3, r2
 8010766:	b25b      	sxtb	r3, r3
 8010768:	b2db      	uxtb	r3, r3
  }
 801076a:	4618      	mov	r0, r3
 801076c:	370c      	adds	r7, #12
 801076e:	46bd      	mov	sp, r7
 8010770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010774:	4770      	bx	lr

08010776 <_ZNSt6atomicIbEC1Eb>:
    ~atomic() noexcept = default;
    atomic(const atomic&) = delete;
    atomic& operator=(const atomic&) = delete;
    atomic& operator=(const atomic&) volatile = delete;

    constexpr atomic(bool __i) noexcept : _M_base(__i) { }
 8010776:	b580      	push	{r7, lr}
 8010778:	b082      	sub	sp, #8
 801077a:	af00      	add	r7, sp, #0
 801077c:	6078      	str	r0, [r7, #4]
 801077e:	460b      	mov	r3, r1
 8010780:	70fb      	strb	r3, [r7, #3]
 8010782:	687b      	ldr	r3, [r7, #4]
 8010784:	78fa      	ldrb	r2, [r7, #3]
 8010786:	4611      	mov	r1, r2
 8010788:	4618      	mov	r0, r3
 801078a:	f000 fa2e 	bl	8010bea <_ZNSt13__atomic_baseIbEC1Eb>
 801078e:	687b      	ldr	r3, [r7, #4]
 8010790:	4618      	mov	r0, r3
 8010792:	3708      	adds	r7, #8
 8010794:	46bd      	mov	sp, r7
 8010796:	bd80      	pop	{r7, pc}

08010798 <_ZNSt6atomicIbE5storeEbSt12memory_order>:
#if __cplusplus >= 201703L
    static constexpr bool is_always_lock_free = ATOMIC_BOOL_LOCK_FREE == 2;
#endif

    void
    store(bool __i, memory_order __m = memory_order_seq_cst) noexcept
 8010798:	b580      	push	{r7, lr}
 801079a:	b084      	sub	sp, #16
 801079c:	af00      	add	r7, sp, #0
 801079e:	6078      	str	r0, [r7, #4]
 80107a0:	460b      	mov	r3, r1
 80107a2:	70fb      	strb	r3, [r7, #3]
 80107a4:	4613      	mov	r3, r2
 80107a6:	70bb      	strb	r3, [r7, #2]
    { _M_base.store(__i, __m); }
 80107a8:	687b      	ldr	r3, [r7, #4]
 80107aa:	60fb      	str	r3, [r7, #12]
 80107ac:	78fb      	ldrb	r3, [r7, #3]
 80107ae:	72fb      	strb	r3, [r7, #11]
 80107b0:	78bb      	ldrb	r3, [r7, #2]
 80107b2:	72bb      	strb	r3, [r7, #10]

      _GLIBCXX_ALWAYS_INLINE void
      store(__int_type __i, memory_order __m = memory_order_seq_cst) noexcept
      {
	memory_order __b __attribute__ ((__unused__))
	  = __m & __memory_order_mask;
 80107b4:	7abb      	ldrb	r3, [r7, #10]
 80107b6:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80107ba:	4618      	mov	r0, r3
 80107bc:	f7ff ffc8 	bl	8010750 <_ZStanSt12memory_orderSt23__memory_order_modifier>
 80107c0:	4603      	mov	r3, r0
 80107c2:	727b      	strb	r3, [r7, #9]
	__glibcxx_assert(__b != memory_order_acquire);
 80107c4:	f7f1 febe 	bl	8002544 <_ZSt23__is_constant_evaluatedv>
 80107c8:	4603      	mov	r3, r0
 80107ca:	2b00      	cmp	r3, #0
 80107cc:	d004      	beq.n	80107d8 <_ZNSt6atomicIbE5storeEbSt12memory_order+0x40>
 80107ce:	7a7b      	ldrb	r3, [r7, #9]
 80107d0:	2b02      	cmp	r3, #2
 80107d2:	d101      	bne.n	80107d8 <_ZNSt6atomicIbE5storeEbSt12memory_order+0x40>
 80107d4:	2301      	movs	r3, #1
 80107d6:	e000      	b.n	80107da <_ZNSt6atomicIbE5storeEbSt12memory_order+0x42>
 80107d8:	2300      	movs	r3, #0
 80107da:	2b00      	cmp	r3, #0
	__glibcxx_assert(__b != memory_order_acq_rel);
 80107dc:	f7f1 feb2 	bl	8002544 <_ZSt23__is_constant_evaluatedv>
 80107e0:	4603      	mov	r3, r0
 80107e2:	2b00      	cmp	r3, #0
 80107e4:	d004      	beq.n	80107f0 <_ZNSt6atomicIbE5storeEbSt12memory_order+0x58>
 80107e6:	7a7b      	ldrb	r3, [r7, #9]
 80107e8:	2b04      	cmp	r3, #4
 80107ea:	d101      	bne.n	80107f0 <_ZNSt6atomicIbE5storeEbSt12memory_order+0x58>
 80107ec:	2301      	movs	r3, #1
 80107ee:	e000      	b.n	80107f2 <_ZNSt6atomicIbE5storeEbSt12memory_order+0x5a>
 80107f0:	2300      	movs	r3, #0
 80107f2:	2b00      	cmp	r3, #0
	__glibcxx_assert(__b != memory_order_consume);
 80107f4:	f7f1 fea6 	bl	8002544 <_ZSt23__is_constant_evaluatedv>
 80107f8:	4603      	mov	r3, r0
 80107fa:	2b00      	cmp	r3, #0
 80107fc:	d004      	beq.n	8010808 <_ZNSt6atomicIbE5storeEbSt12memory_order+0x70>
 80107fe:	7a7b      	ldrb	r3, [r7, #9]
 8010800:	2b01      	cmp	r3, #1
 8010802:	d101      	bne.n	8010808 <_ZNSt6atomicIbE5storeEbSt12memory_order+0x70>
 8010804:	2301      	movs	r3, #1
 8010806:	e000      	b.n	801080a <_ZNSt6atomicIbE5storeEbSt12memory_order+0x72>
 8010808:	2300      	movs	r3, #0
 801080a:	2b00      	cmp	r3, #0

	__atomic_store_n(&_M_i, __i, int(__m));
 801080c:	68fb      	ldr	r3, [r7, #12]
 801080e:	7afa      	ldrb	r2, [r7, #11]
 8010810:	f3bf 8f5b 	dmb	ish
 8010814:	701a      	strb	r2, [r3, #0]
 8010816:	f3bf 8f5b 	dmb	ish
      }
 801081a:	bf00      	nop
 801081c:	bf00      	nop
 801081e:	3710      	adds	r7, #16
 8010820:	46bd      	mov	sp, r7
 8010822:	bd80      	pop	{r7, pc}

08010824 <_ZNKSt6atomicIbE4loadESt12memory_order>:
    void
    store(bool __i, memory_order __m = memory_order_seq_cst) volatile noexcept
    { _M_base.store(__i, __m); }

    bool
    load(memory_order __m = memory_order_seq_cst) const noexcept
 8010824:	b580      	push	{r7, lr}
 8010826:	b084      	sub	sp, #16
 8010828:	af00      	add	r7, sp, #0
 801082a:	6078      	str	r0, [r7, #4]
 801082c:	460b      	mov	r3, r1
 801082e:	70fb      	strb	r3, [r7, #3]
    { return _M_base.load(__m); }
 8010830:	687b      	ldr	r3, [r7, #4]
 8010832:	60fb      	str	r3, [r7, #12]
 8010834:	78fb      	ldrb	r3, [r7, #3]
 8010836:	72fb      	strb	r3, [r7, #11]

      _GLIBCXX_ALWAYS_INLINE __int_type
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	memory_order __b __attribute__ ((__unused__))
	  = __m & __memory_order_mask;
 8010838:	7afb      	ldrb	r3, [r7, #11]
 801083a:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 801083e:	4618      	mov	r0, r3
 8010840:	f7ff ff86 	bl	8010750 <_ZStanSt12memory_orderSt23__memory_order_modifier>
 8010844:	4603      	mov	r3, r0
 8010846:	72bb      	strb	r3, [r7, #10]
	__glibcxx_assert(__b != memory_order_release);
 8010848:	f7f1 fe7c 	bl	8002544 <_ZSt23__is_constant_evaluatedv>
 801084c:	4603      	mov	r3, r0
 801084e:	2b00      	cmp	r3, #0
 8010850:	d004      	beq.n	801085c <_ZNKSt6atomicIbE4loadESt12memory_order+0x38>
 8010852:	7abb      	ldrb	r3, [r7, #10]
 8010854:	2b03      	cmp	r3, #3
 8010856:	d101      	bne.n	801085c <_ZNKSt6atomicIbE4loadESt12memory_order+0x38>
 8010858:	2301      	movs	r3, #1
 801085a:	e000      	b.n	801085e <_ZNKSt6atomicIbE4loadESt12memory_order+0x3a>
 801085c:	2300      	movs	r3, #0
 801085e:	2b00      	cmp	r3, #0
	__glibcxx_assert(__b != memory_order_acq_rel);
 8010860:	f7f1 fe70 	bl	8002544 <_ZSt23__is_constant_evaluatedv>
 8010864:	4603      	mov	r3, r0
 8010866:	2b00      	cmp	r3, #0
 8010868:	d004      	beq.n	8010874 <_ZNKSt6atomicIbE4loadESt12memory_order+0x50>
 801086a:	7abb      	ldrb	r3, [r7, #10]
 801086c:	2b04      	cmp	r3, #4
 801086e:	d101      	bne.n	8010874 <_ZNKSt6atomicIbE4loadESt12memory_order+0x50>
 8010870:	2301      	movs	r3, #1
 8010872:	e000      	b.n	8010876 <_ZNKSt6atomicIbE4loadESt12memory_order+0x52>
 8010874:	2300      	movs	r3, #0
 8010876:	2b00      	cmp	r3, #0

	return __atomic_load_n(&_M_i, int(__m));
 8010878:	68fb      	ldr	r3, [r7, #12]
 801087a:	f3bf 8f5b 	dmb	ish
 801087e:	781b      	ldrb	r3, [r3, #0]
 8010880:	f3bf 8f5b 	dmb	ish
 8010884:	b2db      	uxtb	r3, r3
 8010886:	2b00      	cmp	r3, #0
 8010888:	bf14      	ite	ne
 801088a:	2301      	movne	r3, #1
 801088c:	2300      	moveq	r3, #0
 801088e:	b2db      	uxtb	r3, r3
 8010890:	4618      	mov	r0, r3
 8010892:	3710      	adds	r7, #16
 8010894:	46bd      	mov	sp, r7
 8010896:	bd80      	pop	{r7, pc}

08010898 <_ZN9pruThread16setThreadRunningEb>:
    atomic<bool> threadPaused{false};

    vector<shared_ptr<Module>> modules;
    vector<shared_ptr<Module>> modulesPost;

    void setThreadRunning(bool val) { threadRunning.store(val, std::memory_order_release); }
 8010898:	b580      	push	{r7, lr}
 801089a:	b082      	sub	sp, #8
 801089c:	af00      	add	r7, sp, #0
 801089e:	6078      	str	r0, [r7, #4]
 80108a0:	460b      	mov	r3, r1
 80108a2:	70fb      	strb	r3, [r7, #3]
 80108a4:	687b      	ldr	r3, [r7, #4]
 80108a6:	3329      	adds	r3, #41	@ 0x29
 80108a8:	78f9      	ldrb	r1, [r7, #3]
 80108aa:	2203      	movs	r2, #3
 80108ac:	4618      	mov	r0, r3
 80108ae:	f7ff ff73 	bl	8010798 <_ZNSt6atomicIbE5storeEbSt12memory_order>
 80108b2:	bf00      	nop
 80108b4:	3708      	adds	r7, #8
 80108b6:	46bd      	mov	sp, r7
 80108b8:	bd80      	pop	{r7, pc}

080108ba <_ZN9pruThread15setThreadPausedEb>:
    void setThreadPaused(bool val) { threadPaused.store(val, std::memory_order_release); }
 80108ba:	b580      	push	{r7, lr}
 80108bc:	b082      	sub	sp, #8
 80108be:	af00      	add	r7, sp, #0
 80108c0:	6078      	str	r0, [r7, #4]
 80108c2:	460b      	mov	r3, r1
 80108c4:	70fb      	strb	r3, [r7, #3]
 80108c6:	687b      	ldr	r3, [r7, #4]
 80108c8:	332a      	adds	r3, #42	@ 0x2a
 80108ca:	78f9      	ldrb	r1, [r7, #3]
 80108cc:	2203      	movs	r2, #3
 80108ce:	4618      	mov	r0, r3
 80108d0:	f7ff ff62 	bl	8010798 <_ZNSt6atomicIbE5storeEbSt12memory_order>
 80108d4:	bf00      	nop
 80108d6:	3708      	adds	r7, #8
 80108d8:	46bd      	mov	sp, r7
 80108da:	bd80      	pop	{r7, pc}

080108dc <_ZNK9pruThread9isRunningEv>:
	pruThread(const string& _name, TIM_TypeDef *_timer, IRQn_Type _irq, uint32_t _freq, uint8_t _prio);

	bool registerModule(shared_ptr<Module> module);
	bool registerModulePost(shared_ptr<Module> module);

    [[nodiscard]] bool isRunning() const { return threadRunning.load(std::memory_order_acquire);  }
 80108dc:	b580      	push	{r7, lr}
 80108de:	b082      	sub	sp, #8
 80108e0:	af00      	add	r7, sp, #0
 80108e2:	6078      	str	r0, [r7, #4]
 80108e4:	687b      	ldr	r3, [r7, #4]
 80108e6:	3329      	adds	r3, #41	@ 0x29
 80108e8:	2102      	movs	r1, #2
 80108ea:	4618      	mov	r0, r3
 80108ec:	f7ff ff9a 	bl	8010824 <_ZNKSt6atomicIbE4loadESt12memory_order>
 80108f0:	4603      	mov	r3, r0
 80108f2:	4618      	mov	r0, r3
 80108f4:	3708      	adds	r7, #8
 80108f6:	46bd      	mov	sp, r7
 80108f8:	bd80      	pop	{r7, pc}

080108fa <_ZNK9pruThread8isPausedEv>:
    [[nodiscard]] bool isPaused() const { return threadPaused.load(std::memory_order_acquire); }
 80108fa:	b580      	push	{r7, lr}
 80108fc:	b082      	sub	sp, #8
 80108fe:	af00      	add	r7, sp, #0
 8010900:	6078      	str	r0, [r7, #4]
 8010902:	687b      	ldr	r3, [r7, #4]
 8010904:	332a      	adds	r3, #42	@ 0x2a
 8010906:	2102      	movs	r1, #2
 8010908:	4618      	mov	r0, r3
 801090a:	f7ff ff8b 	bl	8010824 <_ZNKSt6atomicIbE4loadESt12memory_order>
 801090e:	4603      	mov	r3, r0
 8010910:	4618      	mov	r0, r3
 8010912:	3708      	adds	r7, #8
 8010914:	46bd      	mov	sp, r7
 8010916:	bd80      	pop	{r7, pc}

08010918 <_ZNSt12_Vector_baseISt10shared_ptrI6ModuleESaIS2_EEC1Ev>:
      _Vector_base() = default;
 8010918:	b580      	push	{r7, lr}
 801091a:	b082      	sub	sp, #8
 801091c:	af00      	add	r7, sp, #0
 801091e:	6078      	str	r0, [r7, #4]
 8010920:	687b      	ldr	r3, [r7, #4]
 8010922:	4618      	mov	r0, r3
 8010924:	f000 f971 	bl	8010c0a <_ZNSt12_Vector_baseISt10shared_ptrI6ModuleESaIS2_EE12_Vector_implC1Ev>
 8010928:	687b      	ldr	r3, [r7, #4]
 801092a:	4618      	mov	r0, r3
 801092c:	3708      	adds	r7, #8
 801092e:	46bd      	mov	sp, r7
 8010930:	bd80      	pop	{r7, pc}

08010932 <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EEC1Ev>:
      vector() = default;
 8010932:	b580      	push	{r7, lr}
 8010934:	b082      	sub	sp, #8
 8010936:	af00      	add	r7, sp, #0
 8010938:	6078      	str	r0, [r7, #4]
 801093a:	687b      	ldr	r3, [r7, #4]
 801093c:	4618      	mov	r0, r3
 801093e:	f7ff ffeb 	bl	8010918 <_ZNSt12_Vector_baseISt10shared_ptrI6ModuleESaIS2_EEC1Ev>
 8010942:	687b      	ldr	r3, [r7, #4]
 8010944:	4618      	mov	r0, r3
 8010946:	3708      	adds	r7, #8
 8010948:	46bd      	mov	sp, r7
 801094a:	bd80      	pop	{r7, pc}

0801094c <_ZN9pruThreadC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP11TIM_TypeDef9IRQn_Typemh>:

#include "pruThread.h"
#include "../modules/module.h"


pruThread::pruThread(const string& _name, TIM_TypeDef *_timer, IRQn_Type _irq, uint32_t _freq, uint8_t _prio)
 801094c:	b580      	push	{r7, lr}
 801094e:	b084      	sub	sp, #16
 8010950:	af00      	add	r7, sp, #0
 8010952:	60f8      	str	r0, [r7, #12]
 8010954:	60b9      	str	r1, [r7, #8]
 8010956:	607a      	str	r2, [r7, #4]
 8010958:	807b      	strh	r3, [r7, #2]
    : threadName(_name),
 801095a:	68fb      	ldr	r3, [r7, #12]
 801095c:	68b9      	ldr	r1, [r7, #8]
 801095e:	4618      	mov	r0, r3
 8010960:	f00d fdc9 	bl	801e4f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
      timer(_timer),
 8010964:	68fb      	ldr	r3, [r7, #12]
 8010966:	687a      	ldr	r2, [r7, #4]
 8010968:	619a      	str	r2, [r3, #24]
      irq(_irq),
 801096a:	68fb      	ldr	r3, [r7, #12]
 801096c:	887a      	ldrh	r2, [r7, #2]
 801096e:	839a      	strh	r2, [r3, #28]
      frequency(_freq),
 8010970:	68fb      	ldr	r3, [r7, #12]
 8010972:	69ba      	ldr	r2, [r7, #24]
 8010974:	621a      	str	r2, [r3, #32]
	  hasModulesPost(false)
 8010976:	68fb      	ldr	r3, [r7, #12]
 8010978:	2200      	movs	r2, #0
 801097a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
 801097e:	68fb      	ldr	r3, [r7, #12]
 8010980:	3329      	adds	r3, #41	@ 0x29
 8010982:	2100      	movs	r1, #0
 8010984:	4618      	mov	r0, r3
 8010986:	f7ff fef6 	bl	8010776 <_ZNSt6atomicIbEC1Eb>
 801098a:	68fb      	ldr	r3, [r7, #12]
 801098c:	332a      	adds	r3, #42	@ 0x2a
 801098e:	2100      	movs	r1, #0
 8010990:	4618      	mov	r0, r3
 8010992:	f7ff fef0 	bl	8010776 <_ZNSt6atomicIbEC1Eb>
 8010996:	68fb      	ldr	r3, [r7, #12]
 8010998:	332c      	adds	r3, #44	@ 0x2c
 801099a:	4618      	mov	r0, r3
 801099c:	f7ff ffc9 	bl	8010932 <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EEC1Ev>
 80109a0:	68fb      	ldr	r3, [r7, #12]
 80109a2:	3338      	adds	r3, #56	@ 0x38
 80109a4:	4618      	mov	r0, r3
 80109a6:	f7ff ffc4 	bl	8010932 <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EEC1Ev>
{
	printf("Creating %s thread at %lu hz\n", threadName.c_str(), (unsigned long)frequency);
 80109aa:	68fb      	ldr	r3, [r7, #12]
 80109ac:	4618      	mov	r0, r3
 80109ae:	f00d fd83 	bl	801e4b8 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 80109b2:	4601      	mov	r1, r0
 80109b4:	68fb      	ldr	r3, [r7, #12]
 80109b6:	6a1b      	ldr	r3, [r3, #32]
 80109b8:	461a      	mov	r2, r3
 80109ba:	4808      	ldr	r0, [pc, #32]	@ (80109dc <_ZN9pruThreadC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP11TIM_TypeDef9IRQn_Typemh+0x90>)
 80109bc:	f00d ff72 	bl	801e8a4 <iprintf>
    NVIC_SetPriority(irq, _prio);
 80109c0:	68fb      	ldr	r3, [r7, #12]
 80109c2:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 80109c6:	7f3a      	ldrb	r2, [r7, #28]
 80109c8:	4611      	mov	r1, r2
 80109ca:	4618      	mov	r0, r3
 80109cc:	f7ff fe96 	bl	80106fc <__NVIC_SetPriority>
}
 80109d0:	68fb      	ldr	r3, [r7, #12]
 80109d2:	4618      	mov	r0, r3
 80109d4:	3710      	adds	r7, #16
 80109d6:	46bd      	mov	sp, r7
 80109d8:	bd80      	pop	{r7, pc}
 80109da:	bf00      	nop
 80109dc:	08020324 	.word	0x08020324

080109e0 <_ZN9pruThread14executeModulesEv>:


bool pruThread::executeModules() {
 80109e0:	b580      	push	{r7, lr}
 80109e2:	b08a      	sub	sp, #40	@ 0x28
 80109e4:	af00      	add	r7, sp, #0
 80109e6:	6078      	str	r0, [r7, #4]
    for (const auto& module : modules) {
 80109e8:	687b      	ldr	r3, [r7, #4]
 80109ea:	332c      	adds	r3, #44	@ 0x2c
 80109ec:	627b      	str	r3, [r7, #36]	@ 0x24
 80109ee:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80109f0:	f000 f91b 	bl	8010c2a <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE5beginEv>
 80109f4:	4603      	mov	r3, r0
 80109f6:	617b      	str	r3, [r7, #20]
 80109f8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80109fa:	f000 f926 	bl	8010c4a <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE3endEv>
 80109fe:	4603      	mov	r3, r0
 8010a00:	613b      	str	r3, [r7, #16]
 8010a02:	e018      	b.n	8010a36 <_ZN9pruThread14executeModulesEv+0x56>
 8010a04:	f107 0314 	add.w	r3, r7, #20
 8010a08:	4618      	mov	r0, r3
 8010a0a:	f000 f958 	bl	8010cbe <_ZNK9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEdeEv>
 8010a0e:	61b8      	str	r0, [r7, #24]
        if (module) {
 8010a10:	69bb      	ldr	r3, [r7, #24]
 8010a12:	4618      	mov	r0, r3
 8010a14:	f000 f95f 	bl	8010cd6 <_ZNKSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EEcvbEv>
 8010a18:	4603      	mov	r3, r0
 8010a1a:	2b00      	cmp	r3, #0
 8010a1c:	d006      	beq.n	8010a2c <_ZN9pruThread14executeModulesEv+0x4c>
            module->runModule();
 8010a1e:	69b8      	ldr	r0, [r7, #24]
 8010a20:	f7f9 fa9e 	bl	8009f60 <_ZNKSt19__shared_ptr_accessI6ModuleLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 8010a24:	4603      	mov	r3, r0
 8010a26:	4618      	mov	r0, r3
 8010a28:	f7fd fb2c 	bl	800e084 <_ZN6Module9runModuleEv>
    for (const auto& module : modules) {
 8010a2c:	f107 0314 	add.w	r3, r7, #20
 8010a30:	4618      	mov	r0, r3
 8010a32:	f000 f933 	bl	8010c9c <_ZN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEppEv>
 8010a36:	f107 0210 	add.w	r2, r7, #16
 8010a3a:	f107 0314 	add.w	r3, r7, #20
 8010a3e:	4611      	mov	r1, r2
 8010a40:	4618      	mov	r0, r3
 8010a42:	f000 f913 	bl	8010c6c <_ZN9__gnu_cxxneIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEEbRKNS_17__normal_iteratorIT_T0_EESD_>
 8010a46:	4603      	mov	r3, r0
 8010a48:	2b00      	cmp	r3, #0
 8010a4a:	d1db      	bne.n	8010a04 <_ZN9pruThread14executeModulesEv+0x24>
        }
    }

    if (hasModulesPost) {
 8010a4c:	687b      	ldr	r3, [r7, #4]
 8010a4e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8010a52:	2b00      	cmp	r3, #0
 8010a54:	d031      	beq.n	8010aba <_ZN9pruThread14executeModulesEv+0xda>
		for (const auto& module : modulesPost) {
 8010a56:	687b      	ldr	r3, [r7, #4]
 8010a58:	3338      	adds	r3, #56	@ 0x38
 8010a5a:	623b      	str	r3, [r7, #32]
 8010a5c:	6a38      	ldr	r0, [r7, #32]
 8010a5e:	f000 f8e4 	bl	8010c2a <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE5beginEv>
 8010a62:	4603      	mov	r3, r0
 8010a64:	60fb      	str	r3, [r7, #12]
 8010a66:	6a38      	ldr	r0, [r7, #32]
 8010a68:	f000 f8ef 	bl	8010c4a <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE3endEv>
 8010a6c:	4603      	mov	r3, r0
 8010a6e:	60bb      	str	r3, [r7, #8]
 8010a70:	e018      	b.n	8010aa4 <_ZN9pruThread14executeModulesEv+0xc4>
 8010a72:	f107 030c 	add.w	r3, r7, #12
 8010a76:	4618      	mov	r0, r3
 8010a78:	f000 f921 	bl	8010cbe <_ZNK9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEdeEv>
 8010a7c:	61f8      	str	r0, [r7, #28]
			if (module) {
 8010a7e:	69fb      	ldr	r3, [r7, #28]
 8010a80:	4618      	mov	r0, r3
 8010a82:	f000 f928 	bl	8010cd6 <_ZNKSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EEcvbEv>
 8010a86:	4603      	mov	r3, r0
 8010a88:	2b00      	cmp	r3, #0
 8010a8a:	d006      	beq.n	8010a9a <_ZN9pruThread14executeModulesEv+0xba>
				module->runModule();
 8010a8c:	69f8      	ldr	r0, [r7, #28]
 8010a8e:	f7f9 fa67 	bl	8009f60 <_ZNKSt19__shared_ptr_accessI6ModuleLN9__gnu_cxx12_Lock_policyE0ELb0ELb0EEptEv>
 8010a92:	4603      	mov	r3, r0
 8010a94:	4618      	mov	r0, r3
 8010a96:	f7fd faf5 	bl	800e084 <_ZN6Module9runModuleEv>
		for (const auto& module : modulesPost) {
 8010a9a:	f107 030c 	add.w	r3, r7, #12
 8010a9e:	4618      	mov	r0, r3
 8010aa0:	f000 f8fc 	bl	8010c9c <_ZN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEppEv>
 8010aa4:	f107 0208 	add.w	r2, r7, #8
 8010aa8:	f107 030c 	add.w	r3, r7, #12
 8010aac:	4611      	mov	r1, r2
 8010aae:	4618      	mov	r0, r3
 8010ab0:	f000 f8dc 	bl	8010c6c <_ZN9__gnu_cxxneIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEEbRKNS_17__normal_iteratorIT_T0_EESD_>
 8010ab4:	4603      	mov	r3, r0
 8010ab6:	2b00      	cmp	r3, #0
 8010ab8:	d1db      	bne.n	8010a72 <_ZN9pruThread14executeModulesEv+0x92>
			}
		}
    }

    return true;
 8010aba:	2301      	movs	r3, #1
}
 8010abc:	4618      	mov	r0, r3
 8010abe:	3728      	adds	r7, #40	@ 0x28
 8010ac0:	46bd      	mov	sp, r7
 8010ac2:	bd80      	pop	{r7, pc}

08010ac4 <_ZN9pruThread14registerModuleESt10shared_ptrI6ModuleE>:

bool pruThread::registerModule(shared_ptr<Module> module) {
 8010ac4:	b580      	push	{r7, lr}
 8010ac6:	b082      	sub	sp, #8
 8010ac8:	af00      	add	r7, sp, #0
 8010aca:	6078      	str	r0, [r7, #4]
 8010acc:	6039      	str	r1, [r7, #0]
    if (!module) {
 8010ace:	683b      	ldr	r3, [r7, #0]
 8010ad0:	4618      	mov	r0, r3
 8010ad2:	f000 f900 	bl	8010cd6 <_ZNKSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EEcvbEv>
 8010ad6:	4603      	mov	r3, r0
 8010ad8:	f083 0301 	eor.w	r3, r3, #1
 8010adc:	b2db      	uxtb	r3, r3
 8010ade:	2b00      	cmp	r3, #0
 8010ae0:	d001      	beq.n	8010ae6 <_ZN9pruThread14registerModuleESt10shared_ptrI6ModuleE+0x22>
        return false;
 8010ae2:	2300      	movs	r3, #0
 8010ae4:	e006      	b.n	8010af4 <_ZN9pruThread14registerModuleESt10shared_ptrI6ModuleE+0x30>
    }
    modules.push_back(module);
 8010ae6:	687b      	ldr	r3, [r7, #4]
 8010ae8:	332c      	adds	r3, #44	@ 0x2c
 8010aea:	6839      	ldr	r1, [r7, #0]
 8010aec:	4618      	mov	r0, r3
 8010aee:	f000 f903 	bl	8010cf8 <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE9push_backERKS2_>
    return true;
 8010af2:	2301      	movs	r3, #1
}
 8010af4:	4618      	mov	r0, r3
 8010af6:	3708      	adds	r7, #8
 8010af8:	46bd      	mov	sp, r7
 8010afa:	bd80      	pop	{r7, pc}

08010afc <_ZN9pruThread18registerModulePostESt10shared_ptrI6ModuleE>:

bool pruThread::registerModulePost(shared_ptr<Module> module) {
 8010afc:	b580      	push	{r7, lr}
 8010afe:	b082      	sub	sp, #8
 8010b00:	af00      	add	r7, sp, #0
 8010b02:	6078      	str	r0, [r7, #4]
 8010b04:	6039      	str	r1, [r7, #0]
    if (!module) {
 8010b06:	683b      	ldr	r3, [r7, #0]
 8010b08:	4618      	mov	r0, r3
 8010b0a:	f000 f8e4 	bl	8010cd6 <_ZNKSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EEcvbEv>
 8010b0e:	4603      	mov	r3, r0
 8010b10:	f083 0301 	eor.w	r3, r3, #1
 8010b14:	b2db      	uxtb	r3, r3
 8010b16:	2b00      	cmp	r3, #0
 8010b18:	d001      	beq.n	8010b1e <_ZN9pruThread18registerModulePostESt10shared_ptrI6ModuleE+0x22>
        return false;
 8010b1a:	2300      	movs	r3, #0
 8010b1c:	e00a      	b.n	8010b34 <_ZN9pruThread18registerModulePostESt10shared_ptrI6ModuleE+0x38>
    }
    hasModulesPost = true;
 8010b1e:	687b      	ldr	r3, [r7, #4]
 8010b20:	2201      	movs	r2, #1
 8010b22:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
    modulesPost.push_back(module);
 8010b26:	687b      	ldr	r3, [r7, #4]
 8010b28:	3338      	adds	r3, #56	@ 0x38
 8010b2a:	6839      	ldr	r1, [r7, #0]
 8010b2c:	4618      	mov	r0, r3
 8010b2e:	f000 f8e3 	bl	8010cf8 <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE9push_backERKS2_>
    return true;
 8010b32:	2301      	movs	r3, #1
}
 8010b34:	4618      	mov	r0, r3
 8010b36:	3708      	adds	r7, #8
 8010b38:	46bd      	mov	sp, r7
 8010b3a:	bd80      	pop	{r7, pc}

08010b3c <_ZN9pruThread11startThreadEv>:

// For baremetal, this is just initialization
bool pruThread::startThread() {
 8010b3c:	b590      	push	{r4, r7, lr}
 8010b3e:	b085      	sub	sp, #20
 8010b40:	af02      	add	r7, sp, #8
 8010b42:	6078      	str	r0, [r7, #4]
    if (isRunning()) {
 8010b44:	6878      	ldr	r0, [r7, #4]
 8010b46:	f7ff fec9 	bl	80108dc <_ZNK9pruThread9isRunningEv>
 8010b4a:	4603      	mov	r3, r0
 8010b4c:	2b00      	cmp	r3, #0
 8010b4e:	d001      	beq.n	8010b54 <_ZN9pruThread11startThreadEv+0x18>
        return true;
 8010b50:	2301      	movs	r3, #1
 8010b52:	e01c      	b.n	8010b8e <_ZN9pruThread11startThreadEv+0x52>
    }

    setThreadRunning(true);
 8010b54:	2101      	movs	r1, #1
 8010b56:	6878      	ldr	r0, [r7, #4]
 8010b58:	f7ff fe9e 	bl	8010898 <_ZN9pruThread16setThreadRunningEb>
    setThreadPaused(false);
 8010b5c:	2100      	movs	r1, #0
 8010b5e:	6878      	ldr	r0, [r7, #4]
 8010b60:	f7ff feab 	bl	80108ba <_ZN9pruThread15setThreadPausedEb>

    timerPtr = new pruTimer(timer, irq, frequency, this);
 8010b64:	2014      	movs	r0, #20
 8010b66:	f00d fb19 	bl	801e19c <_Znwj>
 8010b6a:	4603      	mov	r3, r0
 8010b6c:	461c      	mov	r4, r3
 8010b6e:	687b      	ldr	r3, [r7, #4]
 8010b70:	6999      	ldr	r1, [r3, #24]
 8010b72:	687b      	ldr	r3, [r7, #4]
 8010b74:	f9b3 201c 	ldrsh.w	r2, [r3, #28]
 8010b78:	687b      	ldr	r3, [r7, #4]
 8010b7a:	6a18      	ldr	r0, [r3, #32]
 8010b7c:	687b      	ldr	r3, [r7, #4]
 8010b7e:	9300      	str	r3, [sp, #0]
 8010b80:	4603      	mov	r3, r0
 8010b82:	4620      	mov	r0, r4
 8010b84:	f000 fc4a 	bl	801141c <_ZN8pruTimerC1EP11TIM_TypeDef9IRQn_TypemP9pruThread>
 8010b88:	687b      	ldr	r3, [r7, #4]
 8010b8a:	625c      	str	r4, [r3, #36]	@ 0x24
    return true;
 8010b8c:	2301      	movs	r3, #1
}
 8010b8e:	4618      	mov	r0, r3
 8010b90:	370c      	adds	r7, #12
 8010b92:	46bd      	mov	sp, r7
 8010b94:	bd90      	pop	{r4, r7, pc}

08010b96 <_ZN9pruThread6updateEv>:
    setThreadRunning(false);
    setThreadPaused(false);
}

// This is the main function that should be called periodically
bool pruThread::update() {
 8010b96:	b580      	push	{r7, lr}
 8010b98:	b082      	sub	sp, #8
 8010b9a:	af00      	add	r7, sp, #0
 8010b9c:	6078      	str	r0, [r7, #4]
    if (!isRunning() || isPaused()) {
 8010b9e:	6878      	ldr	r0, [r7, #4]
 8010ba0:	f7ff fe9c 	bl	80108dc <_ZNK9pruThread9isRunningEv>
 8010ba4:	4603      	mov	r3, r0
 8010ba6:	f083 0301 	eor.w	r3, r3, #1
 8010baa:	b2db      	uxtb	r3, r3
 8010bac:	2b00      	cmp	r3, #0
 8010bae:	d105      	bne.n	8010bbc <_ZN9pruThread6updateEv+0x26>
 8010bb0:	6878      	ldr	r0, [r7, #4]
 8010bb2:	f7ff fea2 	bl	80108fa <_ZNK9pruThread8isPausedEv>
 8010bb6:	4603      	mov	r3, r0
 8010bb8:	2b00      	cmp	r3, #0
 8010bba:	d001      	beq.n	8010bc0 <_ZN9pruThread6updateEv+0x2a>
 8010bbc:	2301      	movs	r3, #1
 8010bbe:	e000      	b.n	8010bc2 <_ZN9pruThread6updateEv+0x2c>
 8010bc0:	2300      	movs	r3, #0
 8010bc2:	2b00      	cmp	r3, #0
 8010bc4:	d001      	beq.n	8010bca <_ZN9pruThread6updateEv+0x34>
        return true;
 8010bc6:	2301      	movs	r3, #1
 8010bc8:	e00b      	b.n	8010be2 <_ZN9pruThread6updateEv+0x4c>
    }

    // Execute all modules
    if (!executeModules()) {
 8010bca:	6878      	ldr	r0, [r7, #4]
 8010bcc:	f7ff ff08 	bl	80109e0 <_ZN9pruThread14executeModulesEv>
 8010bd0:	4603      	mov	r3, r0
 8010bd2:	f083 0301 	eor.w	r3, r3, #1
 8010bd6:	b2db      	uxtb	r3, r3
 8010bd8:	2b00      	cmp	r3, #0
 8010bda:	d001      	beq.n	8010be0 <_ZN9pruThread6updateEv+0x4a>
        return false;
 8010bdc:	2300      	movs	r3, #0
 8010bde:	e000      	b.n	8010be2 <_ZN9pruThread6updateEv+0x4c>
    }

    return true;
 8010be0:	2301      	movs	r3, #1
}
 8010be2:	4618      	mov	r0, r3
 8010be4:	3708      	adds	r7, #8
 8010be6:	46bd      	mov	sp, r7
 8010be8:	bd80      	pop	{r7, pc}

08010bea <_ZNSt13__atomic_baseIbEC1Eb>:
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 8010bea:	b480      	push	{r7}
 8010bec:	b083      	sub	sp, #12
 8010bee:	af00      	add	r7, sp, #0
 8010bf0:	6078      	str	r0, [r7, #4]
 8010bf2:	460b      	mov	r3, r1
 8010bf4:	70fb      	strb	r3, [r7, #3]
 8010bf6:	687b      	ldr	r3, [r7, #4]
 8010bf8:	78fa      	ldrb	r2, [r7, #3]
 8010bfa:	701a      	strb	r2, [r3, #0]
 8010bfc:	687b      	ldr	r3, [r7, #4]
 8010bfe:	4618      	mov	r0, r3
 8010c00:	370c      	adds	r7, #12
 8010c02:	46bd      	mov	sp, r7
 8010c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c08:	4770      	bx	lr

08010c0a <_ZNSt12_Vector_baseISt10shared_ptrI6ModuleESaIS2_EE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 8010c0a:	b580      	push	{r7, lr}
 8010c0c:	b082      	sub	sp, #8
 8010c0e:	af00      	add	r7, sp, #0
 8010c10:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 8010c12:	6878      	ldr	r0, [r7, #4]
 8010c14:	f000 f8a6 	bl	8010d64 <_ZNSaISt10shared_ptrI6ModuleEEC1Ev>
 8010c18:	687b      	ldr	r3, [r7, #4]
 8010c1a:	4618      	mov	r0, r3
 8010c1c:	f000 f8ae 	bl	8010d7c <_ZNSt12_Vector_baseISt10shared_ptrI6ModuleESaIS2_EE17_Vector_impl_dataC1Ev>
	{ }
 8010c20:	687b      	ldr	r3, [r7, #4]
 8010c22:	4618      	mov	r0, r3
 8010c24:	3708      	adds	r7, #8
 8010c26:	46bd      	mov	sp, r7
 8010c28:	bd80      	pop	{r7, pc}

08010c2a <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE5beginEv>:
       *  element in the %vector.  Iteration is done in ordinary
       *  element order.
       */
      _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
      iterator
      begin() _GLIBCXX_NOEXCEPT
 8010c2a:	b580      	push	{r7, lr}
 8010c2c:	b084      	sub	sp, #16
 8010c2e:	af00      	add	r7, sp, #0
 8010c30:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 8010c32:	687a      	ldr	r2, [r7, #4]
 8010c34:	f107 030c 	add.w	r3, r7, #12
 8010c38:	4611      	mov	r1, r2
 8010c3a:	4618      	mov	r0, r3
 8010c3c:	f000 f8b2 	bl	8010da4 <_ZN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEC1ERKS4_>
 8010c40:	68fb      	ldr	r3, [r7, #12]
 8010c42:	4618      	mov	r0, r3
 8010c44:	3710      	adds	r7, #16
 8010c46:	46bd      	mov	sp, r7
 8010c48:	bd80      	pop	{r7, pc}

08010c4a <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE3endEv>:
       *  element in the %vector.  Iteration is done in ordinary
       *  element order.
       */
      _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
      iterator
      end() _GLIBCXX_NOEXCEPT
 8010c4a:	b580      	push	{r7, lr}
 8010c4c:	b084      	sub	sp, #16
 8010c4e:	af00      	add	r7, sp, #0
 8010c50:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 8010c52:	687b      	ldr	r3, [r7, #4]
 8010c54:	1d1a      	adds	r2, r3, #4
 8010c56:	f107 030c 	add.w	r3, r7, #12
 8010c5a:	4611      	mov	r1, r2
 8010c5c:	4618      	mov	r0, r3
 8010c5e:	f000 f8a1 	bl	8010da4 <_ZN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEC1ERKS4_>
 8010c62:	68fb      	ldr	r3, [r7, #12]
 8010c64:	4618      	mov	r0, r3
 8010c66:	3710      	adds	r7, #16
 8010c68:	46bd      	mov	sp, r7
 8010c6a:	bd80      	pop	{r7, pc}

08010c6c <_ZN9__gnu_cxxneIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEEbRKNS_17__normal_iteratorIT_T0_EESD_>:
    { return __lhs.base() != __rhs.base(); }

  template<typename _Iterator, typename _Container>
    _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
    inline bool
    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
 8010c6c:	b590      	push	{r4, r7, lr}
 8010c6e:	b083      	sub	sp, #12
 8010c70:	af00      	add	r7, sp, #0
 8010c72:	6078      	str	r0, [r7, #4]
 8010c74:	6039      	str	r1, [r7, #0]
	       const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() != __rhs.base(); }
 8010c76:	6878      	ldr	r0, [r7, #4]
 8010c78:	f000 f8a4 	bl	8010dc4 <_ZNK9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEE4baseEv>
 8010c7c:	4603      	mov	r3, r0
 8010c7e:	681c      	ldr	r4, [r3, #0]
 8010c80:	6838      	ldr	r0, [r7, #0]
 8010c82:	f000 f89f 	bl	8010dc4 <_ZNK9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEE4baseEv>
 8010c86:	4603      	mov	r3, r0
 8010c88:	681b      	ldr	r3, [r3, #0]
 8010c8a:	429c      	cmp	r4, r3
 8010c8c:	bf14      	ite	ne
 8010c8e:	2301      	movne	r3, #1
 8010c90:	2300      	moveq	r3, #0
 8010c92:	b2db      	uxtb	r3, r3
 8010c94:	4618      	mov	r0, r3
 8010c96:	370c      	adds	r7, #12
 8010c98:	46bd      	mov	sp, r7
 8010c9a:	bd90      	pop	{r4, r7, pc}

08010c9c <_ZN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 8010c9c:	b480      	push	{r7}
 8010c9e:	b083      	sub	sp, #12
 8010ca0:	af00      	add	r7, sp, #0
 8010ca2:	6078      	str	r0, [r7, #4]
	++_M_current;
 8010ca4:	687b      	ldr	r3, [r7, #4]
 8010ca6:	681b      	ldr	r3, [r3, #0]
 8010ca8:	f103 0208 	add.w	r2, r3, #8
 8010cac:	687b      	ldr	r3, [r7, #4]
 8010cae:	601a      	str	r2, [r3, #0]
	return *this;
 8010cb0:	687b      	ldr	r3, [r7, #4]
      }
 8010cb2:	4618      	mov	r0, r3
 8010cb4:	370c      	adds	r7, #12
 8010cb6:	46bd      	mov	sp, r7
 8010cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cbc:	4770      	bx	lr

08010cbe <_ZNK9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8010cbe:	b480      	push	{r7}
 8010cc0:	b083      	sub	sp, #12
 8010cc2:	af00      	add	r7, sp, #0
 8010cc4:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 8010cc6:	687b      	ldr	r3, [r7, #4]
 8010cc8:	681b      	ldr	r3, [r3, #0]
 8010cca:	4618      	mov	r0, r3
 8010ccc:	370c      	adds	r7, #12
 8010cce:	46bd      	mov	sp, r7
 8010cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cd4:	4770      	bx	lr

08010cd6 <_ZNKSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EEcvbEv>:
      explicit operator bool() const noexcept
 8010cd6:	b480      	push	{r7}
 8010cd8:	b083      	sub	sp, #12
 8010cda:	af00      	add	r7, sp, #0
 8010cdc:	6078      	str	r0, [r7, #4]
      { return _M_ptr != nullptr; }
 8010cde:	687b      	ldr	r3, [r7, #4]
 8010ce0:	681b      	ldr	r3, [r3, #0]
 8010ce2:	2b00      	cmp	r3, #0
 8010ce4:	bf14      	ite	ne
 8010ce6:	2301      	movne	r3, #1
 8010ce8:	2300      	moveq	r3, #0
 8010cea:	b2db      	uxtb	r3, r3
 8010cec:	4618      	mov	r0, r3
 8010cee:	370c      	adds	r7, #12
 8010cf0:	46bd      	mov	sp, r7
 8010cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cf6:	4770      	bx	lr

08010cf8 <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE9push_backERKS2_>:
       *  done in constant time if the %vector has preallocated space
       *  available.
       */
      _GLIBCXX20_CONSTEXPR
      void
      push_back(const value_type& __x)
 8010cf8:	b580      	push	{r7, lr}
 8010cfa:	b082      	sub	sp, #8
 8010cfc:	af00      	add	r7, sp, #0
 8010cfe:	6078      	str	r0, [r7, #4]
 8010d00:	6039      	str	r1, [r7, #0]
      {
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8010d02:	687b      	ldr	r3, [r7, #4]
 8010d04:	685a      	ldr	r2, [r3, #4]
 8010d06:	687b      	ldr	r3, [r7, #4]
 8010d08:	689b      	ldr	r3, [r3, #8]
 8010d0a:	429a      	cmp	r2, r3
 8010d0c:	d00d      	beq.n	8010d2a <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE9push_backERKS2_+0x32>
	  {
	    _GLIBCXX_ASAN_ANNOTATE_GROW(1);
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 8010d0e:	6878      	ldr	r0, [r7, #4]
 8010d10:	687b      	ldr	r3, [r7, #4]
 8010d12:	685b      	ldr	r3, [r3, #4]
 8010d14:	683a      	ldr	r2, [r7, #0]
 8010d16:	4619      	mov	r1, r3
 8010d18:	f000 f85f 	bl	8010dda <_ZNSt16allocator_traitsISaISt10shared_ptrI6ModuleEEE9constructIS2_JRKS2_EEEvRS3_PT_DpOT0_>
				     __x);
	    ++this->_M_impl._M_finish;
 8010d1c:	687b      	ldr	r3, [r7, #4]
 8010d1e:	685b      	ldr	r3, [r3, #4]
 8010d20:	f103 0208 	add.w	r2, r3, #8
 8010d24:	687b      	ldr	r3, [r7, #4]
 8010d26:	605a      	str	r2, [r3, #4]
	    _GLIBCXX_ASAN_ANNOTATE_GREW(1);
	  }
	else
	  _M_realloc_insert(end(), __x);
      }
 8010d28:	e008      	b.n	8010d3c <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE9push_backERKS2_+0x44>
	  _M_realloc_insert(end(), __x);
 8010d2a:	6878      	ldr	r0, [r7, #4]
 8010d2c:	f7ff ff8d 	bl	8010c4a <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE3endEv>
 8010d30:	4603      	mov	r3, r0
 8010d32:	683a      	ldr	r2, [r7, #0]
 8010d34:	4619      	mov	r1, r3
 8010d36:	6878      	ldr	r0, [r7, #4]
 8010d38:	f000 f862 	bl	8010e00 <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_>
      }
 8010d3c:	bf00      	nop
 8010d3e:	3708      	adds	r7, #8
 8010d40:	46bd      	mov	sp, r7
 8010d42:	bd80      	pop	{r7, pc}

08010d44 <_ZNKSt6vectorISt10shared_ptrI6ModuleESaIS2_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8010d44:	b480      	push	{r7}
 8010d46:	b083      	sub	sp, #12
 8010d48:	af00      	add	r7, sp, #0
 8010d4a:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8010d4c:	687b      	ldr	r3, [r7, #4]
 8010d4e:	685a      	ldr	r2, [r3, #4]
 8010d50:	687b      	ldr	r3, [r7, #4]
 8010d52:	681b      	ldr	r3, [r3, #0]
 8010d54:	1ad3      	subs	r3, r2, r3
 8010d56:	10db      	asrs	r3, r3, #3
 8010d58:	4618      	mov	r0, r3
 8010d5a:	370c      	adds	r7, #12
 8010d5c:	46bd      	mov	sp, r7
 8010d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d62:	4770      	bx	lr

08010d64 <_ZNSaISt10shared_ptrI6ModuleEEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 8010d64:	b580      	push	{r7, lr}
 8010d66:	b082      	sub	sp, #8
 8010d68:	af00      	add	r7, sp, #0
 8010d6a:	6078      	str	r0, [r7, #4]
 8010d6c:	6878      	ldr	r0, [r7, #4]
 8010d6e:	f000 f8c3 	bl	8010ef8 <_ZNSt15__new_allocatorISt10shared_ptrI6ModuleEEC1Ev>
 8010d72:	687b      	ldr	r3, [r7, #4]
 8010d74:	4618      	mov	r0, r3
 8010d76:	3708      	adds	r7, #8
 8010d78:	46bd      	mov	sp, r7
 8010d7a:	bd80      	pop	{r7, pc}

08010d7c <_ZNSt12_Vector_baseISt10shared_ptrI6ModuleESaIS2_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 8010d7c:	b480      	push	{r7}
 8010d7e:	b083      	sub	sp, #12
 8010d80:	af00      	add	r7, sp, #0
 8010d82:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8010d84:	687b      	ldr	r3, [r7, #4]
 8010d86:	2200      	movs	r2, #0
 8010d88:	601a      	str	r2, [r3, #0]
 8010d8a:	687b      	ldr	r3, [r7, #4]
 8010d8c:	2200      	movs	r2, #0
 8010d8e:	605a      	str	r2, [r3, #4]
 8010d90:	687b      	ldr	r3, [r7, #4]
 8010d92:	2200      	movs	r2, #0
 8010d94:	609a      	str	r2, [r3, #8]
	{ }
 8010d96:	687b      	ldr	r3, [r7, #4]
 8010d98:	4618      	mov	r0, r3
 8010d9a:	370c      	adds	r7, #12
 8010d9c:	46bd      	mov	sp, r7
 8010d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010da2:	4770      	bx	lr

08010da4 <_ZN9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEC1ERKS4_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8010da4:	b480      	push	{r7}
 8010da6:	b083      	sub	sp, #12
 8010da8:	af00      	add	r7, sp, #0
 8010daa:	6078      	str	r0, [r7, #4]
 8010dac:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8010dae:	683b      	ldr	r3, [r7, #0]
 8010db0:	681a      	ldr	r2, [r3, #0]
 8010db2:	687b      	ldr	r3, [r7, #4]
 8010db4:	601a      	str	r2, [r3, #0]
 8010db6:	687b      	ldr	r3, [r7, #4]
 8010db8:	4618      	mov	r0, r3
 8010dba:	370c      	adds	r7, #12
 8010dbc:	46bd      	mov	sp, r7
 8010dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dc2:	4770      	bx	lr

08010dc4 <_ZNK9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 8010dc4:	b480      	push	{r7}
 8010dc6:	b083      	sub	sp, #12
 8010dc8:	af00      	add	r7, sp, #0
 8010dca:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8010dcc:	687b      	ldr	r3, [r7, #4]
 8010dce:	4618      	mov	r0, r3
 8010dd0:	370c      	adds	r7, #12
 8010dd2:	46bd      	mov	sp, r7
 8010dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dd8:	4770      	bx	lr

08010dda <_ZNSt16allocator_traitsISaISt10shared_ptrI6ModuleEEE9constructIS2_JRKS2_EEEvRS3_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 8010dda:	b580      	push	{r7, lr}
 8010ddc:	b084      	sub	sp, #16
 8010dde:	af00      	add	r7, sp, #0
 8010de0:	60f8      	str	r0, [r7, #12]
 8010de2:	60b9      	str	r1, [r7, #8]
 8010de4:	607a      	str	r2, [r7, #4]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 8010de6:	6878      	ldr	r0, [r7, #4]
 8010de8:	f000 f891 	bl	8010f0e <_ZSt7forwardIRKSt10shared_ptrI6ModuleEEOT_RNSt16remove_referenceIS5_E4typeE>
 8010dec:	4603      	mov	r3, r0
 8010dee:	461a      	mov	r2, r3
 8010df0:	68b9      	ldr	r1, [r7, #8]
 8010df2:	68f8      	ldr	r0, [r7, #12]
 8010df4:	f000 f896 	bl	8010f24 <_ZNSt15__new_allocatorISt10shared_ptrI6ModuleEE9constructIS2_JRKS2_EEEvPT_DpOT0_>
	}
 8010df8:	bf00      	nop
 8010dfa:	3710      	adds	r7, #16
 8010dfc:	46bd      	mov	sp, r7
 8010dfe:	bd80      	pop	{r7, pc}

08010e00 <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_>:
#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      _GLIBCXX20_CONSTEXPR
      void
      vector<_Tp, _Alloc>::
 8010e00:	b5b0      	push	{r4, r5, r7, lr}
 8010e02:	b08c      	sub	sp, #48	@ 0x30
 8010e04:	af00      	add	r7, sp, #0
 8010e06:	60f8      	str	r0, [r7, #12]
 8010e08:	60b9      	str	r1, [r7, #8]
 8010e0a:	607a      	str	r2, [r7, #4]
    vector<_Tp, _Alloc>::
    _M_realloc_insert(iterator __position, const _Tp& __x)
#endif
    {
      const size_type __len =
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 8010e0c:	4a39      	ldr	r2, [pc, #228]	@ (8010ef4 <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0xf4>)
 8010e0e:	2101      	movs	r1, #1
 8010e10:	68f8      	ldr	r0, [r7, #12]
 8010e12:	f000 f89f 	bl	8010f54 <_ZNKSt6vectorISt10shared_ptrI6ModuleESaIS2_EE12_M_check_lenEjPKc>
 8010e16:	62f8      	str	r0, [r7, #44]	@ 0x2c
      pointer __old_start = this->_M_impl._M_start;
 8010e18:	68fb      	ldr	r3, [r7, #12]
 8010e1a:	681b      	ldr	r3, [r3, #0]
 8010e1c:	62bb      	str	r3, [r7, #40]	@ 0x28
      pointer __old_finish = this->_M_impl._M_finish;
 8010e1e:	68fb      	ldr	r3, [r7, #12]
 8010e20:	685b      	ldr	r3, [r3, #4]
 8010e22:	627b      	str	r3, [r7, #36]	@ 0x24
      const size_type __elems_before = __position - begin();
 8010e24:	68f8      	ldr	r0, [r7, #12]
 8010e26:	f7ff ff00 	bl	8010c2a <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE5beginEv>
 8010e2a:	4603      	mov	r3, r0
 8010e2c:	617b      	str	r3, [r7, #20]
 8010e2e:	f107 0214 	add.w	r2, r7, #20
 8010e32:	f107 0308 	add.w	r3, r7, #8
 8010e36:	4611      	mov	r1, r2
 8010e38:	4618      	mov	r0, r3
 8010e3a:	f000 f8d2 	bl	8010fe2 <_ZN9__gnu_cxxmiIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSB_SE_>
 8010e3e:	4603      	mov	r3, r0
 8010e40:	623b      	str	r3, [r7, #32]
      pointer __new_start(this->_M_allocate(__len));
 8010e42:	68fb      	ldr	r3, [r7, #12]
 8010e44:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8010e46:	4618      	mov	r0, r3
 8010e48:	f000 f8e0 	bl	801100c <_ZNSt12_Vector_baseISt10shared_ptrI6ModuleESaIS2_EE11_M_allocateEj>
 8010e4c:	61f8      	str	r0, [r7, #28]
      pointer __new_finish(__new_start);
 8010e4e:	69fb      	ldr	r3, [r7, #28]
 8010e50:	61bb      	str	r3, [r7, #24]
	  // The order of the three operations is dictated by the C++11
	  // case, where the moves could alter a new element belonging
	  // to the existing vector.  This is an issue only for callers
	  // taking the element by lvalue ref (see last bullet of C++11
	  // [res.on.arguments]).
	  _Alloc_traits::construct(this->_M_impl,
 8010e52:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 8010e54:	6a3b      	ldr	r3, [r7, #32]
 8010e56:	00db      	lsls	r3, r3, #3
	  _Alloc_traits::construct(this->_M_impl,
 8010e58:	69fa      	ldr	r2, [r7, #28]
 8010e5a:	18d5      	adds	r5, r2, r3
 8010e5c:	6878      	ldr	r0, [r7, #4]
 8010e5e:	f000 f856 	bl	8010f0e <_ZSt7forwardIRKSt10shared_ptrI6ModuleEEOT_RNSt16remove_referenceIS5_E4typeE>
 8010e62:	4603      	mov	r3, r0
 8010e64:	461a      	mov	r2, r3
 8010e66:	4629      	mov	r1, r5
 8010e68:	4620      	mov	r0, r4
 8010e6a:	f7ff ffb6 	bl	8010dda <_ZNSt16allocator_traitsISaISt10shared_ptrI6ModuleEEE9constructIS2_JRKS2_EEEvRS3_PT_DpOT0_>
#if __cplusplus >= 201103L
				   std::forward<_Args>(__args)...);
#else
				   __x);
#endif
	  __new_finish = pointer();
 8010e6e:	2300      	movs	r3, #0
 8010e70:	61bb      	str	r3, [r7, #24]

#if __cplusplus >= 201103L
	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
	    {
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8010e72:	f107 0308 	add.w	r3, r7, #8
 8010e76:	4618      	mov	r0, r3
 8010e78:	f7ff ffa4 	bl	8010dc4 <_ZNK9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEE4baseEv>
 8010e7c:	4603      	mov	r3, r0
 8010e7e:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 8010e80:	68fb      	ldr	r3, [r7, #12]
 8010e82:	4618      	mov	r0, r3
 8010e84:	f7fa f808 	bl	800ae98 <_ZNSt12_Vector_baseISt10shared_ptrI6ModuleESaIS2_EE19_M_get_Tp_allocatorEv>
 8010e88:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8010e8a:	69fa      	ldr	r2, [r7, #28]
 8010e8c:	4621      	mov	r1, r4
 8010e8e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8010e90:	f000 f8d0 	bl	8011034 <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE11_S_relocateEPS2_S5_S5_RS3_>
 8010e94:	61b8      	str	r0, [r7, #24]

	      ++__new_finish;
 8010e96:	69bb      	ldr	r3, [r7, #24]
 8010e98:	3308      	adds	r3, #8
 8010e9a:	61bb      	str	r3, [r7, #24]

	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8010e9c:	f107 0308 	add.w	r3, r7, #8
 8010ea0:	4618      	mov	r0, r3
 8010ea2:	f7ff ff8f 	bl	8010dc4 <_ZNK9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEE4baseEv>
 8010ea6:	4603      	mov	r3, r0
 8010ea8:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 8010eaa:	68fb      	ldr	r3, [r7, #12]
 8010eac:	4618      	mov	r0, r3
 8010eae:	f7f9 fff3 	bl	800ae98 <_ZNSt12_Vector_baseISt10shared_ptrI6ModuleESaIS2_EE19_M_get_Tp_allocatorEv>
 8010eb2:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8010eb4:	69ba      	ldr	r2, [r7, #24]
 8010eb6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8010eb8:	4620      	mov	r0, r4
 8010eba:	f000 f8bb 	bl	8011034 <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE11_S_relocateEPS2_S5_S5_RS3_>
 8010ebe:	61b8      	str	r0, [r7, #24]
#if __cplusplus >= 201103L
      if _GLIBCXX17_CONSTEXPR (!_S_use_relocate())
#endif
	std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
      _GLIBCXX_ASAN_ANNOTATE_REINIT;
      _M_deallocate(__old_start,
 8010ec0:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 8010ec2:	68fb      	ldr	r3, [r7, #12]
 8010ec4:	689a      	ldr	r2, [r3, #8]
 8010ec6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010ec8:	1ad3      	subs	r3, r2, r3
 8010eca:	10db      	asrs	r3, r3, #3
      _M_deallocate(__old_start,
 8010ecc:	461a      	mov	r2, r3
 8010ece:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8010ed0:	f7fa f958 	bl	800b184 <_ZNSt12_Vector_baseISt10shared_ptrI6ModuleESaIS2_EE13_M_deallocateEPS2_j>
      this->_M_impl._M_start = __new_start;
 8010ed4:	68fb      	ldr	r3, [r7, #12]
 8010ed6:	69fa      	ldr	r2, [r7, #28]
 8010ed8:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 8010eda:	68fb      	ldr	r3, [r7, #12]
 8010edc:	69ba      	ldr	r2, [r7, #24]
 8010ede:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8010ee0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010ee2:	00db      	lsls	r3, r3, #3
 8010ee4:	69fa      	ldr	r2, [r7, #28]
 8010ee6:	441a      	add	r2, r3
 8010ee8:	68fb      	ldr	r3, [r7, #12]
 8010eea:	609a      	str	r2, [r3, #8]
    }
 8010eec:	bf00      	nop
 8010eee:	3730      	adds	r7, #48	@ 0x30
 8010ef0:	46bd      	mov	sp, r7
 8010ef2:	bdb0      	pop	{r4, r5, r7, pc}
 8010ef4:	08020344 	.word	0x08020344

08010ef8 <_ZNSt15__new_allocatorISt10shared_ptrI6ModuleEEC1Ev>:
      __new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8010ef8:	b480      	push	{r7}
 8010efa:	b083      	sub	sp, #12
 8010efc:	af00      	add	r7, sp, #0
 8010efe:	6078      	str	r0, [r7, #4]
 8010f00:	687b      	ldr	r3, [r7, #4]
 8010f02:	4618      	mov	r0, r3
 8010f04:	370c      	adds	r7, #12
 8010f06:	46bd      	mov	sp, r7
 8010f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f0c:	4770      	bx	lr

08010f0e <_ZSt7forwardIRKSt10shared_ptrI6ModuleEEOT_RNSt16remove_referenceIS5_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8010f0e:	b480      	push	{r7}
 8010f10:	b083      	sub	sp, #12
 8010f12:	af00      	add	r7, sp, #0
 8010f14:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8010f16:	687b      	ldr	r3, [r7, #4]
 8010f18:	4618      	mov	r0, r3
 8010f1a:	370c      	adds	r7, #12
 8010f1c:	46bd      	mov	sp, r7
 8010f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f22:	4770      	bx	lr

08010f24 <_ZNSt15__new_allocatorISt10shared_ptrI6ModuleEE9constructIS2_JRKS2_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 8010f24:	b590      	push	{r4, r7, lr}
 8010f26:	b085      	sub	sp, #20
 8010f28:	af00      	add	r7, sp, #0
 8010f2a:	60f8      	str	r0, [r7, #12]
 8010f2c:	60b9      	str	r1, [r7, #8]
 8010f2e:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8010f30:	68bb      	ldr	r3, [r7, #8]
 8010f32:	4619      	mov	r1, r3
 8010f34:	2008      	movs	r0, #8
 8010f36:	f7fb f869 	bl	800c00c <_ZnwjPv>
 8010f3a:	4604      	mov	r4, r0
 8010f3c:	6878      	ldr	r0, [r7, #4]
 8010f3e:	f7ff ffe6 	bl	8010f0e <_ZSt7forwardIRKSt10shared_ptrI6ModuleEEOT_RNSt16remove_referenceIS5_E4typeE>
 8010f42:	4603      	mov	r3, r0
 8010f44:	4619      	mov	r1, r3
 8010f46:	4620      	mov	r0, r4
 8010f48:	f7f8 fa6d 	bl	8009426 <_ZNSt10shared_ptrI6ModuleEC1ERKS1_>
 8010f4c:	bf00      	nop
 8010f4e:	3714      	adds	r7, #20
 8010f50:	46bd      	mov	sp, r7
 8010f52:	bd90      	pop	{r4, r7, pc}

08010f54 <_ZNKSt6vectorISt10shared_ptrI6ModuleESaIS2_EE12_M_check_lenEjPKc>:
#endif

      // Called by _M_fill_insert, _M_insert_aux etc.
      _GLIBCXX20_CONSTEXPR
      size_type
      _M_check_len(size_type __n, const char* __s) const
 8010f54:	b590      	push	{r4, r7, lr}
 8010f56:	b087      	sub	sp, #28
 8010f58:	af00      	add	r7, sp, #0
 8010f5a:	60f8      	str	r0, [r7, #12]
 8010f5c:	60b9      	str	r1, [r7, #8]
 8010f5e:	607a      	str	r2, [r7, #4]
      {
	if (max_size() - size() < __n)
 8010f60:	68f8      	ldr	r0, [r7, #12]
 8010f62:	f000 f886 	bl	8011072 <_ZNKSt6vectorISt10shared_ptrI6ModuleESaIS2_EE8max_sizeEv>
 8010f66:	4604      	mov	r4, r0
 8010f68:	68f8      	ldr	r0, [r7, #12]
 8010f6a:	f7ff feeb 	bl	8010d44 <_ZNKSt6vectorISt10shared_ptrI6ModuleESaIS2_EE4sizeEv>
 8010f6e:	4603      	mov	r3, r0
 8010f70:	1ae2      	subs	r2, r4, r3
 8010f72:	68bb      	ldr	r3, [r7, #8]
 8010f74:	429a      	cmp	r2, r3
 8010f76:	bf34      	ite	cc
 8010f78:	2301      	movcc	r3, #1
 8010f7a:	2300      	movcs	r3, #0
 8010f7c:	b2db      	uxtb	r3, r3
 8010f7e:	2b00      	cmp	r3, #0
 8010f80:	d002      	beq.n	8010f88 <_ZNKSt6vectorISt10shared_ptrI6ModuleESaIS2_EE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 8010f82:	6878      	ldr	r0, [r7, #4]
 8010f84:	f00d f926 	bl	801e1d4 <_ZSt20__throw_length_errorPKc>

	const size_type __len = size() + (std::max)(size(), __n);
 8010f88:	68f8      	ldr	r0, [r7, #12]
 8010f8a:	f7ff fedb 	bl	8010d44 <_ZNKSt6vectorISt10shared_ptrI6ModuleESaIS2_EE4sizeEv>
 8010f8e:	4604      	mov	r4, r0
 8010f90:	68f8      	ldr	r0, [r7, #12]
 8010f92:	f7ff fed7 	bl	8010d44 <_ZNKSt6vectorISt10shared_ptrI6ModuleESaIS2_EE4sizeEv>
 8010f96:	4603      	mov	r3, r0
 8010f98:	613b      	str	r3, [r7, #16]
 8010f9a:	f107 0208 	add.w	r2, r7, #8
 8010f9e:	f107 0310 	add.w	r3, r7, #16
 8010fa2:	4611      	mov	r1, r2
 8010fa4:	4618      	mov	r0, r3
 8010fa6:	f000 f875 	bl	8011094 <_ZSt3maxIjERKT_S2_S2_>
 8010faa:	4603      	mov	r3, r0
 8010fac:	681b      	ldr	r3, [r3, #0]
 8010fae:	4423      	add	r3, r4
 8010fb0:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8010fb2:	68f8      	ldr	r0, [r7, #12]
 8010fb4:	f7ff fec6 	bl	8010d44 <_ZNKSt6vectorISt10shared_ptrI6ModuleESaIS2_EE4sizeEv>
 8010fb8:	4602      	mov	r2, r0
 8010fba:	697b      	ldr	r3, [r7, #20]
 8010fbc:	4293      	cmp	r3, r2
 8010fbe:	d306      	bcc.n	8010fce <_ZNKSt6vectorISt10shared_ptrI6ModuleESaIS2_EE12_M_check_lenEjPKc+0x7a>
 8010fc0:	68f8      	ldr	r0, [r7, #12]
 8010fc2:	f000 f856 	bl	8011072 <_ZNKSt6vectorISt10shared_ptrI6ModuleESaIS2_EE8max_sizeEv>
 8010fc6:	4602      	mov	r2, r0
 8010fc8:	697b      	ldr	r3, [r7, #20]
 8010fca:	4293      	cmp	r3, r2
 8010fcc:	d904      	bls.n	8010fd8 <_ZNKSt6vectorISt10shared_ptrI6ModuleESaIS2_EE12_M_check_lenEjPKc+0x84>
 8010fce:	68f8      	ldr	r0, [r7, #12]
 8010fd0:	f000 f84f 	bl	8011072 <_ZNKSt6vectorISt10shared_ptrI6ModuleESaIS2_EE8max_sizeEv>
 8010fd4:	4603      	mov	r3, r0
 8010fd6:	e000      	b.n	8010fda <_ZNKSt6vectorISt10shared_ptrI6ModuleESaIS2_EE12_M_check_lenEjPKc+0x86>
 8010fd8:	697b      	ldr	r3, [r7, #20]
      }
 8010fda:	4618      	mov	r0, r3
 8010fdc:	371c      	adds	r7, #28
 8010fde:	46bd      	mov	sp, r7
 8010fe0:	bd90      	pop	{r4, r7, pc}

08010fe2 <_ZN9__gnu_cxxmiIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSB_SE_>:
    { return __lhs.base() - __rhs.base(); }

  template<typename _Iterator, typename _Container>
    _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 8010fe2:	b590      	push	{r4, r7, lr}
 8010fe4:	b083      	sub	sp, #12
 8010fe6:	af00      	add	r7, sp, #0
 8010fe8:	6078      	str	r0, [r7, #4]
 8010fea:	6039      	str	r1, [r7, #0]
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() - __rhs.base(); }
 8010fec:	6878      	ldr	r0, [r7, #4]
 8010fee:	f7ff fee9 	bl	8010dc4 <_ZNK9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEE4baseEv>
 8010ff2:	4603      	mov	r3, r0
 8010ff4:	681c      	ldr	r4, [r3, #0]
 8010ff6:	6838      	ldr	r0, [r7, #0]
 8010ff8:	f7ff fee4 	bl	8010dc4 <_ZNK9__gnu_cxx17__normal_iteratorIPSt10shared_ptrI6ModuleESt6vectorIS3_SaIS3_EEE4baseEv>
 8010ffc:	4603      	mov	r3, r0
 8010ffe:	681b      	ldr	r3, [r3, #0]
 8011000:	1ae3      	subs	r3, r4, r3
 8011002:	10db      	asrs	r3, r3, #3
 8011004:	4618      	mov	r0, r3
 8011006:	370c      	adds	r7, #12
 8011008:	46bd      	mov	sp, r7
 801100a:	bd90      	pop	{r4, r7, pc}

0801100c <_ZNSt12_Vector_baseISt10shared_ptrI6ModuleESaIS2_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 801100c:	b580      	push	{r7, lr}
 801100e:	b082      	sub	sp, #8
 8011010:	af00      	add	r7, sp, #0
 8011012:	6078      	str	r0, [r7, #4]
 8011014:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8011016:	683b      	ldr	r3, [r7, #0]
 8011018:	2b00      	cmp	r3, #0
 801101a:	d006      	beq.n	801102a <_ZNSt12_Vector_baseISt10shared_ptrI6ModuleESaIS2_EE11_M_allocateEj+0x1e>
 801101c:	687b      	ldr	r3, [r7, #4]
 801101e:	6839      	ldr	r1, [r7, #0]
 8011020:	4618      	mov	r0, r3
 8011022:	f000 f84b 	bl	80110bc <_ZNSt16allocator_traitsISaISt10shared_ptrI6ModuleEEE8allocateERS3_j>
 8011026:	4603      	mov	r3, r0
 8011028:	e000      	b.n	801102c <_ZNSt12_Vector_baseISt10shared_ptrI6ModuleESaIS2_EE11_M_allocateEj+0x20>
 801102a:	2300      	movs	r3, #0
      }
 801102c:	4618      	mov	r0, r3
 801102e:	3708      	adds	r7, #8
 8011030:	46bd      	mov	sp, r7
 8011032:	bd80      	pop	{r7, pc}

08011034 <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE11_S_relocateEPS2_S5_S5_RS3_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 8011034:	b580      	push	{r7, lr}
 8011036:	b084      	sub	sp, #16
 8011038:	af00      	add	r7, sp, #0
 801103a:	60f8      	str	r0, [r7, #12]
 801103c:	60b9      	str	r1, [r7, #8]
 801103e:	607a      	str	r2, [r7, #4]
 8011040:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 8011042:	683b      	ldr	r3, [r7, #0]
 8011044:	687a      	ldr	r2, [r7, #4]
 8011046:	68b9      	ldr	r1, [r7, #8]
 8011048:	68f8      	ldr	r0, [r7, #12]
 801104a:	f000 f846 	bl	80110da <_ZSt12__relocate_aIPSt10shared_ptrI6ModuleES3_SaIS2_EET0_T_S6_S5_RT1_>
 801104e:	4603      	mov	r3, r0
      }
 8011050:	4618      	mov	r0, r3
 8011052:	3710      	adds	r7, #16
 8011054:	46bd      	mov	sp, r7
 8011056:	bd80      	pop	{r7, pc}

08011058 <_ZNSt16allocator_traitsISaISt10shared_ptrI6ModuleEEE7destroyIS2_EEvRS3_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 8011058:	b580      	push	{r7, lr}
 801105a:	b082      	sub	sp, #8
 801105c:	af00      	add	r7, sp, #0
 801105e:	6078      	str	r0, [r7, #4]
 8011060:	6039      	str	r1, [r7, #0]
	  __a.destroy(__p);
 8011062:	6839      	ldr	r1, [r7, #0]
 8011064:	6878      	ldr	r0, [r7, #4]
 8011066:	f000 f855 	bl	8011114 <_ZNSt15__new_allocatorISt10shared_ptrI6ModuleEE7destroyIS2_EEvPT_>
	}
 801106a:	bf00      	nop
 801106c:	3708      	adds	r7, #8
 801106e:	46bd      	mov	sp, r7
 8011070:	bd80      	pop	{r7, pc}

08011072 <_ZNKSt6vectorISt10shared_ptrI6ModuleESaIS2_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 8011072:	b580      	push	{r7, lr}
 8011074:	b082      	sub	sp, #8
 8011076:	af00      	add	r7, sp, #0
 8011078:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 801107a:	687b      	ldr	r3, [r7, #4]
 801107c:	4618      	mov	r0, r3
 801107e:	f000 f86f 	bl	8011160 <_ZNKSt12_Vector_baseISt10shared_ptrI6ModuleESaIS2_EE19_M_get_Tp_allocatorEv>
 8011082:	4603      	mov	r3, r0
 8011084:	4618      	mov	r0, r3
 8011086:	f000 f851 	bl	801112c <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE11_S_max_sizeERKS3_>
 801108a:	4603      	mov	r3, r0
 801108c:	4618      	mov	r0, r3
 801108e:	3708      	adds	r7, #8
 8011090:	46bd      	mov	sp, r7
 8011092:	bd80      	pop	{r7, pc}

08011094 <_ZSt3maxIjERKT_S2_S2_>:
    max(const _Tp& __a, const _Tp& __b)
 8011094:	b480      	push	{r7}
 8011096:	b083      	sub	sp, #12
 8011098:	af00      	add	r7, sp, #0
 801109a:	6078      	str	r0, [r7, #4]
 801109c:	6039      	str	r1, [r7, #0]
      if (__a < __b)
 801109e:	687b      	ldr	r3, [r7, #4]
 80110a0:	681a      	ldr	r2, [r3, #0]
 80110a2:	683b      	ldr	r3, [r7, #0]
 80110a4:	681b      	ldr	r3, [r3, #0]
 80110a6:	429a      	cmp	r2, r3
 80110a8:	d201      	bcs.n	80110ae <_ZSt3maxIjERKT_S2_S2_+0x1a>
	return __b;
 80110aa:	683b      	ldr	r3, [r7, #0]
 80110ac:	e000      	b.n	80110b0 <_ZSt3maxIjERKT_S2_S2_+0x1c>
      return __a;
 80110ae:	687b      	ldr	r3, [r7, #4]
    }
 80110b0:	4618      	mov	r0, r3
 80110b2:	370c      	adds	r7, #12
 80110b4:	46bd      	mov	sp, r7
 80110b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110ba:	4770      	bx	lr

080110bc <_ZNSt16allocator_traitsISaISt10shared_ptrI6ModuleEEE8allocateERS3_j>:
      allocate(allocator_type& __a, size_type __n)
 80110bc:	b580      	push	{r7, lr}
 80110be:	b082      	sub	sp, #8
 80110c0:	af00      	add	r7, sp, #0
 80110c2:	6078      	str	r0, [r7, #4]
 80110c4:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 80110c6:	2200      	movs	r2, #0
 80110c8:	6839      	ldr	r1, [r7, #0]
 80110ca:	6878      	ldr	r0, [r7, #4]
 80110cc:	f000 f853 	bl	8011176 <_ZNSt15__new_allocatorISt10shared_ptrI6ModuleEE8allocateEjPKv>
 80110d0:	4603      	mov	r3, r0
 80110d2:	4618      	mov	r0, r3
 80110d4:	3708      	adds	r7, #8
 80110d6:	46bd      	mov	sp, r7
 80110d8:	bd80      	pop	{r7, pc}

080110da <_ZSt12__relocate_aIPSt10shared_ptrI6ModuleES3_SaIS2_EET0_T_S6_S5_RT1_>:

  template <typename _InputIterator, typename _ForwardIterator,
	    typename _Allocator>
    _GLIBCXX20_CONSTEXPR
    inline _ForwardIterator
    __relocate_a(_InputIterator __first, _InputIterator __last,
 80110da:	b5b0      	push	{r4, r5, r7, lr}
 80110dc:	b084      	sub	sp, #16
 80110de:	af00      	add	r7, sp, #0
 80110e0:	60f8      	str	r0, [r7, #12]
 80110e2:	60b9      	str	r1, [r7, #8]
 80110e4:	607a      	str	r2, [r7, #4]
 80110e6:	603b      	str	r3, [r7, #0]
		 _ForwardIterator __result, _Allocator& __alloc)
    noexcept(noexcept(__relocate_a_1(std::__niter_base(__first),
				     std::__niter_base(__last),
				     std::__niter_base(__result), __alloc)))
    {
      return std::__relocate_a_1(std::__niter_base(__first),
 80110e8:	68f8      	ldr	r0, [r7, #12]
 80110ea:	f000 f86e 	bl	80111ca <_ZSt12__niter_baseIPSt10shared_ptrI6ModuleEET_S4_>
 80110ee:	4604      	mov	r4, r0
 80110f0:	68b8      	ldr	r0, [r7, #8]
 80110f2:	f000 f86a 	bl	80111ca <_ZSt12__niter_baseIPSt10shared_ptrI6ModuleEET_S4_>
 80110f6:	4605      	mov	r5, r0
 80110f8:	6878      	ldr	r0, [r7, #4]
 80110fa:	f000 f866 	bl	80111ca <_ZSt12__niter_baseIPSt10shared_ptrI6ModuleEET_S4_>
 80110fe:	4602      	mov	r2, r0
 8011100:	683b      	ldr	r3, [r7, #0]
 8011102:	4629      	mov	r1, r5
 8011104:	4620      	mov	r0, r4
 8011106:	f000 f86b 	bl	80111e0 <_ZSt14__relocate_a_1IPSt10shared_ptrI6ModuleES3_SaIS2_EET0_T_S6_S5_RT1_>
 801110a:	4603      	mov	r3, r0
				 std::__niter_base(__last),
				 std::__niter_base(__result), __alloc);
    }
 801110c:	4618      	mov	r0, r3
 801110e:	3710      	adds	r7, #16
 8011110:	46bd      	mov	sp, r7
 8011112:	bdb0      	pop	{r4, r5, r7, pc}

08011114 <_ZNSt15__new_allocatorISt10shared_ptrI6ModuleEE7destroyIS2_EEvPT_>:
	destroy(_Up* __p)
 8011114:	b580      	push	{r7, lr}
 8011116:	b082      	sub	sp, #8
 8011118:	af00      	add	r7, sp, #0
 801111a:	6078      	str	r0, [r7, #4]
 801111c:	6039      	str	r1, [r7, #0]
	{ __p->~_Up(); }
 801111e:	6838      	ldr	r0, [r7, #0]
 8011120:	f7f8 f95e 	bl	80093e0 <_ZNSt10shared_ptrI6ModuleED1Ev>
 8011124:	bf00      	nop
 8011126:	3708      	adds	r7, #8
 8011128:	46bd      	mov	sp, r7
 801112a:	bd80      	pop	{r7, pc}

0801112c <_ZNSt6vectorISt10shared_ptrI6ModuleESaIS2_EE11_S_max_sizeERKS3_>:
	      __N("cannot create std::vector larger than max_size()"));
	return __n;
      }

      static _GLIBCXX20_CONSTEXPR size_type
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 801112c:	b580      	push	{r7, lr}
 801112e:	b084      	sub	sp, #16
 8011130:	af00      	add	r7, sp, #0
 8011132:	6078      	str	r0, [r7, #4]
      {
	// std::distance(begin(), end()) cannot be greater than PTRDIFF_MAX,
	// and realistically we can't store more than PTRDIFF_MAX/sizeof(T)
	// (even if std::allocator_traits::max_size says we can).
	const size_t __diffmax
 8011134:	f06f 4370 	mvn.w	r3, #4026531840	@ 0xf0000000
 8011138:	60fb      	str	r3, [r7, #12]
	  = __gnu_cxx::__numeric_traits<ptrdiff_t>::__max / sizeof(_Tp);
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 801113a:	6878      	ldr	r0, [r7, #4]
 801113c:	f000 f876 	bl	801122c <_ZNSt16allocator_traitsISaISt10shared_ptrI6ModuleEEE8max_sizeERKS3_>
 8011140:	4603      	mov	r3, r0
 8011142:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 8011144:	f107 0208 	add.w	r2, r7, #8
 8011148:	f107 030c 	add.w	r3, r7, #12
 801114c:	4611      	mov	r1, r2
 801114e:	4618      	mov	r0, r3
 8011150:	f000 f878 	bl	8011244 <_ZSt3minIjERKT_S2_S2_>
 8011154:	4603      	mov	r3, r0
 8011156:	681b      	ldr	r3, [r3, #0]
      }
 8011158:	4618      	mov	r0, r3
 801115a:	3710      	adds	r7, #16
 801115c:	46bd      	mov	sp, r7
 801115e:	bd80      	pop	{r7, pc}

08011160 <_ZNKSt12_Vector_baseISt10shared_ptrI6ModuleESaIS2_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 8011160:	b480      	push	{r7}
 8011162:	b083      	sub	sp, #12
 8011164:	af00      	add	r7, sp, #0
 8011166:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8011168:	687b      	ldr	r3, [r7, #4]
 801116a:	4618      	mov	r0, r3
 801116c:	370c      	adds	r7, #12
 801116e:	46bd      	mov	sp, r7
 8011170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011174:	4770      	bx	lr

08011176 <_ZNSt15__new_allocatorISt10shared_ptrI6ModuleEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8011176:	b580      	push	{r7, lr}
 8011178:	b084      	sub	sp, #16
 801117a:	af00      	add	r7, sp, #0
 801117c:	60f8      	str	r0, [r7, #12]
 801117e:	60b9      	str	r1, [r7, #8]
 8011180:	607a      	str	r2, [r7, #4]
	if (__builtin_expect(__n > this->_M_max_size(), false))
 8011182:	68f8      	ldr	r0, [r7, #12]
 8011184:	f000 f872 	bl	801126c <_ZNKSt15__new_allocatorISt10shared_ptrI6ModuleEE11_M_max_sizeEv>
 8011188:	4602      	mov	r2, r0
 801118a:	68bb      	ldr	r3, [r7, #8]
 801118c:	4293      	cmp	r3, r2
 801118e:	bf8c      	ite	hi
 8011190:	2301      	movhi	r3, #1
 8011192:	2300      	movls	r3, #0
 8011194:	b2db      	uxtb	r3, r3
 8011196:	2b00      	cmp	r3, #0
 8011198:	bf14      	ite	ne
 801119a:	2301      	movne	r3, #1
 801119c:	2300      	moveq	r3, #0
 801119e:	b2db      	uxtb	r3, r3
 80111a0:	2b00      	cmp	r3, #0
 80111a2:	d007      	beq.n	80111b4 <_ZNSt15__new_allocatorISt10shared_ptrI6ModuleEE8allocateEjPKv+0x3e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 80111a4:	68bb      	ldr	r3, [r7, #8]
 80111a6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80111aa:	d301      	bcc.n	80111b0 <_ZNSt15__new_allocatorISt10shared_ptrI6ModuleEE8allocateEjPKv+0x3a>
	      std::__throw_bad_array_new_length();
 80111ac:	f00d f80c 	bl	801e1c8 <_ZSt28__throw_bad_array_new_lengthv>
	    std::__throw_bad_alloc();
 80111b0:	f00d f807 	bl	801e1c2 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 80111b4:	68bb      	ldr	r3, [r7, #8]
 80111b6:	00db      	lsls	r3, r3, #3
 80111b8:	4618      	mov	r0, r3
 80111ba:	f00c ffef 	bl	801e19c <_Znwj>
 80111be:	4603      	mov	r3, r0
 80111c0:	bf00      	nop
      }
 80111c2:	4618      	mov	r0, r3
 80111c4:	3710      	adds	r7, #16
 80111c6:	46bd      	mov	sp, r7
 80111c8:	bd80      	pop	{r7, pc}

080111ca <_ZSt12__niter_baseIPSt10shared_ptrI6ModuleEET_S4_>:
    __niter_base(_Iterator __it)
 80111ca:	b480      	push	{r7}
 80111cc:	b083      	sub	sp, #12
 80111ce:	af00      	add	r7, sp, #0
 80111d0:	6078      	str	r0, [r7, #4]
    { return __it; }
 80111d2:	687b      	ldr	r3, [r7, #4]
 80111d4:	4618      	mov	r0, r3
 80111d6:	370c      	adds	r7, #12
 80111d8:	46bd      	mov	sp, r7
 80111da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111de:	4770      	bx	lr

080111e0 <_ZSt14__relocate_a_1IPSt10shared_ptrI6ModuleES3_SaIS2_EET0_T_S6_S5_RT1_>:
    __relocate_a_1(_InputIterator __first, _InputIterator __last,
 80111e0:	b590      	push	{r4, r7, lr}
 80111e2:	b087      	sub	sp, #28
 80111e4:	af00      	add	r7, sp, #0
 80111e6:	60f8      	str	r0, [r7, #12]
 80111e8:	60b9      	str	r1, [r7, #8]
 80111ea:	607a      	str	r2, [r7, #4]
 80111ec:	603b      	str	r3, [r7, #0]
      _ForwardIterator __cur = __result;
 80111ee:	687b      	ldr	r3, [r7, #4]
 80111f0:	617b      	str	r3, [r7, #20]
      for (; __first != __last; ++__first, (void)++__cur)
 80111f2:	e012      	b.n	801121a <_ZSt14__relocate_a_1IPSt10shared_ptrI6ModuleES3_SaIS2_EET0_T_S6_S5_RT1_+0x3a>
	std::__relocate_object_a(std::__addressof(*__cur),
 80111f4:	6978      	ldr	r0, [r7, #20]
 80111f6:	f7fa fab1 	bl	800b75c <_ZSt11__addressofISt10shared_ptrI6ModuleEEPT_RS3_>
 80111fa:	4604      	mov	r4, r0
 80111fc:	68f8      	ldr	r0, [r7, #12]
 80111fe:	f7fa faad 	bl	800b75c <_ZSt11__addressofISt10shared_ptrI6ModuleEEPT_RS3_>
 8011202:	4603      	mov	r3, r0
 8011204:	683a      	ldr	r2, [r7, #0]
 8011206:	4619      	mov	r1, r3
 8011208:	4620      	mov	r0, r4
 801120a:	f000 f83b 	bl	8011284 <_ZSt19__relocate_object_aISt10shared_ptrI6ModuleES2_SaIS2_EEvPT_PT0_RT1_>
      for (; __first != __last; ++__first, (void)++__cur)
 801120e:	68fb      	ldr	r3, [r7, #12]
 8011210:	3308      	adds	r3, #8
 8011212:	60fb      	str	r3, [r7, #12]
 8011214:	697b      	ldr	r3, [r7, #20]
 8011216:	3308      	adds	r3, #8
 8011218:	617b      	str	r3, [r7, #20]
 801121a:	68fa      	ldr	r2, [r7, #12]
 801121c:	68bb      	ldr	r3, [r7, #8]
 801121e:	429a      	cmp	r2, r3
 8011220:	d1e8      	bne.n	80111f4 <_ZSt14__relocate_a_1IPSt10shared_ptrI6ModuleES3_SaIS2_EET0_T_S6_S5_RT1_+0x14>
      return __cur;
 8011222:	697b      	ldr	r3, [r7, #20]
    }
 8011224:	4618      	mov	r0, r3
 8011226:	371c      	adds	r7, #28
 8011228:	46bd      	mov	sp, r7
 801122a:	bd90      	pop	{r4, r7, pc}

0801122c <_ZNSt16allocator_traitsISaISt10shared_ptrI6ModuleEEE8max_sizeERKS3_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 801122c:	b580      	push	{r7, lr}
 801122e:	b082      	sub	sp, #8
 8011230:	af00      	add	r7, sp, #0
 8011232:	6078      	str	r0, [r7, #4]
	return __a.max_size();
 8011234:	6878      	ldr	r0, [r7, #4]
 8011236:	f000 f840 	bl	80112ba <_ZNKSt15__new_allocatorISt10shared_ptrI6ModuleEE8max_sizeEv>
 801123a:	4603      	mov	r3, r0
      }
 801123c:	4618      	mov	r0, r3
 801123e:	3708      	adds	r7, #8
 8011240:	46bd      	mov	sp, r7
 8011242:	bd80      	pop	{r7, pc}

08011244 <_ZSt3minIjERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 8011244:	b480      	push	{r7}
 8011246:	b083      	sub	sp, #12
 8011248:	af00      	add	r7, sp, #0
 801124a:	6078      	str	r0, [r7, #4]
 801124c:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 801124e:	683b      	ldr	r3, [r7, #0]
 8011250:	681a      	ldr	r2, [r3, #0]
 8011252:	687b      	ldr	r3, [r7, #4]
 8011254:	681b      	ldr	r3, [r3, #0]
 8011256:	429a      	cmp	r2, r3
 8011258:	d201      	bcs.n	801125e <_ZSt3minIjERKT_S2_S2_+0x1a>
	return __b;
 801125a:	683b      	ldr	r3, [r7, #0]
 801125c:	e000      	b.n	8011260 <_ZSt3minIjERKT_S2_S2_+0x1c>
      return __a;
 801125e:	687b      	ldr	r3, [r7, #4]
    }
 8011260:	4618      	mov	r0, r3
 8011262:	370c      	adds	r7, #12
 8011264:	46bd      	mov	sp, r7
 8011266:	f85d 7b04 	ldr.w	r7, [sp], #4
 801126a:	4770      	bx	lr

0801126c <_ZNKSt15__new_allocatorISt10shared_ptrI6ModuleEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 801126c:	b480      	push	{r7}
 801126e:	b083      	sub	sp, #12
 8011270:	af00      	add	r7, sp, #0
 8011272:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8011274:	f06f 4370 	mvn.w	r3, #4026531840	@ 0xf0000000
      }
 8011278:	4618      	mov	r0, r3
 801127a:	370c      	adds	r7, #12
 801127c:	46bd      	mov	sp, r7
 801127e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011282:	4770      	bx	lr

08011284 <_ZSt19__relocate_object_aISt10shared_ptrI6ModuleES2_SaIS2_EEvPT_PT0_RT1_>:
    __relocate_object_a(_Tp* __restrict __dest, _Up* __restrict __orig,
 8011284:	b580      	push	{r7, lr}
 8011286:	b084      	sub	sp, #16
 8011288:	af00      	add	r7, sp, #0
 801128a:	60f8      	str	r0, [r7, #12]
 801128c:	60b9      	str	r1, [r7, #8]
 801128e:	607a      	str	r2, [r7, #4]
      __traits::construct(__alloc, __dest, std::move(*__orig));
 8011290:	68b8      	ldr	r0, [r7, #8]
 8011292:	f000 f81e 	bl	80112d2 <_ZSt4moveIRSt10shared_ptrI6ModuleEEONSt16remove_referenceIT_E4typeEOS5_>
 8011296:	4603      	mov	r3, r0
 8011298:	461a      	mov	r2, r3
 801129a:	68f9      	ldr	r1, [r7, #12]
 801129c:	6878      	ldr	r0, [r7, #4]
 801129e:	f000 f823 	bl	80112e8 <_ZNSt16allocator_traitsISaISt10shared_ptrI6ModuleEEE9constructIS2_JS2_EEEvRS3_PT_DpOT0_>
      __traits::destroy(__alloc, std::__addressof(*__orig));
 80112a2:	68b8      	ldr	r0, [r7, #8]
 80112a4:	f7fa fa5a 	bl	800b75c <_ZSt11__addressofISt10shared_ptrI6ModuleEEPT_RS3_>
 80112a8:	4603      	mov	r3, r0
 80112aa:	4619      	mov	r1, r3
 80112ac:	6878      	ldr	r0, [r7, #4]
 80112ae:	f7ff fed3 	bl	8011058 <_ZNSt16allocator_traitsISaISt10shared_ptrI6ModuleEEE7destroyIS2_EEvRS3_PT_>
    }
 80112b2:	bf00      	nop
 80112b4:	3710      	adds	r7, #16
 80112b6:	46bd      	mov	sp, r7
 80112b8:	bd80      	pop	{r7, pc}

080112ba <_ZNKSt15__new_allocatorISt10shared_ptrI6ModuleEE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 80112ba:	b580      	push	{r7, lr}
 80112bc:	b082      	sub	sp, #8
 80112be:	af00      	add	r7, sp, #0
 80112c0:	6078      	str	r0, [r7, #4]
      { return _M_max_size(); }
 80112c2:	6878      	ldr	r0, [r7, #4]
 80112c4:	f7ff ffd2 	bl	801126c <_ZNKSt15__new_allocatorISt10shared_ptrI6ModuleEE11_M_max_sizeEv>
 80112c8:	4603      	mov	r3, r0
 80112ca:	4618      	mov	r0, r3
 80112cc:	3708      	adds	r7, #8
 80112ce:	46bd      	mov	sp, r7
 80112d0:	bd80      	pop	{r7, pc}

080112d2 <_ZSt4moveIRSt10shared_ptrI6ModuleEEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 80112d2:	b480      	push	{r7}
 80112d4:	b083      	sub	sp, #12
 80112d6:	af00      	add	r7, sp, #0
 80112d8:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80112da:	687b      	ldr	r3, [r7, #4]
 80112dc:	4618      	mov	r0, r3
 80112de:	370c      	adds	r7, #12
 80112e0:	46bd      	mov	sp, r7
 80112e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112e6:	4770      	bx	lr

080112e8 <_ZNSt16allocator_traitsISaISt10shared_ptrI6ModuleEEE9constructIS2_JS2_EEEvRS3_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 80112e8:	b580      	push	{r7, lr}
 80112ea:	b084      	sub	sp, #16
 80112ec:	af00      	add	r7, sp, #0
 80112ee:	60f8      	str	r0, [r7, #12]
 80112f0:	60b9      	str	r1, [r7, #8]
 80112f2:	607a      	str	r2, [r7, #4]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 80112f4:	6878      	ldr	r0, [r7, #4]
 80112f6:	f000 f80a 	bl	801130e <_ZSt7forwardISt10shared_ptrI6ModuleEEOT_RNSt16remove_referenceIS3_E4typeE>
 80112fa:	4603      	mov	r3, r0
 80112fc:	461a      	mov	r2, r3
 80112fe:	68b9      	ldr	r1, [r7, #8]
 8011300:	68f8      	ldr	r0, [r7, #12]
 8011302:	f000 f80f 	bl	8011324 <_ZNSt15__new_allocatorISt10shared_ptrI6ModuleEE9constructIS2_JS2_EEEvPT_DpOT0_>
	}
 8011306:	bf00      	nop
 8011308:	3710      	adds	r7, #16
 801130a:	46bd      	mov	sp, r7
 801130c:	bd80      	pop	{r7, pc}

0801130e <_ZSt7forwardISt10shared_ptrI6ModuleEEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 801130e:	b480      	push	{r7}
 8011310:	b083      	sub	sp, #12
 8011312:	af00      	add	r7, sp, #0
 8011314:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8011316:	687b      	ldr	r3, [r7, #4]
 8011318:	4618      	mov	r0, r3
 801131a:	370c      	adds	r7, #12
 801131c:	46bd      	mov	sp, r7
 801131e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011322:	4770      	bx	lr

08011324 <_ZNSt15__new_allocatorISt10shared_ptrI6ModuleEE9constructIS2_JS2_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 8011324:	b590      	push	{r4, r7, lr}
 8011326:	b085      	sub	sp, #20
 8011328:	af00      	add	r7, sp, #0
 801132a:	60f8      	str	r0, [r7, #12]
 801132c:	60b9      	str	r1, [r7, #8]
 801132e:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8011330:	68bb      	ldr	r3, [r7, #8]
 8011332:	4619      	mov	r1, r3
 8011334:	2008      	movs	r0, #8
 8011336:	f7fa fe69 	bl	800c00c <_ZnwjPv>
 801133a:	4604      	mov	r4, r0
 801133c:	6878      	ldr	r0, [r7, #4]
 801133e:	f7ff ffe6 	bl	801130e <_ZSt7forwardISt10shared_ptrI6ModuleEEOT_RNSt16remove_referenceIS3_E4typeE>
 8011342:	4603      	mov	r3, r0
 8011344:	4619      	mov	r1, r3
 8011346:	4620      	mov	r0, r4
 8011348:	f000 f804 	bl	8011354 <_ZNSt10shared_ptrI6ModuleEC1EOS1_>
 801134c:	bf00      	nop
 801134e:	3714      	adds	r7, #20
 8011350:	46bd      	mov	sp, r7
 8011352:	bd90      	pop	{r4, r7, pc}

08011354 <_ZNSt10shared_ptrI6ModuleEC1EOS1_>:
      shared_ptr(shared_ptr&& __r) noexcept
 8011354:	b590      	push	{r4, r7, lr}
 8011356:	b083      	sub	sp, #12
 8011358:	af00      	add	r7, sp, #0
 801135a:	6078      	str	r0, [r7, #4]
 801135c:	6039      	str	r1, [r7, #0]
      : __shared_ptr<_Tp>(std::move(__r)) { }
 801135e:	687c      	ldr	r4, [r7, #4]
 8011360:	6838      	ldr	r0, [r7, #0]
 8011362:	f7ff ffb6 	bl	80112d2 <_ZSt4moveIRSt10shared_ptrI6ModuleEEONSt16remove_referenceIT_E4typeEOS5_>
 8011366:	4603      	mov	r3, r0
 8011368:	4619      	mov	r1, r3
 801136a:	4620      	mov	r0, r4
 801136c:	f000 f805 	bl	801137a <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EEC1EOS3_>
 8011370:	687b      	ldr	r3, [r7, #4]
 8011372:	4618      	mov	r0, r3
 8011374:	370c      	adds	r7, #12
 8011376:	46bd      	mov	sp, r7
 8011378:	bd90      	pop	{r4, r7, pc}

0801137a <_ZNSt12__shared_ptrI6ModuleLN9__gnu_cxx12_Lock_policyE0EEC1EOS3_>:
      __shared_ptr(__shared_ptr&& __r) noexcept
 801137a:	b580      	push	{r7, lr}
 801137c:	b082      	sub	sp, #8
 801137e:	af00      	add	r7, sp, #0
 8011380:	6078      	str	r0, [r7, #4]
 8011382:	6039      	str	r1, [r7, #0]
      : _M_ptr(__r._M_ptr), _M_refcount()
 8011384:	683b      	ldr	r3, [r7, #0]
 8011386:	681a      	ldr	r2, [r3, #0]
 8011388:	687b      	ldr	r3, [r7, #4]
 801138a:	601a      	str	r2, [r3, #0]
 801138c:	687b      	ldr	r3, [r7, #4]
 801138e:	3304      	adds	r3, #4
 8011390:	4618      	mov	r0, r3
 8011392:	f7fb fa88 	bl	800c8a6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1Ev>
	_M_refcount._M_swap(__r._M_refcount);
 8011396:	687b      	ldr	r3, [r7, #4]
 8011398:	1d1a      	adds	r2, r3, #4
 801139a:	683b      	ldr	r3, [r7, #0]
 801139c:	3304      	adds	r3, #4
 801139e:	4619      	mov	r1, r3
 80113a0:	4610      	mov	r0, r2
 80113a2:	f000 f808 	bl	80113b6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EE7_M_swapERS2_>
	__r._M_ptr = nullptr;
 80113a6:	683b      	ldr	r3, [r7, #0]
 80113a8:	2200      	movs	r2, #0
 80113aa:	601a      	str	r2, [r3, #0]
      }
 80113ac:	687b      	ldr	r3, [r7, #4]
 80113ae:	4618      	mov	r0, r3
 80113b0:	3708      	adds	r7, #8
 80113b2:	46bd      	mov	sp, r7
 80113b4:	bd80      	pop	{r7, pc}

080113b6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EE7_M_swapERS2_>:
      _M_swap(__shared_count& __r) noexcept
 80113b6:	b480      	push	{r7}
 80113b8:	b085      	sub	sp, #20
 80113ba:	af00      	add	r7, sp, #0
 80113bc:	6078      	str	r0, [r7, #4]
 80113be:	6039      	str	r1, [r7, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 80113c0:	683b      	ldr	r3, [r7, #0]
 80113c2:	681b      	ldr	r3, [r3, #0]
 80113c4:	60fb      	str	r3, [r7, #12]
	__r._M_pi = _M_pi;
 80113c6:	687b      	ldr	r3, [r7, #4]
 80113c8:	681a      	ldr	r2, [r3, #0]
 80113ca:	683b      	ldr	r3, [r7, #0]
 80113cc:	601a      	str	r2, [r3, #0]
	_M_pi = __tmp;
 80113ce:	687b      	ldr	r3, [r7, #4]
 80113d0:	68fa      	ldr	r2, [r7, #12]
 80113d2:	601a      	str	r2, [r3, #0]
      }
 80113d4:	bf00      	nop
 80113d6:	3714      	adds	r7, #20
 80113d8:	46bd      	mov	sp, r7
 80113da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113de:	4770      	bx	lr

080113e0 <__NVIC_EnableIRQ>:
{
 80113e0:	b480      	push	{r7}
 80113e2:	b083      	sub	sp, #12
 80113e4:	af00      	add	r7, sp, #0
 80113e6:	4603      	mov	r3, r0
 80113e8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80113ea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80113ee:	2b00      	cmp	r3, #0
 80113f0:	db0b      	blt.n	801140a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80113f2:	88fb      	ldrh	r3, [r7, #6]
 80113f4:	f003 021f 	and.w	r2, r3, #31
 80113f8:	4907      	ldr	r1, [pc, #28]	@ (8011418 <__NVIC_EnableIRQ+0x38>)
 80113fa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80113fe:	095b      	lsrs	r3, r3, #5
 8011400:	2001      	movs	r0, #1
 8011402:	fa00 f202 	lsl.w	r2, r0, r2
 8011406:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 801140a:	bf00      	nop
 801140c:	370c      	adds	r7, #12
 801140e:	46bd      	mov	sp, r7
 8011410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011414:	4770      	bx	lr
 8011416:	bf00      	nop
 8011418:	e000e100 	.word	0xe000e100

0801141c <_ZN8pruTimerC1EP11TIM_TypeDef9IRQn_TypemP9pruThread>:
#include "pruThread.h"



// Timer constructor
pruTimer::pruTimer(TIM_TypeDef* timer, IRQn_Type irq, uint32_t frequency, pruThread* ownerPtr):
 801141c:	b590      	push	{r4, r7, lr}
 801141e:	b085      	sub	sp, #20
 8011420:	af00      	add	r7, sp, #0
 8011422:	60f8      	str	r0, [r7, #12]
 8011424:	60b9      	str	r1, [r7, #8]
 8011426:	603b      	str	r3, [r7, #0]
 8011428:	4613      	mov	r3, r2
 801142a:	80fb      	strh	r3, [r7, #6]
	timer(timer),
 801142c:	68fb      	ldr	r3, [r7, #12]
 801142e:	68ba      	ldr	r2, [r7, #8]
 8011430:	605a      	str	r2, [r3, #4]
	irq(irq),
 8011432:	68fb      	ldr	r3, [r7, #12]
 8011434:	88fa      	ldrh	r2, [r7, #6]
 8011436:	811a      	strh	r2, [r3, #8]
	frequency(frequency),
 8011438:	68fb      	ldr	r3, [r7, #12]
 801143a:	683a      	ldr	r2, [r7, #0]
 801143c:	60da      	str	r2, [r3, #12]
	timerOwnerPtr(ownerPtr)
 801143e:	68fb      	ldr	r3, [r7, #12]
 8011440:	6a3a      	ldr	r2, [r7, #32]
 8011442:	611a      	str	r2, [r3, #16]
{
	interruptPtr = new TimerInterrupt(this->irq, this);	// Instantiate a new Timer Interrupt object and pass "this" pointer
 8011444:	2008      	movs	r0, #8
 8011446:	f00c fea9 	bl	801e19c <_Znwj>
 801144a:	4603      	mov	r3, r0
 801144c:	461c      	mov	r4, r3
 801144e:	68fb      	ldr	r3, [r7, #12]
 8011450:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8011454:	68fa      	ldr	r2, [r7, #12]
 8011456:	4619      	mov	r1, r3
 8011458:	4620      	mov	r0, r4
 801145a:	f000 f8af 	bl	80115bc <_ZN14TimerInterruptC1EiP8pruTimer>
 801145e:	68fb      	ldr	r3, [r7, #12]
 8011460:	601c      	str	r4, [r3, #0]

	this->startTimer();
 8011462:	68f8      	ldr	r0, [r7, #12]
 8011464:	f000 f812 	bl	801148c <_ZN8pruTimer10startTimerEv>
}
 8011468:	68fb      	ldr	r3, [r7, #12]
 801146a:	4618      	mov	r0, r3
 801146c:	3714      	adds	r7, #20
 801146e:	46bd      	mov	sp, r7
 8011470:	bd90      	pop	{r4, r7, pc}

08011472 <_ZN8pruTimer9timerTickEv>:


void pruTimer::timerTick(void)
{
 8011472:	b580      	push	{r7, lr}
 8011474:	b082      	sub	sp, #8
 8011476:	af00      	add	r7, sp, #0
 8011478:	6078      	str	r0, [r7, #4]
	//Do something here
	this->timerOwnerPtr->update();
 801147a:	687b      	ldr	r3, [r7, #4]
 801147c:	691b      	ldr	r3, [r3, #16]
 801147e:	4618      	mov	r0, r3
 8011480:	f7ff fb89 	bl	8010b96 <_ZN9pruThread6updateEv>
}
 8011484:	bf00      	nop
 8011486:	3708      	adds	r7, #8
 8011488:	46bd      	mov	sp, r7
 801148a:	bd80      	pop	{r7, pc}

0801148c <_ZN8pruTimer10startTimerEv>:



void pruTimer::startTimer(void)
{
 801148c:	b580      	push	{r7, lr}
 801148e:	b086      	sub	sp, #24
 8011490:	af00      	add	r7, sp, #0
 8011492:	6078      	str	r0, [r7, #4]
    uint32_t TIM_CLK;

    if (this->timer == TIM2)
 8011494:	687b      	ldr	r3, [r7, #4]
 8011496:	685b      	ldr	r3, [r3, #4]
 8011498:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801149c:	d116      	bne.n	80114cc <_ZN8pruTimer10startTimerEv+0x40>
    {
        printf("	power on Timer 2\n\r");
 801149e:	483f      	ldr	r0, [pc, #252]	@ (801159c <_ZN8pruTimer10startTimerEv+0x110>)
 80114a0:	f00d fa00 	bl	801e8a4 <iprintf>
        __HAL_RCC_TIM2_CLK_ENABLE();
 80114a4:	4b3e      	ldr	r3, [pc, #248]	@ (80115a0 <_ZN8pruTimer10startTimerEv+0x114>)
 80114a6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80114aa:	4a3d      	ldr	r2, [pc, #244]	@ (80115a0 <_ZN8pruTimer10startTimerEv+0x114>)
 80114ac:	f043 0301 	orr.w	r3, r3, #1
 80114b0:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80114b4:	4b3a      	ldr	r3, [pc, #232]	@ (80115a0 <_ZN8pruTimer10startTimerEv+0x114>)
 80114b6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80114ba:	f003 0301 	and.w	r3, r3, #1
 80114be:	613b      	str	r3, [r7, #16]
 80114c0:	693b      	ldr	r3, [r7, #16]
        TIM_CLK = APB1CLK;
 80114c2:	4b38      	ldr	r3, [pc, #224]	@ (80115a4 <_ZN8pruTimer10startTimerEv+0x118>)
 80114c4:	681b      	ldr	r3, [r3, #0]
 80114c6:	085b      	lsrs	r3, r3, #1
 80114c8:	617b      	str	r3, [r7, #20]
 80114ca:	e036      	b.n	801153a <_ZN8pruTimer10startTimerEv+0xae>
    }
    else if (this->timer == TIM3)
 80114cc:	687b      	ldr	r3, [r7, #4]
 80114ce:	685b      	ldr	r3, [r3, #4]
 80114d0:	4a35      	ldr	r2, [pc, #212]	@ (80115a8 <_ZN8pruTimer10startTimerEv+0x11c>)
 80114d2:	4293      	cmp	r3, r2
 80114d4:	d116      	bne.n	8011504 <_ZN8pruTimer10startTimerEv+0x78>
    {
        printf("	power on Timer 3\n\r");
 80114d6:	4835      	ldr	r0, [pc, #212]	@ (80115ac <_ZN8pruTimer10startTimerEv+0x120>)
 80114d8:	f00d f9e4 	bl	801e8a4 <iprintf>
        __HAL_RCC_TIM3_CLK_ENABLE();
 80114dc:	4b30      	ldr	r3, [pc, #192]	@ (80115a0 <_ZN8pruTimer10startTimerEv+0x114>)
 80114de:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80114e2:	4a2f      	ldr	r2, [pc, #188]	@ (80115a0 <_ZN8pruTimer10startTimerEv+0x114>)
 80114e4:	f043 0302 	orr.w	r3, r3, #2
 80114e8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80114ec:	4b2c      	ldr	r3, [pc, #176]	@ (80115a0 <_ZN8pruTimer10startTimerEv+0x114>)
 80114ee:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80114f2:	f003 0302 	and.w	r3, r3, #2
 80114f6:	60fb      	str	r3, [r7, #12]
 80114f8:	68fb      	ldr	r3, [r7, #12]
        TIM_CLK = APB1CLK;
 80114fa:	4b2a      	ldr	r3, [pc, #168]	@ (80115a4 <_ZN8pruTimer10startTimerEv+0x118>)
 80114fc:	681b      	ldr	r3, [r3, #0]
 80114fe:	085b      	lsrs	r3, r3, #1
 8011500:	617b      	str	r3, [r7, #20]
 8011502:	e01a      	b.n	801153a <_ZN8pruTimer10startTimerEv+0xae>
    }
    else if (this->timer == TIM4)
 8011504:	687b      	ldr	r3, [r7, #4]
 8011506:	685b      	ldr	r3, [r3, #4]
 8011508:	4a29      	ldr	r2, [pc, #164]	@ (80115b0 <_ZN8pruTimer10startTimerEv+0x124>)
 801150a:	4293      	cmp	r3, r2
 801150c:	d115      	bne.n	801153a <_ZN8pruTimer10startTimerEv+0xae>
    {
        printf("	power on Timer 4\n\r");
 801150e:	4829      	ldr	r0, [pc, #164]	@ (80115b4 <_ZN8pruTimer10startTimerEv+0x128>)
 8011510:	f00d f9c8 	bl	801e8a4 <iprintf>
        __HAL_RCC_TIM4_CLK_ENABLE();
 8011514:	4b22      	ldr	r3, [pc, #136]	@ (80115a0 <_ZN8pruTimer10startTimerEv+0x114>)
 8011516:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 801151a:	4a21      	ldr	r2, [pc, #132]	@ (80115a0 <_ZN8pruTimer10startTimerEv+0x114>)
 801151c:	f043 0304 	orr.w	r3, r3, #4
 8011520:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8011524:	4b1e      	ldr	r3, [pc, #120]	@ (80115a0 <_ZN8pruTimer10startTimerEv+0x114>)
 8011526:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 801152a:	f003 0304 	and.w	r3, r3, #4
 801152e:	60bb      	str	r3, [r7, #8]
 8011530:	68bb      	ldr	r3, [r7, #8]
        TIM_CLK = APB1CLK;
 8011532:	4b1c      	ldr	r3, [pc, #112]	@ (80115a4 <_ZN8pruTimer10startTimerEv+0x118>)
 8011534:	681b      	ldr	r3, [r3, #0]
 8011536:	085b      	lsrs	r3, r3, #1
 8011538:	617b      	str	r3, [r7, #20]
    }

    //timer update frequency = TIM_CLK/(TIM_PSC+1)/(TIM_ARR + 1)

    this->timer->CR2 &= 0;                                            // UG used as trigg output
 801153a:	687b      	ldr	r3, [r7, #4]
 801153c:	685b      	ldr	r3, [r3, #4]
 801153e:	685b      	ldr	r3, [r3, #4]
 8011540:	687b      	ldr	r3, [r7, #4]
 8011542:	685b      	ldr	r3, [r3, #4]
 8011544:	2200      	movs	r2, #0
 8011546:	605a      	str	r2, [r3, #4]
    this->timer->PSC = TIM_PSC-1;                                     // prescaler
 8011548:	687b      	ldr	r3, [r7, #4]
 801154a:	685b      	ldr	r3, [r3, #4]
 801154c:	2200      	movs	r2, #0
 801154e:	629a      	str	r2, [r3, #40]	@ 0x28
    this->timer->ARR = ((TIM_CLK / TIM_PSC / this->frequency) - 1);   // period           
 8011550:	687b      	ldr	r3, [r7, #4]
 8011552:	68db      	ldr	r3, [r3, #12]
 8011554:	697a      	ldr	r2, [r7, #20]
 8011556:	fbb2 f2f3 	udiv	r2, r2, r3
 801155a:	687b      	ldr	r3, [r7, #4]
 801155c:	685b      	ldr	r3, [r3, #4]
 801155e:	3a01      	subs	r2, #1
 8011560:	62da      	str	r2, [r3, #44]	@ 0x2c
    this->timer->EGR = TIM_EGR_UG;                                    // reinit the counter
 8011562:	687b      	ldr	r3, [r7, #4]
 8011564:	685b      	ldr	r3, [r3, #4]
 8011566:	2201      	movs	r2, #1
 8011568:	615a      	str	r2, [r3, #20]
    this->timer->DIER = TIM_DIER_UIE;                                 // enable update interrupts
 801156a:	687b      	ldr	r3, [r7, #4]
 801156c:	685b      	ldr	r3, [r3, #4]
 801156e:	2201      	movs	r2, #1
 8011570:	60da      	str	r2, [r3, #12]

    this->timer->CR1 |= TIM_CR1_CEN;                                  // enable timer
 8011572:	687b      	ldr	r3, [r7, #4]
 8011574:	685b      	ldr	r3, [r3, #4]
 8011576:	681a      	ldr	r2, [r3, #0]
 8011578:	687b      	ldr	r3, [r7, #4]
 801157a:	685b      	ldr	r3, [r3, #4]
 801157c:	f042 0201 	orr.w	r2, r2, #1
 8011580:	601a      	str	r2, [r3, #0]

    NVIC_EnableIRQ(this->irq);
 8011582:	687b      	ldr	r3, [r7, #4]
 8011584:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8011588:	4618      	mov	r0, r3
 801158a:	f7ff ff29 	bl	80113e0 <__NVIC_EnableIRQ>

    printf("	timer started\n");
 801158e:	480a      	ldr	r0, [pc, #40]	@ (80115b8 <_ZN8pruTimer10startTimerEv+0x12c>)
 8011590:	f00d f9f8 	bl	801e984 <puts>
}
 8011594:	bf00      	nop
 8011596:	3718      	adds	r7, #24
 8011598:	46bd      	mov	sp, r7
 801159a:	bd80      	pop	{r7, pc}
 801159c:	08020360 	.word	0x08020360
 80115a0:	58024400 	.word	0x58024400
 80115a4:	24000030 	.word	0x24000030
 80115a8:	40000400 	.word	0x40000400
 80115ac:	08020374 	.word	0x08020374
 80115b0:	40000800 	.word	0x40000800
 80115b4:	08020388 	.word	0x08020388
 80115b8:	0802039c 	.word	0x0802039c

080115bc <_ZN14TimerInterruptC1EiP8pruTimer>:
#include "../interrupt/interrupt.h"
#include "timerInterrupt.h"
#include "timer.h"


TimerInterrupt::TimerInterrupt(int interruptNumber, pruTimer* owner)
 80115bc:	b580      	push	{r7, lr}
 80115be:	b084      	sub	sp, #16
 80115c0:	af00      	add	r7, sp, #0
 80115c2:	60f8      	str	r0, [r7, #12]
 80115c4:	60b9      	str	r1, [r7, #8]
 80115c6:	607a      	str	r2, [r7, #4]
 80115c8:	68fb      	ldr	r3, [r7, #12]
 80115ca:	4618      	mov	r0, r3
 80115cc:	f7f0 ff40 	bl	8002450 <_ZN9InterruptC1Ev>
 80115d0:	4a07      	ldr	r2, [pc, #28]	@ (80115f0 <_ZN14TimerInterruptC1EiP8pruTimer+0x34>)
 80115d2:	68fb      	ldr	r3, [r7, #12]
 80115d4:	601a      	str	r2, [r3, #0]
{
	// Allows interrupt to access owner's data
	InterruptOwnerPtr = owner;
 80115d6:	68fb      	ldr	r3, [r7, #12]
 80115d8:	687a      	ldr	r2, [r7, #4]
 80115da:	605a      	str	r2, [r3, #4]

	// When a device interrupt object is instantiated, the Register function must be called to let the
	// Interrupt base class know that there is an appropriate ISR function for the given interrupt.
	Interrupt::Register(interruptNumber, this);
 80115dc:	68fb      	ldr	r3, [r7, #12]
 80115de:	4619      	mov	r1, r3
 80115e0:	68b8      	ldr	r0, [r7, #8]
 80115e2:	f7f0 ff45 	bl	8002470 <_ZN9Interrupt8RegisterEiPS_>
}
 80115e6:	68fb      	ldr	r3, [r7, #12]
 80115e8:	4618      	mov	r0, r3
 80115ea:	3710      	adds	r7, #16
 80115ec:	46bd      	mov	sp, r7
 80115ee:	bd80      	pop	{r7, pc}
 80115f0:	080206a8 	.word	0x080206a8

080115f4 <_ZN14TimerInterrupt11ISR_HandlerEv>:


void TimerInterrupt::ISR_Handler(void)
{
 80115f4:	b580      	push	{r7, lr}
 80115f6:	b082      	sub	sp, #8
 80115f8:	af00      	add	r7, sp, #0
 80115fa:	6078      	str	r0, [r7, #4]
	this->InterruptOwnerPtr->timerTick();
 80115fc:	687b      	ldr	r3, [r7, #4]
 80115fe:	685b      	ldr	r3, [r3, #4]
 8011600:	4618      	mov	r0, r3
 8011602:	f7ff ff36 	bl	8011472 <_ZN8pruTimer9timerTickEv>
}
 8011606:	bf00      	nop
 8011608:	3708      	adds	r7, #8
 801160a:	46bd      	mov	sp, r7
 801160c:	bd80      	pop	{r7, pc}
	...

08011610 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8011610:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8011648 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8011614:	f7fa fc72 	bl	800befc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8011618:	480c      	ldr	r0, [pc, #48]	@ (801164c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 801161a:	490d      	ldr	r1, [pc, #52]	@ (8011650 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 801161c:	4a0d      	ldr	r2, [pc, #52]	@ (8011654 <LoopFillZerobss+0x1a>)
  movs r3, #0
 801161e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8011620:	e002      	b.n	8011628 <LoopCopyDataInit>

08011622 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8011622:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8011624:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8011626:	3304      	adds	r3, #4

08011628 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8011628:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 801162a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 801162c:	d3f9      	bcc.n	8011622 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 801162e:	4a0a      	ldr	r2, [pc, #40]	@ (8011658 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8011630:	4c0a      	ldr	r4, [pc, #40]	@ (801165c <LoopFillZerobss+0x22>)
  movs r3, #0
 8011632:	2300      	movs	r3, #0
  b LoopFillZerobss
 8011634:	e001      	b.n	801163a <LoopFillZerobss>

08011636 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8011636:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8011638:	3204      	adds	r2, #4

0801163a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 801163a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 801163c:	d3fb      	bcc.n	8011636 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 801163e:	f00d fb43 	bl	801ecc8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8011642:	f7f6 fe7f 	bl	8008344 <main>
  bx  lr
 8011646:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8011648:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 801164c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8011650:	2400009c 	.word	0x2400009c
  ldr r2, =_sidata
 8011654:	080207f8 	.word	0x080207f8
  ldr r2, =_sbss
 8011658:	2400009c 	.word	0x2400009c
  ldr r4, =_ebss
 801165c:	24000ce0 	.word	0x24000ce0

08011660 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8011660:	e7fe      	b.n	8011660 <ADC3_IRQHandler>
	...

08011664 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8011664:	b580      	push	{r7, lr}
 8011666:	b082      	sub	sp, #8
 8011668:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 801166a:	2003      	movs	r0, #3
 801166c:	f000 f9a2 	bl	80119b4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8011670:	f003 fdb0 	bl	80151d4 <HAL_RCC_GetSysClockFreq>
 8011674:	4602      	mov	r2, r0
 8011676:	4b15      	ldr	r3, [pc, #84]	@ (80116cc <HAL_Init+0x68>)
 8011678:	699b      	ldr	r3, [r3, #24]
 801167a:	0a1b      	lsrs	r3, r3, #8
 801167c:	f003 030f 	and.w	r3, r3, #15
 8011680:	4913      	ldr	r1, [pc, #76]	@ (80116d0 <HAL_Init+0x6c>)
 8011682:	5ccb      	ldrb	r3, [r1, r3]
 8011684:	f003 031f 	and.w	r3, r3, #31
 8011688:	fa22 f303 	lsr.w	r3, r2, r3
 801168c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 801168e:	4b0f      	ldr	r3, [pc, #60]	@ (80116cc <HAL_Init+0x68>)
 8011690:	699b      	ldr	r3, [r3, #24]
 8011692:	f003 030f 	and.w	r3, r3, #15
 8011696:	4a0e      	ldr	r2, [pc, #56]	@ (80116d0 <HAL_Init+0x6c>)
 8011698:	5cd3      	ldrb	r3, [r2, r3]
 801169a:	f003 031f 	and.w	r3, r3, #31
 801169e:	687a      	ldr	r2, [r7, #4]
 80116a0:	fa22 f303 	lsr.w	r3, r2, r3
 80116a4:	4a0b      	ldr	r2, [pc, #44]	@ (80116d4 <HAL_Init+0x70>)
 80116a6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80116a8:	4a0b      	ldr	r2, [pc, #44]	@ (80116d8 <HAL_Init+0x74>)
 80116aa:	687b      	ldr	r3, [r7, #4]
 80116ac:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80116ae:	200f      	movs	r0, #15
 80116b0:	f000 f814 	bl	80116dc <HAL_InitTick>
 80116b4:	4603      	mov	r3, r0
 80116b6:	2b00      	cmp	r3, #0
 80116b8:	d001      	beq.n	80116be <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80116ba:	2301      	movs	r3, #1
 80116bc:	e002      	b.n	80116c4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80116be:	f7fa fa03 	bl	800bac8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80116c2:	2300      	movs	r3, #0
}
 80116c4:	4618      	mov	r0, r3
 80116c6:	3708      	adds	r7, #8
 80116c8:	46bd      	mov	sp, r7
 80116ca:	bd80      	pop	{r7, pc}
 80116cc:	58024400 	.word	0x58024400
 80116d0:	08020554 	.word	0x08020554
 80116d4:	24000034 	.word	0x24000034
 80116d8:	24000030 	.word	0x24000030

080116dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80116dc:	b580      	push	{r7, lr}
 80116de:	b082      	sub	sp, #8
 80116e0:	af00      	add	r7, sp, #0
 80116e2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80116e4:	4b15      	ldr	r3, [pc, #84]	@ (801173c <HAL_InitTick+0x60>)
 80116e6:	781b      	ldrb	r3, [r3, #0]
 80116e8:	2b00      	cmp	r3, #0
 80116ea:	d101      	bne.n	80116f0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80116ec:	2301      	movs	r3, #1
 80116ee:	e021      	b.n	8011734 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80116f0:	4b13      	ldr	r3, [pc, #76]	@ (8011740 <HAL_InitTick+0x64>)
 80116f2:	681a      	ldr	r2, [r3, #0]
 80116f4:	4b11      	ldr	r3, [pc, #68]	@ (801173c <HAL_InitTick+0x60>)
 80116f6:	781b      	ldrb	r3, [r3, #0]
 80116f8:	4619      	mov	r1, r3
 80116fa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80116fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8011702:	fbb2 f3f3 	udiv	r3, r2, r3
 8011706:	4618      	mov	r0, r3
 8011708:	f000 f98b 	bl	8011a22 <HAL_SYSTICK_Config>
 801170c:	4603      	mov	r3, r0
 801170e:	2b00      	cmp	r3, #0
 8011710:	d001      	beq.n	8011716 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8011712:	2301      	movs	r3, #1
 8011714:	e00e      	b.n	8011734 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8011716:	687b      	ldr	r3, [r7, #4]
 8011718:	2b0f      	cmp	r3, #15
 801171a:	d80a      	bhi.n	8011732 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 801171c:	2200      	movs	r2, #0
 801171e:	6879      	ldr	r1, [r7, #4]
 8011720:	f04f 30ff 	mov.w	r0, #4294967295
 8011724:	f000 f951 	bl	80119ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8011728:	4a06      	ldr	r2, [pc, #24]	@ (8011744 <HAL_InitTick+0x68>)
 801172a:	687b      	ldr	r3, [r7, #4]
 801172c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 801172e:	2300      	movs	r3, #0
 8011730:	e000      	b.n	8011734 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8011732:	2301      	movs	r3, #1
}
 8011734:	4618      	mov	r0, r3
 8011736:	3708      	adds	r7, #8
 8011738:	46bd      	mov	sp, r7
 801173a:	bd80      	pop	{r7, pc}
 801173c:	2400003c 	.word	0x2400003c
 8011740:	24000030 	.word	0x24000030
 8011744:	24000038 	.word	0x24000038

08011748 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8011748:	b480      	push	{r7}
 801174a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 801174c:	4b06      	ldr	r3, [pc, #24]	@ (8011768 <HAL_IncTick+0x20>)
 801174e:	781b      	ldrb	r3, [r3, #0]
 8011750:	461a      	mov	r2, r3
 8011752:	4b06      	ldr	r3, [pc, #24]	@ (801176c <HAL_IncTick+0x24>)
 8011754:	681b      	ldr	r3, [r3, #0]
 8011756:	4413      	add	r3, r2
 8011758:	4a04      	ldr	r2, [pc, #16]	@ (801176c <HAL_IncTick+0x24>)
 801175a:	6013      	str	r3, [r2, #0]
}
 801175c:	bf00      	nop
 801175e:	46bd      	mov	sp, r7
 8011760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011764:	4770      	bx	lr
 8011766:	bf00      	nop
 8011768:	2400003c 	.word	0x2400003c
 801176c:	240004e8 	.word	0x240004e8

08011770 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8011770:	b480      	push	{r7}
 8011772:	af00      	add	r7, sp, #0
  return uwTick;
 8011774:	4b03      	ldr	r3, [pc, #12]	@ (8011784 <HAL_GetTick+0x14>)
 8011776:	681b      	ldr	r3, [r3, #0]
}
 8011778:	4618      	mov	r0, r3
 801177a:	46bd      	mov	sp, r7
 801177c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011780:	4770      	bx	lr
 8011782:	bf00      	nop
 8011784:	240004e8 	.word	0x240004e8

08011788 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8011788:	b580      	push	{r7, lr}
 801178a:	b084      	sub	sp, #16
 801178c:	af00      	add	r7, sp, #0
 801178e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8011790:	f7ff ffee 	bl	8011770 <HAL_GetTick>
 8011794:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8011796:	687b      	ldr	r3, [r7, #4]
 8011798:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 801179a:	68fb      	ldr	r3, [r7, #12]
 801179c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80117a0:	d005      	beq.n	80117ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80117a2:	4b0a      	ldr	r3, [pc, #40]	@ (80117cc <HAL_Delay+0x44>)
 80117a4:	781b      	ldrb	r3, [r3, #0]
 80117a6:	461a      	mov	r2, r3
 80117a8:	68fb      	ldr	r3, [r7, #12]
 80117aa:	4413      	add	r3, r2
 80117ac:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80117ae:	bf00      	nop
 80117b0:	f7ff ffde 	bl	8011770 <HAL_GetTick>
 80117b4:	4602      	mov	r2, r0
 80117b6:	68bb      	ldr	r3, [r7, #8]
 80117b8:	1ad3      	subs	r3, r2, r3
 80117ba:	68fa      	ldr	r2, [r7, #12]
 80117bc:	429a      	cmp	r2, r3
 80117be:	d8f7      	bhi.n	80117b0 <HAL_Delay+0x28>
  {
  }
}
 80117c0:	bf00      	nop
 80117c2:	bf00      	nop
 80117c4:	3710      	adds	r7, #16
 80117c6:	46bd      	mov	sp, r7
 80117c8:	bd80      	pop	{r7, pc}
 80117ca:	bf00      	nop
 80117cc:	2400003c 	.word	0x2400003c

080117d0 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80117d0:	b480      	push	{r7}
 80117d2:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80117d4:	4b03      	ldr	r3, [pc, #12]	@ (80117e4 <HAL_GetREVID+0x14>)
 80117d6:	681b      	ldr	r3, [r3, #0]
 80117d8:	0c1b      	lsrs	r3, r3, #16
}
 80117da:	4618      	mov	r0, r3
 80117dc:	46bd      	mov	sp, r7
 80117de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117e2:	4770      	bx	lr
 80117e4:	5c001000 	.word	0x5c001000

080117e8 <__NVIC_SetPriorityGrouping>:
{
 80117e8:	b480      	push	{r7}
 80117ea:	b085      	sub	sp, #20
 80117ec:	af00      	add	r7, sp, #0
 80117ee:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80117f0:	687b      	ldr	r3, [r7, #4]
 80117f2:	f003 0307 	and.w	r3, r3, #7
 80117f6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80117f8:	4b0b      	ldr	r3, [pc, #44]	@ (8011828 <__NVIC_SetPriorityGrouping+0x40>)
 80117fa:	68db      	ldr	r3, [r3, #12]
 80117fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80117fe:	68ba      	ldr	r2, [r7, #8]
 8011800:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8011804:	4013      	ands	r3, r2
 8011806:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8011808:	68fb      	ldr	r3, [r7, #12]
 801180a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 801180c:	68bb      	ldr	r3, [r7, #8]
 801180e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8011810:	4b06      	ldr	r3, [pc, #24]	@ (801182c <__NVIC_SetPriorityGrouping+0x44>)
 8011812:	4313      	orrs	r3, r2
 8011814:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8011816:	4a04      	ldr	r2, [pc, #16]	@ (8011828 <__NVIC_SetPriorityGrouping+0x40>)
 8011818:	68bb      	ldr	r3, [r7, #8]
 801181a:	60d3      	str	r3, [r2, #12]
}
 801181c:	bf00      	nop
 801181e:	3714      	adds	r7, #20
 8011820:	46bd      	mov	sp, r7
 8011822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011826:	4770      	bx	lr
 8011828:	e000ed00 	.word	0xe000ed00
 801182c:	05fa0000 	.word	0x05fa0000

08011830 <__NVIC_GetPriorityGrouping>:
{
 8011830:	b480      	push	{r7}
 8011832:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8011834:	4b04      	ldr	r3, [pc, #16]	@ (8011848 <__NVIC_GetPriorityGrouping+0x18>)
 8011836:	68db      	ldr	r3, [r3, #12]
 8011838:	0a1b      	lsrs	r3, r3, #8
 801183a:	f003 0307 	and.w	r3, r3, #7
}
 801183e:	4618      	mov	r0, r3
 8011840:	46bd      	mov	sp, r7
 8011842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011846:	4770      	bx	lr
 8011848:	e000ed00 	.word	0xe000ed00

0801184c <__NVIC_EnableIRQ>:
{
 801184c:	b480      	push	{r7}
 801184e:	b083      	sub	sp, #12
 8011850:	af00      	add	r7, sp, #0
 8011852:	4603      	mov	r3, r0
 8011854:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8011856:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801185a:	2b00      	cmp	r3, #0
 801185c:	db0b      	blt.n	8011876 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 801185e:	88fb      	ldrh	r3, [r7, #6]
 8011860:	f003 021f 	and.w	r2, r3, #31
 8011864:	4907      	ldr	r1, [pc, #28]	@ (8011884 <__NVIC_EnableIRQ+0x38>)
 8011866:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801186a:	095b      	lsrs	r3, r3, #5
 801186c:	2001      	movs	r0, #1
 801186e:	fa00 f202 	lsl.w	r2, r0, r2
 8011872:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8011876:	bf00      	nop
 8011878:	370c      	adds	r7, #12
 801187a:	46bd      	mov	sp, r7
 801187c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011880:	4770      	bx	lr
 8011882:	bf00      	nop
 8011884:	e000e100 	.word	0xe000e100

08011888 <__NVIC_SetPriority>:
{
 8011888:	b480      	push	{r7}
 801188a:	b083      	sub	sp, #12
 801188c:	af00      	add	r7, sp, #0
 801188e:	4603      	mov	r3, r0
 8011890:	6039      	str	r1, [r7, #0]
 8011892:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8011894:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011898:	2b00      	cmp	r3, #0
 801189a:	db0a      	blt.n	80118b2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801189c:	683b      	ldr	r3, [r7, #0]
 801189e:	b2da      	uxtb	r2, r3
 80118a0:	490c      	ldr	r1, [pc, #48]	@ (80118d4 <__NVIC_SetPriority+0x4c>)
 80118a2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80118a6:	0112      	lsls	r2, r2, #4
 80118a8:	b2d2      	uxtb	r2, r2
 80118aa:	440b      	add	r3, r1
 80118ac:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80118b0:	e00a      	b.n	80118c8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80118b2:	683b      	ldr	r3, [r7, #0]
 80118b4:	b2da      	uxtb	r2, r3
 80118b6:	4908      	ldr	r1, [pc, #32]	@ (80118d8 <__NVIC_SetPriority+0x50>)
 80118b8:	88fb      	ldrh	r3, [r7, #6]
 80118ba:	f003 030f 	and.w	r3, r3, #15
 80118be:	3b04      	subs	r3, #4
 80118c0:	0112      	lsls	r2, r2, #4
 80118c2:	b2d2      	uxtb	r2, r2
 80118c4:	440b      	add	r3, r1
 80118c6:	761a      	strb	r2, [r3, #24]
}
 80118c8:	bf00      	nop
 80118ca:	370c      	adds	r7, #12
 80118cc:	46bd      	mov	sp, r7
 80118ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118d2:	4770      	bx	lr
 80118d4:	e000e100 	.word	0xe000e100
 80118d8:	e000ed00 	.word	0xe000ed00

080118dc <NVIC_EncodePriority>:
{
 80118dc:	b480      	push	{r7}
 80118de:	b089      	sub	sp, #36	@ 0x24
 80118e0:	af00      	add	r7, sp, #0
 80118e2:	60f8      	str	r0, [r7, #12]
 80118e4:	60b9      	str	r1, [r7, #8]
 80118e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80118e8:	68fb      	ldr	r3, [r7, #12]
 80118ea:	f003 0307 	and.w	r3, r3, #7
 80118ee:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80118f0:	69fb      	ldr	r3, [r7, #28]
 80118f2:	f1c3 0307 	rsb	r3, r3, #7
 80118f6:	2b04      	cmp	r3, #4
 80118f8:	bf28      	it	cs
 80118fa:	2304      	movcs	r3, #4
 80118fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80118fe:	69fb      	ldr	r3, [r7, #28]
 8011900:	3304      	adds	r3, #4
 8011902:	2b06      	cmp	r3, #6
 8011904:	d902      	bls.n	801190c <NVIC_EncodePriority+0x30>
 8011906:	69fb      	ldr	r3, [r7, #28]
 8011908:	3b03      	subs	r3, #3
 801190a:	e000      	b.n	801190e <NVIC_EncodePriority+0x32>
 801190c:	2300      	movs	r3, #0
 801190e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8011910:	f04f 32ff 	mov.w	r2, #4294967295
 8011914:	69bb      	ldr	r3, [r7, #24]
 8011916:	fa02 f303 	lsl.w	r3, r2, r3
 801191a:	43da      	mvns	r2, r3
 801191c:	68bb      	ldr	r3, [r7, #8]
 801191e:	401a      	ands	r2, r3
 8011920:	697b      	ldr	r3, [r7, #20]
 8011922:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8011924:	f04f 31ff 	mov.w	r1, #4294967295
 8011928:	697b      	ldr	r3, [r7, #20]
 801192a:	fa01 f303 	lsl.w	r3, r1, r3
 801192e:	43d9      	mvns	r1, r3
 8011930:	687b      	ldr	r3, [r7, #4]
 8011932:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8011934:	4313      	orrs	r3, r2
}
 8011936:	4618      	mov	r0, r3
 8011938:	3724      	adds	r7, #36	@ 0x24
 801193a:	46bd      	mov	sp, r7
 801193c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011940:	4770      	bx	lr
	...

08011944 <__NVIC_SystemReset>:
{
 8011944:	b480      	push	{r7}
 8011946:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8011948:	f3bf 8f4f 	dsb	sy
}
 801194c:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 801194e:	4b06      	ldr	r3, [pc, #24]	@ (8011968 <__NVIC_SystemReset+0x24>)
 8011950:	68db      	ldr	r3, [r3, #12]
 8011952:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8011956:	4904      	ldr	r1, [pc, #16]	@ (8011968 <__NVIC_SystemReset+0x24>)
 8011958:	4b04      	ldr	r3, [pc, #16]	@ (801196c <__NVIC_SystemReset+0x28>)
 801195a:	4313      	orrs	r3, r2
 801195c:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 801195e:	f3bf 8f4f 	dsb	sy
}
 8011962:	bf00      	nop
    __NOP();
 8011964:	bf00      	nop
 8011966:	e7fd      	b.n	8011964 <__NVIC_SystemReset+0x20>
 8011968:	e000ed00 	.word	0xe000ed00
 801196c:	05fa0004 	.word	0x05fa0004

08011970 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8011970:	b580      	push	{r7, lr}
 8011972:	b082      	sub	sp, #8
 8011974:	af00      	add	r7, sp, #0
 8011976:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8011978:	687b      	ldr	r3, [r7, #4]
 801197a:	3b01      	subs	r3, #1
 801197c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8011980:	d301      	bcc.n	8011986 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8011982:	2301      	movs	r3, #1
 8011984:	e00f      	b.n	80119a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8011986:	4a0a      	ldr	r2, [pc, #40]	@ (80119b0 <SysTick_Config+0x40>)
 8011988:	687b      	ldr	r3, [r7, #4]
 801198a:	3b01      	subs	r3, #1
 801198c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 801198e:	210f      	movs	r1, #15
 8011990:	f04f 30ff 	mov.w	r0, #4294967295
 8011994:	f7ff ff78 	bl	8011888 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8011998:	4b05      	ldr	r3, [pc, #20]	@ (80119b0 <SysTick_Config+0x40>)
 801199a:	2200      	movs	r2, #0
 801199c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 801199e:	4b04      	ldr	r3, [pc, #16]	@ (80119b0 <SysTick_Config+0x40>)
 80119a0:	2207      	movs	r2, #7
 80119a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80119a4:	2300      	movs	r3, #0
}
 80119a6:	4618      	mov	r0, r3
 80119a8:	3708      	adds	r7, #8
 80119aa:	46bd      	mov	sp, r7
 80119ac:	bd80      	pop	{r7, pc}
 80119ae:	bf00      	nop
 80119b0:	e000e010 	.word	0xe000e010

080119b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80119b4:	b580      	push	{r7, lr}
 80119b6:	b082      	sub	sp, #8
 80119b8:	af00      	add	r7, sp, #0
 80119ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80119bc:	6878      	ldr	r0, [r7, #4]
 80119be:	f7ff ff13 	bl	80117e8 <__NVIC_SetPriorityGrouping>
}
 80119c2:	bf00      	nop
 80119c4:	3708      	adds	r7, #8
 80119c6:	46bd      	mov	sp, r7
 80119c8:	bd80      	pop	{r7, pc}

080119ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80119ca:	b580      	push	{r7, lr}
 80119cc:	b086      	sub	sp, #24
 80119ce:	af00      	add	r7, sp, #0
 80119d0:	4603      	mov	r3, r0
 80119d2:	60b9      	str	r1, [r7, #8]
 80119d4:	607a      	str	r2, [r7, #4]
 80119d6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80119d8:	f7ff ff2a 	bl	8011830 <__NVIC_GetPriorityGrouping>
 80119dc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80119de:	687a      	ldr	r2, [r7, #4]
 80119e0:	68b9      	ldr	r1, [r7, #8]
 80119e2:	6978      	ldr	r0, [r7, #20]
 80119e4:	f7ff ff7a 	bl	80118dc <NVIC_EncodePriority>
 80119e8:	4602      	mov	r2, r0
 80119ea:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80119ee:	4611      	mov	r1, r2
 80119f0:	4618      	mov	r0, r3
 80119f2:	f7ff ff49 	bl	8011888 <__NVIC_SetPriority>
}
 80119f6:	bf00      	nop
 80119f8:	3718      	adds	r7, #24
 80119fa:	46bd      	mov	sp, r7
 80119fc:	bd80      	pop	{r7, pc}

080119fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80119fe:	b580      	push	{r7, lr}
 8011a00:	b082      	sub	sp, #8
 8011a02:	af00      	add	r7, sp, #0
 8011a04:	4603      	mov	r3, r0
 8011a06:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8011a08:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011a0c:	4618      	mov	r0, r3
 8011a0e:	f7ff ff1d 	bl	801184c <__NVIC_EnableIRQ>
}
 8011a12:	bf00      	nop
 8011a14:	3708      	adds	r7, #8
 8011a16:	46bd      	mov	sp, r7
 8011a18:	bd80      	pop	{r7, pc}

08011a1a <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8011a1a:	b580      	push	{r7, lr}
 8011a1c:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8011a1e:	f7ff ff91 	bl	8011944 <__NVIC_SystemReset>

08011a22 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8011a22:	b580      	push	{r7, lr}
 8011a24:	b082      	sub	sp, #8
 8011a26:	af00      	add	r7, sp, #0
 8011a28:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8011a2a:	6878      	ldr	r0, [r7, #4]
 8011a2c:	f7ff ffa0 	bl	8011970 <SysTick_Config>
 8011a30:	4603      	mov	r3, r0
}
 8011a32:	4618      	mov	r0, r3
 8011a34:	3708      	adds	r7, #8
 8011a36:	46bd      	mov	sp, r7
 8011a38:	bd80      	pop	{r7, pc}
	...

08011a3c <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8011a3c:	b480      	push	{r7}
 8011a3e:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8011a40:	f3bf 8f5f 	dmb	sy
}
 8011a44:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8011a46:	4b07      	ldr	r3, [pc, #28]	@ (8011a64 <HAL_MPU_Disable+0x28>)
 8011a48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011a4a:	4a06      	ldr	r2, [pc, #24]	@ (8011a64 <HAL_MPU_Disable+0x28>)
 8011a4c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8011a50:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8011a52:	4b05      	ldr	r3, [pc, #20]	@ (8011a68 <HAL_MPU_Disable+0x2c>)
 8011a54:	2200      	movs	r2, #0
 8011a56:	605a      	str	r2, [r3, #4]
}
 8011a58:	bf00      	nop
 8011a5a:	46bd      	mov	sp, r7
 8011a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a60:	4770      	bx	lr
 8011a62:	bf00      	nop
 8011a64:	e000ed00 	.word	0xe000ed00
 8011a68:	e000ed90 	.word	0xe000ed90

08011a6c <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8011a6c:	b480      	push	{r7}
 8011a6e:	b083      	sub	sp, #12
 8011a70:	af00      	add	r7, sp, #0
 8011a72:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8011a74:	4a0b      	ldr	r2, [pc, #44]	@ (8011aa4 <HAL_MPU_Enable+0x38>)
 8011a76:	687b      	ldr	r3, [r7, #4]
 8011a78:	f043 0301 	orr.w	r3, r3, #1
 8011a7c:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8011a7e:	4b0a      	ldr	r3, [pc, #40]	@ (8011aa8 <HAL_MPU_Enable+0x3c>)
 8011a80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011a82:	4a09      	ldr	r2, [pc, #36]	@ (8011aa8 <HAL_MPU_Enable+0x3c>)
 8011a84:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8011a88:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8011a8a:	f3bf 8f4f 	dsb	sy
}
 8011a8e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8011a90:	f3bf 8f6f 	isb	sy
}
 8011a94:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8011a96:	bf00      	nop
 8011a98:	370c      	adds	r7, #12
 8011a9a:	46bd      	mov	sp, r7
 8011a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011aa0:	4770      	bx	lr
 8011aa2:	bf00      	nop
 8011aa4:	e000ed90 	.word	0xe000ed90
 8011aa8:	e000ed00 	.word	0xe000ed00

08011aac <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8011aac:	b480      	push	{r7}
 8011aae:	b083      	sub	sp, #12
 8011ab0:	af00      	add	r7, sp, #0
 8011ab2:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8011ab4:	687b      	ldr	r3, [r7, #4]
 8011ab6:	785a      	ldrb	r2, [r3, #1]
 8011ab8:	4b1b      	ldr	r3, [pc, #108]	@ (8011b28 <HAL_MPU_ConfigRegion+0x7c>)
 8011aba:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8011abc:	4b1a      	ldr	r3, [pc, #104]	@ (8011b28 <HAL_MPU_ConfigRegion+0x7c>)
 8011abe:	691b      	ldr	r3, [r3, #16]
 8011ac0:	4a19      	ldr	r2, [pc, #100]	@ (8011b28 <HAL_MPU_ConfigRegion+0x7c>)
 8011ac2:	f023 0301 	bic.w	r3, r3, #1
 8011ac6:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8011ac8:	4a17      	ldr	r2, [pc, #92]	@ (8011b28 <HAL_MPU_ConfigRegion+0x7c>)
 8011aca:	687b      	ldr	r3, [r7, #4]
 8011acc:	685b      	ldr	r3, [r3, #4]
 8011ace:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8011ad0:	687b      	ldr	r3, [r7, #4]
 8011ad2:	7b1b      	ldrb	r3, [r3, #12]
 8011ad4:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8011ad6:	687b      	ldr	r3, [r7, #4]
 8011ad8:	7adb      	ldrb	r3, [r3, #11]
 8011ada:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8011adc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8011ade:	687b      	ldr	r3, [r7, #4]
 8011ae0:	7a9b      	ldrb	r3, [r3, #10]
 8011ae2:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8011ae4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8011ae6:	687b      	ldr	r3, [r7, #4]
 8011ae8:	7b5b      	ldrb	r3, [r3, #13]
 8011aea:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8011aec:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8011aee:	687b      	ldr	r3, [r7, #4]
 8011af0:	7b9b      	ldrb	r3, [r3, #14]
 8011af2:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8011af4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8011af6:	687b      	ldr	r3, [r7, #4]
 8011af8:	7bdb      	ldrb	r3, [r3, #15]
 8011afa:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8011afc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8011afe:	687b      	ldr	r3, [r7, #4]
 8011b00:	7a5b      	ldrb	r3, [r3, #9]
 8011b02:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8011b04:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8011b06:	687b      	ldr	r3, [r7, #4]
 8011b08:	7a1b      	ldrb	r3, [r3, #8]
 8011b0a:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8011b0c:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8011b0e:	687a      	ldr	r2, [r7, #4]
 8011b10:	7812      	ldrb	r2, [r2, #0]
 8011b12:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8011b14:	4a04      	ldr	r2, [pc, #16]	@ (8011b28 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8011b16:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8011b18:	6113      	str	r3, [r2, #16]
}
 8011b1a:	bf00      	nop
 8011b1c:	370c      	adds	r7, #12
 8011b1e:	46bd      	mov	sp, r7
 8011b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b24:	4770      	bx	lr
 8011b26:	bf00      	nop
 8011b28:	e000ed90 	.word	0xe000ed90

08011b2c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8011b2c:	b580      	push	{r7, lr}
 8011b2e:	b086      	sub	sp, #24
 8011b30:	af00      	add	r7, sp, #0
 8011b32:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8011b34:	f7ff fe1c 	bl	8011770 <HAL_GetTick>
 8011b38:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8011b3a:	687b      	ldr	r3, [r7, #4]
 8011b3c:	2b00      	cmp	r3, #0
 8011b3e:	d101      	bne.n	8011b44 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8011b40:	2301      	movs	r3, #1
 8011b42:	e316      	b.n	8012172 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8011b44:	687b      	ldr	r3, [r7, #4]
 8011b46:	681b      	ldr	r3, [r3, #0]
 8011b48:	4a66      	ldr	r2, [pc, #408]	@ (8011ce4 <HAL_DMA_Init+0x1b8>)
 8011b4a:	4293      	cmp	r3, r2
 8011b4c:	d04a      	beq.n	8011be4 <HAL_DMA_Init+0xb8>
 8011b4e:	687b      	ldr	r3, [r7, #4]
 8011b50:	681b      	ldr	r3, [r3, #0]
 8011b52:	4a65      	ldr	r2, [pc, #404]	@ (8011ce8 <HAL_DMA_Init+0x1bc>)
 8011b54:	4293      	cmp	r3, r2
 8011b56:	d045      	beq.n	8011be4 <HAL_DMA_Init+0xb8>
 8011b58:	687b      	ldr	r3, [r7, #4]
 8011b5a:	681b      	ldr	r3, [r3, #0]
 8011b5c:	4a63      	ldr	r2, [pc, #396]	@ (8011cec <HAL_DMA_Init+0x1c0>)
 8011b5e:	4293      	cmp	r3, r2
 8011b60:	d040      	beq.n	8011be4 <HAL_DMA_Init+0xb8>
 8011b62:	687b      	ldr	r3, [r7, #4]
 8011b64:	681b      	ldr	r3, [r3, #0]
 8011b66:	4a62      	ldr	r2, [pc, #392]	@ (8011cf0 <HAL_DMA_Init+0x1c4>)
 8011b68:	4293      	cmp	r3, r2
 8011b6a:	d03b      	beq.n	8011be4 <HAL_DMA_Init+0xb8>
 8011b6c:	687b      	ldr	r3, [r7, #4]
 8011b6e:	681b      	ldr	r3, [r3, #0]
 8011b70:	4a60      	ldr	r2, [pc, #384]	@ (8011cf4 <HAL_DMA_Init+0x1c8>)
 8011b72:	4293      	cmp	r3, r2
 8011b74:	d036      	beq.n	8011be4 <HAL_DMA_Init+0xb8>
 8011b76:	687b      	ldr	r3, [r7, #4]
 8011b78:	681b      	ldr	r3, [r3, #0]
 8011b7a:	4a5f      	ldr	r2, [pc, #380]	@ (8011cf8 <HAL_DMA_Init+0x1cc>)
 8011b7c:	4293      	cmp	r3, r2
 8011b7e:	d031      	beq.n	8011be4 <HAL_DMA_Init+0xb8>
 8011b80:	687b      	ldr	r3, [r7, #4]
 8011b82:	681b      	ldr	r3, [r3, #0]
 8011b84:	4a5d      	ldr	r2, [pc, #372]	@ (8011cfc <HAL_DMA_Init+0x1d0>)
 8011b86:	4293      	cmp	r3, r2
 8011b88:	d02c      	beq.n	8011be4 <HAL_DMA_Init+0xb8>
 8011b8a:	687b      	ldr	r3, [r7, #4]
 8011b8c:	681b      	ldr	r3, [r3, #0]
 8011b8e:	4a5c      	ldr	r2, [pc, #368]	@ (8011d00 <HAL_DMA_Init+0x1d4>)
 8011b90:	4293      	cmp	r3, r2
 8011b92:	d027      	beq.n	8011be4 <HAL_DMA_Init+0xb8>
 8011b94:	687b      	ldr	r3, [r7, #4]
 8011b96:	681b      	ldr	r3, [r3, #0]
 8011b98:	4a5a      	ldr	r2, [pc, #360]	@ (8011d04 <HAL_DMA_Init+0x1d8>)
 8011b9a:	4293      	cmp	r3, r2
 8011b9c:	d022      	beq.n	8011be4 <HAL_DMA_Init+0xb8>
 8011b9e:	687b      	ldr	r3, [r7, #4]
 8011ba0:	681b      	ldr	r3, [r3, #0]
 8011ba2:	4a59      	ldr	r2, [pc, #356]	@ (8011d08 <HAL_DMA_Init+0x1dc>)
 8011ba4:	4293      	cmp	r3, r2
 8011ba6:	d01d      	beq.n	8011be4 <HAL_DMA_Init+0xb8>
 8011ba8:	687b      	ldr	r3, [r7, #4]
 8011baa:	681b      	ldr	r3, [r3, #0]
 8011bac:	4a57      	ldr	r2, [pc, #348]	@ (8011d0c <HAL_DMA_Init+0x1e0>)
 8011bae:	4293      	cmp	r3, r2
 8011bb0:	d018      	beq.n	8011be4 <HAL_DMA_Init+0xb8>
 8011bb2:	687b      	ldr	r3, [r7, #4]
 8011bb4:	681b      	ldr	r3, [r3, #0]
 8011bb6:	4a56      	ldr	r2, [pc, #344]	@ (8011d10 <HAL_DMA_Init+0x1e4>)
 8011bb8:	4293      	cmp	r3, r2
 8011bba:	d013      	beq.n	8011be4 <HAL_DMA_Init+0xb8>
 8011bbc:	687b      	ldr	r3, [r7, #4]
 8011bbe:	681b      	ldr	r3, [r3, #0]
 8011bc0:	4a54      	ldr	r2, [pc, #336]	@ (8011d14 <HAL_DMA_Init+0x1e8>)
 8011bc2:	4293      	cmp	r3, r2
 8011bc4:	d00e      	beq.n	8011be4 <HAL_DMA_Init+0xb8>
 8011bc6:	687b      	ldr	r3, [r7, #4]
 8011bc8:	681b      	ldr	r3, [r3, #0]
 8011bca:	4a53      	ldr	r2, [pc, #332]	@ (8011d18 <HAL_DMA_Init+0x1ec>)
 8011bcc:	4293      	cmp	r3, r2
 8011bce:	d009      	beq.n	8011be4 <HAL_DMA_Init+0xb8>
 8011bd0:	687b      	ldr	r3, [r7, #4]
 8011bd2:	681b      	ldr	r3, [r3, #0]
 8011bd4:	4a51      	ldr	r2, [pc, #324]	@ (8011d1c <HAL_DMA_Init+0x1f0>)
 8011bd6:	4293      	cmp	r3, r2
 8011bd8:	d004      	beq.n	8011be4 <HAL_DMA_Init+0xb8>
 8011bda:	687b      	ldr	r3, [r7, #4]
 8011bdc:	681b      	ldr	r3, [r3, #0]
 8011bde:	4a50      	ldr	r2, [pc, #320]	@ (8011d20 <HAL_DMA_Init+0x1f4>)
 8011be0:	4293      	cmp	r3, r2
 8011be2:	d101      	bne.n	8011be8 <HAL_DMA_Init+0xbc>
 8011be4:	2301      	movs	r3, #1
 8011be6:	e000      	b.n	8011bea <HAL_DMA_Init+0xbe>
 8011be8:	2300      	movs	r3, #0
 8011bea:	2b00      	cmp	r3, #0
 8011bec:	f000 813b 	beq.w	8011e66 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8011bf0:	687b      	ldr	r3, [r7, #4]
 8011bf2:	2202      	movs	r2, #2
 8011bf4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8011bf8:	687b      	ldr	r3, [r7, #4]
 8011bfa:	2200      	movs	r2, #0
 8011bfc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8011c00:	687b      	ldr	r3, [r7, #4]
 8011c02:	681b      	ldr	r3, [r3, #0]
 8011c04:	4a37      	ldr	r2, [pc, #220]	@ (8011ce4 <HAL_DMA_Init+0x1b8>)
 8011c06:	4293      	cmp	r3, r2
 8011c08:	d04a      	beq.n	8011ca0 <HAL_DMA_Init+0x174>
 8011c0a:	687b      	ldr	r3, [r7, #4]
 8011c0c:	681b      	ldr	r3, [r3, #0]
 8011c0e:	4a36      	ldr	r2, [pc, #216]	@ (8011ce8 <HAL_DMA_Init+0x1bc>)
 8011c10:	4293      	cmp	r3, r2
 8011c12:	d045      	beq.n	8011ca0 <HAL_DMA_Init+0x174>
 8011c14:	687b      	ldr	r3, [r7, #4]
 8011c16:	681b      	ldr	r3, [r3, #0]
 8011c18:	4a34      	ldr	r2, [pc, #208]	@ (8011cec <HAL_DMA_Init+0x1c0>)
 8011c1a:	4293      	cmp	r3, r2
 8011c1c:	d040      	beq.n	8011ca0 <HAL_DMA_Init+0x174>
 8011c1e:	687b      	ldr	r3, [r7, #4]
 8011c20:	681b      	ldr	r3, [r3, #0]
 8011c22:	4a33      	ldr	r2, [pc, #204]	@ (8011cf0 <HAL_DMA_Init+0x1c4>)
 8011c24:	4293      	cmp	r3, r2
 8011c26:	d03b      	beq.n	8011ca0 <HAL_DMA_Init+0x174>
 8011c28:	687b      	ldr	r3, [r7, #4]
 8011c2a:	681b      	ldr	r3, [r3, #0]
 8011c2c:	4a31      	ldr	r2, [pc, #196]	@ (8011cf4 <HAL_DMA_Init+0x1c8>)
 8011c2e:	4293      	cmp	r3, r2
 8011c30:	d036      	beq.n	8011ca0 <HAL_DMA_Init+0x174>
 8011c32:	687b      	ldr	r3, [r7, #4]
 8011c34:	681b      	ldr	r3, [r3, #0]
 8011c36:	4a30      	ldr	r2, [pc, #192]	@ (8011cf8 <HAL_DMA_Init+0x1cc>)
 8011c38:	4293      	cmp	r3, r2
 8011c3a:	d031      	beq.n	8011ca0 <HAL_DMA_Init+0x174>
 8011c3c:	687b      	ldr	r3, [r7, #4]
 8011c3e:	681b      	ldr	r3, [r3, #0]
 8011c40:	4a2e      	ldr	r2, [pc, #184]	@ (8011cfc <HAL_DMA_Init+0x1d0>)
 8011c42:	4293      	cmp	r3, r2
 8011c44:	d02c      	beq.n	8011ca0 <HAL_DMA_Init+0x174>
 8011c46:	687b      	ldr	r3, [r7, #4]
 8011c48:	681b      	ldr	r3, [r3, #0]
 8011c4a:	4a2d      	ldr	r2, [pc, #180]	@ (8011d00 <HAL_DMA_Init+0x1d4>)
 8011c4c:	4293      	cmp	r3, r2
 8011c4e:	d027      	beq.n	8011ca0 <HAL_DMA_Init+0x174>
 8011c50:	687b      	ldr	r3, [r7, #4]
 8011c52:	681b      	ldr	r3, [r3, #0]
 8011c54:	4a2b      	ldr	r2, [pc, #172]	@ (8011d04 <HAL_DMA_Init+0x1d8>)
 8011c56:	4293      	cmp	r3, r2
 8011c58:	d022      	beq.n	8011ca0 <HAL_DMA_Init+0x174>
 8011c5a:	687b      	ldr	r3, [r7, #4]
 8011c5c:	681b      	ldr	r3, [r3, #0]
 8011c5e:	4a2a      	ldr	r2, [pc, #168]	@ (8011d08 <HAL_DMA_Init+0x1dc>)
 8011c60:	4293      	cmp	r3, r2
 8011c62:	d01d      	beq.n	8011ca0 <HAL_DMA_Init+0x174>
 8011c64:	687b      	ldr	r3, [r7, #4]
 8011c66:	681b      	ldr	r3, [r3, #0]
 8011c68:	4a28      	ldr	r2, [pc, #160]	@ (8011d0c <HAL_DMA_Init+0x1e0>)
 8011c6a:	4293      	cmp	r3, r2
 8011c6c:	d018      	beq.n	8011ca0 <HAL_DMA_Init+0x174>
 8011c6e:	687b      	ldr	r3, [r7, #4]
 8011c70:	681b      	ldr	r3, [r3, #0]
 8011c72:	4a27      	ldr	r2, [pc, #156]	@ (8011d10 <HAL_DMA_Init+0x1e4>)
 8011c74:	4293      	cmp	r3, r2
 8011c76:	d013      	beq.n	8011ca0 <HAL_DMA_Init+0x174>
 8011c78:	687b      	ldr	r3, [r7, #4]
 8011c7a:	681b      	ldr	r3, [r3, #0]
 8011c7c:	4a25      	ldr	r2, [pc, #148]	@ (8011d14 <HAL_DMA_Init+0x1e8>)
 8011c7e:	4293      	cmp	r3, r2
 8011c80:	d00e      	beq.n	8011ca0 <HAL_DMA_Init+0x174>
 8011c82:	687b      	ldr	r3, [r7, #4]
 8011c84:	681b      	ldr	r3, [r3, #0]
 8011c86:	4a24      	ldr	r2, [pc, #144]	@ (8011d18 <HAL_DMA_Init+0x1ec>)
 8011c88:	4293      	cmp	r3, r2
 8011c8a:	d009      	beq.n	8011ca0 <HAL_DMA_Init+0x174>
 8011c8c:	687b      	ldr	r3, [r7, #4]
 8011c8e:	681b      	ldr	r3, [r3, #0]
 8011c90:	4a22      	ldr	r2, [pc, #136]	@ (8011d1c <HAL_DMA_Init+0x1f0>)
 8011c92:	4293      	cmp	r3, r2
 8011c94:	d004      	beq.n	8011ca0 <HAL_DMA_Init+0x174>
 8011c96:	687b      	ldr	r3, [r7, #4]
 8011c98:	681b      	ldr	r3, [r3, #0]
 8011c9a:	4a21      	ldr	r2, [pc, #132]	@ (8011d20 <HAL_DMA_Init+0x1f4>)
 8011c9c:	4293      	cmp	r3, r2
 8011c9e:	d108      	bne.n	8011cb2 <HAL_DMA_Init+0x186>
 8011ca0:	687b      	ldr	r3, [r7, #4]
 8011ca2:	681b      	ldr	r3, [r3, #0]
 8011ca4:	681a      	ldr	r2, [r3, #0]
 8011ca6:	687b      	ldr	r3, [r7, #4]
 8011ca8:	681b      	ldr	r3, [r3, #0]
 8011caa:	f022 0201 	bic.w	r2, r2, #1
 8011cae:	601a      	str	r2, [r3, #0]
 8011cb0:	e007      	b.n	8011cc2 <HAL_DMA_Init+0x196>
 8011cb2:	687b      	ldr	r3, [r7, #4]
 8011cb4:	681b      	ldr	r3, [r3, #0]
 8011cb6:	681a      	ldr	r2, [r3, #0]
 8011cb8:	687b      	ldr	r3, [r7, #4]
 8011cba:	681b      	ldr	r3, [r3, #0]
 8011cbc:	f022 0201 	bic.w	r2, r2, #1
 8011cc0:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8011cc2:	e02f      	b.n	8011d24 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8011cc4:	f7ff fd54 	bl	8011770 <HAL_GetTick>
 8011cc8:	4602      	mov	r2, r0
 8011cca:	693b      	ldr	r3, [r7, #16]
 8011ccc:	1ad3      	subs	r3, r2, r3
 8011cce:	2b05      	cmp	r3, #5
 8011cd0:	d928      	bls.n	8011d24 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8011cd2:	687b      	ldr	r3, [r7, #4]
 8011cd4:	2220      	movs	r2, #32
 8011cd6:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8011cd8:	687b      	ldr	r3, [r7, #4]
 8011cda:	2203      	movs	r2, #3
 8011cdc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8011ce0:	2301      	movs	r3, #1
 8011ce2:	e246      	b.n	8012172 <HAL_DMA_Init+0x646>
 8011ce4:	40020010 	.word	0x40020010
 8011ce8:	40020028 	.word	0x40020028
 8011cec:	40020040 	.word	0x40020040
 8011cf0:	40020058 	.word	0x40020058
 8011cf4:	40020070 	.word	0x40020070
 8011cf8:	40020088 	.word	0x40020088
 8011cfc:	400200a0 	.word	0x400200a0
 8011d00:	400200b8 	.word	0x400200b8
 8011d04:	40020410 	.word	0x40020410
 8011d08:	40020428 	.word	0x40020428
 8011d0c:	40020440 	.word	0x40020440
 8011d10:	40020458 	.word	0x40020458
 8011d14:	40020470 	.word	0x40020470
 8011d18:	40020488 	.word	0x40020488
 8011d1c:	400204a0 	.word	0x400204a0
 8011d20:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8011d24:	687b      	ldr	r3, [r7, #4]
 8011d26:	681b      	ldr	r3, [r3, #0]
 8011d28:	681b      	ldr	r3, [r3, #0]
 8011d2a:	f003 0301 	and.w	r3, r3, #1
 8011d2e:	2b00      	cmp	r3, #0
 8011d30:	d1c8      	bne.n	8011cc4 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8011d32:	687b      	ldr	r3, [r7, #4]
 8011d34:	681b      	ldr	r3, [r3, #0]
 8011d36:	681b      	ldr	r3, [r3, #0]
 8011d38:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8011d3a:	697a      	ldr	r2, [r7, #20]
 8011d3c:	4b83      	ldr	r3, [pc, #524]	@ (8011f4c <HAL_DMA_Init+0x420>)
 8011d3e:	4013      	ands	r3, r2
 8011d40:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8011d42:	687b      	ldr	r3, [r7, #4]
 8011d44:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8011d46:	687b      	ldr	r3, [r7, #4]
 8011d48:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8011d4a:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8011d4c:	687b      	ldr	r3, [r7, #4]
 8011d4e:	691b      	ldr	r3, [r3, #16]
 8011d50:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8011d52:	687b      	ldr	r3, [r7, #4]
 8011d54:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8011d56:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8011d58:	687b      	ldr	r3, [r7, #4]
 8011d5a:	699b      	ldr	r3, [r3, #24]
 8011d5c:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8011d5e:	687b      	ldr	r3, [r7, #4]
 8011d60:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8011d62:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8011d64:	687b      	ldr	r3, [r7, #4]
 8011d66:	6a1b      	ldr	r3, [r3, #32]
 8011d68:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8011d6a:	697a      	ldr	r2, [r7, #20]
 8011d6c:	4313      	orrs	r3, r2
 8011d6e:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8011d70:	687b      	ldr	r3, [r7, #4]
 8011d72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011d74:	2b04      	cmp	r3, #4
 8011d76:	d107      	bne.n	8011d88 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8011d78:	687b      	ldr	r3, [r7, #4]
 8011d7a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011d7c:	687b      	ldr	r3, [r7, #4]
 8011d7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011d80:	4313      	orrs	r3, r2
 8011d82:	697a      	ldr	r2, [r7, #20]
 8011d84:	4313      	orrs	r3, r2
 8011d86:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8011d88:	4b71      	ldr	r3, [pc, #452]	@ (8011f50 <HAL_DMA_Init+0x424>)
 8011d8a:	681a      	ldr	r2, [r3, #0]
 8011d8c:	4b71      	ldr	r3, [pc, #452]	@ (8011f54 <HAL_DMA_Init+0x428>)
 8011d8e:	4013      	ands	r3, r2
 8011d90:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8011d94:	d328      	bcc.n	8011de8 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8011d96:	687b      	ldr	r3, [r7, #4]
 8011d98:	685b      	ldr	r3, [r3, #4]
 8011d9a:	2b28      	cmp	r3, #40	@ 0x28
 8011d9c:	d903      	bls.n	8011da6 <HAL_DMA_Init+0x27a>
 8011d9e:	687b      	ldr	r3, [r7, #4]
 8011da0:	685b      	ldr	r3, [r3, #4]
 8011da2:	2b2e      	cmp	r3, #46	@ 0x2e
 8011da4:	d917      	bls.n	8011dd6 <HAL_DMA_Init+0x2aa>
 8011da6:	687b      	ldr	r3, [r7, #4]
 8011da8:	685b      	ldr	r3, [r3, #4]
 8011daa:	2b3e      	cmp	r3, #62	@ 0x3e
 8011dac:	d903      	bls.n	8011db6 <HAL_DMA_Init+0x28a>
 8011dae:	687b      	ldr	r3, [r7, #4]
 8011db0:	685b      	ldr	r3, [r3, #4]
 8011db2:	2b42      	cmp	r3, #66	@ 0x42
 8011db4:	d90f      	bls.n	8011dd6 <HAL_DMA_Init+0x2aa>
 8011db6:	687b      	ldr	r3, [r7, #4]
 8011db8:	685b      	ldr	r3, [r3, #4]
 8011dba:	2b46      	cmp	r3, #70	@ 0x46
 8011dbc:	d903      	bls.n	8011dc6 <HAL_DMA_Init+0x29a>
 8011dbe:	687b      	ldr	r3, [r7, #4]
 8011dc0:	685b      	ldr	r3, [r3, #4]
 8011dc2:	2b48      	cmp	r3, #72	@ 0x48
 8011dc4:	d907      	bls.n	8011dd6 <HAL_DMA_Init+0x2aa>
 8011dc6:	687b      	ldr	r3, [r7, #4]
 8011dc8:	685b      	ldr	r3, [r3, #4]
 8011dca:	2b4e      	cmp	r3, #78	@ 0x4e
 8011dcc:	d905      	bls.n	8011dda <HAL_DMA_Init+0x2ae>
 8011dce:	687b      	ldr	r3, [r7, #4]
 8011dd0:	685b      	ldr	r3, [r3, #4]
 8011dd2:	2b52      	cmp	r3, #82	@ 0x52
 8011dd4:	d801      	bhi.n	8011dda <HAL_DMA_Init+0x2ae>
 8011dd6:	2301      	movs	r3, #1
 8011dd8:	e000      	b.n	8011ddc <HAL_DMA_Init+0x2b0>
 8011dda:	2300      	movs	r3, #0
 8011ddc:	2b00      	cmp	r3, #0
 8011dde:	d003      	beq.n	8011de8 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8011de0:	697b      	ldr	r3, [r7, #20]
 8011de2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8011de6:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8011de8:	687b      	ldr	r3, [r7, #4]
 8011dea:	681b      	ldr	r3, [r3, #0]
 8011dec:	697a      	ldr	r2, [r7, #20]
 8011dee:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8011df0:	687b      	ldr	r3, [r7, #4]
 8011df2:	681b      	ldr	r3, [r3, #0]
 8011df4:	695b      	ldr	r3, [r3, #20]
 8011df6:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8011df8:	697b      	ldr	r3, [r7, #20]
 8011dfa:	f023 0307 	bic.w	r3, r3, #7
 8011dfe:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8011e00:	687b      	ldr	r3, [r7, #4]
 8011e02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011e04:	697a      	ldr	r2, [r7, #20]
 8011e06:	4313      	orrs	r3, r2
 8011e08:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8011e0a:	687b      	ldr	r3, [r7, #4]
 8011e0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011e0e:	2b04      	cmp	r3, #4
 8011e10:	d117      	bne.n	8011e42 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8011e12:	687b      	ldr	r3, [r7, #4]
 8011e14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011e16:	697a      	ldr	r2, [r7, #20]
 8011e18:	4313      	orrs	r3, r2
 8011e1a:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8011e1c:	687b      	ldr	r3, [r7, #4]
 8011e1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011e20:	2b00      	cmp	r3, #0
 8011e22:	d00e      	beq.n	8011e42 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8011e24:	6878      	ldr	r0, [r7, #4]
 8011e26:	f001 fc23 	bl	8013670 <DMA_CheckFifoParam>
 8011e2a:	4603      	mov	r3, r0
 8011e2c:	2b00      	cmp	r3, #0
 8011e2e:	d008      	beq.n	8011e42 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8011e30:	687b      	ldr	r3, [r7, #4]
 8011e32:	2240      	movs	r2, #64	@ 0x40
 8011e34:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8011e36:	687b      	ldr	r3, [r7, #4]
 8011e38:	2201      	movs	r2, #1
 8011e3a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8011e3e:	2301      	movs	r3, #1
 8011e40:	e197      	b.n	8012172 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8011e42:	687b      	ldr	r3, [r7, #4]
 8011e44:	681b      	ldr	r3, [r3, #0]
 8011e46:	697a      	ldr	r2, [r7, #20]
 8011e48:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8011e4a:	6878      	ldr	r0, [r7, #4]
 8011e4c:	f001 fb5e 	bl	801350c <DMA_CalcBaseAndBitshift>
 8011e50:	4603      	mov	r3, r0
 8011e52:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8011e54:	687b      	ldr	r3, [r7, #4]
 8011e56:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8011e58:	f003 031f 	and.w	r3, r3, #31
 8011e5c:	223f      	movs	r2, #63	@ 0x3f
 8011e5e:	409a      	lsls	r2, r3
 8011e60:	68bb      	ldr	r3, [r7, #8]
 8011e62:	609a      	str	r2, [r3, #8]
 8011e64:	e0cd      	b.n	8012002 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8011e66:	687b      	ldr	r3, [r7, #4]
 8011e68:	681b      	ldr	r3, [r3, #0]
 8011e6a:	4a3b      	ldr	r2, [pc, #236]	@ (8011f58 <HAL_DMA_Init+0x42c>)
 8011e6c:	4293      	cmp	r3, r2
 8011e6e:	d022      	beq.n	8011eb6 <HAL_DMA_Init+0x38a>
 8011e70:	687b      	ldr	r3, [r7, #4]
 8011e72:	681b      	ldr	r3, [r3, #0]
 8011e74:	4a39      	ldr	r2, [pc, #228]	@ (8011f5c <HAL_DMA_Init+0x430>)
 8011e76:	4293      	cmp	r3, r2
 8011e78:	d01d      	beq.n	8011eb6 <HAL_DMA_Init+0x38a>
 8011e7a:	687b      	ldr	r3, [r7, #4]
 8011e7c:	681b      	ldr	r3, [r3, #0]
 8011e7e:	4a38      	ldr	r2, [pc, #224]	@ (8011f60 <HAL_DMA_Init+0x434>)
 8011e80:	4293      	cmp	r3, r2
 8011e82:	d018      	beq.n	8011eb6 <HAL_DMA_Init+0x38a>
 8011e84:	687b      	ldr	r3, [r7, #4]
 8011e86:	681b      	ldr	r3, [r3, #0]
 8011e88:	4a36      	ldr	r2, [pc, #216]	@ (8011f64 <HAL_DMA_Init+0x438>)
 8011e8a:	4293      	cmp	r3, r2
 8011e8c:	d013      	beq.n	8011eb6 <HAL_DMA_Init+0x38a>
 8011e8e:	687b      	ldr	r3, [r7, #4]
 8011e90:	681b      	ldr	r3, [r3, #0]
 8011e92:	4a35      	ldr	r2, [pc, #212]	@ (8011f68 <HAL_DMA_Init+0x43c>)
 8011e94:	4293      	cmp	r3, r2
 8011e96:	d00e      	beq.n	8011eb6 <HAL_DMA_Init+0x38a>
 8011e98:	687b      	ldr	r3, [r7, #4]
 8011e9a:	681b      	ldr	r3, [r3, #0]
 8011e9c:	4a33      	ldr	r2, [pc, #204]	@ (8011f6c <HAL_DMA_Init+0x440>)
 8011e9e:	4293      	cmp	r3, r2
 8011ea0:	d009      	beq.n	8011eb6 <HAL_DMA_Init+0x38a>
 8011ea2:	687b      	ldr	r3, [r7, #4]
 8011ea4:	681b      	ldr	r3, [r3, #0]
 8011ea6:	4a32      	ldr	r2, [pc, #200]	@ (8011f70 <HAL_DMA_Init+0x444>)
 8011ea8:	4293      	cmp	r3, r2
 8011eaa:	d004      	beq.n	8011eb6 <HAL_DMA_Init+0x38a>
 8011eac:	687b      	ldr	r3, [r7, #4]
 8011eae:	681b      	ldr	r3, [r3, #0]
 8011eb0:	4a30      	ldr	r2, [pc, #192]	@ (8011f74 <HAL_DMA_Init+0x448>)
 8011eb2:	4293      	cmp	r3, r2
 8011eb4:	d101      	bne.n	8011eba <HAL_DMA_Init+0x38e>
 8011eb6:	2301      	movs	r3, #1
 8011eb8:	e000      	b.n	8011ebc <HAL_DMA_Init+0x390>
 8011eba:	2300      	movs	r3, #0
 8011ebc:	2b00      	cmp	r3, #0
 8011ebe:	f000 8097 	beq.w	8011ff0 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8011ec2:	687b      	ldr	r3, [r7, #4]
 8011ec4:	681b      	ldr	r3, [r3, #0]
 8011ec6:	4a24      	ldr	r2, [pc, #144]	@ (8011f58 <HAL_DMA_Init+0x42c>)
 8011ec8:	4293      	cmp	r3, r2
 8011eca:	d021      	beq.n	8011f10 <HAL_DMA_Init+0x3e4>
 8011ecc:	687b      	ldr	r3, [r7, #4]
 8011ece:	681b      	ldr	r3, [r3, #0]
 8011ed0:	4a22      	ldr	r2, [pc, #136]	@ (8011f5c <HAL_DMA_Init+0x430>)
 8011ed2:	4293      	cmp	r3, r2
 8011ed4:	d01c      	beq.n	8011f10 <HAL_DMA_Init+0x3e4>
 8011ed6:	687b      	ldr	r3, [r7, #4]
 8011ed8:	681b      	ldr	r3, [r3, #0]
 8011eda:	4a21      	ldr	r2, [pc, #132]	@ (8011f60 <HAL_DMA_Init+0x434>)
 8011edc:	4293      	cmp	r3, r2
 8011ede:	d017      	beq.n	8011f10 <HAL_DMA_Init+0x3e4>
 8011ee0:	687b      	ldr	r3, [r7, #4]
 8011ee2:	681b      	ldr	r3, [r3, #0]
 8011ee4:	4a1f      	ldr	r2, [pc, #124]	@ (8011f64 <HAL_DMA_Init+0x438>)
 8011ee6:	4293      	cmp	r3, r2
 8011ee8:	d012      	beq.n	8011f10 <HAL_DMA_Init+0x3e4>
 8011eea:	687b      	ldr	r3, [r7, #4]
 8011eec:	681b      	ldr	r3, [r3, #0]
 8011eee:	4a1e      	ldr	r2, [pc, #120]	@ (8011f68 <HAL_DMA_Init+0x43c>)
 8011ef0:	4293      	cmp	r3, r2
 8011ef2:	d00d      	beq.n	8011f10 <HAL_DMA_Init+0x3e4>
 8011ef4:	687b      	ldr	r3, [r7, #4]
 8011ef6:	681b      	ldr	r3, [r3, #0]
 8011ef8:	4a1c      	ldr	r2, [pc, #112]	@ (8011f6c <HAL_DMA_Init+0x440>)
 8011efa:	4293      	cmp	r3, r2
 8011efc:	d008      	beq.n	8011f10 <HAL_DMA_Init+0x3e4>
 8011efe:	687b      	ldr	r3, [r7, #4]
 8011f00:	681b      	ldr	r3, [r3, #0]
 8011f02:	4a1b      	ldr	r2, [pc, #108]	@ (8011f70 <HAL_DMA_Init+0x444>)
 8011f04:	4293      	cmp	r3, r2
 8011f06:	d003      	beq.n	8011f10 <HAL_DMA_Init+0x3e4>
 8011f08:	687b      	ldr	r3, [r7, #4]
 8011f0a:	681b      	ldr	r3, [r3, #0]
 8011f0c:	4a19      	ldr	r2, [pc, #100]	@ (8011f74 <HAL_DMA_Init+0x448>)
 8011f0e:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8011f10:	687b      	ldr	r3, [r7, #4]
 8011f12:	2202      	movs	r2, #2
 8011f14:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8011f18:	687b      	ldr	r3, [r7, #4]
 8011f1a:	2200      	movs	r2, #0
 8011f1c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8011f20:	687b      	ldr	r3, [r7, #4]
 8011f22:	681b      	ldr	r3, [r3, #0]
 8011f24:	681b      	ldr	r3, [r3, #0]
 8011f26:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8011f28:	697a      	ldr	r2, [r7, #20]
 8011f2a:	4b13      	ldr	r3, [pc, #76]	@ (8011f78 <HAL_DMA_Init+0x44c>)
 8011f2c:	4013      	ands	r3, r2
 8011f2e:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8011f30:	687b      	ldr	r3, [r7, #4]
 8011f32:	689b      	ldr	r3, [r3, #8]
 8011f34:	2b40      	cmp	r3, #64	@ 0x40
 8011f36:	d021      	beq.n	8011f7c <HAL_DMA_Init+0x450>
 8011f38:	687b      	ldr	r3, [r7, #4]
 8011f3a:	689b      	ldr	r3, [r3, #8]
 8011f3c:	2b80      	cmp	r3, #128	@ 0x80
 8011f3e:	d102      	bne.n	8011f46 <HAL_DMA_Init+0x41a>
 8011f40:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8011f44:	e01b      	b.n	8011f7e <HAL_DMA_Init+0x452>
 8011f46:	2300      	movs	r3, #0
 8011f48:	e019      	b.n	8011f7e <HAL_DMA_Init+0x452>
 8011f4a:	bf00      	nop
 8011f4c:	fe10803f 	.word	0xfe10803f
 8011f50:	5c001000 	.word	0x5c001000
 8011f54:	ffff0000 	.word	0xffff0000
 8011f58:	58025408 	.word	0x58025408
 8011f5c:	5802541c 	.word	0x5802541c
 8011f60:	58025430 	.word	0x58025430
 8011f64:	58025444 	.word	0x58025444
 8011f68:	58025458 	.word	0x58025458
 8011f6c:	5802546c 	.word	0x5802546c
 8011f70:	58025480 	.word	0x58025480
 8011f74:	58025494 	.word	0x58025494
 8011f78:	fffe000f 	.word	0xfffe000f
 8011f7c:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8011f7e:	687a      	ldr	r2, [r7, #4]
 8011f80:	68d2      	ldr	r2, [r2, #12]
 8011f82:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8011f84:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8011f86:	687b      	ldr	r3, [r7, #4]
 8011f88:	691b      	ldr	r3, [r3, #16]
 8011f8a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8011f8c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8011f8e:	687b      	ldr	r3, [r7, #4]
 8011f90:	695b      	ldr	r3, [r3, #20]
 8011f92:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8011f94:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8011f96:	687b      	ldr	r3, [r7, #4]
 8011f98:	699b      	ldr	r3, [r3, #24]
 8011f9a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8011f9c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8011f9e:	687b      	ldr	r3, [r7, #4]
 8011fa0:	69db      	ldr	r3, [r3, #28]
 8011fa2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8011fa4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8011fa6:	687b      	ldr	r3, [r7, #4]
 8011fa8:	6a1b      	ldr	r3, [r3, #32]
 8011faa:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8011fac:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8011fae:	697a      	ldr	r2, [r7, #20]
 8011fb0:	4313      	orrs	r3, r2
 8011fb2:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8011fb4:	687b      	ldr	r3, [r7, #4]
 8011fb6:	681b      	ldr	r3, [r3, #0]
 8011fb8:	697a      	ldr	r2, [r7, #20]
 8011fba:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8011fbc:	687b      	ldr	r3, [r7, #4]
 8011fbe:	681b      	ldr	r3, [r3, #0]
 8011fc0:	461a      	mov	r2, r3
 8011fc2:	4b6e      	ldr	r3, [pc, #440]	@ (801217c <HAL_DMA_Init+0x650>)
 8011fc4:	4413      	add	r3, r2
 8011fc6:	4a6e      	ldr	r2, [pc, #440]	@ (8012180 <HAL_DMA_Init+0x654>)
 8011fc8:	fba2 2303 	umull	r2, r3, r2, r3
 8011fcc:	091b      	lsrs	r3, r3, #4
 8011fce:	009a      	lsls	r2, r3, #2
 8011fd0:	687b      	ldr	r3, [r7, #4]
 8011fd2:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8011fd4:	6878      	ldr	r0, [r7, #4]
 8011fd6:	f001 fa99 	bl	801350c <DMA_CalcBaseAndBitshift>
 8011fda:	4603      	mov	r3, r0
 8011fdc:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8011fde:	687b      	ldr	r3, [r7, #4]
 8011fe0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8011fe2:	f003 031f 	and.w	r3, r3, #31
 8011fe6:	2201      	movs	r2, #1
 8011fe8:	409a      	lsls	r2, r3
 8011fea:	68fb      	ldr	r3, [r7, #12]
 8011fec:	605a      	str	r2, [r3, #4]
 8011fee:	e008      	b.n	8012002 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8011ff0:	687b      	ldr	r3, [r7, #4]
 8011ff2:	2240      	movs	r2, #64	@ 0x40
 8011ff4:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8011ff6:	687b      	ldr	r3, [r7, #4]
 8011ff8:	2203      	movs	r2, #3
 8011ffa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8011ffe:	2301      	movs	r3, #1
 8012000:	e0b7      	b.n	8012172 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8012002:	687b      	ldr	r3, [r7, #4]
 8012004:	681b      	ldr	r3, [r3, #0]
 8012006:	4a5f      	ldr	r2, [pc, #380]	@ (8012184 <HAL_DMA_Init+0x658>)
 8012008:	4293      	cmp	r3, r2
 801200a:	d072      	beq.n	80120f2 <HAL_DMA_Init+0x5c6>
 801200c:	687b      	ldr	r3, [r7, #4]
 801200e:	681b      	ldr	r3, [r3, #0]
 8012010:	4a5d      	ldr	r2, [pc, #372]	@ (8012188 <HAL_DMA_Init+0x65c>)
 8012012:	4293      	cmp	r3, r2
 8012014:	d06d      	beq.n	80120f2 <HAL_DMA_Init+0x5c6>
 8012016:	687b      	ldr	r3, [r7, #4]
 8012018:	681b      	ldr	r3, [r3, #0]
 801201a:	4a5c      	ldr	r2, [pc, #368]	@ (801218c <HAL_DMA_Init+0x660>)
 801201c:	4293      	cmp	r3, r2
 801201e:	d068      	beq.n	80120f2 <HAL_DMA_Init+0x5c6>
 8012020:	687b      	ldr	r3, [r7, #4]
 8012022:	681b      	ldr	r3, [r3, #0]
 8012024:	4a5a      	ldr	r2, [pc, #360]	@ (8012190 <HAL_DMA_Init+0x664>)
 8012026:	4293      	cmp	r3, r2
 8012028:	d063      	beq.n	80120f2 <HAL_DMA_Init+0x5c6>
 801202a:	687b      	ldr	r3, [r7, #4]
 801202c:	681b      	ldr	r3, [r3, #0]
 801202e:	4a59      	ldr	r2, [pc, #356]	@ (8012194 <HAL_DMA_Init+0x668>)
 8012030:	4293      	cmp	r3, r2
 8012032:	d05e      	beq.n	80120f2 <HAL_DMA_Init+0x5c6>
 8012034:	687b      	ldr	r3, [r7, #4]
 8012036:	681b      	ldr	r3, [r3, #0]
 8012038:	4a57      	ldr	r2, [pc, #348]	@ (8012198 <HAL_DMA_Init+0x66c>)
 801203a:	4293      	cmp	r3, r2
 801203c:	d059      	beq.n	80120f2 <HAL_DMA_Init+0x5c6>
 801203e:	687b      	ldr	r3, [r7, #4]
 8012040:	681b      	ldr	r3, [r3, #0]
 8012042:	4a56      	ldr	r2, [pc, #344]	@ (801219c <HAL_DMA_Init+0x670>)
 8012044:	4293      	cmp	r3, r2
 8012046:	d054      	beq.n	80120f2 <HAL_DMA_Init+0x5c6>
 8012048:	687b      	ldr	r3, [r7, #4]
 801204a:	681b      	ldr	r3, [r3, #0]
 801204c:	4a54      	ldr	r2, [pc, #336]	@ (80121a0 <HAL_DMA_Init+0x674>)
 801204e:	4293      	cmp	r3, r2
 8012050:	d04f      	beq.n	80120f2 <HAL_DMA_Init+0x5c6>
 8012052:	687b      	ldr	r3, [r7, #4]
 8012054:	681b      	ldr	r3, [r3, #0]
 8012056:	4a53      	ldr	r2, [pc, #332]	@ (80121a4 <HAL_DMA_Init+0x678>)
 8012058:	4293      	cmp	r3, r2
 801205a:	d04a      	beq.n	80120f2 <HAL_DMA_Init+0x5c6>
 801205c:	687b      	ldr	r3, [r7, #4]
 801205e:	681b      	ldr	r3, [r3, #0]
 8012060:	4a51      	ldr	r2, [pc, #324]	@ (80121a8 <HAL_DMA_Init+0x67c>)
 8012062:	4293      	cmp	r3, r2
 8012064:	d045      	beq.n	80120f2 <HAL_DMA_Init+0x5c6>
 8012066:	687b      	ldr	r3, [r7, #4]
 8012068:	681b      	ldr	r3, [r3, #0]
 801206a:	4a50      	ldr	r2, [pc, #320]	@ (80121ac <HAL_DMA_Init+0x680>)
 801206c:	4293      	cmp	r3, r2
 801206e:	d040      	beq.n	80120f2 <HAL_DMA_Init+0x5c6>
 8012070:	687b      	ldr	r3, [r7, #4]
 8012072:	681b      	ldr	r3, [r3, #0]
 8012074:	4a4e      	ldr	r2, [pc, #312]	@ (80121b0 <HAL_DMA_Init+0x684>)
 8012076:	4293      	cmp	r3, r2
 8012078:	d03b      	beq.n	80120f2 <HAL_DMA_Init+0x5c6>
 801207a:	687b      	ldr	r3, [r7, #4]
 801207c:	681b      	ldr	r3, [r3, #0]
 801207e:	4a4d      	ldr	r2, [pc, #308]	@ (80121b4 <HAL_DMA_Init+0x688>)
 8012080:	4293      	cmp	r3, r2
 8012082:	d036      	beq.n	80120f2 <HAL_DMA_Init+0x5c6>
 8012084:	687b      	ldr	r3, [r7, #4]
 8012086:	681b      	ldr	r3, [r3, #0]
 8012088:	4a4b      	ldr	r2, [pc, #300]	@ (80121b8 <HAL_DMA_Init+0x68c>)
 801208a:	4293      	cmp	r3, r2
 801208c:	d031      	beq.n	80120f2 <HAL_DMA_Init+0x5c6>
 801208e:	687b      	ldr	r3, [r7, #4]
 8012090:	681b      	ldr	r3, [r3, #0]
 8012092:	4a4a      	ldr	r2, [pc, #296]	@ (80121bc <HAL_DMA_Init+0x690>)
 8012094:	4293      	cmp	r3, r2
 8012096:	d02c      	beq.n	80120f2 <HAL_DMA_Init+0x5c6>
 8012098:	687b      	ldr	r3, [r7, #4]
 801209a:	681b      	ldr	r3, [r3, #0]
 801209c:	4a48      	ldr	r2, [pc, #288]	@ (80121c0 <HAL_DMA_Init+0x694>)
 801209e:	4293      	cmp	r3, r2
 80120a0:	d027      	beq.n	80120f2 <HAL_DMA_Init+0x5c6>
 80120a2:	687b      	ldr	r3, [r7, #4]
 80120a4:	681b      	ldr	r3, [r3, #0]
 80120a6:	4a47      	ldr	r2, [pc, #284]	@ (80121c4 <HAL_DMA_Init+0x698>)
 80120a8:	4293      	cmp	r3, r2
 80120aa:	d022      	beq.n	80120f2 <HAL_DMA_Init+0x5c6>
 80120ac:	687b      	ldr	r3, [r7, #4]
 80120ae:	681b      	ldr	r3, [r3, #0]
 80120b0:	4a45      	ldr	r2, [pc, #276]	@ (80121c8 <HAL_DMA_Init+0x69c>)
 80120b2:	4293      	cmp	r3, r2
 80120b4:	d01d      	beq.n	80120f2 <HAL_DMA_Init+0x5c6>
 80120b6:	687b      	ldr	r3, [r7, #4]
 80120b8:	681b      	ldr	r3, [r3, #0]
 80120ba:	4a44      	ldr	r2, [pc, #272]	@ (80121cc <HAL_DMA_Init+0x6a0>)
 80120bc:	4293      	cmp	r3, r2
 80120be:	d018      	beq.n	80120f2 <HAL_DMA_Init+0x5c6>
 80120c0:	687b      	ldr	r3, [r7, #4]
 80120c2:	681b      	ldr	r3, [r3, #0]
 80120c4:	4a42      	ldr	r2, [pc, #264]	@ (80121d0 <HAL_DMA_Init+0x6a4>)
 80120c6:	4293      	cmp	r3, r2
 80120c8:	d013      	beq.n	80120f2 <HAL_DMA_Init+0x5c6>
 80120ca:	687b      	ldr	r3, [r7, #4]
 80120cc:	681b      	ldr	r3, [r3, #0]
 80120ce:	4a41      	ldr	r2, [pc, #260]	@ (80121d4 <HAL_DMA_Init+0x6a8>)
 80120d0:	4293      	cmp	r3, r2
 80120d2:	d00e      	beq.n	80120f2 <HAL_DMA_Init+0x5c6>
 80120d4:	687b      	ldr	r3, [r7, #4]
 80120d6:	681b      	ldr	r3, [r3, #0]
 80120d8:	4a3f      	ldr	r2, [pc, #252]	@ (80121d8 <HAL_DMA_Init+0x6ac>)
 80120da:	4293      	cmp	r3, r2
 80120dc:	d009      	beq.n	80120f2 <HAL_DMA_Init+0x5c6>
 80120de:	687b      	ldr	r3, [r7, #4]
 80120e0:	681b      	ldr	r3, [r3, #0]
 80120e2:	4a3e      	ldr	r2, [pc, #248]	@ (80121dc <HAL_DMA_Init+0x6b0>)
 80120e4:	4293      	cmp	r3, r2
 80120e6:	d004      	beq.n	80120f2 <HAL_DMA_Init+0x5c6>
 80120e8:	687b      	ldr	r3, [r7, #4]
 80120ea:	681b      	ldr	r3, [r3, #0]
 80120ec:	4a3c      	ldr	r2, [pc, #240]	@ (80121e0 <HAL_DMA_Init+0x6b4>)
 80120ee:	4293      	cmp	r3, r2
 80120f0:	d101      	bne.n	80120f6 <HAL_DMA_Init+0x5ca>
 80120f2:	2301      	movs	r3, #1
 80120f4:	e000      	b.n	80120f8 <HAL_DMA_Init+0x5cc>
 80120f6:	2300      	movs	r3, #0
 80120f8:	2b00      	cmp	r3, #0
 80120fa:	d032      	beq.n	8012162 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80120fc:	6878      	ldr	r0, [r7, #4]
 80120fe:	f001 fb33 	bl	8013768 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8012102:	687b      	ldr	r3, [r7, #4]
 8012104:	689b      	ldr	r3, [r3, #8]
 8012106:	2b80      	cmp	r3, #128	@ 0x80
 8012108:	d102      	bne.n	8012110 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 801210a:	687b      	ldr	r3, [r7, #4]
 801210c:	2200      	movs	r2, #0
 801210e:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8012110:	687b      	ldr	r3, [r7, #4]
 8012112:	685a      	ldr	r2, [r3, #4]
 8012114:	687b      	ldr	r3, [r7, #4]
 8012116:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8012118:	b2d2      	uxtb	r2, r2
 801211a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 801211c:	687b      	ldr	r3, [r7, #4]
 801211e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8012120:	687a      	ldr	r2, [r7, #4]
 8012122:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8012124:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8012126:	687b      	ldr	r3, [r7, #4]
 8012128:	685b      	ldr	r3, [r3, #4]
 801212a:	2b00      	cmp	r3, #0
 801212c:	d010      	beq.n	8012150 <HAL_DMA_Init+0x624>
 801212e:	687b      	ldr	r3, [r7, #4]
 8012130:	685b      	ldr	r3, [r3, #4]
 8012132:	2b08      	cmp	r3, #8
 8012134:	d80c      	bhi.n	8012150 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8012136:	6878      	ldr	r0, [r7, #4]
 8012138:	f001 fbb0 	bl	801389c <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 801213c:	687b      	ldr	r3, [r7, #4]
 801213e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012140:	2200      	movs	r2, #0
 8012142:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8012144:	687b      	ldr	r3, [r7, #4]
 8012146:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012148:	687a      	ldr	r2, [r7, #4]
 801214a:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 801214c:	605a      	str	r2, [r3, #4]
 801214e:	e008      	b.n	8012162 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8012150:	687b      	ldr	r3, [r7, #4]
 8012152:	2200      	movs	r2, #0
 8012154:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8012156:	687b      	ldr	r3, [r7, #4]
 8012158:	2200      	movs	r2, #0
 801215a:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 801215c:	687b      	ldr	r3, [r7, #4]
 801215e:	2200      	movs	r2, #0
 8012160:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8012162:	687b      	ldr	r3, [r7, #4]
 8012164:	2200      	movs	r2, #0
 8012166:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8012168:	687b      	ldr	r3, [r7, #4]
 801216a:	2201      	movs	r2, #1
 801216c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8012170:	2300      	movs	r3, #0
}
 8012172:	4618      	mov	r0, r3
 8012174:	3718      	adds	r7, #24
 8012176:	46bd      	mov	sp, r7
 8012178:	bd80      	pop	{r7, pc}
 801217a:	bf00      	nop
 801217c:	a7fdabf8 	.word	0xa7fdabf8
 8012180:	cccccccd 	.word	0xcccccccd
 8012184:	40020010 	.word	0x40020010
 8012188:	40020028 	.word	0x40020028
 801218c:	40020040 	.word	0x40020040
 8012190:	40020058 	.word	0x40020058
 8012194:	40020070 	.word	0x40020070
 8012198:	40020088 	.word	0x40020088
 801219c:	400200a0 	.word	0x400200a0
 80121a0:	400200b8 	.word	0x400200b8
 80121a4:	40020410 	.word	0x40020410
 80121a8:	40020428 	.word	0x40020428
 80121ac:	40020440 	.word	0x40020440
 80121b0:	40020458 	.word	0x40020458
 80121b4:	40020470 	.word	0x40020470
 80121b8:	40020488 	.word	0x40020488
 80121bc:	400204a0 	.word	0x400204a0
 80121c0:	400204b8 	.word	0x400204b8
 80121c4:	58025408 	.word	0x58025408
 80121c8:	5802541c 	.word	0x5802541c
 80121cc:	58025430 	.word	0x58025430
 80121d0:	58025444 	.word	0x58025444
 80121d4:	58025458 	.word	0x58025458
 80121d8:	5802546c 	.word	0x5802546c
 80121dc:	58025480 	.word	0x58025480
 80121e0:	58025494 	.word	0x58025494

080121e4 <HAL_DMA_Start>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80121e4:	b580      	push	{r7, lr}
 80121e6:	b086      	sub	sp, #24
 80121e8:	af00      	add	r7, sp, #0
 80121ea:	60f8      	str	r0, [r7, #12]
 80121ec:	60b9      	str	r1, [r7, #8]
 80121ee:	607a      	str	r2, [r7, #4]
 80121f0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80121f2:	2300      	movs	r3, #0
 80121f4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80121f6:	68fb      	ldr	r3, [r7, #12]
 80121f8:	2b00      	cmp	r3, #0
 80121fa:	d101      	bne.n	8012200 <HAL_DMA_Start+0x1c>
  {
    return HAL_ERROR;
 80121fc:	2301      	movs	r3, #1
 80121fe:	e0ec      	b.n	80123da <HAL_DMA_Start+0x1f6>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8012200:	68fb      	ldr	r3, [r7, #12]
 8012202:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8012206:	2b01      	cmp	r3, #1
 8012208:	d101      	bne.n	801220e <HAL_DMA_Start+0x2a>
 801220a:	2302      	movs	r3, #2
 801220c:	e0e5      	b.n	80123da <HAL_DMA_Start+0x1f6>
 801220e:	68fb      	ldr	r3, [r7, #12]
 8012210:	2201      	movs	r2, #1
 8012212:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8012216:	68fb      	ldr	r3, [r7, #12]
 8012218:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 801221c:	b2db      	uxtb	r3, r3
 801221e:	2b01      	cmp	r3, #1
 8012220:	f040 80d0 	bne.w	80123c4 <HAL_DMA_Start+0x1e0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8012224:	68fb      	ldr	r3, [r7, #12]
 8012226:	2202      	movs	r2, #2
 8012228:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 801222c:	68fb      	ldr	r3, [r7, #12]
 801222e:	2200      	movs	r2, #0
 8012230:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8012232:	68fb      	ldr	r3, [r7, #12]
 8012234:	681b      	ldr	r3, [r3, #0]
 8012236:	4a6b      	ldr	r2, [pc, #428]	@ (80123e4 <HAL_DMA_Start+0x200>)
 8012238:	4293      	cmp	r3, r2
 801223a:	d04a      	beq.n	80122d2 <HAL_DMA_Start+0xee>
 801223c:	68fb      	ldr	r3, [r7, #12]
 801223e:	681b      	ldr	r3, [r3, #0]
 8012240:	4a69      	ldr	r2, [pc, #420]	@ (80123e8 <HAL_DMA_Start+0x204>)
 8012242:	4293      	cmp	r3, r2
 8012244:	d045      	beq.n	80122d2 <HAL_DMA_Start+0xee>
 8012246:	68fb      	ldr	r3, [r7, #12]
 8012248:	681b      	ldr	r3, [r3, #0]
 801224a:	4a68      	ldr	r2, [pc, #416]	@ (80123ec <HAL_DMA_Start+0x208>)
 801224c:	4293      	cmp	r3, r2
 801224e:	d040      	beq.n	80122d2 <HAL_DMA_Start+0xee>
 8012250:	68fb      	ldr	r3, [r7, #12]
 8012252:	681b      	ldr	r3, [r3, #0]
 8012254:	4a66      	ldr	r2, [pc, #408]	@ (80123f0 <HAL_DMA_Start+0x20c>)
 8012256:	4293      	cmp	r3, r2
 8012258:	d03b      	beq.n	80122d2 <HAL_DMA_Start+0xee>
 801225a:	68fb      	ldr	r3, [r7, #12]
 801225c:	681b      	ldr	r3, [r3, #0]
 801225e:	4a65      	ldr	r2, [pc, #404]	@ (80123f4 <HAL_DMA_Start+0x210>)
 8012260:	4293      	cmp	r3, r2
 8012262:	d036      	beq.n	80122d2 <HAL_DMA_Start+0xee>
 8012264:	68fb      	ldr	r3, [r7, #12]
 8012266:	681b      	ldr	r3, [r3, #0]
 8012268:	4a63      	ldr	r2, [pc, #396]	@ (80123f8 <HAL_DMA_Start+0x214>)
 801226a:	4293      	cmp	r3, r2
 801226c:	d031      	beq.n	80122d2 <HAL_DMA_Start+0xee>
 801226e:	68fb      	ldr	r3, [r7, #12]
 8012270:	681b      	ldr	r3, [r3, #0]
 8012272:	4a62      	ldr	r2, [pc, #392]	@ (80123fc <HAL_DMA_Start+0x218>)
 8012274:	4293      	cmp	r3, r2
 8012276:	d02c      	beq.n	80122d2 <HAL_DMA_Start+0xee>
 8012278:	68fb      	ldr	r3, [r7, #12]
 801227a:	681b      	ldr	r3, [r3, #0]
 801227c:	4a60      	ldr	r2, [pc, #384]	@ (8012400 <HAL_DMA_Start+0x21c>)
 801227e:	4293      	cmp	r3, r2
 8012280:	d027      	beq.n	80122d2 <HAL_DMA_Start+0xee>
 8012282:	68fb      	ldr	r3, [r7, #12]
 8012284:	681b      	ldr	r3, [r3, #0]
 8012286:	4a5f      	ldr	r2, [pc, #380]	@ (8012404 <HAL_DMA_Start+0x220>)
 8012288:	4293      	cmp	r3, r2
 801228a:	d022      	beq.n	80122d2 <HAL_DMA_Start+0xee>
 801228c:	68fb      	ldr	r3, [r7, #12]
 801228e:	681b      	ldr	r3, [r3, #0]
 8012290:	4a5d      	ldr	r2, [pc, #372]	@ (8012408 <HAL_DMA_Start+0x224>)
 8012292:	4293      	cmp	r3, r2
 8012294:	d01d      	beq.n	80122d2 <HAL_DMA_Start+0xee>
 8012296:	68fb      	ldr	r3, [r7, #12]
 8012298:	681b      	ldr	r3, [r3, #0]
 801229a:	4a5c      	ldr	r2, [pc, #368]	@ (801240c <HAL_DMA_Start+0x228>)
 801229c:	4293      	cmp	r3, r2
 801229e:	d018      	beq.n	80122d2 <HAL_DMA_Start+0xee>
 80122a0:	68fb      	ldr	r3, [r7, #12]
 80122a2:	681b      	ldr	r3, [r3, #0]
 80122a4:	4a5a      	ldr	r2, [pc, #360]	@ (8012410 <HAL_DMA_Start+0x22c>)
 80122a6:	4293      	cmp	r3, r2
 80122a8:	d013      	beq.n	80122d2 <HAL_DMA_Start+0xee>
 80122aa:	68fb      	ldr	r3, [r7, #12]
 80122ac:	681b      	ldr	r3, [r3, #0]
 80122ae:	4a59      	ldr	r2, [pc, #356]	@ (8012414 <HAL_DMA_Start+0x230>)
 80122b0:	4293      	cmp	r3, r2
 80122b2:	d00e      	beq.n	80122d2 <HAL_DMA_Start+0xee>
 80122b4:	68fb      	ldr	r3, [r7, #12]
 80122b6:	681b      	ldr	r3, [r3, #0]
 80122b8:	4a57      	ldr	r2, [pc, #348]	@ (8012418 <HAL_DMA_Start+0x234>)
 80122ba:	4293      	cmp	r3, r2
 80122bc:	d009      	beq.n	80122d2 <HAL_DMA_Start+0xee>
 80122be:	68fb      	ldr	r3, [r7, #12]
 80122c0:	681b      	ldr	r3, [r3, #0]
 80122c2:	4a56      	ldr	r2, [pc, #344]	@ (801241c <HAL_DMA_Start+0x238>)
 80122c4:	4293      	cmp	r3, r2
 80122c6:	d004      	beq.n	80122d2 <HAL_DMA_Start+0xee>
 80122c8:	68fb      	ldr	r3, [r7, #12]
 80122ca:	681b      	ldr	r3, [r3, #0]
 80122cc:	4a54      	ldr	r2, [pc, #336]	@ (8012420 <HAL_DMA_Start+0x23c>)
 80122ce:	4293      	cmp	r3, r2
 80122d0:	d108      	bne.n	80122e4 <HAL_DMA_Start+0x100>
 80122d2:	68fb      	ldr	r3, [r7, #12]
 80122d4:	681b      	ldr	r3, [r3, #0]
 80122d6:	681a      	ldr	r2, [r3, #0]
 80122d8:	68fb      	ldr	r3, [r7, #12]
 80122da:	681b      	ldr	r3, [r3, #0]
 80122dc:	f022 0201 	bic.w	r2, r2, #1
 80122e0:	601a      	str	r2, [r3, #0]
 80122e2:	e007      	b.n	80122f4 <HAL_DMA_Start+0x110>
 80122e4:	68fb      	ldr	r3, [r7, #12]
 80122e6:	681b      	ldr	r3, [r3, #0]
 80122e8:	681a      	ldr	r2, [r3, #0]
 80122ea:	68fb      	ldr	r3, [r7, #12]
 80122ec:	681b      	ldr	r3, [r3, #0]
 80122ee:	f022 0201 	bic.w	r2, r2, #1
 80122f2:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80122f4:	683b      	ldr	r3, [r7, #0]
 80122f6:	687a      	ldr	r2, [r7, #4]
 80122f8:	68b9      	ldr	r1, [r7, #8]
 80122fa:	68f8      	ldr	r0, [r7, #12]
 80122fc:	f000 ff5a 	bl	80131b4 <DMA_SetConfig>

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8012300:	68fb      	ldr	r3, [r7, #12]
 8012302:	681b      	ldr	r3, [r3, #0]
 8012304:	4a37      	ldr	r2, [pc, #220]	@ (80123e4 <HAL_DMA_Start+0x200>)
 8012306:	4293      	cmp	r3, r2
 8012308:	d04a      	beq.n	80123a0 <HAL_DMA_Start+0x1bc>
 801230a:	68fb      	ldr	r3, [r7, #12]
 801230c:	681b      	ldr	r3, [r3, #0]
 801230e:	4a36      	ldr	r2, [pc, #216]	@ (80123e8 <HAL_DMA_Start+0x204>)
 8012310:	4293      	cmp	r3, r2
 8012312:	d045      	beq.n	80123a0 <HAL_DMA_Start+0x1bc>
 8012314:	68fb      	ldr	r3, [r7, #12]
 8012316:	681b      	ldr	r3, [r3, #0]
 8012318:	4a34      	ldr	r2, [pc, #208]	@ (80123ec <HAL_DMA_Start+0x208>)
 801231a:	4293      	cmp	r3, r2
 801231c:	d040      	beq.n	80123a0 <HAL_DMA_Start+0x1bc>
 801231e:	68fb      	ldr	r3, [r7, #12]
 8012320:	681b      	ldr	r3, [r3, #0]
 8012322:	4a33      	ldr	r2, [pc, #204]	@ (80123f0 <HAL_DMA_Start+0x20c>)
 8012324:	4293      	cmp	r3, r2
 8012326:	d03b      	beq.n	80123a0 <HAL_DMA_Start+0x1bc>
 8012328:	68fb      	ldr	r3, [r7, #12]
 801232a:	681b      	ldr	r3, [r3, #0]
 801232c:	4a31      	ldr	r2, [pc, #196]	@ (80123f4 <HAL_DMA_Start+0x210>)
 801232e:	4293      	cmp	r3, r2
 8012330:	d036      	beq.n	80123a0 <HAL_DMA_Start+0x1bc>
 8012332:	68fb      	ldr	r3, [r7, #12]
 8012334:	681b      	ldr	r3, [r3, #0]
 8012336:	4a30      	ldr	r2, [pc, #192]	@ (80123f8 <HAL_DMA_Start+0x214>)
 8012338:	4293      	cmp	r3, r2
 801233a:	d031      	beq.n	80123a0 <HAL_DMA_Start+0x1bc>
 801233c:	68fb      	ldr	r3, [r7, #12]
 801233e:	681b      	ldr	r3, [r3, #0]
 8012340:	4a2e      	ldr	r2, [pc, #184]	@ (80123fc <HAL_DMA_Start+0x218>)
 8012342:	4293      	cmp	r3, r2
 8012344:	d02c      	beq.n	80123a0 <HAL_DMA_Start+0x1bc>
 8012346:	68fb      	ldr	r3, [r7, #12]
 8012348:	681b      	ldr	r3, [r3, #0]
 801234a:	4a2d      	ldr	r2, [pc, #180]	@ (8012400 <HAL_DMA_Start+0x21c>)
 801234c:	4293      	cmp	r3, r2
 801234e:	d027      	beq.n	80123a0 <HAL_DMA_Start+0x1bc>
 8012350:	68fb      	ldr	r3, [r7, #12]
 8012352:	681b      	ldr	r3, [r3, #0]
 8012354:	4a2b      	ldr	r2, [pc, #172]	@ (8012404 <HAL_DMA_Start+0x220>)
 8012356:	4293      	cmp	r3, r2
 8012358:	d022      	beq.n	80123a0 <HAL_DMA_Start+0x1bc>
 801235a:	68fb      	ldr	r3, [r7, #12]
 801235c:	681b      	ldr	r3, [r3, #0]
 801235e:	4a2a      	ldr	r2, [pc, #168]	@ (8012408 <HAL_DMA_Start+0x224>)
 8012360:	4293      	cmp	r3, r2
 8012362:	d01d      	beq.n	80123a0 <HAL_DMA_Start+0x1bc>
 8012364:	68fb      	ldr	r3, [r7, #12]
 8012366:	681b      	ldr	r3, [r3, #0]
 8012368:	4a28      	ldr	r2, [pc, #160]	@ (801240c <HAL_DMA_Start+0x228>)
 801236a:	4293      	cmp	r3, r2
 801236c:	d018      	beq.n	80123a0 <HAL_DMA_Start+0x1bc>
 801236e:	68fb      	ldr	r3, [r7, #12]
 8012370:	681b      	ldr	r3, [r3, #0]
 8012372:	4a27      	ldr	r2, [pc, #156]	@ (8012410 <HAL_DMA_Start+0x22c>)
 8012374:	4293      	cmp	r3, r2
 8012376:	d013      	beq.n	80123a0 <HAL_DMA_Start+0x1bc>
 8012378:	68fb      	ldr	r3, [r7, #12]
 801237a:	681b      	ldr	r3, [r3, #0]
 801237c:	4a25      	ldr	r2, [pc, #148]	@ (8012414 <HAL_DMA_Start+0x230>)
 801237e:	4293      	cmp	r3, r2
 8012380:	d00e      	beq.n	80123a0 <HAL_DMA_Start+0x1bc>
 8012382:	68fb      	ldr	r3, [r7, #12]
 8012384:	681b      	ldr	r3, [r3, #0]
 8012386:	4a24      	ldr	r2, [pc, #144]	@ (8012418 <HAL_DMA_Start+0x234>)
 8012388:	4293      	cmp	r3, r2
 801238a:	d009      	beq.n	80123a0 <HAL_DMA_Start+0x1bc>
 801238c:	68fb      	ldr	r3, [r7, #12]
 801238e:	681b      	ldr	r3, [r3, #0]
 8012390:	4a22      	ldr	r2, [pc, #136]	@ (801241c <HAL_DMA_Start+0x238>)
 8012392:	4293      	cmp	r3, r2
 8012394:	d004      	beq.n	80123a0 <HAL_DMA_Start+0x1bc>
 8012396:	68fb      	ldr	r3, [r7, #12]
 8012398:	681b      	ldr	r3, [r3, #0]
 801239a:	4a21      	ldr	r2, [pc, #132]	@ (8012420 <HAL_DMA_Start+0x23c>)
 801239c:	4293      	cmp	r3, r2
 801239e:	d108      	bne.n	80123b2 <HAL_DMA_Start+0x1ce>
 80123a0:	68fb      	ldr	r3, [r7, #12]
 80123a2:	681b      	ldr	r3, [r3, #0]
 80123a4:	681a      	ldr	r2, [r3, #0]
 80123a6:	68fb      	ldr	r3, [r7, #12]
 80123a8:	681b      	ldr	r3, [r3, #0]
 80123aa:	f042 0201 	orr.w	r2, r2, #1
 80123ae:	601a      	str	r2, [r3, #0]
 80123b0:	e012      	b.n	80123d8 <HAL_DMA_Start+0x1f4>
 80123b2:	68fb      	ldr	r3, [r7, #12]
 80123b4:	681b      	ldr	r3, [r3, #0]
 80123b6:	681a      	ldr	r2, [r3, #0]
 80123b8:	68fb      	ldr	r3, [r7, #12]
 80123ba:	681b      	ldr	r3, [r3, #0]
 80123bc:	f042 0201 	orr.w	r2, r2, #1
 80123c0:	601a      	str	r2, [r3, #0]
 80123c2:	e009      	b.n	80123d8 <HAL_DMA_Start+0x1f4>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80123c4:	68fb      	ldr	r3, [r7, #12]
 80123c6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80123ca:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80123cc:	68fb      	ldr	r3, [r7, #12]
 80123ce:	2200      	movs	r2, #0
 80123d0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 80123d4:	2301      	movs	r3, #1
 80123d6:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80123d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80123da:	4618      	mov	r0, r3
 80123dc:	3718      	adds	r7, #24
 80123de:	46bd      	mov	sp, r7
 80123e0:	bd80      	pop	{r7, pc}
 80123e2:	bf00      	nop
 80123e4:	40020010 	.word	0x40020010
 80123e8:	40020028 	.word	0x40020028
 80123ec:	40020040 	.word	0x40020040
 80123f0:	40020058 	.word	0x40020058
 80123f4:	40020070 	.word	0x40020070
 80123f8:	40020088 	.word	0x40020088
 80123fc:	400200a0 	.word	0x400200a0
 8012400:	400200b8 	.word	0x400200b8
 8012404:	40020410 	.word	0x40020410
 8012408:	40020428 	.word	0x40020428
 801240c:	40020440 	.word	0x40020440
 8012410:	40020458 	.word	0x40020458
 8012414:	40020470 	.word	0x40020470
 8012418:	40020488 	.word	0x40020488
 801241c:	400204a0 	.word	0x400204a0
 8012420:	400204b8 	.word	0x400204b8

08012424 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8012424:	b580      	push	{r7, lr}
 8012426:	b086      	sub	sp, #24
 8012428:	af00      	add	r7, sp, #0
 801242a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 801242c:	f7ff f9a0 	bl	8011770 <HAL_GetTick>
 8012430:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8012432:	687b      	ldr	r3, [r7, #4]
 8012434:	2b00      	cmp	r3, #0
 8012436:	d101      	bne.n	801243c <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8012438:	2301      	movs	r3, #1
 801243a:	e2dc      	b.n	80129f6 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 801243c:	687b      	ldr	r3, [r7, #4]
 801243e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8012442:	b2db      	uxtb	r3, r3
 8012444:	2b02      	cmp	r3, #2
 8012446:	d008      	beq.n	801245a <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8012448:	687b      	ldr	r3, [r7, #4]
 801244a:	2280      	movs	r2, #128	@ 0x80
 801244c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 801244e:	687b      	ldr	r3, [r7, #4]
 8012450:	2200      	movs	r2, #0
 8012452:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 8012456:	2301      	movs	r3, #1
 8012458:	e2cd      	b.n	80129f6 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 801245a:	687b      	ldr	r3, [r7, #4]
 801245c:	681b      	ldr	r3, [r3, #0]
 801245e:	4a76      	ldr	r2, [pc, #472]	@ (8012638 <HAL_DMA_Abort+0x214>)
 8012460:	4293      	cmp	r3, r2
 8012462:	d04a      	beq.n	80124fa <HAL_DMA_Abort+0xd6>
 8012464:	687b      	ldr	r3, [r7, #4]
 8012466:	681b      	ldr	r3, [r3, #0]
 8012468:	4a74      	ldr	r2, [pc, #464]	@ (801263c <HAL_DMA_Abort+0x218>)
 801246a:	4293      	cmp	r3, r2
 801246c:	d045      	beq.n	80124fa <HAL_DMA_Abort+0xd6>
 801246e:	687b      	ldr	r3, [r7, #4]
 8012470:	681b      	ldr	r3, [r3, #0]
 8012472:	4a73      	ldr	r2, [pc, #460]	@ (8012640 <HAL_DMA_Abort+0x21c>)
 8012474:	4293      	cmp	r3, r2
 8012476:	d040      	beq.n	80124fa <HAL_DMA_Abort+0xd6>
 8012478:	687b      	ldr	r3, [r7, #4]
 801247a:	681b      	ldr	r3, [r3, #0]
 801247c:	4a71      	ldr	r2, [pc, #452]	@ (8012644 <HAL_DMA_Abort+0x220>)
 801247e:	4293      	cmp	r3, r2
 8012480:	d03b      	beq.n	80124fa <HAL_DMA_Abort+0xd6>
 8012482:	687b      	ldr	r3, [r7, #4]
 8012484:	681b      	ldr	r3, [r3, #0]
 8012486:	4a70      	ldr	r2, [pc, #448]	@ (8012648 <HAL_DMA_Abort+0x224>)
 8012488:	4293      	cmp	r3, r2
 801248a:	d036      	beq.n	80124fa <HAL_DMA_Abort+0xd6>
 801248c:	687b      	ldr	r3, [r7, #4]
 801248e:	681b      	ldr	r3, [r3, #0]
 8012490:	4a6e      	ldr	r2, [pc, #440]	@ (801264c <HAL_DMA_Abort+0x228>)
 8012492:	4293      	cmp	r3, r2
 8012494:	d031      	beq.n	80124fa <HAL_DMA_Abort+0xd6>
 8012496:	687b      	ldr	r3, [r7, #4]
 8012498:	681b      	ldr	r3, [r3, #0]
 801249a:	4a6d      	ldr	r2, [pc, #436]	@ (8012650 <HAL_DMA_Abort+0x22c>)
 801249c:	4293      	cmp	r3, r2
 801249e:	d02c      	beq.n	80124fa <HAL_DMA_Abort+0xd6>
 80124a0:	687b      	ldr	r3, [r7, #4]
 80124a2:	681b      	ldr	r3, [r3, #0]
 80124a4:	4a6b      	ldr	r2, [pc, #428]	@ (8012654 <HAL_DMA_Abort+0x230>)
 80124a6:	4293      	cmp	r3, r2
 80124a8:	d027      	beq.n	80124fa <HAL_DMA_Abort+0xd6>
 80124aa:	687b      	ldr	r3, [r7, #4]
 80124ac:	681b      	ldr	r3, [r3, #0]
 80124ae:	4a6a      	ldr	r2, [pc, #424]	@ (8012658 <HAL_DMA_Abort+0x234>)
 80124b0:	4293      	cmp	r3, r2
 80124b2:	d022      	beq.n	80124fa <HAL_DMA_Abort+0xd6>
 80124b4:	687b      	ldr	r3, [r7, #4]
 80124b6:	681b      	ldr	r3, [r3, #0]
 80124b8:	4a68      	ldr	r2, [pc, #416]	@ (801265c <HAL_DMA_Abort+0x238>)
 80124ba:	4293      	cmp	r3, r2
 80124bc:	d01d      	beq.n	80124fa <HAL_DMA_Abort+0xd6>
 80124be:	687b      	ldr	r3, [r7, #4]
 80124c0:	681b      	ldr	r3, [r3, #0]
 80124c2:	4a67      	ldr	r2, [pc, #412]	@ (8012660 <HAL_DMA_Abort+0x23c>)
 80124c4:	4293      	cmp	r3, r2
 80124c6:	d018      	beq.n	80124fa <HAL_DMA_Abort+0xd6>
 80124c8:	687b      	ldr	r3, [r7, #4]
 80124ca:	681b      	ldr	r3, [r3, #0]
 80124cc:	4a65      	ldr	r2, [pc, #404]	@ (8012664 <HAL_DMA_Abort+0x240>)
 80124ce:	4293      	cmp	r3, r2
 80124d0:	d013      	beq.n	80124fa <HAL_DMA_Abort+0xd6>
 80124d2:	687b      	ldr	r3, [r7, #4]
 80124d4:	681b      	ldr	r3, [r3, #0]
 80124d6:	4a64      	ldr	r2, [pc, #400]	@ (8012668 <HAL_DMA_Abort+0x244>)
 80124d8:	4293      	cmp	r3, r2
 80124da:	d00e      	beq.n	80124fa <HAL_DMA_Abort+0xd6>
 80124dc:	687b      	ldr	r3, [r7, #4]
 80124de:	681b      	ldr	r3, [r3, #0]
 80124e0:	4a62      	ldr	r2, [pc, #392]	@ (801266c <HAL_DMA_Abort+0x248>)
 80124e2:	4293      	cmp	r3, r2
 80124e4:	d009      	beq.n	80124fa <HAL_DMA_Abort+0xd6>
 80124e6:	687b      	ldr	r3, [r7, #4]
 80124e8:	681b      	ldr	r3, [r3, #0]
 80124ea:	4a61      	ldr	r2, [pc, #388]	@ (8012670 <HAL_DMA_Abort+0x24c>)
 80124ec:	4293      	cmp	r3, r2
 80124ee:	d004      	beq.n	80124fa <HAL_DMA_Abort+0xd6>
 80124f0:	687b      	ldr	r3, [r7, #4]
 80124f2:	681b      	ldr	r3, [r3, #0]
 80124f4:	4a5f      	ldr	r2, [pc, #380]	@ (8012674 <HAL_DMA_Abort+0x250>)
 80124f6:	4293      	cmp	r3, r2
 80124f8:	d101      	bne.n	80124fe <HAL_DMA_Abort+0xda>
 80124fa:	2301      	movs	r3, #1
 80124fc:	e000      	b.n	8012500 <HAL_DMA_Abort+0xdc>
 80124fe:	2300      	movs	r3, #0
 8012500:	2b00      	cmp	r3, #0
 8012502:	d013      	beq.n	801252c <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8012504:	687b      	ldr	r3, [r7, #4]
 8012506:	681b      	ldr	r3, [r3, #0]
 8012508:	681a      	ldr	r2, [r3, #0]
 801250a:	687b      	ldr	r3, [r7, #4]
 801250c:	681b      	ldr	r3, [r3, #0]
 801250e:	f022 021e 	bic.w	r2, r2, #30
 8012512:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8012514:	687b      	ldr	r3, [r7, #4]
 8012516:	681b      	ldr	r3, [r3, #0]
 8012518:	695a      	ldr	r2, [r3, #20]
 801251a:	687b      	ldr	r3, [r7, #4]
 801251c:	681b      	ldr	r3, [r3, #0]
 801251e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8012522:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8012524:	687b      	ldr	r3, [r7, #4]
 8012526:	681b      	ldr	r3, [r3, #0]
 8012528:	617b      	str	r3, [r7, #20]
 801252a:	e00a      	b.n	8012542 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 801252c:	687b      	ldr	r3, [r7, #4]
 801252e:	681b      	ldr	r3, [r3, #0]
 8012530:	681a      	ldr	r2, [r3, #0]
 8012532:	687b      	ldr	r3, [r7, #4]
 8012534:	681b      	ldr	r3, [r3, #0]
 8012536:	f022 020e 	bic.w	r2, r2, #14
 801253a:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 801253c:	687b      	ldr	r3, [r7, #4]
 801253e:	681b      	ldr	r3, [r3, #0]
 8012540:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8012542:	687b      	ldr	r3, [r7, #4]
 8012544:	681b      	ldr	r3, [r3, #0]
 8012546:	4a3c      	ldr	r2, [pc, #240]	@ (8012638 <HAL_DMA_Abort+0x214>)
 8012548:	4293      	cmp	r3, r2
 801254a:	d072      	beq.n	8012632 <HAL_DMA_Abort+0x20e>
 801254c:	687b      	ldr	r3, [r7, #4]
 801254e:	681b      	ldr	r3, [r3, #0]
 8012550:	4a3a      	ldr	r2, [pc, #232]	@ (801263c <HAL_DMA_Abort+0x218>)
 8012552:	4293      	cmp	r3, r2
 8012554:	d06d      	beq.n	8012632 <HAL_DMA_Abort+0x20e>
 8012556:	687b      	ldr	r3, [r7, #4]
 8012558:	681b      	ldr	r3, [r3, #0]
 801255a:	4a39      	ldr	r2, [pc, #228]	@ (8012640 <HAL_DMA_Abort+0x21c>)
 801255c:	4293      	cmp	r3, r2
 801255e:	d068      	beq.n	8012632 <HAL_DMA_Abort+0x20e>
 8012560:	687b      	ldr	r3, [r7, #4]
 8012562:	681b      	ldr	r3, [r3, #0]
 8012564:	4a37      	ldr	r2, [pc, #220]	@ (8012644 <HAL_DMA_Abort+0x220>)
 8012566:	4293      	cmp	r3, r2
 8012568:	d063      	beq.n	8012632 <HAL_DMA_Abort+0x20e>
 801256a:	687b      	ldr	r3, [r7, #4]
 801256c:	681b      	ldr	r3, [r3, #0]
 801256e:	4a36      	ldr	r2, [pc, #216]	@ (8012648 <HAL_DMA_Abort+0x224>)
 8012570:	4293      	cmp	r3, r2
 8012572:	d05e      	beq.n	8012632 <HAL_DMA_Abort+0x20e>
 8012574:	687b      	ldr	r3, [r7, #4]
 8012576:	681b      	ldr	r3, [r3, #0]
 8012578:	4a34      	ldr	r2, [pc, #208]	@ (801264c <HAL_DMA_Abort+0x228>)
 801257a:	4293      	cmp	r3, r2
 801257c:	d059      	beq.n	8012632 <HAL_DMA_Abort+0x20e>
 801257e:	687b      	ldr	r3, [r7, #4]
 8012580:	681b      	ldr	r3, [r3, #0]
 8012582:	4a33      	ldr	r2, [pc, #204]	@ (8012650 <HAL_DMA_Abort+0x22c>)
 8012584:	4293      	cmp	r3, r2
 8012586:	d054      	beq.n	8012632 <HAL_DMA_Abort+0x20e>
 8012588:	687b      	ldr	r3, [r7, #4]
 801258a:	681b      	ldr	r3, [r3, #0]
 801258c:	4a31      	ldr	r2, [pc, #196]	@ (8012654 <HAL_DMA_Abort+0x230>)
 801258e:	4293      	cmp	r3, r2
 8012590:	d04f      	beq.n	8012632 <HAL_DMA_Abort+0x20e>
 8012592:	687b      	ldr	r3, [r7, #4]
 8012594:	681b      	ldr	r3, [r3, #0]
 8012596:	4a30      	ldr	r2, [pc, #192]	@ (8012658 <HAL_DMA_Abort+0x234>)
 8012598:	4293      	cmp	r3, r2
 801259a:	d04a      	beq.n	8012632 <HAL_DMA_Abort+0x20e>
 801259c:	687b      	ldr	r3, [r7, #4]
 801259e:	681b      	ldr	r3, [r3, #0]
 80125a0:	4a2e      	ldr	r2, [pc, #184]	@ (801265c <HAL_DMA_Abort+0x238>)
 80125a2:	4293      	cmp	r3, r2
 80125a4:	d045      	beq.n	8012632 <HAL_DMA_Abort+0x20e>
 80125a6:	687b      	ldr	r3, [r7, #4]
 80125a8:	681b      	ldr	r3, [r3, #0]
 80125aa:	4a2d      	ldr	r2, [pc, #180]	@ (8012660 <HAL_DMA_Abort+0x23c>)
 80125ac:	4293      	cmp	r3, r2
 80125ae:	d040      	beq.n	8012632 <HAL_DMA_Abort+0x20e>
 80125b0:	687b      	ldr	r3, [r7, #4]
 80125b2:	681b      	ldr	r3, [r3, #0]
 80125b4:	4a2b      	ldr	r2, [pc, #172]	@ (8012664 <HAL_DMA_Abort+0x240>)
 80125b6:	4293      	cmp	r3, r2
 80125b8:	d03b      	beq.n	8012632 <HAL_DMA_Abort+0x20e>
 80125ba:	687b      	ldr	r3, [r7, #4]
 80125bc:	681b      	ldr	r3, [r3, #0]
 80125be:	4a2a      	ldr	r2, [pc, #168]	@ (8012668 <HAL_DMA_Abort+0x244>)
 80125c0:	4293      	cmp	r3, r2
 80125c2:	d036      	beq.n	8012632 <HAL_DMA_Abort+0x20e>
 80125c4:	687b      	ldr	r3, [r7, #4]
 80125c6:	681b      	ldr	r3, [r3, #0]
 80125c8:	4a28      	ldr	r2, [pc, #160]	@ (801266c <HAL_DMA_Abort+0x248>)
 80125ca:	4293      	cmp	r3, r2
 80125cc:	d031      	beq.n	8012632 <HAL_DMA_Abort+0x20e>
 80125ce:	687b      	ldr	r3, [r7, #4]
 80125d0:	681b      	ldr	r3, [r3, #0]
 80125d2:	4a27      	ldr	r2, [pc, #156]	@ (8012670 <HAL_DMA_Abort+0x24c>)
 80125d4:	4293      	cmp	r3, r2
 80125d6:	d02c      	beq.n	8012632 <HAL_DMA_Abort+0x20e>
 80125d8:	687b      	ldr	r3, [r7, #4]
 80125da:	681b      	ldr	r3, [r3, #0]
 80125dc:	4a25      	ldr	r2, [pc, #148]	@ (8012674 <HAL_DMA_Abort+0x250>)
 80125de:	4293      	cmp	r3, r2
 80125e0:	d027      	beq.n	8012632 <HAL_DMA_Abort+0x20e>
 80125e2:	687b      	ldr	r3, [r7, #4]
 80125e4:	681b      	ldr	r3, [r3, #0]
 80125e6:	4a24      	ldr	r2, [pc, #144]	@ (8012678 <HAL_DMA_Abort+0x254>)
 80125e8:	4293      	cmp	r3, r2
 80125ea:	d022      	beq.n	8012632 <HAL_DMA_Abort+0x20e>
 80125ec:	687b      	ldr	r3, [r7, #4]
 80125ee:	681b      	ldr	r3, [r3, #0]
 80125f0:	4a22      	ldr	r2, [pc, #136]	@ (801267c <HAL_DMA_Abort+0x258>)
 80125f2:	4293      	cmp	r3, r2
 80125f4:	d01d      	beq.n	8012632 <HAL_DMA_Abort+0x20e>
 80125f6:	687b      	ldr	r3, [r7, #4]
 80125f8:	681b      	ldr	r3, [r3, #0]
 80125fa:	4a21      	ldr	r2, [pc, #132]	@ (8012680 <HAL_DMA_Abort+0x25c>)
 80125fc:	4293      	cmp	r3, r2
 80125fe:	d018      	beq.n	8012632 <HAL_DMA_Abort+0x20e>
 8012600:	687b      	ldr	r3, [r7, #4]
 8012602:	681b      	ldr	r3, [r3, #0]
 8012604:	4a1f      	ldr	r2, [pc, #124]	@ (8012684 <HAL_DMA_Abort+0x260>)
 8012606:	4293      	cmp	r3, r2
 8012608:	d013      	beq.n	8012632 <HAL_DMA_Abort+0x20e>
 801260a:	687b      	ldr	r3, [r7, #4]
 801260c:	681b      	ldr	r3, [r3, #0]
 801260e:	4a1e      	ldr	r2, [pc, #120]	@ (8012688 <HAL_DMA_Abort+0x264>)
 8012610:	4293      	cmp	r3, r2
 8012612:	d00e      	beq.n	8012632 <HAL_DMA_Abort+0x20e>
 8012614:	687b      	ldr	r3, [r7, #4]
 8012616:	681b      	ldr	r3, [r3, #0]
 8012618:	4a1c      	ldr	r2, [pc, #112]	@ (801268c <HAL_DMA_Abort+0x268>)
 801261a:	4293      	cmp	r3, r2
 801261c:	d009      	beq.n	8012632 <HAL_DMA_Abort+0x20e>
 801261e:	687b      	ldr	r3, [r7, #4]
 8012620:	681b      	ldr	r3, [r3, #0]
 8012622:	4a1b      	ldr	r2, [pc, #108]	@ (8012690 <HAL_DMA_Abort+0x26c>)
 8012624:	4293      	cmp	r3, r2
 8012626:	d004      	beq.n	8012632 <HAL_DMA_Abort+0x20e>
 8012628:	687b      	ldr	r3, [r7, #4]
 801262a:	681b      	ldr	r3, [r3, #0]
 801262c:	4a19      	ldr	r2, [pc, #100]	@ (8012694 <HAL_DMA_Abort+0x270>)
 801262e:	4293      	cmp	r3, r2
 8012630:	d132      	bne.n	8012698 <HAL_DMA_Abort+0x274>
 8012632:	2301      	movs	r3, #1
 8012634:	e031      	b.n	801269a <HAL_DMA_Abort+0x276>
 8012636:	bf00      	nop
 8012638:	40020010 	.word	0x40020010
 801263c:	40020028 	.word	0x40020028
 8012640:	40020040 	.word	0x40020040
 8012644:	40020058 	.word	0x40020058
 8012648:	40020070 	.word	0x40020070
 801264c:	40020088 	.word	0x40020088
 8012650:	400200a0 	.word	0x400200a0
 8012654:	400200b8 	.word	0x400200b8
 8012658:	40020410 	.word	0x40020410
 801265c:	40020428 	.word	0x40020428
 8012660:	40020440 	.word	0x40020440
 8012664:	40020458 	.word	0x40020458
 8012668:	40020470 	.word	0x40020470
 801266c:	40020488 	.word	0x40020488
 8012670:	400204a0 	.word	0x400204a0
 8012674:	400204b8 	.word	0x400204b8
 8012678:	58025408 	.word	0x58025408
 801267c:	5802541c 	.word	0x5802541c
 8012680:	58025430 	.word	0x58025430
 8012684:	58025444 	.word	0x58025444
 8012688:	58025458 	.word	0x58025458
 801268c:	5802546c 	.word	0x5802546c
 8012690:	58025480 	.word	0x58025480
 8012694:	58025494 	.word	0x58025494
 8012698:	2300      	movs	r3, #0
 801269a:	2b00      	cmp	r3, #0
 801269c:	d007      	beq.n	80126ae <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 801269e:	687b      	ldr	r3, [r7, #4]
 80126a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80126a2:	681a      	ldr	r2, [r3, #0]
 80126a4:	687b      	ldr	r3, [r7, #4]
 80126a6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80126a8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80126ac:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80126ae:	687b      	ldr	r3, [r7, #4]
 80126b0:	681b      	ldr	r3, [r3, #0]
 80126b2:	4a6d      	ldr	r2, [pc, #436]	@ (8012868 <HAL_DMA_Abort+0x444>)
 80126b4:	4293      	cmp	r3, r2
 80126b6:	d04a      	beq.n	801274e <HAL_DMA_Abort+0x32a>
 80126b8:	687b      	ldr	r3, [r7, #4]
 80126ba:	681b      	ldr	r3, [r3, #0]
 80126bc:	4a6b      	ldr	r2, [pc, #428]	@ (801286c <HAL_DMA_Abort+0x448>)
 80126be:	4293      	cmp	r3, r2
 80126c0:	d045      	beq.n	801274e <HAL_DMA_Abort+0x32a>
 80126c2:	687b      	ldr	r3, [r7, #4]
 80126c4:	681b      	ldr	r3, [r3, #0]
 80126c6:	4a6a      	ldr	r2, [pc, #424]	@ (8012870 <HAL_DMA_Abort+0x44c>)
 80126c8:	4293      	cmp	r3, r2
 80126ca:	d040      	beq.n	801274e <HAL_DMA_Abort+0x32a>
 80126cc:	687b      	ldr	r3, [r7, #4]
 80126ce:	681b      	ldr	r3, [r3, #0]
 80126d0:	4a68      	ldr	r2, [pc, #416]	@ (8012874 <HAL_DMA_Abort+0x450>)
 80126d2:	4293      	cmp	r3, r2
 80126d4:	d03b      	beq.n	801274e <HAL_DMA_Abort+0x32a>
 80126d6:	687b      	ldr	r3, [r7, #4]
 80126d8:	681b      	ldr	r3, [r3, #0]
 80126da:	4a67      	ldr	r2, [pc, #412]	@ (8012878 <HAL_DMA_Abort+0x454>)
 80126dc:	4293      	cmp	r3, r2
 80126de:	d036      	beq.n	801274e <HAL_DMA_Abort+0x32a>
 80126e0:	687b      	ldr	r3, [r7, #4]
 80126e2:	681b      	ldr	r3, [r3, #0]
 80126e4:	4a65      	ldr	r2, [pc, #404]	@ (801287c <HAL_DMA_Abort+0x458>)
 80126e6:	4293      	cmp	r3, r2
 80126e8:	d031      	beq.n	801274e <HAL_DMA_Abort+0x32a>
 80126ea:	687b      	ldr	r3, [r7, #4]
 80126ec:	681b      	ldr	r3, [r3, #0]
 80126ee:	4a64      	ldr	r2, [pc, #400]	@ (8012880 <HAL_DMA_Abort+0x45c>)
 80126f0:	4293      	cmp	r3, r2
 80126f2:	d02c      	beq.n	801274e <HAL_DMA_Abort+0x32a>
 80126f4:	687b      	ldr	r3, [r7, #4]
 80126f6:	681b      	ldr	r3, [r3, #0]
 80126f8:	4a62      	ldr	r2, [pc, #392]	@ (8012884 <HAL_DMA_Abort+0x460>)
 80126fa:	4293      	cmp	r3, r2
 80126fc:	d027      	beq.n	801274e <HAL_DMA_Abort+0x32a>
 80126fe:	687b      	ldr	r3, [r7, #4]
 8012700:	681b      	ldr	r3, [r3, #0]
 8012702:	4a61      	ldr	r2, [pc, #388]	@ (8012888 <HAL_DMA_Abort+0x464>)
 8012704:	4293      	cmp	r3, r2
 8012706:	d022      	beq.n	801274e <HAL_DMA_Abort+0x32a>
 8012708:	687b      	ldr	r3, [r7, #4]
 801270a:	681b      	ldr	r3, [r3, #0]
 801270c:	4a5f      	ldr	r2, [pc, #380]	@ (801288c <HAL_DMA_Abort+0x468>)
 801270e:	4293      	cmp	r3, r2
 8012710:	d01d      	beq.n	801274e <HAL_DMA_Abort+0x32a>
 8012712:	687b      	ldr	r3, [r7, #4]
 8012714:	681b      	ldr	r3, [r3, #0]
 8012716:	4a5e      	ldr	r2, [pc, #376]	@ (8012890 <HAL_DMA_Abort+0x46c>)
 8012718:	4293      	cmp	r3, r2
 801271a:	d018      	beq.n	801274e <HAL_DMA_Abort+0x32a>
 801271c:	687b      	ldr	r3, [r7, #4]
 801271e:	681b      	ldr	r3, [r3, #0]
 8012720:	4a5c      	ldr	r2, [pc, #368]	@ (8012894 <HAL_DMA_Abort+0x470>)
 8012722:	4293      	cmp	r3, r2
 8012724:	d013      	beq.n	801274e <HAL_DMA_Abort+0x32a>
 8012726:	687b      	ldr	r3, [r7, #4]
 8012728:	681b      	ldr	r3, [r3, #0]
 801272a:	4a5b      	ldr	r2, [pc, #364]	@ (8012898 <HAL_DMA_Abort+0x474>)
 801272c:	4293      	cmp	r3, r2
 801272e:	d00e      	beq.n	801274e <HAL_DMA_Abort+0x32a>
 8012730:	687b      	ldr	r3, [r7, #4]
 8012732:	681b      	ldr	r3, [r3, #0]
 8012734:	4a59      	ldr	r2, [pc, #356]	@ (801289c <HAL_DMA_Abort+0x478>)
 8012736:	4293      	cmp	r3, r2
 8012738:	d009      	beq.n	801274e <HAL_DMA_Abort+0x32a>
 801273a:	687b      	ldr	r3, [r7, #4]
 801273c:	681b      	ldr	r3, [r3, #0]
 801273e:	4a58      	ldr	r2, [pc, #352]	@ (80128a0 <HAL_DMA_Abort+0x47c>)
 8012740:	4293      	cmp	r3, r2
 8012742:	d004      	beq.n	801274e <HAL_DMA_Abort+0x32a>
 8012744:	687b      	ldr	r3, [r7, #4]
 8012746:	681b      	ldr	r3, [r3, #0]
 8012748:	4a56      	ldr	r2, [pc, #344]	@ (80128a4 <HAL_DMA_Abort+0x480>)
 801274a:	4293      	cmp	r3, r2
 801274c:	d108      	bne.n	8012760 <HAL_DMA_Abort+0x33c>
 801274e:	687b      	ldr	r3, [r7, #4]
 8012750:	681b      	ldr	r3, [r3, #0]
 8012752:	681a      	ldr	r2, [r3, #0]
 8012754:	687b      	ldr	r3, [r7, #4]
 8012756:	681b      	ldr	r3, [r3, #0]
 8012758:	f022 0201 	bic.w	r2, r2, #1
 801275c:	601a      	str	r2, [r3, #0]
 801275e:	e007      	b.n	8012770 <HAL_DMA_Abort+0x34c>
 8012760:	687b      	ldr	r3, [r7, #4]
 8012762:	681b      	ldr	r3, [r3, #0]
 8012764:	681a      	ldr	r2, [r3, #0]
 8012766:	687b      	ldr	r3, [r7, #4]
 8012768:	681b      	ldr	r3, [r3, #0]
 801276a:	f022 0201 	bic.w	r2, r2, #1
 801276e:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8012770:	e013      	b.n	801279a <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8012772:	f7fe fffd 	bl	8011770 <HAL_GetTick>
 8012776:	4602      	mov	r2, r0
 8012778:	693b      	ldr	r3, [r7, #16]
 801277a:	1ad3      	subs	r3, r2, r3
 801277c:	2b05      	cmp	r3, #5
 801277e:	d90c      	bls.n	801279a <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8012780:	687b      	ldr	r3, [r7, #4]
 8012782:	2220      	movs	r2, #32
 8012784:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8012786:	687b      	ldr	r3, [r7, #4]
 8012788:	2203      	movs	r2, #3
 801278a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 801278e:	687b      	ldr	r3, [r7, #4]
 8012790:	2200      	movs	r2, #0
 8012792:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8012796:	2301      	movs	r3, #1
 8012798:	e12d      	b.n	80129f6 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 801279a:	697b      	ldr	r3, [r7, #20]
 801279c:	681b      	ldr	r3, [r3, #0]
 801279e:	f003 0301 	and.w	r3, r3, #1
 80127a2:	2b00      	cmp	r3, #0
 80127a4:	d1e5      	bne.n	8012772 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80127a6:	687b      	ldr	r3, [r7, #4]
 80127a8:	681b      	ldr	r3, [r3, #0]
 80127aa:	4a2f      	ldr	r2, [pc, #188]	@ (8012868 <HAL_DMA_Abort+0x444>)
 80127ac:	4293      	cmp	r3, r2
 80127ae:	d04a      	beq.n	8012846 <HAL_DMA_Abort+0x422>
 80127b0:	687b      	ldr	r3, [r7, #4]
 80127b2:	681b      	ldr	r3, [r3, #0]
 80127b4:	4a2d      	ldr	r2, [pc, #180]	@ (801286c <HAL_DMA_Abort+0x448>)
 80127b6:	4293      	cmp	r3, r2
 80127b8:	d045      	beq.n	8012846 <HAL_DMA_Abort+0x422>
 80127ba:	687b      	ldr	r3, [r7, #4]
 80127bc:	681b      	ldr	r3, [r3, #0]
 80127be:	4a2c      	ldr	r2, [pc, #176]	@ (8012870 <HAL_DMA_Abort+0x44c>)
 80127c0:	4293      	cmp	r3, r2
 80127c2:	d040      	beq.n	8012846 <HAL_DMA_Abort+0x422>
 80127c4:	687b      	ldr	r3, [r7, #4]
 80127c6:	681b      	ldr	r3, [r3, #0]
 80127c8:	4a2a      	ldr	r2, [pc, #168]	@ (8012874 <HAL_DMA_Abort+0x450>)
 80127ca:	4293      	cmp	r3, r2
 80127cc:	d03b      	beq.n	8012846 <HAL_DMA_Abort+0x422>
 80127ce:	687b      	ldr	r3, [r7, #4]
 80127d0:	681b      	ldr	r3, [r3, #0]
 80127d2:	4a29      	ldr	r2, [pc, #164]	@ (8012878 <HAL_DMA_Abort+0x454>)
 80127d4:	4293      	cmp	r3, r2
 80127d6:	d036      	beq.n	8012846 <HAL_DMA_Abort+0x422>
 80127d8:	687b      	ldr	r3, [r7, #4]
 80127da:	681b      	ldr	r3, [r3, #0]
 80127dc:	4a27      	ldr	r2, [pc, #156]	@ (801287c <HAL_DMA_Abort+0x458>)
 80127de:	4293      	cmp	r3, r2
 80127e0:	d031      	beq.n	8012846 <HAL_DMA_Abort+0x422>
 80127e2:	687b      	ldr	r3, [r7, #4]
 80127e4:	681b      	ldr	r3, [r3, #0]
 80127e6:	4a26      	ldr	r2, [pc, #152]	@ (8012880 <HAL_DMA_Abort+0x45c>)
 80127e8:	4293      	cmp	r3, r2
 80127ea:	d02c      	beq.n	8012846 <HAL_DMA_Abort+0x422>
 80127ec:	687b      	ldr	r3, [r7, #4]
 80127ee:	681b      	ldr	r3, [r3, #0]
 80127f0:	4a24      	ldr	r2, [pc, #144]	@ (8012884 <HAL_DMA_Abort+0x460>)
 80127f2:	4293      	cmp	r3, r2
 80127f4:	d027      	beq.n	8012846 <HAL_DMA_Abort+0x422>
 80127f6:	687b      	ldr	r3, [r7, #4]
 80127f8:	681b      	ldr	r3, [r3, #0]
 80127fa:	4a23      	ldr	r2, [pc, #140]	@ (8012888 <HAL_DMA_Abort+0x464>)
 80127fc:	4293      	cmp	r3, r2
 80127fe:	d022      	beq.n	8012846 <HAL_DMA_Abort+0x422>
 8012800:	687b      	ldr	r3, [r7, #4]
 8012802:	681b      	ldr	r3, [r3, #0]
 8012804:	4a21      	ldr	r2, [pc, #132]	@ (801288c <HAL_DMA_Abort+0x468>)
 8012806:	4293      	cmp	r3, r2
 8012808:	d01d      	beq.n	8012846 <HAL_DMA_Abort+0x422>
 801280a:	687b      	ldr	r3, [r7, #4]
 801280c:	681b      	ldr	r3, [r3, #0]
 801280e:	4a20      	ldr	r2, [pc, #128]	@ (8012890 <HAL_DMA_Abort+0x46c>)
 8012810:	4293      	cmp	r3, r2
 8012812:	d018      	beq.n	8012846 <HAL_DMA_Abort+0x422>
 8012814:	687b      	ldr	r3, [r7, #4]
 8012816:	681b      	ldr	r3, [r3, #0]
 8012818:	4a1e      	ldr	r2, [pc, #120]	@ (8012894 <HAL_DMA_Abort+0x470>)
 801281a:	4293      	cmp	r3, r2
 801281c:	d013      	beq.n	8012846 <HAL_DMA_Abort+0x422>
 801281e:	687b      	ldr	r3, [r7, #4]
 8012820:	681b      	ldr	r3, [r3, #0]
 8012822:	4a1d      	ldr	r2, [pc, #116]	@ (8012898 <HAL_DMA_Abort+0x474>)
 8012824:	4293      	cmp	r3, r2
 8012826:	d00e      	beq.n	8012846 <HAL_DMA_Abort+0x422>
 8012828:	687b      	ldr	r3, [r7, #4]
 801282a:	681b      	ldr	r3, [r3, #0]
 801282c:	4a1b      	ldr	r2, [pc, #108]	@ (801289c <HAL_DMA_Abort+0x478>)
 801282e:	4293      	cmp	r3, r2
 8012830:	d009      	beq.n	8012846 <HAL_DMA_Abort+0x422>
 8012832:	687b      	ldr	r3, [r7, #4]
 8012834:	681b      	ldr	r3, [r3, #0]
 8012836:	4a1a      	ldr	r2, [pc, #104]	@ (80128a0 <HAL_DMA_Abort+0x47c>)
 8012838:	4293      	cmp	r3, r2
 801283a:	d004      	beq.n	8012846 <HAL_DMA_Abort+0x422>
 801283c:	687b      	ldr	r3, [r7, #4]
 801283e:	681b      	ldr	r3, [r3, #0]
 8012840:	4a18      	ldr	r2, [pc, #96]	@ (80128a4 <HAL_DMA_Abort+0x480>)
 8012842:	4293      	cmp	r3, r2
 8012844:	d101      	bne.n	801284a <HAL_DMA_Abort+0x426>
 8012846:	2301      	movs	r3, #1
 8012848:	e000      	b.n	801284c <HAL_DMA_Abort+0x428>
 801284a:	2300      	movs	r3, #0
 801284c:	2b00      	cmp	r3, #0
 801284e:	d02b      	beq.n	80128a8 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8012850:	687b      	ldr	r3, [r7, #4]
 8012852:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8012854:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8012856:	687b      	ldr	r3, [r7, #4]
 8012858:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801285a:	f003 031f 	and.w	r3, r3, #31
 801285e:	223f      	movs	r2, #63	@ 0x3f
 8012860:	409a      	lsls	r2, r3
 8012862:	68bb      	ldr	r3, [r7, #8]
 8012864:	609a      	str	r2, [r3, #8]
 8012866:	e02a      	b.n	80128be <HAL_DMA_Abort+0x49a>
 8012868:	40020010 	.word	0x40020010
 801286c:	40020028 	.word	0x40020028
 8012870:	40020040 	.word	0x40020040
 8012874:	40020058 	.word	0x40020058
 8012878:	40020070 	.word	0x40020070
 801287c:	40020088 	.word	0x40020088
 8012880:	400200a0 	.word	0x400200a0
 8012884:	400200b8 	.word	0x400200b8
 8012888:	40020410 	.word	0x40020410
 801288c:	40020428 	.word	0x40020428
 8012890:	40020440 	.word	0x40020440
 8012894:	40020458 	.word	0x40020458
 8012898:	40020470 	.word	0x40020470
 801289c:	40020488 	.word	0x40020488
 80128a0:	400204a0 	.word	0x400204a0
 80128a4:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80128a8:	687b      	ldr	r3, [r7, #4]
 80128aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80128ac:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80128ae:	687b      	ldr	r3, [r7, #4]
 80128b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80128b2:	f003 031f 	and.w	r3, r3, #31
 80128b6:	2201      	movs	r2, #1
 80128b8:	409a      	lsls	r2, r3
 80128ba:	68fb      	ldr	r3, [r7, #12]
 80128bc:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80128be:	687b      	ldr	r3, [r7, #4]
 80128c0:	681b      	ldr	r3, [r3, #0]
 80128c2:	4a4f      	ldr	r2, [pc, #316]	@ (8012a00 <HAL_DMA_Abort+0x5dc>)
 80128c4:	4293      	cmp	r3, r2
 80128c6:	d072      	beq.n	80129ae <HAL_DMA_Abort+0x58a>
 80128c8:	687b      	ldr	r3, [r7, #4]
 80128ca:	681b      	ldr	r3, [r3, #0]
 80128cc:	4a4d      	ldr	r2, [pc, #308]	@ (8012a04 <HAL_DMA_Abort+0x5e0>)
 80128ce:	4293      	cmp	r3, r2
 80128d0:	d06d      	beq.n	80129ae <HAL_DMA_Abort+0x58a>
 80128d2:	687b      	ldr	r3, [r7, #4]
 80128d4:	681b      	ldr	r3, [r3, #0]
 80128d6:	4a4c      	ldr	r2, [pc, #304]	@ (8012a08 <HAL_DMA_Abort+0x5e4>)
 80128d8:	4293      	cmp	r3, r2
 80128da:	d068      	beq.n	80129ae <HAL_DMA_Abort+0x58a>
 80128dc:	687b      	ldr	r3, [r7, #4]
 80128de:	681b      	ldr	r3, [r3, #0]
 80128e0:	4a4a      	ldr	r2, [pc, #296]	@ (8012a0c <HAL_DMA_Abort+0x5e8>)
 80128e2:	4293      	cmp	r3, r2
 80128e4:	d063      	beq.n	80129ae <HAL_DMA_Abort+0x58a>
 80128e6:	687b      	ldr	r3, [r7, #4]
 80128e8:	681b      	ldr	r3, [r3, #0]
 80128ea:	4a49      	ldr	r2, [pc, #292]	@ (8012a10 <HAL_DMA_Abort+0x5ec>)
 80128ec:	4293      	cmp	r3, r2
 80128ee:	d05e      	beq.n	80129ae <HAL_DMA_Abort+0x58a>
 80128f0:	687b      	ldr	r3, [r7, #4]
 80128f2:	681b      	ldr	r3, [r3, #0]
 80128f4:	4a47      	ldr	r2, [pc, #284]	@ (8012a14 <HAL_DMA_Abort+0x5f0>)
 80128f6:	4293      	cmp	r3, r2
 80128f8:	d059      	beq.n	80129ae <HAL_DMA_Abort+0x58a>
 80128fa:	687b      	ldr	r3, [r7, #4]
 80128fc:	681b      	ldr	r3, [r3, #0]
 80128fe:	4a46      	ldr	r2, [pc, #280]	@ (8012a18 <HAL_DMA_Abort+0x5f4>)
 8012900:	4293      	cmp	r3, r2
 8012902:	d054      	beq.n	80129ae <HAL_DMA_Abort+0x58a>
 8012904:	687b      	ldr	r3, [r7, #4]
 8012906:	681b      	ldr	r3, [r3, #0]
 8012908:	4a44      	ldr	r2, [pc, #272]	@ (8012a1c <HAL_DMA_Abort+0x5f8>)
 801290a:	4293      	cmp	r3, r2
 801290c:	d04f      	beq.n	80129ae <HAL_DMA_Abort+0x58a>
 801290e:	687b      	ldr	r3, [r7, #4]
 8012910:	681b      	ldr	r3, [r3, #0]
 8012912:	4a43      	ldr	r2, [pc, #268]	@ (8012a20 <HAL_DMA_Abort+0x5fc>)
 8012914:	4293      	cmp	r3, r2
 8012916:	d04a      	beq.n	80129ae <HAL_DMA_Abort+0x58a>
 8012918:	687b      	ldr	r3, [r7, #4]
 801291a:	681b      	ldr	r3, [r3, #0]
 801291c:	4a41      	ldr	r2, [pc, #260]	@ (8012a24 <HAL_DMA_Abort+0x600>)
 801291e:	4293      	cmp	r3, r2
 8012920:	d045      	beq.n	80129ae <HAL_DMA_Abort+0x58a>
 8012922:	687b      	ldr	r3, [r7, #4]
 8012924:	681b      	ldr	r3, [r3, #0]
 8012926:	4a40      	ldr	r2, [pc, #256]	@ (8012a28 <HAL_DMA_Abort+0x604>)
 8012928:	4293      	cmp	r3, r2
 801292a:	d040      	beq.n	80129ae <HAL_DMA_Abort+0x58a>
 801292c:	687b      	ldr	r3, [r7, #4]
 801292e:	681b      	ldr	r3, [r3, #0]
 8012930:	4a3e      	ldr	r2, [pc, #248]	@ (8012a2c <HAL_DMA_Abort+0x608>)
 8012932:	4293      	cmp	r3, r2
 8012934:	d03b      	beq.n	80129ae <HAL_DMA_Abort+0x58a>
 8012936:	687b      	ldr	r3, [r7, #4]
 8012938:	681b      	ldr	r3, [r3, #0]
 801293a:	4a3d      	ldr	r2, [pc, #244]	@ (8012a30 <HAL_DMA_Abort+0x60c>)
 801293c:	4293      	cmp	r3, r2
 801293e:	d036      	beq.n	80129ae <HAL_DMA_Abort+0x58a>
 8012940:	687b      	ldr	r3, [r7, #4]
 8012942:	681b      	ldr	r3, [r3, #0]
 8012944:	4a3b      	ldr	r2, [pc, #236]	@ (8012a34 <HAL_DMA_Abort+0x610>)
 8012946:	4293      	cmp	r3, r2
 8012948:	d031      	beq.n	80129ae <HAL_DMA_Abort+0x58a>
 801294a:	687b      	ldr	r3, [r7, #4]
 801294c:	681b      	ldr	r3, [r3, #0]
 801294e:	4a3a      	ldr	r2, [pc, #232]	@ (8012a38 <HAL_DMA_Abort+0x614>)
 8012950:	4293      	cmp	r3, r2
 8012952:	d02c      	beq.n	80129ae <HAL_DMA_Abort+0x58a>
 8012954:	687b      	ldr	r3, [r7, #4]
 8012956:	681b      	ldr	r3, [r3, #0]
 8012958:	4a38      	ldr	r2, [pc, #224]	@ (8012a3c <HAL_DMA_Abort+0x618>)
 801295a:	4293      	cmp	r3, r2
 801295c:	d027      	beq.n	80129ae <HAL_DMA_Abort+0x58a>
 801295e:	687b      	ldr	r3, [r7, #4]
 8012960:	681b      	ldr	r3, [r3, #0]
 8012962:	4a37      	ldr	r2, [pc, #220]	@ (8012a40 <HAL_DMA_Abort+0x61c>)
 8012964:	4293      	cmp	r3, r2
 8012966:	d022      	beq.n	80129ae <HAL_DMA_Abort+0x58a>
 8012968:	687b      	ldr	r3, [r7, #4]
 801296a:	681b      	ldr	r3, [r3, #0]
 801296c:	4a35      	ldr	r2, [pc, #212]	@ (8012a44 <HAL_DMA_Abort+0x620>)
 801296e:	4293      	cmp	r3, r2
 8012970:	d01d      	beq.n	80129ae <HAL_DMA_Abort+0x58a>
 8012972:	687b      	ldr	r3, [r7, #4]
 8012974:	681b      	ldr	r3, [r3, #0]
 8012976:	4a34      	ldr	r2, [pc, #208]	@ (8012a48 <HAL_DMA_Abort+0x624>)
 8012978:	4293      	cmp	r3, r2
 801297a:	d018      	beq.n	80129ae <HAL_DMA_Abort+0x58a>
 801297c:	687b      	ldr	r3, [r7, #4]
 801297e:	681b      	ldr	r3, [r3, #0]
 8012980:	4a32      	ldr	r2, [pc, #200]	@ (8012a4c <HAL_DMA_Abort+0x628>)
 8012982:	4293      	cmp	r3, r2
 8012984:	d013      	beq.n	80129ae <HAL_DMA_Abort+0x58a>
 8012986:	687b      	ldr	r3, [r7, #4]
 8012988:	681b      	ldr	r3, [r3, #0]
 801298a:	4a31      	ldr	r2, [pc, #196]	@ (8012a50 <HAL_DMA_Abort+0x62c>)
 801298c:	4293      	cmp	r3, r2
 801298e:	d00e      	beq.n	80129ae <HAL_DMA_Abort+0x58a>
 8012990:	687b      	ldr	r3, [r7, #4]
 8012992:	681b      	ldr	r3, [r3, #0]
 8012994:	4a2f      	ldr	r2, [pc, #188]	@ (8012a54 <HAL_DMA_Abort+0x630>)
 8012996:	4293      	cmp	r3, r2
 8012998:	d009      	beq.n	80129ae <HAL_DMA_Abort+0x58a>
 801299a:	687b      	ldr	r3, [r7, #4]
 801299c:	681b      	ldr	r3, [r3, #0]
 801299e:	4a2e      	ldr	r2, [pc, #184]	@ (8012a58 <HAL_DMA_Abort+0x634>)
 80129a0:	4293      	cmp	r3, r2
 80129a2:	d004      	beq.n	80129ae <HAL_DMA_Abort+0x58a>
 80129a4:	687b      	ldr	r3, [r7, #4]
 80129a6:	681b      	ldr	r3, [r3, #0]
 80129a8:	4a2c      	ldr	r2, [pc, #176]	@ (8012a5c <HAL_DMA_Abort+0x638>)
 80129aa:	4293      	cmp	r3, r2
 80129ac:	d101      	bne.n	80129b2 <HAL_DMA_Abort+0x58e>
 80129ae:	2301      	movs	r3, #1
 80129b0:	e000      	b.n	80129b4 <HAL_DMA_Abort+0x590>
 80129b2:	2300      	movs	r3, #0
 80129b4:	2b00      	cmp	r3, #0
 80129b6:	d015      	beq.n	80129e4 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80129b8:	687b      	ldr	r3, [r7, #4]
 80129ba:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80129bc:	687a      	ldr	r2, [r7, #4]
 80129be:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80129c0:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80129c2:	687b      	ldr	r3, [r7, #4]
 80129c4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80129c6:	2b00      	cmp	r3, #0
 80129c8:	d00c      	beq.n	80129e4 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80129ca:	687b      	ldr	r3, [r7, #4]
 80129cc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80129ce:	681a      	ldr	r2, [r3, #0]
 80129d0:	687b      	ldr	r3, [r7, #4]
 80129d2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80129d4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80129d8:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80129da:	687b      	ldr	r3, [r7, #4]
 80129dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80129de:	687a      	ldr	r2, [r7, #4]
 80129e0:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80129e2:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80129e4:	687b      	ldr	r3, [r7, #4]
 80129e6:	2201      	movs	r2, #1
 80129e8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80129ec:	687b      	ldr	r3, [r7, #4]
 80129ee:	2200      	movs	r2, #0
 80129f0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 80129f4:	2300      	movs	r3, #0
}
 80129f6:	4618      	mov	r0, r3
 80129f8:	3718      	adds	r7, #24
 80129fa:	46bd      	mov	sp, r7
 80129fc:	bd80      	pop	{r7, pc}
 80129fe:	bf00      	nop
 8012a00:	40020010 	.word	0x40020010
 8012a04:	40020028 	.word	0x40020028
 8012a08:	40020040 	.word	0x40020040
 8012a0c:	40020058 	.word	0x40020058
 8012a10:	40020070 	.word	0x40020070
 8012a14:	40020088 	.word	0x40020088
 8012a18:	400200a0 	.word	0x400200a0
 8012a1c:	400200b8 	.word	0x400200b8
 8012a20:	40020410 	.word	0x40020410
 8012a24:	40020428 	.word	0x40020428
 8012a28:	40020440 	.word	0x40020440
 8012a2c:	40020458 	.word	0x40020458
 8012a30:	40020470 	.word	0x40020470
 8012a34:	40020488 	.word	0x40020488
 8012a38:	400204a0 	.word	0x400204a0
 8012a3c:	400204b8 	.word	0x400204b8
 8012a40:	58025408 	.word	0x58025408
 8012a44:	5802541c 	.word	0x5802541c
 8012a48:	58025430 	.word	0x58025430
 8012a4c:	58025444 	.word	0x58025444
 8012a50:	58025458 	.word	0x58025458
 8012a54:	5802546c 	.word	0x5802546c
 8012a58:	58025480 	.word	0x58025480
 8012a5c:	58025494 	.word	0x58025494

08012a60 <HAL_DMA_PollForTransfer>:
  * @note   The HAL_DMA_PollForTransfer API cannot be used in circular and double buffering mode (automatic circular mode).
  * @param  Timeout:       Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_PollForTransfer(DMA_HandleTypeDef *hdma, HAL_DMA_LevelCompleteTypeDef CompleteLevel, uint32_t Timeout)
{
 8012a60:	b580      	push	{r7, lr}
 8012a62:	b08a      	sub	sp, #40	@ 0x28
 8012a64:	af00      	add	r7, sp, #0
 8012a66:	60f8      	str	r0, [r7, #12]
 8012a68:	460b      	mov	r3, r1
 8012a6a:	607a      	str	r2, [r7, #4]
 8012a6c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8012a6e:	2300      	movs	r3, #0
 8012a70:	76fb      	strb	r3, [r7, #27]
  uint32_t cpltlevel_mask;
  uint32_t tickstart = HAL_GetTick();
 8012a72:	f7fe fe7d 	bl	8011770 <HAL_GetTick>
 8012a76:	6178      	str	r0, [r7, #20]
  __IO uint32_t *isr_reg;
  /* IT clear flag register */
  __IO uint32_t *ifcr_reg;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8012a78:	68fb      	ldr	r3, [r7, #12]
 8012a7a:	2b00      	cmp	r3, #0
 8012a7c:	d101      	bne.n	8012a82 <HAL_DMA_PollForTransfer+0x22>
  {
    return HAL_ERROR;
 8012a7e:	2301      	movs	r3, #1
 8012a80:	e374      	b.n	801316c <HAL_DMA_PollForTransfer+0x70c>
  }

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8012a82:	68fb      	ldr	r3, [r7, #12]
 8012a84:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8012a88:	b2db      	uxtb	r3, r3
 8012a8a:	2b02      	cmp	r3, #2
 8012a8c:	d008      	beq.n	8012aa0 <HAL_DMA_PollForTransfer+0x40>
  {
    /* No transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8012a8e:	68fb      	ldr	r3, [r7, #12]
 8012a90:	2280      	movs	r2, #128	@ 0x80
 8012a92:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hdma);
 8012a94:	68fb      	ldr	r3, [r7, #12]
 8012a96:	2200      	movs	r2, #0
 8012a98:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 8012a9c:	2301      	movs	r3, #1
 8012a9e:	e365      	b.n	801316c <HAL_DMA_PollForTransfer+0x70c>
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8012aa0:	68fb      	ldr	r3, [r7, #12]
 8012aa2:	681b      	ldr	r3, [r3, #0]
 8012aa4:	4a7b      	ldr	r2, [pc, #492]	@ (8012c94 <HAL_DMA_PollForTransfer+0x234>)
 8012aa6:	4293      	cmp	r3, r2
 8012aa8:	d04a      	beq.n	8012b40 <HAL_DMA_PollForTransfer+0xe0>
 8012aaa:	68fb      	ldr	r3, [r7, #12]
 8012aac:	681b      	ldr	r3, [r3, #0]
 8012aae:	4a7a      	ldr	r2, [pc, #488]	@ (8012c98 <HAL_DMA_PollForTransfer+0x238>)
 8012ab0:	4293      	cmp	r3, r2
 8012ab2:	d045      	beq.n	8012b40 <HAL_DMA_PollForTransfer+0xe0>
 8012ab4:	68fb      	ldr	r3, [r7, #12]
 8012ab6:	681b      	ldr	r3, [r3, #0]
 8012ab8:	4a78      	ldr	r2, [pc, #480]	@ (8012c9c <HAL_DMA_PollForTransfer+0x23c>)
 8012aba:	4293      	cmp	r3, r2
 8012abc:	d040      	beq.n	8012b40 <HAL_DMA_PollForTransfer+0xe0>
 8012abe:	68fb      	ldr	r3, [r7, #12]
 8012ac0:	681b      	ldr	r3, [r3, #0]
 8012ac2:	4a77      	ldr	r2, [pc, #476]	@ (8012ca0 <HAL_DMA_PollForTransfer+0x240>)
 8012ac4:	4293      	cmp	r3, r2
 8012ac6:	d03b      	beq.n	8012b40 <HAL_DMA_PollForTransfer+0xe0>
 8012ac8:	68fb      	ldr	r3, [r7, #12]
 8012aca:	681b      	ldr	r3, [r3, #0]
 8012acc:	4a75      	ldr	r2, [pc, #468]	@ (8012ca4 <HAL_DMA_PollForTransfer+0x244>)
 8012ace:	4293      	cmp	r3, r2
 8012ad0:	d036      	beq.n	8012b40 <HAL_DMA_PollForTransfer+0xe0>
 8012ad2:	68fb      	ldr	r3, [r7, #12]
 8012ad4:	681b      	ldr	r3, [r3, #0]
 8012ad6:	4a74      	ldr	r2, [pc, #464]	@ (8012ca8 <HAL_DMA_PollForTransfer+0x248>)
 8012ad8:	4293      	cmp	r3, r2
 8012ada:	d031      	beq.n	8012b40 <HAL_DMA_PollForTransfer+0xe0>
 8012adc:	68fb      	ldr	r3, [r7, #12]
 8012ade:	681b      	ldr	r3, [r3, #0]
 8012ae0:	4a72      	ldr	r2, [pc, #456]	@ (8012cac <HAL_DMA_PollForTransfer+0x24c>)
 8012ae2:	4293      	cmp	r3, r2
 8012ae4:	d02c      	beq.n	8012b40 <HAL_DMA_PollForTransfer+0xe0>
 8012ae6:	68fb      	ldr	r3, [r7, #12]
 8012ae8:	681b      	ldr	r3, [r3, #0]
 8012aea:	4a71      	ldr	r2, [pc, #452]	@ (8012cb0 <HAL_DMA_PollForTransfer+0x250>)
 8012aec:	4293      	cmp	r3, r2
 8012aee:	d027      	beq.n	8012b40 <HAL_DMA_PollForTransfer+0xe0>
 8012af0:	68fb      	ldr	r3, [r7, #12]
 8012af2:	681b      	ldr	r3, [r3, #0]
 8012af4:	4a6f      	ldr	r2, [pc, #444]	@ (8012cb4 <HAL_DMA_PollForTransfer+0x254>)
 8012af6:	4293      	cmp	r3, r2
 8012af8:	d022      	beq.n	8012b40 <HAL_DMA_PollForTransfer+0xe0>
 8012afa:	68fb      	ldr	r3, [r7, #12]
 8012afc:	681b      	ldr	r3, [r3, #0]
 8012afe:	4a6e      	ldr	r2, [pc, #440]	@ (8012cb8 <HAL_DMA_PollForTransfer+0x258>)
 8012b00:	4293      	cmp	r3, r2
 8012b02:	d01d      	beq.n	8012b40 <HAL_DMA_PollForTransfer+0xe0>
 8012b04:	68fb      	ldr	r3, [r7, #12]
 8012b06:	681b      	ldr	r3, [r3, #0]
 8012b08:	4a6c      	ldr	r2, [pc, #432]	@ (8012cbc <HAL_DMA_PollForTransfer+0x25c>)
 8012b0a:	4293      	cmp	r3, r2
 8012b0c:	d018      	beq.n	8012b40 <HAL_DMA_PollForTransfer+0xe0>
 8012b0e:	68fb      	ldr	r3, [r7, #12]
 8012b10:	681b      	ldr	r3, [r3, #0]
 8012b12:	4a6b      	ldr	r2, [pc, #428]	@ (8012cc0 <HAL_DMA_PollForTransfer+0x260>)
 8012b14:	4293      	cmp	r3, r2
 8012b16:	d013      	beq.n	8012b40 <HAL_DMA_PollForTransfer+0xe0>
 8012b18:	68fb      	ldr	r3, [r7, #12]
 8012b1a:	681b      	ldr	r3, [r3, #0]
 8012b1c:	4a69      	ldr	r2, [pc, #420]	@ (8012cc4 <HAL_DMA_PollForTransfer+0x264>)
 8012b1e:	4293      	cmp	r3, r2
 8012b20:	d00e      	beq.n	8012b40 <HAL_DMA_PollForTransfer+0xe0>
 8012b22:	68fb      	ldr	r3, [r7, #12]
 8012b24:	681b      	ldr	r3, [r3, #0]
 8012b26:	4a68      	ldr	r2, [pc, #416]	@ (8012cc8 <HAL_DMA_PollForTransfer+0x268>)
 8012b28:	4293      	cmp	r3, r2
 8012b2a:	d009      	beq.n	8012b40 <HAL_DMA_PollForTransfer+0xe0>
 8012b2c:	68fb      	ldr	r3, [r7, #12]
 8012b2e:	681b      	ldr	r3, [r3, #0]
 8012b30:	4a66      	ldr	r2, [pc, #408]	@ (8012ccc <HAL_DMA_PollForTransfer+0x26c>)
 8012b32:	4293      	cmp	r3, r2
 8012b34:	d004      	beq.n	8012b40 <HAL_DMA_PollForTransfer+0xe0>
 8012b36:	68fb      	ldr	r3, [r7, #12]
 8012b38:	681b      	ldr	r3, [r3, #0]
 8012b3a:	4a65      	ldr	r2, [pc, #404]	@ (8012cd0 <HAL_DMA_PollForTransfer+0x270>)
 8012b3c:	4293      	cmp	r3, r2
 8012b3e:	d101      	bne.n	8012b44 <HAL_DMA_PollForTransfer+0xe4>
 8012b40:	2301      	movs	r3, #1
 8012b42:	e000      	b.n	8012b46 <HAL_DMA_PollForTransfer+0xe6>
 8012b44:	2300      	movs	r3, #0
 8012b46:	2b00      	cmp	r3, #0
 8012b48:	d028      	beq.n	8012b9c <HAL_DMA_PollForTransfer+0x13c>
  {
    /* Polling mode not supported in circular mode and double buffering mode */
    if ((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) != 0U)
 8012b4a:	68fb      	ldr	r3, [r7, #12]
 8012b4c:	681b      	ldr	r3, [r3, #0]
 8012b4e:	681b      	ldr	r3, [r3, #0]
 8012b50:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8012b54:	2b00      	cmp	r3, #0
 8012b56:	d005      	beq.n	8012b64 <HAL_DMA_PollForTransfer+0x104>
    {
      hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 8012b58:	68fb      	ldr	r3, [r7, #12]
 8012b5a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8012b5e:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_ERROR;
 8012b60:	2301      	movs	r3, #1
 8012b62:	e303      	b.n	801316c <HAL_DMA_PollForTransfer+0x70c>
    }

    /* Get the level transfer complete flag */
    if(CompleteLevel == HAL_DMA_FULL_TRANSFER)
 8012b64:	7afb      	ldrb	r3, [r7, #11]
 8012b66:	2b00      	cmp	r3, #0
 8012b68:	d108      	bne.n	8012b7c <HAL_DMA_PollForTransfer+0x11c>
    {
      /* Transfer Complete flag */
      cpltlevel_mask = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8012b6a:	68fb      	ldr	r3, [r7, #12]
 8012b6c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8012b6e:	f003 031f 	and.w	r3, r3, #31
 8012b72:	2220      	movs	r2, #32
 8012b74:	fa02 f303 	lsl.w	r3, r2, r3
 8012b78:	627b      	str	r3, [r7, #36]	@ 0x24
 8012b7a:	e007      	b.n	8012b8c <HAL_DMA_PollForTransfer+0x12c>
    }
    else
    {
      /* Half Transfer Complete flag */
      cpltlevel_mask = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8012b7c:	68fb      	ldr	r3, [r7, #12]
 8012b7e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8012b80:	f003 031f 	and.w	r3, r3, #31
 8012b84:	2210      	movs	r2, #16
 8012b86:	fa02 f303 	lsl.w	r3, r2, r3
 8012b8a:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    isr_reg  = &(((DMA_Base_Registers *)hdma->StreamBaseAddress)->ISR);
 8012b8c:	68fb      	ldr	r3, [r7, #12]
 8012b8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8012b90:	623b      	str	r3, [r7, #32]
    ifcr_reg = &(((DMA_Base_Registers *)hdma->StreamBaseAddress)->IFCR);
 8012b92:	68fb      	ldr	r3, [r7, #12]
 8012b94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8012b96:	3308      	adds	r3, #8
 8012b98:	61fb      	str	r3, [r7, #28]
 8012b9a:	e1d5      	b.n	8012f48 <HAL_DMA_PollForTransfer+0x4e8>
  }
  else /* BDMA channel */
  {
    /* Polling mode not supported in circular mode */
    if ((((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR & BDMA_CCR_CIRC) != 0U)
 8012b9c:	68fb      	ldr	r3, [r7, #12]
 8012b9e:	681b      	ldr	r3, [r3, #0]
 8012ba0:	681b      	ldr	r3, [r3, #0]
 8012ba2:	f003 0320 	and.w	r3, r3, #32
 8012ba6:	2b00      	cmp	r3, #0
 8012ba8:	d005      	beq.n	8012bb6 <HAL_DMA_PollForTransfer+0x156>
    {
      hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 8012baa:	68fb      	ldr	r3, [r7, #12]
 8012bac:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8012bb0:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_ERROR;
 8012bb2:	2301      	movs	r3, #1
 8012bb4:	e2da      	b.n	801316c <HAL_DMA_PollForTransfer+0x70c>
    }

    /* Get the level transfer complete flag */
    if(CompleteLevel == HAL_DMA_FULL_TRANSFER)
 8012bb6:	7afb      	ldrb	r3, [r7, #11]
 8012bb8:	2b00      	cmp	r3, #0
 8012bba:	d108      	bne.n	8012bce <HAL_DMA_PollForTransfer+0x16e>
    {
      /* Transfer Complete flag */
      cpltlevel_mask = BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU);
 8012bbc:	68fb      	ldr	r3, [r7, #12]
 8012bbe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8012bc0:	f003 031f 	and.w	r3, r3, #31
 8012bc4:	2202      	movs	r2, #2
 8012bc6:	fa02 f303 	lsl.w	r3, r2, r3
 8012bca:	627b      	str	r3, [r7, #36]	@ 0x24
 8012bcc:	e007      	b.n	8012bde <HAL_DMA_PollForTransfer+0x17e>
    }
    else
    {
      /* Half Transfer Complete flag */
      cpltlevel_mask = BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU);
 8012bce:	68fb      	ldr	r3, [r7, #12]
 8012bd0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8012bd2:	f003 031f 	and.w	r3, r3, #31
 8012bd6:	2204      	movs	r2, #4
 8012bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8012bdc:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    isr_reg  = &(((BDMA_Base_Registers *)hdma->StreamBaseAddress)->ISR);
 8012bde:	68fb      	ldr	r3, [r7, #12]
 8012be0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8012be2:	623b      	str	r3, [r7, #32]
    ifcr_reg = &(((BDMA_Base_Registers *)hdma->StreamBaseAddress)->IFCR);
 8012be4:	68fb      	ldr	r3, [r7, #12]
 8012be6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8012be8:	3304      	adds	r3, #4
 8012bea:	61fb      	str	r3, [r7, #28]
  }

  while(((*isr_reg) & cpltlevel_mask) == 0U)
 8012bec:	e1ac      	b.n	8012f48 <HAL_DMA_PollForTransfer+0x4e8>
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8012bee:	68fb      	ldr	r3, [r7, #12]
 8012bf0:	681b      	ldr	r3, [r3, #0]
 8012bf2:	4a28      	ldr	r2, [pc, #160]	@ (8012c94 <HAL_DMA_PollForTransfer+0x234>)
 8012bf4:	4293      	cmp	r3, r2
 8012bf6:	d04a      	beq.n	8012c8e <HAL_DMA_PollForTransfer+0x22e>
 8012bf8:	68fb      	ldr	r3, [r7, #12]
 8012bfa:	681b      	ldr	r3, [r3, #0]
 8012bfc:	4a26      	ldr	r2, [pc, #152]	@ (8012c98 <HAL_DMA_PollForTransfer+0x238>)
 8012bfe:	4293      	cmp	r3, r2
 8012c00:	d045      	beq.n	8012c8e <HAL_DMA_PollForTransfer+0x22e>
 8012c02:	68fb      	ldr	r3, [r7, #12]
 8012c04:	681b      	ldr	r3, [r3, #0]
 8012c06:	4a25      	ldr	r2, [pc, #148]	@ (8012c9c <HAL_DMA_PollForTransfer+0x23c>)
 8012c08:	4293      	cmp	r3, r2
 8012c0a:	d040      	beq.n	8012c8e <HAL_DMA_PollForTransfer+0x22e>
 8012c0c:	68fb      	ldr	r3, [r7, #12]
 8012c0e:	681b      	ldr	r3, [r3, #0]
 8012c10:	4a23      	ldr	r2, [pc, #140]	@ (8012ca0 <HAL_DMA_PollForTransfer+0x240>)
 8012c12:	4293      	cmp	r3, r2
 8012c14:	d03b      	beq.n	8012c8e <HAL_DMA_PollForTransfer+0x22e>
 8012c16:	68fb      	ldr	r3, [r7, #12]
 8012c18:	681b      	ldr	r3, [r3, #0]
 8012c1a:	4a22      	ldr	r2, [pc, #136]	@ (8012ca4 <HAL_DMA_PollForTransfer+0x244>)
 8012c1c:	4293      	cmp	r3, r2
 8012c1e:	d036      	beq.n	8012c8e <HAL_DMA_PollForTransfer+0x22e>
 8012c20:	68fb      	ldr	r3, [r7, #12]
 8012c22:	681b      	ldr	r3, [r3, #0]
 8012c24:	4a20      	ldr	r2, [pc, #128]	@ (8012ca8 <HAL_DMA_PollForTransfer+0x248>)
 8012c26:	4293      	cmp	r3, r2
 8012c28:	d031      	beq.n	8012c8e <HAL_DMA_PollForTransfer+0x22e>
 8012c2a:	68fb      	ldr	r3, [r7, #12]
 8012c2c:	681b      	ldr	r3, [r3, #0]
 8012c2e:	4a1f      	ldr	r2, [pc, #124]	@ (8012cac <HAL_DMA_PollForTransfer+0x24c>)
 8012c30:	4293      	cmp	r3, r2
 8012c32:	d02c      	beq.n	8012c8e <HAL_DMA_PollForTransfer+0x22e>
 8012c34:	68fb      	ldr	r3, [r7, #12]
 8012c36:	681b      	ldr	r3, [r3, #0]
 8012c38:	4a1d      	ldr	r2, [pc, #116]	@ (8012cb0 <HAL_DMA_PollForTransfer+0x250>)
 8012c3a:	4293      	cmp	r3, r2
 8012c3c:	d027      	beq.n	8012c8e <HAL_DMA_PollForTransfer+0x22e>
 8012c3e:	68fb      	ldr	r3, [r7, #12]
 8012c40:	681b      	ldr	r3, [r3, #0]
 8012c42:	4a1c      	ldr	r2, [pc, #112]	@ (8012cb4 <HAL_DMA_PollForTransfer+0x254>)
 8012c44:	4293      	cmp	r3, r2
 8012c46:	d022      	beq.n	8012c8e <HAL_DMA_PollForTransfer+0x22e>
 8012c48:	68fb      	ldr	r3, [r7, #12]
 8012c4a:	681b      	ldr	r3, [r3, #0]
 8012c4c:	4a1a      	ldr	r2, [pc, #104]	@ (8012cb8 <HAL_DMA_PollForTransfer+0x258>)
 8012c4e:	4293      	cmp	r3, r2
 8012c50:	d01d      	beq.n	8012c8e <HAL_DMA_PollForTransfer+0x22e>
 8012c52:	68fb      	ldr	r3, [r7, #12]
 8012c54:	681b      	ldr	r3, [r3, #0]
 8012c56:	4a19      	ldr	r2, [pc, #100]	@ (8012cbc <HAL_DMA_PollForTransfer+0x25c>)
 8012c58:	4293      	cmp	r3, r2
 8012c5a:	d018      	beq.n	8012c8e <HAL_DMA_PollForTransfer+0x22e>
 8012c5c:	68fb      	ldr	r3, [r7, #12]
 8012c5e:	681b      	ldr	r3, [r3, #0]
 8012c60:	4a17      	ldr	r2, [pc, #92]	@ (8012cc0 <HAL_DMA_PollForTransfer+0x260>)
 8012c62:	4293      	cmp	r3, r2
 8012c64:	d013      	beq.n	8012c8e <HAL_DMA_PollForTransfer+0x22e>
 8012c66:	68fb      	ldr	r3, [r7, #12]
 8012c68:	681b      	ldr	r3, [r3, #0]
 8012c6a:	4a16      	ldr	r2, [pc, #88]	@ (8012cc4 <HAL_DMA_PollForTransfer+0x264>)
 8012c6c:	4293      	cmp	r3, r2
 8012c6e:	d00e      	beq.n	8012c8e <HAL_DMA_PollForTransfer+0x22e>
 8012c70:	68fb      	ldr	r3, [r7, #12]
 8012c72:	681b      	ldr	r3, [r3, #0]
 8012c74:	4a14      	ldr	r2, [pc, #80]	@ (8012cc8 <HAL_DMA_PollForTransfer+0x268>)
 8012c76:	4293      	cmp	r3, r2
 8012c78:	d009      	beq.n	8012c8e <HAL_DMA_PollForTransfer+0x22e>
 8012c7a:	68fb      	ldr	r3, [r7, #12]
 8012c7c:	681b      	ldr	r3, [r3, #0]
 8012c7e:	4a13      	ldr	r2, [pc, #76]	@ (8012ccc <HAL_DMA_PollForTransfer+0x26c>)
 8012c80:	4293      	cmp	r3, r2
 8012c82:	d004      	beq.n	8012c8e <HAL_DMA_PollForTransfer+0x22e>
 8012c84:	68fb      	ldr	r3, [r7, #12]
 8012c86:	681b      	ldr	r3, [r3, #0]
 8012c88:	4a11      	ldr	r2, [pc, #68]	@ (8012cd0 <HAL_DMA_PollForTransfer+0x270>)
 8012c8a:	4293      	cmp	r3, r2
 8012c8c:	d122      	bne.n	8012cd4 <HAL_DMA_PollForTransfer+0x274>
 8012c8e:	2301      	movs	r3, #1
 8012c90:	e021      	b.n	8012cd6 <HAL_DMA_PollForTransfer+0x276>
 8012c92:	bf00      	nop
 8012c94:	40020010 	.word	0x40020010
 8012c98:	40020028 	.word	0x40020028
 8012c9c:	40020040 	.word	0x40020040
 8012ca0:	40020058 	.word	0x40020058
 8012ca4:	40020070 	.word	0x40020070
 8012ca8:	40020088 	.word	0x40020088
 8012cac:	400200a0 	.word	0x400200a0
 8012cb0:	400200b8 	.word	0x400200b8
 8012cb4:	40020410 	.word	0x40020410
 8012cb8:	40020428 	.word	0x40020428
 8012cbc:	40020440 	.word	0x40020440
 8012cc0:	40020458 	.word	0x40020458
 8012cc4:	40020470 	.word	0x40020470
 8012cc8:	40020488 	.word	0x40020488
 8012ccc:	400204a0 	.word	0x400204a0
 8012cd0:	400204b8 	.word	0x400204b8
 8012cd4:	2300      	movs	r3, #0
 8012cd6:	2b00      	cmp	r3, #0
 8012cd8:	d057      	beq.n	8012d8a <HAL_DMA_PollForTransfer+0x32a>
    {
      if(((*isr_reg) & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8012cda:	6a3b      	ldr	r3, [r7, #32]
 8012cdc:	681a      	ldr	r2, [r3, #0]
 8012cde:	68fb      	ldr	r3, [r7, #12]
 8012ce0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8012ce2:	f003 031f 	and.w	r3, r3, #31
 8012ce6:	fa22 f303 	lsr.w	r3, r2, r3
 8012cea:	f003 0301 	and.w	r3, r3, #1
 8012cee:	2b00      	cmp	r3, #0
 8012cf0:	d00d      	beq.n	8012d0e <HAL_DMA_PollForTransfer+0x2ae>
      {
        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8012cf2:	68fb      	ldr	r3, [r7, #12]
 8012cf4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8012cf6:	f043 0202 	orr.w	r2, r3, #2
 8012cfa:	68fb      	ldr	r3, [r7, #12]
 8012cfc:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Clear the FIFO error flag */
        (*ifcr_reg) = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8012cfe:	68fb      	ldr	r3, [r7, #12]
 8012d00:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8012d02:	f003 031f 	and.w	r3, r3, #31
 8012d06:	2201      	movs	r2, #1
 8012d08:	409a      	lsls	r2, r3
 8012d0a:	69fb      	ldr	r3, [r7, #28]
 8012d0c:	601a      	str	r2, [r3, #0]
      }

      if(((*isr_reg) & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8012d0e:	6a3b      	ldr	r3, [r7, #32]
 8012d10:	681a      	ldr	r2, [r3, #0]
 8012d12:	68fb      	ldr	r3, [r7, #12]
 8012d14:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8012d16:	f003 031f 	and.w	r3, r3, #31
 8012d1a:	2104      	movs	r1, #4
 8012d1c:	fa01 f303 	lsl.w	r3, r1, r3
 8012d20:	4013      	ands	r3, r2
 8012d22:	2b00      	cmp	r3, #0
 8012d24:	d00d      	beq.n	8012d42 <HAL_DMA_PollForTransfer+0x2e2>
      {
        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8012d26:	68fb      	ldr	r3, [r7, #12]
 8012d28:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8012d2a:	f043 0204 	orr.w	r2, r3, #4
 8012d2e:	68fb      	ldr	r3, [r7, #12]
 8012d30:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Clear the Direct Mode error flag */
        (*ifcr_reg) = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8012d32:	68fb      	ldr	r3, [r7, #12]
 8012d34:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8012d36:	f003 031f 	and.w	r3, r3, #31
 8012d3a:	2204      	movs	r2, #4
 8012d3c:	409a      	lsls	r2, r3
 8012d3e:	69fb      	ldr	r3, [r7, #28]
 8012d40:	601a      	str	r2, [r3, #0]
      }

      if(((*isr_reg) & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8012d42:	6a3b      	ldr	r3, [r7, #32]
 8012d44:	681a      	ldr	r2, [r3, #0]
 8012d46:	68fb      	ldr	r3, [r7, #12]
 8012d48:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8012d4a:	f003 031f 	and.w	r3, r3, #31
 8012d4e:	2108      	movs	r1, #8
 8012d50:	fa01 f303 	lsl.w	r3, r1, r3
 8012d54:	4013      	ands	r3, r2
 8012d56:	2b00      	cmp	r3, #0
 8012d58:	d038      	beq.n	8012dcc <HAL_DMA_PollForTransfer+0x36c>
      {
        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8012d5a:	68fb      	ldr	r3, [r7, #12]
 8012d5c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8012d5e:	f043 0201 	orr.w	r2, r3, #1
 8012d62:	68fb      	ldr	r3, [r7, #12]
 8012d64:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Clear the transfer error flag */
        (*ifcr_reg) = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8012d66:	68fb      	ldr	r3, [r7, #12]
 8012d68:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8012d6a:	f003 031f 	and.w	r3, r3, #31
 8012d6e:	2208      	movs	r2, #8
 8012d70:	409a      	lsls	r2, r3
 8012d72:	69fb      	ldr	r3, [r7, #28]
 8012d74:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8012d76:	68fb      	ldr	r3, [r7, #12]
 8012d78:	2201      	movs	r2, #1
 8012d7a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8012d7e:	68fb      	ldr	r3, [r7, #12]
 8012d80:	2200      	movs	r2, #0
 8012d82:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8012d86:	2301      	movs	r3, #1
 8012d88:	e1f0      	b.n	801316c <HAL_DMA_PollForTransfer+0x70c>
      }
    }
    else /* BDMA channel */
    {
      if(((*isr_reg) & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8012d8a:	6a3b      	ldr	r3, [r7, #32]
 8012d8c:	681a      	ldr	r2, [r3, #0]
 8012d8e:	68fb      	ldr	r3, [r7, #12]
 8012d90:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8012d92:	f003 031f 	and.w	r3, r3, #31
 8012d96:	2108      	movs	r1, #8
 8012d98:	fa01 f303 	lsl.w	r3, r1, r3
 8012d9c:	4013      	ands	r3, r2
 8012d9e:	2b00      	cmp	r3, #0
 8012da0:	d014      	beq.n	8012dcc <HAL_DMA_PollForTransfer+0x36c>
      {
        /* When a DMA transfer error occurs */
        /* A hardware clear of its EN bits is performed */
        /* Clear all flags */
        (*isr_reg) = ((BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU));
 8012da2:	68fb      	ldr	r3, [r7, #12]
 8012da4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8012da6:	f003 031f 	and.w	r3, r3, #31
 8012daa:	2201      	movs	r2, #1
 8012dac:	409a      	lsls	r2, r3
 8012dae:	6a3b      	ldr	r3, [r7, #32]
 8012db0:	601a      	str	r2, [r3, #0]

        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8012db2:	68fb      	ldr	r3, [r7, #12]
 8012db4:	2201      	movs	r2, #1
 8012db6:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8012db8:	68fb      	ldr	r3, [r7, #12]
 8012dba:	2201      	movs	r2, #1
 8012dbc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8012dc0:	68fb      	ldr	r3, [r7, #12]
 8012dc2:	2200      	movs	r2, #0
 8012dc4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8012dc8:	2301      	movs	r3, #1
 8012dca:	e1cf      	b.n	801316c <HAL_DMA_PollForTransfer+0x70c>
      }
    }

    /* Check for the Timeout (Not applicable in circular mode)*/
    if(Timeout != HAL_MAX_DELAY)
 8012dcc:	687b      	ldr	r3, [r7, #4]
 8012dce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012dd2:	d012      	beq.n	8012dfa <HAL_DMA_PollForTransfer+0x39a>
    {
      if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 8012dd4:	f7fe fccc 	bl	8011770 <HAL_GetTick>
 8012dd8:	4602      	mov	r2, r0
 8012dda:	697b      	ldr	r3, [r7, #20]
 8012ddc:	1ad3      	subs	r3, r2, r3
 8012dde:	687a      	ldr	r2, [r7, #4]
 8012de0:	429a      	cmp	r2, r3
 8012de2:	d302      	bcc.n	8012dea <HAL_DMA_PollForTransfer+0x38a>
 8012de4:	687b      	ldr	r3, [r7, #4]
 8012de6:	2b00      	cmp	r3, #0
 8012de8:	d107      	bne.n	8012dfa <HAL_DMA_PollForTransfer+0x39a>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8012dea:	68fb      	ldr	r3, [r7, #12]
 8012dec:	2220      	movs	r2, #32
 8012dee:	655a      	str	r2, [r3, #84]	@ 0x54

        /* if timeout then abort the current transfer */
        /* No need to check return value: as in this case we will return HAL_ERROR with HAL_DMA_ERROR_TIMEOUT error code  */
        (void) HAL_DMA_Abort(hdma);
 8012df0:	68f8      	ldr	r0, [r7, #12]
 8012df2:	f7ff fb17 	bl	8012424 <HAL_DMA_Abort>
              - Clear the transfer error flags
              - Unlock
              - Set the State
          */

        return HAL_ERROR;
 8012df6:	2301      	movs	r3, #1
 8012df8:	e1b8      	b.n	801316c <HAL_DMA_PollForTransfer+0x70c>
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8012dfa:	68fb      	ldr	r3, [r7, #12]
 8012dfc:	681b      	ldr	r3, [r3, #0]
 8012dfe:	4a81      	ldr	r2, [pc, #516]	@ (8013004 <HAL_DMA_PollForTransfer+0x5a4>)
 8012e00:	4293      	cmp	r3, r2
 8012e02:	d072      	beq.n	8012eea <HAL_DMA_PollForTransfer+0x48a>
 8012e04:	68fb      	ldr	r3, [r7, #12]
 8012e06:	681b      	ldr	r3, [r3, #0]
 8012e08:	4a7f      	ldr	r2, [pc, #508]	@ (8013008 <HAL_DMA_PollForTransfer+0x5a8>)
 8012e0a:	4293      	cmp	r3, r2
 8012e0c:	d06d      	beq.n	8012eea <HAL_DMA_PollForTransfer+0x48a>
 8012e0e:	68fb      	ldr	r3, [r7, #12]
 8012e10:	681b      	ldr	r3, [r3, #0]
 8012e12:	4a7e      	ldr	r2, [pc, #504]	@ (801300c <HAL_DMA_PollForTransfer+0x5ac>)
 8012e14:	4293      	cmp	r3, r2
 8012e16:	d068      	beq.n	8012eea <HAL_DMA_PollForTransfer+0x48a>
 8012e18:	68fb      	ldr	r3, [r7, #12]
 8012e1a:	681b      	ldr	r3, [r3, #0]
 8012e1c:	4a7c      	ldr	r2, [pc, #496]	@ (8013010 <HAL_DMA_PollForTransfer+0x5b0>)
 8012e1e:	4293      	cmp	r3, r2
 8012e20:	d063      	beq.n	8012eea <HAL_DMA_PollForTransfer+0x48a>
 8012e22:	68fb      	ldr	r3, [r7, #12]
 8012e24:	681b      	ldr	r3, [r3, #0]
 8012e26:	4a7b      	ldr	r2, [pc, #492]	@ (8013014 <HAL_DMA_PollForTransfer+0x5b4>)
 8012e28:	4293      	cmp	r3, r2
 8012e2a:	d05e      	beq.n	8012eea <HAL_DMA_PollForTransfer+0x48a>
 8012e2c:	68fb      	ldr	r3, [r7, #12]
 8012e2e:	681b      	ldr	r3, [r3, #0]
 8012e30:	4a79      	ldr	r2, [pc, #484]	@ (8013018 <HAL_DMA_PollForTransfer+0x5b8>)
 8012e32:	4293      	cmp	r3, r2
 8012e34:	d059      	beq.n	8012eea <HAL_DMA_PollForTransfer+0x48a>
 8012e36:	68fb      	ldr	r3, [r7, #12]
 8012e38:	681b      	ldr	r3, [r3, #0]
 8012e3a:	4a78      	ldr	r2, [pc, #480]	@ (801301c <HAL_DMA_PollForTransfer+0x5bc>)
 8012e3c:	4293      	cmp	r3, r2
 8012e3e:	d054      	beq.n	8012eea <HAL_DMA_PollForTransfer+0x48a>
 8012e40:	68fb      	ldr	r3, [r7, #12]
 8012e42:	681b      	ldr	r3, [r3, #0]
 8012e44:	4a76      	ldr	r2, [pc, #472]	@ (8013020 <HAL_DMA_PollForTransfer+0x5c0>)
 8012e46:	4293      	cmp	r3, r2
 8012e48:	d04f      	beq.n	8012eea <HAL_DMA_PollForTransfer+0x48a>
 8012e4a:	68fb      	ldr	r3, [r7, #12]
 8012e4c:	681b      	ldr	r3, [r3, #0]
 8012e4e:	4a75      	ldr	r2, [pc, #468]	@ (8013024 <HAL_DMA_PollForTransfer+0x5c4>)
 8012e50:	4293      	cmp	r3, r2
 8012e52:	d04a      	beq.n	8012eea <HAL_DMA_PollForTransfer+0x48a>
 8012e54:	68fb      	ldr	r3, [r7, #12]
 8012e56:	681b      	ldr	r3, [r3, #0]
 8012e58:	4a73      	ldr	r2, [pc, #460]	@ (8013028 <HAL_DMA_PollForTransfer+0x5c8>)
 8012e5a:	4293      	cmp	r3, r2
 8012e5c:	d045      	beq.n	8012eea <HAL_DMA_PollForTransfer+0x48a>
 8012e5e:	68fb      	ldr	r3, [r7, #12]
 8012e60:	681b      	ldr	r3, [r3, #0]
 8012e62:	4a72      	ldr	r2, [pc, #456]	@ (801302c <HAL_DMA_PollForTransfer+0x5cc>)
 8012e64:	4293      	cmp	r3, r2
 8012e66:	d040      	beq.n	8012eea <HAL_DMA_PollForTransfer+0x48a>
 8012e68:	68fb      	ldr	r3, [r7, #12]
 8012e6a:	681b      	ldr	r3, [r3, #0]
 8012e6c:	4a70      	ldr	r2, [pc, #448]	@ (8013030 <HAL_DMA_PollForTransfer+0x5d0>)
 8012e6e:	4293      	cmp	r3, r2
 8012e70:	d03b      	beq.n	8012eea <HAL_DMA_PollForTransfer+0x48a>
 8012e72:	68fb      	ldr	r3, [r7, #12]
 8012e74:	681b      	ldr	r3, [r3, #0]
 8012e76:	4a6f      	ldr	r2, [pc, #444]	@ (8013034 <HAL_DMA_PollForTransfer+0x5d4>)
 8012e78:	4293      	cmp	r3, r2
 8012e7a:	d036      	beq.n	8012eea <HAL_DMA_PollForTransfer+0x48a>
 8012e7c:	68fb      	ldr	r3, [r7, #12]
 8012e7e:	681b      	ldr	r3, [r3, #0]
 8012e80:	4a6d      	ldr	r2, [pc, #436]	@ (8013038 <HAL_DMA_PollForTransfer+0x5d8>)
 8012e82:	4293      	cmp	r3, r2
 8012e84:	d031      	beq.n	8012eea <HAL_DMA_PollForTransfer+0x48a>
 8012e86:	68fb      	ldr	r3, [r7, #12]
 8012e88:	681b      	ldr	r3, [r3, #0]
 8012e8a:	4a6c      	ldr	r2, [pc, #432]	@ (801303c <HAL_DMA_PollForTransfer+0x5dc>)
 8012e8c:	4293      	cmp	r3, r2
 8012e8e:	d02c      	beq.n	8012eea <HAL_DMA_PollForTransfer+0x48a>
 8012e90:	68fb      	ldr	r3, [r7, #12]
 8012e92:	681b      	ldr	r3, [r3, #0]
 8012e94:	4a6a      	ldr	r2, [pc, #424]	@ (8013040 <HAL_DMA_PollForTransfer+0x5e0>)
 8012e96:	4293      	cmp	r3, r2
 8012e98:	d027      	beq.n	8012eea <HAL_DMA_PollForTransfer+0x48a>
 8012e9a:	68fb      	ldr	r3, [r7, #12]
 8012e9c:	681b      	ldr	r3, [r3, #0]
 8012e9e:	4a69      	ldr	r2, [pc, #420]	@ (8013044 <HAL_DMA_PollForTransfer+0x5e4>)
 8012ea0:	4293      	cmp	r3, r2
 8012ea2:	d022      	beq.n	8012eea <HAL_DMA_PollForTransfer+0x48a>
 8012ea4:	68fb      	ldr	r3, [r7, #12]
 8012ea6:	681b      	ldr	r3, [r3, #0]
 8012ea8:	4a67      	ldr	r2, [pc, #412]	@ (8013048 <HAL_DMA_PollForTransfer+0x5e8>)
 8012eaa:	4293      	cmp	r3, r2
 8012eac:	d01d      	beq.n	8012eea <HAL_DMA_PollForTransfer+0x48a>
 8012eae:	68fb      	ldr	r3, [r7, #12]
 8012eb0:	681b      	ldr	r3, [r3, #0]
 8012eb2:	4a66      	ldr	r2, [pc, #408]	@ (801304c <HAL_DMA_PollForTransfer+0x5ec>)
 8012eb4:	4293      	cmp	r3, r2
 8012eb6:	d018      	beq.n	8012eea <HAL_DMA_PollForTransfer+0x48a>
 8012eb8:	68fb      	ldr	r3, [r7, #12]
 8012eba:	681b      	ldr	r3, [r3, #0]
 8012ebc:	4a64      	ldr	r2, [pc, #400]	@ (8013050 <HAL_DMA_PollForTransfer+0x5f0>)
 8012ebe:	4293      	cmp	r3, r2
 8012ec0:	d013      	beq.n	8012eea <HAL_DMA_PollForTransfer+0x48a>
 8012ec2:	68fb      	ldr	r3, [r7, #12]
 8012ec4:	681b      	ldr	r3, [r3, #0]
 8012ec6:	4a63      	ldr	r2, [pc, #396]	@ (8013054 <HAL_DMA_PollForTransfer+0x5f4>)
 8012ec8:	4293      	cmp	r3, r2
 8012eca:	d00e      	beq.n	8012eea <HAL_DMA_PollForTransfer+0x48a>
 8012ecc:	68fb      	ldr	r3, [r7, #12]
 8012ece:	681b      	ldr	r3, [r3, #0]
 8012ed0:	4a61      	ldr	r2, [pc, #388]	@ (8013058 <HAL_DMA_PollForTransfer+0x5f8>)
 8012ed2:	4293      	cmp	r3, r2
 8012ed4:	d009      	beq.n	8012eea <HAL_DMA_PollForTransfer+0x48a>
 8012ed6:	68fb      	ldr	r3, [r7, #12]
 8012ed8:	681b      	ldr	r3, [r3, #0]
 8012eda:	4a60      	ldr	r2, [pc, #384]	@ (801305c <HAL_DMA_PollForTransfer+0x5fc>)
 8012edc:	4293      	cmp	r3, r2
 8012ede:	d004      	beq.n	8012eea <HAL_DMA_PollForTransfer+0x48a>
 8012ee0:	68fb      	ldr	r3, [r7, #12]
 8012ee2:	681b      	ldr	r3, [r3, #0]
 8012ee4:	4a5e      	ldr	r2, [pc, #376]	@ (8013060 <HAL_DMA_PollForTransfer+0x600>)
 8012ee6:	4293      	cmp	r3, r2
 8012ee8:	d101      	bne.n	8012eee <HAL_DMA_PollForTransfer+0x48e>
 8012eea:	2301      	movs	r3, #1
 8012eec:	e000      	b.n	8012ef0 <HAL_DMA_PollForTransfer+0x490>
 8012eee:	2300      	movs	r3, #0
 8012ef0:	2b00      	cmp	r3, #0
 8012ef2:	d029      	beq.n	8012f48 <HAL_DMA_PollForTransfer+0x4e8>
    {
      /* Check for DMAMUX Request generator (if used) overrun status */
      if(hdma->DMAmuxRequestGen != 0U)
 8012ef4:	68fb      	ldr	r3, [r7, #12]
 8012ef6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012ef8:	2b00      	cmp	r3, #0
 8012efa:	d012      	beq.n	8012f22 <HAL_DMA_PollForTransfer+0x4c2>
      {
        /* if using DMAMUX request generator Check for DMAMUX request generator overrun */
        if((hdma->DMAmuxRequestGenStatus->RGSR & hdma->DMAmuxRequestGenStatusMask) != 0U)
 8012efc:	68fb      	ldr	r3, [r7, #12]
 8012efe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012f00:	681a      	ldr	r2, [r3, #0]
 8012f02:	68fb      	ldr	r3, [r7, #12]
 8012f04:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8012f06:	4013      	ands	r3, r2
 8012f08:	2b00      	cmp	r3, #0
 8012f0a:	d00a      	beq.n	8012f22 <HAL_DMA_PollForTransfer+0x4c2>
        {
          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8012f0c:	68fb      	ldr	r3, [r7, #12]
 8012f0e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012f10:	68fa      	ldr	r2, [r7, #12]
 8012f12:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8012f14:	605a      	str	r2, [r3, #4]

          /* Update error code */
          hdma->ErrorCode |= HAL_DMA_ERROR_REQGEN;
 8012f16:	68fb      	ldr	r3, [r7, #12]
 8012f18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8012f1a:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8012f1e:	68fb      	ldr	r3, [r7, #12]
 8012f20:	655a      	str	r2, [r3, #84]	@ 0x54
        }
      }

      /* Check for DMAMUX Synchronization overrun */
      if((hdma->DMAmuxChannelStatus->CSR & hdma->DMAmuxChannelStatusMask) != 0U)
 8012f22:	68fb      	ldr	r3, [r7, #12]
 8012f24:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8012f26:	681a      	ldr	r2, [r3, #0]
 8012f28:	68fb      	ldr	r3, [r7, #12]
 8012f2a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8012f2c:	4013      	ands	r3, r2
 8012f2e:	2b00      	cmp	r3, #0
 8012f30:	d00a      	beq.n	8012f48 <HAL_DMA_PollForTransfer+0x4e8>
      {
        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8012f32:	68fb      	ldr	r3, [r7, #12]
 8012f34:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8012f36:	68fa      	ldr	r2, [r7, #12]
 8012f38:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8012f3a:	605a      	str	r2, [r3, #4]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_SYNC;
 8012f3c:	68fb      	ldr	r3, [r7, #12]
 8012f3e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8012f40:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8012f44:	68fb      	ldr	r3, [r7, #12]
 8012f46:	655a      	str	r2, [r3, #84]	@ 0x54
  while(((*isr_reg) & cpltlevel_mask) == 0U)
 8012f48:	6a3b      	ldr	r3, [r7, #32]
 8012f4a:	681a      	ldr	r2, [r3, #0]
 8012f4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012f4e:	4013      	ands	r3, r2
 8012f50:	2b00      	cmp	r3, #0
 8012f52:	f43f ae4c 	beq.w	8012bee <HAL_DMA_PollForTransfer+0x18e>
    }
  }


  /* Get the level transfer complete flag */
  if(CompleteLevel == HAL_DMA_FULL_TRANSFER)
 8012f56:	7afb      	ldrb	r3, [r7, #11]
 8012f58:	2b00      	cmp	r3, #0
 8012f5a:	f040 80a0 	bne.w	801309e <HAL_DMA_PollForTransfer+0x63e>
  {
    /* Clear the half transfer and transfer complete flags */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8012f5e:	68fb      	ldr	r3, [r7, #12]
 8012f60:	681b      	ldr	r3, [r3, #0]
 8012f62:	4a28      	ldr	r2, [pc, #160]	@ (8013004 <HAL_DMA_PollForTransfer+0x5a4>)
 8012f64:	4293      	cmp	r3, r2
 8012f66:	d04a      	beq.n	8012ffe <HAL_DMA_PollForTransfer+0x59e>
 8012f68:	68fb      	ldr	r3, [r7, #12]
 8012f6a:	681b      	ldr	r3, [r3, #0]
 8012f6c:	4a26      	ldr	r2, [pc, #152]	@ (8013008 <HAL_DMA_PollForTransfer+0x5a8>)
 8012f6e:	4293      	cmp	r3, r2
 8012f70:	d045      	beq.n	8012ffe <HAL_DMA_PollForTransfer+0x59e>
 8012f72:	68fb      	ldr	r3, [r7, #12]
 8012f74:	681b      	ldr	r3, [r3, #0]
 8012f76:	4a25      	ldr	r2, [pc, #148]	@ (801300c <HAL_DMA_PollForTransfer+0x5ac>)
 8012f78:	4293      	cmp	r3, r2
 8012f7a:	d040      	beq.n	8012ffe <HAL_DMA_PollForTransfer+0x59e>
 8012f7c:	68fb      	ldr	r3, [r7, #12]
 8012f7e:	681b      	ldr	r3, [r3, #0]
 8012f80:	4a23      	ldr	r2, [pc, #140]	@ (8013010 <HAL_DMA_PollForTransfer+0x5b0>)
 8012f82:	4293      	cmp	r3, r2
 8012f84:	d03b      	beq.n	8012ffe <HAL_DMA_PollForTransfer+0x59e>
 8012f86:	68fb      	ldr	r3, [r7, #12]
 8012f88:	681b      	ldr	r3, [r3, #0]
 8012f8a:	4a22      	ldr	r2, [pc, #136]	@ (8013014 <HAL_DMA_PollForTransfer+0x5b4>)
 8012f8c:	4293      	cmp	r3, r2
 8012f8e:	d036      	beq.n	8012ffe <HAL_DMA_PollForTransfer+0x59e>
 8012f90:	68fb      	ldr	r3, [r7, #12]
 8012f92:	681b      	ldr	r3, [r3, #0]
 8012f94:	4a20      	ldr	r2, [pc, #128]	@ (8013018 <HAL_DMA_PollForTransfer+0x5b8>)
 8012f96:	4293      	cmp	r3, r2
 8012f98:	d031      	beq.n	8012ffe <HAL_DMA_PollForTransfer+0x59e>
 8012f9a:	68fb      	ldr	r3, [r7, #12]
 8012f9c:	681b      	ldr	r3, [r3, #0]
 8012f9e:	4a1f      	ldr	r2, [pc, #124]	@ (801301c <HAL_DMA_PollForTransfer+0x5bc>)
 8012fa0:	4293      	cmp	r3, r2
 8012fa2:	d02c      	beq.n	8012ffe <HAL_DMA_PollForTransfer+0x59e>
 8012fa4:	68fb      	ldr	r3, [r7, #12]
 8012fa6:	681b      	ldr	r3, [r3, #0]
 8012fa8:	4a1d      	ldr	r2, [pc, #116]	@ (8013020 <HAL_DMA_PollForTransfer+0x5c0>)
 8012faa:	4293      	cmp	r3, r2
 8012fac:	d027      	beq.n	8012ffe <HAL_DMA_PollForTransfer+0x59e>
 8012fae:	68fb      	ldr	r3, [r7, #12]
 8012fb0:	681b      	ldr	r3, [r3, #0]
 8012fb2:	4a1c      	ldr	r2, [pc, #112]	@ (8013024 <HAL_DMA_PollForTransfer+0x5c4>)
 8012fb4:	4293      	cmp	r3, r2
 8012fb6:	d022      	beq.n	8012ffe <HAL_DMA_PollForTransfer+0x59e>
 8012fb8:	68fb      	ldr	r3, [r7, #12]
 8012fba:	681b      	ldr	r3, [r3, #0]
 8012fbc:	4a1a      	ldr	r2, [pc, #104]	@ (8013028 <HAL_DMA_PollForTransfer+0x5c8>)
 8012fbe:	4293      	cmp	r3, r2
 8012fc0:	d01d      	beq.n	8012ffe <HAL_DMA_PollForTransfer+0x59e>
 8012fc2:	68fb      	ldr	r3, [r7, #12]
 8012fc4:	681b      	ldr	r3, [r3, #0]
 8012fc6:	4a19      	ldr	r2, [pc, #100]	@ (801302c <HAL_DMA_PollForTransfer+0x5cc>)
 8012fc8:	4293      	cmp	r3, r2
 8012fca:	d018      	beq.n	8012ffe <HAL_DMA_PollForTransfer+0x59e>
 8012fcc:	68fb      	ldr	r3, [r7, #12]
 8012fce:	681b      	ldr	r3, [r3, #0]
 8012fd0:	4a17      	ldr	r2, [pc, #92]	@ (8013030 <HAL_DMA_PollForTransfer+0x5d0>)
 8012fd2:	4293      	cmp	r3, r2
 8012fd4:	d013      	beq.n	8012ffe <HAL_DMA_PollForTransfer+0x59e>
 8012fd6:	68fb      	ldr	r3, [r7, #12]
 8012fd8:	681b      	ldr	r3, [r3, #0]
 8012fda:	4a16      	ldr	r2, [pc, #88]	@ (8013034 <HAL_DMA_PollForTransfer+0x5d4>)
 8012fdc:	4293      	cmp	r3, r2
 8012fde:	d00e      	beq.n	8012ffe <HAL_DMA_PollForTransfer+0x59e>
 8012fe0:	68fb      	ldr	r3, [r7, #12]
 8012fe2:	681b      	ldr	r3, [r3, #0]
 8012fe4:	4a14      	ldr	r2, [pc, #80]	@ (8013038 <HAL_DMA_PollForTransfer+0x5d8>)
 8012fe6:	4293      	cmp	r3, r2
 8012fe8:	d009      	beq.n	8012ffe <HAL_DMA_PollForTransfer+0x59e>
 8012fea:	68fb      	ldr	r3, [r7, #12]
 8012fec:	681b      	ldr	r3, [r3, #0]
 8012fee:	4a13      	ldr	r2, [pc, #76]	@ (801303c <HAL_DMA_PollForTransfer+0x5dc>)
 8012ff0:	4293      	cmp	r3, r2
 8012ff2:	d004      	beq.n	8012ffe <HAL_DMA_PollForTransfer+0x59e>
 8012ff4:	68fb      	ldr	r3, [r7, #12]
 8012ff6:	681b      	ldr	r3, [r3, #0]
 8012ff8:	4a11      	ldr	r2, [pc, #68]	@ (8013040 <HAL_DMA_PollForTransfer+0x5e0>)
 8012ffa:	4293      	cmp	r3, r2
 8012ffc:	d132      	bne.n	8013064 <HAL_DMA_PollForTransfer+0x604>
 8012ffe:	2301      	movs	r3, #1
 8013000:	e031      	b.n	8013066 <HAL_DMA_PollForTransfer+0x606>
 8013002:	bf00      	nop
 8013004:	40020010 	.word	0x40020010
 8013008:	40020028 	.word	0x40020028
 801300c:	40020040 	.word	0x40020040
 8013010:	40020058 	.word	0x40020058
 8013014:	40020070 	.word	0x40020070
 8013018:	40020088 	.word	0x40020088
 801301c:	400200a0 	.word	0x400200a0
 8013020:	400200b8 	.word	0x400200b8
 8013024:	40020410 	.word	0x40020410
 8013028:	40020428 	.word	0x40020428
 801302c:	40020440 	.word	0x40020440
 8013030:	40020458 	.word	0x40020458
 8013034:	40020470 	.word	0x40020470
 8013038:	40020488 	.word	0x40020488
 801303c:	400204a0 	.word	0x400204a0
 8013040:	400204b8 	.word	0x400204b8
 8013044:	58025408 	.word	0x58025408
 8013048:	5802541c 	.word	0x5802541c
 801304c:	58025430 	.word	0x58025430
 8013050:	58025444 	.word	0x58025444
 8013054:	58025458 	.word	0x58025458
 8013058:	5802546c 	.word	0x5802546c
 801305c:	58025480 	.word	0x58025480
 8013060:	58025494 	.word	0x58025494
 8013064:	2300      	movs	r3, #0
 8013066:	2b00      	cmp	r3, #0
 8013068:	d008      	beq.n	801307c <HAL_DMA_PollForTransfer+0x61c>
    {
      (*ifcr_reg) = (DMA_FLAG_HTIF0_4 | DMA_FLAG_TCIF0_4) << (hdma->StreamIndex & 0x1FU);
 801306a:	68fb      	ldr	r3, [r7, #12]
 801306c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801306e:	f003 031f 	and.w	r3, r3, #31
 8013072:	2230      	movs	r2, #48	@ 0x30
 8013074:	409a      	lsls	r2, r3
 8013076:	69fb      	ldr	r3, [r7, #28]
 8013078:	601a      	str	r2, [r3, #0]
 801307a:	e007      	b.n	801308c <HAL_DMA_PollForTransfer+0x62c>
    }
    else /* BDMA channel */
    {
      (*ifcr_reg) = (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU));
 801307c:	68fb      	ldr	r3, [r7, #12]
 801307e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8013080:	f003 031f 	and.w	r3, r3, #31
 8013084:	2202      	movs	r2, #2
 8013086:	409a      	lsls	r2, r3
 8013088:	69fb      	ldr	r3, [r7, #28]
 801308a:	601a      	str	r2, [r3, #0]
    }

    hdma->State = HAL_DMA_STATE_READY;
 801308c:	68fb      	ldr	r3, [r7, #12]
 801308e:	2201      	movs	r2, #1
 8013090:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8013094:	68fb      	ldr	r3, [r7, #12]
 8013096:	2200      	movs	r2, #0
 8013098:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
 801309c:	e065      	b.n	801316a <HAL_DMA_PollForTransfer+0x70a>
  }
  else /*CompleteLevel = HAL_DMA_HALF_TRANSFER*/
  {
    /* Clear the half transfer and transfer complete flags */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 801309e:	68fb      	ldr	r3, [r7, #12]
 80130a0:	681b      	ldr	r3, [r3, #0]
 80130a2:	4a34      	ldr	r2, [pc, #208]	@ (8013174 <HAL_DMA_PollForTransfer+0x714>)
 80130a4:	4293      	cmp	r3, r2
 80130a6:	d04a      	beq.n	801313e <HAL_DMA_PollForTransfer+0x6de>
 80130a8:	68fb      	ldr	r3, [r7, #12]
 80130aa:	681b      	ldr	r3, [r3, #0]
 80130ac:	4a32      	ldr	r2, [pc, #200]	@ (8013178 <HAL_DMA_PollForTransfer+0x718>)
 80130ae:	4293      	cmp	r3, r2
 80130b0:	d045      	beq.n	801313e <HAL_DMA_PollForTransfer+0x6de>
 80130b2:	68fb      	ldr	r3, [r7, #12]
 80130b4:	681b      	ldr	r3, [r3, #0]
 80130b6:	4a31      	ldr	r2, [pc, #196]	@ (801317c <HAL_DMA_PollForTransfer+0x71c>)
 80130b8:	4293      	cmp	r3, r2
 80130ba:	d040      	beq.n	801313e <HAL_DMA_PollForTransfer+0x6de>
 80130bc:	68fb      	ldr	r3, [r7, #12]
 80130be:	681b      	ldr	r3, [r3, #0]
 80130c0:	4a2f      	ldr	r2, [pc, #188]	@ (8013180 <HAL_DMA_PollForTransfer+0x720>)
 80130c2:	4293      	cmp	r3, r2
 80130c4:	d03b      	beq.n	801313e <HAL_DMA_PollForTransfer+0x6de>
 80130c6:	68fb      	ldr	r3, [r7, #12]
 80130c8:	681b      	ldr	r3, [r3, #0]
 80130ca:	4a2e      	ldr	r2, [pc, #184]	@ (8013184 <HAL_DMA_PollForTransfer+0x724>)
 80130cc:	4293      	cmp	r3, r2
 80130ce:	d036      	beq.n	801313e <HAL_DMA_PollForTransfer+0x6de>
 80130d0:	68fb      	ldr	r3, [r7, #12]
 80130d2:	681b      	ldr	r3, [r3, #0]
 80130d4:	4a2c      	ldr	r2, [pc, #176]	@ (8013188 <HAL_DMA_PollForTransfer+0x728>)
 80130d6:	4293      	cmp	r3, r2
 80130d8:	d031      	beq.n	801313e <HAL_DMA_PollForTransfer+0x6de>
 80130da:	68fb      	ldr	r3, [r7, #12]
 80130dc:	681b      	ldr	r3, [r3, #0]
 80130de:	4a2b      	ldr	r2, [pc, #172]	@ (801318c <HAL_DMA_PollForTransfer+0x72c>)
 80130e0:	4293      	cmp	r3, r2
 80130e2:	d02c      	beq.n	801313e <HAL_DMA_PollForTransfer+0x6de>
 80130e4:	68fb      	ldr	r3, [r7, #12]
 80130e6:	681b      	ldr	r3, [r3, #0]
 80130e8:	4a29      	ldr	r2, [pc, #164]	@ (8013190 <HAL_DMA_PollForTransfer+0x730>)
 80130ea:	4293      	cmp	r3, r2
 80130ec:	d027      	beq.n	801313e <HAL_DMA_PollForTransfer+0x6de>
 80130ee:	68fb      	ldr	r3, [r7, #12]
 80130f0:	681b      	ldr	r3, [r3, #0]
 80130f2:	4a28      	ldr	r2, [pc, #160]	@ (8013194 <HAL_DMA_PollForTransfer+0x734>)
 80130f4:	4293      	cmp	r3, r2
 80130f6:	d022      	beq.n	801313e <HAL_DMA_PollForTransfer+0x6de>
 80130f8:	68fb      	ldr	r3, [r7, #12]
 80130fa:	681b      	ldr	r3, [r3, #0]
 80130fc:	4a26      	ldr	r2, [pc, #152]	@ (8013198 <HAL_DMA_PollForTransfer+0x738>)
 80130fe:	4293      	cmp	r3, r2
 8013100:	d01d      	beq.n	801313e <HAL_DMA_PollForTransfer+0x6de>
 8013102:	68fb      	ldr	r3, [r7, #12]
 8013104:	681b      	ldr	r3, [r3, #0]
 8013106:	4a25      	ldr	r2, [pc, #148]	@ (801319c <HAL_DMA_PollForTransfer+0x73c>)
 8013108:	4293      	cmp	r3, r2
 801310a:	d018      	beq.n	801313e <HAL_DMA_PollForTransfer+0x6de>
 801310c:	68fb      	ldr	r3, [r7, #12]
 801310e:	681b      	ldr	r3, [r3, #0]
 8013110:	4a23      	ldr	r2, [pc, #140]	@ (80131a0 <HAL_DMA_PollForTransfer+0x740>)
 8013112:	4293      	cmp	r3, r2
 8013114:	d013      	beq.n	801313e <HAL_DMA_PollForTransfer+0x6de>
 8013116:	68fb      	ldr	r3, [r7, #12]
 8013118:	681b      	ldr	r3, [r3, #0]
 801311a:	4a22      	ldr	r2, [pc, #136]	@ (80131a4 <HAL_DMA_PollForTransfer+0x744>)
 801311c:	4293      	cmp	r3, r2
 801311e:	d00e      	beq.n	801313e <HAL_DMA_PollForTransfer+0x6de>
 8013120:	68fb      	ldr	r3, [r7, #12]
 8013122:	681b      	ldr	r3, [r3, #0]
 8013124:	4a20      	ldr	r2, [pc, #128]	@ (80131a8 <HAL_DMA_PollForTransfer+0x748>)
 8013126:	4293      	cmp	r3, r2
 8013128:	d009      	beq.n	801313e <HAL_DMA_PollForTransfer+0x6de>
 801312a:	68fb      	ldr	r3, [r7, #12]
 801312c:	681b      	ldr	r3, [r3, #0]
 801312e:	4a1f      	ldr	r2, [pc, #124]	@ (80131ac <HAL_DMA_PollForTransfer+0x74c>)
 8013130:	4293      	cmp	r3, r2
 8013132:	d004      	beq.n	801313e <HAL_DMA_PollForTransfer+0x6de>
 8013134:	68fb      	ldr	r3, [r7, #12]
 8013136:	681b      	ldr	r3, [r3, #0]
 8013138:	4a1d      	ldr	r2, [pc, #116]	@ (80131b0 <HAL_DMA_PollForTransfer+0x750>)
 801313a:	4293      	cmp	r3, r2
 801313c:	d101      	bne.n	8013142 <HAL_DMA_PollForTransfer+0x6e2>
 801313e:	2301      	movs	r3, #1
 8013140:	e000      	b.n	8013144 <HAL_DMA_PollForTransfer+0x6e4>
 8013142:	2300      	movs	r3, #0
 8013144:	2b00      	cmp	r3, #0
 8013146:	d008      	beq.n	801315a <HAL_DMA_PollForTransfer+0x6fa>
    {
      (*ifcr_reg) = (DMA_FLAG_HTIF0_4) << (hdma->StreamIndex & 0x1FU);
 8013148:	68fb      	ldr	r3, [r7, #12]
 801314a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801314c:	f003 031f 	and.w	r3, r3, #31
 8013150:	2210      	movs	r2, #16
 8013152:	409a      	lsls	r2, r3
 8013154:	69fb      	ldr	r3, [r7, #28]
 8013156:	601a      	str	r2, [r3, #0]
 8013158:	e007      	b.n	801316a <HAL_DMA_PollForTransfer+0x70a>
    }
    else /* BDMA channel */
    {
      (*ifcr_reg) = (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU));
 801315a:	68fb      	ldr	r3, [r7, #12]
 801315c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801315e:	f003 031f 	and.w	r3, r3, #31
 8013162:	2204      	movs	r2, #4
 8013164:	409a      	lsls	r2, r3
 8013166:	69fb      	ldr	r3, [r7, #28]
 8013168:	601a      	str	r2, [r3, #0]
    }
  }

  return status;
 801316a:	7efb      	ldrb	r3, [r7, #27]
}
 801316c:	4618      	mov	r0, r3
 801316e:	3728      	adds	r7, #40	@ 0x28
 8013170:	46bd      	mov	sp, r7
 8013172:	bd80      	pop	{r7, pc}
 8013174:	40020010 	.word	0x40020010
 8013178:	40020028 	.word	0x40020028
 801317c:	40020040 	.word	0x40020040
 8013180:	40020058 	.word	0x40020058
 8013184:	40020070 	.word	0x40020070
 8013188:	40020088 	.word	0x40020088
 801318c:	400200a0 	.word	0x400200a0
 8013190:	400200b8 	.word	0x400200b8
 8013194:	40020410 	.word	0x40020410
 8013198:	40020428 	.word	0x40020428
 801319c:	40020440 	.word	0x40020440
 80131a0:	40020458 	.word	0x40020458
 80131a4:	40020470 	.word	0x40020470
 80131a8:	40020488 	.word	0x40020488
 80131ac:	400204a0 	.word	0x400204a0
 80131b0:	400204b8 	.word	0x400204b8

080131b4 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80131b4:	b480      	push	{r7}
 80131b6:	b087      	sub	sp, #28
 80131b8:	af00      	add	r7, sp, #0
 80131ba:	60f8      	str	r0, [r7, #12]
 80131bc:	60b9      	str	r1, [r7, #8]
 80131be:	607a      	str	r2, [r7, #4]
 80131c0:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80131c2:	68fb      	ldr	r3, [r7, #12]
 80131c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80131c6:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80131c8:	68fb      	ldr	r3, [r7, #12]
 80131ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80131cc:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80131ce:	68fb      	ldr	r3, [r7, #12]
 80131d0:	681b      	ldr	r3, [r3, #0]
 80131d2:	4a7f      	ldr	r2, [pc, #508]	@ (80133d0 <DMA_SetConfig+0x21c>)
 80131d4:	4293      	cmp	r3, r2
 80131d6:	d072      	beq.n	80132be <DMA_SetConfig+0x10a>
 80131d8:	68fb      	ldr	r3, [r7, #12]
 80131da:	681b      	ldr	r3, [r3, #0]
 80131dc:	4a7d      	ldr	r2, [pc, #500]	@ (80133d4 <DMA_SetConfig+0x220>)
 80131de:	4293      	cmp	r3, r2
 80131e0:	d06d      	beq.n	80132be <DMA_SetConfig+0x10a>
 80131e2:	68fb      	ldr	r3, [r7, #12]
 80131e4:	681b      	ldr	r3, [r3, #0]
 80131e6:	4a7c      	ldr	r2, [pc, #496]	@ (80133d8 <DMA_SetConfig+0x224>)
 80131e8:	4293      	cmp	r3, r2
 80131ea:	d068      	beq.n	80132be <DMA_SetConfig+0x10a>
 80131ec:	68fb      	ldr	r3, [r7, #12]
 80131ee:	681b      	ldr	r3, [r3, #0]
 80131f0:	4a7a      	ldr	r2, [pc, #488]	@ (80133dc <DMA_SetConfig+0x228>)
 80131f2:	4293      	cmp	r3, r2
 80131f4:	d063      	beq.n	80132be <DMA_SetConfig+0x10a>
 80131f6:	68fb      	ldr	r3, [r7, #12]
 80131f8:	681b      	ldr	r3, [r3, #0]
 80131fa:	4a79      	ldr	r2, [pc, #484]	@ (80133e0 <DMA_SetConfig+0x22c>)
 80131fc:	4293      	cmp	r3, r2
 80131fe:	d05e      	beq.n	80132be <DMA_SetConfig+0x10a>
 8013200:	68fb      	ldr	r3, [r7, #12]
 8013202:	681b      	ldr	r3, [r3, #0]
 8013204:	4a77      	ldr	r2, [pc, #476]	@ (80133e4 <DMA_SetConfig+0x230>)
 8013206:	4293      	cmp	r3, r2
 8013208:	d059      	beq.n	80132be <DMA_SetConfig+0x10a>
 801320a:	68fb      	ldr	r3, [r7, #12]
 801320c:	681b      	ldr	r3, [r3, #0]
 801320e:	4a76      	ldr	r2, [pc, #472]	@ (80133e8 <DMA_SetConfig+0x234>)
 8013210:	4293      	cmp	r3, r2
 8013212:	d054      	beq.n	80132be <DMA_SetConfig+0x10a>
 8013214:	68fb      	ldr	r3, [r7, #12]
 8013216:	681b      	ldr	r3, [r3, #0]
 8013218:	4a74      	ldr	r2, [pc, #464]	@ (80133ec <DMA_SetConfig+0x238>)
 801321a:	4293      	cmp	r3, r2
 801321c:	d04f      	beq.n	80132be <DMA_SetConfig+0x10a>
 801321e:	68fb      	ldr	r3, [r7, #12]
 8013220:	681b      	ldr	r3, [r3, #0]
 8013222:	4a73      	ldr	r2, [pc, #460]	@ (80133f0 <DMA_SetConfig+0x23c>)
 8013224:	4293      	cmp	r3, r2
 8013226:	d04a      	beq.n	80132be <DMA_SetConfig+0x10a>
 8013228:	68fb      	ldr	r3, [r7, #12]
 801322a:	681b      	ldr	r3, [r3, #0]
 801322c:	4a71      	ldr	r2, [pc, #452]	@ (80133f4 <DMA_SetConfig+0x240>)
 801322e:	4293      	cmp	r3, r2
 8013230:	d045      	beq.n	80132be <DMA_SetConfig+0x10a>
 8013232:	68fb      	ldr	r3, [r7, #12]
 8013234:	681b      	ldr	r3, [r3, #0]
 8013236:	4a70      	ldr	r2, [pc, #448]	@ (80133f8 <DMA_SetConfig+0x244>)
 8013238:	4293      	cmp	r3, r2
 801323a:	d040      	beq.n	80132be <DMA_SetConfig+0x10a>
 801323c:	68fb      	ldr	r3, [r7, #12]
 801323e:	681b      	ldr	r3, [r3, #0]
 8013240:	4a6e      	ldr	r2, [pc, #440]	@ (80133fc <DMA_SetConfig+0x248>)
 8013242:	4293      	cmp	r3, r2
 8013244:	d03b      	beq.n	80132be <DMA_SetConfig+0x10a>
 8013246:	68fb      	ldr	r3, [r7, #12]
 8013248:	681b      	ldr	r3, [r3, #0]
 801324a:	4a6d      	ldr	r2, [pc, #436]	@ (8013400 <DMA_SetConfig+0x24c>)
 801324c:	4293      	cmp	r3, r2
 801324e:	d036      	beq.n	80132be <DMA_SetConfig+0x10a>
 8013250:	68fb      	ldr	r3, [r7, #12]
 8013252:	681b      	ldr	r3, [r3, #0]
 8013254:	4a6b      	ldr	r2, [pc, #428]	@ (8013404 <DMA_SetConfig+0x250>)
 8013256:	4293      	cmp	r3, r2
 8013258:	d031      	beq.n	80132be <DMA_SetConfig+0x10a>
 801325a:	68fb      	ldr	r3, [r7, #12]
 801325c:	681b      	ldr	r3, [r3, #0]
 801325e:	4a6a      	ldr	r2, [pc, #424]	@ (8013408 <DMA_SetConfig+0x254>)
 8013260:	4293      	cmp	r3, r2
 8013262:	d02c      	beq.n	80132be <DMA_SetConfig+0x10a>
 8013264:	68fb      	ldr	r3, [r7, #12]
 8013266:	681b      	ldr	r3, [r3, #0]
 8013268:	4a68      	ldr	r2, [pc, #416]	@ (801340c <DMA_SetConfig+0x258>)
 801326a:	4293      	cmp	r3, r2
 801326c:	d027      	beq.n	80132be <DMA_SetConfig+0x10a>
 801326e:	68fb      	ldr	r3, [r7, #12]
 8013270:	681b      	ldr	r3, [r3, #0]
 8013272:	4a67      	ldr	r2, [pc, #412]	@ (8013410 <DMA_SetConfig+0x25c>)
 8013274:	4293      	cmp	r3, r2
 8013276:	d022      	beq.n	80132be <DMA_SetConfig+0x10a>
 8013278:	68fb      	ldr	r3, [r7, #12]
 801327a:	681b      	ldr	r3, [r3, #0]
 801327c:	4a65      	ldr	r2, [pc, #404]	@ (8013414 <DMA_SetConfig+0x260>)
 801327e:	4293      	cmp	r3, r2
 8013280:	d01d      	beq.n	80132be <DMA_SetConfig+0x10a>
 8013282:	68fb      	ldr	r3, [r7, #12]
 8013284:	681b      	ldr	r3, [r3, #0]
 8013286:	4a64      	ldr	r2, [pc, #400]	@ (8013418 <DMA_SetConfig+0x264>)
 8013288:	4293      	cmp	r3, r2
 801328a:	d018      	beq.n	80132be <DMA_SetConfig+0x10a>
 801328c:	68fb      	ldr	r3, [r7, #12]
 801328e:	681b      	ldr	r3, [r3, #0]
 8013290:	4a62      	ldr	r2, [pc, #392]	@ (801341c <DMA_SetConfig+0x268>)
 8013292:	4293      	cmp	r3, r2
 8013294:	d013      	beq.n	80132be <DMA_SetConfig+0x10a>
 8013296:	68fb      	ldr	r3, [r7, #12]
 8013298:	681b      	ldr	r3, [r3, #0]
 801329a:	4a61      	ldr	r2, [pc, #388]	@ (8013420 <DMA_SetConfig+0x26c>)
 801329c:	4293      	cmp	r3, r2
 801329e:	d00e      	beq.n	80132be <DMA_SetConfig+0x10a>
 80132a0:	68fb      	ldr	r3, [r7, #12]
 80132a2:	681b      	ldr	r3, [r3, #0]
 80132a4:	4a5f      	ldr	r2, [pc, #380]	@ (8013424 <DMA_SetConfig+0x270>)
 80132a6:	4293      	cmp	r3, r2
 80132a8:	d009      	beq.n	80132be <DMA_SetConfig+0x10a>
 80132aa:	68fb      	ldr	r3, [r7, #12]
 80132ac:	681b      	ldr	r3, [r3, #0]
 80132ae:	4a5e      	ldr	r2, [pc, #376]	@ (8013428 <DMA_SetConfig+0x274>)
 80132b0:	4293      	cmp	r3, r2
 80132b2:	d004      	beq.n	80132be <DMA_SetConfig+0x10a>
 80132b4:	68fb      	ldr	r3, [r7, #12]
 80132b6:	681b      	ldr	r3, [r3, #0]
 80132b8:	4a5c      	ldr	r2, [pc, #368]	@ (801342c <DMA_SetConfig+0x278>)
 80132ba:	4293      	cmp	r3, r2
 80132bc:	d101      	bne.n	80132c2 <DMA_SetConfig+0x10e>
 80132be:	2301      	movs	r3, #1
 80132c0:	e000      	b.n	80132c4 <DMA_SetConfig+0x110>
 80132c2:	2300      	movs	r3, #0
 80132c4:	2b00      	cmp	r3, #0
 80132c6:	d00d      	beq.n	80132e4 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80132c8:	68fb      	ldr	r3, [r7, #12]
 80132ca:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80132cc:	68fa      	ldr	r2, [r7, #12]
 80132ce:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80132d0:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80132d2:	68fb      	ldr	r3, [r7, #12]
 80132d4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80132d6:	2b00      	cmp	r3, #0
 80132d8:	d004      	beq.n	80132e4 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80132da:	68fb      	ldr	r3, [r7, #12]
 80132dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80132de:	68fa      	ldr	r2, [r7, #12]
 80132e0:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80132e2:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80132e4:	68fb      	ldr	r3, [r7, #12]
 80132e6:	681b      	ldr	r3, [r3, #0]
 80132e8:	4a39      	ldr	r2, [pc, #228]	@ (80133d0 <DMA_SetConfig+0x21c>)
 80132ea:	4293      	cmp	r3, r2
 80132ec:	d04a      	beq.n	8013384 <DMA_SetConfig+0x1d0>
 80132ee:	68fb      	ldr	r3, [r7, #12]
 80132f0:	681b      	ldr	r3, [r3, #0]
 80132f2:	4a38      	ldr	r2, [pc, #224]	@ (80133d4 <DMA_SetConfig+0x220>)
 80132f4:	4293      	cmp	r3, r2
 80132f6:	d045      	beq.n	8013384 <DMA_SetConfig+0x1d0>
 80132f8:	68fb      	ldr	r3, [r7, #12]
 80132fa:	681b      	ldr	r3, [r3, #0]
 80132fc:	4a36      	ldr	r2, [pc, #216]	@ (80133d8 <DMA_SetConfig+0x224>)
 80132fe:	4293      	cmp	r3, r2
 8013300:	d040      	beq.n	8013384 <DMA_SetConfig+0x1d0>
 8013302:	68fb      	ldr	r3, [r7, #12]
 8013304:	681b      	ldr	r3, [r3, #0]
 8013306:	4a35      	ldr	r2, [pc, #212]	@ (80133dc <DMA_SetConfig+0x228>)
 8013308:	4293      	cmp	r3, r2
 801330a:	d03b      	beq.n	8013384 <DMA_SetConfig+0x1d0>
 801330c:	68fb      	ldr	r3, [r7, #12]
 801330e:	681b      	ldr	r3, [r3, #0]
 8013310:	4a33      	ldr	r2, [pc, #204]	@ (80133e0 <DMA_SetConfig+0x22c>)
 8013312:	4293      	cmp	r3, r2
 8013314:	d036      	beq.n	8013384 <DMA_SetConfig+0x1d0>
 8013316:	68fb      	ldr	r3, [r7, #12]
 8013318:	681b      	ldr	r3, [r3, #0]
 801331a:	4a32      	ldr	r2, [pc, #200]	@ (80133e4 <DMA_SetConfig+0x230>)
 801331c:	4293      	cmp	r3, r2
 801331e:	d031      	beq.n	8013384 <DMA_SetConfig+0x1d0>
 8013320:	68fb      	ldr	r3, [r7, #12]
 8013322:	681b      	ldr	r3, [r3, #0]
 8013324:	4a30      	ldr	r2, [pc, #192]	@ (80133e8 <DMA_SetConfig+0x234>)
 8013326:	4293      	cmp	r3, r2
 8013328:	d02c      	beq.n	8013384 <DMA_SetConfig+0x1d0>
 801332a:	68fb      	ldr	r3, [r7, #12]
 801332c:	681b      	ldr	r3, [r3, #0]
 801332e:	4a2f      	ldr	r2, [pc, #188]	@ (80133ec <DMA_SetConfig+0x238>)
 8013330:	4293      	cmp	r3, r2
 8013332:	d027      	beq.n	8013384 <DMA_SetConfig+0x1d0>
 8013334:	68fb      	ldr	r3, [r7, #12]
 8013336:	681b      	ldr	r3, [r3, #0]
 8013338:	4a2d      	ldr	r2, [pc, #180]	@ (80133f0 <DMA_SetConfig+0x23c>)
 801333a:	4293      	cmp	r3, r2
 801333c:	d022      	beq.n	8013384 <DMA_SetConfig+0x1d0>
 801333e:	68fb      	ldr	r3, [r7, #12]
 8013340:	681b      	ldr	r3, [r3, #0]
 8013342:	4a2c      	ldr	r2, [pc, #176]	@ (80133f4 <DMA_SetConfig+0x240>)
 8013344:	4293      	cmp	r3, r2
 8013346:	d01d      	beq.n	8013384 <DMA_SetConfig+0x1d0>
 8013348:	68fb      	ldr	r3, [r7, #12]
 801334a:	681b      	ldr	r3, [r3, #0]
 801334c:	4a2a      	ldr	r2, [pc, #168]	@ (80133f8 <DMA_SetConfig+0x244>)
 801334e:	4293      	cmp	r3, r2
 8013350:	d018      	beq.n	8013384 <DMA_SetConfig+0x1d0>
 8013352:	68fb      	ldr	r3, [r7, #12]
 8013354:	681b      	ldr	r3, [r3, #0]
 8013356:	4a29      	ldr	r2, [pc, #164]	@ (80133fc <DMA_SetConfig+0x248>)
 8013358:	4293      	cmp	r3, r2
 801335a:	d013      	beq.n	8013384 <DMA_SetConfig+0x1d0>
 801335c:	68fb      	ldr	r3, [r7, #12]
 801335e:	681b      	ldr	r3, [r3, #0]
 8013360:	4a27      	ldr	r2, [pc, #156]	@ (8013400 <DMA_SetConfig+0x24c>)
 8013362:	4293      	cmp	r3, r2
 8013364:	d00e      	beq.n	8013384 <DMA_SetConfig+0x1d0>
 8013366:	68fb      	ldr	r3, [r7, #12]
 8013368:	681b      	ldr	r3, [r3, #0]
 801336a:	4a26      	ldr	r2, [pc, #152]	@ (8013404 <DMA_SetConfig+0x250>)
 801336c:	4293      	cmp	r3, r2
 801336e:	d009      	beq.n	8013384 <DMA_SetConfig+0x1d0>
 8013370:	68fb      	ldr	r3, [r7, #12]
 8013372:	681b      	ldr	r3, [r3, #0]
 8013374:	4a24      	ldr	r2, [pc, #144]	@ (8013408 <DMA_SetConfig+0x254>)
 8013376:	4293      	cmp	r3, r2
 8013378:	d004      	beq.n	8013384 <DMA_SetConfig+0x1d0>
 801337a:	68fb      	ldr	r3, [r7, #12]
 801337c:	681b      	ldr	r3, [r3, #0]
 801337e:	4a23      	ldr	r2, [pc, #140]	@ (801340c <DMA_SetConfig+0x258>)
 8013380:	4293      	cmp	r3, r2
 8013382:	d101      	bne.n	8013388 <DMA_SetConfig+0x1d4>
 8013384:	2301      	movs	r3, #1
 8013386:	e000      	b.n	801338a <DMA_SetConfig+0x1d6>
 8013388:	2300      	movs	r3, #0
 801338a:	2b00      	cmp	r3, #0
 801338c:	d059      	beq.n	8013442 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 801338e:	68fb      	ldr	r3, [r7, #12]
 8013390:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8013392:	f003 031f 	and.w	r3, r3, #31
 8013396:	223f      	movs	r2, #63	@ 0x3f
 8013398:	409a      	lsls	r2, r3
 801339a:	697b      	ldr	r3, [r7, #20]
 801339c:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 801339e:	68fb      	ldr	r3, [r7, #12]
 80133a0:	681b      	ldr	r3, [r3, #0]
 80133a2:	681a      	ldr	r2, [r3, #0]
 80133a4:	68fb      	ldr	r3, [r7, #12]
 80133a6:	681b      	ldr	r3, [r3, #0]
 80133a8:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80133ac:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80133ae:	68fb      	ldr	r3, [r7, #12]
 80133b0:	681b      	ldr	r3, [r3, #0]
 80133b2:	683a      	ldr	r2, [r7, #0]
 80133b4:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80133b6:	68fb      	ldr	r3, [r7, #12]
 80133b8:	689b      	ldr	r3, [r3, #8]
 80133ba:	2b40      	cmp	r3, #64	@ 0x40
 80133bc:	d138      	bne.n	8013430 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80133be:	68fb      	ldr	r3, [r7, #12]
 80133c0:	681b      	ldr	r3, [r3, #0]
 80133c2:	687a      	ldr	r2, [r7, #4]
 80133c4:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80133c6:	68fb      	ldr	r3, [r7, #12]
 80133c8:	681b      	ldr	r3, [r3, #0]
 80133ca:	68ba      	ldr	r2, [r7, #8]
 80133cc:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 80133ce:	e086      	b.n	80134de <DMA_SetConfig+0x32a>
 80133d0:	40020010 	.word	0x40020010
 80133d4:	40020028 	.word	0x40020028
 80133d8:	40020040 	.word	0x40020040
 80133dc:	40020058 	.word	0x40020058
 80133e0:	40020070 	.word	0x40020070
 80133e4:	40020088 	.word	0x40020088
 80133e8:	400200a0 	.word	0x400200a0
 80133ec:	400200b8 	.word	0x400200b8
 80133f0:	40020410 	.word	0x40020410
 80133f4:	40020428 	.word	0x40020428
 80133f8:	40020440 	.word	0x40020440
 80133fc:	40020458 	.word	0x40020458
 8013400:	40020470 	.word	0x40020470
 8013404:	40020488 	.word	0x40020488
 8013408:	400204a0 	.word	0x400204a0
 801340c:	400204b8 	.word	0x400204b8
 8013410:	58025408 	.word	0x58025408
 8013414:	5802541c 	.word	0x5802541c
 8013418:	58025430 	.word	0x58025430
 801341c:	58025444 	.word	0x58025444
 8013420:	58025458 	.word	0x58025458
 8013424:	5802546c 	.word	0x5802546c
 8013428:	58025480 	.word	0x58025480
 801342c:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8013430:	68fb      	ldr	r3, [r7, #12]
 8013432:	681b      	ldr	r3, [r3, #0]
 8013434:	68ba      	ldr	r2, [r7, #8]
 8013436:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8013438:	68fb      	ldr	r3, [r7, #12]
 801343a:	681b      	ldr	r3, [r3, #0]
 801343c:	687a      	ldr	r2, [r7, #4]
 801343e:	60da      	str	r2, [r3, #12]
}
 8013440:	e04d      	b.n	80134de <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8013442:	68fb      	ldr	r3, [r7, #12]
 8013444:	681b      	ldr	r3, [r3, #0]
 8013446:	4a29      	ldr	r2, [pc, #164]	@ (80134ec <DMA_SetConfig+0x338>)
 8013448:	4293      	cmp	r3, r2
 801344a:	d022      	beq.n	8013492 <DMA_SetConfig+0x2de>
 801344c:	68fb      	ldr	r3, [r7, #12]
 801344e:	681b      	ldr	r3, [r3, #0]
 8013450:	4a27      	ldr	r2, [pc, #156]	@ (80134f0 <DMA_SetConfig+0x33c>)
 8013452:	4293      	cmp	r3, r2
 8013454:	d01d      	beq.n	8013492 <DMA_SetConfig+0x2de>
 8013456:	68fb      	ldr	r3, [r7, #12]
 8013458:	681b      	ldr	r3, [r3, #0]
 801345a:	4a26      	ldr	r2, [pc, #152]	@ (80134f4 <DMA_SetConfig+0x340>)
 801345c:	4293      	cmp	r3, r2
 801345e:	d018      	beq.n	8013492 <DMA_SetConfig+0x2de>
 8013460:	68fb      	ldr	r3, [r7, #12]
 8013462:	681b      	ldr	r3, [r3, #0]
 8013464:	4a24      	ldr	r2, [pc, #144]	@ (80134f8 <DMA_SetConfig+0x344>)
 8013466:	4293      	cmp	r3, r2
 8013468:	d013      	beq.n	8013492 <DMA_SetConfig+0x2de>
 801346a:	68fb      	ldr	r3, [r7, #12]
 801346c:	681b      	ldr	r3, [r3, #0]
 801346e:	4a23      	ldr	r2, [pc, #140]	@ (80134fc <DMA_SetConfig+0x348>)
 8013470:	4293      	cmp	r3, r2
 8013472:	d00e      	beq.n	8013492 <DMA_SetConfig+0x2de>
 8013474:	68fb      	ldr	r3, [r7, #12]
 8013476:	681b      	ldr	r3, [r3, #0]
 8013478:	4a21      	ldr	r2, [pc, #132]	@ (8013500 <DMA_SetConfig+0x34c>)
 801347a:	4293      	cmp	r3, r2
 801347c:	d009      	beq.n	8013492 <DMA_SetConfig+0x2de>
 801347e:	68fb      	ldr	r3, [r7, #12]
 8013480:	681b      	ldr	r3, [r3, #0]
 8013482:	4a20      	ldr	r2, [pc, #128]	@ (8013504 <DMA_SetConfig+0x350>)
 8013484:	4293      	cmp	r3, r2
 8013486:	d004      	beq.n	8013492 <DMA_SetConfig+0x2de>
 8013488:	68fb      	ldr	r3, [r7, #12]
 801348a:	681b      	ldr	r3, [r3, #0]
 801348c:	4a1e      	ldr	r2, [pc, #120]	@ (8013508 <DMA_SetConfig+0x354>)
 801348e:	4293      	cmp	r3, r2
 8013490:	d101      	bne.n	8013496 <DMA_SetConfig+0x2e2>
 8013492:	2301      	movs	r3, #1
 8013494:	e000      	b.n	8013498 <DMA_SetConfig+0x2e4>
 8013496:	2300      	movs	r3, #0
 8013498:	2b00      	cmp	r3, #0
 801349a:	d020      	beq.n	80134de <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 801349c:	68fb      	ldr	r3, [r7, #12]
 801349e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80134a0:	f003 031f 	and.w	r3, r3, #31
 80134a4:	2201      	movs	r2, #1
 80134a6:	409a      	lsls	r2, r3
 80134a8:	693b      	ldr	r3, [r7, #16]
 80134aa:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80134ac:	68fb      	ldr	r3, [r7, #12]
 80134ae:	681b      	ldr	r3, [r3, #0]
 80134b0:	683a      	ldr	r2, [r7, #0]
 80134b2:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80134b4:	68fb      	ldr	r3, [r7, #12]
 80134b6:	689b      	ldr	r3, [r3, #8]
 80134b8:	2b40      	cmp	r3, #64	@ 0x40
 80134ba:	d108      	bne.n	80134ce <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80134bc:	68fb      	ldr	r3, [r7, #12]
 80134be:	681b      	ldr	r3, [r3, #0]
 80134c0:	687a      	ldr	r2, [r7, #4]
 80134c2:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80134c4:	68fb      	ldr	r3, [r7, #12]
 80134c6:	681b      	ldr	r3, [r3, #0]
 80134c8:	68ba      	ldr	r2, [r7, #8]
 80134ca:	60da      	str	r2, [r3, #12]
}
 80134cc:	e007      	b.n	80134de <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80134ce:	68fb      	ldr	r3, [r7, #12]
 80134d0:	681b      	ldr	r3, [r3, #0]
 80134d2:	68ba      	ldr	r2, [r7, #8]
 80134d4:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80134d6:	68fb      	ldr	r3, [r7, #12]
 80134d8:	681b      	ldr	r3, [r3, #0]
 80134da:	687a      	ldr	r2, [r7, #4]
 80134dc:	60da      	str	r2, [r3, #12]
}
 80134de:	bf00      	nop
 80134e0:	371c      	adds	r7, #28
 80134e2:	46bd      	mov	sp, r7
 80134e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134e8:	4770      	bx	lr
 80134ea:	bf00      	nop
 80134ec:	58025408 	.word	0x58025408
 80134f0:	5802541c 	.word	0x5802541c
 80134f4:	58025430 	.word	0x58025430
 80134f8:	58025444 	.word	0x58025444
 80134fc:	58025458 	.word	0x58025458
 8013500:	5802546c 	.word	0x5802546c
 8013504:	58025480 	.word	0x58025480
 8013508:	58025494 	.word	0x58025494

0801350c <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 801350c:	b480      	push	{r7}
 801350e:	b085      	sub	sp, #20
 8013510:	af00      	add	r7, sp, #0
 8013512:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8013514:	687b      	ldr	r3, [r7, #4]
 8013516:	681b      	ldr	r3, [r3, #0]
 8013518:	4a42      	ldr	r2, [pc, #264]	@ (8013624 <DMA_CalcBaseAndBitshift+0x118>)
 801351a:	4293      	cmp	r3, r2
 801351c:	d04a      	beq.n	80135b4 <DMA_CalcBaseAndBitshift+0xa8>
 801351e:	687b      	ldr	r3, [r7, #4]
 8013520:	681b      	ldr	r3, [r3, #0]
 8013522:	4a41      	ldr	r2, [pc, #260]	@ (8013628 <DMA_CalcBaseAndBitshift+0x11c>)
 8013524:	4293      	cmp	r3, r2
 8013526:	d045      	beq.n	80135b4 <DMA_CalcBaseAndBitshift+0xa8>
 8013528:	687b      	ldr	r3, [r7, #4]
 801352a:	681b      	ldr	r3, [r3, #0]
 801352c:	4a3f      	ldr	r2, [pc, #252]	@ (801362c <DMA_CalcBaseAndBitshift+0x120>)
 801352e:	4293      	cmp	r3, r2
 8013530:	d040      	beq.n	80135b4 <DMA_CalcBaseAndBitshift+0xa8>
 8013532:	687b      	ldr	r3, [r7, #4]
 8013534:	681b      	ldr	r3, [r3, #0]
 8013536:	4a3e      	ldr	r2, [pc, #248]	@ (8013630 <DMA_CalcBaseAndBitshift+0x124>)
 8013538:	4293      	cmp	r3, r2
 801353a:	d03b      	beq.n	80135b4 <DMA_CalcBaseAndBitshift+0xa8>
 801353c:	687b      	ldr	r3, [r7, #4]
 801353e:	681b      	ldr	r3, [r3, #0]
 8013540:	4a3c      	ldr	r2, [pc, #240]	@ (8013634 <DMA_CalcBaseAndBitshift+0x128>)
 8013542:	4293      	cmp	r3, r2
 8013544:	d036      	beq.n	80135b4 <DMA_CalcBaseAndBitshift+0xa8>
 8013546:	687b      	ldr	r3, [r7, #4]
 8013548:	681b      	ldr	r3, [r3, #0]
 801354a:	4a3b      	ldr	r2, [pc, #236]	@ (8013638 <DMA_CalcBaseAndBitshift+0x12c>)
 801354c:	4293      	cmp	r3, r2
 801354e:	d031      	beq.n	80135b4 <DMA_CalcBaseAndBitshift+0xa8>
 8013550:	687b      	ldr	r3, [r7, #4]
 8013552:	681b      	ldr	r3, [r3, #0]
 8013554:	4a39      	ldr	r2, [pc, #228]	@ (801363c <DMA_CalcBaseAndBitshift+0x130>)
 8013556:	4293      	cmp	r3, r2
 8013558:	d02c      	beq.n	80135b4 <DMA_CalcBaseAndBitshift+0xa8>
 801355a:	687b      	ldr	r3, [r7, #4]
 801355c:	681b      	ldr	r3, [r3, #0]
 801355e:	4a38      	ldr	r2, [pc, #224]	@ (8013640 <DMA_CalcBaseAndBitshift+0x134>)
 8013560:	4293      	cmp	r3, r2
 8013562:	d027      	beq.n	80135b4 <DMA_CalcBaseAndBitshift+0xa8>
 8013564:	687b      	ldr	r3, [r7, #4]
 8013566:	681b      	ldr	r3, [r3, #0]
 8013568:	4a36      	ldr	r2, [pc, #216]	@ (8013644 <DMA_CalcBaseAndBitshift+0x138>)
 801356a:	4293      	cmp	r3, r2
 801356c:	d022      	beq.n	80135b4 <DMA_CalcBaseAndBitshift+0xa8>
 801356e:	687b      	ldr	r3, [r7, #4]
 8013570:	681b      	ldr	r3, [r3, #0]
 8013572:	4a35      	ldr	r2, [pc, #212]	@ (8013648 <DMA_CalcBaseAndBitshift+0x13c>)
 8013574:	4293      	cmp	r3, r2
 8013576:	d01d      	beq.n	80135b4 <DMA_CalcBaseAndBitshift+0xa8>
 8013578:	687b      	ldr	r3, [r7, #4]
 801357a:	681b      	ldr	r3, [r3, #0]
 801357c:	4a33      	ldr	r2, [pc, #204]	@ (801364c <DMA_CalcBaseAndBitshift+0x140>)
 801357e:	4293      	cmp	r3, r2
 8013580:	d018      	beq.n	80135b4 <DMA_CalcBaseAndBitshift+0xa8>
 8013582:	687b      	ldr	r3, [r7, #4]
 8013584:	681b      	ldr	r3, [r3, #0]
 8013586:	4a32      	ldr	r2, [pc, #200]	@ (8013650 <DMA_CalcBaseAndBitshift+0x144>)
 8013588:	4293      	cmp	r3, r2
 801358a:	d013      	beq.n	80135b4 <DMA_CalcBaseAndBitshift+0xa8>
 801358c:	687b      	ldr	r3, [r7, #4]
 801358e:	681b      	ldr	r3, [r3, #0]
 8013590:	4a30      	ldr	r2, [pc, #192]	@ (8013654 <DMA_CalcBaseAndBitshift+0x148>)
 8013592:	4293      	cmp	r3, r2
 8013594:	d00e      	beq.n	80135b4 <DMA_CalcBaseAndBitshift+0xa8>
 8013596:	687b      	ldr	r3, [r7, #4]
 8013598:	681b      	ldr	r3, [r3, #0]
 801359a:	4a2f      	ldr	r2, [pc, #188]	@ (8013658 <DMA_CalcBaseAndBitshift+0x14c>)
 801359c:	4293      	cmp	r3, r2
 801359e:	d009      	beq.n	80135b4 <DMA_CalcBaseAndBitshift+0xa8>
 80135a0:	687b      	ldr	r3, [r7, #4]
 80135a2:	681b      	ldr	r3, [r3, #0]
 80135a4:	4a2d      	ldr	r2, [pc, #180]	@ (801365c <DMA_CalcBaseAndBitshift+0x150>)
 80135a6:	4293      	cmp	r3, r2
 80135a8:	d004      	beq.n	80135b4 <DMA_CalcBaseAndBitshift+0xa8>
 80135aa:	687b      	ldr	r3, [r7, #4]
 80135ac:	681b      	ldr	r3, [r3, #0]
 80135ae:	4a2c      	ldr	r2, [pc, #176]	@ (8013660 <DMA_CalcBaseAndBitshift+0x154>)
 80135b0:	4293      	cmp	r3, r2
 80135b2:	d101      	bne.n	80135b8 <DMA_CalcBaseAndBitshift+0xac>
 80135b4:	2301      	movs	r3, #1
 80135b6:	e000      	b.n	80135ba <DMA_CalcBaseAndBitshift+0xae>
 80135b8:	2300      	movs	r3, #0
 80135ba:	2b00      	cmp	r3, #0
 80135bc:	d024      	beq.n	8013608 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80135be:	687b      	ldr	r3, [r7, #4]
 80135c0:	681b      	ldr	r3, [r3, #0]
 80135c2:	b2db      	uxtb	r3, r3
 80135c4:	3b10      	subs	r3, #16
 80135c6:	4a27      	ldr	r2, [pc, #156]	@ (8013664 <DMA_CalcBaseAndBitshift+0x158>)
 80135c8:	fba2 2303 	umull	r2, r3, r2, r3
 80135cc:	091b      	lsrs	r3, r3, #4
 80135ce:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80135d0:	68fb      	ldr	r3, [r7, #12]
 80135d2:	f003 0307 	and.w	r3, r3, #7
 80135d6:	4a24      	ldr	r2, [pc, #144]	@ (8013668 <DMA_CalcBaseAndBitshift+0x15c>)
 80135d8:	5cd3      	ldrb	r3, [r2, r3]
 80135da:	461a      	mov	r2, r3
 80135dc:	687b      	ldr	r3, [r7, #4]
 80135de:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 80135e0:	68fb      	ldr	r3, [r7, #12]
 80135e2:	2b03      	cmp	r3, #3
 80135e4:	d908      	bls.n	80135f8 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80135e6:	687b      	ldr	r3, [r7, #4]
 80135e8:	681b      	ldr	r3, [r3, #0]
 80135ea:	461a      	mov	r2, r3
 80135ec:	4b1f      	ldr	r3, [pc, #124]	@ (801366c <DMA_CalcBaseAndBitshift+0x160>)
 80135ee:	4013      	ands	r3, r2
 80135f0:	1d1a      	adds	r2, r3, #4
 80135f2:	687b      	ldr	r3, [r7, #4]
 80135f4:	659a      	str	r2, [r3, #88]	@ 0x58
 80135f6:	e00d      	b.n	8013614 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80135f8:	687b      	ldr	r3, [r7, #4]
 80135fa:	681b      	ldr	r3, [r3, #0]
 80135fc:	461a      	mov	r2, r3
 80135fe:	4b1b      	ldr	r3, [pc, #108]	@ (801366c <DMA_CalcBaseAndBitshift+0x160>)
 8013600:	4013      	ands	r3, r2
 8013602:	687a      	ldr	r2, [r7, #4]
 8013604:	6593      	str	r3, [r2, #88]	@ 0x58
 8013606:	e005      	b.n	8013614 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8013608:	687b      	ldr	r3, [r7, #4]
 801360a:	681b      	ldr	r3, [r3, #0]
 801360c:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8013610:	687b      	ldr	r3, [r7, #4]
 8013612:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8013614:	687b      	ldr	r3, [r7, #4]
 8013616:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8013618:	4618      	mov	r0, r3
 801361a:	3714      	adds	r7, #20
 801361c:	46bd      	mov	sp, r7
 801361e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013622:	4770      	bx	lr
 8013624:	40020010 	.word	0x40020010
 8013628:	40020028 	.word	0x40020028
 801362c:	40020040 	.word	0x40020040
 8013630:	40020058 	.word	0x40020058
 8013634:	40020070 	.word	0x40020070
 8013638:	40020088 	.word	0x40020088
 801363c:	400200a0 	.word	0x400200a0
 8013640:	400200b8 	.word	0x400200b8
 8013644:	40020410 	.word	0x40020410
 8013648:	40020428 	.word	0x40020428
 801364c:	40020440 	.word	0x40020440
 8013650:	40020458 	.word	0x40020458
 8013654:	40020470 	.word	0x40020470
 8013658:	40020488 	.word	0x40020488
 801365c:	400204a0 	.word	0x400204a0
 8013660:	400204b8 	.word	0x400204b8
 8013664:	aaaaaaab 	.word	0xaaaaaaab
 8013668:	080206ac 	.word	0x080206ac
 801366c:	fffffc00 	.word	0xfffffc00

08013670 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8013670:	b480      	push	{r7}
 8013672:	b085      	sub	sp, #20
 8013674:	af00      	add	r7, sp, #0
 8013676:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8013678:	2300      	movs	r3, #0
 801367a:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 801367c:	687b      	ldr	r3, [r7, #4]
 801367e:	699b      	ldr	r3, [r3, #24]
 8013680:	2b00      	cmp	r3, #0
 8013682:	d120      	bne.n	80136c6 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8013684:	687b      	ldr	r3, [r7, #4]
 8013686:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013688:	2b03      	cmp	r3, #3
 801368a:	d858      	bhi.n	801373e <DMA_CheckFifoParam+0xce>
 801368c:	a201      	add	r2, pc, #4	@ (adr r2, 8013694 <DMA_CheckFifoParam+0x24>)
 801368e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013692:	bf00      	nop
 8013694:	080136a5 	.word	0x080136a5
 8013698:	080136b7 	.word	0x080136b7
 801369c:	080136a5 	.word	0x080136a5
 80136a0:	0801373f 	.word	0x0801373f
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80136a4:	687b      	ldr	r3, [r7, #4]
 80136a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80136a8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80136ac:	2b00      	cmp	r3, #0
 80136ae:	d048      	beq.n	8013742 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80136b0:	2301      	movs	r3, #1
 80136b2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80136b4:	e045      	b.n	8013742 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80136b6:	687b      	ldr	r3, [r7, #4]
 80136b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80136ba:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80136be:	d142      	bne.n	8013746 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80136c0:	2301      	movs	r3, #1
 80136c2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80136c4:	e03f      	b.n	8013746 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80136c6:	687b      	ldr	r3, [r7, #4]
 80136c8:	699b      	ldr	r3, [r3, #24]
 80136ca:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80136ce:	d123      	bne.n	8013718 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80136d0:	687b      	ldr	r3, [r7, #4]
 80136d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80136d4:	2b03      	cmp	r3, #3
 80136d6:	d838      	bhi.n	801374a <DMA_CheckFifoParam+0xda>
 80136d8:	a201      	add	r2, pc, #4	@ (adr r2, 80136e0 <DMA_CheckFifoParam+0x70>)
 80136da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80136de:	bf00      	nop
 80136e0:	080136f1 	.word	0x080136f1
 80136e4:	080136f7 	.word	0x080136f7
 80136e8:	080136f1 	.word	0x080136f1
 80136ec:	08013709 	.word	0x08013709
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80136f0:	2301      	movs	r3, #1
 80136f2:	73fb      	strb	r3, [r7, #15]
        break;
 80136f4:	e030      	b.n	8013758 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80136f6:	687b      	ldr	r3, [r7, #4]
 80136f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80136fa:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80136fe:	2b00      	cmp	r3, #0
 8013700:	d025      	beq.n	801374e <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8013702:	2301      	movs	r3, #1
 8013704:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8013706:	e022      	b.n	801374e <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8013708:	687b      	ldr	r3, [r7, #4]
 801370a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801370c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8013710:	d11f      	bne.n	8013752 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8013712:	2301      	movs	r3, #1
 8013714:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8013716:	e01c      	b.n	8013752 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8013718:	687b      	ldr	r3, [r7, #4]
 801371a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801371c:	2b02      	cmp	r3, #2
 801371e:	d902      	bls.n	8013726 <DMA_CheckFifoParam+0xb6>
 8013720:	2b03      	cmp	r3, #3
 8013722:	d003      	beq.n	801372c <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8013724:	e018      	b.n	8013758 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8013726:	2301      	movs	r3, #1
 8013728:	73fb      	strb	r3, [r7, #15]
        break;
 801372a:	e015      	b.n	8013758 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 801372c:	687b      	ldr	r3, [r7, #4]
 801372e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013730:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8013734:	2b00      	cmp	r3, #0
 8013736:	d00e      	beq.n	8013756 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8013738:	2301      	movs	r3, #1
 801373a:	73fb      	strb	r3, [r7, #15]
    break;
 801373c:	e00b      	b.n	8013756 <DMA_CheckFifoParam+0xe6>
        break;
 801373e:	bf00      	nop
 8013740:	e00a      	b.n	8013758 <DMA_CheckFifoParam+0xe8>
        break;
 8013742:	bf00      	nop
 8013744:	e008      	b.n	8013758 <DMA_CheckFifoParam+0xe8>
        break;
 8013746:	bf00      	nop
 8013748:	e006      	b.n	8013758 <DMA_CheckFifoParam+0xe8>
        break;
 801374a:	bf00      	nop
 801374c:	e004      	b.n	8013758 <DMA_CheckFifoParam+0xe8>
        break;
 801374e:	bf00      	nop
 8013750:	e002      	b.n	8013758 <DMA_CheckFifoParam+0xe8>
        break;
 8013752:	bf00      	nop
 8013754:	e000      	b.n	8013758 <DMA_CheckFifoParam+0xe8>
    break;
 8013756:	bf00      	nop
    }
  }

  return status;
 8013758:	7bfb      	ldrb	r3, [r7, #15]
}
 801375a:	4618      	mov	r0, r3
 801375c:	3714      	adds	r7, #20
 801375e:	46bd      	mov	sp, r7
 8013760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013764:	4770      	bx	lr
 8013766:	bf00      	nop

08013768 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8013768:	b480      	push	{r7}
 801376a:	b085      	sub	sp, #20
 801376c:	af00      	add	r7, sp, #0
 801376e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8013770:	687b      	ldr	r3, [r7, #4]
 8013772:	681b      	ldr	r3, [r3, #0]
 8013774:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8013776:	687b      	ldr	r3, [r7, #4]
 8013778:	681b      	ldr	r3, [r3, #0]
 801377a:	4a38      	ldr	r2, [pc, #224]	@ (801385c <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 801377c:	4293      	cmp	r3, r2
 801377e:	d022      	beq.n	80137c6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8013780:	687b      	ldr	r3, [r7, #4]
 8013782:	681b      	ldr	r3, [r3, #0]
 8013784:	4a36      	ldr	r2, [pc, #216]	@ (8013860 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8013786:	4293      	cmp	r3, r2
 8013788:	d01d      	beq.n	80137c6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 801378a:	687b      	ldr	r3, [r7, #4]
 801378c:	681b      	ldr	r3, [r3, #0]
 801378e:	4a35      	ldr	r2, [pc, #212]	@ (8013864 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8013790:	4293      	cmp	r3, r2
 8013792:	d018      	beq.n	80137c6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8013794:	687b      	ldr	r3, [r7, #4]
 8013796:	681b      	ldr	r3, [r3, #0]
 8013798:	4a33      	ldr	r2, [pc, #204]	@ (8013868 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 801379a:	4293      	cmp	r3, r2
 801379c:	d013      	beq.n	80137c6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 801379e:	687b      	ldr	r3, [r7, #4]
 80137a0:	681b      	ldr	r3, [r3, #0]
 80137a2:	4a32      	ldr	r2, [pc, #200]	@ (801386c <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80137a4:	4293      	cmp	r3, r2
 80137a6:	d00e      	beq.n	80137c6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80137a8:	687b      	ldr	r3, [r7, #4]
 80137aa:	681b      	ldr	r3, [r3, #0]
 80137ac:	4a30      	ldr	r2, [pc, #192]	@ (8013870 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80137ae:	4293      	cmp	r3, r2
 80137b0:	d009      	beq.n	80137c6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80137b2:	687b      	ldr	r3, [r7, #4]
 80137b4:	681b      	ldr	r3, [r3, #0]
 80137b6:	4a2f      	ldr	r2, [pc, #188]	@ (8013874 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80137b8:	4293      	cmp	r3, r2
 80137ba:	d004      	beq.n	80137c6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80137bc:	687b      	ldr	r3, [r7, #4]
 80137be:	681b      	ldr	r3, [r3, #0]
 80137c0:	4a2d      	ldr	r2, [pc, #180]	@ (8013878 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80137c2:	4293      	cmp	r3, r2
 80137c4:	d101      	bne.n	80137ca <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80137c6:	2301      	movs	r3, #1
 80137c8:	e000      	b.n	80137cc <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80137ca:	2300      	movs	r3, #0
 80137cc:	2b00      	cmp	r3, #0
 80137ce:	d01a      	beq.n	8013806 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80137d0:	687b      	ldr	r3, [r7, #4]
 80137d2:	681b      	ldr	r3, [r3, #0]
 80137d4:	b2db      	uxtb	r3, r3
 80137d6:	3b08      	subs	r3, #8
 80137d8:	4a28      	ldr	r2, [pc, #160]	@ (801387c <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80137da:	fba2 2303 	umull	r2, r3, r2, r3
 80137de:	091b      	lsrs	r3, r3, #4
 80137e0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80137e2:	68fa      	ldr	r2, [r7, #12]
 80137e4:	4b26      	ldr	r3, [pc, #152]	@ (8013880 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80137e6:	4413      	add	r3, r2
 80137e8:	009b      	lsls	r3, r3, #2
 80137ea:	461a      	mov	r2, r3
 80137ec:	687b      	ldr	r3, [r7, #4]
 80137ee:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80137f0:	687b      	ldr	r3, [r7, #4]
 80137f2:	4a24      	ldr	r2, [pc, #144]	@ (8013884 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80137f4:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80137f6:	68fb      	ldr	r3, [r7, #12]
 80137f8:	f003 031f 	and.w	r3, r3, #31
 80137fc:	2201      	movs	r2, #1
 80137fe:	409a      	lsls	r2, r3
 8013800:	687b      	ldr	r3, [r7, #4]
 8013802:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8013804:	e024      	b.n	8013850 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8013806:	687b      	ldr	r3, [r7, #4]
 8013808:	681b      	ldr	r3, [r3, #0]
 801380a:	b2db      	uxtb	r3, r3
 801380c:	3b10      	subs	r3, #16
 801380e:	4a1e      	ldr	r2, [pc, #120]	@ (8013888 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8013810:	fba2 2303 	umull	r2, r3, r2, r3
 8013814:	091b      	lsrs	r3, r3, #4
 8013816:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8013818:	68bb      	ldr	r3, [r7, #8]
 801381a:	4a1c      	ldr	r2, [pc, #112]	@ (801388c <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 801381c:	4293      	cmp	r3, r2
 801381e:	d806      	bhi.n	801382e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8013820:	68bb      	ldr	r3, [r7, #8]
 8013822:	4a1b      	ldr	r2, [pc, #108]	@ (8013890 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8013824:	4293      	cmp	r3, r2
 8013826:	d902      	bls.n	801382e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8013828:	68fb      	ldr	r3, [r7, #12]
 801382a:	3308      	adds	r3, #8
 801382c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 801382e:	68fa      	ldr	r2, [r7, #12]
 8013830:	4b18      	ldr	r3, [pc, #96]	@ (8013894 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8013832:	4413      	add	r3, r2
 8013834:	009b      	lsls	r3, r3, #2
 8013836:	461a      	mov	r2, r3
 8013838:	687b      	ldr	r3, [r7, #4]
 801383a:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 801383c:	687b      	ldr	r3, [r7, #4]
 801383e:	4a16      	ldr	r2, [pc, #88]	@ (8013898 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8013840:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8013842:	68fb      	ldr	r3, [r7, #12]
 8013844:	f003 031f 	and.w	r3, r3, #31
 8013848:	2201      	movs	r2, #1
 801384a:	409a      	lsls	r2, r3
 801384c:	687b      	ldr	r3, [r7, #4]
 801384e:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8013850:	bf00      	nop
 8013852:	3714      	adds	r7, #20
 8013854:	46bd      	mov	sp, r7
 8013856:	f85d 7b04 	ldr.w	r7, [sp], #4
 801385a:	4770      	bx	lr
 801385c:	58025408 	.word	0x58025408
 8013860:	5802541c 	.word	0x5802541c
 8013864:	58025430 	.word	0x58025430
 8013868:	58025444 	.word	0x58025444
 801386c:	58025458 	.word	0x58025458
 8013870:	5802546c 	.word	0x5802546c
 8013874:	58025480 	.word	0x58025480
 8013878:	58025494 	.word	0x58025494
 801387c:	cccccccd 	.word	0xcccccccd
 8013880:	16009600 	.word	0x16009600
 8013884:	58025880 	.word	0x58025880
 8013888:	aaaaaaab 	.word	0xaaaaaaab
 801388c:	400204b8 	.word	0x400204b8
 8013890:	4002040f 	.word	0x4002040f
 8013894:	10008200 	.word	0x10008200
 8013898:	40020880 	.word	0x40020880

0801389c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 801389c:	b480      	push	{r7}
 801389e:	b085      	sub	sp, #20
 80138a0:	af00      	add	r7, sp, #0
 80138a2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80138a4:	687b      	ldr	r3, [r7, #4]
 80138a6:	685b      	ldr	r3, [r3, #4]
 80138a8:	b2db      	uxtb	r3, r3
 80138aa:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80138ac:	68fb      	ldr	r3, [r7, #12]
 80138ae:	2b00      	cmp	r3, #0
 80138b0:	d04a      	beq.n	8013948 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80138b2:	68fb      	ldr	r3, [r7, #12]
 80138b4:	2b08      	cmp	r3, #8
 80138b6:	d847      	bhi.n	8013948 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80138b8:	687b      	ldr	r3, [r7, #4]
 80138ba:	681b      	ldr	r3, [r3, #0]
 80138bc:	4a25      	ldr	r2, [pc, #148]	@ (8013954 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80138be:	4293      	cmp	r3, r2
 80138c0:	d022      	beq.n	8013908 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80138c2:	687b      	ldr	r3, [r7, #4]
 80138c4:	681b      	ldr	r3, [r3, #0]
 80138c6:	4a24      	ldr	r2, [pc, #144]	@ (8013958 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80138c8:	4293      	cmp	r3, r2
 80138ca:	d01d      	beq.n	8013908 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80138cc:	687b      	ldr	r3, [r7, #4]
 80138ce:	681b      	ldr	r3, [r3, #0]
 80138d0:	4a22      	ldr	r2, [pc, #136]	@ (801395c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80138d2:	4293      	cmp	r3, r2
 80138d4:	d018      	beq.n	8013908 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80138d6:	687b      	ldr	r3, [r7, #4]
 80138d8:	681b      	ldr	r3, [r3, #0]
 80138da:	4a21      	ldr	r2, [pc, #132]	@ (8013960 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80138dc:	4293      	cmp	r3, r2
 80138de:	d013      	beq.n	8013908 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80138e0:	687b      	ldr	r3, [r7, #4]
 80138e2:	681b      	ldr	r3, [r3, #0]
 80138e4:	4a1f      	ldr	r2, [pc, #124]	@ (8013964 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80138e6:	4293      	cmp	r3, r2
 80138e8:	d00e      	beq.n	8013908 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80138ea:	687b      	ldr	r3, [r7, #4]
 80138ec:	681b      	ldr	r3, [r3, #0]
 80138ee:	4a1e      	ldr	r2, [pc, #120]	@ (8013968 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80138f0:	4293      	cmp	r3, r2
 80138f2:	d009      	beq.n	8013908 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80138f4:	687b      	ldr	r3, [r7, #4]
 80138f6:	681b      	ldr	r3, [r3, #0]
 80138f8:	4a1c      	ldr	r2, [pc, #112]	@ (801396c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80138fa:	4293      	cmp	r3, r2
 80138fc:	d004      	beq.n	8013908 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80138fe:	687b      	ldr	r3, [r7, #4]
 8013900:	681b      	ldr	r3, [r3, #0]
 8013902:	4a1b      	ldr	r2, [pc, #108]	@ (8013970 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8013904:	4293      	cmp	r3, r2
 8013906:	d101      	bne.n	801390c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8013908:	2301      	movs	r3, #1
 801390a:	e000      	b.n	801390e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 801390c:	2300      	movs	r3, #0
 801390e:	2b00      	cmp	r3, #0
 8013910:	d00a      	beq.n	8013928 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8013912:	68fa      	ldr	r2, [r7, #12]
 8013914:	4b17      	ldr	r3, [pc, #92]	@ (8013974 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8013916:	4413      	add	r3, r2
 8013918:	009b      	lsls	r3, r3, #2
 801391a:	461a      	mov	r2, r3
 801391c:	687b      	ldr	r3, [r7, #4]
 801391e:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8013920:	687b      	ldr	r3, [r7, #4]
 8013922:	4a15      	ldr	r2, [pc, #84]	@ (8013978 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8013924:	671a      	str	r2, [r3, #112]	@ 0x70
 8013926:	e009      	b.n	801393c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8013928:	68fa      	ldr	r2, [r7, #12]
 801392a:	4b14      	ldr	r3, [pc, #80]	@ (801397c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 801392c:	4413      	add	r3, r2
 801392e:	009b      	lsls	r3, r3, #2
 8013930:	461a      	mov	r2, r3
 8013932:	687b      	ldr	r3, [r7, #4]
 8013934:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8013936:	687b      	ldr	r3, [r7, #4]
 8013938:	4a11      	ldr	r2, [pc, #68]	@ (8013980 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 801393a:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 801393c:	68fb      	ldr	r3, [r7, #12]
 801393e:	3b01      	subs	r3, #1
 8013940:	2201      	movs	r2, #1
 8013942:	409a      	lsls	r2, r3
 8013944:	687b      	ldr	r3, [r7, #4]
 8013946:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8013948:	bf00      	nop
 801394a:	3714      	adds	r7, #20
 801394c:	46bd      	mov	sp, r7
 801394e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013952:	4770      	bx	lr
 8013954:	58025408 	.word	0x58025408
 8013958:	5802541c 	.word	0x5802541c
 801395c:	58025430 	.word	0x58025430
 8013960:	58025444 	.word	0x58025444
 8013964:	58025458 	.word	0x58025458
 8013968:	5802546c 	.word	0x5802546c
 801396c:	58025480 	.word	0x58025480
 8013970:	58025494 	.word	0x58025494
 8013974:	1600963f 	.word	0x1600963f
 8013978:	58025940 	.word	0x58025940
 801397c:	1000823f 	.word	0x1000823f
 8013980:	40020940 	.word	0x40020940

08013984 <HAL_DMAEx_MultiBufferStart_IT>:
  * @param  SecondMemAddress: The second memory Buffer address in case of multi buffer Transfer
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_MultiBufferStart_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t SecondMemAddress, uint32_t DataLength)
{
 8013984:	b580      	push	{r7, lr}
 8013986:	b086      	sub	sp, #24
 8013988:	af00      	add	r7, sp, #0
 801398a:	60f8      	str	r0, [r7, #12]
 801398c:	60b9      	str	r1, [r7, #8]
 801398e:	607a      	str	r2, [r7, #4]
 8013990:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8013992:	2300      	movs	r3, #0
 8013994:	75fb      	strb	r3, [r7, #23]
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Memory-to-memory transfer not supported in double buffering mode */
  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8013996:	68fb      	ldr	r3, [r7, #12]
 8013998:	689b      	ldr	r3, [r3, #8]
 801399a:	2b80      	cmp	r3, #128	@ 0x80
 801399c:	d105      	bne.n	80139aa <HAL_DMAEx_MultiBufferStart_IT+0x26>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 801399e:	68fb      	ldr	r3, [r7, #12]
 80139a0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80139a4:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80139a6:	2301      	movs	r3, #1
 80139a8:	e315      	b.n	8013fd6 <HAL_DMAEx_MultiBufferStart_IT+0x652>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80139aa:	68fb      	ldr	r3, [r7, #12]
 80139ac:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80139b0:	2b01      	cmp	r3, #1
 80139b2:	d101      	bne.n	80139b8 <HAL_DMAEx_MultiBufferStart_IT+0x34>
 80139b4:	2302      	movs	r3, #2
 80139b6:	e30e      	b.n	8013fd6 <HAL_DMAEx_MultiBufferStart_IT+0x652>
 80139b8:	68fb      	ldr	r3, [r7, #12]
 80139ba:	2201      	movs	r2, #1
 80139bc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80139c0:	68fb      	ldr	r3, [r7, #12]
 80139c2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80139c6:	b2db      	uxtb	r3, r3
 80139c8:	2b01      	cmp	r3, #1
 80139ca:	f040 82fd 	bne.w	8013fc8 <HAL_DMAEx_MultiBufferStart_IT+0x644>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80139ce:	68fb      	ldr	r3, [r7, #12]
 80139d0:	2202      	movs	r2, #2
 80139d2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80139d6:	68fb      	ldr	r3, [r7, #12]
 80139d8:	2200      	movs	r2, #0
 80139da:	655a      	str	r2, [r3, #84]	@ 0x54

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80139dc:	68fb      	ldr	r3, [r7, #12]
 80139de:	681b      	ldr	r3, [r3, #0]
 80139e0:	4a82      	ldr	r2, [pc, #520]	@ (8013bec <HAL_DMAEx_MultiBufferStart_IT+0x268>)
 80139e2:	4293      	cmp	r3, r2
 80139e4:	d04a      	beq.n	8013a7c <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 80139e6:	68fb      	ldr	r3, [r7, #12]
 80139e8:	681b      	ldr	r3, [r3, #0]
 80139ea:	4a81      	ldr	r2, [pc, #516]	@ (8013bf0 <HAL_DMAEx_MultiBufferStart_IT+0x26c>)
 80139ec:	4293      	cmp	r3, r2
 80139ee:	d045      	beq.n	8013a7c <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 80139f0:	68fb      	ldr	r3, [r7, #12]
 80139f2:	681b      	ldr	r3, [r3, #0]
 80139f4:	4a7f      	ldr	r2, [pc, #508]	@ (8013bf4 <HAL_DMAEx_MultiBufferStart_IT+0x270>)
 80139f6:	4293      	cmp	r3, r2
 80139f8:	d040      	beq.n	8013a7c <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 80139fa:	68fb      	ldr	r3, [r7, #12]
 80139fc:	681b      	ldr	r3, [r3, #0]
 80139fe:	4a7e      	ldr	r2, [pc, #504]	@ (8013bf8 <HAL_DMAEx_MultiBufferStart_IT+0x274>)
 8013a00:	4293      	cmp	r3, r2
 8013a02:	d03b      	beq.n	8013a7c <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8013a04:	68fb      	ldr	r3, [r7, #12]
 8013a06:	681b      	ldr	r3, [r3, #0]
 8013a08:	4a7c      	ldr	r2, [pc, #496]	@ (8013bfc <HAL_DMAEx_MultiBufferStart_IT+0x278>)
 8013a0a:	4293      	cmp	r3, r2
 8013a0c:	d036      	beq.n	8013a7c <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8013a0e:	68fb      	ldr	r3, [r7, #12]
 8013a10:	681b      	ldr	r3, [r3, #0]
 8013a12:	4a7b      	ldr	r2, [pc, #492]	@ (8013c00 <HAL_DMAEx_MultiBufferStart_IT+0x27c>)
 8013a14:	4293      	cmp	r3, r2
 8013a16:	d031      	beq.n	8013a7c <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8013a18:	68fb      	ldr	r3, [r7, #12]
 8013a1a:	681b      	ldr	r3, [r3, #0]
 8013a1c:	4a79      	ldr	r2, [pc, #484]	@ (8013c04 <HAL_DMAEx_MultiBufferStart_IT+0x280>)
 8013a1e:	4293      	cmp	r3, r2
 8013a20:	d02c      	beq.n	8013a7c <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8013a22:	68fb      	ldr	r3, [r7, #12]
 8013a24:	681b      	ldr	r3, [r3, #0]
 8013a26:	4a78      	ldr	r2, [pc, #480]	@ (8013c08 <HAL_DMAEx_MultiBufferStart_IT+0x284>)
 8013a28:	4293      	cmp	r3, r2
 8013a2a:	d027      	beq.n	8013a7c <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8013a2c:	68fb      	ldr	r3, [r7, #12]
 8013a2e:	681b      	ldr	r3, [r3, #0]
 8013a30:	4a76      	ldr	r2, [pc, #472]	@ (8013c0c <HAL_DMAEx_MultiBufferStart_IT+0x288>)
 8013a32:	4293      	cmp	r3, r2
 8013a34:	d022      	beq.n	8013a7c <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8013a36:	68fb      	ldr	r3, [r7, #12]
 8013a38:	681b      	ldr	r3, [r3, #0]
 8013a3a:	4a75      	ldr	r2, [pc, #468]	@ (8013c10 <HAL_DMAEx_MultiBufferStart_IT+0x28c>)
 8013a3c:	4293      	cmp	r3, r2
 8013a3e:	d01d      	beq.n	8013a7c <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8013a40:	68fb      	ldr	r3, [r7, #12]
 8013a42:	681b      	ldr	r3, [r3, #0]
 8013a44:	4a73      	ldr	r2, [pc, #460]	@ (8013c14 <HAL_DMAEx_MultiBufferStart_IT+0x290>)
 8013a46:	4293      	cmp	r3, r2
 8013a48:	d018      	beq.n	8013a7c <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8013a4a:	68fb      	ldr	r3, [r7, #12]
 8013a4c:	681b      	ldr	r3, [r3, #0]
 8013a4e:	4a72      	ldr	r2, [pc, #456]	@ (8013c18 <HAL_DMAEx_MultiBufferStart_IT+0x294>)
 8013a50:	4293      	cmp	r3, r2
 8013a52:	d013      	beq.n	8013a7c <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8013a54:	68fb      	ldr	r3, [r7, #12]
 8013a56:	681b      	ldr	r3, [r3, #0]
 8013a58:	4a70      	ldr	r2, [pc, #448]	@ (8013c1c <HAL_DMAEx_MultiBufferStart_IT+0x298>)
 8013a5a:	4293      	cmp	r3, r2
 8013a5c:	d00e      	beq.n	8013a7c <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8013a5e:	68fb      	ldr	r3, [r7, #12]
 8013a60:	681b      	ldr	r3, [r3, #0]
 8013a62:	4a6f      	ldr	r2, [pc, #444]	@ (8013c20 <HAL_DMAEx_MultiBufferStart_IT+0x29c>)
 8013a64:	4293      	cmp	r3, r2
 8013a66:	d009      	beq.n	8013a7c <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8013a68:	68fb      	ldr	r3, [r7, #12]
 8013a6a:	681b      	ldr	r3, [r3, #0]
 8013a6c:	4a6d      	ldr	r2, [pc, #436]	@ (8013c24 <HAL_DMAEx_MultiBufferStart_IT+0x2a0>)
 8013a6e:	4293      	cmp	r3, r2
 8013a70:	d004      	beq.n	8013a7c <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8013a72:	68fb      	ldr	r3, [r7, #12]
 8013a74:	681b      	ldr	r3, [r3, #0]
 8013a76:	4a6c      	ldr	r2, [pc, #432]	@ (8013c28 <HAL_DMAEx_MultiBufferStart_IT+0x2a4>)
 8013a78:	4293      	cmp	r3, r2
 8013a7a:	d101      	bne.n	8013a80 <HAL_DMAEx_MultiBufferStart_IT+0xfc>
 8013a7c:	2301      	movs	r3, #1
 8013a7e:	e000      	b.n	8013a82 <HAL_DMAEx_MultiBufferStart_IT+0xfe>
 8013a80:	2300      	movs	r3, #0
 8013a82:	2b00      	cmp	r3, #0
 8013a84:	d018      	beq.n	8013ab8 <HAL_DMAEx_MultiBufferStart_IT+0x134>
    {
      /* Enable the Double buffer mode */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR |= DMA_SxCR_DBM;
 8013a86:	68fb      	ldr	r3, [r7, #12]
 8013a88:	681b      	ldr	r3, [r3, #0]
 8013a8a:	681a      	ldr	r2, [r3, #0]
 8013a8c:	68fb      	ldr	r3, [r7, #12]
 8013a8e:	681b      	ldr	r3, [r3, #0]
 8013a90:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8013a94:	601a      	str	r2, [r3, #0]

      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M1AR = SecondMemAddress;
 8013a96:	68fb      	ldr	r3, [r7, #12]
 8013a98:	681b      	ldr	r3, [r3, #0]
 8013a9a:	683a      	ldr	r2, [r7, #0]
 8013a9c:	611a      	str	r2, [r3, #16]

      /* Calculate the interrupt clear flag register (IFCR) base address  */
      ifcRegister_Base = (uint32_t *)((uint32_t)(hdma->StreamBaseAddress + 8U));
 8013a9e:	68fb      	ldr	r3, [r7, #12]
 8013aa0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8013aa2:	3308      	adds	r3, #8
 8013aa4:	613b      	str	r3, [r7, #16]

      /* Clear all flags */
      *ifcRegister_Base = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8013aa6:	68fb      	ldr	r3, [r7, #12]
 8013aa8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8013aaa:	f003 031f 	and.w	r3, r3, #31
 8013aae:	223f      	movs	r2, #63	@ 0x3f
 8013ab0:	409a      	lsls	r2, r3
 8013ab2:	693b      	ldr	r3, [r7, #16]
 8013ab4:	601a      	str	r2, [r3, #0]
 8013ab6:	e018      	b.n	8013aea <HAL_DMAEx_MultiBufferStart_IT+0x166>
    }
    else /* BDMA instance(s) */
    {
      /* Enable the Double buffer mode */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR |= (BDMA_CCR_DBM | BDMA_CCR_CIRC);
 8013ab8:	68fb      	ldr	r3, [r7, #12]
 8013aba:	681b      	ldr	r3, [r3, #0]
 8013abc:	6819      	ldr	r1, [r3, #0]
 8013abe:	68fb      	ldr	r3, [r7, #12]
 8013ac0:	681a      	ldr	r2, [r3, #0]
 8013ac2:	f248 0320 	movw	r3, #32800	@ 0x8020
 8013ac6:	430b      	orrs	r3, r1
 8013ac8:	6013      	str	r3, [r2, #0]

      /* Configure DMA Stream destination address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM1AR = SecondMemAddress;
 8013aca:	68fb      	ldr	r3, [r7, #12]
 8013acc:	681b      	ldr	r3, [r3, #0]
 8013ace:	683a      	ldr	r2, [r7, #0]
 8013ad0:	611a      	str	r2, [r3, #16]

      /* Calculate the interrupt clear flag register (IFCR) base address  */
      ifcRegister_Base = (uint32_t *)((uint32_t)(hdma->StreamBaseAddress + 4U));
 8013ad2:	68fb      	ldr	r3, [r7, #12]
 8013ad4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8013ad6:	3304      	adds	r3, #4
 8013ad8:	613b      	str	r3, [r7, #16]

      /* Clear all flags */
      *ifcRegister_Base = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8013ada:	68fb      	ldr	r3, [r7, #12]
 8013adc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8013ade:	f003 031f 	and.w	r3, r3, #31
 8013ae2:	2201      	movs	r2, #1
 8013ae4:	409a      	lsls	r2, r3
 8013ae6:	693b      	ldr	r3, [r7, #16]
 8013ae8:	601a      	str	r2, [r3, #0]
    }

    /* Configure the source, destination address and the data length */
    DMA_MultiBufferSetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8013aea:	6a3b      	ldr	r3, [r7, #32]
 8013aec:	687a      	ldr	r2, [r7, #4]
 8013aee:	68b9      	ldr	r1, [r7, #8]
 8013af0:	68f8      	ldr	r0, [r7, #12]
 8013af2:	f000 faa5 	bl	8014040 <DMA_MultiBufferSetConfig>

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8013af6:	68fb      	ldr	r3, [r7, #12]
 8013af8:	681b      	ldr	r3, [r3, #0]
 8013afa:	4a3c      	ldr	r2, [pc, #240]	@ (8013bec <HAL_DMAEx_MultiBufferStart_IT+0x268>)
 8013afc:	4293      	cmp	r3, r2
 8013afe:	d072      	beq.n	8013be6 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8013b00:	68fb      	ldr	r3, [r7, #12]
 8013b02:	681b      	ldr	r3, [r3, #0]
 8013b04:	4a3a      	ldr	r2, [pc, #232]	@ (8013bf0 <HAL_DMAEx_MultiBufferStart_IT+0x26c>)
 8013b06:	4293      	cmp	r3, r2
 8013b08:	d06d      	beq.n	8013be6 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8013b0a:	68fb      	ldr	r3, [r7, #12]
 8013b0c:	681b      	ldr	r3, [r3, #0]
 8013b0e:	4a39      	ldr	r2, [pc, #228]	@ (8013bf4 <HAL_DMAEx_MultiBufferStart_IT+0x270>)
 8013b10:	4293      	cmp	r3, r2
 8013b12:	d068      	beq.n	8013be6 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8013b14:	68fb      	ldr	r3, [r7, #12]
 8013b16:	681b      	ldr	r3, [r3, #0]
 8013b18:	4a37      	ldr	r2, [pc, #220]	@ (8013bf8 <HAL_DMAEx_MultiBufferStart_IT+0x274>)
 8013b1a:	4293      	cmp	r3, r2
 8013b1c:	d063      	beq.n	8013be6 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8013b1e:	68fb      	ldr	r3, [r7, #12]
 8013b20:	681b      	ldr	r3, [r3, #0]
 8013b22:	4a36      	ldr	r2, [pc, #216]	@ (8013bfc <HAL_DMAEx_MultiBufferStart_IT+0x278>)
 8013b24:	4293      	cmp	r3, r2
 8013b26:	d05e      	beq.n	8013be6 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8013b28:	68fb      	ldr	r3, [r7, #12]
 8013b2a:	681b      	ldr	r3, [r3, #0]
 8013b2c:	4a34      	ldr	r2, [pc, #208]	@ (8013c00 <HAL_DMAEx_MultiBufferStart_IT+0x27c>)
 8013b2e:	4293      	cmp	r3, r2
 8013b30:	d059      	beq.n	8013be6 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8013b32:	68fb      	ldr	r3, [r7, #12]
 8013b34:	681b      	ldr	r3, [r3, #0]
 8013b36:	4a33      	ldr	r2, [pc, #204]	@ (8013c04 <HAL_DMAEx_MultiBufferStart_IT+0x280>)
 8013b38:	4293      	cmp	r3, r2
 8013b3a:	d054      	beq.n	8013be6 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8013b3c:	68fb      	ldr	r3, [r7, #12]
 8013b3e:	681b      	ldr	r3, [r3, #0]
 8013b40:	4a31      	ldr	r2, [pc, #196]	@ (8013c08 <HAL_DMAEx_MultiBufferStart_IT+0x284>)
 8013b42:	4293      	cmp	r3, r2
 8013b44:	d04f      	beq.n	8013be6 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8013b46:	68fb      	ldr	r3, [r7, #12]
 8013b48:	681b      	ldr	r3, [r3, #0]
 8013b4a:	4a30      	ldr	r2, [pc, #192]	@ (8013c0c <HAL_DMAEx_MultiBufferStart_IT+0x288>)
 8013b4c:	4293      	cmp	r3, r2
 8013b4e:	d04a      	beq.n	8013be6 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8013b50:	68fb      	ldr	r3, [r7, #12]
 8013b52:	681b      	ldr	r3, [r3, #0]
 8013b54:	4a2e      	ldr	r2, [pc, #184]	@ (8013c10 <HAL_DMAEx_MultiBufferStart_IT+0x28c>)
 8013b56:	4293      	cmp	r3, r2
 8013b58:	d045      	beq.n	8013be6 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8013b5a:	68fb      	ldr	r3, [r7, #12]
 8013b5c:	681b      	ldr	r3, [r3, #0]
 8013b5e:	4a2d      	ldr	r2, [pc, #180]	@ (8013c14 <HAL_DMAEx_MultiBufferStart_IT+0x290>)
 8013b60:	4293      	cmp	r3, r2
 8013b62:	d040      	beq.n	8013be6 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8013b64:	68fb      	ldr	r3, [r7, #12]
 8013b66:	681b      	ldr	r3, [r3, #0]
 8013b68:	4a2b      	ldr	r2, [pc, #172]	@ (8013c18 <HAL_DMAEx_MultiBufferStart_IT+0x294>)
 8013b6a:	4293      	cmp	r3, r2
 8013b6c:	d03b      	beq.n	8013be6 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8013b6e:	68fb      	ldr	r3, [r7, #12]
 8013b70:	681b      	ldr	r3, [r3, #0]
 8013b72:	4a2a      	ldr	r2, [pc, #168]	@ (8013c1c <HAL_DMAEx_MultiBufferStart_IT+0x298>)
 8013b74:	4293      	cmp	r3, r2
 8013b76:	d036      	beq.n	8013be6 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8013b78:	68fb      	ldr	r3, [r7, #12]
 8013b7a:	681b      	ldr	r3, [r3, #0]
 8013b7c:	4a28      	ldr	r2, [pc, #160]	@ (8013c20 <HAL_DMAEx_MultiBufferStart_IT+0x29c>)
 8013b7e:	4293      	cmp	r3, r2
 8013b80:	d031      	beq.n	8013be6 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8013b82:	68fb      	ldr	r3, [r7, #12]
 8013b84:	681b      	ldr	r3, [r3, #0]
 8013b86:	4a27      	ldr	r2, [pc, #156]	@ (8013c24 <HAL_DMAEx_MultiBufferStart_IT+0x2a0>)
 8013b88:	4293      	cmp	r3, r2
 8013b8a:	d02c      	beq.n	8013be6 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8013b8c:	68fb      	ldr	r3, [r7, #12]
 8013b8e:	681b      	ldr	r3, [r3, #0]
 8013b90:	4a25      	ldr	r2, [pc, #148]	@ (8013c28 <HAL_DMAEx_MultiBufferStart_IT+0x2a4>)
 8013b92:	4293      	cmp	r3, r2
 8013b94:	d027      	beq.n	8013be6 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8013b96:	68fb      	ldr	r3, [r7, #12]
 8013b98:	681b      	ldr	r3, [r3, #0]
 8013b9a:	4a24      	ldr	r2, [pc, #144]	@ (8013c2c <HAL_DMAEx_MultiBufferStart_IT+0x2a8>)
 8013b9c:	4293      	cmp	r3, r2
 8013b9e:	d022      	beq.n	8013be6 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8013ba0:	68fb      	ldr	r3, [r7, #12]
 8013ba2:	681b      	ldr	r3, [r3, #0]
 8013ba4:	4a22      	ldr	r2, [pc, #136]	@ (8013c30 <HAL_DMAEx_MultiBufferStart_IT+0x2ac>)
 8013ba6:	4293      	cmp	r3, r2
 8013ba8:	d01d      	beq.n	8013be6 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8013baa:	68fb      	ldr	r3, [r7, #12]
 8013bac:	681b      	ldr	r3, [r3, #0]
 8013bae:	4a21      	ldr	r2, [pc, #132]	@ (8013c34 <HAL_DMAEx_MultiBufferStart_IT+0x2b0>)
 8013bb0:	4293      	cmp	r3, r2
 8013bb2:	d018      	beq.n	8013be6 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8013bb4:	68fb      	ldr	r3, [r7, #12]
 8013bb6:	681b      	ldr	r3, [r3, #0]
 8013bb8:	4a1f      	ldr	r2, [pc, #124]	@ (8013c38 <HAL_DMAEx_MultiBufferStart_IT+0x2b4>)
 8013bba:	4293      	cmp	r3, r2
 8013bbc:	d013      	beq.n	8013be6 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8013bbe:	68fb      	ldr	r3, [r7, #12]
 8013bc0:	681b      	ldr	r3, [r3, #0]
 8013bc2:	4a1e      	ldr	r2, [pc, #120]	@ (8013c3c <HAL_DMAEx_MultiBufferStart_IT+0x2b8>)
 8013bc4:	4293      	cmp	r3, r2
 8013bc6:	d00e      	beq.n	8013be6 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8013bc8:	68fb      	ldr	r3, [r7, #12]
 8013bca:	681b      	ldr	r3, [r3, #0]
 8013bcc:	4a1c      	ldr	r2, [pc, #112]	@ (8013c40 <HAL_DMAEx_MultiBufferStart_IT+0x2bc>)
 8013bce:	4293      	cmp	r3, r2
 8013bd0:	d009      	beq.n	8013be6 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8013bd2:	68fb      	ldr	r3, [r7, #12]
 8013bd4:	681b      	ldr	r3, [r3, #0]
 8013bd6:	4a1b      	ldr	r2, [pc, #108]	@ (8013c44 <HAL_DMAEx_MultiBufferStart_IT+0x2c0>)
 8013bd8:	4293      	cmp	r3, r2
 8013bda:	d004      	beq.n	8013be6 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8013bdc:	68fb      	ldr	r3, [r7, #12]
 8013bde:	681b      	ldr	r3, [r3, #0]
 8013be0:	4a19      	ldr	r2, [pc, #100]	@ (8013c48 <HAL_DMAEx_MultiBufferStart_IT+0x2c4>)
 8013be2:	4293      	cmp	r3, r2
 8013be4:	d132      	bne.n	8013c4c <HAL_DMAEx_MultiBufferStart_IT+0x2c8>
 8013be6:	2301      	movs	r3, #1
 8013be8:	e031      	b.n	8013c4e <HAL_DMAEx_MultiBufferStart_IT+0x2ca>
 8013bea:	bf00      	nop
 8013bec:	40020010 	.word	0x40020010
 8013bf0:	40020028 	.word	0x40020028
 8013bf4:	40020040 	.word	0x40020040
 8013bf8:	40020058 	.word	0x40020058
 8013bfc:	40020070 	.word	0x40020070
 8013c00:	40020088 	.word	0x40020088
 8013c04:	400200a0 	.word	0x400200a0
 8013c08:	400200b8 	.word	0x400200b8
 8013c0c:	40020410 	.word	0x40020410
 8013c10:	40020428 	.word	0x40020428
 8013c14:	40020440 	.word	0x40020440
 8013c18:	40020458 	.word	0x40020458
 8013c1c:	40020470 	.word	0x40020470
 8013c20:	40020488 	.word	0x40020488
 8013c24:	400204a0 	.word	0x400204a0
 8013c28:	400204b8 	.word	0x400204b8
 8013c2c:	58025408 	.word	0x58025408
 8013c30:	5802541c 	.word	0x5802541c
 8013c34:	58025430 	.word	0x58025430
 8013c38:	58025444 	.word	0x58025444
 8013c3c:	58025458 	.word	0x58025458
 8013c40:	5802546c 	.word	0x5802546c
 8013c44:	58025480 	.word	0x58025480
 8013c48:	58025494 	.word	0x58025494
 8013c4c:	2300      	movs	r3, #0
 8013c4e:	2b00      	cmp	r3, #0
 8013c50:	d00d      	beq.n	8013c6e <HAL_DMAEx_MultiBufferStart_IT+0x2ea>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8013c52:	68fb      	ldr	r3, [r7, #12]
 8013c54:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8013c56:	68fa      	ldr	r2, [r7, #12]
 8013c58:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8013c5a:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8013c5c:	68fb      	ldr	r3, [r7, #12]
 8013c5e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013c60:	2b00      	cmp	r3, #0
 8013c62:	d004      	beq.n	8013c6e <HAL_DMAEx_MultiBufferStart_IT+0x2ea>
      {
        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8013c64:	68fb      	ldr	r3, [r7, #12]
 8013c66:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013c68:	68fa      	ldr	r2, [r7, #12]
 8013c6a:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8013c6c:	605a      	str	r2, [r3, #4]
      }
    }

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8013c6e:	68fb      	ldr	r3, [r7, #12]
 8013c70:	681b      	ldr	r3, [r3, #0]
 8013c72:	4a3b      	ldr	r2, [pc, #236]	@ (8013d60 <HAL_DMAEx_MultiBufferStart_IT+0x3dc>)
 8013c74:	4293      	cmp	r3, r2
 8013c76:	d04a      	beq.n	8013d0e <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8013c78:	68fb      	ldr	r3, [r7, #12]
 8013c7a:	681b      	ldr	r3, [r3, #0]
 8013c7c:	4a39      	ldr	r2, [pc, #228]	@ (8013d64 <HAL_DMAEx_MultiBufferStart_IT+0x3e0>)
 8013c7e:	4293      	cmp	r3, r2
 8013c80:	d045      	beq.n	8013d0e <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8013c82:	68fb      	ldr	r3, [r7, #12]
 8013c84:	681b      	ldr	r3, [r3, #0]
 8013c86:	4a38      	ldr	r2, [pc, #224]	@ (8013d68 <HAL_DMAEx_MultiBufferStart_IT+0x3e4>)
 8013c88:	4293      	cmp	r3, r2
 8013c8a:	d040      	beq.n	8013d0e <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8013c8c:	68fb      	ldr	r3, [r7, #12]
 8013c8e:	681b      	ldr	r3, [r3, #0]
 8013c90:	4a36      	ldr	r2, [pc, #216]	@ (8013d6c <HAL_DMAEx_MultiBufferStart_IT+0x3e8>)
 8013c92:	4293      	cmp	r3, r2
 8013c94:	d03b      	beq.n	8013d0e <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8013c96:	68fb      	ldr	r3, [r7, #12]
 8013c98:	681b      	ldr	r3, [r3, #0]
 8013c9a:	4a35      	ldr	r2, [pc, #212]	@ (8013d70 <HAL_DMAEx_MultiBufferStart_IT+0x3ec>)
 8013c9c:	4293      	cmp	r3, r2
 8013c9e:	d036      	beq.n	8013d0e <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8013ca0:	68fb      	ldr	r3, [r7, #12]
 8013ca2:	681b      	ldr	r3, [r3, #0]
 8013ca4:	4a33      	ldr	r2, [pc, #204]	@ (8013d74 <HAL_DMAEx_MultiBufferStart_IT+0x3f0>)
 8013ca6:	4293      	cmp	r3, r2
 8013ca8:	d031      	beq.n	8013d0e <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8013caa:	68fb      	ldr	r3, [r7, #12]
 8013cac:	681b      	ldr	r3, [r3, #0]
 8013cae:	4a32      	ldr	r2, [pc, #200]	@ (8013d78 <HAL_DMAEx_MultiBufferStart_IT+0x3f4>)
 8013cb0:	4293      	cmp	r3, r2
 8013cb2:	d02c      	beq.n	8013d0e <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8013cb4:	68fb      	ldr	r3, [r7, #12]
 8013cb6:	681b      	ldr	r3, [r3, #0]
 8013cb8:	4a30      	ldr	r2, [pc, #192]	@ (8013d7c <HAL_DMAEx_MultiBufferStart_IT+0x3f8>)
 8013cba:	4293      	cmp	r3, r2
 8013cbc:	d027      	beq.n	8013d0e <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8013cbe:	68fb      	ldr	r3, [r7, #12]
 8013cc0:	681b      	ldr	r3, [r3, #0]
 8013cc2:	4a2f      	ldr	r2, [pc, #188]	@ (8013d80 <HAL_DMAEx_MultiBufferStart_IT+0x3fc>)
 8013cc4:	4293      	cmp	r3, r2
 8013cc6:	d022      	beq.n	8013d0e <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8013cc8:	68fb      	ldr	r3, [r7, #12]
 8013cca:	681b      	ldr	r3, [r3, #0]
 8013ccc:	4a2d      	ldr	r2, [pc, #180]	@ (8013d84 <HAL_DMAEx_MultiBufferStart_IT+0x400>)
 8013cce:	4293      	cmp	r3, r2
 8013cd0:	d01d      	beq.n	8013d0e <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8013cd2:	68fb      	ldr	r3, [r7, #12]
 8013cd4:	681b      	ldr	r3, [r3, #0]
 8013cd6:	4a2c      	ldr	r2, [pc, #176]	@ (8013d88 <HAL_DMAEx_MultiBufferStart_IT+0x404>)
 8013cd8:	4293      	cmp	r3, r2
 8013cda:	d018      	beq.n	8013d0e <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8013cdc:	68fb      	ldr	r3, [r7, #12]
 8013cde:	681b      	ldr	r3, [r3, #0]
 8013ce0:	4a2a      	ldr	r2, [pc, #168]	@ (8013d8c <HAL_DMAEx_MultiBufferStart_IT+0x408>)
 8013ce2:	4293      	cmp	r3, r2
 8013ce4:	d013      	beq.n	8013d0e <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8013ce6:	68fb      	ldr	r3, [r7, #12]
 8013ce8:	681b      	ldr	r3, [r3, #0]
 8013cea:	4a29      	ldr	r2, [pc, #164]	@ (8013d90 <HAL_DMAEx_MultiBufferStart_IT+0x40c>)
 8013cec:	4293      	cmp	r3, r2
 8013cee:	d00e      	beq.n	8013d0e <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8013cf0:	68fb      	ldr	r3, [r7, #12]
 8013cf2:	681b      	ldr	r3, [r3, #0]
 8013cf4:	4a27      	ldr	r2, [pc, #156]	@ (8013d94 <HAL_DMAEx_MultiBufferStart_IT+0x410>)
 8013cf6:	4293      	cmp	r3, r2
 8013cf8:	d009      	beq.n	8013d0e <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8013cfa:	68fb      	ldr	r3, [r7, #12]
 8013cfc:	681b      	ldr	r3, [r3, #0]
 8013cfe:	4a26      	ldr	r2, [pc, #152]	@ (8013d98 <HAL_DMAEx_MultiBufferStart_IT+0x414>)
 8013d00:	4293      	cmp	r3, r2
 8013d02:	d004      	beq.n	8013d0e <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8013d04:	68fb      	ldr	r3, [r7, #12]
 8013d06:	681b      	ldr	r3, [r3, #0]
 8013d08:	4a24      	ldr	r2, [pc, #144]	@ (8013d9c <HAL_DMAEx_MultiBufferStart_IT+0x418>)
 8013d0a:	4293      	cmp	r3, r2
 8013d0c:	d101      	bne.n	8013d12 <HAL_DMAEx_MultiBufferStart_IT+0x38e>
 8013d0e:	2301      	movs	r3, #1
 8013d10:	e000      	b.n	8013d14 <HAL_DMAEx_MultiBufferStart_IT+0x390>
 8013d12:	2300      	movs	r3, #0
 8013d14:	2b00      	cmp	r3, #0
 8013d16:	d043      	beq.n	8013da0 <HAL_DMAEx_MultiBufferStart_IT+0x41c>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8013d18:	68fb      	ldr	r3, [r7, #12]
 8013d1a:	681b      	ldr	r3, [r3, #0]
 8013d1c:	681b      	ldr	r3, [r3, #0]
 8013d1e:	f023 021e 	bic.w	r2, r3, #30
 8013d22:	68fb      	ldr	r3, [r7, #12]
 8013d24:	681b      	ldr	r3, [r3, #0]
 8013d26:	f042 0216 	orr.w	r2, r2, #22
 8013d2a:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR |= DMA_IT_FE;
 8013d2c:	68fb      	ldr	r3, [r7, #12]
 8013d2e:	681b      	ldr	r3, [r3, #0]
 8013d30:	695a      	ldr	r2, [r3, #20]
 8013d32:	68fb      	ldr	r3, [r7, #12]
 8013d34:	681b      	ldr	r3, [r3, #0]
 8013d36:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8013d3a:	615a      	str	r2, [r3, #20]

      if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8013d3c:	68fb      	ldr	r3, [r7, #12]
 8013d3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013d40:	2b00      	cmp	r3, #0
 8013d42:	d103      	bne.n	8013d4c <HAL_DMAEx_MultiBufferStart_IT+0x3c8>
 8013d44:	68fb      	ldr	r3, [r7, #12]
 8013d46:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8013d48:	2b00      	cmp	r3, #0
 8013d4a:	d043      	beq.n	8013dd4 <HAL_DMAEx_MultiBufferStart_IT+0x450>
      {
        /*Enable Half Transfer IT if corresponding Callback is set*/
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8013d4c:	68fb      	ldr	r3, [r7, #12]
 8013d4e:	681b      	ldr	r3, [r3, #0]
 8013d50:	681a      	ldr	r2, [r3, #0]
 8013d52:	68fb      	ldr	r3, [r7, #12]
 8013d54:	681b      	ldr	r3, [r3, #0]
 8013d56:	f042 0208 	orr.w	r2, r2, #8
 8013d5a:	601a      	str	r2, [r3, #0]
 8013d5c:	e03a      	b.n	8013dd4 <HAL_DMAEx_MultiBufferStart_IT+0x450>
 8013d5e:	bf00      	nop
 8013d60:	40020010 	.word	0x40020010
 8013d64:	40020028 	.word	0x40020028
 8013d68:	40020040 	.word	0x40020040
 8013d6c:	40020058 	.word	0x40020058
 8013d70:	40020070 	.word	0x40020070
 8013d74:	40020088 	.word	0x40020088
 8013d78:	400200a0 	.word	0x400200a0
 8013d7c:	400200b8 	.word	0x400200b8
 8013d80:	40020410 	.word	0x40020410
 8013d84:	40020428 	.word	0x40020428
 8013d88:	40020440 	.word	0x40020440
 8013d8c:	40020458 	.word	0x40020458
 8013d90:	40020470 	.word	0x40020470
 8013d94:	40020488 	.word	0x40020488
 8013d98:	400204a0 	.word	0x400204a0
 8013d9c:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA instance(s) */
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8013da0:	68fb      	ldr	r3, [r7, #12]
 8013da2:	681b      	ldr	r3, [r3, #0]
 8013da4:	681b      	ldr	r3, [r3, #0]
 8013da6:	f023 020e 	bic.w	r2, r3, #14
 8013daa:	68fb      	ldr	r3, [r7, #12]
 8013dac:	681b      	ldr	r3, [r3, #0]
 8013dae:	f042 020a 	orr.w	r2, r2, #10
 8013db2:	601a      	str	r2, [r3, #0]

      if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8013db4:	68fb      	ldr	r3, [r7, #12]
 8013db6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013db8:	2b00      	cmp	r3, #0
 8013dba:	d103      	bne.n	8013dc4 <HAL_DMAEx_MultiBufferStart_IT+0x440>
 8013dbc:	68fb      	ldr	r3, [r7, #12]
 8013dbe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8013dc0:	2b00      	cmp	r3, #0
 8013dc2:	d007      	beq.n	8013dd4 <HAL_DMAEx_MultiBufferStart_IT+0x450>
      {
        /*Enable Half Transfer IT if corresponding Callback is set*/
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8013dc4:	68fb      	ldr	r3, [r7, #12]
 8013dc6:	681b      	ldr	r3, [r3, #0]
 8013dc8:	681a      	ldr	r2, [r3, #0]
 8013dca:	68fb      	ldr	r3, [r7, #12]
 8013dcc:	681b      	ldr	r3, [r3, #0]
 8013dce:	f042 0204 	orr.w	r2, r2, #4
 8013dd2:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8013dd4:	68fb      	ldr	r3, [r7, #12]
 8013dd6:	681b      	ldr	r3, [r3, #0]
 8013dd8:	4a81      	ldr	r2, [pc, #516]	@ (8013fe0 <HAL_DMAEx_MultiBufferStart_IT+0x65c>)
 8013dda:	4293      	cmp	r3, r2
 8013ddc:	d072      	beq.n	8013ec4 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8013dde:	68fb      	ldr	r3, [r7, #12]
 8013de0:	681b      	ldr	r3, [r3, #0]
 8013de2:	4a80      	ldr	r2, [pc, #512]	@ (8013fe4 <HAL_DMAEx_MultiBufferStart_IT+0x660>)
 8013de4:	4293      	cmp	r3, r2
 8013de6:	d06d      	beq.n	8013ec4 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8013de8:	68fb      	ldr	r3, [r7, #12]
 8013dea:	681b      	ldr	r3, [r3, #0]
 8013dec:	4a7e      	ldr	r2, [pc, #504]	@ (8013fe8 <HAL_DMAEx_MultiBufferStart_IT+0x664>)
 8013dee:	4293      	cmp	r3, r2
 8013df0:	d068      	beq.n	8013ec4 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8013df2:	68fb      	ldr	r3, [r7, #12]
 8013df4:	681b      	ldr	r3, [r3, #0]
 8013df6:	4a7d      	ldr	r2, [pc, #500]	@ (8013fec <HAL_DMAEx_MultiBufferStart_IT+0x668>)
 8013df8:	4293      	cmp	r3, r2
 8013dfa:	d063      	beq.n	8013ec4 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8013dfc:	68fb      	ldr	r3, [r7, #12]
 8013dfe:	681b      	ldr	r3, [r3, #0]
 8013e00:	4a7b      	ldr	r2, [pc, #492]	@ (8013ff0 <HAL_DMAEx_MultiBufferStart_IT+0x66c>)
 8013e02:	4293      	cmp	r3, r2
 8013e04:	d05e      	beq.n	8013ec4 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8013e06:	68fb      	ldr	r3, [r7, #12]
 8013e08:	681b      	ldr	r3, [r3, #0]
 8013e0a:	4a7a      	ldr	r2, [pc, #488]	@ (8013ff4 <HAL_DMAEx_MultiBufferStart_IT+0x670>)
 8013e0c:	4293      	cmp	r3, r2
 8013e0e:	d059      	beq.n	8013ec4 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8013e10:	68fb      	ldr	r3, [r7, #12]
 8013e12:	681b      	ldr	r3, [r3, #0]
 8013e14:	4a78      	ldr	r2, [pc, #480]	@ (8013ff8 <HAL_DMAEx_MultiBufferStart_IT+0x674>)
 8013e16:	4293      	cmp	r3, r2
 8013e18:	d054      	beq.n	8013ec4 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8013e1a:	68fb      	ldr	r3, [r7, #12]
 8013e1c:	681b      	ldr	r3, [r3, #0]
 8013e1e:	4a77      	ldr	r2, [pc, #476]	@ (8013ffc <HAL_DMAEx_MultiBufferStart_IT+0x678>)
 8013e20:	4293      	cmp	r3, r2
 8013e22:	d04f      	beq.n	8013ec4 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8013e24:	68fb      	ldr	r3, [r7, #12]
 8013e26:	681b      	ldr	r3, [r3, #0]
 8013e28:	4a75      	ldr	r2, [pc, #468]	@ (8014000 <HAL_DMAEx_MultiBufferStart_IT+0x67c>)
 8013e2a:	4293      	cmp	r3, r2
 8013e2c:	d04a      	beq.n	8013ec4 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8013e2e:	68fb      	ldr	r3, [r7, #12]
 8013e30:	681b      	ldr	r3, [r3, #0]
 8013e32:	4a74      	ldr	r2, [pc, #464]	@ (8014004 <HAL_DMAEx_MultiBufferStart_IT+0x680>)
 8013e34:	4293      	cmp	r3, r2
 8013e36:	d045      	beq.n	8013ec4 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8013e38:	68fb      	ldr	r3, [r7, #12]
 8013e3a:	681b      	ldr	r3, [r3, #0]
 8013e3c:	4a72      	ldr	r2, [pc, #456]	@ (8014008 <HAL_DMAEx_MultiBufferStart_IT+0x684>)
 8013e3e:	4293      	cmp	r3, r2
 8013e40:	d040      	beq.n	8013ec4 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8013e42:	68fb      	ldr	r3, [r7, #12]
 8013e44:	681b      	ldr	r3, [r3, #0]
 8013e46:	4a71      	ldr	r2, [pc, #452]	@ (801400c <HAL_DMAEx_MultiBufferStart_IT+0x688>)
 8013e48:	4293      	cmp	r3, r2
 8013e4a:	d03b      	beq.n	8013ec4 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8013e4c:	68fb      	ldr	r3, [r7, #12]
 8013e4e:	681b      	ldr	r3, [r3, #0]
 8013e50:	4a6f      	ldr	r2, [pc, #444]	@ (8014010 <HAL_DMAEx_MultiBufferStart_IT+0x68c>)
 8013e52:	4293      	cmp	r3, r2
 8013e54:	d036      	beq.n	8013ec4 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8013e56:	68fb      	ldr	r3, [r7, #12]
 8013e58:	681b      	ldr	r3, [r3, #0]
 8013e5a:	4a6e      	ldr	r2, [pc, #440]	@ (8014014 <HAL_DMAEx_MultiBufferStart_IT+0x690>)
 8013e5c:	4293      	cmp	r3, r2
 8013e5e:	d031      	beq.n	8013ec4 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8013e60:	68fb      	ldr	r3, [r7, #12]
 8013e62:	681b      	ldr	r3, [r3, #0]
 8013e64:	4a6c      	ldr	r2, [pc, #432]	@ (8014018 <HAL_DMAEx_MultiBufferStart_IT+0x694>)
 8013e66:	4293      	cmp	r3, r2
 8013e68:	d02c      	beq.n	8013ec4 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8013e6a:	68fb      	ldr	r3, [r7, #12]
 8013e6c:	681b      	ldr	r3, [r3, #0]
 8013e6e:	4a6b      	ldr	r2, [pc, #428]	@ (801401c <HAL_DMAEx_MultiBufferStart_IT+0x698>)
 8013e70:	4293      	cmp	r3, r2
 8013e72:	d027      	beq.n	8013ec4 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8013e74:	68fb      	ldr	r3, [r7, #12]
 8013e76:	681b      	ldr	r3, [r3, #0]
 8013e78:	4a69      	ldr	r2, [pc, #420]	@ (8014020 <HAL_DMAEx_MultiBufferStart_IT+0x69c>)
 8013e7a:	4293      	cmp	r3, r2
 8013e7c:	d022      	beq.n	8013ec4 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8013e7e:	68fb      	ldr	r3, [r7, #12]
 8013e80:	681b      	ldr	r3, [r3, #0]
 8013e82:	4a68      	ldr	r2, [pc, #416]	@ (8014024 <HAL_DMAEx_MultiBufferStart_IT+0x6a0>)
 8013e84:	4293      	cmp	r3, r2
 8013e86:	d01d      	beq.n	8013ec4 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8013e88:	68fb      	ldr	r3, [r7, #12]
 8013e8a:	681b      	ldr	r3, [r3, #0]
 8013e8c:	4a66      	ldr	r2, [pc, #408]	@ (8014028 <HAL_DMAEx_MultiBufferStart_IT+0x6a4>)
 8013e8e:	4293      	cmp	r3, r2
 8013e90:	d018      	beq.n	8013ec4 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8013e92:	68fb      	ldr	r3, [r7, #12]
 8013e94:	681b      	ldr	r3, [r3, #0]
 8013e96:	4a65      	ldr	r2, [pc, #404]	@ (801402c <HAL_DMAEx_MultiBufferStart_IT+0x6a8>)
 8013e98:	4293      	cmp	r3, r2
 8013e9a:	d013      	beq.n	8013ec4 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8013e9c:	68fb      	ldr	r3, [r7, #12]
 8013e9e:	681b      	ldr	r3, [r3, #0]
 8013ea0:	4a63      	ldr	r2, [pc, #396]	@ (8014030 <HAL_DMAEx_MultiBufferStart_IT+0x6ac>)
 8013ea2:	4293      	cmp	r3, r2
 8013ea4:	d00e      	beq.n	8013ec4 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8013ea6:	68fb      	ldr	r3, [r7, #12]
 8013ea8:	681b      	ldr	r3, [r3, #0]
 8013eaa:	4a62      	ldr	r2, [pc, #392]	@ (8014034 <HAL_DMAEx_MultiBufferStart_IT+0x6b0>)
 8013eac:	4293      	cmp	r3, r2
 8013eae:	d009      	beq.n	8013ec4 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8013eb0:	68fb      	ldr	r3, [r7, #12]
 8013eb2:	681b      	ldr	r3, [r3, #0]
 8013eb4:	4a60      	ldr	r2, [pc, #384]	@ (8014038 <HAL_DMAEx_MultiBufferStart_IT+0x6b4>)
 8013eb6:	4293      	cmp	r3, r2
 8013eb8:	d004      	beq.n	8013ec4 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8013eba:	68fb      	ldr	r3, [r7, #12]
 8013ebc:	681b      	ldr	r3, [r3, #0]
 8013ebe:	4a5f      	ldr	r2, [pc, #380]	@ (801403c <HAL_DMAEx_MultiBufferStart_IT+0x6b8>)
 8013ec0:	4293      	cmp	r3, r2
 8013ec2:	d101      	bne.n	8013ec8 <HAL_DMAEx_MultiBufferStart_IT+0x544>
 8013ec4:	2301      	movs	r3, #1
 8013ec6:	e000      	b.n	8013eca <HAL_DMAEx_MultiBufferStart_IT+0x546>
 8013ec8:	2300      	movs	r3, #0
 8013eca:	2b00      	cmp	r3, #0
 8013ecc:	d01a      	beq.n	8013f04 <HAL_DMAEx_MultiBufferStart_IT+0x580>
    {
      /* Check if DMAMUX Synchronization is enabled*/
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8013ece:	68fb      	ldr	r3, [r7, #12]
 8013ed0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8013ed2:	681b      	ldr	r3, [r3, #0]
 8013ed4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8013ed8:	2b00      	cmp	r3, #0
 8013eda:	d007      	beq.n	8013eec <HAL_DMAEx_MultiBufferStart_IT+0x568>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8013edc:	68fb      	ldr	r3, [r7, #12]
 8013ede:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8013ee0:	681a      	ldr	r2, [r3, #0]
 8013ee2:	68fb      	ldr	r3, [r7, #12]
 8013ee4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8013ee6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8013eea:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8013eec:	68fb      	ldr	r3, [r7, #12]
 8013eee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013ef0:	2b00      	cmp	r3, #0
 8013ef2:	d007      	beq.n	8013f04 <HAL_DMAEx_MultiBufferStart_IT+0x580>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT*/
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8013ef4:	68fb      	ldr	r3, [r7, #12]
 8013ef6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013ef8:	681a      	ldr	r2, [r3, #0]
 8013efa:	68fb      	ldr	r3, [r7, #12]
 8013efc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013efe:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8013f02:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the peripheral */
    __HAL_DMA_ENABLE(hdma);
 8013f04:	68fb      	ldr	r3, [r7, #12]
 8013f06:	681b      	ldr	r3, [r3, #0]
 8013f08:	4a35      	ldr	r2, [pc, #212]	@ (8013fe0 <HAL_DMAEx_MultiBufferStart_IT+0x65c>)
 8013f0a:	4293      	cmp	r3, r2
 8013f0c:	d04a      	beq.n	8013fa4 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8013f0e:	68fb      	ldr	r3, [r7, #12]
 8013f10:	681b      	ldr	r3, [r3, #0]
 8013f12:	4a34      	ldr	r2, [pc, #208]	@ (8013fe4 <HAL_DMAEx_MultiBufferStart_IT+0x660>)
 8013f14:	4293      	cmp	r3, r2
 8013f16:	d045      	beq.n	8013fa4 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8013f18:	68fb      	ldr	r3, [r7, #12]
 8013f1a:	681b      	ldr	r3, [r3, #0]
 8013f1c:	4a32      	ldr	r2, [pc, #200]	@ (8013fe8 <HAL_DMAEx_MultiBufferStart_IT+0x664>)
 8013f1e:	4293      	cmp	r3, r2
 8013f20:	d040      	beq.n	8013fa4 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8013f22:	68fb      	ldr	r3, [r7, #12]
 8013f24:	681b      	ldr	r3, [r3, #0]
 8013f26:	4a31      	ldr	r2, [pc, #196]	@ (8013fec <HAL_DMAEx_MultiBufferStart_IT+0x668>)
 8013f28:	4293      	cmp	r3, r2
 8013f2a:	d03b      	beq.n	8013fa4 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8013f2c:	68fb      	ldr	r3, [r7, #12]
 8013f2e:	681b      	ldr	r3, [r3, #0]
 8013f30:	4a2f      	ldr	r2, [pc, #188]	@ (8013ff0 <HAL_DMAEx_MultiBufferStart_IT+0x66c>)
 8013f32:	4293      	cmp	r3, r2
 8013f34:	d036      	beq.n	8013fa4 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8013f36:	68fb      	ldr	r3, [r7, #12]
 8013f38:	681b      	ldr	r3, [r3, #0]
 8013f3a:	4a2e      	ldr	r2, [pc, #184]	@ (8013ff4 <HAL_DMAEx_MultiBufferStart_IT+0x670>)
 8013f3c:	4293      	cmp	r3, r2
 8013f3e:	d031      	beq.n	8013fa4 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8013f40:	68fb      	ldr	r3, [r7, #12]
 8013f42:	681b      	ldr	r3, [r3, #0]
 8013f44:	4a2c      	ldr	r2, [pc, #176]	@ (8013ff8 <HAL_DMAEx_MultiBufferStart_IT+0x674>)
 8013f46:	4293      	cmp	r3, r2
 8013f48:	d02c      	beq.n	8013fa4 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8013f4a:	68fb      	ldr	r3, [r7, #12]
 8013f4c:	681b      	ldr	r3, [r3, #0]
 8013f4e:	4a2b      	ldr	r2, [pc, #172]	@ (8013ffc <HAL_DMAEx_MultiBufferStart_IT+0x678>)
 8013f50:	4293      	cmp	r3, r2
 8013f52:	d027      	beq.n	8013fa4 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8013f54:	68fb      	ldr	r3, [r7, #12]
 8013f56:	681b      	ldr	r3, [r3, #0]
 8013f58:	4a29      	ldr	r2, [pc, #164]	@ (8014000 <HAL_DMAEx_MultiBufferStart_IT+0x67c>)
 8013f5a:	4293      	cmp	r3, r2
 8013f5c:	d022      	beq.n	8013fa4 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8013f5e:	68fb      	ldr	r3, [r7, #12]
 8013f60:	681b      	ldr	r3, [r3, #0]
 8013f62:	4a28      	ldr	r2, [pc, #160]	@ (8014004 <HAL_DMAEx_MultiBufferStart_IT+0x680>)
 8013f64:	4293      	cmp	r3, r2
 8013f66:	d01d      	beq.n	8013fa4 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8013f68:	68fb      	ldr	r3, [r7, #12]
 8013f6a:	681b      	ldr	r3, [r3, #0]
 8013f6c:	4a26      	ldr	r2, [pc, #152]	@ (8014008 <HAL_DMAEx_MultiBufferStart_IT+0x684>)
 8013f6e:	4293      	cmp	r3, r2
 8013f70:	d018      	beq.n	8013fa4 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8013f72:	68fb      	ldr	r3, [r7, #12]
 8013f74:	681b      	ldr	r3, [r3, #0]
 8013f76:	4a25      	ldr	r2, [pc, #148]	@ (801400c <HAL_DMAEx_MultiBufferStart_IT+0x688>)
 8013f78:	4293      	cmp	r3, r2
 8013f7a:	d013      	beq.n	8013fa4 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8013f7c:	68fb      	ldr	r3, [r7, #12]
 8013f7e:	681b      	ldr	r3, [r3, #0]
 8013f80:	4a23      	ldr	r2, [pc, #140]	@ (8014010 <HAL_DMAEx_MultiBufferStart_IT+0x68c>)
 8013f82:	4293      	cmp	r3, r2
 8013f84:	d00e      	beq.n	8013fa4 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8013f86:	68fb      	ldr	r3, [r7, #12]
 8013f88:	681b      	ldr	r3, [r3, #0]
 8013f8a:	4a22      	ldr	r2, [pc, #136]	@ (8014014 <HAL_DMAEx_MultiBufferStart_IT+0x690>)
 8013f8c:	4293      	cmp	r3, r2
 8013f8e:	d009      	beq.n	8013fa4 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8013f90:	68fb      	ldr	r3, [r7, #12]
 8013f92:	681b      	ldr	r3, [r3, #0]
 8013f94:	4a20      	ldr	r2, [pc, #128]	@ (8014018 <HAL_DMAEx_MultiBufferStart_IT+0x694>)
 8013f96:	4293      	cmp	r3, r2
 8013f98:	d004      	beq.n	8013fa4 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8013f9a:	68fb      	ldr	r3, [r7, #12]
 8013f9c:	681b      	ldr	r3, [r3, #0]
 8013f9e:	4a1f      	ldr	r2, [pc, #124]	@ (801401c <HAL_DMAEx_MultiBufferStart_IT+0x698>)
 8013fa0:	4293      	cmp	r3, r2
 8013fa2:	d108      	bne.n	8013fb6 <HAL_DMAEx_MultiBufferStart_IT+0x632>
 8013fa4:	68fb      	ldr	r3, [r7, #12]
 8013fa6:	681b      	ldr	r3, [r3, #0]
 8013fa8:	681a      	ldr	r2, [r3, #0]
 8013faa:	68fb      	ldr	r3, [r7, #12]
 8013fac:	681b      	ldr	r3, [r3, #0]
 8013fae:	f042 0201 	orr.w	r2, r2, #1
 8013fb2:	601a      	str	r2, [r3, #0]
 8013fb4:	e00e      	b.n	8013fd4 <HAL_DMAEx_MultiBufferStart_IT+0x650>
 8013fb6:	68fb      	ldr	r3, [r7, #12]
 8013fb8:	681b      	ldr	r3, [r3, #0]
 8013fba:	681a      	ldr	r2, [r3, #0]
 8013fbc:	68fb      	ldr	r3, [r7, #12]
 8013fbe:	681b      	ldr	r3, [r3, #0]
 8013fc0:	f042 0201 	orr.w	r2, r2, #1
 8013fc4:	601a      	str	r2, [r3, #0]
 8013fc6:	e005      	b.n	8013fd4 <HAL_DMAEx_MultiBufferStart_IT+0x650>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8013fc8:	68fb      	ldr	r3, [r7, #12]
 8013fca:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8013fce:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Return error status */
    status = HAL_ERROR;
 8013fd0:	2301      	movs	r3, #1
 8013fd2:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8013fd4:	7dfb      	ldrb	r3, [r7, #23]
}
 8013fd6:	4618      	mov	r0, r3
 8013fd8:	3718      	adds	r7, #24
 8013fda:	46bd      	mov	sp, r7
 8013fdc:	bd80      	pop	{r7, pc}
 8013fde:	bf00      	nop
 8013fe0:	40020010 	.word	0x40020010
 8013fe4:	40020028 	.word	0x40020028
 8013fe8:	40020040 	.word	0x40020040
 8013fec:	40020058 	.word	0x40020058
 8013ff0:	40020070 	.word	0x40020070
 8013ff4:	40020088 	.word	0x40020088
 8013ff8:	400200a0 	.word	0x400200a0
 8013ffc:	400200b8 	.word	0x400200b8
 8014000:	40020410 	.word	0x40020410
 8014004:	40020428 	.word	0x40020428
 8014008:	40020440 	.word	0x40020440
 801400c:	40020458 	.word	0x40020458
 8014010:	40020470 	.word	0x40020470
 8014014:	40020488 	.word	0x40020488
 8014018:	400204a0 	.word	0x400204a0
 801401c:	400204b8 	.word	0x400204b8
 8014020:	58025408 	.word	0x58025408
 8014024:	5802541c 	.word	0x5802541c
 8014028:	58025430 	.word	0x58025430
 801402c:	58025444 	.word	0x58025444
 8014030:	58025458 	.word	0x58025458
 8014034:	5802546c 	.word	0x5802546c
 8014038:	58025480 	.word	0x58025480
 801403c:	58025494 	.word	0x58025494

08014040 <DMA_MultiBufferSetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_MultiBufferSetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8014040:	b480      	push	{r7}
 8014042:	b085      	sub	sp, #20
 8014044:	af00      	add	r7, sp, #0
 8014046:	60f8      	str	r0, [r7, #12]
 8014048:	60b9      	str	r1, [r7, #8]
 801404a:	607a      	str	r2, [r7, #4]
 801404c:	603b      	str	r3, [r7, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 801404e:	68fb      	ldr	r3, [r7, #12]
 8014050:	681b      	ldr	r3, [r3, #0]
 8014052:	4a46      	ldr	r2, [pc, #280]	@ (801416c <DMA_MultiBufferSetConfig+0x12c>)
 8014054:	4293      	cmp	r3, r2
 8014056:	d04a      	beq.n	80140ee <DMA_MultiBufferSetConfig+0xae>
 8014058:	68fb      	ldr	r3, [r7, #12]
 801405a:	681b      	ldr	r3, [r3, #0]
 801405c:	4a44      	ldr	r2, [pc, #272]	@ (8014170 <DMA_MultiBufferSetConfig+0x130>)
 801405e:	4293      	cmp	r3, r2
 8014060:	d045      	beq.n	80140ee <DMA_MultiBufferSetConfig+0xae>
 8014062:	68fb      	ldr	r3, [r7, #12]
 8014064:	681b      	ldr	r3, [r3, #0]
 8014066:	4a43      	ldr	r2, [pc, #268]	@ (8014174 <DMA_MultiBufferSetConfig+0x134>)
 8014068:	4293      	cmp	r3, r2
 801406a:	d040      	beq.n	80140ee <DMA_MultiBufferSetConfig+0xae>
 801406c:	68fb      	ldr	r3, [r7, #12]
 801406e:	681b      	ldr	r3, [r3, #0]
 8014070:	4a41      	ldr	r2, [pc, #260]	@ (8014178 <DMA_MultiBufferSetConfig+0x138>)
 8014072:	4293      	cmp	r3, r2
 8014074:	d03b      	beq.n	80140ee <DMA_MultiBufferSetConfig+0xae>
 8014076:	68fb      	ldr	r3, [r7, #12]
 8014078:	681b      	ldr	r3, [r3, #0]
 801407a:	4a40      	ldr	r2, [pc, #256]	@ (801417c <DMA_MultiBufferSetConfig+0x13c>)
 801407c:	4293      	cmp	r3, r2
 801407e:	d036      	beq.n	80140ee <DMA_MultiBufferSetConfig+0xae>
 8014080:	68fb      	ldr	r3, [r7, #12]
 8014082:	681b      	ldr	r3, [r3, #0]
 8014084:	4a3e      	ldr	r2, [pc, #248]	@ (8014180 <DMA_MultiBufferSetConfig+0x140>)
 8014086:	4293      	cmp	r3, r2
 8014088:	d031      	beq.n	80140ee <DMA_MultiBufferSetConfig+0xae>
 801408a:	68fb      	ldr	r3, [r7, #12]
 801408c:	681b      	ldr	r3, [r3, #0]
 801408e:	4a3d      	ldr	r2, [pc, #244]	@ (8014184 <DMA_MultiBufferSetConfig+0x144>)
 8014090:	4293      	cmp	r3, r2
 8014092:	d02c      	beq.n	80140ee <DMA_MultiBufferSetConfig+0xae>
 8014094:	68fb      	ldr	r3, [r7, #12]
 8014096:	681b      	ldr	r3, [r3, #0]
 8014098:	4a3b      	ldr	r2, [pc, #236]	@ (8014188 <DMA_MultiBufferSetConfig+0x148>)
 801409a:	4293      	cmp	r3, r2
 801409c:	d027      	beq.n	80140ee <DMA_MultiBufferSetConfig+0xae>
 801409e:	68fb      	ldr	r3, [r7, #12]
 80140a0:	681b      	ldr	r3, [r3, #0]
 80140a2:	4a3a      	ldr	r2, [pc, #232]	@ (801418c <DMA_MultiBufferSetConfig+0x14c>)
 80140a4:	4293      	cmp	r3, r2
 80140a6:	d022      	beq.n	80140ee <DMA_MultiBufferSetConfig+0xae>
 80140a8:	68fb      	ldr	r3, [r7, #12]
 80140aa:	681b      	ldr	r3, [r3, #0]
 80140ac:	4a38      	ldr	r2, [pc, #224]	@ (8014190 <DMA_MultiBufferSetConfig+0x150>)
 80140ae:	4293      	cmp	r3, r2
 80140b0:	d01d      	beq.n	80140ee <DMA_MultiBufferSetConfig+0xae>
 80140b2:	68fb      	ldr	r3, [r7, #12]
 80140b4:	681b      	ldr	r3, [r3, #0]
 80140b6:	4a37      	ldr	r2, [pc, #220]	@ (8014194 <DMA_MultiBufferSetConfig+0x154>)
 80140b8:	4293      	cmp	r3, r2
 80140ba:	d018      	beq.n	80140ee <DMA_MultiBufferSetConfig+0xae>
 80140bc:	68fb      	ldr	r3, [r7, #12]
 80140be:	681b      	ldr	r3, [r3, #0]
 80140c0:	4a35      	ldr	r2, [pc, #212]	@ (8014198 <DMA_MultiBufferSetConfig+0x158>)
 80140c2:	4293      	cmp	r3, r2
 80140c4:	d013      	beq.n	80140ee <DMA_MultiBufferSetConfig+0xae>
 80140c6:	68fb      	ldr	r3, [r7, #12]
 80140c8:	681b      	ldr	r3, [r3, #0]
 80140ca:	4a34      	ldr	r2, [pc, #208]	@ (801419c <DMA_MultiBufferSetConfig+0x15c>)
 80140cc:	4293      	cmp	r3, r2
 80140ce:	d00e      	beq.n	80140ee <DMA_MultiBufferSetConfig+0xae>
 80140d0:	68fb      	ldr	r3, [r7, #12]
 80140d2:	681b      	ldr	r3, [r3, #0]
 80140d4:	4a32      	ldr	r2, [pc, #200]	@ (80141a0 <DMA_MultiBufferSetConfig+0x160>)
 80140d6:	4293      	cmp	r3, r2
 80140d8:	d009      	beq.n	80140ee <DMA_MultiBufferSetConfig+0xae>
 80140da:	68fb      	ldr	r3, [r7, #12]
 80140dc:	681b      	ldr	r3, [r3, #0]
 80140de:	4a31      	ldr	r2, [pc, #196]	@ (80141a4 <DMA_MultiBufferSetConfig+0x164>)
 80140e0:	4293      	cmp	r3, r2
 80140e2:	d004      	beq.n	80140ee <DMA_MultiBufferSetConfig+0xae>
 80140e4:	68fb      	ldr	r3, [r7, #12]
 80140e6:	681b      	ldr	r3, [r3, #0]
 80140e8:	4a2f      	ldr	r2, [pc, #188]	@ (80141a8 <DMA_MultiBufferSetConfig+0x168>)
 80140ea:	4293      	cmp	r3, r2
 80140ec:	d101      	bne.n	80140f2 <DMA_MultiBufferSetConfig+0xb2>
 80140ee:	2301      	movs	r3, #1
 80140f0:	e000      	b.n	80140f4 <DMA_MultiBufferSetConfig+0xb4>
 80140f2:	2300      	movs	r3, #0
 80140f4:	2b00      	cmp	r3, #0
 80140f6:	d019      	beq.n	801412c <DMA_MultiBufferSetConfig+0xec>
  {
    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->NDTR = DataLength;
 80140f8:	68fb      	ldr	r3, [r7, #12]
 80140fa:	681b      	ldr	r3, [r3, #0]
 80140fc:	683a      	ldr	r2, [r7, #0]
 80140fe:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8014100:	68fb      	ldr	r3, [r7, #12]
 8014102:	689b      	ldr	r3, [r3, #8]
 8014104:	2b40      	cmp	r3, #64	@ 0x40
 8014106:	d108      	bne.n	801411a <DMA_MultiBufferSetConfig+0xda>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->PAR = DstAddress;
 8014108:	68fb      	ldr	r3, [r7, #12]
 801410a:	681b      	ldr	r3, [r3, #0]
 801410c:	687a      	ldr	r2, [r7, #4]
 801410e:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = SrcAddress;
 8014110:	68fb      	ldr	r3, [r7, #12]
 8014112:	681b      	ldr	r3, [r3, #0]
 8014114:	68ba      	ldr	r2, [r7, #8]
 8014116:	60da      	str	r2, [r3, #12]

      /* Configure DMA Stream destination address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = DstAddress;
    }
  }
}
 8014118:	e021      	b.n	801415e <DMA_MultiBufferSetConfig+0x11e>
      ((DMA_Stream_TypeDef   *)hdma->Instance)->PAR = SrcAddress;
 801411a:	68fb      	ldr	r3, [r7, #12]
 801411c:	681b      	ldr	r3, [r3, #0]
 801411e:	68ba      	ldr	r2, [r7, #8]
 8014120:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = DstAddress;
 8014122:	68fb      	ldr	r3, [r7, #12]
 8014124:	681b      	ldr	r3, [r3, #0]
 8014126:	687a      	ldr	r2, [r7, #4]
 8014128:	60da      	str	r2, [r3, #12]
}
 801412a:	e018      	b.n	801415e <DMA_MultiBufferSetConfig+0x11e>
    ((BDMA_Channel_TypeDef   *)hdma->Instance)->CNDTR = DataLength;
 801412c:	68fb      	ldr	r3, [r7, #12]
 801412e:	681b      	ldr	r3, [r3, #0]
 8014130:	683a      	ldr	r2, [r7, #0]
 8014132:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8014134:	68fb      	ldr	r3, [r7, #12]
 8014136:	689b      	ldr	r3, [r3, #8]
 8014138:	2b40      	cmp	r3, #64	@ 0x40
 801413a:	d108      	bne.n	801414e <DMA_MultiBufferSetConfig+0x10e>
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CPAR = DstAddress;
 801413c:	68fb      	ldr	r3, [r7, #12]
 801413e:	681b      	ldr	r3, [r3, #0]
 8014140:	687a      	ldr	r2, [r7, #4]
 8014142:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = SrcAddress;
 8014144:	68fb      	ldr	r3, [r7, #12]
 8014146:	681b      	ldr	r3, [r3, #0]
 8014148:	68ba      	ldr	r2, [r7, #8]
 801414a:	60da      	str	r2, [r3, #12]
}
 801414c:	e007      	b.n	801415e <DMA_MultiBufferSetConfig+0x11e>
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CPAR = SrcAddress;
 801414e:	68fb      	ldr	r3, [r7, #12]
 8014150:	681b      	ldr	r3, [r3, #0]
 8014152:	68ba      	ldr	r2, [r7, #8]
 8014154:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = DstAddress;
 8014156:	68fb      	ldr	r3, [r7, #12]
 8014158:	681b      	ldr	r3, [r3, #0]
 801415a:	687a      	ldr	r2, [r7, #4]
 801415c:	60da      	str	r2, [r3, #12]
}
 801415e:	bf00      	nop
 8014160:	3714      	adds	r7, #20
 8014162:	46bd      	mov	sp, r7
 8014164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014168:	4770      	bx	lr
 801416a:	bf00      	nop
 801416c:	40020010 	.word	0x40020010
 8014170:	40020028 	.word	0x40020028
 8014174:	40020040 	.word	0x40020040
 8014178:	40020058 	.word	0x40020058
 801417c:	40020070 	.word	0x40020070
 8014180:	40020088 	.word	0x40020088
 8014184:	400200a0 	.word	0x400200a0
 8014188:	400200b8 	.word	0x400200b8
 801418c:	40020410 	.word	0x40020410
 8014190:	40020428 	.word	0x40020428
 8014194:	40020440 	.word	0x40020440
 8014198:	40020458 	.word	0x40020458
 801419c:	40020470 	.word	0x40020470
 80141a0:	40020488 	.word	0x40020488
 80141a4:	400204a0 	.word	0x400204a0
 80141a8:	400204b8 	.word	0x400204b8

080141ac <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80141ac:	b480      	push	{r7}
 80141ae:	b089      	sub	sp, #36	@ 0x24
 80141b0:	af00      	add	r7, sp, #0
 80141b2:	6078      	str	r0, [r7, #4]
 80141b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80141b6:	2300      	movs	r3, #0
 80141b8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80141ba:	4b89      	ldr	r3, [pc, #548]	@ (80143e0 <HAL_GPIO_Init+0x234>)
 80141bc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80141be:	e194      	b.n	80144ea <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80141c0:	683b      	ldr	r3, [r7, #0]
 80141c2:	681a      	ldr	r2, [r3, #0]
 80141c4:	2101      	movs	r1, #1
 80141c6:	69fb      	ldr	r3, [r7, #28]
 80141c8:	fa01 f303 	lsl.w	r3, r1, r3
 80141cc:	4013      	ands	r3, r2
 80141ce:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80141d0:	693b      	ldr	r3, [r7, #16]
 80141d2:	2b00      	cmp	r3, #0
 80141d4:	f000 8186 	beq.w	80144e4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80141d8:	683b      	ldr	r3, [r7, #0]
 80141da:	685b      	ldr	r3, [r3, #4]
 80141dc:	f003 0303 	and.w	r3, r3, #3
 80141e0:	2b01      	cmp	r3, #1
 80141e2:	d005      	beq.n	80141f0 <HAL_GPIO_Init+0x44>
 80141e4:	683b      	ldr	r3, [r7, #0]
 80141e6:	685b      	ldr	r3, [r3, #4]
 80141e8:	f003 0303 	and.w	r3, r3, #3
 80141ec:	2b02      	cmp	r3, #2
 80141ee:	d130      	bne.n	8014252 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80141f0:	687b      	ldr	r3, [r7, #4]
 80141f2:	689b      	ldr	r3, [r3, #8]
 80141f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80141f6:	69fb      	ldr	r3, [r7, #28]
 80141f8:	005b      	lsls	r3, r3, #1
 80141fa:	2203      	movs	r2, #3
 80141fc:	fa02 f303 	lsl.w	r3, r2, r3
 8014200:	43db      	mvns	r3, r3
 8014202:	69ba      	ldr	r2, [r7, #24]
 8014204:	4013      	ands	r3, r2
 8014206:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8014208:	683b      	ldr	r3, [r7, #0]
 801420a:	68da      	ldr	r2, [r3, #12]
 801420c:	69fb      	ldr	r3, [r7, #28]
 801420e:	005b      	lsls	r3, r3, #1
 8014210:	fa02 f303 	lsl.w	r3, r2, r3
 8014214:	69ba      	ldr	r2, [r7, #24]
 8014216:	4313      	orrs	r3, r2
 8014218:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 801421a:	687b      	ldr	r3, [r7, #4]
 801421c:	69ba      	ldr	r2, [r7, #24]
 801421e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8014220:	687b      	ldr	r3, [r7, #4]
 8014222:	685b      	ldr	r3, [r3, #4]
 8014224:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8014226:	2201      	movs	r2, #1
 8014228:	69fb      	ldr	r3, [r7, #28]
 801422a:	fa02 f303 	lsl.w	r3, r2, r3
 801422e:	43db      	mvns	r3, r3
 8014230:	69ba      	ldr	r2, [r7, #24]
 8014232:	4013      	ands	r3, r2
 8014234:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8014236:	683b      	ldr	r3, [r7, #0]
 8014238:	685b      	ldr	r3, [r3, #4]
 801423a:	091b      	lsrs	r3, r3, #4
 801423c:	f003 0201 	and.w	r2, r3, #1
 8014240:	69fb      	ldr	r3, [r7, #28]
 8014242:	fa02 f303 	lsl.w	r3, r2, r3
 8014246:	69ba      	ldr	r2, [r7, #24]
 8014248:	4313      	orrs	r3, r2
 801424a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 801424c:	687b      	ldr	r3, [r7, #4]
 801424e:	69ba      	ldr	r2, [r7, #24]
 8014250:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8014252:	683b      	ldr	r3, [r7, #0]
 8014254:	685b      	ldr	r3, [r3, #4]
 8014256:	f003 0303 	and.w	r3, r3, #3
 801425a:	2b03      	cmp	r3, #3
 801425c:	d017      	beq.n	801428e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 801425e:	687b      	ldr	r3, [r7, #4]
 8014260:	68db      	ldr	r3, [r3, #12]
 8014262:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8014264:	69fb      	ldr	r3, [r7, #28]
 8014266:	005b      	lsls	r3, r3, #1
 8014268:	2203      	movs	r2, #3
 801426a:	fa02 f303 	lsl.w	r3, r2, r3
 801426e:	43db      	mvns	r3, r3
 8014270:	69ba      	ldr	r2, [r7, #24]
 8014272:	4013      	ands	r3, r2
 8014274:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8014276:	683b      	ldr	r3, [r7, #0]
 8014278:	689a      	ldr	r2, [r3, #8]
 801427a:	69fb      	ldr	r3, [r7, #28]
 801427c:	005b      	lsls	r3, r3, #1
 801427e:	fa02 f303 	lsl.w	r3, r2, r3
 8014282:	69ba      	ldr	r2, [r7, #24]
 8014284:	4313      	orrs	r3, r2
 8014286:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8014288:	687b      	ldr	r3, [r7, #4]
 801428a:	69ba      	ldr	r2, [r7, #24]
 801428c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 801428e:	683b      	ldr	r3, [r7, #0]
 8014290:	685b      	ldr	r3, [r3, #4]
 8014292:	f003 0303 	and.w	r3, r3, #3
 8014296:	2b02      	cmp	r3, #2
 8014298:	d123      	bne.n	80142e2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 801429a:	69fb      	ldr	r3, [r7, #28]
 801429c:	08da      	lsrs	r2, r3, #3
 801429e:	687b      	ldr	r3, [r7, #4]
 80142a0:	3208      	adds	r2, #8
 80142a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80142a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80142a8:	69fb      	ldr	r3, [r7, #28]
 80142aa:	f003 0307 	and.w	r3, r3, #7
 80142ae:	009b      	lsls	r3, r3, #2
 80142b0:	220f      	movs	r2, #15
 80142b2:	fa02 f303 	lsl.w	r3, r2, r3
 80142b6:	43db      	mvns	r3, r3
 80142b8:	69ba      	ldr	r2, [r7, #24]
 80142ba:	4013      	ands	r3, r2
 80142bc:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80142be:	683b      	ldr	r3, [r7, #0]
 80142c0:	691a      	ldr	r2, [r3, #16]
 80142c2:	69fb      	ldr	r3, [r7, #28]
 80142c4:	f003 0307 	and.w	r3, r3, #7
 80142c8:	009b      	lsls	r3, r3, #2
 80142ca:	fa02 f303 	lsl.w	r3, r2, r3
 80142ce:	69ba      	ldr	r2, [r7, #24]
 80142d0:	4313      	orrs	r3, r2
 80142d2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80142d4:	69fb      	ldr	r3, [r7, #28]
 80142d6:	08da      	lsrs	r2, r3, #3
 80142d8:	687b      	ldr	r3, [r7, #4]
 80142da:	3208      	adds	r2, #8
 80142dc:	69b9      	ldr	r1, [r7, #24]
 80142de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80142e2:	687b      	ldr	r3, [r7, #4]
 80142e4:	681b      	ldr	r3, [r3, #0]
 80142e6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80142e8:	69fb      	ldr	r3, [r7, #28]
 80142ea:	005b      	lsls	r3, r3, #1
 80142ec:	2203      	movs	r2, #3
 80142ee:	fa02 f303 	lsl.w	r3, r2, r3
 80142f2:	43db      	mvns	r3, r3
 80142f4:	69ba      	ldr	r2, [r7, #24]
 80142f6:	4013      	ands	r3, r2
 80142f8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80142fa:	683b      	ldr	r3, [r7, #0]
 80142fc:	685b      	ldr	r3, [r3, #4]
 80142fe:	f003 0203 	and.w	r2, r3, #3
 8014302:	69fb      	ldr	r3, [r7, #28]
 8014304:	005b      	lsls	r3, r3, #1
 8014306:	fa02 f303 	lsl.w	r3, r2, r3
 801430a:	69ba      	ldr	r2, [r7, #24]
 801430c:	4313      	orrs	r3, r2
 801430e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8014310:	687b      	ldr	r3, [r7, #4]
 8014312:	69ba      	ldr	r2, [r7, #24]
 8014314:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8014316:	683b      	ldr	r3, [r7, #0]
 8014318:	685b      	ldr	r3, [r3, #4]
 801431a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 801431e:	2b00      	cmp	r3, #0
 8014320:	f000 80e0 	beq.w	80144e4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8014324:	4b2f      	ldr	r3, [pc, #188]	@ (80143e4 <HAL_GPIO_Init+0x238>)
 8014326:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 801432a:	4a2e      	ldr	r2, [pc, #184]	@ (80143e4 <HAL_GPIO_Init+0x238>)
 801432c:	f043 0302 	orr.w	r3, r3, #2
 8014330:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8014334:	4b2b      	ldr	r3, [pc, #172]	@ (80143e4 <HAL_GPIO_Init+0x238>)
 8014336:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 801433a:	f003 0302 	and.w	r3, r3, #2
 801433e:	60fb      	str	r3, [r7, #12]
 8014340:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8014342:	4a29      	ldr	r2, [pc, #164]	@ (80143e8 <HAL_GPIO_Init+0x23c>)
 8014344:	69fb      	ldr	r3, [r7, #28]
 8014346:	089b      	lsrs	r3, r3, #2
 8014348:	3302      	adds	r3, #2
 801434a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801434e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8014350:	69fb      	ldr	r3, [r7, #28]
 8014352:	f003 0303 	and.w	r3, r3, #3
 8014356:	009b      	lsls	r3, r3, #2
 8014358:	220f      	movs	r2, #15
 801435a:	fa02 f303 	lsl.w	r3, r2, r3
 801435e:	43db      	mvns	r3, r3
 8014360:	69ba      	ldr	r2, [r7, #24]
 8014362:	4013      	ands	r3, r2
 8014364:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8014366:	687b      	ldr	r3, [r7, #4]
 8014368:	4a20      	ldr	r2, [pc, #128]	@ (80143ec <HAL_GPIO_Init+0x240>)
 801436a:	4293      	cmp	r3, r2
 801436c:	d052      	beq.n	8014414 <HAL_GPIO_Init+0x268>
 801436e:	687b      	ldr	r3, [r7, #4]
 8014370:	4a1f      	ldr	r2, [pc, #124]	@ (80143f0 <HAL_GPIO_Init+0x244>)
 8014372:	4293      	cmp	r3, r2
 8014374:	d031      	beq.n	80143da <HAL_GPIO_Init+0x22e>
 8014376:	687b      	ldr	r3, [r7, #4]
 8014378:	4a1e      	ldr	r2, [pc, #120]	@ (80143f4 <HAL_GPIO_Init+0x248>)
 801437a:	4293      	cmp	r3, r2
 801437c:	d02b      	beq.n	80143d6 <HAL_GPIO_Init+0x22a>
 801437e:	687b      	ldr	r3, [r7, #4]
 8014380:	4a1d      	ldr	r2, [pc, #116]	@ (80143f8 <HAL_GPIO_Init+0x24c>)
 8014382:	4293      	cmp	r3, r2
 8014384:	d025      	beq.n	80143d2 <HAL_GPIO_Init+0x226>
 8014386:	687b      	ldr	r3, [r7, #4]
 8014388:	4a1c      	ldr	r2, [pc, #112]	@ (80143fc <HAL_GPIO_Init+0x250>)
 801438a:	4293      	cmp	r3, r2
 801438c:	d01f      	beq.n	80143ce <HAL_GPIO_Init+0x222>
 801438e:	687b      	ldr	r3, [r7, #4]
 8014390:	4a1b      	ldr	r2, [pc, #108]	@ (8014400 <HAL_GPIO_Init+0x254>)
 8014392:	4293      	cmp	r3, r2
 8014394:	d019      	beq.n	80143ca <HAL_GPIO_Init+0x21e>
 8014396:	687b      	ldr	r3, [r7, #4]
 8014398:	4a1a      	ldr	r2, [pc, #104]	@ (8014404 <HAL_GPIO_Init+0x258>)
 801439a:	4293      	cmp	r3, r2
 801439c:	d013      	beq.n	80143c6 <HAL_GPIO_Init+0x21a>
 801439e:	687b      	ldr	r3, [r7, #4]
 80143a0:	4a19      	ldr	r2, [pc, #100]	@ (8014408 <HAL_GPIO_Init+0x25c>)
 80143a2:	4293      	cmp	r3, r2
 80143a4:	d00d      	beq.n	80143c2 <HAL_GPIO_Init+0x216>
 80143a6:	687b      	ldr	r3, [r7, #4]
 80143a8:	4a18      	ldr	r2, [pc, #96]	@ (801440c <HAL_GPIO_Init+0x260>)
 80143aa:	4293      	cmp	r3, r2
 80143ac:	d007      	beq.n	80143be <HAL_GPIO_Init+0x212>
 80143ae:	687b      	ldr	r3, [r7, #4]
 80143b0:	4a17      	ldr	r2, [pc, #92]	@ (8014410 <HAL_GPIO_Init+0x264>)
 80143b2:	4293      	cmp	r3, r2
 80143b4:	d101      	bne.n	80143ba <HAL_GPIO_Init+0x20e>
 80143b6:	2309      	movs	r3, #9
 80143b8:	e02d      	b.n	8014416 <HAL_GPIO_Init+0x26a>
 80143ba:	230a      	movs	r3, #10
 80143bc:	e02b      	b.n	8014416 <HAL_GPIO_Init+0x26a>
 80143be:	2308      	movs	r3, #8
 80143c0:	e029      	b.n	8014416 <HAL_GPIO_Init+0x26a>
 80143c2:	2307      	movs	r3, #7
 80143c4:	e027      	b.n	8014416 <HAL_GPIO_Init+0x26a>
 80143c6:	2306      	movs	r3, #6
 80143c8:	e025      	b.n	8014416 <HAL_GPIO_Init+0x26a>
 80143ca:	2305      	movs	r3, #5
 80143cc:	e023      	b.n	8014416 <HAL_GPIO_Init+0x26a>
 80143ce:	2304      	movs	r3, #4
 80143d0:	e021      	b.n	8014416 <HAL_GPIO_Init+0x26a>
 80143d2:	2303      	movs	r3, #3
 80143d4:	e01f      	b.n	8014416 <HAL_GPIO_Init+0x26a>
 80143d6:	2302      	movs	r3, #2
 80143d8:	e01d      	b.n	8014416 <HAL_GPIO_Init+0x26a>
 80143da:	2301      	movs	r3, #1
 80143dc:	e01b      	b.n	8014416 <HAL_GPIO_Init+0x26a>
 80143de:	bf00      	nop
 80143e0:	58000080 	.word	0x58000080
 80143e4:	58024400 	.word	0x58024400
 80143e8:	58000400 	.word	0x58000400
 80143ec:	58020000 	.word	0x58020000
 80143f0:	58020400 	.word	0x58020400
 80143f4:	58020800 	.word	0x58020800
 80143f8:	58020c00 	.word	0x58020c00
 80143fc:	58021000 	.word	0x58021000
 8014400:	58021400 	.word	0x58021400
 8014404:	58021800 	.word	0x58021800
 8014408:	58021c00 	.word	0x58021c00
 801440c:	58022000 	.word	0x58022000
 8014410:	58022400 	.word	0x58022400
 8014414:	2300      	movs	r3, #0
 8014416:	69fa      	ldr	r2, [r7, #28]
 8014418:	f002 0203 	and.w	r2, r2, #3
 801441c:	0092      	lsls	r2, r2, #2
 801441e:	4093      	lsls	r3, r2
 8014420:	69ba      	ldr	r2, [r7, #24]
 8014422:	4313      	orrs	r3, r2
 8014424:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8014426:	4938      	ldr	r1, [pc, #224]	@ (8014508 <HAL_GPIO_Init+0x35c>)
 8014428:	69fb      	ldr	r3, [r7, #28]
 801442a:	089b      	lsrs	r3, r3, #2
 801442c:	3302      	adds	r3, #2
 801442e:	69ba      	ldr	r2, [r7, #24]
 8014430:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8014434:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8014438:	681b      	ldr	r3, [r3, #0]
 801443a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 801443c:	693b      	ldr	r3, [r7, #16]
 801443e:	43db      	mvns	r3, r3
 8014440:	69ba      	ldr	r2, [r7, #24]
 8014442:	4013      	ands	r3, r2
 8014444:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8014446:	683b      	ldr	r3, [r7, #0]
 8014448:	685b      	ldr	r3, [r3, #4]
 801444a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 801444e:	2b00      	cmp	r3, #0
 8014450:	d003      	beq.n	801445a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8014452:	69ba      	ldr	r2, [r7, #24]
 8014454:	693b      	ldr	r3, [r7, #16]
 8014456:	4313      	orrs	r3, r2
 8014458:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 801445a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 801445e:	69bb      	ldr	r3, [r7, #24]
 8014460:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8014462:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8014466:	685b      	ldr	r3, [r3, #4]
 8014468:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 801446a:	693b      	ldr	r3, [r7, #16]
 801446c:	43db      	mvns	r3, r3
 801446e:	69ba      	ldr	r2, [r7, #24]
 8014470:	4013      	ands	r3, r2
 8014472:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8014474:	683b      	ldr	r3, [r7, #0]
 8014476:	685b      	ldr	r3, [r3, #4]
 8014478:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 801447c:	2b00      	cmp	r3, #0
 801447e:	d003      	beq.n	8014488 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8014480:	69ba      	ldr	r2, [r7, #24]
 8014482:	693b      	ldr	r3, [r7, #16]
 8014484:	4313      	orrs	r3, r2
 8014486:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8014488:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 801448c:	69bb      	ldr	r3, [r7, #24]
 801448e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8014490:	697b      	ldr	r3, [r7, #20]
 8014492:	685b      	ldr	r3, [r3, #4]
 8014494:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8014496:	693b      	ldr	r3, [r7, #16]
 8014498:	43db      	mvns	r3, r3
 801449a:	69ba      	ldr	r2, [r7, #24]
 801449c:	4013      	ands	r3, r2
 801449e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80144a0:	683b      	ldr	r3, [r7, #0]
 80144a2:	685b      	ldr	r3, [r3, #4]
 80144a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80144a8:	2b00      	cmp	r3, #0
 80144aa:	d003      	beq.n	80144b4 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80144ac:	69ba      	ldr	r2, [r7, #24]
 80144ae:	693b      	ldr	r3, [r7, #16]
 80144b0:	4313      	orrs	r3, r2
 80144b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80144b4:	697b      	ldr	r3, [r7, #20]
 80144b6:	69ba      	ldr	r2, [r7, #24]
 80144b8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80144ba:	697b      	ldr	r3, [r7, #20]
 80144bc:	681b      	ldr	r3, [r3, #0]
 80144be:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80144c0:	693b      	ldr	r3, [r7, #16]
 80144c2:	43db      	mvns	r3, r3
 80144c4:	69ba      	ldr	r2, [r7, #24]
 80144c6:	4013      	ands	r3, r2
 80144c8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80144ca:	683b      	ldr	r3, [r7, #0]
 80144cc:	685b      	ldr	r3, [r3, #4]
 80144ce:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80144d2:	2b00      	cmp	r3, #0
 80144d4:	d003      	beq.n	80144de <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80144d6:	69ba      	ldr	r2, [r7, #24]
 80144d8:	693b      	ldr	r3, [r7, #16]
 80144da:	4313      	orrs	r3, r2
 80144dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80144de:	697b      	ldr	r3, [r7, #20]
 80144e0:	69ba      	ldr	r2, [r7, #24]
 80144e2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80144e4:	69fb      	ldr	r3, [r7, #28]
 80144e6:	3301      	adds	r3, #1
 80144e8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80144ea:	683b      	ldr	r3, [r7, #0]
 80144ec:	681a      	ldr	r2, [r3, #0]
 80144ee:	69fb      	ldr	r3, [r7, #28]
 80144f0:	fa22 f303 	lsr.w	r3, r2, r3
 80144f4:	2b00      	cmp	r3, #0
 80144f6:	f47f ae63 	bne.w	80141c0 <HAL_GPIO_Init+0x14>
  }
}
 80144fa:	bf00      	nop
 80144fc:	bf00      	nop
 80144fe:	3724      	adds	r7, #36	@ 0x24
 8014500:	46bd      	mov	sp, r7
 8014502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014506:	4770      	bx	lr
 8014508:	58000400 	.word	0x58000400

0801450c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 801450c:	b480      	push	{r7}
 801450e:	b083      	sub	sp, #12
 8014510:	af00      	add	r7, sp, #0
 8014512:	6078      	str	r0, [r7, #4]
 8014514:	460b      	mov	r3, r1
 8014516:	807b      	strh	r3, [r7, #2]
 8014518:	4613      	mov	r3, r2
 801451a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 801451c:	787b      	ldrb	r3, [r7, #1]
 801451e:	2b00      	cmp	r3, #0
 8014520:	d003      	beq.n	801452a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8014522:	887a      	ldrh	r2, [r7, #2]
 8014524:	687b      	ldr	r3, [r7, #4]
 8014526:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8014528:	e003      	b.n	8014532 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 801452a:	887b      	ldrh	r3, [r7, #2]
 801452c:	041a      	lsls	r2, r3, #16
 801452e:	687b      	ldr	r3, [r7, #4]
 8014530:	619a      	str	r2, [r3, #24]
}
 8014532:	bf00      	nop
 8014534:	370c      	adds	r7, #12
 8014536:	46bd      	mov	sp, r7
 8014538:	f85d 7b04 	ldr.w	r7, [sp], #4
 801453c:	4770      	bx	lr
	...

08014540 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8014540:	b580      	push	{r7, lr}
 8014542:	b084      	sub	sp, #16
 8014544:	af00      	add	r7, sp, #0
 8014546:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8014548:	4b19      	ldr	r3, [pc, #100]	@ (80145b0 <HAL_PWREx_ConfigSupply+0x70>)
 801454a:	68db      	ldr	r3, [r3, #12]
 801454c:	f003 0304 	and.w	r3, r3, #4
 8014550:	2b04      	cmp	r3, #4
 8014552:	d00a      	beq.n	801456a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8014554:	4b16      	ldr	r3, [pc, #88]	@ (80145b0 <HAL_PWREx_ConfigSupply+0x70>)
 8014556:	68db      	ldr	r3, [r3, #12]
 8014558:	f003 0307 	and.w	r3, r3, #7
 801455c:	687a      	ldr	r2, [r7, #4]
 801455e:	429a      	cmp	r2, r3
 8014560:	d001      	beq.n	8014566 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8014562:	2301      	movs	r3, #1
 8014564:	e01f      	b.n	80145a6 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8014566:	2300      	movs	r3, #0
 8014568:	e01d      	b.n	80145a6 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 801456a:	4b11      	ldr	r3, [pc, #68]	@ (80145b0 <HAL_PWREx_ConfigSupply+0x70>)
 801456c:	68db      	ldr	r3, [r3, #12]
 801456e:	f023 0207 	bic.w	r2, r3, #7
 8014572:	490f      	ldr	r1, [pc, #60]	@ (80145b0 <HAL_PWREx_ConfigSupply+0x70>)
 8014574:	687b      	ldr	r3, [r7, #4]
 8014576:	4313      	orrs	r3, r2
 8014578:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 801457a:	f7fd f8f9 	bl	8011770 <HAL_GetTick>
 801457e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8014580:	e009      	b.n	8014596 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8014582:	f7fd f8f5 	bl	8011770 <HAL_GetTick>
 8014586:	4602      	mov	r2, r0
 8014588:	68fb      	ldr	r3, [r7, #12]
 801458a:	1ad3      	subs	r3, r2, r3
 801458c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8014590:	d901      	bls.n	8014596 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8014592:	2301      	movs	r3, #1
 8014594:	e007      	b.n	80145a6 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8014596:	4b06      	ldr	r3, [pc, #24]	@ (80145b0 <HAL_PWREx_ConfigSupply+0x70>)
 8014598:	685b      	ldr	r3, [r3, #4]
 801459a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 801459e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80145a2:	d1ee      	bne.n	8014582 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80145a4:	2300      	movs	r3, #0
}
 80145a6:	4618      	mov	r0, r3
 80145a8:	3710      	adds	r7, #16
 80145aa:	46bd      	mov	sp, r7
 80145ac:	bd80      	pop	{r7, pc}
 80145ae:	bf00      	nop
 80145b0:	58024800 	.word	0x58024800

080145b4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80145b4:	b580      	push	{r7, lr}
 80145b6:	b08c      	sub	sp, #48	@ 0x30
 80145b8:	af00      	add	r7, sp, #0
 80145ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80145bc:	687b      	ldr	r3, [r7, #4]
 80145be:	2b00      	cmp	r3, #0
 80145c0:	d102      	bne.n	80145c8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80145c2:	2301      	movs	r3, #1
 80145c4:	f000 bc48 	b.w	8014e58 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80145c8:	687b      	ldr	r3, [r7, #4]
 80145ca:	681b      	ldr	r3, [r3, #0]
 80145cc:	f003 0301 	and.w	r3, r3, #1
 80145d0:	2b00      	cmp	r3, #0
 80145d2:	f000 8088 	beq.w	80146e6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80145d6:	4b99      	ldr	r3, [pc, #612]	@ (801483c <HAL_RCC_OscConfig+0x288>)
 80145d8:	691b      	ldr	r3, [r3, #16]
 80145da:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80145de:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80145e0:	4b96      	ldr	r3, [pc, #600]	@ (801483c <HAL_RCC_OscConfig+0x288>)
 80145e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80145e4:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80145e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80145e8:	2b10      	cmp	r3, #16
 80145ea:	d007      	beq.n	80145fc <HAL_RCC_OscConfig+0x48>
 80145ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80145ee:	2b18      	cmp	r3, #24
 80145f0:	d111      	bne.n	8014616 <HAL_RCC_OscConfig+0x62>
 80145f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80145f4:	f003 0303 	and.w	r3, r3, #3
 80145f8:	2b02      	cmp	r3, #2
 80145fa:	d10c      	bne.n	8014616 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80145fc:	4b8f      	ldr	r3, [pc, #572]	@ (801483c <HAL_RCC_OscConfig+0x288>)
 80145fe:	681b      	ldr	r3, [r3, #0]
 8014600:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8014604:	2b00      	cmp	r3, #0
 8014606:	d06d      	beq.n	80146e4 <HAL_RCC_OscConfig+0x130>
 8014608:	687b      	ldr	r3, [r7, #4]
 801460a:	685b      	ldr	r3, [r3, #4]
 801460c:	2b00      	cmp	r3, #0
 801460e:	d169      	bne.n	80146e4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8014610:	2301      	movs	r3, #1
 8014612:	f000 bc21 	b.w	8014e58 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8014616:	687b      	ldr	r3, [r7, #4]
 8014618:	685b      	ldr	r3, [r3, #4]
 801461a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801461e:	d106      	bne.n	801462e <HAL_RCC_OscConfig+0x7a>
 8014620:	4b86      	ldr	r3, [pc, #536]	@ (801483c <HAL_RCC_OscConfig+0x288>)
 8014622:	681b      	ldr	r3, [r3, #0]
 8014624:	4a85      	ldr	r2, [pc, #532]	@ (801483c <HAL_RCC_OscConfig+0x288>)
 8014626:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 801462a:	6013      	str	r3, [r2, #0]
 801462c:	e02e      	b.n	801468c <HAL_RCC_OscConfig+0xd8>
 801462e:	687b      	ldr	r3, [r7, #4]
 8014630:	685b      	ldr	r3, [r3, #4]
 8014632:	2b00      	cmp	r3, #0
 8014634:	d10c      	bne.n	8014650 <HAL_RCC_OscConfig+0x9c>
 8014636:	4b81      	ldr	r3, [pc, #516]	@ (801483c <HAL_RCC_OscConfig+0x288>)
 8014638:	681b      	ldr	r3, [r3, #0]
 801463a:	4a80      	ldr	r2, [pc, #512]	@ (801483c <HAL_RCC_OscConfig+0x288>)
 801463c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8014640:	6013      	str	r3, [r2, #0]
 8014642:	4b7e      	ldr	r3, [pc, #504]	@ (801483c <HAL_RCC_OscConfig+0x288>)
 8014644:	681b      	ldr	r3, [r3, #0]
 8014646:	4a7d      	ldr	r2, [pc, #500]	@ (801483c <HAL_RCC_OscConfig+0x288>)
 8014648:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 801464c:	6013      	str	r3, [r2, #0]
 801464e:	e01d      	b.n	801468c <HAL_RCC_OscConfig+0xd8>
 8014650:	687b      	ldr	r3, [r7, #4]
 8014652:	685b      	ldr	r3, [r3, #4]
 8014654:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8014658:	d10c      	bne.n	8014674 <HAL_RCC_OscConfig+0xc0>
 801465a:	4b78      	ldr	r3, [pc, #480]	@ (801483c <HAL_RCC_OscConfig+0x288>)
 801465c:	681b      	ldr	r3, [r3, #0]
 801465e:	4a77      	ldr	r2, [pc, #476]	@ (801483c <HAL_RCC_OscConfig+0x288>)
 8014660:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8014664:	6013      	str	r3, [r2, #0]
 8014666:	4b75      	ldr	r3, [pc, #468]	@ (801483c <HAL_RCC_OscConfig+0x288>)
 8014668:	681b      	ldr	r3, [r3, #0]
 801466a:	4a74      	ldr	r2, [pc, #464]	@ (801483c <HAL_RCC_OscConfig+0x288>)
 801466c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8014670:	6013      	str	r3, [r2, #0]
 8014672:	e00b      	b.n	801468c <HAL_RCC_OscConfig+0xd8>
 8014674:	4b71      	ldr	r3, [pc, #452]	@ (801483c <HAL_RCC_OscConfig+0x288>)
 8014676:	681b      	ldr	r3, [r3, #0]
 8014678:	4a70      	ldr	r2, [pc, #448]	@ (801483c <HAL_RCC_OscConfig+0x288>)
 801467a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 801467e:	6013      	str	r3, [r2, #0]
 8014680:	4b6e      	ldr	r3, [pc, #440]	@ (801483c <HAL_RCC_OscConfig+0x288>)
 8014682:	681b      	ldr	r3, [r3, #0]
 8014684:	4a6d      	ldr	r2, [pc, #436]	@ (801483c <HAL_RCC_OscConfig+0x288>)
 8014686:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 801468a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 801468c:	687b      	ldr	r3, [r7, #4]
 801468e:	685b      	ldr	r3, [r3, #4]
 8014690:	2b00      	cmp	r3, #0
 8014692:	d013      	beq.n	80146bc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8014694:	f7fd f86c 	bl	8011770 <HAL_GetTick>
 8014698:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 801469a:	e008      	b.n	80146ae <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 801469c:	f7fd f868 	bl	8011770 <HAL_GetTick>
 80146a0:	4602      	mov	r2, r0
 80146a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80146a4:	1ad3      	subs	r3, r2, r3
 80146a6:	2b64      	cmp	r3, #100	@ 0x64
 80146a8:	d901      	bls.n	80146ae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80146aa:	2303      	movs	r3, #3
 80146ac:	e3d4      	b.n	8014e58 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80146ae:	4b63      	ldr	r3, [pc, #396]	@ (801483c <HAL_RCC_OscConfig+0x288>)
 80146b0:	681b      	ldr	r3, [r3, #0]
 80146b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80146b6:	2b00      	cmp	r3, #0
 80146b8:	d0f0      	beq.n	801469c <HAL_RCC_OscConfig+0xe8>
 80146ba:	e014      	b.n	80146e6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80146bc:	f7fd f858 	bl	8011770 <HAL_GetTick>
 80146c0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80146c2:	e008      	b.n	80146d6 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80146c4:	f7fd f854 	bl	8011770 <HAL_GetTick>
 80146c8:	4602      	mov	r2, r0
 80146ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80146cc:	1ad3      	subs	r3, r2, r3
 80146ce:	2b64      	cmp	r3, #100	@ 0x64
 80146d0:	d901      	bls.n	80146d6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80146d2:	2303      	movs	r3, #3
 80146d4:	e3c0      	b.n	8014e58 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80146d6:	4b59      	ldr	r3, [pc, #356]	@ (801483c <HAL_RCC_OscConfig+0x288>)
 80146d8:	681b      	ldr	r3, [r3, #0]
 80146da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80146de:	2b00      	cmp	r3, #0
 80146e0:	d1f0      	bne.n	80146c4 <HAL_RCC_OscConfig+0x110>
 80146e2:	e000      	b.n	80146e6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80146e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80146e6:	687b      	ldr	r3, [r7, #4]
 80146e8:	681b      	ldr	r3, [r3, #0]
 80146ea:	f003 0302 	and.w	r3, r3, #2
 80146ee:	2b00      	cmp	r3, #0
 80146f0:	f000 80ca 	beq.w	8014888 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80146f4:	4b51      	ldr	r3, [pc, #324]	@ (801483c <HAL_RCC_OscConfig+0x288>)
 80146f6:	691b      	ldr	r3, [r3, #16]
 80146f8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80146fc:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80146fe:	4b4f      	ldr	r3, [pc, #316]	@ (801483c <HAL_RCC_OscConfig+0x288>)
 8014700:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014702:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8014704:	6a3b      	ldr	r3, [r7, #32]
 8014706:	2b00      	cmp	r3, #0
 8014708:	d007      	beq.n	801471a <HAL_RCC_OscConfig+0x166>
 801470a:	6a3b      	ldr	r3, [r7, #32]
 801470c:	2b18      	cmp	r3, #24
 801470e:	d156      	bne.n	80147be <HAL_RCC_OscConfig+0x20a>
 8014710:	69fb      	ldr	r3, [r7, #28]
 8014712:	f003 0303 	and.w	r3, r3, #3
 8014716:	2b00      	cmp	r3, #0
 8014718:	d151      	bne.n	80147be <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 801471a:	4b48      	ldr	r3, [pc, #288]	@ (801483c <HAL_RCC_OscConfig+0x288>)
 801471c:	681b      	ldr	r3, [r3, #0]
 801471e:	f003 0304 	and.w	r3, r3, #4
 8014722:	2b00      	cmp	r3, #0
 8014724:	d005      	beq.n	8014732 <HAL_RCC_OscConfig+0x17e>
 8014726:	687b      	ldr	r3, [r7, #4]
 8014728:	68db      	ldr	r3, [r3, #12]
 801472a:	2b00      	cmp	r3, #0
 801472c:	d101      	bne.n	8014732 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 801472e:	2301      	movs	r3, #1
 8014730:	e392      	b.n	8014e58 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8014732:	4b42      	ldr	r3, [pc, #264]	@ (801483c <HAL_RCC_OscConfig+0x288>)
 8014734:	681b      	ldr	r3, [r3, #0]
 8014736:	f023 0219 	bic.w	r2, r3, #25
 801473a:	687b      	ldr	r3, [r7, #4]
 801473c:	68db      	ldr	r3, [r3, #12]
 801473e:	493f      	ldr	r1, [pc, #252]	@ (801483c <HAL_RCC_OscConfig+0x288>)
 8014740:	4313      	orrs	r3, r2
 8014742:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8014744:	f7fd f814 	bl	8011770 <HAL_GetTick>
 8014748:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 801474a:	e008      	b.n	801475e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 801474c:	f7fd f810 	bl	8011770 <HAL_GetTick>
 8014750:	4602      	mov	r2, r0
 8014752:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014754:	1ad3      	subs	r3, r2, r3
 8014756:	2b02      	cmp	r3, #2
 8014758:	d901      	bls.n	801475e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 801475a:	2303      	movs	r3, #3
 801475c:	e37c      	b.n	8014e58 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 801475e:	4b37      	ldr	r3, [pc, #220]	@ (801483c <HAL_RCC_OscConfig+0x288>)
 8014760:	681b      	ldr	r3, [r3, #0]
 8014762:	f003 0304 	and.w	r3, r3, #4
 8014766:	2b00      	cmp	r3, #0
 8014768:	d0f0      	beq.n	801474c <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801476a:	f7fd f831 	bl	80117d0 <HAL_GetREVID>
 801476e:	4603      	mov	r3, r0
 8014770:	f241 0203 	movw	r2, #4099	@ 0x1003
 8014774:	4293      	cmp	r3, r2
 8014776:	d817      	bhi.n	80147a8 <HAL_RCC_OscConfig+0x1f4>
 8014778:	687b      	ldr	r3, [r7, #4]
 801477a:	691b      	ldr	r3, [r3, #16]
 801477c:	2b40      	cmp	r3, #64	@ 0x40
 801477e:	d108      	bne.n	8014792 <HAL_RCC_OscConfig+0x1de>
 8014780:	4b2e      	ldr	r3, [pc, #184]	@ (801483c <HAL_RCC_OscConfig+0x288>)
 8014782:	685b      	ldr	r3, [r3, #4]
 8014784:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8014788:	4a2c      	ldr	r2, [pc, #176]	@ (801483c <HAL_RCC_OscConfig+0x288>)
 801478a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801478e:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8014790:	e07a      	b.n	8014888 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8014792:	4b2a      	ldr	r3, [pc, #168]	@ (801483c <HAL_RCC_OscConfig+0x288>)
 8014794:	685b      	ldr	r3, [r3, #4]
 8014796:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 801479a:	687b      	ldr	r3, [r7, #4]
 801479c:	691b      	ldr	r3, [r3, #16]
 801479e:	031b      	lsls	r3, r3, #12
 80147a0:	4926      	ldr	r1, [pc, #152]	@ (801483c <HAL_RCC_OscConfig+0x288>)
 80147a2:	4313      	orrs	r3, r2
 80147a4:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80147a6:	e06f      	b.n	8014888 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80147a8:	4b24      	ldr	r3, [pc, #144]	@ (801483c <HAL_RCC_OscConfig+0x288>)
 80147aa:	685b      	ldr	r3, [r3, #4]
 80147ac:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80147b0:	687b      	ldr	r3, [r7, #4]
 80147b2:	691b      	ldr	r3, [r3, #16]
 80147b4:	061b      	lsls	r3, r3, #24
 80147b6:	4921      	ldr	r1, [pc, #132]	@ (801483c <HAL_RCC_OscConfig+0x288>)
 80147b8:	4313      	orrs	r3, r2
 80147ba:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80147bc:	e064      	b.n	8014888 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80147be:	687b      	ldr	r3, [r7, #4]
 80147c0:	68db      	ldr	r3, [r3, #12]
 80147c2:	2b00      	cmp	r3, #0
 80147c4:	d047      	beq.n	8014856 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80147c6:	4b1d      	ldr	r3, [pc, #116]	@ (801483c <HAL_RCC_OscConfig+0x288>)
 80147c8:	681b      	ldr	r3, [r3, #0]
 80147ca:	f023 0219 	bic.w	r2, r3, #25
 80147ce:	687b      	ldr	r3, [r7, #4]
 80147d0:	68db      	ldr	r3, [r3, #12]
 80147d2:	491a      	ldr	r1, [pc, #104]	@ (801483c <HAL_RCC_OscConfig+0x288>)
 80147d4:	4313      	orrs	r3, r2
 80147d6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80147d8:	f7fc ffca 	bl	8011770 <HAL_GetTick>
 80147dc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80147de:	e008      	b.n	80147f2 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80147e0:	f7fc ffc6 	bl	8011770 <HAL_GetTick>
 80147e4:	4602      	mov	r2, r0
 80147e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80147e8:	1ad3      	subs	r3, r2, r3
 80147ea:	2b02      	cmp	r3, #2
 80147ec:	d901      	bls.n	80147f2 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80147ee:	2303      	movs	r3, #3
 80147f0:	e332      	b.n	8014e58 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80147f2:	4b12      	ldr	r3, [pc, #72]	@ (801483c <HAL_RCC_OscConfig+0x288>)
 80147f4:	681b      	ldr	r3, [r3, #0]
 80147f6:	f003 0304 	and.w	r3, r3, #4
 80147fa:	2b00      	cmp	r3, #0
 80147fc:	d0f0      	beq.n	80147e0 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80147fe:	f7fc ffe7 	bl	80117d0 <HAL_GetREVID>
 8014802:	4603      	mov	r3, r0
 8014804:	f241 0203 	movw	r2, #4099	@ 0x1003
 8014808:	4293      	cmp	r3, r2
 801480a:	d819      	bhi.n	8014840 <HAL_RCC_OscConfig+0x28c>
 801480c:	687b      	ldr	r3, [r7, #4]
 801480e:	691b      	ldr	r3, [r3, #16]
 8014810:	2b40      	cmp	r3, #64	@ 0x40
 8014812:	d108      	bne.n	8014826 <HAL_RCC_OscConfig+0x272>
 8014814:	4b09      	ldr	r3, [pc, #36]	@ (801483c <HAL_RCC_OscConfig+0x288>)
 8014816:	685b      	ldr	r3, [r3, #4]
 8014818:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 801481c:	4a07      	ldr	r2, [pc, #28]	@ (801483c <HAL_RCC_OscConfig+0x288>)
 801481e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8014822:	6053      	str	r3, [r2, #4]
 8014824:	e030      	b.n	8014888 <HAL_RCC_OscConfig+0x2d4>
 8014826:	4b05      	ldr	r3, [pc, #20]	@ (801483c <HAL_RCC_OscConfig+0x288>)
 8014828:	685b      	ldr	r3, [r3, #4]
 801482a:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 801482e:	687b      	ldr	r3, [r7, #4]
 8014830:	691b      	ldr	r3, [r3, #16]
 8014832:	031b      	lsls	r3, r3, #12
 8014834:	4901      	ldr	r1, [pc, #4]	@ (801483c <HAL_RCC_OscConfig+0x288>)
 8014836:	4313      	orrs	r3, r2
 8014838:	604b      	str	r3, [r1, #4]
 801483a:	e025      	b.n	8014888 <HAL_RCC_OscConfig+0x2d4>
 801483c:	58024400 	.word	0x58024400
 8014840:	4b9a      	ldr	r3, [pc, #616]	@ (8014aac <HAL_RCC_OscConfig+0x4f8>)
 8014842:	685b      	ldr	r3, [r3, #4]
 8014844:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8014848:	687b      	ldr	r3, [r7, #4]
 801484a:	691b      	ldr	r3, [r3, #16]
 801484c:	061b      	lsls	r3, r3, #24
 801484e:	4997      	ldr	r1, [pc, #604]	@ (8014aac <HAL_RCC_OscConfig+0x4f8>)
 8014850:	4313      	orrs	r3, r2
 8014852:	604b      	str	r3, [r1, #4]
 8014854:	e018      	b.n	8014888 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8014856:	4b95      	ldr	r3, [pc, #596]	@ (8014aac <HAL_RCC_OscConfig+0x4f8>)
 8014858:	681b      	ldr	r3, [r3, #0]
 801485a:	4a94      	ldr	r2, [pc, #592]	@ (8014aac <HAL_RCC_OscConfig+0x4f8>)
 801485c:	f023 0301 	bic.w	r3, r3, #1
 8014860:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8014862:	f7fc ff85 	bl	8011770 <HAL_GetTick>
 8014866:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8014868:	e008      	b.n	801487c <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 801486a:	f7fc ff81 	bl	8011770 <HAL_GetTick>
 801486e:	4602      	mov	r2, r0
 8014870:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014872:	1ad3      	subs	r3, r2, r3
 8014874:	2b02      	cmp	r3, #2
 8014876:	d901      	bls.n	801487c <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8014878:	2303      	movs	r3, #3
 801487a:	e2ed      	b.n	8014e58 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 801487c:	4b8b      	ldr	r3, [pc, #556]	@ (8014aac <HAL_RCC_OscConfig+0x4f8>)
 801487e:	681b      	ldr	r3, [r3, #0]
 8014880:	f003 0304 	and.w	r3, r3, #4
 8014884:	2b00      	cmp	r3, #0
 8014886:	d1f0      	bne.n	801486a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8014888:	687b      	ldr	r3, [r7, #4]
 801488a:	681b      	ldr	r3, [r3, #0]
 801488c:	f003 0310 	and.w	r3, r3, #16
 8014890:	2b00      	cmp	r3, #0
 8014892:	f000 80a9 	beq.w	80149e8 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8014896:	4b85      	ldr	r3, [pc, #532]	@ (8014aac <HAL_RCC_OscConfig+0x4f8>)
 8014898:	691b      	ldr	r3, [r3, #16]
 801489a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 801489e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80148a0:	4b82      	ldr	r3, [pc, #520]	@ (8014aac <HAL_RCC_OscConfig+0x4f8>)
 80148a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80148a4:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80148a6:	69bb      	ldr	r3, [r7, #24]
 80148a8:	2b08      	cmp	r3, #8
 80148aa:	d007      	beq.n	80148bc <HAL_RCC_OscConfig+0x308>
 80148ac:	69bb      	ldr	r3, [r7, #24]
 80148ae:	2b18      	cmp	r3, #24
 80148b0:	d13a      	bne.n	8014928 <HAL_RCC_OscConfig+0x374>
 80148b2:	697b      	ldr	r3, [r7, #20]
 80148b4:	f003 0303 	and.w	r3, r3, #3
 80148b8:	2b01      	cmp	r3, #1
 80148ba:	d135      	bne.n	8014928 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80148bc:	4b7b      	ldr	r3, [pc, #492]	@ (8014aac <HAL_RCC_OscConfig+0x4f8>)
 80148be:	681b      	ldr	r3, [r3, #0]
 80148c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80148c4:	2b00      	cmp	r3, #0
 80148c6:	d005      	beq.n	80148d4 <HAL_RCC_OscConfig+0x320>
 80148c8:	687b      	ldr	r3, [r7, #4]
 80148ca:	69db      	ldr	r3, [r3, #28]
 80148cc:	2b80      	cmp	r3, #128	@ 0x80
 80148ce:	d001      	beq.n	80148d4 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80148d0:	2301      	movs	r3, #1
 80148d2:	e2c1      	b.n	8014e58 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80148d4:	f7fc ff7c 	bl	80117d0 <HAL_GetREVID>
 80148d8:	4603      	mov	r3, r0
 80148da:	f241 0203 	movw	r2, #4099	@ 0x1003
 80148de:	4293      	cmp	r3, r2
 80148e0:	d817      	bhi.n	8014912 <HAL_RCC_OscConfig+0x35e>
 80148e2:	687b      	ldr	r3, [r7, #4]
 80148e4:	6a1b      	ldr	r3, [r3, #32]
 80148e6:	2b20      	cmp	r3, #32
 80148e8:	d108      	bne.n	80148fc <HAL_RCC_OscConfig+0x348>
 80148ea:	4b70      	ldr	r3, [pc, #448]	@ (8014aac <HAL_RCC_OscConfig+0x4f8>)
 80148ec:	685b      	ldr	r3, [r3, #4]
 80148ee:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80148f2:	4a6e      	ldr	r2, [pc, #440]	@ (8014aac <HAL_RCC_OscConfig+0x4f8>)
 80148f4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80148f8:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80148fa:	e075      	b.n	80149e8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80148fc:	4b6b      	ldr	r3, [pc, #428]	@ (8014aac <HAL_RCC_OscConfig+0x4f8>)
 80148fe:	685b      	ldr	r3, [r3, #4]
 8014900:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8014904:	687b      	ldr	r3, [r7, #4]
 8014906:	6a1b      	ldr	r3, [r3, #32]
 8014908:	069b      	lsls	r3, r3, #26
 801490a:	4968      	ldr	r1, [pc, #416]	@ (8014aac <HAL_RCC_OscConfig+0x4f8>)
 801490c:	4313      	orrs	r3, r2
 801490e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8014910:	e06a      	b.n	80149e8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8014912:	4b66      	ldr	r3, [pc, #408]	@ (8014aac <HAL_RCC_OscConfig+0x4f8>)
 8014914:	68db      	ldr	r3, [r3, #12]
 8014916:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 801491a:	687b      	ldr	r3, [r7, #4]
 801491c:	6a1b      	ldr	r3, [r3, #32]
 801491e:	061b      	lsls	r3, r3, #24
 8014920:	4962      	ldr	r1, [pc, #392]	@ (8014aac <HAL_RCC_OscConfig+0x4f8>)
 8014922:	4313      	orrs	r3, r2
 8014924:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8014926:	e05f      	b.n	80149e8 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8014928:	687b      	ldr	r3, [r7, #4]
 801492a:	69db      	ldr	r3, [r3, #28]
 801492c:	2b00      	cmp	r3, #0
 801492e:	d042      	beq.n	80149b6 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8014930:	4b5e      	ldr	r3, [pc, #376]	@ (8014aac <HAL_RCC_OscConfig+0x4f8>)
 8014932:	681b      	ldr	r3, [r3, #0]
 8014934:	4a5d      	ldr	r2, [pc, #372]	@ (8014aac <HAL_RCC_OscConfig+0x4f8>)
 8014936:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801493a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801493c:	f7fc ff18 	bl	8011770 <HAL_GetTick>
 8014940:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8014942:	e008      	b.n	8014956 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8014944:	f7fc ff14 	bl	8011770 <HAL_GetTick>
 8014948:	4602      	mov	r2, r0
 801494a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801494c:	1ad3      	subs	r3, r2, r3
 801494e:	2b02      	cmp	r3, #2
 8014950:	d901      	bls.n	8014956 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8014952:	2303      	movs	r3, #3
 8014954:	e280      	b.n	8014e58 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8014956:	4b55      	ldr	r3, [pc, #340]	@ (8014aac <HAL_RCC_OscConfig+0x4f8>)
 8014958:	681b      	ldr	r3, [r3, #0]
 801495a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801495e:	2b00      	cmp	r3, #0
 8014960:	d0f0      	beq.n	8014944 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8014962:	f7fc ff35 	bl	80117d0 <HAL_GetREVID>
 8014966:	4603      	mov	r3, r0
 8014968:	f241 0203 	movw	r2, #4099	@ 0x1003
 801496c:	4293      	cmp	r3, r2
 801496e:	d817      	bhi.n	80149a0 <HAL_RCC_OscConfig+0x3ec>
 8014970:	687b      	ldr	r3, [r7, #4]
 8014972:	6a1b      	ldr	r3, [r3, #32]
 8014974:	2b20      	cmp	r3, #32
 8014976:	d108      	bne.n	801498a <HAL_RCC_OscConfig+0x3d6>
 8014978:	4b4c      	ldr	r3, [pc, #304]	@ (8014aac <HAL_RCC_OscConfig+0x4f8>)
 801497a:	685b      	ldr	r3, [r3, #4]
 801497c:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8014980:	4a4a      	ldr	r2, [pc, #296]	@ (8014aac <HAL_RCC_OscConfig+0x4f8>)
 8014982:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8014986:	6053      	str	r3, [r2, #4]
 8014988:	e02e      	b.n	80149e8 <HAL_RCC_OscConfig+0x434>
 801498a:	4b48      	ldr	r3, [pc, #288]	@ (8014aac <HAL_RCC_OscConfig+0x4f8>)
 801498c:	685b      	ldr	r3, [r3, #4]
 801498e:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8014992:	687b      	ldr	r3, [r7, #4]
 8014994:	6a1b      	ldr	r3, [r3, #32]
 8014996:	069b      	lsls	r3, r3, #26
 8014998:	4944      	ldr	r1, [pc, #272]	@ (8014aac <HAL_RCC_OscConfig+0x4f8>)
 801499a:	4313      	orrs	r3, r2
 801499c:	604b      	str	r3, [r1, #4]
 801499e:	e023      	b.n	80149e8 <HAL_RCC_OscConfig+0x434>
 80149a0:	4b42      	ldr	r3, [pc, #264]	@ (8014aac <HAL_RCC_OscConfig+0x4f8>)
 80149a2:	68db      	ldr	r3, [r3, #12]
 80149a4:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80149a8:	687b      	ldr	r3, [r7, #4]
 80149aa:	6a1b      	ldr	r3, [r3, #32]
 80149ac:	061b      	lsls	r3, r3, #24
 80149ae:	493f      	ldr	r1, [pc, #252]	@ (8014aac <HAL_RCC_OscConfig+0x4f8>)
 80149b0:	4313      	orrs	r3, r2
 80149b2:	60cb      	str	r3, [r1, #12]
 80149b4:	e018      	b.n	80149e8 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80149b6:	4b3d      	ldr	r3, [pc, #244]	@ (8014aac <HAL_RCC_OscConfig+0x4f8>)
 80149b8:	681b      	ldr	r3, [r3, #0]
 80149ba:	4a3c      	ldr	r2, [pc, #240]	@ (8014aac <HAL_RCC_OscConfig+0x4f8>)
 80149bc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80149c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80149c2:	f7fc fed5 	bl	8011770 <HAL_GetTick>
 80149c6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80149c8:	e008      	b.n	80149dc <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80149ca:	f7fc fed1 	bl	8011770 <HAL_GetTick>
 80149ce:	4602      	mov	r2, r0
 80149d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80149d2:	1ad3      	subs	r3, r2, r3
 80149d4:	2b02      	cmp	r3, #2
 80149d6:	d901      	bls.n	80149dc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80149d8:	2303      	movs	r3, #3
 80149da:	e23d      	b.n	8014e58 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80149dc:	4b33      	ldr	r3, [pc, #204]	@ (8014aac <HAL_RCC_OscConfig+0x4f8>)
 80149de:	681b      	ldr	r3, [r3, #0]
 80149e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80149e4:	2b00      	cmp	r3, #0
 80149e6:	d1f0      	bne.n	80149ca <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80149e8:	687b      	ldr	r3, [r7, #4]
 80149ea:	681b      	ldr	r3, [r3, #0]
 80149ec:	f003 0308 	and.w	r3, r3, #8
 80149f0:	2b00      	cmp	r3, #0
 80149f2:	d036      	beq.n	8014a62 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80149f4:	687b      	ldr	r3, [r7, #4]
 80149f6:	695b      	ldr	r3, [r3, #20]
 80149f8:	2b00      	cmp	r3, #0
 80149fa:	d019      	beq.n	8014a30 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80149fc:	4b2b      	ldr	r3, [pc, #172]	@ (8014aac <HAL_RCC_OscConfig+0x4f8>)
 80149fe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8014a00:	4a2a      	ldr	r2, [pc, #168]	@ (8014aac <HAL_RCC_OscConfig+0x4f8>)
 8014a02:	f043 0301 	orr.w	r3, r3, #1
 8014a06:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8014a08:	f7fc feb2 	bl	8011770 <HAL_GetTick>
 8014a0c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8014a0e:	e008      	b.n	8014a22 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8014a10:	f7fc feae 	bl	8011770 <HAL_GetTick>
 8014a14:	4602      	mov	r2, r0
 8014a16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014a18:	1ad3      	subs	r3, r2, r3
 8014a1a:	2b02      	cmp	r3, #2
 8014a1c:	d901      	bls.n	8014a22 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8014a1e:	2303      	movs	r3, #3
 8014a20:	e21a      	b.n	8014e58 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8014a22:	4b22      	ldr	r3, [pc, #136]	@ (8014aac <HAL_RCC_OscConfig+0x4f8>)
 8014a24:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8014a26:	f003 0302 	and.w	r3, r3, #2
 8014a2a:	2b00      	cmp	r3, #0
 8014a2c:	d0f0      	beq.n	8014a10 <HAL_RCC_OscConfig+0x45c>
 8014a2e:	e018      	b.n	8014a62 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8014a30:	4b1e      	ldr	r3, [pc, #120]	@ (8014aac <HAL_RCC_OscConfig+0x4f8>)
 8014a32:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8014a34:	4a1d      	ldr	r2, [pc, #116]	@ (8014aac <HAL_RCC_OscConfig+0x4f8>)
 8014a36:	f023 0301 	bic.w	r3, r3, #1
 8014a3a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8014a3c:	f7fc fe98 	bl	8011770 <HAL_GetTick>
 8014a40:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8014a42:	e008      	b.n	8014a56 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8014a44:	f7fc fe94 	bl	8011770 <HAL_GetTick>
 8014a48:	4602      	mov	r2, r0
 8014a4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014a4c:	1ad3      	subs	r3, r2, r3
 8014a4e:	2b02      	cmp	r3, #2
 8014a50:	d901      	bls.n	8014a56 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8014a52:	2303      	movs	r3, #3
 8014a54:	e200      	b.n	8014e58 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8014a56:	4b15      	ldr	r3, [pc, #84]	@ (8014aac <HAL_RCC_OscConfig+0x4f8>)
 8014a58:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8014a5a:	f003 0302 	and.w	r3, r3, #2
 8014a5e:	2b00      	cmp	r3, #0
 8014a60:	d1f0      	bne.n	8014a44 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8014a62:	687b      	ldr	r3, [r7, #4]
 8014a64:	681b      	ldr	r3, [r3, #0]
 8014a66:	f003 0320 	and.w	r3, r3, #32
 8014a6a:	2b00      	cmp	r3, #0
 8014a6c:	d039      	beq.n	8014ae2 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8014a6e:	687b      	ldr	r3, [r7, #4]
 8014a70:	699b      	ldr	r3, [r3, #24]
 8014a72:	2b00      	cmp	r3, #0
 8014a74:	d01c      	beq.n	8014ab0 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8014a76:	4b0d      	ldr	r3, [pc, #52]	@ (8014aac <HAL_RCC_OscConfig+0x4f8>)
 8014a78:	681b      	ldr	r3, [r3, #0]
 8014a7a:	4a0c      	ldr	r2, [pc, #48]	@ (8014aac <HAL_RCC_OscConfig+0x4f8>)
 8014a7c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8014a80:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8014a82:	f7fc fe75 	bl	8011770 <HAL_GetTick>
 8014a86:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8014a88:	e008      	b.n	8014a9c <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8014a8a:	f7fc fe71 	bl	8011770 <HAL_GetTick>
 8014a8e:	4602      	mov	r2, r0
 8014a90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014a92:	1ad3      	subs	r3, r2, r3
 8014a94:	2b02      	cmp	r3, #2
 8014a96:	d901      	bls.n	8014a9c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8014a98:	2303      	movs	r3, #3
 8014a9a:	e1dd      	b.n	8014e58 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8014a9c:	4b03      	ldr	r3, [pc, #12]	@ (8014aac <HAL_RCC_OscConfig+0x4f8>)
 8014a9e:	681b      	ldr	r3, [r3, #0]
 8014aa0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8014aa4:	2b00      	cmp	r3, #0
 8014aa6:	d0f0      	beq.n	8014a8a <HAL_RCC_OscConfig+0x4d6>
 8014aa8:	e01b      	b.n	8014ae2 <HAL_RCC_OscConfig+0x52e>
 8014aaa:	bf00      	nop
 8014aac:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8014ab0:	4b9b      	ldr	r3, [pc, #620]	@ (8014d20 <HAL_RCC_OscConfig+0x76c>)
 8014ab2:	681b      	ldr	r3, [r3, #0]
 8014ab4:	4a9a      	ldr	r2, [pc, #616]	@ (8014d20 <HAL_RCC_OscConfig+0x76c>)
 8014ab6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8014aba:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8014abc:	f7fc fe58 	bl	8011770 <HAL_GetTick>
 8014ac0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8014ac2:	e008      	b.n	8014ad6 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8014ac4:	f7fc fe54 	bl	8011770 <HAL_GetTick>
 8014ac8:	4602      	mov	r2, r0
 8014aca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014acc:	1ad3      	subs	r3, r2, r3
 8014ace:	2b02      	cmp	r3, #2
 8014ad0:	d901      	bls.n	8014ad6 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8014ad2:	2303      	movs	r3, #3
 8014ad4:	e1c0      	b.n	8014e58 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8014ad6:	4b92      	ldr	r3, [pc, #584]	@ (8014d20 <HAL_RCC_OscConfig+0x76c>)
 8014ad8:	681b      	ldr	r3, [r3, #0]
 8014ada:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8014ade:	2b00      	cmp	r3, #0
 8014ae0:	d1f0      	bne.n	8014ac4 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8014ae2:	687b      	ldr	r3, [r7, #4]
 8014ae4:	681b      	ldr	r3, [r3, #0]
 8014ae6:	f003 0304 	and.w	r3, r3, #4
 8014aea:	2b00      	cmp	r3, #0
 8014aec:	f000 8081 	beq.w	8014bf2 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8014af0:	4b8c      	ldr	r3, [pc, #560]	@ (8014d24 <HAL_RCC_OscConfig+0x770>)
 8014af2:	681b      	ldr	r3, [r3, #0]
 8014af4:	4a8b      	ldr	r2, [pc, #556]	@ (8014d24 <HAL_RCC_OscConfig+0x770>)
 8014af6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8014afa:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8014afc:	f7fc fe38 	bl	8011770 <HAL_GetTick>
 8014b00:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8014b02:	e008      	b.n	8014b16 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8014b04:	f7fc fe34 	bl	8011770 <HAL_GetTick>
 8014b08:	4602      	mov	r2, r0
 8014b0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014b0c:	1ad3      	subs	r3, r2, r3
 8014b0e:	2b64      	cmp	r3, #100	@ 0x64
 8014b10:	d901      	bls.n	8014b16 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8014b12:	2303      	movs	r3, #3
 8014b14:	e1a0      	b.n	8014e58 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8014b16:	4b83      	ldr	r3, [pc, #524]	@ (8014d24 <HAL_RCC_OscConfig+0x770>)
 8014b18:	681b      	ldr	r3, [r3, #0]
 8014b1a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8014b1e:	2b00      	cmp	r3, #0
 8014b20:	d0f0      	beq.n	8014b04 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8014b22:	687b      	ldr	r3, [r7, #4]
 8014b24:	689b      	ldr	r3, [r3, #8]
 8014b26:	2b01      	cmp	r3, #1
 8014b28:	d106      	bne.n	8014b38 <HAL_RCC_OscConfig+0x584>
 8014b2a:	4b7d      	ldr	r3, [pc, #500]	@ (8014d20 <HAL_RCC_OscConfig+0x76c>)
 8014b2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8014b2e:	4a7c      	ldr	r2, [pc, #496]	@ (8014d20 <HAL_RCC_OscConfig+0x76c>)
 8014b30:	f043 0301 	orr.w	r3, r3, #1
 8014b34:	6713      	str	r3, [r2, #112]	@ 0x70
 8014b36:	e02d      	b.n	8014b94 <HAL_RCC_OscConfig+0x5e0>
 8014b38:	687b      	ldr	r3, [r7, #4]
 8014b3a:	689b      	ldr	r3, [r3, #8]
 8014b3c:	2b00      	cmp	r3, #0
 8014b3e:	d10c      	bne.n	8014b5a <HAL_RCC_OscConfig+0x5a6>
 8014b40:	4b77      	ldr	r3, [pc, #476]	@ (8014d20 <HAL_RCC_OscConfig+0x76c>)
 8014b42:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8014b44:	4a76      	ldr	r2, [pc, #472]	@ (8014d20 <HAL_RCC_OscConfig+0x76c>)
 8014b46:	f023 0301 	bic.w	r3, r3, #1
 8014b4a:	6713      	str	r3, [r2, #112]	@ 0x70
 8014b4c:	4b74      	ldr	r3, [pc, #464]	@ (8014d20 <HAL_RCC_OscConfig+0x76c>)
 8014b4e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8014b50:	4a73      	ldr	r2, [pc, #460]	@ (8014d20 <HAL_RCC_OscConfig+0x76c>)
 8014b52:	f023 0304 	bic.w	r3, r3, #4
 8014b56:	6713      	str	r3, [r2, #112]	@ 0x70
 8014b58:	e01c      	b.n	8014b94 <HAL_RCC_OscConfig+0x5e0>
 8014b5a:	687b      	ldr	r3, [r7, #4]
 8014b5c:	689b      	ldr	r3, [r3, #8]
 8014b5e:	2b05      	cmp	r3, #5
 8014b60:	d10c      	bne.n	8014b7c <HAL_RCC_OscConfig+0x5c8>
 8014b62:	4b6f      	ldr	r3, [pc, #444]	@ (8014d20 <HAL_RCC_OscConfig+0x76c>)
 8014b64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8014b66:	4a6e      	ldr	r2, [pc, #440]	@ (8014d20 <HAL_RCC_OscConfig+0x76c>)
 8014b68:	f043 0304 	orr.w	r3, r3, #4
 8014b6c:	6713      	str	r3, [r2, #112]	@ 0x70
 8014b6e:	4b6c      	ldr	r3, [pc, #432]	@ (8014d20 <HAL_RCC_OscConfig+0x76c>)
 8014b70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8014b72:	4a6b      	ldr	r2, [pc, #428]	@ (8014d20 <HAL_RCC_OscConfig+0x76c>)
 8014b74:	f043 0301 	orr.w	r3, r3, #1
 8014b78:	6713      	str	r3, [r2, #112]	@ 0x70
 8014b7a:	e00b      	b.n	8014b94 <HAL_RCC_OscConfig+0x5e0>
 8014b7c:	4b68      	ldr	r3, [pc, #416]	@ (8014d20 <HAL_RCC_OscConfig+0x76c>)
 8014b7e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8014b80:	4a67      	ldr	r2, [pc, #412]	@ (8014d20 <HAL_RCC_OscConfig+0x76c>)
 8014b82:	f023 0301 	bic.w	r3, r3, #1
 8014b86:	6713      	str	r3, [r2, #112]	@ 0x70
 8014b88:	4b65      	ldr	r3, [pc, #404]	@ (8014d20 <HAL_RCC_OscConfig+0x76c>)
 8014b8a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8014b8c:	4a64      	ldr	r2, [pc, #400]	@ (8014d20 <HAL_RCC_OscConfig+0x76c>)
 8014b8e:	f023 0304 	bic.w	r3, r3, #4
 8014b92:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8014b94:	687b      	ldr	r3, [r7, #4]
 8014b96:	689b      	ldr	r3, [r3, #8]
 8014b98:	2b00      	cmp	r3, #0
 8014b9a:	d015      	beq.n	8014bc8 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8014b9c:	f7fc fde8 	bl	8011770 <HAL_GetTick>
 8014ba0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8014ba2:	e00a      	b.n	8014bba <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8014ba4:	f7fc fde4 	bl	8011770 <HAL_GetTick>
 8014ba8:	4602      	mov	r2, r0
 8014baa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014bac:	1ad3      	subs	r3, r2, r3
 8014bae:	f241 3288 	movw	r2, #5000	@ 0x1388
 8014bb2:	4293      	cmp	r3, r2
 8014bb4:	d901      	bls.n	8014bba <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8014bb6:	2303      	movs	r3, #3
 8014bb8:	e14e      	b.n	8014e58 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8014bba:	4b59      	ldr	r3, [pc, #356]	@ (8014d20 <HAL_RCC_OscConfig+0x76c>)
 8014bbc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8014bbe:	f003 0302 	and.w	r3, r3, #2
 8014bc2:	2b00      	cmp	r3, #0
 8014bc4:	d0ee      	beq.n	8014ba4 <HAL_RCC_OscConfig+0x5f0>
 8014bc6:	e014      	b.n	8014bf2 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8014bc8:	f7fc fdd2 	bl	8011770 <HAL_GetTick>
 8014bcc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8014bce:	e00a      	b.n	8014be6 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8014bd0:	f7fc fdce 	bl	8011770 <HAL_GetTick>
 8014bd4:	4602      	mov	r2, r0
 8014bd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014bd8:	1ad3      	subs	r3, r2, r3
 8014bda:	f241 3288 	movw	r2, #5000	@ 0x1388
 8014bde:	4293      	cmp	r3, r2
 8014be0:	d901      	bls.n	8014be6 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8014be2:	2303      	movs	r3, #3
 8014be4:	e138      	b.n	8014e58 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8014be6:	4b4e      	ldr	r3, [pc, #312]	@ (8014d20 <HAL_RCC_OscConfig+0x76c>)
 8014be8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8014bea:	f003 0302 	and.w	r3, r3, #2
 8014bee:	2b00      	cmp	r3, #0
 8014bf0:	d1ee      	bne.n	8014bd0 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8014bf2:	687b      	ldr	r3, [r7, #4]
 8014bf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014bf6:	2b00      	cmp	r3, #0
 8014bf8:	f000 812d 	beq.w	8014e56 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8014bfc:	4b48      	ldr	r3, [pc, #288]	@ (8014d20 <HAL_RCC_OscConfig+0x76c>)
 8014bfe:	691b      	ldr	r3, [r3, #16]
 8014c00:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8014c04:	2b18      	cmp	r3, #24
 8014c06:	f000 80bd 	beq.w	8014d84 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8014c0a:	687b      	ldr	r3, [r7, #4]
 8014c0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014c0e:	2b02      	cmp	r3, #2
 8014c10:	f040 809e 	bne.w	8014d50 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8014c14:	4b42      	ldr	r3, [pc, #264]	@ (8014d20 <HAL_RCC_OscConfig+0x76c>)
 8014c16:	681b      	ldr	r3, [r3, #0]
 8014c18:	4a41      	ldr	r2, [pc, #260]	@ (8014d20 <HAL_RCC_OscConfig+0x76c>)
 8014c1a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8014c1e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8014c20:	f7fc fda6 	bl	8011770 <HAL_GetTick>
 8014c24:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8014c26:	e008      	b.n	8014c3a <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8014c28:	f7fc fda2 	bl	8011770 <HAL_GetTick>
 8014c2c:	4602      	mov	r2, r0
 8014c2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014c30:	1ad3      	subs	r3, r2, r3
 8014c32:	2b02      	cmp	r3, #2
 8014c34:	d901      	bls.n	8014c3a <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8014c36:	2303      	movs	r3, #3
 8014c38:	e10e      	b.n	8014e58 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8014c3a:	4b39      	ldr	r3, [pc, #228]	@ (8014d20 <HAL_RCC_OscConfig+0x76c>)
 8014c3c:	681b      	ldr	r3, [r3, #0]
 8014c3e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8014c42:	2b00      	cmp	r3, #0
 8014c44:	d1f0      	bne.n	8014c28 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8014c46:	4b36      	ldr	r3, [pc, #216]	@ (8014d20 <HAL_RCC_OscConfig+0x76c>)
 8014c48:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8014c4a:	4b37      	ldr	r3, [pc, #220]	@ (8014d28 <HAL_RCC_OscConfig+0x774>)
 8014c4c:	4013      	ands	r3, r2
 8014c4e:	687a      	ldr	r2, [r7, #4]
 8014c50:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8014c52:	687a      	ldr	r2, [r7, #4]
 8014c54:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8014c56:	0112      	lsls	r2, r2, #4
 8014c58:	430a      	orrs	r2, r1
 8014c5a:	4931      	ldr	r1, [pc, #196]	@ (8014d20 <HAL_RCC_OscConfig+0x76c>)
 8014c5c:	4313      	orrs	r3, r2
 8014c5e:	628b      	str	r3, [r1, #40]	@ 0x28
 8014c60:	687b      	ldr	r3, [r7, #4]
 8014c62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014c64:	3b01      	subs	r3, #1
 8014c66:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8014c6a:	687b      	ldr	r3, [r7, #4]
 8014c6c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8014c6e:	3b01      	subs	r3, #1
 8014c70:	025b      	lsls	r3, r3, #9
 8014c72:	b29b      	uxth	r3, r3
 8014c74:	431a      	orrs	r2, r3
 8014c76:	687b      	ldr	r3, [r7, #4]
 8014c78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8014c7a:	3b01      	subs	r3, #1
 8014c7c:	041b      	lsls	r3, r3, #16
 8014c7e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8014c82:	431a      	orrs	r2, r3
 8014c84:	687b      	ldr	r3, [r7, #4]
 8014c86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8014c88:	3b01      	subs	r3, #1
 8014c8a:	061b      	lsls	r3, r3, #24
 8014c8c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8014c90:	4923      	ldr	r1, [pc, #140]	@ (8014d20 <HAL_RCC_OscConfig+0x76c>)
 8014c92:	4313      	orrs	r3, r2
 8014c94:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8014c96:	4b22      	ldr	r3, [pc, #136]	@ (8014d20 <HAL_RCC_OscConfig+0x76c>)
 8014c98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014c9a:	4a21      	ldr	r2, [pc, #132]	@ (8014d20 <HAL_RCC_OscConfig+0x76c>)
 8014c9c:	f023 0301 	bic.w	r3, r3, #1
 8014ca0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8014ca2:	4b1f      	ldr	r3, [pc, #124]	@ (8014d20 <HAL_RCC_OscConfig+0x76c>)
 8014ca4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8014ca6:	4b21      	ldr	r3, [pc, #132]	@ (8014d2c <HAL_RCC_OscConfig+0x778>)
 8014ca8:	4013      	ands	r3, r2
 8014caa:	687a      	ldr	r2, [r7, #4]
 8014cac:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8014cae:	00d2      	lsls	r2, r2, #3
 8014cb0:	491b      	ldr	r1, [pc, #108]	@ (8014d20 <HAL_RCC_OscConfig+0x76c>)
 8014cb2:	4313      	orrs	r3, r2
 8014cb4:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8014cb6:	4b1a      	ldr	r3, [pc, #104]	@ (8014d20 <HAL_RCC_OscConfig+0x76c>)
 8014cb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014cba:	f023 020c 	bic.w	r2, r3, #12
 8014cbe:	687b      	ldr	r3, [r7, #4]
 8014cc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8014cc2:	4917      	ldr	r1, [pc, #92]	@ (8014d20 <HAL_RCC_OscConfig+0x76c>)
 8014cc4:	4313      	orrs	r3, r2
 8014cc6:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8014cc8:	4b15      	ldr	r3, [pc, #84]	@ (8014d20 <HAL_RCC_OscConfig+0x76c>)
 8014cca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014ccc:	f023 0202 	bic.w	r2, r3, #2
 8014cd0:	687b      	ldr	r3, [r7, #4]
 8014cd2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8014cd4:	4912      	ldr	r1, [pc, #72]	@ (8014d20 <HAL_RCC_OscConfig+0x76c>)
 8014cd6:	4313      	orrs	r3, r2
 8014cd8:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8014cda:	4b11      	ldr	r3, [pc, #68]	@ (8014d20 <HAL_RCC_OscConfig+0x76c>)
 8014cdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014cde:	4a10      	ldr	r2, [pc, #64]	@ (8014d20 <HAL_RCC_OscConfig+0x76c>)
 8014ce0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8014ce4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8014ce6:	4b0e      	ldr	r3, [pc, #56]	@ (8014d20 <HAL_RCC_OscConfig+0x76c>)
 8014ce8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014cea:	4a0d      	ldr	r2, [pc, #52]	@ (8014d20 <HAL_RCC_OscConfig+0x76c>)
 8014cec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8014cf0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8014cf2:	4b0b      	ldr	r3, [pc, #44]	@ (8014d20 <HAL_RCC_OscConfig+0x76c>)
 8014cf4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014cf6:	4a0a      	ldr	r2, [pc, #40]	@ (8014d20 <HAL_RCC_OscConfig+0x76c>)
 8014cf8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8014cfc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8014cfe:	4b08      	ldr	r3, [pc, #32]	@ (8014d20 <HAL_RCC_OscConfig+0x76c>)
 8014d00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014d02:	4a07      	ldr	r2, [pc, #28]	@ (8014d20 <HAL_RCC_OscConfig+0x76c>)
 8014d04:	f043 0301 	orr.w	r3, r3, #1
 8014d08:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8014d0a:	4b05      	ldr	r3, [pc, #20]	@ (8014d20 <HAL_RCC_OscConfig+0x76c>)
 8014d0c:	681b      	ldr	r3, [r3, #0]
 8014d0e:	4a04      	ldr	r2, [pc, #16]	@ (8014d20 <HAL_RCC_OscConfig+0x76c>)
 8014d10:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8014d14:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8014d16:	f7fc fd2b 	bl	8011770 <HAL_GetTick>
 8014d1a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8014d1c:	e011      	b.n	8014d42 <HAL_RCC_OscConfig+0x78e>
 8014d1e:	bf00      	nop
 8014d20:	58024400 	.word	0x58024400
 8014d24:	58024800 	.word	0x58024800
 8014d28:	fffffc0c 	.word	0xfffffc0c
 8014d2c:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8014d30:	f7fc fd1e 	bl	8011770 <HAL_GetTick>
 8014d34:	4602      	mov	r2, r0
 8014d36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014d38:	1ad3      	subs	r3, r2, r3
 8014d3a:	2b02      	cmp	r3, #2
 8014d3c:	d901      	bls.n	8014d42 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8014d3e:	2303      	movs	r3, #3
 8014d40:	e08a      	b.n	8014e58 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8014d42:	4b47      	ldr	r3, [pc, #284]	@ (8014e60 <HAL_RCC_OscConfig+0x8ac>)
 8014d44:	681b      	ldr	r3, [r3, #0]
 8014d46:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8014d4a:	2b00      	cmp	r3, #0
 8014d4c:	d0f0      	beq.n	8014d30 <HAL_RCC_OscConfig+0x77c>
 8014d4e:	e082      	b.n	8014e56 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8014d50:	4b43      	ldr	r3, [pc, #268]	@ (8014e60 <HAL_RCC_OscConfig+0x8ac>)
 8014d52:	681b      	ldr	r3, [r3, #0]
 8014d54:	4a42      	ldr	r2, [pc, #264]	@ (8014e60 <HAL_RCC_OscConfig+0x8ac>)
 8014d56:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8014d5a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8014d5c:	f7fc fd08 	bl	8011770 <HAL_GetTick>
 8014d60:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8014d62:	e008      	b.n	8014d76 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8014d64:	f7fc fd04 	bl	8011770 <HAL_GetTick>
 8014d68:	4602      	mov	r2, r0
 8014d6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014d6c:	1ad3      	subs	r3, r2, r3
 8014d6e:	2b02      	cmp	r3, #2
 8014d70:	d901      	bls.n	8014d76 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8014d72:	2303      	movs	r3, #3
 8014d74:	e070      	b.n	8014e58 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8014d76:	4b3a      	ldr	r3, [pc, #232]	@ (8014e60 <HAL_RCC_OscConfig+0x8ac>)
 8014d78:	681b      	ldr	r3, [r3, #0]
 8014d7a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8014d7e:	2b00      	cmp	r3, #0
 8014d80:	d1f0      	bne.n	8014d64 <HAL_RCC_OscConfig+0x7b0>
 8014d82:	e068      	b.n	8014e56 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8014d84:	4b36      	ldr	r3, [pc, #216]	@ (8014e60 <HAL_RCC_OscConfig+0x8ac>)
 8014d86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014d88:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8014d8a:	4b35      	ldr	r3, [pc, #212]	@ (8014e60 <HAL_RCC_OscConfig+0x8ac>)
 8014d8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014d8e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8014d90:	687b      	ldr	r3, [r7, #4]
 8014d92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014d94:	2b01      	cmp	r3, #1
 8014d96:	d031      	beq.n	8014dfc <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8014d98:	693b      	ldr	r3, [r7, #16]
 8014d9a:	f003 0203 	and.w	r2, r3, #3
 8014d9e:	687b      	ldr	r3, [r7, #4]
 8014da0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8014da2:	429a      	cmp	r2, r3
 8014da4:	d12a      	bne.n	8014dfc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8014da6:	693b      	ldr	r3, [r7, #16]
 8014da8:	091b      	lsrs	r3, r3, #4
 8014daa:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8014dae:	687b      	ldr	r3, [r7, #4]
 8014db0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8014db2:	429a      	cmp	r2, r3
 8014db4:	d122      	bne.n	8014dfc <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8014db6:	68fb      	ldr	r3, [r7, #12]
 8014db8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8014dbc:	687b      	ldr	r3, [r7, #4]
 8014dbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014dc0:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8014dc2:	429a      	cmp	r2, r3
 8014dc4:	d11a      	bne.n	8014dfc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8014dc6:	68fb      	ldr	r3, [r7, #12]
 8014dc8:	0a5b      	lsrs	r3, r3, #9
 8014dca:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8014dce:	687b      	ldr	r3, [r7, #4]
 8014dd0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8014dd2:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8014dd4:	429a      	cmp	r2, r3
 8014dd6:	d111      	bne.n	8014dfc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8014dd8:	68fb      	ldr	r3, [r7, #12]
 8014dda:	0c1b      	lsrs	r3, r3, #16
 8014ddc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8014de0:	687b      	ldr	r3, [r7, #4]
 8014de2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8014de4:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8014de6:	429a      	cmp	r2, r3
 8014de8:	d108      	bne.n	8014dfc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8014dea:	68fb      	ldr	r3, [r7, #12]
 8014dec:	0e1b      	lsrs	r3, r3, #24
 8014dee:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8014df2:	687b      	ldr	r3, [r7, #4]
 8014df4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8014df6:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8014df8:	429a      	cmp	r2, r3
 8014dfa:	d001      	beq.n	8014e00 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8014dfc:	2301      	movs	r3, #1
 8014dfe:	e02b      	b.n	8014e58 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8014e00:	4b17      	ldr	r3, [pc, #92]	@ (8014e60 <HAL_RCC_OscConfig+0x8ac>)
 8014e02:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8014e04:	08db      	lsrs	r3, r3, #3
 8014e06:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8014e0a:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8014e0c:	687b      	ldr	r3, [r7, #4]
 8014e0e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8014e10:	693a      	ldr	r2, [r7, #16]
 8014e12:	429a      	cmp	r2, r3
 8014e14:	d01f      	beq.n	8014e56 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8014e16:	4b12      	ldr	r3, [pc, #72]	@ (8014e60 <HAL_RCC_OscConfig+0x8ac>)
 8014e18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014e1a:	4a11      	ldr	r2, [pc, #68]	@ (8014e60 <HAL_RCC_OscConfig+0x8ac>)
 8014e1c:	f023 0301 	bic.w	r3, r3, #1
 8014e20:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8014e22:	f7fc fca5 	bl	8011770 <HAL_GetTick>
 8014e26:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8014e28:	bf00      	nop
 8014e2a:	f7fc fca1 	bl	8011770 <HAL_GetTick>
 8014e2e:	4602      	mov	r2, r0
 8014e30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014e32:	4293      	cmp	r3, r2
 8014e34:	d0f9      	beq.n	8014e2a <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8014e36:	4b0a      	ldr	r3, [pc, #40]	@ (8014e60 <HAL_RCC_OscConfig+0x8ac>)
 8014e38:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8014e3a:	4b0a      	ldr	r3, [pc, #40]	@ (8014e64 <HAL_RCC_OscConfig+0x8b0>)
 8014e3c:	4013      	ands	r3, r2
 8014e3e:	687a      	ldr	r2, [r7, #4]
 8014e40:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8014e42:	00d2      	lsls	r2, r2, #3
 8014e44:	4906      	ldr	r1, [pc, #24]	@ (8014e60 <HAL_RCC_OscConfig+0x8ac>)
 8014e46:	4313      	orrs	r3, r2
 8014e48:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8014e4a:	4b05      	ldr	r3, [pc, #20]	@ (8014e60 <HAL_RCC_OscConfig+0x8ac>)
 8014e4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014e4e:	4a04      	ldr	r2, [pc, #16]	@ (8014e60 <HAL_RCC_OscConfig+0x8ac>)
 8014e50:	f043 0301 	orr.w	r3, r3, #1
 8014e54:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8014e56:	2300      	movs	r3, #0
}
 8014e58:	4618      	mov	r0, r3
 8014e5a:	3730      	adds	r7, #48	@ 0x30
 8014e5c:	46bd      	mov	sp, r7
 8014e5e:	bd80      	pop	{r7, pc}
 8014e60:	58024400 	.word	0x58024400
 8014e64:	ffff0007 	.word	0xffff0007

08014e68 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8014e68:	b580      	push	{r7, lr}
 8014e6a:	b086      	sub	sp, #24
 8014e6c:	af00      	add	r7, sp, #0
 8014e6e:	6078      	str	r0, [r7, #4]
 8014e70:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8014e72:	687b      	ldr	r3, [r7, #4]
 8014e74:	2b00      	cmp	r3, #0
 8014e76:	d101      	bne.n	8014e7c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8014e78:	2301      	movs	r3, #1
 8014e7a:	e19c      	b.n	80151b6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8014e7c:	4b8a      	ldr	r3, [pc, #552]	@ (80150a8 <HAL_RCC_ClockConfig+0x240>)
 8014e7e:	681b      	ldr	r3, [r3, #0]
 8014e80:	f003 030f 	and.w	r3, r3, #15
 8014e84:	683a      	ldr	r2, [r7, #0]
 8014e86:	429a      	cmp	r2, r3
 8014e88:	d910      	bls.n	8014eac <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8014e8a:	4b87      	ldr	r3, [pc, #540]	@ (80150a8 <HAL_RCC_ClockConfig+0x240>)
 8014e8c:	681b      	ldr	r3, [r3, #0]
 8014e8e:	f023 020f 	bic.w	r2, r3, #15
 8014e92:	4985      	ldr	r1, [pc, #532]	@ (80150a8 <HAL_RCC_ClockConfig+0x240>)
 8014e94:	683b      	ldr	r3, [r7, #0]
 8014e96:	4313      	orrs	r3, r2
 8014e98:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8014e9a:	4b83      	ldr	r3, [pc, #524]	@ (80150a8 <HAL_RCC_ClockConfig+0x240>)
 8014e9c:	681b      	ldr	r3, [r3, #0]
 8014e9e:	f003 030f 	and.w	r3, r3, #15
 8014ea2:	683a      	ldr	r2, [r7, #0]
 8014ea4:	429a      	cmp	r2, r3
 8014ea6:	d001      	beq.n	8014eac <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8014ea8:	2301      	movs	r3, #1
 8014eaa:	e184      	b.n	80151b6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8014eac:	687b      	ldr	r3, [r7, #4]
 8014eae:	681b      	ldr	r3, [r3, #0]
 8014eb0:	f003 0304 	and.w	r3, r3, #4
 8014eb4:	2b00      	cmp	r3, #0
 8014eb6:	d010      	beq.n	8014eda <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8014eb8:	687b      	ldr	r3, [r7, #4]
 8014eba:	691a      	ldr	r2, [r3, #16]
 8014ebc:	4b7b      	ldr	r3, [pc, #492]	@ (80150ac <HAL_RCC_ClockConfig+0x244>)
 8014ebe:	699b      	ldr	r3, [r3, #24]
 8014ec0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8014ec4:	429a      	cmp	r2, r3
 8014ec6:	d908      	bls.n	8014eda <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8014ec8:	4b78      	ldr	r3, [pc, #480]	@ (80150ac <HAL_RCC_ClockConfig+0x244>)
 8014eca:	699b      	ldr	r3, [r3, #24]
 8014ecc:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8014ed0:	687b      	ldr	r3, [r7, #4]
 8014ed2:	691b      	ldr	r3, [r3, #16]
 8014ed4:	4975      	ldr	r1, [pc, #468]	@ (80150ac <HAL_RCC_ClockConfig+0x244>)
 8014ed6:	4313      	orrs	r3, r2
 8014ed8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8014eda:	687b      	ldr	r3, [r7, #4]
 8014edc:	681b      	ldr	r3, [r3, #0]
 8014ede:	f003 0308 	and.w	r3, r3, #8
 8014ee2:	2b00      	cmp	r3, #0
 8014ee4:	d010      	beq.n	8014f08 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8014ee6:	687b      	ldr	r3, [r7, #4]
 8014ee8:	695a      	ldr	r2, [r3, #20]
 8014eea:	4b70      	ldr	r3, [pc, #448]	@ (80150ac <HAL_RCC_ClockConfig+0x244>)
 8014eec:	69db      	ldr	r3, [r3, #28]
 8014eee:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8014ef2:	429a      	cmp	r2, r3
 8014ef4:	d908      	bls.n	8014f08 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8014ef6:	4b6d      	ldr	r3, [pc, #436]	@ (80150ac <HAL_RCC_ClockConfig+0x244>)
 8014ef8:	69db      	ldr	r3, [r3, #28]
 8014efa:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8014efe:	687b      	ldr	r3, [r7, #4]
 8014f00:	695b      	ldr	r3, [r3, #20]
 8014f02:	496a      	ldr	r1, [pc, #424]	@ (80150ac <HAL_RCC_ClockConfig+0x244>)
 8014f04:	4313      	orrs	r3, r2
 8014f06:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8014f08:	687b      	ldr	r3, [r7, #4]
 8014f0a:	681b      	ldr	r3, [r3, #0]
 8014f0c:	f003 0310 	and.w	r3, r3, #16
 8014f10:	2b00      	cmp	r3, #0
 8014f12:	d010      	beq.n	8014f36 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8014f14:	687b      	ldr	r3, [r7, #4]
 8014f16:	699a      	ldr	r2, [r3, #24]
 8014f18:	4b64      	ldr	r3, [pc, #400]	@ (80150ac <HAL_RCC_ClockConfig+0x244>)
 8014f1a:	69db      	ldr	r3, [r3, #28]
 8014f1c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8014f20:	429a      	cmp	r2, r3
 8014f22:	d908      	bls.n	8014f36 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8014f24:	4b61      	ldr	r3, [pc, #388]	@ (80150ac <HAL_RCC_ClockConfig+0x244>)
 8014f26:	69db      	ldr	r3, [r3, #28]
 8014f28:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8014f2c:	687b      	ldr	r3, [r7, #4]
 8014f2e:	699b      	ldr	r3, [r3, #24]
 8014f30:	495e      	ldr	r1, [pc, #376]	@ (80150ac <HAL_RCC_ClockConfig+0x244>)
 8014f32:	4313      	orrs	r3, r2
 8014f34:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8014f36:	687b      	ldr	r3, [r7, #4]
 8014f38:	681b      	ldr	r3, [r3, #0]
 8014f3a:	f003 0320 	and.w	r3, r3, #32
 8014f3e:	2b00      	cmp	r3, #0
 8014f40:	d010      	beq.n	8014f64 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8014f42:	687b      	ldr	r3, [r7, #4]
 8014f44:	69da      	ldr	r2, [r3, #28]
 8014f46:	4b59      	ldr	r3, [pc, #356]	@ (80150ac <HAL_RCC_ClockConfig+0x244>)
 8014f48:	6a1b      	ldr	r3, [r3, #32]
 8014f4a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8014f4e:	429a      	cmp	r2, r3
 8014f50:	d908      	bls.n	8014f64 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8014f52:	4b56      	ldr	r3, [pc, #344]	@ (80150ac <HAL_RCC_ClockConfig+0x244>)
 8014f54:	6a1b      	ldr	r3, [r3, #32]
 8014f56:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8014f5a:	687b      	ldr	r3, [r7, #4]
 8014f5c:	69db      	ldr	r3, [r3, #28]
 8014f5e:	4953      	ldr	r1, [pc, #332]	@ (80150ac <HAL_RCC_ClockConfig+0x244>)
 8014f60:	4313      	orrs	r3, r2
 8014f62:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8014f64:	687b      	ldr	r3, [r7, #4]
 8014f66:	681b      	ldr	r3, [r3, #0]
 8014f68:	f003 0302 	and.w	r3, r3, #2
 8014f6c:	2b00      	cmp	r3, #0
 8014f6e:	d010      	beq.n	8014f92 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8014f70:	687b      	ldr	r3, [r7, #4]
 8014f72:	68da      	ldr	r2, [r3, #12]
 8014f74:	4b4d      	ldr	r3, [pc, #308]	@ (80150ac <HAL_RCC_ClockConfig+0x244>)
 8014f76:	699b      	ldr	r3, [r3, #24]
 8014f78:	f003 030f 	and.w	r3, r3, #15
 8014f7c:	429a      	cmp	r2, r3
 8014f7e:	d908      	bls.n	8014f92 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8014f80:	4b4a      	ldr	r3, [pc, #296]	@ (80150ac <HAL_RCC_ClockConfig+0x244>)
 8014f82:	699b      	ldr	r3, [r3, #24]
 8014f84:	f023 020f 	bic.w	r2, r3, #15
 8014f88:	687b      	ldr	r3, [r7, #4]
 8014f8a:	68db      	ldr	r3, [r3, #12]
 8014f8c:	4947      	ldr	r1, [pc, #284]	@ (80150ac <HAL_RCC_ClockConfig+0x244>)
 8014f8e:	4313      	orrs	r3, r2
 8014f90:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8014f92:	687b      	ldr	r3, [r7, #4]
 8014f94:	681b      	ldr	r3, [r3, #0]
 8014f96:	f003 0301 	and.w	r3, r3, #1
 8014f9a:	2b00      	cmp	r3, #0
 8014f9c:	d055      	beq.n	801504a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8014f9e:	4b43      	ldr	r3, [pc, #268]	@ (80150ac <HAL_RCC_ClockConfig+0x244>)
 8014fa0:	699b      	ldr	r3, [r3, #24]
 8014fa2:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8014fa6:	687b      	ldr	r3, [r7, #4]
 8014fa8:	689b      	ldr	r3, [r3, #8]
 8014faa:	4940      	ldr	r1, [pc, #256]	@ (80150ac <HAL_RCC_ClockConfig+0x244>)
 8014fac:	4313      	orrs	r3, r2
 8014fae:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8014fb0:	687b      	ldr	r3, [r7, #4]
 8014fb2:	685b      	ldr	r3, [r3, #4]
 8014fb4:	2b02      	cmp	r3, #2
 8014fb6:	d107      	bne.n	8014fc8 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8014fb8:	4b3c      	ldr	r3, [pc, #240]	@ (80150ac <HAL_RCC_ClockConfig+0x244>)
 8014fba:	681b      	ldr	r3, [r3, #0]
 8014fbc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8014fc0:	2b00      	cmp	r3, #0
 8014fc2:	d121      	bne.n	8015008 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8014fc4:	2301      	movs	r3, #1
 8014fc6:	e0f6      	b.n	80151b6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8014fc8:	687b      	ldr	r3, [r7, #4]
 8014fca:	685b      	ldr	r3, [r3, #4]
 8014fcc:	2b03      	cmp	r3, #3
 8014fce:	d107      	bne.n	8014fe0 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8014fd0:	4b36      	ldr	r3, [pc, #216]	@ (80150ac <HAL_RCC_ClockConfig+0x244>)
 8014fd2:	681b      	ldr	r3, [r3, #0]
 8014fd4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8014fd8:	2b00      	cmp	r3, #0
 8014fda:	d115      	bne.n	8015008 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8014fdc:	2301      	movs	r3, #1
 8014fde:	e0ea      	b.n	80151b6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8014fe0:	687b      	ldr	r3, [r7, #4]
 8014fe2:	685b      	ldr	r3, [r3, #4]
 8014fe4:	2b01      	cmp	r3, #1
 8014fe6:	d107      	bne.n	8014ff8 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8014fe8:	4b30      	ldr	r3, [pc, #192]	@ (80150ac <HAL_RCC_ClockConfig+0x244>)
 8014fea:	681b      	ldr	r3, [r3, #0]
 8014fec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8014ff0:	2b00      	cmp	r3, #0
 8014ff2:	d109      	bne.n	8015008 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8014ff4:	2301      	movs	r3, #1
 8014ff6:	e0de      	b.n	80151b6 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8014ff8:	4b2c      	ldr	r3, [pc, #176]	@ (80150ac <HAL_RCC_ClockConfig+0x244>)
 8014ffa:	681b      	ldr	r3, [r3, #0]
 8014ffc:	f003 0304 	and.w	r3, r3, #4
 8015000:	2b00      	cmp	r3, #0
 8015002:	d101      	bne.n	8015008 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8015004:	2301      	movs	r3, #1
 8015006:	e0d6      	b.n	80151b6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8015008:	4b28      	ldr	r3, [pc, #160]	@ (80150ac <HAL_RCC_ClockConfig+0x244>)
 801500a:	691b      	ldr	r3, [r3, #16]
 801500c:	f023 0207 	bic.w	r2, r3, #7
 8015010:	687b      	ldr	r3, [r7, #4]
 8015012:	685b      	ldr	r3, [r3, #4]
 8015014:	4925      	ldr	r1, [pc, #148]	@ (80150ac <HAL_RCC_ClockConfig+0x244>)
 8015016:	4313      	orrs	r3, r2
 8015018:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801501a:	f7fc fba9 	bl	8011770 <HAL_GetTick>
 801501e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8015020:	e00a      	b.n	8015038 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8015022:	f7fc fba5 	bl	8011770 <HAL_GetTick>
 8015026:	4602      	mov	r2, r0
 8015028:	697b      	ldr	r3, [r7, #20]
 801502a:	1ad3      	subs	r3, r2, r3
 801502c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8015030:	4293      	cmp	r3, r2
 8015032:	d901      	bls.n	8015038 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8015034:	2303      	movs	r3, #3
 8015036:	e0be      	b.n	80151b6 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8015038:	4b1c      	ldr	r3, [pc, #112]	@ (80150ac <HAL_RCC_ClockConfig+0x244>)
 801503a:	691b      	ldr	r3, [r3, #16]
 801503c:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8015040:	687b      	ldr	r3, [r7, #4]
 8015042:	685b      	ldr	r3, [r3, #4]
 8015044:	00db      	lsls	r3, r3, #3
 8015046:	429a      	cmp	r2, r3
 8015048:	d1eb      	bne.n	8015022 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 801504a:	687b      	ldr	r3, [r7, #4]
 801504c:	681b      	ldr	r3, [r3, #0]
 801504e:	f003 0302 	and.w	r3, r3, #2
 8015052:	2b00      	cmp	r3, #0
 8015054:	d010      	beq.n	8015078 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8015056:	687b      	ldr	r3, [r7, #4]
 8015058:	68da      	ldr	r2, [r3, #12]
 801505a:	4b14      	ldr	r3, [pc, #80]	@ (80150ac <HAL_RCC_ClockConfig+0x244>)
 801505c:	699b      	ldr	r3, [r3, #24]
 801505e:	f003 030f 	and.w	r3, r3, #15
 8015062:	429a      	cmp	r2, r3
 8015064:	d208      	bcs.n	8015078 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8015066:	4b11      	ldr	r3, [pc, #68]	@ (80150ac <HAL_RCC_ClockConfig+0x244>)
 8015068:	699b      	ldr	r3, [r3, #24]
 801506a:	f023 020f 	bic.w	r2, r3, #15
 801506e:	687b      	ldr	r3, [r7, #4]
 8015070:	68db      	ldr	r3, [r3, #12]
 8015072:	490e      	ldr	r1, [pc, #56]	@ (80150ac <HAL_RCC_ClockConfig+0x244>)
 8015074:	4313      	orrs	r3, r2
 8015076:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8015078:	4b0b      	ldr	r3, [pc, #44]	@ (80150a8 <HAL_RCC_ClockConfig+0x240>)
 801507a:	681b      	ldr	r3, [r3, #0]
 801507c:	f003 030f 	and.w	r3, r3, #15
 8015080:	683a      	ldr	r2, [r7, #0]
 8015082:	429a      	cmp	r2, r3
 8015084:	d214      	bcs.n	80150b0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8015086:	4b08      	ldr	r3, [pc, #32]	@ (80150a8 <HAL_RCC_ClockConfig+0x240>)
 8015088:	681b      	ldr	r3, [r3, #0]
 801508a:	f023 020f 	bic.w	r2, r3, #15
 801508e:	4906      	ldr	r1, [pc, #24]	@ (80150a8 <HAL_RCC_ClockConfig+0x240>)
 8015090:	683b      	ldr	r3, [r7, #0]
 8015092:	4313      	orrs	r3, r2
 8015094:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8015096:	4b04      	ldr	r3, [pc, #16]	@ (80150a8 <HAL_RCC_ClockConfig+0x240>)
 8015098:	681b      	ldr	r3, [r3, #0]
 801509a:	f003 030f 	and.w	r3, r3, #15
 801509e:	683a      	ldr	r2, [r7, #0]
 80150a0:	429a      	cmp	r2, r3
 80150a2:	d005      	beq.n	80150b0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80150a4:	2301      	movs	r3, #1
 80150a6:	e086      	b.n	80151b6 <HAL_RCC_ClockConfig+0x34e>
 80150a8:	52002000 	.word	0x52002000
 80150ac:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80150b0:	687b      	ldr	r3, [r7, #4]
 80150b2:	681b      	ldr	r3, [r3, #0]
 80150b4:	f003 0304 	and.w	r3, r3, #4
 80150b8:	2b00      	cmp	r3, #0
 80150ba:	d010      	beq.n	80150de <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80150bc:	687b      	ldr	r3, [r7, #4]
 80150be:	691a      	ldr	r2, [r3, #16]
 80150c0:	4b3f      	ldr	r3, [pc, #252]	@ (80151c0 <HAL_RCC_ClockConfig+0x358>)
 80150c2:	699b      	ldr	r3, [r3, #24]
 80150c4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80150c8:	429a      	cmp	r2, r3
 80150ca:	d208      	bcs.n	80150de <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80150cc:	4b3c      	ldr	r3, [pc, #240]	@ (80151c0 <HAL_RCC_ClockConfig+0x358>)
 80150ce:	699b      	ldr	r3, [r3, #24]
 80150d0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80150d4:	687b      	ldr	r3, [r7, #4]
 80150d6:	691b      	ldr	r3, [r3, #16]
 80150d8:	4939      	ldr	r1, [pc, #228]	@ (80151c0 <HAL_RCC_ClockConfig+0x358>)
 80150da:	4313      	orrs	r3, r2
 80150dc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80150de:	687b      	ldr	r3, [r7, #4]
 80150e0:	681b      	ldr	r3, [r3, #0]
 80150e2:	f003 0308 	and.w	r3, r3, #8
 80150e6:	2b00      	cmp	r3, #0
 80150e8:	d010      	beq.n	801510c <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80150ea:	687b      	ldr	r3, [r7, #4]
 80150ec:	695a      	ldr	r2, [r3, #20]
 80150ee:	4b34      	ldr	r3, [pc, #208]	@ (80151c0 <HAL_RCC_ClockConfig+0x358>)
 80150f0:	69db      	ldr	r3, [r3, #28]
 80150f2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80150f6:	429a      	cmp	r2, r3
 80150f8:	d208      	bcs.n	801510c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80150fa:	4b31      	ldr	r3, [pc, #196]	@ (80151c0 <HAL_RCC_ClockConfig+0x358>)
 80150fc:	69db      	ldr	r3, [r3, #28]
 80150fe:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8015102:	687b      	ldr	r3, [r7, #4]
 8015104:	695b      	ldr	r3, [r3, #20]
 8015106:	492e      	ldr	r1, [pc, #184]	@ (80151c0 <HAL_RCC_ClockConfig+0x358>)
 8015108:	4313      	orrs	r3, r2
 801510a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801510c:	687b      	ldr	r3, [r7, #4]
 801510e:	681b      	ldr	r3, [r3, #0]
 8015110:	f003 0310 	and.w	r3, r3, #16
 8015114:	2b00      	cmp	r3, #0
 8015116:	d010      	beq.n	801513a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8015118:	687b      	ldr	r3, [r7, #4]
 801511a:	699a      	ldr	r2, [r3, #24]
 801511c:	4b28      	ldr	r3, [pc, #160]	@ (80151c0 <HAL_RCC_ClockConfig+0x358>)
 801511e:	69db      	ldr	r3, [r3, #28]
 8015120:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8015124:	429a      	cmp	r2, r3
 8015126:	d208      	bcs.n	801513a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8015128:	4b25      	ldr	r3, [pc, #148]	@ (80151c0 <HAL_RCC_ClockConfig+0x358>)
 801512a:	69db      	ldr	r3, [r3, #28]
 801512c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8015130:	687b      	ldr	r3, [r7, #4]
 8015132:	699b      	ldr	r3, [r3, #24]
 8015134:	4922      	ldr	r1, [pc, #136]	@ (80151c0 <HAL_RCC_ClockConfig+0x358>)
 8015136:	4313      	orrs	r3, r2
 8015138:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 801513a:	687b      	ldr	r3, [r7, #4]
 801513c:	681b      	ldr	r3, [r3, #0]
 801513e:	f003 0320 	and.w	r3, r3, #32
 8015142:	2b00      	cmp	r3, #0
 8015144:	d010      	beq.n	8015168 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8015146:	687b      	ldr	r3, [r7, #4]
 8015148:	69da      	ldr	r2, [r3, #28]
 801514a:	4b1d      	ldr	r3, [pc, #116]	@ (80151c0 <HAL_RCC_ClockConfig+0x358>)
 801514c:	6a1b      	ldr	r3, [r3, #32]
 801514e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8015152:	429a      	cmp	r2, r3
 8015154:	d208      	bcs.n	8015168 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8015156:	4b1a      	ldr	r3, [pc, #104]	@ (80151c0 <HAL_RCC_ClockConfig+0x358>)
 8015158:	6a1b      	ldr	r3, [r3, #32]
 801515a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 801515e:	687b      	ldr	r3, [r7, #4]
 8015160:	69db      	ldr	r3, [r3, #28]
 8015162:	4917      	ldr	r1, [pc, #92]	@ (80151c0 <HAL_RCC_ClockConfig+0x358>)
 8015164:	4313      	orrs	r3, r2
 8015166:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8015168:	f000 f834 	bl	80151d4 <HAL_RCC_GetSysClockFreq>
 801516c:	4602      	mov	r2, r0
 801516e:	4b14      	ldr	r3, [pc, #80]	@ (80151c0 <HAL_RCC_ClockConfig+0x358>)
 8015170:	699b      	ldr	r3, [r3, #24]
 8015172:	0a1b      	lsrs	r3, r3, #8
 8015174:	f003 030f 	and.w	r3, r3, #15
 8015178:	4912      	ldr	r1, [pc, #72]	@ (80151c4 <HAL_RCC_ClockConfig+0x35c>)
 801517a:	5ccb      	ldrb	r3, [r1, r3]
 801517c:	f003 031f 	and.w	r3, r3, #31
 8015180:	fa22 f303 	lsr.w	r3, r2, r3
 8015184:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8015186:	4b0e      	ldr	r3, [pc, #56]	@ (80151c0 <HAL_RCC_ClockConfig+0x358>)
 8015188:	699b      	ldr	r3, [r3, #24]
 801518a:	f003 030f 	and.w	r3, r3, #15
 801518e:	4a0d      	ldr	r2, [pc, #52]	@ (80151c4 <HAL_RCC_ClockConfig+0x35c>)
 8015190:	5cd3      	ldrb	r3, [r2, r3]
 8015192:	f003 031f 	and.w	r3, r3, #31
 8015196:	693a      	ldr	r2, [r7, #16]
 8015198:	fa22 f303 	lsr.w	r3, r2, r3
 801519c:	4a0a      	ldr	r2, [pc, #40]	@ (80151c8 <HAL_RCC_ClockConfig+0x360>)
 801519e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80151a0:	4a0a      	ldr	r2, [pc, #40]	@ (80151cc <HAL_RCC_ClockConfig+0x364>)
 80151a2:	693b      	ldr	r3, [r7, #16]
 80151a4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80151a6:	4b0a      	ldr	r3, [pc, #40]	@ (80151d0 <HAL_RCC_ClockConfig+0x368>)
 80151a8:	681b      	ldr	r3, [r3, #0]
 80151aa:	4618      	mov	r0, r3
 80151ac:	f7fc fa96 	bl	80116dc <HAL_InitTick>
 80151b0:	4603      	mov	r3, r0
 80151b2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80151b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80151b6:	4618      	mov	r0, r3
 80151b8:	3718      	adds	r7, #24
 80151ba:	46bd      	mov	sp, r7
 80151bc:	bd80      	pop	{r7, pc}
 80151be:	bf00      	nop
 80151c0:	58024400 	.word	0x58024400
 80151c4:	08020554 	.word	0x08020554
 80151c8:	24000034 	.word	0x24000034
 80151cc:	24000030 	.word	0x24000030
 80151d0:	24000038 	.word	0x24000038

080151d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80151d4:	b480      	push	{r7}
 80151d6:	b089      	sub	sp, #36	@ 0x24
 80151d8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80151da:	4bb3      	ldr	r3, [pc, #716]	@ (80154a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80151dc:	691b      	ldr	r3, [r3, #16]
 80151de:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80151e2:	2b18      	cmp	r3, #24
 80151e4:	f200 8155 	bhi.w	8015492 <HAL_RCC_GetSysClockFreq+0x2be>
 80151e8:	a201      	add	r2, pc, #4	@ (adr r2, 80151f0 <HAL_RCC_GetSysClockFreq+0x1c>)
 80151ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80151ee:	bf00      	nop
 80151f0:	08015255 	.word	0x08015255
 80151f4:	08015493 	.word	0x08015493
 80151f8:	08015493 	.word	0x08015493
 80151fc:	08015493 	.word	0x08015493
 8015200:	08015493 	.word	0x08015493
 8015204:	08015493 	.word	0x08015493
 8015208:	08015493 	.word	0x08015493
 801520c:	08015493 	.word	0x08015493
 8015210:	0801527b 	.word	0x0801527b
 8015214:	08015493 	.word	0x08015493
 8015218:	08015493 	.word	0x08015493
 801521c:	08015493 	.word	0x08015493
 8015220:	08015493 	.word	0x08015493
 8015224:	08015493 	.word	0x08015493
 8015228:	08015493 	.word	0x08015493
 801522c:	08015493 	.word	0x08015493
 8015230:	08015281 	.word	0x08015281
 8015234:	08015493 	.word	0x08015493
 8015238:	08015493 	.word	0x08015493
 801523c:	08015493 	.word	0x08015493
 8015240:	08015493 	.word	0x08015493
 8015244:	08015493 	.word	0x08015493
 8015248:	08015493 	.word	0x08015493
 801524c:	08015493 	.word	0x08015493
 8015250:	08015287 	.word	0x08015287
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8015254:	4b94      	ldr	r3, [pc, #592]	@ (80154a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8015256:	681b      	ldr	r3, [r3, #0]
 8015258:	f003 0320 	and.w	r3, r3, #32
 801525c:	2b00      	cmp	r3, #0
 801525e:	d009      	beq.n	8015274 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8015260:	4b91      	ldr	r3, [pc, #580]	@ (80154a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8015262:	681b      	ldr	r3, [r3, #0]
 8015264:	08db      	lsrs	r3, r3, #3
 8015266:	f003 0303 	and.w	r3, r3, #3
 801526a:	4a90      	ldr	r2, [pc, #576]	@ (80154ac <HAL_RCC_GetSysClockFreq+0x2d8>)
 801526c:	fa22 f303 	lsr.w	r3, r2, r3
 8015270:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8015272:	e111      	b.n	8015498 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8015274:	4b8d      	ldr	r3, [pc, #564]	@ (80154ac <HAL_RCC_GetSysClockFreq+0x2d8>)
 8015276:	61bb      	str	r3, [r7, #24]
      break;
 8015278:	e10e      	b.n	8015498 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 801527a:	4b8d      	ldr	r3, [pc, #564]	@ (80154b0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 801527c:	61bb      	str	r3, [r7, #24]
      break;
 801527e:	e10b      	b.n	8015498 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8015280:	4b8c      	ldr	r3, [pc, #560]	@ (80154b4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8015282:	61bb      	str	r3, [r7, #24]
      break;
 8015284:	e108      	b.n	8015498 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8015286:	4b88      	ldr	r3, [pc, #544]	@ (80154a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8015288:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801528a:	f003 0303 	and.w	r3, r3, #3
 801528e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8015290:	4b85      	ldr	r3, [pc, #532]	@ (80154a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8015292:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015294:	091b      	lsrs	r3, r3, #4
 8015296:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801529a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 801529c:	4b82      	ldr	r3, [pc, #520]	@ (80154a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801529e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80152a0:	f003 0301 	and.w	r3, r3, #1
 80152a4:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80152a6:	4b80      	ldr	r3, [pc, #512]	@ (80154a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80152a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80152aa:	08db      	lsrs	r3, r3, #3
 80152ac:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80152b0:	68fa      	ldr	r2, [r7, #12]
 80152b2:	fb02 f303 	mul.w	r3, r2, r3
 80152b6:	ee07 3a90 	vmov	s15, r3
 80152ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80152be:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80152c2:	693b      	ldr	r3, [r7, #16]
 80152c4:	2b00      	cmp	r3, #0
 80152c6:	f000 80e1 	beq.w	801548c <HAL_RCC_GetSysClockFreq+0x2b8>
 80152ca:	697b      	ldr	r3, [r7, #20]
 80152cc:	2b02      	cmp	r3, #2
 80152ce:	f000 8083 	beq.w	80153d8 <HAL_RCC_GetSysClockFreq+0x204>
 80152d2:	697b      	ldr	r3, [r7, #20]
 80152d4:	2b02      	cmp	r3, #2
 80152d6:	f200 80a1 	bhi.w	801541c <HAL_RCC_GetSysClockFreq+0x248>
 80152da:	697b      	ldr	r3, [r7, #20]
 80152dc:	2b00      	cmp	r3, #0
 80152de:	d003      	beq.n	80152e8 <HAL_RCC_GetSysClockFreq+0x114>
 80152e0:	697b      	ldr	r3, [r7, #20]
 80152e2:	2b01      	cmp	r3, #1
 80152e4:	d056      	beq.n	8015394 <HAL_RCC_GetSysClockFreq+0x1c0>
 80152e6:	e099      	b.n	801541c <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80152e8:	4b6f      	ldr	r3, [pc, #444]	@ (80154a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80152ea:	681b      	ldr	r3, [r3, #0]
 80152ec:	f003 0320 	and.w	r3, r3, #32
 80152f0:	2b00      	cmp	r3, #0
 80152f2:	d02d      	beq.n	8015350 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80152f4:	4b6c      	ldr	r3, [pc, #432]	@ (80154a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80152f6:	681b      	ldr	r3, [r3, #0]
 80152f8:	08db      	lsrs	r3, r3, #3
 80152fa:	f003 0303 	and.w	r3, r3, #3
 80152fe:	4a6b      	ldr	r2, [pc, #428]	@ (80154ac <HAL_RCC_GetSysClockFreq+0x2d8>)
 8015300:	fa22 f303 	lsr.w	r3, r2, r3
 8015304:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8015306:	687b      	ldr	r3, [r7, #4]
 8015308:	ee07 3a90 	vmov	s15, r3
 801530c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8015310:	693b      	ldr	r3, [r7, #16]
 8015312:	ee07 3a90 	vmov	s15, r3
 8015316:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801531a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801531e:	4b62      	ldr	r3, [pc, #392]	@ (80154a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8015320:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8015322:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8015326:	ee07 3a90 	vmov	s15, r3
 801532a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801532e:	ed97 6a02 	vldr	s12, [r7, #8]
 8015332:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80154b8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8015336:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801533a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801533e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8015342:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8015346:	ee67 7a27 	vmul.f32	s15, s14, s15
 801534a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 801534e:	e087      	b.n	8015460 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8015350:	693b      	ldr	r3, [r7, #16]
 8015352:	ee07 3a90 	vmov	s15, r3
 8015356:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801535a:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80154bc <HAL_RCC_GetSysClockFreq+0x2e8>
 801535e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8015362:	4b51      	ldr	r3, [pc, #324]	@ (80154a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8015364:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8015366:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801536a:	ee07 3a90 	vmov	s15, r3
 801536e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8015372:	ed97 6a02 	vldr	s12, [r7, #8]
 8015376:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80154b8 <HAL_RCC_GetSysClockFreq+0x2e4>
 801537a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801537e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8015382:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8015386:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801538a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801538e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8015392:	e065      	b.n	8015460 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8015394:	693b      	ldr	r3, [r7, #16]
 8015396:	ee07 3a90 	vmov	s15, r3
 801539a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801539e:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80154c0 <HAL_RCC_GetSysClockFreq+0x2ec>
 80153a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80153a6:	4b40      	ldr	r3, [pc, #256]	@ (80154a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80153a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80153aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80153ae:	ee07 3a90 	vmov	s15, r3
 80153b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80153b6:	ed97 6a02 	vldr	s12, [r7, #8]
 80153ba:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80154b8 <HAL_RCC_GetSysClockFreq+0x2e4>
 80153be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80153c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80153c6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80153ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80153ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80153d2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80153d6:	e043      	b.n	8015460 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80153d8:	693b      	ldr	r3, [r7, #16]
 80153da:	ee07 3a90 	vmov	s15, r3
 80153de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80153e2:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80154c4 <HAL_RCC_GetSysClockFreq+0x2f0>
 80153e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80153ea:	4b2f      	ldr	r3, [pc, #188]	@ (80154a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80153ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80153ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80153f2:	ee07 3a90 	vmov	s15, r3
 80153f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80153fa:	ed97 6a02 	vldr	s12, [r7, #8]
 80153fe:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80154b8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8015402:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8015406:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801540a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801540e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8015412:	ee67 7a27 	vmul.f32	s15, s14, s15
 8015416:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 801541a:	e021      	b.n	8015460 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801541c:	693b      	ldr	r3, [r7, #16]
 801541e:	ee07 3a90 	vmov	s15, r3
 8015422:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8015426:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80154c0 <HAL_RCC_GetSysClockFreq+0x2ec>
 801542a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801542e:	4b1e      	ldr	r3, [pc, #120]	@ (80154a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8015430:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8015432:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8015436:	ee07 3a90 	vmov	s15, r3
 801543a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801543e:	ed97 6a02 	vldr	s12, [r7, #8]
 8015442:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80154b8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8015446:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801544a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801544e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8015452:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8015456:	ee67 7a27 	vmul.f32	s15, s14, s15
 801545a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 801545e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8015460:	4b11      	ldr	r3, [pc, #68]	@ (80154a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8015462:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8015464:	0a5b      	lsrs	r3, r3, #9
 8015466:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801546a:	3301      	adds	r3, #1
 801546c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 801546e:	683b      	ldr	r3, [r7, #0]
 8015470:	ee07 3a90 	vmov	s15, r3
 8015474:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8015478:	edd7 6a07 	vldr	s13, [r7, #28]
 801547c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8015480:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8015484:	ee17 3a90 	vmov	r3, s15
 8015488:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 801548a:	e005      	b.n	8015498 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 801548c:	2300      	movs	r3, #0
 801548e:	61bb      	str	r3, [r7, #24]
      break;
 8015490:	e002      	b.n	8015498 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8015492:	4b07      	ldr	r3, [pc, #28]	@ (80154b0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8015494:	61bb      	str	r3, [r7, #24]
      break;
 8015496:	bf00      	nop
  }

  return sysclockfreq;
 8015498:	69bb      	ldr	r3, [r7, #24]
}
 801549a:	4618      	mov	r0, r3
 801549c:	3724      	adds	r7, #36	@ 0x24
 801549e:	46bd      	mov	sp, r7
 80154a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154a4:	4770      	bx	lr
 80154a6:	bf00      	nop
 80154a8:	58024400 	.word	0x58024400
 80154ac:	03d09000 	.word	0x03d09000
 80154b0:	003d0900 	.word	0x003d0900
 80154b4:	017d7840 	.word	0x017d7840
 80154b8:	46000000 	.word	0x46000000
 80154bc:	4c742400 	.word	0x4c742400
 80154c0:	4a742400 	.word	0x4a742400
 80154c4:	4bbebc20 	.word	0x4bbebc20

080154c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80154c8:	b580      	push	{r7, lr}
 80154ca:	b082      	sub	sp, #8
 80154cc:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80154ce:	f7ff fe81 	bl	80151d4 <HAL_RCC_GetSysClockFreq>
 80154d2:	4602      	mov	r2, r0
 80154d4:	4b10      	ldr	r3, [pc, #64]	@ (8015518 <HAL_RCC_GetHCLKFreq+0x50>)
 80154d6:	699b      	ldr	r3, [r3, #24]
 80154d8:	0a1b      	lsrs	r3, r3, #8
 80154da:	f003 030f 	and.w	r3, r3, #15
 80154de:	490f      	ldr	r1, [pc, #60]	@ (801551c <HAL_RCC_GetHCLKFreq+0x54>)
 80154e0:	5ccb      	ldrb	r3, [r1, r3]
 80154e2:	f003 031f 	and.w	r3, r3, #31
 80154e6:	fa22 f303 	lsr.w	r3, r2, r3
 80154ea:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80154ec:	4b0a      	ldr	r3, [pc, #40]	@ (8015518 <HAL_RCC_GetHCLKFreq+0x50>)
 80154ee:	699b      	ldr	r3, [r3, #24]
 80154f0:	f003 030f 	and.w	r3, r3, #15
 80154f4:	4a09      	ldr	r2, [pc, #36]	@ (801551c <HAL_RCC_GetHCLKFreq+0x54>)
 80154f6:	5cd3      	ldrb	r3, [r2, r3]
 80154f8:	f003 031f 	and.w	r3, r3, #31
 80154fc:	687a      	ldr	r2, [r7, #4]
 80154fe:	fa22 f303 	lsr.w	r3, r2, r3
 8015502:	4a07      	ldr	r2, [pc, #28]	@ (8015520 <HAL_RCC_GetHCLKFreq+0x58>)
 8015504:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8015506:	4a07      	ldr	r2, [pc, #28]	@ (8015524 <HAL_RCC_GetHCLKFreq+0x5c>)
 8015508:	687b      	ldr	r3, [r7, #4]
 801550a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 801550c:	4b04      	ldr	r3, [pc, #16]	@ (8015520 <HAL_RCC_GetHCLKFreq+0x58>)
 801550e:	681b      	ldr	r3, [r3, #0]
}
 8015510:	4618      	mov	r0, r3
 8015512:	3708      	adds	r7, #8
 8015514:	46bd      	mov	sp, r7
 8015516:	bd80      	pop	{r7, pc}
 8015518:	58024400 	.word	0x58024400
 801551c:	08020554 	.word	0x08020554
 8015520:	24000034 	.word	0x24000034
 8015524:	24000030 	.word	0x24000030

08015528 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8015528:	b580      	push	{r7, lr}
 801552a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 801552c:	f7ff ffcc 	bl	80154c8 <HAL_RCC_GetHCLKFreq>
 8015530:	4602      	mov	r2, r0
 8015532:	4b06      	ldr	r3, [pc, #24]	@ (801554c <HAL_RCC_GetPCLK1Freq+0x24>)
 8015534:	69db      	ldr	r3, [r3, #28]
 8015536:	091b      	lsrs	r3, r3, #4
 8015538:	f003 0307 	and.w	r3, r3, #7
 801553c:	4904      	ldr	r1, [pc, #16]	@ (8015550 <HAL_RCC_GetPCLK1Freq+0x28>)
 801553e:	5ccb      	ldrb	r3, [r1, r3]
 8015540:	f003 031f 	and.w	r3, r3, #31
 8015544:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8015548:	4618      	mov	r0, r3
 801554a:	bd80      	pop	{r7, pc}
 801554c:	58024400 	.word	0x58024400
 8015550:	08020554 	.word	0x08020554

08015554 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8015554:	b580      	push	{r7, lr}
 8015556:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8015558:	f7ff ffb6 	bl	80154c8 <HAL_RCC_GetHCLKFreq>
 801555c:	4602      	mov	r2, r0
 801555e:	4b06      	ldr	r3, [pc, #24]	@ (8015578 <HAL_RCC_GetPCLK2Freq+0x24>)
 8015560:	69db      	ldr	r3, [r3, #28]
 8015562:	0a1b      	lsrs	r3, r3, #8
 8015564:	f003 0307 	and.w	r3, r3, #7
 8015568:	4904      	ldr	r1, [pc, #16]	@ (801557c <HAL_RCC_GetPCLK2Freq+0x28>)
 801556a:	5ccb      	ldrb	r3, [r1, r3]
 801556c:	f003 031f 	and.w	r3, r3, #31
 8015570:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8015574:	4618      	mov	r0, r3
 8015576:	bd80      	pop	{r7, pc}
 8015578:	58024400 	.word	0x58024400
 801557c:	08020554 	.word	0x08020554

08015580 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8015580:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8015584:	b0ca      	sub	sp, #296	@ 0x128
 8015586:	af00      	add	r7, sp, #0
 8015588:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 801558c:	2300      	movs	r3, #0
 801558e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8015592:	2300      	movs	r3, #0
 8015594:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8015598:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801559c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80155a0:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 80155a4:	2500      	movs	r5, #0
 80155a6:	ea54 0305 	orrs.w	r3, r4, r5
 80155aa:	d049      	beq.n	8015640 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80155ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80155b0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80155b2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80155b6:	d02f      	beq.n	8015618 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80155b8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80155bc:	d828      	bhi.n	8015610 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80155be:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80155c2:	d01a      	beq.n	80155fa <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80155c4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80155c8:	d822      	bhi.n	8015610 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80155ca:	2b00      	cmp	r3, #0
 80155cc:	d003      	beq.n	80155d6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80155ce:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80155d2:	d007      	beq.n	80155e4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80155d4:	e01c      	b.n	8015610 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80155d6:	4bb8      	ldr	r3, [pc, #736]	@ (80158b8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80155d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80155da:	4ab7      	ldr	r2, [pc, #732]	@ (80158b8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80155dc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80155e0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80155e2:	e01a      	b.n	801561a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80155e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80155e8:	3308      	adds	r3, #8
 80155ea:	2102      	movs	r1, #2
 80155ec:	4618      	mov	r0, r3
 80155ee:	f002 fb61 	bl	8017cb4 <RCCEx_PLL2_Config>
 80155f2:	4603      	mov	r3, r0
 80155f4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80155f8:	e00f      	b.n	801561a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80155fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80155fe:	3328      	adds	r3, #40	@ 0x28
 8015600:	2102      	movs	r1, #2
 8015602:	4618      	mov	r0, r3
 8015604:	f002 fc08 	bl	8017e18 <RCCEx_PLL3_Config>
 8015608:	4603      	mov	r3, r0
 801560a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 801560e:	e004      	b.n	801561a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8015610:	2301      	movs	r3, #1
 8015612:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8015616:	e000      	b.n	801561a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8015618:	bf00      	nop
    }

    if (ret == HAL_OK)
 801561a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801561e:	2b00      	cmp	r3, #0
 8015620:	d10a      	bne.n	8015638 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8015622:	4ba5      	ldr	r3, [pc, #660]	@ (80158b8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8015624:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8015626:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 801562a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801562e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8015630:	4aa1      	ldr	r2, [pc, #644]	@ (80158b8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8015632:	430b      	orrs	r3, r1
 8015634:	6513      	str	r3, [r2, #80]	@ 0x50
 8015636:	e003      	b.n	8015640 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8015638:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801563c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8015640:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8015644:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015648:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 801564c:	f04f 0900 	mov.w	r9, #0
 8015650:	ea58 0309 	orrs.w	r3, r8, r9
 8015654:	d047      	beq.n	80156e6 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8015656:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801565a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801565c:	2b04      	cmp	r3, #4
 801565e:	d82a      	bhi.n	80156b6 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8015660:	a201      	add	r2, pc, #4	@ (adr r2, 8015668 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8015662:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015666:	bf00      	nop
 8015668:	0801567d 	.word	0x0801567d
 801566c:	0801568b 	.word	0x0801568b
 8015670:	080156a1 	.word	0x080156a1
 8015674:	080156bf 	.word	0x080156bf
 8015678:	080156bf 	.word	0x080156bf
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801567c:	4b8e      	ldr	r3, [pc, #568]	@ (80158b8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801567e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015680:	4a8d      	ldr	r2, [pc, #564]	@ (80158b8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8015682:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8015686:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8015688:	e01a      	b.n	80156c0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801568a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801568e:	3308      	adds	r3, #8
 8015690:	2100      	movs	r1, #0
 8015692:	4618      	mov	r0, r3
 8015694:	f002 fb0e 	bl	8017cb4 <RCCEx_PLL2_Config>
 8015698:	4603      	mov	r3, r0
 801569a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 801569e:	e00f      	b.n	80156c0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80156a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80156a4:	3328      	adds	r3, #40	@ 0x28
 80156a6:	2100      	movs	r1, #0
 80156a8:	4618      	mov	r0, r3
 80156aa:	f002 fbb5 	bl	8017e18 <RCCEx_PLL3_Config>
 80156ae:	4603      	mov	r3, r0
 80156b0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80156b4:	e004      	b.n	80156c0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80156b6:	2301      	movs	r3, #1
 80156b8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80156bc:	e000      	b.n	80156c0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80156be:	bf00      	nop
    }

    if (ret == HAL_OK)
 80156c0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80156c4:	2b00      	cmp	r3, #0
 80156c6:	d10a      	bne.n	80156de <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80156c8:	4b7b      	ldr	r3, [pc, #492]	@ (80158b8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80156ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80156cc:	f023 0107 	bic.w	r1, r3, #7
 80156d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80156d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80156d6:	4a78      	ldr	r2, [pc, #480]	@ (80158b8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80156d8:	430b      	orrs	r3, r1
 80156da:	6513      	str	r3, [r2, #80]	@ 0x50
 80156dc:	e003      	b.n	80156e6 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80156de:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80156e2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80156e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80156ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80156ee:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 80156f2:	f04f 0b00 	mov.w	fp, #0
 80156f6:	ea5a 030b 	orrs.w	r3, sl, fp
 80156fa:	d04c      	beq.n	8015796 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 80156fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8015700:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8015702:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8015706:	d030      	beq.n	801576a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8015708:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801570c:	d829      	bhi.n	8015762 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 801570e:	2bc0      	cmp	r3, #192	@ 0xc0
 8015710:	d02d      	beq.n	801576e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8015712:	2bc0      	cmp	r3, #192	@ 0xc0
 8015714:	d825      	bhi.n	8015762 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8015716:	2b80      	cmp	r3, #128	@ 0x80
 8015718:	d018      	beq.n	801574c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 801571a:	2b80      	cmp	r3, #128	@ 0x80
 801571c:	d821      	bhi.n	8015762 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 801571e:	2b00      	cmp	r3, #0
 8015720:	d002      	beq.n	8015728 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8015722:	2b40      	cmp	r3, #64	@ 0x40
 8015724:	d007      	beq.n	8015736 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8015726:	e01c      	b.n	8015762 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8015728:	4b63      	ldr	r3, [pc, #396]	@ (80158b8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801572a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801572c:	4a62      	ldr	r2, [pc, #392]	@ (80158b8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801572e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8015732:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8015734:	e01c      	b.n	8015770 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8015736:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801573a:	3308      	adds	r3, #8
 801573c:	2100      	movs	r1, #0
 801573e:	4618      	mov	r0, r3
 8015740:	f002 fab8 	bl	8017cb4 <RCCEx_PLL2_Config>
 8015744:	4603      	mov	r3, r0
 8015746:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 801574a:	e011      	b.n	8015770 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 801574c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8015750:	3328      	adds	r3, #40	@ 0x28
 8015752:	2100      	movs	r1, #0
 8015754:	4618      	mov	r0, r3
 8015756:	f002 fb5f 	bl	8017e18 <RCCEx_PLL3_Config>
 801575a:	4603      	mov	r3, r0
 801575c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8015760:	e006      	b.n	8015770 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8015762:	2301      	movs	r3, #1
 8015764:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8015768:	e002      	b.n	8015770 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 801576a:	bf00      	nop
 801576c:	e000      	b.n	8015770 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 801576e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8015770:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8015774:	2b00      	cmp	r3, #0
 8015776:	d10a      	bne.n	801578e <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8015778:	4b4f      	ldr	r3, [pc, #316]	@ (80158b8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801577a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801577c:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8015780:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8015784:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8015786:	4a4c      	ldr	r2, [pc, #304]	@ (80158b8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8015788:	430b      	orrs	r3, r1
 801578a:	6513      	str	r3, [r2, #80]	@ 0x50
 801578c:	e003      	b.n	8015796 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801578e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8015792:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8015796:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801579a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801579e:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 80157a2:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 80157a6:	2300      	movs	r3, #0
 80157a8:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 80157ac:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 80157b0:	460b      	mov	r3, r1
 80157b2:	4313      	orrs	r3, r2
 80157b4:	d053      	beq.n	801585e <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80157b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80157ba:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80157be:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80157c2:	d035      	beq.n	8015830 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80157c4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80157c8:	d82e      	bhi.n	8015828 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80157ca:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80157ce:	d031      	beq.n	8015834 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80157d0:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80157d4:	d828      	bhi.n	8015828 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80157d6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80157da:	d01a      	beq.n	8015812 <HAL_RCCEx_PeriphCLKConfig+0x292>
 80157dc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80157e0:	d822      	bhi.n	8015828 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80157e2:	2b00      	cmp	r3, #0
 80157e4:	d003      	beq.n	80157ee <HAL_RCCEx_PeriphCLKConfig+0x26e>
 80157e6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80157ea:	d007      	beq.n	80157fc <HAL_RCCEx_PeriphCLKConfig+0x27c>
 80157ec:	e01c      	b.n	8015828 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80157ee:	4b32      	ldr	r3, [pc, #200]	@ (80158b8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80157f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80157f2:	4a31      	ldr	r2, [pc, #196]	@ (80158b8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80157f4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80157f8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80157fa:	e01c      	b.n	8015836 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80157fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8015800:	3308      	adds	r3, #8
 8015802:	2100      	movs	r1, #0
 8015804:	4618      	mov	r0, r3
 8015806:	f002 fa55 	bl	8017cb4 <RCCEx_PLL2_Config>
 801580a:	4603      	mov	r3, r0
 801580c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8015810:	e011      	b.n	8015836 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8015812:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8015816:	3328      	adds	r3, #40	@ 0x28
 8015818:	2100      	movs	r1, #0
 801581a:	4618      	mov	r0, r3
 801581c:	f002 fafc 	bl	8017e18 <RCCEx_PLL3_Config>
 8015820:	4603      	mov	r3, r0
 8015822:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8015826:	e006      	b.n	8015836 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8015828:	2301      	movs	r3, #1
 801582a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801582e:	e002      	b.n	8015836 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8015830:	bf00      	nop
 8015832:	e000      	b.n	8015836 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8015834:	bf00      	nop
    }

    if (ret == HAL_OK)
 8015836:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801583a:	2b00      	cmp	r3, #0
 801583c:	d10b      	bne.n	8015856 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 801583e:	4b1e      	ldr	r3, [pc, #120]	@ (80158b8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8015840:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8015842:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8015846:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801584a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 801584e:	4a1a      	ldr	r2, [pc, #104]	@ (80158b8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8015850:	430b      	orrs	r3, r1
 8015852:	6593      	str	r3, [r2, #88]	@ 0x58
 8015854:	e003      	b.n	801585e <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8015856:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801585a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 801585e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8015862:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015866:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 801586a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 801586e:	2300      	movs	r3, #0
 8015870:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8015874:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8015878:	460b      	mov	r3, r1
 801587a:	4313      	orrs	r3, r2
 801587c:	d056      	beq.n	801592c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 801587e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8015882:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8015886:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 801588a:	d038      	beq.n	80158fe <HAL_RCCEx_PeriphCLKConfig+0x37e>
 801588c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8015890:	d831      	bhi.n	80158f6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8015892:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8015896:	d034      	beq.n	8015902 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8015898:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 801589c:	d82b      	bhi.n	80158f6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 801589e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80158a2:	d01d      	beq.n	80158e0 <HAL_RCCEx_PeriphCLKConfig+0x360>
 80158a4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80158a8:	d825      	bhi.n	80158f6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80158aa:	2b00      	cmp	r3, #0
 80158ac:	d006      	beq.n	80158bc <HAL_RCCEx_PeriphCLKConfig+0x33c>
 80158ae:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80158b2:	d00a      	beq.n	80158ca <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80158b4:	e01f      	b.n	80158f6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80158b6:	bf00      	nop
 80158b8:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80158bc:	4ba2      	ldr	r3, [pc, #648]	@ (8015b48 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80158be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80158c0:	4aa1      	ldr	r2, [pc, #644]	@ (8015b48 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80158c2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80158c6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80158c8:	e01c      	b.n	8015904 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80158ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80158ce:	3308      	adds	r3, #8
 80158d0:	2100      	movs	r1, #0
 80158d2:	4618      	mov	r0, r3
 80158d4:	f002 f9ee 	bl	8017cb4 <RCCEx_PLL2_Config>
 80158d8:	4603      	mov	r3, r0
 80158da:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80158de:	e011      	b.n	8015904 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80158e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80158e4:	3328      	adds	r3, #40	@ 0x28
 80158e6:	2100      	movs	r1, #0
 80158e8:	4618      	mov	r0, r3
 80158ea:	f002 fa95 	bl	8017e18 <RCCEx_PLL3_Config>
 80158ee:	4603      	mov	r3, r0
 80158f0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80158f4:	e006      	b.n	8015904 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80158f6:	2301      	movs	r3, #1
 80158f8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80158fc:	e002      	b.n	8015904 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80158fe:	bf00      	nop
 8015900:	e000      	b.n	8015904 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8015902:	bf00      	nop
    }

    if (ret == HAL_OK)
 8015904:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8015908:	2b00      	cmp	r3, #0
 801590a:	d10b      	bne.n	8015924 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 801590c:	4b8e      	ldr	r3, [pc, #568]	@ (8015b48 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801590e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8015910:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8015914:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8015918:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 801591c:	4a8a      	ldr	r2, [pc, #552]	@ (8015b48 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801591e:	430b      	orrs	r3, r1
 8015920:	6593      	str	r3, [r2, #88]	@ 0x58
 8015922:	e003      	b.n	801592c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8015924:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8015928:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 801592c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8015930:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015934:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8015938:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 801593c:	2300      	movs	r3, #0
 801593e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8015942:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8015946:	460b      	mov	r3, r1
 8015948:	4313      	orrs	r3, r2
 801594a:	d03a      	beq.n	80159c2 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 801594c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8015950:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8015952:	2b30      	cmp	r3, #48	@ 0x30
 8015954:	d01f      	beq.n	8015996 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8015956:	2b30      	cmp	r3, #48	@ 0x30
 8015958:	d819      	bhi.n	801598e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 801595a:	2b20      	cmp	r3, #32
 801595c:	d00c      	beq.n	8015978 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 801595e:	2b20      	cmp	r3, #32
 8015960:	d815      	bhi.n	801598e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8015962:	2b00      	cmp	r3, #0
 8015964:	d019      	beq.n	801599a <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8015966:	2b10      	cmp	r3, #16
 8015968:	d111      	bne.n	801598e <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801596a:	4b77      	ldr	r3, [pc, #476]	@ (8015b48 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801596c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801596e:	4a76      	ldr	r2, [pc, #472]	@ (8015b48 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8015970:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8015974:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8015976:	e011      	b.n	801599c <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8015978:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801597c:	3308      	adds	r3, #8
 801597e:	2102      	movs	r1, #2
 8015980:	4618      	mov	r0, r3
 8015982:	f002 f997 	bl	8017cb4 <RCCEx_PLL2_Config>
 8015986:	4603      	mov	r3, r0
 8015988:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 801598c:	e006      	b.n	801599c <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 801598e:	2301      	movs	r3, #1
 8015990:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8015994:	e002      	b.n	801599c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8015996:	bf00      	nop
 8015998:	e000      	b.n	801599c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 801599a:	bf00      	nop
    }

    if (ret == HAL_OK)
 801599c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80159a0:	2b00      	cmp	r3, #0
 80159a2:	d10a      	bne.n	80159ba <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80159a4:	4b68      	ldr	r3, [pc, #416]	@ (8015b48 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80159a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80159a8:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80159ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80159b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80159b2:	4a65      	ldr	r2, [pc, #404]	@ (8015b48 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80159b4:	430b      	orrs	r3, r1
 80159b6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80159b8:	e003      	b.n	80159c2 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80159ba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80159be:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80159c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80159c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80159ca:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80159ce:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80159d2:	2300      	movs	r3, #0
 80159d4:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80159d8:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 80159dc:	460b      	mov	r3, r1
 80159de:	4313      	orrs	r3, r2
 80159e0:	d051      	beq.n	8015a86 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80159e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80159e6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80159e8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80159ec:	d035      	beq.n	8015a5a <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80159ee:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80159f2:	d82e      	bhi.n	8015a52 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80159f4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80159f8:	d031      	beq.n	8015a5e <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80159fa:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80159fe:	d828      	bhi.n	8015a52 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8015a00:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8015a04:	d01a      	beq.n	8015a3c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8015a06:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8015a0a:	d822      	bhi.n	8015a52 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8015a0c:	2b00      	cmp	r3, #0
 8015a0e:	d003      	beq.n	8015a18 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8015a10:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8015a14:	d007      	beq.n	8015a26 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8015a16:	e01c      	b.n	8015a52 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8015a18:	4b4b      	ldr	r3, [pc, #300]	@ (8015b48 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8015a1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015a1c:	4a4a      	ldr	r2, [pc, #296]	@ (8015b48 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8015a1e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8015a22:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8015a24:	e01c      	b.n	8015a60 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8015a26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8015a2a:	3308      	adds	r3, #8
 8015a2c:	2100      	movs	r1, #0
 8015a2e:	4618      	mov	r0, r3
 8015a30:	f002 f940 	bl	8017cb4 <RCCEx_PLL2_Config>
 8015a34:	4603      	mov	r3, r0
 8015a36:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8015a3a:	e011      	b.n	8015a60 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8015a3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8015a40:	3328      	adds	r3, #40	@ 0x28
 8015a42:	2100      	movs	r1, #0
 8015a44:	4618      	mov	r0, r3
 8015a46:	f002 f9e7 	bl	8017e18 <RCCEx_PLL3_Config>
 8015a4a:	4603      	mov	r3, r0
 8015a4c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8015a50:	e006      	b.n	8015a60 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8015a52:	2301      	movs	r3, #1
 8015a54:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8015a58:	e002      	b.n	8015a60 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8015a5a:	bf00      	nop
 8015a5c:	e000      	b.n	8015a60 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8015a5e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8015a60:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8015a64:	2b00      	cmp	r3, #0
 8015a66:	d10a      	bne.n	8015a7e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8015a68:	4b37      	ldr	r3, [pc, #220]	@ (8015b48 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8015a6a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8015a6c:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8015a70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8015a74:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8015a76:	4a34      	ldr	r2, [pc, #208]	@ (8015b48 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8015a78:	430b      	orrs	r3, r1
 8015a7a:	6513      	str	r3, [r2, #80]	@ 0x50
 8015a7c:	e003      	b.n	8015a86 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8015a7e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8015a82:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8015a86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8015a8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015a8e:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8015a92:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8015a96:	2300      	movs	r3, #0
 8015a98:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8015a9c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8015aa0:	460b      	mov	r3, r1
 8015aa2:	4313      	orrs	r3, r2
 8015aa4:	d056      	beq.n	8015b54 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8015aa6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8015aaa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015aac:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8015ab0:	d033      	beq.n	8015b1a <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8015ab2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8015ab6:	d82c      	bhi.n	8015b12 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8015ab8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8015abc:	d02f      	beq.n	8015b1e <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8015abe:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8015ac2:	d826      	bhi.n	8015b12 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8015ac4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8015ac8:	d02b      	beq.n	8015b22 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8015aca:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8015ace:	d820      	bhi.n	8015b12 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8015ad0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8015ad4:	d012      	beq.n	8015afc <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8015ad6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8015ada:	d81a      	bhi.n	8015b12 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8015adc:	2b00      	cmp	r3, #0
 8015ade:	d022      	beq.n	8015b26 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8015ae0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8015ae4:	d115      	bne.n	8015b12 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8015ae6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8015aea:	3308      	adds	r3, #8
 8015aec:	2101      	movs	r1, #1
 8015aee:	4618      	mov	r0, r3
 8015af0:	f002 f8e0 	bl	8017cb4 <RCCEx_PLL2_Config>
 8015af4:	4603      	mov	r3, r0
 8015af6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8015afa:	e015      	b.n	8015b28 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8015afc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8015b00:	3328      	adds	r3, #40	@ 0x28
 8015b02:	2101      	movs	r1, #1
 8015b04:	4618      	mov	r0, r3
 8015b06:	f002 f987 	bl	8017e18 <RCCEx_PLL3_Config>
 8015b0a:	4603      	mov	r3, r0
 8015b0c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8015b10:	e00a      	b.n	8015b28 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8015b12:	2301      	movs	r3, #1
 8015b14:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8015b18:	e006      	b.n	8015b28 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8015b1a:	bf00      	nop
 8015b1c:	e004      	b.n	8015b28 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8015b1e:	bf00      	nop
 8015b20:	e002      	b.n	8015b28 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8015b22:	bf00      	nop
 8015b24:	e000      	b.n	8015b28 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8015b26:	bf00      	nop
    }

    if (ret == HAL_OK)
 8015b28:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8015b2c:	2b00      	cmp	r3, #0
 8015b2e:	d10d      	bne.n	8015b4c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8015b30:	4b05      	ldr	r3, [pc, #20]	@ (8015b48 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8015b32:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8015b34:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8015b38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8015b3c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015b3e:	4a02      	ldr	r2, [pc, #8]	@ (8015b48 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8015b40:	430b      	orrs	r3, r1
 8015b42:	6513      	str	r3, [r2, #80]	@ 0x50
 8015b44:	e006      	b.n	8015b54 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8015b46:	bf00      	nop
 8015b48:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8015b4c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8015b50:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8015b54:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8015b58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015b5c:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8015b60:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8015b64:	2300      	movs	r3, #0
 8015b66:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8015b6a:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8015b6e:	460b      	mov	r3, r1
 8015b70:	4313      	orrs	r3, r2
 8015b72:	d055      	beq.n	8015c20 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8015b74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8015b78:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8015b7c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8015b80:	d033      	beq.n	8015bea <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8015b82:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8015b86:	d82c      	bhi.n	8015be2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8015b88:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8015b8c:	d02f      	beq.n	8015bee <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8015b8e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8015b92:	d826      	bhi.n	8015be2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8015b94:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8015b98:	d02b      	beq.n	8015bf2 <HAL_RCCEx_PeriphCLKConfig+0x672>
 8015b9a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8015b9e:	d820      	bhi.n	8015be2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8015ba0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8015ba4:	d012      	beq.n	8015bcc <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8015ba6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8015baa:	d81a      	bhi.n	8015be2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8015bac:	2b00      	cmp	r3, #0
 8015bae:	d022      	beq.n	8015bf6 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8015bb0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8015bb4:	d115      	bne.n	8015be2 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8015bb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8015bba:	3308      	adds	r3, #8
 8015bbc:	2101      	movs	r1, #1
 8015bbe:	4618      	mov	r0, r3
 8015bc0:	f002 f878 	bl	8017cb4 <RCCEx_PLL2_Config>
 8015bc4:	4603      	mov	r3, r0
 8015bc6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8015bca:	e015      	b.n	8015bf8 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8015bcc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8015bd0:	3328      	adds	r3, #40	@ 0x28
 8015bd2:	2101      	movs	r1, #1
 8015bd4:	4618      	mov	r0, r3
 8015bd6:	f002 f91f 	bl	8017e18 <RCCEx_PLL3_Config>
 8015bda:	4603      	mov	r3, r0
 8015bdc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8015be0:	e00a      	b.n	8015bf8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8015be2:	2301      	movs	r3, #1
 8015be4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8015be8:	e006      	b.n	8015bf8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8015bea:	bf00      	nop
 8015bec:	e004      	b.n	8015bf8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8015bee:	bf00      	nop
 8015bf0:	e002      	b.n	8015bf8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8015bf2:	bf00      	nop
 8015bf4:	e000      	b.n	8015bf8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8015bf6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8015bf8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8015bfc:	2b00      	cmp	r3, #0
 8015bfe:	d10b      	bne.n	8015c18 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8015c00:	4ba3      	ldr	r3, [pc, #652]	@ (8015e90 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8015c02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8015c04:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8015c08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8015c0c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8015c10:	4a9f      	ldr	r2, [pc, #636]	@ (8015e90 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8015c12:	430b      	orrs	r3, r1
 8015c14:	6593      	str	r3, [r2, #88]	@ 0x58
 8015c16:	e003      	b.n	8015c20 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8015c18:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8015c1c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8015c20:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8015c24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015c28:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8015c2c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8015c30:	2300      	movs	r3, #0
 8015c32:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8015c36:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8015c3a:	460b      	mov	r3, r1
 8015c3c:	4313      	orrs	r3, r2
 8015c3e:	d037      	beq.n	8015cb0 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8015c40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8015c44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8015c46:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8015c4a:	d00e      	beq.n	8015c6a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8015c4c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8015c50:	d816      	bhi.n	8015c80 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8015c52:	2b00      	cmp	r3, #0
 8015c54:	d018      	beq.n	8015c88 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8015c56:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8015c5a:	d111      	bne.n	8015c80 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8015c5c:	4b8c      	ldr	r3, [pc, #560]	@ (8015e90 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8015c5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015c60:	4a8b      	ldr	r2, [pc, #556]	@ (8015e90 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8015c62:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8015c66:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8015c68:	e00f      	b.n	8015c8a <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8015c6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8015c6e:	3308      	adds	r3, #8
 8015c70:	2101      	movs	r1, #1
 8015c72:	4618      	mov	r0, r3
 8015c74:	f002 f81e 	bl	8017cb4 <RCCEx_PLL2_Config>
 8015c78:	4603      	mov	r3, r0
 8015c7a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8015c7e:	e004      	b.n	8015c8a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8015c80:	2301      	movs	r3, #1
 8015c82:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8015c86:	e000      	b.n	8015c8a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8015c88:	bf00      	nop
    }

    if (ret == HAL_OK)
 8015c8a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8015c8e:	2b00      	cmp	r3, #0
 8015c90:	d10a      	bne.n	8015ca8 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8015c92:	4b7f      	ldr	r3, [pc, #508]	@ (8015e90 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8015c94:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8015c96:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8015c9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8015c9e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8015ca0:	4a7b      	ldr	r2, [pc, #492]	@ (8015e90 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8015ca2:	430b      	orrs	r3, r1
 8015ca4:	6513      	str	r3, [r2, #80]	@ 0x50
 8015ca6:	e003      	b.n	8015cb0 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8015ca8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8015cac:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8015cb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8015cb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015cb8:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8015cbc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8015cc0:	2300      	movs	r3, #0
 8015cc2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8015cc6:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8015cca:	460b      	mov	r3, r1
 8015ccc:	4313      	orrs	r3, r2
 8015cce:	d039      	beq.n	8015d44 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8015cd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8015cd4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8015cd6:	2b03      	cmp	r3, #3
 8015cd8:	d81c      	bhi.n	8015d14 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8015cda:	a201      	add	r2, pc, #4	@ (adr r2, 8015ce0 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8015cdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015ce0:	08015d1d 	.word	0x08015d1d
 8015ce4:	08015cf1 	.word	0x08015cf1
 8015ce8:	08015cff 	.word	0x08015cff
 8015cec:	08015d1d 	.word	0x08015d1d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8015cf0:	4b67      	ldr	r3, [pc, #412]	@ (8015e90 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8015cf2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015cf4:	4a66      	ldr	r2, [pc, #408]	@ (8015e90 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8015cf6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8015cfa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8015cfc:	e00f      	b.n	8015d1e <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8015cfe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8015d02:	3308      	adds	r3, #8
 8015d04:	2102      	movs	r1, #2
 8015d06:	4618      	mov	r0, r3
 8015d08:	f001 ffd4 	bl	8017cb4 <RCCEx_PLL2_Config>
 8015d0c:	4603      	mov	r3, r0
 8015d0e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8015d12:	e004      	b.n	8015d1e <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8015d14:	2301      	movs	r3, #1
 8015d16:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8015d1a:	e000      	b.n	8015d1e <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8015d1c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8015d1e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8015d22:	2b00      	cmp	r3, #0
 8015d24:	d10a      	bne.n	8015d3c <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8015d26:	4b5a      	ldr	r3, [pc, #360]	@ (8015e90 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8015d28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8015d2a:	f023 0103 	bic.w	r1, r3, #3
 8015d2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8015d32:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8015d34:	4a56      	ldr	r2, [pc, #344]	@ (8015e90 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8015d36:	430b      	orrs	r3, r1
 8015d38:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8015d3a:	e003      	b.n	8015d44 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8015d3c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8015d40:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8015d44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8015d48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015d4c:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8015d50:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8015d54:	2300      	movs	r3, #0
 8015d56:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8015d5a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8015d5e:	460b      	mov	r3, r1
 8015d60:	4313      	orrs	r3, r2
 8015d62:	f000 809f 	beq.w	8015ea4 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8015d66:	4b4b      	ldr	r3, [pc, #300]	@ (8015e94 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8015d68:	681b      	ldr	r3, [r3, #0]
 8015d6a:	4a4a      	ldr	r2, [pc, #296]	@ (8015e94 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8015d6c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8015d70:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8015d72:	f7fb fcfd 	bl	8011770 <HAL_GetTick>
 8015d76:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8015d7a:	e00b      	b.n	8015d94 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8015d7c:	f7fb fcf8 	bl	8011770 <HAL_GetTick>
 8015d80:	4602      	mov	r2, r0
 8015d82:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8015d86:	1ad3      	subs	r3, r2, r3
 8015d88:	2b64      	cmp	r3, #100	@ 0x64
 8015d8a:	d903      	bls.n	8015d94 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8015d8c:	2303      	movs	r3, #3
 8015d8e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8015d92:	e005      	b.n	8015da0 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8015d94:	4b3f      	ldr	r3, [pc, #252]	@ (8015e94 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8015d96:	681b      	ldr	r3, [r3, #0]
 8015d98:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8015d9c:	2b00      	cmp	r3, #0
 8015d9e:	d0ed      	beq.n	8015d7c <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8015da0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8015da4:	2b00      	cmp	r3, #0
 8015da6:	d179      	bne.n	8015e9c <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8015da8:	4b39      	ldr	r3, [pc, #228]	@ (8015e90 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8015daa:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8015dac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8015db0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8015db4:	4053      	eors	r3, r2
 8015db6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8015dba:	2b00      	cmp	r3, #0
 8015dbc:	d015      	beq.n	8015dea <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8015dbe:	4b34      	ldr	r3, [pc, #208]	@ (8015e90 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8015dc0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8015dc2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8015dc6:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8015dca:	4b31      	ldr	r3, [pc, #196]	@ (8015e90 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8015dcc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8015dce:	4a30      	ldr	r2, [pc, #192]	@ (8015e90 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8015dd0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8015dd4:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8015dd6:	4b2e      	ldr	r3, [pc, #184]	@ (8015e90 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8015dd8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8015dda:	4a2d      	ldr	r2, [pc, #180]	@ (8015e90 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8015ddc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8015de0:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8015de2:	4a2b      	ldr	r2, [pc, #172]	@ (8015e90 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8015de4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8015de8:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8015dea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8015dee:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8015df2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8015df6:	d118      	bne.n	8015e2a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8015df8:	f7fb fcba 	bl	8011770 <HAL_GetTick>
 8015dfc:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8015e00:	e00d      	b.n	8015e1e <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8015e02:	f7fb fcb5 	bl	8011770 <HAL_GetTick>
 8015e06:	4602      	mov	r2, r0
 8015e08:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8015e0c:	1ad2      	subs	r2, r2, r3
 8015e0e:	f241 3388 	movw	r3, #5000	@ 0x1388
 8015e12:	429a      	cmp	r2, r3
 8015e14:	d903      	bls.n	8015e1e <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8015e16:	2303      	movs	r3, #3
 8015e18:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8015e1c:	e005      	b.n	8015e2a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8015e1e:	4b1c      	ldr	r3, [pc, #112]	@ (8015e90 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8015e20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8015e22:	f003 0302 	and.w	r3, r3, #2
 8015e26:	2b00      	cmp	r3, #0
 8015e28:	d0eb      	beq.n	8015e02 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8015e2a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8015e2e:	2b00      	cmp	r3, #0
 8015e30:	d129      	bne.n	8015e86 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8015e32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8015e36:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8015e3a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8015e3e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8015e42:	d10e      	bne.n	8015e62 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8015e44:	4b12      	ldr	r3, [pc, #72]	@ (8015e90 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8015e46:	691b      	ldr	r3, [r3, #16]
 8015e48:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8015e4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8015e50:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8015e54:	091a      	lsrs	r2, r3, #4
 8015e56:	4b10      	ldr	r3, [pc, #64]	@ (8015e98 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8015e58:	4013      	ands	r3, r2
 8015e5a:	4a0d      	ldr	r2, [pc, #52]	@ (8015e90 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8015e5c:	430b      	orrs	r3, r1
 8015e5e:	6113      	str	r3, [r2, #16]
 8015e60:	e005      	b.n	8015e6e <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8015e62:	4b0b      	ldr	r3, [pc, #44]	@ (8015e90 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8015e64:	691b      	ldr	r3, [r3, #16]
 8015e66:	4a0a      	ldr	r2, [pc, #40]	@ (8015e90 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8015e68:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8015e6c:	6113      	str	r3, [r2, #16]
 8015e6e:	4b08      	ldr	r3, [pc, #32]	@ (8015e90 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8015e70:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8015e72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8015e76:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8015e7a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8015e7e:	4a04      	ldr	r2, [pc, #16]	@ (8015e90 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8015e80:	430b      	orrs	r3, r1
 8015e82:	6713      	str	r3, [r2, #112]	@ 0x70
 8015e84:	e00e      	b.n	8015ea4 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8015e86:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8015e8a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8015e8e:	e009      	b.n	8015ea4 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8015e90:	58024400 	.word	0x58024400
 8015e94:	58024800 	.word	0x58024800
 8015e98:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8015e9c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8015ea0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8015ea4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8015ea8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015eac:	f002 0301 	and.w	r3, r2, #1
 8015eb0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8015eb4:	2300      	movs	r3, #0
 8015eb6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8015eba:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8015ebe:	460b      	mov	r3, r1
 8015ec0:	4313      	orrs	r3, r2
 8015ec2:	f000 8089 	beq.w	8015fd8 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8015ec6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8015eca:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8015ecc:	2b28      	cmp	r3, #40	@ 0x28
 8015ece:	d86b      	bhi.n	8015fa8 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8015ed0:	a201      	add	r2, pc, #4	@ (adr r2, 8015ed8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8015ed2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015ed6:	bf00      	nop
 8015ed8:	08015fb1 	.word	0x08015fb1
 8015edc:	08015fa9 	.word	0x08015fa9
 8015ee0:	08015fa9 	.word	0x08015fa9
 8015ee4:	08015fa9 	.word	0x08015fa9
 8015ee8:	08015fa9 	.word	0x08015fa9
 8015eec:	08015fa9 	.word	0x08015fa9
 8015ef0:	08015fa9 	.word	0x08015fa9
 8015ef4:	08015fa9 	.word	0x08015fa9
 8015ef8:	08015f7d 	.word	0x08015f7d
 8015efc:	08015fa9 	.word	0x08015fa9
 8015f00:	08015fa9 	.word	0x08015fa9
 8015f04:	08015fa9 	.word	0x08015fa9
 8015f08:	08015fa9 	.word	0x08015fa9
 8015f0c:	08015fa9 	.word	0x08015fa9
 8015f10:	08015fa9 	.word	0x08015fa9
 8015f14:	08015fa9 	.word	0x08015fa9
 8015f18:	08015f93 	.word	0x08015f93
 8015f1c:	08015fa9 	.word	0x08015fa9
 8015f20:	08015fa9 	.word	0x08015fa9
 8015f24:	08015fa9 	.word	0x08015fa9
 8015f28:	08015fa9 	.word	0x08015fa9
 8015f2c:	08015fa9 	.word	0x08015fa9
 8015f30:	08015fa9 	.word	0x08015fa9
 8015f34:	08015fa9 	.word	0x08015fa9
 8015f38:	08015fb1 	.word	0x08015fb1
 8015f3c:	08015fa9 	.word	0x08015fa9
 8015f40:	08015fa9 	.word	0x08015fa9
 8015f44:	08015fa9 	.word	0x08015fa9
 8015f48:	08015fa9 	.word	0x08015fa9
 8015f4c:	08015fa9 	.word	0x08015fa9
 8015f50:	08015fa9 	.word	0x08015fa9
 8015f54:	08015fa9 	.word	0x08015fa9
 8015f58:	08015fb1 	.word	0x08015fb1
 8015f5c:	08015fa9 	.word	0x08015fa9
 8015f60:	08015fa9 	.word	0x08015fa9
 8015f64:	08015fa9 	.word	0x08015fa9
 8015f68:	08015fa9 	.word	0x08015fa9
 8015f6c:	08015fa9 	.word	0x08015fa9
 8015f70:	08015fa9 	.word	0x08015fa9
 8015f74:	08015fa9 	.word	0x08015fa9
 8015f78:	08015fb1 	.word	0x08015fb1
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8015f7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8015f80:	3308      	adds	r3, #8
 8015f82:	2101      	movs	r1, #1
 8015f84:	4618      	mov	r0, r3
 8015f86:	f001 fe95 	bl	8017cb4 <RCCEx_PLL2_Config>
 8015f8a:	4603      	mov	r3, r0
 8015f8c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8015f90:	e00f      	b.n	8015fb2 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8015f92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8015f96:	3328      	adds	r3, #40	@ 0x28
 8015f98:	2101      	movs	r1, #1
 8015f9a:	4618      	mov	r0, r3
 8015f9c:	f001 ff3c 	bl	8017e18 <RCCEx_PLL3_Config>
 8015fa0:	4603      	mov	r3, r0
 8015fa2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8015fa6:	e004      	b.n	8015fb2 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8015fa8:	2301      	movs	r3, #1
 8015faa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8015fae:	e000      	b.n	8015fb2 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8015fb0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8015fb2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8015fb6:	2b00      	cmp	r3, #0
 8015fb8:	d10a      	bne.n	8015fd0 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8015fba:	4bbf      	ldr	r3, [pc, #764]	@ (80162b8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8015fbc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8015fbe:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8015fc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8015fc6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8015fc8:	4abb      	ldr	r2, [pc, #748]	@ (80162b8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8015fca:	430b      	orrs	r3, r1
 8015fcc:	6553      	str	r3, [r2, #84]	@ 0x54
 8015fce:	e003      	b.n	8015fd8 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8015fd0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8015fd4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8015fd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8015fdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015fe0:	f002 0302 	and.w	r3, r2, #2
 8015fe4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8015fe8:	2300      	movs	r3, #0
 8015fea:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8015fee:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8015ff2:	460b      	mov	r3, r1
 8015ff4:	4313      	orrs	r3, r2
 8015ff6:	d041      	beq.n	801607c <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8015ff8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8015ffc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8015ffe:	2b05      	cmp	r3, #5
 8016000:	d824      	bhi.n	801604c <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8016002:	a201      	add	r2, pc, #4	@ (adr r2, 8016008 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8016004:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016008:	08016055 	.word	0x08016055
 801600c:	08016021 	.word	0x08016021
 8016010:	08016037 	.word	0x08016037
 8016014:	08016055 	.word	0x08016055
 8016018:	08016055 	.word	0x08016055
 801601c:	08016055 	.word	0x08016055
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8016020:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8016024:	3308      	adds	r3, #8
 8016026:	2101      	movs	r1, #1
 8016028:	4618      	mov	r0, r3
 801602a:	f001 fe43 	bl	8017cb4 <RCCEx_PLL2_Config>
 801602e:	4603      	mov	r3, r0
 8016030:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8016034:	e00f      	b.n	8016056 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8016036:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801603a:	3328      	adds	r3, #40	@ 0x28
 801603c:	2101      	movs	r1, #1
 801603e:	4618      	mov	r0, r3
 8016040:	f001 feea 	bl	8017e18 <RCCEx_PLL3_Config>
 8016044:	4603      	mov	r3, r0
 8016046:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 801604a:	e004      	b.n	8016056 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801604c:	2301      	movs	r3, #1
 801604e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8016052:	e000      	b.n	8016056 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8016054:	bf00      	nop
    }

    if (ret == HAL_OK)
 8016056:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801605a:	2b00      	cmp	r3, #0
 801605c:	d10a      	bne.n	8016074 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 801605e:	4b96      	ldr	r3, [pc, #600]	@ (80162b8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8016060:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8016062:	f023 0107 	bic.w	r1, r3, #7
 8016066:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801606a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801606c:	4a92      	ldr	r2, [pc, #584]	@ (80162b8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 801606e:	430b      	orrs	r3, r1
 8016070:	6553      	str	r3, [r2, #84]	@ 0x54
 8016072:	e003      	b.n	801607c <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8016074:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8016078:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 801607c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8016080:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016084:	f002 0304 	and.w	r3, r2, #4
 8016088:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 801608c:	2300      	movs	r3, #0
 801608e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8016092:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8016096:	460b      	mov	r3, r1
 8016098:	4313      	orrs	r3, r2
 801609a:	d044      	beq.n	8016126 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 801609c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80160a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80160a4:	2b05      	cmp	r3, #5
 80160a6:	d825      	bhi.n	80160f4 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 80160a8:	a201      	add	r2, pc, #4	@ (adr r2, 80160b0 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 80160aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80160ae:	bf00      	nop
 80160b0:	080160fd 	.word	0x080160fd
 80160b4:	080160c9 	.word	0x080160c9
 80160b8:	080160df 	.word	0x080160df
 80160bc:	080160fd 	.word	0x080160fd
 80160c0:	080160fd 	.word	0x080160fd
 80160c4:	080160fd 	.word	0x080160fd
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80160c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80160cc:	3308      	adds	r3, #8
 80160ce:	2101      	movs	r1, #1
 80160d0:	4618      	mov	r0, r3
 80160d2:	f001 fdef 	bl	8017cb4 <RCCEx_PLL2_Config>
 80160d6:	4603      	mov	r3, r0
 80160d8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80160dc:	e00f      	b.n	80160fe <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80160de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80160e2:	3328      	adds	r3, #40	@ 0x28
 80160e4:	2101      	movs	r1, #1
 80160e6:	4618      	mov	r0, r3
 80160e8:	f001 fe96 	bl	8017e18 <RCCEx_PLL3_Config>
 80160ec:	4603      	mov	r3, r0
 80160ee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80160f2:	e004      	b.n	80160fe <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80160f4:	2301      	movs	r3, #1
 80160f6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80160fa:	e000      	b.n	80160fe <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 80160fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80160fe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8016102:	2b00      	cmp	r3, #0
 8016104:	d10b      	bne.n	801611e <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8016106:	4b6c      	ldr	r3, [pc, #432]	@ (80162b8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8016108:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801610a:	f023 0107 	bic.w	r1, r3, #7
 801610e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8016112:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8016116:	4a68      	ldr	r2, [pc, #416]	@ (80162b8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8016118:	430b      	orrs	r3, r1
 801611a:	6593      	str	r3, [r2, #88]	@ 0x58
 801611c:	e003      	b.n	8016126 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801611e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8016122:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8016126:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801612a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801612e:	f002 0320 	and.w	r3, r2, #32
 8016132:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8016136:	2300      	movs	r3, #0
 8016138:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 801613c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8016140:	460b      	mov	r3, r1
 8016142:	4313      	orrs	r3, r2
 8016144:	d055      	beq.n	80161f2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8016146:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801614a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801614e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8016152:	d033      	beq.n	80161bc <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8016154:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8016158:	d82c      	bhi.n	80161b4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 801615a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801615e:	d02f      	beq.n	80161c0 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8016160:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8016164:	d826      	bhi.n	80161b4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8016166:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 801616a:	d02b      	beq.n	80161c4 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 801616c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8016170:	d820      	bhi.n	80161b4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8016172:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8016176:	d012      	beq.n	801619e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8016178:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801617c:	d81a      	bhi.n	80161b4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 801617e:	2b00      	cmp	r3, #0
 8016180:	d022      	beq.n	80161c8 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8016182:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8016186:	d115      	bne.n	80161b4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8016188:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801618c:	3308      	adds	r3, #8
 801618e:	2100      	movs	r1, #0
 8016190:	4618      	mov	r0, r3
 8016192:	f001 fd8f 	bl	8017cb4 <RCCEx_PLL2_Config>
 8016196:	4603      	mov	r3, r0
 8016198:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 801619c:	e015      	b.n	80161ca <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 801619e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80161a2:	3328      	adds	r3, #40	@ 0x28
 80161a4:	2102      	movs	r1, #2
 80161a6:	4618      	mov	r0, r3
 80161a8:	f001 fe36 	bl	8017e18 <RCCEx_PLL3_Config>
 80161ac:	4603      	mov	r3, r0
 80161ae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80161b2:	e00a      	b.n	80161ca <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80161b4:	2301      	movs	r3, #1
 80161b6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80161ba:	e006      	b.n	80161ca <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80161bc:	bf00      	nop
 80161be:	e004      	b.n	80161ca <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80161c0:	bf00      	nop
 80161c2:	e002      	b.n	80161ca <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80161c4:	bf00      	nop
 80161c6:	e000      	b.n	80161ca <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80161c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80161ca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80161ce:	2b00      	cmp	r3, #0
 80161d0:	d10b      	bne.n	80161ea <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80161d2:	4b39      	ldr	r3, [pc, #228]	@ (80162b8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80161d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80161d6:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80161da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80161de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80161e2:	4a35      	ldr	r2, [pc, #212]	@ (80162b8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80161e4:	430b      	orrs	r3, r1
 80161e6:	6553      	str	r3, [r2, #84]	@ 0x54
 80161e8:	e003      	b.n	80161f2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80161ea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80161ee:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80161f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80161f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80161fa:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80161fe:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8016202:	2300      	movs	r3, #0
 8016204:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8016208:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 801620c:	460b      	mov	r3, r1
 801620e:	4313      	orrs	r3, r2
 8016210:	d058      	beq.n	80162c4 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8016212:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8016216:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 801621a:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 801621e:	d033      	beq.n	8016288 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8016220:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8016224:	d82c      	bhi.n	8016280 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8016226:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801622a:	d02f      	beq.n	801628c <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 801622c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8016230:	d826      	bhi.n	8016280 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8016232:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8016236:	d02b      	beq.n	8016290 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8016238:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 801623c:	d820      	bhi.n	8016280 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 801623e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8016242:	d012      	beq.n	801626a <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8016244:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8016248:	d81a      	bhi.n	8016280 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 801624a:	2b00      	cmp	r3, #0
 801624c:	d022      	beq.n	8016294 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 801624e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8016252:	d115      	bne.n	8016280 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8016254:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8016258:	3308      	adds	r3, #8
 801625a:	2100      	movs	r1, #0
 801625c:	4618      	mov	r0, r3
 801625e:	f001 fd29 	bl	8017cb4 <RCCEx_PLL2_Config>
 8016262:	4603      	mov	r3, r0
 8016264:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8016268:	e015      	b.n	8016296 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 801626a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801626e:	3328      	adds	r3, #40	@ 0x28
 8016270:	2102      	movs	r1, #2
 8016272:	4618      	mov	r0, r3
 8016274:	f001 fdd0 	bl	8017e18 <RCCEx_PLL3_Config>
 8016278:	4603      	mov	r3, r0
 801627a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 801627e:	e00a      	b.n	8016296 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8016280:	2301      	movs	r3, #1
 8016282:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8016286:	e006      	b.n	8016296 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8016288:	bf00      	nop
 801628a:	e004      	b.n	8016296 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 801628c:	bf00      	nop
 801628e:	e002      	b.n	8016296 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8016290:	bf00      	nop
 8016292:	e000      	b.n	8016296 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8016294:	bf00      	nop
    }

    if (ret == HAL_OK)
 8016296:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801629a:	2b00      	cmp	r3, #0
 801629c:	d10e      	bne.n	80162bc <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 801629e:	4b06      	ldr	r3, [pc, #24]	@ (80162b8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80162a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80162a2:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 80162a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80162aa:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80162ae:	4a02      	ldr	r2, [pc, #8]	@ (80162b8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80162b0:	430b      	orrs	r3, r1
 80162b2:	6593      	str	r3, [r2, #88]	@ 0x58
 80162b4:	e006      	b.n	80162c4 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 80162b6:	bf00      	nop
 80162b8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80162bc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80162c0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80162c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80162c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80162cc:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80162d0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80162d4:	2300      	movs	r3, #0
 80162d6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80162da:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80162de:	460b      	mov	r3, r1
 80162e0:	4313      	orrs	r3, r2
 80162e2:	d055      	beq.n	8016390 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80162e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80162e8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80162ec:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80162f0:	d033      	beq.n	801635a <HAL_RCCEx_PeriphCLKConfig+0xdda>
 80162f2:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80162f6:	d82c      	bhi.n	8016352 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80162f8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80162fc:	d02f      	beq.n	801635e <HAL_RCCEx_PeriphCLKConfig+0xdde>
 80162fe:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8016302:	d826      	bhi.n	8016352 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8016304:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8016308:	d02b      	beq.n	8016362 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 801630a:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 801630e:	d820      	bhi.n	8016352 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8016310:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8016314:	d012      	beq.n	801633c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8016316:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 801631a:	d81a      	bhi.n	8016352 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 801631c:	2b00      	cmp	r3, #0
 801631e:	d022      	beq.n	8016366 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8016320:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8016324:	d115      	bne.n	8016352 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8016326:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801632a:	3308      	adds	r3, #8
 801632c:	2100      	movs	r1, #0
 801632e:	4618      	mov	r0, r3
 8016330:	f001 fcc0 	bl	8017cb4 <RCCEx_PLL2_Config>
 8016334:	4603      	mov	r3, r0
 8016336:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 801633a:	e015      	b.n	8016368 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 801633c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8016340:	3328      	adds	r3, #40	@ 0x28
 8016342:	2102      	movs	r1, #2
 8016344:	4618      	mov	r0, r3
 8016346:	f001 fd67 	bl	8017e18 <RCCEx_PLL3_Config>
 801634a:	4603      	mov	r3, r0
 801634c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8016350:	e00a      	b.n	8016368 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8016352:	2301      	movs	r3, #1
 8016354:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8016358:	e006      	b.n	8016368 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 801635a:	bf00      	nop
 801635c:	e004      	b.n	8016368 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 801635e:	bf00      	nop
 8016360:	e002      	b.n	8016368 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8016362:	bf00      	nop
 8016364:	e000      	b.n	8016368 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8016366:	bf00      	nop
    }

    if (ret == HAL_OK)
 8016368:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801636c:	2b00      	cmp	r3, #0
 801636e:	d10b      	bne.n	8016388 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8016370:	4ba1      	ldr	r3, [pc, #644]	@ (80165f8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8016372:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8016374:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8016378:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801637c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8016380:	4a9d      	ldr	r2, [pc, #628]	@ (80165f8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8016382:	430b      	orrs	r3, r1
 8016384:	6593      	str	r3, [r2, #88]	@ 0x58
 8016386:	e003      	b.n	8016390 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8016388:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801638c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8016390:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8016394:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016398:	f002 0308 	and.w	r3, r2, #8
 801639c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80163a0:	2300      	movs	r3, #0
 80163a2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80163a6:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80163aa:	460b      	mov	r3, r1
 80163ac:	4313      	orrs	r3, r2
 80163ae:	d01e      	beq.n	80163ee <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80163b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80163b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80163b8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80163bc:	d10c      	bne.n	80163d8 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80163be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80163c2:	3328      	adds	r3, #40	@ 0x28
 80163c4:	2102      	movs	r1, #2
 80163c6:	4618      	mov	r0, r3
 80163c8:	f001 fd26 	bl	8017e18 <RCCEx_PLL3_Config>
 80163cc:	4603      	mov	r3, r0
 80163ce:	2b00      	cmp	r3, #0
 80163d0:	d002      	beq.n	80163d8 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 80163d2:	2301      	movs	r3, #1
 80163d4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80163d8:	4b87      	ldr	r3, [pc, #540]	@ (80165f8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80163da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80163dc:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80163e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80163e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80163e8:	4a83      	ldr	r2, [pc, #524]	@ (80165f8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80163ea:	430b      	orrs	r3, r1
 80163ec:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80163ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80163f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80163f6:	f002 0310 	and.w	r3, r2, #16
 80163fa:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80163fe:	2300      	movs	r3, #0
 8016400:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8016404:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8016408:	460b      	mov	r3, r1
 801640a:	4313      	orrs	r3, r2
 801640c:	d01e      	beq.n	801644c <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 801640e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8016412:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8016416:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801641a:	d10c      	bne.n	8016436 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 801641c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8016420:	3328      	adds	r3, #40	@ 0x28
 8016422:	2102      	movs	r1, #2
 8016424:	4618      	mov	r0, r3
 8016426:	f001 fcf7 	bl	8017e18 <RCCEx_PLL3_Config>
 801642a:	4603      	mov	r3, r0
 801642c:	2b00      	cmp	r3, #0
 801642e:	d002      	beq.n	8016436 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8016430:	2301      	movs	r3, #1
 8016432:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8016436:	4b70      	ldr	r3, [pc, #448]	@ (80165f8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8016438:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801643a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 801643e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8016442:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8016446:	4a6c      	ldr	r2, [pc, #432]	@ (80165f8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8016448:	430b      	orrs	r3, r1
 801644a:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 801644c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8016450:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016454:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8016458:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 801645c:	2300      	movs	r3, #0
 801645e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8016462:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8016466:	460b      	mov	r3, r1
 8016468:	4313      	orrs	r3, r2
 801646a:	d03e      	beq.n	80164ea <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 801646c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8016470:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8016474:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8016478:	d022      	beq.n	80164c0 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 801647a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801647e:	d81b      	bhi.n	80164b8 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8016480:	2b00      	cmp	r3, #0
 8016482:	d003      	beq.n	801648c <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8016484:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8016488:	d00b      	beq.n	80164a2 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 801648a:	e015      	b.n	80164b8 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801648c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8016490:	3308      	adds	r3, #8
 8016492:	2100      	movs	r1, #0
 8016494:	4618      	mov	r0, r3
 8016496:	f001 fc0d 	bl	8017cb4 <RCCEx_PLL2_Config>
 801649a:	4603      	mov	r3, r0
 801649c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80164a0:	e00f      	b.n	80164c2 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80164a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80164a6:	3328      	adds	r3, #40	@ 0x28
 80164a8:	2102      	movs	r1, #2
 80164aa:	4618      	mov	r0, r3
 80164ac:	f001 fcb4 	bl	8017e18 <RCCEx_PLL3_Config>
 80164b0:	4603      	mov	r3, r0
 80164b2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80164b6:	e004      	b.n	80164c2 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80164b8:	2301      	movs	r3, #1
 80164ba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80164be:	e000      	b.n	80164c2 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 80164c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80164c2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80164c6:	2b00      	cmp	r3, #0
 80164c8:	d10b      	bne.n	80164e2 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80164ca:	4b4b      	ldr	r3, [pc, #300]	@ (80165f8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80164cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80164ce:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80164d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80164d6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80164da:	4a47      	ldr	r2, [pc, #284]	@ (80165f8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80164dc:	430b      	orrs	r3, r1
 80164de:	6593      	str	r3, [r2, #88]	@ 0x58
 80164e0:	e003      	b.n	80164ea <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80164e2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80164e6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80164ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80164ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80164f2:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80164f6:	67bb      	str	r3, [r7, #120]	@ 0x78
 80164f8:	2300      	movs	r3, #0
 80164fa:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80164fc:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8016500:	460b      	mov	r3, r1
 8016502:	4313      	orrs	r3, r2
 8016504:	d03b      	beq.n	801657e <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8016506:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801650a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801650e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8016512:	d01f      	beq.n	8016554 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8016514:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8016518:	d818      	bhi.n	801654c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 801651a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 801651e:	d003      	beq.n	8016528 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8016520:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8016524:	d007      	beq.n	8016536 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8016526:	e011      	b.n	801654c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8016528:	4b33      	ldr	r3, [pc, #204]	@ (80165f8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801652a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801652c:	4a32      	ldr	r2, [pc, #200]	@ (80165f8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801652e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8016532:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8016534:	e00f      	b.n	8016556 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8016536:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801653a:	3328      	adds	r3, #40	@ 0x28
 801653c:	2101      	movs	r1, #1
 801653e:	4618      	mov	r0, r3
 8016540:	f001 fc6a 	bl	8017e18 <RCCEx_PLL3_Config>
 8016544:	4603      	mov	r3, r0
 8016546:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 801654a:	e004      	b.n	8016556 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801654c:	2301      	movs	r3, #1
 801654e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8016552:	e000      	b.n	8016556 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8016554:	bf00      	nop
    }

    if (ret == HAL_OK)
 8016556:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801655a:	2b00      	cmp	r3, #0
 801655c:	d10b      	bne.n	8016576 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 801655e:	4b26      	ldr	r3, [pc, #152]	@ (80165f8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8016560:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8016562:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8016566:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801656a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801656e:	4a22      	ldr	r2, [pc, #136]	@ (80165f8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8016570:	430b      	orrs	r3, r1
 8016572:	6553      	str	r3, [r2, #84]	@ 0x54
 8016574:	e003      	b.n	801657e <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8016576:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801657a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 801657e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8016582:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016586:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 801658a:	673b      	str	r3, [r7, #112]	@ 0x70
 801658c:	2300      	movs	r3, #0
 801658e:	677b      	str	r3, [r7, #116]	@ 0x74
 8016590:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8016594:	460b      	mov	r3, r1
 8016596:	4313      	orrs	r3, r2
 8016598:	d034      	beq.n	8016604 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 801659a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801659e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80165a0:	2b00      	cmp	r3, #0
 80165a2:	d003      	beq.n	80165ac <HAL_RCCEx_PeriphCLKConfig+0x102c>
 80165a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80165a8:	d007      	beq.n	80165ba <HAL_RCCEx_PeriphCLKConfig+0x103a>
 80165aa:	e011      	b.n	80165d0 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80165ac:	4b12      	ldr	r3, [pc, #72]	@ (80165f8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80165ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80165b0:	4a11      	ldr	r2, [pc, #68]	@ (80165f8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80165b2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80165b6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80165b8:	e00e      	b.n	80165d8 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80165ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80165be:	3308      	adds	r3, #8
 80165c0:	2102      	movs	r1, #2
 80165c2:	4618      	mov	r0, r3
 80165c4:	f001 fb76 	bl	8017cb4 <RCCEx_PLL2_Config>
 80165c8:	4603      	mov	r3, r0
 80165ca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80165ce:	e003      	b.n	80165d8 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 80165d0:	2301      	movs	r3, #1
 80165d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80165d6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80165d8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80165dc:	2b00      	cmp	r3, #0
 80165de:	d10d      	bne.n	80165fc <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80165e0:	4b05      	ldr	r3, [pc, #20]	@ (80165f8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80165e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80165e4:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80165e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80165ec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80165ee:	4a02      	ldr	r2, [pc, #8]	@ (80165f8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80165f0:	430b      	orrs	r3, r1
 80165f2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80165f4:	e006      	b.n	8016604 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 80165f6:	bf00      	nop
 80165f8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80165fc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8016600:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8016604:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8016608:	e9d3 2300 	ldrd	r2, r3, [r3]
 801660c:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8016610:	66bb      	str	r3, [r7, #104]	@ 0x68
 8016612:	2300      	movs	r3, #0
 8016614:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8016616:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 801661a:	460b      	mov	r3, r1
 801661c:	4313      	orrs	r3, r2
 801661e:	d00c      	beq.n	801663a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8016620:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8016624:	3328      	adds	r3, #40	@ 0x28
 8016626:	2102      	movs	r1, #2
 8016628:	4618      	mov	r0, r3
 801662a:	f001 fbf5 	bl	8017e18 <RCCEx_PLL3_Config>
 801662e:	4603      	mov	r3, r0
 8016630:	2b00      	cmp	r3, #0
 8016632:	d002      	beq.n	801663a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8016634:	2301      	movs	r3, #1
 8016636:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 801663a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801663e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016642:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8016646:	663b      	str	r3, [r7, #96]	@ 0x60
 8016648:	2300      	movs	r3, #0
 801664a:	667b      	str	r3, [r7, #100]	@ 0x64
 801664c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8016650:	460b      	mov	r3, r1
 8016652:	4313      	orrs	r3, r2
 8016654:	d038      	beq.n	80166c8 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8016656:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801665a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801665e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8016662:	d018      	beq.n	8016696 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8016664:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8016668:	d811      	bhi.n	801668e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 801666a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801666e:	d014      	beq.n	801669a <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8016670:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8016674:	d80b      	bhi.n	801668e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8016676:	2b00      	cmp	r3, #0
 8016678:	d011      	beq.n	801669e <HAL_RCCEx_PeriphCLKConfig+0x111e>
 801667a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801667e:	d106      	bne.n	801668e <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8016680:	4bc3      	ldr	r3, [pc, #780]	@ (8016990 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8016682:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016684:	4ac2      	ldr	r2, [pc, #776]	@ (8016990 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8016686:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801668a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 801668c:	e008      	b.n	80166a0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801668e:	2301      	movs	r3, #1
 8016690:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8016694:	e004      	b.n	80166a0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8016696:	bf00      	nop
 8016698:	e002      	b.n	80166a0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 801669a:	bf00      	nop
 801669c:	e000      	b.n	80166a0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 801669e:	bf00      	nop
    }

    if (ret == HAL_OK)
 80166a0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80166a4:	2b00      	cmp	r3, #0
 80166a6:	d10b      	bne.n	80166c0 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80166a8:	4bb9      	ldr	r3, [pc, #740]	@ (8016990 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80166aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80166ac:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80166b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80166b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80166b8:	4ab5      	ldr	r2, [pc, #724]	@ (8016990 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80166ba:	430b      	orrs	r3, r1
 80166bc:	6553      	str	r3, [r2, #84]	@ 0x54
 80166be:	e003      	b.n	80166c8 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80166c0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80166c4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80166c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80166cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80166d0:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 80166d4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80166d6:	2300      	movs	r3, #0
 80166d8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80166da:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80166de:	460b      	mov	r3, r1
 80166e0:	4313      	orrs	r3, r2
 80166e2:	d009      	beq.n	80166f8 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80166e4:	4baa      	ldr	r3, [pc, #680]	@ (8016990 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80166e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80166e8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80166ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80166f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80166f2:	4aa7      	ldr	r2, [pc, #668]	@ (8016990 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80166f4:	430b      	orrs	r3, r1
 80166f6:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80166f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80166fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016700:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8016704:	653b      	str	r3, [r7, #80]	@ 0x50
 8016706:	2300      	movs	r3, #0
 8016708:	657b      	str	r3, [r7, #84]	@ 0x54
 801670a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 801670e:	460b      	mov	r3, r1
 8016710:	4313      	orrs	r3, r2
 8016712:	d00a      	beq.n	801672a <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8016714:	4b9e      	ldr	r3, [pc, #632]	@ (8016990 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8016716:	691b      	ldr	r3, [r3, #16]
 8016718:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 801671c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8016720:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8016724:	4a9a      	ldr	r2, [pc, #616]	@ (8016990 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8016726:	430b      	orrs	r3, r1
 8016728:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 801672a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801672e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016732:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8016736:	64bb      	str	r3, [r7, #72]	@ 0x48
 8016738:	2300      	movs	r3, #0
 801673a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801673c:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8016740:	460b      	mov	r3, r1
 8016742:	4313      	orrs	r3, r2
 8016744:	d009      	beq.n	801675a <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8016746:	4b92      	ldr	r3, [pc, #584]	@ (8016990 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8016748:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801674a:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 801674e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8016752:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8016754:	4a8e      	ldr	r2, [pc, #568]	@ (8016990 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8016756:	430b      	orrs	r3, r1
 8016758:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 801675a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801675e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016762:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8016766:	643b      	str	r3, [r7, #64]	@ 0x40
 8016768:	2300      	movs	r3, #0
 801676a:	647b      	str	r3, [r7, #68]	@ 0x44
 801676c:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8016770:	460b      	mov	r3, r1
 8016772:	4313      	orrs	r3, r2
 8016774:	d00e      	beq.n	8016794 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8016776:	4b86      	ldr	r3, [pc, #536]	@ (8016990 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8016778:	691b      	ldr	r3, [r3, #16]
 801677a:	4a85      	ldr	r2, [pc, #532]	@ (8016990 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801677c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8016780:	6113      	str	r3, [r2, #16]
 8016782:	4b83      	ldr	r3, [pc, #524]	@ (8016990 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8016784:	6919      	ldr	r1, [r3, #16]
 8016786:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801678a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 801678e:	4a80      	ldr	r2, [pc, #512]	@ (8016990 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8016790:	430b      	orrs	r3, r1
 8016792:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8016794:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8016798:	e9d3 2300 	ldrd	r2, r3, [r3]
 801679c:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 80167a0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80167a2:	2300      	movs	r3, #0
 80167a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80167a6:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80167aa:	460b      	mov	r3, r1
 80167ac:	4313      	orrs	r3, r2
 80167ae:	d009      	beq.n	80167c4 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80167b0:	4b77      	ldr	r3, [pc, #476]	@ (8016990 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80167b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80167b4:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80167b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80167bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80167be:	4a74      	ldr	r2, [pc, #464]	@ (8016990 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80167c0:	430b      	orrs	r3, r1
 80167c2:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80167c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80167c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80167cc:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 80167d0:	633b      	str	r3, [r7, #48]	@ 0x30
 80167d2:	2300      	movs	r3, #0
 80167d4:	637b      	str	r3, [r7, #52]	@ 0x34
 80167d6:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80167da:	460b      	mov	r3, r1
 80167dc:	4313      	orrs	r3, r2
 80167de:	d00a      	beq.n	80167f6 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80167e0:	4b6b      	ldr	r3, [pc, #428]	@ (8016990 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80167e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80167e4:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 80167e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80167ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80167f0:	4a67      	ldr	r2, [pc, #412]	@ (8016990 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80167f2:	430b      	orrs	r3, r1
 80167f4:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80167f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80167fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80167fe:	2100      	movs	r1, #0
 8016800:	62b9      	str	r1, [r7, #40]	@ 0x28
 8016802:	f003 0301 	and.w	r3, r3, #1
 8016806:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8016808:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 801680c:	460b      	mov	r3, r1
 801680e:	4313      	orrs	r3, r2
 8016810:	d011      	beq.n	8016836 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8016812:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8016816:	3308      	adds	r3, #8
 8016818:	2100      	movs	r1, #0
 801681a:	4618      	mov	r0, r3
 801681c:	f001 fa4a 	bl	8017cb4 <RCCEx_PLL2_Config>
 8016820:	4603      	mov	r3, r0
 8016822:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8016826:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801682a:	2b00      	cmp	r3, #0
 801682c:	d003      	beq.n	8016836 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 801682e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8016832:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8016836:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801683a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801683e:	2100      	movs	r1, #0
 8016840:	6239      	str	r1, [r7, #32]
 8016842:	f003 0302 	and.w	r3, r3, #2
 8016846:	627b      	str	r3, [r7, #36]	@ 0x24
 8016848:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 801684c:	460b      	mov	r3, r1
 801684e:	4313      	orrs	r3, r2
 8016850:	d011      	beq.n	8016876 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8016852:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8016856:	3308      	adds	r3, #8
 8016858:	2101      	movs	r1, #1
 801685a:	4618      	mov	r0, r3
 801685c:	f001 fa2a 	bl	8017cb4 <RCCEx_PLL2_Config>
 8016860:	4603      	mov	r3, r0
 8016862:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8016866:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801686a:	2b00      	cmp	r3, #0
 801686c:	d003      	beq.n	8016876 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 801686e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8016872:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8016876:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801687a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801687e:	2100      	movs	r1, #0
 8016880:	61b9      	str	r1, [r7, #24]
 8016882:	f003 0304 	and.w	r3, r3, #4
 8016886:	61fb      	str	r3, [r7, #28]
 8016888:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 801688c:	460b      	mov	r3, r1
 801688e:	4313      	orrs	r3, r2
 8016890:	d011      	beq.n	80168b6 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8016892:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8016896:	3308      	adds	r3, #8
 8016898:	2102      	movs	r1, #2
 801689a:	4618      	mov	r0, r3
 801689c:	f001 fa0a 	bl	8017cb4 <RCCEx_PLL2_Config>
 80168a0:	4603      	mov	r3, r0
 80168a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80168a6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80168aa:	2b00      	cmp	r3, #0
 80168ac:	d003      	beq.n	80168b6 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80168ae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80168b2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80168b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80168ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80168be:	2100      	movs	r1, #0
 80168c0:	6139      	str	r1, [r7, #16]
 80168c2:	f003 0308 	and.w	r3, r3, #8
 80168c6:	617b      	str	r3, [r7, #20]
 80168c8:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80168cc:	460b      	mov	r3, r1
 80168ce:	4313      	orrs	r3, r2
 80168d0:	d011      	beq.n	80168f6 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80168d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80168d6:	3328      	adds	r3, #40	@ 0x28
 80168d8:	2100      	movs	r1, #0
 80168da:	4618      	mov	r0, r3
 80168dc:	f001 fa9c 	bl	8017e18 <RCCEx_PLL3_Config>
 80168e0:	4603      	mov	r3, r0
 80168e2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 80168e6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80168ea:	2b00      	cmp	r3, #0
 80168ec:	d003      	beq.n	80168f6 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80168ee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80168f2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80168f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80168fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80168fe:	2100      	movs	r1, #0
 8016900:	60b9      	str	r1, [r7, #8]
 8016902:	f003 0310 	and.w	r3, r3, #16
 8016906:	60fb      	str	r3, [r7, #12]
 8016908:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 801690c:	460b      	mov	r3, r1
 801690e:	4313      	orrs	r3, r2
 8016910:	d011      	beq.n	8016936 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8016912:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8016916:	3328      	adds	r3, #40	@ 0x28
 8016918:	2101      	movs	r1, #1
 801691a:	4618      	mov	r0, r3
 801691c:	f001 fa7c 	bl	8017e18 <RCCEx_PLL3_Config>
 8016920:	4603      	mov	r3, r0
 8016922:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8016926:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801692a:	2b00      	cmp	r3, #0
 801692c:	d003      	beq.n	8016936 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 801692e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8016932:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8016936:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801693a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801693e:	2100      	movs	r1, #0
 8016940:	6039      	str	r1, [r7, #0]
 8016942:	f003 0320 	and.w	r3, r3, #32
 8016946:	607b      	str	r3, [r7, #4]
 8016948:	e9d7 1200 	ldrd	r1, r2, [r7]
 801694c:	460b      	mov	r3, r1
 801694e:	4313      	orrs	r3, r2
 8016950:	d011      	beq.n	8016976 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8016952:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8016956:	3328      	adds	r3, #40	@ 0x28
 8016958:	2102      	movs	r1, #2
 801695a:	4618      	mov	r0, r3
 801695c:	f001 fa5c 	bl	8017e18 <RCCEx_PLL3_Config>
 8016960:	4603      	mov	r3, r0
 8016962:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8016966:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801696a:	2b00      	cmp	r3, #0
 801696c:	d003      	beq.n	8016976 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 801696e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8016972:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8016976:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 801697a:	2b00      	cmp	r3, #0
 801697c:	d101      	bne.n	8016982 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 801697e:	2300      	movs	r3, #0
 8016980:	e000      	b.n	8016984 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8016982:	2301      	movs	r3, #1
}
 8016984:	4618      	mov	r0, r3
 8016986:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 801698a:	46bd      	mov	sp, r7
 801698c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8016990:	58024400 	.word	0x58024400

08016994 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8016994:	b580      	push	{r7, lr}
 8016996:	b090      	sub	sp, #64	@ 0x40
 8016998:	af00      	add	r7, sp, #0
 801699a:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 801699e:	e9d7 2300 	ldrd	r2, r3, [r7]
 80169a2:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 80169a6:	430b      	orrs	r3, r1
 80169a8:	f040 8094 	bne.w	8016ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 80169ac:	4b9e      	ldr	r3, [pc, #632]	@ (8016c28 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80169ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80169b0:	f003 0307 	and.w	r3, r3, #7
 80169b4:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80169b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80169b8:	2b04      	cmp	r3, #4
 80169ba:	f200 8087 	bhi.w	8016acc <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 80169be:	a201      	add	r2, pc, #4	@ (adr r2, 80169c4 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 80169c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80169c4:	080169d9 	.word	0x080169d9
 80169c8:	08016a01 	.word	0x08016a01
 80169cc:	08016a29 	.word	0x08016a29
 80169d0:	08016ac5 	.word	0x08016ac5
 80169d4:	08016a51 	.word	0x08016a51
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80169d8:	4b93      	ldr	r3, [pc, #588]	@ (8016c28 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80169da:	681b      	ldr	r3, [r3, #0]
 80169dc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80169e0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80169e4:	d108      	bne.n	80169f8 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80169e6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80169ea:	4618      	mov	r0, r3
 80169ec:	f001 f810 	bl	8017a10 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80169f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80169f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80169f4:	f000 bd45 	b.w	8017482 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80169f8:	2300      	movs	r3, #0
 80169fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80169fc:	f000 bd41 	b.w	8017482 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8016a00:	4b89      	ldr	r3, [pc, #548]	@ (8016c28 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8016a02:	681b      	ldr	r3, [r3, #0]
 8016a04:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8016a08:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8016a0c:	d108      	bne.n	8016a20 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8016a0e:	f107 0318 	add.w	r3, r7, #24
 8016a12:	4618      	mov	r0, r3
 8016a14:	f000 fd54 	bl	80174c0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8016a18:	69bb      	ldr	r3, [r7, #24]
 8016a1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8016a1c:	f000 bd31 	b.w	8017482 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8016a20:	2300      	movs	r3, #0
 8016a22:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8016a24:	f000 bd2d 	b.w	8017482 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8016a28:	4b7f      	ldr	r3, [pc, #508]	@ (8016c28 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8016a2a:	681b      	ldr	r3, [r3, #0]
 8016a2c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8016a30:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8016a34:	d108      	bne.n	8016a48 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8016a36:	f107 030c 	add.w	r3, r7, #12
 8016a3a:	4618      	mov	r0, r3
 8016a3c:	f000 fe94 	bl	8017768 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8016a40:	68fb      	ldr	r3, [r7, #12]
 8016a42:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8016a44:	f000 bd1d 	b.w	8017482 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8016a48:	2300      	movs	r3, #0
 8016a4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8016a4c:	f000 bd19 	b.w	8017482 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8016a50:	4b75      	ldr	r3, [pc, #468]	@ (8016c28 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8016a52:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8016a54:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8016a58:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8016a5a:	4b73      	ldr	r3, [pc, #460]	@ (8016c28 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8016a5c:	681b      	ldr	r3, [r3, #0]
 8016a5e:	f003 0304 	and.w	r3, r3, #4
 8016a62:	2b04      	cmp	r3, #4
 8016a64:	d10c      	bne.n	8016a80 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8016a66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8016a68:	2b00      	cmp	r3, #0
 8016a6a:	d109      	bne.n	8016a80 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8016a6c:	4b6e      	ldr	r3, [pc, #440]	@ (8016c28 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8016a6e:	681b      	ldr	r3, [r3, #0]
 8016a70:	08db      	lsrs	r3, r3, #3
 8016a72:	f003 0303 	and.w	r3, r3, #3
 8016a76:	4a6d      	ldr	r2, [pc, #436]	@ (8016c2c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8016a78:	fa22 f303 	lsr.w	r3, r2, r3
 8016a7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8016a7e:	e01f      	b.n	8016ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8016a80:	4b69      	ldr	r3, [pc, #420]	@ (8016c28 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8016a82:	681b      	ldr	r3, [r3, #0]
 8016a84:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8016a88:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8016a8c:	d106      	bne.n	8016a9c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8016a8e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8016a90:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8016a94:	d102      	bne.n	8016a9c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8016a96:	4b66      	ldr	r3, [pc, #408]	@ (8016c30 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8016a98:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8016a9a:	e011      	b.n	8016ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8016a9c:	4b62      	ldr	r3, [pc, #392]	@ (8016c28 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8016a9e:	681b      	ldr	r3, [r3, #0]
 8016aa0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8016aa4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8016aa8:	d106      	bne.n	8016ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8016aaa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8016aac:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8016ab0:	d102      	bne.n	8016ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8016ab2:	4b60      	ldr	r3, [pc, #384]	@ (8016c34 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8016ab4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8016ab6:	e003      	b.n	8016ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8016ab8:	2300      	movs	r3, #0
 8016aba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8016abc:	f000 bce1 	b.w	8017482 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8016ac0:	f000 bcdf 	b.w	8017482 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8016ac4:	4b5c      	ldr	r3, [pc, #368]	@ (8016c38 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8016ac6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8016ac8:	f000 bcdb 	b.w	8017482 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8016acc:	2300      	movs	r3, #0
 8016ace:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8016ad0:	f000 bcd7 	b.w	8017482 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8016ad4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8016ad8:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 8016adc:	430b      	orrs	r3, r1
 8016ade:	f040 80ad 	bne.w	8016c3c <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 8016ae2:	4b51      	ldr	r3, [pc, #324]	@ (8016c28 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8016ae4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8016ae6:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8016aea:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8016aec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016aee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8016af2:	d056      	beq.n	8016ba2 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 8016af4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016af6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8016afa:	f200 8090 	bhi.w	8016c1e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8016afe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016b00:	2bc0      	cmp	r3, #192	@ 0xc0
 8016b02:	f000 8088 	beq.w	8016c16 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 8016b06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016b08:	2bc0      	cmp	r3, #192	@ 0xc0
 8016b0a:	f200 8088 	bhi.w	8016c1e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8016b0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016b10:	2b80      	cmp	r3, #128	@ 0x80
 8016b12:	d032      	beq.n	8016b7a <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8016b14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016b16:	2b80      	cmp	r3, #128	@ 0x80
 8016b18:	f200 8081 	bhi.w	8016c1e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8016b1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016b1e:	2b00      	cmp	r3, #0
 8016b20:	d003      	beq.n	8016b2a <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 8016b22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016b24:	2b40      	cmp	r3, #64	@ 0x40
 8016b26:	d014      	beq.n	8016b52 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8016b28:	e079      	b.n	8016c1e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8016b2a:	4b3f      	ldr	r3, [pc, #252]	@ (8016c28 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8016b2c:	681b      	ldr	r3, [r3, #0]
 8016b2e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8016b32:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8016b36:	d108      	bne.n	8016b4a <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8016b38:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8016b3c:	4618      	mov	r0, r3
 8016b3e:	f000 ff67 	bl	8017a10 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8016b42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016b44:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8016b46:	f000 bc9c 	b.w	8017482 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8016b4a:	2300      	movs	r3, #0
 8016b4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8016b4e:	f000 bc98 	b.w	8017482 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8016b52:	4b35      	ldr	r3, [pc, #212]	@ (8016c28 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8016b54:	681b      	ldr	r3, [r3, #0]
 8016b56:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8016b5a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8016b5e:	d108      	bne.n	8016b72 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8016b60:	f107 0318 	add.w	r3, r7, #24
 8016b64:	4618      	mov	r0, r3
 8016b66:	f000 fcab 	bl	80174c0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8016b6a:	69bb      	ldr	r3, [r7, #24]
 8016b6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8016b6e:	f000 bc88 	b.w	8017482 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8016b72:	2300      	movs	r3, #0
 8016b74:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8016b76:	f000 bc84 	b.w	8017482 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8016b7a:	4b2b      	ldr	r3, [pc, #172]	@ (8016c28 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8016b7c:	681b      	ldr	r3, [r3, #0]
 8016b7e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8016b82:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8016b86:	d108      	bne.n	8016b9a <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8016b88:	f107 030c 	add.w	r3, r7, #12
 8016b8c:	4618      	mov	r0, r3
 8016b8e:	f000 fdeb 	bl	8017768 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8016b92:	68fb      	ldr	r3, [r7, #12]
 8016b94:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8016b96:	f000 bc74 	b.w	8017482 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8016b9a:	2300      	movs	r3, #0
 8016b9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8016b9e:	f000 bc70 	b.w	8017482 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8016ba2:	4b21      	ldr	r3, [pc, #132]	@ (8016c28 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8016ba4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8016ba6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8016baa:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8016bac:	4b1e      	ldr	r3, [pc, #120]	@ (8016c28 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8016bae:	681b      	ldr	r3, [r3, #0]
 8016bb0:	f003 0304 	and.w	r3, r3, #4
 8016bb4:	2b04      	cmp	r3, #4
 8016bb6:	d10c      	bne.n	8016bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 8016bb8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8016bba:	2b00      	cmp	r3, #0
 8016bbc:	d109      	bne.n	8016bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8016bbe:	4b1a      	ldr	r3, [pc, #104]	@ (8016c28 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8016bc0:	681b      	ldr	r3, [r3, #0]
 8016bc2:	08db      	lsrs	r3, r3, #3
 8016bc4:	f003 0303 	and.w	r3, r3, #3
 8016bc8:	4a18      	ldr	r2, [pc, #96]	@ (8016c2c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8016bca:	fa22 f303 	lsr.w	r3, r2, r3
 8016bce:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8016bd0:	e01f      	b.n	8016c12 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8016bd2:	4b15      	ldr	r3, [pc, #84]	@ (8016c28 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8016bd4:	681b      	ldr	r3, [r3, #0]
 8016bd6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8016bda:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8016bde:	d106      	bne.n	8016bee <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8016be0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8016be2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8016be6:	d102      	bne.n	8016bee <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8016be8:	4b11      	ldr	r3, [pc, #68]	@ (8016c30 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8016bea:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8016bec:	e011      	b.n	8016c12 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8016bee:	4b0e      	ldr	r3, [pc, #56]	@ (8016c28 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8016bf0:	681b      	ldr	r3, [r3, #0]
 8016bf2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8016bf6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8016bfa:	d106      	bne.n	8016c0a <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 8016bfc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8016bfe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8016c02:	d102      	bne.n	8016c0a <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8016c04:	4b0b      	ldr	r3, [pc, #44]	@ (8016c34 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8016c06:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8016c08:	e003      	b.n	8016c12 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8016c0a:	2300      	movs	r3, #0
 8016c0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8016c0e:	f000 bc38 	b.w	8017482 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8016c12:	f000 bc36 	b.w	8017482 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8016c16:	4b08      	ldr	r3, [pc, #32]	@ (8016c38 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8016c18:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8016c1a:	f000 bc32 	b.w	8017482 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8016c1e:	2300      	movs	r3, #0
 8016c20:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8016c22:	f000 bc2e 	b.w	8017482 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8016c26:	bf00      	nop
 8016c28:	58024400 	.word	0x58024400
 8016c2c:	03d09000 	.word	0x03d09000
 8016c30:	003d0900 	.word	0x003d0900
 8016c34:	017d7840 	.word	0x017d7840
 8016c38:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8016c3c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8016c40:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8016c44:	430b      	orrs	r3, r1
 8016c46:	f040 809c 	bne.w	8016d82 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8016c4a:	4b9e      	ldr	r3, [pc, #632]	@ (8016ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8016c4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8016c4e:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 8016c52:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8016c54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016c56:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8016c5a:	d054      	beq.n	8016d06 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8016c5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016c5e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8016c62:	f200 808b 	bhi.w	8016d7c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8016c66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016c68:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8016c6c:	f000 8083 	beq.w	8016d76 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 8016c70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016c72:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8016c76:	f200 8081 	bhi.w	8016d7c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8016c7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016c7c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8016c80:	d02f      	beq.n	8016ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 8016c82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016c84:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8016c88:	d878      	bhi.n	8016d7c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8016c8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016c8c:	2b00      	cmp	r3, #0
 8016c8e:	d004      	beq.n	8016c9a <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8016c90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016c92:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8016c96:	d012      	beq.n	8016cbe <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8016c98:	e070      	b.n	8016d7c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8016c9a:	4b8a      	ldr	r3, [pc, #552]	@ (8016ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8016c9c:	681b      	ldr	r3, [r3, #0]
 8016c9e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8016ca2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8016ca6:	d107      	bne.n	8016cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8016ca8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8016cac:	4618      	mov	r0, r3
 8016cae:	f000 feaf 	bl	8017a10 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8016cb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016cb4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8016cb6:	e3e4      	b.n	8017482 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8016cb8:	2300      	movs	r3, #0
 8016cba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8016cbc:	e3e1      	b.n	8017482 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8016cbe:	4b81      	ldr	r3, [pc, #516]	@ (8016ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8016cc0:	681b      	ldr	r3, [r3, #0]
 8016cc2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8016cc6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8016cca:	d107      	bne.n	8016cdc <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8016ccc:	f107 0318 	add.w	r3, r7, #24
 8016cd0:	4618      	mov	r0, r3
 8016cd2:	f000 fbf5 	bl	80174c0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8016cd6:	69bb      	ldr	r3, [r7, #24]
 8016cd8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8016cda:	e3d2      	b.n	8017482 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8016cdc:	2300      	movs	r3, #0
 8016cde:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8016ce0:	e3cf      	b.n	8017482 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8016ce2:	4b78      	ldr	r3, [pc, #480]	@ (8016ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8016ce4:	681b      	ldr	r3, [r3, #0]
 8016ce6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8016cea:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8016cee:	d107      	bne.n	8016d00 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8016cf0:	f107 030c 	add.w	r3, r7, #12
 8016cf4:	4618      	mov	r0, r3
 8016cf6:	f000 fd37 	bl	8017768 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8016cfa:	68fb      	ldr	r3, [r7, #12]
 8016cfc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8016cfe:	e3c0      	b.n	8017482 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8016d00:	2300      	movs	r3, #0
 8016d02:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8016d04:	e3bd      	b.n	8017482 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8016d06:	4b6f      	ldr	r3, [pc, #444]	@ (8016ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8016d08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8016d0a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8016d0e:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8016d10:	4b6c      	ldr	r3, [pc, #432]	@ (8016ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8016d12:	681b      	ldr	r3, [r3, #0]
 8016d14:	f003 0304 	and.w	r3, r3, #4
 8016d18:	2b04      	cmp	r3, #4
 8016d1a:	d10c      	bne.n	8016d36 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8016d1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8016d1e:	2b00      	cmp	r3, #0
 8016d20:	d109      	bne.n	8016d36 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8016d22:	4b68      	ldr	r3, [pc, #416]	@ (8016ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8016d24:	681b      	ldr	r3, [r3, #0]
 8016d26:	08db      	lsrs	r3, r3, #3
 8016d28:	f003 0303 	and.w	r3, r3, #3
 8016d2c:	4a66      	ldr	r2, [pc, #408]	@ (8016ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8016d2e:	fa22 f303 	lsr.w	r3, r2, r3
 8016d32:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8016d34:	e01e      	b.n	8016d74 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8016d36:	4b63      	ldr	r3, [pc, #396]	@ (8016ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8016d38:	681b      	ldr	r3, [r3, #0]
 8016d3a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8016d3e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8016d42:	d106      	bne.n	8016d52 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8016d44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8016d46:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8016d4a:	d102      	bne.n	8016d52 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8016d4c:	4b5f      	ldr	r3, [pc, #380]	@ (8016ecc <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8016d4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8016d50:	e010      	b.n	8016d74 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8016d52:	4b5c      	ldr	r3, [pc, #368]	@ (8016ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8016d54:	681b      	ldr	r3, [r3, #0]
 8016d56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8016d5a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8016d5e:	d106      	bne.n	8016d6e <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 8016d60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8016d62:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8016d66:	d102      	bne.n	8016d6e <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8016d68:	4b59      	ldr	r3, [pc, #356]	@ (8016ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8016d6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8016d6c:	e002      	b.n	8016d74 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8016d6e:	2300      	movs	r3, #0
 8016d70:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8016d72:	e386      	b.n	8017482 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8016d74:	e385      	b.n	8017482 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8016d76:	4b57      	ldr	r3, [pc, #348]	@ (8016ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8016d78:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8016d7a:	e382      	b.n	8017482 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8016d7c:	2300      	movs	r3, #0
 8016d7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8016d80:	e37f      	b.n	8017482 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8016d82:	e9d7 2300 	ldrd	r2, r3, [r7]
 8016d86:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 8016d8a:	430b      	orrs	r3, r1
 8016d8c:	f040 80a7 	bne.w	8016ede <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8016d90:	4b4c      	ldr	r3, [pc, #304]	@ (8016ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8016d92:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8016d94:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8016d98:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8016d9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016d9c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8016da0:	d055      	beq.n	8016e4e <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 8016da2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016da4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8016da8:	f200 8096 	bhi.w	8016ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8016dac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016dae:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8016db2:	f000 8084 	beq.w	8016ebe <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 8016db6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016db8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8016dbc:	f200 808c 	bhi.w	8016ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8016dc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016dc2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8016dc6:	d030      	beq.n	8016e2a <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 8016dc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016dca:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8016dce:	f200 8083 	bhi.w	8016ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8016dd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016dd4:	2b00      	cmp	r3, #0
 8016dd6:	d004      	beq.n	8016de2 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8016dd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016dda:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8016dde:	d012      	beq.n	8016e06 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 8016de0:	e07a      	b.n	8016ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8016de2:	4b38      	ldr	r3, [pc, #224]	@ (8016ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8016de4:	681b      	ldr	r3, [r3, #0]
 8016de6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8016dea:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8016dee:	d107      	bne.n	8016e00 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8016df0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8016df4:	4618      	mov	r0, r3
 8016df6:	f000 fe0b 	bl	8017a10 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8016dfa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016dfc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8016dfe:	e340      	b.n	8017482 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8016e00:	2300      	movs	r3, #0
 8016e02:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8016e04:	e33d      	b.n	8017482 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8016e06:	4b2f      	ldr	r3, [pc, #188]	@ (8016ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8016e08:	681b      	ldr	r3, [r3, #0]
 8016e0a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8016e0e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8016e12:	d107      	bne.n	8016e24 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8016e14:	f107 0318 	add.w	r3, r7, #24
 8016e18:	4618      	mov	r0, r3
 8016e1a:	f000 fb51 	bl	80174c0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8016e1e:	69bb      	ldr	r3, [r7, #24]
 8016e20:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8016e22:	e32e      	b.n	8017482 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8016e24:	2300      	movs	r3, #0
 8016e26:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8016e28:	e32b      	b.n	8017482 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8016e2a:	4b26      	ldr	r3, [pc, #152]	@ (8016ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8016e2c:	681b      	ldr	r3, [r3, #0]
 8016e2e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8016e32:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8016e36:	d107      	bne.n	8016e48 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8016e38:	f107 030c 	add.w	r3, r7, #12
 8016e3c:	4618      	mov	r0, r3
 8016e3e:	f000 fc93 	bl	8017768 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8016e42:	68fb      	ldr	r3, [r7, #12]
 8016e44:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8016e46:	e31c      	b.n	8017482 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8016e48:	2300      	movs	r3, #0
 8016e4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8016e4c:	e319      	b.n	8017482 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8016e4e:	4b1d      	ldr	r3, [pc, #116]	@ (8016ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8016e50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8016e52:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8016e56:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8016e58:	4b1a      	ldr	r3, [pc, #104]	@ (8016ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8016e5a:	681b      	ldr	r3, [r3, #0]
 8016e5c:	f003 0304 	and.w	r3, r3, #4
 8016e60:	2b04      	cmp	r3, #4
 8016e62:	d10c      	bne.n	8016e7e <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8016e64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8016e66:	2b00      	cmp	r3, #0
 8016e68:	d109      	bne.n	8016e7e <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8016e6a:	4b16      	ldr	r3, [pc, #88]	@ (8016ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8016e6c:	681b      	ldr	r3, [r3, #0]
 8016e6e:	08db      	lsrs	r3, r3, #3
 8016e70:	f003 0303 	and.w	r3, r3, #3
 8016e74:	4a14      	ldr	r2, [pc, #80]	@ (8016ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8016e76:	fa22 f303 	lsr.w	r3, r2, r3
 8016e7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8016e7c:	e01e      	b.n	8016ebc <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8016e7e:	4b11      	ldr	r3, [pc, #68]	@ (8016ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8016e80:	681b      	ldr	r3, [r3, #0]
 8016e82:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8016e86:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8016e8a:	d106      	bne.n	8016e9a <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8016e8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8016e8e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8016e92:	d102      	bne.n	8016e9a <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8016e94:	4b0d      	ldr	r3, [pc, #52]	@ (8016ecc <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8016e96:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8016e98:	e010      	b.n	8016ebc <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8016e9a:	4b0a      	ldr	r3, [pc, #40]	@ (8016ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8016e9c:	681b      	ldr	r3, [r3, #0]
 8016e9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8016ea2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8016ea6:	d106      	bne.n	8016eb6 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 8016ea8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8016eaa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8016eae:	d102      	bne.n	8016eb6 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8016eb0:	4b07      	ldr	r3, [pc, #28]	@ (8016ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8016eb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8016eb4:	e002      	b.n	8016ebc <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8016eb6:	2300      	movs	r3, #0
 8016eb8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8016eba:	e2e2      	b.n	8017482 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8016ebc:	e2e1      	b.n	8017482 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8016ebe:	4b05      	ldr	r3, [pc, #20]	@ (8016ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8016ec0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8016ec2:	e2de      	b.n	8017482 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8016ec4:	58024400 	.word	0x58024400
 8016ec8:	03d09000 	.word	0x03d09000
 8016ecc:	003d0900 	.word	0x003d0900
 8016ed0:	017d7840 	.word	0x017d7840
 8016ed4:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 8016ed8:	2300      	movs	r3, #0
 8016eda:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8016edc:	e2d1      	b.n	8017482 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8016ede:	e9d7 2300 	ldrd	r2, r3, [r7]
 8016ee2:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 8016ee6:	430b      	orrs	r3, r1
 8016ee8:	f040 809c 	bne.w	8017024 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8016eec:	4b93      	ldr	r3, [pc, #588]	@ (801713c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8016eee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8016ef0:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8016ef4:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8016ef6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016ef8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8016efc:	d054      	beq.n	8016fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8016efe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016f00:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8016f04:	f200 808b 	bhi.w	801701e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8016f08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016f0a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8016f0e:	f000 8083 	beq.w	8017018 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 8016f12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016f14:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8016f18:	f200 8081 	bhi.w	801701e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8016f1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016f1e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8016f22:	d02f      	beq.n	8016f84 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8016f24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016f26:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8016f2a:	d878      	bhi.n	801701e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8016f2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016f2e:	2b00      	cmp	r3, #0
 8016f30:	d004      	beq.n	8016f3c <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8016f32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016f34:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8016f38:	d012      	beq.n	8016f60 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 8016f3a:	e070      	b.n	801701e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8016f3c:	4b7f      	ldr	r3, [pc, #508]	@ (801713c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8016f3e:	681b      	ldr	r3, [r3, #0]
 8016f40:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8016f44:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8016f48:	d107      	bne.n	8016f5a <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8016f4a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8016f4e:	4618      	mov	r0, r3
 8016f50:	f000 fd5e 	bl	8017a10 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8016f54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016f56:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8016f58:	e293      	b.n	8017482 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8016f5a:	2300      	movs	r3, #0
 8016f5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8016f5e:	e290      	b.n	8017482 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8016f60:	4b76      	ldr	r3, [pc, #472]	@ (801713c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8016f62:	681b      	ldr	r3, [r3, #0]
 8016f64:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8016f68:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8016f6c:	d107      	bne.n	8016f7e <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8016f6e:	f107 0318 	add.w	r3, r7, #24
 8016f72:	4618      	mov	r0, r3
 8016f74:	f000 faa4 	bl	80174c0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8016f78:	69bb      	ldr	r3, [r7, #24]
 8016f7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8016f7c:	e281      	b.n	8017482 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8016f7e:	2300      	movs	r3, #0
 8016f80:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8016f82:	e27e      	b.n	8017482 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8016f84:	4b6d      	ldr	r3, [pc, #436]	@ (801713c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8016f86:	681b      	ldr	r3, [r3, #0]
 8016f88:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8016f8c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8016f90:	d107      	bne.n	8016fa2 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8016f92:	f107 030c 	add.w	r3, r7, #12
 8016f96:	4618      	mov	r0, r3
 8016f98:	f000 fbe6 	bl	8017768 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8016f9c:	68fb      	ldr	r3, [r7, #12]
 8016f9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8016fa0:	e26f      	b.n	8017482 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8016fa2:	2300      	movs	r3, #0
 8016fa4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8016fa6:	e26c      	b.n	8017482 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8016fa8:	4b64      	ldr	r3, [pc, #400]	@ (801713c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8016faa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8016fac:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8016fb0:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8016fb2:	4b62      	ldr	r3, [pc, #392]	@ (801713c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8016fb4:	681b      	ldr	r3, [r3, #0]
 8016fb6:	f003 0304 	and.w	r3, r3, #4
 8016fba:	2b04      	cmp	r3, #4
 8016fbc:	d10c      	bne.n	8016fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 8016fbe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8016fc0:	2b00      	cmp	r3, #0
 8016fc2:	d109      	bne.n	8016fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8016fc4:	4b5d      	ldr	r3, [pc, #372]	@ (801713c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8016fc6:	681b      	ldr	r3, [r3, #0]
 8016fc8:	08db      	lsrs	r3, r3, #3
 8016fca:	f003 0303 	and.w	r3, r3, #3
 8016fce:	4a5c      	ldr	r2, [pc, #368]	@ (8017140 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8016fd0:	fa22 f303 	lsr.w	r3, r2, r3
 8016fd4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8016fd6:	e01e      	b.n	8017016 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8016fd8:	4b58      	ldr	r3, [pc, #352]	@ (801713c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8016fda:	681b      	ldr	r3, [r3, #0]
 8016fdc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8016fe0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8016fe4:	d106      	bne.n	8016ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 8016fe6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8016fe8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8016fec:	d102      	bne.n	8016ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8016fee:	4b55      	ldr	r3, [pc, #340]	@ (8017144 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8016ff0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8016ff2:	e010      	b.n	8017016 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8016ff4:	4b51      	ldr	r3, [pc, #324]	@ (801713c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8016ff6:	681b      	ldr	r3, [r3, #0]
 8016ff8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8016ffc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8017000:	d106      	bne.n	8017010 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 8017002:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017004:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8017008:	d102      	bne.n	8017010 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 801700a:	4b4f      	ldr	r3, [pc, #316]	@ (8017148 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 801700c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801700e:	e002      	b.n	8017016 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8017010:	2300      	movs	r3, #0
 8017012:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8017014:	e235      	b.n	8017482 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8017016:	e234      	b.n	8017482 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8017018:	4b4c      	ldr	r3, [pc, #304]	@ (801714c <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 801701a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801701c:	e231      	b.n	8017482 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 801701e:	2300      	movs	r3, #0
 8017020:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8017022:	e22e      	b.n	8017482 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8017024:	e9d7 2300 	ldrd	r2, r3, [r7]
 8017028:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 801702c:	430b      	orrs	r3, r1
 801702e:	f040 808f 	bne.w	8017150 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8017032:	4b42      	ldr	r3, [pc, #264]	@ (801713c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8017034:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8017036:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 801703a:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 801703c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801703e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8017042:	d06b      	beq.n	801711c <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8017044:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017046:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 801704a:	d874      	bhi.n	8017136 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 801704c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801704e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8017052:	d056      	beq.n	8017102 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8017054:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017056:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 801705a:	d86c      	bhi.n	8017136 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 801705c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801705e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8017062:	d03b      	beq.n	80170dc <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 8017064:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017066:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 801706a:	d864      	bhi.n	8017136 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 801706c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801706e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8017072:	d021      	beq.n	80170b8 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8017074:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017076:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801707a:	d85c      	bhi.n	8017136 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 801707c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801707e:	2b00      	cmp	r3, #0
 8017080:	d004      	beq.n	801708c <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 8017082:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017084:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8017088:	d004      	beq.n	8017094 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 801708a:	e054      	b.n	8017136 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 801708c:	f7fe fa4c 	bl	8015528 <HAL_RCC_GetPCLK1Freq>
 8017090:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8017092:	e1f6      	b.n	8017482 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8017094:	4b29      	ldr	r3, [pc, #164]	@ (801713c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8017096:	681b      	ldr	r3, [r3, #0]
 8017098:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 801709c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80170a0:	d107      	bne.n	80170b2 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80170a2:	f107 0318 	add.w	r3, r7, #24
 80170a6:	4618      	mov	r0, r3
 80170a8:	f000 fa0a 	bl	80174c0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80170ac:	69fb      	ldr	r3, [r7, #28]
 80170ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80170b0:	e1e7      	b.n	8017482 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80170b2:	2300      	movs	r3, #0
 80170b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80170b6:	e1e4      	b.n	8017482 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80170b8:	4b20      	ldr	r3, [pc, #128]	@ (801713c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80170ba:	681b      	ldr	r3, [r3, #0]
 80170bc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80170c0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80170c4:	d107      	bne.n	80170d6 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80170c6:	f107 030c 	add.w	r3, r7, #12
 80170ca:	4618      	mov	r0, r3
 80170cc:	f000 fb4c 	bl	8017768 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80170d0:	693b      	ldr	r3, [r7, #16]
 80170d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80170d4:	e1d5      	b.n	8017482 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80170d6:	2300      	movs	r3, #0
 80170d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80170da:	e1d2      	b.n	8017482 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80170dc:	4b17      	ldr	r3, [pc, #92]	@ (801713c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80170de:	681b      	ldr	r3, [r3, #0]
 80170e0:	f003 0304 	and.w	r3, r3, #4
 80170e4:	2b04      	cmp	r3, #4
 80170e6:	d109      	bne.n	80170fc <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80170e8:	4b14      	ldr	r3, [pc, #80]	@ (801713c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80170ea:	681b      	ldr	r3, [r3, #0]
 80170ec:	08db      	lsrs	r3, r3, #3
 80170ee:	f003 0303 	and.w	r3, r3, #3
 80170f2:	4a13      	ldr	r2, [pc, #76]	@ (8017140 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 80170f4:	fa22 f303 	lsr.w	r3, r2, r3
 80170f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80170fa:	e1c2      	b.n	8017482 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80170fc:	2300      	movs	r3, #0
 80170fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8017100:	e1bf      	b.n	8017482 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8017102:	4b0e      	ldr	r3, [pc, #56]	@ (801713c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8017104:	681b      	ldr	r3, [r3, #0]
 8017106:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801710a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801710e:	d102      	bne.n	8017116 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 8017110:	4b0c      	ldr	r3, [pc, #48]	@ (8017144 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8017112:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8017114:	e1b5      	b.n	8017482 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8017116:	2300      	movs	r3, #0
 8017118:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801711a:	e1b2      	b.n	8017482 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 801711c:	4b07      	ldr	r3, [pc, #28]	@ (801713c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 801711e:	681b      	ldr	r3, [r3, #0]
 8017120:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8017124:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8017128:	d102      	bne.n	8017130 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 801712a:	4b07      	ldr	r3, [pc, #28]	@ (8017148 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 801712c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801712e:	e1a8      	b.n	8017482 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8017130:	2300      	movs	r3, #0
 8017132:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8017134:	e1a5      	b.n	8017482 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8017136:	2300      	movs	r3, #0
 8017138:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801713a:	e1a2      	b.n	8017482 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 801713c:	58024400 	.word	0x58024400
 8017140:	03d09000 	.word	0x03d09000
 8017144:	003d0900 	.word	0x003d0900
 8017148:	017d7840 	.word	0x017d7840
 801714c:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8017150:	e9d7 2300 	ldrd	r2, r3, [r7]
 8017154:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8017158:	430b      	orrs	r3, r1
 801715a:	d173      	bne.n	8017244 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 801715c:	4b9c      	ldr	r3, [pc, #624]	@ (80173d0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 801715e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8017160:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8017164:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8017166:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017168:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801716c:	d02f      	beq.n	80171ce <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 801716e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017170:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8017174:	d863      	bhi.n	801723e <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 8017176:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017178:	2b00      	cmp	r3, #0
 801717a:	d004      	beq.n	8017186 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 801717c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801717e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8017182:	d012      	beq.n	80171aa <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8017184:	e05b      	b.n	801723e <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8017186:	4b92      	ldr	r3, [pc, #584]	@ (80173d0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8017188:	681b      	ldr	r3, [r3, #0]
 801718a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 801718e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8017192:	d107      	bne.n	80171a4 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8017194:	f107 0318 	add.w	r3, r7, #24
 8017198:	4618      	mov	r0, r3
 801719a:	f000 f991 	bl	80174c0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 801719e:	69bb      	ldr	r3, [r7, #24]
 80171a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80171a2:	e16e      	b.n	8017482 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80171a4:	2300      	movs	r3, #0
 80171a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80171a8:	e16b      	b.n	8017482 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80171aa:	4b89      	ldr	r3, [pc, #548]	@ (80173d0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80171ac:	681b      	ldr	r3, [r3, #0]
 80171ae:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80171b2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80171b6:	d107      	bne.n	80171c8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80171b8:	f107 030c 	add.w	r3, r7, #12
 80171bc:	4618      	mov	r0, r3
 80171be:	f000 fad3 	bl	8017768 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80171c2:	697b      	ldr	r3, [r7, #20]
 80171c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80171c6:	e15c      	b.n	8017482 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80171c8:	2300      	movs	r3, #0
 80171ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80171cc:	e159      	b.n	8017482 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80171ce:	4b80      	ldr	r3, [pc, #512]	@ (80173d0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80171d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80171d2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80171d6:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80171d8:	4b7d      	ldr	r3, [pc, #500]	@ (80173d0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80171da:	681b      	ldr	r3, [r3, #0]
 80171dc:	f003 0304 	and.w	r3, r3, #4
 80171e0:	2b04      	cmp	r3, #4
 80171e2:	d10c      	bne.n	80171fe <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 80171e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80171e6:	2b00      	cmp	r3, #0
 80171e8:	d109      	bne.n	80171fe <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80171ea:	4b79      	ldr	r3, [pc, #484]	@ (80173d0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80171ec:	681b      	ldr	r3, [r3, #0]
 80171ee:	08db      	lsrs	r3, r3, #3
 80171f0:	f003 0303 	and.w	r3, r3, #3
 80171f4:	4a77      	ldr	r2, [pc, #476]	@ (80173d4 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 80171f6:	fa22 f303 	lsr.w	r3, r2, r3
 80171fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80171fc:	e01e      	b.n	801723c <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80171fe:	4b74      	ldr	r3, [pc, #464]	@ (80173d0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8017200:	681b      	ldr	r3, [r3, #0]
 8017202:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8017206:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801720a:	d106      	bne.n	801721a <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 801720c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801720e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8017212:	d102      	bne.n	801721a <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8017214:	4b70      	ldr	r3, [pc, #448]	@ (80173d8 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8017216:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8017218:	e010      	b.n	801723c <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 801721a:	4b6d      	ldr	r3, [pc, #436]	@ (80173d0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 801721c:	681b      	ldr	r3, [r3, #0]
 801721e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8017222:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8017226:	d106      	bne.n	8017236 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 8017228:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801722a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801722e:	d102      	bne.n	8017236 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8017230:	4b6a      	ldr	r3, [pc, #424]	@ (80173dc <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8017232:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8017234:	e002      	b.n	801723c <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8017236:	2300      	movs	r3, #0
 8017238:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 801723a:	e122      	b.n	8017482 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 801723c:	e121      	b.n	8017482 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 801723e:	2300      	movs	r3, #0
 8017240:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8017242:	e11e      	b.n	8017482 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8017244:	e9d7 2300 	ldrd	r2, r3, [r7]
 8017248:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 801724c:	430b      	orrs	r3, r1
 801724e:	d133      	bne.n	80172b8 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8017250:	4b5f      	ldr	r3, [pc, #380]	@ (80173d0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8017252:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8017254:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8017258:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 801725a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801725c:	2b00      	cmp	r3, #0
 801725e:	d004      	beq.n	801726a <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8017260:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017262:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8017266:	d012      	beq.n	801728e <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 8017268:	e023      	b.n	80172b2 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 801726a:	4b59      	ldr	r3, [pc, #356]	@ (80173d0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 801726c:	681b      	ldr	r3, [r3, #0]
 801726e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8017272:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8017276:	d107      	bne.n	8017288 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8017278:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801727c:	4618      	mov	r0, r3
 801727e:	f000 fbc7 	bl	8017a10 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8017282:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017284:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8017286:	e0fc      	b.n	8017482 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8017288:	2300      	movs	r3, #0
 801728a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801728c:	e0f9      	b.n	8017482 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 801728e:	4b50      	ldr	r3, [pc, #320]	@ (80173d0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8017290:	681b      	ldr	r3, [r3, #0]
 8017292:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8017296:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 801729a:	d107      	bne.n	80172ac <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801729c:	f107 0318 	add.w	r3, r7, #24
 80172a0:	4618      	mov	r0, r3
 80172a2:	f000 f90d 	bl	80174c0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80172a6:	6a3b      	ldr	r3, [r7, #32]
 80172a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80172aa:	e0ea      	b.n	8017482 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80172ac:	2300      	movs	r3, #0
 80172ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80172b0:	e0e7      	b.n	8017482 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 80172b2:	2300      	movs	r3, #0
 80172b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80172b6:	e0e4      	b.n	8017482 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 80172b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80172bc:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 80172c0:	430b      	orrs	r3, r1
 80172c2:	f040 808d 	bne.w	80173e0 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 80172c6:	4b42      	ldr	r3, [pc, #264]	@ (80173d0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80172c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80172ca:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 80172ce:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80172d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80172d2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80172d6:	d06b      	beq.n	80173b0 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 80172d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80172da:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80172de:	d874      	bhi.n	80173ca <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80172e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80172e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80172e6:	d056      	beq.n	8017396 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 80172e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80172ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80172ee:	d86c      	bhi.n	80173ca <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80172f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80172f2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80172f6:	d03b      	beq.n	8017370 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 80172f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80172fa:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80172fe:	d864      	bhi.n	80173ca <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8017300:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017302:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8017306:	d021      	beq.n	801734c <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8017308:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801730a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801730e:	d85c      	bhi.n	80173ca <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8017310:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017312:	2b00      	cmp	r3, #0
 8017314:	d004      	beq.n	8017320 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 8017316:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017318:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801731c:	d004      	beq.n	8017328 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 801731e:	e054      	b.n	80173ca <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8017320:	f000 f8b8 	bl	8017494 <HAL_RCCEx_GetD3PCLK1Freq>
 8017324:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8017326:	e0ac      	b.n	8017482 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8017328:	4b29      	ldr	r3, [pc, #164]	@ (80173d0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 801732a:	681b      	ldr	r3, [r3, #0]
 801732c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8017330:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8017334:	d107      	bne.n	8017346 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8017336:	f107 0318 	add.w	r3, r7, #24
 801733a:	4618      	mov	r0, r3
 801733c:	f000 f8c0 	bl	80174c0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8017340:	69fb      	ldr	r3, [r7, #28]
 8017342:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8017344:	e09d      	b.n	8017482 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8017346:	2300      	movs	r3, #0
 8017348:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801734a:	e09a      	b.n	8017482 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 801734c:	4b20      	ldr	r3, [pc, #128]	@ (80173d0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 801734e:	681b      	ldr	r3, [r3, #0]
 8017350:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8017354:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8017358:	d107      	bne.n	801736a <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801735a:	f107 030c 	add.w	r3, r7, #12
 801735e:	4618      	mov	r0, r3
 8017360:	f000 fa02 	bl	8017768 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8017364:	693b      	ldr	r3, [r7, #16]
 8017366:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8017368:	e08b      	b.n	8017482 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801736a:	2300      	movs	r3, #0
 801736c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801736e:	e088      	b.n	8017482 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8017370:	4b17      	ldr	r3, [pc, #92]	@ (80173d0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8017372:	681b      	ldr	r3, [r3, #0]
 8017374:	f003 0304 	and.w	r3, r3, #4
 8017378:	2b04      	cmp	r3, #4
 801737a:	d109      	bne.n	8017390 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801737c:	4b14      	ldr	r3, [pc, #80]	@ (80173d0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 801737e:	681b      	ldr	r3, [r3, #0]
 8017380:	08db      	lsrs	r3, r3, #3
 8017382:	f003 0303 	and.w	r3, r3, #3
 8017386:	4a13      	ldr	r2, [pc, #76]	@ (80173d4 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8017388:	fa22 f303 	lsr.w	r3, r2, r3
 801738c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801738e:	e078      	b.n	8017482 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8017390:	2300      	movs	r3, #0
 8017392:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8017394:	e075      	b.n	8017482 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8017396:	4b0e      	ldr	r3, [pc, #56]	@ (80173d0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8017398:	681b      	ldr	r3, [r3, #0]
 801739a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801739e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80173a2:	d102      	bne.n	80173aa <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 80173a4:	4b0c      	ldr	r3, [pc, #48]	@ (80173d8 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 80173a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80173a8:	e06b      	b.n	8017482 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80173aa:	2300      	movs	r3, #0
 80173ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80173ae:	e068      	b.n	8017482 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80173b0:	4b07      	ldr	r3, [pc, #28]	@ (80173d0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80173b2:	681b      	ldr	r3, [r3, #0]
 80173b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80173b8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80173bc:	d102      	bne.n	80173c4 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 80173be:	4b07      	ldr	r3, [pc, #28]	@ (80173dc <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 80173c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80173c2:	e05e      	b.n	8017482 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80173c4:	2300      	movs	r3, #0
 80173c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80173c8:	e05b      	b.n	8017482 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 80173ca:	2300      	movs	r3, #0
 80173cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80173ce:	e058      	b.n	8017482 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80173d0:	58024400 	.word	0x58024400
 80173d4:	03d09000 	.word	0x03d09000
 80173d8:	003d0900 	.word	0x003d0900
 80173dc:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 80173e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80173e4:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 80173e8:	430b      	orrs	r3, r1
 80173ea:	d148      	bne.n	801747e <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 80173ec:	4b27      	ldr	r3, [pc, #156]	@ (801748c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80173ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80173f0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80173f4:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80173f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80173f8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80173fc:	d02a      	beq.n	8017454 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 80173fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017400:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8017404:	d838      	bhi.n	8017478 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 8017406:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017408:	2b00      	cmp	r3, #0
 801740a:	d004      	beq.n	8017416 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 801740c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801740e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8017412:	d00d      	beq.n	8017430 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 8017414:	e030      	b.n	8017478 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8017416:	4b1d      	ldr	r3, [pc, #116]	@ (801748c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8017418:	681b      	ldr	r3, [r3, #0]
 801741a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801741e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8017422:	d102      	bne.n	801742a <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 8017424:	4b1a      	ldr	r3, [pc, #104]	@ (8017490 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8017426:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8017428:	e02b      	b.n	8017482 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801742a:	2300      	movs	r3, #0
 801742c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801742e:	e028      	b.n	8017482 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8017430:	4b16      	ldr	r3, [pc, #88]	@ (801748c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8017432:	681b      	ldr	r3, [r3, #0]
 8017434:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8017438:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 801743c:	d107      	bne.n	801744e <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 801743e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8017442:	4618      	mov	r0, r3
 8017444:	f000 fae4 	bl	8017a10 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8017448:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801744a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801744c:	e019      	b.n	8017482 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801744e:	2300      	movs	r3, #0
 8017450:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8017452:	e016      	b.n	8017482 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8017454:	4b0d      	ldr	r3, [pc, #52]	@ (801748c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8017456:	681b      	ldr	r3, [r3, #0]
 8017458:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 801745c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8017460:	d107      	bne.n	8017472 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8017462:	f107 0318 	add.w	r3, r7, #24
 8017466:	4618      	mov	r0, r3
 8017468:	f000 f82a 	bl	80174c0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 801746c:	69fb      	ldr	r3, [r7, #28]
 801746e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8017470:	e007      	b.n	8017482 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8017472:	2300      	movs	r3, #0
 8017474:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8017476:	e004      	b.n	8017482 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8017478:	2300      	movs	r3, #0
 801747a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801747c:	e001      	b.n	8017482 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 801747e:	2300      	movs	r3, #0
 8017480:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 8017482:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8017484:	4618      	mov	r0, r3
 8017486:	3740      	adds	r7, #64	@ 0x40
 8017488:	46bd      	mov	sp, r7
 801748a:	bd80      	pop	{r7, pc}
 801748c:	58024400 	.word	0x58024400
 8017490:	017d7840 	.word	0x017d7840

08017494 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8017494:	b580      	push	{r7, lr}
 8017496:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8017498:	f7fe f816 	bl	80154c8 <HAL_RCC_GetHCLKFreq>
 801749c:	4602      	mov	r2, r0
 801749e:	4b06      	ldr	r3, [pc, #24]	@ (80174b8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80174a0:	6a1b      	ldr	r3, [r3, #32]
 80174a2:	091b      	lsrs	r3, r3, #4
 80174a4:	f003 0307 	and.w	r3, r3, #7
 80174a8:	4904      	ldr	r1, [pc, #16]	@ (80174bc <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80174aa:	5ccb      	ldrb	r3, [r1, r3]
 80174ac:	f003 031f 	and.w	r3, r3, #31
 80174b0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80174b4:	4618      	mov	r0, r3
 80174b6:	bd80      	pop	{r7, pc}
 80174b8:	58024400 	.word	0x58024400
 80174bc:	08020554 	.word	0x08020554

080174c0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80174c0:	b480      	push	{r7}
 80174c2:	b089      	sub	sp, #36	@ 0x24
 80174c4:	af00      	add	r7, sp, #0
 80174c6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80174c8:	4ba1      	ldr	r3, [pc, #644]	@ (8017750 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80174ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80174cc:	f003 0303 	and.w	r3, r3, #3
 80174d0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80174d2:	4b9f      	ldr	r3, [pc, #636]	@ (8017750 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80174d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80174d6:	0b1b      	lsrs	r3, r3, #12
 80174d8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80174dc:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80174de:	4b9c      	ldr	r3, [pc, #624]	@ (8017750 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80174e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80174e2:	091b      	lsrs	r3, r3, #4
 80174e4:	f003 0301 	and.w	r3, r3, #1
 80174e8:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80174ea:	4b99      	ldr	r3, [pc, #612]	@ (8017750 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80174ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80174ee:	08db      	lsrs	r3, r3, #3
 80174f0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80174f4:	693a      	ldr	r2, [r7, #16]
 80174f6:	fb02 f303 	mul.w	r3, r2, r3
 80174fa:	ee07 3a90 	vmov	s15, r3
 80174fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8017502:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8017506:	697b      	ldr	r3, [r7, #20]
 8017508:	2b00      	cmp	r3, #0
 801750a:	f000 8111 	beq.w	8017730 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 801750e:	69bb      	ldr	r3, [r7, #24]
 8017510:	2b02      	cmp	r3, #2
 8017512:	f000 8083 	beq.w	801761c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8017516:	69bb      	ldr	r3, [r7, #24]
 8017518:	2b02      	cmp	r3, #2
 801751a:	f200 80a1 	bhi.w	8017660 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 801751e:	69bb      	ldr	r3, [r7, #24]
 8017520:	2b00      	cmp	r3, #0
 8017522:	d003      	beq.n	801752c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8017524:	69bb      	ldr	r3, [r7, #24]
 8017526:	2b01      	cmp	r3, #1
 8017528:	d056      	beq.n	80175d8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 801752a:	e099      	b.n	8017660 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801752c:	4b88      	ldr	r3, [pc, #544]	@ (8017750 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801752e:	681b      	ldr	r3, [r3, #0]
 8017530:	f003 0320 	and.w	r3, r3, #32
 8017534:	2b00      	cmp	r3, #0
 8017536:	d02d      	beq.n	8017594 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8017538:	4b85      	ldr	r3, [pc, #532]	@ (8017750 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801753a:	681b      	ldr	r3, [r3, #0]
 801753c:	08db      	lsrs	r3, r3, #3
 801753e:	f003 0303 	and.w	r3, r3, #3
 8017542:	4a84      	ldr	r2, [pc, #528]	@ (8017754 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8017544:	fa22 f303 	lsr.w	r3, r2, r3
 8017548:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 801754a:	68bb      	ldr	r3, [r7, #8]
 801754c:	ee07 3a90 	vmov	s15, r3
 8017550:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8017554:	697b      	ldr	r3, [r7, #20]
 8017556:	ee07 3a90 	vmov	s15, r3
 801755a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801755e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8017562:	4b7b      	ldr	r3, [pc, #492]	@ (8017750 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8017564:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8017566:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801756a:	ee07 3a90 	vmov	s15, r3
 801756e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8017572:	ed97 6a03 	vldr	s12, [r7, #12]
 8017576:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8017758 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 801757a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801757e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8017582:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8017586:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801758a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801758e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8017592:	e087      	b.n	80176a4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8017594:	697b      	ldr	r3, [r7, #20]
 8017596:	ee07 3a90 	vmov	s15, r3
 801759a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801759e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 801775c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80175a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80175a6:	4b6a      	ldr	r3, [pc, #424]	@ (8017750 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80175a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80175aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80175ae:	ee07 3a90 	vmov	s15, r3
 80175b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80175b6:	ed97 6a03 	vldr	s12, [r7, #12]
 80175ba:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8017758 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80175be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80175c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80175c6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80175ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80175ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80175d2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80175d6:	e065      	b.n	80176a4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80175d8:	697b      	ldr	r3, [r7, #20]
 80175da:	ee07 3a90 	vmov	s15, r3
 80175de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80175e2:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8017760 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80175e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80175ea:	4b59      	ldr	r3, [pc, #356]	@ (8017750 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80175ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80175ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80175f2:	ee07 3a90 	vmov	s15, r3
 80175f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80175fa:	ed97 6a03 	vldr	s12, [r7, #12]
 80175fe:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8017758 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8017602:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8017606:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801760a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801760e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8017612:	ee67 7a27 	vmul.f32	s15, s14, s15
 8017616:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801761a:	e043      	b.n	80176a4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 801761c:	697b      	ldr	r3, [r7, #20]
 801761e:	ee07 3a90 	vmov	s15, r3
 8017622:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8017626:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8017764 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 801762a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801762e:	4b48      	ldr	r3, [pc, #288]	@ (8017750 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8017630:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8017632:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8017636:	ee07 3a90 	vmov	s15, r3
 801763a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801763e:	ed97 6a03 	vldr	s12, [r7, #12]
 8017642:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8017758 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8017646:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801764a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801764e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8017652:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8017656:	ee67 7a27 	vmul.f32	s15, s14, s15
 801765a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801765e:	e021      	b.n	80176a4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8017660:	697b      	ldr	r3, [r7, #20]
 8017662:	ee07 3a90 	vmov	s15, r3
 8017666:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801766a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8017760 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 801766e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8017672:	4b37      	ldr	r3, [pc, #220]	@ (8017750 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8017674:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8017676:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801767a:	ee07 3a90 	vmov	s15, r3
 801767e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8017682:	ed97 6a03 	vldr	s12, [r7, #12]
 8017686:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8017758 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 801768a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801768e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8017692:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8017696:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801769a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801769e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80176a2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80176a4:	4b2a      	ldr	r3, [pc, #168]	@ (8017750 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80176a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80176a8:	0a5b      	lsrs	r3, r3, #9
 80176aa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80176ae:	ee07 3a90 	vmov	s15, r3
 80176b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80176b6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80176ba:	ee37 7a87 	vadd.f32	s14, s15, s14
 80176be:	edd7 6a07 	vldr	s13, [r7, #28]
 80176c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80176c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80176ca:	ee17 2a90 	vmov	r2, s15
 80176ce:	687b      	ldr	r3, [r7, #4]
 80176d0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80176d2:	4b1f      	ldr	r3, [pc, #124]	@ (8017750 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80176d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80176d6:	0c1b      	lsrs	r3, r3, #16
 80176d8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80176dc:	ee07 3a90 	vmov	s15, r3
 80176e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80176e4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80176e8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80176ec:	edd7 6a07 	vldr	s13, [r7, #28]
 80176f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80176f4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80176f8:	ee17 2a90 	vmov	r2, s15
 80176fc:	687b      	ldr	r3, [r7, #4]
 80176fe:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8017700:	4b13      	ldr	r3, [pc, #76]	@ (8017750 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8017702:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8017704:	0e1b      	lsrs	r3, r3, #24
 8017706:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801770a:	ee07 3a90 	vmov	s15, r3
 801770e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8017712:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8017716:	ee37 7a87 	vadd.f32	s14, s15, s14
 801771a:	edd7 6a07 	vldr	s13, [r7, #28]
 801771e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8017722:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8017726:	ee17 2a90 	vmov	r2, s15
 801772a:	687b      	ldr	r3, [r7, #4]
 801772c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 801772e:	e008      	b.n	8017742 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8017730:	687b      	ldr	r3, [r7, #4]
 8017732:	2200      	movs	r2, #0
 8017734:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8017736:	687b      	ldr	r3, [r7, #4]
 8017738:	2200      	movs	r2, #0
 801773a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 801773c:	687b      	ldr	r3, [r7, #4]
 801773e:	2200      	movs	r2, #0
 8017740:	609a      	str	r2, [r3, #8]
}
 8017742:	bf00      	nop
 8017744:	3724      	adds	r7, #36	@ 0x24
 8017746:	46bd      	mov	sp, r7
 8017748:	f85d 7b04 	ldr.w	r7, [sp], #4
 801774c:	4770      	bx	lr
 801774e:	bf00      	nop
 8017750:	58024400 	.word	0x58024400
 8017754:	03d09000 	.word	0x03d09000
 8017758:	46000000 	.word	0x46000000
 801775c:	4c742400 	.word	0x4c742400
 8017760:	4a742400 	.word	0x4a742400
 8017764:	4bbebc20 	.word	0x4bbebc20

08017768 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8017768:	b480      	push	{r7}
 801776a:	b089      	sub	sp, #36	@ 0x24
 801776c:	af00      	add	r7, sp, #0
 801776e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8017770:	4ba1      	ldr	r3, [pc, #644]	@ (80179f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8017772:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017774:	f003 0303 	and.w	r3, r3, #3
 8017778:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 801777a:	4b9f      	ldr	r3, [pc, #636]	@ (80179f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801777c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801777e:	0d1b      	lsrs	r3, r3, #20
 8017780:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8017784:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8017786:	4b9c      	ldr	r3, [pc, #624]	@ (80179f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8017788:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801778a:	0a1b      	lsrs	r3, r3, #8
 801778c:	f003 0301 	and.w	r3, r3, #1
 8017790:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8017792:	4b99      	ldr	r3, [pc, #612]	@ (80179f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8017794:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8017796:	08db      	lsrs	r3, r3, #3
 8017798:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801779c:	693a      	ldr	r2, [r7, #16]
 801779e:	fb02 f303 	mul.w	r3, r2, r3
 80177a2:	ee07 3a90 	vmov	s15, r3
 80177a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80177aa:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80177ae:	697b      	ldr	r3, [r7, #20]
 80177b0:	2b00      	cmp	r3, #0
 80177b2:	f000 8111 	beq.w	80179d8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80177b6:	69bb      	ldr	r3, [r7, #24]
 80177b8:	2b02      	cmp	r3, #2
 80177ba:	f000 8083 	beq.w	80178c4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80177be:	69bb      	ldr	r3, [r7, #24]
 80177c0:	2b02      	cmp	r3, #2
 80177c2:	f200 80a1 	bhi.w	8017908 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80177c6:	69bb      	ldr	r3, [r7, #24]
 80177c8:	2b00      	cmp	r3, #0
 80177ca:	d003      	beq.n	80177d4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80177cc:	69bb      	ldr	r3, [r7, #24]
 80177ce:	2b01      	cmp	r3, #1
 80177d0:	d056      	beq.n	8017880 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80177d2:	e099      	b.n	8017908 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80177d4:	4b88      	ldr	r3, [pc, #544]	@ (80179f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80177d6:	681b      	ldr	r3, [r3, #0]
 80177d8:	f003 0320 	and.w	r3, r3, #32
 80177dc:	2b00      	cmp	r3, #0
 80177de:	d02d      	beq.n	801783c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80177e0:	4b85      	ldr	r3, [pc, #532]	@ (80179f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80177e2:	681b      	ldr	r3, [r3, #0]
 80177e4:	08db      	lsrs	r3, r3, #3
 80177e6:	f003 0303 	and.w	r3, r3, #3
 80177ea:	4a84      	ldr	r2, [pc, #528]	@ (80179fc <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80177ec:	fa22 f303 	lsr.w	r3, r2, r3
 80177f0:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80177f2:	68bb      	ldr	r3, [r7, #8]
 80177f4:	ee07 3a90 	vmov	s15, r3
 80177f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80177fc:	697b      	ldr	r3, [r7, #20]
 80177fe:	ee07 3a90 	vmov	s15, r3
 8017802:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8017806:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801780a:	4b7b      	ldr	r3, [pc, #492]	@ (80179f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801780c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801780e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8017812:	ee07 3a90 	vmov	s15, r3
 8017816:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801781a:	ed97 6a03 	vldr	s12, [r7, #12]
 801781e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8017a00 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8017822:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8017826:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801782a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801782e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8017832:	ee67 7a27 	vmul.f32	s15, s14, s15
 8017836:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 801783a:	e087      	b.n	801794c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 801783c:	697b      	ldr	r3, [r7, #20]
 801783e:	ee07 3a90 	vmov	s15, r3
 8017842:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8017846:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8017a04 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 801784a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801784e:	4b6a      	ldr	r3, [pc, #424]	@ (80179f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8017850:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8017852:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8017856:	ee07 3a90 	vmov	s15, r3
 801785a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801785e:	ed97 6a03 	vldr	s12, [r7, #12]
 8017862:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8017a00 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8017866:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801786a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801786e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8017872:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8017876:	ee67 7a27 	vmul.f32	s15, s14, s15
 801787a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801787e:	e065      	b.n	801794c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8017880:	697b      	ldr	r3, [r7, #20]
 8017882:	ee07 3a90 	vmov	s15, r3
 8017886:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801788a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8017a08 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 801788e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8017892:	4b59      	ldr	r3, [pc, #356]	@ (80179f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8017894:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8017896:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801789a:	ee07 3a90 	vmov	s15, r3
 801789e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80178a2:	ed97 6a03 	vldr	s12, [r7, #12]
 80178a6:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8017a00 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80178aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80178ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80178b2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80178b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80178ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80178be:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80178c2:	e043      	b.n	801794c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80178c4:	697b      	ldr	r3, [r7, #20]
 80178c6:	ee07 3a90 	vmov	s15, r3
 80178ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80178ce:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8017a0c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80178d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80178d6:	4b48      	ldr	r3, [pc, #288]	@ (80179f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80178d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80178da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80178de:	ee07 3a90 	vmov	s15, r3
 80178e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80178e6:	ed97 6a03 	vldr	s12, [r7, #12]
 80178ea:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8017a00 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80178ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80178f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80178f6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80178fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80178fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8017902:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8017906:	e021      	b.n	801794c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8017908:	697b      	ldr	r3, [r7, #20]
 801790a:	ee07 3a90 	vmov	s15, r3
 801790e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8017912:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8017a08 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8017916:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801791a:	4b37      	ldr	r3, [pc, #220]	@ (80179f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801791c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801791e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8017922:	ee07 3a90 	vmov	s15, r3
 8017926:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801792a:	ed97 6a03 	vldr	s12, [r7, #12]
 801792e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8017a00 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8017932:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8017936:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801793a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801793e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8017942:	ee67 7a27 	vmul.f32	s15, s14, s15
 8017946:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801794a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 801794c:	4b2a      	ldr	r3, [pc, #168]	@ (80179f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801794e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8017950:	0a5b      	lsrs	r3, r3, #9
 8017952:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8017956:	ee07 3a90 	vmov	s15, r3
 801795a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801795e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8017962:	ee37 7a87 	vadd.f32	s14, s15, s14
 8017966:	edd7 6a07 	vldr	s13, [r7, #28]
 801796a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801796e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8017972:	ee17 2a90 	vmov	r2, s15
 8017976:	687b      	ldr	r3, [r7, #4]
 8017978:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 801797a:	4b1f      	ldr	r3, [pc, #124]	@ (80179f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801797c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801797e:	0c1b      	lsrs	r3, r3, #16
 8017980:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8017984:	ee07 3a90 	vmov	s15, r3
 8017988:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801798c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8017990:	ee37 7a87 	vadd.f32	s14, s15, s14
 8017994:	edd7 6a07 	vldr	s13, [r7, #28]
 8017998:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801799c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80179a0:	ee17 2a90 	vmov	r2, s15
 80179a4:	687b      	ldr	r3, [r7, #4]
 80179a6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80179a8:	4b13      	ldr	r3, [pc, #76]	@ (80179f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80179aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80179ac:	0e1b      	lsrs	r3, r3, #24
 80179ae:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80179b2:	ee07 3a90 	vmov	s15, r3
 80179b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80179ba:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80179be:	ee37 7a87 	vadd.f32	s14, s15, s14
 80179c2:	edd7 6a07 	vldr	s13, [r7, #28]
 80179c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80179ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80179ce:	ee17 2a90 	vmov	r2, s15
 80179d2:	687b      	ldr	r3, [r7, #4]
 80179d4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80179d6:	e008      	b.n	80179ea <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80179d8:	687b      	ldr	r3, [r7, #4]
 80179da:	2200      	movs	r2, #0
 80179dc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80179de:	687b      	ldr	r3, [r7, #4]
 80179e0:	2200      	movs	r2, #0
 80179e2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80179e4:	687b      	ldr	r3, [r7, #4]
 80179e6:	2200      	movs	r2, #0
 80179e8:	609a      	str	r2, [r3, #8]
}
 80179ea:	bf00      	nop
 80179ec:	3724      	adds	r7, #36	@ 0x24
 80179ee:	46bd      	mov	sp, r7
 80179f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80179f4:	4770      	bx	lr
 80179f6:	bf00      	nop
 80179f8:	58024400 	.word	0x58024400
 80179fc:	03d09000 	.word	0x03d09000
 8017a00:	46000000 	.word	0x46000000
 8017a04:	4c742400 	.word	0x4c742400
 8017a08:	4a742400 	.word	0x4a742400
 8017a0c:	4bbebc20 	.word	0x4bbebc20

08017a10 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8017a10:	b480      	push	{r7}
 8017a12:	b089      	sub	sp, #36	@ 0x24
 8017a14:	af00      	add	r7, sp, #0
 8017a16:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8017a18:	4ba0      	ldr	r3, [pc, #640]	@ (8017c9c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8017a1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017a1c:	f003 0303 	and.w	r3, r3, #3
 8017a20:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8017a22:	4b9e      	ldr	r3, [pc, #632]	@ (8017c9c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8017a24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017a26:	091b      	lsrs	r3, r3, #4
 8017a28:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8017a2c:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8017a2e:	4b9b      	ldr	r3, [pc, #620]	@ (8017c9c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8017a30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8017a32:	f003 0301 	and.w	r3, r3, #1
 8017a36:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8017a38:	4b98      	ldr	r3, [pc, #608]	@ (8017c9c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8017a3a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8017a3c:	08db      	lsrs	r3, r3, #3
 8017a3e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8017a42:	693a      	ldr	r2, [r7, #16]
 8017a44:	fb02 f303 	mul.w	r3, r2, r3
 8017a48:	ee07 3a90 	vmov	s15, r3
 8017a4c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8017a50:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8017a54:	697b      	ldr	r3, [r7, #20]
 8017a56:	2b00      	cmp	r3, #0
 8017a58:	f000 8111 	beq.w	8017c7e <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8017a5c:	69bb      	ldr	r3, [r7, #24]
 8017a5e:	2b02      	cmp	r3, #2
 8017a60:	f000 8083 	beq.w	8017b6a <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8017a64:	69bb      	ldr	r3, [r7, #24]
 8017a66:	2b02      	cmp	r3, #2
 8017a68:	f200 80a1 	bhi.w	8017bae <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8017a6c:	69bb      	ldr	r3, [r7, #24]
 8017a6e:	2b00      	cmp	r3, #0
 8017a70:	d003      	beq.n	8017a7a <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8017a72:	69bb      	ldr	r3, [r7, #24]
 8017a74:	2b01      	cmp	r3, #1
 8017a76:	d056      	beq.n	8017b26 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8017a78:	e099      	b.n	8017bae <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8017a7a:	4b88      	ldr	r3, [pc, #544]	@ (8017c9c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8017a7c:	681b      	ldr	r3, [r3, #0]
 8017a7e:	f003 0320 	and.w	r3, r3, #32
 8017a82:	2b00      	cmp	r3, #0
 8017a84:	d02d      	beq.n	8017ae2 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8017a86:	4b85      	ldr	r3, [pc, #532]	@ (8017c9c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8017a88:	681b      	ldr	r3, [r3, #0]
 8017a8a:	08db      	lsrs	r3, r3, #3
 8017a8c:	f003 0303 	and.w	r3, r3, #3
 8017a90:	4a83      	ldr	r2, [pc, #524]	@ (8017ca0 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8017a92:	fa22 f303 	lsr.w	r3, r2, r3
 8017a96:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8017a98:	68bb      	ldr	r3, [r7, #8]
 8017a9a:	ee07 3a90 	vmov	s15, r3
 8017a9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8017aa2:	697b      	ldr	r3, [r7, #20]
 8017aa4:	ee07 3a90 	vmov	s15, r3
 8017aa8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8017aac:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8017ab0:	4b7a      	ldr	r3, [pc, #488]	@ (8017c9c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8017ab2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8017ab4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8017ab8:	ee07 3a90 	vmov	s15, r3
 8017abc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8017ac0:	ed97 6a03 	vldr	s12, [r7, #12]
 8017ac4:	eddf 5a77 	vldr	s11, [pc, #476]	@ 8017ca4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8017ac8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8017acc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8017ad0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8017ad4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8017ad8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8017adc:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8017ae0:	e087      	b.n	8017bf2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8017ae2:	697b      	ldr	r3, [r7, #20]
 8017ae4:	ee07 3a90 	vmov	s15, r3
 8017ae8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8017aec:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 8017ca8 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8017af0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8017af4:	4b69      	ldr	r3, [pc, #420]	@ (8017c9c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8017af6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8017af8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8017afc:	ee07 3a90 	vmov	s15, r3
 8017b00:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8017b04:	ed97 6a03 	vldr	s12, [r7, #12]
 8017b08:	eddf 5a66 	vldr	s11, [pc, #408]	@ 8017ca4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8017b0c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8017b10:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8017b14:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8017b18:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8017b1c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8017b20:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8017b24:	e065      	b.n	8017bf2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8017b26:	697b      	ldr	r3, [r7, #20]
 8017b28:	ee07 3a90 	vmov	s15, r3
 8017b2c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8017b30:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 8017cac <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8017b34:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8017b38:	4b58      	ldr	r3, [pc, #352]	@ (8017c9c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8017b3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8017b3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8017b40:	ee07 3a90 	vmov	s15, r3
 8017b44:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8017b48:	ed97 6a03 	vldr	s12, [r7, #12]
 8017b4c:	eddf 5a55 	vldr	s11, [pc, #340]	@ 8017ca4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8017b50:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8017b54:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8017b58:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8017b5c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8017b60:	ee67 7a27 	vmul.f32	s15, s14, s15
 8017b64:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8017b68:	e043      	b.n	8017bf2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8017b6a:	697b      	ldr	r3, [r7, #20]
 8017b6c:	ee07 3a90 	vmov	s15, r3
 8017b70:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8017b74:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 8017cb0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8017b78:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8017b7c:	4b47      	ldr	r3, [pc, #284]	@ (8017c9c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8017b7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8017b80:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8017b84:	ee07 3a90 	vmov	s15, r3
 8017b88:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8017b8c:	ed97 6a03 	vldr	s12, [r7, #12]
 8017b90:	eddf 5a44 	vldr	s11, [pc, #272]	@ 8017ca4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8017b94:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8017b98:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8017b9c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8017ba0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8017ba4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8017ba8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8017bac:	e021      	b.n	8017bf2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8017bae:	697b      	ldr	r3, [r7, #20]
 8017bb0:	ee07 3a90 	vmov	s15, r3
 8017bb4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8017bb8:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 8017ca8 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8017bbc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8017bc0:	4b36      	ldr	r3, [pc, #216]	@ (8017c9c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8017bc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8017bc4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8017bc8:	ee07 3a90 	vmov	s15, r3
 8017bcc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8017bd0:	ed97 6a03 	vldr	s12, [r7, #12]
 8017bd4:	eddf 5a33 	vldr	s11, [pc, #204]	@ 8017ca4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8017bd8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8017bdc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8017be0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8017be4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8017be8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8017bec:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8017bf0:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8017bf2:	4b2a      	ldr	r3, [pc, #168]	@ (8017c9c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8017bf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8017bf6:	0a5b      	lsrs	r3, r3, #9
 8017bf8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8017bfc:	ee07 3a90 	vmov	s15, r3
 8017c00:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8017c04:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8017c08:	ee37 7a87 	vadd.f32	s14, s15, s14
 8017c0c:	edd7 6a07 	vldr	s13, [r7, #28]
 8017c10:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8017c14:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8017c18:	ee17 2a90 	vmov	r2, s15
 8017c1c:	687b      	ldr	r3, [r7, #4]
 8017c1e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8017c20:	4b1e      	ldr	r3, [pc, #120]	@ (8017c9c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8017c22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8017c24:	0c1b      	lsrs	r3, r3, #16
 8017c26:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8017c2a:	ee07 3a90 	vmov	s15, r3
 8017c2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8017c32:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8017c36:	ee37 7a87 	vadd.f32	s14, s15, s14
 8017c3a:	edd7 6a07 	vldr	s13, [r7, #28]
 8017c3e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8017c42:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8017c46:	ee17 2a90 	vmov	r2, s15
 8017c4a:	687b      	ldr	r3, [r7, #4]
 8017c4c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8017c4e:	4b13      	ldr	r3, [pc, #76]	@ (8017c9c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8017c50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8017c52:	0e1b      	lsrs	r3, r3, #24
 8017c54:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8017c58:	ee07 3a90 	vmov	s15, r3
 8017c5c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8017c60:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8017c64:	ee37 7a87 	vadd.f32	s14, s15, s14
 8017c68:	edd7 6a07 	vldr	s13, [r7, #28]
 8017c6c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8017c70:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8017c74:	ee17 2a90 	vmov	r2, s15
 8017c78:	687b      	ldr	r3, [r7, #4]
 8017c7a:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8017c7c:	e008      	b.n	8017c90 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8017c7e:	687b      	ldr	r3, [r7, #4]
 8017c80:	2200      	movs	r2, #0
 8017c82:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8017c84:	687b      	ldr	r3, [r7, #4]
 8017c86:	2200      	movs	r2, #0
 8017c88:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8017c8a:	687b      	ldr	r3, [r7, #4]
 8017c8c:	2200      	movs	r2, #0
 8017c8e:	609a      	str	r2, [r3, #8]
}
 8017c90:	bf00      	nop
 8017c92:	3724      	adds	r7, #36	@ 0x24
 8017c94:	46bd      	mov	sp, r7
 8017c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017c9a:	4770      	bx	lr
 8017c9c:	58024400 	.word	0x58024400
 8017ca0:	03d09000 	.word	0x03d09000
 8017ca4:	46000000 	.word	0x46000000
 8017ca8:	4c742400 	.word	0x4c742400
 8017cac:	4a742400 	.word	0x4a742400
 8017cb0:	4bbebc20 	.word	0x4bbebc20

08017cb4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8017cb4:	b580      	push	{r7, lr}
 8017cb6:	b084      	sub	sp, #16
 8017cb8:	af00      	add	r7, sp, #0
 8017cba:	6078      	str	r0, [r7, #4]
 8017cbc:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8017cbe:	2300      	movs	r3, #0
 8017cc0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8017cc2:	4b53      	ldr	r3, [pc, #332]	@ (8017e10 <RCCEx_PLL2_Config+0x15c>)
 8017cc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017cc6:	f003 0303 	and.w	r3, r3, #3
 8017cca:	2b03      	cmp	r3, #3
 8017ccc:	d101      	bne.n	8017cd2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8017cce:	2301      	movs	r3, #1
 8017cd0:	e099      	b.n	8017e06 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8017cd2:	4b4f      	ldr	r3, [pc, #316]	@ (8017e10 <RCCEx_PLL2_Config+0x15c>)
 8017cd4:	681b      	ldr	r3, [r3, #0]
 8017cd6:	4a4e      	ldr	r2, [pc, #312]	@ (8017e10 <RCCEx_PLL2_Config+0x15c>)
 8017cd8:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8017cdc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8017cde:	f7f9 fd47 	bl	8011770 <HAL_GetTick>
 8017ce2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8017ce4:	e008      	b.n	8017cf8 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8017ce6:	f7f9 fd43 	bl	8011770 <HAL_GetTick>
 8017cea:	4602      	mov	r2, r0
 8017cec:	68bb      	ldr	r3, [r7, #8]
 8017cee:	1ad3      	subs	r3, r2, r3
 8017cf0:	2b02      	cmp	r3, #2
 8017cf2:	d901      	bls.n	8017cf8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8017cf4:	2303      	movs	r3, #3
 8017cf6:	e086      	b.n	8017e06 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8017cf8:	4b45      	ldr	r3, [pc, #276]	@ (8017e10 <RCCEx_PLL2_Config+0x15c>)
 8017cfa:	681b      	ldr	r3, [r3, #0]
 8017cfc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8017d00:	2b00      	cmp	r3, #0
 8017d02:	d1f0      	bne.n	8017ce6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8017d04:	4b42      	ldr	r3, [pc, #264]	@ (8017e10 <RCCEx_PLL2_Config+0x15c>)
 8017d06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017d08:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8017d0c:	687b      	ldr	r3, [r7, #4]
 8017d0e:	681b      	ldr	r3, [r3, #0]
 8017d10:	031b      	lsls	r3, r3, #12
 8017d12:	493f      	ldr	r1, [pc, #252]	@ (8017e10 <RCCEx_PLL2_Config+0x15c>)
 8017d14:	4313      	orrs	r3, r2
 8017d16:	628b      	str	r3, [r1, #40]	@ 0x28
 8017d18:	687b      	ldr	r3, [r7, #4]
 8017d1a:	685b      	ldr	r3, [r3, #4]
 8017d1c:	3b01      	subs	r3, #1
 8017d1e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8017d22:	687b      	ldr	r3, [r7, #4]
 8017d24:	689b      	ldr	r3, [r3, #8]
 8017d26:	3b01      	subs	r3, #1
 8017d28:	025b      	lsls	r3, r3, #9
 8017d2a:	b29b      	uxth	r3, r3
 8017d2c:	431a      	orrs	r2, r3
 8017d2e:	687b      	ldr	r3, [r7, #4]
 8017d30:	68db      	ldr	r3, [r3, #12]
 8017d32:	3b01      	subs	r3, #1
 8017d34:	041b      	lsls	r3, r3, #16
 8017d36:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8017d3a:	431a      	orrs	r2, r3
 8017d3c:	687b      	ldr	r3, [r7, #4]
 8017d3e:	691b      	ldr	r3, [r3, #16]
 8017d40:	3b01      	subs	r3, #1
 8017d42:	061b      	lsls	r3, r3, #24
 8017d44:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8017d48:	4931      	ldr	r1, [pc, #196]	@ (8017e10 <RCCEx_PLL2_Config+0x15c>)
 8017d4a:	4313      	orrs	r3, r2
 8017d4c:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8017d4e:	4b30      	ldr	r3, [pc, #192]	@ (8017e10 <RCCEx_PLL2_Config+0x15c>)
 8017d50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8017d52:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8017d56:	687b      	ldr	r3, [r7, #4]
 8017d58:	695b      	ldr	r3, [r3, #20]
 8017d5a:	492d      	ldr	r1, [pc, #180]	@ (8017e10 <RCCEx_PLL2_Config+0x15c>)
 8017d5c:	4313      	orrs	r3, r2
 8017d5e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8017d60:	4b2b      	ldr	r3, [pc, #172]	@ (8017e10 <RCCEx_PLL2_Config+0x15c>)
 8017d62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8017d64:	f023 0220 	bic.w	r2, r3, #32
 8017d68:	687b      	ldr	r3, [r7, #4]
 8017d6a:	699b      	ldr	r3, [r3, #24]
 8017d6c:	4928      	ldr	r1, [pc, #160]	@ (8017e10 <RCCEx_PLL2_Config+0x15c>)
 8017d6e:	4313      	orrs	r3, r2
 8017d70:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8017d72:	4b27      	ldr	r3, [pc, #156]	@ (8017e10 <RCCEx_PLL2_Config+0x15c>)
 8017d74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8017d76:	4a26      	ldr	r2, [pc, #152]	@ (8017e10 <RCCEx_PLL2_Config+0x15c>)
 8017d78:	f023 0310 	bic.w	r3, r3, #16
 8017d7c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8017d7e:	4b24      	ldr	r3, [pc, #144]	@ (8017e10 <RCCEx_PLL2_Config+0x15c>)
 8017d80:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8017d82:	4b24      	ldr	r3, [pc, #144]	@ (8017e14 <RCCEx_PLL2_Config+0x160>)
 8017d84:	4013      	ands	r3, r2
 8017d86:	687a      	ldr	r2, [r7, #4]
 8017d88:	69d2      	ldr	r2, [r2, #28]
 8017d8a:	00d2      	lsls	r2, r2, #3
 8017d8c:	4920      	ldr	r1, [pc, #128]	@ (8017e10 <RCCEx_PLL2_Config+0x15c>)
 8017d8e:	4313      	orrs	r3, r2
 8017d90:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8017d92:	4b1f      	ldr	r3, [pc, #124]	@ (8017e10 <RCCEx_PLL2_Config+0x15c>)
 8017d94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8017d96:	4a1e      	ldr	r2, [pc, #120]	@ (8017e10 <RCCEx_PLL2_Config+0x15c>)
 8017d98:	f043 0310 	orr.w	r3, r3, #16
 8017d9c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8017d9e:	683b      	ldr	r3, [r7, #0]
 8017da0:	2b00      	cmp	r3, #0
 8017da2:	d106      	bne.n	8017db2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8017da4:	4b1a      	ldr	r3, [pc, #104]	@ (8017e10 <RCCEx_PLL2_Config+0x15c>)
 8017da6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8017da8:	4a19      	ldr	r2, [pc, #100]	@ (8017e10 <RCCEx_PLL2_Config+0x15c>)
 8017daa:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8017dae:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8017db0:	e00f      	b.n	8017dd2 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8017db2:	683b      	ldr	r3, [r7, #0]
 8017db4:	2b01      	cmp	r3, #1
 8017db6:	d106      	bne.n	8017dc6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8017db8:	4b15      	ldr	r3, [pc, #84]	@ (8017e10 <RCCEx_PLL2_Config+0x15c>)
 8017dba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8017dbc:	4a14      	ldr	r2, [pc, #80]	@ (8017e10 <RCCEx_PLL2_Config+0x15c>)
 8017dbe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8017dc2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8017dc4:	e005      	b.n	8017dd2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8017dc6:	4b12      	ldr	r3, [pc, #72]	@ (8017e10 <RCCEx_PLL2_Config+0x15c>)
 8017dc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8017dca:	4a11      	ldr	r2, [pc, #68]	@ (8017e10 <RCCEx_PLL2_Config+0x15c>)
 8017dcc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8017dd0:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8017dd2:	4b0f      	ldr	r3, [pc, #60]	@ (8017e10 <RCCEx_PLL2_Config+0x15c>)
 8017dd4:	681b      	ldr	r3, [r3, #0]
 8017dd6:	4a0e      	ldr	r2, [pc, #56]	@ (8017e10 <RCCEx_PLL2_Config+0x15c>)
 8017dd8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8017ddc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8017dde:	f7f9 fcc7 	bl	8011770 <HAL_GetTick>
 8017de2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8017de4:	e008      	b.n	8017df8 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8017de6:	f7f9 fcc3 	bl	8011770 <HAL_GetTick>
 8017dea:	4602      	mov	r2, r0
 8017dec:	68bb      	ldr	r3, [r7, #8]
 8017dee:	1ad3      	subs	r3, r2, r3
 8017df0:	2b02      	cmp	r3, #2
 8017df2:	d901      	bls.n	8017df8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8017df4:	2303      	movs	r3, #3
 8017df6:	e006      	b.n	8017e06 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8017df8:	4b05      	ldr	r3, [pc, #20]	@ (8017e10 <RCCEx_PLL2_Config+0x15c>)
 8017dfa:	681b      	ldr	r3, [r3, #0]
 8017dfc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8017e00:	2b00      	cmp	r3, #0
 8017e02:	d0f0      	beq.n	8017de6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8017e04:	7bfb      	ldrb	r3, [r7, #15]
}
 8017e06:	4618      	mov	r0, r3
 8017e08:	3710      	adds	r7, #16
 8017e0a:	46bd      	mov	sp, r7
 8017e0c:	bd80      	pop	{r7, pc}
 8017e0e:	bf00      	nop
 8017e10:	58024400 	.word	0x58024400
 8017e14:	ffff0007 	.word	0xffff0007

08017e18 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8017e18:	b580      	push	{r7, lr}
 8017e1a:	b084      	sub	sp, #16
 8017e1c:	af00      	add	r7, sp, #0
 8017e1e:	6078      	str	r0, [r7, #4]
 8017e20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8017e22:	2300      	movs	r3, #0
 8017e24:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8017e26:	4b53      	ldr	r3, [pc, #332]	@ (8017f74 <RCCEx_PLL3_Config+0x15c>)
 8017e28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017e2a:	f003 0303 	and.w	r3, r3, #3
 8017e2e:	2b03      	cmp	r3, #3
 8017e30:	d101      	bne.n	8017e36 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8017e32:	2301      	movs	r3, #1
 8017e34:	e099      	b.n	8017f6a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8017e36:	4b4f      	ldr	r3, [pc, #316]	@ (8017f74 <RCCEx_PLL3_Config+0x15c>)
 8017e38:	681b      	ldr	r3, [r3, #0]
 8017e3a:	4a4e      	ldr	r2, [pc, #312]	@ (8017f74 <RCCEx_PLL3_Config+0x15c>)
 8017e3c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8017e40:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8017e42:	f7f9 fc95 	bl	8011770 <HAL_GetTick>
 8017e46:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8017e48:	e008      	b.n	8017e5c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8017e4a:	f7f9 fc91 	bl	8011770 <HAL_GetTick>
 8017e4e:	4602      	mov	r2, r0
 8017e50:	68bb      	ldr	r3, [r7, #8]
 8017e52:	1ad3      	subs	r3, r2, r3
 8017e54:	2b02      	cmp	r3, #2
 8017e56:	d901      	bls.n	8017e5c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8017e58:	2303      	movs	r3, #3
 8017e5a:	e086      	b.n	8017f6a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8017e5c:	4b45      	ldr	r3, [pc, #276]	@ (8017f74 <RCCEx_PLL3_Config+0x15c>)
 8017e5e:	681b      	ldr	r3, [r3, #0]
 8017e60:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8017e64:	2b00      	cmp	r3, #0
 8017e66:	d1f0      	bne.n	8017e4a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8017e68:	4b42      	ldr	r3, [pc, #264]	@ (8017f74 <RCCEx_PLL3_Config+0x15c>)
 8017e6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017e6c:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8017e70:	687b      	ldr	r3, [r7, #4]
 8017e72:	681b      	ldr	r3, [r3, #0]
 8017e74:	051b      	lsls	r3, r3, #20
 8017e76:	493f      	ldr	r1, [pc, #252]	@ (8017f74 <RCCEx_PLL3_Config+0x15c>)
 8017e78:	4313      	orrs	r3, r2
 8017e7a:	628b      	str	r3, [r1, #40]	@ 0x28
 8017e7c:	687b      	ldr	r3, [r7, #4]
 8017e7e:	685b      	ldr	r3, [r3, #4]
 8017e80:	3b01      	subs	r3, #1
 8017e82:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8017e86:	687b      	ldr	r3, [r7, #4]
 8017e88:	689b      	ldr	r3, [r3, #8]
 8017e8a:	3b01      	subs	r3, #1
 8017e8c:	025b      	lsls	r3, r3, #9
 8017e8e:	b29b      	uxth	r3, r3
 8017e90:	431a      	orrs	r2, r3
 8017e92:	687b      	ldr	r3, [r7, #4]
 8017e94:	68db      	ldr	r3, [r3, #12]
 8017e96:	3b01      	subs	r3, #1
 8017e98:	041b      	lsls	r3, r3, #16
 8017e9a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8017e9e:	431a      	orrs	r2, r3
 8017ea0:	687b      	ldr	r3, [r7, #4]
 8017ea2:	691b      	ldr	r3, [r3, #16]
 8017ea4:	3b01      	subs	r3, #1
 8017ea6:	061b      	lsls	r3, r3, #24
 8017ea8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8017eac:	4931      	ldr	r1, [pc, #196]	@ (8017f74 <RCCEx_PLL3_Config+0x15c>)
 8017eae:	4313      	orrs	r3, r2
 8017eb0:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8017eb2:	4b30      	ldr	r3, [pc, #192]	@ (8017f74 <RCCEx_PLL3_Config+0x15c>)
 8017eb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8017eb6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8017eba:	687b      	ldr	r3, [r7, #4]
 8017ebc:	695b      	ldr	r3, [r3, #20]
 8017ebe:	492d      	ldr	r1, [pc, #180]	@ (8017f74 <RCCEx_PLL3_Config+0x15c>)
 8017ec0:	4313      	orrs	r3, r2
 8017ec2:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8017ec4:	4b2b      	ldr	r3, [pc, #172]	@ (8017f74 <RCCEx_PLL3_Config+0x15c>)
 8017ec6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8017ec8:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8017ecc:	687b      	ldr	r3, [r7, #4]
 8017ece:	699b      	ldr	r3, [r3, #24]
 8017ed0:	4928      	ldr	r1, [pc, #160]	@ (8017f74 <RCCEx_PLL3_Config+0x15c>)
 8017ed2:	4313      	orrs	r3, r2
 8017ed4:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8017ed6:	4b27      	ldr	r3, [pc, #156]	@ (8017f74 <RCCEx_PLL3_Config+0x15c>)
 8017ed8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8017eda:	4a26      	ldr	r2, [pc, #152]	@ (8017f74 <RCCEx_PLL3_Config+0x15c>)
 8017edc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8017ee0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8017ee2:	4b24      	ldr	r3, [pc, #144]	@ (8017f74 <RCCEx_PLL3_Config+0x15c>)
 8017ee4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8017ee6:	4b24      	ldr	r3, [pc, #144]	@ (8017f78 <RCCEx_PLL3_Config+0x160>)
 8017ee8:	4013      	ands	r3, r2
 8017eea:	687a      	ldr	r2, [r7, #4]
 8017eec:	69d2      	ldr	r2, [r2, #28]
 8017eee:	00d2      	lsls	r2, r2, #3
 8017ef0:	4920      	ldr	r1, [pc, #128]	@ (8017f74 <RCCEx_PLL3_Config+0x15c>)
 8017ef2:	4313      	orrs	r3, r2
 8017ef4:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8017ef6:	4b1f      	ldr	r3, [pc, #124]	@ (8017f74 <RCCEx_PLL3_Config+0x15c>)
 8017ef8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8017efa:	4a1e      	ldr	r2, [pc, #120]	@ (8017f74 <RCCEx_PLL3_Config+0x15c>)
 8017efc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8017f00:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8017f02:	683b      	ldr	r3, [r7, #0]
 8017f04:	2b00      	cmp	r3, #0
 8017f06:	d106      	bne.n	8017f16 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8017f08:	4b1a      	ldr	r3, [pc, #104]	@ (8017f74 <RCCEx_PLL3_Config+0x15c>)
 8017f0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8017f0c:	4a19      	ldr	r2, [pc, #100]	@ (8017f74 <RCCEx_PLL3_Config+0x15c>)
 8017f0e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8017f12:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8017f14:	e00f      	b.n	8017f36 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8017f16:	683b      	ldr	r3, [r7, #0]
 8017f18:	2b01      	cmp	r3, #1
 8017f1a:	d106      	bne.n	8017f2a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8017f1c:	4b15      	ldr	r3, [pc, #84]	@ (8017f74 <RCCEx_PLL3_Config+0x15c>)
 8017f1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8017f20:	4a14      	ldr	r2, [pc, #80]	@ (8017f74 <RCCEx_PLL3_Config+0x15c>)
 8017f22:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8017f26:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8017f28:	e005      	b.n	8017f36 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8017f2a:	4b12      	ldr	r3, [pc, #72]	@ (8017f74 <RCCEx_PLL3_Config+0x15c>)
 8017f2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8017f2e:	4a11      	ldr	r2, [pc, #68]	@ (8017f74 <RCCEx_PLL3_Config+0x15c>)
 8017f30:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8017f34:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8017f36:	4b0f      	ldr	r3, [pc, #60]	@ (8017f74 <RCCEx_PLL3_Config+0x15c>)
 8017f38:	681b      	ldr	r3, [r3, #0]
 8017f3a:	4a0e      	ldr	r2, [pc, #56]	@ (8017f74 <RCCEx_PLL3_Config+0x15c>)
 8017f3c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8017f40:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8017f42:	f7f9 fc15 	bl	8011770 <HAL_GetTick>
 8017f46:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8017f48:	e008      	b.n	8017f5c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8017f4a:	f7f9 fc11 	bl	8011770 <HAL_GetTick>
 8017f4e:	4602      	mov	r2, r0
 8017f50:	68bb      	ldr	r3, [r7, #8]
 8017f52:	1ad3      	subs	r3, r2, r3
 8017f54:	2b02      	cmp	r3, #2
 8017f56:	d901      	bls.n	8017f5c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8017f58:	2303      	movs	r3, #3
 8017f5a:	e006      	b.n	8017f6a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8017f5c:	4b05      	ldr	r3, [pc, #20]	@ (8017f74 <RCCEx_PLL3_Config+0x15c>)
 8017f5e:	681b      	ldr	r3, [r3, #0]
 8017f60:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8017f64:	2b00      	cmp	r3, #0
 8017f66:	d0f0      	beq.n	8017f4a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8017f68:	7bfb      	ldrb	r3, [r7, #15]
}
 8017f6a:	4618      	mov	r0, r3
 8017f6c:	3710      	adds	r7, #16
 8017f6e:	46bd      	mov	sp, r7
 8017f70:	bd80      	pop	{r7, pc}
 8017f72:	bf00      	nop
 8017f74:	58024400 	.word	0x58024400
 8017f78:	ffff0007 	.word	0xffff0007

08017f7c <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8017f7c:	b580      	push	{r7, lr}
 8017f7e:	b08a      	sub	sp, #40	@ 0x28
 8017f80:	af00      	add	r7, sp, #0
 8017f82:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 8017f84:	687b      	ldr	r3, [r7, #4]
 8017f86:	2b00      	cmp	r3, #0
 8017f88:	d101      	bne.n	8017f8e <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8017f8a:	2301      	movs	r3, #1
 8017f8c:	e075      	b.n	801807a <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 8017f8e:	687b      	ldr	r3, [r7, #4]
 8017f90:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8017f94:	b2db      	uxtb	r3, r3
 8017f96:	2b00      	cmp	r3, #0
 8017f98:	d105      	bne.n	8017fa6 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8017f9a:	687b      	ldr	r3, [r7, #4]
 8017f9c:	2200      	movs	r2, #0
 8017f9e:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8017fa0:	6878      	ldr	r0, [r7, #4]
 8017fa2:	f7f3 fdab 	bl	800bafc <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 8017fa6:	687b      	ldr	r3, [r7, #4]
 8017fa8:	2204      	movs	r2, #4
 8017faa:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8017fae:	6878      	ldr	r0, [r7, #4]
 8017fb0:	f000 f868 	bl	8018084 <HAL_SD_InitCard>
 8017fb4:	4603      	mov	r3, r0
 8017fb6:	2b00      	cmp	r3, #0
 8017fb8:	d001      	beq.n	8017fbe <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8017fba:	2301      	movs	r3, #1
 8017fbc:	e05d      	b.n	801807a <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 8017fbe:	f107 0308 	add.w	r3, r7, #8
 8017fc2:	4619      	mov	r1, r3
 8017fc4:	6878      	ldr	r0, [r7, #4]
 8017fc6:	f000 fdaf 	bl	8018b28 <HAL_SD_GetCardStatus>
 8017fca:	4603      	mov	r3, r0
 8017fcc:	2b00      	cmp	r3, #0
 8017fce:	d001      	beq.n	8017fd4 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 8017fd0:	2301      	movs	r3, #1
 8017fd2:	e052      	b.n	801807a <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 8017fd4:	7e3b      	ldrb	r3, [r7, #24]
 8017fd6:	b2db      	uxtb	r3, r3
 8017fd8:	627b      	str	r3, [r7, #36]	@ 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 8017fda:	7e7b      	ldrb	r3, [r7, #25]
 8017fdc:	b2db      	uxtb	r3, r3
 8017fde:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 8017fe0:	687b      	ldr	r3, [r7, #4]
 8017fe2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8017fe4:	2b01      	cmp	r3, #1
 8017fe6:	d10a      	bne.n	8017ffe <HAL_SD_Init+0x82>
 8017fe8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017fea:	2b00      	cmp	r3, #0
 8017fec:	d102      	bne.n	8017ff4 <HAL_SD_Init+0x78>
 8017fee:	6a3b      	ldr	r3, [r7, #32]
 8017ff0:	2b00      	cmp	r3, #0
 8017ff2:	d004      	beq.n	8017ffe <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8017ff4:	687b      	ldr	r3, [r7, #4]
 8017ff6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8017ffa:	659a      	str	r2, [r3, #88]	@ 0x58
 8017ffc:	e00b      	b.n	8018016 <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8017ffe:	687b      	ldr	r3, [r7, #4]
 8018000:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8018002:	2b01      	cmp	r3, #1
 8018004:	d104      	bne.n	8018010 <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 8018006:	687b      	ldr	r3, [r7, #4]
 8018008:	f44f 7280 	mov.w	r2, #256	@ 0x100
 801800c:	659a      	str	r2, [r3, #88]	@ 0x58
 801800e:	e002      	b.n	8018016 <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 8018010:	687b      	ldr	r3, [r7, #4]
 8018012:	2200      	movs	r2, #0
 8018014:	659a      	str	r2, [r3, #88]	@ 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 8018016:	687b      	ldr	r3, [r7, #4]
 8018018:	68db      	ldr	r3, [r3, #12]
 801801a:	4619      	mov	r1, r3
 801801c:	6878      	ldr	r0, [r7, #4]
 801801e:	f000 fe6d 	bl	8018cfc <HAL_SD_ConfigWideBusOperation>
 8018022:	4603      	mov	r3, r0
 8018024:	2b00      	cmp	r3, #0
 8018026:	d001      	beq.n	801802c <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 8018028:	2301      	movs	r3, #1
 801802a:	e026      	b.n	801807a <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 801802c:	f7f9 fba0 	bl	8011770 <HAL_GetTick>
 8018030:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8018032:	e011      	b.n	8018058 <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8018034:	f7f9 fb9c 	bl	8011770 <HAL_GetTick>
 8018038:	4602      	mov	r2, r0
 801803a:	69fb      	ldr	r3, [r7, #28]
 801803c:	1ad3      	subs	r3, r2, r3
 801803e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018042:	d109      	bne.n	8018058 <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8018044:	687b      	ldr	r3, [r7, #4]
 8018046:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 801804a:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 801804c:	687b      	ldr	r3, [r7, #4]
 801804e:	2201      	movs	r2, #1
 8018050:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      return HAL_TIMEOUT;
 8018054:	2303      	movs	r3, #3
 8018056:	e010      	b.n	801807a <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8018058:	6878      	ldr	r0, [r7, #4]
 801805a:	f000 ff61 	bl	8018f20 <HAL_SD_GetCardState>
 801805e:	4603      	mov	r3, r0
 8018060:	2b04      	cmp	r3, #4
 8018062:	d1e7      	bne.n	8018034 <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8018064:	687b      	ldr	r3, [r7, #4]
 8018066:	2200      	movs	r2, #0
 8018068:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 801806a:	687b      	ldr	r3, [r7, #4]
 801806c:	2200      	movs	r2, #0
 801806e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8018070:	687b      	ldr	r3, [r7, #4]
 8018072:	2201      	movs	r2, #1
 8018074:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return HAL_OK;
 8018078:	2300      	movs	r3, #0
}
 801807a:	4618      	mov	r0, r3
 801807c:	3728      	adds	r7, #40	@ 0x28
 801807e:	46bd      	mov	sp, r7
 8018080:	bd80      	pop	{r7, pc}
	...

08018084 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8018084:	b590      	push	{r4, r7, lr}
 8018086:	b08d      	sub	sp, #52	@ 0x34
 8018088:	af02      	add	r7, sp, #8
 801808a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 801808c:	2300      	movs	r3, #0
 801808e:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8018090:	2300      	movs	r3, #0
 8018092:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8018094:	2300      	movs	r3, #0
 8018096:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8018098:	2300      	movs	r3, #0
 801809a:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 801809c:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 80180a0:	f04f 0100 	mov.w	r1, #0
 80180a4:	f7fe fc76 	bl	8016994 <HAL_RCCEx_GetPeriphCLKFreq>
 80180a8:	6278      	str	r0, [r7, #36]	@ 0x24
  if (sdmmc_clk == 0U)
 80180aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80180ac:	2b00      	cmp	r3, #0
 80180ae:	d109      	bne.n	80180c4 <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 80180b0:	687b      	ldr	r3, [r7, #4]
 80180b2:	2201      	movs	r2, #1
 80180b4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 80180b8:	687b      	ldr	r3, [r7, #4]
 80180ba:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80180be:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 80180c0:	2301      	movs	r3, #1
 80180c2:	e070      	b.n	80181a6 <HAL_SD_InitCard+0x122>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 80180c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80180c6:	0a1b      	lsrs	r3, r3, #8
 80180c8:	4a39      	ldr	r2, [pc, #228]	@ (80181b0 <HAL_SD_InitCard+0x12c>)
 80180ca:	fba2 2303 	umull	r2, r3, r2, r3
 80180ce:	091b      	lsrs	r3, r3, #4
 80180d0:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 80180d2:	687b      	ldr	r3, [r7, #4]
 80180d4:	681c      	ldr	r4, [r3, #0]
 80180d6:	466a      	mov	r2, sp
 80180d8:	f107 0318 	add.w	r3, r7, #24
 80180dc:	e893 0003 	ldmia.w	r3, {r0, r1}
 80180e0:	e882 0003 	stmia.w	r2, {r0, r1}
 80180e4:	f107 030c 	add.w	r3, r7, #12
 80180e8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80180ea:	4620      	mov	r0, r4
 80180ec:	f002 fe5e 	bl	801adac <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 80180f0:	687b      	ldr	r3, [r7, #4]
 80180f2:	681b      	ldr	r3, [r3, #0]
 80180f4:	4618      	mov	r0, r3
 80180f6:	f002 fea1 	bl	801ae3c <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  if (Init.ClockDiv != 0U)
 80180fa:	69fb      	ldr	r3, [r7, #28]
 80180fc:	2b00      	cmp	r3, #0
 80180fe:	d005      	beq.n	801810c <HAL_SD_InitCard+0x88>
  {
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 8018100:	69fb      	ldr	r3, [r7, #28]
 8018102:	005b      	lsls	r3, r3, #1
 8018104:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8018106:	fbb2 f3f3 	udiv	r3, r2, r3
 801810a:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  if (sdmmc_clk != 0U)
 801810c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801810e:	2b00      	cmp	r3, #0
 8018110:	d007      	beq.n	8018122 <HAL_SD_InitCard+0x9e>
  {
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 8018112:	4a28      	ldr	r2, [pc, #160]	@ (80181b4 <HAL_SD_InitCard+0x130>)
 8018114:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018116:	fbb2 f3f3 	udiv	r3, r2, r3
 801811a:	3301      	adds	r3, #1
 801811c:	4618      	mov	r0, r3
 801811e:	f7f9 fb33 	bl	8011788 <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8018122:	6878      	ldr	r0, [r7, #4]
 8018124:	f000 ffea 	bl	80190fc <SD_PowerON>
 8018128:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 801812a:	6a3b      	ldr	r3, [r7, #32]
 801812c:	2b00      	cmp	r3, #0
 801812e:	d00b      	beq.n	8018148 <HAL_SD_InitCard+0xc4>
  {
    hsd->State = HAL_SD_STATE_READY;
 8018130:	687b      	ldr	r3, [r7, #4]
 8018132:	2201      	movs	r2, #1
 8018134:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 8018138:	687b      	ldr	r3, [r7, #4]
 801813a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801813c:	6a3b      	ldr	r3, [r7, #32]
 801813e:	431a      	orrs	r2, r3
 8018140:	687b      	ldr	r3, [r7, #4]
 8018142:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8018144:	2301      	movs	r3, #1
 8018146:	e02e      	b.n	80181a6 <HAL_SD_InitCard+0x122>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8018148:	6878      	ldr	r0, [r7, #4]
 801814a:	f000 ff09 	bl	8018f60 <SD_InitCard>
 801814e:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8018150:	6a3b      	ldr	r3, [r7, #32]
 8018152:	2b00      	cmp	r3, #0
 8018154:	d00b      	beq.n	801816e <HAL_SD_InitCard+0xea>
  {
    hsd->State = HAL_SD_STATE_READY;
 8018156:	687b      	ldr	r3, [r7, #4]
 8018158:	2201      	movs	r2, #1
 801815a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 801815e:	687b      	ldr	r3, [r7, #4]
 8018160:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8018162:	6a3b      	ldr	r3, [r7, #32]
 8018164:	431a      	orrs	r2, r3
 8018166:	687b      	ldr	r3, [r7, #4]
 8018168:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 801816a:	2301      	movs	r3, #1
 801816c:	e01b      	b.n	80181a6 <HAL_SD_InitCard+0x122>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 801816e:	687b      	ldr	r3, [r7, #4]
 8018170:	681b      	ldr	r3, [r3, #0]
 8018172:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8018176:	4618      	mov	r0, r3
 8018178:	f002 fef6 	bl	801af68 <SDMMC_CmdBlockLength>
 801817c:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 801817e:	6a3b      	ldr	r3, [r7, #32]
 8018180:	2b00      	cmp	r3, #0
 8018182:	d00f      	beq.n	80181a4 <HAL_SD_InitCard+0x120>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8018184:	687b      	ldr	r3, [r7, #4]
 8018186:	681b      	ldr	r3, [r3, #0]
 8018188:	4a0b      	ldr	r2, [pc, #44]	@ (80181b8 <HAL_SD_InitCard+0x134>)
 801818a:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 801818c:	687b      	ldr	r3, [r7, #4]
 801818e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8018190:	6a3b      	ldr	r3, [r7, #32]
 8018192:	431a      	orrs	r2, r3
 8018194:	687b      	ldr	r3, [r7, #4]
 8018196:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 8018198:	687b      	ldr	r3, [r7, #4]
 801819a:	2201      	movs	r2, #1
 801819c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 80181a0:	2301      	movs	r3, #1
 80181a2:	e000      	b.n	80181a6 <HAL_SD_InitCard+0x122>
  }

  return HAL_OK;
 80181a4:	2300      	movs	r3, #0
}
 80181a6:	4618      	mov	r0, r3
 80181a8:	372c      	adds	r7, #44	@ 0x2c
 80181aa:	46bd      	mov	sp, r7
 80181ac:	bd90      	pop	{r4, r7, pc}
 80181ae:	bf00      	nop
 80181b0:	014f8b59 	.word	0x014f8b59
 80181b4:	00012110 	.word	0x00012110
 80181b8:	1fe00fff 	.word	0x1fe00fff

080181bc <HAL_SD_ReadBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd,
                                        uint32_t NumberOfBlocks)
{
 80181bc:	b580      	push	{r7, lr}
 80181be:	b08c      	sub	sp, #48	@ 0x30
 80181c0:	af00      	add	r7, sp, #0
 80181c2:	60f8      	str	r0, [r7, #12]
 80181c4:	60b9      	str	r1, [r7, #8]
 80181c6:	607a      	str	r2, [r7, #4]
 80181c8:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 80181ca:	687b      	ldr	r3, [r7, #4]
 80181cc:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (NULL == pData)
 80181ce:	68bb      	ldr	r3, [r7, #8]
 80181d0:	2b00      	cmp	r3, #0
 80181d2:	d107      	bne.n	80181e4 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80181d4:	68fb      	ldr	r3, [r7, #12]
 80181d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80181d8:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80181dc:	68fb      	ldr	r3, [r7, #12]
 80181de:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 80181e0:	2301      	movs	r3, #1
 80181e2:	e08d      	b.n	8018300 <HAL_SD_ReadBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 80181e4:	68fb      	ldr	r3, [r7, #12]
 80181e6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80181ea:	b2db      	uxtb	r3, r3
 80181ec:	2b01      	cmp	r3, #1
 80181ee:	f040 8086 	bne.w	80182fe <HAL_SD_ReadBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80181f2:	68fb      	ldr	r3, [r7, #12]
 80181f4:	2200      	movs	r2, #0
 80181f6:	635a      	str	r2, [r3, #52]	@ 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80181f8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80181fa:	683b      	ldr	r3, [r7, #0]
 80181fc:	441a      	add	r2, r3
 80181fe:	68fb      	ldr	r3, [r7, #12]
 8018200:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8018202:	429a      	cmp	r2, r3
 8018204:	d907      	bls.n	8018216 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8018206:	68fb      	ldr	r3, [r7, #12]
 8018208:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801820a:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 801820e:	68fb      	ldr	r3, [r7, #12]
 8018210:	635a      	str	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 8018212:	2301      	movs	r3, #1
 8018214:	e074      	b.n	8018300 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8018216:	68fb      	ldr	r3, [r7, #12]
 8018218:	2203      	movs	r2, #3
 801821a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 801821e:	68fb      	ldr	r3, [r7, #12]
 8018220:	681b      	ldr	r3, [r3, #0]
 8018222:	2200      	movs	r2, #0
 8018224:	62da      	str	r2, [r3, #44]	@ 0x2c

    hsd->pRxBuffPtr = pData;
 8018226:	68fb      	ldr	r3, [r7, #12]
 8018228:	68ba      	ldr	r2, [r7, #8]
 801822a:	625a      	str	r2, [r3, #36]	@ 0x24
    hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 801822c:	683b      	ldr	r3, [r7, #0]
 801822e:	025a      	lsls	r2, r3, #9
 8018230:	68fb      	ldr	r3, [r7, #12]
 8018232:	629a      	str	r2, [r3, #40]	@ 0x28

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8018234:	68fb      	ldr	r3, [r7, #12]
 8018236:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8018238:	2b01      	cmp	r3, #1
 801823a:	d002      	beq.n	8018242 <HAL_SD_ReadBlocks_DMA+0x86>
    {
      add *= 512U;
 801823c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801823e:	025b      	lsls	r3, r3, #9
 8018240:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8018242:	f04f 33ff 	mov.w	r3, #4294967295
 8018246:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8018248:	683b      	ldr	r3, [r7, #0]
 801824a:	025b      	lsls	r3, r3, #9
 801824c:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 801824e:	2390      	movs	r3, #144	@ 0x90
 8018250:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8018252:	2302      	movs	r3, #2
 8018254:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8018256:	2300      	movs	r3, #0
 8018258:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 801825a:	2300      	movs	r3, #0
 801825c:	627b      	str	r3, [r7, #36]	@ 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 801825e:	68fb      	ldr	r3, [r7, #12]
 8018260:	681b      	ldr	r3, [r3, #0]
 8018262:	f107 0210 	add.w	r2, r7, #16
 8018266:	4611      	mov	r1, r2
 8018268:	4618      	mov	r0, r3
 801826a:	f002 fe51 	bl	801af10 <SDMMC_ConfigData>

    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 801826e:	68fb      	ldr	r3, [r7, #12]
 8018270:	681b      	ldr	r3, [r3, #0]
 8018272:	68da      	ldr	r2, [r3, #12]
 8018274:	68fb      	ldr	r3, [r7, #12]
 8018276:	681b      	ldr	r3, [r3, #0]
 8018278:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 801827c:	60da      	str	r2, [r3, #12]
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 801827e:	68fb      	ldr	r3, [r7, #12]
 8018280:	681b      	ldr	r3, [r3, #0]
 8018282:	68ba      	ldr	r2, [r7, #8]
 8018284:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 8018286:	68fb      	ldr	r3, [r7, #12]
 8018288:	681b      	ldr	r3, [r3, #0]
 801828a:	2201      	movs	r2, #1
 801828c:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Read Blocks in DMA mode */
    if (NumberOfBlocks > 1U)
 801828e:	683b      	ldr	r3, [r7, #0]
 8018290:	2b01      	cmp	r3, #1
 8018292:	d90a      	bls.n	80182aa <HAL_SD_ReadBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8018294:	68fb      	ldr	r3, [r7, #12]
 8018296:	2282      	movs	r2, #130	@ 0x82
 8018298:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 801829a:	68fb      	ldr	r3, [r7, #12]
 801829c:	681b      	ldr	r3, [r3, #0]
 801829e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80182a0:	4618      	mov	r0, r3
 80182a2:	f002 fea7 	bl	801aff4 <SDMMC_CmdReadMultiBlock>
 80182a6:	62f8      	str	r0, [r7, #44]	@ 0x2c
 80182a8:	e009      	b.n	80182be <HAL_SD_ReadBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 80182aa:	68fb      	ldr	r3, [r7, #12]
 80182ac:	2281      	movs	r2, #129	@ 0x81
 80182ae:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 80182b0:	68fb      	ldr	r3, [r7, #12]
 80182b2:	681b      	ldr	r3, [r3, #0]
 80182b4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80182b6:	4618      	mov	r0, r3
 80182b8:	f002 fe79 	bl	801afae <SDMMC_CmdReadSingleBlock>
 80182bc:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 80182be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80182c0:	2b00      	cmp	r3, #0
 80182c2:	d012      	beq.n	80182ea <HAL_SD_ReadBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80182c4:	68fb      	ldr	r3, [r7, #12]
 80182c6:	681b      	ldr	r3, [r3, #0]
 80182c8:	4a0f      	ldr	r2, [pc, #60]	@ (8018308 <HAL_SD_ReadBlocks_DMA+0x14c>)
 80182ca:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 80182cc:	68fb      	ldr	r3, [r7, #12]
 80182ce:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80182d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80182d2:	431a      	orrs	r2, r3
 80182d4:	68fb      	ldr	r3, [r7, #12]
 80182d6:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 80182d8:	68fb      	ldr	r3, [r7, #12]
 80182da:	2201      	movs	r2, #1
 80182dc:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 80182e0:	68fb      	ldr	r3, [r7, #12]
 80182e2:	2200      	movs	r2, #0
 80182e4:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 80182e6:	2301      	movs	r3, #1
 80182e8:	e00a      	b.n	8018300 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 80182ea:	68fb      	ldr	r3, [r7, #12]
 80182ec:	681b      	ldr	r3, [r3, #0]
 80182ee:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80182f0:	68fb      	ldr	r3, [r7, #12]
 80182f2:	681b      	ldr	r3, [r3, #0]
 80182f4:	f442 7295 	orr.w	r2, r2, #298	@ 0x12a
 80182f8:	63da      	str	r2, [r3, #60]	@ 0x3c


    return HAL_OK;
 80182fa:	2300      	movs	r3, #0
 80182fc:	e000      	b.n	8018300 <HAL_SD_ReadBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 80182fe:	2302      	movs	r3, #2
  }
}
 8018300:	4618      	mov	r0, r3
 8018302:	3730      	adds	r7, #48	@ 0x30
 8018304:	46bd      	mov	sp, r7
 8018306:	bd80      	pop	{r7, pc}
 8018308:	1fe00fff 	.word	0x1fe00fff

0801830c <HAL_SD_WriteBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, const uint8_t *pData, uint32_t BlockAdd,
                                         uint32_t NumberOfBlocks)
{
 801830c:	b580      	push	{r7, lr}
 801830e:	b08c      	sub	sp, #48	@ 0x30
 8018310:	af00      	add	r7, sp, #0
 8018312:	60f8      	str	r0, [r7, #12]
 8018314:	60b9      	str	r1, [r7, #8]
 8018316:	607a      	str	r2, [r7, #4]
 8018318:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 801831a:	687b      	ldr	r3, [r7, #4]
 801831c:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (NULL == pData)
 801831e:	68bb      	ldr	r3, [r7, #8]
 8018320:	2b00      	cmp	r3, #0
 8018322:	d107      	bne.n	8018334 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8018324:	68fb      	ldr	r3, [r7, #12]
 8018326:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8018328:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 801832c:	68fb      	ldr	r3, [r7, #12]
 801832e:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8018330:	2301      	movs	r3, #1
 8018332:	e08d      	b.n	8018450 <HAL_SD_WriteBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 8018334:	68fb      	ldr	r3, [r7, #12]
 8018336:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801833a:	b2db      	uxtb	r3, r3
 801833c:	2b01      	cmp	r3, #1
 801833e:	f040 8086 	bne.w	801844e <HAL_SD_WriteBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8018342:	68fb      	ldr	r3, [r7, #12]
 8018344:	2200      	movs	r2, #0
 8018346:	635a      	str	r2, [r3, #52]	@ 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8018348:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801834a:	683b      	ldr	r3, [r7, #0]
 801834c:	441a      	add	r2, r3
 801834e:	68fb      	ldr	r3, [r7, #12]
 8018350:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8018352:	429a      	cmp	r2, r3
 8018354:	d907      	bls.n	8018366 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8018356:	68fb      	ldr	r3, [r7, #12]
 8018358:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801835a:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 801835e:	68fb      	ldr	r3, [r7, #12]
 8018360:	635a      	str	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 8018362:	2301      	movs	r3, #1
 8018364:	e074      	b.n	8018450 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8018366:	68fb      	ldr	r3, [r7, #12]
 8018368:	2203      	movs	r2, #3
 801836a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 801836e:	68fb      	ldr	r3, [r7, #12]
 8018370:	681b      	ldr	r3, [r3, #0]
 8018372:	2200      	movs	r2, #0
 8018374:	62da      	str	r2, [r3, #44]	@ 0x2c

    hsd->pTxBuffPtr = pData;
 8018376:	68fb      	ldr	r3, [r7, #12]
 8018378:	68ba      	ldr	r2, [r7, #8]
 801837a:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 801837c:	683b      	ldr	r3, [r7, #0]
 801837e:	025a      	lsls	r2, r3, #9
 8018380:	68fb      	ldr	r3, [r7, #12]
 8018382:	621a      	str	r2, [r3, #32]

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8018384:	68fb      	ldr	r3, [r7, #12]
 8018386:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8018388:	2b01      	cmp	r3, #1
 801838a:	d002      	beq.n	8018392 <HAL_SD_WriteBlocks_DMA+0x86>
    {
      add *= 512U;
 801838c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801838e:	025b      	lsls	r3, r3, #9
 8018390:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8018392:	f04f 33ff 	mov.w	r3, #4294967295
 8018396:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8018398:	683b      	ldr	r3, [r7, #0]
 801839a:	025b      	lsls	r3, r3, #9
 801839c:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 801839e:	2390      	movs	r3, #144	@ 0x90
 80183a0:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 80183a2:	2300      	movs	r3, #0
 80183a4:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80183a6:	2300      	movs	r3, #0
 80183a8:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 80183aa:	2300      	movs	r3, #0
 80183ac:	627b      	str	r3, [r7, #36]	@ 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 80183ae:	68fb      	ldr	r3, [r7, #12]
 80183b0:	681b      	ldr	r3, [r3, #0]
 80183b2:	f107 0210 	add.w	r2, r7, #16
 80183b6:	4611      	mov	r1, r2
 80183b8:	4618      	mov	r0, r3
 80183ba:	f002 fda9 	bl	801af10 <SDMMC_ConfigData>


    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 80183be:	68fb      	ldr	r3, [r7, #12]
 80183c0:	681b      	ldr	r3, [r3, #0]
 80183c2:	68da      	ldr	r2, [r3, #12]
 80183c4:	68fb      	ldr	r3, [r7, #12]
 80183c6:	681b      	ldr	r3, [r3, #0]
 80183c8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80183cc:	60da      	str	r2, [r3, #12]

    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 80183ce:	68fb      	ldr	r3, [r7, #12]
 80183d0:	681b      	ldr	r3, [r3, #0]
 80183d2:	68ba      	ldr	r2, [r7, #8]
 80183d4:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 80183d6:	68fb      	ldr	r3, [r7, #12]
 80183d8:	681b      	ldr	r3, [r3, #0]
 80183da:	2201      	movs	r2, #1
 80183dc:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 80183de:	683b      	ldr	r3, [r7, #0]
 80183e0:	2b01      	cmp	r3, #1
 80183e2:	d90a      	bls.n	80183fa <HAL_SD_WriteBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80183e4:	68fb      	ldr	r3, [r7, #12]
 80183e6:	22a0      	movs	r2, #160	@ 0xa0
 80183e8:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 80183ea:	68fb      	ldr	r3, [r7, #12]
 80183ec:	681b      	ldr	r3, [r3, #0]
 80183ee:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80183f0:	4618      	mov	r0, r3
 80183f2:	f002 fe45 	bl	801b080 <SDMMC_CmdWriteMultiBlock>
 80183f6:	62f8      	str	r0, [r7, #44]	@ 0x2c
 80183f8:	e009      	b.n	801840e <HAL_SD_WriteBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 80183fa:	68fb      	ldr	r3, [r7, #12]
 80183fc:	2290      	movs	r2, #144	@ 0x90
 80183fe:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8018400:	68fb      	ldr	r3, [r7, #12]
 8018402:	681b      	ldr	r3, [r3, #0]
 8018404:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8018406:	4618      	mov	r0, r3
 8018408:	f002 fe17 	bl	801b03a <SDMMC_CmdWriteSingleBlock>
 801840c:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 801840e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018410:	2b00      	cmp	r3, #0
 8018412:	d012      	beq.n	801843a <HAL_SD_WriteBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8018414:	68fb      	ldr	r3, [r7, #12]
 8018416:	681b      	ldr	r3, [r3, #0]
 8018418:	4a0f      	ldr	r2, [pc, #60]	@ (8018458 <HAL_SD_WriteBlocks_DMA+0x14c>)
 801841a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 801841c:	68fb      	ldr	r3, [r7, #12]
 801841e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8018420:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018422:	431a      	orrs	r2, r3
 8018424:	68fb      	ldr	r3, [r7, #12]
 8018426:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 8018428:	68fb      	ldr	r3, [r7, #12]
 801842a:	2201      	movs	r2, #1
 801842c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8018430:	68fb      	ldr	r3, [r7, #12]
 8018432:	2200      	movs	r2, #0
 8018434:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 8018436:	2301      	movs	r3, #1
 8018438:	e00a      	b.n	8018450 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 801843a:	68fb      	ldr	r3, [r7, #12]
 801843c:	681b      	ldr	r3, [r3, #0]
 801843e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8018440:	68fb      	ldr	r3, [r7, #12]
 8018442:	681b      	ldr	r3, [r3, #0]
 8018444:	f442 728d 	orr.w	r2, r2, #282	@ 0x11a
 8018448:	63da      	str	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 801844a:	2300      	movs	r3, #0
 801844c:	e000      	b.n	8018450 <HAL_SD_WriteBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 801844e:	2302      	movs	r3, #2
  }
}
 8018450:	4618      	mov	r0, r3
 8018452:	3730      	adds	r7, #48	@ 0x30
 8018454:	46bd      	mov	sp, r7
 8018456:	bd80      	pop	{r7, pc}
 8018458:	1fe00fff 	.word	0x1fe00fff

0801845c <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 801845c:	b580      	push	{r7, lr}
 801845e:	b084      	sub	sp, #16
 8018460:	af00      	add	r7, sp, #0
 8018462:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8018464:	687b      	ldr	r3, [r7, #4]
 8018466:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018468:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 801846a:	687b      	ldr	r3, [r7, #4]
 801846c:	681b      	ldr	r3, [r3, #0]
 801846e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8018470:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8018474:	2b00      	cmp	r3, #0
 8018476:	d008      	beq.n	801848a <HAL_SD_IRQHandler+0x2e>
 8018478:	68fb      	ldr	r3, [r7, #12]
 801847a:	f003 0308 	and.w	r3, r3, #8
 801847e:	2b00      	cmp	r3, #0
 8018480:	d003      	beq.n	801848a <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8018482:	6878      	ldr	r0, [r7, #4]
 8018484:	f001 f926 	bl	80196d4 <SD_Read_IT>
 8018488:	e19a      	b.n	80187c0 <HAL_SD_IRQHandler+0x364>
  }

  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 801848a:	687b      	ldr	r3, [r7, #4]
 801848c:	681b      	ldr	r3, [r3, #0]
 801848e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8018490:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8018494:	2b00      	cmp	r3, #0
 8018496:	f000 80ac 	beq.w	80185f2 <HAL_SD_IRQHandler+0x196>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 801849a:	687b      	ldr	r3, [r7, #4]
 801849c:	681b      	ldr	r3, [r3, #0]
 801849e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80184a2:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 80184a4:	687b      	ldr	r3, [r7, #4]
 80184a6:	681b      	ldr	r3, [r3, #0]
 80184a8:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 80184aa:	687b      	ldr	r3, [r7, #4]
 80184ac:	681a      	ldr	r2, [r3, #0]
 80184ae:	4b59      	ldr	r3, [pc, #356]	@ (8018614 <HAL_SD_IRQHandler+0x1b8>)
 80184b0:	400b      	ands	r3, r1
 80184b2:	63d3      	str	r3, [r2, #60]	@ 0x3c
                        SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE | \
                        SDMMC_IT_RXFIFOHF);

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 80184b4:	687b      	ldr	r3, [r7, #4]
 80184b6:	681b      	ldr	r3, [r3, #0]
 80184b8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80184ba:	687b      	ldr	r3, [r7, #4]
 80184bc:	681b      	ldr	r3, [r3, #0]
 80184be:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 80184c2:	63da      	str	r2, [r3, #60]	@ 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 80184c4:	687b      	ldr	r3, [r7, #4]
 80184c6:	681b      	ldr	r3, [r3, #0]
 80184c8:	68da      	ldr	r2, [r3, #12]
 80184ca:	687b      	ldr	r3, [r7, #4]
 80184cc:	681b      	ldr	r3, [r3, #0]
 80184ce:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80184d2:	60da      	str	r2, [r3, #12]

    if ((context & SD_CONTEXT_IT) != 0U)
 80184d4:	68fb      	ldr	r3, [r7, #12]
 80184d6:	f003 0308 	and.w	r3, r3, #8
 80184da:	2b00      	cmp	r3, #0
 80184dc:	d038      	beq.n	8018550 <HAL_SD_IRQHandler+0xf4>
    {
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80184de:	68fb      	ldr	r3, [r7, #12]
 80184e0:	f003 0302 	and.w	r3, r3, #2
 80184e4:	2b00      	cmp	r3, #0
 80184e6:	d104      	bne.n	80184f2 <HAL_SD_IRQHandler+0x96>
 80184e8:	68fb      	ldr	r3, [r7, #12]
 80184ea:	f003 0320 	and.w	r3, r3, #32
 80184ee:	2b00      	cmp	r3, #0
 80184f0:	d011      	beq.n	8018516 <HAL_SD_IRQHandler+0xba>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80184f2:	687b      	ldr	r3, [r7, #4]
 80184f4:	681b      	ldr	r3, [r3, #0]
 80184f6:	4618      	mov	r0, r3
 80184f8:	f002 fde6 	bl	801b0c8 <SDMMC_CmdStopTransfer>
 80184fc:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 80184fe:	68bb      	ldr	r3, [r7, #8]
 8018500:	2b00      	cmp	r3, #0
 8018502:	d008      	beq.n	8018516 <HAL_SD_IRQHandler+0xba>
        {
          hsd->ErrorCode |= errorstate;
 8018504:	687b      	ldr	r3, [r7, #4]
 8018506:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8018508:	68bb      	ldr	r3, [r7, #8]
 801850a:	431a      	orrs	r2, r3
 801850c:	687b      	ldr	r3, [r7, #4]
 801850e:	635a      	str	r2, [r3, #52]	@ 0x34
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8018510:	6878      	ldr	r0, [r7, #4]
 8018512:	f000 f95b 	bl	80187cc <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8018516:	687b      	ldr	r3, [r7, #4]
 8018518:	681b      	ldr	r3, [r3, #0]
 801851a:	4a3f      	ldr	r2, [pc, #252]	@ (8018618 <HAL_SD_IRQHandler+0x1bc>)
 801851c:	639a      	str	r2, [r3, #56]	@ 0x38

      hsd->State = HAL_SD_STATE_READY;
 801851e:	687b      	ldr	r3, [r7, #4]
 8018520:	2201      	movs	r2, #1
 8018522:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8018526:	687b      	ldr	r3, [r7, #4]
 8018528:	2200      	movs	r2, #0
 801852a:	62da      	str	r2, [r3, #44]	@ 0x2c
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 801852c:	68fb      	ldr	r3, [r7, #12]
 801852e:	f003 0301 	and.w	r3, r3, #1
 8018532:	2b00      	cmp	r3, #0
 8018534:	d104      	bne.n	8018540 <HAL_SD_IRQHandler+0xe4>
 8018536:	68fb      	ldr	r3, [r7, #12]
 8018538:	f003 0302 	and.w	r3, r3, #2
 801853c:	2b00      	cmp	r3, #0
 801853e:	d003      	beq.n	8018548 <HAL_SD_IRQHandler+0xec>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8018540:	6878      	ldr	r0, [r7, #4]
 8018542:	f003 fa73 	bl	801ba2c <HAL_SD_RxCpltCallback>
 8018546:	e13b      	b.n	80187c0 <HAL_SD_IRQHandler+0x364>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8018548:	6878      	ldr	r0, [r7, #4]
 801854a:	f003 fa65 	bl	801ba18 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 801854e:	e137      	b.n	80187c0 <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 8018550:	68fb      	ldr	r3, [r7, #12]
 8018552:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8018556:	2b00      	cmp	r3, #0
 8018558:	f000 8132 	beq.w	80187c0 <HAL_SD_IRQHandler+0x364>
      hsd->Instance->DLEN = 0;
 801855c:	687b      	ldr	r3, [r7, #4]
 801855e:	681b      	ldr	r3, [r3, #0]
 8018560:	2200      	movs	r2, #0
 8018562:	629a      	str	r2, [r3, #40]	@ 0x28
      hsd->Instance->DCTRL = 0;
 8018564:	687b      	ldr	r3, [r7, #4]
 8018566:	681b      	ldr	r3, [r3, #0]
 8018568:	2200      	movs	r2, #0
 801856a:	62da      	str	r2, [r3, #44]	@ 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 801856c:	687b      	ldr	r3, [r7, #4]
 801856e:	681b      	ldr	r3, [r3, #0]
 8018570:	2200      	movs	r2, #0
 8018572:	651a      	str	r2, [r3, #80]	@ 0x50
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8018574:	68fb      	ldr	r3, [r7, #12]
 8018576:	f003 0302 	and.w	r3, r3, #2
 801857a:	2b00      	cmp	r3, #0
 801857c:	d104      	bne.n	8018588 <HAL_SD_IRQHandler+0x12c>
 801857e:	68fb      	ldr	r3, [r7, #12]
 8018580:	f003 0320 	and.w	r3, r3, #32
 8018584:	2b00      	cmp	r3, #0
 8018586:	d011      	beq.n	80185ac <HAL_SD_IRQHandler+0x150>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8018588:	687b      	ldr	r3, [r7, #4]
 801858a:	681b      	ldr	r3, [r3, #0]
 801858c:	4618      	mov	r0, r3
 801858e:	f002 fd9b 	bl	801b0c8 <SDMMC_CmdStopTransfer>
 8018592:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 8018594:	68bb      	ldr	r3, [r7, #8]
 8018596:	2b00      	cmp	r3, #0
 8018598:	d008      	beq.n	80185ac <HAL_SD_IRQHandler+0x150>
          hsd->ErrorCode |= errorstate;
 801859a:	687b      	ldr	r3, [r7, #4]
 801859c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801859e:	68bb      	ldr	r3, [r7, #8]
 80185a0:	431a      	orrs	r2, r3
 80185a2:	687b      	ldr	r3, [r7, #4]
 80185a4:	635a      	str	r2, [r3, #52]	@ 0x34
          HAL_SD_ErrorCallback(hsd);
 80185a6:	6878      	ldr	r0, [r7, #4]
 80185a8:	f000 f910 	bl	80187cc <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 80185ac:	687b      	ldr	r3, [r7, #4]
 80185ae:	2201      	movs	r2, #1
 80185b0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 80185b4:	687b      	ldr	r3, [r7, #4]
 80185b6:	2200      	movs	r2, #0
 80185b8:	62da      	str	r2, [r3, #44]	@ 0x2c
      if (((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80185ba:	68fb      	ldr	r3, [r7, #12]
 80185bc:	f003 0310 	and.w	r3, r3, #16
 80185c0:	2b00      	cmp	r3, #0
 80185c2:	d104      	bne.n	80185ce <HAL_SD_IRQHandler+0x172>
 80185c4:	68fb      	ldr	r3, [r7, #12]
 80185c6:	f003 0320 	and.w	r3, r3, #32
 80185ca:	2b00      	cmp	r3, #0
 80185cc:	d002      	beq.n	80185d4 <HAL_SD_IRQHandler+0x178>
        HAL_SD_TxCpltCallback(hsd);
 80185ce:	6878      	ldr	r0, [r7, #4]
 80185d0:	f003 fa22 	bl	801ba18 <HAL_SD_TxCpltCallback>
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80185d4:	68fb      	ldr	r3, [r7, #12]
 80185d6:	f003 0301 	and.w	r3, r3, #1
 80185da:	2b00      	cmp	r3, #0
 80185dc:	d105      	bne.n	80185ea <HAL_SD_IRQHandler+0x18e>
 80185de:	68fb      	ldr	r3, [r7, #12]
 80185e0:	f003 0302 	and.w	r3, r3, #2
 80185e4:	2b00      	cmp	r3, #0
 80185e6:	f000 80eb 	beq.w	80187c0 <HAL_SD_IRQHandler+0x364>
        HAL_SD_RxCpltCallback(hsd);
 80185ea:	6878      	ldr	r0, [r7, #4]
 80185ec:	f003 fa1e 	bl	801ba2c <HAL_SD_RxCpltCallback>
}
 80185f0:	e0e6      	b.n	80187c0 <HAL_SD_IRQHandler+0x364>
  else if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80185f2:	687b      	ldr	r3, [r7, #4]
 80185f4:	681b      	ldr	r3, [r3, #0]
 80185f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80185f8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80185fc:	2b00      	cmp	r3, #0
 80185fe:	d00d      	beq.n	801861c <HAL_SD_IRQHandler+0x1c0>
 8018600:	68fb      	ldr	r3, [r7, #12]
 8018602:	f003 0308 	and.w	r3, r3, #8
 8018606:	2b00      	cmp	r3, #0
 8018608:	d008      	beq.n	801861c <HAL_SD_IRQHandler+0x1c0>
    SD_Write_IT(hsd);
 801860a:	6878      	ldr	r0, [r7, #4]
 801860c:	f001 f8a8 	bl	8019760 <SD_Write_IT>
 8018610:	e0d6      	b.n	80187c0 <HAL_SD_IRQHandler+0x364>
 8018612:	bf00      	nop
 8018614:	ffff3ec5 	.word	0xffff3ec5
 8018618:	18000f3a 	.word	0x18000f3a
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR |
 801861c:	687b      	ldr	r3, [r7, #4]
 801861e:	681b      	ldr	r3, [r3, #0]
 8018620:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8018622:	f003 033a 	and.w	r3, r3, #58	@ 0x3a
 8018626:	2b00      	cmp	r3, #0
 8018628:	f000 809d 	beq.w	8018766 <HAL_SD_IRQHandler+0x30a>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 801862c:	687b      	ldr	r3, [r7, #4]
 801862e:	681b      	ldr	r3, [r3, #0]
 8018630:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8018632:	f003 0302 	and.w	r3, r3, #2
 8018636:	2b00      	cmp	r3, #0
 8018638:	d005      	beq.n	8018646 <HAL_SD_IRQHandler+0x1ea>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 801863a:	687b      	ldr	r3, [r7, #4]
 801863c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801863e:	f043 0202 	orr.w	r2, r3, #2
 8018642:	687b      	ldr	r3, [r7, #4]
 8018644:	635a      	str	r2, [r3, #52]	@ 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 8018646:	687b      	ldr	r3, [r7, #4]
 8018648:	681b      	ldr	r3, [r3, #0]
 801864a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801864c:	f003 0308 	and.w	r3, r3, #8
 8018650:	2b00      	cmp	r3, #0
 8018652:	d005      	beq.n	8018660 <HAL_SD_IRQHandler+0x204>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8018654:	687b      	ldr	r3, [r7, #4]
 8018656:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8018658:	f043 0208 	orr.w	r2, r3, #8
 801865c:	687b      	ldr	r3, [r7, #4]
 801865e:	635a      	str	r2, [r3, #52]	@ 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 8018660:	687b      	ldr	r3, [r7, #4]
 8018662:	681b      	ldr	r3, [r3, #0]
 8018664:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8018666:	f003 0320 	and.w	r3, r3, #32
 801866a:	2b00      	cmp	r3, #0
 801866c:	d005      	beq.n	801867a <HAL_SD_IRQHandler+0x21e>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 801866e:	687b      	ldr	r3, [r7, #4]
 8018670:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8018672:	f043 0220 	orr.w	r2, r3, #32
 8018676:	687b      	ldr	r3, [r7, #4]
 8018678:	635a      	str	r2, [r3, #52]	@ 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 801867a:	687b      	ldr	r3, [r7, #4]
 801867c:	681b      	ldr	r3, [r3, #0]
 801867e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8018680:	f003 0310 	and.w	r3, r3, #16
 8018684:	2b00      	cmp	r3, #0
 8018686:	d005      	beq.n	8018694 <HAL_SD_IRQHandler+0x238>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8018688:	687b      	ldr	r3, [r7, #4]
 801868a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801868c:	f043 0210 	orr.w	r2, r3, #16
 8018690:	687b      	ldr	r3, [r7, #4]
 8018692:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8018694:	687b      	ldr	r3, [r7, #4]
 8018696:	681b      	ldr	r3, [r3, #0]
 8018698:	4a4b      	ldr	r2, [pc, #300]	@ (80187c8 <HAL_SD_IRQHandler+0x36c>)
 801869a:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 801869c:	687b      	ldr	r3, [r7, #4]
 801869e:	681b      	ldr	r3, [r3, #0]
 80186a0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80186a2:	687b      	ldr	r3, [r7, #4]
 80186a4:	681b      	ldr	r3, [r3, #0]
 80186a6:	f422 729d 	bic.w	r2, r2, #314	@ 0x13a
 80186aa:	63da      	str	r2, [r3, #60]	@ 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 80186ac:	687b      	ldr	r3, [r7, #4]
 80186ae:	681b      	ldr	r3, [r3, #0]
 80186b0:	68da      	ldr	r2, [r3, #12]
 80186b2:	687b      	ldr	r3, [r7, #4]
 80186b4:	681b      	ldr	r3, [r3, #0]
 80186b6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80186ba:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 80186bc:	687b      	ldr	r3, [r7, #4]
 80186be:	681b      	ldr	r3, [r3, #0]
 80186c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80186c2:	687b      	ldr	r3, [r7, #4]
 80186c4:	681b      	ldr	r3, [r3, #0]
 80186c6:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80186ca:	62da      	str	r2, [r3, #44]	@ 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 80186cc:	687b      	ldr	r3, [r7, #4]
 80186ce:	681b      	ldr	r3, [r3, #0]
 80186d0:	68da      	ldr	r2, [r3, #12]
 80186d2:	687b      	ldr	r3, [r7, #4]
 80186d4:	681b      	ldr	r3, [r3, #0]
 80186d6:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80186da:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80186dc:	687b      	ldr	r3, [r7, #4]
 80186de:	681b      	ldr	r3, [r3, #0]
 80186e0:	4618      	mov	r0, r3
 80186e2:	f002 fcf1 	bl	801b0c8 <SDMMC_CmdStopTransfer>
 80186e6:	4602      	mov	r2, r0
 80186e8:	687b      	ldr	r3, [r7, #4]
 80186ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80186ec:	431a      	orrs	r2, r3
 80186ee:	687b      	ldr	r3, [r7, #4]
 80186f0:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 80186f2:	687b      	ldr	r3, [r7, #4]
 80186f4:	681b      	ldr	r3, [r3, #0]
 80186f6:	68da      	ldr	r2, [r3, #12]
 80186f8:	687b      	ldr	r3, [r7, #4]
 80186fa:	681b      	ldr	r3, [r3, #0]
 80186fc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8018700:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 8018702:	687b      	ldr	r3, [r7, #4]
 8018704:	681b      	ldr	r3, [r3, #0]
 8018706:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 801870a:	639a      	str	r2, [r3, #56]	@ 0x38
    if ((context & SD_CONTEXT_IT) != 0U)
 801870c:	68fb      	ldr	r3, [r7, #12]
 801870e:	f003 0308 	and.w	r3, r3, #8
 8018712:	2b00      	cmp	r3, #0
 8018714:	d00a      	beq.n	801872c <HAL_SD_IRQHandler+0x2d0>
      hsd->State = HAL_SD_STATE_READY;
 8018716:	687b      	ldr	r3, [r7, #4]
 8018718:	2201      	movs	r2, #1
 801871a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 801871e:	687b      	ldr	r3, [r7, #4]
 8018720:	2200      	movs	r2, #0
 8018722:	62da      	str	r2, [r3, #44]	@ 0x2c
      HAL_SD_ErrorCallback(hsd);
 8018724:	6878      	ldr	r0, [r7, #4]
 8018726:	f000 f851 	bl	80187cc <HAL_SD_ErrorCallback>
}
 801872a:	e049      	b.n	80187c0 <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 801872c:	68fb      	ldr	r3, [r7, #12]
 801872e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8018732:	2b00      	cmp	r3, #0
 8018734:	d044      	beq.n	80187c0 <HAL_SD_IRQHandler+0x364>
      if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8018736:	687b      	ldr	r3, [r7, #4]
 8018738:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801873a:	2b00      	cmp	r3, #0
 801873c:	d040      	beq.n	80187c0 <HAL_SD_IRQHandler+0x364>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 801873e:	687b      	ldr	r3, [r7, #4]
 8018740:	681b      	ldr	r3, [r3, #0]
 8018742:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8018744:	687b      	ldr	r3, [r7, #4]
 8018746:	681b      	ldr	r3, [r3, #0]
 8018748:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 801874c:	63da      	str	r2, [r3, #60]	@ 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 801874e:	687b      	ldr	r3, [r7, #4]
 8018750:	681b      	ldr	r3, [r3, #0]
 8018752:	2200      	movs	r2, #0
 8018754:	651a      	str	r2, [r3, #80]	@ 0x50
        hsd->State = HAL_SD_STATE_READY;
 8018756:	687b      	ldr	r3, [r7, #4]
 8018758:	2201      	movs	r2, #1
 801875a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
        HAL_SD_ErrorCallback(hsd);
 801875e:	6878      	ldr	r0, [r7, #4]
 8018760:	f000 f834 	bl	80187cc <HAL_SD_ErrorCallback>
}
 8018764:	e02c      	b.n	80187c0 <HAL_SD_IRQHandler+0x364>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 8018766:	687b      	ldr	r3, [r7, #4]
 8018768:	681b      	ldr	r3, [r3, #0]
 801876a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801876c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8018770:	2b00      	cmp	r3, #0
 8018772:	d025      	beq.n	80187c0 <HAL_SD_IRQHandler+0x364>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 8018774:	687b      	ldr	r3, [r7, #4]
 8018776:	681b      	ldr	r3, [r3, #0]
 8018778:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801877c:	639a      	str	r2, [r3, #56]	@ 0x38
    if (READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 801877e:	687b      	ldr	r3, [r7, #4]
 8018780:	681b      	ldr	r3, [r3, #0]
 8018782:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8018784:	f003 0304 	and.w	r3, r3, #4
 8018788:	2b00      	cmp	r3, #0
 801878a:	d10c      	bne.n	80187a6 <HAL_SD_IRQHandler+0x34a>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 801878c:	68fb      	ldr	r3, [r7, #12]
 801878e:	f003 0320 	and.w	r3, r3, #32
 8018792:	2b00      	cmp	r3, #0
 8018794:	d003      	beq.n	801879e <HAL_SD_IRQHandler+0x342>
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 8018796:	6878      	ldr	r0, [r7, #4]
 8018798:	f001 f84a 	bl	8019830 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>
}
 801879c:	e010      	b.n	80187c0 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf1CpltCallback(hsd);
 801879e:	6878      	ldr	r0, [r7, #4]
 80187a0:	f001 f832 	bl	8019808 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>
}
 80187a4:	e00c      	b.n	80187c0 <HAL_SD_IRQHandler+0x364>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 80187a6:	68fb      	ldr	r3, [r7, #12]
 80187a8:	f003 0320 	and.w	r3, r3, #32
 80187ac:	2b00      	cmp	r3, #0
 80187ae:	d003      	beq.n	80187b8 <HAL_SD_IRQHandler+0x35c>
        HAL_SDEx_Write_DMADoubleBuf0CpltCallback(hsd);
 80187b0:	6878      	ldr	r0, [r7, #4]
 80187b2:	f001 f833 	bl	801981c <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>
}
 80187b6:	e003      	b.n	80187c0 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf0CpltCallback(hsd);
 80187b8:	6878      	ldr	r0, [r7, #4]
 80187ba:	f001 f81b 	bl	80197f4 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>
}
 80187be:	e7ff      	b.n	80187c0 <HAL_SD_IRQHandler+0x364>
 80187c0:	bf00      	nop
 80187c2:	3710      	adds	r7, #16
 80187c4:	46bd      	mov	sp, r7
 80187c6:	bd80      	pop	{r7, pc}
 80187c8:	18000f3a 	.word	0x18000f3a

080187cc <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 80187cc:	b480      	push	{r7}
 80187ce:	b083      	sub	sp, #12
 80187d0:	af00      	add	r7, sp, #0
 80187d2:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 80187d4:	bf00      	nop
 80187d6:	370c      	adds	r7, #12
 80187d8:	46bd      	mov	sp, r7
 80187da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80187de:	4770      	bx	lr

080187e0 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 80187e0:	b480      	push	{r7}
 80187e2:	b083      	sub	sp, #12
 80187e4:	af00      	add	r7, sp, #0
 80187e6:	6078      	str	r0, [r7, #4]
 80187e8:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80187ea:	687b      	ldr	r3, [r7, #4]
 80187ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80187ee:	0f9b      	lsrs	r3, r3, #30
 80187f0:	b2da      	uxtb	r2, r3
 80187f2:	683b      	ldr	r3, [r7, #0]
 80187f4:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80187f6:	687b      	ldr	r3, [r7, #4]
 80187f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80187fa:	0e9b      	lsrs	r3, r3, #26
 80187fc:	b2db      	uxtb	r3, r3
 80187fe:	f003 030f 	and.w	r3, r3, #15
 8018802:	b2da      	uxtb	r2, r3
 8018804:	683b      	ldr	r3, [r7, #0]
 8018806:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8018808:	687b      	ldr	r3, [r7, #4]
 801880a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801880c:	0e1b      	lsrs	r3, r3, #24
 801880e:	b2db      	uxtb	r3, r3
 8018810:	f003 0303 	and.w	r3, r3, #3
 8018814:	b2da      	uxtb	r2, r3
 8018816:	683b      	ldr	r3, [r7, #0]
 8018818:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 801881a:	687b      	ldr	r3, [r7, #4]
 801881c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801881e:	0c1b      	lsrs	r3, r3, #16
 8018820:	b2da      	uxtb	r2, r3
 8018822:	683b      	ldr	r3, [r7, #0]
 8018824:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8018826:	687b      	ldr	r3, [r7, #4]
 8018828:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801882a:	0a1b      	lsrs	r3, r3, #8
 801882c:	b2da      	uxtb	r2, r3
 801882e:	683b      	ldr	r3, [r7, #0]
 8018830:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8018832:	687b      	ldr	r3, [r7, #4]
 8018834:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8018836:	b2da      	uxtb	r2, r3
 8018838:	683b      	ldr	r3, [r7, #0]
 801883a:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 801883c:	687b      	ldr	r3, [r7, #4]
 801883e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8018840:	0d1b      	lsrs	r3, r3, #20
 8018842:	b29a      	uxth	r2, r3
 8018844:	683b      	ldr	r3, [r7, #0]
 8018846:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8018848:	687b      	ldr	r3, [r7, #4]
 801884a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801884c:	0c1b      	lsrs	r3, r3, #16
 801884e:	b2db      	uxtb	r3, r3
 8018850:	f003 030f 	and.w	r3, r3, #15
 8018854:	b2da      	uxtb	r2, r3
 8018856:	683b      	ldr	r3, [r7, #0]
 8018858:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 801885a:	687b      	ldr	r3, [r7, #4]
 801885c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801885e:	0bdb      	lsrs	r3, r3, #15
 8018860:	b2db      	uxtb	r3, r3
 8018862:	f003 0301 	and.w	r3, r3, #1
 8018866:	b2da      	uxtb	r2, r3
 8018868:	683b      	ldr	r3, [r7, #0]
 801886a:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 801886c:	687b      	ldr	r3, [r7, #4]
 801886e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8018870:	0b9b      	lsrs	r3, r3, #14
 8018872:	b2db      	uxtb	r3, r3
 8018874:	f003 0301 	and.w	r3, r3, #1
 8018878:	b2da      	uxtb	r2, r3
 801887a:	683b      	ldr	r3, [r7, #0]
 801887c:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 801887e:	687b      	ldr	r3, [r7, #4]
 8018880:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8018882:	0b5b      	lsrs	r3, r3, #13
 8018884:	b2db      	uxtb	r3, r3
 8018886:	f003 0301 	and.w	r3, r3, #1
 801888a:	b2da      	uxtb	r2, r3
 801888c:	683b      	ldr	r3, [r7, #0]
 801888e:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8018890:	687b      	ldr	r3, [r7, #4]
 8018892:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8018894:	0b1b      	lsrs	r3, r3, #12
 8018896:	b2db      	uxtb	r3, r3
 8018898:	f003 0301 	and.w	r3, r3, #1
 801889c:	b2da      	uxtb	r2, r3
 801889e:	683b      	ldr	r3, [r7, #0]
 80188a0:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 80188a2:	683b      	ldr	r3, [r7, #0]
 80188a4:	2200      	movs	r2, #0
 80188a6:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 80188a8:	687b      	ldr	r3, [r7, #4]
 80188aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80188ac:	2b00      	cmp	r3, #0
 80188ae:	d163      	bne.n	8018978 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80188b0:	687b      	ldr	r3, [r7, #4]
 80188b2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80188b4:	009a      	lsls	r2, r3, #2
 80188b6:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80188ba:	4013      	ands	r3, r2
 80188bc:	687a      	ldr	r2, [r7, #4]
 80188be:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 80188c0:	0f92      	lsrs	r2, r2, #30
 80188c2:	431a      	orrs	r2, r3
 80188c4:	683b      	ldr	r3, [r7, #0]
 80188c6:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80188c8:	687b      	ldr	r3, [r7, #4]
 80188ca:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80188cc:	0edb      	lsrs	r3, r3, #27
 80188ce:	b2db      	uxtb	r3, r3
 80188d0:	f003 0307 	and.w	r3, r3, #7
 80188d4:	b2da      	uxtb	r2, r3
 80188d6:	683b      	ldr	r3, [r7, #0]
 80188d8:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80188da:	687b      	ldr	r3, [r7, #4]
 80188dc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80188de:	0e1b      	lsrs	r3, r3, #24
 80188e0:	b2db      	uxtb	r3, r3
 80188e2:	f003 0307 	and.w	r3, r3, #7
 80188e6:	b2da      	uxtb	r2, r3
 80188e8:	683b      	ldr	r3, [r7, #0]
 80188ea:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80188ec:	687b      	ldr	r3, [r7, #4]
 80188ee:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80188f0:	0d5b      	lsrs	r3, r3, #21
 80188f2:	b2db      	uxtb	r3, r3
 80188f4:	f003 0307 	and.w	r3, r3, #7
 80188f8:	b2da      	uxtb	r2, r3
 80188fa:	683b      	ldr	r3, [r7, #0]
 80188fc:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80188fe:	687b      	ldr	r3, [r7, #4]
 8018900:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8018902:	0c9b      	lsrs	r3, r3, #18
 8018904:	b2db      	uxtb	r3, r3
 8018906:	f003 0307 	and.w	r3, r3, #7
 801890a:	b2da      	uxtb	r2, r3
 801890c:	683b      	ldr	r3, [r7, #0]
 801890e:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8018910:	687b      	ldr	r3, [r7, #4]
 8018912:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8018914:	0bdb      	lsrs	r3, r3, #15
 8018916:	b2db      	uxtb	r3, r3
 8018918:	f003 0307 	and.w	r3, r3, #7
 801891c:	b2da      	uxtb	r2, r3
 801891e:	683b      	ldr	r3, [r7, #0]
 8018920:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8018922:	683b      	ldr	r3, [r7, #0]
 8018924:	691b      	ldr	r3, [r3, #16]
 8018926:	1c5a      	adds	r2, r3, #1
 8018928:	687b      	ldr	r3, [r7, #4]
 801892a:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 801892c:	683b      	ldr	r3, [r7, #0]
 801892e:	7e1b      	ldrb	r3, [r3, #24]
 8018930:	b2db      	uxtb	r3, r3
 8018932:	f003 0307 	and.w	r3, r3, #7
 8018936:	3302      	adds	r3, #2
 8018938:	2201      	movs	r2, #1
 801893a:	fa02 f303 	lsl.w	r3, r2, r3
 801893e:	687a      	ldr	r2, [r7, #4]
 8018940:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8018942:	fb03 f202 	mul.w	r2, r3, r2
 8018946:	687b      	ldr	r3, [r7, #4]
 8018948:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 801894a:	683b      	ldr	r3, [r7, #0]
 801894c:	7a1b      	ldrb	r3, [r3, #8]
 801894e:	b2db      	uxtb	r3, r3
 8018950:	f003 030f 	and.w	r3, r3, #15
 8018954:	2201      	movs	r2, #1
 8018956:	409a      	lsls	r2, r3
 8018958:	687b      	ldr	r3, [r7, #4]
 801895a:	64da      	str	r2, [r3, #76]	@ 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 801895c:	687b      	ldr	r3, [r7, #4]
 801895e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8018960:	687a      	ldr	r2, [r7, #4]
 8018962:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8018964:	0a52      	lsrs	r2, r2, #9
 8018966:	fb03 f202 	mul.w	r2, r3, r2
 801896a:	687b      	ldr	r3, [r7, #4]
 801896c:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.LogBlockSize = 512U;
 801896e:	687b      	ldr	r3, [r7, #4]
 8018970:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8018974:	655a      	str	r2, [r3, #84]	@ 0x54
 8018976:	e031      	b.n	80189dc <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8018978:	687b      	ldr	r3, [r7, #4]
 801897a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801897c:	2b01      	cmp	r3, #1
 801897e:	d11d      	bne.n	80189bc <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8018980:	687b      	ldr	r3, [r7, #4]
 8018982:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8018984:	041b      	lsls	r3, r3, #16
 8018986:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 801898a:	687b      	ldr	r3, [r7, #4]
 801898c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801898e:	0c1b      	lsrs	r3, r3, #16
 8018990:	431a      	orrs	r2, r3
 8018992:	683b      	ldr	r3, [r7, #0]
 8018994:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8018996:	683b      	ldr	r3, [r7, #0]
 8018998:	691b      	ldr	r3, [r3, #16]
 801899a:	3301      	adds	r3, #1
 801899c:	029a      	lsls	r2, r3, #10
 801899e:	687b      	ldr	r3, [r7, #4]
 80189a0:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 80189a2:	687b      	ldr	r3, [r7, #4]
 80189a4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80189a6:	687b      	ldr	r3, [r7, #4]
 80189a8:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.BlockSize = 512U;
 80189aa:	687b      	ldr	r3, [r7, #4]
 80189ac:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80189b0:	64da      	str	r2, [r3, #76]	@ 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 80189b2:	687b      	ldr	r3, [r7, #4]
 80189b4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80189b6:	687b      	ldr	r3, [r7, #4]
 80189b8:	655a      	str	r2, [r3, #84]	@ 0x54
 80189ba:	e00f      	b.n	80189dc <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80189bc:	687b      	ldr	r3, [r7, #4]
 80189be:	681b      	ldr	r3, [r3, #0]
 80189c0:	4a58      	ldr	r2, [pc, #352]	@ (8018b24 <HAL_SD_GetCardCSD+0x344>)
 80189c2:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80189c4:	687b      	ldr	r3, [r7, #4]
 80189c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80189c8:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80189cc:	687b      	ldr	r3, [r7, #4]
 80189ce:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 80189d0:	687b      	ldr	r3, [r7, #4]
 80189d2:	2201      	movs	r2, #1
 80189d4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 80189d8:	2301      	movs	r3, #1
 80189da:	e09d      	b.n	8018b18 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80189dc:	687b      	ldr	r3, [r7, #4]
 80189de:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80189e0:	0b9b      	lsrs	r3, r3, #14
 80189e2:	b2db      	uxtb	r3, r3
 80189e4:	f003 0301 	and.w	r3, r3, #1
 80189e8:	b2da      	uxtb	r2, r3
 80189ea:	683b      	ldr	r3, [r7, #0]
 80189ec:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80189ee:	687b      	ldr	r3, [r7, #4]
 80189f0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80189f2:	09db      	lsrs	r3, r3, #7
 80189f4:	b2db      	uxtb	r3, r3
 80189f6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80189fa:	b2da      	uxtb	r2, r3
 80189fc:	683b      	ldr	r3, [r7, #0]
 80189fe:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8018a00:	687b      	ldr	r3, [r7, #4]
 8018a02:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8018a04:	b2db      	uxtb	r3, r3
 8018a06:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8018a0a:	b2da      	uxtb	r2, r3
 8018a0c:	683b      	ldr	r3, [r7, #0]
 8018a0e:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8018a10:	687b      	ldr	r3, [r7, #4]
 8018a12:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8018a14:	0fdb      	lsrs	r3, r3, #31
 8018a16:	b2da      	uxtb	r2, r3
 8018a18:	683b      	ldr	r3, [r7, #0]
 8018a1a:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8018a1c:	687b      	ldr	r3, [r7, #4]
 8018a1e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8018a20:	0f5b      	lsrs	r3, r3, #29
 8018a22:	b2db      	uxtb	r3, r3
 8018a24:	f003 0303 	and.w	r3, r3, #3
 8018a28:	b2da      	uxtb	r2, r3
 8018a2a:	683b      	ldr	r3, [r7, #0]
 8018a2c:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8018a2e:	687b      	ldr	r3, [r7, #4]
 8018a30:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8018a32:	0e9b      	lsrs	r3, r3, #26
 8018a34:	b2db      	uxtb	r3, r3
 8018a36:	f003 0307 	and.w	r3, r3, #7
 8018a3a:	b2da      	uxtb	r2, r3
 8018a3c:	683b      	ldr	r3, [r7, #0]
 8018a3e:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8018a40:	687b      	ldr	r3, [r7, #4]
 8018a42:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8018a44:	0d9b      	lsrs	r3, r3, #22
 8018a46:	b2db      	uxtb	r3, r3
 8018a48:	f003 030f 	and.w	r3, r3, #15
 8018a4c:	b2da      	uxtb	r2, r3
 8018a4e:	683b      	ldr	r3, [r7, #0]
 8018a50:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8018a52:	687b      	ldr	r3, [r7, #4]
 8018a54:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8018a56:	0d5b      	lsrs	r3, r3, #21
 8018a58:	b2db      	uxtb	r3, r3
 8018a5a:	f003 0301 	and.w	r3, r3, #1
 8018a5e:	b2da      	uxtb	r2, r3
 8018a60:	683b      	ldr	r3, [r7, #0]
 8018a62:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8018a66:	683b      	ldr	r3, [r7, #0]
 8018a68:	2200      	movs	r2, #0
 8018a6a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8018a6e:	687b      	ldr	r3, [r7, #4]
 8018a70:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8018a72:	0c1b      	lsrs	r3, r3, #16
 8018a74:	b2db      	uxtb	r3, r3
 8018a76:	f003 0301 	and.w	r3, r3, #1
 8018a7a:	b2da      	uxtb	r2, r3
 8018a7c:	683b      	ldr	r3, [r7, #0]
 8018a7e:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8018a82:	687b      	ldr	r3, [r7, #4]
 8018a84:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8018a86:	0bdb      	lsrs	r3, r3, #15
 8018a88:	b2db      	uxtb	r3, r3
 8018a8a:	f003 0301 	and.w	r3, r3, #1
 8018a8e:	b2da      	uxtb	r2, r3
 8018a90:	683b      	ldr	r3, [r7, #0]
 8018a92:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8018a96:	687b      	ldr	r3, [r7, #4]
 8018a98:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8018a9a:	0b9b      	lsrs	r3, r3, #14
 8018a9c:	b2db      	uxtb	r3, r3
 8018a9e:	f003 0301 	and.w	r3, r3, #1
 8018aa2:	b2da      	uxtb	r2, r3
 8018aa4:	683b      	ldr	r3, [r7, #0]
 8018aa6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8018aaa:	687b      	ldr	r3, [r7, #4]
 8018aac:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8018aae:	0b5b      	lsrs	r3, r3, #13
 8018ab0:	b2db      	uxtb	r3, r3
 8018ab2:	f003 0301 	and.w	r3, r3, #1
 8018ab6:	b2da      	uxtb	r2, r3
 8018ab8:	683b      	ldr	r3, [r7, #0]
 8018aba:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8018abe:	687b      	ldr	r3, [r7, #4]
 8018ac0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8018ac2:	0b1b      	lsrs	r3, r3, #12
 8018ac4:	b2db      	uxtb	r3, r3
 8018ac6:	f003 0301 	and.w	r3, r3, #1
 8018aca:	b2da      	uxtb	r2, r3
 8018acc:	683b      	ldr	r3, [r7, #0]
 8018ace:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8018ad2:	687b      	ldr	r3, [r7, #4]
 8018ad4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8018ad6:	0a9b      	lsrs	r3, r3, #10
 8018ad8:	b2db      	uxtb	r3, r3
 8018ada:	f003 0303 	and.w	r3, r3, #3
 8018ade:	b2da      	uxtb	r2, r3
 8018ae0:	683b      	ldr	r3, [r7, #0]
 8018ae2:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8018ae6:	687b      	ldr	r3, [r7, #4]
 8018ae8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8018aea:	0a1b      	lsrs	r3, r3, #8
 8018aec:	b2db      	uxtb	r3, r3
 8018aee:	f003 0303 	and.w	r3, r3, #3
 8018af2:	b2da      	uxtb	r2, r3
 8018af4:	683b      	ldr	r3, [r7, #0]
 8018af6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8018afa:	687b      	ldr	r3, [r7, #4]
 8018afc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8018afe:	085b      	lsrs	r3, r3, #1
 8018b00:	b2db      	uxtb	r3, r3
 8018b02:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8018b06:	b2da      	uxtb	r2, r3
 8018b08:	683b      	ldr	r3, [r7, #0]
 8018b0a:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 8018b0e:	683b      	ldr	r3, [r7, #0]
 8018b10:	2201      	movs	r2, #1
 8018b12:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 8018b16:	2300      	movs	r3, #0
}
 8018b18:	4618      	mov	r0, r3
 8018b1a:	370c      	adds	r7, #12
 8018b1c:	46bd      	mov	sp, r7
 8018b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018b22:	4770      	bx	lr
 8018b24:	1fe00fff 	.word	0x1fe00fff

08018b28 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 8018b28:	b580      	push	{r7, lr}
 8018b2a:	b094      	sub	sp, #80	@ 0x50
 8018b2c:	af00      	add	r7, sp, #0
 8018b2e:	6078      	str	r0, [r7, #4]
 8018b30:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8018b32:	2300      	movs	r3, #0
 8018b34:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 8018b38:	687b      	ldr	r3, [r7, #4]
 8018b3a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8018b3e:	b2db      	uxtb	r3, r3
 8018b40:	2b03      	cmp	r3, #3
 8018b42:	d101      	bne.n	8018b48 <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 8018b44:	2301      	movs	r3, #1
 8018b46:	e0a7      	b.n	8018c98 <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 8018b48:	f107 0308 	add.w	r3, r7, #8
 8018b4c:	4619      	mov	r1, r3
 8018b4e:	6878      	ldr	r0, [r7, #4]
 8018b50:	f000 fb62 	bl	8019218 <SD_SendSDStatus>
 8018b54:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 8018b56:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8018b58:	2b00      	cmp	r3, #0
 8018b5a:	d011      	beq.n	8018b80 <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8018b5c:	687b      	ldr	r3, [r7, #4]
 8018b5e:	681b      	ldr	r3, [r3, #0]
 8018b60:	4a4f      	ldr	r2, [pc, #316]	@ (8018ca0 <HAL_SD_GetCardStatus+0x178>)
 8018b62:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8018b64:	687b      	ldr	r3, [r7, #4]
 8018b66:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8018b68:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8018b6a:	431a      	orrs	r2, r3
 8018b6c:	687b      	ldr	r3, [r7, #4]
 8018b6e:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 8018b70:	687b      	ldr	r3, [r7, #4]
 8018b72:	2201      	movs	r2, #1
 8018b74:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    status = HAL_ERROR;
 8018b78:	2301      	movs	r3, #1
 8018b7a:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 8018b7e:	e070      	b.n	8018c62 <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 8018b80:	68bb      	ldr	r3, [r7, #8]
 8018b82:	099b      	lsrs	r3, r3, #6
 8018b84:	b2db      	uxtb	r3, r3
 8018b86:	f003 0303 	and.w	r3, r3, #3
 8018b8a:	b2da      	uxtb	r2, r3
 8018b8c:	683b      	ldr	r3, [r7, #0]
 8018b8e:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 8018b90:	68bb      	ldr	r3, [r7, #8]
 8018b92:	095b      	lsrs	r3, r3, #5
 8018b94:	b2db      	uxtb	r3, r3
 8018b96:	f003 0301 	and.w	r3, r3, #1
 8018b9a:	b2da      	uxtb	r2, r3
 8018b9c:	683b      	ldr	r3, [r7, #0]
 8018b9e:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 8018ba0:	68bb      	ldr	r3, [r7, #8]
 8018ba2:	0a1b      	lsrs	r3, r3, #8
 8018ba4:	b29b      	uxth	r3, r3
 8018ba6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8018baa:	b29a      	uxth	r2, r3
 8018bac:	68bb      	ldr	r3, [r7, #8]
 8018bae:	0e1b      	lsrs	r3, r3, #24
 8018bb0:	b29b      	uxth	r3, r3
 8018bb2:	4313      	orrs	r3, r2
 8018bb4:	b29a      	uxth	r2, r3
 8018bb6:	683b      	ldr	r3, [r7, #0]
 8018bb8:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8018bba:	68fb      	ldr	r3, [r7, #12]
 8018bbc:	061a      	lsls	r2, r3, #24
 8018bbe:	68fb      	ldr	r3, [r7, #12]
 8018bc0:	021b      	lsls	r3, r3, #8
 8018bc2:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8018bc6:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8018bc8:	68fb      	ldr	r3, [r7, #12]
 8018bca:	0a1b      	lsrs	r3, r3, #8
 8018bcc:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8018bd0:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8018bd2:	68fb      	ldr	r3, [r7, #12]
 8018bd4:	0e1b      	lsrs	r3, r3, #24
 8018bd6:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8018bd8:	683b      	ldr	r3, [r7, #0]
 8018bda:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 8018bdc:	693b      	ldr	r3, [r7, #16]
 8018bde:	b2da      	uxtb	r2, r3
 8018be0:	683b      	ldr	r3, [r7, #0]
 8018be2:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 8018be4:	693b      	ldr	r3, [r7, #16]
 8018be6:	0a1b      	lsrs	r3, r3, #8
 8018be8:	b2da      	uxtb	r2, r3
 8018bea:	683b      	ldr	r3, [r7, #0]
 8018bec:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 8018bee:	693b      	ldr	r3, [r7, #16]
 8018bf0:	0d1b      	lsrs	r3, r3, #20
 8018bf2:	b2db      	uxtb	r3, r3
 8018bf4:	f003 030f 	and.w	r3, r3, #15
 8018bf8:	b2da      	uxtb	r2, r3
 8018bfa:	683b      	ldr	r3, [r7, #0]
 8018bfc:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 8018bfe:	693b      	ldr	r3, [r7, #16]
 8018c00:	0c1b      	lsrs	r3, r3, #16
 8018c02:	b29b      	uxth	r3, r3
 8018c04:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8018c08:	b29a      	uxth	r2, r3
 8018c0a:	697b      	ldr	r3, [r7, #20]
 8018c0c:	b29b      	uxth	r3, r3
 8018c0e:	b2db      	uxtb	r3, r3
 8018c10:	b29b      	uxth	r3, r3
 8018c12:	4313      	orrs	r3, r2
 8018c14:	b29a      	uxth	r2, r3
 8018c16:	683b      	ldr	r3, [r7, #0]
 8018c18:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 8018c1a:	697b      	ldr	r3, [r7, #20]
 8018c1c:	0a9b      	lsrs	r3, r3, #10
 8018c1e:	b2db      	uxtb	r3, r3
 8018c20:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8018c24:	b2da      	uxtb	r2, r3
 8018c26:	683b      	ldr	r3, [r7, #0]
 8018c28:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 8018c2a:	697b      	ldr	r3, [r7, #20]
 8018c2c:	0a1b      	lsrs	r3, r3, #8
 8018c2e:	b2db      	uxtb	r3, r3
 8018c30:	f003 0303 	and.w	r3, r3, #3
 8018c34:	b2da      	uxtb	r2, r3
 8018c36:	683b      	ldr	r3, [r7, #0]
 8018c38:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 8018c3a:	697b      	ldr	r3, [r7, #20]
 8018c3c:	091b      	lsrs	r3, r3, #4
 8018c3e:	b2db      	uxtb	r3, r3
 8018c40:	f003 030f 	and.w	r3, r3, #15
 8018c44:	b2da      	uxtb	r2, r3
 8018c46:	683b      	ldr	r3, [r7, #0]
 8018c48:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 8018c4a:	697b      	ldr	r3, [r7, #20]
 8018c4c:	b2db      	uxtb	r3, r3
 8018c4e:	f003 030f 	and.w	r3, r3, #15
 8018c52:	b2da      	uxtb	r2, r3
 8018c54:	683b      	ldr	r3, [r7, #0]
 8018c56:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 8018c58:	69bb      	ldr	r3, [r7, #24]
 8018c5a:	0e1b      	lsrs	r3, r3, #24
 8018c5c:	b2da      	uxtb	r2, r3
 8018c5e:	683b      	ldr	r3, [r7, #0]
 8018c60:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8018c62:	687b      	ldr	r3, [r7, #4]
 8018c64:	681b      	ldr	r3, [r3, #0]
 8018c66:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8018c6a:	4618      	mov	r0, r3
 8018c6c:	f002 f97c 	bl	801af68 <SDMMC_CmdBlockLength>
 8018c70:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 8018c72:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8018c74:	2b00      	cmp	r3, #0
 8018c76:	d00d      	beq.n	8018c94 <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8018c78:	687b      	ldr	r3, [r7, #4]
 8018c7a:	681b      	ldr	r3, [r3, #0]
 8018c7c:	4a08      	ldr	r2, [pc, #32]	@ (8018ca0 <HAL_SD_GetCardStatus+0x178>)
 8018c7e:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode = errorstate;
 8018c80:	687b      	ldr	r3, [r7, #4]
 8018c82:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8018c84:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 8018c86:	687b      	ldr	r3, [r7, #4]
 8018c88:	2201      	movs	r2, #1
 8018c8a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    status = HAL_ERROR;
 8018c8e:	2301      	movs	r3, #1
 8018c90:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  }


  return status;
 8018c94:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
}
 8018c98:	4618      	mov	r0, r3
 8018c9a:	3750      	adds	r7, #80	@ 0x50
 8018c9c:	46bd      	mov	sp, r7
 8018c9e:	bd80      	pop	{r7, pc}
 8018ca0:	1fe00fff 	.word	0x1fe00fff

08018ca4 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8018ca4:	b480      	push	{r7}
 8018ca6:	b083      	sub	sp, #12
 8018ca8:	af00      	add	r7, sp, #0
 8018caa:	6078      	str	r0, [r7, #4]
 8018cac:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8018cae:	687b      	ldr	r3, [r7, #4]
 8018cb0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8018cb2:	683b      	ldr	r3, [r7, #0]
 8018cb4:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8018cb6:	687b      	ldr	r3, [r7, #4]
 8018cb8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8018cba:	683b      	ldr	r3, [r7, #0]
 8018cbc:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8018cbe:	687b      	ldr	r3, [r7, #4]
 8018cc0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8018cc2:	683b      	ldr	r3, [r7, #0]
 8018cc4:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8018cc6:	687b      	ldr	r3, [r7, #4]
 8018cc8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8018cca:	683b      	ldr	r3, [r7, #0]
 8018ccc:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8018cce:	687b      	ldr	r3, [r7, #4]
 8018cd0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8018cd2:	683b      	ldr	r3, [r7, #0]
 8018cd4:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8018cd6:	687b      	ldr	r3, [r7, #4]
 8018cd8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8018cda:	683b      	ldr	r3, [r7, #0]
 8018cdc:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8018cde:	687b      	ldr	r3, [r7, #4]
 8018ce0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8018ce2:	683b      	ldr	r3, [r7, #0]
 8018ce4:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8018ce6:	687b      	ldr	r3, [r7, #4]
 8018ce8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8018cea:	683b      	ldr	r3, [r7, #0]
 8018cec:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8018cee:	2300      	movs	r3, #0
}
 8018cf0:	4618      	mov	r0, r3
 8018cf2:	370c      	adds	r7, #12
 8018cf4:	46bd      	mov	sp, r7
 8018cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018cfa:	4770      	bx	lr

08018cfc <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8018cfc:	b590      	push	{r4, r7, lr}
 8018cfe:	b08d      	sub	sp, #52	@ 0x34
 8018d00:	af02      	add	r7, sp, #8
 8018d02:	6078      	str	r0, [r7, #4]
 8018d04:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 8018d06:	2300      	movs	r3, #0
 8018d08:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8018d0c:	687b      	ldr	r3, [r7, #4]
 8018d0e:	2203      	movs	r2, #3
 8018d10:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 8018d14:	687b      	ldr	r3, [r7, #4]
 8018d16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8018d18:	2b03      	cmp	r3, #3
 8018d1a:	d02e      	beq.n	8018d7a <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 8018d1c:	683b      	ldr	r3, [r7, #0]
 8018d1e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8018d22:	d106      	bne.n	8018d32 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8018d24:	687b      	ldr	r3, [r7, #4]
 8018d26:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8018d28:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8018d2c:	687b      	ldr	r3, [r7, #4]
 8018d2e:	635a      	str	r2, [r3, #52]	@ 0x34
 8018d30:	e029      	b.n	8018d86 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 8018d32:	683b      	ldr	r3, [r7, #0]
 8018d34:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8018d38:	d10a      	bne.n	8018d50 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8018d3a:	6878      	ldr	r0, [r7, #4]
 8018d3c:	f000 fb64 	bl	8019408 <SD_WideBus_Enable>
 8018d40:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8018d42:	687b      	ldr	r3, [r7, #4]
 8018d44:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8018d46:	6a3b      	ldr	r3, [r7, #32]
 8018d48:	431a      	orrs	r2, r3
 8018d4a:	687b      	ldr	r3, [r7, #4]
 8018d4c:	635a      	str	r2, [r3, #52]	@ 0x34
 8018d4e:	e01a      	b.n	8018d86 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 8018d50:	683b      	ldr	r3, [r7, #0]
 8018d52:	2b00      	cmp	r3, #0
 8018d54:	d10a      	bne.n	8018d6c <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8018d56:	6878      	ldr	r0, [r7, #4]
 8018d58:	f000 fba1 	bl	801949e <SD_WideBus_Disable>
 8018d5c:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8018d5e:	687b      	ldr	r3, [r7, #4]
 8018d60:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8018d62:	6a3b      	ldr	r3, [r7, #32]
 8018d64:	431a      	orrs	r2, r3
 8018d66:	687b      	ldr	r3, [r7, #4]
 8018d68:	635a      	str	r2, [r3, #52]	@ 0x34
 8018d6a:	e00c      	b.n	8018d86 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8018d6c:	687b      	ldr	r3, [r7, #4]
 8018d6e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8018d70:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8018d74:	687b      	ldr	r3, [r7, #4]
 8018d76:	635a      	str	r2, [r3, #52]	@ 0x34
 8018d78:	e005      	b.n	8018d86 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* SD Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8018d7a:	687b      	ldr	r3, [r7, #4]
 8018d7c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8018d7e:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8018d82:	687b      	ldr	r3, [r7, #4]
 8018d84:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8018d86:	687b      	ldr	r3, [r7, #4]
 8018d88:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8018d8a:	2b00      	cmp	r3, #0
 8018d8c:	d007      	beq.n	8018d9e <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8018d8e:	687b      	ldr	r3, [r7, #4]
 8018d90:	681b      	ldr	r3, [r3, #0]
 8018d92:	4a5f      	ldr	r2, [pc, #380]	@ (8018f10 <HAL_SD_ConfigWideBusOperation+0x214>)
 8018d94:	639a      	str	r2, [r3, #56]	@ 0x38
    status = HAL_ERROR;
 8018d96:	2301      	movs	r3, #1
 8018d98:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8018d9c:	e096      	b.n	8018ecc <HAL_SD_ConfigWideBusOperation+0x1d0>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8018d9e:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 8018da2:	f04f 0100 	mov.w	r1, #0
 8018da6:	f7fd fdf5 	bl	8016994 <HAL_RCCEx_GetPeriphCLKFreq>
 8018daa:	61f8      	str	r0, [r7, #28]
    if (sdmmc_clk != 0U)
 8018dac:	69fb      	ldr	r3, [r7, #28]
 8018dae:	2b00      	cmp	r3, #0
 8018db0:	f000 8083 	beq.w	8018eba <HAL_SD_ConfigWideBusOperation+0x1be>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 8018db4:	687b      	ldr	r3, [r7, #4]
 8018db6:	685b      	ldr	r3, [r3, #4]
 8018db8:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8018dba:	687b      	ldr	r3, [r7, #4]
 8018dbc:	689b      	ldr	r3, [r3, #8]
 8018dbe:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 8018dc0:	683b      	ldr	r3, [r7, #0]
 8018dc2:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8018dc4:	687b      	ldr	r3, [r7, #4]
 8018dc6:	691b      	ldr	r3, [r3, #16]
 8018dc8:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 8018dca:	687b      	ldr	r3, [r7, #4]
 8018dcc:	695a      	ldr	r2, [r3, #20]
 8018dce:	69fb      	ldr	r3, [r7, #28]
 8018dd0:	4950      	ldr	r1, [pc, #320]	@ (8018f14 <HAL_SD_ConfigWideBusOperation+0x218>)
 8018dd2:	fba1 1303 	umull	r1, r3, r1, r3
 8018dd6:	0e1b      	lsrs	r3, r3, #24
 8018dd8:	429a      	cmp	r2, r3
 8018dda:	d303      	bcc.n	8018de4 <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 8018ddc:	687b      	ldr	r3, [r7, #4]
 8018dde:	695b      	ldr	r3, [r3, #20]
 8018de0:	61bb      	str	r3, [r7, #24]
 8018de2:	e05a      	b.n	8018e9a <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 8018de4:	687b      	ldr	r3, [r7, #4]
 8018de6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8018de8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8018dec:	d103      	bne.n	8018df6 <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 8018dee:	687b      	ldr	r3, [r7, #4]
 8018df0:	695b      	ldr	r3, [r3, #20]
 8018df2:	61bb      	str	r3, [r7, #24]
 8018df4:	e051      	b.n	8018e9a <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 8018df6:	687b      	ldr	r3, [r7, #4]
 8018df8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8018dfa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8018dfe:	d126      	bne.n	8018e4e <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 8018e00:	687b      	ldr	r3, [r7, #4]
 8018e02:	695b      	ldr	r3, [r3, #20]
 8018e04:	2b00      	cmp	r3, #0
 8018e06:	d10e      	bne.n	8018e26 <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 8018e08:	69fb      	ldr	r3, [r7, #28]
 8018e0a:	4a43      	ldr	r2, [pc, #268]	@ (8018f18 <HAL_SD_ConfigWideBusOperation+0x21c>)
 8018e0c:	4293      	cmp	r3, r2
 8018e0e:	d906      	bls.n	8018e1e <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8018e10:	69fb      	ldr	r3, [r7, #28]
 8018e12:	4a40      	ldr	r2, [pc, #256]	@ (8018f14 <HAL_SD_ConfigWideBusOperation+0x218>)
 8018e14:	fba2 2303 	umull	r2, r3, r2, r3
 8018e18:	0e5b      	lsrs	r3, r3, #25
 8018e1a:	61bb      	str	r3, [r7, #24]
 8018e1c:	e03d      	b.n	8018e9a <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8018e1e:	687b      	ldr	r3, [r7, #4]
 8018e20:	695b      	ldr	r3, [r3, #20]
 8018e22:	61bb      	str	r3, [r7, #24]
 8018e24:	e039      	b.n	8018e9a <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 8018e26:	687b      	ldr	r3, [r7, #4]
 8018e28:	695b      	ldr	r3, [r3, #20]
 8018e2a:	005b      	lsls	r3, r3, #1
 8018e2c:	69fa      	ldr	r2, [r7, #28]
 8018e2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8018e32:	4a39      	ldr	r2, [pc, #228]	@ (8018f18 <HAL_SD_ConfigWideBusOperation+0x21c>)
 8018e34:	4293      	cmp	r3, r2
 8018e36:	d906      	bls.n	8018e46 <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8018e38:	69fb      	ldr	r3, [r7, #28]
 8018e3a:	4a36      	ldr	r2, [pc, #216]	@ (8018f14 <HAL_SD_ConfigWideBusOperation+0x218>)
 8018e3c:	fba2 2303 	umull	r2, r3, r2, r3
 8018e40:	0e5b      	lsrs	r3, r3, #25
 8018e42:	61bb      	str	r3, [r7, #24]
 8018e44:	e029      	b.n	8018e9a <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8018e46:	687b      	ldr	r3, [r7, #4]
 8018e48:	695b      	ldr	r3, [r3, #20]
 8018e4a:	61bb      	str	r3, [r7, #24]
 8018e4c:	e025      	b.n	8018e9a <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 8018e4e:	687b      	ldr	r3, [r7, #4]
 8018e50:	695b      	ldr	r3, [r3, #20]
 8018e52:	2b00      	cmp	r3, #0
 8018e54:	d10e      	bne.n	8018e74 <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 8018e56:	69fb      	ldr	r3, [r7, #28]
 8018e58:	4a30      	ldr	r2, [pc, #192]	@ (8018f1c <HAL_SD_ConfigWideBusOperation+0x220>)
 8018e5a:	4293      	cmp	r3, r2
 8018e5c:	d906      	bls.n	8018e6c <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 8018e5e:	69fb      	ldr	r3, [r7, #28]
 8018e60:	4a2c      	ldr	r2, [pc, #176]	@ (8018f14 <HAL_SD_ConfigWideBusOperation+0x218>)
 8018e62:	fba2 2303 	umull	r2, r3, r2, r3
 8018e66:	0e1b      	lsrs	r3, r3, #24
 8018e68:	61bb      	str	r3, [r7, #24]
 8018e6a:	e016      	b.n	8018e9a <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8018e6c:	687b      	ldr	r3, [r7, #4]
 8018e6e:	695b      	ldr	r3, [r3, #20]
 8018e70:	61bb      	str	r3, [r7, #24]
 8018e72:	e012      	b.n	8018e9a <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 8018e74:	687b      	ldr	r3, [r7, #4]
 8018e76:	695b      	ldr	r3, [r3, #20]
 8018e78:	005b      	lsls	r3, r3, #1
 8018e7a:	69fa      	ldr	r2, [r7, #28]
 8018e7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8018e80:	4a26      	ldr	r2, [pc, #152]	@ (8018f1c <HAL_SD_ConfigWideBusOperation+0x220>)
 8018e82:	4293      	cmp	r3, r2
 8018e84:	d906      	bls.n	8018e94 <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 8018e86:	69fb      	ldr	r3, [r7, #28]
 8018e88:	4a22      	ldr	r2, [pc, #136]	@ (8018f14 <HAL_SD_ConfigWideBusOperation+0x218>)
 8018e8a:	fba2 2303 	umull	r2, r3, r2, r3
 8018e8e:	0e1b      	lsrs	r3, r3, #24
 8018e90:	61bb      	str	r3, [r7, #24]
 8018e92:	e002      	b.n	8018e9a <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8018e94:	687b      	ldr	r3, [r7, #4]
 8018e96:	695b      	ldr	r3, [r3, #20]
 8018e98:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 8018e9a:	687b      	ldr	r3, [r7, #4]
 8018e9c:	681c      	ldr	r4, [r3, #0]
 8018e9e:	466a      	mov	r2, sp
 8018ea0:	f107 0314 	add.w	r3, r7, #20
 8018ea4:	e893 0003 	ldmia.w	r3, {r0, r1}
 8018ea8:	e882 0003 	stmia.w	r2, {r0, r1}
 8018eac:	f107 0308 	add.w	r3, r7, #8
 8018eb0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8018eb2:	4620      	mov	r0, r4
 8018eb4:	f001 ff7a 	bl	801adac <SDMMC_Init>
 8018eb8:	e008      	b.n	8018ecc <HAL_SD_ConfigWideBusOperation+0x1d0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 8018eba:	687b      	ldr	r3, [r7, #4]
 8018ebc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8018ebe:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8018ec2:	687b      	ldr	r3, [r7, #4]
 8018ec4:	635a      	str	r2, [r3, #52]	@ 0x34
      status = HAL_ERROR;
 8018ec6:	2301      	movs	r3, #1
 8018ec8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8018ecc:	687b      	ldr	r3, [r7, #4]
 8018ece:	681b      	ldr	r3, [r3, #0]
 8018ed0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8018ed4:	4618      	mov	r0, r3
 8018ed6:	f002 f847 	bl	801af68 <SDMMC_CmdBlockLength>
 8018eda:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8018edc:	6a3b      	ldr	r3, [r7, #32]
 8018ede:	2b00      	cmp	r3, #0
 8018ee0:	d00c      	beq.n	8018efc <HAL_SD_ConfigWideBusOperation+0x200>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8018ee2:	687b      	ldr	r3, [r7, #4]
 8018ee4:	681b      	ldr	r3, [r3, #0]
 8018ee6:	4a0a      	ldr	r2, [pc, #40]	@ (8018f10 <HAL_SD_ConfigWideBusOperation+0x214>)
 8018ee8:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8018eea:	687b      	ldr	r3, [r7, #4]
 8018eec:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8018eee:	6a3b      	ldr	r3, [r7, #32]
 8018ef0:	431a      	orrs	r2, r3
 8018ef2:	687b      	ldr	r3, [r7, #4]
 8018ef4:	635a      	str	r2, [r3, #52]	@ 0x34
    status = HAL_ERROR;
 8018ef6:	2301      	movs	r3, #1
 8018ef8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8018efc:	687b      	ldr	r3, [r7, #4]
 8018efe:	2201      	movs	r2, #1
 8018f00:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return status;
 8018f04:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8018f08:	4618      	mov	r0, r3
 8018f0a:	372c      	adds	r7, #44	@ 0x2c
 8018f0c:	46bd      	mov	sp, r7
 8018f0e:	bd90      	pop	{r4, r7, pc}
 8018f10:	1fe00fff 	.word	0x1fe00fff
 8018f14:	55e63b89 	.word	0x55e63b89
 8018f18:	02faf080 	.word	0x02faf080
 8018f1c:	017d7840 	.word	0x017d7840

08018f20 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8018f20:	b580      	push	{r7, lr}
 8018f22:	b086      	sub	sp, #24
 8018f24:	af00      	add	r7, sp, #0
 8018f26:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8018f28:	2300      	movs	r3, #0
 8018f2a:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8018f2c:	f107 030c 	add.w	r3, r7, #12
 8018f30:	4619      	mov	r1, r3
 8018f32:	6878      	ldr	r0, [r7, #4]
 8018f34:	f000 fa40 	bl	80193b8 <SD_SendStatus>
 8018f38:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8018f3a:	697b      	ldr	r3, [r7, #20]
 8018f3c:	2b00      	cmp	r3, #0
 8018f3e:	d005      	beq.n	8018f4c <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8018f40:	687b      	ldr	r3, [r7, #4]
 8018f42:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8018f44:	697b      	ldr	r3, [r7, #20]
 8018f46:	431a      	orrs	r2, r3
 8018f48:	687b      	ldr	r3, [r7, #4]
 8018f4a:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8018f4c:	68fb      	ldr	r3, [r7, #12]
 8018f4e:	0a5b      	lsrs	r3, r3, #9
 8018f50:	f003 030f 	and.w	r3, r3, #15
 8018f54:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8018f56:	693b      	ldr	r3, [r7, #16]
}
 8018f58:	4618      	mov	r0, r3
 8018f5a:	3718      	adds	r7, #24
 8018f5c:	46bd      	mov	sp, r7
 8018f5e:	bd80      	pop	{r7, pc}

08018f60 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8018f60:	b580      	push	{r7, lr}
 8018f62:	b090      	sub	sp, #64	@ 0x40
 8018f64:	af00      	add	r7, sp, #0
 8018f66:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 8018f68:	2300      	movs	r3, #0
 8018f6a:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 8018f6c:	f7f8 fc00 	bl	8011770 <HAL_GetTick>
 8018f70:	63f8      	str	r0, [r7, #60]	@ 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 8018f72:	687b      	ldr	r3, [r7, #4]
 8018f74:	681b      	ldr	r3, [r3, #0]
 8018f76:	4618      	mov	r0, r3
 8018f78:	f001 ff71 	bl	801ae5e <SDMMC_GetPowerState>
 8018f7c:	4603      	mov	r3, r0
 8018f7e:	2b00      	cmp	r3, #0
 8018f80:	d102      	bne.n	8018f88 <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8018f82:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8018f86:	e0b5      	b.n	80190f4 <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 8018f88:	687b      	ldr	r3, [r7, #4]
 8018f8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8018f8c:	2b03      	cmp	r3, #3
 8018f8e:	d02e      	beq.n	8018fee <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8018f90:	687b      	ldr	r3, [r7, #4]
 8018f92:	681b      	ldr	r3, [r3, #0]
 8018f94:	4618      	mov	r0, r3
 8018f96:	f002 f9bc 	bl	801b312 <SDMMC_CmdSendCID>
 8018f9a:	63b8      	str	r0, [r7, #56]	@ 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 8018f9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018f9e:	2b00      	cmp	r3, #0
 8018fa0:	d001      	beq.n	8018fa6 <SD_InitCard+0x46>
    {
      return errorstate;
 8018fa2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018fa4:	e0a6      	b.n	80190f4 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8018fa6:	687b      	ldr	r3, [r7, #4]
 8018fa8:	681b      	ldr	r3, [r3, #0]
 8018faa:	2100      	movs	r1, #0
 8018fac:	4618      	mov	r0, r3
 8018fae:	f001 ff9c 	bl	801aeea <SDMMC_GetResponse>
 8018fb2:	4602      	mov	r2, r0
 8018fb4:	687b      	ldr	r3, [r7, #4]
 8018fb6:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8018fb8:	687b      	ldr	r3, [r7, #4]
 8018fba:	681b      	ldr	r3, [r3, #0]
 8018fbc:	2104      	movs	r1, #4
 8018fbe:	4618      	mov	r0, r3
 8018fc0:	f001 ff93 	bl	801aeea <SDMMC_GetResponse>
 8018fc4:	4602      	mov	r2, r0
 8018fc6:	687b      	ldr	r3, [r7, #4]
 8018fc8:	671a      	str	r2, [r3, #112]	@ 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8018fca:	687b      	ldr	r3, [r7, #4]
 8018fcc:	681b      	ldr	r3, [r3, #0]
 8018fce:	2108      	movs	r1, #8
 8018fd0:	4618      	mov	r0, r3
 8018fd2:	f001 ff8a 	bl	801aeea <SDMMC_GetResponse>
 8018fd6:	4602      	mov	r2, r0
 8018fd8:	687b      	ldr	r3, [r7, #4]
 8018fda:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8018fdc:	687b      	ldr	r3, [r7, #4]
 8018fde:	681b      	ldr	r3, [r3, #0]
 8018fe0:	210c      	movs	r1, #12
 8018fe2:	4618      	mov	r0, r3
 8018fe4:	f001 ff81 	bl	801aeea <SDMMC_GetResponse>
 8018fe8:	4602      	mov	r2, r0
 8018fea:	687b      	ldr	r3, [r7, #4]
 8018fec:	679a      	str	r2, [r3, #120]	@ 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 8018fee:	687b      	ldr	r3, [r7, #4]
 8018ff0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8018ff2:	2b03      	cmp	r3, #3
 8018ff4:	d01d      	beq.n	8019032 <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 8018ff6:	e019      	b.n	801902c <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8018ff8:	687b      	ldr	r3, [r7, #4]
 8018ffa:	681b      	ldr	r3, [r3, #0]
 8018ffc:	f107 020a 	add.w	r2, r7, #10
 8019000:	4611      	mov	r1, r2
 8019002:	4618      	mov	r0, r3
 8019004:	f002 f9c4 	bl	801b390 <SDMMC_CmdSetRelAdd>
 8019008:	63b8      	str	r0, [r7, #56]	@ 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 801900a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801900c:	2b00      	cmp	r3, #0
 801900e:	d001      	beq.n	8019014 <SD_InitCard+0xb4>
      {
        return errorstate;
 8019010:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019012:	e06f      	b.n	80190f4 <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 8019014:	f7f8 fbac 	bl	8011770 <HAL_GetTick>
 8019018:	4602      	mov	r2, r0
 801901a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801901c:	1ad3      	subs	r3, r2, r3
 801901e:	f241 3287 	movw	r2, #4999	@ 0x1387
 8019022:	4293      	cmp	r3, r2
 8019024:	d902      	bls.n	801902c <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 8019026:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 801902a:	e063      	b.n	80190f4 <SD_InitCard+0x194>
    while (sd_rca == 0U)
 801902c:	897b      	ldrh	r3, [r7, #10]
 801902e:	2b00      	cmp	r3, #0
 8019030:	d0e2      	beq.n	8018ff8 <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 8019032:	687b      	ldr	r3, [r7, #4]
 8019034:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8019036:	2b03      	cmp	r3, #3
 8019038:	d036      	beq.n	80190a8 <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 801903a:	897b      	ldrh	r3, [r7, #10]
 801903c:	461a      	mov	r2, r3
 801903e:	687b      	ldr	r3, [r7, #4]
 8019040:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8019042:	687b      	ldr	r3, [r7, #4]
 8019044:	681a      	ldr	r2, [r3, #0]
 8019046:	687b      	ldr	r3, [r7, #4]
 8019048:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801904a:	041b      	lsls	r3, r3, #16
 801904c:	4619      	mov	r1, r3
 801904e:	4610      	mov	r0, r2
 8019050:	f002 f97e 	bl	801b350 <SDMMC_CmdSendCSD>
 8019054:	63b8      	str	r0, [r7, #56]	@ 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 8019056:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019058:	2b00      	cmp	r3, #0
 801905a:	d001      	beq.n	8019060 <SD_InitCard+0x100>
    {
      return errorstate;
 801905c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801905e:	e049      	b.n	80190f4 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8019060:	687b      	ldr	r3, [r7, #4]
 8019062:	681b      	ldr	r3, [r3, #0]
 8019064:	2100      	movs	r1, #0
 8019066:	4618      	mov	r0, r3
 8019068:	f001 ff3f 	bl	801aeea <SDMMC_GetResponse>
 801906c:	4602      	mov	r2, r0
 801906e:	687b      	ldr	r3, [r7, #4]
 8019070:	65da      	str	r2, [r3, #92]	@ 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8019072:	687b      	ldr	r3, [r7, #4]
 8019074:	681b      	ldr	r3, [r3, #0]
 8019076:	2104      	movs	r1, #4
 8019078:	4618      	mov	r0, r3
 801907a:	f001 ff36 	bl	801aeea <SDMMC_GetResponse>
 801907e:	4602      	mov	r2, r0
 8019080:	687b      	ldr	r3, [r7, #4]
 8019082:	661a      	str	r2, [r3, #96]	@ 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8019084:	687b      	ldr	r3, [r7, #4]
 8019086:	681b      	ldr	r3, [r3, #0]
 8019088:	2108      	movs	r1, #8
 801908a:	4618      	mov	r0, r3
 801908c:	f001 ff2d 	bl	801aeea <SDMMC_GetResponse>
 8019090:	4602      	mov	r2, r0
 8019092:	687b      	ldr	r3, [r7, #4]
 8019094:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8019096:	687b      	ldr	r3, [r7, #4]
 8019098:	681b      	ldr	r3, [r3, #0]
 801909a:	210c      	movs	r1, #12
 801909c:	4618      	mov	r0, r3
 801909e:	f001 ff24 	bl	801aeea <SDMMC_GetResponse>
 80190a2:	4602      	mov	r2, r0
 80190a4:	687b      	ldr	r3, [r7, #4]
 80190a6:	669a      	str	r2, [r3, #104]	@ 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 80190a8:	687b      	ldr	r3, [r7, #4]
 80190aa:	681b      	ldr	r3, [r3, #0]
 80190ac:	2104      	movs	r1, #4
 80190ae:	4618      	mov	r0, r3
 80190b0:	f001 ff1b 	bl	801aeea <SDMMC_GetResponse>
 80190b4:	4603      	mov	r3, r0
 80190b6:	0d1a      	lsrs	r2, r3, #20
 80190b8:	687b      	ldr	r3, [r7, #4]
 80190ba:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80190bc:	f107 030c 	add.w	r3, r7, #12
 80190c0:	4619      	mov	r1, r3
 80190c2:	6878      	ldr	r0, [r7, #4]
 80190c4:	f7ff fb8c 	bl	80187e0 <HAL_SD_GetCardCSD>
 80190c8:	4603      	mov	r3, r0
 80190ca:	2b00      	cmp	r3, #0
 80190cc:	d002      	beq.n	80190d4 <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80190ce:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80190d2:	e00f      	b.n	80190f4 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80190d4:	687b      	ldr	r3, [r7, #4]
 80190d6:	681a      	ldr	r2, [r3, #0]
 80190d8:	687b      	ldr	r3, [r7, #4]
 80190da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80190dc:	041b      	lsls	r3, r3, #16
 80190de:	4619      	mov	r1, r3
 80190e0:	4610      	mov	r0, r2
 80190e2:	f002 f82d 	bl	801b140 <SDMMC_CmdSelDesel>
 80190e6:	63b8      	str	r0, [r7, #56]	@ 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 80190e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80190ea:	2b00      	cmp	r3, #0
 80190ec:	d001      	beq.n	80190f2 <SD_InitCard+0x192>
  {
    return errorstate;
 80190ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80190f0:	e000      	b.n	80190f4 <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 80190f2:	2300      	movs	r3, #0
}
 80190f4:	4618      	mov	r0, r3
 80190f6:	3740      	adds	r7, #64	@ 0x40
 80190f8:	46bd      	mov	sp, r7
 80190fa:	bd80      	pop	{r7, pc}

080190fc <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 80190fc:	b580      	push	{r7, lr}
 80190fe:	b086      	sub	sp, #24
 8019100:	af00      	add	r7, sp, #0
 8019102:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8019104:	2300      	movs	r3, #0
 8019106:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 8019108:	2300      	movs	r3, #0
 801910a:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 801910c:	2300      	movs	r3, #0
 801910e:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8019110:	687b      	ldr	r3, [r7, #4]
 8019112:	681b      	ldr	r3, [r3, #0]
 8019114:	4618      	mov	r0, r3
 8019116:	f002 f836 	bl	801b186 <SDMMC_CmdGoIdleState>
 801911a:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 801911c:	68fb      	ldr	r3, [r7, #12]
 801911e:	2b00      	cmp	r3, #0
 8019120:	d001      	beq.n	8019126 <SD_PowerON+0x2a>
  {
    return errorstate;
 8019122:	68fb      	ldr	r3, [r7, #12]
 8019124:	e072      	b.n	801920c <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8019126:	687b      	ldr	r3, [r7, #4]
 8019128:	681b      	ldr	r3, [r3, #0]
 801912a:	4618      	mov	r0, r3
 801912c:	f002 f849 	bl	801b1c2 <SDMMC_CmdOperCond>
 8019130:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 8019132:	68fb      	ldr	r3, [r7, #12]
 8019134:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8019138:	d10d      	bne.n	8019156 <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 801913a:	687b      	ldr	r3, [r7, #4]
 801913c:	2200      	movs	r2, #0
 801913e:	63da      	str	r2, [r3, #60]	@ 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8019140:	687b      	ldr	r3, [r7, #4]
 8019142:	681b      	ldr	r3, [r3, #0]
 8019144:	4618      	mov	r0, r3
 8019146:	f002 f81e 	bl	801b186 <SDMMC_CmdGoIdleState>
 801914a:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 801914c:	68fb      	ldr	r3, [r7, #12]
 801914e:	2b00      	cmp	r3, #0
 8019150:	d004      	beq.n	801915c <SD_PowerON+0x60>
    {
      return errorstate;
 8019152:	68fb      	ldr	r3, [r7, #12]
 8019154:	e05a      	b.n	801920c <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8019156:	687b      	ldr	r3, [r7, #4]
 8019158:	2201      	movs	r2, #1
 801915a:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 801915c:	687b      	ldr	r3, [r7, #4]
 801915e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8019160:	2b01      	cmp	r3, #1
 8019162:	d137      	bne.n	80191d4 <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8019164:	687b      	ldr	r3, [r7, #4]
 8019166:	681b      	ldr	r3, [r3, #0]
 8019168:	2100      	movs	r1, #0
 801916a:	4618      	mov	r0, r3
 801916c:	f002 f849 	bl	801b202 <SDMMC_CmdAppCommand>
 8019170:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8019172:	68fb      	ldr	r3, [r7, #12]
 8019174:	2b00      	cmp	r3, #0
 8019176:	d02d      	beq.n	80191d4 <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8019178:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 801917c:	e046      	b.n	801920c <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 801917e:	687b      	ldr	r3, [r7, #4]
 8019180:	681b      	ldr	r3, [r3, #0]
 8019182:	2100      	movs	r1, #0
 8019184:	4618      	mov	r0, r3
 8019186:	f002 f83c 	bl	801b202 <SDMMC_CmdAppCommand>
 801918a:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 801918c:	68fb      	ldr	r3, [r7, #12]
 801918e:	2b00      	cmp	r3, #0
 8019190:	d001      	beq.n	8019196 <SD_PowerON+0x9a>
    {
      return errorstate;
 8019192:	68fb      	ldr	r3, [r7, #12]
 8019194:	e03a      	b.n	801920c <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 8019196:	687b      	ldr	r3, [r7, #4]
 8019198:	681b      	ldr	r3, [r3, #0]
 801919a:	491e      	ldr	r1, [pc, #120]	@ (8019214 <SD_PowerON+0x118>)
 801919c:	4618      	mov	r0, r3
 801919e:	f002 f853 	bl	801b248 <SDMMC_CmdAppOperCommand>
 80191a2:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 80191a4:	68fb      	ldr	r3, [r7, #12]
 80191a6:	2b00      	cmp	r3, #0
 80191a8:	d002      	beq.n	80191b0 <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80191aa:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80191ae:	e02d      	b.n	801920c <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80191b0:	687b      	ldr	r3, [r7, #4]
 80191b2:	681b      	ldr	r3, [r3, #0]
 80191b4:	2100      	movs	r1, #0
 80191b6:	4618      	mov	r0, r3
 80191b8:	f001 fe97 	bl	801aeea <SDMMC_GetResponse>
 80191bc:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 80191be:	697b      	ldr	r3, [r7, #20]
 80191c0:	0fdb      	lsrs	r3, r3, #31
 80191c2:	2b01      	cmp	r3, #1
 80191c4:	d101      	bne.n	80191ca <SD_PowerON+0xce>
 80191c6:	2301      	movs	r3, #1
 80191c8:	e000      	b.n	80191cc <SD_PowerON+0xd0>
 80191ca:	2300      	movs	r3, #0
 80191cc:	613b      	str	r3, [r7, #16]

    count++;
 80191ce:	68bb      	ldr	r3, [r7, #8]
 80191d0:	3301      	adds	r3, #1
 80191d2:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80191d4:	68bb      	ldr	r3, [r7, #8]
 80191d6:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80191da:	4293      	cmp	r3, r2
 80191dc:	d802      	bhi.n	80191e4 <SD_PowerON+0xe8>
 80191de:	693b      	ldr	r3, [r7, #16]
 80191e0:	2b00      	cmp	r3, #0
 80191e2:	d0cc      	beq.n	801917e <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 80191e4:	68bb      	ldr	r3, [r7, #8]
 80191e6:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80191ea:	4293      	cmp	r3, r2
 80191ec:	d902      	bls.n	80191f4 <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80191ee:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80191f2:	e00b      	b.n	801920c <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 80191f4:	687b      	ldr	r3, [r7, #4]
 80191f6:	2200      	movs	r2, #0
 80191f8:	639a      	str	r2, [r3, #56]	@ 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 80191fa:	697b      	ldr	r3, [r7, #20]
 80191fc:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8019200:	2b00      	cmp	r3, #0
 8019202:	d002      	beq.n	801920a <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8019204:	687b      	ldr	r3, [r7, #4]
 8019206:	2201      	movs	r2, #1
 8019208:	639a      	str	r2, [r3, #56]	@ 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 801920a:	2300      	movs	r3, #0
}
 801920c:	4618      	mov	r0, r3
 801920e:	3718      	adds	r7, #24
 8019210:	46bd      	mov	sp, r7
 8019212:	bd80      	pop	{r7, pc}
 8019214:	c1100000 	.word	0xc1100000

08019218 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 8019218:	b580      	push	{r7, lr}
 801921a:	b08c      	sub	sp, #48	@ 0x30
 801921c:	af00      	add	r7, sp, #0
 801921e:	6078      	str	r0, [r7, #4]
 8019220:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8019222:	f7f8 faa5 	bl	8011770 <HAL_GetTick>
 8019226:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 8019228:	683b      	ldr	r3, [r7, #0]
 801922a:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 801922c:	687b      	ldr	r3, [r7, #4]
 801922e:	681b      	ldr	r3, [r3, #0]
 8019230:	2100      	movs	r1, #0
 8019232:	4618      	mov	r0, r3
 8019234:	f001 fe59 	bl	801aeea <SDMMC_GetResponse>
 8019238:	4603      	mov	r3, r0
 801923a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801923e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8019242:	d102      	bne.n	801924a <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8019244:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8019248:	e0b0      	b.n	80193ac <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 801924a:	687b      	ldr	r3, [r7, #4]
 801924c:	681b      	ldr	r3, [r3, #0]
 801924e:	2140      	movs	r1, #64	@ 0x40
 8019250:	4618      	mov	r0, r3
 8019252:	f001 fe89 	bl	801af68 <SDMMC_CmdBlockLength>
 8019256:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8019258:	6a3b      	ldr	r3, [r7, #32]
 801925a:	2b00      	cmp	r3, #0
 801925c:	d005      	beq.n	801926a <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 801925e:	687b      	ldr	r3, [r7, #4]
 8019260:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8019262:	687b      	ldr	r3, [r7, #4]
 8019264:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 8019266:	6a3b      	ldr	r3, [r7, #32]
 8019268:	e0a0      	b.n	80193ac <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 801926a:	687b      	ldr	r3, [r7, #4]
 801926c:	681a      	ldr	r2, [r3, #0]
 801926e:	687b      	ldr	r3, [r7, #4]
 8019270:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8019272:	041b      	lsls	r3, r3, #16
 8019274:	4619      	mov	r1, r3
 8019276:	4610      	mov	r0, r2
 8019278:	f001 ffc3 	bl	801b202 <SDMMC_CmdAppCommand>
 801927c:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 801927e:	6a3b      	ldr	r3, [r7, #32]
 8019280:	2b00      	cmp	r3, #0
 8019282:	d005      	beq.n	8019290 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8019284:	687b      	ldr	r3, [r7, #4]
 8019286:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8019288:	687b      	ldr	r3, [r7, #4]
 801928a:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 801928c:	6a3b      	ldr	r3, [r7, #32]
 801928e:	e08d      	b.n	80193ac <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8019290:	f04f 33ff 	mov.w	r3, #4294967295
 8019294:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 8019296:	2340      	movs	r3, #64	@ 0x40
 8019298:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 801929a:	2360      	movs	r3, #96	@ 0x60
 801929c:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 801929e:	2302      	movs	r3, #2
 80192a0:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80192a2:	2300      	movs	r3, #0
 80192a4:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 80192a6:	2301      	movs	r3, #1
 80192a8:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 80192aa:	687b      	ldr	r3, [r7, #4]
 80192ac:	681b      	ldr	r3, [r3, #0]
 80192ae:	f107 0208 	add.w	r2, r7, #8
 80192b2:	4611      	mov	r1, r2
 80192b4:	4618      	mov	r0, r3
 80192b6:	f001 fe2b 	bl	801af10 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 80192ba:	687b      	ldr	r3, [r7, #4]
 80192bc:	681b      	ldr	r3, [r3, #0]
 80192be:	4618      	mov	r0, r3
 80192c0:	f002 f8ab 	bl	801b41a <SDMMC_CmdStatusRegister>
 80192c4:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 80192c6:	6a3b      	ldr	r3, [r7, #32]
 80192c8:	2b00      	cmp	r3, #0
 80192ca:	d02b      	beq.n	8019324 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 80192cc:	687b      	ldr	r3, [r7, #4]
 80192ce:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80192d0:	687b      	ldr	r3, [r7, #4]
 80192d2:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 80192d4:	6a3b      	ldr	r3, [r7, #32]
 80192d6:	e069      	b.n	80193ac <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 80192d8:	687b      	ldr	r3, [r7, #4]
 80192da:	681b      	ldr	r3, [r3, #0]
 80192dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80192de:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80192e2:	2b00      	cmp	r3, #0
 80192e4:	d013      	beq.n	801930e <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 80192e6:	2300      	movs	r3, #0
 80192e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80192ea:	e00d      	b.n	8019308 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 80192ec:	687b      	ldr	r3, [r7, #4]
 80192ee:	681b      	ldr	r3, [r3, #0]
 80192f0:	4618      	mov	r0, r3
 80192f2:	f001 fd85 	bl	801ae00 <SDMMC_ReadFIFO>
 80192f6:	4602      	mov	r2, r0
 80192f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80192fa:	601a      	str	r2, [r3, #0]
        pData++;
 80192fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80192fe:	3304      	adds	r3, #4
 8019300:	62bb      	str	r3, [r7, #40]	@ 0x28
      for (count = 0U; count < 8U; count++)
 8019302:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019304:	3301      	adds	r3, #1
 8019306:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8019308:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801930a:	2b07      	cmp	r3, #7
 801930c:	d9ee      	bls.n	80192ec <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 801930e:	f7f8 fa2f 	bl	8011770 <HAL_GetTick>
 8019312:	4602      	mov	r2, r0
 8019314:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019316:	1ad3      	subs	r3, r2, r3
 8019318:	f1b3 3fff 	cmp.w	r3, #4294967295
 801931c:	d102      	bne.n	8019324 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 801931e:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8019322:	e043      	b.n	80193ac <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8019324:	687b      	ldr	r3, [r7, #4]
 8019326:	681b      	ldr	r3, [r3, #0]
 8019328:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801932a:	f403 7395 	and.w	r3, r3, #298	@ 0x12a
 801932e:	2b00      	cmp	r3, #0
 8019330:	d0d2      	beq.n	80192d8 <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8019332:	687b      	ldr	r3, [r7, #4]
 8019334:	681b      	ldr	r3, [r3, #0]
 8019336:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8019338:	f003 0308 	and.w	r3, r3, #8
 801933c:	2b00      	cmp	r3, #0
 801933e:	d001      	beq.n	8019344 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8019340:	2308      	movs	r3, #8
 8019342:	e033      	b.n	80193ac <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8019344:	687b      	ldr	r3, [r7, #4]
 8019346:	681b      	ldr	r3, [r3, #0]
 8019348:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801934a:	f003 0302 	and.w	r3, r3, #2
 801934e:	2b00      	cmp	r3, #0
 8019350:	d001      	beq.n	8019356 <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8019352:	2302      	movs	r3, #2
 8019354:	e02a      	b.n	80193ac <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8019356:	687b      	ldr	r3, [r7, #4]
 8019358:	681b      	ldr	r3, [r3, #0]
 801935a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801935c:	f003 0320 	and.w	r3, r3, #32
 8019360:	2b00      	cmp	r3, #0
 8019362:	d017      	beq.n	8019394 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 8019364:	2320      	movs	r3, #32
 8019366:	e021      	b.n	80193ac <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 8019368:	687b      	ldr	r3, [r7, #4]
 801936a:	681b      	ldr	r3, [r3, #0]
 801936c:	4618      	mov	r0, r3
 801936e:	f001 fd47 	bl	801ae00 <SDMMC_ReadFIFO>
 8019372:	4602      	mov	r2, r0
 8019374:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019376:	601a      	str	r2, [r3, #0]
    pData++;
 8019378:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801937a:	3304      	adds	r3, #4
 801937c:	62bb      	str	r3, [r7, #40]	@ 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 801937e:	f7f8 f9f7 	bl	8011770 <HAL_GetTick>
 8019382:	4602      	mov	r2, r0
 8019384:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019386:	1ad3      	subs	r3, r2, r3
 8019388:	f1b3 3fff 	cmp.w	r3, #4294967295
 801938c:	d102      	bne.n	8019394 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 801938e:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8019392:	e00b      	b.n	80193ac <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 8019394:	687b      	ldr	r3, [r7, #4]
 8019396:	681b      	ldr	r3, [r3, #0]
 8019398:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801939a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 801939e:	2b00      	cmp	r3, #0
 80193a0:	d1e2      	bne.n	8019368 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80193a2:	687b      	ldr	r3, [r7, #4]
 80193a4:	681b      	ldr	r3, [r3, #0]
 80193a6:	4a03      	ldr	r2, [pc, #12]	@ (80193b4 <SD_SendSDStatus+0x19c>)
 80193a8:	639a      	str	r2, [r3, #56]	@ 0x38

  return HAL_SD_ERROR_NONE;
 80193aa:	2300      	movs	r3, #0
}
 80193ac:	4618      	mov	r0, r3
 80193ae:	3730      	adds	r7, #48	@ 0x30
 80193b0:	46bd      	mov	sp, r7
 80193b2:	bd80      	pop	{r7, pc}
 80193b4:	18000f3a 	.word	0x18000f3a

080193b8 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 80193b8:	b580      	push	{r7, lr}
 80193ba:	b084      	sub	sp, #16
 80193bc:	af00      	add	r7, sp, #0
 80193be:	6078      	str	r0, [r7, #4]
 80193c0:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 80193c2:	683b      	ldr	r3, [r7, #0]
 80193c4:	2b00      	cmp	r3, #0
 80193c6:	d102      	bne.n	80193ce <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 80193c8:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80193cc:	e018      	b.n	8019400 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80193ce:	687b      	ldr	r3, [r7, #4]
 80193d0:	681a      	ldr	r2, [r3, #0]
 80193d2:	687b      	ldr	r3, [r7, #4]
 80193d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80193d6:	041b      	lsls	r3, r3, #16
 80193d8:	4619      	mov	r1, r3
 80193da:	4610      	mov	r0, r2
 80193dc:	f001 fffa 	bl	801b3d4 <SDMMC_CmdSendStatus>
 80193e0:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 80193e2:	68fb      	ldr	r3, [r7, #12]
 80193e4:	2b00      	cmp	r3, #0
 80193e6:	d001      	beq.n	80193ec <SD_SendStatus+0x34>
  {
    return errorstate;
 80193e8:	68fb      	ldr	r3, [r7, #12]
 80193ea:	e009      	b.n	8019400 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80193ec:	687b      	ldr	r3, [r7, #4]
 80193ee:	681b      	ldr	r3, [r3, #0]
 80193f0:	2100      	movs	r1, #0
 80193f2:	4618      	mov	r0, r3
 80193f4:	f001 fd79 	bl	801aeea <SDMMC_GetResponse>
 80193f8:	4602      	mov	r2, r0
 80193fa:	683b      	ldr	r3, [r7, #0]
 80193fc:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 80193fe:	2300      	movs	r3, #0
}
 8019400:	4618      	mov	r0, r3
 8019402:	3710      	adds	r7, #16
 8019404:	46bd      	mov	sp, r7
 8019406:	bd80      	pop	{r7, pc}

08019408 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8019408:	b580      	push	{r7, lr}
 801940a:	b086      	sub	sp, #24
 801940c:	af00      	add	r7, sp, #0
 801940e:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8019410:	2300      	movs	r3, #0
 8019412:	60fb      	str	r3, [r7, #12]
 8019414:	2300      	movs	r3, #0
 8019416:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8019418:	687b      	ldr	r3, [r7, #4]
 801941a:	681b      	ldr	r3, [r3, #0]
 801941c:	2100      	movs	r1, #0
 801941e:	4618      	mov	r0, r3
 8019420:	f001 fd63 	bl	801aeea <SDMMC_GetResponse>
 8019424:	4603      	mov	r3, r0
 8019426:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801942a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 801942e:	d102      	bne.n	8019436 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8019430:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8019434:	e02f      	b.n	8019496 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8019436:	f107 030c 	add.w	r3, r7, #12
 801943a:	4619      	mov	r1, r3
 801943c:	6878      	ldr	r0, [r7, #4]
 801943e:	f000 f879 	bl	8019534 <SD_FindSCR>
 8019442:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8019444:	697b      	ldr	r3, [r7, #20]
 8019446:	2b00      	cmp	r3, #0
 8019448:	d001      	beq.n	801944e <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 801944a:	697b      	ldr	r3, [r7, #20]
 801944c:	e023      	b.n	8019496 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 801944e:	693b      	ldr	r3, [r7, #16]
 8019450:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8019454:	2b00      	cmp	r3, #0
 8019456:	d01c      	beq.n	8019492 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8019458:	687b      	ldr	r3, [r7, #4]
 801945a:	681a      	ldr	r2, [r3, #0]
 801945c:	687b      	ldr	r3, [r7, #4]
 801945e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8019460:	041b      	lsls	r3, r3, #16
 8019462:	4619      	mov	r1, r3
 8019464:	4610      	mov	r0, r2
 8019466:	f001 fecc 	bl	801b202 <SDMMC_CmdAppCommand>
 801946a:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 801946c:	697b      	ldr	r3, [r7, #20]
 801946e:	2b00      	cmp	r3, #0
 8019470:	d001      	beq.n	8019476 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8019472:	697b      	ldr	r3, [r7, #20]
 8019474:	e00f      	b.n	8019496 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8019476:	687b      	ldr	r3, [r7, #4]
 8019478:	681b      	ldr	r3, [r3, #0]
 801947a:	2102      	movs	r1, #2
 801947c:	4618      	mov	r0, r3
 801947e:	f001 ff03 	bl	801b288 <SDMMC_CmdBusWidth>
 8019482:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8019484:	697b      	ldr	r3, [r7, #20]
 8019486:	2b00      	cmp	r3, #0
 8019488:	d001      	beq.n	801948e <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 801948a:	697b      	ldr	r3, [r7, #20]
 801948c:	e003      	b.n	8019496 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 801948e:	2300      	movs	r3, #0
 8019490:	e001      	b.n	8019496 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8019492:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 8019496:	4618      	mov	r0, r3
 8019498:	3718      	adds	r7, #24
 801949a:	46bd      	mov	sp, r7
 801949c:	bd80      	pop	{r7, pc}

0801949e <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 801949e:	b580      	push	{r7, lr}
 80194a0:	b086      	sub	sp, #24
 80194a2:	af00      	add	r7, sp, #0
 80194a4:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 80194a6:	2300      	movs	r3, #0
 80194a8:	60fb      	str	r3, [r7, #12]
 80194aa:	2300      	movs	r3, #0
 80194ac:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80194ae:	687b      	ldr	r3, [r7, #4]
 80194b0:	681b      	ldr	r3, [r3, #0]
 80194b2:	2100      	movs	r1, #0
 80194b4:	4618      	mov	r0, r3
 80194b6:	f001 fd18 	bl	801aeea <SDMMC_GetResponse>
 80194ba:	4603      	mov	r3, r0
 80194bc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80194c0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80194c4:	d102      	bne.n	80194cc <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80194c6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80194ca:	e02f      	b.n	801952c <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80194cc:	f107 030c 	add.w	r3, r7, #12
 80194d0:	4619      	mov	r1, r3
 80194d2:	6878      	ldr	r0, [r7, #4]
 80194d4:	f000 f82e 	bl	8019534 <SD_FindSCR>
 80194d8:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 80194da:	697b      	ldr	r3, [r7, #20]
 80194dc:	2b00      	cmp	r3, #0
 80194de:	d001      	beq.n	80194e4 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 80194e0:	697b      	ldr	r3, [r7, #20]
 80194e2:	e023      	b.n	801952c <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80194e4:	693b      	ldr	r3, [r7, #16]
 80194e6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80194ea:	2b00      	cmp	r3, #0
 80194ec:	d01c      	beq.n	8019528 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80194ee:	687b      	ldr	r3, [r7, #4]
 80194f0:	681a      	ldr	r2, [r3, #0]
 80194f2:	687b      	ldr	r3, [r7, #4]
 80194f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80194f6:	041b      	lsls	r3, r3, #16
 80194f8:	4619      	mov	r1, r3
 80194fa:	4610      	mov	r0, r2
 80194fc:	f001 fe81 	bl	801b202 <SDMMC_CmdAppCommand>
 8019500:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8019502:	697b      	ldr	r3, [r7, #20]
 8019504:	2b00      	cmp	r3, #0
 8019506:	d001      	beq.n	801950c <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8019508:	697b      	ldr	r3, [r7, #20]
 801950a:	e00f      	b.n	801952c <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 801950c:	687b      	ldr	r3, [r7, #4]
 801950e:	681b      	ldr	r3, [r3, #0]
 8019510:	2100      	movs	r1, #0
 8019512:	4618      	mov	r0, r3
 8019514:	f001 feb8 	bl	801b288 <SDMMC_CmdBusWidth>
 8019518:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 801951a:	697b      	ldr	r3, [r7, #20]
 801951c:	2b00      	cmp	r3, #0
 801951e:	d001      	beq.n	8019524 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8019520:	697b      	ldr	r3, [r7, #20]
 8019522:	e003      	b.n	801952c <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8019524:	2300      	movs	r3, #0
 8019526:	e001      	b.n	801952c <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8019528:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 801952c:	4618      	mov	r0, r3
 801952e:	3718      	adds	r7, #24
 8019530:	46bd      	mov	sp, r7
 8019532:	bd80      	pop	{r7, pc}

08019534 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8019534:	b580      	push	{r7, lr}
 8019536:	b08e      	sub	sp, #56	@ 0x38
 8019538:	af00      	add	r7, sp, #0
 801953a:	6078      	str	r0, [r7, #4]
 801953c:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 801953e:	f7f8 f917 	bl	8011770 <HAL_GetTick>
 8019542:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t index = 0U;
 8019544:	2300      	movs	r3, #0
 8019546:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 8019548:	2300      	movs	r3, #0
 801954a:	60bb      	str	r3, [r7, #8]
 801954c:	2300      	movs	r3, #0
 801954e:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8019550:	683b      	ldr	r3, [r7, #0]
 8019552:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8019554:	687b      	ldr	r3, [r7, #4]
 8019556:	681b      	ldr	r3, [r3, #0]
 8019558:	2108      	movs	r1, #8
 801955a:	4618      	mov	r0, r3
 801955c:	f001 fd04 	bl	801af68 <SDMMC_CmdBlockLength>
 8019560:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8019562:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019564:	2b00      	cmp	r3, #0
 8019566:	d001      	beq.n	801956c <SD_FindSCR+0x38>
  {
    return errorstate;
 8019568:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801956a:	e0ad      	b.n	80196c8 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 801956c:	687b      	ldr	r3, [r7, #4]
 801956e:	681a      	ldr	r2, [r3, #0]
 8019570:	687b      	ldr	r3, [r7, #4]
 8019572:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8019574:	041b      	lsls	r3, r3, #16
 8019576:	4619      	mov	r1, r3
 8019578:	4610      	mov	r0, r2
 801957a:	f001 fe42 	bl	801b202 <SDMMC_CmdAppCommand>
 801957e:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8019580:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019582:	2b00      	cmp	r3, #0
 8019584:	d001      	beq.n	801958a <SD_FindSCR+0x56>
  {
    return errorstate;
 8019586:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019588:	e09e      	b.n	80196c8 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 801958a:	f04f 33ff 	mov.w	r3, #4294967295
 801958e:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8019590:	2308      	movs	r3, #8
 8019592:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8019594:	2330      	movs	r3, #48	@ 0x30
 8019596:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8019598:	2302      	movs	r3, #2
 801959a:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 801959c:	2300      	movs	r3, #0
 801959e:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 80195a0:	2301      	movs	r3, #1
 80195a2:	627b      	str	r3, [r7, #36]	@ 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 80195a4:	687b      	ldr	r3, [r7, #4]
 80195a6:	681b      	ldr	r3, [r3, #0]
 80195a8:	f107 0210 	add.w	r2, r7, #16
 80195ac:	4611      	mov	r1, r2
 80195ae:	4618      	mov	r0, r3
 80195b0:	f001 fcae 	bl	801af10 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 80195b4:	687b      	ldr	r3, [r7, #4]
 80195b6:	681b      	ldr	r3, [r3, #0]
 80195b8:	4618      	mov	r0, r3
 80195ba:	f001 fe88 	bl	801b2ce <SDMMC_CmdSendSCR>
 80195be:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 80195c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80195c2:	2b00      	cmp	r3, #0
 80195c4:	d027      	beq.n	8019616 <SD_FindSCR+0xe2>
  {
    return errorstate;
 80195c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80195c8:	e07e      	b.n	80196c8 <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 80195ca:	687b      	ldr	r3, [r7, #4]
 80195cc:	681b      	ldr	r3, [r3, #0]
 80195ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80195d0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80195d4:	2b00      	cmp	r3, #0
 80195d6:	d113      	bne.n	8019600 <SD_FindSCR+0xcc>
 80195d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80195da:	2b00      	cmp	r3, #0
 80195dc:	d110      	bne.n	8019600 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 80195de:	687b      	ldr	r3, [r7, #4]
 80195e0:	681b      	ldr	r3, [r3, #0]
 80195e2:	4618      	mov	r0, r3
 80195e4:	f001 fc0c 	bl	801ae00 <SDMMC_ReadFIFO>
 80195e8:	4603      	mov	r3, r0
 80195ea:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 80195ec:	687b      	ldr	r3, [r7, #4]
 80195ee:	681b      	ldr	r3, [r3, #0]
 80195f0:	4618      	mov	r0, r3
 80195f2:	f001 fc05 	bl	801ae00 <SDMMC_ReadFIFO>
 80195f6:	4603      	mov	r3, r0
 80195f8:	60fb      	str	r3, [r7, #12]
      index++;
 80195fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80195fc:	3301      	adds	r3, #1
 80195fe:	637b      	str	r3, [r7, #52]	@ 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8019600:	f7f8 f8b6 	bl	8011770 <HAL_GetTick>
 8019604:	4602      	mov	r2, r0
 8019606:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019608:	1ad3      	subs	r3, r2, r3
 801960a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801960e:	d102      	bne.n	8019616 <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8019610:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8019614:	e058      	b.n	80196c8 <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 8019616:	687b      	ldr	r3, [r7, #4]
 8019618:	681b      	ldr	r3, [r3, #0]
 801961a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801961c:	f240 532a 	movw	r3, #1322	@ 0x52a
 8019620:	4013      	ands	r3, r2
 8019622:	2b00      	cmp	r3, #0
 8019624:	d0d1      	beq.n	80195ca <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8019626:	687b      	ldr	r3, [r7, #4]
 8019628:	681b      	ldr	r3, [r3, #0]
 801962a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801962c:	f003 0308 	and.w	r3, r3, #8
 8019630:	2b00      	cmp	r3, #0
 8019632:	d005      	beq.n	8019640 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8019634:	687b      	ldr	r3, [r7, #4]
 8019636:	681b      	ldr	r3, [r3, #0]
 8019638:	2208      	movs	r2, #8
 801963a:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 801963c:	2308      	movs	r3, #8
 801963e:	e043      	b.n	80196c8 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8019640:	687b      	ldr	r3, [r7, #4]
 8019642:	681b      	ldr	r3, [r3, #0]
 8019644:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8019646:	f003 0302 	and.w	r3, r3, #2
 801964a:	2b00      	cmp	r3, #0
 801964c:	d005      	beq.n	801965a <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 801964e:	687b      	ldr	r3, [r7, #4]
 8019650:	681b      	ldr	r3, [r3, #0]
 8019652:	2202      	movs	r2, #2
 8019654:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8019656:	2302      	movs	r3, #2
 8019658:	e036      	b.n	80196c8 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 801965a:	687b      	ldr	r3, [r7, #4]
 801965c:	681b      	ldr	r3, [r3, #0]
 801965e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8019660:	f003 0320 	and.w	r3, r3, #32
 8019664:	2b00      	cmp	r3, #0
 8019666:	d005      	beq.n	8019674 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8019668:	687b      	ldr	r3, [r7, #4]
 801966a:	681b      	ldr	r3, [r3, #0]
 801966c:	2220      	movs	r2, #32
 801966e:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8019670:	2320      	movs	r3, #32
 8019672:	e029      	b.n	80196c8 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8019674:	687b      	ldr	r3, [r7, #4]
 8019676:	681b      	ldr	r3, [r3, #0]
 8019678:	4a15      	ldr	r2, [pc, #84]	@ (80196d0 <SD_FindSCR+0x19c>)
 801967a:	639a      	str	r2, [r3, #56]	@ 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 801967c:	68fb      	ldr	r3, [r7, #12]
 801967e:	061a      	lsls	r2, r3, #24
 8019680:	68fb      	ldr	r3, [r7, #12]
 8019682:	021b      	lsls	r3, r3, #8
 8019684:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8019688:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 801968a:	68fb      	ldr	r3, [r7, #12]
 801968c:	0a1b      	lsrs	r3, r3, #8
 801968e:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8019692:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8019694:	68fb      	ldr	r3, [r7, #12]
 8019696:	0e1b      	lsrs	r3, r3, #24
 8019698:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 801969a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801969c:	601a      	str	r2, [r3, #0]
    scr++;
 801969e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80196a0:	3304      	adds	r3, #4
 80196a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 80196a4:	68bb      	ldr	r3, [r7, #8]
 80196a6:	061a      	lsls	r2, r3, #24
 80196a8:	68bb      	ldr	r3, [r7, #8]
 80196aa:	021b      	lsls	r3, r3, #8
 80196ac:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80196b0:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80196b2:	68bb      	ldr	r3, [r7, #8]
 80196b4:	0a1b      	lsrs	r3, r3, #8
 80196b6:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 80196ba:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80196bc:	68bb      	ldr	r3, [r7, #8]
 80196be:	0e1b      	lsrs	r3, r3, #24
 80196c0:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 80196c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80196c4:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 80196c6:	2300      	movs	r3, #0
}
 80196c8:	4618      	mov	r0, r3
 80196ca:	3738      	adds	r7, #56	@ 0x38
 80196cc:	46bd      	mov	sp, r7
 80196ce:	bd80      	pop	{r7, pc}
 80196d0:	18000f3a 	.word	0x18000f3a

080196d4 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 80196d4:	b580      	push	{r7, lr}
 80196d6:	b086      	sub	sp, #24
 80196d8:	af00      	add	r7, sp, #0
 80196da:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pRxBuffPtr;
 80196dc:	687b      	ldr	r3, [r7, #4]
 80196de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80196e0:	613b      	str	r3, [r7, #16]

  if (hsd->RxXferSize >= 32U)
 80196e2:	687b      	ldr	r3, [r7, #4]
 80196e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80196e6:	2b1f      	cmp	r3, #31
 80196e8:	d936      	bls.n	8019758 <SD_Read_IT+0x84>
  {
    /* Read data from SDMMC Rx FIFO */
    for (count = 0U; count < 8U; count++)
 80196ea:	2300      	movs	r3, #0
 80196ec:	617b      	str	r3, [r7, #20]
 80196ee:	e027      	b.n	8019740 <SD_Read_IT+0x6c>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 80196f0:	687b      	ldr	r3, [r7, #4]
 80196f2:	681b      	ldr	r3, [r3, #0]
 80196f4:	4618      	mov	r0, r3
 80196f6:	f001 fb83 	bl	801ae00 <SDMMC_ReadFIFO>
 80196fa:	60f8      	str	r0, [r7, #12]
      *tmp = (uint8_t)(data & 0xFFU);
 80196fc:	68fb      	ldr	r3, [r7, #12]
 80196fe:	b2da      	uxtb	r2, r3
 8019700:	693b      	ldr	r3, [r7, #16]
 8019702:	701a      	strb	r2, [r3, #0]
      tmp++;
 8019704:	693b      	ldr	r3, [r7, #16]
 8019706:	3301      	adds	r3, #1
 8019708:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 801970a:	68fb      	ldr	r3, [r7, #12]
 801970c:	0a1b      	lsrs	r3, r3, #8
 801970e:	b2da      	uxtb	r2, r3
 8019710:	693b      	ldr	r3, [r7, #16]
 8019712:	701a      	strb	r2, [r3, #0]
      tmp++;
 8019714:	693b      	ldr	r3, [r7, #16]
 8019716:	3301      	adds	r3, #1
 8019718:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 801971a:	68fb      	ldr	r3, [r7, #12]
 801971c:	0c1b      	lsrs	r3, r3, #16
 801971e:	b2da      	uxtb	r2, r3
 8019720:	693b      	ldr	r3, [r7, #16]
 8019722:	701a      	strb	r2, [r3, #0]
      tmp++;
 8019724:	693b      	ldr	r3, [r7, #16]
 8019726:	3301      	adds	r3, #1
 8019728:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 801972a:	68fb      	ldr	r3, [r7, #12]
 801972c:	0e1b      	lsrs	r3, r3, #24
 801972e:	b2da      	uxtb	r2, r3
 8019730:	693b      	ldr	r3, [r7, #16]
 8019732:	701a      	strb	r2, [r3, #0]
      tmp++;
 8019734:	693b      	ldr	r3, [r7, #16]
 8019736:	3301      	adds	r3, #1
 8019738:	613b      	str	r3, [r7, #16]
    for (count = 0U; count < 8U; count++)
 801973a:	697b      	ldr	r3, [r7, #20]
 801973c:	3301      	adds	r3, #1
 801973e:	617b      	str	r3, [r7, #20]
 8019740:	697b      	ldr	r3, [r7, #20]
 8019742:	2b07      	cmp	r3, #7
 8019744:	d9d4      	bls.n	80196f0 <SD_Read_IT+0x1c>
    }

    hsd->pRxBuffPtr = tmp;
 8019746:	687b      	ldr	r3, [r7, #4]
 8019748:	693a      	ldr	r2, [r7, #16]
 801974a:	625a      	str	r2, [r3, #36]	@ 0x24
    hsd->RxXferSize -= 32U;
 801974c:	687b      	ldr	r3, [r7, #4]
 801974e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8019750:	f1a3 0220 	sub.w	r2, r3, #32
 8019754:	687b      	ldr	r3, [r7, #4]
 8019756:	629a      	str	r2, [r3, #40]	@ 0x28
  }
}
 8019758:	bf00      	nop
 801975a:	3718      	adds	r7, #24
 801975c:	46bd      	mov	sp, r7
 801975e:	bd80      	pop	{r7, pc}

08019760 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8019760:	b580      	push	{r7, lr}
 8019762:	b086      	sub	sp, #24
 8019764:	af00      	add	r7, sp, #0
 8019766:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  const uint8_t *tmp;

  tmp = hsd->pTxBuffPtr;
 8019768:	687b      	ldr	r3, [r7, #4]
 801976a:	69db      	ldr	r3, [r3, #28]
 801976c:	613b      	str	r3, [r7, #16]

  if (hsd->TxXferSize >= 32U)
 801976e:	687b      	ldr	r3, [r7, #4]
 8019770:	6a1b      	ldr	r3, [r3, #32]
 8019772:	2b1f      	cmp	r3, #31
 8019774:	d93a      	bls.n	80197ec <SD_Write_IT+0x8c>
  {
    /* Write data to SDMMC Tx FIFO */
    for (count = 0U; count < 8U; count++)
 8019776:	2300      	movs	r3, #0
 8019778:	617b      	str	r3, [r7, #20]
 801977a:	e02b      	b.n	80197d4 <SD_Write_IT+0x74>
    {
      data = (uint32_t)(*tmp);
 801977c:	693b      	ldr	r3, [r7, #16]
 801977e:	781b      	ldrb	r3, [r3, #0]
 8019780:	60fb      	str	r3, [r7, #12]
      tmp++;
 8019782:	693b      	ldr	r3, [r7, #16]
 8019784:	3301      	adds	r3, #1
 8019786:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8019788:	693b      	ldr	r3, [r7, #16]
 801978a:	781b      	ldrb	r3, [r3, #0]
 801978c:	021a      	lsls	r2, r3, #8
 801978e:	68fb      	ldr	r3, [r7, #12]
 8019790:	4313      	orrs	r3, r2
 8019792:	60fb      	str	r3, [r7, #12]
      tmp++;
 8019794:	693b      	ldr	r3, [r7, #16]
 8019796:	3301      	adds	r3, #1
 8019798:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 801979a:	693b      	ldr	r3, [r7, #16]
 801979c:	781b      	ldrb	r3, [r3, #0]
 801979e:	041a      	lsls	r2, r3, #16
 80197a0:	68fb      	ldr	r3, [r7, #12]
 80197a2:	4313      	orrs	r3, r2
 80197a4:	60fb      	str	r3, [r7, #12]
      tmp++;
 80197a6:	693b      	ldr	r3, [r7, #16]
 80197a8:	3301      	adds	r3, #1
 80197aa:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 80197ac:	693b      	ldr	r3, [r7, #16]
 80197ae:	781b      	ldrb	r3, [r3, #0]
 80197b0:	061a      	lsls	r2, r3, #24
 80197b2:	68fb      	ldr	r3, [r7, #12]
 80197b4:	4313      	orrs	r3, r2
 80197b6:	60fb      	str	r3, [r7, #12]
      tmp++;
 80197b8:	693b      	ldr	r3, [r7, #16]
 80197ba:	3301      	adds	r3, #1
 80197bc:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 80197be:	687b      	ldr	r3, [r7, #4]
 80197c0:	681b      	ldr	r3, [r3, #0]
 80197c2:	f107 020c 	add.w	r2, r7, #12
 80197c6:	4611      	mov	r1, r2
 80197c8:	4618      	mov	r0, r3
 80197ca:	f001 fb26 	bl	801ae1a <SDMMC_WriteFIFO>
    for (count = 0U; count < 8U; count++)
 80197ce:	697b      	ldr	r3, [r7, #20]
 80197d0:	3301      	adds	r3, #1
 80197d2:	617b      	str	r3, [r7, #20]
 80197d4:	697b      	ldr	r3, [r7, #20]
 80197d6:	2b07      	cmp	r3, #7
 80197d8:	d9d0      	bls.n	801977c <SD_Write_IT+0x1c>
    }

    hsd->pTxBuffPtr = tmp;
 80197da:	687b      	ldr	r3, [r7, #4]
 80197dc:	693a      	ldr	r2, [r7, #16]
 80197de:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize -= 32U;
 80197e0:	687b      	ldr	r3, [r7, #4]
 80197e2:	6a1b      	ldr	r3, [r3, #32]
 80197e4:	f1a3 0220 	sub.w	r2, r3, #32
 80197e8:	687b      	ldr	r3, [r7, #4]
 80197ea:	621a      	str	r2, [r3, #32]
  }
}
 80197ec:	bf00      	nop
 80197ee:	3718      	adds	r7, #24
 80197f0:	46bd      	mov	sp, r7
 80197f2:	bd80      	pop	{r7, pc}

080197f4 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 80197f4:	b480      	push	{r7}
 80197f6:	b083      	sub	sp, #12
 80197f8:	af00      	add	r7, sp, #0
 80197fa:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 80197fc:	bf00      	nop
 80197fe:	370c      	adds	r7, #12
 8019800:	46bd      	mov	sp, r7
 8019802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019806:	4770      	bx	lr

08019808 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 8019808:	b480      	push	{r7}
 801980a:	b083      	sub	sp, #12
 801980c:	af00      	add	r7, sp, #0
 801980e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 8019810:	bf00      	nop
 8019812:	370c      	adds	r7, #12
 8019814:	46bd      	mov	sp, r7
 8019816:	f85d 7b04 	ldr.w	r7, [sp], #4
 801981a:	4770      	bx	lr

0801981c <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 801981c:	b480      	push	{r7}
 801981e:	b083      	sub	sp, #12
 8019820:	af00      	add	r7, sp, #0
 8019822:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 8019824:	bf00      	nop
 8019826:	370c      	adds	r7, #12
 8019828:	46bd      	mov	sp, r7
 801982a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801982e:	4770      	bx	lr

08019830 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 8019830:	b480      	push	{r7}
 8019832:	b083      	sub	sp, #12
 8019834:	af00      	add	r7, sp, #0
 8019836:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 8019838:	bf00      	nop
 801983a:	370c      	adds	r7, #12
 801983c:	46bd      	mov	sp, r7
 801983e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019842:	4770      	bx	lr

08019844 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8019844:	b580      	push	{r7, lr}
 8019846:	b084      	sub	sp, #16
 8019848:	af00      	add	r7, sp, #0
 801984a:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 801984c:	687b      	ldr	r3, [r7, #4]
 801984e:	2b00      	cmp	r3, #0
 8019850:	d101      	bne.n	8019856 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8019852:	2301      	movs	r3, #1
 8019854:	e10f      	b.n	8019a76 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8019856:	687b      	ldr	r3, [r7, #4]
 8019858:	2200      	movs	r2, #0
 801985a:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 801985c:	687b      	ldr	r3, [r7, #4]
 801985e:	681b      	ldr	r3, [r3, #0]
 8019860:	4a87      	ldr	r2, [pc, #540]	@ (8019a80 <HAL_SPI_Init+0x23c>)
 8019862:	4293      	cmp	r3, r2
 8019864:	d00f      	beq.n	8019886 <HAL_SPI_Init+0x42>
 8019866:	687b      	ldr	r3, [r7, #4]
 8019868:	681b      	ldr	r3, [r3, #0]
 801986a:	4a86      	ldr	r2, [pc, #536]	@ (8019a84 <HAL_SPI_Init+0x240>)
 801986c:	4293      	cmp	r3, r2
 801986e:	d00a      	beq.n	8019886 <HAL_SPI_Init+0x42>
 8019870:	687b      	ldr	r3, [r7, #4]
 8019872:	681b      	ldr	r3, [r3, #0]
 8019874:	4a84      	ldr	r2, [pc, #528]	@ (8019a88 <HAL_SPI_Init+0x244>)
 8019876:	4293      	cmp	r3, r2
 8019878:	d005      	beq.n	8019886 <HAL_SPI_Init+0x42>
 801987a:	687b      	ldr	r3, [r7, #4]
 801987c:	68db      	ldr	r3, [r3, #12]
 801987e:	2b0f      	cmp	r3, #15
 8019880:	d901      	bls.n	8019886 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8019882:	2301      	movs	r3, #1
 8019884:	e0f7      	b.n	8019a76 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8019886:	6878      	ldr	r0, [r7, #4]
 8019888:	f000 f90a 	bl	8019aa0 <SPI_GetPacketSize>
 801988c:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 801988e:	687b      	ldr	r3, [r7, #4]
 8019890:	681b      	ldr	r3, [r3, #0]
 8019892:	4a7b      	ldr	r2, [pc, #492]	@ (8019a80 <HAL_SPI_Init+0x23c>)
 8019894:	4293      	cmp	r3, r2
 8019896:	d00c      	beq.n	80198b2 <HAL_SPI_Init+0x6e>
 8019898:	687b      	ldr	r3, [r7, #4]
 801989a:	681b      	ldr	r3, [r3, #0]
 801989c:	4a79      	ldr	r2, [pc, #484]	@ (8019a84 <HAL_SPI_Init+0x240>)
 801989e:	4293      	cmp	r3, r2
 80198a0:	d007      	beq.n	80198b2 <HAL_SPI_Init+0x6e>
 80198a2:	687b      	ldr	r3, [r7, #4]
 80198a4:	681b      	ldr	r3, [r3, #0]
 80198a6:	4a78      	ldr	r2, [pc, #480]	@ (8019a88 <HAL_SPI_Init+0x244>)
 80198a8:	4293      	cmp	r3, r2
 80198aa:	d002      	beq.n	80198b2 <HAL_SPI_Init+0x6e>
 80198ac:	68fb      	ldr	r3, [r7, #12]
 80198ae:	2b08      	cmp	r3, #8
 80198b0:	d811      	bhi.n	80198d6 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80198b2:	687b      	ldr	r3, [r7, #4]
 80198b4:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80198b6:	4a72      	ldr	r2, [pc, #456]	@ (8019a80 <HAL_SPI_Init+0x23c>)
 80198b8:	4293      	cmp	r3, r2
 80198ba:	d009      	beq.n	80198d0 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80198bc:	687b      	ldr	r3, [r7, #4]
 80198be:	681b      	ldr	r3, [r3, #0]
 80198c0:	4a70      	ldr	r2, [pc, #448]	@ (8019a84 <HAL_SPI_Init+0x240>)
 80198c2:	4293      	cmp	r3, r2
 80198c4:	d004      	beq.n	80198d0 <HAL_SPI_Init+0x8c>
 80198c6:	687b      	ldr	r3, [r7, #4]
 80198c8:	681b      	ldr	r3, [r3, #0]
 80198ca:	4a6f      	ldr	r2, [pc, #444]	@ (8019a88 <HAL_SPI_Init+0x244>)
 80198cc:	4293      	cmp	r3, r2
 80198ce:	d104      	bne.n	80198da <HAL_SPI_Init+0x96>
 80198d0:	68fb      	ldr	r3, [r7, #12]
 80198d2:	2b10      	cmp	r3, #16
 80198d4:	d901      	bls.n	80198da <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 80198d6:	2301      	movs	r3, #1
 80198d8:	e0cd      	b.n	8019a76 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80198da:	687b      	ldr	r3, [r7, #4]
 80198dc:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80198e0:	b2db      	uxtb	r3, r3
 80198e2:	2b00      	cmp	r3, #0
 80198e4:	d106      	bne.n	80198f4 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80198e6:	687b      	ldr	r3, [r7, #4]
 80198e8:	2200      	movs	r2, #0
 80198ea:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80198ee:	6878      	ldr	r0, [r7, #4]
 80198f0:	f000 f8cc 	bl	8019a8c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80198f4:	687b      	ldr	r3, [r7, #4]
 80198f6:	2202      	movs	r2, #2
 80198f8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80198fc:	687b      	ldr	r3, [r7, #4]
 80198fe:	681b      	ldr	r3, [r3, #0]
 8019900:	681a      	ldr	r2, [r3, #0]
 8019902:	687b      	ldr	r3, [r7, #4]
 8019904:	681b      	ldr	r3, [r3, #0]
 8019906:	f022 0201 	bic.w	r2, r2, #1
 801990a:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 801990c:	687b      	ldr	r3, [r7, #4]
 801990e:	681b      	ldr	r3, [r3, #0]
 8019910:	689b      	ldr	r3, [r3, #8]
 8019912:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 8019916:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8019918:	687b      	ldr	r3, [r7, #4]
 801991a:	699b      	ldr	r3, [r3, #24]
 801991c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8019920:	d119      	bne.n	8019956 <HAL_SPI_Init+0x112>
 8019922:	687b      	ldr	r3, [r7, #4]
 8019924:	685b      	ldr	r3, [r3, #4]
 8019926:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 801992a:	d103      	bne.n	8019934 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 801992c:	687b      	ldr	r3, [r7, #4]
 801992e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8019930:	2b00      	cmp	r3, #0
 8019932:	d008      	beq.n	8019946 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8019934:	687b      	ldr	r3, [r7, #4]
 8019936:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8019938:	2b00      	cmp	r3, #0
 801993a:	d10c      	bne.n	8019956 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 801993c:	687b      	ldr	r3, [r7, #4]
 801993e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8019940:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8019944:	d107      	bne.n	8019956 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8019946:	687b      	ldr	r3, [r7, #4]
 8019948:	681b      	ldr	r3, [r3, #0]
 801994a:	681a      	ldr	r2, [r3, #0]
 801994c:	687b      	ldr	r3, [r7, #4]
 801994e:	681b      	ldr	r3, [r3, #0]
 8019950:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8019954:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8019956:	687b      	ldr	r3, [r7, #4]
 8019958:	685b      	ldr	r3, [r3, #4]
 801995a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 801995e:	2b00      	cmp	r3, #0
 8019960:	d00f      	beq.n	8019982 <HAL_SPI_Init+0x13e>
 8019962:	687b      	ldr	r3, [r7, #4]
 8019964:	68db      	ldr	r3, [r3, #12]
 8019966:	2b06      	cmp	r3, #6
 8019968:	d90b      	bls.n	8019982 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 801996a:	687b      	ldr	r3, [r7, #4]
 801996c:	681b      	ldr	r3, [r3, #0]
 801996e:	681b      	ldr	r3, [r3, #0]
 8019970:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8019974:	687b      	ldr	r3, [r7, #4]
 8019976:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8019978:	687b      	ldr	r3, [r7, #4]
 801997a:	681b      	ldr	r3, [r3, #0]
 801997c:	430a      	orrs	r2, r1
 801997e:	601a      	str	r2, [r3, #0]
 8019980:	e007      	b.n	8019992 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8019982:	687b      	ldr	r3, [r7, #4]
 8019984:	681b      	ldr	r3, [r3, #0]
 8019986:	681a      	ldr	r2, [r3, #0]
 8019988:	687b      	ldr	r3, [r7, #4]
 801998a:	681b      	ldr	r3, [r3, #0]
 801998c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8019990:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8019992:	687b      	ldr	r3, [r7, #4]
 8019994:	69da      	ldr	r2, [r3, #28]
 8019996:	687b      	ldr	r3, [r7, #4]
 8019998:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801999a:	431a      	orrs	r2, r3
 801999c:	68bb      	ldr	r3, [r7, #8]
 801999e:	431a      	orrs	r2, r3
 80199a0:	687b      	ldr	r3, [r7, #4]
 80199a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80199a4:	ea42 0103 	orr.w	r1, r2, r3
 80199a8:	687b      	ldr	r3, [r7, #4]
 80199aa:	68da      	ldr	r2, [r3, #12]
 80199ac:	687b      	ldr	r3, [r7, #4]
 80199ae:	681b      	ldr	r3, [r3, #0]
 80199b0:	430a      	orrs	r2, r1
 80199b2:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 80199b4:	687b      	ldr	r3, [r7, #4]
 80199b6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80199b8:	687b      	ldr	r3, [r7, #4]
 80199ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80199bc:	431a      	orrs	r2, r3
 80199be:	687b      	ldr	r3, [r7, #4]
 80199c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80199c2:	431a      	orrs	r2, r3
 80199c4:	687b      	ldr	r3, [r7, #4]
 80199c6:	699b      	ldr	r3, [r3, #24]
 80199c8:	431a      	orrs	r2, r3
 80199ca:	687b      	ldr	r3, [r7, #4]
 80199cc:	691b      	ldr	r3, [r3, #16]
 80199ce:	431a      	orrs	r2, r3
 80199d0:	687b      	ldr	r3, [r7, #4]
 80199d2:	695b      	ldr	r3, [r3, #20]
 80199d4:	431a      	orrs	r2, r3
 80199d6:	687b      	ldr	r3, [r7, #4]
 80199d8:	6a1b      	ldr	r3, [r3, #32]
 80199da:	431a      	orrs	r2, r3
 80199dc:	687b      	ldr	r3, [r7, #4]
 80199de:	685b      	ldr	r3, [r3, #4]
 80199e0:	431a      	orrs	r2, r3
 80199e2:	687b      	ldr	r3, [r7, #4]
 80199e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80199e6:	431a      	orrs	r2, r3
 80199e8:	687b      	ldr	r3, [r7, #4]
 80199ea:	689b      	ldr	r3, [r3, #8]
 80199ec:	431a      	orrs	r2, r3
 80199ee:	687b      	ldr	r3, [r7, #4]
 80199f0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80199f2:	ea42 0103 	orr.w	r1, r2, r3
 80199f6:	687b      	ldr	r3, [r7, #4]
 80199f8:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80199fa:	687b      	ldr	r3, [r7, #4]
 80199fc:	681b      	ldr	r3, [r3, #0]
 80199fe:	430a      	orrs	r2, r1
 8019a00:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8019a02:	687b      	ldr	r3, [r7, #4]
 8019a04:	685b      	ldr	r3, [r3, #4]
 8019a06:	2b00      	cmp	r3, #0
 8019a08:	d113      	bne.n	8019a32 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8019a0a:	687b      	ldr	r3, [r7, #4]
 8019a0c:	681b      	ldr	r3, [r3, #0]
 8019a0e:	689b      	ldr	r3, [r3, #8]
 8019a10:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 8019a14:	687b      	ldr	r3, [r7, #4]
 8019a16:	681b      	ldr	r3, [r3, #0]
 8019a18:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8019a1c:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8019a1e:	687b      	ldr	r3, [r7, #4]
 8019a20:	681b      	ldr	r3, [r3, #0]
 8019a22:	689b      	ldr	r3, [r3, #8]
 8019a24:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 8019a28:	687b      	ldr	r3, [r7, #4]
 8019a2a:	681b      	ldr	r3, [r3, #0]
 8019a2c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8019a30:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8019a32:	687b      	ldr	r3, [r7, #4]
 8019a34:	681b      	ldr	r3, [r3, #0]
 8019a36:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8019a38:	687b      	ldr	r3, [r7, #4]
 8019a3a:	681b      	ldr	r3, [r3, #0]
 8019a3c:	f022 0201 	bic.w	r2, r2, #1
 8019a40:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8019a42:	687b      	ldr	r3, [r7, #4]
 8019a44:	685b      	ldr	r3, [r3, #4]
 8019a46:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8019a4a:	2b00      	cmp	r3, #0
 8019a4c:	d00a      	beq.n	8019a64 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8019a4e:	687b      	ldr	r3, [r7, #4]
 8019a50:	681b      	ldr	r3, [r3, #0]
 8019a52:	68db      	ldr	r3, [r3, #12]
 8019a54:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8019a58:	687b      	ldr	r3, [r7, #4]
 8019a5a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8019a5c:	687b      	ldr	r3, [r7, #4]
 8019a5e:	681b      	ldr	r3, [r3, #0]
 8019a60:	430a      	orrs	r2, r1
 8019a62:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8019a64:	687b      	ldr	r3, [r7, #4]
 8019a66:	2200      	movs	r2, #0
 8019a68:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8019a6c:	687b      	ldr	r3, [r7, #4]
 8019a6e:	2201      	movs	r2, #1
 8019a70:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 8019a74:	2300      	movs	r3, #0
}
 8019a76:	4618      	mov	r0, r3
 8019a78:	3710      	adds	r7, #16
 8019a7a:	46bd      	mov	sp, r7
 8019a7c:	bd80      	pop	{r7, pc}
 8019a7e:	bf00      	nop
 8019a80:	40013000 	.word	0x40013000
 8019a84:	40003800 	.word	0x40003800
 8019a88:	40003c00 	.word	0x40003c00

08019a8c <HAL_SPI_MspInit>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 8019a8c:	b480      	push	{r7}
 8019a8e:	b083      	sub	sp, #12
 8019a90:	af00      	add	r7, sp, #0
 8019a92:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
   */
}
 8019a94:	bf00      	nop
 8019a96:	370c      	adds	r7, #12
 8019a98:	46bd      	mov	sp, r7
 8019a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019a9e:	4770      	bx	lr

08019aa0 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8019aa0:	b480      	push	{r7}
 8019aa2:	b085      	sub	sp, #20
 8019aa4:	af00      	add	r7, sp, #0
 8019aa6:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8019aa8:	687b      	ldr	r3, [r7, #4]
 8019aaa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8019aac:	095b      	lsrs	r3, r3, #5
 8019aae:	3301      	adds	r3, #1
 8019ab0:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8019ab2:	687b      	ldr	r3, [r7, #4]
 8019ab4:	68db      	ldr	r3, [r3, #12]
 8019ab6:	3301      	adds	r3, #1
 8019ab8:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8019aba:	68bb      	ldr	r3, [r7, #8]
 8019abc:	3307      	adds	r3, #7
 8019abe:	08db      	lsrs	r3, r3, #3
 8019ac0:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8019ac2:	68bb      	ldr	r3, [r7, #8]
 8019ac4:	68fa      	ldr	r2, [r7, #12]
 8019ac6:	fb02 f303 	mul.w	r3, r2, r3
}
 8019aca:	4618      	mov	r0, r3
 8019acc:	3714      	adds	r7, #20
 8019ace:	46bd      	mov	sp, r7
 8019ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019ad4:	4770      	bx	lr

08019ad6 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8019ad6:	b580      	push	{r7, lr}
 8019ad8:	b082      	sub	sp, #8
 8019ada:	af00      	add	r7, sp, #0
 8019adc:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8019ade:	687b      	ldr	r3, [r7, #4]
 8019ae0:	2b00      	cmp	r3, #0
 8019ae2:	d101      	bne.n	8019ae8 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8019ae4:	2301      	movs	r3, #1
 8019ae6:	e042      	b.n	8019b6e <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8019ae8:	687b      	ldr	r3, [r7, #4]
 8019aea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8019aee:	2b00      	cmp	r3, #0
 8019af0:	d106      	bne.n	8019b00 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8019af2:	687b      	ldr	r3, [r7, #4]
 8019af4:	2200      	movs	r2, #0
 8019af6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8019afa:	6878      	ldr	r0, [r7, #4]
 8019afc:	f7f2 f894 	bl	800bc28 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8019b00:	687b      	ldr	r3, [r7, #4]
 8019b02:	2224      	movs	r2, #36	@ 0x24
 8019b04:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8019b08:	687b      	ldr	r3, [r7, #4]
 8019b0a:	681b      	ldr	r3, [r3, #0]
 8019b0c:	681a      	ldr	r2, [r3, #0]
 8019b0e:	687b      	ldr	r3, [r7, #4]
 8019b10:	681b      	ldr	r3, [r3, #0]
 8019b12:	f022 0201 	bic.w	r2, r2, #1
 8019b16:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8019b18:	687b      	ldr	r3, [r7, #4]
 8019b1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8019b1c:	2b00      	cmp	r3, #0
 8019b1e:	d002      	beq.n	8019b26 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8019b20:	6878      	ldr	r0, [r7, #4]
 8019b22:	f000 fe1f 	bl	801a764 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8019b26:	6878      	ldr	r0, [r7, #4]
 8019b28:	f000 f8b4 	bl	8019c94 <UART_SetConfig>
 8019b2c:	4603      	mov	r3, r0
 8019b2e:	2b01      	cmp	r3, #1
 8019b30:	d101      	bne.n	8019b36 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8019b32:	2301      	movs	r3, #1
 8019b34:	e01b      	b.n	8019b6e <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8019b36:	687b      	ldr	r3, [r7, #4]
 8019b38:	681b      	ldr	r3, [r3, #0]
 8019b3a:	685a      	ldr	r2, [r3, #4]
 8019b3c:	687b      	ldr	r3, [r7, #4]
 8019b3e:	681b      	ldr	r3, [r3, #0]
 8019b40:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8019b44:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8019b46:	687b      	ldr	r3, [r7, #4]
 8019b48:	681b      	ldr	r3, [r3, #0]
 8019b4a:	689a      	ldr	r2, [r3, #8]
 8019b4c:	687b      	ldr	r3, [r7, #4]
 8019b4e:	681b      	ldr	r3, [r3, #0]
 8019b50:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8019b54:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8019b56:	687b      	ldr	r3, [r7, #4]
 8019b58:	681b      	ldr	r3, [r3, #0]
 8019b5a:	681a      	ldr	r2, [r3, #0]
 8019b5c:	687b      	ldr	r3, [r7, #4]
 8019b5e:	681b      	ldr	r3, [r3, #0]
 8019b60:	f042 0201 	orr.w	r2, r2, #1
 8019b64:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8019b66:	6878      	ldr	r0, [r7, #4]
 8019b68:	f000 fe9e 	bl	801a8a8 <UART_CheckIdleState>
 8019b6c:	4603      	mov	r3, r0
}
 8019b6e:	4618      	mov	r0, r3
 8019b70:	3708      	adds	r7, #8
 8019b72:	46bd      	mov	sp, r7
 8019b74:	bd80      	pop	{r7, pc}

08019b76 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8019b76:	b580      	push	{r7, lr}
 8019b78:	b08a      	sub	sp, #40	@ 0x28
 8019b7a:	af02      	add	r7, sp, #8
 8019b7c:	60f8      	str	r0, [r7, #12]
 8019b7e:	60b9      	str	r1, [r7, #8]
 8019b80:	603b      	str	r3, [r7, #0]
 8019b82:	4613      	mov	r3, r2
 8019b84:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8019b86:	68fb      	ldr	r3, [r7, #12]
 8019b88:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8019b8c:	2b20      	cmp	r3, #32
 8019b8e:	d17b      	bne.n	8019c88 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8019b90:	68bb      	ldr	r3, [r7, #8]
 8019b92:	2b00      	cmp	r3, #0
 8019b94:	d002      	beq.n	8019b9c <HAL_UART_Transmit+0x26>
 8019b96:	88fb      	ldrh	r3, [r7, #6]
 8019b98:	2b00      	cmp	r3, #0
 8019b9a:	d101      	bne.n	8019ba0 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8019b9c:	2301      	movs	r3, #1
 8019b9e:	e074      	b.n	8019c8a <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8019ba0:	68fb      	ldr	r3, [r7, #12]
 8019ba2:	2200      	movs	r2, #0
 8019ba4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8019ba8:	68fb      	ldr	r3, [r7, #12]
 8019baa:	2221      	movs	r2, #33	@ 0x21
 8019bac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8019bb0:	f7f7 fdde 	bl	8011770 <HAL_GetTick>
 8019bb4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8019bb6:	68fb      	ldr	r3, [r7, #12]
 8019bb8:	88fa      	ldrh	r2, [r7, #6]
 8019bba:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8019bbe:	68fb      	ldr	r3, [r7, #12]
 8019bc0:	88fa      	ldrh	r2, [r7, #6]
 8019bc2:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8019bc6:	68fb      	ldr	r3, [r7, #12]
 8019bc8:	689b      	ldr	r3, [r3, #8]
 8019bca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8019bce:	d108      	bne.n	8019be2 <HAL_UART_Transmit+0x6c>
 8019bd0:	68fb      	ldr	r3, [r7, #12]
 8019bd2:	691b      	ldr	r3, [r3, #16]
 8019bd4:	2b00      	cmp	r3, #0
 8019bd6:	d104      	bne.n	8019be2 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8019bd8:	2300      	movs	r3, #0
 8019bda:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8019bdc:	68bb      	ldr	r3, [r7, #8]
 8019bde:	61bb      	str	r3, [r7, #24]
 8019be0:	e003      	b.n	8019bea <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8019be2:	68bb      	ldr	r3, [r7, #8]
 8019be4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8019be6:	2300      	movs	r3, #0
 8019be8:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8019bea:	e030      	b.n	8019c4e <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8019bec:	683b      	ldr	r3, [r7, #0]
 8019bee:	9300      	str	r3, [sp, #0]
 8019bf0:	697b      	ldr	r3, [r7, #20]
 8019bf2:	2200      	movs	r2, #0
 8019bf4:	2180      	movs	r1, #128	@ 0x80
 8019bf6:	68f8      	ldr	r0, [r7, #12]
 8019bf8:	f000 ff00 	bl	801a9fc <UART_WaitOnFlagUntilTimeout>
 8019bfc:	4603      	mov	r3, r0
 8019bfe:	2b00      	cmp	r3, #0
 8019c00:	d005      	beq.n	8019c0e <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8019c02:	68fb      	ldr	r3, [r7, #12]
 8019c04:	2220      	movs	r2, #32
 8019c06:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8019c0a:	2303      	movs	r3, #3
 8019c0c:	e03d      	b.n	8019c8a <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8019c0e:	69fb      	ldr	r3, [r7, #28]
 8019c10:	2b00      	cmp	r3, #0
 8019c12:	d10b      	bne.n	8019c2c <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8019c14:	69bb      	ldr	r3, [r7, #24]
 8019c16:	881b      	ldrh	r3, [r3, #0]
 8019c18:	461a      	mov	r2, r3
 8019c1a:	68fb      	ldr	r3, [r7, #12]
 8019c1c:	681b      	ldr	r3, [r3, #0]
 8019c1e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8019c22:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8019c24:	69bb      	ldr	r3, [r7, #24]
 8019c26:	3302      	adds	r3, #2
 8019c28:	61bb      	str	r3, [r7, #24]
 8019c2a:	e007      	b.n	8019c3c <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8019c2c:	69fb      	ldr	r3, [r7, #28]
 8019c2e:	781a      	ldrb	r2, [r3, #0]
 8019c30:	68fb      	ldr	r3, [r7, #12]
 8019c32:	681b      	ldr	r3, [r3, #0]
 8019c34:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8019c36:	69fb      	ldr	r3, [r7, #28]
 8019c38:	3301      	adds	r3, #1
 8019c3a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8019c3c:	68fb      	ldr	r3, [r7, #12]
 8019c3e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8019c42:	b29b      	uxth	r3, r3
 8019c44:	3b01      	subs	r3, #1
 8019c46:	b29a      	uxth	r2, r3
 8019c48:	68fb      	ldr	r3, [r7, #12]
 8019c4a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8019c4e:	68fb      	ldr	r3, [r7, #12]
 8019c50:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8019c54:	b29b      	uxth	r3, r3
 8019c56:	2b00      	cmp	r3, #0
 8019c58:	d1c8      	bne.n	8019bec <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8019c5a:	683b      	ldr	r3, [r7, #0]
 8019c5c:	9300      	str	r3, [sp, #0]
 8019c5e:	697b      	ldr	r3, [r7, #20]
 8019c60:	2200      	movs	r2, #0
 8019c62:	2140      	movs	r1, #64	@ 0x40
 8019c64:	68f8      	ldr	r0, [r7, #12]
 8019c66:	f000 fec9 	bl	801a9fc <UART_WaitOnFlagUntilTimeout>
 8019c6a:	4603      	mov	r3, r0
 8019c6c:	2b00      	cmp	r3, #0
 8019c6e:	d005      	beq.n	8019c7c <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8019c70:	68fb      	ldr	r3, [r7, #12]
 8019c72:	2220      	movs	r2, #32
 8019c74:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8019c78:	2303      	movs	r3, #3
 8019c7a:	e006      	b.n	8019c8a <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8019c7c:	68fb      	ldr	r3, [r7, #12]
 8019c7e:	2220      	movs	r2, #32
 8019c80:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8019c84:	2300      	movs	r3, #0
 8019c86:	e000      	b.n	8019c8a <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8019c88:	2302      	movs	r3, #2
  }
}
 8019c8a:	4618      	mov	r0, r3
 8019c8c:	3720      	adds	r7, #32
 8019c8e:	46bd      	mov	sp, r7
 8019c90:	bd80      	pop	{r7, pc}
	...

08019c94 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8019c94:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8019c98:	b092      	sub	sp, #72	@ 0x48
 8019c9a:	af00      	add	r7, sp, #0
 8019c9c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8019c9e:	2300      	movs	r3, #0
 8019ca0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8019ca4:	697b      	ldr	r3, [r7, #20]
 8019ca6:	689a      	ldr	r2, [r3, #8]
 8019ca8:	697b      	ldr	r3, [r7, #20]
 8019caa:	691b      	ldr	r3, [r3, #16]
 8019cac:	431a      	orrs	r2, r3
 8019cae:	697b      	ldr	r3, [r7, #20]
 8019cb0:	695b      	ldr	r3, [r3, #20]
 8019cb2:	431a      	orrs	r2, r3
 8019cb4:	697b      	ldr	r3, [r7, #20]
 8019cb6:	69db      	ldr	r3, [r3, #28]
 8019cb8:	4313      	orrs	r3, r2
 8019cba:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8019cbc:	697b      	ldr	r3, [r7, #20]
 8019cbe:	681b      	ldr	r3, [r3, #0]
 8019cc0:	681a      	ldr	r2, [r3, #0]
 8019cc2:	4bbe      	ldr	r3, [pc, #760]	@ (8019fbc <UART_SetConfig+0x328>)
 8019cc4:	4013      	ands	r3, r2
 8019cc6:	697a      	ldr	r2, [r7, #20]
 8019cc8:	6812      	ldr	r2, [r2, #0]
 8019cca:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8019ccc:	430b      	orrs	r3, r1
 8019cce:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8019cd0:	697b      	ldr	r3, [r7, #20]
 8019cd2:	681b      	ldr	r3, [r3, #0]
 8019cd4:	685b      	ldr	r3, [r3, #4]
 8019cd6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8019cda:	697b      	ldr	r3, [r7, #20]
 8019cdc:	68da      	ldr	r2, [r3, #12]
 8019cde:	697b      	ldr	r3, [r7, #20]
 8019ce0:	681b      	ldr	r3, [r3, #0]
 8019ce2:	430a      	orrs	r2, r1
 8019ce4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8019ce6:	697b      	ldr	r3, [r7, #20]
 8019ce8:	699b      	ldr	r3, [r3, #24]
 8019cea:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8019cec:	697b      	ldr	r3, [r7, #20]
 8019cee:	681b      	ldr	r3, [r3, #0]
 8019cf0:	4ab3      	ldr	r2, [pc, #716]	@ (8019fc0 <UART_SetConfig+0x32c>)
 8019cf2:	4293      	cmp	r3, r2
 8019cf4:	d004      	beq.n	8019d00 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8019cf6:	697b      	ldr	r3, [r7, #20]
 8019cf8:	6a1b      	ldr	r3, [r3, #32]
 8019cfa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8019cfc:	4313      	orrs	r3, r2
 8019cfe:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8019d00:	697b      	ldr	r3, [r7, #20]
 8019d02:	681b      	ldr	r3, [r3, #0]
 8019d04:	689a      	ldr	r2, [r3, #8]
 8019d06:	4baf      	ldr	r3, [pc, #700]	@ (8019fc4 <UART_SetConfig+0x330>)
 8019d08:	4013      	ands	r3, r2
 8019d0a:	697a      	ldr	r2, [r7, #20]
 8019d0c:	6812      	ldr	r2, [r2, #0]
 8019d0e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8019d10:	430b      	orrs	r3, r1
 8019d12:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8019d14:	697b      	ldr	r3, [r7, #20]
 8019d16:	681b      	ldr	r3, [r3, #0]
 8019d18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8019d1a:	f023 010f 	bic.w	r1, r3, #15
 8019d1e:	697b      	ldr	r3, [r7, #20]
 8019d20:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8019d22:	697b      	ldr	r3, [r7, #20]
 8019d24:	681b      	ldr	r3, [r3, #0]
 8019d26:	430a      	orrs	r2, r1
 8019d28:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8019d2a:	697b      	ldr	r3, [r7, #20]
 8019d2c:	681b      	ldr	r3, [r3, #0]
 8019d2e:	4aa6      	ldr	r2, [pc, #664]	@ (8019fc8 <UART_SetConfig+0x334>)
 8019d30:	4293      	cmp	r3, r2
 8019d32:	d177      	bne.n	8019e24 <UART_SetConfig+0x190>
 8019d34:	4ba5      	ldr	r3, [pc, #660]	@ (8019fcc <UART_SetConfig+0x338>)
 8019d36:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8019d38:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8019d3c:	2b28      	cmp	r3, #40	@ 0x28
 8019d3e:	d86d      	bhi.n	8019e1c <UART_SetConfig+0x188>
 8019d40:	a201      	add	r2, pc, #4	@ (adr r2, 8019d48 <UART_SetConfig+0xb4>)
 8019d42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019d46:	bf00      	nop
 8019d48:	08019ded 	.word	0x08019ded
 8019d4c:	08019e1d 	.word	0x08019e1d
 8019d50:	08019e1d 	.word	0x08019e1d
 8019d54:	08019e1d 	.word	0x08019e1d
 8019d58:	08019e1d 	.word	0x08019e1d
 8019d5c:	08019e1d 	.word	0x08019e1d
 8019d60:	08019e1d 	.word	0x08019e1d
 8019d64:	08019e1d 	.word	0x08019e1d
 8019d68:	08019df5 	.word	0x08019df5
 8019d6c:	08019e1d 	.word	0x08019e1d
 8019d70:	08019e1d 	.word	0x08019e1d
 8019d74:	08019e1d 	.word	0x08019e1d
 8019d78:	08019e1d 	.word	0x08019e1d
 8019d7c:	08019e1d 	.word	0x08019e1d
 8019d80:	08019e1d 	.word	0x08019e1d
 8019d84:	08019e1d 	.word	0x08019e1d
 8019d88:	08019dfd 	.word	0x08019dfd
 8019d8c:	08019e1d 	.word	0x08019e1d
 8019d90:	08019e1d 	.word	0x08019e1d
 8019d94:	08019e1d 	.word	0x08019e1d
 8019d98:	08019e1d 	.word	0x08019e1d
 8019d9c:	08019e1d 	.word	0x08019e1d
 8019da0:	08019e1d 	.word	0x08019e1d
 8019da4:	08019e1d 	.word	0x08019e1d
 8019da8:	08019e05 	.word	0x08019e05
 8019dac:	08019e1d 	.word	0x08019e1d
 8019db0:	08019e1d 	.word	0x08019e1d
 8019db4:	08019e1d 	.word	0x08019e1d
 8019db8:	08019e1d 	.word	0x08019e1d
 8019dbc:	08019e1d 	.word	0x08019e1d
 8019dc0:	08019e1d 	.word	0x08019e1d
 8019dc4:	08019e1d 	.word	0x08019e1d
 8019dc8:	08019e0d 	.word	0x08019e0d
 8019dcc:	08019e1d 	.word	0x08019e1d
 8019dd0:	08019e1d 	.word	0x08019e1d
 8019dd4:	08019e1d 	.word	0x08019e1d
 8019dd8:	08019e1d 	.word	0x08019e1d
 8019ddc:	08019e1d 	.word	0x08019e1d
 8019de0:	08019e1d 	.word	0x08019e1d
 8019de4:	08019e1d 	.word	0x08019e1d
 8019de8:	08019e15 	.word	0x08019e15
 8019dec:	2301      	movs	r3, #1
 8019dee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8019df2:	e222      	b.n	801a23a <UART_SetConfig+0x5a6>
 8019df4:	2304      	movs	r3, #4
 8019df6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8019dfa:	e21e      	b.n	801a23a <UART_SetConfig+0x5a6>
 8019dfc:	2308      	movs	r3, #8
 8019dfe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8019e02:	e21a      	b.n	801a23a <UART_SetConfig+0x5a6>
 8019e04:	2310      	movs	r3, #16
 8019e06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8019e0a:	e216      	b.n	801a23a <UART_SetConfig+0x5a6>
 8019e0c:	2320      	movs	r3, #32
 8019e0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8019e12:	e212      	b.n	801a23a <UART_SetConfig+0x5a6>
 8019e14:	2340      	movs	r3, #64	@ 0x40
 8019e16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8019e1a:	e20e      	b.n	801a23a <UART_SetConfig+0x5a6>
 8019e1c:	2380      	movs	r3, #128	@ 0x80
 8019e1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8019e22:	e20a      	b.n	801a23a <UART_SetConfig+0x5a6>
 8019e24:	697b      	ldr	r3, [r7, #20]
 8019e26:	681b      	ldr	r3, [r3, #0]
 8019e28:	4a69      	ldr	r2, [pc, #420]	@ (8019fd0 <UART_SetConfig+0x33c>)
 8019e2a:	4293      	cmp	r3, r2
 8019e2c:	d130      	bne.n	8019e90 <UART_SetConfig+0x1fc>
 8019e2e:	4b67      	ldr	r3, [pc, #412]	@ (8019fcc <UART_SetConfig+0x338>)
 8019e30:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8019e32:	f003 0307 	and.w	r3, r3, #7
 8019e36:	2b05      	cmp	r3, #5
 8019e38:	d826      	bhi.n	8019e88 <UART_SetConfig+0x1f4>
 8019e3a:	a201      	add	r2, pc, #4	@ (adr r2, 8019e40 <UART_SetConfig+0x1ac>)
 8019e3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019e40:	08019e59 	.word	0x08019e59
 8019e44:	08019e61 	.word	0x08019e61
 8019e48:	08019e69 	.word	0x08019e69
 8019e4c:	08019e71 	.word	0x08019e71
 8019e50:	08019e79 	.word	0x08019e79
 8019e54:	08019e81 	.word	0x08019e81
 8019e58:	2300      	movs	r3, #0
 8019e5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8019e5e:	e1ec      	b.n	801a23a <UART_SetConfig+0x5a6>
 8019e60:	2304      	movs	r3, #4
 8019e62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8019e66:	e1e8      	b.n	801a23a <UART_SetConfig+0x5a6>
 8019e68:	2308      	movs	r3, #8
 8019e6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8019e6e:	e1e4      	b.n	801a23a <UART_SetConfig+0x5a6>
 8019e70:	2310      	movs	r3, #16
 8019e72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8019e76:	e1e0      	b.n	801a23a <UART_SetConfig+0x5a6>
 8019e78:	2320      	movs	r3, #32
 8019e7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8019e7e:	e1dc      	b.n	801a23a <UART_SetConfig+0x5a6>
 8019e80:	2340      	movs	r3, #64	@ 0x40
 8019e82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8019e86:	e1d8      	b.n	801a23a <UART_SetConfig+0x5a6>
 8019e88:	2380      	movs	r3, #128	@ 0x80
 8019e8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8019e8e:	e1d4      	b.n	801a23a <UART_SetConfig+0x5a6>
 8019e90:	697b      	ldr	r3, [r7, #20]
 8019e92:	681b      	ldr	r3, [r3, #0]
 8019e94:	4a4f      	ldr	r2, [pc, #316]	@ (8019fd4 <UART_SetConfig+0x340>)
 8019e96:	4293      	cmp	r3, r2
 8019e98:	d130      	bne.n	8019efc <UART_SetConfig+0x268>
 8019e9a:	4b4c      	ldr	r3, [pc, #304]	@ (8019fcc <UART_SetConfig+0x338>)
 8019e9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8019e9e:	f003 0307 	and.w	r3, r3, #7
 8019ea2:	2b05      	cmp	r3, #5
 8019ea4:	d826      	bhi.n	8019ef4 <UART_SetConfig+0x260>
 8019ea6:	a201      	add	r2, pc, #4	@ (adr r2, 8019eac <UART_SetConfig+0x218>)
 8019ea8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019eac:	08019ec5 	.word	0x08019ec5
 8019eb0:	08019ecd 	.word	0x08019ecd
 8019eb4:	08019ed5 	.word	0x08019ed5
 8019eb8:	08019edd 	.word	0x08019edd
 8019ebc:	08019ee5 	.word	0x08019ee5
 8019ec0:	08019eed 	.word	0x08019eed
 8019ec4:	2300      	movs	r3, #0
 8019ec6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8019eca:	e1b6      	b.n	801a23a <UART_SetConfig+0x5a6>
 8019ecc:	2304      	movs	r3, #4
 8019ece:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8019ed2:	e1b2      	b.n	801a23a <UART_SetConfig+0x5a6>
 8019ed4:	2308      	movs	r3, #8
 8019ed6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8019eda:	e1ae      	b.n	801a23a <UART_SetConfig+0x5a6>
 8019edc:	2310      	movs	r3, #16
 8019ede:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8019ee2:	e1aa      	b.n	801a23a <UART_SetConfig+0x5a6>
 8019ee4:	2320      	movs	r3, #32
 8019ee6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8019eea:	e1a6      	b.n	801a23a <UART_SetConfig+0x5a6>
 8019eec:	2340      	movs	r3, #64	@ 0x40
 8019eee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8019ef2:	e1a2      	b.n	801a23a <UART_SetConfig+0x5a6>
 8019ef4:	2380      	movs	r3, #128	@ 0x80
 8019ef6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8019efa:	e19e      	b.n	801a23a <UART_SetConfig+0x5a6>
 8019efc:	697b      	ldr	r3, [r7, #20]
 8019efe:	681b      	ldr	r3, [r3, #0]
 8019f00:	4a35      	ldr	r2, [pc, #212]	@ (8019fd8 <UART_SetConfig+0x344>)
 8019f02:	4293      	cmp	r3, r2
 8019f04:	d130      	bne.n	8019f68 <UART_SetConfig+0x2d4>
 8019f06:	4b31      	ldr	r3, [pc, #196]	@ (8019fcc <UART_SetConfig+0x338>)
 8019f08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8019f0a:	f003 0307 	and.w	r3, r3, #7
 8019f0e:	2b05      	cmp	r3, #5
 8019f10:	d826      	bhi.n	8019f60 <UART_SetConfig+0x2cc>
 8019f12:	a201      	add	r2, pc, #4	@ (adr r2, 8019f18 <UART_SetConfig+0x284>)
 8019f14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019f18:	08019f31 	.word	0x08019f31
 8019f1c:	08019f39 	.word	0x08019f39
 8019f20:	08019f41 	.word	0x08019f41
 8019f24:	08019f49 	.word	0x08019f49
 8019f28:	08019f51 	.word	0x08019f51
 8019f2c:	08019f59 	.word	0x08019f59
 8019f30:	2300      	movs	r3, #0
 8019f32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8019f36:	e180      	b.n	801a23a <UART_SetConfig+0x5a6>
 8019f38:	2304      	movs	r3, #4
 8019f3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8019f3e:	e17c      	b.n	801a23a <UART_SetConfig+0x5a6>
 8019f40:	2308      	movs	r3, #8
 8019f42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8019f46:	e178      	b.n	801a23a <UART_SetConfig+0x5a6>
 8019f48:	2310      	movs	r3, #16
 8019f4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8019f4e:	e174      	b.n	801a23a <UART_SetConfig+0x5a6>
 8019f50:	2320      	movs	r3, #32
 8019f52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8019f56:	e170      	b.n	801a23a <UART_SetConfig+0x5a6>
 8019f58:	2340      	movs	r3, #64	@ 0x40
 8019f5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8019f5e:	e16c      	b.n	801a23a <UART_SetConfig+0x5a6>
 8019f60:	2380      	movs	r3, #128	@ 0x80
 8019f62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8019f66:	e168      	b.n	801a23a <UART_SetConfig+0x5a6>
 8019f68:	697b      	ldr	r3, [r7, #20]
 8019f6a:	681b      	ldr	r3, [r3, #0]
 8019f6c:	4a1b      	ldr	r2, [pc, #108]	@ (8019fdc <UART_SetConfig+0x348>)
 8019f6e:	4293      	cmp	r3, r2
 8019f70:	d142      	bne.n	8019ff8 <UART_SetConfig+0x364>
 8019f72:	4b16      	ldr	r3, [pc, #88]	@ (8019fcc <UART_SetConfig+0x338>)
 8019f74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8019f76:	f003 0307 	and.w	r3, r3, #7
 8019f7a:	2b05      	cmp	r3, #5
 8019f7c:	d838      	bhi.n	8019ff0 <UART_SetConfig+0x35c>
 8019f7e:	a201      	add	r2, pc, #4	@ (adr r2, 8019f84 <UART_SetConfig+0x2f0>)
 8019f80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019f84:	08019f9d 	.word	0x08019f9d
 8019f88:	08019fa5 	.word	0x08019fa5
 8019f8c:	08019fad 	.word	0x08019fad
 8019f90:	08019fb5 	.word	0x08019fb5
 8019f94:	08019fe1 	.word	0x08019fe1
 8019f98:	08019fe9 	.word	0x08019fe9
 8019f9c:	2300      	movs	r3, #0
 8019f9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8019fa2:	e14a      	b.n	801a23a <UART_SetConfig+0x5a6>
 8019fa4:	2304      	movs	r3, #4
 8019fa6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8019faa:	e146      	b.n	801a23a <UART_SetConfig+0x5a6>
 8019fac:	2308      	movs	r3, #8
 8019fae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8019fb2:	e142      	b.n	801a23a <UART_SetConfig+0x5a6>
 8019fb4:	2310      	movs	r3, #16
 8019fb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8019fba:	e13e      	b.n	801a23a <UART_SetConfig+0x5a6>
 8019fbc:	cfff69f3 	.word	0xcfff69f3
 8019fc0:	58000c00 	.word	0x58000c00
 8019fc4:	11fff4ff 	.word	0x11fff4ff
 8019fc8:	40011000 	.word	0x40011000
 8019fcc:	58024400 	.word	0x58024400
 8019fd0:	40004400 	.word	0x40004400
 8019fd4:	40004800 	.word	0x40004800
 8019fd8:	40004c00 	.word	0x40004c00
 8019fdc:	40005000 	.word	0x40005000
 8019fe0:	2320      	movs	r3, #32
 8019fe2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8019fe6:	e128      	b.n	801a23a <UART_SetConfig+0x5a6>
 8019fe8:	2340      	movs	r3, #64	@ 0x40
 8019fea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8019fee:	e124      	b.n	801a23a <UART_SetConfig+0x5a6>
 8019ff0:	2380      	movs	r3, #128	@ 0x80
 8019ff2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8019ff6:	e120      	b.n	801a23a <UART_SetConfig+0x5a6>
 8019ff8:	697b      	ldr	r3, [r7, #20]
 8019ffa:	681b      	ldr	r3, [r3, #0]
 8019ffc:	4acb      	ldr	r2, [pc, #812]	@ (801a32c <UART_SetConfig+0x698>)
 8019ffe:	4293      	cmp	r3, r2
 801a000:	d176      	bne.n	801a0f0 <UART_SetConfig+0x45c>
 801a002:	4bcb      	ldr	r3, [pc, #812]	@ (801a330 <UART_SetConfig+0x69c>)
 801a004:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801a006:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 801a00a:	2b28      	cmp	r3, #40	@ 0x28
 801a00c:	d86c      	bhi.n	801a0e8 <UART_SetConfig+0x454>
 801a00e:	a201      	add	r2, pc, #4	@ (adr r2, 801a014 <UART_SetConfig+0x380>)
 801a010:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a014:	0801a0b9 	.word	0x0801a0b9
 801a018:	0801a0e9 	.word	0x0801a0e9
 801a01c:	0801a0e9 	.word	0x0801a0e9
 801a020:	0801a0e9 	.word	0x0801a0e9
 801a024:	0801a0e9 	.word	0x0801a0e9
 801a028:	0801a0e9 	.word	0x0801a0e9
 801a02c:	0801a0e9 	.word	0x0801a0e9
 801a030:	0801a0e9 	.word	0x0801a0e9
 801a034:	0801a0c1 	.word	0x0801a0c1
 801a038:	0801a0e9 	.word	0x0801a0e9
 801a03c:	0801a0e9 	.word	0x0801a0e9
 801a040:	0801a0e9 	.word	0x0801a0e9
 801a044:	0801a0e9 	.word	0x0801a0e9
 801a048:	0801a0e9 	.word	0x0801a0e9
 801a04c:	0801a0e9 	.word	0x0801a0e9
 801a050:	0801a0e9 	.word	0x0801a0e9
 801a054:	0801a0c9 	.word	0x0801a0c9
 801a058:	0801a0e9 	.word	0x0801a0e9
 801a05c:	0801a0e9 	.word	0x0801a0e9
 801a060:	0801a0e9 	.word	0x0801a0e9
 801a064:	0801a0e9 	.word	0x0801a0e9
 801a068:	0801a0e9 	.word	0x0801a0e9
 801a06c:	0801a0e9 	.word	0x0801a0e9
 801a070:	0801a0e9 	.word	0x0801a0e9
 801a074:	0801a0d1 	.word	0x0801a0d1
 801a078:	0801a0e9 	.word	0x0801a0e9
 801a07c:	0801a0e9 	.word	0x0801a0e9
 801a080:	0801a0e9 	.word	0x0801a0e9
 801a084:	0801a0e9 	.word	0x0801a0e9
 801a088:	0801a0e9 	.word	0x0801a0e9
 801a08c:	0801a0e9 	.word	0x0801a0e9
 801a090:	0801a0e9 	.word	0x0801a0e9
 801a094:	0801a0d9 	.word	0x0801a0d9
 801a098:	0801a0e9 	.word	0x0801a0e9
 801a09c:	0801a0e9 	.word	0x0801a0e9
 801a0a0:	0801a0e9 	.word	0x0801a0e9
 801a0a4:	0801a0e9 	.word	0x0801a0e9
 801a0a8:	0801a0e9 	.word	0x0801a0e9
 801a0ac:	0801a0e9 	.word	0x0801a0e9
 801a0b0:	0801a0e9 	.word	0x0801a0e9
 801a0b4:	0801a0e1 	.word	0x0801a0e1
 801a0b8:	2301      	movs	r3, #1
 801a0ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801a0be:	e0bc      	b.n	801a23a <UART_SetConfig+0x5a6>
 801a0c0:	2304      	movs	r3, #4
 801a0c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801a0c6:	e0b8      	b.n	801a23a <UART_SetConfig+0x5a6>
 801a0c8:	2308      	movs	r3, #8
 801a0ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801a0ce:	e0b4      	b.n	801a23a <UART_SetConfig+0x5a6>
 801a0d0:	2310      	movs	r3, #16
 801a0d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801a0d6:	e0b0      	b.n	801a23a <UART_SetConfig+0x5a6>
 801a0d8:	2320      	movs	r3, #32
 801a0da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801a0de:	e0ac      	b.n	801a23a <UART_SetConfig+0x5a6>
 801a0e0:	2340      	movs	r3, #64	@ 0x40
 801a0e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801a0e6:	e0a8      	b.n	801a23a <UART_SetConfig+0x5a6>
 801a0e8:	2380      	movs	r3, #128	@ 0x80
 801a0ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801a0ee:	e0a4      	b.n	801a23a <UART_SetConfig+0x5a6>
 801a0f0:	697b      	ldr	r3, [r7, #20]
 801a0f2:	681b      	ldr	r3, [r3, #0]
 801a0f4:	4a8f      	ldr	r2, [pc, #572]	@ (801a334 <UART_SetConfig+0x6a0>)
 801a0f6:	4293      	cmp	r3, r2
 801a0f8:	d130      	bne.n	801a15c <UART_SetConfig+0x4c8>
 801a0fa:	4b8d      	ldr	r3, [pc, #564]	@ (801a330 <UART_SetConfig+0x69c>)
 801a0fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801a0fe:	f003 0307 	and.w	r3, r3, #7
 801a102:	2b05      	cmp	r3, #5
 801a104:	d826      	bhi.n	801a154 <UART_SetConfig+0x4c0>
 801a106:	a201      	add	r2, pc, #4	@ (adr r2, 801a10c <UART_SetConfig+0x478>)
 801a108:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a10c:	0801a125 	.word	0x0801a125
 801a110:	0801a12d 	.word	0x0801a12d
 801a114:	0801a135 	.word	0x0801a135
 801a118:	0801a13d 	.word	0x0801a13d
 801a11c:	0801a145 	.word	0x0801a145
 801a120:	0801a14d 	.word	0x0801a14d
 801a124:	2300      	movs	r3, #0
 801a126:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801a12a:	e086      	b.n	801a23a <UART_SetConfig+0x5a6>
 801a12c:	2304      	movs	r3, #4
 801a12e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801a132:	e082      	b.n	801a23a <UART_SetConfig+0x5a6>
 801a134:	2308      	movs	r3, #8
 801a136:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801a13a:	e07e      	b.n	801a23a <UART_SetConfig+0x5a6>
 801a13c:	2310      	movs	r3, #16
 801a13e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801a142:	e07a      	b.n	801a23a <UART_SetConfig+0x5a6>
 801a144:	2320      	movs	r3, #32
 801a146:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801a14a:	e076      	b.n	801a23a <UART_SetConfig+0x5a6>
 801a14c:	2340      	movs	r3, #64	@ 0x40
 801a14e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801a152:	e072      	b.n	801a23a <UART_SetConfig+0x5a6>
 801a154:	2380      	movs	r3, #128	@ 0x80
 801a156:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801a15a:	e06e      	b.n	801a23a <UART_SetConfig+0x5a6>
 801a15c:	697b      	ldr	r3, [r7, #20]
 801a15e:	681b      	ldr	r3, [r3, #0]
 801a160:	4a75      	ldr	r2, [pc, #468]	@ (801a338 <UART_SetConfig+0x6a4>)
 801a162:	4293      	cmp	r3, r2
 801a164:	d130      	bne.n	801a1c8 <UART_SetConfig+0x534>
 801a166:	4b72      	ldr	r3, [pc, #456]	@ (801a330 <UART_SetConfig+0x69c>)
 801a168:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801a16a:	f003 0307 	and.w	r3, r3, #7
 801a16e:	2b05      	cmp	r3, #5
 801a170:	d826      	bhi.n	801a1c0 <UART_SetConfig+0x52c>
 801a172:	a201      	add	r2, pc, #4	@ (adr r2, 801a178 <UART_SetConfig+0x4e4>)
 801a174:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a178:	0801a191 	.word	0x0801a191
 801a17c:	0801a199 	.word	0x0801a199
 801a180:	0801a1a1 	.word	0x0801a1a1
 801a184:	0801a1a9 	.word	0x0801a1a9
 801a188:	0801a1b1 	.word	0x0801a1b1
 801a18c:	0801a1b9 	.word	0x0801a1b9
 801a190:	2300      	movs	r3, #0
 801a192:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801a196:	e050      	b.n	801a23a <UART_SetConfig+0x5a6>
 801a198:	2304      	movs	r3, #4
 801a19a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801a19e:	e04c      	b.n	801a23a <UART_SetConfig+0x5a6>
 801a1a0:	2308      	movs	r3, #8
 801a1a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801a1a6:	e048      	b.n	801a23a <UART_SetConfig+0x5a6>
 801a1a8:	2310      	movs	r3, #16
 801a1aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801a1ae:	e044      	b.n	801a23a <UART_SetConfig+0x5a6>
 801a1b0:	2320      	movs	r3, #32
 801a1b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801a1b6:	e040      	b.n	801a23a <UART_SetConfig+0x5a6>
 801a1b8:	2340      	movs	r3, #64	@ 0x40
 801a1ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801a1be:	e03c      	b.n	801a23a <UART_SetConfig+0x5a6>
 801a1c0:	2380      	movs	r3, #128	@ 0x80
 801a1c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801a1c6:	e038      	b.n	801a23a <UART_SetConfig+0x5a6>
 801a1c8:	697b      	ldr	r3, [r7, #20]
 801a1ca:	681b      	ldr	r3, [r3, #0]
 801a1cc:	4a5b      	ldr	r2, [pc, #364]	@ (801a33c <UART_SetConfig+0x6a8>)
 801a1ce:	4293      	cmp	r3, r2
 801a1d0:	d130      	bne.n	801a234 <UART_SetConfig+0x5a0>
 801a1d2:	4b57      	ldr	r3, [pc, #348]	@ (801a330 <UART_SetConfig+0x69c>)
 801a1d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801a1d6:	f003 0307 	and.w	r3, r3, #7
 801a1da:	2b05      	cmp	r3, #5
 801a1dc:	d826      	bhi.n	801a22c <UART_SetConfig+0x598>
 801a1de:	a201      	add	r2, pc, #4	@ (adr r2, 801a1e4 <UART_SetConfig+0x550>)
 801a1e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a1e4:	0801a1fd 	.word	0x0801a1fd
 801a1e8:	0801a205 	.word	0x0801a205
 801a1ec:	0801a20d 	.word	0x0801a20d
 801a1f0:	0801a215 	.word	0x0801a215
 801a1f4:	0801a21d 	.word	0x0801a21d
 801a1f8:	0801a225 	.word	0x0801a225
 801a1fc:	2302      	movs	r3, #2
 801a1fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801a202:	e01a      	b.n	801a23a <UART_SetConfig+0x5a6>
 801a204:	2304      	movs	r3, #4
 801a206:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801a20a:	e016      	b.n	801a23a <UART_SetConfig+0x5a6>
 801a20c:	2308      	movs	r3, #8
 801a20e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801a212:	e012      	b.n	801a23a <UART_SetConfig+0x5a6>
 801a214:	2310      	movs	r3, #16
 801a216:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801a21a:	e00e      	b.n	801a23a <UART_SetConfig+0x5a6>
 801a21c:	2320      	movs	r3, #32
 801a21e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801a222:	e00a      	b.n	801a23a <UART_SetConfig+0x5a6>
 801a224:	2340      	movs	r3, #64	@ 0x40
 801a226:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801a22a:	e006      	b.n	801a23a <UART_SetConfig+0x5a6>
 801a22c:	2380      	movs	r3, #128	@ 0x80
 801a22e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801a232:	e002      	b.n	801a23a <UART_SetConfig+0x5a6>
 801a234:	2380      	movs	r3, #128	@ 0x80
 801a236:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 801a23a:	697b      	ldr	r3, [r7, #20]
 801a23c:	681b      	ldr	r3, [r3, #0]
 801a23e:	4a3f      	ldr	r2, [pc, #252]	@ (801a33c <UART_SetConfig+0x6a8>)
 801a240:	4293      	cmp	r3, r2
 801a242:	f040 80f8 	bne.w	801a436 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 801a246:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 801a24a:	2b20      	cmp	r3, #32
 801a24c:	dc46      	bgt.n	801a2dc <UART_SetConfig+0x648>
 801a24e:	2b02      	cmp	r3, #2
 801a250:	f2c0 8082 	blt.w	801a358 <UART_SetConfig+0x6c4>
 801a254:	3b02      	subs	r3, #2
 801a256:	2b1e      	cmp	r3, #30
 801a258:	d87e      	bhi.n	801a358 <UART_SetConfig+0x6c4>
 801a25a:	a201      	add	r2, pc, #4	@ (adr r2, 801a260 <UART_SetConfig+0x5cc>)
 801a25c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a260:	0801a2e3 	.word	0x0801a2e3
 801a264:	0801a359 	.word	0x0801a359
 801a268:	0801a2eb 	.word	0x0801a2eb
 801a26c:	0801a359 	.word	0x0801a359
 801a270:	0801a359 	.word	0x0801a359
 801a274:	0801a359 	.word	0x0801a359
 801a278:	0801a2fb 	.word	0x0801a2fb
 801a27c:	0801a359 	.word	0x0801a359
 801a280:	0801a359 	.word	0x0801a359
 801a284:	0801a359 	.word	0x0801a359
 801a288:	0801a359 	.word	0x0801a359
 801a28c:	0801a359 	.word	0x0801a359
 801a290:	0801a359 	.word	0x0801a359
 801a294:	0801a359 	.word	0x0801a359
 801a298:	0801a30b 	.word	0x0801a30b
 801a29c:	0801a359 	.word	0x0801a359
 801a2a0:	0801a359 	.word	0x0801a359
 801a2a4:	0801a359 	.word	0x0801a359
 801a2a8:	0801a359 	.word	0x0801a359
 801a2ac:	0801a359 	.word	0x0801a359
 801a2b0:	0801a359 	.word	0x0801a359
 801a2b4:	0801a359 	.word	0x0801a359
 801a2b8:	0801a359 	.word	0x0801a359
 801a2bc:	0801a359 	.word	0x0801a359
 801a2c0:	0801a359 	.word	0x0801a359
 801a2c4:	0801a359 	.word	0x0801a359
 801a2c8:	0801a359 	.word	0x0801a359
 801a2cc:	0801a359 	.word	0x0801a359
 801a2d0:	0801a359 	.word	0x0801a359
 801a2d4:	0801a359 	.word	0x0801a359
 801a2d8:	0801a34b 	.word	0x0801a34b
 801a2dc:	2b40      	cmp	r3, #64	@ 0x40
 801a2de:	d037      	beq.n	801a350 <UART_SetConfig+0x6bc>
 801a2e0:	e03a      	b.n	801a358 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 801a2e2:	f7fd f8d7 	bl	8017494 <HAL_RCCEx_GetD3PCLK1Freq>
 801a2e6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 801a2e8:	e03c      	b.n	801a364 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801a2ea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801a2ee:	4618      	mov	r0, r3
 801a2f0:	f7fd f8e6 	bl	80174c0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 801a2f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a2f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801a2f8:	e034      	b.n	801a364 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801a2fa:	f107 0318 	add.w	r3, r7, #24
 801a2fe:	4618      	mov	r0, r3
 801a300:	f7fd fa32 	bl	8017768 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 801a304:	69fb      	ldr	r3, [r7, #28]
 801a306:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801a308:	e02c      	b.n	801a364 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801a30a:	4b09      	ldr	r3, [pc, #36]	@ (801a330 <UART_SetConfig+0x69c>)
 801a30c:	681b      	ldr	r3, [r3, #0]
 801a30e:	f003 0320 	and.w	r3, r3, #32
 801a312:	2b00      	cmp	r3, #0
 801a314:	d016      	beq.n	801a344 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 801a316:	4b06      	ldr	r3, [pc, #24]	@ (801a330 <UART_SetConfig+0x69c>)
 801a318:	681b      	ldr	r3, [r3, #0]
 801a31a:	08db      	lsrs	r3, r3, #3
 801a31c:	f003 0303 	and.w	r3, r3, #3
 801a320:	4a07      	ldr	r2, [pc, #28]	@ (801a340 <UART_SetConfig+0x6ac>)
 801a322:	fa22 f303 	lsr.w	r3, r2, r3
 801a326:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 801a328:	e01c      	b.n	801a364 <UART_SetConfig+0x6d0>
 801a32a:	bf00      	nop
 801a32c:	40011400 	.word	0x40011400
 801a330:	58024400 	.word	0x58024400
 801a334:	40007800 	.word	0x40007800
 801a338:	40007c00 	.word	0x40007c00
 801a33c:	58000c00 	.word	0x58000c00
 801a340:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 801a344:	4b9d      	ldr	r3, [pc, #628]	@ (801a5bc <UART_SetConfig+0x928>)
 801a346:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801a348:	e00c      	b.n	801a364 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 801a34a:	4b9d      	ldr	r3, [pc, #628]	@ (801a5c0 <UART_SetConfig+0x92c>)
 801a34c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801a34e:	e009      	b.n	801a364 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801a350:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801a354:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801a356:	e005      	b.n	801a364 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 801a358:	2300      	movs	r3, #0
 801a35a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 801a35c:	2301      	movs	r3, #1
 801a35e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 801a362:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 801a364:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801a366:	2b00      	cmp	r3, #0
 801a368:	f000 81de 	beq.w	801a728 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 801a36c:	697b      	ldr	r3, [r7, #20]
 801a36e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801a370:	4a94      	ldr	r2, [pc, #592]	@ (801a5c4 <UART_SetConfig+0x930>)
 801a372:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801a376:	461a      	mov	r2, r3
 801a378:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801a37a:	fbb3 f3f2 	udiv	r3, r3, r2
 801a37e:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 801a380:	697b      	ldr	r3, [r7, #20]
 801a382:	685a      	ldr	r2, [r3, #4]
 801a384:	4613      	mov	r3, r2
 801a386:	005b      	lsls	r3, r3, #1
 801a388:	4413      	add	r3, r2
 801a38a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801a38c:	429a      	cmp	r2, r3
 801a38e:	d305      	bcc.n	801a39c <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 801a390:	697b      	ldr	r3, [r7, #20]
 801a392:	685b      	ldr	r3, [r3, #4]
 801a394:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 801a396:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801a398:	429a      	cmp	r2, r3
 801a39a:	d903      	bls.n	801a3a4 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 801a39c:	2301      	movs	r3, #1
 801a39e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 801a3a2:	e1c1      	b.n	801a728 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801a3a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801a3a6:	2200      	movs	r2, #0
 801a3a8:	60bb      	str	r3, [r7, #8]
 801a3aa:	60fa      	str	r2, [r7, #12]
 801a3ac:	697b      	ldr	r3, [r7, #20]
 801a3ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801a3b0:	4a84      	ldr	r2, [pc, #528]	@ (801a5c4 <UART_SetConfig+0x930>)
 801a3b2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801a3b6:	b29b      	uxth	r3, r3
 801a3b8:	2200      	movs	r2, #0
 801a3ba:	603b      	str	r3, [r7, #0]
 801a3bc:	607a      	str	r2, [r7, #4]
 801a3be:	e9d7 2300 	ldrd	r2, r3, [r7]
 801a3c2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 801a3c6:	f7e6 fabd 	bl	8000944 <__aeabi_uldivmod>
 801a3ca:	4602      	mov	r2, r0
 801a3cc:	460b      	mov	r3, r1
 801a3ce:	4610      	mov	r0, r2
 801a3d0:	4619      	mov	r1, r3
 801a3d2:	f04f 0200 	mov.w	r2, #0
 801a3d6:	f04f 0300 	mov.w	r3, #0
 801a3da:	020b      	lsls	r3, r1, #8
 801a3dc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 801a3e0:	0202      	lsls	r2, r0, #8
 801a3e2:	6979      	ldr	r1, [r7, #20]
 801a3e4:	6849      	ldr	r1, [r1, #4]
 801a3e6:	0849      	lsrs	r1, r1, #1
 801a3e8:	2000      	movs	r0, #0
 801a3ea:	460c      	mov	r4, r1
 801a3ec:	4605      	mov	r5, r0
 801a3ee:	eb12 0804 	adds.w	r8, r2, r4
 801a3f2:	eb43 0905 	adc.w	r9, r3, r5
 801a3f6:	697b      	ldr	r3, [r7, #20]
 801a3f8:	685b      	ldr	r3, [r3, #4]
 801a3fa:	2200      	movs	r2, #0
 801a3fc:	469a      	mov	sl, r3
 801a3fe:	4693      	mov	fp, r2
 801a400:	4652      	mov	r2, sl
 801a402:	465b      	mov	r3, fp
 801a404:	4640      	mov	r0, r8
 801a406:	4649      	mov	r1, r9
 801a408:	f7e6 fa9c 	bl	8000944 <__aeabi_uldivmod>
 801a40c:	4602      	mov	r2, r0
 801a40e:	460b      	mov	r3, r1
 801a410:	4613      	mov	r3, r2
 801a412:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 801a414:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801a416:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 801a41a:	d308      	bcc.n	801a42e <UART_SetConfig+0x79a>
 801a41c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801a41e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 801a422:	d204      	bcs.n	801a42e <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 801a424:	697b      	ldr	r3, [r7, #20]
 801a426:	681b      	ldr	r3, [r3, #0]
 801a428:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801a42a:	60da      	str	r2, [r3, #12]
 801a42c:	e17c      	b.n	801a728 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 801a42e:	2301      	movs	r3, #1
 801a430:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 801a434:	e178      	b.n	801a728 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801a436:	697b      	ldr	r3, [r7, #20]
 801a438:	69db      	ldr	r3, [r3, #28]
 801a43a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 801a43e:	f040 80c5 	bne.w	801a5cc <UART_SetConfig+0x938>
  {
    switch (clocksource)
 801a442:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 801a446:	2b20      	cmp	r3, #32
 801a448:	dc48      	bgt.n	801a4dc <UART_SetConfig+0x848>
 801a44a:	2b00      	cmp	r3, #0
 801a44c:	db7b      	blt.n	801a546 <UART_SetConfig+0x8b2>
 801a44e:	2b20      	cmp	r3, #32
 801a450:	d879      	bhi.n	801a546 <UART_SetConfig+0x8b2>
 801a452:	a201      	add	r2, pc, #4	@ (adr r2, 801a458 <UART_SetConfig+0x7c4>)
 801a454:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a458:	0801a4e3 	.word	0x0801a4e3
 801a45c:	0801a4eb 	.word	0x0801a4eb
 801a460:	0801a547 	.word	0x0801a547
 801a464:	0801a547 	.word	0x0801a547
 801a468:	0801a4f3 	.word	0x0801a4f3
 801a46c:	0801a547 	.word	0x0801a547
 801a470:	0801a547 	.word	0x0801a547
 801a474:	0801a547 	.word	0x0801a547
 801a478:	0801a503 	.word	0x0801a503
 801a47c:	0801a547 	.word	0x0801a547
 801a480:	0801a547 	.word	0x0801a547
 801a484:	0801a547 	.word	0x0801a547
 801a488:	0801a547 	.word	0x0801a547
 801a48c:	0801a547 	.word	0x0801a547
 801a490:	0801a547 	.word	0x0801a547
 801a494:	0801a547 	.word	0x0801a547
 801a498:	0801a513 	.word	0x0801a513
 801a49c:	0801a547 	.word	0x0801a547
 801a4a0:	0801a547 	.word	0x0801a547
 801a4a4:	0801a547 	.word	0x0801a547
 801a4a8:	0801a547 	.word	0x0801a547
 801a4ac:	0801a547 	.word	0x0801a547
 801a4b0:	0801a547 	.word	0x0801a547
 801a4b4:	0801a547 	.word	0x0801a547
 801a4b8:	0801a547 	.word	0x0801a547
 801a4bc:	0801a547 	.word	0x0801a547
 801a4c0:	0801a547 	.word	0x0801a547
 801a4c4:	0801a547 	.word	0x0801a547
 801a4c8:	0801a547 	.word	0x0801a547
 801a4cc:	0801a547 	.word	0x0801a547
 801a4d0:	0801a547 	.word	0x0801a547
 801a4d4:	0801a547 	.word	0x0801a547
 801a4d8:	0801a539 	.word	0x0801a539
 801a4dc:	2b40      	cmp	r3, #64	@ 0x40
 801a4de:	d02e      	beq.n	801a53e <UART_SetConfig+0x8aa>
 801a4e0:	e031      	b.n	801a546 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801a4e2:	f7fb f821 	bl	8015528 <HAL_RCC_GetPCLK1Freq>
 801a4e6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 801a4e8:	e033      	b.n	801a552 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801a4ea:	f7fb f833 	bl	8015554 <HAL_RCC_GetPCLK2Freq>
 801a4ee:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 801a4f0:	e02f      	b.n	801a552 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801a4f2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801a4f6:	4618      	mov	r0, r3
 801a4f8:	f7fc ffe2 	bl	80174c0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 801a4fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a4fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801a500:	e027      	b.n	801a552 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801a502:	f107 0318 	add.w	r3, r7, #24
 801a506:	4618      	mov	r0, r3
 801a508:	f7fd f92e 	bl	8017768 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 801a50c:	69fb      	ldr	r3, [r7, #28]
 801a50e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801a510:	e01f      	b.n	801a552 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801a512:	4b2d      	ldr	r3, [pc, #180]	@ (801a5c8 <UART_SetConfig+0x934>)
 801a514:	681b      	ldr	r3, [r3, #0]
 801a516:	f003 0320 	and.w	r3, r3, #32
 801a51a:	2b00      	cmp	r3, #0
 801a51c:	d009      	beq.n	801a532 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 801a51e:	4b2a      	ldr	r3, [pc, #168]	@ (801a5c8 <UART_SetConfig+0x934>)
 801a520:	681b      	ldr	r3, [r3, #0]
 801a522:	08db      	lsrs	r3, r3, #3
 801a524:	f003 0303 	and.w	r3, r3, #3
 801a528:	4a24      	ldr	r2, [pc, #144]	@ (801a5bc <UART_SetConfig+0x928>)
 801a52a:	fa22 f303 	lsr.w	r3, r2, r3
 801a52e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 801a530:	e00f      	b.n	801a552 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 801a532:	4b22      	ldr	r3, [pc, #136]	@ (801a5bc <UART_SetConfig+0x928>)
 801a534:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801a536:	e00c      	b.n	801a552 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 801a538:	4b21      	ldr	r3, [pc, #132]	@ (801a5c0 <UART_SetConfig+0x92c>)
 801a53a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801a53c:	e009      	b.n	801a552 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801a53e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801a542:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801a544:	e005      	b.n	801a552 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 801a546:	2300      	movs	r3, #0
 801a548:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 801a54a:	2301      	movs	r3, #1
 801a54c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 801a550:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 801a552:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801a554:	2b00      	cmp	r3, #0
 801a556:	f000 80e7 	beq.w	801a728 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801a55a:	697b      	ldr	r3, [r7, #20]
 801a55c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801a55e:	4a19      	ldr	r2, [pc, #100]	@ (801a5c4 <UART_SetConfig+0x930>)
 801a560:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801a564:	461a      	mov	r2, r3
 801a566:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801a568:	fbb3 f3f2 	udiv	r3, r3, r2
 801a56c:	005a      	lsls	r2, r3, #1
 801a56e:	697b      	ldr	r3, [r7, #20]
 801a570:	685b      	ldr	r3, [r3, #4]
 801a572:	085b      	lsrs	r3, r3, #1
 801a574:	441a      	add	r2, r3
 801a576:	697b      	ldr	r3, [r7, #20]
 801a578:	685b      	ldr	r3, [r3, #4]
 801a57a:	fbb2 f3f3 	udiv	r3, r2, r3
 801a57e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801a580:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801a582:	2b0f      	cmp	r3, #15
 801a584:	d916      	bls.n	801a5b4 <UART_SetConfig+0x920>
 801a586:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801a588:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801a58c:	d212      	bcs.n	801a5b4 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 801a58e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801a590:	b29b      	uxth	r3, r3
 801a592:	f023 030f 	bic.w	r3, r3, #15
 801a596:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 801a598:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801a59a:	085b      	lsrs	r3, r3, #1
 801a59c:	b29b      	uxth	r3, r3
 801a59e:	f003 0307 	and.w	r3, r3, #7
 801a5a2:	b29a      	uxth	r2, r3
 801a5a4:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 801a5a6:	4313      	orrs	r3, r2
 801a5a8:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 801a5aa:	697b      	ldr	r3, [r7, #20]
 801a5ac:	681b      	ldr	r3, [r3, #0]
 801a5ae:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 801a5b0:	60da      	str	r2, [r3, #12]
 801a5b2:	e0b9      	b.n	801a728 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 801a5b4:	2301      	movs	r3, #1
 801a5b6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 801a5ba:	e0b5      	b.n	801a728 <UART_SetConfig+0xa94>
 801a5bc:	03d09000 	.word	0x03d09000
 801a5c0:	003d0900 	.word	0x003d0900
 801a5c4:	080206b4 	.word	0x080206b4
 801a5c8:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 801a5cc:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 801a5d0:	2b20      	cmp	r3, #32
 801a5d2:	dc49      	bgt.n	801a668 <UART_SetConfig+0x9d4>
 801a5d4:	2b00      	cmp	r3, #0
 801a5d6:	db7c      	blt.n	801a6d2 <UART_SetConfig+0xa3e>
 801a5d8:	2b20      	cmp	r3, #32
 801a5da:	d87a      	bhi.n	801a6d2 <UART_SetConfig+0xa3e>
 801a5dc:	a201      	add	r2, pc, #4	@ (adr r2, 801a5e4 <UART_SetConfig+0x950>)
 801a5de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a5e2:	bf00      	nop
 801a5e4:	0801a66f 	.word	0x0801a66f
 801a5e8:	0801a677 	.word	0x0801a677
 801a5ec:	0801a6d3 	.word	0x0801a6d3
 801a5f0:	0801a6d3 	.word	0x0801a6d3
 801a5f4:	0801a67f 	.word	0x0801a67f
 801a5f8:	0801a6d3 	.word	0x0801a6d3
 801a5fc:	0801a6d3 	.word	0x0801a6d3
 801a600:	0801a6d3 	.word	0x0801a6d3
 801a604:	0801a68f 	.word	0x0801a68f
 801a608:	0801a6d3 	.word	0x0801a6d3
 801a60c:	0801a6d3 	.word	0x0801a6d3
 801a610:	0801a6d3 	.word	0x0801a6d3
 801a614:	0801a6d3 	.word	0x0801a6d3
 801a618:	0801a6d3 	.word	0x0801a6d3
 801a61c:	0801a6d3 	.word	0x0801a6d3
 801a620:	0801a6d3 	.word	0x0801a6d3
 801a624:	0801a69f 	.word	0x0801a69f
 801a628:	0801a6d3 	.word	0x0801a6d3
 801a62c:	0801a6d3 	.word	0x0801a6d3
 801a630:	0801a6d3 	.word	0x0801a6d3
 801a634:	0801a6d3 	.word	0x0801a6d3
 801a638:	0801a6d3 	.word	0x0801a6d3
 801a63c:	0801a6d3 	.word	0x0801a6d3
 801a640:	0801a6d3 	.word	0x0801a6d3
 801a644:	0801a6d3 	.word	0x0801a6d3
 801a648:	0801a6d3 	.word	0x0801a6d3
 801a64c:	0801a6d3 	.word	0x0801a6d3
 801a650:	0801a6d3 	.word	0x0801a6d3
 801a654:	0801a6d3 	.word	0x0801a6d3
 801a658:	0801a6d3 	.word	0x0801a6d3
 801a65c:	0801a6d3 	.word	0x0801a6d3
 801a660:	0801a6d3 	.word	0x0801a6d3
 801a664:	0801a6c5 	.word	0x0801a6c5
 801a668:	2b40      	cmp	r3, #64	@ 0x40
 801a66a:	d02e      	beq.n	801a6ca <UART_SetConfig+0xa36>
 801a66c:	e031      	b.n	801a6d2 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801a66e:	f7fa ff5b 	bl	8015528 <HAL_RCC_GetPCLK1Freq>
 801a672:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 801a674:	e033      	b.n	801a6de <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801a676:	f7fa ff6d 	bl	8015554 <HAL_RCC_GetPCLK2Freq>
 801a67a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 801a67c:	e02f      	b.n	801a6de <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801a67e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801a682:	4618      	mov	r0, r3
 801a684:	f7fc ff1c 	bl	80174c0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 801a688:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a68a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801a68c:	e027      	b.n	801a6de <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801a68e:	f107 0318 	add.w	r3, r7, #24
 801a692:	4618      	mov	r0, r3
 801a694:	f7fd f868 	bl	8017768 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 801a698:	69fb      	ldr	r3, [r7, #28]
 801a69a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801a69c:	e01f      	b.n	801a6de <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801a69e:	4b2d      	ldr	r3, [pc, #180]	@ (801a754 <UART_SetConfig+0xac0>)
 801a6a0:	681b      	ldr	r3, [r3, #0]
 801a6a2:	f003 0320 	and.w	r3, r3, #32
 801a6a6:	2b00      	cmp	r3, #0
 801a6a8:	d009      	beq.n	801a6be <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 801a6aa:	4b2a      	ldr	r3, [pc, #168]	@ (801a754 <UART_SetConfig+0xac0>)
 801a6ac:	681b      	ldr	r3, [r3, #0]
 801a6ae:	08db      	lsrs	r3, r3, #3
 801a6b0:	f003 0303 	and.w	r3, r3, #3
 801a6b4:	4a28      	ldr	r2, [pc, #160]	@ (801a758 <UART_SetConfig+0xac4>)
 801a6b6:	fa22 f303 	lsr.w	r3, r2, r3
 801a6ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 801a6bc:	e00f      	b.n	801a6de <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 801a6be:	4b26      	ldr	r3, [pc, #152]	@ (801a758 <UART_SetConfig+0xac4>)
 801a6c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801a6c2:	e00c      	b.n	801a6de <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 801a6c4:	4b25      	ldr	r3, [pc, #148]	@ (801a75c <UART_SetConfig+0xac8>)
 801a6c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801a6c8:	e009      	b.n	801a6de <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801a6ca:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801a6ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801a6d0:	e005      	b.n	801a6de <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 801a6d2:	2300      	movs	r3, #0
 801a6d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 801a6d6:	2301      	movs	r3, #1
 801a6d8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 801a6dc:	bf00      	nop
    }

    if (pclk != 0U)
 801a6de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801a6e0:	2b00      	cmp	r3, #0
 801a6e2:	d021      	beq.n	801a728 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801a6e4:	697b      	ldr	r3, [r7, #20]
 801a6e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801a6e8:	4a1d      	ldr	r2, [pc, #116]	@ (801a760 <UART_SetConfig+0xacc>)
 801a6ea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801a6ee:	461a      	mov	r2, r3
 801a6f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801a6f2:	fbb3 f2f2 	udiv	r2, r3, r2
 801a6f6:	697b      	ldr	r3, [r7, #20]
 801a6f8:	685b      	ldr	r3, [r3, #4]
 801a6fa:	085b      	lsrs	r3, r3, #1
 801a6fc:	441a      	add	r2, r3
 801a6fe:	697b      	ldr	r3, [r7, #20]
 801a700:	685b      	ldr	r3, [r3, #4]
 801a702:	fbb2 f3f3 	udiv	r3, r2, r3
 801a706:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801a708:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801a70a:	2b0f      	cmp	r3, #15
 801a70c:	d909      	bls.n	801a722 <UART_SetConfig+0xa8e>
 801a70e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801a710:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801a714:	d205      	bcs.n	801a722 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 801a716:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801a718:	b29a      	uxth	r2, r3
 801a71a:	697b      	ldr	r3, [r7, #20]
 801a71c:	681b      	ldr	r3, [r3, #0]
 801a71e:	60da      	str	r2, [r3, #12]
 801a720:	e002      	b.n	801a728 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 801a722:	2301      	movs	r3, #1
 801a724:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 801a728:	697b      	ldr	r3, [r7, #20]
 801a72a:	2201      	movs	r2, #1
 801a72c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 801a730:	697b      	ldr	r3, [r7, #20]
 801a732:	2201      	movs	r2, #1
 801a734:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 801a738:	697b      	ldr	r3, [r7, #20]
 801a73a:	2200      	movs	r2, #0
 801a73c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 801a73e:	697b      	ldr	r3, [r7, #20]
 801a740:	2200      	movs	r2, #0
 801a742:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 801a744:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 801a748:	4618      	mov	r0, r3
 801a74a:	3748      	adds	r7, #72	@ 0x48
 801a74c:	46bd      	mov	sp, r7
 801a74e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801a752:	bf00      	nop
 801a754:	58024400 	.word	0x58024400
 801a758:	03d09000 	.word	0x03d09000
 801a75c:	003d0900 	.word	0x003d0900
 801a760:	080206b4 	.word	0x080206b4

0801a764 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 801a764:	b480      	push	{r7}
 801a766:	b083      	sub	sp, #12
 801a768:	af00      	add	r7, sp, #0
 801a76a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 801a76c:	687b      	ldr	r3, [r7, #4]
 801a76e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801a770:	f003 0308 	and.w	r3, r3, #8
 801a774:	2b00      	cmp	r3, #0
 801a776:	d00a      	beq.n	801a78e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 801a778:	687b      	ldr	r3, [r7, #4]
 801a77a:	681b      	ldr	r3, [r3, #0]
 801a77c:	685b      	ldr	r3, [r3, #4]
 801a77e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 801a782:	687b      	ldr	r3, [r7, #4]
 801a784:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801a786:	687b      	ldr	r3, [r7, #4]
 801a788:	681b      	ldr	r3, [r3, #0]
 801a78a:	430a      	orrs	r2, r1
 801a78c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 801a78e:	687b      	ldr	r3, [r7, #4]
 801a790:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801a792:	f003 0301 	and.w	r3, r3, #1
 801a796:	2b00      	cmp	r3, #0
 801a798:	d00a      	beq.n	801a7b0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 801a79a:	687b      	ldr	r3, [r7, #4]
 801a79c:	681b      	ldr	r3, [r3, #0]
 801a79e:	685b      	ldr	r3, [r3, #4]
 801a7a0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 801a7a4:	687b      	ldr	r3, [r7, #4]
 801a7a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801a7a8:	687b      	ldr	r3, [r7, #4]
 801a7aa:	681b      	ldr	r3, [r3, #0]
 801a7ac:	430a      	orrs	r2, r1
 801a7ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 801a7b0:	687b      	ldr	r3, [r7, #4]
 801a7b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801a7b4:	f003 0302 	and.w	r3, r3, #2
 801a7b8:	2b00      	cmp	r3, #0
 801a7ba:	d00a      	beq.n	801a7d2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 801a7bc:	687b      	ldr	r3, [r7, #4]
 801a7be:	681b      	ldr	r3, [r3, #0]
 801a7c0:	685b      	ldr	r3, [r3, #4]
 801a7c2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 801a7c6:	687b      	ldr	r3, [r7, #4]
 801a7c8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 801a7ca:	687b      	ldr	r3, [r7, #4]
 801a7cc:	681b      	ldr	r3, [r3, #0]
 801a7ce:	430a      	orrs	r2, r1
 801a7d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 801a7d2:	687b      	ldr	r3, [r7, #4]
 801a7d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801a7d6:	f003 0304 	and.w	r3, r3, #4
 801a7da:	2b00      	cmp	r3, #0
 801a7dc:	d00a      	beq.n	801a7f4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 801a7de:	687b      	ldr	r3, [r7, #4]
 801a7e0:	681b      	ldr	r3, [r3, #0]
 801a7e2:	685b      	ldr	r3, [r3, #4]
 801a7e4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 801a7e8:	687b      	ldr	r3, [r7, #4]
 801a7ea:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801a7ec:	687b      	ldr	r3, [r7, #4]
 801a7ee:	681b      	ldr	r3, [r3, #0]
 801a7f0:	430a      	orrs	r2, r1
 801a7f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 801a7f4:	687b      	ldr	r3, [r7, #4]
 801a7f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801a7f8:	f003 0310 	and.w	r3, r3, #16
 801a7fc:	2b00      	cmp	r3, #0
 801a7fe:	d00a      	beq.n	801a816 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 801a800:	687b      	ldr	r3, [r7, #4]
 801a802:	681b      	ldr	r3, [r3, #0]
 801a804:	689b      	ldr	r3, [r3, #8]
 801a806:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 801a80a:	687b      	ldr	r3, [r7, #4]
 801a80c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 801a80e:	687b      	ldr	r3, [r7, #4]
 801a810:	681b      	ldr	r3, [r3, #0]
 801a812:	430a      	orrs	r2, r1
 801a814:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 801a816:	687b      	ldr	r3, [r7, #4]
 801a818:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801a81a:	f003 0320 	and.w	r3, r3, #32
 801a81e:	2b00      	cmp	r3, #0
 801a820:	d00a      	beq.n	801a838 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 801a822:	687b      	ldr	r3, [r7, #4]
 801a824:	681b      	ldr	r3, [r3, #0]
 801a826:	689b      	ldr	r3, [r3, #8]
 801a828:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 801a82c:	687b      	ldr	r3, [r7, #4]
 801a82e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 801a830:	687b      	ldr	r3, [r7, #4]
 801a832:	681b      	ldr	r3, [r3, #0]
 801a834:	430a      	orrs	r2, r1
 801a836:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 801a838:	687b      	ldr	r3, [r7, #4]
 801a83a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801a83c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801a840:	2b00      	cmp	r3, #0
 801a842:	d01a      	beq.n	801a87a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 801a844:	687b      	ldr	r3, [r7, #4]
 801a846:	681b      	ldr	r3, [r3, #0]
 801a848:	685b      	ldr	r3, [r3, #4]
 801a84a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 801a84e:	687b      	ldr	r3, [r7, #4]
 801a850:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801a852:	687b      	ldr	r3, [r7, #4]
 801a854:	681b      	ldr	r3, [r3, #0]
 801a856:	430a      	orrs	r2, r1
 801a858:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 801a85a:	687b      	ldr	r3, [r7, #4]
 801a85c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801a85e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 801a862:	d10a      	bne.n	801a87a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 801a864:	687b      	ldr	r3, [r7, #4]
 801a866:	681b      	ldr	r3, [r3, #0]
 801a868:	685b      	ldr	r3, [r3, #4]
 801a86a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 801a86e:	687b      	ldr	r3, [r7, #4]
 801a870:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 801a872:	687b      	ldr	r3, [r7, #4]
 801a874:	681b      	ldr	r3, [r3, #0]
 801a876:	430a      	orrs	r2, r1
 801a878:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 801a87a:	687b      	ldr	r3, [r7, #4]
 801a87c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801a87e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801a882:	2b00      	cmp	r3, #0
 801a884:	d00a      	beq.n	801a89c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 801a886:	687b      	ldr	r3, [r7, #4]
 801a888:	681b      	ldr	r3, [r3, #0]
 801a88a:	685b      	ldr	r3, [r3, #4]
 801a88c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 801a890:	687b      	ldr	r3, [r7, #4]
 801a892:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 801a894:	687b      	ldr	r3, [r7, #4]
 801a896:	681b      	ldr	r3, [r3, #0]
 801a898:	430a      	orrs	r2, r1
 801a89a:	605a      	str	r2, [r3, #4]
  }
}
 801a89c:	bf00      	nop
 801a89e:	370c      	adds	r7, #12
 801a8a0:	46bd      	mov	sp, r7
 801a8a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a8a6:	4770      	bx	lr

0801a8a8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 801a8a8:	b580      	push	{r7, lr}
 801a8aa:	b098      	sub	sp, #96	@ 0x60
 801a8ac:	af02      	add	r7, sp, #8
 801a8ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801a8b0:	687b      	ldr	r3, [r7, #4]
 801a8b2:	2200      	movs	r2, #0
 801a8b4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 801a8b8:	f7f6 ff5a 	bl	8011770 <HAL_GetTick>
 801a8bc:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 801a8be:	687b      	ldr	r3, [r7, #4]
 801a8c0:	681b      	ldr	r3, [r3, #0]
 801a8c2:	681b      	ldr	r3, [r3, #0]
 801a8c4:	f003 0308 	and.w	r3, r3, #8
 801a8c8:	2b08      	cmp	r3, #8
 801a8ca:	d12f      	bne.n	801a92c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801a8cc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 801a8d0:	9300      	str	r3, [sp, #0]
 801a8d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a8d4:	2200      	movs	r2, #0
 801a8d6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 801a8da:	6878      	ldr	r0, [r7, #4]
 801a8dc:	f000 f88e 	bl	801a9fc <UART_WaitOnFlagUntilTimeout>
 801a8e0:	4603      	mov	r3, r0
 801a8e2:	2b00      	cmp	r3, #0
 801a8e4:	d022      	beq.n	801a92c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 801a8e6:	687b      	ldr	r3, [r7, #4]
 801a8e8:	681b      	ldr	r3, [r3, #0]
 801a8ea:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a8ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801a8ee:	e853 3f00 	ldrex	r3, [r3]
 801a8f2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 801a8f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a8f6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 801a8fa:	653b      	str	r3, [r7, #80]	@ 0x50
 801a8fc:	687b      	ldr	r3, [r7, #4]
 801a8fe:	681b      	ldr	r3, [r3, #0]
 801a900:	461a      	mov	r2, r3
 801a902:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801a904:	647b      	str	r3, [r7, #68]	@ 0x44
 801a906:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a908:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 801a90a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801a90c:	e841 2300 	strex	r3, r2, [r1]
 801a910:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 801a912:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801a914:	2b00      	cmp	r3, #0
 801a916:	d1e6      	bne.n	801a8e6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 801a918:	687b      	ldr	r3, [r7, #4]
 801a91a:	2220      	movs	r2, #32
 801a91c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 801a920:	687b      	ldr	r3, [r7, #4]
 801a922:	2200      	movs	r2, #0
 801a924:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 801a928:	2303      	movs	r3, #3
 801a92a:	e063      	b.n	801a9f4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 801a92c:	687b      	ldr	r3, [r7, #4]
 801a92e:	681b      	ldr	r3, [r3, #0]
 801a930:	681b      	ldr	r3, [r3, #0]
 801a932:	f003 0304 	and.w	r3, r3, #4
 801a936:	2b04      	cmp	r3, #4
 801a938:	d149      	bne.n	801a9ce <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801a93a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 801a93e:	9300      	str	r3, [sp, #0]
 801a940:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a942:	2200      	movs	r2, #0
 801a944:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 801a948:	6878      	ldr	r0, [r7, #4]
 801a94a:	f000 f857 	bl	801a9fc <UART_WaitOnFlagUntilTimeout>
 801a94e:	4603      	mov	r3, r0
 801a950:	2b00      	cmp	r3, #0
 801a952:	d03c      	beq.n	801a9ce <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 801a954:	687b      	ldr	r3, [r7, #4]
 801a956:	681b      	ldr	r3, [r3, #0]
 801a958:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a95a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a95c:	e853 3f00 	ldrex	r3, [r3]
 801a960:	623b      	str	r3, [r7, #32]
   return(result);
 801a962:	6a3b      	ldr	r3, [r7, #32]
 801a964:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 801a968:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801a96a:	687b      	ldr	r3, [r7, #4]
 801a96c:	681b      	ldr	r3, [r3, #0]
 801a96e:	461a      	mov	r2, r3
 801a970:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801a972:	633b      	str	r3, [r7, #48]	@ 0x30
 801a974:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a976:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801a978:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801a97a:	e841 2300 	strex	r3, r2, [r1]
 801a97e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 801a980:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a982:	2b00      	cmp	r3, #0
 801a984:	d1e6      	bne.n	801a954 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801a986:	687b      	ldr	r3, [r7, #4]
 801a988:	681b      	ldr	r3, [r3, #0]
 801a98a:	3308      	adds	r3, #8
 801a98c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a98e:	693b      	ldr	r3, [r7, #16]
 801a990:	e853 3f00 	ldrex	r3, [r3]
 801a994:	60fb      	str	r3, [r7, #12]
   return(result);
 801a996:	68fb      	ldr	r3, [r7, #12]
 801a998:	f023 0301 	bic.w	r3, r3, #1
 801a99c:	64bb      	str	r3, [r7, #72]	@ 0x48
 801a99e:	687b      	ldr	r3, [r7, #4]
 801a9a0:	681b      	ldr	r3, [r3, #0]
 801a9a2:	3308      	adds	r3, #8
 801a9a4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801a9a6:	61fa      	str	r2, [r7, #28]
 801a9a8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a9aa:	69b9      	ldr	r1, [r7, #24]
 801a9ac:	69fa      	ldr	r2, [r7, #28]
 801a9ae:	e841 2300 	strex	r3, r2, [r1]
 801a9b2:	617b      	str	r3, [r7, #20]
   return(result);
 801a9b4:	697b      	ldr	r3, [r7, #20]
 801a9b6:	2b00      	cmp	r3, #0
 801a9b8:	d1e5      	bne.n	801a986 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 801a9ba:	687b      	ldr	r3, [r7, #4]
 801a9bc:	2220      	movs	r2, #32
 801a9be:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 801a9c2:	687b      	ldr	r3, [r7, #4]
 801a9c4:	2200      	movs	r2, #0
 801a9c6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 801a9ca:	2303      	movs	r3, #3
 801a9cc:	e012      	b.n	801a9f4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 801a9ce:	687b      	ldr	r3, [r7, #4]
 801a9d0:	2220      	movs	r2, #32
 801a9d2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 801a9d6:	687b      	ldr	r3, [r7, #4]
 801a9d8:	2220      	movs	r2, #32
 801a9da:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801a9de:	687b      	ldr	r3, [r7, #4]
 801a9e0:	2200      	movs	r2, #0
 801a9e2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 801a9e4:	687b      	ldr	r3, [r7, #4]
 801a9e6:	2200      	movs	r2, #0
 801a9e8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 801a9ea:	687b      	ldr	r3, [r7, #4]
 801a9ec:	2200      	movs	r2, #0
 801a9ee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 801a9f2:	2300      	movs	r3, #0
}
 801a9f4:	4618      	mov	r0, r3
 801a9f6:	3758      	adds	r7, #88	@ 0x58
 801a9f8:	46bd      	mov	sp, r7
 801a9fa:	bd80      	pop	{r7, pc}

0801a9fc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 801a9fc:	b580      	push	{r7, lr}
 801a9fe:	b084      	sub	sp, #16
 801aa00:	af00      	add	r7, sp, #0
 801aa02:	60f8      	str	r0, [r7, #12]
 801aa04:	60b9      	str	r1, [r7, #8]
 801aa06:	603b      	str	r3, [r7, #0]
 801aa08:	4613      	mov	r3, r2
 801aa0a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801aa0c:	e04f      	b.n	801aaae <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801aa0e:	69bb      	ldr	r3, [r7, #24]
 801aa10:	f1b3 3fff 	cmp.w	r3, #4294967295
 801aa14:	d04b      	beq.n	801aaae <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801aa16:	f7f6 feab 	bl	8011770 <HAL_GetTick>
 801aa1a:	4602      	mov	r2, r0
 801aa1c:	683b      	ldr	r3, [r7, #0]
 801aa1e:	1ad3      	subs	r3, r2, r3
 801aa20:	69ba      	ldr	r2, [r7, #24]
 801aa22:	429a      	cmp	r2, r3
 801aa24:	d302      	bcc.n	801aa2c <UART_WaitOnFlagUntilTimeout+0x30>
 801aa26:	69bb      	ldr	r3, [r7, #24]
 801aa28:	2b00      	cmp	r3, #0
 801aa2a:	d101      	bne.n	801aa30 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 801aa2c:	2303      	movs	r3, #3
 801aa2e:	e04e      	b.n	801aace <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 801aa30:	68fb      	ldr	r3, [r7, #12]
 801aa32:	681b      	ldr	r3, [r3, #0]
 801aa34:	681b      	ldr	r3, [r3, #0]
 801aa36:	f003 0304 	and.w	r3, r3, #4
 801aa3a:	2b00      	cmp	r3, #0
 801aa3c:	d037      	beq.n	801aaae <UART_WaitOnFlagUntilTimeout+0xb2>
 801aa3e:	68bb      	ldr	r3, [r7, #8]
 801aa40:	2b80      	cmp	r3, #128	@ 0x80
 801aa42:	d034      	beq.n	801aaae <UART_WaitOnFlagUntilTimeout+0xb2>
 801aa44:	68bb      	ldr	r3, [r7, #8]
 801aa46:	2b40      	cmp	r3, #64	@ 0x40
 801aa48:	d031      	beq.n	801aaae <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 801aa4a:	68fb      	ldr	r3, [r7, #12]
 801aa4c:	681b      	ldr	r3, [r3, #0]
 801aa4e:	69db      	ldr	r3, [r3, #28]
 801aa50:	f003 0308 	and.w	r3, r3, #8
 801aa54:	2b08      	cmp	r3, #8
 801aa56:	d110      	bne.n	801aa7a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 801aa58:	68fb      	ldr	r3, [r7, #12]
 801aa5a:	681b      	ldr	r3, [r3, #0]
 801aa5c:	2208      	movs	r2, #8
 801aa5e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 801aa60:	68f8      	ldr	r0, [r7, #12]
 801aa62:	f000 f839 	bl	801aad8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 801aa66:	68fb      	ldr	r3, [r7, #12]
 801aa68:	2208      	movs	r2, #8
 801aa6a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 801aa6e:	68fb      	ldr	r3, [r7, #12]
 801aa70:	2200      	movs	r2, #0
 801aa72:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 801aa76:	2301      	movs	r3, #1
 801aa78:	e029      	b.n	801aace <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 801aa7a:	68fb      	ldr	r3, [r7, #12]
 801aa7c:	681b      	ldr	r3, [r3, #0]
 801aa7e:	69db      	ldr	r3, [r3, #28]
 801aa80:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 801aa84:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 801aa88:	d111      	bne.n	801aaae <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801aa8a:	68fb      	ldr	r3, [r7, #12]
 801aa8c:	681b      	ldr	r3, [r3, #0]
 801aa8e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 801aa92:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 801aa94:	68f8      	ldr	r0, [r7, #12]
 801aa96:	f000 f81f 	bl	801aad8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 801aa9a:	68fb      	ldr	r3, [r7, #12]
 801aa9c:	2220      	movs	r2, #32
 801aa9e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 801aaa2:	68fb      	ldr	r3, [r7, #12]
 801aaa4:	2200      	movs	r2, #0
 801aaa6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 801aaaa:	2303      	movs	r3, #3
 801aaac:	e00f      	b.n	801aace <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801aaae:	68fb      	ldr	r3, [r7, #12]
 801aab0:	681b      	ldr	r3, [r3, #0]
 801aab2:	69da      	ldr	r2, [r3, #28]
 801aab4:	68bb      	ldr	r3, [r7, #8]
 801aab6:	4013      	ands	r3, r2
 801aab8:	68ba      	ldr	r2, [r7, #8]
 801aaba:	429a      	cmp	r2, r3
 801aabc:	bf0c      	ite	eq
 801aabe:	2301      	moveq	r3, #1
 801aac0:	2300      	movne	r3, #0
 801aac2:	b2db      	uxtb	r3, r3
 801aac4:	461a      	mov	r2, r3
 801aac6:	79fb      	ldrb	r3, [r7, #7]
 801aac8:	429a      	cmp	r2, r3
 801aaca:	d0a0      	beq.n	801aa0e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 801aacc:	2300      	movs	r3, #0
}
 801aace:	4618      	mov	r0, r3
 801aad0:	3710      	adds	r7, #16
 801aad2:	46bd      	mov	sp, r7
 801aad4:	bd80      	pop	{r7, pc}
	...

0801aad8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 801aad8:	b480      	push	{r7}
 801aada:	b095      	sub	sp, #84	@ 0x54
 801aadc:	af00      	add	r7, sp, #0
 801aade:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 801aae0:	687b      	ldr	r3, [r7, #4]
 801aae2:	681b      	ldr	r3, [r3, #0]
 801aae4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801aae6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801aae8:	e853 3f00 	ldrex	r3, [r3]
 801aaec:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 801aaee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801aaf0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 801aaf4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801aaf6:	687b      	ldr	r3, [r7, #4]
 801aaf8:	681b      	ldr	r3, [r3, #0]
 801aafa:	461a      	mov	r2, r3
 801aafc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801aafe:	643b      	str	r3, [r7, #64]	@ 0x40
 801ab00:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801ab02:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 801ab04:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801ab06:	e841 2300 	strex	r3, r2, [r1]
 801ab0a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 801ab0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ab0e:	2b00      	cmp	r3, #0
 801ab10:	d1e6      	bne.n	801aae0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801ab12:	687b      	ldr	r3, [r7, #4]
 801ab14:	681b      	ldr	r3, [r3, #0]
 801ab16:	3308      	adds	r3, #8
 801ab18:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801ab1a:	6a3b      	ldr	r3, [r7, #32]
 801ab1c:	e853 3f00 	ldrex	r3, [r3]
 801ab20:	61fb      	str	r3, [r7, #28]
   return(result);
 801ab22:	69fa      	ldr	r2, [r7, #28]
 801ab24:	4b1e      	ldr	r3, [pc, #120]	@ (801aba0 <UART_EndRxTransfer+0xc8>)
 801ab26:	4013      	ands	r3, r2
 801ab28:	64bb      	str	r3, [r7, #72]	@ 0x48
 801ab2a:	687b      	ldr	r3, [r7, #4]
 801ab2c:	681b      	ldr	r3, [r3, #0]
 801ab2e:	3308      	adds	r3, #8
 801ab30:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801ab32:	62fa      	str	r2, [r7, #44]	@ 0x2c
 801ab34:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801ab36:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801ab38:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801ab3a:	e841 2300 	strex	r3, r2, [r1]
 801ab3e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 801ab40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ab42:	2b00      	cmp	r3, #0
 801ab44:	d1e5      	bne.n	801ab12 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801ab46:	687b      	ldr	r3, [r7, #4]
 801ab48:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801ab4a:	2b01      	cmp	r3, #1
 801ab4c:	d118      	bne.n	801ab80 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801ab4e:	687b      	ldr	r3, [r7, #4]
 801ab50:	681b      	ldr	r3, [r3, #0]
 801ab52:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801ab54:	68fb      	ldr	r3, [r7, #12]
 801ab56:	e853 3f00 	ldrex	r3, [r3]
 801ab5a:	60bb      	str	r3, [r7, #8]
   return(result);
 801ab5c:	68bb      	ldr	r3, [r7, #8]
 801ab5e:	f023 0310 	bic.w	r3, r3, #16
 801ab62:	647b      	str	r3, [r7, #68]	@ 0x44
 801ab64:	687b      	ldr	r3, [r7, #4]
 801ab66:	681b      	ldr	r3, [r3, #0]
 801ab68:	461a      	mov	r2, r3
 801ab6a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801ab6c:	61bb      	str	r3, [r7, #24]
 801ab6e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801ab70:	6979      	ldr	r1, [r7, #20]
 801ab72:	69ba      	ldr	r2, [r7, #24]
 801ab74:	e841 2300 	strex	r3, r2, [r1]
 801ab78:	613b      	str	r3, [r7, #16]
   return(result);
 801ab7a:	693b      	ldr	r3, [r7, #16]
 801ab7c:	2b00      	cmp	r3, #0
 801ab7e:	d1e6      	bne.n	801ab4e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 801ab80:	687b      	ldr	r3, [r7, #4]
 801ab82:	2220      	movs	r2, #32
 801ab84:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801ab88:	687b      	ldr	r3, [r7, #4]
 801ab8a:	2200      	movs	r2, #0
 801ab8c:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 801ab8e:	687b      	ldr	r3, [r7, #4]
 801ab90:	2200      	movs	r2, #0
 801ab92:	675a      	str	r2, [r3, #116]	@ 0x74
}
 801ab94:	bf00      	nop
 801ab96:	3754      	adds	r7, #84	@ 0x54
 801ab98:	46bd      	mov	sp, r7
 801ab9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ab9e:	4770      	bx	lr
 801aba0:	effffffe 	.word	0xeffffffe

0801aba4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 801aba4:	b480      	push	{r7}
 801aba6:	b085      	sub	sp, #20
 801aba8:	af00      	add	r7, sp, #0
 801abaa:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 801abac:	687b      	ldr	r3, [r7, #4]
 801abae:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 801abb2:	2b01      	cmp	r3, #1
 801abb4:	d101      	bne.n	801abba <HAL_UARTEx_DisableFifoMode+0x16>
 801abb6:	2302      	movs	r3, #2
 801abb8:	e027      	b.n	801ac0a <HAL_UARTEx_DisableFifoMode+0x66>
 801abba:	687b      	ldr	r3, [r7, #4]
 801abbc:	2201      	movs	r2, #1
 801abbe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801abc2:	687b      	ldr	r3, [r7, #4]
 801abc4:	2224      	movs	r2, #36	@ 0x24
 801abc6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801abca:	687b      	ldr	r3, [r7, #4]
 801abcc:	681b      	ldr	r3, [r3, #0]
 801abce:	681b      	ldr	r3, [r3, #0]
 801abd0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801abd2:	687b      	ldr	r3, [r7, #4]
 801abd4:	681b      	ldr	r3, [r3, #0]
 801abd6:	681a      	ldr	r2, [r3, #0]
 801abd8:	687b      	ldr	r3, [r7, #4]
 801abda:	681b      	ldr	r3, [r3, #0]
 801abdc:	f022 0201 	bic.w	r2, r2, #1
 801abe0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 801abe2:	68fb      	ldr	r3, [r7, #12]
 801abe4:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 801abe8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 801abea:	687b      	ldr	r3, [r7, #4]
 801abec:	2200      	movs	r2, #0
 801abee:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801abf0:	687b      	ldr	r3, [r7, #4]
 801abf2:	681b      	ldr	r3, [r3, #0]
 801abf4:	68fa      	ldr	r2, [r7, #12]
 801abf6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801abf8:	687b      	ldr	r3, [r7, #4]
 801abfa:	2220      	movs	r2, #32
 801abfc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801ac00:	687b      	ldr	r3, [r7, #4]
 801ac02:	2200      	movs	r2, #0
 801ac04:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 801ac08:	2300      	movs	r3, #0
}
 801ac0a:	4618      	mov	r0, r3
 801ac0c:	3714      	adds	r7, #20
 801ac0e:	46bd      	mov	sp, r7
 801ac10:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ac14:	4770      	bx	lr

0801ac16 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 801ac16:	b580      	push	{r7, lr}
 801ac18:	b084      	sub	sp, #16
 801ac1a:	af00      	add	r7, sp, #0
 801ac1c:	6078      	str	r0, [r7, #4]
 801ac1e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 801ac20:	687b      	ldr	r3, [r7, #4]
 801ac22:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 801ac26:	2b01      	cmp	r3, #1
 801ac28:	d101      	bne.n	801ac2e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 801ac2a:	2302      	movs	r3, #2
 801ac2c:	e02d      	b.n	801ac8a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 801ac2e:	687b      	ldr	r3, [r7, #4]
 801ac30:	2201      	movs	r2, #1
 801ac32:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801ac36:	687b      	ldr	r3, [r7, #4]
 801ac38:	2224      	movs	r2, #36	@ 0x24
 801ac3a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801ac3e:	687b      	ldr	r3, [r7, #4]
 801ac40:	681b      	ldr	r3, [r3, #0]
 801ac42:	681b      	ldr	r3, [r3, #0]
 801ac44:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801ac46:	687b      	ldr	r3, [r7, #4]
 801ac48:	681b      	ldr	r3, [r3, #0]
 801ac4a:	681a      	ldr	r2, [r3, #0]
 801ac4c:	687b      	ldr	r3, [r7, #4]
 801ac4e:	681b      	ldr	r3, [r3, #0]
 801ac50:	f022 0201 	bic.w	r2, r2, #1
 801ac54:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 801ac56:	687b      	ldr	r3, [r7, #4]
 801ac58:	681b      	ldr	r3, [r3, #0]
 801ac5a:	689b      	ldr	r3, [r3, #8]
 801ac5c:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 801ac60:	687b      	ldr	r3, [r7, #4]
 801ac62:	681b      	ldr	r3, [r3, #0]
 801ac64:	683a      	ldr	r2, [r7, #0]
 801ac66:	430a      	orrs	r2, r1
 801ac68:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801ac6a:	6878      	ldr	r0, [r7, #4]
 801ac6c:	f000 f850 	bl	801ad10 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801ac70:	687b      	ldr	r3, [r7, #4]
 801ac72:	681b      	ldr	r3, [r3, #0]
 801ac74:	68fa      	ldr	r2, [r7, #12]
 801ac76:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801ac78:	687b      	ldr	r3, [r7, #4]
 801ac7a:	2220      	movs	r2, #32
 801ac7c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801ac80:	687b      	ldr	r3, [r7, #4]
 801ac82:	2200      	movs	r2, #0
 801ac84:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 801ac88:	2300      	movs	r3, #0
}
 801ac8a:	4618      	mov	r0, r3
 801ac8c:	3710      	adds	r7, #16
 801ac8e:	46bd      	mov	sp, r7
 801ac90:	bd80      	pop	{r7, pc}

0801ac92 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 801ac92:	b580      	push	{r7, lr}
 801ac94:	b084      	sub	sp, #16
 801ac96:	af00      	add	r7, sp, #0
 801ac98:	6078      	str	r0, [r7, #4]
 801ac9a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 801ac9c:	687b      	ldr	r3, [r7, #4]
 801ac9e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 801aca2:	2b01      	cmp	r3, #1
 801aca4:	d101      	bne.n	801acaa <HAL_UARTEx_SetRxFifoThreshold+0x18>
 801aca6:	2302      	movs	r3, #2
 801aca8:	e02d      	b.n	801ad06 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 801acaa:	687b      	ldr	r3, [r7, #4]
 801acac:	2201      	movs	r2, #1
 801acae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801acb2:	687b      	ldr	r3, [r7, #4]
 801acb4:	2224      	movs	r2, #36	@ 0x24
 801acb6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801acba:	687b      	ldr	r3, [r7, #4]
 801acbc:	681b      	ldr	r3, [r3, #0]
 801acbe:	681b      	ldr	r3, [r3, #0]
 801acc0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801acc2:	687b      	ldr	r3, [r7, #4]
 801acc4:	681b      	ldr	r3, [r3, #0]
 801acc6:	681a      	ldr	r2, [r3, #0]
 801acc8:	687b      	ldr	r3, [r7, #4]
 801acca:	681b      	ldr	r3, [r3, #0]
 801accc:	f022 0201 	bic.w	r2, r2, #1
 801acd0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 801acd2:	687b      	ldr	r3, [r7, #4]
 801acd4:	681b      	ldr	r3, [r3, #0]
 801acd6:	689b      	ldr	r3, [r3, #8]
 801acd8:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 801acdc:	687b      	ldr	r3, [r7, #4]
 801acde:	681b      	ldr	r3, [r3, #0]
 801ace0:	683a      	ldr	r2, [r7, #0]
 801ace2:	430a      	orrs	r2, r1
 801ace4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801ace6:	6878      	ldr	r0, [r7, #4]
 801ace8:	f000 f812 	bl	801ad10 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801acec:	687b      	ldr	r3, [r7, #4]
 801acee:	681b      	ldr	r3, [r3, #0]
 801acf0:	68fa      	ldr	r2, [r7, #12]
 801acf2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801acf4:	687b      	ldr	r3, [r7, #4]
 801acf6:	2220      	movs	r2, #32
 801acf8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801acfc:	687b      	ldr	r3, [r7, #4]
 801acfe:	2200      	movs	r2, #0
 801ad00:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 801ad04:	2300      	movs	r3, #0
}
 801ad06:	4618      	mov	r0, r3
 801ad08:	3710      	adds	r7, #16
 801ad0a:	46bd      	mov	sp, r7
 801ad0c:	bd80      	pop	{r7, pc}
	...

0801ad10 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 801ad10:	b480      	push	{r7}
 801ad12:	b085      	sub	sp, #20
 801ad14:	af00      	add	r7, sp, #0
 801ad16:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 801ad18:	687b      	ldr	r3, [r7, #4]
 801ad1a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801ad1c:	2b00      	cmp	r3, #0
 801ad1e:	d108      	bne.n	801ad32 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 801ad20:	687b      	ldr	r3, [r7, #4]
 801ad22:	2201      	movs	r2, #1
 801ad24:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 801ad28:	687b      	ldr	r3, [r7, #4]
 801ad2a:	2201      	movs	r2, #1
 801ad2c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 801ad30:	e031      	b.n	801ad96 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 801ad32:	2310      	movs	r3, #16
 801ad34:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 801ad36:	2310      	movs	r3, #16
 801ad38:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 801ad3a:	687b      	ldr	r3, [r7, #4]
 801ad3c:	681b      	ldr	r3, [r3, #0]
 801ad3e:	689b      	ldr	r3, [r3, #8]
 801ad40:	0e5b      	lsrs	r3, r3, #25
 801ad42:	b2db      	uxtb	r3, r3
 801ad44:	f003 0307 	and.w	r3, r3, #7
 801ad48:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 801ad4a:	687b      	ldr	r3, [r7, #4]
 801ad4c:	681b      	ldr	r3, [r3, #0]
 801ad4e:	689b      	ldr	r3, [r3, #8]
 801ad50:	0f5b      	lsrs	r3, r3, #29
 801ad52:	b2db      	uxtb	r3, r3
 801ad54:	f003 0307 	and.w	r3, r3, #7
 801ad58:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 801ad5a:	7bbb      	ldrb	r3, [r7, #14]
 801ad5c:	7b3a      	ldrb	r2, [r7, #12]
 801ad5e:	4911      	ldr	r1, [pc, #68]	@ (801ada4 <UARTEx_SetNbDataToProcess+0x94>)
 801ad60:	5c8a      	ldrb	r2, [r1, r2]
 801ad62:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 801ad66:	7b3a      	ldrb	r2, [r7, #12]
 801ad68:	490f      	ldr	r1, [pc, #60]	@ (801ada8 <UARTEx_SetNbDataToProcess+0x98>)
 801ad6a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 801ad6c:	fb93 f3f2 	sdiv	r3, r3, r2
 801ad70:	b29a      	uxth	r2, r3
 801ad72:	687b      	ldr	r3, [r7, #4]
 801ad74:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 801ad78:	7bfb      	ldrb	r3, [r7, #15]
 801ad7a:	7b7a      	ldrb	r2, [r7, #13]
 801ad7c:	4909      	ldr	r1, [pc, #36]	@ (801ada4 <UARTEx_SetNbDataToProcess+0x94>)
 801ad7e:	5c8a      	ldrb	r2, [r1, r2]
 801ad80:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 801ad84:	7b7a      	ldrb	r2, [r7, #13]
 801ad86:	4908      	ldr	r1, [pc, #32]	@ (801ada8 <UARTEx_SetNbDataToProcess+0x98>)
 801ad88:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 801ad8a:	fb93 f3f2 	sdiv	r3, r3, r2
 801ad8e:	b29a      	uxth	r2, r3
 801ad90:	687b      	ldr	r3, [r7, #4]
 801ad92:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 801ad96:	bf00      	nop
 801ad98:	3714      	adds	r7, #20
 801ad9a:	46bd      	mov	sp, r7
 801ad9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ada0:	4770      	bx	lr
 801ada2:	bf00      	nop
 801ada4:	080206cc 	.word	0x080206cc
 801ada8:	080206d4 	.word	0x080206d4

0801adac <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 801adac:	b084      	sub	sp, #16
 801adae:	b480      	push	{r7}
 801adb0:	b085      	sub	sp, #20
 801adb2:	af00      	add	r7, sp, #0
 801adb4:	6078      	str	r0, [r7, #4]
 801adb6:	f107 001c 	add.w	r0, r7, #28
 801adba:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 801adbe:	2300      	movs	r3, #0
 801adc0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 801adc2:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 801adc4:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 801adc6:	431a      	orrs	r2, r3
             Init.BusWide             | \
 801adc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockPowerSave      | \
 801adca:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 801adcc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.BusWide             | \
 801adce:	431a      	orrs	r2, r3
             Init.ClockDiv
 801add0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.HardwareFlowControl | \
 801add2:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 801add4:	68fa      	ldr	r2, [r7, #12]
 801add6:	4313      	orrs	r3, r2
 801add8:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 801adda:	687b      	ldr	r3, [r7, #4]
 801addc:	685a      	ldr	r2, [r3, #4]
 801adde:	4b07      	ldr	r3, [pc, #28]	@ (801adfc <SDMMC_Init+0x50>)
 801ade0:	4013      	ands	r3, r2
 801ade2:	68fa      	ldr	r2, [r7, #12]
 801ade4:	431a      	orrs	r2, r3
 801ade6:	687b      	ldr	r3, [r7, #4]
 801ade8:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 801adea:	2300      	movs	r3, #0
}
 801adec:	4618      	mov	r0, r3
 801adee:	3714      	adds	r7, #20
 801adf0:	46bd      	mov	sp, r7
 801adf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801adf6:	b004      	add	sp, #16
 801adf8:	4770      	bx	lr
 801adfa:	bf00      	nop
 801adfc:	ffc02c00 	.word	0xffc02c00

0801ae00 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 801ae00:	b480      	push	{r7}
 801ae02:	b083      	sub	sp, #12
 801ae04:	af00      	add	r7, sp, #0
 801ae06:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 801ae08:	687b      	ldr	r3, [r7, #4]
 801ae0a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 801ae0e:	4618      	mov	r0, r3
 801ae10:	370c      	adds	r7, #12
 801ae12:	46bd      	mov	sp, r7
 801ae14:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ae18:	4770      	bx	lr

0801ae1a <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 801ae1a:	b480      	push	{r7}
 801ae1c:	b083      	sub	sp, #12
 801ae1e:	af00      	add	r7, sp, #0
 801ae20:	6078      	str	r0, [r7, #4]
 801ae22:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 801ae24:	683b      	ldr	r3, [r7, #0]
 801ae26:	681a      	ldr	r2, [r3, #0]
 801ae28:	687b      	ldr	r3, [r7, #4]
 801ae2a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 801ae2e:	2300      	movs	r3, #0
}
 801ae30:	4618      	mov	r0, r3
 801ae32:	370c      	adds	r7, #12
 801ae34:	46bd      	mov	sp, r7
 801ae36:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ae3a:	4770      	bx	lr

0801ae3c <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 801ae3c:	b480      	push	{r7}
 801ae3e:	b083      	sub	sp, #12
 801ae40:	af00      	add	r7, sp, #0
 801ae42:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 801ae44:	687b      	ldr	r3, [r7, #4]
 801ae46:	681b      	ldr	r3, [r3, #0]
 801ae48:	f043 0203 	orr.w	r2, r3, #3
 801ae4c:	687b      	ldr	r3, [r7, #4]
 801ae4e:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 801ae50:	2300      	movs	r3, #0
}
 801ae52:	4618      	mov	r0, r3
 801ae54:	370c      	adds	r7, #12
 801ae56:	46bd      	mov	sp, r7
 801ae58:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ae5c:	4770      	bx	lr

0801ae5e <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 801ae5e:	b480      	push	{r7}
 801ae60:	b083      	sub	sp, #12
 801ae62:	af00      	add	r7, sp, #0
 801ae64:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 801ae66:	687b      	ldr	r3, [r7, #4]
 801ae68:	681b      	ldr	r3, [r3, #0]
 801ae6a:	f003 0303 	and.w	r3, r3, #3
}
 801ae6e:	4618      	mov	r0, r3
 801ae70:	370c      	adds	r7, #12
 801ae72:	46bd      	mov	sp, r7
 801ae74:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ae78:	4770      	bx	lr
	...

0801ae7c <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 801ae7c:	b480      	push	{r7}
 801ae7e:	b085      	sub	sp, #20
 801ae80:	af00      	add	r7, sp, #0
 801ae82:	6078      	str	r0, [r7, #4]
 801ae84:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 801ae86:	2300      	movs	r3, #0
 801ae88:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 801ae8a:	683b      	ldr	r3, [r7, #0]
 801ae8c:	681a      	ldr	r2, [r3, #0]
 801ae8e:	687b      	ldr	r3, [r7, #4]
 801ae90:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 801ae92:	683b      	ldr	r3, [r7, #0]
 801ae94:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 801ae96:	683b      	ldr	r3, [r7, #0]
 801ae98:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 801ae9a:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 801ae9c:	683b      	ldr	r3, [r7, #0]
 801ae9e:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 801aea0:	431a      	orrs	r2, r3
                       Command->CPSM);
 801aea2:	683b      	ldr	r3, [r7, #0]
 801aea4:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 801aea6:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 801aea8:	68fa      	ldr	r2, [r7, #12]
 801aeaa:	4313      	orrs	r3, r2
 801aeac:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 801aeae:	687b      	ldr	r3, [r7, #4]
 801aeb0:	68da      	ldr	r2, [r3, #12]
 801aeb2:	4b06      	ldr	r3, [pc, #24]	@ (801aecc <SDMMC_SendCommand+0x50>)
 801aeb4:	4013      	ands	r3, r2
 801aeb6:	68fa      	ldr	r2, [r7, #12]
 801aeb8:	431a      	orrs	r2, r3
 801aeba:	687b      	ldr	r3, [r7, #4]
 801aebc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 801aebe:	2300      	movs	r3, #0
}
 801aec0:	4618      	mov	r0, r3
 801aec2:	3714      	adds	r7, #20
 801aec4:	46bd      	mov	sp, r7
 801aec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aeca:	4770      	bx	lr
 801aecc:	fffee0c0 	.word	0xfffee0c0

0801aed0 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 801aed0:	b480      	push	{r7}
 801aed2:	b083      	sub	sp, #12
 801aed4:	af00      	add	r7, sp, #0
 801aed6:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 801aed8:	687b      	ldr	r3, [r7, #4]
 801aeda:	691b      	ldr	r3, [r3, #16]
 801aedc:	b2db      	uxtb	r3, r3
}
 801aede:	4618      	mov	r0, r3
 801aee0:	370c      	adds	r7, #12
 801aee2:	46bd      	mov	sp, r7
 801aee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aee8:	4770      	bx	lr

0801aeea <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 801aeea:	b480      	push	{r7}
 801aeec:	b085      	sub	sp, #20
 801aeee:	af00      	add	r7, sp, #0
 801aef0:	6078      	str	r0, [r7, #4]
 801aef2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 801aef4:	687b      	ldr	r3, [r7, #4]
 801aef6:	3314      	adds	r3, #20
 801aef8:	461a      	mov	r2, r3
 801aefa:	683b      	ldr	r3, [r7, #0]
 801aefc:	4413      	add	r3, r2
 801aefe:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 801af00:	68fb      	ldr	r3, [r7, #12]
 801af02:	681b      	ldr	r3, [r3, #0]
}
 801af04:	4618      	mov	r0, r3
 801af06:	3714      	adds	r7, #20
 801af08:	46bd      	mov	sp, r7
 801af0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801af0e:	4770      	bx	lr

0801af10 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 801af10:	b480      	push	{r7}
 801af12:	b085      	sub	sp, #20
 801af14:	af00      	add	r7, sp, #0
 801af16:	6078      	str	r0, [r7, #4]
 801af18:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 801af1a:	2300      	movs	r3, #0
 801af1c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 801af1e:	683b      	ldr	r3, [r7, #0]
 801af20:	681a      	ldr	r2, [r3, #0]
 801af22:	687b      	ldr	r3, [r7, #4]
 801af24:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 801af26:	683b      	ldr	r3, [r7, #0]
 801af28:	685a      	ldr	r2, [r3, #4]
 801af2a:	687b      	ldr	r3, [r7, #4]
 801af2c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 801af2e:	683b      	ldr	r3, [r7, #0]
 801af30:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 801af32:	683b      	ldr	r3, [r7, #0]
 801af34:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 801af36:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 801af38:	683b      	ldr	r3, [r7, #0]
 801af3a:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 801af3c:	431a      	orrs	r2, r3
                       Data->DPSM);
 801af3e:	683b      	ldr	r3, [r7, #0]
 801af40:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 801af42:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 801af44:	68fa      	ldr	r2, [r7, #12]
 801af46:	4313      	orrs	r3, r2
 801af48:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 801af4a:	687b      	ldr	r3, [r7, #4]
 801af4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801af4e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 801af52:	68fb      	ldr	r3, [r7, #12]
 801af54:	431a      	orrs	r2, r3
 801af56:	687b      	ldr	r3, [r7, #4]
 801af58:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 801af5a:	2300      	movs	r3, #0

}
 801af5c:	4618      	mov	r0, r3
 801af5e:	3714      	adds	r7, #20
 801af60:	46bd      	mov	sp, r7
 801af62:	f85d 7b04 	ldr.w	r7, [sp], #4
 801af66:	4770      	bx	lr

0801af68 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 801af68:	b580      	push	{r7, lr}
 801af6a:	b088      	sub	sp, #32
 801af6c:	af00      	add	r7, sp, #0
 801af6e:	6078      	str	r0, [r7, #4]
 801af70:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 801af72:	683b      	ldr	r3, [r7, #0]
 801af74:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 801af76:	2310      	movs	r3, #16
 801af78:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801af7a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 801af7e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801af80:	2300      	movs	r3, #0
 801af82:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801af84:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 801af88:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801af8a:	f107 0308 	add.w	r3, r7, #8
 801af8e:	4619      	mov	r1, r3
 801af90:	6878      	ldr	r0, [r7, #4]
 801af92:	f7ff ff73 	bl	801ae7c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 801af96:	f241 3288 	movw	r2, #5000	@ 0x1388
 801af9a:	2110      	movs	r1, #16
 801af9c:	6878      	ldr	r0, [r7, #4]
 801af9e:	f000 fa5f 	bl	801b460 <SDMMC_GetCmdResp1>
 801afa2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801afa4:	69fb      	ldr	r3, [r7, #28]
}
 801afa6:	4618      	mov	r0, r3
 801afa8:	3720      	adds	r7, #32
 801afaa:	46bd      	mov	sp, r7
 801afac:	bd80      	pop	{r7, pc}

0801afae <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 801afae:	b580      	push	{r7, lr}
 801afb0:	b088      	sub	sp, #32
 801afb2:	af00      	add	r7, sp, #0
 801afb4:	6078      	str	r0, [r7, #4]
 801afb6:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 801afb8:	683b      	ldr	r3, [r7, #0]
 801afba:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 801afbc:	2311      	movs	r3, #17
 801afbe:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801afc0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 801afc4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801afc6:	2300      	movs	r3, #0
 801afc8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801afca:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 801afce:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801afd0:	f107 0308 	add.w	r3, r7, #8
 801afd4:	4619      	mov	r1, r3
 801afd6:	6878      	ldr	r0, [r7, #4]
 801afd8:	f7ff ff50 	bl	801ae7c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 801afdc:	f241 3288 	movw	r2, #5000	@ 0x1388
 801afe0:	2111      	movs	r1, #17
 801afe2:	6878      	ldr	r0, [r7, #4]
 801afe4:	f000 fa3c 	bl	801b460 <SDMMC_GetCmdResp1>
 801afe8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801afea:	69fb      	ldr	r3, [r7, #28]
}
 801afec:	4618      	mov	r0, r3
 801afee:	3720      	adds	r7, #32
 801aff0:	46bd      	mov	sp, r7
 801aff2:	bd80      	pop	{r7, pc}

0801aff4 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 801aff4:	b580      	push	{r7, lr}
 801aff6:	b088      	sub	sp, #32
 801aff8:	af00      	add	r7, sp, #0
 801affa:	6078      	str	r0, [r7, #4]
 801affc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 801affe:	683b      	ldr	r3, [r7, #0]
 801b000:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 801b002:	2312      	movs	r3, #18
 801b004:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801b006:	f44f 7380 	mov.w	r3, #256	@ 0x100
 801b00a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801b00c:	2300      	movs	r3, #0
 801b00e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801b010:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 801b014:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801b016:	f107 0308 	add.w	r3, r7, #8
 801b01a:	4619      	mov	r1, r3
 801b01c:	6878      	ldr	r0, [r7, #4]
 801b01e:	f7ff ff2d 	bl	801ae7c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 801b022:	f241 3288 	movw	r2, #5000	@ 0x1388
 801b026:	2112      	movs	r1, #18
 801b028:	6878      	ldr	r0, [r7, #4]
 801b02a:	f000 fa19 	bl	801b460 <SDMMC_GetCmdResp1>
 801b02e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801b030:	69fb      	ldr	r3, [r7, #28]
}
 801b032:	4618      	mov	r0, r3
 801b034:	3720      	adds	r7, #32
 801b036:	46bd      	mov	sp, r7
 801b038:	bd80      	pop	{r7, pc}

0801b03a <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 801b03a:	b580      	push	{r7, lr}
 801b03c:	b088      	sub	sp, #32
 801b03e:	af00      	add	r7, sp, #0
 801b040:	6078      	str	r0, [r7, #4]
 801b042:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 801b044:	683b      	ldr	r3, [r7, #0]
 801b046:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 801b048:	2318      	movs	r3, #24
 801b04a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801b04c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 801b050:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801b052:	2300      	movs	r3, #0
 801b054:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801b056:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 801b05a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801b05c:	f107 0308 	add.w	r3, r7, #8
 801b060:	4619      	mov	r1, r3
 801b062:	6878      	ldr	r0, [r7, #4]
 801b064:	f7ff ff0a 	bl	801ae7c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 801b068:	f241 3288 	movw	r2, #5000	@ 0x1388
 801b06c:	2118      	movs	r1, #24
 801b06e:	6878      	ldr	r0, [r7, #4]
 801b070:	f000 f9f6 	bl	801b460 <SDMMC_GetCmdResp1>
 801b074:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801b076:	69fb      	ldr	r3, [r7, #28]
}
 801b078:	4618      	mov	r0, r3
 801b07a:	3720      	adds	r7, #32
 801b07c:	46bd      	mov	sp, r7
 801b07e:	bd80      	pop	{r7, pc}

0801b080 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 801b080:	b580      	push	{r7, lr}
 801b082:	b088      	sub	sp, #32
 801b084:	af00      	add	r7, sp, #0
 801b086:	6078      	str	r0, [r7, #4]
 801b088:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 801b08a:	683b      	ldr	r3, [r7, #0]
 801b08c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 801b08e:	2319      	movs	r3, #25
 801b090:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801b092:	f44f 7380 	mov.w	r3, #256	@ 0x100
 801b096:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801b098:	2300      	movs	r3, #0
 801b09a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801b09c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 801b0a0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801b0a2:	f107 0308 	add.w	r3, r7, #8
 801b0a6:	4619      	mov	r1, r3
 801b0a8:	6878      	ldr	r0, [r7, #4]
 801b0aa:	f7ff fee7 	bl	801ae7c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 801b0ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 801b0b2:	2119      	movs	r1, #25
 801b0b4:	6878      	ldr	r0, [r7, #4]
 801b0b6:	f000 f9d3 	bl	801b460 <SDMMC_GetCmdResp1>
 801b0ba:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801b0bc:	69fb      	ldr	r3, [r7, #28]
}
 801b0be:	4618      	mov	r0, r3
 801b0c0:	3720      	adds	r7, #32
 801b0c2:	46bd      	mov	sp, r7
 801b0c4:	bd80      	pop	{r7, pc}
	...

0801b0c8 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 801b0c8:	b580      	push	{r7, lr}
 801b0ca:	b088      	sub	sp, #32
 801b0cc:	af00      	add	r7, sp, #0
 801b0ce:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 801b0d0:	2300      	movs	r3, #0
 801b0d2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 801b0d4:	230c      	movs	r3, #12
 801b0d6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801b0d8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 801b0dc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801b0de:	2300      	movs	r3, #0
 801b0e0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801b0e2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 801b0e6:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 801b0e8:	687b      	ldr	r3, [r7, #4]
 801b0ea:	68db      	ldr	r3, [r3, #12]
 801b0ec:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 801b0f0:	687b      	ldr	r3, [r7, #4]
 801b0f2:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 801b0f4:	687b      	ldr	r3, [r7, #4]
 801b0f6:	68db      	ldr	r3, [r3, #12]
 801b0f8:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 801b0fc:	687b      	ldr	r3, [r7, #4]
 801b0fe:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801b100:	f107 0308 	add.w	r3, r7, #8
 801b104:	4619      	mov	r1, r3
 801b106:	6878      	ldr	r0, [r7, #4]
 801b108:	f7ff feb8 	bl	801ae7c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 801b10c:	4a0b      	ldr	r2, [pc, #44]	@ (801b13c <SDMMC_CmdStopTransfer+0x74>)
 801b10e:	210c      	movs	r1, #12
 801b110:	6878      	ldr	r0, [r7, #4]
 801b112:	f000 f9a5 	bl	801b460 <SDMMC_GetCmdResp1>
 801b116:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 801b118:	687b      	ldr	r3, [r7, #4]
 801b11a:	68db      	ldr	r3, [r3, #12]
 801b11c:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 801b120:	687b      	ldr	r3, [r7, #4]
 801b122:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 801b124:	69fb      	ldr	r3, [r7, #28]
 801b126:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 801b12a:	d101      	bne.n	801b130 <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 801b12c:	2300      	movs	r3, #0
 801b12e:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 801b130:	69fb      	ldr	r3, [r7, #28]
}
 801b132:	4618      	mov	r0, r3
 801b134:	3720      	adds	r7, #32
 801b136:	46bd      	mov	sp, r7
 801b138:	bd80      	pop	{r7, pc}
 801b13a:	bf00      	nop
 801b13c:	05f5e100 	.word	0x05f5e100

0801b140 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 801b140:	b580      	push	{r7, lr}
 801b142:	b088      	sub	sp, #32
 801b144:	af00      	add	r7, sp, #0
 801b146:	6078      	str	r0, [r7, #4]
 801b148:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 801b14a:	683b      	ldr	r3, [r7, #0]
 801b14c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 801b14e:	2307      	movs	r3, #7
 801b150:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801b152:	f44f 7380 	mov.w	r3, #256	@ 0x100
 801b156:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801b158:	2300      	movs	r3, #0
 801b15a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801b15c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 801b160:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801b162:	f107 0308 	add.w	r3, r7, #8
 801b166:	4619      	mov	r1, r3
 801b168:	6878      	ldr	r0, [r7, #4]
 801b16a:	f7ff fe87 	bl	801ae7c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 801b16e:	f241 3288 	movw	r2, #5000	@ 0x1388
 801b172:	2107      	movs	r1, #7
 801b174:	6878      	ldr	r0, [r7, #4]
 801b176:	f000 f973 	bl	801b460 <SDMMC_GetCmdResp1>
 801b17a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801b17c:	69fb      	ldr	r3, [r7, #28]
}
 801b17e:	4618      	mov	r0, r3
 801b180:	3720      	adds	r7, #32
 801b182:	46bd      	mov	sp, r7
 801b184:	bd80      	pop	{r7, pc}

0801b186 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 801b186:	b580      	push	{r7, lr}
 801b188:	b088      	sub	sp, #32
 801b18a:	af00      	add	r7, sp, #0
 801b18c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 801b18e:	2300      	movs	r3, #0
 801b190:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 801b192:	2300      	movs	r3, #0
 801b194:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 801b196:	2300      	movs	r3, #0
 801b198:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801b19a:	2300      	movs	r3, #0
 801b19c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801b19e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 801b1a2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801b1a4:	f107 0308 	add.w	r3, r7, #8
 801b1a8:	4619      	mov	r1, r3
 801b1aa:	6878      	ldr	r0, [r7, #4]
 801b1ac:	f7ff fe66 	bl	801ae7c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 801b1b0:	6878      	ldr	r0, [r7, #4]
 801b1b2:	f000 fb97 	bl	801b8e4 <SDMMC_GetCmdError>
 801b1b6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801b1b8:	69fb      	ldr	r3, [r7, #28]
}
 801b1ba:	4618      	mov	r0, r3
 801b1bc:	3720      	adds	r7, #32
 801b1be:	46bd      	mov	sp, r7
 801b1c0:	bd80      	pop	{r7, pc}

0801b1c2 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 801b1c2:	b580      	push	{r7, lr}
 801b1c4:	b088      	sub	sp, #32
 801b1c6:	af00      	add	r7, sp, #0
 801b1c8:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 801b1ca:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 801b1ce:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 801b1d0:	2308      	movs	r3, #8
 801b1d2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801b1d4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 801b1d8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801b1da:	2300      	movs	r3, #0
 801b1dc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801b1de:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 801b1e2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801b1e4:	f107 0308 	add.w	r3, r7, #8
 801b1e8:	4619      	mov	r1, r3
 801b1ea:	6878      	ldr	r0, [r7, #4]
 801b1ec:	f7ff fe46 	bl	801ae7c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 801b1f0:	6878      	ldr	r0, [r7, #4]
 801b1f2:	f000 fb29 	bl	801b848 <SDMMC_GetCmdResp7>
 801b1f6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801b1f8:	69fb      	ldr	r3, [r7, #28]
}
 801b1fa:	4618      	mov	r0, r3
 801b1fc:	3720      	adds	r7, #32
 801b1fe:	46bd      	mov	sp, r7
 801b200:	bd80      	pop	{r7, pc}

0801b202 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 801b202:	b580      	push	{r7, lr}
 801b204:	b088      	sub	sp, #32
 801b206:	af00      	add	r7, sp, #0
 801b208:	6078      	str	r0, [r7, #4]
 801b20a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 801b20c:	683b      	ldr	r3, [r7, #0]
 801b20e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 801b210:	2337      	movs	r3, #55	@ 0x37
 801b212:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801b214:	f44f 7380 	mov.w	r3, #256	@ 0x100
 801b218:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801b21a:	2300      	movs	r3, #0
 801b21c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801b21e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 801b222:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801b224:	f107 0308 	add.w	r3, r7, #8
 801b228:	4619      	mov	r1, r3
 801b22a:	6878      	ldr	r0, [r7, #4]
 801b22c:	f7ff fe26 	bl	801ae7c <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 801b230:	f241 3288 	movw	r2, #5000	@ 0x1388
 801b234:	2137      	movs	r1, #55	@ 0x37
 801b236:	6878      	ldr	r0, [r7, #4]
 801b238:	f000 f912 	bl	801b460 <SDMMC_GetCmdResp1>
 801b23c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801b23e:	69fb      	ldr	r3, [r7, #28]
}
 801b240:	4618      	mov	r0, r3
 801b242:	3720      	adds	r7, #32
 801b244:	46bd      	mov	sp, r7
 801b246:	bd80      	pop	{r7, pc}

0801b248 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 801b248:	b580      	push	{r7, lr}
 801b24a:	b088      	sub	sp, #32
 801b24c:	af00      	add	r7, sp, #0
 801b24e:	6078      	str	r0, [r7, #4]
 801b250:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 801b252:	683b      	ldr	r3, [r7, #0]
 801b254:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 801b256:	2329      	movs	r3, #41	@ 0x29
 801b258:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801b25a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 801b25e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801b260:	2300      	movs	r3, #0
 801b262:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801b264:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 801b268:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801b26a:	f107 0308 	add.w	r3, r7, #8
 801b26e:	4619      	mov	r1, r3
 801b270:	6878      	ldr	r0, [r7, #4]
 801b272:	f7ff fe03 	bl	801ae7c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 801b276:	6878      	ldr	r0, [r7, #4]
 801b278:	f000 fa2e 	bl	801b6d8 <SDMMC_GetCmdResp3>
 801b27c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801b27e:	69fb      	ldr	r3, [r7, #28]
}
 801b280:	4618      	mov	r0, r3
 801b282:	3720      	adds	r7, #32
 801b284:	46bd      	mov	sp, r7
 801b286:	bd80      	pop	{r7, pc}

0801b288 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 801b288:	b580      	push	{r7, lr}
 801b28a:	b088      	sub	sp, #32
 801b28c:	af00      	add	r7, sp, #0
 801b28e:	6078      	str	r0, [r7, #4]
 801b290:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 801b292:	683b      	ldr	r3, [r7, #0]
 801b294:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 801b296:	2306      	movs	r3, #6
 801b298:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801b29a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 801b29e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801b2a0:	2300      	movs	r3, #0
 801b2a2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801b2a4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 801b2a8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801b2aa:	f107 0308 	add.w	r3, r7, #8
 801b2ae:	4619      	mov	r1, r3
 801b2b0:	6878      	ldr	r0, [r7, #4]
 801b2b2:	f7ff fde3 	bl	801ae7c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 801b2b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 801b2ba:	2106      	movs	r1, #6
 801b2bc:	6878      	ldr	r0, [r7, #4]
 801b2be:	f000 f8cf 	bl	801b460 <SDMMC_GetCmdResp1>
 801b2c2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801b2c4:	69fb      	ldr	r3, [r7, #28]
}
 801b2c6:	4618      	mov	r0, r3
 801b2c8:	3720      	adds	r7, #32
 801b2ca:	46bd      	mov	sp, r7
 801b2cc:	bd80      	pop	{r7, pc}

0801b2ce <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 801b2ce:	b580      	push	{r7, lr}
 801b2d0:	b088      	sub	sp, #32
 801b2d2:	af00      	add	r7, sp, #0
 801b2d4:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 801b2d6:	2300      	movs	r3, #0
 801b2d8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 801b2da:	2333      	movs	r3, #51	@ 0x33
 801b2dc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801b2de:	f44f 7380 	mov.w	r3, #256	@ 0x100
 801b2e2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801b2e4:	2300      	movs	r3, #0
 801b2e6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801b2e8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 801b2ec:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801b2ee:	f107 0308 	add.w	r3, r7, #8
 801b2f2:	4619      	mov	r1, r3
 801b2f4:	6878      	ldr	r0, [r7, #4]
 801b2f6:	f7ff fdc1 	bl	801ae7c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 801b2fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 801b2fe:	2133      	movs	r1, #51	@ 0x33
 801b300:	6878      	ldr	r0, [r7, #4]
 801b302:	f000 f8ad 	bl	801b460 <SDMMC_GetCmdResp1>
 801b306:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801b308:	69fb      	ldr	r3, [r7, #28]
}
 801b30a:	4618      	mov	r0, r3
 801b30c:	3720      	adds	r7, #32
 801b30e:	46bd      	mov	sp, r7
 801b310:	bd80      	pop	{r7, pc}

0801b312 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 801b312:	b580      	push	{r7, lr}
 801b314:	b088      	sub	sp, #32
 801b316:	af00      	add	r7, sp, #0
 801b318:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 801b31a:	2300      	movs	r3, #0
 801b31c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 801b31e:	2302      	movs	r3, #2
 801b320:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 801b322:	f44f 7340 	mov.w	r3, #768	@ 0x300
 801b326:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801b328:	2300      	movs	r3, #0
 801b32a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801b32c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 801b330:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801b332:	f107 0308 	add.w	r3, r7, #8
 801b336:	4619      	mov	r1, r3
 801b338:	6878      	ldr	r0, [r7, #4]
 801b33a:	f7ff fd9f 	bl	801ae7c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 801b33e:	6878      	ldr	r0, [r7, #4]
 801b340:	f000 f980 	bl	801b644 <SDMMC_GetCmdResp2>
 801b344:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801b346:	69fb      	ldr	r3, [r7, #28]
}
 801b348:	4618      	mov	r0, r3
 801b34a:	3720      	adds	r7, #32
 801b34c:	46bd      	mov	sp, r7
 801b34e:	bd80      	pop	{r7, pc}

0801b350 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 801b350:	b580      	push	{r7, lr}
 801b352:	b088      	sub	sp, #32
 801b354:	af00      	add	r7, sp, #0
 801b356:	6078      	str	r0, [r7, #4]
 801b358:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 801b35a:	683b      	ldr	r3, [r7, #0]
 801b35c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 801b35e:	2309      	movs	r3, #9
 801b360:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 801b362:	f44f 7340 	mov.w	r3, #768	@ 0x300
 801b366:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801b368:	2300      	movs	r3, #0
 801b36a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801b36c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 801b370:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801b372:	f107 0308 	add.w	r3, r7, #8
 801b376:	4619      	mov	r1, r3
 801b378:	6878      	ldr	r0, [r7, #4]
 801b37a:	f7ff fd7f 	bl	801ae7c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 801b37e:	6878      	ldr	r0, [r7, #4]
 801b380:	f000 f960 	bl	801b644 <SDMMC_GetCmdResp2>
 801b384:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801b386:	69fb      	ldr	r3, [r7, #28]
}
 801b388:	4618      	mov	r0, r3
 801b38a:	3720      	adds	r7, #32
 801b38c:	46bd      	mov	sp, r7
 801b38e:	bd80      	pop	{r7, pc}

0801b390 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 801b390:	b580      	push	{r7, lr}
 801b392:	b088      	sub	sp, #32
 801b394:	af00      	add	r7, sp, #0
 801b396:	6078      	str	r0, [r7, #4]
 801b398:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 801b39a:	2300      	movs	r3, #0
 801b39c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 801b39e:	2303      	movs	r3, #3
 801b3a0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801b3a2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 801b3a6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801b3a8:	2300      	movs	r3, #0
 801b3aa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801b3ac:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 801b3b0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801b3b2:	f107 0308 	add.w	r3, r7, #8
 801b3b6:	4619      	mov	r1, r3
 801b3b8:	6878      	ldr	r0, [r7, #4]
 801b3ba:	f7ff fd5f 	bl	801ae7c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 801b3be:	683a      	ldr	r2, [r7, #0]
 801b3c0:	2103      	movs	r1, #3
 801b3c2:	6878      	ldr	r0, [r7, #4]
 801b3c4:	f000 f9c8 	bl	801b758 <SDMMC_GetCmdResp6>
 801b3c8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801b3ca:	69fb      	ldr	r3, [r7, #28]
}
 801b3cc:	4618      	mov	r0, r3
 801b3ce:	3720      	adds	r7, #32
 801b3d0:	46bd      	mov	sp, r7
 801b3d2:	bd80      	pop	{r7, pc}

0801b3d4 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 801b3d4:	b580      	push	{r7, lr}
 801b3d6:	b088      	sub	sp, #32
 801b3d8:	af00      	add	r7, sp, #0
 801b3da:	6078      	str	r0, [r7, #4]
 801b3dc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 801b3de:	683b      	ldr	r3, [r7, #0]
 801b3e0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 801b3e2:	230d      	movs	r3, #13
 801b3e4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801b3e6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 801b3ea:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801b3ec:	2300      	movs	r3, #0
 801b3ee:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801b3f0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 801b3f4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801b3f6:	f107 0308 	add.w	r3, r7, #8
 801b3fa:	4619      	mov	r1, r3
 801b3fc:	6878      	ldr	r0, [r7, #4]
 801b3fe:	f7ff fd3d 	bl	801ae7c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 801b402:	f241 3288 	movw	r2, #5000	@ 0x1388
 801b406:	210d      	movs	r1, #13
 801b408:	6878      	ldr	r0, [r7, #4]
 801b40a:	f000 f829 	bl	801b460 <SDMMC_GetCmdResp1>
 801b40e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801b410:	69fb      	ldr	r3, [r7, #28]
}
 801b412:	4618      	mov	r0, r3
 801b414:	3720      	adds	r7, #32
 801b416:	46bd      	mov	sp, r7
 801b418:	bd80      	pop	{r7, pc}

0801b41a <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 801b41a:	b580      	push	{r7, lr}
 801b41c:	b088      	sub	sp, #32
 801b41e:	af00      	add	r7, sp, #0
 801b420:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 801b422:	2300      	movs	r3, #0
 801b424:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 801b426:	230d      	movs	r3, #13
 801b428:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801b42a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 801b42e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801b430:	2300      	movs	r3, #0
 801b432:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801b434:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 801b438:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801b43a:	f107 0308 	add.w	r3, r7, #8
 801b43e:	4619      	mov	r1, r3
 801b440:	6878      	ldr	r0, [r7, #4]
 801b442:	f7ff fd1b 	bl	801ae7c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 801b446:	f241 3288 	movw	r2, #5000	@ 0x1388
 801b44a:	210d      	movs	r1, #13
 801b44c:	6878      	ldr	r0, [r7, #4]
 801b44e:	f000 f807 	bl	801b460 <SDMMC_GetCmdResp1>
 801b452:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801b454:	69fb      	ldr	r3, [r7, #28]
}
 801b456:	4618      	mov	r0, r3
 801b458:	3720      	adds	r7, #32
 801b45a:	46bd      	mov	sp, r7
 801b45c:	bd80      	pop	{r7, pc}
	...

0801b460 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 801b460:	b580      	push	{r7, lr}
 801b462:	b088      	sub	sp, #32
 801b464:	af00      	add	r7, sp, #0
 801b466:	60f8      	str	r0, [r7, #12]
 801b468:	460b      	mov	r3, r1
 801b46a:	607a      	str	r2, [r7, #4]
 801b46c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 801b46e:	4b70      	ldr	r3, [pc, #448]	@ (801b630 <SDMMC_GetCmdResp1+0x1d0>)
 801b470:	681b      	ldr	r3, [r3, #0]
 801b472:	4a70      	ldr	r2, [pc, #448]	@ (801b634 <SDMMC_GetCmdResp1+0x1d4>)
 801b474:	fba2 2303 	umull	r2, r3, r2, r3
 801b478:	0a5a      	lsrs	r2, r3, #9
 801b47a:	687b      	ldr	r3, [r7, #4]
 801b47c:	fb02 f303 	mul.w	r3, r2, r3
 801b480:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 801b482:	69fb      	ldr	r3, [r7, #28]
 801b484:	1e5a      	subs	r2, r3, #1
 801b486:	61fa      	str	r2, [r7, #28]
 801b488:	2b00      	cmp	r3, #0
 801b48a:	d102      	bne.n	801b492 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 801b48c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 801b490:	e0c9      	b.n	801b626 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 801b492:	68fb      	ldr	r3, [r7, #12]
 801b494:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801b496:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 801b498:	69ba      	ldr	r2, [r7, #24]
 801b49a:	4b67      	ldr	r3, [pc, #412]	@ (801b638 <SDMMC_GetCmdResp1+0x1d8>)
 801b49c:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 801b49e:	2b00      	cmp	r3, #0
 801b4a0:	d0ef      	beq.n	801b482 <SDMMC_GetCmdResp1+0x22>
 801b4a2:	69bb      	ldr	r3, [r7, #24]
 801b4a4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 801b4a8:	2b00      	cmp	r3, #0
 801b4aa:	d1ea      	bne.n	801b482 <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 801b4ac:	68fb      	ldr	r3, [r7, #12]
 801b4ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801b4b0:	f003 0304 	and.w	r3, r3, #4
 801b4b4:	2b00      	cmp	r3, #0
 801b4b6:	d004      	beq.n	801b4c2 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 801b4b8:	68fb      	ldr	r3, [r7, #12]
 801b4ba:	2204      	movs	r2, #4
 801b4bc:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801b4be:	2304      	movs	r3, #4
 801b4c0:	e0b1      	b.n	801b626 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 801b4c2:	68fb      	ldr	r3, [r7, #12]
 801b4c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801b4c6:	f003 0301 	and.w	r3, r3, #1
 801b4ca:	2b00      	cmp	r3, #0
 801b4cc:	d004      	beq.n	801b4d8 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 801b4ce:	68fb      	ldr	r3, [r7, #12]
 801b4d0:	2201      	movs	r2, #1
 801b4d2:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 801b4d4:	2301      	movs	r3, #1
 801b4d6:	e0a6      	b.n	801b626 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 801b4d8:	68fb      	ldr	r3, [r7, #12]
 801b4da:	4a58      	ldr	r2, [pc, #352]	@ (801b63c <SDMMC_GetCmdResp1+0x1dc>)
 801b4dc:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 801b4de:	68f8      	ldr	r0, [r7, #12]
 801b4e0:	f7ff fcf6 	bl	801aed0 <SDMMC_GetCommandResponse>
 801b4e4:	4603      	mov	r3, r0
 801b4e6:	461a      	mov	r2, r3
 801b4e8:	7afb      	ldrb	r3, [r7, #11]
 801b4ea:	4293      	cmp	r3, r2
 801b4ec:	d001      	beq.n	801b4f2 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 801b4ee:	2301      	movs	r3, #1
 801b4f0:	e099      	b.n	801b626 <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 801b4f2:	2100      	movs	r1, #0
 801b4f4:	68f8      	ldr	r0, [r7, #12]
 801b4f6:	f7ff fcf8 	bl	801aeea <SDMMC_GetResponse>
 801b4fa:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 801b4fc:	697a      	ldr	r2, [r7, #20]
 801b4fe:	4b50      	ldr	r3, [pc, #320]	@ (801b640 <SDMMC_GetCmdResp1+0x1e0>)
 801b500:	4013      	ands	r3, r2
 801b502:	2b00      	cmp	r3, #0
 801b504:	d101      	bne.n	801b50a <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 801b506:	2300      	movs	r3, #0
 801b508:	e08d      	b.n	801b626 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 801b50a:	697b      	ldr	r3, [r7, #20]
 801b50c:	2b00      	cmp	r3, #0
 801b50e:	da02      	bge.n	801b516 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 801b510:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 801b514:	e087      	b.n	801b626 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 801b516:	697b      	ldr	r3, [r7, #20]
 801b518:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 801b51c:	2b00      	cmp	r3, #0
 801b51e:	d001      	beq.n	801b524 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 801b520:	2340      	movs	r3, #64	@ 0x40
 801b522:	e080      	b.n	801b626 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 801b524:	697b      	ldr	r3, [r7, #20]
 801b526:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 801b52a:	2b00      	cmp	r3, #0
 801b52c:	d001      	beq.n	801b532 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 801b52e:	2380      	movs	r3, #128	@ 0x80
 801b530:	e079      	b.n	801b626 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 801b532:	697b      	ldr	r3, [r7, #20]
 801b534:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 801b538:	2b00      	cmp	r3, #0
 801b53a:	d002      	beq.n	801b542 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 801b53c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 801b540:	e071      	b.n	801b626 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 801b542:	697b      	ldr	r3, [r7, #20]
 801b544:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 801b548:	2b00      	cmp	r3, #0
 801b54a:	d002      	beq.n	801b552 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 801b54c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 801b550:	e069      	b.n	801b626 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 801b552:	697b      	ldr	r3, [r7, #20]
 801b554:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 801b558:	2b00      	cmp	r3, #0
 801b55a:	d002      	beq.n	801b562 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 801b55c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801b560:	e061      	b.n	801b626 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 801b562:	697b      	ldr	r3, [r7, #20]
 801b564:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 801b568:	2b00      	cmp	r3, #0
 801b56a:	d002      	beq.n	801b572 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 801b56c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801b570:	e059      	b.n	801b626 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 801b572:	697b      	ldr	r3, [r7, #20]
 801b574:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 801b578:	2b00      	cmp	r3, #0
 801b57a:	d002      	beq.n	801b582 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 801b57c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 801b580:	e051      	b.n	801b626 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 801b582:	697b      	ldr	r3, [r7, #20]
 801b584:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 801b588:	2b00      	cmp	r3, #0
 801b58a:	d002      	beq.n	801b592 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 801b58c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 801b590:	e049      	b.n	801b626 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 801b592:	697b      	ldr	r3, [r7, #20]
 801b594:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 801b598:	2b00      	cmp	r3, #0
 801b59a:	d002      	beq.n	801b5a2 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 801b59c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 801b5a0:	e041      	b.n	801b626 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 801b5a2:	697b      	ldr	r3, [r7, #20]
 801b5a4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 801b5a8:	2b00      	cmp	r3, #0
 801b5aa:	d002      	beq.n	801b5b2 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 801b5ac:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801b5b0:	e039      	b.n	801b626 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 801b5b2:	697b      	ldr	r3, [r7, #20]
 801b5b4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 801b5b8:	2b00      	cmp	r3, #0
 801b5ba:	d002      	beq.n	801b5c2 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 801b5bc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 801b5c0:	e031      	b.n	801b626 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 801b5c2:	697b      	ldr	r3, [r7, #20]
 801b5c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801b5c8:	2b00      	cmp	r3, #0
 801b5ca:	d002      	beq.n	801b5d2 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 801b5cc:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 801b5d0:	e029      	b.n	801b626 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 801b5d2:	697b      	ldr	r3, [r7, #20]
 801b5d4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 801b5d8:	2b00      	cmp	r3, #0
 801b5da:	d002      	beq.n	801b5e2 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 801b5dc:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 801b5e0:	e021      	b.n	801b626 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 801b5e2:	697b      	ldr	r3, [r7, #20]
 801b5e4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 801b5e8:	2b00      	cmp	r3, #0
 801b5ea:	d002      	beq.n	801b5f2 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 801b5ec:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 801b5f0:	e019      	b.n	801b626 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 801b5f2:	697b      	ldr	r3, [r7, #20]
 801b5f4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 801b5f8:	2b00      	cmp	r3, #0
 801b5fa:	d002      	beq.n	801b602 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 801b5fc:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 801b600:	e011      	b.n	801b626 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 801b602:	697b      	ldr	r3, [r7, #20]
 801b604:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 801b608:	2b00      	cmp	r3, #0
 801b60a:	d002      	beq.n	801b612 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 801b60c:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 801b610:	e009      	b.n	801b626 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 801b612:	697b      	ldr	r3, [r7, #20]
 801b614:	f003 0308 	and.w	r3, r3, #8
 801b618:	2b00      	cmp	r3, #0
 801b61a:	d002      	beq.n	801b622 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 801b61c:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 801b620:	e001      	b.n	801b626 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 801b622:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 801b626:	4618      	mov	r0, r3
 801b628:	3720      	adds	r7, #32
 801b62a:	46bd      	mov	sp, r7
 801b62c:	bd80      	pop	{r7, pc}
 801b62e:	bf00      	nop
 801b630:	24000030 	.word	0x24000030
 801b634:	10624dd3 	.word	0x10624dd3
 801b638:	00200045 	.word	0x00200045
 801b63c:	002000c5 	.word	0x002000c5
 801b640:	fdffe008 	.word	0xfdffe008

0801b644 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 801b644:	b480      	push	{r7}
 801b646:	b085      	sub	sp, #20
 801b648:	af00      	add	r7, sp, #0
 801b64a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 801b64c:	4b1f      	ldr	r3, [pc, #124]	@ (801b6cc <SDMMC_GetCmdResp2+0x88>)
 801b64e:	681b      	ldr	r3, [r3, #0]
 801b650:	4a1f      	ldr	r2, [pc, #124]	@ (801b6d0 <SDMMC_GetCmdResp2+0x8c>)
 801b652:	fba2 2303 	umull	r2, r3, r2, r3
 801b656:	0a5b      	lsrs	r3, r3, #9
 801b658:	f241 3288 	movw	r2, #5000	@ 0x1388
 801b65c:	fb02 f303 	mul.w	r3, r2, r3
 801b660:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 801b662:	68fb      	ldr	r3, [r7, #12]
 801b664:	1e5a      	subs	r2, r3, #1
 801b666:	60fa      	str	r2, [r7, #12]
 801b668:	2b00      	cmp	r3, #0
 801b66a:	d102      	bne.n	801b672 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 801b66c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 801b670:	e026      	b.n	801b6c0 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 801b672:	687b      	ldr	r3, [r7, #4]
 801b674:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801b676:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 801b678:	68bb      	ldr	r3, [r7, #8]
 801b67a:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 801b67e:	2b00      	cmp	r3, #0
 801b680:	d0ef      	beq.n	801b662 <SDMMC_GetCmdResp2+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 801b682:	68bb      	ldr	r3, [r7, #8]
 801b684:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 801b688:	2b00      	cmp	r3, #0
 801b68a:	d1ea      	bne.n	801b662 <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 801b68c:	687b      	ldr	r3, [r7, #4]
 801b68e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801b690:	f003 0304 	and.w	r3, r3, #4
 801b694:	2b00      	cmp	r3, #0
 801b696:	d004      	beq.n	801b6a2 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 801b698:	687b      	ldr	r3, [r7, #4]
 801b69a:	2204      	movs	r2, #4
 801b69c:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801b69e:	2304      	movs	r3, #4
 801b6a0:	e00e      	b.n	801b6c0 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 801b6a2:	687b      	ldr	r3, [r7, #4]
 801b6a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801b6a6:	f003 0301 	and.w	r3, r3, #1
 801b6aa:	2b00      	cmp	r3, #0
 801b6ac:	d004      	beq.n	801b6b8 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 801b6ae:	687b      	ldr	r3, [r7, #4]
 801b6b0:	2201      	movs	r2, #1
 801b6b2:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 801b6b4:	2301      	movs	r3, #1
 801b6b6:	e003      	b.n	801b6c0 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 801b6b8:	687b      	ldr	r3, [r7, #4]
 801b6ba:	4a06      	ldr	r2, [pc, #24]	@ (801b6d4 <SDMMC_GetCmdResp2+0x90>)
 801b6bc:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 801b6be:	2300      	movs	r3, #0
}
 801b6c0:	4618      	mov	r0, r3
 801b6c2:	3714      	adds	r7, #20
 801b6c4:	46bd      	mov	sp, r7
 801b6c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b6ca:	4770      	bx	lr
 801b6cc:	24000030 	.word	0x24000030
 801b6d0:	10624dd3 	.word	0x10624dd3
 801b6d4:	002000c5 	.word	0x002000c5

0801b6d8 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 801b6d8:	b480      	push	{r7}
 801b6da:	b085      	sub	sp, #20
 801b6dc:	af00      	add	r7, sp, #0
 801b6de:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 801b6e0:	4b1a      	ldr	r3, [pc, #104]	@ (801b74c <SDMMC_GetCmdResp3+0x74>)
 801b6e2:	681b      	ldr	r3, [r3, #0]
 801b6e4:	4a1a      	ldr	r2, [pc, #104]	@ (801b750 <SDMMC_GetCmdResp3+0x78>)
 801b6e6:	fba2 2303 	umull	r2, r3, r2, r3
 801b6ea:	0a5b      	lsrs	r3, r3, #9
 801b6ec:	f241 3288 	movw	r2, #5000	@ 0x1388
 801b6f0:	fb02 f303 	mul.w	r3, r2, r3
 801b6f4:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 801b6f6:	68fb      	ldr	r3, [r7, #12]
 801b6f8:	1e5a      	subs	r2, r3, #1
 801b6fa:	60fa      	str	r2, [r7, #12]
 801b6fc:	2b00      	cmp	r3, #0
 801b6fe:	d102      	bne.n	801b706 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 801b700:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 801b704:	e01b      	b.n	801b73e <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 801b706:	687b      	ldr	r3, [r7, #4]
 801b708:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801b70a:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 801b70c:	68bb      	ldr	r3, [r7, #8]
 801b70e:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 801b712:	2b00      	cmp	r3, #0
 801b714:	d0ef      	beq.n	801b6f6 <SDMMC_GetCmdResp3+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 801b716:	68bb      	ldr	r3, [r7, #8]
 801b718:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 801b71c:	2b00      	cmp	r3, #0
 801b71e:	d1ea      	bne.n	801b6f6 <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 801b720:	687b      	ldr	r3, [r7, #4]
 801b722:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801b724:	f003 0304 	and.w	r3, r3, #4
 801b728:	2b00      	cmp	r3, #0
 801b72a:	d004      	beq.n	801b736 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 801b72c:	687b      	ldr	r3, [r7, #4]
 801b72e:	2204      	movs	r2, #4
 801b730:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801b732:	2304      	movs	r3, #4
 801b734:	e003      	b.n	801b73e <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 801b736:	687b      	ldr	r3, [r7, #4]
 801b738:	4a06      	ldr	r2, [pc, #24]	@ (801b754 <SDMMC_GetCmdResp3+0x7c>)
 801b73a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 801b73c:	2300      	movs	r3, #0
}
 801b73e:	4618      	mov	r0, r3
 801b740:	3714      	adds	r7, #20
 801b742:	46bd      	mov	sp, r7
 801b744:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b748:	4770      	bx	lr
 801b74a:	bf00      	nop
 801b74c:	24000030 	.word	0x24000030
 801b750:	10624dd3 	.word	0x10624dd3
 801b754:	002000c5 	.word	0x002000c5

0801b758 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 801b758:	b580      	push	{r7, lr}
 801b75a:	b088      	sub	sp, #32
 801b75c:	af00      	add	r7, sp, #0
 801b75e:	60f8      	str	r0, [r7, #12]
 801b760:	460b      	mov	r3, r1
 801b762:	607a      	str	r2, [r7, #4]
 801b764:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 801b766:	4b35      	ldr	r3, [pc, #212]	@ (801b83c <SDMMC_GetCmdResp6+0xe4>)
 801b768:	681b      	ldr	r3, [r3, #0]
 801b76a:	4a35      	ldr	r2, [pc, #212]	@ (801b840 <SDMMC_GetCmdResp6+0xe8>)
 801b76c:	fba2 2303 	umull	r2, r3, r2, r3
 801b770:	0a5b      	lsrs	r3, r3, #9
 801b772:	f241 3288 	movw	r2, #5000	@ 0x1388
 801b776:	fb02 f303 	mul.w	r3, r2, r3
 801b77a:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 801b77c:	69fb      	ldr	r3, [r7, #28]
 801b77e:	1e5a      	subs	r2, r3, #1
 801b780:	61fa      	str	r2, [r7, #28]
 801b782:	2b00      	cmp	r3, #0
 801b784:	d102      	bne.n	801b78c <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 801b786:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 801b78a:	e052      	b.n	801b832 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 801b78c:	68fb      	ldr	r3, [r7, #12]
 801b78e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801b790:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 801b792:	69bb      	ldr	r3, [r7, #24]
 801b794:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 801b798:	2b00      	cmp	r3, #0
 801b79a:	d0ef      	beq.n	801b77c <SDMMC_GetCmdResp6+0x24>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 801b79c:	69bb      	ldr	r3, [r7, #24]
 801b79e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 801b7a2:	2b00      	cmp	r3, #0
 801b7a4:	d1ea      	bne.n	801b77c <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 801b7a6:	68fb      	ldr	r3, [r7, #12]
 801b7a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801b7aa:	f003 0304 	and.w	r3, r3, #4
 801b7ae:	2b00      	cmp	r3, #0
 801b7b0:	d004      	beq.n	801b7bc <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 801b7b2:	68fb      	ldr	r3, [r7, #12]
 801b7b4:	2204      	movs	r2, #4
 801b7b6:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801b7b8:	2304      	movs	r3, #4
 801b7ba:	e03a      	b.n	801b832 <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 801b7bc:	68fb      	ldr	r3, [r7, #12]
 801b7be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801b7c0:	f003 0301 	and.w	r3, r3, #1
 801b7c4:	2b00      	cmp	r3, #0
 801b7c6:	d004      	beq.n	801b7d2 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 801b7c8:	68fb      	ldr	r3, [r7, #12]
 801b7ca:	2201      	movs	r2, #1
 801b7cc:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 801b7ce:	2301      	movs	r3, #1
 801b7d0:	e02f      	b.n	801b832 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 801b7d2:	68f8      	ldr	r0, [r7, #12]
 801b7d4:	f7ff fb7c 	bl	801aed0 <SDMMC_GetCommandResponse>
 801b7d8:	4603      	mov	r3, r0
 801b7da:	461a      	mov	r2, r3
 801b7dc:	7afb      	ldrb	r3, [r7, #11]
 801b7de:	4293      	cmp	r3, r2
 801b7e0:	d001      	beq.n	801b7e6 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 801b7e2:	2301      	movs	r3, #1
 801b7e4:	e025      	b.n	801b832 <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 801b7e6:	68fb      	ldr	r3, [r7, #12]
 801b7e8:	4a16      	ldr	r2, [pc, #88]	@ (801b844 <SDMMC_GetCmdResp6+0xec>)
 801b7ea:	639a      	str	r2, [r3, #56]	@ 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 801b7ec:	2100      	movs	r1, #0
 801b7ee:	68f8      	ldr	r0, [r7, #12]
 801b7f0:	f7ff fb7b 	bl	801aeea <SDMMC_GetResponse>
 801b7f4:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 801b7f6:	697b      	ldr	r3, [r7, #20]
 801b7f8:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 801b7fc:	2b00      	cmp	r3, #0
 801b7fe:	d106      	bne.n	801b80e <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 801b800:	697b      	ldr	r3, [r7, #20]
 801b802:	0c1b      	lsrs	r3, r3, #16
 801b804:	b29a      	uxth	r2, r3
 801b806:	687b      	ldr	r3, [r7, #4]
 801b808:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 801b80a:	2300      	movs	r3, #0
 801b80c:	e011      	b.n	801b832 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 801b80e:	697b      	ldr	r3, [r7, #20]
 801b810:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 801b814:	2b00      	cmp	r3, #0
 801b816:	d002      	beq.n	801b81e <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 801b818:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 801b81c:	e009      	b.n	801b832 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 801b81e:	697b      	ldr	r3, [r7, #20]
 801b820:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 801b824:	2b00      	cmp	r3, #0
 801b826:	d002      	beq.n	801b82e <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 801b828:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 801b82c:	e001      	b.n	801b832 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 801b82e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 801b832:	4618      	mov	r0, r3
 801b834:	3720      	adds	r7, #32
 801b836:	46bd      	mov	sp, r7
 801b838:	bd80      	pop	{r7, pc}
 801b83a:	bf00      	nop
 801b83c:	24000030 	.word	0x24000030
 801b840:	10624dd3 	.word	0x10624dd3
 801b844:	002000c5 	.word	0x002000c5

0801b848 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 801b848:	b480      	push	{r7}
 801b84a:	b085      	sub	sp, #20
 801b84c:	af00      	add	r7, sp, #0
 801b84e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 801b850:	4b22      	ldr	r3, [pc, #136]	@ (801b8dc <SDMMC_GetCmdResp7+0x94>)
 801b852:	681b      	ldr	r3, [r3, #0]
 801b854:	4a22      	ldr	r2, [pc, #136]	@ (801b8e0 <SDMMC_GetCmdResp7+0x98>)
 801b856:	fba2 2303 	umull	r2, r3, r2, r3
 801b85a:	0a5b      	lsrs	r3, r3, #9
 801b85c:	f241 3288 	movw	r2, #5000	@ 0x1388
 801b860:	fb02 f303 	mul.w	r3, r2, r3
 801b864:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 801b866:	68fb      	ldr	r3, [r7, #12]
 801b868:	1e5a      	subs	r2, r3, #1
 801b86a:	60fa      	str	r2, [r7, #12]
 801b86c:	2b00      	cmp	r3, #0
 801b86e:	d102      	bne.n	801b876 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 801b870:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 801b874:	e02c      	b.n	801b8d0 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 801b876:	687b      	ldr	r3, [r7, #4]
 801b878:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801b87a:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 801b87c:	68bb      	ldr	r3, [r7, #8]
 801b87e:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 801b882:	2b00      	cmp	r3, #0
 801b884:	d0ef      	beq.n	801b866 <SDMMC_GetCmdResp7+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 801b886:	68bb      	ldr	r3, [r7, #8]
 801b888:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 801b88c:	2b00      	cmp	r3, #0
 801b88e:	d1ea      	bne.n	801b866 <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 801b890:	687b      	ldr	r3, [r7, #4]
 801b892:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801b894:	f003 0304 	and.w	r3, r3, #4
 801b898:	2b00      	cmp	r3, #0
 801b89a:	d004      	beq.n	801b8a6 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 801b89c:	687b      	ldr	r3, [r7, #4]
 801b89e:	2204      	movs	r2, #4
 801b8a0:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801b8a2:	2304      	movs	r3, #4
 801b8a4:	e014      	b.n	801b8d0 <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 801b8a6:	687b      	ldr	r3, [r7, #4]
 801b8a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801b8aa:	f003 0301 	and.w	r3, r3, #1
 801b8ae:	2b00      	cmp	r3, #0
 801b8b0:	d004      	beq.n	801b8bc <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 801b8b2:	687b      	ldr	r3, [r7, #4]
 801b8b4:	2201      	movs	r2, #1
 801b8b6:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 801b8b8:	2301      	movs	r3, #1
 801b8ba:	e009      	b.n	801b8d0 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 801b8bc:	687b      	ldr	r3, [r7, #4]
 801b8be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801b8c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801b8c4:	2b00      	cmp	r3, #0
 801b8c6:	d002      	beq.n	801b8ce <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 801b8c8:	687b      	ldr	r3, [r7, #4]
 801b8ca:	2240      	movs	r2, #64	@ 0x40
 801b8cc:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 801b8ce:	2300      	movs	r3, #0

}
 801b8d0:	4618      	mov	r0, r3
 801b8d2:	3714      	adds	r7, #20
 801b8d4:	46bd      	mov	sp, r7
 801b8d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b8da:	4770      	bx	lr
 801b8dc:	24000030 	.word	0x24000030
 801b8e0:	10624dd3 	.word	0x10624dd3

0801b8e4 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 801b8e4:	b480      	push	{r7}
 801b8e6:	b085      	sub	sp, #20
 801b8e8:	af00      	add	r7, sp, #0
 801b8ea:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 801b8ec:	4b11      	ldr	r3, [pc, #68]	@ (801b934 <SDMMC_GetCmdError+0x50>)
 801b8ee:	681b      	ldr	r3, [r3, #0]
 801b8f0:	4a11      	ldr	r2, [pc, #68]	@ (801b938 <SDMMC_GetCmdError+0x54>)
 801b8f2:	fba2 2303 	umull	r2, r3, r2, r3
 801b8f6:	0a5b      	lsrs	r3, r3, #9
 801b8f8:	f241 3288 	movw	r2, #5000	@ 0x1388
 801b8fc:	fb02 f303 	mul.w	r3, r2, r3
 801b900:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 801b902:	68fb      	ldr	r3, [r7, #12]
 801b904:	1e5a      	subs	r2, r3, #1
 801b906:	60fa      	str	r2, [r7, #12]
 801b908:	2b00      	cmp	r3, #0
 801b90a:	d102      	bne.n	801b912 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 801b90c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 801b910:	e009      	b.n	801b926 <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 801b912:	687b      	ldr	r3, [r7, #4]
 801b914:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801b916:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801b91a:	2b00      	cmp	r3, #0
 801b91c:	d0f1      	beq.n	801b902 <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 801b91e:	687b      	ldr	r3, [r7, #4]
 801b920:	4a06      	ldr	r2, [pc, #24]	@ (801b93c <SDMMC_GetCmdError+0x58>)
 801b922:	639a      	str	r2, [r3, #56]	@ 0x38

  return SDMMC_ERROR_NONE;
 801b924:	2300      	movs	r3, #0
}
 801b926:	4618      	mov	r0, r3
 801b928:	3714      	adds	r7, #20
 801b92a:	46bd      	mov	sp, r7
 801b92c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b930:	4770      	bx	lr
 801b932:	bf00      	nop
 801b934:	24000030 	.word	0x24000030
 801b938:	10624dd3 	.word	0x10624dd3
 801b93c:	002000c5 	.word	0x002000c5

0801b940 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 801b940:	b580      	push	{r7, lr}
 801b942:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 801b944:	4904      	ldr	r1, [pc, #16]	@ (801b958 <MX_FATFS_Init+0x18>)
 801b946:	4805      	ldr	r0, [pc, #20]	@ (801b95c <MX_FATFS_Init+0x1c>)
 801b948:	f002 fc08 	bl	801e15c <FATFS_LinkDriver>
 801b94c:	4603      	mov	r3, r0
 801b94e:	461a      	mov	r2, r3
 801b950:	4b03      	ldr	r3, [pc, #12]	@ (801b960 <MX_FATFS_Init+0x20>)
 801b952:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 801b954:	bf00      	nop
 801b956:	bd80      	pop	{r7, pc}
 801b958:	240004f0 	.word	0x240004f0
 801b95c:	080206dc 	.word	0x080206dc
 801b960:	240004ec 	.word	0x240004ec

0801b964 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 801b964:	b480      	push	{r7}
 801b966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 801b968:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 801b96a:	4618      	mov	r0, r3
 801b96c:	46bd      	mov	sp, r7
 801b96e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b972:	4770      	bx	lr

0801b974 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 801b974:	b580      	push	{r7, lr}
 801b976:	b086      	sub	sp, #24
 801b978:	af00      	add	r7, sp, #0
 801b97a:	60f8      	str	r0, [r7, #12]
 801b97c:	60b9      	str	r1, [r7, #8]
 801b97e:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 801b980:	2300      	movs	r3, #0
 801b982:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 801b984:	687b      	ldr	r3, [r7, #4]
 801b986:	68ba      	ldr	r2, [r7, #8]
 801b988:	68f9      	ldr	r1, [r7, #12]
 801b98a:	4806      	ldr	r0, [pc, #24]	@ (801b9a4 <BSP_SD_ReadBlocks_DMA+0x30>)
 801b98c:	f7fc fc16 	bl	80181bc <HAL_SD_ReadBlocks_DMA>
 801b990:	4603      	mov	r3, r0
 801b992:	2b00      	cmp	r3, #0
 801b994:	d001      	beq.n	801b99a <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 801b996:	2301      	movs	r3, #1
 801b998:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 801b99a:	7dfb      	ldrb	r3, [r7, #23]
}
 801b99c:	4618      	mov	r0, r3
 801b99e:	3718      	adds	r7, #24
 801b9a0:	46bd      	mov	sp, r7
 801b9a2:	bd80      	pop	{r7, pc}
 801b9a4:	240003cc 	.word	0x240003cc

0801b9a8 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 801b9a8:	b580      	push	{r7, lr}
 801b9aa:	b086      	sub	sp, #24
 801b9ac:	af00      	add	r7, sp, #0
 801b9ae:	60f8      	str	r0, [r7, #12]
 801b9b0:	60b9      	str	r1, [r7, #8]
 801b9b2:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 801b9b4:	2300      	movs	r3, #0
 801b9b6:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 801b9b8:	687b      	ldr	r3, [r7, #4]
 801b9ba:	68ba      	ldr	r2, [r7, #8]
 801b9bc:	68f9      	ldr	r1, [r7, #12]
 801b9be:	4806      	ldr	r0, [pc, #24]	@ (801b9d8 <BSP_SD_WriteBlocks_DMA+0x30>)
 801b9c0:	f7fc fca4 	bl	801830c <HAL_SD_WriteBlocks_DMA>
 801b9c4:	4603      	mov	r3, r0
 801b9c6:	2b00      	cmp	r3, #0
 801b9c8:	d001      	beq.n	801b9ce <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 801b9ca:	2301      	movs	r3, #1
 801b9cc:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 801b9ce:	7dfb      	ldrb	r3, [r7, #23]
}
 801b9d0:	4618      	mov	r0, r3
 801b9d2:	3718      	adds	r7, #24
 801b9d4:	46bd      	mov	sp, r7
 801b9d6:	bd80      	pop	{r7, pc}
 801b9d8:	240003cc 	.word	0x240003cc

0801b9dc <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 801b9dc:	b580      	push	{r7, lr}
 801b9de:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 801b9e0:	4805      	ldr	r0, [pc, #20]	@ (801b9f8 <BSP_SD_GetCardState+0x1c>)
 801b9e2:	f7fd fa9d 	bl	8018f20 <HAL_SD_GetCardState>
 801b9e6:	4603      	mov	r3, r0
 801b9e8:	2b04      	cmp	r3, #4
 801b9ea:	bf14      	ite	ne
 801b9ec:	2301      	movne	r3, #1
 801b9ee:	2300      	moveq	r3, #0
 801b9f0:	b2db      	uxtb	r3, r3
}
 801b9f2:	4618      	mov	r0, r3
 801b9f4:	bd80      	pop	{r7, pc}
 801b9f6:	bf00      	nop
 801b9f8:	240003cc 	.word	0x240003cc

0801b9fc <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 801b9fc:	b580      	push	{r7, lr}
 801b9fe:	b082      	sub	sp, #8
 801ba00:	af00      	add	r7, sp, #0
 801ba02:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 801ba04:	6879      	ldr	r1, [r7, #4]
 801ba06:	4803      	ldr	r0, [pc, #12]	@ (801ba14 <BSP_SD_GetCardInfo+0x18>)
 801ba08:	f7fd f94c 	bl	8018ca4 <HAL_SD_GetCardInfo>
}
 801ba0c:	bf00      	nop
 801ba0e:	3708      	adds	r7, #8
 801ba10:	46bd      	mov	sp, r7
 801ba12:	bd80      	pop	{r7, pc}
 801ba14:	240003cc 	.word	0x240003cc

0801ba18 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 801ba18:	b580      	push	{r7, lr}
 801ba1a:	b082      	sub	sp, #8
 801ba1c:	af00      	add	r7, sp, #0
 801ba1e:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 801ba20:	f000 fa14 	bl	801be4c <BSP_SD_WriteCpltCallback>
}
 801ba24:	bf00      	nop
 801ba26:	3708      	adds	r7, #8
 801ba28:	46bd      	mov	sp, r7
 801ba2a:	bd80      	pop	{r7, pc}

0801ba2c <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 801ba2c:	b580      	push	{r7, lr}
 801ba2e:	b082      	sub	sp, #8
 801ba30:	af00      	add	r7, sp, #0
 801ba32:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 801ba34:	f000 fa16 	bl	801be64 <BSP_SD_ReadCpltCallback>
}
 801ba38:	bf00      	nop
 801ba3a:	3708      	adds	r7, #8
 801ba3c:	46bd      	mov	sp, r7
 801ba3e:	bd80      	pop	{r7, pc}

0801ba40 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 801ba40:	b580      	push	{r7, lr}
 801ba42:	b084      	sub	sp, #16
 801ba44:	af00      	add	r7, sp, #0
 801ba46:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 801ba48:	f7f5 fe92 	bl	8011770 <HAL_GetTick>
 801ba4c:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 801ba4e:	e006      	b.n	801ba5e <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 801ba50:	f7ff ffc4 	bl	801b9dc <BSP_SD_GetCardState>
 801ba54:	4603      	mov	r3, r0
 801ba56:	2b00      	cmp	r3, #0
 801ba58:	d101      	bne.n	801ba5e <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 801ba5a:	2300      	movs	r3, #0
 801ba5c:	e009      	b.n	801ba72 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 801ba5e:	f7f5 fe87 	bl	8011770 <HAL_GetTick>
 801ba62:	4602      	mov	r2, r0
 801ba64:	68fb      	ldr	r3, [r7, #12]
 801ba66:	1ad3      	subs	r3, r2, r3
 801ba68:	687a      	ldr	r2, [r7, #4]
 801ba6a:	429a      	cmp	r2, r3
 801ba6c:	d8f0      	bhi.n	801ba50 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 801ba6e:	f04f 33ff 	mov.w	r3, #4294967295
}
 801ba72:	4618      	mov	r0, r3
 801ba74:	3710      	adds	r7, #16
 801ba76:	46bd      	mov	sp, r7
 801ba78:	bd80      	pop	{r7, pc}
	...

0801ba7c <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 801ba7c:	b580      	push	{r7, lr}
 801ba7e:	b082      	sub	sp, #8
 801ba80:	af00      	add	r7, sp, #0
 801ba82:	4603      	mov	r3, r0
 801ba84:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 801ba86:	4b0b      	ldr	r3, [pc, #44]	@ (801bab4 <SD_CheckStatus+0x38>)
 801ba88:	2201      	movs	r2, #1
 801ba8a:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 801ba8c:	f7ff ffa6 	bl	801b9dc <BSP_SD_GetCardState>
 801ba90:	4603      	mov	r3, r0
 801ba92:	2b00      	cmp	r3, #0
 801ba94:	d107      	bne.n	801baa6 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 801ba96:	4b07      	ldr	r3, [pc, #28]	@ (801bab4 <SD_CheckStatus+0x38>)
 801ba98:	781b      	ldrb	r3, [r3, #0]
 801ba9a:	b2db      	uxtb	r3, r3
 801ba9c:	f023 0301 	bic.w	r3, r3, #1
 801baa0:	b2da      	uxtb	r2, r3
 801baa2:	4b04      	ldr	r3, [pc, #16]	@ (801bab4 <SD_CheckStatus+0x38>)
 801baa4:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 801baa6:	4b03      	ldr	r3, [pc, #12]	@ (801bab4 <SD_CheckStatus+0x38>)
 801baa8:	781b      	ldrb	r3, [r3, #0]
 801baaa:	b2db      	uxtb	r3, r3
}
 801baac:	4618      	mov	r0, r3
 801baae:	3708      	adds	r7, #8
 801bab0:	46bd      	mov	sp, r7
 801bab2:	bd80      	pop	{r7, pc}
 801bab4:	2400003d 	.word	0x2400003d

0801bab8 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 801bab8:	b580      	push	{r7, lr}
 801baba:	b082      	sub	sp, #8
 801babc:	af00      	add	r7, sp, #0
 801babe:	4603      	mov	r3, r0
 801bac0:	71fb      	strb	r3, [r7, #7]
  {
    Stat = SD_CheckStatus(lun);
  }

#else
  Stat = SD_CheckStatus(lun);
 801bac2:	79fb      	ldrb	r3, [r7, #7]
 801bac4:	4618      	mov	r0, r3
 801bac6:	f7ff ffd9 	bl	801ba7c <SD_CheckStatus>
 801baca:	4603      	mov	r3, r0
 801bacc:	461a      	mov	r2, r3
 801bace:	4b04      	ldr	r3, [pc, #16]	@ (801bae0 <SD_initialize+0x28>)
 801bad0:	701a      	strb	r2, [r3, #0]
#endif

  return Stat;
 801bad2:	4b03      	ldr	r3, [pc, #12]	@ (801bae0 <SD_initialize+0x28>)
 801bad4:	781b      	ldrb	r3, [r3, #0]
 801bad6:	b2db      	uxtb	r3, r3
}
 801bad8:	4618      	mov	r0, r3
 801bada:	3708      	adds	r7, #8
 801badc:	46bd      	mov	sp, r7
 801bade:	bd80      	pop	{r7, pc}
 801bae0:	2400003d 	.word	0x2400003d

0801bae4 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 801bae4:	b580      	push	{r7, lr}
 801bae6:	b082      	sub	sp, #8
 801bae8:	af00      	add	r7, sp, #0
 801baea:	4603      	mov	r3, r0
 801baec:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 801baee:	79fb      	ldrb	r3, [r7, #7]
 801baf0:	4618      	mov	r0, r3
 801baf2:	f7ff ffc3 	bl	801ba7c <SD_CheckStatus>
 801baf6:	4603      	mov	r3, r0
}
 801baf8:	4618      	mov	r0, r3
 801bafa:	3708      	adds	r7, #8
 801bafc:	46bd      	mov	sp, r7
 801bafe:	bd80      	pop	{r7, pc}

0801bb00 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 801bb00:	b580      	push	{r7, lr}
 801bb02:	b088      	sub	sp, #32
 801bb04:	af00      	add	r7, sp, #0
 801bb06:	60b9      	str	r1, [r7, #8]
 801bb08:	607a      	str	r2, [r7, #4]
 801bb0a:	603b      	str	r3, [r7, #0]
 801bb0c:	4603      	mov	r3, r0
 801bb0e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 801bb10:	2301      	movs	r3, #1
 801bb12:	77fb      	strb	r3, [r7, #31]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 801bb14:	f247 5030 	movw	r0, #30000	@ 0x7530
 801bb18:	f7ff ff92 	bl	801ba40 <SD_CheckStatusWithTimeout>
 801bb1c:	4603      	mov	r3, r0
 801bb1e:	2b00      	cmp	r3, #0
 801bb20:	da01      	bge.n	801bb26 <SD_read+0x26>
  {
    return res;
 801bb22:	7ffb      	ldrb	r3, [r7, #31]
 801bb24:	e08b      	b.n	801bc3e <SD_read+0x13e>
  }

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
 801bb26:	68bb      	ldr	r3, [r7, #8]
 801bb28:	f003 0303 	and.w	r3, r3, #3
 801bb2c:	2b00      	cmp	r3, #0
 801bb2e:	d13b      	bne.n	801bba8 <SD_read+0xa8>
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 801bb30:	683a      	ldr	r2, [r7, #0]
 801bb32:	6879      	ldr	r1, [r7, #4]
 801bb34:	68b8      	ldr	r0, [r7, #8]
 801bb36:	f7ff ff1d 	bl	801b974 <BSP_SD_ReadBlocks_DMA>
 801bb3a:	4603      	mov	r3, r0
 801bb3c:	2b00      	cmp	r3, #0
 801bb3e:	d17d      	bne.n	801bc3c <SD_read+0x13c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 801bb40:	4b41      	ldr	r3, [pc, #260]	@ (801bc48 <SD_read+0x148>)
 801bb42:	2200      	movs	r2, #0
 801bb44:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 801bb46:	f7f5 fe13 	bl	8011770 <HAL_GetTick>
 801bb4a:	6178      	str	r0, [r7, #20]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 801bb4c:	bf00      	nop
 801bb4e:	4b3e      	ldr	r3, [pc, #248]	@ (801bc48 <SD_read+0x148>)
 801bb50:	681b      	ldr	r3, [r3, #0]
 801bb52:	2b00      	cmp	r3, #0
 801bb54:	d108      	bne.n	801bb68 <SD_read+0x68>
 801bb56:	f7f5 fe0b 	bl	8011770 <HAL_GetTick>
 801bb5a:	4602      	mov	r2, r0
 801bb5c:	697b      	ldr	r3, [r7, #20]
 801bb5e:	1ad3      	subs	r3, r2, r3
 801bb60:	f247 522f 	movw	r2, #29999	@ 0x752f
 801bb64:	4293      	cmp	r3, r2
 801bb66:	d9f2      	bls.n	801bb4e <SD_read+0x4e>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 801bb68:	4b37      	ldr	r3, [pc, #220]	@ (801bc48 <SD_read+0x148>)
 801bb6a:	681b      	ldr	r3, [r3, #0]
 801bb6c:	2b00      	cmp	r3, #0
 801bb6e:	d102      	bne.n	801bb76 <SD_read+0x76>
      {
        res = RES_ERROR;
 801bb70:	2301      	movs	r3, #1
 801bb72:	77fb      	strb	r3, [r7, #31]
 801bb74:	e062      	b.n	801bc3c <SD_read+0x13c>
      }
      else
      {
        ReadStatus = 0;
 801bb76:	4b34      	ldr	r3, [pc, #208]	@ (801bc48 <SD_read+0x148>)
 801bb78:	2200      	movs	r2, #0
 801bb7a:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 801bb7c:	f7f5 fdf8 	bl	8011770 <HAL_GetTick>
 801bb80:	6178      	str	r0, [r7, #20]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 801bb82:	e007      	b.n	801bb94 <SD_read+0x94>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 801bb84:	f7ff ff2a 	bl	801b9dc <BSP_SD_GetCardState>
 801bb88:	4603      	mov	r3, r0
 801bb8a:	2b00      	cmp	r3, #0
 801bb8c:	d102      	bne.n	801bb94 <SD_read+0x94>
          {
            res = RES_OK;
 801bb8e:	2300      	movs	r3, #0
 801bb90:	77fb      	strb	r3, [r7, #31]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 801bb92:	e053      	b.n	801bc3c <SD_read+0x13c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 801bb94:	f7f5 fdec 	bl	8011770 <HAL_GetTick>
 801bb98:	4602      	mov	r2, r0
 801bb9a:	697b      	ldr	r3, [r7, #20]
 801bb9c:	1ad3      	subs	r3, r2, r3
 801bb9e:	f247 522f 	movw	r2, #29999	@ 0x752f
 801bba2:	4293      	cmp	r3, r2
 801bba4:	d9ee      	bls.n	801bb84 <SD_read+0x84>
 801bba6:	e049      	b.n	801bc3c <SD_read+0x13c>
    else
    {
      /* Slow path, fetch each sector a part and memcpy to destination buffer */
      int i;

      for (i = 0; i < count; i++) {
 801bba8:	2300      	movs	r3, #0
 801bbaa:	61bb      	str	r3, [r7, #24]
 801bbac:	e037      	b.n	801bc1e <SD_read+0x11e>
        ret = BSP_SD_ReadBlocks_DMA((uint32_t*)scratch, (uint32_t)sector++, 1);
 801bbae:	687b      	ldr	r3, [r7, #4]
 801bbb0:	1c5a      	adds	r2, r3, #1
 801bbb2:	607a      	str	r2, [r7, #4]
 801bbb4:	2201      	movs	r2, #1
 801bbb6:	4619      	mov	r1, r3
 801bbb8:	4824      	ldr	r0, [pc, #144]	@ (801bc4c <SD_read+0x14c>)
 801bbba:	f7ff fedb 	bl	801b974 <BSP_SD_ReadBlocks_DMA>
 801bbbe:	4603      	mov	r3, r0
 801bbc0:	77bb      	strb	r3, [r7, #30]
        if (ret == MSD_OK) {
 801bbc2:	7fbb      	ldrb	r3, [r7, #30]
 801bbc4:	2b00      	cmp	r3, #0
 801bbc6:	d12f      	bne.n	801bc28 <SD_read+0x128>
          /* wait until the read is successful or a timeout occurs */

          timeout = HAL_GetTick();
 801bbc8:	f7f5 fdd2 	bl	8011770 <HAL_GetTick>
 801bbcc:	6178      	str	r0, [r7, #20]
          while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 801bbce:	bf00      	nop
 801bbd0:	4b1d      	ldr	r3, [pc, #116]	@ (801bc48 <SD_read+0x148>)
 801bbd2:	681b      	ldr	r3, [r3, #0]
 801bbd4:	2b00      	cmp	r3, #0
 801bbd6:	d108      	bne.n	801bbea <SD_read+0xea>
 801bbd8:	f7f5 fdca 	bl	8011770 <HAL_GetTick>
 801bbdc:	4602      	mov	r2, r0
 801bbde:	697b      	ldr	r3, [r7, #20]
 801bbe0:	1ad3      	subs	r3, r2, r3
 801bbe2:	f247 522f 	movw	r2, #29999	@ 0x752f
 801bbe6:	4293      	cmp	r3, r2
 801bbe8:	d9f2      	bls.n	801bbd0 <SD_read+0xd0>
          {
          }
          if (ReadStatus == 0)
 801bbea:	4b17      	ldr	r3, [pc, #92]	@ (801bc48 <SD_read+0x148>)
 801bbec:	681b      	ldr	r3, [r3, #0]
 801bbee:	2b00      	cmp	r3, #0
 801bbf0:	d102      	bne.n	801bbf8 <SD_read+0xf8>
          {
            res = RES_ERROR;
 801bbf2:	2301      	movs	r3, #1
 801bbf4:	77fb      	strb	r3, [r7, #31]
            break;
 801bbf6:	e018      	b.n	801bc2a <SD_read+0x12a>
          }
          ReadStatus = 0;
 801bbf8:	4b13      	ldr	r3, [pc, #76]	@ (801bc48 <SD_read+0x148>)
 801bbfa:	2200      	movs	r2, #0
 801bbfc:	601a      	str	r2, [r3, #0]
          *
          * invalidate the scratch buffer before the next read to get the actual data instead of the cached one
          */
          SCB_InvalidateDCache_by_Addr((uint32_t*)scratch, BLOCKSIZE);
#endif
          memcpy(buff, scratch, BLOCKSIZE);
 801bbfe:	68bb      	ldr	r3, [r7, #8]
 801bc00:	4a12      	ldr	r2, [pc, #72]	@ (801bc4c <SD_read+0x14c>)
 801bc02:	4618      	mov	r0, r3
 801bc04:	4611      	mov	r1, r2
 801bc06:	f44f 7300 	mov.w	r3, #512	@ 0x200
 801bc0a:	461a      	mov	r2, r3
 801bc0c:	f003 f883 	bl	801ed16 <memcpy>
          buff += BLOCKSIZE;
 801bc10:	68bb      	ldr	r3, [r7, #8]
 801bc12:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 801bc16:	60bb      	str	r3, [r7, #8]
      for (i = 0; i < count; i++) {
 801bc18:	69bb      	ldr	r3, [r7, #24]
 801bc1a:	3301      	adds	r3, #1
 801bc1c:	61bb      	str	r3, [r7, #24]
 801bc1e:	69bb      	ldr	r3, [r7, #24]
 801bc20:	683a      	ldr	r2, [r7, #0]
 801bc22:	429a      	cmp	r2, r3
 801bc24:	d8c3      	bhi.n	801bbae <SD_read+0xae>
 801bc26:	e000      	b.n	801bc2a <SD_read+0x12a>
        }
        else
        {
          break;
 801bc28:	bf00      	nop
        }
      }

      if ((i == count) && (ret == MSD_OK))
 801bc2a:	69bb      	ldr	r3, [r7, #24]
 801bc2c:	683a      	ldr	r2, [r7, #0]
 801bc2e:	429a      	cmp	r2, r3
 801bc30:	d104      	bne.n	801bc3c <SD_read+0x13c>
 801bc32:	7fbb      	ldrb	r3, [r7, #30]
 801bc34:	2b00      	cmp	r3, #0
 801bc36:	d101      	bne.n	801bc3c <SD_read+0x13c>
        res = RES_OK;
 801bc38:	2300      	movs	r3, #0
 801bc3a:	77fb      	strb	r3, [r7, #31]
    }
#endif

  return res;
 801bc3c:	7ffb      	ldrb	r3, [r7, #31]
}
 801bc3e:	4618      	mov	r0, r3
 801bc40:	3720      	adds	r7, #32
 801bc42:	46bd      	mov	sp, r7
 801bc44:	bd80      	pop	{r7, pc}
 801bc46:	bf00      	nop
 801bc48:	24000b58 	.word	0x24000b58
 801bc4c:	24000954 	.word	0x24000954

0801bc50 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 801bc50:	b580      	push	{r7, lr}
 801bc52:	b088      	sub	sp, #32
 801bc54:	af00      	add	r7, sp, #0
 801bc56:	60b9      	str	r1, [r7, #8]
 801bc58:	607a      	str	r2, [r7, #4]
 801bc5a:	603b      	str	r3, [r7, #0]
 801bc5c:	4603      	mov	r3, r0
 801bc5e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 801bc60:	2301      	movs	r3, #1
 801bc62:	77fb      	strb	r3, [r7, #31]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 801bc64:	4b4b      	ldr	r3, [pc, #300]	@ (801bd94 <SD_write+0x144>)
 801bc66:	2200      	movs	r2, #0
 801bc68:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 801bc6a:	f247 5030 	movw	r0, #30000	@ 0x7530
 801bc6e:	f7ff fee7 	bl	801ba40 <SD_CheckStatusWithTimeout>
 801bc72:	4603      	mov	r3, r0
 801bc74:	2b00      	cmp	r3, #0
 801bc76:	da01      	bge.n	801bc7c <SD_write+0x2c>
  {
    return res;
 801bc78:	7ffb      	ldrb	r3, [r7, #31]
 801bc7a:	e087      	b.n	801bd8c <SD_write+0x13c>
  }

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
 801bc7c:	68bb      	ldr	r3, [r7, #8]
 801bc7e:	f003 0303 	and.w	r3, r3, #3
 801bc82:	2b00      	cmp	r3, #0
 801bc84:	d138      	bne.n	801bcf8 <SD_write+0xa8>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 801bc86:	683a      	ldr	r2, [r7, #0]
 801bc88:	6879      	ldr	r1, [r7, #4]
 801bc8a:	68b8      	ldr	r0, [r7, #8]
 801bc8c:	f7ff fe8c 	bl	801b9a8 <BSP_SD_WriteBlocks_DMA>
 801bc90:	4603      	mov	r3, r0
 801bc92:	2b00      	cmp	r3, #0
 801bc94:	d179      	bne.n	801bd8a <SD_write+0x13a>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 801bc96:	f7f5 fd6b 	bl	8011770 <HAL_GetTick>
 801bc9a:	6178      	str	r0, [r7, #20]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 801bc9c:	bf00      	nop
 801bc9e:	4b3d      	ldr	r3, [pc, #244]	@ (801bd94 <SD_write+0x144>)
 801bca0:	681b      	ldr	r3, [r3, #0]
 801bca2:	2b00      	cmp	r3, #0
 801bca4:	d108      	bne.n	801bcb8 <SD_write+0x68>
 801bca6:	f7f5 fd63 	bl	8011770 <HAL_GetTick>
 801bcaa:	4602      	mov	r2, r0
 801bcac:	697b      	ldr	r3, [r7, #20]
 801bcae:	1ad3      	subs	r3, r2, r3
 801bcb0:	f247 522f 	movw	r2, #29999	@ 0x752f
 801bcb4:	4293      	cmp	r3, r2
 801bcb6:	d9f2      	bls.n	801bc9e <SD_write+0x4e>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 801bcb8:	4b36      	ldr	r3, [pc, #216]	@ (801bd94 <SD_write+0x144>)
 801bcba:	681b      	ldr	r3, [r3, #0]
 801bcbc:	2b00      	cmp	r3, #0
 801bcbe:	d102      	bne.n	801bcc6 <SD_write+0x76>
      {
        res = RES_ERROR;
 801bcc0:	2301      	movs	r3, #1
 801bcc2:	77fb      	strb	r3, [r7, #31]
 801bcc4:	e061      	b.n	801bd8a <SD_write+0x13a>
      }
      else
      {
        WriteStatus = 0;
 801bcc6:	4b33      	ldr	r3, [pc, #204]	@ (801bd94 <SD_write+0x144>)
 801bcc8:	2200      	movs	r2, #0
 801bcca:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 801bccc:	f7f5 fd50 	bl	8011770 <HAL_GetTick>
 801bcd0:	6178      	str	r0, [r7, #20]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 801bcd2:	e007      	b.n	801bce4 <SD_write+0x94>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 801bcd4:	f7ff fe82 	bl	801b9dc <BSP_SD_GetCardState>
 801bcd8:	4603      	mov	r3, r0
 801bcda:	2b00      	cmp	r3, #0
 801bcdc:	d102      	bne.n	801bce4 <SD_write+0x94>
          {
            res = RES_OK;
 801bcde:	2300      	movs	r3, #0
 801bce0:	77fb      	strb	r3, [r7, #31]
            break;
 801bce2:	e052      	b.n	801bd8a <SD_write+0x13a>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 801bce4:	f7f5 fd44 	bl	8011770 <HAL_GetTick>
 801bce8:	4602      	mov	r2, r0
 801bcea:	697b      	ldr	r3, [r7, #20]
 801bcec:	1ad3      	subs	r3, r2, r3
 801bcee:	f247 522f 	movw	r2, #29999	@ 0x752f
 801bcf2:	4293      	cmp	r3, r2
 801bcf4:	d9ee      	bls.n	801bcd4 <SD_write+0x84>
 801bcf6:	e048      	b.n	801bd8a <SD_write+0x13a>
      * invalidate the scratch buffer before the next write to get the actual data instead of the cached one
      */
      SCB_InvalidateDCache_by_Addr((uint32_t*)scratch, BLOCKSIZE);
#endif

      for (i = 0; i < count; i++)
 801bcf8:	2300      	movs	r3, #0
 801bcfa:	61bb      	str	r3, [r7, #24]
 801bcfc:	e034      	b.n	801bd68 <SD_write+0x118>
      {
        WriteStatus = 0;
 801bcfe:	4b25      	ldr	r3, [pc, #148]	@ (801bd94 <SD_write+0x144>)
 801bd00:	2200      	movs	r2, #0
 801bd02:	601a      	str	r2, [r3, #0]

        memcpy((void *)scratch, (void *)buff, BLOCKSIZE);
 801bd04:	4a24      	ldr	r2, [pc, #144]	@ (801bd98 <SD_write+0x148>)
 801bd06:	68bb      	ldr	r3, [r7, #8]
 801bd08:	4610      	mov	r0, r2
 801bd0a:	4619      	mov	r1, r3
 801bd0c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 801bd10:	461a      	mov	r2, r3
 801bd12:	f003 f800 	bl	801ed16 <memcpy>
        buff += BLOCKSIZE;
 801bd16:	68bb      	ldr	r3, [r7, #8]
 801bd18:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 801bd1c:	60bb      	str	r3, [r7, #8]

        ret = BSP_SD_WriteBlocks_DMA((uint32_t*)scratch, (uint32_t)sector++, 1);
 801bd1e:	687b      	ldr	r3, [r7, #4]
 801bd20:	1c5a      	adds	r2, r3, #1
 801bd22:	607a      	str	r2, [r7, #4]
 801bd24:	2201      	movs	r2, #1
 801bd26:	4619      	mov	r1, r3
 801bd28:	481b      	ldr	r0, [pc, #108]	@ (801bd98 <SD_write+0x148>)
 801bd2a:	f7ff fe3d 	bl	801b9a8 <BSP_SD_WriteBlocks_DMA>
 801bd2e:	4603      	mov	r3, r0
 801bd30:	77bb      	strb	r3, [r7, #30]
        if (ret == MSD_OK) {
 801bd32:	7fbb      	ldrb	r3, [r7, #30]
 801bd34:	2b00      	cmp	r3, #0
 801bd36:	d11c      	bne.n	801bd72 <SD_write+0x122>
          /* wait for a message from the queue or a timeout */
          timeout = HAL_GetTick();
 801bd38:	f7f5 fd1a 	bl	8011770 <HAL_GetTick>
 801bd3c:	6178      	str	r0, [r7, #20]
          while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 801bd3e:	bf00      	nop
 801bd40:	4b14      	ldr	r3, [pc, #80]	@ (801bd94 <SD_write+0x144>)
 801bd42:	681b      	ldr	r3, [r3, #0]
 801bd44:	2b00      	cmp	r3, #0
 801bd46:	d108      	bne.n	801bd5a <SD_write+0x10a>
 801bd48:	f7f5 fd12 	bl	8011770 <HAL_GetTick>
 801bd4c:	4602      	mov	r2, r0
 801bd4e:	697b      	ldr	r3, [r7, #20]
 801bd50:	1ad3      	subs	r3, r2, r3
 801bd52:	f247 522f 	movw	r2, #29999	@ 0x752f
 801bd56:	4293      	cmp	r3, r2
 801bd58:	d9f2      	bls.n	801bd40 <SD_write+0xf0>
          {
          }
          if (WriteStatus == 0)
 801bd5a:	4b0e      	ldr	r3, [pc, #56]	@ (801bd94 <SD_write+0x144>)
 801bd5c:	681b      	ldr	r3, [r3, #0]
 801bd5e:	2b00      	cmp	r3, #0
 801bd60:	d009      	beq.n	801bd76 <SD_write+0x126>
      for (i = 0; i < count; i++)
 801bd62:	69bb      	ldr	r3, [r7, #24]
 801bd64:	3301      	adds	r3, #1
 801bd66:	61bb      	str	r3, [r7, #24]
 801bd68:	69bb      	ldr	r3, [r7, #24]
 801bd6a:	683a      	ldr	r2, [r7, #0]
 801bd6c:	429a      	cmp	r2, r3
 801bd6e:	d8c6      	bhi.n	801bcfe <SD_write+0xae>
 801bd70:	e002      	b.n	801bd78 <SD_write+0x128>
          }

        }
        else
        {
          break;
 801bd72:	bf00      	nop
 801bd74:	e000      	b.n	801bd78 <SD_write+0x128>
            break;
 801bd76:	bf00      	nop
        }
      }
      if ((i == count) && (ret == MSD_OK))
 801bd78:	69bb      	ldr	r3, [r7, #24]
 801bd7a:	683a      	ldr	r2, [r7, #0]
 801bd7c:	429a      	cmp	r2, r3
 801bd7e:	d104      	bne.n	801bd8a <SD_write+0x13a>
 801bd80:	7fbb      	ldrb	r3, [r7, #30]
 801bd82:	2b00      	cmp	r3, #0
 801bd84:	d101      	bne.n	801bd8a <SD_write+0x13a>
        res = RES_OK;
 801bd86:	2300      	movs	r3, #0
 801bd88:	77fb      	strb	r3, [r7, #31]
    }
#endif
  return res;
 801bd8a:	7ffb      	ldrb	r3, [r7, #31]
}
 801bd8c:	4618      	mov	r0, r3
 801bd8e:	3720      	adds	r7, #32
 801bd90:	46bd      	mov	sp, r7
 801bd92:	bd80      	pop	{r7, pc}
 801bd94:	24000b54 	.word	0x24000b54
 801bd98:	24000954 	.word	0x24000954

0801bd9c <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 801bd9c:	b580      	push	{r7, lr}
 801bd9e:	b08c      	sub	sp, #48	@ 0x30
 801bda0:	af00      	add	r7, sp, #0
 801bda2:	4603      	mov	r3, r0
 801bda4:	603a      	str	r2, [r7, #0]
 801bda6:	71fb      	strb	r3, [r7, #7]
 801bda8:	460b      	mov	r3, r1
 801bdaa:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 801bdac:	2301      	movs	r3, #1
 801bdae:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 801bdb2:	4b25      	ldr	r3, [pc, #148]	@ (801be48 <SD_ioctl+0xac>)
 801bdb4:	781b      	ldrb	r3, [r3, #0]
 801bdb6:	b2db      	uxtb	r3, r3
 801bdb8:	f003 0301 	and.w	r3, r3, #1
 801bdbc:	2b00      	cmp	r3, #0
 801bdbe:	d001      	beq.n	801bdc4 <SD_ioctl+0x28>
 801bdc0:	2303      	movs	r3, #3
 801bdc2:	e03c      	b.n	801be3e <SD_ioctl+0xa2>

  switch (cmd)
 801bdc4:	79bb      	ldrb	r3, [r7, #6]
 801bdc6:	2b03      	cmp	r3, #3
 801bdc8:	d834      	bhi.n	801be34 <SD_ioctl+0x98>
 801bdca:	a201      	add	r2, pc, #4	@ (adr r2, 801bdd0 <SD_ioctl+0x34>)
 801bdcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801bdd0:	0801bde1 	.word	0x0801bde1
 801bdd4:	0801bde9 	.word	0x0801bde9
 801bdd8:	0801be01 	.word	0x0801be01
 801bddc:	0801be1b 	.word	0x0801be1b
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 801bde0:	2300      	movs	r3, #0
 801bde2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 801bde6:	e028      	b.n	801be3a <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 801bde8:	f107 0308 	add.w	r3, r7, #8
 801bdec:	4618      	mov	r0, r3
 801bdee:	f7ff fe05 	bl	801b9fc <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 801bdf2:	6a3a      	ldr	r2, [r7, #32]
 801bdf4:	683b      	ldr	r3, [r7, #0]
 801bdf6:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 801bdf8:	2300      	movs	r3, #0
 801bdfa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 801bdfe:	e01c      	b.n	801be3a <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 801be00:	f107 0308 	add.w	r3, r7, #8
 801be04:	4618      	mov	r0, r3
 801be06:	f7ff fdf9 	bl	801b9fc <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 801be0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801be0c:	b29a      	uxth	r2, r3
 801be0e:	683b      	ldr	r3, [r7, #0]
 801be10:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 801be12:	2300      	movs	r3, #0
 801be14:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 801be18:	e00f      	b.n	801be3a <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 801be1a:	f107 0308 	add.w	r3, r7, #8
 801be1e:	4618      	mov	r0, r3
 801be20:	f7ff fdec 	bl	801b9fc <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 801be24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801be26:	0a5a      	lsrs	r2, r3, #9
 801be28:	683b      	ldr	r3, [r7, #0]
 801be2a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 801be2c:	2300      	movs	r3, #0
 801be2e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 801be32:	e002      	b.n	801be3a <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 801be34:	2304      	movs	r3, #4
 801be36:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 801be3a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 801be3e:	4618      	mov	r0, r3
 801be40:	3730      	adds	r7, #48	@ 0x30
 801be42:	46bd      	mov	sp, r7
 801be44:	bd80      	pop	{r7, pc}
 801be46:	bf00      	nop
 801be48:	2400003d 	.word	0x2400003d

0801be4c <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 801be4c:	b480      	push	{r7}
 801be4e:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 801be50:	4b03      	ldr	r3, [pc, #12]	@ (801be60 <BSP_SD_WriteCpltCallback+0x14>)
 801be52:	2201      	movs	r2, #1
 801be54:	601a      	str	r2, [r3, #0]
}
 801be56:	bf00      	nop
 801be58:	46bd      	mov	sp, r7
 801be5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801be5e:	4770      	bx	lr
 801be60:	24000b54 	.word	0x24000b54

0801be64 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 801be64:	b480      	push	{r7}
 801be66:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 801be68:	4b03      	ldr	r3, [pc, #12]	@ (801be78 <BSP_SD_ReadCpltCallback+0x14>)
 801be6a:	2201      	movs	r2, #1
 801be6c:	601a      	str	r2, [r3, #0]
}
 801be6e:	bf00      	nop
 801be70:	46bd      	mov	sp, r7
 801be72:	f85d 7b04 	ldr.w	r7, [sp], #4
 801be76:	4770      	bx	lr
 801be78:	24000b58 	.word	0x24000b58

0801be7c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 801be7c:	b580      	push	{r7, lr}
 801be7e:	b084      	sub	sp, #16
 801be80:	af00      	add	r7, sp, #0
 801be82:	4603      	mov	r3, r0
 801be84:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 801be86:	79fb      	ldrb	r3, [r7, #7]
 801be88:	4a08      	ldr	r2, [pc, #32]	@ (801beac <disk_status+0x30>)
 801be8a:	009b      	lsls	r3, r3, #2
 801be8c:	4413      	add	r3, r2
 801be8e:	685b      	ldr	r3, [r3, #4]
 801be90:	685b      	ldr	r3, [r3, #4]
 801be92:	79fa      	ldrb	r2, [r7, #7]
 801be94:	4905      	ldr	r1, [pc, #20]	@ (801beac <disk_status+0x30>)
 801be96:	440a      	add	r2, r1
 801be98:	7a12      	ldrb	r2, [r2, #8]
 801be9a:	4610      	mov	r0, r2
 801be9c:	4798      	blx	r3
 801be9e:	4603      	mov	r3, r0
 801bea0:	73fb      	strb	r3, [r7, #15]
  return stat;
 801bea2:	7bfb      	ldrb	r3, [r7, #15]
}
 801bea4:	4618      	mov	r0, r3
 801bea6:	3710      	adds	r7, #16
 801bea8:	46bd      	mov	sp, r7
 801beaa:	bd80      	pop	{r7, pc}
 801beac:	24000b84 	.word	0x24000b84

0801beb0 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 801beb0:	b580      	push	{r7, lr}
 801beb2:	b084      	sub	sp, #16
 801beb4:	af00      	add	r7, sp, #0
 801beb6:	4603      	mov	r3, r0
 801beb8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 801beba:	2300      	movs	r3, #0
 801bebc:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 801bebe:	79fb      	ldrb	r3, [r7, #7]
 801bec0:	4a0e      	ldr	r2, [pc, #56]	@ (801befc <disk_initialize+0x4c>)
 801bec2:	5cd3      	ldrb	r3, [r2, r3]
 801bec4:	2b00      	cmp	r3, #0
 801bec6:	d114      	bne.n	801bef2 <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 801bec8:	79fb      	ldrb	r3, [r7, #7]
 801beca:	4a0c      	ldr	r2, [pc, #48]	@ (801befc <disk_initialize+0x4c>)
 801becc:	009b      	lsls	r3, r3, #2
 801bece:	4413      	add	r3, r2
 801bed0:	685b      	ldr	r3, [r3, #4]
 801bed2:	681b      	ldr	r3, [r3, #0]
 801bed4:	79fa      	ldrb	r2, [r7, #7]
 801bed6:	4909      	ldr	r1, [pc, #36]	@ (801befc <disk_initialize+0x4c>)
 801bed8:	440a      	add	r2, r1
 801beda:	7a12      	ldrb	r2, [r2, #8]
 801bedc:	4610      	mov	r0, r2
 801bede:	4798      	blx	r3
 801bee0:	4603      	mov	r3, r0
 801bee2:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 801bee4:	7bfb      	ldrb	r3, [r7, #15]
 801bee6:	2b00      	cmp	r3, #0
 801bee8:	d103      	bne.n	801bef2 <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 801beea:	79fb      	ldrb	r3, [r7, #7]
 801beec:	4a03      	ldr	r2, [pc, #12]	@ (801befc <disk_initialize+0x4c>)
 801beee:	2101      	movs	r1, #1
 801bef0:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 801bef2:	7bfb      	ldrb	r3, [r7, #15]
}
 801bef4:	4618      	mov	r0, r3
 801bef6:	3710      	adds	r7, #16
 801bef8:	46bd      	mov	sp, r7
 801befa:	bd80      	pop	{r7, pc}
 801befc:	24000b84 	.word	0x24000b84

0801bf00 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 801bf00:	b590      	push	{r4, r7, lr}
 801bf02:	b087      	sub	sp, #28
 801bf04:	af00      	add	r7, sp, #0
 801bf06:	60b9      	str	r1, [r7, #8]
 801bf08:	607a      	str	r2, [r7, #4]
 801bf0a:	603b      	str	r3, [r7, #0]
 801bf0c:	4603      	mov	r3, r0
 801bf0e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 801bf10:	7bfb      	ldrb	r3, [r7, #15]
 801bf12:	4a0a      	ldr	r2, [pc, #40]	@ (801bf3c <disk_read+0x3c>)
 801bf14:	009b      	lsls	r3, r3, #2
 801bf16:	4413      	add	r3, r2
 801bf18:	685b      	ldr	r3, [r3, #4]
 801bf1a:	689c      	ldr	r4, [r3, #8]
 801bf1c:	7bfb      	ldrb	r3, [r7, #15]
 801bf1e:	4a07      	ldr	r2, [pc, #28]	@ (801bf3c <disk_read+0x3c>)
 801bf20:	4413      	add	r3, r2
 801bf22:	7a18      	ldrb	r0, [r3, #8]
 801bf24:	683b      	ldr	r3, [r7, #0]
 801bf26:	687a      	ldr	r2, [r7, #4]
 801bf28:	68b9      	ldr	r1, [r7, #8]
 801bf2a:	47a0      	blx	r4
 801bf2c:	4603      	mov	r3, r0
 801bf2e:	75fb      	strb	r3, [r7, #23]
  return res;
 801bf30:	7dfb      	ldrb	r3, [r7, #23]
}
 801bf32:	4618      	mov	r0, r3
 801bf34:	371c      	adds	r7, #28
 801bf36:	46bd      	mov	sp, r7
 801bf38:	bd90      	pop	{r4, r7, pc}
 801bf3a:	bf00      	nop
 801bf3c:	24000b84 	.word	0x24000b84

0801bf40 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 801bf40:	b590      	push	{r4, r7, lr}
 801bf42:	b087      	sub	sp, #28
 801bf44:	af00      	add	r7, sp, #0
 801bf46:	60b9      	str	r1, [r7, #8]
 801bf48:	607a      	str	r2, [r7, #4]
 801bf4a:	603b      	str	r3, [r7, #0]
 801bf4c:	4603      	mov	r3, r0
 801bf4e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 801bf50:	7bfb      	ldrb	r3, [r7, #15]
 801bf52:	4a0a      	ldr	r2, [pc, #40]	@ (801bf7c <disk_write+0x3c>)
 801bf54:	009b      	lsls	r3, r3, #2
 801bf56:	4413      	add	r3, r2
 801bf58:	685b      	ldr	r3, [r3, #4]
 801bf5a:	68dc      	ldr	r4, [r3, #12]
 801bf5c:	7bfb      	ldrb	r3, [r7, #15]
 801bf5e:	4a07      	ldr	r2, [pc, #28]	@ (801bf7c <disk_write+0x3c>)
 801bf60:	4413      	add	r3, r2
 801bf62:	7a18      	ldrb	r0, [r3, #8]
 801bf64:	683b      	ldr	r3, [r7, #0]
 801bf66:	687a      	ldr	r2, [r7, #4]
 801bf68:	68b9      	ldr	r1, [r7, #8]
 801bf6a:	47a0      	blx	r4
 801bf6c:	4603      	mov	r3, r0
 801bf6e:	75fb      	strb	r3, [r7, #23]
  return res;
 801bf70:	7dfb      	ldrb	r3, [r7, #23]
}
 801bf72:	4618      	mov	r0, r3
 801bf74:	371c      	adds	r7, #28
 801bf76:	46bd      	mov	sp, r7
 801bf78:	bd90      	pop	{r4, r7, pc}
 801bf7a:	bf00      	nop
 801bf7c:	24000b84 	.word	0x24000b84

0801bf80 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 801bf80:	b580      	push	{r7, lr}
 801bf82:	b084      	sub	sp, #16
 801bf84:	af00      	add	r7, sp, #0
 801bf86:	4603      	mov	r3, r0
 801bf88:	603a      	str	r2, [r7, #0]
 801bf8a:	71fb      	strb	r3, [r7, #7]
 801bf8c:	460b      	mov	r3, r1
 801bf8e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 801bf90:	79fb      	ldrb	r3, [r7, #7]
 801bf92:	4a09      	ldr	r2, [pc, #36]	@ (801bfb8 <disk_ioctl+0x38>)
 801bf94:	009b      	lsls	r3, r3, #2
 801bf96:	4413      	add	r3, r2
 801bf98:	685b      	ldr	r3, [r3, #4]
 801bf9a:	691b      	ldr	r3, [r3, #16]
 801bf9c:	79fa      	ldrb	r2, [r7, #7]
 801bf9e:	4906      	ldr	r1, [pc, #24]	@ (801bfb8 <disk_ioctl+0x38>)
 801bfa0:	440a      	add	r2, r1
 801bfa2:	7a10      	ldrb	r0, [r2, #8]
 801bfa4:	79b9      	ldrb	r1, [r7, #6]
 801bfa6:	683a      	ldr	r2, [r7, #0]
 801bfa8:	4798      	blx	r3
 801bfaa:	4603      	mov	r3, r0
 801bfac:	73fb      	strb	r3, [r7, #15]
  return res;
 801bfae:	7bfb      	ldrb	r3, [r7, #15]
}
 801bfb0:	4618      	mov	r0, r3
 801bfb2:	3710      	adds	r7, #16
 801bfb4:	46bd      	mov	sp, r7
 801bfb6:	bd80      	pop	{r7, pc}
 801bfb8:	24000b84 	.word	0x24000b84

0801bfbc <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 801bfbc:	b480      	push	{r7}
 801bfbe:	b085      	sub	sp, #20
 801bfc0:	af00      	add	r7, sp, #0
 801bfc2:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 801bfc4:	687b      	ldr	r3, [r7, #4]
 801bfc6:	3301      	adds	r3, #1
 801bfc8:	781b      	ldrb	r3, [r3, #0]
 801bfca:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 801bfcc:	89fb      	ldrh	r3, [r7, #14]
 801bfce:	021b      	lsls	r3, r3, #8
 801bfd0:	b21a      	sxth	r2, r3
 801bfd2:	687b      	ldr	r3, [r7, #4]
 801bfd4:	781b      	ldrb	r3, [r3, #0]
 801bfd6:	b21b      	sxth	r3, r3
 801bfd8:	4313      	orrs	r3, r2
 801bfda:	b21b      	sxth	r3, r3
 801bfdc:	81fb      	strh	r3, [r7, #14]
	return rv;
 801bfde:	89fb      	ldrh	r3, [r7, #14]
}
 801bfe0:	4618      	mov	r0, r3
 801bfe2:	3714      	adds	r7, #20
 801bfe4:	46bd      	mov	sp, r7
 801bfe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bfea:	4770      	bx	lr

0801bfec <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 801bfec:	b480      	push	{r7}
 801bfee:	b085      	sub	sp, #20
 801bff0:	af00      	add	r7, sp, #0
 801bff2:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 801bff4:	687b      	ldr	r3, [r7, #4]
 801bff6:	3303      	adds	r3, #3
 801bff8:	781b      	ldrb	r3, [r3, #0]
 801bffa:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 801bffc:	68fb      	ldr	r3, [r7, #12]
 801bffe:	021b      	lsls	r3, r3, #8
 801c000:	687a      	ldr	r2, [r7, #4]
 801c002:	3202      	adds	r2, #2
 801c004:	7812      	ldrb	r2, [r2, #0]
 801c006:	4313      	orrs	r3, r2
 801c008:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 801c00a:	68fb      	ldr	r3, [r7, #12]
 801c00c:	021b      	lsls	r3, r3, #8
 801c00e:	687a      	ldr	r2, [r7, #4]
 801c010:	3201      	adds	r2, #1
 801c012:	7812      	ldrb	r2, [r2, #0]
 801c014:	4313      	orrs	r3, r2
 801c016:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 801c018:	68fb      	ldr	r3, [r7, #12]
 801c01a:	021b      	lsls	r3, r3, #8
 801c01c:	687a      	ldr	r2, [r7, #4]
 801c01e:	7812      	ldrb	r2, [r2, #0]
 801c020:	4313      	orrs	r3, r2
 801c022:	60fb      	str	r3, [r7, #12]
	return rv;
 801c024:	68fb      	ldr	r3, [r7, #12]
}
 801c026:	4618      	mov	r0, r3
 801c028:	3714      	adds	r7, #20
 801c02a:	46bd      	mov	sp, r7
 801c02c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c030:	4770      	bx	lr

0801c032 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 801c032:	b480      	push	{r7}
 801c034:	b083      	sub	sp, #12
 801c036:	af00      	add	r7, sp, #0
 801c038:	6078      	str	r0, [r7, #4]
 801c03a:	460b      	mov	r3, r1
 801c03c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 801c03e:	687b      	ldr	r3, [r7, #4]
 801c040:	1c5a      	adds	r2, r3, #1
 801c042:	607a      	str	r2, [r7, #4]
 801c044:	887a      	ldrh	r2, [r7, #2]
 801c046:	b2d2      	uxtb	r2, r2
 801c048:	701a      	strb	r2, [r3, #0]
 801c04a:	887b      	ldrh	r3, [r7, #2]
 801c04c:	0a1b      	lsrs	r3, r3, #8
 801c04e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 801c050:	687b      	ldr	r3, [r7, #4]
 801c052:	1c5a      	adds	r2, r3, #1
 801c054:	607a      	str	r2, [r7, #4]
 801c056:	887a      	ldrh	r2, [r7, #2]
 801c058:	b2d2      	uxtb	r2, r2
 801c05a:	701a      	strb	r2, [r3, #0]
}
 801c05c:	bf00      	nop
 801c05e:	370c      	adds	r7, #12
 801c060:	46bd      	mov	sp, r7
 801c062:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c066:	4770      	bx	lr

0801c068 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 801c068:	b480      	push	{r7}
 801c06a:	b083      	sub	sp, #12
 801c06c:	af00      	add	r7, sp, #0
 801c06e:	6078      	str	r0, [r7, #4]
 801c070:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 801c072:	687b      	ldr	r3, [r7, #4]
 801c074:	1c5a      	adds	r2, r3, #1
 801c076:	607a      	str	r2, [r7, #4]
 801c078:	683a      	ldr	r2, [r7, #0]
 801c07a:	b2d2      	uxtb	r2, r2
 801c07c:	701a      	strb	r2, [r3, #0]
 801c07e:	683b      	ldr	r3, [r7, #0]
 801c080:	0a1b      	lsrs	r3, r3, #8
 801c082:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 801c084:	687b      	ldr	r3, [r7, #4]
 801c086:	1c5a      	adds	r2, r3, #1
 801c088:	607a      	str	r2, [r7, #4]
 801c08a:	683a      	ldr	r2, [r7, #0]
 801c08c:	b2d2      	uxtb	r2, r2
 801c08e:	701a      	strb	r2, [r3, #0]
 801c090:	683b      	ldr	r3, [r7, #0]
 801c092:	0a1b      	lsrs	r3, r3, #8
 801c094:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 801c096:	687b      	ldr	r3, [r7, #4]
 801c098:	1c5a      	adds	r2, r3, #1
 801c09a:	607a      	str	r2, [r7, #4]
 801c09c:	683a      	ldr	r2, [r7, #0]
 801c09e:	b2d2      	uxtb	r2, r2
 801c0a0:	701a      	strb	r2, [r3, #0]
 801c0a2:	683b      	ldr	r3, [r7, #0]
 801c0a4:	0a1b      	lsrs	r3, r3, #8
 801c0a6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 801c0a8:	687b      	ldr	r3, [r7, #4]
 801c0aa:	1c5a      	adds	r2, r3, #1
 801c0ac:	607a      	str	r2, [r7, #4]
 801c0ae:	683a      	ldr	r2, [r7, #0]
 801c0b0:	b2d2      	uxtb	r2, r2
 801c0b2:	701a      	strb	r2, [r3, #0]
}
 801c0b4:	bf00      	nop
 801c0b6:	370c      	adds	r7, #12
 801c0b8:	46bd      	mov	sp, r7
 801c0ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c0be:	4770      	bx	lr

0801c0c0 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 801c0c0:	b480      	push	{r7}
 801c0c2:	b087      	sub	sp, #28
 801c0c4:	af00      	add	r7, sp, #0
 801c0c6:	60f8      	str	r0, [r7, #12]
 801c0c8:	60b9      	str	r1, [r7, #8]
 801c0ca:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 801c0cc:	68fb      	ldr	r3, [r7, #12]
 801c0ce:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 801c0d0:	68bb      	ldr	r3, [r7, #8]
 801c0d2:	613b      	str	r3, [r7, #16]

	if (cnt) {
 801c0d4:	687b      	ldr	r3, [r7, #4]
 801c0d6:	2b00      	cmp	r3, #0
 801c0d8:	d00d      	beq.n	801c0f6 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 801c0da:	693a      	ldr	r2, [r7, #16]
 801c0dc:	1c53      	adds	r3, r2, #1
 801c0de:	613b      	str	r3, [r7, #16]
 801c0e0:	697b      	ldr	r3, [r7, #20]
 801c0e2:	1c59      	adds	r1, r3, #1
 801c0e4:	6179      	str	r1, [r7, #20]
 801c0e6:	7812      	ldrb	r2, [r2, #0]
 801c0e8:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 801c0ea:	687b      	ldr	r3, [r7, #4]
 801c0ec:	3b01      	subs	r3, #1
 801c0ee:	607b      	str	r3, [r7, #4]
 801c0f0:	687b      	ldr	r3, [r7, #4]
 801c0f2:	2b00      	cmp	r3, #0
 801c0f4:	d1f1      	bne.n	801c0da <mem_cpy+0x1a>
	}
}
 801c0f6:	bf00      	nop
 801c0f8:	371c      	adds	r7, #28
 801c0fa:	46bd      	mov	sp, r7
 801c0fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c100:	4770      	bx	lr

0801c102 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 801c102:	b480      	push	{r7}
 801c104:	b087      	sub	sp, #28
 801c106:	af00      	add	r7, sp, #0
 801c108:	60f8      	str	r0, [r7, #12]
 801c10a:	60b9      	str	r1, [r7, #8]
 801c10c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 801c10e:	68fb      	ldr	r3, [r7, #12]
 801c110:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 801c112:	697b      	ldr	r3, [r7, #20]
 801c114:	1c5a      	adds	r2, r3, #1
 801c116:	617a      	str	r2, [r7, #20]
 801c118:	68ba      	ldr	r2, [r7, #8]
 801c11a:	b2d2      	uxtb	r2, r2
 801c11c:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 801c11e:	687b      	ldr	r3, [r7, #4]
 801c120:	3b01      	subs	r3, #1
 801c122:	607b      	str	r3, [r7, #4]
 801c124:	687b      	ldr	r3, [r7, #4]
 801c126:	2b00      	cmp	r3, #0
 801c128:	d1f3      	bne.n	801c112 <mem_set+0x10>
}
 801c12a:	bf00      	nop
 801c12c:	bf00      	nop
 801c12e:	371c      	adds	r7, #28
 801c130:	46bd      	mov	sp, r7
 801c132:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c136:	4770      	bx	lr

0801c138 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 801c138:	b480      	push	{r7}
 801c13a:	b089      	sub	sp, #36	@ 0x24
 801c13c:	af00      	add	r7, sp, #0
 801c13e:	60f8      	str	r0, [r7, #12]
 801c140:	60b9      	str	r1, [r7, #8]
 801c142:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 801c144:	68fb      	ldr	r3, [r7, #12]
 801c146:	61fb      	str	r3, [r7, #28]
 801c148:	68bb      	ldr	r3, [r7, #8]
 801c14a:	61bb      	str	r3, [r7, #24]
	int r = 0;
 801c14c:	2300      	movs	r3, #0
 801c14e:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 801c150:	69fb      	ldr	r3, [r7, #28]
 801c152:	1c5a      	adds	r2, r3, #1
 801c154:	61fa      	str	r2, [r7, #28]
 801c156:	781b      	ldrb	r3, [r3, #0]
 801c158:	4619      	mov	r1, r3
 801c15a:	69bb      	ldr	r3, [r7, #24]
 801c15c:	1c5a      	adds	r2, r3, #1
 801c15e:	61ba      	str	r2, [r7, #24]
 801c160:	781b      	ldrb	r3, [r3, #0]
 801c162:	1acb      	subs	r3, r1, r3
 801c164:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 801c166:	687b      	ldr	r3, [r7, #4]
 801c168:	3b01      	subs	r3, #1
 801c16a:	607b      	str	r3, [r7, #4]
 801c16c:	687b      	ldr	r3, [r7, #4]
 801c16e:	2b00      	cmp	r3, #0
 801c170:	d002      	beq.n	801c178 <mem_cmp+0x40>
 801c172:	697b      	ldr	r3, [r7, #20]
 801c174:	2b00      	cmp	r3, #0
 801c176:	d0eb      	beq.n	801c150 <mem_cmp+0x18>

	return r;
 801c178:	697b      	ldr	r3, [r7, #20]
}
 801c17a:	4618      	mov	r0, r3
 801c17c:	3724      	adds	r7, #36	@ 0x24
 801c17e:	46bd      	mov	sp, r7
 801c180:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c184:	4770      	bx	lr

0801c186 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 801c186:	b480      	push	{r7}
 801c188:	b083      	sub	sp, #12
 801c18a:	af00      	add	r7, sp, #0
 801c18c:	6078      	str	r0, [r7, #4]
 801c18e:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 801c190:	e002      	b.n	801c198 <chk_chr+0x12>
 801c192:	687b      	ldr	r3, [r7, #4]
 801c194:	3301      	adds	r3, #1
 801c196:	607b      	str	r3, [r7, #4]
 801c198:	687b      	ldr	r3, [r7, #4]
 801c19a:	781b      	ldrb	r3, [r3, #0]
 801c19c:	2b00      	cmp	r3, #0
 801c19e:	d005      	beq.n	801c1ac <chk_chr+0x26>
 801c1a0:	687b      	ldr	r3, [r7, #4]
 801c1a2:	781b      	ldrb	r3, [r3, #0]
 801c1a4:	461a      	mov	r2, r3
 801c1a6:	683b      	ldr	r3, [r7, #0]
 801c1a8:	4293      	cmp	r3, r2
 801c1aa:	d1f2      	bne.n	801c192 <chk_chr+0xc>
	return *str;
 801c1ac:	687b      	ldr	r3, [r7, #4]
 801c1ae:	781b      	ldrb	r3, [r3, #0]
}
 801c1b0:	4618      	mov	r0, r3
 801c1b2:	370c      	adds	r7, #12
 801c1b4:	46bd      	mov	sp, r7
 801c1b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c1ba:	4770      	bx	lr

0801c1bc <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 801c1bc:	b480      	push	{r7}
 801c1be:	b085      	sub	sp, #20
 801c1c0:	af00      	add	r7, sp, #0
 801c1c2:	6078      	str	r0, [r7, #4]
 801c1c4:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 801c1c6:	2300      	movs	r3, #0
 801c1c8:	60bb      	str	r3, [r7, #8]
 801c1ca:	68bb      	ldr	r3, [r7, #8]
 801c1cc:	60fb      	str	r3, [r7, #12]
 801c1ce:	e029      	b.n	801c224 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 801c1d0:	4a27      	ldr	r2, [pc, #156]	@ (801c270 <chk_lock+0xb4>)
 801c1d2:	68fb      	ldr	r3, [r7, #12]
 801c1d4:	011b      	lsls	r3, r3, #4
 801c1d6:	4413      	add	r3, r2
 801c1d8:	681b      	ldr	r3, [r3, #0]
 801c1da:	2b00      	cmp	r3, #0
 801c1dc:	d01d      	beq.n	801c21a <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 801c1de:	4a24      	ldr	r2, [pc, #144]	@ (801c270 <chk_lock+0xb4>)
 801c1e0:	68fb      	ldr	r3, [r7, #12]
 801c1e2:	011b      	lsls	r3, r3, #4
 801c1e4:	4413      	add	r3, r2
 801c1e6:	681a      	ldr	r2, [r3, #0]
 801c1e8:	687b      	ldr	r3, [r7, #4]
 801c1ea:	681b      	ldr	r3, [r3, #0]
 801c1ec:	429a      	cmp	r2, r3
 801c1ee:	d116      	bne.n	801c21e <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 801c1f0:	4a1f      	ldr	r2, [pc, #124]	@ (801c270 <chk_lock+0xb4>)
 801c1f2:	68fb      	ldr	r3, [r7, #12]
 801c1f4:	011b      	lsls	r3, r3, #4
 801c1f6:	4413      	add	r3, r2
 801c1f8:	3304      	adds	r3, #4
 801c1fa:	681a      	ldr	r2, [r3, #0]
 801c1fc:	687b      	ldr	r3, [r7, #4]
 801c1fe:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 801c200:	429a      	cmp	r2, r3
 801c202:	d10c      	bne.n	801c21e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 801c204:	4a1a      	ldr	r2, [pc, #104]	@ (801c270 <chk_lock+0xb4>)
 801c206:	68fb      	ldr	r3, [r7, #12]
 801c208:	011b      	lsls	r3, r3, #4
 801c20a:	4413      	add	r3, r2
 801c20c:	3308      	adds	r3, #8
 801c20e:	681a      	ldr	r2, [r3, #0]
 801c210:	687b      	ldr	r3, [r7, #4]
 801c212:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 801c214:	429a      	cmp	r2, r3
 801c216:	d102      	bne.n	801c21e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 801c218:	e007      	b.n	801c22a <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 801c21a:	2301      	movs	r3, #1
 801c21c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 801c21e:	68fb      	ldr	r3, [r7, #12]
 801c220:	3301      	adds	r3, #1
 801c222:	60fb      	str	r3, [r7, #12]
 801c224:	68fb      	ldr	r3, [r7, #12]
 801c226:	2b01      	cmp	r3, #1
 801c228:	d9d2      	bls.n	801c1d0 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 801c22a:	68fb      	ldr	r3, [r7, #12]
 801c22c:	2b02      	cmp	r3, #2
 801c22e:	d109      	bne.n	801c244 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 801c230:	68bb      	ldr	r3, [r7, #8]
 801c232:	2b00      	cmp	r3, #0
 801c234:	d102      	bne.n	801c23c <chk_lock+0x80>
 801c236:	683b      	ldr	r3, [r7, #0]
 801c238:	2b02      	cmp	r3, #2
 801c23a:	d101      	bne.n	801c240 <chk_lock+0x84>
 801c23c:	2300      	movs	r3, #0
 801c23e:	e010      	b.n	801c262 <chk_lock+0xa6>
 801c240:	2312      	movs	r3, #18
 801c242:	e00e      	b.n	801c262 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 801c244:	683b      	ldr	r3, [r7, #0]
 801c246:	2b00      	cmp	r3, #0
 801c248:	d108      	bne.n	801c25c <chk_lock+0xa0>
 801c24a:	4a09      	ldr	r2, [pc, #36]	@ (801c270 <chk_lock+0xb4>)
 801c24c:	68fb      	ldr	r3, [r7, #12]
 801c24e:	011b      	lsls	r3, r3, #4
 801c250:	4413      	add	r3, r2
 801c252:	330c      	adds	r3, #12
 801c254:	881b      	ldrh	r3, [r3, #0]
 801c256:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801c25a:	d101      	bne.n	801c260 <chk_lock+0xa4>
 801c25c:	2310      	movs	r3, #16
 801c25e:	e000      	b.n	801c262 <chk_lock+0xa6>
 801c260:	2300      	movs	r3, #0
}
 801c262:	4618      	mov	r0, r3
 801c264:	3714      	adds	r7, #20
 801c266:	46bd      	mov	sp, r7
 801c268:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c26c:	4770      	bx	lr
 801c26e:	bf00      	nop
 801c270:	24000b64 	.word	0x24000b64

0801c274 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 801c274:	b480      	push	{r7}
 801c276:	b083      	sub	sp, #12
 801c278:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 801c27a:	2300      	movs	r3, #0
 801c27c:	607b      	str	r3, [r7, #4]
 801c27e:	e002      	b.n	801c286 <enq_lock+0x12>
 801c280:	687b      	ldr	r3, [r7, #4]
 801c282:	3301      	adds	r3, #1
 801c284:	607b      	str	r3, [r7, #4]
 801c286:	687b      	ldr	r3, [r7, #4]
 801c288:	2b01      	cmp	r3, #1
 801c28a:	d806      	bhi.n	801c29a <enq_lock+0x26>
 801c28c:	4a09      	ldr	r2, [pc, #36]	@ (801c2b4 <enq_lock+0x40>)
 801c28e:	687b      	ldr	r3, [r7, #4]
 801c290:	011b      	lsls	r3, r3, #4
 801c292:	4413      	add	r3, r2
 801c294:	681b      	ldr	r3, [r3, #0]
 801c296:	2b00      	cmp	r3, #0
 801c298:	d1f2      	bne.n	801c280 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 801c29a:	687b      	ldr	r3, [r7, #4]
 801c29c:	2b02      	cmp	r3, #2
 801c29e:	bf14      	ite	ne
 801c2a0:	2301      	movne	r3, #1
 801c2a2:	2300      	moveq	r3, #0
 801c2a4:	b2db      	uxtb	r3, r3
}
 801c2a6:	4618      	mov	r0, r3
 801c2a8:	370c      	adds	r7, #12
 801c2aa:	46bd      	mov	sp, r7
 801c2ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c2b0:	4770      	bx	lr
 801c2b2:	bf00      	nop
 801c2b4:	24000b64 	.word	0x24000b64

0801c2b8 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 801c2b8:	b480      	push	{r7}
 801c2ba:	b085      	sub	sp, #20
 801c2bc:	af00      	add	r7, sp, #0
 801c2be:	6078      	str	r0, [r7, #4]
 801c2c0:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 801c2c2:	2300      	movs	r3, #0
 801c2c4:	60fb      	str	r3, [r7, #12]
 801c2c6:	e01f      	b.n	801c308 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 801c2c8:	4a41      	ldr	r2, [pc, #260]	@ (801c3d0 <inc_lock+0x118>)
 801c2ca:	68fb      	ldr	r3, [r7, #12]
 801c2cc:	011b      	lsls	r3, r3, #4
 801c2ce:	4413      	add	r3, r2
 801c2d0:	681a      	ldr	r2, [r3, #0]
 801c2d2:	687b      	ldr	r3, [r7, #4]
 801c2d4:	681b      	ldr	r3, [r3, #0]
 801c2d6:	429a      	cmp	r2, r3
 801c2d8:	d113      	bne.n	801c302 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 801c2da:	4a3d      	ldr	r2, [pc, #244]	@ (801c3d0 <inc_lock+0x118>)
 801c2dc:	68fb      	ldr	r3, [r7, #12]
 801c2de:	011b      	lsls	r3, r3, #4
 801c2e0:	4413      	add	r3, r2
 801c2e2:	3304      	adds	r3, #4
 801c2e4:	681a      	ldr	r2, [r3, #0]
 801c2e6:	687b      	ldr	r3, [r7, #4]
 801c2e8:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 801c2ea:	429a      	cmp	r2, r3
 801c2ec:	d109      	bne.n	801c302 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 801c2ee:	4a38      	ldr	r2, [pc, #224]	@ (801c3d0 <inc_lock+0x118>)
 801c2f0:	68fb      	ldr	r3, [r7, #12]
 801c2f2:	011b      	lsls	r3, r3, #4
 801c2f4:	4413      	add	r3, r2
 801c2f6:	3308      	adds	r3, #8
 801c2f8:	681a      	ldr	r2, [r3, #0]
 801c2fa:	687b      	ldr	r3, [r7, #4]
 801c2fc:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 801c2fe:	429a      	cmp	r2, r3
 801c300:	d006      	beq.n	801c310 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 801c302:	68fb      	ldr	r3, [r7, #12]
 801c304:	3301      	adds	r3, #1
 801c306:	60fb      	str	r3, [r7, #12]
 801c308:	68fb      	ldr	r3, [r7, #12]
 801c30a:	2b01      	cmp	r3, #1
 801c30c:	d9dc      	bls.n	801c2c8 <inc_lock+0x10>
 801c30e:	e000      	b.n	801c312 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 801c310:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 801c312:	68fb      	ldr	r3, [r7, #12]
 801c314:	2b02      	cmp	r3, #2
 801c316:	d132      	bne.n	801c37e <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 801c318:	2300      	movs	r3, #0
 801c31a:	60fb      	str	r3, [r7, #12]
 801c31c:	e002      	b.n	801c324 <inc_lock+0x6c>
 801c31e:	68fb      	ldr	r3, [r7, #12]
 801c320:	3301      	adds	r3, #1
 801c322:	60fb      	str	r3, [r7, #12]
 801c324:	68fb      	ldr	r3, [r7, #12]
 801c326:	2b01      	cmp	r3, #1
 801c328:	d806      	bhi.n	801c338 <inc_lock+0x80>
 801c32a:	4a29      	ldr	r2, [pc, #164]	@ (801c3d0 <inc_lock+0x118>)
 801c32c:	68fb      	ldr	r3, [r7, #12]
 801c32e:	011b      	lsls	r3, r3, #4
 801c330:	4413      	add	r3, r2
 801c332:	681b      	ldr	r3, [r3, #0]
 801c334:	2b00      	cmp	r3, #0
 801c336:	d1f2      	bne.n	801c31e <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 801c338:	68fb      	ldr	r3, [r7, #12]
 801c33a:	2b02      	cmp	r3, #2
 801c33c:	d101      	bne.n	801c342 <inc_lock+0x8a>
 801c33e:	2300      	movs	r3, #0
 801c340:	e040      	b.n	801c3c4 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 801c342:	687b      	ldr	r3, [r7, #4]
 801c344:	681a      	ldr	r2, [r3, #0]
 801c346:	4922      	ldr	r1, [pc, #136]	@ (801c3d0 <inc_lock+0x118>)
 801c348:	68fb      	ldr	r3, [r7, #12]
 801c34a:	011b      	lsls	r3, r3, #4
 801c34c:	440b      	add	r3, r1
 801c34e:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 801c350:	687b      	ldr	r3, [r7, #4]
 801c352:	689a      	ldr	r2, [r3, #8]
 801c354:	491e      	ldr	r1, [pc, #120]	@ (801c3d0 <inc_lock+0x118>)
 801c356:	68fb      	ldr	r3, [r7, #12]
 801c358:	011b      	lsls	r3, r3, #4
 801c35a:	440b      	add	r3, r1
 801c35c:	3304      	adds	r3, #4
 801c35e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 801c360:	687b      	ldr	r3, [r7, #4]
 801c362:	695a      	ldr	r2, [r3, #20]
 801c364:	491a      	ldr	r1, [pc, #104]	@ (801c3d0 <inc_lock+0x118>)
 801c366:	68fb      	ldr	r3, [r7, #12]
 801c368:	011b      	lsls	r3, r3, #4
 801c36a:	440b      	add	r3, r1
 801c36c:	3308      	adds	r3, #8
 801c36e:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 801c370:	4a17      	ldr	r2, [pc, #92]	@ (801c3d0 <inc_lock+0x118>)
 801c372:	68fb      	ldr	r3, [r7, #12]
 801c374:	011b      	lsls	r3, r3, #4
 801c376:	4413      	add	r3, r2
 801c378:	330c      	adds	r3, #12
 801c37a:	2200      	movs	r2, #0
 801c37c:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 801c37e:	683b      	ldr	r3, [r7, #0]
 801c380:	2b00      	cmp	r3, #0
 801c382:	d009      	beq.n	801c398 <inc_lock+0xe0>
 801c384:	4a12      	ldr	r2, [pc, #72]	@ (801c3d0 <inc_lock+0x118>)
 801c386:	68fb      	ldr	r3, [r7, #12]
 801c388:	011b      	lsls	r3, r3, #4
 801c38a:	4413      	add	r3, r2
 801c38c:	330c      	adds	r3, #12
 801c38e:	881b      	ldrh	r3, [r3, #0]
 801c390:	2b00      	cmp	r3, #0
 801c392:	d001      	beq.n	801c398 <inc_lock+0xe0>
 801c394:	2300      	movs	r3, #0
 801c396:	e015      	b.n	801c3c4 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 801c398:	683b      	ldr	r3, [r7, #0]
 801c39a:	2b00      	cmp	r3, #0
 801c39c:	d108      	bne.n	801c3b0 <inc_lock+0xf8>
 801c39e:	4a0c      	ldr	r2, [pc, #48]	@ (801c3d0 <inc_lock+0x118>)
 801c3a0:	68fb      	ldr	r3, [r7, #12]
 801c3a2:	011b      	lsls	r3, r3, #4
 801c3a4:	4413      	add	r3, r2
 801c3a6:	330c      	adds	r3, #12
 801c3a8:	881b      	ldrh	r3, [r3, #0]
 801c3aa:	3301      	adds	r3, #1
 801c3ac:	b29a      	uxth	r2, r3
 801c3ae:	e001      	b.n	801c3b4 <inc_lock+0xfc>
 801c3b0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 801c3b4:	4906      	ldr	r1, [pc, #24]	@ (801c3d0 <inc_lock+0x118>)
 801c3b6:	68fb      	ldr	r3, [r7, #12]
 801c3b8:	011b      	lsls	r3, r3, #4
 801c3ba:	440b      	add	r3, r1
 801c3bc:	330c      	adds	r3, #12
 801c3be:	801a      	strh	r2, [r3, #0]

	return i + 1;
 801c3c0:	68fb      	ldr	r3, [r7, #12]
 801c3c2:	3301      	adds	r3, #1
}
 801c3c4:	4618      	mov	r0, r3
 801c3c6:	3714      	adds	r7, #20
 801c3c8:	46bd      	mov	sp, r7
 801c3ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c3ce:	4770      	bx	lr
 801c3d0:	24000b64 	.word	0x24000b64

0801c3d4 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 801c3d4:	b480      	push	{r7}
 801c3d6:	b085      	sub	sp, #20
 801c3d8:	af00      	add	r7, sp, #0
 801c3da:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 801c3dc:	687b      	ldr	r3, [r7, #4]
 801c3de:	3b01      	subs	r3, #1
 801c3e0:	607b      	str	r3, [r7, #4]
 801c3e2:	687b      	ldr	r3, [r7, #4]
 801c3e4:	2b01      	cmp	r3, #1
 801c3e6:	d825      	bhi.n	801c434 <dec_lock+0x60>
		n = Files[i].ctr;
 801c3e8:	4a17      	ldr	r2, [pc, #92]	@ (801c448 <dec_lock+0x74>)
 801c3ea:	687b      	ldr	r3, [r7, #4]
 801c3ec:	011b      	lsls	r3, r3, #4
 801c3ee:	4413      	add	r3, r2
 801c3f0:	330c      	adds	r3, #12
 801c3f2:	881b      	ldrh	r3, [r3, #0]
 801c3f4:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 801c3f6:	89fb      	ldrh	r3, [r7, #14]
 801c3f8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801c3fc:	d101      	bne.n	801c402 <dec_lock+0x2e>
 801c3fe:	2300      	movs	r3, #0
 801c400:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 801c402:	89fb      	ldrh	r3, [r7, #14]
 801c404:	2b00      	cmp	r3, #0
 801c406:	d002      	beq.n	801c40e <dec_lock+0x3a>
 801c408:	89fb      	ldrh	r3, [r7, #14]
 801c40a:	3b01      	subs	r3, #1
 801c40c:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 801c40e:	4a0e      	ldr	r2, [pc, #56]	@ (801c448 <dec_lock+0x74>)
 801c410:	687b      	ldr	r3, [r7, #4]
 801c412:	011b      	lsls	r3, r3, #4
 801c414:	4413      	add	r3, r2
 801c416:	330c      	adds	r3, #12
 801c418:	89fa      	ldrh	r2, [r7, #14]
 801c41a:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 801c41c:	89fb      	ldrh	r3, [r7, #14]
 801c41e:	2b00      	cmp	r3, #0
 801c420:	d105      	bne.n	801c42e <dec_lock+0x5a>
 801c422:	4a09      	ldr	r2, [pc, #36]	@ (801c448 <dec_lock+0x74>)
 801c424:	687b      	ldr	r3, [r7, #4]
 801c426:	011b      	lsls	r3, r3, #4
 801c428:	4413      	add	r3, r2
 801c42a:	2200      	movs	r2, #0
 801c42c:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 801c42e:	2300      	movs	r3, #0
 801c430:	737b      	strb	r3, [r7, #13]
 801c432:	e001      	b.n	801c438 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 801c434:	2302      	movs	r3, #2
 801c436:	737b      	strb	r3, [r7, #13]
	}
	return res;
 801c438:	7b7b      	ldrb	r3, [r7, #13]
}
 801c43a:	4618      	mov	r0, r3
 801c43c:	3714      	adds	r7, #20
 801c43e:	46bd      	mov	sp, r7
 801c440:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c444:	4770      	bx	lr
 801c446:	bf00      	nop
 801c448:	24000b64 	.word	0x24000b64

0801c44c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 801c44c:	b480      	push	{r7}
 801c44e:	b085      	sub	sp, #20
 801c450:	af00      	add	r7, sp, #0
 801c452:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 801c454:	2300      	movs	r3, #0
 801c456:	60fb      	str	r3, [r7, #12]
 801c458:	e010      	b.n	801c47c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 801c45a:	4a0d      	ldr	r2, [pc, #52]	@ (801c490 <clear_lock+0x44>)
 801c45c:	68fb      	ldr	r3, [r7, #12]
 801c45e:	011b      	lsls	r3, r3, #4
 801c460:	4413      	add	r3, r2
 801c462:	681b      	ldr	r3, [r3, #0]
 801c464:	687a      	ldr	r2, [r7, #4]
 801c466:	429a      	cmp	r2, r3
 801c468:	d105      	bne.n	801c476 <clear_lock+0x2a>
 801c46a:	4a09      	ldr	r2, [pc, #36]	@ (801c490 <clear_lock+0x44>)
 801c46c:	68fb      	ldr	r3, [r7, #12]
 801c46e:	011b      	lsls	r3, r3, #4
 801c470:	4413      	add	r3, r2
 801c472:	2200      	movs	r2, #0
 801c474:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 801c476:	68fb      	ldr	r3, [r7, #12]
 801c478:	3301      	adds	r3, #1
 801c47a:	60fb      	str	r3, [r7, #12]
 801c47c:	68fb      	ldr	r3, [r7, #12]
 801c47e:	2b01      	cmp	r3, #1
 801c480:	d9eb      	bls.n	801c45a <clear_lock+0xe>
	}
}
 801c482:	bf00      	nop
 801c484:	bf00      	nop
 801c486:	3714      	adds	r7, #20
 801c488:	46bd      	mov	sp, r7
 801c48a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c48e:	4770      	bx	lr
 801c490:	24000b64 	.word	0x24000b64

0801c494 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 801c494:	b580      	push	{r7, lr}
 801c496:	b086      	sub	sp, #24
 801c498:	af00      	add	r7, sp, #0
 801c49a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 801c49c:	2300      	movs	r3, #0
 801c49e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 801c4a0:	687b      	ldr	r3, [r7, #4]
 801c4a2:	78db      	ldrb	r3, [r3, #3]
 801c4a4:	2b00      	cmp	r3, #0
 801c4a6:	d034      	beq.n	801c512 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 801c4a8:	687b      	ldr	r3, [r7, #4]
 801c4aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801c4ac:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 801c4ae:	687b      	ldr	r3, [r7, #4]
 801c4b0:	7858      	ldrb	r0, [r3, #1]
 801c4b2:	687b      	ldr	r3, [r7, #4]
 801c4b4:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801c4b8:	2301      	movs	r3, #1
 801c4ba:	697a      	ldr	r2, [r7, #20]
 801c4bc:	f7ff fd40 	bl	801bf40 <disk_write>
 801c4c0:	4603      	mov	r3, r0
 801c4c2:	2b00      	cmp	r3, #0
 801c4c4:	d002      	beq.n	801c4cc <sync_window+0x38>
			res = FR_DISK_ERR;
 801c4c6:	2301      	movs	r3, #1
 801c4c8:	73fb      	strb	r3, [r7, #15]
 801c4ca:	e022      	b.n	801c512 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 801c4cc:	687b      	ldr	r3, [r7, #4]
 801c4ce:	2200      	movs	r2, #0
 801c4d0:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 801c4d2:	687b      	ldr	r3, [r7, #4]
 801c4d4:	6a1b      	ldr	r3, [r3, #32]
 801c4d6:	697a      	ldr	r2, [r7, #20]
 801c4d8:	1ad2      	subs	r2, r2, r3
 801c4da:	687b      	ldr	r3, [r7, #4]
 801c4dc:	699b      	ldr	r3, [r3, #24]
 801c4de:	429a      	cmp	r2, r3
 801c4e0:	d217      	bcs.n	801c512 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801c4e2:	687b      	ldr	r3, [r7, #4]
 801c4e4:	789b      	ldrb	r3, [r3, #2]
 801c4e6:	613b      	str	r3, [r7, #16]
 801c4e8:	e010      	b.n	801c50c <sync_window+0x78>
					wsect += fs->fsize;
 801c4ea:	687b      	ldr	r3, [r7, #4]
 801c4ec:	699b      	ldr	r3, [r3, #24]
 801c4ee:	697a      	ldr	r2, [r7, #20]
 801c4f0:	4413      	add	r3, r2
 801c4f2:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 801c4f4:	687b      	ldr	r3, [r7, #4]
 801c4f6:	7858      	ldrb	r0, [r3, #1]
 801c4f8:	687b      	ldr	r3, [r7, #4]
 801c4fa:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801c4fe:	2301      	movs	r3, #1
 801c500:	697a      	ldr	r2, [r7, #20]
 801c502:	f7ff fd1d 	bl	801bf40 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801c506:	693b      	ldr	r3, [r7, #16]
 801c508:	3b01      	subs	r3, #1
 801c50a:	613b      	str	r3, [r7, #16]
 801c50c:	693b      	ldr	r3, [r7, #16]
 801c50e:	2b01      	cmp	r3, #1
 801c510:	d8eb      	bhi.n	801c4ea <sync_window+0x56>
				}
			}
		}
	}
	return res;
 801c512:	7bfb      	ldrb	r3, [r7, #15]
}
 801c514:	4618      	mov	r0, r3
 801c516:	3718      	adds	r7, #24
 801c518:	46bd      	mov	sp, r7
 801c51a:	bd80      	pop	{r7, pc}

0801c51c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 801c51c:	b580      	push	{r7, lr}
 801c51e:	b084      	sub	sp, #16
 801c520:	af00      	add	r7, sp, #0
 801c522:	6078      	str	r0, [r7, #4]
 801c524:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 801c526:	2300      	movs	r3, #0
 801c528:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 801c52a:	687b      	ldr	r3, [r7, #4]
 801c52c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801c52e:	683a      	ldr	r2, [r7, #0]
 801c530:	429a      	cmp	r2, r3
 801c532:	d01b      	beq.n	801c56c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 801c534:	6878      	ldr	r0, [r7, #4]
 801c536:	f7ff ffad 	bl	801c494 <sync_window>
 801c53a:	4603      	mov	r3, r0
 801c53c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 801c53e:	7bfb      	ldrb	r3, [r7, #15]
 801c540:	2b00      	cmp	r3, #0
 801c542:	d113      	bne.n	801c56c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 801c544:	687b      	ldr	r3, [r7, #4]
 801c546:	7858      	ldrb	r0, [r3, #1]
 801c548:	687b      	ldr	r3, [r7, #4]
 801c54a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801c54e:	2301      	movs	r3, #1
 801c550:	683a      	ldr	r2, [r7, #0]
 801c552:	f7ff fcd5 	bl	801bf00 <disk_read>
 801c556:	4603      	mov	r3, r0
 801c558:	2b00      	cmp	r3, #0
 801c55a:	d004      	beq.n	801c566 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 801c55c:	f04f 33ff 	mov.w	r3, #4294967295
 801c560:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 801c562:	2301      	movs	r3, #1
 801c564:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 801c566:	687b      	ldr	r3, [r7, #4]
 801c568:	683a      	ldr	r2, [r7, #0]
 801c56a:	62da      	str	r2, [r3, #44]	@ 0x2c
		}
	}
	return res;
 801c56c:	7bfb      	ldrb	r3, [r7, #15]
}
 801c56e:	4618      	mov	r0, r3
 801c570:	3710      	adds	r7, #16
 801c572:	46bd      	mov	sp, r7
 801c574:	bd80      	pop	{r7, pc}
	...

0801c578 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 801c578:	b580      	push	{r7, lr}
 801c57a:	b084      	sub	sp, #16
 801c57c:	af00      	add	r7, sp, #0
 801c57e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 801c580:	6878      	ldr	r0, [r7, #4]
 801c582:	f7ff ff87 	bl	801c494 <sync_window>
 801c586:	4603      	mov	r3, r0
 801c588:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 801c58a:	7bfb      	ldrb	r3, [r7, #15]
 801c58c:	2b00      	cmp	r3, #0
 801c58e:	d158      	bne.n	801c642 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 801c590:	687b      	ldr	r3, [r7, #4]
 801c592:	781b      	ldrb	r3, [r3, #0]
 801c594:	2b03      	cmp	r3, #3
 801c596:	d148      	bne.n	801c62a <sync_fs+0xb2>
 801c598:	687b      	ldr	r3, [r7, #4]
 801c59a:	791b      	ldrb	r3, [r3, #4]
 801c59c:	2b01      	cmp	r3, #1
 801c59e:	d144      	bne.n	801c62a <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 801c5a0:	687b      	ldr	r3, [r7, #4]
 801c5a2:	3330      	adds	r3, #48	@ 0x30
 801c5a4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801c5a8:	2100      	movs	r1, #0
 801c5aa:	4618      	mov	r0, r3
 801c5ac:	f7ff fda9 	bl	801c102 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 801c5b0:	687b      	ldr	r3, [r7, #4]
 801c5b2:	3330      	adds	r3, #48	@ 0x30
 801c5b4:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 801c5b8:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 801c5bc:	4618      	mov	r0, r3
 801c5be:	f7ff fd38 	bl	801c032 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 801c5c2:	687b      	ldr	r3, [r7, #4]
 801c5c4:	3330      	adds	r3, #48	@ 0x30
 801c5c6:	4921      	ldr	r1, [pc, #132]	@ (801c64c <sync_fs+0xd4>)
 801c5c8:	4618      	mov	r0, r3
 801c5ca:	f7ff fd4d 	bl	801c068 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 801c5ce:	687b      	ldr	r3, [r7, #4]
 801c5d0:	3330      	adds	r3, #48	@ 0x30
 801c5d2:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 801c5d6:	491e      	ldr	r1, [pc, #120]	@ (801c650 <sync_fs+0xd8>)
 801c5d8:	4618      	mov	r0, r3
 801c5da:	f7ff fd45 	bl	801c068 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 801c5de:	687b      	ldr	r3, [r7, #4]
 801c5e0:	3330      	adds	r3, #48	@ 0x30
 801c5e2:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 801c5e6:	687b      	ldr	r3, [r7, #4]
 801c5e8:	691b      	ldr	r3, [r3, #16]
 801c5ea:	4619      	mov	r1, r3
 801c5ec:	4610      	mov	r0, r2
 801c5ee:	f7ff fd3b 	bl	801c068 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 801c5f2:	687b      	ldr	r3, [r7, #4]
 801c5f4:	3330      	adds	r3, #48	@ 0x30
 801c5f6:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 801c5fa:	687b      	ldr	r3, [r7, #4]
 801c5fc:	68db      	ldr	r3, [r3, #12]
 801c5fe:	4619      	mov	r1, r3
 801c600:	4610      	mov	r0, r2
 801c602:	f7ff fd31 	bl	801c068 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 801c606:	687b      	ldr	r3, [r7, #4]
 801c608:	69db      	ldr	r3, [r3, #28]
 801c60a:	1c5a      	adds	r2, r3, #1
 801c60c:	687b      	ldr	r3, [r7, #4]
 801c60e:	62da      	str	r2, [r3, #44]	@ 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 801c610:	687b      	ldr	r3, [r7, #4]
 801c612:	7858      	ldrb	r0, [r3, #1]
 801c614:	687b      	ldr	r3, [r7, #4]
 801c616:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801c61a:	687b      	ldr	r3, [r7, #4]
 801c61c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801c61e:	2301      	movs	r3, #1
 801c620:	f7ff fc8e 	bl	801bf40 <disk_write>
			fs->fsi_flag = 0;
 801c624:	687b      	ldr	r3, [r7, #4]
 801c626:	2200      	movs	r2, #0
 801c628:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 801c62a:	687b      	ldr	r3, [r7, #4]
 801c62c:	785b      	ldrb	r3, [r3, #1]
 801c62e:	2200      	movs	r2, #0
 801c630:	2100      	movs	r1, #0
 801c632:	4618      	mov	r0, r3
 801c634:	f7ff fca4 	bl	801bf80 <disk_ioctl>
 801c638:	4603      	mov	r3, r0
 801c63a:	2b00      	cmp	r3, #0
 801c63c:	d001      	beq.n	801c642 <sync_fs+0xca>
 801c63e:	2301      	movs	r3, #1
 801c640:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 801c642:	7bfb      	ldrb	r3, [r7, #15]
}
 801c644:	4618      	mov	r0, r3
 801c646:	3710      	adds	r7, #16
 801c648:	46bd      	mov	sp, r7
 801c64a:	bd80      	pop	{r7, pc}
 801c64c:	41615252 	.word	0x41615252
 801c650:	61417272 	.word	0x61417272

0801c654 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 801c654:	b480      	push	{r7}
 801c656:	b083      	sub	sp, #12
 801c658:	af00      	add	r7, sp, #0
 801c65a:	6078      	str	r0, [r7, #4]
 801c65c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 801c65e:	683b      	ldr	r3, [r7, #0]
 801c660:	3b02      	subs	r3, #2
 801c662:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 801c664:	687b      	ldr	r3, [r7, #4]
 801c666:	695b      	ldr	r3, [r3, #20]
 801c668:	3b02      	subs	r3, #2
 801c66a:	683a      	ldr	r2, [r7, #0]
 801c66c:	429a      	cmp	r2, r3
 801c66e:	d301      	bcc.n	801c674 <clust2sect+0x20>
 801c670:	2300      	movs	r3, #0
 801c672:	e008      	b.n	801c686 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 801c674:	687b      	ldr	r3, [r7, #4]
 801c676:	895b      	ldrh	r3, [r3, #10]
 801c678:	461a      	mov	r2, r3
 801c67a:	683b      	ldr	r3, [r7, #0]
 801c67c:	fb03 f202 	mul.w	r2, r3, r2
 801c680:	687b      	ldr	r3, [r7, #4]
 801c682:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801c684:	4413      	add	r3, r2
}
 801c686:	4618      	mov	r0, r3
 801c688:	370c      	adds	r7, #12
 801c68a:	46bd      	mov	sp, r7
 801c68c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c690:	4770      	bx	lr

0801c692 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 801c692:	b580      	push	{r7, lr}
 801c694:	b086      	sub	sp, #24
 801c696:	af00      	add	r7, sp, #0
 801c698:	6078      	str	r0, [r7, #4]
 801c69a:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 801c69c:	687b      	ldr	r3, [r7, #4]
 801c69e:	681b      	ldr	r3, [r3, #0]
 801c6a0:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 801c6a2:	683b      	ldr	r3, [r7, #0]
 801c6a4:	2b01      	cmp	r3, #1
 801c6a6:	d904      	bls.n	801c6b2 <get_fat+0x20>
 801c6a8:	693b      	ldr	r3, [r7, #16]
 801c6aa:	695b      	ldr	r3, [r3, #20]
 801c6ac:	683a      	ldr	r2, [r7, #0]
 801c6ae:	429a      	cmp	r2, r3
 801c6b0:	d302      	bcc.n	801c6b8 <get_fat+0x26>
		val = 1;	/* Internal error */
 801c6b2:	2301      	movs	r3, #1
 801c6b4:	617b      	str	r3, [r7, #20]
 801c6b6:	e08e      	b.n	801c7d6 <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 801c6b8:	f04f 33ff 	mov.w	r3, #4294967295
 801c6bc:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 801c6be:	693b      	ldr	r3, [r7, #16]
 801c6c0:	781b      	ldrb	r3, [r3, #0]
 801c6c2:	2b03      	cmp	r3, #3
 801c6c4:	d061      	beq.n	801c78a <get_fat+0xf8>
 801c6c6:	2b03      	cmp	r3, #3
 801c6c8:	dc7b      	bgt.n	801c7c2 <get_fat+0x130>
 801c6ca:	2b01      	cmp	r3, #1
 801c6cc:	d002      	beq.n	801c6d4 <get_fat+0x42>
 801c6ce:	2b02      	cmp	r3, #2
 801c6d0:	d041      	beq.n	801c756 <get_fat+0xc4>
 801c6d2:	e076      	b.n	801c7c2 <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 801c6d4:	683b      	ldr	r3, [r7, #0]
 801c6d6:	60fb      	str	r3, [r7, #12]
 801c6d8:	68fb      	ldr	r3, [r7, #12]
 801c6da:	085b      	lsrs	r3, r3, #1
 801c6dc:	68fa      	ldr	r2, [r7, #12]
 801c6de:	4413      	add	r3, r2
 801c6e0:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801c6e2:	693b      	ldr	r3, [r7, #16]
 801c6e4:	6a1a      	ldr	r2, [r3, #32]
 801c6e6:	68fb      	ldr	r3, [r7, #12]
 801c6e8:	0a5b      	lsrs	r3, r3, #9
 801c6ea:	4413      	add	r3, r2
 801c6ec:	4619      	mov	r1, r3
 801c6ee:	6938      	ldr	r0, [r7, #16]
 801c6f0:	f7ff ff14 	bl	801c51c <move_window>
 801c6f4:	4603      	mov	r3, r0
 801c6f6:	2b00      	cmp	r3, #0
 801c6f8:	d166      	bne.n	801c7c8 <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 801c6fa:	68fb      	ldr	r3, [r7, #12]
 801c6fc:	1c5a      	adds	r2, r3, #1
 801c6fe:	60fa      	str	r2, [r7, #12]
 801c700:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801c704:	693a      	ldr	r2, [r7, #16]
 801c706:	4413      	add	r3, r2
 801c708:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801c70c:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801c70e:	693b      	ldr	r3, [r7, #16]
 801c710:	6a1a      	ldr	r2, [r3, #32]
 801c712:	68fb      	ldr	r3, [r7, #12]
 801c714:	0a5b      	lsrs	r3, r3, #9
 801c716:	4413      	add	r3, r2
 801c718:	4619      	mov	r1, r3
 801c71a:	6938      	ldr	r0, [r7, #16]
 801c71c:	f7ff fefe 	bl	801c51c <move_window>
 801c720:	4603      	mov	r3, r0
 801c722:	2b00      	cmp	r3, #0
 801c724:	d152      	bne.n	801c7cc <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 801c726:	68fb      	ldr	r3, [r7, #12]
 801c728:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801c72c:	693a      	ldr	r2, [r7, #16]
 801c72e:	4413      	add	r3, r2
 801c730:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801c734:	021b      	lsls	r3, r3, #8
 801c736:	68ba      	ldr	r2, [r7, #8]
 801c738:	4313      	orrs	r3, r2
 801c73a:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 801c73c:	683b      	ldr	r3, [r7, #0]
 801c73e:	f003 0301 	and.w	r3, r3, #1
 801c742:	2b00      	cmp	r3, #0
 801c744:	d002      	beq.n	801c74c <get_fat+0xba>
 801c746:	68bb      	ldr	r3, [r7, #8]
 801c748:	091b      	lsrs	r3, r3, #4
 801c74a:	e002      	b.n	801c752 <get_fat+0xc0>
 801c74c:	68bb      	ldr	r3, [r7, #8]
 801c74e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801c752:	617b      	str	r3, [r7, #20]
			break;
 801c754:	e03f      	b.n	801c7d6 <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 801c756:	693b      	ldr	r3, [r7, #16]
 801c758:	6a1a      	ldr	r2, [r3, #32]
 801c75a:	683b      	ldr	r3, [r7, #0]
 801c75c:	0a1b      	lsrs	r3, r3, #8
 801c75e:	4413      	add	r3, r2
 801c760:	4619      	mov	r1, r3
 801c762:	6938      	ldr	r0, [r7, #16]
 801c764:	f7ff feda 	bl	801c51c <move_window>
 801c768:	4603      	mov	r3, r0
 801c76a:	2b00      	cmp	r3, #0
 801c76c:	d130      	bne.n	801c7d0 <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 801c76e:	693b      	ldr	r3, [r7, #16]
 801c770:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 801c774:	683b      	ldr	r3, [r7, #0]
 801c776:	005b      	lsls	r3, r3, #1
 801c778:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 801c77c:	4413      	add	r3, r2
 801c77e:	4618      	mov	r0, r3
 801c780:	f7ff fc1c 	bl	801bfbc <ld_word>
 801c784:	4603      	mov	r3, r0
 801c786:	617b      	str	r3, [r7, #20]
			break;
 801c788:	e025      	b.n	801c7d6 <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 801c78a:	693b      	ldr	r3, [r7, #16]
 801c78c:	6a1a      	ldr	r2, [r3, #32]
 801c78e:	683b      	ldr	r3, [r7, #0]
 801c790:	09db      	lsrs	r3, r3, #7
 801c792:	4413      	add	r3, r2
 801c794:	4619      	mov	r1, r3
 801c796:	6938      	ldr	r0, [r7, #16]
 801c798:	f7ff fec0 	bl	801c51c <move_window>
 801c79c:	4603      	mov	r3, r0
 801c79e:	2b00      	cmp	r3, #0
 801c7a0:	d118      	bne.n	801c7d4 <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 801c7a2:	693b      	ldr	r3, [r7, #16]
 801c7a4:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 801c7a8:	683b      	ldr	r3, [r7, #0]
 801c7aa:	009b      	lsls	r3, r3, #2
 801c7ac:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 801c7b0:	4413      	add	r3, r2
 801c7b2:	4618      	mov	r0, r3
 801c7b4:	f7ff fc1a 	bl	801bfec <ld_dword>
 801c7b8:	4603      	mov	r3, r0
 801c7ba:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 801c7be:	617b      	str	r3, [r7, #20]
			break;
 801c7c0:	e009      	b.n	801c7d6 <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 801c7c2:	2301      	movs	r3, #1
 801c7c4:	617b      	str	r3, [r7, #20]
 801c7c6:	e006      	b.n	801c7d6 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801c7c8:	bf00      	nop
 801c7ca:	e004      	b.n	801c7d6 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801c7cc:	bf00      	nop
 801c7ce:	e002      	b.n	801c7d6 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 801c7d0:	bf00      	nop
 801c7d2:	e000      	b.n	801c7d6 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 801c7d4:	bf00      	nop
		}
	}

	return val;
 801c7d6:	697b      	ldr	r3, [r7, #20]
}
 801c7d8:	4618      	mov	r0, r3
 801c7da:	3718      	adds	r7, #24
 801c7dc:	46bd      	mov	sp, r7
 801c7de:	bd80      	pop	{r7, pc}

0801c7e0 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 801c7e0:	b590      	push	{r4, r7, lr}
 801c7e2:	b089      	sub	sp, #36	@ 0x24
 801c7e4:	af00      	add	r7, sp, #0
 801c7e6:	60f8      	str	r0, [r7, #12]
 801c7e8:	60b9      	str	r1, [r7, #8]
 801c7ea:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 801c7ec:	2302      	movs	r3, #2
 801c7ee:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 801c7f0:	68bb      	ldr	r3, [r7, #8]
 801c7f2:	2b01      	cmp	r3, #1
 801c7f4:	f240 80d9 	bls.w	801c9aa <put_fat+0x1ca>
 801c7f8:	68fb      	ldr	r3, [r7, #12]
 801c7fa:	695b      	ldr	r3, [r3, #20]
 801c7fc:	68ba      	ldr	r2, [r7, #8]
 801c7fe:	429a      	cmp	r2, r3
 801c800:	f080 80d3 	bcs.w	801c9aa <put_fat+0x1ca>
		switch (fs->fs_type) {
 801c804:	68fb      	ldr	r3, [r7, #12]
 801c806:	781b      	ldrb	r3, [r3, #0]
 801c808:	2b03      	cmp	r3, #3
 801c80a:	f000 8096 	beq.w	801c93a <put_fat+0x15a>
 801c80e:	2b03      	cmp	r3, #3
 801c810:	f300 80cb 	bgt.w	801c9aa <put_fat+0x1ca>
 801c814:	2b01      	cmp	r3, #1
 801c816:	d002      	beq.n	801c81e <put_fat+0x3e>
 801c818:	2b02      	cmp	r3, #2
 801c81a:	d06e      	beq.n	801c8fa <put_fat+0x11a>
 801c81c:	e0c5      	b.n	801c9aa <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 801c81e:	68bb      	ldr	r3, [r7, #8]
 801c820:	61bb      	str	r3, [r7, #24]
 801c822:	69bb      	ldr	r3, [r7, #24]
 801c824:	085b      	lsrs	r3, r3, #1
 801c826:	69ba      	ldr	r2, [r7, #24]
 801c828:	4413      	add	r3, r2
 801c82a:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 801c82c:	68fb      	ldr	r3, [r7, #12]
 801c82e:	6a1a      	ldr	r2, [r3, #32]
 801c830:	69bb      	ldr	r3, [r7, #24]
 801c832:	0a5b      	lsrs	r3, r3, #9
 801c834:	4413      	add	r3, r2
 801c836:	4619      	mov	r1, r3
 801c838:	68f8      	ldr	r0, [r7, #12]
 801c83a:	f7ff fe6f 	bl	801c51c <move_window>
 801c83e:	4603      	mov	r3, r0
 801c840:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801c842:	7ffb      	ldrb	r3, [r7, #31]
 801c844:	2b00      	cmp	r3, #0
 801c846:	f040 80a9 	bne.w	801c99c <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 801c84a:	68fb      	ldr	r3, [r7, #12]
 801c84c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 801c850:	69bb      	ldr	r3, [r7, #24]
 801c852:	1c59      	adds	r1, r3, #1
 801c854:	61b9      	str	r1, [r7, #24]
 801c856:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801c85a:	4413      	add	r3, r2
 801c85c:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 801c85e:	68bb      	ldr	r3, [r7, #8]
 801c860:	f003 0301 	and.w	r3, r3, #1
 801c864:	2b00      	cmp	r3, #0
 801c866:	d00d      	beq.n	801c884 <put_fat+0xa4>
 801c868:	697b      	ldr	r3, [r7, #20]
 801c86a:	781b      	ldrb	r3, [r3, #0]
 801c86c:	b25b      	sxtb	r3, r3
 801c86e:	f003 030f 	and.w	r3, r3, #15
 801c872:	b25a      	sxtb	r2, r3
 801c874:	687b      	ldr	r3, [r7, #4]
 801c876:	b2db      	uxtb	r3, r3
 801c878:	011b      	lsls	r3, r3, #4
 801c87a:	b25b      	sxtb	r3, r3
 801c87c:	4313      	orrs	r3, r2
 801c87e:	b25b      	sxtb	r3, r3
 801c880:	b2db      	uxtb	r3, r3
 801c882:	e001      	b.n	801c888 <put_fat+0xa8>
 801c884:	687b      	ldr	r3, [r7, #4]
 801c886:	b2db      	uxtb	r3, r3
 801c888:	697a      	ldr	r2, [r7, #20]
 801c88a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 801c88c:	68fb      	ldr	r3, [r7, #12]
 801c88e:	2201      	movs	r2, #1
 801c890:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 801c892:	68fb      	ldr	r3, [r7, #12]
 801c894:	6a1a      	ldr	r2, [r3, #32]
 801c896:	69bb      	ldr	r3, [r7, #24]
 801c898:	0a5b      	lsrs	r3, r3, #9
 801c89a:	4413      	add	r3, r2
 801c89c:	4619      	mov	r1, r3
 801c89e:	68f8      	ldr	r0, [r7, #12]
 801c8a0:	f7ff fe3c 	bl	801c51c <move_window>
 801c8a4:	4603      	mov	r3, r0
 801c8a6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801c8a8:	7ffb      	ldrb	r3, [r7, #31]
 801c8aa:	2b00      	cmp	r3, #0
 801c8ac:	d178      	bne.n	801c9a0 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 801c8ae:	68fb      	ldr	r3, [r7, #12]
 801c8b0:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 801c8b4:	69bb      	ldr	r3, [r7, #24]
 801c8b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801c8ba:	4413      	add	r3, r2
 801c8bc:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 801c8be:	68bb      	ldr	r3, [r7, #8]
 801c8c0:	f003 0301 	and.w	r3, r3, #1
 801c8c4:	2b00      	cmp	r3, #0
 801c8c6:	d003      	beq.n	801c8d0 <put_fat+0xf0>
 801c8c8:	687b      	ldr	r3, [r7, #4]
 801c8ca:	091b      	lsrs	r3, r3, #4
 801c8cc:	b2db      	uxtb	r3, r3
 801c8ce:	e00e      	b.n	801c8ee <put_fat+0x10e>
 801c8d0:	697b      	ldr	r3, [r7, #20]
 801c8d2:	781b      	ldrb	r3, [r3, #0]
 801c8d4:	b25b      	sxtb	r3, r3
 801c8d6:	f023 030f 	bic.w	r3, r3, #15
 801c8da:	b25a      	sxtb	r2, r3
 801c8dc:	687b      	ldr	r3, [r7, #4]
 801c8de:	0a1b      	lsrs	r3, r3, #8
 801c8e0:	b25b      	sxtb	r3, r3
 801c8e2:	f003 030f 	and.w	r3, r3, #15
 801c8e6:	b25b      	sxtb	r3, r3
 801c8e8:	4313      	orrs	r3, r2
 801c8ea:	b25b      	sxtb	r3, r3
 801c8ec:	b2db      	uxtb	r3, r3
 801c8ee:	697a      	ldr	r2, [r7, #20]
 801c8f0:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 801c8f2:	68fb      	ldr	r3, [r7, #12]
 801c8f4:	2201      	movs	r2, #1
 801c8f6:	70da      	strb	r2, [r3, #3]
			break;
 801c8f8:	e057      	b.n	801c9aa <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 801c8fa:	68fb      	ldr	r3, [r7, #12]
 801c8fc:	6a1a      	ldr	r2, [r3, #32]
 801c8fe:	68bb      	ldr	r3, [r7, #8]
 801c900:	0a1b      	lsrs	r3, r3, #8
 801c902:	4413      	add	r3, r2
 801c904:	4619      	mov	r1, r3
 801c906:	68f8      	ldr	r0, [r7, #12]
 801c908:	f7ff fe08 	bl	801c51c <move_window>
 801c90c:	4603      	mov	r3, r0
 801c90e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801c910:	7ffb      	ldrb	r3, [r7, #31]
 801c912:	2b00      	cmp	r3, #0
 801c914:	d146      	bne.n	801c9a4 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 801c916:	68fb      	ldr	r3, [r7, #12]
 801c918:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 801c91c:	68bb      	ldr	r3, [r7, #8]
 801c91e:	005b      	lsls	r3, r3, #1
 801c920:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 801c924:	4413      	add	r3, r2
 801c926:	687a      	ldr	r2, [r7, #4]
 801c928:	b292      	uxth	r2, r2
 801c92a:	4611      	mov	r1, r2
 801c92c:	4618      	mov	r0, r3
 801c92e:	f7ff fb80 	bl	801c032 <st_word>
			fs->wflag = 1;
 801c932:	68fb      	ldr	r3, [r7, #12]
 801c934:	2201      	movs	r2, #1
 801c936:	70da      	strb	r2, [r3, #3]
			break;
 801c938:	e037      	b.n	801c9aa <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 801c93a:	68fb      	ldr	r3, [r7, #12]
 801c93c:	6a1a      	ldr	r2, [r3, #32]
 801c93e:	68bb      	ldr	r3, [r7, #8]
 801c940:	09db      	lsrs	r3, r3, #7
 801c942:	4413      	add	r3, r2
 801c944:	4619      	mov	r1, r3
 801c946:	68f8      	ldr	r0, [r7, #12]
 801c948:	f7ff fde8 	bl	801c51c <move_window>
 801c94c:	4603      	mov	r3, r0
 801c94e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801c950:	7ffb      	ldrb	r3, [r7, #31]
 801c952:	2b00      	cmp	r3, #0
 801c954:	d128      	bne.n	801c9a8 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 801c956:	687b      	ldr	r3, [r7, #4]
 801c958:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 801c95c:	68fb      	ldr	r3, [r7, #12]
 801c95e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 801c962:	68bb      	ldr	r3, [r7, #8]
 801c964:	009b      	lsls	r3, r3, #2
 801c966:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 801c96a:	4413      	add	r3, r2
 801c96c:	4618      	mov	r0, r3
 801c96e:	f7ff fb3d 	bl	801bfec <ld_dword>
 801c972:	4603      	mov	r3, r0
 801c974:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 801c978:	4323      	orrs	r3, r4
 801c97a:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 801c97c:	68fb      	ldr	r3, [r7, #12]
 801c97e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 801c982:	68bb      	ldr	r3, [r7, #8]
 801c984:	009b      	lsls	r3, r3, #2
 801c986:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 801c98a:	4413      	add	r3, r2
 801c98c:	6879      	ldr	r1, [r7, #4]
 801c98e:	4618      	mov	r0, r3
 801c990:	f7ff fb6a 	bl	801c068 <st_dword>
			fs->wflag = 1;
 801c994:	68fb      	ldr	r3, [r7, #12]
 801c996:	2201      	movs	r2, #1
 801c998:	70da      	strb	r2, [r3, #3]
			break;
 801c99a:	e006      	b.n	801c9aa <put_fat+0x1ca>
			if (res != FR_OK) break;
 801c99c:	bf00      	nop
 801c99e:	e004      	b.n	801c9aa <put_fat+0x1ca>
			if (res != FR_OK) break;
 801c9a0:	bf00      	nop
 801c9a2:	e002      	b.n	801c9aa <put_fat+0x1ca>
			if (res != FR_OK) break;
 801c9a4:	bf00      	nop
 801c9a6:	e000      	b.n	801c9aa <put_fat+0x1ca>
			if (res != FR_OK) break;
 801c9a8:	bf00      	nop
		}
	}
	return res;
 801c9aa:	7ffb      	ldrb	r3, [r7, #31]
}
 801c9ac:	4618      	mov	r0, r3
 801c9ae:	3724      	adds	r7, #36	@ 0x24
 801c9b0:	46bd      	mov	sp, r7
 801c9b2:	bd90      	pop	{r4, r7, pc}

0801c9b4 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 801c9b4:	b580      	push	{r7, lr}
 801c9b6:	b088      	sub	sp, #32
 801c9b8:	af00      	add	r7, sp, #0
 801c9ba:	60f8      	str	r0, [r7, #12]
 801c9bc:	60b9      	str	r1, [r7, #8]
 801c9be:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 801c9c0:	2300      	movs	r3, #0
 801c9c2:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 801c9c4:	68fb      	ldr	r3, [r7, #12]
 801c9c6:	681b      	ldr	r3, [r3, #0]
 801c9c8:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 801c9ca:	68bb      	ldr	r3, [r7, #8]
 801c9cc:	2b01      	cmp	r3, #1
 801c9ce:	d904      	bls.n	801c9da <remove_chain+0x26>
 801c9d0:	69bb      	ldr	r3, [r7, #24]
 801c9d2:	695b      	ldr	r3, [r3, #20]
 801c9d4:	68ba      	ldr	r2, [r7, #8]
 801c9d6:	429a      	cmp	r2, r3
 801c9d8:	d301      	bcc.n	801c9de <remove_chain+0x2a>
 801c9da:	2302      	movs	r3, #2
 801c9dc:	e04b      	b.n	801ca76 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 801c9de:	687b      	ldr	r3, [r7, #4]
 801c9e0:	2b00      	cmp	r3, #0
 801c9e2:	d00c      	beq.n	801c9fe <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 801c9e4:	f04f 32ff 	mov.w	r2, #4294967295
 801c9e8:	6879      	ldr	r1, [r7, #4]
 801c9ea:	69b8      	ldr	r0, [r7, #24]
 801c9ec:	f7ff fef8 	bl	801c7e0 <put_fat>
 801c9f0:	4603      	mov	r3, r0
 801c9f2:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 801c9f4:	7ffb      	ldrb	r3, [r7, #31]
 801c9f6:	2b00      	cmp	r3, #0
 801c9f8:	d001      	beq.n	801c9fe <remove_chain+0x4a>
 801c9fa:	7ffb      	ldrb	r3, [r7, #31]
 801c9fc:	e03b      	b.n	801ca76 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 801c9fe:	68b9      	ldr	r1, [r7, #8]
 801ca00:	68f8      	ldr	r0, [r7, #12]
 801ca02:	f7ff fe46 	bl	801c692 <get_fat>
 801ca06:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 801ca08:	697b      	ldr	r3, [r7, #20]
 801ca0a:	2b00      	cmp	r3, #0
 801ca0c:	d031      	beq.n	801ca72 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 801ca0e:	697b      	ldr	r3, [r7, #20]
 801ca10:	2b01      	cmp	r3, #1
 801ca12:	d101      	bne.n	801ca18 <remove_chain+0x64>
 801ca14:	2302      	movs	r3, #2
 801ca16:	e02e      	b.n	801ca76 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 801ca18:	697b      	ldr	r3, [r7, #20]
 801ca1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801ca1e:	d101      	bne.n	801ca24 <remove_chain+0x70>
 801ca20:	2301      	movs	r3, #1
 801ca22:	e028      	b.n	801ca76 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 801ca24:	2200      	movs	r2, #0
 801ca26:	68b9      	ldr	r1, [r7, #8]
 801ca28:	69b8      	ldr	r0, [r7, #24]
 801ca2a:	f7ff fed9 	bl	801c7e0 <put_fat>
 801ca2e:	4603      	mov	r3, r0
 801ca30:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 801ca32:	7ffb      	ldrb	r3, [r7, #31]
 801ca34:	2b00      	cmp	r3, #0
 801ca36:	d001      	beq.n	801ca3c <remove_chain+0x88>
 801ca38:	7ffb      	ldrb	r3, [r7, #31]
 801ca3a:	e01c      	b.n	801ca76 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 801ca3c:	69bb      	ldr	r3, [r7, #24]
 801ca3e:	691a      	ldr	r2, [r3, #16]
 801ca40:	69bb      	ldr	r3, [r7, #24]
 801ca42:	695b      	ldr	r3, [r3, #20]
 801ca44:	3b02      	subs	r3, #2
 801ca46:	429a      	cmp	r2, r3
 801ca48:	d20b      	bcs.n	801ca62 <remove_chain+0xae>
			fs->free_clst++;
 801ca4a:	69bb      	ldr	r3, [r7, #24]
 801ca4c:	691b      	ldr	r3, [r3, #16]
 801ca4e:	1c5a      	adds	r2, r3, #1
 801ca50:	69bb      	ldr	r3, [r7, #24]
 801ca52:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 801ca54:	69bb      	ldr	r3, [r7, #24]
 801ca56:	791b      	ldrb	r3, [r3, #4]
 801ca58:	f043 0301 	orr.w	r3, r3, #1
 801ca5c:	b2da      	uxtb	r2, r3
 801ca5e:	69bb      	ldr	r3, [r7, #24]
 801ca60:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 801ca62:	697b      	ldr	r3, [r7, #20]
 801ca64:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 801ca66:	69bb      	ldr	r3, [r7, #24]
 801ca68:	695b      	ldr	r3, [r3, #20]
 801ca6a:	68ba      	ldr	r2, [r7, #8]
 801ca6c:	429a      	cmp	r2, r3
 801ca6e:	d3c6      	bcc.n	801c9fe <remove_chain+0x4a>
 801ca70:	e000      	b.n	801ca74 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 801ca72:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 801ca74:	2300      	movs	r3, #0
}
 801ca76:	4618      	mov	r0, r3
 801ca78:	3720      	adds	r7, #32
 801ca7a:	46bd      	mov	sp, r7
 801ca7c:	bd80      	pop	{r7, pc}

0801ca7e <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 801ca7e:	b580      	push	{r7, lr}
 801ca80:	b088      	sub	sp, #32
 801ca82:	af00      	add	r7, sp, #0
 801ca84:	6078      	str	r0, [r7, #4]
 801ca86:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 801ca88:	687b      	ldr	r3, [r7, #4]
 801ca8a:	681b      	ldr	r3, [r3, #0]
 801ca8c:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 801ca8e:	683b      	ldr	r3, [r7, #0]
 801ca90:	2b00      	cmp	r3, #0
 801ca92:	d10d      	bne.n	801cab0 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 801ca94:	693b      	ldr	r3, [r7, #16]
 801ca96:	68db      	ldr	r3, [r3, #12]
 801ca98:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 801ca9a:	69bb      	ldr	r3, [r7, #24]
 801ca9c:	2b00      	cmp	r3, #0
 801ca9e:	d004      	beq.n	801caaa <create_chain+0x2c>
 801caa0:	693b      	ldr	r3, [r7, #16]
 801caa2:	695b      	ldr	r3, [r3, #20]
 801caa4:	69ba      	ldr	r2, [r7, #24]
 801caa6:	429a      	cmp	r2, r3
 801caa8:	d31b      	bcc.n	801cae2 <create_chain+0x64>
 801caaa:	2301      	movs	r3, #1
 801caac:	61bb      	str	r3, [r7, #24]
 801caae:	e018      	b.n	801cae2 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 801cab0:	6839      	ldr	r1, [r7, #0]
 801cab2:	6878      	ldr	r0, [r7, #4]
 801cab4:	f7ff fded 	bl	801c692 <get_fat>
 801cab8:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 801caba:	68fb      	ldr	r3, [r7, #12]
 801cabc:	2b01      	cmp	r3, #1
 801cabe:	d801      	bhi.n	801cac4 <create_chain+0x46>
 801cac0:	2301      	movs	r3, #1
 801cac2:	e070      	b.n	801cba6 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 801cac4:	68fb      	ldr	r3, [r7, #12]
 801cac6:	f1b3 3fff 	cmp.w	r3, #4294967295
 801caca:	d101      	bne.n	801cad0 <create_chain+0x52>
 801cacc:	68fb      	ldr	r3, [r7, #12]
 801cace:	e06a      	b.n	801cba6 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 801cad0:	693b      	ldr	r3, [r7, #16]
 801cad2:	695b      	ldr	r3, [r3, #20]
 801cad4:	68fa      	ldr	r2, [r7, #12]
 801cad6:	429a      	cmp	r2, r3
 801cad8:	d201      	bcs.n	801cade <create_chain+0x60>
 801cada:	68fb      	ldr	r3, [r7, #12]
 801cadc:	e063      	b.n	801cba6 <create_chain+0x128>
		scl = clst;
 801cade:	683b      	ldr	r3, [r7, #0]
 801cae0:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 801cae2:	69bb      	ldr	r3, [r7, #24]
 801cae4:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 801cae6:	69fb      	ldr	r3, [r7, #28]
 801cae8:	3301      	adds	r3, #1
 801caea:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 801caec:	693b      	ldr	r3, [r7, #16]
 801caee:	695b      	ldr	r3, [r3, #20]
 801caf0:	69fa      	ldr	r2, [r7, #28]
 801caf2:	429a      	cmp	r2, r3
 801caf4:	d307      	bcc.n	801cb06 <create_chain+0x88>
				ncl = 2;
 801caf6:	2302      	movs	r3, #2
 801caf8:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 801cafa:	69fa      	ldr	r2, [r7, #28]
 801cafc:	69bb      	ldr	r3, [r7, #24]
 801cafe:	429a      	cmp	r2, r3
 801cb00:	d901      	bls.n	801cb06 <create_chain+0x88>
 801cb02:	2300      	movs	r3, #0
 801cb04:	e04f      	b.n	801cba6 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 801cb06:	69f9      	ldr	r1, [r7, #28]
 801cb08:	6878      	ldr	r0, [r7, #4]
 801cb0a:	f7ff fdc2 	bl	801c692 <get_fat>
 801cb0e:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 801cb10:	68fb      	ldr	r3, [r7, #12]
 801cb12:	2b00      	cmp	r3, #0
 801cb14:	d00e      	beq.n	801cb34 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 801cb16:	68fb      	ldr	r3, [r7, #12]
 801cb18:	2b01      	cmp	r3, #1
 801cb1a:	d003      	beq.n	801cb24 <create_chain+0xa6>
 801cb1c:	68fb      	ldr	r3, [r7, #12]
 801cb1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 801cb22:	d101      	bne.n	801cb28 <create_chain+0xaa>
 801cb24:	68fb      	ldr	r3, [r7, #12]
 801cb26:	e03e      	b.n	801cba6 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 801cb28:	69fa      	ldr	r2, [r7, #28]
 801cb2a:	69bb      	ldr	r3, [r7, #24]
 801cb2c:	429a      	cmp	r2, r3
 801cb2e:	d1da      	bne.n	801cae6 <create_chain+0x68>
 801cb30:	2300      	movs	r3, #0
 801cb32:	e038      	b.n	801cba6 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 801cb34:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 801cb36:	f04f 32ff 	mov.w	r2, #4294967295
 801cb3a:	69f9      	ldr	r1, [r7, #28]
 801cb3c:	6938      	ldr	r0, [r7, #16]
 801cb3e:	f7ff fe4f 	bl	801c7e0 <put_fat>
 801cb42:	4603      	mov	r3, r0
 801cb44:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 801cb46:	7dfb      	ldrb	r3, [r7, #23]
 801cb48:	2b00      	cmp	r3, #0
 801cb4a:	d109      	bne.n	801cb60 <create_chain+0xe2>
 801cb4c:	683b      	ldr	r3, [r7, #0]
 801cb4e:	2b00      	cmp	r3, #0
 801cb50:	d006      	beq.n	801cb60 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 801cb52:	69fa      	ldr	r2, [r7, #28]
 801cb54:	6839      	ldr	r1, [r7, #0]
 801cb56:	6938      	ldr	r0, [r7, #16]
 801cb58:	f7ff fe42 	bl	801c7e0 <put_fat>
 801cb5c:	4603      	mov	r3, r0
 801cb5e:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 801cb60:	7dfb      	ldrb	r3, [r7, #23]
 801cb62:	2b00      	cmp	r3, #0
 801cb64:	d116      	bne.n	801cb94 <create_chain+0x116>
		fs->last_clst = ncl;
 801cb66:	693b      	ldr	r3, [r7, #16]
 801cb68:	69fa      	ldr	r2, [r7, #28]
 801cb6a:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 801cb6c:	693b      	ldr	r3, [r7, #16]
 801cb6e:	691a      	ldr	r2, [r3, #16]
 801cb70:	693b      	ldr	r3, [r7, #16]
 801cb72:	695b      	ldr	r3, [r3, #20]
 801cb74:	3b02      	subs	r3, #2
 801cb76:	429a      	cmp	r2, r3
 801cb78:	d804      	bhi.n	801cb84 <create_chain+0x106>
 801cb7a:	693b      	ldr	r3, [r7, #16]
 801cb7c:	691b      	ldr	r3, [r3, #16]
 801cb7e:	1e5a      	subs	r2, r3, #1
 801cb80:	693b      	ldr	r3, [r7, #16]
 801cb82:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 801cb84:	693b      	ldr	r3, [r7, #16]
 801cb86:	791b      	ldrb	r3, [r3, #4]
 801cb88:	f043 0301 	orr.w	r3, r3, #1
 801cb8c:	b2da      	uxtb	r2, r3
 801cb8e:	693b      	ldr	r3, [r7, #16]
 801cb90:	711a      	strb	r2, [r3, #4]
 801cb92:	e007      	b.n	801cba4 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 801cb94:	7dfb      	ldrb	r3, [r7, #23]
 801cb96:	2b01      	cmp	r3, #1
 801cb98:	d102      	bne.n	801cba0 <create_chain+0x122>
 801cb9a:	f04f 33ff 	mov.w	r3, #4294967295
 801cb9e:	e000      	b.n	801cba2 <create_chain+0x124>
 801cba0:	2301      	movs	r3, #1
 801cba2:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 801cba4:	69fb      	ldr	r3, [r7, #28]
}
 801cba6:	4618      	mov	r0, r3
 801cba8:	3720      	adds	r7, #32
 801cbaa:	46bd      	mov	sp, r7
 801cbac:	bd80      	pop	{r7, pc}

0801cbae <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 801cbae:	b480      	push	{r7}
 801cbb0:	b087      	sub	sp, #28
 801cbb2:	af00      	add	r7, sp, #0
 801cbb4:	6078      	str	r0, [r7, #4]
 801cbb6:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 801cbb8:	687b      	ldr	r3, [r7, #4]
 801cbba:	681b      	ldr	r3, [r3, #0]
 801cbbc:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 801cbbe:	687b      	ldr	r3, [r7, #4]
 801cbc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801cbc2:	3304      	adds	r3, #4
 801cbc4:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 801cbc6:	683b      	ldr	r3, [r7, #0]
 801cbc8:	0a5b      	lsrs	r3, r3, #9
 801cbca:	68fa      	ldr	r2, [r7, #12]
 801cbcc:	8952      	ldrh	r2, [r2, #10]
 801cbce:	fbb3 f3f2 	udiv	r3, r3, r2
 801cbd2:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 801cbd4:	693b      	ldr	r3, [r7, #16]
 801cbd6:	1d1a      	adds	r2, r3, #4
 801cbd8:	613a      	str	r2, [r7, #16]
 801cbda:	681b      	ldr	r3, [r3, #0]
 801cbdc:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 801cbde:	68bb      	ldr	r3, [r7, #8]
 801cbe0:	2b00      	cmp	r3, #0
 801cbe2:	d101      	bne.n	801cbe8 <clmt_clust+0x3a>
 801cbe4:	2300      	movs	r3, #0
 801cbe6:	e010      	b.n	801cc0a <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 801cbe8:	697a      	ldr	r2, [r7, #20]
 801cbea:	68bb      	ldr	r3, [r7, #8]
 801cbec:	429a      	cmp	r2, r3
 801cbee:	d307      	bcc.n	801cc00 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 801cbf0:	697a      	ldr	r2, [r7, #20]
 801cbf2:	68bb      	ldr	r3, [r7, #8]
 801cbf4:	1ad3      	subs	r3, r2, r3
 801cbf6:	617b      	str	r3, [r7, #20]
 801cbf8:	693b      	ldr	r3, [r7, #16]
 801cbfa:	3304      	adds	r3, #4
 801cbfc:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 801cbfe:	e7e9      	b.n	801cbd4 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 801cc00:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 801cc02:	693b      	ldr	r3, [r7, #16]
 801cc04:	681a      	ldr	r2, [r3, #0]
 801cc06:	697b      	ldr	r3, [r7, #20]
 801cc08:	4413      	add	r3, r2
}
 801cc0a:	4618      	mov	r0, r3
 801cc0c:	371c      	adds	r7, #28
 801cc0e:	46bd      	mov	sp, r7
 801cc10:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cc14:	4770      	bx	lr

0801cc16 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 801cc16:	b580      	push	{r7, lr}
 801cc18:	b086      	sub	sp, #24
 801cc1a:	af00      	add	r7, sp, #0
 801cc1c:	6078      	str	r0, [r7, #4]
 801cc1e:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 801cc20:	687b      	ldr	r3, [r7, #4]
 801cc22:	681b      	ldr	r3, [r3, #0]
 801cc24:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 801cc26:	683b      	ldr	r3, [r7, #0]
 801cc28:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 801cc2c:	d204      	bcs.n	801cc38 <dir_sdi+0x22>
 801cc2e:	683b      	ldr	r3, [r7, #0]
 801cc30:	f003 031f 	and.w	r3, r3, #31
 801cc34:	2b00      	cmp	r3, #0
 801cc36:	d001      	beq.n	801cc3c <dir_sdi+0x26>
		return FR_INT_ERR;
 801cc38:	2302      	movs	r3, #2
 801cc3a:	e063      	b.n	801cd04 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 801cc3c:	687b      	ldr	r3, [r7, #4]
 801cc3e:	683a      	ldr	r2, [r7, #0]
 801cc40:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 801cc42:	687b      	ldr	r3, [r7, #4]
 801cc44:	689b      	ldr	r3, [r3, #8]
 801cc46:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 801cc48:	697b      	ldr	r3, [r7, #20]
 801cc4a:	2b00      	cmp	r3, #0
 801cc4c:	d106      	bne.n	801cc5c <dir_sdi+0x46>
 801cc4e:	693b      	ldr	r3, [r7, #16]
 801cc50:	781b      	ldrb	r3, [r3, #0]
 801cc52:	2b02      	cmp	r3, #2
 801cc54:	d902      	bls.n	801cc5c <dir_sdi+0x46>
		clst = fs->dirbase;
 801cc56:	693b      	ldr	r3, [r7, #16]
 801cc58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801cc5a:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 801cc5c:	697b      	ldr	r3, [r7, #20]
 801cc5e:	2b00      	cmp	r3, #0
 801cc60:	d10c      	bne.n	801cc7c <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 801cc62:	683b      	ldr	r3, [r7, #0]
 801cc64:	095b      	lsrs	r3, r3, #5
 801cc66:	693a      	ldr	r2, [r7, #16]
 801cc68:	8912      	ldrh	r2, [r2, #8]
 801cc6a:	4293      	cmp	r3, r2
 801cc6c:	d301      	bcc.n	801cc72 <dir_sdi+0x5c>
 801cc6e:	2302      	movs	r3, #2
 801cc70:	e048      	b.n	801cd04 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 801cc72:	693b      	ldr	r3, [r7, #16]
 801cc74:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801cc76:	687b      	ldr	r3, [r7, #4]
 801cc78:	61da      	str	r2, [r3, #28]
 801cc7a:	e029      	b.n	801ccd0 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 801cc7c:	693b      	ldr	r3, [r7, #16]
 801cc7e:	895b      	ldrh	r3, [r3, #10]
 801cc80:	025b      	lsls	r3, r3, #9
 801cc82:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 801cc84:	e019      	b.n	801ccba <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 801cc86:	687b      	ldr	r3, [r7, #4]
 801cc88:	6979      	ldr	r1, [r7, #20]
 801cc8a:	4618      	mov	r0, r3
 801cc8c:	f7ff fd01 	bl	801c692 <get_fat>
 801cc90:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 801cc92:	697b      	ldr	r3, [r7, #20]
 801cc94:	f1b3 3fff 	cmp.w	r3, #4294967295
 801cc98:	d101      	bne.n	801cc9e <dir_sdi+0x88>
 801cc9a:	2301      	movs	r3, #1
 801cc9c:	e032      	b.n	801cd04 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 801cc9e:	697b      	ldr	r3, [r7, #20]
 801cca0:	2b01      	cmp	r3, #1
 801cca2:	d904      	bls.n	801ccae <dir_sdi+0x98>
 801cca4:	693b      	ldr	r3, [r7, #16]
 801cca6:	695b      	ldr	r3, [r3, #20]
 801cca8:	697a      	ldr	r2, [r7, #20]
 801ccaa:	429a      	cmp	r2, r3
 801ccac:	d301      	bcc.n	801ccb2 <dir_sdi+0x9c>
 801ccae:	2302      	movs	r3, #2
 801ccb0:	e028      	b.n	801cd04 <dir_sdi+0xee>
			ofs -= csz;
 801ccb2:	683a      	ldr	r2, [r7, #0]
 801ccb4:	68fb      	ldr	r3, [r7, #12]
 801ccb6:	1ad3      	subs	r3, r2, r3
 801ccb8:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 801ccba:	683a      	ldr	r2, [r7, #0]
 801ccbc:	68fb      	ldr	r3, [r7, #12]
 801ccbe:	429a      	cmp	r2, r3
 801ccc0:	d2e1      	bcs.n	801cc86 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 801ccc2:	6979      	ldr	r1, [r7, #20]
 801ccc4:	6938      	ldr	r0, [r7, #16]
 801ccc6:	f7ff fcc5 	bl	801c654 <clust2sect>
 801ccca:	4602      	mov	r2, r0
 801cccc:	687b      	ldr	r3, [r7, #4]
 801ccce:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 801ccd0:	687b      	ldr	r3, [r7, #4]
 801ccd2:	697a      	ldr	r2, [r7, #20]
 801ccd4:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 801ccd6:	687b      	ldr	r3, [r7, #4]
 801ccd8:	69db      	ldr	r3, [r3, #28]
 801ccda:	2b00      	cmp	r3, #0
 801ccdc:	d101      	bne.n	801cce2 <dir_sdi+0xcc>
 801ccde:	2302      	movs	r3, #2
 801cce0:	e010      	b.n	801cd04 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 801cce2:	687b      	ldr	r3, [r7, #4]
 801cce4:	69da      	ldr	r2, [r3, #28]
 801cce6:	683b      	ldr	r3, [r7, #0]
 801cce8:	0a5b      	lsrs	r3, r3, #9
 801ccea:	441a      	add	r2, r3
 801ccec:	687b      	ldr	r3, [r7, #4]
 801ccee:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 801ccf0:	693b      	ldr	r3, [r7, #16]
 801ccf2:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 801ccf6:	683b      	ldr	r3, [r7, #0]
 801ccf8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801ccfc:	441a      	add	r2, r3
 801ccfe:	687b      	ldr	r3, [r7, #4]
 801cd00:	621a      	str	r2, [r3, #32]

	return FR_OK;
 801cd02:	2300      	movs	r3, #0
}
 801cd04:	4618      	mov	r0, r3
 801cd06:	3718      	adds	r7, #24
 801cd08:	46bd      	mov	sp, r7
 801cd0a:	bd80      	pop	{r7, pc}

0801cd0c <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 801cd0c:	b580      	push	{r7, lr}
 801cd0e:	b086      	sub	sp, #24
 801cd10:	af00      	add	r7, sp, #0
 801cd12:	6078      	str	r0, [r7, #4]
 801cd14:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 801cd16:	687b      	ldr	r3, [r7, #4]
 801cd18:	681b      	ldr	r3, [r3, #0]
 801cd1a:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 801cd1c:	687b      	ldr	r3, [r7, #4]
 801cd1e:	695b      	ldr	r3, [r3, #20]
 801cd20:	3320      	adds	r3, #32
 801cd22:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 801cd24:	687b      	ldr	r3, [r7, #4]
 801cd26:	69db      	ldr	r3, [r3, #28]
 801cd28:	2b00      	cmp	r3, #0
 801cd2a:	d003      	beq.n	801cd34 <dir_next+0x28>
 801cd2c:	68bb      	ldr	r3, [r7, #8]
 801cd2e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 801cd32:	d301      	bcc.n	801cd38 <dir_next+0x2c>
 801cd34:	2304      	movs	r3, #4
 801cd36:	e0aa      	b.n	801ce8e <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 801cd38:	68bb      	ldr	r3, [r7, #8]
 801cd3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801cd3e:	2b00      	cmp	r3, #0
 801cd40:	f040 8098 	bne.w	801ce74 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 801cd44:	687b      	ldr	r3, [r7, #4]
 801cd46:	69db      	ldr	r3, [r3, #28]
 801cd48:	1c5a      	adds	r2, r3, #1
 801cd4a:	687b      	ldr	r3, [r7, #4]
 801cd4c:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 801cd4e:	687b      	ldr	r3, [r7, #4]
 801cd50:	699b      	ldr	r3, [r3, #24]
 801cd52:	2b00      	cmp	r3, #0
 801cd54:	d10b      	bne.n	801cd6e <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 801cd56:	68bb      	ldr	r3, [r7, #8]
 801cd58:	095b      	lsrs	r3, r3, #5
 801cd5a:	68fa      	ldr	r2, [r7, #12]
 801cd5c:	8912      	ldrh	r2, [r2, #8]
 801cd5e:	4293      	cmp	r3, r2
 801cd60:	f0c0 8088 	bcc.w	801ce74 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 801cd64:	687b      	ldr	r3, [r7, #4]
 801cd66:	2200      	movs	r2, #0
 801cd68:	61da      	str	r2, [r3, #28]
 801cd6a:	2304      	movs	r3, #4
 801cd6c:	e08f      	b.n	801ce8e <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 801cd6e:	68bb      	ldr	r3, [r7, #8]
 801cd70:	0a5b      	lsrs	r3, r3, #9
 801cd72:	68fa      	ldr	r2, [r7, #12]
 801cd74:	8952      	ldrh	r2, [r2, #10]
 801cd76:	3a01      	subs	r2, #1
 801cd78:	4013      	ands	r3, r2
 801cd7a:	2b00      	cmp	r3, #0
 801cd7c:	d17a      	bne.n	801ce74 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 801cd7e:	687a      	ldr	r2, [r7, #4]
 801cd80:	687b      	ldr	r3, [r7, #4]
 801cd82:	699b      	ldr	r3, [r3, #24]
 801cd84:	4619      	mov	r1, r3
 801cd86:	4610      	mov	r0, r2
 801cd88:	f7ff fc83 	bl	801c692 <get_fat>
 801cd8c:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 801cd8e:	697b      	ldr	r3, [r7, #20]
 801cd90:	2b01      	cmp	r3, #1
 801cd92:	d801      	bhi.n	801cd98 <dir_next+0x8c>
 801cd94:	2302      	movs	r3, #2
 801cd96:	e07a      	b.n	801ce8e <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 801cd98:	697b      	ldr	r3, [r7, #20]
 801cd9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801cd9e:	d101      	bne.n	801cda4 <dir_next+0x98>
 801cda0:	2301      	movs	r3, #1
 801cda2:	e074      	b.n	801ce8e <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 801cda4:	68fb      	ldr	r3, [r7, #12]
 801cda6:	695b      	ldr	r3, [r3, #20]
 801cda8:	697a      	ldr	r2, [r7, #20]
 801cdaa:	429a      	cmp	r2, r3
 801cdac:	d358      	bcc.n	801ce60 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 801cdae:	683b      	ldr	r3, [r7, #0]
 801cdb0:	2b00      	cmp	r3, #0
 801cdb2:	d104      	bne.n	801cdbe <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 801cdb4:	687b      	ldr	r3, [r7, #4]
 801cdb6:	2200      	movs	r2, #0
 801cdb8:	61da      	str	r2, [r3, #28]
 801cdba:	2304      	movs	r3, #4
 801cdbc:	e067      	b.n	801ce8e <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 801cdbe:	687a      	ldr	r2, [r7, #4]
 801cdc0:	687b      	ldr	r3, [r7, #4]
 801cdc2:	699b      	ldr	r3, [r3, #24]
 801cdc4:	4619      	mov	r1, r3
 801cdc6:	4610      	mov	r0, r2
 801cdc8:	f7ff fe59 	bl	801ca7e <create_chain>
 801cdcc:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 801cdce:	697b      	ldr	r3, [r7, #20]
 801cdd0:	2b00      	cmp	r3, #0
 801cdd2:	d101      	bne.n	801cdd8 <dir_next+0xcc>
 801cdd4:	2307      	movs	r3, #7
 801cdd6:	e05a      	b.n	801ce8e <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 801cdd8:	697b      	ldr	r3, [r7, #20]
 801cdda:	2b01      	cmp	r3, #1
 801cddc:	d101      	bne.n	801cde2 <dir_next+0xd6>
 801cdde:	2302      	movs	r3, #2
 801cde0:	e055      	b.n	801ce8e <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 801cde2:	697b      	ldr	r3, [r7, #20]
 801cde4:	f1b3 3fff 	cmp.w	r3, #4294967295
 801cde8:	d101      	bne.n	801cdee <dir_next+0xe2>
 801cdea:	2301      	movs	r3, #1
 801cdec:	e04f      	b.n	801ce8e <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 801cdee:	68f8      	ldr	r0, [r7, #12]
 801cdf0:	f7ff fb50 	bl	801c494 <sync_window>
 801cdf4:	4603      	mov	r3, r0
 801cdf6:	2b00      	cmp	r3, #0
 801cdf8:	d001      	beq.n	801cdfe <dir_next+0xf2>
 801cdfa:	2301      	movs	r3, #1
 801cdfc:	e047      	b.n	801ce8e <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 801cdfe:	68fb      	ldr	r3, [r7, #12]
 801ce00:	3330      	adds	r3, #48	@ 0x30
 801ce02:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801ce06:	2100      	movs	r1, #0
 801ce08:	4618      	mov	r0, r3
 801ce0a:	f7ff f97a 	bl	801c102 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 801ce0e:	2300      	movs	r3, #0
 801ce10:	613b      	str	r3, [r7, #16]
 801ce12:	6979      	ldr	r1, [r7, #20]
 801ce14:	68f8      	ldr	r0, [r7, #12]
 801ce16:	f7ff fc1d 	bl	801c654 <clust2sect>
 801ce1a:	4602      	mov	r2, r0
 801ce1c:	68fb      	ldr	r3, [r7, #12]
 801ce1e:	62da      	str	r2, [r3, #44]	@ 0x2c
 801ce20:	e012      	b.n	801ce48 <dir_next+0x13c>
						fs->wflag = 1;
 801ce22:	68fb      	ldr	r3, [r7, #12]
 801ce24:	2201      	movs	r2, #1
 801ce26:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 801ce28:	68f8      	ldr	r0, [r7, #12]
 801ce2a:	f7ff fb33 	bl	801c494 <sync_window>
 801ce2e:	4603      	mov	r3, r0
 801ce30:	2b00      	cmp	r3, #0
 801ce32:	d001      	beq.n	801ce38 <dir_next+0x12c>
 801ce34:	2301      	movs	r3, #1
 801ce36:	e02a      	b.n	801ce8e <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 801ce38:	693b      	ldr	r3, [r7, #16]
 801ce3a:	3301      	adds	r3, #1
 801ce3c:	613b      	str	r3, [r7, #16]
 801ce3e:	68fb      	ldr	r3, [r7, #12]
 801ce40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801ce42:	1c5a      	adds	r2, r3, #1
 801ce44:	68fb      	ldr	r3, [r7, #12]
 801ce46:	62da      	str	r2, [r3, #44]	@ 0x2c
 801ce48:	68fb      	ldr	r3, [r7, #12]
 801ce4a:	895b      	ldrh	r3, [r3, #10]
 801ce4c:	461a      	mov	r2, r3
 801ce4e:	693b      	ldr	r3, [r7, #16]
 801ce50:	4293      	cmp	r3, r2
 801ce52:	d3e6      	bcc.n	801ce22 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 801ce54:	68fb      	ldr	r3, [r7, #12]
 801ce56:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801ce58:	693b      	ldr	r3, [r7, #16]
 801ce5a:	1ad2      	subs	r2, r2, r3
 801ce5c:	68fb      	ldr	r3, [r7, #12]
 801ce5e:	62da      	str	r2, [r3, #44]	@ 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 801ce60:	687b      	ldr	r3, [r7, #4]
 801ce62:	697a      	ldr	r2, [r7, #20]
 801ce64:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 801ce66:	6979      	ldr	r1, [r7, #20]
 801ce68:	68f8      	ldr	r0, [r7, #12]
 801ce6a:	f7ff fbf3 	bl	801c654 <clust2sect>
 801ce6e:	4602      	mov	r2, r0
 801ce70:	687b      	ldr	r3, [r7, #4]
 801ce72:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 801ce74:	687b      	ldr	r3, [r7, #4]
 801ce76:	68ba      	ldr	r2, [r7, #8]
 801ce78:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 801ce7a:	68fb      	ldr	r3, [r7, #12]
 801ce7c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 801ce80:	68bb      	ldr	r3, [r7, #8]
 801ce82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801ce86:	441a      	add	r2, r3
 801ce88:	687b      	ldr	r3, [r7, #4]
 801ce8a:	621a      	str	r2, [r3, #32]

	return FR_OK;
 801ce8c:	2300      	movs	r3, #0
}
 801ce8e:	4618      	mov	r0, r3
 801ce90:	3718      	adds	r7, #24
 801ce92:	46bd      	mov	sp, r7
 801ce94:	bd80      	pop	{r7, pc}

0801ce96 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 801ce96:	b580      	push	{r7, lr}
 801ce98:	b086      	sub	sp, #24
 801ce9a:	af00      	add	r7, sp, #0
 801ce9c:	6078      	str	r0, [r7, #4]
 801ce9e:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 801cea0:	687b      	ldr	r3, [r7, #4]
 801cea2:	681b      	ldr	r3, [r3, #0]
 801cea4:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 801cea6:	2100      	movs	r1, #0
 801cea8:	6878      	ldr	r0, [r7, #4]
 801ceaa:	f7ff feb4 	bl	801cc16 <dir_sdi>
 801ceae:	4603      	mov	r3, r0
 801ceb0:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 801ceb2:	7dfb      	ldrb	r3, [r7, #23]
 801ceb4:	2b00      	cmp	r3, #0
 801ceb6:	d12b      	bne.n	801cf10 <dir_alloc+0x7a>
		n = 0;
 801ceb8:	2300      	movs	r3, #0
 801ceba:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 801cebc:	687b      	ldr	r3, [r7, #4]
 801cebe:	69db      	ldr	r3, [r3, #28]
 801cec0:	4619      	mov	r1, r3
 801cec2:	68f8      	ldr	r0, [r7, #12]
 801cec4:	f7ff fb2a 	bl	801c51c <move_window>
 801cec8:	4603      	mov	r3, r0
 801ceca:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 801cecc:	7dfb      	ldrb	r3, [r7, #23]
 801cece:	2b00      	cmp	r3, #0
 801ced0:	d11d      	bne.n	801cf0e <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 801ced2:	687b      	ldr	r3, [r7, #4]
 801ced4:	6a1b      	ldr	r3, [r3, #32]
 801ced6:	781b      	ldrb	r3, [r3, #0]
 801ced8:	2be5      	cmp	r3, #229	@ 0xe5
 801ceda:	d004      	beq.n	801cee6 <dir_alloc+0x50>
 801cedc:	687b      	ldr	r3, [r7, #4]
 801cede:	6a1b      	ldr	r3, [r3, #32]
 801cee0:	781b      	ldrb	r3, [r3, #0]
 801cee2:	2b00      	cmp	r3, #0
 801cee4:	d107      	bne.n	801cef6 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 801cee6:	693b      	ldr	r3, [r7, #16]
 801cee8:	3301      	adds	r3, #1
 801ceea:	613b      	str	r3, [r7, #16]
 801ceec:	693a      	ldr	r2, [r7, #16]
 801ceee:	683b      	ldr	r3, [r7, #0]
 801cef0:	429a      	cmp	r2, r3
 801cef2:	d102      	bne.n	801cefa <dir_alloc+0x64>
 801cef4:	e00c      	b.n	801cf10 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 801cef6:	2300      	movs	r3, #0
 801cef8:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 801cefa:	2101      	movs	r1, #1
 801cefc:	6878      	ldr	r0, [r7, #4]
 801cefe:	f7ff ff05 	bl	801cd0c <dir_next>
 801cf02:	4603      	mov	r3, r0
 801cf04:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 801cf06:	7dfb      	ldrb	r3, [r7, #23]
 801cf08:	2b00      	cmp	r3, #0
 801cf0a:	d0d7      	beq.n	801cebc <dir_alloc+0x26>
 801cf0c:	e000      	b.n	801cf10 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 801cf0e:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 801cf10:	7dfb      	ldrb	r3, [r7, #23]
 801cf12:	2b04      	cmp	r3, #4
 801cf14:	d101      	bne.n	801cf1a <dir_alloc+0x84>
 801cf16:	2307      	movs	r3, #7
 801cf18:	75fb      	strb	r3, [r7, #23]
	return res;
 801cf1a:	7dfb      	ldrb	r3, [r7, #23]
}
 801cf1c:	4618      	mov	r0, r3
 801cf1e:	3718      	adds	r7, #24
 801cf20:	46bd      	mov	sp, r7
 801cf22:	bd80      	pop	{r7, pc}

0801cf24 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 801cf24:	b580      	push	{r7, lr}
 801cf26:	b084      	sub	sp, #16
 801cf28:	af00      	add	r7, sp, #0
 801cf2a:	6078      	str	r0, [r7, #4]
 801cf2c:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 801cf2e:	683b      	ldr	r3, [r7, #0]
 801cf30:	331a      	adds	r3, #26
 801cf32:	4618      	mov	r0, r3
 801cf34:	f7ff f842 	bl	801bfbc <ld_word>
 801cf38:	4603      	mov	r3, r0
 801cf3a:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 801cf3c:	687b      	ldr	r3, [r7, #4]
 801cf3e:	781b      	ldrb	r3, [r3, #0]
 801cf40:	2b03      	cmp	r3, #3
 801cf42:	d109      	bne.n	801cf58 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 801cf44:	683b      	ldr	r3, [r7, #0]
 801cf46:	3314      	adds	r3, #20
 801cf48:	4618      	mov	r0, r3
 801cf4a:	f7ff f837 	bl	801bfbc <ld_word>
 801cf4e:	4603      	mov	r3, r0
 801cf50:	041b      	lsls	r3, r3, #16
 801cf52:	68fa      	ldr	r2, [r7, #12]
 801cf54:	4313      	orrs	r3, r2
 801cf56:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 801cf58:	68fb      	ldr	r3, [r7, #12]
}
 801cf5a:	4618      	mov	r0, r3
 801cf5c:	3710      	adds	r7, #16
 801cf5e:	46bd      	mov	sp, r7
 801cf60:	bd80      	pop	{r7, pc}

0801cf62 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 801cf62:	b580      	push	{r7, lr}
 801cf64:	b084      	sub	sp, #16
 801cf66:	af00      	add	r7, sp, #0
 801cf68:	60f8      	str	r0, [r7, #12]
 801cf6a:	60b9      	str	r1, [r7, #8]
 801cf6c:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 801cf6e:	68bb      	ldr	r3, [r7, #8]
 801cf70:	331a      	adds	r3, #26
 801cf72:	687a      	ldr	r2, [r7, #4]
 801cf74:	b292      	uxth	r2, r2
 801cf76:	4611      	mov	r1, r2
 801cf78:	4618      	mov	r0, r3
 801cf7a:	f7ff f85a 	bl	801c032 <st_word>
	if (fs->fs_type == FS_FAT32) {
 801cf7e:	68fb      	ldr	r3, [r7, #12]
 801cf80:	781b      	ldrb	r3, [r3, #0]
 801cf82:	2b03      	cmp	r3, #3
 801cf84:	d109      	bne.n	801cf9a <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 801cf86:	68bb      	ldr	r3, [r7, #8]
 801cf88:	f103 0214 	add.w	r2, r3, #20
 801cf8c:	687b      	ldr	r3, [r7, #4]
 801cf8e:	0c1b      	lsrs	r3, r3, #16
 801cf90:	b29b      	uxth	r3, r3
 801cf92:	4619      	mov	r1, r3
 801cf94:	4610      	mov	r0, r2
 801cf96:	f7ff f84c 	bl	801c032 <st_word>
	}
}
 801cf9a:	bf00      	nop
 801cf9c:	3710      	adds	r7, #16
 801cf9e:	46bd      	mov	sp, r7
 801cfa0:	bd80      	pop	{r7, pc}

0801cfa2 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 801cfa2:	b580      	push	{r7, lr}
 801cfa4:	b086      	sub	sp, #24
 801cfa6:	af00      	add	r7, sp, #0
 801cfa8:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 801cfaa:	687b      	ldr	r3, [r7, #4]
 801cfac:	681b      	ldr	r3, [r3, #0]
 801cfae:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 801cfb0:	2100      	movs	r1, #0
 801cfb2:	6878      	ldr	r0, [r7, #4]
 801cfb4:	f7ff fe2f 	bl	801cc16 <dir_sdi>
 801cfb8:	4603      	mov	r3, r0
 801cfba:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 801cfbc:	7dfb      	ldrb	r3, [r7, #23]
 801cfbe:	2b00      	cmp	r3, #0
 801cfc0:	d001      	beq.n	801cfc6 <dir_find+0x24>
 801cfc2:	7dfb      	ldrb	r3, [r7, #23]
 801cfc4:	e03e      	b.n	801d044 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 801cfc6:	687b      	ldr	r3, [r7, #4]
 801cfc8:	69db      	ldr	r3, [r3, #28]
 801cfca:	4619      	mov	r1, r3
 801cfcc:	6938      	ldr	r0, [r7, #16]
 801cfce:	f7ff faa5 	bl	801c51c <move_window>
 801cfd2:	4603      	mov	r3, r0
 801cfd4:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 801cfd6:	7dfb      	ldrb	r3, [r7, #23]
 801cfd8:	2b00      	cmp	r3, #0
 801cfda:	d12f      	bne.n	801d03c <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 801cfdc:	687b      	ldr	r3, [r7, #4]
 801cfde:	6a1b      	ldr	r3, [r3, #32]
 801cfe0:	781b      	ldrb	r3, [r3, #0]
 801cfe2:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 801cfe4:	7bfb      	ldrb	r3, [r7, #15]
 801cfe6:	2b00      	cmp	r3, #0
 801cfe8:	d102      	bne.n	801cff0 <dir_find+0x4e>
 801cfea:	2304      	movs	r3, #4
 801cfec:	75fb      	strb	r3, [r7, #23]
 801cfee:	e028      	b.n	801d042 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 801cff0:	687b      	ldr	r3, [r7, #4]
 801cff2:	6a1b      	ldr	r3, [r3, #32]
 801cff4:	330b      	adds	r3, #11
 801cff6:	781b      	ldrb	r3, [r3, #0]
 801cff8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801cffc:	b2da      	uxtb	r2, r3
 801cffe:	687b      	ldr	r3, [r7, #4]
 801d000:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 801d002:	687b      	ldr	r3, [r7, #4]
 801d004:	6a1b      	ldr	r3, [r3, #32]
 801d006:	330b      	adds	r3, #11
 801d008:	781b      	ldrb	r3, [r3, #0]
 801d00a:	f003 0308 	and.w	r3, r3, #8
 801d00e:	2b00      	cmp	r3, #0
 801d010:	d10a      	bne.n	801d028 <dir_find+0x86>
 801d012:	687b      	ldr	r3, [r7, #4]
 801d014:	6a18      	ldr	r0, [r3, #32]
 801d016:	687b      	ldr	r3, [r7, #4]
 801d018:	3324      	adds	r3, #36	@ 0x24
 801d01a:	220b      	movs	r2, #11
 801d01c:	4619      	mov	r1, r3
 801d01e:	f7ff f88b 	bl	801c138 <mem_cmp>
 801d022:	4603      	mov	r3, r0
 801d024:	2b00      	cmp	r3, #0
 801d026:	d00b      	beq.n	801d040 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 801d028:	2100      	movs	r1, #0
 801d02a:	6878      	ldr	r0, [r7, #4]
 801d02c:	f7ff fe6e 	bl	801cd0c <dir_next>
 801d030:	4603      	mov	r3, r0
 801d032:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 801d034:	7dfb      	ldrb	r3, [r7, #23]
 801d036:	2b00      	cmp	r3, #0
 801d038:	d0c5      	beq.n	801cfc6 <dir_find+0x24>
 801d03a:	e002      	b.n	801d042 <dir_find+0xa0>
		if (res != FR_OK) break;
 801d03c:	bf00      	nop
 801d03e:	e000      	b.n	801d042 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 801d040:	bf00      	nop

	return res;
 801d042:	7dfb      	ldrb	r3, [r7, #23]
}
 801d044:	4618      	mov	r0, r3
 801d046:	3718      	adds	r7, #24
 801d048:	46bd      	mov	sp, r7
 801d04a:	bd80      	pop	{r7, pc}

0801d04c <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 801d04c:	b580      	push	{r7, lr}
 801d04e:	b084      	sub	sp, #16
 801d050:	af00      	add	r7, sp, #0
 801d052:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 801d054:	687b      	ldr	r3, [r7, #4]
 801d056:	681b      	ldr	r3, [r3, #0]
 801d058:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 801d05a:	2101      	movs	r1, #1
 801d05c:	6878      	ldr	r0, [r7, #4]
 801d05e:	f7ff ff1a 	bl	801ce96 <dir_alloc>
 801d062:	4603      	mov	r3, r0
 801d064:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 801d066:	7bfb      	ldrb	r3, [r7, #15]
 801d068:	2b00      	cmp	r3, #0
 801d06a:	d11c      	bne.n	801d0a6 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 801d06c:	687b      	ldr	r3, [r7, #4]
 801d06e:	69db      	ldr	r3, [r3, #28]
 801d070:	4619      	mov	r1, r3
 801d072:	68b8      	ldr	r0, [r7, #8]
 801d074:	f7ff fa52 	bl	801c51c <move_window>
 801d078:	4603      	mov	r3, r0
 801d07a:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 801d07c:	7bfb      	ldrb	r3, [r7, #15]
 801d07e:	2b00      	cmp	r3, #0
 801d080:	d111      	bne.n	801d0a6 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 801d082:	687b      	ldr	r3, [r7, #4]
 801d084:	6a1b      	ldr	r3, [r3, #32]
 801d086:	2220      	movs	r2, #32
 801d088:	2100      	movs	r1, #0
 801d08a:	4618      	mov	r0, r3
 801d08c:	f7ff f839 	bl	801c102 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 801d090:	687b      	ldr	r3, [r7, #4]
 801d092:	6a18      	ldr	r0, [r3, #32]
 801d094:	687b      	ldr	r3, [r7, #4]
 801d096:	3324      	adds	r3, #36	@ 0x24
 801d098:	220b      	movs	r2, #11
 801d09a:	4619      	mov	r1, r3
 801d09c:	f7ff f810 	bl	801c0c0 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 801d0a0:	68bb      	ldr	r3, [r7, #8]
 801d0a2:	2201      	movs	r2, #1
 801d0a4:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 801d0a6:	7bfb      	ldrb	r3, [r7, #15]
}
 801d0a8:	4618      	mov	r0, r3
 801d0aa:	3710      	adds	r7, #16
 801d0ac:	46bd      	mov	sp, r7
 801d0ae:	bd80      	pop	{r7, pc}

0801d0b0 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 801d0b0:	b580      	push	{r7, lr}
 801d0b2:	b088      	sub	sp, #32
 801d0b4:	af00      	add	r7, sp, #0
 801d0b6:	6078      	str	r0, [r7, #4]
 801d0b8:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 801d0ba:	683b      	ldr	r3, [r7, #0]
 801d0bc:	681b      	ldr	r3, [r3, #0]
 801d0be:	60fb      	str	r3, [r7, #12]
 801d0c0:	687b      	ldr	r3, [r7, #4]
 801d0c2:	3324      	adds	r3, #36	@ 0x24
 801d0c4:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 801d0c6:	220b      	movs	r2, #11
 801d0c8:	2120      	movs	r1, #32
 801d0ca:	68b8      	ldr	r0, [r7, #8]
 801d0cc:	f7ff f819 	bl	801c102 <mem_set>
	si = i = 0; ni = 8;
 801d0d0:	2300      	movs	r3, #0
 801d0d2:	613b      	str	r3, [r7, #16]
 801d0d4:	693b      	ldr	r3, [r7, #16]
 801d0d6:	61fb      	str	r3, [r7, #28]
 801d0d8:	2308      	movs	r3, #8
 801d0da:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 801d0dc:	69fb      	ldr	r3, [r7, #28]
 801d0de:	1c5a      	adds	r2, r3, #1
 801d0e0:	61fa      	str	r2, [r7, #28]
 801d0e2:	68fa      	ldr	r2, [r7, #12]
 801d0e4:	4413      	add	r3, r2
 801d0e6:	781b      	ldrb	r3, [r3, #0]
 801d0e8:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 801d0ea:	7efb      	ldrb	r3, [r7, #27]
 801d0ec:	2b20      	cmp	r3, #32
 801d0ee:	d94e      	bls.n	801d18e <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 801d0f0:	7efb      	ldrb	r3, [r7, #27]
 801d0f2:	2b2f      	cmp	r3, #47	@ 0x2f
 801d0f4:	d006      	beq.n	801d104 <create_name+0x54>
 801d0f6:	7efb      	ldrb	r3, [r7, #27]
 801d0f8:	2b5c      	cmp	r3, #92	@ 0x5c
 801d0fa:	d110      	bne.n	801d11e <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 801d0fc:	e002      	b.n	801d104 <create_name+0x54>
 801d0fe:	69fb      	ldr	r3, [r7, #28]
 801d100:	3301      	adds	r3, #1
 801d102:	61fb      	str	r3, [r7, #28]
 801d104:	68fa      	ldr	r2, [r7, #12]
 801d106:	69fb      	ldr	r3, [r7, #28]
 801d108:	4413      	add	r3, r2
 801d10a:	781b      	ldrb	r3, [r3, #0]
 801d10c:	2b2f      	cmp	r3, #47	@ 0x2f
 801d10e:	d0f6      	beq.n	801d0fe <create_name+0x4e>
 801d110:	68fa      	ldr	r2, [r7, #12]
 801d112:	69fb      	ldr	r3, [r7, #28]
 801d114:	4413      	add	r3, r2
 801d116:	781b      	ldrb	r3, [r3, #0]
 801d118:	2b5c      	cmp	r3, #92	@ 0x5c
 801d11a:	d0f0      	beq.n	801d0fe <create_name+0x4e>
			break;
 801d11c:	e038      	b.n	801d190 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 801d11e:	7efb      	ldrb	r3, [r7, #27]
 801d120:	2b2e      	cmp	r3, #46	@ 0x2e
 801d122:	d003      	beq.n	801d12c <create_name+0x7c>
 801d124:	693a      	ldr	r2, [r7, #16]
 801d126:	697b      	ldr	r3, [r7, #20]
 801d128:	429a      	cmp	r2, r3
 801d12a:	d30c      	bcc.n	801d146 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 801d12c:	697b      	ldr	r3, [r7, #20]
 801d12e:	2b0b      	cmp	r3, #11
 801d130:	d002      	beq.n	801d138 <create_name+0x88>
 801d132:	7efb      	ldrb	r3, [r7, #27]
 801d134:	2b2e      	cmp	r3, #46	@ 0x2e
 801d136:	d001      	beq.n	801d13c <create_name+0x8c>
 801d138:	2306      	movs	r3, #6
 801d13a:	e044      	b.n	801d1c6 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 801d13c:	2308      	movs	r3, #8
 801d13e:	613b      	str	r3, [r7, #16]
 801d140:	230b      	movs	r3, #11
 801d142:	617b      	str	r3, [r7, #20]
			continue;
 801d144:	e022      	b.n	801d18c <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 801d146:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801d14a:	2b00      	cmp	r3, #0
 801d14c:	da04      	bge.n	801d158 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 801d14e:	7efb      	ldrb	r3, [r7, #27]
 801d150:	3b80      	subs	r3, #128	@ 0x80
 801d152:	4a1f      	ldr	r2, [pc, #124]	@ (801d1d0 <create_name+0x120>)
 801d154:	5cd3      	ldrb	r3, [r2, r3]
 801d156:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 801d158:	7efb      	ldrb	r3, [r7, #27]
 801d15a:	4619      	mov	r1, r3
 801d15c:	481d      	ldr	r0, [pc, #116]	@ (801d1d4 <create_name+0x124>)
 801d15e:	f7ff f812 	bl	801c186 <chk_chr>
 801d162:	4603      	mov	r3, r0
 801d164:	2b00      	cmp	r3, #0
 801d166:	d001      	beq.n	801d16c <create_name+0xbc>
 801d168:	2306      	movs	r3, #6
 801d16a:	e02c      	b.n	801d1c6 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 801d16c:	7efb      	ldrb	r3, [r7, #27]
 801d16e:	2b60      	cmp	r3, #96	@ 0x60
 801d170:	d905      	bls.n	801d17e <create_name+0xce>
 801d172:	7efb      	ldrb	r3, [r7, #27]
 801d174:	2b7a      	cmp	r3, #122	@ 0x7a
 801d176:	d802      	bhi.n	801d17e <create_name+0xce>
 801d178:	7efb      	ldrb	r3, [r7, #27]
 801d17a:	3b20      	subs	r3, #32
 801d17c:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 801d17e:	693b      	ldr	r3, [r7, #16]
 801d180:	1c5a      	adds	r2, r3, #1
 801d182:	613a      	str	r2, [r7, #16]
 801d184:	68ba      	ldr	r2, [r7, #8]
 801d186:	4413      	add	r3, r2
 801d188:	7efa      	ldrb	r2, [r7, #27]
 801d18a:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 801d18c:	e7a6      	b.n	801d0dc <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 801d18e:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 801d190:	68fa      	ldr	r2, [r7, #12]
 801d192:	69fb      	ldr	r3, [r7, #28]
 801d194:	441a      	add	r2, r3
 801d196:	683b      	ldr	r3, [r7, #0]
 801d198:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 801d19a:	693b      	ldr	r3, [r7, #16]
 801d19c:	2b00      	cmp	r3, #0
 801d19e:	d101      	bne.n	801d1a4 <create_name+0xf4>
 801d1a0:	2306      	movs	r3, #6
 801d1a2:	e010      	b.n	801d1c6 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 801d1a4:	68bb      	ldr	r3, [r7, #8]
 801d1a6:	781b      	ldrb	r3, [r3, #0]
 801d1a8:	2be5      	cmp	r3, #229	@ 0xe5
 801d1aa:	d102      	bne.n	801d1b2 <create_name+0x102>
 801d1ac:	68bb      	ldr	r3, [r7, #8]
 801d1ae:	2205      	movs	r2, #5
 801d1b0:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 801d1b2:	7efb      	ldrb	r3, [r7, #27]
 801d1b4:	2b20      	cmp	r3, #32
 801d1b6:	d801      	bhi.n	801d1bc <create_name+0x10c>
 801d1b8:	2204      	movs	r2, #4
 801d1ba:	e000      	b.n	801d1be <create_name+0x10e>
 801d1bc:	2200      	movs	r2, #0
 801d1be:	68bb      	ldr	r3, [r7, #8]
 801d1c0:	330b      	adds	r3, #11
 801d1c2:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 801d1c4:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 801d1c6:	4618      	mov	r0, r3
 801d1c8:	3720      	adds	r7, #32
 801d1ca:	46bd      	mov	sp, r7
 801d1cc:	bd80      	pop	{r7, pc}
 801d1ce:	bf00      	nop
 801d1d0:	080206f0 	.word	0x080206f0
 801d1d4:	080203bc 	.word	0x080203bc

0801d1d8 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 801d1d8:	b580      	push	{r7, lr}
 801d1da:	b086      	sub	sp, #24
 801d1dc:	af00      	add	r7, sp, #0
 801d1de:	6078      	str	r0, [r7, #4]
 801d1e0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 801d1e2:	687b      	ldr	r3, [r7, #4]
 801d1e4:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 801d1e6:	693b      	ldr	r3, [r7, #16]
 801d1e8:	681b      	ldr	r3, [r3, #0]
 801d1ea:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 801d1ec:	e002      	b.n	801d1f4 <follow_path+0x1c>
 801d1ee:	683b      	ldr	r3, [r7, #0]
 801d1f0:	3301      	adds	r3, #1
 801d1f2:	603b      	str	r3, [r7, #0]
 801d1f4:	683b      	ldr	r3, [r7, #0]
 801d1f6:	781b      	ldrb	r3, [r3, #0]
 801d1f8:	2b2f      	cmp	r3, #47	@ 0x2f
 801d1fa:	d0f8      	beq.n	801d1ee <follow_path+0x16>
 801d1fc:	683b      	ldr	r3, [r7, #0]
 801d1fe:	781b      	ldrb	r3, [r3, #0]
 801d200:	2b5c      	cmp	r3, #92	@ 0x5c
 801d202:	d0f4      	beq.n	801d1ee <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 801d204:	693b      	ldr	r3, [r7, #16]
 801d206:	2200      	movs	r2, #0
 801d208:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 801d20a:	683b      	ldr	r3, [r7, #0]
 801d20c:	781b      	ldrb	r3, [r3, #0]
 801d20e:	2b1f      	cmp	r3, #31
 801d210:	d80a      	bhi.n	801d228 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 801d212:	687b      	ldr	r3, [r7, #4]
 801d214:	2280      	movs	r2, #128	@ 0x80
 801d216:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 801d21a:	2100      	movs	r1, #0
 801d21c:	6878      	ldr	r0, [r7, #4]
 801d21e:	f7ff fcfa 	bl	801cc16 <dir_sdi>
 801d222:	4603      	mov	r3, r0
 801d224:	75fb      	strb	r3, [r7, #23]
 801d226:	e043      	b.n	801d2b0 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 801d228:	463b      	mov	r3, r7
 801d22a:	4619      	mov	r1, r3
 801d22c:	6878      	ldr	r0, [r7, #4]
 801d22e:	f7ff ff3f 	bl	801d0b0 <create_name>
 801d232:	4603      	mov	r3, r0
 801d234:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 801d236:	7dfb      	ldrb	r3, [r7, #23]
 801d238:	2b00      	cmp	r3, #0
 801d23a:	d134      	bne.n	801d2a6 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 801d23c:	6878      	ldr	r0, [r7, #4]
 801d23e:	f7ff feb0 	bl	801cfa2 <dir_find>
 801d242:	4603      	mov	r3, r0
 801d244:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 801d246:	687b      	ldr	r3, [r7, #4]
 801d248:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 801d24c:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 801d24e:	7dfb      	ldrb	r3, [r7, #23]
 801d250:	2b00      	cmp	r3, #0
 801d252:	d00a      	beq.n	801d26a <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 801d254:	7dfb      	ldrb	r3, [r7, #23]
 801d256:	2b04      	cmp	r3, #4
 801d258:	d127      	bne.n	801d2aa <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 801d25a:	7afb      	ldrb	r3, [r7, #11]
 801d25c:	f003 0304 	and.w	r3, r3, #4
 801d260:	2b00      	cmp	r3, #0
 801d262:	d122      	bne.n	801d2aa <follow_path+0xd2>
 801d264:	2305      	movs	r3, #5
 801d266:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 801d268:	e01f      	b.n	801d2aa <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 801d26a:	7afb      	ldrb	r3, [r7, #11]
 801d26c:	f003 0304 	and.w	r3, r3, #4
 801d270:	2b00      	cmp	r3, #0
 801d272:	d11c      	bne.n	801d2ae <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 801d274:	693b      	ldr	r3, [r7, #16]
 801d276:	799b      	ldrb	r3, [r3, #6]
 801d278:	f003 0310 	and.w	r3, r3, #16
 801d27c:	2b00      	cmp	r3, #0
 801d27e:	d102      	bne.n	801d286 <follow_path+0xae>
				res = FR_NO_PATH; break;
 801d280:	2305      	movs	r3, #5
 801d282:	75fb      	strb	r3, [r7, #23]
 801d284:	e014      	b.n	801d2b0 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 801d286:	68fb      	ldr	r3, [r7, #12]
 801d288:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 801d28c:	687b      	ldr	r3, [r7, #4]
 801d28e:	695b      	ldr	r3, [r3, #20]
 801d290:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801d294:	4413      	add	r3, r2
 801d296:	4619      	mov	r1, r3
 801d298:	68f8      	ldr	r0, [r7, #12]
 801d29a:	f7ff fe43 	bl	801cf24 <ld_clust>
 801d29e:	4602      	mov	r2, r0
 801d2a0:	693b      	ldr	r3, [r7, #16]
 801d2a2:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 801d2a4:	e7c0      	b.n	801d228 <follow_path+0x50>
			if (res != FR_OK) break;
 801d2a6:	bf00      	nop
 801d2a8:	e002      	b.n	801d2b0 <follow_path+0xd8>
				break;
 801d2aa:	bf00      	nop
 801d2ac:	e000      	b.n	801d2b0 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 801d2ae:	bf00      	nop
			}
		}
	}

	return res;
 801d2b0:	7dfb      	ldrb	r3, [r7, #23]
}
 801d2b2:	4618      	mov	r0, r3
 801d2b4:	3718      	adds	r7, #24
 801d2b6:	46bd      	mov	sp, r7
 801d2b8:	bd80      	pop	{r7, pc}

0801d2ba <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 801d2ba:	b480      	push	{r7}
 801d2bc:	b087      	sub	sp, #28
 801d2be:	af00      	add	r7, sp, #0
 801d2c0:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 801d2c2:	f04f 33ff 	mov.w	r3, #4294967295
 801d2c6:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 801d2c8:	687b      	ldr	r3, [r7, #4]
 801d2ca:	681b      	ldr	r3, [r3, #0]
 801d2cc:	2b00      	cmp	r3, #0
 801d2ce:	d031      	beq.n	801d334 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 801d2d0:	687b      	ldr	r3, [r7, #4]
 801d2d2:	681b      	ldr	r3, [r3, #0]
 801d2d4:	617b      	str	r3, [r7, #20]
 801d2d6:	e002      	b.n	801d2de <get_ldnumber+0x24>
 801d2d8:	697b      	ldr	r3, [r7, #20]
 801d2da:	3301      	adds	r3, #1
 801d2dc:	617b      	str	r3, [r7, #20]
 801d2de:	697b      	ldr	r3, [r7, #20]
 801d2e0:	781b      	ldrb	r3, [r3, #0]
 801d2e2:	2b20      	cmp	r3, #32
 801d2e4:	d903      	bls.n	801d2ee <get_ldnumber+0x34>
 801d2e6:	697b      	ldr	r3, [r7, #20]
 801d2e8:	781b      	ldrb	r3, [r3, #0]
 801d2ea:	2b3a      	cmp	r3, #58	@ 0x3a
 801d2ec:	d1f4      	bne.n	801d2d8 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 801d2ee:	697b      	ldr	r3, [r7, #20]
 801d2f0:	781b      	ldrb	r3, [r3, #0]
 801d2f2:	2b3a      	cmp	r3, #58	@ 0x3a
 801d2f4:	d11c      	bne.n	801d330 <get_ldnumber+0x76>
			tp = *path;
 801d2f6:	687b      	ldr	r3, [r7, #4]
 801d2f8:	681b      	ldr	r3, [r3, #0]
 801d2fa:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 801d2fc:	68fb      	ldr	r3, [r7, #12]
 801d2fe:	1c5a      	adds	r2, r3, #1
 801d300:	60fa      	str	r2, [r7, #12]
 801d302:	781b      	ldrb	r3, [r3, #0]
 801d304:	3b30      	subs	r3, #48	@ 0x30
 801d306:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 801d308:	68bb      	ldr	r3, [r7, #8]
 801d30a:	2b09      	cmp	r3, #9
 801d30c:	d80e      	bhi.n	801d32c <get_ldnumber+0x72>
 801d30e:	68fa      	ldr	r2, [r7, #12]
 801d310:	697b      	ldr	r3, [r7, #20]
 801d312:	429a      	cmp	r2, r3
 801d314:	d10a      	bne.n	801d32c <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 801d316:	68bb      	ldr	r3, [r7, #8]
 801d318:	2b00      	cmp	r3, #0
 801d31a:	d107      	bne.n	801d32c <get_ldnumber+0x72>
					vol = (int)i;
 801d31c:	68bb      	ldr	r3, [r7, #8]
 801d31e:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 801d320:	697b      	ldr	r3, [r7, #20]
 801d322:	3301      	adds	r3, #1
 801d324:	617b      	str	r3, [r7, #20]
 801d326:	687b      	ldr	r3, [r7, #4]
 801d328:	697a      	ldr	r2, [r7, #20]
 801d32a:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 801d32c:	693b      	ldr	r3, [r7, #16]
 801d32e:	e002      	b.n	801d336 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 801d330:	2300      	movs	r3, #0
 801d332:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 801d334:	693b      	ldr	r3, [r7, #16]
}
 801d336:	4618      	mov	r0, r3
 801d338:	371c      	adds	r7, #28
 801d33a:	46bd      	mov	sp, r7
 801d33c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d340:	4770      	bx	lr
	...

0801d344 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 801d344:	b580      	push	{r7, lr}
 801d346:	b082      	sub	sp, #8
 801d348:	af00      	add	r7, sp, #0
 801d34a:	6078      	str	r0, [r7, #4]
 801d34c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 801d34e:	687b      	ldr	r3, [r7, #4]
 801d350:	2200      	movs	r2, #0
 801d352:	70da      	strb	r2, [r3, #3]
 801d354:	687b      	ldr	r3, [r7, #4]
 801d356:	f04f 32ff 	mov.w	r2, #4294967295
 801d35a:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 801d35c:	6839      	ldr	r1, [r7, #0]
 801d35e:	6878      	ldr	r0, [r7, #4]
 801d360:	f7ff f8dc 	bl	801c51c <move_window>
 801d364:	4603      	mov	r3, r0
 801d366:	2b00      	cmp	r3, #0
 801d368:	d001      	beq.n	801d36e <check_fs+0x2a>
 801d36a:	2304      	movs	r3, #4
 801d36c:	e038      	b.n	801d3e0 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 801d36e:	687b      	ldr	r3, [r7, #4]
 801d370:	3330      	adds	r3, #48	@ 0x30
 801d372:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 801d376:	4618      	mov	r0, r3
 801d378:	f7fe fe20 	bl	801bfbc <ld_word>
 801d37c:	4603      	mov	r3, r0
 801d37e:	461a      	mov	r2, r3
 801d380:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 801d384:	429a      	cmp	r2, r3
 801d386:	d001      	beq.n	801d38c <check_fs+0x48>
 801d388:	2303      	movs	r3, #3
 801d38a:	e029      	b.n	801d3e0 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 801d38c:	687b      	ldr	r3, [r7, #4]
 801d38e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801d392:	2be9      	cmp	r3, #233	@ 0xe9
 801d394:	d009      	beq.n	801d3aa <check_fs+0x66>
 801d396:	687b      	ldr	r3, [r7, #4]
 801d398:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801d39c:	2beb      	cmp	r3, #235	@ 0xeb
 801d39e:	d11e      	bne.n	801d3de <check_fs+0x9a>
 801d3a0:	687b      	ldr	r3, [r7, #4]
 801d3a2:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 801d3a6:	2b90      	cmp	r3, #144	@ 0x90
 801d3a8:	d119      	bne.n	801d3de <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 801d3aa:	687b      	ldr	r3, [r7, #4]
 801d3ac:	3330      	adds	r3, #48	@ 0x30
 801d3ae:	3336      	adds	r3, #54	@ 0x36
 801d3b0:	4618      	mov	r0, r3
 801d3b2:	f7fe fe1b 	bl	801bfec <ld_dword>
 801d3b6:	4603      	mov	r3, r0
 801d3b8:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 801d3bc:	4a0a      	ldr	r2, [pc, #40]	@ (801d3e8 <check_fs+0xa4>)
 801d3be:	4293      	cmp	r3, r2
 801d3c0:	d101      	bne.n	801d3c6 <check_fs+0x82>
 801d3c2:	2300      	movs	r3, #0
 801d3c4:	e00c      	b.n	801d3e0 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 801d3c6:	687b      	ldr	r3, [r7, #4]
 801d3c8:	3330      	adds	r3, #48	@ 0x30
 801d3ca:	3352      	adds	r3, #82	@ 0x52
 801d3cc:	4618      	mov	r0, r3
 801d3ce:	f7fe fe0d 	bl	801bfec <ld_dword>
 801d3d2:	4603      	mov	r3, r0
 801d3d4:	4a05      	ldr	r2, [pc, #20]	@ (801d3ec <check_fs+0xa8>)
 801d3d6:	4293      	cmp	r3, r2
 801d3d8:	d101      	bne.n	801d3de <check_fs+0x9a>
 801d3da:	2300      	movs	r3, #0
 801d3dc:	e000      	b.n	801d3e0 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 801d3de:	2302      	movs	r3, #2
}
 801d3e0:	4618      	mov	r0, r3
 801d3e2:	3708      	adds	r7, #8
 801d3e4:	46bd      	mov	sp, r7
 801d3e6:	bd80      	pop	{r7, pc}
 801d3e8:	00544146 	.word	0x00544146
 801d3ec:	33544146 	.word	0x33544146

0801d3f0 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 801d3f0:	b580      	push	{r7, lr}
 801d3f2:	b096      	sub	sp, #88	@ 0x58
 801d3f4:	af00      	add	r7, sp, #0
 801d3f6:	60f8      	str	r0, [r7, #12]
 801d3f8:	60b9      	str	r1, [r7, #8]
 801d3fa:	4613      	mov	r3, r2
 801d3fc:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 801d3fe:	68bb      	ldr	r3, [r7, #8]
 801d400:	2200      	movs	r2, #0
 801d402:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 801d404:	68f8      	ldr	r0, [r7, #12]
 801d406:	f7ff ff58 	bl	801d2ba <get_ldnumber>
 801d40a:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 801d40c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801d40e:	2b00      	cmp	r3, #0
 801d410:	da01      	bge.n	801d416 <find_volume+0x26>
 801d412:	230b      	movs	r3, #11
 801d414:	e22d      	b.n	801d872 <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 801d416:	4aa1      	ldr	r2, [pc, #644]	@ (801d69c <find_volume+0x2ac>)
 801d418:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801d41a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801d41e:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 801d420:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d422:	2b00      	cmp	r3, #0
 801d424:	d101      	bne.n	801d42a <find_volume+0x3a>
 801d426:	230c      	movs	r3, #12
 801d428:	e223      	b.n	801d872 <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 801d42a:	68bb      	ldr	r3, [r7, #8]
 801d42c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801d42e:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 801d430:	79fb      	ldrb	r3, [r7, #7]
 801d432:	f023 0301 	bic.w	r3, r3, #1
 801d436:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 801d438:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d43a:	781b      	ldrb	r3, [r3, #0]
 801d43c:	2b00      	cmp	r3, #0
 801d43e:	d01a      	beq.n	801d476 <find_volume+0x86>
		stat = disk_status(fs->drv);
 801d440:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d442:	785b      	ldrb	r3, [r3, #1]
 801d444:	4618      	mov	r0, r3
 801d446:	f7fe fd19 	bl	801be7c <disk_status>
 801d44a:	4603      	mov	r3, r0
 801d44c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 801d450:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801d454:	f003 0301 	and.w	r3, r3, #1
 801d458:	2b00      	cmp	r3, #0
 801d45a:	d10c      	bne.n	801d476 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 801d45c:	79fb      	ldrb	r3, [r7, #7]
 801d45e:	2b00      	cmp	r3, #0
 801d460:	d007      	beq.n	801d472 <find_volume+0x82>
 801d462:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801d466:	f003 0304 	and.w	r3, r3, #4
 801d46a:	2b00      	cmp	r3, #0
 801d46c:	d001      	beq.n	801d472 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 801d46e:	230a      	movs	r3, #10
 801d470:	e1ff      	b.n	801d872 <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 801d472:	2300      	movs	r3, #0
 801d474:	e1fd      	b.n	801d872 <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 801d476:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d478:	2200      	movs	r2, #0
 801d47a:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 801d47c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801d47e:	b2da      	uxtb	r2, r3
 801d480:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d482:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 801d484:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d486:	785b      	ldrb	r3, [r3, #1]
 801d488:	4618      	mov	r0, r3
 801d48a:	f7fe fd11 	bl	801beb0 <disk_initialize>
 801d48e:	4603      	mov	r3, r0
 801d490:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 801d494:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801d498:	f003 0301 	and.w	r3, r3, #1
 801d49c:	2b00      	cmp	r3, #0
 801d49e:	d001      	beq.n	801d4a4 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 801d4a0:	2303      	movs	r3, #3
 801d4a2:	e1e6      	b.n	801d872 <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 801d4a4:	79fb      	ldrb	r3, [r7, #7]
 801d4a6:	2b00      	cmp	r3, #0
 801d4a8:	d007      	beq.n	801d4ba <find_volume+0xca>
 801d4aa:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801d4ae:	f003 0304 	and.w	r3, r3, #4
 801d4b2:	2b00      	cmp	r3, #0
 801d4b4:	d001      	beq.n	801d4ba <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 801d4b6:	230a      	movs	r3, #10
 801d4b8:	e1db      	b.n	801d872 <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 801d4ba:	2300      	movs	r3, #0
 801d4bc:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 801d4be:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 801d4c0:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 801d4c2:	f7ff ff3f 	bl	801d344 <check_fs>
 801d4c6:	4603      	mov	r3, r0
 801d4c8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 801d4cc:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801d4d0:	2b02      	cmp	r3, #2
 801d4d2:	d149      	bne.n	801d568 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 801d4d4:	2300      	movs	r3, #0
 801d4d6:	643b      	str	r3, [r7, #64]	@ 0x40
 801d4d8:	e01e      	b.n	801d518 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 801d4da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d4dc:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 801d4e0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801d4e2:	011b      	lsls	r3, r3, #4
 801d4e4:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 801d4e8:	4413      	add	r3, r2
 801d4ea:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 801d4ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801d4ee:	3304      	adds	r3, #4
 801d4f0:	781b      	ldrb	r3, [r3, #0]
 801d4f2:	2b00      	cmp	r3, #0
 801d4f4:	d006      	beq.n	801d504 <find_volume+0x114>
 801d4f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801d4f8:	3308      	adds	r3, #8
 801d4fa:	4618      	mov	r0, r3
 801d4fc:	f7fe fd76 	bl	801bfec <ld_dword>
 801d500:	4602      	mov	r2, r0
 801d502:	e000      	b.n	801d506 <find_volume+0x116>
 801d504:	2200      	movs	r2, #0
 801d506:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801d508:	009b      	lsls	r3, r3, #2
 801d50a:	3358      	adds	r3, #88	@ 0x58
 801d50c:	443b      	add	r3, r7
 801d50e:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 801d512:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801d514:	3301      	adds	r3, #1
 801d516:	643b      	str	r3, [r7, #64]	@ 0x40
 801d518:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801d51a:	2b03      	cmp	r3, #3
 801d51c:	d9dd      	bls.n	801d4da <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 801d51e:	2300      	movs	r3, #0
 801d520:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 801d522:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801d524:	2b00      	cmp	r3, #0
 801d526:	d002      	beq.n	801d52e <find_volume+0x13e>
 801d528:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801d52a:	3b01      	subs	r3, #1
 801d52c:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 801d52e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801d530:	009b      	lsls	r3, r3, #2
 801d532:	3358      	adds	r3, #88	@ 0x58
 801d534:	443b      	add	r3, r7
 801d536:	f853 3c44 	ldr.w	r3, [r3, #-68]
 801d53a:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 801d53c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801d53e:	2b00      	cmp	r3, #0
 801d540:	d005      	beq.n	801d54e <find_volume+0x15e>
 801d542:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 801d544:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 801d546:	f7ff fefd 	bl	801d344 <check_fs>
 801d54a:	4603      	mov	r3, r0
 801d54c:	e000      	b.n	801d550 <find_volume+0x160>
 801d54e:	2303      	movs	r3, #3
 801d550:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 801d554:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801d558:	2b01      	cmp	r3, #1
 801d55a:	d905      	bls.n	801d568 <find_volume+0x178>
 801d55c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801d55e:	3301      	adds	r3, #1
 801d560:	643b      	str	r3, [r7, #64]	@ 0x40
 801d562:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801d564:	2b03      	cmp	r3, #3
 801d566:	d9e2      	bls.n	801d52e <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 801d568:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801d56c:	2b04      	cmp	r3, #4
 801d56e:	d101      	bne.n	801d574 <find_volume+0x184>
 801d570:	2301      	movs	r3, #1
 801d572:	e17e      	b.n	801d872 <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 801d574:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801d578:	2b01      	cmp	r3, #1
 801d57a:	d901      	bls.n	801d580 <find_volume+0x190>
 801d57c:	230d      	movs	r3, #13
 801d57e:	e178      	b.n	801d872 <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 801d580:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d582:	3330      	adds	r3, #48	@ 0x30
 801d584:	330b      	adds	r3, #11
 801d586:	4618      	mov	r0, r3
 801d588:	f7fe fd18 	bl	801bfbc <ld_word>
 801d58c:	4603      	mov	r3, r0
 801d58e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801d592:	d001      	beq.n	801d598 <find_volume+0x1a8>
 801d594:	230d      	movs	r3, #13
 801d596:	e16c      	b.n	801d872 <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 801d598:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d59a:	3330      	adds	r3, #48	@ 0x30
 801d59c:	3316      	adds	r3, #22
 801d59e:	4618      	mov	r0, r3
 801d5a0:	f7fe fd0c 	bl	801bfbc <ld_word>
 801d5a4:	4603      	mov	r3, r0
 801d5a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 801d5a8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801d5aa:	2b00      	cmp	r3, #0
 801d5ac:	d106      	bne.n	801d5bc <find_volume+0x1cc>
 801d5ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d5b0:	3330      	adds	r3, #48	@ 0x30
 801d5b2:	3324      	adds	r3, #36	@ 0x24
 801d5b4:	4618      	mov	r0, r3
 801d5b6:	f7fe fd19 	bl	801bfec <ld_dword>
 801d5ba:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 801d5bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d5be:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801d5c0:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 801d5c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d5c4:	f893 2040 	ldrb.w	r2, [r3, #64]	@ 0x40
 801d5c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d5ca:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 801d5cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d5ce:	789b      	ldrb	r3, [r3, #2]
 801d5d0:	2b01      	cmp	r3, #1
 801d5d2:	d005      	beq.n	801d5e0 <find_volume+0x1f0>
 801d5d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d5d6:	789b      	ldrb	r3, [r3, #2]
 801d5d8:	2b02      	cmp	r3, #2
 801d5da:	d001      	beq.n	801d5e0 <find_volume+0x1f0>
 801d5dc:	230d      	movs	r3, #13
 801d5de:	e148      	b.n	801d872 <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 801d5e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d5e2:	789b      	ldrb	r3, [r3, #2]
 801d5e4:	461a      	mov	r2, r3
 801d5e6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801d5e8:	fb02 f303 	mul.w	r3, r2, r3
 801d5ec:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 801d5ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d5f0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 801d5f4:	461a      	mov	r2, r3
 801d5f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d5f8:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 801d5fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d5fc:	895b      	ldrh	r3, [r3, #10]
 801d5fe:	2b00      	cmp	r3, #0
 801d600:	d008      	beq.n	801d614 <find_volume+0x224>
 801d602:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d604:	895b      	ldrh	r3, [r3, #10]
 801d606:	461a      	mov	r2, r3
 801d608:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d60a:	895b      	ldrh	r3, [r3, #10]
 801d60c:	3b01      	subs	r3, #1
 801d60e:	4013      	ands	r3, r2
 801d610:	2b00      	cmp	r3, #0
 801d612:	d001      	beq.n	801d618 <find_volume+0x228>
 801d614:	230d      	movs	r3, #13
 801d616:	e12c      	b.n	801d872 <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 801d618:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d61a:	3330      	adds	r3, #48	@ 0x30
 801d61c:	3311      	adds	r3, #17
 801d61e:	4618      	mov	r0, r3
 801d620:	f7fe fccc 	bl	801bfbc <ld_word>
 801d624:	4603      	mov	r3, r0
 801d626:	461a      	mov	r2, r3
 801d628:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d62a:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 801d62c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d62e:	891b      	ldrh	r3, [r3, #8]
 801d630:	f003 030f 	and.w	r3, r3, #15
 801d634:	b29b      	uxth	r3, r3
 801d636:	2b00      	cmp	r3, #0
 801d638:	d001      	beq.n	801d63e <find_volume+0x24e>
 801d63a:	230d      	movs	r3, #13
 801d63c:	e119      	b.n	801d872 <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 801d63e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d640:	3330      	adds	r3, #48	@ 0x30
 801d642:	3313      	adds	r3, #19
 801d644:	4618      	mov	r0, r3
 801d646:	f7fe fcb9 	bl	801bfbc <ld_word>
 801d64a:	4603      	mov	r3, r0
 801d64c:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 801d64e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801d650:	2b00      	cmp	r3, #0
 801d652:	d106      	bne.n	801d662 <find_volume+0x272>
 801d654:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d656:	3330      	adds	r3, #48	@ 0x30
 801d658:	3320      	adds	r3, #32
 801d65a:	4618      	mov	r0, r3
 801d65c:	f7fe fcc6 	bl	801bfec <ld_dword>
 801d660:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 801d662:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d664:	3330      	adds	r3, #48	@ 0x30
 801d666:	330e      	adds	r3, #14
 801d668:	4618      	mov	r0, r3
 801d66a:	f7fe fca7 	bl	801bfbc <ld_word>
 801d66e:	4603      	mov	r3, r0
 801d670:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 801d672:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 801d674:	2b00      	cmp	r3, #0
 801d676:	d101      	bne.n	801d67c <find_volume+0x28c>
 801d678:	230d      	movs	r3, #13
 801d67a:	e0fa      	b.n	801d872 <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 801d67c:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 801d67e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801d680:	4413      	add	r3, r2
 801d682:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801d684:	8912      	ldrh	r2, [r2, #8]
 801d686:	0912      	lsrs	r2, r2, #4
 801d688:	b292      	uxth	r2, r2
 801d68a:	4413      	add	r3, r2
 801d68c:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 801d68e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801d690:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d692:	429a      	cmp	r2, r3
 801d694:	d204      	bcs.n	801d6a0 <find_volume+0x2b0>
 801d696:	230d      	movs	r3, #13
 801d698:	e0eb      	b.n	801d872 <find_volume+0x482>
 801d69a:	bf00      	nop
 801d69c:	24000b5c 	.word	0x24000b5c
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 801d6a0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801d6a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d6a4:	1ad3      	subs	r3, r2, r3
 801d6a6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801d6a8:	8952      	ldrh	r2, [r2, #10]
 801d6aa:	fbb3 f3f2 	udiv	r3, r3, r2
 801d6ae:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 801d6b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d6b2:	2b00      	cmp	r3, #0
 801d6b4:	d101      	bne.n	801d6ba <find_volume+0x2ca>
 801d6b6:	230d      	movs	r3, #13
 801d6b8:	e0db      	b.n	801d872 <find_volume+0x482>
		fmt = FS_FAT32;
 801d6ba:	2303      	movs	r3, #3
 801d6bc:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 801d6c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d6c2:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 801d6c6:	4293      	cmp	r3, r2
 801d6c8:	d802      	bhi.n	801d6d0 <find_volume+0x2e0>
 801d6ca:	2302      	movs	r3, #2
 801d6cc:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 801d6d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d6d2:	f640 72f5 	movw	r2, #4085	@ 0xff5
 801d6d6:	4293      	cmp	r3, r2
 801d6d8:	d802      	bhi.n	801d6e0 <find_volume+0x2f0>
 801d6da:	2301      	movs	r3, #1
 801d6dc:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 801d6e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d6e2:	1c9a      	adds	r2, r3, #2
 801d6e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d6e6:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 801d6e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d6ea:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 801d6ec:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 801d6ee:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 801d6f0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801d6f2:	441a      	add	r2, r3
 801d6f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d6f6:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 801d6f8:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 801d6fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d6fc:	441a      	add	r2, r3
 801d6fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d700:	629a      	str	r2, [r3, #40]	@ 0x28
		if (fmt == FS_FAT32) {
 801d702:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801d706:	2b03      	cmp	r3, #3
 801d708:	d11e      	bne.n	801d748 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 801d70a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d70c:	3330      	adds	r3, #48	@ 0x30
 801d70e:	332a      	adds	r3, #42	@ 0x2a
 801d710:	4618      	mov	r0, r3
 801d712:	f7fe fc53 	bl	801bfbc <ld_word>
 801d716:	4603      	mov	r3, r0
 801d718:	2b00      	cmp	r3, #0
 801d71a:	d001      	beq.n	801d720 <find_volume+0x330>
 801d71c:	230d      	movs	r3, #13
 801d71e:	e0a8      	b.n	801d872 <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 801d720:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d722:	891b      	ldrh	r3, [r3, #8]
 801d724:	2b00      	cmp	r3, #0
 801d726:	d001      	beq.n	801d72c <find_volume+0x33c>
 801d728:	230d      	movs	r3, #13
 801d72a:	e0a2      	b.n	801d872 <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 801d72c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d72e:	3330      	adds	r3, #48	@ 0x30
 801d730:	332c      	adds	r3, #44	@ 0x2c
 801d732:	4618      	mov	r0, r3
 801d734:	f7fe fc5a 	bl	801bfec <ld_dword>
 801d738:	4602      	mov	r2, r0
 801d73a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d73c:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 801d73e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d740:	695b      	ldr	r3, [r3, #20]
 801d742:	009b      	lsls	r3, r3, #2
 801d744:	647b      	str	r3, [r7, #68]	@ 0x44
 801d746:	e01f      	b.n	801d788 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 801d748:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d74a:	891b      	ldrh	r3, [r3, #8]
 801d74c:	2b00      	cmp	r3, #0
 801d74e:	d101      	bne.n	801d754 <find_volume+0x364>
 801d750:	230d      	movs	r3, #13
 801d752:	e08e      	b.n	801d872 <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 801d754:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d756:	6a1a      	ldr	r2, [r3, #32]
 801d758:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801d75a:	441a      	add	r2, r3
 801d75c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d75e:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 801d760:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801d764:	2b02      	cmp	r3, #2
 801d766:	d103      	bne.n	801d770 <find_volume+0x380>
 801d768:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d76a:	695b      	ldr	r3, [r3, #20]
 801d76c:	005b      	lsls	r3, r3, #1
 801d76e:	e00a      	b.n	801d786 <find_volume+0x396>
 801d770:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d772:	695a      	ldr	r2, [r3, #20]
 801d774:	4613      	mov	r3, r2
 801d776:	005b      	lsls	r3, r3, #1
 801d778:	4413      	add	r3, r2
 801d77a:	085a      	lsrs	r2, r3, #1
 801d77c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d77e:	695b      	ldr	r3, [r3, #20]
 801d780:	f003 0301 	and.w	r3, r3, #1
 801d784:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 801d786:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 801d788:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d78a:	699a      	ldr	r2, [r3, #24]
 801d78c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801d78e:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 801d792:	0a5b      	lsrs	r3, r3, #9
 801d794:	429a      	cmp	r2, r3
 801d796:	d201      	bcs.n	801d79c <find_volume+0x3ac>
 801d798:	230d      	movs	r3, #13
 801d79a:	e06a      	b.n	801d872 <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 801d79c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d79e:	f04f 32ff 	mov.w	r2, #4294967295
 801d7a2:	611a      	str	r2, [r3, #16]
 801d7a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d7a6:	691a      	ldr	r2, [r3, #16]
 801d7a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d7aa:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 801d7ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d7ae:	2280      	movs	r2, #128	@ 0x80
 801d7b0:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 801d7b2:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801d7b6:	2b03      	cmp	r3, #3
 801d7b8:	d149      	bne.n	801d84e <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 801d7ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d7bc:	3330      	adds	r3, #48	@ 0x30
 801d7be:	3330      	adds	r3, #48	@ 0x30
 801d7c0:	4618      	mov	r0, r3
 801d7c2:	f7fe fbfb 	bl	801bfbc <ld_word>
 801d7c6:	4603      	mov	r3, r0
 801d7c8:	2b01      	cmp	r3, #1
 801d7ca:	d140      	bne.n	801d84e <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 801d7cc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801d7ce:	3301      	adds	r3, #1
 801d7d0:	4619      	mov	r1, r3
 801d7d2:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 801d7d4:	f7fe fea2 	bl	801c51c <move_window>
 801d7d8:	4603      	mov	r3, r0
 801d7da:	2b00      	cmp	r3, #0
 801d7dc:	d137      	bne.n	801d84e <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 801d7de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d7e0:	2200      	movs	r2, #0
 801d7e2:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 801d7e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d7e6:	3330      	adds	r3, #48	@ 0x30
 801d7e8:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 801d7ec:	4618      	mov	r0, r3
 801d7ee:	f7fe fbe5 	bl	801bfbc <ld_word>
 801d7f2:	4603      	mov	r3, r0
 801d7f4:	461a      	mov	r2, r3
 801d7f6:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 801d7fa:	429a      	cmp	r2, r3
 801d7fc:	d127      	bne.n	801d84e <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 801d7fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d800:	3330      	adds	r3, #48	@ 0x30
 801d802:	4618      	mov	r0, r3
 801d804:	f7fe fbf2 	bl	801bfec <ld_dword>
 801d808:	4603      	mov	r3, r0
 801d80a:	4a1c      	ldr	r2, [pc, #112]	@ (801d87c <find_volume+0x48c>)
 801d80c:	4293      	cmp	r3, r2
 801d80e:	d11e      	bne.n	801d84e <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 801d810:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d812:	3330      	adds	r3, #48	@ 0x30
 801d814:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 801d818:	4618      	mov	r0, r3
 801d81a:	f7fe fbe7 	bl	801bfec <ld_dword>
 801d81e:	4603      	mov	r3, r0
 801d820:	4a17      	ldr	r2, [pc, #92]	@ (801d880 <find_volume+0x490>)
 801d822:	4293      	cmp	r3, r2
 801d824:	d113      	bne.n	801d84e <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 801d826:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d828:	3330      	adds	r3, #48	@ 0x30
 801d82a:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 801d82e:	4618      	mov	r0, r3
 801d830:	f7fe fbdc 	bl	801bfec <ld_dword>
 801d834:	4602      	mov	r2, r0
 801d836:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d838:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 801d83a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d83c:	3330      	adds	r3, #48	@ 0x30
 801d83e:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 801d842:	4618      	mov	r0, r3
 801d844:	f7fe fbd2 	bl	801bfec <ld_dword>
 801d848:	4602      	mov	r2, r0
 801d84a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d84c:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 801d84e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d850:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 801d854:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 801d856:	4b0b      	ldr	r3, [pc, #44]	@ (801d884 <find_volume+0x494>)
 801d858:	881b      	ldrh	r3, [r3, #0]
 801d85a:	3301      	adds	r3, #1
 801d85c:	b29a      	uxth	r2, r3
 801d85e:	4b09      	ldr	r3, [pc, #36]	@ (801d884 <find_volume+0x494>)
 801d860:	801a      	strh	r2, [r3, #0]
 801d862:	4b08      	ldr	r3, [pc, #32]	@ (801d884 <find_volume+0x494>)
 801d864:	881a      	ldrh	r2, [r3, #0]
 801d866:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d868:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 801d86a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 801d86c:	f7fe fdee 	bl	801c44c <clear_lock>
#endif
	return FR_OK;
 801d870:	2300      	movs	r3, #0
}
 801d872:	4618      	mov	r0, r3
 801d874:	3758      	adds	r7, #88	@ 0x58
 801d876:	46bd      	mov	sp, r7
 801d878:	bd80      	pop	{r7, pc}
 801d87a:	bf00      	nop
 801d87c:	41615252 	.word	0x41615252
 801d880:	61417272 	.word	0x61417272
 801d884:	24000b60 	.word	0x24000b60

0801d888 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 801d888:	b580      	push	{r7, lr}
 801d88a:	b084      	sub	sp, #16
 801d88c:	af00      	add	r7, sp, #0
 801d88e:	6078      	str	r0, [r7, #4]
 801d890:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 801d892:	2309      	movs	r3, #9
 801d894:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 801d896:	687b      	ldr	r3, [r7, #4]
 801d898:	2b00      	cmp	r3, #0
 801d89a:	d01c      	beq.n	801d8d6 <validate+0x4e>
 801d89c:	687b      	ldr	r3, [r7, #4]
 801d89e:	681b      	ldr	r3, [r3, #0]
 801d8a0:	2b00      	cmp	r3, #0
 801d8a2:	d018      	beq.n	801d8d6 <validate+0x4e>
 801d8a4:	687b      	ldr	r3, [r7, #4]
 801d8a6:	681b      	ldr	r3, [r3, #0]
 801d8a8:	781b      	ldrb	r3, [r3, #0]
 801d8aa:	2b00      	cmp	r3, #0
 801d8ac:	d013      	beq.n	801d8d6 <validate+0x4e>
 801d8ae:	687b      	ldr	r3, [r7, #4]
 801d8b0:	889a      	ldrh	r2, [r3, #4]
 801d8b2:	687b      	ldr	r3, [r7, #4]
 801d8b4:	681b      	ldr	r3, [r3, #0]
 801d8b6:	88db      	ldrh	r3, [r3, #6]
 801d8b8:	429a      	cmp	r2, r3
 801d8ba:	d10c      	bne.n	801d8d6 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 801d8bc:	687b      	ldr	r3, [r7, #4]
 801d8be:	681b      	ldr	r3, [r3, #0]
 801d8c0:	785b      	ldrb	r3, [r3, #1]
 801d8c2:	4618      	mov	r0, r3
 801d8c4:	f7fe fada 	bl	801be7c <disk_status>
 801d8c8:	4603      	mov	r3, r0
 801d8ca:	f003 0301 	and.w	r3, r3, #1
 801d8ce:	2b00      	cmp	r3, #0
 801d8d0:	d101      	bne.n	801d8d6 <validate+0x4e>
			res = FR_OK;
 801d8d2:	2300      	movs	r3, #0
 801d8d4:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 801d8d6:	7bfb      	ldrb	r3, [r7, #15]
 801d8d8:	2b00      	cmp	r3, #0
 801d8da:	d102      	bne.n	801d8e2 <validate+0x5a>
 801d8dc:	687b      	ldr	r3, [r7, #4]
 801d8de:	681b      	ldr	r3, [r3, #0]
 801d8e0:	e000      	b.n	801d8e4 <validate+0x5c>
 801d8e2:	2300      	movs	r3, #0
 801d8e4:	683a      	ldr	r2, [r7, #0]
 801d8e6:	6013      	str	r3, [r2, #0]
	return res;
 801d8e8:	7bfb      	ldrb	r3, [r7, #15]
}
 801d8ea:	4618      	mov	r0, r3
 801d8ec:	3710      	adds	r7, #16
 801d8ee:	46bd      	mov	sp, r7
 801d8f0:	bd80      	pop	{r7, pc}
	...

0801d8f4 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 801d8f4:	b580      	push	{r7, lr}
 801d8f6:	b088      	sub	sp, #32
 801d8f8:	af00      	add	r7, sp, #0
 801d8fa:	60f8      	str	r0, [r7, #12]
 801d8fc:	60b9      	str	r1, [r7, #8]
 801d8fe:	4613      	mov	r3, r2
 801d900:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 801d902:	68bb      	ldr	r3, [r7, #8]
 801d904:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 801d906:	f107 0310 	add.w	r3, r7, #16
 801d90a:	4618      	mov	r0, r3
 801d90c:	f7ff fcd5 	bl	801d2ba <get_ldnumber>
 801d910:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 801d912:	69fb      	ldr	r3, [r7, #28]
 801d914:	2b00      	cmp	r3, #0
 801d916:	da01      	bge.n	801d91c <f_mount+0x28>
 801d918:	230b      	movs	r3, #11
 801d91a:	e02b      	b.n	801d974 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 801d91c:	4a17      	ldr	r2, [pc, #92]	@ (801d97c <f_mount+0x88>)
 801d91e:	69fb      	ldr	r3, [r7, #28]
 801d920:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801d924:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 801d926:	69bb      	ldr	r3, [r7, #24]
 801d928:	2b00      	cmp	r3, #0
 801d92a:	d005      	beq.n	801d938 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 801d92c:	69b8      	ldr	r0, [r7, #24]
 801d92e:	f7fe fd8d 	bl	801c44c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 801d932:	69bb      	ldr	r3, [r7, #24]
 801d934:	2200      	movs	r2, #0
 801d936:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 801d938:	68fb      	ldr	r3, [r7, #12]
 801d93a:	2b00      	cmp	r3, #0
 801d93c:	d002      	beq.n	801d944 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 801d93e:	68fb      	ldr	r3, [r7, #12]
 801d940:	2200      	movs	r2, #0
 801d942:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 801d944:	68fa      	ldr	r2, [r7, #12]
 801d946:	490d      	ldr	r1, [pc, #52]	@ (801d97c <f_mount+0x88>)
 801d948:	69fb      	ldr	r3, [r7, #28]
 801d94a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 801d94e:	68fb      	ldr	r3, [r7, #12]
 801d950:	2b00      	cmp	r3, #0
 801d952:	d002      	beq.n	801d95a <f_mount+0x66>
 801d954:	79fb      	ldrb	r3, [r7, #7]
 801d956:	2b01      	cmp	r3, #1
 801d958:	d001      	beq.n	801d95e <f_mount+0x6a>
 801d95a:	2300      	movs	r3, #0
 801d95c:	e00a      	b.n	801d974 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 801d95e:	f107 010c 	add.w	r1, r7, #12
 801d962:	f107 0308 	add.w	r3, r7, #8
 801d966:	2200      	movs	r2, #0
 801d968:	4618      	mov	r0, r3
 801d96a:	f7ff fd41 	bl	801d3f0 <find_volume>
 801d96e:	4603      	mov	r3, r0
 801d970:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 801d972:	7dfb      	ldrb	r3, [r7, #23]
}
 801d974:	4618      	mov	r0, r3
 801d976:	3720      	adds	r7, #32
 801d978:	46bd      	mov	sp, r7
 801d97a:	bd80      	pop	{r7, pc}
 801d97c:	24000b5c 	.word	0x24000b5c

0801d980 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 801d980:	b580      	push	{r7, lr}
 801d982:	b098      	sub	sp, #96	@ 0x60
 801d984:	af00      	add	r7, sp, #0
 801d986:	60f8      	str	r0, [r7, #12]
 801d988:	60b9      	str	r1, [r7, #8]
 801d98a:	4613      	mov	r3, r2
 801d98c:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 801d98e:	68fb      	ldr	r3, [r7, #12]
 801d990:	2b00      	cmp	r3, #0
 801d992:	d101      	bne.n	801d998 <f_open+0x18>
 801d994:	2309      	movs	r3, #9
 801d996:	e1a9      	b.n	801dcec <f_open+0x36c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 801d998:	79fb      	ldrb	r3, [r7, #7]
 801d99a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801d99e:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 801d9a0:	79fa      	ldrb	r2, [r7, #7]
 801d9a2:	f107 0110 	add.w	r1, r7, #16
 801d9a6:	f107 0308 	add.w	r3, r7, #8
 801d9aa:	4618      	mov	r0, r3
 801d9ac:	f7ff fd20 	bl	801d3f0 <find_volume>
 801d9b0:	4603      	mov	r3, r0
 801d9b2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 801d9b6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 801d9ba:	2b00      	cmp	r3, #0
 801d9bc:	f040 818d 	bne.w	801dcda <f_open+0x35a>
		dj.obj.fs = fs;
 801d9c0:	693b      	ldr	r3, [r7, #16]
 801d9c2:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 801d9c4:	68ba      	ldr	r2, [r7, #8]
 801d9c6:	f107 0314 	add.w	r3, r7, #20
 801d9ca:	4611      	mov	r1, r2
 801d9cc:	4618      	mov	r0, r3
 801d9ce:	f7ff fc03 	bl	801d1d8 <follow_path>
 801d9d2:	4603      	mov	r3, r0
 801d9d4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 801d9d8:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 801d9dc:	2b00      	cmp	r3, #0
 801d9de:	d118      	bne.n	801da12 <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 801d9e0:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 801d9e4:	b25b      	sxtb	r3, r3
 801d9e6:	2b00      	cmp	r3, #0
 801d9e8:	da03      	bge.n	801d9f2 <f_open+0x72>
				res = FR_INVALID_NAME;
 801d9ea:	2306      	movs	r3, #6
 801d9ec:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 801d9f0:	e00f      	b.n	801da12 <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 801d9f2:	79fb      	ldrb	r3, [r7, #7]
 801d9f4:	2b01      	cmp	r3, #1
 801d9f6:	bf8c      	ite	hi
 801d9f8:	2301      	movhi	r3, #1
 801d9fa:	2300      	movls	r3, #0
 801d9fc:	b2db      	uxtb	r3, r3
 801d9fe:	461a      	mov	r2, r3
 801da00:	f107 0314 	add.w	r3, r7, #20
 801da04:	4611      	mov	r1, r2
 801da06:	4618      	mov	r0, r3
 801da08:	f7fe fbd8 	bl	801c1bc <chk_lock>
 801da0c:	4603      	mov	r3, r0
 801da0e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 801da12:	79fb      	ldrb	r3, [r7, #7]
 801da14:	f003 031c 	and.w	r3, r3, #28
 801da18:	2b00      	cmp	r3, #0
 801da1a:	d07f      	beq.n	801db1c <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 801da1c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 801da20:	2b00      	cmp	r3, #0
 801da22:	d017      	beq.n	801da54 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 801da24:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 801da28:	2b04      	cmp	r3, #4
 801da2a:	d10e      	bne.n	801da4a <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 801da2c:	f7fe fc22 	bl	801c274 <enq_lock>
 801da30:	4603      	mov	r3, r0
 801da32:	2b00      	cmp	r3, #0
 801da34:	d006      	beq.n	801da44 <f_open+0xc4>
 801da36:	f107 0314 	add.w	r3, r7, #20
 801da3a:	4618      	mov	r0, r3
 801da3c:	f7ff fb06 	bl	801d04c <dir_register>
 801da40:	4603      	mov	r3, r0
 801da42:	e000      	b.n	801da46 <f_open+0xc6>
 801da44:	2312      	movs	r3, #18
 801da46:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 801da4a:	79fb      	ldrb	r3, [r7, #7]
 801da4c:	f043 0308 	orr.w	r3, r3, #8
 801da50:	71fb      	strb	r3, [r7, #7]
 801da52:	e010      	b.n	801da76 <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 801da54:	7ebb      	ldrb	r3, [r7, #26]
 801da56:	f003 0311 	and.w	r3, r3, #17
 801da5a:	2b00      	cmp	r3, #0
 801da5c:	d003      	beq.n	801da66 <f_open+0xe6>
					res = FR_DENIED;
 801da5e:	2307      	movs	r3, #7
 801da60:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 801da64:	e007      	b.n	801da76 <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 801da66:	79fb      	ldrb	r3, [r7, #7]
 801da68:	f003 0304 	and.w	r3, r3, #4
 801da6c:	2b00      	cmp	r3, #0
 801da6e:	d002      	beq.n	801da76 <f_open+0xf6>
 801da70:	2308      	movs	r3, #8
 801da72:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 801da76:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 801da7a:	2b00      	cmp	r3, #0
 801da7c:	d168      	bne.n	801db50 <f_open+0x1d0>
 801da7e:	79fb      	ldrb	r3, [r7, #7]
 801da80:	f003 0308 	and.w	r3, r3, #8
 801da84:	2b00      	cmp	r3, #0
 801da86:	d063      	beq.n	801db50 <f_open+0x1d0>
				dw = GET_FATTIME();
 801da88:	f7fd ff6c 	bl	801b964 <get_fattime>
 801da8c:	6538      	str	r0, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 801da8e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801da90:	330e      	adds	r3, #14
 801da92:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 801da94:	4618      	mov	r0, r3
 801da96:	f7fe fae7 	bl	801c068 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 801da9a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801da9c:	3316      	adds	r3, #22
 801da9e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 801daa0:	4618      	mov	r0, r3
 801daa2:	f7fe fae1 	bl	801c068 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 801daa6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801daa8:	330b      	adds	r3, #11
 801daaa:	2220      	movs	r2, #32
 801daac:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 801daae:	693b      	ldr	r3, [r7, #16]
 801dab0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801dab2:	4611      	mov	r1, r2
 801dab4:	4618      	mov	r0, r3
 801dab6:	f7ff fa35 	bl	801cf24 <ld_clust>
 801daba:	64f8      	str	r0, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 801dabc:	693b      	ldr	r3, [r7, #16]
 801dabe:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 801dac0:	2200      	movs	r2, #0
 801dac2:	4618      	mov	r0, r3
 801dac4:	f7ff fa4d 	bl	801cf62 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 801dac8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801daca:	331c      	adds	r3, #28
 801dacc:	2100      	movs	r1, #0
 801dace:	4618      	mov	r0, r3
 801dad0:	f7fe faca 	bl	801c068 <st_dword>
					fs->wflag = 1;
 801dad4:	693b      	ldr	r3, [r7, #16]
 801dad6:	2201      	movs	r2, #1
 801dad8:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 801dada:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801dadc:	2b00      	cmp	r3, #0
 801dade:	d037      	beq.n	801db50 <f_open+0x1d0>
						dw = fs->winsect;
 801dae0:	693b      	ldr	r3, [r7, #16]
 801dae2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801dae4:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 801dae6:	f107 0314 	add.w	r3, r7, #20
 801daea:	2200      	movs	r2, #0
 801daec:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 801daee:	4618      	mov	r0, r3
 801daf0:	f7fe ff60 	bl	801c9b4 <remove_chain>
 801daf4:	4603      	mov	r3, r0
 801daf6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 801dafa:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 801dafe:	2b00      	cmp	r3, #0
 801db00:	d126      	bne.n	801db50 <f_open+0x1d0>
							res = move_window(fs, dw);
 801db02:	693b      	ldr	r3, [r7, #16]
 801db04:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 801db06:	4618      	mov	r0, r3
 801db08:	f7fe fd08 	bl	801c51c <move_window>
 801db0c:	4603      	mov	r3, r0
 801db0e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 801db12:	693b      	ldr	r3, [r7, #16]
 801db14:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801db16:	3a01      	subs	r2, #1
 801db18:	60da      	str	r2, [r3, #12]
 801db1a:	e019      	b.n	801db50 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 801db1c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 801db20:	2b00      	cmp	r3, #0
 801db22:	d115      	bne.n	801db50 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 801db24:	7ebb      	ldrb	r3, [r7, #26]
 801db26:	f003 0310 	and.w	r3, r3, #16
 801db2a:	2b00      	cmp	r3, #0
 801db2c:	d003      	beq.n	801db36 <f_open+0x1b6>
					res = FR_NO_FILE;
 801db2e:	2304      	movs	r3, #4
 801db30:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 801db34:	e00c      	b.n	801db50 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 801db36:	79fb      	ldrb	r3, [r7, #7]
 801db38:	f003 0302 	and.w	r3, r3, #2
 801db3c:	2b00      	cmp	r3, #0
 801db3e:	d007      	beq.n	801db50 <f_open+0x1d0>
 801db40:	7ebb      	ldrb	r3, [r7, #26]
 801db42:	f003 0301 	and.w	r3, r3, #1
 801db46:	2b00      	cmp	r3, #0
 801db48:	d002      	beq.n	801db50 <f_open+0x1d0>
						res = FR_DENIED;
 801db4a:	2307      	movs	r3, #7
 801db4c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 801db50:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 801db54:	2b00      	cmp	r3, #0
 801db56:	d126      	bne.n	801dba6 <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 801db58:	79fb      	ldrb	r3, [r7, #7]
 801db5a:	f003 0308 	and.w	r3, r3, #8
 801db5e:	2b00      	cmp	r3, #0
 801db60:	d003      	beq.n	801db6a <f_open+0x1ea>
				mode |= FA_MODIFIED;
 801db62:	79fb      	ldrb	r3, [r7, #7]
 801db64:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801db68:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 801db6a:	693b      	ldr	r3, [r7, #16]
 801db6c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801db6e:	68fb      	ldr	r3, [r7, #12]
 801db70:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 801db72:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801db74:	68fb      	ldr	r3, [r7, #12]
 801db76:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 801db78:	79fb      	ldrb	r3, [r7, #7]
 801db7a:	2b01      	cmp	r3, #1
 801db7c:	bf8c      	ite	hi
 801db7e:	2301      	movhi	r3, #1
 801db80:	2300      	movls	r3, #0
 801db82:	b2db      	uxtb	r3, r3
 801db84:	461a      	mov	r2, r3
 801db86:	f107 0314 	add.w	r3, r7, #20
 801db8a:	4611      	mov	r1, r2
 801db8c:	4618      	mov	r0, r3
 801db8e:	f7fe fb93 	bl	801c2b8 <inc_lock>
 801db92:	4602      	mov	r2, r0
 801db94:	68fb      	ldr	r3, [r7, #12]
 801db96:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 801db98:	68fb      	ldr	r3, [r7, #12]
 801db9a:	691b      	ldr	r3, [r3, #16]
 801db9c:	2b00      	cmp	r3, #0
 801db9e:	d102      	bne.n	801dba6 <f_open+0x226>
 801dba0:	2302      	movs	r3, #2
 801dba2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 801dba6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 801dbaa:	2b00      	cmp	r3, #0
 801dbac:	f040 8095 	bne.w	801dcda <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 801dbb0:	693b      	ldr	r3, [r7, #16]
 801dbb2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801dbb4:	4611      	mov	r1, r2
 801dbb6:	4618      	mov	r0, r3
 801dbb8:	f7ff f9b4 	bl	801cf24 <ld_clust>
 801dbbc:	4602      	mov	r2, r0
 801dbbe:	68fb      	ldr	r3, [r7, #12]
 801dbc0:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 801dbc2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801dbc4:	331c      	adds	r3, #28
 801dbc6:	4618      	mov	r0, r3
 801dbc8:	f7fe fa10 	bl	801bfec <ld_dword>
 801dbcc:	4602      	mov	r2, r0
 801dbce:	68fb      	ldr	r3, [r7, #12]
 801dbd0:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 801dbd2:	68fb      	ldr	r3, [r7, #12]
 801dbd4:	2200      	movs	r2, #0
 801dbd6:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 801dbd8:	693a      	ldr	r2, [r7, #16]
 801dbda:	68fb      	ldr	r3, [r7, #12]
 801dbdc:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 801dbde:	693b      	ldr	r3, [r7, #16]
 801dbe0:	88da      	ldrh	r2, [r3, #6]
 801dbe2:	68fb      	ldr	r3, [r7, #12]
 801dbe4:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 801dbe6:	68fb      	ldr	r3, [r7, #12]
 801dbe8:	79fa      	ldrb	r2, [r7, #7]
 801dbea:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 801dbec:	68fb      	ldr	r3, [r7, #12]
 801dbee:	2200      	movs	r2, #0
 801dbf0:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 801dbf2:	68fb      	ldr	r3, [r7, #12]
 801dbf4:	2200      	movs	r2, #0
 801dbf6:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 801dbf8:	68fb      	ldr	r3, [r7, #12]
 801dbfa:	2200      	movs	r2, #0
 801dbfc:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 801dbfe:	68fb      	ldr	r3, [r7, #12]
 801dc00:	3330      	adds	r3, #48	@ 0x30
 801dc02:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801dc06:	2100      	movs	r1, #0
 801dc08:	4618      	mov	r0, r3
 801dc0a:	f7fe fa7a 	bl	801c102 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 801dc0e:	79fb      	ldrb	r3, [r7, #7]
 801dc10:	f003 0320 	and.w	r3, r3, #32
 801dc14:	2b00      	cmp	r3, #0
 801dc16:	d060      	beq.n	801dcda <f_open+0x35a>
 801dc18:	68fb      	ldr	r3, [r7, #12]
 801dc1a:	68db      	ldr	r3, [r3, #12]
 801dc1c:	2b00      	cmp	r3, #0
 801dc1e:	d05c      	beq.n	801dcda <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 801dc20:	68fb      	ldr	r3, [r7, #12]
 801dc22:	68da      	ldr	r2, [r3, #12]
 801dc24:	68fb      	ldr	r3, [r7, #12]
 801dc26:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 801dc28:	693b      	ldr	r3, [r7, #16]
 801dc2a:	895b      	ldrh	r3, [r3, #10]
 801dc2c:	025b      	lsls	r3, r3, #9
 801dc2e:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 801dc30:	68fb      	ldr	r3, [r7, #12]
 801dc32:	689b      	ldr	r3, [r3, #8]
 801dc34:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 801dc36:	68fb      	ldr	r3, [r7, #12]
 801dc38:	68db      	ldr	r3, [r3, #12]
 801dc3a:	657b      	str	r3, [r7, #84]	@ 0x54
 801dc3c:	e016      	b.n	801dc6c <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 801dc3e:	68fb      	ldr	r3, [r7, #12]
 801dc40:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 801dc42:	4618      	mov	r0, r3
 801dc44:	f7fe fd25 	bl	801c692 <get_fat>
 801dc48:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 801dc4a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801dc4c:	2b01      	cmp	r3, #1
 801dc4e:	d802      	bhi.n	801dc56 <f_open+0x2d6>
 801dc50:	2302      	movs	r3, #2
 801dc52:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 801dc56:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801dc58:	f1b3 3fff 	cmp.w	r3, #4294967295
 801dc5c:	d102      	bne.n	801dc64 <f_open+0x2e4>
 801dc5e:	2301      	movs	r3, #1
 801dc60:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 801dc64:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801dc66:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801dc68:	1ad3      	subs	r3, r2, r3
 801dc6a:	657b      	str	r3, [r7, #84]	@ 0x54
 801dc6c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 801dc70:	2b00      	cmp	r3, #0
 801dc72:	d103      	bne.n	801dc7c <f_open+0x2fc>
 801dc74:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801dc76:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801dc78:	429a      	cmp	r2, r3
 801dc7a:	d8e0      	bhi.n	801dc3e <f_open+0x2be>
				}
				fp->clust = clst;
 801dc7c:	68fb      	ldr	r3, [r7, #12]
 801dc7e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801dc80:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 801dc82:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 801dc86:	2b00      	cmp	r3, #0
 801dc88:	d127      	bne.n	801dcda <f_open+0x35a>
 801dc8a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801dc8c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801dc90:	2b00      	cmp	r3, #0
 801dc92:	d022      	beq.n	801dcda <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 801dc94:	693b      	ldr	r3, [r7, #16]
 801dc96:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 801dc98:	4618      	mov	r0, r3
 801dc9a:	f7fe fcdb 	bl	801c654 <clust2sect>
 801dc9e:	6478      	str	r0, [r7, #68]	@ 0x44
 801dca0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801dca2:	2b00      	cmp	r3, #0
 801dca4:	d103      	bne.n	801dcae <f_open+0x32e>
						res = FR_INT_ERR;
 801dca6:	2302      	movs	r3, #2
 801dca8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 801dcac:	e015      	b.n	801dcda <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 801dcae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801dcb0:	0a5a      	lsrs	r2, r3, #9
 801dcb2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801dcb4:	441a      	add	r2, r3
 801dcb6:	68fb      	ldr	r3, [r7, #12]
 801dcb8:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 801dcba:	693b      	ldr	r3, [r7, #16]
 801dcbc:	7858      	ldrb	r0, [r3, #1]
 801dcbe:	68fb      	ldr	r3, [r7, #12]
 801dcc0:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801dcc4:	68fb      	ldr	r3, [r7, #12]
 801dcc6:	6a1a      	ldr	r2, [r3, #32]
 801dcc8:	2301      	movs	r3, #1
 801dcca:	f7fe f919 	bl	801bf00 <disk_read>
 801dcce:	4603      	mov	r3, r0
 801dcd0:	2b00      	cmp	r3, #0
 801dcd2:	d002      	beq.n	801dcda <f_open+0x35a>
 801dcd4:	2301      	movs	r3, #1
 801dcd6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 801dcda:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 801dcde:	2b00      	cmp	r3, #0
 801dce0:	d002      	beq.n	801dce8 <f_open+0x368>
 801dce2:	68fb      	ldr	r3, [r7, #12]
 801dce4:	2200      	movs	r2, #0
 801dce6:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 801dce8:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 801dcec:	4618      	mov	r0, r3
 801dcee:	3760      	adds	r7, #96	@ 0x60
 801dcf0:	46bd      	mov	sp, r7
 801dcf2:	bd80      	pop	{r7, pc}

0801dcf4 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 801dcf4:	b580      	push	{r7, lr}
 801dcf6:	b08e      	sub	sp, #56	@ 0x38
 801dcf8:	af00      	add	r7, sp, #0
 801dcfa:	60f8      	str	r0, [r7, #12]
 801dcfc:	60b9      	str	r1, [r7, #8]
 801dcfe:	607a      	str	r2, [r7, #4]
 801dd00:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 801dd02:	68bb      	ldr	r3, [r7, #8]
 801dd04:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 801dd06:	683b      	ldr	r3, [r7, #0]
 801dd08:	2200      	movs	r2, #0
 801dd0a:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 801dd0c:	68fb      	ldr	r3, [r7, #12]
 801dd0e:	f107 0214 	add.w	r2, r7, #20
 801dd12:	4611      	mov	r1, r2
 801dd14:	4618      	mov	r0, r3
 801dd16:	f7ff fdb7 	bl	801d888 <validate>
 801dd1a:	4603      	mov	r3, r0
 801dd1c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 801dd20:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801dd24:	2b00      	cmp	r3, #0
 801dd26:	d107      	bne.n	801dd38 <f_read+0x44>
 801dd28:	68fb      	ldr	r3, [r7, #12]
 801dd2a:	7d5b      	ldrb	r3, [r3, #21]
 801dd2c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 801dd30:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801dd34:	2b00      	cmp	r3, #0
 801dd36:	d002      	beq.n	801dd3e <f_read+0x4a>
 801dd38:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801dd3c:	e115      	b.n	801df6a <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 801dd3e:	68fb      	ldr	r3, [r7, #12]
 801dd40:	7d1b      	ldrb	r3, [r3, #20]
 801dd42:	f003 0301 	and.w	r3, r3, #1
 801dd46:	2b00      	cmp	r3, #0
 801dd48:	d101      	bne.n	801dd4e <f_read+0x5a>
 801dd4a:	2307      	movs	r3, #7
 801dd4c:	e10d      	b.n	801df6a <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 801dd4e:	68fb      	ldr	r3, [r7, #12]
 801dd50:	68da      	ldr	r2, [r3, #12]
 801dd52:	68fb      	ldr	r3, [r7, #12]
 801dd54:	699b      	ldr	r3, [r3, #24]
 801dd56:	1ad3      	subs	r3, r2, r3
 801dd58:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 801dd5a:	687a      	ldr	r2, [r7, #4]
 801dd5c:	6a3b      	ldr	r3, [r7, #32]
 801dd5e:	429a      	cmp	r2, r3
 801dd60:	f240 80fe 	bls.w	801df60 <f_read+0x26c>
 801dd64:	6a3b      	ldr	r3, [r7, #32]
 801dd66:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 801dd68:	e0fa      	b.n	801df60 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 801dd6a:	68fb      	ldr	r3, [r7, #12]
 801dd6c:	699b      	ldr	r3, [r3, #24]
 801dd6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801dd72:	2b00      	cmp	r3, #0
 801dd74:	f040 80c6 	bne.w	801df04 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 801dd78:	68fb      	ldr	r3, [r7, #12]
 801dd7a:	699b      	ldr	r3, [r3, #24]
 801dd7c:	0a5b      	lsrs	r3, r3, #9
 801dd7e:	697a      	ldr	r2, [r7, #20]
 801dd80:	8952      	ldrh	r2, [r2, #10]
 801dd82:	3a01      	subs	r2, #1
 801dd84:	4013      	ands	r3, r2
 801dd86:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 801dd88:	69fb      	ldr	r3, [r7, #28]
 801dd8a:	2b00      	cmp	r3, #0
 801dd8c:	d12f      	bne.n	801ddee <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 801dd8e:	68fb      	ldr	r3, [r7, #12]
 801dd90:	699b      	ldr	r3, [r3, #24]
 801dd92:	2b00      	cmp	r3, #0
 801dd94:	d103      	bne.n	801dd9e <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 801dd96:	68fb      	ldr	r3, [r7, #12]
 801dd98:	689b      	ldr	r3, [r3, #8]
 801dd9a:	633b      	str	r3, [r7, #48]	@ 0x30
 801dd9c:	e013      	b.n	801ddc6 <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 801dd9e:	68fb      	ldr	r3, [r7, #12]
 801dda0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801dda2:	2b00      	cmp	r3, #0
 801dda4:	d007      	beq.n	801ddb6 <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 801dda6:	68fb      	ldr	r3, [r7, #12]
 801dda8:	699b      	ldr	r3, [r3, #24]
 801ddaa:	4619      	mov	r1, r3
 801ddac:	68f8      	ldr	r0, [r7, #12]
 801ddae:	f7fe fefe 	bl	801cbae <clmt_clust>
 801ddb2:	6338      	str	r0, [r7, #48]	@ 0x30
 801ddb4:	e007      	b.n	801ddc6 <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 801ddb6:	68fa      	ldr	r2, [r7, #12]
 801ddb8:	68fb      	ldr	r3, [r7, #12]
 801ddba:	69db      	ldr	r3, [r3, #28]
 801ddbc:	4619      	mov	r1, r3
 801ddbe:	4610      	mov	r0, r2
 801ddc0:	f7fe fc67 	bl	801c692 <get_fat>
 801ddc4:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 801ddc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801ddc8:	2b01      	cmp	r3, #1
 801ddca:	d804      	bhi.n	801ddd6 <f_read+0xe2>
 801ddcc:	68fb      	ldr	r3, [r7, #12]
 801ddce:	2202      	movs	r2, #2
 801ddd0:	755a      	strb	r2, [r3, #21]
 801ddd2:	2302      	movs	r3, #2
 801ddd4:	e0c9      	b.n	801df6a <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801ddd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801ddd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 801dddc:	d104      	bne.n	801dde8 <f_read+0xf4>
 801ddde:	68fb      	ldr	r3, [r7, #12]
 801dde0:	2201      	movs	r2, #1
 801dde2:	755a      	strb	r2, [r3, #21]
 801dde4:	2301      	movs	r3, #1
 801dde6:	e0c0      	b.n	801df6a <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 801dde8:	68fb      	ldr	r3, [r7, #12]
 801ddea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801ddec:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 801ddee:	697a      	ldr	r2, [r7, #20]
 801ddf0:	68fb      	ldr	r3, [r7, #12]
 801ddf2:	69db      	ldr	r3, [r3, #28]
 801ddf4:	4619      	mov	r1, r3
 801ddf6:	4610      	mov	r0, r2
 801ddf8:	f7fe fc2c 	bl	801c654 <clust2sect>
 801ddfc:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 801ddfe:	69bb      	ldr	r3, [r7, #24]
 801de00:	2b00      	cmp	r3, #0
 801de02:	d104      	bne.n	801de0e <f_read+0x11a>
 801de04:	68fb      	ldr	r3, [r7, #12]
 801de06:	2202      	movs	r2, #2
 801de08:	755a      	strb	r2, [r3, #21]
 801de0a:	2302      	movs	r3, #2
 801de0c:	e0ad      	b.n	801df6a <f_read+0x276>
			sect += csect;
 801de0e:	69ba      	ldr	r2, [r7, #24]
 801de10:	69fb      	ldr	r3, [r7, #28]
 801de12:	4413      	add	r3, r2
 801de14:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 801de16:	687b      	ldr	r3, [r7, #4]
 801de18:	0a5b      	lsrs	r3, r3, #9
 801de1a:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 801de1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801de1e:	2b00      	cmp	r3, #0
 801de20:	d039      	beq.n	801de96 <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 801de22:	69fa      	ldr	r2, [r7, #28]
 801de24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801de26:	4413      	add	r3, r2
 801de28:	697a      	ldr	r2, [r7, #20]
 801de2a:	8952      	ldrh	r2, [r2, #10]
 801de2c:	4293      	cmp	r3, r2
 801de2e:	d905      	bls.n	801de3c <f_read+0x148>
					cc = fs->csize - csect;
 801de30:	697b      	ldr	r3, [r7, #20]
 801de32:	895b      	ldrh	r3, [r3, #10]
 801de34:	461a      	mov	r2, r3
 801de36:	69fb      	ldr	r3, [r7, #28]
 801de38:	1ad3      	subs	r3, r2, r3
 801de3a:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801de3c:	697b      	ldr	r3, [r7, #20]
 801de3e:	7858      	ldrb	r0, [r3, #1]
 801de40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801de42:	69ba      	ldr	r2, [r7, #24]
 801de44:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801de46:	f7fe f85b 	bl	801bf00 <disk_read>
 801de4a:	4603      	mov	r3, r0
 801de4c:	2b00      	cmp	r3, #0
 801de4e:	d004      	beq.n	801de5a <f_read+0x166>
 801de50:	68fb      	ldr	r3, [r7, #12]
 801de52:	2201      	movs	r2, #1
 801de54:	755a      	strb	r2, [r3, #21]
 801de56:	2301      	movs	r3, #1
 801de58:	e087      	b.n	801df6a <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 801de5a:	68fb      	ldr	r3, [r7, #12]
 801de5c:	7d1b      	ldrb	r3, [r3, #20]
 801de5e:	b25b      	sxtb	r3, r3
 801de60:	2b00      	cmp	r3, #0
 801de62:	da14      	bge.n	801de8e <f_read+0x19a>
 801de64:	68fb      	ldr	r3, [r7, #12]
 801de66:	6a1a      	ldr	r2, [r3, #32]
 801de68:	69bb      	ldr	r3, [r7, #24]
 801de6a:	1ad3      	subs	r3, r2, r3
 801de6c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801de6e:	429a      	cmp	r2, r3
 801de70:	d90d      	bls.n	801de8e <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 801de72:	68fb      	ldr	r3, [r7, #12]
 801de74:	6a1a      	ldr	r2, [r3, #32]
 801de76:	69bb      	ldr	r3, [r7, #24]
 801de78:	1ad3      	subs	r3, r2, r3
 801de7a:	025b      	lsls	r3, r3, #9
 801de7c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801de7e:	18d0      	adds	r0, r2, r3
 801de80:	68fb      	ldr	r3, [r7, #12]
 801de82:	3330      	adds	r3, #48	@ 0x30
 801de84:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801de88:	4619      	mov	r1, r3
 801de8a:	f7fe f919 	bl	801c0c0 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 801de8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801de90:	025b      	lsls	r3, r3, #9
 801de92:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 801de94:	e050      	b.n	801df38 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 801de96:	68fb      	ldr	r3, [r7, #12]
 801de98:	6a1b      	ldr	r3, [r3, #32]
 801de9a:	69ba      	ldr	r2, [r7, #24]
 801de9c:	429a      	cmp	r2, r3
 801de9e:	d02e      	beq.n	801defe <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 801dea0:	68fb      	ldr	r3, [r7, #12]
 801dea2:	7d1b      	ldrb	r3, [r3, #20]
 801dea4:	b25b      	sxtb	r3, r3
 801dea6:	2b00      	cmp	r3, #0
 801dea8:	da18      	bge.n	801dedc <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801deaa:	697b      	ldr	r3, [r7, #20]
 801deac:	7858      	ldrb	r0, [r3, #1]
 801deae:	68fb      	ldr	r3, [r7, #12]
 801deb0:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801deb4:	68fb      	ldr	r3, [r7, #12]
 801deb6:	6a1a      	ldr	r2, [r3, #32]
 801deb8:	2301      	movs	r3, #1
 801deba:	f7fe f841 	bl	801bf40 <disk_write>
 801debe:	4603      	mov	r3, r0
 801dec0:	2b00      	cmp	r3, #0
 801dec2:	d004      	beq.n	801dece <f_read+0x1da>
 801dec4:	68fb      	ldr	r3, [r7, #12]
 801dec6:	2201      	movs	r2, #1
 801dec8:	755a      	strb	r2, [r3, #21]
 801deca:	2301      	movs	r3, #1
 801decc:	e04d      	b.n	801df6a <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 801dece:	68fb      	ldr	r3, [r7, #12]
 801ded0:	7d1b      	ldrb	r3, [r3, #20]
 801ded2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801ded6:	b2da      	uxtb	r2, r3
 801ded8:	68fb      	ldr	r3, [r7, #12]
 801deda:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 801dedc:	697b      	ldr	r3, [r7, #20]
 801dede:	7858      	ldrb	r0, [r3, #1]
 801dee0:	68fb      	ldr	r3, [r7, #12]
 801dee2:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801dee6:	2301      	movs	r3, #1
 801dee8:	69ba      	ldr	r2, [r7, #24]
 801deea:	f7fe f809 	bl	801bf00 <disk_read>
 801deee:	4603      	mov	r3, r0
 801def0:	2b00      	cmp	r3, #0
 801def2:	d004      	beq.n	801defe <f_read+0x20a>
 801def4:	68fb      	ldr	r3, [r7, #12]
 801def6:	2201      	movs	r2, #1
 801def8:	755a      	strb	r2, [r3, #21]
 801defa:	2301      	movs	r3, #1
 801defc:	e035      	b.n	801df6a <f_read+0x276>
			}
#endif
			fp->sect = sect;
 801defe:	68fb      	ldr	r3, [r7, #12]
 801df00:	69ba      	ldr	r2, [r7, #24]
 801df02:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 801df04:	68fb      	ldr	r3, [r7, #12]
 801df06:	699b      	ldr	r3, [r3, #24]
 801df08:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801df0c:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 801df10:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 801df12:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801df14:	687b      	ldr	r3, [r7, #4]
 801df16:	429a      	cmp	r2, r3
 801df18:	d901      	bls.n	801df1e <f_read+0x22a>
 801df1a:	687b      	ldr	r3, [r7, #4]
 801df1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 801df1e:	68fb      	ldr	r3, [r7, #12]
 801df20:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 801df24:	68fb      	ldr	r3, [r7, #12]
 801df26:	699b      	ldr	r3, [r3, #24]
 801df28:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801df2c:	4413      	add	r3, r2
 801df2e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801df30:	4619      	mov	r1, r3
 801df32:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801df34:	f7fe f8c4 	bl	801c0c0 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 801df38:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801df3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801df3c:	4413      	add	r3, r2
 801df3e:	627b      	str	r3, [r7, #36]	@ 0x24
 801df40:	68fb      	ldr	r3, [r7, #12]
 801df42:	699a      	ldr	r2, [r3, #24]
 801df44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801df46:	441a      	add	r2, r3
 801df48:	68fb      	ldr	r3, [r7, #12]
 801df4a:	619a      	str	r2, [r3, #24]
 801df4c:	683b      	ldr	r3, [r7, #0]
 801df4e:	681a      	ldr	r2, [r3, #0]
 801df50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801df52:	441a      	add	r2, r3
 801df54:	683b      	ldr	r3, [r7, #0]
 801df56:	601a      	str	r2, [r3, #0]
 801df58:	687a      	ldr	r2, [r7, #4]
 801df5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801df5c:	1ad3      	subs	r3, r2, r3
 801df5e:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 801df60:	687b      	ldr	r3, [r7, #4]
 801df62:	2b00      	cmp	r3, #0
 801df64:	f47f af01 	bne.w	801dd6a <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 801df68:	2300      	movs	r3, #0
}
 801df6a:	4618      	mov	r0, r3
 801df6c:	3738      	adds	r7, #56	@ 0x38
 801df6e:	46bd      	mov	sp, r7
 801df70:	bd80      	pop	{r7, pc}

0801df72 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 801df72:	b580      	push	{r7, lr}
 801df74:	b086      	sub	sp, #24
 801df76:	af00      	add	r7, sp, #0
 801df78:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 801df7a:	687b      	ldr	r3, [r7, #4]
 801df7c:	f107 0208 	add.w	r2, r7, #8
 801df80:	4611      	mov	r1, r2
 801df82:	4618      	mov	r0, r3
 801df84:	f7ff fc80 	bl	801d888 <validate>
 801df88:	4603      	mov	r3, r0
 801df8a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 801df8c:	7dfb      	ldrb	r3, [r7, #23]
 801df8e:	2b00      	cmp	r3, #0
 801df90:	d168      	bne.n	801e064 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 801df92:	687b      	ldr	r3, [r7, #4]
 801df94:	7d1b      	ldrb	r3, [r3, #20]
 801df96:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801df9a:	2b00      	cmp	r3, #0
 801df9c:	d062      	beq.n	801e064 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 801df9e:	687b      	ldr	r3, [r7, #4]
 801dfa0:	7d1b      	ldrb	r3, [r3, #20]
 801dfa2:	b25b      	sxtb	r3, r3
 801dfa4:	2b00      	cmp	r3, #0
 801dfa6:	da15      	bge.n	801dfd4 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 801dfa8:	68bb      	ldr	r3, [r7, #8]
 801dfaa:	7858      	ldrb	r0, [r3, #1]
 801dfac:	687b      	ldr	r3, [r7, #4]
 801dfae:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801dfb2:	687b      	ldr	r3, [r7, #4]
 801dfb4:	6a1a      	ldr	r2, [r3, #32]
 801dfb6:	2301      	movs	r3, #1
 801dfb8:	f7fd ffc2 	bl	801bf40 <disk_write>
 801dfbc:	4603      	mov	r3, r0
 801dfbe:	2b00      	cmp	r3, #0
 801dfc0:	d001      	beq.n	801dfc6 <f_sync+0x54>
 801dfc2:	2301      	movs	r3, #1
 801dfc4:	e04f      	b.n	801e066 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 801dfc6:	687b      	ldr	r3, [r7, #4]
 801dfc8:	7d1b      	ldrb	r3, [r3, #20]
 801dfca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801dfce:	b2da      	uxtb	r2, r3
 801dfd0:	687b      	ldr	r3, [r7, #4]
 801dfd2:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 801dfd4:	f7fd fcc6 	bl	801b964 <get_fattime>
 801dfd8:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 801dfda:	68ba      	ldr	r2, [r7, #8]
 801dfdc:	687b      	ldr	r3, [r7, #4]
 801dfde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801dfe0:	4619      	mov	r1, r3
 801dfe2:	4610      	mov	r0, r2
 801dfe4:	f7fe fa9a 	bl	801c51c <move_window>
 801dfe8:	4603      	mov	r3, r0
 801dfea:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 801dfec:	7dfb      	ldrb	r3, [r7, #23]
 801dfee:	2b00      	cmp	r3, #0
 801dff0:	d138      	bne.n	801e064 <f_sync+0xf2>
					dir = fp->dir_ptr;
 801dff2:	687b      	ldr	r3, [r7, #4]
 801dff4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801dff6:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 801dff8:	68fb      	ldr	r3, [r7, #12]
 801dffa:	330b      	adds	r3, #11
 801dffc:	781a      	ldrb	r2, [r3, #0]
 801dffe:	68fb      	ldr	r3, [r7, #12]
 801e000:	330b      	adds	r3, #11
 801e002:	f042 0220 	orr.w	r2, r2, #32
 801e006:	b2d2      	uxtb	r2, r2
 801e008:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 801e00a:	687b      	ldr	r3, [r7, #4]
 801e00c:	6818      	ldr	r0, [r3, #0]
 801e00e:	687b      	ldr	r3, [r7, #4]
 801e010:	689b      	ldr	r3, [r3, #8]
 801e012:	461a      	mov	r2, r3
 801e014:	68f9      	ldr	r1, [r7, #12]
 801e016:	f7fe ffa4 	bl	801cf62 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 801e01a:	68fb      	ldr	r3, [r7, #12]
 801e01c:	f103 021c 	add.w	r2, r3, #28
 801e020:	687b      	ldr	r3, [r7, #4]
 801e022:	68db      	ldr	r3, [r3, #12]
 801e024:	4619      	mov	r1, r3
 801e026:	4610      	mov	r0, r2
 801e028:	f7fe f81e 	bl	801c068 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 801e02c:	68fb      	ldr	r3, [r7, #12]
 801e02e:	3316      	adds	r3, #22
 801e030:	6939      	ldr	r1, [r7, #16]
 801e032:	4618      	mov	r0, r3
 801e034:	f7fe f818 	bl	801c068 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 801e038:	68fb      	ldr	r3, [r7, #12]
 801e03a:	3312      	adds	r3, #18
 801e03c:	2100      	movs	r1, #0
 801e03e:	4618      	mov	r0, r3
 801e040:	f7fd fff7 	bl	801c032 <st_word>
					fs->wflag = 1;
 801e044:	68bb      	ldr	r3, [r7, #8]
 801e046:	2201      	movs	r2, #1
 801e048:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 801e04a:	68bb      	ldr	r3, [r7, #8]
 801e04c:	4618      	mov	r0, r3
 801e04e:	f7fe fa93 	bl	801c578 <sync_fs>
 801e052:	4603      	mov	r3, r0
 801e054:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 801e056:	687b      	ldr	r3, [r7, #4]
 801e058:	7d1b      	ldrb	r3, [r3, #20]
 801e05a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801e05e:	b2da      	uxtb	r2, r3
 801e060:	687b      	ldr	r3, [r7, #4]
 801e062:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 801e064:	7dfb      	ldrb	r3, [r7, #23]
}
 801e066:	4618      	mov	r0, r3
 801e068:	3718      	adds	r7, #24
 801e06a:	46bd      	mov	sp, r7
 801e06c:	bd80      	pop	{r7, pc}

0801e06e <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 801e06e:	b580      	push	{r7, lr}
 801e070:	b084      	sub	sp, #16
 801e072:	af00      	add	r7, sp, #0
 801e074:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 801e076:	6878      	ldr	r0, [r7, #4]
 801e078:	f7ff ff7b 	bl	801df72 <f_sync>
 801e07c:	4603      	mov	r3, r0
 801e07e:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 801e080:	7bfb      	ldrb	r3, [r7, #15]
 801e082:	2b00      	cmp	r3, #0
 801e084:	d118      	bne.n	801e0b8 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 801e086:	687b      	ldr	r3, [r7, #4]
 801e088:	f107 0208 	add.w	r2, r7, #8
 801e08c:	4611      	mov	r1, r2
 801e08e:	4618      	mov	r0, r3
 801e090:	f7ff fbfa 	bl	801d888 <validate>
 801e094:	4603      	mov	r3, r0
 801e096:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 801e098:	7bfb      	ldrb	r3, [r7, #15]
 801e09a:	2b00      	cmp	r3, #0
 801e09c:	d10c      	bne.n	801e0b8 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 801e09e:	687b      	ldr	r3, [r7, #4]
 801e0a0:	691b      	ldr	r3, [r3, #16]
 801e0a2:	4618      	mov	r0, r3
 801e0a4:	f7fe f996 	bl	801c3d4 <dec_lock>
 801e0a8:	4603      	mov	r3, r0
 801e0aa:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 801e0ac:	7bfb      	ldrb	r3, [r7, #15]
 801e0ae:	2b00      	cmp	r3, #0
 801e0b0:	d102      	bne.n	801e0b8 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 801e0b2:	687b      	ldr	r3, [r7, #4]
 801e0b4:	2200      	movs	r2, #0
 801e0b6:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 801e0b8:	7bfb      	ldrb	r3, [r7, #15]
}
 801e0ba:	4618      	mov	r0, r3
 801e0bc:	3710      	adds	r7, #16
 801e0be:	46bd      	mov	sp, r7
 801e0c0:	bd80      	pop	{r7, pc}
	...

0801e0c4 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 801e0c4:	b480      	push	{r7}
 801e0c6:	b087      	sub	sp, #28
 801e0c8:	af00      	add	r7, sp, #0
 801e0ca:	60f8      	str	r0, [r7, #12]
 801e0cc:	60b9      	str	r1, [r7, #8]
 801e0ce:	4613      	mov	r3, r2
 801e0d0:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 801e0d2:	2301      	movs	r3, #1
 801e0d4:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 801e0d6:	2300      	movs	r3, #0
 801e0d8:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 801e0da:	4b1f      	ldr	r3, [pc, #124]	@ (801e158 <FATFS_LinkDriverEx+0x94>)
 801e0dc:	7a5b      	ldrb	r3, [r3, #9]
 801e0de:	b2db      	uxtb	r3, r3
 801e0e0:	2b00      	cmp	r3, #0
 801e0e2:	d131      	bne.n	801e148 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 801e0e4:	4b1c      	ldr	r3, [pc, #112]	@ (801e158 <FATFS_LinkDriverEx+0x94>)
 801e0e6:	7a5b      	ldrb	r3, [r3, #9]
 801e0e8:	b2db      	uxtb	r3, r3
 801e0ea:	461a      	mov	r2, r3
 801e0ec:	4b1a      	ldr	r3, [pc, #104]	@ (801e158 <FATFS_LinkDriverEx+0x94>)
 801e0ee:	2100      	movs	r1, #0
 801e0f0:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 801e0f2:	4b19      	ldr	r3, [pc, #100]	@ (801e158 <FATFS_LinkDriverEx+0x94>)
 801e0f4:	7a5b      	ldrb	r3, [r3, #9]
 801e0f6:	b2db      	uxtb	r3, r3
 801e0f8:	4a17      	ldr	r2, [pc, #92]	@ (801e158 <FATFS_LinkDriverEx+0x94>)
 801e0fa:	009b      	lsls	r3, r3, #2
 801e0fc:	4413      	add	r3, r2
 801e0fe:	68fa      	ldr	r2, [r7, #12]
 801e100:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 801e102:	4b15      	ldr	r3, [pc, #84]	@ (801e158 <FATFS_LinkDriverEx+0x94>)
 801e104:	7a5b      	ldrb	r3, [r3, #9]
 801e106:	b2db      	uxtb	r3, r3
 801e108:	461a      	mov	r2, r3
 801e10a:	4b13      	ldr	r3, [pc, #76]	@ (801e158 <FATFS_LinkDriverEx+0x94>)
 801e10c:	4413      	add	r3, r2
 801e10e:	79fa      	ldrb	r2, [r7, #7]
 801e110:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 801e112:	4b11      	ldr	r3, [pc, #68]	@ (801e158 <FATFS_LinkDriverEx+0x94>)
 801e114:	7a5b      	ldrb	r3, [r3, #9]
 801e116:	b2db      	uxtb	r3, r3
 801e118:	1c5a      	adds	r2, r3, #1
 801e11a:	b2d1      	uxtb	r1, r2
 801e11c:	4a0e      	ldr	r2, [pc, #56]	@ (801e158 <FATFS_LinkDriverEx+0x94>)
 801e11e:	7251      	strb	r1, [r2, #9]
 801e120:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 801e122:	7dbb      	ldrb	r3, [r7, #22]
 801e124:	3330      	adds	r3, #48	@ 0x30
 801e126:	b2da      	uxtb	r2, r3
 801e128:	68bb      	ldr	r3, [r7, #8]
 801e12a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 801e12c:	68bb      	ldr	r3, [r7, #8]
 801e12e:	3301      	adds	r3, #1
 801e130:	223a      	movs	r2, #58	@ 0x3a
 801e132:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 801e134:	68bb      	ldr	r3, [r7, #8]
 801e136:	3302      	adds	r3, #2
 801e138:	222f      	movs	r2, #47	@ 0x2f
 801e13a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 801e13c:	68bb      	ldr	r3, [r7, #8]
 801e13e:	3303      	adds	r3, #3
 801e140:	2200      	movs	r2, #0
 801e142:	701a      	strb	r2, [r3, #0]
    ret = 0;
 801e144:	2300      	movs	r3, #0
 801e146:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 801e148:	7dfb      	ldrb	r3, [r7, #23]
}
 801e14a:	4618      	mov	r0, r3
 801e14c:	371c      	adds	r7, #28
 801e14e:	46bd      	mov	sp, r7
 801e150:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e154:	4770      	bx	lr
 801e156:	bf00      	nop
 801e158:	24000b84 	.word	0x24000b84

0801e15c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 801e15c:	b580      	push	{r7, lr}
 801e15e:	b082      	sub	sp, #8
 801e160:	af00      	add	r7, sp, #0
 801e162:	6078      	str	r0, [r7, #4]
 801e164:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 801e166:	2200      	movs	r2, #0
 801e168:	6839      	ldr	r1, [r7, #0]
 801e16a:	6878      	ldr	r0, [r7, #4]
 801e16c:	f7ff ffaa 	bl	801e0c4 <FATFS_LinkDriverEx>
 801e170:	4603      	mov	r3, r0
}
 801e172:	4618      	mov	r0, r3
 801e174:	3708      	adds	r7, #8
 801e176:	46bd      	mov	sp, r7
 801e178:	bd80      	pop	{r7, pc}

0801e17a <_ZdlPvj>:
 801e17a:	f000 b9ca 	b.w	801e512 <_ZdlPv>

0801e17e <__cxa_guard_acquire>:
 801e17e:	6802      	ldr	r2, [r0, #0]
 801e180:	07d2      	lsls	r2, r2, #31
 801e182:	4603      	mov	r3, r0
 801e184:	d405      	bmi.n	801e192 <__cxa_guard_acquire+0x14>
 801e186:	7842      	ldrb	r2, [r0, #1]
 801e188:	b102      	cbz	r2, 801e18c <__cxa_guard_acquire+0xe>
 801e18a:	deff      	udf	#255	@ 0xff
 801e18c:	2001      	movs	r0, #1
 801e18e:	7058      	strb	r0, [r3, #1]
 801e190:	4770      	bx	lr
 801e192:	2000      	movs	r0, #0
 801e194:	4770      	bx	lr

0801e196 <__cxa_guard_release>:
 801e196:	2301      	movs	r3, #1
 801e198:	6003      	str	r3, [r0, #0]
 801e19a:	4770      	bx	lr

0801e19c <_Znwj>:
 801e19c:	2801      	cmp	r0, #1
 801e19e:	bf38      	it	cc
 801e1a0:	2001      	movcc	r0, #1
 801e1a2:	b510      	push	{r4, lr}
 801e1a4:	4604      	mov	r4, r0
 801e1a6:	4620      	mov	r0, r4
 801e1a8:	f000 f9c6 	bl	801e538 <malloc>
 801e1ac:	b100      	cbz	r0, 801e1b0 <_Znwj+0x14>
 801e1ae:	bd10      	pop	{r4, pc}
 801e1b0:	f000 f9b2 	bl	801e518 <_ZSt15get_new_handlerv>
 801e1b4:	b908      	cbnz	r0, 801e1ba <_Znwj+0x1e>
 801e1b6:	f000 f9b7 	bl	801e528 <abort>
 801e1ba:	4780      	blx	r0
 801e1bc:	e7f3      	b.n	801e1a6 <_Znwj+0xa>

0801e1be <_ZNSaIcEC1Ev>:
 801e1be:	4770      	bx	lr

0801e1c0 <_ZNSaIcED1Ev>:
 801e1c0:	4770      	bx	lr

0801e1c2 <_ZSt17__throw_bad_allocv>:
 801e1c2:	b508      	push	{r3, lr}
 801e1c4:	f000 f9b0 	bl	801e528 <abort>

0801e1c8 <_ZSt28__throw_bad_array_new_lengthv>:
 801e1c8:	b508      	push	{r3, lr}
 801e1ca:	f000 f9ad 	bl	801e528 <abort>

0801e1ce <_ZSt19__throw_logic_errorPKc>:
 801e1ce:	b508      	push	{r3, lr}
 801e1d0:	f000 f9aa 	bl	801e528 <abort>

0801e1d4 <_ZSt20__throw_length_errorPKc>:
 801e1d4:	b508      	push	{r3, lr}
 801e1d6:	f000 f9a7 	bl	801e528 <abort>

0801e1da <_ZSt25__throw_bad_function_callv>:
 801e1da:	b508      	push	{r3, lr}
 801e1dc:	f000 f9a4 	bl	801e528 <abort>

0801e1e0 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>:
 801e1e0:	b10a      	cbz	r2, 801e1e6 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0+0x6>
 801e1e2:	f000 bd98 	b.w	801ed16 <memcpy>
 801e1e6:	4770      	bx	lr

0801e1e8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEPc>:
 801e1e8:	6001      	str	r1, [r0, #0]
 801e1ea:	4770      	bx	lr

0801e1ec <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>:
 801e1ec:	6800      	ldr	r0, [r0, #0]
 801e1ee:	4770      	bx	lr

0801e1f0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_local_dataEv>:
 801e1f0:	3008      	adds	r0, #8
 801e1f2:	4770      	bx	lr

0801e1f4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_capacityEj>:
 801e1f4:	6081      	str	r1, [r0, #8]
 801e1f6:	4770      	bx	lr

0801e1f8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_set_lengthEj>:
 801e1f8:	6803      	ldr	r3, [r0, #0]
 801e1fa:	6041      	str	r1, [r0, #4]
 801e1fc:	2200      	movs	r2, #0
 801e1fe:	545a      	strb	r2, [r3, r1]
 801e200:	4770      	bx	lr

0801e202 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>:
 801e202:	f850 3b08 	ldr.w	r3, [r0], #8
 801e206:	1a1b      	subs	r3, r3, r0
 801e208:	4258      	negs	r0, r3
 801e20a:	4158      	adcs	r0, r3
 801e20c:	4770      	bx	lr
	...

0801e210 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
 801e210:	b508      	push	{r3, lr}
 801e212:	680b      	ldr	r3, [r1, #0]
 801e214:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801e218:	d302      	bcc.n	801e220 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x10>
 801e21a:	480d      	ldr	r0, [pc, #52]	@ (801e250 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x40>)
 801e21c:	f7ff ffda 	bl	801e1d4 <_ZSt20__throw_length_errorPKc>
 801e220:	4293      	cmp	r3, r2
 801e222:	d90b      	bls.n	801e23c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 801e224:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
 801e228:	ea4f 0042 	mov.w	r0, r2, lsl #1
 801e22c:	d206      	bcs.n	801e23c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 801e22e:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 801e232:	bf2a      	itet	cs
 801e234:	f06f 4340 	mvncs.w	r3, #3221225472	@ 0xc0000000
 801e238:	6008      	strcc	r0, [r1, #0]
 801e23a:	600b      	strcs	r3, [r1, #0]
 801e23c:	6808      	ldr	r0, [r1, #0]
 801e23e:	3001      	adds	r0, #1
 801e240:	d501      	bpl.n	801e246 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x36>
 801e242:	f7ff ffbe 	bl	801e1c2 <_ZSt17__throw_bad_allocv>
 801e246:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801e24a:	f7ff bfa7 	b.w	801e19c <_Znwj>
 801e24e:	bf00      	nop
 801e250:	08020770 	.word	0x08020770

0801e254 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
 801e254:	b510      	push	{r4, lr}
 801e256:	4604      	mov	r4, r0
 801e258:	f7ff ffd3 	bl	801e202 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>
 801e25c:	b920      	cbnz	r0, 801e268 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0x14>
 801e25e:	6820      	ldr	r0, [r4, #0]
 801e260:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e264:	f000 b955 	b.w	801e512 <_ZdlPv>
 801e268:	bd10      	pop	{r4, pc}

0801e26a <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>:
 801e26a:	6840      	ldr	r0, [r0, #4]
 801e26c:	f101 4180 	add.w	r1, r1, #1073741824	@ 0x40000000
 801e270:	3901      	subs	r1, #1
 801e272:	1a09      	subs	r1, r1, r0
 801e274:	4291      	cmp	r1, r2
 801e276:	b508      	push	{r3, lr}
 801e278:	d202      	bcs.n	801e280 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc+0x16>
 801e27a:	4618      	mov	r0, r3
 801e27c:	f7ff ffaa 	bl	801e1d4 <_ZSt20__throw_length_errorPKc>
 801e280:	bd08      	pop	{r3, pc}

0801e282 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>:
 801e282:	2a01      	cmp	r2, #1
 801e284:	b410      	push	{r4}
 801e286:	d104      	bne.n	801e292 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0x10>
 801e288:	780a      	ldrb	r2, [r1, #0]
 801e28a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801e28e:	7002      	strb	r2, [r0, #0]
 801e290:	4770      	bx	lr
 801e292:	f85d 4b04 	ldr.w	r4, [sp], #4
 801e296:	f7ff bfa3 	b.w	801e1e0 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>

0801e29a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>:
 801e29a:	2a01      	cmp	r2, #1
 801e29c:	b430      	push	{r4, r5}
 801e29e:	d103      	bne.n	801e2a8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj+0xe>
 801e2a0:	780b      	ldrb	r3, [r1, #0]
 801e2a2:	7003      	strb	r3, [r0, #0]
 801e2a4:	bc30      	pop	{r4, r5}
 801e2a6:	4770      	bx	lr
 801e2a8:	2a00      	cmp	r2, #0
 801e2aa:	d0fb      	beq.n	801e2a4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj+0xa>
 801e2ac:	bc30      	pop	{r4, r5}
 801e2ae:	f000 bc49 	b.w	801eb44 <memmove>

0801e2b2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_S_assignEPcjc>:
 801e2b2:	460b      	mov	r3, r1
 801e2b4:	2b01      	cmp	r3, #1
 801e2b6:	b410      	push	{r4}
 801e2b8:	4611      	mov	r1, r2
 801e2ba:	4604      	mov	r4, r0
 801e2bc:	d103      	bne.n	801e2c6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_S_assignEPcjc+0x14>
 801e2be:	7022      	strb	r2, [r4, #0]
 801e2c0:	f85d 4b04 	ldr.w	r4, [sp], #4
 801e2c4:	4770      	bx	lr
 801e2c6:	2b00      	cmp	r3, #0
 801e2c8:	d0fa      	beq.n	801e2c0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_S_assignEPcjc+0xe>
 801e2ca:	f85d 4b04 	ldr.w	r4, [sp], #4
 801e2ce:	461a      	mov	r2, r3
 801e2d0:	f000 bc52 	b.w	801eb78 <memset>

0801e2d4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>:
 801e2d4:	b508      	push	{r3, lr}
 801e2d6:	1a52      	subs	r2, r2, r1
 801e2d8:	f7ff ffd3 	bl	801e282 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 801e2dc:	bd08      	pop	{r3, pc}

0801e2de <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>:
 801e2de:	b508      	push	{r3, lr}
 801e2e0:	1a52      	subs	r2, r2, r1
 801e2e2:	f7ff ffce 	bl	801e282 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 801e2e6:	bd08      	pop	{r3, pc}

0801e2e8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>:
 801e2e8:	f100 0208 	add.w	r2, r0, #8
 801e2ec:	6002      	str	r2, [r0, #0]
 801e2ee:	2200      	movs	r2, #0
 801e2f0:	6042      	str	r2, [r0, #4]
 801e2f2:	7202      	strb	r2, [r0, #8]
 801e2f4:	4770      	bx	lr

0801e2f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>:
 801e2f6:	b510      	push	{r4, lr}
 801e2f8:	4604      	mov	r4, r0
 801e2fa:	f7ff ffab 	bl	801e254 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 801e2fe:	4620      	mov	r0, r4
 801e300:	bd10      	pop	{r4, pc}

0801e302 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>:
 801e302:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e304:	460c      	mov	r4, r1
 801e306:	4605      	mov	r5, r0
 801e308:	f7ff ff7b 	bl	801e202 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>
 801e30c:	4606      	mov	r6, r0
 801e30e:	4620      	mov	r0, r4
 801e310:	f7ff ff77 	bl	801e202 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>
 801e314:	b190      	cbz	r0, 801e33c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x3a>
 801e316:	42a5      	cmp	r5, r4
 801e318:	d00a      	beq.n	801e330 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x2e>
 801e31a:	6862      	ldr	r2, [r4, #4]
 801e31c:	b11a      	cbz	r2, 801e326 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x24>
 801e31e:	6821      	ldr	r1, [r4, #0]
 801e320:	6828      	ldr	r0, [r5, #0]
 801e322:	f7ff ffae 	bl	801e282 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 801e326:	6863      	ldr	r3, [r4, #4]
 801e328:	682a      	ldr	r2, [r5, #0]
 801e32a:	606b      	str	r3, [r5, #4]
 801e32c:	2100      	movs	r1, #0
 801e32e:	54d1      	strb	r1, [r2, r3]
 801e330:	6822      	ldr	r2, [r4, #0]
 801e332:	2300      	movs	r3, #0
 801e334:	6063      	str	r3, [r4, #4]
 801e336:	7013      	strb	r3, [r2, #0]
 801e338:	4628      	mov	r0, r5
 801e33a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801e33c:	b90e      	cbnz	r6, 801e342 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x40>
 801e33e:	6828      	ldr	r0, [r5, #0]
 801e340:	68af      	ldr	r7, [r5, #8]
 801e342:	6823      	ldr	r3, [r4, #0]
 801e344:	602b      	str	r3, [r5, #0]
 801e346:	6863      	ldr	r3, [r4, #4]
 801e348:	606b      	str	r3, [r5, #4]
 801e34a:	68a3      	ldr	r3, [r4, #8]
 801e34c:	60ab      	str	r3, [r5, #8]
 801e34e:	b110      	cbz	r0, 801e356 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x54>
 801e350:	6020      	str	r0, [r4, #0]
 801e352:	60a7      	str	r7, [r4, #8]
 801e354:	e7ec      	b.n	801e330 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x2e>
 801e356:	f104 0308 	add.w	r3, r4, #8
 801e35a:	6023      	str	r3, [r4, #0]
 801e35c:	e7e8      	b.n	801e330 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x2e>

0801e35e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv>:
 801e35e:	b510      	push	{r4, lr}
 801e360:	4604      	mov	r4, r0
 801e362:	f7ff ff4e 	bl	801e202 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>
 801e366:	b908      	cbnz	r0, 801e36c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv+0xe>
 801e368:	68a0      	ldr	r0, [r4, #8]
 801e36a:	bd10      	pop	{r4, pc}
 801e36c:	200f      	movs	r0, #15
 801e36e:	e7fc      	b.n	801e36a <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv+0xc>

0801e370 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>:
 801e370:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 801e374:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 801e376:	461f      	mov	r7, r3
 801e378:	6843      	ldr	r3, [r0, #4]
 801e37a:	eb01 0802 	add.w	r8, r1, r2
 801e37e:	1ab2      	subs	r2, r6, r2
 801e380:	441a      	add	r2, r3
 801e382:	4604      	mov	r4, r0
 801e384:	460d      	mov	r5, r1
 801e386:	eba3 0908 	sub.w	r9, r3, r8
 801e38a:	9201      	str	r2, [sp, #4]
 801e38c:	f7ff ffe7 	bl	801e35e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv>
 801e390:	a901      	add	r1, sp, #4
 801e392:	4602      	mov	r2, r0
 801e394:	4620      	mov	r0, r4
 801e396:	f7ff ff3b 	bl	801e210 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 801e39a:	4682      	mov	sl, r0
 801e39c:	b11d      	cbz	r5, 801e3a6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x36>
 801e39e:	6821      	ldr	r1, [r4, #0]
 801e3a0:	462a      	mov	r2, r5
 801e3a2:	f7ff ff6e 	bl	801e282 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 801e3a6:	b137      	cbz	r7, 801e3b6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x46>
 801e3a8:	b12e      	cbz	r6, 801e3b6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x46>
 801e3aa:	4632      	mov	r2, r6
 801e3ac:	4639      	mov	r1, r7
 801e3ae:	eb0a 0005 	add.w	r0, sl, r5
 801e3b2:	f7ff ff66 	bl	801e282 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 801e3b6:	f1b9 0f00 	cmp.w	r9, #0
 801e3ba:	d007      	beq.n	801e3cc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x5c>
 801e3bc:	6821      	ldr	r1, [r4, #0]
 801e3be:	4435      	add	r5, r6
 801e3c0:	464a      	mov	r2, r9
 801e3c2:	4441      	add	r1, r8
 801e3c4:	eb0a 0005 	add.w	r0, sl, r5
 801e3c8:	f7ff ff5b 	bl	801e282 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 801e3cc:	4620      	mov	r0, r4
 801e3ce:	f7ff ff41 	bl	801e254 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 801e3d2:	9b01      	ldr	r3, [sp, #4]
 801e3d4:	f8c4 a000 	str.w	sl, [r4]
 801e3d8:	60a3      	str	r3, [r4, #8]
 801e3da:	b002      	add	sp, #8
 801e3dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0801e3e0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7reserveEj>:
 801e3e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801e3e2:	4604      	mov	r4, r0
 801e3e4:	9101      	str	r1, [sp, #4]
 801e3e6:	f7ff ffba 	bl	801e35e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv>
 801e3ea:	9b01      	ldr	r3, [sp, #4]
 801e3ec:	4283      	cmp	r3, r0
 801e3ee:	4602      	mov	r2, r0
 801e3f0:	d90f      	bls.n	801e412 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7reserveEj+0x32>
 801e3f2:	a901      	add	r1, sp, #4
 801e3f4:	4620      	mov	r0, r4
 801e3f6:	f7ff ff0b 	bl	801e210 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 801e3fa:	6862      	ldr	r2, [r4, #4]
 801e3fc:	6821      	ldr	r1, [r4, #0]
 801e3fe:	3201      	adds	r2, #1
 801e400:	4605      	mov	r5, r0
 801e402:	f7ff ff3e 	bl	801e282 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 801e406:	4620      	mov	r0, r4
 801e408:	f7ff ff24 	bl	801e254 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 801e40c:	9b01      	ldr	r3, [sp, #4]
 801e40e:	6025      	str	r5, [r4, #0]
 801e410:	60a3      	str	r3, [r4, #8]
 801e412:	b003      	add	sp, #12
 801e414:	bd30      	pop	{r4, r5, pc}

0801e416 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5clearEv>:
 801e416:	6802      	ldr	r2, [r0, #0]
 801e418:	2300      	movs	r3, #0
 801e41a:	6043      	str	r3, [r0, #4]
 801e41c:	7013      	strb	r3, [r2, #0]
 801e41e:	4770      	bx	lr

0801e420 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>:
 801e420:	6800      	ldr	r0, [r0, #0]
 801e422:	4408      	add	r0, r1
 801e424:	4770      	bx	lr
	...

0801e428 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc>:
 801e428:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801e42c:	4616      	mov	r6, r2
 801e42e:	461d      	mov	r5, r3
 801e430:	4604      	mov	r4, r0
 801e432:	4b1b      	ldr	r3, [pc, #108]	@ (801e4a0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc+0x78>)
 801e434:	462a      	mov	r2, r5
 801e436:	460f      	mov	r7, r1
 801e438:	4631      	mov	r1, r6
 801e43a:	f7ff ff16 	bl	801e26a <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>
 801e43e:	4620      	mov	r0, r4
 801e440:	f7ff ff8d 	bl	801e35e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv>
 801e444:	f8d4 9004 	ldr.w	r9, [r4, #4]
 801e448:	eba5 0806 	sub.w	r8, r5, r6
 801e44c:	44c8      	add	r8, r9
 801e44e:	4540      	cmp	r0, r8
 801e450:	d31d      	bcc.n	801e48e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc+0x66>
 801e452:	19f3      	adds	r3, r6, r7
 801e454:	ebb9 0203 	subs.w	r2, r9, r3
 801e458:	d007      	beq.n	801e46a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc+0x42>
 801e45a:	42ae      	cmp	r6, r5
 801e45c:	d005      	beq.n	801e46a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc+0x42>
 801e45e:	6820      	ldr	r0, [r4, #0]
 801e460:	4438      	add	r0, r7
 801e462:	1981      	adds	r1, r0, r6
 801e464:	4428      	add	r0, r5
 801e466:	f7ff ff18 	bl	801e29a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 801e46a:	b135      	cbz	r5, 801e47a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc+0x52>
 801e46c:	6820      	ldr	r0, [r4, #0]
 801e46e:	f89d 2028 	ldrb.w	r2, [sp, #40]	@ 0x28
 801e472:	4629      	mov	r1, r5
 801e474:	4438      	add	r0, r7
 801e476:	f7ff ff1c 	bl	801e2b2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_S_assignEPcjc>
 801e47a:	6823      	ldr	r3, [r4, #0]
 801e47c:	f8c4 8004 	str.w	r8, [r4, #4]
 801e480:	2200      	movs	r2, #0
 801e482:	4620      	mov	r0, r4
 801e484:	f803 2008 	strb.w	r2, [r3, r8]
 801e488:	b003      	add	sp, #12
 801e48a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801e48e:	9500      	str	r5, [sp, #0]
 801e490:	2300      	movs	r3, #0
 801e492:	4632      	mov	r2, r6
 801e494:	4639      	mov	r1, r7
 801e496:	4620      	mov	r0, r4
 801e498:	f7ff ff6a 	bl	801e370 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>
 801e49c:	e7e5      	b.n	801e46a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc+0x42>
 801e49e:	bf00      	nop
 801e4a0:	08020788 	.word	0x08020788

0801e4a4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEjc>:
 801e4a4:	b507      	push	{r0, r1, r2, lr}
 801e4a6:	9200      	str	r2, [sp, #0]
 801e4a8:	460b      	mov	r3, r1
 801e4aa:	2200      	movs	r2, #0
 801e4ac:	6841      	ldr	r1, [r0, #4]
 801e4ae:	f7ff ffbb 	bl	801e428 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc>
 801e4b2:	b003      	add	sp, #12
 801e4b4:	f85d fb04 	ldr.w	pc, [sp], #4

0801e4b8 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>:
 801e4b8:	6800      	ldr	r0, [r0, #0]
 801e4ba:	4770      	bx	lr

0801e4bc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderC1EPcRKS3_>:
 801e4bc:	6001      	str	r1, [r0, #0]
 801e4be:	4770      	bx	lr

0801e4c0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>:
 801e4c0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801e4c2:	1a53      	subs	r3, r2, r1
 801e4c4:	2b0f      	cmp	r3, #15
 801e4c6:	4604      	mov	r4, r0
 801e4c8:	460d      	mov	r5, r1
 801e4ca:	4616      	mov	r6, r2
 801e4cc:	9301      	str	r3, [sp, #4]
 801e4ce:	d906      	bls.n	801e4de <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x1e>
 801e4d0:	2200      	movs	r2, #0
 801e4d2:	a901      	add	r1, sp, #4
 801e4d4:	f7ff fe9c 	bl	801e210 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 801e4d8:	9b01      	ldr	r3, [sp, #4]
 801e4da:	6020      	str	r0, [r4, #0]
 801e4dc:	60a3      	str	r3, [r4, #8]
 801e4de:	4632      	mov	r2, r6
 801e4e0:	4629      	mov	r1, r5
 801e4e2:	6820      	ldr	r0, [r4, #0]
 801e4e4:	f7ff fef6 	bl	801e2d4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>
 801e4e8:	9b01      	ldr	r3, [sp, #4]
 801e4ea:	6822      	ldr	r2, [r4, #0]
 801e4ec:	6063      	str	r3, [r4, #4]
 801e4ee:	2100      	movs	r1, #0
 801e4f0:	54d1      	strb	r1, [r2, r3]
 801e4f2:	b002      	add	sp, #8
 801e4f4:	bd70      	pop	{r4, r5, r6, pc}

0801e4f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>:
 801e4f6:	f100 0208 	add.w	r2, r0, #8
 801e4fa:	b510      	push	{r4, lr}
 801e4fc:	6002      	str	r2, [r0, #0]
 801e4fe:	e9d1 1200 	ldrd	r1, r2, [r1]
 801e502:	4604      	mov	r4, r0
 801e504:	f04f 0300 	mov.w	r3, #0
 801e508:	440a      	add	r2, r1
 801e50a:	f7ff ffd9 	bl	801e4c0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>
 801e50e:	4620      	mov	r0, r4
 801e510:	bd10      	pop	{r4, pc}

0801e512 <_ZdlPv>:
 801e512:	f000 b819 	b.w	801e548 <free>
	...

0801e518 <_ZSt15get_new_handlerv>:
 801e518:	4b02      	ldr	r3, [pc, #8]	@ (801e524 <_ZSt15get_new_handlerv+0xc>)
 801e51a:	6818      	ldr	r0, [r3, #0]
 801e51c:	f3bf 8f5b 	dmb	ish
 801e520:	4770      	bx	lr
 801e522:	bf00      	nop
 801e524:	24000b90 	.word	0x24000b90

0801e528 <abort>:
 801e528:	b508      	push	{r3, lr}
 801e52a:	2006      	movs	r0, #6
 801e52c:	f000 fb54 	bl	801ebd8 <raise>
 801e530:	2001      	movs	r0, #1
 801e532:	f7ed fc35 	bl	800bda0 <_exit>
	...

0801e538 <malloc>:
 801e538:	4b02      	ldr	r3, [pc, #8]	@ (801e544 <malloc+0xc>)
 801e53a:	4601      	mov	r1, r0
 801e53c:	6818      	ldr	r0, [r3, #0]
 801e53e:	f000 b82d 	b.w	801e59c <_malloc_r>
 801e542:	bf00      	nop
 801e544:	2400004c 	.word	0x2400004c

0801e548 <free>:
 801e548:	4b02      	ldr	r3, [pc, #8]	@ (801e554 <free+0xc>)
 801e54a:	4601      	mov	r1, r0
 801e54c:	6818      	ldr	r0, [r3, #0]
 801e54e:	f000 bbf1 	b.w	801ed34 <_free_r>
 801e552:	bf00      	nop
 801e554:	2400004c 	.word	0x2400004c

0801e558 <sbrk_aligned>:
 801e558:	b570      	push	{r4, r5, r6, lr}
 801e55a:	4e0f      	ldr	r6, [pc, #60]	@ (801e598 <sbrk_aligned+0x40>)
 801e55c:	460c      	mov	r4, r1
 801e55e:	6831      	ldr	r1, [r6, #0]
 801e560:	4605      	mov	r5, r0
 801e562:	b911      	cbnz	r1, 801e56a <sbrk_aligned+0x12>
 801e564:	f000 fb88 	bl	801ec78 <_sbrk_r>
 801e568:	6030      	str	r0, [r6, #0]
 801e56a:	4621      	mov	r1, r4
 801e56c:	4628      	mov	r0, r5
 801e56e:	f000 fb83 	bl	801ec78 <_sbrk_r>
 801e572:	1c43      	adds	r3, r0, #1
 801e574:	d103      	bne.n	801e57e <sbrk_aligned+0x26>
 801e576:	f04f 34ff 	mov.w	r4, #4294967295
 801e57a:	4620      	mov	r0, r4
 801e57c:	bd70      	pop	{r4, r5, r6, pc}
 801e57e:	1cc4      	adds	r4, r0, #3
 801e580:	f024 0403 	bic.w	r4, r4, #3
 801e584:	42a0      	cmp	r0, r4
 801e586:	d0f8      	beq.n	801e57a <sbrk_aligned+0x22>
 801e588:	1a21      	subs	r1, r4, r0
 801e58a:	4628      	mov	r0, r5
 801e58c:	f000 fb74 	bl	801ec78 <_sbrk_r>
 801e590:	3001      	adds	r0, #1
 801e592:	d1f2      	bne.n	801e57a <sbrk_aligned+0x22>
 801e594:	e7ef      	b.n	801e576 <sbrk_aligned+0x1e>
 801e596:	bf00      	nop
 801e598:	24000b94 	.word	0x24000b94

0801e59c <_malloc_r>:
 801e59c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801e5a0:	1ccd      	adds	r5, r1, #3
 801e5a2:	f025 0503 	bic.w	r5, r5, #3
 801e5a6:	3508      	adds	r5, #8
 801e5a8:	2d0c      	cmp	r5, #12
 801e5aa:	bf38      	it	cc
 801e5ac:	250c      	movcc	r5, #12
 801e5ae:	2d00      	cmp	r5, #0
 801e5b0:	4606      	mov	r6, r0
 801e5b2:	db01      	blt.n	801e5b8 <_malloc_r+0x1c>
 801e5b4:	42a9      	cmp	r1, r5
 801e5b6:	d904      	bls.n	801e5c2 <_malloc_r+0x26>
 801e5b8:	230c      	movs	r3, #12
 801e5ba:	6033      	str	r3, [r6, #0]
 801e5bc:	2000      	movs	r0, #0
 801e5be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801e5c2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 801e698 <_malloc_r+0xfc>
 801e5c6:	f000 f869 	bl	801e69c <__malloc_lock>
 801e5ca:	f8d8 3000 	ldr.w	r3, [r8]
 801e5ce:	461c      	mov	r4, r3
 801e5d0:	bb44      	cbnz	r4, 801e624 <_malloc_r+0x88>
 801e5d2:	4629      	mov	r1, r5
 801e5d4:	4630      	mov	r0, r6
 801e5d6:	f7ff ffbf 	bl	801e558 <sbrk_aligned>
 801e5da:	1c43      	adds	r3, r0, #1
 801e5dc:	4604      	mov	r4, r0
 801e5de:	d158      	bne.n	801e692 <_malloc_r+0xf6>
 801e5e0:	f8d8 4000 	ldr.w	r4, [r8]
 801e5e4:	4627      	mov	r7, r4
 801e5e6:	2f00      	cmp	r7, #0
 801e5e8:	d143      	bne.n	801e672 <_malloc_r+0xd6>
 801e5ea:	2c00      	cmp	r4, #0
 801e5ec:	d04b      	beq.n	801e686 <_malloc_r+0xea>
 801e5ee:	6823      	ldr	r3, [r4, #0]
 801e5f0:	4639      	mov	r1, r7
 801e5f2:	4630      	mov	r0, r6
 801e5f4:	eb04 0903 	add.w	r9, r4, r3
 801e5f8:	f000 fb3e 	bl	801ec78 <_sbrk_r>
 801e5fc:	4581      	cmp	r9, r0
 801e5fe:	d142      	bne.n	801e686 <_malloc_r+0xea>
 801e600:	6821      	ldr	r1, [r4, #0]
 801e602:	1a6d      	subs	r5, r5, r1
 801e604:	4629      	mov	r1, r5
 801e606:	4630      	mov	r0, r6
 801e608:	f7ff ffa6 	bl	801e558 <sbrk_aligned>
 801e60c:	3001      	adds	r0, #1
 801e60e:	d03a      	beq.n	801e686 <_malloc_r+0xea>
 801e610:	6823      	ldr	r3, [r4, #0]
 801e612:	442b      	add	r3, r5
 801e614:	6023      	str	r3, [r4, #0]
 801e616:	f8d8 3000 	ldr.w	r3, [r8]
 801e61a:	685a      	ldr	r2, [r3, #4]
 801e61c:	bb62      	cbnz	r2, 801e678 <_malloc_r+0xdc>
 801e61e:	f8c8 7000 	str.w	r7, [r8]
 801e622:	e00f      	b.n	801e644 <_malloc_r+0xa8>
 801e624:	6822      	ldr	r2, [r4, #0]
 801e626:	1b52      	subs	r2, r2, r5
 801e628:	d420      	bmi.n	801e66c <_malloc_r+0xd0>
 801e62a:	2a0b      	cmp	r2, #11
 801e62c:	d917      	bls.n	801e65e <_malloc_r+0xc2>
 801e62e:	1961      	adds	r1, r4, r5
 801e630:	42a3      	cmp	r3, r4
 801e632:	6025      	str	r5, [r4, #0]
 801e634:	bf18      	it	ne
 801e636:	6059      	strne	r1, [r3, #4]
 801e638:	6863      	ldr	r3, [r4, #4]
 801e63a:	bf08      	it	eq
 801e63c:	f8c8 1000 	streq.w	r1, [r8]
 801e640:	5162      	str	r2, [r4, r5]
 801e642:	604b      	str	r3, [r1, #4]
 801e644:	4630      	mov	r0, r6
 801e646:	f000 f82f 	bl	801e6a8 <__malloc_unlock>
 801e64a:	f104 000b 	add.w	r0, r4, #11
 801e64e:	1d23      	adds	r3, r4, #4
 801e650:	f020 0007 	bic.w	r0, r0, #7
 801e654:	1ac2      	subs	r2, r0, r3
 801e656:	bf1c      	itt	ne
 801e658:	1a1b      	subne	r3, r3, r0
 801e65a:	50a3      	strne	r3, [r4, r2]
 801e65c:	e7af      	b.n	801e5be <_malloc_r+0x22>
 801e65e:	6862      	ldr	r2, [r4, #4]
 801e660:	42a3      	cmp	r3, r4
 801e662:	bf0c      	ite	eq
 801e664:	f8c8 2000 	streq.w	r2, [r8]
 801e668:	605a      	strne	r2, [r3, #4]
 801e66a:	e7eb      	b.n	801e644 <_malloc_r+0xa8>
 801e66c:	4623      	mov	r3, r4
 801e66e:	6864      	ldr	r4, [r4, #4]
 801e670:	e7ae      	b.n	801e5d0 <_malloc_r+0x34>
 801e672:	463c      	mov	r4, r7
 801e674:	687f      	ldr	r7, [r7, #4]
 801e676:	e7b6      	b.n	801e5e6 <_malloc_r+0x4a>
 801e678:	461a      	mov	r2, r3
 801e67a:	685b      	ldr	r3, [r3, #4]
 801e67c:	42a3      	cmp	r3, r4
 801e67e:	d1fb      	bne.n	801e678 <_malloc_r+0xdc>
 801e680:	2300      	movs	r3, #0
 801e682:	6053      	str	r3, [r2, #4]
 801e684:	e7de      	b.n	801e644 <_malloc_r+0xa8>
 801e686:	230c      	movs	r3, #12
 801e688:	6033      	str	r3, [r6, #0]
 801e68a:	4630      	mov	r0, r6
 801e68c:	f000 f80c 	bl	801e6a8 <__malloc_unlock>
 801e690:	e794      	b.n	801e5bc <_malloc_r+0x20>
 801e692:	6005      	str	r5, [r0, #0]
 801e694:	e7d6      	b.n	801e644 <_malloc_r+0xa8>
 801e696:	bf00      	nop
 801e698:	24000b98 	.word	0x24000b98

0801e69c <__malloc_lock>:
 801e69c:	4801      	ldr	r0, [pc, #4]	@ (801e6a4 <__malloc_lock+0x8>)
 801e69e:	f000 bb38 	b.w	801ed12 <__retarget_lock_acquire_recursive>
 801e6a2:	bf00      	nop
 801e6a4:	24000cdc 	.word	0x24000cdc

0801e6a8 <__malloc_unlock>:
 801e6a8:	4801      	ldr	r0, [pc, #4]	@ (801e6b0 <__malloc_unlock+0x8>)
 801e6aa:	f000 bb33 	b.w	801ed14 <__retarget_lock_release_recursive>
 801e6ae:	bf00      	nop
 801e6b0:	24000cdc 	.word	0x24000cdc

0801e6b4 <realloc>:
 801e6b4:	4b02      	ldr	r3, [pc, #8]	@ (801e6c0 <realloc+0xc>)
 801e6b6:	460a      	mov	r2, r1
 801e6b8:	4601      	mov	r1, r0
 801e6ba:	6818      	ldr	r0, [r3, #0]
 801e6bc:	f000 b802 	b.w	801e6c4 <_realloc_r>
 801e6c0:	2400004c 	.word	0x2400004c

0801e6c4 <_realloc_r>:
 801e6c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e6c8:	4680      	mov	r8, r0
 801e6ca:	4615      	mov	r5, r2
 801e6cc:	460c      	mov	r4, r1
 801e6ce:	b921      	cbnz	r1, 801e6da <_realloc_r+0x16>
 801e6d0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801e6d4:	4611      	mov	r1, r2
 801e6d6:	f7ff bf61 	b.w	801e59c <_malloc_r>
 801e6da:	b92a      	cbnz	r2, 801e6e8 <_realloc_r+0x24>
 801e6dc:	f000 fb2a 	bl	801ed34 <_free_r>
 801e6e0:	2400      	movs	r4, #0
 801e6e2:	4620      	mov	r0, r4
 801e6e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e6e8:	f000 fb6e 	bl	801edc8 <_malloc_usable_size_r>
 801e6ec:	4285      	cmp	r5, r0
 801e6ee:	4606      	mov	r6, r0
 801e6f0:	d802      	bhi.n	801e6f8 <_realloc_r+0x34>
 801e6f2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 801e6f6:	d8f4      	bhi.n	801e6e2 <_realloc_r+0x1e>
 801e6f8:	4629      	mov	r1, r5
 801e6fa:	4640      	mov	r0, r8
 801e6fc:	f7ff ff4e 	bl	801e59c <_malloc_r>
 801e700:	4607      	mov	r7, r0
 801e702:	2800      	cmp	r0, #0
 801e704:	d0ec      	beq.n	801e6e0 <_realloc_r+0x1c>
 801e706:	42b5      	cmp	r5, r6
 801e708:	462a      	mov	r2, r5
 801e70a:	4621      	mov	r1, r4
 801e70c:	bf28      	it	cs
 801e70e:	4632      	movcs	r2, r6
 801e710:	f000 fb01 	bl	801ed16 <memcpy>
 801e714:	4621      	mov	r1, r4
 801e716:	4640      	mov	r0, r8
 801e718:	f000 fb0c 	bl	801ed34 <_free_r>
 801e71c:	463c      	mov	r4, r7
 801e71e:	e7e0      	b.n	801e6e2 <_realloc_r+0x1e>

0801e720 <std>:
 801e720:	2300      	movs	r3, #0
 801e722:	b510      	push	{r4, lr}
 801e724:	4604      	mov	r4, r0
 801e726:	e9c0 3300 	strd	r3, r3, [r0]
 801e72a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801e72e:	6083      	str	r3, [r0, #8]
 801e730:	8181      	strh	r1, [r0, #12]
 801e732:	6643      	str	r3, [r0, #100]	@ 0x64
 801e734:	81c2      	strh	r2, [r0, #14]
 801e736:	6183      	str	r3, [r0, #24]
 801e738:	4619      	mov	r1, r3
 801e73a:	2208      	movs	r2, #8
 801e73c:	305c      	adds	r0, #92	@ 0x5c
 801e73e:	f000 fa1b 	bl	801eb78 <memset>
 801e742:	4b0d      	ldr	r3, [pc, #52]	@ (801e778 <std+0x58>)
 801e744:	6263      	str	r3, [r4, #36]	@ 0x24
 801e746:	4b0d      	ldr	r3, [pc, #52]	@ (801e77c <std+0x5c>)
 801e748:	62a3      	str	r3, [r4, #40]	@ 0x28
 801e74a:	4b0d      	ldr	r3, [pc, #52]	@ (801e780 <std+0x60>)
 801e74c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801e74e:	4b0d      	ldr	r3, [pc, #52]	@ (801e784 <std+0x64>)
 801e750:	6323      	str	r3, [r4, #48]	@ 0x30
 801e752:	4b0d      	ldr	r3, [pc, #52]	@ (801e788 <std+0x68>)
 801e754:	6224      	str	r4, [r4, #32]
 801e756:	429c      	cmp	r4, r3
 801e758:	d006      	beq.n	801e768 <std+0x48>
 801e75a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801e75e:	4294      	cmp	r4, r2
 801e760:	d002      	beq.n	801e768 <std+0x48>
 801e762:	33d0      	adds	r3, #208	@ 0xd0
 801e764:	429c      	cmp	r4, r3
 801e766:	d105      	bne.n	801e774 <std+0x54>
 801e768:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801e76c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e770:	f000 bace 	b.w	801ed10 <__retarget_lock_init_recursive>
 801e774:	bd10      	pop	{r4, pc}
 801e776:	bf00      	nop
 801e778:	0801e995 	.word	0x0801e995
 801e77c:	0801e9b7 	.word	0x0801e9b7
 801e780:	0801e9ef 	.word	0x0801e9ef
 801e784:	0801ea13 	.word	0x0801ea13
 801e788:	24000b9c 	.word	0x24000b9c

0801e78c <stdio_exit_handler>:
 801e78c:	4a02      	ldr	r2, [pc, #8]	@ (801e798 <stdio_exit_handler+0xc>)
 801e78e:	4903      	ldr	r1, [pc, #12]	@ (801e79c <stdio_exit_handler+0x10>)
 801e790:	4803      	ldr	r0, [pc, #12]	@ (801e7a0 <stdio_exit_handler+0x14>)
 801e792:	f000 b869 	b.w	801e868 <_fwalk_sglue>
 801e796:	bf00      	nop
 801e798:	24000040 	.word	0x24000040
 801e79c:	0801f481 	.word	0x0801f481
 801e7a0:	24000050 	.word	0x24000050

0801e7a4 <cleanup_stdio>:
 801e7a4:	6841      	ldr	r1, [r0, #4]
 801e7a6:	4b0c      	ldr	r3, [pc, #48]	@ (801e7d8 <cleanup_stdio+0x34>)
 801e7a8:	4299      	cmp	r1, r3
 801e7aa:	b510      	push	{r4, lr}
 801e7ac:	4604      	mov	r4, r0
 801e7ae:	d001      	beq.n	801e7b4 <cleanup_stdio+0x10>
 801e7b0:	f000 fe66 	bl	801f480 <_fflush_r>
 801e7b4:	68a1      	ldr	r1, [r4, #8]
 801e7b6:	4b09      	ldr	r3, [pc, #36]	@ (801e7dc <cleanup_stdio+0x38>)
 801e7b8:	4299      	cmp	r1, r3
 801e7ba:	d002      	beq.n	801e7c2 <cleanup_stdio+0x1e>
 801e7bc:	4620      	mov	r0, r4
 801e7be:	f000 fe5f 	bl	801f480 <_fflush_r>
 801e7c2:	68e1      	ldr	r1, [r4, #12]
 801e7c4:	4b06      	ldr	r3, [pc, #24]	@ (801e7e0 <cleanup_stdio+0x3c>)
 801e7c6:	4299      	cmp	r1, r3
 801e7c8:	d004      	beq.n	801e7d4 <cleanup_stdio+0x30>
 801e7ca:	4620      	mov	r0, r4
 801e7cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e7d0:	f000 be56 	b.w	801f480 <_fflush_r>
 801e7d4:	bd10      	pop	{r4, pc}
 801e7d6:	bf00      	nop
 801e7d8:	24000b9c 	.word	0x24000b9c
 801e7dc:	24000c04 	.word	0x24000c04
 801e7e0:	24000c6c 	.word	0x24000c6c

0801e7e4 <global_stdio_init.part.0>:
 801e7e4:	b510      	push	{r4, lr}
 801e7e6:	4b0b      	ldr	r3, [pc, #44]	@ (801e814 <global_stdio_init.part.0+0x30>)
 801e7e8:	4c0b      	ldr	r4, [pc, #44]	@ (801e818 <global_stdio_init.part.0+0x34>)
 801e7ea:	4a0c      	ldr	r2, [pc, #48]	@ (801e81c <global_stdio_init.part.0+0x38>)
 801e7ec:	601a      	str	r2, [r3, #0]
 801e7ee:	4620      	mov	r0, r4
 801e7f0:	2200      	movs	r2, #0
 801e7f2:	2104      	movs	r1, #4
 801e7f4:	f7ff ff94 	bl	801e720 <std>
 801e7f8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 801e7fc:	2201      	movs	r2, #1
 801e7fe:	2109      	movs	r1, #9
 801e800:	f7ff ff8e 	bl	801e720 <std>
 801e804:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 801e808:	2202      	movs	r2, #2
 801e80a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e80e:	2112      	movs	r1, #18
 801e810:	f7ff bf86 	b.w	801e720 <std>
 801e814:	24000cd4 	.word	0x24000cd4
 801e818:	24000b9c 	.word	0x24000b9c
 801e81c:	0801e78d 	.word	0x0801e78d

0801e820 <__sfp_lock_acquire>:
 801e820:	4801      	ldr	r0, [pc, #4]	@ (801e828 <__sfp_lock_acquire+0x8>)
 801e822:	f000 ba76 	b.w	801ed12 <__retarget_lock_acquire_recursive>
 801e826:	bf00      	nop
 801e828:	24000cdd 	.word	0x24000cdd

0801e82c <__sfp_lock_release>:
 801e82c:	4801      	ldr	r0, [pc, #4]	@ (801e834 <__sfp_lock_release+0x8>)
 801e82e:	f000 ba71 	b.w	801ed14 <__retarget_lock_release_recursive>
 801e832:	bf00      	nop
 801e834:	24000cdd 	.word	0x24000cdd

0801e838 <__sinit>:
 801e838:	b510      	push	{r4, lr}
 801e83a:	4604      	mov	r4, r0
 801e83c:	f7ff fff0 	bl	801e820 <__sfp_lock_acquire>
 801e840:	6a23      	ldr	r3, [r4, #32]
 801e842:	b11b      	cbz	r3, 801e84c <__sinit+0x14>
 801e844:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e848:	f7ff bff0 	b.w	801e82c <__sfp_lock_release>
 801e84c:	4b04      	ldr	r3, [pc, #16]	@ (801e860 <__sinit+0x28>)
 801e84e:	6223      	str	r3, [r4, #32]
 801e850:	4b04      	ldr	r3, [pc, #16]	@ (801e864 <__sinit+0x2c>)
 801e852:	681b      	ldr	r3, [r3, #0]
 801e854:	2b00      	cmp	r3, #0
 801e856:	d1f5      	bne.n	801e844 <__sinit+0xc>
 801e858:	f7ff ffc4 	bl	801e7e4 <global_stdio_init.part.0>
 801e85c:	e7f2      	b.n	801e844 <__sinit+0xc>
 801e85e:	bf00      	nop
 801e860:	0801e7a5 	.word	0x0801e7a5
 801e864:	24000cd4 	.word	0x24000cd4

0801e868 <_fwalk_sglue>:
 801e868:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801e86c:	4607      	mov	r7, r0
 801e86e:	4688      	mov	r8, r1
 801e870:	4614      	mov	r4, r2
 801e872:	2600      	movs	r6, #0
 801e874:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801e878:	f1b9 0901 	subs.w	r9, r9, #1
 801e87c:	d505      	bpl.n	801e88a <_fwalk_sglue+0x22>
 801e87e:	6824      	ldr	r4, [r4, #0]
 801e880:	2c00      	cmp	r4, #0
 801e882:	d1f7      	bne.n	801e874 <_fwalk_sglue+0xc>
 801e884:	4630      	mov	r0, r6
 801e886:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801e88a:	89ab      	ldrh	r3, [r5, #12]
 801e88c:	2b01      	cmp	r3, #1
 801e88e:	d907      	bls.n	801e8a0 <_fwalk_sglue+0x38>
 801e890:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801e894:	3301      	adds	r3, #1
 801e896:	d003      	beq.n	801e8a0 <_fwalk_sglue+0x38>
 801e898:	4629      	mov	r1, r5
 801e89a:	4638      	mov	r0, r7
 801e89c:	47c0      	blx	r8
 801e89e:	4306      	orrs	r6, r0
 801e8a0:	3568      	adds	r5, #104	@ 0x68
 801e8a2:	e7e9      	b.n	801e878 <_fwalk_sglue+0x10>

0801e8a4 <iprintf>:
 801e8a4:	b40f      	push	{r0, r1, r2, r3}
 801e8a6:	b507      	push	{r0, r1, r2, lr}
 801e8a8:	4906      	ldr	r1, [pc, #24]	@ (801e8c4 <iprintf+0x20>)
 801e8aa:	ab04      	add	r3, sp, #16
 801e8ac:	6808      	ldr	r0, [r1, #0]
 801e8ae:	f853 2b04 	ldr.w	r2, [r3], #4
 801e8b2:	6881      	ldr	r1, [r0, #8]
 801e8b4:	9301      	str	r3, [sp, #4]
 801e8b6:	f000 fab9 	bl	801ee2c <_vfiprintf_r>
 801e8ba:	b003      	add	sp, #12
 801e8bc:	f85d eb04 	ldr.w	lr, [sp], #4
 801e8c0:	b004      	add	sp, #16
 801e8c2:	4770      	bx	lr
 801e8c4:	2400004c 	.word	0x2400004c

0801e8c8 <putchar>:
 801e8c8:	4b02      	ldr	r3, [pc, #8]	@ (801e8d4 <putchar+0xc>)
 801e8ca:	4601      	mov	r1, r0
 801e8cc:	6818      	ldr	r0, [r3, #0]
 801e8ce:	6882      	ldr	r2, [r0, #8]
 801e8d0:	f000 be60 	b.w	801f594 <_putc_r>
 801e8d4:	2400004c 	.word	0x2400004c

0801e8d8 <_puts_r>:
 801e8d8:	6a03      	ldr	r3, [r0, #32]
 801e8da:	b570      	push	{r4, r5, r6, lr}
 801e8dc:	6884      	ldr	r4, [r0, #8]
 801e8de:	4605      	mov	r5, r0
 801e8e0:	460e      	mov	r6, r1
 801e8e2:	b90b      	cbnz	r3, 801e8e8 <_puts_r+0x10>
 801e8e4:	f7ff ffa8 	bl	801e838 <__sinit>
 801e8e8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801e8ea:	07db      	lsls	r3, r3, #31
 801e8ec:	d405      	bmi.n	801e8fa <_puts_r+0x22>
 801e8ee:	89a3      	ldrh	r3, [r4, #12]
 801e8f0:	0598      	lsls	r0, r3, #22
 801e8f2:	d402      	bmi.n	801e8fa <_puts_r+0x22>
 801e8f4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801e8f6:	f000 fa0c 	bl	801ed12 <__retarget_lock_acquire_recursive>
 801e8fa:	89a3      	ldrh	r3, [r4, #12]
 801e8fc:	0719      	lsls	r1, r3, #28
 801e8fe:	d502      	bpl.n	801e906 <_puts_r+0x2e>
 801e900:	6923      	ldr	r3, [r4, #16]
 801e902:	2b00      	cmp	r3, #0
 801e904:	d135      	bne.n	801e972 <_puts_r+0x9a>
 801e906:	4621      	mov	r1, r4
 801e908:	4628      	mov	r0, r5
 801e90a:	f000 f8c5 	bl	801ea98 <__swsetup_r>
 801e90e:	b380      	cbz	r0, 801e972 <_puts_r+0x9a>
 801e910:	f04f 35ff 	mov.w	r5, #4294967295
 801e914:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801e916:	07da      	lsls	r2, r3, #31
 801e918:	d405      	bmi.n	801e926 <_puts_r+0x4e>
 801e91a:	89a3      	ldrh	r3, [r4, #12]
 801e91c:	059b      	lsls	r3, r3, #22
 801e91e:	d402      	bmi.n	801e926 <_puts_r+0x4e>
 801e920:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801e922:	f000 f9f7 	bl	801ed14 <__retarget_lock_release_recursive>
 801e926:	4628      	mov	r0, r5
 801e928:	bd70      	pop	{r4, r5, r6, pc}
 801e92a:	2b00      	cmp	r3, #0
 801e92c:	da04      	bge.n	801e938 <_puts_r+0x60>
 801e92e:	69a2      	ldr	r2, [r4, #24]
 801e930:	429a      	cmp	r2, r3
 801e932:	dc17      	bgt.n	801e964 <_puts_r+0x8c>
 801e934:	290a      	cmp	r1, #10
 801e936:	d015      	beq.n	801e964 <_puts_r+0x8c>
 801e938:	6823      	ldr	r3, [r4, #0]
 801e93a:	1c5a      	adds	r2, r3, #1
 801e93c:	6022      	str	r2, [r4, #0]
 801e93e:	7019      	strb	r1, [r3, #0]
 801e940:	68a3      	ldr	r3, [r4, #8]
 801e942:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801e946:	3b01      	subs	r3, #1
 801e948:	60a3      	str	r3, [r4, #8]
 801e94a:	2900      	cmp	r1, #0
 801e94c:	d1ed      	bne.n	801e92a <_puts_r+0x52>
 801e94e:	2b00      	cmp	r3, #0
 801e950:	da11      	bge.n	801e976 <_puts_r+0x9e>
 801e952:	4622      	mov	r2, r4
 801e954:	210a      	movs	r1, #10
 801e956:	4628      	mov	r0, r5
 801e958:	f000 f85f 	bl	801ea1a <__swbuf_r>
 801e95c:	3001      	adds	r0, #1
 801e95e:	d0d7      	beq.n	801e910 <_puts_r+0x38>
 801e960:	250a      	movs	r5, #10
 801e962:	e7d7      	b.n	801e914 <_puts_r+0x3c>
 801e964:	4622      	mov	r2, r4
 801e966:	4628      	mov	r0, r5
 801e968:	f000 f857 	bl	801ea1a <__swbuf_r>
 801e96c:	3001      	adds	r0, #1
 801e96e:	d1e7      	bne.n	801e940 <_puts_r+0x68>
 801e970:	e7ce      	b.n	801e910 <_puts_r+0x38>
 801e972:	3e01      	subs	r6, #1
 801e974:	e7e4      	b.n	801e940 <_puts_r+0x68>
 801e976:	6823      	ldr	r3, [r4, #0]
 801e978:	1c5a      	adds	r2, r3, #1
 801e97a:	6022      	str	r2, [r4, #0]
 801e97c:	220a      	movs	r2, #10
 801e97e:	701a      	strb	r2, [r3, #0]
 801e980:	e7ee      	b.n	801e960 <_puts_r+0x88>
	...

0801e984 <puts>:
 801e984:	4b02      	ldr	r3, [pc, #8]	@ (801e990 <puts+0xc>)
 801e986:	4601      	mov	r1, r0
 801e988:	6818      	ldr	r0, [r3, #0]
 801e98a:	f7ff bfa5 	b.w	801e8d8 <_puts_r>
 801e98e:	bf00      	nop
 801e990:	2400004c 	.word	0x2400004c

0801e994 <__sread>:
 801e994:	b510      	push	{r4, lr}
 801e996:	460c      	mov	r4, r1
 801e998:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e99c:	f000 f946 	bl	801ec2c <_read_r>
 801e9a0:	2800      	cmp	r0, #0
 801e9a2:	bfab      	itete	ge
 801e9a4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801e9a6:	89a3      	ldrhlt	r3, [r4, #12]
 801e9a8:	181b      	addge	r3, r3, r0
 801e9aa:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801e9ae:	bfac      	ite	ge
 801e9b0:	6563      	strge	r3, [r4, #84]	@ 0x54
 801e9b2:	81a3      	strhlt	r3, [r4, #12]
 801e9b4:	bd10      	pop	{r4, pc}

0801e9b6 <__swrite>:
 801e9b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e9ba:	461f      	mov	r7, r3
 801e9bc:	898b      	ldrh	r3, [r1, #12]
 801e9be:	05db      	lsls	r3, r3, #23
 801e9c0:	4605      	mov	r5, r0
 801e9c2:	460c      	mov	r4, r1
 801e9c4:	4616      	mov	r6, r2
 801e9c6:	d505      	bpl.n	801e9d4 <__swrite+0x1e>
 801e9c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e9cc:	2302      	movs	r3, #2
 801e9ce:	2200      	movs	r2, #0
 801e9d0:	f000 f91a 	bl	801ec08 <_lseek_r>
 801e9d4:	89a3      	ldrh	r3, [r4, #12]
 801e9d6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801e9da:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801e9de:	81a3      	strh	r3, [r4, #12]
 801e9e0:	4632      	mov	r2, r6
 801e9e2:	463b      	mov	r3, r7
 801e9e4:	4628      	mov	r0, r5
 801e9e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801e9ea:	f000 b955 	b.w	801ec98 <_write_r>

0801e9ee <__sseek>:
 801e9ee:	b510      	push	{r4, lr}
 801e9f0:	460c      	mov	r4, r1
 801e9f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e9f6:	f000 f907 	bl	801ec08 <_lseek_r>
 801e9fa:	1c43      	adds	r3, r0, #1
 801e9fc:	89a3      	ldrh	r3, [r4, #12]
 801e9fe:	bf15      	itete	ne
 801ea00:	6560      	strne	r0, [r4, #84]	@ 0x54
 801ea02:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801ea06:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801ea0a:	81a3      	strheq	r3, [r4, #12]
 801ea0c:	bf18      	it	ne
 801ea0e:	81a3      	strhne	r3, [r4, #12]
 801ea10:	bd10      	pop	{r4, pc}

0801ea12 <__sclose>:
 801ea12:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ea16:	f000 b8e7 	b.w	801ebe8 <_close_r>

0801ea1a <__swbuf_r>:
 801ea1a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ea1c:	460e      	mov	r6, r1
 801ea1e:	4614      	mov	r4, r2
 801ea20:	4605      	mov	r5, r0
 801ea22:	b118      	cbz	r0, 801ea2c <__swbuf_r+0x12>
 801ea24:	6a03      	ldr	r3, [r0, #32]
 801ea26:	b90b      	cbnz	r3, 801ea2c <__swbuf_r+0x12>
 801ea28:	f7ff ff06 	bl	801e838 <__sinit>
 801ea2c:	69a3      	ldr	r3, [r4, #24]
 801ea2e:	60a3      	str	r3, [r4, #8]
 801ea30:	89a3      	ldrh	r3, [r4, #12]
 801ea32:	071a      	lsls	r2, r3, #28
 801ea34:	d501      	bpl.n	801ea3a <__swbuf_r+0x20>
 801ea36:	6923      	ldr	r3, [r4, #16]
 801ea38:	b943      	cbnz	r3, 801ea4c <__swbuf_r+0x32>
 801ea3a:	4621      	mov	r1, r4
 801ea3c:	4628      	mov	r0, r5
 801ea3e:	f000 f82b 	bl	801ea98 <__swsetup_r>
 801ea42:	b118      	cbz	r0, 801ea4c <__swbuf_r+0x32>
 801ea44:	f04f 37ff 	mov.w	r7, #4294967295
 801ea48:	4638      	mov	r0, r7
 801ea4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ea4c:	6823      	ldr	r3, [r4, #0]
 801ea4e:	6922      	ldr	r2, [r4, #16]
 801ea50:	1a98      	subs	r0, r3, r2
 801ea52:	6963      	ldr	r3, [r4, #20]
 801ea54:	b2f6      	uxtb	r6, r6
 801ea56:	4283      	cmp	r3, r0
 801ea58:	4637      	mov	r7, r6
 801ea5a:	dc05      	bgt.n	801ea68 <__swbuf_r+0x4e>
 801ea5c:	4621      	mov	r1, r4
 801ea5e:	4628      	mov	r0, r5
 801ea60:	f000 fd0e 	bl	801f480 <_fflush_r>
 801ea64:	2800      	cmp	r0, #0
 801ea66:	d1ed      	bne.n	801ea44 <__swbuf_r+0x2a>
 801ea68:	68a3      	ldr	r3, [r4, #8]
 801ea6a:	3b01      	subs	r3, #1
 801ea6c:	60a3      	str	r3, [r4, #8]
 801ea6e:	6823      	ldr	r3, [r4, #0]
 801ea70:	1c5a      	adds	r2, r3, #1
 801ea72:	6022      	str	r2, [r4, #0]
 801ea74:	701e      	strb	r6, [r3, #0]
 801ea76:	6962      	ldr	r2, [r4, #20]
 801ea78:	1c43      	adds	r3, r0, #1
 801ea7a:	429a      	cmp	r2, r3
 801ea7c:	d004      	beq.n	801ea88 <__swbuf_r+0x6e>
 801ea7e:	89a3      	ldrh	r3, [r4, #12]
 801ea80:	07db      	lsls	r3, r3, #31
 801ea82:	d5e1      	bpl.n	801ea48 <__swbuf_r+0x2e>
 801ea84:	2e0a      	cmp	r6, #10
 801ea86:	d1df      	bne.n	801ea48 <__swbuf_r+0x2e>
 801ea88:	4621      	mov	r1, r4
 801ea8a:	4628      	mov	r0, r5
 801ea8c:	f000 fcf8 	bl	801f480 <_fflush_r>
 801ea90:	2800      	cmp	r0, #0
 801ea92:	d0d9      	beq.n	801ea48 <__swbuf_r+0x2e>
 801ea94:	e7d6      	b.n	801ea44 <__swbuf_r+0x2a>
	...

0801ea98 <__swsetup_r>:
 801ea98:	b538      	push	{r3, r4, r5, lr}
 801ea9a:	4b29      	ldr	r3, [pc, #164]	@ (801eb40 <__swsetup_r+0xa8>)
 801ea9c:	4605      	mov	r5, r0
 801ea9e:	6818      	ldr	r0, [r3, #0]
 801eaa0:	460c      	mov	r4, r1
 801eaa2:	b118      	cbz	r0, 801eaac <__swsetup_r+0x14>
 801eaa4:	6a03      	ldr	r3, [r0, #32]
 801eaa6:	b90b      	cbnz	r3, 801eaac <__swsetup_r+0x14>
 801eaa8:	f7ff fec6 	bl	801e838 <__sinit>
 801eaac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801eab0:	0719      	lsls	r1, r3, #28
 801eab2:	d422      	bmi.n	801eafa <__swsetup_r+0x62>
 801eab4:	06da      	lsls	r2, r3, #27
 801eab6:	d407      	bmi.n	801eac8 <__swsetup_r+0x30>
 801eab8:	2209      	movs	r2, #9
 801eaba:	602a      	str	r2, [r5, #0]
 801eabc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801eac0:	81a3      	strh	r3, [r4, #12]
 801eac2:	f04f 30ff 	mov.w	r0, #4294967295
 801eac6:	e033      	b.n	801eb30 <__swsetup_r+0x98>
 801eac8:	0758      	lsls	r0, r3, #29
 801eaca:	d512      	bpl.n	801eaf2 <__swsetup_r+0x5a>
 801eacc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801eace:	b141      	cbz	r1, 801eae2 <__swsetup_r+0x4a>
 801ead0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801ead4:	4299      	cmp	r1, r3
 801ead6:	d002      	beq.n	801eade <__swsetup_r+0x46>
 801ead8:	4628      	mov	r0, r5
 801eada:	f000 f92b 	bl	801ed34 <_free_r>
 801eade:	2300      	movs	r3, #0
 801eae0:	6363      	str	r3, [r4, #52]	@ 0x34
 801eae2:	89a3      	ldrh	r3, [r4, #12]
 801eae4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801eae8:	81a3      	strh	r3, [r4, #12]
 801eaea:	2300      	movs	r3, #0
 801eaec:	6063      	str	r3, [r4, #4]
 801eaee:	6923      	ldr	r3, [r4, #16]
 801eaf0:	6023      	str	r3, [r4, #0]
 801eaf2:	89a3      	ldrh	r3, [r4, #12]
 801eaf4:	f043 0308 	orr.w	r3, r3, #8
 801eaf8:	81a3      	strh	r3, [r4, #12]
 801eafa:	6923      	ldr	r3, [r4, #16]
 801eafc:	b94b      	cbnz	r3, 801eb12 <__swsetup_r+0x7a>
 801eafe:	89a3      	ldrh	r3, [r4, #12]
 801eb00:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801eb04:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801eb08:	d003      	beq.n	801eb12 <__swsetup_r+0x7a>
 801eb0a:	4621      	mov	r1, r4
 801eb0c:	4628      	mov	r0, r5
 801eb0e:	f000 fd05 	bl	801f51c <__smakebuf_r>
 801eb12:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801eb16:	f013 0201 	ands.w	r2, r3, #1
 801eb1a:	d00a      	beq.n	801eb32 <__swsetup_r+0x9a>
 801eb1c:	2200      	movs	r2, #0
 801eb1e:	60a2      	str	r2, [r4, #8]
 801eb20:	6962      	ldr	r2, [r4, #20]
 801eb22:	4252      	negs	r2, r2
 801eb24:	61a2      	str	r2, [r4, #24]
 801eb26:	6922      	ldr	r2, [r4, #16]
 801eb28:	b942      	cbnz	r2, 801eb3c <__swsetup_r+0xa4>
 801eb2a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801eb2e:	d1c5      	bne.n	801eabc <__swsetup_r+0x24>
 801eb30:	bd38      	pop	{r3, r4, r5, pc}
 801eb32:	0799      	lsls	r1, r3, #30
 801eb34:	bf58      	it	pl
 801eb36:	6962      	ldrpl	r2, [r4, #20]
 801eb38:	60a2      	str	r2, [r4, #8]
 801eb3a:	e7f4      	b.n	801eb26 <__swsetup_r+0x8e>
 801eb3c:	2000      	movs	r0, #0
 801eb3e:	e7f7      	b.n	801eb30 <__swsetup_r+0x98>
 801eb40:	2400004c 	.word	0x2400004c

0801eb44 <memmove>:
 801eb44:	4288      	cmp	r0, r1
 801eb46:	b510      	push	{r4, lr}
 801eb48:	eb01 0402 	add.w	r4, r1, r2
 801eb4c:	d902      	bls.n	801eb54 <memmove+0x10>
 801eb4e:	4284      	cmp	r4, r0
 801eb50:	4623      	mov	r3, r4
 801eb52:	d807      	bhi.n	801eb64 <memmove+0x20>
 801eb54:	1e43      	subs	r3, r0, #1
 801eb56:	42a1      	cmp	r1, r4
 801eb58:	d008      	beq.n	801eb6c <memmove+0x28>
 801eb5a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801eb5e:	f803 2f01 	strb.w	r2, [r3, #1]!
 801eb62:	e7f8      	b.n	801eb56 <memmove+0x12>
 801eb64:	4402      	add	r2, r0
 801eb66:	4601      	mov	r1, r0
 801eb68:	428a      	cmp	r2, r1
 801eb6a:	d100      	bne.n	801eb6e <memmove+0x2a>
 801eb6c:	bd10      	pop	{r4, pc}
 801eb6e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801eb72:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801eb76:	e7f7      	b.n	801eb68 <memmove+0x24>

0801eb78 <memset>:
 801eb78:	4402      	add	r2, r0
 801eb7a:	4603      	mov	r3, r0
 801eb7c:	4293      	cmp	r3, r2
 801eb7e:	d100      	bne.n	801eb82 <memset+0xa>
 801eb80:	4770      	bx	lr
 801eb82:	f803 1b01 	strb.w	r1, [r3], #1
 801eb86:	e7f9      	b.n	801eb7c <memset+0x4>

0801eb88 <_raise_r>:
 801eb88:	291f      	cmp	r1, #31
 801eb8a:	b538      	push	{r3, r4, r5, lr}
 801eb8c:	4605      	mov	r5, r0
 801eb8e:	460c      	mov	r4, r1
 801eb90:	d904      	bls.n	801eb9c <_raise_r+0x14>
 801eb92:	2316      	movs	r3, #22
 801eb94:	6003      	str	r3, [r0, #0]
 801eb96:	f04f 30ff 	mov.w	r0, #4294967295
 801eb9a:	bd38      	pop	{r3, r4, r5, pc}
 801eb9c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801eb9e:	b112      	cbz	r2, 801eba6 <_raise_r+0x1e>
 801eba0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801eba4:	b94b      	cbnz	r3, 801ebba <_raise_r+0x32>
 801eba6:	4628      	mov	r0, r5
 801eba8:	f000 f864 	bl	801ec74 <_getpid_r>
 801ebac:	4622      	mov	r2, r4
 801ebae:	4601      	mov	r1, r0
 801ebb0:	4628      	mov	r0, r5
 801ebb2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801ebb6:	f000 b84b 	b.w	801ec50 <_kill_r>
 801ebba:	2b01      	cmp	r3, #1
 801ebbc:	d00a      	beq.n	801ebd4 <_raise_r+0x4c>
 801ebbe:	1c59      	adds	r1, r3, #1
 801ebc0:	d103      	bne.n	801ebca <_raise_r+0x42>
 801ebc2:	2316      	movs	r3, #22
 801ebc4:	6003      	str	r3, [r0, #0]
 801ebc6:	2001      	movs	r0, #1
 801ebc8:	e7e7      	b.n	801eb9a <_raise_r+0x12>
 801ebca:	2100      	movs	r1, #0
 801ebcc:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801ebd0:	4620      	mov	r0, r4
 801ebd2:	4798      	blx	r3
 801ebd4:	2000      	movs	r0, #0
 801ebd6:	e7e0      	b.n	801eb9a <_raise_r+0x12>

0801ebd8 <raise>:
 801ebd8:	4b02      	ldr	r3, [pc, #8]	@ (801ebe4 <raise+0xc>)
 801ebda:	4601      	mov	r1, r0
 801ebdc:	6818      	ldr	r0, [r3, #0]
 801ebde:	f7ff bfd3 	b.w	801eb88 <_raise_r>
 801ebe2:	bf00      	nop
 801ebe4:	2400004c 	.word	0x2400004c

0801ebe8 <_close_r>:
 801ebe8:	b538      	push	{r3, r4, r5, lr}
 801ebea:	4d06      	ldr	r5, [pc, #24]	@ (801ec04 <_close_r+0x1c>)
 801ebec:	2300      	movs	r3, #0
 801ebee:	4604      	mov	r4, r0
 801ebf0:	4608      	mov	r0, r1
 801ebf2:	602b      	str	r3, [r5, #0]
 801ebf4:	f7ed f918 	bl	800be28 <_close>
 801ebf8:	1c43      	adds	r3, r0, #1
 801ebfa:	d102      	bne.n	801ec02 <_close_r+0x1a>
 801ebfc:	682b      	ldr	r3, [r5, #0]
 801ebfe:	b103      	cbz	r3, 801ec02 <_close_r+0x1a>
 801ec00:	6023      	str	r3, [r4, #0]
 801ec02:	bd38      	pop	{r3, r4, r5, pc}
 801ec04:	24000cd8 	.word	0x24000cd8

0801ec08 <_lseek_r>:
 801ec08:	b538      	push	{r3, r4, r5, lr}
 801ec0a:	4d07      	ldr	r5, [pc, #28]	@ (801ec28 <_lseek_r+0x20>)
 801ec0c:	4604      	mov	r4, r0
 801ec0e:	4608      	mov	r0, r1
 801ec10:	4611      	mov	r1, r2
 801ec12:	2200      	movs	r2, #0
 801ec14:	602a      	str	r2, [r5, #0]
 801ec16:	461a      	mov	r2, r3
 801ec18:	f7ed f92d 	bl	800be76 <_lseek>
 801ec1c:	1c43      	adds	r3, r0, #1
 801ec1e:	d102      	bne.n	801ec26 <_lseek_r+0x1e>
 801ec20:	682b      	ldr	r3, [r5, #0]
 801ec22:	b103      	cbz	r3, 801ec26 <_lseek_r+0x1e>
 801ec24:	6023      	str	r3, [r4, #0]
 801ec26:	bd38      	pop	{r3, r4, r5, pc}
 801ec28:	24000cd8 	.word	0x24000cd8

0801ec2c <_read_r>:
 801ec2c:	b538      	push	{r3, r4, r5, lr}
 801ec2e:	4d07      	ldr	r5, [pc, #28]	@ (801ec4c <_read_r+0x20>)
 801ec30:	4604      	mov	r4, r0
 801ec32:	4608      	mov	r0, r1
 801ec34:	4611      	mov	r1, r2
 801ec36:	2200      	movs	r2, #0
 801ec38:	602a      	str	r2, [r5, #0]
 801ec3a:	461a      	mov	r2, r3
 801ec3c:	f7ed f8bb 	bl	800bdb6 <_read>
 801ec40:	1c43      	adds	r3, r0, #1
 801ec42:	d102      	bne.n	801ec4a <_read_r+0x1e>
 801ec44:	682b      	ldr	r3, [r5, #0]
 801ec46:	b103      	cbz	r3, 801ec4a <_read_r+0x1e>
 801ec48:	6023      	str	r3, [r4, #0]
 801ec4a:	bd38      	pop	{r3, r4, r5, pc}
 801ec4c:	24000cd8 	.word	0x24000cd8

0801ec50 <_kill_r>:
 801ec50:	b538      	push	{r3, r4, r5, lr}
 801ec52:	4d07      	ldr	r5, [pc, #28]	@ (801ec70 <_kill_r+0x20>)
 801ec54:	2300      	movs	r3, #0
 801ec56:	4604      	mov	r4, r0
 801ec58:	4608      	mov	r0, r1
 801ec5a:	4611      	mov	r1, r2
 801ec5c:	602b      	str	r3, [r5, #0]
 801ec5e:	f7ed f88f 	bl	800bd80 <_kill>
 801ec62:	1c43      	adds	r3, r0, #1
 801ec64:	d102      	bne.n	801ec6c <_kill_r+0x1c>
 801ec66:	682b      	ldr	r3, [r5, #0]
 801ec68:	b103      	cbz	r3, 801ec6c <_kill_r+0x1c>
 801ec6a:	6023      	str	r3, [r4, #0]
 801ec6c:	bd38      	pop	{r3, r4, r5, pc}
 801ec6e:	bf00      	nop
 801ec70:	24000cd8 	.word	0x24000cd8

0801ec74 <_getpid_r>:
 801ec74:	f7ed b87c 	b.w	800bd70 <_getpid>

0801ec78 <_sbrk_r>:
 801ec78:	b538      	push	{r3, r4, r5, lr}
 801ec7a:	4d06      	ldr	r5, [pc, #24]	@ (801ec94 <_sbrk_r+0x1c>)
 801ec7c:	2300      	movs	r3, #0
 801ec7e:	4604      	mov	r4, r0
 801ec80:	4608      	mov	r0, r1
 801ec82:	602b      	str	r3, [r5, #0]
 801ec84:	f7ed f904 	bl	800be90 <_sbrk>
 801ec88:	1c43      	adds	r3, r0, #1
 801ec8a:	d102      	bne.n	801ec92 <_sbrk_r+0x1a>
 801ec8c:	682b      	ldr	r3, [r5, #0]
 801ec8e:	b103      	cbz	r3, 801ec92 <_sbrk_r+0x1a>
 801ec90:	6023      	str	r3, [r4, #0]
 801ec92:	bd38      	pop	{r3, r4, r5, pc}
 801ec94:	24000cd8 	.word	0x24000cd8

0801ec98 <_write_r>:
 801ec98:	b538      	push	{r3, r4, r5, lr}
 801ec9a:	4d07      	ldr	r5, [pc, #28]	@ (801ecb8 <_write_r+0x20>)
 801ec9c:	4604      	mov	r4, r0
 801ec9e:	4608      	mov	r0, r1
 801eca0:	4611      	mov	r1, r2
 801eca2:	2200      	movs	r2, #0
 801eca4:	602a      	str	r2, [r5, #0]
 801eca6:	461a      	mov	r2, r3
 801eca8:	f7ed f8a2 	bl	800bdf0 <_write>
 801ecac:	1c43      	adds	r3, r0, #1
 801ecae:	d102      	bne.n	801ecb6 <_write_r+0x1e>
 801ecb0:	682b      	ldr	r3, [r5, #0]
 801ecb2:	b103      	cbz	r3, 801ecb6 <_write_r+0x1e>
 801ecb4:	6023      	str	r3, [r4, #0]
 801ecb6:	bd38      	pop	{r3, r4, r5, pc}
 801ecb8:	24000cd8 	.word	0x24000cd8

0801ecbc <__errno>:
 801ecbc:	4b01      	ldr	r3, [pc, #4]	@ (801ecc4 <__errno+0x8>)
 801ecbe:	6818      	ldr	r0, [r3, #0]
 801ecc0:	4770      	bx	lr
 801ecc2:	bf00      	nop
 801ecc4:	2400004c 	.word	0x2400004c

0801ecc8 <__libc_init_array>:
 801ecc8:	b570      	push	{r4, r5, r6, lr}
 801ecca:	4d0d      	ldr	r5, [pc, #52]	@ (801ed00 <__libc_init_array+0x38>)
 801eccc:	4c0d      	ldr	r4, [pc, #52]	@ (801ed04 <__libc_init_array+0x3c>)
 801ecce:	1b64      	subs	r4, r4, r5
 801ecd0:	10a4      	asrs	r4, r4, #2
 801ecd2:	2600      	movs	r6, #0
 801ecd4:	42a6      	cmp	r6, r4
 801ecd6:	d109      	bne.n	801ecec <__libc_init_array+0x24>
 801ecd8:	4d0b      	ldr	r5, [pc, #44]	@ (801ed08 <__libc_init_array+0x40>)
 801ecda:	4c0c      	ldr	r4, [pc, #48]	@ (801ed0c <__libc_init_array+0x44>)
 801ecdc:	f000 fcb0 	bl	801f640 <_init>
 801ece0:	1b64      	subs	r4, r4, r5
 801ece2:	10a4      	asrs	r4, r4, #2
 801ece4:	2600      	movs	r6, #0
 801ece6:	42a6      	cmp	r6, r4
 801ece8:	d105      	bne.n	801ecf6 <__libc_init_array+0x2e>
 801ecea:	bd70      	pop	{r4, r5, r6, pc}
 801ecec:	f855 3b04 	ldr.w	r3, [r5], #4
 801ecf0:	4798      	blx	r3
 801ecf2:	3601      	adds	r6, #1
 801ecf4:	e7ee      	b.n	801ecd4 <__libc_init_array+0xc>
 801ecf6:	f855 3b04 	ldr.w	r3, [r5], #4
 801ecfa:	4798      	blx	r3
 801ecfc:	3601      	adds	r6, #1
 801ecfe:	e7f2      	b.n	801ece6 <__libc_init_array+0x1e>
 801ed00:	080207e0 	.word	0x080207e0
 801ed04:	080207e0 	.word	0x080207e0
 801ed08:	080207e0 	.word	0x080207e0
 801ed0c:	080207f0 	.word	0x080207f0

0801ed10 <__retarget_lock_init_recursive>:
 801ed10:	4770      	bx	lr

0801ed12 <__retarget_lock_acquire_recursive>:
 801ed12:	4770      	bx	lr

0801ed14 <__retarget_lock_release_recursive>:
 801ed14:	4770      	bx	lr

0801ed16 <memcpy>:
 801ed16:	440a      	add	r2, r1
 801ed18:	4291      	cmp	r1, r2
 801ed1a:	f100 33ff 	add.w	r3, r0, #4294967295
 801ed1e:	d100      	bne.n	801ed22 <memcpy+0xc>
 801ed20:	4770      	bx	lr
 801ed22:	b510      	push	{r4, lr}
 801ed24:	f811 4b01 	ldrb.w	r4, [r1], #1
 801ed28:	f803 4f01 	strb.w	r4, [r3, #1]!
 801ed2c:	4291      	cmp	r1, r2
 801ed2e:	d1f9      	bne.n	801ed24 <memcpy+0xe>
 801ed30:	bd10      	pop	{r4, pc}
	...

0801ed34 <_free_r>:
 801ed34:	b538      	push	{r3, r4, r5, lr}
 801ed36:	4605      	mov	r5, r0
 801ed38:	2900      	cmp	r1, #0
 801ed3a:	d041      	beq.n	801edc0 <_free_r+0x8c>
 801ed3c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801ed40:	1f0c      	subs	r4, r1, #4
 801ed42:	2b00      	cmp	r3, #0
 801ed44:	bfb8      	it	lt
 801ed46:	18e4      	addlt	r4, r4, r3
 801ed48:	f7ff fca8 	bl	801e69c <__malloc_lock>
 801ed4c:	4a1d      	ldr	r2, [pc, #116]	@ (801edc4 <_free_r+0x90>)
 801ed4e:	6813      	ldr	r3, [r2, #0]
 801ed50:	b933      	cbnz	r3, 801ed60 <_free_r+0x2c>
 801ed52:	6063      	str	r3, [r4, #4]
 801ed54:	6014      	str	r4, [r2, #0]
 801ed56:	4628      	mov	r0, r5
 801ed58:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801ed5c:	f7ff bca4 	b.w	801e6a8 <__malloc_unlock>
 801ed60:	42a3      	cmp	r3, r4
 801ed62:	d908      	bls.n	801ed76 <_free_r+0x42>
 801ed64:	6820      	ldr	r0, [r4, #0]
 801ed66:	1821      	adds	r1, r4, r0
 801ed68:	428b      	cmp	r3, r1
 801ed6a:	bf01      	itttt	eq
 801ed6c:	6819      	ldreq	r1, [r3, #0]
 801ed6e:	685b      	ldreq	r3, [r3, #4]
 801ed70:	1809      	addeq	r1, r1, r0
 801ed72:	6021      	streq	r1, [r4, #0]
 801ed74:	e7ed      	b.n	801ed52 <_free_r+0x1e>
 801ed76:	461a      	mov	r2, r3
 801ed78:	685b      	ldr	r3, [r3, #4]
 801ed7a:	b10b      	cbz	r3, 801ed80 <_free_r+0x4c>
 801ed7c:	42a3      	cmp	r3, r4
 801ed7e:	d9fa      	bls.n	801ed76 <_free_r+0x42>
 801ed80:	6811      	ldr	r1, [r2, #0]
 801ed82:	1850      	adds	r0, r2, r1
 801ed84:	42a0      	cmp	r0, r4
 801ed86:	d10b      	bne.n	801eda0 <_free_r+0x6c>
 801ed88:	6820      	ldr	r0, [r4, #0]
 801ed8a:	4401      	add	r1, r0
 801ed8c:	1850      	adds	r0, r2, r1
 801ed8e:	4283      	cmp	r3, r0
 801ed90:	6011      	str	r1, [r2, #0]
 801ed92:	d1e0      	bne.n	801ed56 <_free_r+0x22>
 801ed94:	6818      	ldr	r0, [r3, #0]
 801ed96:	685b      	ldr	r3, [r3, #4]
 801ed98:	6053      	str	r3, [r2, #4]
 801ed9a:	4408      	add	r0, r1
 801ed9c:	6010      	str	r0, [r2, #0]
 801ed9e:	e7da      	b.n	801ed56 <_free_r+0x22>
 801eda0:	d902      	bls.n	801eda8 <_free_r+0x74>
 801eda2:	230c      	movs	r3, #12
 801eda4:	602b      	str	r3, [r5, #0]
 801eda6:	e7d6      	b.n	801ed56 <_free_r+0x22>
 801eda8:	6820      	ldr	r0, [r4, #0]
 801edaa:	1821      	adds	r1, r4, r0
 801edac:	428b      	cmp	r3, r1
 801edae:	bf04      	itt	eq
 801edb0:	6819      	ldreq	r1, [r3, #0]
 801edb2:	685b      	ldreq	r3, [r3, #4]
 801edb4:	6063      	str	r3, [r4, #4]
 801edb6:	bf04      	itt	eq
 801edb8:	1809      	addeq	r1, r1, r0
 801edba:	6021      	streq	r1, [r4, #0]
 801edbc:	6054      	str	r4, [r2, #4]
 801edbe:	e7ca      	b.n	801ed56 <_free_r+0x22>
 801edc0:	bd38      	pop	{r3, r4, r5, pc}
 801edc2:	bf00      	nop
 801edc4:	24000b98 	.word	0x24000b98

0801edc8 <_malloc_usable_size_r>:
 801edc8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801edcc:	1f18      	subs	r0, r3, #4
 801edce:	2b00      	cmp	r3, #0
 801edd0:	bfbc      	itt	lt
 801edd2:	580b      	ldrlt	r3, [r1, r0]
 801edd4:	18c0      	addlt	r0, r0, r3
 801edd6:	4770      	bx	lr

0801edd8 <__sfputc_r>:
 801edd8:	6893      	ldr	r3, [r2, #8]
 801edda:	3b01      	subs	r3, #1
 801eddc:	2b00      	cmp	r3, #0
 801edde:	b410      	push	{r4}
 801ede0:	6093      	str	r3, [r2, #8]
 801ede2:	da08      	bge.n	801edf6 <__sfputc_r+0x1e>
 801ede4:	6994      	ldr	r4, [r2, #24]
 801ede6:	42a3      	cmp	r3, r4
 801ede8:	db01      	blt.n	801edee <__sfputc_r+0x16>
 801edea:	290a      	cmp	r1, #10
 801edec:	d103      	bne.n	801edf6 <__sfputc_r+0x1e>
 801edee:	f85d 4b04 	ldr.w	r4, [sp], #4
 801edf2:	f7ff be12 	b.w	801ea1a <__swbuf_r>
 801edf6:	6813      	ldr	r3, [r2, #0]
 801edf8:	1c58      	adds	r0, r3, #1
 801edfa:	6010      	str	r0, [r2, #0]
 801edfc:	7019      	strb	r1, [r3, #0]
 801edfe:	4608      	mov	r0, r1
 801ee00:	f85d 4b04 	ldr.w	r4, [sp], #4
 801ee04:	4770      	bx	lr

0801ee06 <__sfputs_r>:
 801ee06:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ee08:	4606      	mov	r6, r0
 801ee0a:	460f      	mov	r7, r1
 801ee0c:	4614      	mov	r4, r2
 801ee0e:	18d5      	adds	r5, r2, r3
 801ee10:	42ac      	cmp	r4, r5
 801ee12:	d101      	bne.n	801ee18 <__sfputs_r+0x12>
 801ee14:	2000      	movs	r0, #0
 801ee16:	e007      	b.n	801ee28 <__sfputs_r+0x22>
 801ee18:	f814 1b01 	ldrb.w	r1, [r4], #1
 801ee1c:	463a      	mov	r2, r7
 801ee1e:	4630      	mov	r0, r6
 801ee20:	f7ff ffda 	bl	801edd8 <__sfputc_r>
 801ee24:	1c43      	adds	r3, r0, #1
 801ee26:	d1f3      	bne.n	801ee10 <__sfputs_r+0xa>
 801ee28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801ee2c <_vfiprintf_r>:
 801ee2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ee30:	460d      	mov	r5, r1
 801ee32:	b09d      	sub	sp, #116	@ 0x74
 801ee34:	4614      	mov	r4, r2
 801ee36:	4698      	mov	r8, r3
 801ee38:	4606      	mov	r6, r0
 801ee3a:	b118      	cbz	r0, 801ee44 <_vfiprintf_r+0x18>
 801ee3c:	6a03      	ldr	r3, [r0, #32]
 801ee3e:	b90b      	cbnz	r3, 801ee44 <_vfiprintf_r+0x18>
 801ee40:	f7ff fcfa 	bl	801e838 <__sinit>
 801ee44:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801ee46:	07d9      	lsls	r1, r3, #31
 801ee48:	d405      	bmi.n	801ee56 <_vfiprintf_r+0x2a>
 801ee4a:	89ab      	ldrh	r3, [r5, #12]
 801ee4c:	059a      	lsls	r2, r3, #22
 801ee4e:	d402      	bmi.n	801ee56 <_vfiprintf_r+0x2a>
 801ee50:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801ee52:	f7ff ff5e 	bl	801ed12 <__retarget_lock_acquire_recursive>
 801ee56:	89ab      	ldrh	r3, [r5, #12]
 801ee58:	071b      	lsls	r3, r3, #28
 801ee5a:	d501      	bpl.n	801ee60 <_vfiprintf_r+0x34>
 801ee5c:	692b      	ldr	r3, [r5, #16]
 801ee5e:	b99b      	cbnz	r3, 801ee88 <_vfiprintf_r+0x5c>
 801ee60:	4629      	mov	r1, r5
 801ee62:	4630      	mov	r0, r6
 801ee64:	f7ff fe18 	bl	801ea98 <__swsetup_r>
 801ee68:	b170      	cbz	r0, 801ee88 <_vfiprintf_r+0x5c>
 801ee6a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801ee6c:	07dc      	lsls	r4, r3, #31
 801ee6e:	d504      	bpl.n	801ee7a <_vfiprintf_r+0x4e>
 801ee70:	f04f 30ff 	mov.w	r0, #4294967295
 801ee74:	b01d      	add	sp, #116	@ 0x74
 801ee76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ee7a:	89ab      	ldrh	r3, [r5, #12]
 801ee7c:	0598      	lsls	r0, r3, #22
 801ee7e:	d4f7      	bmi.n	801ee70 <_vfiprintf_r+0x44>
 801ee80:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801ee82:	f7ff ff47 	bl	801ed14 <__retarget_lock_release_recursive>
 801ee86:	e7f3      	b.n	801ee70 <_vfiprintf_r+0x44>
 801ee88:	2300      	movs	r3, #0
 801ee8a:	9309      	str	r3, [sp, #36]	@ 0x24
 801ee8c:	2320      	movs	r3, #32
 801ee8e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801ee92:	f8cd 800c 	str.w	r8, [sp, #12]
 801ee96:	2330      	movs	r3, #48	@ 0x30
 801ee98:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801f048 <_vfiprintf_r+0x21c>
 801ee9c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801eea0:	f04f 0901 	mov.w	r9, #1
 801eea4:	4623      	mov	r3, r4
 801eea6:	469a      	mov	sl, r3
 801eea8:	f813 2b01 	ldrb.w	r2, [r3], #1
 801eeac:	b10a      	cbz	r2, 801eeb2 <_vfiprintf_r+0x86>
 801eeae:	2a25      	cmp	r2, #37	@ 0x25
 801eeb0:	d1f9      	bne.n	801eea6 <_vfiprintf_r+0x7a>
 801eeb2:	ebba 0b04 	subs.w	fp, sl, r4
 801eeb6:	d00b      	beq.n	801eed0 <_vfiprintf_r+0xa4>
 801eeb8:	465b      	mov	r3, fp
 801eeba:	4622      	mov	r2, r4
 801eebc:	4629      	mov	r1, r5
 801eebe:	4630      	mov	r0, r6
 801eec0:	f7ff ffa1 	bl	801ee06 <__sfputs_r>
 801eec4:	3001      	adds	r0, #1
 801eec6:	f000 80a7 	beq.w	801f018 <_vfiprintf_r+0x1ec>
 801eeca:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801eecc:	445a      	add	r2, fp
 801eece:	9209      	str	r2, [sp, #36]	@ 0x24
 801eed0:	f89a 3000 	ldrb.w	r3, [sl]
 801eed4:	2b00      	cmp	r3, #0
 801eed6:	f000 809f 	beq.w	801f018 <_vfiprintf_r+0x1ec>
 801eeda:	2300      	movs	r3, #0
 801eedc:	f04f 32ff 	mov.w	r2, #4294967295
 801eee0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801eee4:	f10a 0a01 	add.w	sl, sl, #1
 801eee8:	9304      	str	r3, [sp, #16]
 801eeea:	9307      	str	r3, [sp, #28]
 801eeec:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801eef0:	931a      	str	r3, [sp, #104]	@ 0x68
 801eef2:	4654      	mov	r4, sl
 801eef4:	2205      	movs	r2, #5
 801eef6:	f814 1b01 	ldrb.w	r1, [r4], #1
 801eefa:	4853      	ldr	r0, [pc, #332]	@ (801f048 <_vfiprintf_r+0x21c>)
 801eefc:	f7e1 fa00 	bl	8000300 <memchr>
 801ef00:	9a04      	ldr	r2, [sp, #16]
 801ef02:	b9d8      	cbnz	r0, 801ef3c <_vfiprintf_r+0x110>
 801ef04:	06d1      	lsls	r1, r2, #27
 801ef06:	bf44      	itt	mi
 801ef08:	2320      	movmi	r3, #32
 801ef0a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801ef0e:	0713      	lsls	r3, r2, #28
 801ef10:	bf44      	itt	mi
 801ef12:	232b      	movmi	r3, #43	@ 0x2b
 801ef14:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801ef18:	f89a 3000 	ldrb.w	r3, [sl]
 801ef1c:	2b2a      	cmp	r3, #42	@ 0x2a
 801ef1e:	d015      	beq.n	801ef4c <_vfiprintf_r+0x120>
 801ef20:	9a07      	ldr	r2, [sp, #28]
 801ef22:	4654      	mov	r4, sl
 801ef24:	2000      	movs	r0, #0
 801ef26:	f04f 0c0a 	mov.w	ip, #10
 801ef2a:	4621      	mov	r1, r4
 801ef2c:	f811 3b01 	ldrb.w	r3, [r1], #1
 801ef30:	3b30      	subs	r3, #48	@ 0x30
 801ef32:	2b09      	cmp	r3, #9
 801ef34:	d94b      	bls.n	801efce <_vfiprintf_r+0x1a2>
 801ef36:	b1b0      	cbz	r0, 801ef66 <_vfiprintf_r+0x13a>
 801ef38:	9207      	str	r2, [sp, #28]
 801ef3a:	e014      	b.n	801ef66 <_vfiprintf_r+0x13a>
 801ef3c:	eba0 0308 	sub.w	r3, r0, r8
 801ef40:	fa09 f303 	lsl.w	r3, r9, r3
 801ef44:	4313      	orrs	r3, r2
 801ef46:	9304      	str	r3, [sp, #16]
 801ef48:	46a2      	mov	sl, r4
 801ef4a:	e7d2      	b.n	801eef2 <_vfiprintf_r+0xc6>
 801ef4c:	9b03      	ldr	r3, [sp, #12]
 801ef4e:	1d19      	adds	r1, r3, #4
 801ef50:	681b      	ldr	r3, [r3, #0]
 801ef52:	9103      	str	r1, [sp, #12]
 801ef54:	2b00      	cmp	r3, #0
 801ef56:	bfbb      	ittet	lt
 801ef58:	425b      	neglt	r3, r3
 801ef5a:	f042 0202 	orrlt.w	r2, r2, #2
 801ef5e:	9307      	strge	r3, [sp, #28]
 801ef60:	9307      	strlt	r3, [sp, #28]
 801ef62:	bfb8      	it	lt
 801ef64:	9204      	strlt	r2, [sp, #16]
 801ef66:	7823      	ldrb	r3, [r4, #0]
 801ef68:	2b2e      	cmp	r3, #46	@ 0x2e
 801ef6a:	d10a      	bne.n	801ef82 <_vfiprintf_r+0x156>
 801ef6c:	7863      	ldrb	r3, [r4, #1]
 801ef6e:	2b2a      	cmp	r3, #42	@ 0x2a
 801ef70:	d132      	bne.n	801efd8 <_vfiprintf_r+0x1ac>
 801ef72:	9b03      	ldr	r3, [sp, #12]
 801ef74:	1d1a      	adds	r2, r3, #4
 801ef76:	681b      	ldr	r3, [r3, #0]
 801ef78:	9203      	str	r2, [sp, #12]
 801ef7a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801ef7e:	3402      	adds	r4, #2
 801ef80:	9305      	str	r3, [sp, #20]
 801ef82:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 801f058 <_vfiprintf_r+0x22c>
 801ef86:	7821      	ldrb	r1, [r4, #0]
 801ef88:	2203      	movs	r2, #3
 801ef8a:	4650      	mov	r0, sl
 801ef8c:	f7e1 f9b8 	bl	8000300 <memchr>
 801ef90:	b138      	cbz	r0, 801efa2 <_vfiprintf_r+0x176>
 801ef92:	9b04      	ldr	r3, [sp, #16]
 801ef94:	eba0 000a 	sub.w	r0, r0, sl
 801ef98:	2240      	movs	r2, #64	@ 0x40
 801ef9a:	4082      	lsls	r2, r0
 801ef9c:	4313      	orrs	r3, r2
 801ef9e:	3401      	adds	r4, #1
 801efa0:	9304      	str	r3, [sp, #16]
 801efa2:	f814 1b01 	ldrb.w	r1, [r4], #1
 801efa6:	4829      	ldr	r0, [pc, #164]	@ (801f04c <_vfiprintf_r+0x220>)
 801efa8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801efac:	2206      	movs	r2, #6
 801efae:	f7e1 f9a7 	bl	8000300 <memchr>
 801efb2:	2800      	cmp	r0, #0
 801efb4:	d03f      	beq.n	801f036 <_vfiprintf_r+0x20a>
 801efb6:	4b26      	ldr	r3, [pc, #152]	@ (801f050 <_vfiprintf_r+0x224>)
 801efb8:	bb1b      	cbnz	r3, 801f002 <_vfiprintf_r+0x1d6>
 801efba:	9b03      	ldr	r3, [sp, #12]
 801efbc:	3307      	adds	r3, #7
 801efbe:	f023 0307 	bic.w	r3, r3, #7
 801efc2:	3308      	adds	r3, #8
 801efc4:	9303      	str	r3, [sp, #12]
 801efc6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801efc8:	443b      	add	r3, r7
 801efca:	9309      	str	r3, [sp, #36]	@ 0x24
 801efcc:	e76a      	b.n	801eea4 <_vfiprintf_r+0x78>
 801efce:	fb0c 3202 	mla	r2, ip, r2, r3
 801efd2:	460c      	mov	r4, r1
 801efd4:	2001      	movs	r0, #1
 801efd6:	e7a8      	b.n	801ef2a <_vfiprintf_r+0xfe>
 801efd8:	2300      	movs	r3, #0
 801efda:	3401      	adds	r4, #1
 801efdc:	9305      	str	r3, [sp, #20]
 801efde:	4619      	mov	r1, r3
 801efe0:	f04f 0c0a 	mov.w	ip, #10
 801efe4:	4620      	mov	r0, r4
 801efe6:	f810 2b01 	ldrb.w	r2, [r0], #1
 801efea:	3a30      	subs	r2, #48	@ 0x30
 801efec:	2a09      	cmp	r2, #9
 801efee:	d903      	bls.n	801eff8 <_vfiprintf_r+0x1cc>
 801eff0:	2b00      	cmp	r3, #0
 801eff2:	d0c6      	beq.n	801ef82 <_vfiprintf_r+0x156>
 801eff4:	9105      	str	r1, [sp, #20]
 801eff6:	e7c4      	b.n	801ef82 <_vfiprintf_r+0x156>
 801eff8:	fb0c 2101 	mla	r1, ip, r1, r2
 801effc:	4604      	mov	r4, r0
 801effe:	2301      	movs	r3, #1
 801f000:	e7f0      	b.n	801efe4 <_vfiprintf_r+0x1b8>
 801f002:	ab03      	add	r3, sp, #12
 801f004:	9300      	str	r3, [sp, #0]
 801f006:	462a      	mov	r2, r5
 801f008:	4b12      	ldr	r3, [pc, #72]	@ (801f054 <_vfiprintf_r+0x228>)
 801f00a:	a904      	add	r1, sp, #16
 801f00c:	4630      	mov	r0, r6
 801f00e:	f3af 8000 	nop.w
 801f012:	4607      	mov	r7, r0
 801f014:	1c78      	adds	r0, r7, #1
 801f016:	d1d6      	bne.n	801efc6 <_vfiprintf_r+0x19a>
 801f018:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801f01a:	07d9      	lsls	r1, r3, #31
 801f01c:	d405      	bmi.n	801f02a <_vfiprintf_r+0x1fe>
 801f01e:	89ab      	ldrh	r3, [r5, #12]
 801f020:	059a      	lsls	r2, r3, #22
 801f022:	d402      	bmi.n	801f02a <_vfiprintf_r+0x1fe>
 801f024:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801f026:	f7ff fe75 	bl	801ed14 <__retarget_lock_release_recursive>
 801f02a:	89ab      	ldrh	r3, [r5, #12]
 801f02c:	065b      	lsls	r3, r3, #25
 801f02e:	f53f af1f 	bmi.w	801ee70 <_vfiprintf_r+0x44>
 801f032:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801f034:	e71e      	b.n	801ee74 <_vfiprintf_r+0x48>
 801f036:	ab03      	add	r3, sp, #12
 801f038:	9300      	str	r3, [sp, #0]
 801f03a:	462a      	mov	r2, r5
 801f03c:	4b05      	ldr	r3, [pc, #20]	@ (801f054 <_vfiprintf_r+0x228>)
 801f03e:	a904      	add	r1, sp, #16
 801f040:	4630      	mov	r0, r6
 801f042:	f000 f879 	bl	801f138 <_printf_i>
 801f046:	e7e4      	b.n	801f012 <_vfiprintf_r+0x1e6>
 801f048:	080207a5 	.word	0x080207a5
 801f04c:	080207af 	.word	0x080207af
 801f050:	00000000 	.word	0x00000000
 801f054:	0801ee07 	.word	0x0801ee07
 801f058:	080207ab 	.word	0x080207ab

0801f05c <_printf_common>:
 801f05c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801f060:	4616      	mov	r6, r2
 801f062:	4698      	mov	r8, r3
 801f064:	688a      	ldr	r2, [r1, #8]
 801f066:	690b      	ldr	r3, [r1, #16]
 801f068:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801f06c:	4293      	cmp	r3, r2
 801f06e:	bfb8      	it	lt
 801f070:	4613      	movlt	r3, r2
 801f072:	6033      	str	r3, [r6, #0]
 801f074:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 801f078:	4607      	mov	r7, r0
 801f07a:	460c      	mov	r4, r1
 801f07c:	b10a      	cbz	r2, 801f082 <_printf_common+0x26>
 801f07e:	3301      	adds	r3, #1
 801f080:	6033      	str	r3, [r6, #0]
 801f082:	6823      	ldr	r3, [r4, #0]
 801f084:	0699      	lsls	r1, r3, #26
 801f086:	bf42      	ittt	mi
 801f088:	6833      	ldrmi	r3, [r6, #0]
 801f08a:	3302      	addmi	r3, #2
 801f08c:	6033      	strmi	r3, [r6, #0]
 801f08e:	6825      	ldr	r5, [r4, #0]
 801f090:	f015 0506 	ands.w	r5, r5, #6
 801f094:	d106      	bne.n	801f0a4 <_printf_common+0x48>
 801f096:	f104 0a19 	add.w	sl, r4, #25
 801f09a:	68e3      	ldr	r3, [r4, #12]
 801f09c:	6832      	ldr	r2, [r6, #0]
 801f09e:	1a9b      	subs	r3, r3, r2
 801f0a0:	42ab      	cmp	r3, r5
 801f0a2:	dc26      	bgt.n	801f0f2 <_printf_common+0x96>
 801f0a4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 801f0a8:	6822      	ldr	r2, [r4, #0]
 801f0aa:	3b00      	subs	r3, #0
 801f0ac:	bf18      	it	ne
 801f0ae:	2301      	movne	r3, #1
 801f0b0:	0692      	lsls	r2, r2, #26
 801f0b2:	d42b      	bmi.n	801f10c <_printf_common+0xb0>
 801f0b4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 801f0b8:	4641      	mov	r1, r8
 801f0ba:	4638      	mov	r0, r7
 801f0bc:	47c8      	blx	r9
 801f0be:	3001      	adds	r0, #1
 801f0c0:	d01e      	beq.n	801f100 <_printf_common+0xa4>
 801f0c2:	6823      	ldr	r3, [r4, #0]
 801f0c4:	6922      	ldr	r2, [r4, #16]
 801f0c6:	f003 0306 	and.w	r3, r3, #6
 801f0ca:	2b04      	cmp	r3, #4
 801f0cc:	bf02      	ittt	eq
 801f0ce:	68e5      	ldreq	r5, [r4, #12]
 801f0d0:	6833      	ldreq	r3, [r6, #0]
 801f0d2:	1aed      	subeq	r5, r5, r3
 801f0d4:	68a3      	ldr	r3, [r4, #8]
 801f0d6:	bf0c      	ite	eq
 801f0d8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801f0dc:	2500      	movne	r5, #0
 801f0de:	4293      	cmp	r3, r2
 801f0e0:	bfc4      	itt	gt
 801f0e2:	1a9b      	subgt	r3, r3, r2
 801f0e4:	18ed      	addgt	r5, r5, r3
 801f0e6:	2600      	movs	r6, #0
 801f0e8:	341a      	adds	r4, #26
 801f0ea:	42b5      	cmp	r5, r6
 801f0ec:	d11a      	bne.n	801f124 <_printf_common+0xc8>
 801f0ee:	2000      	movs	r0, #0
 801f0f0:	e008      	b.n	801f104 <_printf_common+0xa8>
 801f0f2:	2301      	movs	r3, #1
 801f0f4:	4652      	mov	r2, sl
 801f0f6:	4641      	mov	r1, r8
 801f0f8:	4638      	mov	r0, r7
 801f0fa:	47c8      	blx	r9
 801f0fc:	3001      	adds	r0, #1
 801f0fe:	d103      	bne.n	801f108 <_printf_common+0xac>
 801f100:	f04f 30ff 	mov.w	r0, #4294967295
 801f104:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801f108:	3501      	adds	r5, #1
 801f10a:	e7c6      	b.n	801f09a <_printf_common+0x3e>
 801f10c:	18e1      	adds	r1, r4, r3
 801f10e:	1c5a      	adds	r2, r3, #1
 801f110:	2030      	movs	r0, #48	@ 0x30
 801f112:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801f116:	4422      	add	r2, r4
 801f118:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801f11c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 801f120:	3302      	adds	r3, #2
 801f122:	e7c7      	b.n	801f0b4 <_printf_common+0x58>
 801f124:	2301      	movs	r3, #1
 801f126:	4622      	mov	r2, r4
 801f128:	4641      	mov	r1, r8
 801f12a:	4638      	mov	r0, r7
 801f12c:	47c8      	blx	r9
 801f12e:	3001      	adds	r0, #1
 801f130:	d0e6      	beq.n	801f100 <_printf_common+0xa4>
 801f132:	3601      	adds	r6, #1
 801f134:	e7d9      	b.n	801f0ea <_printf_common+0x8e>
	...

0801f138 <_printf_i>:
 801f138:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801f13c:	7e0f      	ldrb	r7, [r1, #24]
 801f13e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801f140:	2f78      	cmp	r7, #120	@ 0x78
 801f142:	4691      	mov	r9, r2
 801f144:	4680      	mov	r8, r0
 801f146:	460c      	mov	r4, r1
 801f148:	469a      	mov	sl, r3
 801f14a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801f14e:	d807      	bhi.n	801f160 <_printf_i+0x28>
 801f150:	2f62      	cmp	r7, #98	@ 0x62
 801f152:	d80a      	bhi.n	801f16a <_printf_i+0x32>
 801f154:	2f00      	cmp	r7, #0
 801f156:	f000 80d2 	beq.w	801f2fe <_printf_i+0x1c6>
 801f15a:	2f58      	cmp	r7, #88	@ 0x58
 801f15c:	f000 80b9 	beq.w	801f2d2 <_printf_i+0x19a>
 801f160:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801f164:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 801f168:	e03a      	b.n	801f1e0 <_printf_i+0xa8>
 801f16a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801f16e:	2b15      	cmp	r3, #21
 801f170:	d8f6      	bhi.n	801f160 <_printf_i+0x28>
 801f172:	a101      	add	r1, pc, #4	@ (adr r1, 801f178 <_printf_i+0x40>)
 801f174:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801f178:	0801f1d1 	.word	0x0801f1d1
 801f17c:	0801f1e5 	.word	0x0801f1e5
 801f180:	0801f161 	.word	0x0801f161
 801f184:	0801f161 	.word	0x0801f161
 801f188:	0801f161 	.word	0x0801f161
 801f18c:	0801f161 	.word	0x0801f161
 801f190:	0801f1e5 	.word	0x0801f1e5
 801f194:	0801f161 	.word	0x0801f161
 801f198:	0801f161 	.word	0x0801f161
 801f19c:	0801f161 	.word	0x0801f161
 801f1a0:	0801f161 	.word	0x0801f161
 801f1a4:	0801f2e5 	.word	0x0801f2e5
 801f1a8:	0801f20f 	.word	0x0801f20f
 801f1ac:	0801f29f 	.word	0x0801f29f
 801f1b0:	0801f161 	.word	0x0801f161
 801f1b4:	0801f161 	.word	0x0801f161
 801f1b8:	0801f307 	.word	0x0801f307
 801f1bc:	0801f161 	.word	0x0801f161
 801f1c0:	0801f20f 	.word	0x0801f20f
 801f1c4:	0801f161 	.word	0x0801f161
 801f1c8:	0801f161 	.word	0x0801f161
 801f1cc:	0801f2a7 	.word	0x0801f2a7
 801f1d0:	6833      	ldr	r3, [r6, #0]
 801f1d2:	1d1a      	adds	r2, r3, #4
 801f1d4:	681b      	ldr	r3, [r3, #0]
 801f1d6:	6032      	str	r2, [r6, #0]
 801f1d8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801f1dc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801f1e0:	2301      	movs	r3, #1
 801f1e2:	e09d      	b.n	801f320 <_printf_i+0x1e8>
 801f1e4:	6833      	ldr	r3, [r6, #0]
 801f1e6:	6820      	ldr	r0, [r4, #0]
 801f1e8:	1d19      	adds	r1, r3, #4
 801f1ea:	6031      	str	r1, [r6, #0]
 801f1ec:	0606      	lsls	r6, r0, #24
 801f1ee:	d501      	bpl.n	801f1f4 <_printf_i+0xbc>
 801f1f0:	681d      	ldr	r5, [r3, #0]
 801f1f2:	e003      	b.n	801f1fc <_printf_i+0xc4>
 801f1f4:	0645      	lsls	r5, r0, #25
 801f1f6:	d5fb      	bpl.n	801f1f0 <_printf_i+0xb8>
 801f1f8:	f9b3 5000 	ldrsh.w	r5, [r3]
 801f1fc:	2d00      	cmp	r5, #0
 801f1fe:	da03      	bge.n	801f208 <_printf_i+0xd0>
 801f200:	232d      	movs	r3, #45	@ 0x2d
 801f202:	426d      	negs	r5, r5
 801f204:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801f208:	4859      	ldr	r0, [pc, #356]	@ (801f370 <_printf_i+0x238>)
 801f20a:	230a      	movs	r3, #10
 801f20c:	e011      	b.n	801f232 <_printf_i+0xfa>
 801f20e:	6821      	ldr	r1, [r4, #0]
 801f210:	6833      	ldr	r3, [r6, #0]
 801f212:	0608      	lsls	r0, r1, #24
 801f214:	f853 5b04 	ldr.w	r5, [r3], #4
 801f218:	d402      	bmi.n	801f220 <_printf_i+0xe8>
 801f21a:	0649      	lsls	r1, r1, #25
 801f21c:	bf48      	it	mi
 801f21e:	b2ad      	uxthmi	r5, r5
 801f220:	2f6f      	cmp	r7, #111	@ 0x6f
 801f222:	4853      	ldr	r0, [pc, #332]	@ (801f370 <_printf_i+0x238>)
 801f224:	6033      	str	r3, [r6, #0]
 801f226:	bf14      	ite	ne
 801f228:	230a      	movne	r3, #10
 801f22a:	2308      	moveq	r3, #8
 801f22c:	2100      	movs	r1, #0
 801f22e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801f232:	6866      	ldr	r6, [r4, #4]
 801f234:	60a6      	str	r6, [r4, #8]
 801f236:	2e00      	cmp	r6, #0
 801f238:	bfa2      	ittt	ge
 801f23a:	6821      	ldrge	r1, [r4, #0]
 801f23c:	f021 0104 	bicge.w	r1, r1, #4
 801f240:	6021      	strge	r1, [r4, #0]
 801f242:	b90d      	cbnz	r5, 801f248 <_printf_i+0x110>
 801f244:	2e00      	cmp	r6, #0
 801f246:	d04b      	beq.n	801f2e0 <_printf_i+0x1a8>
 801f248:	4616      	mov	r6, r2
 801f24a:	fbb5 f1f3 	udiv	r1, r5, r3
 801f24e:	fb03 5711 	mls	r7, r3, r1, r5
 801f252:	5dc7      	ldrb	r7, [r0, r7]
 801f254:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801f258:	462f      	mov	r7, r5
 801f25a:	42bb      	cmp	r3, r7
 801f25c:	460d      	mov	r5, r1
 801f25e:	d9f4      	bls.n	801f24a <_printf_i+0x112>
 801f260:	2b08      	cmp	r3, #8
 801f262:	d10b      	bne.n	801f27c <_printf_i+0x144>
 801f264:	6823      	ldr	r3, [r4, #0]
 801f266:	07df      	lsls	r7, r3, #31
 801f268:	d508      	bpl.n	801f27c <_printf_i+0x144>
 801f26a:	6923      	ldr	r3, [r4, #16]
 801f26c:	6861      	ldr	r1, [r4, #4]
 801f26e:	4299      	cmp	r1, r3
 801f270:	bfde      	ittt	le
 801f272:	2330      	movle	r3, #48	@ 0x30
 801f274:	f806 3c01 	strble.w	r3, [r6, #-1]
 801f278:	f106 36ff 	addle.w	r6, r6, #4294967295
 801f27c:	1b92      	subs	r2, r2, r6
 801f27e:	6122      	str	r2, [r4, #16]
 801f280:	f8cd a000 	str.w	sl, [sp]
 801f284:	464b      	mov	r3, r9
 801f286:	aa03      	add	r2, sp, #12
 801f288:	4621      	mov	r1, r4
 801f28a:	4640      	mov	r0, r8
 801f28c:	f7ff fee6 	bl	801f05c <_printf_common>
 801f290:	3001      	adds	r0, #1
 801f292:	d14a      	bne.n	801f32a <_printf_i+0x1f2>
 801f294:	f04f 30ff 	mov.w	r0, #4294967295
 801f298:	b004      	add	sp, #16
 801f29a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801f29e:	6823      	ldr	r3, [r4, #0]
 801f2a0:	f043 0320 	orr.w	r3, r3, #32
 801f2a4:	6023      	str	r3, [r4, #0]
 801f2a6:	4833      	ldr	r0, [pc, #204]	@ (801f374 <_printf_i+0x23c>)
 801f2a8:	2778      	movs	r7, #120	@ 0x78
 801f2aa:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801f2ae:	6823      	ldr	r3, [r4, #0]
 801f2b0:	6831      	ldr	r1, [r6, #0]
 801f2b2:	061f      	lsls	r7, r3, #24
 801f2b4:	f851 5b04 	ldr.w	r5, [r1], #4
 801f2b8:	d402      	bmi.n	801f2c0 <_printf_i+0x188>
 801f2ba:	065f      	lsls	r7, r3, #25
 801f2bc:	bf48      	it	mi
 801f2be:	b2ad      	uxthmi	r5, r5
 801f2c0:	6031      	str	r1, [r6, #0]
 801f2c2:	07d9      	lsls	r1, r3, #31
 801f2c4:	bf44      	itt	mi
 801f2c6:	f043 0320 	orrmi.w	r3, r3, #32
 801f2ca:	6023      	strmi	r3, [r4, #0]
 801f2cc:	b11d      	cbz	r5, 801f2d6 <_printf_i+0x19e>
 801f2ce:	2310      	movs	r3, #16
 801f2d0:	e7ac      	b.n	801f22c <_printf_i+0xf4>
 801f2d2:	4827      	ldr	r0, [pc, #156]	@ (801f370 <_printf_i+0x238>)
 801f2d4:	e7e9      	b.n	801f2aa <_printf_i+0x172>
 801f2d6:	6823      	ldr	r3, [r4, #0]
 801f2d8:	f023 0320 	bic.w	r3, r3, #32
 801f2dc:	6023      	str	r3, [r4, #0]
 801f2de:	e7f6      	b.n	801f2ce <_printf_i+0x196>
 801f2e0:	4616      	mov	r6, r2
 801f2e2:	e7bd      	b.n	801f260 <_printf_i+0x128>
 801f2e4:	6833      	ldr	r3, [r6, #0]
 801f2e6:	6825      	ldr	r5, [r4, #0]
 801f2e8:	6961      	ldr	r1, [r4, #20]
 801f2ea:	1d18      	adds	r0, r3, #4
 801f2ec:	6030      	str	r0, [r6, #0]
 801f2ee:	062e      	lsls	r6, r5, #24
 801f2f0:	681b      	ldr	r3, [r3, #0]
 801f2f2:	d501      	bpl.n	801f2f8 <_printf_i+0x1c0>
 801f2f4:	6019      	str	r1, [r3, #0]
 801f2f6:	e002      	b.n	801f2fe <_printf_i+0x1c6>
 801f2f8:	0668      	lsls	r0, r5, #25
 801f2fa:	d5fb      	bpl.n	801f2f4 <_printf_i+0x1bc>
 801f2fc:	8019      	strh	r1, [r3, #0]
 801f2fe:	2300      	movs	r3, #0
 801f300:	6123      	str	r3, [r4, #16]
 801f302:	4616      	mov	r6, r2
 801f304:	e7bc      	b.n	801f280 <_printf_i+0x148>
 801f306:	6833      	ldr	r3, [r6, #0]
 801f308:	1d1a      	adds	r2, r3, #4
 801f30a:	6032      	str	r2, [r6, #0]
 801f30c:	681e      	ldr	r6, [r3, #0]
 801f30e:	6862      	ldr	r2, [r4, #4]
 801f310:	2100      	movs	r1, #0
 801f312:	4630      	mov	r0, r6
 801f314:	f7e0 fff4 	bl	8000300 <memchr>
 801f318:	b108      	cbz	r0, 801f31e <_printf_i+0x1e6>
 801f31a:	1b80      	subs	r0, r0, r6
 801f31c:	6060      	str	r0, [r4, #4]
 801f31e:	6863      	ldr	r3, [r4, #4]
 801f320:	6123      	str	r3, [r4, #16]
 801f322:	2300      	movs	r3, #0
 801f324:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801f328:	e7aa      	b.n	801f280 <_printf_i+0x148>
 801f32a:	6923      	ldr	r3, [r4, #16]
 801f32c:	4632      	mov	r2, r6
 801f32e:	4649      	mov	r1, r9
 801f330:	4640      	mov	r0, r8
 801f332:	47d0      	blx	sl
 801f334:	3001      	adds	r0, #1
 801f336:	d0ad      	beq.n	801f294 <_printf_i+0x15c>
 801f338:	6823      	ldr	r3, [r4, #0]
 801f33a:	079b      	lsls	r3, r3, #30
 801f33c:	d413      	bmi.n	801f366 <_printf_i+0x22e>
 801f33e:	68e0      	ldr	r0, [r4, #12]
 801f340:	9b03      	ldr	r3, [sp, #12]
 801f342:	4298      	cmp	r0, r3
 801f344:	bfb8      	it	lt
 801f346:	4618      	movlt	r0, r3
 801f348:	e7a6      	b.n	801f298 <_printf_i+0x160>
 801f34a:	2301      	movs	r3, #1
 801f34c:	4632      	mov	r2, r6
 801f34e:	4649      	mov	r1, r9
 801f350:	4640      	mov	r0, r8
 801f352:	47d0      	blx	sl
 801f354:	3001      	adds	r0, #1
 801f356:	d09d      	beq.n	801f294 <_printf_i+0x15c>
 801f358:	3501      	adds	r5, #1
 801f35a:	68e3      	ldr	r3, [r4, #12]
 801f35c:	9903      	ldr	r1, [sp, #12]
 801f35e:	1a5b      	subs	r3, r3, r1
 801f360:	42ab      	cmp	r3, r5
 801f362:	dcf2      	bgt.n	801f34a <_printf_i+0x212>
 801f364:	e7eb      	b.n	801f33e <_printf_i+0x206>
 801f366:	2500      	movs	r5, #0
 801f368:	f104 0619 	add.w	r6, r4, #25
 801f36c:	e7f5      	b.n	801f35a <_printf_i+0x222>
 801f36e:	bf00      	nop
 801f370:	080207b6 	.word	0x080207b6
 801f374:	080207c7 	.word	0x080207c7

0801f378 <__sflush_r>:
 801f378:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801f37c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f380:	0716      	lsls	r6, r2, #28
 801f382:	4605      	mov	r5, r0
 801f384:	460c      	mov	r4, r1
 801f386:	d454      	bmi.n	801f432 <__sflush_r+0xba>
 801f388:	684b      	ldr	r3, [r1, #4]
 801f38a:	2b00      	cmp	r3, #0
 801f38c:	dc02      	bgt.n	801f394 <__sflush_r+0x1c>
 801f38e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801f390:	2b00      	cmp	r3, #0
 801f392:	dd48      	ble.n	801f426 <__sflush_r+0xae>
 801f394:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801f396:	2e00      	cmp	r6, #0
 801f398:	d045      	beq.n	801f426 <__sflush_r+0xae>
 801f39a:	2300      	movs	r3, #0
 801f39c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801f3a0:	682f      	ldr	r7, [r5, #0]
 801f3a2:	6a21      	ldr	r1, [r4, #32]
 801f3a4:	602b      	str	r3, [r5, #0]
 801f3a6:	d030      	beq.n	801f40a <__sflush_r+0x92>
 801f3a8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801f3aa:	89a3      	ldrh	r3, [r4, #12]
 801f3ac:	0759      	lsls	r1, r3, #29
 801f3ae:	d505      	bpl.n	801f3bc <__sflush_r+0x44>
 801f3b0:	6863      	ldr	r3, [r4, #4]
 801f3b2:	1ad2      	subs	r2, r2, r3
 801f3b4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801f3b6:	b10b      	cbz	r3, 801f3bc <__sflush_r+0x44>
 801f3b8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801f3ba:	1ad2      	subs	r2, r2, r3
 801f3bc:	2300      	movs	r3, #0
 801f3be:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801f3c0:	6a21      	ldr	r1, [r4, #32]
 801f3c2:	4628      	mov	r0, r5
 801f3c4:	47b0      	blx	r6
 801f3c6:	1c43      	adds	r3, r0, #1
 801f3c8:	89a3      	ldrh	r3, [r4, #12]
 801f3ca:	d106      	bne.n	801f3da <__sflush_r+0x62>
 801f3cc:	6829      	ldr	r1, [r5, #0]
 801f3ce:	291d      	cmp	r1, #29
 801f3d0:	d82b      	bhi.n	801f42a <__sflush_r+0xb2>
 801f3d2:	4a2a      	ldr	r2, [pc, #168]	@ (801f47c <__sflush_r+0x104>)
 801f3d4:	410a      	asrs	r2, r1
 801f3d6:	07d6      	lsls	r6, r2, #31
 801f3d8:	d427      	bmi.n	801f42a <__sflush_r+0xb2>
 801f3da:	2200      	movs	r2, #0
 801f3dc:	6062      	str	r2, [r4, #4]
 801f3de:	04d9      	lsls	r1, r3, #19
 801f3e0:	6922      	ldr	r2, [r4, #16]
 801f3e2:	6022      	str	r2, [r4, #0]
 801f3e4:	d504      	bpl.n	801f3f0 <__sflush_r+0x78>
 801f3e6:	1c42      	adds	r2, r0, #1
 801f3e8:	d101      	bne.n	801f3ee <__sflush_r+0x76>
 801f3ea:	682b      	ldr	r3, [r5, #0]
 801f3ec:	b903      	cbnz	r3, 801f3f0 <__sflush_r+0x78>
 801f3ee:	6560      	str	r0, [r4, #84]	@ 0x54
 801f3f0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801f3f2:	602f      	str	r7, [r5, #0]
 801f3f4:	b1b9      	cbz	r1, 801f426 <__sflush_r+0xae>
 801f3f6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801f3fa:	4299      	cmp	r1, r3
 801f3fc:	d002      	beq.n	801f404 <__sflush_r+0x8c>
 801f3fe:	4628      	mov	r0, r5
 801f400:	f7ff fc98 	bl	801ed34 <_free_r>
 801f404:	2300      	movs	r3, #0
 801f406:	6363      	str	r3, [r4, #52]	@ 0x34
 801f408:	e00d      	b.n	801f426 <__sflush_r+0xae>
 801f40a:	2301      	movs	r3, #1
 801f40c:	4628      	mov	r0, r5
 801f40e:	47b0      	blx	r6
 801f410:	4602      	mov	r2, r0
 801f412:	1c50      	adds	r0, r2, #1
 801f414:	d1c9      	bne.n	801f3aa <__sflush_r+0x32>
 801f416:	682b      	ldr	r3, [r5, #0]
 801f418:	2b00      	cmp	r3, #0
 801f41a:	d0c6      	beq.n	801f3aa <__sflush_r+0x32>
 801f41c:	2b1d      	cmp	r3, #29
 801f41e:	d001      	beq.n	801f424 <__sflush_r+0xac>
 801f420:	2b16      	cmp	r3, #22
 801f422:	d11e      	bne.n	801f462 <__sflush_r+0xea>
 801f424:	602f      	str	r7, [r5, #0]
 801f426:	2000      	movs	r0, #0
 801f428:	e022      	b.n	801f470 <__sflush_r+0xf8>
 801f42a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801f42e:	b21b      	sxth	r3, r3
 801f430:	e01b      	b.n	801f46a <__sflush_r+0xf2>
 801f432:	690f      	ldr	r7, [r1, #16]
 801f434:	2f00      	cmp	r7, #0
 801f436:	d0f6      	beq.n	801f426 <__sflush_r+0xae>
 801f438:	0793      	lsls	r3, r2, #30
 801f43a:	680e      	ldr	r6, [r1, #0]
 801f43c:	bf08      	it	eq
 801f43e:	694b      	ldreq	r3, [r1, #20]
 801f440:	600f      	str	r7, [r1, #0]
 801f442:	bf18      	it	ne
 801f444:	2300      	movne	r3, #0
 801f446:	eba6 0807 	sub.w	r8, r6, r7
 801f44a:	608b      	str	r3, [r1, #8]
 801f44c:	f1b8 0f00 	cmp.w	r8, #0
 801f450:	dde9      	ble.n	801f426 <__sflush_r+0xae>
 801f452:	6a21      	ldr	r1, [r4, #32]
 801f454:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801f456:	4643      	mov	r3, r8
 801f458:	463a      	mov	r2, r7
 801f45a:	4628      	mov	r0, r5
 801f45c:	47b0      	blx	r6
 801f45e:	2800      	cmp	r0, #0
 801f460:	dc08      	bgt.n	801f474 <__sflush_r+0xfc>
 801f462:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801f466:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801f46a:	81a3      	strh	r3, [r4, #12]
 801f46c:	f04f 30ff 	mov.w	r0, #4294967295
 801f470:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f474:	4407      	add	r7, r0
 801f476:	eba8 0800 	sub.w	r8, r8, r0
 801f47a:	e7e7      	b.n	801f44c <__sflush_r+0xd4>
 801f47c:	dfbffffe 	.word	0xdfbffffe

0801f480 <_fflush_r>:
 801f480:	b538      	push	{r3, r4, r5, lr}
 801f482:	690b      	ldr	r3, [r1, #16]
 801f484:	4605      	mov	r5, r0
 801f486:	460c      	mov	r4, r1
 801f488:	b913      	cbnz	r3, 801f490 <_fflush_r+0x10>
 801f48a:	2500      	movs	r5, #0
 801f48c:	4628      	mov	r0, r5
 801f48e:	bd38      	pop	{r3, r4, r5, pc}
 801f490:	b118      	cbz	r0, 801f49a <_fflush_r+0x1a>
 801f492:	6a03      	ldr	r3, [r0, #32]
 801f494:	b90b      	cbnz	r3, 801f49a <_fflush_r+0x1a>
 801f496:	f7ff f9cf 	bl	801e838 <__sinit>
 801f49a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801f49e:	2b00      	cmp	r3, #0
 801f4a0:	d0f3      	beq.n	801f48a <_fflush_r+0xa>
 801f4a2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801f4a4:	07d0      	lsls	r0, r2, #31
 801f4a6:	d404      	bmi.n	801f4b2 <_fflush_r+0x32>
 801f4a8:	0599      	lsls	r1, r3, #22
 801f4aa:	d402      	bmi.n	801f4b2 <_fflush_r+0x32>
 801f4ac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801f4ae:	f7ff fc30 	bl	801ed12 <__retarget_lock_acquire_recursive>
 801f4b2:	4628      	mov	r0, r5
 801f4b4:	4621      	mov	r1, r4
 801f4b6:	f7ff ff5f 	bl	801f378 <__sflush_r>
 801f4ba:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801f4bc:	07da      	lsls	r2, r3, #31
 801f4be:	4605      	mov	r5, r0
 801f4c0:	d4e4      	bmi.n	801f48c <_fflush_r+0xc>
 801f4c2:	89a3      	ldrh	r3, [r4, #12]
 801f4c4:	059b      	lsls	r3, r3, #22
 801f4c6:	d4e1      	bmi.n	801f48c <_fflush_r+0xc>
 801f4c8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801f4ca:	f7ff fc23 	bl	801ed14 <__retarget_lock_release_recursive>
 801f4ce:	e7dd      	b.n	801f48c <_fflush_r+0xc>

0801f4d0 <__swhatbuf_r>:
 801f4d0:	b570      	push	{r4, r5, r6, lr}
 801f4d2:	460c      	mov	r4, r1
 801f4d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801f4d8:	2900      	cmp	r1, #0
 801f4da:	b096      	sub	sp, #88	@ 0x58
 801f4dc:	4615      	mov	r5, r2
 801f4de:	461e      	mov	r6, r3
 801f4e0:	da0d      	bge.n	801f4fe <__swhatbuf_r+0x2e>
 801f4e2:	89a3      	ldrh	r3, [r4, #12]
 801f4e4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801f4e8:	f04f 0100 	mov.w	r1, #0
 801f4ec:	bf14      	ite	ne
 801f4ee:	2340      	movne	r3, #64	@ 0x40
 801f4f0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801f4f4:	2000      	movs	r0, #0
 801f4f6:	6031      	str	r1, [r6, #0]
 801f4f8:	602b      	str	r3, [r5, #0]
 801f4fa:	b016      	add	sp, #88	@ 0x58
 801f4fc:	bd70      	pop	{r4, r5, r6, pc}
 801f4fe:	466a      	mov	r2, sp
 801f500:	f000 f87c 	bl	801f5fc <_fstat_r>
 801f504:	2800      	cmp	r0, #0
 801f506:	dbec      	blt.n	801f4e2 <__swhatbuf_r+0x12>
 801f508:	9901      	ldr	r1, [sp, #4]
 801f50a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801f50e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801f512:	4259      	negs	r1, r3
 801f514:	4159      	adcs	r1, r3
 801f516:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801f51a:	e7eb      	b.n	801f4f4 <__swhatbuf_r+0x24>

0801f51c <__smakebuf_r>:
 801f51c:	898b      	ldrh	r3, [r1, #12]
 801f51e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801f520:	079d      	lsls	r5, r3, #30
 801f522:	4606      	mov	r6, r0
 801f524:	460c      	mov	r4, r1
 801f526:	d507      	bpl.n	801f538 <__smakebuf_r+0x1c>
 801f528:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801f52c:	6023      	str	r3, [r4, #0]
 801f52e:	6123      	str	r3, [r4, #16]
 801f530:	2301      	movs	r3, #1
 801f532:	6163      	str	r3, [r4, #20]
 801f534:	b003      	add	sp, #12
 801f536:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801f538:	ab01      	add	r3, sp, #4
 801f53a:	466a      	mov	r2, sp
 801f53c:	f7ff ffc8 	bl	801f4d0 <__swhatbuf_r>
 801f540:	9f00      	ldr	r7, [sp, #0]
 801f542:	4605      	mov	r5, r0
 801f544:	4639      	mov	r1, r7
 801f546:	4630      	mov	r0, r6
 801f548:	f7ff f828 	bl	801e59c <_malloc_r>
 801f54c:	b948      	cbnz	r0, 801f562 <__smakebuf_r+0x46>
 801f54e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801f552:	059a      	lsls	r2, r3, #22
 801f554:	d4ee      	bmi.n	801f534 <__smakebuf_r+0x18>
 801f556:	f023 0303 	bic.w	r3, r3, #3
 801f55a:	f043 0302 	orr.w	r3, r3, #2
 801f55e:	81a3      	strh	r3, [r4, #12]
 801f560:	e7e2      	b.n	801f528 <__smakebuf_r+0xc>
 801f562:	89a3      	ldrh	r3, [r4, #12]
 801f564:	6020      	str	r0, [r4, #0]
 801f566:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801f56a:	81a3      	strh	r3, [r4, #12]
 801f56c:	9b01      	ldr	r3, [sp, #4]
 801f56e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801f572:	b15b      	cbz	r3, 801f58c <__smakebuf_r+0x70>
 801f574:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801f578:	4630      	mov	r0, r6
 801f57a:	f000 f851 	bl	801f620 <_isatty_r>
 801f57e:	b128      	cbz	r0, 801f58c <__smakebuf_r+0x70>
 801f580:	89a3      	ldrh	r3, [r4, #12]
 801f582:	f023 0303 	bic.w	r3, r3, #3
 801f586:	f043 0301 	orr.w	r3, r3, #1
 801f58a:	81a3      	strh	r3, [r4, #12]
 801f58c:	89a3      	ldrh	r3, [r4, #12]
 801f58e:	431d      	orrs	r5, r3
 801f590:	81a5      	strh	r5, [r4, #12]
 801f592:	e7cf      	b.n	801f534 <__smakebuf_r+0x18>

0801f594 <_putc_r>:
 801f594:	b570      	push	{r4, r5, r6, lr}
 801f596:	460d      	mov	r5, r1
 801f598:	4614      	mov	r4, r2
 801f59a:	4606      	mov	r6, r0
 801f59c:	b118      	cbz	r0, 801f5a6 <_putc_r+0x12>
 801f59e:	6a03      	ldr	r3, [r0, #32]
 801f5a0:	b90b      	cbnz	r3, 801f5a6 <_putc_r+0x12>
 801f5a2:	f7ff f949 	bl	801e838 <__sinit>
 801f5a6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801f5a8:	07d8      	lsls	r0, r3, #31
 801f5aa:	d405      	bmi.n	801f5b8 <_putc_r+0x24>
 801f5ac:	89a3      	ldrh	r3, [r4, #12]
 801f5ae:	0599      	lsls	r1, r3, #22
 801f5b0:	d402      	bmi.n	801f5b8 <_putc_r+0x24>
 801f5b2:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801f5b4:	f7ff fbad 	bl	801ed12 <__retarget_lock_acquire_recursive>
 801f5b8:	68a3      	ldr	r3, [r4, #8]
 801f5ba:	3b01      	subs	r3, #1
 801f5bc:	2b00      	cmp	r3, #0
 801f5be:	60a3      	str	r3, [r4, #8]
 801f5c0:	da05      	bge.n	801f5ce <_putc_r+0x3a>
 801f5c2:	69a2      	ldr	r2, [r4, #24]
 801f5c4:	4293      	cmp	r3, r2
 801f5c6:	db12      	blt.n	801f5ee <_putc_r+0x5a>
 801f5c8:	b2eb      	uxtb	r3, r5
 801f5ca:	2b0a      	cmp	r3, #10
 801f5cc:	d00f      	beq.n	801f5ee <_putc_r+0x5a>
 801f5ce:	6823      	ldr	r3, [r4, #0]
 801f5d0:	1c5a      	adds	r2, r3, #1
 801f5d2:	6022      	str	r2, [r4, #0]
 801f5d4:	701d      	strb	r5, [r3, #0]
 801f5d6:	b2ed      	uxtb	r5, r5
 801f5d8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801f5da:	07da      	lsls	r2, r3, #31
 801f5dc:	d405      	bmi.n	801f5ea <_putc_r+0x56>
 801f5de:	89a3      	ldrh	r3, [r4, #12]
 801f5e0:	059b      	lsls	r3, r3, #22
 801f5e2:	d402      	bmi.n	801f5ea <_putc_r+0x56>
 801f5e4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801f5e6:	f7ff fb95 	bl	801ed14 <__retarget_lock_release_recursive>
 801f5ea:	4628      	mov	r0, r5
 801f5ec:	bd70      	pop	{r4, r5, r6, pc}
 801f5ee:	4629      	mov	r1, r5
 801f5f0:	4622      	mov	r2, r4
 801f5f2:	4630      	mov	r0, r6
 801f5f4:	f7ff fa11 	bl	801ea1a <__swbuf_r>
 801f5f8:	4605      	mov	r5, r0
 801f5fa:	e7ed      	b.n	801f5d8 <_putc_r+0x44>

0801f5fc <_fstat_r>:
 801f5fc:	b538      	push	{r3, r4, r5, lr}
 801f5fe:	4d07      	ldr	r5, [pc, #28]	@ (801f61c <_fstat_r+0x20>)
 801f600:	2300      	movs	r3, #0
 801f602:	4604      	mov	r4, r0
 801f604:	4608      	mov	r0, r1
 801f606:	4611      	mov	r1, r2
 801f608:	602b      	str	r3, [r5, #0]
 801f60a:	f7ec fc19 	bl	800be40 <_fstat>
 801f60e:	1c43      	adds	r3, r0, #1
 801f610:	d102      	bne.n	801f618 <_fstat_r+0x1c>
 801f612:	682b      	ldr	r3, [r5, #0]
 801f614:	b103      	cbz	r3, 801f618 <_fstat_r+0x1c>
 801f616:	6023      	str	r3, [r4, #0]
 801f618:	bd38      	pop	{r3, r4, r5, pc}
 801f61a:	bf00      	nop
 801f61c:	24000cd8 	.word	0x24000cd8

0801f620 <_isatty_r>:
 801f620:	b538      	push	{r3, r4, r5, lr}
 801f622:	4d06      	ldr	r5, [pc, #24]	@ (801f63c <_isatty_r+0x1c>)
 801f624:	2300      	movs	r3, #0
 801f626:	4604      	mov	r4, r0
 801f628:	4608      	mov	r0, r1
 801f62a:	602b      	str	r3, [r5, #0]
 801f62c:	f7ec fc18 	bl	800be60 <_isatty>
 801f630:	1c43      	adds	r3, r0, #1
 801f632:	d102      	bne.n	801f63a <_isatty_r+0x1a>
 801f634:	682b      	ldr	r3, [r5, #0]
 801f636:	b103      	cbz	r3, 801f63a <_isatty_r+0x1a>
 801f638:	6023      	str	r3, [r4, #0]
 801f63a:	bd38      	pop	{r3, r4, r5, pc}
 801f63c:	24000cd8 	.word	0x24000cd8

0801f640 <_init>:
 801f640:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f642:	bf00      	nop
 801f644:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801f646:	bc08      	pop	{r3}
 801f648:	469e      	mov	lr, r3
 801f64a:	4770      	bx	lr

0801f64c <_fini>:
 801f64c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f64e:	bf00      	nop
 801f650:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801f652:	bc08      	pop	{r3}
 801f654:	469e      	mov	lr, r3
 801f656:	4770      	bx	lr
