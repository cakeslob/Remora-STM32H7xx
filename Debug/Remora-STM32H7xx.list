
Remora-STM32H7xx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013ffc  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007ac  0801429c  0801429c  0001529c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08014a48  08014a48  00015a48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000008  08014a50  08014a50  00015a50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000008  08014a58  08014a58  00015a58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000000c4  24000000  08014a60  00016000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000e0c  240000e0  08014b24  000160e0  2**5
                  ALLOC
  8 ._user_heap_stack 00000604  24000eec  08014b24  00016eec  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000160c4  2**0
                  CONTENTS, READONLY
 10 .debug_info   000459ef  00000000  00000000  000160f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000068f7  00000000  00000000  0005bae1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001ca0  00000000  00000000  000623d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 000015fe  00000000  00000000  00064078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0000c05b  00000000  00000000  00065676  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0002f083  00000000  00000000  000716d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00181927  00000000  00000000  000a0754  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  0022207b  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00009918  00000000  00000000  002220c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000069  00000000  00000000  0022b9d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240000e0 	.word	0x240000e0
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08014284 	.word	0x08014284

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240000e4 	.word	0x240000e4
 80002dc:	08014284 	.word	0x08014284

080002e0 <strcmp>:
 80002e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80002e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002e8:	2a01      	cmp	r2, #1
 80002ea:	bf28      	it	cs
 80002ec:	429a      	cmpcs	r2, r3
 80002ee:	d0f7      	beq.n	80002e0 <strcmp>
 80002f0:	1ad0      	subs	r0, r2, r3
 80002f2:	4770      	bx	lr
	...

08000300 <memchr>:
 8000300:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000304:	2a10      	cmp	r2, #16
 8000306:	db2b      	blt.n	8000360 <memchr+0x60>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	d008      	beq.n	8000320 <memchr+0x20>
 800030e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000312:	3a01      	subs	r2, #1
 8000314:	428b      	cmp	r3, r1
 8000316:	d02d      	beq.n	8000374 <memchr+0x74>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	b342      	cbz	r2, 8000370 <memchr+0x70>
 800031e:	d1f6      	bne.n	800030e <memchr+0xe>
 8000320:	b4f0      	push	{r4, r5, r6, r7}
 8000322:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000326:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800032a:	f022 0407 	bic.w	r4, r2, #7
 800032e:	f07f 0700 	mvns.w	r7, #0
 8000332:	2300      	movs	r3, #0
 8000334:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000338:	3c08      	subs	r4, #8
 800033a:	ea85 0501 	eor.w	r5, r5, r1
 800033e:	ea86 0601 	eor.w	r6, r6, r1
 8000342:	fa85 f547 	uadd8	r5, r5, r7
 8000346:	faa3 f587 	sel	r5, r3, r7
 800034a:	fa86 f647 	uadd8	r6, r6, r7
 800034e:	faa5 f687 	sel	r6, r5, r7
 8000352:	b98e      	cbnz	r6, 8000378 <memchr+0x78>
 8000354:	d1ee      	bne.n	8000334 <memchr+0x34>
 8000356:	bcf0      	pop	{r4, r5, r6, r7}
 8000358:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800035c:	f002 0207 	and.w	r2, r2, #7
 8000360:	b132      	cbz	r2, 8000370 <memchr+0x70>
 8000362:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000366:	3a01      	subs	r2, #1
 8000368:	ea83 0301 	eor.w	r3, r3, r1
 800036c:	b113      	cbz	r3, 8000374 <memchr+0x74>
 800036e:	d1f8      	bne.n	8000362 <memchr+0x62>
 8000370:	2000      	movs	r0, #0
 8000372:	4770      	bx	lr
 8000374:	3801      	subs	r0, #1
 8000376:	4770      	bx	lr
 8000378:	2d00      	cmp	r5, #0
 800037a:	bf06      	itte	eq
 800037c:	4635      	moveq	r5, r6
 800037e:	3803      	subeq	r0, #3
 8000380:	3807      	subne	r0, #7
 8000382:	f015 0f01 	tst.w	r5, #1
 8000386:	d107      	bne.n	8000398 <memchr+0x98>
 8000388:	3001      	adds	r0, #1
 800038a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800038e:	bf02      	ittt	eq
 8000390:	3001      	addeq	r0, #1
 8000392:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000396:	3001      	addeq	r0, #1
 8000398:	bcf0      	pop	{r4, r5, r6, r7}
 800039a:	3801      	subs	r0, #1
 800039c:	4770      	bx	lr
 800039e:	bf00      	nop

080003a0 <__aeabi_drsub>:
 80003a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80003a4:	e002      	b.n	80003ac <__adddf3>
 80003a6:	bf00      	nop

080003a8 <__aeabi_dsub>:
 80003a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080003ac <__adddf3>:
 80003ac:	b530      	push	{r4, r5, lr}
 80003ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003b6:	ea94 0f05 	teq	r4, r5
 80003ba:	bf08      	it	eq
 80003bc:	ea90 0f02 	teqeq	r0, r2
 80003c0:	bf1f      	itttt	ne
 80003c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d2:	f000 80e2 	beq.w	800059a <__adddf3+0x1ee>
 80003d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003de:	bfb8      	it	lt
 80003e0:	426d      	neglt	r5, r5
 80003e2:	dd0c      	ble.n	80003fe <__adddf3+0x52>
 80003e4:	442c      	add	r4, r5
 80003e6:	ea80 0202 	eor.w	r2, r0, r2
 80003ea:	ea81 0303 	eor.w	r3, r1, r3
 80003ee:	ea82 0000 	eor.w	r0, r2, r0
 80003f2:	ea83 0101 	eor.w	r1, r3, r1
 80003f6:	ea80 0202 	eor.w	r2, r0, r2
 80003fa:	ea81 0303 	eor.w	r3, r1, r3
 80003fe:	2d36      	cmp	r5, #54	@ 0x36
 8000400:	bf88      	it	hi
 8000402:	bd30      	pophi	{r4, r5, pc}
 8000404:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000408:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800040c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000410:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000414:	d002      	beq.n	800041c <__adddf3+0x70>
 8000416:	4240      	negs	r0, r0
 8000418:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800041c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000420:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000424:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000428:	d002      	beq.n	8000430 <__adddf3+0x84>
 800042a:	4252      	negs	r2, r2
 800042c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000430:	ea94 0f05 	teq	r4, r5
 8000434:	f000 80a7 	beq.w	8000586 <__adddf3+0x1da>
 8000438:	f1a4 0401 	sub.w	r4, r4, #1
 800043c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000440:	db0d      	blt.n	800045e <__adddf3+0xb2>
 8000442:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000446:	fa22 f205 	lsr.w	r2, r2, r5
 800044a:	1880      	adds	r0, r0, r2
 800044c:	f141 0100 	adc.w	r1, r1, #0
 8000450:	fa03 f20e 	lsl.w	r2, r3, lr
 8000454:	1880      	adds	r0, r0, r2
 8000456:	fa43 f305 	asr.w	r3, r3, r5
 800045a:	4159      	adcs	r1, r3
 800045c:	e00e      	b.n	800047c <__adddf3+0xd0>
 800045e:	f1a5 0520 	sub.w	r5, r5, #32
 8000462:	f10e 0e20 	add.w	lr, lr, #32
 8000466:	2a01      	cmp	r2, #1
 8000468:	fa03 fc0e 	lsl.w	ip, r3, lr
 800046c:	bf28      	it	cs
 800046e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000472:	fa43 f305 	asr.w	r3, r3, r5
 8000476:	18c0      	adds	r0, r0, r3
 8000478:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800047c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000480:	d507      	bpl.n	8000492 <__adddf3+0xe6>
 8000482:	f04f 0e00 	mov.w	lr, #0
 8000486:	f1dc 0c00 	rsbs	ip, ip, #0
 800048a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800048e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000492:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000496:	d31b      	bcc.n	80004d0 <__adddf3+0x124>
 8000498:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800049c:	d30c      	bcc.n	80004b8 <__adddf3+0x10c>
 800049e:	0849      	lsrs	r1, r1, #1
 80004a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80004a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004a8:	f104 0401 	add.w	r4, r4, #1
 80004ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80004b4:	f080 809a 	bcs.w	80005ec <__adddf3+0x240>
 80004b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004bc:	bf08      	it	eq
 80004be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004c2:	f150 0000 	adcs.w	r0, r0, #0
 80004c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ca:	ea41 0105 	orr.w	r1, r1, r5
 80004ce:	bd30      	pop	{r4, r5, pc}
 80004d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004d4:	4140      	adcs	r0, r0
 80004d6:	eb41 0101 	adc.w	r1, r1, r1
 80004da:	3c01      	subs	r4, #1
 80004dc:	bf28      	it	cs
 80004de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80004e2:	d2e9      	bcs.n	80004b8 <__adddf3+0x10c>
 80004e4:	f091 0f00 	teq	r1, #0
 80004e8:	bf04      	itt	eq
 80004ea:	4601      	moveq	r1, r0
 80004ec:	2000      	moveq	r0, #0
 80004ee:	fab1 f381 	clz	r3, r1
 80004f2:	bf08      	it	eq
 80004f4:	3320      	addeq	r3, #32
 80004f6:	f1a3 030b 	sub.w	r3, r3, #11
 80004fa:	f1b3 0220 	subs.w	r2, r3, #32
 80004fe:	da0c      	bge.n	800051a <__adddf3+0x16e>
 8000500:	320c      	adds	r2, #12
 8000502:	dd08      	ble.n	8000516 <__adddf3+0x16a>
 8000504:	f102 0c14 	add.w	ip, r2, #20
 8000508:	f1c2 020c 	rsb	r2, r2, #12
 800050c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000510:	fa21 f102 	lsr.w	r1, r1, r2
 8000514:	e00c      	b.n	8000530 <__adddf3+0x184>
 8000516:	f102 0214 	add.w	r2, r2, #20
 800051a:	bfd8      	it	le
 800051c:	f1c2 0c20 	rsble	ip, r2, #32
 8000520:	fa01 f102 	lsl.w	r1, r1, r2
 8000524:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000528:	bfdc      	itt	le
 800052a:	ea41 010c 	orrle.w	r1, r1, ip
 800052e:	4090      	lslle	r0, r2
 8000530:	1ae4      	subs	r4, r4, r3
 8000532:	bfa2      	ittt	ge
 8000534:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000538:	4329      	orrge	r1, r5
 800053a:	bd30      	popge	{r4, r5, pc}
 800053c:	ea6f 0404 	mvn.w	r4, r4
 8000540:	3c1f      	subs	r4, #31
 8000542:	da1c      	bge.n	800057e <__adddf3+0x1d2>
 8000544:	340c      	adds	r4, #12
 8000546:	dc0e      	bgt.n	8000566 <__adddf3+0x1ba>
 8000548:	f104 0414 	add.w	r4, r4, #20
 800054c:	f1c4 0220 	rsb	r2, r4, #32
 8000550:	fa20 f004 	lsr.w	r0, r0, r4
 8000554:	fa01 f302 	lsl.w	r3, r1, r2
 8000558:	ea40 0003 	orr.w	r0, r0, r3
 800055c:	fa21 f304 	lsr.w	r3, r1, r4
 8000560:	ea45 0103 	orr.w	r1, r5, r3
 8000564:	bd30      	pop	{r4, r5, pc}
 8000566:	f1c4 040c 	rsb	r4, r4, #12
 800056a:	f1c4 0220 	rsb	r2, r4, #32
 800056e:	fa20 f002 	lsr.w	r0, r0, r2
 8000572:	fa01 f304 	lsl.w	r3, r1, r4
 8000576:	ea40 0003 	orr.w	r0, r0, r3
 800057a:	4629      	mov	r1, r5
 800057c:	bd30      	pop	{r4, r5, pc}
 800057e:	fa21 f004 	lsr.w	r0, r1, r4
 8000582:	4629      	mov	r1, r5
 8000584:	bd30      	pop	{r4, r5, pc}
 8000586:	f094 0f00 	teq	r4, #0
 800058a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800058e:	bf06      	itte	eq
 8000590:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000594:	3401      	addeq	r4, #1
 8000596:	3d01      	subne	r5, #1
 8000598:	e74e      	b.n	8000438 <__adddf3+0x8c>
 800059a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800059e:	bf18      	it	ne
 80005a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005a4:	d029      	beq.n	80005fa <__adddf3+0x24e>
 80005a6:	ea94 0f05 	teq	r4, r5
 80005aa:	bf08      	it	eq
 80005ac:	ea90 0f02 	teqeq	r0, r2
 80005b0:	d005      	beq.n	80005be <__adddf3+0x212>
 80005b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005b6:	bf04      	itt	eq
 80005b8:	4619      	moveq	r1, r3
 80005ba:	4610      	moveq	r0, r2
 80005bc:	bd30      	pop	{r4, r5, pc}
 80005be:	ea91 0f03 	teq	r1, r3
 80005c2:	bf1e      	ittt	ne
 80005c4:	2100      	movne	r1, #0
 80005c6:	2000      	movne	r0, #0
 80005c8:	bd30      	popne	{r4, r5, pc}
 80005ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005ce:	d105      	bne.n	80005dc <__adddf3+0x230>
 80005d0:	0040      	lsls	r0, r0, #1
 80005d2:	4149      	adcs	r1, r1
 80005d4:	bf28      	it	cs
 80005d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80005da:	bd30      	pop	{r4, r5, pc}
 80005dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80005e0:	bf3c      	itt	cc
 80005e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80005e6:	bd30      	popcc	{r4, r5, pc}
 80005e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80005f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80005f4:	f04f 0000 	mov.w	r0, #0
 80005f8:	bd30      	pop	{r4, r5, pc}
 80005fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005fe:	bf1a      	itte	ne
 8000600:	4619      	movne	r1, r3
 8000602:	4610      	movne	r0, r2
 8000604:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000608:	bf1c      	itt	ne
 800060a:	460b      	movne	r3, r1
 800060c:	4602      	movne	r2, r0
 800060e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000612:	bf06      	itte	eq
 8000614:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000618:	ea91 0f03 	teqeq	r1, r3
 800061c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000620:	bd30      	pop	{r4, r5, pc}
 8000622:	bf00      	nop

08000624 <__aeabi_ui2d>:
 8000624:	f090 0f00 	teq	r0, #0
 8000628:	bf04      	itt	eq
 800062a:	2100      	moveq	r1, #0
 800062c:	4770      	bxeq	lr
 800062e:	b530      	push	{r4, r5, lr}
 8000630:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000634:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000638:	f04f 0500 	mov.w	r5, #0
 800063c:	f04f 0100 	mov.w	r1, #0
 8000640:	e750      	b.n	80004e4 <__adddf3+0x138>
 8000642:	bf00      	nop

08000644 <__aeabi_i2d>:
 8000644:	f090 0f00 	teq	r0, #0
 8000648:	bf04      	itt	eq
 800064a:	2100      	moveq	r1, #0
 800064c:	4770      	bxeq	lr
 800064e:	b530      	push	{r4, r5, lr}
 8000650:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000654:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000658:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800065c:	bf48      	it	mi
 800065e:	4240      	negmi	r0, r0
 8000660:	f04f 0100 	mov.w	r1, #0
 8000664:	e73e      	b.n	80004e4 <__adddf3+0x138>
 8000666:	bf00      	nop

08000668 <__aeabi_f2d>:
 8000668:	0042      	lsls	r2, r0, #1
 800066a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800066e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000672:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000676:	bf1f      	itttt	ne
 8000678:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800067c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000680:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000684:	4770      	bxne	lr
 8000686:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800068a:	bf08      	it	eq
 800068c:	4770      	bxeq	lr
 800068e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000692:	bf04      	itt	eq
 8000694:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000698:	4770      	bxeq	lr
 800069a:	b530      	push	{r4, r5, lr}
 800069c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80006a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80006a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006a8:	e71c      	b.n	80004e4 <__adddf3+0x138>
 80006aa:	bf00      	nop

080006ac <__aeabi_ul2d>:
 80006ac:	ea50 0201 	orrs.w	r2, r0, r1
 80006b0:	bf08      	it	eq
 80006b2:	4770      	bxeq	lr
 80006b4:	b530      	push	{r4, r5, lr}
 80006b6:	f04f 0500 	mov.w	r5, #0
 80006ba:	e00a      	b.n	80006d2 <__aeabi_l2d+0x16>

080006bc <__aeabi_l2d>:
 80006bc:	ea50 0201 	orrs.w	r2, r0, r1
 80006c0:	bf08      	it	eq
 80006c2:	4770      	bxeq	lr
 80006c4:	b530      	push	{r4, r5, lr}
 80006c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80006ca:	d502      	bpl.n	80006d2 <__aeabi_l2d+0x16>
 80006cc:	4240      	negs	r0, r0
 80006ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006de:	f43f aed8 	beq.w	8000492 <__adddf3+0xe6>
 80006e2:	f04f 0203 	mov.w	r2, #3
 80006e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006ea:	bf18      	it	ne
 80006ec:	3203      	addne	r2, #3
 80006ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006f2:	bf18      	it	ne
 80006f4:	3203      	addne	r2, #3
 80006f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006fa:	f1c2 0320 	rsb	r3, r2, #32
 80006fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000702:	fa20 f002 	lsr.w	r0, r0, r2
 8000706:	fa01 fe03 	lsl.w	lr, r1, r3
 800070a:	ea40 000e 	orr.w	r0, r0, lr
 800070e:	fa21 f102 	lsr.w	r1, r1, r2
 8000712:	4414      	add	r4, r2
 8000714:	e6bd      	b.n	8000492 <__adddf3+0xe6>
 8000716:	bf00      	nop

08000718 <__aeabi_uldivmod>:
 8000718:	b953      	cbnz	r3, 8000730 <__aeabi_uldivmod+0x18>
 800071a:	b94a      	cbnz	r2, 8000730 <__aeabi_uldivmod+0x18>
 800071c:	2900      	cmp	r1, #0
 800071e:	bf08      	it	eq
 8000720:	2800      	cmpeq	r0, #0
 8000722:	bf1c      	itt	ne
 8000724:	f04f 31ff 	movne.w	r1, #4294967295
 8000728:	f04f 30ff 	movne.w	r0, #4294967295
 800072c:	f000 b97e 	b.w	8000a2c <__aeabi_idiv0>
 8000730:	f1ad 0c08 	sub.w	ip, sp, #8
 8000734:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000738:	f000 f81a 	bl	8000770 <__udivmoddi4>
 800073c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000740:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000744:	b004      	add	sp, #16
 8000746:	4770      	bx	lr

08000748 <__popcountsi2>:
 8000748:	0843      	lsrs	r3, r0, #1
 800074a:	f003 3355 	and.w	r3, r3, #1431655765	@ 0x55555555
 800074e:	1ac0      	subs	r0, r0, r3
 8000750:	0883      	lsrs	r3, r0, #2
 8000752:	f003 3333 	and.w	r3, r3, #858993459	@ 0x33333333
 8000756:	f000 3033 	and.w	r0, r0, #858993459	@ 0x33333333
 800075a:	4418      	add	r0, r3
 800075c:	eb00 1010 	add.w	r0, r0, r0, lsr #4
 8000760:	f000 300f 	and.w	r0, r0, #252645135	@ 0xf0f0f0f
 8000764:	eb00 2000 	add.w	r0, r0, r0, lsl #8
 8000768:	eb00 4000 	add.w	r0, r0, r0, lsl #16
 800076c:	0e00      	lsrs	r0, r0, #24
 800076e:	4770      	bx	lr

08000770 <__udivmoddi4>:
 8000770:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000774:	9d08      	ldr	r5, [sp, #32]
 8000776:	460c      	mov	r4, r1
 8000778:	2b00      	cmp	r3, #0
 800077a:	d14e      	bne.n	800081a <__udivmoddi4+0xaa>
 800077c:	4694      	mov	ip, r2
 800077e:	458c      	cmp	ip, r1
 8000780:	4686      	mov	lr, r0
 8000782:	fab2 f282 	clz	r2, r2
 8000786:	d962      	bls.n	800084e <__udivmoddi4+0xde>
 8000788:	b14a      	cbz	r2, 800079e <__udivmoddi4+0x2e>
 800078a:	f1c2 0320 	rsb	r3, r2, #32
 800078e:	4091      	lsls	r1, r2
 8000790:	fa20 f303 	lsr.w	r3, r0, r3
 8000794:	fa0c fc02 	lsl.w	ip, ip, r2
 8000798:	4319      	orrs	r1, r3
 800079a:	fa00 fe02 	lsl.w	lr, r0, r2
 800079e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80007a2:	fa1f f68c 	uxth.w	r6, ip
 80007a6:	fbb1 f4f7 	udiv	r4, r1, r7
 80007aa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80007ae:	fb07 1114 	mls	r1, r7, r4, r1
 80007b2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80007b6:	fb04 f106 	mul.w	r1, r4, r6
 80007ba:	4299      	cmp	r1, r3
 80007bc:	d90a      	bls.n	80007d4 <__udivmoddi4+0x64>
 80007be:	eb1c 0303 	adds.w	r3, ip, r3
 80007c2:	f104 30ff 	add.w	r0, r4, #4294967295
 80007c6:	f080 8112 	bcs.w	80009ee <__udivmoddi4+0x27e>
 80007ca:	4299      	cmp	r1, r3
 80007cc:	f240 810f 	bls.w	80009ee <__udivmoddi4+0x27e>
 80007d0:	3c02      	subs	r4, #2
 80007d2:	4463      	add	r3, ip
 80007d4:	1a59      	subs	r1, r3, r1
 80007d6:	fa1f f38e 	uxth.w	r3, lr
 80007da:	fbb1 f0f7 	udiv	r0, r1, r7
 80007de:	fb07 1110 	mls	r1, r7, r0, r1
 80007e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80007e6:	fb00 f606 	mul.w	r6, r0, r6
 80007ea:	429e      	cmp	r6, r3
 80007ec:	d90a      	bls.n	8000804 <__udivmoddi4+0x94>
 80007ee:	eb1c 0303 	adds.w	r3, ip, r3
 80007f2:	f100 31ff 	add.w	r1, r0, #4294967295
 80007f6:	f080 80fc 	bcs.w	80009f2 <__udivmoddi4+0x282>
 80007fa:	429e      	cmp	r6, r3
 80007fc:	f240 80f9 	bls.w	80009f2 <__udivmoddi4+0x282>
 8000800:	4463      	add	r3, ip
 8000802:	3802      	subs	r0, #2
 8000804:	1b9b      	subs	r3, r3, r6
 8000806:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800080a:	2100      	movs	r1, #0
 800080c:	b11d      	cbz	r5, 8000816 <__udivmoddi4+0xa6>
 800080e:	40d3      	lsrs	r3, r2
 8000810:	2200      	movs	r2, #0
 8000812:	e9c5 3200 	strd	r3, r2, [r5]
 8000816:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800081a:	428b      	cmp	r3, r1
 800081c:	d905      	bls.n	800082a <__udivmoddi4+0xba>
 800081e:	b10d      	cbz	r5, 8000824 <__udivmoddi4+0xb4>
 8000820:	e9c5 0100 	strd	r0, r1, [r5]
 8000824:	2100      	movs	r1, #0
 8000826:	4608      	mov	r0, r1
 8000828:	e7f5      	b.n	8000816 <__udivmoddi4+0xa6>
 800082a:	fab3 f183 	clz	r1, r3
 800082e:	2900      	cmp	r1, #0
 8000830:	d146      	bne.n	80008c0 <__udivmoddi4+0x150>
 8000832:	42a3      	cmp	r3, r4
 8000834:	d302      	bcc.n	800083c <__udivmoddi4+0xcc>
 8000836:	4290      	cmp	r0, r2
 8000838:	f0c0 80f0 	bcc.w	8000a1c <__udivmoddi4+0x2ac>
 800083c:	1a86      	subs	r6, r0, r2
 800083e:	eb64 0303 	sbc.w	r3, r4, r3
 8000842:	2001      	movs	r0, #1
 8000844:	2d00      	cmp	r5, #0
 8000846:	d0e6      	beq.n	8000816 <__udivmoddi4+0xa6>
 8000848:	e9c5 6300 	strd	r6, r3, [r5]
 800084c:	e7e3      	b.n	8000816 <__udivmoddi4+0xa6>
 800084e:	2a00      	cmp	r2, #0
 8000850:	f040 8090 	bne.w	8000974 <__udivmoddi4+0x204>
 8000854:	eba1 040c 	sub.w	r4, r1, ip
 8000858:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800085c:	fa1f f78c 	uxth.w	r7, ip
 8000860:	2101      	movs	r1, #1
 8000862:	fbb4 f6f8 	udiv	r6, r4, r8
 8000866:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800086a:	fb08 4416 	mls	r4, r8, r6, r4
 800086e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000872:	fb07 f006 	mul.w	r0, r7, r6
 8000876:	4298      	cmp	r0, r3
 8000878:	d908      	bls.n	800088c <__udivmoddi4+0x11c>
 800087a:	eb1c 0303 	adds.w	r3, ip, r3
 800087e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000882:	d202      	bcs.n	800088a <__udivmoddi4+0x11a>
 8000884:	4298      	cmp	r0, r3
 8000886:	f200 80cd 	bhi.w	8000a24 <__udivmoddi4+0x2b4>
 800088a:	4626      	mov	r6, r4
 800088c:	1a1c      	subs	r4, r3, r0
 800088e:	fa1f f38e 	uxth.w	r3, lr
 8000892:	fbb4 f0f8 	udiv	r0, r4, r8
 8000896:	fb08 4410 	mls	r4, r8, r0, r4
 800089a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800089e:	fb00 f707 	mul.w	r7, r0, r7
 80008a2:	429f      	cmp	r7, r3
 80008a4:	d908      	bls.n	80008b8 <__udivmoddi4+0x148>
 80008a6:	eb1c 0303 	adds.w	r3, ip, r3
 80008aa:	f100 34ff 	add.w	r4, r0, #4294967295
 80008ae:	d202      	bcs.n	80008b6 <__udivmoddi4+0x146>
 80008b0:	429f      	cmp	r7, r3
 80008b2:	f200 80b0 	bhi.w	8000a16 <__udivmoddi4+0x2a6>
 80008b6:	4620      	mov	r0, r4
 80008b8:	1bdb      	subs	r3, r3, r7
 80008ba:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80008be:	e7a5      	b.n	800080c <__udivmoddi4+0x9c>
 80008c0:	f1c1 0620 	rsb	r6, r1, #32
 80008c4:	408b      	lsls	r3, r1
 80008c6:	fa22 f706 	lsr.w	r7, r2, r6
 80008ca:	431f      	orrs	r7, r3
 80008cc:	fa20 fc06 	lsr.w	ip, r0, r6
 80008d0:	fa04 f301 	lsl.w	r3, r4, r1
 80008d4:	ea43 030c 	orr.w	r3, r3, ip
 80008d8:	40f4      	lsrs	r4, r6
 80008da:	fa00 f801 	lsl.w	r8, r0, r1
 80008de:	0c38      	lsrs	r0, r7, #16
 80008e0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80008e4:	fbb4 fef0 	udiv	lr, r4, r0
 80008e8:	fa1f fc87 	uxth.w	ip, r7
 80008ec:	fb00 441e 	mls	r4, r0, lr, r4
 80008f0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80008f4:	fb0e f90c 	mul.w	r9, lr, ip
 80008f8:	45a1      	cmp	r9, r4
 80008fa:	fa02 f201 	lsl.w	r2, r2, r1
 80008fe:	d90a      	bls.n	8000916 <__udivmoddi4+0x1a6>
 8000900:	193c      	adds	r4, r7, r4
 8000902:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000906:	f080 8084 	bcs.w	8000a12 <__udivmoddi4+0x2a2>
 800090a:	45a1      	cmp	r9, r4
 800090c:	f240 8081 	bls.w	8000a12 <__udivmoddi4+0x2a2>
 8000910:	f1ae 0e02 	sub.w	lr, lr, #2
 8000914:	443c      	add	r4, r7
 8000916:	eba4 0409 	sub.w	r4, r4, r9
 800091a:	fa1f f983 	uxth.w	r9, r3
 800091e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000922:	fb00 4413 	mls	r4, r0, r3, r4
 8000926:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800092a:	fb03 fc0c 	mul.w	ip, r3, ip
 800092e:	45a4      	cmp	ip, r4
 8000930:	d907      	bls.n	8000942 <__udivmoddi4+0x1d2>
 8000932:	193c      	adds	r4, r7, r4
 8000934:	f103 30ff 	add.w	r0, r3, #4294967295
 8000938:	d267      	bcs.n	8000a0a <__udivmoddi4+0x29a>
 800093a:	45a4      	cmp	ip, r4
 800093c:	d965      	bls.n	8000a0a <__udivmoddi4+0x29a>
 800093e:	3b02      	subs	r3, #2
 8000940:	443c      	add	r4, r7
 8000942:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000946:	fba0 9302 	umull	r9, r3, r0, r2
 800094a:	eba4 040c 	sub.w	r4, r4, ip
 800094e:	429c      	cmp	r4, r3
 8000950:	46ce      	mov	lr, r9
 8000952:	469c      	mov	ip, r3
 8000954:	d351      	bcc.n	80009fa <__udivmoddi4+0x28a>
 8000956:	d04e      	beq.n	80009f6 <__udivmoddi4+0x286>
 8000958:	b155      	cbz	r5, 8000970 <__udivmoddi4+0x200>
 800095a:	ebb8 030e 	subs.w	r3, r8, lr
 800095e:	eb64 040c 	sbc.w	r4, r4, ip
 8000962:	fa04 f606 	lsl.w	r6, r4, r6
 8000966:	40cb      	lsrs	r3, r1
 8000968:	431e      	orrs	r6, r3
 800096a:	40cc      	lsrs	r4, r1
 800096c:	e9c5 6400 	strd	r6, r4, [r5]
 8000970:	2100      	movs	r1, #0
 8000972:	e750      	b.n	8000816 <__udivmoddi4+0xa6>
 8000974:	f1c2 0320 	rsb	r3, r2, #32
 8000978:	fa20 f103 	lsr.w	r1, r0, r3
 800097c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000980:	fa24 f303 	lsr.w	r3, r4, r3
 8000984:	4094      	lsls	r4, r2
 8000986:	430c      	orrs	r4, r1
 8000988:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800098c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000990:	fa1f f78c 	uxth.w	r7, ip
 8000994:	fbb3 f0f8 	udiv	r0, r3, r8
 8000998:	fb08 3110 	mls	r1, r8, r0, r3
 800099c:	0c23      	lsrs	r3, r4, #16
 800099e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80009a2:	fb00 f107 	mul.w	r1, r0, r7
 80009a6:	4299      	cmp	r1, r3
 80009a8:	d908      	bls.n	80009bc <__udivmoddi4+0x24c>
 80009aa:	eb1c 0303 	adds.w	r3, ip, r3
 80009ae:	f100 36ff 	add.w	r6, r0, #4294967295
 80009b2:	d22c      	bcs.n	8000a0e <__udivmoddi4+0x29e>
 80009b4:	4299      	cmp	r1, r3
 80009b6:	d92a      	bls.n	8000a0e <__udivmoddi4+0x29e>
 80009b8:	3802      	subs	r0, #2
 80009ba:	4463      	add	r3, ip
 80009bc:	1a5b      	subs	r3, r3, r1
 80009be:	b2a4      	uxth	r4, r4
 80009c0:	fbb3 f1f8 	udiv	r1, r3, r8
 80009c4:	fb08 3311 	mls	r3, r8, r1, r3
 80009c8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80009cc:	fb01 f307 	mul.w	r3, r1, r7
 80009d0:	42a3      	cmp	r3, r4
 80009d2:	d908      	bls.n	80009e6 <__udivmoddi4+0x276>
 80009d4:	eb1c 0404 	adds.w	r4, ip, r4
 80009d8:	f101 36ff 	add.w	r6, r1, #4294967295
 80009dc:	d213      	bcs.n	8000a06 <__udivmoddi4+0x296>
 80009de:	42a3      	cmp	r3, r4
 80009e0:	d911      	bls.n	8000a06 <__udivmoddi4+0x296>
 80009e2:	3902      	subs	r1, #2
 80009e4:	4464      	add	r4, ip
 80009e6:	1ae4      	subs	r4, r4, r3
 80009e8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80009ec:	e739      	b.n	8000862 <__udivmoddi4+0xf2>
 80009ee:	4604      	mov	r4, r0
 80009f0:	e6f0      	b.n	80007d4 <__udivmoddi4+0x64>
 80009f2:	4608      	mov	r0, r1
 80009f4:	e706      	b.n	8000804 <__udivmoddi4+0x94>
 80009f6:	45c8      	cmp	r8, r9
 80009f8:	d2ae      	bcs.n	8000958 <__udivmoddi4+0x1e8>
 80009fa:	ebb9 0e02 	subs.w	lr, r9, r2
 80009fe:	eb63 0c07 	sbc.w	ip, r3, r7
 8000a02:	3801      	subs	r0, #1
 8000a04:	e7a8      	b.n	8000958 <__udivmoddi4+0x1e8>
 8000a06:	4631      	mov	r1, r6
 8000a08:	e7ed      	b.n	80009e6 <__udivmoddi4+0x276>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	e799      	b.n	8000942 <__udivmoddi4+0x1d2>
 8000a0e:	4630      	mov	r0, r6
 8000a10:	e7d4      	b.n	80009bc <__udivmoddi4+0x24c>
 8000a12:	46d6      	mov	lr, sl
 8000a14:	e77f      	b.n	8000916 <__udivmoddi4+0x1a6>
 8000a16:	4463      	add	r3, ip
 8000a18:	3802      	subs	r0, #2
 8000a1a:	e74d      	b.n	80008b8 <__udivmoddi4+0x148>
 8000a1c:	4606      	mov	r6, r0
 8000a1e:	4623      	mov	r3, r4
 8000a20:	4608      	mov	r0, r1
 8000a22:	e70f      	b.n	8000844 <__udivmoddi4+0xd4>
 8000a24:	3e02      	subs	r6, #2
 8000a26:	4463      	add	r3, ip
 8000a28:	e730      	b.n	800088c <__udivmoddi4+0x11c>
 8000a2a:	bf00      	nop

08000a2c <__aeabi_idiv0>:
 8000a2c:	4770      	bx	lr
 8000a2e:	bf00      	nop

08000a30 <_ZN9InterruptC1Ev>:

// Define the vector table, it is only declared in the class declaration
Interrupt* Interrupt::ISRVectorTable[] = {0};

// Constructor
Interrupt::Interrupt(void){}
 8000a30:	b480      	push	{r7}
 8000a32:	b083      	sub	sp, #12
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
 8000a38:	4a04      	ldr	r2, [pc, #16]	@ (8000a4c <_ZN9InterruptC1Ev+0x1c>)
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	601a      	str	r2, [r3, #0]
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	4618      	mov	r0, r3
 8000a42:	370c      	adds	r7, #12
 8000a44:	46bd      	mov	sp, r7
 8000a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4a:	4770      	bx	lr
 8000a4c:	080148a8 	.word	0x080148a8

08000a50 <_ZN9Interrupt8RegisterEiPS_>:


// Methods

void Interrupt::Register(int interruptNumber, Interrupt* intThisPtr)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b082      	sub	sp, #8
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
 8000a58:	6039      	str	r1, [r7, #0]
	printf("Registering interrupt for interrupt number = %d\n", interruptNumber);
 8000a5a:	6879      	ldr	r1, [r7, #4]
 8000a5c:	4805      	ldr	r0, [pc, #20]	@ (8000a74 <_ZN9Interrupt8RegisterEiPS_+0x24>)
 8000a5e:	f012 fd4b 	bl	80134f8 <iprintf>
	ISRVectorTable[interruptNumber] = intThisPtr;
 8000a62:	4905      	ldr	r1, [pc, #20]	@ (8000a78 <_ZN9Interrupt8RegisterEiPS_+0x28>)
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	683a      	ldr	r2, [r7, #0]
 8000a68:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000a6c:	bf00      	nop
 8000a6e:	3708      	adds	r7, #8
 8000a70:	46bd      	mov	sp, r7
 8000a72:	bd80      	pop	{r7, pc}
 8000a74:	0801429c 	.word	0x0801429c
 8000a78:	240000fc 	.word	0x240000fc

08000a7c <_ZN9Interrupt13EXTI4_WrapperEv>:

void Interrupt::EXTI4_Wrapper(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	af00      	add	r7, sp, #0
	ISRVectorTable[EXTI4_IRQn]->ISR_Handler();
 8000a80:	4b04      	ldr	r3, [pc, #16]	@ (8000a94 <_ZN9Interrupt13EXTI4_WrapperEv+0x18>)
 8000a82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	4a02      	ldr	r2, [pc, #8]	@ (8000a94 <_ZN9Interrupt13EXTI4_WrapperEv+0x18>)
 8000a8a:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8000a8c:	4610      	mov	r0, r2
 8000a8e:	4798      	blx	r3
}
 8000a90:	bf00      	nop
 8000a92:	bd80      	pop	{r7, pc}
 8000a94:	240000fc 	.word	0x240000fc

08000a98 <_ZN9Interrupt20DMA1_Stream0_WrapperEv>:

void Interrupt::DMA1_Stream0_Wrapper(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	af00      	add	r7, sp, #0
	ISRVectorTable[DMA1_Stream0_IRQn]->ISR_Handler();
 8000a9c:	4b04      	ldr	r3, [pc, #16]	@ (8000ab0 <_ZN9Interrupt20DMA1_Stream0_WrapperEv+0x18>)
 8000a9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	4a02      	ldr	r2, [pc, #8]	@ (8000ab0 <_ZN9Interrupt20DMA1_Stream0_WrapperEv+0x18>)
 8000aa6:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8000aa8:	4610      	mov	r0, r2
 8000aaa:	4798      	blx	r3
}
 8000aac:	bf00      	nop
 8000aae:	bd80      	pop	{r7, pc}
 8000ab0:	240000fc 	.word	0x240000fc

08000ab4 <_ZN9Interrupt20DMA1_Stream1_WrapperEv>:

void Interrupt::DMA1_Stream1_Wrapper(void)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	af00      	add	r7, sp, #0
	ISRVectorTable[DMA1_Stream1_IRQn]->ISR_Handler();
 8000ab8:	4b04      	ldr	r3, [pc, #16]	@ (8000acc <_ZN9Interrupt20DMA1_Stream1_WrapperEv+0x18>)
 8000aba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	4a02      	ldr	r2, [pc, #8]	@ (8000acc <_ZN9Interrupt20DMA1_Stream1_WrapperEv+0x18>)
 8000ac2:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8000ac4:	4610      	mov	r0, r2
 8000ac6:	4798      	blx	r3
}
 8000ac8:	bf00      	nop
 8000aca:	bd80      	pop	{r7, pc}
 8000acc:	240000fc 	.word	0x240000fc

08000ad0 <_ZN9Interrupt12TIM2_WrapperEv>:


void Interrupt::TIM2_Wrapper(void)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	af00      	add	r7, sp, #0
	ISRVectorTable[TIM2_IRQn]->ISR_Handler();
 8000ad4:	4b04      	ldr	r3, [pc, #16]	@ (8000ae8 <_ZN9Interrupt12TIM2_WrapperEv+0x18>)
 8000ad6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	4a02      	ldr	r2, [pc, #8]	@ (8000ae8 <_ZN9Interrupt12TIM2_WrapperEv+0x18>)
 8000ade:	6f12      	ldr	r2, [r2, #112]	@ 0x70
 8000ae0:	4610      	mov	r0, r2
 8000ae2:	4798      	blx	r3
}
 8000ae4:	bf00      	nop
 8000ae6:	bd80      	pop	{r7, pc}
 8000ae8:	240000fc 	.word	0x240000fc

08000aec <_ZN9Interrupt12TIM3_WrapperEv>:

void Interrupt::TIM3_Wrapper(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	af00      	add	r7, sp, #0
	ISRVectorTable[TIM3_IRQn]->ISR_Handler();
 8000af0:	4b04      	ldr	r3, [pc, #16]	@ (8000b04 <_ZN9Interrupt12TIM3_WrapperEv+0x18>)
 8000af2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	4a02      	ldr	r2, [pc, #8]	@ (8000b04 <_ZN9Interrupt12TIM3_WrapperEv+0x18>)
 8000afa:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8000afc:	4610      	mov	r0, r2
 8000afe:	4798      	blx	r3
}
 8000b00:	bf00      	nop
 8000b02:	bd80      	pop	{r7, pc}
 8000b04:	240000fc 	.word	0x240000fc

08000b08 <_ZN9Interrupt12TIM4_WrapperEv>:

void Interrupt::TIM4_Wrapper(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	af00      	add	r7, sp, #0
	ISRVectorTable[TIM4_IRQn]->ISR_Handler();
 8000b0c:	4b04      	ldr	r3, [pc, #16]	@ (8000b20 <_ZN9Interrupt12TIM4_WrapperEv+0x18>)
 8000b0e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	4a02      	ldr	r2, [pc, #8]	@ (8000b20 <_ZN9Interrupt12TIM4_WrapperEv+0x18>)
 8000b16:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 8000b18:	4610      	mov	r0, r2
 8000b1a:	4798      	blx	r3
}
 8000b1c:	bf00      	nop
 8000b1e:	bd80      	pop	{r7, pc}
 8000b20:	240000fc 	.word	0x240000fc

08000b24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b24:	b480      	push	{r7}
 8000b26:	b083      	sub	sp, #12
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	6039      	str	r1, [r7, #0]
 8000b2e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000b30:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	db0a      	blt.n	8000b4e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b38:	683b      	ldr	r3, [r7, #0]
 8000b3a:	b2da      	uxtb	r2, r3
 8000b3c:	490c      	ldr	r1, [pc, #48]	@ (8000b70 <__NVIC_SetPriority+0x4c>)
 8000b3e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000b42:	0112      	lsls	r2, r2, #4
 8000b44:	b2d2      	uxtb	r2, r2
 8000b46:	440b      	add	r3, r1
 8000b48:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b4c:	e00a      	b.n	8000b64 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b4e:	683b      	ldr	r3, [r7, #0]
 8000b50:	b2da      	uxtb	r2, r3
 8000b52:	4908      	ldr	r1, [pc, #32]	@ (8000b74 <__NVIC_SetPriority+0x50>)
 8000b54:	88fb      	ldrh	r3, [r7, #6]
 8000b56:	f003 030f 	and.w	r3, r3, #15
 8000b5a:	3b04      	subs	r3, #4
 8000b5c:	0112      	lsls	r2, r2, #4
 8000b5e:	b2d2      	uxtb	r2, r2
 8000b60:	440b      	add	r3, r1
 8000b62:	761a      	strb	r2, [r3, #24]
}
 8000b64:	bf00      	nop
 8000b66:	370c      	adds	r7, #12
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6e:	4770      	bx	lr
 8000b70:	e000e100 	.word	0xe000e100
 8000b74:	e000ed00 	.word	0xe000ed00

08000b78 <_ZNK19ArduinoJson6101_11014CollectionData4headEv>:
  VariantData *get(size_t index) const;

  template <typename TAdaptedString>
  VariantData *get(TAdaptedString key) const;

  VariantSlot *head() const {
 8000b78:	b480      	push	{r7}
 8000b7a:	b083      	sub	sp, #12
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
    return _head;
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	681b      	ldr	r3, [r3, #0]
  }
 8000b84:	4618      	mov	r0, r3
 8000b86:	370c      	adds	r7, #12
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8e:	4770      	bx	lr

08000b90 <_ZN19ArduinoJson6101_11011VariantSlot4dataEv>:
  // - no constructor
  // - no destructor
  // - no virtual
  // - no inheritance

  VariantData* data() {
 8000b90:	b480      	push	{r7}
 8000b92:	b083      	sub	sp, #12
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<VariantData*>(&_content);
 8000b98:	687b      	ldr	r3, [r7, #4]
  }
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	370c      	adds	r7, #12
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba4:	4770      	bx	lr

08000ba6 <_ZN19ArduinoJson6101_11011VariantSlot4nextEv>:

  const VariantData* data() const {
    return reinterpret_cast<const VariantData*>(&_content);
  }

  VariantSlot* next() {
 8000ba6:	b480      	push	{r7}
 8000ba8:	b083      	sub	sp, #12
 8000baa:	af00      	add	r7, sp, #0
 8000bac:	6078      	str	r0, [r7, #4]
    return _next ? this + _next : 0;
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d006      	beq.n	8000bc6 <_ZN19ArduinoJson6101_11011VariantSlot4nextEv+0x20>
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8000bbe:	011b      	lsls	r3, r3, #4
 8000bc0:	687a      	ldr	r2, [r7, #4]
 8000bc2:	4413      	add	r3, r2
 8000bc4:	e000      	b.n	8000bc8 <_ZN19ArduinoJson6101_11011VariantSlot4nextEv+0x22>
 8000bc6:	2300      	movs	r3, #0
  }
 8000bc8:	4618      	mov	r0, r3
 8000bca:	370c      	adds	r7, #12
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd2:	4770      	bx	lr

08000bd4 <_ZN19ArduinoJson6101_11011VariantSlot14setNextNotNullEPS0_>:

  void setNext(VariantSlot* slot) {
    _next = VariantSlotDiff(slot ? slot - this : 0);
  }

  void setNextNotNull(VariantSlot* slot) {
 8000bd4:	b480      	push	{r7}
 8000bd6:	b083      	sub	sp, #12
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
 8000bdc:	6039      	str	r1, [r7, #0]
    ARDUINOJSON_ASSERT(slot != 0);
    _next = VariantSlotDiff(slot - this);
 8000bde:	683a      	ldr	r2, [r7, #0]
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	1ad3      	subs	r3, r2, r3
 8000be4:	111b      	asrs	r3, r3, #4
 8000be6:	b21a      	sxth	r2, r3
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	815a      	strh	r2, [r3, #10]
  }
 8000bec:	bf00      	nop
 8000bee:	370c      	adds	r7, #12
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf6:	4770      	bx	lr

08000bf8 <_ZN19ArduinoJson6101_11011VariantSlot11setOwnedKeyENS_8not_nullIPKcEE>:

  void setOwnedKey(not_null<const char*> k) {
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b082      	sub	sp, #8
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
 8000c00:	6039      	str	r1, [r7, #0]
    _flags |= KEY_IS_OWNED;
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	7a1b      	ldrb	r3, [r3, #8]
 8000c06:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000c0a:	b2da      	uxtb	r2, r3
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	721a      	strb	r2, [r3, #8]
    _key = k.get();
 8000c10:	463b      	mov	r3, r7
 8000c12:	4618      	mov	r0, r3
 8000c14:	f001 fdb0 	bl	8002778 <_ZNK19ArduinoJson6101_1108not_nullIPKcE3getEv>
 8000c18:	4602      	mov	r2, r0
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	60da      	str	r2, [r3, #12]
  }
 8000c1e:	bf00      	nop
 8000c20:	3708      	adds	r7, #8
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bd80      	pop	{r7, pc}

08000c26 <_ZNK19ArduinoJson6101_11011VariantSlot3keyEv>:
  void setLinkedKey(not_null<const char*> k) {
    _flags &= VALUE_MASK;
    _key = k.get();
  }

  const char* key() const {
 8000c26:	b480      	push	{r7}
 8000c28:	b083      	sub	sp, #12
 8000c2a:	af00      	add	r7, sp, #0
 8000c2c:	6078      	str	r0, [r7, #4]
    return _key;
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	68db      	ldr	r3, [r3, #12]
  }
 8000c32:	4618      	mov	r0, r3
 8000c34:	370c      	adds	r7, #12
 8000c36:	46bd      	mov	sp, r7
 8000c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3c:	4770      	bx	lr

08000c3e <_ZN19ArduinoJson6101_11011VariantSlot5clearEv>:

  bool ownsKey() const {
    return (_flags & KEY_IS_OWNED) != 0;
  }

  void clear() {
 8000c3e:	b480      	push	{r7}
 8000c40:	b083      	sub	sp, #12
 8000c42:	af00      	add	r7, sp, #0
 8000c44:	6078      	str	r0, [r7, #4]
    _next = 0;
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	2200      	movs	r2, #0
 8000c4a:	815a      	strh	r2, [r3, #10]
    _flags = 0;
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	2200      	movs	r2, #0
 8000c50:	721a      	strb	r2, [r3, #8]
    _key = 0;
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	2200      	movs	r2, #0
 8000c56:	60da      	str	r2, [r3, #12]
  }
 8000c58:	bf00      	nop
 8000c5a:	370c      	adds	r7, #12
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c62:	4770      	bx	lr

08000c64 <_ZN19ArduinoJson6101_11010addPaddingEj>:
  const size_t mask = sizeof(void *) - 1;
  size_t addr = reinterpret_cast<size_t>(ptr);
  return (addr & mask) == 0;
}

inline size_t addPadding(size_t bytes) {
 8000c64:	b480      	push	{r7}
 8000c66:	b085      	sub	sp, #20
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
  const size_t mask = sizeof(void *) - 1;
 8000c6c:	2303      	movs	r3, #3
 8000c6e:	60fb      	str	r3, [r7, #12]
  return (bytes + mask) & ~mask;
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	3303      	adds	r3, #3
 8000c74:	f023 0303 	bic.w	r3, r3, #3
}
 8000c78:	4618      	mov	r0, r3
 8000c7a:	3714      	adds	r7, #20
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c82:	4770      	bx	lr

08000c84 <_ZN19ArduinoJson6101_11010MemoryPoolC1EPcj>:
//               ^              ^
//             _left          _right

class MemoryPool {
 public:
  MemoryPool(char* buf, size_t capa)
 8000c84:	b480      	push	{r7}
 8000c86:	b085      	sub	sp, #20
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	60f8      	str	r0, [r7, #12]
 8000c8c:	60b9      	str	r1, [r7, #8]
 8000c8e:	607a      	str	r2, [r7, #4]
      : _begin(buf),
 8000c90:	68fb      	ldr	r3, [r7, #12]
 8000c92:	68ba      	ldr	r2, [r7, #8]
 8000c94:	601a      	str	r2, [r3, #0]
        _left(buf),
 8000c96:	68fb      	ldr	r3, [r7, #12]
 8000c98:	68ba      	ldr	r2, [r7, #8]
 8000c9a:	605a      	str	r2, [r3, #4]
        _right(buf ? buf + capa : 0),
 8000c9c:	68bb      	ldr	r3, [r7, #8]
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d003      	beq.n	8000caa <_ZN19ArduinoJson6101_11010MemoryPoolC1EPcj+0x26>
 8000ca2:	68ba      	ldr	r2, [r7, #8]
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	4413      	add	r3, r2
 8000ca8:	e000      	b.n	8000cac <_ZN19ArduinoJson6101_11010MemoryPoolC1EPcj+0x28>
 8000caa:	2300      	movs	r3, #0
 8000cac:	68fa      	ldr	r2, [r7, #12]
 8000cae:	6093      	str	r3, [r2, #8]
        _end(buf ? buf + capa : 0) {
 8000cb0:	68bb      	ldr	r3, [r7, #8]
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d003      	beq.n	8000cbe <_ZN19ArduinoJson6101_11010MemoryPoolC1EPcj+0x3a>
 8000cb6:	68ba      	ldr	r2, [r7, #8]
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	4413      	add	r3, r2
 8000cbc:	e000      	b.n	8000cc0 <_ZN19ArduinoJson6101_11010MemoryPoolC1EPcj+0x3c>
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	68fa      	ldr	r2, [r7, #12]
 8000cc2:	60d3      	str	r3, [r2, #12]
    ARDUINOJSON_ASSERT(isAligned(_begin));
    ARDUINOJSON_ASSERT(isAligned(_right));
    ARDUINOJSON_ASSERT(isAligned(_end));
  }
 8000cc4:	68fb      	ldr	r3, [r7, #12]
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	3714      	adds	r7, #20
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd0:	4770      	bx	lr

08000cd2 <_ZN19ArduinoJson6101_11010MemoryPool6bufferEv>:

  void* buffer() {
 8000cd2:	b480      	push	{r7}
 8000cd4:	b083      	sub	sp, #12
 8000cd6:	af00      	add	r7, sp, #0
 8000cd8:	6078      	str	r0, [r7, #4]
    return _begin;
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	681b      	ldr	r3, [r3, #0]
  }
 8000cde:	4618      	mov	r0, r3
 8000ce0:	370c      	adds	r7, #12
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce8:	4770      	bx	lr

08000cea <_ZN19ArduinoJson6101_11010MemoryPool12allocVariantEv>:

  size_t size() const {
    return size_t(_left - _begin + _end - _right);
  }

  VariantSlot* allocVariant() {
 8000cea:	b580      	push	{r7, lr}
 8000cec:	b082      	sub	sp, #8
 8000cee:	af00      	add	r7, sp, #0
 8000cf0:	6078      	str	r0, [r7, #4]
    return allocRight<VariantSlot>();
 8000cf2:	6878      	ldr	r0, [r7, #4]
 8000cf4:	f001 fd4c 	bl	8002790 <_ZN19ArduinoJson6101_11010MemoryPool10allocRightINS_11VariantSlotEEEPT_v>
 8000cf8:	4603      	mov	r3, r0
  }
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	3708      	adds	r7, #8
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bd80      	pop	{r7, pc}

08000d02 <_ZN19ArduinoJson6101_11010MemoryPool21allocExpandableStringEv>:
    _left += n;
    checkInvariants();
    return s;
  }

  StringSlot allocExpandableString() {
 8000d02:	b580      	push	{r7, lr}
 8000d04:	b082      	sub	sp, #8
 8000d06:	af00      	add	r7, sp, #0
 8000d08:	6078      	str	r0, [r7, #4]
 8000d0a:	6039      	str	r1, [r7, #0]
    StringSlot s;
    s.value = _left;
 8000d0c:	683b      	ldr	r3, [r7, #0]
 8000d0e:	685a      	ldr	r2, [r3, #4]
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	601a      	str	r2, [r3, #0]
    s.size = size_t(_right - _left);
 8000d14:	683b      	ldr	r3, [r7, #0]
 8000d16:	689a      	ldr	r2, [r3, #8]
 8000d18:	683b      	ldr	r3, [r7, #0]
 8000d1a:	685b      	ldr	r3, [r3, #4]
 8000d1c:	1ad3      	subs	r3, r2, r3
 8000d1e:	461a      	mov	r2, r3
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	605a      	str	r2, [r3, #4]
    _left = _right;
 8000d24:	683b      	ldr	r3, [r7, #0]
 8000d26:	689a      	ldr	r2, [r3, #8]
 8000d28:	683b      	ldr	r3, [r7, #0]
 8000d2a:	605a      	str	r2, [r3, #4]
    checkInvariants();
 8000d2c:	6838      	ldr	r0, [r7, #0]
 8000d2e:	f000 f864 	bl	8000dfa <_ZN19ArduinoJson6101_11010MemoryPool15checkInvariantsEv>
    return s;
 8000d32:	bf00      	nop
  }
 8000d34:	6878      	ldr	r0, [r7, #4]
 8000d36:	3708      	adds	r7, #8
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bd80      	pop	{r7, pc}

08000d3c <_ZN19ArduinoJson6101_11010MemoryPool12freezeStringERNS_10StringSlotEj>:

  void freezeString(StringSlot& s, size_t newSize) {
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b084      	sub	sp, #16
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	60f8      	str	r0, [r7, #12]
 8000d44:	60b9      	str	r1, [r7, #8]
 8000d46:	607a      	str	r2, [r7, #4]
    _left -= (s.size - newSize);
 8000d48:	68fb      	ldr	r3, [r7, #12]
 8000d4a:	685a      	ldr	r2, [r3, #4]
 8000d4c:	68bb      	ldr	r3, [r7, #8]
 8000d4e:	685b      	ldr	r3, [r3, #4]
 8000d50:	6879      	ldr	r1, [r7, #4]
 8000d52:	1acb      	subs	r3, r1, r3
 8000d54:	441a      	add	r2, r3
 8000d56:	68fb      	ldr	r3, [r7, #12]
 8000d58:	605a      	str	r2, [r3, #4]
    s.size = newSize;
 8000d5a:	68bb      	ldr	r3, [r7, #8]
 8000d5c:	687a      	ldr	r2, [r7, #4]
 8000d5e:	605a      	str	r2, [r3, #4]
    checkInvariants();
 8000d60:	68f8      	ldr	r0, [r7, #12]
 8000d62:	f000 f84a 	bl	8000dfa <_ZN19ArduinoJson6101_11010MemoryPool15checkInvariantsEv>
  }
 8000d66:	bf00      	nop
 8000d68:	3710      	adds	r7, #16
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}

08000d6e <_ZN19ArduinoJson6101_11010MemoryPool5clearEv>:

  void clear() {
 8000d6e:	b480      	push	{r7}
 8000d70:	b083      	sub	sp, #12
 8000d72:	af00      	add	r7, sp, #0
 8000d74:	6078      	str	r0, [r7, #4]
    _left = _begin;
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	681a      	ldr	r2, [r3, #0]
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	605a      	str	r2, [r3, #4]
    _right = _end;
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	68da      	ldr	r2, [r3, #12]
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	609a      	str	r2, [r3, #8]
  }
 8000d86:	bf00      	nop
 8000d88:	370c      	adds	r7, #12
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d90:	4770      	bx	lr

08000d92 <_ZNK19ArduinoJson6101_11010MemoryPool8canAllocEj>:

  bool canAlloc(size_t bytes) const {
 8000d92:	b480      	push	{r7}
 8000d94:	b083      	sub	sp, #12
 8000d96:	af00      	add	r7, sp, #0
 8000d98:	6078      	str	r0, [r7, #4]
 8000d9a:	6039      	str	r1, [r7, #0]
    return _left + bytes <= _right;
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	685a      	ldr	r2, [r3, #4]
 8000da0:	683b      	ldr	r3, [r7, #0]
 8000da2:	441a      	add	r2, r3
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	689b      	ldr	r3, [r3, #8]
 8000da8:	429a      	cmp	r2, r3
 8000daa:	bf94      	ite	ls
 8000dac:	2301      	movls	r3, #1
 8000dae:	2300      	movhi	r3, #0
 8000db0:	b2db      	uxtb	r3, r3
  }
 8000db2:	4618      	mov	r0, r3
 8000db4:	370c      	adds	r7, #12
 8000db6:	46bd      	mov	sp, r7
 8000db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbc:	4770      	bx	lr

08000dbe <_ZN19ArduinoJson6101_11010MemoryPool10allocRightEj>:
  template <typename T>
  T* allocRight() {
    return reinterpret_cast<T*>(allocRight(sizeof(T)));
  }

  void* allocRight(size_t bytes) {
 8000dbe:	b580      	push	{r7, lr}
 8000dc0:	b082      	sub	sp, #8
 8000dc2:	af00      	add	r7, sp, #0
 8000dc4:	6078      	str	r0, [r7, #4]
 8000dc6:	6039      	str	r1, [r7, #0]
    if (!canAlloc(bytes)) return 0;
 8000dc8:	6839      	ldr	r1, [r7, #0]
 8000dca:	6878      	ldr	r0, [r7, #4]
 8000dcc:	f7ff ffe1 	bl	8000d92 <_ZNK19ArduinoJson6101_11010MemoryPool8canAllocEj>
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	f083 0301 	eor.w	r3, r3, #1
 8000dd6:	b2db      	uxtb	r3, r3
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d001      	beq.n	8000de0 <_ZN19ArduinoJson6101_11010MemoryPool10allocRightEj+0x22>
 8000ddc:	2300      	movs	r3, #0
 8000dde:	e008      	b.n	8000df2 <_ZN19ArduinoJson6101_11010MemoryPool10allocRightEj+0x34>
    _right -= bytes;
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	689a      	ldr	r2, [r3, #8]
 8000de4:	683b      	ldr	r3, [r7, #0]
 8000de6:	425b      	negs	r3, r3
 8000de8:	441a      	add	r2, r3
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	609a      	str	r2, [r3, #8]
    return _right;
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	689b      	ldr	r3, [r3, #8]
  }
 8000df2:	4618      	mov	r0, r3
 8000df4:	3708      	adds	r7, #8
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}

08000dfa <_ZN19ArduinoJson6101_11010MemoryPool15checkInvariantsEv>:
 private:
  StringSlot* allocStringSlot() {
    return allocRight<StringSlot>();
  }

  void checkInvariants() {
 8000dfa:	b480      	push	{r7}
 8000dfc:	b083      	sub	sp, #12
 8000dfe:	af00      	add	r7, sp, #0
 8000e00:	6078      	str	r0, [r7, #4]
    ARDUINOJSON_ASSERT(_begin <= _left);
    ARDUINOJSON_ASSERT(_left <= _right);
    ARDUINOJSON_ASSERT(_right <= _end);
    ARDUINOJSON_ASSERT(isAligned(_right));
  }
 8000e02:	bf00      	nop
 8000e04:	370c      	adds	r7, #12
 8000e06:	46bd      	mov	sp, r7
 8000e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0c:	4770      	bx	lr

08000e0e <_ZN19ArduinoJson6101_11021ConstRamStringAdapterC1EPKc>:

namespace ARDUINOJSON_NAMESPACE {

class ConstRamStringAdapter {
 public:
  ConstRamStringAdapter(const char* str = 0) : _str(str) {}
 8000e0e:	b480      	push	{r7}
 8000e10:	b083      	sub	sp, #12
 8000e12:	af00      	add	r7, sp, #0
 8000e14:	6078      	str	r0, [r7, #4]
 8000e16:	6039      	str	r1, [r7, #0]
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	683a      	ldr	r2, [r7, #0]
 8000e1c:	601a      	str	r2, [r3, #0]
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	4618      	mov	r0, r3
 8000e22:	370c      	adds	r7, #12
 8000e24:	46bd      	mov	sp, r7
 8000e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2a:	4770      	bx	lr

08000e2c <_ZNK19ArduinoJson6101_11021ConstRamStringAdapter6equalsEPKc>:

  bool equals(const char* expected) const {
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b084      	sub	sp, #16
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
 8000e34:	6039      	str	r1, [r7, #0]
    const char* actual = _str;
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	60fb      	str	r3, [r7, #12]
    if (!actual || !expected) return actual == expected;
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d002      	beq.n	8000e48 <_ZNK19ArduinoJson6101_11021ConstRamStringAdapter6equalsEPKc+0x1c>
 8000e42:	683b      	ldr	r3, [r7, #0]
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d107      	bne.n	8000e58 <_ZNK19ArduinoJson6101_11021ConstRamStringAdapter6equalsEPKc+0x2c>
 8000e48:	68fa      	ldr	r2, [r7, #12]
 8000e4a:	683b      	ldr	r3, [r7, #0]
 8000e4c:	429a      	cmp	r2, r3
 8000e4e:	bf0c      	ite	eq
 8000e50:	2301      	moveq	r3, #1
 8000e52:	2300      	movne	r3, #0
 8000e54:	b2db      	uxtb	r3, r3
 8000e56:	e009      	b.n	8000e6c <_ZNK19ArduinoJson6101_11021ConstRamStringAdapter6equalsEPKc+0x40>
    return strcmp(actual, expected) == 0;
 8000e58:	6839      	ldr	r1, [r7, #0]
 8000e5a:	68f8      	ldr	r0, [r7, #12]
 8000e5c:	f7ff fa40 	bl	80002e0 <strcmp>
 8000e60:	4603      	mov	r3, r0
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	bf0c      	ite	eq
 8000e66:	2301      	moveq	r3, #1
 8000e68:	2300      	movne	r3, #0
 8000e6a:	b2db      	uxtb	r3, r3
  }
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	3710      	adds	r7, #16
 8000e70:	46bd      	mov	sp, r7
 8000e72:	bd80      	pop	{r7, pc}

08000e74 <_ZN19ArduinoJson6101_11011adaptStringEPKc>:

 protected:
  const char* _str;
};

inline ConstRamStringAdapter adaptString(const char* str) {
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b084      	sub	sp, #16
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
  return ConstRamStringAdapter(str);
 8000e7c:	f107 030c 	add.w	r3, r7, #12
 8000e80:	6879      	ldr	r1, [r7, #4]
 8000e82:	4618      	mov	r0, r3
 8000e84:	f7ff ffc3 	bl	8000e0e <_ZN19ArduinoJson6101_11021ConstRamStringAdapterC1EPKc>
 8000e88:	68fb      	ldr	r3, [r7, #12]
}
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	3710      	adds	r7, #16
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}

08000e92 <_ZN19ArduinoJson6101_11011VariantData7asArrayEv>:

  const char *asString() const;

  bool asBoolean() const;

  CollectionData *asArray() {
 8000e92:	b580      	push	{r7, lr}
 8000e94:	b082      	sub	sp, #8
 8000e96:	af00      	add	r7, sp, #0
 8000e98:	6078      	str	r0, [r7, #4]
    return isArray() ? &_content.asCollection : 0;
 8000e9a:	6878      	ldr	r0, [r7, #4]
 8000e9c:	f000 f81b 	bl	8000ed6 <_ZNK19ArduinoJson6101_11011VariantData7isArrayEv>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d001      	beq.n	8000eaa <_ZN19ArduinoJson6101_11011VariantData7asArrayEv+0x18>
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	e000      	b.n	8000eac <_ZN19ArduinoJson6101_11011VariantData7asArrayEv+0x1a>
 8000eaa:	2300      	movs	r3, #0
  }
 8000eac:	4618      	mov	r0, r3
 8000eae:	3708      	adds	r7, #8
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	bd80      	pop	{r7, pc}

08000eb4 <_ZN19ArduinoJson6101_11011VariantData8asObjectEv>:

  const CollectionData *asArray() const {
    return const_cast<VariantData *>(this)->asArray();
  }

  CollectionData *asObject() {
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b082      	sub	sp, #8
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
    return isObject() ? &_content.asCollection : 0;
 8000ebc:	6878      	ldr	r0, [r7, #4]
 8000ebe:	f000 f81d 	bl	8000efc <_ZNK19ArduinoJson6101_11011VariantData8isObjectEv>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d001      	beq.n	8000ecc <_ZN19ArduinoJson6101_11011VariantData8asObjectEv+0x18>
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	e000      	b.n	8000ece <_ZN19ArduinoJson6101_11011VariantData8asObjectEv+0x1a>
 8000ecc:	2300      	movs	r3, #0
  }
 8000ece:	4618      	mov	r0, r3
 8000ed0:	3708      	adds	r7, #8
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}

08000ed6 <_ZNK19ArduinoJson6101_11011VariantData7isArrayEv>:
      default:
        return true;
    }
  }

  bool isArray() const {
 8000ed6:	b480      	push	{r7}
 8000ed8:	b083      	sub	sp, #12
 8000eda:	af00      	add	r7, sp, #0
 8000edc:	6078      	str	r0, [r7, #4]
    return (_flags & VALUE_IS_ARRAY) != 0;
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	7a1b      	ldrb	r3, [r3, #8]
 8000ee2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	bf14      	ite	ne
 8000eea:	2301      	movne	r3, #1
 8000eec:	2300      	moveq	r3, #0
 8000eee:	b2db      	uxtb	r3, r3
  }
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	370c      	adds	r7, #12
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efa:	4770      	bx	lr

08000efc <_ZNK19ArduinoJson6101_11011VariantData8isObjectEv>:

  bool isString() const {
    return type() == VALUE_IS_LINKED_STRING || type() == VALUE_IS_OWNED_STRING;
  }

  bool isObject() const {
 8000efc:	b480      	push	{r7}
 8000efe:	b083      	sub	sp, #12
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
    return (_flags & VALUE_IS_OBJECT) != 0;
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	7a1b      	ldrb	r3, [r3, #8]
 8000f08:	f003 0320 	and.w	r3, r3, #32
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	bf14      	ite	ne
 8000f10:	2301      	movne	r3, #1
 8000f12:	2300      	moveq	r3, #0
 8000f14:	b2db      	uxtb	r3, r3
  }
 8000f16:	4618      	mov	r0, r3
 8000f18:	370c      	adds	r7, #12
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f20:	4770      	bx	lr

08000f22 <_ZN19ArduinoJson6101_11011VariantData10setBooleanEb>:
  template <typename TAdaptedString>
  void remove(TAdaptedString key) {
    if (isObject()) _content.asCollection.remove(key);
  }

  void setBoolean(bool value) {
 8000f22:	b5b0      	push	{r4, r5, r7, lr}
 8000f24:	b082      	sub	sp, #8
 8000f26:	af00      	add	r7, sp, #0
 8000f28:	6078      	str	r0, [r7, #4]
 8000f2a:	460b      	mov	r3, r1
 8000f2c:	70fb      	strb	r3, [r7, #3]
    setType(VALUE_IS_BOOLEAN);
 8000f2e:	2105      	movs	r1, #5
 8000f30:	6878      	ldr	r0, [r7, #4]
 8000f32:	f000 f895 	bl	8001060 <_ZN19ArduinoJson6101_11011VariantData7setTypeEh>
    _content.asInteger = static_cast<UInt>(value);
 8000f36:	78fb      	ldrb	r3, [r7, #3]
 8000f38:	2200      	movs	r2, #0
 8000f3a:	461c      	mov	r4, r3
 8000f3c:	4615      	mov	r5, r2
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	e9c3 4500 	strd	r4, r5, [r3]
  }
 8000f44:	bf00      	nop
 8000f46:	3708      	adds	r7, #8
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bdb0      	pop	{r4, r5, r7, pc}

08000f4c <_ZN19ArduinoJson6101_11011VariantData8setFloatEd>:

  void setFloat(Float value) {
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b084      	sub	sp, #16
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	60f8      	str	r0, [r7, #12]
 8000f54:	ed87 0b00 	vstr	d0, [r7]
    setType(VALUE_IS_FLOAT);
 8000f58:	2108      	movs	r1, #8
 8000f5a:	68f8      	ldr	r0, [r7, #12]
 8000f5c:	f000 f880 	bl	8001060 <_ZN19ArduinoJson6101_11011VariantData7setTypeEh>
    _content.asFloat = value;
 8000f60:	68f9      	ldr	r1, [r7, #12]
 8000f62:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000f66:	e9c1 2300 	strd	r2, r3, [r1]
  }
 8000f6a:	bf00      	nop
 8000f6c:	3710      	adds	r7, #16
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}

08000f72 <_ZN19ArduinoJson6101_11011VariantData18setPositiveIntegerEy>:
    } else {
      setNegativeInteger(~static_cast<UInt>(value) + 1);
    }
  }

  void setPositiveInteger(UInt value) {
 8000f72:	b580      	push	{r7, lr}
 8000f74:	b084      	sub	sp, #16
 8000f76:	af00      	add	r7, sp, #0
 8000f78:	60f8      	str	r0, [r7, #12]
 8000f7a:	e9c7 2300 	strd	r2, r3, [r7]
    setType(VALUE_IS_POSITIVE_INTEGER);
 8000f7e:	2106      	movs	r1, #6
 8000f80:	68f8      	ldr	r0, [r7, #12]
 8000f82:	f000 f86d 	bl	8001060 <_ZN19ArduinoJson6101_11011VariantData7setTypeEh>
    _content.asInteger = value;
 8000f86:	68f9      	ldr	r1, [r7, #12]
 8000f88:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000f8c:	e9c1 2300 	strd	r2, r3, [r1]
  }
 8000f90:	bf00      	nop
 8000f92:	3710      	adds	r7, #16
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bd80      	pop	{r7, pc}

08000f98 <_ZN19ArduinoJson6101_11011VariantData18setNegativeIntegerEy>:

  void setNegativeInteger(UInt value) {
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b084      	sub	sp, #16
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	60f8      	str	r0, [r7, #12]
 8000fa0:	e9c7 2300 	strd	r2, r3, [r7]
    setType(VALUE_IS_NEGATIVE_INTEGER);
 8000fa4:	2107      	movs	r1, #7
 8000fa6:	68f8      	ldr	r0, [r7, #12]
 8000fa8:	f000 f85a 	bl	8001060 <_ZN19ArduinoJson6101_11011VariantData7setTypeEh>
    _content.asInteger = value;
 8000fac:	68f9      	ldr	r1, [r7, #12]
 8000fae:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000fb2:	e9c1 2300 	strd	r2, r3, [r1]
  }
 8000fb6:	bf00      	nop
 8000fb8:	3710      	adds	r7, #16
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}

08000fbe <_ZN19ArduinoJson6101_11011VariantData7setNullEv>:
    } else {
      setType(VALUE_IS_NULL);
    }
  }

  void setNull() {
 8000fbe:	b580      	push	{r7, lr}
 8000fc0:	b082      	sub	sp, #8
 8000fc2:	af00      	add	r7, sp, #0
 8000fc4:	6078      	str	r0, [r7, #4]
    setType(VALUE_IS_NULL);
 8000fc6:	2100      	movs	r1, #0
 8000fc8:	6878      	ldr	r0, [r7, #4]
 8000fca:	f000 f849 	bl	8001060 <_ZN19ArduinoJson6101_11011VariantData7setTypeEh>
  }
 8000fce:	bf00      	nop
 8000fd0:	3708      	adds	r7, #8
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}

08000fd6 <_ZN19ArduinoJson6101_11011VariantData14setOwnedStringENS_8not_nullIPKcEE>:

  void setOwnedString(not_null<const char *> s) {
 8000fd6:	b580      	push	{r7, lr}
 8000fd8:	b082      	sub	sp, #8
 8000fda:	af00      	add	r7, sp, #0
 8000fdc:	6078      	str	r0, [r7, #4]
 8000fde:	6039      	str	r1, [r7, #0]
    setType(VALUE_IS_OWNED_STRING);
 8000fe0:	2104      	movs	r1, #4
 8000fe2:	6878      	ldr	r0, [r7, #4]
 8000fe4:	f000 f83c 	bl	8001060 <_ZN19ArduinoJson6101_11011VariantData7setTypeEh>
    _content.asString = s.get();
 8000fe8:	463b      	mov	r3, r7
 8000fea:	4618      	mov	r0, r3
 8000fec:	f001 fbc4 	bl	8002778 <_ZNK19ArduinoJson6101_1108not_nullIPKcE3getEv>
 8000ff0:	4602      	mov	r2, r0
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	601a      	str	r2, [r3, #0]
  }
 8000ff6:	bf00      	nop
 8000ff8:	3708      	adds	r7, #8
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}

08000ffe <_ZN19ArduinoJson6101_11011VariantData7toArrayEv>:
  void setUnsignedInteger(UInt value) {
    setType(VALUE_IS_POSITIVE_INTEGER);
    _content.asInteger = static_cast<UInt>(value);
  }

  CollectionData &toArray() {
 8000ffe:	b580      	push	{r7, lr}
 8001000:	b082      	sub	sp, #8
 8001002:	af00      	add	r7, sp, #0
 8001004:	6078      	str	r0, [r7, #4]
    setType(VALUE_IS_ARRAY);
 8001006:	2140      	movs	r1, #64	@ 0x40
 8001008:	6878      	ldr	r0, [r7, #4]
 800100a:	f000 f829 	bl	8001060 <_ZN19ArduinoJson6101_11011VariantData7setTypeEh>
    _content.asCollection.clear();
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	4618      	mov	r0, r3
 8001012:	f000 f957 	bl	80012c4 <_ZN19ArduinoJson6101_11014CollectionData5clearEv>
    return _content.asCollection;
 8001016:	687b      	ldr	r3, [r7, #4]
  }
 8001018:	4618      	mov	r0, r3
 800101a:	3708      	adds	r7, #8
 800101c:	46bd      	mov	sp, r7
 800101e:	bd80      	pop	{r7, pc}

08001020 <_ZN19ArduinoJson6101_11011VariantData8toObjectEv>:

  CollectionData &toObject() {
 8001020:	b580      	push	{r7, lr}
 8001022:	b082      	sub	sp, #8
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
    setType(VALUE_IS_OBJECT);
 8001028:	2120      	movs	r1, #32
 800102a:	6878      	ldr	r0, [r7, #4]
 800102c:	f000 f818 	bl	8001060 <_ZN19ArduinoJson6101_11011VariantData7setTypeEh>
    _content.asCollection.clear();
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	4618      	mov	r0, r3
 8001034:	f000 f946 	bl	80012c4 <_ZN19ArduinoJson6101_11014CollectionData5clearEv>
    return _content.asCollection;
 8001038:	687b      	ldr	r3, [r7, #4]
  }
 800103a:	4618      	mov	r0, r3
 800103c:	3708      	adds	r7, #8
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}

08001042 <_ZNK19ArduinoJson6101_11011VariantData4typeEv>:
    if (var) return var;
    return _content.asCollection.add(key, pool);
  }

 private:
  uint8_t type() const {
 8001042:	b480      	push	{r7}
 8001044:	b083      	sub	sp, #12
 8001046:	af00      	add	r7, sp, #0
 8001048:	6078      	str	r0, [r7, #4]
    return _flags & VALUE_MASK;
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	7a1b      	ldrb	r3, [r3, #8]
 800104e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001052:	b2db      	uxtb	r3, r3
  }
 8001054:	4618      	mov	r0, r3
 8001056:	370c      	adds	r7, #12
 8001058:	46bd      	mov	sp, r7
 800105a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105e:	4770      	bx	lr

08001060 <_ZN19ArduinoJson6101_11011VariantData7setTypeEh>:

  void setType(uint8_t t) {
 8001060:	b480      	push	{r7}
 8001062:	b083      	sub	sp, #12
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
 8001068:	460b      	mov	r3, r1
 800106a:	70fb      	strb	r3, [r7, #3]
    _flags &= KEY_IS_OWNED;
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	7a1b      	ldrb	r3, [r3, #8]
 8001070:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8001074:	b2da      	uxtb	r2, r3
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	721a      	strb	r2, [r3, #8]
    _flags |= t;
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	7a1a      	ldrb	r2, [r3, #8]
 800107e:	78fb      	ldrb	r3, [r7, #3]
 8001080:	4313      	orrs	r3, r2
 8001082:	b2da      	uxtb	r2, r3
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	721a      	strb	r2, [r3, #8]
  }
 8001088:	bf00      	nop
 800108a:	370c      	adds	r7, #12
 800108c:	46bd      	mov	sp, r7
 800108e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001092:	4770      	bx	lr

08001094 <_ZN19ArduinoJson6101_1108slotDataEPNS_11VariantSlotE>:
    var = var->next();
  }
  return n;
}

inline VariantData* slotData(VariantSlot* slot) {
 8001094:	b480      	push	{r7}
 8001096:	b083      	sub	sp, #12
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
  return reinterpret_cast<VariantData*>(slot);
 800109c:	687b      	ldr	r3, [r7, #4]
}
 800109e:	4618      	mov	r0, r3
 80010a0:	370c      	adds	r7, #12
 80010a2:	46bd      	mov	sp, r7
 80010a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a8:	4770      	bx	lr

080010aa <_ZN19ArduinoJson6101_11015variantAsObjectEPNS_11VariantDataE>:

inline const CollectionData *variantAsObject(const VariantData *var) {
  return var != 0 ? var->asObject() : 0;
}

inline CollectionData *variantAsObject(VariantData *var) {
 80010aa:	b580      	push	{r7, lr}
 80010ac:	b082      	sub	sp, #8
 80010ae:	af00      	add	r7, sp, #0
 80010b0:	6078      	str	r0, [r7, #4]
  return var != 0 ? var->asObject() : 0;
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d004      	beq.n	80010c2 <_ZN19ArduinoJson6101_11015variantAsObjectEPNS_11VariantDataE+0x18>
 80010b8:	6878      	ldr	r0, [r7, #4]
 80010ba:	f7ff fefb 	bl	8000eb4 <_ZN19ArduinoJson6101_11011VariantData8asObjectEv>
 80010be:	4603      	mov	r3, r0
 80010c0:	e000      	b.n	80010c4 <_ZN19ArduinoJson6101_11015variantAsObjectEPNS_11VariantDataE+0x1a>
 80010c2:	2300      	movs	r3, #0
}
 80010c4:	4618      	mov	r0, r3
 80010c6:	3708      	adds	r7, #8
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd80      	pop	{r7, pc}

080010cc <_ZN19ArduinoJson6101_11013ArrayIteratorC1Ev>:
  VariantRef _variant;
};

class ArrayIterator {
 public:
  ArrayIterator() : _slot(0) {}
 80010cc:	b480      	push	{r7}
 80010ce:	b083      	sub	sp, #12
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	2200      	movs	r2, #0
 80010d8:	605a      	str	r2, [r3, #4]
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	4618      	mov	r0, r3
 80010de:	370c      	adds	r7, #12
 80010e0:	46bd      	mov	sp, r7
 80010e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e6:	4770      	bx	lr

080010e8 <_ZN19ArduinoJson6101_11013ArrayIteratorC1EPNS_10MemoryPoolEPNS_11VariantSlotE>:
  explicit ArrayIterator(MemoryPool *pool, VariantSlot *slot)
 80010e8:	b480      	push	{r7}
 80010ea:	b085      	sub	sp, #20
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	60f8      	str	r0, [r7, #12]
 80010f0:	60b9      	str	r1, [r7, #8]
 80010f2:	607a      	str	r2, [r7, #4]
      : _pool(pool), _slot(slot) {}
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	68ba      	ldr	r2, [r7, #8]
 80010f8:	601a      	str	r2, [r3, #0]
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	687a      	ldr	r2, [r7, #4]
 80010fe:	605a      	str	r2, [r3, #4]
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	4618      	mov	r0, r3
 8001104:	3714      	adds	r7, #20
 8001106:	46bd      	mov	sp, r7
 8001108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110c:	4770      	bx	lr

0800110e <_ZNK19ArduinoJson6101_11013ArrayIteratordeEv>:

  VariantRef operator*() const {
 800110e:	b590      	push	{r4, r7, lr}
 8001110:	b085      	sub	sp, #20
 8001112:	af00      	add	r7, sp, #0
 8001114:	6078      	str	r0, [r7, #4]
 8001116:	6039      	str	r1, [r7, #0]
    return VariantRef(_pool, _slot->data());
 8001118:	683b      	ldr	r3, [r7, #0]
 800111a:	681c      	ldr	r4, [r3, #0]
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	685b      	ldr	r3, [r3, #4]
 8001120:	4618      	mov	r0, r3
 8001122:	f7ff fd35 	bl	8000b90 <_ZN19ArduinoJson6101_11011VariantSlot4dataEv>
 8001126:	4603      	mov	r3, r0
 8001128:	60fc      	str	r4, [r7, #12]
 800112a:	60bb      	str	r3, [r7, #8]
  friend class VariantConstRef;

 public:
  // Intenal use only
  FORCE_INLINE VariantRef(MemoryPool *pool, VariantData *data)
      : base_type(data), _pool(pool) {}
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	68b9      	ldr	r1, [r7, #8]
 8001130:	4618      	mov	r0, r3
 8001132:	f001 fb49 	bl	80027c8 <_ZN19ArduinoJson6101_11014VariantRefBaseINS_11VariantDataEEC1EPS1_>
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	68fa      	ldr	r2, [r7, #12]
 800113a:	605a      	str	r2, [r3, #4]
 800113c:	bf00      	nop
  }
 800113e:	6878      	ldr	r0, [r7, #4]
 8001140:	3714      	adds	r7, #20
 8001142:	46bd      	mov	sp, r7
 8001144:	bd90      	pop	{r4, r7, pc}

08001146 <_ZNK19ArduinoJson6101_11013ArrayIteratorneERKS0_>:

  bool operator==(const ArrayIterator &other) const {
    return _slot == other._slot;
  }

  bool operator!=(const ArrayIterator &other) const {
 8001146:	b480      	push	{r7}
 8001148:	b083      	sub	sp, #12
 800114a:	af00      	add	r7, sp, #0
 800114c:	6078      	str	r0, [r7, #4]
 800114e:	6039      	str	r1, [r7, #0]
    return _slot != other._slot;
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	685a      	ldr	r2, [r3, #4]
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	685b      	ldr	r3, [r3, #4]
 8001158:	429a      	cmp	r2, r3
 800115a:	bf14      	ite	ne
 800115c:	2301      	movne	r3, #1
 800115e:	2300      	moveq	r3, #0
 8001160:	b2db      	uxtb	r3, r3
  }
 8001162:	4618      	mov	r0, r3
 8001164:	370c      	adds	r7, #12
 8001166:	46bd      	mov	sp, r7
 8001168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116c:	4770      	bx	lr

0800116e <_ZN19ArduinoJson6101_11013ArrayIteratorppEv>:

  ArrayIterator &operator++() {
 800116e:	b580      	push	{r7, lr}
 8001170:	b082      	sub	sp, #8
 8001172:	af00      	add	r7, sp, #0
 8001174:	6078      	str	r0, [r7, #4]
    _slot = _slot->next();
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	685b      	ldr	r3, [r3, #4]
 800117a:	4618      	mov	r0, r3
 800117c:	f7ff fd13 	bl	8000ba6 <_ZN19ArduinoJson6101_11011VariantSlot4nextEv>
 8001180:	4602      	mov	r2, r0
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	605a      	str	r2, [r3, #4]
    return *this;
 8001186:	687b      	ldr	r3, [r7, #4]
  }
 8001188:	4618      	mov	r0, r3
 800118a:	3708      	adds	r7, #8
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}

08001190 <_ZN19ArduinoJson6101_11012JsonDocument5clearEv>:
  template <typename T>
  typename VariantConstAs<T>::type as() const {
    return getVariant().template as<T>();
  }

  void clear() {
 8001190:	b580      	push	{r7, lr}
 8001192:	b082      	sub	sp, #8
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
    _pool.clear();
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	4618      	mov	r0, r3
 800119c:	f7ff fde7 	bl	8000d6e <_ZN19ArduinoJson6101_11010MemoryPool5clearEv>
    _data.setNull();
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	3310      	adds	r3, #16
 80011a4:	4618      	mov	r0, r3
 80011a6:	f7ff ff0a 	bl	8000fbe <_ZN19ArduinoJson6101_11011VariantData7setNullEv>
  }
 80011aa:	bf00      	nop
 80011ac:	3708      	adds	r7, #8
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}

080011b2 <_ZN19ArduinoJson6101_11012JsonDocument10memoryPoolEv>:
    clear();
    return getVariant().template to<T>();
  }

  // for internal use only
  MemoryPool& memoryPool() {
 80011b2:	b480      	push	{r7}
 80011b4:	b083      	sub	sp, #12
 80011b6:	af00      	add	r7, sp, #0
 80011b8:	6078      	str	r0, [r7, #4]
    return _pool;
 80011ba:	687b      	ldr	r3, [r7, #4]
  }
 80011bc:	4618      	mov	r0, r3
 80011be:	370c      	adds	r7, #12
 80011c0:	46bd      	mov	sp, r7
 80011c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c6:	4770      	bx	lr

080011c8 <_ZN19ArduinoJson6101_11012JsonDocument4dataEv>:

  VariantData& data() {
 80011c8:	b480      	push	{r7}
 80011ca:	b083      	sub	sp, #12
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
    return _data;
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	3310      	adds	r3, #16
  }
 80011d4:	4618      	mov	r0, r3
 80011d6:	370c      	adds	r7, #12
 80011d8:	46bd      	mov	sp, r7
 80011da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011de:	4770      	bx	lr

080011e0 <_ZN19ArduinoJson6101_11012JsonDocumentC1ENS_10MemoryPoolE>:
      const TString& key) {
    _data.remove(adaptString(key));
  }

 protected:
  JsonDocument(MemoryPool pool) : _pool(pool) {
 80011e0:	b084      	sub	sp, #16
 80011e2:	b590      	push	{r4, r7, lr}
 80011e4:	b083      	sub	sp, #12
 80011e6:	af00      	add	r7, sp, #0
 80011e8:	6078      	str	r0, [r7, #4]
 80011ea:	f107 001c 	add.w	r0, r7, #28
 80011ee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	461c      	mov	r4, r3
 80011f6:	f107 031c 	add.w	r3, r7, #28
 80011fa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80011fc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    _data.setNull();
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	3310      	adds	r3, #16
 8001204:	4618      	mov	r0, r3
 8001206:	f7ff feda 	bl	8000fbe <_ZN19ArduinoJson6101_11011VariantData7setNullEv>
  }
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	4618      	mov	r0, r3
 800120e:	370c      	adds	r7, #12
 8001210:	46bd      	mov	sp, r7
 8001212:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8001216:	b004      	add	sp, #16
 8001218:	4770      	bx	lr

0800121a <_ZN19ArduinoJson6101_11016DefaultAllocator8allocateEj>:
#include <stdlib.h>  // malloc, free

namespace ARDUINOJSON_NAMESPACE {

struct DefaultAllocator {
  void* allocate(size_t n) {
 800121a:	b580      	push	{r7, lr}
 800121c:	b082      	sub	sp, #8
 800121e:	af00      	add	r7, sp, #0
 8001220:	6078      	str	r0, [r7, #4]
 8001222:	6039      	str	r1, [r7, #0]
    return malloc(n);
 8001224:	6838      	ldr	r0, [r7, #0]
 8001226:	f011 ff91 	bl	801314c <malloc>
 800122a:	4603      	mov	r3, r0
  }
 800122c:	4618      	mov	r0, r3
 800122e:	3708      	adds	r7, #8
 8001230:	46bd      	mov	sp, r7
 8001232:	bd80      	pop	{r7, pc}

08001234 <_ZN19ArduinoJson6101_11016DefaultAllocator10deallocateEPv>:

  void deallocate(void* p) {
 8001234:	b580      	push	{r7, lr}
 8001236:	b082      	sub	sp, #8
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
 800123c:	6039      	str	r1, [r7, #0]
    free(p);
 800123e:	6838      	ldr	r0, [r7, #0]
 8001240:	f011 ff8c 	bl	801315c <free>
  }
 8001244:	bf00      	nop
 8001246:	3708      	adds	r7, #8
 8001248:	46bd      	mov	sp, r7
 800124a:	bd80      	pop	{r7, pc}

0800124c <_ZN19ArduinoJson6101_11014CollectionData7addSlotEPNS_10MemoryPoolE>:
#include "../Variant/VariantData.hpp"
#include "CollectionData.hpp"

namespace ARDUINOJSON_NAMESPACE {

inline VariantSlot* CollectionData::addSlot(MemoryPool* pool) {
 800124c:	b580      	push	{r7, lr}
 800124e:	b084      	sub	sp, #16
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
 8001254:	6039      	str	r1, [r7, #0]
  VariantSlot* slot = pool->allocVariant();
 8001256:	6838      	ldr	r0, [r7, #0]
 8001258:	f7ff fd47 	bl	8000cea <_ZN19ArduinoJson6101_11010MemoryPool12allocVariantEv>
 800125c:	60f8      	str	r0, [r7, #12]
  if (!slot) return 0;
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	2b00      	cmp	r3, #0
 8001262:	d101      	bne.n	8001268 <_ZN19ArduinoJson6101_11014CollectionData7addSlotEPNS_10MemoryPoolE+0x1c>
 8001264:	2300      	movs	r3, #0
 8001266:	e017      	b.n	8001298 <_ZN19ArduinoJson6101_11014CollectionData7addSlotEPNS_10MemoryPoolE+0x4c>

  if (_tail) {
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	685b      	ldr	r3, [r3, #4]
 800126c:	2b00      	cmp	r3, #0
 800126e:	d009      	beq.n	8001284 <_ZN19ArduinoJson6101_11014CollectionData7addSlotEPNS_10MemoryPoolE+0x38>
    _tail->setNextNotNull(slot);
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	685b      	ldr	r3, [r3, #4]
 8001274:	68f9      	ldr	r1, [r7, #12]
 8001276:	4618      	mov	r0, r3
 8001278:	f7ff fcac 	bl	8000bd4 <_ZN19ArduinoJson6101_11011VariantSlot14setNextNotNullEPS0_>
    _tail = slot;
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	68fa      	ldr	r2, [r7, #12]
 8001280:	605a      	str	r2, [r3, #4]
 8001282:	e005      	b.n	8001290 <_ZN19ArduinoJson6101_11014CollectionData7addSlotEPNS_10MemoryPoolE+0x44>
  } else {
    _head = slot;
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	68fa      	ldr	r2, [r7, #12]
 8001288:	601a      	str	r2, [r3, #0]
    _tail = slot;
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	68fa      	ldr	r2, [r7, #12]
 800128e:	605a      	str	r2, [r3, #4]
  }

  slot->clear();
 8001290:	68f8      	ldr	r0, [r7, #12]
 8001292:	f7ff fcd4 	bl	8000c3e <_ZN19ArduinoJson6101_11011VariantSlot5clearEv>
  return slot;
 8001296:	68fb      	ldr	r3, [r7, #12]
}
 8001298:	4618      	mov	r0, r3
 800129a:	3710      	adds	r7, #16
 800129c:	46bd      	mov	sp, r7
 800129e:	bd80      	pop	{r7, pc}

080012a0 <_ZN19ArduinoJson6101_11014CollectionData3addEPNS_10MemoryPoolE>:

inline VariantData* CollectionData::add(MemoryPool* pool) {
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b082      	sub	sp, #8
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
 80012a8:	6039      	str	r1, [r7, #0]
  return slotData(addSlot(pool));
 80012aa:	6839      	ldr	r1, [r7, #0]
 80012ac:	6878      	ldr	r0, [r7, #4]
 80012ae:	f7ff ffcd 	bl	800124c <_ZN19ArduinoJson6101_11014CollectionData7addSlotEPNS_10MemoryPoolE>
 80012b2:	4603      	mov	r3, r0
 80012b4:	4618      	mov	r0, r3
 80012b6:	f7ff feed 	bl	8001094 <_ZN19ArduinoJson6101_1108slotDataEPNS_11VariantSlotE>
 80012ba:	4603      	mov	r3, r0
}
 80012bc:	4618      	mov	r0, r3
 80012be:	3708      	adds	r7, #8
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bd80      	pop	{r7, pc}

080012c4 <_ZN19ArduinoJson6101_11014CollectionData5clearEv>:
  VariantSlot* slot = addSlot(pool);
  if (!slotSetKey(slot, key, pool)) return 0;
  return slot->data();
}

inline void CollectionData::clear() {
 80012c4:	b480      	push	{r7}
 80012c6:	b083      	sub	sp, #12
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
  _head = 0;
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	2200      	movs	r2, #0
 80012d0:	601a      	str	r2, [r3, #0]
  _tail = 0;
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	2200      	movs	r2, #0
 80012d6:	605a      	str	r2, [r3, #4]
}
 80012d8:	bf00      	nop
 80012da:	370c      	adds	r7, #12
 80012dc:	46bd      	mov	sp, r7
 80012de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e2:	4770      	bx	lr

080012e4 <_ZN19ArduinoJson6101_1107isdigitEc>:

#pragma once

namespace ARDUINOJSON_NAMESPACE {

inline bool isdigit(char c) {
 80012e4:	b480      	push	{r7}
 80012e6:	b083      	sub	sp, #12
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	4603      	mov	r3, r0
 80012ec:	71fb      	strb	r3, [r7, #7]
  return '0' <= c && c <= '9';
 80012ee:	79fb      	ldrb	r3, [r7, #7]
 80012f0:	2b2f      	cmp	r3, #47	@ 0x2f
 80012f2:	d904      	bls.n	80012fe <_ZN19ArduinoJson6101_1107isdigitEc+0x1a>
 80012f4:	79fb      	ldrb	r3, [r7, #7]
 80012f6:	2b39      	cmp	r3, #57	@ 0x39
 80012f8:	d801      	bhi.n	80012fe <_ZN19ArduinoJson6101_1107isdigitEc+0x1a>
 80012fa:	2301      	movs	r3, #1
 80012fc:	e000      	b.n	8001300 <_ZN19ArduinoJson6101_1107isdigitEc+0x1c>
 80012fe:	2300      	movs	r3, #0
}
 8001300:	4618      	mov	r0, r3
 8001302:	370c      	adds	r7, #12
 8001304:	46bd      	mov	sp, r7
 8001306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130a:	4770      	bx	lr

0800130c <_ZNK19ArduinoJson6101_11011VariantData8asStringEv>:
    default:
      return 0;
  }
}

inline const char *VariantData::asString() const {
 800130c:	b580      	push	{r7, lr}
 800130e:	b082      	sub	sp, #8
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
  switch (type()) {
 8001314:	6878      	ldr	r0, [r7, #4]
 8001316:	f7ff fe94 	bl	8001042 <_ZNK19ArduinoJson6101_11011VariantData4typeEv>
 800131a:	4603      	mov	r3, r0
 800131c:	3b03      	subs	r3, #3
 800131e:	2b01      	cmp	r3, #1
 8001320:	d802      	bhi.n	8001328 <_ZNK19ArduinoJson6101_11011VariantData8asStringEv+0x1c>
    case VALUE_IS_LINKED_STRING:
    case VALUE_IS_OWNED_STRING:
      return _content.asString;
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	e000      	b.n	800132a <_ZNK19ArduinoJson6101_11011VariantData8asStringEv+0x1e>
    default:
      return 0;
 8001328:	2300      	movs	r3, #0
  }
}
 800132a:	4618      	mov	r0, r3
 800132c:	3708      	adds	r7, #8
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}

08001332 <_ZN19ArduinoJson6101_11013StringBuilderC1EPNS_10MemoryPoolE>:

namespace ARDUINOJSON_NAMESPACE {

class StringBuilder {
 public:
  explicit StringBuilder(MemoryPool* parent) : _parent(parent), _size(0) {
 8001332:	b590      	push	{r4, r7, lr}
 8001334:	b085      	sub	sp, #20
 8001336:	af00      	add	r7, sp, #0
 8001338:	60f8      	str	r0, [r7, #12]
 800133a:	60b9      	str	r1, [r7, #8]
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	68ba      	ldr	r2, [r7, #8]
 8001340:	601a      	str	r2, [r3, #0]
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	2200      	movs	r2, #0
 8001346:	605a      	str	r2, [r3, #4]
    _slot = _parent->allocExpandableString();
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	681a      	ldr	r2, [r3, #0]
 800134c:	68fc      	ldr	r4, [r7, #12]
 800134e:	463b      	mov	r3, r7
 8001350:	4611      	mov	r1, r2
 8001352:	4618      	mov	r0, r3
 8001354:	f7ff fcd5 	bl	8000d02 <_ZN19ArduinoJson6101_11010MemoryPool21allocExpandableStringEv>
 8001358:	f104 0308 	add.w	r3, r4, #8
 800135c:	463a      	mov	r2, r7
 800135e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001362:	e883 0003 	stmia.w	r3, {r0, r1}
  }
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	4618      	mov	r0, r3
 800136a:	3714      	adds	r7, #20
 800136c:	46bd      	mov	sp, r7
 800136e:	bd90      	pop	{r4, r7, pc}

08001370 <_ZN19ArduinoJson6101_11013StringBuilder6appendEc>:

  void append(const char* s, size_t n) {
    while (n-- > 0) append(*s++);
  }

  void append(char c) {
 8001370:	b490      	push	{r4, r7}
 8001372:	b082      	sub	sp, #8
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
 8001378:	460b      	mov	r3, r1
 800137a:	70fb      	strb	r3, [r7, #3]
    if (!_slot.value) return;
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	689b      	ldr	r3, [r3, #8]
 8001380:	2b00      	cmp	r3, #0
 8001382:	d015      	beq.n	80013b0 <_ZN19ArduinoJson6101_11013StringBuilder6appendEc+0x40>

    if (_size >= _slot.size) {
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	685a      	ldr	r2, [r3, #4]
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	68db      	ldr	r3, [r3, #12]
 800138c:	429a      	cmp	r2, r3
 800138e:	d303      	bcc.n	8001398 <_ZN19ArduinoJson6101_11013StringBuilder6appendEc+0x28>
      _slot.value = 0;
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	2200      	movs	r2, #0
 8001394:	609a      	str	r2, [r3, #8]
      return;
 8001396:	e00c      	b.n	80013b2 <_ZN19ArduinoJson6101_11013StringBuilder6appendEc+0x42>
    }

    _slot.value[_size++] = c;
 8001398:	78fc      	ldrb	r4, [r7, #3]
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	689a      	ldr	r2, [r3, #8]
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	685b      	ldr	r3, [r3, #4]
 80013a2:	1c58      	adds	r0, r3, #1
 80013a4:	6879      	ldr	r1, [r7, #4]
 80013a6:	6048      	str	r0, [r1, #4]
 80013a8:	4413      	add	r3, r2
 80013aa:	4622      	mov	r2, r4
 80013ac:	701a      	strb	r2, [r3, #0]
 80013ae:	e000      	b.n	80013b2 <_ZN19ArduinoJson6101_11013StringBuilder6appendEc+0x42>
    if (!_slot.value) return;
 80013b0:	bf00      	nop
  }
 80013b2:	3708      	adds	r7, #8
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bc90      	pop	{r4, r7}
 80013b8:	4770      	bx	lr

080013ba <_ZN19ArduinoJson6101_11013StringBuilder8completeEv>:

  char* complete() {
 80013ba:	b580      	push	{r7, lr}
 80013bc:	b082      	sub	sp, #8
 80013be:	af00      	add	r7, sp, #0
 80013c0:	6078      	str	r0, [r7, #4]
    append('\0');
 80013c2:	2100      	movs	r1, #0
 80013c4:	6878      	ldr	r0, [r7, #4]
 80013c6:	f7ff ffd3 	bl	8001370 <_ZN19ArduinoJson6101_11013StringBuilder6appendEc>
    if (_slot.value) {
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	689b      	ldr	r3, [r3, #8]
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d009      	beq.n	80013e6 <_ZN19ArduinoJson6101_11013StringBuilder8completeEv+0x2c>
      _parent->freezeString(_slot, _size);
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	6818      	ldr	r0, [r3, #0]
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	f103 0108 	add.w	r1, r3, #8
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	685b      	ldr	r3, [r3, #4]
 80013e0:	461a      	mov	r2, r3
 80013e2:	f7ff fcab 	bl	8000d3c <_ZN19ArduinoJson6101_11010MemoryPool12freezeStringERNS_10StringSlotEj>
    }
    return _slot.value;
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	689b      	ldr	r3, [r3, #8]
  }
 80013ea:	4618      	mov	r0, r3
 80013ec:	3708      	adds	r7, #8
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}

080013f2 <_ZN19ArduinoJson6101_11012StringCopierC1EPNS_10MemoryPoolE>:

class StringCopier {
 public:
  typedef ARDUINOJSON_NAMESPACE::StringBuilder StringBuilder;

  StringCopier(MemoryPool* pool) : _pool(pool) {}
 80013f2:	b480      	push	{r7}
 80013f4:	b083      	sub	sp, #12
 80013f6:	af00      	add	r7, sp, #0
 80013f8:	6078      	str	r0, [r7, #4]
 80013fa:	6039      	str	r1, [r7, #0]
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	683a      	ldr	r2, [r7, #0]
 8001400:	601a      	str	r2, [r3, #0]
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	4618      	mov	r0, r3
 8001406:	370c      	adds	r7, #12
 8001408:	46bd      	mov	sp, r7
 800140a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140e:	4770      	bx	lr

08001410 <_ZN19ArduinoJson6101_11012StringCopier11startStringEv>:

  StringBuilder startString() {
 8001410:	b580      	push	{r7, lr}
 8001412:	b082      	sub	sp, #8
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
 8001418:	6039      	str	r1, [r7, #0]
    return StringBuilder(_pool);
 800141a:	683b      	ldr	r3, [r7, #0]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	4619      	mov	r1, r3
 8001420:	6878      	ldr	r0, [r7, #4]
 8001422:	f7ff ff86 	bl	8001332 <_ZN19ArduinoJson6101_11013StringBuilderC1EPNS_10MemoryPoolE>
  }
 8001426:	6878      	ldr	r0, [r7, #4]
 8001428:	3708      	adds	r7, #8
 800142a:	46bd      	mov	sp, r7
 800142c:	bd80      	pop	{r7, pc}
	...

08001430 <_ZN19ArduinoJson6101_11023UnsafeCharPointerReaderC1EPKc>:

class UnsafeCharPointerReader {
  const char* _ptr;

 public:
  explicit UnsafeCharPointerReader(const char* ptr)
 8001430:	b480      	push	{r7}
 8001432:	b083      	sub	sp, #12
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
 8001438:	6039      	str	r1, [r7, #0]
      : _ptr(ptr ? ptr : reinterpret_cast<const char*>("")) {}
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	2b00      	cmp	r3, #0
 800143e:	d001      	beq.n	8001444 <_ZN19ArduinoJson6101_11023UnsafeCharPointerReaderC1EPKc+0x14>
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	e000      	b.n	8001446 <_ZN19ArduinoJson6101_11023UnsafeCharPointerReaderC1EPKc+0x16>
 8001444:	4b04      	ldr	r3, [pc, #16]	@ (8001458 <_ZN19ArduinoJson6101_11023UnsafeCharPointerReaderC1EPKc+0x28>)
 8001446:	687a      	ldr	r2, [r7, #4]
 8001448:	6013      	str	r3, [r2, #0]
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	4618      	mov	r0, r3
 800144e:	370c      	adds	r7, #12
 8001450:	46bd      	mov	sp, r7
 8001452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001456:	4770      	bx	lr
 8001458:	080142d0 	.word	0x080142d0

0800145c <_ZN19ArduinoJson6101_11023UnsafeCharPointerReader4readEv>:

  char read() {
 800145c:	b480      	push	{r7}
 800145e:	b083      	sub	sp, #12
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
    return static_cast<char>(*_ptr++);
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	1c59      	adds	r1, r3, #1
 800146a:	687a      	ldr	r2, [r7, #4]
 800146c:	6011      	str	r1, [r2, #0]
 800146e:	781b      	ldrb	r3, [r3, #0]
  }
 8001470:	4618      	mov	r0, r3
 8001472:	370c      	adds	r7, #12
 8001474:	46bd      	mov	sp, r7
 8001476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147a:	4770      	bx	lr

0800147c <_ZNK19ArduinoJson6101_11023UnsafeCharPointerReader5endedEv>:

  bool ended() const {
 800147c:	b480      	push	{r7}
 800147e:	b083      	sub	sp, #12
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
    // we cannot know, that's why it's unsafe
    return false;
 8001484:	2300      	movs	r3, #0
  }
 8001486:	4618      	mov	r0, r3
 8001488:	370c      	adds	r7, #12
 800148a:	46bd      	mov	sp, r7
 800148c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001490:	4770      	bx	lr

08001492 <_ZNK19ArduinoJson6101_11020DeserializationError14safeBoolHelperEv>:
namespace ARDUINOJSON_NAMESPACE {

class DeserializationError {
  // safe bool idiom
  typedef void (DeserializationError::*bool_type)() const;
  void safeBoolHelper() const {}
 8001492:	b480      	push	{r7}
 8001494:	b083      	sub	sp, #12
 8001496:	af00      	add	r7, sp, #0
 8001498:	6078      	str	r0, [r7, #4]
 800149a:	bf00      	nop
 800149c:	370c      	adds	r7, #12
 800149e:	46bd      	mov	sp, r7
 80014a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a4:	4770      	bx	lr

080014a6 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>:
    NotSupported,
    TooDeep
  };

  DeserializationError() {}
  DeserializationError(Code c) : _code(c) {}
 80014a6:	b480      	push	{r7}
 80014a8:	b083      	sub	sp, #12
 80014aa:	af00      	add	r7, sp, #0
 80014ac:	6078      	str	r0, [r7, #4]
 80014ae:	460b      	mov	r3, r1
 80014b0:	70fb      	strb	r3, [r7, #3]
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	78fa      	ldrb	r2, [r7, #3]
 80014b6:	701a      	strb	r2, [r3, #0]
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	4618      	mov	r0, r3
 80014bc:	370c      	adds	r7, #12
 80014be:	46bd      	mov	sp, r7
 80014c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c4:	4770      	bx	lr
	...

080014c8 <_ZNK19ArduinoJson6101_11020DeserializationErrorcvMS0_KFvvEEv>:
  friend bool operator!=(Code lhs, const DeserializationError& rhs) {
    return lhs != rhs._code;
  }

  // Behaves like a bool
  operator bool_type() const {
 80014c8:	b480      	push	{r7}
 80014ca:	b083      	sub	sp, #12
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
 80014d0:	6039      	str	r1, [r7, #0]
    return _code != Ok ? &DeserializationError::safeBoolHelper : 0;
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	781b      	ldrb	r3, [r3, #0]
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d106      	bne.n	80014e8 <_ZNK19ArduinoJson6101_11020DeserializationErrorcvMS0_KFvvEEv+0x20>
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	2200      	movs	r2, #0
 80014de:	601a      	str	r2, [r3, #0]
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	2200      	movs	r2, #0
 80014e4:	605a      	str	r2, [r3, #4]
 80014e6:	e005      	b.n	80014f4 <_ZNK19ArduinoJson6101_11020DeserializationErrorcvMS0_KFvvEEv+0x2c>
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	4a05      	ldr	r2, [pc, #20]	@ (8001500 <_ZNK19ArduinoJson6101_11020DeserializationErrorcvMS0_KFvvEEv+0x38>)
 80014ec:	601a      	str	r2, [r3, #0]
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	2200      	movs	r2, #0
 80014f2:	605a      	str	r2, [r3, #4]
  }
 80014f4:	6878      	ldr	r0, [r7, #4]
 80014f6:	370c      	adds	r7, #12
 80014f8:	46bd      	mov	sp, r7
 80014fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fe:	4770      	bx	lr
 8001500:	08001493 	.word	0x08001493

08001504 <_ZNK19ArduinoJson6101_11020DeserializationError4codeEv>:
  friend bool operator!=(const DeserializationError& err, bool value) {
    return static_cast<bool>(err) != value;
  }

  // Returns internal enum, useful for switch statement
  Code code() const {
 8001504:	b480      	push	{r7}
 8001506:	b083      	sub	sp, #12
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
    return _code;
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	781b      	ldrb	r3, [r3, #0]
  }
 8001510:	4618      	mov	r0, r3
 8001512:	370c      	adds	r7, #12
 8001514:	46bd      	mov	sp, r7
 8001516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151a:	4770      	bx	lr

0800151c <_ZNK19ArduinoJson6101_11020DeserializationError5c_strEv>:

  const char* c_str() const {
 800151c:	b480      	push	{r7}
 800151e:	b083      	sub	sp, #12
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
    switch (_code) {
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	781b      	ldrb	r3, [r3, #0]
 8001528:	2b05      	cmp	r3, #5
 800152a:	d81b      	bhi.n	8001564 <_ZNK19ArduinoJson6101_11020DeserializationError5c_strEv+0x48>
 800152c:	a201      	add	r2, pc, #4	@ (adr r2, 8001534 <_ZNK19ArduinoJson6101_11020DeserializationError5c_strEv+0x18>)
 800152e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001532:	bf00      	nop
 8001534:	0800154d 	.word	0x0800154d
 8001538:	0800155d 	.word	0x0800155d
 800153c:	08001559 	.word	0x08001559
 8001540:	08001555 	.word	0x08001555
 8001544:	08001561 	.word	0x08001561
 8001548:	08001551 	.word	0x08001551
      case Ok:
        return "Ok";
 800154c:	4b09      	ldr	r3, [pc, #36]	@ (8001574 <_ZNK19ArduinoJson6101_11020DeserializationError5c_strEv+0x58>)
 800154e:	e00a      	b.n	8001566 <_ZNK19ArduinoJson6101_11020DeserializationError5c_strEv+0x4a>
      case TooDeep:
        return "TooDeep";
 8001550:	4b09      	ldr	r3, [pc, #36]	@ (8001578 <_ZNK19ArduinoJson6101_11020DeserializationError5c_strEv+0x5c>)
 8001552:	e008      	b.n	8001566 <_ZNK19ArduinoJson6101_11020DeserializationError5c_strEv+0x4a>
      case NoMemory:
        return "NoMemory";
 8001554:	4b09      	ldr	r3, [pc, #36]	@ (800157c <_ZNK19ArduinoJson6101_11020DeserializationError5c_strEv+0x60>)
 8001556:	e006      	b.n	8001566 <_ZNK19ArduinoJson6101_11020DeserializationError5c_strEv+0x4a>
      case InvalidInput:
        return "InvalidInput";
 8001558:	4b09      	ldr	r3, [pc, #36]	@ (8001580 <_ZNK19ArduinoJson6101_11020DeserializationError5c_strEv+0x64>)
 800155a:	e004      	b.n	8001566 <_ZNK19ArduinoJson6101_11020DeserializationError5c_strEv+0x4a>
      case IncompleteInput:
        return "IncompleteInput";
 800155c:	4b09      	ldr	r3, [pc, #36]	@ (8001584 <_ZNK19ArduinoJson6101_11020DeserializationError5c_strEv+0x68>)
 800155e:	e002      	b.n	8001566 <_ZNK19ArduinoJson6101_11020DeserializationError5c_strEv+0x4a>
      case NotSupported:
        return "NotSupported";
 8001560:	4b09      	ldr	r3, [pc, #36]	@ (8001588 <_ZNK19ArduinoJson6101_11020DeserializationError5c_strEv+0x6c>)
 8001562:	e000      	b.n	8001566 <_ZNK19ArduinoJson6101_11020DeserializationError5c_strEv+0x4a>
      default:
        return "???";
 8001564:	4b09      	ldr	r3, [pc, #36]	@ (800158c <_ZNK19ArduinoJson6101_11020DeserializationError5c_strEv+0x70>)
    }
  }
 8001566:	4618      	mov	r0, r3
 8001568:	370c      	adds	r7, #12
 800156a:	46bd      	mov	sp, r7
 800156c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001570:	4770      	bx	lr
 8001572:	bf00      	nop
 8001574:	080142d4 	.word	0x080142d4
 8001578:	080142d8 	.word	0x080142d8
 800157c:	080142e0 	.word	0x080142e0
 8001580:	080142ec 	.word	0x080142ec
 8001584:	080142fc 	.word	0x080142fc
 8001588:	0801430c 	.word	0x0801430c
 800158c:	0801431c 	.word	0x0801431c

08001590 <_ZN19ArduinoJson6101_11012NestingLimitC1Ev>:
#include "../Configuration.hpp"

namespace ARDUINOJSON_NAMESPACE {

struct NestingLimit {
  NestingLimit() : value(ARDUINOJSON_DEFAULT_NESTING_LIMIT) {}
 8001590:	b480      	push	{r7}
 8001592:	b083      	sub	sp, #12
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	2232      	movs	r2, #50	@ 0x32
 800159c:	701a      	strb	r2, [r3, #0]
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	4618      	mov	r0, r3
 80015a2:	370c      	adds	r7, #12
 80015a4:	46bd      	mov	sp, r7
 80015a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015aa:	4770      	bx	lr

080015ac <_ZN19ArduinoJson6101_11014EscapeSequence12unescapeCharEc>:
    }
    return p[0];
  }

  // Optimized for code size on a 8-bit AVR
  static char unescapeChar(char c) {
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b084      	sub	sp, #16
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	4603      	mov	r3, r0
 80015b4:	71fb      	strb	r3, [r7, #7]
    const char *p = escapeTable(true);
 80015b6:	2001      	movs	r0, #1
 80015b8:	f000 f818 	bl	80015ec <_ZN19ArduinoJson6101_11014EscapeSequence11escapeTableEb>
 80015bc:	60f8      	str	r0, [r7, #12]
    for (;;) {
      if (p[0] == '\0') return c;
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	781b      	ldrb	r3, [r3, #0]
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d101      	bne.n	80015ca <_ZN19ArduinoJson6101_11014EscapeSequence12unescapeCharEc+0x1e>
 80015c6:	79fb      	ldrb	r3, [r7, #7]
 80015c8:	e00c      	b.n	80015e4 <_ZN19ArduinoJson6101_11014EscapeSequence12unescapeCharEc+0x38>
      if (p[0] == c) return p[1];
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	781b      	ldrb	r3, [r3, #0]
 80015ce:	79fa      	ldrb	r2, [r7, #7]
 80015d0:	429a      	cmp	r2, r3
 80015d2:	d103      	bne.n	80015dc <_ZN19ArduinoJson6101_11014EscapeSequence12unescapeCharEc+0x30>
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	3301      	adds	r3, #1
 80015d8:	781b      	ldrb	r3, [r3, #0]
 80015da:	e003      	b.n	80015e4 <_ZN19ArduinoJson6101_11014EscapeSequence12unescapeCharEc+0x38>
      p += 2;
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	3302      	adds	r3, #2
 80015e0:	60fb      	str	r3, [r7, #12]
      if (p[0] == '\0') return c;
 80015e2:	e7ec      	b.n	80015be <_ZN19ArduinoJson6101_11014EscapeSequence12unescapeCharEc+0x12>
    }
  }
 80015e4:	4618      	mov	r0, r3
 80015e6:	3710      	adds	r7, #16
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bd80      	pop	{r7, pc}

080015ec <_ZN19ArduinoJson6101_11014EscapeSequence11escapeTableEb>:

 private:
  static const char *escapeTable(bool excludeIdenticals) {
 80015ec:	b480      	push	{r7}
 80015ee:	b083      	sub	sp, #12
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	4603      	mov	r3, r0
 80015f4:	71fb      	strb	r3, [r7, #7]
    return &"\"\"\\\\b\bf\fn\nr\rt\t"[excludeIdenticals ? 4 : 0];
 80015f6:	79fb      	ldrb	r3, [r7, #7]
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d001      	beq.n	8001600 <_ZN19ArduinoJson6101_11014EscapeSequence11escapeTableEb+0x14>
 80015fc:	2304      	movs	r3, #4
 80015fe:	e000      	b.n	8001602 <_ZN19ArduinoJson6101_11014EscapeSequence11escapeTableEb+0x16>
 8001600:	2300      	movs	r3, #0
 8001602:	4a04      	ldr	r2, [pc, #16]	@ (8001614 <_ZN19ArduinoJson6101_11014EscapeSequence11escapeTableEb+0x28>)
 8001604:	4413      	add	r3, r2
  }
 8001606:	4618      	mov	r0, r3
 8001608:	370c      	adds	r7, #12
 800160a:	46bd      	mov	sp, r7
 800160c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001610:	4770      	bx	lr
 8001612:	bf00      	nop
 8001614:	08014320 	.word	0x08014320

08001618 <EXTI4_IRQHandler>:
#include "interrupt.h"

extern "C" {

	void EXTI4_IRQHandler()
	{
 8001618:	b580      	push	{r7, lr}
 800161a:	af00      	add	r7, sp, #0
		// Chip select pin is PC_4 (EXTI4 PIN 4)
		if(__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_4) != RESET)
 800161c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001620:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001624:	f003 0310 	and.w	r3, r3, #16
 8001628:	2b00      	cmp	r3, #0
 800162a:	bf14      	ite	ne
 800162c:	2301      	movne	r3, #1
 800162e:	2300      	moveq	r3, #0
 8001630:	b2db      	uxtb	r3, r3
 8001632:	2b00      	cmp	r3, #0
 8001634:	d006      	beq.n	8001644 <EXTI4_IRQHandler+0x2c>
		{
		__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_4);
 8001636:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800163a:	2210      	movs	r2, #16
 800163c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
		Interrupt::EXTI4_Wrapper();
 8001640:	f7ff fa1c 	bl	8000a7c <_ZN9Interrupt13EXTI4_WrapperEv>
		}
	}
 8001644:	bf00      	nop
 8001646:	bd80      	pop	{r7, pc}

08001648 <DMA1_Stream0_IRQHandler>:

	void DMA1_Stream0_IRQHandler()
	{
 8001648:	b580      	push	{r7, lr}
 800164a:	af00      	add	r7, sp, #0
		// DMA interrupt management in the moduelInterrupt handleInterrupt() routine
		Interrupt::DMA1_Stream0_Wrapper();
 800164c:	f7ff fa24 	bl	8000a98 <_ZN9Interrupt20DMA1_Stream0_WrapperEv>
	}
 8001650:	bf00      	nop
 8001652:	bd80      	pop	{r7, pc}

08001654 <DMA1_Stream1_IRQHandler>:

	void DMA1_Stream1_IRQHandler()
	{
 8001654:	b580      	push	{r7, lr}
 8001656:	af00      	add	r7, sp, #0
		// DMA interrupt management in the moduelInterrupt handleInterrupt() routine
		Interrupt::DMA1_Stream1_Wrapper();
 8001658:	f7ff fa2c 	bl	8000ab4 <_ZN9Interrupt20DMA1_Stream1_WrapperEv>
	}
 800165c:	bf00      	nop
 800165e:	bd80      	pop	{r7, pc}

08001660 <TIM2_IRQHandler>:


	void TIM2_IRQHandler()
	{
 8001660:	b580      	push	{r7, lr}
 8001662:	af00      	add	r7, sp, #0
	  if(TIM2->SR & TIM_SR_UIF) // if UIF flag is set
 8001664:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001668:	691b      	ldr	r3, [r3, #16]
 800166a:	f003 0301 	and.w	r3, r3, #1
 800166e:	2b00      	cmp	r3, #0
 8001670:	bf14      	ite	ne
 8001672:	2301      	movne	r3, #1
 8001674:	2300      	moveq	r3, #0
 8001676:	b2db      	uxtb	r3, r3
 8001678:	2b00      	cmp	r3, #0
 800167a:	d009      	beq.n	8001690 <TIM2_IRQHandler+0x30>
	  {
		TIM2->SR &= ~TIM_SR_UIF; // clear UIF flag
 800167c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001680:	691b      	ldr	r3, [r3, #16]
 8001682:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001686:	f023 0301 	bic.w	r3, r3, #1
 800168a:	6113      	str	r3, [r2, #16]

		Interrupt::TIM2_Wrapper();
 800168c:	f7ff fa20 	bl	8000ad0 <_ZN9Interrupt12TIM2_WrapperEv>
	  }
	}
 8001690:	bf00      	nop
 8001692:	bd80      	pop	{r7, pc}

08001694 <TIM3_IRQHandler>:


	void TIM3_IRQHandler()
	{
 8001694:	b580      	push	{r7, lr}
 8001696:	af00      	add	r7, sp, #0
	  if(TIM3->SR & TIM_SR_UIF) // if UIF flag is set
 8001698:	4b0a      	ldr	r3, [pc, #40]	@ (80016c4 <TIM3_IRQHandler+0x30>)
 800169a:	691b      	ldr	r3, [r3, #16]
 800169c:	f003 0301 	and.w	r3, r3, #1
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	bf14      	ite	ne
 80016a4:	2301      	movne	r3, #1
 80016a6:	2300      	moveq	r3, #0
 80016a8:	b2db      	uxtb	r3, r3
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d007      	beq.n	80016be <TIM3_IRQHandler+0x2a>
	  {
		TIM3->SR &= ~TIM_SR_UIF; // clear UIF flag
 80016ae:	4b05      	ldr	r3, [pc, #20]	@ (80016c4 <TIM3_IRQHandler+0x30>)
 80016b0:	691b      	ldr	r3, [r3, #16]
 80016b2:	4a04      	ldr	r2, [pc, #16]	@ (80016c4 <TIM3_IRQHandler+0x30>)
 80016b4:	f023 0301 	bic.w	r3, r3, #1
 80016b8:	6113      	str	r3, [r2, #16]

		Interrupt::TIM3_Wrapper();
 80016ba:	f7ff fa17 	bl	8000aec <_ZN9Interrupt12TIM3_WrapperEv>
	  }
	}
 80016be:	bf00      	nop
 80016c0:	bd80      	pop	{r7, pc}
 80016c2:	bf00      	nop
 80016c4:	40000400 	.word	0x40000400

080016c8 <TIM4_IRQHandler>:

	void TIM4_IRQHandler()
	{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	af00      	add	r7, sp, #0
	  if(TIM4->SR & TIM_SR_UIF) // if UIF flag is set
 80016cc:	4b0a      	ldr	r3, [pc, #40]	@ (80016f8 <TIM4_IRQHandler+0x30>)
 80016ce:	691b      	ldr	r3, [r3, #16]
 80016d0:	f003 0301 	and.w	r3, r3, #1
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	bf14      	ite	ne
 80016d8:	2301      	movne	r3, #1
 80016da:	2300      	moveq	r3, #0
 80016dc:	b2db      	uxtb	r3, r3
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d007      	beq.n	80016f2 <TIM4_IRQHandler+0x2a>
	  {
		TIM4->SR &= ~TIM_SR_UIF; // clear UIF flag
 80016e2:	4b05      	ldr	r3, [pc, #20]	@ (80016f8 <TIM4_IRQHandler+0x30>)
 80016e4:	691b      	ldr	r3, [r3, #16]
 80016e6:	4a04      	ldr	r2, [pc, #16]	@ (80016f8 <TIM4_IRQHandler+0x30>)
 80016e8:	f023 0301 	bic.w	r3, r3, #1
 80016ec:	6113      	str	r3, [r2, #16]

		Interrupt::TIM4_Wrapper();
 80016ee:	f7ff fa0b 	bl	8000b08 <_ZN9Interrupt12TIM4_WrapperEv>
	  }
	}
 80016f2:	bf00      	nop
 80016f4:	bd80      	pop	{r7, pc}
 80016f6:	bf00      	nop
 80016f8:	40000800 	.word	0x40000800

080016fc <_Z13createThreadsv>:
#include "extern.h"


void createThreads(void)
{
 80016fc:	b598      	push	{r3, r4, r7, lr}
 80016fe:	af00      	add	r7, sp, #0
    baseThread = new pruThread(TIM2, TIM2_IRQn, base_freq);
 8001700:	2030      	movs	r0, #48	@ 0x30
 8001702:	f011 fb62 	bl	8012dca <_Znwj>
 8001706:	4603      	mov	r3, r0
 8001708:	461c      	mov	r4, r3
 800170a:	4b1a      	ldr	r3, [pc, #104]	@ (8001774 <_Z13createThreadsv+0x78>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	221c      	movs	r2, #28
 8001710:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8001714:	4620      	mov	r0, r4
 8001716:	f003 feef 	bl	80054f8 <_ZN9pruThreadC1EP11TIM_TypeDef9IRQn_Typem>
 800171a:	4b17      	ldr	r3, [pc, #92]	@ (8001778 <_Z13createThreadsv+0x7c>)
 800171c:	601c      	str	r4, [r3, #0]
    NVIC_SetPriority(TIM2_IRQn, 2);
 800171e:	2102      	movs	r1, #2
 8001720:	201c      	movs	r0, #28
 8001722:	f7ff f9ff 	bl	8000b24 <__NVIC_SetPriority>

    servoThread = new pruThread(TIM3, TIM3_IRQn , servo_freq);
 8001726:	2030      	movs	r0, #48	@ 0x30
 8001728:	f011 fb4f 	bl	8012dca <_Znwj>
 800172c:	4603      	mov	r3, r0
 800172e:	461c      	mov	r4, r3
 8001730:	4b12      	ldr	r3, [pc, #72]	@ (800177c <_Z13createThreadsv+0x80>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	221d      	movs	r2, #29
 8001736:	4912      	ldr	r1, [pc, #72]	@ (8001780 <_Z13createThreadsv+0x84>)
 8001738:	4620      	mov	r0, r4
 800173a:	f003 fedd 	bl	80054f8 <_ZN9pruThreadC1EP11TIM_TypeDef9IRQn_Typem>
 800173e:	4b11      	ldr	r3, [pc, #68]	@ (8001784 <_Z13createThreadsv+0x88>)
 8001740:	601c      	str	r4, [r3, #0]
    NVIC_SetPriority(TIM3_IRQn , 3);
 8001742:	2103      	movs	r1, #3
 8001744:	201d      	movs	r0, #29
 8001746:	f7ff f9ed 	bl	8000b24 <__NVIC_SetPriority>

    commsThread = new pruThread(TIM4, TIM4_IRQn, PRU_COMMSFREQ);
 800174a:	2030      	movs	r0, #48	@ 0x30
 800174c:	f011 fb3d 	bl	8012dca <_Znwj>
 8001750:	4603      	mov	r3, r0
 8001752:	461c      	mov	r4, r3
 8001754:	f44f 4361 	mov.w	r3, #57600	@ 0xe100
 8001758:	221e      	movs	r2, #30
 800175a:	490b      	ldr	r1, [pc, #44]	@ (8001788 <_Z13createThreadsv+0x8c>)
 800175c:	4620      	mov	r0, r4
 800175e:	f003 fecb 	bl	80054f8 <_ZN9pruThreadC1EP11TIM_TypeDef9IRQn_Typem>
 8001762:	4b0a      	ldr	r3, [pc, #40]	@ (800178c <_Z13createThreadsv+0x90>)
 8001764:	601c      	str	r4, [r3, #0]
    NVIC_SetPriority(TIM4_IRQn, 4);
 8001766:	2104      	movs	r1, #4
 8001768:	201e      	movs	r0, #30
 800176a:	f7ff f9db 	bl	8000b24 <__NVIC_SetPriority>
}
 800176e:	bf00      	nop
 8001770:	bd98      	pop	{r3, r4, r7, pc}
 8001772:	bf00      	nop
 8001774:	24000000 	.word	0x24000000
 8001778:	24000358 	.word	0x24000358
 800177c:	24000004 	.word	0x24000004
 8001780:	40000400 	.word	0x40000400
 8001784:	24000354 	.word	0x24000354
 8001788:	40000800 	.word	0x40000800
 800178c:	2400035c 	.word	0x2400035c

08001790 <__io_putchar>:


// re-target printf to UART1 by redeclaring week function in syscalls.c
extern "C" {
	int __io_putchar(int ch)
	{
 8001790:	b580      	push	{r7, lr}
 8001792:	b082      	sub	sp, #8
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
	  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 8001798:	1d39      	adds	r1, r7, #4
 800179a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800179e:	2201      	movs	r2, #1
 80017a0:	4803      	ldr	r0, [pc, #12]	@ (80017b0 <__io_putchar+0x20>)
 80017a2:	f00c ff38 	bl	800e616 <HAL_UART_Transmit>
	  return ch;
 80017a6:	687b      	ldr	r3, [r7, #4]
	}
 80017a8:	4618      	mov	r0, r3
 80017aa:	3708      	adds	r7, #8
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bd80      	pop	{r7, pc}
 80017b0:	240005f8 	.word	0x240005f8

080017b4 <_Z14readJsonConfigv>:
}



void readJsonConfig()
{
 80017b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80017b8:	b08d      	sub	sp, #52	@ 0x34
 80017ba:	af00      	add	r7, sp, #0
	uint32_t bytesread; // bytes read count


    printf("\n1. Reading JSON configuration file\n");
 80017bc:	4854      	ldr	r0, [pc, #336]	@ (8001910 <_Z14readJsonConfigv+0x15c>)
 80017be:	f011 ff0b 	bl	80135d8 <puts>

    // Try to mount the file system
    printf("	Mounting the file system... \n");
 80017c2:	4854      	ldr	r0, [pc, #336]	@ (8001914 <_Z14readJsonConfigv+0x160>)
 80017c4:	f011 ff08 	bl	80135d8 <puts>
    if(f_mount(&SDFatFS, (TCHAR const*)SDPath, 0) != FR_OK)
 80017c8:	2200      	movs	r2, #0
 80017ca:	4953      	ldr	r1, [pc, #332]	@ (8001918 <_Z14readJsonConfigv+0x164>)
 80017cc:	4853      	ldr	r0, [pc, #332]	@ (800191c <_Z14readJsonConfigv+0x168>)
 80017ce:	f010 fea5 	bl	801251c <f_mount>
 80017d2:	4603      	mov	r3, r0
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	bf14      	ite	ne
 80017d8:	2301      	movne	r3, #1
 80017da:	2300      	moveq	r3, #0
 80017dc:	b2db      	uxtb	r3, r3
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d005      	beq.n	80017ee <_Z14readJsonConfigv+0x3a>
	{
    	printf("	Failed to mount SD card\n\r");
 80017e2:	484f      	ldr	r0, [pc, #316]	@ (8001920 <_Z14readJsonConfigv+0x16c>)
 80017e4:	f011 fe88 	bl	80134f8 <iprintf>
    	Error_Handler();
 80017e8:	f000 ffba 	bl	8002760 <Error_Handler>
			}

			f_close(&SDFile);
		}
    }
}
 80017ec:	e08a      	b.n	8001904 <_Z14readJsonConfigv+0x150>
		if(f_open(&SDFile, "config.txt", FA_READ) != FR_OK)
 80017ee:	2201      	movs	r2, #1
 80017f0:	494c      	ldr	r1, [pc, #304]	@ (8001924 <_Z14readJsonConfigv+0x170>)
 80017f2:	484d      	ldr	r0, [pc, #308]	@ (8001928 <_Z14readJsonConfigv+0x174>)
 80017f4:	f010 fed8 	bl	80125a8 <f_open>
 80017f8:	4603      	mov	r3, r0
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	bf14      	ite	ne
 80017fe:	2301      	movne	r3, #1
 8001800:	2300      	moveq	r3, #0
 8001802:	b2db      	uxtb	r3, r3
 8001804:	2b00      	cmp	r3, #0
 8001806:	d005      	beq.n	8001814 <_Z14readJsonConfigv+0x60>
			printf("	Failed to open JSON config file\n");
 8001808:	4848      	ldr	r0, [pc, #288]	@ (800192c <_Z14readJsonConfigv+0x178>)
 800180a:	f011 fee5 	bl	80135d8 <puts>
			Error_Handler();
 800180e:	f000 ffa7 	bl	8002760 <Error_Handler>
}
 8001812:	e077      	b.n	8001904 <_Z14readJsonConfigv+0x150>
		}
 8001814:	466b      	mov	r3, sp
 8001816:	461e      	mov	r6, r3
			int32_t length = f_size(&SDFile);
 8001818:	4b43      	ldr	r3, [pc, #268]	@ (8001928 <_Z14readJsonConfigv+0x174>)
 800181a:	68db      	ldr	r3, [r3, #12]
 800181c:	62bb      	str	r3, [r7, #40]	@ 0x28
			printf("	JSON config file lenght = %2ld\n", length);
 800181e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001820:	4843      	ldr	r0, [pc, #268]	@ (8001930 <_Z14readJsonConfigv+0x17c>)
 8001822:	f011 fe69 	bl	80134f8 <iprintf>
			__attribute__((aligned(32))) char rtext[length];
 8001826:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001828:	1e4b      	subs	r3, r1, #1
 800182a:	627b      	str	r3, [r7, #36]	@ 0x24
 800182c:	460a      	mov	r2, r1
 800182e:	2300      	movs	r3, #0
 8001830:	4690      	mov	r8, r2
 8001832:	4699      	mov	r9, r3
 8001834:	f04f 0200 	mov.w	r2, #0
 8001838:	f04f 0300 	mov.w	r3, #0
 800183c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001840:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001844:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001848:	460a      	mov	r2, r1
 800184a:	2300      	movs	r3, #0
 800184c:	4614      	mov	r4, r2
 800184e:	461d      	mov	r5, r3
 8001850:	f04f 0200 	mov.w	r2, #0
 8001854:	f04f 0300 	mov.w	r3, #0
 8001858:	00eb      	lsls	r3, r5, #3
 800185a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800185e:	00e2      	lsls	r2, r4, #3
 8001860:	460b      	mov	r3, r1
 8001862:	3318      	adds	r3, #24
 8001864:	3307      	adds	r3, #7
 8001866:	08db      	lsrs	r3, r3, #3
 8001868:	00db      	lsls	r3, r3, #3
 800186a:	ebad 0d03 	sub.w	sp, sp, r3
 800186e:	466b      	mov	r3, sp
 8001870:	331f      	adds	r3, #31
 8001872:	095b      	lsrs	r3, r3, #5
 8001874:	015b      	lsls	r3, r3, #5
 8001876:	623b      	str	r3, [r7, #32]
			if(f_read(&SDFile, rtext, length, (UINT *)&bytesread) != FR_OK)
 8001878:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800187a:	1d3b      	adds	r3, r7, #4
 800187c:	6a39      	ldr	r1, [r7, #32]
 800187e:	482a      	ldr	r0, [pc, #168]	@ (8001928 <_Z14readJsonConfigv+0x174>)
 8001880:	f011 f84c 	bl	801291c <f_read>
 8001884:	4603      	mov	r3, r0
 8001886:	2b00      	cmp	r3, #0
 8001888:	bf14      	ite	ne
 800188a:	2301      	movne	r3, #1
 800188c:	2300      	moveq	r3, #0
 800188e:	b2db      	uxtb	r3, r3
 8001890:	2b00      	cmp	r3, #0
 8001892:	d003      	beq.n	800189c <_Z14readJsonConfigv+0xe8>
				printf("	JSON config file read FAILURE\n");
 8001894:	4827      	ldr	r0, [pc, #156]	@ (8001934 <_Z14readJsonConfigv+0x180>)
 8001896:	f011 fe9f 	bl	80135d8 <puts>
 800189a:	e02f      	b.n	80018fc <_Z14readJsonConfigv+0x148>
				printf("	JSON config file read SUCCESS!\n");
 800189c:	4826      	ldr	r0, [pc, #152]	@ (8001938 <_Z14readJsonConfigv+0x184>)
 800189e:	f011 fe9b 	bl	80135d8 <puts>
				strJson.reserve(length + 1);
 80018a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80018a4:	3301      	adds	r3, #1
 80018a6:	4619      	mov	r1, r3
 80018a8:	4824      	ldr	r0, [pc, #144]	@ (800193c <_Z14readJsonConfigv+0x188>)
 80018aa:	f011 fbac 	bl	8013006 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7reserveEj>
			    for (int i = 0; i < length; i++) {
 80018ae:	2300      	movs	r3, #0
 80018b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80018b2:	e017      	b.n	80018e4 <_Z14readJsonConfigv+0x130>
			    	strJson = strJson + rtext[i];
 80018b4:	6a3a      	ldr	r2, [r7, #32]
 80018b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80018b8:	4413      	add	r3, r2
 80018ba:	781a      	ldrb	r2, [r3, #0]
 80018bc:	f107 0308 	add.w	r3, r7, #8
 80018c0:	491e      	ldr	r1, [pc, #120]	@ (800193c <_Z14readJsonConfigv+0x188>)
 80018c2:	4618      	mov	r0, r3
 80018c4:	f000 ffe6 	bl	8002894 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_S5_>
 80018c8:	f107 0308 	add.w	r3, r7, #8
 80018cc:	4619      	mov	r1, r3
 80018ce:	481b      	ldr	r0, [pc, #108]	@ (800193c <_Z14readJsonConfigv+0x188>)
 80018d0:	f011 fb2a 	bl	8012f28 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 80018d4:	f107 0308 	add.w	r3, r7, #8
 80018d8:	4618      	mov	r0, r3
 80018da:	f011 fb1f 	bl	8012f1c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
			    for (int i = 0; i < length; i++) {
 80018de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80018e0:	3301      	adds	r3, #1
 80018e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80018e4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80018e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80018e8:	429a      	cmp	r2, r3
 80018ea:	dbe3      	blt.n	80018b4 <_Z14readJsonConfigv+0x100>
			    printf("\n%s\n", strJson.c_str());
 80018ec:	4813      	ldr	r0, [pc, #76]	@ (800193c <_Z14readJsonConfigv+0x188>)
 80018ee:	f011 fbed 	bl	80130cc <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 80018f2:	4603      	mov	r3, r0
 80018f4:	4619      	mov	r1, r3
 80018f6:	4812      	ldr	r0, [pc, #72]	@ (8001940 <_Z14readJsonConfigv+0x18c>)
 80018f8:	f011 fdfe 	bl	80134f8 <iprintf>
			f_close(&SDFile);
 80018fc:	480a      	ldr	r0, [pc, #40]	@ (8001928 <_Z14readJsonConfigv+0x174>)
 80018fe:	f011 f9ca 	bl	8012c96 <f_close>
 8001902:	46b5      	mov	sp, r6
}
 8001904:	bf00      	nop
 8001906:	3734      	adds	r7, #52	@ 0x34
 8001908:	46bd      	mov	sp, r7
 800190a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800190e:	bf00      	nop
 8001910:	08014330 	.word	0x08014330
 8001914:	08014354 	.word	0x08014354
 8001918:	240006e8 	.word	0x240006e8
 800191c:	240006ec 	.word	0x240006ec
 8001920:	08014374 	.word	0x08014374
 8001924:	08014390 	.word	0x08014390
 8001928:	2400091c 	.word	0x2400091c
 800192c:	0801439c 	.word	0x0801439c
 8001930:	080143c0 	.word	0x080143c0
 8001934:	080143e4 	.word	0x080143e4
 8001938:	08014404 	.word	0x08014404
 800193c:	24000524 	.word	0x24000524
 8001940:	08014424 	.word	0x08014424

08001944 <_Z5setupv>:

void setup()
{
 8001944:	b580      	push	{r7, lr}
 8001946:	af00      	add	r7, sp, #0
    printf("\n2. Setting up SPI DMA and threads\n");
 8001948:	4807      	ldr	r0, [pc, #28]	@ (8001968 <_Z5setupv+0x24>)
 800194a:	f011 fe45 	bl	80135d8 <puts>

     // initialise the Remora comms
    comms->init();
 800194e:	4b07      	ldr	r3, [pc, #28]	@ (800196c <_Z5setupv+0x28>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	4618      	mov	r0, r3
 8001954:	f003 f9b6 	bl	8004cc4 <_ZN11RemoraComms4initEv>
    comms->start();
 8001958:	4b04      	ldr	r3, [pc, #16]	@ (800196c <_Z5setupv+0x28>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	4618      	mov	r0, r3
 800195e:	f003 fb37 	bl	8004fd0 <_ZN11RemoraComms5startEv>
}
 8001962:	bf00      	nop
 8001964:	bd80      	pop	{r7, pc}
 8001966:	bf00      	nop
 8001968:	0801442c 	.word	0x0801442c
 800196c:	24000578 	.word	0x24000578

08001970 <_Z15deserialiseJSONv>:


void deserialiseJSON()
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b084      	sub	sp, #16
 8001974:	af00      	add	r7, sp, #0
    printf("\n3. Parsing json configuration file\n");
 8001976:	4826      	ldr	r0, [pc, #152]	@ (8001a10 <_Z15deserialiseJSONv+0xa0>)
 8001978:	f011 fe2e 	bl	80135d8 <puts>

    const char *json = strJson.c_str();
 800197c:	4825      	ldr	r0, [pc, #148]	@ (8001a14 <_Z15deserialiseJSONv+0xa4>)
 800197e:	f011 fba5 	bl	80130cc <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 8001982:	60f8      	str	r0, [r7, #12]

    // parse the json configuration file
    DeserializationError error = deserializeJson(doc, json);
 8001984:	f107 0308 	add.w	r3, r7, #8
 8001988:	4618      	mov	r0, r3
 800198a:	f7ff fe01 	bl	8001590 <_ZN19ArduinoJson6101_11012NestingLimitC1Ev>
 800198e:	7a3a      	ldrb	r2, [r7, #8]
 8001990:	68f9      	ldr	r1, [r7, #12]
 8001992:	4821      	ldr	r0, [pc, #132]	@ (8001a18 <_Z15deserialiseJSONv+0xa8>)
 8001994:	f000 ff94 	bl	80028c0 <_ZN19ArduinoJson6101_11015deserializeJsonIKcEENS_20DeserializationErrorERNS_12JsonDocumentEPT_NS_12NestingLimitE>
 8001998:	4603      	mov	r3, r0
 800199a:	713b      	strb	r3, [r7, #4]

    printf("	Config deserialisation - ");
 800199c:	481f      	ldr	r0, [pc, #124]	@ (8001a1c <_Z15deserialiseJSONv+0xac>)
 800199e:	f011 fdab 	bl	80134f8 <iprintf>

    switch (error.code())
 80019a2:	1d3b      	adds	r3, r7, #4
 80019a4:	4618      	mov	r0, r3
 80019a6:	f7ff fdad 	bl	8001504 <_ZNK19ArduinoJson6101_11020DeserializationError4codeEv>
 80019aa:	4603      	mov	r3, r0
 80019ac:	2b03      	cmp	r3, #3
 80019ae:	d011      	beq.n	80019d4 <_Z15deserialiseJSONv+0x64>
 80019b0:	2b03      	cmp	r3, #3
 80019b2:	dc16      	bgt.n	80019e2 <_Z15deserialiseJSONv+0x72>
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d002      	beq.n	80019be <_Z15deserialiseJSONv+0x4e>
 80019b8:	2b02      	cmp	r3, #2
 80019ba:	d004      	beq.n	80019c6 <_Z15deserialiseJSONv+0x56>
 80019bc:	e011      	b.n	80019e2 <_Z15deserialiseJSONv+0x72>
    {
        case DeserializationError::Ok:
            printf("Deserialization succeeded\n");
 80019be:	4818      	ldr	r0, [pc, #96]	@ (8001a20 <_Z15deserialiseJSONv+0xb0>)
 80019c0:	f011 fe0a 	bl	80135d8 <puts>
            break;
 80019c4:	e01f      	b.n	8001a06 <_Z15deserialiseJSONv+0x96>
        case DeserializationError::InvalidInput:
            printf("Invalid input!\n");
 80019c6:	4817      	ldr	r0, [pc, #92]	@ (8001a24 <_Z15deserialiseJSONv+0xb4>)
 80019c8:	f011 fe06 	bl	80135d8 <puts>
            configError = true;
 80019cc:	4b16      	ldr	r3, [pc, #88]	@ (8001a28 <_Z15deserialiseJSONv+0xb8>)
 80019ce:	2201      	movs	r2, #1
 80019d0:	701a      	strb	r2, [r3, #0]
            break;
 80019d2:	e018      	b.n	8001a06 <_Z15deserialiseJSONv+0x96>
        case DeserializationError::NoMemory:
            printf("Not enough memory\n");
 80019d4:	4815      	ldr	r0, [pc, #84]	@ (8001a2c <_Z15deserialiseJSONv+0xbc>)
 80019d6:	f011 fdff 	bl	80135d8 <puts>
            configError = true;
 80019da:	4b13      	ldr	r3, [pc, #76]	@ (8001a28 <_Z15deserialiseJSONv+0xb8>)
 80019dc:	2201      	movs	r2, #1
 80019de:	701a      	strb	r2, [r3, #0]
            break;
 80019e0:	e011      	b.n	8001a06 <_Z15deserialiseJSONv+0x96>
        default:
            printf("Deserialization failed: ");
 80019e2:	4813      	ldr	r0, [pc, #76]	@ (8001a30 <_Z15deserialiseJSONv+0xc0>)
 80019e4:	f011 fd88 	bl	80134f8 <iprintf>
            printf(error.c_str());
 80019e8:	1d3b      	adds	r3, r7, #4
 80019ea:	4618      	mov	r0, r3
 80019ec:	f7ff fd96 	bl	800151c <_ZNK19ArduinoJson6101_11020DeserializationError5c_strEv>
 80019f0:	4603      	mov	r3, r0
 80019f2:	4618      	mov	r0, r3
 80019f4:	f011 fd80 	bl	80134f8 <iprintf>
            printf("\n");
 80019f8:	200a      	movs	r0, #10
 80019fa:	f011 fd8f 	bl	801351c <putchar>
            configError = true;
 80019fe:	4b0a      	ldr	r3, [pc, #40]	@ (8001a28 <_Z15deserialiseJSONv+0xb8>)
 8001a00:	2201      	movs	r2, #1
 8001a02:	701a      	strb	r2, [r3, #0]
            break;
 8001a04:	bf00      	nop
    }
}
 8001a06:	bf00      	nop
 8001a08:	3710      	adds	r7, #16
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd80      	pop	{r7, pc}
 8001a0e:	bf00      	nop
 8001a10:	08014450 	.word	0x08014450
 8001a14:	24000524 	.word	0x24000524
 8001a18:	24000548 	.word	0x24000548
 8001a1c:	08014474 	.word	0x08014474
 8001a20:	08014490 	.word	0x08014490
 8001a24:	080144ac 	.word	0x080144ac
 8001a28:	24000352 	.word	0x24000352
 8001a2c:	080144bc 	.word	0x080144bc
 8001a30:	080144d0 	.word	0x080144d0

08001a34 <_Z13configThreadsv>:

void configThreads()
{
 8001a34:	b5b0      	push	{r4, r5, r7, lr}
 8001a36:	b0bc      	sub	sp, #240	@ 0xf0
 8001a38:	af00      	add	r7, sp, #0
    if (configError) return;
 8001a3a:	4bcb      	ldr	r3, [pc, #812]	@ (8001d68 <_Z13configThreadsv+0x334>)
 8001a3c:	781b      	ldrb	r3, [r3, #0]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	f040 818d 	bne.w	8001d5e <_Z13configThreadsv+0x32a>

    printf("\n4. Configuring threads\n");
 8001a44:	48c9      	ldr	r0, [pc, #804]	@ (8001d6c <_Z13configThreadsv+0x338>)
 8001a46:	f011 fdc7 	bl	80135d8 <puts>
 8001a4a:	4bc9      	ldr	r3, [pc, #804]	@ (8001d70 <_Z13configThreadsv+0x33c>)
 8001a4c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8001a50:	4bc8      	ldr	r3, [pc, #800]	@ (8001d74 <_Z13configThreadsv+0x340>)
 8001a52:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8001a56:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001a5a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
                    public Visitable {
  typedef MemberProxy<TObject, TStringRef> this_type;

 public:
  FORCE_INLINE MemberProxy(TObject variant, TStringRef key)
      : _object(variant), _key(key) {}
 8001a5e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001a62:	623b      	str	r3, [r7, #32]
 8001a64:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001a68:	627b      	str	r3, [r7, #36]	@ 0x24
    return MemberProxy<JsonDocument&, TChar*>(*this, key);
 8001a6a:	bf00      	nop
template <typename TImpl>
class VariantCasts {
 public:
  template <typename T>
  FORCE_INLINE operator T() const {
    return impl()->template as<T>();
 8001a6c:	f107 0320 	add.w	r3, r7, #32
 8001a70:	4618      	mov	r0, r3
 8001a72:	f000 ffbe 	bl	80029f2 <_ZNK19ArduinoJson6101_11012VariantCastsINS_11MemberProxyIRNS_12JsonDocumentEPKcEEE4implEv>
 8001a76:	4603      	mov	r3, r0
 8001a78:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8001a7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001a80:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    return getOrAddUpstreamMember().getOrAddMember(key);
  }

 private:
  FORCE_INLINE VariantRef getUpstreamMember() const {
    return _object.getMember(_key);
 8001a84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001a88:	681a      	ldr	r2, [r3, #0]
 8001a8a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8001a94:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    return VariantRef(&_pool, _data.getMember(adaptString(key)));
 8001a98:	f8d7 40dc 	ldr.w	r4, [r7, #220]	@ 0xdc
 8001a9c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001aa0:	f103 0510 	add.w	r5, r3, #16
 8001aa4:	f8d7 00d8 	ldr.w	r0, [r7, #216]	@ 0xd8
 8001aa8:	f7ff f9e4 	bl	8000e74 <_ZN19ArduinoJson6101_11011adaptStringEPKc>
 8001aac:	4603      	mov	r3, r0
 8001aae:	4619      	mov	r1, r3
 8001ab0:	4628      	mov	r0, r5
 8001ab2:	f001 fe06 	bl	80036c2 <_ZNK19ArduinoJson6101_11011VariantData9getMemberINS_21ConstRamStringAdapterEEEPS0_T_>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	f8c7 40d4 	str.w	r4, [r7, #212]	@ 0xd4
 8001abc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8001ac0:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001ac4:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8001ac8:	4618      	mov	r0, r3
 8001aca:	f000 fe7d 	bl	80027c8 <_ZN19ArduinoJson6101_11014VariantRefBaseINS_11VariantDataEEC1EPS1_>
 8001ace:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8001ad2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001ad4:	bf00      	nop
 8001ad6:	bf00      	nop
}

template <typename T>
inline typename enable_if<is_same<T, ArrayRef>::value, T>::type VariantRef::as()
    const {
  return ArrayRef(_pool, _data != 0 ? _data->asArray() : 0);
 8001ad8:	6cfc      	ldr	r4, [r7, #76]	@ 0x4c
 8001ada:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d005      	beq.n	8001aec <_Z13configThreadsv+0xb8>
 8001ae0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	f7ff f9d5 	bl	8000e92 <_ZN19ArduinoJson6101_11011VariantData7asArrayEv>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	e000      	b.n	8001aee <_Z13configThreadsv+0xba>
 8001aec:	2300      	movs	r3, #0
 8001aee:	f8c7 40cc 	str.w	r4, [r7, #204]	@ 0xcc
 8001af2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 public:
  typedef ArrayIterator iterator;

  FORCE_INLINE ArrayRef() : base_type(0), _pool(0) {}
  FORCE_INLINE ArrayRef(MemoryPool* pool, CollectionData* data)
      : base_type(data), _pool(pool) {}
 8001af6:	f107 0318 	add.w	r3, r7, #24
 8001afa:	f8d7 10c8 	ldr.w	r1, [r7, #200]	@ 0xc8
 8001afe:	4618      	mov	r0, r3
 8001b00:	f000 fe71 	bl	80027e6 <_ZN19ArduinoJson6101_11012ArrayRefBaseINS_14CollectionDataEEC1EPS1_>
 8001b04:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8001b08:	61fb      	str	r3, [r7, #28]
 8001b0a:	bf00      	nop
    return getUpstreamMember().template as<TValue>();
 8001b0c:	bf00      	nop
 8001b0e:	bf00      	nop
  VariantRef addElement() const {
    return VariantRef(_pool, arrayAdd(_data, _pool));
  }

  FORCE_INLINE iterator begin() const {
    if (!_data) return iterator();
 8001b10:	69bb      	ldr	r3, [r7, #24]
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d105      	bne.n	8001b22 <_Z13configThreadsv+0xee>
 8001b16:	f107 0310 	add.w	r3, r7, #16
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	f7ff fad6 	bl	80010cc <_ZN19ArduinoJson6101_11013ArrayIteratorC1Ev>
 8001b20:	e00b      	b.n	8001b3a <_Z13configThreadsv+0x106>
    return iterator(_pool, _data->head());
 8001b22:	69fc      	ldr	r4, [r7, #28]
 8001b24:	69bb      	ldr	r3, [r7, #24]
 8001b26:	4618      	mov	r0, r3
 8001b28:	f7ff f826 	bl	8000b78 <_ZNK19ArduinoJson6101_11014CollectionData4headEv>
 8001b2c:	4602      	mov	r2, r0
 8001b2e:	f107 0310 	add.w	r3, r7, #16
 8001b32:	4621      	mov	r1, r4
 8001b34:	4618      	mov	r0, r3
 8001b36:	f7ff fad7 	bl	80010e8 <_ZN19ArduinoJson6101_11013ArrayIteratorC1EPNS_10MemoryPoolEPNS_11VariantSlotE>

    JsonArray Threads = doc["Threads"];

    // create objects from JSON data
    for (JsonArray::iterator it=Threads.begin(); it!=Threads.end(); ++it)
 8001b3a:	e0fe      	b.n	8001d3a <_Z13configThreadsv+0x306>
    {
        thread = *it;
 8001b3c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001b40:	f107 0210 	add.w	r2, r7, #16
 8001b44:	4611      	mov	r1, r2
 8001b46:	4618      	mov	r0, r3
 8001b48:	f7ff fae1 	bl	800110e <_ZNK19ArduinoJson6101_11013ArrayIteratordeEv>
 8001b4c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001b50:	4618      	mov	r0, r3
 8001b52:	f000 ff59 	bl	8002a08 <_ZNK19ArduinoJson6101_11012VariantCastsINS_10VariantRefEE4implEv>
 8001b56:	4603      	mov	r3, r0
 8001b58:	66bb      	str	r3, [r7, #104]	@ 0x68
}

template <typename T>
inline typename enable_if<is_same<T, ObjectRef>::value, T>::type
VariantRef::as() const {
  return ObjectRef(_pool, variantAsObject(_data));
 8001b5a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001b5c:	685c      	ldr	r4, [r3, #4]
 8001b5e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	4618      	mov	r0, r3
 8001b64:	f7ff faa1 	bl	80010aa <_ZN19ArduinoJson6101_11015variantAsObjectEPNS_11VariantDataE>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	667c      	str	r4, [r7, #100]	@ 0x64
 8001b6c:	663b      	str	r3, [r7, #96]	@ 0x60
 public:
  typedef ObjectIterator iterator;

  FORCE_INLINE ObjectRef() : base_type(0), _pool(0) {}
  FORCE_INLINE ObjectRef(MemoryPool* buf, CollectionData* data)
      : base_type(data), _pool(buf) {}
 8001b6e:	f107 0308 	add.w	r3, r7, #8
 8001b72:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8001b74:	4618      	mov	r0, r3
 8001b76:	f000 fe45 	bl	8002804 <_ZN19ArduinoJson6101_11013ObjectRefBaseINS_14CollectionDataEEC1EPS1_>
 8001b7a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001b7c:	60fb      	str	r3, [r7, #12]
 8001b7e:	bf00      	nop
 8001b80:	bf00      	nop
 8001b82:	4b7d      	ldr	r3, [pc, #500]	@ (8001d78 <_Z13configThreadsv+0x344>)
 8001b84:	461a      	mov	r2, r3
 8001b86:	f107 0308 	add.w	r3, r7, #8
 8001b8a:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001b8e:	e882 0003 	stmia.w	r2, {r0, r1}
 8001b92:	4b7a      	ldr	r3, [pc, #488]	@ (8001d7c <_Z13configThreadsv+0x348>)
 8001b94:	677b      	str	r3, [r7, #116]	@ 0x74
template <typename TObject>
template <typename TString>
inline typename enable_if<IsString<TString *>::value,
                          MemberProxy<const TObject &, TString *> >::type
    ObjectShortcuts<TObject>::operator[](TString *key) const {
  return MemberProxy<const TObject &, TString *>(*impl(), key);
 8001b96:	4878      	ldr	r0, [pc, #480]	@ (8001d78 <_Z13configThreadsv+0x344>)
 8001b98:	f000 ff41 	bl	8002a1e <_ZNK19ArduinoJson6101_11015ObjectShortcutsINS_9ObjectRefEE4implEv>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	673b      	str	r3, [r7, #112]	@ 0x70
 8001ba0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001ba2:	66fb      	str	r3, [r7, #108]	@ 0x6c
      : _object(variant), _key(key) {}
 8001ba4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001ba6:	633b      	str	r3, [r7, #48]	@ 0x30
 8001ba8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001baa:	637b      	str	r3, [r7, #52]	@ 0x34
  return MemberProxy<const TObject &, TString *>(*impl(), key);
 8001bac:	bf00      	nop
 8001bae:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	f000 ff3e 	bl	8002a34 <_ZNK19ArduinoJson6101_11012VariantCastsINS_11MemberProxyIRKNS_9ObjectRefEPKcEEE4implEv>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8001bbe:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001bc2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    return _object.getMember(_key);
 8001bc6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001bca:	681a      	ldr	r2, [r3, #0]
 8001bcc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001bd0:	685b      	ldr	r3, [r3, #4]
 8001bd2:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 8001bd6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  // getMember(char*) const
  // getMember(const char*) const
  // getMember(const __FlashStringHelper*) const
  template <typename TChar>
  FORCE_INLINE VariantRef getMember(TChar* key) const {
    return get_impl(adaptString(key));
 8001bda:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 8001bde:	f7ff f949 	bl	8000e74 <_ZN19ArduinoJson6101_11011adaptStringEPKc>
 8001be2:	4602      	mov	r2, r0
 8001be4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001be8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8001bec:	607a      	str	r2, [r7, #4]
  }

 private:
  template <typename TAdaptedString>
  FORCE_INLINE VariantRef get_impl(TAdaptedString key) const {
    return VariantRef(_pool, objectGet(_data, key));
 8001bee:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001bf2:	685c      	ldr	r4, [r3, #4]
 8001bf4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	6879      	ldr	r1, [r7, #4]
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	f002 f901 	bl	8003e04 <_ZN19ArduinoJson6101_1109objectGetINS_21ConstRamStringAdapterEEEPNS_11VariantDataEPKNS_14CollectionDataET_>
 8001c02:	4603      	mov	r3, r0
 8001c04:	67fc      	str	r4, [r7, #124]	@ 0x7c
 8001c06:	67bb      	str	r3, [r7, #120]	@ 0x78
 8001c08:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8001c0c:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8001c0e:	4618      	mov	r0, r3
 8001c10:	f000 fdda 	bl	80027c8 <_ZN19ArduinoJson6101_11014VariantRefBaseINS_11VariantDataEEC1EPS1_>
 8001c14:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001c16:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001c18:	bf00      	nop
    return get_impl(adaptString(key));
 8001c1a:	bf00      	nop
 8001c1c:	bf00      	nop
  FORCE_INLINE typename enable_if<!is_same<T, ArrayRef>::value &&
                                      !is_same<T, ObjectRef>::value &&
                                      !is_same<T, VariantRef>::value,
                                  typename VariantAs<T>::type>::type
  as() const {
    return variantAs<T>(_data);
 8001c1e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001c20:	4618      	mov	r0, r3
 8001c22:	f001 fbdd 	bl	80033e0 <_ZN19ArduinoJson6101_1109variantAsIPKcEENS_9enable_ifIXoosrNS_7is_sameIT_S2_EE5valuesrNS4_IS5_PcEE5valueES2_E4typeEPKNS_11VariantDataE>
 8001c26:	4603      	mov	r3, r0
 8001c28:	bf00      	nop
    return getUpstreamMember().template as<TValue>();
 8001c2a:	bf00      	nop
 8001c2c:	bf00      	nop

        const char* configor = thread["Thread"];
 8001c2e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8001c32:	4b53      	ldr	r3, [pc, #332]	@ (8001d80 <_Z13configThreadsv+0x34c>)
 8001c34:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return MemberProxy<const TObject &, TString *>(*impl(), key);
 8001c38:	484f      	ldr	r0, [pc, #316]	@ (8001d78 <_Z13configThreadsv+0x344>)
 8001c3a:	f000 fef0 	bl	8002a1e <_ZNK19ArduinoJson6101_11015ObjectShortcutsINS_9ObjectRefEE4implEv>
 8001c3e:	4603      	mov	r3, r0
 8001c40:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8001c44:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001c48:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      : _object(variant), _key(key) {}
 8001c4c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001c50:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001c52:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001c56:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return MemberProxy<const TObject &, TString *>(*impl(), key);
 8001c58:	bf00      	nop
 8001c5a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001c5e:	4618      	mov	r0, r3
 8001c60:	f000 fee8 	bl	8002a34 <_ZNK19ArduinoJson6101_11012VariantCastsINS_11MemberProxyIRKNS_9ObjectRefEPKcEEE4implEv>
 8001c64:	4603      	mov	r3, r0
 8001c66:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8001c6a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001c6e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    return _object.getMember(_key);
 8001c72:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001c76:	681a      	ldr	r2, [r3, #0]
 8001c78:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001c7c:	685b      	ldr	r3, [r3, #4]
 8001c7e:	f8c7 20b0 	str.w	r2, [r7, #176]	@ 0xb0
 8001c82:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8001c86:	f8d7 00ac 	ldr.w	r0, [r7, #172]	@ 0xac
 8001c8a:	f7ff f8f3 	bl	8000e74 <_ZN19ArduinoJson6101_11011adaptStringEPKc>
 8001c8e:	4602      	mov	r2, r0
 8001c90:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001c94:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8001c98:	603a      	str	r2, [r7, #0]
    return VariantRef(_pool, objectGet(_data, key));
 8001c9a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001c9e:	685c      	ldr	r4, [r3, #4]
 8001ca0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	6839      	ldr	r1, [r7, #0]
 8001ca8:	4618      	mov	r0, r3
 8001caa:	f002 f8ab 	bl	8003e04 <_ZN19ArduinoJson6101_1109objectGetINS_21ConstRamStringAdapterEEEPNS_11VariantDataEPKNS_14CollectionDataET_>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	f8c7 40a4 	str.w	r4, [r7, #164]	@ 0xa4
 8001cb4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      : base_type(data), _pool(pool) {}
 8001cb8:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8001cbc:	f8d7 10a0 	ldr.w	r1, [r7, #160]	@ 0xa0
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	f000 fd81 	bl	80027c8 <_ZN19ArduinoJson6101_11014VariantRefBaseINS_11VariantDataEEC1EPS1_>
 8001cc6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001cca:	657b      	str	r3, [r7, #84]	@ 0x54
 8001ccc:	bf00      	nop
    return get_impl(adaptString(key));
 8001cce:	bf00      	nop
 8001cd0:	bf00      	nop
    return variantAs<T>(_data);
 8001cd2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	f001 fb94 	bl	8003402 <_ZN19ArduinoJson6101_1109variantAsImEENS_9enable_ifIXsrNS_11is_integralIT_EE5valueES3_E4typeEPKNS_11VariantDataE>
 8001cda:	4603      	mov	r3, r0
 8001cdc:	bf00      	nop
    return getUpstreamMember().template as<TValue>();
 8001cde:	bf00      	nop
 8001ce0:	bf00      	nop
        uint32_t    freq = thread["Frequency"];
 8001ce2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8

        if (!strcmp(configor,"Base"))
 8001ce6:	4927      	ldr	r1, [pc, #156]	@ (8001d84 <_Z13configThreadsv+0x350>)
 8001ce8:	f8d7 00ec 	ldr.w	r0, [r7, #236]	@ 0xec
 8001cec:	f7fe faf8 	bl	80002e0 <strcmp>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d10a      	bne.n	8001d0c <_Z13configThreadsv+0x2d8>
        {
            base_freq = freq;
 8001cf6:	4a24      	ldr	r2, [pc, #144]	@ (8001d88 <_Z13configThreadsv+0x354>)
 8001cf8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8001cfc:	6013      	str	r3, [r2, #0]
            printf("	Setting BASE thread frequency to %lu\n", base_freq);
 8001cfe:	4b22      	ldr	r3, [pc, #136]	@ (8001d88 <_Z13configThreadsv+0x354>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	4619      	mov	r1, r3
 8001d04:	4821      	ldr	r0, [pc, #132]	@ (8001d8c <_Z13configThreadsv+0x358>)
 8001d06:	f011 fbf7 	bl	80134f8 <iprintf>
 8001d0a:	e011      	b.n	8001d30 <_Z13configThreadsv+0x2fc>
        }
        else if (!strcmp(configor,"Servo"))
 8001d0c:	4920      	ldr	r1, [pc, #128]	@ (8001d90 <_Z13configThreadsv+0x35c>)
 8001d0e:	f8d7 00ec 	ldr.w	r0, [r7, #236]	@ 0xec
 8001d12:	f7fe fae5 	bl	80002e0 <strcmp>
 8001d16:	4603      	mov	r3, r0
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d109      	bne.n	8001d30 <_Z13configThreadsv+0x2fc>
        {
            servo_freq = freq;
 8001d1c:	4a1d      	ldr	r2, [pc, #116]	@ (8001d94 <_Z13configThreadsv+0x360>)
 8001d1e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8001d22:	6013      	str	r3, [r2, #0]
            printf("	Setting SERVO thread frequency to %lu\n", servo_freq);
 8001d24:	4b1b      	ldr	r3, [pc, #108]	@ (8001d94 <_Z13configThreadsv+0x360>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	4619      	mov	r1, r3
 8001d2a:	481b      	ldr	r0, [pc, #108]	@ (8001d98 <_Z13configThreadsv+0x364>)
 8001d2c:	f011 fbe4 	bl	80134f8 <iprintf>
    for (JsonArray::iterator it=Threads.begin(); it!=Threads.end(); ++it)
 8001d30:	f107 0310 	add.w	r3, r7, #16
 8001d34:	4618      	mov	r0, r3
 8001d36:	f7ff fa1a 	bl	800116e <_ZN19ArduinoJson6101_11013ArrayIteratorppEv>
  }

  FORCE_INLINE iterator end() const {
    return iterator();
 8001d3a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001d3e:	4618      	mov	r0, r3
 8001d40:	f7ff f9c4 	bl	80010cc <_ZN19ArduinoJson6101_11013ArrayIteratorC1Ev>
 8001d44:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8001d48:	f107 0310 	add.w	r3, r7, #16
 8001d4c:	4611      	mov	r1, r2
 8001d4e:	4618      	mov	r0, r3
 8001d50:	f7ff f9f9 	bl	8001146 <_ZNK19ArduinoJson6101_11013ArrayIteratorneERKS0_>
 8001d54:	4603      	mov	r3, r0
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	f47f aef0 	bne.w	8001b3c <_Z13configThreadsv+0x108>
 8001d5c:	e000      	b.n	8001d60 <_Z13configThreadsv+0x32c>
    if (configError) return;
 8001d5e:	bf00      	nop
        }
    }
}
 8001d60:	37f0      	adds	r7, #240	@ 0xf0
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bdb0      	pop	{r4, r5, r7, pc}
 8001d66:	bf00      	nop
 8001d68:	24000352 	.word	0x24000352
 8001d6c:	080144ec 	.word	0x080144ec
 8001d70:	08014504 	.word	0x08014504
 8001d74:	24000548 	.word	0x24000548
 8001d78:	24000568 	.word	0x24000568
 8001d7c:	0801450c 	.word	0x0801450c
 8001d80:	08014514 	.word	0x08014514
 8001d84:	08014520 	.word	0x08014520
 8001d88:	24000000 	.word	0x24000000
 8001d8c:	08014528 	.word	0x08014528
 8001d90:	08014550 	.word	0x08014550
 8001d94:	24000004 	.word	0x24000004
 8001d98:	08014558 	.word	0x08014558

08001d9c <main>:


int main(void)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b090      	sub	sp, #64	@ 0x40
 8001da0:	af02      	add	r7, sp, #8
	MPU_Config();
 8001da2:	f000 fcb1 	bl	8002708 <_ZL10MPU_Configv>
	SCB->VTOR = 0x08000000;
 8001da6:	4bb1      	ldr	r3, [pc, #708]	@ (800206c <main+0x2d0>)
 8001da8:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001dac:	609a      	str	r2, [r3, #8]
	HAL_Init();
 8001dae:	f003 fe49 	bl	8005a44 <HAL_Init>
	SystemClock_Config();
 8001db2:	f000 fabf 	bl	8002334 <_Z18SystemClock_Configv>
	PeriphCommonClock_Config();
 8001db6:	f000 fb87 	bl	80024c8 <_Z24PeriphCommonClock_Configv>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001dba:	f3bf 8f4f 	dsb	sy
}
 8001dbe:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001dc0:	f3bf 8f6f 	isb	sy
}
 8001dc4:	bf00      	nop
__STATIC_FORCEINLINE void SCB_InvalidateICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;
 8001dc6:	4ba9      	ldr	r3, [pc, #676]	@ (800206c <main+0x2d0>)
 8001dc8:	2200      	movs	r2, #0
 8001dca:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001dce:	f3bf 8f4f 	dsb	sy
}
 8001dd2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001dd4:	f3bf 8f6f 	isb	sy
}
 8001dd8:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8001dda:	bf00      	nop
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001ddc:	4ba3      	ldr	r3, [pc, #652]	@ (800206c <main+0x2d0>)
 8001dde:	695b      	ldr	r3, [r3, #20]
 8001de0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	bf14      	ite	ne
 8001de8:	2301      	movne	r3, #1
 8001dea:	2300      	moveq	r3, #0
 8001dec:	b2db      	uxtb	r3, r3
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d11b      	bne.n	8001e2a <main+0x8e>
  __ASM volatile ("dsb 0xF":::"memory");
 8001df2:	f3bf 8f4f 	dsb	sy
}
 8001df6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001df8:	f3bf 8f6f 	isb	sy
}
 8001dfc:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001dfe:	4b9b      	ldr	r3, [pc, #620]	@ (800206c <main+0x2d0>)
 8001e00:	2200      	movs	r2, #0
 8001e02:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001e06:	f3bf 8f4f 	dsb	sy
}
 8001e0a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001e0c:	f3bf 8f6f 	isb	sy
}
 8001e10:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001e12:	4b96      	ldr	r3, [pc, #600]	@ (800206c <main+0x2d0>)
 8001e14:	695b      	ldr	r3, [r3, #20]
 8001e16:	4a95      	ldr	r2, [pc, #596]	@ (800206c <main+0x2d0>)
 8001e18:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001e1c:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001e1e:	f3bf 8f4f 	dsb	sy
}
 8001e22:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001e24:	f3bf 8f6f 	isb	sy
}
 8001e28:	e000      	b.n	8001e2c <main+0x90>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001e2a:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8001e2c:	4b8f      	ldr	r3, [pc, #572]	@ (800206c <main+0x2d0>)
 8001e2e:	2200      	movs	r2, #0
 8001e30:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8001e34:	f3bf 8f4f 	dsb	sy
}
 8001e38:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8001e3a:	4b8c      	ldr	r3, [pc, #560]	@ (800206c <main+0x2d0>)
 8001e3c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001e40:	623b      	str	r3, [r7, #32]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8001e42:	6a3b      	ldr	r3, [r7, #32]
 8001e44:	0b5b      	lsrs	r3, r3, #13
 8001e46:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001e4a:	61fb      	str	r3, [r7, #28]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8001e4c:	6a3b      	ldr	r3, [r7, #32]
 8001e4e:	08db      	lsrs	r3, r3, #3
 8001e50:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001e54:	61bb      	str	r3, [r7, #24]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001e56:	69fb      	ldr	r3, [r7, #28]
 8001e58:	015a      	lsls	r2, r3, #5
 8001e5a:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 8001e5e:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8001e60:	69ba      	ldr	r2, [r7, #24]
 8001e62:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001e64:	4981      	ldr	r1, [pc, #516]	@ (800206c <main+0x2d0>)
 8001e66:	4313      	orrs	r3, r2
 8001e68:	f8c1 3260 	str.w	r3, [r1, #608]	@ 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8001e6c:	69bb      	ldr	r3, [r7, #24]
 8001e6e:	1e5a      	subs	r2, r3, #1
 8001e70:	61ba      	str	r2, [r7, #24]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	bf14      	ite	ne
 8001e76:	2301      	movne	r3, #1
 8001e78:	2300      	moveq	r3, #0
 8001e7a:	b2db      	uxtb	r3, r3
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d1ea      	bne.n	8001e56 <main+0xba>
    } while(sets-- != 0U);
 8001e80:	69fb      	ldr	r3, [r7, #28]
 8001e82:	1e5a      	subs	r2, r3, #1
 8001e84:	61fa      	str	r2, [r7, #28]
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	bf14      	ite	ne
 8001e8a:	2301      	movne	r3, #1
 8001e8c:	2300      	moveq	r3, #0
 8001e8e:	b2db      	uxtb	r3, r3
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d1db      	bne.n	8001e4c <main+0xb0>
  __ASM volatile ("dsb 0xF":::"memory");
 8001e94:	f3bf 8f4f 	dsb	sy
}
 8001e98:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001e9a:	f3bf 8f6f 	isb	sy
}
 8001e9e:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8001ea0:	bf00      	nop
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8001ea2:	4b72      	ldr	r3, [pc, #456]	@ (800206c <main+0x2d0>)
 8001ea4:	695b      	ldr	r3, [r3, #20]
 8001ea6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	bf14      	ite	ne
 8001eae:	2301      	movne	r3, #1
 8001eb0:	2300      	moveq	r3, #0
 8001eb2:	b2db      	uxtb	r3, r3
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d142      	bne.n	8001f3e <main+0x1a2>
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8001eb8:	4b6c      	ldr	r3, [pc, #432]	@ (800206c <main+0x2d0>)
 8001eba:	2200      	movs	r2, #0
 8001ebc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8001ec0:	f3bf 8f4f 	dsb	sy
}
 8001ec4:	bf00      	nop
    ccsidr = SCB->CCSIDR;
 8001ec6:	4b69      	ldr	r3, [pc, #420]	@ (800206c <main+0x2d0>)
 8001ec8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001ecc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8001ece:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001ed0:	0b5b      	lsrs	r3, r3, #13
 8001ed2:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001ed6:	62bb      	str	r3, [r7, #40]	@ 0x28
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8001ed8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001eda:	08db      	lsrs	r3, r3, #3
 8001edc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001ee0:	627b      	str	r3, [r7, #36]	@ 0x24
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001ee2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001ee4:	015a      	lsls	r2, r3, #5
 8001ee6:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 8001eea:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8001eec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001eee:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001ef0:	495e      	ldr	r1, [pc, #376]	@ (800206c <main+0x2d0>)
 8001ef2:	4313      	orrs	r3, r2
 8001ef4:	f8c1 3260 	str.w	r3, [r1, #608]	@ 0x260
      } while (ways-- != 0U);
 8001ef8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001efa:	1e5a      	subs	r2, r3, #1
 8001efc:	627a      	str	r2, [r7, #36]	@ 0x24
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	bf14      	ite	ne
 8001f02:	2301      	movne	r3, #1
 8001f04:	2300      	moveq	r3, #0
 8001f06:	b2db      	uxtb	r3, r3
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d1ea      	bne.n	8001ee2 <main+0x146>
    } while(sets-- != 0U);
 8001f0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f0e:	1e5a      	subs	r2, r3, #1
 8001f10:	62ba      	str	r2, [r7, #40]	@ 0x28
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	bf14      	ite	ne
 8001f16:	2301      	movne	r3, #1
 8001f18:	2300      	moveq	r3, #0
 8001f1a:	b2db      	uxtb	r3, r3
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d1db      	bne.n	8001ed8 <main+0x13c>
  __ASM volatile ("dsb 0xF":::"memory");
 8001f20:	f3bf 8f4f 	dsb	sy
}
 8001f24:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8001f26:	4b51      	ldr	r3, [pc, #324]	@ (800206c <main+0x2d0>)
 8001f28:	695b      	ldr	r3, [r3, #20]
 8001f2a:	4a50      	ldr	r2, [pc, #320]	@ (800206c <main+0x2d0>)
 8001f2c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f30:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001f32:	f3bf 8f4f 	dsb	sy
}
 8001f36:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001f38:	f3bf 8f6f 	isb	sy
}
 8001f3c:	e000      	b.n	8001f40 <main+0x1a4>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8001f3e:	bf00      	nop
	SCB_EnableICache();
	SCB_InvalidateDCache();
	SCB_EnableDCache();

	/* DMA controller clock enable */
    __HAL_RCC_DMA1_CLK_ENABLE();
 8001f40:	4b4b      	ldr	r3, [pc, #300]	@ (8002070 <main+0x2d4>)
 8001f42:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001f46:	4a4a      	ldr	r2, [pc, #296]	@ (8002070 <main+0x2d4>)
 8001f48:	f043 0301 	orr.w	r3, r3, #1
 8001f4c:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8001f50:	4b47      	ldr	r3, [pc, #284]	@ (8002070 <main+0x2d4>)
 8001f52:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001f56:	f003 0301 	and.w	r3, r3, #1
 8001f5a:	607b      	str	r3, [r7, #4]
 8001f5c:	687b      	ldr	r3, [r7, #4]

	MX_GPIO_Init(); // used for SD card detect
 8001f5e:	f000 fb77 	bl	8002650 <_ZL12MX_GPIO_Initv>
	MX_USART1_UART_Init();
 8001f62:	f000 fb15 	bl	8002590 <_ZL19MX_USART1_UART_Initv>
	MX_SDMMC1_SD_Init();		// uncomment #define ENABLE_SD_DMA_CACHE_MAINTENANCE  1 in sd_diskio.c
 8001f66:	f000 fae7 	bl	8002538 <_ZL17MX_SDMMC1_SD_Initv>
	MX_FATFS_Init();
 8001f6a:	f00e fa39 	bl	80103e0 <MX_FATFS_Init>


	txPingPongBuffer.txBuffers[0].header = PRU_DATA;
 8001f6e:	4b41      	ldr	r3, [pc, #260]	@ (8002074 <main+0x2d8>)
 8001f70:	4a41      	ldr	r2, [pc, #260]	@ (8002078 <main+0x2dc>)
 8001f72:	601a      	str	r2, [r3, #0]
	txPingPongBuffer.txBuffers[1].header = PRU_DATA;
 8001f74:	4b3f      	ldr	r3, [pc, #252]	@ (8002074 <main+0x2d8>)
 8001f76:	4a40      	ldr	r2, [pc, #256]	@ (8002078 <main+0x2dc>)
 8001f78:	641a      	str	r2, [r3, #64]	@ 0x40

	enum State currentState;
	enum State prevState;

	currentState = ST_SETUP;
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	prevState = ST_RESET;
 8001f80:	2305      	movs	r3, #5
 8001f82:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

    comms->setStatus(false);
 8001f86:	4b3d      	ldr	r3, [pc, #244]	@ (800207c <main+0x2e0>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	2100      	movs	r1, #0
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	f003 fa3e 	bl	800540e <_ZN11RemoraComms9setStatusEb>
    comms->setError(false);
 8001f92:	4b3a      	ldr	r3, [pc, #232]	@ (800207c <main+0x2e0>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	2100      	movs	r1, #0
 8001f98:	4618      	mov	r0, r3
 8001f9a:	f003 fa55 	bl	8005448 <_ZN11RemoraComms8setErrorEb>
    resetCnt = 0;
 8001f9e:	4b38      	ldr	r3, [pc, #224]	@ (8002080 <main+0x2e4>)
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	701a      	strb	r2, [r3, #0]

	printf("\nRemora version %d.%d.%d for %s starting\n\n", MAJOR_VERSION, MINOR_VERSION, PATCH, BOARD);
 8001fa4:	4b37      	ldr	r3, [pc, #220]	@ (8002084 <main+0x2e8>)
 8001fa6:	9300      	str	r3, [sp, #0]
 8001fa8:	2300      	movs	r3, #0
 8001faa:	2201      	movs	r2, #1
 8001fac:	2100      	movs	r1, #0
 8001fae:	4836      	ldr	r0, [pc, #216]	@ (8002088 <main+0x2ec>)
 8001fb0:	f011 faa2 	bl	80134f8 <iprintf>

	while (1)
	{
		switch(currentState){
 8001fb4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8001fb8:	2b06      	cmp	r3, #6
 8001fba:	d8fb      	bhi.n	8001fb4 <main+0x218>
 8001fbc:	a201      	add	r2, pc, #4	@ (adr r2, 8001fc4 <main+0x228>)
 8001fbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fc2:	bf00      	nop
 8001fc4:	08001fe1 	.word	0x08001fe1
 8001fc8:	08002017 	.word	0x08002017
 8001fcc:	080020a9 	.word	0x080020a9
 8001fd0:	080020dd 	.word	0x080020dd
 8001fd4:	08002175 	.word	0x08002175
 8001fd8:	08002197 	.word	0x08002197
 8001fdc:	08002243 	.word	0x08002243
			          case ST_SETUP:
			              // do setup tasks
			              if (currentState != prevState)
 8001fe0:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 8001fe4:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8001fe8:	429a      	cmp	r2, r3
 8001fea:	d002      	beq.n	8001ff2 <main+0x256>
			              {
			                  printf("\n## Entering SETUP state\n\n");
 8001fec:	4827      	ldr	r0, [pc, #156]	@ (800208c <main+0x2f0>)
 8001fee:	f011 faf3 	bl	80135d8 <puts>
			              }
			              prevState = currentState;
 8001ff2:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8001ff6:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

			              readJsonConfig();
 8001ffa:	f7ff fbdb 	bl	80017b4 <_Z14readJsonConfigv>
			              setup();
 8001ffe:	f7ff fca1 	bl	8001944 <_Z5setupv>
			              deserialiseJSON();
 8002002:	f7ff fcb5 	bl	8001970 <_Z15deserialiseJSONv>
			              configThreads();
 8002006:	f7ff fd15 	bl	8001a34 <_Z13configThreadsv>
			              createThreads();
 800200a:	f7ff fb77 	bl	80016fc <_Z13createThreadsv>
			              //debugThreadHigh();
			              //loadModules();
			              //debugThreadLow();

			              currentState = ST_START;
 800200e:	2301      	movs	r3, #1
 8002010:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
			              break;
 8002014:	e11c      	b.n	8002250 <main+0x4b4>

			          case ST_START:
			              // do start tasks
			              if (currentState != prevState)
 8002016:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 800201a:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800201e:	429a      	cmp	r2, r3
 8002020:	d002      	beq.n	8002028 <main+0x28c>
			              {
			                  printf("\n## Entering START state\n");
 8002022:	481b      	ldr	r0, [pc, #108]	@ (8002090 <main+0x2f4>)
 8002024:	f011 fad8 	bl	80135d8 <puts>
			              }
			              prevState = currentState;
 8002028:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800202c:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

			              if (!threadsRunning)
 8002030:	4b18      	ldr	r3, [pc, #96]	@ (8002094 <main+0x2f8>)
 8002032:	781b      	ldrb	r3, [r3, #0]
 8002034:	f083 0301 	eor.w	r3, r3, #1
 8002038:	b2db      	uxtb	r3, r3
 800203a:	2b00      	cmp	r3, #0
 800203c:	d012      	beq.n	8002064 <main+0x2c8>
			              {
			                  // Start the threads
			                  printf("\nStarting the BASE thread\n");
 800203e:	4816      	ldr	r0, [pc, #88]	@ (8002098 <main+0x2fc>)
 8002040:	f011 faca 	bl	80135d8 <puts>
			                  baseThread->startThread();
 8002044:	4b15      	ldr	r3, [pc, #84]	@ (800209c <main+0x300>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	4618      	mov	r0, r3
 800204a:	f003 fa83 	bl	8005554 <_ZN9pruThread11startThreadEv>

			                  printf("\nStarting the SERVO thread\n");
 800204e:	4814      	ldr	r0, [pc, #80]	@ (80020a0 <main+0x304>)
 8002050:	f011 fac2 	bl	80135d8 <puts>
			                  servoThread->startThread();
 8002054:	4b13      	ldr	r3, [pc, #76]	@ (80020a4 <main+0x308>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	4618      	mov	r0, r3
 800205a:	f003 fa7b 	bl	8005554 <_ZN9pruThread11startThreadEv>

			                  threadsRunning = true;
 800205e:	4b0d      	ldr	r3, [pc, #52]	@ (8002094 <main+0x2f8>)
 8002060:	2201      	movs	r2, #1
 8002062:	701a      	strb	r2, [r3, #0]
			              }

			              currentState = ST_IDLE;
 8002064:	2302      	movs	r3, #2
 8002066:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

			              break;
 800206a:	e0f1      	b.n	8002250 <main+0x4b4>
 800206c:	e000ed00 	.word	0xe000ed00
 8002070:	58024400 	.word	0x58024400
 8002074:	24000400 	.word	0x24000400
 8002078:	64617461 	.word	0x64617461
 800207c:	24000578 	.word	0x24000578
 8002080:	24000350 	.word	0x24000350
 8002084:	080145ac 	.word	0x080145ac
 8002088:	08014580 	.word	0x08014580
 800208c:	080145b8 	.word	0x080145b8
 8002090:	080145d4 	.word	0x080145d4
 8002094:	24000353 	.word	0x24000353
 8002098:	080145f0 	.word	0x080145f0
 800209c:	24000358 	.word	0x24000358
 80020a0:	0801460c 	.word	0x0801460c
 80020a4:	24000354 	.word	0x24000354


			          case ST_IDLE:
			              // do something when idle
			              if (currentState != prevState)
 80020a8:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 80020ac:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 80020b0:	429a      	cmp	r2, r3
 80020b2:	d002      	beq.n	80020ba <main+0x31e>
			              {
			                  printf("\n## Entering IDLE state\n");
 80020b4:	4867      	ldr	r0, [pc, #412]	@ (8002254 <main+0x4b8>)
 80020b6:	f011 fa8f 	bl	80135d8 <puts>
			              }
			              prevState = currentState;
 80020ba:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80020be:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

			              //wait for data before changing to running state
			              if (comms->getStatus())
 80020c2:	4b65      	ldr	r3, [pc, #404]	@ (8002258 <main+0x4bc>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	4618      	mov	r0, r3
 80020c8:	f003 f994 	bl	80053f4 <_ZN11RemoraComms9getStatusEv>
 80020cc:	4603      	mov	r3, r0
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	f000 80ba 	beq.w	8002248 <main+0x4ac>
			              {
			                  currentState = ST_RUNNING;
 80020d4:	2303      	movs	r3, #3
 80020d6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
			              }

			              break;
 80020da:	e0b5      	b.n	8002248 <main+0x4ac>

			          case ST_RUNNING:
			              // do running tasks
			              if (currentState != prevState)
 80020dc:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 80020e0:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 80020e4:	429a      	cmp	r2, r3
 80020e6:	d002      	beq.n	80020ee <main+0x352>
			              {
			                  printf("\n## Entering RUNNING state\n");
 80020e8:	485c      	ldr	r0, [pc, #368]	@ (800225c <main+0x4c0>)
 80020ea:	f011 fa75 	bl	80135d8 <puts>
			              }
			              prevState = currentState;
 80020ee:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80020f2:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36


			              // check to see if there there has been SPI errors
			              if (comms->getError())
 80020f6:	4b58      	ldr	r3, [pc, #352]	@ (8002258 <main+0x4bc>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	4618      	mov	r0, r3
 80020fc:	f003 f997 	bl	800542e <_ZN11RemoraComms8getErrorEv>
 8002100:	4603      	mov	r3, r0
 8002102:	2b00      	cmp	r3, #0
 8002104:	d008      	beq.n	8002118 <main+0x37c>
			              {
			                  printf("Communication data error\n");
 8002106:	4856      	ldr	r0, [pc, #344]	@ (8002260 <main+0x4c4>)
 8002108:	f011 fa66 	bl	80135d8 <puts>
			                  comms->setError(false);
 800210c:	4b52      	ldr	r3, [pc, #328]	@ (8002258 <main+0x4bc>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	2100      	movs	r1, #0
 8002112:	4618      	mov	r0, r3
 8002114:	f003 f998 	bl	8005448 <_ZN11RemoraComms8setErrorEb>
			              }

			              if (comms->getStatus())
 8002118:	4b4f      	ldr	r3, [pc, #316]	@ (8002258 <main+0x4bc>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	4618      	mov	r0, r3
 800211e:	f003 f969 	bl	80053f4 <_ZN11RemoraComms9getStatusEv>
 8002122:	4603      	mov	r3, r0
 8002124:	2b00      	cmp	r3, #0
 8002126:	d009      	beq.n	800213c <main+0x3a0>
			              {
			                  // SPI data received by DMA
			                  resetCnt = 0;
 8002128:	4b4e      	ldr	r3, [pc, #312]	@ (8002264 <main+0x4c8>)
 800212a:	2200      	movs	r2, #0
 800212c:	701a      	strb	r2, [r3, #0]
			                  comms->setStatus(false);
 800212e:	4b4a      	ldr	r3, [pc, #296]	@ (8002258 <main+0x4bc>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	2100      	movs	r1, #0
 8002134:	4618      	mov	r0, r3
 8002136:	f003 f96a 	bl	800540e <_ZN11RemoraComms9setStatusEb>
 800213a:	e005      	b.n	8002148 <main+0x3ac>
			              }
			              else
			              {
			                  // no data received by DMA
			                  resetCnt++;
 800213c:	4b49      	ldr	r3, [pc, #292]	@ (8002264 <main+0x4c8>)
 800213e:	781b      	ldrb	r3, [r3, #0]
 8002140:	3301      	adds	r3, #1
 8002142:	b2da      	uxtb	r2, r3
 8002144:	4b47      	ldr	r3, [pc, #284]	@ (8002264 <main+0x4c8>)
 8002146:	701a      	strb	r2, [r3, #0]
			              }

			              if (resetCnt > SPI_ERR_MAX)
 8002148:	4b46      	ldr	r3, [pc, #280]	@ (8002264 <main+0x4c8>)
 800214a:	781b      	ldrb	r3, [r3, #0]
 800214c:	2b05      	cmp	r3, #5
 800214e:	d908      	bls.n	8002162 <main+0x3c6>
			              {
			                  // reset threshold reached, reset the PRU
			                  printf("   Communication data error limit reached, resetting\n");
 8002150:	4845      	ldr	r0, [pc, #276]	@ (8002268 <main+0x4cc>)
 8002152:	f011 fa41 	bl	80135d8 <puts>
			                  resetCnt = 0;
 8002156:	4b43      	ldr	r3, [pc, #268]	@ (8002264 <main+0x4c8>)
 8002158:	2200      	movs	r2, #0
 800215a:	701a      	strb	r2, [r3, #0]
			                  currentState = ST_RESET;
 800215c:	2305      	movs	r3, #5
 800215e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
			              }

			              if (PRUreset)
 8002162:	4b42      	ldr	r3, [pc, #264]	@ (800226c <main+0x4d0>)
 8002164:	781b      	ldrb	r3, [r3, #0]
 8002166:	b2db      	uxtb	r3, r3
 8002168:	2b00      	cmp	r3, #0
 800216a:	d06f      	beq.n	800224c <main+0x4b0>
			              {
			                  currentState = ST_WDRESET;
 800216c:	2306      	movs	r3, #6
 800216e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
			              }

			              break;
 8002172:	e06b      	b.n	800224c <main+0x4b0>

			          case ST_STOP:
			              // do stop tasks
			              if (currentState != prevState)
 8002174:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 8002178:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800217c:	429a      	cmp	r2, r3
 800217e:	d002      	beq.n	8002186 <main+0x3ea>
			              {
			                  printf("\n## Entering STOP state\n");
 8002180:	483b      	ldr	r0, [pc, #236]	@ (8002270 <main+0x4d4>)
 8002182:	f011 fa29 	bl	80135d8 <puts>
			              }
			              prevState = currentState;
 8002186:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800218a:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36


			              currentState = ST_STOP;
 800218e:	2304      	movs	r3, #4
 8002190:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
			              break;
 8002194:	e05c      	b.n	8002250 <main+0x4b4>

			          case ST_RESET:
			              // do reset tasks
			              if (currentState != prevState)
 8002196:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 800219a:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800219e:	429a      	cmp	r2, r3
 80021a0:	d002      	beq.n	80021a8 <main+0x40c>
			              {
			                  printf("\n## Entering RESET state\n");
 80021a2:	4834      	ldr	r0, [pc, #208]	@ (8002274 <main+0x4d8>)
 80021a4:	f011 fa18 	bl	80135d8 <puts>
			              }
			              prevState = currentState;
 80021a8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80021ac:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

			              // set all of the rxData buffer to 0
			              // rxData.rxBuffer is volatile so need to do this the long way. memset cannot be used for volatile

			              pruRxData = getCurrentRxBuffer(&rxPingPongBuffer);
 80021b0:	4831      	ldr	r0, [pc, #196]	@ (8002278 <main+0x4dc>)
 80021b2:	f000 f87b 	bl	80022ac <_Z18getCurrentRxBufferP16RxPingPongBuffer>
 80021b6:	4603      	mov	r3, r0
 80021b8:	4a30      	ldr	r2, [pc, #192]	@ (800227c <main+0x4e0>)
 80021ba:	6013      	str	r3, [r2, #0]

			              printf("   Resetting rxBuffer\n");
 80021bc:	4830      	ldr	r0, [pc, #192]	@ (8002280 <main+0x4e4>)
 80021be:	f011 fa0b 	bl	80135d8 <puts>
			              {
			            	  SCB_InvalidateDCache_by_Addr((uint32_t*)(((uint32_t)pruRxData->rxBuffer) & ~(uint32_t)0x1F), BUFFER_ALIGNED_SIZE);
 80021c2:	4b2e      	ldr	r3, [pc, #184]	@ (800227c <main+0x4e0>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f023 031f 	bic.w	r3, r3, #31
 80021ca:	617b      	str	r3, [r7, #20]
 80021cc:	2340      	movs	r3, #64	@ 0x40
 80021ce:	613b      	str	r3, [r7, #16]
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_FORCEINLINE void SCB_InvalidateDCache_by_Addr (void *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    if ( dsize > 0 ) { 
 80021d0:	693b      	ldr	r3, [r7, #16]
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	dd1d      	ble.n	8002212 <main+0x476>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 80021d6:	697b      	ldr	r3, [r7, #20]
 80021d8:	f003 021f 	and.w	r2, r3, #31
 80021dc:	693b      	ldr	r3, [r7, #16]
 80021de:	4413      	add	r3, r2
 80021e0:	60fb      	str	r3, [r7, #12]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 80021e2:	697b      	ldr	r3, [r7, #20]
 80021e4:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("dsb 0xF":::"memory");
 80021e6:	f3bf 8f4f 	dsb	sy
}
 80021ea:	bf00      	nop
    
      __DSB();

      do {
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 80021ec:	4a25      	ldr	r2, [pc, #148]	@ (8002284 <main+0x4e8>)
 80021ee:	68bb      	ldr	r3, [r7, #8]
 80021f0:	f8c2 325c 	str.w	r3, [r2, #604]	@ 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 80021f4:	68bb      	ldr	r3, [r7, #8]
 80021f6:	3320      	adds	r3, #32
 80021f8:	60bb      	str	r3, [r7, #8]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	3b20      	subs	r3, #32
 80021fe:	60fb      	str	r3, [r7, #12]
      } while ( op_size > 0 );
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	2b00      	cmp	r3, #0
 8002204:	dcf2      	bgt.n	80021ec <main+0x450>
  __ASM volatile ("dsb 0xF":::"memory");
 8002206:	f3bf 8f4f 	dsb	sy
}
 800220a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800220c:	f3bf 8f6f 	isb	sy
}
 8002210:	bf00      	nop

      __DSB();
      __ISB();
    }
  #endif
}
 8002212:	bf00      	nop
			                  int n = sizeof(pruRxData->rxBuffer);
 8002214:	2340      	movs	r3, #64	@ 0x40
 8002216:	633b      	str	r3, [r7, #48]	@ 0x30
			                  while(n-- > 0)
 8002218:	e005      	b.n	8002226 <main+0x48a>
			                  {
			                      pruRxData->rxBuffer[n] = 0;
 800221a:	4b18      	ldr	r3, [pc, #96]	@ (800227c <main+0x4e0>)
 800221c:	681a      	ldr	r2, [r3, #0]
 800221e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002220:	4413      	add	r3, r2
 8002222:	2200      	movs	r2, #0
 8002224:	701a      	strb	r2, [r3, #0]
			                  while(n-- > 0)
 8002226:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002228:	1e5a      	subs	r2, r3, #1
 800222a:	633a      	str	r2, [r7, #48]	@ 0x30
 800222c:	2b00      	cmp	r3, #0
 800222e:	bfcc      	ite	gt
 8002230:	2301      	movgt	r3, #1
 8002232:	2300      	movle	r3, #0
 8002234:	b2db      	uxtb	r3, r3
 8002236:	2b00      	cmp	r3, #0
 8002238:	d1ef      	bne.n	800221a <main+0x47e>
			                  }
			              }

			              currentState = ST_IDLE;
 800223a:	2302      	movs	r3, #2
 800223c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
			              break;
 8002240:	e006      	b.n	8002250 <main+0x4b4>

			          case ST_WDRESET:
			        	  // force a reset
			        	  HAL_NVIC_SystemReset();
 8002242:	f003 fdda 	bl	8005dfa <HAL_NVIC_SystemReset>
			              break;
 8002246:	e003      	b.n	8002250 <main+0x4b4>
			              break;
 8002248:	bf00      	nop
 800224a:	e6b3      	b.n	8001fb4 <main+0x218>
			              break;
 800224c:	bf00      	nop
 800224e:	e6b1      	b.n	8001fb4 <main+0x218>
			  }

	}
 8002250:	e6b0      	b.n	8001fb4 <main+0x218>
 8002252:	bf00      	nop
 8002254:	08014628 	.word	0x08014628
 8002258:	24000578 	.word	0x24000578
 800225c:	08014640 	.word	0x08014640
 8002260:	0801465c 	.word	0x0801465c
 8002264:	24000350 	.word	0x24000350
 8002268:	08014678 	.word	0x08014678
 800226c:	24000351 	.word	0x24000351
 8002270:	080146b0 	.word	0x080146b0
 8002274:	080146c8 	.word	0x080146c8
 8002278:	24000360 	.word	0x24000360
 800227c:	24000520 	.word	0x24000520
 8002280:	080146e4 	.word	0x080146e4
 8002284:	e000ed00 	.word	0xe000ed00

08002288 <_Z13swapTxBuffersP16TxPingPongBuffer>:

void swapRxBuffers(RxPingPongBuffer* buffer) {
    buffer->currentRxBuffer = 1 - buffer->currentRxBuffer;
}

void swapTxBuffers(TxPingPongBuffer* buffer) {
 8002288:	b480      	push	{r7}
 800228a:	b083      	sub	sp, #12
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
    buffer->currentTxBuffer = 1 - buffer->currentTxBuffer;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002296:	f1c3 0201 	rsb	r2, r3, #1
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
}
 80022a0:	bf00      	nop
 80022a2:	370c      	adds	r7, #12
 80022a4:	46bd      	mov	sp, r7
 80022a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022aa:	4770      	bx	lr

080022ac <_Z18getCurrentRxBufferP16RxPingPongBuffer>:

rxData_t* getCurrentRxBuffer(RxPingPongBuffer* buffer) {
 80022ac:	b480      	push	{r7}
 80022ae:	b083      	sub	sp, #12
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
    return &buffer->rxBuffers[buffer->currentRxBuffer];
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80022ba:	019b      	lsls	r3, r3, #6
 80022bc:	687a      	ldr	r2, [r7, #4]
 80022be:	4413      	add	r3, r2
}
 80022c0:	4618      	mov	r0, r3
 80022c2:	370c      	adds	r7, #12
 80022c4:	46bd      	mov	sp, r7
 80022c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ca:	4770      	bx	lr

080022cc <_Z18getCurrentTxBufferP16TxPingPongBuffer>:

txData_t* getCurrentTxBuffer(TxPingPongBuffer* buffer) {
 80022cc:	b480      	push	{r7}
 80022ce:	b083      	sub	sp, #12
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
    return &buffer->txBuffers[buffer->currentTxBuffer];
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80022da:	019b      	lsls	r3, r3, #6
 80022dc:	687a      	ldr	r2, [r7, #4]
 80022de:	4413      	add	r3, r2
}
 80022e0:	4618      	mov	r0, r3
 80022e2:	370c      	adds	r7, #12
 80022e4:	46bd      	mov	sp, r7
 80022e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ea:	4770      	bx	lr

080022ec <_Z14getAltRxBufferP16RxPingPongBuffer>:

rxData_t* getAltRxBuffer(RxPingPongBuffer* buffer) {
 80022ec:	b480      	push	{r7}
 80022ee:	b083      	sub	sp, #12
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
    return &buffer->rxBuffers[1 - buffer->currentRxBuffer];
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80022fa:	f1c3 0301 	rsb	r3, r3, #1
 80022fe:	019b      	lsls	r3, r3, #6
 8002300:	687a      	ldr	r2, [r7, #4]
 8002302:	4413      	add	r3, r2
}
 8002304:	4618      	mov	r0, r3
 8002306:	370c      	adds	r7, #12
 8002308:	46bd      	mov	sp, r7
 800230a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230e:	4770      	bx	lr

08002310 <_Z14getAltTxBufferP16TxPingPongBuffer>:

txData_t* getAltTxBuffer(TxPingPongBuffer* buffer) {
 8002310:	b480      	push	{r7}
 8002312:	b083      	sub	sp, #12
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
    return &buffer->txBuffers[1 - buffer->currentTxBuffer];
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800231e:	f1c3 0301 	rsb	r3, r3, #1
 8002322:	019b      	lsls	r3, r3, #6
 8002324:	687a      	ldr	r2, [r7, #4]
 8002326:	4413      	add	r3, r2
}
 8002328:	4618      	mov	r0, r3
 800232a:	370c      	adds	r7, #12
 800232c:	46bd      	mov	sp, r7
 800232e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002332:	4770      	bx	lr

08002334 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b09e      	sub	sp, #120	@ 0x78
 8002338:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800233a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800233e:	224c      	movs	r2, #76	@ 0x4c
 8002340:	2100      	movs	r1, #0
 8002342:	4618      	mov	r0, r3
 8002344:	f011 fa42 	bl	80137cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002348:	f107 030c 	add.w	r3, r7, #12
 800234c:	2220      	movs	r2, #32
 800234e:	2100      	movs	r1, #0
 8002350:	4618      	mov	r0, r3
 8002352:	f011 fa3b 	bl	80137cc <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8002356:	2002      	movs	r0, #2
 8002358:	f006 fb8a 	bl	8008a70 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800235c:	2300      	movs	r3, #0
 800235e:	60bb      	str	r3, [r7, #8]
 8002360:	4b56      	ldr	r3, [pc, #344]	@ (80024bc <_Z18SystemClock_Configv+0x188>)
 8002362:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002364:	4a55      	ldr	r2, [pc, #340]	@ (80024bc <_Z18SystemClock_Configv+0x188>)
 8002366:	f023 0301 	bic.w	r3, r3, #1
 800236a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800236c:	4b53      	ldr	r3, [pc, #332]	@ (80024bc <_Z18SystemClock_Configv+0x188>)
 800236e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002370:	f003 0301 	and.w	r3, r3, #1
 8002374:	60bb      	str	r3, [r7, #8]
 8002376:	4b52      	ldr	r3, [pc, #328]	@ (80024c0 <_Z18SystemClock_Configv+0x18c>)
 8002378:	699b      	ldr	r3, [r3, #24]
 800237a:	4a51      	ldr	r2, [pc, #324]	@ (80024c0 <_Z18SystemClock_Configv+0x18c>)
 800237c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002380:	6193      	str	r3, [r2, #24]
 8002382:	4b4f      	ldr	r3, [pc, #316]	@ (80024c0 <_Z18SystemClock_Configv+0x18c>)
 8002384:	699b      	ldr	r3, [r3, #24]
 8002386:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800238a:	60bb      	str	r3, [r7, #8]
 800238c:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800238e:	bf00      	nop
 8002390:	4b4b      	ldr	r3, [pc, #300]	@ (80024c0 <_Z18SystemClock_Configv+0x18c>)
 8002392:	699b      	ldr	r3, [r3, #24]
 8002394:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002398:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800239c:	bf14      	ite	ne
 800239e:	2301      	movne	r3, #1
 80023a0:	2300      	moveq	r3, #0
 80023a2:	b2db      	uxtb	r3, r3
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d1f3      	bne.n	8002390 <_Z18SystemClock_Configv+0x5c>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023a8:	4b46      	ldr	r3, [pc, #280]	@ (80024c4 <_Z18SystemClock_Configv+0x190>)
 80023aa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80023ae:	4a45      	ldr	r2, [pc, #276]	@ (80024c4 <_Z18SystemClock_Configv+0x190>)
 80023b0:	f043 0302 	orr.w	r3, r3, #2
 80023b4:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80023b8:	4b42      	ldr	r3, [pc, #264]	@ (80024c4 <_Z18SystemClock_Configv+0x190>)
 80023ba:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80023be:	f003 0302 	and.w	r3, r3, #2
 80023c2:	607b      	str	r3, [r7, #4]
 80023c4:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80023c6:	2300      	movs	r3, #0
 80023c8:	603b      	str	r3, [r7, #0]
 80023ca:	4b3d      	ldr	r3, [pc, #244]	@ (80024c0 <_Z18SystemClock_Configv+0x18c>)
 80023cc:	699b      	ldr	r3, [r3, #24]
 80023ce:	4a3c      	ldr	r2, [pc, #240]	@ (80024c0 <_Z18SystemClock_Configv+0x18c>)
 80023d0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80023d4:	6193      	str	r3, [r2, #24]
 80023d6:	4b3a      	ldr	r3, [pc, #232]	@ (80024c0 <_Z18SystemClock_Configv+0x18c>)
 80023d8:	699b      	ldr	r3, [r3, #24]
 80023da:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80023de:	603b      	str	r3, [r7, #0]
 80023e0:	4b36      	ldr	r3, [pc, #216]	@ (80024bc <_Z18SystemClock_Configv+0x188>)
 80023e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023e4:	4a35      	ldr	r2, [pc, #212]	@ (80024bc <_Z18SystemClock_Configv+0x188>)
 80023e6:	f043 0301 	orr.w	r3, r3, #1
 80023ea:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80023ec:	4b33      	ldr	r3, [pc, #204]	@ (80024bc <_Z18SystemClock_Configv+0x188>)
 80023ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023f0:	f003 0301 	and.w	r3, r3, #1
 80023f4:	603b      	str	r3, [r7, #0]
 80023f6:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80023f8:	bf00      	nop
 80023fa:	4b31      	ldr	r3, [pc, #196]	@ (80024c0 <_Z18SystemClock_Configv+0x18c>)
 80023fc:	699b      	ldr	r3, [r3, #24]
 80023fe:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002402:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002406:	bf14      	ite	ne
 8002408:	2301      	movne	r3, #1
 800240a:	2300      	moveq	r3, #0
 800240c:	b2db      	uxtb	r3, r3
 800240e:	2b00      	cmp	r3, #0
 8002410:	d1f3      	bne.n	80023fa <_Z18SystemClock_Configv+0xc6>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8002412:	4b2c      	ldr	r3, [pc, #176]	@ (80024c4 <_Z18SystemClock_Configv+0x190>)
 8002414:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002416:	f023 0303 	bic.w	r3, r3, #3
 800241a:	4a2a      	ldr	r2, [pc, #168]	@ (80024c4 <_Z18SystemClock_Configv+0x190>)
 800241c:	f043 0302 	orr.w	r3, r3, #2
 8002420:	6293      	str	r3, [r2, #40]	@ 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002422:	2301      	movs	r3, #1
 8002424:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002426:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800242a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800242c:	2302      	movs	r3, #2
 800242e:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002430:	2302      	movs	r3, #2
 8002432:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLM = 5;
 8002434:	2305      	movs	r3, #5
 8002436:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 192;
 8002438:	23c0      	movs	r3, #192	@ 0xc0
 800243a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 800243c:	2302      	movs	r3, #2
 800243e:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002440:	2304      	movs	r3, #4
 8002442:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002444:	2302      	movs	r3, #2
 8002446:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8002448:	2308      	movs	r3, #8
 800244a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800244c:	2300      	movs	r3, #0
 800244e:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8002450:	2300      	movs	r3, #0
 8002452:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002454:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002458:	4618      	mov	r0, r3
 800245a:	f006 fb43 	bl	8008ae4 <HAL_RCC_OscConfig>
 800245e:	4603      	mov	r3, r0
 8002460:	2b00      	cmp	r3, #0
 8002462:	bf14      	ite	ne
 8002464:	2301      	movne	r3, #1
 8002466:	2300      	moveq	r3, #0
 8002468:	b2db      	uxtb	r3, r3
 800246a:	2b00      	cmp	r3, #0
 800246c:	d001      	beq.n	8002472 <_Z18SystemClock_Configv+0x13e>
  {
    Error_Handler();
 800246e:	f000 f977 	bl	8002760 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002472:	233f      	movs	r3, #63	@ 0x3f
 8002474:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002476:	2303      	movs	r3, #3
 8002478:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800247a:	2300      	movs	r3, #0
 800247c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800247e:	2308      	movs	r3, #8
 8002480:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8002482:	2340      	movs	r3, #64	@ 0x40
 8002484:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8002486:	2340      	movs	r3, #64	@ 0x40
 8002488:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800248a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800248e:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8002490:	2340      	movs	r3, #64	@ 0x40
 8002492:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002494:	f107 030c 	add.w	r3, r7, #12
 8002498:	2104      	movs	r1, #4
 800249a:	4618      	mov	r0, r3
 800249c:	f006 ff7c 	bl	8009398 <HAL_RCC_ClockConfig>
 80024a0:	4603      	mov	r3, r0
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	bf14      	ite	ne
 80024a6:	2301      	movne	r3, #1
 80024a8:	2300      	moveq	r3, #0
 80024aa:	b2db      	uxtb	r3, r3
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d001      	beq.n	80024b4 <_Z18SystemClock_Configv+0x180>
  {
    Error_Handler();
 80024b0:	f000 f956 	bl	8002760 <Error_Handler>
  }
}
 80024b4:	bf00      	nop
 80024b6:	3778      	adds	r7, #120	@ 0x78
 80024b8:	46bd      	mov	sp, r7
 80024ba:	bd80      	pop	{r7, pc}
 80024bc:	58000400 	.word	0x58000400
 80024c0:	58024800 	.word	0x58024800
 80024c4:	58024400 	.word	0x58024400

080024c8 <_Z24PeriphCommonClock_Configv>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b0b0      	sub	sp, #192	@ 0xc0
 80024cc:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80024ce:	463b      	mov	r3, r7
 80024d0:	22c0      	movs	r2, #192	@ 0xc0
 80024d2:	2100      	movs	r1, #0
 80024d4:	4618      	mov	r0, r3
 80024d6:	f011 f979 	bl	80137cc <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC|RCC_PERIPHCLK_SPI1;
 80024da:	f44f 3288 	mov.w	r2, #69632	@ 0x11000
 80024de:	f04f 0300 	mov.w	r3, #0
 80024e2:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 2;
 80024e6:	2302      	movs	r3, #2
 80024e8:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 12;
 80024ea:	230c      	movs	r3, #12
 80024ec:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 1;
 80024ee:	2301      	movs	r3, #1
 80024f0:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 10;
 80024f2:	230a      	movs	r3, #10
 80024f4:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 80024f6:	2302      	movs	r3, #2
 80024f8:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 80024fa:	23c0      	movs	r3, #192	@ 0xc0
 80024fc:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 80024fe:	2320      	movs	r3, #32
 8002500:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8002502:	2300      	movs	r3, #0
 8002504:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL2;
 8002506:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800250a:	653b      	str	r3, [r7, #80]	@ 0x50
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL2;
 800250c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002510:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002512:	463b      	mov	r3, r7
 8002514:	4618      	mov	r0, r3
 8002516:	f007 facb 	bl	8009ab0 <HAL_RCCEx_PeriphCLKConfig>
 800251a:	4603      	mov	r3, r0
 800251c:	2b00      	cmp	r3, #0
 800251e:	bf14      	ite	ne
 8002520:	2301      	movne	r3, #1
 8002522:	2300      	moveq	r3, #0
 8002524:	b2db      	uxtb	r3, r3
 8002526:	2b00      	cmp	r3, #0
 8002528:	d001      	beq.n	800252e <_Z24PeriphCommonClock_Configv+0x66>
  {
    Error_Handler();
 800252a:	f000 f919 	bl	8002760 <Error_Handler>
  }
}
 800252e:	bf00      	nop
 8002530:	37c0      	adds	r7, #192	@ 0xc0
 8002532:	46bd      	mov	sp, r7
 8002534:	bd80      	pop	{r7, pc}
	...

08002538 <_ZL17MX_SDMMC1_SD_Initv>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 800253c:	4b11      	ldr	r3, [pc, #68]	@ (8002584 <_ZL17MX_SDMMC1_SD_Initv+0x4c>)
 800253e:	4a12      	ldr	r2, [pc, #72]	@ (8002588 <_ZL17MX_SDMMC1_SD_Initv+0x50>)
 8002540:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8002542:	4b10      	ldr	r3, [pc, #64]	@ (8002584 <_ZL17MX_SDMMC1_SD_Initv+0x4c>)
 8002544:	2200      	movs	r2, #0
 8002546:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_ENABLE;
 8002548:	4b0e      	ldr	r3, [pc, #56]	@ (8002584 <_ZL17MX_SDMMC1_SD_Initv+0x4c>)
 800254a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800254e:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8002550:	4b0c      	ldr	r3, [pc, #48]	@ (8002584 <_ZL17MX_SDMMC1_SD_Initv+0x4c>)
 8002552:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002556:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8002558:	4b0a      	ldr	r3, [pc, #40]	@ (8002584 <_ZL17MX_SDMMC1_SD_Initv+0x4c>)
 800255a:	2200      	movs	r2, #0
 800255c:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 8;
 800255e:	4b09      	ldr	r3, [pc, #36]	@ (8002584 <_ZL17MX_SDMMC1_SD_Initv+0x4c>)
 8002560:	2208      	movs	r2, #8
 8002562:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN SDMMC1_Init 2 */
  if (HAL_SD_Init(&hsd1) != HAL_OK)
 8002564:	4807      	ldr	r0, [pc, #28]	@ (8002584 <_ZL17MX_SDMMC1_SD_Initv+0x4c>)
 8002566:	f009 ffa1 	bl	800c4ac <HAL_SD_Init>
 800256a:	4603      	mov	r3, r0
 800256c:	2b00      	cmp	r3, #0
 800256e:	bf14      	ite	ne
 8002570:	2301      	movne	r3, #1
 8002572:	2300      	moveq	r3, #0
 8002574:	b2db      	uxtb	r3, r3
 8002576:	2b00      	cmp	r3, #0
 8002578:	d002      	beq.n	8002580 <_ZL17MX_SDMMC1_SD_Initv+0x48>
  {
      printf("SD_Init error\n");
 800257a:	4804      	ldr	r0, [pc, #16]	@ (800258c <_ZL17MX_SDMMC1_SD_Initv+0x54>)
 800257c:	f011 f82c 	bl	80135d8 <puts>
  }
  /* USER CODE END SDMMC1_Init 2 */

}
 8002580:	bf00      	nop
 8002582:	bd80      	pop	{r7, pc}
 8002584:	2400057c 	.word	0x2400057c
 8002588:	52007000 	.word	0x52007000
 800258c:	080146fc 	.word	0x080146fc

08002590 <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002594:	4b2c      	ldr	r3, [pc, #176]	@ (8002648 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8002596:	4a2d      	ldr	r2, [pc, #180]	@ (800264c <_ZL19MX_USART1_UART_Initv+0xbc>)
 8002598:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = PC_BAUD;
 800259a:	4b2b      	ldr	r3, [pc, #172]	@ (8002648 <_ZL19MX_USART1_UART_Initv+0xb8>)
 800259c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80025a0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80025a2:	4b29      	ldr	r3, [pc, #164]	@ (8002648 <_ZL19MX_USART1_UART_Initv+0xb8>)
 80025a4:	2200      	movs	r2, #0
 80025a6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80025a8:	4b27      	ldr	r3, [pc, #156]	@ (8002648 <_ZL19MX_USART1_UART_Initv+0xb8>)
 80025aa:	2200      	movs	r2, #0
 80025ac:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80025ae:	4b26      	ldr	r3, [pc, #152]	@ (8002648 <_ZL19MX_USART1_UART_Initv+0xb8>)
 80025b0:	2200      	movs	r2, #0
 80025b2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80025b4:	4b24      	ldr	r3, [pc, #144]	@ (8002648 <_ZL19MX_USART1_UART_Initv+0xb8>)
 80025b6:	220c      	movs	r2, #12
 80025b8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80025ba:	4b23      	ldr	r3, [pc, #140]	@ (8002648 <_ZL19MX_USART1_UART_Initv+0xb8>)
 80025bc:	2200      	movs	r2, #0
 80025be:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80025c0:	4b21      	ldr	r3, [pc, #132]	@ (8002648 <_ZL19MX_USART1_UART_Initv+0xb8>)
 80025c2:	2200      	movs	r2, #0
 80025c4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80025c6:	4b20      	ldr	r3, [pc, #128]	@ (8002648 <_ZL19MX_USART1_UART_Initv+0xb8>)
 80025c8:	2200      	movs	r2, #0
 80025ca:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80025cc:	4b1e      	ldr	r3, [pc, #120]	@ (8002648 <_ZL19MX_USART1_UART_Initv+0xb8>)
 80025ce:	2200      	movs	r2, #0
 80025d0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80025d2:	4b1d      	ldr	r3, [pc, #116]	@ (8002648 <_ZL19MX_USART1_UART_Initv+0xb8>)
 80025d4:	2200      	movs	r2, #0
 80025d6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80025d8:	481b      	ldr	r0, [pc, #108]	@ (8002648 <_ZL19MX_USART1_UART_Initv+0xb8>)
 80025da:	f00b ffcc 	bl	800e576 <HAL_UART_Init>
 80025de:	4603      	mov	r3, r0
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	bf14      	ite	ne
 80025e4:	2301      	movne	r3, #1
 80025e6:	2300      	moveq	r3, #0
 80025e8:	b2db      	uxtb	r3, r3
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d001      	beq.n	80025f2 <_ZL19MX_USART1_UART_Initv+0x62>
  {
    Error_Handler();
 80025ee:	f000 f8b7 	bl	8002760 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80025f2:	2100      	movs	r1, #0
 80025f4:	4814      	ldr	r0, [pc, #80]	@ (8002648 <_ZL19MX_USART1_UART_Initv+0xb8>)
 80025f6:	f00d f85e 	bl	800f6b6 <HAL_UARTEx_SetTxFifoThreshold>
 80025fa:	4603      	mov	r3, r0
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	bf14      	ite	ne
 8002600:	2301      	movne	r3, #1
 8002602:	2300      	moveq	r3, #0
 8002604:	b2db      	uxtb	r3, r3
 8002606:	2b00      	cmp	r3, #0
 8002608:	d001      	beq.n	800260e <_ZL19MX_USART1_UART_Initv+0x7e>
  {
    Error_Handler();
 800260a:	f000 f8a9 	bl	8002760 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800260e:	2100      	movs	r1, #0
 8002610:	480d      	ldr	r0, [pc, #52]	@ (8002648 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8002612:	f00d f88e 	bl	800f732 <HAL_UARTEx_SetRxFifoThreshold>
 8002616:	4603      	mov	r3, r0
 8002618:	2b00      	cmp	r3, #0
 800261a:	bf14      	ite	ne
 800261c:	2301      	movne	r3, #1
 800261e:	2300      	moveq	r3, #0
 8002620:	b2db      	uxtb	r3, r3
 8002622:	2b00      	cmp	r3, #0
 8002624:	d001      	beq.n	800262a <_ZL19MX_USART1_UART_Initv+0x9a>
  {
    Error_Handler();
 8002626:	f000 f89b 	bl	8002760 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800262a:	4807      	ldr	r0, [pc, #28]	@ (8002648 <_ZL19MX_USART1_UART_Initv+0xb8>)
 800262c:	f00d f80a 	bl	800f644 <HAL_UARTEx_DisableFifoMode>
 8002630:	4603      	mov	r3, r0
 8002632:	2b00      	cmp	r3, #0
 8002634:	bf14      	ite	ne
 8002636:	2301      	movne	r3, #1
 8002638:	2300      	moveq	r3, #0
 800263a:	b2db      	uxtb	r3, r3
 800263c:	2b00      	cmp	r3, #0
 800263e:	d001      	beq.n	8002644 <_ZL19MX_USART1_UART_Initv+0xb4>
  {
    Error_Handler();
 8002640:	f000 f88e 	bl	8002760 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002644:	bf00      	nop
 8002646:	bd80      	pop	{r7, pc}
 8002648:	240005f8 	.word	0x240005f8
 800264c:	40011000 	.word	0x40011000

08002650 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b08a      	sub	sp, #40	@ 0x28
 8002654:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002656:	f107 0314 	add.w	r3, r7, #20
 800265a:	2200      	movs	r2, #0
 800265c:	601a      	str	r2, [r3, #0]
 800265e:	605a      	str	r2, [r3, #4]
 8002660:	609a      	str	r2, [r3, #8]
 8002662:	60da      	str	r2, [r3, #12]
 8002664:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002666:	4b26      	ldr	r3, [pc, #152]	@ (8002700 <_ZL12MX_GPIO_Initv+0xb0>)
 8002668:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800266c:	4a24      	ldr	r2, [pc, #144]	@ (8002700 <_ZL12MX_GPIO_Initv+0xb0>)
 800266e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002672:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002676:	4b22      	ldr	r3, [pc, #136]	@ (8002700 <_ZL12MX_GPIO_Initv+0xb0>)
 8002678:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800267c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002680:	613b      	str	r3, [r7, #16]
 8002682:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002684:	4b1e      	ldr	r3, [pc, #120]	@ (8002700 <_ZL12MX_GPIO_Initv+0xb0>)
 8002686:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800268a:	4a1d      	ldr	r2, [pc, #116]	@ (8002700 <_ZL12MX_GPIO_Initv+0xb0>)
 800268c:	f043 0304 	orr.w	r3, r3, #4
 8002690:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002694:	4b1a      	ldr	r3, [pc, #104]	@ (8002700 <_ZL12MX_GPIO_Initv+0xb0>)
 8002696:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800269a:	f003 0304 	and.w	r3, r3, #4
 800269e:	60fb      	str	r3, [r7, #12]
 80026a0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80026a2:	4b17      	ldr	r3, [pc, #92]	@ (8002700 <_ZL12MX_GPIO_Initv+0xb0>)
 80026a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80026a8:	4a15      	ldr	r2, [pc, #84]	@ (8002700 <_ZL12MX_GPIO_Initv+0xb0>)
 80026aa:	f043 0301 	orr.w	r3, r3, #1
 80026ae:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80026b2:	4b13      	ldr	r3, [pc, #76]	@ (8002700 <_ZL12MX_GPIO_Initv+0xb0>)
 80026b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80026b8:	f003 0301 	and.w	r3, r3, #1
 80026bc:	60bb      	str	r3, [r7, #8]
 80026be:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80026c0:	4b0f      	ldr	r3, [pc, #60]	@ (8002700 <_ZL12MX_GPIO_Initv+0xb0>)
 80026c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80026c6:	4a0e      	ldr	r2, [pc, #56]	@ (8002700 <_ZL12MX_GPIO_Initv+0xb0>)
 80026c8:	f043 0308 	orr.w	r3, r3, #8
 80026cc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80026d0:	4b0b      	ldr	r3, [pc, #44]	@ (8002700 <_ZL12MX_GPIO_Initv+0xb0>)
 80026d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80026d6:	f003 0308 	and.w	r3, r3, #8
 80026da:	607b      	str	r3, [r7, #4]
 80026dc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80026de:	2310      	movs	r3, #16
 80026e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80026e2:	2300      	movs	r3, #0
 80026e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026e6:	2300      	movs	r3, #0
 80026e8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80026ea:	f107 0314 	add.w	r3, r7, #20
 80026ee:	4619      	mov	r1, r3
 80026f0:	4804      	ldr	r0, [pc, #16]	@ (8002704 <_ZL12MX_GPIO_Initv+0xb4>)
 80026f2:	f006 f80d 	bl	8008710 <HAL_GPIO_Init>

}
 80026f6:	bf00      	nop
 80026f8:	3728      	adds	r7, #40	@ 0x28
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bd80      	pop	{r7, pc}
 80026fe:	bf00      	nop
 8002700:	58024400 	.word	0x58024400
 8002704:	58020800 	.word	0x58020800

08002708 <_ZL10MPU_Configv>:
/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

void MPU_Config(void)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b084      	sub	sp, #16
 800270c:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 800270e:	463b      	mov	r3, r7
 8002710:	2200      	movs	r2, #0
 8002712:	601a      	str	r2, [r3, #0]
 8002714:	605a      	str	r2, [r3, #4]
 8002716:	609a      	str	r2, [r3, #8]
 8002718:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 800271a:	f003 fb7f 	bl	8005e1c <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800271e:	2301      	movs	r3, #1
 8002720:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8002722:	2300      	movs	r3, #0
 8002724:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8002726:	2300      	movs	r3, #0
 8002728:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 800272a:	231f      	movs	r3, #31
 800272c:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 800272e:	2387      	movs	r3, #135	@ 0x87
 8002730:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8002732:	2300      	movs	r3, #0
 8002734:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8002736:	2300      	movs	r3, #0
 8002738:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 800273a:	2301      	movs	r3, #1
 800273c:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 800273e:	2301      	movs	r3, #1
 8002740:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8002742:	2300      	movs	r3, #0
 8002744:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8002746:	2300      	movs	r3, #0
 8002748:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800274a:	463b      	mov	r3, r7
 800274c:	4618      	mov	r0, r3
 800274e:	f003 fb9d 	bl	8005e8c <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8002752:	2004      	movs	r0, #4
 8002754:	f003 fb7a 	bl	8005e4c <HAL_MPU_Enable>

}
 8002758:	bf00      	nop
 800275a:	3710      	adds	r7, #16
 800275c:	46bd      	mov	sp, r7
 800275e:	bd80      	pop	{r7, pc}

08002760 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

	printf("error\n\r");
 8002764:	4803      	ldr	r0, [pc, #12]	@ (8002774 <Error_Handler+0x14>)
 8002766:	f010 fec7 	bl	80134f8 <iprintf>
  __ASM volatile ("cpsid i" : : : "memory");
 800276a:	b672      	cpsid	i
}
 800276c:	bf00      	nop

  __disable_irq();
  while (1)
 800276e:	bf00      	nop
 8002770:	e7fd      	b.n	800276e <Error_Handler+0xe>
 8002772:	bf00      	nop
 8002774:	0801470c 	.word	0x0801470c

08002778 <_ZNK19ArduinoJson6101_1108not_nullIPKcE3getEv>:
 public:
  explicit not_null(T ptr) : _ptr(ptr) {
    ARDUINOJSON_ASSERT(ptr != NULL);
  }

  T get() const {
 8002778:	b480      	push	{r7}
 800277a:	b083      	sub	sp, #12
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
    ARDUINOJSON_ASSERT(_ptr != NULL);
    return _ptr;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
  }
 8002784:	4618      	mov	r0, r3
 8002786:	370c      	adds	r7, #12
 8002788:	46bd      	mov	sp, r7
 800278a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278e:	4770      	bx	lr

08002790 <_ZN19ArduinoJson6101_11010MemoryPool10allocRightINS_11VariantSlotEEEPT_v>:
  T* allocRight() {
 8002790:	b580      	push	{r7, lr}
 8002792:	b082      	sub	sp, #8
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<T*>(allocRight(sizeof(T)));
 8002798:	2110      	movs	r1, #16
 800279a:	6878      	ldr	r0, [r7, #4]
 800279c:	f7fe fb0f 	bl	8000dbe <_ZN19ArduinoJson6101_11010MemoryPool10allocRightEj>
 80027a0:	4603      	mov	r3, r0
  }
 80027a2:	4618      	mov	r0, r3
 80027a4:	3708      	adds	r7, #8
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bd80      	pop	{r7, pc}

080027aa <_ZN19ArduinoJson6101_11013make_not_nullIPKcEENS_8not_nullIT_EES4_>:
 private:
  T _ptr;
};

template <typename T>
not_null<T> make_not_null(T ptr) {
 80027aa:	b580      	push	{r7, lr}
 80027ac:	b084      	sub	sp, #16
 80027ae:	af00      	add	r7, sp, #0
 80027b0:	6078      	str	r0, [r7, #4]
  ARDUINOJSON_ASSERT(ptr != NULL);
  return not_null<T>(ptr);
 80027b2:	f107 030c 	add.w	r3, r7, #12
 80027b6:	6879      	ldr	r1, [r7, #4]
 80027b8:	4618      	mov	r0, r3
 80027ba:	f000 f891 	bl	80028e0 <_ZN19ArduinoJson6101_1108not_nullIPKcEC1ES2_>
 80027be:	68fb      	ldr	r3, [r7, #12]
}
 80027c0:	4618      	mov	r0, r3
 80027c2:	3710      	adds	r7, #16
 80027c4:	46bd      	mov	sp, r7
 80027c6:	bd80      	pop	{r7, pc}

080027c8 <_ZN19ArduinoJson6101_11014VariantRefBaseINS_11VariantDataEEC1EPS1_>:
  VariantRefBase(TData *data) : _data(data) {}
 80027c8:	b480      	push	{r7}
 80027ca:	b083      	sub	sp, #12
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
 80027d0:	6039      	str	r1, [r7, #0]
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	683a      	ldr	r2, [r7, #0]
 80027d6:	601a      	str	r2, [r3, #0]
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	4618      	mov	r0, r3
 80027dc:	370c      	adds	r7, #12
 80027de:	46bd      	mov	sp, r7
 80027e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e4:	4770      	bx	lr

080027e6 <_ZN19ArduinoJson6101_11012ArrayRefBaseINS_14CollectionDataEEC1EPS1_>:
  ArrayRefBase(TData* data) : _data(data) {}
 80027e6:	b480      	push	{r7}
 80027e8:	b083      	sub	sp, #12
 80027ea:	af00      	add	r7, sp, #0
 80027ec:	6078      	str	r0, [r7, #4]
 80027ee:	6039      	str	r1, [r7, #0]
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	683a      	ldr	r2, [r7, #0]
 80027f4:	601a      	str	r2, [r3, #0]
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	4618      	mov	r0, r3
 80027fa:	370c      	adds	r7, #12
 80027fc:	46bd      	mov	sp, r7
 80027fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002802:	4770      	bx	lr

08002804 <_ZN19ArduinoJson6101_11013ObjectRefBaseINS_14CollectionDataEEC1EPS1_>:
  ObjectRefBase(TData* data) : _data(data) {}
 8002804:	b480      	push	{r7}
 8002806:	b083      	sub	sp, #12
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
 800280c:	6039      	str	r1, [r7, #0]
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	683a      	ldr	r2, [r7, #0]
 8002812:	601a      	str	r2, [r3, #0]
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	4618      	mov	r0, r3
 8002818:	370c      	adds	r7, #12
 800281a:	46bd      	mov	sp, r7
 800281c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002820:	4770      	bx	lr

08002822 <_ZNK19ArduinoJson6101_11014CollectionData3getINS_21ConstRamStringAdapterEEEPNS_11VariantDataET_>:
  }
  return 0;
}

template <typename TAdaptedString>
inline VariantData* CollectionData::get(TAdaptedString key) const {
 8002822:	b580      	push	{r7, lr}
 8002824:	b084      	sub	sp, #16
 8002826:	af00      	add	r7, sp, #0
 8002828:	6078      	str	r0, [r7, #4]
 800282a:	6039      	str	r1, [r7, #0]
  VariantSlot* slot = getSlot(key);
 800282c:	6839      	ldr	r1, [r7, #0]
 800282e:	6878      	ldr	r0, [r7, #4]
 8002830:	f000 f865 	bl	80028fe <_ZNK19ArduinoJson6101_11014CollectionData7getSlotINS_21ConstRamStringAdapterEEEPNS_11VariantSlotET_>
 8002834:	60f8      	str	r0, [r7, #12]
  return slot ? slot->data() : 0;
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	2b00      	cmp	r3, #0
 800283a:	d004      	beq.n	8002846 <_ZNK19ArduinoJson6101_11014CollectionData3getINS_21ConstRamStringAdapterEEEPNS_11VariantDataET_+0x24>
 800283c:	68f8      	ldr	r0, [r7, #12]
 800283e:	f7fe f9a7 	bl	8000b90 <_ZN19ArduinoJson6101_11011VariantSlot4dataEv>
 8002842:	4603      	mov	r3, r0
 8002844:	e000      	b.n	8002848 <_ZNK19ArduinoJson6101_11014CollectionData3getINS_21ConstRamStringAdapterEEEPNS_11VariantDataET_+0x26>
 8002846:	2300      	movs	r3, #0
}
 8002848:	4618      	mov	r0, r3
 800284a:	3710      	adds	r7, #16
 800284c:	46bd      	mov	sp, r7
 800284e:	bd80      	pop	{r7, pc}

08002850 <_ZN19ArduinoJson6101_11017BasicJsonDocumentINS_16DefaultAllocatorEEC1EjS1_>:
};

template <typename TAllocator>
class BasicJsonDocument : AllocatorOwner<TAllocator>, public JsonDocument {
 public:
  explicit BasicJsonDocument(size_t capa, TAllocator allocator = TAllocator())
 8002850:	b590      	push	{r4, r7, lr}
 8002852:	b08b      	sub	sp, #44	@ 0x2c
 8002854:	af02      	add	r7, sp, #8
 8002856:	60f8      	str	r0, [r7, #12]
 8002858:	60b9      	str	r1, [r7, #8]
 800285a:	713a      	strb	r2, [r7, #4]
      : AllocatorOwner<TAllocator>(allocator), JsonDocument(allocPool(capa)) {}
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	4621      	mov	r1, r4
 8002860:	4618      	mov	r0, r3
 8002862:	f000 f888 	bl	8002976 <_ZN19ArduinoJson6101_11014AllocatorOwnerINS_16DefaultAllocatorEEC1ES1_>
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	f103 0408 	add.w	r4, r3, #8
 800286c:	f107 0310 	add.w	r3, r7, #16
 8002870:	68ba      	ldr	r2, [r7, #8]
 8002872:	68f9      	ldr	r1, [r7, #12]
 8002874:	4618      	mov	r0, r3
 8002876:	f000 f865 	bl	8002944 <_ZN19ArduinoJson6101_11017BasicJsonDocumentINS_16DefaultAllocatorEE9allocPoolEj>
 800287a:	69fb      	ldr	r3, [r7, #28]
 800287c:	9300      	str	r3, [sp, #0]
 800287e:	f107 0310 	add.w	r3, r7, #16
 8002882:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002884:	4620      	mov	r0, r4
 8002886:	f7fe fcab 	bl	80011e0 <_ZN19ArduinoJson6101_11012JsonDocumentC1ENS_10MemoryPoolE>
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	4618      	mov	r0, r3
 800288e:	3724      	adds	r7, #36	@ 0x24
 8002890:	46bd      	mov	sp, r7
 8002892:	bd90      	pop	{r4, r7, pc}

08002894 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_S5_>:
   *  @return  New string with @a __lhs followed by @a __rhs.
   */
  template<typename _CharT, typename _Traits, typename _Alloc>
    _GLIBCXX20_CONSTEXPR
    inline basic_string<_CharT, _Traits, _Alloc>
    operator+(const basic_string<_CharT, _Traits, _Alloc>& __lhs, _CharT __rhs)
 8002894:	b580      	push	{r7, lr}
 8002896:	b084      	sub	sp, #16
 8002898:	af00      	add	r7, sp, #0
 800289a:	60f8      	str	r0, [r7, #12]
 800289c:	60b9      	str	r1, [r7, #8]
 800289e:	4613      	mov	r3, r2
 80028a0:	71fb      	strb	r3, [r7, #7]
    {
      typedef basic_string<_CharT, _Traits, _Alloc>	__string_type;
      typedef typename __string_type::size_type		__size_type;
      __string_type __str(__lhs);
 80028a2:	68b9      	ldr	r1, [r7, #8]
 80028a4:	68f8      	ldr	r0, [r7, #12]
 80028a6:	f010 fc2e 	bl	8013106 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
      __str.append(__size_type(1), __rhs);
 80028aa:	79fb      	ldrb	r3, [r7, #7]
 80028ac:	461a      	mov	r2, r3
 80028ae:	2101      	movs	r1, #1
 80028b0:	68f8      	ldr	r0, [r7, #12]
 80028b2:	f010 fc01 	bl	80130b8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEjc>
      return __str;
 80028b6:	bf00      	nop
    }
 80028b8:	68f8      	ldr	r0, [r7, #12]
 80028ba:	3710      	adds	r7, #16
 80028bc:	46bd      	mov	sp, r7
 80028be:	bd80      	pop	{r7, pc}

080028c0 <_ZN19ArduinoJson6101_11015deserializeJsonIKcEENS_20DeserializationErrorERNS_12JsonDocumentEPT_NS_12NestingLimitE>:
    NestingLimit nestingLimit = NestingLimit()) {
  return deserialize<JsonDeserializer>(doc, input, nestingLimit);
}

template <typename TInput>
DeserializationError deserializeJson(
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b084      	sub	sp, #16
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	60f8      	str	r0, [r7, #12]
 80028c8:	60b9      	str	r1, [r7, #8]
 80028ca:	713a      	strb	r2, [r7, #4]
    JsonDocument &doc, TInput *input,
    NestingLimit nestingLimit = NestingLimit()) {
  return deserialize<JsonDeserializer>(doc, input, nestingLimit);
 80028cc:	793a      	ldrb	r2, [r7, #4]
 80028ce:	68b9      	ldr	r1, [r7, #8]
 80028d0:	68f8      	ldr	r0, [r7, #12]
 80028d2:	f000 f85c 	bl	800298e <_ZN19ArduinoJson6101_11011deserializeINS_16JsonDeserializerEKcEENS_20DeserializationErrorERNS_12JsonDocumentEPT0_NS_12NestingLimitE>
 80028d6:	4603      	mov	r3, r0
}
 80028d8:	4618      	mov	r0, r3
 80028da:	3710      	adds	r7, #16
 80028dc:	46bd      	mov	sp, r7
 80028de:	bd80      	pop	{r7, pc}

080028e0 <_ZN19ArduinoJson6101_1108not_nullIPKcEC1ES2_>:
  explicit not_null(T ptr) : _ptr(ptr) {
 80028e0:	b480      	push	{r7}
 80028e2:	b083      	sub	sp, #12
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
 80028e8:	6039      	str	r1, [r7, #0]
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	683a      	ldr	r2, [r7, #0]
 80028ee:	601a      	str	r2, [r3, #0]
  }
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	4618      	mov	r0, r3
 80028f4:	370c      	adds	r7, #12
 80028f6:	46bd      	mov	sp, r7
 80028f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fc:	4770      	bx	lr

080028fe <_ZNK19ArduinoJson6101_11014CollectionData7getSlotINS_21ConstRamStringAdapterEEEPNS_11VariantSlotET_>:
inline VariantSlot* CollectionData::getSlot(TAdaptedString key) const {
 80028fe:	b580      	push	{r7, lr}
 8002900:	b084      	sub	sp, #16
 8002902:	af00      	add	r7, sp, #0
 8002904:	6078      	str	r0, [r7, #4]
 8002906:	6039      	str	r1, [r7, #0]
  VariantSlot* slot = _head;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	60fb      	str	r3, [r7, #12]
  while (slot) {
 800290e:	e00f      	b.n	8002930 <_ZNK19ArduinoJson6101_11014CollectionData7getSlotINS_21ConstRamStringAdapterEEEPNS_11VariantSlotET_+0x32>
    if (key.equals(slot->key())) break;
 8002910:	68f8      	ldr	r0, [r7, #12]
 8002912:	f7fe f988 	bl	8000c26 <_ZNK19ArduinoJson6101_11011VariantSlot3keyEv>
 8002916:	4602      	mov	r2, r0
 8002918:	463b      	mov	r3, r7
 800291a:	4611      	mov	r1, r2
 800291c:	4618      	mov	r0, r3
 800291e:	f7fe fa85 	bl	8000e2c <_ZNK19ArduinoJson6101_11021ConstRamStringAdapter6equalsEPKc>
 8002922:	4603      	mov	r3, r0
 8002924:	2b00      	cmp	r3, #0
 8002926:	d107      	bne.n	8002938 <_ZNK19ArduinoJson6101_11014CollectionData7getSlotINS_21ConstRamStringAdapterEEEPNS_11VariantSlotET_+0x3a>
    slot = slot->next();
 8002928:	68f8      	ldr	r0, [r7, #12]
 800292a:	f7fe f93c 	bl	8000ba6 <_ZN19ArduinoJson6101_11011VariantSlot4nextEv>
 800292e:	60f8      	str	r0, [r7, #12]
  while (slot) {
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	2b00      	cmp	r3, #0
 8002934:	d1ec      	bne.n	8002910 <_ZNK19ArduinoJson6101_11014CollectionData7getSlotINS_21ConstRamStringAdapterEEEPNS_11VariantSlotET_+0x12>
 8002936:	e000      	b.n	800293a <_ZNK19ArduinoJson6101_11014CollectionData7getSlotINS_21ConstRamStringAdapterEEEPNS_11VariantSlotET_+0x3c>
    if (key.equals(slot->key())) break;
 8002938:	bf00      	nop
  return slot;
 800293a:	68fb      	ldr	r3, [r7, #12]
}
 800293c:	4618      	mov	r0, r3
 800293e:	3710      	adds	r7, #16
 8002940:	46bd      	mov	sp, r7
 8002942:	bd80      	pop	{r7, pc}

08002944 <_ZN19ArduinoJson6101_11017BasicJsonDocumentINS_16DefaultAllocatorEE9allocPoolEj>:
    set(src);
    return *this;
  }

 private:
  MemoryPool allocPool(size_t requiredSize) {
 8002944:	b580      	push	{r7, lr}
 8002946:	b086      	sub	sp, #24
 8002948:	af00      	add	r7, sp, #0
 800294a:	60f8      	str	r0, [r7, #12]
 800294c:	60b9      	str	r1, [r7, #8]
 800294e:	607a      	str	r2, [r7, #4]
    size_t capa = addPadding(requiredSize);
 8002950:	6878      	ldr	r0, [r7, #4]
 8002952:	f7fe f987 	bl	8000c64 <_ZN19ArduinoJson6101_11010addPaddingEj>
 8002956:	6178      	str	r0, [r7, #20]
    return MemoryPool(reinterpret_cast<char*>(this->allocate(capa)), capa);
 8002958:	68bb      	ldr	r3, [r7, #8]
 800295a:	6979      	ldr	r1, [r7, #20]
 800295c:	4618      	mov	r0, r3
 800295e:	f000 f874 	bl	8002a4a <_ZN19ArduinoJson6101_11014AllocatorOwnerINS_16DefaultAllocatorEE8allocateEj>
 8002962:	4603      	mov	r3, r0
 8002964:	697a      	ldr	r2, [r7, #20]
 8002966:	4619      	mov	r1, r3
 8002968:	68f8      	ldr	r0, [r7, #12]
 800296a:	f7fe f98b 	bl	8000c84 <_ZN19ArduinoJson6101_11010MemoryPoolC1EPcj>
  }
 800296e:	68f8      	ldr	r0, [r7, #12]
 8002970:	3718      	adds	r7, #24
 8002972:	46bd      	mov	sp, r7
 8002974:	bd80      	pop	{r7, pc}

08002976 <_ZN19ArduinoJson6101_11014AllocatorOwnerINS_16DefaultAllocatorEEC1ES1_>:
  AllocatorOwner(TAllocator allocator) : _allocator(allocator) {}
 8002976:	b480      	push	{r7}
 8002978:	b083      	sub	sp, #12
 800297a:	af00      	add	r7, sp, #0
 800297c:	6078      	str	r0, [r7, #4]
 800297e:	7039      	strb	r1, [r7, #0]
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	4618      	mov	r0, r3
 8002984:	370c      	adds	r7, #12
 8002986:	46bd      	mov	sp, r7
 8002988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298c:	4770      	bx	lr

0800298e <_ZN19ArduinoJson6101_11011deserializeINS_16JsonDeserializerEKcEENS_20DeserializationErrorERNS_12JsonDocumentEPT0_NS_12NestingLimitE>:
//
// deserialize(JsonDocument&, char*);
// deserialize(JsonDocument&, const char*);
// deserialize(JsonDocument&, const __FlashStringHelper*);
template <template <typename, typename> class TDeserializer, typename TChar>
DeserializationError deserialize(JsonDocument &doc, TChar *input,
 800298e:	b5b0      	push	{r4, r5, r7, lr}
 8002990:	b08a      	sub	sp, #40	@ 0x28
 8002992:	af02      	add	r7, sp, #8
 8002994:	60f8      	str	r0, [r7, #12]
 8002996:	60b9      	str	r1, [r7, #8]
 8002998:	713a      	strb	r2, [r7, #4]
                                 NestingLimit nestingLimit) {
  doc.clear();
 800299a:	68f8      	ldr	r0, [r7, #12]
 800299c:	f7fe fbf8 	bl	8001190 <_ZN19ArduinoJson6101_11012JsonDocument5clearEv>
  return makeDeserializer<TDeserializer>(
 80029a0:	68f8      	ldr	r0, [r7, #12]
 80029a2:	f7fe fc06 	bl	80011b2 <_ZN19ArduinoJson6101_11012JsonDocument10memoryPoolEv>
 80029a6:	4604      	mov	r4, r0
 80029a8:	68b8      	ldr	r0, [r7, #8]
 80029aa:	f000 f85d 	bl	8002a68 <_ZN19ArduinoJson6101_11010makeReaderIKcEENS_23UnsafeCharPointerReaderEPT_>
 80029ae:	4605      	mov	r5, r0
 80029b0:	68f8      	ldr	r0, [r7, #12]
 80029b2:	f7fe fbfe 	bl	80011b2 <_ZN19ArduinoJson6101_11012JsonDocument10memoryPoolEv>
 80029b6:	4603      	mov	r3, r0
 80029b8:	68b9      	ldr	r1, [r7, #8]
 80029ba:	4618      	mov	r0, r3
 80029bc:	f000 f863 	bl	8002a86 <_ZN19ArduinoJson6101_11017makeStringStorageIKcEENS_13StringStorageIPT_vE4typeERNS_10MemoryPoolES4_>
 80029c0:	4602      	mov	r2, r0
 80029c2:	793b      	ldrb	r3, [r7, #4]
 80029c4:	f107 0010 	add.w	r0, r7, #16
 80029c8:	9300      	str	r3, [sp, #0]
 80029ca:	4613      	mov	r3, r2
 80029cc:	462a      	mov	r2, r5
 80029ce:	4621      	mov	r1, r4
 80029d0:	f000 f868 	bl	8002aa4 <_ZN19ArduinoJson6101_11016makeDeserializerINS_16JsonDeserializerENS_23UnsafeCharPointerReaderENS_12StringCopierEEET_IT0_T1_ERNS_10MemoryPoolES5_S6_h>
             doc.memoryPool(), makeReader(input),
             makeStringStorage(doc.memoryPool(), input), nestingLimit.value)
      .parse(doc.data());
 80029d4:	68f8      	ldr	r0, [r7, #12]
 80029d6:	f7fe fbf7 	bl	80011c8 <_ZN19ArduinoJson6101_11012JsonDocument4dataEv>
 80029da:	4602      	mov	r2, r0
 80029dc:	f107 0310 	add.w	r3, r7, #16
 80029e0:	4611      	mov	r1, r2
 80029e2:	4618      	mov	r0, r3
 80029e4:	f000 f871 	bl	8002aca <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE5parseERNS_11VariantDataE>
 80029e8:	4603      	mov	r3, r0
}
 80029ea:	4618      	mov	r0, r3
 80029ec:	3720      	adds	r7, #32
 80029ee:	46bd      	mov	sp, r7
 80029f0:	bdb0      	pop	{r4, r5, r7, pc}

080029f2 <_ZNK19ArduinoJson6101_11012VariantCastsINS_11MemberProxyIRNS_12JsonDocumentEPKcEEE4implEv>:
  }

 private:
  const TImpl *impl() const {
 80029f2:	b480      	push	{r7}
 80029f4:	b083      	sub	sp, #12
 80029f6:	af00      	add	r7, sp, #0
 80029f8:	6078      	str	r0, [r7, #4]
    return static_cast<const TImpl *>(this);
 80029fa:	687b      	ldr	r3, [r7, #4]
  }
 80029fc:	4618      	mov	r0, r3
 80029fe:	370c      	adds	r7, #12
 8002a00:	46bd      	mov	sp, r7
 8002a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a06:	4770      	bx	lr

08002a08 <_ZNK19ArduinoJson6101_11012VariantCastsINS_10VariantRefEE4implEv>:
  const TImpl *impl() const {
 8002a08:	b480      	push	{r7}
 8002a0a:	b083      	sub	sp, #12
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
    return static_cast<const TImpl *>(this);
 8002a10:	687b      	ldr	r3, [r7, #4]
  }
 8002a12:	4618      	mov	r0, r3
 8002a14:	370c      	adds	r7, #12
 8002a16:	46bd      	mov	sp, r7
 8002a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1c:	4770      	bx	lr

08002a1e <_ZNK19ArduinoJson6101_11015ObjectShortcutsINS_9ObjectRefEE4implEv>:
  // createNestedObject(const __FlashStringHelper*) const
  template <typename TChar>
  ObjectRef createNestedObject(TChar *key) const;

 private:
  const TObject *impl() const {
 8002a1e:	b480      	push	{r7}
 8002a20:	b083      	sub	sp, #12
 8002a22:	af00      	add	r7, sp, #0
 8002a24:	6078      	str	r0, [r7, #4]
    return static_cast<const TObject *>(this);
 8002a26:	687b      	ldr	r3, [r7, #4]
  }
 8002a28:	4618      	mov	r0, r3
 8002a2a:	370c      	adds	r7, #12
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a32:	4770      	bx	lr

08002a34 <_ZNK19ArduinoJson6101_11012VariantCastsINS_11MemberProxyIRKNS_9ObjectRefEPKcEEE4implEv>:
  const TImpl *impl() const {
 8002a34:	b480      	push	{r7}
 8002a36:	b083      	sub	sp, #12
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
    return static_cast<const TImpl *>(this);
 8002a3c:	687b      	ldr	r3, [r7, #4]
  }
 8002a3e:	4618      	mov	r0, r3
 8002a40:	370c      	adds	r7, #12
 8002a42:	46bd      	mov	sp, r7
 8002a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a48:	4770      	bx	lr

08002a4a <_ZN19ArduinoJson6101_11014AllocatorOwnerINS_16DefaultAllocatorEE8allocateEj>:
  void* allocate(size_t n) {
 8002a4a:	b580      	push	{r7, lr}
 8002a4c:	b082      	sub	sp, #8
 8002a4e:	af00      	add	r7, sp, #0
 8002a50:	6078      	str	r0, [r7, #4]
 8002a52:	6039      	str	r1, [r7, #0]
    return _allocator.allocate(n);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6839      	ldr	r1, [r7, #0]
 8002a58:	4618      	mov	r0, r3
 8002a5a:	f7fe fbde 	bl	800121a <_ZN19ArduinoJson6101_11016DefaultAllocator8allocateEj>
 8002a5e:	4603      	mov	r3, r0
  }
 8002a60:	4618      	mov	r0, r3
 8002a62:	3708      	adds	r7, #8
 8002a64:	46bd      	mov	sp, r7
 8002a66:	bd80      	pop	{r7, pc}

08002a68 <_ZN19ArduinoJson6101_11010makeReaderIKcEENS_23UnsafeCharPointerReaderEPT_>:
    return _ptr == _end;
  }
};

template <typename TChar>
inline UnsafeCharPointerReader makeReader(TChar* input) {
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b084      	sub	sp, #16
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
  return UnsafeCharPointerReader(reinterpret_cast<const char*>(input));
 8002a70:	f107 030c 	add.w	r3, r7, #12
 8002a74:	6879      	ldr	r1, [r7, #4]
 8002a76:	4618      	mov	r0, r3
 8002a78:	f7fe fcda 	bl	8001430 <_ZN19ArduinoJson6101_11023UnsafeCharPointerReaderC1EPKc>
 8002a7c:	68fb      	ldr	r3, [r7, #12]
}
 8002a7e:	4618      	mov	r0, r3
 8002a80:	3710      	adds	r7, #16
 8002a82:	46bd      	mov	sp, r7
 8002a84:	bd80      	pop	{r7, pc}

08002a86 <_ZN19ArduinoJson6101_11017makeStringStorageIKcEENS_13StringStorageIPT_vE4typeERNS_10MemoryPoolES4_>:
                                                       TInput& input) {
  return StringStorage<TInput>::create(pool, input);
}

template <typename TChar>
typename StringStorage<TChar*>::type makeStringStorage(MemoryPool& pool,
 8002a86:	b580      	push	{r7, lr}
 8002a88:	b082      	sub	sp, #8
 8002a8a:	af00      	add	r7, sp, #0
 8002a8c:	6078      	str	r0, [r7, #4]
 8002a8e:	6039      	str	r1, [r7, #0]
                                                       TChar* input) {
  return StringStorage<TChar*>::create(pool, input);
 8002a90:	463b      	mov	r3, r7
 8002a92:	4619      	mov	r1, r3
 8002a94:	6878      	ldr	r0, [r7, #4]
 8002a96:	f000 f863 	bl	8002b60 <_ZN19ArduinoJson6101_11013StringStorageIPKcvE6createERNS_10MemoryPoolERS2_>
 8002a9a:	4603      	mov	r3, r0
}
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	3708      	adds	r7, #8
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	bd80      	pop	{r7, pc}

08002aa4 <_ZN19ArduinoJson6101_11016makeDeserializerINS_16JsonDeserializerENS_23UnsafeCharPointerReaderENS_12StringCopierEEET_IT0_T1_ERNS_10MemoryPoolES5_S6_h>:
TDeserializer<TReader, TWriter> makeDeserializer(MemoryPool &pool,
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b086      	sub	sp, #24
 8002aa8:	af02      	add	r7, sp, #8
 8002aaa:	60f8      	str	r0, [r7, #12]
 8002aac:	60b9      	str	r1, [r7, #8]
 8002aae:	607a      	str	r2, [r7, #4]
 8002ab0:	603b      	str	r3, [r7, #0]
  return TDeserializer<TReader, TWriter>(pool, reader, writer, nestingLimit);
 8002ab2:	7e3b      	ldrb	r3, [r7, #24]
 8002ab4:	9300      	str	r3, [sp, #0]
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	687a      	ldr	r2, [r7, #4]
 8002aba:	68b9      	ldr	r1, [r7, #8]
 8002abc:	68f8      	ldr	r0, [r7, #12]
 8002abe:	f000 f85f 	bl	8002b80 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEEC1ERNS_10MemoryPoolES1_S2_h>
}
 8002ac2:	68f8      	ldr	r0, [r7, #12]
 8002ac4:	3710      	adds	r7, #16
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	bd80      	pop	{r7, pc}

08002aca <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE5parseERNS_11VariantDataE>:
  DeserializationError parse(VariantData &variant) {
 8002aca:	b580      	push	{r7, lr}
 8002acc:	b086      	sub	sp, #24
 8002ace:	af00      	add	r7, sp, #0
 8002ad0:	6078      	str	r0, [r7, #4]
 8002ad2:	6039      	str	r1, [r7, #0]
    DeserializationError err = skipSpacesAndComments();
 8002ad4:	6878      	ldr	r0, [r7, #4]
 8002ad6:	f000 f871 	bl	8002bbc <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv>
 8002ada:	4603      	mov	r3, r0
 8002adc:	733b      	strb	r3, [r7, #12]
    if (err) return err;
 8002ade:	f107 0310 	add.w	r3, r7, #16
 8002ae2:	f107 020c 	add.w	r2, r7, #12
 8002ae6:	4611      	mov	r1, r2
 8002ae8:	4618      	mov	r0, r3
 8002aea:	f7fe fced 	bl	80014c8 <_ZNK19ArduinoJson6101_11020DeserializationErrorcvMS0_KFvvEEv>
 8002aee:	693b      	ldr	r3, [r7, #16]
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d106      	bne.n	8002b02 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE5parseERNS_11VariantDataE+0x38>
 8002af4:	697b      	ldr	r3, [r7, #20]
 8002af6:	f003 0301 	and.w	r3, r3, #1
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d101      	bne.n	8002b02 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE5parseERNS_11VariantDataE+0x38>
 8002afe:	2301      	movs	r3, #1
 8002b00:	e000      	b.n	8002b04 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE5parseERNS_11VariantDataE+0x3a>
 8002b02:	2300      	movs	r3, #0
 8002b04:	f083 0301 	eor.w	r3, r3, #1
 8002b08:	b2db      	uxtb	r3, r3
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d001      	beq.n	8002b12 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE5parseERNS_11VariantDataE+0x48>
 8002b0e:	7b3b      	ldrb	r3, [r7, #12]
 8002b10:	e022      	b.n	8002b58 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE5parseERNS_11VariantDataE+0x8e>
    switch (current()) {
 8002b12:	6878      	ldr	r0, [r7, #4]
 8002b14:	f000 f932 	bl	8002d7c <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>
 8002b18:	4603      	mov	r3, r0
 8002b1a:	2b5b      	cmp	r3, #91	@ 0x5b
 8002b1c:	d002      	beq.n	8002b24 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE5parseERNS_11VariantDataE+0x5a>
 8002b1e:	2b7b      	cmp	r3, #123	@ 0x7b
 8002b20:	d00a      	beq.n	8002b38 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE5parseERNS_11VariantDataE+0x6e>
 8002b22:	e013      	b.n	8002b4c <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE5parseERNS_11VariantDataE+0x82>
        return parseArray(variant.toArray());
 8002b24:	6838      	ldr	r0, [r7, #0]
 8002b26:	f7fe fa6a 	bl	8000ffe <_ZN19ArduinoJson6101_11011VariantData7toArrayEv>
 8002b2a:	4603      	mov	r3, r0
 8002b2c:	4619      	mov	r1, r3
 8002b2e:	6878      	ldr	r0, [r7, #4]
 8002b30:	f000 f94d 	bl	8002dce <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE>
 8002b34:	4603      	mov	r3, r0
 8002b36:	e00f      	b.n	8002b58 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE5parseERNS_11VariantDataE+0x8e>
        return parseObject(variant.toObject());
 8002b38:	6838      	ldr	r0, [r7, #0]
 8002b3a:	f7fe fa71 	bl	8001020 <_ZN19ArduinoJson6101_11011VariantData8toObjectEv>
 8002b3e:	4603      	mov	r3, r0
 8002b40:	4619      	mov	r1, r3
 8002b42:	6878      	ldr	r0, [r7, #4]
 8002b44:	f000 fa6a 	bl	800301c <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE>
 8002b48:	4603      	mov	r3, r0
 8002b4a:	e005      	b.n	8002b58 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE5parseERNS_11VariantDataE+0x8e>
        return parseValue(variant);
 8002b4c:	6839      	ldr	r1, [r7, #0]
 8002b4e:	6878      	ldr	r0, [r7, #4]
 8002b50:	f000 fc27 	bl	80033a2 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseValueERNS_11VariantDataE>
 8002b54:	4603      	mov	r3, r0
 8002b56:	bf00      	nop
  }
 8002b58:	4618      	mov	r0, r3
 8002b5a:	3718      	adds	r7, #24
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	bd80      	pop	{r7, pc}

08002b60 <_ZN19ArduinoJson6101_11013StringStorageIPKcvE6createERNS_10MemoryPoolERS2_>:
  static type create(MemoryPool& pool, TInput&) {
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b084      	sub	sp, #16
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
 8002b68:	6039      	str	r1, [r7, #0]
    return type(&pool);
 8002b6a:	f107 030c 	add.w	r3, r7, #12
 8002b6e:	6879      	ldr	r1, [r7, #4]
 8002b70:	4618      	mov	r0, r3
 8002b72:	f7fe fc3e 	bl	80013f2 <_ZN19ArduinoJson6101_11012StringCopierC1EPNS_10MemoryPoolE>
 8002b76:	68fb      	ldr	r3, [r7, #12]
  }
 8002b78:	4618      	mov	r0, r3
 8002b7a:	3710      	adds	r7, #16
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	bd80      	pop	{r7, pc}

08002b80 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEEC1ERNS_10MemoryPoolES1_S2_h>:
  JsonDeserializer(MemoryPool &pool, TReader reader,
 8002b80:	b480      	push	{r7}
 8002b82:	b085      	sub	sp, #20
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	60f8      	str	r0, [r7, #12]
 8002b88:	60b9      	str	r1, [r7, #8]
 8002b8a:	607a      	str	r2, [r7, #4]
 8002b8c:	603b      	str	r3, [r7, #0]
      : _pool(&pool),
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	68ba      	ldr	r2, [r7, #8]
 8002b92:	601a      	str	r2, [r3, #0]
        _reader(reader),
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	687a      	ldr	r2, [r7, #4]
 8002b98:	605a      	str	r2, [r3, #4]
        _stringStorage(stringStorage),
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	683a      	ldr	r2, [r7, #0]
 8002b9e:	609a      	str	r2, [r3, #8]
        _nestingLimit(nestingLimit),
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	7e3a      	ldrb	r2, [r7, #24]
 8002ba4:	731a      	strb	r2, [r3, #12]
        _loaded(false) {}
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	2200      	movs	r2, #0
 8002baa:	739a      	strb	r2, [r3, #14]
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	4618      	mov	r0, r3
 8002bb0:	3714      	adds	r7, #20
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb8:	4770      	bx	lr
	...

08002bbc <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv>:
  DeserializationError skipSpacesAndComments() {
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b088      	sub	sp, #32
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
      switch (current()) {
 8002bc4:	6878      	ldr	r0, [r7, #4]
 8002bc6:	f000 f8d9 	bl	8002d7c <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>
 8002bca:	4603      	mov	r3, r0
 8002bcc:	2b2f      	cmp	r3, #47	@ 0x2f
 8002bce:	f200 80c7 	bhi.w	8002d60 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv+0x1a4>
 8002bd2:	a201      	add	r2, pc, #4	@ (adr r2, 8002bd8 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv+0x1c>)
 8002bd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bd8:	08002c99 	.word	0x08002c99
 8002bdc:	08002d61 	.word	0x08002d61
 8002be0:	08002d61 	.word	0x08002d61
 8002be4:	08002d61 	.word	0x08002d61
 8002be8:	08002d61 	.word	0x08002d61
 8002bec:	08002d61 	.word	0x08002d61
 8002bf0:	08002d61 	.word	0x08002d61
 8002bf4:	08002d61 	.word	0x08002d61
 8002bf8:	08002d61 	.word	0x08002d61
 8002bfc:	08002ca9 	.word	0x08002ca9
 8002c00:	08002ca9 	.word	0x08002ca9
 8002c04:	08002d61 	.word	0x08002d61
 8002c08:	08002d61 	.word	0x08002d61
 8002c0c:	08002ca9 	.word	0x08002ca9
 8002c10:	08002d61 	.word	0x08002d61
 8002c14:	08002d61 	.word	0x08002d61
 8002c18:	08002d61 	.word	0x08002d61
 8002c1c:	08002d61 	.word	0x08002d61
 8002c20:	08002d61 	.word	0x08002d61
 8002c24:	08002d61 	.word	0x08002d61
 8002c28:	08002d61 	.word	0x08002d61
 8002c2c:	08002d61 	.word	0x08002d61
 8002c30:	08002d61 	.word	0x08002d61
 8002c34:	08002d61 	.word	0x08002d61
 8002c38:	08002d61 	.word	0x08002d61
 8002c3c:	08002d61 	.word	0x08002d61
 8002c40:	08002d61 	.word	0x08002d61
 8002c44:	08002d61 	.word	0x08002d61
 8002c48:	08002d61 	.word	0x08002d61
 8002c4c:	08002d61 	.word	0x08002d61
 8002c50:	08002d61 	.word	0x08002d61
 8002c54:	08002d61 	.word	0x08002d61
 8002c58:	08002ca9 	.word	0x08002ca9
 8002c5c:	08002d61 	.word	0x08002d61
 8002c60:	08002d61 	.word	0x08002d61
 8002c64:	08002d61 	.word	0x08002d61
 8002c68:	08002d61 	.word	0x08002d61
 8002c6c:	08002d61 	.word	0x08002d61
 8002c70:	08002d61 	.word	0x08002d61
 8002c74:	08002d61 	.word	0x08002d61
 8002c78:	08002d61 	.word	0x08002d61
 8002c7c:	08002d61 	.word	0x08002d61
 8002c80:	08002d61 	.word	0x08002d61
 8002c84:	08002d61 	.word	0x08002d61
 8002c88:	08002d61 	.word	0x08002d61
 8002c8c:	08002d61 	.word	0x08002d61
 8002c90:	08002d61 	.word	0x08002d61
 8002c94:	08002cb1 	.word	0x08002cb1
          return DeserializationError::IncompleteInput;
 8002c98:	f107 030c 	add.w	r3, r7, #12
 8002c9c:	2101      	movs	r1, #1
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	f7fe fc01 	bl	80014a6 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 8002ca4:	7b3b      	ldrb	r3, [r7, #12]
 8002ca6:	e064      	b.n	8002d72 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv+0x1b6>
          move();
 8002ca8:	6878      	ldr	r0, [r7, #4]
 8002caa:	f000 fbbb 	bl	8003424 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE4moveEv>
          continue;
 8002cae:	e05f      	b.n	8002d70 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv+0x1b4>
          move();  // skip '/'
 8002cb0:	6878      	ldr	r0, [r7, #4]
 8002cb2:	f000 fbb7 	bl	8003424 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE4moveEv>
          switch (current()) {
 8002cb6:	6878      	ldr	r0, [r7, #4]
 8002cb8:	f000 f860 	bl	8002d7c <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>
 8002cbc:	4603      	mov	r3, r0
 8002cbe:	2b2a      	cmp	r3, #42	@ 0x2a
 8002cc0:	d002      	beq.n	8002cc8 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv+0x10c>
 8002cc2:	2b2f      	cmp	r3, #47	@ 0x2f
 8002cc4:	d02a      	beq.n	8002d1c <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv+0x160>
 8002cc6:	e042      	b.n	8002d4e <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv+0x192>
              move();  // skip '*'
 8002cc8:	6878      	ldr	r0, [r7, #4]
 8002cca:	f000 fbab 	bl	8003424 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE4moveEv>
              bool wasStar = false;
 8002cce:	2300      	movs	r3, #0
 8002cd0:	77fb      	strb	r3, [r7, #31]
                char c = current();
 8002cd2:	6878      	ldr	r0, [r7, #4]
 8002cd4:	f000 f852 	bl	8002d7c <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>
 8002cd8:	4603      	mov	r3, r0
 8002cda:	777b      	strb	r3, [r7, #29]
                if (c == '\0') return DeserializationError::IncompleteInput;
 8002cdc:	7f7b      	ldrb	r3, [r7, #29]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d107      	bne.n	8002cf2 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv+0x136>
 8002ce2:	f107 0310 	add.w	r3, r7, #16
 8002ce6:	2101      	movs	r1, #1
 8002ce8:	4618      	mov	r0, r3
 8002cea:	f7fe fbdc 	bl	80014a6 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 8002cee:	7c3b      	ldrb	r3, [r7, #16]
 8002cf0:	e03f      	b.n	8002d72 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv+0x1b6>
                if (c == '/' && wasStar) {
 8002cf2:	7f7b      	ldrb	r3, [r7, #29]
 8002cf4:	2b2f      	cmp	r3, #47	@ 0x2f
 8002cf6:	d107      	bne.n	8002d08 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv+0x14c>
 8002cf8:	7ffb      	ldrb	r3, [r7, #31]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d004      	beq.n	8002d08 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv+0x14c>
                  move();
 8002cfe:	6878      	ldr	r0, [r7, #4]
 8002d00:	f000 fb90 	bl	8003424 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE4moveEv>
                  break;
 8002d04:	bf00      	nop
              break;
 8002d06:	e02a      	b.n	8002d5e <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv+0x1a2>
                wasStar = c == '*';
 8002d08:	7f7b      	ldrb	r3, [r7, #29]
 8002d0a:	2b2a      	cmp	r3, #42	@ 0x2a
 8002d0c:	bf0c      	ite	eq
 8002d0e:	2301      	moveq	r3, #1
 8002d10:	2300      	movne	r3, #0
 8002d12:	77fb      	strb	r3, [r7, #31]
                move();
 8002d14:	6878      	ldr	r0, [r7, #4]
 8002d16:	f000 fb85 	bl	8003424 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE4moveEv>
              for (;;) {
 8002d1a:	e7da      	b.n	8002cd2 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv+0x116>
                move();
 8002d1c:	6878      	ldr	r0, [r7, #4]
 8002d1e:	f000 fb81 	bl	8003424 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE4moveEv>
                char c = current();
 8002d22:	6878      	ldr	r0, [r7, #4]
 8002d24:	f000 f82a 	bl	8002d7c <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>
 8002d28:	4603      	mov	r3, r0
 8002d2a:	77bb      	strb	r3, [r7, #30]
                if (c == '\0') return DeserializationError::IncompleteInput;
 8002d2c:	7fbb      	ldrb	r3, [r7, #30]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d107      	bne.n	8002d42 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv+0x186>
 8002d32:	f107 0314 	add.w	r3, r7, #20
 8002d36:	2101      	movs	r1, #1
 8002d38:	4618      	mov	r0, r3
 8002d3a:	f7fe fbb4 	bl	80014a6 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 8002d3e:	7d3b      	ldrb	r3, [r7, #20]
 8002d40:	e017      	b.n	8002d72 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv+0x1b6>
                if (c == '\n') break;
 8002d42:	7fbb      	ldrb	r3, [r7, #30]
 8002d44:	2b0a      	cmp	r3, #10
 8002d46:	d000      	beq.n	8002d4a <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv+0x18e>
              for (;;) {
 8002d48:	e7e8      	b.n	8002d1c <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv+0x160>
                if (c == '\n') break;
 8002d4a:	bf00      	nop
              break;
 8002d4c:	e007      	b.n	8002d5e <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv+0x1a2>
              return DeserializationError::InvalidInput;
 8002d4e:	f107 0318 	add.w	r3, r7, #24
 8002d52:	2102      	movs	r1, #2
 8002d54:	4618      	mov	r0, r3
 8002d56:	f7fe fba6 	bl	80014a6 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 8002d5a:	7e3b      	ldrb	r3, [r7, #24]
 8002d5c:	e009      	b.n	8002d72 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv+0x1b6>
          break;
 8002d5e:	e007      	b.n	8002d70 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv+0x1b4>
          return DeserializationError::Ok;
 8002d60:	f107 031c 	add.w	r3, r7, #28
 8002d64:	2100      	movs	r1, #0
 8002d66:	4618      	mov	r0, r3
 8002d68:	f7fe fb9d 	bl	80014a6 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 8002d6c:	7f3b      	ldrb	r3, [r7, #28]
 8002d6e:	e000      	b.n	8002d72 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv+0x1b6>
    for (;;) {
 8002d70:	e728      	b.n	8002bc4 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv+0x8>
  }
 8002d72:	4618      	mov	r0, r3
 8002d74:	3720      	adds	r7, #32
 8002d76:	46bd      	mov	sp, r7
 8002d78:	bd80      	pop	{r7, pc}
 8002d7a:	bf00      	nop

08002d7c <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>:
  char current() {
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b082      	sub	sp, #8
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
    if (!_loaded) {
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	7b9b      	ldrb	r3, [r3, #14]
 8002d88:	f083 0301 	eor.w	r3, r3, #1
 8002d8c:	b2db      	uxtb	r3, r3
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d017      	beq.n	8002dc2 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv+0x46>
      if (_reader.ended())
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	3304      	adds	r3, #4
 8002d96:	4618      	mov	r0, r3
 8002d98:	f7fe fb70 	bl	800147c <_ZNK19ArduinoJson6101_11023UnsafeCharPointerReader5endedEv>
 8002d9c:	4603      	mov	r3, r0
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d003      	beq.n	8002daa <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv+0x2e>
        _current = 0;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	2200      	movs	r2, #0
 8002da6:	735a      	strb	r2, [r3, #13]
 8002da8:	e008      	b.n	8002dbc <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv+0x40>
        _current = _reader.read();
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	3304      	adds	r3, #4
 8002dae:	4618      	mov	r0, r3
 8002db0:	f7fe fb54 	bl	800145c <_ZN19ArduinoJson6101_11023UnsafeCharPointerReader4readEv>
 8002db4:	4603      	mov	r3, r0
 8002db6:	461a      	mov	r2, r3
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	735a      	strb	r2, [r3, #13]
      _loaded = true;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2201      	movs	r2, #1
 8002dc0:	739a      	strb	r2, [r3, #14]
    return _current;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	7b5b      	ldrb	r3, [r3, #13]
  }
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	3708      	adds	r7, #8
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	bd80      	pop	{r7, pc}

08002dce <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE>:
  DeserializationError parseArray(CollectionData &array) {
 8002dce:	b580      	push	{r7, lr}
 8002dd0:	b098      	sub	sp, #96	@ 0x60
 8002dd2:	af00      	add	r7, sp, #0
 8002dd4:	6078      	str	r0, [r7, #4]
 8002dd6:	6039      	str	r1, [r7, #0]
    if (_nestingLimit == 0) return DeserializationError::TooDeep;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	7b1b      	ldrb	r3, [r3, #12]
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d107      	bne.n	8002df0 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x22>
 8002de0:	f107 0310 	add.w	r3, r7, #16
 8002de4:	2105      	movs	r1, #5
 8002de6:	4618      	mov	r0, r3
 8002de8:	f7fe fb5d 	bl	80014a6 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 8002dec:	7c3b      	ldrb	r3, [r7, #16]
 8002dee:	e111      	b.n	8003014 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x246>
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002df4:	235b      	movs	r3, #91	@ 0x5b
 8002df6:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
    if (current() != charToSkip) return false;
 8002dfa:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8002dfc:	f7ff ffbe 	bl	8002d7c <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>
 8002e00:	4603      	mov	r3, r0
 8002e02:	461a      	mov	r2, r3
 8002e04:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8002e08:	4293      	cmp	r3, r2
 8002e0a:	bf14      	ite	ne
 8002e0c:	2301      	movne	r3, #1
 8002e0e:	2300      	moveq	r3, #0
 8002e10:	b2db      	uxtb	r3, r3
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d001      	beq.n	8002e1a <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x4c>
 8002e16:	2300      	movs	r3, #0
 8002e18:	e003      	b.n	8002e22 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x54>
    move();
 8002e1a:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8002e1c:	f000 fb02 	bl	8003424 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE4moveEv>
    return true;
 8002e20:	2301      	movs	r3, #1
    if (!eat('[')) return DeserializationError::InvalidInput;
 8002e22:	f083 0301 	eor.w	r3, r3, #1
 8002e26:	b2db      	uxtb	r3, r3
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d007      	beq.n	8002e3c <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x6e>
 8002e2c:	f107 0314 	add.w	r3, r7, #20
 8002e30:	2102      	movs	r1, #2
 8002e32:	4618      	mov	r0, r3
 8002e34:	f7fe fb37 	bl	80014a6 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 8002e38:	7d3b      	ldrb	r3, [r7, #20]
 8002e3a:	e0eb      	b.n	8003014 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x246>
    DeserializationError err = skipSpacesAndComments();
 8002e3c:	6878      	ldr	r0, [r7, #4]
 8002e3e:	f7ff febd 	bl	8002bbc <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv>
 8002e42:	4603      	mov	r3, r0
 8002e44:	733b      	strb	r3, [r7, #12]
    if (err) return err;
 8002e46:	f107 0318 	add.w	r3, r7, #24
 8002e4a:	f107 020c 	add.w	r2, r7, #12
 8002e4e:	4611      	mov	r1, r2
 8002e50:	4618      	mov	r0, r3
 8002e52:	f7fe fb39 	bl	80014c8 <_ZNK19ArduinoJson6101_11020DeserializationErrorcvMS0_KFvvEEv>
 8002e56:	69bb      	ldr	r3, [r7, #24]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d106      	bne.n	8002e6a <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x9c>
 8002e5c:	69fb      	ldr	r3, [r7, #28]
 8002e5e:	f003 0301 	and.w	r3, r3, #1
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d101      	bne.n	8002e6a <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x9c>
 8002e66:	2301      	movs	r3, #1
 8002e68:	e000      	b.n	8002e6c <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x9e>
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	f083 0301 	eor.w	r3, r3, #1
 8002e70:	b2db      	uxtb	r3, r3
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d001      	beq.n	8002e7a <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0xac>
 8002e76:	7b3b      	ldrb	r3, [r7, #12]
 8002e78:	e0cc      	b.n	8003014 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x246>
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	653b      	str	r3, [r7, #80]	@ 0x50
 8002e7e:	235d      	movs	r3, #93	@ 0x5d
 8002e80:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    if (current() != charToSkip) return false;
 8002e84:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8002e86:	f7ff ff79 	bl	8002d7c <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>
 8002e8a:	4603      	mov	r3, r0
 8002e8c:	461a      	mov	r2, r3
 8002e8e:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8002e92:	4293      	cmp	r3, r2
 8002e94:	bf14      	ite	ne
 8002e96:	2301      	movne	r3, #1
 8002e98:	2300      	moveq	r3, #0
 8002e9a:	b2db      	uxtb	r3, r3
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d001      	beq.n	8002ea4 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0xd6>
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	e003      	b.n	8002eac <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0xde>
    move();
 8002ea4:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8002ea6:	f000 fabd 	bl	8003424 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE4moveEv>
    return true;
 8002eaa:	2301      	movs	r3, #1
    if (eat(']')) return DeserializationError::Ok;
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d008      	beq.n	8002ec2 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0xf4>
 8002eb0:	f107 0320 	add.w	r3, r7, #32
 8002eb4:	2100      	movs	r1, #0
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	f7fe faf5 	bl	80014a6 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 8002ebc:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002ec0:	e0a8      	b.n	8003014 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x246>
      VariantData *value = array.add(_pool);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	4619      	mov	r1, r3
 8002ec8:	6838      	ldr	r0, [r7, #0]
 8002eca:	f7fe f9e9 	bl	80012a0 <_ZN19ArduinoJson6101_11014CollectionData3addEPNS_10MemoryPoolE>
 8002ece:	65f8      	str	r0, [r7, #92]	@ 0x5c
      if (!value) return DeserializationError::NoMemory;
 8002ed0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d108      	bne.n	8002ee8 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x11a>
 8002ed6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002eda:	2103      	movs	r1, #3
 8002edc:	4618      	mov	r0, r3
 8002ede:	f7fe fae2 	bl	80014a6 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 8002ee2:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8002ee6:	e095      	b.n	8003014 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x246>
      _nestingLimit--;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	7b1b      	ldrb	r3, [r3, #12]
 8002eec:	3b01      	subs	r3, #1
 8002eee:	b2da      	uxtb	r2, r3
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	731a      	strb	r2, [r3, #12]
      err = parse(*value);
 8002ef4:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 8002ef6:	6878      	ldr	r0, [r7, #4]
 8002ef8:	f7ff fde7 	bl	8002aca <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE5parseERNS_11VariantDataE>
 8002efc:	4603      	mov	r3, r0
 8002efe:	733b      	strb	r3, [r7, #12]
      _nestingLimit++;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	7b1b      	ldrb	r3, [r3, #12]
 8002f04:	3301      	adds	r3, #1
 8002f06:	b2da      	uxtb	r2, r3
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	731a      	strb	r2, [r3, #12]
      if (err) return err;
 8002f0c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002f10:	f107 020c 	add.w	r2, r7, #12
 8002f14:	4611      	mov	r1, r2
 8002f16:	4618      	mov	r0, r3
 8002f18:	f7fe fad6 	bl	80014c8 <_ZNK19ArduinoJson6101_11020DeserializationErrorcvMS0_KFvvEEv>
 8002f1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d106      	bne.n	8002f30 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x162>
 8002f22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f24:	f003 0301 	and.w	r3, r3, #1
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d101      	bne.n	8002f30 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x162>
 8002f2c:	2301      	movs	r3, #1
 8002f2e:	e000      	b.n	8002f32 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x164>
 8002f30:	2300      	movs	r3, #0
 8002f32:	f083 0301 	eor.w	r3, r3, #1
 8002f36:	b2db      	uxtb	r3, r3
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d001      	beq.n	8002f40 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x172>
 8002f3c:	7b3b      	ldrb	r3, [r7, #12]
 8002f3e:	e069      	b.n	8003014 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x246>
      err = skipSpacesAndComments();
 8002f40:	6878      	ldr	r0, [r7, #4]
 8002f42:	f7ff fe3b 	bl	8002bbc <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv>
 8002f46:	4603      	mov	r3, r0
 8002f48:	733b      	strb	r3, [r7, #12]
      if (err) return err;
 8002f4a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002f4e:	f107 020c 	add.w	r2, r7, #12
 8002f52:	4611      	mov	r1, r2
 8002f54:	4618      	mov	r0, r3
 8002f56:	f7fe fab7 	bl	80014c8 <_ZNK19ArduinoJson6101_11020DeserializationErrorcvMS0_KFvvEEv>
 8002f5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d106      	bne.n	8002f6e <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x1a0>
 8002f60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f62:	f003 0301 	and.w	r3, r3, #1
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d101      	bne.n	8002f6e <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x1a0>
 8002f6a:	2301      	movs	r3, #1
 8002f6c:	e000      	b.n	8002f70 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x1a2>
 8002f6e:	2300      	movs	r3, #0
 8002f70:	f083 0301 	eor.w	r3, r3, #1
 8002f74:	b2db      	uxtb	r3, r3
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d001      	beq.n	8002f7e <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x1b0>
 8002f7a:	7b3b      	ldrb	r3, [r7, #12]
 8002f7c:	e04a      	b.n	8003014 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x246>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002f82:	235d      	movs	r3, #93	@ 0x5d
 8002f84:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if (current() != charToSkip) return false;
 8002f88:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8002f8a:	f7ff fef7 	bl	8002d7c <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>
 8002f8e:	4603      	mov	r3, r0
 8002f90:	461a      	mov	r2, r3
 8002f92:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8002f96:	4293      	cmp	r3, r2
 8002f98:	bf14      	ite	ne
 8002f9a:	2301      	movne	r3, #1
 8002f9c:	2300      	moveq	r3, #0
 8002f9e:	b2db      	uxtb	r3, r3
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d001      	beq.n	8002fa8 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x1da>
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	e003      	b.n	8002fb0 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x1e2>
    move();
 8002fa8:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8002faa:	f000 fa3b 	bl	8003424 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE4moveEv>
    return true;
 8002fae:	2301      	movs	r3, #1
      if (eat(']')) return DeserializationError::Ok;
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d008      	beq.n	8002fc6 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x1f8>
 8002fb4:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002fb8:	2100      	movs	r1, #0
 8002fba:	4618      	mov	r0, r3
 8002fbc:	f7fe fa73 	bl	80014a6 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 8002fc0:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 8002fc4:	e026      	b.n	8003014 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x246>
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	643b      	str	r3, [r7, #64]	@ 0x40
 8002fca:	232c      	movs	r3, #44	@ 0x2c
 8002fcc:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    if (current() != charToSkip) return false;
 8002fd0:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8002fd2:	f7ff fed3 	bl	8002d7c <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	461a      	mov	r2, r3
 8002fda:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8002fde:	4293      	cmp	r3, r2
 8002fe0:	bf14      	ite	ne
 8002fe2:	2301      	movne	r3, #1
 8002fe4:	2300      	moveq	r3, #0
 8002fe6:	b2db      	uxtb	r3, r3
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d001      	beq.n	8002ff0 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x222>
 8002fec:	2300      	movs	r3, #0
 8002fee:	e003      	b.n	8002ff8 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x22a>
    move();
 8002ff0:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8002ff2:	f000 fa17 	bl	8003424 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE4moveEv>
    return true;
 8002ff6:	2301      	movs	r3, #1
      if (!eat(',')) return DeserializationError::InvalidInput;
 8002ff8:	f083 0301 	eor.w	r3, r3, #1
 8002ffc:	b2db      	uxtb	r3, r3
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	f43f af5f 	beq.w	8002ec2 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0xf4>
 8003004:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8003008:	2102      	movs	r1, #2
 800300a:	4618      	mov	r0, r3
 800300c:	f7fe fa4b 	bl	80014a6 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 8003010:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
  }
 8003014:	4618      	mov	r0, r3
 8003016:	3760      	adds	r7, #96	@ 0x60
 8003018:	46bd      	mov	sp, r7
 800301a:	bd80      	pop	{r7, pc}

0800301c <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE>:
  DeserializationError parseObject(CollectionData &object) {
 800301c:	b590      	push	{r4, r7, lr}
 800301e:	b0a3      	sub	sp, #140	@ 0x8c
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
 8003024:	6039      	str	r1, [r7, #0]
    if (_nestingLimit == 0) return DeserializationError::TooDeep;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	7b1b      	ldrb	r3, [r3, #12]
 800302a:	2b00      	cmp	r3, #0
 800302c:	d107      	bne.n	800303e <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x22>
 800302e:	f107 0310 	add.w	r3, r7, #16
 8003032:	2105      	movs	r1, #5
 8003034:	4618      	mov	r0, r3
 8003036:	f7fe fa36 	bl	80014a6 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 800303a:	7c3b      	ldrb	r3, [r7, #16]
 800303c:	e1ad      	b.n	800339a <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x37e>
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003044:	237b      	movs	r3, #123	@ 0x7b
 8003046:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    if (current() != charToSkip) return false;
 800304a:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 800304e:	f7ff fe95 	bl	8002d7c <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>
 8003052:	4603      	mov	r3, r0
 8003054:	461a      	mov	r2, r3
 8003056:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800305a:	4293      	cmp	r3, r2
 800305c:	bf14      	ite	ne
 800305e:	2301      	movne	r3, #1
 8003060:	2300      	moveq	r3, #0
 8003062:	b2db      	uxtb	r3, r3
 8003064:	2b00      	cmp	r3, #0
 8003066:	d001      	beq.n	800306c <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x50>
 8003068:	2300      	movs	r3, #0
 800306a:	e004      	b.n	8003076 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x5a>
    move();
 800306c:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 8003070:	f000 f9d8 	bl	8003424 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE4moveEv>
    return true;
 8003074:	2301      	movs	r3, #1
    if (!eat('{')) return DeserializationError::InvalidInput;
 8003076:	f083 0301 	eor.w	r3, r3, #1
 800307a:	b2db      	uxtb	r3, r3
 800307c:	2b00      	cmp	r3, #0
 800307e:	d007      	beq.n	8003090 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x74>
 8003080:	f107 0314 	add.w	r3, r7, #20
 8003084:	2102      	movs	r1, #2
 8003086:	4618      	mov	r0, r3
 8003088:	f7fe fa0d 	bl	80014a6 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 800308c:	7d3b      	ldrb	r3, [r7, #20]
 800308e:	e184      	b.n	800339a <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x37e>
    DeserializationError err = skipSpacesAndComments();
 8003090:	6878      	ldr	r0, [r7, #4]
 8003092:	f7ff fd93 	bl	8002bbc <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv>
 8003096:	4603      	mov	r3, r0
 8003098:	733b      	strb	r3, [r7, #12]
    if (err) return err;
 800309a:	f107 0318 	add.w	r3, r7, #24
 800309e:	f107 020c 	add.w	r2, r7, #12
 80030a2:	4611      	mov	r1, r2
 80030a4:	4618      	mov	r0, r3
 80030a6:	f7fe fa0f 	bl	80014c8 <_ZNK19ArduinoJson6101_11020DeserializationErrorcvMS0_KFvvEEv>
 80030aa:	69bb      	ldr	r3, [r7, #24]
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d106      	bne.n	80030be <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0xa2>
 80030b0:	69fb      	ldr	r3, [r7, #28]
 80030b2:	f003 0301 	and.w	r3, r3, #1
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d101      	bne.n	80030be <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0xa2>
 80030ba:	2301      	movs	r3, #1
 80030bc:	e000      	b.n	80030c0 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0xa4>
 80030be:	2300      	movs	r3, #0
 80030c0:	f083 0301 	eor.w	r3, r3, #1
 80030c4:	b2db      	uxtb	r3, r3
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d001      	beq.n	80030ce <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0xb2>
 80030ca:	7b3b      	ldrb	r3, [r7, #12]
 80030cc:	e165      	b.n	800339a <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x37e>
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80030d2:	237d      	movs	r3, #125	@ 0x7d
 80030d4:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    if (current() != charToSkip) return false;
 80030d8:	6fb8      	ldr	r0, [r7, #120]	@ 0x78
 80030da:	f7ff fe4f 	bl	8002d7c <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>
 80030de:	4603      	mov	r3, r0
 80030e0:	461a      	mov	r2, r3
 80030e2:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 80030e6:	4293      	cmp	r3, r2
 80030e8:	bf14      	ite	ne
 80030ea:	2301      	movne	r3, #1
 80030ec:	2300      	moveq	r3, #0
 80030ee:	b2db      	uxtb	r3, r3
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d001      	beq.n	80030f8 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0xdc>
 80030f4:	2300      	movs	r3, #0
 80030f6:	e003      	b.n	8003100 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0xe4>
    move();
 80030f8:	6fb8      	ldr	r0, [r7, #120]	@ 0x78
 80030fa:	f000 f993 	bl	8003424 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE4moveEv>
    return true;
 80030fe:	2301      	movs	r3, #1
    if (eat('}')) return DeserializationError::Ok;
 8003100:	2b00      	cmp	r3, #0
 8003102:	d008      	beq.n	8003116 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0xfa>
 8003104:	f107 0320 	add.w	r3, r7, #32
 8003108:	2100      	movs	r1, #0
 800310a:	4618      	mov	r0, r3
 800310c:	f7fe f9cb 	bl	80014a6 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 8003110:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003114:	e141      	b.n	800339a <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x37e>
      VariantSlot *slot = object.addSlot(_pool);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	4619      	mov	r1, r3
 800311c:	6838      	ldr	r0, [r7, #0]
 800311e:	f7fe f895 	bl	800124c <_ZN19ArduinoJson6101_11014CollectionData7addSlotEPNS_10MemoryPoolE>
 8003122:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
      if (!slot) return DeserializationError::NoMemory;
 8003126:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800312a:	2b00      	cmp	r3, #0
 800312c:	d108      	bne.n	8003140 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x124>
 800312e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003132:	2103      	movs	r1, #3
 8003134:	4618      	mov	r0, r3
 8003136:	f7fe f9b6 	bl	80014a6 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 800313a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800313e:	e12c      	b.n	800339a <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x37e>
      err = parseKey(key);
 8003140:	f107 0308 	add.w	r3, r7, #8
 8003144:	4619      	mov	r1, r3
 8003146:	6878      	ldr	r0, [r7, #4]
 8003148:	f000 f979 	bl	800343e <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE8parseKeyERPKc>
 800314c:	4603      	mov	r3, r0
 800314e:	733b      	strb	r3, [r7, #12]
      if (err) return err;
 8003150:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003154:	f107 020c 	add.w	r2, r7, #12
 8003158:	4611      	mov	r1, r2
 800315a:	4618      	mov	r0, r3
 800315c:	f7fe f9b4 	bl	80014c8 <_ZNK19ArduinoJson6101_11020DeserializationErrorcvMS0_KFvvEEv>
 8003160:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003162:	2b00      	cmp	r3, #0
 8003164:	d106      	bne.n	8003174 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x158>
 8003166:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003168:	f003 0301 	and.w	r3, r3, #1
 800316c:	2b00      	cmp	r3, #0
 800316e:	d101      	bne.n	8003174 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x158>
 8003170:	2301      	movs	r3, #1
 8003172:	e000      	b.n	8003176 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x15a>
 8003174:	2300      	movs	r3, #0
 8003176:	f083 0301 	eor.w	r3, r3, #1
 800317a:	b2db      	uxtb	r3, r3
 800317c:	2b00      	cmp	r3, #0
 800317e:	d001      	beq.n	8003184 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x168>
 8003180:	7b3b      	ldrb	r3, [r7, #12]
 8003182:	e10a      	b.n	800339a <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x37e>
      slot->setOwnedKey(make_not_null(key));
 8003184:	f8d7 4084 	ldr.w	r4, [r7, #132]	@ 0x84
 8003188:	68bb      	ldr	r3, [r7, #8]
 800318a:	4618      	mov	r0, r3
 800318c:	f7ff fb0d 	bl	80027aa <_ZN19ArduinoJson6101_11013make_not_nullIPKcEENS_8not_nullIT_EES4_>
 8003190:	4603      	mov	r3, r0
 8003192:	4619      	mov	r1, r3
 8003194:	4620      	mov	r0, r4
 8003196:	f7fd fd2f 	bl	8000bf8 <_ZN19ArduinoJson6101_11011VariantSlot11setOwnedKeyENS_8not_nullIPKcEE>
      err = skipSpacesAndComments();
 800319a:	6878      	ldr	r0, [r7, #4]
 800319c:	f7ff fd0e 	bl	8002bbc <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv>
 80031a0:	4603      	mov	r3, r0
 80031a2:	733b      	strb	r3, [r7, #12]
      if (err) return err;  // Colon
 80031a4:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80031a8:	f107 020c 	add.w	r2, r7, #12
 80031ac:	4611      	mov	r1, r2
 80031ae:	4618      	mov	r0, r3
 80031b0:	f7fe f98a 	bl	80014c8 <_ZNK19ArduinoJson6101_11020DeserializationErrorcvMS0_KFvvEEv>
 80031b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d106      	bne.n	80031c8 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x1ac>
 80031ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80031bc:	f003 0301 	and.w	r3, r3, #1
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d101      	bne.n	80031c8 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x1ac>
 80031c4:	2301      	movs	r3, #1
 80031c6:	e000      	b.n	80031ca <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x1ae>
 80031c8:	2300      	movs	r3, #0
 80031ca:	f083 0301 	eor.w	r3, r3, #1
 80031ce:	b2db      	uxtb	r3, r3
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d001      	beq.n	80031d8 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x1bc>
 80031d4:	7b3b      	ldrb	r3, [r7, #12]
 80031d6:	e0e0      	b.n	800339a <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x37e>
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	673b      	str	r3, [r7, #112]	@ 0x70
 80031dc:	233a      	movs	r3, #58	@ 0x3a
 80031de:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
    if (current() != charToSkip) return false;
 80031e2:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 80031e4:	f7ff fdca 	bl	8002d7c <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>
 80031e8:	4603      	mov	r3, r0
 80031ea:	461a      	mov	r2, r3
 80031ec:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 80031f0:	4293      	cmp	r3, r2
 80031f2:	bf14      	ite	ne
 80031f4:	2301      	movne	r3, #1
 80031f6:	2300      	moveq	r3, #0
 80031f8:	b2db      	uxtb	r3, r3
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d001      	beq.n	8003202 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x1e6>
 80031fe:	2300      	movs	r3, #0
 8003200:	e003      	b.n	800320a <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x1ee>
    move();
 8003202:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 8003204:	f000 f90e 	bl	8003424 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE4moveEv>
    return true;
 8003208:	2301      	movs	r3, #1
      if (!eat(':')) return DeserializationError::InvalidInput;
 800320a:	f083 0301 	eor.w	r3, r3, #1
 800320e:	b2db      	uxtb	r3, r3
 8003210:	2b00      	cmp	r3, #0
 8003212:	d008      	beq.n	8003226 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x20a>
 8003214:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8003218:	2102      	movs	r1, #2
 800321a:	4618      	mov	r0, r3
 800321c:	f7fe f943 	bl	80014a6 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 8003220:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 8003224:	e0b9      	b.n	800339a <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x37e>
      _nestingLimit--;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	7b1b      	ldrb	r3, [r3, #12]
 800322a:	3b01      	subs	r3, #1
 800322c:	b2da      	uxtb	r2, r3
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	731a      	strb	r2, [r3, #12]
      err = parse(*slot->data());
 8003232:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 8003236:	f7fd fcab 	bl	8000b90 <_ZN19ArduinoJson6101_11011VariantSlot4dataEv>
 800323a:	4603      	mov	r3, r0
 800323c:	4619      	mov	r1, r3
 800323e:	6878      	ldr	r0, [r7, #4]
 8003240:	f7ff fc43 	bl	8002aca <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE5parseERNS_11VariantDataE>
 8003244:	4603      	mov	r3, r0
 8003246:	733b      	strb	r3, [r7, #12]
      _nestingLimit++;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	7b1b      	ldrb	r3, [r3, #12]
 800324c:	3301      	adds	r3, #1
 800324e:	b2da      	uxtb	r2, r3
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	731a      	strb	r2, [r3, #12]
      if (err) return err;
 8003254:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8003258:	f107 020c 	add.w	r2, r7, #12
 800325c:	4611      	mov	r1, r2
 800325e:	4618      	mov	r0, r3
 8003260:	f7fe f932 	bl	80014c8 <_ZNK19ArduinoJson6101_11020DeserializationErrorcvMS0_KFvvEEv>
 8003264:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003266:	2b00      	cmp	r3, #0
 8003268:	d106      	bne.n	8003278 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x25c>
 800326a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800326c:	f003 0301 	and.w	r3, r3, #1
 8003270:	2b00      	cmp	r3, #0
 8003272:	d101      	bne.n	8003278 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x25c>
 8003274:	2301      	movs	r3, #1
 8003276:	e000      	b.n	800327a <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x25e>
 8003278:	2300      	movs	r3, #0
 800327a:	f083 0301 	eor.w	r3, r3, #1
 800327e:	b2db      	uxtb	r3, r3
 8003280:	2b00      	cmp	r3, #0
 8003282:	d001      	beq.n	8003288 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x26c>
 8003284:	7b3b      	ldrb	r3, [r7, #12]
 8003286:	e088      	b.n	800339a <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x37e>
      err = skipSpacesAndComments();
 8003288:	6878      	ldr	r0, [r7, #4]
 800328a:	f7ff fc97 	bl	8002bbc <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv>
 800328e:	4603      	mov	r3, r0
 8003290:	733b      	strb	r3, [r7, #12]
      if (err) return err;
 8003292:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8003296:	f107 020c 	add.w	r2, r7, #12
 800329a:	4611      	mov	r1, r2
 800329c:	4618      	mov	r0, r3
 800329e:	f7fe f913 	bl	80014c8 <_ZNK19ArduinoJson6101_11020DeserializationErrorcvMS0_KFvvEEv>
 80032a2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d106      	bne.n	80032b6 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x29a>
 80032a8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80032aa:	f003 0301 	and.w	r3, r3, #1
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d101      	bne.n	80032b6 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x29a>
 80032b2:	2301      	movs	r3, #1
 80032b4:	e000      	b.n	80032b8 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x29c>
 80032b6:	2300      	movs	r3, #0
 80032b8:	f083 0301 	eor.w	r3, r3, #1
 80032bc:	b2db      	uxtb	r3, r3
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d001      	beq.n	80032c6 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x2aa>
 80032c2:	7b3b      	ldrb	r3, [r7, #12]
 80032c4:	e069      	b.n	800339a <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x37e>
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80032ca:	237d      	movs	r3, #125	@ 0x7d
 80032cc:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
    if (current() != charToSkip) return false;
 80032d0:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 80032d2:	f7ff fd53 	bl	8002d7c <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>
 80032d6:	4603      	mov	r3, r0
 80032d8:	461a      	mov	r2, r3
 80032da:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80032de:	4293      	cmp	r3, r2
 80032e0:	bf14      	ite	ne
 80032e2:	2301      	movne	r3, #1
 80032e4:	2300      	moveq	r3, #0
 80032e6:	b2db      	uxtb	r3, r3
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d001      	beq.n	80032f0 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x2d4>
 80032ec:	2300      	movs	r3, #0
 80032ee:	e003      	b.n	80032f8 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x2dc>
    move();
 80032f0:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 80032f2:	f000 f897 	bl	8003424 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE4moveEv>
    return true;
 80032f6:	2301      	movs	r3, #1
      if (eat('}')) return DeserializationError::Ok;
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d008      	beq.n	800330e <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x2f2>
 80032fc:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8003300:	2100      	movs	r1, #0
 8003302:	4618      	mov	r0, r3
 8003304:	f7fe f8cf 	bl	80014a6 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 8003308:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 800330c:	e045      	b.n	800339a <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x37e>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	663b      	str	r3, [r7, #96]	@ 0x60
 8003312:	232c      	movs	r3, #44	@ 0x2c
 8003314:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
    if (current() != charToSkip) return false;
 8003318:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 800331a:	f7ff fd2f 	bl	8002d7c <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>
 800331e:	4603      	mov	r3, r0
 8003320:	461a      	mov	r2, r3
 8003322:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8003326:	4293      	cmp	r3, r2
 8003328:	bf14      	ite	ne
 800332a:	2301      	movne	r3, #1
 800332c:	2300      	moveq	r3, #0
 800332e:	b2db      	uxtb	r3, r3
 8003330:	2b00      	cmp	r3, #0
 8003332:	d001      	beq.n	8003338 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x31c>
 8003334:	2300      	movs	r3, #0
 8003336:	e003      	b.n	8003340 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x324>
    move();
 8003338:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 800333a:	f000 f873 	bl	8003424 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE4moveEv>
    return true;
 800333e:	2301      	movs	r3, #1
      if (!eat(',')) return DeserializationError::InvalidInput;
 8003340:	f083 0301 	eor.w	r3, r3, #1
 8003344:	b2db      	uxtb	r3, r3
 8003346:	2b00      	cmp	r3, #0
 8003348:	d008      	beq.n	800335c <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x340>
 800334a:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800334e:	2102      	movs	r1, #2
 8003350:	4618      	mov	r0, r3
 8003352:	f7fe f8a8 	bl	80014a6 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 8003356:	f897 3050 	ldrb.w	r3, [r7, #80]	@ 0x50
 800335a:	e01e      	b.n	800339a <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x37e>
      err = skipSpacesAndComments();
 800335c:	6878      	ldr	r0, [r7, #4]
 800335e:	f7ff fc2d 	bl	8002bbc <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv>
 8003362:	4603      	mov	r3, r0
 8003364:	733b      	strb	r3, [r7, #12]
      if (err) return err;
 8003366:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800336a:	f107 020c 	add.w	r2, r7, #12
 800336e:	4611      	mov	r1, r2
 8003370:	4618      	mov	r0, r3
 8003372:	f7fe f8a9 	bl	80014c8 <_ZNK19ArduinoJson6101_11020DeserializationErrorcvMS0_KFvvEEv>
 8003376:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003378:	2b00      	cmp	r3, #0
 800337a:	d106      	bne.n	800338a <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x36e>
 800337c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800337e:	f003 0301 	and.w	r3, r3, #1
 8003382:	2b00      	cmp	r3, #0
 8003384:	d101      	bne.n	800338a <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x36e>
 8003386:	2301      	movs	r3, #1
 8003388:	e000      	b.n	800338c <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x370>
 800338a:	2300      	movs	r3, #0
 800338c:	f083 0301 	eor.w	r3, r3, #1
 8003390:	b2db      	uxtb	r3, r3
 8003392:	2b00      	cmp	r3, #0
 8003394:	f43f aebf 	beq.w	8003116 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0xfa>
 8003398:	7b3b      	ldrb	r3, [r7, #12]
  }
 800339a:	4618      	mov	r0, r3
 800339c:	378c      	adds	r7, #140	@ 0x8c
 800339e:	46bd      	mov	sp, r7
 80033a0:	bd90      	pop	{r4, r7, pc}

080033a2 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseValueERNS_11VariantDataE>:
  DeserializationError parseValue(VariantData &variant) {
 80033a2:	b580      	push	{r7, lr}
 80033a4:	b082      	sub	sp, #8
 80033a6:	af00      	add	r7, sp, #0
 80033a8:	6078      	str	r0, [r7, #4]
 80033aa:	6039      	str	r1, [r7, #0]
    if (isQuote(current())) {
 80033ac:	6878      	ldr	r0, [r7, #4]
 80033ae:	f7ff fce5 	bl	8002d7c <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>
 80033b2:	4603      	mov	r3, r0
 80033b4:	4618      	mov	r0, r3
 80033b6:	f000 f861 	bl	800347c <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7isQuoteEc>
 80033ba:	4603      	mov	r3, r0
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d005      	beq.n	80033cc <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseValueERNS_11VariantDataE+0x2a>
      return parseStringValue(variant);
 80033c0:	6839      	ldr	r1, [r7, #0]
 80033c2:	6878      	ldr	r0, [r7, #4]
 80033c4:	f000 f86e 	bl	80034a4 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE16parseStringValueERNS_11VariantDataE>
 80033c8:	4603      	mov	r3, r0
 80033ca:	e005      	b.n	80033d8 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseValueERNS_11VariantDataE+0x36>
      return parseNumericValue(variant);
 80033cc:	6839      	ldr	r1, [r7, #0]
 80033ce:	6878      	ldr	r0, [r7, #4]
 80033d0:	f000 f8a3 	bl	800351a <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseNumericValueERNS_11VariantDataE>
 80033d4:	4603      	mov	r3, r0
 80033d6:	bf00      	nop
  }
 80033d8:	4618      	mov	r0, r3
 80033da:	3708      	adds	r7, #8
 80033dc:	46bd      	mov	sp, r7
 80033de:	bd80      	pop	{r7, pc}

080033e0 <_ZN19ArduinoJson6101_1109variantAsIPKcEENS_9enable_ifIXoosrNS_7is_sameIT_S2_EE5valuesrNS4_IS5_PcEE5valueES2_E4typeEPKNS_11VariantDataE>:

template <typename T>
inline typename enable_if<is_same<T, const char*>::value ||
                              is_same<T, char*>::value,
                          const char*>::type
variantAs(const VariantData* _data) {
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b082      	sub	sp, #8
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
  return _data != 0 ? _data->asString() : 0;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d004      	beq.n	80033f8 <_ZN19ArduinoJson6101_1109variantAsIPKcEENS_9enable_ifIXoosrNS_7is_sameIT_S2_EE5valuesrNS4_IS5_PcEE5valueES2_E4typeEPKNS_11VariantDataE+0x18>
 80033ee:	6878      	ldr	r0, [r7, #4]
 80033f0:	f7fd ff8c 	bl	800130c <_ZNK19ArduinoJson6101_11011VariantData8asStringEv>
 80033f4:	4603      	mov	r3, r0
 80033f6:	e000      	b.n	80033fa <_ZN19ArduinoJson6101_1109variantAsIPKcEENS_9enable_ifIXoosrNS_7is_sameIT_S2_EE5valuesrNS4_IS5_PcEE5valueES2_E4typeEPKNS_11VariantDataE+0x1a>
 80033f8:	2300      	movs	r3, #0
}
 80033fa:	4618      	mov	r0, r3
 80033fc:	3708      	adds	r7, #8
 80033fe:	46bd      	mov	sp, r7
 8003400:	bd80      	pop	{r7, pc}

08003402 <_ZN19ArduinoJson6101_1109variantAsImEENS_9enable_ifIXsrNS_11is_integralIT_EE5valueES3_E4typeEPKNS_11VariantDataE>:
inline typename enable_if<is_integral<T>::value, T>::type variantAs(
 8003402:	b580      	push	{r7, lr}
 8003404:	b082      	sub	sp, #8
 8003406:	af00      	add	r7, sp, #0
 8003408:	6078      	str	r0, [r7, #4]
  return _data != 0 ? _data->asIntegral<T>() : T(0);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2b00      	cmp	r3, #0
 800340e:	d004      	beq.n	800341a <_ZN19ArduinoJson6101_1109variantAsImEENS_9enable_ifIXsrNS_11is_integralIT_EE5valueES3_E4typeEPKNS_11VariantDataE+0x18>
 8003410:	6878      	ldr	r0, [r7, #4]
 8003412:	f000 f96d 	bl	80036f0 <_ZNK19ArduinoJson6101_11011VariantData10asIntegralImEET_v>
 8003416:	4603      	mov	r3, r0
 8003418:	e000      	b.n	800341c <_ZN19ArduinoJson6101_1109variantAsImEENS_9enable_ifIXsrNS_11is_integralIT_EE5valueES3_E4typeEPKNS_11VariantDataE+0x1a>
 800341a:	2300      	movs	r3, #0
}
 800341c:	4618      	mov	r0, r3
 800341e:	3708      	adds	r7, #8
 8003420:	46bd      	mov	sp, r7
 8003422:	bd80      	pop	{r7, pc}

08003424 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE4moveEv>:
  void move() {
 8003424:	b480      	push	{r7}
 8003426:	b083      	sub	sp, #12
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
    _loaded = false;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2200      	movs	r2, #0
 8003430:	739a      	strb	r2, [r3, #14]
  }
 8003432:	bf00      	nop
 8003434:	370c      	adds	r7, #12
 8003436:	46bd      	mov	sp, r7
 8003438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343c:	4770      	bx	lr

0800343e <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE8parseKeyERPKc>:
  DeserializationError parseKey(const char *&key) {
 800343e:	b580      	push	{r7, lr}
 8003440:	b082      	sub	sp, #8
 8003442:	af00      	add	r7, sp, #0
 8003444:	6078      	str	r0, [r7, #4]
 8003446:	6039      	str	r1, [r7, #0]
    if (isQuote(current())) {
 8003448:	6878      	ldr	r0, [r7, #4]
 800344a:	f7ff fc97 	bl	8002d7c <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>
 800344e:	4603      	mov	r3, r0
 8003450:	4618      	mov	r0, r3
 8003452:	f000 f813 	bl	800347c <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7isQuoteEc>
 8003456:	4603      	mov	r3, r0
 8003458:	2b00      	cmp	r3, #0
 800345a:	d005      	beq.n	8003468 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE8parseKeyERPKc+0x2a>
      return parseQuotedString(key);
 800345c:	6839      	ldr	r1, [r7, #0]
 800345e:	6878      	ldr	r0, [r7, #4]
 8003460:	f000 f988 	bl	8003774 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseQuotedStringERPKc>
 8003464:	4603      	mov	r3, r0
 8003466:	e005      	b.n	8003474 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE8parseKeyERPKc+0x36>
      return parseNonQuotedString(key);
 8003468:	6839      	ldr	r1, [r7, #0]
 800346a:	6878      	ldr	r0, [r7, #4]
 800346c:	f000 fa1a 	bl	80038a4 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE20parseNonQuotedStringERPKc>
 8003470:	4603      	mov	r3, r0
 8003472:	bf00      	nop
  }
 8003474:	4618      	mov	r0, r3
 8003476:	3708      	adds	r7, #8
 8003478:	46bd      	mov	sp, r7
 800347a:	bd80      	pop	{r7, pc}

0800347c <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7isQuoteEc>:
  static inline bool isQuote(char c) {
 800347c:	b480      	push	{r7}
 800347e:	b083      	sub	sp, #12
 8003480:	af00      	add	r7, sp, #0
 8003482:	4603      	mov	r3, r0
 8003484:	71fb      	strb	r3, [r7, #7]
    return c == '\'' || c == '\"';
 8003486:	79fb      	ldrb	r3, [r7, #7]
 8003488:	2b27      	cmp	r3, #39	@ 0x27
 800348a:	d002      	beq.n	8003492 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7isQuoteEc+0x16>
 800348c:	79fb      	ldrb	r3, [r7, #7]
 800348e:	2b22      	cmp	r3, #34	@ 0x22
 8003490:	d101      	bne.n	8003496 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7isQuoteEc+0x1a>
 8003492:	2301      	movs	r3, #1
 8003494:	e000      	b.n	8003498 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7isQuoteEc+0x1c>
 8003496:	2300      	movs	r3, #0
  }
 8003498:	4618      	mov	r0, r3
 800349a:	370c      	adds	r7, #12
 800349c:	46bd      	mov	sp, r7
 800349e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a2:	4770      	bx	lr

080034a4 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE16parseStringValueERNS_11VariantDataE>:
  DeserializationError parseStringValue(VariantData &variant) {
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b088      	sub	sp, #32
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
 80034ac:	6039      	str	r1, [r7, #0]
    DeserializationError err = parseQuotedString(value);
 80034ae:	f107 0310 	add.w	r3, r7, #16
 80034b2:	4619      	mov	r1, r3
 80034b4:	6878      	ldr	r0, [r7, #4]
 80034b6:	f000 f95d 	bl	8003774 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseQuotedStringERPKc>
 80034ba:	4603      	mov	r3, r0
 80034bc:	733b      	strb	r3, [r7, #12]
    if (err) return err;
 80034be:	f107 0314 	add.w	r3, r7, #20
 80034c2:	f107 020c 	add.w	r2, r7, #12
 80034c6:	4611      	mov	r1, r2
 80034c8:	4618      	mov	r0, r3
 80034ca:	f7fd fffd 	bl	80014c8 <_ZNK19ArduinoJson6101_11020DeserializationErrorcvMS0_KFvvEEv>
 80034ce:	697b      	ldr	r3, [r7, #20]
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d106      	bne.n	80034e2 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE16parseStringValueERNS_11VariantDataE+0x3e>
 80034d4:	69bb      	ldr	r3, [r7, #24]
 80034d6:	f003 0301 	and.w	r3, r3, #1
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d101      	bne.n	80034e2 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE16parseStringValueERNS_11VariantDataE+0x3e>
 80034de:	2301      	movs	r3, #1
 80034e0:	e000      	b.n	80034e4 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE16parseStringValueERNS_11VariantDataE+0x40>
 80034e2:	2300      	movs	r3, #0
 80034e4:	f083 0301 	eor.w	r3, r3, #1
 80034e8:	b2db      	uxtb	r3, r3
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d001      	beq.n	80034f2 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE16parseStringValueERNS_11VariantDataE+0x4e>
 80034ee:	7b3b      	ldrb	r3, [r7, #12]
 80034f0:	e00f      	b.n	8003512 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE16parseStringValueERNS_11VariantDataE+0x6e>
    variant.setOwnedString(make_not_null(value));
 80034f2:	693b      	ldr	r3, [r7, #16]
 80034f4:	4618      	mov	r0, r3
 80034f6:	f7ff f958 	bl	80027aa <_ZN19ArduinoJson6101_11013make_not_nullIPKcEENS_8not_nullIT_EES4_>
 80034fa:	4603      	mov	r3, r0
 80034fc:	4619      	mov	r1, r3
 80034fe:	6838      	ldr	r0, [r7, #0]
 8003500:	f7fd fd69 	bl	8000fd6 <_ZN19ArduinoJson6101_11011VariantData14setOwnedStringENS_8not_nullIPKcEE>
    return DeserializationError::Ok;
 8003504:	f107 031c 	add.w	r3, r7, #28
 8003508:	2100      	movs	r1, #0
 800350a:	4618      	mov	r0, r3
 800350c:	f7fd ffcb 	bl	80014a6 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 8003510:	7f3b      	ldrb	r3, [r7, #28]
  }
 8003512:	4618      	mov	r0, r3
 8003514:	3720      	adds	r7, #32
 8003516:	46bd      	mov	sp, r7
 8003518:	bd80      	pop	{r7, pc}

0800351a <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseNumericValueERNS_11VariantDataE>:
  DeserializationError parseNumericValue(VariantData &result) {
 800351a:	b580      	push	{r7, lr}
 800351c:	b0a0      	sub	sp, #128	@ 0x80
 800351e:	af00      	add	r7, sp, #0
 8003520:	6078      	str	r0, [r7, #4]
 8003522:	6039      	str	r1, [r7, #0]
    uint8_t n = 0;
 8003524:	2300      	movs	r3, #0
 8003526:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    char c = current();
 800352a:	6878      	ldr	r0, [r7, #4]
 800352c:	f7ff fc26 	bl	8002d7c <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>
 8003530:	4603      	mov	r3, r0
 8003532:	f887 307e 	strb.w	r3, [r7, #126]	@ 0x7e
    while (canBeInNonQuotedString(c) && n < 63) {
 8003536:	e013      	b.n	8003560 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseNumericValueERNS_11VariantDataE+0x46>
      move();
 8003538:	6878      	ldr	r0, [r7, #4]
 800353a:	f7ff ff73 	bl	8003424 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE4moveEv>
      buffer[n++] = c;
 800353e:	f897 207e 	ldrb.w	r2, [r7, #126]	@ 0x7e
 8003542:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8003546:	1c59      	adds	r1, r3, #1
 8003548:	f887 107f 	strb.w	r1, [r7, #127]	@ 0x7f
 800354c:	3380      	adds	r3, #128	@ 0x80
 800354e:	443b      	add	r3, r7
 8003550:	f803 2c5c 	strb.w	r2, [r3, #-92]
      c = current();
 8003554:	6878      	ldr	r0, [r7, #4]
 8003556:	f7ff fc11 	bl	8002d7c <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>
 800355a:	4603      	mov	r3, r0
 800355c:	f887 307e 	strb.w	r3, [r7, #126]	@ 0x7e
    while (canBeInNonQuotedString(c) && n < 63) {
 8003560:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 8003564:	4618      	mov	r0, r3
 8003566:	f000 fa08 	bl	800397a <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE22canBeInNonQuotedStringEc>
 800356a:	4603      	mov	r3, r0
 800356c:	2b00      	cmp	r3, #0
 800356e:	d005      	beq.n	800357c <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseNumericValueERNS_11VariantDataE+0x62>
 8003570:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8003574:	2b3e      	cmp	r3, #62	@ 0x3e
 8003576:	d801      	bhi.n	800357c <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseNumericValueERNS_11VariantDataE+0x62>
 8003578:	2301      	movs	r3, #1
 800357a:	e000      	b.n	800357e <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseNumericValueERNS_11VariantDataE+0x64>
 800357c:	2300      	movs	r3, #0
 800357e:	2b00      	cmp	r3, #0
 8003580:	d1da      	bne.n	8003538 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseNumericValueERNS_11VariantDataE+0x1e>
    buffer[n] = 0;
 8003582:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8003586:	3380      	adds	r3, #128	@ 0x80
 8003588:	443b      	add	r3, r7
 800358a:	2200      	movs	r2, #0
 800358c:	f803 2c5c 	strb.w	r2, [r3, #-92]
    c = buffer[0];
 8003590:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8003594:	f887 307e 	strb.w	r3, [r7, #126]	@ 0x7e
    if (c == 't') {  // true
 8003598:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 800359c:	2b74      	cmp	r3, #116	@ 0x74
 800359e:	d114      	bne.n	80035ca <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseNumericValueERNS_11VariantDataE+0xb0>
      result.setBoolean(true);
 80035a0:	2101      	movs	r1, #1
 80035a2:	6838      	ldr	r0, [r7, #0]
 80035a4:	f7fd fcbd 	bl	8000f22 <_ZN19ArduinoJson6101_11011VariantData10setBooleanEb>
      return n == 4 ? DeserializationError::Ok
 80035a8:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 80035ac:	2b04      	cmp	r3, #4
 80035ae:	bf14      	ite	ne
 80035b0:	2301      	movne	r3, #1
 80035b2:	2300      	moveq	r3, #0
 80035b4:	b2db      	uxtb	r3, r3
                    : DeserializationError::IncompleteInput;
 80035b6:	461a      	mov	r2, r3
 80035b8:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80035bc:	4611      	mov	r1, r2
 80035be:	4618      	mov	r0, r3
 80035c0:	f7fd ff71 	bl	80014a6 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 80035c4:	f897 3064 	ldrb.w	r3, [r7, #100]	@ 0x64
 80035c8:	e077      	b.n	80036ba <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseNumericValueERNS_11VariantDataE+0x1a0>
    if (c == 'f') {  // false
 80035ca:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 80035ce:	2b66      	cmp	r3, #102	@ 0x66
 80035d0:	d114      	bne.n	80035fc <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseNumericValueERNS_11VariantDataE+0xe2>
      result.setBoolean(false);
 80035d2:	2100      	movs	r1, #0
 80035d4:	6838      	ldr	r0, [r7, #0]
 80035d6:	f7fd fca4 	bl	8000f22 <_ZN19ArduinoJson6101_11011VariantData10setBooleanEb>
      return n == 5 ? DeserializationError::Ok
 80035da:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 80035de:	2b05      	cmp	r3, #5
 80035e0:	bf14      	ite	ne
 80035e2:	2301      	movne	r3, #1
 80035e4:	2300      	moveq	r3, #0
 80035e6:	b2db      	uxtb	r3, r3
                    : DeserializationError::IncompleteInput;
 80035e8:	461a      	mov	r2, r3
 80035ea:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 80035ee:	4611      	mov	r1, r2
 80035f0:	4618      	mov	r0, r3
 80035f2:	f7fd ff58 	bl	80014a6 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 80035f6:	f897 3068 	ldrb.w	r3, [r7, #104]	@ 0x68
 80035fa:	e05e      	b.n	80036ba <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseNumericValueERNS_11VariantDataE+0x1a0>
    if (c == 'n') {  // null
 80035fc:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 8003600:	2b6e      	cmp	r3, #110	@ 0x6e
 8003602:	d110      	bne.n	8003626 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseNumericValueERNS_11VariantDataE+0x10c>
      return n == 4 ? DeserializationError::Ok
 8003604:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8003608:	2b04      	cmp	r3, #4
 800360a:	bf14      	ite	ne
 800360c:	2301      	movne	r3, #1
 800360e:	2300      	moveq	r3, #0
 8003610:	b2db      	uxtb	r3, r3
                    : DeserializationError::IncompleteInput;
 8003612:	461a      	mov	r2, r3
 8003614:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8003618:	4611      	mov	r1, r2
 800361a:	4618      	mov	r0, r3
 800361c:	f7fd ff43 	bl	80014a6 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 8003620:	f897 306c 	ldrb.w	r3, [r7, #108]	@ 0x6c
 8003624:	e049      	b.n	80036ba <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseNumericValueERNS_11VariantDataE+0x1a0>
    ParsedNumber<Float, UInt> num = parseNumber<Float, UInt>(buffer);
 8003626:	f107 0308 	add.w	r3, r7, #8
 800362a:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 800362e:	4611      	mov	r1, r2
 8003630:	4618      	mov	r0, r3
 8003632:	f000 f9d5 	bl	80039e0 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc>
    switch (num.type()) {
 8003636:	f107 0308 	add.w	r3, r7, #8
 800363a:	4618      	mov	r0, r3
 800363c:	f000 fbd6 	bl	8003dec <_ZNK19ArduinoJson6101_11012ParsedNumberIdyE4typeEv>
 8003640:	4603      	mov	r3, r0
 8003642:	2b08      	cmp	r3, #8
 8003644:	d021      	beq.n	800368a <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseNumericValueERNS_11VariantDataE+0x170>
 8003646:	2b08      	cmp	r3, #8
 8003648:	dc2f      	bgt.n	80036aa <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseNumericValueERNS_11VariantDataE+0x190>
 800364a:	2b06      	cmp	r3, #6
 800364c:	d00f      	beq.n	800366e <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseNumericValueERNS_11VariantDataE+0x154>
 800364e:	2b07      	cmp	r3, #7
 8003650:	d12b      	bne.n	80036aa <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseNumericValueERNS_11VariantDataE+0x190>
        result.setNegativeInteger(num.uintValue);
 8003652:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003656:	6838      	ldr	r0, [r7, #0]
 8003658:	f7fd fc9e 	bl	8000f98 <_ZN19ArduinoJson6101_11011VariantData18setNegativeIntegerEy>
        return DeserializationError::Ok;
 800365c:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8003660:	2100      	movs	r1, #0
 8003662:	4618      	mov	r0, r3
 8003664:	f7fd ff1f 	bl	80014a6 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 8003668:	f897 3070 	ldrb.w	r3, [r7, #112]	@ 0x70
 800366c:	e025      	b.n	80036ba <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseNumericValueERNS_11VariantDataE+0x1a0>
        result.setPositiveInteger(num.uintValue);
 800366e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003672:	6838      	ldr	r0, [r7, #0]
 8003674:	f7fd fc7d 	bl	8000f72 <_ZN19ArduinoJson6101_11011VariantData18setPositiveIntegerEy>
        return DeserializationError::Ok;
 8003678:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 800367c:	2100      	movs	r1, #0
 800367e:	4618      	mov	r0, r3
 8003680:	f7fd ff11 	bl	80014a6 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 8003684:	f897 3074 	ldrb.w	r3, [r7, #116]	@ 0x74
 8003688:	e017      	b.n	80036ba <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseNumericValueERNS_11VariantDataE+0x1a0>
        result.setFloat(num.floatValue);
 800368a:	ed97 7b04 	vldr	d7, [r7, #16]
 800368e:	eeb0 0b47 	vmov.f64	d0, d7
 8003692:	6838      	ldr	r0, [r7, #0]
 8003694:	f7fd fc5a 	bl	8000f4c <_ZN19ArduinoJson6101_11011VariantData8setFloatEd>
        return DeserializationError::Ok;
 8003698:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 800369c:	2100      	movs	r1, #0
 800369e:	4618      	mov	r0, r3
 80036a0:	f7fd ff01 	bl	80014a6 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 80036a4:	f897 3078 	ldrb.w	r3, [r7, #120]	@ 0x78
 80036a8:	e007      	b.n	80036ba <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseNumericValueERNS_11VariantDataE+0x1a0>
    return DeserializationError::InvalidInput;
 80036aa:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 80036ae:	2102      	movs	r1, #2
 80036b0:	4618      	mov	r0, r3
 80036b2:	f7fd fef8 	bl	80014a6 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 80036b6:	f897 307c 	ldrb.w	r3, [r7, #124]	@ 0x7c
  }
 80036ba:	4618      	mov	r0, r3
 80036bc:	3780      	adds	r7, #128	@ 0x80
 80036be:	46bd      	mov	sp, r7
 80036c0:	bd80      	pop	{r7, pc}

080036c2 <_ZNK19ArduinoJson6101_11011VariantData9getMemberINS_21ConstRamStringAdapterEEEPS0_T_>:
  VariantData *getMember(TAdaptedString key) const {
 80036c2:	b580      	push	{r7, lr}
 80036c4:	b082      	sub	sp, #8
 80036c6:	af00      	add	r7, sp, #0
 80036c8:	6078      	str	r0, [r7, #4]
 80036ca:	6039      	str	r1, [r7, #0]
    return isObject() ? _content.asCollection.get(key) : 0;
 80036cc:	6878      	ldr	r0, [r7, #4]
 80036ce:	f7fd fc15 	bl	8000efc <_ZNK19ArduinoJson6101_11011VariantData8isObjectEv>
 80036d2:	4603      	mov	r3, r0
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d006      	beq.n	80036e6 <_ZNK19ArduinoJson6101_11011VariantData9getMemberINS_21ConstRamStringAdapterEEEPS0_T_+0x24>
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6839      	ldr	r1, [r7, #0]
 80036dc:	4618      	mov	r0, r3
 80036de:	f7ff f8a0 	bl	8002822 <_ZNK19ArduinoJson6101_11014CollectionData3getINS_21ConstRamStringAdapterEEEPNS_11VariantDataET_>
 80036e2:	4603      	mov	r3, r0
 80036e4:	e000      	b.n	80036e8 <_ZNK19ArduinoJson6101_11011VariantData9getMemberINS_21ConstRamStringAdapterEEEPS0_T_+0x26>
 80036e6:	2300      	movs	r3, #0
  }
 80036e8:	4618      	mov	r0, r3
 80036ea:	3708      	adds	r7, #8
 80036ec:	46bd      	mov	sp, r7
 80036ee:	bd80      	pop	{r7, pc}

080036f0 <_ZNK19ArduinoJson6101_11011VariantData10asIntegralImEET_v>:
inline T VariantData::asIntegral() const {
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b082      	sub	sp, #8
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
  switch (type()) {
 80036f8:	6878      	ldr	r0, [r7, #4]
 80036fa:	f7fd fca2 	bl	8001042 <_ZNK19ArduinoJson6101_11011VariantData4typeEv>
 80036fe:	4603      	mov	r3, r0
 8003700:	3b03      	subs	r3, #3
 8003702:	2b05      	cmp	r3, #5
 8003704:	d830      	bhi.n	8003768 <_ZNK19ArduinoJson6101_11011VariantData10asIntegralImEET_v+0x78>
 8003706:	a201      	add	r2, pc, #4	@ (adr r2, 800370c <_ZNK19ArduinoJson6101_11011VariantData10asIntegralImEET_v+0x1c>)
 8003708:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800370c:	08003749 	.word	0x08003749
 8003710:	08003749 	.word	0x08003749
 8003714:	08003725 	.word	0x08003725
 8003718:	08003725 	.word	0x08003725
 800371c:	08003737 	.word	0x08003737
 8003720:	08003757 	.word	0x08003757
      return convertPositiveInteger<T>(_content.asInteger);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	e9d3 2300 	ldrd	r2, r3, [r3]
 800372a:	4610      	mov	r0, r2
 800372c:	4619      	mov	r1, r3
 800372e:	f000 fb7e 	bl	8003e2e <_ZN19ArduinoJson6101_11022convertPositiveIntegerImyEET_T0_>
 8003732:	4603      	mov	r3, r0
 8003734:	e019      	b.n	800376a <_ZNK19ArduinoJson6101_11011VariantData10asIntegralImEET_v+0x7a>
      return convertNegativeInteger<T>(_content.asInteger);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	e9d3 2300 	ldrd	r2, r3, [r3]
 800373c:	4610      	mov	r0, r2
 800373e:	4619      	mov	r1, r3
 8003740:	f000 fb88 	bl	8003e54 <_ZN19ArduinoJson6101_11022convertNegativeIntegerImyEET_T0_>
 8003744:	4603      	mov	r3, r0
 8003746:	e010      	b.n	800376a <_ZNK19ArduinoJson6101_11011VariantData10asIntegralImEET_v+0x7a>
      return parseInteger<T>(_content.asString);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	4618      	mov	r0, r3
 800374e:	f000 fb95 	bl	8003e7c <_ZN19ArduinoJson6101_11012parseIntegerImEET_PKc>
 8003752:	4603      	mov	r3, r0
 8003754:	e009      	b.n	800376a <_ZNK19ArduinoJson6101_11011VariantData10asIntegralImEET_v+0x7a>
      return convertFloat<T>(_content.asFloat);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	ed93 7b00 	vldr	d7, [r3]
 800375c:	eeb0 0b47 	vmov.f64	d0, d7
 8003760:	f000 fba0 	bl	8003ea4 <_ZN19ArduinoJson6101_11012convertFloatImdEENS_9enable_ifIXntsrNS_17is_floating_pointIT_EE5valueES3_E4typeET0_>
 8003764:	4603      	mov	r3, r0
 8003766:	e000      	b.n	800376a <_ZNK19ArduinoJson6101_11011VariantData10asIntegralImEET_v+0x7a>
      return 0;
 8003768:	2300      	movs	r3, #0
}
 800376a:	4618      	mov	r0, r3
 800376c:	3708      	adds	r7, #8
 800376e:	46bd      	mov	sp, r7
 8003770:	bd80      	pop	{r7, pc}
 8003772:	bf00      	nop

08003774 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseQuotedStringERPKc>:
  DeserializationError parseQuotedString(const char *&result) {
 8003774:	b580      	push	{r7, lr}
 8003776:	b08c      	sub	sp, #48	@ 0x30
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
 800377c:	6039      	str	r1, [r7, #0]
    StringBuilder builder = _stringStorage.startString();
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	f103 0208 	add.w	r2, r3, #8
 8003784:	f107 0308 	add.w	r3, r7, #8
 8003788:	4611      	mov	r1, r2
 800378a:	4618      	mov	r0, r3
 800378c:	f7fd fe40 	bl	8001410 <_ZN19ArduinoJson6101_11012StringCopier11startStringEv>
    const char stopChar = current();
 8003790:	6878      	ldr	r0, [r7, #4]
 8003792:	f7ff faf3 	bl	8002d7c <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>
 8003796:	4603      	mov	r3, r0
 8003798:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
    move();
 800379c:	6878      	ldr	r0, [r7, #4]
 800379e:	f7ff fe41 	bl	8003424 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE4moveEv>
      char c = current();
 80037a2:	6878      	ldr	r0, [r7, #4]
 80037a4:	f7ff faea 	bl	8002d7c <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>
 80037a8:	4603      	mov	r3, r0
 80037aa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      move();
 80037ae:	6878      	ldr	r0, [r7, #4]
 80037b0:	f7ff fe38 	bl	8003424 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE4moveEv>
      if (c == stopChar) break;
 80037b4:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 80037b8:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80037bc:	429a      	cmp	r2, r3
 80037be:	d04f      	beq.n	8003860 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseQuotedStringERPKc+0xec>
      if (c == '\0') return DeserializationError::IncompleteInput;
 80037c0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d107      	bne.n	80037d8 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseQuotedStringERPKc+0x64>
 80037c8:	f107 0318 	add.w	r3, r7, #24
 80037cc:	2101      	movs	r1, #1
 80037ce:	4618      	mov	r0, r3
 80037d0:	f7fd fe69 	bl	80014a6 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 80037d4:	7e3b      	ldrb	r3, [r7, #24]
 80037d6:	e061      	b.n	800389c <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseQuotedStringERPKc+0x128>
      if (c == '\\') {
 80037d8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80037dc:	2b5c      	cmp	r3, #92	@ 0x5c
 80037de:	d136      	bne.n	800384e <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseQuotedStringERPKc+0xda>
        c = current();
 80037e0:	6878      	ldr	r0, [r7, #4]
 80037e2:	f7ff facb 	bl	8002d7c <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>
 80037e6:	4603      	mov	r3, r0
 80037e8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        if (c == '\0') return DeserializationError::IncompleteInput;
 80037ec:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d107      	bne.n	8003804 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseQuotedStringERPKc+0x90>
 80037f4:	f107 031c 	add.w	r3, r7, #28
 80037f8:	2101      	movs	r1, #1
 80037fa:	4618      	mov	r0, r3
 80037fc:	f7fd fe53 	bl	80014a6 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 8003800:	7f3b      	ldrb	r3, [r7, #28]
 8003802:	e04b      	b.n	800389c <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseQuotedStringERPKc+0x128>
        if (c == 'u') {
 8003804:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8003808:	2b75      	cmp	r3, #117	@ 0x75
 800380a:	d108      	bne.n	800381e <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseQuotedStringERPKc+0xaa>
          return DeserializationError::NotSupported;
 800380c:	f107 0320 	add.w	r3, r7, #32
 8003810:	2104      	movs	r1, #4
 8003812:	4618      	mov	r0, r3
 8003814:	f7fd fe47 	bl	80014a6 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 8003818:	f897 3020 	ldrb.w	r3, [r7, #32]
 800381c:	e03e      	b.n	800389c <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseQuotedStringERPKc+0x128>
        c = EscapeSequence::unescapeChar(c);
 800381e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8003822:	4618      	mov	r0, r3
 8003824:	f7fd fec2 	bl	80015ac <_ZN19ArduinoJson6101_11014EscapeSequence12unescapeCharEc>
 8003828:	4603      	mov	r3, r0
 800382a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        if (c == '\0') return DeserializationError::InvalidInput;
 800382e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8003832:	2b00      	cmp	r3, #0
 8003834:	d108      	bne.n	8003848 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseQuotedStringERPKc+0xd4>
 8003836:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800383a:	2102      	movs	r1, #2
 800383c:	4618      	mov	r0, r3
 800383e:	f7fd fe32 	bl	80014a6 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 8003842:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8003846:	e029      	b.n	800389c <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseQuotedStringERPKc+0x128>
        move();
 8003848:	6878      	ldr	r0, [r7, #4]
 800384a:	f7ff fdeb 	bl	8003424 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE4moveEv>
      builder.append(c);
 800384e:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8003852:	f107 0308 	add.w	r3, r7, #8
 8003856:	4611      	mov	r1, r2
 8003858:	4618      	mov	r0, r3
 800385a:	f7fd fd89 	bl	8001370 <_ZN19ArduinoJson6101_11013StringBuilder6appendEc>
    for (;;) {
 800385e:	e7a0      	b.n	80037a2 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseQuotedStringERPKc+0x2e>
      if (c == stopChar) break;
 8003860:	bf00      	nop
    result = builder.complete();
 8003862:	f107 0308 	add.w	r3, r7, #8
 8003866:	4618      	mov	r0, r3
 8003868:	f7fd fda7 	bl	80013ba <_ZN19ArduinoJson6101_11013StringBuilder8completeEv>
 800386c:	4602      	mov	r2, r0
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	601a      	str	r2, [r3, #0]
    if (!result) return DeserializationError::NoMemory;
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	2b00      	cmp	r3, #0
 8003878:	d108      	bne.n	800388c <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseQuotedStringERPKc+0x118>
 800387a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800387e:	2103      	movs	r1, #3
 8003880:	4618      	mov	r0, r3
 8003882:	f7fd fe10 	bl	80014a6 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 8003886:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800388a:	e007      	b.n	800389c <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseQuotedStringERPKc+0x128>
    return DeserializationError::Ok;
 800388c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003890:	2100      	movs	r1, #0
 8003892:	4618      	mov	r0, r3
 8003894:	f7fd fe07 	bl	80014a6 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 8003898:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
  }
 800389c:	4618      	mov	r0, r3
 800389e:	3730      	adds	r7, #48	@ 0x30
 80038a0:	46bd      	mov	sp, r7
 80038a2:	bd80      	pop	{r7, pc}

080038a4 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE20parseNonQuotedStringERPKc>:
  DeserializationError parseNonQuotedString(const char *&result) {
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b08a      	sub	sp, #40	@ 0x28
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
 80038ac:	6039      	str	r1, [r7, #0]
    StringBuilder builder = _stringStorage.startString();
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	f103 0208 	add.w	r2, r3, #8
 80038b4:	f107 0308 	add.w	r3, r7, #8
 80038b8:	4611      	mov	r1, r2
 80038ba:	4618      	mov	r0, r3
 80038bc:	f7fd fda8 	bl	8001410 <_ZN19ArduinoJson6101_11012StringCopier11startStringEv>
    char c = current();
 80038c0:	6878      	ldr	r0, [r7, #4]
 80038c2:	f7ff fa5b 	bl	8002d7c <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>
 80038c6:	4603      	mov	r3, r0
 80038c8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (c == '\0') return DeserializationError::IncompleteInput;
 80038cc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d107      	bne.n	80038e4 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE20parseNonQuotedStringERPKc+0x40>
 80038d4:	f107 0318 	add.w	r3, r7, #24
 80038d8:	2101      	movs	r1, #1
 80038da:	4618      	mov	r0, r3
 80038dc:	f7fd fde3 	bl	80014a6 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 80038e0:	7e3b      	ldrb	r3, [r7, #24]
 80038e2:	e046      	b.n	8003972 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE20parseNonQuotedStringERPKc+0xce>
    if (canBeInNonQuotedString(c)) {  // no quotes
 80038e4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80038e8:	4618      	mov	r0, r3
 80038ea:	f000 f846 	bl	800397a <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE22canBeInNonQuotedStringEc>
 80038ee:	4603      	mov	r3, r0
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d019      	beq.n	8003928 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE20parseNonQuotedStringERPKc+0x84>
        move();
 80038f4:	6878      	ldr	r0, [r7, #4]
 80038f6:	f7ff fd95 	bl	8003424 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE4moveEv>
        builder.append(c);
 80038fa:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 80038fe:	f107 0308 	add.w	r3, r7, #8
 8003902:	4611      	mov	r1, r2
 8003904:	4618      	mov	r0, r3
 8003906:	f7fd fd33 	bl	8001370 <_ZN19ArduinoJson6101_11013StringBuilder6appendEc>
        c = current();
 800390a:	6878      	ldr	r0, [r7, #4]
 800390c:	f7ff fa36 	bl	8002d7c <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>
 8003910:	4603      	mov	r3, r0
 8003912:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      } while (canBeInNonQuotedString(c));
 8003916:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800391a:	4618      	mov	r0, r3
 800391c:	f000 f82d 	bl	800397a <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE22canBeInNonQuotedStringEc>
 8003920:	4603      	mov	r3, r0
 8003922:	2b00      	cmp	r3, #0
 8003924:	d1e6      	bne.n	80038f4 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE20parseNonQuotedStringERPKc+0x50>
 8003926:	e007      	b.n	8003938 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE20parseNonQuotedStringERPKc+0x94>
      return DeserializationError::InvalidInput;
 8003928:	f107 031c 	add.w	r3, r7, #28
 800392c:	2102      	movs	r1, #2
 800392e:	4618      	mov	r0, r3
 8003930:	f7fd fdb9 	bl	80014a6 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 8003934:	7f3b      	ldrb	r3, [r7, #28]
 8003936:	e01c      	b.n	8003972 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE20parseNonQuotedStringERPKc+0xce>
    result = builder.complete();
 8003938:	f107 0308 	add.w	r3, r7, #8
 800393c:	4618      	mov	r0, r3
 800393e:	f7fd fd3c 	bl	80013ba <_ZN19ArduinoJson6101_11013StringBuilder8completeEv>
 8003942:	4602      	mov	r2, r0
 8003944:	683b      	ldr	r3, [r7, #0]
 8003946:	601a      	str	r2, [r3, #0]
    if (!result) return DeserializationError::NoMemory;
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	2b00      	cmp	r3, #0
 800394e:	d108      	bne.n	8003962 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE20parseNonQuotedStringERPKc+0xbe>
 8003950:	f107 0320 	add.w	r3, r7, #32
 8003954:	2103      	movs	r1, #3
 8003956:	4618      	mov	r0, r3
 8003958:	f7fd fda5 	bl	80014a6 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 800395c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003960:	e007      	b.n	8003972 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE20parseNonQuotedStringERPKc+0xce>
    return DeserializationError::Ok;
 8003962:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003966:	2100      	movs	r1, #0
 8003968:	4618      	mov	r0, r3
 800396a:	f7fd fd9c 	bl	80014a6 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 800396e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
  }
 8003972:	4618      	mov	r0, r3
 8003974:	3728      	adds	r7, #40	@ 0x28
 8003976:	46bd      	mov	sp, r7
 8003978:	bd80      	pop	{r7, pc}

0800397a <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE22canBeInNonQuotedStringEc>:
  static inline bool canBeInNonQuotedString(char c) {
 800397a:	b580      	push	{r7, lr}
 800397c:	b082      	sub	sp, #8
 800397e:	af00      	add	r7, sp, #0
 8003980:	4603      	mov	r3, r0
 8003982:	71fb      	strb	r3, [r7, #7]
    return isBetween(c, '0', '9') || isBetween(c, '_', 'z') ||
 8003984:	79fb      	ldrb	r3, [r7, #7]
 8003986:	2239      	movs	r2, #57	@ 0x39
 8003988:	2130      	movs	r1, #48	@ 0x30
 800398a:	4618      	mov	r0, r3
 800398c:	f000 fab5 	bl	8003efa <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE9isBetweenEccc>
 8003990:	4603      	mov	r3, r0
           isBetween(c, 'A', 'Z') || c == '+' || c == '-' || c == '.';
 8003992:	2b00      	cmp	r3, #0
 8003994:	d11a      	bne.n	80039cc <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE22canBeInNonQuotedStringEc+0x52>
    return isBetween(c, '0', '9') || isBetween(c, '_', 'z') ||
 8003996:	79fb      	ldrb	r3, [r7, #7]
 8003998:	227a      	movs	r2, #122	@ 0x7a
 800399a:	215f      	movs	r1, #95	@ 0x5f
 800399c:	4618      	mov	r0, r3
 800399e:	f000 faac 	bl	8003efa <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE9isBetweenEccc>
 80039a2:	4603      	mov	r3, r0
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d111      	bne.n	80039cc <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE22canBeInNonQuotedStringEc+0x52>
           isBetween(c, 'A', 'Z') || c == '+' || c == '-' || c == '.';
 80039a8:	79fb      	ldrb	r3, [r7, #7]
 80039aa:	225a      	movs	r2, #90	@ 0x5a
 80039ac:	2141      	movs	r1, #65	@ 0x41
 80039ae:	4618      	mov	r0, r3
 80039b0:	f000 faa3 	bl	8003efa <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE9isBetweenEccc>
 80039b4:	4603      	mov	r3, r0
    return isBetween(c, '0', '9') || isBetween(c, '_', 'z') ||
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d108      	bne.n	80039cc <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE22canBeInNonQuotedStringEc+0x52>
           isBetween(c, 'A', 'Z') || c == '+' || c == '-' || c == '.';
 80039ba:	79fb      	ldrb	r3, [r7, #7]
 80039bc:	2b2b      	cmp	r3, #43	@ 0x2b
 80039be:	d005      	beq.n	80039cc <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE22canBeInNonQuotedStringEc+0x52>
 80039c0:	79fb      	ldrb	r3, [r7, #7]
 80039c2:	2b2d      	cmp	r3, #45	@ 0x2d
 80039c4:	d002      	beq.n	80039cc <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE22canBeInNonQuotedStringEc+0x52>
 80039c6:	79fb      	ldrb	r3, [r7, #7]
 80039c8:	2b2e      	cmp	r3, #46	@ 0x2e
 80039ca:	d101      	bne.n	80039d0 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE22canBeInNonQuotedStringEc+0x56>
 80039cc:	2301      	movs	r3, #1
 80039ce:	e000      	b.n	80039d2 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE22canBeInNonQuotedStringEc+0x58>
 80039d0:	2300      	movs	r3, #0
  }
 80039d2:	4618      	mov	r0, r3
 80039d4:	3708      	adds	r7, #8
 80039d6:	46bd      	mov	sp, r7
 80039d8:	bd80      	pop	{r7, pc}
 80039da:	0000      	movs	r0, r0
 80039dc:	0000      	movs	r0, r0
	...

080039e0 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc>:

template <typename A, typename B>
struct choose_largest : conditional<(sizeof(A) > sizeof(B)), A, B> {};

template <typename TFloat, typename TUInt>
inline ParsedNumber<TFloat, TUInt> parseNumber(const char *s) {
 80039e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80039e4:	b0a2      	sub	sp, #136	@ 0x88
 80039e6:	af02      	add	r7, sp, #8
 80039e8:	6478      	str	r0, [r7, #68]	@ 0x44
 80039ea:	6439      	str	r1, [r7, #64]	@ 0x40
  typedef typename traits::exponent_type exponent_t;
  typedef ParsedNumber<TFloat, TUInt> return_type;

  ARDUINOJSON_ASSERT(s != 0);

  bool is_negative = false;
 80039ec:	2300      	movs	r3, #0
 80039ee:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  switch (*s) {
 80039f2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80039f4:	781b      	ldrb	r3, [r3, #0]
 80039f6:	2b2b      	cmp	r3, #43	@ 0x2b
 80039f8:	d008      	beq.n	8003a0c <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x2c>
 80039fa:	2b2d      	cmp	r3, #45	@ 0x2d
 80039fc:	d10a      	bne.n	8003a14 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x34>
    case '-':
      is_negative = true;
 80039fe:	2301      	movs	r3, #1
 8003a00:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
      s++;
 8003a04:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003a06:	3301      	adds	r3, #1
 8003a08:	643b      	str	r3, [r7, #64]	@ 0x40
      break;
 8003a0a:	e003      	b.n	8003a14 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x34>
    case '+':
      s++;
 8003a0c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003a0e:	3301      	adds	r3, #1
 8003a10:	643b      	str	r3, [r7, #64]	@ 0x40
      break;
 8003a12:	bf00      	nop
  }

  if (*s == 'n' || *s == 'N') return traits::nan();
 8003a14:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003a16:	781b      	ldrb	r3, [r3, #0]
 8003a18:	2b6e      	cmp	r3, #110	@ 0x6e
 8003a1a:	d003      	beq.n	8003a24 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x44>
 8003a1c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003a1e:	781b      	ldrb	r3, [r3, #0]
 8003a20:	2b4e      	cmp	r3, #78	@ 0x4e
 8003a22:	d109      	bne.n	8003a38 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x58>
 8003a24:	f000 fa84 	bl	8003f30 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE3nanEv>
 8003a28:	eeb0 7b40 	vmov.f64	d7, d0
 8003a2c:	eeb0 0b47 	vmov.f64	d0, d7
 8003a30:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8003a32:	f000 fa8b 	bl	8003f4c <_ZN19ArduinoJson6101_11012ParsedNumberIdyEC1Ed>
 8003a36:	e1d4      	b.n	8003de2 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x402>
  if (*s == 'i' || *s == 'I')
 8003a38:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003a3a:	781b      	ldrb	r3, [r3, #0]
 8003a3c:	2b69      	cmp	r3, #105	@ 0x69
 8003a3e:	d003      	beq.n	8003a48 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x68>
 8003a40:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003a42:	781b      	ldrb	r3, [r3, #0]
 8003a44:	2b49      	cmp	r3, #73	@ 0x49
 8003a46:	d114      	bne.n	8003a72 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x92>
    return is_negative ? -traits::inf() : traits::inf();
 8003a48:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d006      	beq.n	8003a5e <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x7e>
 8003a50:	f000 fa92 	bl	8003f78 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE3infEv>
 8003a54:	eeb0 7b40 	vmov.f64	d7, d0
 8003a58:	eeb1 7b47 	vneg.f64	d7, d7
 8003a5c:	e003      	b.n	8003a66 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x86>
 8003a5e:	f000 fa8b 	bl	8003f78 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE3infEv>
 8003a62:	eeb0 7b40 	vmov.f64	d7, d0
 8003a66:	eeb0 0b47 	vmov.f64	d0, d7
 8003a6a:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8003a6c:	f000 fa6e 	bl	8003f4c <_ZN19ArduinoJson6101_11012ParsedNumberIdyEC1Ed>
 8003a70:	e1b7      	b.n	8003de2 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x402>
  if (!isdigit(*s) && *s != '.') return return_type();
 8003a72:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003a74:	781b      	ldrb	r3, [r3, #0]
 8003a76:	4618      	mov	r0, r3
 8003a78:	f7fd fc34 	bl	80012e4 <_ZN19ArduinoJson6101_1107isdigitEc>
 8003a7c:	4603      	mov	r3, r0
 8003a7e:	f083 0301 	eor.w	r3, r3, #1
 8003a82:	b2db      	uxtb	r3, r3
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d005      	beq.n	8003a94 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0xb4>
 8003a88:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003a8a:	781b      	ldrb	r3, [r3, #0]
 8003a8c:	2b2e      	cmp	r3, #46	@ 0x2e
 8003a8e:	d001      	beq.n	8003a94 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0xb4>
 8003a90:	2301      	movs	r3, #1
 8003a92:	e000      	b.n	8003a96 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0xb6>
 8003a94:	2300      	movs	r3, #0
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d003      	beq.n	8003aa2 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0xc2>
 8003a9a:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8003a9c:	f000 fa7a 	bl	8003f94 <_ZN19ArduinoJson6101_11012ParsedNumberIdyEC1Ev>
 8003aa0:	e19f      	b.n	8003de2 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x402>

  mantissa_t mantissa = 0;
 8003aa2:	f04f 0200 	mov.w	r2, #0
 8003aa6:	f04f 0300 	mov.w	r3, #0
 8003aaa:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
  exponent_t exponent_offset = 0;
 8003aae:	2300      	movs	r3, #0
 8003ab0:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  const mantissa_t maxUint = TUInt(-1);
 8003ab4:	f04f 32ff 	mov.w	r2, #4294967295
 8003ab8:	f04f 33ff 	mov.w	r3, #4294967295
 8003abc:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58

  while (isdigit(*s)) {
 8003ac0:	e054      	b.n	8003b6c <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x18c>
    uint8_t digit = uint8_t(*s - '0');
 8003ac2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003ac4:	781b      	ldrb	r3, [r3, #0]
 8003ac6:	3b30      	subs	r3, #48	@ 0x30
 8003ac8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
    if (mantissa > maxUint / 10) break;
 8003acc:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8003ad0:	f112 3f66 	cmn.w	r2, #1717986918	@ 0x66666666
 8003ad4:	49b2      	ldr	r1, [pc, #712]	@ (8003da0 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x3c0>)
 8003ad6:	418b      	sbcs	r3, r1
 8003ad8:	d251      	bcs.n	8003b7e <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x19e>
    mantissa *= 10;
 8003ada:	e9d7 451c 	ldrd	r4, r5, [r7, #112]	@ 0x70
 8003ade:	4622      	mov	r2, r4
 8003ae0:	462b      	mov	r3, r5
 8003ae2:	f04f 0000 	mov.w	r0, #0
 8003ae6:	f04f 0100 	mov.w	r1, #0
 8003aea:	0099      	lsls	r1, r3, #2
 8003aec:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8003af0:	0090      	lsls	r0, r2, #2
 8003af2:	4602      	mov	r2, r0
 8003af4:	460b      	mov	r3, r1
 8003af6:	eb12 0804 	adds.w	r8, r2, r4
 8003afa:	eb43 0905 	adc.w	r9, r3, r5
 8003afe:	eb18 0308 	adds.w	r3, r8, r8
 8003b02:	61bb      	str	r3, [r7, #24]
 8003b04:	eb49 0309 	adc.w	r3, r9, r9
 8003b08:	61fb      	str	r3, [r7, #28]
 8003b0a:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8003b0e:	e9c7 891c 	strd	r8, r9, [r7, #112]	@ 0x70
    if (mantissa > maxUint - digit) break;
 8003b12:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8003b16:	2200      	movs	r2, #0
 8003b18:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003b1a:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003b1c:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8003b20:	460b      	mov	r3, r1
 8003b22:	43db      	mvns	r3, r3
 8003b24:	633b      	str	r3, [r7, #48]	@ 0x30
 8003b26:	4613      	mov	r3, r2
 8003b28:	43db      	mvns	r3, r3
 8003b2a:	637b      	str	r3, [r7, #52]	@ 0x34
 8003b2c:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8003b30:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003b34:	4621      	mov	r1, r4
 8003b36:	4291      	cmp	r1, r2
 8003b38:	4629      	mov	r1, r5
 8003b3a:	eb71 0303 	sbcs.w	r3, r1, r3
 8003b3e:	d320      	bcc.n	8003b82 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x1a2>
    mantissa += digit;
 8003b40:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8003b44:	2200      	movs	r2, #0
 8003b46:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003b48:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003b4a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8003b4e:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	@ 0x28
 8003b52:	4621      	mov	r1, r4
 8003b54:	1851      	adds	r1, r2, r1
 8003b56:	6139      	str	r1, [r7, #16]
 8003b58:	4629      	mov	r1, r5
 8003b5a:	414b      	adcs	r3, r1
 8003b5c:	617b      	str	r3, [r7, #20]
 8003b5e:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8003b62:	e9c7 341c 	strd	r3, r4, [r7, #112]	@ 0x70
    s++;
 8003b66:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003b68:	3301      	adds	r3, #1
 8003b6a:	643b      	str	r3, [r7, #64]	@ 0x40
  while (isdigit(*s)) {
 8003b6c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003b6e:	781b      	ldrb	r3, [r3, #0]
 8003b70:	4618      	mov	r0, r3
 8003b72:	f7fd fbb7 	bl	80012e4 <_ZN19ArduinoJson6101_1107isdigitEc>
 8003b76:	4603      	mov	r3, r0
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d1a2      	bne.n	8003ac2 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0xe2>
 8003b7c:	e002      	b.n	8003b84 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x1a4>
    if (mantissa > maxUint / 10) break;
 8003b7e:	bf00      	nop
 8003b80:	e000      	b.n	8003b84 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x1a4>
    if (mantissa > maxUint - digit) break;
 8003b82:	bf00      	nop
  }

  if (*s == '\0') return return_type(TUInt(mantissa), is_negative);
 8003b84:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003b86:	781b      	ldrb	r3, [r3, #0]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d11b      	bne.n	8003bc4 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x1e4>
 8003b8c:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8003b90:	9300      	str	r3, [sp, #0]
 8003b92:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8003b96:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8003b98:	f000 fa18 	bl	8003fcc <_ZN19ArduinoJson6101_11012ParsedNumberIdyEC1Eyb>
 8003b9c:	e121      	b.n	8003de2 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x402>

  // avoid mantissa overflow
  while (mantissa > traits::mantissa_max) {
    mantissa /= 10;
 8003b9e:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8003ba2:	f04f 020a 	mov.w	r2, #10
 8003ba6:	f04f 0300 	mov.w	r3, #0
 8003baa:	f7fc fdb5 	bl	8000718 <__aeabi_uldivmod>
 8003bae:	4602      	mov	r2, r0
 8003bb0:	460b      	mov	r3, r1
 8003bb2:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
    exponent_offset++;
 8003bb6:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	@ 0x6e
 8003bba:	b29b      	uxth	r3, r3
 8003bbc:	3301      	adds	r3, #1
 8003bbe:	b29b      	uxth	r3, r3
 8003bc0:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  while (mantissa > traits::mantissa_max) {
 8003bc4:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8003bc8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003bcc:	d2e7      	bcs.n	8003b9e <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x1be>
  }

  // remaing digits can't fit in the mantissa
  while (isdigit(*s)) {
 8003bce:	e009      	b.n	8003be4 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x204>
    exponent_offset++;
 8003bd0:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	@ 0x6e
 8003bd4:	b29b      	uxth	r3, r3
 8003bd6:	3301      	adds	r3, #1
 8003bd8:	b29b      	uxth	r3, r3
 8003bda:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
    s++;
 8003bde:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003be0:	3301      	adds	r3, #1
 8003be2:	643b      	str	r3, [r7, #64]	@ 0x40
  while (isdigit(*s)) {
 8003be4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003be6:	781b      	ldrb	r3, [r3, #0]
 8003be8:	4618      	mov	r0, r3
 8003bea:	f7fd fb7b 	bl	80012e4 <_ZN19ArduinoJson6101_1107isdigitEc>
 8003bee:	4603      	mov	r3, r0
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d1ed      	bne.n	8003bd0 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x1f0>
  }

  if (*s == '.') {
 8003bf4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003bf6:	781b      	ldrb	r3, [r3, #0]
 8003bf8:	2b2e      	cmp	r3, #46	@ 0x2e
 8003bfa:	d14c      	bne.n	8003c96 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x2b6>
    s++;
 8003bfc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003bfe:	3301      	adds	r3, #1
 8003c00:	643b      	str	r3, [r7, #64]	@ 0x40
    while (isdigit(*s)) {
 8003c02:	e040      	b.n	8003c86 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x2a6>
      if (mantissa < traits::mantissa_max / 10) {
 8003c04:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8003c08:	f1b2 3f99 	cmp.w	r2, #2576980377	@ 0x99999999
 8003c0c:	4965      	ldr	r1, [pc, #404]	@ (8003da4 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x3c4>)
 8003c0e:	418b      	sbcs	r3, r1
 8003c10:	d236      	bcs.n	8003c80 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x2a0>
        mantissa = mantissa * 10 + uint8_t(*s - '0');
 8003c12:	e9d7 451c 	ldrd	r4, r5, [r7, #112]	@ 0x70
 8003c16:	4622      	mov	r2, r4
 8003c18:	462b      	mov	r3, r5
 8003c1a:	f04f 0000 	mov.w	r0, #0
 8003c1e:	f04f 0100 	mov.w	r1, #0
 8003c22:	0099      	lsls	r1, r3, #2
 8003c24:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8003c28:	0090      	lsls	r0, r2, #2
 8003c2a:	4602      	mov	r2, r0
 8003c2c:	460b      	mov	r3, r1
 8003c2e:	eb12 0a04 	adds.w	sl, r2, r4
 8003c32:	eb43 0b05 	adc.w	fp, r3, r5
 8003c36:	eb1a 030a 	adds.w	r3, sl, sl
 8003c3a:	60bb      	str	r3, [r7, #8]
 8003c3c:	eb4b 030b 	adc.w	r3, fp, fp
 8003c40:	60fb      	str	r3, [r7, #12]
 8003c42:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8003c46:	4652      	mov	r2, sl
 8003c48:	465b      	mov	r3, fp
 8003c4a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003c4c:	7809      	ldrb	r1, [r1, #0]
 8003c4e:	3930      	subs	r1, #48	@ 0x30
 8003c50:	b2c9      	uxtb	r1, r1
 8003c52:	b2c9      	uxtb	r1, r1
 8003c54:	2000      	movs	r0, #0
 8003c56:	6239      	str	r1, [r7, #32]
 8003c58:	6278      	str	r0, [r7, #36]	@ 0x24
 8003c5a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8003c5e:	4621      	mov	r1, r4
 8003c60:	1851      	adds	r1, r2, r1
 8003c62:	6039      	str	r1, [r7, #0]
 8003c64:	4629      	mov	r1, r5
 8003c66:	414b      	adcs	r3, r1
 8003c68:	607b      	str	r3, [r7, #4]
 8003c6a:	e9d7 3400 	ldrd	r3, r4, [r7]
 8003c6e:	e9c7 341c 	strd	r3, r4, [r7, #112]	@ 0x70
        exponent_offset--;
 8003c72:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	@ 0x6e
 8003c76:	b29b      	uxth	r3, r3
 8003c78:	3b01      	subs	r3, #1
 8003c7a:	b29b      	uxth	r3, r3
 8003c7c:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
      }
      s++;
 8003c80:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003c82:	3301      	adds	r3, #1
 8003c84:	643b      	str	r3, [r7, #64]	@ 0x40
    while (isdigit(*s)) {
 8003c86:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003c88:	781b      	ldrb	r3, [r3, #0]
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	f7fd fb2a 	bl	80012e4 <_ZN19ArduinoJson6101_1107isdigitEc>
 8003c90:	4603      	mov	r3, r0
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d1b6      	bne.n	8003c04 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x224>
    }
  }

  int exponent = 0;
 8003c96:	2300      	movs	r3, #0
 8003c98:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (*s == 'e' || *s == 'E') {
 8003c9a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003c9c:	781b      	ldrb	r3, [r3, #0]
 8003c9e:	2b65      	cmp	r3, #101	@ 0x65
 8003ca0:	d003      	beq.n	8003caa <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x2ca>
 8003ca2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003ca4:	781b      	ldrb	r3, [r3, #0]
 8003ca6:	2b45      	cmp	r3, #69	@ 0x45
 8003ca8:	d164      	bne.n	8003d74 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x394>
    s++;
 8003caa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003cac:	3301      	adds	r3, #1
 8003cae:	643b      	str	r3, [r7, #64]	@ 0x40
    bool negative_exponent = false;
 8003cb0:	2300      	movs	r3, #0
 8003cb2:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
    if (*s == '-') {
 8003cb6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003cb8:	781b      	ldrb	r3, [r3, #0]
 8003cba:	2b2d      	cmp	r3, #45	@ 0x2d
 8003cbc:	d106      	bne.n	8003ccc <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x2ec>
      negative_exponent = true;
 8003cbe:	2301      	movs	r3, #1
 8003cc0:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
      s++;
 8003cc4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003cc6:	3301      	adds	r3, #1
 8003cc8:	643b      	str	r3, [r7, #64]	@ 0x40
 8003cca:	e044      	b.n	8003d56 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x376>
    } else if (*s == '+') {
 8003ccc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003cce:	781b      	ldrb	r3, [r3, #0]
 8003cd0:	2b2b      	cmp	r3, #43	@ 0x2b
 8003cd2:	d140      	bne.n	8003d56 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x376>
      s++;
 8003cd4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003cd6:	3301      	adds	r3, #1
 8003cd8:	643b      	str	r3, [r7, #64]	@ 0x40
    }

    while (isdigit(*s)) {
 8003cda:	e03c      	b.n	8003d56 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x376>
      exponent = exponent * 10 + (*s - '0');
 8003cdc:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8003cde:	4613      	mov	r3, r2
 8003ce0:	009b      	lsls	r3, r3, #2
 8003ce2:	4413      	add	r3, r2
 8003ce4:	005b      	lsls	r3, r3, #1
 8003ce6:	461a      	mov	r2, r3
 8003ce8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003cea:	781b      	ldrb	r3, [r3, #0]
 8003cec:	3b30      	subs	r3, #48	@ 0x30
 8003cee:	4413      	add	r3, r2
 8003cf0:	66bb      	str	r3, [r7, #104]	@ 0x68
      if (exponent + exponent_offset > traits::exponent_max) {
 8003cf2:	f9b7 206e 	ldrsh.w	r2, [r7, #110]	@ 0x6e
 8003cf6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003cf8:	4413      	add	r3, r2
 8003cfa:	f5b3 7f9a 	cmp.w	r3, #308	@ 0x134
 8003cfe:	dd27      	ble.n	8003d50 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x370>
        if (negative_exponent)
 8003d00:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d00e      	beq.n	8003d26 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x346>
          return is_negative ? -0.0f : 0.0f;
 8003d08:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d002      	beq.n	8003d16 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x336>
 8003d10:	ed9f 7b1f 	vldr	d7, [pc, #124]	@ 8003d90 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x3b0>
 8003d14:	e001      	b.n	8003d1a <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x33a>
 8003d16:	ed9f 7b20 	vldr	d7, [pc, #128]	@ 8003d98 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x3b8>
 8003d1a:	eeb0 0b47 	vmov.f64	d0, d7
 8003d1e:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8003d20:	f000 f914 	bl	8003f4c <_ZN19ArduinoJson6101_11012ParsedNumberIdyEC1Ed>
 8003d24:	e05d      	b.n	8003de2 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x402>
        else
          return is_negative ? -traits::inf() : traits::inf();
 8003d26:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d006      	beq.n	8003d3c <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x35c>
 8003d2e:	f000 f923 	bl	8003f78 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE3infEv>
 8003d32:	eeb0 7b40 	vmov.f64	d7, d0
 8003d36:	eeb1 7b47 	vneg.f64	d7, d7
 8003d3a:	e003      	b.n	8003d44 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x364>
 8003d3c:	f000 f91c 	bl	8003f78 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE3infEv>
 8003d40:	eeb0 7b40 	vmov.f64	d7, d0
 8003d44:	eeb0 0b47 	vmov.f64	d0, d7
 8003d48:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8003d4a:	f000 f8ff 	bl	8003f4c <_ZN19ArduinoJson6101_11012ParsedNumberIdyEC1Ed>
 8003d4e:	e048      	b.n	8003de2 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x402>
      }
      s++;
 8003d50:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003d52:	3301      	adds	r3, #1
 8003d54:	643b      	str	r3, [r7, #64]	@ 0x40
    while (isdigit(*s)) {
 8003d56:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003d58:	781b      	ldrb	r3, [r3, #0]
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	f7fd fac2 	bl	80012e4 <_ZN19ArduinoJson6101_1107isdigitEc>
 8003d60:	4603      	mov	r3, r0
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d1ba      	bne.n	8003cdc <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x2fc>
    }
    if (negative_exponent) exponent = -exponent;
 8003d66:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d002      	beq.n	8003d74 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x394>
 8003d6e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003d70:	425b      	negs	r3, r3
 8003d72:	66bb      	str	r3, [r7, #104]	@ 0x68
  }
  exponent += exponent_offset;
 8003d74:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	@ 0x6e
 8003d78:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8003d7a:	4413      	add	r3, r2
 8003d7c:	66bb      	str	r3, [r7, #104]	@ 0x68

  // we should be at the end of the string, otherwise it's an error
  if (*s != '\0') return return_type();
 8003d7e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003d80:	781b      	ldrb	r3, [r3, #0]
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d010      	beq.n	8003da8 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x3c8>
 8003d86:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8003d88:	f000 f904 	bl	8003f94 <_ZN19ArduinoJson6101_11012ParsedNumberIdyEC1Ev>
 8003d8c:	e029      	b.n	8003de2 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x402>
 8003d8e:	bf00      	nop
 8003d90:	00000000 	.word	0x00000000
 8003d94:	80000000 	.word	0x80000000
	...
 8003da0:	19999999 	.word	0x19999999
 8003da4:	00019999 	.word	0x00019999

  TFloat result = traits::make_float(static_cast<TFloat>(mantissa), exponent);
 8003da8:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8003dac:	f7fc fc7e 	bl	80006ac <__aeabi_ul2d>
 8003db0:	4602      	mov	r2, r0
 8003db2:	460b      	mov	r3, r1
 8003db4:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 8003db6:	ec43 2b10 	vmov	d0, r2, r3
 8003dba:	f000 f928 	bl	800400e <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE10make_floatIiEEddT_>
 8003dbe:	ed87 0b12 	vstr	d0, [r7, #72]	@ 0x48

  return is_negative ? -result : result;
 8003dc2:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d004      	beq.n	8003dd4 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x3f4>
 8003dca:	ed97 7b12 	vldr	d7, [r7, #72]	@ 0x48
 8003dce:	eeb1 7b47 	vneg.f64	d7, d7
 8003dd2:	e001      	b.n	8003dd8 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x3f8>
 8003dd4:	ed97 7b12 	vldr	d7, [r7, #72]	@ 0x48
 8003dd8:	eeb0 0b47 	vmov.f64	d0, d7
 8003ddc:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8003dde:	f000 f8b5 	bl	8003f4c <_ZN19ArduinoJson6101_11012ParsedNumberIdyEC1Ed>
}
 8003de2:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8003de4:	3780      	adds	r7, #128	@ 0x80
 8003de6:	46bd      	mov	sp, r7
 8003de8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08003dec <_ZNK19ArduinoJson6101_11012ParsedNumberIdyE4typeEv>:
  uint8_t type() const {
 8003dec:	b480      	push	{r7}
 8003dee:	b083      	sub	sp, #12
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
    return _type;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	7c1b      	ldrb	r3, [r3, #16]
  }
 8003df8:	4618      	mov	r0, r3
 8003dfa:	370c      	adds	r7, #12
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e02:	4770      	bx	lr

08003e04 <_ZN19ArduinoJson6101_1109objectGetINS_21ConstRamStringAdapterEEEPNS_11VariantDataEPKNS_14CollectionDataET_>:
  if (!lhs || !rhs) return false;
  return lhs->equalsObject(*rhs);
}

template <typename TAdaptedString>
inline VariantData *objectGet(const CollectionData *obj, TAdaptedString key) {
 8003e04:	b580      	push	{r7, lr}
 8003e06:	b082      	sub	sp, #8
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
 8003e0c:	6039      	str	r1, [r7, #0]
  if (!obj) return 0;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d101      	bne.n	8003e18 <_ZN19ArduinoJson6101_1109objectGetINS_21ConstRamStringAdapterEEEPNS_11VariantDataEPKNS_14CollectionDataET_+0x14>
 8003e14:	2300      	movs	r3, #0
 8003e16:	e006      	b.n	8003e26 <_ZN19ArduinoJson6101_1109objectGetINS_21ConstRamStringAdapterEEEPNS_11VariantDataEPKNS_14CollectionDataET_+0x22>
  return obj->get(key);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6839      	ldr	r1, [r7, #0]
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	f7fe fd00 	bl	8002822 <_ZNK19ArduinoJson6101_11014CollectionData3getINS_21ConstRamStringAdapterEEEPNS_11VariantDataET_>
 8003e22:	4603      	mov	r3, r0
 8003e24:	bf00      	nop
}
 8003e26:	4618      	mov	r0, r3
 8003e28:	3708      	adds	r7, #8
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	bd80      	pop	{r7, pc}

08003e2e <_ZN19ArduinoJson6101_11022convertPositiveIntegerImyEET_T0_>:
canStoreNegativeInteger(TIn) {
  return false;
}

template <typename TOut, typename TIn>
TOut convertPositiveInteger(TIn value) {
 8003e2e:	b580      	push	{r7, lr}
 8003e30:	b082      	sub	sp, #8
 8003e32:	af00      	add	r7, sp, #0
 8003e34:	e9c7 0100 	strd	r0, r1, [r7]
  return canStorePositiveInteger<TOut>(value) ? TOut(value) : 0;
 8003e38:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003e3c:	f000 f937 	bl	80040ae <_ZN19ArduinoJson6101_11023canStorePositiveIntegerImyEENS_9enable_ifIXaasrNS_11is_integralIT_EE5valuelestS3_stT0_EbE4typeES5_>
 8003e40:	4603      	mov	r3, r0
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d001      	beq.n	8003e4a <_ZN19ArduinoJson6101_11022convertPositiveIntegerImyEET_T0_+0x1c>
 8003e46:	683b      	ldr	r3, [r7, #0]
 8003e48:	e000      	b.n	8003e4c <_ZN19ArduinoJson6101_11022convertPositiveIntegerImyEET_T0_+0x1e>
 8003e4a:	2300      	movs	r3, #0
}
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	3708      	adds	r7, #8
 8003e50:	46bd      	mov	sp, r7
 8003e52:	bd80      	pop	{r7, pc}

08003e54 <_ZN19ArduinoJson6101_11022convertNegativeIntegerImyEET_T0_>:

template <typename TOut, typename TIn>
TOut convertNegativeInteger(TIn value) {
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b082      	sub	sp, #8
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	e9c7 0100 	strd	r0, r1, [r7]
  return canStoreNegativeInteger<TOut>(value) ? TOut(~value + 1) : 0;
 8003e5e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003e62:	f000 f93c 	bl	80040de <_ZN19ArduinoJson6101_11023canStoreNegativeIntegerImyEENS_9enable_ifIXaasrNS_11is_integralIT_EE5valuesrNS_11is_unsignedIS3_EE5valueEbE4typeET0_>
 8003e66:	4603      	mov	r3, r0
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d002      	beq.n	8003e72 <_ZN19ArduinoJson6101_11022convertNegativeIntegerImyEET_T0_+0x1e>
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	425b      	negs	r3, r3
 8003e70:	e000      	b.n	8003e74 <_ZN19ArduinoJson6101_11022convertNegativeIntegerImyEET_T0_+0x20>
 8003e72:	2300      	movs	r3, #0
}
 8003e74:	4618      	mov	r0, r3
 8003e76:	3708      	adds	r7, #8
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	bd80      	pop	{r7, pc}

08003e7c <_ZN19ArduinoJson6101_11012parseIntegerImEET_PKc>:
#include "convertNumber.hpp"
#include "parseNumber.hpp"

namespace ARDUINOJSON_NAMESPACE {
template <typename T>
T parseInteger(const char *s) {
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	b088      	sub	sp, #32
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
  // try to reuse the same parameters as JsonDeserializer
  typedef typename choose_largest<UInt, typename make_unsigned<T>::type>::type
      TUInt;
  return parseNumber<Float, TUInt>(s).template as<T>();
 8003e84:	f107 0308 	add.w	r3, r7, #8
 8003e88:	6879      	ldr	r1, [r7, #4]
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	f7ff fda8 	bl	80039e0 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc>
 8003e90:	f107 0308 	add.w	r3, r7, #8
 8003e94:	4618      	mov	r0, r3
 8003e96:	f000 f92e 	bl	80040f6 <_ZNK19ArduinoJson6101_11012ParsedNumberIdyE2asImEET_v>
 8003e9a:	4603      	mov	r3, r0
}
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	3720      	adds	r7, #32
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	bd80      	pop	{r7, pc}

08003ea4 <_ZN19ArduinoJson6101_11012convertFloatImdEENS_9enable_ifIXntsrNS_17is_floating_pointIT_EE5valueES3_E4typeET0_>:
    TIn value) {
  return TOut(value);
}

template <typename TOut, typename TIn>
typename enable_if<!is_floating_point<TOut>::value, TOut>::type convertFloat(
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	b082      	sub	sp, #8
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	ed87 0b00 	vstr	d0, [r7]
    TIn value) {
  return value >= numeric_limits<TOut>::lowest() &&
 8003eae:	f000 f950 	bl	8004152 <_ZN19ArduinoJson6101_11014numeric_limitsImvE6lowestEv>
 8003eb2:	ee07 0a90 	vmov	s15, r0
 8003eb6:	eeb8 7b67 	vcvt.f64.u32	d7, s15
                 value <= numeric_limits<TOut>::highest()
             ? TOut(value)
 8003eba:	ed97 6b00 	vldr	d6, [r7]
 8003ebe:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8003ec2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ec6:	db13      	blt.n	8003ef0 <_ZN19ArduinoJson6101_11012convertFloatImdEENS_9enable_ifIXntsrNS_17is_floating_pointIT_EE5valueES3_E4typeET0_+0x4c>
                 value <= numeric_limits<TOut>::highest()
 8003ec8:	f000 f94b 	bl	8004162 <_ZN19ArduinoJson6101_11014numeric_limitsImvE7highestEv>
 8003ecc:	ee07 0a90 	vmov	s15, r0
 8003ed0:	eeb8 7b67 	vcvt.f64.u32	d7, s15
  return value >= numeric_limits<TOut>::lowest() &&
 8003ed4:	ed97 6b00 	vldr	d6, [r7]
 8003ed8:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8003edc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ee0:	d806      	bhi.n	8003ef0 <_ZN19ArduinoJson6101_11012convertFloatImdEENS_9enable_ifIXntsrNS_17is_floating_pointIT_EE5valueES3_E4typeET0_+0x4c>
             ? TOut(value)
 8003ee2:	ed97 7b00 	vldr	d7, [r7]
 8003ee6:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8003eea:	ee17 3a90 	vmov	r3, s15
 8003eee:	e000      	b.n	8003ef2 <_ZN19ArduinoJson6101_11012convertFloatImdEENS_9enable_ifIXntsrNS_17is_floating_pointIT_EE5valueES3_E4typeET0_+0x4e>
 8003ef0:	2300      	movs	r3, #0
             : 0;
}
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	3708      	adds	r7, #8
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	bd80      	pop	{r7, pc}

08003efa <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE9isBetweenEccc>:
  static inline bool isBetween(char c, char min, char max) {
 8003efa:	b480      	push	{r7}
 8003efc:	b083      	sub	sp, #12
 8003efe:	af00      	add	r7, sp, #0
 8003f00:	4603      	mov	r3, r0
 8003f02:	71fb      	strb	r3, [r7, #7]
 8003f04:	460b      	mov	r3, r1
 8003f06:	71bb      	strb	r3, [r7, #6]
 8003f08:	4613      	mov	r3, r2
 8003f0a:	717b      	strb	r3, [r7, #5]
    return min <= c && c <= max;
 8003f0c:	79ba      	ldrb	r2, [r7, #6]
 8003f0e:	79fb      	ldrb	r3, [r7, #7]
 8003f10:	429a      	cmp	r2, r3
 8003f12:	d805      	bhi.n	8003f20 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE9isBetweenEccc+0x26>
 8003f14:	79fa      	ldrb	r2, [r7, #7]
 8003f16:	797b      	ldrb	r3, [r7, #5]
 8003f18:	429a      	cmp	r2, r3
 8003f1a:	d801      	bhi.n	8003f20 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE9isBetweenEccc+0x26>
 8003f1c:	2301      	movs	r3, #1
 8003f1e:	e000      	b.n	8003f22 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE9isBetweenEccc+0x28>
 8003f20:	2300      	movs	r3, #0
  }
 8003f22:	4618      	mov	r0, r3
 8003f24:	370c      	adds	r7, #12
 8003f26:	46bd      	mov	sp, r7
 8003f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2c:	4770      	bx	lr
	...

08003f30 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE3nanEv>:
        forge(0x0AFE07B2, 0x7DD78B14)   // 1e-255
    };
    return factors[index];
  }

  static T nan() {
 8003f30:	b580      	push	{r7, lr}
 8003f32:	af00      	add	r7, sp, #0
    return forge(0x7ff80000, 0x00000000);
 8003f34:	2100      	movs	r1, #0
 8003f36:	4804      	ldr	r0, [pc, #16]	@ (8003f48 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE3nanEv+0x18>)
 8003f38:	f000 f91c 	bl	8004174 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE5forgeEmm>
 8003f3c:	eeb0 7b40 	vmov.f64	d7, d0
  }
 8003f40:	eeb0 0b47 	vmov.f64	d0, d7
 8003f44:	bd80      	pop	{r7, pc}
 8003f46:	bf00      	nop
 8003f48:	7ff80000 	.word	0x7ff80000

08003f4c <_ZN19ArduinoJson6101_11012ParsedNumberIdyEC1Ed>:
  ParsedNumber(TFloat value) : floatValue(value), _type(VALUE_IS_FLOAT) {}
 8003f4c:	b480      	push	{r7}
 8003f4e:	b085      	sub	sp, #20
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	60f8      	str	r0, [r7, #12]
 8003f54:	ed87 0b00 	vstr	d0, [r7]
 8003f58:	68f9      	ldr	r1, [r7, #12]
 8003f5a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003f5e:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	2208      	movs	r2, #8
 8003f66:	741a      	strb	r2, [r3, #16]
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	3714      	adds	r7, #20
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f74:	4770      	bx	lr
	...

08003f78 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE3infEv>:

  static T inf() {
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	af00      	add	r7, sp, #0
    return forge(0x7ff00000, 0x00000000);
 8003f7c:	2100      	movs	r1, #0
 8003f7e:	4804      	ldr	r0, [pc, #16]	@ (8003f90 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE3infEv+0x18>)
 8003f80:	f000 f8f8 	bl	8004174 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE5forgeEmm>
 8003f84:	eeb0 7b40 	vmov.f64	d7, d0
  }
 8003f88:	eeb0 0b47 	vmov.f64	d0, d7
 8003f8c:	bd80      	pop	{r7, pc}
 8003f8e:	bf00      	nop
 8003f90:	7ff00000 	.word	0x7ff00000

08003f94 <_ZN19ArduinoJson6101_11012ParsedNumberIdyEC1Ev>:
  ParsedNumber() : uintValue(0), floatValue(0), _type(VALUE_IS_NULL) {}
 8003f94:	b480      	push	{r7}
 8003f96:	b083      	sub	sp, #12
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
 8003f9c:	6879      	ldr	r1, [r7, #4]
 8003f9e:	f04f 0200 	mov.w	r2, #0
 8003fa2:	f04f 0300 	mov.w	r3, #0
 8003fa6:	e9c1 2300 	strd	r2, r3, [r1]
 8003faa:	6879      	ldr	r1, [r7, #4]
 8003fac:	f04f 0200 	mov.w	r2, #0
 8003fb0:	f04f 0300 	mov.w	r3, #0
 8003fb4:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2200      	movs	r2, #0
 8003fbc:	741a      	strb	r2, [r3, #16]
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	370c      	adds	r7, #12
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fca:	4770      	bx	lr

08003fcc <_ZN19ArduinoJson6101_11012ParsedNumberIdyEC1Eyb>:
  ParsedNumber(TUInt value, bool is_negative)
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	b084      	sub	sp, #16
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	60f8      	str	r0, [r7, #12]
 8003fd4:	e9c7 2300 	strd	r2, r3, [r7]
      : uintValue(value),
 8003fd8:	68f9      	ldr	r1, [r7, #12]
 8003fda:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003fde:	e9c1 2300 	strd	r2, r3, [r1]
        floatValue(TFloat(value)),
 8003fe2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003fe6:	f7fc fb61 	bl	80006ac <__aeabi_ul2d>
 8003fea:	4602      	mov	r2, r0
 8003fec:	460b      	mov	r3, r1
 8003fee:	68f9      	ldr	r1, [r7, #12]
 8003ff0:	e9c1 2302 	strd	r2, r3, [r1, #8]
        _type(uint8_t(is_negative ? VALUE_IS_NEGATIVE_INTEGER
 8003ff4:	7e3b      	ldrb	r3, [r7, #24]
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d001      	beq.n	8003ffe <_ZN19ArduinoJson6101_11012ParsedNumberIdyEC1Eyb+0x32>
 8003ffa:	2207      	movs	r2, #7
 8003ffc:	e000      	b.n	8004000 <_ZN19ArduinoJson6101_11012ParsedNumberIdyEC1Eyb+0x34>
 8003ffe:	2206      	movs	r2, #6
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	741a      	strb	r2, [r3, #16]
                                  : VALUE_IS_POSITIVE_INTEGER)) {}
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	4618      	mov	r0, r3
 8004008:	3710      	adds	r7, #16
 800400a:	46bd      	mov	sp, r7
 800400c:	bd80      	pop	{r7, pc}

0800400e <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE10make_floatIiEEddT_>:
  static T make_float(T m, TExponent e) {
 800400e:	b580      	push	{r7, lr}
 8004010:	b086      	sub	sp, #24
 8004012:	af00      	add	r7, sp, #0
 8004014:	ed87 0b02 	vstr	d0, [r7, #8]
 8004018:	6078      	str	r0, [r7, #4]
    if (e > 0) {
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	2b00      	cmp	r3, #0
 800401e:	dd1d      	ble.n	800405c <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE10make_floatIiEEddT_+0x4e>
      for (uint8_t index = 0; e != 0; index++) {
 8004020:	2300      	movs	r3, #0
 8004022:	75fb      	strb	r3, [r7, #23]
 8004024:	e016      	b.n	8004054 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE10make_floatIiEEddT_+0x46>
        if (e & 1) m *= positiveBinaryPowerOfTen(index);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	f003 0301 	and.w	r3, r3, #1
 800402c:	2b00      	cmp	r3, #0
 800402e:	d00b      	beq.n	8004048 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE10make_floatIiEEddT_+0x3a>
 8004030:	7dfb      	ldrb	r3, [r7, #23]
 8004032:	4618      	mov	r0, r3
 8004034:	f000 f8c2 	bl	80041bc <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24positiveBinaryPowerOfTenEi>
 8004038:	eeb0 6b40 	vmov.f64	d6, d0
 800403c:	ed97 7b02 	vldr	d7, [r7, #8]
 8004040:	ee27 7b06 	vmul.f64	d7, d7, d6
 8004044:	ed87 7b02 	vstr	d7, [r7, #8]
        e >>= 1;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	105b      	asrs	r3, r3, #1
 800404c:	607b      	str	r3, [r7, #4]
      for (uint8_t index = 0; e != 0; index++) {
 800404e:	7dfb      	ldrb	r3, [r7, #23]
 8004050:	3301      	adds	r3, #1
 8004052:	75fb      	strb	r3, [r7, #23]
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2b00      	cmp	r3, #0
 8004058:	d1e5      	bne.n	8004026 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE10make_floatIiEEddT_+0x18>
 800405a:	e01f      	b.n	800409c <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE10make_floatIiEEddT_+0x8e>
      e = TExponent(-e);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	425b      	negs	r3, r3
 8004060:	607b      	str	r3, [r7, #4]
      for (uint8_t index = 0; e != 0; index++) {
 8004062:	2300      	movs	r3, #0
 8004064:	75bb      	strb	r3, [r7, #22]
 8004066:	e016      	b.n	8004096 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE10make_floatIiEEddT_+0x88>
        if (e & 1) m *= negativeBinaryPowerOfTen(index);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	f003 0301 	and.w	r3, r3, #1
 800406e:	2b00      	cmp	r3, #0
 8004070:	d00b      	beq.n	800408a <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE10make_floatIiEEddT_+0x7c>
 8004072:	7dbb      	ldrb	r3, [r7, #22]
 8004074:	4618      	mov	r0, r3
 8004076:	f000 f905 	bl	8004284 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi>
 800407a:	eeb0 6b40 	vmov.f64	d6, d0
 800407e:	ed97 7b02 	vldr	d7, [r7, #8]
 8004082:	ee27 7b06 	vmul.f64	d7, d7, d6
 8004086:	ed87 7b02 	vstr	d7, [r7, #8]
        e >>= 1;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	105b      	asrs	r3, r3, #1
 800408e:	607b      	str	r3, [r7, #4]
      for (uint8_t index = 0; e != 0; index++) {
 8004090:	7dbb      	ldrb	r3, [r7, #22]
 8004092:	3301      	adds	r3, #1
 8004094:	75bb      	strb	r3, [r7, #22]
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	2b00      	cmp	r3, #0
 800409a:	d1e5      	bne.n	8004068 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE10make_floatIiEEddT_+0x5a>
    return m;
 800409c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80040a0:	ec43 2b17 	vmov	d7, r2, r3
  }
 80040a4:	eeb0 0b47 	vmov.f64	d0, d7
 80040a8:	3718      	adds	r7, #24
 80040aa:	46bd      	mov	sp, r7
 80040ac:	bd80      	pop	{r7, pc}

080040ae <_ZN19ArduinoJson6101_11023canStorePositiveIntegerImyEENS_9enable_ifIXaasrNS_11is_integralIT_EE5valuelestS3_stT0_EbE4typeES5_>:
canStorePositiveInteger(TIn value) {
 80040ae:	b5b0      	push	{r4, r5, r7, lr}
 80040b0:	b082      	sub	sp, #8
 80040b2:	af00      	add	r7, sp, #0
 80040b4:	e9c7 0100 	strd	r0, r1, [r7]
  return value <= TIn(numeric_limits<TOut>::highest());
 80040b8:	f000 f853 	bl	8004162 <_ZN19ArduinoJson6101_11014numeric_limitsImvE7highestEv>
 80040bc:	4603      	mov	r3, r0
 80040be:	2200      	movs	r2, #0
 80040c0:	461c      	mov	r4, r3
 80040c2:	4615      	mov	r5, r2
 80040c4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80040c8:	4294      	cmp	r4, r2
 80040ca:	eb75 0303 	sbcs.w	r3, r5, r3
 80040ce:	bf2c      	ite	cs
 80040d0:	2301      	movcs	r3, #1
 80040d2:	2300      	movcc	r3, #0
 80040d4:	b2db      	uxtb	r3, r3
}
 80040d6:	4618      	mov	r0, r3
 80040d8:	3708      	adds	r7, #8
 80040da:	46bd      	mov	sp, r7
 80040dc:	bdb0      	pop	{r4, r5, r7, pc}

080040de <_ZN19ArduinoJson6101_11023canStoreNegativeIntegerImyEENS_9enable_ifIXaasrNS_11is_integralIT_EE5valuesrNS_11is_unsignedIS3_EE5valueEbE4typeET0_>:
canStoreNegativeInteger(TIn) {
 80040de:	b480      	push	{r7}
 80040e0:	b083      	sub	sp, #12
 80040e2:	af00      	add	r7, sp, #0
 80040e4:	e9c7 0100 	strd	r0, r1, [r7]
  return false;
 80040e8:	2300      	movs	r3, #0
}
 80040ea:	4618      	mov	r0, r3
 80040ec:	370c      	adds	r7, #12
 80040ee:	46bd      	mov	sp, r7
 80040f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f4:	4770      	bx	lr

080040f6 <_ZNK19ArduinoJson6101_11012ParsedNumberIdyE2asImEET_v>:
  T as() const {
 80040f6:	b580      	push	{r7, lr}
 80040f8:	b082      	sub	sp, #8
 80040fa:	af00      	add	r7, sp, #0
 80040fc:	6078      	str	r0, [r7, #4]
    switch (_type) {
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	7c1b      	ldrb	r3, [r3, #16]
 8004102:	2b08      	cmp	r3, #8
 8004104:	d017      	beq.n	8004136 <_ZNK19ArduinoJson6101_11012ParsedNumberIdyE2asImEET_v+0x40>
 8004106:	2b08      	cmp	r3, #8
 8004108:	dc1e      	bgt.n	8004148 <_ZNK19ArduinoJson6101_11012ParsedNumberIdyE2asImEET_v+0x52>
 800410a:	2b06      	cmp	r3, #6
 800410c:	d00a      	beq.n	8004124 <_ZNK19ArduinoJson6101_11012ParsedNumberIdyE2asImEET_v+0x2e>
 800410e:	2b07      	cmp	r3, #7
 8004110:	d11a      	bne.n	8004148 <_ZNK19ArduinoJson6101_11012ParsedNumberIdyE2asImEET_v+0x52>
        return convertNegativeInteger<T>(uintValue);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004118:	4610      	mov	r0, r2
 800411a:	4619      	mov	r1, r3
 800411c:	f7ff fe9a 	bl	8003e54 <_ZN19ArduinoJson6101_11022convertNegativeIntegerImyEET_T0_>
 8004120:	4603      	mov	r3, r0
 8004122:	e012      	b.n	800414a <_ZNK19ArduinoJson6101_11012ParsedNumberIdyE2asImEET_v+0x54>
        return convertPositiveInteger<T>(uintValue);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	e9d3 2300 	ldrd	r2, r3, [r3]
 800412a:	4610      	mov	r0, r2
 800412c:	4619      	mov	r1, r3
 800412e:	f7ff fe7e 	bl	8003e2e <_ZN19ArduinoJson6101_11022convertPositiveIntegerImyEET_T0_>
 8004132:	4603      	mov	r3, r0
 8004134:	e009      	b.n	800414a <_ZNK19ArduinoJson6101_11012ParsedNumberIdyE2asImEET_v+0x54>
        return convertFloat<T>(floatValue);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	ed93 7b02 	vldr	d7, [r3, #8]
 800413c:	eeb0 0b47 	vmov.f64	d0, d7
 8004140:	f7ff feb0 	bl	8003ea4 <_ZN19ArduinoJson6101_11012convertFloatImdEENS_9enable_ifIXntsrNS_17is_floating_pointIT_EE5valueES3_E4typeET0_>
 8004144:	4603      	mov	r3, r0
 8004146:	e000      	b.n	800414a <_ZNK19ArduinoJson6101_11012ParsedNumberIdyE2asImEET_v+0x54>
        return 0;
 8004148:	2300      	movs	r3, #0
  }
 800414a:	4618      	mov	r0, r3
 800414c:	3708      	adds	r7, #8
 800414e:	46bd      	mov	sp, r7
 8004150:	bd80      	pop	{r7, pc}

08004152 <_ZN19ArduinoJson6101_11014numeric_limitsImvE6lowestEv>:
template <typename T, typename Enable = void>
struct numeric_limits;

template <typename T>
struct numeric_limits<T, typename enable_if<is_unsigned<T>::value>::type> {
  static T lowest() {
 8004152:	b480      	push	{r7}
 8004154:	af00      	add	r7, sp, #0
    return 0;
 8004156:	2300      	movs	r3, #0
  }
 8004158:	4618      	mov	r0, r3
 800415a:	46bd      	mov	sp, r7
 800415c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004160:	4770      	bx	lr

08004162 <_ZN19ArduinoJson6101_11014numeric_limitsImvE7highestEv>:
  static T highest() {
 8004162:	b480      	push	{r7}
 8004164:	af00      	add	r7, sp, #0
    return T(-1);
 8004166:	f04f 33ff 	mov.w	r3, #4294967295
  }
 800416a:	4618      	mov	r0, r3
 800416c:	46bd      	mov	sp, r7
 800416e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004172:	4770      	bx	lr

08004174 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE5forgeEmm>:
  }

  // constructs a double floating point values from its binary representation
  // we use this function to workaround platforms with single precision literals
  // (for example, when -fsingle-precision-constant is passed to GCC)
  static T forge(uint32_t msb, uint32_t lsb) {
 8004174:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004178:	b082      	sub	sp, #8
 800417a:	af00      	add	r7, sp, #0
 800417c:	6078      	str	r0, [r7, #4]
 800417e:	6039      	str	r1, [r7, #0]
    return alias_cast<T>((uint64_t(msb) << 32) | lsb);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2200      	movs	r2, #0
 8004184:	469a      	mov	sl, r3
 8004186:	4693      	mov	fp, r2
 8004188:	f04f 0200 	mov.w	r2, #0
 800418c:	f04f 0300 	mov.w	r3, #0
 8004190:	4653      	mov	r3, sl
 8004192:	2200      	movs	r2, #0
 8004194:	6839      	ldr	r1, [r7, #0]
 8004196:	2000      	movs	r0, #0
 8004198:	460c      	mov	r4, r1
 800419a:	4605      	mov	r5, r0
 800419c:	ea42 0804 	orr.w	r8, r2, r4
 80041a0:	ea43 0905 	orr.w	r9, r3, r5
 80041a4:	4640      	mov	r0, r8
 80041a6:	4649      	mov	r1, r9
 80041a8:	f000 f912 	bl	80043d0 <_ZN19ArduinoJson6101_11010alias_castIdyEET_T0_>
 80041ac:	eeb0 7b40 	vmov.f64	d7, d0
  }
 80041b0:	eeb0 0b47 	vmov.f64	d0, d7
 80041b4:	3708      	adds	r7, #8
 80041b6:	46bd      	mov	sp, r7
 80041b8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080041bc <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24positiveBinaryPowerOfTenEi>:
  static T positiveBinaryPowerOfTen(int index) {
 80041bc:	b580      	push	{r7, lr}
 80041be:	b082      	sub	sp, #8
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
    static T factors[] = {
 80041c4:	4b25      	ldr	r3, [pc, #148]	@ (800425c <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24positiveBinaryPowerOfTenEi+0xa0>)
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f3bf 8f5b 	dmb	ish
 80041cc:	f003 0301 	and.w	r3, r3, #1
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	bf0c      	ite	eq
 80041d4:	2301      	moveq	r3, #1
 80041d6:	2300      	movne	r3, #0
 80041d8:	b2db      	uxtb	r3, r3
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d031      	beq.n	8004242 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24positiveBinaryPowerOfTenEi+0x86>
 80041de:	481f      	ldr	r0, [pc, #124]	@ (800425c <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24positiveBinaryPowerOfTenEi+0xa0>)
 80041e0:	f00e fde4 	bl	8012dac <__cxa_guard_acquire>
 80041e4:	4603      	mov	r3, r0
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	bf14      	ite	ne
 80041ea:	2301      	movne	r3, #1
 80041ec:	2300      	moveq	r3, #0
 80041ee:	b2db      	uxtb	r3, r3
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d026      	beq.n	8004242 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24positiveBinaryPowerOfTenEi+0x86>
        forge(0x4693B8B5, 0xB5056E17),  // 1e32
 80041f4:	491a      	ldr	r1, [pc, #104]	@ (8004260 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24positiveBinaryPowerOfTenEi+0xa4>)
 80041f6:	481b      	ldr	r0, [pc, #108]	@ (8004264 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24positiveBinaryPowerOfTenEi+0xa8>)
 80041f8:	f7ff ffbc 	bl	8004174 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE5forgeEmm>
 80041fc:	eeb0 7b40 	vmov.f64	d7, d0
    static T factors[] = {
 8004200:	4b19      	ldr	r3, [pc, #100]	@ (8004268 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24positiveBinaryPowerOfTenEi+0xac>)
 8004202:	ed83 7b0a 	vstr	d7, [r3, #40]	@ 0x28
        forge(0x4D384F03, 0xE93FF9F5),  // 1e64
 8004206:	4919      	ldr	r1, [pc, #100]	@ (800426c <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24positiveBinaryPowerOfTenEi+0xb0>)
 8004208:	4819      	ldr	r0, [pc, #100]	@ (8004270 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24positiveBinaryPowerOfTenEi+0xb4>)
 800420a:	f7ff ffb3 	bl	8004174 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE5forgeEmm>
 800420e:	eeb0 7b40 	vmov.f64	d7, d0
    static T factors[] = {
 8004212:	4b15      	ldr	r3, [pc, #84]	@ (8004268 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24positiveBinaryPowerOfTenEi+0xac>)
 8004214:	ed83 7b0c 	vstr	d7, [r3, #48]	@ 0x30
        forge(0x5A827748, 0xF9301D32),  // 1e128
 8004218:	4916      	ldr	r1, [pc, #88]	@ (8004274 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24positiveBinaryPowerOfTenEi+0xb8>)
 800421a:	4817      	ldr	r0, [pc, #92]	@ (8004278 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24positiveBinaryPowerOfTenEi+0xbc>)
 800421c:	f7ff ffaa 	bl	8004174 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE5forgeEmm>
 8004220:	eeb0 7b40 	vmov.f64	d7, d0
    static T factors[] = {
 8004224:	4b10      	ldr	r3, [pc, #64]	@ (8004268 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24positiveBinaryPowerOfTenEi+0xac>)
 8004226:	ed83 7b0e 	vstr	d7, [r3, #56]	@ 0x38
        forge(0x75154FDD, 0x7F73BF3C)   // 1e256
 800422a:	4914      	ldr	r1, [pc, #80]	@ (800427c <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24positiveBinaryPowerOfTenEi+0xc0>)
 800422c:	4814      	ldr	r0, [pc, #80]	@ (8004280 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24positiveBinaryPowerOfTenEi+0xc4>)
 800422e:	f7ff ffa1 	bl	8004174 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE5forgeEmm>
 8004232:	eeb0 7b40 	vmov.f64	d7, d0
    static T factors[] = {
 8004236:	4b0c      	ldr	r3, [pc, #48]	@ (8004268 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24positiveBinaryPowerOfTenEi+0xac>)
 8004238:	ed83 7b10 	vstr	d7, [r3, #64]	@ 0x40
 800423c:	4807      	ldr	r0, [pc, #28]	@ (800425c <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24positiveBinaryPowerOfTenEi+0xa0>)
 800423e:	f00e fdc1 	bl	8012dc4 <__cxa_guard_release>
    return factors[index];
 8004242:	4a09      	ldr	r2, [pc, #36]	@ (8004268 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24positiveBinaryPowerOfTenEi+0xac>)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	00db      	lsls	r3, r3, #3
 8004248:	4413      	add	r3, r2
 800424a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800424e:	ec43 2b17 	vmov	d7, r2, r3
  }
 8004252:	eeb0 0b47 	vmov.f64	d0, d7
 8004256:	3708      	adds	r7, #8
 8004258:	46bd      	mov	sp, r7
 800425a:	bd80      	pop	{r7, pc}
 800425c:	2400068c 	.word	0x2400068c
 8004260:	b5056e17 	.word	0xb5056e17
 8004264:	4693b8b5 	.word	0x4693b8b5
 8004268:	24000010 	.word	0x24000010
 800426c:	e93ff9f5 	.word	0xe93ff9f5
 8004270:	4d384f03 	.word	0x4d384f03
 8004274:	f9301d32 	.word	0xf9301d32
 8004278:	5a827748 	.word	0x5a827748
 800427c:	7f73bf3c 	.word	0x7f73bf3c
 8004280:	75154fdd 	.word	0x75154fdd

08004284 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi>:
  static T negativeBinaryPowerOfTen(int index) {
 8004284:	b580      	push	{r7, lr}
 8004286:	b082      	sub	sp, #8
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
    static T factors[] = {
 800428c:	4b3c      	ldr	r3, [pc, #240]	@ (8004380 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0xfc>)
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f3bf 8f5b 	dmb	ish
 8004294:	f003 0301 	and.w	r3, r3, #1
 8004298:	2b00      	cmp	r3, #0
 800429a:	bf0c      	ite	eq
 800429c:	2301      	moveq	r3, #1
 800429e:	2300      	movne	r3, #0
 80042a0:	b2db      	uxtb	r3, r3
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d05e      	beq.n	8004364 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0xe0>
 80042a6:	4836      	ldr	r0, [pc, #216]	@ (8004380 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0xfc>)
 80042a8:	f00e fd80 	bl	8012dac <__cxa_guard_acquire>
 80042ac:	4603      	mov	r3, r0
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	bf14      	ite	ne
 80042b2:	2301      	movne	r3, #1
 80042b4:	2300      	moveq	r3, #0
 80042b6:	b2db      	uxtb	r3, r3
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d053      	beq.n	8004364 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0xe0>
        forge(0x3FB99999, 0x9999999A),  // 1e-1
 80042bc:	4931      	ldr	r1, [pc, #196]	@ (8004384 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x100>)
 80042be:	4832      	ldr	r0, [pc, #200]	@ (8004388 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x104>)
 80042c0:	f7ff ff58 	bl	8004174 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE5forgeEmm>
 80042c4:	eeb0 7b40 	vmov.f64	d7, d0
    static T factors[] = {
 80042c8:	4b30      	ldr	r3, [pc, #192]	@ (800438c <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x108>)
 80042ca:	ed83 7b00 	vstr	d7, [r3]
        forge(0x3F847AE1, 0x47AE147B),  // 1e-2
 80042ce:	4930      	ldr	r1, [pc, #192]	@ (8004390 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x10c>)
 80042d0:	4830      	ldr	r0, [pc, #192]	@ (8004394 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x110>)
 80042d2:	f7ff ff4f 	bl	8004174 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE5forgeEmm>
 80042d6:	eeb0 7b40 	vmov.f64	d7, d0
    static T factors[] = {
 80042da:	4b2c      	ldr	r3, [pc, #176]	@ (800438c <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x108>)
 80042dc:	ed83 7b02 	vstr	d7, [r3, #8]
        forge(0x3F1A36E2, 0xEB1C432D),  // 1e-4
 80042e0:	492d      	ldr	r1, [pc, #180]	@ (8004398 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x114>)
 80042e2:	482e      	ldr	r0, [pc, #184]	@ (800439c <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x118>)
 80042e4:	f7ff ff46 	bl	8004174 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE5forgeEmm>
 80042e8:	eeb0 7b40 	vmov.f64	d7, d0
    static T factors[] = {
 80042ec:	4b27      	ldr	r3, [pc, #156]	@ (800438c <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x108>)
 80042ee:	ed83 7b04 	vstr	d7, [r3, #16]
        forge(0x3E45798E, 0xE2308C3A),  // 1e-8
 80042f2:	492b      	ldr	r1, [pc, #172]	@ (80043a0 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x11c>)
 80042f4:	482b      	ldr	r0, [pc, #172]	@ (80043a4 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x120>)
 80042f6:	f7ff ff3d 	bl	8004174 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE5forgeEmm>
 80042fa:	eeb0 7b40 	vmov.f64	d7, d0
    static T factors[] = {
 80042fe:	4b23      	ldr	r3, [pc, #140]	@ (800438c <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x108>)
 8004300:	ed83 7b06 	vstr	d7, [r3, #24]
        forge(0x3C9CD2B2, 0x97D889BC),  // 1e-16
 8004304:	4928      	ldr	r1, [pc, #160]	@ (80043a8 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x124>)
 8004306:	4829      	ldr	r0, [pc, #164]	@ (80043ac <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x128>)
 8004308:	f7ff ff34 	bl	8004174 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE5forgeEmm>
 800430c:	eeb0 7b40 	vmov.f64	d7, d0
    static T factors[] = {
 8004310:	4b1e      	ldr	r3, [pc, #120]	@ (800438c <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x108>)
 8004312:	ed83 7b08 	vstr	d7, [r3, #32]
        forge(0x3949F623, 0xD5A8A733),  // 1e-32
 8004316:	4926      	ldr	r1, [pc, #152]	@ (80043b0 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x12c>)
 8004318:	4826      	ldr	r0, [pc, #152]	@ (80043b4 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x130>)
 800431a:	f7ff ff2b 	bl	8004174 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE5forgeEmm>
 800431e:	eeb0 7b40 	vmov.f64	d7, d0
    static T factors[] = {
 8004322:	4b1a      	ldr	r3, [pc, #104]	@ (800438c <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x108>)
 8004324:	ed83 7b0a 	vstr	d7, [r3, #40]	@ 0x28
        forge(0x32A50FFD, 0x44F4A73D),  // 1e-64
 8004328:	4923      	ldr	r1, [pc, #140]	@ (80043b8 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x134>)
 800432a:	4824      	ldr	r0, [pc, #144]	@ (80043bc <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x138>)
 800432c:	f7ff ff22 	bl	8004174 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE5forgeEmm>
 8004330:	eeb0 7b40 	vmov.f64	d7, d0
    static T factors[] = {
 8004334:	4b15      	ldr	r3, [pc, #84]	@ (800438c <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x108>)
 8004336:	ed83 7b0c 	vstr	d7, [r3, #48]	@ 0x30
        forge(0x255BBA08, 0xCF8C979D),  // 1e-128
 800433a:	4921      	ldr	r1, [pc, #132]	@ (80043c0 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x13c>)
 800433c:	4821      	ldr	r0, [pc, #132]	@ (80043c4 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x140>)
 800433e:	f7ff ff19 	bl	8004174 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE5forgeEmm>
 8004342:	eeb0 7b40 	vmov.f64	d7, d0
    static T factors[] = {
 8004346:	4b11      	ldr	r3, [pc, #68]	@ (800438c <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x108>)
 8004348:	ed83 7b0e 	vstr	d7, [r3, #56]	@ 0x38
        forge(0x0AC80628, 0x64AC6F43)   // 1e-256
 800434c:	491e      	ldr	r1, [pc, #120]	@ (80043c8 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x144>)
 800434e:	481f      	ldr	r0, [pc, #124]	@ (80043cc <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x148>)
 8004350:	f7ff ff10 	bl	8004174 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE5forgeEmm>
 8004354:	eeb0 7b40 	vmov.f64	d7, d0
    static T factors[] = {
 8004358:	4b0c      	ldr	r3, [pc, #48]	@ (800438c <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x108>)
 800435a:	ed83 7b10 	vstr	d7, [r3, #64]	@ 0x40
 800435e:	4808      	ldr	r0, [pc, #32]	@ (8004380 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0xfc>)
 8004360:	f00e fd30 	bl	8012dc4 <__cxa_guard_release>
    return factors[index];
 8004364:	4a09      	ldr	r2, [pc, #36]	@ (800438c <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x108>)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	00db      	lsls	r3, r3, #3
 800436a:	4413      	add	r3, r2
 800436c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004370:	ec43 2b17 	vmov	d7, r2, r3
  }
 8004374:	eeb0 0b47 	vmov.f64	d0, d7
 8004378:	3708      	adds	r7, #8
 800437a:	46bd      	mov	sp, r7
 800437c:	bd80      	pop	{r7, pc}
 800437e:	bf00      	nop
 8004380:	240006d8 	.word	0x240006d8
 8004384:	9999999a 	.word	0x9999999a
 8004388:	3fb99999 	.word	0x3fb99999
 800438c:	24000690 	.word	0x24000690
 8004390:	47ae147b 	.word	0x47ae147b
 8004394:	3f847ae1 	.word	0x3f847ae1
 8004398:	eb1c432d 	.word	0xeb1c432d
 800439c:	3f1a36e2 	.word	0x3f1a36e2
 80043a0:	e2308c3a 	.word	0xe2308c3a
 80043a4:	3e45798e 	.word	0x3e45798e
 80043a8:	97d889bc 	.word	0x97d889bc
 80043ac:	3c9cd2b2 	.word	0x3c9cd2b2
 80043b0:	d5a8a733 	.word	0xd5a8a733
 80043b4:	3949f623 	.word	0x3949f623
 80043b8:	44f4a73d 	.word	0x44f4a73d
 80043bc:	32a50ffd 	.word	0x32a50ffd
 80043c0:	cf8c979d 	.word	0xcf8c979d
 80043c4:	255bba08 	.word	0x255bba08
 80043c8:	64ac6f43 	.word	0x64ac6f43
 80043cc:	0ac80628 	.word	0x0ac80628

080043d0 <_ZN19ArduinoJson6101_11010alias_castIdyEET_T0_>:
    T data;
  };
};

template <typename T, typename F>
T alias_cast(F raw_data) {
 80043d0:	b480      	push	{r7}
 80043d2:	b085      	sub	sp, #20
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	e9c7 0100 	strd	r0, r1, [r7]
  alias_cast_t<T, F> ac;
  ac.raw = raw_data;
 80043da:	e9d7 2300 	ldrd	r2, r3, [r7]
 80043de:	e9c7 2302 	strd	r2, r3, [r7, #8]
  return ac.data;
 80043e2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80043e6:	ec43 2b17 	vmov	d7, r2, r3
}
 80043ea:	eeb0 0b47 	vmov.f64	d0, d7
 80043ee:	3714      	adds	r7, #20
 80043f0:	46bd      	mov	sp, r7
 80043f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f6:	4770      	bx	lr

080043f8 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 80043f8:	b590      	push	{r4, r7, lr}
 80043fa:	b083      	sub	sp, #12
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
 8004400:	6039      	str	r1, [r7, #0]
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	2b01      	cmp	r3, #1
 8004406:	d12e      	bne.n	8004466 <_Z41__static_initialization_and_destruction_0ii+0x6e>
 8004408:	683b      	ldr	r3, [r7, #0]
 800440a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800440e:	4293      	cmp	r3, r2
 8004410:	d129      	bne.n	8004466 <_Z41__static_initialization_and_destruction_0ii+0x6e>
std::string strJson;
 8004412:	481e      	ldr	r0, [pc, #120]	@ (800448c <_Z41__static_initialization_and_destruction_0ii+0x94>)
 8004414:	f00e fd7b 	bl	8012f0e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
DynamicJsonDocument doc(JSON_BUFF_SIZE);
 8004418:	4622      	mov	r2, r4
 800441a:	f242 7110 	movw	r1, #10000	@ 0x2710
 800441e:	481c      	ldr	r0, [pc, #112]	@ (8004490 <_Z41__static_initialization_and_destruction_0ii+0x98>)
 8004420:	f7fe fa16 	bl	8002850 <_ZN19ArduinoJson6101_11017BasicJsonDocumentINS_16DefaultAllocatorEEC1EjS1_>
  FORCE_INLINE ObjectRef() : base_type(0), _pool(0) {}
 8004424:	4b1b      	ldr	r3, [pc, #108]	@ (8004494 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 8004426:	2100      	movs	r1, #0
 8004428:	4618      	mov	r0, r3
 800442a:	f7fe f9eb 	bl	8002804 <_ZN19ArduinoJson6101_11013ObjectRefBaseINS_14CollectionDataEEC1EPS1_>
 800442e:	4b19      	ldr	r3, [pc, #100]	@ (8004494 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 8004430:	2200      	movs	r2, #0
 8004432:	605a      	str	r2, [r3, #4]
 8004434:	4b18      	ldr	r3, [pc, #96]	@ (8004498 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 8004436:	2100      	movs	r1, #0
 8004438:	4618      	mov	r0, r3
 800443a:	f7fe f9e3 	bl	8002804 <_ZN19ArduinoJson6101_11013ObjectRefBaseINS_14CollectionDataEEC1EPS1_>
 800443e:	4b16      	ldr	r3, [pc, #88]	@ (8004498 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 8004440:	2200      	movs	r2, #0
 8004442:	605a      	str	r2, [r3, #4]
RemoraComms* comms = new RemoraComms(ptrRxData, ptrTxData, SPI1);
 8004444:	2120      	movs	r1, #32
 8004446:	f44f 7008 	mov.w	r0, #544	@ 0x220
 800444a:	f00e fccf 	bl	8012dec <_ZnwjSt11align_val_t>
 800444e:	4603      	mov	r3, r0
 8004450:	461c      	mov	r4, r3
 8004452:	4b12      	ldr	r3, [pc, #72]	@ (800449c <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 8004454:	6819      	ldr	r1, [r3, #0]
 8004456:	4b12      	ldr	r3, [pc, #72]	@ (80044a0 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 8004458:	681a      	ldr	r2, [r3, #0]
 800445a:	4b12      	ldr	r3, [pc, #72]	@ (80044a4 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 800445c:	4620      	mov	r0, r4
 800445e:	f000 fc09 	bl	8004c74 <_ZN11RemoraCommsC1EPV8rxData_tPV8txData_tP11SPI_TypeDef>
 8004462:	4b11      	ldr	r3, [pc, #68]	@ (80044a8 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 8004464:	601c      	str	r4, [r3, #0]
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	2b00      	cmp	r3, #0
 800446a:	d10a      	bne.n	8004482 <_Z41__static_initialization_and_destruction_0ii+0x8a>
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004472:	4293      	cmp	r3, r2
 8004474:	d105      	bne.n	8004482 <_Z41__static_initialization_and_destruction_0ii+0x8a>
DynamicJsonDocument doc(JSON_BUFF_SIZE);
 8004476:	4806      	ldr	r0, [pc, #24]	@ (8004490 <_Z41__static_initialization_and_destruction_0ii+0x98>)
 8004478:	f000 f818 	bl	80044ac <_ZN19ArduinoJson6101_11017BasicJsonDocumentINS_16DefaultAllocatorEED1Ev>
std::string strJson;
 800447c:	4803      	ldr	r0, [pc, #12]	@ (800448c <_Z41__static_initialization_and_destruction_0ii+0x94>)
 800447e:	f00e fd4d 	bl	8012f1c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
}
 8004482:	bf00      	nop
 8004484:	370c      	adds	r7, #12
 8004486:	46bd      	mov	sp, r7
 8004488:	bd90      	pop	{r4, r7, pc}
 800448a:	bf00      	nop
 800448c:	24000524 	.word	0x24000524
 8004490:	24000540 	.word	0x24000540
 8004494:	24000568 	.word	0x24000568
 8004498:	24000570 	.word	0x24000570
 800449c:	24000008 	.word	0x24000008
 80044a0:	2400000c 	.word	0x2400000c
 80044a4:	40013000 	.word	0x40013000
 80044a8:	24000578 	.word	0x24000578

080044ac <_ZN19ArduinoJson6101_11017BasicJsonDocumentINS_16DefaultAllocatorEED1Ev>:
  ~BasicJsonDocument() {
 80044ac:	b580      	push	{r7, lr}
 80044ae:	b082      	sub	sp, #8
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
    freePool();
 80044b4:	6878      	ldr	r0, [r7, #4]
 80044b6:	f000 f805 	bl	80044c4 <_ZN19ArduinoJson6101_11017BasicJsonDocumentINS_16DefaultAllocatorEE8freePoolEv>
  }
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	4618      	mov	r0, r3
 80044be:	3708      	adds	r7, #8
 80044c0:	46bd      	mov	sp, r7
 80044c2:	bd80      	pop	{r7, pc}

080044c4 <_ZN19ArduinoJson6101_11017BasicJsonDocumentINS_16DefaultAllocatorEE8freePoolEv>:
    if (requiredSize <= capacity()) return;
    freePool();
    replacePool(allocPool(addPadding(requiredSize)));
  }

  void freePool() {
 80044c4:	b590      	push	{r4, r7, lr}
 80044c6:	b083      	sub	sp, #12
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
    this->deallocate(memoryPool().buffer());
 80044cc:	687c      	ldr	r4, [r7, #4]
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	3308      	adds	r3, #8
 80044d2:	4618      	mov	r0, r3
 80044d4:	f7fc fe6d 	bl	80011b2 <_ZN19ArduinoJson6101_11012JsonDocument10memoryPoolEv>
 80044d8:	4603      	mov	r3, r0
 80044da:	4618      	mov	r0, r3
 80044dc:	f7fc fbf9 	bl	8000cd2 <_ZN19ArduinoJson6101_11010MemoryPool6bufferEv>
 80044e0:	4603      	mov	r3, r0
 80044e2:	4619      	mov	r1, r3
 80044e4:	4620      	mov	r0, r4
 80044e6:	f000 f804 	bl	80044f2 <_ZN19ArduinoJson6101_11014AllocatorOwnerINS_16DefaultAllocatorEE10deallocateEPv>
  }
 80044ea:	bf00      	nop
 80044ec:	370c      	adds	r7, #12
 80044ee:	46bd      	mov	sp, r7
 80044f0:	bd90      	pop	{r4, r7, pc}

080044f2 <_ZN19ArduinoJson6101_11014AllocatorOwnerINS_16DefaultAllocatorEE10deallocateEPv>:
  void deallocate(void* p) {
 80044f2:	b580      	push	{r7, lr}
 80044f4:	b082      	sub	sp, #8
 80044f6:	af00      	add	r7, sp, #0
 80044f8:	6078      	str	r0, [r7, #4]
 80044fa:	6039      	str	r1, [r7, #0]
    _allocator.deallocate(p);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	6839      	ldr	r1, [r7, #0]
 8004500:	4618      	mov	r0, r3
 8004502:	f7fc fe97 	bl	8001234 <_ZN19ArduinoJson6101_11016DefaultAllocator10deallocateEPv>
  }
 8004506:	bf00      	nop
 8004508:	3708      	adds	r7, #8
 800450a:	46bd      	mov	sp, r7
 800450c:	bd80      	pop	{r7, pc}

0800450e <_GLOBAL__sub_I_EXTI4_IRQHandler>:
 800450e:	b580      	push	{r7, lr}
 8004510:	af00      	add	r7, sp, #0
 8004512:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8004516:	2001      	movs	r0, #1
 8004518:	f7ff ff6e 	bl	80043f8 <_Z41__static_initialization_and_destruction_0ii>
 800451c:	bd80      	pop	{r7, pc}

0800451e <_GLOBAL__sub_D_EXTI4_IRQHandler>:
 800451e:	b580      	push	{r7, lr}
 8004520:	af00      	add	r7, sp, #0
 8004522:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8004526:	2000      	movs	r0, #0
 8004528:	f7ff ff66 	bl	80043f8 <_Z41__static_initialization_and_destruction_0ii>
 800452c:	bd80      	pop	{r7, pc}
	...

08004530 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004530:	b480      	push	{r7}
 8004532:	b083      	sub	sp, #12
 8004534:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004536:	4b0a      	ldr	r3, [pc, #40]	@ (8004560 <HAL_MspInit+0x30>)
 8004538:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800453c:	4a08      	ldr	r2, [pc, #32]	@ (8004560 <HAL_MspInit+0x30>)
 800453e:	f043 0302 	orr.w	r3, r3, #2
 8004542:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8004546:	4b06      	ldr	r3, [pc, #24]	@ (8004560 <HAL_MspInit+0x30>)
 8004548:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800454c:	f003 0302 	and.w	r3, r3, #2
 8004550:	607b      	str	r3, [r7, #4]
 8004552:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004554:	bf00      	nop
 8004556:	370c      	adds	r7, #12
 8004558:	46bd      	mov	sp, r7
 800455a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455e:	4770      	bx	lr
 8004560:	58024400 	.word	0x58024400

08004564 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8004564:	b580      	push	{r7, lr}
 8004566:	b0bc      	sub	sp, #240	@ 0xf0
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800456c:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8004570:	2200      	movs	r2, #0
 8004572:	601a      	str	r2, [r3, #0]
 8004574:	605a      	str	r2, [r3, #4]
 8004576:	609a      	str	r2, [r3, #8]
 8004578:	60da      	str	r2, [r3, #12]
 800457a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800457c:	f107 0318 	add.w	r3, r7, #24
 8004580:	22c0      	movs	r2, #192	@ 0xc0
 8004582:	2100      	movs	r1, #0
 8004584:	4618      	mov	r0, r3
 8004586:	f00f f921 	bl	80137cc <memset>
  if(hsd->Instance==SDMMC1)
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	4a3c      	ldr	r2, [pc, #240]	@ (8004680 <HAL_SD_MspInit+0x11c>)
 8004590:	4293      	cmp	r3, r2
 8004592:	d171      	bne.n	8004678 <HAL_SD_MspInit+0x114>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 8004594:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8004598:	f04f 0300 	mov.w	r3, #0
 800459c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 80045a0:	2300      	movs	r3, #0
 80045a2:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80045a4:	f107 0318 	add.w	r3, r7, #24
 80045a8:	4618      	mov	r0, r3
 80045aa:	f005 fa81 	bl	8009ab0 <HAL_RCCEx_PeriphCLKConfig>
 80045ae:	4603      	mov	r3, r0
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d001      	beq.n	80045b8 <HAL_SD_MspInit+0x54>
    {
      Error_Handler();
 80045b4:	f7fe f8d4 	bl	8002760 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 80045b8:	4b32      	ldr	r3, [pc, #200]	@ (8004684 <HAL_SD_MspInit+0x120>)
 80045ba:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80045be:	4a31      	ldr	r2, [pc, #196]	@ (8004684 <HAL_SD_MspInit+0x120>)
 80045c0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80045c4:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 80045c8:	4b2e      	ldr	r3, [pc, #184]	@ (8004684 <HAL_SD_MspInit+0x120>)
 80045ca:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80045ce:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80045d2:	617b      	str	r3, [r7, #20]
 80045d4:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80045d6:	4b2b      	ldr	r3, [pc, #172]	@ (8004684 <HAL_SD_MspInit+0x120>)
 80045d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80045dc:	4a29      	ldr	r2, [pc, #164]	@ (8004684 <HAL_SD_MspInit+0x120>)
 80045de:	f043 0304 	orr.w	r3, r3, #4
 80045e2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80045e6:	4b27      	ldr	r3, [pc, #156]	@ (8004684 <HAL_SD_MspInit+0x120>)
 80045e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80045ec:	f003 0304 	and.w	r3, r3, #4
 80045f0:	613b      	str	r3, [r7, #16]
 80045f2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80045f4:	4b23      	ldr	r3, [pc, #140]	@ (8004684 <HAL_SD_MspInit+0x120>)
 80045f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80045fa:	4a22      	ldr	r2, [pc, #136]	@ (8004684 <HAL_SD_MspInit+0x120>)
 80045fc:	f043 0308 	orr.w	r3, r3, #8
 8004600:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004604:	4b1f      	ldr	r3, [pc, #124]	@ (8004684 <HAL_SD_MspInit+0x120>)
 8004606:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800460a:	f003 0308 	and.w	r3, r3, #8
 800460e:	60fb      	str	r3, [r7, #12]
 8004610:	68fb      	ldr	r3, [r7, #12]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8004612:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 8004616:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800461a:	2302      	movs	r3, #2
 800461c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004620:	2300      	movs	r3, #0
 8004622:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004626:	2303      	movs	r3, #3
 8004628:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 800462c:	230c      	movs	r3, #12
 800462e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004632:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8004636:	4619      	mov	r1, r3
 8004638:	4813      	ldr	r0, [pc, #76]	@ (8004688 <HAL_SD_MspInit+0x124>)
 800463a:	f004 f869 	bl	8008710 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800463e:	2304      	movs	r3, #4
 8004640:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004644:	2302      	movs	r3, #2
 8004646:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800464a:	2300      	movs	r3, #0
 800464c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004650:	2303      	movs	r3, #3
 8004652:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8004656:	230c      	movs	r3, #12
 8004658:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800465c:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8004660:	4619      	mov	r1, r3
 8004662:	480a      	ldr	r0, [pc, #40]	@ (800468c <HAL_SD_MspInit+0x128>)
 8004664:	f004 f854 	bl	8008710 <HAL_GPIO_Init>

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 0, 0);
 8004668:	2200      	movs	r2, #0
 800466a:	2100      	movs	r1, #0
 800466c:	2031      	movs	r0, #49	@ 0x31
 800466e:	f001 fb9c 	bl	8005daa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 8004672:	2031      	movs	r0, #49	@ 0x31
 8004674:	f001 fbb3 	bl	8005dde <HAL_NVIC_EnableIRQ>

  /* USER CODE END SDMMC1_MspInit 1 */

  }

}
 8004678:	bf00      	nop
 800467a:	37f0      	adds	r7, #240	@ 0xf0
 800467c:	46bd      	mov	sp, r7
 800467e:	bd80      	pop	{r7, pc}
 8004680:	52007000 	.word	0x52007000
 8004684:	58024400 	.word	0x58024400
 8004688:	58020800 	.word	0x58020800
 800468c:	58020c00 	.word	0x58020c00

08004690 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004690:	b580      	push	{r7, lr}
 8004692:	b0ba      	sub	sp, #232	@ 0xe8
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004698:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800469c:	2200      	movs	r2, #0
 800469e:	601a      	str	r2, [r3, #0]
 80046a0:	605a      	str	r2, [r3, #4]
 80046a2:	609a      	str	r2, [r3, #8]
 80046a4:	60da      	str	r2, [r3, #12]
 80046a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80046a8:	f107 0310 	add.w	r3, r7, #16
 80046ac:	22c0      	movs	r2, #192	@ 0xc0
 80046ae:	2100      	movs	r1, #0
 80046b0:	4618      	mov	r0, r3
 80046b2:	f00f f88b 	bl	80137cc <memset>
  if(huart->Instance==USART1)
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	4a27      	ldr	r2, [pc, #156]	@ (8004758 <HAL_UART_MspInit+0xc8>)
 80046bc:	4293      	cmp	r3, r2
 80046be:	d146      	bne.n	800474e <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80046c0:	f04f 0201 	mov.w	r2, #1
 80046c4:	f04f 0300 	mov.w	r3, #0
 80046c8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 80046cc:	2300      	movs	r3, #0
 80046ce:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80046d2:	f107 0310 	add.w	r3, r7, #16
 80046d6:	4618      	mov	r0, r3
 80046d8:	f005 f9ea 	bl	8009ab0 <HAL_RCCEx_PeriphCLKConfig>
 80046dc:	4603      	mov	r3, r0
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d001      	beq.n	80046e6 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80046e2:	f7fe f83d 	bl	8002760 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80046e6:	4b1d      	ldr	r3, [pc, #116]	@ (800475c <HAL_UART_MspInit+0xcc>)
 80046e8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80046ec:	4a1b      	ldr	r2, [pc, #108]	@ (800475c <HAL_UART_MspInit+0xcc>)
 80046ee:	f043 0310 	orr.w	r3, r3, #16
 80046f2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80046f6:	4b19      	ldr	r3, [pc, #100]	@ (800475c <HAL_UART_MspInit+0xcc>)
 80046f8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80046fc:	f003 0310 	and.w	r3, r3, #16
 8004700:	60fb      	str	r3, [r7, #12]
 8004702:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004704:	4b15      	ldr	r3, [pc, #84]	@ (800475c <HAL_UART_MspInit+0xcc>)
 8004706:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800470a:	4a14      	ldr	r2, [pc, #80]	@ (800475c <HAL_UART_MspInit+0xcc>)
 800470c:	f043 0301 	orr.w	r3, r3, #1
 8004710:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004714:	4b11      	ldr	r3, [pc, #68]	@ (800475c <HAL_UART_MspInit+0xcc>)
 8004716:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800471a:	f003 0301 	and.w	r3, r3, #1
 800471e:	60bb      	str	r3, [r7, #8]
 8004720:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8004722:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8004726:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800472a:	2302      	movs	r3, #2
 800472c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004730:	2300      	movs	r3, #0
 8004732:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004736:	2300      	movs	r3, #0
 8004738:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800473c:	2307      	movs	r3, #7
 800473e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004742:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8004746:	4619      	mov	r1, r3
 8004748:	4805      	ldr	r0, [pc, #20]	@ (8004760 <HAL_UART_MspInit+0xd0>)
 800474a:	f003 ffe1 	bl	8008710 <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 800474e:	bf00      	nop
 8004750:	37e8      	adds	r7, #232	@ 0xe8
 8004752:	46bd      	mov	sp, r7
 8004754:	bd80      	pop	{r7, pc}
 8004756:	bf00      	nop
 8004758:	40011000 	.word	0x40011000
 800475c:	58024400 	.word	0x58024400
 8004760:	58020000 	.word	0x58020000

08004764 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004764:	b480      	push	{r7}
 8004766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004768:	bf00      	nop
 800476a:	e7fd      	b.n	8004768 <NMI_Handler+0x4>

0800476c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800476c:	b480      	push	{r7}
 800476e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004770:	bf00      	nop
 8004772:	e7fd      	b.n	8004770 <HardFault_Handler+0x4>

08004774 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004774:	b480      	push	{r7}
 8004776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004778:	bf00      	nop
 800477a:	e7fd      	b.n	8004778 <MemManage_Handler+0x4>

0800477c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800477c:	b480      	push	{r7}
 800477e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004780:	bf00      	nop
 8004782:	e7fd      	b.n	8004780 <BusFault_Handler+0x4>

08004784 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004784:	b480      	push	{r7}
 8004786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004788:	bf00      	nop
 800478a:	e7fd      	b.n	8004788 <UsageFault_Handler+0x4>

0800478c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800478c:	b480      	push	{r7}
 800478e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004790:	bf00      	nop
 8004792:	46bd      	mov	sp, r7
 8004794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004798:	4770      	bx	lr

0800479a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800479a:	b480      	push	{r7}
 800479c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800479e:	bf00      	nop
 80047a0:	46bd      	mov	sp, r7
 80047a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a6:	4770      	bx	lr

080047a8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80047a8:	b480      	push	{r7}
 80047aa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80047ac:	bf00      	nop
 80047ae:	46bd      	mov	sp, r7
 80047b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b4:	4770      	bx	lr

080047b6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80047b6:	b580      	push	{r7, lr}
 80047b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80047ba:	f001 f9b5 	bl	8005b28 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80047be:	bf00      	nop
 80047c0:	bd80      	pop	{r7, pc}
	...

080047c4 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 80047c4:	b580      	push	{r7, lr}
 80047c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 80047c8:	4802      	ldr	r0, [pc, #8]	@ (80047d4 <SDMMC1_IRQHandler+0x10>)
 80047ca:	f008 f8df 	bl	800c98c <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 80047ce:	bf00      	nop
 80047d0:	bd80      	pop	{r7, pc}
 80047d2:	bf00      	nop
 80047d4:	2400057c 	.word	0x2400057c

080047d8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80047d8:	b480      	push	{r7}
 80047da:	af00      	add	r7, sp, #0
	return 1;
 80047dc:	2301      	movs	r3, #1
}
 80047de:	4618      	mov	r0, r3
 80047e0:	46bd      	mov	sp, r7
 80047e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e6:	4770      	bx	lr

080047e8 <_kill>:

int _kill(int pid, int sig)
{
 80047e8:	b580      	push	{r7, lr}
 80047ea:	b082      	sub	sp, #8
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
 80047f0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80047f2:	f00f f88d 	bl	8013910 <__errno>
 80047f6:	4603      	mov	r3, r0
 80047f8:	2216      	movs	r2, #22
 80047fa:	601a      	str	r2, [r3, #0]
	return -1;
 80047fc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004800:	4618      	mov	r0, r3
 8004802:	3708      	adds	r7, #8
 8004804:	46bd      	mov	sp, r7
 8004806:	bd80      	pop	{r7, pc}

08004808 <_exit>:

void _exit (int status)
{
 8004808:	b580      	push	{r7, lr}
 800480a:	b082      	sub	sp, #8
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8004810:	f04f 31ff 	mov.w	r1, #4294967295
 8004814:	6878      	ldr	r0, [r7, #4]
 8004816:	f7ff ffe7 	bl	80047e8 <_kill>
	while (1) {}		/* Make sure we hang here */
 800481a:	bf00      	nop
 800481c:	e7fd      	b.n	800481a <_exit+0x12>

0800481e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800481e:	b580      	push	{r7, lr}
 8004820:	b086      	sub	sp, #24
 8004822:	af00      	add	r7, sp, #0
 8004824:	60f8      	str	r0, [r7, #12]
 8004826:	60b9      	str	r1, [r7, #8]
 8004828:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800482a:	2300      	movs	r3, #0
 800482c:	617b      	str	r3, [r7, #20]
 800482e:	e00a      	b.n	8004846 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8004830:	f3af 8000 	nop.w
 8004834:	4601      	mov	r1, r0
 8004836:	68bb      	ldr	r3, [r7, #8]
 8004838:	1c5a      	adds	r2, r3, #1
 800483a:	60ba      	str	r2, [r7, #8]
 800483c:	b2ca      	uxtb	r2, r1
 800483e:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004840:	697b      	ldr	r3, [r7, #20]
 8004842:	3301      	adds	r3, #1
 8004844:	617b      	str	r3, [r7, #20]
 8004846:	697a      	ldr	r2, [r7, #20]
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	429a      	cmp	r2, r3
 800484c:	dbf0      	blt.n	8004830 <_read+0x12>
	}

return len;
 800484e:	687b      	ldr	r3, [r7, #4]
}
 8004850:	4618      	mov	r0, r3
 8004852:	3718      	adds	r7, #24
 8004854:	46bd      	mov	sp, r7
 8004856:	bd80      	pop	{r7, pc}

08004858 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004858:	b580      	push	{r7, lr}
 800485a:	b086      	sub	sp, #24
 800485c:	af00      	add	r7, sp, #0
 800485e:	60f8      	str	r0, [r7, #12]
 8004860:	60b9      	str	r1, [r7, #8]
 8004862:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004864:	2300      	movs	r3, #0
 8004866:	617b      	str	r3, [r7, #20]
 8004868:	e009      	b.n	800487e <_write+0x26>
	{
		__io_putchar(*ptr++);
 800486a:	68bb      	ldr	r3, [r7, #8]
 800486c:	1c5a      	adds	r2, r3, #1
 800486e:	60ba      	str	r2, [r7, #8]
 8004870:	781b      	ldrb	r3, [r3, #0]
 8004872:	4618      	mov	r0, r3
 8004874:	f7fc ff8c 	bl	8001790 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004878:	697b      	ldr	r3, [r7, #20]
 800487a:	3301      	adds	r3, #1
 800487c:	617b      	str	r3, [r7, #20]
 800487e:	697a      	ldr	r2, [r7, #20]
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	429a      	cmp	r2, r3
 8004884:	dbf1      	blt.n	800486a <_write+0x12>
	}
	return len;
 8004886:	687b      	ldr	r3, [r7, #4]
}
 8004888:	4618      	mov	r0, r3
 800488a:	3718      	adds	r7, #24
 800488c:	46bd      	mov	sp, r7
 800488e:	bd80      	pop	{r7, pc}

08004890 <_close>:

int _close(int file)
{
 8004890:	b480      	push	{r7}
 8004892:	b083      	sub	sp, #12
 8004894:	af00      	add	r7, sp, #0
 8004896:	6078      	str	r0, [r7, #4]
	return -1;
 8004898:	f04f 33ff 	mov.w	r3, #4294967295
}
 800489c:	4618      	mov	r0, r3
 800489e:	370c      	adds	r7, #12
 80048a0:	46bd      	mov	sp, r7
 80048a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a6:	4770      	bx	lr

080048a8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80048a8:	b480      	push	{r7}
 80048aa:	b083      	sub	sp, #12
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
 80048b0:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80048b8:	605a      	str	r2, [r3, #4]
	return 0;
 80048ba:	2300      	movs	r3, #0
}
 80048bc:	4618      	mov	r0, r3
 80048be:	370c      	adds	r7, #12
 80048c0:	46bd      	mov	sp, r7
 80048c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c6:	4770      	bx	lr

080048c8 <_isatty>:

int _isatty(int file)
{
 80048c8:	b480      	push	{r7}
 80048ca:	b083      	sub	sp, #12
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]
	return 1;
 80048d0:	2301      	movs	r3, #1
}
 80048d2:	4618      	mov	r0, r3
 80048d4:	370c      	adds	r7, #12
 80048d6:	46bd      	mov	sp, r7
 80048d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048dc:	4770      	bx	lr

080048de <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80048de:	b480      	push	{r7}
 80048e0:	b085      	sub	sp, #20
 80048e2:	af00      	add	r7, sp, #0
 80048e4:	60f8      	str	r0, [r7, #12]
 80048e6:	60b9      	str	r1, [r7, #8]
 80048e8:	607a      	str	r2, [r7, #4]
	return 0;
 80048ea:	2300      	movs	r3, #0
}
 80048ec:	4618      	mov	r0, r3
 80048ee:	3714      	adds	r7, #20
 80048f0:	46bd      	mov	sp, r7
 80048f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f6:	4770      	bx	lr

080048f8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80048f8:	b580      	push	{r7, lr}
 80048fa:	b086      	sub	sp, #24
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004900:	4a14      	ldr	r2, [pc, #80]	@ (8004954 <_sbrk+0x5c>)
 8004902:	4b15      	ldr	r3, [pc, #84]	@ (8004958 <_sbrk+0x60>)
 8004904:	1ad3      	subs	r3, r2, r3
 8004906:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004908:	697b      	ldr	r3, [r7, #20]
 800490a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800490c:	4b13      	ldr	r3, [pc, #76]	@ (800495c <_sbrk+0x64>)
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	2b00      	cmp	r3, #0
 8004912:	d102      	bne.n	800491a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004914:	4b11      	ldr	r3, [pc, #68]	@ (800495c <_sbrk+0x64>)
 8004916:	4a12      	ldr	r2, [pc, #72]	@ (8004960 <_sbrk+0x68>)
 8004918:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800491a:	4b10      	ldr	r3, [pc, #64]	@ (800495c <_sbrk+0x64>)
 800491c:	681a      	ldr	r2, [r3, #0]
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	4413      	add	r3, r2
 8004922:	693a      	ldr	r2, [r7, #16]
 8004924:	429a      	cmp	r2, r3
 8004926:	d207      	bcs.n	8004938 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004928:	f00e fff2 	bl	8013910 <__errno>
 800492c:	4603      	mov	r3, r0
 800492e:	220c      	movs	r2, #12
 8004930:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004932:	f04f 33ff 	mov.w	r3, #4294967295
 8004936:	e009      	b.n	800494c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004938:	4b08      	ldr	r3, [pc, #32]	@ (800495c <_sbrk+0x64>)
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800493e:	4b07      	ldr	r3, [pc, #28]	@ (800495c <_sbrk+0x64>)
 8004940:	681a      	ldr	r2, [r3, #0]
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	4413      	add	r3, r2
 8004946:	4a05      	ldr	r2, [pc, #20]	@ (800495c <_sbrk+0x64>)
 8004948:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800494a:	68fb      	ldr	r3, [r7, #12]
}
 800494c:	4618      	mov	r0, r3
 800494e:	3718      	adds	r7, #24
 8004950:	46bd      	mov	sp, r7
 8004952:	bd80      	pop	{r7, pc}
 8004954:	24080000 	.word	0x24080000
 8004958:	00000400 	.word	0x00000400
 800495c:	240006dc 	.word	0x240006dc
 8004960:	24000ef0 	.word	0x24000ef0

08004964 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8004964:	b480      	push	{r7}
 8004966:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8004968:	4b37      	ldr	r3, [pc, #220]	@ (8004a48 <SystemInit+0xe4>)
 800496a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800496e:	4a36      	ldr	r2, [pc, #216]	@ (8004a48 <SystemInit+0xe4>)
 8004970:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004974:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8004978:	4b34      	ldr	r3, [pc, #208]	@ (8004a4c <SystemInit+0xe8>)
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f003 030f 	and.w	r3, r3, #15
 8004980:	2b06      	cmp	r3, #6
 8004982:	d807      	bhi.n	8004994 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8004984:	4b31      	ldr	r3, [pc, #196]	@ (8004a4c <SystemInit+0xe8>)
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f023 030f 	bic.w	r3, r3, #15
 800498c:	4a2f      	ldr	r2, [pc, #188]	@ (8004a4c <SystemInit+0xe8>)
 800498e:	f043 0307 	orr.w	r3, r3, #7
 8004992:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8004994:	4b2e      	ldr	r3, [pc, #184]	@ (8004a50 <SystemInit+0xec>)
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	4a2d      	ldr	r2, [pc, #180]	@ (8004a50 <SystemInit+0xec>)
 800499a:	f043 0301 	orr.w	r3, r3, #1
 800499e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80049a0:	4b2b      	ldr	r3, [pc, #172]	@ (8004a50 <SystemInit+0xec>)
 80049a2:	2200      	movs	r2, #0
 80049a4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80049a6:	4b2a      	ldr	r3, [pc, #168]	@ (8004a50 <SystemInit+0xec>)
 80049a8:	681a      	ldr	r2, [r3, #0]
 80049aa:	4929      	ldr	r1, [pc, #164]	@ (8004a50 <SystemInit+0xec>)
 80049ac:	4b29      	ldr	r3, [pc, #164]	@ (8004a54 <SystemInit+0xf0>)
 80049ae:	4013      	ands	r3, r2
 80049b0:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80049b2:	4b26      	ldr	r3, [pc, #152]	@ (8004a4c <SystemInit+0xe8>)
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f003 0308 	and.w	r3, r3, #8
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d007      	beq.n	80049ce <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80049be:	4b23      	ldr	r3, [pc, #140]	@ (8004a4c <SystemInit+0xe8>)
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f023 030f 	bic.w	r3, r3, #15
 80049c6:	4a21      	ldr	r2, [pc, #132]	@ (8004a4c <SystemInit+0xe8>)
 80049c8:	f043 0307 	orr.w	r3, r3, #7
 80049cc:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80049ce:	4b20      	ldr	r3, [pc, #128]	@ (8004a50 <SystemInit+0xec>)
 80049d0:	2200      	movs	r2, #0
 80049d2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80049d4:	4b1e      	ldr	r3, [pc, #120]	@ (8004a50 <SystemInit+0xec>)
 80049d6:	2200      	movs	r2, #0
 80049d8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80049da:	4b1d      	ldr	r3, [pc, #116]	@ (8004a50 <SystemInit+0xec>)
 80049dc:	2200      	movs	r2, #0
 80049de:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80049e0:	4b1b      	ldr	r3, [pc, #108]	@ (8004a50 <SystemInit+0xec>)
 80049e2:	4a1d      	ldr	r2, [pc, #116]	@ (8004a58 <SystemInit+0xf4>)
 80049e4:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80049e6:	4b1a      	ldr	r3, [pc, #104]	@ (8004a50 <SystemInit+0xec>)
 80049e8:	4a1c      	ldr	r2, [pc, #112]	@ (8004a5c <SystemInit+0xf8>)
 80049ea:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80049ec:	4b18      	ldr	r3, [pc, #96]	@ (8004a50 <SystemInit+0xec>)
 80049ee:	4a1c      	ldr	r2, [pc, #112]	@ (8004a60 <SystemInit+0xfc>)
 80049f0:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80049f2:	4b17      	ldr	r3, [pc, #92]	@ (8004a50 <SystemInit+0xec>)
 80049f4:	2200      	movs	r2, #0
 80049f6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80049f8:	4b15      	ldr	r3, [pc, #84]	@ (8004a50 <SystemInit+0xec>)
 80049fa:	4a19      	ldr	r2, [pc, #100]	@ (8004a60 <SystemInit+0xfc>)
 80049fc:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80049fe:	4b14      	ldr	r3, [pc, #80]	@ (8004a50 <SystemInit+0xec>)
 8004a00:	2200      	movs	r2, #0
 8004a02:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8004a04:	4b12      	ldr	r3, [pc, #72]	@ (8004a50 <SystemInit+0xec>)
 8004a06:	4a16      	ldr	r2, [pc, #88]	@ (8004a60 <SystemInit+0xfc>)
 8004a08:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8004a0a:	4b11      	ldr	r3, [pc, #68]	@ (8004a50 <SystemInit+0xec>)
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8004a10:	4b0f      	ldr	r3, [pc, #60]	@ (8004a50 <SystemInit+0xec>)
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	4a0e      	ldr	r2, [pc, #56]	@ (8004a50 <SystemInit+0xec>)
 8004a16:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004a1a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8004a1c:	4b0c      	ldr	r3, [pc, #48]	@ (8004a50 <SystemInit+0xec>)
 8004a1e:	2200      	movs	r2, #0
 8004a20:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8004a22:	4b10      	ldr	r3, [pc, #64]	@ (8004a64 <SystemInit+0x100>)
 8004a24:	681a      	ldr	r2, [r3, #0]
 8004a26:	4b10      	ldr	r3, [pc, #64]	@ (8004a68 <SystemInit+0x104>)
 8004a28:	4013      	ands	r3, r2
 8004a2a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004a2e:	d202      	bcs.n	8004a36 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8004a30:	4b0e      	ldr	r3, [pc, #56]	@ (8004a6c <SystemInit+0x108>)
 8004a32:	2201      	movs	r2, #1
 8004a34:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8004a36:	4b0e      	ldr	r3, [pc, #56]	@ (8004a70 <SystemInit+0x10c>)
 8004a38:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8004a3c:	601a      	str	r2, [r3, #0]
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/

}
 8004a3e:	bf00      	nop
 8004a40:	46bd      	mov	sp, r7
 8004a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a46:	4770      	bx	lr
 8004a48:	e000ed00 	.word	0xe000ed00
 8004a4c:	52002000 	.word	0x52002000
 8004a50:	58024400 	.word	0x58024400
 8004a54:	eaf6ed7f 	.word	0xeaf6ed7f
 8004a58:	02020200 	.word	0x02020200
 8004a5c:	01ff0000 	.word	0x01ff0000
 8004a60:	01010280 	.word	0x01010280
 8004a64:	5c001000 	.word	0x5c001000
 8004a68:	ffff0000 	.word	0xffff0000
 8004a6c:	51008108 	.word	0x51008108
 8004a70:	52004000 	.word	0x52004000

08004a74 <_ZN6ModuleC1Ev>:
#include "module.h"

#include <cstdio>

Module::Module()
 8004a74:	b580      	push	{r7, lr}
 8004a76:	b082      	sub	sp, #8
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	6078      	str	r0, [r7, #4]
 8004a7c:	4a08      	ldr	r2, [pc, #32]	@ (8004aa0 <_ZN6ModuleC1Ev+0x2c>)
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	601a      	str	r2, [r3, #0]
{
	this->counter = 0;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	2200      	movs	r2, #0
 8004a86:	611a      	str	r2, [r3, #16]
	this->updateCount = 1;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2201      	movs	r2, #1
 8004a8c:	60da      	str	r2, [r3, #12]
	printf("\nCreating a std module\n");
 8004a8e:	4805      	ldr	r0, [pc, #20]	@ (8004aa4 <_ZN6ModuleC1Ev+0x30>)
 8004a90:	f00e fda2 	bl	80135d8 <puts>
}
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	4618      	mov	r0, r3
 8004a98:	3708      	adds	r7, #8
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	bd80      	pop	{r7, pc}
 8004a9e:	bf00      	nop
 8004aa0:	080148c4 	.word	0x080148c4
 8004aa4:	08014714 	.word	0x08014714

08004aa8 <_ZN6ModuleD1Ev>:
	this->counter = 0;
	this->updateCount = this->threadFreq / this->slowUpdateFreq;
	printf("\nCreating a slower module, updating every %ld thread cycles\n",this->updateCount);
}

Module::~Module(){}
 8004aa8:	b480      	push	{r7}
 8004aaa:	b083      	sub	sp, #12
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	6078      	str	r0, [r7, #4]
 8004ab0:	4a04      	ldr	r2, [pc, #16]	@ (8004ac4 <_ZN6ModuleD1Ev+0x1c>)
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	601a      	str	r2, [r3, #0]
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	4618      	mov	r0, r3
 8004aba:	370c      	adds	r7, #12
 8004abc:	46bd      	mov	sp, r7
 8004abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac2:	4770      	bx	lr
 8004ac4:	080148c4 	.word	0x080148c4

08004ac8 <_ZN6ModuleD0Ev>:
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	b082      	sub	sp, #8
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
 8004ad0:	6878      	ldr	r0, [r7, #4]
 8004ad2:	f7ff ffe9 	bl	8004aa8 <_ZN6ModuleD1Ev>
 8004ad6:	2114      	movs	r1, #20
 8004ad8:	6878      	ldr	r0, [r7, #4]
 8004ada:	f00e f962 	bl	8012da2 <_ZdlPvj>
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	4618      	mov	r0, r3
 8004ae2:	3708      	adds	r7, #8
 8004ae4:	46bd      	mov	sp, r7
 8004ae6:	bd80      	pop	{r7, pc}

08004ae8 <_ZN6Module9runModuleEv>:


void Module::runModule()
{
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	b082      	sub	sp, #8
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
	++this->counter;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	691b      	ldr	r3, [r3, #16]
 8004af4:	1c5a      	adds	r2, r3, #1
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	611a      	str	r2, [r3, #16]

	if (this->counter >= this->updateCount)
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	691a      	ldr	r2, [r3, #16]
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	68db      	ldr	r3, [r3, #12]
 8004b02:	429a      	cmp	r2, r3
 8004b04:	db08      	blt.n	8004b18 <_ZN6Module9runModuleEv+0x30>
	{
		this->slowUpdate();
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	3310      	adds	r3, #16
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	6878      	ldr	r0, [r7, #4]
 8004b10:	4798      	blx	r3
		this->counter = 0;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	2200      	movs	r2, #0
 8004b16:	611a      	str	r2, [r3, #16]
	}

	this->update();
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	3308      	adds	r3, #8
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	6878      	ldr	r0, [r7, #4]
 8004b22:	4798      	blx	r3
}
 8004b24:	bf00      	nop
 8004b26:	3708      	adds	r7, #8
 8004b28:	46bd      	mov	sp, r7
 8004b2a:	bd80      	pop	{r7, pc}

08004b2c <_ZN6Module13runModulePostEv>:


void Module::runModulePost()
{
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	b082      	sub	sp, #8
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	6078      	str	r0, [r7, #4]
	this->updatePost();
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	330c      	adds	r3, #12
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	6878      	ldr	r0, [r7, #4]
 8004b3e:	4798      	blx	r3
}
 8004b40:	bf00      	nop
 8004b42:	3708      	adds	r7, #8
 8004b44:	46bd      	mov	sp, r7
 8004b46:	bd80      	pop	{r7, pc}

08004b48 <_ZN6Module6updateEv>:

void Module::update(){}
 8004b48:	b480      	push	{r7}
 8004b4a:	b083      	sub	sp, #12
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	6078      	str	r0, [r7, #4]
 8004b50:	bf00      	nop
 8004b52:	370c      	adds	r7, #12
 8004b54:	46bd      	mov	sp, r7
 8004b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5a:	4770      	bx	lr

08004b5c <_ZN6Module10updatePostEv>:
void Module::updatePost(){}
 8004b5c:	b480      	push	{r7}
 8004b5e:	b083      	sub	sp, #12
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]
 8004b64:	bf00      	nop
 8004b66:	370c      	adds	r7, #12
 8004b68:	46bd      	mov	sp, r7
 8004b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6e:	4770      	bx	lr

08004b70 <_ZN6Module10slowUpdateEv>:
void Module::slowUpdate(){}
 8004b70:	b480      	push	{r7}
 8004b72:	b083      	sub	sp, #12
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	6078      	str	r0, [r7, #4]
 8004b78:	bf00      	nop
 8004b7a:	370c      	adds	r7, #12
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b82:	4770      	bx	lr

08004b84 <_ZN6Module9configureEv>:
void Module::configure(){}
 8004b84:	b480      	push	{r7}
 8004b86:	b083      	sub	sp, #12
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]
 8004b8c:	bf00      	nop
 8004b8e:	370c      	adds	r7, #12
 8004b90:	46bd      	mov	sp, r7
 8004b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b96:	4770      	bx	lr

08004b98 <_ZN6Module15handleInterruptEv>:
void Module::handleInterrupt(){}
 8004b98:	b480      	push	{r7}
 8004b9a:	b083      	sub	sp, #12
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	6078      	str	r0, [r7, #4]
 8004ba0:	bf00      	nop
 8004ba2:	370c      	adds	r7, #12
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004baa:	4770      	bx	lr

08004bac <_ZN15ModuleInterruptC1E9IRQn_TypeP6ModuleMS1_FvvE>:
#include "../interrupt/interrupt.h"
#include "moduleInterrupt.h"
#include "module.h"


ModuleInterrupt::ModuleInterrupt(IRQn_Type interruptNumber, Module* ownerptr, void (Module::*handler)())
 8004bac:	b082      	sub	sp, #8
 8004bae:	b580      	push	{r7, lr}
 8004bb0:	b084      	sub	sp, #16
 8004bb2:	af00      	add	r7, sp, #0
 8004bb4:	60f8      	str	r0, [r7, #12]
 8004bb6:	607a      	str	r2, [r7, #4]
 8004bb8:	61fb      	str	r3, [r7, #28]
 8004bba:	460b      	mov	r3, r1
 8004bbc:	817b      	strh	r3, [r7, #10]
    : InterruptOwnerPtr(ownerptr),
	  InterruptHandler(handler)
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	4618      	mov	r0, r3
 8004bc2:	f7fb ff35 	bl	8000a30 <_ZN9InterruptC1Ev>
 8004bc6:	4a0e      	ldr	r2, [pc, #56]	@ (8004c00 <_ZN15ModuleInterruptC1E9IRQn_TypeP6ModuleMS1_FvvE+0x54>)
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	601a      	str	r2, [r3, #0]
    : InterruptOwnerPtr(ownerptr),
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	687a      	ldr	r2, [r7, #4]
 8004bd0:	605a      	str	r2, [r3, #4]
	  InterruptHandler(handler)
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	3308      	adds	r3, #8
 8004bd6:	f107 021c 	add.w	r2, r7, #28
 8004bda:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004bde:	e883 0003 	stmia.w	r3, {r0, r1}
	// Allows interrupt to access owner's data
	//InterruptOwnerPtr = owner;

	// When a device interrupt object is instantiated, the Register function must be called to let the
	// Interrupt base class know that there is an appropriate ISR function for the given interrupt.
	Interrupt::Register(interruptNumber, this);
 8004be2:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8004be6:	68fa      	ldr	r2, [r7, #12]
 8004be8:	4611      	mov	r1, r2
 8004bea:	4618      	mov	r0, r3
 8004bec:	f7fb ff30 	bl	8000a50 <_ZN9Interrupt8RegisterEiPS_>
}
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	3710      	adds	r7, #16
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004bfc:	b002      	add	sp, #8
 8004bfe:	4770      	bx	lr
 8004c00:	080148e8 	.word	0x080148e8

08004c04 <_ZN15ModuleInterrupt11ISR_HandlerEv>:


void ModuleInterrupt::ISR_Handler(void)
{
 8004c04:	b580      	push	{r7, lr}
 8004c06:	b082      	sub	sp, #8
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	6078      	str	r0, [r7, #4]
	//this->InterruptOwnerPtr->handleInterrupt();

    if (this->InterruptOwnerPtr && this->InterruptHandler) {
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	685b      	ldr	r3, [r3, #4]
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d02a      	beq.n	8004c6a <_ZN15ModuleInterrupt11ISR_HandlerEv+0x66>
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	689b      	ldr	r3, [r3, #8]
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d107      	bne.n	8004c2c <_ZN15ModuleInterrupt11ISR_HandlerEv+0x28>
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	68db      	ldr	r3, [r3, #12]
 8004c20:	f003 0301 	and.w	r3, r3, #1
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d101      	bne.n	8004c2c <_ZN15ModuleInterrupt11ISR_HandlerEv+0x28>
 8004c28:	2301      	movs	r3, #1
 8004c2a:	e000      	b.n	8004c2e <_ZN15ModuleInterrupt11ISR_HandlerEv+0x2a>
 8004c2c:	2300      	movs	r3, #0
 8004c2e:	2b01      	cmp	r3, #1
 8004c30:	d01b      	beq.n	8004c6a <_ZN15ModuleInterrupt11ISR_HandlerEv+0x66>
        (this->InterruptOwnerPtr->*InterruptHandler)(); // Call the member function of the owner
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	68db      	ldr	r3, [r3, #12]
 8004c36:	f003 0301 	and.w	r3, r3, #1
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d102      	bne.n	8004c44 <_ZN15ModuleInterrupt11ISR_HandlerEv+0x40>
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	689b      	ldr	r3, [r3, #8]
 8004c42:	e00a      	b.n	8004c5a <_ZN15ModuleInterrupt11ISR_HandlerEv+0x56>
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	685b      	ldr	r3, [r3, #4]
 8004c48:	687a      	ldr	r2, [r7, #4]
 8004c4a:	68d2      	ldr	r2, [r2, #12]
 8004c4c:	1052      	asrs	r2, r2, #1
 8004c4e:	4413      	add	r3, r2
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	687a      	ldr	r2, [r7, #4]
 8004c54:	6892      	ldr	r2, [r2, #8]
 8004c56:	4413      	add	r3, r2
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	687a      	ldr	r2, [r7, #4]
 8004c5c:	6852      	ldr	r2, [r2, #4]
 8004c5e:	6879      	ldr	r1, [r7, #4]
 8004c60:	68c9      	ldr	r1, [r1, #12]
 8004c62:	1049      	asrs	r1, r1, #1
 8004c64:	440a      	add	r2, r1
 8004c66:	4610      	mov	r0, r2
 8004c68:	4798      	blx	r3
    }
}
 8004c6a:	bf00      	nop
 8004c6c:	3708      	adds	r7, #8
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	bd80      	pop	{r7, pc}
	...

08004c74 <_ZN11RemoraCommsC1EPV8rxData_tPV8txData_tP11SPI_TypeDef>:
#include "../remoraComms/RemoraComms.h"
#include <cstdio>


RemoraComms::RemoraComms(volatile rxData_t* ptrRxData, volatile txData_t* ptrTxData, SPI_TypeDef* spiType) :
 8004c74:	b580      	push	{r7, lr}
 8004c76:	b084      	sub	sp, #16
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	60f8      	str	r0, [r7, #12]
 8004c7c:	60b9      	str	r1, [r7, #8]
 8004c7e:	607a      	str	r2, [r7, #4]
 8004c80:	603b      	str	r3, [r7, #0]
    ptrRxData(ptrRxData),
    ptrTxData(ptrTxData),
    spiType(spiType)
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	4618      	mov	r0, r3
 8004c86:	f7ff fef5 	bl	8004a74 <_ZN6ModuleC1Ev>
 8004c8a:	4a0d      	ldr	r2, [pc, #52]	@ (8004cc0 <_ZN11RemoraCommsC1EPV8rxData_tPV8txData_tP11SPI_TypeDef+0x4c>)
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	601a      	str	r2, [r3, #0]
    ptrRxData(ptrRxData),
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	68ba      	ldr	r2, [r7, #8]
 8004c94:	615a      	str	r2, [r3, #20]
    ptrTxData(ptrTxData),
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	687a      	ldr	r2, [r7, #4]
 8004c9a:	619a      	str	r2, [r3, #24]
    spiType(spiType)
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	683a      	ldr	r2, [r7, #0]
 8004ca0:	61da      	str	r2, [r3, #28]
{
    this->spiHandle.Instance = this->spiType;
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	69da      	ldr	r2, [r3, #28]
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	635a      	str	r2, [r3, #52]	@ 0x34
    //this->irq = EXTI4_IRQn;

    this->irqDMAtx = DMA1_Stream0_IRQn;
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	220b      	movs	r2, #11
 8004cae:	865a      	strh	r2, [r3, #50]	@ 0x32
    this->irqDMArx = DMA1_Stream1_IRQn;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	220c      	movs	r2, #12
 8004cb4:	861a      	strh	r2, [r3, #48]	@ 0x30

    // the constructor is called before any DMA and cache setup
    // don't do stuff here
}
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	4618      	mov	r0, r3
 8004cba:	3710      	adds	r7, #16
 8004cbc:	46bd      	mov	sp, r7
 8004cbe:	bd80      	pop	{r7, pc}
 8004cc0:	080148f4 	.word	0x080148f4

08004cc4 <_ZN11RemoraComms4initEv>:


void RemoraComms::init()
{
 8004cc4:	b590      	push	{r4, r7, lr}
 8004cc6:	b091      	sub	sp, #68	@ 0x44
 8004cc8:	af02      	add	r7, sp, #8
 8004cca:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004ccc:	f107 0314 	add.w	r3, r7, #20
 8004cd0:	2200      	movs	r2, #0
 8004cd2:	601a      	str	r2, [r3, #0]
 8004cd4:	605a      	str	r2, [r3, #4]
 8004cd6:	609a      	str	r2, [r3, #8]
 8004cd8:	60da      	str	r2, [r3, #12]
 8004cda:	611a      	str	r2, [r3, #16]

    if(this->spiHandle.Instance == SPI1)
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ce0:	4ab1      	ldr	r2, [pc, #708]	@ (8004fa8 <_ZN11RemoraComms4initEv+0x2e4>)
 8004ce2:	4293      	cmp	r3, r2
 8004ce4:	f040 815b 	bne.w	8004f9e <_ZN11RemoraComms4initEv+0x2da>
    {
    	// Interrupt pin is the NSS pin
        // Configure GPIO pin : PA_4

        __HAL_RCC_GPIOC_CLK_ENABLE();
 8004ce8:	4bb0      	ldr	r3, [pc, #704]	@ (8004fac <_ZN11RemoraComms4initEv+0x2e8>)
 8004cea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004cee:	4aaf      	ldr	r2, [pc, #700]	@ (8004fac <_ZN11RemoraComms4initEv+0x2e8>)
 8004cf0:	f043 0304 	orr.w	r3, r3, #4
 8004cf4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004cf8:	4bac      	ldr	r3, [pc, #688]	@ (8004fac <_ZN11RemoraComms4initEv+0x2e8>)
 8004cfa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004cfe:	f003 0304 	and.w	r3, r3, #4
 8004d02:	613b      	str	r3, [r7, #16]
 8004d04:	693b      	ldr	r3, [r7, #16]

        GPIO_InitStruct.Pin = GPIO_PIN_4;
 8004d06:	2310      	movs	r3, #16
 8004d08:	617b      	str	r3, [r7, #20]
        GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004d0a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8004d0e:	61bb      	str	r3, [r7, #24]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d10:	2300      	movs	r3, #0
 8004d12:	61fb      	str	r3, [r7, #28]
        HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004d14:	f107 0314 	add.w	r3, r7, #20
 8004d18:	4619      	mov	r1, r3
 8004d1a:	48a5      	ldr	r0, [pc, #660]	@ (8004fb0 <_ZN11RemoraComms4initEv+0x2ec>)
 8004d1c:	f003 fcf8 	bl	8008710 <HAL_GPIO_Init>


        printf("	Initialising SPI1 slave\n");
 8004d20:	48a4      	ldr	r0, [pc, #656]	@ (8004fb4 <_ZN11RemoraComms4initEv+0x2f0>)
 8004d22:	f00e fc59 	bl	80135d8 <puts>

        this->spiHandle.Init.Mode           		= SPI_MODE_SLAVE;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	2200      	movs	r2, #0
 8004d2a:	639a      	str	r2, [r3, #56]	@ 0x38
        this->spiHandle.Init.Direction      		= SPI_DIRECTION_2LINES;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2200      	movs	r2, #0
 8004d30:	63da      	str	r2, [r3, #60]	@ 0x3c
        this->spiHandle.Init.DataSize       		= SPI_DATASIZE_8BIT;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	2207      	movs	r2, #7
 8004d36:	641a      	str	r2, [r3, #64]	@ 0x40
        this->spiHandle.Init.CLKPolarity    		= SPI_POLARITY_LOW;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	2200      	movs	r2, #0
 8004d3c:	645a      	str	r2, [r3, #68]	@ 0x44
        this->spiHandle.Init.CLKPhase       		= SPI_PHASE_1EDGE;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	2200      	movs	r2, #0
 8004d42:	649a      	str	r2, [r3, #72]	@ 0x48
        this->spiHandle.Init.NSS            		= SPI_NSS_HARD_INPUT;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2200      	movs	r2, #0
 8004d48:	64da      	str	r2, [r3, #76]	@ 0x4c
        this->spiHandle.Init.FirstBit       		= SPI_FIRSTBIT_MSB;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	2200      	movs	r2, #0
 8004d4e:	655a      	str	r2, [r3, #84]	@ 0x54
        this->spiHandle.Init.TIMode         		= SPI_TIMODE_DISABLE;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2200      	movs	r2, #0
 8004d54:	659a      	str	r2, [r3, #88]	@ 0x58
        this->spiHandle.Init.CRCCalculation 		= SPI_CRCCALCULATION_DISABLE;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	2200      	movs	r2, #0
 8004d5a:	65da      	str	r2, [r3, #92]	@ 0x5c
        this->spiHandle.Init.CRCPolynomial  		= 0x0;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2200      	movs	r2, #0
 8004d60:	661a      	str	r2, [r3, #96]	@ 0x60
        this->spiHandle.Init.NSSPMode 				= SPI_NSS_PULSE_DISABLE;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	2200      	movs	r2, #0
 8004d66:	669a      	str	r2, [r3, #104]	@ 0x68
        this->spiHandle.Init.NSSPolarity 			= SPI_NSS_POLARITY_LOW;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2200      	movs	r2, #0
 8004d6c:	66da      	str	r2, [r3, #108]	@ 0x6c
        this->spiHandle.Init.FifoThreshold 			= SPI_FIFO_THRESHOLD_01DATA;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	2200      	movs	r2, #0
 8004d72:	671a      	str	r2, [r3, #112]	@ 0x70
        this->spiHandle.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2200      	movs	r2, #0
 8004d78:	675a      	str	r2, [r3, #116]	@ 0x74
        this->spiHandle.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	679a      	str	r2, [r3, #120]	@ 0x78
        this->spiHandle.Init.MasterSSIdleness 		= SPI_MASTER_SS_IDLENESS_00CYCLE;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2200      	movs	r2, #0
 8004d84:	67da      	str	r2, [r3, #124]	@ 0x7c
        this->spiHandle.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	2200      	movs	r2, #0
 8004d8a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        this->spiHandle.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	2200      	movs	r2, #0
 8004d92:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        this->spiHandle.Init.MasterKeepIOState 		= SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	2200      	movs	r2, #0
 8004d9a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        this->spiHandle.Init.IOSwap 				= SPI_IO_SWAP_DISABLE;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	2200      	movs	r2, #0
 8004da2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        HAL_SPI_Init(&this->spiHandle);
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	3334      	adds	r3, #52	@ 0x34
 8004daa:	4618      	mov	r0, r3
 8004dac:	f008 ffe2 	bl	800dd74 <HAL_SPI_Init>

    	// Peripheral clock enable
    	__HAL_RCC_SPI1_CLK_ENABLE();
 8004db0:	4b7e      	ldr	r3, [pc, #504]	@ (8004fac <_ZN11RemoraComms4initEv+0x2e8>)
 8004db2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004db6:	4a7d      	ldr	r2, [pc, #500]	@ (8004fac <_ZN11RemoraComms4initEv+0x2e8>)
 8004db8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004dbc:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004dc0:	4b7a      	ldr	r3, [pc, #488]	@ (8004fac <_ZN11RemoraComms4initEv+0x2e8>)
 8004dc2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004dc6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004dca:	60fb      	str	r3, [r7, #12]
 8004dcc:	68fb      	ldr	r3, [r7, #12]

		printf("	Initialising GPIO for SPI\n");
 8004dce:	487a      	ldr	r0, [pc, #488]	@ (8004fb8 <_ZN11RemoraComms4initEv+0x2f4>)
 8004dd0:	f00e fc02 	bl	80135d8 <puts>

	    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004dd4:	4b75      	ldr	r3, [pc, #468]	@ (8004fac <_ZN11RemoraComms4initEv+0x2e8>)
 8004dd6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004dda:	4a74      	ldr	r2, [pc, #464]	@ (8004fac <_ZN11RemoraComms4initEv+0x2e8>)
 8004ddc:	f043 0301 	orr.w	r3, r3, #1
 8004de0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004de4:	4b71      	ldr	r3, [pc, #452]	@ (8004fac <_ZN11RemoraComms4initEv+0x2e8>)
 8004de6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004dea:	f003 0301 	and.w	r3, r3, #1
 8004dee:	60bb      	str	r3, [r7, #8]
 8004df0:	68bb      	ldr	r3, [r7, #8]
	    PA4     ------> SPI1_NSS
	    PA5     ------> SPI1_SCK
	    PA6     ------> SPI1_MISO
	    PA7     ------> SPI1_MOSI
	    */
    	GPIO_InitStruct = {0};
 8004df2:	f107 0314 	add.w	r3, r7, #20
 8004df6:	2200      	movs	r2, #0
 8004df8:	601a      	str	r2, [r3, #0]
 8004dfa:	605a      	str	r2, [r3, #4]
 8004dfc:	609a      	str	r2, [r3, #8]
 8004dfe:	60da      	str	r2, [r3, #12]
 8004e00:	611a      	str	r2, [r3, #16]
	    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8004e02:	23f0      	movs	r3, #240	@ 0xf0
 8004e04:	617b      	str	r3, [r7, #20]
	    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e06:	2302      	movs	r3, #2
 8004e08:	61bb      	str	r3, [r7, #24]
	    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e0a:	2300      	movs	r3, #0
 8004e0c:	61fb      	str	r3, [r7, #28]
	    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004e0e:	2300      	movs	r3, #0
 8004e10:	623b      	str	r3, [r7, #32]
	    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8004e12:	2305      	movs	r3, #5
 8004e14:	627b      	str	r3, [r7, #36]	@ 0x24
	    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004e16:	f107 0314 	add.w	r3, r7, #20
 8004e1a:	4619      	mov	r1, r3
 8004e1c:	4864      	ldr	r0, [pc, #400]	@ (8004fb0 <_ZN11RemoraComms4initEv+0x2ec>)
 8004e1e:	f003 fc77 	bl	8008710 <HAL_GPIO_Init>

        printf("	Initialising DMA for SPI\n");
 8004e22:	4866      	ldr	r0, [pc, #408]	@ (8004fbc <_ZN11RemoraComms4initEv+0x2f8>)
 8004e24:	f00e fbd8 	bl	80135d8 <puts>

        this->hdma_spi_rx.Instance 					= DMA1_Stream1;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	4a65      	ldr	r2, [pc, #404]	@ (8004fc0 <_ZN11RemoraComms4initEv+0x2fc>)
 8004e2c:	f8c3 2134 	str.w	r2, [r3, #308]	@ 0x134
        this->hdma_spi_rx.Init.Request 				= DMA_REQUEST_SPI1_RX;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2225      	movs	r2, #37	@ 0x25
 8004e34:	f8c3 2138 	str.w	r2, [r3, #312]	@ 0x138
        this->hdma_spi_rx.Init.Direction 			= DMA_PERIPH_TO_MEMORY;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2200      	movs	r2, #0
 8004e3c:	f8c3 213c 	str.w	r2, [r3, #316]	@ 0x13c
        this->hdma_spi_rx.Init.PeriphInc 			= DMA_PINC_DISABLE;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2200      	movs	r2, #0
 8004e44:	f8c3 2140 	str.w	r2, [r3, #320]	@ 0x140
        this->hdma_spi_rx.Init.MemInc 				= DMA_MINC_ENABLE;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004e4e:	f8c3 2144 	str.w	r2, [r3, #324]	@ 0x144
        this->hdma_spi_rx.Init.PeriphDataAlignment 	= DMA_PDATAALIGN_BYTE;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	2200      	movs	r2, #0
 8004e56:	f8c3 2148 	str.w	r2, [r3, #328]	@ 0x148
        this->hdma_spi_rx.Init.MemDataAlignment 	= DMA_MDATAALIGN_BYTE;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	f8c3 214c 	str.w	r2, [r3, #332]	@ 0x14c
        //this->hdma_spi_rx.Init.Mode 				= DMA_CIRCULAR;
        this->hdma_spi_rx.Init.Mode 				= DMA_NORMAL;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	2200      	movs	r2, #0
 8004e66:	f8c3 2150 	str.w	r2, [r3, #336]	@ 0x150
        this->hdma_spi_rx.Init.Priority 			= DMA_PRIORITY_LOW;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	f8c3 2154 	str.w	r2, [r3, #340]	@ 0x154
        this->hdma_spi_rx.Init.FIFOMode 			= DMA_FIFOMODE_DISABLE;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	2200      	movs	r2, #0
 8004e76:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

        HAL_DMA_Init(&this->hdma_spi_rx);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	f503 739a 	add.w	r3, r3, #308	@ 0x134
 8004e80:	4618      	mov	r0, r3
 8004e82:	f001 f843 	bl	8005f0c <HAL_DMA_Init>
        __HAL_LINKDMA(&this->spiHandle, hdmarx, this->hdma_spi_rx);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	f503 729a 	add.w	r2, r3, #308	@ 0x134
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c

        dmaRxInterrupt = new ModuleInterrupt(this->irqDMArx, this, static_cast<void (Module::*)()>(&RemoraComms::handleRxInterrupt));
 8004e9e:	2010      	movs	r0, #16
 8004ea0:	f00d ff93 	bl	8012dca <_Znwj>
 8004ea4:	4603      	mov	r3, r0
 8004ea6:	461c      	mov	r4, r3
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	f9b3 1030 	ldrsh.w	r1, [r3, #48]	@ 0x30
 8004eae:	687a      	ldr	r2, [r7, #4]
 8004eb0:	4b44      	ldr	r3, [pc, #272]	@ (8004fc4 <_ZN11RemoraComms4initEv+0x300>)
 8004eb2:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004eb4:	2300      	movs	r3, #0
 8004eb6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004eb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004eba:	9300      	str	r3, [sp, #0]
 8004ebc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ebe:	4620      	mov	r0, r4
 8004ec0:	f7ff fe74 	bl	8004bac <_ZN15ModuleInterruptC1E9IRQn_TypeP6ModuleMS1_FvvE>
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	62dc      	str	r4, [r3, #44]	@ 0x2c
    	HAL_NVIC_SetPriority(this->irqDMArx, 5, 0);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8004ece:	2200      	movs	r2, #0
 8004ed0:	2105      	movs	r1, #5
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	f000 ff69 	bl	8005daa <HAL_NVIC_SetPriority>
        HAL_NVIC_EnableIRQ(this->irqDMArx);
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8004ede:	4618      	mov	r0, r3
 8004ee0:	f000 ff7d 	bl	8005dde <HAL_NVIC_EnableIRQ>

        this->hdma_spi_tx.Instance 					= DMA1_Stream0;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	4a38      	ldr	r2, [pc, #224]	@ (8004fc8 <_ZN11RemoraComms4initEv+0x304>)
 8004ee8:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        this->hdma_spi_tx.Init.Request 				= DMA_REQUEST_SPI1_TX;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	2226      	movs	r2, #38	@ 0x26
 8004ef0:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
        this->hdma_spi_tx.Init.Direction 			= DMA_MEMORY_TO_PERIPH;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2240      	movs	r2, #64	@ 0x40
 8004ef8:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        this->hdma_spi_tx.Init.PeriphInc 			= DMA_PINC_DISABLE;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2200      	movs	r2, #0
 8004f00:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        this->hdma_spi_tx.Init.MemInc 				= DMA_MINC_ENABLE;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004f0a:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc
        this->hdma_spi_tx.Init.PeriphDataAlignment 	= DMA_PDATAALIGN_BYTE;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	2200      	movs	r2, #0
 8004f12:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
        this->hdma_spi_tx.Init.MemDataAlignment 	= DMA_MDATAALIGN_BYTE;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	2200      	movs	r2, #0
 8004f1a:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
        //this->hdma_spi_tx.Init.Mode 				= DMA_CIRCULAR;
        this->hdma_spi_tx.Init.Mode 				= DMA_NORMAL;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	2200      	movs	r2, #0
 8004f22:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8
        this->hdma_spi_tx.Init.Priority 			= DMA_PRIORITY_LOW;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	2200      	movs	r2, #0
 8004f2a:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
        this->hdma_spi_tx.Init.FIFOMode 			= DMA_FIFOMODE_DISABLE;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	2200      	movs	r2, #0
 8004f32:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0

        HAL_DMA_Init(&this->hdma_spi_tx);
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	33bc      	adds	r3, #188	@ 0xbc
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	f000 ffe6 	bl	8005f0c <HAL_DMA_Init>
        __HAL_LINKDMA(&this->spiHandle, hdmatx, this->hdma_spi_tx);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	f103 02bc 	add.w	r2, r3, #188	@ 0xbc
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	f8c3 20f4 	str.w	r2, [r3, #244]	@ 0xf4

        dmaTxInterrupt = new ModuleInterrupt(this->irqDMAtx, this, static_cast<void (Module::*)()>(&RemoraComms::handleTxInterrupt));
 8004f58:	2010      	movs	r0, #16
 8004f5a:	f00d ff36 	bl	8012dca <_Znwj>
 8004f5e:	4603      	mov	r3, r0
 8004f60:	461c      	mov	r4, r3
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	f9b3 1032 	ldrsh.w	r1, [r3, #50]	@ 0x32
 8004f68:	687a      	ldr	r2, [r7, #4]
 8004f6a:	4b18      	ldr	r3, [pc, #96]	@ (8004fcc <_ZN11RemoraComms4initEv+0x308>)
 8004f6c:	633b      	str	r3, [r7, #48]	@ 0x30
 8004f6e:	2300      	movs	r3, #0
 8004f70:	637b      	str	r3, [r7, #52]	@ 0x34
 8004f72:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f74:	9300      	str	r3, [sp, #0]
 8004f76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f78:	4620      	mov	r0, r4
 8004f7a:	f7ff fe17 	bl	8004bac <_ZN15ModuleInterruptC1E9IRQn_TypeP6ModuleMS1_FvvE>
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	629c      	str	r4, [r3, #40]	@ 0x28
        HAL_NVIC_SetPriority(this->irqDMAtx, 4, 0);	// TX needs to be a higher priority than RX
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	f9b3 3032 	ldrsh.w	r3, [r3, #50]	@ 0x32
 8004f88:	2200      	movs	r2, #0
 8004f8a:	2104      	movs	r1, #4
 8004f8c:	4618      	mov	r0, r3
 8004f8e:	f000 ff0c 	bl	8005daa <HAL_NVIC_SetPriority>
        HAL_NVIC_EnableIRQ(this->irqDMAtx);
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	f9b3 3032 	ldrsh.w	r3, [r3, #50]	@ 0x32
 8004f98:	4618      	mov	r0, r3
 8004f9a:	f000 ff20 	bl	8005dde <HAL_NVIC_EnableIRQ>
    }
}
 8004f9e:	bf00      	nop
 8004fa0:	373c      	adds	r7, #60	@ 0x3c
 8004fa2:	46bd      	mov	sp, r7
 8004fa4:	bd90      	pop	{r4, r7, pc}
 8004fa6:	bf00      	nop
 8004fa8:	40013000 	.word	0x40013000
 8004fac:	58024400 	.word	0x58024400
 8004fb0:	58020000 	.word	0x58020000
 8004fb4:	0801476c 	.word	0x0801476c
 8004fb8:	08014788 	.word	0x08014788
 8004fbc:	080147a4 	.word	0x080147a4
 8004fc0:	40020028 	.word	0x40020028
 8004fc4:	0800521d 	.word	0x0800521d
 8004fc8:	40020010 	.word	0x40020010
 8004fcc:	08005245 	.word	0x08005245

08004fd0 <_ZN11RemoraComms5startEv>:

void RemoraComms::start()
{
 8004fd0:	b580      	push	{r7, lr}
 8004fd2:	b08e      	sub	sp, #56	@ 0x38
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	6078      	str	r0, [r7, #4]
    // Prepare the header in each Tx buffer
    // Current buffer: used by Remora modules
	txBuffer = getCurrentTxBuffer(&txPingPongBuffer);
 8004fd8:	4852      	ldr	r0, [pc, #328]	@ (8005124 <_ZN11RemoraComms5startEv+0x154>)
 8004fda:	f7fd f977 	bl	80022cc <_Z18getCurrentTxBufferP16TxPingPongBuffer>
 8004fde:	4602      	mov	r2, r0
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	625a      	str	r2, [r3, #36]	@ 0x24
    txBuffer->header = PRU_DATA;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fe8:	4a4f      	ldr	r2, [pc, #316]	@ (8005128 <_ZN11RemoraComms5startEv+0x158>)
 8004fea:	601a      	str	r2, [r3, #0]
    SCB_CleanDCache_by_Addr((uint32_t*)(((uint32_t)txBuffer->txBuffer) & ~(uint32_t)0x1F), BUFFER_ALIGNED_SIZE);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ff0:	f023 031f 	bic.w	r3, r3, #31
 8004ff4:	617b      	str	r3, [r7, #20]
 8004ff6:	2340      	movs	r3, #64	@ 0x40
 8004ff8:	613b      	str	r3, [r7, #16]
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_FORCEINLINE void SCB_CleanDCache_by_Addr (uint32_t *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    if ( dsize > 0 ) { 
 8004ffa:	693b      	ldr	r3, [r7, #16]
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	dd1d      	ble.n	800503c <_ZN11RemoraComms5startEv+0x6c>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8005000:	697b      	ldr	r3, [r7, #20]
 8005002:	f003 021f 	and.w	r2, r3, #31
 8005006:	693b      	ldr	r3, [r7, #16]
 8005008:	4413      	add	r3, r2
 800500a:	60fb      	str	r3, [r7, #12]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 800500c:	697b      	ldr	r3, [r7, #20]
 800500e:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("dsb 0xF":::"memory");
 8005010:	f3bf 8f4f 	dsb	sy
}
 8005014:	bf00      	nop
    
      __DSB();

      do {
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8005016:	4a45      	ldr	r2, [pc, #276]	@ (800512c <_ZN11RemoraComms5startEv+0x15c>)
 8005018:	68bb      	ldr	r3, [r7, #8]
 800501a:	f8c2 3268 	str.w	r3, [r2, #616]	@ 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
 800501e:	68bb      	ldr	r3, [r7, #8]
 8005020:	3320      	adds	r3, #32
 8005022:	60bb      	str	r3, [r7, #8]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	3b20      	subs	r3, #32
 8005028:	60fb      	str	r3, [r7, #12]
      } while ( op_size > 0 );
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	2b00      	cmp	r3, #0
 800502e:	dcf2      	bgt.n	8005016 <_ZN11RemoraComms5startEv+0x46>
  __ASM volatile ("dsb 0xF":::"memory");
 8005030:	f3bf 8f4f 	dsb	sy
}
 8005034:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8005036:	f3bf 8f6f 	isb	sy
}
 800503a:	bf00      	nop

      __DSB();
      __ISB();
    }
  #endif
}
 800503c:	bf00      	nop

    // Alternate buffer: used by DMA comms
    txBuffer = getAltTxBuffer(&txPingPongBuffer);
 800503e:	4839      	ldr	r0, [pc, #228]	@ (8005124 <_ZN11RemoraComms5startEv+0x154>)
 8005040:	f7fd f966 	bl	8002310 <_Z14getAltTxBufferP16TxPingPongBuffer>
 8005044:	4602      	mov	r2, r0
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	625a      	str	r2, [r3, #36]	@ 0x24
    txBuffer->header = PRU_DATA;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800504e:	4a36      	ldr	r2, [pc, #216]	@ (8005128 <_ZN11RemoraComms5startEv+0x158>)
 8005050:	601a      	str	r2, [r3, #0]
    SCB_CleanDCache_by_Addr((uint32_t*)(((uint32_t)txBuffer->txBuffer) & ~(uint32_t)0x1F), BUFFER_ALIGNED_SIZE);
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005056:	f023 031f 	bic.w	r3, r3, #31
 800505a:	627b      	str	r3, [r7, #36]	@ 0x24
 800505c:	2340      	movs	r3, #64	@ 0x40
 800505e:	623b      	str	r3, [r7, #32]
    if ( dsize > 0 ) { 
 8005060:	6a3b      	ldr	r3, [r7, #32]
 8005062:	2b00      	cmp	r3, #0
 8005064:	dd1d      	ble.n	80050a2 <_ZN11RemoraComms5startEv+0xd2>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8005066:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005068:	f003 021f 	and.w	r2, r3, #31
 800506c:	6a3b      	ldr	r3, [r7, #32]
 800506e:	4413      	add	r3, r2
 8005070:	61fb      	str	r3, [r7, #28]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8005072:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005074:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dsb 0xF":::"memory");
 8005076:	f3bf 8f4f 	dsb	sy
}
 800507a:	bf00      	nop
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 800507c:	4a2b      	ldr	r2, [pc, #172]	@ (800512c <_ZN11RemoraComms5startEv+0x15c>)
 800507e:	69bb      	ldr	r3, [r7, #24]
 8005080:	f8c2 3268 	str.w	r3, [r2, #616]	@ 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8005084:	69bb      	ldr	r3, [r7, #24]
 8005086:	3320      	adds	r3, #32
 8005088:	61bb      	str	r3, [r7, #24]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 800508a:	69fb      	ldr	r3, [r7, #28]
 800508c:	3b20      	subs	r3, #32
 800508e:	61fb      	str	r3, [r7, #28]
      } while ( op_size > 0 );
 8005090:	69fb      	ldr	r3, [r7, #28]
 8005092:	2b00      	cmp	r3, #0
 8005094:	dcf2      	bgt.n	800507c <_ZN11RemoraComms5startEv+0xac>
  __ASM volatile ("dsb 0xF":::"memory");
 8005096:	f3bf 8f4f 	dsb	sy
}
 800509a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800509c:	f3bf 8f6f 	isb	sy
}
 80050a0:	bf00      	nop
}
 80050a2:	bf00      	nop

    rxBuffer = getAltRxBuffer(&rxPingPongBuffer);
 80050a4:	4822      	ldr	r0, [pc, #136]	@ (8005130 <_ZN11RemoraComms5startEv+0x160>)
 80050a6:	f7fd f921 	bl	80022ec <_Z14getAltRxBufferP16RxPingPongBuffer>
 80050aa:	4602      	mov	r2, r0
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	621a      	str	r2, [r3, #32]
    SCB_InvalidateDCache_by_Addr((uint32_t*)(((uint32_t)rxBuffer->rxBuffer) & ~(uint32_t)0x1F), BUFFER_ALIGNED_SIZE);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	6a1b      	ldr	r3, [r3, #32]
 80050b4:	f023 031f 	bic.w	r3, r3, #31
 80050b8:	637b      	str	r3, [r7, #52]	@ 0x34
 80050ba:	2340      	movs	r3, #64	@ 0x40
 80050bc:	633b      	str	r3, [r7, #48]	@ 0x30
    if ( dsize > 0 ) { 
 80050be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	dd1d      	ble.n	8005100 <_ZN11RemoraComms5startEv+0x130>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 80050c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80050c6:	f003 021f 	and.w	r2, r3, #31
 80050ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050cc:	4413      	add	r3, r2
 80050ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 80050d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80050d2:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("dsb 0xF":::"memory");
 80050d4:	f3bf 8f4f 	dsb	sy
}
 80050d8:	bf00      	nop
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 80050da:	4a14      	ldr	r2, [pc, #80]	@ (800512c <_ZN11RemoraComms5startEv+0x15c>)
 80050dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050de:	f8c2 325c 	str.w	r3, [r2, #604]	@ 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 80050e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050e4:	3320      	adds	r3, #32
 80050e6:	62bb      	str	r3, [r7, #40]	@ 0x28
        op_size -= __SCB_DCACHE_LINE_SIZE;
 80050e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80050ea:	3b20      	subs	r3, #32
 80050ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
      } while ( op_size > 0 );
 80050ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	dcf2      	bgt.n	80050da <_ZN11RemoraComms5startEv+0x10a>
  __ASM volatile ("dsb 0xF":::"memory");
 80050f4:	f3bf 8f4f 	dsb	sy
}
 80050f8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80050fa:	f3bf 8f6f 	isb	sy
}
 80050fe:	bf00      	nop
}
 8005100:	bf00      	nop

    HAL_SPI_TransmitReceive_DMA(&this->spiHandle, (uint8_t *)txBuffer->txBuffer, (uint8_t *)rxBuffer->rxBuffer, SPI_BUFF_SIZE);
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	f103 0034 	add.w	r0, r3, #52	@ 0x34
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800510c:	4619      	mov	r1, r3
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	6a1b      	ldr	r3, [r3, #32]
 8005112:	461a      	mov	r2, r3
 8005114:	2340      	movs	r3, #64	@ 0x40
 8005116:	f008 ff5b 	bl	800dfd0 <HAL_SPI_TransmitReceive_DMA>
}
 800511a:	bf00      	nop
 800511c:	3738      	adds	r7, #56	@ 0x38
 800511e:	46bd      	mov	sp, r7
 8005120:	bd80      	pop	{r7, pc}
 8005122:	bf00      	nop
 8005124:	24000400 	.word	0x24000400
 8005128:	64617461 	.word	0x64617461
 800512c:	e000ed00 	.word	0xe000ed00
 8005130:	24000360 	.word	0x24000360

08005134 <_ZN11RemoraComms11swapBuffersEv>:


void RemoraComms::swapBuffers()
{
 8005134:	b580      	push	{r7, lr}
 8005136:	b08a      	sub	sp, #40	@ 0x28
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 800513c:	b672      	cpsid	i
}
 800513e:	bf00      	nop
    __disable_irq();
    swapTxBuffers(&txPingPongBuffer);
 8005140:	4833      	ldr	r0, [pc, #204]	@ (8005210 <_ZN11RemoraComms11swapBuffersEv+0xdc>)
 8005142:	f7fd f8a1 	bl	8002288 <_Z13swapTxBuffersP16TxPingPongBuffer>
  __ASM volatile ("cpsie i" : : : "memory");
 8005146:	b662      	cpsie	i
}
 8005148:	bf00      	nop
    __enable_irq();
    rxBuffer = getAltRxBuffer(&rxPingPongBuffer);
 800514a:	4832      	ldr	r0, [pc, #200]	@ (8005214 <_ZN11RemoraComms11swapBuffersEv+0xe0>)
 800514c:	f7fd f8ce 	bl	80022ec <_Z14getAltRxBufferP16RxPingPongBuffer>
 8005150:	4602      	mov	r2, r0
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	621a      	str	r2, [r3, #32]
    txBuffer = getAltTxBuffer(&txPingPongBuffer);
 8005156:	482e      	ldr	r0, [pc, #184]	@ (8005210 <_ZN11RemoraComms11swapBuffersEv+0xdc>)
 8005158:	f7fd f8da 	bl	8002310 <_Z14getAltTxBufferP16TxPingPongBuffer>
 800515c:	4602      	mov	r2, r0
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	625a      	str	r2, [r3, #36]	@ 0x24
    SCB_InvalidateDCache_by_Addr((uint32_t*)(((uint32_t)rxBuffer->rxBuffer) & ~(uint32_t)0x1F), BUFFER_ALIGNED_SIZE);
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	6a1b      	ldr	r3, [r3, #32]
 8005166:	f023 031f 	bic.w	r3, r3, #31
 800516a:	617b      	str	r3, [r7, #20]
 800516c:	2340      	movs	r3, #64	@ 0x40
 800516e:	613b      	str	r3, [r7, #16]
    if ( dsize > 0 ) { 
 8005170:	693b      	ldr	r3, [r7, #16]
 8005172:	2b00      	cmp	r3, #0
 8005174:	dd1d      	ble.n	80051b2 <_ZN11RemoraComms11swapBuffersEv+0x7e>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8005176:	697b      	ldr	r3, [r7, #20]
 8005178:	f003 021f 	and.w	r2, r3, #31
 800517c:	693b      	ldr	r3, [r7, #16]
 800517e:	4413      	add	r3, r2
 8005180:	60fb      	str	r3, [r7, #12]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8005182:	697b      	ldr	r3, [r7, #20]
 8005184:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("dsb 0xF":::"memory");
 8005186:	f3bf 8f4f 	dsb	sy
}
 800518a:	bf00      	nop
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 800518c:	4a22      	ldr	r2, [pc, #136]	@ (8005218 <_ZN11RemoraComms11swapBuffersEv+0xe4>)
 800518e:	68bb      	ldr	r3, [r7, #8]
 8005190:	f8c2 325c 	str.w	r3, [r2, #604]	@ 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8005194:	68bb      	ldr	r3, [r7, #8]
 8005196:	3320      	adds	r3, #32
 8005198:	60bb      	str	r3, [r7, #8]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	3b20      	subs	r3, #32
 800519e:	60fb      	str	r3, [r7, #12]
      } while ( op_size > 0 );
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	dcf2      	bgt.n	800518c <_ZN11RemoraComms11swapBuffersEv+0x58>
  __ASM volatile ("dsb 0xF":::"memory");
 80051a6:	f3bf 8f4f 	dsb	sy
}
 80051aa:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80051ac:	f3bf 8f6f 	isb	sy
}
 80051b0:	bf00      	nop
}
 80051b2:	bf00      	nop
    SCB_CleanDCache_by_Addr((uint32_t*)(((uint32_t)txBuffer->txBuffer) & ~(uint32_t)0x1F), BUFFER_ALIGNED_SIZE);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051b8:	f023 031f 	bic.w	r3, r3, #31
 80051bc:	627b      	str	r3, [r7, #36]	@ 0x24
 80051be:	2340      	movs	r3, #64	@ 0x40
 80051c0:	623b      	str	r3, [r7, #32]
    if ( dsize > 0 ) { 
 80051c2:	6a3b      	ldr	r3, [r7, #32]
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	dd1d      	ble.n	8005204 <_ZN11RemoraComms11swapBuffersEv+0xd0>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 80051c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051ca:	f003 021f 	and.w	r2, r3, #31
 80051ce:	6a3b      	ldr	r3, [r7, #32]
 80051d0:	4413      	add	r3, r2
 80051d2:	61fb      	str	r3, [r7, #28]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 80051d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051d6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dsb 0xF":::"memory");
 80051d8:	f3bf 8f4f 	dsb	sy
}
 80051dc:	bf00      	nop
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 80051de:	4a0e      	ldr	r2, [pc, #56]	@ (8005218 <_ZN11RemoraComms11swapBuffersEv+0xe4>)
 80051e0:	69bb      	ldr	r3, [r7, #24]
 80051e2:	f8c2 3268 	str.w	r3, [r2, #616]	@ 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
 80051e6:	69bb      	ldr	r3, [r7, #24]
 80051e8:	3320      	adds	r3, #32
 80051ea:	61bb      	str	r3, [r7, #24]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 80051ec:	69fb      	ldr	r3, [r7, #28]
 80051ee:	3b20      	subs	r3, #32
 80051f0:	61fb      	str	r3, [r7, #28]
      } while ( op_size > 0 );
 80051f2:	69fb      	ldr	r3, [r7, #28]
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	dcf2      	bgt.n	80051de <_ZN11RemoraComms11swapBuffersEv+0xaa>
  __ASM volatile ("dsb 0xF":::"memory");
 80051f8:	f3bf 8f4f 	dsb	sy
}
 80051fc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80051fe:	f3bf 8f6f 	isb	sy
}
 8005202:	bf00      	nop
}
 8005204:	bf00      	nop
}
 8005206:	bf00      	nop
 8005208:	3728      	adds	r7, #40	@ 0x28
 800520a:	46bd      	mov	sp, r7
 800520c:	bd80      	pop	{r7, pc}
 800520e:	bf00      	nop
 8005210:	24000400 	.word	0x24000400
 8005214:	24000360 	.word	0x24000360
 8005218:	e000ed00 	.word	0xe000ed00

0800521c <_ZN11RemoraComms17handleRxInterruptEv>:

void RemoraComms::handleRxInterrupt()
{
 800521c:	b580      	push	{r7, lr}
 800521e:	b082      	sub	sp, #8
 8005220:	af00      	add	r7, sp, #0
 8005222:	6078      	str	r0, [r7, #4]
	HAL_DMA_IRQHandler(&this->hdma_spi_rx);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	f503 739a 	add.w	r3, r3, #308	@ 0x134
 800522a:	4618      	mov	r0, r3
 800522c:	f001 ff52 	bl	80070d4 <HAL_DMA_IRQHandler>
	HAL_NVIC_EnableIRQ(this->irqDMArx);
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8005236:	4618      	mov	r0, r3
 8005238:	f000 fdd1 	bl	8005dde <HAL_NVIC_EnableIRQ>
}
 800523c:	bf00      	nop
 800523e:	3708      	adds	r7, #8
 8005240:	46bd      	mov	sp, r7
 8005242:	bd80      	pop	{r7, pc}

08005244 <_ZN11RemoraComms17handleTxInterruptEv>:


void RemoraComms::handleTxInterrupt()
{
 8005244:	b580      	push	{r7, lr}
 8005246:	b08c      	sub	sp, #48	@ 0x30
 8005248:	af00      	add	r7, sp, #0
 800524a:	6078      	str	r0, [r7, #4]
	// Handle the DMA interrupt
	HAL_DMA_IRQHandler(&this->hdma_spi_tx);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	33bc      	adds	r3, #188	@ 0xbc
 8005250:	4618      	mov	r0, r3
 8005252:	f001 ff3f 	bl	80070d4 <HAL_DMA_IRQHandler>
        return;
    }
    */

    // Get alternative buffers
    rxBuffer = getAltRxBuffer(&rxPingPongBuffer);
 8005256:	485f      	ldr	r0, [pc, #380]	@ (80053d4 <_ZN11RemoraComms17handleTxInterruptEv+0x190>)
 8005258:	f7fd f848 	bl	80022ec <_Z14getAltRxBufferP16RxPingPongBuffer>
 800525c:	4602      	mov	r2, r0
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	621a      	str	r2, [r3, #32]
    txBuffer = getAltTxBuffer(&txPingPongBuffer);
 8005262:	485d      	ldr	r0, [pc, #372]	@ (80053d8 <_ZN11RemoraComms17handleTxInterruptEv+0x194>)
 8005264:	f7fd f854 	bl	8002310 <_Z14getAltTxBufferP16TxPingPongBuffer>
 8005268:	4602      	mov	r2, r0
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	625a      	str	r2, [r3, #36]	@ 0x24

    // Define aligned buffer addresses for DCache operations
    uint32_t* alignedRxBuffer = (uint32_t*)(((uint32_t)rxBuffer->rxBuffer) & ~(uint32_t)0x1F);
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6a1b      	ldr	r3, [r3, #32]
 8005272:	f023 031f 	bic.w	r3, r3, #31
 8005276:	62fb      	str	r3, [r7, #44]	@ 0x2c
    uint32_t* alignedTxBuffer = (uint32_t*)(((uint32_t)txBuffer->txBuffer) & ~(uint32_t)0x1F);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800527c:	f023 031f 	bic.w	r3, r3, #31
 8005280:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005282:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005284:	627b      	str	r3, [r7, #36]	@ 0x24
 8005286:	2340      	movs	r3, #64	@ 0x40
 8005288:	623b      	str	r3, [r7, #32]
    if ( dsize > 0 ) { 
 800528a:	6a3b      	ldr	r3, [r7, #32]
 800528c:	2b00      	cmp	r3, #0
 800528e:	dd1d      	ble.n	80052cc <_ZN11RemoraComms17handleTxInterruptEv+0x88>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8005290:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005292:	f003 021f 	and.w	r2, r3, #31
 8005296:	6a3b      	ldr	r3, [r7, #32]
 8005298:	4413      	add	r3, r2
 800529a:	61fb      	str	r3, [r7, #28]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 800529c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800529e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dsb 0xF":::"memory");
 80052a0:	f3bf 8f4f 	dsb	sy
}
 80052a4:	bf00      	nop
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 80052a6:	4a4d      	ldr	r2, [pc, #308]	@ (80053dc <_ZN11RemoraComms17handleTxInterruptEv+0x198>)
 80052a8:	69bb      	ldr	r3, [r7, #24]
 80052aa:	f8c2 325c 	str.w	r3, [r2, #604]	@ 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 80052ae:	69bb      	ldr	r3, [r7, #24]
 80052b0:	3320      	adds	r3, #32
 80052b2:	61bb      	str	r3, [r7, #24]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 80052b4:	69fb      	ldr	r3, [r7, #28]
 80052b6:	3b20      	subs	r3, #32
 80052b8:	61fb      	str	r3, [r7, #28]
      } while ( op_size > 0 );
 80052ba:	69fb      	ldr	r3, [r7, #28]
 80052bc:	2b00      	cmp	r3, #0
 80052be:	dcf2      	bgt.n	80052a6 <_ZN11RemoraComms17handleTxInterruptEv+0x62>
  __ASM volatile ("dsb 0xF":::"memory");
 80052c0:	f3bf 8f4f 	dsb	sy
}
 80052c4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80052c6:	f3bf 8f6f 	isb	sy
}
 80052ca:	bf00      	nop
}
 80052cc:	bf00      	nop

    // Invalidate the DCache for the received buffer
    SCB_InvalidateDCache_by_Addr(alignedRxBuffer, BUFFER_ALIGNED_SIZE);

    // Handle different PRU header values
    switch (rxBuffer->header)
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	6a1b      	ldr	r3, [r3, #32]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	4a42      	ldr	r2, [pc, #264]	@ (80053e0 <_ZN11RemoraComms17handleTxInterruptEv+0x19c>)
 80052d6:	4293      	cmp	r3, r2
 80052d8:	d003      	beq.n	80052e2 <_ZN11RemoraComms17handleTxInterruptEv+0x9e>
 80052da:	4a42      	ldr	r2, [pc, #264]	@ (80053e4 <_ZN11RemoraComms17handleTxInterruptEv+0x1a0>)
 80052dc:	4293      	cmp	r3, r2
 80052de:	d008      	beq.n	80052f2 <_ZN11RemoraComms17handleTxInterruptEv+0xae>
 80052e0:	e012      	b.n	8005308 <_ZN11RemoraComms17handleTxInterruptEv+0xc4>
    {
        case PRU_READ:
            // Data is good, no buffer swap needed
        	printf("r\n");
 80052e2:	4841      	ldr	r0, [pc, #260]	@ (80053e8 <_ZN11RemoraComms17handleTxInterruptEv+0x1a4>)
 80052e4:	f00e f978 	bl	80135d8 <puts>
            this->SPIdata = true;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	2201      	movs	r2, #1
 80052ec:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
            break;
 80052f0:	e01f      	b.n	8005332 <_ZN11RemoraComms17handleTxInterruptEv+0xee>

        case PRU_WRITE:
            // Good data, swap the RX buffer
        	this->swapBuffers();
 80052f2:	6878      	ldr	r0, [r7, #4]
 80052f4:	f7ff ff1e 	bl	8005134 <_ZN11RemoraComms11swapBuffersEv>
            printf("w\n");
 80052f8:	483c      	ldr	r0, [pc, #240]	@ (80053ec <_ZN11RemoraComms17handleTxInterruptEv+0x1a8>)
 80052fa:	f00e f96d 	bl	80135d8 <puts>
            this->SPIdata = true;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	2201      	movs	r2, #1
 8005302:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
            break;
 8005306:	e014      	b.n	8005332 <_ZN11RemoraComms17handleTxInterruptEv+0xee>

        default:
            // Invalid data, increment reject count
        	printf("e\n");
 8005308:	4839      	ldr	r0, [pc, #228]	@ (80053f0 <_ZN11RemoraComms17handleTxInterruptEv+0x1ac>)
 800530a:	f00e f965 	bl	80135d8 <puts>
            this->rejectCnt++;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8005314:	3301      	adds	r3, #1
 8005316:	b2da      	uxtb	r2, r3
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
            if (this->rejectCnt > 5)
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8005324:	2b05      	cmp	r3, #5
 8005326:	d903      	bls.n	8005330 <_ZN11RemoraComms17handleTxInterruptEv+0xec>
            {
                this->SPIdataError = true;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2201      	movs	r2, #1
 800532c:	f883 2202 	strb.w	r2, [r3, #514]	@ 0x202
            }
            break;
 8005330:	bf00      	nop
    }

    // If needed, clean the TX buffer's DCache and swap it
    if (rxBuffer->header != PRU_READ)
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	6a1b      	ldr	r3, [r3, #32]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	4a29      	ldr	r2, [pc, #164]	@ (80053e0 <_ZN11RemoraComms17handleTxInterruptEv+0x19c>)
 800533a:	4293      	cmp	r3, r2
 800533c:	d028      	beq.n	8005390 <_ZN11RemoraComms17handleTxInterruptEv+0x14c>
 800533e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005340:	617b      	str	r3, [r7, #20]
 8005342:	2340      	movs	r3, #64	@ 0x40
 8005344:	613b      	str	r3, [r7, #16]
    if ( dsize > 0 ) { 
 8005346:	693b      	ldr	r3, [r7, #16]
 8005348:	2b00      	cmp	r3, #0
 800534a:	dd1d      	ble.n	8005388 <_ZN11RemoraComms17handleTxInterruptEv+0x144>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 800534c:	697b      	ldr	r3, [r7, #20]
 800534e:	f003 021f 	and.w	r2, r3, #31
 8005352:	693b      	ldr	r3, [r7, #16]
 8005354:	4413      	add	r3, r2
 8005356:	60fb      	str	r3, [r7, #12]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8005358:	697b      	ldr	r3, [r7, #20]
 800535a:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("dsb 0xF":::"memory");
 800535c:	f3bf 8f4f 	dsb	sy
}
 8005360:	bf00      	nop
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8005362:	4a1e      	ldr	r2, [pc, #120]	@ (80053dc <_ZN11RemoraComms17handleTxInterruptEv+0x198>)
 8005364:	68bb      	ldr	r3, [r7, #8]
 8005366:	f8c2 3268 	str.w	r3, [r2, #616]	@ 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
 800536a:	68bb      	ldr	r3, [r7, #8]
 800536c:	3320      	adds	r3, #32
 800536e:	60bb      	str	r3, [r7, #8]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	3b20      	subs	r3, #32
 8005374:	60fb      	str	r3, [r7, #12]
      } while ( op_size > 0 );
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	2b00      	cmp	r3, #0
 800537a:	dcf2      	bgt.n	8005362 <_ZN11RemoraComms17handleTxInterruptEv+0x11e>
  __ASM volatile ("dsb 0xF":::"memory");
 800537c:	f3bf 8f4f 	dsb	sy
}
 8005380:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8005382:	f3bf 8f6f 	isb	sy
}
 8005386:	bf00      	nop
}
 8005388:	bf00      	nop
    {
        SCB_CleanDCache_by_Addr(alignedTxBuffer, BUFFER_ALIGNED_SIZE);
        this->swapBuffers();
 800538a:	6878      	ldr	r0, [r7, #4]
 800538c:	f7ff fed2 	bl	8005134 <_ZN11RemoraComms11swapBuffersEv>
    }


    // Stop the DMA transfer
    HAL_DMA_Abort(this->spiHandle.hdmarx);
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005396:	4618      	mov	r0, r3
 8005398:	f001 fb7e 	bl	8006a98 <HAL_DMA_Abort>
    HAL_DMA_Abort(this->spiHandle.hdmatx);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80053a2:	4618      	mov	r0, r3
 80053a4:	f001 fb78 	bl	8006a98 <HAL_DMA_Abort>

    // enable DMA interrupt
    HAL_NVIC_EnableIRQ(this->irqDMArx);
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 80053ae:	4618      	mov	r0, r3
 80053b0:	f000 fd15 	bl	8005dde <HAL_NVIC_EnableIRQ>

    // Start SPI communication (DMA transfer)
    HAL_SPI_TransmitReceive_DMA(&this->spiHandle, (uint8_t *)txBuffer->txBuffer, (uint8_t *)rxBuffer->rxBuffer, SPI_BUFF_SIZE);
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	f103 0034 	add.w	r0, r3, #52	@ 0x34
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053be:	4619      	mov	r1, r3
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	6a1b      	ldr	r3, [r3, #32]
 80053c4:	461a      	mov	r2, r3
 80053c6:	2340      	movs	r3, #64	@ 0x40
 80053c8:	f008 fe02 	bl	800dfd0 <HAL_SPI_TransmitReceive_DMA>
}
 80053cc:	bf00      	nop
 80053ce:	3730      	adds	r7, #48	@ 0x30
 80053d0:	46bd      	mov	sp, r7
 80053d2:	bd80      	pop	{r7, pc}
 80053d4:	24000360 	.word	0x24000360
 80053d8:	24000400 	.word	0x24000400
 80053dc:	e000ed00 	.word	0xe000ed00
 80053e0:	72656164 	.word	0x72656164
 80053e4:	77726974 	.word	0x77726974
 80053e8:	080147c0 	.word	0x080147c0
 80053ec:	080147c4 	.word	0x080147c4
 80053f0:	080147c8 	.word	0x080147c8

080053f4 <_ZN11RemoraComms9getStatusEv>:
    HAL_SPI_TransmitReceive_DMA(&this->spiHandle, (uint8_t *)txBuffer->txBuffer, (uint8_t *)rxBuffer->rxBuffer, SPI_BUFF_SIZE);
}
*/

bool RemoraComms::getStatus(void)
{
 80053f4:	b480      	push	{r7}
 80053f6:	b083      	sub	sp, #12
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	6078      	str	r0, [r7, #4]
    return this->SPIdata;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
}
 8005402:	4618      	mov	r0, r3
 8005404:	370c      	adds	r7, #12
 8005406:	46bd      	mov	sp, r7
 8005408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540c:	4770      	bx	lr

0800540e <_ZN11RemoraComms9setStatusEb>:

void RemoraComms::setStatus(bool status)
{
 800540e:	b480      	push	{r7}
 8005410:	b083      	sub	sp, #12
 8005412:	af00      	add	r7, sp, #0
 8005414:	6078      	str	r0, [r7, #4]
 8005416:	460b      	mov	r3, r1
 8005418:	70fb      	strb	r3, [r7, #3]
    this->SPIdata = status;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	78fa      	ldrb	r2, [r7, #3]
 800541e:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
}
 8005422:	bf00      	nop
 8005424:	370c      	adds	r7, #12
 8005426:	46bd      	mov	sp, r7
 8005428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542c:	4770      	bx	lr

0800542e <_ZN11RemoraComms8getErrorEv>:

bool RemoraComms::getError(void)
{
 800542e:	b480      	push	{r7}
 8005430:	b083      	sub	sp, #12
 8005432:	af00      	add	r7, sp, #0
 8005434:	6078      	str	r0, [r7, #4]
    return this->SPIdataError;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	f893 3202 	ldrb.w	r3, [r3, #514]	@ 0x202
}
 800543c:	4618      	mov	r0, r3
 800543e:	370c      	adds	r7, #12
 8005440:	46bd      	mov	sp, r7
 8005442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005446:	4770      	bx	lr

08005448 <_ZN11RemoraComms8setErrorEb>:

void RemoraComms::setError(bool error)
{
 8005448:	b480      	push	{r7}
 800544a:	b083      	sub	sp, #12
 800544c:	af00      	add	r7, sp, #0
 800544e:	6078      	str	r0, [r7, #4]
 8005450:	460b      	mov	r3, r1
 8005452:	70fb      	strb	r3, [r7, #3]
    this->SPIdataError = error;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	78fa      	ldrb	r2, [r7, #3]
 8005458:	f883 2202 	strb.w	r2, [r3, #514]	@ 0x202
}
 800545c:	bf00      	nop
 800545e:	370c      	adds	r7, #12
 8005460:	46bd      	mov	sp, r7
 8005462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005466:	4770      	bx	lr

08005468 <_ZN11RemoraComms6updateEv>:

void RemoraComms::update()
{
 8005468:	b480      	push	{r7}
 800546a:	b083      	sub	sp, #12
 800546c:	af00      	add	r7, sp, #0
 800546e:	6078      	str	r0, [r7, #4]
	// unused for RemoraComms
}
 8005470:	bf00      	nop
 8005472:	370c      	adds	r7, #12
 8005474:	46bd      	mov	sp, r7
 8005476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547a:	4770      	bx	lr

0800547c <_ZN11RemoraCommsD1Ev>:
#include "extern.h"
#include "../../modules/module.h"
#include "../../modules/moduleinterrupt.h"


class RemoraComms : public Module
 800547c:	b580      	push	{r7, lr}
 800547e:	b082      	sub	sp, #8
 8005480:	af00      	add	r7, sp, #0
 8005482:	6078      	str	r0, [r7, #4]
 8005484:	4a05      	ldr	r2, [pc, #20]	@ (800549c <_ZN11RemoraCommsD1Ev+0x20>)
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	601a      	str	r2, [r3, #0]
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	4618      	mov	r0, r3
 800548e:	f7ff fb0b 	bl	8004aa8 <_ZN6ModuleD1Ev>
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	4618      	mov	r0, r3
 8005496:	3708      	adds	r7, #8
 8005498:	46bd      	mov	sp, r7
 800549a:	bd80      	pop	{r7, pc}
 800549c:	080148f4 	.word	0x080148f4

080054a0 <_ZN11RemoraCommsD0Ev>:
 80054a0:	b580      	push	{r7, lr}
 80054a2:	b082      	sub	sp, #8
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	6078      	str	r0, [r7, #4]
 80054a8:	6878      	ldr	r0, [r7, #4]
 80054aa:	f7ff ffe7 	bl	800547c <_ZN11RemoraCommsD1Ev>
 80054ae:	2220      	movs	r2, #32
 80054b0:	f44f 7108 	mov.w	r1, #544	@ 0x220
 80054b4:	6878      	ldr	r0, [r7, #4]
 80054b6:	f00d fc76 	bl	8012da6 <_ZdlPvjSt11align_val_t>
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	4618      	mov	r0, r3
 80054be:	3708      	adds	r7, #8
 80054c0:	46bd      	mov	sp, r7
 80054c2:	bd80      	pop	{r7, pc}

080054c4 <_ZNSt12_Vector_baseIP6ModuleSaIS1_EEC1Ev>:
      allocator_type
      get_allocator() const _GLIBCXX_NOEXCEPT
      { return allocator_type(_M_get_Tp_allocator()); }

#if __cplusplus >= 201103L
      _Vector_base() = default;
 80054c4:	b580      	push	{r7, lr}
 80054c6:	b082      	sub	sp, #8
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	6078      	str	r0, [r7, #4]
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	4618      	mov	r0, r3
 80054d0:	f000 f8bc 	bl	800564c <_ZNSt12_Vector_baseIP6ModuleSaIS1_EE12_Vector_implC1Ev>
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	4618      	mov	r0, r3
 80054d8:	3708      	adds	r7, #8
 80054da:	46bd      	mov	sp, r7
 80054dc:	bd80      	pop	{r7, pc}

080054de <_ZNSt6vectorIP6ModuleSaIS1_EEC1Ev>:

      /**
       *  @brief  Creates a %vector with no elements.
       */
#if __cplusplus >= 201103L
      vector() = default;
 80054de:	b580      	push	{r7, lr}
 80054e0:	b082      	sub	sp, #8
 80054e2:	af00      	add	r7, sp, #0
 80054e4:	6078      	str	r0, [r7, #4]
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	4618      	mov	r0, r3
 80054ea:	f7ff ffeb 	bl	80054c4 <_ZNSt12_Vector_baseIP6ModuleSaIS1_EEC1Ev>
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	4618      	mov	r0, r3
 80054f2:	3708      	adds	r7, #8
 80054f4:	46bd      	mov	sp, r7
 80054f6:	bd80      	pop	{r7, pc}

080054f8 <_ZN9pruThreadC1EP11TIM_TypeDef9IRQn_Typem>:


using namespace std;

// Thread constructor
pruThread::pruThread(TIM_TypeDef* timer, IRQn_Type irq, uint32_t frequency) :
 80054f8:	b580      	push	{r7, lr}
 80054fa:	b084      	sub	sp, #16
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	60f8      	str	r0, [r7, #12]
 8005500:	60b9      	str	r1, [r7, #8]
 8005502:	603b      	str	r3, [r7, #0]
 8005504:	4613      	mov	r3, r2
 8005506:	80fb      	strh	r3, [r7, #6]
	timer(timer),
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	68ba      	ldr	r2, [r7, #8]
 800550c:	605a      	str	r2, [r3, #4]
	irq(irq),
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	88fa      	ldrh	r2, [r7, #6]
 8005512:	811a      	strh	r2, [r3, #8]
	frequency(frequency)
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	683a      	ldr	r2, [r7, #0]
 8005518:	60da      	str	r2, [r3, #12]
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	3314      	adds	r3, #20
 800551e:	4618      	mov	r0, r3
 8005520:	f7ff ffdd 	bl	80054de <_ZNSt6vectorIP6ModuleSaIS1_EEC1Ev>
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	3320      	adds	r3, #32
 8005528:	4618      	mov	r0, r3
 800552a:	f7ff ffd8 	bl	80054de <_ZNSt6vectorIP6ModuleSaIS1_EEC1Ev>
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	332c      	adds	r3, #44	@ 0x2c
 8005532:	4618      	mov	r0, r3
 8005534:	f000 f89a 	bl	800566c <_ZN9__gnu_cxx17__normal_iteratorIPP6ModuleSt6vectorIS2_SaIS2_EEEC1Ev>
{
	printf("	Creating thread %lu\n", this->frequency);
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	68db      	ldr	r3, [r3, #12]
 800553c:	4619      	mov	r1, r3
 800553e:	4804      	ldr	r0, [pc, #16]	@ (8005550 <_ZN9pruThreadC1EP11TIM_TypeDef9IRQn_Typem+0x58>)
 8005540:	f00d ffda 	bl	80134f8 <iprintf>
}
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	4618      	mov	r0, r3
 8005548:	3710      	adds	r7, #16
 800554a:	46bd      	mov	sp, r7
 800554c:	bd80      	pop	{r7, pc}
 800554e:	bf00      	nop
 8005550:	080147cc 	.word	0x080147cc

08005554 <_ZN9pruThread11startThreadEv>:

void pruThread::startThread(void)
{
 8005554:	b590      	push	{r4, r7, lr}
 8005556:	b085      	sub	sp, #20
 8005558:	af02      	add	r7, sp, #8
 800555a:	6078      	str	r0, [r7, #4]
	TimerPtr = new pruTimer(this->timer, this->irq, this->frequency, this);
 800555c:	2014      	movs	r0, #20
 800555e:	f00d fc34 	bl	8012dca <_Znwj>
 8005562:	4603      	mov	r3, r0
 8005564:	461c      	mov	r4, r3
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	6859      	ldr	r1, [r3, #4]
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	68d8      	ldr	r0, [r3, #12]
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	9300      	str	r3, [sp, #0]
 8005578:	4603      	mov	r3, r0
 800557a:	4620      	mov	r0, r4
 800557c:	f000 f93e 	bl	80057fc <_ZN8pruTimerC1EP11TIM_TypeDef9IRQn_TypemP9pruThread>
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	601c      	str	r4, [r3, #0]
}
 8005584:	bf00      	nop
 8005586:	370c      	adds	r7, #12
 8005588:	46bd      	mov	sp, r7
 800558a:	bd90      	pop	{r4, r7, pc}

0800558c <_ZN9pruThread3runEv>:
	this->hasThreadPost = true;
}


void pruThread::run(void)
{
 800558c:	b590      	push	{r4, r7, lr}
 800558e:	b085      	sub	sp, #20
 8005590:	af00      	add	r7, sp, #0
 8005592:	6078      	str	r0, [r7, #4]
	// iterate over the Thread pointer vector to run all instances of Module::runModule()
	for (iter = vThread.begin(); iter != vThread.end(); ++iter) (*iter)->runModule();
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	3314      	adds	r3, #20
 8005598:	687c      	ldr	r4, [r7, #4]
 800559a:	4618      	mov	r0, r3
 800559c:	f000 f874 	bl	8005688 <_ZNSt6vectorIP6ModuleSaIS1_EE5beginEv>
 80055a0:	62e0      	str	r0, [r4, #44]	@ 0x2c
 80055a2:	e00e      	b.n	80055c2 <_ZN9pruThread3runEv+0x36>
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	332c      	adds	r3, #44	@ 0x2c
 80055a8:	4618      	mov	r0, r3
 80055aa:	f000 f8b6 	bl	800571a <_ZNK9__gnu_cxx17__normal_iteratorIPP6ModuleSt6vectorIS2_SaIS2_EEEdeEv>
 80055ae:	4603      	mov	r3, r0
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	4618      	mov	r0, r3
 80055b4:	f7ff fa98 	bl	8004ae8 <_ZN6Module9runModuleEv>
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	332c      	adds	r3, #44	@ 0x2c
 80055bc:	4618      	mov	r0, r3
 80055be:	f000 f89c 	bl	80056fa <_ZN9__gnu_cxx17__normal_iteratorIPP6ModuleSt6vectorIS2_SaIS2_EEEppEv>
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	f103 042c 	add.w	r4, r3, #44	@ 0x2c
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	3314      	adds	r3, #20
 80055cc:	4618      	mov	r0, r3
 80055ce:	f000 f86b 	bl	80056a8 <_ZNSt6vectorIP6ModuleSaIS1_EE3endEv>
 80055d2:	4603      	mov	r3, r0
 80055d4:	60bb      	str	r3, [r7, #8]
 80055d6:	f107 0308 	add.w	r3, r7, #8
 80055da:	4619      	mov	r1, r3
 80055dc:	4620      	mov	r0, r4
 80055de:	f000 f874 	bl	80056ca <_ZN9__gnu_cxxneIPP6ModuleSt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>
 80055e2:	4603      	mov	r3, r0
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d1dd      	bne.n	80055a4 <_ZN9pruThread3runEv+0x18>

	// iterate over the second vector that contains module pointers to run after (post) the main vector
	if (hasThreadPost)
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	7c1b      	ldrb	r3, [r3, #16]
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d029      	beq.n	8005644 <_ZN9pruThread3runEv+0xb8>
	{
		for (iter = vThreadPost.begin(); iter != vThreadPost.end(); ++iter) (*iter)->runModulePost();
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	3320      	adds	r3, #32
 80055f4:	687c      	ldr	r4, [r7, #4]
 80055f6:	4618      	mov	r0, r3
 80055f8:	f000 f846 	bl	8005688 <_ZNSt6vectorIP6ModuleSaIS1_EE5beginEv>
 80055fc:	62e0      	str	r0, [r4, #44]	@ 0x2c
 80055fe:	e00e      	b.n	800561e <_ZN9pruThread3runEv+0x92>
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	332c      	adds	r3, #44	@ 0x2c
 8005604:	4618      	mov	r0, r3
 8005606:	f000 f888 	bl	800571a <_ZNK9__gnu_cxx17__normal_iteratorIPP6ModuleSt6vectorIS2_SaIS2_EEEdeEv>
 800560a:	4603      	mov	r3, r0
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	4618      	mov	r0, r3
 8005610:	f7ff fa8c 	bl	8004b2c <_ZN6Module13runModulePostEv>
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	332c      	adds	r3, #44	@ 0x2c
 8005618:	4618      	mov	r0, r3
 800561a:	f000 f86e 	bl	80056fa <_ZN9__gnu_cxx17__normal_iteratorIPP6ModuleSt6vectorIS2_SaIS2_EEEppEv>
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	f103 042c 	add.w	r4, r3, #44	@ 0x2c
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	3320      	adds	r3, #32
 8005628:	4618      	mov	r0, r3
 800562a:	f000 f83d 	bl	80056a8 <_ZNSt6vectorIP6ModuleSaIS1_EE3endEv>
 800562e:	4603      	mov	r3, r0
 8005630:	60fb      	str	r3, [r7, #12]
 8005632:	f107 030c 	add.w	r3, r7, #12
 8005636:	4619      	mov	r1, r3
 8005638:	4620      	mov	r0, r4
 800563a:	f000 f846 	bl	80056ca <_ZN9__gnu_cxxneIPP6ModuleSt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>
 800563e:	4603      	mov	r3, r0
 8005640:	2b00      	cmp	r3, #0
 8005642:	d1dd      	bne.n	8005600 <_ZN9pruThread3runEv+0x74>
	}
}
 8005644:	bf00      	nop
 8005646:	3714      	adds	r7, #20
 8005648:	46bd      	mov	sp, r7
 800564a:	bd90      	pop	{r4, r7, pc}

0800564c <_ZNSt12_Vector_baseIP6ModuleSaIS1_EE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 800564c:	b580      	push	{r7, lr}
 800564e:	b082      	sub	sp, #8
 8005650:	af00      	add	r7, sp, #0
 8005652:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 8005654:	6878      	ldr	r0, [r7, #4]
 8005656:	f000 f86c 	bl	8005732 <_ZNSaIP6ModuleEC1Ev>
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	4618      	mov	r0, r3
 800565e:	f000 f874 	bl	800574a <_ZNSt12_Vector_baseIP6ModuleSaIS1_EE17_Vector_impl_dataC1Ev>
	{ }
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	4618      	mov	r0, r3
 8005666:	3708      	adds	r7, #8
 8005668:	46bd      	mov	sp, r7
 800566a:	bd80      	pop	{r7, pc}

0800566c <_ZN9__gnu_cxx17__normal_iteratorIPP6ModuleSt6vectorIS2_SaIS2_EEEC1Ev>:

#if __cplusplus > 201703L && __cpp_lib_concepts
      using iterator_concept = std::__detail::__iter_concept<_Iterator>;
#endif

      _GLIBCXX_CONSTEXPR __normal_iterator() _GLIBCXX_NOEXCEPT
 800566c:	b480      	push	{r7}
 800566e:	b083      	sub	sp, #12
 8005670:	af00      	add	r7, sp, #0
 8005672:	6078      	str	r0, [r7, #4]
      : _M_current(_Iterator()) { }
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2200      	movs	r2, #0
 8005678:	601a      	str	r2, [r3, #0]
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	4618      	mov	r0, r3
 800567e:	370c      	adds	r7, #12
 8005680:	46bd      	mov	sp, r7
 8005682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005686:	4770      	bx	lr

08005688 <_ZNSt6vectorIP6ModuleSaIS1_EE5beginEv>:
       *  element in the %vector.  Iteration is done in ordinary
       *  element order.
       */
      _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
      iterator
      begin() _GLIBCXX_NOEXCEPT
 8005688:	b580      	push	{r7, lr}
 800568a:	b084      	sub	sp, #16
 800568c:	af00      	add	r7, sp, #0
 800568e:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 8005690:	687a      	ldr	r2, [r7, #4]
 8005692:	f107 030c 	add.w	r3, r7, #12
 8005696:	4611      	mov	r1, r2
 8005698:	4618      	mov	r0, r3
 800569a:	f000 f86a 	bl	8005772 <_ZN9__gnu_cxx17__normal_iteratorIPP6ModuleSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	4618      	mov	r0, r3
 80056a2:	3710      	adds	r7, #16
 80056a4:	46bd      	mov	sp, r7
 80056a6:	bd80      	pop	{r7, pc}

080056a8 <_ZNSt6vectorIP6ModuleSaIS1_EE3endEv>:
       *  element in the %vector.  Iteration is done in ordinary
       *  element order.
       */
      _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
      iterator
      end() _GLIBCXX_NOEXCEPT
 80056a8:	b580      	push	{r7, lr}
 80056aa:	b084      	sub	sp, #16
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	1d1a      	adds	r2, r3, #4
 80056b4:	f107 030c 	add.w	r3, r7, #12
 80056b8:	4611      	mov	r1, r2
 80056ba:	4618      	mov	r0, r3
 80056bc:	f000 f859 	bl	8005772 <_ZN9__gnu_cxx17__normal_iteratorIPP6ModuleSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	4618      	mov	r0, r3
 80056c4:	3710      	adds	r7, #16
 80056c6:	46bd      	mov	sp, r7
 80056c8:	bd80      	pop	{r7, pc}

080056ca <_ZN9__gnu_cxxneIPP6ModuleSt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>:
    { return __lhs.base() != __rhs.base(); }

  template<typename _Iterator, typename _Container>
    _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
    inline bool
    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
 80056ca:	b590      	push	{r4, r7, lr}
 80056cc:	b083      	sub	sp, #12
 80056ce:	af00      	add	r7, sp, #0
 80056d0:	6078      	str	r0, [r7, #4]
 80056d2:	6039      	str	r1, [r7, #0]
	       const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() != __rhs.base(); }
 80056d4:	6878      	ldr	r0, [r7, #4]
 80056d6:	f000 f85c 	bl	8005792 <_ZNK9__gnu_cxx17__normal_iteratorIPP6ModuleSt6vectorIS2_SaIS2_EEE4baseEv>
 80056da:	4603      	mov	r3, r0
 80056dc:	681c      	ldr	r4, [r3, #0]
 80056de:	6838      	ldr	r0, [r7, #0]
 80056e0:	f000 f857 	bl	8005792 <_ZNK9__gnu_cxx17__normal_iteratorIPP6ModuleSt6vectorIS2_SaIS2_EEE4baseEv>
 80056e4:	4603      	mov	r3, r0
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	429c      	cmp	r4, r3
 80056ea:	bf14      	ite	ne
 80056ec:	2301      	movne	r3, #1
 80056ee:	2300      	moveq	r3, #0
 80056f0:	b2db      	uxtb	r3, r3
 80056f2:	4618      	mov	r0, r3
 80056f4:	370c      	adds	r7, #12
 80056f6:	46bd      	mov	sp, r7
 80056f8:	bd90      	pop	{r4, r7, pc}

080056fa <_ZN9__gnu_cxx17__normal_iteratorIPP6ModuleSt6vectorIS2_SaIS2_EEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 80056fa:	b480      	push	{r7}
 80056fc:	b083      	sub	sp, #12
 80056fe:	af00      	add	r7, sp, #0
 8005700:	6078      	str	r0, [r7, #4]
	++_M_current;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	1d1a      	adds	r2, r3, #4
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	601a      	str	r2, [r3, #0]
	return *this;
 800570c:	687b      	ldr	r3, [r7, #4]
      }
 800570e:	4618      	mov	r0, r3
 8005710:	370c      	adds	r7, #12
 8005712:	46bd      	mov	sp, r7
 8005714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005718:	4770      	bx	lr

0800571a <_ZNK9__gnu_cxx17__normal_iteratorIPP6ModuleSt6vectorIS2_SaIS2_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 800571a:	b480      	push	{r7}
 800571c:	b083      	sub	sp, #12
 800571e:	af00      	add	r7, sp, #0
 8005720:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	4618      	mov	r0, r3
 8005728:	370c      	adds	r7, #12
 800572a:	46bd      	mov	sp, r7
 800572c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005730:	4770      	bx	lr

08005732 <_ZNSaIP6ModuleEC1Ev>:
#endif

      // _GLIBCXX_RESOLVE_LIB_DEFECTS
      // 3035. std::allocator's constructors should be constexpr
      _GLIBCXX20_CONSTEXPR
      allocator() _GLIBCXX_NOTHROW { }
 8005732:	b580      	push	{r7, lr}
 8005734:	b082      	sub	sp, #8
 8005736:	af00      	add	r7, sp, #0
 8005738:	6078      	str	r0, [r7, #4]
 800573a:	6878      	ldr	r0, [r7, #4]
 800573c:	f000 f834 	bl	80057a8 <_ZNSt15__new_allocatorIP6ModuleEC1Ev>
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	4618      	mov	r0, r3
 8005744:	3708      	adds	r7, #8
 8005746:	46bd      	mov	sp, r7
 8005748:	bd80      	pop	{r7, pc}

0800574a <_ZNSt12_Vector_baseIP6ModuleSaIS1_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 800574a:	b480      	push	{r7}
 800574c:	b083      	sub	sp, #12
 800574e:	af00      	add	r7, sp, #0
 8005750:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	2200      	movs	r2, #0
 8005756:	601a      	str	r2, [r3, #0]
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2200      	movs	r2, #0
 800575c:	605a      	str	r2, [r3, #4]
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	2200      	movs	r2, #0
 8005762:	609a      	str	r2, [r3, #8]
	{ }
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	4618      	mov	r0, r3
 8005768:	370c      	adds	r7, #12
 800576a:	46bd      	mov	sp, r7
 800576c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005770:	4770      	bx	lr

08005772 <_ZN9__gnu_cxx17__normal_iteratorIPP6ModuleSt6vectorIS2_SaIS2_EEEC1ERKS3_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8005772:	b480      	push	{r7}
 8005774:	b083      	sub	sp, #12
 8005776:	af00      	add	r7, sp, #0
 8005778:	6078      	str	r0, [r7, #4]
 800577a:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 800577c:	683b      	ldr	r3, [r7, #0]
 800577e:	681a      	ldr	r2, [r3, #0]
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	601a      	str	r2, [r3, #0]
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	4618      	mov	r0, r3
 8005788:	370c      	adds	r7, #12
 800578a:	46bd      	mov	sp, r7
 800578c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005790:	4770      	bx	lr

08005792 <_ZNK9__gnu_cxx17__normal_iteratorIPP6ModuleSt6vectorIS2_SaIS2_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 8005792:	b480      	push	{r7}
 8005794:	b083      	sub	sp, #12
 8005796:	af00      	add	r7, sp, #0
 8005798:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	4618      	mov	r0, r3
 800579e:	370c      	adds	r7, #12
 80057a0:	46bd      	mov	sp, r7
 80057a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a6:	4770      	bx	lr

080057a8 <_ZNSt15__new_allocatorIP6ModuleEC1Ev>:
      // 2103. propagate_on_container_move_assignment
      typedef std::true_type propagate_on_container_move_assignment;
#endif

      _GLIBCXX20_CONSTEXPR
      __new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80057a8:	b480      	push	{r7}
 80057aa:	b083      	sub	sp, #12
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	6078      	str	r0, [r7, #4]
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	4618      	mov	r0, r3
 80057b4:	370c      	adds	r7, #12
 80057b6:	46bd      	mov	sp, r7
 80057b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057bc:	4770      	bx	lr
	...

080057c0 <__NVIC_EnableIRQ>:
{
 80057c0:	b480      	push	{r7}
 80057c2:	b083      	sub	sp, #12
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	4603      	mov	r3, r0
 80057c8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80057ca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	db0b      	blt.n	80057ea <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80057d2:	88fb      	ldrh	r3, [r7, #6]
 80057d4:	f003 021f 	and.w	r2, r3, #31
 80057d8:	4907      	ldr	r1, [pc, #28]	@ (80057f8 <__NVIC_EnableIRQ+0x38>)
 80057da:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80057de:	095b      	lsrs	r3, r3, #5
 80057e0:	2001      	movs	r0, #1
 80057e2:	fa00 f202 	lsl.w	r2, r0, r2
 80057e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80057ea:	bf00      	nop
 80057ec:	370c      	adds	r7, #12
 80057ee:	46bd      	mov	sp, r7
 80057f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f4:	4770      	bx	lr
 80057f6:	bf00      	nop
 80057f8:	e000e100 	.word	0xe000e100

080057fc <_ZN8pruTimerC1EP11TIM_TypeDef9IRQn_TypemP9pruThread>:
#include "pruThread.h"



// Timer constructor
pruTimer::pruTimer(TIM_TypeDef* timer, IRQn_Type irq, uint32_t frequency, pruThread* ownerPtr):
 80057fc:	b590      	push	{r4, r7, lr}
 80057fe:	b085      	sub	sp, #20
 8005800:	af00      	add	r7, sp, #0
 8005802:	60f8      	str	r0, [r7, #12]
 8005804:	60b9      	str	r1, [r7, #8]
 8005806:	603b      	str	r3, [r7, #0]
 8005808:	4613      	mov	r3, r2
 800580a:	80fb      	strh	r3, [r7, #6]
	timer(timer),
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	68ba      	ldr	r2, [r7, #8]
 8005810:	605a      	str	r2, [r3, #4]
	irq(irq),
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	88fa      	ldrh	r2, [r7, #6]
 8005816:	811a      	strh	r2, [r3, #8]
	frequency(frequency),
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	683a      	ldr	r2, [r7, #0]
 800581c:	60da      	str	r2, [r3, #12]
	timerOwnerPtr(ownerPtr)
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	6a3a      	ldr	r2, [r7, #32]
 8005822:	611a      	str	r2, [r3, #16]
{
	interruptPtr = new TimerInterrupt(this->irq, this);	// Instantiate a new Timer Interrupt object and pass "this" pointer
 8005824:	2008      	movs	r0, #8
 8005826:	f00d fad0 	bl	8012dca <_Znwj>
 800582a:	4603      	mov	r3, r0
 800582c:	461c      	mov	r4, r3
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8005834:	68fa      	ldr	r2, [r7, #12]
 8005836:	4619      	mov	r1, r3
 8005838:	4620      	mov	r0, r4
 800583a:	f000 f8af 	bl	800599c <_ZN14TimerInterruptC1EiP8pruTimer>
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	601c      	str	r4, [r3, #0]

	this->startTimer();
 8005842:	68f8      	ldr	r0, [r7, #12]
 8005844:	f000 f812 	bl	800586c <_ZN8pruTimer10startTimerEv>
}
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	4618      	mov	r0, r3
 800584c:	3714      	adds	r7, #20
 800584e:	46bd      	mov	sp, r7
 8005850:	bd90      	pop	{r4, r7, pc}

08005852 <_ZN8pruTimer9timerTickEv>:


void pruTimer::timerTick(void)
{
 8005852:	b580      	push	{r7, lr}
 8005854:	b082      	sub	sp, #8
 8005856:	af00      	add	r7, sp, #0
 8005858:	6078      	str	r0, [r7, #4]
	//Do something here
	this->timerOwnerPtr->run();
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	691b      	ldr	r3, [r3, #16]
 800585e:	4618      	mov	r0, r3
 8005860:	f7ff fe94 	bl	800558c <_ZN9pruThread3runEv>
}
 8005864:	bf00      	nop
 8005866:	3708      	adds	r7, #8
 8005868:	46bd      	mov	sp, r7
 800586a:	bd80      	pop	{r7, pc}

0800586c <_ZN8pruTimer10startTimerEv>:



void pruTimer::startTimer(void)
{
 800586c:	b580      	push	{r7, lr}
 800586e:	b086      	sub	sp, #24
 8005870:	af00      	add	r7, sp, #0
 8005872:	6078      	str	r0, [r7, #4]
    uint32_t TIM_CLK;

    if (this->timer == TIM2)
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	685b      	ldr	r3, [r3, #4]
 8005878:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800587c:	d115      	bne.n	80058aa <_ZN8pruTimer10startTimerEv+0x3e>
    {
        printf("	power on Timer 2\n\r");
 800587e:	483f      	ldr	r0, [pc, #252]	@ (800597c <_ZN8pruTimer10startTimerEv+0x110>)
 8005880:	f00d fe3a 	bl	80134f8 <iprintf>
        __HAL_RCC_TIM2_CLK_ENABLE();
 8005884:	4b3e      	ldr	r3, [pc, #248]	@ (8005980 <_ZN8pruTimer10startTimerEv+0x114>)
 8005886:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800588a:	4a3d      	ldr	r2, [pc, #244]	@ (8005980 <_ZN8pruTimer10startTimerEv+0x114>)
 800588c:	f043 0301 	orr.w	r3, r3, #1
 8005890:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8005894:	4b3a      	ldr	r3, [pc, #232]	@ (8005980 <_ZN8pruTimer10startTimerEv+0x114>)
 8005896:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800589a:	f003 0301 	and.w	r3, r3, #1
 800589e:	613b      	str	r3, [r7, #16]
 80058a0:	693b      	ldr	r3, [r7, #16]
        TIM_CLK = APB2CLK;
 80058a2:	4b38      	ldr	r3, [pc, #224]	@ (8005984 <_ZN8pruTimer10startTimerEv+0x118>)
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	617b      	str	r3, [r7, #20]
 80058a8:	e036      	b.n	8005918 <_ZN8pruTimer10startTimerEv+0xac>
    }
    else if (this->timer == TIM3)
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	685b      	ldr	r3, [r3, #4]
 80058ae:	4a36      	ldr	r2, [pc, #216]	@ (8005988 <_ZN8pruTimer10startTimerEv+0x11c>)
 80058b0:	4293      	cmp	r3, r2
 80058b2:	d116      	bne.n	80058e2 <_ZN8pruTimer10startTimerEv+0x76>
    {
        printf("	power on Timer 3\n\r");
 80058b4:	4835      	ldr	r0, [pc, #212]	@ (800598c <_ZN8pruTimer10startTimerEv+0x120>)
 80058b6:	f00d fe1f 	bl	80134f8 <iprintf>
        __HAL_RCC_TIM3_CLK_ENABLE();
 80058ba:	4b31      	ldr	r3, [pc, #196]	@ (8005980 <_ZN8pruTimer10startTimerEv+0x114>)
 80058bc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80058c0:	4a2f      	ldr	r2, [pc, #188]	@ (8005980 <_ZN8pruTimer10startTimerEv+0x114>)
 80058c2:	f043 0302 	orr.w	r3, r3, #2
 80058c6:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80058ca:	4b2d      	ldr	r3, [pc, #180]	@ (8005980 <_ZN8pruTimer10startTimerEv+0x114>)
 80058cc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80058d0:	f003 0302 	and.w	r3, r3, #2
 80058d4:	60fb      	str	r3, [r7, #12]
 80058d6:	68fb      	ldr	r3, [r7, #12]
        TIM_CLK = APB1CLK;
 80058d8:	4b2a      	ldr	r3, [pc, #168]	@ (8005984 <_ZN8pruTimer10startTimerEv+0x118>)
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	085b      	lsrs	r3, r3, #1
 80058de:	617b      	str	r3, [r7, #20]
 80058e0:	e01a      	b.n	8005918 <_ZN8pruTimer10startTimerEv+0xac>
    }
    else if (this->timer == TIM4)
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	685b      	ldr	r3, [r3, #4]
 80058e6:	4a2a      	ldr	r2, [pc, #168]	@ (8005990 <_ZN8pruTimer10startTimerEv+0x124>)
 80058e8:	4293      	cmp	r3, r2
 80058ea:	d115      	bne.n	8005918 <_ZN8pruTimer10startTimerEv+0xac>
    {
        printf("	power on Timer 4\n\r");
 80058ec:	4829      	ldr	r0, [pc, #164]	@ (8005994 <_ZN8pruTimer10startTimerEv+0x128>)
 80058ee:	f00d fe03 	bl	80134f8 <iprintf>
        __HAL_RCC_TIM4_CLK_ENABLE();
 80058f2:	4b23      	ldr	r3, [pc, #140]	@ (8005980 <_ZN8pruTimer10startTimerEv+0x114>)
 80058f4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80058f8:	4a21      	ldr	r2, [pc, #132]	@ (8005980 <_ZN8pruTimer10startTimerEv+0x114>)
 80058fa:	f043 0304 	orr.w	r3, r3, #4
 80058fe:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8005902:	4b1f      	ldr	r3, [pc, #124]	@ (8005980 <_ZN8pruTimer10startTimerEv+0x114>)
 8005904:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005908:	f003 0304 	and.w	r3, r3, #4
 800590c:	60bb      	str	r3, [r7, #8]
 800590e:	68bb      	ldr	r3, [r7, #8]
        TIM_CLK = APB1CLK;
 8005910:	4b1c      	ldr	r3, [pc, #112]	@ (8005984 <_ZN8pruTimer10startTimerEv+0x118>)
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	085b      	lsrs	r3, r3, #1
 8005916:	617b      	str	r3, [r7, #20]
    }

    //timer update frequency = TIM_CLK/(TIM_PSC+1)/(TIM_ARR + 1)

    this->timer->CR2 &= 0;                                            // UG used as trigg output
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	685b      	ldr	r3, [r3, #4]
 800591c:	685b      	ldr	r3, [r3, #4]
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	685b      	ldr	r3, [r3, #4]
 8005922:	2200      	movs	r2, #0
 8005924:	605a      	str	r2, [r3, #4]
    this->timer->PSC = TIM_PSC-1;                                     // prescaler
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	685b      	ldr	r3, [r3, #4]
 800592a:	2200      	movs	r2, #0
 800592c:	629a      	str	r2, [r3, #40]	@ 0x28
    this->timer->ARR = ((TIM_CLK / TIM_PSC / this->frequency) - 1);   // period           
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	68db      	ldr	r3, [r3, #12]
 8005932:	697a      	ldr	r2, [r7, #20]
 8005934:	fbb2 f2f3 	udiv	r2, r2, r3
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	685b      	ldr	r3, [r3, #4]
 800593c:	3a01      	subs	r2, #1
 800593e:	62da      	str	r2, [r3, #44]	@ 0x2c
    this->timer->EGR = TIM_EGR_UG;                                    // reinit the counter
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	685b      	ldr	r3, [r3, #4]
 8005944:	2201      	movs	r2, #1
 8005946:	615a      	str	r2, [r3, #20]
    this->timer->DIER = TIM_DIER_UIE;                                 // enable update interrupts
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	685b      	ldr	r3, [r3, #4]
 800594c:	2201      	movs	r2, #1
 800594e:	60da      	str	r2, [r3, #12]

    this->timer->CR1 |= TIM_CR1_CEN;                                  // enable timer
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	685b      	ldr	r3, [r3, #4]
 8005954:	681a      	ldr	r2, [r3, #0]
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	685b      	ldr	r3, [r3, #4]
 800595a:	f042 0201 	orr.w	r2, r2, #1
 800595e:	601a      	str	r2, [r3, #0]

    NVIC_EnableIRQ(this->irq);
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8005966:	4618      	mov	r0, r3
 8005968:	f7ff ff2a 	bl	80057c0 <__NVIC_EnableIRQ>

    printf("	timer started\n");
 800596c:	480a      	ldr	r0, [pc, #40]	@ (8005998 <_ZN8pruTimer10startTimerEv+0x12c>)
 800596e:	f00d fe33 	bl	80135d8 <puts>
}
 8005972:	bf00      	nop
 8005974:	3718      	adds	r7, #24
 8005976:	46bd      	mov	sp, r7
 8005978:	bd80      	pop	{r7, pc}
 800597a:	bf00      	nop
 800597c:	08014800 	.word	0x08014800
 8005980:	58024400 	.word	0x58024400
 8005984:	24000058 	.word	0x24000058
 8005988:	40000400 	.word	0x40000400
 800598c:	08014814 	.word	0x08014814
 8005990:	40000800 	.word	0x40000800
 8005994:	08014828 	.word	0x08014828
 8005998:	0801483c 	.word	0x0801483c

0800599c <_ZN14TimerInterruptC1EiP8pruTimer>:
#include "../interrupt/interrupt.h"
#include "timerInterrupt.h"
#include "timer.h"


TimerInterrupt::TimerInterrupt(int interruptNumber, pruTimer* owner)
 800599c:	b580      	push	{r7, lr}
 800599e:	b084      	sub	sp, #16
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	60f8      	str	r0, [r7, #12]
 80059a4:	60b9      	str	r1, [r7, #8]
 80059a6:	607a      	str	r2, [r7, #4]
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	4618      	mov	r0, r3
 80059ac:	f7fb f840 	bl	8000a30 <_ZN9InterruptC1Ev>
 80059b0:	4a07      	ldr	r2, [pc, #28]	@ (80059d0 <_ZN14TimerInterruptC1EiP8pruTimer+0x34>)
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	601a      	str	r2, [r3, #0]
{
	// Allows interrupt to access owner's data
	InterruptOwnerPtr = owner;
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	687a      	ldr	r2, [r7, #4]
 80059ba:	605a      	str	r2, [r3, #4]

	// When a device interrupt object is instantiated, the Register function must be called to let the
	// Interrupt base class know that there is an appropriate ISR function for the given interrupt.
	Interrupt::Register(interruptNumber, this);
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	4619      	mov	r1, r3
 80059c0:	68b8      	ldr	r0, [r7, #8]
 80059c2:	f7fb f845 	bl	8000a50 <_ZN9Interrupt8RegisterEiPS_>
}
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	4618      	mov	r0, r3
 80059ca:	3710      	adds	r7, #16
 80059cc:	46bd      	mov	sp, r7
 80059ce:	bd80      	pop	{r7, pc}
 80059d0:	08014918 	.word	0x08014918

080059d4 <_ZN14TimerInterrupt11ISR_HandlerEv>:


void TimerInterrupt::ISR_Handler(void)
{
 80059d4:	b580      	push	{r7, lr}
 80059d6:	b082      	sub	sp, #8
 80059d8:	af00      	add	r7, sp, #0
 80059da:	6078      	str	r0, [r7, #4]
	this->InterruptOwnerPtr->timerTick();
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	685b      	ldr	r3, [r3, #4]
 80059e0:	4618      	mov	r0, r3
 80059e2:	f7ff ff36 	bl	8005852 <_ZN8pruTimer9timerTickEv>
}
 80059e6:	bf00      	nop
 80059e8:	3708      	adds	r7, #8
 80059ea:	46bd      	mov	sp, r7
 80059ec:	bd80      	pop	{r7, pc}
	...

080059f0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80059f0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8005a28 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80059f4:	f7fe ffb6 	bl	8004964 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80059f8:	480c      	ldr	r0, [pc, #48]	@ (8005a2c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80059fa:	490d      	ldr	r1, [pc, #52]	@ (8005a30 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80059fc:	4a0d      	ldr	r2, [pc, #52]	@ (8005a34 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80059fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005a00:	e002      	b.n	8005a08 <LoopCopyDataInit>

08005a02 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005a02:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005a04:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005a06:	3304      	adds	r3, #4

08005a08 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005a08:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005a0a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005a0c:	d3f9      	bcc.n	8005a02 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005a0e:	4a0a      	ldr	r2, [pc, #40]	@ (8005a38 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8005a10:	4c0a      	ldr	r4, [pc, #40]	@ (8005a3c <LoopFillZerobss+0x22>)
  movs r3, #0
 8005a12:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005a14:	e001      	b.n	8005a1a <LoopFillZerobss>

08005a16 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005a16:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005a18:	3204      	adds	r2, #4

08005a1a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005a1a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005a1c:	d3fb      	bcc.n	8005a16 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8005a1e:	f00d ff7d 	bl	801391c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005a22:	f7fc f9bb 	bl	8001d9c <main>
  bx  lr
 8005a26:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8005a28:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8005a2c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8005a30:	240000c4 	.word	0x240000c4
  ldr r2, =_sidata
 8005a34:	08014a60 	.word	0x08014a60
  ldr r2, =_sbss
 8005a38:	240000e0 	.word	0x240000e0
  ldr r4, =_ebss
 8005a3c:	24000eec 	.word	0x24000eec

08005a40 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005a40:	e7fe      	b.n	8005a40 <ADC3_IRQHandler>
	...

08005a44 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005a44:	b580      	push	{r7, lr}
 8005a46:	b082      	sub	sp, #8
 8005a48:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005a4a:	2003      	movs	r0, #3
 8005a4c:	f000 f9a2 	bl	8005d94 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005a50:	f003 fe58 	bl	8009704 <HAL_RCC_GetSysClockFreq>
 8005a54:	4602      	mov	r2, r0
 8005a56:	4b15      	ldr	r3, [pc, #84]	@ (8005aac <HAL_Init+0x68>)
 8005a58:	699b      	ldr	r3, [r3, #24]
 8005a5a:	0a1b      	lsrs	r3, r3, #8
 8005a5c:	f003 030f 	and.w	r3, r3, #15
 8005a60:	4913      	ldr	r1, [pc, #76]	@ (8005ab0 <HAL_Init+0x6c>)
 8005a62:	5ccb      	ldrb	r3, [r1, r3]
 8005a64:	f003 031f 	and.w	r3, r3, #31
 8005a68:	fa22 f303 	lsr.w	r3, r2, r3
 8005a6c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005a6e:	4b0f      	ldr	r3, [pc, #60]	@ (8005aac <HAL_Init+0x68>)
 8005a70:	699b      	ldr	r3, [r3, #24]
 8005a72:	f003 030f 	and.w	r3, r3, #15
 8005a76:	4a0e      	ldr	r2, [pc, #56]	@ (8005ab0 <HAL_Init+0x6c>)
 8005a78:	5cd3      	ldrb	r3, [r2, r3]
 8005a7a:	f003 031f 	and.w	r3, r3, #31
 8005a7e:	687a      	ldr	r2, [r7, #4]
 8005a80:	fa22 f303 	lsr.w	r3, r2, r3
 8005a84:	4a0b      	ldr	r2, [pc, #44]	@ (8005ab4 <HAL_Init+0x70>)
 8005a86:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005a88:	4a0b      	ldr	r2, [pc, #44]	@ (8005ab8 <HAL_Init+0x74>)
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8005a8e:	200f      	movs	r0, #15
 8005a90:	f000 f814 	bl	8005abc <HAL_InitTick>
 8005a94:	4603      	mov	r3, r0
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d001      	beq.n	8005a9e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8005a9a:	2301      	movs	r3, #1
 8005a9c:	e002      	b.n	8005aa4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8005a9e:	f7fe fd47 	bl	8004530 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005aa2:	2300      	movs	r3, #0
}
 8005aa4:	4618      	mov	r0, r3
 8005aa6:	3708      	adds	r7, #8
 8005aa8:	46bd      	mov	sp, r7
 8005aaa:	bd80      	pop	{r7, pc}
 8005aac:	58024400 	.word	0x58024400
 8005ab0:	080148ac 	.word	0x080148ac
 8005ab4:	2400005c 	.word	0x2400005c
 8005ab8:	24000058 	.word	0x24000058

08005abc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005abc:	b580      	push	{r7, lr}
 8005abe:	b082      	sub	sp, #8
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8005ac4:	4b15      	ldr	r3, [pc, #84]	@ (8005b1c <HAL_InitTick+0x60>)
 8005ac6:	781b      	ldrb	r3, [r3, #0]
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d101      	bne.n	8005ad0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8005acc:	2301      	movs	r3, #1
 8005ace:	e021      	b.n	8005b14 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8005ad0:	4b13      	ldr	r3, [pc, #76]	@ (8005b20 <HAL_InitTick+0x64>)
 8005ad2:	681a      	ldr	r2, [r3, #0]
 8005ad4:	4b11      	ldr	r3, [pc, #68]	@ (8005b1c <HAL_InitTick+0x60>)
 8005ad6:	781b      	ldrb	r3, [r3, #0]
 8005ad8:	4619      	mov	r1, r3
 8005ada:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8005ade:	fbb3 f3f1 	udiv	r3, r3, r1
 8005ae2:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ae6:	4618      	mov	r0, r3
 8005ae8:	f000 f98b 	bl	8005e02 <HAL_SYSTICK_Config>
 8005aec:	4603      	mov	r3, r0
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d001      	beq.n	8005af6 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8005af2:	2301      	movs	r3, #1
 8005af4:	e00e      	b.n	8005b14 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	2b0f      	cmp	r3, #15
 8005afa:	d80a      	bhi.n	8005b12 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005afc:	2200      	movs	r2, #0
 8005afe:	6879      	ldr	r1, [r7, #4]
 8005b00:	f04f 30ff 	mov.w	r0, #4294967295
 8005b04:	f000 f951 	bl	8005daa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005b08:	4a06      	ldr	r2, [pc, #24]	@ (8005b24 <HAL_InitTick+0x68>)
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005b0e:	2300      	movs	r3, #0
 8005b10:	e000      	b.n	8005b14 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8005b12:	2301      	movs	r3, #1
}
 8005b14:	4618      	mov	r0, r3
 8005b16:	3708      	adds	r7, #8
 8005b18:	46bd      	mov	sp, r7
 8005b1a:	bd80      	pop	{r7, pc}
 8005b1c:	24000064 	.word	0x24000064
 8005b20:	24000058 	.word	0x24000058
 8005b24:	24000060 	.word	0x24000060

08005b28 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005b28:	b480      	push	{r7}
 8005b2a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8005b2c:	4b06      	ldr	r3, [pc, #24]	@ (8005b48 <HAL_IncTick+0x20>)
 8005b2e:	781b      	ldrb	r3, [r3, #0]
 8005b30:	461a      	mov	r2, r3
 8005b32:	4b06      	ldr	r3, [pc, #24]	@ (8005b4c <HAL_IncTick+0x24>)
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	4413      	add	r3, r2
 8005b38:	4a04      	ldr	r2, [pc, #16]	@ (8005b4c <HAL_IncTick+0x24>)
 8005b3a:	6013      	str	r3, [r2, #0]
}
 8005b3c:	bf00      	nop
 8005b3e:	46bd      	mov	sp, r7
 8005b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b44:	4770      	bx	lr
 8005b46:	bf00      	nop
 8005b48:	24000064 	.word	0x24000064
 8005b4c:	240006e0 	.word	0x240006e0

08005b50 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005b50:	b480      	push	{r7}
 8005b52:	af00      	add	r7, sp, #0
  return uwTick;
 8005b54:	4b03      	ldr	r3, [pc, #12]	@ (8005b64 <HAL_GetTick+0x14>)
 8005b56:	681b      	ldr	r3, [r3, #0]
}
 8005b58:	4618      	mov	r0, r3
 8005b5a:	46bd      	mov	sp, r7
 8005b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b60:	4770      	bx	lr
 8005b62:	bf00      	nop
 8005b64:	240006e0 	.word	0x240006e0

08005b68 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005b68:	b580      	push	{r7, lr}
 8005b6a:	b084      	sub	sp, #16
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005b70:	f7ff ffee 	bl	8005b50 <HAL_GetTick>
 8005b74:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b80:	d005      	beq.n	8005b8e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005b82:	4b0a      	ldr	r3, [pc, #40]	@ (8005bac <HAL_Delay+0x44>)
 8005b84:	781b      	ldrb	r3, [r3, #0]
 8005b86:	461a      	mov	r2, r3
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	4413      	add	r3, r2
 8005b8c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005b8e:	bf00      	nop
 8005b90:	f7ff ffde 	bl	8005b50 <HAL_GetTick>
 8005b94:	4602      	mov	r2, r0
 8005b96:	68bb      	ldr	r3, [r7, #8]
 8005b98:	1ad3      	subs	r3, r2, r3
 8005b9a:	68fa      	ldr	r2, [r7, #12]
 8005b9c:	429a      	cmp	r2, r3
 8005b9e:	d8f7      	bhi.n	8005b90 <HAL_Delay+0x28>
  {
  }
}
 8005ba0:	bf00      	nop
 8005ba2:	bf00      	nop
 8005ba4:	3710      	adds	r7, #16
 8005ba6:	46bd      	mov	sp, r7
 8005ba8:	bd80      	pop	{r7, pc}
 8005baa:	bf00      	nop
 8005bac:	24000064 	.word	0x24000064

08005bb0 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8005bb0:	b480      	push	{r7}
 8005bb2:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8005bb4:	4b03      	ldr	r3, [pc, #12]	@ (8005bc4 <HAL_GetREVID+0x14>)
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	0c1b      	lsrs	r3, r3, #16
}
 8005bba:	4618      	mov	r0, r3
 8005bbc:	46bd      	mov	sp, r7
 8005bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc2:	4770      	bx	lr
 8005bc4:	5c001000 	.word	0x5c001000

08005bc8 <__NVIC_SetPriorityGrouping>:
{
 8005bc8:	b480      	push	{r7}
 8005bca:	b085      	sub	sp, #20
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	f003 0307 	and.w	r3, r3, #7
 8005bd6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005bd8:	4b0b      	ldr	r3, [pc, #44]	@ (8005c08 <__NVIC_SetPriorityGrouping+0x40>)
 8005bda:	68db      	ldr	r3, [r3, #12]
 8005bdc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005bde:	68ba      	ldr	r2, [r7, #8]
 8005be0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005be4:	4013      	ands	r3, r2
 8005be6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005bec:	68bb      	ldr	r3, [r7, #8]
 8005bee:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8005bf0:	4b06      	ldr	r3, [pc, #24]	@ (8005c0c <__NVIC_SetPriorityGrouping+0x44>)
 8005bf2:	4313      	orrs	r3, r2
 8005bf4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005bf6:	4a04      	ldr	r2, [pc, #16]	@ (8005c08 <__NVIC_SetPriorityGrouping+0x40>)
 8005bf8:	68bb      	ldr	r3, [r7, #8]
 8005bfa:	60d3      	str	r3, [r2, #12]
}
 8005bfc:	bf00      	nop
 8005bfe:	3714      	adds	r7, #20
 8005c00:	46bd      	mov	sp, r7
 8005c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c06:	4770      	bx	lr
 8005c08:	e000ed00 	.word	0xe000ed00
 8005c0c:	05fa0000 	.word	0x05fa0000

08005c10 <__NVIC_GetPriorityGrouping>:
{
 8005c10:	b480      	push	{r7}
 8005c12:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005c14:	4b04      	ldr	r3, [pc, #16]	@ (8005c28 <__NVIC_GetPriorityGrouping+0x18>)
 8005c16:	68db      	ldr	r3, [r3, #12]
 8005c18:	0a1b      	lsrs	r3, r3, #8
 8005c1a:	f003 0307 	and.w	r3, r3, #7
}
 8005c1e:	4618      	mov	r0, r3
 8005c20:	46bd      	mov	sp, r7
 8005c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c26:	4770      	bx	lr
 8005c28:	e000ed00 	.word	0xe000ed00

08005c2c <__NVIC_EnableIRQ>:
{
 8005c2c:	b480      	push	{r7}
 8005c2e:	b083      	sub	sp, #12
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	4603      	mov	r3, r0
 8005c34:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005c36:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	db0b      	blt.n	8005c56 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005c3e:	88fb      	ldrh	r3, [r7, #6]
 8005c40:	f003 021f 	and.w	r2, r3, #31
 8005c44:	4907      	ldr	r1, [pc, #28]	@ (8005c64 <__NVIC_EnableIRQ+0x38>)
 8005c46:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005c4a:	095b      	lsrs	r3, r3, #5
 8005c4c:	2001      	movs	r0, #1
 8005c4e:	fa00 f202 	lsl.w	r2, r0, r2
 8005c52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8005c56:	bf00      	nop
 8005c58:	370c      	adds	r7, #12
 8005c5a:	46bd      	mov	sp, r7
 8005c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c60:	4770      	bx	lr
 8005c62:	bf00      	nop
 8005c64:	e000e100 	.word	0xe000e100

08005c68 <__NVIC_SetPriority>:
{
 8005c68:	b480      	push	{r7}
 8005c6a:	b083      	sub	sp, #12
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	4603      	mov	r3, r0
 8005c70:	6039      	str	r1, [r7, #0]
 8005c72:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005c74:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	db0a      	blt.n	8005c92 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005c7c:	683b      	ldr	r3, [r7, #0]
 8005c7e:	b2da      	uxtb	r2, r3
 8005c80:	490c      	ldr	r1, [pc, #48]	@ (8005cb4 <__NVIC_SetPriority+0x4c>)
 8005c82:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005c86:	0112      	lsls	r2, r2, #4
 8005c88:	b2d2      	uxtb	r2, r2
 8005c8a:	440b      	add	r3, r1
 8005c8c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8005c90:	e00a      	b.n	8005ca8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005c92:	683b      	ldr	r3, [r7, #0]
 8005c94:	b2da      	uxtb	r2, r3
 8005c96:	4908      	ldr	r1, [pc, #32]	@ (8005cb8 <__NVIC_SetPriority+0x50>)
 8005c98:	88fb      	ldrh	r3, [r7, #6]
 8005c9a:	f003 030f 	and.w	r3, r3, #15
 8005c9e:	3b04      	subs	r3, #4
 8005ca0:	0112      	lsls	r2, r2, #4
 8005ca2:	b2d2      	uxtb	r2, r2
 8005ca4:	440b      	add	r3, r1
 8005ca6:	761a      	strb	r2, [r3, #24]
}
 8005ca8:	bf00      	nop
 8005caa:	370c      	adds	r7, #12
 8005cac:	46bd      	mov	sp, r7
 8005cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb2:	4770      	bx	lr
 8005cb4:	e000e100 	.word	0xe000e100
 8005cb8:	e000ed00 	.word	0xe000ed00

08005cbc <NVIC_EncodePriority>:
{
 8005cbc:	b480      	push	{r7}
 8005cbe:	b089      	sub	sp, #36	@ 0x24
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	60f8      	str	r0, [r7, #12]
 8005cc4:	60b9      	str	r1, [r7, #8]
 8005cc6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	f003 0307 	and.w	r3, r3, #7
 8005cce:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005cd0:	69fb      	ldr	r3, [r7, #28]
 8005cd2:	f1c3 0307 	rsb	r3, r3, #7
 8005cd6:	2b04      	cmp	r3, #4
 8005cd8:	bf28      	it	cs
 8005cda:	2304      	movcs	r3, #4
 8005cdc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005cde:	69fb      	ldr	r3, [r7, #28]
 8005ce0:	3304      	adds	r3, #4
 8005ce2:	2b06      	cmp	r3, #6
 8005ce4:	d902      	bls.n	8005cec <NVIC_EncodePriority+0x30>
 8005ce6:	69fb      	ldr	r3, [r7, #28]
 8005ce8:	3b03      	subs	r3, #3
 8005cea:	e000      	b.n	8005cee <NVIC_EncodePriority+0x32>
 8005cec:	2300      	movs	r3, #0
 8005cee:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005cf0:	f04f 32ff 	mov.w	r2, #4294967295
 8005cf4:	69bb      	ldr	r3, [r7, #24]
 8005cf6:	fa02 f303 	lsl.w	r3, r2, r3
 8005cfa:	43da      	mvns	r2, r3
 8005cfc:	68bb      	ldr	r3, [r7, #8]
 8005cfe:	401a      	ands	r2, r3
 8005d00:	697b      	ldr	r3, [r7, #20]
 8005d02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005d04:	f04f 31ff 	mov.w	r1, #4294967295
 8005d08:	697b      	ldr	r3, [r7, #20]
 8005d0a:	fa01 f303 	lsl.w	r3, r1, r3
 8005d0e:	43d9      	mvns	r1, r3
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005d14:	4313      	orrs	r3, r2
}
 8005d16:	4618      	mov	r0, r3
 8005d18:	3724      	adds	r7, #36	@ 0x24
 8005d1a:	46bd      	mov	sp, r7
 8005d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d20:	4770      	bx	lr
	...

08005d24 <__NVIC_SystemReset>:
{
 8005d24:	b480      	push	{r7}
 8005d26:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8005d28:	f3bf 8f4f 	dsb	sy
}
 8005d2c:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8005d2e:	4b06      	ldr	r3, [pc, #24]	@ (8005d48 <__NVIC_SystemReset+0x24>)
 8005d30:	68db      	ldr	r3, [r3, #12]
 8005d32:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8005d36:	4904      	ldr	r1, [pc, #16]	@ (8005d48 <__NVIC_SystemReset+0x24>)
 8005d38:	4b04      	ldr	r3, [pc, #16]	@ (8005d4c <__NVIC_SystemReset+0x28>)
 8005d3a:	4313      	orrs	r3, r2
 8005d3c:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8005d3e:	f3bf 8f4f 	dsb	sy
}
 8005d42:	bf00      	nop
    __NOP();
 8005d44:	bf00      	nop
 8005d46:	e7fd      	b.n	8005d44 <__NVIC_SystemReset+0x20>
 8005d48:	e000ed00 	.word	0xe000ed00
 8005d4c:	05fa0004 	.word	0x05fa0004

08005d50 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005d50:	b580      	push	{r7, lr}
 8005d52:	b082      	sub	sp, #8
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	3b01      	subs	r3, #1
 8005d5c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005d60:	d301      	bcc.n	8005d66 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005d62:	2301      	movs	r3, #1
 8005d64:	e00f      	b.n	8005d86 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005d66:	4a0a      	ldr	r2, [pc, #40]	@ (8005d90 <SysTick_Config+0x40>)
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	3b01      	subs	r3, #1
 8005d6c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005d6e:	210f      	movs	r1, #15
 8005d70:	f04f 30ff 	mov.w	r0, #4294967295
 8005d74:	f7ff ff78 	bl	8005c68 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005d78:	4b05      	ldr	r3, [pc, #20]	@ (8005d90 <SysTick_Config+0x40>)
 8005d7a:	2200      	movs	r2, #0
 8005d7c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005d7e:	4b04      	ldr	r3, [pc, #16]	@ (8005d90 <SysTick_Config+0x40>)
 8005d80:	2207      	movs	r2, #7
 8005d82:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005d84:	2300      	movs	r3, #0
}
 8005d86:	4618      	mov	r0, r3
 8005d88:	3708      	adds	r7, #8
 8005d8a:	46bd      	mov	sp, r7
 8005d8c:	bd80      	pop	{r7, pc}
 8005d8e:	bf00      	nop
 8005d90:	e000e010 	.word	0xe000e010

08005d94 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005d94:	b580      	push	{r7, lr}
 8005d96:	b082      	sub	sp, #8
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005d9c:	6878      	ldr	r0, [r7, #4]
 8005d9e:	f7ff ff13 	bl	8005bc8 <__NVIC_SetPriorityGrouping>
}
 8005da2:	bf00      	nop
 8005da4:	3708      	adds	r7, #8
 8005da6:	46bd      	mov	sp, r7
 8005da8:	bd80      	pop	{r7, pc}

08005daa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005daa:	b580      	push	{r7, lr}
 8005dac:	b086      	sub	sp, #24
 8005dae:	af00      	add	r7, sp, #0
 8005db0:	4603      	mov	r3, r0
 8005db2:	60b9      	str	r1, [r7, #8]
 8005db4:	607a      	str	r2, [r7, #4]
 8005db6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005db8:	f7ff ff2a 	bl	8005c10 <__NVIC_GetPriorityGrouping>
 8005dbc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005dbe:	687a      	ldr	r2, [r7, #4]
 8005dc0:	68b9      	ldr	r1, [r7, #8]
 8005dc2:	6978      	ldr	r0, [r7, #20]
 8005dc4:	f7ff ff7a 	bl	8005cbc <NVIC_EncodePriority>
 8005dc8:	4602      	mov	r2, r0
 8005dca:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005dce:	4611      	mov	r1, r2
 8005dd0:	4618      	mov	r0, r3
 8005dd2:	f7ff ff49 	bl	8005c68 <__NVIC_SetPriority>
}
 8005dd6:	bf00      	nop
 8005dd8:	3718      	adds	r7, #24
 8005dda:	46bd      	mov	sp, r7
 8005ddc:	bd80      	pop	{r7, pc}

08005dde <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005dde:	b580      	push	{r7, lr}
 8005de0:	b082      	sub	sp, #8
 8005de2:	af00      	add	r7, sp, #0
 8005de4:	4603      	mov	r3, r0
 8005de6:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005de8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005dec:	4618      	mov	r0, r3
 8005dee:	f7ff ff1d 	bl	8005c2c <__NVIC_EnableIRQ>
}
 8005df2:	bf00      	nop
 8005df4:	3708      	adds	r7, #8
 8005df6:	46bd      	mov	sp, r7
 8005df8:	bd80      	pop	{r7, pc}

08005dfa <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8005dfa:	b580      	push	{r7, lr}
 8005dfc:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8005dfe:	f7ff ff91 	bl	8005d24 <__NVIC_SystemReset>

08005e02 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005e02:	b580      	push	{r7, lr}
 8005e04:	b082      	sub	sp, #8
 8005e06:	af00      	add	r7, sp, #0
 8005e08:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005e0a:	6878      	ldr	r0, [r7, #4]
 8005e0c:	f7ff ffa0 	bl	8005d50 <SysTick_Config>
 8005e10:	4603      	mov	r3, r0
}
 8005e12:	4618      	mov	r0, r3
 8005e14:	3708      	adds	r7, #8
 8005e16:	46bd      	mov	sp, r7
 8005e18:	bd80      	pop	{r7, pc}
	...

08005e1c <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8005e1c:	b480      	push	{r7}
 8005e1e:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8005e20:	f3bf 8f5f 	dmb	sy
}
 8005e24:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8005e26:	4b07      	ldr	r3, [pc, #28]	@ (8005e44 <HAL_MPU_Disable+0x28>)
 8005e28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e2a:	4a06      	ldr	r2, [pc, #24]	@ (8005e44 <HAL_MPU_Disable+0x28>)
 8005e2c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005e30:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8005e32:	4b05      	ldr	r3, [pc, #20]	@ (8005e48 <HAL_MPU_Disable+0x2c>)
 8005e34:	2200      	movs	r2, #0
 8005e36:	605a      	str	r2, [r3, #4]
}
 8005e38:	bf00      	nop
 8005e3a:	46bd      	mov	sp, r7
 8005e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e40:	4770      	bx	lr
 8005e42:	bf00      	nop
 8005e44:	e000ed00 	.word	0xe000ed00
 8005e48:	e000ed90 	.word	0xe000ed90

08005e4c <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8005e4c:	b480      	push	{r7}
 8005e4e:	b083      	sub	sp, #12
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8005e54:	4a0b      	ldr	r2, [pc, #44]	@ (8005e84 <HAL_MPU_Enable+0x38>)
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	f043 0301 	orr.w	r3, r3, #1
 8005e5c:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8005e5e:	4b0a      	ldr	r3, [pc, #40]	@ (8005e88 <HAL_MPU_Enable+0x3c>)
 8005e60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e62:	4a09      	ldr	r2, [pc, #36]	@ (8005e88 <HAL_MPU_Enable+0x3c>)
 8005e64:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005e68:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8005e6a:	f3bf 8f4f 	dsb	sy
}
 8005e6e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8005e70:	f3bf 8f6f 	isb	sy
}
 8005e74:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8005e76:	bf00      	nop
 8005e78:	370c      	adds	r7, #12
 8005e7a:	46bd      	mov	sp, r7
 8005e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e80:	4770      	bx	lr
 8005e82:	bf00      	nop
 8005e84:	e000ed90 	.word	0xe000ed90
 8005e88:	e000ed00 	.word	0xe000ed00

08005e8c <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8005e8c:	b480      	push	{r7}
 8005e8e:	b083      	sub	sp, #12
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	785a      	ldrb	r2, [r3, #1]
 8005e98:	4b1b      	ldr	r3, [pc, #108]	@ (8005f08 <HAL_MPU_ConfigRegion+0x7c>)
 8005e9a:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8005e9c:	4b1a      	ldr	r3, [pc, #104]	@ (8005f08 <HAL_MPU_ConfigRegion+0x7c>)
 8005e9e:	691b      	ldr	r3, [r3, #16]
 8005ea0:	4a19      	ldr	r2, [pc, #100]	@ (8005f08 <HAL_MPU_ConfigRegion+0x7c>)
 8005ea2:	f023 0301 	bic.w	r3, r3, #1
 8005ea6:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8005ea8:	4a17      	ldr	r2, [pc, #92]	@ (8005f08 <HAL_MPU_ConfigRegion+0x7c>)
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	685b      	ldr	r3, [r3, #4]
 8005eae:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	7b1b      	ldrb	r3, [r3, #12]
 8005eb4:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	7adb      	ldrb	r3, [r3, #11]
 8005eba:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8005ebc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	7a9b      	ldrb	r3, [r3, #10]
 8005ec2:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8005ec4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	7b5b      	ldrb	r3, [r3, #13]
 8005eca:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8005ecc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	7b9b      	ldrb	r3, [r3, #14]
 8005ed2:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8005ed4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	7bdb      	ldrb	r3, [r3, #15]
 8005eda:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8005edc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	7a5b      	ldrb	r3, [r3, #9]
 8005ee2:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8005ee4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	7a1b      	ldrb	r3, [r3, #8]
 8005eea:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8005eec:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8005eee:	687a      	ldr	r2, [r7, #4]
 8005ef0:	7812      	ldrb	r2, [r2, #0]
 8005ef2:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8005ef4:	4a04      	ldr	r2, [pc, #16]	@ (8005f08 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8005ef6:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8005ef8:	6113      	str	r3, [r2, #16]
}
 8005efa:	bf00      	nop
 8005efc:	370c      	adds	r7, #12
 8005efe:	46bd      	mov	sp, r7
 8005f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f04:	4770      	bx	lr
 8005f06:	bf00      	nop
 8005f08:	e000ed90 	.word	0xe000ed90

08005f0c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005f0c:	b580      	push	{r7, lr}
 8005f0e:	b086      	sub	sp, #24
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8005f14:	f7ff fe1c 	bl	8005b50 <HAL_GetTick>
 8005f18:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d101      	bne.n	8005f24 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8005f20:	2301      	movs	r3, #1
 8005f22:	e316      	b.n	8006552 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	4a66      	ldr	r2, [pc, #408]	@ (80060c4 <HAL_DMA_Init+0x1b8>)
 8005f2a:	4293      	cmp	r3, r2
 8005f2c:	d04a      	beq.n	8005fc4 <HAL_DMA_Init+0xb8>
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	4a65      	ldr	r2, [pc, #404]	@ (80060c8 <HAL_DMA_Init+0x1bc>)
 8005f34:	4293      	cmp	r3, r2
 8005f36:	d045      	beq.n	8005fc4 <HAL_DMA_Init+0xb8>
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	4a63      	ldr	r2, [pc, #396]	@ (80060cc <HAL_DMA_Init+0x1c0>)
 8005f3e:	4293      	cmp	r3, r2
 8005f40:	d040      	beq.n	8005fc4 <HAL_DMA_Init+0xb8>
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	4a62      	ldr	r2, [pc, #392]	@ (80060d0 <HAL_DMA_Init+0x1c4>)
 8005f48:	4293      	cmp	r3, r2
 8005f4a:	d03b      	beq.n	8005fc4 <HAL_DMA_Init+0xb8>
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	4a60      	ldr	r2, [pc, #384]	@ (80060d4 <HAL_DMA_Init+0x1c8>)
 8005f52:	4293      	cmp	r3, r2
 8005f54:	d036      	beq.n	8005fc4 <HAL_DMA_Init+0xb8>
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	4a5f      	ldr	r2, [pc, #380]	@ (80060d8 <HAL_DMA_Init+0x1cc>)
 8005f5c:	4293      	cmp	r3, r2
 8005f5e:	d031      	beq.n	8005fc4 <HAL_DMA_Init+0xb8>
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	4a5d      	ldr	r2, [pc, #372]	@ (80060dc <HAL_DMA_Init+0x1d0>)
 8005f66:	4293      	cmp	r3, r2
 8005f68:	d02c      	beq.n	8005fc4 <HAL_DMA_Init+0xb8>
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	4a5c      	ldr	r2, [pc, #368]	@ (80060e0 <HAL_DMA_Init+0x1d4>)
 8005f70:	4293      	cmp	r3, r2
 8005f72:	d027      	beq.n	8005fc4 <HAL_DMA_Init+0xb8>
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	4a5a      	ldr	r2, [pc, #360]	@ (80060e4 <HAL_DMA_Init+0x1d8>)
 8005f7a:	4293      	cmp	r3, r2
 8005f7c:	d022      	beq.n	8005fc4 <HAL_DMA_Init+0xb8>
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	4a59      	ldr	r2, [pc, #356]	@ (80060e8 <HAL_DMA_Init+0x1dc>)
 8005f84:	4293      	cmp	r3, r2
 8005f86:	d01d      	beq.n	8005fc4 <HAL_DMA_Init+0xb8>
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	4a57      	ldr	r2, [pc, #348]	@ (80060ec <HAL_DMA_Init+0x1e0>)
 8005f8e:	4293      	cmp	r3, r2
 8005f90:	d018      	beq.n	8005fc4 <HAL_DMA_Init+0xb8>
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	4a56      	ldr	r2, [pc, #344]	@ (80060f0 <HAL_DMA_Init+0x1e4>)
 8005f98:	4293      	cmp	r3, r2
 8005f9a:	d013      	beq.n	8005fc4 <HAL_DMA_Init+0xb8>
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	4a54      	ldr	r2, [pc, #336]	@ (80060f4 <HAL_DMA_Init+0x1e8>)
 8005fa2:	4293      	cmp	r3, r2
 8005fa4:	d00e      	beq.n	8005fc4 <HAL_DMA_Init+0xb8>
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	4a53      	ldr	r2, [pc, #332]	@ (80060f8 <HAL_DMA_Init+0x1ec>)
 8005fac:	4293      	cmp	r3, r2
 8005fae:	d009      	beq.n	8005fc4 <HAL_DMA_Init+0xb8>
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	4a51      	ldr	r2, [pc, #324]	@ (80060fc <HAL_DMA_Init+0x1f0>)
 8005fb6:	4293      	cmp	r3, r2
 8005fb8:	d004      	beq.n	8005fc4 <HAL_DMA_Init+0xb8>
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	4a50      	ldr	r2, [pc, #320]	@ (8006100 <HAL_DMA_Init+0x1f4>)
 8005fc0:	4293      	cmp	r3, r2
 8005fc2:	d101      	bne.n	8005fc8 <HAL_DMA_Init+0xbc>
 8005fc4:	2301      	movs	r3, #1
 8005fc6:	e000      	b.n	8005fca <HAL_DMA_Init+0xbe>
 8005fc8:	2300      	movs	r3, #0
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	f000 813b 	beq.w	8006246 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	2202      	movs	r2, #2
 8005fd4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	2200      	movs	r2, #0
 8005fdc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	4a37      	ldr	r2, [pc, #220]	@ (80060c4 <HAL_DMA_Init+0x1b8>)
 8005fe6:	4293      	cmp	r3, r2
 8005fe8:	d04a      	beq.n	8006080 <HAL_DMA_Init+0x174>
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	4a36      	ldr	r2, [pc, #216]	@ (80060c8 <HAL_DMA_Init+0x1bc>)
 8005ff0:	4293      	cmp	r3, r2
 8005ff2:	d045      	beq.n	8006080 <HAL_DMA_Init+0x174>
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	4a34      	ldr	r2, [pc, #208]	@ (80060cc <HAL_DMA_Init+0x1c0>)
 8005ffa:	4293      	cmp	r3, r2
 8005ffc:	d040      	beq.n	8006080 <HAL_DMA_Init+0x174>
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	4a33      	ldr	r2, [pc, #204]	@ (80060d0 <HAL_DMA_Init+0x1c4>)
 8006004:	4293      	cmp	r3, r2
 8006006:	d03b      	beq.n	8006080 <HAL_DMA_Init+0x174>
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	4a31      	ldr	r2, [pc, #196]	@ (80060d4 <HAL_DMA_Init+0x1c8>)
 800600e:	4293      	cmp	r3, r2
 8006010:	d036      	beq.n	8006080 <HAL_DMA_Init+0x174>
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	4a30      	ldr	r2, [pc, #192]	@ (80060d8 <HAL_DMA_Init+0x1cc>)
 8006018:	4293      	cmp	r3, r2
 800601a:	d031      	beq.n	8006080 <HAL_DMA_Init+0x174>
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	4a2e      	ldr	r2, [pc, #184]	@ (80060dc <HAL_DMA_Init+0x1d0>)
 8006022:	4293      	cmp	r3, r2
 8006024:	d02c      	beq.n	8006080 <HAL_DMA_Init+0x174>
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	4a2d      	ldr	r2, [pc, #180]	@ (80060e0 <HAL_DMA_Init+0x1d4>)
 800602c:	4293      	cmp	r3, r2
 800602e:	d027      	beq.n	8006080 <HAL_DMA_Init+0x174>
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	4a2b      	ldr	r2, [pc, #172]	@ (80060e4 <HAL_DMA_Init+0x1d8>)
 8006036:	4293      	cmp	r3, r2
 8006038:	d022      	beq.n	8006080 <HAL_DMA_Init+0x174>
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	4a2a      	ldr	r2, [pc, #168]	@ (80060e8 <HAL_DMA_Init+0x1dc>)
 8006040:	4293      	cmp	r3, r2
 8006042:	d01d      	beq.n	8006080 <HAL_DMA_Init+0x174>
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	4a28      	ldr	r2, [pc, #160]	@ (80060ec <HAL_DMA_Init+0x1e0>)
 800604a:	4293      	cmp	r3, r2
 800604c:	d018      	beq.n	8006080 <HAL_DMA_Init+0x174>
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	4a27      	ldr	r2, [pc, #156]	@ (80060f0 <HAL_DMA_Init+0x1e4>)
 8006054:	4293      	cmp	r3, r2
 8006056:	d013      	beq.n	8006080 <HAL_DMA_Init+0x174>
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	4a25      	ldr	r2, [pc, #148]	@ (80060f4 <HAL_DMA_Init+0x1e8>)
 800605e:	4293      	cmp	r3, r2
 8006060:	d00e      	beq.n	8006080 <HAL_DMA_Init+0x174>
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	4a24      	ldr	r2, [pc, #144]	@ (80060f8 <HAL_DMA_Init+0x1ec>)
 8006068:	4293      	cmp	r3, r2
 800606a:	d009      	beq.n	8006080 <HAL_DMA_Init+0x174>
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	4a22      	ldr	r2, [pc, #136]	@ (80060fc <HAL_DMA_Init+0x1f0>)
 8006072:	4293      	cmp	r3, r2
 8006074:	d004      	beq.n	8006080 <HAL_DMA_Init+0x174>
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	4a21      	ldr	r2, [pc, #132]	@ (8006100 <HAL_DMA_Init+0x1f4>)
 800607c:	4293      	cmp	r3, r2
 800607e:	d108      	bne.n	8006092 <HAL_DMA_Init+0x186>
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	681a      	ldr	r2, [r3, #0]
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	f022 0201 	bic.w	r2, r2, #1
 800608e:	601a      	str	r2, [r3, #0]
 8006090:	e007      	b.n	80060a2 <HAL_DMA_Init+0x196>
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	681a      	ldr	r2, [r3, #0]
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	f022 0201 	bic.w	r2, r2, #1
 80060a0:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80060a2:	e02f      	b.n	8006104 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80060a4:	f7ff fd54 	bl	8005b50 <HAL_GetTick>
 80060a8:	4602      	mov	r2, r0
 80060aa:	693b      	ldr	r3, [r7, #16]
 80060ac:	1ad3      	subs	r3, r2, r3
 80060ae:	2b05      	cmp	r3, #5
 80060b0:	d928      	bls.n	8006104 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	2220      	movs	r2, #32
 80060b6:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	2203      	movs	r2, #3
 80060bc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 80060c0:	2301      	movs	r3, #1
 80060c2:	e246      	b.n	8006552 <HAL_DMA_Init+0x646>
 80060c4:	40020010 	.word	0x40020010
 80060c8:	40020028 	.word	0x40020028
 80060cc:	40020040 	.word	0x40020040
 80060d0:	40020058 	.word	0x40020058
 80060d4:	40020070 	.word	0x40020070
 80060d8:	40020088 	.word	0x40020088
 80060dc:	400200a0 	.word	0x400200a0
 80060e0:	400200b8 	.word	0x400200b8
 80060e4:	40020410 	.word	0x40020410
 80060e8:	40020428 	.word	0x40020428
 80060ec:	40020440 	.word	0x40020440
 80060f0:	40020458 	.word	0x40020458
 80060f4:	40020470 	.word	0x40020470
 80060f8:	40020488 	.word	0x40020488
 80060fc:	400204a0 	.word	0x400204a0
 8006100:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	f003 0301 	and.w	r3, r3, #1
 800610e:	2b00      	cmp	r3, #0
 8006110:	d1c8      	bne.n	80060a4 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800611a:	697a      	ldr	r2, [r7, #20]
 800611c:	4b83      	ldr	r3, [pc, #524]	@ (800632c <HAL_DMA_Init+0x420>)
 800611e:	4013      	ands	r3, r2
 8006120:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800612a:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	691b      	ldr	r3, [r3, #16]
 8006130:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006136:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	699b      	ldr	r3, [r3, #24]
 800613c:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006142:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	6a1b      	ldr	r3, [r3, #32]
 8006148:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800614a:	697a      	ldr	r2, [r7, #20]
 800614c:	4313      	orrs	r3, r2
 800614e:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006154:	2b04      	cmp	r3, #4
 8006156:	d107      	bne.n	8006168 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006160:	4313      	orrs	r3, r2
 8006162:	697a      	ldr	r2, [r7, #20]
 8006164:	4313      	orrs	r3, r2
 8006166:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8006168:	4b71      	ldr	r3, [pc, #452]	@ (8006330 <HAL_DMA_Init+0x424>)
 800616a:	681a      	ldr	r2, [r3, #0]
 800616c:	4b71      	ldr	r3, [pc, #452]	@ (8006334 <HAL_DMA_Init+0x428>)
 800616e:	4013      	ands	r3, r2
 8006170:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006174:	d328      	bcc.n	80061c8 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	685b      	ldr	r3, [r3, #4]
 800617a:	2b28      	cmp	r3, #40	@ 0x28
 800617c:	d903      	bls.n	8006186 <HAL_DMA_Init+0x27a>
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	685b      	ldr	r3, [r3, #4]
 8006182:	2b2e      	cmp	r3, #46	@ 0x2e
 8006184:	d917      	bls.n	80061b6 <HAL_DMA_Init+0x2aa>
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	685b      	ldr	r3, [r3, #4]
 800618a:	2b3e      	cmp	r3, #62	@ 0x3e
 800618c:	d903      	bls.n	8006196 <HAL_DMA_Init+0x28a>
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	685b      	ldr	r3, [r3, #4]
 8006192:	2b42      	cmp	r3, #66	@ 0x42
 8006194:	d90f      	bls.n	80061b6 <HAL_DMA_Init+0x2aa>
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	685b      	ldr	r3, [r3, #4]
 800619a:	2b46      	cmp	r3, #70	@ 0x46
 800619c:	d903      	bls.n	80061a6 <HAL_DMA_Init+0x29a>
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	685b      	ldr	r3, [r3, #4]
 80061a2:	2b48      	cmp	r3, #72	@ 0x48
 80061a4:	d907      	bls.n	80061b6 <HAL_DMA_Init+0x2aa>
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	685b      	ldr	r3, [r3, #4]
 80061aa:	2b4e      	cmp	r3, #78	@ 0x4e
 80061ac:	d905      	bls.n	80061ba <HAL_DMA_Init+0x2ae>
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	685b      	ldr	r3, [r3, #4]
 80061b2:	2b52      	cmp	r3, #82	@ 0x52
 80061b4:	d801      	bhi.n	80061ba <HAL_DMA_Init+0x2ae>
 80061b6:	2301      	movs	r3, #1
 80061b8:	e000      	b.n	80061bc <HAL_DMA_Init+0x2b0>
 80061ba:	2300      	movs	r3, #0
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d003      	beq.n	80061c8 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80061c0:	697b      	ldr	r3, [r7, #20]
 80061c2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80061c6:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	697a      	ldr	r2, [r7, #20]
 80061ce:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	695b      	ldr	r3, [r3, #20]
 80061d6:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80061d8:	697b      	ldr	r3, [r7, #20]
 80061da:	f023 0307 	bic.w	r3, r3, #7
 80061de:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061e4:	697a      	ldr	r2, [r7, #20]
 80061e6:	4313      	orrs	r3, r2
 80061e8:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061ee:	2b04      	cmp	r3, #4
 80061f0:	d117      	bne.n	8006222 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061f6:	697a      	ldr	r2, [r7, #20]
 80061f8:	4313      	orrs	r3, r2
 80061fa:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006200:	2b00      	cmp	r3, #0
 8006202:	d00e      	beq.n	8006222 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8006204:	6878      	ldr	r0, [r7, #4]
 8006206:	f002 f8f9 	bl	80083fc <DMA_CheckFifoParam>
 800620a:	4603      	mov	r3, r0
 800620c:	2b00      	cmp	r3, #0
 800620e:	d008      	beq.n	8006222 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	2240      	movs	r2, #64	@ 0x40
 8006214:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	2201      	movs	r2, #1
 800621a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 800621e:	2301      	movs	r3, #1
 8006220:	e197      	b.n	8006552 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	697a      	ldr	r2, [r7, #20]
 8006228:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800622a:	6878      	ldr	r0, [r7, #4]
 800622c:	f002 f834 	bl	8008298 <DMA_CalcBaseAndBitshift>
 8006230:	4603      	mov	r3, r0
 8006232:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006238:	f003 031f 	and.w	r3, r3, #31
 800623c:	223f      	movs	r2, #63	@ 0x3f
 800623e:	409a      	lsls	r2, r3
 8006240:	68bb      	ldr	r3, [r7, #8]
 8006242:	609a      	str	r2, [r3, #8]
 8006244:	e0cd      	b.n	80063e2 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	4a3b      	ldr	r2, [pc, #236]	@ (8006338 <HAL_DMA_Init+0x42c>)
 800624c:	4293      	cmp	r3, r2
 800624e:	d022      	beq.n	8006296 <HAL_DMA_Init+0x38a>
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	4a39      	ldr	r2, [pc, #228]	@ (800633c <HAL_DMA_Init+0x430>)
 8006256:	4293      	cmp	r3, r2
 8006258:	d01d      	beq.n	8006296 <HAL_DMA_Init+0x38a>
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	4a38      	ldr	r2, [pc, #224]	@ (8006340 <HAL_DMA_Init+0x434>)
 8006260:	4293      	cmp	r3, r2
 8006262:	d018      	beq.n	8006296 <HAL_DMA_Init+0x38a>
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	4a36      	ldr	r2, [pc, #216]	@ (8006344 <HAL_DMA_Init+0x438>)
 800626a:	4293      	cmp	r3, r2
 800626c:	d013      	beq.n	8006296 <HAL_DMA_Init+0x38a>
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	4a35      	ldr	r2, [pc, #212]	@ (8006348 <HAL_DMA_Init+0x43c>)
 8006274:	4293      	cmp	r3, r2
 8006276:	d00e      	beq.n	8006296 <HAL_DMA_Init+0x38a>
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	4a33      	ldr	r2, [pc, #204]	@ (800634c <HAL_DMA_Init+0x440>)
 800627e:	4293      	cmp	r3, r2
 8006280:	d009      	beq.n	8006296 <HAL_DMA_Init+0x38a>
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	4a32      	ldr	r2, [pc, #200]	@ (8006350 <HAL_DMA_Init+0x444>)
 8006288:	4293      	cmp	r3, r2
 800628a:	d004      	beq.n	8006296 <HAL_DMA_Init+0x38a>
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	4a30      	ldr	r2, [pc, #192]	@ (8006354 <HAL_DMA_Init+0x448>)
 8006292:	4293      	cmp	r3, r2
 8006294:	d101      	bne.n	800629a <HAL_DMA_Init+0x38e>
 8006296:	2301      	movs	r3, #1
 8006298:	e000      	b.n	800629c <HAL_DMA_Init+0x390>
 800629a:	2300      	movs	r3, #0
 800629c:	2b00      	cmp	r3, #0
 800629e:	f000 8097 	beq.w	80063d0 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	4a24      	ldr	r2, [pc, #144]	@ (8006338 <HAL_DMA_Init+0x42c>)
 80062a8:	4293      	cmp	r3, r2
 80062aa:	d021      	beq.n	80062f0 <HAL_DMA_Init+0x3e4>
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	4a22      	ldr	r2, [pc, #136]	@ (800633c <HAL_DMA_Init+0x430>)
 80062b2:	4293      	cmp	r3, r2
 80062b4:	d01c      	beq.n	80062f0 <HAL_DMA_Init+0x3e4>
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	4a21      	ldr	r2, [pc, #132]	@ (8006340 <HAL_DMA_Init+0x434>)
 80062bc:	4293      	cmp	r3, r2
 80062be:	d017      	beq.n	80062f0 <HAL_DMA_Init+0x3e4>
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	4a1f      	ldr	r2, [pc, #124]	@ (8006344 <HAL_DMA_Init+0x438>)
 80062c6:	4293      	cmp	r3, r2
 80062c8:	d012      	beq.n	80062f0 <HAL_DMA_Init+0x3e4>
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	4a1e      	ldr	r2, [pc, #120]	@ (8006348 <HAL_DMA_Init+0x43c>)
 80062d0:	4293      	cmp	r3, r2
 80062d2:	d00d      	beq.n	80062f0 <HAL_DMA_Init+0x3e4>
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	4a1c      	ldr	r2, [pc, #112]	@ (800634c <HAL_DMA_Init+0x440>)
 80062da:	4293      	cmp	r3, r2
 80062dc:	d008      	beq.n	80062f0 <HAL_DMA_Init+0x3e4>
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	4a1b      	ldr	r2, [pc, #108]	@ (8006350 <HAL_DMA_Init+0x444>)
 80062e4:	4293      	cmp	r3, r2
 80062e6:	d003      	beq.n	80062f0 <HAL_DMA_Init+0x3e4>
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	4a19      	ldr	r2, [pc, #100]	@ (8006354 <HAL_DMA_Init+0x448>)
 80062ee:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	2202      	movs	r2, #2
 80062f4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	2200      	movs	r2, #0
 80062fc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8006308:	697a      	ldr	r2, [r7, #20]
 800630a:	4b13      	ldr	r3, [pc, #76]	@ (8006358 <HAL_DMA_Init+0x44c>)
 800630c:	4013      	ands	r3, r2
 800630e:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	689b      	ldr	r3, [r3, #8]
 8006314:	2b40      	cmp	r3, #64	@ 0x40
 8006316:	d021      	beq.n	800635c <HAL_DMA_Init+0x450>
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	689b      	ldr	r3, [r3, #8]
 800631c:	2b80      	cmp	r3, #128	@ 0x80
 800631e:	d102      	bne.n	8006326 <HAL_DMA_Init+0x41a>
 8006320:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8006324:	e01b      	b.n	800635e <HAL_DMA_Init+0x452>
 8006326:	2300      	movs	r3, #0
 8006328:	e019      	b.n	800635e <HAL_DMA_Init+0x452>
 800632a:	bf00      	nop
 800632c:	fe10803f 	.word	0xfe10803f
 8006330:	5c001000 	.word	0x5c001000
 8006334:	ffff0000 	.word	0xffff0000
 8006338:	58025408 	.word	0x58025408
 800633c:	5802541c 	.word	0x5802541c
 8006340:	58025430 	.word	0x58025430
 8006344:	58025444 	.word	0x58025444
 8006348:	58025458 	.word	0x58025458
 800634c:	5802546c 	.word	0x5802546c
 8006350:	58025480 	.word	0x58025480
 8006354:	58025494 	.word	0x58025494
 8006358:	fffe000f 	.word	0xfffe000f
 800635c:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800635e:	687a      	ldr	r2, [r7, #4]
 8006360:	68d2      	ldr	r2, [r2, #12]
 8006362:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8006364:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	691b      	ldr	r3, [r3, #16]
 800636a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800636c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	695b      	ldr	r3, [r3, #20]
 8006372:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8006374:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	699b      	ldr	r3, [r3, #24]
 800637a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800637c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	69db      	ldr	r3, [r3, #28]
 8006382:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8006384:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	6a1b      	ldr	r3, [r3, #32]
 800638a:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800638c:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800638e:	697a      	ldr	r2, [r7, #20]
 8006390:	4313      	orrs	r3, r2
 8006392:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	697a      	ldr	r2, [r7, #20]
 800639a:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	461a      	mov	r2, r3
 80063a2:	4b6e      	ldr	r3, [pc, #440]	@ (800655c <HAL_DMA_Init+0x650>)
 80063a4:	4413      	add	r3, r2
 80063a6:	4a6e      	ldr	r2, [pc, #440]	@ (8006560 <HAL_DMA_Init+0x654>)
 80063a8:	fba2 2303 	umull	r2, r3, r2, r3
 80063ac:	091b      	lsrs	r3, r3, #4
 80063ae:	009a      	lsls	r2, r3, #2
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80063b4:	6878      	ldr	r0, [r7, #4]
 80063b6:	f001 ff6f 	bl	8008298 <DMA_CalcBaseAndBitshift>
 80063ba:	4603      	mov	r3, r0
 80063bc:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80063c2:	f003 031f 	and.w	r3, r3, #31
 80063c6:	2201      	movs	r2, #1
 80063c8:	409a      	lsls	r2, r3
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	605a      	str	r2, [r3, #4]
 80063ce:	e008      	b.n	80063e2 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	2240      	movs	r2, #64	@ 0x40
 80063d4:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	2203      	movs	r2, #3
 80063da:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 80063de:	2301      	movs	r3, #1
 80063e0:	e0b7      	b.n	8006552 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	4a5f      	ldr	r2, [pc, #380]	@ (8006564 <HAL_DMA_Init+0x658>)
 80063e8:	4293      	cmp	r3, r2
 80063ea:	d072      	beq.n	80064d2 <HAL_DMA_Init+0x5c6>
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	4a5d      	ldr	r2, [pc, #372]	@ (8006568 <HAL_DMA_Init+0x65c>)
 80063f2:	4293      	cmp	r3, r2
 80063f4:	d06d      	beq.n	80064d2 <HAL_DMA_Init+0x5c6>
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	4a5c      	ldr	r2, [pc, #368]	@ (800656c <HAL_DMA_Init+0x660>)
 80063fc:	4293      	cmp	r3, r2
 80063fe:	d068      	beq.n	80064d2 <HAL_DMA_Init+0x5c6>
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	4a5a      	ldr	r2, [pc, #360]	@ (8006570 <HAL_DMA_Init+0x664>)
 8006406:	4293      	cmp	r3, r2
 8006408:	d063      	beq.n	80064d2 <HAL_DMA_Init+0x5c6>
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	4a59      	ldr	r2, [pc, #356]	@ (8006574 <HAL_DMA_Init+0x668>)
 8006410:	4293      	cmp	r3, r2
 8006412:	d05e      	beq.n	80064d2 <HAL_DMA_Init+0x5c6>
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	4a57      	ldr	r2, [pc, #348]	@ (8006578 <HAL_DMA_Init+0x66c>)
 800641a:	4293      	cmp	r3, r2
 800641c:	d059      	beq.n	80064d2 <HAL_DMA_Init+0x5c6>
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	4a56      	ldr	r2, [pc, #344]	@ (800657c <HAL_DMA_Init+0x670>)
 8006424:	4293      	cmp	r3, r2
 8006426:	d054      	beq.n	80064d2 <HAL_DMA_Init+0x5c6>
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	4a54      	ldr	r2, [pc, #336]	@ (8006580 <HAL_DMA_Init+0x674>)
 800642e:	4293      	cmp	r3, r2
 8006430:	d04f      	beq.n	80064d2 <HAL_DMA_Init+0x5c6>
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	4a53      	ldr	r2, [pc, #332]	@ (8006584 <HAL_DMA_Init+0x678>)
 8006438:	4293      	cmp	r3, r2
 800643a:	d04a      	beq.n	80064d2 <HAL_DMA_Init+0x5c6>
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	4a51      	ldr	r2, [pc, #324]	@ (8006588 <HAL_DMA_Init+0x67c>)
 8006442:	4293      	cmp	r3, r2
 8006444:	d045      	beq.n	80064d2 <HAL_DMA_Init+0x5c6>
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	4a50      	ldr	r2, [pc, #320]	@ (800658c <HAL_DMA_Init+0x680>)
 800644c:	4293      	cmp	r3, r2
 800644e:	d040      	beq.n	80064d2 <HAL_DMA_Init+0x5c6>
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	4a4e      	ldr	r2, [pc, #312]	@ (8006590 <HAL_DMA_Init+0x684>)
 8006456:	4293      	cmp	r3, r2
 8006458:	d03b      	beq.n	80064d2 <HAL_DMA_Init+0x5c6>
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	4a4d      	ldr	r2, [pc, #308]	@ (8006594 <HAL_DMA_Init+0x688>)
 8006460:	4293      	cmp	r3, r2
 8006462:	d036      	beq.n	80064d2 <HAL_DMA_Init+0x5c6>
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	4a4b      	ldr	r2, [pc, #300]	@ (8006598 <HAL_DMA_Init+0x68c>)
 800646a:	4293      	cmp	r3, r2
 800646c:	d031      	beq.n	80064d2 <HAL_DMA_Init+0x5c6>
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	4a4a      	ldr	r2, [pc, #296]	@ (800659c <HAL_DMA_Init+0x690>)
 8006474:	4293      	cmp	r3, r2
 8006476:	d02c      	beq.n	80064d2 <HAL_DMA_Init+0x5c6>
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	4a48      	ldr	r2, [pc, #288]	@ (80065a0 <HAL_DMA_Init+0x694>)
 800647e:	4293      	cmp	r3, r2
 8006480:	d027      	beq.n	80064d2 <HAL_DMA_Init+0x5c6>
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	4a47      	ldr	r2, [pc, #284]	@ (80065a4 <HAL_DMA_Init+0x698>)
 8006488:	4293      	cmp	r3, r2
 800648a:	d022      	beq.n	80064d2 <HAL_DMA_Init+0x5c6>
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	4a45      	ldr	r2, [pc, #276]	@ (80065a8 <HAL_DMA_Init+0x69c>)
 8006492:	4293      	cmp	r3, r2
 8006494:	d01d      	beq.n	80064d2 <HAL_DMA_Init+0x5c6>
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	4a44      	ldr	r2, [pc, #272]	@ (80065ac <HAL_DMA_Init+0x6a0>)
 800649c:	4293      	cmp	r3, r2
 800649e:	d018      	beq.n	80064d2 <HAL_DMA_Init+0x5c6>
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	4a42      	ldr	r2, [pc, #264]	@ (80065b0 <HAL_DMA_Init+0x6a4>)
 80064a6:	4293      	cmp	r3, r2
 80064a8:	d013      	beq.n	80064d2 <HAL_DMA_Init+0x5c6>
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	4a41      	ldr	r2, [pc, #260]	@ (80065b4 <HAL_DMA_Init+0x6a8>)
 80064b0:	4293      	cmp	r3, r2
 80064b2:	d00e      	beq.n	80064d2 <HAL_DMA_Init+0x5c6>
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	4a3f      	ldr	r2, [pc, #252]	@ (80065b8 <HAL_DMA_Init+0x6ac>)
 80064ba:	4293      	cmp	r3, r2
 80064bc:	d009      	beq.n	80064d2 <HAL_DMA_Init+0x5c6>
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	4a3e      	ldr	r2, [pc, #248]	@ (80065bc <HAL_DMA_Init+0x6b0>)
 80064c4:	4293      	cmp	r3, r2
 80064c6:	d004      	beq.n	80064d2 <HAL_DMA_Init+0x5c6>
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	4a3c      	ldr	r2, [pc, #240]	@ (80065c0 <HAL_DMA_Init+0x6b4>)
 80064ce:	4293      	cmp	r3, r2
 80064d0:	d101      	bne.n	80064d6 <HAL_DMA_Init+0x5ca>
 80064d2:	2301      	movs	r3, #1
 80064d4:	e000      	b.n	80064d8 <HAL_DMA_Init+0x5cc>
 80064d6:	2300      	movs	r3, #0
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d032      	beq.n	8006542 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80064dc:	6878      	ldr	r0, [r7, #4]
 80064de:	f002 f809 	bl	80084f4 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	689b      	ldr	r3, [r3, #8]
 80064e6:	2b80      	cmp	r3, #128	@ 0x80
 80064e8:	d102      	bne.n	80064f0 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	2200      	movs	r2, #0
 80064ee:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	685a      	ldr	r2, [r3, #4]
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80064f8:	b2d2      	uxtb	r2, r2
 80064fa:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006500:	687a      	ldr	r2, [r7, #4]
 8006502:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8006504:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	685b      	ldr	r3, [r3, #4]
 800650a:	2b00      	cmp	r3, #0
 800650c:	d010      	beq.n	8006530 <HAL_DMA_Init+0x624>
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	685b      	ldr	r3, [r3, #4]
 8006512:	2b08      	cmp	r3, #8
 8006514:	d80c      	bhi.n	8006530 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8006516:	6878      	ldr	r0, [r7, #4]
 8006518:	f002 f886 	bl	8008628 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006520:	2200      	movs	r2, #0
 8006522:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006528:	687a      	ldr	r2, [r7, #4]
 800652a:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800652c:	605a      	str	r2, [r3, #4]
 800652e:	e008      	b.n	8006542 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	2200      	movs	r2, #0
 8006534:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	2200      	movs	r2, #0
 800653a:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	2200      	movs	r2, #0
 8006540:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	2200      	movs	r2, #0
 8006546:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	2201      	movs	r2, #1
 800654c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8006550:	2300      	movs	r3, #0
}
 8006552:	4618      	mov	r0, r3
 8006554:	3718      	adds	r7, #24
 8006556:	46bd      	mov	sp, r7
 8006558:	bd80      	pop	{r7, pc}
 800655a:	bf00      	nop
 800655c:	a7fdabf8 	.word	0xa7fdabf8
 8006560:	cccccccd 	.word	0xcccccccd
 8006564:	40020010 	.word	0x40020010
 8006568:	40020028 	.word	0x40020028
 800656c:	40020040 	.word	0x40020040
 8006570:	40020058 	.word	0x40020058
 8006574:	40020070 	.word	0x40020070
 8006578:	40020088 	.word	0x40020088
 800657c:	400200a0 	.word	0x400200a0
 8006580:	400200b8 	.word	0x400200b8
 8006584:	40020410 	.word	0x40020410
 8006588:	40020428 	.word	0x40020428
 800658c:	40020440 	.word	0x40020440
 8006590:	40020458 	.word	0x40020458
 8006594:	40020470 	.word	0x40020470
 8006598:	40020488 	.word	0x40020488
 800659c:	400204a0 	.word	0x400204a0
 80065a0:	400204b8 	.word	0x400204b8
 80065a4:	58025408 	.word	0x58025408
 80065a8:	5802541c 	.word	0x5802541c
 80065ac:	58025430 	.word	0x58025430
 80065b0:	58025444 	.word	0x58025444
 80065b4:	58025458 	.word	0x58025458
 80065b8:	5802546c 	.word	0x5802546c
 80065bc:	58025480 	.word	0x58025480
 80065c0:	58025494 	.word	0x58025494

080065c4 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80065c4:	b580      	push	{r7, lr}
 80065c6:	b086      	sub	sp, #24
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	60f8      	str	r0, [r7, #12]
 80065cc:	60b9      	str	r1, [r7, #8]
 80065ce:	607a      	str	r2, [r7, #4]
 80065d0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80065d2:	2300      	movs	r3, #0
 80065d4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d101      	bne.n	80065e0 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 80065dc:	2301      	movs	r3, #1
 80065de:	e226      	b.n	8006a2e <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80065e6:	2b01      	cmp	r3, #1
 80065e8:	d101      	bne.n	80065ee <HAL_DMA_Start_IT+0x2a>
 80065ea:	2302      	movs	r3, #2
 80065ec:	e21f      	b.n	8006a2e <HAL_DMA_Start_IT+0x46a>
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	2201      	movs	r2, #1
 80065f2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80065fc:	b2db      	uxtb	r3, r3
 80065fe:	2b01      	cmp	r3, #1
 8006600:	f040 820a 	bne.w	8006a18 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	2202      	movs	r2, #2
 8006608:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	2200      	movs	r2, #0
 8006610:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	4a68      	ldr	r2, [pc, #416]	@ (80067b8 <HAL_DMA_Start_IT+0x1f4>)
 8006618:	4293      	cmp	r3, r2
 800661a:	d04a      	beq.n	80066b2 <HAL_DMA_Start_IT+0xee>
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	4a66      	ldr	r2, [pc, #408]	@ (80067bc <HAL_DMA_Start_IT+0x1f8>)
 8006622:	4293      	cmp	r3, r2
 8006624:	d045      	beq.n	80066b2 <HAL_DMA_Start_IT+0xee>
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	4a65      	ldr	r2, [pc, #404]	@ (80067c0 <HAL_DMA_Start_IT+0x1fc>)
 800662c:	4293      	cmp	r3, r2
 800662e:	d040      	beq.n	80066b2 <HAL_DMA_Start_IT+0xee>
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	4a63      	ldr	r2, [pc, #396]	@ (80067c4 <HAL_DMA_Start_IT+0x200>)
 8006636:	4293      	cmp	r3, r2
 8006638:	d03b      	beq.n	80066b2 <HAL_DMA_Start_IT+0xee>
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	4a62      	ldr	r2, [pc, #392]	@ (80067c8 <HAL_DMA_Start_IT+0x204>)
 8006640:	4293      	cmp	r3, r2
 8006642:	d036      	beq.n	80066b2 <HAL_DMA_Start_IT+0xee>
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	4a60      	ldr	r2, [pc, #384]	@ (80067cc <HAL_DMA_Start_IT+0x208>)
 800664a:	4293      	cmp	r3, r2
 800664c:	d031      	beq.n	80066b2 <HAL_DMA_Start_IT+0xee>
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	4a5f      	ldr	r2, [pc, #380]	@ (80067d0 <HAL_DMA_Start_IT+0x20c>)
 8006654:	4293      	cmp	r3, r2
 8006656:	d02c      	beq.n	80066b2 <HAL_DMA_Start_IT+0xee>
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	4a5d      	ldr	r2, [pc, #372]	@ (80067d4 <HAL_DMA_Start_IT+0x210>)
 800665e:	4293      	cmp	r3, r2
 8006660:	d027      	beq.n	80066b2 <HAL_DMA_Start_IT+0xee>
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	4a5c      	ldr	r2, [pc, #368]	@ (80067d8 <HAL_DMA_Start_IT+0x214>)
 8006668:	4293      	cmp	r3, r2
 800666a:	d022      	beq.n	80066b2 <HAL_DMA_Start_IT+0xee>
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	4a5a      	ldr	r2, [pc, #360]	@ (80067dc <HAL_DMA_Start_IT+0x218>)
 8006672:	4293      	cmp	r3, r2
 8006674:	d01d      	beq.n	80066b2 <HAL_DMA_Start_IT+0xee>
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	4a59      	ldr	r2, [pc, #356]	@ (80067e0 <HAL_DMA_Start_IT+0x21c>)
 800667c:	4293      	cmp	r3, r2
 800667e:	d018      	beq.n	80066b2 <HAL_DMA_Start_IT+0xee>
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	4a57      	ldr	r2, [pc, #348]	@ (80067e4 <HAL_DMA_Start_IT+0x220>)
 8006686:	4293      	cmp	r3, r2
 8006688:	d013      	beq.n	80066b2 <HAL_DMA_Start_IT+0xee>
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	4a56      	ldr	r2, [pc, #344]	@ (80067e8 <HAL_DMA_Start_IT+0x224>)
 8006690:	4293      	cmp	r3, r2
 8006692:	d00e      	beq.n	80066b2 <HAL_DMA_Start_IT+0xee>
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	4a54      	ldr	r2, [pc, #336]	@ (80067ec <HAL_DMA_Start_IT+0x228>)
 800669a:	4293      	cmp	r3, r2
 800669c:	d009      	beq.n	80066b2 <HAL_DMA_Start_IT+0xee>
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	4a53      	ldr	r2, [pc, #332]	@ (80067f0 <HAL_DMA_Start_IT+0x22c>)
 80066a4:	4293      	cmp	r3, r2
 80066a6:	d004      	beq.n	80066b2 <HAL_DMA_Start_IT+0xee>
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	4a51      	ldr	r2, [pc, #324]	@ (80067f4 <HAL_DMA_Start_IT+0x230>)
 80066ae:	4293      	cmp	r3, r2
 80066b0:	d108      	bne.n	80066c4 <HAL_DMA_Start_IT+0x100>
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	681a      	ldr	r2, [r3, #0]
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	f022 0201 	bic.w	r2, r2, #1
 80066c0:	601a      	str	r2, [r3, #0]
 80066c2:	e007      	b.n	80066d4 <HAL_DMA_Start_IT+0x110>
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	681a      	ldr	r2, [r3, #0]
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	f022 0201 	bic.w	r2, r2, #1
 80066d2:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80066d4:	683b      	ldr	r3, [r7, #0]
 80066d6:	687a      	ldr	r2, [r7, #4]
 80066d8:	68b9      	ldr	r1, [r7, #8]
 80066da:	68f8      	ldr	r0, [r7, #12]
 80066dc:	f001 fc30 	bl	8007f40 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	4a34      	ldr	r2, [pc, #208]	@ (80067b8 <HAL_DMA_Start_IT+0x1f4>)
 80066e6:	4293      	cmp	r3, r2
 80066e8:	d04a      	beq.n	8006780 <HAL_DMA_Start_IT+0x1bc>
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	4a33      	ldr	r2, [pc, #204]	@ (80067bc <HAL_DMA_Start_IT+0x1f8>)
 80066f0:	4293      	cmp	r3, r2
 80066f2:	d045      	beq.n	8006780 <HAL_DMA_Start_IT+0x1bc>
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	4a31      	ldr	r2, [pc, #196]	@ (80067c0 <HAL_DMA_Start_IT+0x1fc>)
 80066fa:	4293      	cmp	r3, r2
 80066fc:	d040      	beq.n	8006780 <HAL_DMA_Start_IT+0x1bc>
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	4a30      	ldr	r2, [pc, #192]	@ (80067c4 <HAL_DMA_Start_IT+0x200>)
 8006704:	4293      	cmp	r3, r2
 8006706:	d03b      	beq.n	8006780 <HAL_DMA_Start_IT+0x1bc>
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	4a2e      	ldr	r2, [pc, #184]	@ (80067c8 <HAL_DMA_Start_IT+0x204>)
 800670e:	4293      	cmp	r3, r2
 8006710:	d036      	beq.n	8006780 <HAL_DMA_Start_IT+0x1bc>
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	4a2d      	ldr	r2, [pc, #180]	@ (80067cc <HAL_DMA_Start_IT+0x208>)
 8006718:	4293      	cmp	r3, r2
 800671a:	d031      	beq.n	8006780 <HAL_DMA_Start_IT+0x1bc>
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	4a2b      	ldr	r2, [pc, #172]	@ (80067d0 <HAL_DMA_Start_IT+0x20c>)
 8006722:	4293      	cmp	r3, r2
 8006724:	d02c      	beq.n	8006780 <HAL_DMA_Start_IT+0x1bc>
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	4a2a      	ldr	r2, [pc, #168]	@ (80067d4 <HAL_DMA_Start_IT+0x210>)
 800672c:	4293      	cmp	r3, r2
 800672e:	d027      	beq.n	8006780 <HAL_DMA_Start_IT+0x1bc>
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	4a28      	ldr	r2, [pc, #160]	@ (80067d8 <HAL_DMA_Start_IT+0x214>)
 8006736:	4293      	cmp	r3, r2
 8006738:	d022      	beq.n	8006780 <HAL_DMA_Start_IT+0x1bc>
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	4a27      	ldr	r2, [pc, #156]	@ (80067dc <HAL_DMA_Start_IT+0x218>)
 8006740:	4293      	cmp	r3, r2
 8006742:	d01d      	beq.n	8006780 <HAL_DMA_Start_IT+0x1bc>
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	4a25      	ldr	r2, [pc, #148]	@ (80067e0 <HAL_DMA_Start_IT+0x21c>)
 800674a:	4293      	cmp	r3, r2
 800674c:	d018      	beq.n	8006780 <HAL_DMA_Start_IT+0x1bc>
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	4a24      	ldr	r2, [pc, #144]	@ (80067e4 <HAL_DMA_Start_IT+0x220>)
 8006754:	4293      	cmp	r3, r2
 8006756:	d013      	beq.n	8006780 <HAL_DMA_Start_IT+0x1bc>
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	4a22      	ldr	r2, [pc, #136]	@ (80067e8 <HAL_DMA_Start_IT+0x224>)
 800675e:	4293      	cmp	r3, r2
 8006760:	d00e      	beq.n	8006780 <HAL_DMA_Start_IT+0x1bc>
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	4a21      	ldr	r2, [pc, #132]	@ (80067ec <HAL_DMA_Start_IT+0x228>)
 8006768:	4293      	cmp	r3, r2
 800676a:	d009      	beq.n	8006780 <HAL_DMA_Start_IT+0x1bc>
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	4a1f      	ldr	r2, [pc, #124]	@ (80067f0 <HAL_DMA_Start_IT+0x22c>)
 8006772:	4293      	cmp	r3, r2
 8006774:	d004      	beq.n	8006780 <HAL_DMA_Start_IT+0x1bc>
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	4a1e      	ldr	r2, [pc, #120]	@ (80067f4 <HAL_DMA_Start_IT+0x230>)
 800677c:	4293      	cmp	r3, r2
 800677e:	d101      	bne.n	8006784 <HAL_DMA_Start_IT+0x1c0>
 8006780:	2301      	movs	r3, #1
 8006782:	e000      	b.n	8006786 <HAL_DMA_Start_IT+0x1c2>
 8006784:	2300      	movs	r3, #0
 8006786:	2b00      	cmp	r3, #0
 8006788:	d036      	beq.n	80067f8 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	f023 021e 	bic.w	r2, r3, #30
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	f042 0216 	orr.w	r2, r2, #22
 800679c:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d03e      	beq.n	8006824 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	681a      	ldr	r2, [r3, #0]
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	f042 0208 	orr.w	r2, r2, #8
 80067b4:	601a      	str	r2, [r3, #0]
 80067b6:	e035      	b.n	8006824 <HAL_DMA_Start_IT+0x260>
 80067b8:	40020010 	.word	0x40020010
 80067bc:	40020028 	.word	0x40020028
 80067c0:	40020040 	.word	0x40020040
 80067c4:	40020058 	.word	0x40020058
 80067c8:	40020070 	.word	0x40020070
 80067cc:	40020088 	.word	0x40020088
 80067d0:	400200a0 	.word	0x400200a0
 80067d4:	400200b8 	.word	0x400200b8
 80067d8:	40020410 	.word	0x40020410
 80067dc:	40020428 	.word	0x40020428
 80067e0:	40020440 	.word	0x40020440
 80067e4:	40020458 	.word	0x40020458
 80067e8:	40020470 	.word	0x40020470
 80067ec:	40020488 	.word	0x40020488
 80067f0:	400204a0 	.word	0x400204a0
 80067f4:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	f023 020e 	bic.w	r2, r3, #14
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	f042 020a 	orr.w	r2, r2, #10
 800680a:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006810:	2b00      	cmp	r3, #0
 8006812:	d007      	beq.n	8006824 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	681a      	ldr	r2, [r3, #0]
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	f042 0204 	orr.w	r2, r2, #4
 8006822:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	4a83      	ldr	r2, [pc, #524]	@ (8006a38 <HAL_DMA_Start_IT+0x474>)
 800682a:	4293      	cmp	r3, r2
 800682c:	d072      	beq.n	8006914 <HAL_DMA_Start_IT+0x350>
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	4a82      	ldr	r2, [pc, #520]	@ (8006a3c <HAL_DMA_Start_IT+0x478>)
 8006834:	4293      	cmp	r3, r2
 8006836:	d06d      	beq.n	8006914 <HAL_DMA_Start_IT+0x350>
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	4a80      	ldr	r2, [pc, #512]	@ (8006a40 <HAL_DMA_Start_IT+0x47c>)
 800683e:	4293      	cmp	r3, r2
 8006840:	d068      	beq.n	8006914 <HAL_DMA_Start_IT+0x350>
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	4a7f      	ldr	r2, [pc, #508]	@ (8006a44 <HAL_DMA_Start_IT+0x480>)
 8006848:	4293      	cmp	r3, r2
 800684a:	d063      	beq.n	8006914 <HAL_DMA_Start_IT+0x350>
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	4a7d      	ldr	r2, [pc, #500]	@ (8006a48 <HAL_DMA_Start_IT+0x484>)
 8006852:	4293      	cmp	r3, r2
 8006854:	d05e      	beq.n	8006914 <HAL_DMA_Start_IT+0x350>
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	4a7c      	ldr	r2, [pc, #496]	@ (8006a4c <HAL_DMA_Start_IT+0x488>)
 800685c:	4293      	cmp	r3, r2
 800685e:	d059      	beq.n	8006914 <HAL_DMA_Start_IT+0x350>
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	4a7a      	ldr	r2, [pc, #488]	@ (8006a50 <HAL_DMA_Start_IT+0x48c>)
 8006866:	4293      	cmp	r3, r2
 8006868:	d054      	beq.n	8006914 <HAL_DMA_Start_IT+0x350>
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	4a79      	ldr	r2, [pc, #484]	@ (8006a54 <HAL_DMA_Start_IT+0x490>)
 8006870:	4293      	cmp	r3, r2
 8006872:	d04f      	beq.n	8006914 <HAL_DMA_Start_IT+0x350>
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	4a77      	ldr	r2, [pc, #476]	@ (8006a58 <HAL_DMA_Start_IT+0x494>)
 800687a:	4293      	cmp	r3, r2
 800687c:	d04a      	beq.n	8006914 <HAL_DMA_Start_IT+0x350>
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	4a76      	ldr	r2, [pc, #472]	@ (8006a5c <HAL_DMA_Start_IT+0x498>)
 8006884:	4293      	cmp	r3, r2
 8006886:	d045      	beq.n	8006914 <HAL_DMA_Start_IT+0x350>
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	4a74      	ldr	r2, [pc, #464]	@ (8006a60 <HAL_DMA_Start_IT+0x49c>)
 800688e:	4293      	cmp	r3, r2
 8006890:	d040      	beq.n	8006914 <HAL_DMA_Start_IT+0x350>
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	4a73      	ldr	r2, [pc, #460]	@ (8006a64 <HAL_DMA_Start_IT+0x4a0>)
 8006898:	4293      	cmp	r3, r2
 800689a:	d03b      	beq.n	8006914 <HAL_DMA_Start_IT+0x350>
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	4a71      	ldr	r2, [pc, #452]	@ (8006a68 <HAL_DMA_Start_IT+0x4a4>)
 80068a2:	4293      	cmp	r3, r2
 80068a4:	d036      	beq.n	8006914 <HAL_DMA_Start_IT+0x350>
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	4a70      	ldr	r2, [pc, #448]	@ (8006a6c <HAL_DMA_Start_IT+0x4a8>)
 80068ac:	4293      	cmp	r3, r2
 80068ae:	d031      	beq.n	8006914 <HAL_DMA_Start_IT+0x350>
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	4a6e      	ldr	r2, [pc, #440]	@ (8006a70 <HAL_DMA_Start_IT+0x4ac>)
 80068b6:	4293      	cmp	r3, r2
 80068b8:	d02c      	beq.n	8006914 <HAL_DMA_Start_IT+0x350>
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	4a6d      	ldr	r2, [pc, #436]	@ (8006a74 <HAL_DMA_Start_IT+0x4b0>)
 80068c0:	4293      	cmp	r3, r2
 80068c2:	d027      	beq.n	8006914 <HAL_DMA_Start_IT+0x350>
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	4a6b      	ldr	r2, [pc, #428]	@ (8006a78 <HAL_DMA_Start_IT+0x4b4>)
 80068ca:	4293      	cmp	r3, r2
 80068cc:	d022      	beq.n	8006914 <HAL_DMA_Start_IT+0x350>
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	4a6a      	ldr	r2, [pc, #424]	@ (8006a7c <HAL_DMA_Start_IT+0x4b8>)
 80068d4:	4293      	cmp	r3, r2
 80068d6:	d01d      	beq.n	8006914 <HAL_DMA_Start_IT+0x350>
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	4a68      	ldr	r2, [pc, #416]	@ (8006a80 <HAL_DMA_Start_IT+0x4bc>)
 80068de:	4293      	cmp	r3, r2
 80068e0:	d018      	beq.n	8006914 <HAL_DMA_Start_IT+0x350>
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	4a67      	ldr	r2, [pc, #412]	@ (8006a84 <HAL_DMA_Start_IT+0x4c0>)
 80068e8:	4293      	cmp	r3, r2
 80068ea:	d013      	beq.n	8006914 <HAL_DMA_Start_IT+0x350>
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	4a65      	ldr	r2, [pc, #404]	@ (8006a88 <HAL_DMA_Start_IT+0x4c4>)
 80068f2:	4293      	cmp	r3, r2
 80068f4:	d00e      	beq.n	8006914 <HAL_DMA_Start_IT+0x350>
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	4a64      	ldr	r2, [pc, #400]	@ (8006a8c <HAL_DMA_Start_IT+0x4c8>)
 80068fc:	4293      	cmp	r3, r2
 80068fe:	d009      	beq.n	8006914 <HAL_DMA_Start_IT+0x350>
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	4a62      	ldr	r2, [pc, #392]	@ (8006a90 <HAL_DMA_Start_IT+0x4cc>)
 8006906:	4293      	cmp	r3, r2
 8006908:	d004      	beq.n	8006914 <HAL_DMA_Start_IT+0x350>
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	4a61      	ldr	r2, [pc, #388]	@ (8006a94 <HAL_DMA_Start_IT+0x4d0>)
 8006910:	4293      	cmp	r3, r2
 8006912:	d101      	bne.n	8006918 <HAL_DMA_Start_IT+0x354>
 8006914:	2301      	movs	r3, #1
 8006916:	e000      	b.n	800691a <HAL_DMA_Start_IT+0x356>
 8006918:	2300      	movs	r3, #0
 800691a:	2b00      	cmp	r3, #0
 800691c:	d01a      	beq.n	8006954 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006928:	2b00      	cmp	r3, #0
 800692a:	d007      	beq.n	800693c <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006930:	681a      	ldr	r2, [r3, #0]
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006936:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800693a:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006940:	2b00      	cmp	r3, #0
 8006942:	d007      	beq.n	8006954 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006948:	681a      	ldr	r2, [r3, #0]
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800694e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006952:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	4a37      	ldr	r2, [pc, #220]	@ (8006a38 <HAL_DMA_Start_IT+0x474>)
 800695a:	4293      	cmp	r3, r2
 800695c:	d04a      	beq.n	80069f4 <HAL_DMA_Start_IT+0x430>
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	4a36      	ldr	r2, [pc, #216]	@ (8006a3c <HAL_DMA_Start_IT+0x478>)
 8006964:	4293      	cmp	r3, r2
 8006966:	d045      	beq.n	80069f4 <HAL_DMA_Start_IT+0x430>
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	4a34      	ldr	r2, [pc, #208]	@ (8006a40 <HAL_DMA_Start_IT+0x47c>)
 800696e:	4293      	cmp	r3, r2
 8006970:	d040      	beq.n	80069f4 <HAL_DMA_Start_IT+0x430>
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	4a33      	ldr	r2, [pc, #204]	@ (8006a44 <HAL_DMA_Start_IT+0x480>)
 8006978:	4293      	cmp	r3, r2
 800697a:	d03b      	beq.n	80069f4 <HAL_DMA_Start_IT+0x430>
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	4a31      	ldr	r2, [pc, #196]	@ (8006a48 <HAL_DMA_Start_IT+0x484>)
 8006982:	4293      	cmp	r3, r2
 8006984:	d036      	beq.n	80069f4 <HAL_DMA_Start_IT+0x430>
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	4a30      	ldr	r2, [pc, #192]	@ (8006a4c <HAL_DMA_Start_IT+0x488>)
 800698c:	4293      	cmp	r3, r2
 800698e:	d031      	beq.n	80069f4 <HAL_DMA_Start_IT+0x430>
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	4a2e      	ldr	r2, [pc, #184]	@ (8006a50 <HAL_DMA_Start_IT+0x48c>)
 8006996:	4293      	cmp	r3, r2
 8006998:	d02c      	beq.n	80069f4 <HAL_DMA_Start_IT+0x430>
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	4a2d      	ldr	r2, [pc, #180]	@ (8006a54 <HAL_DMA_Start_IT+0x490>)
 80069a0:	4293      	cmp	r3, r2
 80069a2:	d027      	beq.n	80069f4 <HAL_DMA_Start_IT+0x430>
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	4a2b      	ldr	r2, [pc, #172]	@ (8006a58 <HAL_DMA_Start_IT+0x494>)
 80069aa:	4293      	cmp	r3, r2
 80069ac:	d022      	beq.n	80069f4 <HAL_DMA_Start_IT+0x430>
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	4a2a      	ldr	r2, [pc, #168]	@ (8006a5c <HAL_DMA_Start_IT+0x498>)
 80069b4:	4293      	cmp	r3, r2
 80069b6:	d01d      	beq.n	80069f4 <HAL_DMA_Start_IT+0x430>
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	4a28      	ldr	r2, [pc, #160]	@ (8006a60 <HAL_DMA_Start_IT+0x49c>)
 80069be:	4293      	cmp	r3, r2
 80069c0:	d018      	beq.n	80069f4 <HAL_DMA_Start_IT+0x430>
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	4a27      	ldr	r2, [pc, #156]	@ (8006a64 <HAL_DMA_Start_IT+0x4a0>)
 80069c8:	4293      	cmp	r3, r2
 80069ca:	d013      	beq.n	80069f4 <HAL_DMA_Start_IT+0x430>
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	4a25      	ldr	r2, [pc, #148]	@ (8006a68 <HAL_DMA_Start_IT+0x4a4>)
 80069d2:	4293      	cmp	r3, r2
 80069d4:	d00e      	beq.n	80069f4 <HAL_DMA_Start_IT+0x430>
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	4a24      	ldr	r2, [pc, #144]	@ (8006a6c <HAL_DMA_Start_IT+0x4a8>)
 80069dc:	4293      	cmp	r3, r2
 80069de:	d009      	beq.n	80069f4 <HAL_DMA_Start_IT+0x430>
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	4a22      	ldr	r2, [pc, #136]	@ (8006a70 <HAL_DMA_Start_IT+0x4ac>)
 80069e6:	4293      	cmp	r3, r2
 80069e8:	d004      	beq.n	80069f4 <HAL_DMA_Start_IT+0x430>
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	4a21      	ldr	r2, [pc, #132]	@ (8006a74 <HAL_DMA_Start_IT+0x4b0>)
 80069f0:	4293      	cmp	r3, r2
 80069f2:	d108      	bne.n	8006a06 <HAL_DMA_Start_IT+0x442>
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	681a      	ldr	r2, [r3, #0]
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	f042 0201 	orr.w	r2, r2, #1
 8006a02:	601a      	str	r2, [r3, #0]
 8006a04:	e012      	b.n	8006a2c <HAL_DMA_Start_IT+0x468>
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	681a      	ldr	r2, [r3, #0]
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	f042 0201 	orr.w	r2, r2, #1
 8006a14:	601a      	str	r2, [r3, #0]
 8006a16:	e009      	b.n	8006a2c <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006a1e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	2200      	movs	r2, #0
 8006a24:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8006a28:	2301      	movs	r3, #1
 8006a2a:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8006a2c:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a2e:	4618      	mov	r0, r3
 8006a30:	3718      	adds	r7, #24
 8006a32:	46bd      	mov	sp, r7
 8006a34:	bd80      	pop	{r7, pc}
 8006a36:	bf00      	nop
 8006a38:	40020010 	.word	0x40020010
 8006a3c:	40020028 	.word	0x40020028
 8006a40:	40020040 	.word	0x40020040
 8006a44:	40020058 	.word	0x40020058
 8006a48:	40020070 	.word	0x40020070
 8006a4c:	40020088 	.word	0x40020088
 8006a50:	400200a0 	.word	0x400200a0
 8006a54:	400200b8 	.word	0x400200b8
 8006a58:	40020410 	.word	0x40020410
 8006a5c:	40020428 	.word	0x40020428
 8006a60:	40020440 	.word	0x40020440
 8006a64:	40020458 	.word	0x40020458
 8006a68:	40020470 	.word	0x40020470
 8006a6c:	40020488 	.word	0x40020488
 8006a70:	400204a0 	.word	0x400204a0
 8006a74:	400204b8 	.word	0x400204b8
 8006a78:	58025408 	.word	0x58025408
 8006a7c:	5802541c 	.word	0x5802541c
 8006a80:	58025430 	.word	0x58025430
 8006a84:	58025444 	.word	0x58025444
 8006a88:	58025458 	.word	0x58025458
 8006a8c:	5802546c 	.word	0x5802546c
 8006a90:	58025480 	.word	0x58025480
 8006a94:	58025494 	.word	0x58025494

08006a98 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006a98:	b580      	push	{r7, lr}
 8006a9a:	b086      	sub	sp, #24
 8006a9c:	af00      	add	r7, sp, #0
 8006a9e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8006aa0:	f7ff f856 	bl	8005b50 <HAL_GetTick>
 8006aa4:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d101      	bne.n	8006ab0 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8006aac:	2301      	movs	r3, #1
 8006aae:	e2dc      	b.n	800706a <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006ab6:	b2db      	uxtb	r3, r3
 8006ab8:	2b02      	cmp	r3, #2
 8006aba:	d008      	beq.n	8006ace <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	2280      	movs	r2, #128	@ 0x80
 8006ac0:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	2200      	movs	r2, #0
 8006ac6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 8006aca:	2301      	movs	r3, #1
 8006acc:	e2cd      	b.n	800706a <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	4a76      	ldr	r2, [pc, #472]	@ (8006cac <HAL_DMA_Abort+0x214>)
 8006ad4:	4293      	cmp	r3, r2
 8006ad6:	d04a      	beq.n	8006b6e <HAL_DMA_Abort+0xd6>
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	4a74      	ldr	r2, [pc, #464]	@ (8006cb0 <HAL_DMA_Abort+0x218>)
 8006ade:	4293      	cmp	r3, r2
 8006ae0:	d045      	beq.n	8006b6e <HAL_DMA_Abort+0xd6>
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	4a73      	ldr	r2, [pc, #460]	@ (8006cb4 <HAL_DMA_Abort+0x21c>)
 8006ae8:	4293      	cmp	r3, r2
 8006aea:	d040      	beq.n	8006b6e <HAL_DMA_Abort+0xd6>
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	4a71      	ldr	r2, [pc, #452]	@ (8006cb8 <HAL_DMA_Abort+0x220>)
 8006af2:	4293      	cmp	r3, r2
 8006af4:	d03b      	beq.n	8006b6e <HAL_DMA_Abort+0xd6>
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	4a70      	ldr	r2, [pc, #448]	@ (8006cbc <HAL_DMA_Abort+0x224>)
 8006afc:	4293      	cmp	r3, r2
 8006afe:	d036      	beq.n	8006b6e <HAL_DMA_Abort+0xd6>
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	4a6e      	ldr	r2, [pc, #440]	@ (8006cc0 <HAL_DMA_Abort+0x228>)
 8006b06:	4293      	cmp	r3, r2
 8006b08:	d031      	beq.n	8006b6e <HAL_DMA_Abort+0xd6>
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	4a6d      	ldr	r2, [pc, #436]	@ (8006cc4 <HAL_DMA_Abort+0x22c>)
 8006b10:	4293      	cmp	r3, r2
 8006b12:	d02c      	beq.n	8006b6e <HAL_DMA_Abort+0xd6>
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	4a6b      	ldr	r2, [pc, #428]	@ (8006cc8 <HAL_DMA_Abort+0x230>)
 8006b1a:	4293      	cmp	r3, r2
 8006b1c:	d027      	beq.n	8006b6e <HAL_DMA_Abort+0xd6>
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	4a6a      	ldr	r2, [pc, #424]	@ (8006ccc <HAL_DMA_Abort+0x234>)
 8006b24:	4293      	cmp	r3, r2
 8006b26:	d022      	beq.n	8006b6e <HAL_DMA_Abort+0xd6>
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	4a68      	ldr	r2, [pc, #416]	@ (8006cd0 <HAL_DMA_Abort+0x238>)
 8006b2e:	4293      	cmp	r3, r2
 8006b30:	d01d      	beq.n	8006b6e <HAL_DMA_Abort+0xd6>
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	4a67      	ldr	r2, [pc, #412]	@ (8006cd4 <HAL_DMA_Abort+0x23c>)
 8006b38:	4293      	cmp	r3, r2
 8006b3a:	d018      	beq.n	8006b6e <HAL_DMA_Abort+0xd6>
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	4a65      	ldr	r2, [pc, #404]	@ (8006cd8 <HAL_DMA_Abort+0x240>)
 8006b42:	4293      	cmp	r3, r2
 8006b44:	d013      	beq.n	8006b6e <HAL_DMA_Abort+0xd6>
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	4a64      	ldr	r2, [pc, #400]	@ (8006cdc <HAL_DMA_Abort+0x244>)
 8006b4c:	4293      	cmp	r3, r2
 8006b4e:	d00e      	beq.n	8006b6e <HAL_DMA_Abort+0xd6>
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	4a62      	ldr	r2, [pc, #392]	@ (8006ce0 <HAL_DMA_Abort+0x248>)
 8006b56:	4293      	cmp	r3, r2
 8006b58:	d009      	beq.n	8006b6e <HAL_DMA_Abort+0xd6>
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	4a61      	ldr	r2, [pc, #388]	@ (8006ce4 <HAL_DMA_Abort+0x24c>)
 8006b60:	4293      	cmp	r3, r2
 8006b62:	d004      	beq.n	8006b6e <HAL_DMA_Abort+0xd6>
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	4a5f      	ldr	r2, [pc, #380]	@ (8006ce8 <HAL_DMA_Abort+0x250>)
 8006b6a:	4293      	cmp	r3, r2
 8006b6c:	d101      	bne.n	8006b72 <HAL_DMA_Abort+0xda>
 8006b6e:	2301      	movs	r3, #1
 8006b70:	e000      	b.n	8006b74 <HAL_DMA_Abort+0xdc>
 8006b72:	2300      	movs	r3, #0
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d013      	beq.n	8006ba0 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	681a      	ldr	r2, [r3, #0]
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	f022 021e 	bic.w	r2, r2, #30
 8006b86:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	695a      	ldr	r2, [r3, #20]
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006b96:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	617b      	str	r3, [r7, #20]
 8006b9e:	e00a      	b.n	8006bb6 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	681a      	ldr	r2, [r3, #0]
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	f022 020e 	bic.w	r2, r2, #14
 8006bae:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	4a3c      	ldr	r2, [pc, #240]	@ (8006cac <HAL_DMA_Abort+0x214>)
 8006bbc:	4293      	cmp	r3, r2
 8006bbe:	d072      	beq.n	8006ca6 <HAL_DMA_Abort+0x20e>
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	4a3a      	ldr	r2, [pc, #232]	@ (8006cb0 <HAL_DMA_Abort+0x218>)
 8006bc6:	4293      	cmp	r3, r2
 8006bc8:	d06d      	beq.n	8006ca6 <HAL_DMA_Abort+0x20e>
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	4a39      	ldr	r2, [pc, #228]	@ (8006cb4 <HAL_DMA_Abort+0x21c>)
 8006bd0:	4293      	cmp	r3, r2
 8006bd2:	d068      	beq.n	8006ca6 <HAL_DMA_Abort+0x20e>
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	4a37      	ldr	r2, [pc, #220]	@ (8006cb8 <HAL_DMA_Abort+0x220>)
 8006bda:	4293      	cmp	r3, r2
 8006bdc:	d063      	beq.n	8006ca6 <HAL_DMA_Abort+0x20e>
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	4a36      	ldr	r2, [pc, #216]	@ (8006cbc <HAL_DMA_Abort+0x224>)
 8006be4:	4293      	cmp	r3, r2
 8006be6:	d05e      	beq.n	8006ca6 <HAL_DMA_Abort+0x20e>
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	4a34      	ldr	r2, [pc, #208]	@ (8006cc0 <HAL_DMA_Abort+0x228>)
 8006bee:	4293      	cmp	r3, r2
 8006bf0:	d059      	beq.n	8006ca6 <HAL_DMA_Abort+0x20e>
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	4a33      	ldr	r2, [pc, #204]	@ (8006cc4 <HAL_DMA_Abort+0x22c>)
 8006bf8:	4293      	cmp	r3, r2
 8006bfa:	d054      	beq.n	8006ca6 <HAL_DMA_Abort+0x20e>
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	4a31      	ldr	r2, [pc, #196]	@ (8006cc8 <HAL_DMA_Abort+0x230>)
 8006c02:	4293      	cmp	r3, r2
 8006c04:	d04f      	beq.n	8006ca6 <HAL_DMA_Abort+0x20e>
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	4a30      	ldr	r2, [pc, #192]	@ (8006ccc <HAL_DMA_Abort+0x234>)
 8006c0c:	4293      	cmp	r3, r2
 8006c0e:	d04a      	beq.n	8006ca6 <HAL_DMA_Abort+0x20e>
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	4a2e      	ldr	r2, [pc, #184]	@ (8006cd0 <HAL_DMA_Abort+0x238>)
 8006c16:	4293      	cmp	r3, r2
 8006c18:	d045      	beq.n	8006ca6 <HAL_DMA_Abort+0x20e>
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	4a2d      	ldr	r2, [pc, #180]	@ (8006cd4 <HAL_DMA_Abort+0x23c>)
 8006c20:	4293      	cmp	r3, r2
 8006c22:	d040      	beq.n	8006ca6 <HAL_DMA_Abort+0x20e>
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	4a2b      	ldr	r2, [pc, #172]	@ (8006cd8 <HAL_DMA_Abort+0x240>)
 8006c2a:	4293      	cmp	r3, r2
 8006c2c:	d03b      	beq.n	8006ca6 <HAL_DMA_Abort+0x20e>
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	4a2a      	ldr	r2, [pc, #168]	@ (8006cdc <HAL_DMA_Abort+0x244>)
 8006c34:	4293      	cmp	r3, r2
 8006c36:	d036      	beq.n	8006ca6 <HAL_DMA_Abort+0x20e>
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	4a28      	ldr	r2, [pc, #160]	@ (8006ce0 <HAL_DMA_Abort+0x248>)
 8006c3e:	4293      	cmp	r3, r2
 8006c40:	d031      	beq.n	8006ca6 <HAL_DMA_Abort+0x20e>
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	4a27      	ldr	r2, [pc, #156]	@ (8006ce4 <HAL_DMA_Abort+0x24c>)
 8006c48:	4293      	cmp	r3, r2
 8006c4a:	d02c      	beq.n	8006ca6 <HAL_DMA_Abort+0x20e>
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	4a25      	ldr	r2, [pc, #148]	@ (8006ce8 <HAL_DMA_Abort+0x250>)
 8006c52:	4293      	cmp	r3, r2
 8006c54:	d027      	beq.n	8006ca6 <HAL_DMA_Abort+0x20e>
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	4a24      	ldr	r2, [pc, #144]	@ (8006cec <HAL_DMA_Abort+0x254>)
 8006c5c:	4293      	cmp	r3, r2
 8006c5e:	d022      	beq.n	8006ca6 <HAL_DMA_Abort+0x20e>
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	4a22      	ldr	r2, [pc, #136]	@ (8006cf0 <HAL_DMA_Abort+0x258>)
 8006c66:	4293      	cmp	r3, r2
 8006c68:	d01d      	beq.n	8006ca6 <HAL_DMA_Abort+0x20e>
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	4a21      	ldr	r2, [pc, #132]	@ (8006cf4 <HAL_DMA_Abort+0x25c>)
 8006c70:	4293      	cmp	r3, r2
 8006c72:	d018      	beq.n	8006ca6 <HAL_DMA_Abort+0x20e>
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	4a1f      	ldr	r2, [pc, #124]	@ (8006cf8 <HAL_DMA_Abort+0x260>)
 8006c7a:	4293      	cmp	r3, r2
 8006c7c:	d013      	beq.n	8006ca6 <HAL_DMA_Abort+0x20e>
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	4a1e      	ldr	r2, [pc, #120]	@ (8006cfc <HAL_DMA_Abort+0x264>)
 8006c84:	4293      	cmp	r3, r2
 8006c86:	d00e      	beq.n	8006ca6 <HAL_DMA_Abort+0x20e>
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	4a1c      	ldr	r2, [pc, #112]	@ (8006d00 <HAL_DMA_Abort+0x268>)
 8006c8e:	4293      	cmp	r3, r2
 8006c90:	d009      	beq.n	8006ca6 <HAL_DMA_Abort+0x20e>
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	4a1b      	ldr	r2, [pc, #108]	@ (8006d04 <HAL_DMA_Abort+0x26c>)
 8006c98:	4293      	cmp	r3, r2
 8006c9a:	d004      	beq.n	8006ca6 <HAL_DMA_Abort+0x20e>
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	4a19      	ldr	r2, [pc, #100]	@ (8006d08 <HAL_DMA_Abort+0x270>)
 8006ca2:	4293      	cmp	r3, r2
 8006ca4:	d132      	bne.n	8006d0c <HAL_DMA_Abort+0x274>
 8006ca6:	2301      	movs	r3, #1
 8006ca8:	e031      	b.n	8006d0e <HAL_DMA_Abort+0x276>
 8006caa:	bf00      	nop
 8006cac:	40020010 	.word	0x40020010
 8006cb0:	40020028 	.word	0x40020028
 8006cb4:	40020040 	.word	0x40020040
 8006cb8:	40020058 	.word	0x40020058
 8006cbc:	40020070 	.word	0x40020070
 8006cc0:	40020088 	.word	0x40020088
 8006cc4:	400200a0 	.word	0x400200a0
 8006cc8:	400200b8 	.word	0x400200b8
 8006ccc:	40020410 	.word	0x40020410
 8006cd0:	40020428 	.word	0x40020428
 8006cd4:	40020440 	.word	0x40020440
 8006cd8:	40020458 	.word	0x40020458
 8006cdc:	40020470 	.word	0x40020470
 8006ce0:	40020488 	.word	0x40020488
 8006ce4:	400204a0 	.word	0x400204a0
 8006ce8:	400204b8 	.word	0x400204b8
 8006cec:	58025408 	.word	0x58025408
 8006cf0:	5802541c 	.word	0x5802541c
 8006cf4:	58025430 	.word	0x58025430
 8006cf8:	58025444 	.word	0x58025444
 8006cfc:	58025458 	.word	0x58025458
 8006d00:	5802546c 	.word	0x5802546c
 8006d04:	58025480 	.word	0x58025480
 8006d08:	58025494 	.word	0x58025494
 8006d0c:	2300      	movs	r3, #0
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d007      	beq.n	8006d22 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006d16:	681a      	ldr	r2, [r3, #0]
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006d1c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006d20:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	4a6d      	ldr	r2, [pc, #436]	@ (8006edc <HAL_DMA_Abort+0x444>)
 8006d28:	4293      	cmp	r3, r2
 8006d2a:	d04a      	beq.n	8006dc2 <HAL_DMA_Abort+0x32a>
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	4a6b      	ldr	r2, [pc, #428]	@ (8006ee0 <HAL_DMA_Abort+0x448>)
 8006d32:	4293      	cmp	r3, r2
 8006d34:	d045      	beq.n	8006dc2 <HAL_DMA_Abort+0x32a>
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	4a6a      	ldr	r2, [pc, #424]	@ (8006ee4 <HAL_DMA_Abort+0x44c>)
 8006d3c:	4293      	cmp	r3, r2
 8006d3e:	d040      	beq.n	8006dc2 <HAL_DMA_Abort+0x32a>
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	4a68      	ldr	r2, [pc, #416]	@ (8006ee8 <HAL_DMA_Abort+0x450>)
 8006d46:	4293      	cmp	r3, r2
 8006d48:	d03b      	beq.n	8006dc2 <HAL_DMA_Abort+0x32a>
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	4a67      	ldr	r2, [pc, #412]	@ (8006eec <HAL_DMA_Abort+0x454>)
 8006d50:	4293      	cmp	r3, r2
 8006d52:	d036      	beq.n	8006dc2 <HAL_DMA_Abort+0x32a>
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	4a65      	ldr	r2, [pc, #404]	@ (8006ef0 <HAL_DMA_Abort+0x458>)
 8006d5a:	4293      	cmp	r3, r2
 8006d5c:	d031      	beq.n	8006dc2 <HAL_DMA_Abort+0x32a>
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	4a64      	ldr	r2, [pc, #400]	@ (8006ef4 <HAL_DMA_Abort+0x45c>)
 8006d64:	4293      	cmp	r3, r2
 8006d66:	d02c      	beq.n	8006dc2 <HAL_DMA_Abort+0x32a>
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	4a62      	ldr	r2, [pc, #392]	@ (8006ef8 <HAL_DMA_Abort+0x460>)
 8006d6e:	4293      	cmp	r3, r2
 8006d70:	d027      	beq.n	8006dc2 <HAL_DMA_Abort+0x32a>
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	4a61      	ldr	r2, [pc, #388]	@ (8006efc <HAL_DMA_Abort+0x464>)
 8006d78:	4293      	cmp	r3, r2
 8006d7a:	d022      	beq.n	8006dc2 <HAL_DMA_Abort+0x32a>
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	4a5f      	ldr	r2, [pc, #380]	@ (8006f00 <HAL_DMA_Abort+0x468>)
 8006d82:	4293      	cmp	r3, r2
 8006d84:	d01d      	beq.n	8006dc2 <HAL_DMA_Abort+0x32a>
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	4a5e      	ldr	r2, [pc, #376]	@ (8006f04 <HAL_DMA_Abort+0x46c>)
 8006d8c:	4293      	cmp	r3, r2
 8006d8e:	d018      	beq.n	8006dc2 <HAL_DMA_Abort+0x32a>
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	4a5c      	ldr	r2, [pc, #368]	@ (8006f08 <HAL_DMA_Abort+0x470>)
 8006d96:	4293      	cmp	r3, r2
 8006d98:	d013      	beq.n	8006dc2 <HAL_DMA_Abort+0x32a>
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	4a5b      	ldr	r2, [pc, #364]	@ (8006f0c <HAL_DMA_Abort+0x474>)
 8006da0:	4293      	cmp	r3, r2
 8006da2:	d00e      	beq.n	8006dc2 <HAL_DMA_Abort+0x32a>
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	4a59      	ldr	r2, [pc, #356]	@ (8006f10 <HAL_DMA_Abort+0x478>)
 8006daa:	4293      	cmp	r3, r2
 8006dac:	d009      	beq.n	8006dc2 <HAL_DMA_Abort+0x32a>
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	4a58      	ldr	r2, [pc, #352]	@ (8006f14 <HAL_DMA_Abort+0x47c>)
 8006db4:	4293      	cmp	r3, r2
 8006db6:	d004      	beq.n	8006dc2 <HAL_DMA_Abort+0x32a>
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	4a56      	ldr	r2, [pc, #344]	@ (8006f18 <HAL_DMA_Abort+0x480>)
 8006dbe:	4293      	cmp	r3, r2
 8006dc0:	d108      	bne.n	8006dd4 <HAL_DMA_Abort+0x33c>
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	681a      	ldr	r2, [r3, #0]
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	f022 0201 	bic.w	r2, r2, #1
 8006dd0:	601a      	str	r2, [r3, #0]
 8006dd2:	e007      	b.n	8006de4 <HAL_DMA_Abort+0x34c>
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	681a      	ldr	r2, [r3, #0]
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	f022 0201 	bic.w	r2, r2, #1
 8006de2:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8006de4:	e013      	b.n	8006e0e <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006de6:	f7fe feb3 	bl	8005b50 <HAL_GetTick>
 8006dea:	4602      	mov	r2, r0
 8006dec:	693b      	ldr	r3, [r7, #16]
 8006dee:	1ad3      	subs	r3, r2, r3
 8006df0:	2b05      	cmp	r3, #5
 8006df2:	d90c      	bls.n	8006e0e <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	2220      	movs	r2, #32
 8006df8:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	2203      	movs	r2, #3
 8006dfe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	2200      	movs	r2, #0
 8006e06:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8006e0a:	2301      	movs	r3, #1
 8006e0c:	e12d      	b.n	800706a <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8006e0e:	697b      	ldr	r3, [r7, #20]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	f003 0301 	and.w	r3, r3, #1
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d1e5      	bne.n	8006de6 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	4a2f      	ldr	r2, [pc, #188]	@ (8006edc <HAL_DMA_Abort+0x444>)
 8006e20:	4293      	cmp	r3, r2
 8006e22:	d04a      	beq.n	8006eba <HAL_DMA_Abort+0x422>
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	4a2d      	ldr	r2, [pc, #180]	@ (8006ee0 <HAL_DMA_Abort+0x448>)
 8006e2a:	4293      	cmp	r3, r2
 8006e2c:	d045      	beq.n	8006eba <HAL_DMA_Abort+0x422>
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	4a2c      	ldr	r2, [pc, #176]	@ (8006ee4 <HAL_DMA_Abort+0x44c>)
 8006e34:	4293      	cmp	r3, r2
 8006e36:	d040      	beq.n	8006eba <HAL_DMA_Abort+0x422>
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	4a2a      	ldr	r2, [pc, #168]	@ (8006ee8 <HAL_DMA_Abort+0x450>)
 8006e3e:	4293      	cmp	r3, r2
 8006e40:	d03b      	beq.n	8006eba <HAL_DMA_Abort+0x422>
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	4a29      	ldr	r2, [pc, #164]	@ (8006eec <HAL_DMA_Abort+0x454>)
 8006e48:	4293      	cmp	r3, r2
 8006e4a:	d036      	beq.n	8006eba <HAL_DMA_Abort+0x422>
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	4a27      	ldr	r2, [pc, #156]	@ (8006ef0 <HAL_DMA_Abort+0x458>)
 8006e52:	4293      	cmp	r3, r2
 8006e54:	d031      	beq.n	8006eba <HAL_DMA_Abort+0x422>
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	4a26      	ldr	r2, [pc, #152]	@ (8006ef4 <HAL_DMA_Abort+0x45c>)
 8006e5c:	4293      	cmp	r3, r2
 8006e5e:	d02c      	beq.n	8006eba <HAL_DMA_Abort+0x422>
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	4a24      	ldr	r2, [pc, #144]	@ (8006ef8 <HAL_DMA_Abort+0x460>)
 8006e66:	4293      	cmp	r3, r2
 8006e68:	d027      	beq.n	8006eba <HAL_DMA_Abort+0x422>
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	4a23      	ldr	r2, [pc, #140]	@ (8006efc <HAL_DMA_Abort+0x464>)
 8006e70:	4293      	cmp	r3, r2
 8006e72:	d022      	beq.n	8006eba <HAL_DMA_Abort+0x422>
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	4a21      	ldr	r2, [pc, #132]	@ (8006f00 <HAL_DMA_Abort+0x468>)
 8006e7a:	4293      	cmp	r3, r2
 8006e7c:	d01d      	beq.n	8006eba <HAL_DMA_Abort+0x422>
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	4a20      	ldr	r2, [pc, #128]	@ (8006f04 <HAL_DMA_Abort+0x46c>)
 8006e84:	4293      	cmp	r3, r2
 8006e86:	d018      	beq.n	8006eba <HAL_DMA_Abort+0x422>
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	4a1e      	ldr	r2, [pc, #120]	@ (8006f08 <HAL_DMA_Abort+0x470>)
 8006e8e:	4293      	cmp	r3, r2
 8006e90:	d013      	beq.n	8006eba <HAL_DMA_Abort+0x422>
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	4a1d      	ldr	r2, [pc, #116]	@ (8006f0c <HAL_DMA_Abort+0x474>)
 8006e98:	4293      	cmp	r3, r2
 8006e9a:	d00e      	beq.n	8006eba <HAL_DMA_Abort+0x422>
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	4a1b      	ldr	r2, [pc, #108]	@ (8006f10 <HAL_DMA_Abort+0x478>)
 8006ea2:	4293      	cmp	r3, r2
 8006ea4:	d009      	beq.n	8006eba <HAL_DMA_Abort+0x422>
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	4a1a      	ldr	r2, [pc, #104]	@ (8006f14 <HAL_DMA_Abort+0x47c>)
 8006eac:	4293      	cmp	r3, r2
 8006eae:	d004      	beq.n	8006eba <HAL_DMA_Abort+0x422>
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	4a18      	ldr	r2, [pc, #96]	@ (8006f18 <HAL_DMA_Abort+0x480>)
 8006eb6:	4293      	cmp	r3, r2
 8006eb8:	d101      	bne.n	8006ebe <HAL_DMA_Abort+0x426>
 8006eba:	2301      	movs	r3, #1
 8006ebc:	e000      	b.n	8006ec0 <HAL_DMA_Abort+0x428>
 8006ebe:	2300      	movs	r3, #0
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d02b      	beq.n	8006f1c <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006ec8:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006ece:	f003 031f 	and.w	r3, r3, #31
 8006ed2:	223f      	movs	r2, #63	@ 0x3f
 8006ed4:	409a      	lsls	r2, r3
 8006ed6:	68bb      	ldr	r3, [r7, #8]
 8006ed8:	609a      	str	r2, [r3, #8]
 8006eda:	e02a      	b.n	8006f32 <HAL_DMA_Abort+0x49a>
 8006edc:	40020010 	.word	0x40020010
 8006ee0:	40020028 	.word	0x40020028
 8006ee4:	40020040 	.word	0x40020040
 8006ee8:	40020058 	.word	0x40020058
 8006eec:	40020070 	.word	0x40020070
 8006ef0:	40020088 	.word	0x40020088
 8006ef4:	400200a0 	.word	0x400200a0
 8006ef8:	400200b8 	.word	0x400200b8
 8006efc:	40020410 	.word	0x40020410
 8006f00:	40020428 	.word	0x40020428
 8006f04:	40020440 	.word	0x40020440
 8006f08:	40020458 	.word	0x40020458
 8006f0c:	40020470 	.word	0x40020470
 8006f10:	40020488 	.word	0x40020488
 8006f14:	400204a0 	.word	0x400204a0
 8006f18:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006f20:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006f26:	f003 031f 	and.w	r3, r3, #31
 8006f2a:	2201      	movs	r2, #1
 8006f2c:	409a      	lsls	r2, r3
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	4a4f      	ldr	r2, [pc, #316]	@ (8007074 <HAL_DMA_Abort+0x5dc>)
 8006f38:	4293      	cmp	r3, r2
 8006f3a:	d072      	beq.n	8007022 <HAL_DMA_Abort+0x58a>
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	4a4d      	ldr	r2, [pc, #308]	@ (8007078 <HAL_DMA_Abort+0x5e0>)
 8006f42:	4293      	cmp	r3, r2
 8006f44:	d06d      	beq.n	8007022 <HAL_DMA_Abort+0x58a>
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	4a4c      	ldr	r2, [pc, #304]	@ (800707c <HAL_DMA_Abort+0x5e4>)
 8006f4c:	4293      	cmp	r3, r2
 8006f4e:	d068      	beq.n	8007022 <HAL_DMA_Abort+0x58a>
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	4a4a      	ldr	r2, [pc, #296]	@ (8007080 <HAL_DMA_Abort+0x5e8>)
 8006f56:	4293      	cmp	r3, r2
 8006f58:	d063      	beq.n	8007022 <HAL_DMA_Abort+0x58a>
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	4a49      	ldr	r2, [pc, #292]	@ (8007084 <HAL_DMA_Abort+0x5ec>)
 8006f60:	4293      	cmp	r3, r2
 8006f62:	d05e      	beq.n	8007022 <HAL_DMA_Abort+0x58a>
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	4a47      	ldr	r2, [pc, #284]	@ (8007088 <HAL_DMA_Abort+0x5f0>)
 8006f6a:	4293      	cmp	r3, r2
 8006f6c:	d059      	beq.n	8007022 <HAL_DMA_Abort+0x58a>
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	4a46      	ldr	r2, [pc, #280]	@ (800708c <HAL_DMA_Abort+0x5f4>)
 8006f74:	4293      	cmp	r3, r2
 8006f76:	d054      	beq.n	8007022 <HAL_DMA_Abort+0x58a>
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	4a44      	ldr	r2, [pc, #272]	@ (8007090 <HAL_DMA_Abort+0x5f8>)
 8006f7e:	4293      	cmp	r3, r2
 8006f80:	d04f      	beq.n	8007022 <HAL_DMA_Abort+0x58a>
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	4a43      	ldr	r2, [pc, #268]	@ (8007094 <HAL_DMA_Abort+0x5fc>)
 8006f88:	4293      	cmp	r3, r2
 8006f8a:	d04a      	beq.n	8007022 <HAL_DMA_Abort+0x58a>
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	4a41      	ldr	r2, [pc, #260]	@ (8007098 <HAL_DMA_Abort+0x600>)
 8006f92:	4293      	cmp	r3, r2
 8006f94:	d045      	beq.n	8007022 <HAL_DMA_Abort+0x58a>
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	4a40      	ldr	r2, [pc, #256]	@ (800709c <HAL_DMA_Abort+0x604>)
 8006f9c:	4293      	cmp	r3, r2
 8006f9e:	d040      	beq.n	8007022 <HAL_DMA_Abort+0x58a>
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	4a3e      	ldr	r2, [pc, #248]	@ (80070a0 <HAL_DMA_Abort+0x608>)
 8006fa6:	4293      	cmp	r3, r2
 8006fa8:	d03b      	beq.n	8007022 <HAL_DMA_Abort+0x58a>
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	4a3d      	ldr	r2, [pc, #244]	@ (80070a4 <HAL_DMA_Abort+0x60c>)
 8006fb0:	4293      	cmp	r3, r2
 8006fb2:	d036      	beq.n	8007022 <HAL_DMA_Abort+0x58a>
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	4a3b      	ldr	r2, [pc, #236]	@ (80070a8 <HAL_DMA_Abort+0x610>)
 8006fba:	4293      	cmp	r3, r2
 8006fbc:	d031      	beq.n	8007022 <HAL_DMA_Abort+0x58a>
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	4a3a      	ldr	r2, [pc, #232]	@ (80070ac <HAL_DMA_Abort+0x614>)
 8006fc4:	4293      	cmp	r3, r2
 8006fc6:	d02c      	beq.n	8007022 <HAL_DMA_Abort+0x58a>
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	4a38      	ldr	r2, [pc, #224]	@ (80070b0 <HAL_DMA_Abort+0x618>)
 8006fce:	4293      	cmp	r3, r2
 8006fd0:	d027      	beq.n	8007022 <HAL_DMA_Abort+0x58a>
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	4a37      	ldr	r2, [pc, #220]	@ (80070b4 <HAL_DMA_Abort+0x61c>)
 8006fd8:	4293      	cmp	r3, r2
 8006fda:	d022      	beq.n	8007022 <HAL_DMA_Abort+0x58a>
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	4a35      	ldr	r2, [pc, #212]	@ (80070b8 <HAL_DMA_Abort+0x620>)
 8006fe2:	4293      	cmp	r3, r2
 8006fe4:	d01d      	beq.n	8007022 <HAL_DMA_Abort+0x58a>
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	4a34      	ldr	r2, [pc, #208]	@ (80070bc <HAL_DMA_Abort+0x624>)
 8006fec:	4293      	cmp	r3, r2
 8006fee:	d018      	beq.n	8007022 <HAL_DMA_Abort+0x58a>
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	4a32      	ldr	r2, [pc, #200]	@ (80070c0 <HAL_DMA_Abort+0x628>)
 8006ff6:	4293      	cmp	r3, r2
 8006ff8:	d013      	beq.n	8007022 <HAL_DMA_Abort+0x58a>
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	4a31      	ldr	r2, [pc, #196]	@ (80070c4 <HAL_DMA_Abort+0x62c>)
 8007000:	4293      	cmp	r3, r2
 8007002:	d00e      	beq.n	8007022 <HAL_DMA_Abort+0x58a>
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	4a2f      	ldr	r2, [pc, #188]	@ (80070c8 <HAL_DMA_Abort+0x630>)
 800700a:	4293      	cmp	r3, r2
 800700c:	d009      	beq.n	8007022 <HAL_DMA_Abort+0x58a>
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	4a2e      	ldr	r2, [pc, #184]	@ (80070cc <HAL_DMA_Abort+0x634>)
 8007014:	4293      	cmp	r3, r2
 8007016:	d004      	beq.n	8007022 <HAL_DMA_Abort+0x58a>
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	4a2c      	ldr	r2, [pc, #176]	@ (80070d0 <HAL_DMA_Abort+0x638>)
 800701e:	4293      	cmp	r3, r2
 8007020:	d101      	bne.n	8007026 <HAL_DMA_Abort+0x58e>
 8007022:	2301      	movs	r3, #1
 8007024:	e000      	b.n	8007028 <HAL_DMA_Abort+0x590>
 8007026:	2300      	movs	r3, #0
 8007028:	2b00      	cmp	r3, #0
 800702a:	d015      	beq.n	8007058 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007030:	687a      	ldr	r2, [r7, #4]
 8007032:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8007034:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800703a:	2b00      	cmp	r3, #0
 800703c:	d00c      	beq.n	8007058 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007042:	681a      	ldr	r2, [r3, #0]
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007048:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800704c:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007052:	687a      	ldr	r2, [r7, #4]
 8007054:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8007056:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	2201      	movs	r2, #1
 800705c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	2200      	movs	r2, #0
 8007064:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8007068:	2300      	movs	r3, #0
}
 800706a:	4618      	mov	r0, r3
 800706c:	3718      	adds	r7, #24
 800706e:	46bd      	mov	sp, r7
 8007070:	bd80      	pop	{r7, pc}
 8007072:	bf00      	nop
 8007074:	40020010 	.word	0x40020010
 8007078:	40020028 	.word	0x40020028
 800707c:	40020040 	.word	0x40020040
 8007080:	40020058 	.word	0x40020058
 8007084:	40020070 	.word	0x40020070
 8007088:	40020088 	.word	0x40020088
 800708c:	400200a0 	.word	0x400200a0
 8007090:	400200b8 	.word	0x400200b8
 8007094:	40020410 	.word	0x40020410
 8007098:	40020428 	.word	0x40020428
 800709c:	40020440 	.word	0x40020440
 80070a0:	40020458 	.word	0x40020458
 80070a4:	40020470 	.word	0x40020470
 80070a8:	40020488 	.word	0x40020488
 80070ac:	400204a0 	.word	0x400204a0
 80070b0:	400204b8 	.word	0x400204b8
 80070b4:	58025408 	.word	0x58025408
 80070b8:	5802541c 	.word	0x5802541c
 80070bc:	58025430 	.word	0x58025430
 80070c0:	58025444 	.word	0x58025444
 80070c4:	58025458 	.word	0x58025458
 80070c8:	5802546c 	.word	0x5802546c
 80070cc:	58025480 	.word	0x58025480
 80070d0:	58025494 	.word	0x58025494

080070d4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80070d4:	b580      	push	{r7, lr}
 80070d6:	b08a      	sub	sp, #40	@ 0x28
 80070d8:	af00      	add	r7, sp, #0
 80070da:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80070dc:	2300      	movs	r3, #0
 80070de:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80070e0:	4b67      	ldr	r3, [pc, #412]	@ (8007280 <HAL_DMA_IRQHandler+0x1ac>)
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	4a67      	ldr	r2, [pc, #412]	@ (8007284 <HAL_DMA_IRQHandler+0x1b0>)
 80070e6:	fba2 2303 	umull	r2, r3, r2, r3
 80070ea:	0a9b      	lsrs	r3, r3, #10
 80070ec:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80070f2:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80070f8:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80070fa:	6a3b      	ldr	r3, [r7, #32]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8007100:	69fb      	ldr	r3, [r7, #28]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	4a5f      	ldr	r2, [pc, #380]	@ (8007288 <HAL_DMA_IRQHandler+0x1b4>)
 800710c:	4293      	cmp	r3, r2
 800710e:	d04a      	beq.n	80071a6 <HAL_DMA_IRQHandler+0xd2>
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	4a5d      	ldr	r2, [pc, #372]	@ (800728c <HAL_DMA_IRQHandler+0x1b8>)
 8007116:	4293      	cmp	r3, r2
 8007118:	d045      	beq.n	80071a6 <HAL_DMA_IRQHandler+0xd2>
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	4a5c      	ldr	r2, [pc, #368]	@ (8007290 <HAL_DMA_IRQHandler+0x1bc>)
 8007120:	4293      	cmp	r3, r2
 8007122:	d040      	beq.n	80071a6 <HAL_DMA_IRQHandler+0xd2>
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	4a5a      	ldr	r2, [pc, #360]	@ (8007294 <HAL_DMA_IRQHandler+0x1c0>)
 800712a:	4293      	cmp	r3, r2
 800712c:	d03b      	beq.n	80071a6 <HAL_DMA_IRQHandler+0xd2>
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	4a59      	ldr	r2, [pc, #356]	@ (8007298 <HAL_DMA_IRQHandler+0x1c4>)
 8007134:	4293      	cmp	r3, r2
 8007136:	d036      	beq.n	80071a6 <HAL_DMA_IRQHandler+0xd2>
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	4a57      	ldr	r2, [pc, #348]	@ (800729c <HAL_DMA_IRQHandler+0x1c8>)
 800713e:	4293      	cmp	r3, r2
 8007140:	d031      	beq.n	80071a6 <HAL_DMA_IRQHandler+0xd2>
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	4a56      	ldr	r2, [pc, #344]	@ (80072a0 <HAL_DMA_IRQHandler+0x1cc>)
 8007148:	4293      	cmp	r3, r2
 800714a:	d02c      	beq.n	80071a6 <HAL_DMA_IRQHandler+0xd2>
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	4a54      	ldr	r2, [pc, #336]	@ (80072a4 <HAL_DMA_IRQHandler+0x1d0>)
 8007152:	4293      	cmp	r3, r2
 8007154:	d027      	beq.n	80071a6 <HAL_DMA_IRQHandler+0xd2>
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	4a53      	ldr	r2, [pc, #332]	@ (80072a8 <HAL_DMA_IRQHandler+0x1d4>)
 800715c:	4293      	cmp	r3, r2
 800715e:	d022      	beq.n	80071a6 <HAL_DMA_IRQHandler+0xd2>
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	4a51      	ldr	r2, [pc, #324]	@ (80072ac <HAL_DMA_IRQHandler+0x1d8>)
 8007166:	4293      	cmp	r3, r2
 8007168:	d01d      	beq.n	80071a6 <HAL_DMA_IRQHandler+0xd2>
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	4a50      	ldr	r2, [pc, #320]	@ (80072b0 <HAL_DMA_IRQHandler+0x1dc>)
 8007170:	4293      	cmp	r3, r2
 8007172:	d018      	beq.n	80071a6 <HAL_DMA_IRQHandler+0xd2>
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	4a4e      	ldr	r2, [pc, #312]	@ (80072b4 <HAL_DMA_IRQHandler+0x1e0>)
 800717a:	4293      	cmp	r3, r2
 800717c:	d013      	beq.n	80071a6 <HAL_DMA_IRQHandler+0xd2>
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	4a4d      	ldr	r2, [pc, #308]	@ (80072b8 <HAL_DMA_IRQHandler+0x1e4>)
 8007184:	4293      	cmp	r3, r2
 8007186:	d00e      	beq.n	80071a6 <HAL_DMA_IRQHandler+0xd2>
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	4a4b      	ldr	r2, [pc, #300]	@ (80072bc <HAL_DMA_IRQHandler+0x1e8>)
 800718e:	4293      	cmp	r3, r2
 8007190:	d009      	beq.n	80071a6 <HAL_DMA_IRQHandler+0xd2>
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	4a4a      	ldr	r2, [pc, #296]	@ (80072c0 <HAL_DMA_IRQHandler+0x1ec>)
 8007198:	4293      	cmp	r3, r2
 800719a:	d004      	beq.n	80071a6 <HAL_DMA_IRQHandler+0xd2>
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	4a48      	ldr	r2, [pc, #288]	@ (80072c4 <HAL_DMA_IRQHandler+0x1f0>)
 80071a2:	4293      	cmp	r3, r2
 80071a4:	d101      	bne.n	80071aa <HAL_DMA_IRQHandler+0xd6>
 80071a6:	2301      	movs	r3, #1
 80071a8:	e000      	b.n	80071ac <HAL_DMA_IRQHandler+0xd8>
 80071aa:	2300      	movs	r3, #0
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	f000 842b 	beq.w	8007a08 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80071b6:	f003 031f 	and.w	r3, r3, #31
 80071ba:	2208      	movs	r2, #8
 80071bc:	409a      	lsls	r2, r3
 80071be:	69bb      	ldr	r3, [r7, #24]
 80071c0:	4013      	ands	r3, r2
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	f000 80a2 	beq.w	800730c <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	4a2e      	ldr	r2, [pc, #184]	@ (8007288 <HAL_DMA_IRQHandler+0x1b4>)
 80071ce:	4293      	cmp	r3, r2
 80071d0:	d04a      	beq.n	8007268 <HAL_DMA_IRQHandler+0x194>
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	4a2d      	ldr	r2, [pc, #180]	@ (800728c <HAL_DMA_IRQHandler+0x1b8>)
 80071d8:	4293      	cmp	r3, r2
 80071da:	d045      	beq.n	8007268 <HAL_DMA_IRQHandler+0x194>
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	4a2b      	ldr	r2, [pc, #172]	@ (8007290 <HAL_DMA_IRQHandler+0x1bc>)
 80071e2:	4293      	cmp	r3, r2
 80071e4:	d040      	beq.n	8007268 <HAL_DMA_IRQHandler+0x194>
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	4a2a      	ldr	r2, [pc, #168]	@ (8007294 <HAL_DMA_IRQHandler+0x1c0>)
 80071ec:	4293      	cmp	r3, r2
 80071ee:	d03b      	beq.n	8007268 <HAL_DMA_IRQHandler+0x194>
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	4a28      	ldr	r2, [pc, #160]	@ (8007298 <HAL_DMA_IRQHandler+0x1c4>)
 80071f6:	4293      	cmp	r3, r2
 80071f8:	d036      	beq.n	8007268 <HAL_DMA_IRQHandler+0x194>
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	4a27      	ldr	r2, [pc, #156]	@ (800729c <HAL_DMA_IRQHandler+0x1c8>)
 8007200:	4293      	cmp	r3, r2
 8007202:	d031      	beq.n	8007268 <HAL_DMA_IRQHandler+0x194>
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	4a25      	ldr	r2, [pc, #148]	@ (80072a0 <HAL_DMA_IRQHandler+0x1cc>)
 800720a:	4293      	cmp	r3, r2
 800720c:	d02c      	beq.n	8007268 <HAL_DMA_IRQHandler+0x194>
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	4a24      	ldr	r2, [pc, #144]	@ (80072a4 <HAL_DMA_IRQHandler+0x1d0>)
 8007214:	4293      	cmp	r3, r2
 8007216:	d027      	beq.n	8007268 <HAL_DMA_IRQHandler+0x194>
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	4a22      	ldr	r2, [pc, #136]	@ (80072a8 <HAL_DMA_IRQHandler+0x1d4>)
 800721e:	4293      	cmp	r3, r2
 8007220:	d022      	beq.n	8007268 <HAL_DMA_IRQHandler+0x194>
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	4a21      	ldr	r2, [pc, #132]	@ (80072ac <HAL_DMA_IRQHandler+0x1d8>)
 8007228:	4293      	cmp	r3, r2
 800722a:	d01d      	beq.n	8007268 <HAL_DMA_IRQHandler+0x194>
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	4a1f      	ldr	r2, [pc, #124]	@ (80072b0 <HAL_DMA_IRQHandler+0x1dc>)
 8007232:	4293      	cmp	r3, r2
 8007234:	d018      	beq.n	8007268 <HAL_DMA_IRQHandler+0x194>
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	4a1e      	ldr	r2, [pc, #120]	@ (80072b4 <HAL_DMA_IRQHandler+0x1e0>)
 800723c:	4293      	cmp	r3, r2
 800723e:	d013      	beq.n	8007268 <HAL_DMA_IRQHandler+0x194>
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	4a1c      	ldr	r2, [pc, #112]	@ (80072b8 <HAL_DMA_IRQHandler+0x1e4>)
 8007246:	4293      	cmp	r3, r2
 8007248:	d00e      	beq.n	8007268 <HAL_DMA_IRQHandler+0x194>
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	4a1b      	ldr	r2, [pc, #108]	@ (80072bc <HAL_DMA_IRQHandler+0x1e8>)
 8007250:	4293      	cmp	r3, r2
 8007252:	d009      	beq.n	8007268 <HAL_DMA_IRQHandler+0x194>
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	4a19      	ldr	r2, [pc, #100]	@ (80072c0 <HAL_DMA_IRQHandler+0x1ec>)
 800725a:	4293      	cmp	r3, r2
 800725c:	d004      	beq.n	8007268 <HAL_DMA_IRQHandler+0x194>
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	4a18      	ldr	r2, [pc, #96]	@ (80072c4 <HAL_DMA_IRQHandler+0x1f0>)
 8007264:	4293      	cmp	r3, r2
 8007266:	d12f      	bne.n	80072c8 <HAL_DMA_IRQHandler+0x1f4>
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	f003 0304 	and.w	r3, r3, #4
 8007272:	2b00      	cmp	r3, #0
 8007274:	bf14      	ite	ne
 8007276:	2301      	movne	r3, #1
 8007278:	2300      	moveq	r3, #0
 800727a:	b2db      	uxtb	r3, r3
 800727c:	e02e      	b.n	80072dc <HAL_DMA_IRQHandler+0x208>
 800727e:	bf00      	nop
 8007280:	24000058 	.word	0x24000058
 8007284:	1b4e81b5 	.word	0x1b4e81b5
 8007288:	40020010 	.word	0x40020010
 800728c:	40020028 	.word	0x40020028
 8007290:	40020040 	.word	0x40020040
 8007294:	40020058 	.word	0x40020058
 8007298:	40020070 	.word	0x40020070
 800729c:	40020088 	.word	0x40020088
 80072a0:	400200a0 	.word	0x400200a0
 80072a4:	400200b8 	.word	0x400200b8
 80072a8:	40020410 	.word	0x40020410
 80072ac:	40020428 	.word	0x40020428
 80072b0:	40020440 	.word	0x40020440
 80072b4:	40020458 	.word	0x40020458
 80072b8:	40020470 	.word	0x40020470
 80072bc:	40020488 	.word	0x40020488
 80072c0:	400204a0 	.word	0x400204a0
 80072c4:	400204b8 	.word	0x400204b8
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	f003 0308 	and.w	r3, r3, #8
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	bf14      	ite	ne
 80072d6:	2301      	movne	r3, #1
 80072d8:	2300      	moveq	r3, #0
 80072da:	b2db      	uxtb	r3, r3
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d015      	beq.n	800730c <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	681a      	ldr	r2, [r3, #0]
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	f022 0204 	bic.w	r2, r2, #4
 80072ee:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80072f4:	f003 031f 	and.w	r3, r3, #31
 80072f8:	2208      	movs	r2, #8
 80072fa:	409a      	lsls	r2, r3
 80072fc:	6a3b      	ldr	r3, [r7, #32]
 80072fe:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007304:	f043 0201 	orr.w	r2, r3, #1
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007310:	f003 031f 	and.w	r3, r3, #31
 8007314:	69ba      	ldr	r2, [r7, #24]
 8007316:	fa22 f303 	lsr.w	r3, r2, r3
 800731a:	f003 0301 	and.w	r3, r3, #1
 800731e:	2b00      	cmp	r3, #0
 8007320:	d06e      	beq.n	8007400 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	4a69      	ldr	r2, [pc, #420]	@ (80074cc <HAL_DMA_IRQHandler+0x3f8>)
 8007328:	4293      	cmp	r3, r2
 800732a:	d04a      	beq.n	80073c2 <HAL_DMA_IRQHandler+0x2ee>
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	4a67      	ldr	r2, [pc, #412]	@ (80074d0 <HAL_DMA_IRQHandler+0x3fc>)
 8007332:	4293      	cmp	r3, r2
 8007334:	d045      	beq.n	80073c2 <HAL_DMA_IRQHandler+0x2ee>
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	4a66      	ldr	r2, [pc, #408]	@ (80074d4 <HAL_DMA_IRQHandler+0x400>)
 800733c:	4293      	cmp	r3, r2
 800733e:	d040      	beq.n	80073c2 <HAL_DMA_IRQHandler+0x2ee>
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	4a64      	ldr	r2, [pc, #400]	@ (80074d8 <HAL_DMA_IRQHandler+0x404>)
 8007346:	4293      	cmp	r3, r2
 8007348:	d03b      	beq.n	80073c2 <HAL_DMA_IRQHandler+0x2ee>
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	4a63      	ldr	r2, [pc, #396]	@ (80074dc <HAL_DMA_IRQHandler+0x408>)
 8007350:	4293      	cmp	r3, r2
 8007352:	d036      	beq.n	80073c2 <HAL_DMA_IRQHandler+0x2ee>
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	4a61      	ldr	r2, [pc, #388]	@ (80074e0 <HAL_DMA_IRQHandler+0x40c>)
 800735a:	4293      	cmp	r3, r2
 800735c:	d031      	beq.n	80073c2 <HAL_DMA_IRQHandler+0x2ee>
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	4a60      	ldr	r2, [pc, #384]	@ (80074e4 <HAL_DMA_IRQHandler+0x410>)
 8007364:	4293      	cmp	r3, r2
 8007366:	d02c      	beq.n	80073c2 <HAL_DMA_IRQHandler+0x2ee>
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	4a5e      	ldr	r2, [pc, #376]	@ (80074e8 <HAL_DMA_IRQHandler+0x414>)
 800736e:	4293      	cmp	r3, r2
 8007370:	d027      	beq.n	80073c2 <HAL_DMA_IRQHandler+0x2ee>
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	4a5d      	ldr	r2, [pc, #372]	@ (80074ec <HAL_DMA_IRQHandler+0x418>)
 8007378:	4293      	cmp	r3, r2
 800737a:	d022      	beq.n	80073c2 <HAL_DMA_IRQHandler+0x2ee>
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	4a5b      	ldr	r2, [pc, #364]	@ (80074f0 <HAL_DMA_IRQHandler+0x41c>)
 8007382:	4293      	cmp	r3, r2
 8007384:	d01d      	beq.n	80073c2 <HAL_DMA_IRQHandler+0x2ee>
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	4a5a      	ldr	r2, [pc, #360]	@ (80074f4 <HAL_DMA_IRQHandler+0x420>)
 800738c:	4293      	cmp	r3, r2
 800738e:	d018      	beq.n	80073c2 <HAL_DMA_IRQHandler+0x2ee>
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	4a58      	ldr	r2, [pc, #352]	@ (80074f8 <HAL_DMA_IRQHandler+0x424>)
 8007396:	4293      	cmp	r3, r2
 8007398:	d013      	beq.n	80073c2 <HAL_DMA_IRQHandler+0x2ee>
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	4a57      	ldr	r2, [pc, #348]	@ (80074fc <HAL_DMA_IRQHandler+0x428>)
 80073a0:	4293      	cmp	r3, r2
 80073a2:	d00e      	beq.n	80073c2 <HAL_DMA_IRQHandler+0x2ee>
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	4a55      	ldr	r2, [pc, #340]	@ (8007500 <HAL_DMA_IRQHandler+0x42c>)
 80073aa:	4293      	cmp	r3, r2
 80073ac:	d009      	beq.n	80073c2 <HAL_DMA_IRQHandler+0x2ee>
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	4a54      	ldr	r2, [pc, #336]	@ (8007504 <HAL_DMA_IRQHandler+0x430>)
 80073b4:	4293      	cmp	r3, r2
 80073b6:	d004      	beq.n	80073c2 <HAL_DMA_IRQHandler+0x2ee>
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	4a52      	ldr	r2, [pc, #328]	@ (8007508 <HAL_DMA_IRQHandler+0x434>)
 80073be:	4293      	cmp	r3, r2
 80073c0:	d10a      	bne.n	80073d8 <HAL_DMA_IRQHandler+0x304>
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	695b      	ldr	r3, [r3, #20]
 80073c8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	bf14      	ite	ne
 80073d0:	2301      	movne	r3, #1
 80073d2:	2300      	moveq	r3, #0
 80073d4:	b2db      	uxtb	r3, r3
 80073d6:	e003      	b.n	80073e0 <HAL_DMA_IRQHandler+0x30c>
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	2300      	movs	r3, #0
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d00d      	beq.n	8007400 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80073e8:	f003 031f 	and.w	r3, r3, #31
 80073ec:	2201      	movs	r2, #1
 80073ee:	409a      	lsls	r2, r3
 80073f0:	6a3b      	ldr	r3, [r7, #32]
 80073f2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80073f8:	f043 0202 	orr.w	r2, r3, #2
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007404:	f003 031f 	and.w	r3, r3, #31
 8007408:	2204      	movs	r2, #4
 800740a:	409a      	lsls	r2, r3
 800740c:	69bb      	ldr	r3, [r7, #24]
 800740e:	4013      	ands	r3, r2
 8007410:	2b00      	cmp	r3, #0
 8007412:	f000 808f 	beq.w	8007534 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	4a2c      	ldr	r2, [pc, #176]	@ (80074cc <HAL_DMA_IRQHandler+0x3f8>)
 800741c:	4293      	cmp	r3, r2
 800741e:	d04a      	beq.n	80074b6 <HAL_DMA_IRQHandler+0x3e2>
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	4a2a      	ldr	r2, [pc, #168]	@ (80074d0 <HAL_DMA_IRQHandler+0x3fc>)
 8007426:	4293      	cmp	r3, r2
 8007428:	d045      	beq.n	80074b6 <HAL_DMA_IRQHandler+0x3e2>
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	4a29      	ldr	r2, [pc, #164]	@ (80074d4 <HAL_DMA_IRQHandler+0x400>)
 8007430:	4293      	cmp	r3, r2
 8007432:	d040      	beq.n	80074b6 <HAL_DMA_IRQHandler+0x3e2>
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	4a27      	ldr	r2, [pc, #156]	@ (80074d8 <HAL_DMA_IRQHandler+0x404>)
 800743a:	4293      	cmp	r3, r2
 800743c:	d03b      	beq.n	80074b6 <HAL_DMA_IRQHandler+0x3e2>
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	4a26      	ldr	r2, [pc, #152]	@ (80074dc <HAL_DMA_IRQHandler+0x408>)
 8007444:	4293      	cmp	r3, r2
 8007446:	d036      	beq.n	80074b6 <HAL_DMA_IRQHandler+0x3e2>
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	4a24      	ldr	r2, [pc, #144]	@ (80074e0 <HAL_DMA_IRQHandler+0x40c>)
 800744e:	4293      	cmp	r3, r2
 8007450:	d031      	beq.n	80074b6 <HAL_DMA_IRQHandler+0x3e2>
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	4a23      	ldr	r2, [pc, #140]	@ (80074e4 <HAL_DMA_IRQHandler+0x410>)
 8007458:	4293      	cmp	r3, r2
 800745a:	d02c      	beq.n	80074b6 <HAL_DMA_IRQHandler+0x3e2>
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	4a21      	ldr	r2, [pc, #132]	@ (80074e8 <HAL_DMA_IRQHandler+0x414>)
 8007462:	4293      	cmp	r3, r2
 8007464:	d027      	beq.n	80074b6 <HAL_DMA_IRQHandler+0x3e2>
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	4a20      	ldr	r2, [pc, #128]	@ (80074ec <HAL_DMA_IRQHandler+0x418>)
 800746c:	4293      	cmp	r3, r2
 800746e:	d022      	beq.n	80074b6 <HAL_DMA_IRQHandler+0x3e2>
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	4a1e      	ldr	r2, [pc, #120]	@ (80074f0 <HAL_DMA_IRQHandler+0x41c>)
 8007476:	4293      	cmp	r3, r2
 8007478:	d01d      	beq.n	80074b6 <HAL_DMA_IRQHandler+0x3e2>
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	4a1d      	ldr	r2, [pc, #116]	@ (80074f4 <HAL_DMA_IRQHandler+0x420>)
 8007480:	4293      	cmp	r3, r2
 8007482:	d018      	beq.n	80074b6 <HAL_DMA_IRQHandler+0x3e2>
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	4a1b      	ldr	r2, [pc, #108]	@ (80074f8 <HAL_DMA_IRQHandler+0x424>)
 800748a:	4293      	cmp	r3, r2
 800748c:	d013      	beq.n	80074b6 <HAL_DMA_IRQHandler+0x3e2>
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	4a1a      	ldr	r2, [pc, #104]	@ (80074fc <HAL_DMA_IRQHandler+0x428>)
 8007494:	4293      	cmp	r3, r2
 8007496:	d00e      	beq.n	80074b6 <HAL_DMA_IRQHandler+0x3e2>
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	4a18      	ldr	r2, [pc, #96]	@ (8007500 <HAL_DMA_IRQHandler+0x42c>)
 800749e:	4293      	cmp	r3, r2
 80074a0:	d009      	beq.n	80074b6 <HAL_DMA_IRQHandler+0x3e2>
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	4a17      	ldr	r2, [pc, #92]	@ (8007504 <HAL_DMA_IRQHandler+0x430>)
 80074a8:	4293      	cmp	r3, r2
 80074aa:	d004      	beq.n	80074b6 <HAL_DMA_IRQHandler+0x3e2>
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	4a15      	ldr	r2, [pc, #84]	@ (8007508 <HAL_DMA_IRQHandler+0x434>)
 80074b2:	4293      	cmp	r3, r2
 80074b4:	d12a      	bne.n	800750c <HAL_DMA_IRQHandler+0x438>
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	f003 0302 	and.w	r3, r3, #2
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	bf14      	ite	ne
 80074c4:	2301      	movne	r3, #1
 80074c6:	2300      	moveq	r3, #0
 80074c8:	b2db      	uxtb	r3, r3
 80074ca:	e023      	b.n	8007514 <HAL_DMA_IRQHandler+0x440>
 80074cc:	40020010 	.word	0x40020010
 80074d0:	40020028 	.word	0x40020028
 80074d4:	40020040 	.word	0x40020040
 80074d8:	40020058 	.word	0x40020058
 80074dc:	40020070 	.word	0x40020070
 80074e0:	40020088 	.word	0x40020088
 80074e4:	400200a0 	.word	0x400200a0
 80074e8:	400200b8 	.word	0x400200b8
 80074ec:	40020410 	.word	0x40020410
 80074f0:	40020428 	.word	0x40020428
 80074f4:	40020440 	.word	0x40020440
 80074f8:	40020458 	.word	0x40020458
 80074fc:	40020470 	.word	0x40020470
 8007500:	40020488 	.word	0x40020488
 8007504:	400204a0 	.word	0x400204a0
 8007508:	400204b8 	.word	0x400204b8
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	2300      	movs	r3, #0
 8007514:	2b00      	cmp	r3, #0
 8007516:	d00d      	beq.n	8007534 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800751c:	f003 031f 	and.w	r3, r3, #31
 8007520:	2204      	movs	r2, #4
 8007522:	409a      	lsls	r2, r3
 8007524:	6a3b      	ldr	r3, [r7, #32]
 8007526:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800752c:	f043 0204 	orr.w	r2, r3, #4
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007538:	f003 031f 	and.w	r3, r3, #31
 800753c:	2210      	movs	r2, #16
 800753e:	409a      	lsls	r2, r3
 8007540:	69bb      	ldr	r3, [r7, #24]
 8007542:	4013      	ands	r3, r2
 8007544:	2b00      	cmp	r3, #0
 8007546:	f000 80a6 	beq.w	8007696 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	4a85      	ldr	r2, [pc, #532]	@ (8007764 <HAL_DMA_IRQHandler+0x690>)
 8007550:	4293      	cmp	r3, r2
 8007552:	d04a      	beq.n	80075ea <HAL_DMA_IRQHandler+0x516>
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	4a83      	ldr	r2, [pc, #524]	@ (8007768 <HAL_DMA_IRQHandler+0x694>)
 800755a:	4293      	cmp	r3, r2
 800755c:	d045      	beq.n	80075ea <HAL_DMA_IRQHandler+0x516>
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	4a82      	ldr	r2, [pc, #520]	@ (800776c <HAL_DMA_IRQHandler+0x698>)
 8007564:	4293      	cmp	r3, r2
 8007566:	d040      	beq.n	80075ea <HAL_DMA_IRQHandler+0x516>
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	4a80      	ldr	r2, [pc, #512]	@ (8007770 <HAL_DMA_IRQHandler+0x69c>)
 800756e:	4293      	cmp	r3, r2
 8007570:	d03b      	beq.n	80075ea <HAL_DMA_IRQHandler+0x516>
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	4a7f      	ldr	r2, [pc, #508]	@ (8007774 <HAL_DMA_IRQHandler+0x6a0>)
 8007578:	4293      	cmp	r3, r2
 800757a:	d036      	beq.n	80075ea <HAL_DMA_IRQHandler+0x516>
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	4a7d      	ldr	r2, [pc, #500]	@ (8007778 <HAL_DMA_IRQHandler+0x6a4>)
 8007582:	4293      	cmp	r3, r2
 8007584:	d031      	beq.n	80075ea <HAL_DMA_IRQHandler+0x516>
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	4a7c      	ldr	r2, [pc, #496]	@ (800777c <HAL_DMA_IRQHandler+0x6a8>)
 800758c:	4293      	cmp	r3, r2
 800758e:	d02c      	beq.n	80075ea <HAL_DMA_IRQHandler+0x516>
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	4a7a      	ldr	r2, [pc, #488]	@ (8007780 <HAL_DMA_IRQHandler+0x6ac>)
 8007596:	4293      	cmp	r3, r2
 8007598:	d027      	beq.n	80075ea <HAL_DMA_IRQHandler+0x516>
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	4a79      	ldr	r2, [pc, #484]	@ (8007784 <HAL_DMA_IRQHandler+0x6b0>)
 80075a0:	4293      	cmp	r3, r2
 80075a2:	d022      	beq.n	80075ea <HAL_DMA_IRQHandler+0x516>
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	4a77      	ldr	r2, [pc, #476]	@ (8007788 <HAL_DMA_IRQHandler+0x6b4>)
 80075aa:	4293      	cmp	r3, r2
 80075ac:	d01d      	beq.n	80075ea <HAL_DMA_IRQHandler+0x516>
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	4a76      	ldr	r2, [pc, #472]	@ (800778c <HAL_DMA_IRQHandler+0x6b8>)
 80075b4:	4293      	cmp	r3, r2
 80075b6:	d018      	beq.n	80075ea <HAL_DMA_IRQHandler+0x516>
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	4a74      	ldr	r2, [pc, #464]	@ (8007790 <HAL_DMA_IRQHandler+0x6bc>)
 80075be:	4293      	cmp	r3, r2
 80075c0:	d013      	beq.n	80075ea <HAL_DMA_IRQHandler+0x516>
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	4a73      	ldr	r2, [pc, #460]	@ (8007794 <HAL_DMA_IRQHandler+0x6c0>)
 80075c8:	4293      	cmp	r3, r2
 80075ca:	d00e      	beq.n	80075ea <HAL_DMA_IRQHandler+0x516>
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	4a71      	ldr	r2, [pc, #452]	@ (8007798 <HAL_DMA_IRQHandler+0x6c4>)
 80075d2:	4293      	cmp	r3, r2
 80075d4:	d009      	beq.n	80075ea <HAL_DMA_IRQHandler+0x516>
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	4a70      	ldr	r2, [pc, #448]	@ (800779c <HAL_DMA_IRQHandler+0x6c8>)
 80075dc:	4293      	cmp	r3, r2
 80075de:	d004      	beq.n	80075ea <HAL_DMA_IRQHandler+0x516>
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	4a6e      	ldr	r2, [pc, #440]	@ (80077a0 <HAL_DMA_IRQHandler+0x6cc>)
 80075e6:	4293      	cmp	r3, r2
 80075e8:	d10a      	bne.n	8007600 <HAL_DMA_IRQHandler+0x52c>
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	f003 0308 	and.w	r3, r3, #8
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	bf14      	ite	ne
 80075f8:	2301      	movne	r3, #1
 80075fa:	2300      	moveq	r3, #0
 80075fc:	b2db      	uxtb	r3, r3
 80075fe:	e009      	b.n	8007614 <HAL_DMA_IRQHandler+0x540>
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	f003 0304 	and.w	r3, r3, #4
 800760a:	2b00      	cmp	r3, #0
 800760c:	bf14      	ite	ne
 800760e:	2301      	movne	r3, #1
 8007610:	2300      	moveq	r3, #0
 8007612:	b2db      	uxtb	r3, r3
 8007614:	2b00      	cmp	r3, #0
 8007616:	d03e      	beq.n	8007696 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800761c:	f003 031f 	and.w	r3, r3, #31
 8007620:	2210      	movs	r2, #16
 8007622:	409a      	lsls	r2, r3
 8007624:	6a3b      	ldr	r3, [r7, #32]
 8007626:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007632:	2b00      	cmp	r3, #0
 8007634:	d018      	beq.n	8007668 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007640:	2b00      	cmp	r3, #0
 8007642:	d108      	bne.n	8007656 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007648:	2b00      	cmp	r3, #0
 800764a:	d024      	beq.n	8007696 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007650:	6878      	ldr	r0, [r7, #4]
 8007652:	4798      	blx	r3
 8007654:	e01f      	b.n	8007696 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800765a:	2b00      	cmp	r3, #0
 800765c:	d01b      	beq.n	8007696 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007662:	6878      	ldr	r0, [r7, #4]
 8007664:	4798      	blx	r3
 8007666:	e016      	b.n	8007696 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007672:	2b00      	cmp	r3, #0
 8007674:	d107      	bne.n	8007686 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	681a      	ldr	r2, [r3, #0]
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	f022 0208 	bic.w	r2, r2, #8
 8007684:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800768a:	2b00      	cmp	r3, #0
 800768c:	d003      	beq.n	8007696 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007692:	6878      	ldr	r0, [r7, #4]
 8007694:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800769a:	f003 031f 	and.w	r3, r3, #31
 800769e:	2220      	movs	r2, #32
 80076a0:	409a      	lsls	r2, r3
 80076a2:	69bb      	ldr	r3, [r7, #24]
 80076a4:	4013      	ands	r3, r2
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	f000 8110 	beq.w	80078cc <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	4a2c      	ldr	r2, [pc, #176]	@ (8007764 <HAL_DMA_IRQHandler+0x690>)
 80076b2:	4293      	cmp	r3, r2
 80076b4:	d04a      	beq.n	800774c <HAL_DMA_IRQHandler+0x678>
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	4a2b      	ldr	r2, [pc, #172]	@ (8007768 <HAL_DMA_IRQHandler+0x694>)
 80076bc:	4293      	cmp	r3, r2
 80076be:	d045      	beq.n	800774c <HAL_DMA_IRQHandler+0x678>
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	4a29      	ldr	r2, [pc, #164]	@ (800776c <HAL_DMA_IRQHandler+0x698>)
 80076c6:	4293      	cmp	r3, r2
 80076c8:	d040      	beq.n	800774c <HAL_DMA_IRQHandler+0x678>
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	4a28      	ldr	r2, [pc, #160]	@ (8007770 <HAL_DMA_IRQHandler+0x69c>)
 80076d0:	4293      	cmp	r3, r2
 80076d2:	d03b      	beq.n	800774c <HAL_DMA_IRQHandler+0x678>
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	4a26      	ldr	r2, [pc, #152]	@ (8007774 <HAL_DMA_IRQHandler+0x6a0>)
 80076da:	4293      	cmp	r3, r2
 80076dc:	d036      	beq.n	800774c <HAL_DMA_IRQHandler+0x678>
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	4a25      	ldr	r2, [pc, #148]	@ (8007778 <HAL_DMA_IRQHandler+0x6a4>)
 80076e4:	4293      	cmp	r3, r2
 80076e6:	d031      	beq.n	800774c <HAL_DMA_IRQHandler+0x678>
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	4a23      	ldr	r2, [pc, #140]	@ (800777c <HAL_DMA_IRQHandler+0x6a8>)
 80076ee:	4293      	cmp	r3, r2
 80076f0:	d02c      	beq.n	800774c <HAL_DMA_IRQHandler+0x678>
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	4a22      	ldr	r2, [pc, #136]	@ (8007780 <HAL_DMA_IRQHandler+0x6ac>)
 80076f8:	4293      	cmp	r3, r2
 80076fa:	d027      	beq.n	800774c <HAL_DMA_IRQHandler+0x678>
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	4a20      	ldr	r2, [pc, #128]	@ (8007784 <HAL_DMA_IRQHandler+0x6b0>)
 8007702:	4293      	cmp	r3, r2
 8007704:	d022      	beq.n	800774c <HAL_DMA_IRQHandler+0x678>
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	4a1f      	ldr	r2, [pc, #124]	@ (8007788 <HAL_DMA_IRQHandler+0x6b4>)
 800770c:	4293      	cmp	r3, r2
 800770e:	d01d      	beq.n	800774c <HAL_DMA_IRQHandler+0x678>
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	4a1d      	ldr	r2, [pc, #116]	@ (800778c <HAL_DMA_IRQHandler+0x6b8>)
 8007716:	4293      	cmp	r3, r2
 8007718:	d018      	beq.n	800774c <HAL_DMA_IRQHandler+0x678>
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	4a1c      	ldr	r2, [pc, #112]	@ (8007790 <HAL_DMA_IRQHandler+0x6bc>)
 8007720:	4293      	cmp	r3, r2
 8007722:	d013      	beq.n	800774c <HAL_DMA_IRQHandler+0x678>
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	4a1a      	ldr	r2, [pc, #104]	@ (8007794 <HAL_DMA_IRQHandler+0x6c0>)
 800772a:	4293      	cmp	r3, r2
 800772c:	d00e      	beq.n	800774c <HAL_DMA_IRQHandler+0x678>
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	4a19      	ldr	r2, [pc, #100]	@ (8007798 <HAL_DMA_IRQHandler+0x6c4>)
 8007734:	4293      	cmp	r3, r2
 8007736:	d009      	beq.n	800774c <HAL_DMA_IRQHandler+0x678>
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	4a17      	ldr	r2, [pc, #92]	@ (800779c <HAL_DMA_IRQHandler+0x6c8>)
 800773e:	4293      	cmp	r3, r2
 8007740:	d004      	beq.n	800774c <HAL_DMA_IRQHandler+0x678>
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	4a16      	ldr	r2, [pc, #88]	@ (80077a0 <HAL_DMA_IRQHandler+0x6cc>)
 8007748:	4293      	cmp	r3, r2
 800774a:	d12b      	bne.n	80077a4 <HAL_DMA_IRQHandler+0x6d0>
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	f003 0310 	and.w	r3, r3, #16
 8007756:	2b00      	cmp	r3, #0
 8007758:	bf14      	ite	ne
 800775a:	2301      	movne	r3, #1
 800775c:	2300      	moveq	r3, #0
 800775e:	b2db      	uxtb	r3, r3
 8007760:	e02a      	b.n	80077b8 <HAL_DMA_IRQHandler+0x6e4>
 8007762:	bf00      	nop
 8007764:	40020010 	.word	0x40020010
 8007768:	40020028 	.word	0x40020028
 800776c:	40020040 	.word	0x40020040
 8007770:	40020058 	.word	0x40020058
 8007774:	40020070 	.word	0x40020070
 8007778:	40020088 	.word	0x40020088
 800777c:	400200a0 	.word	0x400200a0
 8007780:	400200b8 	.word	0x400200b8
 8007784:	40020410 	.word	0x40020410
 8007788:	40020428 	.word	0x40020428
 800778c:	40020440 	.word	0x40020440
 8007790:	40020458 	.word	0x40020458
 8007794:	40020470 	.word	0x40020470
 8007798:	40020488 	.word	0x40020488
 800779c:	400204a0 	.word	0x400204a0
 80077a0:	400204b8 	.word	0x400204b8
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	f003 0302 	and.w	r3, r3, #2
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	bf14      	ite	ne
 80077b2:	2301      	movne	r3, #1
 80077b4:	2300      	moveq	r3, #0
 80077b6:	b2db      	uxtb	r3, r3
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	f000 8087 	beq.w	80078cc <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80077c2:	f003 031f 	and.w	r3, r3, #31
 80077c6:	2220      	movs	r2, #32
 80077c8:	409a      	lsls	r2, r3
 80077ca:	6a3b      	ldr	r3, [r7, #32]
 80077cc:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80077d4:	b2db      	uxtb	r3, r3
 80077d6:	2b04      	cmp	r3, #4
 80077d8:	d139      	bne.n	800784e <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	681a      	ldr	r2, [r3, #0]
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	f022 0216 	bic.w	r2, r2, #22
 80077e8:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	695a      	ldr	r2, [r3, #20]
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80077f8:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d103      	bne.n	800780a <HAL_DMA_IRQHandler+0x736>
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007806:	2b00      	cmp	r3, #0
 8007808:	d007      	beq.n	800781a <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	681a      	ldr	r2, [r3, #0]
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	f022 0208 	bic.w	r2, r2, #8
 8007818:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800781e:	f003 031f 	and.w	r3, r3, #31
 8007822:	223f      	movs	r2, #63	@ 0x3f
 8007824:	409a      	lsls	r2, r3
 8007826:	6a3b      	ldr	r3, [r7, #32]
 8007828:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	2201      	movs	r2, #1
 800782e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	2200      	movs	r2, #0
 8007836:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800783e:	2b00      	cmp	r3, #0
 8007840:	f000 834a 	beq.w	8007ed8 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007848:	6878      	ldr	r0, [r7, #4]
 800784a:	4798      	blx	r3
          }
          return;
 800784c:	e344      	b.n	8007ed8 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007858:	2b00      	cmp	r3, #0
 800785a:	d018      	beq.n	800788e <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007866:	2b00      	cmp	r3, #0
 8007868:	d108      	bne.n	800787c <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800786e:	2b00      	cmp	r3, #0
 8007870:	d02c      	beq.n	80078cc <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007876:	6878      	ldr	r0, [r7, #4]
 8007878:	4798      	blx	r3
 800787a:	e027      	b.n	80078cc <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007880:	2b00      	cmp	r3, #0
 8007882:	d023      	beq.n	80078cc <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007888:	6878      	ldr	r0, [r7, #4]
 800788a:	4798      	blx	r3
 800788c:	e01e      	b.n	80078cc <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007898:	2b00      	cmp	r3, #0
 800789a:	d10f      	bne.n	80078bc <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	681a      	ldr	r2, [r3, #0]
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	f022 0210 	bic.w	r2, r2, #16
 80078aa:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	2201      	movs	r2, #1
 80078b0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	2200      	movs	r2, #0
 80078b8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d003      	beq.n	80078cc <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80078c8:	6878      	ldr	r0, [r7, #4]
 80078ca:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	f000 8306 	beq.w	8007ee2 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80078da:	f003 0301 	and.w	r3, r3, #1
 80078de:	2b00      	cmp	r3, #0
 80078e0:	f000 8088 	beq.w	80079f4 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	2204      	movs	r2, #4
 80078e8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	4a7a      	ldr	r2, [pc, #488]	@ (8007adc <HAL_DMA_IRQHandler+0xa08>)
 80078f2:	4293      	cmp	r3, r2
 80078f4:	d04a      	beq.n	800798c <HAL_DMA_IRQHandler+0x8b8>
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	4a79      	ldr	r2, [pc, #484]	@ (8007ae0 <HAL_DMA_IRQHandler+0xa0c>)
 80078fc:	4293      	cmp	r3, r2
 80078fe:	d045      	beq.n	800798c <HAL_DMA_IRQHandler+0x8b8>
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	4a77      	ldr	r2, [pc, #476]	@ (8007ae4 <HAL_DMA_IRQHandler+0xa10>)
 8007906:	4293      	cmp	r3, r2
 8007908:	d040      	beq.n	800798c <HAL_DMA_IRQHandler+0x8b8>
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	4a76      	ldr	r2, [pc, #472]	@ (8007ae8 <HAL_DMA_IRQHandler+0xa14>)
 8007910:	4293      	cmp	r3, r2
 8007912:	d03b      	beq.n	800798c <HAL_DMA_IRQHandler+0x8b8>
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	4a74      	ldr	r2, [pc, #464]	@ (8007aec <HAL_DMA_IRQHandler+0xa18>)
 800791a:	4293      	cmp	r3, r2
 800791c:	d036      	beq.n	800798c <HAL_DMA_IRQHandler+0x8b8>
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	4a73      	ldr	r2, [pc, #460]	@ (8007af0 <HAL_DMA_IRQHandler+0xa1c>)
 8007924:	4293      	cmp	r3, r2
 8007926:	d031      	beq.n	800798c <HAL_DMA_IRQHandler+0x8b8>
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	4a71      	ldr	r2, [pc, #452]	@ (8007af4 <HAL_DMA_IRQHandler+0xa20>)
 800792e:	4293      	cmp	r3, r2
 8007930:	d02c      	beq.n	800798c <HAL_DMA_IRQHandler+0x8b8>
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	4a70      	ldr	r2, [pc, #448]	@ (8007af8 <HAL_DMA_IRQHandler+0xa24>)
 8007938:	4293      	cmp	r3, r2
 800793a:	d027      	beq.n	800798c <HAL_DMA_IRQHandler+0x8b8>
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	4a6e      	ldr	r2, [pc, #440]	@ (8007afc <HAL_DMA_IRQHandler+0xa28>)
 8007942:	4293      	cmp	r3, r2
 8007944:	d022      	beq.n	800798c <HAL_DMA_IRQHandler+0x8b8>
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	4a6d      	ldr	r2, [pc, #436]	@ (8007b00 <HAL_DMA_IRQHandler+0xa2c>)
 800794c:	4293      	cmp	r3, r2
 800794e:	d01d      	beq.n	800798c <HAL_DMA_IRQHandler+0x8b8>
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	4a6b      	ldr	r2, [pc, #428]	@ (8007b04 <HAL_DMA_IRQHandler+0xa30>)
 8007956:	4293      	cmp	r3, r2
 8007958:	d018      	beq.n	800798c <HAL_DMA_IRQHandler+0x8b8>
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	4a6a      	ldr	r2, [pc, #424]	@ (8007b08 <HAL_DMA_IRQHandler+0xa34>)
 8007960:	4293      	cmp	r3, r2
 8007962:	d013      	beq.n	800798c <HAL_DMA_IRQHandler+0x8b8>
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	4a68      	ldr	r2, [pc, #416]	@ (8007b0c <HAL_DMA_IRQHandler+0xa38>)
 800796a:	4293      	cmp	r3, r2
 800796c:	d00e      	beq.n	800798c <HAL_DMA_IRQHandler+0x8b8>
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	4a67      	ldr	r2, [pc, #412]	@ (8007b10 <HAL_DMA_IRQHandler+0xa3c>)
 8007974:	4293      	cmp	r3, r2
 8007976:	d009      	beq.n	800798c <HAL_DMA_IRQHandler+0x8b8>
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	4a65      	ldr	r2, [pc, #404]	@ (8007b14 <HAL_DMA_IRQHandler+0xa40>)
 800797e:	4293      	cmp	r3, r2
 8007980:	d004      	beq.n	800798c <HAL_DMA_IRQHandler+0x8b8>
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	4a64      	ldr	r2, [pc, #400]	@ (8007b18 <HAL_DMA_IRQHandler+0xa44>)
 8007988:	4293      	cmp	r3, r2
 800798a:	d108      	bne.n	800799e <HAL_DMA_IRQHandler+0x8ca>
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	681a      	ldr	r2, [r3, #0]
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	f022 0201 	bic.w	r2, r2, #1
 800799a:	601a      	str	r2, [r3, #0]
 800799c:	e007      	b.n	80079ae <HAL_DMA_IRQHandler+0x8da>
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	681a      	ldr	r2, [r3, #0]
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	f022 0201 	bic.w	r2, r2, #1
 80079ac:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	3301      	adds	r3, #1
 80079b2:	60fb      	str	r3, [r7, #12]
 80079b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80079b6:	429a      	cmp	r2, r3
 80079b8:	d307      	bcc.n	80079ca <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	f003 0301 	and.w	r3, r3, #1
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d1f2      	bne.n	80079ae <HAL_DMA_IRQHandler+0x8da>
 80079c8:	e000      	b.n	80079cc <HAL_DMA_IRQHandler+0x8f8>
            break;
 80079ca:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	f003 0301 	and.w	r3, r3, #1
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d004      	beq.n	80079e4 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	2203      	movs	r2, #3
 80079de:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 80079e2:	e003      	b.n	80079ec <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	2201      	movs	r2, #1
 80079e8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	2200      	movs	r2, #0
 80079f0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	f000 8272 	beq.w	8007ee2 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007a02:	6878      	ldr	r0, [r7, #4]
 8007a04:	4798      	blx	r3
 8007a06:	e26c      	b.n	8007ee2 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	4a43      	ldr	r2, [pc, #268]	@ (8007b1c <HAL_DMA_IRQHandler+0xa48>)
 8007a0e:	4293      	cmp	r3, r2
 8007a10:	d022      	beq.n	8007a58 <HAL_DMA_IRQHandler+0x984>
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	4a42      	ldr	r2, [pc, #264]	@ (8007b20 <HAL_DMA_IRQHandler+0xa4c>)
 8007a18:	4293      	cmp	r3, r2
 8007a1a:	d01d      	beq.n	8007a58 <HAL_DMA_IRQHandler+0x984>
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	4a40      	ldr	r2, [pc, #256]	@ (8007b24 <HAL_DMA_IRQHandler+0xa50>)
 8007a22:	4293      	cmp	r3, r2
 8007a24:	d018      	beq.n	8007a58 <HAL_DMA_IRQHandler+0x984>
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	4a3f      	ldr	r2, [pc, #252]	@ (8007b28 <HAL_DMA_IRQHandler+0xa54>)
 8007a2c:	4293      	cmp	r3, r2
 8007a2e:	d013      	beq.n	8007a58 <HAL_DMA_IRQHandler+0x984>
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	4a3d      	ldr	r2, [pc, #244]	@ (8007b2c <HAL_DMA_IRQHandler+0xa58>)
 8007a36:	4293      	cmp	r3, r2
 8007a38:	d00e      	beq.n	8007a58 <HAL_DMA_IRQHandler+0x984>
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	4a3c      	ldr	r2, [pc, #240]	@ (8007b30 <HAL_DMA_IRQHandler+0xa5c>)
 8007a40:	4293      	cmp	r3, r2
 8007a42:	d009      	beq.n	8007a58 <HAL_DMA_IRQHandler+0x984>
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	4a3a      	ldr	r2, [pc, #232]	@ (8007b34 <HAL_DMA_IRQHandler+0xa60>)
 8007a4a:	4293      	cmp	r3, r2
 8007a4c:	d004      	beq.n	8007a58 <HAL_DMA_IRQHandler+0x984>
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	4a39      	ldr	r2, [pc, #228]	@ (8007b38 <HAL_DMA_IRQHandler+0xa64>)
 8007a54:	4293      	cmp	r3, r2
 8007a56:	d101      	bne.n	8007a5c <HAL_DMA_IRQHandler+0x988>
 8007a58:	2301      	movs	r3, #1
 8007a5a:	e000      	b.n	8007a5e <HAL_DMA_IRQHandler+0x98a>
 8007a5c:	2300      	movs	r3, #0
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	f000 823f 	beq.w	8007ee2 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007a70:	f003 031f 	and.w	r3, r3, #31
 8007a74:	2204      	movs	r2, #4
 8007a76:	409a      	lsls	r2, r3
 8007a78:	697b      	ldr	r3, [r7, #20]
 8007a7a:	4013      	ands	r3, r2
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	f000 80cd 	beq.w	8007c1c <HAL_DMA_IRQHandler+0xb48>
 8007a82:	693b      	ldr	r3, [r7, #16]
 8007a84:	f003 0304 	and.w	r3, r3, #4
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	f000 80c7 	beq.w	8007c1c <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007a92:	f003 031f 	and.w	r3, r3, #31
 8007a96:	2204      	movs	r2, #4
 8007a98:	409a      	lsls	r2, r3
 8007a9a:	69fb      	ldr	r3, [r7, #28]
 8007a9c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007a9e:	693b      	ldr	r3, [r7, #16]
 8007aa0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d049      	beq.n	8007b3c <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8007aa8:	693b      	ldr	r3, [r7, #16]
 8007aaa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d109      	bne.n	8007ac6 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	f000 8210 	beq.w	8007edc <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007ac0:	6878      	ldr	r0, [r7, #4]
 8007ac2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007ac4:	e20a      	b.n	8007edc <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	f000 8206 	beq.w	8007edc <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ad4:	6878      	ldr	r0, [r7, #4]
 8007ad6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007ad8:	e200      	b.n	8007edc <HAL_DMA_IRQHandler+0xe08>
 8007ada:	bf00      	nop
 8007adc:	40020010 	.word	0x40020010
 8007ae0:	40020028 	.word	0x40020028
 8007ae4:	40020040 	.word	0x40020040
 8007ae8:	40020058 	.word	0x40020058
 8007aec:	40020070 	.word	0x40020070
 8007af0:	40020088 	.word	0x40020088
 8007af4:	400200a0 	.word	0x400200a0
 8007af8:	400200b8 	.word	0x400200b8
 8007afc:	40020410 	.word	0x40020410
 8007b00:	40020428 	.word	0x40020428
 8007b04:	40020440 	.word	0x40020440
 8007b08:	40020458 	.word	0x40020458
 8007b0c:	40020470 	.word	0x40020470
 8007b10:	40020488 	.word	0x40020488
 8007b14:	400204a0 	.word	0x400204a0
 8007b18:	400204b8 	.word	0x400204b8
 8007b1c:	58025408 	.word	0x58025408
 8007b20:	5802541c 	.word	0x5802541c
 8007b24:	58025430 	.word	0x58025430
 8007b28:	58025444 	.word	0x58025444
 8007b2c:	58025458 	.word	0x58025458
 8007b30:	5802546c 	.word	0x5802546c
 8007b34:	58025480 	.word	0x58025480
 8007b38:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8007b3c:	693b      	ldr	r3, [r7, #16]
 8007b3e:	f003 0320 	and.w	r3, r3, #32
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d160      	bne.n	8007c08 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	4a7f      	ldr	r2, [pc, #508]	@ (8007d48 <HAL_DMA_IRQHandler+0xc74>)
 8007b4c:	4293      	cmp	r3, r2
 8007b4e:	d04a      	beq.n	8007be6 <HAL_DMA_IRQHandler+0xb12>
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	4a7d      	ldr	r2, [pc, #500]	@ (8007d4c <HAL_DMA_IRQHandler+0xc78>)
 8007b56:	4293      	cmp	r3, r2
 8007b58:	d045      	beq.n	8007be6 <HAL_DMA_IRQHandler+0xb12>
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	4a7c      	ldr	r2, [pc, #496]	@ (8007d50 <HAL_DMA_IRQHandler+0xc7c>)
 8007b60:	4293      	cmp	r3, r2
 8007b62:	d040      	beq.n	8007be6 <HAL_DMA_IRQHandler+0xb12>
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	4a7a      	ldr	r2, [pc, #488]	@ (8007d54 <HAL_DMA_IRQHandler+0xc80>)
 8007b6a:	4293      	cmp	r3, r2
 8007b6c:	d03b      	beq.n	8007be6 <HAL_DMA_IRQHandler+0xb12>
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	4a79      	ldr	r2, [pc, #484]	@ (8007d58 <HAL_DMA_IRQHandler+0xc84>)
 8007b74:	4293      	cmp	r3, r2
 8007b76:	d036      	beq.n	8007be6 <HAL_DMA_IRQHandler+0xb12>
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	4a77      	ldr	r2, [pc, #476]	@ (8007d5c <HAL_DMA_IRQHandler+0xc88>)
 8007b7e:	4293      	cmp	r3, r2
 8007b80:	d031      	beq.n	8007be6 <HAL_DMA_IRQHandler+0xb12>
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	4a76      	ldr	r2, [pc, #472]	@ (8007d60 <HAL_DMA_IRQHandler+0xc8c>)
 8007b88:	4293      	cmp	r3, r2
 8007b8a:	d02c      	beq.n	8007be6 <HAL_DMA_IRQHandler+0xb12>
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	4a74      	ldr	r2, [pc, #464]	@ (8007d64 <HAL_DMA_IRQHandler+0xc90>)
 8007b92:	4293      	cmp	r3, r2
 8007b94:	d027      	beq.n	8007be6 <HAL_DMA_IRQHandler+0xb12>
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	4a73      	ldr	r2, [pc, #460]	@ (8007d68 <HAL_DMA_IRQHandler+0xc94>)
 8007b9c:	4293      	cmp	r3, r2
 8007b9e:	d022      	beq.n	8007be6 <HAL_DMA_IRQHandler+0xb12>
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	4a71      	ldr	r2, [pc, #452]	@ (8007d6c <HAL_DMA_IRQHandler+0xc98>)
 8007ba6:	4293      	cmp	r3, r2
 8007ba8:	d01d      	beq.n	8007be6 <HAL_DMA_IRQHandler+0xb12>
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	4a70      	ldr	r2, [pc, #448]	@ (8007d70 <HAL_DMA_IRQHandler+0xc9c>)
 8007bb0:	4293      	cmp	r3, r2
 8007bb2:	d018      	beq.n	8007be6 <HAL_DMA_IRQHandler+0xb12>
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	4a6e      	ldr	r2, [pc, #440]	@ (8007d74 <HAL_DMA_IRQHandler+0xca0>)
 8007bba:	4293      	cmp	r3, r2
 8007bbc:	d013      	beq.n	8007be6 <HAL_DMA_IRQHandler+0xb12>
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	4a6d      	ldr	r2, [pc, #436]	@ (8007d78 <HAL_DMA_IRQHandler+0xca4>)
 8007bc4:	4293      	cmp	r3, r2
 8007bc6:	d00e      	beq.n	8007be6 <HAL_DMA_IRQHandler+0xb12>
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	4a6b      	ldr	r2, [pc, #428]	@ (8007d7c <HAL_DMA_IRQHandler+0xca8>)
 8007bce:	4293      	cmp	r3, r2
 8007bd0:	d009      	beq.n	8007be6 <HAL_DMA_IRQHandler+0xb12>
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	4a6a      	ldr	r2, [pc, #424]	@ (8007d80 <HAL_DMA_IRQHandler+0xcac>)
 8007bd8:	4293      	cmp	r3, r2
 8007bda:	d004      	beq.n	8007be6 <HAL_DMA_IRQHandler+0xb12>
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	4a68      	ldr	r2, [pc, #416]	@ (8007d84 <HAL_DMA_IRQHandler+0xcb0>)
 8007be2:	4293      	cmp	r3, r2
 8007be4:	d108      	bne.n	8007bf8 <HAL_DMA_IRQHandler+0xb24>
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	681a      	ldr	r2, [r3, #0]
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	f022 0208 	bic.w	r2, r2, #8
 8007bf4:	601a      	str	r2, [r3, #0]
 8007bf6:	e007      	b.n	8007c08 <HAL_DMA_IRQHandler+0xb34>
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	681a      	ldr	r2, [r3, #0]
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	f022 0204 	bic.w	r2, r2, #4
 8007c06:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	f000 8165 	beq.w	8007edc <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c16:	6878      	ldr	r0, [r7, #4]
 8007c18:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007c1a:	e15f      	b.n	8007edc <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007c20:	f003 031f 	and.w	r3, r3, #31
 8007c24:	2202      	movs	r2, #2
 8007c26:	409a      	lsls	r2, r3
 8007c28:	697b      	ldr	r3, [r7, #20]
 8007c2a:	4013      	ands	r3, r2
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	f000 80c5 	beq.w	8007dbc <HAL_DMA_IRQHandler+0xce8>
 8007c32:	693b      	ldr	r3, [r7, #16]
 8007c34:	f003 0302 	and.w	r3, r3, #2
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	f000 80bf 	beq.w	8007dbc <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007c42:	f003 031f 	and.w	r3, r3, #31
 8007c46:	2202      	movs	r2, #2
 8007c48:	409a      	lsls	r2, r3
 8007c4a:	69fb      	ldr	r3, [r7, #28]
 8007c4c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007c4e:	693b      	ldr	r3, [r7, #16]
 8007c50:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d018      	beq.n	8007c8a <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8007c58:	693b      	ldr	r3, [r7, #16]
 8007c5a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d109      	bne.n	8007c76 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	f000 813a 	beq.w	8007ee0 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007c70:	6878      	ldr	r0, [r7, #4]
 8007c72:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007c74:	e134      	b.n	8007ee0 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	f000 8130 	beq.w	8007ee0 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007c84:	6878      	ldr	r0, [r7, #4]
 8007c86:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007c88:	e12a      	b.n	8007ee0 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8007c8a:	693b      	ldr	r3, [r7, #16]
 8007c8c:	f003 0320 	and.w	r3, r3, #32
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	f040 8089 	bne.w	8007da8 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	4a2b      	ldr	r2, [pc, #172]	@ (8007d48 <HAL_DMA_IRQHandler+0xc74>)
 8007c9c:	4293      	cmp	r3, r2
 8007c9e:	d04a      	beq.n	8007d36 <HAL_DMA_IRQHandler+0xc62>
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	4a29      	ldr	r2, [pc, #164]	@ (8007d4c <HAL_DMA_IRQHandler+0xc78>)
 8007ca6:	4293      	cmp	r3, r2
 8007ca8:	d045      	beq.n	8007d36 <HAL_DMA_IRQHandler+0xc62>
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	4a28      	ldr	r2, [pc, #160]	@ (8007d50 <HAL_DMA_IRQHandler+0xc7c>)
 8007cb0:	4293      	cmp	r3, r2
 8007cb2:	d040      	beq.n	8007d36 <HAL_DMA_IRQHandler+0xc62>
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	4a26      	ldr	r2, [pc, #152]	@ (8007d54 <HAL_DMA_IRQHandler+0xc80>)
 8007cba:	4293      	cmp	r3, r2
 8007cbc:	d03b      	beq.n	8007d36 <HAL_DMA_IRQHandler+0xc62>
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	4a25      	ldr	r2, [pc, #148]	@ (8007d58 <HAL_DMA_IRQHandler+0xc84>)
 8007cc4:	4293      	cmp	r3, r2
 8007cc6:	d036      	beq.n	8007d36 <HAL_DMA_IRQHandler+0xc62>
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	4a23      	ldr	r2, [pc, #140]	@ (8007d5c <HAL_DMA_IRQHandler+0xc88>)
 8007cce:	4293      	cmp	r3, r2
 8007cd0:	d031      	beq.n	8007d36 <HAL_DMA_IRQHandler+0xc62>
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	4a22      	ldr	r2, [pc, #136]	@ (8007d60 <HAL_DMA_IRQHandler+0xc8c>)
 8007cd8:	4293      	cmp	r3, r2
 8007cda:	d02c      	beq.n	8007d36 <HAL_DMA_IRQHandler+0xc62>
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	4a20      	ldr	r2, [pc, #128]	@ (8007d64 <HAL_DMA_IRQHandler+0xc90>)
 8007ce2:	4293      	cmp	r3, r2
 8007ce4:	d027      	beq.n	8007d36 <HAL_DMA_IRQHandler+0xc62>
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	4a1f      	ldr	r2, [pc, #124]	@ (8007d68 <HAL_DMA_IRQHandler+0xc94>)
 8007cec:	4293      	cmp	r3, r2
 8007cee:	d022      	beq.n	8007d36 <HAL_DMA_IRQHandler+0xc62>
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	4a1d      	ldr	r2, [pc, #116]	@ (8007d6c <HAL_DMA_IRQHandler+0xc98>)
 8007cf6:	4293      	cmp	r3, r2
 8007cf8:	d01d      	beq.n	8007d36 <HAL_DMA_IRQHandler+0xc62>
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	4a1c      	ldr	r2, [pc, #112]	@ (8007d70 <HAL_DMA_IRQHandler+0xc9c>)
 8007d00:	4293      	cmp	r3, r2
 8007d02:	d018      	beq.n	8007d36 <HAL_DMA_IRQHandler+0xc62>
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	4a1a      	ldr	r2, [pc, #104]	@ (8007d74 <HAL_DMA_IRQHandler+0xca0>)
 8007d0a:	4293      	cmp	r3, r2
 8007d0c:	d013      	beq.n	8007d36 <HAL_DMA_IRQHandler+0xc62>
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	4a19      	ldr	r2, [pc, #100]	@ (8007d78 <HAL_DMA_IRQHandler+0xca4>)
 8007d14:	4293      	cmp	r3, r2
 8007d16:	d00e      	beq.n	8007d36 <HAL_DMA_IRQHandler+0xc62>
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	4a17      	ldr	r2, [pc, #92]	@ (8007d7c <HAL_DMA_IRQHandler+0xca8>)
 8007d1e:	4293      	cmp	r3, r2
 8007d20:	d009      	beq.n	8007d36 <HAL_DMA_IRQHandler+0xc62>
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	4a16      	ldr	r2, [pc, #88]	@ (8007d80 <HAL_DMA_IRQHandler+0xcac>)
 8007d28:	4293      	cmp	r3, r2
 8007d2a:	d004      	beq.n	8007d36 <HAL_DMA_IRQHandler+0xc62>
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	4a14      	ldr	r2, [pc, #80]	@ (8007d84 <HAL_DMA_IRQHandler+0xcb0>)
 8007d32:	4293      	cmp	r3, r2
 8007d34:	d128      	bne.n	8007d88 <HAL_DMA_IRQHandler+0xcb4>
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	681a      	ldr	r2, [r3, #0]
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	f022 0214 	bic.w	r2, r2, #20
 8007d44:	601a      	str	r2, [r3, #0]
 8007d46:	e027      	b.n	8007d98 <HAL_DMA_IRQHandler+0xcc4>
 8007d48:	40020010 	.word	0x40020010
 8007d4c:	40020028 	.word	0x40020028
 8007d50:	40020040 	.word	0x40020040
 8007d54:	40020058 	.word	0x40020058
 8007d58:	40020070 	.word	0x40020070
 8007d5c:	40020088 	.word	0x40020088
 8007d60:	400200a0 	.word	0x400200a0
 8007d64:	400200b8 	.word	0x400200b8
 8007d68:	40020410 	.word	0x40020410
 8007d6c:	40020428 	.word	0x40020428
 8007d70:	40020440 	.word	0x40020440
 8007d74:	40020458 	.word	0x40020458
 8007d78:	40020470 	.word	0x40020470
 8007d7c:	40020488 	.word	0x40020488
 8007d80:	400204a0 	.word	0x400204a0
 8007d84:	400204b8 	.word	0x400204b8
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	681a      	ldr	r2, [r3, #0]
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	f022 020a 	bic.w	r2, r2, #10
 8007d96:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	2201      	movs	r2, #1
 8007d9c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	2200      	movs	r2, #0
 8007da4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	f000 8097 	beq.w	8007ee0 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007db6:	6878      	ldr	r0, [r7, #4]
 8007db8:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007dba:	e091      	b.n	8007ee0 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007dc0:	f003 031f 	and.w	r3, r3, #31
 8007dc4:	2208      	movs	r2, #8
 8007dc6:	409a      	lsls	r2, r3
 8007dc8:	697b      	ldr	r3, [r7, #20]
 8007dca:	4013      	ands	r3, r2
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	f000 8088 	beq.w	8007ee2 <HAL_DMA_IRQHandler+0xe0e>
 8007dd2:	693b      	ldr	r3, [r7, #16]
 8007dd4:	f003 0308 	and.w	r3, r3, #8
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	f000 8082 	beq.w	8007ee2 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	4a41      	ldr	r2, [pc, #260]	@ (8007ee8 <HAL_DMA_IRQHandler+0xe14>)
 8007de4:	4293      	cmp	r3, r2
 8007de6:	d04a      	beq.n	8007e7e <HAL_DMA_IRQHandler+0xdaa>
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	4a3f      	ldr	r2, [pc, #252]	@ (8007eec <HAL_DMA_IRQHandler+0xe18>)
 8007dee:	4293      	cmp	r3, r2
 8007df0:	d045      	beq.n	8007e7e <HAL_DMA_IRQHandler+0xdaa>
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	4a3e      	ldr	r2, [pc, #248]	@ (8007ef0 <HAL_DMA_IRQHandler+0xe1c>)
 8007df8:	4293      	cmp	r3, r2
 8007dfa:	d040      	beq.n	8007e7e <HAL_DMA_IRQHandler+0xdaa>
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	4a3c      	ldr	r2, [pc, #240]	@ (8007ef4 <HAL_DMA_IRQHandler+0xe20>)
 8007e02:	4293      	cmp	r3, r2
 8007e04:	d03b      	beq.n	8007e7e <HAL_DMA_IRQHandler+0xdaa>
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	4a3b      	ldr	r2, [pc, #236]	@ (8007ef8 <HAL_DMA_IRQHandler+0xe24>)
 8007e0c:	4293      	cmp	r3, r2
 8007e0e:	d036      	beq.n	8007e7e <HAL_DMA_IRQHandler+0xdaa>
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	4a39      	ldr	r2, [pc, #228]	@ (8007efc <HAL_DMA_IRQHandler+0xe28>)
 8007e16:	4293      	cmp	r3, r2
 8007e18:	d031      	beq.n	8007e7e <HAL_DMA_IRQHandler+0xdaa>
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	4a38      	ldr	r2, [pc, #224]	@ (8007f00 <HAL_DMA_IRQHandler+0xe2c>)
 8007e20:	4293      	cmp	r3, r2
 8007e22:	d02c      	beq.n	8007e7e <HAL_DMA_IRQHandler+0xdaa>
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	4a36      	ldr	r2, [pc, #216]	@ (8007f04 <HAL_DMA_IRQHandler+0xe30>)
 8007e2a:	4293      	cmp	r3, r2
 8007e2c:	d027      	beq.n	8007e7e <HAL_DMA_IRQHandler+0xdaa>
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	4a35      	ldr	r2, [pc, #212]	@ (8007f08 <HAL_DMA_IRQHandler+0xe34>)
 8007e34:	4293      	cmp	r3, r2
 8007e36:	d022      	beq.n	8007e7e <HAL_DMA_IRQHandler+0xdaa>
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	4a33      	ldr	r2, [pc, #204]	@ (8007f0c <HAL_DMA_IRQHandler+0xe38>)
 8007e3e:	4293      	cmp	r3, r2
 8007e40:	d01d      	beq.n	8007e7e <HAL_DMA_IRQHandler+0xdaa>
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	4a32      	ldr	r2, [pc, #200]	@ (8007f10 <HAL_DMA_IRQHandler+0xe3c>)
 8007e48:	4293      	cmp	r3, r2
 8007e4a:	d018      	beq.n	8007e7e <HAL_DMA_IRQHandler+0xdaa>
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	4a30      	ldr	r2, [pc, #192]	@ (8007f14 <HAL_DMA_IRQHandler+0xe40>)
 8007e52:	4293      	cmp	r3, r2
 8007e54:	d013      	beq.n	8007e7e <HAL_DMA_IRQHandler+0xdaa>
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	4a2f      	ldr	r2, [pc, #188]	@ (8007f18 <HAL_DMA_IRQHandler+0xe44>)
 8007e5c:	4293      	cmp	r3, r2
 8007e5e:	d00e      	beq.n	8007e7e <HAL_DMA_IRQHandler+0xdaa>
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	4a2d      	ldr	r2, [pc, #180]	@ (8007f1c <HAL_DMA_IRQHandler+0xe48>)
 8007e66:	4293      	cmp	r3, r2
 8007e68:	d009      	beq.n	8007e7e <HAL_DMA_IRQHandler+0xdaa>
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	4a2c      	ldr	r2, [pc, #176]	@ (8007f20 <HAL_DMA_IRQHandler+0xe4c>)
 8007e70:	4293      	cmp	r3, r2
 8007e72:	d004      	beq.n	8007e7e <HAL_DMA_IRQHandler+0xdaa>
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	4a2a      	ldr	r2, [pc, #168]	@ (8007f24 <HAL_DMA_IRQHandler+0xe50>)
 8007e7a:	4293      	cmp	r3, r2
 8007e7c:	d108      	bne.n	8007e90 <HAL_DMA_IRQHandler+0xdbc>
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	681a      	ldr	r2, [r3, #0]
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	f022 021c 	bic.w	r2, r2, #28
 8007e8c:	601a      	str	r2, [r3, #0]
 8007e8e:	e007      	b.n	8007ea0 <HAL_DMA_IRQHandler+0xdcc>
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	681a      	ldr	r2, [r3, #0]
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	f022 020e 	bic.w	r2, r2, #14
 8007e9e:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007ea4:	f003 031f 	and.w	r3, r3, #31
 8007ea8:	2201      	movs	r2, #1
 8007eaa:	409a      	lsls	r2, r3
 8007eac:	69fb      	ldr	r3, [r7, #28]
 8007eae:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	2201      	movs	r2, #1
 8007eb4:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	2201      	movs	r2, #1
 8007eba:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	2200      	movs	r2, #0
 8007ec2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d009      	beq.n	8007ee2 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007ed2:	6878      	ldr	r0, [r7, #4]
 8007ed4:	4798      	blx	r3
 8007ed6:	e004      	b.n	8007ee2 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8007ed8:	bf00      	nop
 8007eda:	e002      	b.n	8007ee2 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007edc:	bf00      	nop
 8007ede:	e000      	b.n	8007ee2 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007ee0:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8007ee2:	3728      	adds	r7, #40	@ 0x28
 8007ee4:	46bd      	mov	sp, r7
 8007ee6:	bd80      	pop	{r7, pc}
 8007ee8:	40020010 	.word	0x40020010
 8007eec:	40020028 	.word	0x40020028
 8007ef0:	40020040 	.word	0x40020040
 8007ef4:	40020058 	.word	0x40020058
 8007ef8:	40020070 	.word	0x40020070
 8007efc:	40020088 	.word	0x40020088
 8007f00:	400200a0 	.word	0x400200a0
 8007f04:	400200b8 	.word	0x400200b8
 8007f08:	40020410 	.word	0x40020410
 8007f0c:	40020428 	.word	0x40020428
 8007f10:	40020440 	.word	0x40020440
 8007f14:	40020458 	.word	0x40020458
 8007f18:	40020470 	.word	0x40020470
 8007f1c:	40020488 	.word	0x40020488
 8007f20:	400204a0 	.word	0x400204a0
 8007f24:	400204b8 	.word	0x400204b8

08007f28 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8007f28:	b480      	push	{r7}
 8007f2a:	b083      	sub	sp, #12
 8007f2c:	af00      	add	r7, sp, #0
 8007f2e:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8007f34:	4618      	mov	r0, r3
 8007f36:	370c      	adds	r7, #12
 8007f38:	46bd      	mov	sp, r7
 8007f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f3e:	4770      	bx	lr

08007f40 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007f40:	b480      	push	{r7}
 8007f42:	b087      	sub	sp, #28
 8007f44:	af00      	add	r7, sp, #0
 8007f46:	60f8      	str	r0, [r7, #12]
 8007f48:	60b9      	str	r1, [r7, #8]
 8007f4a:	607a      	str	r2, [r7, #4]
 8007f4c:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007f52:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007f58:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	4a7f      	ldr	r2, [pc, #508]	@ (800815c <DMA_SetConfig+0x21c>)
 8007f60:	4293      	cmp	r3, r2
 8007f62:	d072      	beq.n	800804a <DMA_SetConfig+0x10a>
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	4a7d      	ldr	r2, [pc, #500]	@ (8008160 <DMA_SetConfig+0x220>)
 8007f6a:	4293      	cmp	r3, r2
 8007f6c:	d06d      	beq.n	800804a <DMA_SetConfig+0x10a>
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	4a7c      	ldr	r2, [pc, #496]	@ (8008164 <DMA_SetConfig+0x224>)
 8007f74:	4293      	cmp	r3, r2
 8007f76:	d068      	beq.n	800804a <DMA_SetConfig+0x10a>
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	4a7a      	ldr	r2, [pc, #488]	@ (8008168 <DMA_SetConfig+0x228>)
 8007f7e:	4293      	cmp	r3, r2
 8007f80:	d063      	beq.n	800804a <DMA_SetConfig+0x10a>
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	4a79      	ldr	r2, [pc, #484]	@ (800816c <DMA_SetConfig+0x22c>)
 8007f88:	4293      	cmp	r3, r2
 8007f8a:	d05e      	beq.n	800804a <DMA_SetConfig+0x10a>
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	4a77      	ldr	r2, [pc, #476]	@ (8008170 <DMA_SetConfig+0x230>)
 8007f92:	4293      	cmp	r3, r2
 8007f94:	d059      	beq.n	800804a <DMA_SetConfig+0x10a>
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	4a76      	ldr	r2, [pc, #472]	@ (8008174 <DMA_SetConfig+0x234>)
 8007f9c:	4293      	cmp	r3, r2
 8007f9e:	d054      	beq.n	800804a <DMA_SetConfig+0x10a>
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	4a74      	ldr	r2, [pc, #464]	@ (8008178 <DMA_SetConfig+0x238>)
 8007fa6:	4293      	cmp	r3, r2
 8007fa8:	d04f      	beq.n	800804a <DMA_SetConfig+0x10a>
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	4a73      	ldr	r2, [pc, #460]	@ (800817c <DMA_SetConfig+0x23c>)
 8007fb0:	4293      	cmp	r3, r2
 8007fb2:	d04a      	beq.n	800804a <DMA_SetConfig+0x10a>
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	4a71      	ldr	r2, [pc, #452]	@ (8008180 <DMA_SetConfig+0x240>)
 8007fba:	4293      	cmp	r3, r2
 8007fbc:	d045      	beq.n	800804a <DMA_SetConfig+0x10a>
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	4a70      	ldr	r2, [pc, #448]	@ (8008184 <DMA_SetConfig+0x244>)
 8007fc4:	4293      	cmp	r3, r2
 8007fc6:	d040      	beq.n	800804a <DMA_SetConfig+0x10a>
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	4a6e      	ldr	r2, [pc, #440]	@ (8008188 <DMA_SetConfig+0x248>)
 8007fce:	4293      	cmp	r3, r2
 8007fd0:	d03b      	beq.n	800804a <DMA_SetConfig+0x10a>
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	4a6d      	ldr	r2, [pc, #436]	@ (800818c <DMA_SetConfig+0x24c>)
 8007fd8:	4293      	cmp	r3, r2
 8007fda:	d036      	beq.n	800804a <DMA_SetConfig+0x10a>
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	4a6b      	ldr	r2, [pc, #428]	@ (8008190 <DMA_SetConfig+0x250>)
 8007fe2:	4293      	cmp	r3, r2
 8007fe4:	d031      	beq.n	800804a <DMA_SetConfig+0x10a>
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	4a6a      	ldr	r2, [pc, #424]	@ (8008194 <DMA_SetConfig+0x254>)
 8007fec:	4293      	cmp	r3, r2
 8007fee:	d02c      	beq.n	800804a <DMA_SetConfig+0x10a>
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	4a68      	ldr	r2, [pc, #416]	@ (8008198 <DMA_SetConfig+0x258>)
 8007ff6:	4293      	cmp	r3, r2
 8007ff8:	d027      	beq.n	800804a <DMA_SetConfig+0x10a>
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	4a67      	ldr	r2, [pc, #412]	@ (800819c <DMA_SetConfig+0x25c>)
 8008000:	4293      	cmp	r3, r2
 8008002:	d022      	beq.n	800804a <DMA_SetConfig+0x10a>
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	4a65      	ldr	r2, [pc, #404]	@ (80081a0 <DMA_SetConfig+0x260>)
 800800a:	4293      	cmp	r3, r2
 800800c:	d01d      	beq.n	800804a <DMA_SetConfig+0x10a>
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	4a64      	ldr	r2, [pc, #400]	@ (80081a4 <DMA_SetConfig+0x264>)
 8008014:	4293      	cmp	r3, r2
 8008016:	d018      	beq.n	800804a <DMA_SetConfig+0x10a>
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	4a62      	ldr	r2, [pc, #392]	@ (80081a8 <DMA_SetConfig+0x268>)
 800801e:	4293      	cmp	r3, r2
 8008020:	d013      	beq.n	800804a <DMA_SetConfig+0x10a>
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	4a61      	ldr	r2, [pc, #388]	@ (80081ac <DMA_SetConfig+0x26c>)
 8008028:	4293      	cmp	r3, r2
 800802a:	d00e      	beq.n	800804a <DMA_SetConfig+0x10a>
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	4a5f      	ldr	r2, [pc, #380]	@ (80081b0 <DMA_SetConfig+0x270>)
 8008032:	4293      	cmp	r3, r2
 8008034:	d009      	beq.n	800804a <DMA_SetConfig+0x10a>
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	4a5e      	ldr	r2, [pc, #376]	@ (80081b4 <DMA_SetConfig+0x274>)
 800803c:	4293      	cmp	r3, r2
 800803e:	d004      	beq.n	800804a <DMA_SetConfig+0x10a>
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	4a5c      	ldr	r2, [pc, #368]	@ (80081b8 <DMA_SetConfig+0x278>)
 8008046:	4293      	cmp	r3, r2
 8008048:	d101      	bne.n	800804e <DMA_SetConfig+0x10e>
 800804a:	2301      	movs	r3, #1
 800804c:	e000      	b.n	8008050 <DMA_SetConfig+0x110>
 800804e:	2300      	movs	r3, #0
 8008050:	2b00      	cmp	r3, #0
 8008052:	d00d      	beq.n	8008070 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008058:	68fa      	ldr	r2, [r7, #12]
 800805a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800805c:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008062:	2b00      	cmp	r3, #0
 8008064:	d004      	beq.n	8008070 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800806a:	68fa      	ldr	r2, [r7, #12]
 800806c:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800806e:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	4a39      	ldr	r2, [pc, #228]	@ (800815c <DMA_SetConfig+0x21c>)
 8008076:	4293      	cmp	r3, r2
 8008078:	d04a      	beq.n	8008110 <DMA_SetConfig+0x1d0>
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	4a38      	ldr	r2, [pc, #224]	@ (8008160 <DMA_SetConfig+0x220>)
 8008080:	4293      	cmp	r3, r2
 8008082:	d045      	beq.n	8008110 <DMA_SetConfig+0x1d0>
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	4a36      	ldr	r2, [pc, #216]	@ (8008164 <DMA_SetConfig+0x224>)
 800808a:	4293      	cmp	r3, r2
 800808c:	d040      	beq.n	8008110 <DMA_SetConfig+0x1d0>
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	4a35      	ldr	r2, [pc, #212]	@ (8008168 <DMA_SetConfig+0x228>)
 8008094:	4293      	cmp	r3, r2
 8008096:	d03b      	beq.n	8008110 <DMA_SetConfig+0x1d0>
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	4a33      	ldr	r2, [pc, #204]	@ (800816c <DMA_SetConfig+0x22c>)
 800809e:	4293      	cmp	r3, r2
 80080a0:	d036      	beq.n	8008110 <DMA_SetConfig+0x1d0>
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	4a32      	ldr	r2, [pc, #200]	@ (8008170 <DMA_SetConfig+0x230>)
 80080a8:	4293      	cmp	r3, r2
 80080aa:	d031      	beq.n	8008110 <DMA_SetConfig+0x1d0>
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	4a30      	ldr	r2, [pc, #192]	@ (8008174 <DMA_SetConfig+0x234>)
 80080b2:	4293      	cmp	r3, r2
 80080b4:	d02c      	beq.n	8008110 <DMA_SetConfig+0x1d0>
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	4a2f      	ldr	r2, [pc, #188]	@ (8008178 <DMA_SetConfig+0x238>)
 80080bc:	4293      	cmp	r3, r2
 80080be:	d027      	beq.n	8008110 <DMA_SetConfig+0x1d0>
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	4a2d      	ldr	r2, [pc, #180]	@ (800817c <DMA_SetConfig+0x23c>)
 80080c6:	4293      	cmp	r3, r2
 80080c8:	d022      	beq.n	8008110 <DMA_SetConfig+0x1d0>
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	4a2c      	ldr	r2, [pc, #176]	@ (8008180 <DMA_SetConfig+0x240>)
 80080d0:	4293      	cmp	r3, r2
 80080d2:	d01d      	beq.n	8008110 <DMA_SetConfig+0x1d0>
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	4a2a      	ldr	r2, [pc, #168]	@ (8008184 <DMA_SetConfig+0x244>)
 80080da:	4293      	cmp	r3, r2
 80080dc:	d018      	beq.n	8008110 <DMA_SetConfig+0x1d0>
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	4a29      	ldr	r2, [pc, #164]	@ (8008188 <DMA_SetConfig+0x248>)
 80080e4:	4293      	cmp	r3, r2
 80080e6:	d013      	beq.n	8008110 <DMA_SetConfig+0x1d0>
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	4a27      	ldr	r2, [pc, #156]	@ (800818c <DMA_SetConfig+0x24c>)
 80080ee:	4293      	cmp	r3, r2
 80080f0:	d00e      	beq.n	8008110 <DMA_SetConfig+0x1d0>
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	4a26      	ldr	r2, [pc, #152]	@ (8008190 <DMA_SetConfig+0x250>)
 80080f8:	4293      	cmp	r3, r2
 80080fa:	d009      	beq.n	8008110 <DMA_SetConfig+0x1d0>
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	4a24      	ldr	r2, [pc, #144]	@ (8008194 <DMA_SetConfig+0x254>)
 8008102:	4293      	cmp	r3, r2
 8008104:	d004      	beq.n	8008110 <DMA_SetConfig+0x1d0>
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	4a23      	ldr	r2, [pc, #140]	@ (8008198 <DMA_SetConfig+0x258>)
 800810c:	4293      	cmp	r3, r2
 800810e:	d101      	bne.n	8008114 <DMA_SetConfig+0x1d4>
 8008110:	2301      	movs	r3, #1
 8008112:	e000      	b.n	8008116 <DMA_SetConfig+0x1d6>
 8008114:	2300      	movs	r3, #0
 8008116:	2b00      	cmp	r3, #0
 8008118:	d059      	beq.n	80081ce <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800811e:	f003 031f 	and.w	r3, r3, #31
 8008122:	223f      	movs	r2, #63	@ 0x3f
 8008124:	409a      	lsls	r2, r3
 8008126:	697b      	ldr	r3, [r7, #20]
 8008128:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	681a      	ldr	r2, [r3, #0]
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8008138:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	683a      	ldr	r2, [r7, #0]
 8008140:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	689b      	ldr	r3, [r3, #8]
 8008146:	2b40      	cmp	r3, #64	@ 0x40
 8008148:	d138      	bne.n	80081bc <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	687a      	ldr	r2, [r7, #4]
 8008150:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	68ba      	ldr	r2, [r7, #8]
 8008158:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800815a:	e086      	b.n	800826a <DMA_SetConfig+0x32a>
 800815c:	40020010 	.word	0x40020010
 8008160:	40020028 	.word	0x40020028
 8008164:	40020040 	.word	0x40020040
 8008168:	40020058 	.word	0x40020058
 800816c:	40020070 	.word	0x40020070
 8008170:	40020088 	.word	0x40020088
 8008174:	400200a0 	.word	0x400200a0
 8008178:	400200b8 	.word	0x400200b8
 800817c:	40020410 	.word	0x40020410
 8008180:	40020428 	.word	0x40020428
 8008184:	40020440 	.word	0x40020440
 8008188:	40020458 	.word	0x40020458
 800818c:	40020470 	.word	0x40020470
 8008190:	40020488 	.word	0x40020488
 8008194:	400204a0 	.word	0x400204a0
 8008198:	400204b8 	.word	0x400204b8
 800819c:	58025408 	.word	0x58025408
 80081a0:	5802541c 	.word	0x5802541c
 80081a4:	58025430 	.word	0x58025430
 80081a8:	58025444 	.word	0x58025444
 80081ac:	58025458 	.word	0x58025458
 80081b0:	5802546c 	.word	0x5802546c
 80081b4:	58025480 	.word	0x58025480
 80081b8:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	68ba      	ldr	r2, [r7, #8]
 80081c2:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	687a      	ldr	r2, [r7, #4]
 80081ca:	60da      	str	r2, [r3, #12]
}
 80081cc:	e04d      	b.n	800826a <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	4a29      	ldr	r2, [pc, #164]	@ (8008278 <DMA_SetConfig+0x338>)
 80081d4:	4293      	cmp	r3, r2
 80081d6:	d022      	beq.n	800821e <DMA_SetConfig+0x2de>
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	4a27      	ldr	r2, [pc, #156]	@ (800827c <DMA_SetConfig+0x33c>)
 80081de:	4293      	cmp	r3, r2
 80081e0:	d01d      	beq.n	800821e <DMA_SetConfig+0x2de>
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	4a26      	ldr	r2, [pc, #152]	@ (8008280 <DMA_SetConfig+0x340>)
 80081e8:	4293      	cmp	r3, r2
 80081ea:	d018      	beq.n	800821e <DMA_SetConfig+0x2de>
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	4a24      	ldr	r2, [pc, #144]	@ (8008284 <DMA_SetConfig+0x344>)
 80081f2:	4293      	cmp	r3, r2
 80081f4:	d013      	beq.n	800821e <DMA_SetConfig+0x2de>
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	4a23      	ldr	r2, [pc, #140]	@ (8008288 <DMA_SetConfig+0x348>)
 80081fc:	4293      	cmp	r3, r2
 80081fe:	d00e      	beq.n	800821e <DMA_SetConfig+0x2de>
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	4a21      	ldr	r2, [pc, #132]	@ (800828c <DMA_SetConfig+0x34c>)
 8008206:	4293      	cmp	r3, r2
 8008208:	d009      	beq.n	800821e <DMA_SetConfig+0x2de>
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	4a20      	ldr	r2, [pc, #128]	@ (8008290 <DMA_SetConfig+0x350>)
 8008210:	4293      	cmp	r3, r2
 8008212:	d004      	beq.n	800821e <DMA_SetConfig+0x2de>
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	4a1e      	ldr	r2, [pc, #120]	@ (8008294 <DMA_SetConfig+0x354>)
 800821a:	4293      	cmp	r3, r2
 800821c:	d101      	bne.n	8008222 <DMA_SetConfig+0x2e2>
 800821e:	2301      	movs	r3, #1
 8008220:	e000      	b.n	8008224 <DMA_SetConfig+0x2e4>
 8008222:	2300      	movs	r3, #0
 8008224:	2b00      	cmp	r3, #0
 8008226:	d020      	beq.n	800826a <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800822c:	f003 031f 	and.w	r3, r3, #31
 8008230:	2201      	movs	r2, #1
 8008232:	409a      	lsls	r2, r3
 8008234:	693b      	ldr	r3, [r7, #16]
 8008236:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	683a      	ldr	r2, [r7, #0]
 800823e:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	689b      	ldr	r3, [r3, #8]
 8008244:	2b40      	cmp	r3, #64	@ 0x40
 8008246:	d108      	bne.n	800825a <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	687a      	ldr	r2, [r7, #4]
 800824e:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	68ba      	ldr	r2, [r7, #8]
 8008256:	60da      	str	r2, [r3, #12]
}
 8008258:	e007      	b.n	800826a <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	68ba      	ldr	r2, [r7, #8]
 8008260:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	687a      	ldr	r2, [r7, #4]
 8008268:	60da      	str	r2, [r3, #12]
}
 800826a:	bf00      	nop
 800826c:	371c      	adds	r7, #28
 800826e:	46bd      	mov	sp, r7
 8008270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008274:	4770      	bx	lr
 8008276:	bf00      	nop
 8008278:	58025408 	.word	0x58025408
 800827c:	5802541c 	.word	0x5802541c
 8008280:	58025430 	.word	0x58025430
 8008284:	58025444 	.word	0x58025444
 8008288:	58025458 	.word	0x58025458
 800828c:	5802546c 	.word	0x5802546c
 8008290:	58025480 	.word	0x58025480
 8008294:	58025494 	.word	0x58025494

08008298 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8008298:	b480      	push	{r7}
 800829a:	b085      	sub	sp, #20
 800829c:	af00      	add	r7, sp, #0
 800829e:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	4a42      	ldr	r2, [pc, #264]	@ (80083b0 <DMA_CalcBaseAndBitshift+0x118>)
 80082a6:	4293      	cmp	r3, r2
 80082a8:	d04a      	beq.n	8008340 <DMA_CalcBaseAndBitshift+0xa8>
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	4a41      	ldr	r2, [pc, #260]	@ (80083b4 <DMA_CalcBaseAndBitshift+0x11c>)
 80082b0:	4293      	cmp	r3, r2
 80082b2:	d045      	beq.n	8008340 <DMA_CalcBaseAndBitshift+0xa8>
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	4a3f      	ldr	r2, [pc, #252]	@ (80083b8 <DMA_CalcBaseAndBitshift+0x120>)
 80082ba:	4293      	cmp	r3, r2
 80082bc:	d040      	beq.n	8008340 <DMA_CalcBaseAndBitshift+0xa8>
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	4a3e      	ldr	r2, [pc, #248]	@ (80083bc <DMA_CalcBaseAndBitshift+0x124>)
 80082c4:	4293      	cmp	r3, r2
 80082c6:	d03b      	beq.n	8008340 <DMA_CalcBaseAndBitshift+0xa8>
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	4a3c      	ldr	r2, [pc, #240]	@ (80083c0 <DMA_CalcBaseAndBitshift+0x128>)
 80082ce:	4293      	cmp	r3, r2
 80082d0:	d036      	beq.n	8008340 <DMA_CalcBaseAndBitshift+0xa8>
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	4a3b      	ldr	r2, [pc, #236]	@ (80083c4 <DMA_CalcBaseAndBitshift+0x12c>)
 80082d8:	4293      	cmp	r3, r2
 80082da:	d031      	beq.n	8008340 <DMA_CalcBaseAndBitshift+0xa8>
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	4a39      	ldr	r2, [pc, #228]	@ (80083c8 <DMA_CalcBaseAndBitshift+0x130>)
 80082e2:	4293      	cmp	r3, r2
 80082e4:	d02c      	beq.n	8008340 <DMA_CalcBaseAndBitshift+0xa8>
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	4a38      	ldr	r2, [pc, #224]	@ (80083cc <DMA_CalcBaseAndBitshift+0x134>)
 80082ec:	4293      	cmp	r3, r2
 80082ee:	d027      	beq.n	8008340 <DMA_CalcBaseAndBitshift+0xa8>
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	4a36      	ldr	r2, [pc, #216]	@ (80083d0 <DMA_CalcBaseAndBitshift+0x138>)
 80082f6:	4293      	cmp	r3, r2
 80082f8:	d022      	beq.n	8008340 <DMA_CalcBaseAndBitshift+0xa8>
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	4a35      	ldr	r2, [pc, #212]	@ (80083d4 <DMA_CalcBaseAndBitshift+0x13c>)
 8008300:	4293      	cmp	r3, r2
 8008302:	d01d      	beq.n	8008340 <DMA_CalcBaseAndBitshift+0xa8>
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	4a33      	ldr	r2, [pc, #204]	@ (80083d8 <DMA_CalcBaseAndBitshift+0x140>)
 800830a:	4293      	cmp	r3, r2
 800830c:	d018      	beq.n	8008340 <DMA_CalcBaseAndBitshift+0xa8>
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	4a32      	ldr	r2, [pc, #200]	@ (80083dc <DMA_CalcBaseAndBitshift+0x144>)
 8008314:	4293      	cmp	r3, r2
 8008316:	d013      	beq.n	8008340 <DMA_CalcBaseAndBitshift+0xa8>
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	4a30      	ldr	r2, [pc, #192]	@ (80083e0 <DMA_CalcBaseAndBitshift+0x148>)
 800831e:	4293      	cmp	r3, r2
 8008320:	d00e      	beq.n	8008340 <DMA_CalcBaseAndBitshift+0xa8>
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	4a2f      	ldr	r2, [pc, #188]	@ (80083e4 <DMA_CalcBaseAndBitshift+0x14c>)
 8008328:	4293      	cmp	r3, r2
 800832a:	d009      	beq.n	8008340 <DMA_CalcBaseAndBitshift+0xa8>
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	4a2d      	ldr	r2, [pc, #180]	@ (80083e8 <DMA_CalcBaseAndBitshift+0x150>)
 8008332:	4293      	cmp	r3, r2
 8008334:	d004      	beq.n	8008340 <DMA_CalcBaseAndBitshift+0xa8>
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	4a2c      	ldr	r2, [pc, #176]	@ (80083ec <DMA_CalcBaseAndBitshift+0x154>)
 800833c:	4293      	cmp	r3, r2
 800833e:	d101      	bne.n	8008344 <DMA_CalcBaseAndBitshift+0xac>
 8008340:	2301      	movs	r3, #1
 8008342:	e000      	b.n	8008346 <DMA_CalcBaseAndBitshift+0xae>
 8008344:	2300      	movs	r3, #0
 8008346:	2b00      	cmp	r3, #0
 8008348:	d024      	beq.n	8008394 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	b2db      	uxtb	r3, r3
 8008350:	3b10      	subs	r3, #16
 8008352:	4a27      	ldr	r2, [pc, #156]	@ (80083f0 <DMA_CalcBaseAndBitshift+0x158>)
 8008354:	fba2 2303 	umull	r2, r3, r2, r3
 8008358:	091b      	lsrs	r3, r3, #4
 800835a:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	f003 0307 	and.w	r3, r3, #7
 8008362:	4a24      	ldr	r2, [pc, #144]	@ (80083f4 <DMA_CalcBaseAndBitshift+0x15c>)
 8008364:	5cd3      	ldrb	r3, [r2, r3]
 8008366:	461a      	mov	r2, r3
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	2b03      	cmp	r3, #3
 8008370:	d908      	bls.n	8008384 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	461a      	mov	r2, r3
 8008378:	4b1f      	ldr	r3, [pc, #124]	@ (80083f8 <DMA_CalcBaseAndBitshift+0x160>)
 800837a:	4013      	ands	r3, r2
 800837c:	1d1a      	adds	r2, r3, #4
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	659a      	str	r2, [r3, #88]	@ 0x58
 8008382:	e00d      	b.n	80083a0 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	461a      	mov	r2, r3
 800838a:	4b1b      	ldr	r3, [pc, #108]	@ (80083f8 <DMA_CalcBaseAndBitshift+0x160>)
 800838c:	4013      	ands	r3, r2
 800838e:	687a      	ldr	r2, [r7, #4]
 8008390:	6593      	str	r3, [r2, #88]	@ 0x58
 8008392:	e005      	b.n	80083a0 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80083a4:	4618      	mov	r0, r3
 80083a6:	3714      	adds	r7, #20
 80083a8:	46bd      	mov	sp, r7
 80083aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ae:	4770      	bx	lr
 80083b0:	40020010 	.word	0x40020010
 80083b4:	40020028 	.word	0x40020028
 80083b8:	40020040 	.word	0x40020040
 80083bc:	40020058 	.word	0x40020058
 80083c0:	40020070 	.word	0x40020070
 80083c4:	40020088 	.word	0x40020088
 80083c8:	400200a0 	.word	0x400200a0
 80083cc:	400200b8 	.word	0x400200b8
 80083d0:	40020410 	.word	0x40020410
 80083d4:	40020428 	.word	0x40020428
 80083d8:	40020440 	.word	0x40020440
 80083dc:	40020458 	.word	0x40020458
 80083e0:	40020470 	.word	0x40020470
 80083e4:	40020488 	.word	0x40020488
 80083e8:	400204a0 	.word	0x400204a0
 80083ec:	400204b8 	.word	0x400204b8
 80083f0:	aaaaaaab 	.word	0xaaaaaaab
 80083f4:	0801491c 	.word	0x0801491c
 80083f8:	fffffc00 	.word	0xfffffc00

080083fc <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80083fc:	b480      	push	{r7}
 80083fe:	b085      	sub	sp, #20
 8008400:	af00      	add	r7, sp, #0
 8008402:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008404:	2300      	movs	r3, #0
 8008406:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	699b      	ldr	r3, [r3, #24]
 800840c:	2b00      	cmp	r3, #0
 800840e:	d120      	bne.n	8008452 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008414:	2b03      	cmp	r3, #3
 8008416:	d858      	bhi.n	80084ca <DMA_CheckFifoParam+0xce>
 8008418:	a201      	add	r2, pc, #4	@ (adr r2, 8008420 <DMA_CheckFifoParam+0x24>)
 800841a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800841e:	bf00      	nop
 8008420:	08008431 	.word	0x08008431
 8008424:	08008443 	.word	0x08008443
 8008428:	08008431 	.word	0x08008431
 800842c:	080084cb 	.word	0x080084cb
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008434:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008438:	2b00      	cmp	r3, #0
 800843a:	d048      	beq.n	80084ce <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 800843c:	2301      	movs	r3, #1
 800843e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008440:	e045      	b.n	80084ce <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008446:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800844a:	d142      	bne.n	80084d2 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 800844c:	2301      	movs	r3, #1
 800844e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008450:	e03f      	b.n	80084d2 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	699b      	ldr	r3, [r3, #24]
 8008456:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800845a:	d123      	bne.n	80084a4 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008460:	2b03      	cmp	r3, #3
 8008462:	d838      	bhi.n	80084d6 <DMA_CheckFifoParam+0xda>
 8008464:	a201      	add	r2, pc, #4	@ (adr r2, 800846c <DMA_CheckFifoParam+0x70>)
 8008466:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800846a:	bf00      	nop
 800846c:	0800847d 	.word	0x0800847d
 8008470:	08008483 	.word	0x08008483
 8008474:	0800847d 	.word	0x0800847d
 8008478:	08008495 	.word	0x08008495
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 800847c:	2301      	movs	r3, #1
 800847e:	73fb      	strb	r3, [r7, #15]
        break;
 8008480:	e030      	b.n	80084e4 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008486:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800848a:	2b00      	cmp	r3, #0
 800848c:	d025      	beq.n	80084da <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800848e:	2301      	movs	r3, #1
 8008490:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008492:	e022      	b.n	80084da <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008498:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800849c:	d11f      	bne.n	80084de <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800849e:	2301      	movs	r3, #1
 80084a0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80084a2:	e01c      	b.n	80084de <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80084a8:	2b02      	cmp	r3, #2
 80084aa:	d902      	bls.n	80084b2 <DMA_CheckFifoParam+0xb6>
 80084ac:	2b03      	cmp	r3, #3
 80084ae:	d003      	beq.n	80084b8 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80084b0:	e018      	b.n	80084e4 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80084b2:	2301      	movs	r3, #1
 80084b4:	73fb      	strb	r3, [r7, #15]
        break;
 80084b6:	e015      	b.n	80084e4 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80084bc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d00e      	beq.n	80084e2 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80084c4:	2301      	movs	r3, #1
 80084c6:	73fb      	strb	r3, [r7, #15]
    break;
 80084c8:	e00b      	b.n	80084e2 <DMA_CheckFifoParam+0xe6>
        break;
 80084ca:	bf00      	nop
 80084cc:	e00a      	b.n	80084e4 <DMA_CheckFifoParam+0xe8>
        break;
 80084ce:	bf00      	nop
 80084d0:	e008      	b.n	80084e4 <DMA_CheckFifoParam+0xe8>
        break;
 80084d2:	bf00      	nop
 80084d4:	e006      	b.n	80084e4 <DMA_CheckFifoParam+0xe8>
        break;
 80084d6:	bf00      	nop
 80084d8:	e004      	b.n	80084e4 <DMA_CheckFifoParam+0xe8>
        break;
 80084da:	bf00      	nop
 80084dc:	e002      	b.n	80084e4 <DMA_CheckFifoParam+0xe8>
        break;
 80084de:	bf00      	nop
 80084e0:	e000      	b.n	80084e4 <DMA_CheckFifoParam+0xe8>
    break;
 80084e2:	bf00      	nop
    }
  }

  return status;
 80084e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80084e6:	4618      	mov	r0, r3
 80084e8:	3714      	adds	r7, #20
 80084ea:	46bd      	mov	sp, r7
 80084ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084f0:	4770      	bx	lr
 80084f2:	bf00      	nop

080084f4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80084f4:	b480      	push	{r7}
 80084f6:	b085      	sub	sp, #20
 80084f8:	af00      	add	r7, sp, #0
 80084fa:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	4a38      	ldr	r2, [pc, #224]	@ (80085e8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8008508:	4293      	cmp	r3, r2
 800850a:	d022      	beq.n	8008552 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	4a36      	ldr	r2, [pc, #216]	@ (80085ec <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8008512:	4293      	cmp	r3, r2
 8008514:	d01d      	beq.n	8008552 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	4a35      	ldr	r2, [pc, #212]	@ (80085f0 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 800851c:	4293      	cmp	r3, r2
 800851e:	d018      	beq.n	8008552 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	4a33      	ldr	r2, [pc, #204]	@ (80085f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8008526:	4293      	cmp	r3, r2
 8008528:	d013      	beq.n	8008552 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	4a32      	ldr	r2, [pc, #200]	@ (80085f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8008530:	4293      	cmp	r3, r2
 8008532:	d00e      	beq.n	8008552 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	4a30      	ldr	r2, [pc, #192]	@ (80085fc <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800853a:	4293      	cmp	r3, r2
 800853c:	d009      	beq.n	8008552 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	4a2f      	ldr	r2, [pc, #188]	@ (8008600 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8008544:	4293      	cmp	r3, r2
 8008546:	d004      	beq.n	8008552 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	4a2d      	ldr	r2, [pc, #180]	@ (8008604 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800854e:	4293      	cmp	r3, r2
 8008550:	d101      	bne.n	8008556 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8008552:	2301      	movs	r3, #1
 8008554:	e000      	b.n	8008558 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8008556:	2300      	movs	r3, #0
 8008558:	2b00      	cmp	r3, #0
 800855a:	d01a      	beq.n	8008592 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	b2db      	uxtb	r3, r3
 8008562:	3b08      	subs	r3, #8
 8008564:	4a28      	ldr	r2, [pc, #160]	@ (8008608 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8008566:	fba2 2303 	umull	r2, r3, r2, r3
 800856a:	091b      	lsrs	r3, r3, #4
 800856c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800856e:	68fa      	ldr	r2, [r7, #12]
 8008570:	4b26      	ldr	r3, [pc, #152]	@ (800860c <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8008572:	4413      	add	r3, r2
 8008574:	009b      	lsls	r3, r3, #2
 8008576:	461a      	mov	r2, r3
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	4a24      	ldr	r2, [pc, #144]	@ (8008610 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8008580:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	f003 031f 	and.w	r3, r3, #31
 8008588:	2201      	movs	r2, #1
 800858a:	409a      	lsls	r2, r3
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8008590:	e024      	b.n	80085dc <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	b2db      	uxtb	r3, r3
 8008598:	3b10      	subs	r3, #16
 800859a:	4a1e      	ldr	r2, [pc, #120]	@ (8008614 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 800859c:	fba2 2303 	umull	r2, r3, r2, r3
 80085a0:	091b      	lsrs	r3, r3, #4
 80085a2:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80085a4:	68bb      	ldr	r3, [r7, #8]
 80085a6:	4a1c      	ldr	r2, [pc, #112]	@ (8008618 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80085a8:	4293      	cmp	r3, r2
 80085aa:	d806      	bhi.n	80085ba <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80085ac:	68bb      	ldr	r3, [r7, #8]
 80085ae:	4a1b      	ldr	r2, [pc, #108]	@ (800861c <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80085b0:	4293      	cmp	r3, r2
 80085b2:	d902      	bls.n	80085ba <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	3308      	adds	r3, #8
 80085b8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80085ba:	68fa      	ldr	r2, [r7, #12]
 80085bc:	4b18      	ldr	r3, [pc, #96]	@ (8008620 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80085be:	4413      	add	r3, r2
 80085c0:	009b      	lsls	r3, r3, #2
 80085c2:	461a      	mov	r2, r3
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	4a16      	ldr	r2, [pc, #88]	@ (8008624 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80085cc:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	f003 031f 	and.w	r3, r3, #31
 80085d4:	2201      	movs	r2, #1
 80085d6:	409a      	lsls	r2, r3
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80085dc:	bf00      	nop
 80085de:	3714      	adds	r7, #20
 80085e0:	46bd      	mov	sp, r7
 80085e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085e6:	4770      	bx	lr
 80085e8:	58025408 	.word	0x58025408
 80085ec:	5802541c 	.word	0x5802541c
 80085f0:	58025430 	.word	0x58025430
 80085f4:	58025444 	.word	0x58025444
 80085f8:	58025458 	.word	0x58025458
 80085fc:	5802546c 	.word	0x5802546c
 8008600:	58025480 	.word	0x58025480
 8008604:	58025494 	.word	0x58025494
 8008608:	cccccccd 	.word	0xcccccccd
 800860c:	16009600 	.word	0x16009600
 8008610:	58025880 	.word	0x58025880
 8008614:	aaaaaaab 	.word	0xaaaaaaab
 8008618:	400204b8 	.word	0x400204b8
 800861c:	4002040f 	.word	0x4002040f
 8008620:	10008200 	.word	0x10008200
 8008624:	40020880 	.word	0x40020880

08008628 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8008628:	b480      	push	{r7}
 800862a:	b085      	sub	sp, #20
 800862c:	af00      	add	r7, sp, #0
 800862e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	685b      	ldr	r3, [r3, #4]
 8008634:	b2db      	uxtb	r3, r3
 8008636:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	2b00      	cmp	r3, #0
 800863c:	d04a      	beq.n	80086d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	2b08      	cmp	r3, #8
 8008642:	d847      	bhi.n	80086d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	4a25      	ldr	r2, [pc, #148]	@ (80086e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800864a:	4293      	cmp	r3, r2
 800864c:	d022      	beq.n	8008694 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	4a24      	ldr	r2, [pc, #144]	@ (80086e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8008654:	4293      	cmp	r3, r2
 8008656:	d01d      	beq.n	8008694 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	4a22      	ldr	r2, [pc, #136]	@ (80086e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800865e:	4293      	cmp	r3, r2
 8008660:	d018      	beq.n	8008694 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	4a21      	ldr	r2, [pc, #132]	@ (80086ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8008668:	4293      	cmp	r3, r2
 800866a:	d013      	beq.n	8008694 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	4a1f      	ldr	r2, [pc, #124]	@ (80086f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8008672:	4293      	cmp	r3, r2
 8008674:	d00e      	beq.n	8008694 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	4a1e      	ldr	r2, [pc, #120]	@ (80086f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 800867c:	4293      	cmp	r3, r2
 800867e:	d009      	beq.n	8008694 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	4a1c      	ldr	r2, [pc, #112]	@ (80086f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8008686:	4293      	cmp	r3, r2
 8008688:	d004      	beq.n	8008694 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	4a1b      	ldr	r2, [pc, #108]	@ (80086fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8008690:	4293      	cmp	r3, r2
 8008692:	d101      	bne.n	8008698 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8008694:	2301      	movs	r3, #1
 8008696:	e000      	b.n	800869a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8008698:	2300      	movs	r3, #0
 800869a:	2b00      	cmp	r3, #0
 800869c:	d00a      	beq.n	80086b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800869e:	68fa      	ldr	r2, [r7, #12]
 80086a0:	4b17      	ldr	r3, [pc, #92]	@ (8008700 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80086a2:	4413      	add	r3, r2
 80086a4:	009b      	lsls	r3, r3, #2
 80086a6:	461a      	mov	r2, r3
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	4a15      	ldr	r2, [pc, #84]	@ (8008704 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80086b0:	671a      	str	r2, [r3, #112]	@ 0x70
 80086b2:	e009      	b.n	80086c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80086b4:	68fa      	ldr	r2, [r7, #12]
 80086b6:	4b14      	ldr	r3, [pc, #80]	@ (8008708 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80086b8:	4413      	add	r3, r2
 80086ba:	009b      	lsls	r3, r3, #2
 80086bc:	461a      	mov	r2, r3
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	4a11      	ldr	r2, [pc, #68]	@ (800870c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80086c6:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	3b01      	subs	r3, #1
 80086cc:	2201      	movs	r2, #1
 80086ce:	409a      	lsls	r2, r3
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 80086d4:	bf00      	nop
 80086d6:	3714      	adds	r7, #20
 80086d8:	46bd      	mov	sp, r7
 80086da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086de:	4770      	bx	lr
 80086e0:	58025408 	.word	0x58025408
 80086e4:	5802541c 	.word	0x5802541c
 80086e8:	58025430 	.word	0x58025430
 80086ec:	58025444 	.word	0x58025444
 80086f0:	58025458 	.word	0x58025458
 80086f4:	5802546c 	.word	0x5802546c
 80086f8:	58025480 	.word	0x58025480
 80086fc:	58025494 	.word	0x58025494
 8008700:	1600963f 	.word	0x1600963f
 8008704:	58025940 	.word	0x58025940
 8008708:	1000823f 	.word	0x1000823f
 800870c:	40020940 	.word	0x40020940

08008710 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008710:	b480      	push	{r7}
 8008712:	b089      	sub	sp, #36	@ 0x24
 8008714:	af00      	add	r7, sp, #0
 8008716:	6078      	str	r0, [r7, #4]
 8008718:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800871a:	2300      	movs	r3, #0
 800871c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800871e:	4b89      	ldr	r3, [pc, #548]	@ (8008944 <HAL_GPIO_Init+0x234>)
 8008720:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8008722:	e194      	b.n	8008a4e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8008724:	683b      	ldr	r3, [r7, #0]
 8008726:	681a      	ldr	r2, [r3, #0]
 8008728:	2101      	movs	r1, #1
 800872a:	69fb      	ldr	r3, [r7, #28]
 800872c:	fa01 f303 	lsl.w	r3, r1, r3
 8008730:	4013      	ands	r3, r2
 8008732:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8008734:	693b      	ldr	r3, [r7, #16]
 8008736:	2b00      	cmp	r3, #0
 8008738:	f000 8186 	beq.w	8008a48 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800873c:	683b      	ldr	r3, [r7, #0]
 800873e:	685b      	ldr	r3, [r3, #4]
 8008740:	f003 0303 	and.w	r3, r3, #3
 8008744:	2b01      	cmp	r3, #1
 8008746:	d005      	beq.n	8008754 <HAL_GPIO_Init+0x44>
 8008748:	683b      	ldr	r3, [r7, #0]
 800874a:	685b      	ldr	r3, [r3, #4]
 800874c:	f003 0303 	and.w	r3, r3, #3
 8008750:	2b02      	cmp	r3, #2
 8008752:	d130      	bne.n	80087b6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	689b      	ldr	r3, [r3, #8]
 8008758:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800875a:	69fb      	ldr	r3, [r7, #28]
 800875c:	005b      	lsls	r3, r3, #1
 800875e:	2203      	movs	r2, #3
 8008760:	fa02 f303 	lsl.w	r3, r2, r3
 8008764:	43db      	mvns	r3, r3
 8008766:	69ba      	ldr	r2, [r7, #24]
 8008768:	4013      	ands	r3, r2
 800876a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800876c:	683b      	ldr	r3, [r7, #0]
 800876e:	68da      	ldr	r2, [r3, #12]
 8008770:	69fb      	ldr	r3, [r7, #28]
 8008772:	005b      	lsls	r3, r3, #1
 8008774:	fa02 f303 	lsl.w	r3, r2, r3
 8008778:	69ba      	ldr	r2, [r7, #24]
 800877a:	4313      	orrs	r3, r2
 800877c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	69ba      	ldr	r2, [r7, #24]
 8008782:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	685b      	ldr	r3, [r3, #4]
 8008788:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800878a:	2201      	movs	r2, #1
 800878c:	69fb      	ldr	r3, [r7, #28]
 800878e:	fa02 f303 	lsl.w	r3, r2, r3
 8008792:	43db      	mvns	r3, r3
 8008794:	69ba      	ldr	r2, [r7, #24]
 8008796:	4013      	ands	r3, r2
 8008798:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800879a:	683b      	ldr	r3, [r7, #0]
 800879c:	685b      	ldr	r3, [r3, #4]
 800879e:	091b      	lsrs	r3, r3, #4
 80087a0:	f003 0201 	and.w	r2, r3, #1
 80087a4:	69fb      	ldr	r3, [r7, #28]
 80087a6:	fa02 f303 	lsl.w	r3, r2, r3
 80087aa:	69ba      	ldr	r2, [r7, #24]
 80087ac:	4313      	orrs	r3, r2
 80087ae:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	69ba      	ldr	r2, [r7, #24]
 80087b4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80087b6:	683b      	ldr	r3, [r7, #0]
 80087b8:	685b      	ldr	r3, [r3, #4]
 80087ba:	f003 0303 	and.w	r3, r3, #3
 80087be:	2b03      	cmp	r3, #3
 80087c0:	d017      	beq.n	80087f2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	68db      	ldr	r3, [r3, #12]
 80087c6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80087c8:	69fb      	ldr	r3, [r7, #28]
 80087ca:	005b      	lsls	r3, r3, #1
 80087cc:	2203      	movs	r2, #3
 80087ce:	fa02 f303 	lsl.w	r3, r2, r3
 80087d2:	43db      	mvns	r3, r3
 80087d4:	69ba      	ldr	r2, [r7, #24]
 80087d6:	4013      	ands	r3, r2
 80087d8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80087da:	683b      	ldr	r3, [r7, #0]
 80087dc:	689a      	ldr	r2, [r3, #8]
 80087de:	69fb      	ldr	r3, [r7, #28]
 80087e0:	005b      	lsls	r3, r3, #1
 80087e2:	fa02 f303 	lsl.w	r3, r2, r3
 80087e6:	69ba      	ldr	r2, [r7, #24]
 80087e8:	4313      	orrs	r3, r2
 80087ea:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	69ba      	ldr	r2, [r7, #24]
 80087f0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80087f2:	683b      	ldr	r3, [r7, #0]
 80087f4:	685b      	ldr	r3, [r3, #4]
 80087f6:	f003 0303 	and.w	r3, r3, #3
 80087fa:	2b02      	cmp	r3, #2
 80087fc:	d123      	bne.n	8008846 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80087fe:	69fb      	ldr	r3, [r7, #28]
 8008800:	08da      	lsrs	r2, r3, #3
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	3208      	adds	r2, #8
 8008806:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800880a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800880c:	69fb      	ldr	r3, [r7, #28]
 800880e:	f003 0307 	and.w	r3, r3, #7
 8008812:	009b      	lsls	r3, r3, #2
 8008814:	220f      	movs	r2, #15
 8008816:	fa02 f303 	lsl.w	r3, r2, r3
 800881a:	43db      	mvns	r3, r3
 800881c:	69ba      	ldr	r2, [r7, #24]
 800881e:	4013      	ands	r3, r2
 8008820:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8008822:	683b      	ldr	r3, [r7, #0]
 8008824:	691a      	ldr	r2, [r3, #16]
 8008826:	69fb      	ldr	r3, [r7, #28]
 8008828:	f003 0307 	and.w	r3, r3, #7
 800882c:	009b      	lsls	r3, r3, #2
 800882e:	fa02 f303 	lsl.w	r3, r2, r3
 8008832:	69ba      	ldr	r2, [r7, #24]
 8008834:	4313      	orrs	r3, r2
 8008836:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8008838:	69fb      	ldr	r3, [r7, #28]
 800883a:	08da      	lsrs	r2, r3, #3
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	3208      	adds	r2, #8
 8008840:	69b9      	ldr	r1, [r7, #24]
 8008842:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800884c:	69fb      	ldr	r3, [r7, #28]
 800884e:	005b      	lsls	r3, r3, #1
 8008850:	2203      	movs	r2, #3
 8008852:	fa02 f303 	lsl.w	r3, r2, r3
 8008856:	43db      	mvns	r3, r3
 8008858:	69ba      	ldr	r2, [r7, #24]
 800885a:	4013      	ands	r3, r2
 800885c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800885e:	683b      	ldr	r3, [r7, #0]
 8008860:	685b      	ldr	r3, [r3, #4]
 8008862:	f003 0203 	and.w	r2, r3, #3
 8008866:	69fb      	ldr	r3, [r7, #28]
 8008868:	005b      	lsls	r3, r3, #1
 800886a:	fa02 f303 	lsl.w	r3, r2, r3
 800886e:	69ba      	ldr	r2, [r7, #24]
 8008870:	4313      	orrs	r3, r2
 8008872:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	69ba      	ldr	r2, [r7, #24]
 8008878:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800887a:	683b      	ldr	r3, [r7, #0]
 800887c:	685b      	ldr	r3, [r3, #4]
 800887e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8008882:	2b00      	cmp	r3, #0
 8008884:	f000 80e0 	beq.w	8008a48 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008888:	4b2f      	ldr	r3, [pc, #188]	@ (8008948 <HAL_GPIO_Init+0x238>)
 800888a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800888e:	4a2e      	ldr	r2, [pc, #184]	@ (8008948 <HAL_GPIO_Init+0x238>)
 8008890:	f043 0302 	orr.w	r3, r3, #2
 8008894:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8008898:	4b2b      	ldr	r3, [pc, #172]	@ (8008948 <HAL_GPIO_Init+0x238>)
 800889a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800889e:	f003 0302 	and.w	r3, r3, #2
 80088a2:	60fb      	str	r3, [r7, #12]
 80088a4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80088a6:	4a29      	ldr	r2, [pc, #164]	@ (800894c <HAL_GPIO_Init+0x23c>)
 80088a8:	69fb      	ldr	r3, [r7, #28]
 80088aa:	089b      	lsrs	r3, r3, #2
 80088ac:	3302      	adds	r3, #2
 80088ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80088b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80088b4:	69fb      	ldr	r3, [r7, #28]
 80088b6:	f003 0303 	and.w	r3, r3, #3
 80088ba:	009b      	lsls	r3, r3, #2
 80088bc:	220f      	movs	r2, #15
 80088be:	fa02 f303 	lsl.w	r3, r2, r3
 80088c2:	43db      	mvns	r3, r3
 80088c4:	69ba      	ldr	r2, [r7, #24]
 80088c6:	4013      	ands	r3, r2
 80088c8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	4a20      	ldr	r2, [pc, #128]	@ (8008950 <HAL_GPIO_Init+0x240>)
 80088ce:	4293      	cmp	r3, r2
 80088d0:	d052      	beq.n	8008978 <HAL_GPIO_Init+0x268>
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	4a1f      	ldr	r2, [pc, #124]	@ (8008954 <HAL_GPIO_Init+0x244>)
 80088d6:	4293      	cmp	r3, r2
 80088d8:	d031      	beq.n	800893e <HAL_GPIO_Init+0x22e>
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	4a1e      	ldr	r2, [pc, #120]	@ (8008958 <HAL_GPIO_Init+0x248>)
 80088de:	4293      	cmp	r3, r2
 80088e0:	d02b      	beq.n	800893a <HAL_GPIO_Init+0x22a>
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	4a1d      	ldr	r2, [pc, #116]	@ (800895c <HAL_GPIO_Init+0x24c>)
 80088e6:	4293      	cmp	r3, r2
 80088e8:	d025      	beq.n	8008936 <HAL_GPIO_Init+0x226>
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	4a1c      	ldr	r2, [pc, #112]	@ (8008960 <HAL_GPIO_Init+0x250>)
 80088ee:	4293      	cmp	r3, r2
 80088f0:	d01f      	beq.n	8008932 <HAL_GPIO_Init+0x222>
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	4a1b      	ldr	r2, [pc, #108]	@ (8008964 <HAL_GPIO_Init+0x254>)
 80088f6:	4293      	cmp	r3, r2
 80088f8:	d019      	beq.n	800892e <HAL_GPIO_Init+0x21e>
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	4a1a      	ldr	r2, [pc, #104]	@ (8008968 <HAL_GPIO_Init+0x258>)
 80088fe:	4293      	cmp	r3, r2
 8008900:	d013      	beq.n	800892a <HAL_GPIO_Init+0x21a>
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	4a19      	ldr	r2, [pc, #100]	@ (800896c <HAL_GPIO_Init+0x25c>)
 8008906:	4293      	cmp	r3, r2
 8008908:	d00d      	beq.n	8008926 <HAL_GPIO_Init+0x216>
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	4a18      	ldr	r2, [pc, #96]	@ (8008970 <HAL_GPIO_Init+0x260>)
 800890e:	4293      	cmp	r3, r2
 8008910:	d007      	beq.n	8008922 <HAL_GPIO_Init+0x212>
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	4a17      	ldr	r2, [pc, #92]	@ (8008974 <HAL_GPIO_Init+0x264>)
 8008916:	4293      	cmp	r3, r2
 8008918:	d101      	bne.n	800891e <HAL_GPIO_Init+0x20e>
 800891a:	2309      	movs	r3, #9
 800891c:	e02d      	b.n	800897a <HAL_GPIO_Init+0x26a>
 800891e:	230a      	movs	r3, #10
 8008920:	e02b      	b.n	800897a <HAL_GPIO_Init+0x26a>
 8008922:	2308      	movs	r3, #8
 8008924:	e029      	b.n	800897a <HAL_GPIO_Init+0x26a>
 8008926:	2307      	movs	r3, #7
 8008928:	e027      	b.n	800897a <HAL_GPIO_Init+0x26a>
 800892a:	2306      	movs	r3, #6
 800892c:	e025      	b.n	800897a <HAL_GPIO_Init+0x26a>
 800892e:	2305      	movs	r3, #5
 8008930:	e023      	b.n	800897a <HAL_GPIO_Init+0x26a>
 8008932:	2304      	movs	r3, #4
 8008934:	e021      	b.n	800897a <HAL_GPIO_Init+0x26a>
 8008936:	2303      	movs	r3, #3
 8008938:	e01f      	b.n	800897a <HAL_GPIO_Init+0x26a>
 800893a:	2302      	movs	r3, #2
 800893c:	e01d      	b.n	800897a <HAL_GPIO_Init+0x26a>
 800893e:	2301      	movs	r3, #1
 8008940:	e01b      	b.n	800897a <HAL_GPIO_Init+0x26a>
 8008942:	bf00      	nop
 8008944:	58000080 	.word	0x58000080
 8008948:	58024400 	.word	0x58024400
 800894c:	58000400 	.word	0x58000400
 8008950:	58020000 	.word	0x58020000
 8008954:	58020400 	.word	0x58020400
 8008958:	58020800 	.word	0x58020800
 800895c:	58020c00 	.word	0x58020c00
 8008960:	58021000 	.word	0x58021000
 8008964:	58021400 	.word	0x58021400
 8008968:	58021800 	.word	0x58021800
 800896c:	58021c00 	.word	0x58021c00
 8008970:	58022000 	.word	0x58022000
 8008974:	58022400 	.word	0x58022400
 8008978:	2300      	movs	r3, #0
 800897a:	69fa      	ldr	r2, [r7, #28]
 800897c:	f002 0203 	and.w	r2, r2, #3
 8008980:	0092      	lsls	r2, r2, #2
 8008982:	4093      	lsls	r3, r2
 8008984:	69ba      	ldr	r2, [r7, #24]
 8008986:	4313      	orrs	r3, r2
 8008988:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800898a:	4938      	ldr	r1, [pc, #224]	@ (8008a6c <HAL_GPIO_Init+0x35c>)
 800898c:	69fb      	ldr	r3, [r7, #28]
 800898e:	089b      	lsrs	r3, r3, #2
 8008990:	3302      	adds	r3, #2
 8008992:	69ba      	ldr	r2, [r7, #24]
 8008994:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8008998:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80089a0:	693b      	ldr	r3, [r7, #16]
 80089a2:	43db      	mvns	r3, r3
 80089a4:	69ba      	ldr	r2, [r7, #24]
 80089a6:	4013      	ands	r3, r2
 80089a8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80089aa:	683b      	ldr	r3, [r7, #0]
 80089ac:	685b      	ldr	r3, [r3, #4]
 80089ae:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d003      	beq.n	80089be <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80089b6:	69ba      	ldr	r2, [r7, #24]
 80089b8:	693b      	ldr	r3, [r7, #16]
 80089ba:	4313      	orrs	r3, r2
 80089bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80089be:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80089c2:	69bb      	ldr	r3, [r7, #24]
 80089c4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80089c6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80089ca:	685b      	ldr	r3, [r3, #4]
 80089cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80089ce:	693b      	ldr	r3, [r7, #16]
 80089d0:	43db      	mvns	r3, r3
 80089d2:	69ba      	ldr	r2, [r7, #24]
 80089d4:	4013      	ands	r3, r2
 80089d6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80089d8:	683b      	ldr	r3, [r7, #0]
 80089da:	685b      	ldr	r3, [r3, #4]
 80089dc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d003      	beq.n	80089ec <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80089e4:	69ba      	ldr	r2, [r7, #24]
 80089e6:	693b      	ldr	r3, [r7, #16]
 80089e8:	4313      	orrs	r3, r2
 80089ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80089ec:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80089f0:	69bb      	ldr	r3, [r7, #24]
 80089f2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80089f4:	697b      	ldr	r3, [r7, #20]
 80089f6:	685b      	ldr	r3, [r3, #4]
 80089f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80089fa:	693b      	ldr	r3, [r7, #16]
 80089fc:	43db      	mvns	r3, r3
 80089fe:	69ba      	ldr	r2, [r7, #24]
 8008a00:	4013      	ands	r3, r2
 8008a02:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8008a04:	683b      	ldr	r3, [r7, #0]
 8008a06:	685b      	ldr	r3, [r3, #4]
 8008a08:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d003      	beq.n	8008a18 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8008a10:	69ba      	ldr	r2, [r7, #24]
 8008a12:	693b      	ldr	r3, [r7, #16]
 8008a14:	4313      	orrs	r3, r2
 8008a16:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8008a18:	697b      	ldr	r3, [r7, #20]
 8008a1a:	69ba      	ldr	r2, [r7, #24]
 8008a1c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8008a1e:	697b      	ldr	r3, [r7, #20]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008a24:	693b      	ldr	r3, [r7, #16]
 8008a26:	43db      	mvns	r3, r3
 8008a28:	69ba      	ldr	r2, [r7, #24]
 8008a2a:	4013      	ands	r3, r2
 8008a2c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8008a2e:	683b      	ldr	r3, [r7, #0]
 8008a30:	685b      	ldr	r3, [r3, #4]
 8008a32:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d003      	beq.n	8008a42 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8008a3a:	69ba      	ldr	r2, [r7, #24]
 8008a3c:	693b      	ldr	r3, [r7, #16]
 8008a3e:	4313      	orrs	r3, r2
 8008a40:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8008a42:	697b      	ldr	r3, [r7, #20]
 8008a44:	69ba      	ldr	r2, [r7, #24]
 8008a46:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8008a48:	69fb      	ldr	r3, [r7, #28]
 8008a4a:	3301      	adds	r3, #1
 8008a4c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8008a4e:	683b      	ldr	r3, [r7, #0]
 8008a50:	681a      	ldr	r2, [r3, #0]
 8008a52:	69fb      	ldr	r3, [r7, #28]
 8008a54:	fa22 f303 	lsr.w	r3, r2, r3
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	f47f ae63 	bne.w	8008724 <HAL_GPIO_Init+0x14>
  }
}
 8008a5e:	bf00      	nop
 8008a60:	bf00      	nop
 8008a62:	3724      	adds	r7, #36	@ 0x24
 8008a64:	46bd      	mov	sp, r7
 8008a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a6a:	4770      	bx	lr
 8008a6c:	58000400 	.word	0x58000400

08008a70 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8008a70:	b580      	push	{r7, lr}
 8008a72:	b084      	sub	sp, #16
 8008a74:	af00      	add	r7, sp, #0
 8008a76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8008a78:	4b19      	ldr	r3, [pc, #100]	@ (8008ae0 <HAL_PWREx_ConfigSupply+0x70>)
 8008a7a:	68db      	ldr	r3, [r3, #12]
 8008a7c:	f003 0304 	and.w	r3, r3, #4
 8008a80:	2b04      	cmp	r3, #4
 8008a82:	d00a      	beq.n	8008a9a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8008a84:	4b16      	ldr	r3, [pc, #88]	@ (8008ae0 <HAL_PWREx_ConfigSupply+0x70>)
 8008a86:	68db      	ldr	r3, [r3, #12]
 8008a88:	f003 0307 	and.w	r3, r3, #7
 8008a8c:	687a      	ldr	r2, [r7, #4]
 8008a8e:	429a      	cmp	r2, r3
 8008a90:	d001      	beq.n	8008a96 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8008a92:	2301      	movs	r3, #1
 8008a94:	e01f      	b.n	8008ad6 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8008a96:	2300      	movs	r3, #0
 8008a98:	e01d      	b.n	8008ad6 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8008a9a:	4b11      	ldr	r3, [pc, #68]	@ (8008ae0 <HAL_PWREx_ConfigSupply+0x70>)
 8008a9c:	68db      	ldr	r3, [r3, #12]
 8008a9e:	f023 0207 	bic.w	r2, r3, #7
 8008aa2:	490f      	ldr	r1, [pc, #60]	@ (8008ae0 <HAL_PWREx_ConfigSupply+0x70>)
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	4313      	orrs	r3, r2
 8008aa8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8008aaa:	f7fd f851 	bl	8005b50 <HAL_GetTick>
 8008aae:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008ab0:	e009      	b.n	8008ac6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8008ab2:	f7fd f84d 	bl	8005b50 <HAL_GetTick>
 8008ab6:	4602      	mov	r2, r0
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	1ad3      	subs	r3, r2, r3
 8008abc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008ac0:	d901      	bls.n	8008ac6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8008ac2:	2301      	movs	r3, #1
 8008ac4:	e007      	b.n	8008ad6 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008ac6:	4b06      	ldr	r3, [pc, #24]	@ (8008ae0 <HAL_PWREx_ConfigSupply+0x70>)
 8008ac8:	685b      	ldr	r3, [r3, #4]
 8008aca:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008ace:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008ad2:	d1ee      	bne.n	8008ab2 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8008ad4:	2300      	movs	r3, #0
}
 8008ad6:	4618      	mov	r0, r3
 8008ad8:	3710      	adds	r7, #16
 8008ada:	46bd      	mov	sp, r7
 8008adc:	bd80      	pop	{r7, pc}
 8008ade:	bf00      	nop
 8008ae0:	58024800 	.word	0x58024800

08008ae4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008ae4:	b580      	push	{r7, lr}
 8008ae6:	b08c      	sub	sp, #48	@ 0x30
 8008ae8:	af00      	add	r7, sp, #0
 8008aea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d102      	bne.n	8008af8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8008af2:	2301      	movs	r3, #1
 8008af4:	f000 bc48 	b.w	8009388 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	f003 0301 	and.w	r3, r3, #1
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	f000 8088 	beq.w	8008c16 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008b06:	4b99      	ldr	r3, [pc, #612]	@ (8008d6c <HAL_RCC_OscConfig+0x288>)
 8008b08:	691b      	ldr	r3, [r3, #16]
 8008b0a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008b0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008b10:	4b96      	ldr	r3, [pc, #600]	@ (8008d6c <HAL_RCC_OscConfig+0x288>)
 8008b12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b14:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8008b16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b18:	2b10      	cmp	r3, #16
 8008b1a:	d007      	beq.n	8008b2c <HAL_RCC_OscConfig+0x48>
 8008b1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b1e:	2b18      	cmp	r3, #24
 8008b20:	d111      	bne.n	8008b46 <HAL_RCC_OscConfig+0x62>
 8008b22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b24:	f003 0303 	and.w	r3, r3, #3
 8008b28:	2b02      	cmp	r3, #2
 8008b2a:	d10c      	bne.n	8008b46 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008b2c:	4b8f      	ldr	r3, [pc, #572]	@ (8008d6c <HAL_RCC_OscConfig+0x288>)
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d06d      	beq.n	8008c14 <HAL_RCC_OscConfig+0x130>
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	685b      	ldr	r3, [r3, #4]
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d169      	bne.n	8008c14 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8008b40:	2301      	movs	r3, #1
 8008b42:	f000 bc21 	b.w	8009388 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	685b      	ldr	r3, [r3, #4]
 8008b4a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008b4e:	d106      	bne.n	8008b5e <HAL_RCC_OscConfig+0x7a>
 8008b50:	4b86      	ldr	r3, [pc, #536]	@ (8008d6c <HAL_RCC_OscConfig+0x288>)
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	4a85      	ldr	r2, [pc, #532]	@ (8008d6c <HAL_RCC_OscConfig+0x288>)
 8008b56:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008b5a:	6013      	str	r3, [r2, #0]
 8008b5c:	e02e      	b.n	8008bbc <HAL_RCC_OscConfig+0xd8>
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	685b      	ldr	r3, [r3, #4]
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d10c      	bne.n	8008b80 <HAL_RCC_OscConfig+0x9c>
 8008b66:	4b81      	ldr	r3, [pc, #516]	@ (8008d6c <HAL_RCC_OscConfig+0x288>)
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	4a80      	ldr	r2, [pc, #512]	@ (8008d6c <HAL_RCC_OscConfig+0x288>)
 8008b6c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008b70:	6013      	str	r3, [r2, #0]
 8008b72:	4b7e      	ldr	r3, [pc, #504]	@ (8008d6c <HAL_RCC_OscConfig+0x288>)
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	4a7d      	ldr	r2, [pc, #500]	@ (8008d6c <HAL_RCC_OscConfig+0x288>)
 8008b78:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008b7c:	6013      	str	r3, [r2, #0]
 8008b7e:	e01d      	b.n	8008bbc <HAL_RCC_OscConfig+0xd8>
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	685b      	ldr	r3, [r3, #4]
 8008b84:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008b88:	d10c      	bne.n	8008ba4 <HAL_RCC_OscConfig+0xc0>
 8008b8a:	4b78      	ldr	r3, [pc, #480]	@ (8008d6c <HAL_RCC_OscConfig+0x288>)
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	4a77      	ldr	r2, [pc, #476]	@ (8008d6c <HAL_RCC_OscConfig+0x288>)
 8008b90:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008b94:	6013      	str	r3, [r2, #0]
 8008b96:	4b75      	ldr	r3, [pc, #468]	@ (8008d6c <HAL_RCC_OscConfig+0x288>)
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	4a74      	ldr	r2, [pc, #464]	@ (8008d6c <HAL_RCC_OscConfig+0x288>)
 8008b9c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008ba0:	6013      	str	r3, [r2, #0]
 8008ba2:	e00b      	b.n	8008bbc <HAL_RCC_OscConfig+0xd8>
 8008ba4:	4b71      	ldr	r3, [pc, #452]	@ (8008d6c <HAL_RCC_OscConfig+0x288>)
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	4a70      	ldr	r2, [pc, #448]	@ (8008d6c <HAL_RCC_OscConfig+0x288>)
 8008baa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008bae:	6013      	str	r3, [r2, #0]
 8008bb0:	4b6e      	ldr	r3, [pc, #440]	@ (8008d6c <HAL_RCC_OscConfig+0x288>)
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	4a6d      	ldr	r2, [pc, #436]	@ (8008d6c <HAL_RCC_OscConfig+0x288>)
 8008bb6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008bba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	685b      	ldr	r3, [r3, #4]
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d013      	beq.n	8008bec <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008bc4:	f7fc ffc4 	bl	8005b50 <HAL_GetTick>
 8008bc8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008bca:	e008      	b.n	8008bde <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008bcc:	f7fc ffc0 	bl	8005b50 <HAL_GetTick>
 8008bd0:	4602      	mov	r2, r0
 8008bd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008bd4:	1ad3      	subs	r3, r2, r3
 8008bd6:	2b64      	cmp	r3, #100	@ 0x64
 8008bd8:	d901      	bls.n	8008bde <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008bda:	2303      	movs	r3, #3
 8008bdc:	e3d4      	b.n	8009388 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008bde:	4b63      	ldr	r3, [pc, #396]	@ (8008d6c <HAL_RCC_OscConfig+0x288>)
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d0f0      	beq.n	8008bcc <HAL_RCC_OscConfig+0xe8>
 8008bea:	e014      	b.n	8008c16 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008bec:	f7fc ffb0 	bl	8005b50 <HAL_GetTick>
 8008bf0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008bf2:	e008      	b.n	8008c06 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008bf4:	f7fc ffac 	bl	8005b50 <HAL_GetTick>
 8008bf8:	4602      	mov	r2, r0
 8008bfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008bfc:	1ad3      	subs	r3, r2, r3
 8008bfe:	2b64      	cmp	r3, #100	@ 0x64
 8008c00:	d901      	bls.n	8008c06 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8008c02:	2303      	movs	r3, #3
 8008c04:	e3c0      	b.n	8009388 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008c06:	4b59      	ldr	r3, [pc, #356]	@ (8008d6c <HAL_RCC_OscConfig+0x288>)
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d1f0      	bne.n	8008bf4 <HAL_RCC_OscConfig+0x110>
 8008c12:	e000      	b.n	8008c16 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008c14:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	f003 0302 	and.w	r3, r3, #2
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	f000 80ca 	beq.w	8008db8 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008c24:	4b51      	ldr	r3, [pc, #324]	@ (8008d6c <HAL_RCC_OscConfig+0x288>)
 8008c26:	691b      	ldr	r3, [r3, #16]
 8008c28:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008c2c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008c2e:	4b4f      	ldr	r3, [pc, #316]	@ (8008d6c <HAL_RCC_OscConfig+0x288>)
 8008c30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c32:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8008c34:	6a3b      	ldr	r3, [r7, #32]
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d007      	beq.n	8008c4a <HAL_RCC_OscConfig+0x166>
 8008c3a:	6a3b      	ldr	r3, [r7, #32]
 8008c3c:	2b18      	cmp	r3, #24
 8008c3e:	d156      	bne.n	8008cee <HAL_RCC_OscConfig+0x20a>
 8008c40:	69fb      	ldr	r3, [r7, #28]
 8008c42:	f003 0303 	and.w	r3, r3, #3
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d151      	bne.n	8008cee <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008c4a:	4b48      	ldr	r3, [pc, #288]	@ (8008d6c <HAL_RCC_OscConfig+0x288>)
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	f003 0304 	and.w	r3, r3, #4
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d005      	beq.n	8008c62 <HAL_RCC_OscConfig+0x17e>
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	68db      	ldr	r3, [r3, #12]
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d101      	bne.n	8008c62 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8008c5e:	2301      	movs	r3, #1
 8008c60:	e392      	b.n	8009388 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008c62:	4b42      	ldr	r3, [pc, #264]	@ (8008d6c <HAL_RCC_OscConfig+0x288>)
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	f023 0219 	bic.w	r2, r3, #25
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	68db      	ldr	r3, [r3, #12]
 8008c6e:	493f      	ldr	r1, [pc, #252]	@ (8008d6c <HAL_RCC_OscConfig+0x288>)
 8008c70:	4313      	orrs	r3, r2
 8008c72:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008c74:	f7fc ff6c 	bl	8005b50 <HAL_GetTick>
 8008c78:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008c7a:	e008      	b.n	8008c8e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008c7c:	f7fc ff68 	bl	8005b50 <HAL_GetTick>
 8008c80:	4602      	mov	r2, r0
 8008c82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c84:	1ad3      	subs	r3, r2, r3
 8008c86:	2b02      	cmp	r3, #2
 8008c88:	d901      	bls.n	8008c8e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8008c8a:	2303      	movs	r3, #3
 8008c8c:	e37c      	b.n	8009388 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008c8e:	4b37      	ldr	r3, [pc, #220]	@ (8008d6c <HAL_RCC_OscConfig+0x288>)
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	f003 0304 	and.w	r3, r3, #4
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d0f0      	beq.n	8008c7c <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008c9a:	f7fc ff89 	bl	8005bb0 <HAL_GetREVID>
 8008c9e:	4603      	mov	r3, r0
 8008ca0:	f241 0203 	movw	r2, #4099	@ 0x1003
 8008ca4:	4293      	cmp	r3, r2
 8008ca6:	d817      	bhi.n	8008cd8 <HAL_RCC_OscConfig+0x1f4>
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	691b      	ldr	r3, [r3, #16]
 8008cac:	2b40      	cmp	r3, #64	@ 0x40
 8008cae:	d108      	bne.n	8008cc2 <HAL_RCC_OscConfig+0x1de>
 8008cb0:	4b2e      	ldr	r3, [pc, #184]	@ (8008d6c <HAL_RCC_OscConfig+0x288>)
 8008cb2:	685b      	ldr	r3, [r3, #4]
 8008cb4:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8008cb8:	4a2c      	ldr	r2, [pc, #176]	@ (8008d6c <HAL_RCC_OscConfig+0x288>)
 8008cba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008cbe:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008cc0:	e07a      	b.n	8008db8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008cc2:	4b2a      	ldr	r3, [pc, #168]	@ (8008d6c <HAL_RCC_OscConfig+0x288>)
 8008cc4:	685b      	ldr	r3, [r3, #4]
 8008cc6:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	691b      	ldr	r3, [r3, #16]
 8008cce:	031b      	lsls	r3, r3, #12
 8008cd0:	4926      	ldr	r1, [pc, #152]	@ (8008d6c <HAL_RCC_OscConfig+0x288>)
 8008cd2:	4313      	orrs	r3, r2
 8008cd4:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008cd6:	e06f      	b.n	8008db8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008cd8:	4b24      	ldr	r3, [pc, #144]	@ (8008d6c <HAL_RCC_OscConfig+0x288>)
 8008cda:	685b      	ldr	r3, [r3, #4]
 8008cdc:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	691b      	ldr	r3, [r3, #16]
 8008ce4:	061b      	lsls	r3, r3, #24
 8008ce6:	4921      	ldr	r1, [pc, #132]	@ (8008d6c <HAL_RCC_OscConfig+0x288>)
 8008ce8:	4313      	orrs	r3, r2
 8008cea:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008cec:	e064      	b.n	8008db8 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	68db      	ldr	r3, [r3, #12]
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d047      	beq.n	8008d86 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008cf6:	4b1d      	ldr	r3, [pc, #116]	@ (8008d6c <HAL_RCC_OscConfig+0x288>)
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	f023 0219 	bic.w	r2, r3, #25
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	68db      	ldr	r3, [r3, #12]
 8008d02:	491a      	ldr	r1, [pc, #104]	@ (8008d6c <HAL_RCC_OscConfig+0x288>)
 8008d04:	4313      	orrs	r3, r2
 8008d06:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008d08:	f7fc ff22 	bl	8005b50 <HAL_GetTick>
 8008d0c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008d0e:	e008      	b.n	8008d22 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008d10:	f7fc ff1e 	bl	8005b50 <HAL_GetTick>
 8008d14:	4602      	mov	r2, r0
 8008d16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d18:	1ad3      	subs	r3, r2, r3
 8008d1a:	2b02      	cmp	r3, #2
 8008d1c:	d901      	bls.n	8008d22 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8008d1e:	2303      	movs	r3, #3
 8008d20:	e332      	b.n	8009388 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008d22:	4b12      	ldr	r3, [pc, #72]	@ (8008d6c <HAL_RCC_OscConfig+0x288>)
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	f003 0304 	and.w	r3, r3, #4
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d0f0      	beq.n	8008d10 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008d2e:	f7fc ff3f 	bl	8005bb0 <HAL_GetREVID>
 8008d32:	4603      	mov	r3, r0
 8008d34:	f241 0203 	movw	r2, #4099	@ 0x1003
 8008d38:	4293      	cmp	r3, r2
 8008d3a:	d819      	bhi.n	8008d70 <HAL_RCC_OscConfig+0x28c>
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	691b      	ldr	r3, [r3, #16]
 8008d40:	2b40      	cmp	r3, #64	@ 0x40
 8008d42:	d108      	bne.n	8008d56 <HAL_RCC_OscConfig+0x272>
 8008d44:	4b09      	ldr	r3, [pc, #36]	@ (8008d6c <HAL_RCC_OscConfig+0x288>)
 8008d46:	685b      	ldr	r3, [r3, #4]
 8008d48:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8008d4c:	4a07      	ldr	r2, [pc, #28]	@ (8008d6c <HAL_RCC_OscConfig+0x288>)
 8008d4e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008d52:	6053      	str	r3, [r2, #4]
 8008d54:	e030      	b.n	8008db8 <HAL_RCC_OscConfig+0x2d4>
 8008d56:	4b05      	ldr	r3, [pc, #20]	@ (8008d6c <HAL_RCC_OscConfig+0x288>)
 8008d58:	685b      	ldr	r3, [r3, #4]
 8008d5a:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	691b      	ldr	r3, [r3, #16]
 8008d62:	031b      	lsls	r3, r3, #12
 8008d64:	4901      	ldr	r1, [pc, #4]	@ (8008d6c <HAL_RCC_OscConfig+0x288>)
 8008d66:	4313      	orrs	r3, r2
 8008d68:	604b      	str	r3, [r1, #4]
 8008d6a:	e025      	b.n	8008db8 <HAL_RCC_OscConfig+0x2d4>
 8008d6c:	58024400 	.word	0x58024400
 8008d70:	4b9a      	ldr	r3, [pc, #616]	@ (8008fdc <HAL_RCC_OscConfig+0x4f8>)
 8008d72:	685b      	ldr	r3, [r3, #4]
 8008d74:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	691b      	ldr	r3, [r3, #16]
 8008d7c:	061b      	lsls	r3, r3, #24
 8008d7e:	4997      	ldr	r1, [pc, #604]	@ (8008fdc <HAL_RCC_OscConfig+0x4f8>)
 8008d80:	4313      	orrs	r3, r2
 8008d82:	604b      	str	r3, [r1, #4]
 8008d84:	e018      	b.n	8008db8 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008d86:	4b95      	ldr	r3, [pc, #596]	@ (8008fdc <HAL_RCC_OscConfig+0x4f8>)
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	4a94      	ldr	r2, [pc, #592]	@ (8008fdc <HAL_RCC_OscConfig+0x4f8>)
 8008d8c:	f023 0301 	bic.w	r3, r3, #1
 8008d90:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008d92:	f7fc fedd 	bl	8005b50 <HAL_GetTick>
 8008d96:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008d98:	e008      	b.n	8008dac <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008d9a:	f7fc fed9 	bl	8005b50 <HAL_GetTick>
 8008d9e:	4602      	mov	r2, r0
 8008da0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008da2:	1ad3      	subs	r3, r2, r3
 8008da4:	2b02      	cmp	r3, #2
 8008da6:	d901      	bls.n	8008dac <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8008da8:	2303      	movs	r3, #3
 8008daa:	e2ed      	b.n	8009388 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008dac:	4b8b      	ldr	r3, [pc, #556]	@ (8008fdc <HAL_RCC_OscConfig+0x4f8>)
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	f003 0304 	and.w	r3, r3, #4
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d1f0      	bne.n	8008d9a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	f003 0310 	and.w	r3, r3, #16
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	f000 80a9 	beq.w	8008f18 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008dc6:	4b85      	ldr	r3, [pc, #532]	@ (8008fdc <HAL_RCC_OscConfig+0x4f8>)
 8008dc8:	691b      	ldr	r3, [r3, #16]
 8008dca:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008dce:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008dd0:	4b82      	ldr	r3, [pc, #520]	@ (8008fdc <HAL_RCC_OscConfig+0x4f8>)
 8008dd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008dd4:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8008dd6:	69bb      	ldr	r3, [r7, #24]
 8008dd8:	2b08      	cmp	r3, #8
 8008dda:	d007      	beq.n	8008dec <HAL_RCC_OscConfig+0x308>
 8008ddc:	69bb      	ldr	r3, [r7, #24]
 8008dde:	2b18      	cmp	r3, #24
 8008de0:	d13a      	bne.n	8008e58 <HAL_RCC_OscConfig+0x374>
 8008de2:	697b      	ldr	r3, [r7, #20]
 8008de4:	f003 0303 	and.w	r3, r3, #3
 8008de8:	2b01      	cmp	r3, #1
 8008dea:	d135      	bne.n	8008e58 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008dec:	4b7b      	ldr	r3, [pc, #492]	@ (8008fdc <HAL_RCC_OscConfig+0x4f8>)
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d005      	beq.n	8008e04 <HAL_RCC_OscConfig+0x320>
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	69db      	ldr	r3, [r3, #28]
 8008dfc:	2b80      	cmp	r3, #128	@ 0x80
 8008dfe:	d001      	beq.n	8008e04 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8008e00:	2301      	movs	r3, #1
 8008e02:	e2c1      	b.n	8009388 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008e04:	f7fc fed4 	bl	8005bb0 <HAL_GetREVID>
 8008e08:	4603      	mov	r3, r0
 8008e0a:	f241 0203 	movw	r2, #4099	@ 0x1003
 8008e0e:	4293      	cmp	r3, r2
 8008e10:	d817      	bhi.n	8008e42 <HAL_RCC_OscConfig+0x35e>
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	6a1b      	ldr	r3, [r3, #32]
 8008e16:	2b20      	cmp	r3, #32
 8008e18:	d108      	bne.n	8008e2c <HAL_RCC_OscConfig+0x348>
 8008e1a:	4b70      	ldr	r3, [pc, #448]	@ (8008fdc <HAL_RCC_OscConfig+0x4f8>)
 8008e1c:	685b      	ldr	r3, [r3, #4]
 8008e1e:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8008e22:	4a6e      	ldr	r2, [pc, #440]	@ (8008fdc <HAL_RCC_OscConfig+0x4f8>)
 8008e24:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008e28:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008e2a:	e075      	b.n	8008f18 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008e2c:	4b6b      	ldr	r3, [pc, #428]	@ (8008fdc <HAL_RCC_OscConfig+0x4f8>)
 8008e2e:	685b      	ldr	r3, [r3, #4]
 8008e30:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	6a1b      	ldr	r3, [r3, #32]
 8008e38:	069b      	lsls	r3, r3, #26
 8008e3a:	4968      	ldr	r1, [pc, #416]	@ (8008fdc <HAL_RCC_OscConfig+0x4f8>)
 8008e3c:	4313      	orrs	r3, r2
 8008e3e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008e40:	e06a      	b.n	8008f18 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008e42:	4b66      	ldr	r3, [pc, #408]	@ (8008fdc <HAL_RCC_OscConfig+0x4f8>)
 8008e44:	68db      	ldr	r3, [r3, #12]
 8008e46:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	6a1b      	ldr	r3, [r3, #32]
 8008e4e:	061b      	lsls	r3, r3, #24
 8008e50:	4962      	ldr	r1, [pc, #392]	@ (8008fdc <HAL_RCC_OscConfig+0x4f8>)
 8008e52:	4313      	orrs	r3, r2
 8008e54:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008e56:	e05f      	b.n	8008f18 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	69db      	ldr	r3, [r3, #28]
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d042      	beq.n	8008ee6 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8008e60:	4b5e      	ldr	r3, [pc, #376]	@ (8008fdc <HAL_RCC_OscConfig+0x4f8>)
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	4a5d      	ldr	r2, [pc, #372]	@ (8008fdc <HAL_RCC_OscConfig+0x4f8>)
 8008e66:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008e6a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008e6c:	f7fc fe70 	bl	8005b50 <HAL_GetTick>
 8008e70:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008e72:	e008      	b.n	8008e86 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8008e74:	f7fc fe6c 	bl	8005b50 <HAL_GetTick>
 8008e78:	4602      	mov	r2, r0
 8008e7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e7c:	1ad3      	subs	r3, r2, r3
 8008e7e:	2b02      	cmp	r3, #2
 8008e80:	d901      	bls.n	8008e86 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8008e82:	2303      	movs	r3, #3
 8008e84:	e280      	b.n	8009388 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008e86:	4b55      	ldr	r3, [pc, #340]	@ (8008fdc <HAL_RCC_OscConfig+0x4f8>)
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d0f0      	beq.n	8008e74 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008e92:	f7fc fe8d 	bl	8005bb0 <HAL_GetREVID>
 8008e96:	4603      	mov	r3, r0
 8008e98:	f241 0203 	movw	r2, #4099	@ 0x1003
 8008e9c:	4293      	cmp	r3, r2
 8008e9e:	d817      	bhi.n	8008ed0 <HAL_RCC_OscConfig+0x3ec>
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	6a1b      	ldr	r3, [r3, #32]
 8008ea4:	2b20      	cmp	r3, #32
 8008ea6:	d108      	bne.n	8008eba <HAL_RCC_OscConfig+0x3d6>
 8008ea8:	4b4c      	ldr	r3, [pc, #304]	@ (8008fdc <HAL_RCC_OscConfig+0x4f8>)
 8008eaa:	685b      	ldr	r3, [r3, #4]
 8008eac:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8008eb0:	4a4a      	ldr	r2, [pc, #296]	@ (8008fdc <HAL_RCC_OscConfig+0x4f8>)
 8008eb2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008eb6:	6053      	str	r3, [r2, #4]
 8008eb8:	e02e      	b.n	8008f18 <HAL_RCC_OscConfig+0x434>
 8008eba:	4b48      	ldr	r3, [pc, #288]	@ (8008fdc <HAL_RCC_OscConfig+0x4f8>)
 8008ebc:	685b      	ldr	r3, [r3, #4]
 8008ebe:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	6a1b      	ldr	r3, [r3, #32]
 8008ec6:	069b      	lsls	r3, r3, #26
 8008ec8:	4944      	ldr	r1, [pc, #272]	@ (8008fdc <HAL_RCC_OscConfig+0x4f8>)
 8008eca:	4313      	orrs	r3, r2
 8008ecc:	604b      	str	r3, [r1, #4]
 8008ece:	e023      	b.n	8008f18 <HAL_RCC_OscConfig+0x434>
 8008ed0:	4b42      	ldr	r3, [pc, #264]	@ (8008fdc <HAL_RCC_OscConfig+0x4f8>)
 8008ed2:	68db      	ldr	r3, [r3, #12]
 8008ed4:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	6a1b      	ldr	r3, [r3, #32]
 8008edc:	061b      	lsls	r3, r3, #24
 8008ede:	493f      	ldr	r1, [pc, #252]	@ (8008fdc <HAL_RCC_OscConfig+0x4f8>)
 8008ee0:	4313      	orrs	r3, r2
 8008ee2:	60cb      	str	r3, [r1, #12]
 8008ee4:	e018      	b.n	8008f18 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8008ee6:	4b3d      	ldr	r3, [pc, #244]	@ (8008fdc <HAL_RCC_OscConfig+0x4f8>)
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	4a3c      	ldr	r2, [pc, #240]	@ (8008fdc <HAL_RCC_OscConfig+0x4f8>)
 8008eec:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008ef0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008ef2:	f7fc fe2d 	bl	8005b50 <HAL_GetTick>
 8008ef6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008ef8:	e008      	b.n	8008f0c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8008efa:	f7fc fe29 	bl	8005b50 <HAL_GetTick>
 8008efe:	4602      	mov	r2, r0
 8008f00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f02:	1ad3      	subs	r3, r2, r3
 8008f04:	2b02      	cmp	r3, #2
 8008f06:	d901      	bls.n	8008f0c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8008f08:	2303      	movs	r3, #3
 8008f0a:	e23d      	b.n	8009388 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008f0c:	4b33      	ldr	r3, [pc, #204]	@ (8008fdc <HAL_RCC_OscConfig+0x4f8>)
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d1f0      	bne.n	8008efa <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	f003 0308 	and.w	r3, r3, #8
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d036      	beq.n	8008f92 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	695b      	ldr	r3, [r3, #20]
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d019      	beq.n	8008f60 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008f2c:	4b2b      	ldr	r3, [pc, #172]	@ (8008fdc <HAL_RCC_OscConfig+0x4f8>)
 8008f2e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008f30:	4a2a      	ldr	r2, [pc, #168]	@ (8008fdc <HAL_RCC_OscConfig+0x4f8>)
 8008f32:	f043 0301 	orr.w	r3, r3, #1
 8008f36:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008f38:	f7fc fe0a 	bl	8005b50 <HAL_GetTick>
 8008f3c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008f3e:	e008      	b.n	8008f52 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008f40:	f7fc fe06 	bl	8005b50 <HAL_GetTick>
 8008f44:	4602      	mov	r2, r0
 8008f46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f48:	1ad3      	subs	r3, r2, r3
 8008f4a:	2b02      	cmp	r3, #2
 8008f4c:	d901      	bls.n	8008f52 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8008f4e:	2303      	movs	r3, #3
 8008f50:	e21a      	b.n	8009388 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008f52:	4b22      	ldr	r3, [pc, #136]	@ (8008fdc <HAL_RCC_OscConfig+0x4f8>)
 8008f54:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008f56:	f003 0302 	and.w	r3, r3, #2
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d0f0      	beq.n	8008f40 <HAL_RCC_OscConfig+0x45c>
 8008f5e:	e018      	b.n	8008f92 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008f60:	4b1e      	ldr	r3, [pc, #120]	@ (8008fdc <HAL_RCC_OscConfig+0x4f8>)
 8008f62:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008f64:	4a1d      	ldr	r2, [pc, #116]	@ (8008fdc <HAL_RCC_OscConfig+0x4f8>)
 8008f66:	f023 0301 	bic.w	r3, r3, #1
 8008f6a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008f6c:	f7fc fdf0 	bl	8005b50 <HAL_GetTick>
 8008f70:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008f72:	e008      	b.n	8008f86 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008f74:	f7fc fdec 	bl	8005b50 <HAL_GetTick>
 8008f78:	4602      	mov	r2, r0
 8008f7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f7c:	1ad3      	subs	r3, r2, r3
 8008f7e:	2b02      	cmp	r3, #2
 8008f80:	d901      	bls.n	8008f86 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8008f82:	2303      	movs	r3, #3
 8008f84:	e200      	b.n	8009388 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008f86:	4b15      	ldr	r3, [pc, #84]	@ (8008fdc <HAL_RCC_OscConfig+0x4f8>)
 8008f88:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008f8a:	f003 0302 	and.w	r3, r3, #2
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d1f0      	bne.n	8008f74 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	f003 0320 	and.w	r3, r3, #32
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d039      	beq.n	8009012 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	699b      	ldr	r3, [r3, #24]
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d01c      	beq.n	8008fe0 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8008fa6:	4b0d      	ldr	r3, [pc, #52]	@ (8008fdc <HAL_RCC_OscConfig+0x4f8>)
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	4a0c      	ldr	r2, [pc, #48]	@ (8008fdc <HAL_RCC_OscConfig+0x4f8>)
 8008fac:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8008fb0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008fb2:	f7fc fdcd 	bl	8005b50 <HAL_GetTick>
 8008fb6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008fb8:	e008      	b.n	8008fcc <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008fba:	f7fc fdc9 	bl	8005b50 <HAL_GetTick>
 8008fbe:	4602      	mov	r2, r0
 8008fc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008fc2:	1ad3      	subs	r3, r2, r3
 8008fc4:	2b02      	cmp	r3, #2
 8008fc6:	d901      	bls.n	8008fcc <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8008fc8:	2303      	movs	r3, #3
 8008fca:	e1dd      	b.n	8009388 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008fcc:	4b03      	ldr	r3, [pc, #12]	@ (8008fdc <HAL_RCC_OscConfig+0x4f8>)
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d0f0      	beq.n	8008fba <HAL_RCC_OscConfig+0x4d6>
 8008fd8:	e01b      	b.n	8009012 <HAL_RCC_OscConfig+0x52e>
 8008fda:	bf00      	nop
 8008fdc:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8008fe0:	4b9b      	ldr	r3, [pc, #620]	@ (8009250 <HAL_RCC_OscConfig+0x76c>)
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	4a9a      	ldr	r2, [pc, #616]	@ (8009250 <HAL_RCC_OscConfig+0x76c>)
 8008fe6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008fea:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008fec:	f7fc fdb0 	bl	8005b50 <HAL_GetTick>
 8008ff0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008ff2:	e008      	b.n	8009006 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008ff4:	f7fc fdac 	bl	8005b50 <HAL_GetTick>
 8008ff8:	4602      	mov	r2, r0
 8008ffa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ffc:	1ad3      	subs	r3, r2, r3
 8008ffe:	2b02      	cmp	r3, #2
 8009000:	d901      	bls.n	8009006 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8009002:	2303      	movs	r3, #3
 8009004:	e1c0      	b.n	8009388 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8009006:	4b92      	ldr	r3, [pc, #584]	@ (8009250 <HAL_RCC_OscConfig+0x76c>)
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800900e:	2b00      	cmp	r3, #0
 8009010:	d1f0      	bne.n	8008ff4 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	f003 0304 	and.w	r3, r3, #4
 800901a:	2b00      	cmp	r3, #0
 800901c:	f000 8081 	beq.w	8009122 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8009020:	4b8c      	ldr	r3, [pc, #560]	@ (8009254 <HAL_RCC_OscConfig+0x770>)
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	4a8b      	ldr	r2, [pc, #556]	@ (8009254 <HAL_RCC_OscConfig+0x770>)
 8009026:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800902a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800902c:	f7fc fd90 	bl	8005b50 <HAL_GetTick>
 8009030:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009032:	e008      	b.n	8009046 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009034:	f7fc fd8c 	bl	8005b50 <HAL_GetTick>
 8009038:	4602      	mov	r2, r0
 800903a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800903c:	1ad3      	subs	r3, r2, r3
 800903e:	2b64      	cmp	r3, #100	@ 0x64
 8009040:	d901      	bls.n	8009046 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8009042:	2303      	movs	r3, #3
 8009044:	e1a0      	b.n	8009388 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009046:	4b83      	ldr	r3, [pc, #524]	@ (8009254 <HAL_RCC_OscConfig+0x770>)
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800904e:	2b00      	cmp	r3, #0
 8009050:	d0f0      	beq.n	8009034 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	689b      	ldr	r3, [r3, #8]
 8009056:	2b01      	cmp	r3, #1
 8009058:	d106      	bne.n	8009068 <HAL_RCC_OscConfig+0x584>
 800905a:	4b7d      	ldr	r3, [pc, #500]	@ (8009250 <HAL_RCC_OscConfig+0x76c>)
 800905c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800905e:	4a7c      	ldr	r2, [pc, #496]	@ (8009250 <HAL_RCC_OscConfig+0x76c>)
 8009060:	f043 0301 	orr.w	r3, r3, #1
 8009064:	6713      	str	r3, [r2, #112]	@ 0x70
 8009066:	e02d      	b.n	80090c4 <HAL_RCC_OscConfig+0x5e0>
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	689b      	ldr	r3, [r3, #8]
 800906c:	2b00      	cmp	r3, #0
 800906e:	d10c      	bne.n	800908a <HAL_RCC_OscConfig+0x5a6>
 8009070:	4b77      	ldr	r3, [pc, #476]	@ (8009250 <HAL_RCC_OscConfig+0x76c>)
 8009072:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009074:	4a76      	ldr	r2, [pc, #472]	@ (8009250 <HAL_RCC_OscConfig+0x76c>)
 8009076:	f023 0301 	bic.w	r3, r3, #1
 800907a:	6713      	str	r3, [r2, #112]	@ 0x70
 800907c:	4b74      	ldr	r3, [pc, #464]	@ (8009250 <HAL_RCC_OscConfig+0x76c>)
 800907e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009080:	4a73      	ldr	r2, [pc, #460]	@ (8009250 <HAL_RCC_OscConfig+0x76c>)
 8009082:	f023 0304 	bic.w	r3, r3, #4
 8009086:	6713      	str	r3, [r2, #112]	@ 0x70
 8009088:	e01c      	b.n	80090c4 <HAL_RCC_OscConfig+0x5e0>
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	689b      	ldr	r3, [r3, #8]
 800908e:	2b05      	cmp	r3, #5
 8009090:	d10c      	bne.n	80090ac <HAL_RCC_OscConfig+0x5c8>
 8009092:	4b6f      	ldr	r3, [pc, #444]	@ (8009250 <HAL_RCC_OscConfig+0x76c>)
 8009094:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009096:	4a6e      	ldr	r2, [pc, #440]	@ (8009250 <HAL_RCC_OscConfig+0x76c>)
 8009098:	f043 0304 	orr.w	r3, r3, #4
 800909c:	6713      	str	r3, [r2, #112]	@ 0x70
 800909e:	4b6c      	ldr	r3, [pc, #432]	@ (8009250 <HAL_RCC_OscConfig+0x76c>)
 80090a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80090a2:	4a6b      	ldr	r2, [pc, #428]	@ (8009250 <HAL_RCC_OscConfig+0x76c>)
 80090a4:	f043 0301 	orr.w	r3, r3, #1
 80090a8:	6713      	str	r3, [r2, #112]	@ 0x70
 80090aa:	e00b      	b.n	80090c4 <HAL_RCC_OscConfig+0x5e0>
 80090ac:	4b68      	ldr	r3, [pc, #416]	@ (8009250 <HAL_RCC_OscConfig+0x76c>)
 80090ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80090b0:	4a67      	ldr	r2, [pc, #412]	@ (8009250 <HAL_RCC_OscConfig+0x76c>)
 80090b2:	f023 0301 	bic.w	r3, r3, #1
 80090b6:	6713      	str	r3, [r2, #112]	@ 0x70
 80090b8:	4b65      	ldr	r3, [pc, #404]	@ (8009250 <HAL_RCC_OscConfig+0x76c>)
 80090ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80090bc:	4a64      	ldr	r2, [pc, #400]	@ (8009250 <HAL_RCC_OscConfig+0x76c>)
 80090be:	f023 0304 	bic.w	r3, r3, #4
 80090c2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	689b      	ldr	r3, [r3, #8]
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d015      	beq.n	80090f8 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80090cc:	f7fc fd40 	bl	8005b50 <HAL_GetTick>
 80090d0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80090d2:	e00a      	b.n	80090ea <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80090d4:	f7fc fd3c 	bl	8005b50 <HAL_GetTick>
 80090d8:	4602      	mov	r2, r0
 80090da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090dc:	1ad3      	subs	r3, r2, r3
 80090de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80090e2:	4293      	cmp	r3, r2
 80090e4:	d901      	bls.n	80090ea <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80090e6:	2303      	movs	r3, #3
 80090e8:	e14e      	b.n	8009388 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80090ea:	4b59      	ldr	r3, [pc, #356]	@ (8009250 <HAL_RCC_OscConfig+0x76c>)
 80090ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80090ee:	f003 0302 	and.w	r3, r3, #2
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d0ee      	beq.n	80090d4 <HAL_RCC_OscConfig+0x5f0>
 80090f6:	e014      	b.n	8009122 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80090f8:	f7fc fd2a 	bl	8005b50 <HAL_GetTick>
 80090fc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80090fe:	e00a      	b.n	8009116 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009100:	f7fc fd26 	bl	8005b50 <HAL_GetTick>
 8009104:	4602      	mov	r2, r0
 8009106:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009108:	1ad3      	subs	r3, r2, r3
 800910a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800910e:	4293      	cmp	r3, r2
 8009110:	d901      	bls.n	8009116 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8009112:	2303      	movs	r3, #3
 8009114:	e138      	b.n	8009388 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8009116:	4b4e      	ldr	r3, [pc, #312]	@ (8009250 <HAL_RCC_OscConfig+0x76c>)
 8009118:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800911a:	f003 0302 	and.w	r3, r3, #2
 800911e:	2b00      	cmp	r3, #0
 8009120:	d1ee      	bne.n	8009100 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009126:	2b00      	cmp	r3, #0
 8009128:	f000 812d 	beq.w	8009386 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800912c:	4b48      	ldr	r3, [pc, #288]	@ (8009250 <HAL_RCC_OscConfig+0x76c>)
 800912e:	691b      	ldr	r3, [r3, #16]
 8009130:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009134:	2b18      	cmp	r3, #24
 8009136:	f000 80bd 	beq.w	80092b4 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800913e:	2b02      	cmp	r3, #2
 8009140:	f040 809e 	bne.w	8009280 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009144:	4b42      	ldr	r3, [pc, #264]	@ (8009250 <HAL_RCC_OscConfig+0x76c>)
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	4a41      	ldr	r2, [pc, #260]	@ (8009250 <HAL_RCC_OscConfig+0x76c>)
 800914a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800914e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009150:	f7fc fcfe 	bl	8005b50 <HAL_GetTick>
 8009154:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009156:	e008      	b.n	800916a <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009158:	f7fc fcfa 	bl	8005b50 <HAL_GetTick>
 800915c:	4602      	mov	r2, r0
 800915e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009160:	1ad3      	subs	r3, r2, r3
 8009162:	2b02      	cmp	r3, #2
 8009164:	d901      	bls.n	800916a <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8009166:	2303      	movs	r3, #3
 8009168:	e10e      	b.n	8009388 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800916a:	4b39      	ldr	r3, [pc, #228]	@ (8009250 <HAL_RCC_OscConfig+0x76c>)
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009172:	2b00      	cmp	r3, #0
 8009174:	d1f0      	bne.n	8009158 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009176:	4b36      	ldr	r3, [pc, #216]	@ (8009250 <HAL_RCC_OscConfig+0x76c>)
 8009178:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800917a:	4b37      	ldr	r3, [pc, #220]	@ (8009258 <HAL_RCC_OscConfig+0x774>)
 800917c:	4013      	ands	r3, r2
 800917e:	687a      	ldr	r2, [r7, #4]
 8009180:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8009182:	687a      	ldr	r2, [r7, #4]
 8009184:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8009186:	0112      	lsls	r2, r2, #4
 8009188:	430a      	orrs	r2, r1
 800918a:	4931      	ldr	r1, [pc, #196]	@ (8009250 <HAL_RCC_OscConfig+0x76c>)
 800918c:	4313      	orrs	r3, r2
 800918e:	628b      	str	r3, [r1, #40]	@ 0x28
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009194:	3b01      	subs	r3, #1
 8009196:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800919e:	3b01      	subs	r3, #1
 80091a0:	025b      	lsls	r3, r3, #9
 80091a2:	b29b      	uxth	r3, r3
 80091a4:	431a      	orrs	r2, r3
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80091aa:	3b01      	subs	r3, #1
 80091ac:	041b      	lsls	r3, r3, #16
 80091ae:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80091b2:	431a      	orrs	r2, r3
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80091b8:	3b01      	subs	r3, #1
 80091ba:	061b      	lsls	r3, r3, #24
 80091bc:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80091c0:	4923      	ldr	r1, [pc, #140]	@ (8009250 <HAL_RCC_OscConfig+0x76c>)
 80091c2:	4313      	orrs	r3, r2
 80091c4:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80091c6:	4b22      	ldr	r3, [pc, #136]	@ (8009250 <HAL_RCC_OscConfig+0x76c>)
 80091c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80091ca:	4a21      	ldr	r2, [pc, #132]	@ (8009250 <HAL_RCC_OscConfig+0x76c>)
 80091cc:	f023 0301 	bic.w	r3, r3, #1
 80091d0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80091d2:	4b1f      	ldr	r3, [pc, #124]	@ (8009250 <HAL_RCC_OscConfig+0x76c>)
 80091d4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80091d6:	4b21      	ldr	r3, [pc, #132]	@ (800925c <HAL_RCC_OscConfig+0x778>)
 80091d8:	4013      	ands	r3, r2
 80091da:	687a      	ldr	r2, [r7, #4]
 80091dc:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80091de:	00d2      	lsls	r2, r2, #3
 80091e0:	491b      	ldr	r1, [pc, #108]	@ (8009250 <HAL_RCC_OscConfig+0x76c>)
 80091e2:	4313      	orrs	r3, r2
 80091e4:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80091e6:	4b1a      	ldr	r3, [pc, #104]	@ (8009250 <HAL_RCC_OscConfig+0x76c>)
 80091e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80091ea:	f023 020c 	bic.w	r2, r3, #12
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80091f2:	4917      	ldr	r1, [pc, #92]	@ (8009250 <HAL_RCC_OscConfig+0x76c>)
 80091f4:	4313      	orrs	r3, r2
 80091f6:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80091f8:	4b15      	ldr	r3, [pc, #84]	@ (8009250 <HAL_RCC_OscConfig+0x76c>)
 80091fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80091fc:	f023 0202 	bic.w	r2, r3, #2
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009204:	4912      	ldr	r1, [pc, #72]	@ (8009250 <HAL_RCC_OscConfig+0x76c>)
 8009206:	4313      	orrs	r3, r2
 8009208:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800920a:	4b11      	ldr	r3, [pc, #68]	@ (8009250 <HAL_RCC_OscConfig+0x76c>)
 800920c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800920e:	4a10      	ldr	r2, [pc, #64]	@ (8009250 <HAL_RCC_OscConfig+0x76c>)
 8009210:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009214:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009216:	4b0e      	ldr	r3, [pc, #56]	@ (8009250 <HAL_RCC_OscConfig+0x76c>)
 8009218:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800921a:	4a0d      	ldr	r2, [pc, #52]	@ (8009250 <HAL_RCC_OscConfig+0x76c>)
 800921c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009220:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8009222:	4b0b      	ldr	r3, [pc, #44]	@ (8009250 <HAL_RCC_OscConfig+0x76c>)
 8009224:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009226:	4a0a      	ldr	r2, [pc, #40]	@ (8009250 <HAL_RCC_OscConfig+0x76c>)
 8009228:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800922c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800922e:	4b08      	ldr	r3, [pc, #32]	@ (8009250 <HAL_RCC_OscConfig+0x76c>)
 8009230:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009232:	4a07      	ldr	r2, [pc, #28]	@ (8009250 <HAL_RCC_OscConfig+0x76c>)
 8009234:	f043 0301 	orr.w	r3, r3, #1
 8009238:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800923a:	4b05      	ldr	r3, [pc, #20]	@ (8009250 <HAL_RCC_OscConfig+0x76c>)
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	4a04      	ldr	r2, [pc, #16]	@ (8009250 <HAL_RCC_OscConfig+0x76c>)
 8009240:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8009244:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009246:	f7fc fc83 	bl	8005b50 <HAL_GetTick>
 800924a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800924c:	e011      	b.n	8009272 <HAL_RCC_OscConfig+0x78e>
 800924e:	bf00      	nop
 8009250:	58024400 	.word	0x58024400
 8009254:	58024800 	.word	0x58024800
 8009258:	fffffc0c 	.word	0xfffffc0c
 800925c:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009260:	f7fc fc76 	bl	8005b50 <HAL_GetTick>
 8009264:	4602      	mov	r2, r0
 8009266:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009268:	1ad3      	subs	r3, r2, r3
 800926a:	2b02      	cmp	r3, #2
 800926c:	d901      	bls.n	8009272 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800926e:	2303      	movs	r3, #3
 8009270:	e08a      	b.n	8009388 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009272:	4b47      	ldr	r3, [pc, #284]	@ (8009390 <HAL_RCC_OscConfig+0x8ac>)
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800927a:	2b00      	cmp	r3, #0
 800927c:	d0f0      	beq.n	8009260 <HAL_RCC_OscConfig+0x77c>
 800927e:	e082      	b.n	8009386 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009280:	4b43      	ldr	r3, [pc, #268]	@ (8009390 <HAL_RCC_OscConfig+0x8ac>)
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	4a42      	ldr	r2, [pc, #264]	@ (8009390 <HAL_RCC_OscConfig+0x8ac>)
 8009286:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800928a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800928c:	f7fc fc60 	bl	8005b50 <HAL_GetTick>
 8009290:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009292:	e008      	b.n	80092a6 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009294:	f7fc fc5c 	bl	8005b50 <HAL_GetTick>
 8009298:	4602      	mov	r2, r0
 800929a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800929c:	1ad3      	subs	r3, r2, r3
 800929e:	2b02      	cmp	r3, #2
 80092a0:	d901      	bls.n	80092a6 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80092a2:	2303      	movs	r3, #3
 80092a4:	e070      	b.n	8009388 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80092a6:	4b3a      	ldr	r3, [pc, #232]	@ (8009390 <HAL_RCC_OscConfig+0x8ac>)
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d1f0      	bne.n	8009294 <HAL_RCC_OscConfig+0x7b0>
 80092b2:	e068      	b.n	8009386 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80092b4:	4b36      	ldr	r3, [pc, #216]	@ (8009390 <HAL_RCC_OscConfig+0x8ac>)
 80092b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80092b8:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80092ba:	4b35      	ldr	r3, [pc, #212]	@ (8009390 <HAL_RCC_OscConfig+0x8ac>)
 80092bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80092be:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80092c4:	2b01      	cmp	r3, #1
 80092c6:	d031      	beq.n	800932c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80092c8:	693b      	ldr	r3, [r7, #16]
 80092ca:	f003 0203 	and.w	r2, r3, #3
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80092d2:	429a      	cmp	r2, r3
 80092d4:	d12a      	bne.n	800932c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80092d6:	693b      	ldr	r3, [r7, #16]
 80092d8:	091b      	lsrs	r3, r3, #4
 80092da:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80092e2:	429a      	cmp	r2, r3
 80092e4:	d122      	bne.n	800932c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80092f0:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80092f2:	429a      	cmp	r2, r3
 80092f4:	d11a      	bne.n	800932c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	0a5b      	lsrs	r3, r3, #9
 80092fa:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009302:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8009304:	429a      	cmp	r2, r3
 8009306:	d111      	bne.n	800932c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	0c1b      	lsrs	r3, r3, #16
 800930c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009314:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8009316:	429a      	cmp	r2, r3
 8009318:	d108      	bne.n	800932c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	0e1b      	lsrs	r3, r3, #24
 800931e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009326:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8009328:	429a      	cmp	r2, r3
 800932a:	d001      	beq.n	8009330 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800932c:	2301      	movs	r3, #1
 800932e:	e02b      	b.n	8009388 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8009330:	4b17      	ldr	r3, [pc, #92]	@ (8009390 <HAL_RCC_OscConfig+0x8ac>)
 8009332:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009334:	08db      	lsrs	r3, r3, #3
 8009336:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800933a:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009340:	693a      	ldr	r2, [r7, #16]
 8009342:	429a      	cmp	r2, r3
 8009344:	d01f      	beq.n	8009386 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8009346:	4b12      	ldr	r3, [pc, #72]	@ (8009390 <HAL_RCC_OscConfig+0x8ac>)
 8009348:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800934a:	4a11      	ldr	r2, [pc, #68]	@ (8009390 <HAL_RCC_OscConfig+0x8ac>)
 800934c:	f023 0301 	bic.w	r3, r3, #1
 8009350:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8009352:	f7fc fbfd 	bl	8005b50 <HAL_GetTick>
 8009356:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8009358:	bf00      	nop
 800935a:	f7fc fbf9 	bl	8005b50 <HAL_GetTick>
 800935e:	4602      	mov	r2, r0
 8009360:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009362:	4293      	cmp	r3, r2
 8009364:	d0f9      	beq.n	800935a <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8009366:	4b0a      	ldr	r3, [pc, #40]	@ (8009390 <HAL_RCC_OscConfig+0x8ac>)
 8009368:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800936a:	4b0a      	ldr	r3, [pc, #40]	@ (8009394 <HAL_RCC_OscConfig+0x8b0>)
 800936c:	4013      	ands	r3, r2
 800936e:	687a      	ldr	r2, [r7, #4]
 8009370:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8009372:	00d2      	lsls	r2, r2, #3
 8009374:	4906      	ldr	r1, [pc, #24]	@ (8009390 <HAL_RCC_OscConfig+0x8ac>)
 8009376:	4313      	orrs	r3, r2
 8009378:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800937a:	4b05      	ldr	r3, [pc, #20]	@ (8009390 <HAL_RCC_OscConfig+0x8ac>)
 800937c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800937e:	4a04      	ldr	r2, [pc, #16]	@ (8009390 <HAL_RCC_OscConfig+0x8ac>)
 8009380:	f043 0301 	orr.w	r3, r3, #1
 8009384:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8009386:	2300      	movs	r3, #0
}
 8009388:	4618      	mov	r0, r3
 800938a:	3730      	adds	r7, #48	@ 0x30
 800938c:	46bd      	mov	sp, r7
 800938e:	bd80      	pop	{r7, pc}
 8009390:	58024400 	.word	0x58024400
 8009394:	ffff0007 	.word	0xffff0007

08009398 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009398:	b580      	push	{r7, lr}
 800939a:	b086      	sub	sp, #24
 800939c:	af00      	add	r7, sp, #0
 800939e:	6078      	str	r0, [r7, #4]
 80093a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	d101      	bne.n	80093ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80093a8:	2301      	movs	r3, #1
 80093aa:	e19c      	b.n	80096e6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80093ac:	4b8a      	ldr	r3, [pc, #552]	@ (80095d8 <HAL_RCC_ClockConfig+0x240>)
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	f003 030f 	and.w	r3, r3, #15
 80093b4:	683a      	ldr	r2, [r7, #0]
 80093b6:	429a      	cmp	r2, r3
 80093b8:	d910      	bls.n	80093dc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80093ba:	4b87      	ldr	r3, [pc, #540]	@ (80095d8 <HAL_RCC_ClockConfig+0x240>)
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	f023 020f 	bic.w	r2, r3, #15
 80093c2:	4985      	ldr	r1, [pc, #532]	@ (80095d8 <HAL_RCC_ClockConfig+0x240>)
 80093c4:	683b      	ldr	r3, [r7, #0]
 80093c6:	4313      	orrs	r3, r2
 80093c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80093ca:	4b83      	ldr	r3, [pc, #524]	@ (80095d8 <HAL_RCC_ClockConfig+0x240>)
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	f003 030f 	and.w	r3, r3, #15
 80093d2:	683a      	ldr	r2, [r7, #0]
 80093d4:	429a      	cmp	r2, r3
 80093d6:	d001      	beq.n	80093dc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80093d8:	2301      	movs	r3, #1
 80093da:	e184      	b.n	80096e6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	f003 0304 	and.w	r3, r3, #4
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d010      	beq.n	800940a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	691a      	ldr	r2, [r3, #16]
 80093ec:	4b7b      	ldr	r3, [pc, #492]	@ (80095dc <HAL_RCC_ClockConfig+0x244>)
 80093ee:	699b      	ldr	r3, [r3, #24]
 80093f0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80093f4:	429a      	cmp	r2, r3
 80093f6:	d908      	bls.n	800940a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80093f8:	4b78      	ldr	r3, [pc, #480]	@ (80095dc <HAL_RCC_ClockConfig+0x244>)
 80093fa:	699b      	ldr	r3, [r3, #24]
 80093fc:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	691b      	ldr	r3, [r3, #16]
 8009404:	4975      	ldr	r1, [pc, #468]	@ (80095dc <HAL_RCC_ClockConfig+0x244>)
 8009406:	4313      	orrs	r3, r2
 8009408:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	f003 0308 	and.w	r3, r3, #8
 8009412:	2b00      	cmp	r3, #0
 8009414:	d010      	beq.n	8009438 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	695a      	ldr	r2, [r3, #20]
 800941a:	4b70      	ldr	r3, [pc, #448]	@ (80095dc <HAL_RCC_ClockConfig+0x244>)
 800941c:	69db      	ldr	r3, [r3, #28]
 800941e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8009422:	429a      	cmp	r2, r3
 8009424:	d908      	bls.n	8009438 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8009426:	4b6d      	ldr	r3, [pc, #436]	@ (80095dc <HAL_RCC_ClockConfig+0x244>)
 8009428:	69db      	ldr	r3, [r3, #28]
 800942a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	695b      	ldr	r3, [r3, #20]
 8009432:	496a      	ldr	r1, [pc, #424]	@ (80095dc <HAL_RCC_ClockConfig+0x244>)
 8009434:	4313      	orrs	r3, r2
 8009436:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	f003 0310 	and.w	r3, r3, #16
 8009440:	2b00      	cmp	r3, #0
 8009442:	d010      	beq.n	8009466 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	699a      	ldr	r2, [r3, #24]
 8009448:	4b64      	ldr	r3, [pc, #400]	@ (80095dc <HAL_RCC_ClockConfig+0x244>)
 800944a:	69db      	ldr	r3, [r3, #28]
 800944c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8009450:	429a      	cmp	r2, r3
 8009452:	d908      	bls.n	8009466 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8009454:	4b61      	ldr	r3, [pc, #388]	@ (80095dc <HAL_RCC_ClockConfig+0x244>)
 8009456:	69db      	ldr	r3, [r3, #28]
 8009458:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	699b      	ldr	r3, [r3, #24]
 8009460:	495e      	ldr	r1, [pc, #376]	@ (80095dc <HAL_RCC_ClockConfig+0x244>)
 8009462:	4313      	orrs	r3, r2
 8009464:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	f003 0320 	and.w	r3, r3, #32
 800946e:	2b00      	cmp	r3, #0
 8009470:	d010      	beq.n	8009494 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	69da      	ldr	r2, [r3, #28]
 8009476:	4b59      	ldr	r3, [pc, #356]	@ (80095dc <HAL_RCC_ClockConfig+0x244>)
 8009478:	6a1b      	ldr	r3, [r3, #32]
 800947a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800947e:	429a      	cmp	r2, r3
 8009480:	d908      	bls.n	8009494 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8009482:	4b56      	ldr	r3, [pc, #344]	@ (80095dc <HAL_RCC_ClockConfig+0x244>)
 8009484:	6a1b      	ldr	r3, [r3, #32]
 8009486:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	69db      	ldr	r3, [r3, #28]
 800948e:	4953      	ldr	r1, [pc, #332]	@ (80095dc <HAL_RCC_ClockConfig+0x244>)
 8009490:	4313      	orrs	r3, r2
 8009492:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	f003 0302 	and.w	r3, r3, #2
 800949c:	2b00      	cmp	r3, #0
 800949e:	d010      	beq.n	80094c2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	68da      	ldr	r2, [r3, #12]
 80094a4:	4b4d      	ldr	r3, [pc, #308]	@ (80095dc <HAL_RCC_ClockConfig+0x244>)
 80094a6:	699b      	ldr	r3, [r3, #24]
 80094a8:	f003 030f 	and.w	r3, r3, #15
 80094ac:	429a      	cmp	r2, r3
 80094ae:	d908      	bls.n	80094c2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80094b0:	4b4a      	ldr	r3, [pc, #296]	@ (80095dc <HAL_RCC_ClockConfig+0x244>)
 80094b2:	699b      	ldr	r3, [r3, #24]
 80094b4:	f023 020f 	bic.w	r2, r3, #15
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	68db      	ldr	r3, [r3, #12]
 80094bc:	4947      	ldr	r1, [pc, #284]	@ (80095dc <HAL_RCC_ClockConfig+0x244>)
 80094be:	4313      	orrs	r3, r2
 80094c0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	f003 0301 	and.w	r3, r3, #1
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d055      	beq.n	800957a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80094ce:	4b43      	ldr	r3, [pc, #268]	@ (80095dc <HAL_RCC_ClockConfig+0x244>)
 80094d0:	699b      	ldr	r3, [r3, #24]
 80094d2:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	689b      	ldr	r3, [r3, #8]
 80094da:	4940      	ldr	r1, [pc, #256]	@ (80095dc <HAL_RCC_ClockConfig+0x244>)
 80094dc:	4313      	orrs	r3, r2
 80094de:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	685b      	ldr	r3, [r3, #4]
 80094e4:	2b02      	cmp	r3, #2
 80094e6:	d107      	bne.n	80094f8 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80094e8:	4b3c      	ldr	r3, [pc, #240]	@ (80095dc <HAL_RCC_ClockConfig+0x244>)
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	d121      	bne.n	8009538 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80094f4:	2301      	movs	r3, #1
 80094f6:	e0f6      	b.n	80096e6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	685b      	ldr	r3, [r3, #4]
 80094fc:	2b03      	cmp	r3, #3
 80094fe:	d107      	bne.n	8009510 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009500:	4b36      	ldr	r3, [pc, #216]	@ (80095dc <HAL_RCC_ClockConfig+0x244>)
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009508:	2b00      	cmp	r3, #0
 800950a:	d115      	bne.n	8009538 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800950c:	2301      	movs	r3, #1
 800950e:	e0ea      	b.n	80096e6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	685b      	ldr	r3, [r3, #4]
 8009514:	2b01      	cmp	r3, #1
 8009516:	d107      	bne.n	8009528 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009518:	4b30      	ldr	r3, [pc, #192]	@ (80095dc <HAL_RCC_ClockConfig+0x244>)
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009520:	2b00      	cmp	r3, #0
 8009522:	d109      	bne.n	8009538 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8009524:	2301      	movs	r3, #1
 8009526:	e0de      	b.n	80096e6 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009528:	4b2c      	ldr	r3, [pc, #176]	@ (80095dc <HAL_RCC_ClockConfig+0x244>)
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	f003 0304 	and.w	r3, r3, #4
 8009530:	2b00      	cmp	r3, #0
 8009532:	d101      	bne.n	8009538 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8009534:	2301      	movs	r3, #1
 8009536:	e0d6      	b.n	80096e6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8009538:	4b28      	ldr	r3, [pc, #160]	@ (80095dc <HAL_RCC_ClockConfig+0x244>)
 800953a:	691b      	ldr	r3, [r3, #16]
 800953c:	f023 0207 	bic.w	r2, r3, #7
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	685b      	ldr	r3, [r3, #4]
 8009544:	4925      	ldr	r1, [pc, #148]	@ (80095dc <HAL_RCC_ClockConfig+0x244>)
 8009546:	4313      	orrs	r3, r2
 8009548:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800954a:	f7fc fb01 	bl	8005b50 <HAL_GetTick>
 800954e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009550:	e00a      	b.n	8009568 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009552:	f7fc fafd 	bl	8005b50 <HAL_GetTick>
 8009556:	4602      	mov	r2, r0
 8009558:	697b      	ldr	r3, [r7, #20]
 800955a:	1ad3      	subs	r3, r2, r3
 800955c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009560:	4293      	cmp	r3, r2
 8009562:	d901      	bls.n	8009568 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8009564:	2303      	movs	r3, #3
 8009566:	e0be      	b.n	80096e6 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009568:	4b1c      	ldr	r3, [pc, #112]	@ (80095dc <HAL_RCC_ClockConfig+0x244>)
 800956a:	691b      	ldr	r3, [r3, #16]
 800956c:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	685b      	ldr	r3, [r3, #4]
 8009574:	00db      	lsls	r3, r3, #3
 8009576:	429a      	cmp	r2, r3
 8009578:	d1eb      	bne.n	8009552 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	f003 0302 	and.w	r3, r3, #2
 8009582:	2b00      	cmp	r3, #0
 8009584:	d010      	beq.n	80095a8 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	68da      	ldr	r2, [r3, #12]
 800958a:	4b14      	ldr	r3, [pc, #80]	@ (80095dc <HAL_RCC_ClockConfig+0x244>)
 800958c:	699b      	ldr	r3, [r3, #24]
 800958e:	f003 030f 	and.w	r3, r3, #15
 8009592:	429a      	cmp	r2, r3
 8009594:	d208      	bcs.n	80095a8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009596:	4b11      	ldr	r3, [pc, #68]	@ (80095dc <HAL_RCC_ClockConfig+0x244>)
 8009598:	699b      	ldr	r3, [r3, #24]
 800959a:	f023 020f 	bic.w	r2, r3, #15
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	68db      	ldr	r3, [r3, #12]
 80095a2:	490e      	ldr	r1, [pc, #56]	@ (80095dc <HAL_RCC_ClockConfig+0x244>)
 80095a4:	4313      	orrs	r3, r2
 80095a6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80095a8:	4b0b      	ldr	r3, [pc, #44]	@ (80095d8 <HAL_RCC_ClockConfig+0x240>)
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	f003 030f 	and.w	r3, r3, #15
 80095b0:	683a      	ldr	r2, [r7, #0]
 80095b2:	429a      	cmp	r2, r3
 80095b4:	d214      	bcs.n	80095e0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80095b6:	4b08      	ldr	r3, [pc, #32]	@ (80095d8 <HAL_RCC_ClockConfig+0x240>)
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	f023 020f 	bic.w	r2, r3, #15
 80095be:	4906      	ldr	r1, [pc, #24]	@ (80095d8 <HAL_RCC_ClockConfig+0x240>)
 80095c0:	683b      	ldr	r3, [r7, #0]
 80095c2:	4313      	orrs	r3, r2
 80095c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80095c6:	4b04      	ldr	r3, [pc, #16]	@ (80095d8 <HAL_RCC_ClockConfig+0x240>)
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	f003 030f 	and.w	r3, r3, #15
 80095ce:	683a      	ldr	r2, [r7, #0]
 80095d0:	429a      	cmp	r2, r3
 80095d2:	d005      	beq.n	80095e0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80095d4:	2301      	movs	r3, #1
 80095d6:	e086      	b.n	80096e6 <HAL_RCC_ClockConfig+0x34e>
 80095d8:	52002000 	.word	0x52002000
 80095dc:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	f003 0304 	and.w	r3, r3, #4
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	d010      	beq.n	800960e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	691a      	ldr	r2, [r3, #16]
 80095f0:	4b3f      	ldr	r3, [pc, #252]	@ (80096f0 <HAL_RCC_ClockConfig+0x358>)
 80095f2:	699b      	ldr	r3, [r3, #24]
 80095f4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80095f8:	429a      	cmp	r2, r3
 80095fa:	d208      	bcs.n	800960e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80095fc:	4b3c      	ldr	r3, [pc, #240]	@ (80096f0 <HAL_RCC_ClockConfig+0x358>)
 80095fe:	699b      	ldr	r3, [r3, #24]
 8009600:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	691b      	ldr	r3, [r3, #16]
 8009608:	4939      	ldr	r1, [pc, #228]	@ (80096f0 <HAL_RCC_ClockConfig+0x358>)
 800960a:	4313      	orrs	r3, r2
 800960c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	f003 0308 	and.w	r3, r3, #8
 8009616:	2b00      	cmp	r3, #0
 8009618:	d010      	beq.n	800963c <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	695a      	ldr	r2, [r3, #20]
 800961e:	4b34      	ldr	r3, [pc, #208]	@ (80096f0 <HAL_RCC_ClockConfig+0x358>)
 8009620:	69db      	ldr	r3, [r3, #28]
 8009622:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8009626:	429a      	cmp	r2, r3
 8009628:	d208      	bcs.n	800963c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800962a:	4b31      	ldr	r3, [pc, #196]	@ (80096f0 <HAL_RCC_ClockConfig+0x358>)
 800962c:	69db      	ldr	r3, [r3, #28]
 800962e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	695b      	ldr	r3, [r3, #20]
 8009636:	492e      	ldr	r1, [pc, #184]	@ (80096f0 <HAL_RCC_ClockConfig+0x358>)
 8009638:	4313      	orrs	r3, r2
 800963a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	f003 0310 	and.w	r3, r3, #16
 8009644:	2b00      	cmp	r3, #0
 8009646:	d010      	beq.n	800966a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	699a      	ldr	r2, [r3, #24]
 800964c:	4b28      	ldr	r3, [pc, #160]	@ (80096f0 <HAL_RCC_ClockConfig+0x358>)
 800964e:	69db      	ldr	r3, [r3, #28]
 8009650:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8009654:	429a      	cmp	r2, r3
 8009656:	d208      	bcs.n	800966a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8009658:	4b25      	ldr	r3, [pc, #148]	@ (80096f0 <HAL_RCC_ClockConfig+0x358>)
 800965a:	69db      	ldr	r3, [r3, #28]
 800965c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	699b      	ldr	r3, [r3, #24]
 8009664:	4922      	ldr	r1, [pc, #136]	@ (80096f0 <HAL_RCC_ClockConfig+0x358>)
 8009666:	4313      	orrs	r3, r2
 8009668:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	f003 0320 	and.w	r3, r3, #32
 8009672:	2b00      	cmp	r3, #0
 8009674:	d010      	beq.n	8009698 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	69da      	ldr	r2, [r3, #28]
 800967a:	4b1d      	ldr	r3, [pc, #116]	@ (80096f0 <HAL_RCC_ClockConfig+0x358>)
 800967c:	6a1b      	ldr	r3, [r3, #32]
 800967e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8009682:	429a      	cmp	r2, r3
 8009684:	d208      	bcs.n	8009698 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8009686:	4b1a      	ldr	r3, [pc, #104]	@ (80096f0 <HAL_RCC_ClockConfig+0x358>)
 8009688:	6a1b      	ldr	r3, [r3, #32]
 800968a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	69db      	ldr	r3, [r3, #28]
 8009692:	4917      	ldr	r1, [pc, #92]	@ (80096f0 <HAL_RCC_ClockConfig+0x358>)
 8009694:	4313      	orrs	r3, r2
 8009696:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8009698:	f000 f834 	bl	8009704 <HAL_RCC_GetSysClockFreq>
 800969c:	4602      	mov	r2, r0
 800969e:	4b14      	ldr	r3, [pc, #80]	@ (80096f0 <HAL_RCC_ClockConfig+0x358>)
 80096a0:	699b      	ldr	r3, [r3, #24]
 80096a2:	0a1b      	lsrs	r3, r3, #8
 80096a4:	f003 030f 	and.w	r3, r3, #15
 80096a8:	4912      	ldr	r1, [pc, #72]	@ (80096f4 <HAL_RCC_ClockConfig+0x35c>)
 80096aa:	5ccb      	ldrb	r3, [r1, r3]
 80096ac:	f003 031f 	and.w	r3, r3, #31
 80096b0:	fa22 f303 	lsr.w	r3, r2, r3
 80096b4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80096b6:	4b0e      	ldr	r3, [pc, #56]	@ (80096f0 <HAL_RCC_ClockConfig+0x358>)
 80096b8:	699b      	ldr	r3, [r3, #24]
 80096ba:	f003 030f 	and.w	r3, r3, #15
 80096be:	4a0d      	ldr	r2, [pc, #52]	@ (80096f4 <HAL_RCC_ClockConfig+0x35c>)
 80096c0:	5cd3      	ldrb	r3, [r2, r3]
 80096c2:	f003 031f 	and.w	r3, r3, #31
 80096c6:	693a      	ldr	r2, [r7, #16]
 80096c8:	fa22 f303 	lsr.w	r3, r2, r3
 80096cc:	4a0a      	ldr	r2, [pc, #40]	@ (80096f8 <HAL_RCC_ClockConfig+0x360>)
 80096ce:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80096d0:	4a0a      	ldr	r2, [pc, #40]	@ (80096fc <HAL_RCC_ClockConfig+0x364>)
 80096d2:	693b      	ldr	r3, [r7, #16]
 80096d4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80096d6:	4b0a      	ldr	r3, [pc, #40]	@ (8009700 <HAL_RCC_ClockConfig+0x368>)
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	4618      	mov	r0, r3
 80096dc:	f7fc f9ee 	bl	8005abc <HAL_InitTick>
 80096e0:	4603      	mov	r3, r0
 80096e2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80096e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80096e6:	4618      	mov	r0, r3
 80096e8:	3718      	adds	r7, #24
 80096ea:	46bd      	mov	sp, r7
 80096ec:	bd80      	pop	{r7, pc}
 80096ee:	bf00      	nop
 80096f0:	58024400 	.word	0x58024400
 80096f4:	080148ac 	.word	0x080148ac
 80096f8:	2400005c 	.word	0x2400005c
 80096fc:	24000058 	.word	0x24000058
 8009700:	24000060 	.word	0x24000060

08009704 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009704:	b480      	push	{r7}
 8009706:	b089      	sub	sp, #36	@ 0x24
 8009708:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800970a:	4bb3      	ldr	r3, [pc, #716]	@ (80099d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800970c:	691b      	ldr	r3, [r3, #16]
 800970e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009712:	2b18      	cmp	r3, #24
 8009714:	f200 8155 	bhi.w	80099c2 <HAL_RCC_GetSysClockFreq+0x2be>
 8009718:	a201      	add	r2, pc, #4	@ (adr r2, 8009720 <HAL_RCC_GetSysClockFreq+0x1c>)
 800971a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800971e:	bf00      	nop
 8009720:	08009785 	.word	0x08009785
 8009724:	080099c3 	.word	0x080099c3
 8009728:	080099c3 	.word	0x080099c3
 800972c:	080099c3 	.word	0x080099c3
 8009730:	080099c3 	.word	0x080099c3
 8009734:	080099c3 	.word	0x080099c3
 8009738:	080099c3 	.word	0x080099c3
 800973c:	080099c3 	.word	0x080099c3
 8009740:	080097ab 	.word	0x080097ab
 8009744:	080099c3 	.word	0x080099c3
 8009748:	080099c3 	.word	0x080099c3
 800974c:	080099c3 	.word	0x080099c3
 8009750:	080099c3 	.word	0x080099c3
 8009754:	080099c3 	.word	0x080099c3
 8009758:	080099c3 	.word	0x080099c3
 800975c:	080099c3 	.word	0x080099c3
 8009760:	080097b1 	.word	0x080097b1
 8009764:	080099c3 	.word	0x080099c3
 8009768:	080099c3 	.word	0x080099c3
 800976c:	080099c3 	.word	0x080099c3
 8009770:	080099c3 	.word	0x080099c3
 8009774:	080099c3 	.word	0x080099c3
 8009778:	080099c3 	.word	0x080099c3
 800977c:	080099c3 	.word	0x080099c3
 8009780:	080097b7 	.word	0x080097b7
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009784:	4b94      	ldr	r3, [pc, #592]	@ (80099d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	f003 0320 	and.w	r3, r3, #32
 800978c:	2b00      	cmp	r3, #0
 800978e:	d009      	beq.n	80097a4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009790:	4b91      	ldr	r3, [pc, #580]	@ (80099d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	08db      	lsrs	r3, r3, #3
 8009796:	f003 0303 	and.w	r3, r3, #3
 800979a:	4a90      	ldr	r2, [pc, #576]	@ (80099dc <HAL_RCC_GetSysClockFreq+0x2d8>)
 800979c:	fa22 f303 	lsr.w	r3, r2, r3
 80097a0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80097a2:	e111      	b.n	80099c8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80097a4:	4b8d      	ldr	r3, [pc, #564]	@ (80099dc <HAL_RCC_GetSysClockFreq+0x2d8>)
 80097a6:	61bb      	str	r3, [r7, #24]
      break;
 80097a8:	e10e      	b.n	80099c8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80097aa:	4b8d      	ldr	r3, [pc, #564]	@ (80099e0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80097ac:	61bb      	str	r3, [r7, #24]
      break;
 80097ae:	e10b      	b.n	80099c8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80097b0:	4b8c      	ldr	r3, [pc, #560]	@ (80099e4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80097b2:	61bb      	str	r3, [r7, #24]
      break;
 80097b4:	e108      	b.n	80099c8 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80097b6:	4b88      	ldr	r3, [pc, #544]	@ (80099d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80097b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80097ba:	f003 0303 	and.w	r3, r3, #3
 80097be:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80097c0:	4b85      	ldr	r3, [pc, #532]	@ (80099d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80097c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80097c4:	091b      	lsrs	r3, r3, #4
 80097c6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80097ca:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80097cc:	4b82      	ldr	r3, [pc, #520]	@ (80099d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80097ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80097d0:	f003 0301 	and.w	r3, r3, #1
 80097d4:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80097d6:	4b80      	ldr	r3, [pc, #512]	@ (80099d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80097d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80097da:	08db      	lsrs	r3, r3, #3
 80097dc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80097e0:	68fa      	ldr	r2, [r7, #12]
 80097e2:	fb02 f303 	mul.w	r3, r2, r3
 80097e6:	ee07 3a90 	vmov	s15, r3
 80097ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80097ee:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80097f2:	693b      	ldr	r3, [r7, #16]
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	f000 80e1 	beq.w	80099bc <HAL_RCC_GetSysClockFreq+0x2b8>
 80097fa:	697b      	ldr	r3, [r7, #20]
 80097fc:	2b02      	cmp	r3, #2
 80097fe:	f000 8083 	beq.w	8009908 <HAL_RCC_GetSysClockFreq+0x204>
 8009802:	697b      	ldr	r3, [r7, #20]
 8009804:	2b02      	cmp	r3, #2
 8009806:	f200 80a1 	bhi.w	800994c <HAL_RCC_GetSysClockFreq+0x248>
 800980a:	697b      	ldr	r3, [r7, #20]
 800980c:	2b00      	cmp	r3, #0
 800980e:	d003      	beq.n	8009818 <HAL_RCC_GetSysClockFreq+0x114>
 8009810:	697b      	ldr	r3, [r7, #20]
 8009812:	2b01      	cmp	r3, #1
 8009814:	d056      	beq.n	80098c4 <HAL_RCC_GetSysClockFreq+0x1c0>
 8009816:	e099      	b.n	800994c <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009818:	4b6f      	ldr	r3, [pc, #444]	@ (80099d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	f003 0320 	and.w	r3, r3, #32
 8009820:	2b00      	cmp	r3, #0
 8009822:	d02d      	beq.n	8009880 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009824:	4b6c      	ldr	r3, [pc, #432]	@ (80099d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	08db      	lsrs	r3, r3, #3
 800982a:	f003 0303 	and.w	r3, r3, #3
 800982e:	4a6b      	ldr	r2, [pc, #428]	@ (80099dc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009830:	fa22 f303 	lsr.w	r3, r2, r3
 8009834:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	ee07 3a90 	vmov	s15, r3
 800983c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009840:	693b      	ldr	r3, [r7, #16]
 8009842:	ee07 3a90 	vmov	s15, r3
 8009846:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800984a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800984e:	4b62      	ldr	r3, [pc, #392]	@ (80099d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009850:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009852:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009856:	ee07 3a90 	vmov	s15, r3
 800985a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800985e:	ed97 6a02 	vldr	s12, [r7, #8]
 8009862:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80099e8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009866:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800986a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800986e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009872:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009876:	ee67 7a27 	vmul.f32	s15, s14, s15
 800987a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800987e:	e087      	b.n	8009990 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009880:	693b      	ldr	r3, [r7, #16]
 8009882:	ee07 3a90 	vmov	s15, r3
 8009886:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800988a:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80099ec <HAL_RCC_GetSysClockFreq+0x2e8>
 800988e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009892:	4b51      	ldr	r3, [pc, #324]	@ (80099d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009894:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009896:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800989a:	ee07 3a90 	vmov	s15, r3
 800989e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80098a2:	ed97 6a02 	vldr	s12, [r7, #8]
 80098a6:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80099e8 <HAL_RCC_GetSysClockFreq+0x2e4>
 80098aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80098ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80098b2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80098b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80098ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80098be:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80098c2:	e065      	b.n	8009990 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80098c4:	693b      	ldr	r3, [r7, #16]
 80098c6:	ee07 3a90 	vmov	s15, r3
 80098ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80098ce:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80099f0 <HAL_RCC_GetSysClockFreq+0x2ec>
 80098d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80098d6:	4b40      	ldr	r3, [pc, #256]	@ (80099d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80098d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80098da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80098de:	ee07 3a90 	vmov	s15, r3
 80098e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80098e6:	ed97 6a02 	vldr	s12, [r7, #8]
 80098ea:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80099e8 <HAL_RCC_GetSysClockFreq+0x2e4>
 80098ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80098f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80098f6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80098fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80098fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009902:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8009906:	e043      	b.n	8009990 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009908:	693b      	ldr	r3, [r7, #16]
 800990a:	ee07 3a90 	vmov	s15, r3
 800990e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009912:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80099f4 <HAL_RCC_GetSysClockFreq+0x2f0>
 8009916:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800991a:	4b2f      	ldr	r3, [pc, #188]	@ (80099d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800991c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800991e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009922:	ee07 3a90 	vmov	s15, r3
 8009926:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800992a:	ed97 6a02 	vldr	s12, [r7, #8]
 800992e:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80099e8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009932:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009936:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800993a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800993e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009942:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009946:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800994a:	e021      	b.n	8009990 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800994c:	693b      	ldr	r3, [r7, #16]
 800994e:	ee07 3a90 	vmov	s15, r3
 8009952:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009956:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80099f0 <HAL_RCC_GetSysClockFreq+0x2ec>
 800995a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800995e:	4b1e      	ldr	r3, [pc, #120]	@ (80099d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009960:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009962:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009966:	ee07 3a90 	vmov	s15, r3
 800996a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800996e:	ed97 6a02 	vldr	s12, [r7, #8]
 8009972:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80099e8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009976:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800997a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800997e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009982:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009986:	ee67 7a27 	vmul.f32	s15, s14, s15
 800998a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800998e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8009990:	4b11      	ldr	r3, [pc, #68]	@ (80099d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009992:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009994:	0a5b      	lsrs	r3, r3, #9
 8009996:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800999a:	3301      	adds	r3, #1
 800999c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800999e:	683b      	ldr	r3, [r7, #0]
 80099a0:	ee07 3a90 	vmov	s15, r3
 80099a4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80099a8:	edd7 6a07 	vldr	s13, [r7, #28]
 80099ac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80099b0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80099b4:	ee17 3a90 	vmov	r3, s15
 80099b8:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80099ba:	e005      	b.n	80099c8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80099bc:	2300      	movs	r3, #0
 80099be:	61bb      	str	r3, [r7, #24]
      break;
 80099c0:	e002      	b.n	80099c8 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80099c2:	4b07      	ldr	r3, [pc, #28]	@ (80099e0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80099c4:	61bb      	str	r3, [r7, #24]
      break;
 80099c6:	bf00      	nop
  }

  return sysclockfreq;
 80099c8:	69bb      	ldr	r3, [r7, #24]
}
 80099ca:	4618      	mov	r0, r3
 80099cc:	3724      	adds	r7, #36	@ 0x24
 80099ce:	46bd      	mov	sp, r7
 80099d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099d4:	4770      	bx	lr
 80099d6:	bf00      	nop
 80099d8:	58024400 	.word	0x58024400
 80099dc:	03d09000 	.word	0x03d09000
 80099e0:	003d0900 	.word	0x003d0900
 80099e4:	017d7840 	.word	0x017d7840
 80099e8:	46000000 	.word	0x46000000
 80099ec:	4c742400 	.word	0x4c742400
 80099f0:	4a742400 	.word	0x4a742400
 80099f4:	4bbebc20 	.word	0x4bbebc20

080099f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80099f8:	b580      	push	{r7, lr}
 80099fa:	b082      	sub	sp, #8
 80099fc:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80099fe:	f7ff fe81 	bl	8009704 <HAL_RCC_GetSysClockFreq>
 8009a02:	4602      	mov	r2, r0
 8009a04:	4b10      	ldr	r3, [pc, #64]	@ (8009a48 <HAL_RCC_GetHCLKFreq+0x50>)
 8009a06:	699b      	ldr	r3, [r3, #24]
 8009a08:	0a1b      	lsrs	r3, r3, #8
 8009a0a:	f003 030f 	and.w	r3, r3, #15
 8009a0e:	490f      	ldr	r1, [pc, #60]	@ (8009a4c <HAL_RCC_GetHCLKFreq+0x54>)
 8009a10:	5ccb      	ldrb	r3, [r1, r3]
 8009a12:	f003 031f 	and.w	r3, r3, #31
 8009a16:	fa22 f303 	lsr.w	r3, r2, r3
 8009a1a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009a1c:	4b0a      	ldr	r3, [pc, #40]	@ (8009a48 <HAL_RCC_GetHCLKFreq+0x50>)
 8009a1e:	699b      	ldr	r3, [r3, #24]
 8009a20:	f003 030f 	and.w	r3, r3, #15
 8009a24:	4a09      	ldr	r2, [pc, #36]	@ (8009a4c <HAL_RCC_GetHCLKFreq+0x54>)
 8009a26:	5cd3      	ldrb	r3, [r2, r3]
 8009a28:	f003 031f 	and.w	r3, r3, #31
 8009a2c:	687a      	ldr	r2, [r7, #4]
 8009a2e:	fa22 f303 	lsr.w	r3, r2, r3
 8009a32:	4a07      	ldr	r2, [pc, #28]	@ (8009a50 <HAL_RCC_GetHCLKFreq+0x58>)
 8009a34:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8009a36:	4a07      	ldr	r2, [pc, #28]	@ (8009a54 <HAL_RCC_GetHCLKFreq+0x5c>)
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8009a3c:	4b04      	ldr	r3, [pc, #16]	@ (8009a50 <HAL_RCC_GetHCLKFreq+0x58>)
 8009a3e:	681b      	ldr	r3, [r3, #0]
}
 8009a40:	4618      	mov	r0, r3
 8009a42:	3708      	adds	r7, #8
 8009a44:	46bd      	mov	sp, r7
 8009a46:	bd80      	pop	{r7, pc}
 8009a48:	58024400 	.word	0x58024400
 8009a4c:	080148ac 	.word	0x080148ac
 8009a50:	2400005c 	.word	0x2400005c
 8009a54:	24000058 	.word	0x24000058

08009a58 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009a58:	b580      	push	{r7, lr}
 8009a5a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8009a5c:	f7ff ffcc 	bl	80099f8 <HAL_RCC_GetHCLKFreq>
 8009a60:	4602      	mov	r2, r0
 8009a62:	4b06      	ldr	r3, [pc, #24]	@ (8009a7c <HAL_RCC_GetPCLK1Freq+0x24>)
 8009a64:	69db      	ldr	r3, [r3, #28]
 8009a66:	091b      	lsrs	r3, r3, #4
 8009a68:	f003 0307 	and.w	r3, r3, #7
 8009a6c:	4904      	ldr	r1, [pc, #16]	@ (8009a80 <HAL_RCC_GetPCLK1Freq+0x28>)
 8009a6e:	5ccb      	ldrb	r3, [r1, r3]
 8009a70:	f003 031f 	and.w	r3, r3, #31
 8009a74:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8009a78:	4618      	mov	r0, r3
 8009a7a:	bd80      	pop	{r7, pc}
 8009a7c:	58024400 	.word	0x58024400
 8009a80:	080148ac 	.word	0x080148ac

08009a84 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009a84:	b580      	push	{r7, lr}
 8009a86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8009a88:	f7ff ffb6 	bl	80099f8 <HAL_RCC_GetHCLKFreq>
 8009a8c:	4602      	mov	r2, r0
 8009a8e:	4b06      	ldr	r3, [pc, #24]	@ (8009aa8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009a90:	69db      	ldr	r3, [r3, #28]
 8009a92:	0a1b      	lsrs	r3, r3, #8
 8009a94:	f003 0307 	and.w	r3, r3, #7
 8009a98:	4904      	ldr	r1, [pc, #16]	@ (8009aac <HAL_RCC_GetPCLK2Freq+0x28>)
 8009a9a:	5ccb      	ldrb	r3, [r1, r3]
 8009a9c:	f003 031f 	and.w	r3, r3, #31
 8009aa0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8009aa4:	4618      	mov	r0, r3
 8009aa6:	bd80      	pop	{r7, pc}
 8009aa8:	58024400 	.word	0x58024400
 8009aac:	080148ac 	.word	0x080148ac

08009ab0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009ab0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009ab4:	b0ca      	sub	sp, #296	@ 0x128
 8009ab6:	af00      	add	r7, sp, #0
 8009ab8:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8009abc:	2300      	movs	r3, #0
 8009abe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8009ac2:	2300      	movs	r3, #0
 8009ac4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8009ac8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009acc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ad0:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8009ad4:	2500      	movs	r5, #0
 8009ad6:	ea54 0305 	orrs.w	r3, r4, r5
 8009ada:	d049      	beq.n	8009b70 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8009adc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009ae0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009ae2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8009ae6:	d02f      	beq.n	8009b48 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8009ae8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8009aec:	d828      	bhi.n	8009b40 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8009aee:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009af2:	d01a      	beq.n	8009b2a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8009af4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009af8:	d822      	bhi.n	8009b40 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	d003      	beq.n	8009b06 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8009afe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009b02:	d007      	beq.n	8009b14 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8009b04:	e01c      	b.n	8009b40 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009b06:	4bb8      	ldr	r3, [pc, #736]	@ (8009de8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009b08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b0a:	4ab7      	ldr	r2, [pc, #732]	@ (8009de8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009b0c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009b10:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8009b12:	e01a      	b.n	8009b4a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009b14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009b18:	3308      	adds	r3, #8
 8009b1a:	2102      	movs	r1, #2
 8009b1c:	4618      	mov	r0, r3
 8009b1e:	f002 fb61 	bl	800c1e4 <RCCEx_PLL2_Config>
 8009b22:	4603      	mov	r3, r0
 8009b24:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8009b28:	e00f      	b.n	8009b4a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009b2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009b2e:	3328      	adds	r3, #40	@ 0x28
 8009b30:	2102      	movs	r1, #2
 8009b32:	4618      	mov	r0, r3
 8009b34:	f002 fc08 	bl	800c348 <RCCEx_PLL3_Config>
 8009b38:	4603      	mov	r3, r0
 8009b3a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8009b3e:	e004      	b.n	8009b4a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009b40:	2301      	movs	r3, #1
 8009b42:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009b46:	e000      	b.n	8009b4a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8009b48:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009b4a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	d10a      	bne.n	8009b68 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8009b52:	4ba5      	ldr	r3, [pc, #660]	@ (8009de8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009b54:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009b56:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8009b5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009b5e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009b60:	4aa1      	ldr	r2, [pc, #644]	@ (8009de8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009b62:	430b      	orrs	r3, r1
 8009b64:	6513      	str	r3, [r2, #80]	@ 0x50
 8009b66:	e003      	b.n	8009b70 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009b68:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009b6c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8009b70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009b74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b78:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8009b7c:	f04f 0900 	mov.w	r9, #0
 8009b80:	ea58 0309 	orrs.w	r3, r8, r9
 8009b84:	d047      	beq.n	8009c16 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8009b86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009b8a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009b8c:	2b04      	cmp	r3, #4
 8009b8e:	d82a      	bhi.n	8009be6 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8009b90:	a201      	add	r2, pc, #4	@ (adr r2, 8009b98 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8009b92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b96:	bf00      	nop
 8009b98:	08009bad 	.word	0x08009bad
 8009b9c:	08009bbb 	.word	0x08009bbb
 8009ba0:	08009bd1 	.word	0x08009bd1
 8009ba4:	08009bef 	.word	0x08009bef
 8009ba8:	08009bef 	.word	0x08009bef
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009bac:	4b8e      	ldr	r3, [pc, #568]	@ (8009de8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009bae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009bb0:	4a8d      	ldr	r2, [pc, #564]	@ (8009de8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009bb2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009bb6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009bb8:	e01a      	b.n	8009bf0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009bba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009bbe:	3308      	adds	r3, #8
 8009bc0:	2100      	movs	r1, #0
 8009bc2:	4618      	mov	r0, r3
 8009bc4:	f002 fb0e 	bl	800c1e4 <RCCEx_PLL2_Config>
 8009bc8:	4603      	mov	r3, r0
 8009bca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009bce:	e00f      	b.n	8009bf0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009bd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009bd4:	3328      	adds	r3, #40	@ 0x28
 8009bd6:	2100      	movs	r1, #0
 8009bd8:	4618      	mov	r0, r3
 8009bda:	f002 fbb5 	bl	800c348 <RCCEx_PLL3_Config>
 8009bde:	4603      	mov	r3, r0
 8009be0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009be4:	e004      	b.n	8009bf0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009be6:	2301      	movs	r3, #1
 8009be8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009bec:	e000      	b.n	8009bf0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8009bee:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009bf0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	d10a      	bne.n	8009c0e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009bf8:	4b7b      	ldr	r3, [pc, #492]	@ (8009de8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009bfa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009bfc:	f023 0107 	bic.w	r1, r3, #7
 8009c00:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009c04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009c06:	4a78      	ldr	r2, [pc, #480]	@ (8009de8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009c08:	430b      	orrs	r3, r1
 8009c0a:	6513      	str	r3, [r2, #80]	@ 0x50
 8009c0c:	e003      	b.n	8009c16 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009c0e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009c12:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8009c16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009c1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c1e:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8009c22:	f04f 0b00 	mov.w	fp, #0
 8009c26:	ea5a 030b 	orrs.w	r3, sl, fp
 8009c2a:	d04c      	beq.n	8009cc6 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8009c2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009c30:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009c32:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009c36:	d030      	beq.n	8009c9a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8009c38:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009c3c:	d829      	bhi.n	8009c92 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8009c3e:	2bc0      	cmp	r3, #192	@ 0xc0
 8009c40:	d02d      	beq.n	8009c9e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8009c42:	2bc0      	cmp	r3, #192	@ 0xc0
 8009c44:	d825      	bhi.n	8009c92 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8009c46:	2b80      	cmp	r3, #128	@ 0x80
 8009c48:	d018      	beq.n	8009c7c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8009c4a:	2b80      	cmp	r3, #128	@ 0x80
 8009c4c:	d821      	bhi.n	8009c92 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d002      	beq.n	8009c58 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8009c52:	2b40      	cmp	r3, #64	@ 0x40
 8009c54:	d007      	beq.n	8009c66 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8009c56:	e01c      	b.n	8009c92 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009c58:	4b63      	ldr	r3, [pc, #396]	@ (8009de8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009c5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c5c:	4a62      	ldr	r2, [pc, #392]	@ (8009de8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009c5e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009c62:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8009c64:	e01c      	b.n	8009ca0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009c66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009c6a:	3308      	adds	r3, #8
 8009c6c:	2100      	movs	r1, #0
 8009c6e:	4618      	mov	r0, r3
 8009c70:	f002 fab8 	bl	800c1e4 <RCCEx_PLL2_Config>
 8009c74:	4603      	mov	r3, r0
 8009c76:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8009c7a:	e011      	b.n	8009ca0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009c7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009c80:	3328      	adds	r3, #40	@ 0x28
 8009c82:	2100      	movs	r1, #0
 8009c84:	4618      	mov	r0, r3
 8009c86:	f002 fb5f 	bl	800c348 <RCCEx_PLL3_Config>
 8009c8a:	4603      	mov	r3, r0
 8009c8c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8009c90:	e006      	b.n	8009ca0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009c92:	2301      	movs	r3, #1
 8009c94:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009c98:	e002      	b.n	8009ca0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8009c9a:	bf00      	nop
 8009c9c:	e000      	b.n	8009ca0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8009c9e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009ca0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	d10a      	bne.n	8009cbe <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8009ca8:	4b4f      	ldr	r3, [pc, #316]	@ (8009de8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009caa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009cac:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8009cb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009cb4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009cb6:	4a4c      	ldr	r2, [pc, #304]	@ (8009de8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009cb8:	430b      	orrs	r3, r1
 8009cba:	6513      	str	r3, [r2, #80]	@ 0x50
 8009cbc:	e003      	b.n	8009cc6 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009cbe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009cc2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8009cc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009cca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cce:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8009cd2:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8009cd6:	2300      	movs	r3, #0
 8009cd8:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8009cdc:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8009ce0:	460b      	mov	r3, r1
 8009ce2:	4313      	orrs	r3, r2
 8009ce4:	d053      	beq.n	8009d8e <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8009ce6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009cea:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8009cee:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8009cf2:	d035      	beq.n	8009d60 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8009cf4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8009cf8:	d82e      	bhi.n	8009d58 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8009cfa:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8009cfe:	d031      	beq.n	8009d64 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8009d00:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8009d04:	d828      	bhi.n	8009d58 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8009d06:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009d0a:	d01a      	beq.n	8009d42 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8009d0c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009d10:	d822      	bhi.n	8009d58 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	d003      	beq.n	8009d1e <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8009d16:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009d1a:	d007      	beq.n	8009d2c <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8009d1c:	e01c      	b.n	8009d58 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009d1e:	4b32      	ldr	r3, [pc, #200]	@ (8009de8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009d20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d22:	4a31      	ldr	r2, [pc, #196]	@ (8009de8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009d24:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009d28:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009d2a:	e01c      	b.n	8009d66 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009d2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009d30:	3308      	adds	r3, #8
 8009d32:	2100      	movs	r1, #0
 8009d34:	4618      	mov	r0, r3
 8009d36:	f002 fa55 	bl	800c1e4 <RCCEx_PLL2_Config>
 8009d3a:	4603      	mov	r3, r0
 8009d3c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8009d40:	e011      	b.n	8009d66 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009d42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009d46:	3328      	adds	r3, #40	@ 0x28
 8009d48:	2100      	movs	r1, #0
 8009d4a:	4618      	mov	r0, r3
 8009d4c:	f002 fafc 	bl	800c348 <RCCEx_PLL3_Config>
 8009d50:	4603      	mov	r3, r0
 8009d52:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009d56:	e006      	b.n	8009d66 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8009d58:	2301      	movs	r3, #1
 8009d5a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009d5e:	e002      	b.n	8009d66 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8009d60:	bf00      	nop
 8009d62:	e000      	b.n	8009d66 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8009d64:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009d66:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	d10b      	bne.n	8009d86 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8009d6e:	4b1e      	ldr	r3, [pc, #120]	@ (8009de8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009d70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009d72:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8009d76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009d7a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8009d7e:	4a1a      	ldr	r2, [pc, #104]	@ (8009de8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009d80:	430b      	orrs	r3, r1
 8009d82:	6593      	str	r3, [r2, #88]	@ 0x58
 8009d84:	e003      	b.n	8009d8e <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009d86:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009d8a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8009d8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009d92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d96:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8009d9a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8009d9e:	2300      	movs	r3, #0
 8009da0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8009da4:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8009da8:	460b      	mov	r3, r1
 8009daa:	4313      	orrs	r3, r2
 8009dac:	d056      	beq.n	8009e5c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8009dae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009db2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8009db6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009dba:	d038      	beq.n	8009e2e <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8009dbc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009dc0:	d831      	bhi.n	8009e26 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8009dc2:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8009dc6:	d034      	beq.n	8009e32 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8009dc8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8009dcc:	d82b      	bhi.n	8009e26 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8009dce:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009dd2:	d01d      	beq.n	8009e10 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8009dd4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009dd8:	d825      	bhi.n	8009e26 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	d006      	beq.n	8009dec <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8009dde:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009de2:	d00a      	beq.n	8009dfa <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8009de4:	e01f      	b.n	8009e26 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8009de6:	bf00      	nop
 8009de8:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009dec:	4ba2      	ldr	r3, [pc, #648]	@ (800a078 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009dee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009df0:	4aa1      	ldr	r2, [pc, #644]	@ (800a078 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009df2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009df6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009df8:	e01c      	b.n	8009e34 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009dfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009dfe:	3308      	adds	r3, #8
 8009e00:	2100      	movs	r1, #0
 8009e02:	4618      	mov	r0, r3
 8009e04:	f002 f9ee 	bl	800c1e4 <RCCEx_PLL2_Config>
 8009e08:	4603      	mov	r3, r0
 8009e0a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8009e0e:	e011      	b.n	8009e34 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009e10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009e14:	3328      	adds	r3, #40	@ 0x28
 8009e16:	2100      	movs	r1, #0
 8009e18:	4618      	mov	r0, r3
 8009e1a:	f002 fa95 	bl	800c348 <RCCEx_PLL3_Config>
 8009e1e:	4603      	mov	r3, r0
 8009e20:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009e24:	e006      	b.n	8009e34 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8009e26:	2301      	movs	r3, #1
 8009e28:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009e2c:	e002      	b.n	8009e34 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8009e2e:	bf00      	nop
 8009e30:	e000      	b.n	8009e34 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8009e32:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009e34:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d10b      	bne.n	8009e54 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8009e3c:	4b8e      	ldr	r3, [pc, #568]	@ (800a078 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009e3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009e40:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8009e44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009e48:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8009e4c:	4a8a      	ldr	r2, [pc, #552]	@ (800a078 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009e4e:	430b      	orrs	r3, r1
 8009e50:	6593      	str	r3, [r2, #88]	@ 0x58
 8009e52:	e003      	b.n	8009e5c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009e54:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009e58:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8009e5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009e60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e64:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8009e68:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8009e6c:	2300      	movs	r3, #0
 8009e6e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8009e72:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8009e76:	460b      	mov	r3, r1
 8009e78:	4313      	orrs	r3, r2
 8009e7a:	d03a      	beq.n	8009ef2 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8009e7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009e80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009e82:	2b30      	cmp	r3, #48	@ 0x30
 8009e84:	d01f      	beq.n	8009ec6 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8009e86:	2b30      	cmp	r3, #48	@ 0x30
 8009e88:	d819      	bhi.n	8009ebe <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8009e8a:	2b20      	cmp	r3, #32
 8009e8c:	d00c      	beq.n	8009ea8 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8009e8e:	2b20      	cmp	r3, #32
 8009e90:	d815      	bhi.n	8009ebe <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d019      	beq.n	8009eca <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8009e96:	2b10      	cmp	r3, #16
 8009e98:	d111      	bne.n	8009ebe <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009e9a:	4b77      	ldr	r3, [pc, #476]	@ (800a078 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009e9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e9e:	4a76      	ldr	r2, [pc, #472]	@ (800a078 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009ea0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009ea4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8009ea6:	e011      	b.n	8009ecc <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009ea8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009eac:	3308      	adds	r3, #8
 8009eae:	2102      	movs	r1, #2
 8009eb0:	4618      	mov	r0, r3
 8009eb2:	f002 f997 	bl	800c1e4 <RCCEx_PLL2_Config>
 8009eb6:	4603      	mov	r3, r0
 8009eb8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8009ebc:	e006      	b.n	8009ecc <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8009ebe:	2301      	movs	r3, #1
 8009ec0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009ec4:	e002      	b.n	8009ecc <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8009ec6:	bf00      	nop
 8009ec8:	e000      	b.n	8009ecc <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8009eca:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009ecc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	d10a      	bne.n	8009eea <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8009ed4:	4b68      	ldr	r3, [pc, #416]	@ (800a078 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009ed6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009ed8:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8009edc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009ee0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009ee2:	4a65      	ldr	r2, [pc, #404]	@ (800a078 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009ee4:	430b      	orrs	r3, r1
 8009ee6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8009ee8:	e003      	b.n	8009ef2 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009eea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009eee:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8009ef2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009ef6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009efa:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8009efe:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8009f02:	2300      	movs	r3, #0
 8009f04:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8009f08:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8009f0c:	460b      	mov	r3, r1
 8009f0e:	4313      	orrs	r3, r2
 8009f10:	d051      	beq.n	8009fb6 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8009f12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009f16:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009f18:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009f1c:	d035      	beq.n	8009f8a <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8009f1e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009f22:	d82e      	bhi.n	8009f82 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8009f24:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8009f28:	d031      	beq.n	8009f8e <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8009f2a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8009f2e:	d828      	bhi.n	8009f82 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8009f30:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009f34:	d01a      	beq.n	8009f6c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8009f36:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009f3a:	d822      	bhi.n	8009f82 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	d003      	beq.n	8009f48 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8009f40:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009f44:	d007      	beq.n	8009f56 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8009f46:	e01c      	b.n	8009f82 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009f48:	4b4b      	ldr	r3, [pc, #300]	@ (800a078 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009f4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f4c:	4a4a      	ldr	r2, [pc, #296]	@ (800a078 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009f4e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009f52:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8009f54:	e01c      	b.n	8009f90 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009f56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009f5a:	3308      	adds	r3, #8
 8009f5c:	2100      	movs	r1, #0
 8009f5e:	4618      	mov	r0, r3
 8009f60:	f002 f940 	bl	800c1e4 <RCCEx_PLL2_Config>
 8009f64:	4603      	mov	r3, r0
 8009f66:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8009f6a:	e011      	b.n	8009f90 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009f6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009f70:	3328      	adds	r3, #40	@ 0x28
 8009f72:	2100      	movs	r1, #0
 8009f74:	4618      	mov	r0, r3
 8009f76:	f002 f9e7 	bl	800c348 <RCCEx_PLL3_Config>
 8009f7a:	4603      	mov	r3, r0
 8009f7c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8009f80:	e006      	b.n	8009f90 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009f82:	2301      	movs	r3, #1
 8009f84:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009f88:	e002      	b.n	8009f90 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8009f8a:	bf00      	nop
 8009f8c:	e000      	b.n	8009f90 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8009f8e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009f90:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	d10a      	bne.n	8009fae <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8009f98:	4b37      	ldr	r3, [pc, #220]	@ (800a078 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009f9a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009f9c:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8009fa0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009fa4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009fa6:	4a34      	ldr	r2, [pc, #208]	@ (800a078 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009fa8:	430b      	orrs	r3, r1
 8009faa:	6513      	str	r3, [r2, #80]	@ 0x50
 8009fac:	e003      	b.n	8009fb6 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009fae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009fb2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8009fb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009fba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fbe:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8009fc2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8009fc6:	2300      	movs	r3, #0
 8009fc8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8009fcc:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8009fd0:	460b      	mov	r3, r1
 8009fd2:	4313      	orrs	r3, r2
 8009fd4:	d056      	beq.n	800a084 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8009fd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009fda:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009fdc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8009fe0:	d033      	beq.n	800a04a <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8009fe2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8009fe6:	d82c      	bhi.n	800a042 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8009fe8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009fec:	d02f      	beq.n	800a04e <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8009fee:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009ff2:	d826      	bhi.n	800a042 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8009ff4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8009ff8:	d02b      	beq.n	800a052 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8009ffa:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8009ffe:	d820      	bhi.n	800a042 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800a000:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a004:	d012      	beq.n	800a02c <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800a006:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a00a:	d81a      	bhi.n	800a042 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	d022      	beq.n	800a056 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800a010:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a014:	d115      	bne.n	800a042 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a016:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a01a:	3308      	adds	r3, #8
 800a01c:	2101      	movs	r1, #1
 800a01e:	4618      	mov	r0, r3
 800a020:	f002 f8e0 	bl	800c1e4 <RCCEx_PLL2_Config>
 800a024:	4603      	mov	r3, r0
 800a026:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800a02a:	e015      	b.n	800a058 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a02c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a030:	3328      	adds	r3, #40	@ 0x28
 800a032:	2101      	movs	r1, #1
 800a034:	4618      	mov	r0, r3
 800a036:	f002 f987 	bl	800c348 <RCCEx_PLL3_Config>
 800a03a:	4603      	mov	r3, r0
 800a03c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800a040:	e00a      	b.n	800a058 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a042:	2301      	movs	r3, #1
 800a044:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a048:	e006      	b.n	800a058 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800a04a:	bf00      	nop
 800a04c:	e004      	b.n	800a058 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800a04e:	bf00      	nop
 800a050:	e002      	b.n	800a058 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800a052:	bf00      	nop
 800a054:	e000      	b.n	800a058 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800a056:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a058:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	d10d      	bne.n	800a07c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800a060:	4b05      	ldr	r3, [pc, #20]	@ (800a078 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a062:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a064:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800a068:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a06c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a06e:	4a02      	ldr	r2, [pc, #8]	@ (800a078 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a070:	430b      	orrs	r3, r1
 800a072:	6513      	str	r3, [r2, #80]	@ 0x50
 800a074:	e006      	b.n	800a084 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800a076:	bf00      	nop
 800a078:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a07c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a080:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800a084:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a088:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a08c:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800a090:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800a094:	2300      	movs	r3, #0
 800a096:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800a09a:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800a09e:	460b      	mov	r3, r1
 800a0a0:	4313      	orrs	r3, r2
 800a0a2:	d055      	beq.n	800a150 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800a0a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a0a8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800a0ac:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a0b0:	d033      	beq.n	800a11a <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800a0b2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a0b6:	d82c      	bhi.n	800a112 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800a0b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a0bc:	d02f      	beq.n	800a11e <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800a0be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a0c2:	d826      	bhi.n	800a112 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800a0c4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800a0c8:	d02b      	beq.n	800a122 <HAL_RCCEx_PeriphCLKConfig+0x672>
 800a0ca:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800a0ce:	d820      	bhi.n	800a112 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800a0d0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a0d4:	d012      	beq.n	800a0fc <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800a0d6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a0da:	d81a      	bhi.n	800a112 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	d022      	beq.n	800a126 <HAL_RCCEx_PeriphCLKConfig+0x676>
 800a0e0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a0e4:	d115      	bne.n	800a112 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a0e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a0ea:	3308      	adds	r3, #8
 800a0ec:	2101      	movs	r1, #1
 800a0ee:	4618      	mov	r0, r3
 800a0f0:	f002 f878 	bl	800c1e4 <RCCEx_PLL2_Config>
 800a0f4:	4603      	mov	r3, r0
 800a0f6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800a0fa:	e015      	b.n	800a128 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a0fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a100:	3328      	adds	r3, #40	@ 0x28
 800a102:	2101      	movs	r1, #1
 800a104:	4618      	mov	r0, r3
 800a106:	f002 f91f 	bl	800c348 <RCCEx_PLL3_Config>
 800a10a:	4603      	mov	r3, r0
 800a10c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800a110:	e00a      	b.n	800a128 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800a112:	2301      	movs	r3, #1
 800a114:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a118:	e006      	b.n	800a128 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800a11a:	bf00      	nop
 800a11c:	e004      	b.n	800a128 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800a11e:	bf00      	nop
 800a120:	e002      	b.n	800a128 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800a122:	bf00      	nop
 800a124:	e000      	b.n	800a128 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800a126:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a128:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	d10b      	bne.n	800a148 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800a130:	4ba3      	ldr	r3, [pc, #652]	@ (800a3c0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a132:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a134:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800a138:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a13c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800a140:	4a9f      	ldr	r2, [pc, #636]	@ (800a3c0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a142:	430b      	orrs	r3, r1
 800a144:	6593      	str	r3, [r2, #88]	@ 0x58
 800a146:	e003      	b.n	800a150 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a148:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a14c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800a150:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a154:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a158:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800a15c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800a160:	2300      	movs	r3, #0
 800a162:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800a166:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800a16a:	460b      	mov	r3, r1
 800a16c:	4313      	orrs	r3, r2
 800a16e:	d037      	beq.n	800a1e0 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800a170:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a174:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a176:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a17a:	d00e      	beq.n	800a19a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 800a17c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a180:	d816      	bhi.n	800a1b0 <HAL_RCCEx_PeriphCLKConfig+0x700>
 800a182:	2b00      	cmp	r3, #0
 800a184:	d018      	beq.n	800a1b8 <HAL_RCCEx_PeriphCLKConfig+0x708>
 800a186:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a18a:	d111      	bne.n	800a1b0 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a18c:	4b8c      	ldr	r3, [pc, #560]	@ (800a3c0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a18e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a190:	4a8b      	ldr	r2, [pc, #556]	@ (800a3c0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a192:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a196:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800a198:	e00f      	b.n	800a1ba <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a19a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a19e:	3308      	adds	r3, #8
 800a1a0:	2101      	movs	r1, #1
 800a1a2:	4618      	mov	r0, r3
 800a1a4:	f002 f81e 	bl	800c1e4 <RCCEx_PLL2_Config>
 800a1a8:	4603      	mov	r3, r0
 800a1aa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800a1ae:	e004      	b.n	800a1ba <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a1b0:	2301      	movs	r3, #1
 800a1b2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a1b6:	e000      	b.n	800a1ba <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 800a1b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a1ba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d10a      	bne.n	800a1d8 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800a1c2:	4b7f      	ldr	r3, [pc, #508]	@ (800a3c0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a1c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a1c6:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800a1ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a1ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a1d0:	4a7b      	ldr	r2, [pc, #492]	@ (800a3c0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a1d2:	430b      	orrs	r3, r1
 800a1d4:	6513      	str	r3, [r2, #80]	@ 0x50
 800a1d6:	e003      	b.n	800a1e0 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a1d8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a1dc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800a1e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a1e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1e8:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800a1ec:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800a1f0:	2300      	movs	r3, #0
 800a1f2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800a1f6:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800a1fa:	460b      	mov	r3, r1
 800a1fc:	4313      	orrs	r3, r2
 800a1fe:	d039      	beq.n	800a274 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800a200:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a204:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a206:	2b03      	cmp	r3, #3
 800a208:	d81c      	bhi.n	800a244 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800a20a:	a201      	add	r2, pc, #4	@ (adr r2, 800a210 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 800a20c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a210:	0800a24d 	.word	0x0800a24d
 800a214:	0800a221 	.word	0x0800a221
 800a218:	0800a22f 	.word	0x0800a22f
 800a21c:	0800a24d 	.word	0x0800a24d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a220:	4b67      	ldr	r3, [pc, #412]	@ (800a3c0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a222:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a224:	4a66      	ldr	r2, [pc, #408]	@ (800a3c0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a226:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a22a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800a22c:	e00f      	b.n	800a24e <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a22e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a232:	3308      	adds	r3, #8
 800a234:	2102      	movs	r1, #2
 800a236:	4618      	mov	r0, r3
 800a238:	f001 ffd4 	bl	800c1e4 <RCCEx_PLL2_Config>
 800a23c:	4603      	mov	r3, r0
 800a23e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800a242:	e004      	b.n	800a24e <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800a244:	2301      	movs	r3, #1
 800a246:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a24a:	e000      	b.n	800a24e <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 800a24c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a24e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a252:	2b00      	cmp	r3, #0
 800a254:	d10a      	bne.n	800a26c <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800a256:	4b5a      	ldr	r3, [pc, #360]	@ (800a3c0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a258:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a25a:	f023 0103 	bic.w	r1, r3, #3
 800a25e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a262:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a264:	4a56      	ldr	r2, [pc, #344]	@ (800a3c0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a266:	430b      	orrs	r3, r1
 800a268:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800a26a:	e003      	b.n	800a274 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a26c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a270:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800a274:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a278:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a27c:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800a280:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800a284:	2300      	movs	r3, #0
 800a286:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800a28a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800a28e:	460b      	mov	r3, r1
 800a290:	4313      	orrs	r3, r2
 800a292:	f000 809f 	beq.w	800a3d4 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a296:	4b4b      	ldr	r3, [pc, #300]	@ (800a3c4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	4a4a      	ldr	r2, [pc, #296]	@ (800a3c4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800a29c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a2a0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800a2a2:	f7fb fc55 	bl	8005b50 <HAL_GetTick>
 800a2a6:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a2aa:	e00b      	b.n	800a2c4 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a2ac:	f7fb fc50 	bl	8005b50 <HAL_GetTick>
 800a2b0:	4602      	mov	r2, r0
 800a2b2:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800a2b6:	1ad3      	subs	r3, r2, r3
 800a2b8:	2b64      	cmp	r3, #100	@ 0x64
 800a2ba:	d903      	bls.n	800a2c4 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 800a2bc:	2303      	movs	r3, #3
 800a2be:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a2c2:	e005      	b.n	800a2d0 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a2c4:	4b3f      	ldr	r3, [pc, #252]	@ (800a3c4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	d0ed      	beq.n	800a2ac <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 800a2d0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	d179      	bne.n	800a3cc <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800a2d8:	4b39      	ldr	r3, [pc, #228]	@ (800a3c0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a2da:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800a2dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a2e0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800a2e4:	4053      	eors	r3, r2
 800a2e6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a2ea:	2b00      	cmp	r3, #0
 800a2ec:	d015      	beq.n	800a31a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800a2ee:	4b34      	ldr	r3, [pc, #208]	@ (800a3c0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a2f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a2f2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a2f6:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800a2fa:	4b31      	ldr	r3, [pc, #196]	@ (800a3c0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a2fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a2fe:	4a30      	ldr	r2, [pc, #192]	@ (800a3c0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a300:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a304:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800a306:	4b2e      	ldr	r3, [pc, #184]	@ (800a3c0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a308:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a30a:	4a2d      	ldr	r2, [pc, #180]	@ (800a3c0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a30c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a310:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800a312:	4a2b      	ldr	r2, [pc, #172]	@ (800a3c0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a314:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800a318:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800a31a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a31e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800a322:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a326:	d118      	bne.n	800a35a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a328:	f7fb fc12 	bl	8005b50 <HAL_GetTick>
 800a32c:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a330:	e00d      	b.n	800a34e <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a332:	f7fb fc0d 	bl	8005b50 <HAL_GetTick>
 800a336:	4602      	mov	r2, r0
 800a338:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800a33c:	1ad2      	subs	r2, r2, r3
 800a33e:	f241 3388 	movw	r3, #5000	@ 0x1388
 800a342:	429a      	cmp	r2, r3
 800a344:	d903      	bls.n	800a34e <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800a346:	2303      	movs	r3, #3
 800a348:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 800a34c:	e005      	b.n	800a35a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a34e:	4b1c      	ldr	r3, [pc, #112]	@ (800a3c0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a350:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a352:	f003 0302 	and.w	r3, r3, #2
 800a356:	2b00      	cmp	r3, #0
 800a358:	d0eb      	beq.n	800a332 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800a35a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a35e:	2b00      	cmp	r3, #0
 800a360:	d129      	bne.n	800a3b6 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a362:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a366:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800a36a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a36e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a372:	d10e      	bne.n	800a392 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800a374:	4b12      	ldr	r3, [pc, #72]	@ (800a3c0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a376:	691b      	ldr	r3, [r3, #16]
 800a378:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 800a37c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a380:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800a384:	091a      	lsrs	r2, r3, #4
 800a386:	4b10      	ldr	r3, [pc, #64]	@ (800a3c8 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 800a388:	4013      	ands	r3, r2
 800a38a:	4a0d      	ldr	r2, [pc, #52]	@ (800a3c0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a38c:	430b      	orrs	r3, r1
 800a38e:	6113      	str	r3, [r2, #16]
 800a390:	e005      	b.n	800a39e <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800a392:	4b0b      	ldr	r3, [pc, #44]	@ (800a3c0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a394:	691b      	ldr	r3, [r3, #16]
 800a396:	4a0a      	ldr	r2, [pc, #40]	@ (800a3c0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a398:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800a39c:	6113      	str	r3, [r2, #16]
 800a39e:	4b08      	ldr	r3, [pc, #32]	@ (800a3c0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a3a0:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800a3a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a3a6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800a3aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a3ae:	4a04      	ldr	r2, [pc, #16]	@ (800a3c0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a3b0:	430b      	orrs	r3, r1
 800a3b2:	6713      	str	r3, [r2, #112]	@ 0x70
 800a3b4:	e00e      	b.n	800a3d4 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800a3b6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a3ba:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 800a3be:	e009      	b.n	800a3d4 <HAL_RCCEx_PeriphCLKConfig+0x924>
 800a3c0:	58024400 	.word	0x58024400
 800a3c4:	58024800 	.word	0x58024800
 800a3c8:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a3cc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a3d0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800a3d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a3d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3dc:	f002 0301 	and.w	r3, r2, #1
 800a3e0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800a3e4:	2300      	movs	r3, #0
 800a3e6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800a3ea:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800a3ee:	460b      	mov	r3, r1
 800a3f0:	4313      	orrs	r3, r2
 800a3f2:	f000 8089 	beq.w	800a508 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800a3f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a3fa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a3fc:	2b28      	cmp	r3, #40	@ 0x28
 800a3fe:	d86b      	bhi.n	800a4d8 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 800a400:	a201      	add	r2, pc, #4	@ (adr r2, 800a408 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800a402:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a406:	bf00      	nop
 800a408:	0800a4e1 	.word	0x0800a4e1
 800a40c:	0800a4d9 	.word	0x0800a4d9
 800a410:	0800a4d9 	.word	0x0800a4d9
 800a414:	0800a4d9 	.word	0x0800a4d9
 800a418:	0800a4d9 	.word	0x0800a4d9
 800a41c:	0800a4d9 	.word	0x0800a4d9
 800a420:	0800a4d9 	.word	0x0800a4d9
 800a424:	0800a4d9 	.word	0x0800a4d9
 800a428:	0800a4ad 	.word	0x0800a4ad
 800a42c:	0800a4d9 	.word	0x0800a4d9
 800a430:	0800a4d9 	.word	0x0800a4d9
 800a434:	0800a4d9 	.word	0x0800a4d9
 800a438:	0800a4d9 	.word	0x0800a4d9
 800a43c:	0800a4d9 	.word	0x0800a4d9
 800a440:	0800a4d9 	.word	0x0800a4d9
 800a444:	0800a4d9 	.word	0x0800a4d9
 800a448:	0800a4c3 	.word	0x0800a4c3
 800a44c:	0800a4d9 	.word	0x0800a4d9
 800a450:	0800a4d9 	.word	0x0800a4d9
 800a454:	0800a4d9 	.word	0x0800a4d9
 800a458:	0800a4d9 	.word	0x0800a4d9
 800a45c:	0800a4d9 	.word	0x0800a4d9
 800a460:	0800a4d9 	.word	0x0800a4d9
 800a464:	0800a4d9 	.word	0x0800a4d9
 800a468:	0800a4e1 	.word	0x0800a4e1
 800a46c:	0800a4d9 	.word	0x0800a4d9
 800a470:	0800a4d9 	.word	0x0800a4d9
 800a474:	0800a4d9 	.word	0x0800a4d9
 800a478:	0800a4d9 	.word	0x0800a4d9
 800a47c:	0800a4d9 	.word	0x0800a4d9
 800a480:	0800a4d9 	.word	0x0800a4d9
 800a484:	0800a4d9 	.word	0x0800a4d9
 800a488:	0800a4e1 	.word	0x0800a4e1
 800a48c:	0800a4d9 	.word	0x0800a4d9
 800a490:	0800a4d9 	.word	0x0800a4d9
 800a494:	0800a4d9 	.word	0x0800a4d9
 800a498:	0800a4d9 	.word	0x0800a4d9
 800a49c:	0800a4d9 	.word	0x0800a4d9
 800a4a0:	0800a4d9 	.word	0x0800a4d9
 800a4a4:	0800a4d9 	.word	0x0800a4d9
 800a4a8:	0800a4e1 	.word	0x0800a4e1
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a4ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a4b0:	3308      	adds	r3, #8
 800a4b2:	2101      	movs	r1, #1
 800a4b4:	4618      	mov	r0, r3
 800a4b6:	f001 fe95 	bl	800c1e4 <RCCEx_PLL2_Config>
 800a4ba:	4603      	mov	r3, r0
 800a4bc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800a4c0:	e00f      	b.n	800a4e2 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a4c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a4c6:	3328      	adds	r3, #40	@ 0x28
 800a4c8:	2101      	movs	r1, #1
 800a4ca:	4618      	mov	r0, r3
 800a4cc:	f001 ff3c 	bl	800c348 <RCCEx_PLL3_Config>
 800a4d0:	4603      	mov	r3, r0
 800a4d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800a4d6:	e004      	b.n	800a4e2 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a4d8:	2301      	movs	r3, #1
 800a4da:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a4de:	e000      	b.n	800a4e2 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 800a4e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a4e2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a4e6:	2b00      	cmp	r3, #0
 800a4e8:	d10a      	bne.n	800a500 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800a4ea:	4bbf      	ldr	r3, [pc, #764]	@ (800a7e8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a4ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a4ee:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800a4f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a4f6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a4f8:	4abb      	ldr	r2, [pc, #748]	@ (800a7e8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a4fa:	430b      	orrs	r3, r1
 800a4fc:	6553      	str	r3, [r2, #84]	@ 0x54
 800a4fe:	e003      	b.n	800a508 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a500:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a504:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800a508:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a50c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a510:	f002 0302 	and.w	r3, r2, #2
 800a514:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800a518:	2300      	movs	r3, #0
 800a51a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800a51e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800a522:	460b      	mov	r3, r1
 800a524:	4313      	orrs	r3, r2
 800a526:	d041      	beq.n	800a5ac <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800a528:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a52c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a52e:	2b05      	cmp	r3, #5
 800a530:	d824      	bhi.n	800a57c <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800a532:	a201      	add	r2, pc, #4	@ (adr r2, 800a538 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800a534:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a538:	0800a585 	.word	0x0800a585
 800a53c:	0800a551 	.word	0x0800a551
 800a540:	0800a567 	.word	0x0800a567
 800a544:	0800a585 	.word	0x0800a585
 800a548:	0800a585 	.word	0x0800a585
 800a54c:	0800a585 	.word	0x0800a585
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a550:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a554:	3308      	adds	r3, #8
 800a556:	2101      	movs	r1, #1
 800a558:	4618      	mov	r0, r3
 800a55a:	f001 fe43 	bl	800c1e4 <RCCEx_PLL2_Config>
 800a55e:	4603      	mov	r3, r0
 800a560:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800a564:	e00f      	b.n	800a586 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a566:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a56a:	3328      	adds	r3, #40	@ 0x28
 800a56c:	2101      	movs	r1, #1
 800a56e:	4618      	mov	r0, r3
 800a570:	f001 feea 	bl	800c348 <RCCEx_PLL3_Config>
 800a574:	4603      	mov	r3, r0
 800a576:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800a57a:	e004      	b.n	800a586 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a57c:	2301      	movs	r3, #1
 800a57e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a582:	e000      	b.n	800a586 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 800a584:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a586:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	d10a      	bne.n	800a5a4 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800a58e:	4b96      	ldr	r3, [pc, #600]	@ (800a7e8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a590:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a592:	f023 0107 	bic.w	r1, r3, #7
 800a596:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a59a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a59c:	4a92      	ldr	r2, [pc, #584]	@ (800a7e8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a59e:	430b      	orrs	r3, r1
 800a5a0:	6553      	str	r3, [r2, #84]	@ 0x54
 800a5a2:	e003      	b.n	800a5ac <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a5a4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a5a8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800a5ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a5b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5b4:	f002 0304 	and.w	r3, r2, #4
 800a5b8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800a5bc:	2300      	movs	r3, #0
 800a5be:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800a5c2:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800a5c6:	460b      	mov	r3, r1
 800a5c8:	4313      	orrs	r3, r2
 800a5ca:	d044      	beq.n	800a656 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800a5cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a5d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a5d4:	2b05      	cmp	r3, #5
 800a5d6:	d825      	bhi.n	800a624 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800a5d8:	a201      	add	r2, pc, #4	@ (adr r2, 800a5e0 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800a5da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5de:	bf00      	nop
 800a5e0:	0800a62d 	.word	0x0800a62d
 800a5e4:	0800a5f9 	.word	0x0800a5f9
 800a5e8:	0800a60f 	.word	0x0800a60f
 800a5ec:	0800a62d 	.word	0x0800a62d
 800a5f0:	0800a62d 	.word	0x0800a62d
 800a5f4:	0800a62d 	.word	0x0800a62d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a5f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a5fc:	3308      	adds	r3, #8
 800a5fe:	2101      	movs	r1, #1
 800a600:	4618      	mov	r0, r3
 800a602:	f001 fdef 	bl	800c1e4 <RCCEx_PLL2_Config>
 800a606:	4603      	mov	r3, r0
 800a608:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800a60c:	e00f      	b.n	800a62e <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a60e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a612:	3328      	adds	r3, #40	@ 0x28
 800a614:	2101      	movs	r1, #1
 800a616:	4618      	mov	r0, r3
 800a618:	f001 fe96 	bl	800c348 <RCCEx_PLL3_Config>
 800a61c:	4603      	mov	r3, r0
 800a61e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800a622:	e004      	b.n	800a62e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a624:	2301      	movs	r3, #1
 800a626:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a62a:	e000      	b.n	800a62e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 800a62c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a62e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a632:	2b00      	cmp	r3, #0
 800a634:	d10b      	bne.n	800a64e <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800a636:	4b6c      	ldr	r3, [pc, #432]	@ (800a7e8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a638:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a63a:	f023 0107 	bic.w	r1, r3, #7
 800a63e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a642:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a646:	4a68      	ldr	r2, [pc, #416]	@ (800a7e8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a648:	430b      	orrs	r3, r1
 800a64a:	6593      	str	r3, [r2, #88]	@ 0x58
 800a64c:	e003      	b.n	800a656 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a64e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a652:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800a656:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a65a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a65e:	f002 0320 	and.w	r3, r2, #32
 800a662:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800a666:	2300      	movs	r3, #0
 800a668:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800a66c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800a670:	460b      	mov	r3, r1
 800a672:	4313      	orrs	r3, r2
 800a674:	d055      	beq.n	800a722 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800a676:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a67a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a67e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a682:	d033      	beq.n	800a6ec <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800a684:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a688:	d82c      	bhi.n	800a6e4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800a68a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a68e:	d02f      	beq.n	800a6f0 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 800a690:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a694:	d826      	bhi.n	800a6e4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800a696:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800a69a:	d02b      	beq.n	800a6f4 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 800a69c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800a6a0:	d820      	bhi.n	800a6e4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800a6a2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a6a6:	d012      	beq.n	800a6ce <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800a6a8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a6ac:	d81a      	bhi.n	800a6e4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	d022      	beq.n	800a6f8 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800a6b2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a6b6:	d115      	bne.n	800a6e4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a6b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a6bc:	3308      	adds	r3, #8
 800a6be:	2100      	movs	r1, #0
 800a6c0:	4618      	mov	r0, r3
 800a6c2:	f001 fd8f 	bl	800c1e4 <RCCEx_PLL2_Config>
 800a6c6:	4603      	mov	r3, r0
 800a6c8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800a6cc:	e015      	b.n	800a6fa <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a6ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a6d2:	3328      	adds	r3, #40	@ 0x28
 800a6d4:	2102      	movs	r1, #2
 800a6d6:	4618      	mov	r0, r3
 800a6d8:	f001 fe36 	bl	800c348 <RCCEx_PLL3_Config>
 800a6dc:	4603      	mov	r3, r0
 800a6de:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800a6e2:	e00a      	b.n	800a6fa <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a6e4:	2301      	movs	r3, #1
 800a6e6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a6ea:	e006      	b.n	800a6fa <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800a6ec:	bf00      	nop
 800a6ee:	e004      	b.n	800a6fa <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800a6f0:	bf00      	nop
 800a6f2:	e002      	b.n	800a6fa <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800a6f4:	bf00      	nop
 800a6f6:	e000      	b.n	800a6fa <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800a6f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a6fa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a6fe:	2b00      	cmp	r3, #0
 800a700:	d10b      	bne.n	800a71a <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800a702:	4b39      	ldr	r3, [pc, #228]	@ (800a7e8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a704:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a706:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800a70a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a70e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a712:	4a35      	ldr	r2, [pc, #212]	@ (800a7e8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a714:	430b      	orrs	r3, r1
 800a716:	6553      	str	r3, [r2, #84]	@ 0x54
 800a718:	e003      	b.n	800a722 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a71a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a71e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800a722:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a726:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a72a:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800a72e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800a732:	2300      	movs	r3, #0
 800a734:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800a738:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800a73c:	460b      	mov	r3, r1
 800a73e:	4313      	orrs	r3, r2
 800a740:	d058      	beq.n	800a7f4 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800a742:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a746:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800a74a:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800a74e:	d033      	beq.n	800a7b8 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800a750:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800a754:	d82c      	bhi.n	800a7b0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800a756:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a75a:	d02f      	beq.n	800a7bc <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 800a75c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a760:	d826      	bhi.n	800a7b0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800a762:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800a766:	d02b      	beq.n	800a7c0 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 800a768:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800a76c:	d820      	bhi.n	800a7b0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800a76e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a772:	d012      	beq.n	800a79a <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800a774:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a778:	d81a      	bhi.n	800a7b0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	d022      	beq.n	800a7c4 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800a77e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a782:	d115      	bne.n	800a7b0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a784:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a788:	3308      	adds	r3, #8
 800a78a:	2100      	movs	r1, #0
 800a78c:	4618      	mov	r0, r3
 800a78e:	f001 fd29 	bl	800c1e4 <RCCEx_PLL2_Config>
 800a792:	4603      	mov	r3, r0
 800a794:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800a798:	e015      	b.n	800a7c6 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a79a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a79e:	3328      	adds	r3, #40	@ 0x28
 800a7a0:	2102      	movs	r1, #2
 800a7a2:	4618      	mov	r0, r3
 800a7a4:	f001 fdd0 	bl	800c348 <RCCEx_PLL3_Config>
 800a7a8:	4603      	mov	r3, r0
 800a7aa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800a7ae:	e00a      	b.n	800a7c6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a7b0:	2301      	movs	r3, #1
 800a7b2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a7b6:	e006      	b.n	800a7c6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800a7b8:	bf00      	nop
 800a7ba:	e004      	b.n	800a7c6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800a7bc:	bf00      	nop
 800a7be:	e002      	b.n	800a7c6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800a7c0:	bf00      	nop
 800a7c2:	e000      	b.n	800a7c6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800a7c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a7c6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	d10e      	bne.n	800a7ec <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800a7ce:	4b06      	ldr	r3, [pc, #24]	@ (800a7e8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a7d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a7d2:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800a7d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a7da:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800a7de:	4a02      	ldr	r2, [pc, #8]	@ (800a7e8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a7e0:	430b      	orrs	r3, r1
 800a7e2:	6593      	str	r3, [r2, #88]	@ 0x58
 800a7e4:	e006      	b.n	800a7f4 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800a7e6:	bf00      	nop
 800a7e8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a7ec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a7f0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800a7f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a7f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7fc:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800a800:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800a804:	2300      	movs	r3, #0
 800a806:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800a80a:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800a80e:	460b      	mov	r3, r1
 800a810:	4313      	orrs	r3, r2
 800a812:	d055      	beq.n	800a8c0 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800a814:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a818:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800a81c:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800a820:	d033      	beq.n	800a88a <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800a822:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800a826:	d82c      	bhi.n	800a882 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800a828:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a82c:	d02f      	beq.n	800a88e <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800a82e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a832:	d826      	bhi.n	800a882 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800a834:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800a838:	d02b      	beq.n	800a892 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800a83a:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800a83e:	d820      	bhi.n	800a882 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800a840:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a844:	d012      	beq.n	800a86c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800a846:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a84a:	d81a      	bhi.n	800a882 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	d022      	beq.n	800a896 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800a850:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a854:	d115      	bne.n	800a882 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a856:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a85a:	3308      	adds	r3, #8
 800a85c:	2100      	movs	r1, #0
 800a85e:	4618      	mov	r0, r3
 800a860:	f001 fcc0 	bl	800c1e4 <RCCEx_PLL2_Config>
 800a864:	4603      	mov	r3, r0
 800a866:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800a86a:	e015      	b.n	800a898 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a86c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a870:	3328      	adds	r3, #40	@ 0x28
 800a872:	2102      	movs	r1, #2
 800a874:	4618      	mov	r0, r3
 800a876:	f001 fd67 	bl	800c348 <RCCEx_PLL3_Config>
 800a87a:	4603      	mov	r3, r0
 800a87c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800a880:	e00a      	b.n	800a898 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a882:	2301      	movs	r3, #1
 800a884:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a888:	e006      	b.n	800a898 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800a88a:	bf00      	nop
 800a88c:	e004      	b.n	800a898 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800a88e:	bf00      	nop
 800a890:	e002      	b.n	800a898 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800a892:	bf00      	nop
 800a894:	e000      	b.n	800a898 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800a896:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a898:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a89c:	2b00      	cmp	r3, #0
 800a89e:	d10b      	bne.n	800a8b8 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800a8a0:	4ba1      	ldr	r3, [pc, #644]	@ (800ab28 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a8a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a8a4:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 800a8a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a8ac:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800a8b0:	4a9d      	ldr	r2, [pc, #628]	@ (800ab28 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a8b2:	430b      	orrs	r3, r1
 800a8b4:	6593      	str	r3, [r2, #88]	@ 0x58
 800a8b6:	e003      	b.n	800a8c0 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a8b8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a8bc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800a8c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a8c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8c8:	f002 0308 	and.w	r3, r2, #8
 800a8cc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800a8d0:	2300      	movs	r3, #0
 800a8d2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800a8d6:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800a8da:	460b      	mov	r3, r1
 800a8dc:	4313      	orrs	r3, r2
 800a8de:	d01e      	beq.n	800a91e <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800a8e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a8e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a8e8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a8ec:	d10c      	bne.n	800a908 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800a8ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a8f2:	3328      	adds	r3, #40	@ 0x28
 800a8f4:	2102      	movs	r1, #2
 800a8f6:	4618      	mov	r0, r3
 800a8f8:	f001 fd26 	bl	800c348 <RCCEx_PLL3_Config>
 800a8fc:	4603      	mov	r3, r0
 800a8fe:	2b00      	cmp	r3, #0
 800a900:	d002      	beq.n	800a908 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800a902:	2301      	movs	r3, #1
 800a904:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800a908:	4b87      	ldr	r3, [pc, #540]	@ (800ab28 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a90a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a90c:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800a910:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a914:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a918:	4a83      	ldr	r2, [pc, #524]	@ (800ab28 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a91a:	430b      	orrs	r3, r1
 800a91c:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800a91e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a922:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a926:	f002 0310 	and.w	r3, r2, #16
 800a92a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800a92e:	2300      	movs	r3, #0
 800a930:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800a934:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800a938:	460b      	mov	r3, r1
 800a93a:	4313      	orrs	r3, r2
 800a93c:	d01e      	beq.n	800a97c <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800a93e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a942:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800a946:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a94a:	d10c      	bne.n	800a966 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800a94c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a950:	3328      	adds	r3, #40	@ 0x28
 800a952:	2102      	movs	r1, #2
 800a954:	4618      	mov	r0, r3
 800a956:	f001 fcf7 	bl	800c348 <RCCEx_PLL3_Config>
 800a95a:	4603      	mov	r3, r0
 800a95c:	2b00      	cmp	r3, #0
 800a95e:	d002      	beq.n	800a966 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 800a960:	2301      	movs	r3, #1
 800a962:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800a966:	4b70      	ldr	r3, [pc, #448]	@ (800ab28 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a968:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a96a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800a96e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a972:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800a976:	4a6c      	ldr	r2, [pc, #432]	@ (800ab28 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a978:	430b      	orrs	r3, r1
 800a97a:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800a97c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a980:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a984:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800a988:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800a98c:	2300      	movs	r3, #0
 800a98e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800a992:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800a996:	460b      	mov	r3, r1
 800a998:	4313      	orrs	r3, r2
 800a99a:	d03e      	beq.n	800aa1a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800a99c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a9a0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800a9a4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a9a8:	d022      	beq.n	800a9f0 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800a9aa:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a9ae:	d81b      	bhi.n	800a9e8 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	d003      	beq.n	800a9bc <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800a9b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a9b8:	d00b      	beq.n	800a9d2 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800a9ba:	e015      	b.n	800a9e8 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a9bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a9c0:	3308      	adds	r3, #8
 800a9c2:	2100      	movs	r1, #0
 800a9c4:	4618      	mov	r0, r3
 800a9c6:	f001 fc0d 	bl	800c1e4 <RCCEx_PLL2_Config>
 800a9ca:	4603      	mov	r3, r0
 800a9cc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800a9d0:	e00f      	b.n	800a9f2 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a9d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a9d6:	3328      	adds	r3, #40	@ 0x28
 800a9d8:	2102      	movs	r1, #2
 800a9da:	4618      	mov	r0, r3
 800a9dc:	f001 fcb4 	bl	800c348 <RCCEx_PLL3_Config>
 800a9e0:	4603      	mov	r3, r0
 800a9e2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800a9e6:	e004      	b.n	800a9f2 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a9e8:	2301      	movs	r3, #1
 800a9ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a9ee:	e000      	b.n	800a9f2 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800a9f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a9f2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	d10b      	bne.n	800aa12 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800a9fa:	4b4b      	ldr	r3, [pc, #300]	@ (800ab28 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a9fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a9fe:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800aa02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800aa06:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800aa0a:	4a47      	ldr	r2, [pc, #284]	@ (800ab28 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800aa0c:	430b      	orrs	r3, r1
 800aa0e:	6593      	str	r3, [r2, #88]	@ 0x58
 800aa10:	e003      	b.n	800aa1a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aa12:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800aa16:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800aa1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800aa1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa22:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800aa26:	67bb      	str	r3, [r7, #120]	@ 0x78
 800aa28:	2300      	movs	r3, #0
 800aa2a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800aa2c:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800aa30:	460b      	mov	r3, r1
 800aa32:	4313      	orrs	r3, r2
 800aa34:	d03b      	beq.n	800aaae <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800aa36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800aa3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800aa3e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800aa42:	d01f      	beq.n	800aa84 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800aa44:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800aa48:	d818      	bhi.n	800aa7c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800aa4a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800aa4e:	d003      	beq.n	800aa58 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800aa50:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800aa54:	d007      	beq.n	800aa66 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800aa56:	e011      	b.n	800aa7c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800aa58:	4b33      	ldr	r3, [pc, #204]	@ (800ab28 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800aa5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aa5c:	4a32      	ldr	r2, [pc, #200]	@ (800ab28 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800aa5e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800aa62:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800aa64:	e00f      	b.n	800aa86 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800aa66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800aa6a:	3328      	adds	r3, #40	@ 0x28
 800aa6c:	2101      	movs	r1, #1
 800aa6e:	4618      	mov	r0, r3
 800aa70:	f001 fc6a 	bl	800c348 <RCCEx_PLL3_Config>
 800aa74:	4603      	mov	r3, r0
 800aa76:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800aa7a:	e004      	b.n	800aa86 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800aa7c:	2301      	movs	r3, #1
 800aa7e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800aa82:	e000      	b.n	800aa86 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800aa84:	bf00      	nop
    }

    if (ret == HAL_OK)
 800aa86:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800aa8a:	2b00      	cmp	r3, #0
 800aa8c:	d10b      	bne.n	800aaa6 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800aa8e:	4b26      	ldr	r3, [pc, #152]	@ (800ab28 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800aa90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800aa92:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800aa96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800aa9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800aa9e:	4a22      	ldr	r2, [pc, #136]	@ (800ab28 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800aaa0:	430b      	orrs	r3, r1
 800aaa2:	6553      	str	r3, [r2, #84]	@ 0x54
 800aaa4:	e003      	b.n	800aaae <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aaa6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800aaaa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800aaae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800aab2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aab6:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800aaba:	673b      	str	r3, [r7, #112]	@ 0x70
 800aabc:	2300      	movs	r3, #0
 800aabe:	677b      	str	r3, [r7, #116]	@ 0x74
 800aac0:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800aac4:	460b      	mov	r3, r1
 800aac6:	4313      	orrs	r3, r2
 800aac8:	d034      	beq.n	800ab34 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800aaca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800aace:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800aad0:	2b00      	cmp	r3, #0
 800aad2:	d003      	beq.n	800aadc <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800aad4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800aad8:	d007      	beq.n	800aaea <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800aada:	e011      	b.n	800ab00 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800aadc:	4b12      	ldr	r3, [pc, #72]	@ (800ab28 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800aade:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aae0:	4a11      	ldr	r2, [pc, #68]	@ (800ab28 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800aae2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800aae6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800aae8:	e00e      	b.n	800ab08 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800aaea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800aaee:	3308      	adds	r3, #8
 800aaf0:	2102      	movs	r1, #2
 800aaf2:	4618      	mov	r0, r3
 800aaf4:	f001 fb76 	bl	800c1e4 <RCCEx_PLL2_Config>
 800aaf8:	4603      	mov	r3, r0
 800aafa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800aafe:	e003      	b.n	800ab08 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800ab00:	2301      	movs	r3, #1
 800ab02:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800ab06:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ab08:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ab0c:	2b00      	cmp	r3, #0
 800ab0e:	d10d      	bne.n	800ab2c <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800ab10:	4b05      	ldr	r3, [pc, #20]	@ (800ab28 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ab12:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ab14:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800ab18:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ab1c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ab1e:	4a02      	ldr	r2, [pc, #8]	@ (800ab28 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ab20:	430b      	orrs	r3, r1
 800ab22:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800ab24:	e006      	b.n	800ab34 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800ab26:	bf00      	nop
 800ab28:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ab2c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ab30:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800ab34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ab38:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab3c:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800ab40:	66bb      	str	r3, [r7, #104]	@ 0x68
 800ab42:	2300      	movs	r3, #0
 800ab44:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800ab46:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800ab4a:	460b      	mov	r3, r1
 800ab4c:	4313      	orrs	r3, r2
 800ab4e:	d00c      	beq.n	800ab6a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800ab50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ab54:	3328      	adds	r3, #40	@ 0x28
 800ab56:	2102      	movs	r1, #2
 800ab58:	4618      	mov	r0, r3
 800ab5a:	f001 fbf5 	bl	800c348 <RCCEx_PLL3_Config>
 800ab5e:	4603      	mov	r3, r0
 800ab60:	2b00      	cmp	r3, #0
 800ab62:	d002      	beq.n	800ab6a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800ab64:	2301      	movs	r3, #1
 800ab66:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800ab6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ab6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab72:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800ab76:	663b      	str	r3, [r7, #96]	@ 0x60
 800ab78:	2300      	movs	r3, #0
 800ab7a:	667b      	str	r3, [r7, #100]	@ 0x64
 800ab7c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800ab80:	460b      	mov	r3, r1
 800ab82:	4313      	orrs	r3, r2
 800ab84:	d038      	beq.n	800abf8 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800ab86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ab8a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ab8e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800ab92:	d018      	beq.n	800abc6 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800ab94:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800ab98:	d811      	bhi.n	800abbe <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800ab9a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ab9e:	d014      	beq.n	800abca <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800aba0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800aba4:	d80b      	bhi.n	800abbe <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	d011      	beq.n	800abce <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800abaa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800abae:	d106      	bne.n	800abbe <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800abb0:	4bc3      	ldr	r3, [pc, #780]	@ (800aec0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800abb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800abb4:	4ac2      	ldr	r2, [pc, #776]	@ (800aec0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800abb6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800abba:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800abbc:	e008      	b.n	800abd0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800abbe:	2301      	movs	r3, #1
 800abc0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800abc4:	e004      	b.n	800abd0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800abc6:	bf00      	nop
 800abc8:	e002      	b.n	800abd0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800abca:	bf00      	nop
 800abcc:	e000      	b.n	800abd0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800abce:	bf00      	nop
    }

    if (ret == HAL_OK)
 800abd0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800abd4:	2b00      	cmp	r3, #0
 800abd6:	d10b      	bne.n	800abf0 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800abd8:	4bb9      	ldr	r3, [pc, #740]	@ (800aec0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800abda:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800abdc:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800abe0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800abe4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800abe8:	4ab5      	ldr	r2, [pc, #724]	@ (800aec0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800abea:	430b      	orrs	r3, r1
 800abec:	6553      	str	r3, [r2, #84]	@ 0x54
 800abee:	e003      	b.n	800abf8 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800abf0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800abf4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800abf8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800abfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac00:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800ac04:	65bb      	str	r3, [r7, #88]	@ 0x58
 800ac06:	2300      	movs	r3, #0
 800ac08:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800ac0a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800ac0e:	460b      	mov	r3, r1
 800ac10:	4313      	orrs	r3, r2
 800ac12:	d009      	beq.n	800ac28 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800ac14:	4baa      	ldr	r3, [pc, #680]	@ (800aec0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ac16:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ac18:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800ac1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ac20:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ac22:	4aa7      	ldr	r2, [pc, #668]	@ (800aec0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ac24:	430b      	orrs	r3, r1
 800ac26:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800ac28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ac2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac30:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 800ac34:	653b      	str	r3, [r7, #80]	@ 0x50
 800ac36:	2300      	movs	r3, #0
 800ac38:	657b      	str	r3, [r7, #84]	@ 0x54
 800ac3a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800ac3e:	460b      	mov	r3, r1
 800ac40:	4313      	orrs	r3, r2
 800ac42:	d00a      	beq.n	800ac5a <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800ac44:	4b9e      	ldr	r3, [pc, #632]	@ (800aec0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ac46:	691b      	ldr	r3, [r3, #16]
 800ac48:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 800ac4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ac50:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800ac54:	4a9a      	ldr	r2, [pc, #616]	@ (800aec0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ac56:	430b      	orrs	r3, r1
 800ac58:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800ac5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ac5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac62:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800ac66:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ac68:	2300      	movs	r3, #0
 800ac6a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ac6c:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800ac70:	460b      	mov	r3, r1
 800ac72:	4313      	orrs	r3, r2
 800ac74:	d009      	beq.n	800ac8a <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800ac76:	4b92      	ldr	r3, [pc, #584]	@ (800aec0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ac78:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ac7a:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800ac7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ac82:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ac84:	4a8e      	ldr	r2, [pc, #568]	@ (800aec0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ac86:	430b      	orrs	r3, r1
 800ac88:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800ac8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ac8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac92:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800ac96:	643b      	str	r3, [r7, #64]	@ 0x40
 800ac98:	2300      	movs	r3, #0
 800ac9a:	647b      	str	r3, [r7, #68]	@ 0x44
 800ac9c:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800aca0:	460b      	mov	r3, r1
 800aca2:	4313      	orrs	r3, r2
 800aca4:	d00e      	beq.n	800acc4 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800aca6:	4b86      	ldr	r3, [pc, #536]	@ (800aec0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800aca8:	691b      	ldr	r3, [r3, #16]
 800acaa:	4a85      	ldr	r2, [pc, #532]	@ (800aec0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800acac:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800acb0:	6113      	str	r3, [r2, #16]
 800acb2:	4b83      	ldr	r3, [pc, #524]	@ (800aec0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800acb4:	6919      	ldr	r1, [r3, #16]
 800acb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800acba:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800acbe:	4a80      	ldr	r2, [pc, #512]	@ (800aec0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800acc0:	430b      	orrs	r3, r1
 800acc2:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800acc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800acc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800accc:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800acd0:	63bb      	str	r3, [r7, #56]	@ 0x38
 800acd2:	2300      	movs	r3, #0
 800acd4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800acd6:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800acda:	460b      	mov	r3, r1
 800acdc:	4313      	orrs	r3, r2
 800acde:	d009      	beq.n	800acf4 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800ace0:	4b77      	ldr	r3, [pc, #476]	@ (800aec0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ace2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ace4:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800ace8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800acec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800acee:	4a74      	ldr	r2, [pc, #464]	@ (800aec0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800acf0:	430b      	orrs	r3, r1
 800acf2:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800acf4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800acf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acfc:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800ad00:	633b      	str	r3, [r7, #48]	@ 0x30
 800ad02:	2300      	movs	r3, #0
 800ad04:	637b      	str	r3, [r7, #52]	@ 0x34
 800ad06:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800ad0a:	460b      	mov	r3, r1
 800ad0c:	4313      	orrs	r3, r2
 800ad0e:	d00a      	beq.n	800ad26 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800ad10:	4b6b      	ldr	r3, [pc, #428]	@ (800aec0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ad12:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ad14:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800ad18:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ad1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ad20:	4a67      	ldr	r2, [pc, #412]	@ (800aec0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ad22:	430b      	orrs	r3, r1
 800ad24:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800ad26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ad2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad2e:	2100      	movs	r1, #0
 800ad30:	62b9      	str	r1, [r7, #40]	@ 0x28
 800ad32:	f003 0301 	and.w	r3, r3, #1
 800ad36:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ad38:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800ad3c:	460b      	mov	r3, r1
 800ad3e:	4313      	orrs	r3, r2
 800ad40:	d011      	beq.n	800ad66 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ad42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ad46:	3308      	adds	r3, #8
 800ad48:	2100      	movs	r1, #0
 800ad4a:	4618      	mov	r0, r3
 800ad4c:	f001 fa4a 	bl	800c1e4 <RCCEx_PLL2_Config>
 800ad50:	4603      	mov	r3, r0
 800ad52:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800ad56:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ad5a:	2b00      	cmp	r3, #0
 800ad5c:	d003      	beq.n	800ad66 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ad5e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ad62:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800ad66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ad6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad6e:	2100      	movs	r1, #0
 800ad70:	6239      	str	r1, [r7, #32]
 800ad72:	f003 0302 	and.w	r3, r3, #2
 800ad76:	627b      	str	r3, [r7, #36]	@ 0x24
 800ad78:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800ad7c:	460b      	mov	r3, r1
 800ad7e:	4313      	orrs	r3, r2
 800ad80:	d011      	beq.n	800ada6 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800ad82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ad86:	3308      	adds	r3, #8
 800ad88:	2101      	movs	r1, #1
 800ad8a:	4618      	mov	r0, r3
 800ad8c:	f001 fa2a 	bl	800c1e4 <RCCEx_PLL2_Config>
 800ad90:	4603      	mov	r3, r0
 800ad92:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800ad96:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ad9a:	2b00      	cmp	r3, #0
 800ad9c:	d003      	beq.n	800ada6 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ad9e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ada2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800ada6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800adaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adae:	2100      	movs	r1, #0
 800adb0:	61b9      	str	r1, [r7, #24]
 800adb2:	f003 0304 	and.w	r3, r3, #4
 800adb6:	61fb      	str	r3, [r7, #28]
 800adb8:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800adbc:	460b      	mov	r3, r1
 800adbe:	4313      	orrs	r3, r2
 800adc0:	d011      	beq.n	800ade6 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800adc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800adc6:	3308      	adds	r3, #8
 800adc8:	2102      	movs	r1, #2
 800adca:	4618      	mov	r0, r3
 800adcc:	f001 fa0a 	bl	800c1e4 <RCCEx_PLL2_Config>
 800add0:	4603      	mov	r3, r0
 800add2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800add6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800adda:	2b00      	cmp	r3, #0
 800addc:	d003      	beq.n	800ade6 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800adde:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ade2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800ade6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800adea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adee:	2100      	movs	r1, #0
 800adf0:	6139      	str	r1, [r7, #16]
 800adf2:	f003 0308 	and.w	r3, r3, #8
 800adf6:	617b      	str	r3, [r7, #20]
 800adf8:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800adfc:	460b      	mov	r3, r1
 800adfe:	4313      	orrs	r3, r2
 800ae00:	d011      	beq.n	800ae26 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800ae02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ae06:	3328      	adds	r3, #40	@ 0x28
 800ae08:	2100      	movs	r1, #0
 800ae0a:	4618      	mov	r0, r3
 800ae0c:	f001 fa9c 	bl	800c348 <RCCEx_PLL3_Config>
 800ae10:	4603      	mov	r3, r0
 800ae12:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 800ae16:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	d003      	beq.n	800ae26 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ae1e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ae22:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800ae26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ae2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae2e:	2100      	movs	r1, #0
 800ae30:	60b9      	str	r1, [r7, #8]
 800ae32:	f003 0310 	and.w	r3, r3, #16
 800ae36:	60fb      	str	r3, [r7, #12]
 800ae38:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800ae3c:	460b      	mov	r3, r1
 800ae3e:	4313      	orrs	r3, r2
 800ae40:	d011      	beq.n	800ae66 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800ae42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ae46:	3328      	adds	r3, #40	@ 0x28
 800ae48:	2101      	movs	r1, #1
 800ae4a:	4618      	mov	r0, r3
 800ae4c:	f001 fa7c 	bl	800c348 <RCCEx_PLL3_Config>
 800ae50:	4603      	mov	r3, r0
 800ae52:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800ae56:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ae5a:	2b00      	cmp	r3, #0
 800ae5c:	d003      	beq.n	800ae66 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ae5e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ae62:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800ae66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ae6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae6e:	2100      	movs	r1, #0
 800ae70:	6039      	str	r1, [r7, #0]
 800ae72:	f003 0320 	and.w	r3, r3, #32
 800ae76:	607b      	str	r3, [r7, #4]
 800ae78:	e9d7 1200 	ldrd	r1, r2, [r7]
 800ae7c:	460b      	mov	r3, r1
 800ae7e:	4313      	orrs	r3, r2
 800ae80:	d011      	beq.n	800aea6 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800ae82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ae86:	3328      	adds	r3, #40	@ 0x28
 800ae88:	2102      	movs	r1, #2
 800ae8a:	4618      	mov	r0, r3
 800ae8c:	f001 fa5c 	bl	800c348 <RCCEx_PLL3_Config>
 800ae90:	4603      	mov	r3, r0
 800ae92:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800ae96:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	d003      	beq.n	800aea6 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ae9e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800aea2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 800aea6:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 800aeaa:	2b00      	cmp	r3, #0
 800aeac:	d101      	bne.n	800aeb2 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800aeae:	2300      	movs	r3, #0
 800aeb0:	e000      	b.n	800aeb4 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800aeb2:	2301      	movs	r3, #1
}
 800aeb4:	4618      	mov	r0, r3
 800aeb6:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 800aeba:	46bd      	mov	sp, r7
 800aebc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800aec0:	58024400 	.word	0x58024400

0800aec4 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800aec4:	b580      	push	{r7, lr}
 800aec6:	b090      	sub	sp, #64	@ 0x40
 800aec8:	af00      	add	r7, sp, #0
 800aeca:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800aece:	e9d7 2300 	ldrd	r2, r3, [r7]
 800aed2:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 800aed6:	430b      	orrs	r3, r1
 800aed8:	f040 8094 	bne.w	800b004 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800aedc:	4b9e      	ldr	r3, [pc, #632]	@ (800b158 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800aede:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800aee0:	f003 0307 	and.w	r3, r3, #7
 800aee4:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800aee6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aee8:	2b04      	cmp	r3, #4
 800aeea:	f200 8087 	bhi.w	800affc <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800aeee:	a201      	add	r2, pc, #4	@ (adr r2, 800aef4 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800aef0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aef4:	0800af09 	.word	0x0800af09
 800aef8:	0800af31 	.word	0x0800af31
 800aefc:	0800af59 	.word	0x0800af59
 800af00:	0800aff5 	.word	0x0800aff5
 800af04:	0800af81 	.word	0x0800af81
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800af08:	4b93      	ldr	r3, [pc, #588]	@ (800b158 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800af0a:	681b      	ldr	r3, [r3, #0]
 800af0c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800af10:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800af14:	d108      	bne.n	800af28 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800af16:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800af1a:	4618      	mov	r0, r3
 800af1c:	f001 f810 	bl	800bf40 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800af20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af22:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800af24:	f000 bd45 	b.w	800b9b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800af28:	2300      	movs	r3, #0
 800af2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800af2c:	f000 bd41 	b.w	800b9b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800af30:	4b89      	ldr	r3, [pc, #548]	@ (800b158 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800af32:	681b      	ldr	r3, [r3, #0]
 800af34:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800af38:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800af3c:	d108      	bne.n	800af50 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800af3e:	f107 0318 	add.w	r3, r7, #24
 800af42:	4618      	mov	r0, r3
 800af44:	f000 fd54 	bl	800b9f0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800af48:	69bb      	ldr	r3, [r7, #24]
 800af4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800af4c:	f000 bd31 	b.w	800b9b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800af50:	2300      	movs	r3, #0
 800af52:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800af54:	f000 bd2d 	b.w	800b9b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800af58:	4b7f      	ldr	r3, [pc, #508]	@ (800b158 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800af5a:	681b      	ldr	r3, [r3, #0]
 800af5c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800af60:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800af64:	d108      	bne.n	800af78 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800af66:	f107 030c 	add.w	r3, r7, #12
 800af6a:	4618      	mov	r0, r3
 800af6c:	f000 fe94 	bl	800bc98 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800af70:	68fb      	ldr	r3, [r7, #12]
 800af72:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800af74:	f000 bd1d 	b.w	800b9b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800af78:	2300      	movs	r3, #0
 800af7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800af7c:	f000 bd19 	b.w	800b9b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800af80:	4b75      	ldr	r3, [pc, #468]	@ (800b158 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800af82:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800af84:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800af88:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800af8a:	4b73      	ldr	r3, [pc, #460]	@ (800b158 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800af8c:	681b      	ldr	r3, [r3, #0]
 800af8e:	f003 0304 	and.w	r3, r3, #4
 800af92:	2b04      	cmp	r3, #4
 800af94:	d10c      	bne.n	800afb0 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800af96:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800af98:	2b00      	cmp	r3, #0
 800af9a:	d109      	bne.n	800afb0 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800af9c:	4b6e      	ldr	r3, [pc, #440]	@ (800b158 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800af9e:	681b      	ldr	r3, [r3, #0]
 800afa0:	08db      	lsrs	r3, r3, #3
 800afa2:	f003 0303 	and.w	r3, r3, #3
 800afa6:	4a6d      	ldr	r2, [pc, #436]	@ (800b15c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800afa8:	fa22 f303 	lsr.w	r3, r2, r3
 800afac:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800afae:	e01f      	b.n	800aff0 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800afb0:	4b69      	ldr	r3, [pc, #420]	@ (800b158 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800afb2:	681b      	ldr	r3, [r3, #0]
 800afb4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800afb8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800afbc:	d106      	bne.n	800afcc <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800afbe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800afc0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800afc4:	d102      	bne.n	800afcc <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800afc6:	4b66      	ldr	r3, [pc, #408]	@ (800b160 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800afc8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800afca:	e011      	b.n	800aff0 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800afcc:	4b62      	ldr	r3, [pc, #392]	@ (800b158 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800afce:	681b      	ldr	r3, [r3, #0]
 800afd0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800afd4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800afd8:	d106      	bne.n	800afe8 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800afda:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800afdc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800afe0:	d102      	bne.n	800afe8 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800afe2:	4b60      	ldr	r3, [pc, #384]	@ (800b164 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800afe4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800afe6:	e003      	b.n	800aff0 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800afe8:	2300      	movs	r3, #0
 800afea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800afec:	f000 bce1 	b.w	800b9b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800aff0:	f000 bcdf 	b.w	800b9b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800aff4:	4b5c      	ldr	r3, [pc, #368]	@ (800b168 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800aff6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aff8:	f000 bcdb 	b.w	800b9b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800affc:	2300      	movs	r3, #0
 800affe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b000:	f000 bcd7 	b.w	800b9b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800b004:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b008:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 800b00c:	430b      	orrs	r3, r1
 800b00e:	f040 80ad 	bne.w	800b16c <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 800b012:	4b51      	ldr	r3, [pc, #324]	@ (800b158 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b014:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b016:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 800b01a:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800b01c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b01e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b022:	d056      	beq.n	800b0d2 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 800b024:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b026:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b02a:	f200 8090 	bhi.w	800b14e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800b02e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b030:	2bc0      	cmp	r3, #192	@ 0xc0
 800b032:	f000 8088 	beq.w	800b146 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 800b036:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b038:	2bc0      	cmp	r3, #192	@ 0xc0
 800b03a:	f200 8088 	bhi.w	800b14e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800b03e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b040:	2b80      	cmp	r3, #128	@ 0x80
 800b042:	d032      	beq.n	800b0aa <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800b044:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b046:	2b80      	cmp	r3, #128	@ 0x80
 800b048:	f200 8081 	bhi.w	800b14e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800b04c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b04e:	2b00      	cmp	r3, #0
 800b050:	d003      	beq.n	800b05a <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 800b052:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b054:	2b40      	cmp	r3, #64	@ 0x40
 800b056:	d014      	beq.n	800b082 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 800b058:	e079      	b.n	800b14e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b05a:	4b3f      	ldr	r3, [pc, #252]	@ (800b158 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b05c:	681b      	ldr	r3, [r3, #0]
 800b05e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b062:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b066:	d108      	bne.n	800b07a <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b068:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b06c:	4618      	mov	r0, r3
 800b06e:	f000 ff67 	bl	800bf40 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b072:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b074:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b076:	f000 bc9c 	b.w	800b9b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b07a:	2300      	movs	r3, #0
 800b07c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b07e:	f000 bc98 	b.w	800b9b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b082:	4b35      	ldr	r3, [pc, #212]	@ (800b158 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b084:	681b      	ldr	r3, [r3, #0]
 800b086:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b08a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b08e:	d108      	bne.n	800b0a2 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b090:	f107 0318 	add.w	r3, r7, #24
 800b094:	4618      	mov	r0, r3
 800b096:	f000 fcab 	bl	800b9f0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b09a:	69bb      	ldr	r3, [r7, #24]
 800b09c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b09e:	f000 bc88 	b.w	800b9b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b0a2:	2300      	movs	r3, #0
 800b0a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b0a6:	f000 bc84 	b.w	800b9b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b0aa:	4b2b      	ldr	r3, [pc, #172]	@ (800b158 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b0ac:	681b      	ldr	r3, [r3, #0]
 800b0ae:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b0b2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b0b6:	d108      	bne.n	800b0ca <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b0b8:	f107 030c 	add.w	r3, r7, #12
 800b0bc:	4618      	mov	r0, r3
 800b0be:	f000 fdeb 	bl	800bc98 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b0c2:	68fb      	ldr	r3, [r7, #12]
 800b0c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b0c6:	f000 bc74 	b.w	800b9b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b0ca:	2300      	movs	r3, #0
 800b0cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b0ce:	f000 bc70 	b.w	800b9b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b0d2:	4b21      	ldr	r3, [pc, #132]	@ (800b158 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b0d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b0d6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800b0da:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b0dc:	4b1e      	ldr	r3, [pc, #120]	@ (800b158 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b0de:	681b      	ldr	r3, [r3, #0]
 800b0e0:	f003 0304 	and.w	r3, r3, #4
 800b0e4:	2b04      	cmp	r3, #4
 800b0e6:	d10c      	bne.n	800b102 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 800b0e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b0ea:	2b00      	cmp	r3, #0
 800b0ec:	d109      	bne.n	800b102 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b0ee:	4b1a      	ldr	r3, [pc, #104]	@ (800b158 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b0f0:	681b      	ldr	r3, [r3, #0]
 800b0f2:	08db      	lsrs	r3, r3, #3
 800b0f4:	f003 0303 	and.w	r3, r3, #3
 800b0f8:	4a18      	ldr	r2, [pc, #96]	@ (800b15c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800b0fa:	fa22 f303 	lsr.w	r3, r2, r3
 800b0fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b100:	e01f      	b.n	800b142 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b102:	4b15      	ldr	r3, [pc, #84]	@ (800b158 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b104:	681b      	ldr	r3, [r3, #0]
 800b106:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b10a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b10e:	d106      	bne.n	800b11e <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 800b110:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b112:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b116:	d102      	bne.n	800b11e <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b118:	4b11      	ldr	r3, [pc, #68]	@ (800b160 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800b11a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b11c:	e011      	b.n	800b142 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b11e:	4b0e      	ldr	r3, [pc, #56]	@ (800b158 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b120:	681b      	ldr	r3, [r3, #0]
 800b122:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b126:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b12a:	d106      	bne.n	800b13a <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 800b12c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b12e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b132:	d102      	bne.n	800b13a <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b134:	4b0b      	ldr	r3, [pc, #44]	@ (800b164 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800b136:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b138:	e003      	b.n	800b142 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b13a:	2300      	movs	r3, #0
 800b13c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800b13e:	f000 bc38 	b.w	800b9b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b142:	f000 bc36 	b.w	800b9b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800b146:	4b08      	ldr	r3, [pc, #32]	@ (800b168 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800b148:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b14a:	f000 bc32 	b.w	800b9b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800b14e:	2300      	movs	r3, #0
 800b150:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b152:	f000 bc2e 	b.w	800b9b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b156:	bf00      	nop
 800b158:	58024400 	.word	0x58024400
 800b15c:	03d09000 	.word	0x03d09000
 800b160:	003d0900 	.word	0x003d0900
 800b164:	017d7840 	.word	0x017d7840
 800b168:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800b16c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b170:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 800b174:	430b      	orrs	r3, r1
 800b176:	f040 809c 	bne.w	800b2b2 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800b17a:	4b9e      	ldr	r3, [pc, #632]	@ (800b3f4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b17c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b17e:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 800b182:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800b184:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b186:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800b18a:	d054      	beq.n	800b236 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 800b18c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b18e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800b192:	f200 808b 	bhi.w	800b2ac <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800b196:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b198:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800b19c:	f000 8083 	beq.w	800b2a6 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 800b1a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b1a2:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800b1a6:	f200 8081 	bhi.w	800b2ac <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800b1aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b1ac:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800b1b0:	d02f      	beq.n	800b212 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 800b1b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b1b4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800b1b8:	d878      	bhi.n	800b2ac <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800b1ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b1bc:	2b00      	cmp	r3, #0
 800b1be:	d004      	beq.n	800b1ca <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800b1c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b1c2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b1c6:	d012      	beq.n	800b1ee <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800b1c8:	e070      	b.n	800b2ac <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b1ca:	4b8a      	ldr	r3, [pc, #552]	@ (800b3f4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b1cc:	681b      	ldr	r3, [r3, #0]
 800b1ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b1d2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b1d6:	d107      	bne.n	800b1e8 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b1d8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b1dc:	4618      	mov	r0, r3
 800b1de:	f000 feaf 	bl	800bf40 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b1e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b1e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b1e6:	e3e4      	b.n	800b9b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b1e8:	2300      	movs	r3, #0
 800b1ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b1ec:	e3e1      	b.n	800b9b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b1ee:	4b81      	ldr	r3, [pc, #516]	@ (800b3f4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b1f0:	681b      	ldr	r3, [r3, #0]
 800b1f2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b1f6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b1fa:	d107      	bne.n	800b20c <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b1fc:	f107 0318 	add.w	r3, r7, #24
 800b200:	4618      	mov	r0, r3
 800b202:	f000 fbf5 	bl	800b9f0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b206:	69bb      	ldr	r3, [r7, #24]
 800b208:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b20a:	e3d2      	b.n	800b9b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b20c:	2300      	movs	r3, #0
 800b20e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b210:	e3cf      	b.n	800b9b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b212:	4b78      	ldr	r3, [pc, #480]	@ (800b3f4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b214:	681b      	ldr	r3, [r3, #0]
 800b216:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b21a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b21e:	d107      	bne.n	800b230 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b220:	f107 030c 	add.w	r3, r7, #12
 800b224:	4618      	mov	r0, r3
 800b226:	f000 fd37 	bl	800bc98 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b22a:	68fb      	ldr	r3, [r7, #12]
 800b22c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b22e:	e3c0      	b.n	800b9b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b230:	2300      	movs	r3, #0
 800b232:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b234:	e3bd      	b.n	800b9b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b236:	4b6f      	ldr	r3, [pc, #444]	@ (800b3f4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b238:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b23a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800b23e:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b240:	4b6c      	ldr	r3, [pc, #432]	@ (800b3f4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b242:	681b      	ldr	r3, [r3, #0]
 800b244:	f003 0304 	and.w	r3, r3, #4
 800b248:	2b04      	cmp	r3, #4
 800b24a:	d10c      	bne.n	800b266 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 800b24c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b24e:	2b00      	cmp	r3, #0
 800b250:	d109      	bne.n	800b266 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b252:	4b68      	ldr	r3, [pc, #416]	@ (800b3f4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b254:	681b      	ldr	r3, [r3, #0]
 800b256:	08db      	lsrs	r3, r3, #3
 800b258:	f003 0303 	and.w	r3, r3, #3
 800b25c:	4a66      	ldr	r2, [pc, #408]	@ (800b3f8 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800b25e:	fa22 f303 	lsr.w	r3, r2, r3
 800b262:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b264:	e01e      	b.n	800b2a4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b266:	4b63      	ldr	r3, [pc, #396]	@ (800b3f4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b268:	681b      	ldr	r3, [r3, #0]
 800b26a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b26e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b272:	d106      	bne.n	800b282 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 800b274:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b276:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b27a:	d102      	bne.n	800b282 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b27c:	4b5f      	ldr	r3, [pc, #380]	@ (800b3fc <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800b27e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b280:	e010      	b.n	800b2a4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b282:	4b5c      	ldr	r3, [pc, #368]	@ (800b3f4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b284:	681b      	ldr	r3, [r3, #0]
 800b286:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b28a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b28e:	d106      	bne.n	800b29e <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 800b290:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b292:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b296:	d102      	bne.n	800b29e <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b298:	4b59      	ldr	r3, [pc, #356]	@ (800b400 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800b29a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b29c:	e002      	b.n	800b2a4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b29e:	2300      	movs	r3, #0
 800b2a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800b2a2:	e386      	b.n	800b9b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b2a4:	e385      	b.n	800b9b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800b2a6:	4b57      	ldr	r3, [pc, #348]	@ (800b404 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800b2a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b2aa:	e382      	b.n	800b9b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800b2ac:	2300      	movs	r3, #0
 800b2ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b2b0:	e37f      	b.n	800b9b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800b2b2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b2b6:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 800b2ba:	430b      	orrs	r3, r1
 800b2bc:	f040 80a7 	bne.w	800b40e <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800b2c0:	4b4c      	ldr	r3, [pc, #304]	@ (800b3f4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b2c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b2c4:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 800b2c8:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800b2ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b2cc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800b2d0:	d055      	beq.n	800b37e <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 800b2d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b2d4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800b2d8:	f200 8096 	bhi.w	800b408 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800b2dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b2de:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800b2e2:	f000 8084 	beq.w	800b3ee <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800b2e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b2e8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800b2ec:	f200 808c 	bhi.w	800b408 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800b2f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b2f2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b2f6:	d030      	beq.n	800b35a <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 800b2f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b2fa:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b2fe:	f200 8083 	bhi.w	800b408 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800b302:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b304:	2b00      	cmp	r3, #0
 800b306:	d004      	beq.n	800b312 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 800b308:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b30a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b30e:	d012      	beq.n	800b336 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 800b310:	e07a      	b.n	800b408 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b312:	4b38      	ldr	r3, [pc, #224]	@ (800b3f4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b314:	681b      	ldr	r3, [r3, #0]
 800b316:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b31a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b31e:	d107      	bne.n	800b330 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b320:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b324:	4618      	mov	r0, r3
 800b326:	f000 fe0b 	bl	800bf40 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b32a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b32c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b32e:	e340      	b.n	800b9b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b330:	2300      	movs	r3, #0
 800b332:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b334:	e33d      	b.n	800b9b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b336:	4b2f      	ldr	r3, [pc, #188]	@ (800b3f4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b338:	681b      	ldr	r3, [r3, #0]
 800b33a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b33e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b342:	d107      	bne.n	800b354 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b344:	f107 0318 	add.w	r3, r7, #24
 800b348:	4618      	mov	r0, r3
 800b34a:	f000 fb51 	bl	800b9f0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b34e:	69bb      	ldr	r3, [r7, #24]
 800b350:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b352:	e32e      	b.n	800b9b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b354:	2300      	movs	r3, #0
 800b356:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b358:	e32b      	b.n	800b9b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b35a:	4b26      	ldr	r3, [pc, #152]	@ (800b3f4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b35c:	681b      	ldr	r3, [r3, #0]
 800b35e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b362:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b366:	d107      	bne.n	800b378 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b368:	f107 030c 	add.w	r3, r7, #12
 800b36c:	4618      	mov	r0, r3
 800b36e:	f000 fc93 	bl	800bc98 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b372:	68fb      	ldr	r3, [r7, #12]
 800b374:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b376:	e31c      	b.n	800b9b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b378:	2300      	movs	r3, #0
 800b37a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b37c:	e319      	b.n	800b9b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b37e:	4b1d      	ldr	r3, [pc, #116]	@ (800b3f4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b380:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b382:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800b386:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b388:	4b1a      	ldr	r3, [pc, #104]	@ (800b3f4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b38a:	681b      	ldr	r3, [r3, #0]
 800b38c:	f003 0304 	and.w	r3, r3, #4
 800b390:	2b04      	cmp	r3, #4
 800b392:	d10c      	bne.n	800b3ae <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 800b394:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b396:	2b00      	cmp	r3, #0
 800b398:	d109      	bne.n	800b3ae <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b39a:	4b16      	ldr	r3, [pc, #88]	@ (800b3f4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b39c:	681b      	ldr	r3, [r3, #0]
 800b39e:	08db      	lsrs	r3, r3, #3
 800b3a0:	f003 0303 	and.w	r3, r3, #3
 800b3a4:	4a14      	ldr	r2, [pc, #80]	@ (800b3f8 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800b3a6:	fa22 f303 	lsr.w	r3, r2, r3
 800b3aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b3ac:	e01e      	b.n	800b3ec <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b3ae:	4b11      	ldr	r3, [pc, #68]	@ (800b3f4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b3b0:	681b      	ldr	r3, [r3, #0]
 800b3b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b3b6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b3ba:	d106      	bne.n	800b3ca <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 800b3bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b3be:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b3c2:	d102      	bne.n	800b3ca <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b3c4:	4b0d      	ldr	r3, [pc, #52]	@ (800b3fc <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800b3c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b3c8:	e010      	b.n	800b3ec <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b3ca:	4b0a      	ldr	r3, [pc, #40]	@ (800b3f4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b3cc:	681b      	ldr	r3, [r3, #0]
 800b3ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b3d2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b3d6:	d106      	bne.n	800b3e6 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 800b3d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b3da:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b3de:	d102      	bne.n	800b3e6 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b3e0:	4b07      	ldr	r3, [pc, #28]	@ (800b400 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800b3e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b3e4:	e002      	b.n	800b3ec <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b3e6:	2300      	movs	r3, #0
 800b3e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800b3ea:	e2e2      	b.n	800b9b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b3ec:	e2e1      	b.n	800b9b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800b3ee:	4b05      	ldr	r3, [pc, #20]	@ (800b404 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800b3f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b3f2:	e2de      	b.n	800b9b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b3f4:	58024400 	.word	0x58024400
 800b3f8:	03d09000 	.word	0x03d09000
 800b3fc:	003d0900 	.word	0x003d0900
 800b400:	017d7840 	.word	0x017d7840
 800b404:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 800b408:	2300      	movs	r3, #0
 800b40a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b40c:	e2d1      	b.n	800b9b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800b40e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b412:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 800b416:	430b      	orrs	r3, r1
 800b418:	f040 809c 	bne.w	800b554 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800b41c:	4b93      	ldr	r3, [pc, #588]	@ (800b66c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b41e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b420:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800b424:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800b426:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b428:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b42c:	d054      	beq.n	800b4d8 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800b42e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b430:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b434:	f200 808b 	bhi.w	800b54e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800b438:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b43a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800b43e:	f000 8083 	beq.w	800b548 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 800b442:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b444:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800b448:	f200 8081 	bhi.w	800b54e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800b44c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b44e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b452:	d02f      	beq.n	800b4b4 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 800b454:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b456:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b45a:	d878      	bhi.n	800b54e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800b45c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b45e:	2b00      	cmp	r3, #0
 800b460:	d004      	beq.n	800b46c <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800b462:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b464:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b468:	d012      	beq.n	800b490 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 800b46a:	e070      	b.n	800b54e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b46c:	4b7f      	ldr	r3, [pc, #508]	@ (800b66c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b46e:	681b      	ldr	r3, [r3, #0]
 800b470:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b474:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b478:	d107      	bne.n	800b48a <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b47a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b47e:	4618      	mov	r0, r3
 800b480:	f000 fd5e 	bl	800bf40 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b484:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b486:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b488:	e293      	b.n	800b9b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b48a:	2300      	movs	r3, #0
 800b48c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b48e:	e290      	b.n	800b9b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b490:	4b76      	ldr	r3, [pc, #472]	@ (800b66c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b492:	681b      	ldr	r3, [r3, #0]
 800b494:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b498:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b49c:	d107      	bne.n	800b4ae <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b49e:	f107 0318 	add.w	r3, r7, #24
 800b4a2:	4618      	mov	r0, r3
 800b4a4:	f000 faa4 	bl	800b9f0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b4a8:	69bb      	ldr	r3, [r7, #24]
 800b4aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b4ac:	e281      	b.n	800b9b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b4ae:	2300      	movs	r3, #0
 800b4b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b4b2:	e27e      	b.n	800b9b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b4b4:	4b6d      	ldr	r3, [pc, #436]	@ (800b66c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b4b6:	681b      	ldr	r3, [r3, #0]
 800b4b8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b4bc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b4c0:	d107      	bne.n	800b4d2 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b4c2:	f107 030c 	add.w	r3, r7, #12
 800b4c6:	4618      	mov	r0, r3
 800b4c8:	f000 fbe6 	bl	800bc98 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b4cc:	68fb      	ldr	r3, [r7, #12]
 800b4ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b4d0:	e26f      	b.n	800b9b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b4d2:	2300      	movs	r3, #0
 800b4d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b4d6:	e26c      	b.n	800b9b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b4d8:	4b64      	ldr	r3, [pc, #400]	@ (800b66c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b4da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b4dc:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800b4e0:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b4e2:	4b62      	ldr	r3, [pc, #392]	@ (800b66c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b4e4:	681b      	ldr	r3, [r3, #0]
 800b4e6:	f003 0304 	and.w	r3, r3, #4
 800b4ea:	2b04      	cmp	r3, #4
 800b4ec:	d10c      	bne.n	800b508 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 800b4ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b4f0:	2b00      	cmp	r3, #0
 800b4f2:	d109      	bne.n	800b508 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b4f4:	4b5d      	ldr	r3, [pc, #372]	@ (800b66c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b4f6:	681b      	ldr	r3, [r3, #0]
 800b4f8:	08db      	lsrs	r3, r3, #3
 800b4fa:	f003 0303 	and.w	r3, r3, #3
 800b4fe:	4a5c      	ldr	r2, [pc, #368]	@ (800b670 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800b500:	fa22 f303 	lsr.w	r3, r2, r3
 800b504:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b506:	e01e      	b.n	800b546 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b508:	4b58      	ldr	r3, [pc, #352]	@ (800b66c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b50a:	681b      	ldr	r3, [r3, #0]
 800b50c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b510:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b514:	d106      	bne.n	800b524 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 800b516:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b518:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b51c:	d102      	bne.n	800b524 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b51e:	4b55      	ldr	r3, [pc, #340]	@ (800b674 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800b520:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b522:	e010      	b.n	800b546 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b524:	4b51      	ldr	r3, [pc, #324]	@ (800b66c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b526:	681b      	ldr	r3, [r3, #0]
 800b528:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b52c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b530:	d106      	bne.n	800b540 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800b532:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b534:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b538:	d102      	bne.n	800b540 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b53a:	4b4f      	ldr	r3, [pc, #316]	@ (800b678 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800b53c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b53e:	e002      	b.n	800b546 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b540:	2300      	movs	r3, #0
 800b542:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800b544:	e235      	b.n	800b9b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b546:	e234      	b.n	800b9b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800b548:	4b4c      	ldr	r3, [pc, #304]	@ (800b67c <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800b54a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b54c:	e231      	b.n	800b9b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800b54e:	2300      	movs	r3, #0
 800b550:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b552:	e22e      	b.n	800b9b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800b554:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b558:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 800b55c:	430b      	orrs	r3, r1
 800b55e:	f040 808f 	bne.w	800b680 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800b562:	4b42      	ldr	r3, [pc, #264]	@ (800b66c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b564:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b566:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800b56a:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 800b56c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b56e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800b572:	d06b      	beq.n	800b64c <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 800b574:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b576:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800b57a:	d874      	bhi.n	800b666 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800b57c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b57e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800b582:	d056      	beq.n	800b632 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 800b584:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b586:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800b58a:	d86c      	bhi.n	800b666 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800b58c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b58e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800b592:	d03b      	beq.n	800b60c <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 800b594:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b596:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800b59a:	d864      	bhi.n	800b666 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800b59c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b59e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b5a2:	d021      	beq.n	800b5e8 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800b5a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b5a6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b5aa:	d85c      	bhi.n	800b666 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800b5ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b5ae:	2b00      	cmp	r3, #0
 800b5b0:	d004      	beq.n	800b5bc <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 800b5b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b5b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b5b8:	d004      	beq.n	800b5c4 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 800b5ba:	e054      	b.n	800b666 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800b5bc:	f7fe fa4c 	bl	8009a58 <HAL_RCC_GetPCLK1Freq>
 800b5c0:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800b5c2:	e1f6      	b.n	800b9b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b5c4:	4b29      	ldr	r3, [pc, #164]	@ (800b66c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b5c6:	681b      	ldr	r3, [r3, #0]
 800b5c8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b5cc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b5d0:	d107      	bne.n	800b5e2 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b5d2:	f107 0318 	add.w	r3, r7, #24
 800b5d6:	4618      	mov	r0, r3
 800b5d8:	f000 fa0a 	bl	800b9f0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b5dc:	69fb      	ldr	r3, [r7, #28]
 800b5de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b5e0:	e1e7      	b.n	800b9b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b5e2:	2300      	movs	r3, #0
 800b5e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b5e6:	e1e4      	b.n	800b9b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b5e8:	4b20      	ldr	r3, [pc, #128]	@ (800b66c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b5ea:	681b      	ldr	r3, [r3, #0]
 800b5ec:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b5f0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b5f4:	d107      	bne.n	800b606 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b5f6:	f107 030c 	add.w	r3, r7, #12
 800b5fa:	4618      	mov	r0, r3
 800b5fc:	f000 fb4c 	bl	800bc98 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800b600:	693b      	ldr	r3, [r7, #16]
 800b602:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b604:	e1d5      	b.n	800b9b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b606:	2300      	movs	r3, #0
 800b608:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b60a:	e1d2      	b.n	800b9b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800b60c:	4b17      	ldr	r3, [pc, #92]	@ (800b66c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b60e:	681b      	ldr	r3, [r3, #0]
 800b610:	f003 0304 	and.w	r3, r3, #4
 800b614:	2b04      	cmp	r3, #4
 800b616:	d109      	bne.n	800b62c <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b618:	4b14      	ldr	r3, [pc, #80]	@ (800b66c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b61a:	681b      	ldr	r3, [r3, #0]
 800b61c:	08db      	lsrs	r3, r3, #3
 800b61e:	f003 0303 	and.w	r3, r3, #3
 800b622:	4a13      	ldr	r2, [pc, #76]	@ (800b670 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800b624:	fa22 f303 	lsr.w	r3, r2, r3
 800b628:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b62a:	e1c2      	b.n	800b9b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b62c:	2300      	movs	r3, #0
 800b62e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b630:	e1bf      	b.n	800b9b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800b632:	4b0e      	ldr	r3, [pc, #56]	@ (800b66c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b634:	681b      	ldr	r3, [r3, #0]
 800b636:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b63a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b63e:	d102      	bne.n	800b646 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 800b640:	4b0c      	ldr	r3, [pc, #48]	@ (800b674 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800b642:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b644:	e1b5      	b.n	800b9b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b646:	2300      	movs	r3, #0
 800b648:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b64a:	e1b2      	b.n	800b9b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800b64c:	4b07      	ldr	r3, [pc, #28]	@ (800b66c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b64e:	681b      	ldr	r3, [r3, #0]
 800b650:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b654:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b658:	d102      	bne.n	800b660 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 800b65a:	4b07      	ldr	r3, [pc, #28]	@ (800b678 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800b65c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b65e:	e1a8      	b.n	800b9b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b660:	2300      	movs	r3, #0
 800b662:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b664:	e1a5      	b.n	800b9b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800b666:	2300      	movs	r3, #0
 800b668:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b66a:	e1a2      	b.n	800b9b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b66c:	58024400 	.word	0x58024400
 800b670:	03d09000 	.word	0x03d09000
 800b674:	003d0900 	.word	0x003d0900
 800b678:	017d7840 	.word	0x017d7840
 800b67c:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800b680:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b684:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 800b688:	430b      	orrs	r3, r1
 800b68a:	d173      	bne.n	800b774 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800b68c:	4b9c      	ldr	r3, [pc, #624]	@ (800b900 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b68e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b690:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800b694:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800b696:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b698:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b69c:	d02f      	beq.n	800b6fe <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800b69e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b6a0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b6a4:	d863      	bhi.n	800b76e <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 800b6a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b6a8:	2b00      	cmp	r3, #0
 800b6aa:	d004      	beq.n	800b6b6 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 800b6ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b6ae:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b6b2:	d012      	beq.n	800b6da <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 800b6b4:	e05b      	b.n	800b76e <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b6b6:	4b92      	ldr	r3, [pc, #584]	@ (800b900 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b6b8:	681b      	ldr	r3, [r3, #0]
 800b6ba:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b6be:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b6c2:	d107      	bne.n	800b6d4 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b6c4:	f107 0318 	add.w	r3, r7, #24
 800b6c8:	4618      	mov	r0, r3
 800b6ca:	f000 f991 	bl	800b9f0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b6ce:	69bb      	ldr	r3, [r7, #24]
 800b6d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b6d2:	e16e      	b.n	800b9b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b6d4:	2300      	movs	r3, #0
 800b6d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b6d8:	e16b      	b.n	800b9b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b6da:	4b89      	ldr	r3, [pc, #548]	@ (800b900 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b6dc:	681b      	ldr	r3, [r3, #0]
 800b6de:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b6e2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b6e6:	d107      	bne.n	800b6f8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b6e8:	f107 030c 	add.w	r3, r7, #12
 800b6ec:	4618      	mov	r0, r3
 800b6ee:	f000 fad3 	bl	800bc98 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800b6f2:	697b      	ldr	r3, [r7, #20]
 800b6f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b6f6:	e15c      	b.n	800b9b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b6f8:	2300      	movs	r3, #0
 800b6fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b6fc:	e159      	b.n	800b9b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b6fe:	4b80      	ldr	r3, [pc, #512]	@ (800b900 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b700:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b702:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800b706:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b708:	4b7d      	ldr	r3, [pc, #500]	@ (800b900 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b70a:	681b      	ldr	r3, [r3, #0]
 800b70c:	f003 0304 	and.w	r3, r3, #4
 800b710:	2b04      	cmp	r3, #4
 800b712:	d10c      	bne.n	800b72e <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 800b714:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b716:	2b00      	cmp	r3, #0
 800b718:	d109      	bne.n	800b72e <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b71a:	4b79      	ldr	r3, [pc, #484]	@ (800b900 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b71c:	681b      	ldr	r3, [r3, #0]
 800b71e:	08db      	lsrs	r3, r3, #3
 800b720:	f003 0303 	and.w	r3, r3, #3
 800b724:	4a77      	ldr	r2, [pc, #476]	@ (800b904 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800b726:	fa22 f303 	lsr.w	r3, r2, r3
 800b72a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b72c:	e01e      	b.n	800b76c <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b72e:	4b74      	ldr	r3, [pc, #464]	@ (800b900 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b730:	681b      	ldr	r3, [r3, #0]
 800b732:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b736:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b73a:	d106      	bne.n	800b74a <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 800b73c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b73e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b742:	d102      	bne.n	800b74a <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b744:	4b70      	ldr	r3, [pc, #448]	@ (800b908 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800b746:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b748:	e010      	b.n	800b76c <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b74a:	4b6d      	ldr	r3, [pc, #436]	@ (800b900 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b74c:	681b      	ldr	r3, [r3, #0]
 800b74e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b752:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b756:	d106      	bne.n	800b766 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 800b758:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b75a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b75e:	d102      	bne.n	800b766 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b760:	4b6a      	ldr	r3, [pc, #424]	@ (800b90c <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800b762:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b764:	e002      	b.n	800b76c <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b766:	2300      	movs	r3, #0
 800b768:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800b76a:	e122      	b.n	800b9b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b76c:	e121      	b.n	800b9b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800b76e:	2300      	movs	r3, #0
 800b770:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b772:	e11e      	b.n	800b9b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800b774:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b778:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 800b77c:	430b      	orrs	r3, r1
 800b77e:	d133      	bne.n	800b7e8 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800b780:	4b5f      	ldr	r3, [pc, #380]	@ (800b900 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b782:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b784:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800b788:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800b78a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b78c:	2b00      	cmp	r3, #0
 800b78e:	d004      	beq.n	800b79a <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 800b790:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b792:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b796:	d012      	beq.n	800b7be <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 800b798:	e023      	b.n	800b7e2 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b79a:	4b59      	ldr	r3, [pc, #356]	@ (800b900 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b79c:	681b      	ldr	r3, [r3, #0]
 800b79e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b7a2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b7a6:	d107      	bne.n	800b7b8 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b7a8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b7ac:	4618      	mov	r0, r3
 800b7ae:	f000 fbc7 	bl	800bf40 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b7b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b7b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b7b6:	e0fc      	b.n	800b9b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b7b8:	2300      	movs	r3, #0
 800b7ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b7bc:	e0f9      	b.n	800b9b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b7be:	4b50      	ldr	r3, [pc, #320]	@ (800b900 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b7c0:	681b      	ldr	r3, [r3, #0]
 800b7c2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b7c6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b7ca:	d107      	bne.n	800b7dc <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b7cc:	f107 0318 	add.w	r3, r7, #24
 800b7d0:	4618      	mov	r0, r3
 800b7d2:	f000 f90d 	bl	800b9f0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800b7d6:	6a3b      	ldr	r3, [r7, #32]
 800b7d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b7da:	e0ea      	b.n	800b9b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b7dc:	2300      	movs	r3, #0
 800b7de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b7e0:	e0e7      	b.n	800b9b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800b7e2:	2300      	movs	r3, #0
 800b7e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b7e6:	e0e4      	b.n	800b9b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800b7e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b7ec:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 800b7f0:	430b      	orrs	r3, r1
 800b7f2:	f040 808d 	bne.w	800b910 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800b7f6:	4b42      	ldr	r3, [pc, #264]	@ (800b900 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b7f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b7fa:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 800b7fe:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800b800:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b802:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b806:	d06b      	beq.n	800b8e0 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 800b808:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b80a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b80e:	d874      	bhi.n	800b8fa <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800b810:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b812:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b816:	d056      	beq.n	800b8c6 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 800b818:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b81a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b81e:	d86c      	bhi.n	800b8fa <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800b820:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b822:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800b826:	d03b      	beq.n	800b8a0 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 800b828:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b82a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800b82e:	d864      	bhi.n	800b8fa <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800b830:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b832:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b836:	d021      	beq.n	800b87c <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 800b838:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b83a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b83e:	d85c      	bhi.n	800b8fa <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800b840:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b842:	2b00      	cmp	r3, #0
 800b844:	d004      	beq.n	800b850 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 800b846:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b848:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b84c:	d004      	beq.n	800b858 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 800b84e:	e054      	b.n	800b8fa <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800b850:	f000 f8b8 	bl	800b9c4 <HAL_RCCEx_GetD3PCLK1Freq>
 800b854:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800b856:	e0ac      	b.n	800b9b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b858:	4b29      	ldr	r3, [pc, #164]	@ (800b900 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b85a:	681b      	ldr	r3, [r3, #0]
 800b85c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b860:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b864:	d107      	bne.n	800b876 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b866:	f107 0318 	add.w	r3, r7, #24
 800b86a:	4618      	mov	r0, r3
 800b86c:	f000 f8c0 	bl	800b9f0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b870:	69fb      	ldr	r3, [r7, #28]
 800b872:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b874:	e09d      	b.n	800b9b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b876:	2300      	movs	r3, #0
 800b878:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b87a:	e09a      	b.n	800b9b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b87c:	4b20      	ldr	r3, [pc, #128]	@ (800b900 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b87e:	681b      	ldr	r3, [r3, #0]
 800b880:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b884:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b888:	d107      	bne.n	800b89a <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b88a:	f107 030c 	add.w	r3, r7, #12
 800b88e:	4618      	mov	r0, r3
 800b890:	f000 fa02 	bl	800bc98 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800b894:	693b      	ldr	r3, [r7, #16]
 800b896:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b898:	e08b      	b.n	800b9b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b89a:	2300      	movs	r3, #0
 800b89c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b89e:	e088      	b.n	800b9b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800b8a0:	4b17      	ldr	r3, [pc, #92]	@ (800b900 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b8a2:	681b      	ldr	r3, [r3, #0]
 800b8a4:	f003 0304 	and.w	r3, r3, #4
 800b8a8:	2b04      	cmp	r3, #4
 800b8aa:	d109      	bne.n	800b8c0 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b8ac:	4b14      	ldr	r3, [pc, #80]	@ (800b900 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b8ae:	681b      	ldr	r3, [r3, #0]
 800b8b0:	08db      	lsrs	r3, r3, #3
 800b8b2:	f003 0303 	and.w	r3, r3, #3
 800b8b6:	4a13      	ldr	r2, [pc, #76]	@ (800b904 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800b8b8:	fa22 f303 	lsr.w	r3, r2, r3
 800b8bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b8be:	e078      	b.n	800b9b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b8c0:	2300      	movs	r3, #0
 800b8c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b8c4:	e075      	b.n	800b9b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800b8c6:	4b0e      	ldr	r3, [pc, #56]	@ (800b900 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b8c8:	681b      	ldr	r3, [r3, #0]
 800b8ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b8ce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b8d2:	d102      	bne.n	800b8da <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 800b8d4:	4b0c      	ldr	r3, [pc, #48]	@ (800b908 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800b8d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b8d8:	e06b      	b.n	800b9b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b8da:	2300      	movs	r3, #0
 800b8dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b8de:	e068      	b.n	800b9b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800b8e0:	4b07      	ldr	r3, [pc, #28]	@ (800b900 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b8e2:	681b      	ldr	r3, [r3, #0]
 800b8e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b8e8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b8ec:	d102      	bne.n	800b8f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 800b8ee:	4b07      	ldr	r3, [pc, #28]	@ (800b90c <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800b8f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b8f2:	e05e      	b.n	800b9b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b8f4:	2300      	movs	r3, #0
 800b8f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b8f8:	e05b      	b.n	800b9b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800b8fa:	2300      	movs	r3, #0
 800b8fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b8fe:	e058      	b.n	800b9b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b900:	58024400 	.word	0x58024400
 800b904:	03d09000 	.word	0x03d09000
 800b908:	003d0900 	.word	0x003d0900
 800b90c:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800b910:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b914:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 800b918:	430b      	orrs	r3, r1
 800b91a:	d148      	bne.n	800b9ae <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800b91c:	4b27      	ldr	r3, [pc, #156]	@ (800b9bc <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800b91e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b920:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800b924:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800b926:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b928:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b92c:	d02a      	beq.n	800b984 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 800b92e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b930:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b934:	d838      	bhi.n	800b9a8 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 800b936:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b938:	2b00      	cmp	r3, #0
 800b93a:	d004      	beq.n	800b946 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800b93c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b93e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b942:	d00d      	beq.n	800b960 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 800b944:	e030      	b.n	800b9a8 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800b946:	4b1d      	ldr	r3, [pc, #116]	@ (800b9bc <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800b948:	681b      	ldr	r3, [r3, #0]
 800b94a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b94e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b952:	d102      	bne.n	800b95a <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 800b954:	4b1a      	ldr	r3, [pc, #104]	@ (800b9c0 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800b956:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b958:	e02b      	b.n	800b9b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b95a:	2300      	movs	r3, #0
 800b95c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b95e:	e028      	b.n	800b9b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b960:	4b16      	ldr	r3, [pc, #88]	@ (800b9bc <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800b962:	681b      	ldr	r3, [r3, #0]
 800b964:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b968:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b96c:	d107      	bne.n	800b97e <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b96e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b972:	4618      	mov	r0, r3
 800b974:	f000 fae4 	bl	800bf40 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b978:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b97a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b97c:	e019      	b.n	800b9b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b97e:	2300      	movs	r3, #0
 800b980:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b982:	e016      	b.n	800b9b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b984:	4b0d      	ldr	r3, [pc, #52]	@ (800b9bc <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800b986:	681b      	ldr	r3, [r3, #0]
 800b988:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b98c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b990:	d107      	bne.n	800b9a2 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b992:	f107 0318 	add.w	r3, r7, #24
 800b996:	4618      	mov	r0, r3
 800b998:	f000 f82a 	bl	800b9f0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b99c:	69fb      	ldr	r3, [r7, #28]
 800b99e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b9a0:	e007      	b.n	800b9b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b9a2:	2300      	movs	r3, #0
 800b9a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b9a6:	e004      	b.n	800b9b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800b9a8:	2300      	movs	r3, #0
 800b9aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b9ac:	e001      	b.n	800b9b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 800b9ae:	2300      	movs	r3, #0
 800b9b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 800b9b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800b9b4:	4618      	mov	r0, r3
 800b9b6:	3740      	adds	r7, #64	@ 0x40
 800b9b8:	46bd      	mov	sp, r7
 800b9ba:	bd80      	pop	{r7, pc}
 800b9bc:	58024400 	.word	0x58024400
 800b9c0:	017d7840 	.word	0x017d7840

0800b9c4 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800b9c4:	b580      	push	{r7, lr}
 800b9c6:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800b9c8:	f7fe f816 	bl	80099f8 <HAL_RCC_GetHCLKFreq>
 800b9cc:	4602      	mov	r2, r0
 800b9ce:	4b06      	ldr	r3, [pc, #24]	@ (800b9e8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800b9d0:	6a1b      	ldr	r3, [r3, #32]
 800b9d2:	091b      	lsrs	r3, r3, #4
 800b9d4:	f003 0307 	and.w	r3, r3, #7
 800b9d8:	4904      	ldr	r1, [pc, #16]	@ (800b9ec <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800b9da:	5ccb      	ldrb	r3, [r1, r3]
 800b9dc:	f003 031f 	and.w	r3, r3, #31
 800b9e0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800b9e4:	4618      	mov	r0, r3
 800b9e6:	bd80      	pop	{r7, pc}
 800b9e8:	58024400 	.word	0x58024400
 800b9ec:	080148ac 	.word	0x080148ac

0800b9f0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800b9f0:	b480      	push	{r7}
 800b9f2:	b089      	sub	sp, #36	@ 0x24
 800b9f4:	af00      	add	r7, sp, #0
 800b9f6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b9f8:	4ba1      	ldr	r3, [pc, #644]	@ (800bc80 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b9fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b9fc:	f003 0303 	and.w	r3, r3, #3
 800ba00:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800ba02:	4b9f      	ldr	r3, [pc, #636]	@ (800bc80 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ba04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ba06:	0b1b      	lsrs	r3, r3, #12
 800ba08:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800ba0c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800ba0e:	4b9c      	ldr	r3, [pc, #624]	@ (800bc80 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ba10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ba12:	091b      	lsrs	r3, r3, #4
 800ba14:	f003 0301 	and.w	r3, r3, #1
 800ba18:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800ba1a:	4b99      	ldr	r3, [pc, #612]	@ (800bc80 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ba1c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ba1e:	08db      	lsrs	r3, r3, #3
 800ba20:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ba24:	693a      	ldr	r2, [r7, #16]
 800ba26:	fb02 f303 	mul.w	r3, r2, r3
 800ba2a:	ee07 3a90 	vmov	s15, r3
 800ba2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ba32:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800ba36:	697b      	ldr	r3, [r7, #20]
 800ba38:	2b00      	cmp	r3, #0
 800ba3a:	f000 8111 	beq.w	800bc60 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800ba3e:	69bb      	ldr	r3, [r7, #24]
 800ba40:	2b02      	cmp	r3, #2
 800ba42:	f000 8083 	beq.w	800bb4c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800ba46:	69bb      	ldr	r3, [r7, #24]
 800ba48:	2b02      	cmp	r3, #2
 800ba4a:	f200 80a1 	bhi.w	800bb90 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800ba4e:	69bb      	ldr	r3, [r7, #24]
 800ba50:	2b00      	cmp	r3, #0
 800ba52:	d003      	beq.n	800ba5c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800ba54:	69bb      	ldr	r3, [r7, #24]
 800ba56:	2b01      	cmp	r3, #1
 800ba58:	d056      	beq.n	800bb08 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800ba5a:	e099      	b.n	800bb90 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ba5c:	4b88      	ldr	r3, [pc, #544]	@ (800bc80 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ba5e:	681b      	ldr	r3, [r3, #0]
 800ba60:	f003 0320 	and.w	r3, r3, #32
 800ba64:	2b00      	cmp	r3, #0
 800ba66:	d02d      	beq.n	800bac4 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ba68:	4b85      	ldr	r3, [pc, #532]	@ (800bc80 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ba6a:	681b      	ldr	r3, [r3, #0]
 800ba6c:	08db      	lsrs	r3, r3, #3
 800ba6e:	f003 0303 	and.w	r3, r3, #3
 800ba72:	4a84      	ldr	r2, [pc, #528]	@ (800bc84 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800ba74:	fa22 f303 	lsr.w	r3, r2, r3
 800ba78:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ba7a:	68bb      	ldr	r3, [r7, #8]
 800ba7c:	ee07 3a90 	vmov	s15, r3
 800ba80:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ba84:	697b      	ldr	r3, [r7, #20]
 800ba86:	ee07 3a90 	vmov	s15, r3
 800ba8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ba8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ba92:	4b7b      	ldr	r3, [pc, #492]	@ (800bc80 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ba94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ba96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ba9a:	ee07 3a90 	vmov	s15, r3
 800ba9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800baa2:	ed97 6a03 	vldr	s12, [r7, #12]
 800baa6:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800bc88 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800baaa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800baae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bab2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bab6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800baba:	ee67 7a27 	vmul.f32	s15, s14, s15
 800babe:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800bac2:	e087      	b.n	800bbd4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800bac4:	697b      	ldr	r3, [r7, #20]
 800bac6:	ee07 3a90 	vmov	s15, r3
 800baca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bace:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800bc8c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800bad2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bad6:	4b6a      	ldr	r3, [pc, #424]	@ (800bc80 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bad8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bada:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bade:	ee07 3a90 	vmov	s15, r3
 800bae2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bae6:	ed97 6a03 	vldr	s12, [r7, #12]
 800baea:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800bc88 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800baee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800baf2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800baf6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bafa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bafe:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bb02:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bb06:	e065      	b.n	800bbd4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800bb08:	697b      	ldr	r3, [r7, #20]
 800bb0a:	ee07 3a90 	vmov	s15, r3
 800bb0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bb12:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800bc90 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800bb16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bb1a:	4b59      	ldr	r3, [pc, #356]	@ (800bc80 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bb1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bb1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bb22:	ee07 3a90 	vmov	s15, r3
 800bb26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bb2a:	ed97 6a03 	vldr	s12, [r7, #12]
 800bb2e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800bc88 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800bb32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bb36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bb3a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bb3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bb42:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bb46:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bb4a:	e043      	b.n	800bbd4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800bb4c:	697b      	ldr	r3, [r7, #20]
 800bb4e:	ee07 3a90 	vmov	s15, r3
 800bb52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bb56:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800bc94 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800bb5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bb5e:	4b48      	ldr	r3, [pc, #288]	@ (800bc80 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bb60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bb62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bb66:	ee07 3a90 	vmov	s15, r3
 800bb6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bb6e:	ed97 6a03 	vldr	s12, [r7, #12]
 800bb72:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800bc88 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800bb76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bb7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bb7e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bb82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bb86:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bb8a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bb8e:	e021      	b.n	800bbd4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800bb90:	697b      	ldr	r3, [r7, #20]
 800bb92:	ee07 3a90 	vmov	s15, r3
 800bb96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bb9a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800bc90 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800bb9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bba2:	4b37      	ldr	r3, [pc, #220]	@ (800bc80 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bba4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bba6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bbaa:	ee07 3a90 	vmov	s15, r3
 800bbae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bbb2:	ed97 6a03 	vldr	s12, [r7, #12]
 800bbb6:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800bc88 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800bbba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bbbe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bbc2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bbc6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bbca:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bbce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bbd2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800bbd4:	4b2a      	ldr	r3, [pc, #168]	@ (800bc80 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bbd6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bbd8:	0a5b      	lsrs	r3, r3, #9
 800bbda:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bbde:	ee07 3a90 	vmov	s15, r3
 800bbe2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bbe6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800bbea:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bbee:	edd7 6a07 	vldr	s13, [r7, #28]
 800bbf2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bbf6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bbfa:	ee17 2a90 	vmov	r2, s15
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800bc02:	4b1f      	ldr	r3, [pc, #124]	@ (800bc80 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bc04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bc06:	0c1b      	lsrs	r3, r3, #16
 800bc08:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bc0c:	ee07 3a90 	vmov	s15, r3
 800bc10:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bc14:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800bc18:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bc1c:	edd7 6a07 	vldr	s13, [r7, #28]
 800bc20:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bc24:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bc28:	ee17 2a90 	vmov	r2, s15
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800bc30:	4b13      	ldr	r3, [pc, #76]	@ (800bc80 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bc32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bc34:	0e1b      	lsrs	r3, r3, #24
 800bc36:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bc3a:	ee07 3a90 	vmov	s15, r3
 800bc3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bc42:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800bc46:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bc4a:	edd7 6a07 	vldr	s13, [r7, #28]
 800bc4e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bc52:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bc56:	ee17 2a90 	vmov	r2, s15
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800bc5e:	e008      	b.n	800bc72 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	2200      	movs	r2, #0
 800bc64:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	2200      	movs	r2, #0
 800bc6a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	2200      	movs	r2, #0
 800bc70:	609a      	str	r2, [r3, #8]
}
 800bc72:	bf00      	nop
 800bc74:	3724      	adds	r7, #36	@ 0x24
 800bc76:	46bd      	mov	sp, r7
 800bc78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc7c:	4770      	bx	lr
 800bc7e:	bf00      	nop
 800bc80:	58024400 	.word	0x58024400
 800bc84:	03d09000 	.word	0x03d09000
 800bc88:	46000000 	.word	0x46000000
 800bc8c:	4c742400 	.word	0x4c742400
 800bc90:	4a742400 	.word	0x4a742400
 800bc94:	4bbebc20 	.word	0x4bbebc20

0800bc98 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800bc98:	b480      	push	{r7}
 800bc9a:	b089      	sub	sp, #36	@ 0x24
 800bc9c:	af00      	add	r7, sp, #0
 800bc9e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800bca0:	4ba1      	ldr	r3, [pc, #644]	@ (800bf28 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bca2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bca4:	f003 0303 	and.w	r3, r3, #3
 800bca8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800bcaa:	4b9f      	ldr	r3, [pc, #636]	@ (800bf28 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bcac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bcae:	0d1b      	lsrs	r3, r3, #20
 800bcb0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800bcb4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800bcb6:	4b9c      	ldr	r3, [pc, #624]	@ (800bf28 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bcb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bcba:	0a1b      	lsrs	r3, r3, #8
 800bcbc:	f003 0301 	and.w	r3, r3, #1
 800bcc0:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800bcc2:	4b99      	ldr	r3, [pc, #612]	@ (800bf28 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bcc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bcc6:	08db      	lsrs	r3, r3, #3
 800bcc8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800bccc:	693a      	ldr	r2, [r7, #16]
 800bcce:	fb02 f303 	mul.w	r3, r2, r3
 800bcd2:	ee07 3a90 	vmov	s15, r3
 800bcd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bcda:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800bcde:	697b      	ldr	r3, [r7, #20]
 800bce0:	2b00      	cmp	r3, #0
 800bce2:	f000 8111 	beq.w	800bf08 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800bce6:	69bb      	ldr	r3, [r7, #24]
 800bce8:	2b02      	cmp	r3, #2
 800bcea:	f000 8083 	beq.w	800bdf4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800bcee:	69bb      	ldr	r3, [r7, #24]
 800bcf0:	2b02      	cmp	r3, #2
 800bcf2:	f200 80a1 	bhi.w	800be38 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800bcf6:	69bb      	ldr	r3, [r7, #24]
 800bcf8:	2b00      	cmp	r3, #0
 800bcfa:	d003      	beq.n	800bd04 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800bcfc:	69bb      	ldr	r3, [r7, #24]
 800bcfe:	2b01      	cmp	r3, #1
 800bd00:	d056      	beq.n	800bdb0 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800bd02:	e099      	b.n	800be38 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bd04:	4b88      	ldr	r3, [pc, #544]	@ (800bf28 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bd06:	681b      	ldr	r3, [r3, #0]
 800bd08:	f003 0320 	and.w	r3, r3, #32
 800bd0c:	2b00      	cmp	r3, #0
 800bd0e:	d02d      	beq.n	800bd6c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bd10:	4b85      	ldr	r3, [pc, #532]	@ (800bf28 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bd12:	681b      	ldr	r3, [r3, #0]
 800bd14:	08db      	lsrs	r3, r3, #3
 800bd16:	f003 0303 	and.w	r3, r3, #3
 800bd1a:	4a84      	ldr	r2, [pc, #528]	@ (800bf2c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800bd1c:	fa22 f303 	lsr.w	r3, r2, r3
 800bd20:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800bd22:	68bb      	ldr	r3, [r7, #8]
 800bd24:	ee07 3a90 	vmov	s15, r3
 800bd28:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bd2c:	697b      	ldr	r3, [r7, #20]
 800bd2e:	ee07 3a90 	vmov	s15, r3
 800bd32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bd36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bd3a:	4b7b      	ldr	r3, [pc, #492]	@ (800bf28 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bd3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bd3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bd42:	ee07 3a90 	vmov	s15, r3
 800bd46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bd4a:	ed97 6a03 	vldr	s12, [r7, #12]
 800bd4e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800bf30 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800bd52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bd56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bd5a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bd5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bd62:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bd66:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800bd6a:	e087      	b.n	800be7c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800bd6c:	697b      	ldr	r3, [r7, #20]
 800bd6e:	ee07 3a90 	vmov	s15, r3
 800bd72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bd76:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800bf34 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800bd7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bd7e:	4b6a      	ldr	r3, [pc, #424]	@ (800bf28 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bd80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bd82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bd86:	ee07 3a90 	vmov	s15, r3
 800bd8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bd8e:	ed97 6a03 	vldr	s12, [r7, #12]
 800bd92:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800bf30 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800bd96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bd9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bd9e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bda2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bda6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bdaa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bdae:	e065      	b.n	800be7c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800bdb0:	697b      	ldr	r3, [r7, #20]
 800bdb2:	ee07 3a90 	vmov	s15, r3
 800bdb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bdba:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800bf38 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800bdbe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bdc2:	4b59      	ldr	r3, [pc, #356]	@ (800bf28 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bdc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bdc6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bdca:	ee07 3a90 	vmov	s15, r3
 800bdce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bdd2:	ed97 6a03 	vldr	s12, [r7, #12]
 800bdd6:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800bf30 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800bdda:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bdde:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bde2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bde6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bdea:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bdee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bdf2:	e043      	b.n	800be7c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800bdf4:	697b      	ldr	r3, [r7, #20]
 800bdf6:	ee07 3a90 	vmov	s15, r3
 800bdfa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bdfe:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800bf3c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800be02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800be06:	4b48      	ldr	r3, [pc, #288]	@ (800bf28 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800be08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800be0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800be0e:	ee07 3a90 	vmov	s15, r3
 800be12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800be16:	ed97 6a03 	vldr	s12, [r7, #12]
 800be1a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800bf30 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800be1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800be22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800be26:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800be2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800be2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800be32:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800be36:	e021      	b.n	800be7c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800be38:	697b      	ldr	r3, [r7, #20]
 800be3a:	ee07 3a90 	vmov	s15, r3
 800be3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800be42:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800bf38 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800be46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800be4a:	4b37      	ldr	r3, [pc, #220]	@ (800bf28 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800be4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800be4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800be52:	ee07 3a90 	vmov	s15, r3
 800be56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800be5a:	ed97 6a03 	vldr	s12, [r7, #12]
 800be5e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800bf30 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800be62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800be66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800be6a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800be6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800be72:	ee67 7a27 	vmul.f32	s15, s14, s15
 800be76:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800be7a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800be7c:	4b2a      	ldr	r3, [pc, #168]	@ (800bf28 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800be7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800be80:	0a5b      	lsrs	r3, r3, #9
 800be82:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800be86:	ee07 3a90 	vmov	s15, r3
 800be8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800be8e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800be92:	ee37 7a87 	vadd.f32	s14, s15, s14
 800be96:	edd7 6a07 	vldr	s13, [r7, #28]
 800be9a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800be9e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bea2:	ee17 2a90 	vmov	r2, s15
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800beaa:	4b1f      	ldr	r3, [pc, #124]	@ (800bf28 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800beac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800beae:	0c1b      	lsrs	r3, r3, #16
 800beb0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800beb4:	ee07 3a90 	vmov	s15, r3
 800beb8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bebc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800bec0:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bec4:	edd7 6a07 	vldr	s13, [r7, #28]
 800bec8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800becc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bed0:	ee17 2a90 	vmov	r2, s15
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800bed8:	4b13      	ldr	r3, [pc, #76]	@ (800bf28 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800beda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bedc:	0e1b      	lsrs	r3, r3, #24
 800bede:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bee2:	ee07 3a90 	vmov	s15, r3
 800bee6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800beea:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800beee:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bef2:	edd7 6a07 	vldr	s13, [r7, #28]
 800bef6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800befa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800befe:	ee17 2a90 	vmov	r2, s15
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800bf06:	e008      	b.n	800bf1a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	2200      	movs	r2, #0
 800bf0c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	2200      	movs	r2, #0
 800bf12:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	2200      	movs	r2, #0
 800bf18:	609a      	str	r2, [r3, #8]
}
 800bf1a:	bf00      	nop
 800bf1c:	3724      	adds	r7, #36	@ 0x24
 800bf1e:	46bd      	mov	sp, r7
 800bf20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf24:	4770      	bx	lr
 800bf26:	bf00      	nop
 800bf28:	58024400 	.word	0x58024400
 800bf2c:	03d09000 	.word	0x03d09000
 800bf30:	46000000 	.word	0x46000000
 800bf34:	4c742400 	.word	0x4c742400
 800bf38:	4a742400 	.word	0x4a742400
 800bf3c:	4bbebc20 	.word	0x4bbebc20

0800bf40 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800bf40:	b480      	push	{r7}
 800bf42:	b089      	sub	sp, #36	@ 0x24
 800bf44:	af00      	add	r7, sp, #0
 800bf46:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800bf48:	4ba0      	ldr	r3, [pc, #640]	@ (800c1cc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bf4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bf4c:	f003 0303 	and.w	r3, r3, #3
 800bf50:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800bf52:	4b9e      	ldr	r3, [pc, #632]	@ (800c1cc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bf54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bf56:	091b      	lsrs	r3, r3, #4
 800bf58:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800bf5c:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800bf5e:	4b9b      	ldr	r3, [pc, #620]	@ (800c1cc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bf60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bf62:	f003 0301 	and.w	r3, r3, #1
 800bf66:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800bf68:	4b98      	ldr	r3, [pc, #608]	@ (800c1cc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bf6a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bf6c:	08db      	lsrs	r3, r3, #3
 800bf6e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800bf72:	693a      	ldr	r2, [r7, #16]
 800bf74:	fb02 f303 	mul.w	r3, r2, r3
 800bf78:	ee07 3a90 	vmov	s15, r3
 800bf7c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bf80:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800bf84:	697b      	ldr	r3, [r7, #20]
 800bf86:	2b00      	cmp	r3, #0
 800bf88:	f000 8111 	beq.w	800c1ae <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800bf8c:	69bb      	ldr	r3, [r7, #24]
 800bf8e:	2b02      	cmp	r3, #2
 800bf90:	f000 8083 	beq.w	800c09a <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800bf94:	69bb      	ldr	r3, [r7, #24]
 800bf96:	2b02      	cmp	r3, #2
 800bf98:	f200 80a1 	bhi.w	800c0de <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800bf9c:	69bb      	ldr	r3, [r7, #24]
 800bf9e:	2b00      	cmp	r3, #0
 800bfa0:	d003      	beq.n	800bfaa <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800bfa2:	69bb      	ldr	r3, [r7, #24]
 800bfa4:	2b01      	cmp	r3, #1
 800bfa6:	d056      	beq.n	800c056 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800bfa8:	e099      	b.n	800c0de <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bfaa:	4b88      	ldr	r3, [pc, #544]	@ (800c1cc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bfac:	681b      	ldr	r3, [r3, #0]
 800bfae:	f003 0320 	and.w	r3, r3, #32
 800bfb2:	2b00      	cmp	r3, #0
 800bfb4:	d02d      	beq.n	800c012 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bfb6:	4b85      	ldr	r3, [pc, #532]	@ (800c1cc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bfb8:	681b      	ldr	r3, [r3, #0]
 800bfba:	08db      	lsrs	r3, r3, #3
 800bfbc:	f003 0303 	and.w	r3, r3, #3
 800bfc0:	4a83      	ldr	r2, [pc, #524]	@ (800c1d0 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800bfc2:	fa22 f303 	lsr.w	r3, r2, r3
 800bfc6:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800bfc8:	68bb      	ldr	r3, [r7, #8]
 800bfca:	ee07 3a90 	vmov	s15, r3
 800bfce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bfd2:	697b      	ldr	r3, [r7, #20]
 800bfd4:	ee07 3a90 	vmov	s15, r3
 800bfd8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bfdc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bfe0:	4b7a      	ldr	r3, [pc, #488]	@ (800c1cc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bfe2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bfe4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bfe8:	ee07 3a90 	vmov	s15, r3
 800bfec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bff0:	ed97 6a03 	vldr	s12, [r7, #12]
 800bff4:	eddf 5a77 	vldr	s11, [pc, #476]	@ 800c1d4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800bff8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bffc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c000:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c004:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c008:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c00c:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800c010:	e087      	b.n	800c122 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c012:	697b      	ldr	r3, [r7, #20]
 800c014:	ee07 3a90 	vmov	s15, r3
 800c018:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c01c:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 800c1d8 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800c020:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c024:	4b69      	ldr	r3, [pc, #420]	@ (800c1cc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c026:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c028:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c02c:	ee07 3a90 	vmov	s15, r3
 800c030:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c034:	ed97 6a03 	vldr	s12, [r7, #12]
 800c038:	eddf 5a66 	vldr	s11, [pc, #408]	@ 800c1d4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c03c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c040:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c044:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c048:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c04c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c050:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c054:	e065      	b.n	800c122 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c056:	697b      	ldr	r3, [r7, #20]
 800c058:	ee07 3a90 	vmov	s15, r3
 800c05c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c060:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 800c1dc <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800c064:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c068:	4b58      	ldr	r3, [pc, #352]	@ (800c1cc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c06a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c06c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c070:	ee07 3a90 	vmov	s15, r3
 800c074:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c078:	ed97 6a03 	vldr	s12, [r7, #12]
 800c07c:	eddf 5a55 	vldr	s11, [pc, #340]	@ 800c1d4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c080:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c084:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c088:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c08c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c090:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c094:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c098:	e043      	b.n	800c122 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c09a:	697b      	ldr	r3, [r7, #20]
 800c09c:	ee07 3a90 	vmov	s15, r3
 800c0a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c0a4:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 800c1e0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800c0a8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c0ac:	4b47      	ldr	r3, [pc, #284]	@ (800c1cc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c0ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c0b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c0b4:	ee07 3a90 	vmov	s15, r3
 800c0b8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c0bc:	ed97 6a03 	vldr	s12, [r7, #12]
 800c0c0:	eddf 5a44 	vldr	s11, [pc, #272]	@ 800c1d4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c0c4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c0c8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c0cc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c0d0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c0d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c0d8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c0dc:	e021      	b.n	800c122 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c0de:	697b      	ldr	r3, [r7, #20]
 800c0e0:	ee07 3a90 	vmov	s15, r3
 800c0e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c0e8:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 800c1d8 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800c0ec:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c0f0:	4b36      	ldr	r3, [pc, #216]	@ (800c1cc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c0f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c0f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c0f8:	ee07 3a90 	vmov	s15, r3
 800c0fc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c100:	ed97 6a03 	vldr	s12, [r7, #12]
 800c104:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800c1d4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c108:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c10c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c110:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c114:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c118:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c11c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c120:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800c122:	4b2a      	ldr	r3, [pc, #168]	@ (800c1cc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c124:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c126:	0a5b      	lsrs	r3, r3, #9
 800c128:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c12c:	ee07 3a90 	vmov	s15, r3
 800c130:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c134:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c138:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c13c:	edd7 6a07 	vldr	s13, [r7, #28]
 800c140:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c144:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c148:	ee17 2a90 	vmov	r2, s15
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800c150:	4b1e      	ldr	r3, [pc, #120]	@ (800c1cc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c152:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c154:	0c1b      	lsrs	r3, r3, #16
 800c156:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c15a:	ee07 3a90 	vmov	s15, r3
 800c15e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c162:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c166:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c16a:	edd7 6a07 	vldr	s13, [r7, #28]
 800c16e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c172:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c176:	ee17 2a90 	vmov	r2, s15
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800c17e:	4b13      	ldr	r3, [pc, #76]	@ (800c1cc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c180:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c182:	0e1b      	lsrs	r3, r3, #24
 800c184:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c188:	ee07 3a90 	vmov	s15, r3
 800c18c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c190:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c194:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c198:	edd7 6a07 	vldr	s13, [r7, #28]
 800c19c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c1a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c1a4:	ee17 2a90 	vmov	r2, s15
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800c1ac:	e008      	b.n	800c1c0 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	2200      	movs	r2, #0
 800c1b2:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	2200      	movs	r2, #0
 800c1b8:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	2200      	movs	r2, #0
 800c1be:	609a      	str	r2, [r3, #8]
}
 800c1c0:	bf00      	nop
 800c1c2:	3724      	adds	r7, #36	@ 0x24
 800c1c4:	46bd      	mov	sp, r7
 800c1c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1ca:	4770      	bx	lr
 800c1cc:	58024400 	.word	0x58024400
 800c1d0:	03d09000 	.word	0x03d09000
 800c1d4:	46000000 	.word	0x46000000
 800c1d8:	4c742400 	.word	0x4c742400
 800c1dc:	4a742400 	.word	0x4a742400
 800c1e0:	4bbebc20 	.word	0x4bbebc20

0800c1e4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800c1e4:	b580      	push	{r7, lr}
 800c1e6:	b084      	sub	sp, #16
 800c1e8:	af00      	add	r7, sp, #0
 800c1ea:	6078      	str	r0, [r7, #4]
 800c1ec:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c1ee:	2300      	movs	r3, #0
 800c1f0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800c1f2:	4b53      	ldr	r3, [pc, #332]	@ (800c340 <RCCEx_PLL2_Config+0x15c>)
 800c1f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c1f6:	f003 0303 	and.w	r3, r3, #3
 800c1fa:	2b03      	cmp	r3, #3
 800c1fc:	d101      	bne.n	800c202 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800c1fe:	2301      	movs	r3, #1
 800c200:	e099      	b.n	800c336 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800c202:	4b4f      	ldr	r3, [pc, #316]	@ (800c340 <RCCEx_PLL2_Config+0x15c>)
 800c204:	681b      	ldr	r3, [r3, #0]
 800c206:	4a4e      	ldr	r2, [pc, #312]	@ (800c340 <RCCEx_PLL2_Config+0x15c>)
 800c208:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800c20c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c20e:	f7f9 fc9f 	bl	8005b50 <HAL_GetTick>
 800c212:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800c214:	e008      	b.n	800c228 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800c216:	f7f9 fc9b 	bl	8005b50 <HAL_GetTick>
 800c21a:	4602      	mov	r2, r0
 800c21c:	68bb      	ldr	r3, [r7, #8]
 800c21e:	1ad3      	subs	r3, r2, r3
 800c220:	2b02      	cmp	r3, #2
 800c222:	d901      	bls.n	800c228 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800c224:	2303      	movs	r3, #3
 800c226:	e086      	b.n	800c336 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800c228:	4b45      	ldr	r3, [pc, #276]	@ (800c340 <RCCEx_PLL2_Config+0x15c>)
 800c22a:	681b      	ldr	r3, [r3, #0]
 800c22c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c230:	2b00      	cmp	r3, #0
 800c232:	d1f0      	bne.n	800c216 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800c234:	4b42      	ldr	r3, [pc, #264]	@ (800c340 <RCCEx_PLL2_Config+0x15c>)
 800c236:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c238:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	681b      	ldr	r3, [r3, #0]
 800c240:	031b      	lsls	r3, r3, #12
 800c242:	493f      	ldr	r1, [pc, #252]	@ (800c340 <RCCEx_PLL2_Config+0x15c>)
 800c244:	4313      	orrs	r3, r2
 800c246:	628b      	str	r3, [r1, #40]	@ 0x28
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	685b      	ldr	r3, [r3, #4]
 800c24c:	3b01      	subs	r3, #1
 800c24e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	689b      	ldr	r3, [r3, #8]
 800c256:	3b01      	subs	r3, #1
 800c258:	025b      	lsls	r3, r3, #9
 800c25a:	b29b      	uxth	r3, r3
 800c25c:	431a      	orrs	r2, r3
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	68db      	ldr	r3, [r3, #12]
 800c262:	3b01      	subs	r3, #1
 800c264:	041b      	lsls	r3, r3, #16
 800c266:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800c26a:	431a      	orrs	r2, r3
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	691b      	ldr	r3, [r3, #16]
 800c270:	3b01      	subs	r3, #1
 800c272:	061b      	lsls	r3, r3, #24
 800c274:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800c278:	4931      	ldr	r1, [pc, #196]	@ (800c340 <RCCEx_PLL2_Config+0x15c>)
 800c27a:	4313      	orrs	r3, r2
 800c27c:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800c27e:	4b30      	ldr	r3, [pc, #192]	@ (800c340 <RCCEx_PLL2_Config+0x15c>)
 800c280:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c282:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	695b      	ldr	r3, [r3, #20]
 800c28a:	492d      	ldr	r1, [pc, #180]	@ (800c340 <RCCEx_PLL2_Config+0x15c>)
 800c28c:	4313      	orrs	r3, r2
 800c28e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800c290:	4b2b      	ldr	r3, [pc, #172]	@ (800c340 <RCCEx_PLL2_Config+0x15c>)
 800c292:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c294:	f023 0220 	bic.w	r2, r3, #32
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	699b      	ldr	r3, [r3, #24]
 800c29c:	4928      	ldr	r1, [pc, #160]	@ (800c340 <RCCEx_PLL2_Config+0x15c>)
 800c29e:	4313      	orrs	r3, r2
 800c2a0:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800c2a2:	4b27      	ldr	r3, [pc, #156]	@ (800c340 <RCCEx_PLL2_Config+0x15c>)
 800c2a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c2a6:	4a26      	ldr	r2, [pc, #152]	@ (800c340 <RCCEx_PLL2_Config+0x15c>)
 800c2a8:	f023 0310 	bic.w	r3, r3, #16
 800c2ac:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800c2ae:	4b24      	ldr	r3, [pc, #144]	@ (800c340 <RCCEx_PLL2_Config+0x15c>)
 800c2b0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800c2b2:	4b24      	ldr	r3, [pc, #144]	@ (800c344 <RCCEx_PLL2_Config+0x160>)
 800c2b4:	4013      	ands	r3, r2
 800c2b6:	687a      	ldr	r2, [r7, #4]
 800c2b8:	69d2      	ldr	r2, [r2, #28]
 800c2ba:	00d2      	lsls	r2, r2, #3
 800c2bc:	4920      	ldr	r1, [pc, #128]	@ (800c340 <RCCEx_PLL2_Config+0x15c>)
 800c2be:	4313      	orrs	r3, r2
 800c2c0:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800c2c2:	4b1f      	ldr	r3, [pc, #124]	@ (800c340 <RCCEx_PLL2_Config+0x15c>)
 800c2c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c2c6:	4a1e      	ldr	r2, [pc, #120]	@ (800c340 <RCCEx_PLL2_Config+0x15c>)
 800c2c8:	f043 0310 	orr.w	r3, r3, #16
 800c2cc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800c2ce:	683b      	ldr	r3, [r7, #0]
 800c2d0:	2b00      	cmp	r3, #0
 800c2d2:	d106      	bne.n	800c2e2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800c2d4:	4b1a      	ldr	r3, [pc, #104]	@ (800c340 <RCCEx_PLL2_Config+0x15c>)
 800c2d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c2d8:	4a19      	ldr	r2, [pc, #100]	@ (800c340 <RCCEx_PLL2_Config+0x15c>)
 800c2da:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800c2de:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800c2e0:	e00f      	b.n	800c302 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800c2e2:	683b      	ldr	r3, [r7, #0]
 800c2e4:	2b01      	cmp	r3, #1
 800c2e6:	d106      	bne.n	800c2f6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800c2e8:	4b15      	ldr	r3, [pc, #84]	@ (800c340 <RCCEx_PLL2_Config+0x15c>)
 800c2ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c2ec:	4a14      	ldr	r2, [pc, #80]	@ (800c340 <RCCEx_PLL2_Config+0x15c>)
 800c2ee:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800c2f2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800c2f4:	e005      	b.n	800c302 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800c2f6:	4b12      	ldr	r3, [pc, #72]	@ (800c340 <RCCEx_PLL2_Config+0x15c>)
 800c2f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c2fa:	4a11      	ldr	r2, [pc, #68]	@ (800c340 <RCCEx_PLL2_Config+0x15c>)
 800c2fc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800c300:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800c302:	4b0f      	ldr	r3, [pc, #60]	@ (800c340 <RCCEx_PLL2_Config+0x15c>)
 800c304:	681b      	ldr	r3, [r3, #0]
 800c306:	4a0e      	ldr	r2, [pc, #56]	@ (800c340 <RCCEx_PLL2_Config+0x15c>)
 800c308:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800c30c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c30e:	f7f9 fc1f 	bl	8005b50 <HAL_GetTick>
 800c312:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800c314:	e008      	b.n	800c328 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800c316:	f7f9 fc1b 	bl	8005b50 <HAL_GetTick>
 800c31a:	4602      	mov	r2, r0
 800c31c:	68bb      	ldr	r3, [r7, #8]
 800c31e:	1ad3      	subs	r3, r2, r3
 800c320:	2b02      	cmp	r3, #2
 800c322:	d901      	bls.n	800c328 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800c324:	2303      	movs	r3, #3
 800c326:	e006      	b.n	800c336 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800c328:	4b05      	ldr	r3, [pc, #20]	@ (800c340 <RCCEx_PLL2_Config+0x15c>)
 800c32a:	681b      	ldr	r3, [r3, #0]
 800c32c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c330:	2b00      	cmp	r3, #0
 800c332:	d0f0      	beq.n	800c316 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800c334:	7bfb      	ldrb	r3, [r7, #15]
}
 800c336:	4618      	mov	r0, r3
 800c338:	3710      	adds	r7, #16
 800c33a:	46bd      	mov	sp, r7
 800c33c:	bd80      	pop	{r7, pc}
 800c33e:	bf00      	nop
 800c340:	58024400 	.word	0x58024400
 800c344:	ffff0007 	.word	0xffff0007

0800c348 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800c348:	b580      	push	{r7, lr}
 800c34a:	b084      	sub	sp, #16
 800c34c:	af00      	add	r7, sp, #0
 800c34e:	6078      	str	r0, [r7, #4]
 800c350:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c352:	2300      	movs	r3, #0
 800c354:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800c356:	4b53      	ldr	r3, [pc, #332]	@ (800c4a4 <RCCEx_PLL3_Config+0x15c>)
 800c358:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c35a:	f003 0303 	and.w	r3, r3, #3
 800c35e:	2b03      	cmp	r3, #3
 800c360:	d101      	bne.n	800c366 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800c362:	2301      	movs	r3, #1
 800c364:	e099      	b.n	800c49a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800c366:	4b4f      	ldr	r3, [pc, #316]	@ (800c4a4 <RCCEx_PLL3_Config+0x15c>)
 800c368:	681b      	ldr	r3, [r3, #0]
 800c36a:	4a4e      	ldr	r2, [pc, #312]	@ (800c4a4 <RCCEx_PLL3_Config+0x15c>)
 800c36c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800c370:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c372:	f7f9 fbed 	bl	8005b50 <HAL_GetTick>
 800c376:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800c378:	e008      	b.n	800c38c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800c37a:	f7f9 fbe9 	bl	8005b50 <HAL_GetTick>
 800c37e:	4602      	mov	r2, r0
 800c380:	68bb      	ldr	r3, [r7, #8]
 800c382:	1ad3      	subs	r3, r2, r3
 800c384:	2b02      	cmp	r3, #2
 800c386:	d901      	bls.n	800c38c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800c388:	2303      	movs	r3, #3
 800c38a:	e086      	b.n	800c49a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800c38c:	4b45      	ldr	r3, [pc, #276]	@ (800c4a4 <RCCEx_PLL3_Config+0x15c>)
 800c38e:	681b      	ldr	r3, [r3, #0]
 800c390:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800c394:	2b00      	cmp	r3, #0
 800c396:	d1f0      	bne.n	800c37a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800c398:	4b42      	ldr	r3, [pc, #264]	@ (800c4a4 <RCCEx_PLL3_Config+0x15c>)
 800c39a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c39c:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	681b      	ldr	r3, [r3, #0]
 800c3a4:	051b      	lsls	r3, r3, #20
 800c3a6:	493f      	ldr	r1, [pc, #252]	@ (800c4a4 <RCCEx_PLL3_Config+0x15c>)
 800c3a8:	4313      	orrs	r3, r2
 800c3aa:	628b      	str	r3, [r1, #40]	@ 0x28
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	685b      	ldr	r3, [r3, #4]
 800c3b0:	3b01      	subs	r3, #1
 800c3b2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	689b      	ldr	r3, [r3, #8]
 800c3ba:	3b01      	subs	r3, #1
 800c3bc:	025b      	lsls	r3, r3, #9
 800c3be:	b29b      	uxth	r3, r3
 800c3c0:	431a      	orrs	r2, r3
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	68db      	ldr	r3, [r3, #12]
 800c3c6:	3b01      	subs	r3, #1
 800c3c8:	041b      	lsls	r3, r3, #16
 800c3ca:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800c3ce:	431a      	orrs	r2, r3
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	691b      	ldr	r3, [r3, #16]
 800c3d4:	3b01      	subs	r3, #1
 800c3d6:	061b      	lsls	r3, r3, #24
 800c3d8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800c3dc:	4931      	ldr	r1, [pc, #196]	@ (800c4a4 <RCCEx_PLL3_Config+0x15c>)
 800c3de:	4313      	orrs	r3, r2
 800c3e0:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800c3e2:	4b30      	ldr	r3, [pc, #192]	@ (800c4a4 <RCCEx_PLL3_Config+0x15c>)
 800c3e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c3e6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	695b      	ldr	r3, [r3, #20]
 800c3ee:	492d      	ldr	r1, [pc, #180]	@ (800c4a4 <RCCEx_PLL3_Config+0x15c>)
 800c3f0:	4313      	orrs	r3, r2
 800c3f2:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800c3f4:	4b2b      	ldr	r3, [pc, #172]	@ (800c4a4 <RCCEx_PLL3_Config+0x15c>)
 800c3f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c3f8:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	699b      	ldr	r3, [r3, #24]
 800c400:	4928      	ldr	r1, [pc, #160]	@ (800c4a4 <RCCEx_PLL3_Config+0x15c>)
 800c402:	4313      	orrs	r3, r2
 800c404:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800c406:	4b27      	ldr	r3, [pc, #156]	@ (800c4a4 <RCCEx_PLL3_Config+0x15c>)
 800c408:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c40a:	4a26      	ldr	r2, [pc, #152]	@ (800c4a4 <RCCEx_PLL3_Config+0x15c>)
 800c40c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c410:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800c412:	4b24      	ldr	r3, [pc, #144]	@ (800c4a4 <RCCEx_PLL3_Config+0x15c>)
 800c414:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800c416:	4b24      	ldr	r3, [pc, #144]	@ (800c4a8 <RCCEx_PLL3_Config+0x160>)
 800c418:	4013      	ands	r3, r2
 800c41a:	687a      	ldr	r2, [r7, #4]
 800c41c:	69d2      	ldr	r2, [r2, #28]
 800c41e:	00d2      	lsls	r2, r2, #3
 800c420:	4920      	ldr	r1, [pc, #128]	@ (800c4a4 <RCCEx_PLL3_Config+0x15c>)
 800c422:	4313      	orrs	r3, r2
 800c424:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800c426:	4b1f      	ldr	r3, [pc, #124]	@ (800c4a4 <RCCEx_PLL3_Config+0x15c>)
 800c428:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c42a:	4a1e      	ldr	r2, [pc, #120]	@ (800c4a4 <RCCEx_PLL3_Config+0x15c>)
 800c42c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800c430:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800c432:	683b      	ldr	r3, [r7, #0]
 800c434:	2b00      	cmp	r3, #0
 800c436:	d106      	bne.n	800c446 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800c438:	4b1a      	ldr	r3, [pc, #104]	@ (800c4a4 <RCCEx_PLL3_Config+0x15c>)
 800c43a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c43c:	4a19      	ldr	r2, [pc, #100]	@ (800c4a4 <RCCEx_PLL3_Config+0x15c>)
 800c43e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800c442:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800c444:	e00f      	b.n	800c466 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800c446:	683b      	ldr	r3, [r7, #0]
 800c448:	2b01      	cmp	r3, #1
 800c44a:	d106      	bne.n	800c45a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800c44c:	4b15      	ldr	r3, [pc, #84]	@ (800c4a4 <RCCEx_PLL3_Config+0x15c>)
 800c44e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c450:	4a14      	ldr	r2, [pc, #80]	@ (800c4a4 <RCCEx_PLL3_Config+0x15c>)
 800c452:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800c456:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800c458:	e005      	b.n	800c466 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800c45a:	4b12      	ldr	r3, [pc, #72]	@ (800c4a4 <RCCEx_PLL3_Config+0x15c>)
 800c45c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c45e:	4a11      	ldr	r2, [pc, #68]	@ (800c4a4 <RCCEx_PLL3_Config+0x15c>)
 800c460:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800c464:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800c466:	4b0f      	ldr	r3, [pc, #60]	@ (800c4a4 <RCCEx_PLL3_Config+0x15c>)
 800c468:	681b      	ldr	r3, [r3, #0]
 800c46a:	4a0e      	ldr	r2, [pc, #56]	@ (800c4a4 <RCCEx_PLL3_Config+0x15c>)
 800c46c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800c470:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c472:	f7f9 fb6d 	bl	8005b50 <HAL_GetTick>
 800c476:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800c478:	e008      	b.n	800c48c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800c47a:	f7f9 fb69 	bl	8005b50 <HAL_GetTick>
 800c47e:	4602      	mov	r2, r0
 800c480:	68bb      	ldr	r3, [r7, #8]
 800c482:	1ad3      	subs	r3, r2, r3
 800c484:	2b02      	cmp	r3, #2
 800c486:	d901      	bls.n	800c48c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800c488:	2303      	movs	r3, #3
 800c48a:	e006      	b.n	800c49a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800c48c:	4b05      	ldr	r3, [pc, #20]	@ (800c4a4 <RCCEx_PLL3_Config+0x15c>)
 800c48e:	681b      	ldr	r3, [r3, #0]
 800c490:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800c494:	2b00      	cmp	r3, #0
 800c496:	d0f0      	beq.n	800c47a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800c498:	7bfb      	ldrb	r3, [r7, #15]
}
 800c49a:	4618      	mov	r0, r3
 800c49c:	3710      	adds	r7, #16
 800c49e:	46bd      	mov	sp, r7
 800c4a0:	bd80      	pop	{r7, pc}
 800c4a2:	bf00      	nop
 800c4a4:	58024400 	.word	0x58024400
 800c4a8:	ffff0007 	.word	0xffff0007

0800c4ac <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800c4ac:	b580      	push	{r7, lr}
 800c4ae:	b08a      	sub	sp, #40	@ 0x28
 800c4b0:	af00      	add	r7, sp, #0
 800c4b2:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	2b00      	cmp	r3, #0
 800c4b8:	d101      	bne.n	800c4be <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800c4ba:	2301      	movs	r3, #1
 800c4bc:	e075      	b.n	800c5aa <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800c4c4:	b2db      	uxtb	r3, r3
 800c4c6:	2b00      	cmp	r3, #0
 800c4c8:	d105      	bne.n	800c4d6 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	2200      	movs	r2, #0
 800c4ce:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800c4d0:	6878      	ldr	r0, [r7, #4]
 800c4d2:	f7f8 f847 	bl	8004564 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	2204      	movs	r2, #4
 800c4da:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800c4de:	6878      	ldr	r0, [r7, #4]
 800c4e0:	f000 f868 	bl	800c5b4 <HAL_SD_InitCard>
 800c4e4:	4603      	mov	r3, r0
 800c4e6:	2b00      	cmp	r3, #0
 800c4e8:	d001      	beq.n	800c4ee <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800c4ea:	2301      	movs	r3, #1
 800c4ec:	e05d      	b.n	800c5aa <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 800c4ee:	f107 0308 	add.w	r3, r7, #8
 800c4f2:	4619      	mov	r1, r3
 800c4f4:	6878      	ldr	r0, [r7, #4]
 800c4f6:	f000 fdaf 	bl	800d058 <HAL_SD_GetCardStatus>
 800c4fa:	4603      	mov	r3, r0
 800c4fc:	2b00      	cmp	r3, #0
 800c4fe:	d001      	beq.n	800c504 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 800c500:	2301      	movs	r3, #1
 800c502:	e052      	b.n	800c5aa <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 800c504:	7e3b      	ldrb	r3, [r7, #24]
 800c506:	b2db      	uxtb	r3, r3
 800c508:	627b      	str	r3, [r7, #36]	@ 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 800c50a:	7e7b      	ldrb	r3, [r7, #25]
 800c50c:	b2db      	uxtb	r3, r3
 800c50e:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c514:	2b01      	cmp	r3, #1
 800c516:	d10a      	bne.n	800c52e <HAL_SD_Init+0x82>
 800c518:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c51a:	2b00      	cmp	r3, #0
 800c51c:	d102      	bne.n	800c524 <HAL_SD_Init+0x78>
 800c51e:	6a3b      	ldr	r3, [r7, #32]
 800c520:	2b00      	cmp	r3, #0
 800c522:	d004      	beq.n	800c52e <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c52a:	659a      	str	r2, [r3, #88]	@ 0x58
 800c52c:	e00b      	b.n	800c546 <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c532:	2b01      	cmp	r3, #1
 800c534:	d104      	bne.n	800c540 <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800c53c:	659a      	str	r2, [r3, #88]	@ 0x58
 800c53e:	e002      	b.n	800c546 <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	2200      	movs	r2, #0
 800c544:	659a      	str	r2, [r3, #88]	@ 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	68db      	ldr	r3, [r3, #12]
 800c54a:	4619      	mov	r1, r3
 800c54c:	6878      	ldr	r0, [r7, #4]
 800c54e:	f000 fe6d 	bl	800d22c <HAL_SD_ConfigWideBusOperation>
 800c552:	4603      	mov	r3, r0
 800c554:	2b00      	cmp	r3, #0
 800c556:	d001      	beq.n	800c55c <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 800c558:	2301      	movs	r3, #1
 800c55a:	e026      	b.n	800c5aa <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 800c55c:	f7f9 faf8 	bl	8005b50 <HAL_GetTick>
 800c560:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800c562:	e011      	b.n	800c588 <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800c564:	f7f9 faf4 	bl	8005b50 <HAL_GetTick>
 800c568:	4602      	mov	r2, r0
 800c56a:	69fb      	ldr	r3, [r7, #28]
 800c56c:	1ad3      	subs	r3, r2, r3
 800c56e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c572:	d109      	bne.n	800c588 <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800c57a:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	2201      	movs	r2, #1
 800c580:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      return HAL_TIMEOUT;
 800c584:	2303      	movs	r3, #3
 800c586:	e010      	b.n	800c5aa <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800c588:	6878      	ldr	r0, [r7, #4]
 800c58a:	f000 ff61 	bl	800d450 <HAL_SD_GetCardState>
 800c58e:	4603      	mov	r3, r0
 800c590:	2b04      	cmp	r3, #4
 800c592:	d1e7      	bne.n	800c564 <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	2200      	movs	r2, #0
 800c598:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	2200      	movs	r2, #0
 800c59e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	2201      	movs	r2, #1
 800c5a4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return HAL_OK;
 800c5a8:	2300      	movs	r3, #0
}
 800c5aa:	4618      	mov	r0, r3
 800c5ac:	3728      	adds	r7, #40	@ 0x28
 800c5ae:	46bd      	mov	sp, r7
 800c5b0:	bd80      	pop	{r7, pc}
	...

0800c5b4 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800c5b4:	b590      	push	{r4, r7, lr}
 800c5b6:	b08d      	sub	sp, #52	@ 0x34
 800c5b8:	af02      	add	r7, sp, #8
 800c5ba:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800c5bc:	2300      	movs	r3, #0
 800c5be:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800c5c0:	2300      	movs	r3, #0
 800c5c2:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800c5c4:	2300      	movs	r3, #0
 800c5c6:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800c5c8:	2300      	movs	r3, #0
 800c5ca:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800c5cc:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 800c5d0:	f04f 0100 	mov.w	r1, #0
 800c5d4:	f7fe fc76 	bl	800aec4 <HAL_RCCEx_GetPeriphCLKFreq>
 800c5d8:	6278      	str	r0, [r7, #36]	@ 0x24
  if (sdmmc_clk == 0U)
 800c5da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c5dc:	2b00      	cmp	r3, #0
 800c5de:	d109      	bne.n	800c5f4 <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	2201      	movs	r2, #1
 800c5e4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800c5ee:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800c5f0:	2301      	movs	r3, #1
 800c5f2:	e070      	b.n	800c6d6 <HAL_SD_InitCard+0x122>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 800c5f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c5f6:	0a1b      	lsrs	r3, r3, #8
 800c5f8:	4a39      	ldr	r2, [pc, #228]	@ (800c6e0 <HAL_SD_InitCard+0x12c>)
 800c5fa:	fba2 2303 	umull	r2, r3, r2, r3
 800c5fe:	091b      	lsrs	r3, r3, #4
 800c600:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	681c      	ldr	r4, [r3, #0]
 800c606:	466a      	mov	r2, sp
 800c608:	f107 0318 	add.w	r3, r7, #24
 800c60c:	e893 0003 	ldmia.w	r3, {r0, r1}
 800c610:	e882 0003 	stmia.w	r2, {r0, r1}
 800c614:	f107 030c 	add.w	r3, r7, #12
 800c618:	cb0e      	ldmia	r3, {r1, r2, r3}
 800c61a:	4620      	mov	r0, r4
 800c61c:	f003 f916 	bl	800f84c <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	681b      	ldr	r3, [r3, #0]
 800c624:	4618      	mov	r0, r3
 800c626:	f003 f959 	bl	800f8dc <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  if (Init.ClockDiv != 0U)
 800c62a:	69fb      	ldr	r3, [r7, #28]
 800c62c:	2b00      	cmp	r3, #0
 800c62e:	d005      	beq.n	800c63c <HAL_SD_InitCard+0x88>
  {
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 800c630:	69fb      	ldr	r3, [r7, #28]
 800c632:	005b      	lsls	r3, r3, #1
 800c634:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c636:	fbb2 f3f3 	udiv	r3, r2, r3
 800c63a:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  if (sdmmc_clk != 0U)
 800c63c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c63e:	2b00      	cmp	r3, #0
 800c640:	d007      	beq.n	800c652 <HAL_SD_InitCard+0x9e>
  {
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 800c642:	4a28      	ldr	r2, [pc, #160]	@ (800c6e4 <HAL_SD_InitCard+0x130>)
 800c644:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c646:	fbb2 f3f3 	udiv	r3, r2, r3
 800c64a:	3301      	adds	r3, #1
 800c64c:	4618      	mov	r0, r3
 800c64e:	f7f9 fa8b 	bl	8005b68 <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800c652:	6878      	ldr	r0, [r7, #4]
 800c654:	f000 ffea 	bl	800d62c <SD_PowerON>
 800c658:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800c65a:	6a3b      	ldr	r3, [r7, #32]
 800c65c:	2b00      	cmp	r3, #0
 800c65e:	d00b      	beq.n	800c678 <HAL_SD_InitCard+0xc4>
  {
    hsd->State = HAL_SD_STATE_READY;
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	2201      	movs	r2, #1
 800c664:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c66c:	6a3b      	ldr	r3, [r7, #32]
 800c66e:	431a      	orrs	r2, r3
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800c674:	2301      	movs	r3, #1
 800c676:	e02e      	b.n	800c6d6 <HAL_SD_InitCard+0x122>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800c678:	6878      	ldr	r0, [r7, #4]
 800c67a:	f000 ff09 	bl	800d490 <SD_InitCard>
 800c67e:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800c680:	6a3b      	ldr	r3, [r7, #32]
 800c682:	2b00      	cmp	r3, #0
 800c684:	d00b      	beq.n	800c69e <HAL_SD_InitCard+0xea>
  {
    hsd->State = HAL_SD_STATE_READY;
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	2201      	movs	r2, #1
 800c68a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c692:	6a3b      	ldr	r3, [r7, #32]
 800c694:	431a      	orrs	r2, r3
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800c69a:	2301      	movs	r3, #1
 800c69c:	e01b      	b.n	800c6d6 <HAL_SD_InitCard+0x122>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	681b      	ldr	r3, [r3, #0]
 800c6a2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800c6a6:	4618      	mov	r0, r3
 800c6a8:	f003 f9ae 	bl	800fa08 <SDMMC_CmdBlockLength>
 800c6ac:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800c6ae:	6a3b      	ldr	r3, [r7, #32]
 800c6b0:	2b00      	cmp	r3, #0
 800c6b2:	d00f      	beq.n	800c6d4 <HAL_SD_InitCard+0x120>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	681b      	ldr	r3, [r3, #0]
 800c6b8:	4a0b      	ldr	r2, [pc, #44]	@ (800c6e8 <HAL_SD_InitCard+0x134>)
 800c6ba:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c6c0:	6a3b      	ldr	r3, [r7, #32]
 800c6c2:	431a      	orrs	r2, r3
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	2201      	movs	r2, #1
 800c6cc:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 800c6d0:	2301      	movs	r3, #1
 800c6d2:	e000      	b.n	800c6d6 <HAL_SD_InitCard+0x122>
  }

  return HAL_OK;
 800c6d4:	2300      	movs	r3, #0
}
 800c6d6:	4618      	mov	r0, r3
 800c6d8:	372c      	adds	r7, #44	@ 0x2c
 800c6da:	46bd      	mov	sp, r7
 800c6dc:	bd90      	pop	{r4, r7, pc}
 800c6de:	bf00      	nop
 800c6e0:	014f8b59 	.word	0x014f8b59
 800c6e4:	00012110 	.word	0x00012110
 800c6e8:	1fe00fff 	.word	0x1fe00fff

0800c6ec <HAL_SD_ReadBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd,
                                        uint32_t NumberOfBlocks)
{
 800c6ec:	b580      	push	{r7, lr}
 800c6ee:	b08c      	sub	sp, #48	@ 0x30
 800c6f0:	af00      	add	r7, sp, #0
 800c6f2:	60f8      	str	r0, [r7, #12]
 800c6f4:	60b9      	str	r1, [r7, #8]
 800c6f6:	607a      	str	r2, [r7, #4]
 800c6f8:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (NULL == pData)
 800c6fe:	68bb      	ldr	r3, [r7, #8]
 800c700:	2b00      	cmp	r3, #0
 800c702:	d107      	bne.n	800c714 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800c704:	68fb      	ldr	r3, [r7, #12]
 800c706:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c708:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800c70c:	68fb      	ldr	r3, [r7, #12]
 800c70e:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800c710:	2301      	movs	r3, #1
 800c712:	e08d      	b.n	800c830 <HAL_SD_ReadBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 800c714:	68fb      	ldr	r3, [r7, #12]
 800c716:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800c71a:	b2db      	uxtb	r3, r3
 800c71c:	2b01      	cmp	r3, #1
 800c71e:	f040 8086 	bne.w	800c82e <HAL_SD_ReadBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800c722:	68fb      	ldr	r3, [r7, #12]
 800c724:	2200      	movs	r2, #0
 800c726:	635a      	str	r2, [r3, #52]	@ 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800c728:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c72a:	683b      	ldr	r3, [r7, #0]
 800c72c:	441a      	add	r2, r3
 800c72e:	68fb      	ldr	r3, [r7, #12]
 800c730:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c732:	429a      	cmp	r2, r3
 800c734:	d907      	bls.n	800c746 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800c736:	68fb      	ldr	r3, [r7, #12]
 800c738:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c73a:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800c73e:	68fb      	ldr	r3, [r7, #12]
 800c740:	635a      	str	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 800c742:	2301      	movs	r3, #1
 800c744:	e074      	b.n	800c830 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800c746:	68fb      	ldr	r3, [r7, #12]
 800c748:	2203      	movs	r2, #3
 800c74a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800c74e:	68fb      	ldr	r3, [r7, #12]
 800c750:	681b      	ldr	r3, [r3, #0]
 800c752:	2200      	movs	r2, #0
 800c754:	62da      	str	r2, [r3, #44]	@ 0x2c

    hsd->pRxBuffPtr = pData;
 800c756:	68fb      	ldr	r3, [r7, #12]
 800c758:	68ba      	ldr	r2, [r7, #8]
 800c75a:	625a      	str	r2, [r3, #36]	@ 0x24
    hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 800c75c:	683b      	ldr	r3, [r7, #0]
 800c75e:	025a      	lsls	r2, r3, #9
 800c760:	68fb      	ldr	r3, [r7, #12]
 800c762:	629a      	str	r2, [r3, #40]	@ 0x28

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800c764:	68fb      	ldr	r3, [r7, #12]
 800c766:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c768:	2b01      	cmp	r3, #1
 800c76a:	d002      	beq.n	800c772 <HAL_SD_ReadBlocks_DMA+0x86>
    {
      add *= 512U;
 800c76c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c76e:	025b      	lsls	r3, r3, #9
 800c770:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800c772:	f04f 33ff 	mov.w	r3, #4294967295
 800c776:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800c778:	683b      	ldr	r3, [r7, #0]
 800c77a:	025b      	lsls	r3, r3, #9
 800c77c:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800c77e:	2390      	movs	r3, #144	@ 0x90
 800c780:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800c782:	2302      	movs	r3, #2
 800c784:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800c786:	2300      	movs	r3, #0
 800c788:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800c78a:	2300      	movs	r3, #0
 800c78c:	627b      	str	r3, [r7, #36]	@ 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800c78e:	68fb      	ldr	r3, [r7, #12]
 800c790:	681b      	ldr	r3, [r3, #0]
 800c792:	f107 0210 	add.w	r2, r7, #16
 800c796:	4611      	mov	r1, r2
 800c798:	4618      	mov	r0, r3
 800c79a:	f003 f909 	bl	800f9b0 <SDMMC_ConfigData>

    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800c79e:	68fb      	ldr	r3, [r7, #12]
 800c7a0:	681b      	ldr	r3, [r3, #0]
 800c7a2:	68da      	ldr	r2, [r3, #12]
 800c7a4:	68fb      	ldr	r3, [r7, #12]
 800c7a6:	681b      	ldr	r3, [r3, #0]
 800c7a8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800c7ac:	60da      	str	r2, [r3, #12]
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800c7ae:	68fb      	ldr	r3, [r7, #12]
 800c7b0:	681b      	ldr	r3, [r3, #0]
 800c7b2:	68ba      	ldr	r2, [r7, #8]
 800c7b4:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800c7b6:	68fb      	ldr	r3, [r7, #12]
 800c7b8:	681b      	ldr	r3, [r3, #0]
 800c7ba:	2201      	movs	r2, #1
 800c7bc:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Read Blocks in DMA mode */
    if (NumberOfBlocks > 1U)
 800c7be:	683b      	ldr	r3, [r7, #0]
 800c7c0:	2b01      	cmp	r3, #1
 800c7c2:	d90a      	bls.n	800c7da <HAL_SD_ReadBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800c7c4:	68fb      	ldr	r3, [r7, #12]
 800c7c6:	2282      	movs	r2, #130	@ 0x82
 800c7c8:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800c7ca:	68fb      	ldr	r3, [r7, #12]
 800c7cc:	681b      	ldr	r3, [r3, #0]
 800c7ce:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c7d0:	4618      	mov	r0, r3
 800c7d2:	f003 f95f 	bl	800fa94 <SDMMC_CmdReadMultiBlock>
 800c7d6:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800c7d8:	e009      	b.n	800c7ee <HAL_SD_ReadBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800c7da:	68fb      	ldr	r3, [r7, #12]
 800c7dc:	2281      	movs	r2, #129	@ 0x81
 800c7de:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800c7e0:	68fb      	ldr	r3, [r7, #12]
 800c7e2:	681b      	ldr	r3, [r3, #0]
 800c7e4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c7e6:	4618      	mov	r0, r3
 800c7e8:	f003 f931 	bl	800fa4e <SDMMC_CmdReadSingleBlock>
 800c7ec:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 800c7ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c7f0:	2b00      	cmp	r3, #0
 800c7f2:	d012      	beq.n	800c81a <HAL_SD_ReadBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c7f4:	68fb      	ldr	r3, [r7, #12]
 800c7f6:	681b      	ldr	r3, [r3, #0]
 800c7f8:	4a0f      	ldr	r2, [pc, #60]	@ (800c838 <HAL_SD_ReadBlocks_DMA+0x14c>)
 800c7fa:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 800c7fc:	68fb      	ldr	r3, [r7, #12]
 800c7fe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c800:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c802:	431a      	orrs	r2, r3
 800c804:	68fb      	ldr	r3, [r7, #12]
 800c806:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800c808:	68fb      	ldr	r3, [r7, #12]
 800c80a:	2201      	movs	r2, #1
 800c80c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800c810:	68fb      	ldr	r3, [r7, #12]
 800c812:	2200      	movs	r2, #0
 800c814:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 800c816:	2301      	movs	r3, #1
 800c818:	e00a      	b.n	800c830 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800c81a:	68fb      	ldr	r3, [r7, #12]
 800c81c:	681b      	ldr	r3, [r3, #0]
 800c81e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800c820:	68fb      	ldr	r3, [r7, #12]
 800c822:	681b      	ldr	r3, [r3, #0]
 800c824:	f442 7295 	orr.w	r2, r2, #298	@ 0x12a
 800c828:	63da      	str	r2, [r3, #60]	@ 0x3c


    return HAL_OK;
 800c82a:	2300      	movs	r3, #0
 800c82c:	e000      	b.n	800c830 <HAL_SD_ReadBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 800c82e:	2302      	movs	r3, #2
  }
}
 800c830:	4618      	mov	r0, r3
 800c832:	3730      	adds	r7, #48	@ 0x30
 800c834:	46bd      	mov	sp, r7
 800c836:	bd80      	pop	{r7, pc}
 800c838:	1fe00fff 	.word	0x1fe00fff

0800c83c <HAL_SD_WriteBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, const uint8_t *pData, uint32_t BlockAdd,
                                         uint32_t NumberOfBlocks)
{
 800c83c:	b580      	push	{r7, lr}
 800c83e:	b08c      	sub	sp, #48	@ 0x30
 800c840:	af00      	add	r7, sp, #0
 800c842:	60f8      	str	r0, [r7, #12]
 800c844:	60b9      	str	r1, [r7, #8]
 800c846:	607a      	str	r2, [r7, #4]
 800c848:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (NULL == pData)
 800c84e:	68bb      	ldr	r3, [r7, #8]
 800c850:	2b00      	cmp	r3, #0
 800c852:	d107      	bne.n	800c864 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800c854:	68fb      	ldr	r3, [r7, #12]
 800c856:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c858:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800c85c:	68fb      	ldr	r3, [r7, #12]
 800c85e:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800c860:	2301      	movs	r3, #1
 800c862:	e08d      	b.n	800c980 <HAL_SD_WriteBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 800c864:	68fb      	ldr	r3, [r7, #12]
 800c866:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800c86a:	b2db      	uxtb	r3, r3
 800c86c:	2b01      	cmp	r3, #1
 800c86e:	f040 8086 	bne.w	800c97e <HAL_SD_WriteBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800c872:	68fb      	ldr	r3, [r7, #12]
 800c874:	2200      	movs	r2, #0
 800c876:	635a      	str	r2, [r3, #52]	@ 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800c878:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c87a:	683b      	ldr	r3, [r7, #0]
 800c87c:	441a      	add	r2, r3
 800c87e:	68fb      	ldr	r3, [r7, #12]
 800c880:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c882:	429a      	cmp	r2, r3
 800c884:	d907      	bls.n	800c896 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800c886:	68fb      	ldr	r3, [r7, #12]
 800c888:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c88a:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800c88e:	68fb      	ldr	r3, [r7, #12]
 800c890:	635a      	str	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 800c892:	2301      	movs	r3, #1
 800c894:	e074      	b.n	800c980 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800c896:	68fb      	ldr	r3, [r7, #12]
 800c898:	2203      	movs	r2, #3
 800c89a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800c89e:	68fb      	ldr	r3, [r7, #12]
 800c8a0:	681b      	ldr	r3, [r3, #0]
 800c8a2:	2200      	movs	r2, #0
 800c8a4:	62da      	str	r2, [r3, #44]	@ 0x2c

    hsd->pTxBuffPtr = pData;
 800c8a6:	68fb      	ldr	r3, [r7, #12]
 800c8a8:	68ba      	ldr	r2, [r7, #8]
 800c8aa:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 800c8ac:	683b      	ldr	r3, [r7, #0]
 800c8ae:	025a      	lsls	r2, r3, #9
 800c8b0:	68fb      	ldr	r3, [r7, #12]
 800c8b2:	621a      	str	r2, [r3, #32]

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800c8b4:	68fb      	ldr	r3, [r7, #12]
 800c8b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c8b8:	2b01      	cmp	r3, #1
 800c8ba:	d002      	beq.n	800c8c2 <HAL_SD_WriteBlocks_DMA+0x86>
    {
      add *= 512U;
 800c8bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c8be:	025b      	lsls	r3, r3, #9
 800c8c0:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800c8c2:	f04f 33ff 	mov.w	r3, #4294967295
 800c8c6:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800c8c8:	683b      	ldr	r3, [r7, #0]
 800c8ca:	025b      	lsls	r3, r3, #9
 800c8cc:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800c8ce:	2390      	movs	r3, #144	@ 0x90
 800c8d0:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800c8d2:	2300      	movs	r3, #0
 800c8d4:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800c8d6:	2300      	movs	r3, #0
 800c8d8:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800c8da:	2300      	movs	r3, #0
 800c8dc:	627b      	str	r3, [r7, #36]	@ 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800c8de:	68fb      	ldr	r3, [r7, #12]
 800c8e0:	681b      	ldr	r3, [r3, #0]
 800c8e2:	f107 0210 	add.w	r2, r7, #16
 800c8e6:	4611      	mov	r1, r2
 800c8e8:	4618      	mov	r0, r3
 800c8ea:	f003 f861 	bl	800f9b0 <SDMMC_ConfigData>


    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800c8ee:	68fb      	ldr	r3, [r7, #12]
 800c8f0:	681b      	ldr	r3, [r3, #0]
 800c8f2:	68da      	ldr	r2, [r3, #12]
 800c8f4:	68fb      	ldr	r3, [r7, #12]
 800c8f6:	681b      	ldr	r3, [r3, #0]
 800c8f8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800c8fc:	60da      	str	r2, [r3, #12]

    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800c8fe:	68fb      	ldr	r3, [r7, #12]
 800c900:	681b      	ldr	r3, [r3, #0]
 800c902:	68ba      	ldr	r2, [r7, #8]
 800c904:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800c906:	68fb      	ldr	r3, [r7, #12]
 800c908:	681b      	ldr	r3, [r3, #0]
 800c90a:	2201      	movs	r2, #1
 800c90c:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 800c90e:	683b      	ldr	r3, [r7, #0]
 800c910:	2b01      	cmp	r3, #1
 800c912:	d90a      	bls.n	800c92a <HAL_SD_WriteBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800c914:	68fb      	ldr	r3, [r7, #12]
 800c916:	22a0      	movs	r2, #160	@ 0xa0
 800c918:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800c91a:	68fb      	ldr	r3, [r7, #12]
 800c91c:	681b      	ldr	r3, [r3, #0]
 800c91e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c920:	4618      	mov	r0, r3
 800c922:	f003 f8fd 	bl	800fb20 <SDMMC_CmdWriteMultiBlock>
 800c926:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800c928:	e009      	b.n	800c93e <HAL_SD_WriteBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800c92a:	68fb      	ldr	r3, [r7, #12]
 800c92c:	2290      	movs	r2, #144	@ 0x90
 800c92e:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800c930:	68fb      	ldr	r3, [r7, #12]
 800c932:	681b      	ldr	r3, [r3, #0]
 800c934:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c936:	4618      	mov	r0, r3
 800c938:	f003 f8cf 	bl	800fada <SDMMC_CmdWriteSingleBlock>
 800c93c:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 800c93e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c940:	2b00      	cmp	r3, #0
 800c942:	d012      	beq.n	800c96a <HAL_SD_WriteBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c944:	68fb      	ldr	r3, [r7, #12]
 800c946:	681b      	ldr	r3, [r3, #0]
 800c948:	4a0f      	ldr	r2, [pc, #60]	@ (800c988 <HAL_SD_WriteBlocks_DMA+0x14c>)
 800c94a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 800c94c:	68fb      	ldr	r3, [r7, #12]
 800c94e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c950:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c952:	431a      	orrs	r2, r3
 800c954:	68fb      	ldr	r3, [r7, #12]
 800c956:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800c958:	68fb      	ldr	r3, [r7, #12]
 800c95a:	2201      	movs	r2, #1
 800c95c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800c960:	68fb      	ldr	r3, [r7, #12]
 800c962:	2200      	movs	r2, #0
 800c964:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 800c966:	2301      	movs	r3, #1
 800c968:	e00a      	b.n	800c980 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 800c96a:	68fb      	ldr	r3, [r7, #12]
 800c96c:	681b      	ldr	r3, [r3, #0]
 800c96e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800c970:	68fb      	ldr	r3, [r7, #12]
 800c972:	681b      	ldr	r3, [r3, #0]
 800c974:	f442 728d 	orr.w	r2, r2, #282	@ 0x11a
 800c978:	63da      	str	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800c97a:	2300      	movs	r3, #0
 800c97c:	e000      	b.n	800c980 <HAL_SD_WriteBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 800c97e:	2302      	movs	r3, #2
  }
}
 800c980:	4618      	mov	r0, r3
 800c982:	3730      	adds	r7, #48	@ 0x30
 800c984:	46bd      	mov	sp, r7
 800c986:	bd80      	pop	{r7, pc}
 800c988:	1fe00fff 	.word	0x1fe00fff

0800c98c <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800c98c:	b580      	push	{r7, lr}
 800c98e:	b084      	sub	sp, #16
 800c990:	af00      	add	r7, sp, #0
 800c992:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c998:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	681b      	ldr	r3, [r3, #0]
 800c99e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c9a0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800c9a4:	2b00      	cmp	r3, #0
 800c9a6:	d008      	beq.n	800c9ba <HAL_SD_IRQHandler+0x2e>
 800c9a8:	68fb      	ldr	r3, [r7, #12]
 800c9aa:	f003 0308 	and.w	r3, r3, #8
 800c9ae:	2b00      	cmp	r3, #0
 800c9b0:	d003      	beq.n	800c9ba <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800c9b2:	6878      	ldr	r0, [r7, #4]
 800c9b4:	f001 f926 	bl	800dc04 <SD_Read_IT>
 800c9b8:	e19a      	b.n	800ccf0 <HAL_SD_IRQHandler+0x364>
  }

  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	681b      	ldr	r3, [r3, #0]
 800c9be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c9c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c9c4:	2b00      	cmp	r3, #0
 800c9c6:	f000 80ac 	beq.w	800cb22 <HAL_SD_IRQHandler+0x196>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	681b      	ldr	r3, [r3, #0]
 800c9ce:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800c9d2:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	681b      	ldr	r3, [r3, #0]
 800c9d8:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	681a      	ldr	r2, [r3, #0]
 800c9de:	4b59      	ldr	r3, [pc, #356]	@ (800cb44 <HAL_SD_IRQHandler+0x1b8>)
 800c9e0:	400b      	ands	r3, r1
 800c9e2:	63d3      	str	r3, [r2, #60]	@ 0x3c
                        SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE | \
                        SDMMC_IT_RXFIFOHF);

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	681b      	ldr	r3, [r3, #0]
 800c9e8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	681b      	ldr	r3, [r3, #0]
 800c9ee:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 800c9f2:	63da      	str	r2, [r3, #60]	@ 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	681b      	ldr	r3, [r3, #0]
 800c9f8:	68da      	ldr	r2, [r3, #12]
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	681b      	ldr	r3, [r3, #0]
 800c9fe:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800ca02:	60da      	str	r2, [r3, #12]

    if ((context & SD_CONTEXT_IT) != 0U)
 800ca04:	68fb      	ldr	r3, [r7, #12]
 800ca06:	f003 0308 	and.w	r3, r3, #8
 800ca0a:	2b00      	cmp	r3, #0
 800ca0c:	d038      	beq.n	800ca80 <HAL_SD_IRQHandler+0xf4>
    {
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800ca0e:	68fb      	ldr	r3, [r7, #12]
 800ca10:	f003 0302 	and.w	r3, r3, #2
 800ca14:	2b00      	cmp	r3, #0
 800ca16:	d104      	bne.n	800ca22 <HAL_SD_IRQHandler+0x96>
 800ca18:	68fb      	ldr	r3, [r7, #12]
 800ca1a:	f003 0320 	and.w	r3, r3, #32
 800ca1e:	2b00      	cmp	r3, #0
 800ca20:	d011      	beq.n	800ca46 <HAL_SD_IRQHandler+0xba>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	681b      	ldr	r3, [r3, #0]
 800ca26:	4618      	mov	r0, r3
 800ca28:	f003 f89e 	bl	800fb68 <SDMMC_CmdStopTransfer>
 800ca2c:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 800ca2e:	68bb      	ldr	r3, [r7, #8]
 800ca30:	2b00      	cmp	r3, #0
 800ca32:	d008      	beq.n	800ca46 <HAL_SD_IRQHandler+0xba>
        {
          hsd->ErrorCode |= errorstate;
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ca38:	68bb      	ldr	r3, [r7, #8]
 800ca3a:	431a      	orrs	r2, r3
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	635a      	str	r2, [r3, #52]	@ 0x34
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800ca40:	6878      	ldr	r0, [r7, #4]
 800ca42:	f000 f95b 	bl	800ccfc <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800ca46:	687b      	ldr	r3, [r7, #4]
 800ca48:	681b      	ldr	r3, [r3, #0]
 800ca4a:	4a3f      	ldr	r2, [pc, #252]	@ (800cb48 <HAL_SD_IRQHandler+0x1bc>)
 800ca4c:	639a      	str	r2, [r3, #56]	@ 0x38

      hsd->State = HAL_SD_STATE_READY;
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	2201      	movs	r2, #1
 800ca52:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800ca56:	687b      	ldr	r3, [r7, #4]
 800ca58:	2200      	movs	r2, #0
 800ca5a:	62da      	str	r2, [r3, #44]	@ 0x2c
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800ca5c:	68fb      	ldr	r3, [r7, #12]
 800ca5e:	f003 0301 	and.w	r3, r3, #1
 800ca62:	2b00      	cmp	r3, #0
 800ca64:	d104      	bne.n	800ca70 <HAL_SD_IRQHandler+0xe4>
 800ca66:	68fb      	ldr	r3, [r7, #12]
 800ca68:	f003 0302 	and.w	r3, r3, #2
 800ca6c:	2b00      	cmp	r3, #0
 800ca6e:	d003      	beq.n	800ca78 <HAL_SD_IRQHandler+0xec>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800ca70:	6878      	ldr	r0, [r7, #4]
 800ca72:	f003 fd2b 	bl	80104cc <HAL_SD_RxCpltCallback>
 800ca76:	e13b      	b.n	800ccf0 <HAL_SD_IRQHandler+0x364>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800ca78:	6878      	ldr	r0, [r7, #4]
 800ca7a:	f003 fd1d 	bl	80104b8 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800ca7e:	e137      	b.n	800ccf0 <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 800ca80:	68fb      	ldr	r3, [r7, #12]
 800ca82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ca86:	2b00      	cmp	r3, #0
 800ca88:	f000 8132 	beq.w	800ccf0 <HAL_SD_IRQHandler+0x364>
      hsd->Instance->DLEN = 0;
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	681b      	ldr	r3, [r3, #0]
 800ca90:	2200      	movs	r2, #0
 800ca92:	629a      	str	r2, [r3, #40]	@ 0x28
      hsd->Instance->DCTRL = 0;
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	681b      	ldr	r3, [r3, #0]
 800ca98:	2200      	movs	r2, #0
 800ca9a:	62da      	str	r2, [r3, #44]	@ 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	681b      	ldr	r3, [r3, #0]
 800caa0:	2200      	movs	r2, #0
 800caa2:	651a      	str	r2, [r3, #80]	@ 0x50
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800caa4:	68fb      	ldr	r3, [r7, #12]
 800caa6:	f003 0302 	and.w	r3, r3, #2
 800caaa:	2b00      	cmp	r3, #0
 800caac:	d104      	bne.n	800cab8 <HAL_SD_IRQHandler+0x12c>
 800caae:	68fb      	ldr	r3, [r7, #12]
 800cab0:	f003 0320 	and.w	r3, r3, #32
 800cab4:	2b00      	cmp	r3, #0
 800cab6:	d011      	beq.n	800cadc <HAL_SD_IRQHandler+0x150>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	681b      	ldr	r3, [r3, #0]
 800cabc:	4618      	mov	r0, r3
 800cabe:	f003 f853 	bl	800fb68 <SDMMC_CmdStopTransfer>
 800cac2:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 800cac4:	68bb      	ldr	r3, [r7, #8]
 800cac6:	2b00      	cmp	r3, #0
 800cac8:	d008      	beq.n	800cadc <HAL_SD_IRQHandler+0x150>
          hsd->ErrorCode |= errorstate;
 800caca:	687b      	ldr	r3, [r7, #4]
 800cacc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800cace:	68bb      	ldr	r3, [r7, #8]
 800cad0:	431a      	orrs	r2, r3
 800cad2:	687b      	ldr	r3, [r7, #4]
 800cad4:	635a      	str	r2, [r3, #52]	@ 0x34
          HAL_SD_ErrorCallback(hsd);
 800cad6:	6878      	ldr	r0, [r7, #4]
 800cad8:	f000 f910 	bl	800ccfc <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	2201      	movs	r2, #1
 800cae0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	2200      	movs	r2, #0
 800cae8:	62da      	str	r2, [r3, #44]	@ 0x2c
      if (((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800caea:	68fb      	ldr	r3, [r7, #12]
 800caec:	f003 0310 	and.w	r3, r3, #16
 800caf0:	2b00      	cmp	r3, #0
 800caf2:	d104      	bne.n	800cafe <HAL_SD_IRQHandler+0x172>
 800caf4:	68fb      	ldr	r3, [r7, #12]
 800caf6:	f003 0320 	and.w	r3, r3, #32
 800cafa:	2b00      	cmp	r3, #0
 800cafc:	d002      	beq.n	800cb04 <HAL_SD_IRQHandler+0x178>
        HAL_SD_TxCpltCallback(hsd);
 800cafe:	6878      	ldr	r0, [r7, #4]
 800cb00:	f003 fcda 	bl	80104b8 <HAL_SD_TxCpltCallback>
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800cb04:	68fb      	ldr	r3, [r7, #12]
 800cb06:	f003 0301 	and.w	r3, r3, #1
 800cb0a:	2b00      	cmp	r3, #0
 800cb0c:	d105      	bne.n	800cb1a <HAL_SD_IRQHandler+0x18e>
 800cb0e:	68fb      	ldr	r3, [r7, #12]
 800cb10:	f003 0302 	and.w	r3, r3, #2
 800cb14:	2b00      	cmp	r3, #0
 800cb16:	f000 80eb 	beq.w	800ccf0 <HAL_SD_IRQHandler+0x364>
        HAL_SD_RxCpltCallback(hsd);
 800cb1a:	6878      	ldr	r0, [r7, #4]
 800cb1c:	f003 fcd6 	bl	80104cc <HAL_SD_RxCpltCallback>
}
 800cb20:	e0e6      	b.n	800ccf0 <HAL_SD_IRQHandler+0x364>
  else if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	681b      	ldr	r3, [r3, #0]
 800cb26:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cb28:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800cb2c:	2b00      	cmp	r3, #0
 800cb2e:	d00d      	beq.n	800cb4c <HAL_SD_IRQHandler+0x1c0>
 800cb30:	68fb      	ldr	r3, [r7, #12]
 800cb32:	f003 0308 	and.w	r3, r3, #8
 800cb36:	2b00      	cmp	r3, #0
 800cb38:	d008      	beq.n	800cb4c <HAL_SD_IRQHandler+0x1c0>
    SD_Write_IT(hsd);
 800cb3a:	6878      	ldr	r0, [r7, #4]
 800cb3c:	f001 f8a8 	bl	800dc90 <SD_Write_IT>
 800cb40:	e0d6      	b.n	800ccf0 <HAL_SD_IRQHandler+0x364>
 800cb42:	bf00      	nop
 800cb44:	ffff3ec5 	.word	0xffff3ec5
 800cb48:	18000f3a 	.word	0x18000f3a
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR |
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	681b      	ldr	r3, [r3, #0]
 800cb50:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cb52:	f003 033a 	and.w	r3, r3, #58	@ 0x3a
 800cb56:	2b00      	cmp	r3, #0
 800cb58:	f000 809d 	beq.w	800cc96 <HAL_SD_IRQHandler+0x30a>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	681b      	ldr	r3, [r3, #0]
 800cb60:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cb62:	f003 0302 	and.w	r3, r3, #2
 800cb66:	2b00      	cmp	r3, #0
 800cb68:	d005      	beq.n	800cb76 <HAL_SD_IRQHandler+0x1ea>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cb6e:	f043 0202 	orr.w	r2, r3, #2
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	635a      	str	r2, [r3, #52]	@ 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	681b      	ldr	r3, [r3, #0]
 800cb7a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cb7c:	f003 0308 	and.w	r3, r3, #8
 800cb80:	2b00      	cmp	r3, #0
 800cb82:	d005      	beq.n	800cb90 <HAL_SD_IRQHandler+0x204>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cb88:	f043 0208 	orr.w	r2, r3, #8
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	635a      	str	r2, [r3, #52]	@ 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	681b      	ldr	r3, [r3, #0]
 800cb94:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cb96:	f003 0320 	and.w	r3, r3, #32
 800cb9a:	2b00      	cmp	r3, #0
 800cb9c:	d005      	beq.n	800cbaa <HAL_SD_IRQHandler+0x21e>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800cb9e:	687b      	ldr	r3, [r7, #4]
 800cba0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cba2:	f043 0220 	orr.w	r2, r3, #32
 800cba6:	687b      	ldr	r3, [r7, #4]
 800cba8:	635a      	str	r2, [r3, #52]	@ 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 800cbaa:	687b      	ldr	r3, [r7, #4]
 800cbac:	681b      	ldr	r3, [r3, #0]
 800cbae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cbb0:	f003 0310 	and.w	r3, r3, #16
 800cbb4:	2b00      	cmp	r3, #0
 800cbb6:	d005      	beq.n	800cbc4 <HAL_SD_IRQHandler+0x238>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800cbb8:	687b      	ldr	r3, [r7, #4]
 800cbba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cbbc:	f043 0210 	orr.w	r2, r3, #16
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	681b      	ldr	r3, [r3, #0]
 800cbc8:	4a4b      	ldr	r2, [pc, #300]	@ (800ccf8 <HAL_SD_IRQHandler+0x36c>)
 800cbca:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	681b      	ldr	r3, [r3, #0]
 800cbd0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	681b      	ldr	r3, [r3, #0]
 800cbd6:	f422 729d 	bic.w	r2, r2, #314	@ 0x13a
 800cbda:	63da      	str	r2, [r3, #60]	@ 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	681b      	ldr	r3, [r3, #0]
 800cbe0:	68da      	ldr	r2, [r3, #12]
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	681b      	ldr	r3, [r3, #0]
 800cbe6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800cbea:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	681b      	ldr	r3, [r3, #0]
 800cbf0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	681b      	ldr	r3, [r3, #0]
 800cbf6:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800cbfa:	62da      	str	r2, [r3, #44]	@ 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	681b      	ldr	r3, [r3, #0]
 800cc00:	68da      	ldr	r2, [r3, #12]
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	681b      	ldr	r3, [r3, #0]
 800cc06:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800cc0a:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800cc0c:	687b      	ldr	r3, [r7, #4]
 800cc0e:	681b      	ldr	r3, [r3, #0]
 800cc10:	4618      	mov	r0, r3
 800cc12:	f002 ffa9 	bl	800fb68 <SDMMC_CmdStopTransfer>
 800cc16:	4602      	mov	r2, r0
 800cc18:	687b      	ldr	r3, [r7, #4]
 800cc1a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cc1c:	431a      	orrs	r2, r3
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	681b      	ldr	r3, [r3, #0]
 800cc26:	68da      	ldr	r2, [r3, #12]
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	681b      	ldr	r3, [r3, #0]
 800cc2c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800cc30:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 800cc32:	687b      	ldr	r3, [r7, #4]
 800cc34:	681b      	ldr	r3, [r3, #0]
 800cc36:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800cc3a:	639a      	str	r2, [r3, #56]	@ 0x38
    if ((context & SD_CONTEXT_IT) != 0U)
 800cc3c:	68fb      	ldr	r3, [r7, #12]
 800cc3e:	f003 0308 	and.w	r3, r3, #8
 800cc42:	2b00      	cmp	r3, #0
 800cc44:	d00a      	beq.n	800cc5c <HAL_SD_IRQHandler+0x2d0>
      hsd->State = HAL_SD_STATE_READY;
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	2201      	movs	r2, #1
 800cc4a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	2200      	movs	r2, #0
 800cc52:	62da      	str	r2, [r3, #44]	@ 0x2c
      HAL_SD_ErrorCallback(hsd);
 800cc54:	6878      	ldr	r0, [r7, #4]
 800cc56:	f000 f851 	bl	800ccfc <HAL_SD_ErrorCallback>
}
 800cc5a:	e049      	b.n	800ccf0 <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 800cc5c:	68fb      	ldr	r3, [r7, #12]
 800cc5e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800cc62:	2b00      	cmp	r3, #0
 800cc64:	d044      	beq.n	800ccf0 <HAL_SD_IRQHandler+0x364>
      if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cc6a:	2b00      	cmp	r3, #0
 800cc6c:	d040      	beq.n	800ccf0 <HAL_SD_IRQHandler+0x364>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	681b      	ldr	r3, [r3, #0]
 800cc72:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	681b      	ldr	r3, [r3, #0]
 800cc78:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 800cc7c:	63da      	str	r2, [r3, #60]	@ 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800cc7e:	687b      	ldr	r3, [r7, #4]
 800cc80:	681b      	ldr	r3, [r3, #0]
 800cc82:	2200      	movs	r2, #0
 800cc84:	651a      	str	r2, [r3, #80]	@ 0x50
        hsd->State = HAL_SD_STATE_READY;
 800cc86:	687b      	ldr	r3, [r7, #4]
 800cc88:	2201      	movs	r2, #1
 800cc8a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
        HAL_SD_ErrorCallback(hsd);
 800cc8e:	6878      	ldr	r0, [r7, #4]
 800cc90:	f000 f834 	bl	800ccfc <HAL_SD_ErrorCallback>
}
 800cc94:	e02c      	b.n	800ccf0 <HAL_SD_IRQHandler+0x364>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	681b      	ldr	r3, [r3, #0]
 800cc9a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cc9c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800cca0:	2b00      	cmp	r3, #0
 800cca2:	d025      	beq.n	800ccf0 <HAL_SD_IRQHandler+0x364>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	681b      	ldr	r3, [r3, #0]
 800cca8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ccac:	639a      	str	r2, [r3, #56]	@ 0x38
    if (READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 800ccae:	687b      	ldr	r3, [r7, #4]
 800ccb0:	681b      	ldr	r3, [r3, #0]
 800ccb2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ccb4:	f003 0304 	and.w	r3, r3, #4
 800ccb8:	2b00      	cmp	r3, #0
 800ccba:	d10c      	bne.n	800ccd6 <HAL_SD_IRQHandler+0x34a>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800ccbc:	68fb      	ldr	r3, [r7, #12]
 800ccbe:	f003 0320 	and.w	r3, r3, #32
 800ccc2:	2b00      	cmp	r3, #0
 800ccc4:	d003      	beq.n	800ccce <HAL_SD_IRQHandler+0x342>
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 800ccc6:	6878      	ldr	r0, [r7, #4]
 800ccc8:	f001 f84a 	bl	800dd60 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>
}
 800cccc:	e010      	b.n	800ccf0 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf1CpltCallback(hsd);
 800ccce:	6878      	ldr	r0, [r7, #4]
 800ccd0:	f001 f832 	bl	800dd38 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>
}
 800ccd4:	e00c      	b.n	800ccf0 <HAL_SD_IRQHandler+0x364>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800ccd6:	68fb      	ldr	r3, [r7, #12]
 800ccd8:	f003 0320 	and.w	r3, r3, #32
 800ccdc:	2b00      	cmp	r3, #0
 800ccde:	d003      	beq.n	800cce8 <HAL_SD_IRQHandler+0x35c>
        HAL_SDEx_Write_DMADoubleBuf0CpltCallback(hsd);
 800cce0:	6878      	ldr	r0, [r7, #4]
 800cce2:	f001 f833 	bl	800dd4c <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>
}
 800cce6:	e003      	b.n	800ccf0 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf0CpltCallback(hsd);
 800cce8:	6878      	ldr	r0, [r7, #4]
 800ccea:	f001 f81b 	bl	800dd24 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>
}
 800ccee:	e7ff      	b.n	800ccf0 <HAL_SD_IRQHandler+0x364>
 800ccf0:	bf00      	nop
 800ccf2:	3710      	adds	r7, #16
 800ccf4:	46bd      	mov	sp, r7
 800ccf6:	bd80      	pop	{r7, pc}
 800ccf8:	18000f3a 	.word	0x18000f3a

0800ccfc <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800ccfc:	b480      	push	{r7}
 800ccfe:	b083      	sub	sp, #12
 800cd00:	af00      	add	r7, sp, #0
 800cd02:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800cd04:	bf00      	nop
 800cd06:	370c      	adds	r7, #12
 800cd08:	46bd      	mov	sp, r7
 800cd0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd0e:	4770      	bx	lr

0800cd10 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800cd10:	b480      	push	{r7}
 800cd12:	b083      	sub	sp, #12
 800cd14:	af00      	add	r7, sp, #0
 800cd16:	6078      	str	r0, [r7, #4]
 800cd18:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800cd1e:	0f9b      	lsrs	r3, r3, #30
 800cd20:	b2da      	uxtb	r2, r3
 800cd22:	683b      	ldr	r3, [r7, #0]
 800cd24:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800cd26:	687b      	ldr	r3, [r7, #4]
 800cd28:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800cd2a:	0e9b      	lsrs	r3, r3, #26
 800cd2c:	b2db      	uxtb	r3, r3
 800cd2e:	f003 030f 	and.w	r3, r3, #15
 800cd32:	b2da      	uxtb	r2, r3
 800cd34:	683b      	ldr	r3, [r7, #0]
 800cd36:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800cd3c:	0e1b      	lsrs	r3, r3, #24
 800cd3e:	b2db      	uxtb	r3, r3
 800cd40:	f003 0303 	and.w	r3, r3, #3
 800cd44:	b2da      	uxtb	r2, r3
 800cd46:	683b      	ldr	r3, [r7, #0]
 800cd48:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800cd4a:	687b      	ldr	r3, [r7, #4]
 800cd4c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800cd4e:	0c1b      	lsrs	r3, r3, #16
 800cd50:	b2da      	uxtb	r2, r3
 800cd52:	683b      	ldr	r3, [r7, #0]
 800cd54:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800cd5a:	0a1b      	lsrs	r3, r3, #8
 800cd5c:	b2da      	uxtb	r2, r3
 800cd5e:	683b      	ldr	r3, [r7, #0]
 800cd60:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800cd62:	687b      	ldr	r3, [r7, #4]
 800cd64:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800cd66:	b2da      	uxtb	r2, r3
 800cd68:	683b      	ldr	r3, [r7, #0]
 800cd6a:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800cd6c:	687b      	ldr	r3, [r7, #4]
 800cd6e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800cd70:	0d1b      	lsrs	r3, r3, #20
 800cd72:	b29a      	uxth	r2, r3
 800cd74:	683b      	ldr	r3, [r7, #0]
 800cd76:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800cd7c:	0c1b      	lsrs	r3, r3, #16
 800cd7e:	b2db      	uxtb	r3, r3
 800cd80:	f003 030f 	and.w	r3, r3, #15
 800cd84:	b2da      	uxtb	r2, r3
 800cd86:	683b      	ldr	r3, [r7, #0]
 800cd88:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800cd8a:	687b      	ldr	r3, [r7, #4]
 800cd8c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800cd8e:	0bdb      	lsrs	r3, r3, #15
 800cd90:	b2db      	uxtb	r3, r3
 800cd92:	f003 0301 	and.w	r3, r3, #1
 800cd96:	b2da      	uxtb	r2, r3
 800cd98:	683b      	ldr	r3, [r7, #0]
 800cd9a:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800cda0:	0b9b      	lsrs	r3, r3, #14
 800cda2:	b2db      	uxtb	r3, r3
 800cda4:	f003 0301 	and.w	r3, r3, #1
 800cda8:	b2da      	uxtb	r2, r3
 800cdaa:	683b      	ldr	r3, [r7, #0]
 800cdac:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800cdb2:	0b5b      	lsrs	r3, r3, #13
 800cdb4:	b2db      	uxtb	r3, r3
 800cdb6:	f003 0301 	and.w	r3, r3, #1
 800cdba:	b2da      	uxtb	r2, r3
 800cdbc:	683b      	ldr	r3, [r7, #0]
 800cdbe:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800cdc0:	687b      	ldr	r3, [r7, #4]
 800cdc2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800cdc4:	0b1b      	lsrs	r3, r3, #12
 800cdc6:	b2db      	uxtb	r3, r3
 800cdc8:	f003 0301 	and.w	r3, r3, #1
 800cdcc:	b2da      	uxtb	r2, r3
 800cdce:	683b      	ldr	r3, [r7, #0]
 800cdd0:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800cdd2:	683b      	ldr	r3, [r7, #0]
 800cdd4:	2200      	movs	r2, #0
 800cdd6:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cddc:	2b00      	cmp	r3, #0
 800cdde:	d163      	bne.n	800cea8 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800cde4:	009a      	lsls	r2, r3, #2
 800cde6:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800cdea:	4013      	ands	r3, r2
 800cdec:	687a      	ldr	r2, [r7, #4]
 800cdee:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 800cdf0:	0f92      	lsrs	r2, r2, #30
 800cdf2:	431a      	orrs	r2, r3
 800cdf4:	683b      	ldr	r3, [r7, #0]
 800cdf6:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cdfc:	0edb      	lsrs	r3, r3, #27
 800cdfe:	b2db      	uxtb	r3, r3
 800ce00:	f003 0307 	and.w	r3, r3, #7
 800ce04:	b2da      	uxtb	r2, r3
 800ce06:	683b      	ldr	r3, [r7, #0]
 800ce08:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ce0e:	0e1b      	lsrs	r3, r3, #24
 800ce10:	b2db      	uxtb	r3, r3
 800ce12:	f003 0307 	and.w	r3, r3, #7
 800ce16:	b2da      	uxtb	r2, r3
 800ce18:	683b      	ldr	r3, [r7, #0]
 800ce1a:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800ce1c:	687b      	ldr	r3, [r7, #4]
 800ce1e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ce20:	0d5b      	lsrs	r3, r3, #21
 800ce22:	b2db      	uxtb	r3, r3
 800ce24:	f003 0307 	and.w	r3, r3, #7
 800ce28:	b2da      	uxtb	r2, r3
 800ce2a:	683b      	ldr	r3, [r7, #0]
 800ce2c:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ce32:	0c9b      	lsrs	r3, r3, #18
 800ce34:	b2db      	uxtb	r3, r3
 800ce36:	f003 0307 	and.w	r3, r3, #7
 800ce3a:	b2da      	uxtb	r2, r3
 800ce3c:	683b      	ldr	r3, [r7, #0]
 800ce3e:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800ce40:	687b      	ldr	r3, [r7, #4]
 800ce42:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ce44:	0bdb      	lsrs	r3, r3, #15
 800ce46:	b2db      	uxtb	r3, r3
 800ce48:	f003 0307 	and.w	r3, r3, #7
 800ce4c:	b2da      	uxtb	r2, r3
 800ce4e:	683b      	ldr	r3, [r7, #0]
 800ce50:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800ce52:	683b      	ldr	r3, [r7, #0]
 800ce54:	691b      	ldr	r3, [r3, #16]
 800ce56:	1c5a      	adds	r2, r3, #1
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800ce5c:	683b      	ldr	r3, [r7, #0]
 800ce5e:	7e1b      	ldrb	r3, [r3, #24]
 800ce60:	b2db      	uxtb	r3, r3
 800ce62:	f003 0307 	and.w	r3, r3, #7
 800ce66:	3302      	adds	r3, #2
 800ce68:	2201      	movs	r2, #1
 800ce6a:	fa02 f303 	lsl.w	r3, r2, r3
 800ce6e:	687a      	ldr	r2, [r7, #4]
 800ce70:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800ce72:	fb03 f202 	mul.w	r2, r3, r2
 800ce76:	687b      	ldr	r3, [r7, #4]
 800ce78:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800ce7a:	683b      	ldr	r3, [r7, #0]
 800ce7c:	7a1b      	ldrb	r3, [r3, #8]
 800ce7e:	b2db      	uxtb	r3, r3
 800ce80:	f003 030f 	and.w	r3, r3, #15
 800ce84:	2201      	movs	r2, #1
 800ce86:	409a      	lsls	r2, r3
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	64da      	str	r2, [r3, #76]	@ 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ce90:	687a      	ldr	r2, [r7, #4]
 800ce92:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800ce94:	0a52      	lsrs	r2, r2, #9
 800ce96:	fb03 f202 	mul.w	r2, r3, r2
 800ce9a:	687b      	ldr	r3, [r7, #4]
 800ce9c:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.LogBlockSize = 512U;
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800cea4:	655a      	str	r2, [r3, #84]	@ 0x54
 800cea6:	e031      	b.n	800cf0c <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ceac:	2b01      	cmp	r3, #1
 800ceae:	d11d      	bne.n	800ceec <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800ceb0:	687b      	ldr	r3, [r7, #4]
 800ceb2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ceb4:	041b      	lsls	r3, r3, #16
 800ceb6:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cebe:	0c1b      	lsrs	r3, r3, #16
 800cec0:	431a      	orrs	r2, r3
 800cec2:	683b      	ldr	r3, [r7, #0]
 800cec4:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800cec6:	683b      	ldr	r3, [r7, #0]
 800cec8:	691b      	ldr	r3, [r3, #16]
 800ceca:	3301      	adds	r3, #1
 800cecc:	029a      	lsls	r2, r3, #10
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800ced2:	687b      	ldr	r3, [r7, #4]
 800ced4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.BlockSize = 512U;
 800ceda:	687b      	ldr	r3, [r7, #4]
 800cedc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800cee0:	64da      	str	r2, [r3, #76]	@ 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800cee2:	687b      	ldr	r3, [r7, #4]
 800cee4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800cee6:	687b      	ldr	r3, [r7, #4]
 800cee8:	655a      	str	r2, [r3, #84]	@ 0x54
 800ceea:	e00f      	b.n	800cf0c <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ceec:	687b      	ldr	r3, [r7, #4]
 800ceee:	681b      	ldr	r3, [r3, #0]
 800cef0:	4a58      	ldr	r2, [pc, #352]	@ (800d054 <HAL_SD_GetCardCSD+0x344>)
 800cef2:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cef8:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	2201      	movs	r2, #1
 800cf04:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 800cf08:	2301      	movs	r3, #1
 800cf0a:	e09d      	b.n	800d048 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cf10:	0b9b      	lsrs	r3, r3, #14
 800cf12:	b2db      	uxtb	r3, r3
 800cf14:	f003 0301 	and.w	r3, r3, #1
 800cf18:	b2da      	uxtb	r2, r3
 800cf1a:	683b      	ldr	r3, [r7, #0]
 800cf1c:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800cf1e:	687b      	ldr	r3, [r7, #4]
 800cf20:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cf22:	09db      	lsrs	r3, r3, #7
 800cf24:	b2db      	uxtb	r3, r3
 800cf26:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800cf2a:	b2da      	uxtb	r2, r3
 800cf2c:	683b      	ldr	r3, [r7, #0]
 800cf2e:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cf34:	b2db      	uxtb	r3, r3
 800cf36:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800cf3a:	b2da      	uxtb	r2, r3
 800cf3c:	683b      	ldr	r3, [r7, #0]
 800cf3e:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800cf44:	0fdb      	lsrs	r3, r3, #31
 800cf46:	b2da      	uxtb	r2, r3
 800cf48:	683b      	ldr	r3, [r7, #0]
 800cf4a:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800cf4c:	687b      	ldr	r3, [r7, #4]
 800cf4e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800cf50:	0f5b      	lsrs	r3, r3, #29
 800cf52:	b2db      	uxtb	r3, r3
 800cf54:	f003 0303 	and.w	r3, r3, #3
 800cf58:	b2da      	uxtb	r2, r3
 800cf5a:	683b      	ldr	r3, [r7, #0]
 800cf5c:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800cf5e:	687b      	ldr	r3, [r7, #4]
 800cf60:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800cf62:	0e9b      	lsrs	r3, r3, #26
 800cf64:	b2db      	uxtb	r3, r3
 800cf66:	f003 0307 	and.w	r3, r3, #7
 800cf6a:	b2da      	uxtb	r2, r3
 800cf6c:	683b      	ldr	r3, [r7, #0]
 800cf6e:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800cf74:	0d9b      	lsrs	r3, r3, #22
 800cf76:	b2db      	uxtb	r3, r3
 800cf78:	f003 030f 	and.w	r3, r3, #15
 800cf7c:	b2da      	uxtb	r2, r3
 800cf7e:	683b      	ldr	r3, [r7, #0]
 800cf80:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800cf82:	687b      	ldr	r3, [r7, #4]
 800cf84:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800cf86:	0d5b      	lsrs	r3, r3, #21
 800cf88:	b2db      	uxtb	r3, r3
 800cf8a:	f003 0301 	and.w	r3, r3, #1
 800cf8e:	b2da      	uxtb	r2, r3
 800cf90:	683b      	ldr	r3, [r7, #0]
 800cf92:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800cf96:	683b      	ldr	r3, [r7, #0]
 800cf98:	2200      	movs	r2, #0
 800cf9a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800cfa2:	0c1b      	lsrs	r3, r3, #16
 800cfa4:	b2db      	uxtb	r3, r3
 800cfa6:	f003 0301 	and.w	r3, r3, #1
 800cfaa:	b2da      	uxtb	r2, r3
 800cfac:	683b      	ldr	r3, [r7, #0]
 800cfae:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800cfb2:	687b      	ldr	r3, [r7, #4]
 800cfb4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800cfb6:	0bdb      	lsrs	r3, r3, #15
 800cfb8:	b2db      	uxtb	r3, r3
 800cfba:	f003 0301 	and.w	r3, r3, #1
 800cfbe:	b2da      	uxtb	r2, r3
 800cfc0:	683b      	ldr	r3, [r7, #0]
 800cfc2:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800cfca:	0b9b      	lsrs	r3, r3, #14
 800cfcc:	b2db      	uxtb	r3, r3
 800cfce:	f003 0301 	and.w	r3, r3, #1
 800cfd2:	b2da      	uxtb	r2, r3
 800cfd4:	683b      	ldr	r3, [r7, #0]
 800cfd6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800cfda:	687b      	ldr	r3, [r7, #4]
 800cfdc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800cfde:	0b5b      	lsrs	r3, r3, #13
 800cfe0:	b2db      	uxtb	r3, r3
 800cfe2:	f003 0301 	and.w	r3, r3, #1
 800cfe6:	b2da      	uxtb	r2, r3
 800cfe8:	683b      	ldr	r3, [r7, #0]
 800cfea:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800cfee:	687b      	ldr	r3, [r7, #4]
 800cff0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800cff2:	0b1b      	lsrs	r3, r3, #12
 800cff4:	b2db      	uxtb	r3, r3
 800cff6:	f003 0301 	and.w	r3, r3, #1
 800cffa:	b2da      	uxtb	r2, r3
 800cffc:	683b      	ldr	r3, [r7, #0]
 800cffe:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d006:	0a9b      	lsrs	r3, r3, #10
 800d008:	b2db      	uxtb	r3, r3
 800d00a:	f003 0303 	and.w	r3, r3, #3
 800d00e:	b2da      	uxtb	r2, r3
 800d010:	683b      	ldr	r3, [r7, #0]
 800d012:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800d016:	687b      	ldr	r3, [r7, #4]
 800d018:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d01a:	0a1b      	lsrs	r3, r3, #8
 800d01c:	b2db      	uxtb	r3, r3
 800d01e:	f003 0303 	and.w	r3, r3, #3
 800d022:	b2da      	uxtb	r2, r3
 800d024:	683b      	ldr	r3, [r7, #0]
 800d026:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800d02a:	687b      	ldr	r3, [r7, #4]
 800d02c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d02e:	085b      	lsrs	r3, r3, #1
 800d030:	b2db      	uxtb	r3, r3
 800d032:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d036:	b2da      	uxtb	r2, r3
 800d038:	683b      	ldr	r3, [r7, #0]
 800d03a:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 800d03e:	683b      	ldr	r3, [r7, #0]
 800d040:	2201      	movs	r2, #1
 800d042:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 800d046:	2300      	movs	r3, #0
}
 800d048:	4618      	mov	r0, r3
 800d04a:	370c      	adds	r7, #12
 800d04c:	46bd      	mov	sp, r7
 800d04e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d052:	4770      	bx	lr
 800d054:	1fe00fff 	.word	0x1fe00fff

0800d058 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 800d058:	b580      	push	{r7, lr}
 800d05a:	b094      	sub	sp, #80	@ 0x50
 800d05c:	af00      	add	r7, sp, #0
 800d05e:	6078      	str	r0, [r7, #4]
 800d060:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800d062:	2300      	movs	r3, #0
 800d064:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 800d068:	687b      	ldr	r3, [r7, #4]
 800d06a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800d06e:	b2db      	uxtb	r3, r3
 800d070:	2b03      	cmp	r3, #3
 800d072:	d101      	bne.n	800d078 <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 800d074:	2301      	movs	r3, #1
 800d076:	e0a7      	b.n	800d1c8 <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 800d078:	f107 0308 	add.w	r3, r7, #8
 800d07c:	4619      	mov	r1, r3
 800d07e:	6878      	ldr	r0, [r7, #4]
 800d080:	f000 fb62 	bl	800d748 <SD_SendSDStatus>
 800d084:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800d086:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d088:	2b00      	cmp	r3, #0
 800d08a:	d011      	beq.n	800d0b0 <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d08c:	687b      	ldr	r3, [r7, #4]
 800d08e:	681b      	ldr	r3, [r3, #0]
 800d090:	4a4f      	ldr	r2, [pc, #316]	@ (800d1d0 <HAL_SD_GetCardStatus+0x178>)
 800d092:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d098:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d09a:	431a      	orrs	r2, r3
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	2201      	movs	r2, #1
 800d0a4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    status = HAL_ERROR;
 800d0a8:	2301      	movs	r3, #1
 800d0aa:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 800d0ae:	e070      	b.n	800d192 <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 800d0b0:	68bb      	ldr	r3, [r7, #8]
 800d0b2:	099b      	lsrs	r3, r3, #6
 800d0b4:	b2db      	uxtb	r3, r3
 800d0b6:	f003 0303 	and.w	r3, r3, #3
 800d0ba:	b2da      	uxtb	r2, r3
 800d0bc:	683b      	ldr	r3, [r7, #0]
 800d0be:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 800d0c0:	68bb      	ldr	r3, [r7, #8]
 800d0c2:	095b      	lsrs	r3, r3, #5
 800d0c4:	b2db      	uxtb	r3, r3
 800d0c6:	f003 0301 	and.w	r3, r3, #1
 800d0ca:	b2da      	uxtb	r2, r3
 800d0cc:	683b      	ldr	r3, [r7, #0]
 800d0ce:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 800d0d0:	68bb      	ldr	r3, [r7, #8]
 800d0d2:	0a1b      	lsrs	r3, r3, #8
 800d0d4:	b29b      	uxth	r3, r3
 800d0d6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800d0da:	b29a      	uxth	r2, r3
 800d0dc:	68bb      	ldr	r3, [r7, #8]
 800d0de:	0e1b      	lsrs	r3, r3, #24
 800d0e0:	b29b      	uxth	r3, r3
 800d0e2:	4313      	orrs	r3, r2
 800d0e4:	b29a      	uxth	r2, r3
 800d0e6:	683b      	ldr	r3, [r7, #0]
 800d0e8:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800d0ea:	68fb      	ldr	r3, [r7, #12]
 800d0ec:	061a      	lsls	r2, r3, #24
 800d0ee:	68fb      	ldr	r3, [r7, #12]
 800d0f0:	021b      	lsls	r3, r3, #8
 800d0f2:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800d0f6:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800d0f8:	68fb      	ldr	r3, [r7, #12]
 800d0fa:	0a1b      	lsrs	r3, r3, #8
 800d0fc:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800d100:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800d102:	68fb      	ldr	r3, [r7, #12]
 800d104:	0e1b      	lsrs	r3, r3, #24
 800d106:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800d108:	683b      	ldr	r3, [r7, #0]
 800d10a:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 800d10c:	693b      	ldr	r3, [r7, #16]
 800d10e:	b2da      	uxtb	r2, r3
 800d110:	683b      	ldr	r3, [r7, #0]
 800d112:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 800d114:	693b      	ldr	r3, [r7, #16]
 800d116:	0a1b      	lsrs	r3, r3, #8
 800d118:	b2da      	uxtb	r2, r3
 800d11a:	683b      	ldr	r3, [r7, #0]
 800d11c:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800d11e:	693b      	ldr	r3, [r7, #16]
 800d120:	0d1b      	lsrs	r3, r3, #20
 800d122:	b2db      	uxtb	r3, r3
 800d124:	f003 030f 	and.w	r3, r3, #15
 800d128:	b2da      	uxtb	r2, r3
 800d12a:	683b      	ldr	r3, [r7, #0]
 800d12c:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800d12e:	693b      	ldr	r3, [r7, #16]
 800d130:	0c1b      	lsrs	r3, r3, #16
 800d132:	b29b      	uxth	r3, r3
 800d134:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800d138:	b29a      	uxth	r2, r3
 800d13a:	697b      	ldr	r3, [r7, #20]
 800d13c:	b29b      	uxth	r3, r3
 800d13e:	b2db      	uxtb	r3, r3
 800d140:	b29b      	uxth	r3, r3
 800d142:	4313      	orrs	r3, r2
 800d144:	b29a      	uxth	r2, r3
 800d146:	683b      	ldr	r3, [r7, #0]
 800d148:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 800d14a:	697b      	ldr	r3, [r7, #20]
 800d14c:	0a9b      	lsrs	r3, r3, #10
 800d14e:	b2db      	uxtb	r3, r3
 800d150:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800d154:	b2da      	uxtb	r2, r3
 800d156:	683b      	ldr	r3, [r7, #0]
 800d158:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 800d15a:	697b      	ldr	r3, [r7, #20]
 800d15c:	0a1b      	lsrs	r3, r3, #8
 800d15e:	b2db      	uxtb	r3, r3
 800d160:	f003 0303 	and.w	r3, r3, #3
 800d164:	b2da      	uxtb	r2, r3
 800d166:	683b      	ldr	r3, [r7, #0]
 800d168:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800d16a:	697b      	ldr	r3, [r7, #20]
 800d16c:	091b      	lsrs	r3, r3, #4
 800d16e:	b2db      	uxtb	r3, r3
 800d170:	f003 030f 	and.w	r3, r3, #15
 800d174:	b2da      	uxtb	r2, r3
 800d176:	683b      	ldr	r3, [r7, #0]
 800d178:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800d17a:	697b      	ldr	r3, [r7, #20]
 800d17c:	b2db      	uxtb	r3, r3
 800d17e:	f003 030f 	and.w	r3, r3, #15
 800d182:	b2da      	uxtb	r2, r3
 800d184:	683b      	ldr	r3, [r7, #0]
 800d186:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 800d188:	69bb      	ldr	r3, [r7, #24]
 800d18a:	0e1b      	lsrs	r3, r3, #24
 800d18c:	b2da      	uxtb	r2, r3
 800d18e:	683b      	ldr	r3, [r7, #0]
 800d190:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800d192:	687b      	ldr	r3, [r7, #4]
 800d194:	681b      	ldr	r3, [r3, #0]
 800d196:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800d19a:	4618      	mov	r0, r3
 800d19c:	f002 fc34 	bl	800fa08 <SDMMC_CmdBlockLength>
 800d1a0:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800d1a2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d1a4:	2b00      	cmp	r3, #0
 800d1a6:	d00d      	beq.n	800d1c4 <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d1a8:	687b      	ldr	r3, [r7, #4]
 800d1aa:	681b      	ldr	r3, [r3, #0]
 800d1ac:	4a08      	ldr	r2, [pc, #32]	@ (800d1d0 <HAL_SD_GetCardStatus+0x178>)
 800d1ae:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode = errorstate;
 800d1b0:	687b      	ldr	r3, [r7, #4]
 800d1b2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d1b4:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 800d1b6:	687b      	ldr	r3, [r7, #4]
 800d1b8:	2201      	movs	r2, #1
 800d1ba:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    status = HAL_ERROR;
 800d1be:	2301      	movs	r3, #1
 800d1c0:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  }


  return status;
 800d1c4:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
}
 800d1c8:	4618      	mov	r0, r3
 800d1ca:	3750      	adds	r7, #80	@ 0x50
 800d1cc:	46bd      	mov	sp, r7
 800d1ce:	bd80      	pop	{r7, pc}
 800d1d0:	1fe00fff 	.word	0x1fe00fff

0800d1d4 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800d1d4:	b480      	push	{r7}
 800d1d6:	b083      	sub	sp, #12
 800d1d8:	af00      	add	r7, sp, #0
 800d1da:	6078      	str	r0, [r7, #4]
 800d1dc:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800d1de:	687b      	ldr	r3, [r7, #4]
 800d1e0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d1e2:	683b      	ldr	r3, [r7, #0]
 800d1e4:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800d1e6:	687b      	ldr	r3, [r7, #4]
 800d1e8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800d1ea:	683b      	ldr	r3, [r7, #0]
 800d1ec:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800d1ee:	687b      	ldr	r3, [r7, #4]
 800d1f0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800d1f2:	683b      	ldr	r3, [r7, #0]
 800d1f4:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800d1f6:	687b      	ldr	r3, [r7, #4]
 800d1f8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800d1fa:	683b      	ldr	r3, [r7, #0]
 800d1fc:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800d1fe:	687b      	ldr	r3, [r7, #4]
 800d200:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800d202:	683b      	ldr	r3, [r7, #0]
 800d204:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800d206:	687b      	ldr	r3, [r7, #4]
 800d208:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800d20a:	683b      	ldr	r3, [r7, #0]
 800d20c:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800d20e:	687b      	ldr	r3, [r7, #4]
 800d210:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800d212:	683b      	ldr	r3, [r7, #0]
 800d214:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800d216:	687b      	ldr	r3, [r7, #4]
 800d218:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800d21a:	683b      	ldr	r3, [r7, #0]
 800d21c:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800d21e:	2300      	movs	r3, #0
}
 800d220:	4618      	mov	r0, r3
 800d222:	370c      	adds	r7, #12
 800d224:	46bd      	mov	sp, r7
 800d226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d22a:	4770      	bx	lr

0800d22c <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800d22c:	b590      	push	{r4, r7, lr}
 800d22e:	b08d      	sub	sp, #52	@ 0x34
 800d230:	af02      	add	r7, sp, #8
 800d232:	6078      	str	r0, [r7, #4]
 800d234:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 800d236:	2300      	movs	r3, #0
 800d238:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800d23c:	687b      	ldr	r3, [r7, #4]
 800d23e:	2203      	movs	r2, #3
 800d240:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d248:	2b03      	cmp	r3, #3
 800d24a:	d02e      	beq.n	800d2aa <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 800d24c:	683b      	ldr	r3, [r7, #0]
 800d24e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800d252:	d106      	bne.n	800d262 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d258:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800d25c:	687b      	ldr	r3, [r7, #4]
 800d25e:	635a      	str	r2, [r3, #52]	@ 0x34
 800d260:	e029      	b.n	800d2b6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 800d262:	683b      	ldr	r3, [r7, #0]
 800d264:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800d268:	d10a      	bne.n	800d280 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800d26a:	6878      	ldr	r0, [r7, #4]
 800d26c:	f000 fb64 	bl	800d938 <SD_WideBus_Enable>
 800d270:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800d272:	687b      	ldr	r3, [r7, #4]
 800d274:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d276:	6a3b      	ldr	r3, [r7, #32]
 800d278:	431a      	orrs	r2, r3
 800d27a:	687b      	ldr	r3, [r7, #4]
 800d27c:	635a      	str	r2, [r3, #52]	@ 0x34
 800d27e:	e01a      	b.n	800d2b6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 800d280:	683b      	ldr	r3, [r7, #0]
 800d282:	2b00      	cmp	r3, #0
 800d284:	d10a      	bne.n	800d29c <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800d286:	6878      	ldr	r0, [r7, #4]
 800d288:	f000 fba1 	bl	800d9ce <SD_WideBus_Disable>
 800d28c:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800d28e:	687b      	ldr	r3, [r7, #4]
 800d290:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d292:	6a3b      	ldr	r3, [r7, #32]
 800d294:	431a      	orrs	r2, r3
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	635a      	str	r2, [r3, #52]	@ 0x34
 800d29a:	e00c      	b.n	800d2b6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800d29c:	687b      	ldr	r3, [r7, #4]
 800d29e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d2a0:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800d2a4:	687b      	ldr	r3, [r7, #4]
 800d2a6:	635a      	str	r2, [r3, #52]	@ 0x34
 800d2a8:	e005      	b.n	800d2b6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* SD Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d2aa:	687b      	ldr	r3, [r7, #4]
 800d2ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d2ae:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800d2b2:	687b      	ldr	r3, [r7, #4]
 800d2b4:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800d2b6:	687b      	ldr	r3, [r7, #4]
 800d2b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d2ba:	2b00      	cmp	r3, #0
 800d2bc:	d007      	beq.n	800d2ce <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d2be:	687b      	ldr	r3, [r7, #4]
 800d2c0:	681b      	ldr	r3, [r3, #0]
 800d2c2:	4a5f      	ldr	r2, [pc, #380]	@ (800d440 <HAL_SD_ConfigWideBusOperation+0x214>)
 800d2c4:	639a      	str	r2, [r3, #56]	@ 0x38
    status = HAL_ERROR;
 800d2c6:	2301      	movs	r3, #1
 800d2c8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800d2cc:	e096      	b.n	800d3fc <HAL_SD_ConfigWideBusOperation+0x1d0>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800d2ce:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 800d2d2:	f04f 0100 	mov.w	r1, #0
 800d2d6:	f7fd fdf5 	bl	800aec4 <HAL_RCCEx_GetPeriphCLKFreq>
 800d2da:	61f8      	str	r0, [r7, #28]
    if (sdmmc_clk != 0U)
 800d2dc:	69fb      	ldr	r3, [r7, #28]
 800d2de:	2b00      	cmp	r3, #0
 800d2e0:	f000 8083 	beq.w	800d3ea <HAL_SD_ConfigWideBusOperation+0x1be>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	685b      	ldr	r3, [r3, #4]
 800d2e8:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	689b      	ldr	r3, [r3, #8]
 800d2ee:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 800d2f0:	683b      	ldr	r3, [r7, #0]
 800d2f2:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	691b      	ldr	r3, [r3, #16]
 800d2f8:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 800d2fa:	687b      	ldr	r3, [r7, #4]
 800d2fc:	695a      	ldr	r2, [r3, #20]
 800d2fe:	69fb      	ldr	r3, [r7, #28]
 800d300:	4950      	ldr	r1, [pc, #320]	@ (800d444 <HAL_SD_ConfigWideBusOperation+0x218>)
 800d302:	fba1 1303 	umull	r1, r3, r1, r3
 800d306:	0e1b      	lsrs	r3, r3, #24
 800d308:	429a      	cmp	r2, r3
 800d30a:	d303      	bcc.n	800d314 <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 800d30c:	687b      	ldr	r3, [r7, #4]
 800d30e:	695b      	ldr	r3, [r3, #20]
 800d310:	61bb      	str	r3, [r7, #24]
 800d312:	e05a      	b.n	800d3ca <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d318:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d31c:	d103      	bne.n	800d326 <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 800d31e:	687b      	ldr	r3, [r7, #4]
 800d320:	695b      	ldr	r3, [r3, #20]
 800d322:	61bb      	str	r3, [r7, #24]
 800d324:	e051      	b.n	800d3ca <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 800d326:	687b      	ldr	r3, [r7, #4]
 800d328:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d32a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d32e:	d126      	bne.n	800d37e <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800d330:	687b      	ldr	r3, [r7, #4]
 800d332:	695b      	ldr	r3, [r3, #20]
 800d334:	2b00      	cmp	r3, #0
 800d336:	d10e      	bne.n	800d356 <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 800d338:	69fb      	ldr	r3, [r7, #28]
 800d33a:	4a43      	ldr	r2, [pc, #268]	@ (800d448 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800d33c:	4293      	cmp	r3, r2
 800d33e:	d906      	bls.n	800d34e <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800d340:	69fb      	ldr	r3, [r7, #28]
 800d342:	4a40      	ldr	r2, [pc, #256]	@ (800d444 <HAL_SD_ConfigWideBusOperation+0x218>)
 800d344:	fba2 2303 	umull	r2, r3, r2, r3
 800d348:	0e5b      	lsrs	r3, r3, #25
 800d34a:	61bb      	str	r3, [r7, #24]
 800d34c:	e03d      	b.n	800d3ca <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800d34e:	687b      	ldr	r3, [r7, #4]
 800d350:	695b      	ldr	r3, [r3, #20]
 800d352:	61bb      	str	r3, [r7, #24]
 800d354:	e039      	b.n	800d3ca <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 800d356:	687b      	ldr	r3, [r7, #4]
 800d358:	695b      	ldr	r3, [r3, #20]
 800d35a:	005b      	lsls	r3, r3, #1
 800d35c:	69fa      	ldr	r2, [r7, #28]
 800d35e:	fbb2 f3f3 	udiv	r3, r2, r3
 800d362:	4a39      	ldr	r2, [pc, #228]	@ (800d448 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800d364:	4293      	cmp	r3, r2
 800d366:	d906      	bls.n	800d376 <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800d368:	69fb      	ldr	r3, [r7, #28]
 800d36a:	4a36      	ldr	r2, [pc, #216]	@ (800d444 <HAL_SD_ConfigWideBusOperation+0x218>)
 800d36c:	fba2 2303 	umull	r2, r3, r2, r3
 800d370:	0e5b      	lsrs	r3, r3, #25
 800d372:	61bb      	str	r3, [r7, #24]
 800d374:	e029      	b.n	800d3ca <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800d376:	687b      	ldr	r3, [r7, #4]
 800d378:	695b      	ldr	r3, [r3, #20]
 800d37a:	61bb      	str	r3, [r7, #24]
 800d37c:	e025      	b.n	800d3ca <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800d37e:	687b      	ldr	r3, [r7, #4]
 800d380:	695b      	ldr	r3, [r3, #20]
 800d382:	2b00      	cmp	r3, #0
 800d384:	d10e      	bne.n	800d3a4 <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 800d386:	69fb      	ldr	r3, [r7, #28]
 800d388:	4a30      	ldr	r2, [pc, #192]	@ (800d44c <HAL_SD_ConfigWideBusOperation+0x220>)
 800d38a:	4293      	cmp	r3, r2
 800d38c:	d906      	bls.n	800d39c <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800d38e:	69fb      	ldr	r3, [r7, #28]
 800d390:	4a2c      	ldr	r2, [pc, #176]	@ (800d444 <HAL_SD_ConfigWideBusOperation+0x218>)
 800d392:	fba2 2303 	umull	r2, r3, r2, r3
 800d396:	0e1b      	lsrs	r3, r3, #24
 800d398:	61bb      	str	r3, [r7, #24]
 800d39a:	e016      	b.n	800d3ca <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800d39c:	687b      	ldr	r3, [r7, #4]
 800d39e:	695b      	ldr	r3, [r3, #20]
 800d3a0:	61bb      	str	r3, [r7, #24]
 800d3a2:	e012      	b.n	800d3ca <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 800d3a4:	687b      	ldr	r3, [r7, #4]
 800d3a6:	695b      	ldr	r3, [r3, #20]
 800d3a8:	005b      	lsls	r3, r3, #1
 800d3aa:	69fa      	ldr	r2, [r7, #28]
 800d3ac:	fbb2 f3f3 	udiv	r3, r2, r3
 800d3b0:	4a26      	ldr	r2, [pc, #152]	@ (800d44c <HAL_SD_ConfigWideBusOperation+0x220>)
 800d3b2:	4293      	cmp	r3, r2
 800d3b4:	d906      	bls.n	800d3c4 <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800d3b6:	69fb      	ldr	r3, [r7, #28]
 800d3b8:	4a22      	ldr	r2, [pc, #136]	@ (800d444 <HAL_SD_ConfigWideBusOperation+0x218>)
 800d3ba:	fba2 2303 	umull	r2, r3, r2, r3
 800d3be:	0e1b      	lsrs	r3, r3, #24
 800d3c0:	61bb      	str	r3, [r7, #24]
 800d3c2:	e002      	b.n	800d3ca <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	695b      	ldr	r3, [r3, #20]
 800d3c8:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	681c      	ldr	r4, [r3, #0]
 800d3ce:	466a      	mov	r2, sp
 800d3d0:	f107 0314 	add.w	r3, r7, #20
 800d3d4:	e893 0003 	ldmia.w	r3, {r0, r1}
 800d3d8:	e882 0003 	stmia.w	r2, {r0, r1}
 800d3dc:	f107 0308 	add.w	r3, r7, #8
 800d3e0:	cb0e      	ldmia	r3, {r1, r2, r3}
 800d3e2:	4620      	mov	r0, r4
 800d3e4:	f002 fa32 	bl	800f84c <SDMMC_Init>
 800d3e8:	e008      	b.n	800d3fc <HAL_SD_ConfigWideBusOperation+0x1d0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d3ee:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800d3f2:	687b      	ldr	r3, [r7, #4]
 800d3f4:	635a      	str	r2, [r3, #52]	@ 0x34
      status = HAL_ERROR;
 800d3f6:	2301      	movs	r3, #1
 800d3f8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800d3fc:	687b      	ldr	r3, [r7, #4]
 800d3fe:	681b      	ldr	r3, [r3, #0]
 800d400:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800d404:	4618      	mov	r0, r3
 800d406:	f002 faff 	bl	800fa08 <SDMMC_CmdBlockLength>
 800d40a:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800d40c:	6a3b      	ldr	r3, [r7, #32]
 800d40e:	2b00      	cmp	r3, #0
 800d410:	d00c      	beq.n	800d42c <HAL_SD_ConfigWideBusOperation+0x200>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d412:	687b      	ldr	r3, [r7, #4]
 800d414:	681b      	ldr	r3, [r3, #0]
 800d416:	4a0a      	ldr	r2, [pc, #40]	@ (800d440 <HAL_SD_ConfigWideBusOperation+0x214>)
 800d418:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d41e:	6a3b      	ldr	r3, [r7, #32]
 800d420:	431a      	orrs	r2, r3
 800d422:	687b      	ldr	r3, [r7, #4]
 800d424:	635a      	str	r2, [r3, #52]	@ 0x34
    status = HAL_ERROR;
 800d426:	2301      	movs	r3, #1
 800d428:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800d42c:	687b      	ldr	r3, [r7, #4]
 800d42e:	2201      	movs	r2, #1
 800d430:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return status;
 800d434:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800d438:	4618      	mov	r0, r3
 800d43a:	372c      	adds	r7, #44	@ 0x2c
 800d43c:	46bd      	mov	sp, r7
 800d43e:	bd90      	pop	{r4, r7, pc}
 800d440:	1fe00fff 	.word	0x1fe00fff
 800d444:	55e63b89 	.word	0x55e63b89
 800d448:	02faf080 	.word	0x02faf080
 800d44c:	017d7840 	.word	0x017d7840

0800d450 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800d450:	b580      	push	{r7, lr}
 800d452:	b086      	sub	sp, #24
 800d454:	af00      	add	r7, sp, #0
 800d456:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800d458:	2300      	movs	r3, #0
 800d45a:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800d45c:	f107 030c 	add.w	r3, r7, #12
 800d460:	4619      	mov	r1, r3
 800d462:	6878      	ldr	r0, [r7, #4]
 800d464:	f000 fa40 	bl	800d8e8 <SD_SendStatus>
 800d468:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800d46a:	697b      	ldr	r3, [r7, #20]
 800d46c:	2b00      	cmp	r3, #0
 800d46e:	d005      	beq.n	800d47c <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800d470:	687b      	ldr	r3, [r7, #4]
 800d472:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d474:	697b      	ldr	r3, [r7, #20]
 800d476:	431a      	orrs	r2, r3
 800d478:	687b      	ldr	r3, [r7, #4]
 800d47a:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800d47c:	68fb      	ldr	r3, [r7, #12]
 800d47e:	0a5b      	lsrs	r3, r3, #9
 800d480:	f003 030f 	and.w	r3, r3, #15
 800d484:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800d486:	693b      	ldr	r3, [r7, #16]
}
 800d488:	4618      	mov	r0, r3
 800d48a:	3718      	adds	r7, #24
 800d48c:	46bd      	mov	sp, r7
 800d48e:	bd80      	pop	{r7, pc}

0800d490 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800d490:	b580      	push	{r7, lr}
 800d492:	b090      	sub	sp, #64	@ 0x40
 800d494:	af00      	add	r7, sp, #0
 800d496:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 800d498:	2300      	movs	r3, #0
 800d49a:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 800d49c:	f7f8 fb58 	bl	8005b50 <HAL_GetTick>
 800d4a0:	63f8      	str	r0, [r7, #60]	@ 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 800d4a2:	687b      	ldr	r3, [r7, #4]
 800d4a4:	681b      	ldr	r3, [r3, #0]
 800d4a6:	4618      	mov	r0, r3
 800d4a8:	f002 fa29 	bl	800f8fe <SDMMC_GetPowerState>
 800d4ac:	4603      	mov	r3, r0
 800d4ae:	2b00      	cmp	r3, #0
 800d4b0:	d102      	bne.n	800d4b8 <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800d4b2:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800d4b6:	e0b5      	b.n	800d624 <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800d4b8:	687b      	ldr	r3, [r7, #4]
 800d4ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d4bc:	2b03      	cmp	r3, #3
 800d4be:	d02e      	beq.n	800d51e <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800d4c0:	687b      	ldr	r3, [r7, #4]
 800d4c2:	681b      	ldr	r3, [r3, #0]
 800d4c4:	4618      	mov	r0, r3
 800d4c6:	f002 fc74 	bl	800fdb2 <SDMMC_CmdSendCID>
 800d4ca:	63b8      	str	r0, [r7, #56]	@ 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800d4cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d4ce:	2b00      	cmp	r3, #0
 800d4d0:	d001      	beq.n	800d4d6 <SD_InitCard+0x46>
    {
      return errorstate;
 800d4d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d4d4:	e0a6      	b.n	800d624 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800d4d6:	687b      	ldr	r3, [r7, #4]
 800d4d8:	681b      	ldr	r3, [r3, #0]
 800d4da:	2100      	movs	r1, #0
 800d4dc:	4618      	mov	r0, r3
 800d4de:	f002 fa54 	bl	800f98a <SDMMC_GetResponse>
 800d4e2:	4602      	mov	r2, r0
 800d4e4:	687b      	ldr	r3, [r7, #4]
 800d4e6:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800d4e8:	687b      	ldr	r3, [r7, #4]
 800d4ea:	681b      	ldr	r3, [r3, #0]
 800d4ec:	2104      	movs	r1, #4
 800d4ee:	4618      	mov	r0, r3
 800d4f0:	f002 fa4b 	bl	800f98a <SDMMC_GetResponse>
 800d4f4:	4602      	mov	r2, r0
 800d4f6:	687b      	ldr	r3, [r7, #4]
 800d4f8:	671a      	str	r2, [r3, #112]	@ 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800d4fa:	687b      	ldr	r3, [r7, #4]
 800d4fc:	681b      	ldr	r3, [r3, #0]
 800d4fe:	2108      	movs	r1, #8
 800d500:	4618      	mov	r0, r3
 800d502:	f002 fa42 	bl	800f98a <SDMMC_GetResponse>
 800d506:	4602      	mov	r2, r0
 800d508:	687b      	ldr	r3, [r7, #4]
 800d50a:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800d50c:	687b      	ldr	r3, [r7, #4]
 800d50e:	681b      	ldr	r3, [r3, #0]
 800d510:	210c      	movs	r1, #12
 800d512:	4618      	mov	r0, r3
 800d514:	f002 fa39 	bl	800f98a <SDMMC_GetResponse>
 800d518:	4602      	mov	r2, r0
 800d51a:	687b      	ldr	r3, [r7, #4]
 800d51c:	679a      	str	r2, [r3, #120]	@ 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800d51e:	687b      	ldr	r3, [r7, #4]
 800d520:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d522:	2b03      	cmp	r3, #3
 800d524:	d01d      	beq.n	800d562 <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 800d526:	e019      	b.n	800d55c <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800d528:	687b      	ldr	r3, [r7, #4]
 800d52a:	681b      	ldr	r3, [r3, #0]
 800d52c:	f107 020a 	add.w	r2, r7, #10
 800d530:	4611      	mov	r1, r2
 800d532:	4618      	mov	r0, r3
 800d534:	f002 fc7c 	bl	800fe30 <SDMMC_CmdSetRelAdd>
 800d538:	63b8      	str	r0, [r7, #56]	@ 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 800d53a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d53c:	2b00      	cmp	r3, #0
 800d53e:	d001      	beq.n	800d544 <SD_InitCard+0xb4>
      {
        return errorstate;
 800d540:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d542:	e06f      	b.n	800d624 <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 800d544:	f7f8 fb04 	bl	8005b50 <HAL_GetTick>
 800d548:	4602      	mov	r2, r0
 800d54a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d54c:	1ad3      	subs	r3, r2, r3
 800d54e:	f241 3287 	movw	r2, #4999	@ 0x1387
 800d552:	4293      	cmp	r3, r2
 800d554:	d902      	bls.n	800d55c <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 800d556:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800d55a:	e063      	b.n	800d624 <SD_InitCard+0x194>
    while (sd_rca == 0U)
 800d55c:	897b      	ldrh	r3, [r7, #10]
 800d55e:	2b00      	cmp	r3, #0
 800d560:	d0e2      	beq.n	800d528 <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 800d562:	687b      	ldr	r3, [r7, #4]
 800d564:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d566:	2b03      	cmp	r3, #3
 800d568:	d036      	beq.n	800d5d8 <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800d56a:	897b      	ldrh	r3, [r7, #10]
 800d56c:	461a      	mov	r2, r3
 800d56e:	687b      	ldr	r3, [r7, #4]
 800d570:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800d572:	687b      	ldr	r3, [r7, #4]
 800d574:	681a      	ldr	r2, [r3, #0]
 800d576:	687b      	ldr	r3, [r7, #4]
 800d578:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d57a:	041b      	lsls	r3, r3, #16
 800d57c:	4619      	mov	r1, r3
 800d57e:	4610      	mov	r0, r2
 800d580:	f002 fc36 	bl	800fdf0 <SDMMC_CmdSendCSD>
 800d584:	63b8      	str	r0, [r7, #56]	@ 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800d586:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d588:	2b00      	cmp	r3, #0
 800d58a:	d001      	beq.n	800d590 <SD_InitCard+0x100>
    {
      return errorstate;
 800d58c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d58e:	e049      	b.n	800d624 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800d590:	687b      	ldr	r3, [r7, #4]
 800d592:	681b      	ldr	r3, [r3, #0]
 800d594:	2100      	movs	r1, #0
 800d596:	4618      	mov	r0, r3
 800d598:	f002 f9f7 	bl	800f98a <SDMMC_GetResponse>
 800d59c:	4602      	mov	r2, r0
 800d59e:	687b      	ldr	r3, [r7, #4]
 800d5a0:	65da      	str	r2, [r3, #92]	@ 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800d5a2:	687b      	ldr	r3, [r7, #4]
 800d5a4:	681b      	ldr	r3, [r3, #0]
 800d5a6:	2104      	movs	r1, #4
 800d5a8:	4618      	mov	r0, r3
 800d5aa:	f002 f9ee 	bl	800f98a <SDMMC_GetResponse>
 800d5ae:	4602      	mov	r2, r0
 800d5b0:	687b      	ldr	r3, [r7, #4]
 800d5b2:	661a      	str	r2, [r3, #96]	@ 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800d5b4:	687b      	ldr	r3, [r7, #4]
 800d5b6:	681b      	ldr	r3, [r3, #0]
 800d5b8:	2108      	movs	r1, #8
 800d5ba:	4618      	mov	r0, r3
 800d5bc:	f002 f9e5 	bl	800f98a <SDMMC_GetResponse>
 800d5c0:	4602      	mov	r2, r0
 800d5c2:	687b      	ldr	r3, [r7, #4]
 800d5c4:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800d5c6:	687b      	ldr	r3, [r7, #4]
 800d5c8:	681b      	ldr	r3, [r3, #0]
 800d5ca:	210c      	movs	r1, #12
 800d5cc:	4618      	mov	r0, r3
 800d5ce:	f002 f9dc 	bl	800f98a <SDMMC_GetResponse>
 800d5d2:	4602      	mov	r2, r0
 800d5d4:	687b      	ldr	r3, [r7, #4]
 800d5d6:	669a      	str	r2, [r3, #104]	@ 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800d5d8:	687b      	ldr	r3, [r7, #4]
 800d5da:	681b      	ldr	r3, [r3, #0]
 800d5dc:	2104      	movs	r1, #4
 800d5de:	4618      	mov	r0, r3
 800d5e0:	f002 f9d3 	bl	800f98a <SDMMC_GetResponse>
 800d5e4:	4603      	mov	r3, r0
 800d5e6:	0d1a      	lsrs	r2, r3, #20
 800d5e8:	687b      	ldr	r3, [r7, #4]
 800d5ea:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800d5ec:	f107 030c 	add.w	r3, r7, #12
 800d5f0:	4619      	mov	r1, r3
 800d5f2:	6878      	ldr	r0, [r7, #4]
 800d5f4:	f7ff fb8c 	bl	800cd10 <HAL_SD_GetCardCSD>
 800d5f8:	4603      	mov	r3, r0
 800d5fa:	2b00      	cmp	r3, #0
 800d5fc:	d002      	beq.n	800d604 <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d5fe:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800d602:	e00f      	b.n	800d624 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800d604:	687b      	ldr	r3, [r7, #4]
 800d606:	681a      	ldr	r2, [r3, #0]
 800d608:	687b      	ldr	r3, [r7, #4]
 800d60a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d60c:	041b      	lsls	r3, r3, #16
 800d60e:	4619      	mov	r1, r3
 800d610:	4610      	mov	r0, r2
 800d612:	f002 fae5 	bl	800fbe0 <SDMMC_CmdSelDesel>
 800d616:	63b8      	str	r0, [r7, #56]	@ 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 800d618:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d61a:	2b00      	cmp	r3, #0
 800d61c:	d001      	beq.n	800d622 <SD_InitCard+0x192>
  {
    return errorstate;
 800d61e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d620:	e000      	b.n	800d624 <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800d622:	2300      	movs	r3, #0
}
 800d624:	4618      	mov	r0, r3
 800d626:	3740      	adds	r7, #64	@ 0x40
 800d628:	46bd      	mov	sp, r7
 800d62a:	bd80      	pop	{r7, pc}

0800d62c <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800d62c:	b580      	push	{r7, lr}
 800d62e:	b086      	sub	sp, #24
 800d630:	af00      	add	r7, sp, #0
 800d632:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800d634:	2300      	movs	r3, #0
 800d636:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 800d638:	2300      	movs	r3, #0
 800d63a:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 800d63c:	2300      	movs	r3, #0
 800d63e:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800d640:	687b      	ldr	r3, [r7, #4]
 800d642:	681b      	ldr	r3, [r3, #0]
 800d644:	4618      	mov	r0, r3
 800d646:	f002 faee 	bl	800fc26 <SDMMC_CmdGoIdleState>
 800d64a:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800d64c:	68fb      	ldr	r3, [r7, #12]
 800d64e:	2b00      	cmp	r3, #0
 800d650:	d001      	beq.n	800d656 <SD_PowerON+0x2a>
  {
    return errorstate;
 800d652:	68fb      	ldr	r3, [r7, #12]
 800d654:	e072      	b.n	800d73c <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800d656:	687b      	ldr	r3, [r7, #4]
 800d658:	681b      	ldr	r3, [r3, #0]
 800d65a:	4618      	mov	r0, r3
 800d65c:	f002 fb01 	bl	800fc62 <SDMMC_CmdOperCond>
 800d660:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 800d662:	68fb      	ldr	r3, [r7, #12]
 800d664:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800d668:	d10d      	bne.n	800d686 <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800d66a:	687b      	ldr	r3, [r7, #4]
 800d66c:	2200      	movs	r2, #0
 800d66e:	63da      	str	r2, [r3, #60]	@ 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800d670:	687b      	ldr	r3, [r7, #4]
 800d672:	681b      	ldr	r3, [r3, #0]
 800d674:	4618      	mov	r0, r3
 800d676:	f002 fad6 	bl	800fc26 <SDMMC_CmdGoIdleState>
 800d67a:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800d67c:	68fb      	ldr	r3, [r7, #12]
 800d67e:	2b00      	cmp	r3, #0
 800d680:	d004      	beq.n	800d68c <SD_PowerON+0x60>
    {
      return errorstate;
 800d682:	68fb      	ldr	r3, [r7, #12]
 800d684:	e05a      	b.n	800d73c <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800d686:	687b      	ldr	r3, [r7, #4]
 800d688:	2201      	movs	r2, #1
 800d68a:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 800d68c:	687b      	ldr	r3, [r7, #4]
 800d68e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d690:	2b01      	cmp	r3, #1
 800d692:	d137      	bne.n	800d704 <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800d694:	687b      	ldr	r3, [r7, #4]
 800d696:	681b      	ldr	r3, [r3, #0]
 800d698:	2100      	movs	r1, #0
 800d69a:	4618      	mov	r0, r3
 800d69c:	f002 fb01 	bl	800fca2 <SDMMC_CmdAppCommand>
 800d6a0:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800d6a2:	68fb      	ldr	r3, [r7, #12]
 800d6a4:	2b00      	cmp	r3, #0
 800d6a6:	d02d      	beq.n	800d704 <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d6a8:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800d6ac:	e046      	b.n	800d73c <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800d6ae:	687b      	ldr	r3, [r7, #4]
 800d6b0:	681b      	ldr	r3, [r3, #0]
 800d6b2:	2100      	movs	r1, #0
 800d6b4:	4618      	mov	r0, r3
 800d6b6:	f002 faf4 	bl	800fca2 <SDMMC_CmdAppCommand>
 800d6ba:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800d6bc:	68fb      	ldr	r3, [r7, #12]
 800d6be:	2b00      	cmp	r3, #0
 800d6c0:	d001      	beq.n	800d6c6 <SD_PowerON+0x9a>
    {
      return errorstate;
 800d6c2:	68fb      	ldr	r3, [r7, #12]
 800d6c4:	e03a      	b.n	800d73c <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 800d6c6:	687b      	ldr	r3, [r7, #4]
 800d6c8:	681b      	ldr	r3, [r3, #0]
 800d6ca:	491e      	ldr	r1, [pc, #120]	@ (800d744 <SD_PowerON+0x118>)
 800d6cc:	4618      	mov	r0, r3
 800d6ce:	f002 fb0b 	bl	800fce8 <SDMMC_CmdAppOperCommand>
 800d6d2:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 800d6d4:	68fb      	ldr	r3, [r7, #12]
 800d6d6:	2b00      	cmp	r3, #0
 800d6d8:	d002      	beq.n	800d6e0 <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d6da:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800d6de:	e02d      	b.n	800d73c <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800d6e0:	687b      	ldr	r3, [r7, #4]
 800d6e2:	681b      	ldr	r3, [r3, #0]
 800d6e4:	2100      	movs	r1, #0
 800d6e6:	4618      	mov	r0, r3
 800d6e8:	f002 f94f 	bl	800f98a <SDMMC_GetResponse>
 800d6ec:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800d6ee:	697b      	ldr	r3, [r7, #20]
 800d6f0:	0fdb      	lsrs	r3, r3, #31
 800d6f2:	2b01      	cmp	r3, #1
 800d6f4:	d101      	bne.n	800d6fa <SD_PowerON+0xce>
 800d6f6:	2301      	movs	r3, #1
 800d6f8:	e000      	b.n	800d6fc <SD_PowerON+0xd0>
 800d6fa:	2300      	movs	r3, #0
 800d6fc:	613b      	str	r3, [r7, #16]

    count++;
 800d6fe:	68bb      	ldr	r3, [r7, #8]
 800d700:	3301      	adds	r3, #1
 800d702:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800d704:	68bb      	ldr	r3, [r7, #8]
 800d706:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800d70a:	4293      	cmp	r3, r2
 800d70c:	d802      	bhi.n	800d714 <SD_PowerON+0xe8>
 800d70e:	693b      	ldr	r3, [r7, #16]
 800d710:	2b00      	cmp	r3, #0
 800d712:	d0cc      	beq.n	800d6ae <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 800d714:	68bb      	ldr	r3, [r7, #8]
 800d716:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800d71a:	4293      	cmp	r3, r2
 800d71c:	d902      	bls.n	800d724 <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800d71e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800d722:	e00b      	b.n	800d73c <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 800d724:	687b      	ldr	r3, [r7, #4]
 800d726:	2200      	movs	r2, #0
 800d728:	639a      	str	r2, [r3, #56]	@ 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 800d72a:	697b      	ldr	r3, [r7, #20]
 800d72c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800d730:	2b00      	cmp	r3, #0
 800d732:	d002      	beq.n	800d73a <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800d734:	687b      	ldr	r3, [r7, #4]
 800d736:	2201      	movs	r2, #1
 800d738:	639a      	str	r2, [r3, #56]	@ 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 800d73a:	2300      	movs	r3, #0
}
 800d73c:	4618      	mov	r0, r3
 800d73e:	3718      	adds	r7, #24
 800d740:	46bd      	mov	sp, r7
 800d742:	bd80      	pop	{r7, pc}
 800d744:	c1100000 	.word	0xc1100000

0800d748 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 800d748:	b580      	push	{r7, lr}
 800d74a:	b08c      	sub	sp, #48	@ 0x30
 800d74c:	af00      	add	r7, sp, #0
 800d74e:	6078      	str	r0, [r7, #4]
 800d750:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800d752:	f7f8 f9fd 	bl	8005b50 <HAL_GetTick>
 800d756:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 800d758:	683b      	ldr	r3, [r7, #0]
 800d75a:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800d75c:	687b      	ldr	r3, [r7, #4]
 800d75e:	681b      	ldr	r3, [r3, #0]
 800d760:	2100      	movs	r1, #0
 800d762:	4618      	mov	r0, r3
 800d764:	f002 f911 	bl	800f98a <SDMMC_GetResponse>
 800d768:	4603      	mov	r3, r0
 800d76a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800d76e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800d772:	d102      	bne.n	800d77a <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800d774:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800d778:	e0b0      	b.n	800d8dc <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 800d77a:	687b      	ldr	r3, [r7, #4]
 800d77c:	681b      	ldr	r3, [r3, #0]
 800d77e:	2140      	movs	r1, #64	@ 0x40
 800d780:	4618      	mov	r0, r3
 800d782:	f002 f941 	bl	800fa08 <SDMMC_CmdBlockLength>
 800d786:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800d788:	6a3b      	ldr	r3, [r7, #32]
 800d78a:	2b00      	cmp	r3, #0
 800d78c:	d005      	beq.n	800d79a <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800d78e:	687b      	ldr	r3, [r7, #4]
 800d790:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d792:	687b      	ldr	r3, [r7, #4]
 800d794:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 800d796:	6a3b      	ldr	r3, [r7, #32]
 800d798:	e0a0      	b.n	800d8dc <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800d79a:	687b      	ldr	r3, [r7, #4]
 800d79c:	681a      	ldr	r2, [r3, #0]
 800d79e:	687b      	ldr	r3, [r7, #4]
 800d7a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d7a2:	041b      	lsls	r3, r3, #16
 800d7a4:	4619      	mov	r1, r3
 800d7a6:	4610      	mov	r0, r2
 800d7a8:	f002 fa7b 	bl	800fca2 <SDMMC_CmdAppCommand>
 800d7ac:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800d7ae:	6a3b      	ldr	r3, [r7, #32]
 800d7b0:	2b00      	cmp	r3, #0
 800d7b2:	d005      	beq.n	800d7c0 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800d7b4:	687b      	ldr	r3, [r7, #4]
 800d7b6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d7b8:	687b      	ldr	r3, [r7, #4]
 800d7ba:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 800d7bc:	6a3b      	ldr	r3, [r7, #32]
 800d7be:	e08d      	b.n	800d8dc <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800d7c0:	f04f 33ff 	mov.w	r3, #4294967295
 800d7c4:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 800d7c6:	2340      	movs	r3, #64	@ 0x40
 800d7c8:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 800d7ca:	2360      	movs	r3, #96	@ 0x60
 800d7cc:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800d7ce:	2302      	movs	r3, #2
 800d7d0:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800d7d2:	2300      	movs	r3, #0
 800d7d4:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800d7d6:	2301      	movs	r3, #1
 800d7d8:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800d7da:	687b      	ldr	r3, [r7, #4]
 800d7dc:	681b      	ldr	r3, [r3, #0]
 800d7de:	f107 0208 	add.w	r2, r7, #8
 800d7e2:	4611      	mov	r1, r2
 800d7e4:	4618      	mov	r0, r3
 800d7e6:	f002 f8e3 	bl	800f9b0 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 800d7ea:	687b      	ldr	r3, [r7, #4]
 800d7ec:	681b      	ldr	r3, [r3, #0]
 800d7ee:	4618      	mov	r0, r3
 800d7f0:	f002 fb63 	bl	800feba <SDMMC_CmdStatusRegister>
 800d7f4:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800d7f6:	6a3b      	ldr	r3, [r7, #32]
 800d7f8:	2b00      	cmp	r3, #0
 800d7fa:	d02b      	beq.n	800d854 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800d7fc:	687b      	ldr	r3, [r7, #4]
 800d7fe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d800:	687b      	ldr	r3, [r7, #4]
 800d802:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 800d804:	6a3b      	ldr	r3, [r7, #32]
 800d806:	e069      	b.n	800d8dc <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 800d808:	687b      	ldr	r3, [r7, #4]
 800d80a:	681b      	ldr	r3, [r3, #0]
 800d80c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d80e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800d812:	2b00      	cmp	r3, #0
 800d814:	d013      	beq.n	800d83e <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 800d816:	2300      	movs	r3, #0
 800d818:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d81a:	e00d      	b.n	800d838 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 800d81c:	687b      	ldr	r3, [r7, #4]
 800d81e:	681b      	ldr	r3, [r3, #0]
 800d820:	4618      	mov	r0, r3
 800d822:	f002 f83d 	bl	800f8a0 <SDMMC_ReadFIFO>
 800d826:	4602      	mov	r2, r0
 800d828:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d82a:	601a      	str	r2, [r3, #0]
        pData++;
 800d82c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d82e:	3304      	adds	r3, #4
 800d830:	62bb      	str	r3, [r7, #40]	@ 0x28
      for (count = 0U; count < 8U; count++)
 800d832:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d834:	3301      	adds	r3, #1
 800d836:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d838:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d83a:	2b07      	cmp	r3, #7
 800d83c:	d9ee      	bls.n	800d81c <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800d83e:	f7f8 f987 	bl	8005b50 <HAL_GetTick>
 800d842:	4602      	mov	r2, r0
 800d844:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d846:	1ad3      	subs	r3, r2, r3
 800d848:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d84c:	d102      	bne.n	800d854 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800d84e:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800d852:	e043      	b.n	800d8dc <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800d854:	687b      	ldr	r3, [r7, #4]
 800d856:	681b      	ldr	r3, [r3, #0]
 800d858:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d85a:	f403 7395 	and.w	r3, r3, #298	@ 0x12a
 800d85e:	2b00      	cmp	r3, #0
 800d860:	d0d2      	beq.n	800d808 <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800d862:	687b      	ldr	r3, [r7, #4]
 800d864:	681b      	ldr	r3, [r3, #0]
 800d866:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d868:	f003 0308 	and.w	r3, r3, #8
 800d86c:	2b00      	cmp	r3, #0
 800d86e:	d001      	beq.n	800d874 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 800d870:	2308      	movs	r3, #8
 800d872:	e033      	b.n	800d8dc <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800d874:	687b      	ldr	r3, [r7, #4]
 800d876:	681b      	ldr	r3, [r3, #0]
 800d878:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d87a:	f003 0302 	and.w	r3, r3, #2
 800d87e:	2b00      	cmp	r3, #0
 800d880:	d001      	beq.n	800d886 <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800d882:	2302      	movs	r3, #2
 800d884:	e02a      	b.n	800d8dc <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800d886:	687b      	ldr	r3, [r7, #4]
 800d888:	681b      	ldr	r3, [r3, #0]
 800d88a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d88c:	f003 0320 	and.w	r3, r3, #32
 800d890:	2b00      	cmp	r3, #0
 800d892:	d017      	beq.n	800d8c4 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 800d894:	2320      	movs	r3, #32
 800d896:	e021      	b.n	800d8dc <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 800d898:	687b      	ldr	r3, [r7, #4]
 800d89a:	681b      	ldr	r3, [r3, #0]
 800d89c:	4618      	mov	r0, r3
 800d89e:	f001 ffff 	bl	800f8a0 <SDMMC_ReadFIFO>
 800d8a2:	4602      	mov	r2, r0
 800d8a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d8a6:	601a      	str	r2, [r3, #0]
    pData++;
 800d8a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d8aa:	3304      	adds	r3, #4
 800d8ac:	62bb      	str	r3, [r7, #40]	@ 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800d8ae:	f7f8 f94f 	bl	8005b50 <HAL_GetTick>
 800d8b2:	4602      	mov	r2, r0
 800d8b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d8b6:	1ad3      	subs	r3, r2, r3
 800d8b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d8bc:	d102      	bne.n	800d8c4 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800d8be:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800d8c2:	e00b      	b.n	800d8dc <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	681b      	ldr	r3, [r3, #0]
 800d8c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d8ca:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800d8ce:	2b00      	cmp	r3, #0
 800d8d0:	d1e2      	bne.n	800d898 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800d8d2:	687b      	ldr	r3, [r7, #4]
 800d8d4:	681b      	ldr	r3, [r3, #0]
 800d8d6:	4a03      	ldr	r2, [pc, #12]	@ (800d8e4 <SD_SendSDStatus+0x19c>)
 800d8d8:	639a      	str	r2, [r3, #56]	@ 0x38

  return HAL_SD_ERROR_NONE;
 800d8da:	2300      	movs	r3, #0
}
 800d8dc:	4618      	mov	r0, r3
 800d8de:	3730      	adds	r7, #48	@ 0x30
 800d8e0:	46bd      	mov	sp, r7
 800d8e2:	bd80      	pop	{r7, pc}
 800d8e4:	18000f3a 	.word	0x18000f3a

0800d8e8 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800d8e8:	b580      	push	{r7, lr}
 800d8ea:	b084      	sub	sp, #16
 800d8ec:	af00      	add	r7, sp, #0
 800d8ee:	6078      	str	r0, [r7, #4]
 800d8f0:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 800d8f2:	683b      	ldr	r3, [r7, #0]
 800d8f4:	2b00      	cmp	r3, #0
 800d8f6:	d102      	bne.n	800d8fe <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800d8f8:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800d8fc:	e018      	b.n	800d930 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800d8fe:	687b      	ldr	r3, [r7, #4]
 800d900:	681a      	ldr	r2, [r3, #0]
 800d902:	687b      	ldr	r3, [r7, #4]
 800d904:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d906:	041b      	lsls	r3, r3, #16
 800d908:	4619      	mov	r1, r3
 800d90a:	4610      	mov	r0, r2
 800d90c:	f002 fab2 	bl	800fe74 <SDMMC_CmdSendStatus>
 800d910:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800d912:	68fb      	ldr	r3, [r7, #12]
 800d914:	2b00      	cmp	r3, #0
 800d916:	d001      	beq.n	800d91c <SD_SendStatus+0x34>
  {
    return errorstate;
 800d918:	68fb      	ldr	r3, [r7, #12]
 800d91a:	e009      	b.n	800d930 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800d91c:	687b      	ldr	r3, [r7, #4]
 800d91e:	681b      	ldr	r3, [r3, #0]
 800d920:	2100      	movs	r1, #0
 800d922:	4618      	mov	r0, r3
 800d924:	f002 f831 	bl	800f98a <SDMMC_GetResponse>
 800d928:	4602      	mov	r2, r0
 800d92a:	683b      	ldr	r3, [r7, #0]
 800d92c:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800d92e:	2300      	movs	r3, #0
}
 800d930:	4618      	mov	r0, r3
 800d932:	3710      	adds	r7, #16
 800d934:	46bd      	mov	sp, r7
 800d936:	bd80      	pop	{r7, pc}

0800d938 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800d938:	b580      	push	{r7, lr}
 800d93a:	b086      	sub	sp, #24
 800d93c:	af00      	add	r7, sp, #0
 800d93e:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800d940:	2300      	movs	r3, #0
 800d942:	60fb      	str	r3, [r7, #12]
 800d944:	2300      	movs	r3, #0
 800d946:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800d948:	687b      	ldr	r3, [r7, #4]
 800d94a:	681b      	ldr	r3, [r3, #0]
 800d94c:	2100      	movs	r1, #0
 800d94e:	4618      	mov	r0, r3
 800d950:	f002 f81b 	bl	800f98a <SDMMC_GetResponse>
 800d954:	4603      	mov	r3, r0
 800d956:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800d95a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800d95e:	d102      	bne.n	800d966 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800d960:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800d964:	e02f      	b.n	800d9c6 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800d966:	f107 030c 	add.w	r3, r7, #12
 800d96a:	4619      	mov	r1, r3
 800d96c:	6878      	ldr	r0, [r7, #4]
 800d96e:	f000 f879 	bl	800da64 <SD_FindSCR>
 800d972:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800d974:	697b      	ldr	r3, [r7, #20]
 800d976:	2b00      	cmp	r3, #0
 800d978:	d001      	beq.n	800d97e <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800d97a:	697b      	ldr	r3, [r7, #20]
 800d97c:	e023      	b.n	800d9c6 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800d97e:	693b      	ldr	r3, [r7, #16]
 800d980:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800d984:	2b00      	cmp	r3, #0
 800d986:	d01c      	beq.n	800d9c2 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800d988:	687b      	ldr	r3, [r7, #4]
 800d98a:	681a      	ldr	r2, [r3, #0]
 800d98c:	687b      	ldr	r3, [r7, #4]
 800d98e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d990:	041b      	lsls	r3, r3, #16
 800d992:	4619      	mov	r1, r3
 800d994:	4610      	mov	r0, r2
 800d996:	f002 f984 	bl	800fca2 <SDMMC_CmdAppCommand>
 800d99a:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800d99c:	697b      	ldr	r3, [r7, #20]
 800d99e:	2b00      	cmp	r3, #0
 800d9a0:	d001      	beq.n	800d9a6 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800d9a2:	697b      	ldr	r3, [r7, #20]
 800d9a4:	e00f      	b.n	800d9c6 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800d9a6:	687b      	ldr	r3, [r7, #4]
 800d9a8:	681b      	ldr	r3, [r3, #0]
 800d9aa:	2102      	movs	r1, #2
 800d9ac:	4618      	mov	r0, r3
 800d9ae:	f002 f9bb 	bl	800fd28 <SDMMC_CmdBusWidth>
 800d9b2:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800d9b4:	697b      	ldr	r3, [r7, #20]
 800d9b6:	2b00      	cmp	r3, #0
 800d9b8:	d001      	beq.n	800d9be <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800d9ba:	697b      	ldr	r3, [r7, #20]
 800d9bc:	e003      	b.n	800d9c6 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800d9be:	2300      	movs	r3, #0
 800d9c0:	e001      	b.n	800d9c6 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800d9c2:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 800d9c6:	4618      	mov	r0, r3
 800d9c8:	3718      	adds	r7, #24
 800d9ca:	46bd      	mov	sp, r7
 800d9cc:	bd80      	pop	{r7, pc}

0800d9ce <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800d9ce:	b580      	push	{r7, lr}
 800d9d0:	b086      	sub	sp, #24
 800d9d2:	af00      	add	r7, sp, #0
 800d9d4:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800d9d6:	2300      	movs	r3, #0
 800d9d8:	60fb      	str	r3, [r7, #12]
 800d9da:	2300      	movs	r3, #0
 800d9dc:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800d9de:	687b      	ldr	r3, [r7, #4]
 800d9e0:	681b      	ldr	r3, [r3, #0]
 800d9e2:	2100      	movs	r1, #0
 800d9e4:	4618      	mov	r0, r3
 800d9e6:	f001 ffd0 	bl	800f98a <SDMMC_GetResponse>
 800d9ea:	4603      	mov	r3, r0
 800d9ec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800d9f0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800d9f4:	d102      	bne.n	800d9fc <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800d9f6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800d9fa:	e02f      	b.n	800da5c <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800d9fc:	f107 030c 	add.w	r3, r7, #12
 800da00:	4619      	mov	r1, r3
 800da02:	6878      	ldr	r0, [r7, #4]
 800da04:	f000 f82e 	bl	800da64 <SD_FindSCR>
 800da08:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800da0a:	697b      	ldr	r3, [r7, #20]
 800da0c:	2b00      	cmp	r3, #0
 800da0e:	d001      	beq.n	800da14 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800da10:	697b      	ldr	r3, [r7, #20]
 800da12:	e023      	b.n	800da5c <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800da14:	693b      	ldr	r3, [r7, #16]
 800da16:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800da1a:	2b00      	cmp	r3, #0
 800da1c:	d01c      	beq.n	800da58 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800da1e:	687b      	ldr	r3, [r7, #4]
 800da20:	681a      	ldr	r2, [r3, #0]
 800da22:	687b      	ldr	r3, [r7, #4]
 800da24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800da26:	041b      	lsls	r3, r3, #16
 800da28:	4619      	mov	r1, r3
 800da2a:	4610      	mov	r0, r2
 800da2c:	f002 f939 	bl	800fca2 <SDMMC_CmdAppCommand>
 800da30:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800da32:	697b      	ldr	r3, [r7, #20]
 800da34:	2b00      	cmp	r3, #0
 800da36:	d001      	beq.n	800da3c <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800da38:	697b      	ldr	r3, [r7, #20]
 800da3a:	e00f      	b.n	800da5c <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800da3c:	687b      	ldr	r3, [r7, #4]
 800da3e:	681b      	ldr	r3, [r3, #0]
 800da40:	2100      	movs	r1, #0
 800da42:	4618      	mov	r0, r3
 800da44:	f002 f970 	bl	800fd28 <SDMMC_CmdBusWidth>
 800da48:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800da4a:	697b      	ldr	r3, [r7, #20]
 800da4c:	2b00      	cmp	r3, #0
 800da4e:	d001      	beq.n	800da54 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800da50:	697b      	ldr	r3, [r7, #20]
 800da52:	e003      	b.n	800da5c <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800da54:	2300      	movs	r3, #0
 800da56:	e001      	b.n	800da5c <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800da58:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 800da5c:	4618      	mov	r0, r3
 800da5e:	3718      	adds	r7, #24
 800da60:	46bd      	mov	sp, r7
 800da62:	bd80      	pop	{r7, pc}

0800da64 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800da64:	b580      	push	{r7, lr}
 800da66:	b08e      	sub	sp, #56	@ 0x38
 800da68:	af00      	add	r7, sp, #0
 800da6a:	6078      	str	r0, [r7, #4]
 800da6c:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800da6e:	f7f8 f86f 	bl	8005b50 <HAL_GetTick>
 800da72:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t index = 0U;
 800da74:	2300      	movs	r3, #0
 800da76:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 800da78:	2300      	movs	r3, #0
 800da7a:	60bb      	str	r3, [r7, #8]
 800da7c:	2300      	movs	r3, #0
 800da7e:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800da80:	683b      	ldr	r3, [r7, #0]
 800da82:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	681b      	ldr	r3, [r3, #0]
 800da88:	2108      	movs	r1, #8
 800da8a:	4618      	mov	r0, r3
 800da8c:	f001 ffbc 	bl	800fa08 <SDMMC_CmdBlockLength>
 800da90:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800da92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800da94:	2b00      	cmp	r3, #0
 800da96:	d001      	beq.n	800da9c <SD_FindSCR+0x38>
  {
    return errorstate;
 800da98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800da9a:	e0ad      	b.n	800dbf8 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800da9c:	687b      	ldr	r3, [r7, #4]
 800da9e:	681a      	ldr	r2, [r3, #0]
 800daa0:	687b      	ldr	r3, [r7, #4]
 800daa2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800daa4:	041b      	lsls	r3, r3, #16
 800daa6:	4619      	mov	r1, r3
 800daa8:	4610      	mov	r0, r2
 800daaa:	f002 f8fa 	bl	800fca2 <SDMMC_CmdAppCommand>
 800daae:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800dab0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dab2:	2b00      	cmp	r3, #0
 800dab4:	d001      	beq.n	800daba <SD_FindSCR+0x56>
  {
    return errorstate;
 800dab6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dab8:	e09e      	b.n	800dbf8 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800daba:	f04f 33ff 	mov.w	r3, #4294967295
 800dabe:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800dac0:	2308      	movs	r3, #8
 800dac2:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800dac4:	2330      	movs	r3, #48	@ 0x30
 800dac6:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800dac8:	2302      	movs	r3, #2
 800daca:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800dacc:	2300      	movs	r3, #0
 800dace:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800dad0:	2301      	movs	r3, #1
 800dad2:	627b      	str	r3, [r7, #36]	@ 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800dad4:	687b      	ldr	r3, [r7, #4]
 800dad6:	681b      	ldr	r3, [r3, #0]
 800dad8:	f107 0210 	add.w	r2, r7, #16
 800dadc:	4611      	mov	r1, r2
 800dade:	4618      	mov	r0, r3
 800dae0:	f001 ff66 	bl	800f9b0 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800dae4:	687b      	ldr	r3, [r7, #4]
 800dae6:	681b      	ldr	r3, [r3, #0]
 800dae8:	4618      	mov	r0, r3
 800daea:	f002 f940 	bl	800fd6e <SDMMC_CmdSendSCR>
 800daee:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800daf0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800daf2:	2b00      	cmp	r3, #0
 800daf4:	d027      	beq.n	800db46 <SD_FindSCR+0xe2>
  {
    return errorstate;
 800daf6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800daf8:	e07e      	b.n	800dbf8 <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800dafa:	687b      	ldr	r3, [r7, #4]
 800dafc:	681b      	ldr	r3, [r3, #0]
 800dafe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800db00:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800db04:	2b00      	cmp	r3, #0
 800db06:	d113      	bne.n	800db30 <SD_FindSCR+0xcc>
 800db08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800db0a:	2b00      	cmp	r3, #0
 800db0c:	d110      	bne.n	800db30 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 800db0e:	687b      	ldr	r3, [r7, #4]
 800db10:	681b      	ldr	r3, [r3, #0]
 800db12:	4618      	mov	r0, r3
 800db14:	f001 fec4 	bl	800f8a0 <SDMMC_ReadFIFO>
 800db18:	4603      	mov	r3, r0
 800db1a:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 800db1c:	687b      	ldr	r3, [r7, #4]
 800db1e:	681b      	ldr	r3, [r3, #0]
 800db20:	4618      	mov	r0, r3
 800db22:	f001 febd 	bl	800f8a0 <SDMMC_ReadFIFO>
 800db26:	4603      	mov	r3, r0
 800db28:	60fb      	str	r3, [r7, #12]
      index++;
 800db2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800db2c:	3301      	adds	r3, #1
 800db2e:	637b      	str	r3, [r7, #52]	@ 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800db30:	f7f8 f80e 	bl	8005b50 <HAL_GetTick>
 800db34:	4602      	mov	r2, r0
 800db36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800db38:	1ad3      	subs	r3, r2, r3
 800db3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800db3e:	d102      	bne.n	800db46 <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800db40:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800db44:	e058      	b.n	800dbf8 <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 800db46:	687b      	ldr	r3, [r7, #4]
 800db48:	681b      	ldr	r3, [r3, #0]
 800db4a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800db4c:	f240 532a 	movw	r3, #1322	@ 0x52a
 800db50:	4013      	ands	r3, r2
 800db52:	2b00      	cmp	r3, #0
 800db54:	d0d1      	beq.n	800dafa <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800db56:	687b      	ldr	r3, [r7, #4]
 800db58:	681b      	ldr	r3, [r3, #0]
 800db5a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800db5c:	f003 0308 	and.w	r3, r3, #8
 800db60:	2b00      	cmp	r3, #0
 800db62:	d005      	beq.n	800db70 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800db64:	687b      	ldr	r3, [r7, #4]
 800db66:	681b      	ldr	r3, [r3, #0]
 800db68:	2208      	movs	r2, #8
 800db6a:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800db6c:	2308      	movs	r3, #8
 800db6e:	e043      	b.n	800dbf8 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800db70:	687b      	ldr	r3, [r7, #4]
 800db72:	681b      	ldr	r3, [r3, #0]
 800db74:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800db76:	f003 0302 	and.w	r3, r3, #2
 800db7a:	2b00      	cmp	r3, #0
 800db7c:	d005      	beq.n	800db8a <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800db7e:	687b      	ldr	r3, [r7, #4]
 800db80:	681b      	ldr	r3, [r3, #0]
 800db82:	2202      	movs	r2, #2
 800db84:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800db86:	2302      	movs	r3, #2
 800db88:	e036      	b.n	800dbf8 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800db8a:	687b      	ldr	r3, [r7, #4]
 800db8c:	681b      	ldr	r3, [r3, #0]
 800db8e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800db90:	f003 0320 	and.w	r3, r3, #32
 800db94:	2b00      	cmp	r3, #0
 800db96:	d005      	beq.n	800dba4 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800db98:	687b      	ldr	r3, [r7, #4]
 800db9a:	681b      	ldr	r3, [r3, #0]
 800db9c:	2220      	movs	r2, #32
 800db9e:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800dba0:	2320      	movs	r3, #32
 800dba2:	e029      	b.n	800dbf8 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800dba4:	687b      	ldr	r3, [r7, #4]
 800dba6:	681b      	ldr	r3, [r3, #0]
 800dba8:	4a15      	ldr	r2, [pc, #84]	@ (800dc00 <SD_FindSCR+0x19c>)
 800dbaa:	639a      	str	r2, [r3, #56]	@ 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800dbac:	68fb      	ldr	r3, [r7, #12]
 800dbae:	061a      	lsls	r2, r3, #24
 800dbb0:	68fb      	ldr	r3, [r7, #12]
 800dbb2:	021b      	lsls	r3, r3, #8
 800dbb4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800dbb8:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800dbba:	68fb      	ldr	r3, [r7, #12]
 800dbbc:	0a1b      	lsrs	r3, r3, #8
 800dbbe:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800dbc2:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800dbc4:	68fb      	ldr	r3, [r7, #12]
 800dbc6:	0e1b      	lsrs	r3, r3, #24
 800dbc8:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800dbca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dbcc:	601a      	str	r2, [r3, #0]
    scr++;
 800dbce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dbd0:	3304      	adds	r3, #4
 800dbd2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800dbd4:	68bb      	ldr	r3, [r7, #8]
 800dbd6:	061a      	lsls	r2, r3, #24
 800dbd8:	68bb      	ldr	r3, [r7, #8]
 800dbda:	021b      	lsls	r3, r3, #8
 800dbdc:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800dbe0:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800dbe2:	68bb      	ldr	r3, [r7, #8]
 800dbe4:	0a1b      	lsrs	r3, r3, #8
 800dbe6:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800dbea:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800dbec:	68bb      	ldr	r3, [r7, #8]
 800dbee:	0e1b      	lsrs	r3, r3, #24
 800dbf0:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800dbf2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dbf4:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800dbf6:	2300      	movs	r3, #0
}
 800dbf8:	4618      	mov	r0, r3
 800dbfa:	3738      	adds	r7, #56	@ 0x38
 800dbfc:	46bd      	mov	sp, r7
 800dbfe:	bd80      	pop	{r7, pc}
 800dc00:	18000f3a 	.word	0x18000f3a

0800dc04 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800dc04:	b580      	push	{r7, lr}
 800dc06:	b086      	sub	sp, #24
 800dc08:	af00      	add	r7, sp, #0
 800dc0a:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pRxBuffPtr;
 800dc0c:	687b      	ldr	r3, [r7, #4]
 800dc0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dc10:	613b      	str	r3, [r7, #16]

  if (hsd->RxXferSize >= 32U)
 800dc12:	687b      	ldr	r3, [r7, #4]
 800dc14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dc16:	2b1f      	cmp	r3, #31
 800dc18:	d936      	bls.n	800dc88 <SD_Read_IT+0x84>
  {
    /* Read data from SDMMC Rx FIFO */
    for (count = 0U; count < 8U; count++)
 800dc1a:	2300      	movs	r3, #0
 800dc1c:	617b      	str	r3, [r7, #20]
 800dc1e:	e027      	b.n	800dc70 <SD_Read_IT+0x6c>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 800dc20:	687b      	ldr	r3, [r7, #4]
 800dc22:	681b      	ldr	r3, [r3, #0]
 800dc24:	4618      	mov	r0, r3
 800dc26:	f001 fe3b 	bl	800f8a0 <SDMMC_ReadFIFO>
 800dc2a:	60f8      	str	r0, [r7, #12]
      *tmp = (uint8_t)(data & 0xFFU);
 800dc2c:	68fb      	ldr	r3, [r7, #12]
 800dc2e:	b2da      	uxtb	r2, r3
 800dc30:	693b      	ldr	r3, [r7, #16]
 800dc32:	701a      	strb	r2, [r3, #0]
      tmp++;
 800dc34:	693b      	ldr	r3, [r7, #16]
 800dc36:	3301      	adds	r3, #1
 800dc38:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800dc3a:	68fb      	ldr	r3, [r7, #12]
 800dc3c:	0a1b      	lsrs	r3, r3, #8
 800dc3e:	b2da      	uxtb	r2, r3
 800dc40:	693b      	ldr	r3, [r7, #16]
 800dc42:	701a      	strb	r2, [r3, #0]
      tmp++;
 800dc44:	693b      	ldr	r3, [r7, #16]
 800dc46:	3301      	adds	r3, #1
 800dc48:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800dc4a:	68fb      	ldr	r3, [r7, #12]
 800dc4c:	0c1b      	lsrs	r3, r3, #16
 800dc4e:	b2da      	uxtb	r2, r3
 800dc50:	693b      	ldr	r3, [r7, #16]
 800dc52:	701a      	strb	r2, [r3, #0]
      tmp++;
 800dc54:	693b      	ldr	r3, [r7, #16]
 800dc56:	3301      	adds	r3, #1
 800dc58:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800dc5a:	68fb      	ldr	r3, [r7, #12]
 800dc5c:	0e1b      	lsrs	r3, r3, #24
 800dc5e:	b2da      	uxtb	r2, r3
 800dc60:	693b      	ldr	r3, [r7, #16]
 800dc62:	701a      	strb	r2, [r3, #0]
      tmp++;
 800dc64:	693b      	ldr	r3, [r7, #16]
 800dc66:	3301      	adds	r3, #1
 800dc68:	613b      	str	r3, [r7, #16]
    for (count = 0U; count < 8U; count++)
 800dc6a:	697b      	ldr	r3, [r7, #20]
 800dc6c:	3301      	adds	r3, #1
 800dc6e:	617b      	str	r3, [r7, #20]
 800dc70:	697b      	ldr	r3, [r7, #20]
 800dc72:	2b07      	cmp	r3, #7
 800dc74:	d9d4      	bls.n	800dc20 <SD_Read_IT+0x1c>
    }

    hsd->pRxBuffPtr = tmp;
 800dc76:	687b      	ldr	r3, [r7, #4]
 800dc78:	693a      	ldr	r2, [r7, #16]
 800dc7a:	625a      	str	r2, [r3, #36]	@ 0x24
    hsd->RxXferSize -= 32U;
 800dc7c:	687b      	ldr	r3, [r7, #4]
 800dc7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dc80:	f1a3 0220 	sub.w	r2, r3, #32
 800dc84:	687b      	ldr	r3, [r7, #4]
 800dc86:	629a      	str	r2, [r3, #40]	@ 0x28
  }
}
 800dc88:	bf00      	nop
 800dc8a:	3718      	adds	r7, #24
 800dc8c:	46bd      	mov	sp, r7
 800dc8e:	bd80      	pop	{r7, pc}

0800dc90 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800dc90:	b580      	push	{r7, lr}
 800dc92:	b086      	sub	sp, #24
 800dc94:	af00      	add	r7, sp, #0
 800dc96:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  const uint8_t *tmp;

  tmp = hsd->pTxBuffPtr;
 800dc98:	687b      	ldr	r3, [r7, #4]
 800dc9a:	69db      	ldr	r3, [r3, #28]
 800dc9c:	613b      	str	r3, [r7, #16]

  if (hsd->TxXferSize >= 32U)
 800dc9e:	687b      	ldr	r3, [r7, #4]
 800dca0:	6a1b      	ldr	r3, [r3, #32]
 800dca2:	2b1f      	cmp	r3, #31
 800dca4:	d93a      	bls.n	800dd1c <SD_Write_IT+0x8c>
  {
    /* Write data to SDMMC Tx FIFO */
    for (count = 0U; count < 8U; count++)
 800dca6:	2300      	movs	r3, #0
 800dca8:	617b      	str	r3, [r7, #20]
 800dcaa:	e02b      	b.n	800dd04 <SD_Write_IT+0x74>
    {
      data = (uint32_t)(*tmp);
 800dcac:	693b      	ldr	r3, [r7, #16]
 800dcae:	781b      	ldrb	r3, [r3, #0]
 800dcb0:	60fb      	str	r3, [r7, #12]
      tmp++;
 800dcb2:	693b      	ldr	r3, [r7, #16]
 800dcb4:	3301      	adds	r3, #1
 800dcb6:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800dcb8:	693b      	ldr	r3, [r7, #16]
 800dcba:	781b      	ldrb	r3, [r3, #0]
 800dcbc:	021a      	lsls	r2, r3, #8
 800dcbe:	68fb      	ldr	r3, [r7, #12]
 800dcc0:	4313      	orrs	r3, r2
 800dcc2:	60fb      	str	r3, [r7, #12]
      tmp++;
 800dcc4:	693b      	ldr	r3, [r7, #16]
 800dcc6:	3301      	adds	r3, #1
 800dcc8:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800dcca:	693b      	ldr	r3, [r7, #16]
 800dccc:	781b      	ldrb	r3, [r3, #0]
 800dcce:	041a      	lsls	r2, r3, #16
 800dcd0:	68fb      	ldr	r3, [r7, #12]
 800dcd2:	4313      	orrs	r3, r2
 800dcd4:	60fb      	str	r3, [r7, #12]
      tmp++;
 800dcd6:	693b      	ldr	r3, [r7, #16]
 800dcd8:	3301      	adds	r3, #1
 800dcda:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800dcdc:	693b      	ldr	r3, [r7, #16]
 800dcde:	781b      	ldrb	r3, [r3, #0]
 800dce0:	061a      	lsls	r2, r3, #24
 800dce2:	68fb      	ldr	r3, [r7, #12]
 800dce4:	4313      	orrs	r3, r2
 800dce6:	60fb      	str	r3, [r7, #12]
      tmp++;
 800dce8:	693b      	ldr	r3, [r7, #16]
 800dcea:	3301      	adds	r3, #1
 800dcec:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800dcee:	687b      	ldr	r3, [r7, #4]
 800dcf0:	681b      	ldr	r3, [r3, #0]
 800dcf2:	f107 020c 	add.w	r2, r7, #12
 800dcf6:	4611      	mov	r1, r2
 800dcf8:	4618      	mov	r0, r3
 800dcfa:	f001 fdde 	bl	800f8ba <SDMMC_WriteFIFO>
    for (count = 0U; count < 8U; count++)
 800dcfe:	697b      	ldr	r3, [r7, #20]
 800dd00:	3301      	adds	r3, #1
 800dd02:	617b      	str	r3, [r7, #20]
 800dd04:	697b      	ldr	r3, [r7, #20]
 800dd06:	2b07      	cmp	r3, #7
 800dd08:	d9d0      	bls.n	800dcac <SD_Write_IT+0x1c>
    }

    hsd->pTxBuffPtr = tmp;
 800dd0a:	687b      	ldr	r3, [r7, #4]
 800dd0c:	693a      	ldr	r2, [r7, #16]
 800dd0e:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize -= 32U;
 800dd10:	687b      	ldr	r3, [r7, #4]
 800dd12:	6a1b      	ldr	r3, [r3, #32]
 800dd14:	f1a3 0220 	sub.w	r2, r3, #32
 800dd18:	687b      	ldr	r3, [r7, #4]
 800dd1a:	621a      	str	r2, [r3, #32]
  }
}
 800dd1c:	bf00      	nop
 800dd1e:	3718      	adds	r7, #24
 800dd20:	46bd      	mov	sp, r7
 800dd22:	bd80      	pop	{r7, pc}

0800dd24 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800dd24:	b480      	push	{r7}
 800dd26:	b083      	sub	sp, #12
 800dd28:	af00      	add	r7, sp, #0
 800dd2a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800dd2c:	bf00      	nop
 800dd2e:	370c      	adds	r7, #12
 800dd30:	46bd      	mov	sp, r7
 800dd32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd36:	4770      	bx	lr

0800dd38 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800dd38:	b480      	push	{r7}
 800dd3a:	b083      	sub	sp, #12
 800dd3c:	af00      	add	r7, sp, #0
 800dd3e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800dd40:	bf00      	nop
 800dd42:	370c      	adds	r7, #12
 800dd44:	46bd      	mov	sp, r7
 800dd46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd4a:	4770      	bx	lr

0800dd4c <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800dd4c:	b480      	push	{r7}
 800dd4e:	b083      	sub	sp, #12
 800dd50:	af00      	add	r7, sp, #0
 800dd52:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800dd54:	bf00      	nop
 800dd56:	370c      	adds	r7, #12
 800dd58:	46bd      	mov	sp, r7
 800dd5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd5e:	4770      	bx	lr

0800dd60 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800dd60:	b480      	push	{r7}
 800dd62:	b083      	sub	sp, #12
 800dd64:	af00      	add	r7, sp, #0
 800dd66:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800dd68:	bf00      	nop
 800dd6a:	370c      	adds	r7, #12
 800dd6c:	46bd      	mov	sp, r7
 800dd6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd72:	4770      	bx	lr

0800dd74 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800dd74:	b580      	push	{r7, lr}
 800dd76:	b084      	sub	sp, #16
 800dd78:	af00      	add	r7, sp, #0
 800dd7a:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800dd7c:	687b      	ldr	r3, [r7, #4]
 800dd7e:	2b00      	cmp	r3, #0
 800dd80:	d101      	bne.n	800dd86 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800dd82:	2301      	movs	r3, #1
 800dd84:	e10f      	b.n	800dfa6 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800dd86:	687b      	ldr	r3, [r7, #4]
 800dd88:	2200      	movs	r2, #0
 800dd8a:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800dd8c:	687b      	ldr	r3, [r7, #4]
 800dd8e:	681b      	ldr	r3, [r3, #0]
 800dd90:	4a87      	ldr	r2, [pc, #540]	@ (800dfb0 <HAL_SPI_Init+0x23c>)
 800dd92:	4293      	cmp	r3, r2
 800dd94:	d00f      	beq.n	800ddb6 <HAL_SPI_Init+0x42>
 800dd96:	687b      	ldr	r3, [r7, #4]
 800dd98:	681b      	ldr	r3, [r3, #0]
 800dd9a:	4a86      	ldr	r2, [pc, #536]	@ (800dfb4 <HAL_SPI_Init+0x240>)
 800dd9c:	4293      	cmp	r3, r2
 800dd9e:	d00a      	beq.n	800ddb6 <HAL_SPI_Init+0x42>
 800dda0:	687b      	ldr	r3, [r7, #4]
 800dda2:	681b      	ldr	r3, [r3, #0]
 800dda4:	4a84      	ldr	r2, [pc, #528]	@ (800dfb8 <HAL_SPI_Init+0x244>)
 800dda6:	4293      	cmp	r3, r2
 800dda8:	d005      	beq.n	800ddb6 <HAL_SPI_Init+0x42>
 800ddaa:	687b      	ldr	r3, [r7, #4]
 800ddac:	68db      	ldr	r3, [r3, #12]
 800ddae:	2b0f      	cmp	r3, #15
 800ddb0:	d901      	bls.n	800ddb6 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800ddb2:	2301      	movs	r3, #1
 800ddb4:	e0f7      	b.n	800dfa6 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800ddb6:	6878      	ldr	r0, [r7, #4]
 800ddb8:	f000 fbc2 	bl	800e540 <SPI_GetPacketSize>
 800ddbc:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800ddbe:	687b      	ldr	r3, [r7, #4]
 800ddc0:	681b      	ldr	r3, [r3, #0]
 800ddc2:	4a7b      	ldr	r2, [pc, #492]	@ (800dfb0 <HAL_SPI_Init+0x23c>)
 800ddc4:	4293      	cmp	r3, r2
 800ddc6:	d00c      	beq.n	800dde2 <HAL_SPI_Init+0x6e>
 800ddc8:	687b      	ldr	r3, [r7, #4]
 800ddca:	681b      	ldr	r3, [r3, #0]
 800ddcc:	4a79      	ldr	r2, [pc, #484]	@ (800dfb4 <HAL_SPI_Init+0x240>)
 800ddce:	4293      	cmp	r3, r2
 800ddd0:	d007      	beq.n	800dde2 <HAL_SPI_Init+0x6e>
 800ddd2:	687b      	ldr	r3, [r7, #4]
 800ddd4:	681b      	ldr	r3, [r3, #0]
 800ddd6:	4a78      	ldr	r2, [pc, #480]	@ (800dfb8 <HAL_SPI_Init+0x244>)
 800ddd8:	4293      	cmp	r3, r2
 800ddda:	d002      	beq.n	800dde2 <HAL_SPI_Init+0x6e>
 800dddc:	68fb      	ldr	r3, [r7, #12]
 800ddde:	2b08      	cmp	r3, #8
 800dde0:	d811      	bhi.n	800de06 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800dde2:	687b      	ldr	r3, [r7, #4]
 800dde4:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800dde6:	4a72      	ldr	r2, [pc, #456]	@ (800dfb0 <HAL_SPI_Init+0x23c>)
 800dde8:	4293      	cmp	r3, r2
 800ddea:	d009      	beq.n	800de00 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800ddec:	687b      	ldr	r3, [r7, #4]
 800ddee:	681b      	ldr	r3, [r3, #0]
 800ddf0:	4a70      	ldr	r2, [pc, #448]	@ (800dfb4 <HAL_SPI_Init+0x240>)
 800ddf2:	4293      	cmp	r3, r2
 800ddf4:	d004      	beq.n	800de00 <HAL_SPI_Init+0x8c>
 800ddf6:	687b      	ldr	r3, [r7, #4]
 800ddf8:	681b      	ldr	r3, [r3, #0]
 800ddfa:	4a6f      	ldr	r2, [pc, #444]	@ (800dfb8 <HAL_SPI_Init+0x244>)
 800ddfc:	4293      	cmp	r3, r2
 800ddfe:	d104      	bne.n	800de0a <HAL_SPI_Init+0x96>
 800de00:	68fb      	ldr	r3, [r7, #12]
 800de02:	2b10      	cmp	r3, #16
 800de04:	d901      	bls.n	800de0a <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800de06:	2301      	movs	r3, #1
 800de08:	e0cd      	b.n	800dfa6 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800de0a:	687b      	ldr	r3, [r7, #4]
 800de0c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800de10:	b2db      	uxtb	r3, r3
 800de12:	2b00      	cmp	r3, #0
 800de14:	d106      	bne.n	800de24 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800de16:	687b      	ldr	r3, [r7, #4]
 800de18:	2200      	movs	r2, #0
 800de1a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800de1e:	6878      	ldr	r0, [r7, #4]
 800de20:	f000 f8cc 	bl	800dfbc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800de24:	687b      	ldr	r3, [r7, #4]
 800de26:	2202      	movs	r2, #2
 800de28:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800de2c:	687b      	ldr	r3, [r7, #4]
 800de2e:	681b      	ldr	r3, [r3, #0]
 800de30:	681a      	ldr	r2, [r3, #0]
 800de32:	687b      	ldr	r3, [r7, #4]
 800de34:	681b      	ldr	r3, [r3, #0]
 800de36:	f022 0201 	bic.w	r2, r2, #1
 800de3a:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800de3c:	687b      	ldr	r3, [r7, #4]
 800de3e:	681b      	ldr	r3, [r3, #0]
 800de40:	689b      	ldr	r3, [r3, #8]
 800de42:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800de46:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800de48:	687b      	ldr	r3, [r7, #4]
 800de4a:	699b      	ldr	r3, [r3, #24]
 800de4c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800de50:	d119      	bne.n	800de86 <HAL_SPI_Init+0x112>
 800de52:	687b      	ldr	r3, [r7, #4]
 800de54:	685b      	ldr	r3, [r3, #4]
 800de56:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800de5a:	d103      	bne.n	800de64 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800de5c:	687b      	ldr	r3, [r7, #4]
 800de5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800de60:	2b00      	cmp	r3, #0
 800de62:	d008      	beq.n	800de76 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800de64:	687b      	ldr	r3, [r7, #4]
 800de66:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800de68:	2b00      	cmp	r3, #0
 800de6a:	d10c      	bne.n	800de86 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800de6c:	687b      	ldr	r3, [r7, #4]
 800de6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800de70:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800de74:	d107      	bne.n	800de86 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800de76:	687b      	ldr	r3, [r7, #4]
 800de78:	681b      	ldr	r3, [r3, #0]
 800de7a:	681a      	ldr	r2, [r3, #0]
 800de7c:	687b      	ldr	r3, [r7, #4]
 800de7e:	681b      	ldr	r3, [r3, #0]
 800de80:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800de84:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800de86:	687b      	ldr	r3, [r7, #4]
 800de88:	685b      	ldr	r3, [r3, #4]
 800de8a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800de8e:	2b00      	cmp	r3, #0
 800de90:	d00f      	beq.n	800deb2 <HAL_SPI_Init+0x13e>
 800de92:	687b      	ldr	r3, [r7, #4]
 800de94:	68db      	ldr	r3, [r3, #12]
 800de96:	2b06      	cmp	r3, #6
 800de98:	d90b      	bls.n	800deb2 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800de9a:	687b      	ldr	r3, [r7, #4]
 800de9c:	681b      	ldr	r3, [r3, #0]
 800de9e:	681b      	ldr	r3, [r3, #0]
 800dea0:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 800dea4:	687b      	ldr	r3, [r7, #4]
 800dea6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800dea8:	687b      	ldr	r3, [r7, #4]
 800deaa:	681b      	ldr	r3, [r3, #0]
 800deac:	430a      	orrs	r2, r1
 800deae:	601a      	str	r2, [r3, #0]
 800deb0:	e007      	b.n	800dec2 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800deb2:	687b      	ldr	r3, [r7, #4]
 800deb4:	681b      	ldr	r3, [r3, #0]
 800deb6:	681a      	ldr	r2, [r3, #0]
 800deb8:	687b      	ldr	r3, [r7, #4]
 800deba:	681b      	ldr	r3, [r3, #0]
 800debc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800dec0:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800dec2:	687b      	ldr	r3, [r7, #4]
 800dec4:	69da      	ldr	r2, [r3, #28]
 800dec6:	687b      	ldr	r3, [r7, #4]
 800dec8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800deca:	431a      	orrs	r2, r3
 800decc:	68bb      	ldr	r3, [r7, #8]
 800dece:	431a      	orrs	r2, r3
 800ded0:	687b      	ldr	r3, [r7, #4]
 800ded2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ded4:	ea42 0103 	orr.w	r1, r2, r3
 800ded8:	687b      	ldr	r3, [r7, #4]
 800deda:	68da      	ldr	r2, [r3, #12]
 800dedc:	687b      	ldr	r3, [r7, #4]
 800dede:	681b      	ldr	r3, [r3, #0]
 800dee0:	430a      	orrs	r2, r1
 800dee2:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800dee4:	687b      	ldr	r3, [r7, #4]
 800dee6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800dee8:	687b      	ldr	r3, [r7, #4]
 800deea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800deec:	431a      	orrs	r2, r3
 800deee:	687b      	ldr	r3, [r7, #4]
 800def0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800def2:	431a      	orrs	r2, r3
 800def4:	687b      	ldr	r3, [r7, #4]
 800def6:	699b      	ldr	r3, [r3, #24]
 800def8:	431a      	orrs	r2, r3
 800defa:	687b      	ldr	r3, [r7, #4]
 800defc:	691b      	ldr	r3, [r3, #16]
 800defe:	431a      	orrs	r2, r3
 800df00:	687b      	ldr	r3, [r7, #4]
 800df02:	695b      	ldr	r3, [r3, #20]
 800df04:	431a      	orrs	r2, r3
 800df06:	687b      	ldr	r3, [r7, #4]
 800df08:	6a1b      	ldr	r3, [r3, #32]
 800df0a:	431a      	orrs	r2, r3
 800df0c:	687b      	ldr	r3, [r7, #4]
 800df0e:	685b      	ldr	r3, [r3, #4]
 800df10:	431a      	orrs	r2, r3
 800df12:	687b      	ldr	r3, [r7, #4]
 800df14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800df16:	431a      	orrs	r2, r3
 800df18:	687b      	ldr	r3, [r7, #4]
 800df1a:	689b      	ldr	r3, [r3, #8]
 800df1c:	431a      	orrs	r2, r3
 800df1e:	687b      	ldr	r3, [r7, #4]
 800df20:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800df22:	ea42 0103 	orr.w	r1, r2, r3
 800df26:	687b      	ldr	r3, [r7, #4]
 800df28:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800df2a:	687b      	ldr	r3, [r7, #4]
 800df2c:	681b      	ldr	r3, [r3, #0]
 800df2e:	430a      	orrs	r2, r1
 800df30:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800df32:	687b      	ldr	r3, [r7, #4]
 800df34:	685b      	ldr	r3, [r3, #4]
 800df36:	2b00      	cmp	r3, #0
 800df38:	d113      	bne.n	800df62 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800df3a:	687b      	ldr	r3, [r7, #4]
 800df3c:	681b      	ldr	r3, [r3, #0]
 800df3e:	689b      	ldr	r3, [r3, #8]
 800df40:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 800df44:	687b      	ldr	r3, [r7, #4]
 800df46:	681b      	ldr	r3, [r3, #0]
 800df48:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800df4c:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800df4e:	687b      	ldr	r3, [r7, #4]
 800df50:	681b      	ldr	r3, [r3, #0]
 800df52:	689b      	ldr	r3, [r3, #8]
 800df54:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 800df58:	687b      	ldr	r3, [r7, #4]
 800df5a:	681b      	ldr	r3, [r3, #0]
 800df5c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800df60:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800df62:	687b      	ldr	r3, [r7, #4]
 800df64:	681b      	ldr	r3, [r3, #0]
 800df66:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800df68:	687b      	ldr	r3, [r7, #4]
 800df6a:	681b      	ldr	r3, [r3, #0]
 800df6c:	f022 0201 	bic.w	r2, r2, #1
 800df70:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800df72:	687b      	ldr	r3, [r7, #4]
 800df74:	685b      	ldr	r3, [r3, #4]
 800df76:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800df7a:	2b00      	cmp	r3, #0
 800df7c:	d00a      	beq.n	800df94 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800df7e:	687b      	ldr	r3, [r7, #4]
 800df80:	681b      	ldr	r3, [r3, #0]
 800df82:	68db      	ldr	r3, [r3, #12]
 800df84:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800df88:	687b      	ldr	r3, [r7, #4]
 800df8a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800df8c:	687b      	ldr	r3, [r7, #4]
 800df8e:	681b      	ldr	r3, [r3, #0]
 800df90:	430a      	orrs	r2, r1
 800df92:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800df94:	687b      	ldr	r3, [r7, #4]
 800df96:	2200      	movs	r2, #0
 800df98:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800df9c:	687b      	ldr	r3, [r7, #4]
 800df9e:	2201      	movs	r2, #1
 800dfa0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 800dfa4:	2300      	movs	r3, #0
}
 800dfa6:	4618      	mov	r0, r3
 800dfa8:	3710      	adds	r7, #16
 800dfaa:	46bd      	mov	sp, r7
 800dfac:	bd80      	pop	{r7, pc}
 800dfae:	bf00      	nop
 800dfb0:	40013000 	.word	0x40013000
 800dfb4:	40003800 	.word	0x40003800
 800dfb8:	40003c00 	.word	0x40003c00

0800dfbc <HAL_SPI_MspInit>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 800dfbc:	b480      	push	{r7}
 800dfbe:	b083      	sub	sp, #12
 800dfc0:	af00      	add	r7, sp, #0
 800dfc2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
   */
}
 800dfc4:	bf00      	nop
 800dfc6:	370c      	adds	r7, #12
 800dfc8:	46bd      	mov	sp, r7
 800dfca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfce:	4770      	bx	lr

0800dfd0 <HAL_SPI_TransmitReceive_DMA>:
  * @note   When the CRC feature is enabled the pRxData Length must be Size + 1
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 800dfd0:	b580      	push	{r7, lr}
 800dfd2:	b084      	sub	sp, #16
 800dfd4:	af00      	add	r7, sp, #0
 800dfd6:	60f8      	str	r0, [r7, #12]
 800dfd8:	60b9      	str	r1, [r7, #8]
 800dfda:	607a      	str	r2, [r7, #4]
 800dfdc:	807b      	strh	r3, [r7, #2]
  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  if (hspi->State != HAL_SPI_STATE_READY)
 800dfde:	68fb      	ldr	r3, [r7, #12]
 800dfe0:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800dfe4:	b2db      	uxtb	r3, r3
 800dfe6:	2b01      	cmp	r3, #1
 800dfe8:	d001      	beq.n	800dfee <HAL_SPI_TransmitReceive_DMA+0x1e>
  {
    return HAL_BUSY;
 800dfea:	2302      	movs	r3, #2
 800dfec:	e18a      	b.n	800e304 <HAL_SPI_TransmitReceive_DMA+0x334>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 800dfee:	68bb      	ldr	r3, [r7, #8]
 800dff0:	2b00      	cmp	r3, #0
 800dff2:	d005      	beq.n	800e000 <HAL_SPI_TransmitReceive_DMA+0x30>
 800dff4:	687b      	ldr	r3, [r7, #4]
 800dff6:	2b00      	cmp	r3, #0
 800dff8:	d002      	beq.n	800e000 <HAL_SPI_TransmitReceive_DMA+0x30>
 800dffa:	887b      	ldrh	r3, [r7, #2]
 800dffc:	2b00      	cmp	r3, #0
 800dffe:	d101      	bne.n	800e004 <HAL_SPI_TransmitReceive_DMA+0x34>
  {
    return HAL_ERROR;
 800e000:	2301      	movs	r3, #1
 800e002:	e17f      	b.n	800e304 <HAL_SPI_TransmitReceive_DMA+0x334>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800e004:	68fb      	ldr	r3, [r7, #12]
 800e006:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800e00a:	2b01      	cmp	r3, #1
 800e00c:	d101      	bne.n	800e012 <HAL_SPI_TransmitReceive_DMA+0x42>
 800e00e:	2302      	movs	r3, #2
 800e010:	e178      	b.n	800e304 <HAL_SPI_TransmitReceive_DMA+0x334>
 800e012:	68fb      	ldr	r3, [r7, #12]
 800e014:	2201      	movs	r2, #1
 800e016:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 800e01a:	68fb      	ldr	r3, [r7, #12]
 800e01c:	2205      	movs	r2, #5
 800e01e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800e022:	68fb      	ldr	r3, [r7, #12]
 800e024:	2200      	movs	r2, #0
 800e026:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800e02a:	68fb      	ldr	r3, [r7, #12]
 800e02c:	68ba      	ldr	r2, [r7, #8]
 800e02e:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 800e030:	68fb      	ldr	r3, [r7, #12]
 800e032:	887a      	ldrh	r2, [r7, #2]
 800e034:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 800e038:	68fb      	ldr	r3, [r7, #12]
 800e03a:	887a      	ldrh	r2, [r7, #2]
 800e03c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800e040:	68fb      	ldr	r3, [r7, #12]
 800e042:	687a      	ldr	r2, [r7, #4]
 800e044:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = Size;
 800e046:	68fb      	ldr	r3, [r7, #12]
 800e048:	887a      	ldrh	r2, [r7, #2]
 800e04a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = Size;
 800e04e:	68fb      	ldr	r3, [r7, #12]
 800e050:	887a      	ldrh	r2, [r7, #2]
 800e052:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800e056:	68fb      	ldr	r3, [r7, #12]
 800e058:	2200      	movs	r2, #0
 800e05a:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 800e05c:	68fb      	ldr	r3, [r7, #12]
 800e05e:	2200      	movs	r2, #0
 800e060:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Set Full-Duplex mode */
  SPI_2LINES(hspi);
 800e062:	68fb      	ldr	r3, [r7, #12]
 800e064:	681b      	ldr	r3, [r3, #0]
 800e066:	68da      	ldr	r2, [r3, #12]
 800e068:	68fb      	ldr	r3, [r7, #12]
 800e06a:	681b      	ldr	r3, [r3, #0]
 800e06c:	f422 22c0 	bic.w	r2, r2, #393216	@ 0x60000
 800e070:	60da      	str	r2, [r3, #12]

  /* Reset the Tx/Rx DMA bits */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800e072:	68fb      	ldr	r3, [r7, #12]
 800e074:	681b      	ldr	r3, [r3, #0]
 800e076:	689a      	ldr	r2, [r3, #8]
 800e078:	68fb      	ldr	r3, [r7, #12]
 800e07a:	681b      	ldr	r3, [r3, #0]
 800e07c:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800e080:	609a      	str	r2, [r3, #8]

  /* Packing mode management is enabled by the DMA settings */
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 800e082:	68fb      	ldr	r3, [r7, #12]
 800e084:	68db      	ldr	r3, [r3, #12]
 800e086:	2b0f      	cmp	r3, #15
 800e088:	d905      	bls.n	800e096 <HAL_SPI_TransmitReceive_DMA+0xc6>
 800e08a:	68fb      	ldr	r3, [r7, #12]
 800e08c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800e08e:	699b      	ldr	r3, [r3, #24]
 800e090:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800e094:	d10f      	bne.n	800e0b6 <HAL_SPI_TransmitReceive_DMA+0xe6>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 800e096:	68fb      	ldr	r3, [r7, #12]
 800e098:	68db      	ldr	r3, [r3, #12]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 800e09a:	2b07      	cmp	r3, #7
 800e09c:	d911      	bls.n	800e0c2 <HAL_SPI_TransmitReceive_DMA+0xf2>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 800e09e:	68fb      	ldr	r3, [r7, #12]
 800e0a0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800e0a2:	699b      	ldr	r3, [r3, #24]
 800e0a4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800e0a8:	d00b      	beq.n	800e0c2 <HAL_SPI_TransmitReceive_DMA+0xf2>
                                                     (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))))
 800e0aa:	68fb      	ldr	r3, [r7, #12]
 800e0ac:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800e0ae:	699b      	ldr	r3, [r3, #24]
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 800e0b0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800e0b4:	d005      	beq.n	800e0c2 <HAL_SPI_TransmitReceive_DMA+0xf2>
  {
    /* Restriction the DMA data received is not allowed in this mode */
    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 800e0b6:	68fb      	ldr	r3, [r7, #12]
 800e0b8:	2200      	movs	r2, #0
 800e0ba:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
    return HAL_ERROR;
 800e0be:	2301      	movs	r3, #1
 800e0c0:	e120      	b.n	800e304 <HAL_SPI_TransmitReceive_DMA+0x334>
  }

  /* Adjust XferCount according to DMA alignment / Data size */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800e0c2:	68fb      	ldr	r3, [r7, #12]
 800e0c4:	68db      	ldr	r3, [r3, #12]
 800e0c6:	2b07      	cmp	r3, #7
 800e0c8:	d840      	bhi.n	800e14c <HAL_SPI_TransmitReceive_DMA+0x17c>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800e0ca:	68fb      	ldr	r3, [r7, #12]
 800e0cc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e0ce:	699b      	ldr	r3, [r3, #24]
 800e0d0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800e0d4:	d109      	bne.n	800e0ea <HAL_SPI_TransmitReceive_DMA+0x11a>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 800e0d6:	68fb      	ldr	r3, [r7, #12]
 800e0d8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800e0dc:	b29b      	uxth	r3, r3
 800e0de:	3301      	adds	r3, #1
 800e0e0:	105b      	asrs	r3, r3, #1
 800e0e2:	b29a      	uxth	r2, r3
 800e0e4:	68fb      	ldr	r3, [r7, #12]
 800e0e6:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    }
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800e0ea:	68fb      	ldr	r3, [r7, #12]
 800e0ec:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e0ee:	699b      	ldr	r3, [r3, #24]
 800e0f0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800e0f4:	d109      	bne.n	800e10a <HAL_SPI_TransmitReceive_DMA+0x13a>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 3UL) >> 2UL;
 800e0f6:	68fb      	ldr	r3, [r7, #12]
 800e0f8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800e0fc:	b29b      	uxth	r3, r3
 800e0fe:	3303      	adds	r3, #3
 800e100:	109b      	asrs	r3, r3, #2
 800e102:	b29a      	uxth	r2, r3
 800e104:	68fb      	ldr	r3, [r7, #12]
 800e106:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    }
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800e10a:	68fb      	ldr	r3, [r7, #12]
 800e10c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800e10e:	699b      	ldr	r3, [r3, #24]
 800e110:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800e114:	d109      	bne.n	800e12a <HAL_SPI_TransmitReceive_DMA+0x15a>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 800e116:	68fb      	ldr	r3, [r7, #12]
 800e118:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800e11c:	b29b      	uxth	r3, r3
 800e11e:	3301      	adds	r3, #1
 800e120:	105b      	asrs	r3, r3, #1
 800e122:	b29a      	uxth	r2, r3
 800e124:	68fb      	ldr	r3, [r7, #12]
 800e126:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    }
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800e12a:	68fb      	ldr	r3, [r7, #12]
 800e12c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800e12e:	699b      	ldr	r3, [r3, #24]
 800e130:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800e134:	d12e      	bne.n	800e194 <HAL_SPI_TransmitReceive_DMA+0x1c4>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 3UL) >> 2UL;
 800e136:	68fb      	ldr	r3, [r7, #12]
 800e138:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800e13c:	b29b      	uxth	r3, r3
 800e13e:	3303      	adds	r3, #3
 800e140:	109b      	asrs	r3, r3, #2
 800e142:	b29a      	uxth	r2, r3
 800e144:	68fb      	ldr	r3, [r7, #12]
 800e146:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800e14a:	e023      	b.n	800e194 <HAL_SPI_TransmitReceive_DMA+0x1c4>
    }
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 800e14c:	68fb      	ldr	r3, [r7, #12]
 800e14e:	68db      	ldr	r3, [r3, #12]
 800e150:	2b0f      	cmp	r3, #15
 800e152:	d81f      	bhi.n	800e194 <HAL_SPI_TransmitReceive_DMA+0x1c4>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800e154:	68fb      	ldr	r3, [r7, #12]
 800e156:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e158:	699b      	ldr	r3, [r3, #24]
 800e15a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800e15e:	d109      	bne.n	800e174 <HAL_SPI_TransmitReceive_DMA+0x1a4>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 800e160:	68fb      	ldr	r3, [r7, #12]
 800e162:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800e166:	b29b      	uxth	r3, r3
 800e168:	3301      	adds	r3, #1
 800e16a:	105b      	asrs	r3, r3, #1
 800e16c:	b29a      	uxth	r2, r3
 800e16e:	68fb      	ldr	r3, [r7, #12]
 800e170:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    }
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800e174:	68fb      	ldr	r3, [r7, #12]
 800e176:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800e178:	699b      	ldr	r3, [r3, #24]
 800e17a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800e17e:	d109      	bne.n	800e194 <HAL_SPI_TransmitReceive_DMA+0x1c4>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 800e180:	68fb      	ldr	r3, [r7, #12]
 800e182:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800e186:	b29b      	uxth	r3, r3
 800e188:	3301      	adds	r3, #1
 800e18a:	105b      	asrs	r3, r3, #1
 800e18c:	b29a      	uxth	r2, r3
 800e18e:	68fb      	ldr	r3, [r7, #12]
 800e190:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  {
    /* Adjustment done */
  }

  /* Set the SPI Tx/Rx DMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 800e194:	68fb      	ldr	r3, [r7, #12]
 800e196:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800e198:	4a5c      	ldr	r2, [pc, #368]	@ (800e30c <HAL_SPI_TransmitReceive_DMA+0x33c>)
 800e19a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 800e19c:	68fb      	ldr	r3, [r7, #12]
 800e19e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800e1a0:	4a5b      	ldr	r2, [pc, #364]	@ (800e310 <HAL_SPI_TransmitReceive_DMA+0x340>)
 800e1a2:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800e1a4:	68fb      	ldr	r3, [r7, #12]
 800e1a6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800e1a8:	4a5a      	ldr	r2, [pc, #360]	@ (800e314 <HAL_SPI_TransmitReceive_DMA+0x344>)
 800e1aa:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 800e1ac:	68fb      	ldr	r3, [r7, #12]
 800e1ae:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800e1b0:	2200      	movs	r2, #0
 800e1b2:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 800e1b4:	68fb      	ldr	r3, [r7, #12]
 800e1b6:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 800e1b8:	68fb      	ldr	r3, [r7, #12]
 800e1ba:	681b      	ldr	r3, [r3, #0]
 800e1bc:	3330      	adds	r3, #48	@ 0x30
 800e1be:	4619      	mov	r1, r3
 800e1c0:	68fb      	ldr	r3, [r7, #12]
 800e1c2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e1c4:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 800e1c6:	68fb      	ldr	r3, [r7, #12]
 800e1c8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800e1cc:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 800e1ce:	f7f8 f9f9 	bl	80065c4 <HAL_DMA_Start_IT>
 800e1d2:	4603      	mov	r3, r0
 800e1d4:	2b00      	cmp	r3, #0
 800e1d6:	d011      	beq.n	800e1fc <HAL_SPI_TransmitReceive_DMA+0x22c>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800e1d8:	68fb      	ldr	r3, [r7, #12]
 800e1da:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e1de:	f043 0210 	orr.w	r2, r3, #16
 800e1e2:	68fb      	ldr	r3, [r7, #12]
 800e1e4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    hspi->State = HAL_SPI_STATE_READY;
 800e1e8:	68fb      	ldr	r3, [r7, #12]
 800e1ea:	2201      	movs	r2, #1
 800e1ec:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 800e1f0:	68fb      	ldr	r3, [r7, #12]
 800e1f2:	2200      	movs	r2, #0
 800e1f4:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    return HAL_ERROR;
 800e1f8:	2301      	movs	r3, #1
 800e1fa:	e083      	b.n	800e304 <HAL_SPI_TransmitReceive_DMA+0x334>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 800e1fc:	68fb      	ldr	r3, [r7, #12]
 800e1fe:	681b      	ldr	r3, [r3, #0]
 800e200:	689a      	ldr	r2, [r3, #8]
 800e202:	68fb      	ldr	r3, [r7, #12]
 800e204:	681b      	ldr	r3, [r3, #0]
 800e206:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800e20a:	609a      	str	r2, [r3, #8]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 800e20c:	68fb      	ldr	r3, [r7, #12]
 800e20e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e210:	2200      	movs	r2, #0
 800e212:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 800e214:	68fb      	ldr	r3, [r7, #12]
 800e216:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e218:	2200      	movs	r2, #0
 800e21a:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi->hdmatx->XferAbortCallback    = NULL;
 800e21c:	68fb      	ldr	r3, [r7, #12]
 800e21e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e220:	2200      	movs	r2, #0
 800e222:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback    = SPI_DMAError;
 800e224:	68fb      	ldr	r3, [r7, #12]
 800e226:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e228:	4a3a      	ldr	r2, [pc, #232]	@ (800e314 <HAL_SPI_TransmitReceive_DMA+0x344>)
 800e22a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 800e22c:	68fb      	ldr	r3, [r7, #12]
 800e22e:	6f98      	ldr	r0, [r3, #120]	@ 0x78
 800e230:	68fb      	ldr	r3, [r7, #12]
 800e232:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800e234:	4619      	mov	r1, r3
 800e236:	68fb      	ldr	r3, [r7, #12]
 800e238:	681b      	ldr	r3, [r3, #0]
 800e23a:	3320      	adds	r3, #32
 800e23c:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800e23e:	68fb      	ldr	r3, [r7, #12]
 800e240:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800e244:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 800e246:	f7f8 f9bd 	bl	80065c4 <HAL_DMA_Start_IT>
 800e24a:	4603      	mov	r3, r0
 800e24c:	2b00      	cmp	r3, #0
 800e24e:	d016      	beq.n	800e27e <HAL_SPI_TransmitReceive_DMA+0x2ae>
  {
    /* Abort Rx DMA Channel already started */
    (void)HAL_DMA_Abort(hspi->hdmarx);
 800e250:	68fb      	ldr	r3, [r7, #12]
 800e252:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800e254:	4618      	mov	r0, r3
 800e256:	f7f8 fc1f 	bl	8006a98 <HAL_DMA_Abort>

    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800e25a:	68fb      	ldr	r3, [r7, #12]
 800e25c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e260:	f043 0210 	orr.w	r2, r3, #16
 800e264:	68fb      	ldr	r3, [r7, #12]
 800e266:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    hspi->State = HAL_SPI_STATE_READY;
 800e26a:	68fb      	ldr	r3, [r7, #12]
 800e26c:	2201      	movs	r2, #1
 800e26e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 800e272:	68fb      	ldr	r3, [r7, #12]
 800e274:	2200      	movs	r2, #0
 800e276:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    return HAL_ERROR;
 800e27a:	2301      	movs	r3, #1
 800e27c:	e042      	b.n	800e304 <HAL_SPI_TransmitReceive_DMA+0x334>
  }

  if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 800e27e:	68fb      	ldr	r3, [r7, #12]
 800e280:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e282:	69db      	ldr	r3, [r3, #28]
 800e284:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e288:	d108      	bne.n	800e29c <HAL_SPI_TransmitReceive_DMA+0x2cc>
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 800e28a:	68fb      	ldr	r3, [r7, #12]
 800e28c:	681b      	ldr	r3, [r3, #0]
 800e28e:	6859      	ldr	r1, [r3, #4]
 800e290:	68fb      	ldr	r3, [r7, #12]
 800e292:	681a      	ldr	r2, [r3, #0]
 800e294:	4b20      	ldr	r3, [pc, #128]	@ (800e318 <HAL_SPI_TransmitReceive_DMA+0x348>)
 800e296:	400b      	ands	r3, r1
 800e298:	6053      	str	r3, [r2, #4]
 800e29a:	e009      	b.n	800e2b0 <HAL_SPI_TransmitReceive_DMA+0x2e0>
  }
  else
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800e29c:	68fb      	ldr	r3, [r7, #12]
 800e29e:	681b      	ldr	r3, [r3, #0]
 800e2a0:	685a      	ldr	r2, [r3, #4]
 800e2a2:	4b1d      	ldr	r3, [pc, #116]	@ (800e318 <HAL_SPI_TransmitReceive_DMA+0x348>)
 800e2a4:	4013      	ands	r3, r2
 800e2a6:	8879      	ldrh	r1, [r7, #2]
 800e2a8:	68fa      	ldr	r2, [r7, #12]
 800e2aa:	6812      	ldr	r2, [r2, #0]
 800e2ac:	430b      	orrs	r3, r1
 800e2ae:	6053      	str	r3, [r2, #4]
  }

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 800e2b0:	68fb      	ldr	r3, [r7, #12]
 800e2b2:	681b      	ldr	r3, [r3, #0]
 800e2b4:	689a      	ldr	r2, [r3, #8]
 800e2b6:	68fb      	ldr	r3, [r7, #12]
 800e2b8:	681b      	ldr	r3, [r3, #0]
 800e2ba:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800e2be:	609a      	str	r2, [r3, #8]

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_OVR | SPI_IT_UDR | SPI_IT_FRE | SPI_IT_MODF));
 800e2c0:	68fb      	ldr	r3, [r7, #12]
 800e2c2:	681b      	ldr	r3, [r3, #0]
 800e2c4:	691a      	ldr	r2, [r3, #16]
 800e2c6:	68fb      	ldr	r3, [r7, #12]
 800e2c8:	681b      	ldr	r3, [r3, #0]
 800e2ca:	f442 7258 	orr.w	r2, r2, #864	@ 0x360
 800e2ce:	611a      	str	r2, [r3, #16]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800e2d0:	68fb      	ldr	r3, [r7, #12]
 800e2d2:	681b      	ldr	r3, [r3, #0]
 800e2d4:	681a      	ldr	r2, [r3, #0]
 800e2d6:	68fb      	ldr	r3, [r7, #12]
 800e2d8:	681b      	ldr	r3, [r3, #0]
 800e2da:	f042 0201 	orr.w	r2, r2, #1
 800e2de:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800e2e0:	68fb      	ldr	r3, [r7, #12]
 800e2e2:	685b      	ldr	r3, [r3, #4]
 800e2e4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800e2e8:	d107      	bne.n	800e2fa <HAL_SPI_TransmitReceive_DMA+0x32a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800e2ea:	68fb      	ldr	r3, [r7, #12]
 800e2ec:	681b      	ldr	r3, [r3, #0]
 800e2ee:	681a      	ldr	r2, [r3, #0]
 800e2f0:	68fb      	ldr	r3, [r7, #12]
 800e2f2:	681b      	ldr	r3, [r3, #0]
 800e2f4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800e2f8:	601a      	str	r2, [r3, #0]
  }

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800e2fa:	68fb      	ldr	r3, [r7, #12]
 800e2fc:	2200      	movs	r2, #0
 800e2fe:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 800e302:	2300      	movs	r3, #0
}
 800e304:	4618      	mov	r0, r3
 800e306:	3710      	adds	r7, #16
 800e308:	46bd      	mov	sp, r7
 800e30a:	bd80      	pop	{r7, pc}
 800e30c:	0800e39f 	.word	0x0800e39f
 800e310:	0800e359 	.word	0x0800e359
 800e314:	0800e3bb 	.word	0x0800e3bb
 800e318:	ffff0000 	.word	0xffff0000

0800e31c <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800e31c:	b480      	push	{r7}
 800e31e:	b083      	sub	sp, #12
 800e320:	af00      	add	r7, sp, #0
 800e322:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 800e324:	bf00      	nop
 800e326:	370c      	adds	r7, #12
 800e328:	46bd      	mov	sp, r7
 800e32a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e32e:	4770      	bx	lr

0800e330 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800e330:	b480      	push	{r7}
 800e332:	b083      	sub	sp, #12
 800e334:	af00      	add	r7, sp, #0
 800e336:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 800e338:	bf00      	nop
 800e33a:	370c      	adds	r7, #12
 800e33c:	46bd      	mov	sp, r7
 800e33e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e342:	4770      	bx	lr

0800e344 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800e344:	b480      	push	{r7}
 800e346:	b083      	sub	sp, #12
 800e348:	af00      	add	r7, sp, #0
 800e34a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800e34c:	bf00      	nop
 800e34e:	370c      	adds	r7, #12
 800e350:	46bd      	mov	sp, r7
 800e352:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e356:	4770      	bx	lr

0800e358 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800e358:	b580      	push	{r7, lr}
 800e35a:	b084      	sub	sp, #16
 800e35c:	af00      	add	r7, sp, #0
 800e35e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800e360:	687b      	ldr	r3, [r7, #4]
 800e362:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e364:	60fb      	str	r3, [r7, #12]

  if (hspi->State != HAL_SPI_STATE_ABORT)
 800e366:	68fb      	ldr	r3, [r7, #12]
 800e368:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800e36c:	b2db      	uxtb	r3, r3
 800e36e:	2b07      	cmp	r3, #7
 800e370:	d011      	beq.n	800e396 <SPI_DMATransmitReceiveCplt+0x3e>
  {
    if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 800e372:	68fb      	ldr	r3, [r7, #12]
 800e374:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e376:	69db      	ldr	r3, [r3, #28]
 800e378:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e37c:	d103      	bne.n	800e386 <SPI_DMATransmitReceiveCplt+0x2e>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->TxRxCpltCallback(hspi);
#else
      HAL_SPI_TxRxCpltCallback(hspi);
 800e37e:	68f8      	ldr	r0, [r7, #12]
 800e380:	f7ff ffcc 	bl	800e31c <HAL_SPI_TxRxCpltCallback>
    {
      /* Enable EOT interrupt */
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
    }
  }
}
 800e384:	e007      	b.n	800e396 <SPI_DMATransmitReceiveCplt+0x3e>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 800e386:	68fb      	ldr	r3, [r7, #12]
 800e388:	681b      	ldr	r3, [r3, #0]
 800e38a:	691a      	ldr	r2, [r3, #16]
 800e38c:	68fb      	ldr	r3, [r7, #12]
 800e38e:	681b      	ldr	r3, [r3, #0]
 800e390:	f042 0208 	orr.w	r2, r2, #8
 800e394:	611a      	str	r2, [r3, #16]
}
 800e396:	bf00      	nop
 800e398:	3710      	adds	r7, #16
 800e39a:	46bd      	mov	sp, r7
 800e39c:	bd80      	pop	{r7, pc}

0800e39e <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma) /* Derogation MISRAC2012-Rule-8.13 */
{
 800e39e:	b580      	push	{r7, lr}
 800e3a0:	b084      	sub	sp, #16
 800e3a2:	af00      	add	r7, sp, #0
 800e3a4:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)
 800e3a6:	687b      	ldr	r3, [r7, #4]
 800e3a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e3aa:	60fb      	str	r3, [r7, #12]
                            ((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-8.13 */

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 800e3ac:	68f8      	ldr	r0, [r7, #12]
 800e3ae:	f7ff ffbf 	bl	800e330 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800e3b2:	bf00      	nop
 800e3b4:	3710      	adds	r7, #16
 800e3b6:	46bd      	mov	sp, r7
 800e3b8:	bd80      	pop	{r7, pc}

0800e3ba <SPI_DMAError>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800e3ba:	b580      	push	{r7, lr}
 800e3bc:	b084      	sub	sp, #16
 800e3be:	af00      	add	r7, sp, #0
 800e3c0:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800e3c2:	687b      	ldr	r3, [r7, #4]
 800e3c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e3c6:	60fb      	str	r3, [r7, #12]

  /* if DMA error is FIFO error ignore it */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800e3c8:	6878      	ldr	r0, [r7, #4]
 800e3ca:	f7f9 fdad 	bl	8007f28 <HAL_DMA_GetError>
 800e3ce:	4603      	mov	r3, r0
 800e3d0:	2b02      	cmp	r3, #2
 800e3d2:	d011      	beq.n	800e3f8 <SPI_DMAError+0x3e>
  {
    /* Call SPI standard close procedure */
    SPI_CloseTransfer(hspi);
 800e3d4:	68f8      	ldr	r0, [r7, #12]
 800e3d6:	f000 f813 	bl	800e400 <SPI_CloseTransfer>

    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800e3da:	68fb      	ldr	r3, [r7, #12]
 800e3dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e3e0:	f043 0210 	orr.w	r2, r3, #16
 800e3e4:	68fb      	ldr	r3, [r7, #12]
 800e3e6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    hspi->State = HAL_SPI_STATE_READY;
 800e3ea:	68fb      	ldr	r3, [r7, #12]
 800e3ec:	2201      	movs	r2, #1
 800e3ee:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 800e3f2:	68f8      	ldr	r0, [r7, #12]
 800e3f4:	f7ff ffa6 	bl	800e344 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 800e3f8:	bf00      	nop
 800e3fa:	3710      	adds	r7, #16
 800e3fc:	46bd      	mov	sp, r7
 800e3fe:	bd80      	pop	{r7, pc}

0800e400 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800e400:	b480      	push	{r7}
 800e402:	b085      	sub	sp, #20
 800e404:	af00      	add	r7, sp, #0
 800e406:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800e408:	687b      	ldr	r3, [r7, #4]
 800e40a:	681b      	ldr	r3, [r3, #0]
 800e40c:	695b      	ldr	r3, [r3, #20]
 800e40e:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800e410:	687b      	ldr	r3, [r7, #4]
 800e412:	681b      	ldr	r3, [r3, #0]
 800e414:	699a      	ldr	r2, [r3, #24]
 800e416:	687b      	ldr	r3, [r7, #4]
 800e418:	681b      	ldr	r3, [r3, #0]
 800e41a:	f042 0208 	orr.w	r2, r2, #8
 800e41e:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800e420:	687b      	ldr	r3, [r7, #4]
 800e422:	681b      	ldr	r3, [r3, #0]
 800e424:	699a      	ldr	r2, [r3, #24]
 800e426:	687b      	ldr	r3, [r7, #4]
 800e428:	681b      	ldr	r3, [r3, #0]
 800e42a:	f042 0210 	orr.w	r2, r2, #16
 800e42e:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800e430:	687b      	ldr	r3, [r7, #4]
 800e432:	681b      	ldr	r3, [r3, #0]
 800e434:	681a      	ldr	r2, [r3, #0]
 800e436:	687b      	ldr	r3, [r7, #4]
 800e438:	681b      	ldr	r3, [r3, #0]
 800e43a:	f022 0201 	bic.w	r2, r2, #1
 800e43e:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800e440:	687b      	ldr	r3, [r7, #4]
 800e442:	681b      	ldr	r3, [r3, #0]
 800e444:	6919      	ldr	r1, [r3, #16]
 800e446:	687b      	ldr	r3, [r7, #4]
 800e448:	681a      	ldr	r2, [r3, #0]
 800e44a:	4b3c      	ldr	r3, [pc, #240]	@ (800e53c <SPI_CloseTransfer+0x13c>)
 800e44c:	400b      	ands	r3, r1
 800e44e:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800e450:	687b      	ldr	r3, [r7, #4]
 800e452:	681b      	ldr	r3, [r3, #0]
 800e454:	689a      	ldr	r2, [r3, #8]
 800e456:	687b      	ldr	r3, [r7, #4]
 800e458:	681b      	ldr	r3, [r3, #0]
 800e45a:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800e45e:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800e460:	687b      	ldr	r3, [r7, #4]
 800e462:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800e466:	b2db      	uxtb	r3, r3
 800e468:	2b04      	cmp	r3, #4
 800e46a:	d014      	beq.n	800e496 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800e46c:	68fb      	ldr	r3, [r7, #12]
 800e46e:	f003 0320 	and.w	r3, r3, #32
 800e472:	2b00      	cmp	r3, #0
 800e474:	d00f      	beq.n	800e496 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800e476:	687b      	ldr	r3, [r7, #4]
 800e478:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e47c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800e480:	687b      	ldr	r3, [r7, #4]
 800e482:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800e486:	687b      	ldr	r3, [r7, #4]
 800e488:	681b      	ldr	r3, [r3, #0]
 800e48a:	699a      	ldr	r2, [r3, #24]
 800e48c:	687b      	ldr	r3, [r7, #4]
 800e48e:	681b      	ldr	r3, [r3, #0]
 800e490:	f042 0220 	orr.w	r2, r2, #32
 800e494:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800e496:	687b      	ldr	r3, [r7, #4]
 800e498:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800e49c:	b2db      	uxtb	r3, r3
 800e49e:	2b03      	cmp	r3, #3
 800e4a0:	d014      	beq.n	800e4cc <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800e4a2:	68fb      	ldr	r3, [r7, #12]
 800e4a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e4a8:	2b00      	cmp	r3, #0
 800e4aa:	d00f      	beq.n	800e4cc <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800e4ac:	687b      	ldr	r3, [r7, #4]
 800e4ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e4b2:	f043 0204 	orr.w	r2, r3, #4
 800e4b6:	687b      	ldr	r3, [r7, #4]
 800e4b8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800e4bc:	687b      	ldr	r3, [r7, #4]
 800e4be:	681b      	ldr	r3, [r3, #0]
 800e4c0:	699a      	ldr	r2, [r3, #24]
 800e4c2:	687b      	ldr	r3, [r7, #4]
 800e4c4:	681b      	ldr	r3, [r3, #0]
 800e4c6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800e4ca:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800e4cc:	68fb      	ldr	r3, [r7, #12]
 800e4ce:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800e4d2:	2b00      	cmp	r3, #0
 800e4d4:	d00f      	beq.n	800e4f6 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800e4d6:	687b      	ldr	r3, [r7, #4]
 800e4d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e4dc:	f043 0201 	orr.w	r2, r3, #1
 800e4e0:	687b      	ldr	r3, [r7, #4]
 800e4e2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800e4e6:	687b      	ldr	r3, [r7, #4]
 800e4e8:	681b      	ldr	r3, [r3, #0]
 800e4ea:	699a      	ldr	r2, [r3, #24]
 800e4ec:	687b      	ldr	r3, [r7, #4]
 800e4ee:	681b      	ldr	r3, [r3, #0]
 800e4f0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800e4f4:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800e4f6:	68fb      	ldr	r3, [r7, #12]
 800e4f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e4fc:	2b00      	cmp	r3, #0
 800e4fe:	d00f      	beq.n	800e520 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800e500:	687b      	ldr	r3, [r7, #4]
 800e502:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e506:	f043 0208 	orr.w	r2, r3, #8
 800e50a:	687b      	ldr	r3, [r7, #4]
 800e50c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800e510:	687b      	ldr	r3, [r7, #4]
 800e512:	681b      	ldr	r3, [r3, #0]
 800e514:	699a      	ldr	r2, [r3, #24]
 800e516:	687b      	ldr	r3, [r7, #4]
 800e518:	681b      	ldr	r3, [r3, #0]
 800e51a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800e51e:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800e520:	687b      	ldr	r3, [r7, #4]
 800e522:	2200      	movs	r2, #0
 800e524:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800e528:	687b      	ldr	r3, [r7, #4]
 800e52a:	2200      	movs	r2, #0
 800e52c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 800e530:	bf00      	nop
 800e532:	3714      	adds	r7, #20
 800e534:	46bd      	mov	sp, r7
 800e536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e53a:	4770      	bx	lr
 800e53c:	fffffc90 	.word	0xfffffc90

0800e540 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800e540:	b480      	push	{r7}
 800e542:	b085      	sub	sp, #20
 800e544:	af00      	add	r7, sp, #0
 800e546:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800e548:	687b      	ldr	r3, [r7, #4]
 800e54a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e54c:	095b      	lsrs	r3, r3, #5
 800e54e:	3301      	adds	r3, #1
 800e550:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800e552:	687b      	ldr	r3, [r7, #4]
 800e554:	68db      	ldr	r3, [r3, #12]
 800e556:	3301      	adds	r3, #1
 800e558:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800e55a:	68bb      	ldr	r3, [r7, #8]
 800e55c:	3307      	adds	r3, #7
 800e55e:	08db      	lsrs	r3, r3, #3
 800e560:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800e562:	68bb      	ldr	r3, [r7, #8]
 800e564:	68fa      	ldr	r2, [r7, #12]
 800e566:	fb02 f303 	mul.w	r3, r2, r3
}
 800e56a:	4618      	mov	r0, r3
 800e56c:	3714      	adds	r7, #20
 800e56e:	46bd      	mov	sp, r7
 800e570:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e574:	4770      	bx	lr

0800e576 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800e576:	b580      	push	{r7, lr}
 800e578:	b082      	sub	sp, #8
 800e57a:	af00      	add	r7, sp, #0
 800e57c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800e57e:	687b      	ldr	r3, [r7, #4]
 800e580:	2b00      	cmp	r3, #0
 800e582:	d101      	bne.n	800e588 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800e584:	2301      	movs	r3, #1
 800e586:	e042      	b.n	800e60e <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800e588:	687b      	ldr	r3, [r7, #4]
 800e58a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e58e:	2b00      	cmp	r3, #0
 800e590:	d106      	bne.n	800e5a0 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800e592:	687b      	ldr	r3, [r7, #4]
 800e594:	2200      	movs	r2, #0
 800e596:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800e59a:	6878      	ldr	r0, [r7, #4]
 800e59c:	f7f6 f878 	bl	8004690 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800e5a0:	687b      	ldr	r3, [r7, #4]
 800e5a2:	2224      	movs	r2, #36	@ 0x24
 800e5a4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800e5a8:	687b      	ldr	r3, [r7, #4]
 800e5aa:	681b      	ldr	r3, [r3, #0]
 800e5ac:	681a      	ldr	r2, [r3, #0]
 800e5ae:	687b      	ldr	r3, [r7, #4]
 800e5b0:	681b      	ldr	r3, [r3, #0]
 800e5b2:	f022 0201 	bic.w	r2, r2, #1
 800e5b6:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800e5b8:	687b      	ldr	r3, [r7, #4]
 800e5ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e5bc:	2b00      	cmp	r3, #0
 800e5be:	d002      	beq.n	800e5c6 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800e5c0:	6878      	ldr	r0, [r7, #4]
 800e5c2:	f000 fe1f 	bl	800f204 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800e5c6:	6878      	ldr	r0, [r7, #4]
 800e5c8:	f000 f8b4 	bl	800e734 <UART_SetConfig>
 800e5cc:	4603      	mov	r3, r0
 800e5ce:	2b01      	cmp	r3, #1
 800e5d0:	d101      	bne.n	800e5d6 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800e5d2:	2301      	movs	r3, #1
 800e5d4:	e01b      	b.n	800e60e <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800e5d6:	687b      	ldr	r3, [r7, #4]
 800e5d8:	681b      	ldr	r3, [r3, #0]
 800e5da:	685a      	ldr	r2, [r3, #4]
 800e5dc:	687b      	ldr	r3, [r7, #4]
 800e5de:	681b      	ldr	r3, [r3, #0]
 800e5e0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800e5e4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800e5e6:	687b      	ldr	r3, [r7, #4]
 800e5e8:	681b      	ldr	r3, [r3, #0]
 800e5ea:	689a      	ldr	r2, [r3, #8]
 800e5ec:	687b      	ldr	r3, [r7, #4]
 800e5ee:	681b      	ldr	r3, [r3, #0]
 800e5f0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800e5f4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800e5f6:	687b      	ldr	r3, [r7, #4]
 800e5f8:	681b      	ldr	r3, [r3, #0]
 800e5fa:	681a      	ldr	r2, [r3, #0]
 800e5fc:	687b      	ldr	r3, [r7, #4]
 800e5fe:	681b      	ldr	r3, [r3, #0]
 800e600:	f042 0201 	orr.w	r2, r2, #1
 800e604:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800e606:	6878      	ldr	r0, [r7, #4]
 800e608:	f000 fe9e 	bl	800f348 <UART_CheckIdleState>
 800e60c:	4603      	mov	r3, r0
}
 800e60e:	4618      	mov	r0, r3
 800e610:	3708      	adds	r7, #8
 800e612:	46bd      	mov	sp, r7
 800e614:	bd80      	pop	{r7, pc}

0800e616 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e616:	b580      	push	{r7, lr}
 800e618:	b08a      	sub	sp, #40	@ 0x28
 800e61a:	af02      	add	r7, sp, #8
 800e61c:	60f8      	str	r0, [r7, #12]
 800e61e:	60b9      	str	r1, [r7, #8]
 800e620:	603b      	str	r3, [r7, #0]
 800e622:	4613      	mov	r3, r2
 800e624:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800e626:	68fb      	ldr	r3, [r7, #12]
 800e628:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e62c:	2b20      	cmp	r3, #32
 800e62e:	d17b      	bne.n	800e728 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800e630:	68bb      	ldr	r3, [r7, #8]
 800e632:	2b00      	cmp	r3, #0
 800e634:	d002      	beq.n	800e63c <HAL_UART_Transmit+0x26>
 800e636:	88fb      	ldrh	r3, [r7, #6]
 800e638:	2b00      	cmp	r3, #0
 800e63a:	d101      	bne.n	800e640 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800e63c:	2301      	movs	r3, #1
 800e63e:	e074      	b.n	800e72a <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e640:	68fb      	ldr	r3, [r7, #12]
 800e642:	2200      	movs	r2, #0
 800e644:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800e648:	68fb      	ldr	r3, [r7, #12]
 800e64a:	2221      	movs	r2, #33	@ 0x21
 800e64c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800e650:	f7f7 fa7e 	bl	8005b50 <HAL_GetTick>
 800e654:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800e656:	68fb      	ldr	r3, [r7, #12]
 800e658:	88fa      	ldrh	r2, [r7, #6]
 800e65a:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800e65e:	68fb      	ldr	r3, [r7, #12]
 800e660:	88fa      	ldrh	r2, [r7, #6]
 800e662:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e666:	68fb      	ldr	r3, [r7, #12]
 800e668:	689b      	ldr	r3, [r3, #8]
 800e66a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e66e:	d108      	bne.n	800e682 <HAL_UART_Transmit+0x6c>
 800e670:	68fb      	ldr	r3, [r7, #12]
 800e672:	691b      	ldr	r3, [r3, #16]
 800e674:	2b00      	cmp	r3, #0
 800e676:	d104      	bne.n	800e682 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800e678:	2300      	movs	r3, #0
 800e67a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800e67c:	68bb      	ldr	r3, [r7, #8]
 800e67e:	61bb      	str	r3, [r7, #24]
 800e680:	e003      	b.n	800e68a <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800e682:	68bb      	ldr	r3, [r7, #8]
 800e684:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800e686:	2300      	movs	r3, #0
 800e688:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800e68a:	e030      	b.n	800e6ee <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800e68c:	683b      	ldr	r3, [r7, #0]
 800e68e:	9300      	str	r3, [sp, #0]
 800e690:	697b      	ldr	r3, [r7, #20]
 800e692:	2200      	movs	r2, #0
 800e694:	2180      	movs	r1, #128	@ 0x80
 800e696:	68f8      	ldr	r0, [r7, #12]
 800e698:	f000 ff00 	bl	800f49c <UART_WaitOnFlagUntilTimeout>
 800e69c:	4603      	mov	r3, r0
 800e69e:	2b00      	cmp	r3, #0
 800e6a0:	d005      	beq.n	800e6ae <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800e6a2:	68fb      	ldr	r3, [r7, #12]
 800e6a4:	2220      	movs	r2, #32
 800e6a6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800e6aa:	2303      	movs	r3, #3
 800e6ac:	e03d      	b.n	800e72a <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800e6ae:	69fb      	ldr	r3, [r7, #28]
 800e6b0:	2b00      	cmp	r3, #0
 800e6b2:	d10b      	bne.n	800e6cc <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800e6b4:	69bb      	ldr	r3, [r7, #24]
 800e6b6:	881b      	ldrh	r3, [r3, #0]
 800e6b8:	461a      	mov	r2, r3
 800e6ba:	68fb      	ldr	r3, [r7, #12]
 800e6bc:	681b      	ldr	r3, [r3, #0]
 800e6be:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800e6c2:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800e6c4:	69bb      	ldr	r3, [r7, #24]
 800e6c6:	3302      	adds	r3, #2
 800e6c8:	61bb      	str	r3, [r7, #24]
 800e6ca:	e007      	b.n	800e6dc <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800e6cc:	69fb      	ldr	r3, [r7, #28]
 800e6ce:	781a      	ldrb	r2, [r3, #0]
 800e6d0:	68fb      	ldr	r3, [r7, #12]
 800e6d2:	681b      	ldr	r3, [r3, #0]
 800e6d4:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800e6d6:	69fb      	ldr	r3, [r7, #28]
 800e6d8:	3301      	adds	r3, #1
 800e6da:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800e6dc:	68fb      	ldr	r3, [r7, #12]
 800e6de:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800e6e2:	b29b      	uxth	r3, r3
 800e6e4:	3b01      	subs	r3, #1
 800e6e6:	b29a      	uxth	r2, r3
 800e6e8:	68fb      	ldr	r3, [r7, #12]
 800e6ea:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800e6ee:	68fb      	ldr	r3, [r7, #12]
 800e6f0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800e6f4:	b29b      	uxth	r3, r3
 800e6f6:	2b00      	cmp	r3, #0
 800e6f8:	d1c8      	bne.n	800e68c <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800e6fa:	683b      	ldr	r3, [r7, #0]
 800e6fc:	9300      	str	r3, [sp, #0]
 800e6fe:	697b      	ldr	r3, [r7, #20]
 800e700:	2200      	movs	r2, #0
 800e702:	2140      	movs	r1, #64	@ 0x40
 800e704:	68f8      	ldr	r0, [r7, #12]
 800e706:	f000 fec9 	bl	800f49c <UART_WaitOnFlagUntilTimeout>
 800e70a:	4603      	mov	r3, r0
 800e70c:	2b00      	cmp	r3, #0
 800e70e:	d005      	beq.n	800e71c <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800e710:	68fb      	ldr	r3, [r7, #12]
 800e712:	2220      	movs	r2, #32
 800e714:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800e718:	2303      	movs	r3, #3
 800e71a:	e006      	b.n	800e72a <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800e71c:	68fb      	ldr	r3, [r7, #12]
 800e71e:	2220      	movs	r2, #32
 800e720:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800e724:	2300      	movs	r3, #0
 800e726:	e000      	b.n	800e72a <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800e728:	2302      	movs	r3, #2
  }
}
 800e72a:	4618      	mov	r0, r3
 800e72c:	3720      	adds	r7, #32
 800e72e:	46bd      	mov	sp, r7
 800e730:	bd80      	pop	{r7, pc}
	...

0800e734 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800e734:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800e738:	b092      	sub	sp, #72	@ 0x48
 800e73a:	af00      	add	r7, sp, #0
 800e73c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800e73e:	2300      	movs	r3, #0
 800e740:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800e744:	697b      	ldr	r3, [r7, #20]
 800e746:	689a      	ldr	r2, [r3, #8]
 800e748:	697b      	ldr	r3, [r7, #20]
 800e74a:	691b      	ldr	r3, [r3, #16]
 800e74c:	431a      	orrs	r2, r3
 800e74e:	697b      	ldr	r3, [r7, #20]
 800e750:	695b      	ldr	r3, [r3, #20]
 800e752:	431a      	orrs	r2, r3
 800e754:	697b      	ldr	r3, [r7, #20]
 800e756:	69db      	ldr	r3, [r3, #28]
 800e758:	4313      	orrs	r3, r2
 800e75a:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800e75c:	697b      	ldr	r3, [r7, #20]
 800e75e:	681b      	ldr	r3, [r3, #0]
 800e760:	681a      	ldr	r2, [r3, #0]
 800e762:	4bbe      	ldr	r3, [pc, #760]	@ (800ea5c <UART_SetConfig+0x328>)
 800e764:	4013      	ands	r3, r2
 800e766:	697a      	ldr	r2, [r7, #20]
 800e768:	6812      	ldr	r2, [r2, #0]
 800e76a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800e76c:	430b      	orrs	r3, r1
 800e76e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800e770:	697b      	ldr	r3, [r7, #20]
 800e772:	681b      	ldr	r3, [r3, #0]
 800e774:	685b      	ldr	r3, [r3, #4]
 800e776:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800e77a:	697b      	ldr	r3, [r7, #20]
 800e77c:	68da      	ldr	r2, [r3, #12]
 800e77e:	697b      	ldr	r3, [r7, #20]
 800e780:	681b      	ldr	r3, [r3, #0]
 800e782:	430a      	orrs	r2, r1
 800e784:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800e786:	697b      	ldr	r3, [r7, #20]
 800e788:	699b      	ldr	r3, [r3, #24]
 800e78a:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800e78c:	697b      	ldr	r3, [r7, #20]
 800e78e:	681b      	ldr	r3, [r3, #0]
 800e790:	4ab3      	ldr	r2, [pc, #716]	@ (800ea60 <UART_SetConfig+0x32c>)
 800e792:	4293      	cmp	r3, r2
 800e794:	d004      	beq.n	800e7a0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800e796:	697b      	ldr	r3, [r7, #20]
 800e798:	6a1b      	ldr	r3, [r3, #32]
 800e79a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e79c:	4313      	orrs	r3, r2
 800e79e:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800e7a0:	697b      	ldr	r3, [r7, #20]
 800e7a2:	681b      	ldr	r3, [r3, #0]
 800e7a4:	689a      	ldr	r2, [r3, #8]
 800e7a6:	4baf      	ldr	r3, [pc, #700]	@ (800ea64 <UART_SetConfig+0x330>)
 800e7a8:	4013      	ands	r3, r2
 800e7aa:	697a      	ldr	r2, [r7, #20]
 800e7ac:	6812      	ldr	r2, [r2, #0]
 800e7ae:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800e7b0:	430b      	orrs	r3, r1
 800e7b2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800e7b4:	697b      	ldr	r3, [r7, #20]
 800e7b6:	681b      	ldr	r3, [r3, #0]
 800e7b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e7ba:	f023 010f 	bic.w	r1, r3, #15
 800e7be:	697b      	ldr	r3, [r7, #20]
 800e7c0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800e7c2:	697b      	ldr	r3, [r7, #20]
 800e7c4:	681b      	ldr	r3, [r3, #0]
 800e7c6:	430a      	orrs	r2, r1
 800e7c8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800e7ca:	697b      	ldr	r3, [r7, #20]
 800e7cc:	681b      	ldr	r3, [r3, #0]
 800e7ce:	4aa6      	ldr	r2, [pc, #664]	@ (800ea68 <UART_SetConfig+0x334>)
 800e7d0:	4293      	cmp	r3, r2
 800e7d2:	d177      	bne.n	800e8c4 <UART_SetConfig+0x190>
 800e7d4:	4ba5      	ldr	r3, [pc, #660]	@ (800ea6c <UART_SetConfig+0x338>)
 800e7d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e7d8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800e7dc:	2b28      	cmp	r3, #40	@ 0x28
 800e7de:	d86d      	bhi.n	800e8bc <UART_SetConfig+0x188>
 800e7e0:	a201      	add	r2, pc, #4	@ (adr r2, 800e7e8 <UART_SetConfig+0xb4>)
 800e7e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e7e6:	bf00      	nop
 800e7e8:	0800e88d 	.word	0x0800e88d
 800e7ec:	0800e8bd 	.word	0x0800e8bd
 800e7f0:	0800e8bd 	.word	0x0800e8bd
 800e7f4:	0800e8bd 	.word	0x0800e8bd
 800e7f8:	0800e8bd 	.word	0x0800e8bd
 800e7fc:	0800e8bd 	.word	0x0800e8bd
 800e800:	0800e8bd 	.word	0x0800e8bd
 800e804:	0800e8bd 	.word	0x0800e8bd
 800e808:	0800e895 	.word	0x0800e895
 800e80c:	0800e8bd 	.word	0x0800e8bd
 800e810:	0800e8bd 	.word	0x0800e8bd
 800e814:	0800e8bd 	.word	0x0800e8bd
 800e818:	0800e8bd 	.word	0x0800e8bd
 800e81c:	0800e8bd 	.word	0x0800e8bd
 800e820:	0800e8bd 	.word	0x0800e8bd
 800e824:	0800e8bd 	.word	0x0800e8bd
 800e828:	0800e89d 	.word	0x0800e89d
 800e82c:	0800e8bd 	.word	0x0800e8bd
 800e830:	0800e8bd 	.word	0x0800e8bd
 800e834:	0800e8bd 	.word	0x0800e8bd
 800e838:	0800e8bd 	.word	0x0800e8bd
 800e83c:	0800e8bd 	.word	0x0800e8bd
 800e840:	0800e8bd 	.word	0x0800e8bd
 800e844:	0800e8bd 	.word	0x0800e8bd
 800e848:	0800e8a5 	.word	0x0800e8a5
 800e84c:	0800e8bd 	.word	0x0800e8bd
 800e850:	0800e8bd 	.word	0x0800e8bd
 800e854:	0800e8bd 	.word	0x0800e8bd
 800e858:	0800e8bd 	.word	0x0800e8bd
 800e85c:	0800e8bd 	.word	0x0800e8bd
 800e860:	0800e8bd 	.word	0x0800e8bd
 800e864:	0800e8bd 	.word	0x0800e8bd
 800e868:	0800e8ad 	.word	0x0800e8ad
 800e86c:	0800e8bd 	.word	0x0800e8bd
 800e870:	0800e8bd 	.word	0x0800e8bd
 800e874:	0800e8bd 	.word	0x0800e8bd
 800e878:	0800e8bd 	.word	0x0800e8bd
 800e87c:	0800e8bd 	.word	0x0800e8bd
 800e880:	0800e8bd 	.word	0x0800e8bd
 800e884:	0800e8bd 	.word	0x0800e8bd
 800e888:	0800e8b5 	.word	0x0800e8b5
 800e88c:	2301      	movs	r3, #1
 800e88e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e892:	e222      	b.n	800ecda <UART_SetConfig+0x5a6>
 800e894:	2304      	movs	r3, #4
 800e896:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e89a:	e21e      	b.n	800ecda <UART_SetConfig+0x5a6>
 800e89c:	2308      	movs	r3, #8
 800e89e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e8a2:	e21a      	b.n	800ecda <UART_SetConfig+0x5a6>
 800e8a4:	2310      	movs	r3, #16
 800e8a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e8aa:	e216      	b.n	800ecda <UART_SetConfig+0x5a6>
 800e8ac:	2320      	movs	r3, #32
 800e8ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e8b2:	e212      	b.n	800ecda <UART_SetConfig+0x5a6>
 800e8b4:	2340      	movs	r3, #64	@ 0x40
 800e8b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e8ba:	e20e      	b.n	800ecda <UART_SetConfig+0x5a6>
 800e8bc:	2380      	movs	r3, #128	@ 0x80
 800e8be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e8c2:	e20a      	b.n	800ecda <UART_SetConfig+0x5a6>
 800e8c4:	697b      	ldr	r3, [r7, #20]
 800e8c6:	681b      	ldr	r3, [r3, #0]
 800e8c8:	4a69      	ldr	r2, [pc, #420]	@ (800ea70 <UART_SetConfig+0x33c>)
 800e8ca:	4293      	cmp	r3, r2
 800e8cc:	d130      	bne.n	800e930 <UART_SetConfig+0x1fc>
 800e8ce:	4b67      	ldr	r3, [pc, #412]	@ (800ea6c <UART_SetConfig+0x338>)
 800e8d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e8d2:	f003 0307 	and.w	r3, r3, #7
 800e8d6:	2b05      	cmp	r3, #5
 800e8d8:	d826      	bhi.n	800e928 <UART_SetConfig+0x1f4>
 800e8da:	a201      	add	r2, pc, #4	@ (adr r2, 800e8e0 <UART_SetConfig+0x1ac>)
 800e8dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e8e0:	0800e8f9 	.word	0x0800e8f9
 800e8e4:	0800e901 	.word	0x0800e901
 800e8e8:	0800e909 	.word	0x0800e909
 800e8ec:	0800e911 	.word	0x0800e911
 800e8f0:	0800e919 	.word	0x0800e919
 800e8f4:	0800e921 	.word	0x0800e921
 800e8f8:	2300      	movs	r3, #0
 800e8fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e8fe:	e1ec      	b.n	800ecda <UART_SetConfig+0x5a6>
 800e900:	2304      	movs	r3, #4
 800e902:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e906:	e1e8      	b.n	800ecda <UART_SetConfig+0x5a6>
 800e908:	2308      	movs	r3, #8
 800e90a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e90e:	e1e4      	b.n	800ecda <UART_SetConfig+0x5a6>
 800e910:	2310      	movs	r3, #16
 800e912:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e916:	e1e0      	b.n	800ecda <UART_SetConfig+0x5a6>
 800e918:	2320      	movs	r3, #32
 800e91a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e91e:	e1dc      	b.n	800ecda <UART_SetConfig+0x5a6>
 800e920:	2340      	movs	r3, #64	@ 0x40
 800e922:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e926:	e1d8      	b.n	800ecda <UART_SetConfig+0x5a6>
 800e928:	2380      	movs	r3, #128	@ 0x80
 800e92a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e92e:	e1d4      	b.n	800ecda <UART_SetConfig+0x5a6>
 800e930:	697b      	ldr	r3, [r7, #20]
 800e932:	681b      	ldr	r3, [r3, #0]
 800e934:	4a4f      	ldr	r2, [pc, #316]	@ (800ea74 <UART_SetConfig+0x340>)
 800e936:	4293      	cmp	r3, r2
 800e938:	d130      	bne.n	800e99c <UART_SetConfig+0x268>
 800e93a:	4b4c      	ldr	r3, [pc, #304]	@ (800ea6c <UART_SetConfig+0x338>)
 800e93c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e93e:	f003 0307 	and.w	r3, r3, #7
 800e942:	2b05      	cmp	r3, #5
 800e944:	d826      	bhi.n	800e994 <UART_SetConfig+0x260>
 800e946:	a201      	add	r2, pc, #4	@ (adr r2, 800e94c <UART_SetConfig+0x218>)
 800e948:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e94c:	0800e965 	.word	0x0800e965
 800e950:	0800e96d 	.word	0x0800e96d
 800e954:	0800e975 	.word	0x0800e975
 800e958:	0800e97d 	.word	0x0800e97d
 800e95c:	0800e985 	.word	0x0800e985
 800e960:	0800e98d 	.word	0x0800e98d
 800e964:	2300      	movs	r3, #0
 800e966:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e96a:	e1b6      	b.n	800ecda <UART_SetConfig+0x5a6>
 800e96c:	2304      	movs	r3, #4
 800e96e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e972:	e1b2      	b.n	800ecda <UART_SetConfig+0x5a6>
 800e974:	2308      	movs	r3, #8
 800e976:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e97a:	e1ae      	b.n	800ecda <UART_SetConfig+0x5a6>
 800e97c:	2310      	movs	r3, #16
 800e97e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e982:	e1aa      	b.n	800ecda <UART_SetConfig+0x5a6>
 800e984:	2320      	movs	r3, #32
 800e986:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e98a:	e1a6      	b.n	800ecda <UART_SetConfig+0x5a6>
 800e98c:	2340      	movs	r3, #64	@ 0x40
 800e98e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e992:	e1a2      	b.n	800ecda <UART_SetConfig+0x5a6>
 800e994:	2380      	movs	r3, #128	@ 0x80
 800e996:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e99a:	e19e      	b.n	800ecda <UART_SetConfig+0x5a6>
 800e99c:	697b      	ldr	r3, [r7, #20]
 800e99e:	681b      	ldr	r3, [r3, #0]
 800e9a0:	4a35      	ldr	r2, [pc, #212]	@ (800ea78 <UART_SetConfig+0x344>)
 800e9a2:	4293      	cmp	r3, r2
 800e9a4:	d130      	bne.n	800ea08 <UART_SetConfig+0x2d4>
 800e9a6:	4b31      	ldr	r3, [pc, #196]	@ (800ea6c <UART_SetConfig+0x338>)
 800e9a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e9aa:	f003 0307 	and.w	r3, r3, #7
 800e9ae:	2b05      	cmp	r3, #5
 800e9b0:	d826      	bhi.n	800ea00 <UART_SetConfig+0x2cc>
 800e9b2:	a201      	add	r2, pc, #4	@ (adr r2, 800e9b8 <UART_SetConfig+0x284>)
 800e9b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e9b8:	0800e9d1 	.word	0x0800e9d1
 800e9bc:	0800e9d9 	.word	0x0800e9d9
 800e9c0:	0800e9e1 	.word	0x0800e9e1
 800e9c4:	0800e9e9 	.word	0x0800e9e9
 800e9c8:	0800e9f1 	.word	0x0800e9f1
 800e9cc:	0800e9f9 	.word	0x0800e9f9
 800e9d0:	2300      	movs	r3, #0
 800e9d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e9d6:	e180      	b.n	800ecda <UART_SetConfig+0x5a6>
 800e9d8:	2304      	movs	r3, #4
 800e9da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e9de:	e17c      	b.n	800ecda <UART_SetConfig+0x5a6>
 800e9e0:	2308      	movs	r3, #8
 800e9e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e9e6:	e178      	b.n	800ecda <UART_SetConfig+0x5a6>
 800e9e8:	2310      	movs	r3, #16
 800e9ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e9ee:	e174      	b.n	800ecda <UART_SetConfig+0x5a6>
 800e9f0:	2320      	movs	r3, #32
 800e9f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e9f6:	e170      	b.n	800ecda <UART_SetConfig+0x5a6>
 800e9f8:	2340      	movs	r3, #64	@ 0x40
 800e9fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e9fe:	e16c      	b.n	800ecda <UART_SetConfig+0x5a6>
 800ea00:	2380      	movs	r3, #128	@ 0x80
 800ea02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ea06:	e168      	b.n	800ecda <UART_SetConfig+0x5a6>
 800ea08:	697b      	ldr	r3, [r7, #20]
 800ea0a:	681b      	ldr	r3, [r3, #0]
 800ea0c:	4a1b      	ldr	r2, [pc, #108]	@ (800ea7c <UART_SetConfig+0x348>)
 800ea0e:	4293      	cmp	r3, r2
 800ea10:	d142      	bne.n	800ea98 <UART_SetConfig+0x364>
 800ea12:	4b16      	ldr	r3, [pc, #88]	@ (800ea6c <UART_SetConfig+0x338>)
 800ea14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ea16:	f003 0307 	and.w	r3, r3, #7
 800ea1a:	2b05      	cmp	r3, #5
 800ea1c:	d838      	bhi.n	800ea90 <UART_SetConfig+0x35c>
 800ea1e:	a201      	add	r2, pc, #4	@ (adr r2, 800ea24 <UART_SetConfig+0x2f0>)
 800ea20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ea24:	0800ea3d 	.word	0x0800ea3d
 800ea28:	0800ea45 	.word	0x0800ea45
 800ea2c:	0800ea4d 	.word	0x0800ea4d
 800ea30:	0800ea55 	.word	0x0800ea55
 800ea34:	0800ea81 	.word	0x0800ea81
 800ea38:	0800ea89 	.word	0x0800ea89
 800ea3c:	2300      	movs	r3, #0
 800ea3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ea42:	e14a      	b.n	800ecda <UART_SetConfig+0x5a6>
 800ea44:	2304      	movs	r3, #4
 800ea46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ea4a:	e146      	b.n	800ecda <UART_SetConfig+0x5a6>
 800ea4c:	2308      	movs	r3, #8
 800ea4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ea52:	e142      	b.n	800ecda <UART_SetConfig+0x5a6>
 800ea54:	2310      	movs	r3, #16
 800ea56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ea5a:	e13e      	b.n	800ecda <UART_SetConfig+0x5a6>
 800ea5c:	cfff69f3 	.word	0xcfff69f3
 800ea60:	58000c00 	.word	0x58000c00
 800ea64:	11fff4ff 	.word	0x11fff4ff
 800ea68:	40011000 	.word	0x40011000
 800ea6c:	58024400 	.word	0x58024400
 800ea70:	40004400 	.word	0x40004400
 800ea74:	40004800 	.word	0x40004800
 800ea78:	40004c00 	.word	0x40004c00
 800ea7c:	40005000 	.word	0x40005000
 800ea80:	2320      	movs	r3, #32
 800ea82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ea86:	e128      	b.n	800ecda <UART_SetConfig+0x5a6>
 800ea88:	2340      	movs	r3, #64	@ 0x40
 800ea8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ea8e:	e124      	b.n	800ecda <UART_SetConfig+0x5a6>
 800ea90:	2380      	movs	r3, #128	@ 0x80
 800ea92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ea96:	e120      	b.n	800ecda <UART_SetConfig+0x5a6>
 800ea98:	697b      	ldr	r3, [r7, #20]
 800ea9a:	681b      	ldr	r3, [r3, #0]
 800ea9c:	4acb      	ldr	r2, [pc, #812]	@ (800edcc <UART_SetConfig+0x698>)
 800ea9e:	4293      	cmp	r3, r2
 800eaa0:	d176      	bne.n	800eb90 <UART_SetConfig+0x45c>
 800eaa2:	4bcb      	ldr	r3, [pc, #812]	@ (800edd0 <UART_SetConfig+0x69c>)
 800eaa4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800eaa6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800eaaa:	2b28      	cmp	r3, #40	@ 0x28
 800eaac:	d86c      	bhi.n	800eb88 <UART_SetConfig+0x454>
 800eaae:	a201      	add	r2, pc, #4	@ (adr r2, 800eab4 <UART_SetConfig+0x380>)
 800eab0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eab4:	0800eb59 	.word	0x0800eb59
 800eab8:	0800eb89 	.word	0x0800eb89
 800eabc:	0800eb89 	.word	0x0800eb89
 800eac0:	0800eb89 	.word	0x0800eb89
 800eac4:	0800eb89 	.word	0x0800eb89
 800eac8:	0800eb89 	.word	0x0800eb89
 800eacc:	0800eb89 	.word	0x0800eb89
 800ead0:	0800eb89 	.word	0x0800eb89
 800ead4:	0800eb61 	.word	0x0800eb61
 800ead8:	0800eb89 	.word	0x0800eb89
 800eadc:	0800eb89 	.word	0x0800eb89
 800eae0:	0800eb89 	.word	0x0800eb89
 800eae4:	0800eb89 	.word	0x0800eb89
 800eae8:	0800eb89 	.word	0x0800eb89
 800eaec:	0800eb89 	.word	0x0800eb89
 800eaf0:	0800eb89 	.word	0x0800eb89
 800eaf4:	0800eb69 	.word	0x0800eb69
 800eaf8:	0800eb89 	.word	0x0800eb89
 800eafc:	0800eb89 	.word	0x0800eb89
 800eb00:	0800eb89 	.word	0x0800eb89
 800eb04:	0800eb89 	.word	0x0800eb89
 800eb08:	0800eb89 	.word	0x0800eb89
 800eb0c:	0800eb89 	.word	0x0800eb89
 800eb10:	0800eb89 	.word	0x0800eb89
 800eb14:	0800eb71 	.word	0x0800eb71
 800eb18:	0800eb89 	.word	0x0800eb89
 800eb1c:	0800eb89 	.word	0x0800eb89
 800eb20:	0800eb89 	.word	0x0800eb89
 800eb24:	0800eb89 	.word	0x0800eb89
 800eb28:	0800eb89 	.word	0x0800eb89
 800eb2c:	0800eb89 	.word	0x0800eb89
 800eb30:	0800eb89 	.word	0x0800eb89
 800eb34:	0800eb79 	.word	0x0800eb79
 800eb38:	0800eb89 	.word	0x0800eb89
 800eb3c:	0800eb89 	.word	0x0800eb89
 800eb40:	0800eb89 	.word	0x0800eb89
 800eb44:	0800eb89 	.word	0x0800eb89
 800eb48:	0800eb89 	.word	0x0800eb89
 800eb4c:	0800eb89 	.word	0x0800eb89
 800eb50:	0800eb89 	.word	0x0800eb89
 800eb54:	0800eb81 	.word	0x0800eb81
 800eb58:	2301      	movs	r3, #1
 800eb5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eb5e:	e0bc      	b.n	800ecda <UART_SetConfig+0x5a6>
 800eb60:	2304      	movs	r3, #4
 800eb62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eb66:	e0b8      	b.n	800ecda <UART_SetConfig+0x5a6>
 800eb68:	2308      	movs	r3, #8
 800eb6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eb6e:	e0b4      	b.n	800ecda <UART_SetConfig+0x5a6>
 800eb70:	2310      	movs	r3, #16
 800eb72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eb76:	e0b0      	b.n	800ecda <UART_SetConfig+0x5a6>
 800eb78:	2320      	movs	r3, #32
 800eb7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eb7e:	e0ac      	b.n	800ecda <UART_SetConfig+0x5a6>
 800eb80:	2340      	movs	r3, #64	@ 0x40
 800eb82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eb86:	e0a8      	b.n	800ecda <UART_SetConfig+0x5a6>
 800eb88:	2380      	movs	r3, #128	@ 0x80
 800eb8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eb8e:	e0a4      	b.n	800ecda <UART_SetConfig+0x5a6>
 800eb90:	697b      	ldr	r3, [r7, #20]
 800eb92:	681b      	ldr	r3, [r3, #0]
 800eb94:	4a8f      	ldr	r2, [pc, #572]	@ (800edd4 <UART_SetConfig+0x6a0>)
 800eb96:	4293      	cmp	r3, r2
 800eb98:	d130      	bne.n	800ebfc <UART_SetConfig+0x4c8>
 800eb9a:	4b8d      	ldr	r3, [pc, #564]	@ (800edd0 <UART_SetConfig+0x69c>)
 800eb9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800eb9e:	f003 0307 	and.w	r3, r3, #7
 800eba2:	2b05      	cmp	r3, #5
 800eba4:	d826      	bhi.n	800ebf4 <UART_SetConfig+0x4c0>
 800eba6:	a201      	add	r2, pc, #4	@ (adr r2, 800ebac <UART_SetConfig+0x478>)
 800eba8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ebac:	0800ebc5 	.word	0x0800ebc5
 800ebb0:	0800ebcd 	.word	0x0800ebcd
 800ebb4:	0800ebd5 	.word	0x0800ebd5
 800ebb8:	0800ebdd 	.word	0x0800ebdd
 800ebbc:	0800ebe5 	.word	0x0800ebe5
 800ebc0:	0800ebed 	.word	0x0800ebed
 800ebc4:	2300      	movs	r3, #0
 800ebc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ebca:	e086      	b.n	800ecda <UART_SetConfig+0x5a6>
 800ebcc:	2304      	movs	r3, #4
 800ebce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ebd2:	e082      	b.n	800ecda <UART_SetConfig+0x5a6>
 800ebd4:	2308      	movs	r3, #8
 800ebd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ebda:	e07e      	b.n	800ecda <UART_SetConfig+0x5a6>
 800ebdc:	2310      	movs	r3, #16
 800ebde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ebe2:	e07a      	b.n	800ecda <UART_SetConfig+0x5a6>
 800ebe4:	2320      	movs	r3, #32
 800ebe6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ebea:	e076      	b.n	800ecda <UART_SetConfig+0x5a6>
 800ebec:	2340      	movs	r3, #64	@ 0x40
 800ebee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ebf2:	e072      	b.n	800ecda <UART_SetConfig+0x5a6>
 800ebf4:	2380      	movs	r3, #128	@ 0x80
 800ebf6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ebfa:	e06e      	b.n	800ecda <UART_SetConfig+0x5a6>
 800ebfc:	697b      	ldr	r3, [r7, #20]
 800ebfe:	681b      	ldr	r3, [r3, #0]
 800ec00:	4a75      	ldr	r2, [pc, #468]	@ (800edd8 <UART_SetConfig+0x6a4>)
 800ec02:	4293      	cmp	r3, r2
 800ec04:	d130      	bne.n	800ec68 <UART_SetConfig+0x534>
 800ec06:	4b72      	ldr	r3, [pc, #456]	@ (800edd0 <UART_SetConfig+0x69c>)
 800ec08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ec0a:	f003 0307 	and.w	r3, r3, #7
 800ec0e:	2b05      	cmp	r3, #5
 800ec10:	d826      	bhi.n	800ec60 <UART_SetConfig+0x52c>
 800ec12:	a201      	add	r2, pc, #4	@ (adr r2, 800ec18 <UART_SetConfig+0x4e4>)
 800ec14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ec18:	0800ec31 	.word	0x0800ec31
 800ec1c:	0800ec39 	.word	0x0800ec39
 800ec20:	0800ec41 	.word	0x0800ec41
 800ec24:	0800ec49 	.word	0x0800ec49
 800ec28:	0800ec51 	.word	0x0800ec51
 800ec2c:	0800ec59 	.word	0x0800ec59
 800ec30:	2300      	movs	r3, #0
 800ec32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ec36:	e050      	b.n	800ecda <UART_SetConfig+0x5a6>
 800ec38:	2304      	movs	r3, #4
 800ec3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ec3e:	e04c      	b.n	800ecda <UART_SetConfig+0x5a6>
 800ec40:	2308      	movs	r3, #8
 800ec42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ec46:	e048      	b.n	800ecda <UART_SetConfig+0x5a6>
 800ec48:	2310      	movs	r3, #16
 800ec4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ec4e:	e044      	b.n	800ecda <UART_SetConfig+0x5a6>
 800ec50:	2320      	movs	r3, #32
 800ec52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ec56:	e040      	b.n	800ecda <UART_SetConfig+0x5a6>
 800ec58:	2340      	movs	r3, #64	@ 0x40
 800ec5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ec5e:	e03c      	b.n	800ecda <UART_SetConfig+0x5a6>
 800ec60:	2380      	movs	r3, #128	@ 0x80
 800ec62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ec66:	e038      	b.n	800ecda <UART_SetConfig+0x5a6>
 800ec68:	697b      	ldr	r3, [r7, #20]
 800ec6a:	681b      	ldr	r3, [r3, #0]
 800ec6c:	4a5b      	ldr	r2, [pc, #364]	@ (800eddc <UART_SetConfig+0x6a8>)
 800ec6e:	4293      	cmp	r3, r2
 800ec70:	d130      	bne.n	800ecd4 <UART_SetConfig+0x5a0>
 800ec72:	4b57      	ldr	r3, [pc, #348]	@ (800edd0 <UART_SetConfig+0x69c>)
 800ec74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ec76:	f003 0307 	and.w	r3, r3, #7
 800ec7a:	2b05      	cmp	r3, #5
 800ec7c:	d826      	bhi.n	800eccc <UART_SetConfig+0x598>
 800ec7e:	a201      	add	r2, pc, #4	@ (adr r2, 800ec84 <UART_SetConfig+0x550>)
 800ec80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ec84:	0800ec9d 	.word	0x0800ec9d
 800ec88:	0800eca5 	.word	0x0800eca5
 800ec8c:	0800ecad 	.word	0x0800ecad
 800ec90:	0800ecb5 	.word	0x0800ecb5
 800ec94:	0800ecbd 	.word	0x0800ecbd
 800ec98:	0800ecc5 	.word	0x0800ecc5
 800ec9c:	2302      	movs	r3, #2
 800ec9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eca2:	e01a      	b.n	800ecda <UART_SetConfig+0x5a6>
 800eca4:	2304      	movs	r3, #4
 800eca6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ecaa:	e016      	b.n	800ecda <UART_SetConfig+0x5a6>
 800ecac:	2308      	movs	r3, #8
 800ecae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ecb2:	e012      	b.n	800ecda <UART_SetConfig+0x5a6>
 800ecb4:	2310      	movs	r3, #16
 800ecb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ecba:	e00e      	b.n	800ecda <UART_SetConfig+0x5a6>
 800ecbc:	2320      	movs	r3, #32
 800ecbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ecc2:	e00a      	b.n	800ecda <UART_SetConfig+0x5a6>
 800ecc4:	2340      	movs	r3, #64	@ 0x40
 800ecc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ecca:	e006      	b.n	800ecda <UART_SetConfig+0x5a6>
 800eccc:	2380      	movs	r3, #128	@ 0x80
 800ecce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ecd2:	e002      	b.n	800ecda <UART_SetConfig+0x5a6>
 800ecd4:	2380      	movs	r3, #128	@ 0x80
 800ecd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800ecda:	697b      	ldr	r3, [r7, #20]
 800ecdc:	681b      	ldr	r3, [r3, #0]
 800ecde:	4a3f      	ldr	r2, [pc, #252]	@ (800eddc <UART_SetConfig+0x6a8>)
 800ece0:	4293      	cmp	r3, r2
 800ece2:	f040 80f8 	bne.w	800eed6 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800ece6:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800ecea:	2b20      	cmp	r3, #32
 800ecec:	dc46      	bgt.n	800ed7c <UART_SetConfig+0x648>
 800ecee:	2b02      	cmp	r3, #2
 800ecf0:	f2c0 8082 	blt.w	800edf8 <UART_SetConfig+0x6c4>
 800ecf4:	3b02      	subs	r3, #2
 800ecf6:	2b1e      	cmp	r3, #30
 800ecf8:	d87e      	bhi.n	800edf8 <UART_SetConfig+0x6c4>
 800ecfa:	a201      	add	r2, pc, #4	@ (adr r2, 800ed00 <UART_SetConfig+0x5cc>)
 800ecfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ed00:	0800ed83 	.word	0x0800ed83
 800ed04:	0800edf9 	.word	0x0800edf9
 800ed08:	0800ed8b 	.word	0x0800ed8b
 800ed0c:	0800edf9 	.word	0x0800edf9
 800ed10:	0800edf9 	.word	0x0800edf9
 800ed14:	0800edf9 	.word	0x0800edf9
 800ed18:	0800ed9b 	.word	0x0800ed9b
 800ed1c:	0800edf9 	.word	0x0800edf9
 800ed20:	0800edf9 	.word	0x0800edf9
 800ed24:	0800edf9 	.word	0x0800edf9
 800ed28:	0800edf9 	.word	0x0800edf9
 800ed2c:	0800edf9 	.word	0x0800edf9
 800ed30:	0800edf9 	.word	0x0800edf9
 800ed34:	0800edf9 	.word	0x0800edf9
 800ed38:	0800edab 	.word	0x0800edab
 800ed3c:	0800edf9 	.word	0x0800edf9
 800ed40:	0800edf9 	.word	0x0800edf9
 800ed44:	0800edf9 	.word	0x0800edf9
 800ed48:	0800edf9 	.word	0x0800edf9
 800ed4c:	0800edf9 	.word	0x0800edf9
 800ed50:	0800edf9 	.word	0x0800edf9
 800ed54:	0800edf9 	.word	0x0800edf9
 800ed58:	0800edf9 	.word	0x0800edf9
 800ed5c:	0800edf9 	.word	0x0800edf9
 800ed60:	0800edf9 	.word	0x0800edf9
 800ed64:	0800edf9 	.word	0x0800edf9
 800ed68:	0800edf9 	.word	0x0800edf9
 800ed6c:	0800edf9 	.word	0x0800edf9
 800ed70:	0800edf9 	.word	0x0800edf9
 800ed74:	0800edf9 	.word	0x0800edf9
 800ed78:	0800edeb 	.word	0x0800edeb
 800ed7c:	2b40      	cmp	r3, #64	@ 0x40
 800ed7e:	d037      	beq.n	800edf0 <UART_SetConfig+0x6bc>
 800ed80:	e03a      	b.n	800edf8 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800ed82:	f7fc fe1f 	bl	800b9c4 <HAL_RCCEx_GetD3PCLK1Freq>
 800ed86:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800ed88:	e03c      	b.n	800ee04 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ed8a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ed8e:	4618      	mov	r0, r3
 800ed90:	f7fc fe2e 	bl	800b9f0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ed94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ed96:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ed98:	e034      	b.n	800ee04 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ed9a:	f107 0318 	add.w	r3, r7, #24
 800ed9e:	4618      	mov	r0, r3
 800eda0:	f7fc ff7a 	bl	800bc98 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800eda4:	69fb      	ldr	r3, [r7, #28]
 800eda6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800eda8:	e02c      	b.n	800ee04 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800edaa:	4b09      	ldr	r3, [pc, #36]	@ (800edd0 <UART_SetConfig+0x69c>)
 800edac:	681b      	ldr	r3, [r3, #0]
 800edae:	f003 0320 	and.w	r3, r3, #32
 800edb2:	2b00      	cmp	r3, #0
 800edb4:	d016      	beq.n	800ede4 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800edb6:	4b06      	ldr	r3, [pc, #24]	@ (800edd0 <UART_SetConfig+0x69c>)
 800edb8:	681b      	ldr	r3, [r3, #0]
 800edba:	08db      	lsrs	r3, r3, #3
 800edbc:	f003 0303 	and.w	r3, r3, #3
 800edc0:	4a07      	ldr	r2, [pc, #28]	@ (800ede0 <UART_SetConfig+0x6ac>)
 800edc2:	fa22 f303 	lsr.w	r3, r2, r3
 800edc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800edc8:	e01c      	b.n	800ee04 <UART_SetConfig+0x6d0>
 800edca:	bf00      	nop
 800edcc:	40011400 	.word	0x40011400
 800edd0:	58024400 	.word	0x58024400
 800edd4:	40007800 	.word	0x40007800
 800edd8:	40007c00 	.word	0x40007c00
 800eddc:	58000c00 	.word	0x58000c00
 800ede0:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800ede4:	4b9d      	ldr	r3, [pc, #628]	@ (800f05c <UART_SetConfig+0x928>)
 800ede6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ede8:	e00c      	b.n	800ee04 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800edea:	4b9d      	ldr	r3, [pc, #628]	@ (800f060 <UART_SetConfig+0x92c>)
 800edec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800edee:	e009      	b.n	800ee04 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800edf0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800edf4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800edf6:	e005      	b.n	800ee04 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800edf8:	2300      	movs	r3, #0
 800edfa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800edfc:	2301      	movs	r3, #1
 800edfe:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800ee02:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800ee04:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ee06:	2b00      	cmp	r3, #0
 800ee08:	f000 81de 	beq.w	800f1c8 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800ee0c:	697b      	ldr	r3, [r7, #20]
 800ee0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ee10:	4a94      	ldr	r2, [pc, #592]	@ (800f064 <UART_SetConfig+0x930>)
 800ee12:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ee16:	461a      	mov	r2, r3
 800ee18:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ee1a:	fbb3 f3f2 	udiv	r3, r3, r2
 800ee1e:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ee20:	697b      	ldr	r3, [r7, #20]
 800ee22:	685a      	ldr	r2, [r3, #4]
 800ee24:	4613      	mov	r3, r2
 800ee26:	005b      	lsls	r3, r3, #1
 800ee28:	4413      	add	r3, r2
 800ee2a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ee2c:	429a      	cmp	r2, r3
 800ee2e:	d305      	bcc.n	800ee3c <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800ee30:	697b      	ldr	r3, [r7, #20]
 800ee32:	685b      	ldr	r3, [r3, #4]
 800ee34:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ee36:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ee38:	429a      	cmp	r2, r3
 800ee3a:	d903      	bls.n	800ee44 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800ee3c:	2301      	movs	r3, #1
 800ee3e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800ee42:	e1c1      	b.n	800f1c8 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ee44:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ee46:	2200      	movs	r2, #0
 800ee48:	60bb      	str	r3, [r7, #8]
 800ee4a:	60fa      	str	r2, [r7, #12]
 800ee4c:	697b      	ldr	r3, [r7, #20]
 800ee4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ee50:	4a84      	ldr	r2, [pc, #528]	@ (800f064 <UART_SetConfig+0x930>)
 800ee52:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ee56:	b29b      	uxth	r3, r3
 800ee58:	2200      	movs	r2, #0
 800ee5a:	603b      	str	r3, [r7, #0]
 800ee5c:	607a      	str	r2, [r7, #4]
 800ee5e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ee62:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800ee66:	f7f1 fc57 	bl	8000718 <__aeabi_uldivmod>
 800ee6a:	4602      	mov	r2, r0
 800ee6c:	460b      	mov	r3, r1
 800ee6e:	4610      	mov	r0, r2
 800ee70:	4619      	mov	r1, r3
 800ee72:	f04f 0200 	mov.w	r2, #0
 800ee76:	f04f 0300 	mov.w	r3, #0
 800ee7a:	020b      	lsls	r3, r1, #8
 800ee7c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800ee80:	0202      	lsls	r2, r0, #8
 800ee82:	6979      	ldr	r1, [r7, #20]
 800ee84:	6849      	ldr	r1, [r1, #4]
 800ee86:	0849      	lsrs	r1, r1, #1
 800ee88:	2000      	movs	r0, #0
 800ee8a:	460c      	mov	r4, r1
 800ee8c:	4605      	mov	r5, r0
 800ee8e:	eb12 0804 	adds.w	r8, r2, r4
 800ee92:	eb43 0905 	adc.w	r9, r3, r5
 800ee96:	697b      	ldr	r3, [r7, #20]
 800ee98:	685b      	ldr	r3, [r3, #4]
 800ee9a:	2200      	movs	r2, #0
 800ee9c:	469a      	mov	sl, r3
 800ee9e:	4693      	mov	fp, r2
 800eea0:	4652      	mov	r2, sl
 800eea2:	465b      	mov	r3, fp
 800eea4:	4640      	mov	r0, r8
 800eea6:	4649      	mov	r1, r9
 800eea8:	f7f1 fc36 	bl	8000718 <__aeabi_uldivmod>
 800eeac:	4602      	mov	r2, r0
 800eeae:	460b      	mov	r3, r1
 800eeb0:	4613      	mov	r3, r2
 800eeb2:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800eeb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eeb6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800eeba:	d308      	bcc.n	800eece <UART_SetConfig+0x79a>
 800eebc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eebe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800eec2:	d204      	bcs.n	800eece <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800eec4:	697b      	ldr	r3, [r7, #20]
 800eec6:	681b      	ldr	r3, [r3, #0]
 800eec8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800eeca:	60da      	str	r2, [r3, #12]
 800eecc:	e17c      	b.n	800f1c8 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800eece:	2301      	movs	r3, #1
 800eed0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800eed4:	e178      	b.n	800f1c8 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800eed6:	697b      	ldr	r3, [r7, #20]
 800eed8:	69db      	ldr	r3, [r3, #28]
 800eeda:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800eede:	f040 80c5 	bne.w	800f06c <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800eee2:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800eee6:	2b20      	cmp	r3, #32
 800eee8:	dc48      	bgt.n	800ef7c <UART_SetConfig+0x848>
 800eeea:	2b00      	cmp	r3, #0
 800eeec:	db7b      	blt.n	800efe6 <UART_SetConfig+0x8b2>
 800eeee:	2b20      	cmp	r3, #32
 800eef0:	d879      	bhi.n	800efe6 <UART_SetConfig+0x8b2>
 800eef2:	a201      	add	r2, pc, #4	@ (adr r2, 800eef8 <UART_SetConfig+0x7c4>)
 800eef4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eef8:	0800ef83 	.word	0x0800ef83
 800eefc:	0800ef8b 	.word	0x0800ef8b
 800ef00:	0800efe7 	.word	0x0800efe7
 800ef04:	0800efe7 	.word	0x0800efe7
 800ef08:	0800ef93 	.word	0x0800ef93
 800ef0c:	0800efe7 	.word	0x0800efe7
 800ef10:	0800efe7 	.word	0x0800efe7
 800ef14:	0800efe7 	.word	0x0800efe7
 800ef18:	0800efa3 	.word	0x0800efa3
 800ef1c:	0800efe7 	.word	0x0800efe7
 800ef20:	0800efe7 	.word	0x0800efe7
 800ef24:	0800efe7 	.word	0x0800efe7
 800ef28:	0800efe7 	.word	0x0800efe7
 800ef2c:	0800efe7 	.word	0x0800efe7
 800ef30:	0800efe7 	.word	0x0800efe7
 800ef34:	0800efe7 	.word	0x0800efe7
 800ef38:	0800efb3 	.word	0x0800efb3
 800ef3c:	0800efe7 	.word	0x0800efe7
 800ef40:	0800efe7 	.word	0x0800efe7
 800ef44:	0800efe7 	.word	0x0800efe7
 800ef48:	0800efe7 	.word	0x0800efe7
 800ef4c:	0800efe7 	.word	0x0800efe7
 800ef50:	0800efe7 	.word	0x0800efe7
 800ef54:	0800efe7 	.word	0x0800efe7
 800ef58:	0800efe7 	.word	0x0800efe7
 800ef5c:	0800efe7 	.word	0x0800efe7
 800ef60:	0800efe7 	.word	0x0800efe7
 800ef64:	0800efe7 	.word	0x0800efe7
 800ef68:	0800efe7 	.word	0x0800efe7
 800ef6c:	0800efe7 	.word	0x0800efe7
 800ef70:	0800efe7 	.word	0x0800efe7
 800ef74:	0800efe7 	.word	0x0800efe7
 800ef78:	0800efd9 	.word	0x0800efd9
 800ef7c:	2b40      	cmp	r3, #64	@ 0x40
 800ef7e:	d02e      	beq.n	800efde <UART_SetConfig+0x8aa>
 800ef80:	e031      	b.n	800efe6 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ef82:	f7fa fd69 	bl	8009a58 <HAL_RCC_GetPCLK1Freq>
 800ef86:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800ef88:	e033      	b.n	800eff2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ef8a:	f7fa fd7b 	bl	8009a84 <HAL_RCC_GetPCLK2Freq>
 800ef8e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800ef90:	e02f      	b.n	800eff2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ef92:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ef96:	4618      	mov	r0, r3
 800ef98:	f7fc fd2a 	bl	800b9f0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ef9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ef9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800efa0:	e027      	b.n	800eff2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800efa2:	f107 0318 	add.w	r3, r7, #24
 800efa6:	4618      	mov	r0, r3
 800efa8:	f7fc fe76 	bl	800bc98 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800efac:	69fb      	ldr	r3, [r7, #28]
 800efae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800efb0:	e01f      	b.n	800eff2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800efb2:	4b2d      	ldr	r3, [pc, #180]	@ (800f068 <UART_SetConfig+0x934>)
 800efb4:	681b      	ldr	r3, [r3, #0]
 800efb6:	f003 0320 	and.w	r3, r3, #32
 800efba:	2b00      	cmp	r3, #0
 800efbc:	d009      	beq.n	800efd2 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800efbe:	4b2a      	ldr	r3, [pc, #168]	@ (800f068 <UART_SetConfig+0x934>)
 800efc0:	681b      	ldr	r3, [r3, #0]
 800efc2:	08db      	lsrs	r3, r3, #3
 800efc4:	f003 0303 	and.w	r3, r3, #3
 800efc8:	4a24      	ldr	r2, [pc, #144]	@ (800f05c <UART_SetConfig+0x928>)
 800efca:	fa22 f303 	lsr.w	r3, r2, r3
 800efce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800efd0:	e00f      	b.n	800eff2 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800efd2:	4b22      	ldr	r3, [pc, #136]	@ (800f05c <UART_SetConfig+0x928>)
 800efd4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800efd6:	e00c      	b.n	800eff2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800efd8:	4b21      	ldr	r3, [pc, #132]	@ (800f060 <UART_SetConfig+0x92c>)
 800efda:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800efdc:	e009      	b.n	800eff2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800efde:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800efe2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800efe4:	e005      	b.n	800eff2 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800efe6:	2300      	movs	r3, #0
 800efe8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800efea:	2301      	movs	r3, #1
 800efec:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800eff0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800eff2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800eff4:	2b00      	cmp	r3, #0
 800eff6:	f000 80e7 	beq.w	800f1c8 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800effa:	697b      	ldr	r3, [r7, #20]
 800effc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800effe:	4a19      	ldr	r2, [pc, #100]	@ (800f064 <UART_SetConfig+0x930>)
 800f000:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f004:	461a      	mov	r2, r3
 800f006:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f008:	fbb3 f3f2 	udiv	r3, r3, r2
 800f00c:	005a      	lsls	r2, r3, #1
 800f00e:	697b      	ldr	r3, [r7, #20]
 800f010:	685b      	ldr	r3, [r3, #4]
 800f012:	085b      	lsrs	r3, r3, #1
 800f014:	441a      	add	r2, r3
 800f016:	697b      	ldr	r3, [r7, #20]
 800f018:	685b      	ldr	r3, [r3, #4]
 800f01a:	fbb2 f3f3 	udiv	r3, r2, r3
 800f01e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f020:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f022:	2b0f      	cmp	r3, #15
 800f024:	d916      	bls.n	800f054 <UART_SetConfig+0x920>
 800f026:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f028:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f02c:	d212      	bcs.n	800f054 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800f02e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f030:	b29b      	uxth	r3, r3
 800f032:	f023 030f 	bic.w	r3, r3, #15
 800f036:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800f038:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f03a:	085b      	lsrs	r3, r3, #1
 800f03c:	b29b      	uxth	r3, r3
 800f03e:	f003 0307 	and.w	r3, r3, #7
 800f042:	b29a      	uxth	r2, r3
 800f044:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800f046:	4313      	orrs	r3, r2
 800f048:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800f04a:	697b      	ldr	r3, [r7, #20]
 800f04c:	681b      	ldr	r3, [r3, #0]
 800f04e:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800f050:	60da      	str	r2, [r3, #12]
 800f052:	e0b9      	b.n	800f1c8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800f054:	2301      	movs	r3, #1
 800f056:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800f05a:	e0b5      	b.n	800f1c8 <UART_SetConfig+0xa94>
 800f05c:	03d09000 	.word	0x03d09000
 800f060:	003d0900 	.word	0x003d0900
 800f064:	08014924 	.word	0x08014924
 800f068:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800f06c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800f070:	2b20      	cmp	r3, #32
 800f072:	dc49      	bgt.n	800f108 <UART_SetConfig+0x9d4>
 800f074:	2b00      	cmp	r3, #0
 800f076:	db7c      	blt.n	800f172 <UART_SetConfig+0xa3e>
 800f078:	2b20      	cmp	r3, #32
 800f07a:	d87a      	bhi.n	800f172 <UART_SetConfig+0xa3e>
 800f07c:	a201      	add	r2, pc, #4	@ (adr r2, 800f084 <UART_SetConfig+0x950>)
 800f07e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f082:	bf00      	nop
 800f084:	0800f10f 	.word	0x0800f10f
 800f088:	0800f117 	.word	0x0800f117
 800f08c:	0800f173 	.word	0x0800f173
 800f090:	0800f173 	.word	0x0800f173
 800f094:	0800f11f 	.word	0x0800f11f
 800f098:	0800f173 	.word	0x0800f173
 800f09c:	0800f173 	.word	0x0800f173
 800f0a0:	0800f173 	.word	0x0800f173
 800f0a4:	0800f12f 	.word	0x0800f12f
 800f0a8:	0800f173 	.word	0x0800f173
 800f0ac:	0800f173 	.word	0x0800f173
 800f0b0:	0800f173 	.word	0x0800f173
 800f0b4:	0800f173 	.word	0x0800f173
 800f0b8:	0800f173 	.word	0x0800f173
 800f0bc:	0800f173 	.word	0x0800f173
 800f0c0:	0800f173 	.word	0x0800f173
 800f0c4:	0800f13f 	.word	0x0800f13f
 800f0c8:	0800f173 	.word	0x0800f173
 800f0cc:	0800f173 	.word	0x0800f173
 800f0d0:	0800f173 	.word	0x0800f173
 800f0d4:	0800f173 	.word	0x0800f173
 800f0d8:	0800f173 	.word	0x0800f173
 800f0dc:	0800f173 	.word	0x0800f173
 800f0e0:	0800f173 	.word	0x0800f173
 800f0e4:	0800f173 	.word	0x0800f173
 800f0e8:	0800f173 	.word	0x0800f173
 800f0ec:	0800f173 	.word	0x0800f173
 800f0f0:	0800f173 	.word	0x0800f173
 800f0f4:	0800f173 	.word	0x0800f173
 800f0f8:	0800f173 	.word	0x0800f173
 800f0fc:	0800f173 	.word	0x0800f173
 800f100:	0800f173 	.word	0x0800f173
 800f104:	0800f165 	.word	0x0800f165
 800f108:	2b40      	cmp	r3, #64	@ 0x40
 800f10a:	d02e      	beq.n	800f16a <UART_SetConfig+0xa36>
 800f10c:	e031      	b.n	800f172 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f10e:	f7fa fca3 	bl	8009a58 <HAL_RCC_GetPCLK1Freq>
 800f112:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800f114:	e033      	b.n	800f17e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800f116:	f7fa fcb5 	bl	8009a84 <HAL_RCC_GetPCLK2Freq>
 800f11a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800f11c:	e02f      	b.n	800f17e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f11e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800f122:	4618      	mov	r0, r3
 800f124:	f7fc fc64 	bl	800b9f0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800f128:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f12a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f12c:	e027      	b.n	800f17e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f12e:	f107 0318 	add.w	r3, r7, #24
 800f132:	4618      	mov	r0, r3
 800f134:	f7fc fdb0 	bl	800bc98 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800f138:	69fb      	ldr	r3, [r7, #28]
 800f13a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f13c:	e01f      	b.n	800f17e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f13e:	4b2d      	ldr	r3, [pc, #180]	@ (800f1f4 <UART_SetConfig+0xac0>)
 800f140:	681b      	ldr	r3, [r3, #0]
 800f142:	f003 0320 	and.w	r3, r3, #32
 800f146:	2b00      	cmp	r3, #0
 800f148:	d009      	beq.n	800f15e <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800f14a:	4b2a      	ldr	r3, [pc, #168]	@ (800f1f4 <UART_SetConfig+0xac0>)
 800f14c:	681b      	ldr	r3, [r3, #0]
 800f14e:	08db      	lsrs	r3, r3, #3
 800f150:	f003 0303 	and.w	r3, r3, #3
 800f154:	4a28      	ldr	r2, [pc, #160]	@ (800f1f8 <UART_SetConfig+0xac4>)
 800f156:	fa22 f303 	lsr.w	r3, r2, r3
 800f15a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800f15c:	e00f      	b.n	800f17e <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800f15e:	4b26      	ldr	r3, [pc, #152]	@ (800f1f8 <UART_SetConfig+0xac4>)
 800f160:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f162:	e00c      	b.n	800f17e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800f164:	4b25      	ldr	r3, [pc, #148]	@ (800f1fc <UART_SetConfig+0xac8>)
 800f166:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f168:	e009      	b.n	800f17e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f16a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800f16e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f170:	e005      	b.n	800f17e <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800f172:	2300      	movs	r3, #0
 800f174:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800f176:	2301      	movs	r3, #1
 800f178:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800f17c:	bf00      	nop
    }

    if (pclk != 0U)
 800f17e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f180:	2b00      	cmp	r3, #0
 800f182:	d021      	beq.n	800f1c8 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f184:	697b      	ldr	r3, [r7, #20]
 800f186:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f188:	4a1d      	ldr	r2, [pc, #116]	@ (800f200 <UART_SetConfig+0xacc>)
 800f18a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f18e:	461a      	mov	r2, r3
 800f190:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f192:	fbb3 f2f2 	udiv	r2, r3, r2
 800f196:	697b      	ldr	r3, [r7, #20]
 800f198:	685b      	ldr	r3, [r3, #4]
 800f19a:	085b      	lsrs	r3, r3, #1
 800f19c:	441a      	add	r2, r3
 800f19e:	697b      	ldr	r3, [r7, #20]
 800f1a0:	685b      	ldr	r3, [r3, #4]
 800f1a2:	fbb2 f3f3 	udiv	r3, r2, r3
 800f1a6:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f1a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f1aa:	2b0f      	cmp	r3, #15
 800f1ac:	d909      	bls.n	800f1c2 <UART_SetConfig+0xa8e>
 800f1ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f1b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f1b4:	d205      	bcs.n	800f1c2 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800f1b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f1b8:	b29a      	uxth	r2, r3
 800f1ba:	697b      	ldr	r3, [r7, #20]
 800f1bc:	681b      	ldr	r3, [r3, #0]
 800f1be:	60da      	str	r2, [r3, #12]
 800f1c0:	e002      	b.n	800f1c8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800f1c2:	2301      	movs	r3, #1
 800f1c4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800f1c8:	697b      	ldr	r3, [r7, #20]
 800f1ca:	2201      	movs	r2, #1
 800f1cc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800f1d0:	697b      	ldr	r3, [r7, #20]
 800f1d2:	2201      	movs	r2, #1
 800f1d4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800f1d8:	697b      	ldr	r3, [r7, #20]
 800f1da:	2200      	movs	r2, #0
 800f1dc:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800f1de:	697b      	ldr	r3, [r7, #20]
 800f1e0:	2200      	movs	r2, #0
 800f1e2:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800f1e4:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800f1e8:	4618      	mov	r0, r3
 800f1ea:	3748      	adds	r7, #72	@ 0x48
 800f1ec:	46bd      	mov	sp, r7
 800f1ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800f1f2:	bf00      	nop
 800f1f4:	58024400 	.word	0x58024400
 800f1f8:	03d09000 	.word	0x03d09000
 800f1fc:	003d0900 	.word	0x003d0900
 800f200:	08014924 	.word	0x08014924

0800f204 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800f204:	b480      	push	{r7}
 800f206:	b083      	sub	sp, #12
 800f208:	af00      	add	r7, sp, #0
 800f20a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800f20c:	687b      	ldr	r3, [r7, #4]
 800f20e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f210:	f003 0308 	and.w	r3, r3, #8
 800f214:	2b00      	cmp	r3, #0
 800f216:	d00a      	beq.n	800f22e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800f218:	687b      	ldr	r3, [r7, #4]
 800f21a:	681b      	ldr	r3, [r3, #0]
 800f21c:	685b      	ldr	r3, [r3, #4]
 800f21e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800f222:	687b      	ldr	r3, [r7, #4]
 800f224:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800f226:	687b      	ldr	r3, [r7, #4]
 800f228:	681b      	ldr	r3, [r3, #0]
 800f22a:	430a      	orrs	r2, r1
 800f22c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800f22e:	687b      	ldr	r3, [r7, #4]
 800f230:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f232:	f003 0301 	and.w	r3, r3, #1
 800f236:	2b00      	cmp	r3, #0
 800f238:	d00a      	beq.n	800f250 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800f23a:	687b      	ldr	r3, [r7, #4]
 800f23c:	681b      	ldr	r3, [r3, #0]
 800f23e:	685b      	ldr	r3, [r3, #4]
 800f240:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800f244:	687b      	ldr	r3, [r7, #4]
 800f246:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f248:	687b      	ldr	r3, [r7, #4]
 800f24a:	681b      	ldr	r3, [r3, #0]
 800f24c:	430a      	orrs	r2, r1
 800f24e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800f250:	687b      	ldr	r3, [r7, #4]
 800f252:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f254:	f003 0302 	and.w	r3, r3, #2
 800f258:	2b00      	cmp	r3, #0
 800f25a:	d00a      	beq.n	800f272 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800f25c:	687b      	ldr	r3, [r7, #4]
 800f25e:	681b      	ldr	r3, [r3, #0]
 800f260:	685b      	ldr	r3, [r3, #4]
 800f262:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800f266:	687b      	ldr	r3, [r7, #4]
 800f268:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800f26a:	687b      	ldr	r3, [r7, #4]
 800f26c:	681b      	ldr	r3, [r3, #0]
 800f26e:	430a      	orrs	r2, r1
 800f270:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800f272:	687b      	ldr	r3, [r7, #4]
 800f274:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f276:	f003 0304 	and.w	r3, r3, #4
 800f27a:	2b00      	cmp	r3, #0
 800f27c:	d00a      	beq.n	800f294 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800f27e:	687b      	ldr	r3, [r7, #4]
 800f280:	681b      	ldr	r3, [r3, #0]
 800f282:	685b      	ldr	r3, [r3, #4]
 800f284:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800f288:	687b      	ldr	r3, [r7, #4]
 800f28a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800f28c:	687b      	ldr	r3, [r7, #4]
 800f28e:	681b      	ldr	r3, [r3, #0]
 800f290:	430a      	orrs	r2, r1
 800f292:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800f294:	687b      	ldr	r3, [r7, #4]
 800f296:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f298:	f003 0310 	and.w	r3, r3, #16
 800f29c:	2b00      	cmp	r3, #0
 800f29e:	d00a      	beq.n	800f2b6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800f2a0:	687b      	ldr	r3, [r7, #4]
 800f2a2:	681b      	ldr	r3, [r3, #0]
 800f2a4:	689b      	ldr	r3, [r3, #8]
 800f2a6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800f2aa:	687b      	ldr	r3, [r7, #4]
 800f2ac:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800f2ae:	687b      	ldr	r3, [r7, #4]
 800f2b0:	681b      	ldr	r3, [r3, #0]
 800f2b2:	430a      	orrs	r2, r1
 800f2b4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800f2b6:	687b      	ldr	r3, [r7, #4]
 800f2b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f2ba:	f003 0320 	and.w	r3, r3, #32
 800f2be:	2b00      	cmp	r3, #0
 800f2c0:	d00a      	beq.n	800f2d8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800f2c2:	687b      	ldr	r3, [r7, #4]
 800f2c4:	681b      	ldr	r3, [r3, #0]
 800f2c6:	689b      	ldr	r3, [r3, #8]
 800f2c8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800f2cc:	687b      	ldr	r3, [r7, #4]
 800f2ce:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800f2d0:	687b      	ldr	r3, [r7, #4]
 800f2d2:	681b      	ldr	r3, [r3, #0]
 800f2d4:	430a      	orrs	r2, r1
 800f2d6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800f2d8:	687b      	ldr	r3, [r7, #4]
 800f2da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f2dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f2e0:	2b00      	cmp	r3, #0
 800f2e2:	d01a      	beq.n	800f31a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800f2e4:	687b      	ldr	r3, [r7, #4]
 800f2e6:	681b      	ldr	r3, [r3, #0]
 800f2e8:	685b      	ldr	r3, [r3, #4]
 800f2ea:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800f2ee:	687b      	ldr	r3, [r7, #4]
 800f2f0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800f2f2:	687b      	ldr	r3, [r7, #4]
 800f2f4:	681b      	ldr	r3, [r3, #0]
 800f2f6:	430a      	orrs	r2, r1
 800f2f8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800f2fa:	687b      	ldr	r3, [r7, #4]
 800f2fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f2fe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800f302:	d10a      	bne.n	800f31a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800f304:	687b      	ldr	r3, [r7, #4]
 800f306:	681b      	ldr	r3, [r3, #0]
 800f308:	685b      	ldr	r3, [r3, #4]
 800f30a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800f30e:	687b      	ldr	r3, [r7, #4]
 800f310:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800f312:	687b      	ldr	r3, [r7, #4]
 800f314:	681b      	ldr	r3, [r3, #0]
 800f316:	430a      	orrs	r2, r1
 800f318:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800f31a:	687b      	ldr	r3, [r7, #4]
 800f31c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f31e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f322:	2b00      	cmp	r3, #0
 800f324:	d00a      	beq.n	800f33c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800f326:	687b      	ldr	r3, [r7, #4]
 800f328:	681b      	ldr	r3, [r3, #0]
 800f32a:	685b      	ldr	r3, [r3, #4]
 800f32c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800f330:	687b      	ldr	r3, [r7, #4]
 800f332:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800f334:	687b      	ldr	r3, [r7, #4]
 800f336:	681b      	ldr	r3, [r3, #0]
 800f338:	430a      	orrs	r2, r1
 800f33a:	605a      	str	r2, [r3, #4]
  }
}
 800f33c:	bf00      	nop
 800f33e:	370c      	adds	r7, #12
 800f340:	46bd      	mov	sp, r7
 800f342:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f346:	4770      	bx	lr

0800f348 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800f348:	b580      	push	{r7, lr}
 800f34a:	b098      	sub	sp, #96	@ 0x60
 800f34c:	af02      	add	r7, sp, #8
 800f34e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f350:	687b      	ldr	r3, [r7, #4]
 800f352:	2200      	movs	r2, #0
 800f354:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800f358:	f7f6 fbfa 	bl	8005b50 <HAL_GetTick>
 800f35c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800f35e:	687b      	ldr	r3, [r7, #4]
 800f360:	681b      	ldr	r3, [r3, #0]
 800f362:	681b      	ldr	r3, [r3, #0]
 800f364:	f003 0308 	and.w	r3, r3, #8
 800f368:	2b08      	cmp	r3, #8
 800f36a:	d12f      	bne.n	800f3cc <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800f36c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800f370:	9300      	str	r3, [sp, #0]
 800f372:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f374:	2200      	movs	r2, #0
 800f376:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800f37a:	6878      	ldr	r0, [r7, #4]
 800f37c:	f000 f88e 	bl	800f49c <UART_WaitOnFlagUntilTimeout>
 800f380:	4603      	mov	r3, r0
 800f382:	2b00      	cmp	r3, #0
 800f384:	d022      	beq.n	800f3cc <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800f386:	687b      	ldr	r3, [r7, #4]
 800f388:	681b      	ldr	r3, [r3, #0]
 800f38a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f38c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f38e:	e853 3f00 	ldrex	r3, [r3]
 800f392:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800f394:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f396:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800f39a:	653b      	str	r3, [r7, #80]	@ 0x50
 800f39c:	687b      	ldr	r3, [r7, #4]
 800f39e:	681b      	ldr	r3, [r3, #0]
 800f3a0:	461a      	mov	r2, r3
 800f3a2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f3a4:	647b      	str	r3, [r7, #68]	@ 0x44
 800f3a6:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f3a8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800f3aa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800f3ac:	e841 2300 	strex	r3, r2, [r1]
 800f3b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800f3b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f3b4:	2b00      	cmp	r3, #0
 800f3b6:	d1e6      	bne.n	800f386 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800f3b8:	687b      	ldr	r3, [r7, #4]
 800f3ba:	2220      	movs	r2, #32
 800f3bc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800f3c0:	687b      	ldr	r3, [r7, #4]
 800f3c2:	2200      	movs	r2, #0
 800f3c4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800f3c8:	2303      	movs	r3, #3
 800f3ca:	e063      	b.n	800f494 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800f3cc:	687b      	ldr	r3, [r7, #4]
 800f3ce:	681b      	ldr	r3, [r3, #0]
 800f3d0:	681b      	ldr	r3, [r3, #0]
 800f3d2:	f003 0304 	and.w	r3, r3, #4
 800f3d6:	2b04      	cmp	r3, #4
 800f3d8:	d149      	bne.n	800f46e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800f3da:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800f3de:	9300      	str	r3, [sp, #0]
 800f3e0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f3e2:	2200      	movs	r2, #0
 800f3e4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800f3e8:	6878      	ldr	r0, [r7, #4]
 800f3ea:	f000 f857 	bl	800f49c <UART_WaitOnFlagUntilTimeout>
 800f3ee:	4603      	mov	r3, r0
 800f3f0:	2b00      	cmp	r3, #0
 800f3f2:	d03c      	beq.n	800f46e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f3f4:	687b      	ldr	r3, [r7, #4]
 800f3f6:	681b      	ldr	r3, [r3, #0]
 800f3f8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f3fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f3fc:	e853 3f00 	ldrex	r3, [r3]
 800f400:	623b      	str	r3, [r7, #32]
   return(result);
 800f402:	6a3b      	ldr	r3, [r7, #32]
 800f404:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800f408:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800f40a:	687b      	ldr	r3, [r7, #4]
 800f40c:	681b      	ldr	r3, [r3, #0]
 800f40e:	461a      	mov	r2, r3
 800f410:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f412:	633b      	str	r3, [r7, #48]	@ 0x30
 800f414:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f416:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800f418:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f41a:	e841 2300 	strex	r3, r2, [r1]
 800f41e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800f420:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f422:	2b00      	cmp	r3, #0
 800f424:	d1e6      	bne.n	800f3f4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f426:	687b      	ldr	r3, [r7, #4]
 800f428:	681b      	ldr	r3, [r3, #0]
 800f42a:	3308      	adds	r3, #8
 800f42c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f42e:	693b      	ldr	r3, [r7, #16]
 800f430:	e853 3f00 	ldrex	r3, [r3]
 800f434:	60fb      	str	r3, [r7, #12]
   return(result);
 800f436:	68fb      	ldr	r3, [r7, #12]
 800f438:	f023 0301 	bic.w	r3, r3, #1
 800f43c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800f43e:	687b      	ldr	r3, [r7, #4]
 800f440:	681b      	ldr	r3, [r3, #0]
 800f442:	3308      	adds	r3, #8
 800f444:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800f446:	61fa      	str	r2, [r7, #28]
 800f448:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f44a:	69b9      	ldr	r1, [r7, #24]
 800f44c:	69fa      	ldr	r2, [r7, #28]
 800f44e:	e841 2300 	strex	r3, r2, [r1]
 800f452:	617b      	str	r3, [r7, #20]
   return(result);
 800f454:	697b      	ldr	r3, [r7, #20]
 800f456:	2b00      	cmp	r3, #0
 800f458:	d1e5      	bne.n	800f426 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800f45a:	687b      	ldr	r3, [r7, #4]
 800f45c:	2220      	movs	r2, #32
 800f45e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800f462:	687b      	ldr	r3, [r7, #4]
 800f464:	2200      	movs	r2, #0
 800f466:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800f46a:	2303      	movs	r3, #3
 800f46c:	e012      	b.n	800f494 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800f46e:	687b      	ldr	r3, [r7, #4]
 800f470:	2220      	movs	r2, #32
 800f472:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800f476:	687b      	ldr	r3, [r7, #4]
 800f478:	2220      	movs	r2, #32
 800f47a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f47e:	687b      	ldr	r3, [r7, #4]
 800f480:	2200      	movs	r2, #0
 800f482:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800f484:	687b      	ldr	r3, [r7, #4]
 800f486:	2200      	movs	r2, #0
 800f488:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800f48a:	687b      	ldr	r3, [r7, #4]
 800f48c:	2200      	movs	r2, #0
 800f48e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800f492:	2300      	movs	r3, #0
}
 800f494:	4618      	mov	r0, r3
 800f496:	3758      	adds	r7, #88	@ 0x58
 800f498:	46bd      	mov	sp, r7
 800f49a:	bd80      	pop	{r7, pc}

0800f49c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800f49c:	b580      	push	{r7, lr}
 800f49e:	b084      	sub	sp, #16
 800f4a0:	af00      	add	r7, sp, #0
 800f4a2:	60f8      	str	r0, [r7, #12]
 800f4a4:	60b9      	str	r1, [r7, #8]
 800f4a6:	603b      	str	r3, [r7, #0]
 800f4a8:	4613      	mov	r3, r2
 800f4aa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f4ac:	e04f      	b.n	800f54e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800f4ae:	69bb      	ldr	r3, [r7, #24]
 800f4b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f4b4:	d04b      	beq.n	800f54e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800f4b6:	f7f6 fb4b 	bl	8005b50 <HAL_GetTick>
 800f4ba:	4602      	mov	r2, r0
 800f4bc:	683b      	ldr	r3, [r7, #0]
 800f4be:	1ad3      	subs	r3, r2, r3
 800f4c0:	69ba      	ldr	r2, [r7, #24]
 800f4c2:	429a      	cmp	r2, r3
 800f4c4:	d302      	bcc.n	800f4cc <UART_WaitOnFlagUntilTimeout+0x30>
 800f4c6:	69bb      	ldr	r3, [r7, #24]
 800f4c8:	2b00      	cmp	r3, #0
 800f4ca:	d101      	bne.n	800f4d0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800f4cc:	2303      	movs	r3, #3
 800f4ce:	e04e      	b.n	800f56e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800f4d0:	68fb      	ldr	r3, [r7, #12]
 800f4d2:	681b      	ldr	r3, [r3, #0]
 800f4d4:	681b      	ldr	r3, [r3, #0]
 800f4d6:	f003 0304 	and.w	r3, r3, #4
 800f4da:	2b00      	cmp	r3, #0
 800f4dc:	d037      	beq.n	800f54e <UART_WaitOnFlagUntilTimeout+0xb2>
 800f4de:	68bb      	ldr	r3, [r7, #8]
 800f4e0:	2b80      	cmp	r3, #128	@ 0x80
 800f4e2:	d034      	beq.n	800f54e <UART_WaitOnFlagUntilTimeout+0xb2>
 800f4e4:	68bb      	ldr	r3, [r7, #8]
 800f4e6:	2b40      	cmp	r3, #64	@ 0x40
 800f4e8:	d031      	beq.n	800f54e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800f4ea:	68fb      	ldr	r3, [r7, #12]
 800f4ec:	681b      	ldr	r3, [r3, #0]
 800f4ee:	69db      	ldr	r3, [r3, #28]
 800f4f0:	f003 0308 	and.w	r3, r3, #8
 800f4f4:	2b08      	cmp	r3, #8
 800f4f6:	d110      	bne.n	800f51a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800f4f8:	68fb      	ldr	r3, [r7, #12]
 800f4fa:	681b      	ldr	r3, [r3, #0]
 800f4fc:	2208      	movs	r2, #8
 800f4fe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800f500:	68f8      	ldr	r0, [r7, #12]
 800f502:	f000 f839 	bl	800f578 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800f506:	68fb      	ldr	r3, [r7, #12]
 800f508:	2208      	movs	r2, #8
 800f50a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800f50e:	68fb      	ldr	r3, [r7, #12]
 800f510:	2200      	movs	r2, #0
 800f512:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800f516:	2301      	movs	r3, #1
 800f518:	e029      	b.n	800f56e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800f51a:	68fb      	ldr	r3, [r7, #12]
 800f51c:	681b      	ldr	r3, [r3, #0]
 800f51e:	69db      	ldr	r3, [r3, #28]
 800f520:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800f524:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800f528:	d111      	bne.n	800f54e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800f52a:	68fb      	ldr	r3, [r7, #12]
 800f52c:	681b      	ldr	r3, [r3, #0]
 800f52e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800f532:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800f534:	68f8      	ldr	r0, [r7, #12]
 800f536:	f000 f81f 	bl	800f578 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800f53a:	68fb      	ldr	r3, [r7, #12]
 800f53c:	2220      	movs	r2, #32
 800f53e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800f542:	68fb      	ldr	r3, [r7, #12]
 800f544:	2200      	movs	r2, #0
 800f546:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800f54a:	2303      	movs	r3, #3
 800f54c:	e00f      	b.n	800f56e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f54e:	68fb      	ldr	r3, [r7, #12]
 800f550:	681b      	ldr	r3, [r3, #0]
 800f552:	69da      	ldr	r2, [r3, #28]
 800f554:	68bb      	ldr	r3, [r7, #8]
 800f556:	4013      	ands	r3, r2
 800f558:	68ba      	ldr	r2, [r7, #8]
 800f55a:	429a      	cmp	r2, r3
 800f55c:	bf0c      	ite	eq
 800f55e:	2301      	moveq	r3, #1
 800f560:	2300      	movne	r3, #0
 800f562:	b2db      	uxtb	r3, r3
 800f564:	461a      	mov	r2, r3
 800f566:	79fb      	ldrb	r3, [r7, #7]
 800f568:	429a      	cmp	r2, r3
 800f56a:	d0a0      	beq.n	800f4ae <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800f56c:	2300      	movs	r3, #0
}
 800f56e:	4618      	mov	r0, r3
 800f570:	3710      	adds	r7, #16
 800f572:	46bd      	mov	sp, r7
 800f574:	bd80      	pop	{r7, pc}
	...

0800f578 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800f578:	b480      	push	{r7}
 800f57a:	b095      	sub	sp, #84	@ 0x54
 800f57c:	af00      	add	r7, sp, #0
 800f57e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f580:	687b      	ldr	r3, [r7, #4]
 800f582:	681b      	ldr	r3, [r3, #0]
 800f584:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f586:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f588:	e853 3f00 	ldrex	r3, [r3]
 800f58c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800f58e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f590:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800f594:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800f596:	687b      	ldr	r3, [r7, #4]
 800f598:	681b      	ldr	r3, [r3, #0]
 800f59a:	461a      	mov	r2, r3
 800f59c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f59e:	643b      	str	r3, [r7, #64]	@ 0x40
 800f5a0:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f5a2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800f5a4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800f5a6:	e841 2300 	strex	r3, r2, [r1]
 800f5aa:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800f5ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f5ae:	2b00      	cmp	r3, #0
 800f5b0:	d1e6      	bne.n	800f580 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800f5b2:	687b      	ldr	r3, [r7, #4]
 800f5b4:	681b      	ldr	r3, [r3, #0]
 800f5b6:	3308      	adds	r3, #8
 800f5b8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f5ba:	6a3b      	ldr	r3, [r7, #32]
 800f5bc:	e853 3f00 	ldrex	r3, [r3]
 800f5c0:	61fb      	str	r3, [r7, #28]
   return(result);
 800f5c2:	69fa      	ldr	r2, [r7, #28]
 800f5c4:	4b1e      	ldr	r3, [pc, #120]	@ (800f640 <UART_EndRxTransfer+0xc8>)
 800f5c6:	4013      	ands	r3, r2
 800f5c8:	64bb      	str	r3, [r7, #72]	@ 0x48
 800f5ca:	687b      	ldr	r3, [r7, #4]
 800f5cc:	681b      	ldr	r3, [r3, #0]
 800f5ce:	3308      	adds	r3, #8
 800f5d0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800f5d2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800f5d4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f5d6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800f5d8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f5da:	e841 2300 	strex	r3, r2, [r1]
 800f5de:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800f5e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f5e2:	2b00      	cmp	r3, #0
 800f5e4:	d1e5      	bne.n	800f5b2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f5e6:	687b      	ldr	r3, [r7, #4]
 800f5e8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f5ea:	2b01      	cmp	r3, #1
 800f5ec:	d118      	bne.n	800f620 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f5ee:	687b      	ldr	r3, [r7, #4]
 800f5f0:	681b      	ldr	r3, [r3, #0]
 800f5f2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f5f4:	68fb      	ldr	r3, [r7, #12]
 800f5f6:	e853 3f00 	ldrex	r3, [r3]
 800f5fa:	60bb      	str	r3, [r7, #8]
   return(result);
 800f5fc:	68bb      	ldr	r3, [r7, #8]
 800f5fe:	f023 0310 	bic.w	r3, r3, #16
 800f602:	647b      	str	r3, [r7, #68]	@ 0x44
 800f604:	687b      	ldr	r3, [r7, #4]
 800f606:	681b      	ldr	r3, [r3, #0]
 800f608:	461a      	mov	r2, r3
 800f60a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f60c:	61bb      	str	r3, [r7, #24]
 800f60e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f610:	6979      	ldr	r1, [r7, #20]
 800f612:	69ba      	ldr	r2, [r7, #24]
 800f614:	e841 2300 	strex	r3, r2, [r1]
 800f618:	613b      	str	r3, [r7, #16]
   return(result);
 800f61a:	693b      	ldr	r3, [r7, #16]
 800f61c:	2b00      	cmp	r3, #0
 800f61e:	d1e6      	bne.n	800f5ee <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800f620:	687b      	ldr	r3, [r7, #4]
 800f622:	2220      	movs	r2, #32
 800f624:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f628:	687b      	ldr	r3, [r7, #4]
 800f62a:	2200      	movs	r2, #0
 800f62c:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800f62e:	687b      	ldr	r3, [r7, #4]
 800f630:	2200      	movs	r2, #0
 800f632:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800f634:	bf00      	nop
 800f636:	3754      	adds	r7, #84	@ 0x54
 800f638:	46bd      	mov	sp, r7
 800f63a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f63e:	4770      	bx	lr
 800f640:	effffffe 	.word	0xeffffffe

0800f644 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800f644:	b480      	push	{r7}
 800f646:	b085      	sub	sp, #20
 800f648:	af00      	add	r7, sp, #0
 800f64a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f64c:	687b      	ldr	r3, [r7, #4]
 800f64e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800f652:	2b01      	cmp	r3, #1
 800f654:	d101      	bne.n	800f65a <HAL_UARTEx_DisableFifoMode+0x16>
 800f656:	2302      	movs	r3, #2
 800f658:	e027      	b.n	800f6aa <HAL_UARTEx_DisableFifoMode+0x66>
 800f65a:	687b      	ldr	r3, [r7, #4]
 800f65c:	2201      	movs	r2, #1
 800f65e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800f662:	687b      	ldr	r3, [r7, #4]
 800f664:	2224      	movs	r2, #36	@ 0x24
 800f666:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f66a:	687b      	ldr	r3, [r7, #4]
 800f66c:	681b      	ldr	r3, [r3, #0]
 800f66e:	681b      	ldr	r3, [r3, #0]
 800f670:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f672:	687b      	ldr	r3, [r7, #4]
 800f674:	681b      	ldr	r3, [r3, #0]
 800f676:	681a      	ldr	r2, [r3, #0]
 800f678:	687b      	ldr	r3, [r7, #4]
 800f67a:	681b      	ldr	r3, [r3, #0]
 800f67c:	f022 0201 	bic.w	r2, r2, #1
 800f680:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800f682:	68fb      	ldr	r3, [r7, #12]
 800f684:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800f688:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800f68a:	687b      	ldr	r3, [r7, #4]
 800f68c:	2200      	movs	r2, #0
 800f68e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f690:	687b      	ldr	r3, [r7, #4]
 800f692:	681b      	ldr	r3, [r3, #0]
 800f694:	68fa      	ldr	r2, [r7, #12]
 800f696:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f698:	687b      	ldr	r3, [r7, #4]
 800f69a:	2220      	movs	r2, #32
 800f69c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f6a0:	687b      	ldr	r3, [r7, #4]
 800f6a2:	2200      	movs	r2, #0
 800f6a4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800f6a8:	2300      	movs	r3, #0
}
 800f6aa:	4618      	mov	r0, r3
 800f6ac:	3714      	adds	r7, #20
 800f6ae:	46bd      	mov	sp, r7
 800f6b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6b4:	4770      	bx	lr

0800f6b6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800f6b6:	b580      	push	{r7, lr}
 800f6b8:	b084      	sub	sp, #16
 800f6ba:	af00      	add	r7, sp, #0
 800f6bc:	6078      	str	r0, [r7, #4]
 800f6be:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f6c0:	687b      	ldr	r3, [r7, #4]
 800f6c2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800f6c6:	2b01      	cmp	r3, #1
 800f6c8:	d101      	bne.n	800f6ce <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800f6ca:	2302      	movs	r3, #2
 800f6cc:	e02d      	b.n	800f72a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800f6ce:	687b      	ldr	r3, [r7, #4]
 800f6d0:	2201      	movs	r2, #1
 800f6d2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800f6d6:	687b      	ldr	r3, [r7, #4]
 800f6d8:	2224      	movs	r2, #36	@ 0x24
 800f6da:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f6de:	687b      	ldr	r3, [r7, #4]
 800f6e0:	681b      	ldr	r3, [r3, #0]
 800f6e2:	681b      	ldr	r3, [r3, #0]
 800f6e4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f6e6:	687b      	ldr	r3, [r7, #4]
 800f6e8:	681b      	ldr	r3, [r3, #0]
 800f6ea:	681a      	ldr	r2, [r3, #0]
 800f6ec:	687b      	ldr	r3, [r7, #4]
 800f6ee:	681b      	ldr	r3, [r3, #0]
 800f6f0:	f022 0201 	bic.w	r2, r2, #1
 800f6f4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800f6f6:	687b      	ldr	r3, [r7, #4]
 800f6f8:	681b      	ldr	r3, [r3, #0]
 800f6fa:	689b      	ldr	r3, [r3, #8]
 800f6fc:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800f700:	687b      	ldr	r3, [r7, #4]
 800f702:	681b      	ldr	r3, [r3, #0]
 800f704:	683a      	ldr	r2, [r7, #0]
 800f706:	430a      	orrs	r2, r1
 800f708:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800f70a:	6878      	ldr	r0, [r7, #4]
 800f70c:	f000 f850 	bl	800f7b0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f710:	687b      	ldr	r3, [r7, #4]
 800f712:	681b      	ldr	r3, [r3, #0]
 800f714:	68fa      	ldr	r2, [r7, #12]
 800f716:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f718:	687b      	ldr	r3, [r7, #4]
 800f71a:	2220      	movs	r2, #32
 800f71c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f720:	687b      	ldr	r3, [r7, #4]
 800f722:	2200      	movs	r2, #0
 800f724:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800f728:	2300      	movs	r3, #0
}
 800f72a:	4618      	mov	r0, r3
 800f72c:	3710      	adds	r7, #16
 800f72e:	46bd      	mov	sp, r7
 800f730:	bd80      	pop	{r7, pc}

0800f732 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800f732:	b580      	push	{r7, lr}
 800f734:	b084      	sub	sp, #16
 800f736:	af00      	add	r7, sp, #0
 800f738:	6078      	str	r0, [r7, #4]
 800f73a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f73c:	687b      	ldr	r3, [r7, #4]
 800f73e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800f742:	2b01      	cmp	r3, #1
 800f744:	d101      	bne.n	800f74a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800f746:	2302      	movs	r3, #2
 800f748:	e02d      	b.n	800f7a6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800f74a:	687b      	ldr	r3, [r7, #4]
 800f74c:	2201      	movs	r2, #1
 800f74e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800f752:	687b      	ldr	r3, [r7, #4]
 800f754:	2224      	movs	r2, #36	@ 0x24
 800f756:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f75a:	687b      	ldr	r3, [r7, #4]
 800f75c:	681b      	ldr	r3, [r3, #0]
 800f75e:	681b      	ldr	r3, [r3, #0]
 800f760:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f762:	687b      	ldr	r3, [r7, #4]
 800f764:	681b      	ldr	r3, [r3, #0]
 800f766:	681a      	ldr	r2, [r3, #0]
 800f768:	687b      	ldr	r3, [r7, #4]
 800f76a:	681b      	ldr	r3, [r3, #0]
 800f76c:	f022 0201 	bic.w	r2, r2, #1
 800f770:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800f772:	687b      	ldr	r3, [r7, #4]
 800f774:	681b      	ldr	r3, [r3, #0]
 800f776:	689b      	ldr	r3, [r3, #8]
 800f778:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800f77c:	687b      	ldr	r3, [r7, #4]
 800f77e:	681b      	ldr	r3, [r3, #0]
 800f780:	683a      	ldr	r2, [r7, #0]
 800f782:	430a      	orrs	r2, r1
 800f784:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800f786:	6878      	ldr	r0, [r7, #4]
 800f788:	f000 f812 	bl	800f7b0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f78c:	687b      	ldr	r3, [r7, #4]
 800f78e:	681b      	ldr	r3, [r3, #0]
 800f790:	68fa      	ldr	r2, [r7, #12]
 800f792:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f794:	687b      	ldr	r3, [r7, #4]
 800f796:	2220      	movs	r2, #32
 800f798:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f79c:	687b      	ldr	r3, [r7, #4]
 800f79e:	2200      	movs	r2, #0
 800f7a0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800f7a4:	2300      	movs	r3, #0
}
 800f7a6:	4618      	mov	r0, r3
 800f7a8:	3710      	adds	r7, #16
 800f7aa:	46bd      	mov	sp, r7
 800f7ac:	bd80      	pop	{r7, pc}
	...

0800f7b0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800f7b0:	b480      	push	{r7}
 800f7b2:	b085      	sub	sp, #20
 800f7b4:	af00      	add	r7, sp, #0
 800f7b6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800f7b8:	687b      	ldr	r3, [r7, #4]
 800f7ba:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800f7bc:	2b00      	cmp	r3, #0
 800f7be:	d108      	bne.n	800f7d2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800f7c0:	687b      	ldr	r3, [r7, #4]
 800f7c2:	2201      	movs	r2, #1
 800f7c4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800f7c8:	687b      	ldr	r3, [r7, #4]
 800f7ca:	2201      	movs	r2, #1
 800f7cc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800f7d0:	e031      	b.n	800f836 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800f7d2:	2310      	movs	r3, #16
 800f7d4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800f7d6:	2310      	movs	r3, #16
 800f7d8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800f7da:	687b      	ldr	r3, [r7, #4]
 800f7dc:	681b      	ldr	r3, [r3, #0]
 800f7de:	689b      	ldr	r3, [r3, #8]
 800f7e0:	0e5b      	lsrs	r3, r3, #25
 800f7e2:	b2db      	uxtb	r3, r3
 800f7e4:	f003 0307 	and.w	r3, r3, #7
 800f7e8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800f7ea:	687b      	ldr	r3, [r7, #4]
 800f7ec:	681b      	ldr	r3, [r3, #0]
 800f7ee:	689b      	ldr	r3, [r3, #8]
 800f7f0:	0f5b      	lsrs	r3, r3, #29
 800f7f2:	b2db      	uxtb	r3, r3
 800f7f4:	f003 0307 	and.w	r3, r3, #7
 800f7f8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800f7fa:	7bbb      	ldrb	r3, [r7, #14]
 800f7fc:	7b3a      	ldrb	r2, [r7, #12]
 800f7fe:	4911      	ldr	r1, [pc, #68]	@ (800f844 <UARTEx_SetNbDataToProcess+0x94>)
 800f800:	5c8a      	ldrb	r2, [r1, r2]
 800f802:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800f806:	7b3a      	ldrb	r2, [r7, #12]
 800f808:	490f      	ldr	r1, [pc, #60]	@ (800f848 <UARTEx_SetNbDataToProcess+0x98>)
 800f80a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800f80c:	fb93 f3f2 	sdiv	r3, r3, r2
 800f810:	b29a      	uxth	r2, r3
 800f812:	687b      	ldr	r3, [r7, #4]
 800f814:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800f818:	7bfb      	ldrb	r3, [r7, #15]
 800f81a:	7b7a      	ldrb	r2, [r7, #13]
 800f81c:	4909      	ldr	r1, [pc, #36]	@ (800f844 <UARTEx_SetNbDataToProcess+0x94>)
 800f81e:	5c8a      	ldrb	r2, [r1, r2]
 800f820:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800f824:	7b7a      	ldrb	r2, [r7, #13]
 800f826:	4908      	ldr	r1, [pc, #32]	@ (800f848 <UARTEx_SetNbDataToProcess+0x98>)
 800f828:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800f82a:	fb93 f3f2 	sdiv	r3, r3, r2
 800f82e:	b29a      	uxth	r2, r3
 800f830:	687b      	ldr	r3, [r7, #4]
 800f832:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800f836:	bf00      	nop
 800f838:	3714      	adds	r7, #20
 800f83a:	46bd      	mov	sp, r7
 800f83c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f840:	4770      	bx	lr
 800f842:	bf00      	nop
 800f844:	0801493c 	.word	0x0801493c
 800f848:	08014944 	.word	0x08014944

0800f84c <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800f84c:	b084      	sub	sp, #16
 800f84e:	b480      	push	{r7}
 800f850:	b085      	sub	sp, #20
 800f852:	af00      	add	r7, sp, #0
 800f854:	6078      	str	r0, [r7, #4]
 800f856:	f107 001c 	add.w	r0, r7, #28
 800f85a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800f85e:	2300      	movs	r3, #0
 800f860:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 800f862:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 800f864:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 800f866:	431a      	orrs	r2, r3
             Init.BusWide             | \
 800f868:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockPowerSave      | \
 800f86a:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 800f86c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.BusWide             | \
 800f86e:	431a      	orrs	r2, r3
             Init.ClockDiv
 800f870:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.HardwareFlowControl | \
 800f872:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 800f874:	68fa      	ldr	r2, [r7, #12]
 800f876:	4313      	orrs	r3, r2
 800f878:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800f87a:	687b      	ldr	r3, [r7, #4]
 800f87c:	685a      	ldr	r2, [r3, #4]
 800f87e:	4b07      	ldr	r3, [pc, #28]	@ (800f89c <SDMMC_Init+0x50>)
 800f880:	4013      	ands	r3, r2
 800f882:	68fa      	ldr	r2, [r7, #12]
 800f884:	431a      	orrs	r2, r3
 800f886:	687b      	ldr	r3, [r7, #4]
 800f888:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800f88a:	2300      	movs	r3, #0
}
 800f88c:	4618      	mov	r0, r3
 800f88e:	3714      	adds	r7, #20
 800f890:	46bd      	mov	sp, r7
 800f892:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f896:	b004      	add	sp, #16
 800f898:	4770      	bx	lr
 800f89a:	bf00      	nop
 800f89c:	ffc02c00 	.word	0xffc02c00

0800f8a0 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800f8a0:	b480      	push	{r7}
 800f8a2:	b083      	sub	sp, #12
 800f8a4:	af00      	add	r7, sp, #0
 800f8a6:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 800f8a8:	687b      	ldr	r3, [r7, #4]
 800f8aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 800f8ae:	4618      	mov	r0, r3
 800f8b0:	370c      	adds	r7, #12
 800f8b2:	46bd      	mov	sp, r7
 800f8b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8b8:	4770      	bx	lr

0800f8ba <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 800f8ba:	b480      	push	{r7}
 800f8bc:	b083      	sub	sp, #12
 800f8be:	af00      	add	r7, sp, #0
 800f8c0:	6078      	str	r0, [r7, #4]
 800f8c2:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 800f8c4:	683b      	ldr	r3, [r7, #0]
 800f8c6:	681a      	ldr	r2, [r3, #0]
 800f8c8:	687b      	ldr	r3, [r7, #4]
 800f8ca:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 800f8ce:	2300      	movs	r3, #0
}
 800f8d0:	4618      	mov	r0, r3
 800f8d2:	370c      	adds	r7, #12
 800f8d4:	46bd      	mov	sp, r7
 800f8d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8da:	4770      	bx	lr

0800f8dc <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 800f8dc:	b480      	push	{r7}
 800f8de:	b083      	sub	sp, #12
 800f8e0:	af00      	add	r7, sp, #0
 800f8e2:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 800f8e4:	687b      	ldr	r3, [r7, #4]
 800f8e6:	681b      	ldr	r3, [r3, #0]
 800f8e8:	f043 0203 	orr.w	r2, r3, #3
 800f8ec:	687b      	ldr	r3, [r7, #4]
 800f8ee:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800f8f0:	2300      	movs	r3, #0
}
 800f8f2:	4618      	mov	r0, r3
 800f8f4:	370c      	adds	r7, #12
 800f8f6:	46bd      	mov	sp, r7
 800f8f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8fc:	4770      	bx	lr

0800f8fe <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 800f8fe:	b480      	push	{r7}
 800f900:	b083      	sub	sp, #12
 800f902:	af00      	add	r7, sp, #0
 800f904:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800f906:	687b      	ldr	r3, [r7, #4]
 800f908:	681b      	ldr	r3, [r3, #0]
 800f90a:	f003 0303 	and.w	r3, r3, #3
}
 800f90e:	4618      	mov	r0, r3
 800f910:	370c      	adds	r7, #12
 800f912:	46bd      	mov	sp, r7
 800f914:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f918:	4770      	bx	lr
	...

0800f91c <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800f91c:	b480      	push	{r7}
 800f91e:	b085      	sub	sp, #20
 800f920:	af00      	add	r7, sp, #0
 800f922:	6078      	str	r0, [r7, #4]
 800f924:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800f926:	2300      	movs	r3, #0
 800f928:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800f92a:	683b      	ldr	r3, [r7, #0]
 800f92c:	681a      	ldr	r2, [r3, #0]
 800f92e:	687b      	ldr	r3, [r7, #4]
 800f930:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800f932:	683b      	ldr	r3, [r7, #0]
 800f934:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 800f936:	683b      	ldr	r3, [r7, #0]
 800f938:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800f93a:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 800f93c:	683b      	ldr	r3, [r7, #0]
 800f93e:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 800f940:	431a      	orrs	r2, r3
                       Command->CPSM);
 800f942:	683b      	ldr	r3, [r7, #0]
 800f944:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 800f946:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800f948:	68fa      	ldr	r2, [r7, #12]
 800f94a:	4313      	orrs	r3, r2
 800f94c:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800f94e:	687b      	ldr	r3, [r7, #4]
 800f950:	68da      	ldr	r2, [r3, #12]
 800f952:	4b06      	ldr	r3, [pc, #24]	@ (800f96c <SDMMC_SendCommand+0x50>)
 800f954:	4013      	ands	r3, r2
 800f956:	68fa      	ldr	r2, [r7, #12]
 800f958:	431a      	orrs	r2, r3
 800f95a:	687b      	ldr	r3, [r7, #4]
 800f95c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800f95e:	2300      	movs	r3, #0
}
 800f960:	4618      	mov	r0, r3
 800f962:	3714      	adds	r7, #20
 800f964:	46bd      	mov	sp, r7
 800f966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f96a:	4770      	bx	lr
 800f96c:	fffee0c0 	.word	0xfffee0c0

0800f970 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800f970:	b480      	push	{r7}
 800f972:	b083      	sub	sp, #12
 800f974:	af00      	add	r7, sp, #0
 800f976:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800f978:	687b      	ldr	r3, [r7, #4]
 800f97a:	691b      	ldr	r3, [r3, #16]
 800f97c:	b2db      	uxtb	r3, r3
}
 800f97e:	4618      	mov	r0, r3
 800f980:	370c      	adds	r7, #12
 800f982:	46bd      	mov	sp, r7
 800f984:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f988:	4770      	bx	lr

0800f98a <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800f98a:	b480      	push	{r7}
 800f98c:	b085      	sub	sp, #20
 800f98e:	af00      	add	r7, sp, #0
 800f990:	6078      	str	r0, [r7, #4]
 800f992:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800f994:	687b      	ldr	r3, [r7, #4]
 800f996:	3314      	adds	r3, #20
 800f998:	461a      	mov	r2, r3
 800f99a:	683b      	ldr	r3, [r7, #0]
 800f99c:	4413      	add	r3, r2
 800f99e:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 800f9a0:	68fb      	ldr	r3, [r7, #12]
 800f9a2:	681b      	ldr	r3, [r3, #0]
}
 800f9a4:	4618      	mov	r0, r3
 800f9a6:	3714      	adds	r7, #20
 800f9a8:	46bd      	mov	sp, r7
 800f9aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9ae:	4770      	bx	lr

0800f9b0 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 800f9b0:	b480      	push	{r7}
 800f9b2:	b085      	sub	sp, #20
 800f9b4:	af00      	add	r7, sp, #0
 800f9b6:	6078      	str	r0, [r7, #4]
 800f9b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800f9ba:	2300      	movs	r3, #0
 800f9bc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800f9be:	683b      	ldr	r3, [r7, #0]
 800f9c0:	681a      	ldr	r2, [r3, #0]
 800f9c2:	687b      	ldr	r3, [r7, #4]
 800f9c4:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800f9c6:	683b      	ldr	r3, [r7, #0]
 800f9c8:	685a      	ldr	r2, [r3, #4]
 800f9ca:	687b      	ldr	r3, [r7, #4]
 800f9cc:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800f9ce:	683b      	ldr	r3, [r7, #0]
 800f9d0:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 800f9d2:	683b      	ldr	r3, [r7, #0]
 800f9d4:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800f9d6:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 800f9d8:	683b      	ldr	r3, [r7, #0]
 800f9da:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 800f9dc:	431a      	orrs	r2, r3
                       Data->DPSM);
 800f9de:	683b      	ldr	r3, [r7, #0]
 800f9e0:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 800f9e2:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800f9e4:	68fa      	ldr	r2, [r7, #12]
 800f9e6:	4313      	orrs	r3, r2
 800f9e8:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800f9ea:	687b      	ldr	r3, [r7, #4]
 800f9ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f9ee:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800f9f2:	68fb      	ldr	r3, [r7, #12]
 800f9f4:	431a      	orrs	r2, r3
 800f9f6:	687b      	ldr	r3, [r7, #4]
 800f9f8:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800f9fa:	2300      	movs	r3, #0

}
 800f9fc:	4618      	mov	r0, r3
 800f9fe:	3714      	adds	r7, #20
 800fa00:	46bd      	mov	sp, r7
 800fa02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa06:	4770      	bx	lr

0800fa08 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800fa08:	b580      	push	{r7, lr}
 800fa0a:	b088      	sub	sp, #32
 800fa0c:	af00      	add	r7, sp, #0
 800fa0e:	6078      	str	r0, [r7, #4]
 800fa10:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800fa12:	683b      	ldr	r3, [r7, #0]
 800fa14:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800fa16:	2310      	movs	r3, #16
 800fa18:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800fa1a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800fa1e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800fa20:	2300      	movs	r3, #0
 800fa22:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800fa24:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800fa28:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800fa2a:	f107 0308 	add.w	r3, r7, #8
 800fa2e:	4619      	mov	r1, r3
 800fa30:	6878      	ldr	r0, [r7, #4]
 800fa32:	f7ff ff73 	bl	800f91c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800fa36:	f241 3288 	movw	r2, #5000	@ 0x1388
 800fa3a:	2110      	movs	r1, #16
 800fa3c:	6878      	ldr	r0, [r7, #4]
 800fa3e:	f000 fa5f 	bl	800ff00 <SDMMC_GetCmdResp1>
 800fa42:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800fa44:	69fb      	ldr	r3, [r7, #28]
}
 800fa46:	4618      	mov	r0, r3
 800fa48:	3720      	adds	r7, #32
 800fa4a:	46bd      	mov	sp, r7
 800fa4c:	bd80      	pop	{r7, pc}

0800fa4e <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800fa4e:	b580      	push	{r7, lr}
 800fa50:	b088      	sub	sp, #32
 800fa52:	af00      	add	r7, sp, #0
 800fa54:	6078      	str	r0, [r7, #4]
 800fa56:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800fa58:	683b      	ldr	r3, [r7, #0]
 800fa5a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800fa5c:	2311      	movs	r3, #17
 800fa5e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800fa60:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800fa64:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800fa66:	2300      	movs	r3, #0
 800fa68:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800fa6a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800fa6e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800fa70:	f107 0308 	add.w	r3, r7, #8
 800fa74:	4619      	mov	r1, r3
 800fa76:	6878      	ldr	r0, [r7, #4]
 800fa78:	f7ff ff50 	bl	800f91c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800fa7c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800fa80:	2111      	movs	r1, #17
 800fa82:	6878      	ldr	r0, [r7, #4]
 800fa84:	f000 fa3c 	bl	800ff00 <SDMMC_GetCmdResp1>
 800fa88:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800fa8a:	69fb      	ldr	r3, [r7, #28]
}
 800fa8c:	4618      	mov	r0, r3
 800fa8e:	3720      	adds	r7, #32
 800fa90:	46bd      	mov	sp, r7
 800fa92:	bd80      	pop	{r7, pc}

0800fa94 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800fa94:	b580      	push	{r7, lr}
 800fa96:	b088      	sub	sp, #32
 800fa98:	af00      	add	r7, sp, #0
 800fa9a:	6078      	str	r0, [r7, #4]
 800fa9c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800fa9e:	683b      	ldr	r3, [r7, #0]
 800faa0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800faa2:	2312      	movs	r3, #18
 800faa4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800faa6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800faaa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800faac:	2300      	movs	r3, #0
 800faae:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800fab0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800fab4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800fab6:	f107 0308 	add.w	r3, r7, #8
 800faba:	4619      	mov	r1, r3
 800fabc:	6878      	ldr	r0, [r7, #4]
 800fabe:	f7ff ff2d 	bl	800f91c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800fac2:	f241 3288 	movw	r2, #5000	@ 0x1388
 800fac6:	2112      	movs	r1, #18
 800fac8:	6878      	ldr	r0, [r7, #4]
 800faca:	f000 fa19 	bl	800ff00 <SDMMC_GetCmdResp1>
 800face:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800fad0:	69fb      	ldr	r3, [r7, #28]
}
 800fad2:	4618      	mov	r0, r3
 800fad4:	3720      	adds	r7, #32
 800fad6:	46bd      	mov	sp, r7
 800fad8:	bd80      	pop	{r7, pc}

0800fada <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800fada:	b580      	push	{r7, lr}
 800fadc:	b088      	sub	sp, #32
 800fade:	af00      	add	r7, sp, #0
 800fae0:	6078      	str	r0, [r7, #4]
 800fae2:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800fae4:	683b      	ldr	r3, [r7, #0]
 800fae6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800fae8:	2318      	movs	r3, #24
 800faea:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800faec:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800faf0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800faf2:	2300      	movs	r3, #0
 800faf4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800faf6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800fafa:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800fafc:	f107 0308 	add.w	r3, r7, #8
 800fb00:	4619      	mov	r1, r3
 800fb02:	6878      	ldr	r0, [r7, #4]
 800fb04:	f7ff ff0a 	bl	800f91c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800fb08:	f241 3288 	movw	r2, #5000	@ 0x1388
 800fb0c:	2118      	movs	r1, #24
 800fb0e:	6878      	ldr	r0, [r7, #4]
 800fb10:	f000 f9f6 	bl	800ff00 <SDMMC_GetCmdResp1>
 800fb14:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800fb16:	69fb      	ldr	r3, [r7, #28]
}
 800fb18:	4618      	mov	r0, r3
 800fb1a:	3720      	adds	r7, #32
 800fb1c:	46bd      	mov	sp, r7
 800fb1e:	bd80      	pop	{r7, pc}

0800fb20 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800fb20:	b580      	push	{r7, lr}
 800fb22:	b088      	sub	sp, #32
 800fb24:	af00      	add	r7, sp, #0
 800fb26:	6078      	str	r0, [r7, #4]
 800fb28:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800fb2a:	683b      	ldr	r3, [r7, #0]
 800fb2c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800fb2e:	2319      	movs	r3, #25
 800fb30:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800fb32:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800fb36:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800fb38:	2300      	movs	r3, #0
 800fb3a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800fb3c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800fb40:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800fb42:	f107 0308 	add.w	r3, r7, #8
 800fb46:	4619      	mov	r1, r3
 800fb48:	6878      	ldr	r0, [r7, #4]
 800fb4a:	f7ff fee7 	bl	800f91c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800fb4e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800fb52:	2119      	movs	r1, #25
 800fb54:	6878      	ldr	r0, [r7, #4]
 800fb56:	f000 f9d3 	bl	800ff00 <SDMMC_GetCmdResp1>
 800fb5a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800fb5c:	69fb      	ldr	r3, [r7, #28]
}
 800fb5e:	4618      	mov	r0, r3
 800fb60:	3720      	adds	r7, #32
 800fb62:	46bd      	mov	sp, r7
 800fb64:	bd80      	pop	{r7, pc}
	...

0800fb68 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800fb68:	b580      	push	{r7, lr}
 800fb6a:	b088      	sub	sp, #32
 800fb6c:	af00      	add	r7, sp, #0
 800fb6e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800fb70:	2300      	movs	r3, #0
 800fb72:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800fb74:	230c      	movs	r3, #12
 800fb76:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800fb78:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800fb7c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800fb7e:	2300      	movs	r3, #0
 800fb80:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800fb82:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800fb86:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 800fb88:	687b      	ldr	r3, [r7, #4]
 800fb8a:	68db      	ldr	r3, [r3, #12]
 800fb8c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800fb90:	687b      	ldr	r3, [r7, #4]
 800fb92:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 800fb94:	687b      	ldr	r3, [r7, #4]
 800fb96:	68db      	ldr	r3, [r3, #12]
 800fb98:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 800fb9c:	687b      	ldr	r3, [r7, #4]
 800fb9e:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800fba0:	f107 0308 	add.w	r3, r7, #8
 800fba4:	4619      	mov	r1, r3
 800fba6:	6878      	ldr	r0, [r7, #4]
 800fba8:	f7ff feb8 	bl	800f91c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800fbac:	4a0b      	ldr	r2, [pc, #44]	@ (800fbdc <SDMMC_CmdStopTransfer+0x74>)
 800fbae:	210c      	movs	r1, #12
 800fbb0:	6878      	ldr	r0, [r7, #4]
 800fbb2:	f000 f9a5 	bl	800ff00 <SDMMC_GetCmdResp1>
 800fbb6:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800fbb8:	687b      	ldr	r3, [r7, #4]
 800fbba:	68db      	ldr	r3, [r3, #12]
 800fbbc:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800fbc0:	687b      	ldr	r3, [r7, #4]
 800fbc2:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800fbc4:	69fb      	ldr	r3, [r7, #28]
 800fbc6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800fbca:	d101      	bne.n	800fbd0 <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 800fbcc:	2300      	movs	r3, #0
 800fbce:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 800fbd0:	69fb      	ldr	r3, [r7, #28]
}
 800fbd2:	4618      	mov	r0, r3
 800fbd4:	3720      	adds	r7, #32
 800fbd6:	46bd      	mov	sp, r7
 800fbd8:	bd80      	pop	{r7, pc}
 800fbda:	bf00      	nop
 800fbdc:	05f5e100 	.word	0x05f5e100

0800fbe0 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 800fbe0:	b580      	push	{r7, lr}
 800fbe2:	b088      	sub	sp, #32
 800fbe4:	af00      	add	r7, sp, #0
 800fbe6:	6078      	str	r0, [r7, #4]
 800fbe8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800fbea:	683b      	ldr	r3, [r7, #0]
 800fbec:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800fbee:	2307      	movs	r3, #7
 800fbf0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800fbf2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800fbf6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800fbf8:	2300      	movs	r3, #0
 800fbfa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800fbfc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800fc00:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800fc02:	f107 0308 	add.w	r3, r7, #8
 800fc06:	4619      	mov	r1, r3
 800fc08:	6878      	ldr	r0, [r7, #4]
 800fc0a:	f7ff fe87 	bl	800f91c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800fc0e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800fc12:	2107      	movs	r1, #7
 800fc14:	6878      	ldr	r0, [r7, #4]
 800fc16:	f000 f973 	bl	800ff00 <SDMMC_GetCmdResp1>
 800fc1a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800fc1c:	69fb      	ldr	r3, [r7, #28]
}
 800fc1e:	4618      	mov	r0, r3
 800fc20:	3720      	adds	r7, #32
 800fc22:	46bd      	mov	sp, r7
 800fc24:	bd80      	pop	{r7, pc}

0800fc26 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800fc26:	b580      	push	{r7, lr}
 800fc28:	b088      	sub	sp, #32
 800fc2a:	af00      	add	r7, sp, #0
 800fc2c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800fc2e:	2300      	movs	r3, #0
 800fc30:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800fc32:	2300      	movs	r3, #0
 800fc34:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800fc36:	2300      	movs	r3, #0
 800fc38:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800fc3a:	2300      	movs	r3, #0
 800fc3c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800fc3e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800fc42:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800fc44:	f107 0308 	add.w	r3, r7, #8
 800fc48:	4619      	mov	r1, r3
 800fc4a:	6878      	ldr	r0, [r7, #4]
 800fc4c:	f7ff fe66 	bl	800f91c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800fc50:	6878      	ldr	r0, [r7, #4]
 800fc52:	f000 fb97 	bl	8010384 <SDMMC_GetCmdError>
 800fc56:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800fc58:	69fb      	ldr	r3, [r7, #28]
}
 800fc5a:	4618      	mov	r0, r3
 800fc5c:	3720      	adds	r7, #32
 800fc5e:	46bd      	mov	sp, r7
 800fc60:	bd80      	pop	{r7, pc}

0800fc62 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800fc62:	b580      	push	{r7, lr}
 800fc64:	b088      	sub	sp, #32
 800fc66:	af00      	add	r7, sp, #0
 800fc68:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800fc6a:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 800fc6e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800fc70:	2308      	movs	r3, #8
 800fc72:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800fc74:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800fc78:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800fc7a:	2300      	movs	r3, #0
 800fc7c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800fc7e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800fc82:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800fc84:	f107 0308 	add.w	r3, r7, #8
 800fc88:	4619      	mov	r1, r3
 800fc8a:	6878      	ldr	r0, [r7, #4]
 800fc8c:	f7ff fe46 	bl	800f91c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800fc90:	6878      	ldr	r0, [r7, #4]
 800fc92:	f000 fb29 	bl	80102e8 <SDMMC_GetCmdResp7>
 800fc96:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800fc98:	69fb      	ldr	r3, [r7, #28]
}
 800fc9a:	4618      	mov	r0, r3
 800fc9c:	3720      	adds	r7, #32
 800fc9e:	46bd      	mov	sp, r7
 800fca0:	bd80      	pop	{r7, pc}

0800fca2 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800fca2:	b580      	push	{r7, lr}
 800fca4:	b088      	sub	sp, #32
 800fca6:	af00      	add	r7, sp, #0
 800fca8:	6078      	str	r0, [r7, #4]
 800fcaa:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800fcac:	683b      	ldr	r3, [r7, #0]
 800fcae:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800fcb0:	2337      	movs	r3, #55	@ 0x37
 800fcb2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800fcb4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800fcb8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800fcba:	2300      	movs	r3, #0
 800fcbc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800fcbe:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800fcc2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800fcc4:	f107 0308 	add.w	r3, r7, #8
 800fcc8:	4619      	mov	r1, r3
 800fcca:	6878      	ldr	r0, [r7, #4]
 800fccc:	f7ff fe26 	bl	800f91c <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800fcd0:	f241 3288 	movw	r2, #5000	@ 0x1388
 800fcd4:	2137      	movs	r1, #55	@ 0x37
 800fcd6:	6878      	ldr	r0, [r7, #4]
 800fcd8:	f000 f912 	bl	800ff00 <SDMMC_GetCmdResp1>
 800fcdc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800fcde:	69fb      	ldr	r3, [r7, #28]
}
 800fce0:	4618      	mov	r0, r3
 800fce2:	3720      	adds	r7, #32
 800fce4:	46bd      	mov	sp, r7
 800fce6:	bd80      	pop	{r7, pc}

0800fce8 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800fce8:	b580      	push	{r7, lr}
 800fcea:	b088      	sub	sp, #32
 800fcec:	af00      	add	r7, sp, #0
 800fcee:	6078      	str	r0, [r7, #4]
 800fcf0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800fcf2:	683b      	ldr	r3, [r7, #0]
 800fcf4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800fcf6:	2329      	movs	r3, #41	@ 0x29
 800fcf8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800fcfa:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800fcfe:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800fd00:	2300      	movs	r3, #0
 800fd02:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800fd04:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800fd08:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800fd0a:	f107 0308 	add.w	r3, r7, #8
 800fd0e:	4619      	mov	r1, r3
 800fd10:	6878      	ldr	r0, [r7, #4]
 800fd12:	f7ff fe03 	bl	800f91c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800fd16:	6878      	ldr	r0, [r7, #4]
 800fd18:	f000 fa2e 	bl	8010178 <SDMMC_GetCmdResp3>
 800fd1c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800fd1e:	69fb      	ldr	r3, [r7, #28]
}
 800fd20:	4618      	mov	r0, r3
 800fd22:	3720      	adds	r7, #32
 800fd24:	46bd      	mov	sp, r7
 800fd26:	bd80      	pop	{r7, pc}

0800fd28 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800fd28:	b580      	push	{r7, lr}
 800fd2a:	b088      	sub	sp, #32
 800fd2c:	af00      	add	r7, sp, #0
 800fd2e:	6078      	str	r0, [r7, #4]
 800fd30:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800fd32:	683b      	ldr	r3, [r7, #0]
 800fd34:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800fd36:	2306      	movs	r3, #6
 800fd38:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800fd3a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800fd3e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800fd40:	2300      	movs	r3, #0
 800fd42:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800fd44:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800fd48:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800fd4a:	f107 0308 	add.w	r3, r7, #8
 800fd4e:	4619      	mov	r1, r3
 800fd50:	6878      	ldr	r0, [r7, #4]
 800fd52:	f7ff fde3 	bl	800f91c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800fd56:	f241 3288 	movw	r2, #5000	@ 0x1388
 800fd5a:	2106      	movs	r1, #6
 800fd5c:	6878      	ldr	r0, [r7, #4]
 800fd5e:	f000 f8cf 	bl	800ff00 <SDMMC_GetCmdResp1>
 800fd62:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800fd64:	69fb      	ldr	r3, [r7, #28]
}
 800fd66:	4618      	mov	r0, r3
 800fd68:	3720      	adds	r7, #32
 800fd6a:	46bd      	mov	sp, r7
 800fd6c:	bd80      	pop	{r7, pc}

0800fd6e <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800fd6e:	b580      	push	{r7, lr}
 800fd70:	b088      	sub	sp, #32
 800fd72:	af00      	add	r7, sp, #0
 800fd74:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800fd76:	2300      	movs	r3, #0
 800fd78:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800fd7a:	2333      	movs	r3, #51	@ 0x33
 800fd7c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800fd7e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800fd82:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800fd84:	2300      	movs	r3, #0
 800fd86:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800fd88:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800fd8c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800fd8e:	f107 0308 	add.w	r3, r7, #8
 800fd92:	4619      	mov	r1, r3
 800fd94:	6878      	ldr	r0, [r7, #4]
 800fd96:	f7ff fdc1 	bl	800f91c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800fd9a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800fd9e:	2133      	movs	r1, #51	@ 0x33
 800fda0:	6878      	ldr	r0, [r7, #4]
 800fda2:	f000 f8ad 	bl	800ff00 <SDMMC_GetCmdResp1>
 800fda6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800fda8:	69fb      	ldr	r3, [r7, #28]
}
 800fdaa:	4618      	mov	r0, r3
 800fdac:	3720      	adds	r7, #32
 800fdae:	46bd      	mov	sp, r7
 800fdb0:	bd80      	pop	{r7, pc}

0800fdb2 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800fdb2:	b580      	push	{r7, lr}
 800fdb4:	b088      	sub	sp, #32
 800fdb6:	af00      	add	r7, sp, #0
 800fdb8:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800fdba:	2300      	movs	r3, #0
 800fdbc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800fdbe:	2302      	movs	r3, #2
 800fdc0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800fdc2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800fdc6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800fdc8:	2300      	movs	r3, #0
 800fdca:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800fdcc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800fdd0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800fdd2:	f107 0308 	add.w	r3, r7, #8
 800fdd6:	4619      	mov	r1, r3
 800fdd8:	6878      	ldr	r0, [r7, #4]
 800fdda:	f7ff fd9f 	bl	800f91c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800fdde:	6878      	ldr	r0, [r7, #4]
 800fde0:	f000 f980 	bl	80100e4 <SDMMC_GetCmdResp2>
 800fde4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800fde6:	69fb      	ldr	r3, [r7, #28]
}
 800fde8:	4618      	mov	r0, r3
 800fdea:	3720      	adds	r7, #32
 800fdec:	46bd      	mov	sp, r7
 800fdee:	bd80      	pop	{r7, pc}

0800fdf0 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800fdf0:	b580      	push	{r7, lr}
 800fdf2:	b088      	sub	sp, #32
 800fdf4:	af00      	add	r7, sp, #0
 800fdf6:	6078      	str	r0, [r7, #4]
 800fdf8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800fdfa:	683b      	ldr	r3, [r7, #0]
 800fdfc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800fdfe:	2309      	movs	r3, #9
 800fe00:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800fe02:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800fe06:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800fe08:	2300      	movs	r3, #0
 800fe0a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800fe0c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800fe10:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800fe12:	f107 0308 	add.w	r3, r7, #8
 800fe16:	4619      	mov	r1, r3
 800fe18:	6878      	ldr	r0, [r7, #4]
 800fe1a:	f7ff fd7f 	bl	800f91c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800fe1e:	6878      	ldr	r0, [r7, #4]
 800fe20:	f000 f960 	bl	80100e4 <SDMMC_GetCmdResp2>
 800fe24:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800fe26:	69fb      	ldr	r3, [r7, #28]
}
 800fe28:	4618      	mov	r0, r3
 800fe2a:	3720      	adds	r7, #32
 800fe2c:	46bd      	mov	sp, r7
 800fe2e:	bd80      	pop	{r7, pc}

0800fe30 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800fe30:	b580      	push	{r7, lr}
 800fe32:	b088      	sub	sp, #32
 800fe34:	af00      	add	r7, sp, #0
 800fe36:	6078      	str	r0, [r7, #4]
 800fe38:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800fe3a:	2300      	movs	r3, #0
 800fe3c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800fe3e:	2303      	movs	r3, #3
 800fe40:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800fe42:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800fe46:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800fe48:	2300      	movs	r3, #0
 800fe4a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800fe4c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800fe50:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800fe52:	f107 0308 	add.w	r3, r7, #8
 800fe56:	4619      	mov	r1, r3
 800fe58:	6878      	ldr	r0, [r7, #4]
 800fe5a:	f7ff fd5f 	bl	800f91c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800fe5e:	683a      	ldr	r2, [r7, #0]
 800fe60:	2103      	movs	r1, #3
 800fe62:	6878      	ldr	r0, [r7, #4]
 800fe64:	f000 f9c8 	bl	80101f8 <SDMMC_GetCmdResp6>
 800fe68:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800fe6a:	69fb      	ldr	r3, [r7, #28]
}
 800fe6c:	4618      	mov	r0, r3
 800fe6e:	3720      	adds	r7, #32
 800fe70:	46bd      	mov	sp, r7
 800fe72:	bd80      	pop	{r7, pc}

0800fe74 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800fe74:	b580      	push	{r7, lr}
 800fe76:	b088      	sub	sp, #32
 800fe78:	af00      	add	r7, sp, #0
 800fe7a:	6078      	str	r0, [r7, #4]
 800fe7c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800fe7e:	683b      	ldr	r3, [r7, #0]
 800fe80:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800fe82:	230d      	movs	r3, #13
 800fe84:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800fe86:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800fe8a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800fe8c:	2300      	movs	r3, #0
 800fe8e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800fe90:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800fe94:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800fe96:	f107 0308 	add.w	r3, r7, #8
 800fe9a:	4619      	mov	r1, r3
 800fe9c:	6878      	ldr	r0, [r7, #4]
 800fe9e:	f7ff fd3d 	bl	800f91c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800fea2:	f241 3288 	movw	r2, #5000	@ 0x1388
 800fea6:	210d      	movs	r1, #13
 800fea8:	6878      	ldr	r0, [r7, #4]
 800feaa:	f000 f829 	bl	800ff00 <SDMMC_GetCmdResp1>
 800feae:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800feb0:	69fb      	ldr	r3, [r7, #28]
}
 800feb2:	4618      	mov	r0, r3
 800feb4:	3720      	adds	r7, #32
 800feb6:	46bd      	mov	sp, r7
 800feb8:	bd80      	pop	{r7, pc}

0800feba <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 800feba:	b580      	push	{r7, lr}
 800febc:	b088      	sub	sp, #32
 800febe:	af00      	add	r7, sp, #0
 800fec0:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800fec2:	2300      	movs	r3, #0
 800fec4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 800fec6:	230d      	movs	r3, #13
 800fec8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800feca:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800fece:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800fed0:	2300      	movs	r3, #0
 800fed2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800fed4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800fed8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800feda:	f107 0308 	add.w	r3, r7, #8
 800fede:	4619      	mov	r1, r3
 800fee0:	6878      	ldr	r0, [r7, #4]
 800fee2:	f7ff fd1b 	bl	800f91c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 800fee6:	f241 3288 	movw	r2, #5000	@ 0x1388
 800feea:	210d      	movs	r1, #13
 800feec:	6878      	ldr	r0, [r7, #4]
 800feee:	f000 f807 	bl	800ff00 <SDMMC_GetCmdResp1>
 800fef2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800fef4:	69fb      	ldr	r3, [r7, #28]
}
 800fef6:	4618      	mov	r0, r3
 800fef8:	3720      	adds	r7, #32
 800fefa:	46bd      	mov	sp, r7
 800fefc:	bd80      	pop	{r7, pc}
	...

0800ff00 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800ff00:	b580      	push	{r7, lr}
 800ff02:	b088      	sub	sp, #32
 800ff04:	af00      	add	r7, sp, #0
 800ff06:	60f8      	str	r0, [r7, #12]
 800ff08:	460b      	mov	r3, r1
 800ff0a:	607a      	str	r2, [r7, #4]
 800ff0c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800ff0e:	4b70      	ldr	r3, [pc, #448]	@ (80100d0 <SDMMC_GetCmdResp1+0x1d0>)
 800ff10:	681b      	ldr	r3, [r3, #0]
 800ff12:	4a70      	ldr	r2, [pc, #448]	@ (80100d4 <SDMMC_GetCmdResp1+0x1d4>)
 800ff14:	fba2 2303 	umull	r2, r3, r2, r3
 800ff18:	0a5a      	lsrs	r2, r3, #9
 800ff1a:	687b      	ldr	r3, [r7, #4]
 800ff1c:	fb02 f303 	mul.w	r3, r2, r3
 800ff20:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800ff22:	69fb      	ldr	r3, [r7, #28]
 800ff24:	1e5a      	subs	r2, r3, #1
 800ff26:	61fa      	str	r2, [r7, #28]
 800ff28:	2b00      	cmp	r3, #0
 800ff2a:	d102      	bne.n	800ff32 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ff2c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800ff30:	e0c9      	b.n	80100c6 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800ff32:	68fb      	ldr	r3, [r7, #12]
 800ff34:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ff36:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800ff38:	69ba      	ldr	r2, [r7, #24]
 800ff3a:	4b67      	ldr	r3, [pc, #412]	@ (80100d8 <SDMMC_GetCmdResp1+0x1d8>)
 800ff3c:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800ff3e:	2b00      	cmp	r3, #0
 800ff40:	d0ef      	beq.n	800ff22 <SDMMC_GetCmdResp1+0x22>
 800ff42:	69bb      	ldr	r3, [r7, #24]
 800ff44:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800ff48:	2b00      	cmp	r3, #0
 800ff4a:	d1ea      	bne.n	800ff22 <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800ff4c:	68fb      	ldr	r3, [r7, #12]
 800ff4e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ff50:	f003 0304 	and.w	r3, r3, #4
 800ff54:	2b00      	cmp	r3, #0
 800ff56:	d004      	beq.n	800ff62 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800ff58:	68fb      	ldr	r3, [r7, #12]
 800ff5a:	2204      	movs	r2, #4
 800ff5c:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ff5e:	2304      	movs	r3, #4
 800ff60:	e0b1      	b.n	80100c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800ff62:	68fb      	ldr	r3, [r7, #12]
 800ff64:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ff66:	f003 0301 	and.w	r3, r3, #1
 800ff6a:	2b00      	cmp	r3, #0
 800ff6c:	d004      	beq.n	800ff78 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800ff6e:	68fb      	ldr	r3, [r7, #12]
 800ff70:	2201      	movs	r2, #1
 800ff72:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ff74:	2301      	movs	r3, #1
 800ff76:	e0a6      	b.n	80100c6 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800ff78:	68fb      	ldr	r3, [r7, #12]
 800ff7a:	4a58      	ldr	r2, [pc, #352]	@ (80100dc <SDMMC_GetCmdResp1+0x1dc>)
 800ff7c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800ff7e:	68f8      	ldr	r0, [r7, #12]
 800ff80:	f7ff fcf6 	bl	800f970 <SDMMC_GetCommandResponse>
 800ff84:	4603      	mov	r3, r0
 800ff86:	461a      	mov	r2, r3
 800ff88:	7afb      	ldrb	r3, [r7, #11]
 800ff8a:	4293      	cmp	r3, r2
 800ff8c:	d001      	beq.n	800ff92 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ff8e:	2301      	movs	r3, #1
 800ff90:	e099      	b.n	80100c6 <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800ff92:	2100      	movs	r1, #0
 800ff94:	68f8      	ldr	r0, [r7, #12]
 800ff96:	f7ff fcf8 	bl	800f98a <SDMMC_GetResponse>
 800ff9a:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800ff9c:	697a      	ldr	r2, [r7, #20]
 800ff9e:	4b50      	ldr	r3, [pc, #320]	@ (80100e0 <SDMMC_GetCmdResp1+0x1e0>)
 800ffa0:	4013      	ands	r3, r2
 800ffa2:	2b00      	cmp	r3, #0
 800ffa4:	d101      	bne.n	800ffaa <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800ffa6:	2300      	movs	r3, #0
 800ffa8:	e08d      	b.n	80100c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800ffaa:	697b      	ldr	r3, [r7, #20]
 800ffac:	2b00      	cmp	r3, #0
 800ffae:	da02      	bge.n	800ffb6 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800ffb0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800ffb4:	e087      	b.n	80100c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800ffb6:	697b      	ldr	r3, [r7, #20]
 800ffb8:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800ffbc:	2b00      	cmp	r3, #0
 800ffbe:	d001      	beq.n	800ffc4 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800ffc0:	2340      	movs	r3, #64	@ 0x40
 800ffc2:	e080      	b.n	80100c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800ffc4:	697b      	ldr	r3, [r7, #20]
 800ffc6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800ffca:	2b00      	cmp	r3, #0
 800ffcc:	d001      	beq.n	800ffd2 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800ffce:	2380      	movs	r3, #128	@ 0x80
 800ffd0:	e079      	b.n	80100c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800ffd2:	697b      	ldr	r3, [r7, #20]
 800ffd4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800ffd8:	2b00      	cmp	r3, #0
 800ffda:	d002      	beq.n	800ffe2 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800ffdc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800ffe0:	e071      	b.n	80100c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800ffe2:	697b      	ldr	r3, [r7, #20]
 800ffe4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ffe8:	2b00      	cmp	r3, #0
 800ffea:	d002      	beq.n	800fff2 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800ffec:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800fff0:	e069      	b.n	80100c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800fff2:	697b      	ldr	r3, [r7, #20]
 800fff4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800fff8:	2b00      	cmp	r3, #0
 800fffa:	d002      	beq.n	8010002 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800fffc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8010000:	e061      	b.n	80100c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8010002:	697b      	ldr	r3, [r7, #20]
 8010004:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8010008:	2b00      	cmp	r3, #0
 801000a:	d002      	beq.n	8010012 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 801000c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8010010:	e059      	b.n	80100c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8010012:	697b      	ldr	r3, [r7, #20]
 8010014:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8010018:	2b00      	cmp	r3, #0
 801001a:	d002      	beq.n	8010022 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 801001c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8010020:	e051      	b.n	80100c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8010022:	697b      	ldr	r3, [r7, #20]
 8010024:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8010028:	2b00      	cmp	r3, #0
 801002a:	d002      	beq.n	8010032 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 801002c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8010030:	e049      	b.n	80100c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8010032:	697b      	ldr	r3, [r7, #20]
 8010034:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8010038:	2b00      	cmp	r3, #0
 801003a:	d002      	beq.n	8010042 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 801003c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8010040:	e041      	b.n	80100c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8010042:	697b      	ldr	r3, [r7, #20]
 8010044:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8010048:	2b00      	cmp	r3, #0
 801004a:	d002      	beq.n	8010052 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 801004c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8010050:	e039      	b.n	80100c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8010052:	697b      	ldr	r3, [r7, #20]
 8010054:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8010058:	2b00      	cmp	r3, #0
 801005a:	d002      	beq.n	8010062 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 801005c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8010060:	e031      	b.n	80100c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8010062:	697b      	ldr	r3, [r7, #20]
 8010064:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8010068:	2b00      	cmp	r3, #0
 801006a:	d002      	beq.n	8010072 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 801006c:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8010070:	e029      	b.n	80100c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8010072:	697b      	ldr	r3, [r7, #20]
 8010074:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8010078:	2b00      	cmp	r3, #0
 801007a:	d002      	beq.n	8010082 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 801007c:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8010080:	e021      	b.n	80100c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8010082:	697b      	ldr	r3, [r7, #20]
 8010084:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8010088:	2b00      	cmp	r3, #0
 801008a:	d002      	beq.n	8010092 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 801008c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8010090:	e019      	b.n	80100c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8010092:	697b      	ldr	r3, [r7, #20]
 8010094:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8010098:	2b00      	cmp	r3, #0
 801009a:	d002      	beq.n	80100a2 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 801009c:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80100a0:	e011      	b.n	80100c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80100a2:	697b      	ldr	r3, [r7, #20]
 80100a4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80100a8:	2b00      	cmp	r3, #0
 80100aa:	d002      	beq.n	80100b2 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 80100ac:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80100b0:	e009      	b.n	80100c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 80100b2:	697b      	ldr	r3, [r7, #20]
 80100b4:	f003 0308 	and.w	r3, r3, #8
 80100b8:	2b00      	cmp	r3, #0
 80100ba:	d002      	beq.n	80100c2 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 80100bc:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 80100c0:	e001      	b.n	80100c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80100c2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 80100c6:	4618      	mov	r0, r3
 80100c8:	3720      	adds	r7, #32
 80100ca:	46bd      	mov	sp, r7
 80100cc:	bd80      	pop	{r7, pc}
 80100ce:	bf00      	nop
 80100d0:	24000058 	.word	0x24000058
 80100d4:	10624dd3 	.word	0x10624dd3
 80100d8:	00200045 	.word	0x00200045
 80100dc:	002000c5 	.word	0x002000c5
 80100e0:	fdffe008 	.word	0xfdffe008

080100e4 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 80100e4:	b480      	push	{r7}
 80100e6:	b085      	sub	sp, #20
 80100e8:	af00      	add	r7, sp, #0
 80100ea:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80100ec:	4b1f      	ldr	r3, [pc, #124]	@ (801016c <SDMMC_GetCmdResp2+0x88>)
 80100ee:	681b      	ldr	r3, [r3, #0]
 80100f0:	4a1f      	ldr	r2, [pc, #124]	@ (8010170 <SDMMC_GetCmdResp2+0x8c>)
 80100f2:	fba2 2303 	umull	r2, r3, r2, r3
 80100f6:	0a5b      	lsrs	r3, r3, #9
 80100f8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80100fc:	fb02 f303 	mul.w	r3, r2, r3
 8010100:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8010102:	68fb      	ldr	r3, [r7, #12]
 8010104:	1e5a      	subs	r2, r3, #1
 8010106:	60fa      	str	r2, [r7, #12]
 8010108:	2b00      	cmp	r3, #0
 801010a:	d102      	bne.n	8010112 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 801010c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8010110:	e026      	b.n	8010160 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 8010112:	687b      	ldr	r3, [r7, #4]
 8010114:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010116:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8010118:	68bb      	ldr	r3, [r7, #8]
 801011a:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 801011e:	2b00      	cmp	r3, #0
 8010120:	d0ef      	beq.n	8010102 <SDMMC_GetCmdResp2+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8010122:	68bb      	ldr	r3, [r7, #8]
 8010124:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8010128:	2b00      	cmp	r3, #0
 801012a:	d1ea      	bne.n	8010102 <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 801012c:	687b      	ldr	r3, [r7, #4]
 801012e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010130:	f003 0304 	and.w	r3, r3, #4
 8010134:	2b00      	cmp	r3, #0
 8010136:	d004      	beq.n	8010142 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8010138:	687b      	ldr	r3, [r7, #4]
 801013a:	2204      	movs	r2, #4
 801013c:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801013e:	2304      	movs	r3, #4
 8010140:	e00e      	b.n	8010160 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8010142:	687b      	ldr	r3, [r7, #4]
 8010144:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010146:	f003 0301 	and.w	r3, r3, #1
 801014a:	2b00      	cmp	r3, #0
 801014c:	d004      	beq.n	8010158 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 801014e:	687b      	ldr	r3, [r7, #4]
 8010150:	2201      	movs	r2, #1
 8010152:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010154:	2301      	movs	r3, #1
 8010156:	e003      	b.n	8010160 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8010158:	687b      	ldr	r3, [r7, #4]
 801015a:	4a06      	ldr	r2, [pc, #24]	@ (8010174 <SDMMC_GetCmdResp2+0x90>)
 801015c:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 801015e:	2300      	movs	r3, #0
}
 8010160:	4618      	mov	r0, r3
 8010162:	3714      	adds	r7, #20
 8010164:	46bd      	mov	sp, r7
 8010166:	f85d 7b04 	ldr.w	r7, [sp], #4
 801016a:	4770      	bx	lr
 801016c:	24000058 	.word	0x24000058
 8010170:	10624dd3 	.word	0x10624dd3
 8010174:	002000c5 	.word	0x002000c5

08010178 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8010178:	b480      	push	{r7}
 801017a:	b085      	sub	sp, #20
 801017c:	af00      	add	r7, sp, #0
 801017e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8010180:	4b1a      	ldr	r3, [pc, #104]	@ (80101ec <SDMMC_GetCmdResp3+0x74>)
 8010182:	681b      	ldr	r3, [r3, #0]
 8010184:	4a1a      	ldr	r2, [pc, #104]	@ (80101f0 <SDMMC_GetCmdResp3+0x78>)
 8010186:	fba2 2303 	umull	r2, r3, r2, r3
 801018a:	0a5b      	lsrs	r3, r3, #9
 801018c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010190:	fb02 f303 	mul.w	r3, r2, r3
 8010194:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8010196:	68fb      	ldr	r3, [r7, #12]
 8010198:	1e5a      	subs	r2, r3, #1
 801019a:	60fa      	str	r2, [r7, #12]
 801019c:	2b00      	cmp	r3, #0
 801019e:	d102      	bne.n	80101a6 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80101a0:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80101a4:	e01b      	b.n	80101de <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 80101a6:	687b      	ldr	r3, [r7, #4]
 80101a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80101aa:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80101ac:	68bb      	ldr	r3, [r7, #8]
 80101ae:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 80101b2:	2b00      	cmp	r3, #0
 80101b4:	d0ef      	beq.n	8010196 <SDMMC_GetCmdResp3+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 80101b6:	68bb      	ldr	r3, [r7, #8]
 80101b8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80101bc:	2b00      	cmp	r3, #0
 80101be:	d1ea      	bne.n	8010196 <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80101c0:	687b      	ldr	r3, [r7, #4]
 80101c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80101c4:	f003 0304 	and.w	r3, r3, #4
 80101c8:	2b00      	cmp	r3, #0
 80101ca:	d004      	beq.n	80101d6 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80101cc:	687b      	ldr	r3, [r7, #4]
 80101ce:	2204      	movs	r2, #4
 80101d0:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80101d2:	2304      	movs	r3, #4
 80101d4:	e003      	b.n	80101de <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80101d6:	687b      	ldr	r3, [r7, #4]
 80101d8:	4a06      	ldr	r2, [pc, #24]	@ (80101f4 <SDMMC_GetCmdResp3+0x7c>)
 80101da:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 80101dc:	2300      	movs	r3, #0
}
 80101de:	4618      	mov	r0, r3
 80101e0:	3714      	adds	r7, #20
 80101e2:	46bd      	mov	sp, r7
 80101e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101e8:	4770      	bx	lr
 80101ea:	bf00      	nop
 80101ec:	24000058 	.word	0x24000058
 80101f0:	10624dd3 	.word	0x10624dd3
 80101f4:	002000c5 	.word	0x002000c5

080101f8 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 80101f8:	b580      	push	{r7, lr}
 80101fa:	b088      	sub	sp, #32
 80101fc:	af00      	add	r7, sp, #0
 80101fe:	60f8      	str	r0, [r7, #12]
 8010200:	460b      	mov	r3, r1
 8010202:	607a      	str	r2, [r7, #4]
 8010204:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8010206:	4b35      	ldr	r3, [pc, #212]	@ (80102dc <SDMMC_GetCmdResp6+0xe4>)
 8010208:	681b      	ldr	r3, [r3, #0]
 801020a:	4a35      	ldr	r2, [pc, #212]	@ (80102e0 <SDMMC_GetCmdResp6+0xe8>)
 801020c:	fba2 2303 	umull	r2, r3, r2, r3
 8010210:	0a5b      	lsrs	r3, r3, #9
 8010212:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010216:	fb02 f303 	mul.w	r3, r2, r3
 801021a:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 801021c:	69fb      	ldr	r3, [r7, #28]
 801021e:	1e5a      	subs	r2, r3, #1
 8010220:	61fa      	str	r2, [r7, #28]
 8010222:	2b00      	cmp	r3, #0
 8010224:	d102      	bne.n	801022c <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010226:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 801022a:	e052      	b.n	80102d2 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 801022c:	68fb      	ldr	r3, [r7, #12]
 801022e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010230:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8010232:	69bb      	ldr	r3, [r7, #24]
 8010234:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8010238:	2b00      	cmp	r3, #0
 801023a:	d0ef      	beq.n	801021c <SDMMC_GetCmdResp6+0x24>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 801023c:	69bb      	ldr	r3, [r7, #24]
 801023e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8010242:	2b00      	cmp	r3, #0
 8010244:	d1ea      	bne.n	801021c <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8010246:	68fb      	ldr	r3, [r7, #12]
 8010248:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801024a:	f003 0304 	and.w	r3, r3, #4
 801024e:	2b00      	cmp	r3, #0
 8010250:	d004      	beq.n	801025c <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8010252:	68fb      	ldr	r3, [r7, #12]
 8010254:	2204      	movs	r2, #4
 8010256:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010258:	2304      	movs	r3, #4
 801025a:	e03a      	b.n	80102d2 <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 801025c:	68fb      	ldr	r3, [r7, #12]
 801025e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010260:	f003 0301 	and.w	r3, r3, #1
 8010264:	2b00      	cmp	r3, #0
 8010266:	d004      	beq.n	8010272 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8010268:	68fb      	ldr	r3, [r7, #12]
 801026a:	2201      	movs	r2, #1
 801026c:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 801026e:	2301      	movs	r3, #1
 8010270:	e02f      	b.n	80102d2 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8010272:	68f8      	ldr	r0, [r7, #12]
 8010274:	f7ff fb7c 	bl	800f970 <SDMMC_GetCommandResponse>
 8010278:	4603      	mov	r3, r0
 801027a:	461a      	mov	r2, r3
 801027c:	7afb      	ldrb	r3, [r7, #11]
 801027e:	4293      	cmp	r3, r2
 8010280:	d001      	beq.n	8010286 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010282:	2301      	movs	r3, #1
 8010284:	e025      	b.n	80102d2 <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8010286:	68fb      	ldr	r3, [r7, #12]
 8010288:	4a16      	ldr	r2, [pc, #88]	@ (80102e4 <SDMMC_GetCmdResp6+0xec>)
 801028a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 801028c:	2100      	movs	r1, #0
 801028e:	68f8      	ldr	r0, [r7, #12]
 8010290:	f7ff fb7b 	bl	800f98a <SDMMC_GetResponse>
 8010294:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 8010296:	697b      	ldr	r3, [r7, #20]
 8010298:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 801029c:	2b00      	cmp	r3, #0
 801029e:	d106      	bne.n	80102ae <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 80102a0:	697b      	ldr	r3, [r7, #20]
 80102a2:	0c1b      	lsrs	r3, r3, #16
 80102a4:	b29a      	uxth	r2, r3
 80102a6:	687b      	ldr	r3, [r7, #4]
 80102a8:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 80102aa:	2300      	movs	r3, #0
 80102ac:	e011      	b.n	80102d2 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 80102ae:	697b      	ldr	r3, [r7, #20]
 80102b0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80102b4:	2b00      	cmp	r3, #0
 80102b6:	d002      	beq.n	80102be <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80102b8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80102bc:	e009      	b.n	80102d2 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 80102be:	697b      	ldr	r3, [r7, #20]
 80102c0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80102c4:	2b00      	cmp	r3, #0
 80102c6:	d002      	beq.n	80102ce <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80102c8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80102cc:	e001      	b.n	80102d2 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80102ce:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 80102d2:	4618      	mov	r0, r3
 80102d4:	3720      	adds	r7, #32
 80102d6:	46bd      	mov	sp, r7
 80102d8:	bd80      	pop	{r7, pc}
 80102da:	bf00      	nop
 80102dc:	24000058 	.word	0x24000058
 80102e0:	10624dd3 	.word	0x10624dd3
 80102e4:	002000c5 	.word	0x002000c5

080102e8 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 80102e8:	b480      	push	{r7}
 80102ea:	b085      	sub	sp, #20
 80102ec:	af00      	add	r7, sp, #0
 80102ee:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80102f0:	4b22      	ldr	r3, [pc, #136]	@ (801037c <SDMMC_GetCmdResp7+0x94>)
 80102f2:	681b      	ldr	r3, [r3, #0]
 80102f4:	4a22      	ldr	r2, [pc, #136]	@ (8010380 <SDMMC_GetCmdResp7+0x98>)
 80102f6:	fba2 2303 	umull	r2, r3, r2, r3
 80102fa:	0a5b      	lsrs	r3, r3, #9
 80102fc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010300:	fb02 f303 	mul.w	r3, r2, r3
 8010304:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8010306:	68fb      	ldr	r3, [r7, #12]
 8010308:	1e5a      	subs	r2, r3, #1
 801030a:	60fa      	str	r2, [r7, #12]
 801030c:	2b00      	cmp	r3, #0
 801030e:	d102      	bne.n	8010316 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010310:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8010314:	e02c      	b.n	8010370 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 8010316:	687b      	ldr	r3, [r7, #4]
 8010318:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801031a:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 801031c:	68bb      	ldr	r3, [r7, #8]
 801031e:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8010322:	2b00      	cmp	r3, #0
 8010324:	d0ef      	beq.n	8010306 <SDMMC_GetCmdResp7+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8010326:	68bb      	ldr	r3, [r7, #8]
 8010328:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 801032c:	2b00      	cmp	r3, #0
 801032e:	d1ea      	bne.n	8010306 <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8010330:	687b      	ldr	r3, [r7, #4]
 8010332:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010334:	f003 0304 	and.w	r3, r3, #4
 8010338:	2b00      	cmp	r3, #0
 801033a:	d004      	beq.n	8010346 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 801033c:	687b      	ldr	r3, [r7, #4]
 801033e:	2204      	movs	r2, #4
 8010340:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010342:	2304      	movs	r3, #4
 8010344:	e014      	b.n	8010370 <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8010346:	687b      	ldr	r3, [r7, #4]
 8010348:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801034a:	f003 0301 	and.w	r3, r3, #1
 801034e:	2b00      	cmp	r3, #0
 8010350:	d004      	beq.n	801035c <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8010352:	687b      	ldr	r3, [r7, #4]
 8010354:	2201      	movs	r2, #1
 8010356:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010358:	2301      	movs	r3, #1
 801035a:	e009      	b.n	8010370 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 801035c:	687b      	ldr	r3, [r7, #4]
 801035e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010360:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010364:	2b00      	cmp	r3, #0
 8010366:	d002      	beq.n	801036e <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8010368:	687b      	ldr	r3, [r7, #4]
 801036a:	2240      	movs	r2, #64	@ 0x40
 801036c:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 801036e:	2300      	movs	r3, #0

}
 8010370:	4618      	mov	r0, r3
 8010372:	3714      	adds	r7, #20
 8010374:	46bd      	mov	sp, r7
 8010376:	f85d 7b04 	ldr.w	r7, [sp], #4
 801037a:	4770      	bx	lr
 801037c:	24000058 	.word	0x24000058
 8010380:	10624dd3 	.word	0x10624dd3

08010384 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8010384:	b480      	push	{r7}
 8010386:	b085      	sub	sp, #20
 8010388:	af00      	add	r7, sp, #0
 801038a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 801038c:	4b11      	ldr	r3, [pc, #68]	@ (80103d4 <SDMMC_GetCmdError+0x50>)
 801038e:	681b      	ldr	r3, [r3, #0]
 8010390:	4a11      	ldr	r2, [pc, #68]	@ (80103d8 <SDMMC_GetCmdError+0x54>)
 8010392:	fba2 2303 	umull	r2, r3, r2, r3
 8010396:	0a5b      	lsrs	r3, r3, #9
 8010398:	f241 3288 	movw	r2, #5000	@ 0x1388
 801039c:	fb02 f303 	mul.w	r3, r2, r3
 80103a0:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 80103a2:	68fb      	ldr	r3, [r7, #12]
 80103a4:	1e5a      	subs	r2, r3, #1
 80103a6:	60fa      	str	r2, [r7, #12]
 80103a8:	2b00      	cmp	r3, #0
 80103aa:	d102      	bne.n	80103b2 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80103ac:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80103b0:	e009      	b.n	80103c6 <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 80103b2:	687b      	ldr	r3, [r7, #4]
 80103b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80103b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80103ba:	2b00      	cmp	r3, #0
 80103bc:	d0f1      	beq.n	80103a2 <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80103be:	687b      	ldr	r3, [r7, #4]
 80103c0:	4a06      	ldr	r2, [pc, #24]	@ (80103dc <SDMMC_GetCmdError+0x58>)
 80103c2:	639a      	str	r2, [r3, #56]	@ 0x38

  return SDMMC_ERROR_NONE;
 80103c4:	2300      	movs	r3, #0
}
 80103c6:	4618      	mov	r0, r3
 80103c8:	3714      	adds	r7, #20
 80103ca:	46bd      	mov	sp, r7
 80103cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103d0:	4770      	bx	lr
 80103d2:	bf00      	nop
 80103d4:	24000058 	.word	0x24000058
 80103d8:	10624dd3 	.word	0x10624dd3
 80103dc:	002000c5 	.word	0x002000c5

080103e0 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80103e0:	b580      	push	{r7, lr}
 80103e2:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 80103e4:	4904      	ldr	r1, [pc, #16]	@ (80103f8 <MX_FATFS_Init+0x18>)
 80103e6:	4805      	ldr	r0, [pc, #20]	@ (80103fc <MX_FATFS_Init+0x1c>)
 80103e8:	f002 fccc 	bl	8012d84 <FATFS_LinkDriver>
 80103ec:	4603      	mov	r3, r0
 80103ee:	461a      	mov	r2, r3
 80103f0:	4b03      	ldr	r3, [pc, #12]	@ (8010400 <MX_FATFS_Init+0x20>)
 80103f2:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80103f4:	bf00      	nop
 80103f6:	bd80      	pop	{r7, pc}
 80103f8:	240006e8 	.word	0x240006e8
 80103fc:	0801494c 	.word	0x0801494c
 8010400:	240006e4 	.word	0x240006e4

08010404 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8010404:	b480      	push	{r7}
 8010406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8010408:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 801040a:	4618      	mov	r0, r3
 801040c:	46bd      	mov	sp, r7
 801040e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010412:	4770      	bx	lr

08010414 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8010414:	b580      	push	{r7, lr}
 8010416:	b086      	sub	sp, #24
 8010418:	af00      	add	r7, sp, #0
 801041a:	60f8      	str	r0, [r7, #12]
 801041c:	60b9      	str	r1, [r7, #8]
 801041e:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8010420:	2300      	movs	r3, #0
 8010422:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8010424:	687b      	ldr	r3, [r7, #4]
 8010426:	68ba      	ldr	r2, [r7, #8]
 8010428:	68f9      	ldr	r1, [r7, #12]
 801042a:	4806      	ldr	r0, [pc, #24]	@ (8010444 <BSP_SD_ReadBlocks_DMA+0x30>)
 801042c:	f7fc f95e 	bl	800c6ec <HAL_SD_ReadBlocks_DMA>
 8010430:	4603      	mov	r3, r0
 8010432:	2b00      	cmp	r3, #0
 8010434:	d001      	beq.n	801043a <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8010436:	2301      	movs	r3, #1
 8010438:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 801043a:	7dfb      	ldrb	r3, [r7, #23]
}
 801043c:	4618      	mov	r0, r3
 801043e:	3718      	adds	r7, #24
 8010440:	46bd      	mov	sp, r7
 8010442:	bd80      	pop	{r7, pc}
 8010444:	2400057c 	.word	0x2400057c

08010448 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8010448:	b580      	push	{r7, lr}
 801044a:	b086      	sub	sp, #24
 801044c:	af00      	add	r7, sp, #0
 801044e:	60f8      	str	r0, [r7, #12]
 8010450:	60b9      	str	r1, [r7, #8]
 8010452:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8010454:	2300      	movs	r3, #0
 8010456:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8010458:	687b      	ldr	r3, [r7, #4]
 801045a:	68ba      	ldr	r2, [r7, #8]
 801045c:	68f9      	ldr	r1, [r7, #12]
 801045e:	4806      	ldr	r0, [pc, #24]	@ (8010478 <BSP_SD_WriteBlocks_DMA+0x30>)
 8010460:	f7fc f9ec 	bl	800c83c <HAL_SD_WriteBlocks_DMA>
 8010464:	4603      	mov	r3, r0
 8010466:	2b00      	cmp	r3, #0
 8010468:	d001      	beq.n	801046e <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 801046a:	2301      	movs	r3, #1
 801046c:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 801046e:	7dfb      	ldrb	r3, [r7, #23]
}
 8010470:	4618      	mov	r0, r3
 8010472:	3718      	adds	r7, #24
 8010474:	46bd      	mov	sp, r7
 8010476:	bd80      	pop	{r7, pc}
 8010478:	2400057c 	.word	0x2400057c

0801047c <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 801047c:	b580      	push	{r7, lr}
 801047e:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8010480:	4805      	ldr	r0, [pc, #20]	@ (8010498 <BSP_SD_GetCardState+0x1c>)
 8010482:	f7fc ffe5 	bl	800d450 <HAL_SD_GetCardState>
 8010486:	4603      	mov	r3, r0
 8010488:	2b04      	cmp	r3, #4
 801048a:	bf14      	ite	ne
 801048c:	2301      	movne	r3, #1
 801048e:	2300      	moveq	r3, #0
 8010490:	b2db      	uxtb	r3, r3
}
 8010492:	4618      	mov	r0, r3
 8010494:	bd80      	pop	{r7, pc}
 8010496:	bf00      	nop
 8010498:	2400057c 	.word	0x2400057c

0801049c <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 801049c:	b580      	push	{r7, lr}
 801049e:	b082      	sub	sp, #8
 80104a0:	af00      	add	r7, sp, #0
 80104a2:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 80104a4:	6879      	ldr	r1, [r7, #4]
 80104a6:	4803      	ldr	r0, [pc, #12]	@ (80104b4 <BSP_SD_GetCardInfo+0x18>)
 80104a8:	f7fc fe94 	bl	800d1d4 <HAL_SD_GetCardInfo>
}
 80104ac:	bf00      	nop
 80104ae:	3708      	adds	r7, #8
 80104b0:	46bd      	mov	sp, r7
 80104b2:	bd80      	pop	{r7, pc}
 80104b4:	2400057c 	.word	0x2400057c

080104b8 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 80104b8:	b580      	push	{r7, lr}
 80104ba:	b082      	sub	sp, #8
 80104bc:	af00      	add	r7, sp, #0
 80104be:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 80104c0:	f000 fad8 	bl	8010a74 <BSP_SD_WriteCpltCallback>
}
 80104c4:	bf00      	nop
 80104c6:	3708      	adds	r7, #8
 80104c8:	46bd      	mov	sp, r7
 80104ca:	bd80      	pop	{r7, pc}

080104cc <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 80104cc:	b580      	push	{r7, lr}
 80104ce:	b082      	sub	sp, #8
 80104d0:	af00      	add	r7, sp, #0
 80104d2:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 80104d4:	f000 fada 	bl	8010a8c <BSP_SD_ReadCpltCallback>
}
 80104d8:	bf00      	nop
 80104da:	3708      	adds	r7, #8
 80104dc:	46bd      	mov	sp, r7
 80104de:	bd80      	pop	{r7, pc}

080104e0 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 80104e0:	b580      	push	{r7, lr}
 80104e2:	b084      	sub	sp, #16
 80104e4:	af00      	add	r7, sp, #0
 80104e6:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 80104e8:	f7f5 fb32 	bl	8005b50 <HAL_GetTick>
 80104ec:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 80104ee:	e006      	b.n	80104fe <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80104f0:	f7ff ffc4 	bl	801047c <BSP_SD_GetCardState>
 80104f4:	4603      	mov	r3, r0
 80104f6:	2b00      	cmp	r3, #0
 80104f8:	d101      	bne.n	80104fe <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 80104fa:	2300      	movs	r3, #0
 80104fc:	e009      	b.n	8010512 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 80104fe:	f7f5 fb27 	bl	8005b50 <HAL_GetTick>
 8010502:	4602      	mov	r2, r0
 8010504:	68fb      	ldr	r3, [r7, #12]
 8010506:	1ad3      	subs	r3, r2, r3
 8010508:	687a      	ldr	r2, [r7, #4]
 801050a:	429a      	cmp	r2, r3
 801050c:	d8f0      	bhi.n	80104f0 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 801050e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8010512:	4618      	mov	r0, r3
 8010514:	3710      	adds	r7, #16
 8010516:	46bd      	mov	sp, r7
 8010518:	bd80      	pop	{r7, pc}
	...

0801051c <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 801051c:	b580      	push	{r7, lr}
 801051e:	b082      	sub	sp, #8
 8010520:	af00      	add	r7, sp, #0
 8010522:	4603      	mov	r3, r0
 8010524:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8010526:	4b0b      	ldr	r3, [pc, #44]	@ (8010554 <SD_CheckStatus+0x38>)
 8010528:	2201      	movs	r2, #1
 801052a:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 801052c:	f7ff ffa6 	bl	801047c <BSP_SD_GetCardState>
 8010530:	4603      	mov	r3, r0
 8010532:	2b00      	cmp	r3, #0
 8010534:	d107      	bne.n	8010546 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8010536:	4b07      	ldr	r3, [pc, #28]	@ (8010554 <SD_CheckStatus+0x38>)
 8010538:	781b      	ldrb	r3, [r3, #0]
 801053a:	b2db      	uxtb	r3, r3
 801053c:	f023 0301 	bic.w	r3, r3, #1
 8010540:	b2da      	uxtb	r2, r3
 8010542:	4b04      	ldr	r3, [pc, #16]	@ (8010554 <SD_CheckStatus+0x38>)
 8010544:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8010546:	4b03      	ldr	r3, [pc, #12]	@ (8010554 <SD_CheckStatus+0x38>)
 8010548:	781b      	ldrb	r3, [r3, #0]
 801054a:	b2db      	uxtb	r3, r3
}
 801054c:	4618      	mov	r0, r3
 801054e:	3708      	adds	r7, #8
 8010550:	46bd      	mov	sp, r7
 8010552:	bd80      	pop	{r7, pc}
 8010554:	24000065 	.word	0x24000065

08010558 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8010558:	b580      	push	{r7, lr}
 801055a:	b082      	sub	sp, #8
 801055c:	af00      	add	r7, sp, #0
 801055e:	4603      	mov	r3, r0
 8010560:	71fb      	strb	r3, [r7, #7]
  {
    Stat = SD_CheckStatus(lun);
  }

#else
  Stat = SD_CheckStatus(lun);
 8010562:	79fb      	ldrb	r3, [r7, #7]
 8010564:	4618      	mov	r0, r3
 8010566:	f7ff ffd9 	bl	801051c <SD_CheckStatus>
 801056a:	4603      	mov	r3, r0
 801056c:	461a      	mov	r2, r3
 801056e:	4b04      	ldr	r3, [pc, #16]	@ (8010580 <SD_initialize+0x28>)
 8010570:	701a      	strb	r2, [r3, #0]
#endif

  return Stat;
 8010572:	4b03      	ldr	r3, [pc, #12]	@ (8010580 <SD_initialize+0x28>)
 8010574:	781b      	ldrb	r3, [r3, #0]
 8010576:	b2db      	uxtb	r3, r3
}
 8010578:	4618      	mov	r0, r3
 801057a:	3708      	adds	r7, #8
 801057c:	46bd      	mov	sp, r7
 801057e:	bd80      	pop	{r7, pc}
 8010580:	24000065 	.word	0x24000065

08010584 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8010584:	b580      	push	{r7, lr}
 8010586:	b082      	sub	sp, #8
 8010588:	af00      	add	r7, sp, #0
 801058a:	4603      	mov	r3, r0
 801058c:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 801058e:	79fb      	ldrb	r3, [r7, #7]
 8010590:	4618      	mov	r0, r3
 8010592:	f7ff ffc3 	bl	801051c <SD_CheckStatus>
 8010596:	4603      	mov	r3, r0
}
 8010598:	4618      	mov	r0, r3
 801059a:	3708      	adds	r7, #8
 801059c:	46bd      	mov	sp, r7
 801059e:	bd80      	pop	{r7, pc}

080105a0 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 80105a0:	b580      	push	{r7, lr}
 80105a2:	b090      	sub	sp, #64	@ 0x40
 80105a4:	af00      	add	r7, sp, #0
 80105a6:	60b9      	str	r1, [r7, #8]
 80105a8:	607a      	str	r2, [r7, #4]
 80105aa:	603b      	str	r3, [r7, #0]
 80105ac:	4603      	mov	r3, r0
 80105ae:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80105b0:	2301      	movs	r3, #1
 80105b2:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 80105b6:	f247 5030 	movw	r0, #30000	@ 0x7530
 80105ba:	f7ff ff91 	bl	80104e0 <SD_CheckStatusWithTimeout>
 80105be:	4603      	mov	r3, r0
 80105c0:	2b00      	cmp	r3, #0
 80105c2:	da02      	bge.n	80105ca <SD_read+0x2a>
  {
    return res;
 80105c4:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80105c8:	e0ea      	b.n	80107a0 <SD_read+0x200>
  }

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
 80105ca:	68bb      	ldr	r3, [r7, #8]
 80105cc:	f003 0303 	and.w	r3, r3, #3
 80105d0:	2b00      	cmp	r3, #0
 80105d2:	d16d      	bne.n	80106b0 <SD_read+0x110>
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 80105d4:	683a      	ldr	r2, [r7, #0]
 80105d6:	6879      	ldr	r1, [r7, #4]
 80105d8:	68b8      	ldr	r0, [r7, #8]
 80105da:	f7ff ff1b 	bl	8010414 <BSP_SD_ReadBlocks_DMA>
 80105de:	4603      	mov	r3, r0
 80105e0:	2b00      	cmp	r3, #0
 80105e2:	f040 80db 	bne.w	801079c <SD_read+0x1fc>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 80105e6:	4b70      	ldr	r3, [pc, #448]	@ (80107a8 <SD_read+0x208>)
 80105e8:	2200      	movs	r2, #0
 80105ea:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 80105ec:	f7f5 fab0 	bl	8005b50 <HAL_GetTick>
 80105f0:	6378      	str	r0, [r7, #52]	@ 0x34
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 80105f2:	bf00      	nop
 80105f4:	4b6c      	ldr	r3, [pc, #432]	@ (80107a8 <SD_read+0x208>)
 80105f6:	681b      	ldr	r3, [r3, #0]
 80105f8:	2b00      	cmp	r3, #0
 80105fa:	d108      	bne.n	801060e <SD_read+0x6e>
 80105fc:	f7f5 faa8 	bl	8005b50 <HAL_GetTick>
 8010600:	4602      	mov	r2, r0
 8010602:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010604:	1ad3      	subs	r3, r2, r3
 8010606:	f247 522f 	movw	r2, #29999	@ 0x752f
 801060a:	4293      	cmp	r3, r2
 801060c:	d9f2      	bls.n	80105f4 <SD_read+0x54>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 801060e:	4b66      	ldr	r3, [pc, #408]	@ (80107a8 <SD_read+0x208>)
 8010610:	681b      	ldr	r3, [r3, #0]
 8010612:	2b00      	cmp	r3, #0
 8010614:	d103      	bne.n	801061e <SD_read+0x7e>
      {
        res = RES_ERROR;
 8010616:	2301      	movs	r3, #1
 8010618:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 801061c:	e0be      	b.n	801079c <SD_read+0x1fc>
      }
      else
      {
        ReadStatus = 0;
 801061e:	4b62      	ldr	r3, [pc, #392]	@ (80107a8 <SD_read+0x208>)
 8010620:	2200      	movs	r2, #0
 8010622:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8010624:	f7f5 fa94 	bl	8005b50 <HAL_GetTick>
 8010628:	6378      	str	r0, [r7, #52]	@ 0x34

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 801062a:	e037      	b.n	801069c <SD_read+0xfc>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 801062c:	f7ff ff26 	bl	801047c <BSP_SD_GetCardState>
 8010630:	4603      	mov	r3, r0
 8010632:	2b00      	cmp	r3, #0
 8010634:	d132      	bne.n	801069c <SD_read+0xfc>
          {
            res = RES_OK;
 8010636:	2300      	movs	r3, #0
 8010638:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
            /*
            the SCB_InvalidateDCache_by_Addr() requires a 32-Byte aligned address,
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
 801063c:	68bb      	ldr	r3, [r7, #8]
 801063e:	f023 031f 	bic.w	r3, r3, #31
 8010642:	633b      	str	r3, [r7, #48]	@ 0x30
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
 8010644:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010646:	683a      	ldr	r2, [r7, #0]
 8010648:	0251      	lsls	r1, r2, #9
 801064a:	68b8      	ldr	r0, [r7, #8]
 801064c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801064e:	1a82      	subs	r2, r0, r2
 8010650:	440a      	add	r2, r1
 8010652:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8010654:	62ba      	str	r2, [r7, #40]	@ 0x28
    if ( dsize > 0 ) { 
 8010656:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010658:	2b00      	cmp	r3, #0
 801065a:	dd1d      	ble.n	8010698 <SD_read+0xf8>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 801065c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801065e:	f003 021f 	and.w	r2, r3, #31
 8010662:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010664:	4413      	add	r3, r2
 8010666:	627b      	str	r3, [r7, #36]	@ 0x24
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8010668:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801066a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("dsb 0xF":::"memory");
 801066c:	f3bf 8f4f 	dsb	sy
}
 8010670:	bf00      	nop
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8010672:	4a4e      	ldr	r2, [pc, #312]	@ (80107ac <SD_read+0x20c>)
 8010674:	6a3b      	ldr	r3, [r7, #32]
 8010676:	f8c2 325c 	str.w	r3, [r2, #604]	@ 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 801067a:	6a3b      	ldr	r3, [r7, #32]
 801067c:	3320      	adds	r3, #32
 801067e:	623b      	str	r3, [r7, #32]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8010680:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010682:	3b20      	subs	r3, #32
 8010684:	627b      	str	r3, [r7, #36]	@ 0x24
      } while ( op_size > 0 );
 8010686:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010688:	2b00      	cmp	r3, #0
 801068a:	dcf2      	bgt.n	8010672 <SD_read+0xd2>
  __ASM volatile ("dsb 0xF":::"memory");
 801068c:	f3bf 8f4f 	dsb	sy
}
 8010690:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8010692:	f3bf 8f6f 	isb	sy
}
 8010696:	bf00      	nop
}
 8010698:	bf00      	nop
#endif
            break;
 801069a:	e07f      	b.n	801079c <SD_read+0x1fc>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 801069c:	f7f5 fa58 	bl	8005b50 <HAL_GetTick>
 80106a0:	4602      	mov	r2, r0
 80106a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80106a4:	1ad3      	subs	r3, r2, r3
 80106a6:	f247 522f 	movw	r2, #29999	@ 0x752f
 80106aa:	4293      	cmp	r3, r2
 80106ac:	d9be      	bls.n	801062c <SD_read+0x8c>
 80106ae:	e075      	b.n	801079c <SD_read+0x1fc>
    else
    {
      /* Slow path, fetch each sector a part and memcpy to destination buffer */
      int i;

      for (i = 0; i < count; i++) {
 80106b0:	2300      	movs	r3, #0
 80106b2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80106b4:	e061      	b.n	801077a <SD_read+0x1da>
        ret = BSP_SD_ReadBlocks_DMA((uint32_t*)scratch, (uint32_t)sector++, 1);
 80106b6:	687b      	ldr	r3, [r7, #4]
 80106b8:	1c5a      	adds	r2, r3, #1
 80106ba:	607a      	str	r2, [r7, #4]
 80106bc:	2201      	movs	r2, #1
 80106be:	4619      	mov	r1, r3
 80106c0:	483b      	ldr	r0, [pc, #236]	@ (80107b0 <SD_read+0x210>)
 80106c2:	f7ff fea7 	bl	8010414 <BSP_SD_ReadBlocks_DMA>
 80106c6:	4603      	mov	r3, r0
 80106c8:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
        if (ret == MSD_OK) {
 80106cc:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 80106d0:	2b00      	cmp	r3, #0
 80106d2:	d157      	bne.n	8010784 <SD_read+0x1e4>
          /* wait until the read is successful or a timeout occurs */

          timeout = HAL_GetTick();
 80106d4:	f7f5 fa3c 	bl	8005b50 <HAL_GetTick>
 80106d8:	6378      	str	r0, [r7, #52]	@ 0x34
          while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 80106da:	bf00      	nop
 80106dc:	4b32      	ldr	r3, [pc, #200]	@ (80107a8 <SD_read+0x208>)
 80106de:	681b      	ldr	r3, [r3, #0]
 80106e0:	2b00      	cmp	r3, #0
 80106e2:	d108      	bne.n	80106f6 <SD_read+0x156>
 80106e4:	f7f5 fa34 	bl	8005b50 <HAL_GetTick>
 80106e8:	4602      	mov	r2, r0
 80106ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80106ec:	1ad3      	subs	r3, r2, r3
 80106ee:	f247 522f 	movw	r2, #29999	@ 0x752f
 80106f2:	4293      	cmp	r3, r2
 80106f4:	d9f2      	bls.n	80106dc <SD_read+0x13c>
          {
          }
          if (ReadStatus == 0)
 80106f6:	4b2c      	ldr	r3, [pc, #176]	@ (80107a8 <SD_read+0x208>)
 80106f8:	681b      	ldr	r3, [r3, #0]
 80106fa:	2b00      	cmp	r3, #0
 80106fc:	d103      	bne.n	8010706 <SD_read+0x166>
          {
            res = RES_ERROR;
 80106fe:	2301      	movs	r3, #1
 8010700:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
            break;
 8010704:	e03f      	b.n	8010786 <SD_read+0x1e6>
          }
          ReadStatus = 0;
 8010706:	4b28      	ldr	r3, [pc, #160]	@ (80107a8 <SD_read+0x208>)
 8010708:	2200      	movs	r2, #0
 801070a:	601a      	str	r2, [r3, #0]
 801070c:	4b28      	ldr	r3, [pc, #160]	@ (80107b0 <SD_read+0x210>)
 801070e:	61fb      	str	r3, [r7, #28]
 8010710:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8010714:	61bb      	str	r3, [r7, #24]
    if ( dsize > 0 ) { 
 8010716:	69bb      	ldr	r3, [r7, #24]
 8010718:	2b00      	cmp	r3, #0
 801071a:	dd1d      	ble.n	8010758 <SD_read+0x1b8>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 801071c:	69fb      	ldr	r3, [r7, #28]
 801071e:	f003 021f 	and.w	r2, r3, #31
 8010722:	69bb      	ldr	r3, [r7, #24]
 8010724:	4413      	add	r3, r2
 8010726:	617b      	str	r3, [r7, #20]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8010728:	69fb      	ldr	r3, [r7, #28]
 801072a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 801072c:	f3bf 8f4f 	dsb	sy
}
 8010730:	bf00      	nop
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8010732:	4a1e      	ldr	r2, [pc, #120]	@ (80107ac <SD_read+0x20c>)
 8010734:	693b      	ldr	r3, [r7, #16]
 8010736:	f8c2 325c 	str.w	r3, [r2, #604]	@ 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 801073a:	693b      	ldr	r3, [r7, #16]
 801073c:	3320      	adds	r3, #32
 801073e:	613b      	str	r3, [r7, #16]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8010740:	697b      	ldr	r3, [r7, #20]
 8010742:	3b20      	subs	r3, #32
 8010744:	617b      	str	r3, [r7, #20]
      } while ( op_size > 0 );
 8010746:	697b      	ldr	r3, [r7, #20]
 8010748:	2b00      	cmp	r3, #0
 801074a:	dcf2      	bgt.n	8010732 <SD_read+0x192>
  __ASM volatile ("dsb 0xF":::"memory");
 801074c:	f3bf 8f4f 	dsb	sy
}
 8010750:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8010752:	f3bf 8f6f 	isb	sy
}
 8010756:	bf00      	nop
}
 8010758:	bf00      	nop
          *
          * invalidate the scratch buffer before the next read to get the actual data instead of the cached one
          */
          SCB_InvalidateDCache_by_Addr((uint32_t*)scratch, BLOCKSIZE);
#endif
          memcpy(buff, scratch, BLOCKSIZE);
 801075a:	68bb      	ldr	r3, [r7, #8]
 801075c:	4a14      	ldr	r2, [pc, #80]	@ (80107b0 <SD_read+0x210>)
 801075e:	4618      	mov	r0, r3
 8010760:	4611      	mov	r1, r2
 8010762:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8010766:	461a      	mov	r2, r3
 8010768:	f003 f8ff 	bl	801396a <memcpy>
          buff += BLOCKSIZE;
 801076c:	68bb      	ldr	r3, [r7, #8]
 801076e:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8010772:	60bb      	str	r3, [r7, #8]
      for (i = 0; i < count; i++) {
 8010774:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010776:	3301      	adds	r3, #1
 8010778:	63bb      	str	r3, [r7, #56]	@ 0x38
 801077a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801077c:	683a      	ldr	r2, [r7, #0]
 801077e:	429a      	cmp	r2, r3
 8010780:	d899      	bhi.n	80106b6 <SD_read+0x116>
 8010782:	e000      	b.n	8010786 <SD_read+0x1e6>
        }
        else
        {
          break;
 8010784:	bf00      	nop
        }
      }

      if ((i == count) && (ret == MSD_OK))
 8010786:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010788:	683a      	ldr	r2, [r7, #0]
 801078a:	429a      	cmp	r2, r3
 801078c:	d106      	bne.n	801079c <SD_read+0x1fc>
 801078e:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8010792:	2b00      	cmp	r3, #0
 8010794:	d102      	bne.n	801079c <SD_read+0x1fc>
        res = RES_OK;
 8010796:	2300      	movs	r3, #0
 8010798:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    }
#endif

  return res;
 801079c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 80107a0:	4618      	mov	r0, r3
 80107a2:	3740      	adds	r7, #64	@ 0x40
 80107a4:	46bd      	mov	sp, r7
 80107a6:	bd80      	pop	{r7, pc}
 80107a8:	24000d64 	.word	0x24000d64
 80107ac:	e000ed00 	.word	0xe000ed00
 80107b0:	24000b60 	.word	0x24000b60

080107b4 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 80107b4:	b580      	push	{r7, lr}
 80107b6:	b090      	sub	sp, #64	@ 0x40
 80107b8:	af00      	add	r7, sp, #0
 80107ba:	60b9      	str	r1, [r7, #8]
 80107bc:	607a      	str	r2, [r7, #4]
 80107be:	603b      	str	r3, [r7, #0]
 80107c0:	4603      	mov	r3, r0
 80107c2:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80107c4:	2301      	movs	r3, #1
 80107c6:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 80107ca:	4b7b      	ldr	r3, [pc, #492]	@ (80109b8 <SD_write+0x204>)
 80107cc:	2200      	movs	r2, #0
 80107ce:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 80107d0:	f247 5030 	movw	r0, #30000	@ 0x7530
 80107d4:	f7ff fe84 	bl	80104e0 <SD_CheckStatusWithTimeout>
 80107d8:	4603      	mov	r3, r0
 80107da:	2b00      	cmp	r3, #0
 80107dc:	da02      	bge.n	80107e4 <SD_write+0x30>
  {
    return res;
 80107de:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80107e2:	e0e5      	b.n	80109b0 <SD_write+0x1fc>
  }

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
 80107e4:	68bb      	ldr	r3, [r7, #8]
 80107e6:	f003 0303 	and.w	r3, r3, #3
 80107ea:	2b00      	cmp	r3, #0
 80107ec:	d16a      	bne.n	80108c4 <SD_write+0x110>

    /*
    the SCB_CleanDCache_by_Addr() requires a 32-Byte aligned address
    adjust the address and the D-Cache size to clean accordingly.
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
 80107ee:	68bb      	ldr	r3, [r7, #8]
 80107f0:	f023 031f 	bic.w	r3, r3, #31
 80107f4:	633b      	str	r3, [r7, #48]	@ 0x30
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
 80107f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80107f8:	683a      	ldr	r2, [r7, #0]
 80107fa:	0251      	lsls	r1, r2, #9
 80107fc:	68b8      	ldr	r0, [r7, #8]
 80107fe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010800:	1a82      	subs	r2, r0, r2
 8010802:	440a      	add	r2, r1
 8010804:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8010806:	62ba      	str	r2, [r7, #40]	@ 0x28
    if ( dsize > 0 ) { 
 8010808:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801080a:	2b00      	cmp	r3, #0
 801080c:	dd1d      	ble.n	801084a <SD_write+0x96>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 801080e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010810:	f003 021f 	and.w	r2, r3, #31
 8010814:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010816:	4413      	add	r3, r2
 8010818:	627b      	str	r3, [r7, #36]	@ 0x24
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 801081a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801081c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("dsb 0xF":::"memory");
 801081e:	f3bf 8f4f 	dsb	sy
}
 8010822:	bf00      	nop
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8010824:	4a65      	ldr	r2, [pc, #404]	@ (80109bc <SD_write+0x208>)
 8010826:	6a3b      	ldr	r3, [r7, #32]
 8010828:	f8c2 3268 	str.w	r3, [r2, #616]	@ 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
 801082c:	6a3b      	ldr	r3, [r7, #32]
 801082e:	3320      	adds	r3, #32
 8010830:	623b      	str	r3, [r7, #32]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8010832:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010834:	3b20      	subs	r3, #32
 8010836:	627b      	str	r3, [r7, #36]	@ 0x24
      } while ( op_size > 0 );
 8010838:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801083a:	2b00      	cmp	r3, #0
 801083c:	dcf2      	bgt.n	8010824 <SD_write+0x70>
  __ASM volatile ("dsb 0xF":::"memory");
 801083e:	f3bf 8f4f 	dsb	sy
}
 8010842:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8010844:	f3bf 8f6f 	isb	sy
}
 8010848:	bf00      	nop
}
 801084a:	bf00      	nop
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 801084c:	683a      	ldr	r2, [r7, #0]
 801084e:	6879      	ldr	r1, [r7, #4]
 8010850:	68b8      	ldr	r0, [r7, #8]
 8010852:	f7ff fdf9 	bl	8010448 <BSP_SD_WriteBlocks_DMA>
 8010856:	4603      	mov	r3, r0
 8010858:	2b00      	cmp	r3, #0
 801085a:	f040 80a7 	bne.w	80109ac <SD_write+0x1f8>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 801085e:	f7f5 f977 	bl	8005b50 <HAL_GetTick>
 8010862:	6378      	str	r0, [r7, #52]	@ 0x34
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8010864:	bf00      	nop
 8010866:	4b54      	ldr	r3, [pc, #336]	@ (80109b8 <SD_write+0x204>)
 8010868:	681b      	ldr	r3, [r3, #0]
 801086a:	2b00      	cmp	r3, #0
 801086c:	d108      	bne.n	8010880 <SD_write+0xcc>
 801086e:	f7f5 f96f 	bl	8005b50 <HAL_GetTick>
 8010872:	4602      	mov	r2, r0
 8010874:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010876:	1ad3      	subs	r3, r2, r3
 8010878:	f247 522f 	movw	r2, #29999	@ 0x752f
 801087c:	4293      	cmp	r3, r2
 801087e:	d9f2      	bls.n	8010866 <SD_write+0xb2>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 8010880:	4b4d      	ldr	r3, [pc, #308]	@ (80109b8 <SD_write+0x204>)
 8010882:	681b      	ldr	r3, [r3, #0]
 8010884:	2b00      	cmp	r3, #0
 8010886:	d103      	bne.n	8010890 <SD_write+0xdc>
      {
        res = RES_ERROR;
 8010888:	2301      	movs	r3, #1
 801088a:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 801088e:	e08d      	b.n	80109ac <SD_write+0x1f8>
      }
      else
      {
        WriteStatus = 0;
 8010890:	4b49      	ldr	r3, [pc, #292]	@ (80109b8 <SD_write+0x204>)
 8010892:	2200      	movs	r2, #0
 8010894:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8010896:	f7f5 f95b 	bl	8005b50 <HAL_GetTick>
 801089a:	6378      	str	r0, [r7, #52]	@ 0x34

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 801089c:	e008      	b.n	80108b0 <SD_write+0xfc>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 801089e:	f7ff fded 	bl	801047c <BSP_SD_GetCardState>
 80108a2:	4603      	mov	r3, r0
 80108a4:	2b00      	cmp	r3, #0
 80108a6:	d103      	bne.n	80108b0 <SD_write+0xfc>
          {
            res = RES_OK;
 80108a8:	2300      	movs	r3, #0
 80108aa:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
            break;
 80108ae:	e07d      	b.n	80109ac <SD_write+0x1f8>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80108b0:	f7f5 f94e 	bl	8005b50 <HAL_GetTick>
 80108b4:	4602      	mov	r2, r0
 80108b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80108b8:	1ad3      	subs	r3, r2, r3
 80108ba:	f247 522f 	movw	r2, #29999	@ 0x752f
 80108be:	4293      	cmp	r3, r2
 80108c0:	d9ed      	bls.n	801089e <SD_write+0xea>
 80108c2:	e073      	b.n	80109ac <SD_write+0x1f8>
 80108c4:	4b3e      	ldr	r3, [pc, #248]	@ (80109c0 <SD_write+0x20c>)
 80108c6:	61fb      	str	r3, [r7, #28]
 80108c8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80108cc:	61bb      	str	r3, [r7, #24]
    if ( dsize > 0 ) { 
 80108ce:	69bb      	ldr	r3, [r7, #24]
 80108d0:	2b00      	cmp	r3, #0
 80108d2:	dd1d      	ble.n	8010910 <SD_write+0x15c>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 80108d4:	69fb      	ldr	r3, [r7, #28]
 80108d6:	f003 021f 	and.w	r2, r3, #31
 80108da:	69bb      	ldr	r3, [r7, #24]
 80108dc:	4413      	add	r3, r2
 80108de:	617b      	str	r3, [r7, #20]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 80108e0:	69fb      	ldr	r3, [r7, #28]
 80108e2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 80108e4:	f3bf 8f4f 	dsb	sy
}
 80108e8:	bf00      	nop
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 80108ea:	4a34      	ldr	r2, [pc, #208]	@ (80109bc <SD_write+0x208>)
 80108ec:	693b      	ldr	r3, [r7, #16]
 80108ee:	f8c2 325c 	str.w	r3, [r2, #604]	@ 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 80108f2:	693b      	ldr	r3, [r7, #16]
 80108f4:	3320      	adds	r3, #32
 80108f6:	613b      	str	r3, [r7, #16]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 80108f8:	697b      	ldr	r3, [r7, #20]
 80108fa:	3b20      	subs	r3, #32
 80108fc:	617b      	str	r3, [r7, #20]
      } while ( op_size > 0 );
 80108fe:	697b      	ldr	r3, [r7, #20]
 8010900:	2b00      	cmp	r3, #0
 8010902:	dcf2      	bgt.n	80108ea <SD_write+0x136>
  __ASM volatile ("dsb 0xF":::"memory");
 8010904:	f3bf 8f4f 	dsb	sy
}
 8010908:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 801090a:	f3bf 8f6f 	isb	sy
}
 801090e:	bf00      	nop
}
 8010910:	bf00      	nop
      * invalidate the scratch buffer before the next write to get the actual data instead of the cached one
      */
      SCB_InvalidateDCache_by_Addr((uint32_t*)scratch, BLOCKSIZE);
#endif

      for (i = 0; i < count; i++)
 8010912:	2300      	movs	r3, #0
 8010914:	63bb      	str	r3, [r7, #56]	@ 0x38
 8010916:	e036      	b.n	8010986 <SD_write+0x1d2>
      {
        WriteStatus = 0;
 8010918:	4b27      	ldr	r3, [pc, #156]	@ (80109b8 <SD_write+0x204>)
 801091a:	2200      	movs	r2, #0
 801091c:	601a      	str	r2, [r3, #0]

        memcpy((void *)scratch, (void *)buff, BLOCKSIZE);
 801091e:	4a28      	ldr	r2, [pc, #160]	@ (80109c0 <SD_write+0x20c>)
 8010920:	68bb      	ldr	r3, [r7, #8]
 8010922:	4610      	mov	r0, r2
 8010924:	4619      	mov	r1, r3
 8010926:	f44f 7300 	mov.w	r3, #512	@ 0x200
 801092a:	461a      	mov	r2, r3
 801092c:	f003 f81d 	bl	801396a <memcpy>
        buff += BLOCKSIZE;
 8010930:	68bb      	ldr	r3, [r7, #8]
 8010932:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8010936:	60bb      	str	r3, [r7, #8]

        ret = BSP_SD_WriteBlocks_DMA((uint32_t*)scratch, (uint32_t)sector++, 1);
 8010938:	687b      	ldr	r3, [r7, #4]
 801093a:	1c5a      	adds	r2, r3, #1
 801093c:	607a      	str	r2, [r7, #4]
 801093e:	2201      	movs	r2, #1
 8010940:	4619      	mov	r1, r3
 8010942:	481f      	ldr	r0, [pc, #124]	@ (80109c0 <SD_write+0x20c>)
 8010944:	f7ff fd80 	bl	8010448 <BSP_SD_WriteBlocks_DMA>
 8010948:	4603      	mov	r3, r0
 801094a:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
        if (ret == MSD_OK) {
 801094e:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8010952:	2b00      	cmp	r3, #0
 8010954:	d11c      	bne.n	8010990 <SD_write+0x1dc>
          /* wait for a message from the queue or a timeout */
          timeout = HAL_GetTick();
 8010956:	f7f5 f8fb 	bl	8005b50 <HAL_GetTick>
 801095a:	6378      	str	r0, [r7, #52]	@ 0x34
          while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 801095c:	bf00      	nop
 801095e:	4b16      	ldr	r3, [pc, #88]	@ (80109b8 <SD_write+0x204>)
 8010960:	681b      	ldr	r3, [r3, #0]
 8010962:	2b00      	cmp	r3, #0
 8010964:	d108      	bne.n	8010978 <SD_write+0x1c4>
 8010966:	f7f5 f8f3 	bl	8005b50 <HAL_GetTick>
 801096a:	4602      	mov	r2, r0
 801096c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801096e:	1ad3      	subs	r3, r2, r3
 8010970:	f247 522f 	movw	r2, #29999	@ 0x752f
 8010974:	4293      	cmp	r3, r2
 8010976:	d9f2      	bls.n	801095e <SD_write+0x1aa>
          {
          }
          if (WriteStatus == 0)
 8010978:	4b0f      	ldr	r3, [pc, #60]	@ (80109b8 <SD_write+0x204>)
 801097a:	681b      	ldr	r3, [r3, #0]
 801097c:	2b00      	cmp	r3, #0
 801097e:	d009      	beq.n	8010994 <SD_write+0x1e0>
      for (i = 0; i < count; i++)
 8010980:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010982:	3301      	adds	r3, #1
 8010984:	63bb      	str	r3, [r7, #56]	@ 0x38
 8010986:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010988:	683a      	ldr	r2, [r7, #0]
 801098a:	429a      	cmp	r2, r3
 801098c:	d8c4      	bhi.n	8010918 <SD_write+0x164>
 801098e:	e002      	b.n	8010996 <SD_write+0x1e2>
          }

        }
        else
        {
          break;
 8010990:	bf00      	nop
 8010992:	e000      	b.n	8010996 <SD_write+0x1e2>
            break;
 8010994:	bf00      	nop
        }
      }
      if ((i == count) && (ret == MSD_OK))
 8010996:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010998:	683a      	ldr	r2, [r7, #0]
 801099a:	429a      	cmp	r2, r3
 801099c:	d106      	bne.n	80109ac <SD_write+0x1f8>
 801099e:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 80109a2:	2b00      	cmp	r3, #0
 80109a4:	d102      	bne.n	80109ac <SD_write+0x1f8>
        res = RES_OK;
 80109a6:	2300      	movs	r3, #0
 80109a8:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    }
#endif
  return res;
 80109ac:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 80109b0:	4618      	mov	r0, r3
 80109b2:	3740      	adds	r7, #64	@ 0x40
 80109b4:	46bd      	mov	sp, r7
 80109b6:	bd80      	pop	{r7, pc}
 80109b8:	24000d60 	.word	0x24000d60
 80109bc:	e000ed00 	.word	0xe000ed00
 80109c0:	24000b60 	.word	0x24000b60

080109c4 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 80109c4:	b580      	push	{r7, lr}
 80109c6:	b08c      	sub	sp, #48	@ 0x30
 80109c8:	af00      	add	r7, sp, #0
 80109ca:	4603      	mov	r3, r0
 80109cc:	603a      	str	r2, [r7, #0]
 80109ce:	71fb      	strb	r3, [r7, #7]
 80109d0:	460b      	mov	r3, r1
 80109d2:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 80109d4:	2301      	movs	r3, #1
 80109d6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80109da:	4b25      	ldr	r3, [pc, #148]	@ (8010a70 <SD_ioctl+0xac>)
 80109dc:	781b      	ldrb	r3, [r3, #0]
 80109de:	b2db      	uxtb	r3, r3
 80109e0:	f003 0301 	and.w	r3, r3, #1
 80109e4:	2b00      	cmp	r3, #0
 80109e6:	d001      	beq.n	80109ec <SD_ioctl+0x28>
 80109e8:	2303      	movs	r3, #3
 80109ea:	e03c      	b.n	8010a66 <SD_ioctl+0xa2>

  switch (cmd)
 80109ec:	79bb      	ldrb	r3, [r7, #6]
 80109ee:	2b03      	cmp	r3, #3
 80109f0:	d834      	bhi.n	8010a5c <SD_ioctl+0x98>
 80109f2:	a201      	add	r2, pc, #4	@ (adr r2, 80109f8 <SD_ioctl+0x34>)
 80109f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80109f8:	08010a09 	.word	0x08010a09
 80109fc:	08010a11 	.word	0x08010a11
 8010a00:	08010a29 	.word	0x08010a29
 8010a04:	08010a43 	.word	0x08010a43
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8010a08:	2300      	movs	r3, #0
 8010a0a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8010a0e:	e028      	b.n	8010a62 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8010a10:	f107 0308 	add.w	r3, r7, #8
 8010a14:	4618      	mov	r0, r3
 8010a16:	f7ff fd41 	bl	801049c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8010a1a:	6a3a      	ldr	r2, [r7, #32]
 8010a1c:	683b      	ldr	r3, [r7, #0]
 8010a1e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8010a20:	2300      	movs	r3, #0
 8010a22:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8010a26:	e01c      	b.n	8010a62 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8010a28:	f107 0308 	add.w	r3, r7, #8
 8010a2c:	4618      	mov	r0, r3
 8010a2e:	f7ff fd35 	bl	801049c <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8010a32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010a34:	b29a      	uxth	r2, r3
 8010a36:	683b      	ldr	r3, [r7, #0]
 8010a38:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8010a3a:	2300      	movs	r3, #0
 8010a3c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8010a40:	e00f      	b.n	8010a62 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8010a42:	f107 0308 	add.w	r3, r7, #8
 8010a46:	4618      	mov	r0, r3
 8010a48:	f7ff fd28 	bl	801049c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8010a4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010a4e:	0a5a      	lsrs	r2, r3, #9
 8010a50:	683b      	ldr	r3, [r7, #0]
 8010a52:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8010a54:	2300      	movs	r3, #0
 8010a56:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8010a5a:	e002      	b.n	8010a62 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8010a5c:	2304      	movs	r3, #4
 8010a5e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 8010a62:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8010a66:	4618      	mov	r0, r3
 8010a68:	3730      	adds	r7, #48	@ 0x30
 8010a6a:	46bd      	mov	sp, r7
 8010a6c:	bd80      	pop	{r7, pc}
 8010a6e:	bf00      	nop
 8010a70:	24000065 	.word	0x24000065

08010a74 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 8010a74:	b480      	push	{r7}
 8010a76:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 8010a78:	4b03      	ldr	r3, [pc, #12]	@ (8010a88 <BSP_SD_WriteCpltCallback+0x14>)
 8010a7a:	2201      	movs	r2, #1
 8010a7c:	601a      	str	r2, [r3, #0]
}
 8010a7e:	bf00      	nop
 8010a80:	46bd      	mov	sp, r7
 8010a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a86:	4770      	bx	lr
 8010a88:	24000d60 	.word	0x24000d60

08010a8c <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8010a8c:	b480      	push	{r7}
 8010a8e:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 8010a90:	4b03      	ldr	r3, [pc, #12]	@ (8010aa0 <BSP_SD_ReadCpltCallback+0x14>)
 8010a92:	2201      	movs	r2, #1
 8010a94:	601a      	str	r2, [r3, #0]
}
 8010a96:	bf00      	nop
 8010a98:	46bd      	mov	sp, r7
 8010a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a9e:	4770      	bx	lr
 8010aa0:	24000d64 	.word	0x24000d64

08010aa4 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8010aa4:	b580      	push	{r7, lr}
 8010aa6:	b084      	sub	sp, #16
 8010aa8:	af00      	add	r7, sp, #0
 8010aaa:	4603      	mov	r3, r0
 8010aac:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8010aae:	79fb      	ldrb	r3, [r7, #7]
 8010ab0:	4a08      	ldr	r2, [pc, #32]	@ (8010ad4 <disk_status+0x30>)
 8010ab2:	009b      	lsls	r3, r3, #2
 8010ab4:	4413      	add	r3, r2
 8010ab6:	685b      	ldr	r3, [r3, #4]
 8010ab8:	685b      	ldr	r3, [r3, #4]
 8010aba:	79fa      	ldrb	r2, [r7, #7]
 8010abc:	4905      	ldr	r1, [pc, #20]	@ (8010ad4 <disk_status+0x30>)
 8010abe:	440a      	add	r2, r1
 8010ac0:	7a12      	ldrb	r2, [r2, #8]
 8010ac2:	4610      	mov	r0, r2
 8010ac4:	4798      	blx	r3
 8010ac6:	4603      	mov	r3, r0
 8010ac8:	73fb      	strb	r3, [r7, #15]
  return stat;
 8010aca:	7bfb      	ldrb	r3, [r7, #15]
}
 8010acc:	4618      	mov	r0, r3
 8010ace:	3710      	adds	r7, #16
 8010ad0:	46bd      	mov	sp, r7
 8010ad2:	bd80      	pop	{r7, pc}
 8010ad4:	24000d90 	.word	0x24000d90

08010ad8 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8010ad8:	b580      	push	{r7, lr}
 8010ada:	b084      	sub	sp, #16
 8010adc:	af00      	add	r7, sp, #0
 8010ade:	4603      	mov	r3, r0
 8010ae0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8010ae2:	2300      	movs	r3, #0
 8010ae4:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8010ae6:	79fb      	ldrb	r3, [r7, #7]
 8010ae8:	4a0e      	ldr	r2, [pc, #56]	@ (8010b24 <disk_initialize+0x4c>)
 8010aea:	5cd3      	ldrb	r3, [r2, r3]
 8010aec:	2b00      	cmp	r3, #0
 8010aee:	d114      	bne.n	8010b1a <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8010af0:	79fb      	ldrb	r3, [r7, #7]
 8010af2:	4a0c      	ldr	r2, [pc, #48]	@ (8010b24 <disk_initialize+0x4c>)
 8010af4:	009b      	lsls	r3, r3, #2
 8010af6:	4413      	add	r3, r2
 8010af8:	685b      	ldr	r3, [r3, #4]
 8010afa:	681b      	ldr	r3, [r3, #0]
 8010afc:	79fa      	ldrb	r2, [r7, #7]
 8010afe:	4909      	ldr	r1, [pc, #36]	@ (8010b24 <disk_initialize+0x4c>)
 8010b00:	440a      	add	r2, r1
 8010b02:	7a12      	ldrb	r2, [r2, #8]
 8010b04:	4610      	mov	r0, r2
 8010b06:	4798      	blx	r3
 8010b08:	4603      	mov	r3, r0
 8010b0a:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 8010b0c:	7bfb      	ldrb	r3, [r7, #15]
 8010b0e:	2b00      	cmp	r3, #0
 8010b10:	d103      	bne.n	8010b1a <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 8010b12:	79fb      	ldrb	r3, [r7, #7]
 8010b14:	4a03      	ldr	r2, [pc, #12]	@ (8010b24 <disk_initialize+0x4c>)
 8010b16:	2101      	movs	r1, #1
 8010b18:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 8010b1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8010b1c:	4618      	mov	r0, r3
 8010b1e:	3710      	adds	r7, #16
 8010b20:	46bd      	mov	sp, r7
 8010b22:	bd80      	pop	{r7, pc}
 8010b24:	24000d90 	.word	0x24000d90

08010b28 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8010b28:	b590      	push	{r4, r7, lr}
 8010b2a:	b087      	sub	sp, #28
 8010b2c:	af00      	add	r7, sp, #0
 8010b2e:	60b9      	str	r1, [r7, #8]
 8010b30:	607a      	str	r2, [r7, #4]
 8010b32:	603b      	str	r3, [r7, #0]
 8010b34:	4603      	mov	r3, r0
 8010b36:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8010b38:	7bfb      	ldrb	r3, [r7, #15]
 8010b3a:	4a0a      	ldr	r2, [pc, #40]	@ (8010b64 <disk_read+0x3c>)
 8010b3c:	009b      	lsls	r3, r3, #2
 8010b3e:	4413      	add	r3, r2
 8010b40:	685b      	ldr	r3, [r3, #4]
 8010b42:	689c      	ldr	r4, [r3, #8]
 8010b44:	7bfb      	ldrb	r3, [r7, #15]
 8010b46:	4a07      	ldr	r2, [pc, #28]	@ (8010b64 <disk_read+0x3c>)
 8010b48:	4413      	add	r3, r2
 8010b4a:	7a18      	ldrb	r0, [r3, #8]
 8010b4c:	683b      	ldr	r3, [r7, #0]
 8010b4e:	687a      	ldr	r2, [r7, #4]
 8010b50:	68b9      	ldr	r1, [r7, #8]
 8010b52:	47a0      	blx	r4
 8010b54:	4603      	mov	r3, r0
 8010b56:	75fb      	strb	r3, [r7, #23]
  return res;
 8010b58:	7dfb      	ldrb	r3, [r7, #23]
}
 8010b5a:	4618      	mov	r0, r3
 8010b5c:	371c      	adds	r7, #28
 8010b5e:	46bd      	mov	sp, r7
 8010b60:	bd90      	pop	{r4, r7, pc}
 8010b62:	bf00      	nop
 8010b64:	24000d90 	.word	0x24000d90

08010b68 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8010b68:	b590      	push	{r4, r7, lr}
 8010b6a:	b087      	sub	sp, #28
 8010b6c:	af00      	add	r7, sp, #0
 8010b6e:	60b9      	str	r1, [r7, #8]
 8010b70:	607a      	str	r2, [r7, #4]
 8010b72:	603b      	str	r3, [r7, #0]
 8010b74:	4603      	mov	r3, r0
 8010b76:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8010b78:	7bfb      	ldrb	r3, [r7, #15]
 8010b7a:	4a0a      	ldr	r2, [pc, #40]	@ (8010ba4 <disk_write+0x3c>)
 8010b7c:	009b      	lsls	r3, r3, #2
 8010b7e:	4413      	add	r3, r2
 8010b80:	685b      	ldr	r3, [r3, #4]
 8010b82:	68dc      	ldr	r4, [r3, #12]
 8010b84:	7bfb      	ldrb	r3, [r7, #15]
 8010b86:	4a07      	ldr	r2, [pc, #28]	@ (8010ba4 <disk_write+0x3c>)
 8010b88:	4413      	add	r3, r2
 8010b8a:	7a18      	ldrb	r0, [r3, #8]
 8010b8c:	683b      	ldr	r3, [r7, #0]
 8010b8e:	687a      	ldr	r2, [r7, #4]
 8010b90:	68b9      	ldr	r1, [r7, #8]
 8010b92:	47a0      	blx	r4
 8010b94:	4603      	mov	r3, r0
 8010b96:	75fb      	strb	r3, [r7, #23]
  return res;
 8010b98:	7dfb      	ldrb	r3, [r7, #23]
}
 8010b9a:	4618      	mov	r0, r3
 8010b9c:	371c      	adds	r7, #28
 8010b9e:	46bd      	mov	sp, r7
 8010ba0:	bd90      	pop	{r4, r7, pc}
 8010ba2:	bf00      	nop
 8010ba4:	24000d90 	.word	0x24000d90

08010ba8 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8010ba8:	b580      	push	{r7, lr}
 8010baa:	b084      	sub	sp, #16
 8010bac:	af00      	add	r7, sp, #0
 8010bae:	4603      	mov	r3, r0
 8010bb0:	603a      	str	r2, [r7, #0]
 8010bb2:	71fb      	strb	r3, [r7, #7]
 8010bb4:	460b      	mov	r3, r1
 8010bb6:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8010bb8:	79fb      	ldrb	r3, [r7, #7]
 8010bba:	4a09      	ldr	r2, [pc, #36]	@ (8010be0 <disk_ioctl+0x38>)
 8010bbc:	009b      	lsls	r3, r3, #2
 8010bbe:	4413      	add	r3, r2
 8010bc0:	685b      	ldr	r3, [r3, #4]
 8010bc2:	691b      	ldr	r3, [r3, #16]
 8010bc4:	79fa      	ldrb	r2, [r7, #7]
 8010bc6:	4906      	ldr	r1, [pc, #24]	@ (8010be0 <disk_ioctl+0x38>)
 8010bc8:	440a      	add	r2, r1
 8010bca:	7a10      	ldrb	r0, [r2, #8]
 8010bcc:	79b9      	ldrb	r1, [r7, #6]
 8010bce:	683a      	ldr	r2, [r7, #0]
 8010bd0:	4798      	blx	r3
 8010bd2:	4603      	mov	r3, r0
 8010bd4:	73fb      	strb	r3, [r7, #15]
  return res;
 8010bd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8010bd8:	4618      	mov	r0, r3
 8010bda:	3710      	adds	r7, #16
 8010bdc:	46bd      	mov	sp, r7
 8010bde:	bd80      	pop	{r7, pc}
 8010be0:	24000d90 	.word	0x24000d90

08010be4 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8010be4:	b480      	push	{r7}
 8010be6:	b085      	sub	sp, #20
 8010be8:	af00      	add	r7, sp, #0
 8010bea:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8010bec:	687b      	ldr	r3, [r7, #4]
 8010bee:	3301      	adds	r3, #1
 8010bf0:	781b      	ldrb	r3, [r3, #0]
 8010bf2:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8010bf4:	89fb      	ldrh	r3, [r7, #14]
 8010bf6:	021b      	lsls	r3, r3, #8
 8010bf8:	b21a      	sxth	r2, r3
 8010bfa:	687b      	ldr	r3, [r7, #4]
 8010bfc:	781b      	ldrb	r3, [r3, #0]
 8010bfe:	b21b      	sxth	r3, r3
 8010c00:	4313      	orrs	r3, r2
 8010c02:	b21b      	sxth	r3, r3
 8010c04:	81fb      	strh	r3, [r7, #14]
	return rv;
 8010c06:	89fb      	ldrh	r3, [r7, #14]
}
 8010c08:	4618      	mov	r0, r3
 8010c0a:	3714      	adds	r7, #20
 8010c0c:	46bd      	mov	sp, r7
 8010c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c12:	4770      	bx	lr

08010c14 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8010c14:	b480      	push	{r7}
 8010c16:	b085      	sub	sp, #20
 8010c18:	af00      	add	r7, sp, #0
 8010c1a:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8010c1c:	687b      	ldr	r3, [r7, #4]
 8010c1e:	3303      	adds	r3, #3
 8010c20:	781b      	ldrb	r3, [r3, #0]
 8010c22:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8010c24:	68fb      	ldr	r3, [r7, #12]
 8010c26:	021b      	lsls	r3, r3, #8
 8010c28:	687a      	ldr	r2, [r7, #4]
 8010c2a:	3202      	adds	r2, #2
 8010c2c:	7812      	ldrb	r2, [r2, #0]
 8010c2e:	4313      	orrs	r3, r2
 8010c30:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8010c32:	68fb      	ldr	r3, [r7, #12]
 8010c34:	021b      	lsls	r3, r3, #8
 8010c36:	687a      	ldr	r2, [r7, #4]
 8010c38:	3201      	adds	r2, #1
 8010c3a:	7812      	ldrb	r2, [r2, #0]
 8010c3c:	4313      	orrs	r3, r2
 8010c3e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8010c40:	68fb      	ldr	r3, [r7, #12]
 8010c42:	021b      	lsls	r3, r3, #8
 8010c44:	687a      	ldr	r2, [r7, #4]
 8010c46:	7812      	ldrb	r2, [r2, #0]
 8010c48:	4313      	orrs	r3, r2
 8010c4a:	60fb      	str	r3, [r7, #12]
	return rv;
 8010c4c:	68fb      	ldr	r3, [r7, #12]
}
 8010c4e:	4618      	mov	r0, r3
 8010c50:	3714      	adds	r7, #20
 8010c52:	46bd      	mov	sp, r7
 8010c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c58:	4770      	bx	lr

08010c5a <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8010c5a:	b480      	push	{r7}
 8010c5c:	b083      	sub	sp, #12
 8010c5e:	af00      	add	r7, sp, #0
 8010c60:	6078      	str	r0, [r7, #4]
 8010c62:	460b      	mov	r3, r1
 8010c64:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8010c66:	687b      	ldr	r3, [r7, #4]
 8010c68:	1c5a      	adds	r2, r3, #1
 8010c6a:	607a      	str	r2, [r7, #4]
 8010c6c:	887a      	ldrh	r2, [r7, #2]
 8010c6e:	b2d2      	uxtb	r2, r2
 8010c70:	701a      	strb	r2, [r3, #0]
 8010c72:	887b      	ldrh	r3, [r7, #2]
 8010c74:	0a1b      	lsrs	r3, r3, #8
 8010c76:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8010c78:	687b      	ldr	r3, [r7, #4]
 8010c7a:	1c5a      	adds	r2, r3, #1
 8010c7c:	607a      	str	r2, [r7, #4]
 8010c7e:	887a      	ldrh	r2, [r7, #2]
 8010c80:	b2d2      	uxtb	r2, r2
 8010c82:	701a      	strb	r2, [r3, #0]
}
 8010c84:	bf00      	nop
 8010c86:	370c      	adds	r7, #12
 8010c88:	46bd      	mov	sp, r7
 8010c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c8e:	4770      	bx	lr

08010c90 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8010c90:	b480      	push	{r7}
 8010c92:	b083      	sub	sp, #12
 8010c94:	af00      	add	r7, sp, #0
 8010c96:	6078      	str	r0, [r7, #4]
 8010c98:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8010c9a:	687b      	ldr	r3, [r7, #4]
 8010c9c:	1c5a      	adds	r2, r3, #1
 8010c9e:	607a      	str	r2, [r7, #4]
 8010ca0:	683a      	ldr	r2, [r7, #0]
 8010ca2:	b2d2      	uxtb	r2, r2
 8010ca4:	701a      	strb	r2, [r3, #0]
 8010ca6:	683b      	ldr	r3, [r7, #0]
 8010ca8:	0a1b      	lsrs	r3, r3, #8
 8010caa:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8010cac:	687b      	ldr	r3, [r7, #4]
 8010cae:	1c5a      	adds	r2, r3, #1
 8010cb0:	607a      	str	r2, [r7, #4]
 8010cb2:	683a      	ldr	r2, [r7, #0]
 8010cb4:	b2d2      	uxtb	r2, r2
 8010cb6:	701a      	strb	r2, [r3, #0]
 8010cb8:	683b      	ldr	r3, [r7, #0]
 8010cba:	0a1b      	lsrs	r3, r3, #8
 8010cbc:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8010cbe:	687b      	ldr	r3, [r7, #4]
 8010cc0:	1c5a      	adds	r2, r3, #1
 8010cc2:	607a      	str	r2, [r7, #4]
 8010cc4:	683a      	ldr	r2, [r7, #0]
 8010cc6:	b2d2      	uxtb	r2, r2
 8010cc8:	701a      	strb	r2, [r3, #0]
 8010cca:	683b      	ldr	r3, [r7, #0]
 8010ccc:	0a1b      	lsrs	r3, r3, #8
 8010cce:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8010cd0:	687b      	ldr	r3, [r7, #4]
 8010cd2:	1c5a      	adds	r2, r3, #1
 8010cd4:	607a      	str	r2, [r7, #4]
 8010cd6:	683a      	ldr	r2, [r7, #0]
 8010cd8:	b2d2      	uxtb	r2, r2
 8010cda:	701a      	strb	r2, [r3, #0]
}
 8010cdc:	bf00      	nop
 8010cde:	370c      	adds	r7, #12
 8010ce0:	46bd      	mov	sp, r7
 8010ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ce6:	4770      	bx	lr

08010ce8 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8010ce8:	b480      	push	{r7}
 8010cea:	b087      	sub	sp, #28
 8010cec:	af00      	add	r7, sp, #0
 8010cee:	60f8      	str	r0, [r7, #12]
 8010cf0:	60b9      	str	r1, [r7, #8]
 8010cf2:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8010cf4:	68fb      	ldr	r3, [r7, #12]
 8010cf6:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8010cf8:	68bb      	ldr	r3, [r7, #8]
 8010cfa:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8010cfc:	687b      	ldr	r3, [r7, #4]
 8010cfe:	2b00      	cmp	r3, #0
 8010d00:	d00d      	beq.n	8010d1e <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8010d02:	693a      	ldr	r2, [r7, #16]
 8010d04:	1c53      	adds	r3, r2, #1
 8010d06:	613b      	str	r3, [r7, #16]
 8010d08:	697b      	ldr	r3, [r7, #20]
 8010d0a:	1c59      	adds	r1, r3, #1
 8010d0c:	6179      	str	r1, [r7, #20]
 8010d0e:	7812      	ldrb	r2, [r2, #0]
 8010d10:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8010d12:	687b      	ldr	r3, [r7, #4]
 8010d14:	3b01      	subs	r3, #1
 8010d16:	607b      	str	r3, [r7, #4]
 8010d18:	687b      	ldr	r3, [r7, #4]
 8010d1a:	2b00      	cmp	r3, #0
 8010d1c:	d1f1      	bne.n	8010d02 <mem_cpy+0x1a>
	}
}
 8010d1e:	bf00      	nop
 8010d20:	371c      	adds	r7, #28
 8010d22:	46bd      	mov	sp, r7
 8010d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d28:	4770      	bx	lr

08010d2a <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8010d2a:	b480      	push	{r7}
 8010d2c:	b087      	sub	sp, #28
 8010d2e:	af00      	add	r7, sp, #0
 8010d30:	60f8      	str	r0, [r7, #12]
 8010d32:	60b9      	str	r1, [r7, #8]
 8010d34:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8010d36:	68fb      	ldr	r3, [r7, #12]
 8010d38:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8010d3a:	697b      	ldr	r3, [r7, #20]
 8010d3c:	1c5a      	adds	r2, r3, #1
 8010d3e:	617a      	str	r2, [r7, #20]
 8010d40:	68ba      	ldr	r2, [r7, #8]
 8010d42:	b2d2      	uxtb	r2, r2
 8010d44:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8010d46:	687b      	ldr	r3, [r7, #4]
 8010d48:	3b01      	subs	r3, #1
 8010d4a:	607b      	str	r3, [r7, #4]
 8010d4c:	687b      	ldr	r3, [r7, #4]
 8010d4e:	2b00      	cmp	r3, #0
 8010d50:	d1f3      	bne.n	8010d3a <mem_set+0x10>
}
 8010d52:	bf00      	nop
 8010d54:	bf00      	nop
 8010d56:	371c      	adds	r7, #28
 8010d58:	46bd      	mov	sp, r7
 8010d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d5e:	4770      	bx	lr

08010d60 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8010d60:	b480      	push	{r7}
 8010d62:	b089      	sub	sp, #36	@ 0x24
 8010d64:	af00      	add	r7, sp, #0
 8010d66:	60f8      	str	r0, [r7, #12]
 8010d68:	60b9      	str	r1, [r7, #8]
 8010d6a:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8010d6c:	68fb      	ldr	r3, [r7, #12]
 8010d6e:	61fb      	str	r3, [r7, #28]
 8010d70:	68bb      	ldr	r3, [r7, #8]
 8010d72:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8010d74:	2300      	movs	r3, #0
 8010d76:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8010d78:	69fb      	ldr	r3, [r7, #28]
 8010d7a:	1c5a      	adds	r2, r3, #1
 8010d7c:	61fa      	str	r2, [r7, #28]
 8010d7e:	781b      	ldrb	r3, [r3, #0]
 8010d80:	4619      	mov	r1, r3
 8010d82:	69bb      	ldr	r3, [r7, #24]
 8010d84:	1c5a      	adds	r2, r3, #1
 8010d86:	61ba      	str	r2, [r7, #24]
 8010d88:	781b      	ldrb	r3, [r3, #0]
 8010d8a:	1acb      	subs	r3, r1, r3
 8010d8c:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8010d8e:	687b      	ldr	r3, [r7, #4]
 8010d90:	3b01      	subs	r3, #1
 8010d92:	607b      	str	r3, [r7, #4]
 8010d94:	687b      	ldr	r3, [r7, #4]
 8010d96:	2b00      	cmp	r3, #0
 8010d98:	d002      	beq.n	8010da0 <mem_cmp+0x40>
 8010d9a:	697b      	ldr	r3, [r7, #20]
 8010d9c:	2b00      	cmp	r3, #0
 8010d9e:	d0eb      	beq.n	8010d78 <mem_cmp+0x18>

	return r;
 8010da0:	697b      	ldr	r3, [r7, #20]
}
 8010da2:	4618      	mov	r0, r3
 8010da4:	3724      	adds	r7, #36	@ 0x24
 8010da6:	46bd      	mov	sp, r7
 8010da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dac:	4770      	bx	lr

08010dae <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8010dae:	b480      	push	{r7}
 8010db0:	b083      	sub	sp, #12
 8010db2:	af00      	add	r7, sp, #0
 8010db4:	6078      	str	r0, [r7, #4]
 8010db6:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8010db8:	e002      	b.n	8010dc0 <chk_chr+0x12>
 8010dba:	687b      	ldr	r3, [r7, #4]
 8010dbc:	3301      	adds	r3, #1
 8010dbe:	607b      	str	r3, [r7, #4]
 8010dc0:	687b      	ldr	r3, [r7, #4]
 8010dc2:	781b      	ldrb	r3, [r3, #0]
 8010dc4:	2b00      	cmp	r3, #0
 8010dc6:	d005      	beq.n	8010dd4 <chk_chr+0x26>
 8010dc8:	687b      	ldr	r3, [r7, #4]
 8010dca:	781b      	ldrb	r3, [r3, #0]
 8010dcc:	461a      	mov	r2, r3
 8010dce:	683b      	ldr	r3, [r7, #0]
 8010dd0:	4293      	cmp	r3, r2
 8010dd2:	d1f2      	bne.n	8010dba <chk_chr+0xc>
	return *str;
 8010dd4:	687b      	ldr	r3, [r7, #4]
 8010dd6:	781b      	ldrb	r3, [r3, #0]
}
 8010dd8:	4618      	mov	r0, r3
 8010dda:	370c      	adds	r7, #12
 8010ddc:	46bd      	mov	sp, r7
 8010dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010de2:	4770      	bx	lr

08010de4 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8010de4:	b480      	push	{r7}
 8010de6:	b085      	sub	sp, #20
 8010de8:	af00      	add	r7, sp, #0
 8010dea:	6078      	str	r0, [r7, #4]
 8010dec:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8010dee:	2300      	movs	r3, #0
 8010df0:	60bb      	str	r3, [r7, #8]
 8010df2:	68bb      	ldr	r3, [r7, #8]
 8010df4:	60fb      	str	r3, [r7, #12]
 8010df6:	e029      	b.n	8010e4c <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8010df8:	4a27      	ldr	r2, [pc, #156]	@ (8010e98 <chk_lock+0xb4>)
 8010dfa:	68fb      	ldr	r3, [r7, #12]
 8010dfc:	011b      	lsls	r3, r3, #4
 8010dfe:	4413      	add	r3, r2
 8010e00:	681b      	ldr	r3, [r3, #0]
 8010e02:	2b00      	cmp	r3, #0
 8010e04:	d01d      	beq.n	8010e42 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8010e06:	4a24      	ldr	r2, [pc, #144]	@ (8010e98 <chk_lock+0xb4>)
 8010e08:	68fb      	ldr	r3, [r7, #12]
 8010e0a:	011b      	lsls	r3, r3, #4
 8010e0c:	4413      	add	r3, r2
 8010e0e:	681a      	ldr	r2, [r3, #0]
 8010e10:	687b      	ldr	r3, [r7, #4]
 8010e12:	681b      	ldr	r3, [r3, #0]
 8010e14:	429a      	cmp	r2, r3
 8010e16:	d116      	bne.n	8010e46 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8010e18:	4a1f      	ldr	r2, [pc, #124]	@ (8010e98 <chk_lock+0xb4>)
 8010e1a:	68fb      	ldr	r3, [r7, #12]
 8010e1c:	011b      	lsls	r3, r3, #4
 8010e1e:	4413      	add	r3, r2
 8010e20:	3304      	adds	r3, #4
 8010e22:	681a      	ldr	r2, [r3, #0]
 8010e24:	687b      	ldr	r3, [r7, #4]
 8010e26:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8010e28:	429a      	cmp	r2, r3
 8010e2a:	d10c      	bne.n	8010e46 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8010e2c:	4a1a      	ldr	r2, [pc, #104]	@ (8010e98 <chk_lock+0xb4>)
 8010e2e:	68fb      	ldr	r3, [r7, #12]
 8010e30:	011b      	lsls	r3, r3, #4
 8010e32:	4413      	add	r3, r2
 8010e34:	3308      	adds	r3, #8
 8010e36:	681a      	ldr	r2, [r3, #0]
 8010e38:	687b      	ldr	r3, [r7, #4]
 8010e3a:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8010e3c:	429a      	cmp	r2, r3
 8010e3e:	d102      	bne.n	8010e46 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8010e40:	e007      	b.n	8010e52 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8010e42:	2301      	movs	r3, #1
 8010e44:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8010e46:	68fb      	ldr	r3, [r7, #12]
 8010e48:	3301      	adds	r3, #1
 8010e4a:	60fb      	str	r3, [r7, #12]
 8010e4c:	68fb      	ldr	r3, [r7, #12]
 8010e4e:	2b01      	cmp	r3, #1
 8010e50:	d9d2      	bls.n	8010df8 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8010e52:	68fb      	ldr	r3, [r7, #12]
 8010e54:	2b02      	cmp	r3, #2
 8010e56:	d109      	bne.n	8010e6c <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8010e58:	68bb      	ldr	r3, [r7, #8]
 8010e5a:	2b00      	cmp	r3, #0
 8010e5c:	d102      	bne.n	8010e64 <chk_lock+0x80>
 8010e5e:	683b      	ldr	r3, [r7, #0]
 8010e60:	2b02      	cmp	r3, #2
 8010e62:	d101      	bne.n	8010e68 <chk_lock+0x84>
 8010e64:	2300      	movs	r3, #0
 8010e66:	e010      	b.n	8010e8a <chk_lock+0xa6>
 8010e68:	2312      	movs	r3, #18
 8010e6a:	e00e      	b.n	8010e8a <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8010e6c:	683b      	ldr	r3, [r7, #0]
 8010e6e:	2b00      	cmp	r3, #0
 8010e70:	d108      	bne.n	8010e84 <chk_lock+0xa0>
 8010e72:	4a09      	ldr	r2, [pc, #36]	@ (8010e98 <chk_lock+0xb4>)
 8010e74:	68fb      	ldr	r3, [r7, #12]
 8010e76:	011b      	lsls	r3, r3, #4
 8010e78:	4413      	add	r3, r2
 8010e7a:	330c      	adds	r3, #12
 8010e7c:	881b      	ldrh	r3, [r3, #0]
 8010e7e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8010e82:	d101      	bne.n	8010e88 <chk_lock+0xa4>
 8010e84:	2310      	movs	r3, #16
 8010e86:	e000      	b.n	8010e8a <chk_lock+0xa6>
 8010e88:	2300      	movs	r3, #0
}
 8010e8a:	4618      	mov	r0, r3
 8010e8c:	3714      	adds	r7, #20
 8010e8e:	46bd      	mov	sp, r7
 8010e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e94:	4770      	bx	lr
 8010e96:	bf00      	nop
 8010e98:	24000d70 	.word	0x24000d70

08010e9c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8010e9c:	b480      	push	{r7}
 8010e9e:	b083      	sub	sp, #12
 8010ea0:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8010ea2:	2300      	movs	r3, #0
 8010ea4:	607b      	str	r3, [r7, #4]
 8010ea6:	e002      	b.n	8010eae <enq_lock+0x12>
 8010ea8:	687b      	ldr	r3, [r7, #4]
 8010eaa:	3301      	adds	r3, #1
 8010eac:	607b      	str	r3, [r7, #4]
 8010eae:	687b      	ldr	r3, [r7, #4]
 8010eb0:	2b01      	cmp	r3, #1
 8010eb2:	d806      	bhi.n	8010ec2 <enq_lock+0x26>
 8010eb4:	4a09      	ldr	r2, [pc, #36]	@ (8010edc <enq_lock+0x40>)
 8010eb6:	687b      	ldr	r3, [r7, #4]
 8010eb8:	011b      	lsls	r3, r3, #4
 8010eba:	4413      	add	r3, r2
 8010ebc:	681b      	ldr	r3, [r3, #0]
 8010ebe:	2b00      	cmp	r3, #0
 8010ec0:	d1f2      	bne.n	8010ea8 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8010ec2:	687b      	ldr	r3, [r7, #4]
 8010ec4:	2b02      	cmp	r3, #2
 8010ec6:	bf14      	ite	ne
 8010ec8:	2301      	movne	r3, #1
 8010eca:	2300      	moveq	r3, #0
 8010ecc:	b2db      	uxtb	r3, r3
}
 8010ece:	4618      	mov	r0, r3
 8010ed0:	370c      	adds	r7, #12
 8010ed2:	46bd      	mov	sp, r7
 8010ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ed8:	4770      	bx	lr
 8010eda:	bf00      	nop
 8010edc:	24000d70 	.word	0x24000d70

08010ee0 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8010ee0:	b480      	push	{r7}
 8010ee2:	b085      	sub	sp, #20
 8010ee4:	af00      	add	r7, sp, #0
 8010ee6:	6078      	str	r0, [r7, #4]
 8010ee8:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8010eea:	2300      	movs	r3, #0
 8010eec:	60fb      	str	r3, [r7, #12]
 8010eee:	e01f      	b.n	8010f30 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8010ef0:	4a41      	ldr	r2, [pc, #260]	@ (8010ff8 <inc_lock+0x118>)
 8010ef2:	68fb      	ldr	r3, [r7, #12]
 8010ef4:	011b      	lsls	r3, r3, #4
 8010ef6:	4413      	add	r3, r2
 8010ef8:	681a      	ldr	r2, [r3, #0]
 8010efa:	687b      	ldr	r3, [r7, #4]
 8010efc:	681b      	ldr	r3, [r3, #0]
 8010efe:	429a      	cmp	r2, r3
 8010f00:	d113      	bne.n	8010f2a <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8010f02:	4a3d      	ldr	r2, [pc, #244]	@ (8010ff8 <inc_lock+0x118>)
 8010f04:	68fb      	ldr	r3, [r7, #12]
 8010f06:	011b      	lsls	r3, r3, #4
 8010f08:	4413      	add	r3, r2
 8010f0a:	3304      	adds	r3, #4
 8010f0c:	681a      	ldr	r2, [r3, #0]
 8010f0e:	687b      	ldr	r3, [r7, #4]
 8010f10:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8010f12:	429a      	cmp	r2, r3
 8010f14:	d109      	bne.n	8010f2a <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8010f16:	4a38      	ldr	r2, [pc, #224]	@ (8010ff8 <inc_lock+0x118>)
 8010f18:	68fb      	ldr	r3, [r7, #12]
 8010f1a:	011b      	lsls	r3, r3, #4
 8010f1c:	4413      	add	r3, r2
 8010f1e:	3308      	adds	r3, #8
 8010f20:	681a      	ldr	r2, [r3, #0]
 8010f22:	687b      	ldr	r3, [r7, #4]
 8010f24:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8010f26:	429a      	cmp	r2, r3
 8010f28:	d006      	beq.n	8010f38 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8010f2a:	68fb      	ldr	r3, [r7, #12]
 8010f2c:	3301      	adds	r3, #1
 8010f2e:	60fb      	str	r3, [r7, #12]
 8010f30:	68fb      	ldr	r3, [r7, #12]
 8010f32:	2b01      	cmp	r3, #1
 8010f34:	d9dc      	bls.n	8010ef0 <inc_lock+0x10>
 8010f36:	e000      	b.n	8010f3a <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8010f38:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8010f3a:	68fb      	ldr	r3, [r7, #12]
 8010f3c:	2b02      	cmp	r3, #2
 8010f3e:	d132      	bne.n	8010fa6 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8010f40:	2300      	movs	r3, #0
 8010f42:	60fb      	str	r3, [r7, #12]
 8010f44:	e002      	b.n	8010f4c <inc_lock+0x6c>
 8010f46:	68fb      	ldr	r3, [r7, #12]
 8010f48:	3301      	adds	r3, #1
 8010f4a:	60fb      	str	r3, [r7, #12]
 8010f4c:	68fb      	ldr	r3, [r7, #12]
 8010f4e:	2b01      	cmp	r3, #1
 8010f50:	d806      	bhi.n	8010f60 <inc_lock+0x80>
 8010f52:	4a29      	ldr	r2, [pc, #164]	@ (8010ff8 <inc_lock+0x118>)
 8010f54:	68fb      	ldr	r3, [r7, #12]
 8010f56:	011b      	lsls	r3, r3, #4
 8010f58:	4413      	add	r3, r2
 8010f5a:	681b      	ldr	r3, [r3, #0]
 8010f5c:	2b00      	cmp	r3, #0
 8010f5e:	d1f2      	bne.n	8010f46 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8010f60:	68fb      	ldr	r3, [r7, #12]
 8010f62:	2b02      	cmp	r3, #2
 8010f64:	d101      	bne.n	8010f6a <inc_lock+0x8a>
 8010f66:	2300      	movs	r3, #0
 8010f68:	e040      	b.n	8010fec <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8010f6a:	687b      	ldr	r3, [r7, #4]
 8010f6c:	681a      	ldr	r2, [r3, #0]
 8010f6e:	4922      	ldr	r1, [pc, #136]	@ (8010ff8 <inc_lock+0x118>)
 8010f70:	68fb      	ldr	r3, [r7, #12]
 8010f72:	011b      	lsls	r3, r3, #4
 8010f74:	440b      	add	r3, r1
 8010f76:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8010f78:	687b      	ldr	r3, [r7, #4]
 8010f7a:	689a      	ldr	r2, [r3, #8]
 8010f7c:	491e      	ldr	r1, [pc, #120]	@ (8010ff8 <inc_lock+0x118>)
 8010f7e:	68fb      	ldr	r3, [r7, #12]
 8010f80:	011b      	lsls	r3, r3, #4
 8010f82:	440b      	add	r3, r1
 8010f84:	3304      	adds	r3, #4
 8010f86:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8010f88:	687b      	ldr	r3, [r7, #4]
 8010f8a:	695a      	ldr	r2, [r3, #20]
 8010f8c:	491a      	ldr	r1, [pc, #104]	@ (8010ff8 <inc_lock+0x118>)
 8010f8e:	68fb      	ldr	r3, [r7, #12]
 8010f90:	011b      	lsls	r3, r3, #4
 8010f92:	440b      	add	r3, r1
 8010f94:	3308      	adds	r3, #8
 8010f96:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8010f98:	4a17      	ldr	r2, [pc, #92]	@ (8010ff8 <inc_lock+0x118>)
 8010f9a:	68fb      	ldr	r3, [r7, #12]
 8010f9c:	011b      	lsls	r3, r3, #4
 8010f9e:	4413      	add	r3, r2
 8010fa0:	330c      	adds	r3, #12
 8010fa2:	2200      	movs	r2, #0
 8010fa4:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8010fa6:	683b      	ldr	r3, [r7, #0]
 8010fa8:	2b00      	cmp	r3, #0
 8010faa:	d009      	beq.n	8010fc0 <inc_lock+0xe0>
 8010fac:	4a12      	ldr	r2, [pc, #72]	@ (8010ff8 <inc_lock+0x118>)
 8010fae:	68fb      	ldr	r3, [r7, #12]
 8010fb0:	011b      	lsls	r3, r3, #4
 8010fb2:	4413      	add	r3, r2
 8010fb4:	330c      	adds	r3, #12
 8010fb6:	881b      	ldrh	r3, [r3, #0]
 8010fb8:	2b00      	cmp	r3, #0
 8010fba:	d001      	beq.n	8010fc0 <inc_lock+0xe0>
 8010fbc:	2300      	movs	r3, #0
 8010fbe:	e015      	b.n	8010fec <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8010fc0:	683b      	ldr	r3, [r7, #0]
 8010fc2:	2b00      	cmp	r3, #0
 8010fc4:	d108      	bne.n	8010fd8 <inc_lock+0xf8>
 8010fc6:	4a0c      	ldr	r2, [pc, #48]	@ (8010ff8 <inc_lock+0x118>)
 8010fc8:	68fb      	ldr	r3, [r7, #12]
 8010fca:	011b      	lsls	r3, r3, #4
 8010fcc:	4413      	add	r3, r2
 8010fce:	330c      	adds	r3, #12
 8010fd0:	881b      	ldrh	r3, [r3, #0]
 8010fd2:	3301      	adds	r3, #1
 8010fd4:	b29a      	uxth	r2, r3
 8010fd6:	e001      	b.n	8010fdc <inc_lock+0xfc>
 8010fd8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8010fdc:	4906      	ldr	r1, [pc, #24]	@ (8010ff8 <inc_lock+0x118>)
 8010fde:	68fb      	ldr	r3, [r7, #12]
 8010fe0:	011b      	lsls	r3, r3, #4
 8010fe2:	440b      	add	r3, r1
 8010fe4:	330c      	adds	r3, #12
 8010fe6:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8010fe8:	68fb      	ldr	r3, [r7, #12]
 8010fea:	3301      	adds	r3, #1
}
 8010fec:	4618      	mov	r0, r3
 8010fee:	3714      	adds	r7, #20
 8010ff0:	46bd      	mov	sp, r7
 8010ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ff6:	4770      	bx	lr
 8010ff8:	24000d70 	.word	0x24000d70

08010ffc <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8010ffc:	b480      	push	{r7}
 8010ffe:	b085      	sub	sp, #20
 8011000:	af00      	add	r7, sp, #0
 8011002:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8011004:	687b      	ldr	r3, [r7, #4]
 8011006:	3b01      	subs	r3, #1
 8011008:	607b      	str	r3, [r7, #4]
 801100a:	687b      	ldr	r3, [r7, #4]
 801100c:	2b01      	cmp	r3, #1
 801100e:	d825      	bhi.n	801105c <dec_lock+0x60>
		n = Files[i].ctr;
 8011010:	4a17      	ldr	r2, [pc, #92]	@ (8011070 <dec_lock+0x74>)
 8011012:	687b      	ldr	r3, [r7, #4]
 8011014:	011b      	lsls	r3, r3, #4
 8011016:	4413      	add	r3, r2
 8011018:	330c      	adds	r3, #12
 801101a:	881b      	ldrh	r3, [r3, #0]
 801101c:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 801101e:	89fb      	ldrh	r3, [r7, #14]
 8011020:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8011024:	d101      	bne.n	801102a <dec_lock+0x2e>
 8011026:	2300      	movs	r3, #0
 8011028:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 801102a:	89fb      	ldrh	r3, [r7, #14]
 801102c:	2b00      	cmp	r3, #0
 801102e:	d002      	beq.n	8011036 <dec_lock+0x3a>
 8011030:	89fb      	ldrh	r3, [r7, #14]
 8011032:	3b01      	subs	r3, #1
 8011034:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8011036:	4a0e      	ldr	r2, [pc, #56]	@ (8011070 <dec_lock+0x74>)
 8011038:	687b      	ldr	r3, [r7, #4]
 801103a:	011b      	lsls	r3, r3, #4
 801103c:	4413      	add	r3, r2
 801103e:	330c      	adds	r3, #12
 8011040:	89fa      	ldrh	r2, [r7, #14]
 8011042:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8011044:	89fb      	ldrh	r3, [r7, #14]
 8011046:	2b00      	cmp	r3, #0
 8011048:	d105      	bne.n	8011056 <dec_lock+0x5a>
 801104a:	4a09      	ldr	r2, [pc, #36]	@ (8011070 <dec_lock+0x74>)
 801104c:	687b      	ldr	r3, [r7, #4]
 801104e:	011b      	lsls	r3, r3, #4
 8011050:	4413      	add	r3, r2
 8011052:	2200      	movs	r2, #0
 8011054:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8011056:	2300      	movs	r3, #0
 8011058:	737b      	strb	r3, [r7, #13]
 801105a:	e001      	b.n	8011060 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 801105c:	2302      	movs	r3, #2
 801105e:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8011060:	7b7b      	ldrb	r3, [r7, #13]
}
 8011062:	4618      	mov	r0, r3
 8011064:	3714      	adds	r7, #20
 8011066:	46bd      	mov	sp, r7
 8011068:	f85d 7b04 	ldr.w	r7, [sp], #4
 801106c:	4770      	bx	lr
 801106e:	bf00      	nop
 8011070:	24000d70 	.word	0x24000d70

08011074 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8011074:	b480      	push	{r7}
 8011076:	b085      	sub	sp, #20
 8011078:	af00      	add	r7, sp, #0
 801107a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 801107c:	2300      	movs	r3, #0
 801107e:	60fb      	str	r3, [r7, #12]
 8011080:	e010      	b.n	80110a4 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8011082:	4a0d      	ldr	r2, [pc, #52]	@ (80110b8 <clear_lock+0x44>)
 8011084:	68fb      	ldr	r3, [r7, #12]
 8011086:	011b      	lsls	r3, r3, #4
 8011088:	4413      	add	r3, r2
 801108a:	681b      	ldr	r3, [r3, #0]
 801108c:	687a      	ldr	r2, [r7, #4]
 801108e:	429a      	cmp	r2, r3
 8011090:	d105      	bne.n	801109e <clear_lock+0x2a>
 8011092:	4a09      	ldr	r2, [pc, #36]	@ (80110b8 <clear_lock+0x44>)
 8011094:	68fb      	ldr	r3, [r7, #12]
 8011096:	011b      	lsls	r3, r3, #4
 8011098:	4413      	add	r3, r2
 801109a:	2200      	movs	r2, #0
 801109c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 801109e:	68fb      	ldr	r3, [r7, #12]
 80110a0:	3301      	adds	r3, #1
 80110a2:	60fb      	str	r3, [r7, #12]
 80110a4:	68fb      	ldr	r3, [r7, #12]
 80110a6:	2b01      	cmp	r3, #1
 80110a8:	d9eb      	bls.n	8011082 <clear_lock+0xe>
	}
}
 80110aa:	bf00      	nop
 80110ac:	bf00      	nop
 80110ae:	3714      	adds	r7, #20
 80110b0:	46bd      	mov	sp, r7
 80110b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110b6:	4770      	bx	lr
 80110b8:	24000d70 	.word	0x24000d70

080110bc <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80110bc:	b580      	push	{r7, lr}
 80110be:	b086      	sub	sp, #24
 80110c0:	af00      	add	r7, sp, #0
 80110c2:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80110c4:	2300      	movs	r3, #0
 80110c6:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80110c8:	687b      	ldr	r3, [r7, #4]
 80110ca:	78db      	ldrb	r3, [r3, #3]
 80110cc:	2b00      	cmp	r3, #0
 80110ce:	d034      	beq.n	801113a <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 80110d0:	687b      	ldr	r3, [r7, #4]
 80110d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80110d4:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80110d6:	687b      	ldr	r3, [r7, #4]
 80110d8:	7858      	ldrb	r0, [r3, #1]
 80110da:	687b      	ldr	r3, [r7, #4]
 80110dc:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80110e0:	2301      	movs	r3, #1
 80110e2:	697a      	ldr	r2, [r7, #20]
 80110e4:	f7ff fd40 	bl	8010b68 <disk_write>
 80110e8:	4603      	mov	r3, r0
 80110ea:	2b00      	cmp	r3, #0
 80110ec:	d002      	beq.n	80110f4 <sync_window+0x38>
			res = FR_DISK_ERR;
 80110ee:	2301      	movs	r3, #1
 80110f0:	73fb      	strb	r3, [r7, #15]
 80110f2:	e022      	b.n	801113a <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 80110f4:	687b      	ldr	r3, [r7, #4]
 80110f6:	2200      	movs	r2, #0
 80110f8:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80110fa:	687b      	ldr	r3, [r7, #4]
 80110fc:	6a1b      	ldr	r3, [r3, #32]
 80110fe:	697a      	ldr	r2, [r7, #20]
 8011100:	1ad2      	subs	r2, r2, r3
 8011102:	687b      	ldr	r3, [r7, #4]
 8011104:	699b      	ldr	r3, [r3, #24]
 8011106:	429a      	cmp	r2, r3
 8011108:	d217      	bcs.n	801113a <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801110a:	687b      	ldr	r3, [r7, #4]
 801110c:	789b      	ldrb	r3, [r3, #2]
 801110e:	613b      	str	r3, [r7, #16]
 8011110:	e010      	b.n	8011134 <sync_window+0x78>
					wsect += fs->fsize;
 8011112:	687b      	ldr	r3, [r7, #4]
 8011114:	699b      	ldr	r3, [r3, #24]
 8011116:	697a      	ldr	r2, [r7, #20]
 8011118:	4413      	add	r3, r2
 801111a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 801111c:	687b      	ldr	r3, [r7, #4]
 801111e:	7858      	ldrb	r0, [r3, #1]
 8011120:	687b      	ldr	r3, [r7, #4]
 8011122:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8011126:	2301      	movs	r3, #1
 8011128:	697a      	ldr	r2, [r7, #20]
 801112a:	f7ff fd1d 	bl	8010b68 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801112e:	693b      	ldr	r3, [r7, #16]
 8011130:	3b01      	subs	r3, #1
 8011132:	613b      	str	r3, [r7, #16]
 8011134:	693b      	ldr	r3, [r7, #16]
 8011136:	2b01      	cmp	r3, #1
 8011138:	d8eb      	bhi.n	8011112 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 801113a:	7bfb      	ldrb	r3, [r7, #15]
}
 801113c:	4618      	mov	r0, r3
 801113e:	3718      	adds	r7, #24
 8011140:	46bd      	mov	sp, r7
 8011142:	bd80      	pop	{r7, pc}

08011144 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8011144:	b580      	push	{r7, lr}
 8011146:	b084      	sub	sp, #16
 8011148:	af00      	add	r7, sp, #0
 801114a:	6078      	str	r0, [r7, #4]
 801114c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 801114e:	2300      	movs	r3, #0
 8011150:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8011152:	687b      	ldr	r3, [r7, #4]
 8011154:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011156:	683a      	ldr	r2, [r7, #0]
 8011158:	429a      	cmp	r2, r3
 801115a:	d01b      	beq.n	8011194 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 801115c:	6878      	ldr	r0, [r7, #4]
 801115e:	f7ff ffad 	bl	80110bc <sync_window>
 8011162:	4603      	mov	r3, r0
 8011164:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8011166:	7bfb      	ldrb	r3, [r7, #15]
 8011168:	2b00      	cmp	r3, #0
 801116a:	d113      	bne.n	8011194 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 801116c:	687b      	ldr	r3, [r7, #4]
 801116e:	7858      	ldrb	r0, [r3, #1]
 8011170:	687b      	ldr	r3, [r7, #4]
 8011172:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8011176:	2301      	movs	r3, #1
 8011178:	683a      	ldr	r2, [r7, #0]
 801117a:	f7ff fcd5 	bl	8010b28 <disk_read>
 801117e:	4603      	mov	r3, r0
 8011180:	2b00      	cmp	r3, #0
 8011182:	d004      	beq.n	801118e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8011184:	f04f 33ff 	mov.w	r3, #4294967295
 8011188:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 801118a:	2301      	movs	r3, #1
 801118c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 801118e:	687b      	ldr	r3, [r7, #4]
 8011190:	683a      	ldr	r2, [r7, #0]
 8011192:	62da      	str	r2, [r3, #44]	@ 0x2c
		}
	}
	return res;
 8011194:	7bfb      	ldrb	r3, [r7, #15]
}
 8011196:	4618      	mov	r0, r3
 8011198:	3710      	adds	r7, #16
 801119a:	46bd      	mov	sp, r7
 801119c:	bd80      	pop	{r7, pc}
	...

080111a0 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 80111a0:	b580      	push	{r7, lr}
 80111a2:	b084      	sub	sp, #16
 80111a4:	af00      	add	r7, sp, #0
 80111a6:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80111a8:	6878      	ldr	r0, [r7, #4]
 80111aa:	f7ff ff87 	bl	80110bc <sync_window>
 80111ae:	4603      	mov	r3, r0
 80111b0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80111b2:	7bfb      	ldrb	r3, [r7, #15]
 80111b4:	2b00      	cmp	r3, #0
 80111b6:	d158      	bne.n	801126a <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80111b8:	687b      	ldr	r3, [r7, #4]
 80111ba:	781b      	ldrb	r3, [r3, #0]
 80111bc:	2b03      	cmp	r3, #3
 80111be:	d148      	bne.n	8011252 <sync_fs+0xb2>
 80111c0:	687b      	ldr	r3, [r7, #4]
 80111c2:	791b      	ldrb	r3, [r3, #4]
 80111c4:	2b01      	cmp	r3, #1
 80111c6:	d144      	bne.n	8011252 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 80111c8:	687b      	ldr	r3, [r7, #4]
 80111ca:	3330      	adds	r3, #48	@ 0x30
 80111cc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80111d0:	2100      	movs	r1, #0
 80111d2:	4618      	mov	r0, r3
 80111d4:	f7ff fda9 	bl	8010d2a <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 80111d8:	687b      	ldr	r3, [r7, #4]
 80111da:	3330      	adds	r3, #48	@ 0x30
 80111dc:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 80111e0:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 80111e4:	4618      	mov	r0, r3
 80111e6:	f7ff fd38 	bl	8010c5a <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 80111ea:	687b      	ldr	r3, [r7, #4]
 80111ec:	3330      	adds	r3, #48	@ 0x30
 80111ee:	4921      	ldr	r1, [pc, #132]	@ (8011274 <sync_fs+0xd4>)
 80111f0:	4618      	mov	r0, r3
 80111f2:	f7ff fd4d 	bl	8010c90 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 80111f6:	687b      	ldr	r3, [r7, #4]
 80111f8:	3330      	adds	r3, #48	@ 0x30
 80111fa:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 80111fe:	491e      	ldr	r1, [pc, #120]	@ (8011278 <sync_fs+0xd8>)
 8011200:	4618      	mov	r0, r3
 8011202:	f7ff fd45 	bl	8010c90 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8011206:	687b      	ldr	r3, [r7, #4]
 8011208:	3330      	adds	r3, #48	@ 0x30
 801120a:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 801120e:	687b      	ldr	r3, [r7, #4]
 8011210:	691b      	ldr	r3, [r3, #16]
 8011212:	4619      	mov	r1, r3
 8011214:	4610      	mov	r0, r2
 8011216:	f7ff fd3b 	bl	8010c90 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 801121a:	687b      	ldr	r3, [r7, #4]
 801121c:	3330      	adds	r3, #48	@ 0x30
 801121e:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 8011222:	687b      	ldr	r3, [r7, #4]
 8011224:	68db      	ldr	r3, [r3, #12]
 8011226:	4619      	mov	r1, r3
 8011228:	4610      	mov	r0, r2
 801122a:	f7ff fd31 	bl	8010c90 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 801122e:	687b      	ldr	r3, [r7, #4]
 8011230:	69db      	ldr	r3, [r3, #28]
 8011232:	1c5a      	adds	r2, r3, #1
 8011234:	687b      	ldr	r3, [r7, #4]
 8011236:	62da      	str	r2, [r3, #44]	@ 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8011238:	687b      	ldr	r3, [r7, #4]
 801123a:	7858      	ldrb	r0, [r3, #1]
 801123c:	687b      	ldr	r3, [r7, #4]
 801123e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8011242:	687b      	ldr	r3, [r7, #4]
 8011244:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011246:	2301      	movs	r3, #1
 8011248:	f7ff fc8e 	bl	8010b68 <disk_write>
			fs->fsi_flag = 0;
 801124c:	687b      	ldr	r3, [r7, #4]
 801124e:	2200      	movs	r2, #0
 8011250:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8011252:	687b      	ldr	r3, [r7, #4]
 8011254:	785b      	ldrb	r3, [r3, #1]
 8011256:	2200      	movs	r2, #0
 8011258:	2100      	movs	r1, #0
 801125a:	4618      	mov	r0, r3
 801125c:	f7ff fca4 	bl	8010ba8 <disk_ioctl>
 8011260:	4603      	mov	r3, r0
 8011262:	2b00      	cmp	r3, #0
 8011264:	d001      	beq.n	801126a <sync_fs+0xca>
 8011266:	2301      	movs	r3, #1
 8011268:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 801126a:	7bfb      	ldrb	r3, [r7, #15]
}
 801126c:	4618      	mov	r0, r3
 801126e:	3710      	adds	r7, #16
 8011270:	46bd      	mov	sp, r7
 8011272:	bd80      	pop	{r7, pc}
 8011274:	41615252 	.word	0x41615252
 8011278:	61417272 	.word	0x61417272

0801127c <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 801127c:	b480      	push	{r7}
 801127e:	b083      	sub	sp, #12
 8011280:	af00      	add	r7, sp, #0
 8011282:	6078      	str	r0, [r7, #4]
 8011284:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8011286:	683b      	ldr	r3, [r7, #0]
 8011288:	3b02      	subs	r3, #2
 801128a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 801128c:	687b      	ldr	r3, [r7, #4]
 801128e:	695b      	ldr	r3, [r3, #20]
 8011290:	3b02      	subs	r3, #2
 8011292:	683a      	ldr	r2, [r7, #0]
 8011294:	429a      	cmp	r2, r3
 8011296:	d301      	bcc.n	801129c <clust2sect+0x20>
 8011298:	2300      	movs	r3, #0
 801129a:	e008      	b.n	80112ae <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 801129c:	687b      	ldr	r3, [r7, #4]
 801129e:	895b      	ldrh	r3, [r3, #10]
 80112a0:	461a      	mov	r2, r3
 80112a2:	683b      	ldr	r3, [r7, #0]
 80112a4:	fb03 f202 	mul.w	r2, r3, r2
 80112a8:	687b      	ldr	r3, [r7, #4]
 80112aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80112ac:	4413      	add	r3, r2
}
 80112ae:	4618      	mov	r0, r3
 80112b0:	370c      	adds	r7, #12
 80112b2:	46bd      	mov	sp, r7
 80112b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112b8:	4770      	bx	lr

080112ba <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 80112ba:	b580      	push	{r7, lr}
 80112bc:	b086      	sub	sp, #24
 80112be:	af00      	add	r7, sp, #0
 80112c0:	6078      	str	r0, [r7, #4]
 80112c2:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 80112c4:	687b      	ldr	r3, [r7, #4]
 80112c6:	681b      	ldr	r3, [r3, #0]
 80112c8:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80112ca:	683b      	ldr	r3, [r7, #0]
 80112cc:	2b01      	cmp	r3, #1
 80112ce:	d904      	bls.n	80112da <get_fat+0x20>
 80112d0:	693b      	ldr	r3, [r7, #16]
 80112d2:	695b      	ldr	r3, [r3, #20]
 80112d4:	683a      	ldr	r2, [r7, #0]
 80112d6:	429a      	cmp	r2, r3
 80112d8:	d302      	bcc.n	80112e0 <get_fat+0x26>
		val = 1;	/* Internal error */
 80112da:	2301      	movs	r3, #1
 80112dc:	617b      	str	r3, [r7, #20]
 80112de:	e08e      	b.n	80113fe <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80112e0:	f04f 33ff 	mov.w	r3, #4294967295
 80112e4:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 80112e6:	693b      	ldr	r3, [r7, #16]
 80112e8:	781b      	ldrb	r3, [r3, #0]
 80112ea:	2b03      	cmp	r3, #3
 80112ec:	d061      	beq.n	80113b2 <get_fat+0xf8>
 80112ee:	2b03      	cmp	r3, #3
 80112f0:	dc7b      	bgt.n	80113ea <get_fat+0x130>
 80112f2:	2b01      	cmp	r3, #1
 80112f4:	d002      	beq.n	80112fc <get_fat+0x42>
 80112f6:	2b02      	cmp	r3, #2
 80112f8:	d041      	beq.n	801137e <get_fat+0xc4>
 80112fa:	e076      	b.n	80113ea <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80112fc:	683b      	ldr	r3, [r7, #0]
 80112fe:	60fb      	str	r3, [r7, #12]
 8011300:	68fb      	ldr	r3, [r7, #12]
 8011302:	085b      	lsrs	r3, r3, #1
 8011304:	68fa      	ldr	r2, [r7, #12]
 8011306:	4413      	add	r3, r2
 8011308:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801130a:	693b      	ldr	r3, [r7, #16]
 801130c:	6a1a      	ldr	r2, [r3, #32]
 801130e:	68fb      	ldr	r3, [r7, #12]
 8011310:	0a5b      	lsrs	r3, r3, #9
 8011312:	4413      	add	r3, r2
 8011314:	4619      	mov	r1, r3
 8011316:	6938      	ldr	r0, [r7, #16]
 8011318:	f7ff ff14 	bl	8011144 <move_window>
 801131c:	4603      	mov	r3, r0
 801131e:	2b00      	cmp	r3, #0
 8011320:	d166      	bne.n	80113f0 <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 8011322:	68fb      	ldr	r3, [r7, #12]
 8011324:	1c5a      	adds	r2, r3, #1
 8011326:	60fa      	str	r2, [r7, #12]
 8011328:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801132c:	693a      	ldr	r2, [r7, #16]
 801132e:	4413      	add	r3, r2
 8011330:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8011334:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8011336:	693b      	ldr	r3, [r7, #16]
 8011338:	6a1a      	ldr	r2, [r3, #32]
 801133a:	68fb      	ldr	r3, [r7, #12]
 801133c:	0a5b      	lsrs	r3, r3, #9
 801133e:	4413      	add	r3, r2
 8011340:	4619      	mov	r1, r3
 8011342:	6938      	ldr	r0, [r7, #16]
 8011344:	f7ff fefe 	bl	8011144 <move_window>
 8011348:	4603      	mov	r3, r0
 801134a:	2b00      	cmp	r3, #0
 801134c:	d152      	bne.n	80113f4 <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 801134e:	68fb      	ldr	r3, [r7, #12]
 8011350:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011354:	693a      	ldr	r2, [r7, #16]
 8011356:	4413      	add	r3, r2
 8011358:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801135c:	021b      	lsls	r3, r3, #8
 801135e:	68ba      	ldr	r2, [r7, #8]
 8011360:	4313      	orrs	r3, r2
 8011362:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8011364:	683b      	ldr	r3, [r7, #0]
 8011366:	f003 0301 	and.w	r3, r3, #1
 801136a:	2b00      	cmp	r3, #0
 801136c:	d002      	beq.n	8011374 <get_fat+0xba>
 801136e:	68bb      	ldr	r3, [r7, #8]
 8011370:	091b      	lsrs	r3, r3, #4
 8011372:	e002      	b.n	801137a <get_fat+0xc0>
 8011374:	68bb      	ldr	r3, [r7, #8]
 8011376:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801137a:	617b      	str	r3, [r7, #20]
			break;
 801137c:	e03f      	b.n	80113fe <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 801137e:	693b      	ldr	r3, [r7, #16]
 8011380:	6a1a      	ldr	r2, [r3, #32]
 8011382:	683b      	ldr	r3, [r7, #0]
 8011384:	0a1b      	lsrs	r3, r3, #8
 8011386:	4413      	add	r3, r2
 8011388:	4619      	mov	r1, r3
 801138a:	6938      	ldr	r0, [r7, #16]
 801138c:	f7ff feda 	bl	8011144 <move_window>
 8011390:	4603      	mov	r3, r0
 8011392:	2b00      	cmp	r3, #0
 8011394:	d130      	bne.n	80113f8 <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8011396:	693b      	ldr	r3, [r7, #16]
 8011398:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 801139c:	683b      	ldr	r3, [r7, #0]
 801139e:	005b      	lsls	r3, r3, #1
 80113a0:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 80113a4:	4413      	add	r3, r2
 80113a6:	4618      	mov	r0, r3
 80113a8:	f7ff fc1c 	bl	8010be4 <ld_word>
 80113ac:	4603      	mov	r3, r0
 80113ae:	617b      	str	r3, [r7, #20]
			break;
 80113b0:	e025      	b.n	80113fe <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80113b2:	693b      	ldr	r3, [r7, #16]
 80113b4:	6a1a      	ldr	r2, [r3, #32]
 80113b6:	683b      	ldr	r3, [r7, #0]
 80113b8:	09db      	lsrs	r3, r3, #7
 80113ba:	4413      	add	r3, r2
 80113bc:	4619      	mov	r1, r3
 80113be:	6938      	ldr	r0, [r7, #16]
 80113c0:	f7ff fec0 	bl	8011144 <move_window>
 80113c4:	4603      	mov	r3, r0
 80113c6:	2b00      	cmp	r3, #0
 80113c8:	d118      	bne.n	80113fc <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80113ca:	693b      	ldr	r3, [r7, #16]
 80113cc:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80113d0:	683b      	ldr	r3, [r7, #0]
 80113d2:	009b      	lsls	r3, r3, #2
 80113d4:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 80113d8:	4413      	add	r3, r2
 80113da:	4618      	mov	r0, r3
 80113dc:	f7ff fc1a 	bl	8010c14 <ld_dword>
 80113e0:	4603      	mov	r3, r0
 80113e2:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80113e6:	617b      	str	r3, [r7, #20]
			break;
 80113e8:	e009      	b.n	80113fe <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 80113ea:	2301      	movs	r3, #1
 80113ec:	617b      	str	r3, [r7, #20]
 80113ee:	e006      	b.n	80113fe <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80113f0:	bf00      	nop
 80113f2:	e004      	b.n	80113fe <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80113f4:	bf00      	nop
 80113f6:	e002      	b.n	80113fe <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80113f8:	bf00      	nop
 80113fa:	e000      	b.n	80113fe <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80113fc:	bf00      	nop
		}
	}

	return val;
 80113fe:	697b      	ldr	r3, [r7, #20]
}
 8011400:	4618      	mov	r0, r3
 8011402:	3718      	adds	r7, #24
 8011404:	46bd      	mov	sp, r7
 8011406:	bd80      	pop	{r7, pc}

08011408 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8011408:	b590      	push	{r4, r7, lr}
 801140a:	b089      	sub	sp, #36	@ 0x24
 801140c:	af00      	add	r7, sp, #0
 801140e:	60f8      	str	r0, [r7, #12]
 8011410:	60b9      	str	r1, [r7, #8]
 8011412:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8011414:	2302      	movs	r3, #2
 8011416:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8011418:	68bb      	ldr	r3, [r7, #8]
 801141a:	2b01      	cmp	r3, #1
 801141c:	f240 80d9 	bls.w	80115d2 <put_fat+0x1ca>
 8011420:	68fb      	ldr	r3, [r7, #12]
 8011422:	695b      	ldr	r3, [r3, #20]
 8011424:	68ba      	ldr	r2, [r7, #8]
 8011426:	429a      	cmp	r2, r3
 8011428:	f080 80d3 	bcs.w	80115d2 <put_fat+0x1ca>
		switch (fs->fs_type) {
 801142c:	68fb      	ldr	r3, [r7, #12]
 801142e:	781b      	ldrb	r3, [r3, #0]
 8011430:	2b03      	cmp	r3, #3
 8011432:	f000 8096 	beq.w	8011562 <put_fat+0x15a>
 8011436:	2b03      	cmp	r3, #3
 8011438:	f300 80cb 	bgt.w	80115d2 <put_fat+0x1ca>
 801143c:	2b01      	cmp	r3, #1
 801143e:	d002      	beq.n	8011446 <put_fat+0x3e>
 8011440:	2b02      	cmp	r3, #2
 8011442:	d06e      	beq.n	8011522 <put_fat+0x11a>
 8011444:	e0c5      	b.n	80115d2 <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8011446:	68bb      	ldr	r3, [r7, #8]
 8011448:	61bb      	str	r3, [r7, #24]
 801144a:	69bb      	ldr	r3, [r7, #24]
 801144c:	085b      	lsrs	r3, r3, #1
 801144e:	69ba      	ldr	r2, [r7, #24]
 8011450:	4413      	add	r3, r2
 8011452:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8011454:	68fb      	ldr	r3, [r7, #12]
 8011456:	6a1a      	ldr	r2, [r3, #32]
 8011458:	69bb      	ldr	r3, [r7, #24]
 801145a:	0a5b      	lsrs	r3, r3, #9
 801145c:	4413      	add	r3, r2
 801145e:	4619      	mov	r1, r3
 8011460:	68f8      	ldr	r0, [r7, #12]
 8011462:	f7ff fe6f 	bl	8011144 <move_window>
 8011466:	4603      	mov	r3, r0
 8011468:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801146a:	7ffb      	ldrb	r3, [r7, #31]
 801146c:	2b00      	cmp	r3, #0
 801146e:	f040 80a9 	bne.w	80115c4 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 8011472:	68fb      	ldr	r3, [r7, #12]
 8011474:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8011478:	69bb      	ldr	r3, [r7, #24]
 801147a:	1c59      	adds	r1, r3, #1
 801147c:	61b9      	str	r1, [r7, #24]
 801147e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011482:	4413      	add	r3, r2
 8011484:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8011486:	68bb      	ldr	r3, [r7, #8]
 8011488:	f003 0301 	and.w	r3, r3, #1
 801148c:	2b00      	cmp	r3, #0
 801148e:	d00d      	beq.n	80114ac <put_fat+0xa4>
 8011490:	697b      	ldr	r3, [r7, #20]
 8011492:	781b      	ldrb	r3, [r3, #0]
 8011494:	b25b      	sxtb	r3, r3
 8011496:	f003 030f 	and.w	r3, r3, #15
 801149a:	b25a      	sxtb	r2, r3
 801149c:	687b      	ldr	r3, [r7, #4]
 801149e:	b2db      	uxtb	r3, r3
 80114a0:	011b      	lsls	r3, r3, #4
 80114a2:	b25b      	sxtb	r3, r3
 80114a4:	4313      	orrs	r3, r2
 80114a6:	b25b      	sxtb	r3, r3
 80114a8:	b2db      	uxtb	r3, r3
 80114aa:	e001      	b.n	80114b0 <put_fat+0xa8>
 80114ac:	687b      	ldr	r3, [r7, #4]
 80114ae:	b2db      	uxtb	r3, r3
 80114b0:	697a      	ldr	r2, [r7, #20]
 80114b2:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80114b4:	68fb      	ldr	r3, [r7, #12]
 80114b6:	2201      	movs	r2, #1
 80114b8:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80114ba:	68fb      	ldr	r3, [r7, #12]
 80114bc:	6a1a      	ldr	r2, [r3, #32]
 80114be:	69bb      	ldr	r3, [r7, #24]
 80114c0:	0a5b      	lsrs	r3, r3, #9
 80114c2:	4413      	add	r3, r2
 80114c4:	4619      	mov	r1, r3
 80114c6:	68f8      	ldr	r0, [r7, #12]
 80114c8:	f7ff fe3c 	bl	8011144 <move_window>
 80114cc:	4603      	mov	r3, r0
 80114ce:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80114d0:	7ffb      	ldrb	r3, [r7, #31]
 80114d2:	2b00      	cmp	r3, #0
 80114d4:	d178      	bne.n	80115c8 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 80114d6:	68fb      	ldr	r3, [r7, #12]
 80114d8:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80114dc:	69bb      	ldr	r3, [r7, #24]
 80114de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80114e2:	4413      	add	r3, r2
 80114e4:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80114e6:	68bb      	ldr	r3, [r7, #8]
 80114e8:	f003 0301 	and.w	r3, r3, #1
 80114ec:	2b00      	cmp	r3, #0
 80114ee:	d003      	beq.n	80114f8 <put_fat+0xf0>
 80114f0:	687b      	ldr	r3, [r7, #4]
 80114f2:	091b      	lsrs	r3, r3, #4
 80114f4:	b2db      	uxtb	r3, r3
 80114f6:	e00e      	b.n	8011516 <put_fat+0x10e>
 80114f8:	697b      	ldr	r3, [r7, #20]
 80114fa:	781b      	ldrb	r3, [r3, #0]
 80114fc:	b25b      	sxtb	r3, r3
 80114fe:	f023 030f 	bic.w	r3, r3, #15
 8011502:	b25a      	sxtb	r2, r3
 8011504:	687b      	ldr	r3, [r7, #4]
 8011506:	0a1b      	lsrs	r3, r3, #8
 8011508:	b25b      	sxtb	r3, r3
 801150a:	f003 030f 	and.w	r3, r3, #15
 801150e:	b25b      	sxtb	r3, r3
 8011510:	4313      	orrs	r3, r2
 8011512:	b25b      	sxtb	r3, r3
 8011514:	b2db      	uxtb	r3, r3
 8011516:	697a      	ldr	r2, [r7, #20]
 8011518:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 801151a:	68fb      	ldr	r3, [r7, #12]
 801151c:	2201      	movs	r2, #1
 801151e:	70da      	strb	r2, [r3, #3]
			break;
 8011520:	e057      	b.n	80115d2 <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8011522:	68fb      	ldr	r3, [r7, #12]
 8011524:	6a1a      	ldr	r2, [r3, #32]
 8011526:	68bb      	ldr	r3, [r7, #8]
 8011528:	0a1b      	lsrs	r3, r3, #8
 801152a:	4413      	add	r3, r2
 801152c:	4619      	mov	r1, r3
 801152e:	68f8      	ldr	r0, [r7, #12]
 8011530:	f7ff fe08 	bl	8011144 <move_window>
 8011534:	4603      	mov	r3, r0
 8011536:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8011538:	7ffb      	ldrb	r3, [r7, #31]
 801153a:	2b00      	cmp	r3, #0
 801153c:	d146      	bne.n	80115cc <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 801153e:	68fb      	ldr	r3, [r7, #12]
 8011540:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8011544:	68bb      	ldr	r3, [r7, #8]
 8011546:	005b      	lsls	r3, r3, #1
 8011548:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 801154c:	4413      	add	r3, r2
 801154e:	687a      	ldr	r2, [r7, #4]
 8011550:	b292      	uxth	r2, r2
 8011552:	4611      	mov	r1, r2
 8011554:	4618      	mov	r0, r3
 8011556:	f7ff fb80 	bl	8010c5a <st_word>
			fs->wflag = 1;
 801155a:	68fb      	ldr	r3, [r7, #12]
 801155c:	2201      	movs	r2, #1
 801155e:	70da      	strb	r2, [r3, #3]
			break;
 8011560:	e037      	b.n	80115d2 <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8011562:	68fb      	ldr	r3, [r7, #12]
 8011564:	6a1a      	ldr	r2, [r3, #32]
 8011566:	68bb      	ldr	r3, [r7, #8]
 8011568:	09db      	lsrs	r3, r3, #7
 801156a:	4413      	add	r3, r2
 801156c:	4619      	mov	r1, r3
 801156e:	68f8      	ldr	r0, [r7, #12]
 8011570:	f7ff fde8 	bl	8011144 <move_window>
 8011574:	4603      	mov	r3, r0
 8011576:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8011578:	7ffb      	ldrb	r3, [r7, #31]
 801157a:	2b00      	cmp	r3, #0
 801157c:	d128      	bne.n	80115d0 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 801157e:	687b      	ldr	r3, [r7, #4]
 8011580:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 8011584:	68fb      	ldr	r3, [r7, #12]
 8011586:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 801158a:	68bb      	ldr	r3, [r7, #8]
 801158c:	009b      	lsls	r3, r3, #2
 801158e:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8011592:	4413      	add	r3, r2
 8011594:	4618      	mov	r0, r3
 8011596:	f7ff fb3d 	bl	8010c14 <ld_dword>
 801159a:	4603      	mov	r3, r0
 801159c:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 80115a0:	4323      	orrs	r3, r4
 80115a2:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80115a4:	68fb      	ldr	r3, [r7, #12]
 80115a6:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80115aa:	68bb      	ldr	r3, [r7, #8]
 80115ac:	009b      	lsls	r3, r3, #2
 80115ae:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 80115b2:	4413      	add	r3, r2
 80115b4:	6879      	ldr	r1, [r7, #4]
 80115b6:	4618      	mov	r0, r3
 80115b8:	f7ff fb6a 	bl	8010c90 <st_dword>
			fs->wflag = 1;
 80115bc:	68fb      	ldr	r3, [r7, #12]
 80115be:	2201      	movs	r2, #1
 80115c0:	70da      	strb	r2, [r3, #3]
			break;
 80115c2:	e006      	b.n	80115d2 <put_fat+0x1ca>
			if (res != FR_OK) break;
 80115c4:	bf00      	nop
 80115c6:	e004      	b.n	80115d2 <put_fat+0x1ca>
			if (res != FR_OK) break;
 80115c8:	bf00      	nop
 80115ca:	e002      	b.n	80115d2 <put_fat+0x1ca>
			if (res != FR_OK) break;
 80115cc:	bf00      	nop
 80115ce:	e000      	b.n	80115d2 <put_fat+0x1ca>
			if (res != FR_OK) break;
 80115d0:	bf00      	nop
		}
	}
	return res;
 80115d2:	7ffb      	ldrb	r3, [r7, #31]
}
 80115d4:	4618      	mov	r0, r3
 80115d6:	3724      	adds	r7, #36	@ 0x24
 80115d8:	46bd      	mov	sp, r7
 80115da:	bd90      	pop	{r4, r7, pc}

080115dc <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 80115dc:	b580      	push	{r7, lr}
 80115de:	b088      	sub	sp, #32
 80115e0:	af00      	add	r7, sp, #0
 80115e2:	60f8      	str	r0, [r7, #12]
 80115e4:	60b9      	str	r1, [r7, #8]
 80115e6:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 80115e8:	2300      	movs	r3, #0
 80115ea:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 80115ec:	68fb      	ldr	r3, [r7, #12]
 80115ee:	681b      	ldr	r3, [r3, #0]
 80115f0:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80115f2:	68bb      	ldr	r3, [r7, #8]
 80115f4:	2b01      	cmp	r3, #1
 80115f6:	d904      	bls.n	8011602 <remove_chain+0x26>
 80115f8:	69bb      	ldr	r3, [r7, #24]
 80115fa:	695b      	ldr	r3, [r3, #20]
 80115fc:	68ba      	ldr	r2, [r7, #8]
 80115fe:	429a      	cmp	r2, r3
 8011600:	d301      	bcc.n	8011606 <remove_chain+0x2a>
 8011602:	2302      	movs	r3, #2
 8011604:	e04b      	b.n	801169e <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8011606:	687b      	ldr	r3, [r7, #4]
 8011608:	2b00      	cmp	r3, #0
 801160a:	d00c      	beq.n	8011626 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 801160c:	f04f 32ff 	mov.w	r2, #4294967295
 8011610:	6879      	ldr	r1, [r7, #4]
 8011612:	69b8      	ldr	r0, [r7, #24]
 8011614:	f7ff fef8 	bl	8011408 <put_fat>
 8011618:	4603      	mov	r3, r0
 801161a:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 801161c:	7ffb      	ldrb	r3, [r7, #31]
 801161e:	2b00      	cmp	r3, #0
 8011620:	d001      	beq.n	8011626 <remove_chain+0x4a>
 8011622:	7ffb      	ldrb	r3, [r7, #31]
 8011624:	e03b      	b.n	801169e <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8011626:	68b9      	ldr	r1, [r7, #8]
 8011628:	68f8      	ldr	r0, [r7, #12]
 801162a:	f7ff fe46 	bl	80112ba <get_fat>
 801162e:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8011630:	697b      	ldr	r3, [r7, #20]
 8011632:	2b00      	cmp	r3, #0
 8011634:	d031      	beq.n	801169a <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8011636:	697b      	ldr	r3, [r7, #20]
 8011638:	2b01      	cmp	r3, #1
 801163a:	d101      	bne.n	8011640 <remove_chain+0x64>
 801163c:	2302      	movs	r3, #2
 801163e:	e02e      	b.n	801169e <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8011640:	697b      	ldr	r3, [r7, #20]
 8011642:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011646:	d101      	bne.n	801164c <remove_chain+0x70>
 8011648:	2301      	movs	r3, #1
 801164a:	e028      	b.n	801169e <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 801164c:	2200      	movs	r2, #0
 801164e:	68b9      	ldr	r1, [r7, #8]
 8011650:	69b8      	ldr	r0, [r7, #24]
 8011652:	f7ff fed9 	bl	8011408 <put_fat>
 8011656:	4603      	mov	r3, r0
 8011658:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 801165a:	7ffb      	ldrb	r3, [r7, #31]
 801165c:	2b00      	cmp	r3, #0
 801165e:	d001      	beq.n	8011664 <remove_chain+0x88>
 8011660:	7ffb      	ldrb	r3, [r7, #31]
 8011662:	e01c      	b.n	801169e <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8011664:	69bb      	ldr	r3, [r7, #24]
 8011666:	691a      	ldr	r2, [r3, #16]
 8011668:	69bb      	ldr	r3, [r7, #24]
 801166a:	695b      	ldr	r3, [r3, #20]
 801166c:	3b02      	subs	r3, #2
 801166e:	429a      	cmp	r2, r3
 8011670:	d20b      	bcs.n	801168a <remove_chain+0xae>
			fs->free_clst++;
 8011672:	69bb      	ldr	r3, [r7, #24]
 8011674:	691b      	ldr	r3, [r3, #16]
 8011676:	1c5a      	adds	r2, r3, #1
 8011678:	69bb      	ldr	r3, [r7, #24]
 801167a:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 801167c:	69bb      	ldr	r3, [r7, #24]
 801167e:	791b      	ldrb	r3, [r3, #4]
 8011680:	f043 0301 	orr.w	r3, r3, #1
 8011684:	b2da      	uxtb	r2, r3
 8011686:	69bb      	ldr	r3, [r7, #24]
 8011688:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 801168a:	697b      	ldr	r3, [r7, #20]
 801168c:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 801168e:	69bb      	ldr	r3, [r7, #24]
 8011690:	695b      	ldr	r3, [r3, #20]
 8011692:	68ba      	ldr	r2, [r7, #8]
 8011694:	429a      	cmp	r2, r3
 8011696:	d3c6      	bcc.n	8011626 <remove_chain+0x4a>
 8011698:	e000      	b.n	801169c <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 801169a:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 801169c:	2300      	movs	r3, #0
}
 801169e:	4618      	mov	r0, r3
 80116a0:	3720      	adds	r7, #32
 80116a2:	46bd      	mov	sp, r7
 80116a4:	bd80      	pop	{r7, pc}

080116a6 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 80116a6:	b580      	push	{r7, lr}
 80116a8:	b088      	sub	sp, #32
 80116aa:	af00      	add	r7, sp, #0
 80116ac:	6078      	str	r0, [r7, #4]
 80116ae:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 80116b0:	687b      	ldr	r3, [r7, #4]
 80116b2:	681b      	ldr	r3, [r3, #0]
 80116b4:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 80116b6:	683b      	ldr	r3, [r7, #0]
 80116b8:	2b00      	cmp	r3, #0
 80116ba:	d10d      	bne.n	80116d8 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 80116bc:	693b      	ldr	r3, [r7, #16]
 80116be:	68db      	ldr	r3, [r3, #12]
 80116c0:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80116c2:	69bb      	ldr	r3, [r7, #24]
 80116c4:	2b00      	cmp	r3, #0
 80116c6:	d004      	beq.n	80116d2 <create_chain+0x2c>
 80116c8:	693b      	ldr	r3, [r7, #16]
 80116ca:	695b      	ldr	r3, [r3, #20]
 80116cc:	69ba      	ldr	r2, [r7, #24]
 80116ce:	429a      	cmp	r2, r3
 80116d0:	d31b      	bcc.n	801170a <create_chain+0x64>
 80116d2:	2301      	movs	r3, #1
 80116d4:	61bb      	str	r3, [r7, #24]
 80116d6:	e018      	b.n	801170a <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80116d8:	6839      	ldr	r1, [r7, #0]
 80116da:	6878      	ldr	r0, [r7, #4]
 80116dc:	f7ff fded 	bl	80112ba <get_fat>
 80116e0:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 80116e2:	68fb      	ldr	r3, [r7, #12]
 80116e4:	2b01      	cmp	r3, #1
 80116e6:	d801      	bhi.n	80116ec <create_chain+0x46>
 80116e8:	2301      	movs	r3, #1
 80116ea:	e070      	b.n	80117ce <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80116ec:	68fb      	ldr	r3, [r7, #12]
 80116ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80116f2:	d101      	bne.n	80116f8 <create_chain+0x52>
 80116f4:	68fb      	ldr	r3, [r7, #12]
 80116f6:	e06a      	b.n	80117ce <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80116f8:	693b      	ldr	r3, [r7, #16]
 80116fa:	695b      	ldr	r3, [r3, #20]
 80116fc:	68fa      	ldr	r2, [r7, #12]
 80116fe:	429a      	cmp	r2, r3
 8011700:	d201      	bcs.n	8011706 <create_chain+0x60>
 8011702:	68fb      	ldr	r3, [r7, #12]
 8011704:	e063      	b.n	80117ce <create_chain+0x128>
		scl = clst;
 8011706:	683b      	ldr	r3, [r7, #0]
 8011708:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 801170a:	69bb      	ldr	r3, [r7, #24]
 801170c:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 801170e:	69fb      	ldr	r3, [r7, #28]
 8011710:	3301      	adds	r3, #1
 8011712:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8011714:	693b      	ldr	r3, [r7, #16]
 8011716:	695b      	ldr	r3, [r3, #20]
 8011718:	69fa      	ldr	r2, [r7, #28]
 801171a:	429a      	cmp	r2, r3
 801171c:	d307      	bcc.n	801172e <create_chain+0x88>
				ncl = 2;
 801171e:	2302      	movs	r3, #2
 8011720:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8011722:	69fa      	ldr	r2, [r7, #28]
 8011724:	69bb      	ldr	r3, [r7, #24]
 8011726:	429a      	cmp	r2, r3
 8011728:	d901      	bls.n	801172e <create_chain+0x88>
 801172a:	2300      	movs	r3, #0
 801172c:	e04f      	b.n	80117ce <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 801172e:	69f9      	ldr	r1, [r7, #28]
 8011730:	6878      	ldr	r0, [r7, #4]
 8011732:	f7ff fdc2 	bl	80112ba <get_fat>
 8011736:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8011738:	68fb      	ldr	r3, [r7, #12]
 801173a:	2b00      	cmp	r3, #0
 801173c:	d00e      	beq.n	801175c <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 801173e:	68fb      	ldr	r3, [r7, #12]
 8011740:	2b01      	cmp	r3, #1
 8011742:	d003      	beq.n	801174c <create_chain+0xa6>
 8011744:	68fb      	ldr	r3, [r7, #12]
 8011746:	f1b3 3fff 	cmp.w	r3, #4294967295
 801174a:	d101      	bne.n	8011750 <create_chain+0xaa>
 801174c:	68fb      	ldr	r3, [r7, #12]
 801174e:	e03e      	b.n	80117ce <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8011750:	69fa      	ldr	r2, [r7, #28]
 8011752:	69bb      	ldr	r3, [r7, #24]
 8011754:	429a      	cmp	r2, r3
 8011756:	d1da      	bne.n	801170e <create_chain+0x68>
 8011758:	2300      	movs	r3, #0
 801175a:	e038      	b.n	80117ce <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 801175c:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 801175e:	f04f 32ff 	mov.w	r2, #4294967295
 8011762:	69f9      	ldr	r1, [r7, #28]
 8011764:	6938      	ldr	r0, [r7, #16]
 8011766:	f7ff fe4f 	bl	8011408 <put_fat>
 801176a:	4603      	mov	r3, r0
 801176c:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 801176e:	7dfb      	ldrb	r3, [r7, #23]
 8011770:	2b00      	cmp	r3, #0
 8011772:	d109      	bne.n	8011788 <create_chain+0xe2>
 8011774:	683b      	ldr	r3, [r7, #0]
 8011776:	2b00      	cmp	r3, #0
 8011778:	d006      	beq.n	8011788 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 801177a:	69fa      	ldr	r2, [r7, #28]
 801177c:	6839      	ldr	r1, [r7, #0]
 801177e:	6938      	ldr	r0, [r7, #16]
 8011780:	f7ff fe42 	bl	8011408 <put_fat>
 8011784:	4603      	mov	r3, r0
 8011786:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8011788:	7dfb      	ldrb	r3, [r7, #23]
 801178a:	2b00      	cmp	r3, #0
 801178c:	d116      	bne.n	80117bc <create_chain+0x116>
		fs->last_clst = ncl;
 801178e:	693b      	ldr	r3, [r7, #16]
 8011790:	69fa      	ldr	r2, [r7, #28]
 8011792:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8011794:	693b      	ldr	r3, [r7, #16]
 8011796:	691a      	ldr	r2, [r3, #16]
 8011798:	693b      	ldr	r3, [r7, #16]
 801179a:	695b      	ldr	r3, [r3, #20]
 801179c:	3b02      	subs	r3, #2
 801179e:	429a      	cmp	r2, r3
 80117a0:	d804      	bhi.n	80117ac <create_chain+0x106>
 80117a2:	693b      	ldr	r3, [r7, #16]
 80117a4:	691b      	ldr	r3, [r3, #16]
 80117a6:	1e5a      	subs	r2, r3, #1
 80117a8:	693b      	ldr	r3, [r7, #16]
 80117aa:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 80117ac:	693b      	ldr	r3, [r7, #16]
 80117ae:	791b      	ldrb	r3, [r3, #4]
 80117b0:	f043 0301 	orr.w	r3, r3, #1
 80117b4:	b2da      	uxtb	r2, r3
 80117b6:	693b      	ldr	r3, [r7, #16]
 80117b8:	711a      	strb	r2, [r3, #4]
 80117ba:	e007      	b.n	80117cc <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80117bc:	7dfb      	ldrb	r3, [r7, #23]
 80117be:	2b01      	cmp	r3, #1
 80117c0:	d102      	bne.n	80117c8 <create_chain+0x122>
 80117c2:	f04f 33ff 	mov.w	r3, #4294967295
 80117c6:	e000      	b.n	80117ca <create_chain+0x124>
 80117c8:	2301      	movs	r3, #1
 80117ca:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 80117cc:	69fb      	ldr	r3, [r7, #28]
}
 80117ce:	4618      	mov	r0, r3
 80117d0:	3720      	adds	r7, #32
 80117d2:	46bd      	mov	sp, r7
 80117d4:	bd80      	pop	{r7, pc}

080117d6 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 80117d6:	b480      	push	{r7}
 80117d8:	b087      	sub	sp, #28
 80117da:	af00      	add	r7, sp, #0
 80117dc:	6078      	str	r0, [r7, #4]
 80117de:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 80117e0:	687b      	ldr	r3, [r7, #4]
 80117e2:	681b      	ldr	r3, [r3, #0]
 80117e4:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80117e6:	687b      	ldr	r3, [r7, #4]
 80117e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80117ea:	3304      	adds	r3, #4
 80117ec:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80117ee:	683b      	ldr	r3, [r7, #0]
 80117f0:	0a5b      	lsrs	r3, r3, #9
 80117f2:	68fa      	ldr	r2, [r7, #12]
 80117f4:	8952      	ldrh	r2, [r2, #10]
 80117f6:	fbb3 f3f2 	udiv	r3, r3, r2
 80117fa:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80117fc:	693b      	ldr	r3, [r7, #16]
 80117fe:	1d1a      	adds	r2, r3, #4
 8011800:	613a      	str	r2, [r7, #16]
 8011802:	681b      	ldr	r3, [r3, #0]
 8011804:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8011806:	68bb      	ldr	r3, [r7, #8]
 8011808:	2b00      	cmp	r3, #0
 801180a:	d101      	bne.n	8011810 <clmt_clust+0x3a>
 801180c:	2300      	movs	r3, #0
 801180e:	e010      	b.n	8011832 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8011810:	697a      	ldr	r2, [r7, #20]
 8011812:	68bb      	ldr	r3, [r7, #8]
 8011814:	429a      	cmp	r2, r3
 8011816:	d307      	bcc.n	8011828 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8011818:	697a      	ldr	r2, [r7, #20]
 801181a:	68bb      	ldr	r3, [r7, #8]
 801181c:	1ad3      	subs	r3, r2, r3
 801181e:	617b      	str	r3, [r7, #20]
 8011820:	693b      	ldr	r3, [r7, #16]
 8011822:	3304      	adds	r3, #4
 8011824:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8011826:	e7e9      	b.n	80117fc <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8011828:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 801182a:	693b      	ldr	r3, [r7, #16]
 801182c:	681a      	ldr	r2, [r3, #0]
 801182e:	697b      	ldr	r3, [r7, #20]
 8011830:	4413      	add	r3, r2
}
 8011832:	4618      	mov	r0, r3
 8011834:	371c      	adds	r7, #28
 8011836:	46bd      	mov	sp, r7
 8011838:	f85d 7b04 	ldr.w	r7, [sp], #4
 801183c:	4770      	bx	lr

0801183e <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 801183e:	b580      	push	{r7, lr}
 8011840:	b086      	sub	sp, #24
 8011842:	af00      	add	r7, sp, #0
 8011844:	6078      	str	r0, [r7, #4]
 8011846:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8011848:	687b      	ldr	r3, [r7, #4]
 801184a:	681b      	ldr	r3, [r3, #0]
 801184c:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 801184e:	683b      	ldr	r3, [r7, #0]
 8011850:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8011854:	d204      	bcs.n	8011860 <dir_sdi+0x22>
 8011856:	683b      	ldr	r3, [r7, #0]
 8011858:	f003 031f 	and.w	r3, r3, #31
 801185c:	2b00      	cmp	r3, #0
 801185e:	d001      	beq.n	8011864 <dir_sdi+0x26>
		return FR_INT_ERR;
 8011860:	2302      	movs	r3, #2
 8011862:	e063      	b.n	801192c <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8011864:	687b      	ldr	r3, [r7, #4]
 8011866:	683a      	ldr	r2, [r7, #0]
 8011868:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 801186a:	687b      	ldr	r3, [r7, #4]
 801186c:	689b      	ldr	r3, [r3, #8]
 801186e:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8011870:	697b      	ldr	r3, [r7, #20]
 8011872:	2b00      	cmp	r3, #0
 8011874:	d106      	bne.n	8011884 <dir_sdi+0x46>
 8011876:	693b      	ldr	r3, [r7, #16]
 8011878:	781b      	ldrb	r3, [r3, #0]
 801187a:	2b02      	cmp	r3, #2
 801187c:	d902      	bls.n	8011884 <dir_sdi+0x46>
		clst = fs->dirbase;
 801187e:	693b      	ldr	r3, [r7, #16]
 8011880:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011882:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8011884:	697b      	ldr	r3, [r7, #20]
 8011886:	2b00      	cmp	r3, #0
 8011888:	d10c      	bne.n	80118a4 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 801188a:	683b      	ldr	r3, [r7, #0]
 801188c:	095b      	lsrs	r3, r3, #5
 801188e:	693a      	ldr	r2, [r7, #16]
 8011890:	8912      	ldrh	r2, [r2, #8]
 8011892:	4293      	cmp	r3, r2
 8011894:	d301      	bcc.n	801189a <dir_sdi+0x5c>
 8011896:	2302      	movs	r3, #2
 8011898:	e048      	b.n	801192c <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 801189a:	693b      	ldr	r3, [r7, #16]
 801189c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801189e:	687b      	ldr	r3, [r7, #4]
 80118a0:	61da      	str	r2, [r3, #28]
 80118a2:	e029      	b.n	80118f8 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80118a4:	693b      	ldr	r3, [r7, #16]
 80118a6:	895b      	ldrh	r3, [r3, #10]
 80118a8:	025b      	lsls	r3, r3, #9
 80118aa:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 80118ac:	e019      	b.n	80118e2 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80118ae:	687b      	ldr	r3, [r7, #4]
 80118b0:	6979      	ldr	r1, [r7, #20]
 80118b2:	4618      	mov	r0, r3
 80118b4:	f7ff fd01 	bl	80112ba <get_fat>
 80118b8:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80118ba:	697b      	ldr	r3, [r7, #20]
 80118bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80118c0:	d101      	bne.n	80118c6 <dir_sdi+0x88>
 80118c2:	2301      	movs	r3, #1
 80118c4:	e032      	b.n	801192c <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80118c6:	697b      	ldr	r3, [r7, #20]
 80118c8:	2b01      	cmp	r3, #1
 80118ca:	d904      	bls.n	80118d6 <dir_sdi+0x98>
 80118cc:	693b      	ldr	r3, [r7, #16]
 80118ce:	695b      	ldr	r3, [r3, #20]
 80118d0:	697a      	ldr	r2, [r7, #20]
 80118d2:	429a      	cmp	r2, r3
 80118d4:	d301      	bcc.n	80118da <dir_sdi+0x9c>
 80118d6:	2302      	movs	r3, #2
 80118d8:	e028      	b.n	801192c <dir_sdi+0xee>
			ofs -= csz;
 80118da:	683a      	ldr	r2, [r7, #0]
 80118dc:	68fb      	ldr	r3, [r7, #12]
 80118de:	1ad3      	subs	r3, r2, r3
 80118e0:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 80118e2:	683a      	ldr	r2, [r7, #0]
 80118e4:	68fb      	ldr	r3, [r7, #12]
 80118e6:	429a      	cmp	r2, r3
 80118e8:	d2e1      	bcs.n	80118ae <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 80118ea:	6979      	ldr	r1, [r7, #20]
 80118ec:	6938      	ldr	r0, [r7, #16]
 80118ee:	f7ff fcc5 	bl	801127c <clust2sect>
 80118f2:	4602      	mov	r2, r0
 80118f4:	687b      	ldr	r3, [r7, #4]
 80118f6:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 80118f8:	687b      	ldr	r3, [r7, #4]
 80118fa:	697a      	ldr	r2, [r7, #20]
 80118fc:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 80118fe:	687b      	ldr	r3, [r7, #4]
 8011900:	69db      	ldr	r3, [r3, #28]
 8011902:	2b00      	cmp	r3, #0
 8011904:	d101      	bne.n	801190a <dir_sdi+0xcc>
 8011906:	2302      	movs	r3, #2
 8011908:	e010      	b.n	801192c <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 801190a:	687b      	ldr	r3, [r7, #4]
 801190c:	69da      	ldr	r2, [r3, #28]
 801190e:	683b      	ldr	r3, [r7, #0]
 8011910:	0a5b      	lsrs	r3, r3, #9
 8011912:	441a      	add	r2, r3
 8011914:	687b      	ldr	r3, [r7, #4]
 8011916:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8011918:	693b      	ldr	r3, [r7, #16]
 801191a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 801191e:	683b      	ldr	r3, [r7, #0]
 8011920:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011924:	441a      	add	r2, r3
 8011926:	687b      	ldr	r3, [r7, #4]
 8011928:	621a      	str	r2, [r3, #32]

	return FR_OK;
 801192a:	2300      	movs	r3, #0
}
 801192c:	4618      	mov	r0, r3
 801192e:	3718      	adds	r7, #24
 8011930:	46bd      	mov	sp, r7
 8011932:	bd80      	pop	{r7, pc}

08011934 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8011934:	b580      	push	{r7, lr}
 8011936:	b086      	sub	sp, #24
 8011938:	af00      	add	r7, sp, #0
 801193a:	6078      	str	r0, [r7, #4]
 801193c:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 801193e:	687b      	ldr	r3, [r7, #4]
 8011940:	681b      	ldr	r3, [r3, #0]
 8011942:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8011944:	687b      	ldr	r3, [r7, #4]
 8011946:	695b      	ldr	r3, [r3, #20]
 8011948:	3320      	adds	r3, #32
 801194a:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 801194c:	687b      	ldr	r3, [r7, #4]
 801194e:	69db      	ldr	r3, [r3, #28]
 8011950:	2b00      	cmp	r3, #0
 8011952:	d003      	beq.n	801195c <dir_next+0x28>
 8011954:	68bb      	ldr	r3, [r7, #8]
 8011956:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 801195a:	d301      	bcc.n	8011960 <dir_next+0x2c>
 801195c:	2304      	movs	r3, #4
 801195e:	e0aa      	b.n	8011ab6 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8011960:	68bb      	ldr	r3, [r7, #8]
 8011962:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011966:	2b00      	cmp	r3, #0
 8011968:	f040 8098 	bne.w	8011a9c <dir_next+0x168>
		dp->sect++;				/* Next sector */
 801196c:	687b      	ldr	r3, [r7, #4]
 801196e:	69db      	ldr	r3, [r3, #28]
 8011970:	1c5a      	adds	r2, r3, #1
 8011972:	687b      	ldr	r3, [r7, #4]
 8011974:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8011976:	687b      	ldr	r3, [r7, #4]
 8011978:	699b      	ldr	r3, [r3, #24]
 801197a:	2b00      	cmp	r3, #0
 801197c:	d10b      	bne.n	8011996 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 801197e:	68bb      	ldr	r3, [r7, #8]
 8011980:	095b      	lsrs	r3, r3, #5
 8011982:	68fa      	ldr	r2, [r7, #12]
 8011984:	8912      	ldrh	r2, [r2, #8]
 8011986:	4293      	cmp	r3, r2
 8011988:	f0c0 8088 	bcc.w	8011a9c <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 801198c:	687b      	ldr	r3, [r7, #4]
 801198e:	2200      	movs	r2, #0
 8011990:	61da      	str	r2, [r3, #28]
 8011992:	2304      	movs	r3, #4
 8011994:	e08f      	b.n	8011ab6 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8011996:	68bb      	ldr	r3, [r7, #8]
 8011998:	0a5b      	lsrs	r3, r3, #9
 801199a:	68fa      	ldr	r2, [r7, #12]
 801199c:	8952      	ldrh	r2, [r2, #10]
 801199e:	3a01      	subs	r2, #1
 80119a0:	4013      	ands	r3, r2
 80119a2:	2b00      	cmp	r3, #0
 80119a4:	d17a      	bne.n	8011a9c <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80119a6:	687a      	ldr	r2, [r7, #4]
 80119a8:	687b      	ldr	r3, [r7, #4]
 80119aa:	699b      	ldr	r3, [r3, #24]
 80119ac:	4619      	mov	r1, r3
 80119ae:	4610      	mov	r0, r2
 80119b0:	f7ff fc83 	bl	80112ba <get_fat>
 80119b4:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80119b6:	697b      	ldr	r3, [r7, #20]
 80119b8:	2b01      	cmp	r3, #1
 80119ba:	d801      	bhi.n	80119c0 <dir_next+0x8c>
 80119bc:	2302      	movs	r3, #2
 80119be:	e07a      	b.n	8011ab6 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80119c0:	697b      	ldr	r3, [r7, #20]
 80119c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80119c6:	d101      	bne.n	80119cc <dir_next+0x98>
 80119c8:	2301      	movs	r3, #1
 80119ca:	e074      	b.n	8011ab6 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 80119cc:	68fb      	ldr	r3, [r7, #12]
 80119ce:	695b      	ldr	r3, [r3, #20]
 80119d0:	697a      	ldr	r2, [r7, #20]
 80119d2:	429a      	cmp	r2, r3
 80119d4:	d358      	bcc.n	8011a88 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 80119d6:	683b      	ldr	r3, [r7, #0]
 80119d8:	2b00      	cmp	r3, #0
 80119da:	d104      	bne.n	80119e6 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 80119dc:	687b      	ldr	r3, [r7, #4]
 80119de:	2200      	movs	r2, #0
 80119e0:	61da      	str	r2, [r3, #28]
 80119e2:	2304      	movs	r3, #4
 80119e4:	e067      	b.n	8011ab6 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80119e6:	687a      	ldr	r2, [r7, #4]
 80119e8:	687b      	ldr	r3, [r7, #4]
 80119ea:	699b      	ldr	r3, [r3, #24]
 80119ec:	4619      	mov	r1, r3
 80119ee:	4610      	mov	r0, r2
 80119f0:	f7ff fe59 	bl	80116a6 <create_chain>
 80119f4:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80119f6:	697b      	ldr	r3, [r7, #20]
 80119f8:	2b00      	cmp	r3, #0
 80119fa:	d101      	bne.n	8011a00 <dir_next+0xcc>
 80119fc:	2307      	movs	r3, #7
 80119fe:	e05a      	b.n	8011ab6 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8011a00:	697b      	ldr	r3, [r7, #20]
 8011a02:	2b01      	cmp	r3, #1
 8011a04:	d101      	bne.n	8011a0a <dir_next+0xd6>
 8011a06:	2302      	movs	r3, #2
 8011a08:	e055      	b.n	8011ab6 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8011a0a:	697b      	ldr	r3, [r7, #20]
 8011a0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011a10:	d101      	bne.n	8011a16 <dir_next+0xe2>
 8011a12:	2301      	movs	r3, #1
 8011a14:	e04f      	b.n	8011ab6 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8011a16:	68f8      	ldr	r0, [r7, #12]
 8011a18:	f7ff fb50 	bl	80110bc <sync_window>
 8011a1c:	4603      	mov	r3, r0
 8011a1e:	2b00      	cmp	r3, #0
 8011a20:	d001      	beq.n	8011a26 <dir_next+0xf2>
 8011a22:	2301      	movs	r3, #1
 8011a24:	e047      	b.n	8011ab6 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8011a26:	68fb      	ldr	r3, [r7, #12]
 8011a28:	3330      	adds	r3, #48	@ 0x30
 8011a2a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8011a2e:	2100      	movs	r1, #0
 8011a30:	4618      	mov	r0, r3
 8011a32:	f7ff f97a 	bl	8010d2a <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8011a36:	2300      	movs	r3, #0
 8011a38:	613b      	str	r3, [r7, #16]
 8011a3a:	6979      	ldr	r1, [r7, #20]
 8011a3c:	68f8      	ldr	r0, [r7, #12]
 8011a3e:	f7ff fc1d 	bl	801127c <clust2sect>
 8011a42:	4602      	mov	r2, r0
 8011a44:	68fb      	ldr	r3, [r7, #12]
 8011a46:	62da      	str	r2, [r3, #44]	@ 0x2c
 8011a48:	e012      	b.n	8011a70 <dir_next+0x13c>
						fs->wflag = 1;
 8011a4a:	68fb      	ldr	r3, [r7, #12]
 8011a4c:	2201      	movs	r2, #1
 8011a4e:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8011a50:	68f8      	ldr	r0, [r7, #12]
 8011a52:	f7ff fb33 	bl	80110bc <sync_window>
 8011a56:	4603      	mov	r3, r0
 8011a58:	2b00      	cmp	r3, #0
 8011a5a:	d001      	beq.n	8011a60 <dir_next+0x12c>
 8011a5c:	2301      	movs	r3, #1
 8011a5e:	e02a      	b.n	8011ab6 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8011a60:	693b      	ldr	r3, [r7, #16]
 8011a62:	3301      	adds	r3, #1
 8011a64:	613b      	str	r3, [r7, #16]
 8011a66:	68fb      	ldr	r3, [r7, #12]
 8011a68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011a6a:	1c5a      	adds	r2, r3, #1
 8011a6c:	68fb      	ldr	r3, [r7, #12]
 8011a6e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8011a70:	68fb      	ldr	r3, [r7, #12]
 8011a72:	895b      	ldrh	r3, [r3, #10]
 8011a74:	461a      	mov	r2, r3
 8011a76:	693b      	ldr	r3, [r7, #16]
 8011a78:	4293      	cmp	r3, r2
 8011a7a:	d3e6      	bcc.n	8011a4a <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8011a7c:	68fb      	ldr	r3, [r7, #12]
 8011a7e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011a80:	693b      	ldr	r3, [r7, #16]
 8011a82:	1ad2      	subs	r2, r2, r3
 8011a84:	68fb      	ldr	r3, [r7, #12]
 8011a86:	62da      	str	r2, [r3, #44]	@ 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8011a88:	687b      	ldr	r3, [r7, #4]
 8011a8a:	697a      	ldr	r2, [r7, #20]
 8011a8c:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8011a8e:	6979      	ldr	r1, [r7, #20]
 8011a90:	68f8      	ldr	r0, [r7, #12]
 8011a92:	f7ff fbf3 	bl	801127c <clust2sect>
 8011a96:	4602      	mov	r2, r0
 8011a98:	687b      	ldr	r3, [r7, #4]
 8011a9a:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8011a9c:	687b      	ldr	r3, [r7, #4]
 8011a9e:	68ba      	ldr	r2, [r7, #8]
 8011aa0:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8011aa2:	68fb      	ldr	r3, [r7, #12]
 8011aa4:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8011aa8:	68bb      	ldr	r3, [r7, #8]
 8011aaa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011aae:	441a      	add	r2, r3
 8011ab0:	687b      	ldr	r3, [r7, #4]
 8011ab2:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8011ab4:	2300      	movs	r3, #0
}
 8011ab6:	4618      	mov	r0, r3
 8011ab8:	3718      	adds	r7, #24
 8011aba:	46bd      	mov	sp, r7
 8011abc:	bd80      	pop	{r7, pc}

08011abe <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8011abe:	b580      	push	{r7, lr}
 8011ac0:	b086      	sub	sp, #24
 8011ac2:	af00      	add	r7, sp, #0
 8011ac4:	6078      	str	r0, [r7, #4]
 8011ac6:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8011ac8:	687b      	ldr	r3, [r7, #4]
 8011aca:	681b      	ldr	r3, [r3, #0]
 8011acc:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8011ace:	2100      	movs	r1, #0
 8011ad0:	6878      	ldr	r0, [r7, #4]
 8011ad2:	f7ff feb4 	bl	801183e <dir_sdi>
 8011ad6:	4603      	mov	r3, r0
 8011ad8:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8011ada:	7dfb      	ldrb	r3, [r7, #23]
 8011adc:	2b00      	cmp	r3, #0
 8011ade:	d12b      	bne.n	8011b38 <dir_alloc+0x7a>
		n = 0;
 8011ae0:	2300      	movs	r3, #0
 8011ae2:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8011ae4:	687b      	ldr	r3, [r7, #4]
 8011ae6:	69db      	ldr	r3, [r3, #28]
 8011ae8:	4619      	mov	r1, r3
 8011aea:	68f8      	ldr	r0, [r7, #12]
 8011aec:	f7ff fb2a 	bl	8011144 <move_window>
 8011af0:	4603      	mov	r3, r0
 8011af2:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8011af4:	7dfb      	ldrb	r3, [r7, #23]
 8011af6:	2b00      	cmp	r3, #0
 8011af8:	d11d      	bne.n	8011b36 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8011afa:	687b      	ldr	r3, [r7, #4]
 8011afc:	6a1b      	ldr	r3, [r3, #32]
 8011afe:	781b      	ldrb	r3, [r3, #0]
 8011b00:	2be5      	cmp	r3, #229	@ 0xe5
 8011b02:	d004      	beq.n	8011b0e <dir_alloc+0x50>
 8011b04:	687b      	ldr	r3, [r7, #4]
 8011b06:	6a1b      	ldr	r3, [r3, #32]
 8011b08:	781b      	ldrb	r3, [r3, #0]
 8011b0a:	2b00      	cmp	r3, #0
 8011b0c:	d107      	bne.n	8011b1e <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8011b0e:	693b      	ldr	r3, [r7, #16]
 8011b10:	3301      	adds	r3, #1
 8011b12:	613b      	str	r3, [r7, #16]
 8011b14:	693a      	ldr	r2, [r7, #16]
 8011b16:	683b      	ldr	r3, [r7, #0]
 8011b18:	429a      	cmp	r2, r3
 8011b1a:	d102      	bne.n	8011b22 <dir_alloc+0x64>
 8011b1c:	e00c      	b.n	8011b38 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8011b1e:	2300      	movs	r3, #0
 8011b20:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8011b22:	2101      	movs	r1, #1
 8011b24:	6878      	ldr	r0, [r7, #4]
 8011b26:	f7ff ff05 	bl	8011934 <dir_next>
 8011b2a:	4603      	mov	r3, r0
 8011b2c:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8011b2e:	7dfb      	ldrb	r3, [r7, #23]
 8011b30:	2b00      	cmp	r3, #0
 8011b32:	d0d7      	beq.n	8011ae4 <dir_alloc+0x26>
 8011b34:	e000      	b.n	8011b38 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8011b36:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8011b38:	7dfb      	ldrb	r3, [r7, #23]
 8011b3a:	2b04      	cmp	r3, #4
 8011b3c:	d101      	bne.n	8011b42 <dir_alloc+0x84>
 8011b3e:	2307      	movs	r3, #7
 8011b40:	75fb      	strb	r3, [r7, #23]
	return res;
 8011b42:	7dfb      	ldrb	r3, [r7, #23]
}
 8011b44:	4618      	mov	r0, r3
 8011b46:	3718      	adds	r7, #24
 8011b48:	46bd      	mov	sp, r7
 8011b4a:	bd80      	pop	{r7, pc}

08011b4c <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8011b4c:	b580      	push	{r7, lr}
 8011b4e:	b084      	sub	sp, #16
 8011b50:	af00      	add	r7, sp, #0
 8011b52:	6078      	str	r0, [r7, #4]
 8011b54:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8011b56:	683b      	ldr	r3, [r7, #0]
 8011b58:	331a      	adds	r3, #26
 8011b5a:	4618      	mov	r0, r3
 8011b5c:	f7ff f842 	bl	8010be4 <ld_word>
 8011b60:	4603      	mov	r3, r0
 8011b62:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8011b64:	687b      	ldr	r3, [r7, #4]
 8011b66:	781b      	ldrb	r3, [r3, #0]
 8011b68:	2b03      	cmp	r3, #3
 8011b6a:	d109      	bne.n	8011b80 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8011b6c:	683b      	ldr	r3, [r7, #0]
 8011b6e:	3314      	adds	r3, #20
 8011b70:	4618      	mov	r0, r3
 8011b72:	f7ff f837 	bl	8010be4 <ld_word>
 8011b76:	4603      	mov	r3, r0
 8011b78:	041b      	lsls	r3, r3, #16
 8011b7a:	68fa      	ldr	r2, [r7, #12]
 8011b7c:	4313      	orrs	r3, r2
 8011b7e:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8011b80:	68fb      	ldr	r3, [r7, #12]
}
 8011b82:	4618      	mov	r0, r3
 8011b84:	3710      	adds	r7, #16
 8011b86:	46bd      	mov	sp, r7
 8011b88:	bd80      	pop	{r7, pc}

08011b8a <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8011b8a:	b580      	push	{r7, lr}
 8011b8c:	b084      	sub	sp, #16
 8011b8e:	af00      	add	r7, sp, #0
 8011b90:	60f8      	str	r0, [r7, #12]
 8011b92:	60b9      	str	r1, [r7, #8]
 8011b94:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8011b96:	68bb      	ldr	r3, [r7, #8]
 8011b98:	331a      	adds	r3, #26
 8011b9a:	687a      	ldr	r2, [r7, #4]
 8011b9c:	b292      	uxth	r2, r2
 8011b9e:	4611      	mov	r1, r2
 8011ba0:	4618      	mov	r0, r3
 8011ba2:	f7ff f85a 	bl	8010c5a <st_word>
	if (fs->fs_type == FS_FAT32) {
 8011ba6:	68fb      	ldr	r3, [r7, #12]
 8011ba8:	781b      	ldrb	r3, [r3, #0]
 8011baa:	2b03      	cmp	r3, #3
 8011bac:	d109      	bne.n	8011bc2 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8011bae:	68bb      	ldr	r3, [r7, #8]
 8011bb0:	f103 0214 	add.w	r2, r3, #20
 8011bb4:	687b      	ldr	r3, [r7, #4]
 8011bb6:	0c1b      	lsrs	r3, r3, #16
 8011bb8:	b29b      	uxth	r3, r3
 8011bba:	4619      	mov	r1, r3
 8011bbc:	4610      	mov	r0, r2
 8011bbe:	f7ff f84c 	bl	8010c5a <st_word>
	}
}
 8011bc2:	bf00      	nop
 8011bc4:	3710      	adds	r7, #16
 8011bc6:	46bd      	mov	sp, r7
 8011bc8:	bd80      	pop	{r7, pc}

08011bca <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8011bca:	b580      	push	{r7, lr}
 8011bcc:	b086      	sub	sp, #24
 8011bce:	af00      	add	r7, sp, #0
 8011bd0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8011bd2:	687b      	ldr	r3, [r7, #4]
 8011bd4:	681b      	ldr	r3, [r3, #0]
 8011bd6:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8011bd8:	2100      	movs	r1, #0
 8011bda:	6878      	ldr	r0, [r7, #4]
 8011bdc:	f7ff fe2f 	bl	801183e <dir_sdi>
 8011be0:	4603      	mov	r3, r0
 8011be2:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8011be4:	7dfb      	ldrb	r3, [r7, #23]
 8011be6:	2b00      	cmp	r3, #0
 8011be8:	d001      	beq.n	8011bee <dir_find+0x24>
 8011bea:	7dfb      	ldrb	r3, [r7, #23]
 8011bec:	e03e      	b.n	8011c6c <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8011bee:	687b      	ldr	r3, [r7, #4]
 8011bf0:	69db      	ldr	r3, [r3, #28]
 8011bf2:	4619      	mov	r1, r3
 8011bf4:	6938      	ldr	r0, [r7, #16]
 8011bf6:	f7ff faa5 	bl	8011144 <move_window>
 8011bfa:	4603      	mov	r3, r0
 8011bfc:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8011bfe:	7dfb      	ldrb	r3, [r7, #23]
 8011c00:	2b00      	cmp	r3, #0
 8011c02:	d12f      	bne.n	8011c64 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8011c04:	687b      	ldr	r3, [r7, #4]
 8011c06:	6a1b      	ldr	r3, [r3, #32]
 8011c08:	781b      	ldrb	r3, [r3, #0]
 8011c0a:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8011c0c:	7bfb      	ldrb	r3, [r7, #15]
 8011c0e:	2b00      	cmp	r3, #0
 8011c10:	d102      	bne.n	8011c18 <dir_find+0x4e>
 8011c12:	2304      	movs	r3, #4
 8011c14:	75fb      	strb	r3, [r7, #23]
 8011c16:	e028      	b.n	8011c6a <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8011c18:	687b      	ldr	r3, [r7, #4]
 8011c1a:	6a1b      	ldr	r3, [r3, #32]
 8011c1c:	330b      	adds	r3, #11
 8011c1e:	781b      	ldrb	r3, [r3, #0]
 8011c20:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8011c24:	b2da      	uxtb	r2, r3
 8011c26:	687b      	ldr	r3, [r7, #4]
 8011c28:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8011c2a:	687b      	ldr	r3, [r7, #4]
 8011c2c:	6a1b      	ldr	r3, [r3, #32]
 8011c2e:	330b      	adds	r3, #11
 8011c30:	781b      	ldrb	r3, [r3, #0]
 8011c32:	f003 0308 	and.w	r3, r3, #8
 8011c36:	2b00      	cmp	r3, #0
 8011c38:	d10a      	bne.n	8011c50 <dir_find+0x86>
 8011c3a:	687b      	ldr	r3, [r7, #4]
 8011c3c:	6a18      	ldr	r0, [r3, #32]
 8011c3e:	687b      	ldr	r3, [r7, #4]
 8011c40:	3324      	adds	r3, #36	@ 0x24
 8011c42:	220b      	movs	r2, #11
 8011c44:	4619      	mov	r1, r3
 8011c46:	f7ff f88b 	bl	8010d60 <mem_cmp>
 8011c4a:	4603      	mov	r3, r0
 8011c4c:	2b00      	cmp	r3, #0
 8011c4e:	d00b      	beq.n	8011c68 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8011c50:	2100      	movs	r1, #0
 8011c52:	6878      	ldr	r0, [r7, #4]
 8011c54:	f7ff fe6e 	bl	8011934 <dir_next>
 8011c58:	4603      	mov	r3, r0
 8011c5a:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8011c5c:	7dfb      	ldrb	r3, [r7, #23]
 8011c5e:	2b00      	cmp	r3, #0
 8011c60:	d0c5      	beq.n	8011bee <dir_find+0x24>
 8011c62:	e002      	b.n	8011c6a <dir_find+0xa0>
		if (res != FR_OK) break;
 8011c64:	bf00      	nop
 8011c66:	e000      	b.n	8011c6a <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8011c68:	bf00      	nop

	return res;
 8011c6a:	7dfb      	ldrb	r3, [r7, #23]
}
 8011c6c:	4618      	mov	r0, r3
 8011c6e:	3718      	adds	r7, #24
 8011c70:	46bd      	mov	sp, r7
 8011c72:	bd80      	pop	{r7, pc}

08011c74 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8011c74:	b580      	push	{r7, lr}
 8011c76:	b084      	sub	sp, #16
 8011c78:	af00      	add	r7, sp, #0
 8011c7a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8011c7c:	687b      	ldr	r3, [r7, #4]
 8011c7e:	681b      	ldr	r3, [r3, #0]
 8011c80:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8011c82:	2101      	movs	r1, #1
 8011c84:	6878      	ldr	r0, [r7, #4]
 8011c86:	f7ff ff1a 	bl	8011abe <dir_alloc>
 8011c8a:	4603      	mov	r3, r0
 8011c8c:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8011c8e:	7bfb      	ldrb	r3, [r7, #15]
 8011c90:	2b00      	cmp	r3, #0
 8011c92:	d11c      	bne.n	8011cce <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8011c94:	687b      	ldr	r3, [r7, #4]
 8011c96:	69db      	ldr	r3, [r3, #28]
 8011c98:	4619      	mov	r1, r3
 8011c9a:	68b8      	ldr	r0, [r7, #8]
 8011c9c:	f7ff fa52 	bl	8011144 <move_window>
 8011ca0:	4603      	mov	r3, r0
 8011ca2:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8011ca4:	7bfb      	ldrb	r3, [r7, #15]
 8011ca6:	2b00      	cmp	r3, #0
 8011ca8:	d111      	bne.n	8011cce <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8011caa:	687b      	ldr	r3, [r7, #4]
 8011cac:	6a1b      	ldr	r3, [r3, #32]
 8011cae:	2220      	movs	r2, #32
 8011cb0:	2100      	movs	r1, #0
 8011cb2:	4618      	mov	r0, r3
 8011cb4:	f7ff f839 	bl	8010d2a <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8011cb8:	687b      	ldr	r3, [r7, #4]
 8011cba:	6a18      	ldr	r0, [r3, #32]
 8011cbc:	687b      	ldr	r3, [r7, #4]
 8011cbe:	3324      	adds	r3, #36	@ 0x24
 8011cc0:	220b      	movs	r2, #11
 8011cc2:	4619      	mov	r1, r3
 8011cc4:	f7ff f810 	bl	8010ce8 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8011cc8:	68bb      	ldr	r3, [r7, #8]
 8011cca:	2201      	movs	r2, #1
 8011ccc:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8011cce:	7bfb      	ldrb	r3, [r7, #15]
}
 8011cd0:	4618      	mov	r0, r3
 8011cd2:	3710      	adds	r7, #16
 8011cd4:	46bd      	mov	sp, r7
 8011cd6:	bd80      	pop	{r7, pc}

08011cd8 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8011cd8:	b580      	push	{r7, lr}
 8011cda:	b088      	sub	sp, #32
 8011cdc:	af00      	add	r7, sp, #0
 8011cde:	6078      	str	r0, [r7, #4]
 8011ce0:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8011ce2:	683b      	ldr	r3, [r7, #0]
 8011ce4:	681b      	ldr	r3, [r3, #0]
 8011ce6:	60fb      	str	r3, [r7, #12]
 8011ce8:	687b      	ldr	r3, [r7, #4]
 8011cea:	3324      	adds	r3, #36	@ 0x24
 8011cec:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8011cee:	220b      	movs	r2, #11
 8011cf0:	2120      	movs	r1, #32
 8011cf2:	68b8      	ldr	r0, [r7, #8]
 8011cf4:	f7ff f819 	bl	8010d2a <mem_set>
	si = i = 0; ni = 8;
 8011cf8:	2300      	movs	r3, #0
 8011cfa:	613b      	str	r3, [r7, #16]
 8011cfc:	693b      	ldr	r3, [r7, #16]
 8011cfe:	61fb      	str	r3, [r7, #28]
 8011d00:	2308      	movs	r3, #8
 8011d02:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8011d04:	69fb      	ldr	r3, [r7, #28]
 8011d06:	1c5a      	adds	r2, r3, #1
 8011d08:	61fa      	str	r2, [r7, #28]
 8011d0a:	68fa      	ldr	r2, [r7, #12]
 8011d0c:	4413      	add	r3, r2
 8011d0e:	781b      	ldrb	r3, [r3, #0]
 8011d10:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8011d12:	7efb      	ldrb	r3, [r7, #27]
 8011d14:	2b20      	cmp	r3, #32
 8011d16:	d94e      	bls.n	8011db6 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8011d18:	7efb      	ldrb	r3, [r7, #27]
 8011d1a:	2b2f      	cmp	r3, #47	@ 0x2f
 8011d1c:	d006      	beq.n	8011d2c <create_name+0x54>
 8011d1e:	7efb      	ldrb	r3, [r7, #27]
 8011d20:	2b5c      	cmp	r3, #92	@ 0x5c
 8011d22:	d110      	bne.n	8011d46 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8011d24:	e002      	b.n	8011d2c <create_name+0x54>
 8011d26:	69fb      	ldr	r3, [r7, #28]
 8011d28:	3301      	adds	r3, #1
 8011d2a:	61fb      	str	r3, [r7, #28]
 8011d2c:	68fa      	ldr	r2, [r7, #12]
 8011d2e:	69fb      	ldr	r3, [r7, #28]
 8011d30:	4413      	add	r3, r2
 8011d32:	781b      	ldrb	r3, [r3, #0]
 8011d34:	2b2f      	cmp	r3, #47	@ 0x2f
 8011d36:	d0f6      	beq.n	8011d26 <create_name+0x4e>
 8011d38:	68fa      	ldr	r2, [r7, #12]
 8011d3a:	69fb      	ldr	r3, [r7, #28]
 8011d3c:	4413      	add	r3, r2
 8011d3e:	781b      	ldrb	r3, [r3, #0]
 8011d40:	2b5c      	cmp	r3, #92	@ 0x5c
 8011d42:	d0f0      	beq.n	8011d26 <create_name+0x4e>
			break;
 8011d44:	e038      	b.n	8011db8 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8011d46:	7efb      	ldrb	r3, [r7, #27]
 8011d48:	2b2e      	cmp	r3, #46	@ 0x2e
 8011d4a:	d003      	beq.n	8011d54 <create_name+0x7c>
 8011d4c:	693a      	ldr	r2, [r7, #16]
 8011d4e:	697b      	ldr	r3, [r7, #20]
 8011d50:	429a      	cmp	r2, r3
 8011d52:	d30c      	bcc.n	8011d6e <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8011d54:	697b      	ldr	r3, [r7, #20]
 8011d56:	2b0b      	cmp	r3, #11
 8011d58:	d002      	beq.n	8011d60 <create_name+0x88>
 8011d5a:	7efb      	ldrb	r3, [r7, #27]
 8011d5c:	2b2e      	cmp	r3, #46	@ 0x2e
 8011d5e:	d001      	beq.n	8011d64 <create_name+0x8c>
 8011d60:	2306      	movs	r3, #6
 8011d62:	e044      	b.n	8011dee <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8011d64:	2308      	movs	r3, #8
 8011d66:	613b      	str	r3, [r7, #16]
 8011d68:	230b      	movs	r3, #11
 8011d6a:	617b      	str	r3, [r7, #20]
			continue;
 8011d6c:	e022      	b.n	8011db4 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8011d6e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8011d72:	2b00      	cmp	r3, #0
 8011d74:	da04      	bge.n	8011d80 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8011d76:	7efb      	ldrb	r3, [r7, #27]
 8011d78:	3b80      	subs	r3, #128	@ 0x80
 8011d7a:	4a1f      	ldr	r2, [pc, #124]	@ (8011df8 <create_name+0x120>)
 8011d7c:	5cd3      	ldrb	r3, [r2, r3]
 8011d7e:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8011d80:	7efb      	ldrb	r3, [r7, #27]
 8011d82:	4619      	mov	r1, r3
 8011d84:	481d      	ldr	r0, [pc, #116]	@ (8011dfc <create_name+0x124>)
 8011d86:	f7ff f812 	bl	8010dae <chk_chr>
 8011d8a:	4603      	mov	r3, r0
 8011d8c:	2b00      	cmp	r3, #0
 8011d8e:	d001      	beq.n	8011d94 <create_name+0xbc>
 8011d90:	2306      	movs	r3, #6
 8011d92:	e02c      	b.n	8011dee <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8011d94:	7efb      	ldrb	r3, [r7, #27]
 8011d96:	2b60      	cmp	r3, #96	@ 0x60
 8011d98:	d905      	bls.n	8011da6 <create_name+0xce>
 8011d9a:	7efb      	ldrb	r3, [r7, #27]
 8011d9c:	2b7a      	cmp	r3, #122	@ 0x7a
 8011d9e:	d802      	bhi.n	8011da6 <create_name+0xce>
 8011da0:	7efb      	ldrb	r3, [r7, #27]
 8011da2:	3b20      	subs	r3, #32
 8011da4:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 8011da6:	693b      	ldr	r3, [r7, #16]
 8011da8:	1c5a      	adds	r2, r3, #1
 8011daa:	613a      	str	r2, [r7, #16]
 8011dac:	68ba      	ldr	r2, [r7, #8]
 8011dae:	4413      	add	r3, r2
 8011db0:	7efa      	ldrb	r2, [r7, #27]
 8011db2:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8011db4:	e7a6      	b.n	8011d04 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8011db6:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8011db8:	68fa      	ldr	r2, [r7, #12]
 8011dba:	69fb      	ldr	r3, [r7, #28]
 8011dbc:	441a      	add	r2, r3
 8011dbe:	683b      	ldr	r3, [r7, #0]
 8011dc0:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8011dc2:	693b      	ldr	r3, [r7, #16]
 8011dc4:	2b00      	cmp	r3, #0
 8011dc6:	d101      	bne.n	8011dcc <create_name+0xf4>
 8011dc8:	2306      	movs	r3, #6
 8011dca:	e010      	b.n	8011dee <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8011dcc:	68bb      	ldr	r3, [r7, #8]
 8011dce:	781b      	ldrb	r3, [r3, #0]
 8011dd0:	2be5      	cmp	r3, #229	@ 0xe5
 8011dd2:	d102      	bne.n	8011dda <create_name+0x102>
 8011dd4:	68bb      	ldr	r3, [r7, #8]
 8011dd6:	2205      	movs	r2, #5
 8011dd8:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8011dda:	7efb      	ldrb	r3, [r7, #27]
 8011ddc:	2b20      	cmp	r3, #32
 8011dde:	d801      	bhi.n	8011de4 <create_name+0x10c>
 8011de0:	2204      	movs	r2, #4
 8011de2:	e000      	b.n	8011de6 <create_name+0x10e>
 8011de4:	2200      	movs	r2, #0
 8011de6:	68bb      	ldr	r3, [r7, #8]
 8011de8:	330b      	adds	r3, #11
 8011dea:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8011dec:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8011dee:	4618      	mov	r0, r3
 8011df0:	3720      	adds	r7, #32
 8011df2:	46bd      	mov	sp, r7
 8011df4:	bd80      	pop	{r7, pc}
 8011df6:	bf00      	nop
 8011df8:	08014960 	.word	0x08014960
 8011dfc:	0801485c 	.word	0x0801485c

08011e00 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8011e00:	b580      	push	{r7, lr}
 8011e02:	b086      	sub	sp, #24
 8011e04:	af00      	add	r7, sp, #0
 8011e06:	6078      	str	r0, [r7, #4]
 8011e08:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8011e0a:	687b      	ldr	r3, [r7, #4]
 8011e0c:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8011e0e:	693b      	ldr	r3, [r7, #16]
 8011e10:	681b      	ldr	r3, [r3, #0]
 8011e12:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8011e14:	e002      	b.n	8011e1c <follow_path+0x1c>
 8011e16:	683b      	ldr	r3, [r7, #0]
 8011e18:	3301      	adds	r3, #1
 8011e1a:	603b      	str	r3, [r7, #0]
 8011e1c:	683b      	ldr	r3, [r7, #0]
 8011e1e:	781b      	ldrb	r3, [r3, #0]
 8011e20:	2b2f      	cmp	r3, #47	@ 0x2f
 8011e22:	d0f8      	beq.n	8011e16 <follow_path+0x16>
 8011e24:	683b      	ldr	r3, [r7, #0]
 8011e26:	781b      	ldrb	r3, [r3, #0]
 8011e28:	2b5c      	cmp	r3, #92	@ 0x5c
 8011e2a:	d0f4      	beq.n	8011e16 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8011e2c:	693b      	ldr	r3, [r7, #16]
 8011e2e:	2200      	movs	r2, #0
 8011e30:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8011e32:	683b      	ldr	r3, [r7, #0]
 8011e34:	781b      	ldrb	r3, [r3, #0]
 8011e36:	2b1f      	cmp	r3, #31
 8011e38:	d80a      	bhi.n	8011e50 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8011e3a:	687b      	ldr	r3, [r7, #4]
 8011e3c:	2280      	movs	r2, #128	@ 0x80
 8011e3e:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 8011e42:	2100      	movs	r1, #0
 8011e44:	6878      	ldr	r0, [r7, #4]
 8011e46:	f7ff fcfa 	bl	801183e <dir_sdi>
 8011e4a:	4603      	mov	r3, r0
 8011e4c:	75fb      	strb	r3, [r7, #23]
 8011e4e:	e043      	b.n	8011ed8 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8011e50:	463b      	mov	r3, r7
 8011e52:	4619      	mov	r1, r3
 8011e54:	6878      	ldr	r0, [r7, #4]
 8011e56:	f7ff ff3f 	bl	8011cd8 <create_name>
 8011e5a:	4603      	mov	r3, r0
 8011e5c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8011e5e:	7dfb      	ldrb	r3, [r7, #23]
 8011e60:	2b00      	cmp	r3, #0
 8011e62:	d134      	bne.n	8011ece <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8011e64:	6878      	ldr	r0, [r7, #4]
 8011e66:	f7ff feb0 	bl	8011bca <dir_find>
 8011e6a:	4603      	mov	r3, r0
 8011e6c:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8011e6e:	687b      	ldr	r3, [r7, #4]
 8011e70:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8011e74:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8011e76:	7dfb      	ldrb	r3, [r7, #23]
 8011e78:	2b00      	cmp	r3, #0
 8011e7a:	d00a      	beq.n	8011e92 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8011e7c:	7dfb      	ldrb	r3, [r7, #23]
 8011e7e:	2b04      	cmp	r3, #4
 8011e80:	d127      	bne.n	8011ed2 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8011e82:	7afb      	ldrb	r3, [r7, #11]
 8011e84:	f003 0304 	and.w	r3, r3, #4
 8011e88:	2b00      	cmp	r3, #0
 8011e8a:	d122      	bne.n	8011ed2 <follow_path+0xd2>
 8011e8c:	2305      	movs	r3, #5
 8011e8e:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8011e90:	e01f      	b.n	8011ed2 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8011e92:	7afb      	ldrb	r3, [r7, #11]
 8011e94:	f003 0304 	and.w	r3, r3, #4
 8011e98:	2b00      	cmp	r3, #0
 8011e9a:	d11c      	bne.n	8011ed6 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8011e9c:	693b      	ldr	r3, [r7, #16]
 8011e9e:	799b      	ldrb	r3, [r3, #6]
 8011ea0:	f003 0310 	and.w	r3, r3, #16
 8011ea4:	2b00      	cmp	r3, #0
 8011ea6:	d102      	bne.n	8011eae <follow_path+0xae>
				res = FR_NO_PATH; break;
 8011ea8:	2305      	movs	r3, #5
 8011eaa:	75fb      	strb	r3, [r7, #23]
 8011eac:	e014      	b.n	8011ed8 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8011eae:	68fb      	ldr	r3, [r7, #12]
 8011eb0:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8011eb4:	687b      	ldr	r3, [r7, #4]
 8011eb6:	695b      	ldr	r3, [r3, #20]
 8011eb8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011ebc:	4413      	add	r3, r2
 8011ebe:	4619      	mov	r1, r3
 8011ec0:	68f8      	ldr	r0, [r7, #12]
 8011ec2:	f7ff fe43 	bl	8011b4c <ld_clust>
 8011ec6:	4602      	mov	r2, r0
 8011ec8:	693b      	ldr	r3, [r7, #16]
 8011eca:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8011ecc:	e7c0      	b.n	8011e50 <follow_path+0x50>
			if (res != FR_OK) break;
 8011ece:	bf00      	nop
 8011ed0:	e002      	b.n	8011ed8 <follow_path+0xd8>
				break;
 8011ed2:	bf00      	nop
 8011ed4:	e000      	b.n	8011ed8 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8011ed6:	bf00      	nop
			}
		}
	}

	return res;
 8011ed8:	7dfb      	ldrb	r3, [r7, #23]
}
 8011eda:	4618      	mov	r0, r3
 8011edc:	3718      	adds	r7, #24
 8011ede:	46bd      	mov	sp, r7
 8011ee0:	bd80      	pop	{r7, pc}

08011ee2 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8011ee2:	b480      	push	{r7}
 8011ee4:	b087      	sub	sp, #28
 8011ee6:	af00      	add	r7, sp, #0
 8011ee8:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8011eea:	f04f 33ff 	mov.w	r3, #4294967295
 8011eee:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8011ef0:	687b      	ldr	r3, [r7, #4]
 8011ef2:	681b      	ldr	r3, [r3, #0]
 8011ef4:	2b00      	cmp	r3, #0
 8011ef6:	d031      	beq.n	8011f5c <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8011ef8:	687b      	ldr	r3, [r7, #4]
 8011efa:	681b      	ldr	r3, [r3, #0]
 8011efc:	617b      	str	r3, [r7, #20]
 8011efe:	e002      	b.n	8011f06 <get_ldnumber+0x24>
 8011f00:	697b      	ldr	r3, [r7, #20]
 8011f02:	3301      	adds	r3, #1
 8011f04:	617b      	str	r3, [r7, #20]
 8011f06:	697b      	ldr	r3, [r7, #20]
 8011f08:	781b      	ldrb	r3, [r3, #0]
 8011f0a:	2b20      	cmp	r3, #32
 8011f0c:	d903      	bls.n	8011f16 <get_ldnumber+0x34>
 8011f0e:	697b      	ldr	r3, [r7, #20]
 8011f10:	781b      	ldrb	r3, [r3, #0]
 8011f12:	2b3a      	cmp	r3, #58	@ 0x3a
 8011f14:	d1f4      	bne.n	8011f00 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8011f16:	697b      	ldr	r3, [r7, #20]
 8011f18:	781b      	ldrb	r3, [r3, #0]
 8011f1a:	2b3a      	cmp	r3, #58	@ 0x3a
 8011f1c:	d11c      	bne.n	8011f58 <get_ldnumber+0x76>
			tp = *path;
 8011f1e:	687b      	ldr	r3, [r7, #4]
 8011f20:	681b      	ldr	r3, [r3, #0]
 8011f22:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8011f24:	68fb      	ldr	r3, [r7, #12]
 8011f26:	1c5a      	adds	r2, r3, #1
 8011f28:	60fa      	str	r2, [r7, #12]
 8011f2a:	781b      	ldrb	r3, [r3, #0]
 8011f2c:	3b30      	subs	r3, #48	@ 0x30
 8011f2e:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8011f30:	68bb      	ldr	r3, [r7, #8]
 8011f32:	2b09      	cmp	r3, #9
 8011f34:	d80e      	bhi.n	8011f54 <get_ldnumber+0x72>
 8011f36:	68fa      	ldr	r2, [r7, #12]
 8011f38:	697b      	ldr	r3, [r7, #20]
 8011f3a:	429a      	cmp	r2, r3
 8011f3c:	d10a      	bne.n	8011f54 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8011f3e:	68bb      	ldr	r3, [r7, #8]
 8011f40:	2b00      	cmp	r3, #0
 8011f42:	d107      	bne.n	8011f54 <get_ldnumber+0x72>
					vol = (int)i;
 8011f44:	68bb      	ldr	r3, [r7, #8]
 8011f46:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8011f48:	697b      	ldr	r3, [r7, #20]
 8011f4a:	3301      	adds	r3, #1
 8011f4c:	617b      	str	r3, [r7, #20]
 8011f4e:	687b      	ldr	r3, [r7, #4]
 8011f50:	697a      	ldr	r2, [r7, #20]
 8011f52:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8011f54:	693b      	ldr	r3, [r7, #16]
 8011f56:	e002      	b.n	8011f5e <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8011f58:	2300      	movs	r3, #0
 8011f5a:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8011f5c:	693b      	ldr	r3, [r7, #16]
}
 8011f5e:	4618      	mov	r0, r3
 8011f60:	371c      	adds	r7, #28
 8011f62:	46bd      	mov	sp, r7
 8011f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f68:	4770      	bx	lr
	...

08011f6c <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8011f6c:	b580      	push	{r7, lr}
 8011f6e:	b082      	sub	sp, #8
 8011f70:	af00      	add	r7, sp, #0
 8011f72:	6078      	str	r0, [r7, #4]
 8011f74:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8011f76:	687b      	ldr	r3, [r7, #4]
 8011f78:	2200      	movs	r2, #0
 8011f7a:	70da      	strb	r2, [r3, #3]
 8011f7c:	687b      	ldr	r3, [r7, #4]
 8011f7e:	f04f 32ff 	mov.w	r2, #4294967295
 8011f82:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8011f84:	6839      	ldr	r1, [r7, #0]
 8011f86:	6878      	ldr	r0, [r7, #4]
 8011f88:	f7ff f8dc 	bl	8011144 <move_window>
 8011f8c:	4603      	mov	r3, r0
 8011f8e:	2b00      	cmp	r3, #0
 8011f90:	d001      	beq.n	8011f96 <check_fs+0x2a>
 8011f92:	2304      	movs	r3, #4
 8011f94:	e038      	b.n	8012008 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8011f96:	687b      	ldr	r3, [r7, #4]
 8011f98:	3330      	adds	r3, #48	@ 0x30
 8011f9a:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8011f9e:	4618      	mov	r0, r3
 8011fa0:	f7fe fe20 	bl	8010be4 <ld_word>
 8011fa4:	4603      	mov	r3, r0
 8011fa6:	461a      	mov	r2, r3
 8011fa8:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8011fac:	429a      	cmp	r2, r3
 8011fae:	d001      	beq.n	8011fb4 <check_fs+0x48>
 8011fb0:	2303      	movs	r3, #3
 8011fb2:	e029      	b.n	8012008 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8011fb4:	687b      	ldr	r3, [r7, #4]
 8011fb6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8011fba:	2be9      	cmp	r3, #233	@ 0xe9
 8011fbc:	d009      	beq.n	8011fd2 <check_fs+0x66>
 8011fbe:	687b      	ldr	r3, [r7, #4]
 8011fc0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8011fc4:	2beb      	cmp	r3, #235	@ 0xeb
 8011fc6:	d11e      	bne.n	8012006 <check_fs+0x9a>
 8011fc8:	687b      	ldr	r3, [r7, #4]
 8011fca:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8011fce:	2b90      	cmp	r3, #144	@ 0x90
 8011fd0:	d119      	bne.n	8012006 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8011fd2:	687b      	ldr	r3, [r7, #4]
 8011fd4:	3330      	adds	r3, #48	@ 0x30
 8011fd6:	3336      	adds	r3, #54	@ 0x36
 8011fd8:	4618      	mov	r0, r3
 8011fda:	f7fe fe1b 	bl	8010c14 <ld_dword>
 8011fde:	4603      	mov	r3, r0
 8011fe0:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8011fe4:	4a0a      	ldr	r2, [pc, #40]	@ (8012010 <check_fs+0xa4>)
 8011fe6:	4293      	cmp	r3, r2
 8011fe8:	d101      	bne.n	8011fee <check_fs+0x82>
 8011fea:	2300      	movs	r3, #0
 8011fec:	e00c      	b.n	8012008 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8011fee:	687b      	ldr	r3, [r7, #4]
 8011ff0:	3330      	adds	r3, #48	@ 0x30
 8011ff2:	3352      	adds	r3, #82	@ 0x52
 8011ff4:	4618      	mov	r0, r3
 8011ff6:	f7fe fe0d 	bl	8010c14 <ld_dword>
 8011ffa:	4603      	mov	r3, r0
 8011ffc:	4a05      	ldr	r2, [pc, #20]	@ (8012014 <check_fs+0xa8>)
 8011ffe:	4293      	cmp	r3, r2
 8012000:	d101      	bne.n	8012006 <check_fs+0x9a>
 8012002:	2300      	movs	r3, #0
 8012004:	e000      	b.n	8012008 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8012006:	2302      	movs	r3, #2
}
 8012008:	4618      	mov	r0, r3
 801200a:	3708      	adds	r7, #8
 801200c:	46bd      	mov	sp, r7
 801200e:	bd80      	pop	{r7, pc}
 8012010:	00544146 	.word	0x00544146
 8012014:	33544146 	.word	0x33544146

08012018 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8012018:	b580      	push	{r7, lr}
 801201a:	b096      	sub	sp, #88	@ 0x58
 801201c:	af00      	add	r7, sp, #0
 801201e:	60f8      	str	r0, [r7, #12]
 8012020:	60b9      	str	r1, [r7, #8]
 8012022:	4613      	mov	r3, r2
 8012024:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8012026:	68bb      	ldr	r3, [r7, #8]
 8012028:	2200      	movs	r2, #0
 801202a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 801202c:	68f8      	ldr	r0, [r7, #12]
 801202e:	f7ff ff58 	bl	8011ee2 <get_ldnumber>
 8012032:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8012034:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012036:	2b00      	cmp	r3, #0
 8012038:	da01      	bge.n	801203e <find_volume+0x26>
 801203a:	230b      	movs	r3, #11
 801203c:	e22d      	b.n	801249a <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 801203e:	4aa1      	ldr	r2, [pc, #644]	@ (80122c4 <find_volume+0x2ac>)
 8012040:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012042:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012046:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8012048:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801204a:	2b00      	cmp	r3, #0
 801204c:	d101      	bne.n	8012052 <find_volume+0x3a>
 801204e:	230c      	movs	r3, #12
 8012050:	e223      	b.n	801249a <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8012052:	68bb      	ldr	r3, [r7, #8]
 8012054:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8012056:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8012058:	79fb      	ldrb	r3, [r7, #7]
 801205a:	f023 0301 	bic.w	r3, r3, #1
 801205e:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8012060:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012062:	781b      	ldrb	r3, [r3, #0]
 8012064:	2b00      	cmp	r3, #0
 8012066:	d01a      	beq.n	801209e <find_volume+0x86>
		stat = disk_status(fs->drv);
 8012068:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801206a:	785b      	ldrb	r3, [r3, #1]
 801206c:	4618      	mov	r0, r3
 801206e:	f7fe fd19 	bl	8010aa4 <disk_status>
 8012072:	4603      	mov	r3, r0
 8012074:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8012078:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801207c:	f003 0301 	and.w	r3, r3, #1
 8012080:	2b00      	cmp	r3, #0
 8012082:	d10c      	bne.n	801209e <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8012084:	79fb      	ldrb	r3, [r7, #7]
 8012086:	2b00      	cmp	r3, #0
 8012088:	d007      	beq.n	801209a <find_volume+0x82>
 801208a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801208e:	f003 0304 	and.w	r3, r3, #4
 8012092:	2b00      	cmp	r3, #0
 8012094:	d001      	beq.n	801209a <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8012096:	230a      	movs	r3, #10
 8012098:	e1ff      	b.n	801249a <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 801209a:	2300      	movs	r3, #0
 801209c:	e1fd      	b.n	801249a <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 801209e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80120a0:	2200      	movs	r2, #0
 80120a2:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80120a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80120a6:	b2da      	uxtb	r2, r3
 80120a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80120aa:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80120ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80120ae:	785b      	ldrb	r3, [r3, #1]
 80120b0:	4618      	mov	r0, r3
 80120b2:	f7fe fd11 	bl	8010ad8 <disk_initialize>
 80120b6:	4603      	mov	r3, r0
 80120b8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80120bc:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80120c0:	f003 0301 	and.w	r3, r3, #1
 80120c4:	2b00      	cmp	r3, #0
 80120c6:	d001      	beq.n	80120cc <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80120c8:	2303      	movs	r3, #3
 80120ca:	e1e6      	b.n	801249a <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80120cc:	79fb      	ldrb	r3, [r7, #7]
 80120ce:	2b00      	cmp	r3, #0
 80120d0:	d007      	beq.n	80120e2 <find_volume+0xca>
 80120d2:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80120d6:	f003 0304 	and.w	r3, r3, #4
 80120da:	2b00      	cmp	r3, #0
 80120dc:	d001      	beq.n	80120e2 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 80120de:	230a      	movs	r3, #10
 80120e0:	e1db      	b.n	801249a <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 80120e2:	2300      	movs	r3, #0
 80120e4:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80120e6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80120e8:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80120ea:	f7ff ff3f 	bl	8011f6c <check_fs>
 80120ee:	4603      	mov	r3, r0
 80120f0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80120f4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80120f8:	2b02      	cmp	r3, #2
 80120fa:	d149      	bne.n	8012190 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80120fc:	2300      	movs	r3, #0
 80120fe:	643b      	str	r3, [r7, #64]	@ 0x40
 8012100:	e01e      	b.n	8012140 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8012102:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012104:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8012108:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801210a:	011b      	lsls	r3, r3, #4
 801210c:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 8012110:	4413      	add	r3, r2
 8012112:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8012114:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012116:	3304      	adds	r3, #4
 8012118:	781b      	ldrb	r3, [r3, #0]
 801211a:	2b00      	cmp	r3, #0
 801211c:	d006      	beq.n	801212c <find_volume+0x114>
 801211e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012120:	3308      	adds	r3, #8
 8012122:	4618      	mov	r0, r3
 8012124:	f7fe fd76 	bl	8010c14 <ld_dword>
 8012128:	4602      	mov	r2, r0
 801212a:	e000      	b.n	801212e <find_volume+0x116>
 801212c:	2200      	movs	r2, #0
 801212e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8012130:	009b      	lsls	r3, r3, #2
 8012132:	3358      	adds	r3, #88	@ 0x58
 8012134:	443b      	add	r3, r7
 8012136:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 801213a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801213c:	3301      	adds	r3, #1
 801213e:	643b      	str	r3, [r7, #64]	@ 0x40
 8012140:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8012142:	2b03      	cmp	r3, #3
 8012144:	d9dd      	bls.n	8012102 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8012146:	2300      	movs	r3, #0
 8012148:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 801214a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801214c:	2b00      	cmp	r3, #0
 801214e:	d002      	beq.n	8012156 <find_volume+0x13e>
 8012150:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8012152:	3b01      	subs	r3, #1
 8012154:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8012156:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8012158:	009b      	lsls	r3, r3, #2
 801215a:	3358      	adds	r3, #88	@ 0x58
 801215c:	443b      	add	r3, r7
 801215e:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8012162:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8012164:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012166:	2b00      	cmp	r3, #0
 8012168:	d005      	beq.n	8012176 <find_volume+0x15e>
 801216a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 801216c:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 801216e:	f7ff fefd 	bl	8011f6c <check_fs>
 8012172:	4603      	mov	r3, r0
 8012174:	e000      	b.n	8012178 <find_volume+0x160>
 8012176:	2303      	movs	r3, #3
 8012178:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 801217c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8012180:	2b01      	cmp	r3, #1
 8012182:	d905      	bls.n	8012190 <find_volume+0x178>
 8012184:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8012186:	3301      	adds	r3, #1
 8012188:	643b      	str	r3, [r7, #64]	@ 0x40
 801218a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801218c:	2b03      	cmp	r3, #3
 801218e:	d9e2      	bls.n	8012156 <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8012190:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8012194:	2b04      	cmp	r3, #4
 8012196:	d101      	bne.n	801219c <find_volume+0x184>
 8012198:	2301      	movs	r3, #1
 801219a:	e17e      	b.n	801249a <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 801219c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80121a0:	2b01      	cmp	r3, #1
 80121a2:	d901      	bls.n	80121a8 <find_volume+0x190>
 80121a4:	230d      	movs	r3, #13
 80121a6:	e178      	b.n	801249a <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80121a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80121aa:	3330      	adds	r3, #48	@ 0x30
 80121ac:	330b      	adds	r3, #11
 80121ae:	4618      	mov	r0, r3
 80121b0:	f7fe fd18 	bl	8010be4 <ld_word>
 80121b4:	4603      	mov	r3, r0
 80121b6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80121ba:	d001      	beq.n	80121c0 <find_volume+0x1a8>
 80121bc:	230d      	movs	r3, #13
 80121be:	e16c      	b.n	801249a <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80121c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80121c2:	3330      	adds	r3, #48	@ 0x30
 80121c4:	3316      	adds	r3, #22
 80121c6:	4618      	mov	r0, r3
 80121c8:	f7fe fd0c 	bl	8010be4 <ld_word>
 80121cc:	4603      	mov	r3, r0
 80121ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80121d0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80121d2:	2b00      	cmp	r3, #0
 80121d4:	d106      	bne.n	80121e4 <find_volume+0x1cc>
 80121d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80121d8:	3330      	adds	r3, #48	@ 0x30
 80121da:	3324      	adds	r3, #36	@ 0x24
 80121dc:	4618      	mov	r0, r3
 80121de:	f7fe fd19 	bl	8010c14 <ld_dword>
 80121e2:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 80121e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80121e6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80121e8:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80121ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80121ec:	f893 2040 	ldrb.w	r2, [r3, #64]	@ 0x40
 80121f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80121f2:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80121f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80121f6:	789b      	ldrb	r3, [r3, #2]
 80121f8:	2b01      	cmp	r3, #1
 80121fa:	d005      	beq.n	8012208 <find_volume+0x1f0>
 80121fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80121fe:	789b      	ldrb	r3, [r3, #2]
 8012200:	2b02      	cmp	r3, #2
 8012202:	d001      	beq.n	8012208 <find_volume+0x1f0>
 8012204:	230d      	movs	r3, #13
 8012206:	e148      	b.n	801249a <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8012208:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801220a:	789b      	ldrb	r3, [r3, #2]
 801220c:	461a      	mov	r2, r3
 801220e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012210:	fb02 f303 	mul.w	r3, r2, r3
 8012214:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8012216:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012218:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 801221c:	461a      	mov	r2, r3
 801221e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012220:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8012222:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012224:	895b      	ldrh	r3, [r3, #10]
 8012226:	2b00      	cmp	r3, #0
 8012228:	d008      	beq.n	801223c <find_volume+0x224>
 801222a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801222c:	895b      	ldrh	r3, [r3, #10]
 801222e:	461a      	mov	r2, r3
 8012230:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012232:	895b      	ldrh	r3, [r3, #10]
 8012234:	3b01      	subs	r3, #1
 8012236:	4013      	ands	r3, r2
 8012238:	2b00      	cmp	r3, #0
 801223a:	d001      	beq.n	8012240 <find_volume+0x228>
 801223c:	230d      	movs	r3, #13
 801223e:	e12c      	b.n	801249a <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8012240:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012242:	3330      	adds	r3, #48	@ 0x30
 8012244:	3311      	adds	r3, #17
 8012246:	4618      	mov	r0, r3
 8012248:	f7fe fccc 	bl	8010be4 <ld_word>
 801224c:	4603      	mov	r3, r0
 801224e:	461a      	mov	r2, r3
 8012250:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012252:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8012254:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012256:	891b      	ldrh	r3, [r3, #8]
 8012258:	f003 030f 	and.w	r3, r3, #15
 801225c:	b29b      	uxth	r3, r3
 801225e:	2b00      	cmp	r3, #0
 8012260:	d001      	beq.n	8012266 <find_volume+0x24e>
 8012262:	230d      	movs	r3, #13
 8012264:	e119      	b.n	801249a <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8012266:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012268:	3330      	adds	r3, #48	@ 0x30
 801226a:	3313      	adds	r3, #19
 801226c:	4618      	mov	r0, r3
 801226e:	f7fe fcb9 	bl	8010be4 <ld_word>
 8012272:	4603      	mov	r3, r0
 8012274:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8012276:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8012278:	2b00      	cmp	r3, #0
 801227a:	d106      	bne.n	801228a <find_volume+0x272>
 801227c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801227e:	3330      	adds	r3, #48	@ 0x30
 8012280:	3320      	adds	r3, #32
 8012282:	4618      	mov	r0, r3
 8012284:	f7fe fcc6 	bl	8010c14 <ld_dword>
 8012288:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 801228a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801228c:	3330      	adds	r3, #48	@ 0x30
 801228e:	330e      	adds	r3, #14
 8012290:	4618      	mov	r0, r3
 8012292:	f7fe fca7 	bl	8010be4 <ld_word>
 8012296:	4603      	mov	r3, r0
 8012298:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 801229a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 801229c:	2b00      	cmp	r3, #0
 801229e:	d101      	bne.n	80122a4 <find_volume+0x28c>
 80122a0:	230d      	movs	r3, #13
 80122a2:	e0fa      	b.n	801249a <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80122a4:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 80122a6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80122a8:	4413      	add	r3, r2
 80122aa:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80122ac:	8912      	ldrh	r2, [r2, #8]
 80122ae:	0912      	lsrs	r2, r2, #4
 80122b0:	b292      	uxth	r2, r2
 80122b2:	4413      	add	r3, r2
 80122b4:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80122b6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80122b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80122ba:	429a      	cmp	r2, r3
 80122bc:	d204      	bcs.n	80122c8 <find_volume+0x2b0>
 80122be:	230d      	movs	r3, #13
 80122c0:	e0eb      	b.n	801249a <find_volume+0x482>
 80122c2:	bf00      	nop
 80122c4:	24000d68 	.word	0x24000d68
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80122c8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80122ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80122cc:	1ad3      	subs	r3, r2, r3
 80122ce:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80122d0:	8952      	ldrh	r2, [r2, #10]
 80122d2:	fbb3 f3f2 	udiv	r3, r3, r2
 80122d6:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80122d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80122da:	2b00      	cmp	r3, #0
 80122dc:	d101      	bne.n	80122e2 <find_volume+0x2ca>
 80122de:	230d      	movs	r3, #13
 80122e0:	e0db      	b.n	801249a <find_volume+0x482>
		fmt = FS_FAT32;
 80122e2:	2303      	movs	r3, #3
 80122e4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80122e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80122ea:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 80122ee:	4293      	cmp	r3, r2
 80122f0:	d802      	bhi.n	80122f8 <find_volume+0x2e0>
 80122f2:	2302      	movs	r3, #2
 80122f4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80122f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80122fa:	f640 72f5 	movw	r2, #4085	@ 0xff5
 80122fe:	4293      	cmp	r3, r2
 8012300:	d802      	bhi.n	8012308 <find_volume+0x2f0>
 8012302:	2301      	movs	r3, #1
 8012304:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8012308:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801230a:	1c9a      	adds	r2, r3, #2
 801230c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801230e:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 8012310:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012312:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8012314:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8012316:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8012318:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801231a:	441a      	add	r2, r3
 801231c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801231e:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8012320:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8012322:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012324:	441a      	add	r2, r3
 8012326:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012328:	629a      	str	r2, [r3, #40]	@ 0x28
		if (fmt == FS_FAT32) {
 801232a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801232e:	2b03      	cmp	r3, #3
 8012330:	d11e      	bne.n	8012370 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8012332:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012334:	3330      	adds	r3, #48	@ 0x30
 8012336:	332a      	adds	r3, #42	@ 0x2a
 8012338:	4618      	mov	r0, r3
 801233a:	f7fe fc53 	bl	8010be4 <ld_word>
 801233e:	4603      	mov	r3, r0
 8012340:	2b00      	cmp	r3, #0
 8012342:	d001      	beq.n	8012348 <find_volume+0x330>
 8012344:	230d      	movs	r3, #13
 8012346:	e0a8      	b.n	801249a <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8012348:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801234a:	891b      	ldrh	r3, [r3, #8]
 801234c:	2b00      	cmp	r3, #0
 801234e:	d001      	beq.n	8012354 <find_volume+0x33c>
 8012350:	230d      	movs	r3, #13
 8012352:	e0a2      	b.n	801249a <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8012354:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012356:	3330      	adds	r3, #48	@ 0x30
 8012358:	332c      	adds	r3, #44	@ 0x2c
 801235a:	4618      	mov	r0, r3
 801235c:	f7fe fc5a 	bl	8010c14 <ld_dword>
 8012360:	4602      	mov	r2, r0
 8012362:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012364:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8012366:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012368:	695b      	ldr	r3, [r3, #20]
 801236a:	009b      	lsls	r3, r3, #2
 801236c:	647b      	str	r3, [r7, #68]	@ 0x44
 801236e:	e01f      	b.n	80123b0 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8012370:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012372:	891b      	ldrh	r3, [r3, #8]
 8012374:	2b00      	cmp	r3, #0
 8012376:	d101      	bne.n	801237c <find_volume+0x364>
 8012378:	230d      	movs	r3, #13
 801237a:	e08e      	b.n	801249a <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 801237c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801237e:	6a1a      	ldr	r2, [r3, #32]
 8012380:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012382:	441a      	add	r2, r3
 8012384:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012386:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8012388:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801238c:	2b02      	cmp	r3, #2
 801238e:	d103      	bne.n	8012398 <find_volume+0x380>
 8012390:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012392:	695b      	ldr	r3, [r3, #20]
 8012394:	005b      	lsls	r3, r3, #1
 8012396:	e00a      	b.n	80123ae <find_volume+0x396>
 8012398:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801239a:	695a      	ldr	r2, [r3, #20]
 801239c:	4613      	mov	r3, r2
 801239e:	005b      	lsls	r3, r3, #1
 80123a0:	4413      	add	r3, r2
 80123a2:	085a      	lsrs	r2, r3, #1
 80123a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80123a6:	695b      	ldr	r3, [r3, #20]
 80123a8:	f003 0301 	and.w	r3, r3, #1
 80123ac:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80123ae:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80123b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80123b2:	699a      	ldr	r2, [r3, #24]
 80123b4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80123b6:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 80123ba:	0a5b      	lsrs	r3, r3, #9
 80123bc:	429a      	cmp	r2, r3
 80123be:	d201      	bcs.n	80123c4 <find_volume+0x3ac>
 80123c0:	230d      	movs	r3, #13
 80123c2:	e06a      	b.n	801249a <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80123c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80123c6:	f04f 32ff 	mov.w	r2, #4294967295
 80123ca:	611a      	str	r2, [r3, #16]
 80123cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80123ce:	691a      	ldr	r2, [r3, #16]
 80123d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80123d2:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 80123d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80123d6:	2280      	movs	r2, #128	@ 0x80
 80123d8:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 80123da:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80123de:	2b03      	cmp	r3, #3
 80123e0:	d149      	bne.n	8012476 <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80123e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80123e4:	3330      	adds	r3, #48	@ 0x30
 80123e6:	3330      	adds	r3, #48	@ 0x30
 80123e8:	4618      	mov	r0, r3
 80123ea:	f7fe fbfb 	bl	8010be4 <ld_word>
 80123ee:	4603      	mov	r3, r0
 80123f0:	2b01      	cmp	r3, #1
 80123f2:	d140      	bne.n	8012476 <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 80123f4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80123f6:	3301      	adds	r3, #1
 80123f8:	4619      	mov	r1, r3
 80123fa:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80123fc:	f7fe fea2 	bl	8011144 <move_window>
 8012400:	4603      	mov	r3, r0
 8012402:	2b00      	cmp	r3, #0
 8012404:	d137      	bne.n	8012476 <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 8012406:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012408:	2200      	movs	r2, #0
 801240a:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 801240c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801240e:	3330      	adds	r3, #48	@ 0x30
 8012410:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8012414:	4618      	mov	r0, r3
 8012416:	f7fe fbe5 	bl	8010be4 <ld_word>
 801241a:	4603      	mov	r3, r0
 801241c:	461a      	mov	r2, r3
 801241e:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8012422:	429a      	cmp	r2, r3
 8012424:	d127      	bne.n	8012476 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8012426:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012428:	3330      	adds	r3, #48	@ 0x30
 801242a:	4618      	mov	r0, r3
 801242c:	f7fe fbf2 	bl	8010c14 <ld_dword>
 8012430:	4603      	mov	r3, r0
 8012432:	4a1c      	ldr	r2, [pc, #112]	@ (80124a4 <find_volume+0x48c>)
 8012434:	4293      	cmp	r3, r2
 8012436:	d11e      	bne.n	8012476 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8012438:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801243a:	3330      	adds	r3, #48	@ 0x30
 801243c:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8012440:	4618      	mov	r0, r3
 8012442:	f7fe fbe7 	bl	8010c14 <ld_dword>
 8012446:	4603      	mov	r3, r0
 8012448:	4a17      	ldr	r2, [pc, #92]	@ (80124a8 <find_volume+0x490>)
 801244a:	4293      	cmp	r3, r2
 801244c:	d113      	bne.n	8012476 <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 801244e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012450:	3330      	adds	r3, #48	@ 0x30
 8012452:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8012456:	4618      	mov	r0, r3
 8012458:	f7fe fbdc 	bl	8010c14 <ld_dword>
 801245c:	4602      	mov	r2, r0
 801245e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012460:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8012462:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012464:	3330      	adds	r3, #48	@ 0x30
 8012466:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 801246a:	4618      	mov	r0, r3
 801246c:	f7fe fbd2 	bl	8010c14 <ld_dword>
 8012470:	4602      	mov	r2, r0
 8012472:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012474:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8012476:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012478:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 801247c:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 801247e:	4b0b      	ldr	r3, [pc, #44]	@ (80124ac <find_volume+0x494>)
 8012480:	881b      	ldrh	r3, [r3, #0]
 8012482:	3301      	adds	r3, #1
 8012484:	b29a      	uxth	r2, r3
 8012486:	4b09      	ldr	r3, [pc, #36]	@ (80124ac <find_volume+0x494>)
 8012488:	801a      	strh	r2, [r3, #0]
 801248a:	4b08      	ldr	r3, [pc, #32]	@ (80124ac <find_volume+0x494>)
 801248c:	881a      	ldrh	r2, [r3, #0]
 801248e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012490:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8012492:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8012494:	f7fe fdee 	bl	8011074 <clear_lock>
#endif
	return FR_OK;
 8012498:	2300      	movs	r3, #0
}
 801249a:	4618      	mov	r0, r3
 801249c:	3758      	adds	r7, #88	@ 0x58
 801249e:	46bd      	mov	sp, r7
 80124a0:	bd80      	pop	{r7, pc}
 80124a2:	bf00      	nop
 80124a4:	41615252 	.word	0x41615252
 80124a8:	61417272 	.word	0x61417272
 80124ac:	24000d6c 	.word	0x24000d6c

080124b0 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 80124b0:	b580      	push	{r7, lr}
 80124b2:	b084      	sub	sp, #16
 80124b4:	af00      	add	r7, sp, #0
 80124b6:	6078      	str	r0, [r7, #4]
 80124b8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 80124ba:	2309      	movs	r3, #9
 80124bc:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80124be:	687b      	ldr	r3, [r7, #4]
 80124c0:	2b00      	cmp	r3, #0
 80124c2:	d01c      	beq.n	80124fe <validate+0x4e>
 80124c4:	687b      	ldr	r3, [r7, #4]
 80124c6:	681b      	ldr	r3, [r3, #0]
 80124c8:	2b00      	cmp	r3, #0
 80124ca:	d018      	beq.n	80124fe <validate+0x4e>
 80124cc:	687b      	ldr	r3, [r7, #4]
 80124ce:	681b      	ldr	r3, [r3, #0]
 80124d0:	781b      	ldrb	r3, [r3, #0]
 80124d2:	2b00      	cmp	r3, #0
 80124d4:	d013      	beq.n	80124fe <validate+0x4e>
 80124d6:	687b      	ldr	r3, [r7, #4]
 80124d8:	889a      	ldrh	r2, [r3, #4]
 80124da:	687b      	ldr	r3, [r7, #4]
 80124dc:	681b      	ldr	r3, [r3, #0]
 80124de:	88db      	ldrh	r3, [r3, #6]
 80124e0:	429a      	cmp	r2, r3
 80124e2:	d10c      	bne.n	80124fe <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80124e4:	687b      	ldr	r3, [r7, #4]
 80124e6:	681b      	ldr	r3, [r3, #0]
 80124e8:	785b      	ldrb	r3, [r3, #1]
 80124ea:	4618      	mov	r0, r3
 80124ec:	f7fe fada 	bl	8010aa4 <disk_status>
 80124f0:	4603      	mov	r3, r0
 80124f2:	f003 0301 	and.w	r3, r3, #1
 80124f6:	2b00      	cmp	r3, #0
 80124f8:	d101      	bne.n	80124fe <validate+0x4e>
			res = FR_OK;
 80124fa:	2300      	movs	r3, #0
 80124fc:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80124fe:	7bfb      	ldrb	r3, [r7, #15]
 8012500:	2b00      	cmp	r3, #0
 8012502:	d102      	bne.n	801250a <validate+0x5a>
 8012504:	687b      	ldr	r3, [r7, #4]
 8012506:	681b      	ldr	r3, [r3, #0]
 8012508:	e000      	b.n	801250c <validate+0x5c>
 801250a:	2300      	movs	r3, #0
 801250c:	683a      	ldr	r2, [r7, #0]
 801250e:	6013      	str	r3, [r2, #0]
	return res;
 8012510:	7bfb      	ldrb	r3, [r7, #15]
}
 8012512:	4618      	mov	r0, r3
 8012514:	3710      	adds	r7, #16
 8012516:	46bd      	mov	sp, r7
 8012518:	bd80      	pop	{r7, pc}
	...

0801251c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 801251c:	b580      	push	{r7, lr}
 801251e:	b088      	sub	sp, #32
 8012520:	af00      	add	r7, sp, #0
 8012522:	60f8      	str	r0, [r7, #12]
 8012524:	60b9      	str	r1, [r7, #8]
 8012526:	4613      	mov	r3, r2
 8012528:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 801252a:	68bb      	ldr	r3, [r7, #8]
 801252c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 801252e:	f107 0310 	add.w	r3, r7, #16
 8012532:	4618      	mov	r0, r3
 8012534:	f7ff fcd5 	bl	8011ee2 <get_ldnumber>
 8012538:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 801253a:	69fb      	ldr	r3, [r7, #28]
 801253c:	2b00      	cmp	r3, #0
 801253e:	da01      	bge.n	8012544 <f_mount+0x28>
 8012540:	230b      	movs	r3, #11
 8012542:	e02b      	b.n	801259c <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8012544:	4a17      	ldr	r2, [pc, #92]	@ (80125a4 <f_mount+0x88>)
 8012546:	69fb      	ldr	r3, [r7, #28]
 8012548:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801254c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 801254e:	69bb      	ldr	r3, [r7, #24]
 8012550:	2b00      	cmp	r3, #0
 8012552:	d005      	beq.n	8012560 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8012554:	69b8      	ldr	r0, [r7, #24]
 8012556:	f7fe fd8d 	bl	8011074 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 801255a:	69bb      	ldr	r3, [r7, #24]
 801255c:	2200      	movs	r2, #0
 801255e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8012560:	68fb      	ldr	r3, [r7, #12]
 8012562:	2b00      	cmp	r3, #0
 8012564:	d002      	beq.n	801256c <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8012566:	68fb      	ldr	r3, [r7, #12]
 8012568:	2200      	movs	r2, #0
 801256a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 801256c:	68fa      	ldr	r2, [r7, #12]
 801256e:	490d      	ldr	r1, [pc, #52]	@ (80125a4 <f_mount+0x88>)
 8012570:	69fb      	ldr	r3, [r7, #28]
 8012572:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8012576:	68fb      	ldr	r3, [r7, #12]
 8012578:	2b00      	cmp	r3, #0
 801257a:	d002      	beq.n	8012582 <f_mount+0x66>
 801257c:	79fb      	ldrb	r3, [r7, #7]
 801257e:	2b01      	cmp	r3, #1
 8012580:	d001      	beq.n	8012586 <f_mount+0x6a>
 8012582:	2300      	movs	r3, #0
 8012584:	e00a      	b.n	801259c <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8012586:	f107 010c 	add.w	r1, r7, #12
 801258a:	f107 0308 	add.w	r3, r7, #8
 801258e:	2200      	movs	r2, #0
 8012590:	4618      	mov	r0, r3
 8012592:	f7ff fd41 	bl	8012018 <find_volume>
 8012596:	4603      	mov	r3, r0
 8012598:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 801259a:	7dfb      	ldrb	r3, [r7, #23]
}
 801259c:	4618      	mov	r0, r3
 801259e:	3720      	adds	r7, #32
 80125a0:	46bd      	mov	sp, r7
 80125a2:	bd80      	pop	{r7, pc}
 80125a4:	24000d68 	.word	0x24000d68

080125a8 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80125a8:	b580      	push	{r7, lr}
 80125aa:	b098      	sub	sp, #96	@ 0x60
 80125ac:	af00      	add	r7, sp, #0
 80125ae:	60f8      	str	r0, [r7, #12]
 80125b0:	60b9      	str	r1, [r7, #8]
 80125b2:	4613      	mov	r3, r2
 80125b4:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80125b6:	68fb      	ldr	r3, [r7, #12]
 80125b8:	2b00      	cmp	r3, #0
 80125ba:	d101      	bne.n	80125c0 <f_open+0x18>
 80125bc:	2309      	movs	r3, #9
 80125be:	e1a9      	b.n	8012914 <f_open+0x36c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 80125c0:	79fb      	ldrb	r3, [r7, #7]
 80125c2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80125c6:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 80125c8:	79fa      	ldrb	r2, [r7, #7]
 80125ca:	f107 0110 	add.w	r1, r7, #16
 80125ce:	f107 0308 	add.w	r3, r7, #8
 80125d2:	4618      	mov	r0, r3
 80125d4:	f7ff fd20 	bl	8012018 <find_volume>
 80125d8:	4603      	mov	r3, r0
 80125da:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 80125de:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80125e2:	2b00      	cmp	r3, #0
 80125e4:	f040 818d 	bne.w	8012902 <f_open+0x35a>
		dj.obj.fs = fs;
 80125e8:	693b      	ldr	r3, [r7, #16]
 80125ea:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 80125ec:	68ba      	ldr	r2, [r7, #8]
 80125ee:	f107 0314 	add.w	r3, r7, #20
 80125f2:	4611      	mov	r1, r2
 80125f4:	4618      	mov	r0, r3
 80125f6:	f7ff fc03 	bl	8011e00 <follow_path>
 80125fa:	4603      	mov	r3, r0
 80125fc:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8012600:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8012604:	2b00      	cmp	r3, #0
 8012606:	d118      	bne.n	801263a <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8012608:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 801260c:	b25b      	sxtb	r3, r3
 801260e:	2b00      	cmp	r3, #0
 8012610:	da03      	bge.n	801261a <f_open+0x72>
				res = FR_INVALID_NAME;
 8012612:	2306      	movs	r3, #6
 8012614:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8012618:	e00f      	b.n	801263a <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 801261a:	79fb      	ldrb	r3, [r7, #7]
 801261c:	2b01      	cmp	r3, #1
 801261e:	bf8c      	ite	hi
 8012620:	2301      	movhi	r3, #1
 8012622:	2300      	movls	r3, #0
 8012624:	b2db      	uxtb	r3, r3
 8012626:	461a      	mov	r2, r3
 8012628:	f107 0314 	add.w	r3, r7, #20
 801262c:	4611      	mov	r1, r2
 801262e:	4618      	mov	r0, r3
 8012630:	f7fe fbd8 	bl	8010de4 <chk_lock>
 8012634:	4603      	mov	r3, r0
 8012636:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 801263a:	79fb      	ldrb	r3, [r7, #7]
 801263c:	f003 031c 	and.w	r3, r3, #28
 8012640:	2b00      	cmp	r3, #0
 8012642:	d07f      	beq.n	8012744 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 8012644:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8012648:	2b00      	cmp	r3, #0
 801264a:	d017      	beq.n	801267c <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 801264c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8012650:	2b04      	cmp	r3, #4
 8012652:	d10e      	bne.n	8012672 <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8012654:	f7fe fc22 	bl	8010e9c <enq_lock>
 8012658:	4603      	mov	r3, r0
 801265a:	2b00      	cmp	r3, #0
 801265c:	d006      	beq.n	801266c <f_open+0xc4>
 801265e:	f107 0314 	add.w	r3, r7, #20
 8012662:	4618      	mov	r0, r3
 8012664:	f7ff fb06 	bl	8011c74 <dir_register>
 8012668:	4603      	mov	r3, r0
 801266a:	e000      	b.n	801266e <f_open+0xc6>
 801266c:	2312      	movs	r3, #18
 801266e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8012672:	79fb      	ldrb	r3, [r7, #7]
 8012674:	f043 0308 	orr.w	r3, r3, #8
 8012678:	71fb      	strb	r3, [r7, #7]
 801267a:	e010      	b.n	801269e <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 801267c:	7ebb      	ldrb	r3, [r7, #26]
 801267e:	f003 0311 	and.w	r3, r3, #17
 8012682:	2b00      	cmp	r3, #0
 8012684:	d003      	beq.n	801268e <f_open+0xe6>
					res = FR_DENIED;
 8012686:	2307      	movs	r3, #7
 8012688:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 801268c:	e007      	b.n	801269e <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 801268e:	79fb      	ldrb	r3, [r7, #7]
 8012690:	f003 0304 	and.w	r3, r3, #4
 8012694:	2b00      	cmp	r3, #0
 8012696:	d002      	beq.n	801269e <f_open+0xf6>
 8012698:	2308      	movs	r3, #8
 801269a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 801269e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80126a2:	2b00      	cmp	r3, #0
 80126a4:	d168      	bne.n	8012778 <f_open+0x1d0>
 80126a6:	79fb      	ldrb	r3, [r7, #7]
 80126a8:	f003 0308 	and.w	r3, r3, #8
 80126ac:	2b00      	cmp	r3, #0
 80126ae:	d063      	beq.n	8012778 <f_open+0x1d0>
				dw = GET_FATTIME();
 80126b0:	f7fd fea8 	bl	8010404 <get_fattime>
 80126b4:	6538      	str	r0, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 80126b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80126b8:	330e      	adds	r3, #14
 80126ba:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80126bc:	4618      	mov	r0, r3
 80126be:	f7fe fae7 	bl	8010c90 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 80126c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80126c4:	3316      	adds	r3, #22
 80126c6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80126c8:	4618      	mov	r0, r3
 80126ca:	f7fe fae1 	bl	8010c90 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80126ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80126d0:	330b      	adds	r3, #11
 80126d2:	2220      	movs	r2, #32
 80126d4:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 80126d6:	693b      	ldr	r3, [r7, #16]
 80126d8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80126da:	4611      	mov	r1, r2
 80126dc:	4618      	mov	r0, r3
 80126de:	f7ff fa35 	bl	8011b4c <ld_clust>
 80126e2:	64f8      	str	r0, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80126e4:	693b      	ldr	r3, [r7, #16]
 80126e6:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80126e8:	2200      	movs	r2, #0
 80126ea:	4618      	mov	r0, r3
 80126ec:	f7ff fa4d 	bl	8011b8a <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80126f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80126f2:	331c      	adds	r3, #28
 80126f4:	2100      	movs	r1, #0
 80126f6:	4618      	mov	r0, r3
 80126f8:	f7fe faca 	bl	8010c90 <st_dword>
					fs->wflag = 1;
 80126fc:	693b      	ldr	r3, [r7, #16]
 80126fe:	2201      	movs	r2, #1
 8012700:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8012702:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012704:	2b00      	cmp	r3, #0
 8012706:	d037      	beq.n	8012778 <f_open+0x1d0>
						dw = fs->winsect;
 8012708:	693b      	ldr	r3, [r7, #16]
 801270a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801270c:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 801270e:	f107 0314 	add.w	r3, r7, #20
 8012712:	2200      	movs	r2, #0
 8012714:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8012716:	4618      	mov	r0, r3
 8012718:	f7fe ff60 	bl	80115dc <remove_chain>
 801271c:	4603      	mov	r3, r0
 801271e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 8012722:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8012726:	2b00      	cmp	r3, #0
 8012728:	d126      	bne.n	8012778 <f_open+0x1d0>
							res = move_window(fs, dw);
 801272a:	693b      	ldr	r3, [r7, #16]
 801272c:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 801272e:	4618      	mov	r0, r3
 8012730:	f7fe fd08 	bl	8011144 <move_window>
 8012734:	4603      	mov	r3, r0
 8012736:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 801273a:	693b      	ldr	r3, [r7, #16]
 801273c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801273e:	3a01      	subs	r2, #1
 8012740:	60da      	str	r2, [r3, #12]
 8012742:	e019      	b.n	8012778 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8012744:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8012748:	2b00      	cmp	r3, #0
 801274a:	d115      	bne.n	8012778 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 801274c:	7ebb      	ldrb	r3, [r7, #26]
 801274e:	f003 0310 	and.w	r3, r3, #16
 8012752:	2b00      	cmp	r3, #0
 8012754:	d003      	beq.n	801275e <f_open+0x1b6>
					res = FR_NO_FILE;
 8012756:	2304      	movs	r3, #4
 8012758:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 801275c:	e00c      	b.n	8012778 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 801275e:	79fb      	ldrb	r3, [r7, #7]
 8012760:	f003 0302 	and.w	r3, r3, #2
 8012764:	2b00      	cmp	r3, #0
 8012766:	d007      	beq.n	8012778 <f_open+0x1d0>
 8012768:	7ebb      	ldrb	r3, [r7, #26]
 801276a:	f003 0301 	and.w	r3, r3, #1
 801276e:	2b00      	cmp	r3, #0
 8012770:	d002      	beq.n	8012778 <f_open+0x1d0>
						res = FR_DENIED;
 8012772:	2307      	movs	r3, #7
 8012774:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8012778:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 801277c:	2b00      	cmp	r3, #0
 801277e:	d126      	bne.n	80127ce <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8012780:	79fb      	ldrb	r3, [r7, #7]
 8012782:	f003 0308 	and.w	r3, r3, #8
 8012786:	2b00      	cmp	r3, #0
 8012788:	d003      	beq.n	8012792 <f_open+0x1ea>
				mode |= FA_MODIFIED;
 801278a:	79fb      	ldrb	r3, [r7, #7]
 801278c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012790:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8012792:	693b      	ldr	r3, [r7, #16]
 8012794:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012796:	68fb      	ldr	r3, [r7, #12]
 8012798:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 801279a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801279c:	68fb      	ldr	r3, [r7, #12]
 801279e:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80127a0:	79fb      	ldrb	r3, [r7, #7]
 80127a2:	2b01      	cmp	r3, #1
 80127a4:	bf8c      	ite	hi
 80127a6:	2301      	movhi	r3, #1
 80127a8:	2300      	movls	r3, #0
 80127aa:	b2db      	uxtb	r3, r3
 80127ac:	461a      	mov	r2, r3
 80127ae:	f107 0314 	add.w	r3, r7, #20
 80127b2:	4611      	mov	r1, r2
 80127b4:	4618      	mov	r0, r3
 80127b6:	f7fe fb93 	bl	8010ee0 <inc_lock>
 80127ba:	4602      	mov	r2, r0
 80127bc:	68fb      	ldr	r3, [r7, #12]
 80127be:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 80127c0:	68fb      	ldr	r3, [r7, #12]
 80127c2:	691b      	ldr	r3, [r3, #16]
 80127c4:	2b00      	cmp	r3, #0
 80127c6:	d102      	bne.n	80127ce <f_open+0x226>
 80127c8:	2302      	movs	r3, #2
 80127ca:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 80127ce:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80127d2:	2b00      	cmp	r3, #0
 80127d4:	f040 8095 	bne.w	8012902 <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 80127d8:	693b      	ldr	r3, [r7, #16]
 80127da:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80127dc:	4611      	mov	r1, r2
 80127de:	4618      	mov	r0, r3
 80127e0:	f7ff f9b4 	bl	8011b4c <ld_clust>
 80127e4:	4602      	mov	r2, r0
 80127e6:	68fb      	ldr	r3, [r7, #12]
 80127e8:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80127ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80127ec:	331c      	adds	r3, #28
 80127ee:	4618      	mov	r0, r3
 80127f0:	f7fe fa10 	bl	8010c14 <ld_dword>
 80127f4:	4602      	mov	r2, r0
 80127f6:	68fb      	ldr	r3, [r7, #12]
 80127f8:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 80127fa:	68fb      	ldr	r3, [r7, #12]
 80127fc:	2200      	movs	r2, #0
 80127fe:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8012800:	693a      	ldr	r2, [r7, #16]
 8012802:	68fb      	ldr	r3, [r7, #12]
 8012804:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8012806:	693b      	ldr	r3, [r7, #16]
 8012808:	88da      	ldrh	r2, [r3, #6]
 801280a:	68fb      	ldr	r3, [r7, #12]
 801280c:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 801280e:	68fb      	ldr	r3, [r7, #12]
 8012810:	79fa      	ldrb	r2, [r7, #7]
 8012812:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8012814:	68fb      	ldr	r3, [r7, #12]
 8012816:	2200      	movs	r2, #0
 8012818:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 801281a:	68fb      	ldr	r3, [r7, #12]
 801281c:	2200      	movs	r2, #0
 801281e:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8012820:	68fb      	ldr	r3, [r7, #12]
 8012822:	2200      	movs	r2, #0
 8012824:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8012826:	68fb      	ldr	r3, [r7, #12]
 8012828:	3330      	adds	r3, #48	@ 0x30
 801282a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801282e:	2100      	movs	r1, #0
 8012830:	4618      	mov	r0, r3
 8012832:	f7fe fa7a 	bl	8010d2a <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8012836:	79fb      	ldrb	r3, [r7, #7]
 8012838:	f003 0320 	and.w	r3, r3, #32
 801283c:	2b00      	cmp	r3, #0
 801283e:	d060      	beq.n	8012902 <f_open+0x35a>
 8012840:	68fb      	ldr	r3, [r7, #12]
 8012842:	68db      	ldr	r3, [r3, #12]
 8012844:	2b00      	cmp	r3, #0
 8012846:	d05c      	beq.n	8012902 <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8012848:	68fb      	ldr	r3, [r7, #12]
 801284a:	68da      	ldr	r2, [r3, #12]
 801284c:	68fb      	ldr	r3, [r7, #12]
 801284e:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8012850:	693b      	ldr	r3, [r7, #16]
 8012852:	895b      	ldrh	r3, [r3, #10]
 8012854:	025b      	lsls	r3, r3, #9
 8012856:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8012858:	68fb      	ldr	r3, [r7, #12]
 801285a:	689b      	ldr	r3, [r3, #8]
 801285c:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 801285e:	68fb      	ldr	r3, [r7, #12]
 8012860:	68db      	ldr	r3, [r3, #12]
 8012862:	657b      	str	r3, [r7, #84]	@ 0x54
 8012864:	e016      	b.n	8012894 <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 8012866:	68fb      	ldr	r3, [r7, #12]
 8012868:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 801286a:	4618      	mov	r0, r3
 801286c:	f7fe fd25 	bl	80112ba <get_fat>
 8012870:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8012872:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8012874:	2b01      	cmp	r3, #1
 8012876:	d802      	bhi.n	801287e <f_open+0x2d6>
 8012878:	2302      	movs	r3, #2
 801287a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 801287e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8012880:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012884:	d102      	bne.n	801288c <f_open+0x2e4>
 8012886:	2301      	movs	r3, #1
 8012888:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 801288c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801288e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8012890:	1ad3      	subs	r3, r2, r3
 8012892:	657b      	str	r3, [r7, #84]	@ 0x54
 8012894:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8012898:	2b00      	cmp	r3, #0
 801289a:	d103      	bne.n	80128a4 <f_open+0x2fc>
 801289c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801289e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80128a0:	429a      	cmp	r2, r3
 80128a2:	d8e0      	bhi.n	8012866 <f_open+0x2be>
				}
				fp->clust = clst;
 80128a4:	68fb      	ldr	r3, [r7, #12]
 80128a6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80128a8:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 80128aa:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80128ae:	2b00      	cmp	r3, #0
 80128b0:	d127      	bne.n	8012902 <f_open+0x35a>
 80128b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80128b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80128b8:	2b00      	cmp	r3, #0
 80128ba:	d022      	beq.n	8012902 <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 80128bc:	693b      	ldr	r3, [r7, #16]
 80128be:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80128c0:	4618      	mov	r0, r3
 80128c2:	f7fe fcdb 	bl	801127c <clust2sect>
 80128c6:	6478      	str	r0, [r7, #68]	@ 0x44
 80128c8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80128ca:	2b00      	cmp	r3, #0
 80128cc:	d103      	bne.n	80128d6 <f_open+0x32e>
						res = FR_INT_ERR;
 80128ce:	2302      	movs	r3, #2
 80128d0:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 80128d4:	e015      	b.n	8012902 <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 80128d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80128d8:	0a5a      	lsrs	r2, r3, #9
 80128da:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80128dc:	441a      	add	r2, r3
 80128de:	68fb      	ldr	r3, [r7, #12]
 80128e0:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80128e2:	693b      	ldr	r3, [r7, #16]
 80128e4:	7858      	ldrb	r0, [r3, #1]
 80128e6:	68fb      	ldr	r3, [r7, #12]
 80128e8:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80128ec:	68fb      	ldr	r3, [r7, #12]
 80128ee:	6a1a      	ldr	r2, [r3, #32]
 80128f0:	2301      	movs	r3, #1
 80128f2:	f7fe f919 	bl	8010b28 <disk_read>
 80128f6:	4603      	mov	r3, r0
 80128f8:	2b00      	cmp	r3, #0
 80128fa:	d002      	beq.n	8012902 <f_open+0x35a>
 80128fc:	2301      	movs	r3, #1
 80128fe:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8012902:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8012906:	2b00      	cmp	r3, #0
 8012908:	d002      	beq.n	8012910 <f_open+0x368>
 801290a:	68fb      	ldr	r3, [r7, #12]
 801290c:	2200      	movs	r2, #0
 801290e:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8012910:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 8012914:	4618      	mov	r0, r3
 8012916:	3760      	adds	r7, #96	@ 0x60
 8012918:	46bd      	mov	sp, r7
 801291a:	bd80      	pop	{r7, pc}

0801291c <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 801291c:	b580      	push	{r7, lr}
 801291e:	b08e      	sub	sp, #56	@ 0x38
 8012920:	af00      	add	r7, sp, #0
 8012922:	60f8      	str	r0, [r7, #12]
 8012924:	60b9      	str	r1, [r7, #8]
 8012926:	607a      	str	r2, [r7, #4]
 8012928:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 801292a:	68bb      	ldr	r3, [r7, #8]
 801292c:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 801292e:	683b      	ldr	r3, [r7, #0]
 8012930:	2200      	movs	r2, #0
 8012932:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8012934:	68fb      	ldr	r3, [r7, #12]
 8012936:	f107 0214 	add.w	r2, r7, #20
 801293a:	4611      	mov	r1, r2
 801293c:	4618      	mov	r0, r3
 801293e:	f7ff fdb7 	bl	80124b0 <validate>
 8012942:	4603      	mov	r3, r0
 8012944:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8012948:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801294c:	2b00      	cmp	r3, #0
 801294e:	d107      	bne.n	8012960 <f_read+0x44>
 8012950:	68fb      	ldr	r3, [r7, #12]
 8012952:	7d5b      	ldrb	r3, [r3, #21]
 8012954:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8012958:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801295c:	2b00      	cmp	r3, #0
 801295e:	d002      	beq.n	8012966 <f_read+0x4a>
 8012960:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8012964:	e115      	b.n	8012b92 <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8012966:	68fb      	ldr	r3, [r7, #12]
 8012968:	7d1b      	ldrb	r3, [r3, #20]
 801296a:	f003 0301 	and.w	r3, r3, #1
 801296e:	2b00      	cmp	r3, #0
 8012970:	d101      	bne.n	8012976 <f_read+0x5a>
 8012972:	2307      	movs	r3, #7
 8012974:	e10d      	b.n	8012b92 <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 8012976:	68fb      	ldr	r3, [r7, #12]
 8012978:	68da      	ldr	r2, [r3, #12]
 801297a:	68fb      	ldr	r3, [r7, #12]
 801297c:	699b      	ldr	r3, [r3, #24]
 801297e:	1ad3      	subs	r3, r2, r3
 8012980:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8012982:	687a      	ldr	r2, [r7, #4]
 8012984:	6a3b      	ldr	r3, [r7, #32]
 8012986:	429a      	cmp	r2, r3
 8012988:	f240 80fe 	bls.w	8012b88 <f_read+0x26c>
 801298c:	6a3b      	ldr	r3, [r7, #32]
 801298e:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8012990:	e0fa      	b.n	8012b88 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8012992:	68fb      	ldr	r3, [r7, #12]
 8012994:	699b      	ldr	r3, [r3, #24]
 8012996:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801299a:	2b00      	cmp	r3, #0
 801299c:	f040 80c6 	bne.w	8012b2c <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 80129a0:	68fb      	ldr	r3, [r7, #12]
 80129a2:	699b      	ldr	r3, [r3, #24]
 80129a4:	0a5b      	lsrs	r3, r3, #9
 80129a6:	697a      	ldr	r2, [r7, #20]
 80129a8:	8952      	ldrh	r2, [r2, #10]
 80129aa:	3a01      	subs	r2, #1
 80129ac:	4013      	ands	r3, r2
 80129ae:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 80129b0:	69fb      	ldr	r3, [r7, #28]
 80129b2:	2b00      	cmp	r3, #0
 80129b4:	d12f      	bne.n	8012a16 <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 80129b6:	68fb      	ldr	r3, [r7, #12]
 80129b8:	699b      	ldr	r3, [r3, #24]
 80129ba:	2b00      	cmp	r3, #0
 80129bc:	d103      	bne.n	80129c6 <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 80129be:	68fb      	ldr	r3, [r7, #12]
 80129c0:	689b      	ldr	r3, [r3, #8]
 80129c2:	633b      	str	r3, [r7, #48]	@ 0x30
 80129c4:	e013      	b.n	80129ee <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80129c6:	68fb      	ldr	r3, [r7, #12]
 80129c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80129ca:	2b00      	cmp	r3, #0
 80129cc:	d007      	beq.n	80129de <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80129ce:	68fb      	ldr	r3, [r7, #12]
 80129d0:	699b      	ldr	r3, [r3, #24]
 80129d2:	4619      	mov	r1, r3
 80129d4:	68f8      	ldr	r0, [r7, #12]
 80129d6:	f7fe fefe 	bl	80117d6 <clmt_clust>
 80129da:	6338      	str	r0, [r7, #48]	@ 0x30
 80129dc:	e007      	b.n	80129ee <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 80129de:	68fa      	ldr	r2, [r7, #12]
 80129e0:	68fb      	ldr	r3, [r7, #12]
 80129e2:	69db      	ldr	r3, [r3, #28]
 80129e4:	4619      	mov	r1, r3
 80129e6:	4610      	mov	r0, r2
 80129e8:	f7fe fc67 	bl	80112ba <get_fat>
 80129ec:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 80129ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80129f0:	2b01      	cmp	r3, #1
 80129f2:	d804      	bhi.n	80129fe <f_read+0xe2>
 80129f4:	68fb      	ldr	r3, [r7, #12]
 80129f6:	2202      	movs	r2, #2
 80129f8:	755a      	strb	r2, [r3, #21]
 80129fa:	2302      	movs	r3, #2
 80129fc:	e0c9      	b.n	8012b92 <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80129fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012a00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012a04:	d104      	bne.n	8012a10 <f_read+0xf4>
 8012a06:	68fb      	ldr	r3, [r7, #12]
 8012a08:	2201      	movs	r2, #1
 8012a0a:	755a      	strb	r2, [r3, #21]
 8012a0c:	2301      	movs	r3, #1
 8012a0e:	e0c0      	b.n	8012b92 <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 8012a10:	68fb      	ldr	r3, [r7, #12]
 8012a12:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8012a14:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8012a16:	697a      	ldr	r2, [r7, #20]
 8012a18:	68fb      	ldr	r3, [r7, #12]
 8012a1a:	69db      	ldr	r3, [r3, #28]
 8012a1c:	4619      	mov	r1, r3
 8012a1e:	4610      	mov	r0, r2
 8012a20:	f7fe fc2c 	bl	801127c <clust2sect>
 8012a24:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8012a26:	69bb      	ldr	r3, [r7, #24]
 8012a28:	2b00      	cmp	r3, #0
 8012a2a:	d104      	bne.n	8012a36 <f_read+0x11a>
 8012a2c:	68fb      	ldr	r3, [r7, #12]
 8012a2e:	2202      	movs	r2, #2
 8012a30:	755a      	strb	r2, [r3, #21]
 8012a32:	2302      	movs	r3, #2
 8012a34:	e0ad      	b.n	8012b92 <f_read+0x276>
			sect += csect;
 8012a36:	69ba      	ldr	r2, [r7, #24]
 8012a38:	69fb      	ldr	r3, [r7, #28]
 8012a3a:	4413      	add	r3, r2
 8012a3c:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8012a3e:	687b      	ldr	r3, [r7, #4]
 8012a40:	0a5b      	lsrs	r3, r3, #9
 8012a42:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8012a44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012a46:	2b00      	cmp	r3, #0
 8012a48:	d039      	beq.n	8012abe <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8012a4a:	69fa      	ldr	r2, [r7, #28]
 8012a4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012a4e:	4413      	add	r3, r2
 8012a50:	697a      	ldr	r2, [r7, #20]
 8012a52:	8952      	ldrh	r2, [r2, #10]
 8012a54:	4293      	cmp	r3, r2
 8012a56:	d905      	bls.n	8012a64 <f_read+0x148>
					cc = fs->csize - csect;
 8012a58:	697b      	ldr	r3, [r7, #20]
 8012a5a:	895b      	ldrh	r3, [r3, #10]
 8012a5c:	461a      	mov	r2, r3
 8012a5e:	69fb      	ldr	r3, [r7, #28]
 8012a60:	1ad3      	subs	r3, r2, r3
 8012a62:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8012a64:	697b      	ldr	r3, [r7, #20]
 8012a66:	7858      	ldrb	r0, [r3, #1]
 8012a68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012a6a:	69ba      	ldr	r2, [r7, #24]
 8012a6c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8012a6e:	f7fe f85b 	bl	8010b28 <disk_read>
 8012a72:	4603      	mov	r3, r0
 8012a74:	2b00      	cmp	r3, #0
 8012a76:	d004      	beq.n	8012a82 <f_read+0x166>
 8012a78:	68fb      	ldr	r3, [r7, #12]
 8012a7a:	2201      	movs	r2, #1
 8012a7c:	755a      	strb	r2, [r3, #21]
 8012a7e:	2301      	movs	r3, #1
 8012a80:	e087      	b.n	8012b92 <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8012a82:	68fb      	ldr	r3, [r7, #12]
 8012a84:	7d1b      	ldrb	r3, [r3, #20]
 8012a86:	b25b      	sxtb	r3, r3
 8012a88:	2b00      	cmp	r3, #0
 8012a8a:	da14      	bge.n	8012ab6 <f_read+0x19a>
 8012a8c:	68fb      	ldr	r3, [r7, #12]
 8012a8e:	6a1a      	ldr	r2, [r3, #32]
 8012a90:	69bb      	ldr	r3, [r7, #24]
 8012a92:	1ad3      	subs	r3, r2, r3
 8012a94:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8012a96:	429a      	cmp	r2, r3
 8012a98:	d90d      	bls.n	8012ab6 <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8012a9a:	68fb      	ldr	r3, [r7, #12]
 8012a9c:	6a1a      	ldr	r2, [r3, #32]
 8012a9e:	69bb      	ldr	r3, [r7, #24]
 8012aa0:	1ad3      	subs	r3, r2, r3
 8012aa2:	025b      	lsls	r3, r3, #9
 8012aa4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012aa6:	18d0      	adds	r0, r2, r3
 8012aa8:	68fb      	ldr	r3, [r7, #12]
 8012aaa:	3330      	adds	r3, #48	@ 0x30
 8012aac:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8012ab0:	4619      	mov	r1, r3
 8012ab2:	f7fe f919 	bl	8010ce8 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8012ab6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012ab8:	025b      	lsls	r3, r3, #9
 8012aba:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 8012abc:	e050      	b.n	8012b60 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8012abe:	68fb      	ldr	r3, [r7, #12]
 8012ac0:	6a1b      	ldr	r3, [r3, #32]
 8012ac2:	69ba      	ldr	r2, [r7, #24]
 8012ac4:	429a      	cmp	r2, r3
 8012ac6:	d02e      	beq.n	8012b26 <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8012ac8:	68fb      	ldr	r3, [r7, #12]
 8012aca:	7d1b      	ldrb	r3, [r3, #20]
 8012acc:	b25b      	sxtb	r3, r3
 8012ace:	2b00      	cmp	r3, #0
 8012ad0:	da18      	bge.n	8012b04 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8012ad2:	697b      	ldr	r3, [r7, #20]
 8012ad4:	7858      	ldrb	r0, [r3, #1]
 8012ad6:	68fb      	ldr	r3, [r7, #12]
 8012ad8:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8012adc:	68fb      	ldr	r3, [r7, #12]
 8012ade:	6a1a      	ldr	r2, [r3, #32]
 8012ae0:	2301      	movs	r3, #1
 8012ae2:	f7fe f841 	bl	8010b68 <disk_write>
 8012ae6:	4603      	mov	r3, r0
 8012ae8:	2b00      	cmp	r3, #0
 8012aea:	d004      	beq.n	8012af6 <f_read+0x1da>
 8012aec:	68fb      	ldr	r3, [r7, #12]
 8012aee:	2201      	movs	r2, #1
 8012af0:	755a      	strb	r2, [r3, #21]
 8012af2:	2301      	movs	r3, #1
 8012af4:	e04d      	b.n	8012b92 <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 8012af6:	68fb      	ldr	r3, [r7, #12]
 8012af8:	7d1b      	ldrb	r3, [r3, #20]
 8012afa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8012afe:	b2da      	uxtb	r2, r3
 8012b00:	68fb      	ldr	r3, [r7, #12]
 8012b02:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8012b04:	697b      	ldr	r3, [r7, #20]
 8012b06:	7858      	ldrb	r0, [r3, #1]
 8012b08:	68fb      	ldr	r3, [r7, #12]
 8012b0a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8012b0e:	2301      	movs	r3, #1
 8012b10:	69ba      	ldr	r2, [r7, #24]
 8012b12:	f7fe f809 	bl	8010b28 <disk_read>
 8012b16:	4603      	mov	r3, r0
 8012b18:	2b00      	cmp	r3, #0
 8012b1a:	d004      	beq.n	8012b26 <f_read+0x20a>
 8012b1c:	68fb      	ldr	r3, [r7, #12]
 8012b1e:	2201      	movs	r2, #1
 8012b20:	755a      	strb	r2, [r3, #21]
 8012b22:	2301      	movs	r3, #1
 8012b24:	e035      	b.n	8012b92 <f_read+0x276>
			}
#endif
			fp->sect = sect;
 8012b26:	68fb      	ldr	r3, [r7, #12]
 8012b28:	69ba      	ldr	r2, [r7, #24]
 8012b2a:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8012b2c:	68fb      	ldr	r3, [r7, #12]
 8012b2e:	699b      	ldr	r3, [r3, #24]
 8012b30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012b34:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 8012b38:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8012b3a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8012b3c:	687b      	ldr	r3, [r7, #4]
 8012b3e:	429a      	cmp	r2, r3
 8012b40:	d901      	bls.n	8012b46 <f_read+0x22a>
 8012b42:	687b      	ldr	r3, [r7, #4]
 8012b44:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8012b46:	68fb      	ldr	r3, [r7, #12]
 8012b48:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8012b4c:	68fb      	ldr	r3, [r7, #12]
 8012b4e:	699b      	ldr	r3, [r3, #24]
 8012b50:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012b54:	4413      	add	r3, r2
 8012b56:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8012b58:	4619      	mov	r1, r3
 8012b5a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8012b5c:	f7fe f8c4 	bl	8010ce8 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8012b60:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012b62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012b64:	4413      	add	r3, r2
 8012b66:	627b      	str	r3, [r7, #36]	@ 0x24
 8012b68:	68fb      	ldr	r3, [r7, #12]
 8012b6a:	699a      	ldr	r2, [r3, #24]
 8012b6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012b6e:	441a      	add	r2, r3
 8012b70:	68fb      	ldr	r3, [r7, #12]
 8012b72:	619a      	str	r2, [r3, #24]
 8012b74:	683b      	ldr	r3, [r7, #0]
 8012b76:	681a      	ldr	r2, [r3, #0]
 8012b78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012b7a:	441a      	add	r2, r3
 8012b7c:	683b      	ldr	r3, [r7, #0]
 8012b7e:	601a      	str	r2, [r3, #0]
 8012b80:	687a      	ldr	r2, [r7, #4]
 8012b82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012b84:	1ad3      	subs	r3, r2, r3
 8012b86:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8012b88:	687b      	ldr	r3, [r7, #4]
 8012b8a:	2b00      	cmp	r3, #0
 8012b8c:	f47f af01 	bne.w	8012992 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8012b90:	2300      	movs	r3, #0
}
 8012b92:	4618      	mov	r0, r3
 8012b94:	3738      	adds	r7, #56	@ 0x38
 8012b96:	46bd      	mov	sp, r7
 8012b98:	bd80      	pop	{r7, pc}

08012b9a <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8012b9a:	b580      	push	{r7, lr}
 8012b9c:	b086      	sub	sp, #24
 8012b9e:	af00      	add	r7, sp, #0
 8012ba0:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8012ba2:	687b      	ldr	r3, [r7, #4]
 8012ba4:	f107 0208 	add.w	r2, r7, #8
 8012ba8:	4611      	mov	r1, r2
 8012baa:	4618      	mov	r0, r3
 8012bac:	f7ff fc80 	bl	80124b0 <validate>
 8012bb0:	4603      	mov	r3, r0
 8012bb2:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8012bb4:	7dfb      	ldrb	r3, [r7, #23]
 8012bb6:	2b00      	cmp	r3, #0
 8012bb8:	d168      	bne.n	8012c8c <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8012bba:	687b      	ldr	r3, [r7, #4]
 8012bbc:	7d1b      	ldrb	r3, [r3, #20]
 8012bbe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8012bc2:	2b00      	cmp	r3, #0
 8012bc4:	d062      	beq.n	8012c8c <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8012bc6:	687b      	ldr	r3, [r7, #4]
 8012bc8:	7d1b      	ldrb	r3, [r3, #20]
 8012bca:	b25b      	sxtb	r3, r3
 8012bcc:	2b00      	cmp	r3, #0
 8012bce:	da15      	bge.n	8012bfc <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8012bd0:	68bb      	ldr	r3, [r7, #8]
 8012bd2:	7858      	ldrb	r0, [r3, #1]
 8012bd4:	687b      	ldr	r3, [r7, #4]
 8012bd6:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8012bda:	687b      	ldr	r3, [r7, #4]
 8012bdc:	6a1a      	ldr	r2, [r3, #32]
 8012bde:	2301      	movs	r3, #1
 8012be0:	f7fd ffc2 	bl	8010b68 <disk_write>
 8012be4:	4603      	mov	r3, r0
 8012be6:	2b00      	cmp	r3, #0
 8012be8:	d001      	beq.n	8012bee <f_sync+0x54>
 8012bea:	2301      	movs	r3, #1
 8012bec:	e04f      	b.n	8012c8e <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8012bee:	687b      	ldr	r3, [r7, #4]
 8012bf0:	7d1b      	ldrb	r3, [r3, #20]
 8012bf2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8012bf6:	b2da      	uxtb	r2, r3
 8012bf8:	687b      	ldr	r3, [r7, #4]
 8012bfa:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8012bfc:	f7fd fc02 	bl	8010404 <get_fattime>
 8012c00:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8012c02:	68ba      	ldr	r2, [r7, #8]
 8012c04:	687b      	ldr	r3, [r7, #4]
 8012c06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012c08:	4619      	mov	r1, r3
 8012c0a:	4610      	mov	r0, r2
 8012c0c:	f7fe fa9a 	bl	8011144 <move_window>
 8012c10:	4603      	mov	r3, r0
 8012c12:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8012c14:	7dfb      	ldrb	r3, [r7, #23]
 8012c16:	2b00      	cmp	r3, #0
 8012c18:	d138      	bne.n	8012c8c <f_sync+0xf2>
					dir = fp->dir_ptr;
 8012c1a:	687b      	ldr	r3, [r7, #4]
 8012c1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012c1e:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8012c20:	68fb      	ldr	r3, [r7, #12]
 8012c22:	330b      	adds	r3, #11
 8012c24:	781a      	ldrb	r2, [r3, #0]
 8012c26:	68fb      	ldr	r3, [r7, #12]
 8012c28:	330b      	adds	r3, #11
 8012c2a:	f042 0220 	orr.w	r2, r2, #32
 8012c2e:	b2d2      	uxtb	r2, r2
 8012c30:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8012c32:	687b      	ldr	r3, [r7, #4]
 8012c34:	6818      	ldr	r0, [r3, #0]
 8012c36:	687b      	ldr	r3, [r7, #4]
 8012c38:	689b      	ldr	r3, [r3, #8]
 8012c3a:	461a      	mov	r2, r3
 8012c3c:	68f9      	ldr	r1, [r7, #12]
 8012c3e:	f7fe ffa4 	bl	8011b8a <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8012c42:	68fb      	ldr	r3, [r7, #12]
 8012c44:	f103 021c 	add.w	r2, r3, #28
 8012c48:	687b      	ldr	r3, [r7, #4]
 8012c4a:	68db      	ldr	r3, [r3, #12]
 8012c4c:	4619      	mov	r1, r3
 8012c4e:	4610      	mov	r0, r2
 8012c50:	f7fe f81e 	bl	8010c90 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8012c54:	68fb      	ldr	r3, [r7, #12]
 8012c56:	3316      	adds	r3, #22
 8012c58:	6939      	ldr	r1, [r7, #16]
 8012c5a:	4618      	mov	r0, r3
 8012c5c:	f7fe f818 	bl	8010c90 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8012c60:	68fb      	ldr	r3, [r7, #12]
 8012c62:	3312      	adds	r3, #18
 8012c64:	2100      	movs	r1, #0
 8012c66:	4618      	mov	r0, r3
 8012c68:	f7fd fff7 	bl	8010c5a <st_word>
					fs->wflag = 1;
 8012c6c:	68bb      	ldr	r3, [r7, #8]
 8012c6e:	2201      	movs	r2, #1
 8012c70:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8012c72:	68bb      	ldr	r3, [r7, #8]
 8012c74:	4618      	mov	r0, r3
 8012c76:	f7fe fa93 	bl	80111a0 <sync_fs>
 8012c7a:	4603      	mov	r3, r0
 8012c7c:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8012c7e:	687b      	ldr	r3, [r7, #4]
 8012c80:	7d1b      	ldrb	r3, [r3, #20]
 8012c82:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8012c86:	b2da      	uxtb	r2, r3
 8012c88:	687b      	ldr	r3, [r7, #4]
 8012c8a:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8012c8c:	7dfb      	ldrb	r3, [r7, #23]
}
 8012c8e:	4618      	mov	r0, r3
 8012c90:	3718      	adds	r7, #24
 8012c92:	46bd      	mov	sp, r7
 8012c94:	bd80      	pop	{r7, pc}

08012c96 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8012c96:	b580      	push	{r7, lr}
 8012c98:	b084      	sub	sp, #16
 8012c9a:	af00      	add	r7, sp, #0
 8012c9c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8012c9e:	6878      	ldr	r0, [r7, #4]
 8012ca0:	f7ff ff7b 	bl	8012b9a <f_sync>
 8012ca4:	4603      	mov	r3, r0
 8012ca6:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8012ca8:	7bfb      	ldrb	r3, [r7, #15]
 8012caa:	2b00      	cmp	r3, #0
 8012cac:	d118      	bne.n	8012ce0 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8012cae:	687b      	ldr	r3, [r7, #4]
 8012cb0:	f107 0208 	add.w	r2, r7, #8
 8012cb4:	4611      	mov	r1, r2
 8012cb6:	4618      	mov	r0, r3
 8012cb8:	f7ff fbfa 	bl	80124b0 <validate>
 8012cbc:	4603      	mov	r3, r0
 8012cbe:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8012cc0:	7bfb      	ldrb	r3, [r7, #15]
 8012cc2:	2b00      	cmp	r3, #0
 8012cc4:	d10c      	bne.n	8012ce0 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8012cc6:	687b      	ldr	r3, [r7, #4]
 8012cc8:	691b      	ldr	r3, [r3, #16]
 8012cca:	4618      	mov	r0, r3
 8012ccc:	f7fe f996 	bl	8010ffc <dec_lock>
 8012cd0:	4603      	mov	r3, r0
 8012cd2:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8012cd4:	7bfb      	ldrb	r3, [r7, #15]
 8012cd6:	2b00      	cmp	r3, #0
 8012cd8:	d102      	bne.n	8012ce0 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8012cda:	687b      	ldr	r3, [r7, #4]
 8012cdc:	2200      	movs	r2, #0
 8012cde:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8012ce0:	7bfb      	ldrb	r3, [r7, #15]
}
 8012ce2:	4618      	mov	r0, r3
 8012ce4:	3710      	adds	r7, #16
 8012ce6:	46bd      	mov	sp, r7
 8012ce8:	bd80      	pop	{r7, pc}
	...

08012cec <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8012cec:	b480      	push	{r7}
 8012cee:	b087      	sub	sp, #28
 8012cf0:	af00      	add	r7, sp, #0
 8012cf2:	60f8      	str	r0, [r7, #12]
 8012cf4:	60b9      	str	r1, [r7, #8]
 8012cf6:	4613      	mov	r3, r2
 8012cf8:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8012cfa:	2301      	movs	r3, #1
 8012cfc:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8012cfe:	2300      	movs	r3, #0
 8012d00:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8012d02:	4b1f      	ldr	r3, [pc, #124]	@ (8012d80 <FATFS_LinkDriverEx+0x94>)
 8012d04:	7a5b      	ldrb	r3, [r3, #9]
 8012d06:	b2db      	uxtb	r3, r3
 8012d08:	2b00      	cmp	r3, #0
 8012d0a:	d131      	bne.n	8012d70 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8012d0c:	4b1c      	ldr	r3, [pc, #112]	@ (8012d80 <FATFS_LinkDriverEx+0x94>)
 8012d0e:	7a5b      	ldrb	r3, [r3, #9]
 8012d10:	b2db      	uxtb	r3, r3
 8012d12:	461a      	mov	r2, r3
 8012d14:	4b1a      	ldr	r3, [pc, #104]	@ (8012d80 <FATFS_LinkDriverEx+0x94>)
 8012d16:	2100      	movs	r1, #0
 8012d18:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8012d1a:	4b19      	ldr	r3, [pc, #100]	@ (8012d80 <FATFS_LinkDriverEx+0x94>)
 8012d1c:	7a5b      	ldrb	r3, [r3, #9]
 8012d1e:	b2db      	uxtb	r3, r3
 8012d20:	4a17      	ldr	r2, [pc, #92]	@ (8012d80 <FATFS_LinkDriverEx+0x94>)
 8012d22:	009b      	lsls	r3, r3, #2
 8012d24:	4413      	add	r3, r2
 8012d26:	68fa      	ldr	r2, [r7, #12]
 8012d28:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8012d2a:	4b15      	ldr	r3, [pc, #84]	@ (8012d80 <FATFS_LinkDriverEx+0x94>)
 8012d2c:	7a5b      	ldrb	r3, [r3, #9]
 8012d2e:	b2db      	uxtb	r3, r3
 8012d30:	461a      	mov	r2, r3
 8012d32:	4b13      	ldr	r3, [pc, #76]	@ (8012d80 <FATFS_LinkDriverEx+0x94>)
 8012d34:	4413      	add	r3, r2
 8012d36:	79fa      	ldrb	r2, [r7, #7]
 8012d38:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8012d3a:	4b11      	ldr	r3, [pc, #68]	@ (8012d80 <FATFS_LinkDriverEx+0x94>)
 8012d3c:	7a5b      	ldrb	r3, [r3, #9]
 8012d3e:	b2db      	uxtb	r3, r3
 8012d40:	1c5a      	adds	r2, r3, #1
 8012d42:	b2d1      	uxtb	r1, r2
 8012d44:	4a0e      	ldr	r2, [pc, #56]	@ (8012d80 <FATFS_LinkDriverEx+0x94>)
 8012d46:	7251      	strb	r1, [r2, #9]
 8012d48:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8012d4a:	7dbb      	ldrb	r3, [r7, #22]
 8012d4c:	3330      	adds	r3, #48	@ 0x30
 8012d4e:	b2da      	uxtb	r2, r3
 8012d50:	68bb      	ldr	r3, [r7, #8]
 8012d52:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8012d54:	68bb      	ldr	r3, [r7, #8]
 8012d56:	3301      	adds	r3, #1
 8012d58:	223a      	movs	r2, #58	@ 0x3a
 8012d5a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8012d5c:	68bb      	ldr	r3, [r7, #8]
 8012d5e:	3302      	adds	r3, #2
 8012d60:	222f      	movs	r2, #47	@ 0x2f
 8012d62:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8012d64:	68bb      	ldr	r3, [r7, #8]
 8012d66:	3303      	adds	r3, #3
 8012d68:	2200      	movs	r2, #0
 8012d6a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8012d6c:	2300      	movs	r3, #0
 8012d6e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8012d70:	7dfb      	ldrb	r3, [r7, #23]
}
 8012d72:	4618      	mov	r0, r3
 8012d74:	371c      	adds	r7, #28
 8012d76:	46bd      	mov	sp, r7
 8012d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d7c:	4770      	bx	lr
 8012d7e:	bf00      	nop
 8012d80:	24000d90 	.word	0x24000d90

08012d84 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8012d84:	b580      	push	{r7, lr}
 8012d86:	b082      	sub	sp, #8
 8012d88:	af00      	add	r7, sp, #0
 8012d8a:	6078      	str	r0, [r7, #4]
 8012d8c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8012d8e:	2200      	movs	r2, #0
 8012d90:	6839      	ldr	r1, [r7, #0]
 8012d92:	6878      	ldr	r0, [r7, #4]
 8012d94:	f7ff ffaa 	bl	8012cec <FATFS_LinkDriverEx>
 8012d98:	4603      	mov	r3, r0
}
 8012d9a:	4618      	mov	r0, r3
 8012d9c:	3708      	adds	r7, #8
 8012d9e:	46bd      	mov	sp, r7
 8012da0:	bd80      	pop	{r7, pc}

08012da2 <_ZdlPvj>:
 8012da2:	f000 b9be 	b.w	8013122 <_ZdlPv>

08012da6 <_ZdlPvjSt11align_val_t>:
 8012da6:	4611      	mov	r1, r2
 8012da8:	f000 b9bd 	b.w	8013126 <_ZdlPvSt11align_val_t>

08012dac <__cxa_guard_acquire>:
 8012dac:	6802      	ldr	r2, [r0, #0]
 8012dae:	07d2      	lsls	r2, r2, #31
 8012db0:	4603      	mov	r3, r0
 8012db2:	d405      	bmi.n	8012dc0 <__cxa_guard_acquire+0x14>
 8012db4:	7842      	ldrb	r2, [r0, #1]
 8012db6:	b102      	cbz	r2, 8012dba <__cxa_guard_acquire+0xe>
 8012db8:	deff      	udf	#255	@ 0xff
 8012dba:	2001      	movs	r0, #1
 8012dbc:	7058      	strb	r0, [r3, #1]
 8012dbe:	4770      	bx	lr
 8012dc0:	2000      	movs	r0, #0
 8012dc2:	4770      	bx	lr

08012dc4 <__cxa_guard_release>:
 8012dc4:	2301      	movs	r3, #1
 8012dc6:	6003      	str	r3, [r0, #0]
 8012dc8:	4770      	bx	lr

08012dca <_Znwj>:
 8012dca:	2801      	cmp	r0, #1
 8012dcc:	bf38      	it	cc
 8012dce:	2001      	movcc	r0, #1
 8012dd0:	b510      	push	{r4, lr}
 8012dd2:	4604      	mov	r4, r0
 8012dd4:	4620      	mov	r0, r4
 8012dd6:	f000 f9b9 	bl	801314c <malloc>
 8012dda:	b100      	cbz	r0, 8012dde <_Znwj+0x14>
 8012ddc:	bd10      	pop	{r4, pc}
 8012dde:	f000 f9a5 	bl	801312c <_ZSt15get_new_handlerv>
 8012de2:	b908      	cbnz	r0, 8012de8 <_Znwj+0x1e>
 8012de4:	f000 f9aa 	bl	801313c <abort>
 8012de8:	4780      	blx	r0
 8012dea:	e7f3      	b.n	8012dd4 <_Znwj+0xa>

08012dec <_ZnwjSt11align_val_t>:
 8012dec:	b538      	push	{r3, r4, r5, lr}
 8012dee:	4604      	mov	r4, r0
 8012df0:	4608      	mov	r0, r1
 8012df2:	460d      	mov	r5, r1
 8012df4:	f7ed fca8 	bl	8000748 <__popcountsi2>
 8012df8:	2801      	cmp	r0, #1
 8012dfa:	d001      	beq.n	8012e00 <_ZnwjSt11align_val_t+0x14>
 8012dfc:	f000 f99e 	bl	801313c <abort>
 8012e00:	2c01      	cmp	r4, #1
 8012e02:	bf38      	it	cc
 8012e04:	2401      	movcc	r4, #1
 8012e06:	4621      	mov	r1, r4
 8012e08:	4628      	mov	r0, r5
 8012e0a:	f000 fa5d 	bl	80132c8 <memalign>
 8012e0e:	b100      	cbz	r0, 8012e12 <_ZnwjSt11align_val_t+0x26>
 8012e10:	bd38      	pop	{r3, r4, r5, pc}
 8012e12:	f000 f98b 	bl	801312c <_ZSt15get_new_handlerv>
 8012e16:	2800      	cmp	r0, #0
 8012e18:	d0f0      	beq.n	8012dfc <_ZnwjSt11align_val_t+0x10>
 8012e1a:	4780      	blx	r0
 8012e1c:	e7f3      	b.n	8012e06 <_ZnwjSt11align_val_t+0x1a>

08012e1e <_ZSt17__throw_bad_allocv>:
 8012e1e:	b508      	push	{r3, lr}
 8012e20:	f000 f98c 	bl	801313c <abort>

08012e24 <_ZSt20__throw_length_errorPKc>:
 8012e24:	b508      	push	{r3, lr}
 8012e26:	f000 f989 	bl	801313c <abort>

08012e2a <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>:
 8012e2a:	b10a      	cbz	r2, 8012e30 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0+0x6>
 8012e2c:	f000 bd9d 	b.w	801396a <memcpy>
 8012e30:	4770      	bx	lr

08012e32 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>:
 8012e32:	f850 3b08 	ldr.w	r3, [r0], #8
 8012e36:	1a1b      	subs	r3, r3, r0
 8012e38:	4258      	negs	r0, r3
 8012e3a:	4158      	adcs	r0, r3
 8012e3c:	4770      	bx	lr
	...

08012e40 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
 8012e40:	b508      	push	{r3, lr}
 8012e42:	680b      	ldr	r3, [r1, #0]
 8012e44:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8012e48:	d302      	bcc.n	8012e50 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x10>
 8012e4a:	480d      	ldr	r0, [pc, #52]	@ (8012e80 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x40>)
 8012e4c:	f7ff ffea 	bl	8012e24 <_ZSt20__throw_length_errorPKc>
 8012e50:	4293      	cmp	r3, r2
 8012e52:	d90b      	bls.n	8012e6c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 8012e54:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
 8012e58:	ea4f 0042 	mov.w	r0, r2, lsl #1
 8012e5c:	d206      	bcs.n	8012e6c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 8012e5e:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8012e62:	bf2a      	itet	cs
 8012e64:	f06f 4340 	mvncs.w	r3, #3221225472	@ 0xc0000000
 8012e68:	6008      	strcc	r0, [r1, #0]
 8012e6a:	600b      	strcs	r3, [r1, #0]
 8012e6c:	6808      	ldr	r0, [r1, #0]
 8012e6e:	3001      	adds	r0, #1
 8012e70:	d501      	bpl.n	8012e76 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x36>
 8012e72:	f7ff ffd4 	bl	8012e1e <_ZSt17__throw_bad_allocv>
 8012e76:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8012e7a:	f7ff bfa6 	b.w	8012dca <_Znwj>
 8012e7e:	bf00      	nop
 8012e80:	080149e0 	.word	0x080149e0

08012e84 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
 8012e84:	b510      	push	{r4, lr}
 8012e86:	4604      	mov	r4, r0
 8012e88:	f7ff ffd3 	bl	8012e32 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>
 8012e8c:	b920      	cbnz	r0, 8012e98 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0x14>
 8012e8e:	6820      	ldr	r0, [r4, #0]
 8012e90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012e94:	f000 b945 	b.w	8013122 <_ZdlPv>
 8012e98:	bd10      	pop	{r4, pc}

08012e9a <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>:
 8012e9a:	6840      	ldr	r0, [r0, #4]
 8012e9c:	f101 4180 	add.w	r1, r1, #1073741824	@ 0x40000000
 8012ea0:	3901      	subs	r1, #1
 8012ea2:	1a09      	subs	r1, r1, r0
 8012ea4:	4291      	cmp	r1, r2
 8012ea6:	b508      	push	{r3, lr}
 8012ea8:	d202      	bcs.n	8012eb0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc+0x16>
 8012eaa:	4618      	mov	r0, r3
 8012eac:	f7ff ffba 	bl	8012e24 <_ZSt20__throw_length_errorPKc>
 8012eb0:	bd08      	pop	{r3, pc}

08012eb2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>:
 8012eb2:	2a01      	cmp	r2, #1
 8012eb4:	b410      	push	{r4}
 8012eb6:	d104      	bne.n	8012ec2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0x10>
 8012eb8:	780a      	ldrb	r2, [r1, #0]
 8012eba:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012ebe:	7002      	strb	r2, [r0, #0]
 8012ec0:	4770      	bx	lr
 8012ec2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012ec6:	f7ff bfb0 	b.w	8012e2a <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>

08012eca <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>:
 8012eca:	2a01      	cmp	r2, #1
 8012ecc:	b430      	push	{r4, r5}
 8012ece:	d103      	bne.n	8012ed8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj+0xe>
 8012ed0:	780b      	ldrb	r3, [r1, #0]
 8012ed2:	7003      	strb	r3, [r0, #0]
 8012ed4:	bc30      	pop	{r4, r5}
 8012ed6:	4770      	bx	lr
 8012ed8:	2a00      	cmp	r2, #0
 8012eda:	d0fb      	beq.n	8012ed4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj+0xa>
 8012edc:	bc30      	pop	{r4, r5}
 8012ede:	f000 bc5b 	b.w	8013798 <memmove>

08012ee2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_S_assignEPcjc>:
 8012ee2:	460b      	mov	r3, r1
 8012ee4:	2b01      	cmp	r3, #1
 8012ee6:	b410      	push	{r4}
 8012ee8:	4611      	mov	r1, r2
 8012eea:	4604      	mov	r4, r0
 8012eec:	d103      	bne.n	8012ef6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_S_assignEPcjc+0x14>
 8012eee:	7022      	strb	r2, [r4, #0]
 8012ef0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012ef4:	4770      	bx	lr
 8012ef6:	2b00      	cmp	r3, #0
 8012ef8:	d0fa      	beq.n	8012ef0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_S_assignEPcjc+0xe>
 8012efa:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012efe:	461a      	mov	r2, r3
 8012f00:	f000 bc64 	b.w	80137cc <memset>

08012f04 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>:
 8012f04:	b508      	push	{r3, lr}
 8012f06:	1a52      	subs	r2, r2, r1
 8012f08:	f7ff ffd3 	bl	8012eb2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8012f0c:	bd08      	pop	{r3, pc}

08012f0e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>:
 8012f0e:	f100 0208 	add.w	r2, r0, #8
 8012f12:	6002      	str	r2, [r0, #0]
 8012f14:	2200      	movs	r2, #0
 8012f16:	6042      	str	r2, [r0, #4]
 8012f18:	7202      	strb	r2, [r0, #8]
 8012f1a:	4770      	bx	lr

08012f1c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>:
 8012f1c:	b510      	push	{r4, lr}
 8012f1e:	4604      	mov	r4, r0
 8012f20:	f7ff ffb0 	bl	8012e84 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 8012f24:	4620      	mov	r0, r4
 8012f26:	bd10      	pop	{r4, pc}

08012f28 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>:
 8012f28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012f2a:	460c      	mov	r4, r1
 8012f2c:	4605      	mov	r5, r0
 8012f2e:	f7ff ff80 	bl	8012e32 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>
 8012f32:	4606      	mov	r6, r0
 8012f34:	4620      	mov	r0, r4
 8012f36:	f7ff ff7c 	bl	8012e32 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>
 8012f3a:	b190      	cbz	r0, 8012f62 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x3a>
 8012f3c:	42a5      	cmp	r5, r4
 8012f3e:	d00a      	beq.n	8012f56 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x2e>
 8012f40:	6862      	ldr	r2, [r4, #4]
 8012f42:	b11a      	cbz	r2, 8012f4c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x24>
 8012f44:	6821      	ldr	r1, [r4, #0]
 8012f46:	6828      	ldr	r0, [r5, #0]
 8012f48:	f7ff ffb3 	bl	8012eb2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8012f4c:	6863      	ldr	r3, [r4, #4]
 8012f4e:	682a      	ldr	r2, [r5, #0]
 8012f50:	606b      	str	r3, [r5, #4]
 8012f52:	2100      	movs	r1, #0
 8012f54:	54d1      	strb	r1, [r2, r3]
 8012f56:	6822      	ldr	r2, [r4, #0]
 8012f58:	2300      	movs	r3, #0
 8012f5a:	6063      	str	r3, [r4, #4]
 8012f5c:	7013      	strb	r3, [r2, #0]
 8012f5e:	4628      	mov	r0, r5
 8012f60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012f62:	b90e      	cbnz	r6, 8012f68 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x40>
 8012f64:	6828      	ldr	r0, [r5, #0]
 8012f66:	68af      	ldr	r7, [r5, #8]
 8012f68:	6823      	ldr	r3, [r4, #0]
 8012f6a:	602b      	str	r3, [r5, #0]
 8012f6c:	6863      	ldr	r3, [r4, #4]
 8012f6e:	606b      	str	r3, [r5, #4]
 8012f70:	68a3      	ldr	r3, [r4, #8]
 8012f72:	60ab      	str	r3, [r5, #8]
 8012f74:	b110      	cbz	r0, 8012f7c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x54>
 8012f76:	6020      	str	r0, [r4, #0]
 8012f78:	60a7      	str	r7, [r4, #8]
 8012f7a:	e7ec      	b.n	8012f56 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x2e>
 8012f7c:	f104 0308 	add.w	r3, r4, #8
 8012f80:	6023      	str	r3, [r4, #0]
 8012f82:	e7e8      	b.n	8012f56 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x2e>

08012f84 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv>:
 8012f84:	b510      	push	{r4, lr}
 8012f86:	4604      	mov	r4, r0
 8012f88:	f7ff ff53 	bl	8012e32 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>
 8012f8c:	b908      	cbnz	r0, 8012f92 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv+0xe>
 8012f8e:	68a0      	ldr	r0, [r4, #8]
 8012f90:	bd10      	pop	{r4, pc}
 8012f92:	200f      	movs	r0, #15
 8012f94:	e7fc      	b.n	8012f90 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv+0xc>

08012f96 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>:
 8012f96:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8012f9a:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8012f9c:	461f      	mov	r7, r3
 8012f9e:	6843      	ldr	r3, [r0, #4]
 8012fa0:	eb01 0802 	add.w	r8, r1, r2
 8012fa4:	1ab2      	subs	r2, r6, r2
 8012fa6:	441a      	add	r2, r3
 8012fa8:	4604      	mov	r4, r0
 8012faa:	460d      	mov	r5, r1
 8012fac:	eba3 0908 	sub.w	r9, r3, r8
 8012fb0:	9201      	str	r2, [sp, #4]
 8012fb2:	f7ff ffe7 	bl	8012f84 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv>
 8012fb6:	a901      	add	r1, sp, #4
 8012fb8:	4602      	mov	r2, r0
 8012fba:	4620      	mov	r0, r4
 8012fbc:	f7ff ff40 	bl	8012e40 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8012fc0:	4682      	mov	sl, r0
 8012fc2:	b11d      	cbz	r5, 8012fcc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x36>
 8012fc4:	6821      	ldr	r1, [r4, #0]
 8012fc6:	462a      	mov	r2, r5
 8012fc8:	f7ff ff73 	bl	8012eb2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8012fcc:	b137      	cbz	r7, 8012fdc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x46>
 8012fce:	b12e      	cbz	r6, 8012fdc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x46>
 8012fd0:	4632      	mov	r2, r6
 8012fd2:	4639      	mov	r1, r7
 8012fd4:	eb0a 0005 	add.w	r0, sl, r5
 8012fd8:	f7ff ff6b 	bl	8012eb2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8012fdc:	f1b9 0f00 	cmp.w	r9, #0
 8012fe0:	d007      	beq.n	8012ff2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x5c>
 8012fe2:	6821      	ldr	r1, [r4, #0]
 8012fe4:	4435      	add	r5, r6
 8012fe6:	464a      	mov	r2, r9
 8012fe8:	4441      	add	r1, r8
 8012fea:	eb0a 0005 	add.w	r0, sl, r5
 8012fee:	f7ff ff60 	bl	8012eb2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8012ff2:	4620      	mov	r0, r4
 8012ff4:	f7ff ff46 	bl	8012e84 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 8012ff8:	9b01      	ldr	r3, [sp, #4]
 8012ffa:	f8c4 a000 	str.w	sl, [r4]
 8012ffe:	60a3      	str	r3, [r4, #8]
 8013000:	b002      	add	sp, #8
 8013002:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08013006 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7reserveEj>:
 8013006:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8013008:	4604      	mov	r4, r0
 801300a:	9101      	str	r1, [sp, #4]
 801300c:	f7ff ffba 	bl	8012f84 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv>
 8013010:	9b01      	ldr	r3, [sp, #4]
 8013012:	4283      	cmp	r3, r0
 8013014:	4602      	mov	r2, r0
 8013016:	d90f      	bls.n	8013038 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7reserveEj+0x32>
 8013018:	a901      	add	r1, sp, #4
 801301a:	4620      	mov	r0, r4
 801301c:	f7ff ff10 	bl	8012e40 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8013020:	6862      	ldr	r2, [r4, #4]
 8013022:	6821      	ldr	r1, [r4, #0]
 8013024:	3201      	adds	r2, #1
 8013026:	4605      	mov	r5, r0
 8013028:	f7ff ff43 	bl	8012eb2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 801302c:	4620      	mov	r0, r4
 801302e:	f7ff ff29 	bl	8012e84 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 8013032:	9b01      	ldr	r3, [sp, #4]
 8013034:	6025      	str	r5, [r4, #0]
 8013036:	60a3      	str	r3, [r4, #8]
 8013038:	b003      	add	sp, #12
 801303a:	bd30      	pop	{r4, r5, pc}

0801303c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc>:
 801303c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8013040:	4616      	mov	r6, r2
 8013042:	461d      	mov	r5, r3
 8013044:	4604      	mov	r4, r0
 8013046:	4b1b      	ldr	r3, [pc, #108]	@ (80130b4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc+0x78>)
 8013048:	462a      	mov	r2, r5
 801304a:	460f      	mov	r7, r1
 801304c:	4631      	mov	r1, r6
 801304e:	f7ff ff24 	bl	8012e9a <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>
 8013052:	4620      	mov	r0, r4
 8013054:	f7ff ff96 	bl	8012f84 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv>
 8013058:	f8d4 9004 	ldr.w	r9, [r4, #4]
 801305c:	eba5 0806 	sub.w	r8, r5, r6
 8013060:	44c8      	add	r8, r9
 8013062:	4540      	cmp	r0, r8
 8013064:	d31d      	bcc.n	80130a2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc+0x66>
 8013066:	19f3      	adds	r3, r6, r7
 8013068:	ebb9 0203 	subs.w	r2, r9, r3
 801306c:	d007      	beq.n	801307e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc+0x42>
 801306e:	42ae      	cmp	r6, r5
 8013070:	d005      	beq.n	801307e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc+0x42>
 8013072:	6820      	ldr	r0, [r4, #0]
 8013074:	4438      	add	r0, r7
 8013076:	1981      	adds	r1, r0, r6
 8013078:	4428      	add	r0, r5
 801307a:	f7ff ff26 	bl	8012eca <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 801307e:	b135      	cbz	r5, 801308e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc+0x52>
 8013080:	6820      	ldr	r0, [r4, #0]
 8013082:	f89d 2028 	ldrb.w	r2, [sp, #40]	@ 0x28
 8013086:	4629      	mov	r1, r5
 8013088:	4438      	add	r0, r7
 801308a:	f7ff ff2a 	bl	8012ee2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_S_assignEPcjc>
 801308e:	6823      	ldr	r3, [r4, #0]
 8013090:	f8c4 8004 	str.w	r8, [r4, #4]
 8013094:	2200      	movs	r2, #0
 8013096:	4620      	mov	r0, r4
 8013098:	f803 2008 	strb.w	r2, [r3, r8]
 801309c:	b003      	add	sp, #12
 801309e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80130a2:	9500      	str	r5, [sp, #0]
 80130a4:	2300      	movs	r3, #0
 80130a6:	4632      	mov	r2, r6
 80130a8:	4639      	mov	r1, r7
 80130aa:	4620      	mov	r0, r4
 80130ac:	f7ff ff73 	bl	8012f96 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>
 80130b0:	e7e5      	b.n	801307e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc+0x42>
 80130b2:	bf00      	nop
 80130b4:	080149f8 	.word	0x080149f8

080130b8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEjc>:
 80130b8:	b507      	push	{r0, r1, r2, lr}
 80130ba:	9200      	str	r2, [sp, #0]
 80130bc:	460b      	mov	r3, r1
 80130be:	2200      	movs	r2, #0
 80130c0:	6841      	ldr	r1, [r0, #4]
 80130c2:	f7ff ffbb 	bl	801303c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc>
 80130c6:	b003      	add	sp, #12
 80130c8:	f85d fb04 	ldr.w	pc, [sp], #4

080130cc <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>:
 80130cc:	6800      	ldr	r0, [r0, #0]
 80130ce:	4770      	bx	lr

080130d0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>:
 80130d0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80130d2:	1a53      	subs	r3, r2, r1
 80130d4:	2b0f      	cmp	r3, #15
 80130d6:	4604      	mov	r4, r0
 80130d8:	460d      	mov	r5, r1
 80130da:	4616      	mov	r6, r2
 80130dc:	9301      	str	r3, [sp, #4]
 80130de:	d906      	bls.n	80130ee <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x1e>
 80130e0:	2200      	movs	r2, #0
 80130e2:	a901      	add	r1, sp, #4
 80130e4:	f7ff feac 	bl	8012e40 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 80130e8:	9b01      	ldr	r3, [sp, #4]
 80130ea:	6020      	str	r0, [r4, #0]
 80130ec:	60a3      	str	r3, [r4, #8]
 80130ee:	4632      	mov	r2, r6
 80130f0:	4629      	mov	r1, r5
 80130f2:	6820      	ldr	r0, [r4, #0]
 80130f4:	f7ff ff06 	bl	8012f04 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>
 80130f8:	9b01      	ldr	r3, [sp, #4]
 80130fa:	6822      	ldr	r2, [r4, #0]
 80130fc:	6063      	str	r3, [r4, #4]
 80130fe:	2100      	movs	r1, #0
 8013100:	54d1      	strb	r1, [r2, r3]
 8013102:	b002      	add	sp, #8
 8013104:	bd70      	pop	{r4, r5, r6, pc}

08013106 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>:
 8013106:	f100 0208 	add.w	r2, r0, #8
 801310a:	b510      	push	{r4, lr}
 801310c:	6002      	str	r2, [r0, #0]
 801310e:	e9d1 1200 	ldrd	r1, r2, [r1]
 8013112:	4604      	mov	r4, r0
 8013114:	f04f 0300 	mov.w	r3, #0
 8013118:	440a      	add	r2, r1
 801311a:	f7ff ffd9 	bl	80130d0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>
 801311e:	4620      	mov	r0, r4
 8013120:	bd10      	pop	{r4, pc}

08013122 <_ZdlPv>:
 8013122:	f000 b81b 	b.w	801315c <free>

08013126 <_ZdlPvSt11align_val_t>:
 8013126:	f000 b819 	b.w	801315c <free>
	...

0801312c <_ZSt15get_new_handlerv>:
 801312c:	4b02      	ldr	r3, [pc, #8]	@ (8013138 <_ZSt15get_new_handlerv+0xc>)
 801312e:	6818      	ldr	r0, [r3, #0]
 8013130:	f3bf 8f5b 	dmb	ish
 8013134:	4770      	bx	lr
 8013136:	bf00      	nop
 8013138:	24000d9c 	.word	0x24000d9c

0801313c <abort>:
 801313c:	b508      	push	{r3, lr}
 801313e:	2006      	movs	r0, #6
 8013140:	f000 fb74 	bl	801382c <raise>
 8013144:	2001      	movs	r0, #1
 8013146:	f7f1 fb5f 	bl	8004808 <_exit>
	...

0801314c <malloc>:
 801314c:	4b02      	ldr	r3, [pc, #8]	@ (8013158 <malloc+0xc>)
 801314e:	4601      	mov	r1, r0
 8013150:	6818      	ldr	r0, [r3, #0]
 8013152:	f000 b82d 	b.w	80131b0 <_malloc_r>
 8013156:	bf00      	nop
 8013158:	24000074 	.word	0x24000074

0801315c <free>:
 801315c:	4b02      	ldr	r3, [pc, #8]	@ (8013168 <free+0xc>)
 801315e:	4601      	mov	r1, r0
 8013160:	6818      	ldr	r0, [r3, #0]
 8013162:	f000 bc11 	b.w	8013988 <_free_r>
 8013166:	bf00      	nop
 8013168:	24000074 	.word	0x24000074

0801316c <sbrk_aligned>:
 801316c:	b570      	push	{r4, r5, r6, lr}
 801316e:	4e0f      	ldr	r6, [pc, #60]	@ (80131ac <sbrk_aligned+0x40>)
 8013170:	460c      	mov	r4, r1
 8013172:	6831      	ldr	r1, [r6, #0]
 8013174:	4605      	mov	r5, r0
 8013176:	b911      	cbnz	r1, 801317e <sbrk_aligned+0x12>
 8013178:	f000 fba8 	bl	80138cc <_sbrk_r>
 801317c:	6030      	str	r0, [r6, #0]
 801317e:	4621      	mov	r1, r4
 8013180:	4628      	mov	r0, r5
 8013182:	f000 fba3 	bl	80138cc <_sbrk_r>
 8013186:	1c43      	adds	r3, r0, #1
 8013188:	d103      	bne.n	8013192 <sbrk_aligned+0x26>
 801318a:	f04f 34ff 	mov.w	r4, #4294967295
 801318e:	4620      	mov	r0, r4
 8013190:	bd70      	pop	{r4, r5, r6, pc}
 8013192:	1cc4      	adds	r4, r0, #3
 8013194:	f024 0403 	bic.w	r4, r4, #3
 8013198:	42a0      	cmp	r0, r4
 801319a:	d0f8      	beq.n	801318e <sbrk_aligned+0x22>
 801319c:	1a21      	subs	r1, r4, r0
 801319e:	4628      	mov	r0, r5
 80131a0:	f000 fb94 	bl	80138cc <_sbrk_r>
 80131a4:	3001      	adds	r0, #1
 80131a6:	d1f2      	bne.n	801318e <sbrk_aligned+0x22>
 80131a8:	e7ef      	b.n	801318a <sbrk_aligned+0x1e>
 80131aa:	bf00      	nop
 80131ac:	24000da0 	.word	0x24000da0

080131b0 <_malloc_r>:
 80131b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80131b4:	1ccd      	adds	r5, r1, #3
 80131b6:	f025 0503 	bic.w	r5, r5, #3
 80131ba:	3508      	adds	r5, #8
 80131bc:	2d0c      	cmp	r5, #12
 80131be:	bf38      	it	cc
 80131c0:	250c      	movcc	r5, #12
 80131c2:	2d00      	cmp	r5, #0
 80131c4:	4606      	mov	r6, r0
 80131c6:	db01      	blt.n	80131cc <_malloc_r+0x1c>
 80131c8:	42a9      	cmp	r1, r5
 80131ca:	d904      	bls.n	80131d6 <_malloc_r+0x26>
 80131cc:	230c      	movs	r3, #12
 80131ce:	6033      	str	r3, [r6, #0]
 80131d0:	2000      	movs	r0, #0
 80131d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80131d6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80132ac <_malloc_r+0xfc>
 80131da:	f000 f869 	bl	80132b0 <__malloc_lock>
 80131de:	f8d8 3000 	ldr.w	r3, [r8]
 80131e2:	461c      	mov	r4, r3
 80131e4:	bb44      	cbnz	r4, 8013238 <_malloc_r+0x88>
 80131e6:	4629      	mov	r1, r5
 80131e8:	4630      	mov	r0, r6
 80131ea:	f7ff ffbf 	bl	801316c <sbrk_aligned>
 80131ee:	1c43      	adds	r3, r0, #1
 80131f0:	4604      	mov	r4, r0
 80131f2:	d158      	bne.n	80132a6 <_malloc_r+0xf6>
 80131f4:	f8d8 4000 	ldr.w	r4, [r8]
 80131f8:	4627      	mov	r7, r4
 80131fa:	2f00      	cmp	r7, #0
 80131fc:	d143      	bne.n	8013286 <_malloc_r+0xd6>
 80131fe:	2c00      	cmp	r4, #0
 8013200:	d04b      	beq.n	801329a <_malloc_r+0xea>
 8013202:	6823      	ldr	r3, [r4, #0]
 8013204:	4639      	mov	r1, r7
 8013206:	4630      	mov	r0, r6
 8013208:	eb04 0903 	add.w	r9, r4, r3
 801320c:	f000 fb5e 	bl	80138cc <_sbrk_r>
 8013210:	4581      	cmp	r9, r0
 8013212:	d142      	bne.n	801329a <_malloc_r+0xea>
 8013214:	6821      	ldr	r1, [r4, #0]
 8013216:	1a6d      	subs	r5, r5, r1
 8013218:	4629      	mov	r1, r5
 801321a:	4630      	mov	r0, r6
 801321c:	f7ff ffa6 	bl	801316c <sbrk_aligned>
 8013220:	3001      	adds	r0, #1
 8013222:	d03a      	beq.n	801329a <_malloc_r+0xea>
 8013224:	6823      	ldr	r3, [r4, #0]
 8013226:	442b      	add	r3, r5
 8013228:	6023      	str	r3, [r4, #0]
 801322a:	f8d8 3000 	ldr.w	r3, [r8]
 801322e:	685a      	ldr	r2, [r3, #4]
 8013230:	bb62      	cbnz	r2, 801328c <_malloc_r+0xdc>
 8013232:	f8c8 7000 	str.w	r7, [r8]
 8013236:	e00f      	b.n	8013258 <_malloc_r+0xa8>
 8013238:	6822      	ldr	r2, [r4, #0]
 801323a:	1b52      	subs	r2, r2, r5
 801323c:	d420      	bmi.n	8013280 <_malloc_r+0xd0>
 801323e:	2a0b      	cmp	r2, #11
 8013240:	d917      	bls.n	8013272 <_malloc_r+0xc2>
 8013242:	1961      	adds	r1, r4, r5
 8013244:	42a3      	cmp	r3, r4
 8013246:	6025      	str	r5, [r4, #0]
 8013248:	bf18      	it	ne
 801324a:	6059      	strne	r1, [r3, #4]
 801324c:	6863      	ldr	r3, [r4, #4]
 801324e:	bf08      	it	eq
 8013250:	f8c8 1000 	streq.w	r1, [r8]
 8013254:	5162      	str	r2, [r4, r5]
 8013256:	604b      	str	r3, [r1, #4]
 8013258:	4630      	mov	r0, r6
 801325a:	f000 f82f 	bl	80132bc <__malloc_unlock>
 801325e:	f104 000b 	add.w	r0, r4, #11
 8013262:	1d23      	adds	r3, r4, #4
 8013264:	f020 0007 	bic.w	r0, r0, #7
 8013268:	1ac2      	subs	r2, r0, r3
 801326a:	bf1c      	itt	ne
 801326c:	1a1b      	subne	r3, r3, r0
 801326e:	50a3      	strne	r3, [r4, r2]
 8013270:	e7af      	b.n	80131d2 <_malloc_r+0x22>
 8013272:	6862      	ldr	r2, [r4, #4]
 8013274:	42a3      	cmp	r3, r4
 8013276:	bf0c      	ite	eq
 8013278:	f8c8 2000 	streq.w	r2, [r8]
 801327c:	605a      	strne	r2, [r3, #4]
 801327e:	e7eb      	b.n	8013258 <_malloc_r+0xa8>
 8013280:	4623      	mov	r3, r4
 8013282:	6864      	ldr	r4, [r4, #4]
 8013284:	e7ae      	b.n	80131e4 <_malloc_r+0x34>
 8013286:	463c      	mov	r4, r7
 8013288:	687f      	ldr	r7, [r7, #4]
 801328a:	e7b6      	b.n	80131fa <_malloc_r+0x4a>
 801328c:	461a      	mov	r2, r3
 801328e:	685b      	ldr	r3, [r3, #4]
 8013290:	42a3      	cmp	r3, r4
 8013292:	d1fb      	bne.n	801328c <_malloc_r+0xdc>
 8013294:	2300      	movs	r3, #0
 8013296:	6053      	str	r3, [r2, #4]
 8013298:	e7de      	b.n	8013258 <_malloc_r+0xa8>
 801329a:	230c      	movs	r3, #12
 801329c:	6033      	str	r3, [r6, #0]
 801329e:	4630      	mov	r0, r6
 80132a0:	f000 f80c 	bl	80132bc <__malloc_unlock>
 80132a4:	e794      	b.n	80131d0 <_malloc_r+0x20>
 80132a6:	6005      	str	r5, [r0, #0]
 80132a8:	e7d6      	b.n	8013258 <_malloc_r+0xa8>
 80132aa:	bf00      	nop
 80132ac:	24000da4 	.word	0x24000da4

080132b0 <__malloc_lock>:
 80132b0:	4801      	ldr	r0, [pc, #4]	@ (80132b8 <__malloc_lock+0x8>)
 80132b2:	f000 bb58 	b.w	8013966 <__retarget_lock_acquire_recursive>
 80132b6:	bf00      	nop
 80132b8:	24000ee8 	.word	0x24000ee8

080132bc <__malloc_unlock>:
 80132bc:	4801      	ldr	r0, [pc, #4]	@ (80132c4 <__malloc_unlock+0x8>)
 80132be:	f000 bb53 	b.w	8013968 <__retarget_lock_release_recursive>
 80132c2:	bf00      	nop
 80132c4:	24000ee8 	.word	0x24000ee8

080132c8 <memalign>:
 80132c8:	4b02      	ldr	r3, [pc, #8]	@ (80132d4 <memalign+0xc>)
 80132ca:	460a      	mov	r2, r1
 80132cc:	4601      	mov	r1, r0
 80132ce:	6818      	ldr	r0, [r3, #0]
 80132d0:	f000 b802 	b.w	80132d8 <_memalign_r>
 80132d4:	24000074 	.word	0x24000074

080132d8 <_memalign_r>:
 80132d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80132da:	1e4b      	subs	r3, r1, #1
 80132dc:	420b      	tst	r3, r1
 80132de:	4606      	mov	r6, r0
 80132e0:	460d      	mov	r5, r1
 80132e2:	d106      	bne.n	80132f2 <_memalign_r+0x1a>
 80132e4:	2908      	cmp	r1, #8
 80132e6:	bf38      	it	cc
 80132e8:	2508      	movcc	r5, #8
 80132ea:	1d53      	adds	r3, r2, #5
 80132ec:	d904      	bls.n	80132f8 <_memalign_r+0x20>
 80132ee:	230c      	movs	r3, #12
 80132f0:	6033      	str	r3, [r6, #0]
 80132f2:	2500      	movs	r5, #0
 80132f4:	4628      	mov	r0, r5
 80132f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80132f8:	2a04      	cmp	r2, #4
 80132fa:	bf38      	it	cc
 80132fc:	2204      	movcc	r2, #4
 80132fe:	1cd4      	adds	r4, r2, #3
 8013300:	f024 0403 	bic.w	r4, r4, #3
 8013304:	f1c5 0307 	rsb	r3, r5, #7
 8013308:	42a3      	cmp	r3, r4
 801330a:	d3f0      	bcc.n	80132ee <_memalign_r+0x16>
 801330c:	f1a5 0108 	sub.w	r1, r5, #8
 8013310:	4421      	add	r1, r4
 8013312:	f7ff ff4d 	bl	80131b0 <_malloc_r>
 8013316:	2800      	cmp	r0, #0
 8013318:	d0eb      	beq.n	80132f2 <_memalign_r+0x1a>
 801331a:	f850 2c04 	ldr.w	r2, [r0, #-4]
 801331e:	1f03      	subs	r3, r0, #4
 8013320:	2a00      	cmp	r2, #0
 8013322:	bfb8      	it	lt
 8013324:	189b      	addlt	r3, r3, r2
 8013326:	1cea      	adds	r2, r5, #3
 8013328:	441a      	add	r2, r3
 801332a:	426d      	negs	r5, r5
 801332c:	4015      	ands	r5, r2
 801332e:	1d19      	adds	r1, r3, #4
 8013330:	1a6a      	subs	r2, r5, r1
 8013332:	d00b      	beq.n	801334c <_memalign_r+0x74>
 8013334:	2a0b      	cmp	r2, #11
 8013336:	eb03 0702 	add.w	r7, r3, r2
 801333a:	d918      	bls.n	801336e <_memalign_r+0x96>
 801333c:	6818      	ldr	r0, [r3, #0]
 801333e:	1a80      	subs	r0, r0, r2
 8013340:	5098      	str	r0, [r3, r2]
 8013342:	601a      	str	r2, [r3, #0]
 8013344:	4630      	mov	r0, r6
 8013346:	f000 fb1f 	bl	8013988 <_free_r>
 801334a:	463b      	mov	r3, r7
 801334c:	681a      	ldr	r2, [r3, #0]
 801334e:	f104 010c 	add.w	r1, r4, #12
 8013352:	1898      	adds	r0, r3, r2
 8013354:	4429      	add	r1, r5
 8013356:	4288      	cmp	r0, r1
 8013358:	d9cc      	bls.n	80132f4 <_memalign_r+0x1c>
 801335a:	1929      	adds	r1, r5, r4
 801335c:	1ac8      	subs	r0, r1, r3
 801335e:	1a12      	subs	r2, r2, r0
 8013360:	6018      	str	r0, [r3, #0]
 8013362:	3104      	adds	r1, #4
 8013364:	512a      	str	r2, [r5, r4]
 8013366:	4630      	mov	r0, r6
 8013368:	f000 fb0e 	bl	8013988 <_free_r>
 801336c:	e7c2      	b.n	80132f4 <_memalign_r+0x1c>
 801336e:	4251      	negs	r1, r2
 8013370:	5099      	str	r1, [r3, r2]
 8013372:	e7eb      	b.n	801334c <_memalign_r+0x74>

08013374 <std>:
 8013374:	2300      	movs	r3, #0
 8013376:	b510      	push	{r4, lr}
 8013378:	4604      	mov	r4, r0
 801337a:	e9c0 3300 	strd	r3, r3, [r0]
 801337e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8013382:	6083      	str	r3, [r0, #8]
 8013384:	8181      	strh	r1, [r0, #12]
 8013386:	6643      	str	r3, [r0, #100]	@ 0x64
 8013388:	81c2      	strh	r2, [r0, #14]
 801338a:	6183      	str	r3, [r0, #24]
 801338c:	4619      	mov	r1, r3
 801338e:	2208      	movs	r2, #8
 8013390:	305c      	adds	r0, #92	@ 0x5c
 8013392:	f000 fa1b 	bl	80137cc <memset>
 8013396:	4b0d      	ldr	r3, [pc, #52]	@ (80133cc <std+0x58>)
 8013398:	6263      	str	r3, [r4, #36]	@ 0x24
 801339a:	4b0d      	ldr	r3, [pc, #52]	@ (80133d0 <std+0x5c>)
 801339c:	62a3      	str	r3, [r4, #40]	@ 0x28
 801339e:	4b0d      	ldr	r3, [pc, #52]	@ (80133d4 <std+0x60>)
 80133a0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80133a2:	4b0d      	ldr	r3, [pc, #52]	@ (80133d8 <std+0x64>)
 80133a4:	6323      	str	r3, [r4, #48]	@ 0x30
 80133a6:	4b0d      	ldr	r3, [pc, #52]	@ (80133dc <std+0x68>)
 80133a8:	6224      	str	r4, [r4, #32]
 80133aa:	429c      	cmp	r4, r3
 80133ac:	d006      	beq.n	80133bc <std+0x48>
 80133ae:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80133b2:	4294      	cmp	r4, r2
 80133b4:	d002      	beq.n	80133bc <std+0x48>
 80133b6:	33d0      	adds	r3, #208	@ 0xd0
 80133b8:	429c      	cmp	r4, r3
 80133ba:	d105      	bne.n	80133c8 <std+0x54>
 80133bc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80133c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80133c4:	f000 bace 	b.w	8013964 <__retarget_lock_init_recursive>
 80133c8:	bd10      	pop	{r4, pc}
 80133ca:	bf00      	nop
 80133cc:	080135e9 	.word	0x080135e9
 80133d0:	0801360b 	.word	0x0801360b
 80133d4:	08013643 	.word	0x08013643
 80133d8:	08013667 	.word	0x08013667
 80133dc:	24000da8 	.word	0x24000da8

080133e0 <stdio_exit_handler>:
 80133e0:	4a02      	ldr	r2, [pc, #8]	@ (80133ec <stdio_exit_handler+0xc>)
 80133e2:	4903      	ldr	r1, [pc, #12]	@ (80133f0 <stdio_exit_handler+0x10>)
 80133e4:	4803      	ldr	r0, [pc, #12]	@ (80133f4 <stdio_exit_handler+0x14>)
 80133e6:	f000 b869 	b.w	80134bc <_fwalk_sglue>
 80133ea:	bf00      	nop
 80133ec:	24000068 	.word	0x24000068
 80133f0:	080140c5 	.word	0x080140c5
 80133f4:	24000078 	.word	0x24000078

080133f8 <cleanup_stdio>:
 80133f8:	6841      	ldr	r1, [r0, #4]
 80133fa:	4b0c      	ldr	r3, [pc, #48]	@ (801342c <cleanup_stdio+0x34>)
 80133fc:	4299      	cmp	r1, r3
 80133fe:	b510      	push	{r4, lr}
 8013400:	4604      	mov	r4, r0
 8013402:	d001      	beq.n	8013408 <cleanup_stdio+0x10>
 8013404:	f000 fe5e 	bl	80140c4 <_fflush_r>
 8013408:	68a1      	ldr	r1, [r4, #8]
 801340a:	4b09      	ldr	r3, [pc, #36]	@ (8013430 <cleanup_stdio+0x38>)
 801340c:	4299      	cmp	r1, r3
 801340e:	d002      	beq.n	8013416 <cleanup_stdio+0x1e>
 8013410:	4620      	mov	r0, r4
 8013412:	f000 fe57 	bl	80140c4 <_fflush_r>
 8013416:	68e1      	ldr	r1, [r4, #12]
 8013418:	4b06      	ldr	r3, [pc, #24]	@ (8013434 <cleanup_stdio+0x3c>)
 801341a:	4299      	cmp	r1, r3
 801341c:	d004      	beq.n	8013428 <cleanup_stdio+0x30>
 801341e:	4620      	mov	r0, r4
 8013420:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013424:	f000 be4e 	b.w	80140c4 <_fflush_r>
 8013428:	bd10      	pop	{r4, pc}
 801342a:	bf00      	nop
 801342c:	24000da8 	.word	0x24000da8
 8013430:	24000e10 	.word	0x24000e10
 8013434:	24000e78 	.word	0x24000e78

08013438 <global_stdio_init.part.0>:
 8013438:	b510      	push	{r4, lr}
 801343a:	4b0b      	ldr	r3, [pc, #44]	@ (8013468 <global_stdio_init.part.0+0x30>)
 801343c:	4c0b      	ldr	r4, [pc, #44]	@ (801346c <global_stdio_init.part.0+0x34>)
 801343e:	4a0c      	ldr	r2, [pc, #48]	@ (8013470 <global_stdio_init.part.0+0x38>)
 8013440:	601a      	str	r2, [r3, #0]
 8013442:	4620      	mov	r0, r4
 8013444:	2200      	movs	r2, #0
 8013446:	2104      	movs	r1, #4
 8013448:	f7ff ff94 	bl	8013374 <std>
 801344c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8013450:	2201      	movs	r2, #1
 8013452:	2109      	movs	r1, #9
 8013454:	f7ff ff8e 	bl	8013374 <std>
 8013458:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 801345c:	2202      	movs	r2, #2
 801345e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013462:	2112      	movs	r1, #18
 8013464:	f7ff bf86 	b.w	8013374 <std>
 8013468:	24000ee0 	.word	0x24000ee0
 801346c:	24000da8 	.word	0x24000da8
 8013470:	080133e1 	.word	0x080133e1

08013474 <__sfp_lock_acquire>:
 8013474:	4801      	ldr	r0, [pc, #4]	@ (801347c <__sfp_lock_acquire+0x8>)
 8013476:	f000 ba76 	b.w	8013966 <__retarget_lock_acquire_recursive>
 801347a:	bf00      	nop
 801347c:	24000ee9 	.word	0x24000ee9

08013480 <__sfp_lock_release>:
 8013480:	4801      	ldr	r0, [pc, #4]	@ (8013488 <__sfp_lock_release+0x8>)
 8013482:	f000 ba71 	b.w	8013968 <__retarget_lock_release_recursive>
 8013486:	bf00      	nop
 8013488:	24000ee9 	.word	0x24000ee9

0801348c <__sinit>:
 801348c:	b510      	push	{r4, lr}
 801348e:	4604      	mov	r4, r0
 8013490:	f7ff fff0 	bl	8013474 <__sfp_lock_acquire>
 8013494:	6a23      	ldr	r3, [r4, #32]
 8013496:	b11b      	cbz	r3, 80134a0 <__sinit+0x14>
 8013498:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801349c:	f7ff bff0 	b.w	8013480 <__sfp_lock_release>
 80134a0:	4b04      	ldr	r3, [pc, #16]	@ (80134b4 <__sinit+0x28>)
 80134a2:	6223      	str	r3, [r4, #32]
 80134a4:	4b04      	ldr	r3, [pc, #16]	@ (80134b8 <__sinit+0x2c>)
 80134a6:	681b      	ldr	r3, [r3, #0]
 80134a8:	2b00      	cmp	r3, #0
 80134aa:	d1f5      	bne.n	8013498 <__sinit+0xc>
 80134ac:	f7ff ffc4 	bl	8013438 <global_stdio_init.part.0>
 80134b0:	e7f2      	b.n	8013498 <__sinit+0xc>
 80134b2:	bf00      	nop
 80134b4:	080133f9 	.word	0x080133f9
 80134b8:	24000ee0 	.word	0x24000ee0

080134bc <_fwalk_sglue>:
 80134bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80134c0:	4607      	mov	r7, r0
 80134c2:	4688      	mov	r8, r1
 80134c4:	4614      	mov	r4, r2
 80134c6:	2600      	movs	r6, #0
 80134c8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80134cc:	f1b9 0901 	subs.w	r9, r9, #1
 80134d0:	d505      	bpl.n	80134de <_fwalk_sglue+0x22>
 80134d2:	6824      	ldr	r4, [r4, #0]
 80134d4:	2c00      	cmp	r4, #0
 80134d6:	d1f7      	bne.n	80134c8 <_fwalk_sglue+0xc>
 80134d8:	4630      	mov	r0, r6
 80134da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80134de:	89ab      	ldrh	r3, [r5, #12]
 80134e0:	2b01      	cmp	r3, #1
 80134e2:	d907      	bls.n	80134f4 <_fwalk_sglue+0x38>
 80134e4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80134e8:	3301      	adds	r3, #1
 80134ea:	d003      	beq.n	80134f4 <_fwalk_sglue+0x38>
 80134ec:	4629      	mov	r1, r5
 80134ee:	4638      	mov	r0, r7
 80134f0:	47c0      	blx	r8
 80134f2:	4306      	orrs	r6, r0
 80134f4:	3568      	adds	r5, #104	@ 0x68
 80134f6:	e7e9      	b.n	80134cc <_fwalk_sglue+0x10>

080134f8 <iprintf>:
 80134f8:	b40f      	push	{r0, r1, r2, r3}
 80134fa:	b507      	push	{r0, r1, r2, lr}
 80134fc:	4906      	ldr	r1, [pc, #24]	@ (8013518 <iprintf+0x20>)
 80134fe:	ab04      	add	r3, sp, #16
 8013500:	6808      	ldr	r0, [r1, #0]
 8013502:	f853 2b04 	ldr.w	r2, [r3], #4
 8013506:	6881      	ldr	r1, [r0, #8]
 8013508:	9301      	str	r3, [sp, #4]
 801350a:	f000 fab1 	bl	8013a70 <_vfiprintf_r>
 801350e:	b003      	add	sp, #12
 8013510:	f85d eb04 	ldr.w	lr, [sp], #4
 8013514:	b004      	add	sp, #16
 8013516:	4770      	bx	lr
 8013518:	24000074 	.word	0x24000074

0801351c <putchar>:
 801351c:	4b02      	ldr	r3, [pc, #8]	@ (8013528 <putchar+0xc>)
 801351e:	4601      	mov	r1, r0
 8013520:	6818      	ldr	r0, [r3, #0]
 8013522:	6882      	ldr	r2, [r0, #8]
 8013524:	f000 be58 	b.w	80141d8 <_putc_r>
 8013528:	24000074 	.word	0x24000074

0801352c <_puts_r>:
 801352c:	6a03      	ldr	r3, [r0, #32]
 801352e:	b570      	push	{r4, r5, r6, lr}
 8013530:	6884      	ldr	r4, [r0, #8]
 8013532:	4605      	mov	r5, r0
 8013534:	460e      	mov	r6, r1
 8013536:	b90b      	cbnz	r3, 801353c <_puts_r+0x10>
 8013538:	f7ff ffa8 	bl	801348c <__sinit>
 801353c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801353e:	07db      	lsls	r3, r3, #31
 8013540:	d405      	bmi.n	801354e <_puts_r+0x22>
 8013542:	89a3      	ldrh	r3, [r4, #12]
 8013544:	0598      	lsls	r0, r3, #22
 8013546:	d402      	bmi.n	801354e <_puts_r+0x22>
 8013548:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801354a:	f000 fa0c 	bl	8013966 <__retarget_lock_acquire_recursive>
 801354e:	89a3      	ldrh	r3, [r4, #12]
 8013550:	0719      	lsls	r1, r3, #28
 8013552:	d502      	bpl.n	801355a <_puts_r+0x2e>
 8013554:	6923      	ldr	r3, [r4, #16]
 8013556:	2b00      	cmp	r3, #0
 8013558:	d135      	bne.n	80135c6 <_puts_r+0x9a>
 801355a:	4621      	mov	r1, r4
 801355c:	4628      	mov	r0, r5
 801355e:	f000 f8c5 	bl	80136ec <__swsetup_r>
 8013562:	b380      	cbz	r0, 80135c6 <_puts_r+0x9a>
 8013564:	f04f 35ff 	mov.w	r5, #4294967295
 8013568:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801356a:	07da      	lsls	r2, r3, #31
 801356c:	d405      	bmi.n	801357a <_puts_r+0x4e>
 801356e:	89a3      	ldrh	r3, [r4, #12]
 8013570:	059b      	lsls	r3, r3, #22
 8013572:	d402      	bmi.n	801357a <_puts_r+0x4e>
 8013574:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8013576:	f000 f9f7 	bl	8013968 <__retarget_lock_release_recursive>
 801357a:	4628      	mov	r0, r5
 801357c:	bd70      	pop	{r4, r5, r6, pc}
 801357e:	2b00      	cmp	r3, #0
 8013580:	da04      	bge.n	801358c <_puts_r+0x60>
 8013582:	69a2      	ldr	r2, [r4, #24]
 8013584:	429a      	cmp	r2, r3
 8013586:	dc17      	bgt.n	80135b8 <_puts_r+0x8c>
 8013588:	290a      	cmp	r1, #10
 801358a:	d015      	beq.n	80135b8 <_puts_r+0x8c>
 801358c:	6823      	ldr	r3, [r4, #0]
 801358e:	1c5a      	adds	r2, r3, #1
 8013590:	6022      	str	r2, [r4, #0]
 8013592:	7019      	strb	r1, [r3, #0]
 8013594:	68a3      	ldr	r3, [r4, #8]
 8013596:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801359a:	3b01      	subs	r3, #1
 801359c:	60a3      	str	r3, [r4, #8]
 801359e:	2900      	cmp	r1, #0
 80135a0:	d1ed      	bne.n	801357e <_puts_r+0x52>
 80135a2:	2b00      	cmp	r3, #0
 80135a4:	da11      	bge.n	80135ca <_puts_r+0x9e>
 80135a6:	4622      	mov	r2, r4
 80135a8:	210a      	movs	r1, #10
 80135aa:	4628      	mov	r0, r5
 80135ac:	f000 f85f 	bl	801366e <__swbuf_r>
 80135b0:	3001      	adds	r0, #1
 80135b2:	d0d7      	beq.n	8013564 <_puts_r+0x38>
 80135b4:	250a      	movs	r5, #10
 80135b6:	e7d7      	b.n	8013568 <_puts_r+0x3c>
 80135b8:	4622      	mov	r2, r4
 80135ba:	4628      	mov	r0, r5
 80135bc:	f000 f857 	bl	801366e <__swbuf_r>
 80135c0:	3001      	adds	r0, #1
 80135c2:	d1e7      	bne.n	8013594 <_puts_r+0x68>
 80135c4:	e7ce      	b.n	8013564 <_puts_r+0x38>
 80135c6:	3e01      	subs	r6, #1
 80135c8:	e7e4      	b.n	8013594 <_puts_r+0x68>
 80135ca:	6823      	ldr	r3, [r4, #0]
 80135cc:	1c5a      	adds	r2, r3, #1
 80135ce:	6022      	str	r2, [r4, #0]
 80135d0:	220a      	movs	r2, #10
 80135d2:	701a      	strb	r2, [r3, #0]
 80135d4:	e7ee      	b.n	80135b4 <_puts_r+0x88>
	...

080135d8 <puts>:
 80135d8:	4b02      	ldr	r3, [pc, #8]	@ (80135e4 <puts+0xc>)
 80135da:	4601      	mov	r1, r0
 80135dc:	6818      	ldr	r0, [r3, #0]
 80135de:	f7ff bfa5 	b.w	801352c <_puts_r>
 80135e2:	bf00      	nop
 80135e4:	24000074 	.word	0x24000074

080135e8 <__sread>:
 80135e8:	b510      	push	{r4, lr}
 80135ea:	460c      	mov	r4, r1
 80135ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80135f0:	f000 f946 	bl	8013880 <_read_r>
 80135f4:	2800      	cmp	r0, #0
 80135f6:	bfab      	itete	ge
 80135f8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80135fa:	89a3      	ldrhlt	r3, [r4, #12]
 80135fc:	181b      	addge	r3, r3, r0
 80135fe:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8013602:	bfac      	ite	ge
 8013604:	6563      	strge	r3, [r4, #84]	@ 0x54
 8013606:	81a3      	strhlt	r3, [r4, #12]
 8013608:	bd10      	pop	{r4, pc}

0801360a <__swrite>:
 801360a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801360e:	461f      	mov	r7, r3
 8013610:	898b      	ldrh	r3, [r1, #12]
 8013612:	05db      	lsls	r3, r3, #23
 8013614:	4605      	mov	r5, r0
 8013616:	460c      	mov	r4, r1
 8013618:	4616      	mov	r6, r2
 801361a:	d505      	bpl.n	8013628 <__swrite+0x1e>
 801361c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013620:	2302      	movs	r3, #2
 8013622:	2200      	movs	r2, #0
 8013624:	f000 f91a 	bl	801385c <_lseek_r>
 8013628:	89a3      	ldrh	r3, [r4, #12]
 801362a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801362e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8013632:	81a3      	strh	r3, [r4, #12]
 8013634:	4632      	mov	r2, r6
 8013636:	463b      	mov	r3, r7
 8013638:	4628      	mov	r0, r5
 801363a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801363e:	f000 b955 	b.w	80138ec <_write_r>

08013642 <__sseek>:
 8013642:	b510      	push	{r4, lr}
 8013644:	460c      	mov	r4, r1
 8013646:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801364a:	f000 f907 	bl	801385c <_lseek_r>
 801364e:	1c43      	adds	r3, r0, #1
 8013650:	89a3      	ldrh	r3, [r4, #12]
 8013652:	bf15      	itete	ne
 8013654:	6560      	strne	r0, [r4, #84]	@ 0x54
 8013656:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801365a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801365e:	81a3      	strheq	r3, [r4, #12]
 8013660:	bf18      	it	ne
 8013662:	81a3      	strhne	r3, [r4, #12]
 8013664:	bd10      	pop	{r4, pc}

08013666 <__sclose>:
 8013666:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801366a:	f000 b8e7 	b.w	801383c <_close_r>

0801366e <__swbuf_r>:
 801366e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013670:	460e      	mov	r6, r1
 8013672:	4614      	mov	r4, r2
 8013674:	4605      	mov	r5, r0
 8013676:	b118      	cbz	r0, 8013680 <__swbuf_r+0x12>
 8013678:	6a03      	ldr	r3, [r0, #32]
 801367a:	b90b      	cbnz	r3, 8013680 <__swbuf_r+0x12>
 801367c:	f7ff ff06 	bl	801348c <__sinit>
 8013680:	69a3      	ldr	r3, [r4, #24]
 8013682:	60a3      	str	r3, [r4, #8]
 8013684:	89a3      	ldrh	r3, [r4, #12]
 8013686:	071a      	lsls	r2, r3, #28
 8013688:	d501      	bpl.n	801368e <__swbuf_r+0x20>
 801368a:	6923      	ldr	r3, [r4, #16]
 801368c:	b943      	cbnz	r3, 80136a0 <__swbuf_r+0x32>
 801368e:	4621      	mov	r1, r4
 8013690:	4628      	mov	r0, r5
 8013692:	f000 f82b 	bl	80136ec <__swsetup_r>
 8013696:	b118      	cbz	r0, 80136a0 <__swbuf_r+0x32>
 8013698:	f04f 37ff 	mov.w	r7, #4294967295
 801369c:	4638      	mov	r0, r7
 801369e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80136a0:	6823      	ldr	r3, [r4, #0]
 80136a2:	6922      	ldr	r2, [r4, #16]
 80136a4:	1a98      	subs	r0, r3, r2
 80136a6:	6963      	ldr	r3, [r4, #20]
 80136a8:	b2f6      	uxtb	r6, r6
 80136aa:	4283      	cmp	r3, r0
 80136ac:	4637      	mov	r7, r6
 80136ae:	dc05      	bgt.n	80136bc <__swbuf_r+0x4e>
 80136b0:	4621      	mov	r1, r4
 80136b2:	4628      	mov	r0, r5
 80136b4:	f000 fd06 	bl	80140c4 <_fflush_r>
 80136b8:	2800      	cmp	r0, #0
 80136ba:	d1ed      	bne.n	8013698 <__swbuf_r+0x2a>
 80136bc:	68a3      	ldr	r3, [r4, #8]
 80136be:	3b01      	subs	r3, #1
 80136c0:	60a3      	str	r3, [r4, #8]
 80136c2:	6823      	ldr	r3, [r4, #0]
 80136c4:	1c5a      	adds	r2, r3, #1
 80136c6:	6022      	str	r2, [r4, #0]
 80136c8:	701e      	strb	r6, [r3, #0]
 80136ca:	6962      	ldr	r2, [r4, #20]
 80136cc:	1c43      	adds	r3, r0, #1
 80136ce:	429a      	cmp	r2, r3
 80136d0:	d004      	beq.n	80136dc <__swbuf_r+0x6e>
 80136d2:	89a3      	ldrh	r3, [r4, #12]
 80136d4:	07db      	lsls	r3, r3, #31
 80136d6:	d5e1      	bpl.n	801369c <__swbuf_r+0x2e>
 80136d8:	2e0a      	cmp	r6, #10
 80136da:	d1df      	bne.n	801369c <__swbuf_r+0x2e>
 80136dc:	4621      	mov	r1, r4
 80136de:	4628      	mov	r0, r5
 80136e0:	f000 fcf0 	bl	80140c4 <_fflush_r>
 80136e4:	2800      	cmp	r0, #0
 80136e6:	d0d9      	beq.n	801369c <__swbuf_r+0x2e>
 80136e8:	e7d6      	b.n	8013698 <__swbuf_r+0x2a>
	...

080136ec <__swsetup_r>:
 80136ec:	b538      	push	{r3, r4, r5, lr}
 80136ee:	4b29      	ldr	r3, [pc, #164]	@ (8013794 <__swsetup_r+0xa8>)
 80136f0:	4605      	mov	r5, r0
 80136f2:	6818      	ldr	r0, [r3, #0]
 80136f4:	460c      	mov	r4, r1
 80136f6:	b118      	cbz	r0, 8013700 <__swsetup_r+0x14>
 80136f8:	6a03      	ldr	r3, [r0, #32]
 80136fa:	b90b      	cbnz	r3, 8013700 <__swsetup_r+0x14>
 80136fc:	f7ff fec6 	bl	801348c <__sinit>
 8013700:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013704:	0719      	lsls	r1, r3, #28
 8013706:	d422      	bmi.n	801374e <__swsetup_r+0x62>
 8013708:	06da      	lsls	r2, r3, #27
 801370a:	d407      	bmi.n	801371c <__swsetup_r+0x30>
 801370c:	2209      	movs	r2, #9
 801370e:	602a      	str	r2, [r5, #0]
 8013710:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013714:	81a3      	strh	r3, [r4, #12]
 8013716:	f04f 30ff 	mov.w	r0, #4294967295
 801371a:	e033      	b.n	8013784 <__swsetup_r+0x98>
 801371c:	0758      	lsls	r0, r3, #29
 801371e:	d512      	bpl.n	8013746 <__swsetup_r+0x5a>
 8013720:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8013722:	b141      	cbz	r1, 8013736 <__swsetup_r+0x4a>
 8013724:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8013728:	4299      	cmp	r1, r3
 801372a:	d002      	beq.n	8013732 <__swsetup_r+0x46>
 801372c:	4628      	mov	r0, r5
 801372e:	f000 f92b 	bl	8013988 <_free_r>
 8013732:	2300      	movs	r3, #0
 8013734:	6363      	str	r3, [r4, #52]	@ 0x34
 8013736:	89a3      	ldrh	r3, [r4, #12]
 8013738:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801373c:	81a3      	strh	r3, [r4, #12]
 801373e:	2300      	movs	r3, #0
 8013740:	6063      	str	r3, [r4, #4]
 8013742:	6923      	ldr	r3, [r4, #16]
 8013744:	6023      	str	r3, [r4, #0]
 8013746:	89a3      	ldrh	r3, [r4, #12]
 8013748:	f043 0308 	orr.w	r3, r3, #8
 801374c:	81a3      	strh	r3, [r4, #12]
 801374e:	6923      	ldr	r3, [r4, #16]
 8013750:	b94b      	cbnz	r3, 8013766 <__swsetup_r+0x7a>
 8013752:	89a3      	ldrh	r3, [r4, #12]
 8013754:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8013758:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801375c:	d003      	beq.n	8013766 <__swsetup_r+0x7a>
 801375e:	4621      	mov	r1, r4
 8013760:	4628      	mov	r0, r5
 8013762:	f000 fcfd 	bl	8014160 <__smakebuf_r>
 8013766:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801376a:	f013 0201 	ands.w	r2, r3, #1
 801376e:	d00a      	beq.n	8013786 <__swsetup_r+0x9a>
 8013770:	2200      	movs	r2, #0
 8013772:	60a2      	str	r2, [r4, #8]
 8013774:	6962      	ldr	r2, [r4, #20]
 8013776:	4252      	negs	r2, r2
 8013778:	61a2      	str	r2, [r4, #24]
 801377a:	6922      	ldr	r2, [r4, #16]
 801377c:	b942      	cbnz	r2, 8013790 <__swsetup_r+0xa4>
 801377e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8013782:	d1c5      	bne.n	8013710 <__swsetup_r+0x24>
 8013784:	bd38      	pop	{r3, r4, r5, pc}
 8013786:	0799      	lsls	r1, r3, #30
 8013788:	bf58      	it	pl
 801378a:	6962      	ldrpl	r2, [r4, #20]
 801378c:	60a2      	str	r2, [r4, #8]
 801378e:	e7f4      	b.n	801377a <__swsetup_r+0x8e>
 8013790:	2000      	movs	r0, #0
 8013792:	e7f7      	b.n	8013784 <__swsetup_r+0x98>
 8013794:	24000074 	.word	0x24000074

08013798 <memmove>:
 8013798:	4288      	cmp	r0, r1
 801379a:	b510      	push	{r4, lr}
 801379c:	eb01 0402 	add.w	r4, r1, r2
 80137a0:	d902      	bls.n	80137a8 <memmove+0x10>
 80137a2:	4284      	cmp	r4, r0
 80137a4:	4623      	mov	r3, r4
 80137a6:	d807      	bhi.n	80137b8 <memmove+0x20>
 80137a8:	1e43      	subs	r3, r0, #1
 80137aa:	42a1      	cmp	r1, r4
 80137ac:	d008      	beq.n	80137c0 <memmove+0x28>
 80137ae:	f811 2b01 	ldrb.w	r2, [r1], #1
 80137b2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80137b6:	e7f8      	b.n	80137aa <memmove+0x12>
 80137b8:	4402      	add	r2, r0
 80137ba:	4601      	mov	r1, r0
 80137bc:	428a      	cmp	r2, r1
 80137be:	d100      	bne.n	80137c2 <memmove+0x2a>
 80137c0:	bd10      	pop	{r4, pc}
 80137c2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80137c6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80137ca:	e7f7      	b.n	80137bc <memmove+0x24>

080137cc <memset>:
 80137cc:	4402      	add	r2, r0
 80137ce:	4603      	mov	r3, r0
 80137d0:	4293      	cmp	r3, r2
 80137d2:	d100      	bne.n	80137d6 <memset+0xa>
 80137d4:	4770      	bx	lr
 80137d6:	f803 1b01 	strb.w	r1, [r3], #1
 80137da:	e7f9      	b.n	80137d0 <memset+0x4>

080137dc <_raise_r>:
 80137dc:	291f      	cmp	r1, #31
 80137de:	b538      	push	{r3, r4, r5, lr}
 80137e0:	4605      	mov	r5, r0
 80137e2:	460c      	mov	r4, r1
 80137e4:	d904      	bls.n	80137f0 <_raise_r+0x14>
 80137e6:	2316      	movs	r3, #22
 80137e8:	6003      	str	r3, [r0, #0]
 80137ea:	f04f 30ff 	mov.w	r0, #4294967295
 80137ee:	bd38      	pop	{r3, r4, r5, pc}
 80137f0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80137f2:	b112      	cbz	r2, 80137fa <_raise_r+0x1e>
 80137f4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80137f8:	b94b      	cbnz	r3, 801380e <_raise_r+0x32>
 80137fa:	4628      	mov	r0, r5
 80137fc:	f000 f864 	bl	80138c8 <_getpid_r>
 8013800:	4622      	mov	r2, r4
 8013802:	4601      	mov	r1, r0
 8013804:	4628      	mov	r0, r5
 8013806:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801380a:	f000 b84b 	b.w	80138a4 <_kill_r>
 801380e:	2b01      	cmp	r3, #1
 8013810:	d00a      	beq.n	8013828 <_raise_r+0x4c>
 8013812:	1c59      	adds	r1, r3, #1
 8013814:	d103      	bne.n	801381e <_raise_r+0x42>
 8013816:	2316      	movs	r3, #22
 8013818:	6003      	str	r3, [r0, #0]
 801381a:	2001      	movs	r0, #1
 801381c:	e7e7      	b.n	80137ee <_raise_r+0x12>
 801381e:	2100      	movs	r1, #0
 8013820:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8013824:	4620      	mov	r0, r4
 8013826:	4798      	blx	r3
 8013828:	2000      	movs	r0, #0
 801382a:	e7e0      	b.n	80137ee <_raise_r+0x12>

0801382c <raise>:
 801382c:	4b02      	ldr	r3, [pc, #8]	@ (8013838 <raise+0xc>)
 801382e:	4601      	mov	r1, r0
 8013830:	6818      	ldr	r0, [r3, #0]
 8013832:	f7ff bfd3 	b.w	80137dc <_raise_r>
 8013836:	bf00      	nop
 8013838:	24000074 	.word	0x24000074

0801383c <_close_r>:
 801383c:	b538      	push	{r3, r4, r5, lr}
 801383e:	4d06      	ldr	r5, [pc, #24]	@ (8013858 <_close_r+0x1c>)
 8013840:	2300      	movs	r3, #0
 8013842:	4604      	mov	r4, r0
 8013844:	4608      	mov	r0, r1
 8013846:	602b      	str	r3, [r5, #0]
 8013848:	f7f1 f822 	bl	8004890 <_close>
 801384c:	1c43      	adds	r3, r0, #1
 801384e:	d102      	bne.n	8013856 <_close_r+0x1a>
 8013850:	682b      	ldr	r3, [r5, #0]
 8013852:	b103      	cbz	r3, 8013856 <_close_r+0x1a>
 8013854:	6023      	str	r3, [r4, #0]
 8013856:	bd38      	pop	{r3, r4, r5, pc}
 8013858:	24000ee4 	.word	0x24000ee4

0801385c <_lseek_r>:
 801385c:	b538      	push	{r3, r4, r5, lr}
 801385e:	4d07      	ldr	r5, [pc, #28]	@ (801387c <_lseek_r+0x20>)
 8013860:	4604      	mov	r4, r0
 8013862:	4608      	mov	r0, r1
 8013864:	4611      	mov	r1, r2
 8013866:	2200      	movs	r2, #0
 8013868:	602a      	str	r2, [r5, #0]
 801386a:	461a      	mov	r2, r3
 801386c:	f7f1 f837 	bl	80048de <_lseek>
 8013870:	1c43      	adds	r3, r0, #1
 8013872:	d102      	bne.n	801387a <_lseek_r+0x1e>
 8013874:	682b      	ldr	r3, [r5, #0]
 8013876:	b103      	cbz	r3, 801387a <_lseek_r+0x1e>
 8013878:	6023      	str	r3, [r4, #0]
 801387a:	bd38      	pop	{r3, r4, r5, pc}
 801387c:	24000ee4 	.word	0x24000ee4

08013880 <_read_r>:
 8013880:	b538      	push	{r3, r4, r5, lr}
 8013882:	4d07      	ldr	r5, [pc, #28]	@ (80138a0 <_read_r+0x20>)
 8013884:	4604      	mov	r4, r0
 8013886:	4608      	mov	r0, r1
 8013888:	4611      	mov	r1, r2
 801388a:	2200      	movs	r2, #0
 801388c:	602a      	str	r2, [r5, #0]
 801388e:	461a      	mov	r2, r3
 8013890:	f7f0 ffc5 	bl	800481e <_read>
 8013894:	1c43      	adds	r3, r0, #1
 8013896:	d102      	bne.n	801389e <_read_r+0x1e>
 8013898:	682b      	ldr	r3, [r5, #0]
 801389a:	b103      	cbz	r3, 801389e <_read_r+0x1e>
 801389c:	6023      	str	r3, [r4, #0]
 801389e:	bd38      	pop	{r3, r4, r5, pc}
 80138a0:	24000ee4 	.word	0x24000ee4

080138a4 <_kill_r>:
 80138a4:	b538      	push	{r3, r4, r5, lr}
 80138a6:	4d07      	ldr	r5, [pc, #28]	@ (80138c4 <_kill_r+0x20>)
 80138a8:	2300      	movs	r3, #0
 80138aa:	4604      	mov	r4, r0
 80138ac:	4608      	mov	r0, r1
 80138ae:	4611      	mov	r1, r2
 80138b0:	602b      	str	r3, [r5, #0]
 80138b2:	f7f0 ff99 	bl	80047e8 <_kill>
 80138b6:	1c43      	adds	r3, r0, #1
 80138b8:	d102      	bne.n	80138c0 <_kill_r+0x1c>
 80138ba:	682b      	ldr	r3, [r5, #0]
 80138bc:	b103      	cbz	r3, 80138c0 <_kill_r+0x1c>
 80138be:	6023      	str	r3, [r4, #0]
 80138c0:	bd38      	pop	{r3, r4, r5, pc}
 80138c2:	bf00      	nop
 80138c4:	24000ee4 	.word	0x24000ee4

080138c8 <_getpid_r>:
 80138c8:	f7f0 bf86 	b.w	80047d8 <_getpid>

080138cc <_sbrk_r>:
 80138cc:	b538      	push	{r3, r4, r5, lr}
 80138ce:	4d06      	ldr	r5, [pc, #24]	@ (80138e8 <_sbrk_r+0x1c>)
 80138d0:	2300      	movs	r3, #0
 80138d2:	4604      	mov	r4, r0
 80138d4:	4608      	mov	r0, r1
 80138d6:	602b      	str	r3, [r5, #0]
 80138d8:	f7f1 f80e 	bl	80048f8 <_sbrk>
 80138dc:	1c43      	adds	r3, r0, #1
 80138de:	d102      	bne.n	80138e6 <_sbrk_r+0x1a>
 80138e0:	682b      	ldr	r3, [r5, #0]
 80138e2:	b103      	cbz	r3, 80138e6 <_sbrk_r+0x1a>
 80138e4:	6023      	str	r3, [r4, #0]
 80138e6:	bd38      	pop	{r3, r4, r5, pc}
 80138e8:	24000ee4 	.word	0x24000ee4

080138ec <_write_r>:
 80138ec:	b538      	push	{r3, r4, r5, lr}
 80138ee:	4d07      	ldr	r5, [pc, #28]	@ (801390c <_write_r+0x20>)
 80138f0:	4604      	mov	r4, r0
 80138f2:	4608      	mov	r0, r1
 80138f4:	4611      	mov	r1, r2
 80138f6:	2200      	movs	r2, #0
 80138f8:	602a      	str	r2, [r5, #0]
 80138fa:	461a      	mov	r2, r3
 80138fc:	f7f0 ffac 	bl	8004858 <_write>
 8013900:	1c43      	adds	r3, r0, #1
 8013902:	d102      	bne.n	801390a <_write_r+0x1e>
 8013904:	682b      	ldr	r3, [r5, #0]
 8013906:	b103      	cbz	r3, 801390a <_write_r+0x1e>
 8013908:	6023      	str	r3, [r4, #0]
 801390a:	bd38      	pop	{r3, r4, r5, pc}
 801390c:	24000ee4 	.word	0x24000ee4

08013910 <__errno>:
 8013910:	4b01      	ldr	r3, [pc, #4]	@ (8013918 <__errno+0x8>)
 8013912:	6818      	ldr	r0, [r3, #0]
 8013914:	4770      	bx	lr
 8013916:	bf00      	nop
 8013918:	24000074 	.word	0x24000074

0801391c <__libc_init_array>:
 801391c:	b570      	push	{r4, r5, r6, lr}
 801391e:	4d0d      	ldr	r5, [pc, #52]	@ (8013954 <__libc_init_array+0x38>)
 8013920:	4c0d      	ldr	r4, [pc, #52]	@ (8013958 <__libc_init_array+0x3c>)
 8013922:	1b64      	subs	r4, r4, r5
 8013924:	10a4      	asrs	r4, r4, #2
 8013926:	2600      	movs	r6, #0
 8013928:	42a6      	cmp	r6, r4
 801392a:	d109      	bne.n	8013940 <__libc_init_array+0x24>
 801392c:	4d0b      	ldr	r5, [pc, #44]	@ (801395c <__libc_init_array+0x40>)
 801392e:	4c0c      	ldr	r4, [pc, #48]	@ (8013960 <__libc_init_array+0x44>)
 8013930:	f000 fca8 	bl	8014284 <_init>
 8013934:	1b64      	subs	r4, r4, r5
 8013936:	10a4      	asrs	r4, r4, #2
 8013938:	2600      	movs	r6, #0
 801393a:	42a6      	cmp	r6, r4
 801393c:	d105      	bne.n	801394a <__libc_init_array+0x2e>
 801393e:	bd70      	pop	{r4, r5, r6, pc}
 8013940:	f855 3b04 	ldr.w	r3, [r5], #4
 8013944:	4798      	blx	r3
 8013946:	3601      	adds	r6, #1
 8013948:	e7ee      	b.n	8013928 <__libc_init_array+0xc>
 801394a:	f855 3b04 	ldr.w	r3, [r5], #4
 801394e:	4798      	blx	r3
 8013950:	3601      	adds	r6, #1
 8013952:	e7f2      	b.n	801393a <__libc_init_array+0x1e>
 8013954:	08014a50 	.word	0x08014a50
 8013958:	08014a50 	.word	0x08014a50
 801395c:	08014a50 	.word	0x08014a50
 8013960:	08014a58 	.word	0x08014a58

08013964 <__retarget_lock_init_recursive>:
 8013964:	4770      	bx	lr

08013966 <__retarget_lock_acquire_recursive>:
 8013966:	4770      	bx	lr

08013968 <__retarget_lock_release_recursive>:
 8013968:	4770      	bx	lr

0801396a <memcpy>:
 801396a:	440a      	add	r2, r1
 801396c:	4291      	cmp	r1, r2
 801396e:	f100 33ff 	add.w	r3, r0, #4294967295
 8013972:	d100      	bne.n	8013976 <memcpy+0xc>
 8013974:	4770      	bx	lr
 8013976:	b510      	push	{r4, lr}
 8013978:	f811 4b01 	ldrb.w	r4, [r1], #1
 801397c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8013980:	4291      	cmp	r1, r2
 8013982:	d1f9      	bne.n	8013978 <memcpy+0xe>
 8013984:	bd10      	pop	{r4, pc}
	...

08013988 <_free_r>:
 8013988:	b538      	push	{r3, r4, r5, lr}
 801398a:	4605      	mov	r5, r0
 801398c:	2900      	cmp	r1, #0
 801398e:	d041      	beq.n	8013a14 <_free_r+0x8c>
 8013990:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013994:	1f0c      	subs	r4, r1, #4
 8013996:	2b00      	cmp	r3, #0
 8013998:	bfb8      	it	lt
 801399a:	18e4      	addlt	r4, r4, r3
 801399c:	f7ff fc88 	bl	80132b0 <__malloc_lock>
 80139a0:	4a1d      	ldr	r2, [pc, #116]	@ (8013a18 <_free_r+0x90>)
 80139a2:	6813      	ldr	r3, [r2, #0]
 80139a4:	b933      	cbnz	r3, 80139b4 <_free_r+0x2c>
 80139a6:	6063      	str	r3, [r4, #4]
 80139a8:	6014      	str	r4, [r2, #0]
 80139aa:	4628      	mov	r0, r5
 80139ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80139b0:	f7ff bc84 	b.w	80132bc <__malloc_unlock>
 80139b4:	42a3      	cmp	r3, r4
 80139b6:	d908      	bls.n	80139ca <_free_r+0x42>
 80139b8:	6820      	ldr	r0, [r4, #0]
 80139ba:	1821      	adds	r1, r4, r0
 80139bc:	428b      	cmp	r3, r1
 80139be:	bf01      	itttt	eq
 80139c0:	6819      	ldreq	r1, [r3, #0]
 80139c2:	685b      	ldreq	r3, [r3, #4]
 80139c4:	1809      	addeq	r1, r1, r0
 80139c6:	6021      	streq	r1, [r4, #0]
 80139c8:	e7ed      	b.n	80139a6 <_free_r+0x1e>
 80139ca:	461a      	mov	r2, r3
 80139cc:	685b      	ldr	r3, [r3, #4]
 80139ce:	b10b      	cbz	r3, 80139d4 <_free_r+0x4c>
 80139d0:	42a3      	cmp	r3, r4
 80139d2:	d9fa      	bls.n	80139ca <_free_r+0x42>
 80139d4:	6811      	ldr	r1, [r2, #0]
 80139d6:	1850      	adds	r0, r2, r1
 80139d8:	42a0      	cmp	r0, r4
 80139da:	d10b      	bne.n	80139f4 <_free_r+0x6c>
 80139dc:	6820      	ldr	r0, [r4, #0]
 80139de:	4401      	add	r1, r0
 80139e0:	1850      	adds	r0, r2, r1
 80139e2:	4283      	cmp	r3, r0
 80139e4:	6011      	str	r1, [r2, #0]
 80139e6:	d1e0      	bne.n	80139aa <_free_r+0x22>
 80139e8:	6818      	ldr	r0, [r3, #0]
 80139ea:	685b      	ldr	r3, [r3, #4]
 80139ec:	6053      	str	r3, [r2, #4]
 80139ee:	4408      	add	r0, r1
 80139f0:	6010      	str	r0, [r2, #0]
 80139f2:	e7da      	b.n	80139aa <_free_r+0x22>
 80139f4:	d902      	bls.n	80139fc <_free_r+0x74>
 80139f6:	230c      	movs	r3, #12
 80139f8:	602b      	str	r3, [r5, #0]
 80139fa:	e7d6      	b.n	80139aa <_free_r+0x22>
 80139fc:	6820      	ldr	r0, [r4, #0]
 80139fe:	1821      	adds	r1, r4, r0
 8013a00:	428b      	cmp	r3, r1
 8013a02:	bf04      	itt	eq
 8013a04:	6819      	ldreq	r1, [r3, #0]
 8013a06:	685b      	ldreq	r3, [r3, #4]
 8013a08:	6063      	str	r3, [r4, #4]
 8013a0a:	bf04      	itt	eq
 8013a0c:	1809      	addeq	r1, r1, r0
 8013a0e:	6021      	streq	r1, [r4, #0]
 8013a10:	6054      	str	r4, [r2, #4]
 8013a12:	e7ca      	b.n	80139aa <_free_r+0x22>
 8013a14:	bd38      	pop	{r3, r4, r5, pc}
 8013a16:	bf00      	nop
 8013a18:	24000da4 	.word	0x24000da4

08013a1c <__sfputc_r>:
 8013a1c:	6893      	ldr	r3, [r2, #8]
 8013a1e:	3b01      	subs	r3, #1
 8013a20:	2b00      	cmp	r3, #0
 8013a22:	b410      	push	{r4}
 8013a24:	6093      	str	r3, [r2, #8]
 8013a26:	da08      	bge.n	8013a3a <__sfputc_r+0x1e>
 8013a28:	6994      	ldr	r4, [r2, #24]
 8013a2a:	42a3      	cmp	r3, r4
 8013a2c:	db01      	blt.n	8013a32 <__sfputc_r+0x16>
 8013a2e:	290a      	cmp	r1, #10
 8013a30:	d103      	bne.n	8013a3a <__sfputc_r+0x1e>
 8013a32:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013a36:	f7ff be1a 	b.w	801366e <__swbuf_r>
 8013a3a:	6813      	ldr	r3, [r2, #0]
 8013a3c:	1c58      	adds	r0, r3, #1
 8013a3e:	6010      	str	r0, [r2, #0]
 8013a40:	7019      	strb	r1, [r3, #0]
 8013a42:	4608      	mov	r0, r1
 8013a44:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013a48:	4770      	bx	lr

08013a4a <__sfputs_r>:
 8013a4a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013a4c:	4606      	mov	r6, r0
 8013a4e:	460f      	mov	r7, r1
 8013a50:	4614      	mov	r4, r2
 8013a52:	18d5      	adds	r5, r2, r3
 8013a54:	42ac      	cmp	r4, r5
 8013a56:	d101      	bne.n	8013a5c <__sfputs_r+0x12>
 8013a58:	2000      	movs	r0, #0
 8013a5a:	e007      	b.n	8013a6c <__sfputs_r+0x22>
 8013a5c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013a60:	463a      	mov	r2, r7
 8013a62:	4630      	mov	r0, r6
 8013a64:	f7ff ffda 	bl	8013a1c <__sfputc_r>
 8013a68:	1c43      	adds	r3, r0, #1
 8013a6a:	d1f3      	bne.n	8013a54 <__sfputs_r+0xa>
 8013a6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08013a70 <_vfiprintf_r>:
 8013a70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013a74:	460d      	mov	r5, r1
 8013a76:	b09d      	sub	sp, #116	@ 0x74
 8013a78:	4614      	mov	r4, r2
 8013a7a:	4698      	mov	r8, r3
 8013a7c:	4606      	mov	r6, r0
 8013a7e:	b118      	cbz	r0, 8013a88 <_vfiprintf_r+0x18>
 8013a80:	6a03      	ldr	r3, [r0, #32]
 8013a82:	b90b      	cbnz	r3, 8013a88 <_vfiprintf_r+0x18>
 8013a84:	f7ff fd02 	bl	801348c <__sinit>
 8013a88:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8013a8a:	07d9      	lsls	r1, r3, #31
 8013a8c:	d405      	bmi.n	8013a9a <_vfiprintf_r+0x2a>
 8013a8e:	89ab      	ldrh	r3, [r5, #12]
 8013a90:	059a      	lsls	r2, r3, #22
 8013a92:	d402      	bmi.n	8013a9a <_vfiprintf_r+0x2a>
 8013a94:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8013a96:	f7ff ff66 	bl	8013966 <__retarget_lock_acquire_recursive>
 8013a9a:	89ab      	ldrh	r3, [r5, #12]
 8013a9c:	071b      	lsls	r3, r3, #28
 8013a9e:	d501      	bpl.n	8013aa4 <_vfiprintf_r+0x34>
 8013aa0:	692b      	ldr	r3, [r5, #16]
 8013aa2:	b99b      	cbnz	r3, 8013acc <_vfiprintf_r+0x5c>
 8013aa4:	4629      	mov	r1, r5
 8013aa6:	4630      	mov	r0, r6
 8013aa8:	f7ff fe20 	bl	80136ec <__swsetup_r>
 8013aac:	b170      	cbz	r0, 8013acc <_vfiprintf_r+0x5c>
 8013aae:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8013ab0:	07dc      	lsls	r4, r3, #31
 8013ab2:	d504      	bpl.n	8013abe <_vfiprintf_r+0x4e>
 8013ab4:	f04f 30ff 	mov.w	r0, #4294967295
 8013ab8:	b01d      	add	sp, #116	@ 0x74
 8013aba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013abe:	89ab      	ldrh	r3, [r5, #12]
 8013ac0:	0598      	lsls	r0, r3, #22
 8013ac2:	d4f7      	bmi.n	8013ab4 <_vfiprintf_r+0x44>
 8013ac4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8013ac6:	f7ff ff4f 	bl	8013968 <__retarget_lock_release_recursive>
 8013aca:	e7f3      	b.n	8013ab4 <_vfiprintf_r+0x44>
 8013acc:	2300      	movs	r3, #0
 8013ace:	9309      	str	r3, [sp, #36]	@ 0x24
 8013ad0:	2320      	movs	r3, #32
 8013ad2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8013ad6:	f8cd 800c 	str.w	r8, [sp, #12]
 8013ada:	2330      	movs	r3, #48	@ 0x30
 8013adc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8013c8c <_vfiprintf_r+0x21c>
 8013ae0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8013ae4:	f04f 0901 	mov.w	r9, #1
 8013ae8:	4623      	mov	r3, r4
 8013aea:	469a      	mov	sl, r3
 8013aec:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013af0:	b10a      	cbz	r2, 8013af6 <_vfiprintf_r+0x86>
 8013af2:	2a25      	cmp	r2, #37	@ 0x25
 8013af4:	d1f9      	bne.n	8013aea <_vfiprintf_r+0x7a>
 8013af6:	ebba 0b04 	subs.w	fp, sl, r4
 8013afa:	d00b      	beq.n	8013b14 <_vfiprintf_r+0xa4>
 8013afc:	465b      	mov	r3, fp
 8013afe:	4622      	mov	r2, r4
 8013b00:	4629      	mov	r1, r5
 8013b02:	4630      	mov	r0, r6
 8013b04:	f7ff ffa1 	bl	8013a4a <__sfputs_r>
 8013b08:	3001      	adds	r0, #1
 8013b0a:	f000 80a7 	beq.w	8013c5c <_vfiprintf_r+0x1ec>
 8013b0e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8013b10:	445a      	add	r2, fp
 8013b12:	9209      	str	r2, [sp, #36]	@ 0x24
 8013b14:	f89a 3000 	ldrb.w	r3, [sl]
 8013b18:	2b00      	cmp	r3, #0
 8013b1a:	f000 809f 	beq.w	8013c5c <_vfiprintf_r+0x1ec>
 8013b1e:	2300      	movs	r3, #0
 8013b20:	f04f 32ff 	mov.w	r2, #4294967295
 8013b24:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013b28:	f10a 0a01 	add.w	sl, sl, #1
 8013b2c:	9304      	str	r3, [sp, #16]
 8013b2e:	9307      	str	r3, [sp, #28]
 8013b30:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8013b34:	931a      	str	r3, [sp, #104]	@ 0x68
 8013b36:	4654      	mov	r4, sl
 8013b38:	2205      	movs	r2, #5
 8013b3a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013b3e:	4853      	ldr	r0, [pc, #332]	@ (8013c8c <_vfiprintf_r+0x21c>)
 8013b40:	f7ec fbde 	bl	8000300 <memchr>
 8013b44:	9a04      	ldr	r2, [sp, #16]
 8013b46:	b9d8      	cbnz	r0, 8013b80 <_vfiprintf_r+0x110>
 8013b48:	06d1      	lsls	r1, r2, #27
 8013b4a:	bf44      	itt	mi
 8013b4c:	2320      	movmi	r3, #32
 8013b4e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8013b52:	0713      	lsls	r3, r2, #28
 8013b54:	bf44      	itt	mi
 8013b56:	232b      	movmi	r3, #43	@ 0x2b
 8013b58:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8013b5c:	f89a 3000 	ldrb.w	r3, [sl]
 8013b60:	2b2a      	cmp	r3, #42	@ 0x2a
 8013b62:	d015      	beq.n	8013b90 <_vfiprintf_r+0x120>
 8013b64:	9a07      	ldr	r2, [sp, #28]
 8013b66:	4654      	mov	r4, sl
 8013b68:	2000      	movs	r0, #0
 8013b6a:	f04f 0c0a 	mov.w	ip, #10
 8013b6e:	4621      	mov	r1, r4
 8013b70:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013b74:	3b30      	subs	r3, #48	@ 0x30
 8013b76:	2b09      	cmp	r3, #9
 8013b78:	d94b      	bls.n	8013c12 <_vfiprintf_r+0x1a2>
 8013b7a:	b1b0      	cbz	r0, 8013baa <_vfiprintf_r+0x13a>
 8013b7c:	9207      	str	r2, [sp, #28]
 8013b7e:	e014      	b.n	8013baa <_vfiprintf_r+0x13a>
 8013b80:	eba0 0308 	sub.w	r3, r0, r8
 8013b84:	fa09 f303 	lsl.w	r3, r9, r3
 8013b88:	4313      	orrs	r3, r2
 8013b8a:	9304      	str	r3, [sp, #16]
 8013b8c:	46a2      	mov	sl, r4
 8013b8e:	e7d2      	b.n	8013b36 <_vfiprintf_r+0xc6>
 8013b90:	9b03      	ldr	r3, [sp, #12]
 8013b92:	1d19      	adds	r1, r3, #4
 8013b94:	681b      	ldr	r3, [r3, #0]
 8013b96:	9103      	str	r1, [sp, #12]
 8013b98:	2b00      	cmp	r3, #0
 8013b9a:	bfbb      	ittet	lt
 8013b9c:	425b      	neglt	r3, r3
 8013b9e:	f042 0202 	orrlt.w	r2, r2, #2
 8013ba2:	9307      	strge	r3, [sp, #28]
 8013ba4:	9307      	strlt	r3, [sp, #28]
 8013ba6:	bfb8      	it	lt
 8013ba8:	9204      	strlt	r2, [sp, #16]
 8013baa:	7823      	ldrb	r3, [r4, #0]
 8013bac:	2b2e      	cmp	r3, #46	@ 0x2e
 8013bae:	d10a      	bne.n	8013bc6 <_vfiprintf_r+0x156>
 8013bb0:	7863      	ldrb	r3, [r4, #1]
 8013bb2:	2b2a      	cmp	r3, #42	@ 0x2a
 8013bb4:	d132      	bne.n	8013c1c <_vfiprintf_r+0x1ac>
 8013bb6:	9b03      	ldr	r3, [sp, #12]
 8013bb8:	1d1a      	adds	r2, r3, #4
 8013bba:	681b      	ldr	r3, [r3, #0]
 8013bbc:	9203      	str	r2, [sp, #12]
 8013bbe:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8013bc2:	3402      	adds	r4, #2
 8013bc4:	9305      	str	r3, [sp, #20]
 8013bc6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8013c9c <_vfiprintf_r+0x22c>
 8013bca:	7821      	ldrb	r1, [r4, #0]
 8013bcc:	2203      	movs	r2, #3
 8013bce:	4650      	mov	r0, sl
 8013bd0:	f7ec fb96 	bl	8000300 <memchr>
 8013bd4:	b138      	cbz	r0, 8013be6 <_vfiprintf_r+0x176>
 8013bd6:	9b04      	ldr	r3, [sp, #16]
 8013bd8:	eba0 000a 	sub.w	r0, r0, sl
 8013bdc:	2240      	movs	r2, #64	@ 0x40
 8013bde:	4082      	lsls	r2, r0
 8013be0:	4313      	orrs	r3, r2
 8013be2:	3401      	adds	r4, #1
 8013be4:	9304      	str	r3, [sp, #16]
 8013be6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013bea:	4829      	ldr	r0, [pc, #164]	@ (8013c90 <_vfiprintf_r+0x220>)
 8013bec:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8013bf0:	2206      	movs	r2, #6
 8013bf2:	f7ec fb85 	bl	8000300 <memchr>
 8013bf6:	2800      	cmp	r0, #0
 8013bf8:	d03f      	beq.n	8013c7a <_vfiprintf_r+0x20a>
 8013bfa:	4b26      	ldr	r3, [pc, #152]	@ (8013c94 <_vfiprintf_r+0x224>)
 8013bfc:	bb1b      	cbnz	r3, 8013c46 <_vfiprintf_r+0x1d6>
 8013bfe:	9b03      	ldr	r3, [sp, #12]
 8013c00:	3307      	adds	r3, #7
 8013c02:	f023 0307 	bic.w	r3, r3, #7
 8013c06:	3308      	adds	r3, #8
 8013c08:	9303      	str	r3, [sp, #12]
 8013c0a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013c0c:	443b      	add	r3, r7
 8013c0e:	9309      	str	r3, [sp, #36]	@ 0x24
 8013c10:	e76a      	b.n	8013ae8 <_vfiprintf_r+0x78>
 8013c12:	fb0c 3202 	mla	r2, ip, r2, r3
 8013c16:	460c      	mov	r4, r1
 8013c18:	2001      	movs	r0, #1
 8013c1a:	e7a8      	b.n	8013b6e <_vfiprintf_r+0xfe>
 8013c1c:	2300      	movs	r3, #0
 8013c1e:	3401      	adds	r4, #1
 8013c20:	9305      	str	r3, [sp, #20]
 8013c22:	4619      	mov	r1, r3
 8013c24:	f04f 0c0a 	mov.w	ip, #10
 8013c28:	4620      	mov	r0, r4
 8013c2a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013c2e:	3a30      	subs	r2, #48	@ 0x30
 8013c30:	2a09      	cmp	r2, #9
 8013c32:	d903      	bls.n	8013c3c <_vfiprintf_r+0x1cc>
 8013c34:	2b00      	cmp	r3, #0
 8013c36:	d0c6      	beq.n	8013bc6 <_vfiprintf_r+0x156>
 8013c38:	9105      	str	r1, [sp, #20]
 8013c3a:	e7c4      	b.n	8013bc6 <_vfiprintf_r+0x156>
 8013c3c:	fb0c 2101 	mla	r1, ip, r1, r2
 8013c40:	4604      	mov	r4, r0
 8013c42:	2301      	movs	r3, #1
 8013c44:	e7f0      	b.n	8013c28 <_vfiprintf_r+0x1b8>
 8013c46:	ab03      	add	r3, sp, #12
 8013c48:	9300      	str	r3, [sp, #0]
 8013c4a:	462a      	mov	r2, r5
 8013c4c:	4b12      	ldr	r3, [pc, #72]	@ (8013c98 <_vfiprintf_r+0x228>)
 8013c4e:	a904      	add	r1, sp, #16
 8013c50:	4630      	mov	r0, r6
 8013c52:	f3af 8000 	nop.w
 8013c56:	4607      	mov	r7, r0
 8013c58:	1c78      	adds	r0, r7, #1
 8013c5a:	d1d6      	bne.n	8013c0a <_vfiprintf_r+0x19a>
 8013c5c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8013c5e:	07d9      	lsls	r1, r3, #31
 8013c60:	d405      	bmi.n	8013c6e <_vfiprintf_r+0x1fe>
 8013c62:	89ab      	ldrh	r3, [r5, #12]
 8013c64:	059a      	lsls	r2, r3, #22
 8013c66:	d402      	bmi.n	8013c6e <_vfiprintf_r+0x1fe>
 8013c68:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8013c6a:	f7ff fe7d 	bl	8013968 <__retarget_lock_release_recursive>
 8013c6e:	89ab      	ldrh	r3, [r5, #12]
 8013c70:	065b      	lsls	r3, r3, #25
 8013c72:	f53f af1f 	bmi.w	8013ab4 <_vfiprintf_r+0x44>
 8013c76:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8013c78:	e71e      	b.n	8013ab8 <_vfiprintf_r+0x48>
 8013c7a:	ab03      	add	r3, sp, #12
 8013c7c:	9300      	str	r3, [sp, #0]
 8013c7e:	462a      	mov	r2, r5
 8013c80:	4b05      	ldr	r3, [pc, #20]	@ (8013c98 <_vfiprintf_r+0x228>)
 8013c82:	a904      	add	r1, sp, #16
 8013c84:	4630      	mov	r0, r6
 8013c86:	f000 f879 	bl	8013d7c <_printf_i>
 8013c8a:	e7e4      	b.n	8013c56 <_vfiprintf_r+0x1e6>
 8013c8c:	08014a15 	.word	0x08014a15
 8013c90:	08014a1f 	.word	0x08014a1f
 8013c94:	00000000 	.word	0x00000000
 8013c98:	08013a4b 	.word	0x08013a4b
 8013c9c:	08014a1b 	.word	0x08014a1b

08013ca0 <_printf_common>:
 8013ca0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013ca4:	4616      	mov	r6, r2
 8013ca6:	4698      	mov	r8, r3
 8013ca8:	688a      	ldr	r2, [r1, #8]
 8013caa:	690b      	ldr	r3, [r1, #16]
 8013cac:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8013cb0:	4293      	cmp	r3, r2
 8013cb2:	bfb8      	it	lt
 8013cb4:	4613      	movlt	r3, r2
 8013cb6:	6033      	str	r3, [r6, #0]
 8013cb8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8013cbc:	4607      	mov	r7, r0
 8013cbe:	460c      	mov	r4, r1
 8013cc0:	b10a      	cbz	r2, 8013cc6 <_printf_common+0x26>
 8013cc2:	3301      	adds	r3, #1
 8013cc4:	6033      	str	r3, [r6, #0]
 8013cc6:	6823      	ldr	r3, [r4, #0]
 8013cc8:	0699      	lsls	r1, r3, #26
 8013cca:	bf42      	ittt	mi
 8013ccc:	6833      	ldrmi	r3, [r6, #0]
 8013cce:	3302      	addmi	r3, #2
 8013cd0:	6033      	strmi	r3, [r6, #0]
 8013cd2:	6825      	ldr	r5, [r4, #0]
 8013cd4:	f015 0506 	ands.w	r5, r5, #6
 8013cd8:	d106      	bne.n	8013ce8 <_printf_common+0x48>
 8013cda:	f104 0a19 	add.w	sl, r4, #25
 8013cde:	68e3      	ldr	r3, [r4, #12]
 8013ce0:	6832      	ldr	r2, [r6, #0]
 8013ce2:	1a9b      	subs	r3, r3, r2
 8013ce4:	42ab      	cmp	r3, r5
 8013ce6:	dc26      	bgt.n	8013d36 <_printf_common+0x96>
 8013ce8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8013cec:	6822      	ldr	r2, [r4, #0]
 8013cee:	3b00      	subs	r3, #0
 8013cf0:	bf18      	it	ne
 8013cf2:	2301      	movne	r3, #1
 8013cf4:	0692      	lsls	r2, r2, #26
 8013cf6:	d42b      	bmi.n	8013d50 <_printf_common+0xb0>
 8013cf8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8013cfc:	4641      	mov	r1, r8
 8013cfe:	4638      	mov	r0, r7
 8013d00:	47c8      	blx	r9
 8013d02:	3001      	adds	r0, #1
 8013d04:	d01e      	beq.n	8013d44 <_printf_common+0xa4>
 8013d06:	6823      	ldr	r3, [r4, #0]
 8013d08:	6922      	ldr	r2, [r4, #16]
 8013d0a:	f003 0306 	and.w	r3, r3, #6
 8013d0e:	2b04      	cmp	r3, #4
 8013d10:	bf02      	ittt	eq
 8013d12:	68e5      	ldreq	r5, [r4, #12]
 8013d14:	6833      	ldreq	r3, [r6, #0]
 8013d16:	1aed      	subeq	r5, r5, r3
 8013d18:	68a3      	ldr	r3, [r4, #8]
 8013d1a:	bf0c      	ite	eq
 8013d1c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8013d20:	2500      	movne	r5, #0
 8013d22:	4293      	cmp	r3, r2
 8013d24:	bfc4      	itt	gt
 8013d26:	1a9b      	subgt	r3, r3, r2
 8013d28:	18ed      	addgt	r5, r5, r3
 8013d2a:	2600      	movs	r6, #0
 8013d2c:	341a      	adds	r4, #26
 8013d2e:	42b5      	cmp	r5, r6
 8013d30:	d11a      	bne.n	8013d68 <_printf_common+0xc8>
 8013d32:	2000      	movs	r0, #0
 8013d34:	e008      	b.n	8013d48 <_printf_common+0xa8>
 8013d36:	2301      	movs	r3, #1
 8013d38:	4652      	mov	r2, sl
 8013d3a:	4641      	mov	r1, r8
 8013d3c:	4638      	mov	r0, r7
 8013d3e:	47c8      	blx	r9
 8013d40:	3001      	adds	r0, #1
 8013d42:	d103      	bne.n	8013d4c <_printf_common+0xac>
 8013d44:	f04f 30ff 	mov.w	r0, #4294967295
 8013d48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013d4c:	3501      	adds	r5, #1
 8013d4e:	e7c6      	b.n	8013cde <_printf_common+0x3e>
 8013d50:	18e1      	adds	r1, r4, r3
 8013d52:	1c5a      	adds	r2, r3, #1
 8013d54:	2030      	movs	r0, #48	@ 0x30
 8013d56:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8013d5a:	4422      	add	r2, r4
 8013d5c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8013d60:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8013d64:	3302      	adds	r3, #2
 8013d66:	e7c7      	b.n	8013cf8 <_printf_common+0x58>
 8013d68:	2301      	movs	r3, #1
 8013d6a:	4622      	mov	r2, r4
 8013d6c:	4641      	mov	r1, r8
 8013d6e:	4638      	mov	r0, r7
 8013d70:	47c8      	blx	r9
 8013d72:	3001      	adds	r0, #1
 8013d74:	d0e6      	beq.n	8013d44 <_printf_common+0xa4>
 8013d76:	3601      	adds	r6, #1
 8013d78:	e7d9      	b.n	8013d2e <_printf_common+0x8e>
	...

08013d7c <_printf_i>:
 8013d7c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8013d80:	7e0f      	ldrb	r7, [r1, #24]
 8013d82:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8013d84:	2f78      	cmp	r7, #120	@ 0x78
 8013d86:	4691      	mov	r9, r2
 8013d88:	4680      	mov	r8, r0
 8013d8a:	460c      	mov	r4, r1
 8013d8c:	469a      	mov	sl, r3
 8013d8e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8013d92:	d807      	bhi.n	8013da4 <_printf_i+0x28>
 8013d94:	2f62      	cmp	r7, #98	@ 0x62
 8013d96:	d80a      	bhi.n	8013dae <_printf_i+0x32>
 8013d98:	2f00      	cmp	r7, #0
 8013d9a:	f000 80d2 	beq.w	8013f42 <_printf_i+0x1c6>
 8013d9e:	2f58      	cmp	r7, #88	@ 0x58
 8013da0:	f000 80b9 	beq.w	8013f16 <_printf_i+0x19a>
 8013da4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8013da8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8013dac:	e03a      	b.n	8013e24 <_printf_i+0xa8>
 8013dae:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8013db2:	2b15      	cmp	r3, #21
 8013db4:	d8f6      	bhi.n	8013da4 <_printf_i+0x28>
 8013db6:	a101      	add	r1, pc, #4	@ (adr r1, 8013dbc <_printf_i+0x40>)
 8013db8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8013dbc:	08013e15 	.word	0x08013e15
 8013dc0:	08013e29 	.word	0x08013e29
 8013dc4:	08013da5 	.word	0x08013da5
 8013dc8:	08013da5 	.word	0x08013da5
 8013dcc:	08013da5 	.word	0x08013da5
 8013dd0:	08013da5 	.word	0x08013da5
 8013dd4:	08013e29 	.word	0x08013e29
 8013dd8:	08013da5 	.word	0x08013da5
 8013ddc:	08013da5 	.word	0x08013da5
 8013de0:	08013da5 	.word	0x08013da5
 8013de4:	08013da5 	.word	0x08013da5
 8013de8:	08013f29 	.word	0x08013f29
 8013dec:	08013e53 	.word	0x08013e53
 8013df0:	08013ee3 	.word	0x08013ee3
 8013df4:	08013da5 	.word	0x08013da5
 8013df8:	08013da5 	.word	0x08013da5
 8013dfc:	08013f4b 	.word	0x08013f4b
 8013e00:	08013da5 	.word	0x08013da5
 8013e04:	08013e53 	.word	0x08013e53
 8013e08:	08013da5 	.word	0x08013da5
 8013e0c:	08013da5 	.word	0x08013da5
 8013e10:	08013eeb 	.word	0x08013eeb
 8013e14:	6833      	ldr	r3, [r6, #0]
 8013e16:	1d1a      	adds	r2, r3, #4
 8013e18:	681b      	ldr	r3, [r3, #0]
 8013e1a:	6032      	str	r2, [r6, #0]
 8013e1c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8013e20:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8013e24:	2301      	movs	r3, #1
 8013e26:	e09d      	b.n	8013f64 <_printf_i+0x1e8>
 8013e28:	6833      	ldr	r3, [r6, #0]
 8013e2a:	6820      	ldr	r0, [r4, #0]
 8013e2c:	1d19      	adds	r1, r3, #4
 8013e2e:	6031      	str	r1, [r6, #0]
 8013e30:	0606      	lsls	r6, r0, #24
 8013e32:	d501      	bpl.n	8013e38 <_printf_i+0xbc>
 8013e34:	681d      	ldr	r5, [r3, #0]
 8013e36:	e003      	b.n	8013e40 <_printf_i+0xc4>
 8013e38:	0645      	lsls	r5, r0, #25
 8013e3a:	d5fb      	bpl.n	8013e34 <_printf_i+0xb8>
 8013e3c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8013e40:	2d00      	cmp	r5, #0
 8013e42:	da03      	bge.n	8013e4c <_printf_i+0xd0>
 8013e44:	232d      	movs	r3, #45	@ 0x2d
 8013e46:	426d      	negs	r5, r5
 8013e48:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8013e4c:	4859      	ldr	r0, [pc, #356]	@ (8013fb4 <_printf_i+0x238>)
 8013e4e:	230a      	movs	r3, #10
 8013e50:	e011      	b.n	8013e76 <_printf_i+0xfa>
 8013e52:	6821      	ldr	r1, [r4, #0]
 8013e54:	6833      	ldr	r3, [r6, #0]
 8013e56:	0608      	lsls	r0, r1, #24
 8013e58:	f853 5b04 	ldr.w	r5, [r3], #4
 8013e5c:	d402      	bmi.n	8013e64 <_printf_i+0xe8>
 8013e5e:	0649      	lsls	r1, r1, #25
 8013e60:	bf48      	it	mi
 8013e62:	b2ad      	uxthmi	r5, r5
 8013e64:	2f6f      	cmp	r7, #111	@ 0x6f
 8013e66:	4853      	ldr	r0, [pc, #332]	@ (8013fb4 <_printf_i+0x238>)
 8013e68:	6033      	str	r3, [r6, #0]
 8013e6a:	bf14      	ite	ne
 8013e6c:	230a      	movne	r3, #10
 8013e6e:	2308      	moveq	r3, #8
 8013e70:	2100      	movs	r1, #0
 8013e72:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8013e76:	6866      	ldr	r6, [r4, #4]
 8013e78:	60a6      	str	r6, [r4, #8]
 8013e7a:	2e00      	cmp	r6, #0
 8013e7c:	bfa2      	ittt	ge
 8013e7e:	6821      	ldrge	r1, [r4, #0]
 8013e80:	f021 0104 	bicge.w	r1, r1, #4
 8013e84:	6021      	strge	r1, [r4, #0]
 8013e86:	b90d      	cbnz	r5, 8013e8c <_printf_i+0x110>
 8013e88:	2e00      	cmp	r6, #0
 8013e8a:	d04b      	beq.n	8013f24 <_printf_i+0x1a8>
 8013e8c:	4616      	mov	r6, r2
 8013e8e:	fbb5 f1f3 	udiv	r1, r5, r3
 8013e92:	fb03 5711 	mls	r7, r3, r1, r5
 8013e96:	5dc7      	ldrb	r7, [r0, r7]
 8013e98:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8013e9c:	462f      	mov	r7, r5
 8013e9e:	42bb      	cmp	r3, r7
 8013ea0:	460d      	mov	r5, r1
 8013ea2:	d9f4      	bls.n	8013e8e <_printf_i+0x112>
 8013ea4:	2b08      	cmp	r3, #8
 8013ea6:	d10b      	bne.n	8013ec0 <_printf_i+0x144>
 8013ea8:	6823      	ldr	r3, [r4, #0]
 8013eaa:	07df      	lsls	r7, r3, #31
 8013eac:	d508      	bpl.n	8013ec0 <_printf_i+0x144>
 8013eae:	6923      	ldr	r3, [r4, #16]
 8013eb0:	6861      	ldr	r1, [r4, #4]
 8013eb2:	4299      	cmp	r1, r3
 8013eb4:	bfde      	ittt	le
 8013eb6:	2330      	movle	r3, #48	@ 0x30
 8013eb8:	f806 3c01 	strble.w	r3, [r6, #-1]
 8013ebc:	f106 36ff 	addle.w	r6, r6, #4294967295
 8013ec0:	1b92      	subs	r2, r2, r6
 8013ec2:	6122      	str	r2, [r4, #16]
 8013ec4:	f8cd a000 	str.w	sl, [sp]
 8013ec8:	464b      	mov	r3, r9
 8013eca:	aa03      	add	r2, sp, #12
 8013ecc:	4621      	mov	r1, r4
 8013ece:	4640      	mov	r0, r8
 8013ed0:	f7ff fee6 	bl	8013ca0 <_printf_common>
 8013ed4:	3001      	adds	r0, #1
 8013ed6:	d14a      	bne.n	8013f6e <_printf_i+0x1f2>
 8013ed8:	f04f 30ff 	mov.w	r0, #4294967295
 8013edc:	b004      	add	sp, #16
 8013ede:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013ee2:	6823      	ldr	r3, [r4, #0]
 8013ee4:	f043 0320 	orr.w	r3, r3, #32
 8013ee8:	6023      	str	r3, [r4, #0]
 8013eea:	4833      	ldr	r0, [pc, #204]	@ (8013fb8 <_printf_i+0x23c>)
 8013eec:	2778      	movs	r7, #120	@ 0x78
 8013eee:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8013ef2:	6823      	ldr	r3, [r4, #0]
 8013ef4:	6831      	ldr	r1, [r6, #0]
 8013ef6:	061f      	lsls	r7, r3, #24
 8013ef8:	f851 5b04 	ldr.w	r5, [r1], #4
 8013efc:	d402      	bmi.n	8013f04 <_printf_i+0x188>
 8013efe:	065f      	lsls	r7, r3, #25
 8013f00:	bf48      	it	mi
 8013f02:	b2ad      	uxthmi	r5, r5
 8013f04:	6031      	str	r1, [r6, #0]
 8013f06:	07d9      	lsls	r1, r3, #31
 8013f08:	bf44      	itt	mi
 8013f0a:	f043 0320 	orrmi.w	r3, r3, #32
 8013f0e:	6023      	strmi	r3, [r4, #0]
 8013f10:	b11d      	cbz	r5, 8013f1a <_printf_i+0x19e>
 8013f12:	2310      	movs	r3, #16
 8013f14:	e7ac      	b.n	8013e70 <_printf_i+0xf4>
 8013f16:	4827      	ldr	r0, [pc, #156]	@ (8013fb4 <_printf_i+0x238>)
 8013f18:	e7e9      	b.n	8013eee <_printf_i+0x172>
 8013f1a:	6823      	ldr	r3, [r4, #0]
 8013f1c:	f023 0320 	bic.w	r3, r3, #32
 8013f20:	6023      	str	r3, [r4, #0]
 8013f22:	e7f6      	b.n	8013f12 <_printf_i+0x196>
 8013f24:	4616      	mov	r6, r2
 8013f26:	e7bd      	b.n	8013ea4 <_printf_i+0x128>
 8013f28:	6833      	ldr	r3, [r6, #0]
 8013f2a:	6825      	ldr	r5, [r4, #0]
 8013f2c:	6961      	ldr	r1, [r4, #20]
 8013f2e:	1d18      	adds	r0, r3, #4
 8013f30:	6030      	str	r0, [r6, #0]
 8013f32:	062e      	lsls	r6, r5, #24
 8013f34:	681b      	ldr	r3, [r3, #0]
 8013f36:	d501      	bpl.n	8013f3c <_printf_i+0x1c0>
 8013f38:	6019      	str	r1, [r3, #0]
 8013f3a:	e002      	b.n	8013f42 <_printf_i+0x1c6>
 8013f3c:	0668      	lsls	r0, r5, #25
 8013f3e:	d5fb      	bpl.n	8013f38 <_printf_i+0x1bc>
 8013f40:	8019      	strh	r1, [r3, #0]
 8013f42:	2300      	movs	r3, #0
 8013f44:	6123      	str	r3, [r4, #16]
 8013f46:	4616      	mov	r6, r2
 8013f48:	e7bc      	b.n	8013ec4 <_printf_i+0x148>
 8013f4a:	6833      	ldr	r3, [r6, #0]
 8013f4c:	1d1a      	adds	r2, r3, #4
 8013f4e:	6032      	str	r2, [r6, #0]
 8013f50:	681e      	ldr	r6, [r3, #0]
 8013f52:	6862      	ldr	r2, [r4, #4]
 8013f54:	2100      	movs	r1, #0
 8013f56:	4630      	mov	r0, r6
 8013f58:	f7ec f9d2 	bl	8000300 <memchr>
 8013f5c:	b108      	cbz	r0, 8013f62 <_printf_i+0x1e6>
 8013f5e:	1b80      	subs	r0, r0, r6
 8013f60:	6060      	str	r0, [r4, #4]
 8013f62:	6863      	ldr	r3, [r4, #4]
 8013f64:	6123      	str	r3, [r4, #16]
 8013f66:	2300      	movs	r3, #0
 8013f68:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8013f6c:	e7aa      	b.n	8013ec4 <_printf_i+0x148>
 8013f6e:	6923      	ldr	r3, [r4, #16]
 8013f70:	4632      	mov	r2, r6
 8013f72:	4649      	mov	r1, r9
 8013f74:	4640      	mov	r0, r8
 8013f76:	47d0      	blx	sl
 8013f78:	3001      	adds	r0, #1
 8013f7a:	d0ad      	beq.n	8013ed8 <_printf_i+0x15c>
 8013f7c:	6823      	ldr	r3, [r4, #0]
 8013f7e:	079b      	lsls	r3, r3, #30
 8013f80:	d413      	bmi.n	8013faa <_printf_i+0x22e>
 8013f82:	68e0      	ldr	r0, [r4, #12]
 8013f84:	9b03      	ldr	r3, [sp, #12]
 8013f86:	4298      	cmp	r0, r3
 8013f88:	bfb8      	it	lt
 8013f8a:	4618      	movlt	r0, r3
 8013f8c:	e7a6      	b.n	8013edc <_printf_i+0x160>
 8013f8e:	2301      	movs	r3, #1
 8013f90:	4632      	mov	r2, r6
 8013f92:	4649      	mov	r1, r9
 8013f94:	4640      	mov	r0, r8
 8013f96:	47d0      	blx	sl
 8013f98:	3001      	adds	r0, #1
 8013f9a:	d09d      	beq.n	8013ed8 <_printf_i+0x15c>
 8013f9c:	3501      	adds	r5, #1
 8013f9e:	68e3      	ldr	r3, [r4, #12]
 8013fa0:	9903      	ldr	r1, [sp, #12]
 8013fa2:	1a5b      	subs	r3, r3, r1
 8013fa4:	42ab      	cmp	r3, r5
 8013fa6:	dcf2      	bgt.n	8013f8e <_printf_i+0x212>
 8013fa8:	e7eb      	b.n	8013f82 <_printf_i+0x206>
 8013faa:	2500      	movs	r5, #0
 8013fac:	f104 0619 	add.w	r6, r4, #25
 8013fb0:	e7f5      	b.n	8013f9e <_printf_i+0x222>
 8013fb2:	bf00      	nop
 8013fb4:	08014a26 	.word	0x08014a26
 8013fb8:	08014a37 	.word	0x08014a37

08013fbc <__sflush_r>:
 8013fbc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8013fc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013fc4:	0716      	lsls	r6, r2, #28
 8013fc6:	4605      	mov	r5, r0
 8013fc8:	460c      	mov	r4, r1
 8013fca:	d454      	bmi.n	8014076 <__sflush_r+0xba>
 8013fcc:	684b      	ldr	r3, [r1, #4]
 8013fce:	2b00      	cmp	r3, #0
 8013fd0:	dc02      	bgt.n	8013fd8 <__sflush_r+0x1c>
 8013fd2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8013fd4:	2b00      	cmp	r3, #0
 8013fd6:	dd48      	ble.n	801406a <__sflush_r+0xae>
 8013fd8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8013fda:	2e00      	cmp	r6, #0
 8013fdc:	d045      	beq.n	801406a <__sflush_r+0xae>
 8013fde:	2300      	movs	r3, #0
 8013fe0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8013fe4:	682f      	ldr	r7, [r5, #0]
 8013fe6:	6a21      	ldr	r1, [r4, #32]
 8013fe8:	602b      	str	r3, [r5, #0]
 8013fea:	d030      	beq.n	801404e <__sflush_r+0x92>
 8013fec:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8013fee:	89a3      	ldrh	r3, [r4, #12]
 8013ff0:	0759      	lsls	r1, r3, #29
 8013ff2:	d505      	bpl.n	8014000 <__sflush_r+0x44>
 8013ff4:	6863      	ldr	r3, [r4, #4]
 8013ff6:	1ad2      	subs	r2, r2, r3
 8013ff8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8013ffa:	b10b      	cbz	r3, 8014000 <__sflush_r+0x44>
 8013ffc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8013ffe:	1ad2      	subs	r2, r2, r3
 8014000:	2300      	movs	r3, #0
 8014002:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8014004:	6a21      	ldr	r1, [r4, #32]
 8014006:	4628      	mov	r0, r5
 8014008:	47b0      	blx	r6
 801400a:	1c43      	adds	r3, r0, #1
 801400c:	89a3      	ldrh	r3, [r4, #12]
 801400e:	d106      	bne.n	801401e <__sflush_r+0x62>
 8014010:	6829      	ldr	r1, [r5, #0]
 8014012:	291d      	cmp	r1, #29
 8014014:	d82b      	bhi.n	801406e <__sflush_r+0xb2>
 8014016:	4a2a      	ldr	r2, [pc, #168]	@ (80140c0 <__sflush_r+0x104>)
 8014018:	410a      	asrs	r2, r1
 801401a:	07d6      	lsls	r6, r2, #31
 801401c:	d427      	bmi.n	801406e <__sflush_r+0xb2>
 801401e:	2200      	movs	r2, #0
 8014020:	6062      	str	r2, [r4, #4]
 8014022:	04d9      	lsls	r1, r3, #19
 8014024:	6922      	ldr	r2, [r4, #16]
 8014026:	6022      	str	r2, [r4, #0]
 8014028:	d504      	bpl.n	8014034 <__sflush_r+0x78>
 801402a:	1c42      	adds	r2, r0, #1
 801402c:	d101      	bne.n	8014032 <__sflush_r+0x76>
 801402e:	682b      	ldr	r3, [r5, #0]
 8014030:	b903      	cbnz	r3, 8014034 <__sflush_r+0x78>
 8014032:	6560      	str	r0, [r4, #84]	@ 0x54
 8014034:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8014036:	602f      	str	r7, [r5, #0]
 8014038:	b1b9      	cbz	r1, 801406a <__sflush_r+0xae>
 801403a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801403e:	4299      	cmp	r1, r3
 8014040:	d002      	beq.n	8014048 <__sflush_r+0x8c>
 8014042:	4628      	mov	r0, r5
 8014044:	f7ff fca0 	bl	8013988 <_free_r>
 8014048:	2300      	movs	r3, #0
 801404a:	6363      	str	r3, [r4, #52]	@ 0x34
 801404c:	e00d      	b.n	801406a <__sflush_r+0xae>
 801404e:	2301      	movs	r3, #1
 8014050:	4628      	mov	r0, r5
 8014052:	47b0      	blx	r6
 8014054:	4602      	mov	r2, r0
 8014056:	1c50      	adds	r0, r2, #1
 8014058:	d1c9      	bne.n	8013fee <__sflush_r+0x32>
 801405a:	682b      	ldr	r3, [r5, #0]
 801405c:	2b00      	cmp	r3, #0
 801405e:	d0c6      	beq.n	8013fee <__sflush_r+0x32>
 8014060:	2b1d      	cmp	r3, #29
 8014062:	d001      	beq.n	8014068 <__sflush_r+0xac>
 8014064:	2b16      	cmp	r3, #22
 8014066:	d11e      	bne.n	80140a6 <__sflush_r+0xea>
 8014068:	602f      	str	r7, [r5, #0]
 801406a:	2000      	movs	r0, #0
 801406c:	e022      	b.n	80140b4 <__sflush_r+0xf8>
 801406e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8014072:	b21b      	sxth	r3, r3
 8014074:	e01b      	b.n	80140ae <__sflush_r+0xf2>
 8014076:	690f      	ldr	r7, [r1, #16]
 8014078:	2f00      	cmp	r7, #0
 801407a:	d0f6      	beq.n	801406a <__sflush_r+0xae>
 801407c:	0793      	lsls	r3, r2, #30
 801407e:	680e      	ldr	r6, [r1, #0]
 8014080:	bf08      	it	eq
 8014082:	694b      	ldreq	r3, [r1, #20]
 8014084:	600f      	str	r7, [r1, #0]
 8014086:	bf18      	it	ne
 8014088:	2300      	movne	r3, #0
 801408a:	eba6 0807 	sub.w	r8, r6, r7
 801408e:	608b      	str	r3, [r1, #8]
 8014090:	f1b8 0f00 	cmp.w	r8, #0
 8014094:	dde9      	ble.n	801406a <__sflush_r+0xae>
 8014096:	6a21      	ldr	r1, [r4, #32]
 8014098:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801409a:	4643      	mov	r3, r8
 801409c:	463a      	mov	r2, r7
 801409e:	4628      	mov	r0, r5
 80140a0:	47b0      	blx	r6
 80140a2:	2800      	cmp	r0, #0
 80140a4:	dc08      	bgt.n	80140b8 <__sflush_r+0xfc>
 80140a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80140aa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80140ae:	81a3      	strh	r3, [r4, #12]
 80140b0:	f04f 30ff 	mov.w	r0, #4294967295
 80140b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80140b8:	4407      	add	r7, r0
 80140ba:	eba8 0800 	sub.w	r8, r8, r0
 80140be:	e7e7      	b.n	8014090 <__sflush_r+0xd4>
 80140c0:	dfbffffe 	.word	0xdfbffffe

080140c4 <_fflush_r>:
 80140c4:	b538      	push	{r3, r4, r5, lr}
 80140c6:	690b      	ldr	r3, [r1, #16]
 80140c8:	4605      	mov	r5, r0
 80140ca:	460c      	mov	r4, r1
 80140cc:	b913      	cbnz	r3, 80140d4 <_fflush_r+0x10>
 80140ce:	2500      	movs	r5, #0
 80140d0:	4628      	mov	r0, r5
 80140d2:	bd38      	pop	{r3, r4, r5, pc}
 80140d4:	b118      	cbz	r0, 80140de <_fflush_r+0x1a>
 80140d6:	6a03      	ldr	r3, [r0, #32]
 80140d8:	b90b      	cbnz	r3, 80140de <_fflush_r+0x1a>
 80140da:	f7ff f9d7 	bl	801348c <__sinit>
 80140de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80140e2:	2b00      	cmp	r3, #0
 80140e4:	d0f3      	beq.n	80140ce <_fflush_r+0xa>
 80140e6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80140e8:	07d0      	lsls	r0, r2, #31
 80140ea:	d404      	bmi.n	80140f6 <_fflush_r+0x32>
 80140ec:	0599      	lsls	r1, r3, #22
 80140ee:	d402      	bmi.n	80140f6 <_fflush_r+0x32>
 80140f0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80140f2:	f7ff fc38 	bl	8013966 <__retarget_lock_acquire_recursive>
 80140f6:	4628      	mov	r0, r5
 80140f8:	4621      	mov	r1, r4
 80140fa:	f7ff ff5f 	bl	8013fbc <__sflush_r>
 80140fe:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8014100:	07da      	lsls	r2, r3, #31
 8014102:	4605      	mov	r5, r0
 8014104:	d4e4      	bmi.n	80140d0 <_fflush_r+0xc>
 8014106:	89a3      	ldrh	r3, [r4, #12]
 8014108:	059b      	lsls	r3, r3, #22
 801410a:	d4e1      	bmi.n	80140d0 <_fflush_r+0xc>
 801410c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801410e:	f7ff fc2b 	bl	8013968 <__retarget_lock_release_recursive>
 8014112:	e7dd      	b.n	80140d0 <_fflush_r+0xc>

08014114 <__swhatbuf_r>:
 8014114:	b570      	push	{r4, r5, r6, lr}
 8014116:	460c      	mov	r4, r1
 8014118:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801411c:	2900      	cmp	r1, #0
 801411e:	b096      	sub	sp, #88	@ 0x58
 8014120:	4615      	mov	r5, r2
 8014122:	461e      	mov	r6, r3
 8014124:	da0d      	bge.n	8014142 <__swhatbuf_r+0x2e>
 8014126:	89a3      	ldrh	r3, [r4, #12]
 8014128:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801412c:	f04f 0100 	mov.w	r1, #0
 8014130:	bf14      	ite	ne
 8014132:	2340      	movne	r3, #64	@ 0x40
 8014134:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8014138:	2000      	movs	r0, #0
 801413a:	6031      	str	r1, [r6, #0]
 801413c:	602b      	str	r3, [r5, #0]
 801413e:	b016      	add	sp, #88	@ 0x58
 8014140:	bd70      	pop	{r4, r5, r6, pc}
 8014142:	466a      	mov	r2, sp
 8014144:	f000 f87c 	bl	8014240 <_fstat_r>
 8014148:	2800      	cmp	r0, #0
 801414a:	dbec      	blt.n	8014126 <__swhatbuf_r+0x12>
 801414c:	9901      	ldr	r1, [sp, #4]
 801414e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8014152:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8014156:	4259      	negs	r1, r3
 8014158:	4159      	adcs	r1, r3
 801415a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801415e:	e7eb      	b.n	8014138 <__swhatbuf_r+0x24>

08014160 <__smakebuf_r>:
 8014160:	898b      	ldrh	r3, [r1, #12]
 8014162:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8014164:	079d      	lsls	r5, r3, #30
 8014166:	4606      	mov	r6, r0
 8014168:	460c      	mov	r4, r1
 801416a:	d507      	bpl.n	801417c <__smakebuf_r+0x1c>
 801416c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8014170:	6023      	str	r3, [r4, #0]
 8014172:	6123      	str	r3, [r4, #16]
 8014174:	2301      	movs	r3, #1
 8014176:	6163      	str	r3, [r4, #20]
 8014178:	b003      	add	sp, #12
 801417a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801417c:	ab01      	add	r3, sp, #4
 801417e:	466a      	mov	r2, sp
 8014180:	f7ff ffc8 	bl	8014114 <__swhatbuf_r>
 8014184:	9f00      	ldr	r7, [sp, #0]
 8014186:	4605      	mov	r5, r0
 8014188:	4639      	mov	r1, r7
 801418a:	4630      	mov	r0, r6
 801418c:	f7ff f810 	bl	80131b0 <_malloc_r>
 8014190:	b948      	cbnz	r0, 80141a6 <__smakebuf_r+0x46>
 8014192:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014196:	059a      	lsls	r2, r3, #22
 8014198:	d4ee      	bmi.n	8014178 <__smakebuf_r+0x18>
 801419a:	f023 0303 	bic.w	r3, r3, #3
 801419e:	f043 0302 	orr.w	r3, r3, #2
 80141a2:	81a3      	strh	r3, [r4, #12]
 80141a4:	e7e2      	b.n	801416c <__smakebuf_r+0xc>
 80141a6:	89a3      	ldrh	r3, [r4, #12]
 80141a8:	6020      	str	r0, [r4, #0]
 80141aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80141ae:	81a3      	strh	r3, [r4, #12]
 80141b0:	9b01      	ldr	r3, [sp, #4]
 80141b2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80141b6:	b15b      	cbz	r3, 80141d0 <__smakebuf_r+0x70>
 80141b8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80141bc:	4630      	mov	r0, r6
 80141be:	f000 f851 	bl	8014264 <_isatty_r>
 80141c2:	b128      	cbz	r0, 80141d0 <__smakebuf_r+0x70>
 80141c4:	89a3      	ldrh	r3, [r4, #12]
 80141c6:	f023 0303 	bic.w	r3, r3, #3
 80141ca:	f043 0301 	orr.w	r3, r3, #1
 80141ce:	81a3      	strh	r3, [r4, #12]
 80141d0:	89a3      	ldrh	r3, [r4, #12]
 80141d2:	431d      	orrs	r5, r3
 80141d4:	81a5      	strh	r5, [r4, #12]
 80141d6:	e7cf      	b.n	8014178 <__smakebuf_r+0x18>

080141d8 <_putc_r>:
 80141d8:	b570      	push	{r4, r5, r6, lr}
 80141da:	460d      	mov	r5, r1
 80141dc:	4614      	mov	r4, r2
 80141de:	4606      	mov	r6, r0
 80141e0:	b118      	cbz	r0, 80141ea <_putc_r+0x12>
 80141e2:	6a03      	ldr	r3, [r0, #32]
 80141e4:	b90b      	cbnz	r3, 80141ea <_putc_r+0x12>
 80141e6:	f7ff f951 	bl	801348c <__sinit>
 80141ea:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80141ec:	07d8      	lsls	r0, r3, #31
 80141ee:	d405      	bmi.n	80141fc <_putc_r+0x24>
 80141f0:	89a3      	ldrh	r3, [r4, #12]
 80141f2:	0599      	lsls	r1, r3, #22
 80141f4:	d402      	bmi.n	80141fc <_putc_r+0x24>
 80141f6:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80141f8:	f7ff fbb5 	bl	8013966 <__retarget_lock_acquire_recursive>
 80141fc:	68a3      	ldr	r3, [r4, #8]
 80141fe:	3b01      	subs	r3, #1
 8014200:	2b00      	cmp	r3, #0
 8014202:	60a3      	str	r3, [r4, #8]
 8014204:	da05      	bge.n	8014212 <_putc_r+0x3a>
 8014206:	69a2      	ldr	r2, [r4, #24]
 8014208:	4293      	cmp	r3, r2
 801420a:	db12      	blt.n	8014232 <_putc_r+0x5a>
 801420c:	b2eb      	uxtb	r3, r5
 801420e:	2b0a      	cmp	r3, #10
 8014210:	d00f      	beq.n	8014232 <_putc_r+0x5a>
 8014212:	6823      	ldr	r3, [r4, #0]
 8014214:	1c5a      	adds	r2, r3, #1
 8014216:	6022      	str	r2, [r4, #0]
 8014218:	701d      	strb	r5, [r3, #0]
 801421a:	b2ed      	uxtb	r5, r5
 801421c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801421e:	07da      	lsls	r2, r3, #31
 8014220:	d405      	bmi.n	801422e <_putc_r+0x56>
 8014222:	89a3      	ldrh	r3, [r4, #12]
 8014224:	059b      	lsls	r3, r3, #22
 8014226:	d402      	bmi.n	801422e <_putc_r+0x56>
 8014228:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801422a:	f7ff fb9d 	bl	8013968 <__retarget_lock_release_recursive>
 801422e:	4628      	mov	r0, r5
 8014230:	bd70      	pop	{r4, r5, r6, pc}
 8014232:	4629      	mov	r1, r5
 8014234:	4622      	mov	r2, r4
 8014236:	4630      	mov	r0, r6
 8014238:	f7ff fa19 	bl	801366e <__swbuf_r>
 801423c:	4605      	mov	r5, r0
 801423e:	e7ed      	b.n	801421c <_putc_r+0x44>

08014240 <_fstat_r>:
 8014240:	b538      	push	{r3, r4, r5, lr}
 8014242:	4d07      	ldr	r5, [pc, #28]	@ (8014260 <_fstat_r+0x20>)
 8014244:	2300      	movs	r3, #0
 8014246:	4604      	mov	r4, r0
 8014248:	4608      	mov	r0, r1
 801424a:	4611      	mov	r1, r2
 801424c:	602b      	str	r3, [r5, #0]
 801424e:	f7f0 fb2b 	bl	80048a8 <_fstat>
 8014252:	1c43      	adds	r3, r0, #1
 8014254:	d102      	bne.n	801425c <_fstat_r+0x1c>
 8014256:	682b      	ldr	r3, [r5, #0]
 8014258:	b103      	cbz	r3, 801425c <_fstat_r+0x1c>
 801425a:	6023      	str	r3, [r4, #0]
 801425c:	bd38      	pop	{r3, r4, r5, pc}
 801425e:	bf00      	nop
 8014260:	24000ee4 	.word	0x24000ee4

08014264 <_isatty_r>:
 8014264:	b538      	push	{r3, r4, r5, lr}
 8014266:	4d06      	ldr	r5, [pc, #24]	@ (8014280 <_isatty_r+0x1c>)
 8014268:	2300      	movs	r3, #0
 801426a:	4604      	mov	r4, r0
 801426c:	4608      	mov	r0, r1
 801426e:	602b      	str	r3, [r5, #0]
 8014270:	f7f0 fb2a 	bl	80048c8 <_isatty>
 8014274:	1c43      	adds	r3, r0, #1
 8014276:	d102      	bne.n	801427e <_isatty_r+0x1a>
 8014278:	682b      	ldr	r3, [r5, #0]
 801427a:	b103      	cbz	r3, 801427e <_isatty_r+0x1a>
 801427c:	6023      	str	r3, [r4, #0]
 801427e:	bd38      	pop	{r3, r4, r5, pc}
 8014280:	24000ee4 	.word	0x24000ee4

08014284 <_init>:
 8014284:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014286:	bf00      	nop
 8014288:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801428a:	bc08      	pop	{r3}
 801428c:	469e      	mov	lr, r3
 801428e:	4770      	bx	lr

08014290 <_fini>:
 8014290:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014292:	bf00      	nop
 8014294:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014296:	bc08      	pop	{r3}
 8014298:	469e      	mov	lr, r3
 801429a:	4770      	bx	lr
