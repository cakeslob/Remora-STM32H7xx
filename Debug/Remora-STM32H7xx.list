
Remora-STM32H7xx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014168  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008cc  08014408  08014408  00015408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08014cd4  08014cd4  00015cd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000008  08014cdc  08014cdc  00015cdc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000008  08014ce4  08014ce4  00015ce4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000000c4  24000000  08014cec  00016000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000df8  240000e0  08014db0  000160e0  2**5
                  ALLOC
  8 ._user_heap_stack 00000600  24000ed8  08014db0  00016ed8  2**0
                  ALLOC
  9 .dma_buffers  00000000  30000000  30000000  000160c4  2**0
                  CONTENTS
 10 .ARM.attributes 0000002e  00000000  00000000  000160c4  2**0
                  CONTENTS, READONLY
 11 .debug_info   00057a11  00000000  00000000  000160f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00007a8e  00000000  00000000  0006db03  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00001e18  00000000  00000000  00075598  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 00001715  00000000  00000000  000773b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0004302b  00000000  00000000  00078ac5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   000324b2  00000000  00000000  000bbaf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00182563  00000000  00000000  000edfa2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  00270505  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00009fb0  00000000  00000000  00270548  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line_str 00000069  00000000  00000000  0027a4f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240000e0 	.word	0x240000e0
 80002bc:	00000000 	.word	0x00000000
 80002c0:	080143f0 	.word	0x080143f0

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240000e4 	.word	0x240000e4
 80002dc:	080143f0 	.word	0x080143f0

080002e0 <strcmp>:
 80002e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80002e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002e8:	2a01      	cmp	r2, #1
 80002ea:	bf28      	it	cs
 80002ec:	429a      	cmpcs	r2, r3
 80002ee:	d0f7      	beq.n	80002e0 <strcmp>
 80002f0:	1ad0      	subs	r0, r2, r3
 80002f2:	4770      	bx	lr
	...

08000300 <memchr>:
 8000300:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000304:	2a10      	cmp	r2, #16
 8000306:	db2b      	blt.n	8000360 <memchr+0x60>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	d008      	beq.n	8000320 <memchr+0x20>
 800030e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000312:	3a01      	subs	r2, #1
 8000314:	428b      	cmp	r3, r1
 8000316:	d02d      	beq.n	8000374 <memchr+0x74>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	b342      	cbz	r2, 8000370 <memchr+0x70>
 800031e:	d1f6      	bne.n	800030e <memchr+0xe>
 8000320:	b4f0      	push	{r4, r5, r6, r7}
 8000322:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000326:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800032a:	f022 0407 	bic.w	r4, r2, #7
 800032e:	f07f 0700 	mvns.w	r7, #0
 8000332:	2300      	movs	r3, #0
 8000334:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000338:	3c08      	subs	r4, #8
 800033a:	ea85 0501 	eor.w	r5, r5, r1
 800033e:	ea86 0601 	eor.w	r6, r6, r1
 8000342:	fa85 f547 	uadd8	r5, r5, r7
 8000346:	faa3 f587 	sel	r5, r3, r7
 800034a:	fa86 f647 	uadd8	r6, r6, r7
 800034e:	faa5 f687 	sel	r6, r5, r7
 8000352:	b98e      	cbnz	r6, 8000378 <memchr+0x78>
 8000354:	d1ee      	bne.n	8000334 <memchr+0x34>
 8000356:	bcf0      	pop	{r4, r5, r6, r7}
 8000358:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800035c:	f002 0207 	and.w	r2, r2, #7
 8000360:	b132      	cbz	r2, 8000370 <memchr+0x70>
 8000362:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000366:	3a01      	subs	r2, #1
 8000368:	ea83 0301 	eor.w	r3, r3, r1
 800036c:	b113      	cbz	r3, 8000374 <memchr+0x74>
 800036e:	d1f8      	bne.n	8000362 <memchr+0x62>
 8000370:	2000      	movs	r0, #0
 8000372:	4770      	bx	lr
 8000374:	3801      	subs	r0, #1
 8000376:	4770      	bx	lr
 8000378:	2d00      	cmp	r5, #0
 800037a:	bf06      	itte	eq
 800037c:	4635      	moveq	r5, r6
 800037e:	3803      	subeq	r0, #3
 8000380:	3807      	subne	r0, #7
 8000382:	f015 0f01 	tst.w	r5, #1
 8000386:	d107      	bne.n	8000398 <memchr+0x98>
 8000388:	3001      	adds	r0, #1
 800038a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800038e:	bf02      	ittt	eq
 8000390:	3001      	addeq	r0, #1
 8000392:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000396:	3001      	addeq	r0, #1
 8000398:	bcf0      	pop	{r4, r5, r6, r7}
 800039a:	3801      	subs	r0, #1
 800039c:	4770      	bx	lr
 800039e:	bf00      	nop

080003a0 <strlen>:
 80003a0:	4603      	mov	r3, r0
 80003a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80003a6:	2a00      	cmp	r2, #0
 80003a8:	d1fb      	bne.n	80003a2 <strlen+0x2>
 80003aa:	1a18      	subs	r0, r3, r0
 80003ac:	3801      	subs	r0, #1
 80003ae:	4770      	bx	lr

080003b0 <__aeabi_drsub>:
 80003b0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80003b4:	e002      	b.n	80003bc <__adddf3>
 80003b6:	bf00      	nop

080003b8 <__aeabi_dsub>:
 80003b8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080003bc <__adddf3>:
 80003bc:	b530      	push	{r4, r5, lr}
 80003be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003c6:	ea94 0f05 	teq	r4, r5
 80003ca:	bf08      	it	eq
 80003cc:	ea90 0f02 	teqeq	r0, r2
 80003d0:	bf1f      	itttt	ne
 80003d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003e2:	f000 80e2 	beq.w	80005aa <__adddf3+0x1ee>
 80003e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003ee:	bfb8      	it	lt
 80003f0:	426d      	neglt	r5, r5
 80003f2:	dd0c      	ble.n	800040e <__adddf3+0x52>
 80003f4:	442c      	add	r4, r5
 80003f6:	ea80 0202 	eor.w	r2, r0, r2
 80003fa:	ea81 0303 	eor.w	r3, r1, r3
 80003fe:	ea82 0000 	eor.w	r0, r2, r0
 8000402:	ea83 0101 	eor.w	r1, r3, r1
 8000406:	ea80 0202 	eor.w	r2, r0, r2
 800040a:	ea81 0303 	eor.w	r3, r1, r3
 800040e:	2d36      	cmp	r5, #54	@ 0x36
 8000410:	bf88      	it	hi
 8000412:	bd30      	pophi	{r4, r5, pc}
 8000414:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000418:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800041c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000420:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000424:	d002      	beq.n	800042c <__adddf3+0x70>
 8000426:	4240      	negs	r0, r0
 8000428:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800042c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000430:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000434:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000438:	d002      	beq.n	8000440 <__adddf3+0x84>
 800043a:	4252      	negs	r2, r2
 800043c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000440:	ea94 0f05 	teq	r4, r5
 8000444:	f000 80a7 	beq.w	8000596 <__adddf3+0x1da>
 8000448:	f1a4 0401 	sub.w	r4, r4, #1
 800044c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000450:	db0d      	blt.n	800046e <__adddf3+0xb2>
 8000452:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000456:	fa22 f205 	lsr.w	r2, r2, r5
 800045a:	1880      	adds	r0, r0, r2
 800045c:	f141 0100 	adc.w	r1, r1, #0
 8000460:	fa03 f20e 	lsl.w	r2, r3, lr
 8000464:	1880      	adds	r0, r0, r2
 8000466:	fa43 f305 	asr.w	r3, r3, r5
 800046a:	4159      	adcs	r1, r3
 800046c:	e00e      	b.n	800048c <__adddf3+0xd0>
 800046e:	f1a5 0520 	sub.w	r5, r5, #32
 8000472:	f10e 0e20 	add.w	lr, lr, #32
 8000476:	2a01      	cmp	r2, #1
 8000478:	fa03 fc0e 	lsl.w	ip, r3, lr
 800047c:	bf28      	it	cs
 800047e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000482:	fa43 f305 	asr.w	r3, r3, r5
 8000486:	18c0      	adds	r0, r0, r3
 8000488:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800048c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000490:	d507      	bpl.n	80004a2 <__adddf3+0xe6>
 8000492:	f04f 0e00 	mov.w	lr, #0
 8000496:	f1dc 0c00 	rsbs	ip, ip, #0
 800049a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800049e:	eb6e 0101 	sbc.w	r1, lr, r1
 80004a2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80004a6:	d31b      	bcc.n	80004e0 <__adddf3+0x124>
 80004a8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80004ac:	d30c      	bcc.n	80004c8 <__adddf3+0x10c>
 80004ae:	0849      	lsrs	r1, r1, #1
 80004b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80004b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004b8:	f104 0401 	add.w	r4, r4, #1
 80004bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004c0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80004c4:	f080 809a 	bcs.w	80005fc <__adddf3+0x240>
 80004c8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004cc:	bf08      	it	eq
 80004ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004d2:	f150 0000 	adcs.w	r0, r0, #0
 80004d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004da:	ea41 0105 	orr.w	r1, r1, r5
 80004de:	bd30      	pop	{r4, r5, pc}
 80004e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004e4:	4140      	adcs	r0, r0
 80004e6:	eb41 0101 	adc.w	r1, r1, r1
 80004ea:	3c01      	subs	r4, #1
 80004ec:	bf28      	it	cs
 80004ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80004f2:	d2e9      	bcs.n	80004c8 <__adddf3+0x10c>
 80004f4:	f091 0f00 	teq	r1, #0
 80004f8:	bf04      	itt	eq
 80004fa:	4601      	moveq	r1, r0
 80004fc:	2000      	moveq	r0, #0
 80004fe:	fab1 f381 	clz	r3, r1
 8000502:	bf08      	it	eq
 8000504:	3320      	addeq	r3, #32
 8000506:	f1a3 030b 	sub.w	r3, r3, #11
 800050a:	f1b3 0220 	subs.w	r2, r3, #32
 800050e:	da0c      	bge.n	800052a <__adddf3+0x16e>
 8000510:	320c      	adds	r2, #12
 8000512:	dd08      	ble.n	8000526 <__adddf3+0x16a>
 8000514:	f102 0c14 	add.w	ip, r2, #20
 8000518:	f1c2 020c 	rsb	r2, r2, #12
 800051c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000520:	fa21 f102 	lsr.w	r1, r1, r2
 8000524:	e00c      	b.n	8000540 <__adddf3+0x184>
 8000526:	f102 0214 	add.w	r2, r2, #20
 800052a:	bfd8      	it	le
 800052c:	f1c2 0c20 	rsble	ip, r2, #32
 8000530:	fa01 f102 	lsl.w	r1, r1, r2
 8000534:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000538:	bfdc      	itt	le
 800053a:	ea41 010c 	orrle.w	r1, r1, ip
 800053e:	4090      	lslle	r0, r2
 8000540:	1ae4      	subs	r4, r4, r3
 8000542:	bfa2      	ittt	ge
 8000544:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000548:	4329      	orrge	r1, r5
 800054a:	bd30      	popge	{r4, r5, pc}
 800054c:	ea6f 0404 	mvn.w	r4, r4
 8000550:	3c1f      	subs	r4, #31
 8000552:	da1c      	bge.n	800058e <__adddf3+0x1d2>
 8000554:	340c      	adds	r4, #12
 8000556:	dc0e      	bgt.n	8000576 <__adddf3+0x1ba>
 8000558:	f104 0414 	add.w	r4, r4, #20
 800055c:	f1c4 0220 	rsb	r2, r4, #32
 8000560:	fa20 f004 	lsr.w	r0, r0, r4
 8000564:	fa01 f302 	lsl.w	r3, r1, r2
 8000568:	ea40 0003 	orr.w	r0, r0, r3
 800056c:	fa21 f304 	lsr.w	r3, r1, r4
 8000570:	ea45 0103 	orr.w	r1, r5, r3
 8000574:	bd30      	pop	{r4, r5, pc}
 8000576:	f1c4 040c 	rsb	r4, r4, #12
 800057a:	f1c4 0220 	rsb	r2, r4, #32
 800057e:	fa20 f002 	lsr.w	r0, r0, r2
 8000582:	fa01 f304 	lsl.w	r3, r1, r4
 8000586:	ea40 0003 	orr.w	r0, r0, r3
 800058a:	4629      	mov	r1, r5
 800058c:	bd30      	pop	{r4, r5, pc}
 800058e:	fa21 f004 	lsr.w	r0, r1, r4
 8000592:	4629      	mov	r1, r5
 8000594:	bd30      	pop	{r4, r5, pc}
 8000596:	f094 0f00 	teq	r4, #0
 800059a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800059e:	bf06      	itte	eq
 80005a0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80005a4:	3401      	addeq	r4, #1
 80005a6:	3d01      	subne	r5, #1
 80005a8:	e74e      	b.n	8000448 <__adddf3+0x8c>
 80005aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ae:	bf18      	it	ne
 80005b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005b4:	d029      	beq.n	800060a <__adddf3+0x24e>
 80005b6:	ea94 0f05 	teq	r4, r5
 80005ba:	bf08      	it	eq
 80005bc:	ea90 0f02 	teqeq	r0, r2
 80005c0:	d005      	beq.n	80005ce <__adddf3+0x212>
 80005c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005c6:	bf04      	itt	eq
 80005c8:	4619      	moveq	r1, r3
 80005ca:	4610      	moveq	r0, r2
 80005cc:	bd30      	pop	{r4, r5, pc}
 80005ce:	ea91 0f03 	teq	r1, r3
 80005d2:	bf1e      	ittt	ne
 80005d4:	2100      	movne	r1, #0
 80005d6:	2000      	movne	r0, #0
 80005d8:	bd30      	popne	{r4, r5, pc}
 80005da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005de:	d105      	bne.n	80005ec <__adddf3+0x230>
 80005e0:	0040      	lsls	r0, r0, #1
 80005e2:	4149      	adcs	r1, r1
 80005e4:	bf28      	it	cs
 80005e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80005ea:	bd30      	pop	{r4, r5, pc}
 80005ec:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80005f0:	bf3c      	itt	cc
 80005f2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80005f6:	bd30      	popcc	{r4, r5, pc}
 80005f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005fc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000600:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000604:	f04f 0000 	mov.w	r0, #0
 8000608:	bd30      	pop	{r4, r5, pc}
 800060a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800060e:	bf1a      	itte	ne
 8000610:	4619      	movne	r1, r3
 8000612:	4610      	movne	r0, r2
 8000614:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000618:	bf1c      	itt	ne
 800061a:	460b      	movne	r3, r1
 800061c:	4602      	movne	r2, r0
 800061e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000622:	bf06      	itte	eq
 8000624:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000628:	ea91 0f03 	teqeq	r1, r3
 800062c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000630:	bd30      	pop	{r4, r5, pc}
 8000632:	bf00      	nop

08000634 <__aeabi_ui2d>:
 8000634:	f090 0f00 	teq	r0, #0
 8000638:	bf04      	itt	eq
 800063a:	2100      	moveq	r1, #0
 800063c:	4770      	bxeq	lr
 800063e:	b530      	push	{r4, r5, lr}
 8000640:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000644:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000648:	f04f 0500 	mov.w	r5, #0
 800064c:	f04f 0100 	mov.w	r1, #0
 8000650:	e750      	b.n	80004f4 <__adddf3+0x138>
 8000652:	bf00      	nop

08000654 <__aeabi_i2d>:
 8000654:	f090 0f00 	teq	r0, #0
 8000658:	bf04      	itt	eq
 800065a:	2100      	moveq	r1, #0
 800065c:	4770      	bxeq	lr
 800065e:	b530      	push	{r4, r5, lr}
 8000660:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000664:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000668:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800066c:	bf48      	it	mi
 800066e:	4240      	negmi	r0, r0
 8000670:	f04f 0100 	mov.w	r1, #0
 8000674:	e73e      	b.n	80004f4 <__adddf3+0x138>
 8000676:	bf00      	nop

08000678 <__aeabi_f2d>:
 8000678:	0042      	lsls	r2, r0, #1
 800067a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800067e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000682:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000686:	bf1f      	itttt	ne
 8000688:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800068c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000690:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000694:	4770      	bxne	lr
 8000696:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800069a:	bf08      	it	eq
 800069c:	4770      	bxeq	lr
 800069e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80006a2:	bf04      	itt	eq
 80006a4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80006a8:	4770      	bxeq	lr
 80006aa:	b530      	push	{r4, r5, lr}
 80006ac:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80006b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80006b4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006b8:	e71c      	b.n	80004f4 <__adddf3+0x138>
 80006ba:	bf00      	nop

080006bc <__aeabi_ul2d>:
 80006bc:	ea50 0201 	orrs.w	r2, r0, r1
 80006c0:	bf08      	it	eq
 80006c2:	4770      	bxeq	lr
 80006c4:	b530      	push	{r4, r5, lr}
 80006c6:	f04f 0500 	mov.w	r5, #0
 80006ca:	e00a      	b.n	80006e2 <__aeabi_l2d+0x16>

080006cc <__aeabi_l2d>:
 80006cc:	ea50 0201 	orrs.w	r2, r0, r1
 80006d0:	bf08      	it	eq
 80006d2:	4770      	bxeq	lr
 80006d4:	b530      	push	{r4, r5, lr}
 80006d6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80006da:	d502      	bpl.n	80006e2 <__aeabi_l2d+0x16>
 80006dc:	4240      	negs	r0, r0
 80006de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006e2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006e6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006ee:	f43f aed8 	beq.w	80004a2 <__adddf3+0xe6>
 80006f2:	f04f 0203 	mov.w	r2, #3
 80006f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006fa:	bf18      	it	ne
 80006fc:	3203      	addne	r2, #3
 80006fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000702:	bf18      	it	ne
 8000704:	3203      	addne	r2, #3
 8000706:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800070a:	f1c2 0320 	rsb	r3, r2, #32
 800070e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000712:	fa20 f002 	lsr.w	r0, r0, r2
 8000716:	fa01 fe03 	lsl.w	lr, r1, r3
 800071a:	ea40 000e 	orr.w	r0, r0, lr
 800071e:	fa21 f102 	lsr.w	r1, r1, r2
 8000722:	4414      	add	r4, r2
 8000724:	e6bd      	b.n	80004a2 <__adddf3+0xe6>
 8000726:	bf00      	nop

08000728 <__aeabi_uldivmod>:
 8000728:	b953      	cbnz	r3, 8000740 <__aeabi_uldivmod+0x18>
 800072a:	b94a      	cbnz	r2, 8000740 <__aeabi_uldivmod+0x18>
 800072c:	2900      	cmp	r1, #0
 800072e:	bf08      	it	eq
 8000730:	2800      	cmpeq	r0, #0
 8000732:	bf1c      	itt	ne
 8000734:	f04f 31ff 	movne.w	r1, #4294967295
 8000738:	f04f 30ff 	movne.w	r0, #4294967295
 800073c:	f000 b97e 	b.w	8000a3c <__aeabi_idiv0>
 8000740:	f1ad 0c08 	sub.w	ip, sp, #8
 8000744:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000748:	f000 f81a 	bl	8000780 <__udivmoddi4>
 800074c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000750:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000754:	b004      	add	sp, #16
 8000756:	4770      	bx	lr

08000758 <__popcountsi2>:
 8000758:	0843      	lsrs	r3, r0, #1
 800075a:	f003 3355 	and.w	r3, r3, #1431655765	@ 0x55555555
 800075e:	1ac0      	subs	r0, r0, r3
 8000760:	0883      	lsrs	r3, r0, #2
 8000762:	f003 3333 	and.w	r3, r3, #858993459	@ 0x33333333
 8000766:	f000 3033 	and.w	r0, r0, #858993459	@ 0x33333333
 800076a:	4418      	add	r0, r3
 800076c:	eb00 1010 	add.w	r0, r0, r0, lsr #4
 8000770:	f000 300f 	and.w	r0, r0, #252645135	@ 0xf0f0f0f
 8000774:	eb00 2000 	add.w	r0, r0, r0, lsl #8
 8000778:	eb00 4000 	add.w	r0, r0, r0, lsl #16
 800077c:	0e00      	lsrs	r0, r0, #24
 800077e:	4770      	bx	lr

08000780 <__udivmoddi4>:
 8000780:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000784:	9d08      	ldr	r5, [sp, #32]
 8000786:	460c      	mov	r4, r1
 8000788:	2b00      	cmp	r3, #0
 800078a:	d14e      	bne.n	800082a <__udivmoddi4+0xaa>
 800078c:	4694      	mov	ip, r2
 800078e:	458c      	cmp	ip, r1
 8000790:	4686      	mov	lr, r0
 8000792:	fab2 f282 	clz	r2, r2
 8000796:	d962      	bls.n	800085e <__udivmoddi4+0xde>
 8000798:	b14a      	cbz	r2, 80007ae <__udivmoddi4+0x2e>
 800079a:	f1c2 0320 	rsb	r3, r2, #32
 800079e:	4091      	lsls	r1, r2
 80007a0:	fa20 f303 	lsr.w	r3, r0, r3
 80007a4:	fa0c fc02 	lsl.w	ip, ip, r2
 80007a8:	4319      	orrs	r1, r3
 80007aa:	fa00 fe02 	lsl.w	lr, r0, r2
 80007ae:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80007b2:	fa1f f68c 	uxth.w	r6, ip
 80007b6:	fbb1 f4f7 	udiv	r4, r1, r7
 80007ba:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80007be:	fb07 1114 	mls	r1, r7, r4, r1
 80007c2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80007c6:	fb04 f106 	mul.w	r1, r4, r6
 80007ca:	4299      	cmp	r1, r3
 80007cc:	d90a      	bls.n	80007e4 <__udivmoddi4+0x64>
 80007ce:	eb1c 0303 	adds.w	r3, ip, r3
 80007d2:	f104 30ff 	add.w	r0, r4, #4294967295
 80007d6:	f080 8112 	bcs.w	80009fe <__udivmoddi4+0x27e>
 80007da:	4299      	cmp	r1, r3
 80007dc:	f240 810f 	bls.w	80009fe <__udivmoddi4+0x27e>
 80007e0:	3c02      	subs	r4, #2
 80007e2:	4463      	add	r3, ip
 80007e4:	1a59      	subs	r1, r3, r1
 80007e6:	fa1f f38e 	uxth.w	r3, lr
 80007ea:	fbb1 f0f7 	udiv	r0, r1, r7
 80007ee:	fb07 1110 	mls	r1, r7, r0, r1
 80007f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80007f6:	fb00 f606 	mul.w	r6, r0, r6
 80007fa:	429e      	cmp	r6, r3
 80007fc:	d90a      	bls.n	8000814 <__udivmoddi4+0x94>
 80007fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000802:	f100 31ff 	add.w	r1, r0, #4294967295
 8000806:	f080 80fc 	bcs.w	8000a02 <__udivmoddi4+0x282>
 800080a:	429e      	cmp	r6, r3
 800080c:	f240 80f9 	bls.w	8000a02 <__udivmoddi4+0x282>
 8000810:	4463      	add	r3, ip
 8000812:	3802      	subs	r0, #2
 8000814:	1b9b      	subs	r3, r3, r6
 8000816:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800081a:	2100      	movs	r1, #0
 800081c:	b11d      	cbz	r5, 8000826 <__udivmoddi4+0xa6>
 800081e:	40d3      	lsrs	r3, r2
 8000820:	2200      	movs	r2, #0
 8000822:	e9c5 3200 	strd	r3, r2, [r5]
 8000826:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800082a:	428b      	cmp	r3, r1
 800082c:	d905      	bls.n	800083a <__udivmoddi4+0xba>
 800082e:	b10d      	cbz	r5, 8000834 <__udivmoddi4+0xb4>
 8000830:	e9c5 0100 	strd	r0, r1, [r5]
 8000834:	2100      	movs	r1, #0
 8000836:	4608      	mov	r0, r1
 8000838:	e7f5      	b.n	8000826 <__udivmoddi4+0xa6>
 800083a:	fab3 f183 	clz	r1, r3
 800083e:	2900      	cmp	r1, #0
 8000840:	d146      	bne.n	80008d0 <__udivmoddi4+0x150>
 8000842:	42a3      	cmp	r3, r4
 8000844:	d302      	bcc.n	800084c <__udivmoddi4+0xcc>
 8000846:	4290      	cmp	r0, r2
 8000848:	f0c0 80f0 	bcc.w	8000a2c <__udivmoddi4+0x2ac>
 800084c:	1a86      	subs	r6, r0, r2
 800084e:	eb64 0303 	sbc.w	r3, r4, r3
 8000852:	2001      	movs	r0, #1
 8000854:	2d00      	cmp	r5, #0
 8000856:	d0e6      	beq.n	8000826 <__udivmoddi4+0xa6>
 8000858:	e9c5 6300 	strd	r6, r3, [r5]
 800085c:	e7e3      	b.n	8000826 <__udivmoddi4+0xa6>
 800085e:	2a00      	cmp	r2, #0
 8000860:	f040 8090 	bne.w	8000984 <__udivmoddi4+0x204>
 8000864:	eba1 040c 	sub.w	r4, r1, ip
 8000868:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800086c:	fa1f f78c 	uxth.w	r7, ip
 8000870:	2101      	movs	r1, #1
 8000872:	fbb4 f6f8 	udiv	r6, r4, r8
 8000876:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800087a:	fb08 4416 	mls	r4, r8, r6, r4
 800087e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000882:	fb07 f006 	mul.w	r0, r7, r6
 8000886:	4298      	cmp	r0, r3
 8000888:	d908      	bls.n	800089c <__udivmoddi4+0x11c>
 800088a:	eb1c 0303 	adds.w	r3, ip, r3
 800088e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000892:	d202      	bcs.n	800089a <__udivmoddi4+0x11a>
 8000894:	4298      	cmp	r0, r3
 8000896:	f200 80cd 	bhi.w	8000a34 <__udivmoddi4+0x2b4>
 800089a:	4626      	mov	r6, r4
 800089c:	1a1c      	subs	r4, r3, r0
 800089e:	fa1f f38e 	uxth.w	r3, lr
 80008a2:	fbb4 f0f8 	udiv	r0, r4, r8
 80008a6:	fb08 4410 	mls	r4, r8, r0, r4
 80008aa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80008ae:	fb00 f707 	mul.w	r7, r0, r7
 80008b2:	429f      	cmp	r7, r3
 80008b4:	d908      	bls.n	80008c8 <__udivmoddi4+0x148>
 80008b6:	eb1c 0303 	adds.w	r3, ip, r3
 80008ba:	f100 34ff 	add.w	r4, r0, #4294967295
 80008be:	d202      	bcs.n	80008c6 <__udivmoddi4+0x146>
 80008c0:	429f      	cmp	r7, r3
 80008c2:	f200 80b0 	bhi.w	8000a26 <__udivmoddi4+0x2a6>
 80008c6:	4620      	mov	r0, r4
 80008c8:	1bdb      	subs	r3, r3, r7
 80008ca:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80008ce:	e7a5      	b.n	800081c <__udivmoddi4+0x9c>
 80008d0:	f1c1 0620 	rsb	r6, r1, #32
 80008d4:	408b      	lsls	r3, r1
 80008d6:	fa22 f706 	lsr.w	r7, r2, r6
 80008da:	431f      	orrs	r7, r3
 80008dc:	fa20 fc06 	lsr.w	ip, r0, r6
 80008e0:	fa04 f301 	lsl.w	r3, r4, r1
 80008e4:	ea43 030c 	orr.w	r3, r3, ip
 80008e8:	40f4      	lsrs	r4, r6
 80008ea:	fa00 f801 	lsl.w	r8, r0, r1
 80008ee:	0c38      	lsrs	r0, r7, #16
 80008f0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80008f4:	fbb4 fef0 	udiv	lr, r4, r0
 80008f8:	fa1f fc87 	uxth.w	ip, r7
 80008fc:	fb00 441e 	mls	r4, r0, lr, r4
 8000900:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000904:	fb0e f90c 	mul.w	r9, lr, ip
 8000908:	45a1      	cmp	r9, r4
 800090a:	fa02 f201 	lsl.w	r2, r2, r1
 800090e:	d90a      	bls.n	8000926 <__udivmoddi4+0x1a6>
 8000910:	193c      	adds	r4, r7, r4
 8000912:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000916:	f080 8084 	bcs.w	8000a22 <__udivmoddi4+0x2a2>
 800091a:	45a1      	cmp	r9, r4
 800091c:	f240 8081 	bls.w	8000a22 <__udivmoddi4+0x2a2>
 8000920:	f1ae 0e02 	sub.w	lr, lr, #2
 8000924:	443c      	add	r4, r7
 8000926:	eba4 0409 	sub.w	r4, r4, r9
 800092a:	fa1f f983 	uxth.w	r9, r3
 800092e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000932:	fb00 4413 	mls	r4, r0, r3, r4
 8000936:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800093a:	fb03 fc0c 	mul.w	ip, r3, ip
 800093e:	45a4      	cmp	ip, r4
 8000940:	d907      	bls.n	8000952 <__udivmoddi4+0x1d2>
 8000942:	193c      	adds	r4, r7, r4
 8000944:	f103 30ff 	add.w	r0, r3, #4294967295
 8000948:	d267      	bcs.n	8000a1a <__udivmoddi4+0x29a>
 800094a:	45a4      	cmp	ip, r4
 800094c:	d965      	bls.n	8000a1a <__udivmoddi4+0x29a>
 800094e:	3b02      	subs	r3, #2
 8000950:	443c      	add	r4, r7
 8000952:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000956:	fba0 9302 	umull	r9, r3, r0, r2
 800095a:	eba4 040c 	sub.w	r4, r4, ip
 800095e:	429c      	cmp	r4, r3
 8000960:	46ce      	mov	lr, r9
 8000962:	469c      	mov	ip, r3
 8000964:	d351      	bcc.n	8000a0a <__udivmoddi4+0x28a>
 8000966:	d04e      	beq.n	8000a06 <__udivmoddi4+0x286>
 8000968:	b155      	cbz	r5, 8000980 <__udivmoddi4+0x200>
 800096a:	ebb8 030e 	subs.w	r3, r8, lr
 800096e:	eb64 040c 	sbc.w	r4, r4, ip
 8000972:	fa04 f606 	lsl.w	r6, r4, r6
 8000976:	40cb      	lsrs	r3, r1
 8000978:	431e      	orrs	r6, r3
 800097a:	40cc      	lsrs	r4, r1
 800097c:	e9c5 6400 	strd	r6, r4, [r5]
 8000980:	2100      	movs	r1, #0
 8000982:	e750      	b.n	8000826 <__udivmoddi4+0xa6>
 8000984:	f1c2 0320 	rsb	r3, r2, #32
 8000988:	fa20 f103 	lsr.w	r1, r0, r3
 800098c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000990:	fa24 f303 	lsr.w	r3, r4, r3
 8000994:	4094      	lsls	r4, r2
 8000996:	430c      	orrs	r4, r1
 8000998:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800099c:	fa00 fe02 	lsl.w	lr, r0, r2
 80009a0:	fa1f f78c 	uxth.w	r7, ip
 80009a4:	fbb3 f0f8 	udiv	r0, r3, r8
 80009a8:	fb08 3110 	mls	r1, r8, r0, r3
 80009ac:	0c23      	lsrs	r3, r4, #16
 80009ae:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80009b2:	fb00 f107 	mul.w	r1, r0, r7
 80009b6:	4299      	cmp	r1, r3
 80009b8:	d908      	bls.n	80009cc <__udivmoddi4+0x24c>
 80009ba:	eb1c 0303 	adds.w	r3, ip, r3
 80009be:	f100 36ff 	add.w	r6, r0, #4294967295
 80009c2:	d22c      	bcs.n	8000a1e <__udivmoddi4+0x29e>
 80009c4:	4299      	cmp	r1, r3
 80009c6:	d92a      	bls.n	8000a1e <__udivmoddi4+0x29e>
 80009c8:	3802      	subs	r0, #2
 80009ca:	4463      	add	r3, ip
 80009cc:	1a5b      	subs	r3, r3, r1
 80009ce:	b2a4      	uxth	r4, r4
 80009d0:	fbb3 f1f8 	udiv	r1, r3, r8
 80009d4:	fb08 3311 	mls	r3, r8, r1, r3
 80009d8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80009dc:	fb01 f307 	mul.w	r3, r1, r7
 80009e0:	42a3      	cmp	r3, r4
 80009e2:	d908      	bls.n	80009f6 <__udivmoddi4+0x276>
 80009e4:	eb1c 0404 	adds.w	r4, ip, r4
 80009e8:	f101 36ff 	add.w	r6, r1, #4294967295
 80009ec:	d213      	bcs.n	8000a16 <__udivmoddi4+0x296>
 80009ee:	42a3      	cmp	r3, r4
 80009f0:	d911      	bls.n	8000a16 <__udivmoddi4+0x296>
 80009f2:	3902      	subs	r1, #2
 80009f4:	4464      	add	r4, ip
 80009f6:	1ae4      	subs	r4, r4, r3
 80009f8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80009fc:	e739      	b.n	8000872 <__udivmoddi4+0xf2>
 80009fe:	4604      	mov	r4, r0
 8000a00:	e6f0      	b.n	80007e4 <__udivmoddi4+0x64>
 8000a02:	4608      	mov	r0, r1
 8000a04:	e706      	b.n	8000814 <__udivmoddi4+0x94>
 8000a06:	45c8      	cmp	r8, r9
 8000a08:	d2ae      	bcs.n	8000968 <__udivmoddi4+0x1e8>
 8000a0a:	ebb9 0e02 	subs.w	lr, r9, r2
 8000a0e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000a12:	3801      	subs	r0, #1
 8000a14:	e7a8      	b.n	8000968 <__udivmoddi4+0x1e8>
 8000a16:	4631      	mov	r1, r6
 8000a18:	e7ed      	b.n	80009f6 <__udivmoddi4+0x276>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	e799      	b.n	8000952 <__udivmoddi4+0x1d2>
 8000a1e:	4630      	mov	r0, r6
 8000a20:	e7d4      	b.n	80009cc <__udivmoddi4+0x24c>
 8000a22:	46d6      	mov	lr, sl
 8000a24:	e77f      	b.n	8000926 <__udivmoddi4+0x1a6>
 8000a26:	4463      	add	r3, ip
 8000a28:	3802      	subs	r0, #2
 8000a2a:	e74d      	b.n	80008c8 <__udivmoddi4+0x148>
 8000a2c:	4606      	mov	r6, r0
 8000a2e:	4623      	mov	r3, r4
 8000a30:	4608      	mov	r0, r1
 8000a32:	e70f      	b.n	8000854 <__udivmoddi4+0xd4>
 8000a34:	3e02      	subs	r6, #2
 8000a36:	4463      	add	r3, ip
 8000a38:	e730      	b.n	800089c <__udivmoddi4+0x11c>
 8000a3a:	bf00      	nop

08000a3c <__aeabi_idiv0>:
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop

08000a40 <_ZN3PinC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi>:
#include <cstdio>
#include <cerrno>
#include <string>


Pin::Pin(std::string portAndPin, int dir) :
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b084      	sub	sp, #16
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	60f8      	str	r0, [r7, #12]
 8000a48:	60b9      	str	r1, [r7, #8]
 8000a4a:	607a      	str	r2, [r7, #4]
    portAndPin(portAndPin),
 8000a4c:	68fb      	ldr	r3, [r7, #12]
 8000a4e:	68b9      	ldr	r1, [r7, #8]
 8000a50:	4618      	mov	r0, r3
 8000a52:	f012 fc0e 	bl	8013272 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
    dir(dir)
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	b2da      	uxtb	r2, r3
 8000a5a:	68fb      	ldr	r3, [r7, #12]
 8000a5c:	761a      	strb	r2, [r3, #24]
 8000a5e:	68fb      	ldr	r3, [r7, #12]
 8000a60:	3330      	adds	r3, #48	@ 0x30
 8000a62:	2200      	movs	r2, #0
 8000a64:	601a      	str	r2, [r3, #0]
 8000a66:	605a      	str	r2, [r3, #4]
 8000a68:	609a      	str	r2, [r3, #8]
 8000a6a:	60da      	str	r2, [r3, #12]
 8000a6c:	611a      	str	r2, [r3, #16]
{
    // Set direction
    if (this->dir == INPUT)
 8000a6e:	68fb      	ldr	r3, [r7, #12]
 8000a70:	7e1b      	ldrb	r3, [r3, #24]
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d106      	bne.n	8000a84 <_ZN3PinC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi+0x44>
    {
        this->mode = GPIO_MODE_INPUT;
 8000a76:	68fb      	ldr	r3, [r7, #12]
 8000a78:	2200      	movs	r2, #0
 8000a7a:	621a      	str	r2, [r3, #32]
        this->pull = GPIO_NOPULL;
 8000a7c:	68fb      	ldr	r3, [r7, #12]
 8000a7e:	2200      	movs	r2, #0
 8000a80:	625a      	str	r2, [r3, #36]	@ 0x24
 8000a82:	e005      	b.n	8000a90 <_ZN3PinC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi+0x50>
    }
    else
    {
        this->mode = GPIO_MODE_OUTPUT_PP;
 8000a84:	68fb      	ldr	r3, [r7, #12]
 8000a86:	2201      	movs	r2, #1
 8000a88:	621a      	str	r2, [r3, #32]
        this->pull = GPIO_NOPULL;
 8000a8a:	68fb      	ldr	r3, [r7, #12]
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    this->configPin();
 8000a90:	68f8      	ldr	r0, [r7, #12]
 8000a92:	f000 f805 	bl	8000aa0 <_ZN3Pin9configPinEv>
}
 8000a96:	68fb      	ldr	r3, [r7, #12]
 8000a98:	4618      	mov	r0, r3
 8000a9a:	3710      	adds	r7, #16
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	bd80      	pop	{r7, pc}

08000aa0 <_ZN3Pin9configPinEv>:

    this->configPin();
}

void Pin::configPin()
{
 8000aa0:	b5b0      	push	{r4, r5, r7, lr}
 8000aa2:	b08e      	sub	sp, #56	@ 0x38
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
    printf("Creating Pin @\n");
 8000aa8:	4868      	ldr	r0, [pc, #416]	@ (8000c4c <_ZN3Pin9configPinEv+0x1ac>)
 8000aaa:	f012 fe4b 	bl	8013744 <puts>

    //x can be (A..H) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
    GPIO_TypeDef* gpios[5] ={GPIOA,GPIOB,GPIOC,GPIOD,GPIOE};
 8000aae:	4b68      	ldr	r3, [pc, #416]	@ (8000c50 <_ZN3Pin9configPinEv+0x1b0>)
 8000ab0:	f107 0420 	add.w	r4, r7, #32
 8000ab4:	461d      	mov	r5, r3
 8000ab6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ab8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000aba:	682b      	ldr	r3, [r5, #0]
 8000abc:	6023      	str	r3, [r4, #0]
    

    if (this->portAndPin[0] == 'P') // PXXX e.g.PA_2 PC_15
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	2100      	movs	r1, #0
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	f012 fb6b 	bl	801319e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	781b      	ldrb	r3, [r3, #0]
 8000acc:	2b50      	cmp	r3, #80	@ 0x50
 8000ace:	bf0c      	ite	eq
 8000ad0:	2301      	moveq	r3, #1
 8000ad2:	2300      	movne	r3, #0
 8000ad4:	b2db      	uxtb	r3, r3
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d05e      	beq.n	8000b98 <_ZN3Pin9configPinEv+0xf8>
    {  
        this->portIndex     = this->portAndPin[1] - 'A';
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	2101      	movs	r1, #1
 8000ade:	4618      	mov	r0, r3
 8000ae0:	f012 fb5d 	bl	801319e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	781b      	ldrb	r3, [r3, #0]
 8000ae8:	3b41      	subs	r3, #65	@ 0x41
 8000aea:	b2da      	uxtb	r2, r3
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	769a      	strb	r2, [r3, #26]
        this->pinNumber     = this->portAndPin[3] - '0';       
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	2103      	movs	r1, #3
 8000af4:	4618      	mov	r0, r3
 8000af6:	f012 fb52 	bl	801319e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>
 8000afa:	4603      	mov	r3, r0
 8000afc:	781b      	ldrb	r3, [r3, #0]
 8000afe:	3b30      	subs	r3, #48	@ 0x30
 8000b00:	b29a      	uxth	r2, r3
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	839a      	strh	r2, [r3, #28]
        uint16_t pin2       = this->portAndPin[4] - '0';       
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	2104      	movs	r1, #4
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	f012 fb47 	bl	801319e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>
 8000b10:	4603      	mov	r3, r0
 8000b12:	781b      	ldrb	r3, [r3, #0]
 8000b14:	3b30      	subs	r3, #48	@ 0x30
 8000b16:	86fb      	strh	r3, [r7, #54]	@ 0x36

        if (pin2 <= 8) 
 8000b18:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8000b1a:	2b08      	cmp	r3, #8
 8000b1c:	d80b      	bhi.n	8000b36 <_ZN3Pin9configPinEv+0x96>
        {
            this->pinNumber = this->pinNumber * 10 + pin2;
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	8b9b      	ldrh	r3, [r3, #28]
 8000b22:	461a      	mov	r2, r3
 8000b24:	0092      	lsls	r2, r2, #2
 8000b26:	4413      	add	r3, r2
 8000b28:	005b      	lsls	r3, r3, #1
 8000b2a:	b29a      	uxth	r2, r3
 8000b2c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8000b2e:	4413      	add	r3, r2
 8000b30:	b29a      	uxth	r2, r3
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	839a      	strh	r2, [r3, #28]
        }

        this->pin = 1 << this->pinNumber; // this is equivalent to GPIO_PIN_x definition
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	8b9b      	ldrh	r3, [r3, #28]
 8000b3a:	461a      	mov	r2, r3
 8000b3c:	2301      	movs	r3, #1
 8000b3e:	4093      	lsls	r3, r2
 8000b40:	b29a      	uxth	r2, r3
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	83da      	strh	r2, [r3, #30]
    {
        printf("  Invalid port and pin definition\n");
        return;
    }    

    printf("  port = GPIO%c\n", char('A' + this->portIndex));
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	7e9b      	ldrb	r3, [r3, #26]
 8000b4a:	3341      	adds	r3, #65	@ 0x41
 8000b4c:	b2db      	uxtb	r3, r3
 8000b4e:	4619      	mov	r1, r3
 8000b50:	4840      	ldr	r0, [pc, #256]	@ (8000c54 <_ZN3Pin9configPinEv+0x1b4>)
 8000b52:	f012 fd87 	bl	8013664 <iprintf>
    printf("  pin = %d\n", this->pinNumber);
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	8b9b      	ldrh	r3, [r3, #28]
 8000b5a:	4619      	mov	r1, r3
 8000b5c:	483e      	ldr	r0, [pc, #248]	@ (8000c58 <_ZN3Pin9configPinEv+0x1b8>)
 8000b5e:	f012 fd81 	bl	8013664 <iprintf>

    // translate port index into something useful
    this->GPIOx = gpios[this->portIndex];
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	7e9b      	ldrb	r3, [r3, #26]
 8000b66:	009b      	lsls	r3, r3, #2
 8000b68:	3338      	adds	r3, #56	@ 0x38
 8000b6a:	443b      	add	r3, r7
 8000b6c:	f853 2c18 	ldr.w	r2, [r3, #-24]
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	62da      	str	r2, [r3, #44]	@ 0x2c

    // enable the peripheral clock
    switch (portIndex){
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	7e9b      	ldrb	r3, [r3, #26]
 8000b78:	2b04      	cmp	r3, #4
 8000b7a:	d861      	bhi.n	8000c40 <_ZN3Pin9configPinEv+0x1a0>
 8000b7c:	a201      	add	r2, pc, #4	@ (adr r2, 8000b84 <_ZN3Pin9configPinEv+0xe4>)
 8000b7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b82:	bf00      	nop
 8000b84:	08000ba1 	.word	0x08000ba1
 8000b88:	08000bc1 	.word	0x08000bc1
 8000b8c:	08000be1 	.word	0x08000be1
 8000b90:	08000c01 	.word	0x08000c01
 8000b94:	08000c21 	.word	0x08000c21
        printf("  Invalid port and pin definition\n");
 8000b98:	4830      	ldr	r0, [pc, #192]	@ (8000c5c <_ZN3Pin9configPinEv+0x1bc>)
 8000b9a:	f012 fdd3 	bl	8013744 <puts>
 8000b9e:	e052      	b.n	8000c46 <_ZN3Pin9configPinEv+0x1a6>
        case 0:
            __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ba0:	4b2f      	ldr	r3, [pc, #188]	@ (8000c60 <_ZN3Pin9configPinEv+0x1c0>)
 8000ba2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ba6:	4a2e      	ldr	r2, [pc, #184]	@ (8000c60 <_ZN3Pin9configPinEv+0x1c0>)
 8000ba8:	f043 0301 	orr.w	r3, r3, #1
 8000bac:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000bb0:	4b2b      	ldr	r3, [pc, #172]	@ (8000c60 <_ZN3Pin9configPinEv+0x1c0>)
 8000bb2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bb6:	f003 0301 	and.w	r3, r3, #1
 8000bba:	61fb      	str	r3, [r7, #28]
 8000bbc:	69fb      	ldr	r3, [r7, #28]
            break;
 8000bbe:	e03f      	b.n	8000c40 <_ZN3Pin9configPinEv+0x1a0>

        case 1:
            __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bc0:	4b27      	ldr	r3, [pc, #156]	@ (8000c60 <_ZN3Pin9configPinEv+0x1c0>)
 8000bc2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bc6:	4a26      	ldr	r2, [pc, #152]	@ (8000c60 <_ZN3Pin9configPinEv+0x1c0>)
 8000bc8:	f043 0302 	orr.w	r3, r3, #2
 8000bcc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000bd0:	4b23      	ldr	r3, [pc, #140]	@ (8000c60 <_ZN3Pin9configPinEv+0x1c0>)
 8000bd2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bd6:	f003 0302 	and.w	r3, r3, #2
 8000bda:	61bb      	str	r3, [r7, #24]
 8000bdc:	69bb      	ldr	r3, [r7, #24]
            break;
 8000bde:	e02f      	b.n	8000c40 <_ZN3Pin9configPinEv+0x1a0>

        case 2:
            __HAL_RCC_GPIOC_CLK_ENABLE();
 8000be0:	4b1f      	ldr	r3, [pc, #124]	@ (8000c60 <_ZN3Pin9configPinEv+0x1c0>)
 8000be2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000be6:	4a1e      	ldr	r2, [pc, #120]	@ (8000c60 <_ZN3Pin9configPinEv+0x1c0>)
 8000be8:	f043 0304 	orr.w	r3, r3, #4
 8000bec:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000bf0:	4b1b      	ldr	r3, [pc, #108]	@ (8000c60 <_ZN3Pin9configPinEv+0x1c0>)
 8000bf2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bf6:	f003 0304 	and.w	r3, r3, #4
 8000bfa:	617b      	str	r3, [r7, #20]
 8000bfc:	697b      	ldr	r3, [r7, #20]
            break;
 8000bfe:	e01f      	b.n	8000c40 <_ZN3Pin9configPinEv+0x1a0>
        
        case 3:
            __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c00:	4b17      	ldr	r3, [pc, #92]	@ (8000c60 <_ZN3Pin9configPinEv+0x1c0>)
 8000c02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c06:	4a16      	ldr	r2, [pc, #88]	@ (8000c60 <_ZN3Pin9configPinEv+0x1c0>)
 8000c08:	f043 0308 	orr.w	r3, r3, #8
 8000c0c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c10:	4b13      	ldr	r3, [pc, #76]	@ (8000c60 <_ZN3Pin9configPinEv+0x1c0>)
 8000c12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c16:	f003 0308 	and.w	r3, r3, #8
 8000c1a:	613b      	str	r3, [r7, #16]
 8000c1c:	693b      	ldr	r3, [r7, #16]
            break;
 8000c1e:	e00f      	b.n	8000c40 <_ZN3Pin9configPinEv+0x1a0>

        case 4:
            __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c20:	4b0f      	ldr	r3, [pc, #60]	@ (8000c60 <_ZN3Pin9configPinEv+0x1c0>)
 8000c22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c26:	4a0e      	ldr	r2, [pc, #56]	@ (8000c60 <_ZN3Pin9configPinEv+0x1c0>)
 8000c28:	f043 0310 	orr.w	r3, r3, #16
 8000c2c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c30:	4b0b      	ldr	r3, [pc, #44]	@ (8000c60 <_ZN3Pin9configPinEv+0x1c0>)
 8000c32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c36:	f003 0310 	and.w	r3, r3, #16
 8000c3a:	60fb      	str	r3, [r7, #12]
 8000c3c:	68fb      	ldr	r3, [r7, #12]
            break;
 8000c3e:	bf00      	nop
    }

    this->initPin();
 8000c40:	6878      	ldr	r0, [r7, #4]
 8000c42:	f000 f80f 	bl	8000c64 <_ZN3Pin7initPinEv>
}
 8000c46:	3738      	adds	r7, #56	@ 0x38
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	bdb0      	pop	{r4, r5, r7, pc}
 8000c4c:	0801445c 	.word	0x0801445c
 8000c50:	080144b0 	.word	0x080144b0
 8000c54:	08014490 	.word	0x08014490
 8000c58:	080144a4 	.word	0x080144a4
 8000c5c:	0801446c 	.word	0x0801446c
 8000c60:	58024400 	.word	0x58024400

08000c64 <_ZN3Pin7initPinEv>:


void Pin::initPin()
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b082      	sub	sp, #8
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
    // Configure GPIO pin Output Level
    HAL_GPIO_WritePin(this->GPIOx, this->pin, GPIO_PIN_RESET);
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	8bdb      	ldrh	r3, [r3, #30]
 8000c74:	2200      	movs	r2, #0
 8000c76:	4619      	mov	r1, r3
 8000c78:	f008 f83e 	bl	8008cf8 <HAL_GPIO_WritePin>

    // Configure the GPIO pin
    this->GPIO_InitStruct.Pin = this->pin;
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	8bdb      	ldrh	r3, [r3, #30]
 8000c80:	461a      	mov	r2, r3
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	631a      	str	r2, [r3, #48]	@ 0x30
    this->GPIO_InitStruct.Mode = this->mode;
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	6a1a      	ldr	r2, [r3, #32]
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	635a      	str	r2, [r3, #52]	@ 0x34
    this->GPIO_InitStruct.Pull = this->pull;
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	639a      	str	r2, [r3, #56]	@ 0x38
    this->GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	2202      	movs	r2, #2
 8000c9a:	63da      	str	r2, [r3, #60]	@ 0x3c
    HAL_GPIO_Init(this->GPIOx, &this->GPIO_InitStruct);  
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	3330      	adds	r3, #48	@ 0x30
 8000ca4:	4619      	mov	r1, r3
 8000ca6:	4610      	mov	r0, r2
 8000ca8:	f007 fe76 	bl	8008998 <HAL_GPIO_Init>
}
 8000cac:	bf00      	nop
 8000cae:	3708      	adds	r7, #8
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	bd80      	pop	{r7, pc}

08000cb4 <_ZN9InterruptC1Ev>:

// Define the vector table, it is only declared in the class declaration
Interrupt* Interrupt::ISRVectorTable[] = {0};

// Constructor
Interrupt::Interrupt(void){}
 8000cb4:	b480      	push	{r7}
 8000cb6:	b083      	sub	sp, #12
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
 8000cbc:	4a04      	ldr	r2, [pc, #16]	@ (8000cd0 <_ZN9InterruptC1Ev+0x1c>)
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	601a      	str	r2, [r3, #0]
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	370c      	adds	r7, #12
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cce:	4770      	bx	lr
 8000cd0:	08014b34 	.word	0x08014b34

08000cd4 <_ZN9Interrupt8RegisterEiPS_>:


// Methods

void Interrupt::Register(int interruptNumber, Interrupt* intThisPtr)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b082      	sub	sp, #8
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
 8000cdc:	6039      	str	r1, [r7, #0]
	printf("Registering interrupt for interrupt number = %d\n", interruptNumber);
 8000cde:	6879      	ldr	r1, [r7, #4]
 8000ce0:	4805      	ldr	r0, [pc, #20]	@ (8000cf8 <_ZN9Interrupt8RegisterEiPS_+0x24>)
 8000ce2:	f012 fcbf 	bl	8013664 <iprintf>
	ISRVectorTable[interruptNumber] = intThisPtr;
 8000ce6:	4905      	ldr	r1, [pc, #20]	@ (8000cfc <_ZN9Interrupt8RegisterEiPS_+0x28>)
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	683a      	ldr	r2, [r7, #0]
 8000cec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000cf0:	bf00      	nop
 8000cf2:	3708      	adds	r7, #8
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bd80      	pop	{r7, pc}
 8000cf8:	080144c4 	.word	0x080144c4
 8000cfc:	240000fc 	.word	0x240000fc

08000d00 <_ZN9Interrupt13EXTI4_WrapperEv>:

void Interrupt::EXTI4_Wrapper(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	af00      	add	r7, sp, #0
	ISRVectorTable[EXTI4_IRQn]->ISR_Handler();
 8000d04:	4b04      	ldr	r3, [pc, #16]	@ (8000d18 <_ZN9Interrupt13EXTI4_WrapperEv+0x18>)
 8000d06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	4a02      	ldr	r2, [pc, #8]	@ (8000d18 <_ZN9Interrupt13EXTI4_WrapperEv+0x18>)
 8000d0e:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8000d10:	4610      	mov	r0, r2
 8000d12:	4798      	blx	r3
}
 8000d14:	bf00      	nop
 8000d16:	bd80      	pop	{r7, pc}
 8000d18:	240000fc 	.word	0x240000fc

08000d1c <_ZN9Interrupt20DMA1_Stream0_WrapperEv>:

void Interrupt::DMA1_Stream0_Wrapper(void)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	af00      	add	r7, sp, #0
	ISRVectorTable[DMA1_Stream0_IRQn]->ISR_Handler();
 8000d20:	4b04      	ldr	r3, [pc, #16]	@ (8000d34 <_ZN9Interrupt20DMA1_Stream0_WrapperEv+0x18>)
 8000d22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	4a02      	ldr	r2, [pc, #8]	@ (8000d34 <_ZN9Interrupt20DMA1_Stream0_WrapperEv+0x18>)
 8000d2a:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8000d2c:	4610      	mov	r0, r2
 8000d2e:	4798      	blx	r3
}
 8000d30:	bf00      	nop
 8000d32:	bd80      	pop	{r7, pc}
 8000d34:	240000fc 	.word	0x240000fc

08000d38 <_ZN9Interrupt20DMA1_Stream1_WrapperEv>:

void Interrupt::DMA1_Stream1_Wrapper(void)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	af00      	add	r7, sp, #0
	ISRVectorTable[DMA1_Stream1_IRQn]->ISR_Handler();
 8000d3c:	4b04      	ldr	r3, [pc, #16]	@ (8000d50 <_ZN9Interrupt20DMA1_Stream1_WrapperEv+0x18>)
 8000d3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	4a02      	ldr	r2, [pc, #8]	@ (8000d50 <_ZN9Interrupt20DMA1_Stream1_WrapperEv+0x18>)
 8000d46:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8000d48:	4610      	mov	r0, r2
 8000d4a:	4798      	blx	r3
}
 8000d4c:	bf00      	nop
 8000d4e:	bd80      	pop	{r7, pc}
 8000d50:	240000fc 	.word	0x240000fc

08000d54 <_ZN9Interrupt12TIM2_WrapperEv>:


void Interrupt::TIM2_Wrapper(void)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	af00      	add	r7, sp, #0
	ISRVectorTable[TIM2_IRQn]->ISR_Handler();
 8000d58:	4b04      	ldr	r3, [pc, #16]	@ (8000d6c <_ZN9Interrupt12TIM2_WrapperEv+0x18>)
 8000d5a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	4a02      	ldr	r2, [pc, #8]	@ (8000d6c <_ZN9Interrupt12TIM2_WrapperEv+0x18>)
 8000d62:	6f12      	ldr	r2, [r2, #112]	@ 0x70
 8000d64:	4610      	mov	r0, r2
 8000d66:	4798      	blx	r3
}
 8000d68:	bf00      	nop
 8000d6a:	bd80      	pop	{r7, pc}
 8000d6c:	240000fc 	.word	0x240000fc

08000d70 <_ZN9Interrupt12TIM3_WrapperEv>:

void Interrupt::TIM3_Wrapper(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	af00      	add	r7, sp, #0
	ISRVectorTable[TIM3_IRQn]->ISR_Handler();
 8000d74:	4b04      	ldr	r3, [pc, #16]	@ (8000d88 <_ZN9Interrupt12TIM3_WrapperEv+0x18>)
 8000d76:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	4a02      	ldr	r2, [pc, #8]	@ (8000d88 <_ZN9Interrupt12TIM3_WrapperEv+0x18>)
 8000d7e:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8000d80:	4610      	mov	r0, r2
 8000d82:	4798      	blx	r3
}
 8000d84:	bf00      	nop
 8000d86:	bd80      	pop	{r7, pc}
 8000d88:	240000fc 	.word	0x240000fc

08000d8c <_ZN9Interrupt12TIM4_WrapperEv>:

void Interrupt::TIM4_Wrapper(void)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	af00      	add	r7, sp, #0
	ISRVectorTable[TIM4_IRQn]->ISR_Handler();
 8000d90:	4b04      	ldr	r3, [pc, #16]	@ (8000da4 <_ZN9Interrupt12TIM4_WrapperEv+0x18>)
 8000d92:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	4a02      	ldr	r2, [pc, #8]	@ (8000da4 <_ZN9Interrupt12TIM4_WrapperEv+0x18>)
 8000d9a:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 8000d9c:	4610      	mov	r0, r2
 8000d9e:	4798      	blx	r3
}
 8000da0:	bf00      	nop
 8000da2:	bd80      	pop	{r7, pc}
 8000da4:	240000fc 	.word	0x240000fc

08000da8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000da8:	b480      	push	{r7}
 8000daa:	b083      	sub	sp, #12
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	4603      	mov	r3, r0
 8000db0:	6039      	str	r1, [r7, #0]
 8000db2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000db4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	db0a      	blt.n	8000dd2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dbc:	683b      	ldr	r3, [r7, #0]
 8000dbe:	b2da      	uxtb	r2, r3
 8000dc0:	490c      	ldr	r1, [pc, #48]	@ (8000df4 <__NVIC_SetPriority+0x4c>)
 8000dc2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000dc6:	0112      	lsls	r2, r2, #4
 8000dc8:	b2d2      	uxtb	r2, r2
 8000dca:	440b      	add	r3, r1
 8000dcc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000dd0:	e00a      	b.n	8000de8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dd2:	683b      	ldr	r3, [r7, #0]
 8000dd4:	b2da      	uxtb	r2, r3
 8000dd6:	4908      	ldr	r1, [pc, #32]	@ (8000df8 <__NVIC_SetPriority+0x50>)
 8000dd8:	88fb      	ldrh	r3, [r7, #6]
 8000dda:	f003 030f 	and.w	r3, r3, #15
 8000dde:	3b04      	subs	r3, #4
 8000de0:	0112      	lsls	r2, r2, #4
 8000de2:	b2d2      	uxtb	r2, r2
 8000de4:	440b      	add	r3, r1
 8000de6:	761a      	strb	r2, [r3, #24]
}
 8000de8:	bf00      	nop
 8000dea:	370c      	adds	r7, #12
 8000dec:	46bd      	mov	sp, r7
 8000dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df2:	4770      	bx	lr
 8000df4:	e000e100 	.word	0xe000e100
 8000df8:	e000ed00 	.word	0xe000ed00

08000dfc <__is_constant_evaluated>:
  // This can be used without checking if the compiler supports the feature.
  // The macro _GLIBCXX_HAVE_IS_CONSTANT_EVALUATED can be used to check if
  // the compiler support is present to make this function work as expected.
  _GLIBCXX_CONSTEXPR inline bool
  __is_constant_evaluated() _GLIBCXX_NOEXCEPT
  {
 8000dfc:	b480      	push	{r7}
 8000dfe:	af00      	add	r7, sp, #0
#if __cpp_if_consteval >= 202106L
# define _GLIBCXX_HAVE_IS_CONSTANT_EVALUATED 1
    if consteval { return true; } else { return false; }
#elif __cplusplus >= 201103L && __has_builtin(__builtin_is_constant_evaluated)
# define _GLIBCXX_HAVE_IS_CONSTANT_EVALUATED 1
    return __builtin_is_constant_evaluated();
 8000e00:	2300      	movs	r3, #0
#else
    return false;
#endif
  }
 8000e02:	4618      	mov	r0, r3
 8000e04:	46bd      	mov	sp, r7
 8000e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0a:	4770      	bx	lr

08000e0c <_ZNK19ArduinoJson6101_11014CollectionData4headEv>:
  VariantData *get(size_t index) const;

  template <typename TAdaptedString>
  VariantData *get(TAdaptedString key) const;

  VariantSlot *head() const {
 8000e0c:	b480      	push	{r7}
 8000e0e:	b083      	sub	sp, #12
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
    return _head;
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	681b      	ldr	r3, [r3, #0]
  }
 8000e18:	4618      	mov	r0, r3
 8000e1a:	370c      	adds	r7, #12
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e22:	4770      	bx	lr

08000e24 <_ZN19ArduinoJson6101_11011VariantSlot4dataEv>:
  // - no constructor
  // - no destructor
  // - no virtual
  // - no inheritance

  VariantData* data() {
 8000e24:	b480      	push	{r7}
 8000e26:	b083      	sub	sp, #12
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<VariantData*>(&_content);
 8000e2c:	687b      	ldr	r3, [r7, #4]
  }
 8000e2e:	4618      	mov	r0, r3
 8000e30:	370c      	adds	r7, #12
 8000e32:	46bd      	mov	sp, r7
 8000e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e38:	4770      	bx	lr

08000e3a <_ZN19ArduinoJson6101_11011VariantSlot4nextEv>:

  const VariantData* data() const {
    return reinterpret_cast<const VariantData*>(&_content);
  }

  VariantSlot* next() {
 8000e3a:	b480      	push	{r7}
 8000e3c:	b083      	sub	sp, #12
 8000e3e:	af00      	add	r7, sp, #0
 8000e40:	6078      	str	r0, [r7, #4]
    return _next ? this + _next : 0;
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d006      	beq.n	8000e5a <_ZN19ArduinoJson6101_11011VariantSlot4nextEv+0x20>
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8000e52:	011b      	lsls	r3, r3, #4
 8000e54:	687a      	ldr	r2, [r7, #4]
 8000e56:	4413      	add	r3, r2
 8000e58:	e000      	b.n	8000e5c <_ZN19ArduinoJson6101_11011VariantSlot4nextEv+0x22>
 8000e5a:	2300      	movs	r3, #0
  }
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	370c      	adds	r7, #12
 8000e60:	46bd      	mov	sp, r7
 8000e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e66:	4770      	bx	lr

08000e68 <_ZN19ArduinoJson6101_11011VariantSlot14setNextNotNullEPS0_>:

  void setNext(VariantSlot* slot) {
    _next = VariantSlotDiff(slot ? slot - this : 0);
  }

  void setNextNotNull(VariantSlot* slot) {
 8000e68:	b480      	push	{r7}
 8000e6a:	b083      	sub	sp, #12
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
 8000e70:	6039      	str	r1, [r7, #0]
    ARDUINOJSON_ASSERT(slot != 0);
    _next = VariantSlotDiff(slot - this);
 8000e72:	683a      	ldr	r2, [r7, #0]
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	1ad3      	subs	r3, r2, r3
 8000e78:	111b      	asrs	r3, r3, #4
 8000e7a:	b21a      	sxth	r2, r3
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	815a      	strh	r2, [r3, #10]
  }
 8000e80:	bf00      	nop
 8000e82:	370c      	adds	r7, #12
 8000e84:	46bd      	mov	sp, r7
 8000e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8a:	4770      	bx	lr

08000e8c <_ZN19ArduinoJson6101_11011VariantSlot11setOwnedKeyENS_8not_nullIPKcEE>:

  void setOwnedKey(not_null<const char*> k) {
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b082      	sub	sp, #8
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
 8000e94:	6039      	str	r1, [r7, #0]
    _flags |= KEY_IS_OWNED;
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	7a1b      	ldrb	r3, [r3, #8]
 8000e9a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000e9e:	b2da      	uxtb	r2, r3
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	721a      	strb	r2, [r3, #8]
    _key = k.get();
 8000ea4:	463b      	mov	r3, r7
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	f001 fcde 	bl	8002868 <_ZNK19ArduinoJson6101_1108not_nullIPKcE3getEv>
 8000eac:	4602      	mov	r2, r0
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	60da      	str	r2, [r3, #12]
  }
 8000eb2:	bf00      	nop
 8000eb4:	3708      	adds	r7, #8
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}

08000eba <_ZNK19ArduinoJson6101_11011VariantSlot3keyEv>:
  void setLinkedKey(not_null<const char*> k) {
    _flags &= VALUE_MASK;
    _key = k.get();
  }

  const char* key() const {
 8000eba:	b480      	push	{r7}
 8000ebc:	b083      	sub	sp, #12
 8000ebe:	af00      	add	r7, sp, #0
 8000ec0:	6078      	str	r0, [r7, #4]
    return _key;
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	68db      	ldr	r3, [r3, #12]
  }
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	370c      	adds	r7, #12
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed0:	4770      	bx	lr

08000ed2 <_ZN19ArduinoJson6101_11011VariantSlot5clearEv>:

  bool ownsKey() const {
    return (_flags & KEY_IS_OWNED) != 0;
  }

  void clear() {
 8000ed2:	b480      	push	{r7}
 8000ed4:	b083      	sub	sp, #12
 8000ed6:	af00      	add	r7, sp, #0
 8000ed8:	6078      	str	r0, [r7, #4]
    _next = 0;
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	2200      	movs	r2, #0
 8000ede:	815a      	strh	r2, [r3, #10]
    _flags = 0;
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	721a      	strb	r2, [r3, #8]
    _key = 0;
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	2200      	movs	r2, #0
 8000eea:	60da      	str	r2, [r3, #12]
  }
 8000eec:	bf00      	nop
 8000eee:	370c      	adds	r7, #12
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef6:	4770      	bx	lr

08000ef8 <_ZN19ArduinoJson6101_11010addPaddingEj>:
  const size_t mask = sizeof(void *) - 1;
  size_t addr = reinterpret_cast<size_t>(ptr);
  return (addr & mask) == 0;
}

inline size_t addPadding(size_t bytes) {
 8000ef8:	b480      	push	{r7}
 8000efa:	b085      	sub	sp, #20
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
  const size_t mask = sizeof(void *) - 1;
 8000f00:	2303      	movs	r3, #3
 8000f02:	60fb      	str	r3, [r7, #12]
  return (bytes + mask) & ~mask;
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	3303      	adds	r3, #3
 8000f08:	f023 0303 	bic.w	r3, r3, #3
}
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	3714      	adds	r7, #20
 8000f10:	46bd      	mov	sp, r7
 8000f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f16:	4770      	bx	lr

08000f18 <_ZN19ArduinoJson6101_11010MemoryPoolC1EPcj>:
//               ^              ^
//             _left          _right

class MemoryPool {
 public:
  MemoryPool(char* buf, size_t capa)
 8000f18:	b480      	push	{r7}
 8000f1a:	b085      	sub	sp, #20
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	60f8      	str	r0, [r7, #12]
 8000f20:	60b9      	str	r1, [r7, #8]
 8000f22:	607a      	str	r2, [r7, #4]
      : _begin(buf),
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	68ba      	ldr	r2, [r7, #8]
 8000f28:	601a      	str	r2, [r3, #0]
        _left(buf),
 8000f2a:	68fb      	ldr	r3, [r7, #12]
 8000f2c:	68ba      	ldr	r2, [r7, #8]
 8000f2e:	605a      	str	r2, [r3, #4]
        _right(buf ? buf + capa : 0),
 8000f30:	68bb      	ldr	r3, [r7, #8]
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d003      	beq.n	8000f3e <_ZN19ArduinoJson6101_11010MemoryPoolC1EPcj+0x26>
 8000f36:	68ba      	ldr	r2, [r7, #8]
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	4413      	add	r3, r2
 8000f3c:	e000      	b.n	8000f40 <_ZN19ArduinoJson6101_11010MemoryPoolC1EPcj+0x28>
 8000f3e:	2300      	movs	r3, #0
 8000f40:	68fa      	ldr	r2, [r7, #12]
 8000f42:	6093      	str	r3, [r2, #8]
        _end(buf ? buf + capa : 0) {
 8000f44:	68bb      	ldr	r3, [r7, #8]
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d003      	beq.n	8000f52 <_ZN19ArduinoJson6101_11010MemoryPoolC1EPcj+0x3a>
 8000f4a:	68ba      	ldr	r2, [r7, #8]
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	4413      	add	r3, r2
 8000f50:	e000      	b.n	8000f54 <_ZN19ArduinoJson6101_11010MemoryPoolC1EPcj+0x3c>
 8000f52:	2300      	movs	r3, #0
 8000f54:	68fa      	ldr	r2, [r7, #12]
 8000f56:	60d3      	str	r3, [r2, #12]
    ARDUINOJSON_ASSERT(isAligned(_begin));
    ARDUINOJSON_ASSERT(isAligned(_right));
    ARDUINOJSON_ASSERT(isAligned(_end));
  }
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	3714      	adds	r7, #20
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f64:	4770      	bx	lr

08000f66 <_ZN19ArduinoJson6101_11010MemoryPool6bufferEv>:

  void* buffer() {
 8000f66:	b480      	push	{r7}
 8000f68:	b083      	sub	sp, #12
 8000f6a:	af00      	add	r7, sp, #0
 8000f6c:	6078      	str	r0, [r7, #4]
    return _begin;
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	681b      	ldr	r3, [r3, #0]
  }
 8000f72:	4618      	mov	r0, r3
 8000f74:	370c      	adds	r7, #12
 8000f76:	46bd      	mov	sp, r7
 8000f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7c:	4770      	bx	lr

08000f7e <_ZN19ArduinoJson6101_11010MemoryPool12allocVariantEv>:

  size_t size() const {
    return size_t(_left - _begin + _end - _right);
  }

  VariantSlot* allocVariant() {
 8000f7e:	b580      	push	{r7, lr}
 8000f80:	b082      	sub	sp, #8
 8000f82:	af00      	add	r7, sp, #0
 8000f84:	6078      	str	r0, [r7, #4]
    return allocRight<VariantSlot>();
 8000f86:	6878      	ldr	r0, [r7, #4]
 8000f88:	f001 fc7a 	bl	8002880 <_ZN19ArduinoJson6101_11010MemoryPool10allocRightINS_11VariantSlotEEEPT_v>
 8000f8c:	4603      	mov	r3, r0
  }
 8000f8e:	4618      	mov	r0, r3
 8000f90:	3708      	adds	r7, #8
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}

08000f96 <_ZN19ArduinoJson6101_11010MemoryPool21allocExpandableStringEv>:
    _left += n;
    checkInvariants();
    return s;
  }

  StringSlot allocExpandableString() {
 8000f96:	b580      	push	{r7, lr}
 8000f98:	b082      	sub	sp, #8
 8000f9a:	af00      	add	r7, sp, #0
 8000f9c:	6078      	str	r0, [r7, #4]
 8000f9e:	6039      	str	r1, [r7, #0]
    StringSlot s;
    s.value = _left;
 8000fa0:	683b      	ldr	r3, [r7, #0]
 8000fa2:	685a      	ldr	r2, [r3, #4]
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	601a      	str	r2, [r3, #0]
    s.size = size_t(_right - _left);
 8000fa8:	683b      	ldr	r3, [r7, #0]
 8000faa:	689a      	ldr	r2, [r3, #8]
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	685b      	ldr	r3, [r3, #4]
 8000fb0:	1ad3      	subs	r3, r2, r3
 8000fb2:	461a      	mov	r2, r3
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	605a      	str	r2, [r3, #4]
    _left = _right;
 8000fb8:	683b      	ldr	r3, [r7, #0]
 8000fba:	689a      	ldr	r2, [r3, #8]
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	605a      	str	r2, [r3, #4]
    checkInvariants();
 8000fc0:	6838      	ldr	r0, [r7, #0]
 8000fc2:	f000 f864 	bl	800108e <_ZN19ArduinoJson6101_11010MemoryPool15checkInvariantsEv>
    return s;
 8000fc6:	bf00      	nop
  }
 8000fc8:	6878      	ldr	r0, [r7, #4]
 8000fca:	3708      	adds	r7, #8
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd80      	pop	{r7, pc}

08000fd0 <_ZN19ArduinoJson6101_11010MemoryPool12freezeStringERNS_10StringSlotEj>:

  void freezeString(StringSlot& s, size_t newSize) {
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b084      	sub	sp, #16
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	60f8      	str	r0, [r7, #12]
 8000fd8:	60b9      	str	r1, [r7, #8]
 8000fda:	607a      	str	r2, [r7, #4]
    _left -= (s.size - newSize);
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	685a      	ldr	r2, [r3, #4]
 8000fe0:	68bb      	ldr	r3, [r7, #8]
 8000fe2:	685b      	ldr	r3, [r3, #4]
 8000fe4:	6879      	ldr	r1, [r7, #4]
 8000fe6:	1acb      	subs	r3, r1, r3
 8000fe8:	441a      	add	r2, r3
 8000fea:	68fb      	ldr	r3, [r7, #12]
 8000fec:	605a      	str	r2, [r3, #4]
    s.size = newSize;
 8000fee:	68bb      	ldr	r3, [r7, #8]
 8000ff0:	687a      	ldr	r2, [r7, #4]
 8000ff2:	605a      	str	r2, [r3, #4]
    checkInvariants();
 8000ff4:	68f8      	ldr	r0, [r7, #12]
 8000ff6:	f000 f84a 	bl	800108e <_ZN19ArduinoJson6101_11010MemoryPool15checkInvariantsEv>
  }
 8000ffa:	bf00      	nop
 8000ffc:	3710      	adds	r7, #16
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}

08001002 <_ZN19ArduinoJson6101_11010MemoryPool5clearEv>:

  void clear() {
 8001002:	b480      	push	{r7}
 8001004:	b083      	sub	sp, #12
 8001006:	af00      	add	r7, sp, #0
 8001008:	6078      	str	r0, [r7, #4]
    _left = _begin;
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	681a      	ldr	r2, [r3, #0]
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	605a      	str	r2, [r3, #4]
    _right = _end;
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	68da      	ldr	r2, [r3, #12]
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	609a      	str	r2, [r3, #8]
  }
 800101a:	bf00      	nop
 800101c:	370c      	adds	r7, #12
 800101e:	46bd      	mov	sp, r7
 8001020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001024:	4770      	bx	lr

08001026 <_ZNK19ArduinoJson6101_11010MemoryPool8canAllocEj>:

  bool canAlloc(size_t bytes) const {
 8001026:	b480      	push	{r7}
 8001028:	b083      	sub	sp, #12
 800102a:	af00      	add	r7, sp, #0
 800102c:	6078      	str	r0, [r7, #4]
 800102e:	6039      	str	r1, [r7, #0]
    return _left + bytes <= _right;
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	685a      	ldr	r2, [r3, #4]
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	441a      	add	r2, r3
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	689b      	ldr	r3, [r3, #8]
 800103c:	429a      	cmp	r2, r3
 800103e:	bf94      	ite	ls
 8001040:	2301      	movls	r3, #1
 8001042:	2300      	movhi	r3, #0
 8001044:	b2db      	uxtb	r3, r3
  }
 8001046:	4618      	mov	r0, r3
 8001048:	370c      	adds	r7, #12
 800104a:	46bd      	mov	sp, r7
 800104c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001050:	4770      	bx	lr

08001052 <_ZN19ArduinoJson6101_11010MemoryPool10allocRightEj>:
  template <typename T>
  T* allocRight() {
    return reinterpret_cast<T*>(allocRight(sizeof(T)));
  }

  void* allocRight(size_t bytes) {
 8001052:	b580      	push	{r7, lr}
 8001054:	b082      	sub	sp, #8
 8001056:	af00      	add	r7, sp, #0
 8001058:	6078      	str	r0, [r7, #4]
 800105a:	6039      	str	r1, [r7, #0]
    if (!canAlloc(bytes)) return 0;
 800105c:	6839      	ldr	r1, [r7, #0]
 800105e:	6878      	ldr	r0, [r7, #4]
 8001060:	f7ff ffe1 	bl	8001026 <_ZNK19ArduinoJson6101_11010MemoryPool8canAllocEj>
 8001064:	4603      	mov	r3, r0
 8001066:	f083 0301 	eor.w	r3, r3, #1
 800106a:	b2db      	uxtb	r3, r3
 800106c:	2b00      	cmp	r3, #0
 800106e:	d001      	beq.n	8001074 <_ZN19ArduinoJson6101_11010MemoryPool10allocRightEj+0x22>
 8001070:	2300      	movs	r3, #0
 8001072:	e008      	b.n	8001086 <_ZN19ArduinoJson6101_11010MemoryPool10allocRightEj+0x34>
    _right -= bytes;
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	689a      	ldr	r2, [r3, #8]
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	425b      	negs	r3, r3
 800107c:	441a      	add	r2, r3
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	609a      	str	r2, [r3, #8]
    return _right;
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	689b      	ldr	r3, [r3, #8]
  }
 8001086:	4618      	mov	r0, r3
 8001088:	3708      	adds	r7, #8
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}

0800108e <_ZN19ArduinoJson6101_11010MemoryPool15checkInvariantsEv>:
 private:
  StringSlot* allocStringSlot() {
    return allocRight<StringSlot>();
  }

  void checkInvariants() {
 800108e:	b480      	push	{r7}
 8001090:	b083      	sub	sp, #12
 8001092:	af00      	add	r7, sp, #0
 8001094:	6078      	str	r0, [r7, #4]
    ARDUINOJSON_ASSERT(_begin <= _left);
    ARDUINOJSON_ASSERT(_left <= _right);
    ARDUINOJSON_ASSERT(_right <= _end);
    ARDUINOJSON_ASSERT(isAligned(_right));
  }
 8001096:	bf00      	nop
 8001098:	370c      	adds	r7, #12
 800109a:	46bd      	mov	sp, r7
 800109c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a0:	4770      	bx	lr

080010a2 <_ZN19ArduinoJson6101_11021ConstRamStringAdapterC1EPKc>:

namespace ARDUINOJSON_NAMESPACE {

class ConstRamStringAdapter {
 public:
  ConstRamStringAdapter(const char* str = 0) : _str(str) {}
 80010a2:	b480      	push	{r7}
 80010a4:	b083      	sub	sp, #12
 80010a6:	af00      	add	r7, sp, #0
 80010a8:	6078      	str	r0, [r7, #4]
 80010aa:	6039      	str	r1, [r7, #0]
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	683a      	ldr	r2, [r7, #0]
 80010b0:	601a      	str	r2, [r3, #0]
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	4618      	mov	r0, r3
 80010b6:	370c      	adds	r7, #12
 80010b8:	46bd      	mov	sp, r7
 80010ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010be:	4770      	bx	lr

080010c0 <_ZNK19ArduinoJson6101_11021ConstRamStringAdapter6equalsEPKc>:

  bool equals(const char* expected) const {
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b084      	sub	sp, #16
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
 80010c8:	6039      	str	r1, [r7, #0]
    const char* actual = _str;
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	60fb      	str	r3, [r7, #12]
    if (!actual || !expected) return actual == expected;
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d002      	beq.n	80010dc <_ZNK19ArduinoJson6101_11021ConstRamStringAdapter6equalsEPKc+0x1c>
 80010d6:	683b      	ldr	r3, [r7, #0]
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d107      	bne.n	80010ec <_ZNK19ArduinoJson6101_11021ConstRamStringAdapter6equalsEPKc+0x2c>
 80010dc:	68fa      	ldr	r2, [r7, #12]
 80010de:	683b      	ldr	r3, [r7, #0]
 80010e0:	429a      	cmp	r2, r3
 80010e2:	bf0c      	ite	eq
 80010e4:	2301      	moveq	r3, #1
 80010e6:	2300      	movne	r3, #0
 80010e8:	b2db      	uxtb	r3, r3
 80010ea:	e009      	b.n	8001100 <_ZNK19ArduinoJson6101_11021ConstRamStringAdapter6equalsEPKc+0x40>
    return strcmp(actual, expected) == 0;
 80010ec:	6839      	ldr	r1, [r7, #0]
 80010ee:	68f8      	ldr	r0, [r7, #12]
 80010f0:	f7ff f8f6 	bl	80002e0 <strcmp>
 80010f4:	4603      	mov	r3, r0
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	bf0c      	ite	eq
 80010fa:	2301      	moveq	r3, #1
 80010fc:	2300      	movne	r3, #0
 80010fe:	b2db      	uxtb	r3, r3
  }
 8001100:	4618      	mov	r0, r3
 8001102:	3710      	adds	r7, #16
 8001104:	46bd      	mov	sp, r7
 8001106:	bd80      	pop	{r7, pc}

08001108 <_ZN19ArduinoJson6101_11011adaptStringEPKc>:

 protected:
  const char* _str;
};

inline ConstRamStringAdapter adaptString(const char* str) {
 8001108:	b580      	push	{r7, lr}
 800110a:	b084      	sub	sp, #16
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
  return ConstRamStringAdapter(str);
 8001110:	f107 030c 	add.w	r3, r7, #12
 8001114:	6879      	ldr	r1, [r7, #4]
 8001116:	4618      	mov	r0, r3
 8001118:	f7ff ffc3 	bl	80010a2 <_ZN19ArduinoJson6101_11021ConstRamStringAdapterC1EPKc>
 800111c:	68fb      	ldr	r3, [r7, #12]
}
 800111e:	4618      	mov	r0, r3
 8001120:	3710      	adds	r7, #16
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}

08001126 <_ZNSt11char_traitsIcE6lengthEPKc>:
#endif
	return __builtin_memcmp(__s1, __s2, __n);
      }

      static _GLIBCXX17_CONSTEXPR size_t
      length(const char_type* __s)
 8001126:	b580      	push	{r7, lr}
 8001128:	b082      	sub	sp, #8
 800112a:	af00      	add	r7, sp, #0
 800112c:	6078      	str	r0, [r7, #4]
      {
#if __cplusplus >= 201703L
	if (std::__is_constant_evaluated())
 800112e:	f7ff fe65 	bl	8000dfc <__is_constant_evaluated>
 8001132:	4603      	mov	r3, r0
 8001134:	2b00      	cmp	r3, #0
 8001136:	d004      	beq.n	8001142 <_ZNSt11char_traitsIcE6lengthEPKc+0x1c>
	  return __gnu_cxx::char_traits<char_type>::length(__s);
 8001138:	6878      	ldr	r0, [r7, #4]
 800113a:	f001 fbae 	bl	800289a <_ZN9__gnu_cxx11char_traitsIcE6lengthEPKc>
 800113e:	4603      	mov	r3, r0
 8001140:	e004      	b.n	800114c <_ZNSt11char_traitsIcE6lengthEPKc+0x26>
#endif
	return __builtin_strlen(__s);
 8001142:	6878      	ldr	r0, [r7, #4]
 8001144:	f7ff f92c 	bl	80003a0 <strlen>
 8001148:	4603      	mov	r3, r0
 800114a:	bf00      	nop
      }
 800114c:	4618      	mov	r0, r3
 800114e:	3708      	adds	r7, #8
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}

08001154 <_ZN19ArduinoJson6101_11011VariantData7asArrayEv>:

  const char *asString() const;

  bool asBoolean() const;

  CollectionData *asArray() {
 8001154:	b580      	push	{r7, lr}
 8001156:	b082      	sub	sp, #8
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
    return isArray() ? &_content.asCollection : 0;
 800115c:	6878      	ldr	r0, [r7, #4]
 800115e:	f000 f81b 	bl	8001198 <_ZNK19ArduinoJson6101_11011VariantData7isArrayEv>
 8001162:	4603      	mov	r3, r0
 8001164:	2b00      	cmp	r3, #0
 8001166:	d001      	beq.n	800116c <_ZN19ArduinoJson6101_11011VariantData7asArrayEv+0x18>
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	e000      	b.n	800116e <_ZN19ArduinoJson6101_11011VariantData7asArrayEv+0x1a>
 800116c:	2300      	movs	r3, #0
  }
 800116e:	4618      	mov	r0, r3
 8001170:	3708      	adds	r7, #8
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}

08001176 <_ZN19ArduinoJson6101_11011VariantData8asObjectEv>:

  const CollectionData *asArray() const {
    return const_cast<VariantData *>(this)->asArray();
  }

  CollectionData *asObject() {
 8001176:	b580      	push	{r7, lr}
 8001178:	b082      	sub	sp, #8
 800117a:	af00      	add	r7, sp, #0
 800117c:	6078      	str	r0, [r7, #4]
    return isObject() ? &_content.asCollection : 0;
 800117e:	6878      	ldr	r0, [r7, #4]
 8001180:	f000 f81d 	bl	80011be <_ZNK19ArduinoJson6101_11011VariantData8isObjectEv>
 8001184:	4603      	mov	r3, r0
 8001186:	2b00      	cmp	r3, #0
 8001188:	d001      	beq.n	800118e <_ZN19ArduinoJson6101_11011VariantData8asObjectEv+0x18>
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	e000      	b.n	8001190 <_ZN19ArduinoJson6101_11011VariantData8asObjectEv+0x1a>
 800118e:	2300      	movs	r3, #0
  }
 8001190:	4618      	mov	r0, r3
 8001192:	3708      	adds	r7, #8
 8001194:	46bd      	mov	sp, r7
 8001196:	bd80      	pop	{r7, pc}

08001198 <_ZNK19ArduinoJson6101_11011VariantData7isArrayEv>:
      default:
        return true;
    }
  }

  bool isArray() const {
 8001198:	b480      	push	{r7}
 800119a:	b083      	sub	sp, #12
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
    return (_flags & VALUE_IS_ARRAY) != 0;
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	7a1b      	ldrb	r3, [r3, #8]
 80011a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	bf14      	ite	ne
 80011ac:	2301      	movne	r3, #1
 80011ae:	2300      	moveq	r3, #0
 80011b0:	b2db      	uxtb	r3, r3
  }
 80011b2:	4618      	mov	r0, r3
 80011b4:	370c      	adds	r7, #12
 80011b6:	46bd      	mov	sp, r7
 80011b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011bc:	4770      	bx	lr

080011be <_ZNK19ArduinoJson6101_11011VariantData8isObjectEv>:

  bool isString() const {
    return type() == VALUE_IS_LINKED_STRING || type() == VALUE_IS_OWNED_STRING;
  }

  bool isObject() const {
 80011be:	b480      	push	{r7}
 80011c0:	b083      	sub	sp, #12
 80011c2:	af00      	add	r7, sp, #0
 80011c4:	6078      	str	r0, [r7, #4]
    return (_flags & VALUE_IS_OBJECT) != 0;
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	7a1b      	ldrb	r3, [r3, #8]
 80011ca:	f003 0320 	and.w	r3, r3, #32
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	bf14      	ite	ne
 80011d2:	2301      	movne	r3, #1
 80011d4:	2300      	moveq	r3, #0
 80011d6:	b2db      	uxtb	r3, r3
  }
 80011d8:	4618      	mov	r0, r3
 80011da:	370c      	adds	r7, #12
 80011dc:	46bd      	mov	sp, r7
 80011de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e2:	4770      	bx	lr

080011e4 <_ZN19ArduinoJson6101_11011VariantData10setBooleanEb>:
  template <typename TAdaptedString>
  void remove(TAdaptedString key) {
    if (isObject()) _content.asCollection.remove(key);
  }

  void setBoolean(bool value) {
 80011e4:	b5b0      	push	{r4, r5, r7, lr}
 80011e6:	b082      	sub	sp, #8
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
 80011ec:	460b      	mov	r3, r1
 80011ee:	70fb      	strb	r3, [r7, #3]
    setType(VALUE_IS_BOOLEAN);
 80011f0:	2105      	movs	r1, #5
 80011f2:	6878      	ldr	r0, [r7, #4]
 80011f4:	f000 f895 	bl	8001322 <_ZN19ArduinoJson6101_11011VariantData7setTypeEh>
    _content.asInteger = static_cast<UInt>(value);
 80011f8:	78fb      	ldrb	r3, [r7, #3]
 80011fa:	2200      	movs	r2, #0
 80011fc:	461c      	mov	r4, r3
 80011fe:	4615      	mov	r5, r2
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	e9c3 4500 	strd	r4, r5, [r3]
  }
 8001206:	bf00      	nop
 8001208:	3708      	adds	r7, #8
 800120a:	46bd      	mov	sp, r7
 800120c:	bdb0      	pop	{r4, r5, r7, pc}

0800120e <_ZN19ArduinoJson6101_11011VariantData8setFloatEd>:

  void setFloat(Float value) {
 800120e:	b580      	push	{r7, lr}
 8001210:	b084      	sub	sp, #16
 8001212:	af00      	add	r7, sp, #0
 8001214:	60f8      	str	r0, [r7, #12]
 8001216:	ed87 0b00 	vstr	d0, [r7]
    setType(VALUE_IS_FLOAT);
 800121a:	2108      	movs	r1, #8
 800121c:	68f8      	ldr	r0, [r7, #12]
 800121e:	f000 f880 	bl	8001322 <_ZN19ArduinoJson6101_11011VariantData7setTypeEh>
    _content.asFloat = value;
 8001222:	68f9      	ldr	r1, [r7, #12]
 8001224:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001228:	e9c1 2300 	strd	r2, r3, [r1]
  }
 800122c:	bf00      	nop
 800122e:	3710      	adds	r7, #16
 8001230:	46bd      	mov	sp, r7
 8001232:	bd80      	pop	{r7, pc}

08001234 <_ZN19ArduinoJson6101_11011VariantData18setPositiveIntegerEy>:
    } else {
      setNegativeInteger(~static_cast<UInt>(value) + 1);
    }
  }

  void setPositiveInteger(UInt value) {
 8001234:	b580      	push	{r7, lr}
 8001236:	b084      	sub	sp, #16
 8001238:	af00      	add	r7, sp, #0
 800123a:	60f8      	str	r0, [r7, #12]
 800123c:	e9c7 2300 	strd	r2, r3, [r7]
    setType(VALUE_IS_POSITIVE_INTEGER);
 8001240:	2106      	movs	r1, #6
 8001242:	68f8      	ldr	r0, [r7, #12]
 8001244:	f000 f86d 	bl	8001322 <_ZN19ArduinoJson6101_11011VariantData7setTypeEh>
    _content.asInteger = value;
 8001248:	68f9      	ldr	r1, [r7, #12]
 800124a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800124e:	e9c1 2300 	strd	r2, r3, [r1]
  }
 8001252:	bf00      	nop
 8001254:	3710      	adds	r7, #16
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}

0800125a <_ZN19ArduinoJson6101_11011VariantData18setNegativeIntegerEy>:

  void setNegativeInteger(UInt value) {
 800125a:	b580      	push	{r7, lr}
 800125c:	b084      	sub	sp, #16
 800125e:	af00      	add	r7, sp, #0
 8001260:	60f8      	str	r0, [r7, #12]
 8001262:	e9c7 2300 	strd	r2, r3, [r7]
    setType(VALUE_IS_NEGATIVE_INTEGER);
 8001266:	2107      	movs	r1, #7
 8001268:	68f8      	ldr	r0, [r7, #12]
 800126a:	f000 f85a 	bl	8001322 <_ZN19ArduinoJson6101_11011VariantData7setTypeEh>
    _content.asInteger = value;
 800126e:	68f9      	ldr	r1, [r7, #12]
 8001270:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001274:	e9c1 2300 	strd	r2, r3, [r1]
  }
 8001278:	bf00      	nop
 800127a:	3710      	adds	r7, #16
 800127c:	46bd      	mov	sp, r7
 800127e:	bd80      	pop	{r7, pc}

08001280 <_ZN19ArduinoJson6101_11011VariantData7setNullEv>:
    } else {
      setType(VALUE_IS_NULL);
    }
  }

  void setNull() {
 8001280:	b580      	push	{r7, lr}
 8001282:	b082      	sub	sp, #8
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
    setType(VALUE_IS_NULL);
 8001288:	2100      	movs	r1, #0
 800128a:	6878      	ldr	r0, [r7, #4]
 800128c:	f000 f849 	bl	8001322 <_ZN19ArduinoJson6101_11011VariantData7setTypeEh>
  }
 8001290:	bf00      	nop
 8001292:	3708      	adds	r7, #8
 8001294:	46bd      	mov	sp, r7
 8001296:	bd80      	pop	{r7, pc}

08001298 <_ZN19ArduinoJson6101_11011VariantData14setOwnedStringENS_8not_nullIPKcEE>:

  void setOwnedString(not_null<const char *> s) {
 8001298:	b580      	push	{r7, lr}
 800129a:	b082      	sub	sp, #8
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
 80012a0:	6039      	str	r1, [r7, #0]
    setType(VALUE_IS_OWNED_STRING);
 80012a2:	2104      	movs	r1, #4
 80012a4:	6878      	ldr	r0, [r7, #4]
 80012a6:	f000 f83c 	bl	8001322 <_ZN19ArduinoJson6101_11011VariantData7setTypeEh>
    _content.asString = s.get();
 80012aa:	463b      	mov	r3, r7
 80012ac:	4618      	mov	r0, r3
 80012ae:	f001 fadb 	bl	8002868 <_ZNK19ArduinoJson6101_1108not_nullIPKcE3getEv>
 80012b2:	4602      	mov	r2, r0
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	601a      	str	r2, [r3, #0]
  }
 80012b8:	bf00      	nop
 80012ba:	3708      	adds	r7, #8
 80012bc:	46bd      	mov	sp, r7
 80012be:	bd80      	pop	{r7, pc}

080012c0 <_ZN19ArduinoJson6101_11011VariantData7toArrayEv>:
  void setUnsignedInteger(UInt value) {
    setType(VALUE_IS_POSITIVE_INTEGER);
    _content.asInteger = static_cast<UInt>(value);
  }

  CollectionData &toArray() {
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b082      	sub	sp, #8
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
    setType(VALUE_IS_ARRAY);
 80012c8:	2140      	movs	r1, #64	@ 0x40
 80012ca:	6878      	ldr	r0, [r7, #4]
 80012cc:	f000 f829 	bl	8001322 <_ZN19ArduinoJson6101_11011VariantData7setTypeEh>
    _content.asCollection.clear();
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	4618      	mov	r0, r3
 80012d4:	f000 f957 	bl	8001586 <_ZN19ArduinoJson6101_11014CollectionData5clearEv>
    return _content.asCollection;
 80012d8:	687b      	ldr	r3, [r7, #4]
  }
 80012da:	4618      	mov	r0, r3
 80012dc:	3708      	adds	r7, #8
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}

080012e2 <_ZN19ArduinoJson6101_11011VariantData8toObjectEv>:

  CollectionData &toObject() {
 80012e2:	b580      	push	{r7, lr}
 80012e4:	b082      	sub	sp, #8
 80012e6:	af00      	add	r7, sp, #0
 80012e8:	6078      	str	r0, [r7, #4]
    setType(VALUE_IS_OBJECT);
 80012ea:	2120      	movs	r1, #32
 80012ec:	6878      	ldr	r0, [r7, #4]
 80012ee:	f000 f818 	bl	8001322 <_ZN19ArduinoJson6101_11011VariantData7setTypeEh>
    _content.asCollection.clear();
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	4618      	mov	r0, r3
 80012f6:	f000 f946 	bl	8001586 <_ZN19ArduinoJson6101_11014CollectionData5clearEv>
    return _content.asCollection;
 80012fa:	687b      	ldr	r3, [r7, #4]
  }
 80012fc:	4618      	mov	r0, r3
 80012fe:	3708      	adds	r7, #8
 8001300:	46bd      	mov	sp, r7
 8001302:	bd80      	pop	{r7, pc}

08001304 <_ZNK19ArduinoJson6101_11011VariantData4typeEv>:
    if (var) return var;
    return _content.asCollection.add(key, pool);
  }

 private:
  uint8_t type() const {
 8001304:	b480      	push	{r7}
 8001306:	b083      	sub	sp, #12
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
    return _flags & VALUE_MASK;
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	7a1b      	ldrb	r3, [r3, #8]
 8001310:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001314:	b2db      	uxtb	r3, r3
  }
 8001316:	4618      	mov	r0, r3
 8001318:	370c      	adds	r7, #12
 800131a:	46bd      	mov	sp, r7
 800131c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001320:	4770      	bx	lr

08001322 <_ZN19ArduinoJson6101_11011VariantData7setTypeEh>:

  void setType(uint8_t t) {
 8001322:	b480      	push	{r7}
 8001324:	b083      	sub	sp, #12
 8001326:	af00      	add	r7, sp, #0
 8001328:	6078      	str	r0, [r7, #4]
 800132a:	460b      	mov	r3, r1
 800132c:	70fb      	strb	r3, [r7, #3]
    _flags &= KEY_IS_OWNED;
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	7a1b      	ldrb	r3, [r3, #8]
 8001332:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8001336:	b2da      	uxtb	r2, r3
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	721a      	strb	r2, [r3, #8]
    _flags |= t;
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	7a1a      	ldrb	r2, [r3, #8]
 8001340:	78fb      	ldrb	r3, [r7, #3]
 8001342:	4313      	orrs	r3, r2
 8001344:	b2da      	uxtb	r2, r3
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	721a      	strb	r2, [r3, #8]
  }
 800134a:	bf00      	nop
 800134c:	370c      	adds	r7, #12
 800134e:	46bd      	mov	sp, r7
 8001350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001354:	4770      	bx	lr

08001356 <_ZN19ArduinoJson6101_1108slotDataEPNS_11VariantSlotE>:
    var = var->next();
  }
  return n;
}

inline VariantData* slotData(VariantSlot* slot) {
 8001356:	b480      	push	{r7}
 8001358:	b083      	sub	sp, #12
 800135a:	af00      	add	r7, sp, #0
 800135c:	6078      	str	r0, [r7, #4]
  return reinterpret_cast<VariantData*>(slot);
 800135e:	687b      	ldr	r3, [r7, #4]
}
 8001360:	4618      	mov	r0, r3
 8001362:	370c      	adds	r7, #12
 8001364:	46bd      	mov	sp, r7
 8001366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136a:	4770      	bx	lr

0800136c <_ZN19ArduinoJson6101_11015variantAsObjectEPNS_11VariantDataE>:

inline const CollectionData *variantAsObject(const VariantData *var) {
  return var != 0 ? var->asObject() : 0;
}

inline CollectionData *variantAsObject(VariantData *var) {
 800136c:	b580      	push	{r7, lr}
 800136e:	b082      	sub	sp, #8
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
  return var != 0 ? var->asObject() : 0;
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	2b00      	cmp	r3, #0
 8001378:	d004      	beq.n	8001384 <_ZN19ArduinoJson6101_11015variantAsObjectEPNS_11VariantDataE+0x18>
 800137a:	6878      	ldr	r0, [r7, #4]
 800137c:	f7ff fefb 	bl	8001176 <_ZN19ArduinoJson6101_11011VariantData8asObjectEv>
 8001380:	4603      	mov	r3, r0
 8001382:	e000      	b.n	8001386 <_ZN19ArduinoJson6101_11015variantAsObjectEPNS_11VariantDataE+0x1a>
 8001384:	2300      	movs	r3, #0
}
 8001386:	4618      	mov	r0, r3
 8001388:	3708      	adds	r7, #8
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}

0800138e <_ZN19ArduinoJson6101_11013ArrayIteratorC1Ev>:
  VariantRef _variant;
};

class ArrayIterator {
 public:
  ArrayIterator() : _slot(0) {}
 800138e:	b480      	push	{r7}
 8001390:	b083      	sub	sp, #12
 8001392:	af00      	add	r7, sp, #0
 8001394:	6078      	str	r0, [r7, #4]
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	2200      	movs	r2, #0
 800139a:	605a      	str	r2, [r3, #4]
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	4618      	mov	r0, r3
 80013a0:	370c      	adds	r7, #12
 80013a2:	46bd      	mov	sp, r7
 80013a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a8:	4770      	bx	lr

080013aa <_ZN19ArduinoJson6101_11013ArrayIteratorC1EPNS_10MemoryPoolEPNS_11VariantSlotE>:
  explicit ArrayIterator(MemoryPool *pool, VariantSlot *slot)
 80013aa:	b480      	push	{r7}
 80013ac:	b085      	sub	sp, #20
 80013ae:	af00      	add	r7, sp, #0
 80013b0:	60f8      	str	r0, [r7, #12]
 80013b2:	60b9      	str	r1, [r7, #8]
 80013b4:	607a      	str	r2, [r7, #4]
      : _pool(pool), _slot(slot) {}
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	68ba      	ldr	r2, [r7, #8]
 80013ba:	601a      	str	r2, [r3, #0]
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	687a      	ldr	r2, [r7, #4]
 80013c0:	605a      	str	r2, [r3, #4]
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	4618      	mov	r0, r3
 80013c6:	3714      	adds	r7, #20
 80013c8:	46bd      	mov	sp, r7
 80013ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ce:	4770      	bx	lr

080013d0 <_ZNK19ArduinoJson6101_11013ArrayIteratordeEv>:

  VariantRef operator*() const {
 80013d0:	b590      	push	{r4, r7, lr}
 80013d2:	b085      	sub	sp, #20
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
 80013d8:	6039      	str	r1, [r7, #0]
    return VariantRef(_pool, _slot->data());
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	681c      	ldr	r4, [r3, #0]
 80013de:	683b      	ldr	r3, [r7, #0]
 80013e0:	685b      	ldr	r3, [r3, #4]
 80013e2:	4618      	mov	r0, r3
 80013e4:	f7ff fd1e 	bl	8000e24 <_ZN19ArduinoJson6101_11011VariantSlot4dataEv>
 80013e8:	4603      	mov	r3, r0
 80013ea:	60fc      	str	r4, [r7, #12]
 80013ec:	60bb      	str	r3, [r7, #8]
  friend class VariantConstRef;

 public:
  // Intenal use only
  FORCE_INLINE VariantRef(MemoryPool *pool, VariantData *data)
      : base_type(data), _pool(pool) {}
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	68b9      	ldr	r1, [r7, #8]
 80013f2:	4618      	mov	r0, r3
 80013f4:	f001 fa80 	bl	80028f8 <_ZN19ArduinoJson6101_11014VariantRefBaseINS_11VariantDataEEC1EPS1_>
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	68fa      	ldr	r2, [r7, #12]
 80013fc:	605a      	str	r2, [r3, #4]
 80013fe:	bf00      	nop
  }
 8001400:	6878      	ldr	r0, [r7, #4]
 8001402:	3714      	adds	r7, #20
 8001404:	46bd      	mov	sp, r7
 8001406:	bd90      	pop	{r4, r7, pc}

08001408 <_ZNK19ArduinoJson6101_11013ArrayIteratorneERKS0_>:

  bool operator==(const ArrayIterator &other) const {
    return _slot == other._slot;
  }

  bool operator!=(const ArrayIterator &other) const {
 8001408:	b480      	push	{r7}
 800140a:	b083      	sub	sp, #12
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
 8001410:	6039      	str	r1, [r7, #0]
    return _slot != other._slot;
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	685a      	ldr	r2, [r3, #4]
 8001416:	683b      	ldr	r3, [r7, #0]
 8001418:	685b      	ldr	r3, [r3, #4]
 800141a:	429a      	cmp	r2, r3
 800141c:	bf14      	ite	ne
 800141e:	2301      	movne	r3, #1
 8001420:	2300      	moveq	r3, #0
 8001422:	b2db      	uxtb	r3, r3
  }
 8001424:	4618      	mov	r0, r3
 8001426:	370c      	adds	r7, #12
 8001428:	46bd      	mov	sp, r7
 800142a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142e:	4770      	bx	lr

08001430 <_ZN19ArduinoJson6101_11013ArrayIteratorppEv>:

  ArrayIterator &operator++() {
 8001430:	b580      	push	{r7, lr}
 8001432:	b082      	sub	sp, #8
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
    _slot = _slot->next();
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	685b      	ldr	r3, [r3, #4]
 800143c:	4618      	mov	r0, r3
 800143e:	f7ff fcfc 	bl	8000e3a <_ZN19ArduinoJson6101_11011VariantSlot4nextEv>
 8001442:	4602      	mov	r2, r0
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	605a      	str	r2, [r3, #4]
    return *this;
 8001448:	687b      	ldr	r3, [r7, #4]
  }
 800144a:	4618      	mov	r0, r3
 800144c:	3708      	adds	r7, #8
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}

08001452 <_ZN19ArduinoJson6101_11012JsonDocument5clearEv>:
  template <typename T>
  typename VariantConstAs<T>::type as() const {
    return getVariant().template as<T>();
  }

  void clear() {
 8001452:	b580      	push	{r7, lr}
 8001454:	b082      	sub	sp, #8
 8001456:	af00      	add	r7, sp, #0
 8001458:	6078      	str	r0, [r7, #4]
    _pool.clear();
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	4618      	mov	r0, r3
 800145e:	f7ff fdd0 	bl	8001002 <_ZN19ArduinoJson6101_11010MemoryPool5clearEv>
    _data.setNull();
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	3310      	adds	r3, #16
 8001466:	4618      	mov	r0, r3
 8001468:	f7ff ff0a 	bl	8001280 <_ZN19ArduinoJson6101_11011VariantData7setNullEv>
  }
 800146c:	bf00      	nop
 800146e:	3708      	adds	r7, #8
 8001470:	46bd      	mov	sp, r7
 8001472:	bd80      	pop	{r7, pc}

08001474 <_ZN19ArduinoJson6101_11012JsonDocument10memoryPoolEv>:
    clear();
    return getVariant().template to<T>();
  }

  // for internal use only
  MemoryPool& memoryPool() {
 8001474:	b480      	push	{r7}
 8001476:	b083      	sub	sp, #12
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
    return _pool;
 800147c:	687b      	ldr	r3, [r7, #4]
  }
 800147e:	4618      	mov	r0, r3
 8001480:	370c      	adds	r7, #12
 8001482:	46bd      	mov	sp, r7
 8001484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001488:	4770      	bx	lr

0800148a <_ZN19ArduinoJson6101_11012JsonDocument4dataEv>:

  VariantData& data() {
 800148a:	b480      	push	{r7}
 800148c:	b083      	sub	sp, #12
 800148e:	af00      	add	r7, sp, #0
 8001490:	6078      	str	r0, [r7, #4]
    return _data;
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	3310      	adds	r3, #16
  }
 8001496:	4618      	mov	r0, r3
 8001498:	370c      	adds	r7, #12
 800149a:	46bd      	mov	sp, r7
 800149c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a0:	4770      	bx	lr

080014a2 <_ZN19ArduinoJson6101_11012JsonDocumentC1ENS_10MemoryPoolE>:
      const TString& key) {
    _data.remove(adaptString(key));
  }

 protected:
  JsonDocument(MemoryPool pool) : _pool(pool) {
 80014a2:	b084      	sub	sp, #16
 80014a4:	b590      	push	{r4, r7, lr}
 80014a6:	b083      	sub	sp, #12
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
 80014ac:	f107 001c 	add.w	r0, r7, #28
 80014b0:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	461c      	mov	r4, r3
 80014b8:	f107 031c 	add.w	r3, r7, #28
 80014bc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80014be:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    _data.setNull();
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	3310      	adds	r3, #16
 80014c6:	4618      	mov	r0, r3
 80014c8:	f7ff feda 	bl	8001280 <_ZN19ArduinoJson6101_11011VariantData7setNullEv>
  }
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	4618      	mov	r0, r3
 80014d0:	370c      	adds	r7, #12
 80014d2:	46bd      	mov	sp, r7
 80014d4:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80014d8:	b004      	add	sp, #16
 80014da:	4770      	bx	lr

080014dc <_ZN19ArduinoJson6101_11016DefaultAllocator8allocateEj>:
#include <stdlib.h>  // malloc, free

namespace ARDUINOJSON_NAMESPACE {

struct DefaultAllocator {
  void* allocate(size_t n) {
 80014dc:	b580      	push	{r7, lr}
 80014de:	b082      	sub	sp, #8
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
 80014e4:	6039      	str	r1, [r7, #0]
    return malloc(n);
 80014e6:	6838      	ldr	r0, [r7, #0]
 80014e8:	f011 fee6 	bl	80132b8 <malloc>
 80014ec:	4603      	mov	r3, r0
  }
 80014ee:	4618      	mov	r0, r3
 80014f0:	3708      	adds	r7, #8
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}

080014f6 <_ZN19ArduinoJson6101_11016DefaultAllocator10deallocateEPv>:

  void deallocate(void* p) {
 80014f6:	b580      	push	{r7, lr}
 80014f8:	b082      	sub	sp, #8
 80014fa:	af00      	add	r7, sp, #0
 80014fc:	6078      	str	r0, [r7, #4]
 80014fe:	6039      	str	r1, [r7, #0]
    free(p);
 8001500:	6838      	ldr	r0, [r7, #0]
 8001502:	f011 fee1 	bl	80132c8 <free>
  }
 8001506:	bf00      	nop
 8001508:	3708      	adds	r7, #8
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}

0800150e <_ZN19ArduinoJson6101_11014CollectionData7addSlotEPNS_10MemoryPoolE>:
#include "../Variant/VariantData.hpp"
#include "CollectionData.hpp"

namespace ARDUINOJSON_NAMESPACE {

inline VariantSlot* CollectionData::addSlot(MemoryPool* pool) {
 800150e:	b580      	push	{r7, lr}
 8001510:	b084      	sub	sp, #16
 8001512:	af00      	add	r7, sp, #0
 8001514:	6078      	str	r0, [r7, #4]
 8001516:	6039      	str	r1, [r7, #0]
  VariantSlot* slot = pool->allocVariant();
 8001518:	6838      	ldr	r0, [r7, #0]
 800151a:	f7ff fd30 	bl	8000f7e <_ZN19ArduinoJson6101_11010MemoryPool12allocVariantEv>
 800151e:	60f8      	str	r0, [r7, #12]
  if (!slot) return 0;
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	2b00      	cmp	r3, #0
 8001524:	d101      	bne.n	800152a <_ZN19ArduinoJson6101_11014CollectionData7addSlotEPNS_10MemoryPoolE+0x1c>
 8001526:	2300      	movs	r3, #0
 8001528:	e017      	b.n	800155a <_ZN19ArduinoJson6101_11014CollectionData7addSlotEPNS_10MemoryPoolE+0x4c>

  if (_tail) {
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	685b      	ldr	r3, [r3, #4]
 800152e:	2b00      	cmp	r3, #0
 8001530:	d009      	beq.n	8001546 <_ZN19ArduinoJson6101_11014CollectionData7addSlotEPNS_10MemoryPoolE+0x38>
    _tail->setNextNotNull(slot);
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	685b      	ldr	r3, [r3, #4]
 8001536:	68f9      	ldr	r1, [r7, #12]
 8001538:	4618      	mov	r0, r3
 800153a:	f7ff fc95 	bl	8000e68 <_ZN19ArduinoJson6101_11011VariantSlot14setNextNotNullEPS0_>
    _tail = slot;
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	68fa      	ldr	r2, [r7, #12]
 8001542:	605a      	str	r2, [r3, #4]
 8001544:	e005      	b.n	8001552 <_ZN19ArduinoJson6101_11014CollectionData7addSlotEPNS_10MemoryPoolE+0x44>
  } else {
    _head = slot;
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	68fa      	ldr	r2, [r7, #12]
 800154a:	601a      	str	r2, [r3, #0]
    _tail = slot;
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	68fa      	ldr	r2, [r7, #12]
 8001550:	605a      	str	r2, [r3, #4]
  }

  slot->clear();
 8001552:	68f8      	ldr	r0, [r7, #12]
 8001554:	f7ff fcbd 	bl	8000ed2 <_ZN19ArduinoJson6101_11011VariantSlot5clearEv>
  return slot;
 8001558:	68fb      	ldr	r3, [r7, #12]
}
 800155a:	4618      	mov	r0, r3
 800155c:	3710      	adds	r7, #16
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}

08001562 <_ZN19ArduinoJson6101_11014CollectionData3addEPNS_10MemoryPoolE>:

inline VariantData* CollectionData::add(MemoryPool* pool) {
 8001562:	b580      	push	{r7, lr}
 8001564:	b082      	sub	sp, #8
 8001566:	af00      	add	r7, sp, #0
 8001568:	6078      	str	r0, [r7, #4]
 800156a:	6039      	str	r1, [r7, #0]
  return slotData(addSlot(pool));
 800156c:	6839      	ldr	r1, [r7, #0]
 800156e:	6878      	ldr	r0, [r7, #4]
 8001570:	f7ff ffcd 	bl	800150e <_ZN19ArduinoJson6101_11014CollectionData7addSlotEPNS_10MemoryPoolE>
 8001574:	4603      	mov	r3, r0
 8001576:	4618      	mov	r0, r3
 8001578:	f7ff feed 	bl	8001356 <_ZN19ArduinoJson6101_1108slotDataEPNS_11VariantSlotE>
 800157c:	4603      	mov	r3, r0
}
 800157e:	4618      	mov	r0, r3
 8001580:	3708      	adds	r7, #8
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}

08001586 <_ZN19ArduinoJson6101_11014CollectionData5clearEv>:
  VariantSlot* slot = addSlot(pool);
  if (!slotSetKey(slot, key, pool)) return 0;
  return slot->data();
}

inline void CollectionData::clear() {
 8001586:	b480      	push	{r7}
 8001588:	b083      	sub	sp, #12
 800158a:	af00      	add	r7, sp, #0
 800158c:	6078      	str	r0, [r7, #4]
  _head = 0;
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	2200      	movs	r2, #0
 8001592:	601a      	str	r2, [r3, #0]
  _tail = 0;
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	2200      	movs	r2, #0
 8001598:	605a      	str	r2, [r3, #4]
}
 800159a:	bf00      	nop
 800159c:	370c      	adds	r7, #12
 800159e:	46bd      	mov	sp, r7
 80015a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a4:	4770      	bx	lr

080015a6 <_ZN19ArduinoJson6101_1107isdigitEc>:

#pragma once

namespace ARDUINOJSON_NAMESPACE {

inline bool isdigit(char c) {
 80015a6:	b480      	push	{r7}
 80015a8:	b083      	sub	sp, #12
 80015aa:	af00      	add	r7, sp, #0
 80015ac:	4603      	mov	r3, r0
 80015ae:	71fb      	strb	r3, [r7, #7]
  return '0' <= c && c <= '9';
 80015b0:	79fb      	ldrb	r3, [r7, #7]
 80015b2:	2b2f      	cmp	r3, #47	@ 0x2f
 80015b4:	d904      	bls.n	80015c0 <_ZN19ArduinoJson6101_1107isdigitEc+0x1a>
 80015b6:	79fb      	ldrb	r3, [r7, #7]
 80015b8:	2b39      	cmp	r3, #57	@ 0x39
 80015ba:	d801      	bhi.n	80015c0 <_ZN19ArduinoJson6101_1107isdigitEc+0x1a>
 80015bc:	2301      	movs	r3, #1
 80015be:	e000      	b.n	80015c2 <_ZN19ArduinoJson6101_1107isdigitEc+0x1c>
 80015c0:	2300      	movs	r3, #0
}
 80015c2:	4618      	mov	r0, r3
 80015c4:	370c      	adds	r7, #12
 80015c6:	46bd      	mov	sp, r7
 80015c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015cc:	4770      	bx	lr

080015ce <_ZNK19ArduinoJson6101_11011VariantData8asStringEv>:
    default:
      return 0;
  }
}

inline const char *VariantData::asString() const {
 80015ce:	b580      	push	{r7, lr}
 80015d0:	b082      	sub	sp, #8
 80015d2:	af00      	add	r7, sp, #0
 80015d4:	6078      	str	r0, [r7, #4]
  switch (type()) {
 80015d6:	6878      	ldr	r0, [r7, #4]
 80015d8:	f7ff fe94 	bl	8001304 <_ZNK19ArduinoJson6101_11011VariantData4typeEv>
 80015dc:	4603      	mov	r3, r0
 80015de:	3b03      	subs	r3, #3
 80015e0:	2b01      	cmp	r3, #1
 80015e2:	d802      	bhi.n	80015ea <_ZNK19ArduinoJson6101_11011VariantData8asStringEv+0x1c>
    case VALUE_IS_LINKED_STRING:
    case VALUE_IS_OWNED_STRING:
      return _content.asString;
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	e000      	b.n	80015ec <_ZNK19ArduinoJson6101_11011VariantData8asStringEv+0x1e>
    default:
      return 0;
 80015ea:	2300      	movs	r3, #0
  }
}
 80015ec:	4618      	mov	r0, r3
 80015ee:	3708      	adds	r7, #8
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bd80      	pop	{r7, pc}

080015f4 <_ZN19ArduinoJson6101_11013StringBuilderC1EPNS_10MemoryPoolE>:

namespace ARDUINOJSON_NAMESPACE {

class StringBuilder {
 public:
  explicit StringBuilder(MemoryPool* parent) : _parent(parent), _size(0) {
 80015f4:	b590      	push	{r4, r7, lr}
 80015f6:	b085      	sub	sp, #20
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	60f8      	str	r0, [r7, #12]
 80015fc:	60b9      	str	r1, [r7, #8]
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	68ba      	ldr	r2, [r7, #8]
 8001602:	601a      	str	r2, [r3, #0]
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	2200      	movs	r2, #0
 8001608:	605a      	str	r2, [r3, #4]
    _slot = _parent->allocExpandableString();
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	681a      	ldr	r2, [r3, #0]
 800160e:	68fc      	ldr	r4, [r7, #12]
 8001610:	463b      	mov	r3, r7
 8001612:	4611      	mov	r1, r2
 8001614:	4618      	mov	r0, r3
 8001616:	f7ff fcbe 	bl	8000f96 <_ZN19ArduinoJson6101_11010MemoryPool21allocExpandableStringEv>
 800161a:	f104 0308 	add.w	r3, r4, #8
 800161e:	463a      	mov	r2, r7
 8001620:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001624:	e883 0003 	stmia.w	r3, {r0, r1}
  }
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	4618      	mov	r0, r3
 800162c:	3714      	adds	r7, #20
 800162e:	46bd      	mov	sp, r7
 8001630:	bd90      	pop	{r4, r7, pc}

08001632 <_ZN19ArduinoJson6101_11013StringBuilder6appendEc>:

  void append(const char* s, size_t n) {
    while (n-- > 0) append(*s++);
  }

  void append(char c) {
 8001632:	b490      	push	{r4, r7}
 8001634:	b082      	sub	sp, #8
 8001636:	af00      	add	r7, sp, #0
 8001638:	6078      	str	r0, [r7, #4]
 800163a:	460b      	mov	r3, r1
 800163c:	70fb      	strb	r3, [r7, #3]
    if (!_slot.value) return;
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	689b      	ldr	r3, [r3, #8]
 8001642:	2b00      	cmp	r3, #0
 8001644:	d015      	beq.n	8001672 <_ZN19ArduinoJson6101_11013StringBuilder6appendEc+0x40>

    if (_size >= _slot.size) {
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	685a      	ldr	r2, [r3, #4]
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	68db      	ldr	r3, [r3, #12]
 800164e:	429a      	cmp	r2, r3
 8001650:	d303      	bcc.n	800165a <_ZN19ArduinoJson6101_11013StringBuilder6appendEc+0x28>
      _slot.value = 0;
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	2200      	movs	r2, #0
 8001656:	609a      	str	r2, [r3, #8]
      return;
 8001658:	e00c      	b.n	8001674 <_ZN19ArduinoJson6101_11013StringBuilder6appendEc+0x42>
    }

    _slot.value[_size++] = c;
 800165a:	78fc      	ldrb	r4, [r7, #3]
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	689a      	ldr	r2, [r3, #8]
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	685b      	ldr	r3, [r3, #4]
 8001664:	1c58      	adds	r0, r3, #1
 8001666:	6879      	ldr	r1, [r7, #4]
 8001668:	6048      	str	r0, [r1, #4]
 800166a:	4413      	add	r3, r2
 800166c:	4622      	mov	r2, r4
 800166e:	701a      	strb	r2, [r3, #0]
 8001670:	e000      	b.n	8001674 <_ZN19ArduinoJson6101_11013StringBuilder6appendEc+0x42>
    if (!_slot.value) return;
 8001672:	bf00      	nop
  }
 8001674:	3708      	adds	r7, #8
 8001676:	46bd      	mov	sp, r7
 8001678:	bc90      	pop	{r4, r7}
 800167a:	4770      	bx	lr

0800167c <_ZN19ArduinoJson6101_11013StringBuilder8completeEv>:

  char* complete() {
 800167c:	b580      	push	{r7, lr}
 800167e:	b082      	sub	sp, #8
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
    append('\0');
 8001684:	2100      	movs	r1, #0
 8001686:	6878      	ldr	r0, [r7, #4]
 8001688:	f7ff ffd3 	bl	8001632 <_ZN19ArduinoJson6101_11013StringBuilder6appendEc>
    if (_slot.value) {
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	689b      	ldr	r3, [r3, #8]
 8001690:	2b00      	cmp	r3, #0
 8001692:	d009      	beq.n	80016a8 <_ZN19ArduinoJson6101_11013StringBuilder8completeEv+0x2c>
      _parent->freezeString(_slot, _size);
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	6818      	ldr	r0, [r3, #0]
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	f103 0108 	add.w	r1, r3, #8
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	685b      	ldr	r3, [r3, #4]
 80016a2:	461a      	mov	r2, r3
 80016a4:	f7ff fc94 	bl	8000fd0 <_ZN19ArduinoJson6101_11010MemoryPool12freezeStringERNS_10StringSlotEj>
    }
    return _slot.value;
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	689b      	ldr	r3, [r3, #8]
  }
 80016ac:	4618      	mov	r0, r3
 80016ae:	3708      	adds	r7, #8
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bd80      	pop	{r7, pc}

080016b4 <_ZN19ArduinoJson6101_11012StringCopierC1EPNS_10MemoryPoolE>:

class StringCopier {
 public:
  typedef ARDUINOJSON_NAMESPACE::StringBuilder StringBuilder;

  StringCopier(MemoryPool* pool) : _pool(pool) {}
 80016b4:	b480      	push	{r7}
 80016b6:	b083      	sub	sp, #12
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
 80016bc:	6039      	str	r1, [r7, #0]
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	683a      	ldr	r2, [r7, #0]
 80016c2:	601a      	str	r2, [r3, #0]
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	4618      	mov	r0, r3
 80016c8:	370c      	adds	r7, #12
 80016ca:	46bd      	mov	sp, r7
 80016cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d0:	4770      	bx	lr

080016d2 <_ZN19ArduinoJson6101_11012StringCopier11startStringEv>:

  StringBuilder startString() {
 80016d2:	b580      	push	{r7, lr}
 80016d4:	b082      	sub	sp, #8
 80016d6:	af00      	add	r7, sp, #0
 80016d8:	6078      	str	r0, [r7, #4]
 80016da:	6039      	str	r1, [r7, #0]
    return StringBuilder(_pool);
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	4619      	mov	r1, r3
 80016e2:	6878      	ldr	r0, [r7, #4]
 80016e4:	f7ff ff86 	bl	80015f4 <_ZN19ArduinoJson6101_11013StringBuilderC1EPNS_10MemoryPoolE>
  }
 80016e8:	6878      	ldr	r0, [r7, #4]
 80016ea:	3708      	adds	r7, #8
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bd80      	pop	{r7, pc}

080016f0 <_ZN19ArduinoJson6101_11023UnsafeCharPointerReaderC1EPKc>:

class UnsafeCharPointerReader {
  const char* _ptr;

 public:
  explicit UnsafeCharPointerReader(const char* ptr)
 80016f0:	b480      	push	{r7}
 80016f2:	b083      	sub	sp, #12
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
 80016f8:	6039      	str	r1, [r7, #0]
      : _ptr(ptr ? ptr : reinterpret_cast<const char*>("")) {}
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d001      	beq.n	8001704 <_ZN19ArduinoJson6101_11023UnsafeCharPointerReaderC1EPKc+0x14>
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	e000      	b.n	8001706 <_ZN19ArduinoJson6101_11023UnsafeCharPointerReaderC1EPKc+0x16>
 8001704:	4b04      	ldr	r3, [pc, #16]	@ (8001718 <_ZN19ArduinoJson6101_11023UnsafeCharPointerReaderC1EPKc+0x28>)
 8001706:	687a      	ldr	r2, [r7, #4]
 8001708:	6013      	str	r3, [r2, #0]
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	4618      	mov	r0, r3
 800170e:	370c      	adds	r7, #12
 8001710:	46bd      	mov	sp, r7
 8001712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001716:	4770      	bx	lr
 8001718:	080144f8 	.word	0x080144f8

0800171c <_ZN19ArduinoJson6101_11023UnsafeCharPointerReader4readEv>:

  char read() {
 800171c:	b480      	push	{r7}
 800171e:	b083      	sub	sp, #12
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
    return static_cast<char>(*_ptr++);
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	1c59      	adds	r1, r3, #1
 800172a:	687a      	ldr	r2, [r7, #4]
 800172c:	6011      	str	r1, [r2, #0]
 800172e:	781b      	ldrb	r3, [r3, #0]
  }
 8001730:	4618      	mov	r0, r3
 8001732:	370c      	adds	r7, #12
 8001734:	46bd      	mov	sp, r7
 8001736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173a:	4770      	bx	lr

0800173c <_ZNK19ArduinoJson6101_11023UnsafeCharPointerReader5endedEv>:

  bool ended() const {
 800173c:	b480      	push	{r7}
 800173e:	b083      	sub	sp, #12
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
    // we cannot know, that's why it's unsafe
    return false;
 8001744:	2300      	movs	r3, #0
  }
 8001746:	4618      	mov	r0, r3
 8001748:	370c      	adds	r7, #12
 800174a:	46bd      	mov	sp, r7
 800174c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001750:	4770      	bx	lr

08001752 <_ZNK19ArduinoJson6101_11020DeserializationError14safeBoolHelperEv>:
namespace ARDUINOJSON_NAMESPACE {

class DeserializationError {
  // safe bool idiom
  typedef void (DeserializationError::*bool_type)() const;
  void safeBoolHelper() const {}
 8001752:	b480      	push	{r7}
 8001754:	b083      	sub	sp, #12
 8001756:	af00      	add	r7, sp, #0
 8001758:	6078      	str	r0, [r7, #4]
 800175a:	bf00      	nop
 800175c:	370c      	adds	r7, #12
 800175e:	46bd      	mov	sp, r7
 8001760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001764:	4770      	bx	lr

08001766 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>:
    NotSupported,
    TooDeep
  };

  DeserializationError() {}
  DeserializationError(Code c) : _code(c) {}
 8001766:	b480      	push	{r7}
 8001768:	b083      	sub	sp, #12
 800176a:	af00      	add	r7, sp, #0
 800176c:	6078      	str	r0, [r7, #4]
 800176e:	460b      	mov	r3, r1
 8001770:	70fb      	strb	r3, [r7, #3]
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	78fa      	ldrb	r2, [r7, #3]
 8001776:	701a      	strb	r2, [r3, #0]
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	4618      	mov	r0, r3
 800177c:	370c      	adds	r7, #12
 800177e:	46bd      	mov	sp, r7
 8001780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001784:	4770      	bx	lr
	...

08001788 <_ZNK19ArduinoJson6101_11020DeserializationErrorcvMS0_KFvvEEv>:
  friend bool operator!=(Code lhs, const DeserializationError& rhs) {
    return lhs != rhs._code;
  }

  // Behaves like a bool
  operator bool_type() const {
 8001788:	b480      	push	{r7}
 800178a:	b083      	sub	sp, #12
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
 8001790:	6039      	str	r1, [r7, #0]
    return _code != Ok ? &DeserializationError::safeBoolHelper : 0;
 8001792:	683b      	ldr	r3, [r7, #0]
 8001794:	781b      	ldrb	r3, [r3, #0]
 8001796:	2b00      	cmp	r3, #0
 8001798:	d106      	bne.n	80017a8 <_ZNK19ArduinoJson6101_11020DeserializationErrorcvMS0_KFvvEEv+0x20>
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	2200      	movs	r2, #0
 800179e:	601a      	str	r2, [r3, #0]
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	2200      	movs	r2, #0
 80017a4:	605a      	str	r2, [r3, #4]
 80017a6:	e005      	b.n	80017b4 <_ZNK19ArduinoJson6101_11020DeserializationErrorcvMS0_KFvvEEv+0x2c>
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	4a05      	ldr	r2, [pc, #20]	@ (80017c0 <_ZNK19ArduinoJson6101_11020DeserializationErrorcvMS0_KFvvEEv+0x38>)
 80017ac:	601a      	str	r2, [r3, #0]
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	2200      	movs	r2, #0
 80017b2:	605a      	str	r2, [r3, #4]
  }
 80017b4:	6878      	ldr	r0, [r7, #4]
 80017b6:	370c      	adds	r7, #12
 80017b8:	46bd      	mov	sp, r7
 80017ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017be:	4770      	bx	lr
 80017c0:	08001753 	.word	0x08001753

080017c4 <_ZNK19ArduinoJson6101_11020DeserializationError4codeEv>:
  friend bool operator!=(const DeserializationError& err, bool value) {
    return static_cast<bool>(err) != value;
  }

  // Returns internal enum, useful for switch statement
  Code code() const {
 80017c4:	b480      	push	{r7}
 80017c6:	b083      	sub	sp, #12
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
    return _code;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	781b      	ldrb	r3, [r3, #0]
  }
 80017d0:	4618      	mov	r0, r3
 80017d2:	370c      	adds	r7, #12
 80017d4:	46bd      	mov	sp, r7
 80017d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017da:	4770      	bx	lr

080017dc <_ZNK19ArduinoJson6101_11020DeserializationError5c_strEv>:

  const char* c_str() const {
 80017dc:	b480      	push	{r7}
 80017de:	b083      	sub	sp, #12
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
    switch (_code) {
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	781b      	ldrb	r3, [r3, #0]
 80017e8:	2b05      	cmp	r3, #5
 80017ea:	d81b      	bhi.n	8001824 <_ZNK19ArduinoJson6101_11020DeserializationError5c_strEv+0x48>
 80017ec:	a201      	add	r2, pc, #4	@ (adr r2, 80017f4 <_ZNK19ArduinoJson6101_11020DeserializationError5c_strEv+0x18>)
 80017ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017f2:	bf00      	nop
 80017f4:	0800180d 	.word	0x0800180d
 80017f8:	0800181d 	.word	0x0800181d
 80017fc:	08001819 	.word	0x08001819
 8001800:	08001815 	.word	0x08001815
 8001804:	08001821 	.word	0x08001821
 8001808:	08001811 	.word	0x08001811
      case Ok:
        return "Ok";
 800180c:	4b09      	ldr	r3, [pc, #36]	@ (8001834 <_ZNK19ArduinoJson6101_11020DeserializationError5c_strEv+0x58>)
 800180e:	e00a      	b.n	8001826 <_ZNK19ArduinoJson6101_11020DeserializationError5c_strEv+0x4a>
      case TooDeep:
        return "TooDeep";
 8001810:	4b09      	ldr	r3, [pc, #36]	@ (8001838 <_ZNK19ArduinoJson6101_11020DeserializationError5c_strEv+0x5c>)
 8001812:	e008      	b.n	8001826 <_ZNK19ArduinoJson6101_11020DeserializationError5c_strEv+0x4a>
      case NoMemory:
        return "NoMemory";
 8001814:	4b09      	ldr	r3, [pc, #36]	@ (800183c <_ZNK19ArduinoJson6101_11020DeserializationError5c_strEv+0x60>)
 8001816:	e006      	b.n	8001826 <_ZNK19ArduinoJson6101_11020DeserializationError5c_strEv+0x4a>
      case InvalidInput:
        return "InvalidInput";
 8001818:	4b09      	ldr	r3, [pc, #36]	@ (8001840 <_ZNK19ArduinoJson6101_11020DeserializationError5c_strEv+0x64>)
 800181a:	e004      	b.n	8001826 <_ZNK19ArduinoJson6101_11020DeserializationError5c_strEv+0x4a>
      case IncompleteInput:
        return "IncompleteInput";
 800181c:	4b09      	ldr	r3, [pc, #36]	@ (8001844 <_ZNK19ArduinoJson6101_11020DeserializationError5c_strEv+0x68>)
 800181e:	e002      	b.n	8001826 <_ZNK19ArduinoJson6101_11020DeserializationError5c_strEv+0x4a>
      case NotSupported:
        return "NotSupported";
 8001820:	4b09      	ldr	r3, [pc, #36]	@ (8001848 <_ZNK19ArduinoJson6101_11020DeserializationError5c_strEv+0x6c>)
 8001822:	e000      	b.n	8001826 <_ZNK19ArduinoJson6101_11020DeserializationError5c_strEv+0x4a>
      default:
        return "???";
 8001824:	4b09      	ldr	r3, [pc, #36]	@ (800184c <_ZNK19ArduinoJson6101_11020DeserializationError5c_strEv+0x70>)
    }
  }
 8001826:	4618      	mov	r0, r3
 8001828:	370c      	adds	r7, #12
 800182a:	46bd      	mov	sp, r7
 800182c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001830:	4770      	bx	lr
 8001832:	bf00      	nop
 8001834:	080144fc 	.word	0x080144fc
 8001838:	08014500 	.word	0x08014500
 800183c:	08014508 	.word	0x08014508
 8001840:	08014514 	.word	0x08014514
 8001844:	08014524 	.word	0x08014524
 8001848:	08014534 	.word	0x08014534
 800184c:	08014544 	.word	0x08014544

08001850 <_ZN19ArduinoJson6101_11012NestingLimitC1Ev>:
#include "../Configuration.hpp"

namespace ARDUINOJSON_NAMESPACE {

struct NestingLimit {
  NestingLimit() : value(ARDUINOJSON_DEFAULT_NESTING_LIMIT) {}
 8001850:	b480      	push	{r7}
 8001852:	b083      	sub	sp, #12
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	2232      	movs	r2, #50	@ 0x32
 800185c:	701a      	strb	r2, [r3, #0]
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	4618      	mov	r0, r3
 8001862:	370c      	adds	r7, #12
 8001864:	46bd      	mov	sp, r7
 8001866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186a:	4770      	bx	lr

0800186c <_ZN19ArduinoJson6101_11014EscapeSequence12unescapeCharEc>:
    }
    return p[0];
  }

  // Optimized for code size on a 8-bit AVR
  static char unescapeChar(char c) {
 800186c:	b580      	push	{r7, lr}
 800186e:	b084      	sub	sp, #16
 8001870:	af00      	add	r7, sp, #0
 8001872:	4603      	mov	r3, r0
 8001874:	71fb      	strb	r3, [r7, #7]
    const char *p = escapeTable(true);
 8001876:	2001      	movs	r0, #1
 8001878:	f000 f818 	bl	80018ac <_ZN19ArduinoJson6101_11014EscapeSequence11escapeTableEb>
 800187c:	60f8      	str	r0, [r7, #12]
    for (;;) {
      if (p[0] == '\0') return c;
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	781b      	ldrb	r3, [r3, #0]
 8001882:	2b00      	cmp	r3, #0
 8001884:	d101      	bne.n	800188a <_ZN19ArduinoJson6101_11014EscapeSequence12unescapeCharEc+0x1e>
 8001886:	79fb      	ldrb	r3, [r7, #7]
 8001888:	e00c      	b.n	80018a4 <_ZN19ArduinoJson6101_11014EscapeSequence12unescapeCharEc+0x38>
      if (p[0] == c) return p[1];
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	781b      	ldrb	r3, [r3, #0]
 800188e:	79fa      	ldrb	r2, [r7, #7]
 8001890:	429a      	cmp	r2, r3
 8001892:	d103      	bne.n	800189c <_ZN19ArduinoJson6101_11014EscapeSequence12unescapeCharEc+0x30>
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	3301      	adds	r3, #1
 8001898:	781b      	ldrb	r3, [r3, #0]
 800189a:	e003      	b.n	80018a4 <_ZN19ArduinoJson6101_11014EscapeSequence12unescapeCharEc+0x38>
      p += 2;
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	3302      	adds	r3, #2
 80018a0:	60fb      	str	r3, [r7, #12]
      if (p[0] == '\0') return c;
 80018a2:	e7ec      	b.n	800187e <_ZN19ArduinoJson6101_11014EscapeSequence12unescapeCharEc+0x12>
    }
  }
 80018a4:	4618      	mov	r0, r3
 80018a6:	3710      	adds	r7, #16
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bd80      	pop	{r7, pc}

080018ac <_ZN19ArduinoJson6101_11014EscapeSequence11escapeTableEb>:

 private:
  static const char *escapeTable(bool excludeIdenticals) {
 80018ac:	b480      	push	{r7}
 80018ae:	b083      	sub	sp, #12
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	4603      	mov	r3, r0
 80018b4:	71fb      	strb	r3, [r7, #7]
    return &"\"\"\\\\b\bf\fn\nr\rt\t"[excludeIdenticals ? 4 : 0];
 80018b6:	79fb      	ldrb	r3, [r7, #7]
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d001      	beq.n	80018c0 <_ZN19ArduinoJson6101_11014EscapeSequence11escapeTableEb+0x14>
 80018bc:	2304      	movs	r3, #4
 80018be:	e000      	b.n	80018c2 <_ZN19ArduinoJson6101_11014EscapeSequence11escapeTableEb+0x16>
 80018c0:	2300      	movs	r3, #0
 80018c2:	4a04      	ldr	r2, [pc, #16]	@ (80018d4 <_ZN19ArduinoJson6101_11014EscapeSequence11escapeTableEb+0x28>)
 80018c4:	4413      	add	r3, r2
  }
 80018c6:	4618      	mov	r0, r3
 80018c8:	370c      	adds	r7, #12
 80018ca:	46bd      	mov	sp, r7
 80018cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d0:	4770      	bx	lr
 80018d2:	bf00      	nop
 80018d4:	08014548 	.word	0x08014548

080018d8 <EXTI4_IRQHandler>:
#include "interrupt.h"

extern "C" {

	void EXTI4_IRQHandler()
	{
 80018d8:	b580      	push	{r7, lr}
 80018da:	af00      	add	r7, sp, #0
		// Chip select pin is PC_4 (EXTI4 PIN 4)
		if(__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_4) != RESET)
 80018dc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80018e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80018e4:	f003 0310 	and.w	r3, r3, #16
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	bf14      	ite	ne
 80018ec:	2301      	movne	r3, #1
 80018ee:	2300      	moveq	r3, #0
 80018f0:	b2db      	uxtb	r3, r3
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d006      	beq.n	8001904 <EXTI4_IRQHandler+0x2c>
		{
		__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_4);
 80018f6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80018fa:	2210      	movs	r2, #16
 80018fc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
		Interrupt::EXTI4_Wrapper();
 8001900:	f7ff f9fe 	bl	8000d00 <_ZN9Interrupt13EXTI4_WrapperEv>
		}
	}
 8001904:	bf00      	nop
 8001906:	bd80      	pop	{r7, pc}

08001908 <DMA1_Stream0_IRQHandler>:

	void DMA1_Stream0_IRQHandler()
	{
 8001908:	b580      	push	{r7, lr}
 800190a:	af00      	add	r7, sp, #0
		// DMA interrupt management in the moduelInterrupt handleInterrupt() routine
		Interrupt::DMA1_Stream0_Wrapper();
 800190c:	f7ff fa06 	bl	8000d1c <_ZN9Interrupt20DMA1_Stream0_WrapperEv>
	}
 8001910:	bf00      	nop
 8001912:	bd80      	pop	{r7, pc}

08001914 <DMA1_Stream1_IRQHandler>:

	void DMA1_Stream1_IRQHandler()
	{
 8001914:	b580      	push	{r7, lr}
 8001916:	af00      	add	r7, sp, #0
		// DMA interrupt management in the moduelInterrupt handleInterrupt() routine
		Interrupt::DMA1_Stream1_Wrapper();
 8001918:	f7ff fa0e 	bl	8000d38 <_ZN9Interrupt20DMA1_Stream1_WrapperEv>
	}
 800191c:	bf00      	nop
 800191e:	bd80      	pop	{r7, pc}

08001920 <TIM2_IRQHandler>:


	void TIM2_IRQHandler()
	{
 8001920:	b580      	push	{r7, lr}
 8001922:	af00      	add	r7, sp, #0
	  if(TIM2->SR & TIM_SR_UIF) // if UIF flag is set
 8001924:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001928:	691b      	ldr	r3, [r3, #16]
 800192a:	f003 0301 	and.w	r3, r3, #1
 800192e:	2b00      	cmp	r3, #0
 8001930:	bf14      	ite	ne
 8001932:	2301      	movne	r3, #1
 8001934:	2300      	moveq	r3, #0
 8001936:	b2db      	uxtb	r3, r3
 8001938:	2b00      	cmp	r3, #0
 800193a:	d009      	beq.n	8001950 <TIM2_IRQHandler+0x30>
	  {
		TIM2->SR &= ~TIM_SR_UIF; // clear UIF flag
 800193c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001940:	691b      	ldr	r3, [r3, #16]
 8001942:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001946:	f023 0301 	bic.w	r3, r3, #1
 800194a:	6113      	str	r3, [r2, #16]

		Interrupt::TIM2_Wrapper();
 800194c:	f7ff fa02 	bl	8000d54 <_ZN9Interrupt12TIM2_WrapperEv>
	  }
	}
 8001950:	bf00      	nop
 8001952:	bd80      	pop	{r7, pc}

08001954 <TIM3_IRQHandler>:


	void TIM3_IRQHandler()
	{
 8001954:	b580      	push	{r7, lr}
 8001956:	af00      	add	r7, sp, #0
	  if(TIM3->SR & TIM_SR_UIF) // if UIF flag is set
 8001958:	4b0a      	ldr	r3, [pc, #40]	@ (8001984 <TIM3_IRQHandler+0x30>)
 800195a:	691b      	ldr	r3, [r3, #16]
 800195c:	f003 0301 	and.w	r3, r3, #1
 8001960:	2b00      	cmp	r3, #0
 8001962:	bf14      	ite	ne
 8001964:	2301      	movne	r3, #1
 8001966:	2300      	moveq	r3, #0
 8001968:	b2db      	uxtb	r3, r3
 800196a:	2b00      	cmp	r3, #0
 800196c:	d007      	beq.n	800197e <TIM3_IRQHandler+0x2a>
	  {
		TIM3->SR &= ~TIM_SR_UIF; // clear UIF flag
 800196e:	4b05      	ldr	r3, [pc, #20]	@ (8001984 <TIM3_IRQHandler+0x30>)
 8001970:	691b      	ldr	r3, [r3, #16]
 8001972:	4a04      	ldr	r2, [pc, #16]	@ (8001984 <TIM3_IRQHandler+0x30>)
 8001974:	f023 0301 	bic.w	r3, r3, #1
 8001978:	6113      	str	r3, [r2, #16]

		Interrupt::TIM3_Wrapper();
 800197a:	f7ff f9f9 	bl	8000d70 <_ZN9Interrupt12TIM3_WrapperEv>
	  }
	}
 800197e:	bf00      	nop
 8001980:	bd80      	pop	{r7, pc}
 8001982:	bf00      	nop
 8001984:	40000400 	.word	0x40000400

08001988 <TIM4_IRQHandler>:

	void TIM4_IRQHandler()
	{
 8001988:	b580      	push	{r7, lr}
 800198a:	af00      	add	r7, sp, #0
	  if(TIM4->SR & TIM_SR_UIF) // if UIF flag is set
 800198c:	4b0a      	ldr	r3, [pc, #40]	@ (80019b8 <TIM4_IRQHandler+0x30>)
 800198e:	691b      	ldr	r3, [r3, #16]
 8001990:	f003 0301 	and.w	r3, r3, #1
 8001994:	2b00      	cmp	r3, #0
 8001996:	bf14      	ite	ne
 8001998:	2301      	movne	r3, #1
 800199a:	2300      	moveq	r3, #0
 800199c:	b2db      	uxtb	r3, r3
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d007      	beq.n	80019b2 <TIM4_IRQHandler+0x2a>
	  {
		TIM4->SR &= ~TIM_SR_UIF; // clear UIF flag
 80019a2:	4b05      	ldr	r3, [pc, #20]	@ (80019b8 <TIM4_IRQHandler+0x30>)
 80019a4:	691b      	ldr	r3, [r3, #16]
 80019a6:	4a04      	ldr	r2, [pc, #16]	@ (80019b8 <TIM4_IRQHandler+0x30>)
 80019a8:	f023 0301 	bic.w	r3, r3, #1
 80019ac:	6113      	str	r3, [r2, #16]

		Interrupt::TIM4_Wrapper();
 80019ae:	f7ff f9ed 	bl	8000d8c <_ZN9Interrupt12TIM4_WrapperEv>
	  }
	}
 80019b2:	bf00      	nop
 80019b4:	bd80      	pop	{r7, pc}
 80019b6:	bf00      	nop
 80019b8:	40000800 	.word	0x40000800

080019bc <_Z13createThreadsv>:
#include "extern.h"


void createThreads(void)
{
 80019bc:	b598      	push	{r3, r4, r7, lr}
 80019be:	af00      	add	r7, sp, #0
	servoThread = new pruThread(TIM2, TIM2_IRQn, servo_freq);
 80019c0:	2030      	movs	r0, #48	@ 0x30
 80019c2:	f011 fa9c 	bl	8012efe <_Znwj>
 80019c6:	4603      	mov	r3, r0
 80019c8:	461c      	mov	r4, r3
 80019ca:	4b1a      	ldr	r3, [pc, #104]	@ (8001a34 <_Z13createThreadsv+0x78>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	221c      	movs	r2, #28
 80019d0:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 80019d4:	4620      	mov	r0, r4
 80019d6:	f003 fed3 	bl	8005780 <_ZN9pruThreadC1EP11TIM_TypeDef9IRQn_Typem>
 80019da:	4b17      	ldr	r3, [pc, #92]	@ (8001a38 <_Z13createThreadsv+0x7c>)
 80019dc:	601c      	str	r4, [r3, #0]
    NVIC_SetPriority(TIM2_IRQn, 2);
 80019de:	2102      	movs	r1, #2
 80019e0:	201c      	movs	r0, #28
 80019e2:	f7ff f9e1 	bl	8000da8 <__NVIC_SetPriority>

    baseThread = new pruThread(TIM3, TIM3_IRQn , base_freq);
 80019e6:	2030      	movs	r0, #48	@ 0x30
 80019e8:	f011 fa89 	bl	8012efe <_Znwj>
 80019ec:	4603      	mov	r3, r0
 80019ee:	461c      	mov	r4, r3
 80019f0:	4b12      	ldr	r3, [pc, #72]	@ (8001a3c <_Z13createThreadsv+0x80>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	221d      	movs	r2, #29
 80019f6:	4912      	ldr	r1, [pc, #72]	@ (8001a40 <_Z13createThreadsv+0x84>)
 80019f8:	4620      	mov	r0, r4
 80019fa:	f003 fec1 	bl	8005780 <_ZN9pruThreadC1EP11TIM_TypeDef9IRQn_Typem>
 80019fe:	4b11      	ldr	r3, [pc, #68]	@ (8001a44 <_Z13createThreadsv+0x88>)
 8001a00:	601c      	str	r4, [r3, #0]
    NVIC_SetPriority(TIM3_IRQn , 3);
 8001a02:	2103      	movs	r1, #3
 8001a04:	201d      	movs	r0, #29
 8001a06:	f7ff f9cf 	bl	8000da8 <__NVIC_SetPriority>

    commsThread = new pruThread(TIM4, TIM4_IRQn, PRU_COMMSFREQ);
 8001a0a:	2030      	movs	r0, #48	@ 0x30
 8001a0c:	f011 fa77 	bl	8012efe <_Znwj>
 8001a10:	4603      	mov	r3, r0
 8001a12:	461c      	mov	r4, r3
 8001a14:	f44f 4361 	mov.w	r3, #57600	@ 0xe100
 8001a18:	221e      	movs	r2, #30
 8001a1a:	490b      	ldr	r1, [pc, #44]	@ (8001a48 <_Z13createThreadsv+0x8c>)
 8001a1c:	4620      	mov	r0, r4
 8001a1e:	f003 feaf 	bl	8005780 <_ZN9pruThreadC1EP11TIM_TypeDef9IRQn_Typem>
 8001a22:	4b0a      	ldr	r3, [pc, #40]	@ (8001a4c <_Z13createThreadsv+0x90>)
 8001a24:	601c      	str	r4, [r3, #0]
    NVIC_SetPriority(TIM4_IRQn, 4);
 8001a26:	2104      	movs	r1, #4
 8001a28:	201e      	movs	r0, #30
 8001a2a:	f7ff f9bd 	bl	8000da8 <__NVIC_SetPriority>
}
 8001a2e:	bf00      	nop
 8001a30:	bd98      	pop	{r3, r4, r7, pc}
 8001a32:	bf00      	nop
 8001a34:	24000004 	.word	0x24000004
 8001a38:	24000354 	.word	0x24000354
 8001a3c:	24000000 	.word	0x24000000
 8001a40:	40000400 	.word	0x40000400
 8001a44:	24000358 	.word	0x24000358
 8001a48:	40000800 	.word	0x40000800
 8001a4c:	2400035c 	.word	0x2400035c

08001a50 <__io_putchar>:


// re-target printf to UART1 by redeclaring week function in syscalls.c
extern "C" {
	int __io_putchar(int ch)
	{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b082      	sub	sp, #8
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
	  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 8001a58:	1d39      	adds	r1, r7, #4
 8001a5a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001a5e:	2201      	movs	r2, #1
 8001a60:	4803      	ldr	r0, [pc, #12]	@ (8001a70 <__io_putchar+0x20>)
 8001a62:	f00c ff36 	bl	800e8d2 <HAL_UART_Transmit>
	  return ch;
 8001a66:	687b      	ldr	r3, [r7, #4]
	}
 8001a68:	4618      	mov	r0, r3
 8001a6a:	3708      	adds	r7, #8
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	bd80      	pop	{r7, pc}
 8001a70:	240005f8 	.word	0x240005f8

08001a74 <_Z14readJsonConfigv>:
}



void readJsonConfig()
{
 8001a74:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001a78:	b08d      	sub	sp, #52	@ 0x34
 8001a7a:	af00      	add	r7, sp, #0
	uint32_t bytesread; // bytes read count


    printf("\n1. Reading JSON configuration file\n");
 8001a7c:	4854      	ldr	r0, [pc, #336]	@ (8001bd0 <_Z14readJsonConfigv+0x15c>)
 8001a7e:	f011 fe61 	bl	8013744 <puts>

    // Try to mount the file system
    printf("	Mounting the file system... \n");
 8001a82:	4854      	ldr	r0, [pc, #336]	@ (8001bd4 <_Z14readJsonConfigv+0x160>)
 8001a84:	f011 fe5e 	bl	8013744 <puts>
    if(f_mount(&SDFatFS, (TCHAR const*)SDPath, 0) != FR_OK)
 8001a88:	2200      	movs	r2, #0
 8001a8a:	4953      	ldr	r1, [pc, #332]	@ (8001bd8 <_Z14readJsonConfigv+0x164>)
 8001a8c:	4853      	ldr	r0, [pc, #332]	@ (8001bdc <_Z14readJsonConfigv+0x168>)
 8001a8e:	f010 fddf 	bl	8012650 <f_mount>
 8001a92:	4603      	mov	r3, r0
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	bf14      	ite	ne
 8001a98:	2301      	movne	r3, #1
 8001a9a:	2300      	moveq	r3, #0
 8001a9c:	b2db      	uxtb	r3, r3
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d005      	beq.n	8001aae <_Z14readJsonConfigv+0x3a>
	{
    	printf("	Failed to mount SD card\n\r");
 8001aa2:	484f      	ldr	r0, [pc, #316]	@ (8001be0 <_Z14readJsonConfigv+0x16c>)
 8001aa4:	f011 fdde 	bl	8013664 <iprintf>
    	Error_Handler();
 8001aa8:	f000 fed2 	bl	8002850 <Error_Handler>
			}

			f_close(&SDFile);
		}
    }
}
 8001aac:	e08a      	b.n	8001bc4 <_Z14readJsonConfigv+0x150>
		if(f_open(&SDFile, "config.txt", FA_READ) != FR_OK)
 8001aae:	2201      	movs	r2, #1
 8001ab0:	494c      	ldr	r1, [pc, #304]	@ (8001be4 <_Z14readJsonConfigv+0x170>)
 8001ab2:	484d      	ldr	r0, [pc, #308]	@ (8001be8 <_Z14readJsonConfigv+0x174>)
 8001ab4:	f010 fe12 	bl	80126dc <f_open>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	bf14      	ite	ne
 8001abe:	2301      	movne	r3, #1
 8001ac0:	2300      	moveq	r3, #0
 8001ac2:	b2db      	uxtb	r3, r3
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d005      	beq.n	8001ad4 <_Z14readJsonConfigv+0x60>
			printf("	Failed to open JSON config file\n");
 8001ac8:	4848      	ldr	r0, [pc, #288]	@ (8001bec <_Z14readJsonConfigv+0x178>)
 8001aca:	f011 fe3b 	bl	8013744 <puts>
			Error_Handler();
 8001ace:	f000 febf 	bl	8002850 <Error_Handler>
}
 8001ad2:	e077      	b.n	8001bc4 <_Z14readJsonConfigv+0x150>
		}
 8001ad4:	466b      	mov	r3, sp
 8001ad6:	461e      	mov	r6, r3
			int32_t length = f_size(&SDFile);
 8001ad8:	4b43      	ldr	r3, [pc, #268]	@ (8001be8 <_Z14readJsonConfigv+0x174>)
 8001ada:	68db      	ldr	r3, [r3, #12]
 8001adc:	62bb      	str	r3, [r7, #40]	@ 0x28
			printf("	JSON config file lenght = %2ld\n", length);
 8001ade:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001ae0:	4843      	ldr	r0, [pc, #268]	@ (8001bf0 <_Z14readJsonConfigv+0x17c>)
 8001ae2:	f011 fdbf 	bl	8013664 <iprintf>
			__attribute__((aligned(32))) char rtext[length];
 8001ae6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001ae8:	1e4b      	subs	r3, r1, #1
 8001aea:	627b      	str	r3, [r7, #36]	@ 0x24
 8001aec:	460a      	mov	r2, r1
 8001aee:	2300      	movs	r3, #0
 8001af0:	4690      	mov	r8, r2
 8001af2:	4699      	mov	r9, r3
 8001af4:	f04f 0200 	mov.w	r2, #0
 8001af8:	f04f 0300 	mov.w	r3, #0
 8001afc:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001b00:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001b04:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001b08:	460a      	mov	r2, r1
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	4614      	mov	r4, r2
 8001b0e:	461d      	mov	r5, r3
 8001b10:	f04f 0200 	mov.w	r2, #0
 8001b14:	f04f 0300 	mov.w	r3, #0
 8001b18:	00eb      	lsls	r3, r5, #3
 8001b1a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001b1e:	00e2      	lsls	r2, r4, #3
 8001b20:	460b      	mov	r3, r1
 8001b22:	3318      	adds	r3, #24
 8001b24:	3307      	adds	r3, #7
 8001b26:	08db      	lsrs	r3, r3, #3
 8001b28:	00db      	lsls	r3, r3, #3
 8001b2a:	ebad 0d03 	sub.w	sp, sp, r3
 8001b2e:	466b      	mov	r3, sp
 8001b30:	331f      	adds	r3, #31
 8001b32:	095b      	lsrs	r3, r3, #5
 8001b34:	015b      	lsls	r3, r3, #5
 8001b36:	623b      	str	r3, [r7, #32]
			if(f_read(&SDFile, rtext, length, (UINT *)&bytesread) != FR_OK)
 8001b38:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001b3a:	1d3b      	adds	r3, r7, #4
 8001b3c:	6a39      	ldr	r1, [r7, #32]
 8001b3e:	482a      	ldr	r0, [pc, #168]	@ (8001be8 <_Z14readJsonConfigv+0x174>)
 8001b40:	f010 ff86 	bl	8012a50 <f_read>
 8001b44:	4603      	mov	r3, r0
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	bf14      	ite	ne
 8001b4a:	2301      	movne	r3, #1
 8001b4c:	2300      	moveq	r3, #0
 8001b4e:	b2db      	uxtb	r3, r3
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d003      	beq.n	8001b5c <_Z14readJsonConfigv+0xe8>
				printf("	JSON config file read FAILURE\n");
 8001b54:	4827      	ldr	r0, [pc, #156]	@ (8001bf4 <_Z14readJsonConfigv+0x180>)
 8001b56:	f011 fdf5 	bl	8013744 <puts>
 8001b5a:	e02f      	b.n	8001bbc <_Z14readJsonConfigv+0x148>
				printf("	JSON config file read SUCCESS!\n");
 8001b5c:	4826      	ldr	r0, [pc, #152]	@ (8001bf8 <_Z14readJsonConfigv+0x184>)
 8001b5e:	f011 fdf1 	bl	8013744 <puts>
				strJson.reserve(length + 1);
 8001b62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001b64:	3301      	adds	r3, #1
 8001b66:	4619      	mov	r1, r3
 8001b68:	4824      	ldr	r0, [pc, #144]	@ (8001bfc <_Z14readJsonConfigv+0x188>)
 8001b6a:	f011 fafd 	bl	8013168 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7reserveEj>
			    for (int i = 0; i < length; i++) {
 8001b6e:	2300      	movs	r3, #0
 8001b70:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001b72:	e017      	b.n	8001ba4 <_Z14readJsonConfigv+0x130>
			    	strJson = strJson + rtext[i];
 8001b74:	6a3a      	ldr	r2, [r7, #32]
 8001b76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001b78:	4413      	add	r3, r2
 8001b7a:	781a      	ldrb	r2, [r3, #0]
 8001b7c:	f107 0308 	add.w	r3, r7, #8
 8001b80:	491e      	ldr	r1, [pc, #120]	@ (8001bfc <_Z14readJsonConfigv+0x188>)
 8001b82:	4618      	mov	r0, r3
 8001b84:	f000 ff1e 	bl	80029c4 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_S5_>
 8001b88:	f107 0308 	add.w	r3, r7, #8
 8001b8c:	4619      	mov	r1, r3
 8001b8e:	481b      	ldr	r0, [pc, #108]	@ (8001bfc <_Z14readJsonConfigv+0x188>)
 8001b90:	f011 fa7b 	bl	801308a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 8001b94:	f107 0308 	add.w	r3, r7, #8
 8001b98:	4618      	mov	r0, r3
 8001b9a:	f011 fa70 	bl	801307e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
			    for (int i = 0; i < length; i++) {
 8001b9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001ba0:	3301      	adds	r3, #1
 8001ba2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001ba4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001ba6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001ba8:	429a      	cmp	r2, r3
 8001baa:	dbe3      	blt.n	8001b74 <_Z14readJsonConfigv+0x100>
			    printf("\n%s\n", strJson.c_str());
 8001bac:	4813      	ldr	r0, [pc, #76]	@ (8001bfc <_Z14readJsonConfigv+0x188>)
 8001bae:	f011 fb41 	bl	8013234 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	4619      	mov	r1, r3
 8001bb6:	4812      	ldr	r0, [pc, #72]	@ (8001c00 <_Z14readJsonConfigv+0x18c>)
 8001bb8:	f011 fd54 	bl	8013664 <iprintf>
			f_close(&SDFile);
 8001bbc:	480a      	ldr	r0, [pc, #40]	@ (8001be8 <_Z14readJsonConfigv+0x174>)
 8001bbe:	f011 f904 	bl	8012dca <f_close>
 8001bc2:	46b5      	mov	sp, r6
}
 8001bc4:	bf00      	nop
 8001bc6:	3734      	adds	r7, #52	@ 0x34
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001bce:	bf00      	nop
 8001bd0:	08014558 	.word	0x08014558
 8001bd4:	0801457c 	.word	0x0801457c
 8001bd8:	240006e8 	.word	0x240006e8
 8001bdc:	240006ec 	.word	0x240006ec
 8001be0:	0801459c 	.word	0x0801459c
 8001be4:	080145b8 	.word	0x080145b8
 8001be8:	2400091c 	.word	0x2400091c
 8001bec:	080145c4 	.word	0x080145c4
 8001bf0:	080145e8 	.word	0x080145e8
 8001bf4:	0801460c 	.word	0x0801460c
 8001bf8:	0801462c 	.word	0x0801462c
 8001bfc:	24000524 	.word	0x24000524
 8001c00:	0801464c 	.word	0x0801464c

08001c04 <_Z5setupv>:

void setup()
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	af00      	add	r7, sp, #0
    printf("\n2. Setting up SPI DMA and threads\n");
 8001c08:	4807      	ldr	r0, [pc, #28]	@ (8001c28 <_Z5setupv+0x24>)
 8001c0a:	f011 fd9b 	bl	8013744 <puts>

    // initialise the Remora comms
    comms->init();
 8001c0e:	4b07      	ldr	r3, [pc, #28]	@ (8001c2c <_Z5setupv+0x28>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	4618      	mov	r0, r3
 8001c14:	f003 fa2e 	bl	8005074 <_ZN11RemoraComms4initEv>
    comms->start();
 8001c18:	4b04      	ldr	r3, [pc, #16]	@ (8001c2c <_Z5setupv+0x28>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	f003 fb5d 	bl	80052dc <_ZN11RemoraComms5startEv>
}
 8001c22:	bf00      	nop
 8001c24:	bd80      	pop	{r7, pc}
 8001c26:	bf00      	nop
 8001c28:	08014654 	.word	0x08014654
 8001c2c:	24000578 	.word	0x24000578

08001c30 <_Z15deserialiseJSONv>:


void deserialiseJSON()
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b084      	sub	sp, #16
 8001c34:	af00      	add	r7, sp, #0
    printf("\n3. Parsing json configuration file\n");
 8001c36:	4826      	ldr	r0, [pc, #152]	@ (8001cd0 <_Z15deserialiseJSONv+0xa0>)
 8001c38:	f011 fd84 	bl	8013744 <puts>

    const char *json = strJson.c_str();
 8001c3c:	4825      	ldr	r0, [pc, #148]	@ (8001cd4 <_Z15deserialiseJSONv+0xa4>)
 8001c3e:	f011 faf9 	bl	8013234 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 8001c42:	60f8      	str	r0, [r7, #12]

    // parse the json configuration file
    DeserializationError error = deserializeJson(doc, json);
 8001c44:	f107 0308 	add.w	r3, r7, #8
 8001c48:	4618      	mov	r0, r3
 8001c4a:	f7ff fe01 	bl	8001850 <_ZN19ArduinoJson6101_11012NestingLimitC1Ev>
 8001c4e:	7a3a      	ldrb	r2, [r7, #8]
 8001c50:	68f9      	ldr	r1, [r7, #12]
 8001c52:	4821      	ldr	r0, [pc, #132]	@ (8001cd8 <_Z15deserialiseJSONv+0xa8>)
 8001c54:	f000 fecc 	bl	80029f0 <_ZN19ArduinoJson6101_11015deserializeJsonIKcEENS_20DeserializationErrorERNS_12JsonDocumentEPT_NS_12NestingLimitE>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	713b      	strb	r3, [r7, #4]

    printf("	Config deserialisation - ");
 8001c5c:	481f      	ldr	r0, [pc, #124]	@ (8001cdc <_Z15deserialiseJSONv+0xac>)
 8001c5e:	f011 fd01 	bl	8013664 <iprintf>

    switch (error.code())
 8001c62:	1d3b      	adds	r3, r7, #4
 8001c64:	4618      	mov	r0, r3
 8001c66:	f7ff fdad 	bl	80017c4 <_ZNK19ArduinoJson6101_11020DeserializationError4codeEv>
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	2b03      	cmp	r3, #3
 8001c6e:	d011      	beq.n	8001c94 <_Z15deserialiseJSONv+0x64>
 8001c70:	2b03      	cmp	r3, #3
 8001c72:	dc16      	bgt.n	8001ca2 <_Z15deserialiseJSONv+0x72>
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d002      	beq.n	8001c7e <_Z15deserialiseJSONv+0x4e>
 8001c78:	2b02      	cmp	r3, #2
 8001c7a:	d004      	beq.n	8001c86 <_Z15deserialiseJSONv+0x56>
 8001c7c:	e011      	b.n	8001ca2 <_Z15deserialiseJSONv+0x72>
    {
        case DeserializationError::Ok:
            printf("Deserialization succeeded\n");
 8001c7e:	4818      	ldr	r0, [pc, #96]	@ (8001ce0 <_Z15deserialiseJSONv+0xb0>)
 8001c80:	f011 fd60 	bl	8013744 <puts>
            break;
 8001c84:	e01f      	b.n	8001cc6 <_Z15deserialiseJSONv+0x96>
        case DeserializationError::InvalidInput:
            printf("Invalid input!\n");
 8001c86:	4817      	ldr	r0, [pc, #92]	@ (8001ce4 <_Z15deserialiseJSONv+0xb4>)
 8001c88:	f011 fd5c 	bl	8013744 <puts>
            configError = true;
 8001c8c:	4b16      	ldr	r3, [pc, #88]	@ (8001ce8 <_Z15deserialiseJSONv+0xb8>)
 8001c8e:	2201      	movs	r2, #1
 8001c90:	701a      	strb	r2, [r3, #0]
            break;
 8001c92:	e018      	b.n	8001cc6 <_Z15deserialiseJSONv+0x96>
        case DeserializationError::NoMemory:
            printf("Not enough memory\n");
 8001c94:	4815      	ldr	r0, [pc, #84]	@ (8001cec <_Z15deserialiseJSONv+0xbc>)
 8001c96:	f011 fd55 	bl	8013744 <puts>
            configError = true;
 8001c9a:	4b13      	ldr	r3, [pc, #76]	@ (8001ce8 <_Z15deserialiseJSONv+0xb8>)
 8001c9c:	2201      	movs	r2, #1
 8001c9e:	701a      	strb	r2, [r3, #0]
            break;
 8001ca0:	e011      	b.n	8001cc6 <_Z15deserialiseJSONv+0x96>
        default:
            printf("Deserialization failed: ");
 8001ca2:	4813      	ldr	r0, [pc, #76]	@ (8001cf0 <_Z15deserialiseJSONv+0xc0>)
 8001ca4:	f011 fcde 	bl	8013664 <iprintf>
            printf(error.c_str());
 8001ca8:	1d3b      	adds	r3, r7, #4
 8001caa:	4618      	mov	r0, r3
 8001cac:	f7ff fd96 	bl	80017dc <_ZNK19ArduinoJson6101_11020DeserializationError5c_strEv>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	f011 fcd6 	bl	8013664 <iprintf>
            printf("\n");
 8001cb8:	200a      	movs	r0, #10
 8001cba:	f011 fce5 	bl	8013688 <putchar>
            configError = true;
 8001cbe:	4b0a      	ldr	r3, [pc, #40]	@ (8001ce8 <_Z15deserialiseJSONv+0xb8>)
 8001cc0:	2201      	movs	r2, #1
 8001cc2:	701a      	strb	r2, [r3, #0]
            break;
 8001cc4:	bf00      	nop
    }
}
 8001cc6:	bf00      	nop
 8001cc8:	3710      	adds	r7, #16
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bd80      	pop	{r7, pc}
 8001cce:	bf00      	nop
 8001cd0:	08014678 	.word	0x08014678
 8001cd4:	24000524 	.word	0x24000524
 8001cd8:	24000548 	.word	0x24000548
 8001cdc:	0801469c 	.word	0x0801469c
 8001ce0:	080146b8 	.word	0x080146b8
 8001ce4:	080146d4 	.word	0x080146d4
 8001ce8:	24000352 	.word	0x24000352
 8001cec:	080146e4 	.word	0x080146e4
 8001cf0:	080146f8 	.word	0x080146f8

08001cf4 <_Z13configThreadsv>:

void configThreads()
{
 8001cf4:	b5b0      	push	{r4, r5, r7, lr}
 8001cf6:	b0bc      	sub	sp, #240	@ 0xf0
 8001cf8:	af00      	add	r7, sp, #0
    if (configError) return;
 8001cfa:	4bcb      	ldr	r3, [pc, #812]	@ (8002028 <_Z13configThreadsv+0x334>)
 8001cfc:	781b      	ldrb	r3, [r3, #0]
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	f040 818d 	bne.w	800201e <_Z13configThreadsv+0x32a>

    printf("\n4. Configuring threads\n");
 8001d04:	48c9      	ldr	r0, [pc, #804]	@ (800202c <_Z13configThreadsv+0x338>)
 8001d06:	f011 fd1d 	bl	8013744 <puts>
 8001d0a:	4bc9      	ldr	r3, [pc, #804]	@ (8002030 <_Z13configThreadsv+0x33c>)
 8001d0c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8001d10:	4bc8      	ldr	r3, [pc, #800]	@ (8002034 <_Z13configThreadsv+0x340>)
 8001d12:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8001d16:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001d1a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
                    public Visitable {
  typedef MemberProxy<TObject, TStringRef> this_type;

 public:
  FORCE_INLINE MemberProxy(TObject variant, TStringRef key)
      : _object(variant), _key(key) {}
 8001d1e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001d22:	623b      	str	r3, [r7, #32]
 8001d24:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001d28:	627b      	str	r3, [r7, #36]	@ 0x24
    return MemberProxy<JsonDocument&, TChar*>(*this, key);
 8001d2a:	bf00      	nop
template <typename TImpl>
class VariantCasts {
 public:
  template <typename T>
  FORCE_INLINE operator T() const {
    return impl()->template as<T>();
 8001d2c:	f107 0320 	add.w	r3, r7, #32
 8001d30:	4618      	mov	r0, r3
 8001d32:	f000 ff9b 	bl	8002c6c <_ZNK19ArduinoJson6101_11012VariantCastsINS_11MemberProxyIRNS_12JsonDocumentEPKcEEE4implEv>
 8001d36:	4603      	mov	r3, r0
 8001d38:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8001d3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001d40:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    return getOrAddUpstreamMember().getOrAddMember(key);
  }

 private:
  FORCE_INLINE VariantRef getUpstreamMember() const {
    return _object.getMember(_key);
 8001d44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001d48:	681a      	ldr	r2, [r3, #0]
 8001d4a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001d4e:	685b      	ldr	r3, [r3, #4]
 8001d50:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8001d54:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    return VariantRef(&_pool, _data.getMember(adaptString(key)));
 8001d58:	f8d7 40dc 	ldr.w	r4, [r7, #220]	@ 0xdc
 8001d5c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001d60:	f103 0510 	add.w	r5, r3, #16
 8001d64:	f8d7 00d8 	ldr.w	r0, [r7, #216]	@ 0xd8
 8001d68:	f7ff f9ce 	bl	8001108 <_ZN19ArduinoJson6101_11011adaptStringEPKc>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	4619      	mov	r1, r3
 8001d70:	4628      	mov	r0, r5
 8001d72:	f001 fe10 	bl	8003996 <_ZNK19ArduinoJson6101_11011VariantData9getMemberINS_21ConstRamStringAdapterEEEPS0_T_>
 8001d76:	4603      	mov	r3, r0
 8001d78:	f8c7 40d4 	str.w	r4, [r7, #212]	@ 0xd4
 8001d7c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8001d80:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001d84:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8001d88:	4618      	mov	r0, r3
 8001d8a:	f000 fdb5 	bl	80028f8 <_ZN19ArduinoJson6101_11014VariantRefBaseINS_11VariantDataEEC1EPS1_>
 8001d8e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8001d92:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001d94:	bf00      	nop
 8001d96:	bf00      	nop
}

template <typename T>
inline typename enable_if<is_same<T, ArrayRef>::value, T>::type VariantRef::as()
    const {
  return ArrayRef(_pool, _data != 0 ? _data->asArray() : 0);
 8001d98:	6cfc      	ldr	r4, [r7, #76]	@ 0x4c
 8001d9a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d005      	beq.n	8001dac <_Z13configThreadsv+0xb8>
 8001da0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001da2:	4618      	mov	r0, r3
 8001da4:	f7ff f9d6 	bl	8001154 <_ZN19ArduinoJson6101_11011VariantData7asArrayEv>
 8001da8:	4603      	mov	r3, r0
 8001daa:	e000      	b.n	8001dae <_Z13configThreadsv+0xba>
 8001dac:	2300      	movs	r3, #0
 8001dae:	f8c7 40cc 	str.w	r4, [r7, #204]	@ 0xcc
 8001db2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 public:
  typedef ArrayIterator iterator;

  FORCE_INLINE ArrayRef() : base_type(0), _pool(0) {}
  FORCE_INLINE ArrayRef(MemoryPool* pool, CollectionData* data)
      : base_type(data), _pool(pool) {}
 8001db6:	f107 0318 	add.w	r3, r7, #24
 8001dba:	f8d7 10c8 	ldr.w	r1, [r7, #200]	@ 0xc8
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	f000 fda9 	bl	8002916 <_ZN19ArduinoJson6101_11012ArrayRefBaseINS_14CollectionDataEEC1EPS1_>
 8001dc4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8001dc8:	61fb      	str	r3, [r7, #28]
 8001dca:	bf00      	nop
    return getUpstreamMember().template as<TValue>();
 8001dcc:	bf00      	nop
 8001dce:	bf00      	nop
  VariantRef addElement() const {
    return VariantRef(_pool, arrayAdd(_data, _pool));
  }

  FORCE_INLINE iterator begin() const {
    if (!_data) return iterator();
 8001dd0:	69bb      	ldr	r3, [r7, #24]
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d105      	bne.n	8001de2 <_Z13configThreadsv+0xee>
 8001dd6:	f107 0310 	add.w	r3, r7, #16
 8001dda:	4618      	mov	r0, r3
 8001ddc:	f7ff fad7 	bl	800138e <_ZN19ArduinoJson6101_11013ArrayIteratorC1Ev>
 8001de0:	e00b      	b.n	8001dfa <_Z13configThreadsv+0x106>
    return iterator(_pool, _data->head());
 8001de2:	69fc      	ldr	r4, [r7, #28]
 8001de4:	69bb      	ldr	r3, [r7, #24]
 8001de6:	4618      	mov	r0, r3
 8001de8:	f7ff f810 	bl	8000e0c <_ZNK19ArduinoJson6101_11014CollectionData4headEv>
 8001dec:	4602      	mov	r2, r0
 8001dee:	f107 0310 	add.w	r3, r7, #16
 8001df2:	4621      	mov	r1, r4
 8001df4:	4618      	mov	r0, r3
 8001df6:	f7ff fad8 	bl	80013aa <_ZN19ArduinoJson6101_11013ArrayIteratorC1EPNS_10MemoryPoolEPNS_11VariantSlotE>

    JsonArray Threads = doc["Threads"];

    // create objects from JSON data
    for (JsonArray::iterator it=Threads.begin(); it!=Threads.end(); ++it)
 8001dfa:	e0fe      	b.n	8001ffa <_Z13configThreadsv+0x306>
    {
        thread = *it;
 8001dfc:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001e00:	f107 0210 	add.w	r2, r7, #16
 8001e04:	4611      	mov	r1, r2
 8001e06:	4618      	mov	r0, r3
 8001e08:	f7ff fae2 	bl	80013d0 <_ZNK19ArduinoJson6101_11013ArrayIteratordeEv>
 8001e0c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001e10:	4618      	mov	r0, r3
 8001e12:	f000 ff36 	bl	8002c82 <_ZNK19ArduinoJson6101_11012VariantCastsINS_10VariantRefEE4implEv>
 8001e16:	4603      	mov	r3, r0
 8001e18:	66bb      	str	r3, [r7, #104]	@ 0x68
}

template <typename T>
inline typename enable_if<is_same<T, ObjectRef>::value, T>::type
VariantRef::as() const {
  return ObjectRef(_pool, variantAsObject(_data));
 8001e1a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001e1c:	685c      	ldr	r4, [r3, #4]
 8001e1e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	4618      	mov	r0, r3
 8001e24:	f7ff faa2 	bl	800136c <_ZN19ArduinoJson6101_11015variantAsObjectEPNS_11VariantDataE>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	667c      	str	r4, [r7, #100]	@ 0x64
 8001e2c:	663b      	str	r3, [r7, #96]	@ 0x60
 public:
  typedef ObjectIterator iterator;

  FORCE_INLINE ObjectRef() : base_type(0), _pool(0) {}
  FORCE_INLINE ObjectRef(MemoryPool* buf, CollectionData* data)
      : base_type(data), _pool(buf) {}
 8001e2e:	f107 0308 	add.w	r3, r7, #8
 8001e32:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8001e34:	4618      	mov	r0, r3
 8001e36:	f000 fd7d 	bl	8002934 <_ZN19ArduinoJson6101_11013ObjectRefBaseINS_14CollectionDataEEC1EPS1_>
 8001e3a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001e3c:	60fb      	str	r3, [r7, #12]
 8001e3e:	bf00      	nop
 8001e40:	bf00      	nop
 8001e42:	4b7d      	ldr	r3, [pc, #500]	@ (8002038 <_Z13configThreadsv+0x344>)
 8001e44:	461a      	mov	r2, r3
 8001e46:	f107 0308 	add.w	r3, r7, #8
 8001e4a:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001e4e:	e882 0003 	stmia.w	r2, {r0, r1}
 8001e52:	4b7a      	ldr	r3, [pc, #488]	@ (800203c <_Z13configThreadsv+0x348>)
 8001e54:	677b      	str	r3, [r7, #116]	@ 0x74
template <typename TObject>
template <typename TString>
inline typename enable_if<IsString<TString *>::value,
                          MemberProxy<const TObject &, TString *> >::type
    ObjectShortcuts<TObject>::operator[](TString *key) const {
  return MemberProxy<const TObject &, TString *>(*impl(), key);
 8001e56:	4878      	ldr	r0, [pc, #480]	@ (8002038 <_Z13configThreadsv+0x344>)
 8001e58:	f000 ff1e 	bl	8002c98 <_ZNK19ArduinoJson6101_11015ObjectShortcutsINS_9ObjectRefEE4implEv>
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	673b      	str	r3, [r7, #112]	@ 0x70
 8001e60:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001e62:	66fb      	str	r3, [r7, #108]	@ 0x6c
      : _object(variant), _key(key) {}
 8001e64:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001e66:	633b      	str	r3, [r7, #48]	@ 0x30
 8001e68:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001e6a:	637b      	str	r3, [r7, #52]	@ 0x34
  return MemberProxy<const TObject &, TString *>(*impl(), key);
 8001e6c:	bf00      	nop
 8001e6e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001e72:	4618      	mov	r0, r3
 8001e74:	f000 ff1b 	bl	8002cae <_ZNK19ArduinoJson6101_11012VariantCastsINS_11MemberProxyIRKNS_9ObjectRefEPKcEEE4implEv>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8001e7e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001e82:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    return _object.getMember(_key);
 8001e86:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001e8a:	681a      	ldr	r2, [r3, #0]
 8001e8c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001e90:	685b      	ldr	r3, [r3, #4]
 8001e92:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 8001e96:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  // getMember(char*) const
  // getMember(const char*) const
  // getMember(const __FlashStringHelper*) const
  template <typename TChar>
  FORCE_INLINE VariantRef getMember(TChar* key) const {
    return get_impl(adaptString(key));
 8001e9a:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 8001e9e:	f7ff f933 	bl	8001108 <_ZN19ArduinoJson6101_11011adaptStringEPKc>
 8001ea2:	4602      	mov	r2, r0
 8001ea4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001ea8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8001eac:	607a      	str	r2, [r7, #4]
  }

 private:
  template <typename TAdaptedString>
  FORCE_INLINE VariantRef get_impl(TAdaptedString key) const {
    return VariantRef(_pool, objectGet(_data, key));
 8001eae:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001eb2:	685c      	ldr	r4, [r3, #4]
 8001eb4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	6879      	ldr	r1, [r7, #4]
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	f002 f909 	bl	80040d4 <_ZN19ArduinoJson6101_1109objectGetINS_21ConstRamStringAdapterEEEPNS_11VariantDataEPKNS_14CollectionDataET_>
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	67fc      	str	r4, [r7, #124]	@ 0x7c
 8001ec6:	67bb      	str	r3, [r7, #120]	@ 0x78
 8001ec8:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8001ecc:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8001ece:	4618      	mov	r0, r3
 8001ed0:	f000 fd12 	bl	80028f8 <_ZN19ArduinoJson6101_11014VariantRefBaseINS_11VariantDataEEC1EPS1_>
 8001ed4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001ed6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001ed8:	bf00      	nop
    return get_impl(adaptString(key));
 8001eda:	bf00      	nop
 8001edc:	bf00      	nop
  FORCE_INLINE typename enable_if<!is_same<T, ArrayRef>::value &&
                                      !is_same<T, ObjectRef>::value &&
                                      !is_same<T, VariantRef>::value,
                                  typename VariantAs<T>::type>::type
  as() const {
    return variantAs<T>(_data);
 8001ede:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	f001 fbe7 	bl	80036b4 <_ZN19ArduinoJson6101_1109variantAsIPKcEENS_9enable_ifIXoosrNS_7is_sameIT_S2_EE5valuesrNS4_IS5_PcEE5valueES2_E4typeEPKNS_11VariantDataE>
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	bf00      	nop
    return getUpstreamMember().template as<TValue>();
 8001eea:	bf00      	nop
 8001eec:	bf00      	nop

        const char* configor = thread["Thread"];
 8001eee:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8001ef2:	4b53      	ldr	r3, [pc, #332]	@ (8002040 <_Z13configThreadsv+0x34c>)
 8001ef4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return MemberProxy<const TObject &, TString *>(*impl(), key);
 8001ef8:	484f      	ldr	r0, [pc, #316]	@ (8002038 <_Z13configThreadsv+0x344>)
 8001efa:	f000 fecd 	bl	8002c98 <_ZNK19ArduinoJson6101_11015ObjectShortcutsINS_9ObjectRefEE4implEv>
 8001efe:	4603      	mov	r3, r0
 8001f00:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8001f04:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001f08:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      : _object(variant), _key(key) {}
 8001f0c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001f10:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001f12:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001f16:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return MemberProxy<const TObject &, TString *>(*impl(), key);
 8001f18:	bf00      	nop
 8001f1a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001f1e:	4618      	mov	r0, r3
 8001f20:	f000 fec5 	bl	8002cae <_ZNK19ArduinoJson6101_11012VariantCastsINS_11MemberProxyIRKNS_9ObjectRefEPKcEEE4implEv>
 8001f24:	4603      	mov	r3, r0
 8001f26:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8001f2a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001f2e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    return _object.getMember(_key);
 8001f32:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001f36:	681a      	ldr	r2, [r3, #0]
 8001f38:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001f3c:	685b      	ldr	r3, [r3, #4]
 8001f3e:	f8c7 20b0 	str.w	r2, [r7, #176]	@ 0xb0
 8001f42:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8001f46:	f8d7 00ac 	ldr.w	r0, [r7, #172]	@ 0xac
 8001f4a:	f7ff f8dd 	bl	8001108 <_ZN19ArduinoJson6101_11011adaptStringEPKc>
 8001f4e:	4602      	mov	r2, r0
 8001f50:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001f54:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8001f58:	603a      	str	r2, [r7, #0]
    return VariantRef(_pool, objectGet(_data, key));
 8001f5a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001f5e:	685c      	ldr	r4, [r3, #4]
 8001f60:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	6839      	ldr	r1, [r7, #0]
 8001f68:	4618      	mov	r0, r3
 8001f6a:	f002 f8b3 	bl	80040d4 <_ZN19ArduinoJson6101_1109objectGetINS_21ConstRamStringAdapterEEEPNS_11VariantDataEPKNS_14CollectionDataET_>
 8001f6e:	4603      	mov	r3, r0
 8001f70:	f8c7 40a4 	str.w	r4, [r7, #164]	@ 0xa4
 8001f74:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      : base_type(data), _pool(pool) {}
 8001f78:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8001f7c:	f8d7 10a0 	ldr.w	r1, [r7, #160]	@ 0xa0
 8001f80:	4618      	mov	r0, r3
 8001f82:	f000 fcb9 	bl	80028f8 <_ZN19ArduinoJson6101_11014VariantRefBaseINS_11VariantDataEEC1EPS1_>
 8001f86:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001f8a:	657b      	str	r3, [r7, #84]	@ 0x54
 8001f8c:	bf00      	nop
    return get_impl(adaptString(key));
 8001f8e:	bf00      	nop
 8001f90:	bf00      	nop
    return variantAs<T>(_data);
 8001f92:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001f94:	4618      	mov	r0, r3
 8001f96:	f001 fb9e 	bl	80036d6 <_ZN19ArduinoJson6101_1109variantAsImEENS_9enable_ifIXsrNS_11is_integralIT_EE5valueES3_E4typeEPKNS_11VariantDataE>
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	bf00      	nop
    return getUpstreamMember().template as<TValue>();
 8001f9e:	bf00      	nop
 8001fa0:	bf00      	nop
        uint32_t    freq = thread["Frequency"];
 8001fa2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8

        if (!strcmp(configor,"Base"))
 8001fa6:	4927      	ldr	r1, [pc, #156]	@ (8002044 <_Z13configThreadsv+0x350>)
 8001fa8:	f8d7 00ec 	ldr.w	r0, [r7, #236]	@ 0xec
 8001fac:	f7fe f998 	bl	80002e0 <strcmp>
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d10a      	bne.n	8001fcc <_Z13configThreadsv+0x2d8>
        {
            base_freq = freq;
 8001fb6:	4a24      	ldr	r2, [pc, #144]	@ (8002048 <_Z13configThreadsv+0x354>)
 8001fb8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8001fbc:	6013      	str	r3, [r2, #0]
            printf("	Setting BASE thread frequency to %lu\n", base_freq);
 8001fbe:	4b22      	ldr	r3, [pc, #136]	@ (8002048 <_Z13configThreadsv+0x354>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	4619      	mov	r1, r3
 8001fc4:	4821      	ldr	r0, [pc, #132]	@ (800204c <_Z13configThreadsv+0x358>)
 8001fc6:	f011 fb4d 	bl	8013664 <iprintf>
 8001fca:	e011      	b.n	8001ff0 <_Z13configThreadsv+0x2fc>
        }
        else if (!strcmp(configor,"Servo"))
 8001fcc:	4920      	ldr	r1, [pc, #128]	@ (8002050 <_Z13configThreadsv+0x35c>)
 8001fce:	f8d7 00ec 	ldr.w	r0, [r7, #236]	@ 0xec
 8001fd2:	f7fe f985 	bl	80002e0 <strcmp>
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d109      	bne.n	8001ff0 <_Z13configThreadsv+0x2fc>
        {
            servo_freq = freq;
 8001fdc:	4a1d      	ldr	r2, [pc, #116]	@ (8002054 <_Z13configThreadsv+0x360>)
 8001fde:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8001fe2:	6013      	str	r3, [r2, #0]
            printf("	Setting SERVO thread frequency to %lu\n", servo_freq);
 8001fe4:	4b1b      	ldr	r3, [pc, #108]	@ (8002054 <_Z13configThreadsv+0x360>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	4619      	mov	r1, r3
 8001fea:	481b      	ldr	r0, [pc, #108]	@ (8002058 <_Z13configThreadsv+0x364>)
 8001fec:	f011 fb3a 	bl	8013664 <iprintf>
    for (JsonArray::iterator it=Threads.begin(); it!=Threads.end(); ++it)
 8001ff0:	f107 0310 	add.w	r3, r7, #16
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	f7ff fa1b 	bl	8001430 <_ZN19ArduinoJson6101_11013ArrayIteratorppEv>
  }

  FORCE_INLINE iterator end() const {
    return iterator();
 8001ffa:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001ffe:	4618      	mov	r0, r3
 8002000:	f7ff f9c5 	bl	800138e <_ZN19ArduinoJson6101_11013ArrayIteratorC1Ev>
 8002004:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8002008:	f107 0310 	add.w	r3, r7, #16
 800200c:	4611      	mov	r1, r2
 800200e:	4618      	mov	r0, r3
 8002010:	f7ff f9fa 	bl	8001408 <_ZNK19ArduinoJson6101_11013ArrayIteratorneERKS0_>
 8002014:	4603      	mov	r3, r0
 8002016:	2b00      	cmp	r3, #0
 8002018:	f47f aef0 	bne.w	8001dfc <_Z13configThreadsv+0x108>
 800201c:	e000      	b.n	8002020 <_Z13configThreadsv+0x32c>
    if (configError) return;
 800201e:	bf00      	nop
        }
    }
}
 8002020:	37f0      	adds	r7, #240	@ 0xf0
 8002022:	46bd      	mov	sp, r7
 8002024:	bdb0      	pop	{r4, r5, r7, pc}
 8002026:	bf00      	nop
 8002028:	24000352 	.word	0x24000352
 800202c:	08014714 	.word	0x08014714
 8002030:	0801472c 	.word	0x0801472c
 8002034:	24000548 	.word	0x24000548
 8002038:	24000568 	.word	0x24000568
 800203c:	08014734 	.word	0x08014734
 8002040:	0801473c 	.word	0x0801473c
 8002044:	08014748 	.word	0x08014748
 8002048:	24000000 	.word	0x24000000
 800204c:	08014750 	.word	0x08014750
 8002050:	08014778 	.word	0x08014778
 8002054:	24000004 	.word	0x24000004
 8002058:	08014780 	.word	0x08014780

0800205c <main>:
    //Module* debugOffC = new Debug("PE_6", 0);
    //commsThread->registerModule(debugOffC);
}

int main(void)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b08a      	sub	sp, #40	@ 0x28
 8002060:	af02      	add	r7, sp, #8
	MPU_Config();
 8002062:	f000 fbad 	bl	80027c0 <_ZL10MPU_Configv>
	SCB->VTOR = 0x08000000;
 8002066:	4ba7      	ldr	r3, [pc, #668]	@ (8002304 <main+0x2a8>)
 8002068:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800206c:	609a      	str	r2, [r3, #8]
	HAL_Init();
 800206e:	f003 fe2d 	bl	8005ccc <HAL_Init>
	SystemClock_Config();
 8002072:	f000 f9bb 	bl	80023ec <_Z18SystemClock_Configv>
	PeriphCommonClock_Config();
 8002076:	f000 fa83 	bl	8002580 <_Z24PeriphCommonClock_Configv>
	//SCB_InvalidateDCache();
	//SCB_EnableDCache();
	//SCB_DisableDCache();

	/* DMA controller clock enable */
    __HAL_RCC_DMA1_CLK_ENABLE();
 800207a:	4ba3      	ldr	r3, [pc, #652]	@ (8002308 <main+0x2ac>)
 800207c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002080:	4aa1      	ldr	r2, [pc, #644]	@ (8002308 <main+0x2ac>)
 8002082:	f043 0301 	orr.w	r3, r3, #1
 8002086:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800208a:	4b9f      	ldr	r3, [pc, #636]	@ (8002308 <main+0x2ac>)
 800208c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002090:	f003 0301 	and.w	r3, r3, #1
 8002094:	607b      	str	r3, [r7, #4]
 8002096:	687b      	ldr	r3, [r7, #4]

	MX_GPIO_Init(); // used for SD card detect
 8002098:	f000 fb36 	bl	8002708 <_ZL12MX_GPIO_Initv>
	MX_USART1_UART_Init();
 800209c:	f000 fad4 	bl	8002648 <_ZL19MX_USART1_UART_Initv>
	MX_SDMMC1_SD_Init();		// uncomment #define ENABLE_SD_DMA_CACHE_MAINTENANCE  1 in FATFT/Target/sd_diskio.c
 80020a0:	f000 faa6 	bl	80025f0 <_ZL17MX_SDMMC1_SD_Initv>
	MX_FATFS_Init();
 80020a4:	f00e fafa 	bl	801069c <MX_FATFS_Init>
	//txPingPongBuffer.txBuffers[1].header = PRU_DATA;

	enum State currentState;
	enum State prevState;

	currentState = ST_SETUP;
 80020a8:	2300      	movs	r3, #0
 80020aa:	77fb      	strb	r3, [r7, #31]
	prevState = ST_RESET;
 80020ac:	2305      	movs	r3, #5
 80020ae:	77bb      	strb	r3, [r7, #30]

    comms->setStatus(false);
 80020b0:	4b96      	ldr	r3, [pc, #600]	@ (800230c <main+0x2b0>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	2100      	movs	r1, #0
 80020b6:	4618      	mov	r0, r3
 80020b8:	f003 faec 	bl	8005694 <_ZN11RemoraComms9setStatusEb>
    comms->setError(false);
 80020bc:	4b93      	ldr	r3, [pc, #588]	@ (800230c <main+0x2b0>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	2100      	movs	r1, #0
 80020c2:	4618      	mov	r0, r3
 80020c4:	f003 fb03 	bl	80056ce <_ZN11RemoraComms8setErrorEb>
    resetCnt = 0;
 80020c8:	4b91      	ldr	r3, [pc, #580]	@ (8002310 <main+0x2b4>)
 80020ca:	2200      	movs	r2, #0
 80020cc:	701a      	strb	r2, [r3, #0]

	printf("\nRemora version %d.%d.%d for %s starting\n\n", MAJOR_VERSION, MINOR_VERSION, PATCH, BOARD);
 80020ce:	4b91      	ldr	r3, [pc, #580]	@ (8002314 <main+0x2b8>)
 80020d0:	9300      	str	r3, [sp, #0]
 80020d2:	2300      	movs	r3, #0
 80020d4:	2201      	movs	r2, #1
 80020d6:	2100      	movs	r1, #0
 80020d8:	488f      	ldr	r0, [pc, #572]	@ (8002318 <main+0x2bc>)
 80020da:	f011 fac3 	bl	8013664 <iprintf>

	while (1)
	{
		switch(currentState){
 80020de:	7ffb      	ldrb	r3, [r7, #31]
 80020e0:	2b06      	cmp	r3, #6
 80020e2:	f200 810b 	bhi.w	80022fc <main+0x2a0>
 80020e6:	a201      	add	r2, pc, #4	@ (adr r2, 80020ec <main+0x90>)
 80020e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020ec:	08002109 	.word	0x08002109
 80020f0:	08002135 	.word	0x08002135
 80020f4:	08002181 	.word	0x08002181
 80020f8:	080021ab 	.word	0x080021ab
 80020fc:	08002237 	.word	0x08002237
 8002100:	0800224f 	.word	0x0800224f
 8002104:	080022f1 	.word	0x080022f1
			          case ST_SETUP:
			              // do setup tasks
			              if (currentState != prevState)
 8002108:	7ffa      	ldrb	r2, [r7, #31]
 800210a:	7fbb      	ldrb	r3, [r7, #30]
 800210c:	429a      	cmp	r2, r3
 800210e:	d002      	beq.n	8002116 <main+0xba>
			              {
			                  printf("\n## Entering SETUP state\n\n");
 8002110:	4882      	ldr	r0, [pc, #520]	@ (800231c <main+0x2c0>)
 8002112:	f011 fb17 	bl	8013744 <puts>
			              }
			              prevState = currentState;
 8002116:	7ffb      	ldrb	r3, [r7, #31]
 8002118:	77bb      	strb	r3, [r7, #30]

			              readJsonConfig();
 800211a:	f7ff fcab 	bl	8001a74 <_Z14readJsonConfigv>
			              setup();
 800211e:	f7ff fd71 	bl	8001c04 <_Z5setupv>
			              deserialiseJSON();
 8002122:	f7ff fd85 	bl	8001c30 <_Z15deserialiseJSONv>
			              configThreads();
 8002126:	f7ff fde5 	bl	8001cf4 <_Z13configThreadsv>
			              createThreads();
 800212a:	f7ff fc47 	bl	80019bc <_Z13createThreadsv>
			              //debugThreadHigh();
			              //loadModules();
			              //debugThreadLow();

			              currentState = ST_START;
 800212e:	2301      	movs	r3, #1
 8002130:	77fb      	strb	r3, [r7, #31]
			              break;
 8002132:	e0e3      	b.n	80022fc <main+0x2a0>

			          case ST_START:
			              // do start tasks
			              if (currentState != prevState)
 8002134:	7ffa      	ldrb	r2, [r7, #31]
 8002136:	7fbb      	ldrb	r3, [r7, #30]
 8002138:	429a      	cmp	r2, r3
 800213a:	d002      	beq.n	8002142 <main+0xe6>
			              {
			                  printf("\n## Entering START state\n");
 800213c:	4878      	ldr	r0, [pc, #480]	@ (8002320 <main+0x2c4>)
 800213e:	f011 fb01 	bl	8013744 <puts>
			              }
			              prevState = currentState;
 8002142:	7ffb      	ldrb	r3, [r7, #31]
 8002144:	77bb      	strb	r3, [r7, #30]

			              if (!threadsRunning)
 8002146:	4b77      	ldr	r3, [pc, #476]	@ (8002324 <main+0x2c8>)
 8002148:	781b      	ldrb	r3, [r3, #0]
 800214a:	f083 0301 	eor.w	r3, r3, #1
 800214e:	b2db      	uxtb	r3, r3
 8002150:	2b00      	cmp	r3, #0
 8002152:	d012      	beq.n	800217a <main+0x11e>
			              {
			                  // Start the threads
			                  printf("\nStarting the BASE thread\n");
 8002154:	4874      	ldr	r0, [pc, #464]	@ (8002328 <main+0x2cc>)
 8002156:	f011 faf5 	bl	8013744 <puts>
			                  baseThread->startThread();
 800215a:	4b74      	ldr	r3, [pc, #464]	@ (800232c <main+0x2d0>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	4618      	mov	r0, r3
 8002160:	f003 fb3c 	bl	80057dc <_ZN9pruThread11startThreadEv>

			                  printf("\nStarting the SERVO thread\n");
 8002164:	4872      	ldr	r0, [pc, #456]	@ (8002330 <main+0x2d4>)
 8002166:	f011 faed 	bl	8013744 <puts>
			                  servoThread->startThread();
 800216a:	4b72      	ldr	r3, [pc, #456]	@ (8002334 <main+0x2d8>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	4618      	mov	r0, r3
 8002170:	f003 fb34 	bl	80057dc <_ZN9pruThread11startThreadEv>

			                  threadsRunning = true;
 8002174:	4b6b      	ldr	r3, [pc, #428]	@ (8002324 <main+0x2c8>)
 8002176:	2201      	movs	r2, #1
 8002178:	701a      	strb	r2, [r3, #0]
			              }

			              currentState = ST_IDLE;
 800217a:	2302      	movs	r3, #2
 800217c:	77fb      	strb	r3, [r7, #31]

			              break;
 800217e:	e0bd      	b.n	80022fc <main+0x2a0>


			          case ST_IDLE:
			              // do something when idle
			              if (currentState != prevState)
 8002180:	7ffa      	ldrb	r2, [r7, #31]
 8002182:	7fbb      	ldrb	r3, [r7, #30]
 8002184:	429a      	cmp	r2, r3
 8002186:	d002      	beq.n	800218e <main+0x132>
			              {
			                  printf("\n## Entering IDLE state\n");
 8002188:	486b      	ldr	r0, [pc, #428]	@ (8002338 <main+0x2dc>)
 800218a:	f011 fadb 	bl	8013744 <puts>
			              }
			              prevState = currentState;
 800218e:	7ffb      	ldrb	r3, [r7, #31]
 8002190:	77bb      	strb	r3, [r7, #30]

			              //wait for data before changing to running state
			              if (comms->getStatus())
 8002192:	4b5e      	ldr	r3, [pc, #376]	@ (800230c <main+0x2b0>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	4618      	mov	r0, r3
 8002198:	f003 fa6f 	bl	800567a <_ZN11RemoraComms9getStatusEv>
 800219c:	4603      	mov	r3, r0
 800219e:	2b00      	cmp	r3, #0
 80021a0:	f000 80a9 	beq.w	80022f6 <main+0x29a>
			              {
			                  currentState = ST_RUNNING;
 80021a4:	2303      	movs	r3, #3
 80021a6:	77fb      	strb	r3, [r7, #31]
			              }

			              break;
 80021a8:	e0a5      	b.n	80022f6 <main+0x29a>

			          case ST_RUNNING:
			              // do running tasks
			              if (currentState != prevState)
 80021aa:	7ffa      	ldrb	r2, [r7, #31]
 80021ac:	7fbb      	ldrb	r3, [r7, #30]
 80021ae:	429a      	cmp	r2, r3
 80021b0:	d002      	beq.n	80021b8 <main+0x15c>
			              {
			                  printf("\n## Entering RUNNING state\n");
 80021b2:	4862      	ldr	r0, [pc, #392]	@ (800233c <main+0x2e0>)
 80021b4:	f011 fac6 	bl	8013744 <puts>
			              }
			              prevState = currentState;
 80021b8:	7ffb      	ldrb	r3, [r7, #31]
 80021ba:	77bb      	strb	r3, [r7, #30]


			              // check to see if there there has been SPI errors
			              if (comms->getError())
 80021bc:	4b53      	ldr	r3, [pc, #332]	@ (800230c <main+0x2b0>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4618      	mov	r0, r3
 80021c2:	f003 fa77 	bl	80056b4 <_ZN11RemoraComms8getErrorEv>
 80021c6:	4603      	mov	r3, r0
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d008      	beq.n	80021de <main+0x182>
			              {
			                  printf("Communication data error\n");
 80021cc:	485c      	ldr	r0, [pc, #368]	@ (8002340 <main+0x2e4>)
 80021ce:	f011 fab9 	bl	8013744 <puts>
			                  comms->setError(false);
 80021d2:	4b4e      	ldr	r3, [pc, #312]	@ (800230c <main+0x2b0>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	2100      	movs	r1, #0
 80021d8:	4618      	mov	r0, r3
 80021da:	f003 fa78 	bl	80056ce <_ZN11RemoraComms8setErrorEb>
			              }

			              if (comms->getStatus())
 80021de:	4b4b      	ldr	r3, [pc, #300]	@ (800230c <main+0x2b0>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	4618      	mov	r0, r3
 80021e4:	f003 fa49 	bl	800567a <_ZN11RemoraComms9getStatusEv>
 80021e8:	4603      	mov	r3, r0
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d009      	beq.n	8002202 <main+0x1a6>
			              {
			                  // SPI data received by DMA
			                  resetCnt = 0;
 80021ee:	4b48      	ldr	r3, [pc, #288]	@ (8002310 <main+0x2b4>)
 80021f0:	2200      	movs	r2, #0
 80021f2:	701a      	strb	r2, [r3, #0]
			                  comms->setStatus(false);
 80021f4:	4b45      	ldr	r3, [pc, #276]	@ (800230c <main+0x2b0>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	2100      	movs	r1, #0
 80021fa:	4618      	mov	r0, r3
 80021fc:	f003 fa4a 	bl	8005694 <_ZN11RemoraComms9setStatusEb>
 8002200:	e005      	b.n	800220e <main+0x1b2>
			              }
			              else
			              {
			                  // no data received by DMA
			                  resetCnt++;
 8002202:	4b43      	ldr	r3, [pc, #268]	@ (8002310 <main+0x2b4>)
 8002204:	781b      	ldrb	r3, [r3, #0]
 8002206:	3301      	adds	r3, #1
 8002208:	b2da      	uxtb	r2, r3
 800220a:	4b41      	ldr	r3, [pc, #260]	@ (8002310 <main+0x2b4>)
 800220c:	701a      	strb	r2, [r3, #0]
			              }

			              if (resetCnt > SPI_ERR_MAX)
 800220e:	4b40      	ldr	r3, [pc, #256]	@ (8002310 <main+0x2b4>)
 8002210:	781b      	ldrb	r3, [r3, #0]
 8002212:	2b05      	cmp	r3, #5
 8002214:	d907      	bls.n	8002226 <main+0x1ca>
			              {
			                  // reset threshold reached, reset the PRU
			                  printf("   Communication data error limit reached, resetting\n");
 8002216:	484b      	ldr	r0, [pc, #300]	@ (8002344 <main+0x2e8>)
 8002218:	f011 fa94 	bl	8013744 <puts>
			                  resetCnt = 0;
 800221c:	4b3c      	ldr	r3, [pc, #240]	@ (8002310 <main+0x2b4>)
 800221e:	2200      	movs	r2, #0
 8002220:	701a      	strb	r2, [r3, #0]
			                  currentState = ST_RESET;
 8002222:	2305      	movs	r3, #5
 8002224:	77fb      	strb	r3, [r7, #31]
			              }

			              if (PRUreset)
 8002226:	4b48      	ldr	r3, [pc, #288]	@ (8002348 <main+0x2ec>)
 8002228:	781b      	ldrb	r3, [r3, #0]
 800222a:	b2db      	uxtb	r3, r3
 800222c:	2b00      	cmp	r3, #0
 800222e:	d064      	beq.n	80022fa <main+0x29e>
			              {
			                  currentState = ST_WDRESET;
 8002230:	2306      	movs	r3, #6
 8002232:	77fb      	strb	r3, [r7, #31]
			              }

			              break;
 8002234:	e061      	b.n	80022fa <main+0x29e>

			          case ST_STOP:
			              // do stop tasks
			              if (currentState != prevState)
 8002236:	7ffa      	ldrb	r2, [r7, #31]
 8002238:	7fbb      	ldrb	r3, [r7, #30]
 800223a:	429a      	cmp	r2, r3
 800223c:	d002      	beq.n	8002244 <main+0x1e8>
			              {
			                  printf("\n## Entering STOP state\n");
 800223e:	4843      	ldr	r0, [pc, #268]	@ (800234c <main+0x2f0>)
 8002240:	f011 fa80 	bl	8013744 <puts>
			              }
			              prevState = currentState;
 8002244:	7ffb      	ldrb	r3, [r7, #31]
 8002246:	77bb      	strb	r3, [r7, #30]


			              currentState = ST_STOP;
 8002248:	2304      	movs	r3, #4
 800224a:	77fb      	strb	r3, [r7, #31]
			              break;
 800224c:	e056      	b.n	80022fc <main+0x2a0>

			          case ST_RESET:
			              // do reset tasks
			              if (currentState != prevState)
 800224e:	7ffa      	ldrb	r2, [r7, #31]
 8002250:	7fbb      	ldrb	r3, [r7, #30]
 8002252:	429a      	cmp	r2, r3
 8002254:	d002      	beq.n	800225c <main+0x200>
			              {
			                  printf("\n## Entering RESET state\n");
 8002256:	483e      	ldr	r0, [pc, #248]	@ (8002350 <main+0x2f4>)
 8002258:	f011 fa74 	bl	8013744 <puts>
			              }
			              prevState = currentState;
 800225c:	7ffb      	ldrb	r3, [r7, #31]
 800225e:	77bb      	strb	r3, [r7, #30]

			              // set all of the rxData buffer to 0
			              // rxData.rxBuffer is volatile so need to do this the long way. memset cannot be used for volatile

			              pruRxData = getCurrentRxBuffer(&rxPingPongBuffer);
 8002260:	483c      	ldr	r0, [pc, #240]	@ (8002354 <main+0x2f8>)
 8002262:	f000 f88f 	bl	8002384 <_Z18getCurrentRxBufferP16RxPingPongBuffer>
 8002266:	4603      	mov	r3, r0
 8002268:	4a3b      	ldr	r2, [pc, #236]	@ (8002358 <main+0x2fc>)
 800226a:	6013      	str	r3, [r2, #0]

			              printf("   Resetting rxBuffer\n");
 800226c:	483b      	ldr	r0, [pc, #236]	@ (800235c <main+0x300>)
 800226e:	f011 fa69 	bl	8013744 <puts>
			              {
			            	  SCB_InvalidateDCache_by_Addr((uint32_t*)(((uint32_t)pruRxData->rxBuffer) & ~(uint32_t)0x1F), BUFFER_ALIGNED_SIZE);
 8002272:	4b39      	ldr	r3, [pc, #228]	@ (8002358 <main+0x2fc>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f023 031f 	bic.w	r3, r3, #31
 800227a:	617b      	str	r3, [r7, #20]
 800227c:	2340      	movs	r3, #64	@ 0x40
 800227e:	613b      	str	r3, [r7, #16]
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_FORCEINLINE void SCB_InvalidateDCache_by_Addr (void *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    if ( dsize > 0 ) { 
 8002280:	693b      	ldr	r3, [r7, #16]
 8002282:	2b00      	cmp	r3, #0
 8002284:	dd1d      	ble.n	80022c2 <main+0x266>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8002286:	697b      	ldr	r3, [r7, #20]
 8002288:	f003 021f 	and.w	r2, r3, #31
 800228c:	693b      	ldr	r3, [r7, #16]
 800228e:	4413      	add	r3, r2
 8002290:	60fb      	str	r3, [r7, #12]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8002292:	697b      	ldr	r3, [r7, #20]
 8002294:	60bb      	str	r3, [r7, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002296:	f3bf 8f4f 	dsb	sy
}
 800229a:	bf00      	nop
    
      __DSB();

      do {
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 800229c:	4a19      	ldr	r2, [pc, #100]	@ (8002304 <main+0x2a8>)
 800229e:	68bb      	ldr	r3, [r7, #8]
 80022a0:	f8c2 325c 	str.w	r3, [r2, #604]	@ 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 80022a4:	68bb      	ldr	r3, [r7, #8]
 80022a6:	3320      	adds	r3, #32
 80022a8:	60bb      	str	r3, [r7, #8]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	3b20      	subs	r3, #32
 80022ae:	60fb      	str	r3, [r7, #12]
      } while ( op_size > 0 );
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	dcf2      	bgt.n	800229c <main+0x240>
  __ASM volatile ("dsb 0xF":::"memory");
 80022b6:	f3bf 8f4f 	dsb	sy
}
 80022ba:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80022bc:	f3bf 8f6f 	isb	sy
}
 80022c0:	bf00      	nop

      __DSB();
      __ISB();
    }
  #endif
}
 80022c2:	bf00      	nop
			                  int n = sizeof(pruRxData->rxBuffer);
 80022c4:	2340      	movs	r3, #64	@ 0x40
 80022c6:	61bb      	str	r3, [r7, #24]
			                  while(n-- > 0)
 80022c8:	e005      	b.n	80022d6 <main+0x27a>
			                  {
			                      pruRxData->rxBuffer[n] = 0;
 80022ca:	4b23      	ldr	r3, [pc, #140]	@ (8002358 <main+0x2fc>)
 80022cc:	681a      	ldr	r2, [r3, #0]
 80022ce:	69bb      	ldr	r3, [r7, #24]
 80022d0:	4413      	add	r3, r2
 80022d2:	2200      	movs	r2, #0
 80022d4:	701a      	strb	r2, [r3, #0]
			                  while(n-- > 0)
 80022d6:	69bb      	ldr	r3, [r7, #24]
 80022d8:	1e5a      	subs	r2, r3, #1
 80022da:	61ba      	str	r2, [r7, #24]
 80022dc:	2b00      	cmp	r3, #0
 80022de:	bfcc      	ite	gt
 80022e0:	2301      	movgt	r3, #1
 80022e2:	2300      	movle	r3, #0
 80022e4:	b2db      	uxtb	r3, r3
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d1ef      	bne.n	80022ca <main+0x26e>
			                  }
			              }

			              currentState = ST_IDLE;
 80022ea:	2302      	movs	r3, #2
 80022ec:	77fb      	strb	r3, [r7, #31]
			              break;
 80022ee:	e005      	b.n	80022fc <main+0x2a0>

			          case ST_WDRESET:
			        	  // force a reset
			        	  HAL_NVIC_SystemReset();
 80022f0:	f003 fec7 	bl	8006082 <HAL_NVIC_SystemReset>
			              break;
 80022f4:	e002      	b.n	80022fc <main+0x2a0>
			              break;
 80022f6:	bf00      	nop
 80022f8:	e000      	b.n	80022fc <main+0x2a0>
			              break;
 80022fa:	bf00      	nop
			  }
		HAL_Delay(100);
 80022fc:	2064      	movs	r0, #100	@ 0x64
 80022fe:	f003 fd77 	bl	8005df0 <HAL_Delay>
	}
 8002302:	e6ec      	b.n	80020de <main+0x82>
 8002304:	e000ed00 	.word	0xe000ed00
 8002308:	58024400 	.word	0x58024400
 800230c:	24000578 	.word	0x24000578
 8002310:	24000350 	.word	0x24000350
 8002314:	080147e4 	.word	0x080147e4
 8002318:	080147b8 	.word	0x080147b8
 800231c:	080147f0 	.word	0x080147f0
 8002320:	0801480c 	.word	0x0801480c
 8002324:	24000353 	.word	0x24000353
 8002328:	08014828 	.word	0x08014828
 800232c:	24000358 	.word	0x24000358
 8002330:	08014844 	.word	0x08014844
 8002334:	24000354 	.word	0x24000354
 8002338:	08014860 	.word	0x08014860
 800233c:	08014878 	.word	0x08014878
 8002340:	08014894 	.word	0x08014894
 8002344:	080148b0 	.word	0x080148b0
 8002348:	24000351 	.word	0x24000351
 800234c:	080148e8 	.word	0x080148e8
 8002350:	08014900 	.word	0x08014900
 8002354:	24000360 	.word	0x24000360
 8002358:	24000520 	.word	0x24000520
 800235c:	0801491c 	.word	0x0801491c

08002360 <_Z13swapTxBuffersP16TxPingPongBuffer>:

void swapRxBuffers(RxPingPongBuffer* buffer) {
    buffer->currentRxBuffer = 1 - buffer->currentRxBuffer;
}

void swapTxBuffers(TxPingPongBuffer* buffer) {
 8002360:	b480      	push	{r7}
 8002362:	b083      	sub	sp, #12
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
    buffer->currentTxBuffer = 1 - buffer->currentTxBuffer;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800236e:	f1c3 0201 	rsb	r2, r3, #1
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
}
 8002378:	bf00      	nop
 800237a:	370c      	adds	r7, #12
 800237c:	46bd      	mov	sp, r7
 800237e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002382:	4770      	bx	lr

08002384 <_Z18getCurrentRxBufferP16RxPingPongBuffer>:

rxData_t* getCurrentRxBuffer(RxPingPongBuffer* buffer) {
 8002384:	b480      	push	{r7}
 8002386:	b083      	sub	sp, #12
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
    return &buffer->rxBuffers[buffer->currentRxBuffer];
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002392:	019b      	lsls	r3, r3, #6
 8002394:	687a      	ldr	r2, [r7, #4]
 8002396:	4413      	add	r3, r2
}
 8002398:	4618      	mov	r0, r3
 800239a:	370c      	adds	r7, #12
 800239c:	46bd      	mov	sp, r7
 800239e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a2:	4770      	bx	lr

080023a4 <_Z14getAltRxBufferP16RxPingPongBuffer>:

txData_t* getCurrentTxBuffer(TxPingPongBuffer* buffer) {
    return &buffer->txBuffers[buffer->currentTxBuffer];
}

rxData_t* getAltRxBuffer(RxPingPongBuffer* buffer) {
 80023a4:	b480      	push	{r7}
 80023a6:	b083      	sub	sp, #12
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
    return &buffer->rxBuffers[1 - buffer->currentRxBuffer];
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80023b2:	f1c3 0301 	rsb	r3, r3, #1
 80023b6:	019b      	lsls	r3, r3, #6
 80023b8:	687a      	ldr	r2, [r7, #4]
 80023ba:	4413      	add	r3, r2
}
 80023bc:	4618      	mov	r0, r3
 80023be:	370c      	adds	r7, #12
 80023c0:	46bd      	mov	sp, r7
 80023c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c6:	4770      	bx	lr

080023c8 <_Z14getAltTxBufferP16TxPingPongBuffer>:

txData_t* getAltTxBuffer(TxPingPongBuffer* buffer) {
 80023c8:	b480      	push	{r7}
 80023ca:	b083      	sub	sp, #12
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
    return &buffer->txBuffers[1 - buffer->currentTxBuffer];
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80023d6:	f1c3 0301 	rsb	r3, r3, #1
 80023da:	019b      	lsls	r3, r3, #6
 80023dc:	687a      	ldr	r2, [r7, #4]
 80023de:	4413      	add	r3, r2
}
 80023e0:	4618      	mov	r0, r3
 80023e2:	370c      	adds	r7, #12
 80023e4:	46bd      	mov	sp, r7
 80023e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ea:	4770      	bx	lr

080023ec <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b09e      	sub	sp, #120	@ 0x78
 80023f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80023f2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80023f6:	224c      	movs	r2, #76	@ 0x4c
 80023f8:	2100      	movs	r1, #0
 80023fa:	4618      	mov	r0, r3
 80023fc:	f011 fa9c 	bl	8013938 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002400:	f107 030c 	add.w	r3, r7, #12
 8002404:	2220      	movs	r2, #32
 8002406:	2100      	movs	r1, #0
 8002408:	4618      	mov	r0, r3
 800240a:	f011 fa95 	bl	8013938 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800240e:	2002      	movs	r0, #2
 8002410:	f006 fc8c 	bl	8008d2c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002414:	2300      	movs	r3, #0
 8002416:	60bb      	str	r3, [r7, #8]
 8002418:	4b56      	ldr	r3, [pc, #344]	@ (8002574 <_Z18SystemClock_Configv+0x188>)
 800241a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800241c:	4a55      	ldr	r2, [pc, #340]	@ (8002574 <_Z18SystemClock_Configv+0x188>)
 800241e:	f023 0301 	bic.w	r3, r3, #1
 8002422:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8002424:	4b53      	ldr	r3, [pc, #332]	@ (8002574 <_Z18SystemClock_Configv+0x188>)
 8002426:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002428:	f003 0301 	and.w	r3, r3, #1
 800242c:	60bb      	str	r3, [r7, #8]
 800242e:	4b52      	ldr	r3, [pc, #328]	@ (8002578 <_Z18SystemClock_Configv+0x18c>)
 8002430:	699b      	ldr	r3, [r3, #24]
 8002432:	4a51      	ldr	r2, [pc, #324]	@ (8002578 <_Z18SystemClock_Configv+0x18c>)
 8002434:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002438:	6193      	str	r3, [r2, #24]
 800243a:	4b4f      	ldr	r3, [pc, #316]	@ (8002578 <_Z18SystemClock_Configv+0x18c>)
 800243c:	699b      	ldr	r3, [r3, #24]
 800243e:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002442:	60bb      	str	r3, [r7, #8]
 8002444:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8002446:	bf00      	nop
 8002448:	4b4b      	ldr	r3, [pc, #300]	@ (8002578 <_Z18SystemClock_Configv+0x18c>)
 800244a:	699b      	ldr	r3, [r3, #24]
 800244c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002450:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002454:	bf14      	ite	ne
 8002456:	2301      	movne	r3, #1
 8002458:	2300      	moveq	r3, #0
 800245a:	b2db      	uxtb	r3, r3
 800245c:	2b00      	cmp	r3, #0
 800245e:	d1f3      	bne.n	8002448 <_Z18SystemClock_Configv+0x5c>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002460:	4b46      	ldr	r3, [pc, #280]	@ (800257c <_Z18SystemClock_Configv+0x190>)
 8002462:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002466:	4a45      	ldr	r2, [pc, #276]	@ (800257c <_Z18SystemClock_Configv+0x190>)
 8002468:	f043 0302 	orr.w	r3, r3, #2
 800246c:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8002470:	4b42      	ldr	r3, [pc, #264]	@ (800257c <_Z18SystemClock_Configv+0x190>)
 8002472:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002476:	f003 0302 	and.w	r3, r3, #2
 800247a:	607b      	str	r3, [r7, #4]
 800247c:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800247e:	2300      	movs	r3, #0
 8002480:	603b      	str	r3, [r7, #0]
 8002482:	4b3d      	ldr	r3, [pc, #244]	@ (8002578 <_Z18SystemClock_Configv+0x18c>)
 8002484:	699b      	ldr	r3, [r3, #24]
 8002486:	4a3c      	ldr	r2, [pc, #240]	@ (8002578 <_Z18SystemClock_Configv+0x18c>)
 8002488:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800248c:	6193      	str	r3, [r2, #24]
 800248e:	4b3a      	ldr	r3, [pc, #232]	@ (8002578 <_Z18SystemClock_Configv+0x18c>)
 8002490:	699b      	ldr	r3, [r3, #24]
 8002492:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002496:	603b      	str	r3, [r7, #0]
 8002498:	4b36      	ldr	r3, [pc, #216]	@ (8002574 <_Z18SystemClock_Configv+0x188>)
 800249a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800249c:	4a35      	ldr	r2, [pc, #212]	@ (8002574 <_Z18SystemClock_Configv+0x188>)
 800249e:	f043 0301 	orr.w	r3, r3, #1
 80024a2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80024a4:	4b33      	ldr	r3, [pc, #204]	@ (8002574 <_Z18SystemClock_Configv+0x188>)
 80024a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024a8:	f003 0301 	and.w	r3, r3, #1
 80024ac:	603b      	str	r3, [r7, #0]
 80024ae:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80024b0:	bf00      	nop
 80024b2:	4b31      	ldr	r3, [pc, #196]	@ (8002578 <_Z18SystemClock_Configv+0x18c>)
 80024b4:	699b      	ldr	r3, [r3, #24]
 80024b6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80024ba:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80024be:	bf14      	ite	ne
 80024c0:	2301      	movne	r3, #1
 80024c2:	2300      	moveq	r3, #0
 80024c4:	b2db      	uxtb	r3, r3
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d1f3      	bne.n	80024b2 <_Z18SystemClock_Configv+0xc6>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 80024ca:	4b2c      	ldr	r3, [pc, #176]	@ (800257c <_Z18SystemClock_Configv+0x190>)
 80024cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024ce:	f023 0303 	bic.w	r3, r3, #3
 80024d2:	4a2a      	ldr	r2, [pc, #168]	@ (800257c <_Z18SystemClock_Configv+0x190>)
 80024d4:	f043 0302 	orr.w	r3, r3, #2
 80024d8:	6293      	str	r3, [r2, #40]	@ 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80024da:	2301      	movs	r3, #1
 80024dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80024de:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80024e2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80024e4:	2302      	movs	r3, #2
 80024e6:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80024e8:	2302      	movs	r3, #2
 80024ea:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLM = 5;
 80024ec:	2305      	movs	r3, #5
 80024ee:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 192;
 80024f0:	23c0      	movs	r3, #192	@ 0xc0
 80024f2:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 80024f4:	2302      	movs	r3, #2
 80024f6:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80024f8:	2304      	movs	r3, #4
 80024fa:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLR = 2;
 80024fc:	2302      	movs	r3, #2
 80024fe:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8002500:	2308      	movs	r3, #8
 8002502:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8002504:	2300      	movs	r3, #0
 8002506:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8002508:	2300      	movs	r3, #0
 800250a:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800250c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002510:	4618      	mov	r0, r3
 8002512:	f006 fc45 	bl	8008da0 <HAL_RCC_OscConfig>
 8002516:	4603      	mov	r3, r0
 8002518:	2b00      	cmp	r3, #0
 800251a:	bf14      	ite	ne
 800251c:	2301      	movne	r3, #1
 800251e:	2300      	moveq	r3, #0
 8002520:	b2db      	uxtb	r3, r3
 8002522:	2b00      	cmp	r3, #0
 8002524:	d001      	beq.n	800252a <_Z18SystemClock_Configv+0x13e>
  {
    Error_Handler();
 8002526:	f000 f993 	bl	8002850 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800252a:	233f      	movs	r3, #63	@ 0x3f
 800252c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800252e:	2303      	movs	r3, #3
 8002530:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8002532:	2300      	movs	r3, #0
 8002534:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8002536:	2308      	movs	r3, #8
 8002538:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800253a:	2340      	movs	r3, #64	@ 0x40
 800253c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800253e:	2340      	movs	r3, #64	@ 0x40
 8002540:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8002542:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002546:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8002548:	2340      	movs	r3, #64	@ 0x40
 800254a:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800254c:	f107 030c 	add.w	r3, r7, #12
 8002550:	2104      	movs	r1, #4
 8002552:	4618      	mov	r0, r3
 8002554:	f007 f87e 	bl	8009654 <HAL_RCC_ClockConfig>
 8002558:	4603      	mov	r3, r0
 800255a:	2b00      	cmp	r3, #0
 800255c:	bf14      	ite	ne
 800255e:	2301      	movne	r3, #1
 8002560:	2300      	moveq	r3, #0
 8002562:	b2db      	uxtb	r3, r3
 8002564:	2b00      	cmp	r3, #0
 8002566:	d001      	beq.n	800256c <_Z18SystemClock_Configv+0x180>
  {
    Error_Handler();
 8002568:	f000 f972 	bl	8002850 <Error_Handler>
  }
}
 800256c:	bf00      	nop
 800256e:	3778      	adds	r7, #120	@ 0x78
 8002570:	46bd      	mov	sp, r7
 8002572:	bd80      	pop	{r7, pc}
 8002574:	58000400 	.word	0x58000400
 8002578:	58024800 	.word	0x58024800
 800257c:	58024400 	.word	0x58024400

08002580 <_Z24PeriphCommonClock_Configv>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b0b0      	sub	sp, #192	@ 0xc0
 8002584:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002586:	463b      	mov	r3, r7
 8002588:	22c0      	movs	r2, #192	@ 0xc0
 800258a:	2100      	movs	r1, #0
 800258c:	4618      	mov	r0, r3
 800258e:	f011 f9d3 	bl	8013938 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC|RCC_PERIPHCLK_SPI1;
 8002592:	f44f 3288 	mov.w	r2, #69632	@ 0x11000
 8002596:	f04f 0300 	mov.w	r3, #0
 800259a:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 2;
 800259e:	2302      	movs	r3, #2
 80025a0:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 12;
 80025a2:	230c      	movs	r3, #12
 80025a4:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 1;
 80025a6:	2301      	movs	r3, #1
 80025a8:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 10;
 80025aa:	230a      	movs	r3, #10
 80025ac:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 80025ae:	2302      	movs	r3, #2
 80025b0:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 80025b2:	23c0      	movs	r3, #192	@ 0xc0
 80025b4:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 80025b6:	2320      	movs	r3, #32
 80025b8:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 80025ba:	2300      	movs	r3, #0
 80025bc:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL2;
 80025be:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80025c2:	653b      	str	r3, [r7, #80]	@ 0x50
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL2;
 80025c4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80025c8:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80025ca:	463b      	mov	r3, r7
 80025cc:	4618      	mov	r0, r3
 80025ce:	f007 fbcd 	bl	8009d6c <HAL_RCCEx_PeriphCLKConfig>
 80025d2:	4603      	mov	r3, r0
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	bf14      	ite	ne
 80025d8:	2301      	movne	r3, #1
 80025da:	2300      	moveq	r3, #0
 80025dc:	b2db      	uxtb	r3, r3
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d001      	beq.n	80025e6 <_Z24PeriphCommonClock_Configv+0x66>
  {
    Error_Handler();
 80025e2:	f000 f935 	bl	8002850 <Error_Handler>
  }
}
 80025e6:	bf00      	nop
 80025e8:	37c0      	adds	r7, #192	@ 0xc0
 80025ea:	46bd      	mov	sp, r7
 80025ec:	bd80      	pop	{r7, pc}
	...

080025f0 <_ZL17MX_SDMMC1_SD_Initv>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 80025f4:	4b11      	ldr	r3, [pc, #68]	@ (800263c <_ZL17MX_SDMMC1_SD_Initv+0x4c>)
 80025f6:	4a12      	ldr	r2, [pc, #72]	@ (8002640 <_ZL17MX_SDMMC1_SD_Initv+0x50>)
 80025f8:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 80025fa:	4b10      	ldr	r3, [pc, #64]	@ (800263c <_ZL17MX_SDMMC1_SD_Initv+0x4c>)
 80025fc:	2200      	movs	r2, #0
 80025fe:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_ENABLE;
 8002600:	4b0e      	ldr	r3, [pc, #56]	@ (800263c <_ZL17MX_SDMMC1_SD_Initv+0x4c>)
 8002602:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002606:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8002608:	4b0c      	ldr	r3, [pc, #48]	@ (800263c <_ZL17MX_SDMMC1_SD_Initv+0x4c>)
 800260a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800260e:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8002610:	4b0a      	ldr	r3, [pc, #40]	@ (800263c <_ZL17MX_SDMMC1_SD_Initv+0x4c>)
 8002612:	2200      	movs	r2, #0
 8002614:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 8;
 8002616:	4b09      	ldr	r3, [pc, #36]	@ (800263c <_ZL17MX_SDMMC1_SD_Initv+0x4c>)
 8002618:	2208      	movs	r2, #8
 800261a:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN SDMMC1_Init 2 */
  if (HAL_SD_Init(&hsd1) != HAL_OK)
 800261c:	4807      	ldr	r0, [pc, #28]	@ (800263c <_ZL17MX_SDMMC1_SD_Initv+0x4c>)
 800261e:	f00a f8a3 	bl	800c768 <HAL_SD_Init>
 8002622:	4603      	mov	r3, r0
 8002624:	2b00      	cmp	r3, #0
 8002626:	bf14      	ite	ne
 8002628:	2301      	movne	r3, #1
 800262a:	2300      	moveq	r3, #0
 800262c:	b2db      	uxtb	r3, r3
 800262e:	2b00      	cmp	r3, #0
 8002630:	d002      	beq.n	8002638 <_ZL17MX_SDMMC1_SD_Initv+0x48>
  {
      printf("SD_Init error\n");
 8002632:	4804      	ldr	r0, [pc, #16]	@ (8002644 <_ZL17MX_SDMMC1_SD_Initv+0x54>)
 8002634:	f011 f886 	bl	8013744 <puts>
  }
  /* USER CODE END SDMMC1_Init 2 */

}
 8002638:	bf00      	nop
 800263a:	bd80      	pop	{r7, pc}
 800263c:	2400057c 	.word	0x2400057c
 8002640:	52007000 	.word	0x52007000
 8002644:	08014934 	.word	0x08014934

08002648 <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800264c:	4b2c      	ldr	r3, [pc, #176]	@ (8002700 <_ZL19MX_USART1_UART_Initv+0xb8>)
 800264e:	4a2d      	ldr	r2, [pc, #180]	@ (8002704 <_ZL19MX_USART1_UART_Initv+0xbc>)
 8002650:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = PC_BAUD;
 8002652:	4b2b      	ldr	r3, [pc, #172]	@ (8002700 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8002654:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002658:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800265a:	4b29      	ldr	r3, [pc, #164]	@ (8002700 <_ZL19MX_USART1_UART_Initv+0xb8>)
 800265c:	2200      	movs	r2, #0
 800265e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002660:	4b27      	ldr	r3, [pc, #156]	@ (8002700 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8002662:	2200      	movs	r2, #0
 8002664:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002666:	4b26      	ldr	r3, [pc, #152]	@ (8002700 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8002668:	2200      	movs	r2, #0
 800266a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800266c:	4b24      	ldr	r3, [pc, #144]	@ (8002700 <_ZL19MX_USART1_UART_Initv+0xb8>)
 800266e:	220c      	movs	r2, #12
 8002670:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002672:	4b23      	ldr	r3, [pc, #140]	@ (8002700 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8002674:	2200      	movs	r2, #0
 8002676:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002678:	4b21      	ldr	r3, [pc, #132]	@ (8002700 <_ZL19MX_USART1_UART_Initv+0xb8>)
 800267a:	2200      	movs	r2, #0
 800267c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800267e:	4b20      	ldr	r3, [pc, #128]	@ (8002700 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8002680:	2200      	movs	r2, #0
 8002682:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002684:	4b1e      	ldr	r3, [pc, #120]	@ (8002700 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8002686:	2200      	movs	r2, #0
 8002688:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800268a:	4b1d      	ldr	r3, [pc, #116]	@ (8002700 <_ZL19MX_USART1_UART_Initv+0xb8>)
 800268c:	2200      	movs	r2, #0
 800268e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002690:	481b      	ldr	r0, [pc, #108]	@ (8002700 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8002692:	f00c f8ce 	bl	800e832 <HAL_UART_Init>
 8002696:	4603      	mov	r3, r0
 8002698:	2b00      	cmp	r3, #0
 800269a:	bf14      	ite	ne
 800269c:	2301      	movne	r3, #1
 800269e:	2300      	moveq	r3, #0
 80026a0:	b2db      	uxtb	r3, r3
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d001      	beq.n	80026aa <_ZL19MX_USART1_UART_Initv+0x62>
  {
    Error_Handler();
 80026a6:	f000 f8d3 	bl	8002850 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80026aa:	2100      	movs	r1, #0
 80026ac:	4814      	ldr	r0, [pc, #80]	@ (8002700 <_ZL19MX_USART1_UART_Initv+0xb8>)
 80026ae:	f00d f960 	bl	800f972 <HAL_UARTEx_SetTxFifoThreshold>
 80026b2:	4603      	mov	r3, r0
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	bf14      	ite	ne
 80026b8:	2301      	movne	r3, #1
 80026ba:	2300      	moveq	r3, #0
 80026bc:	b2db      	uxtb	r3, r3
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d001      	beq.n	80026c6 <_ZL19MX_USART1_UART_Initv+0x7e>
  {
    Error_Handler();
 80026c2:	f000 f8c5 	bl	8002850 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80026c6:	2100      	movs	r1, #0
 80026c8:	480d      	ldr	r0, [pc, #52]	@ (8002700 <_ZL19MX_USART1_UART_Initv+0xb8>)
 80026ca:	f00d f990 	bl	800f9ee <HAL_UARTEx_SetRxFifoThreshold>
 80026ce:	4603      	mov	r3, r0
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	bf14      	ite	ne
 80026d4:	2301      	movne	r3, #1
 80026d6:	2300      	moveq	r3, #0
 80026d8:	b2db      	uxtb	r3, r3
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d001      	beq.n	80026e2 <_ZL19MX_USART1_UART_Initv+0x9a>
  {
    Error_Handler();
 80026de:	f000 f8b7 	bl	8002850 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80026e2:	4807      	ldr	r0, [pc, #28]	@ (8002700 <_ZL19MX_USART1_UART_Initv+0xb8>)
 80026e4:	f00d f90c 	bl	800f900 <HAL_UARTEx_DisableFifoMode>
 80026e8:	4603      	mov	r3, r0
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	bf14      	ite	ne
 80026ee:	2301      	movne	r3, #1
 80026f0:	2300      	moveq	r3, #0
 80026f2:	b2db      	uxtb	r3, r3
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d001      	beq.n	80026fc <_ZL19MX_USART1_UART_Initv+0xb4>
  {
    Error_Handler();
 80026f8:	f000 f8aa 	bl	8002850 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80026fc:	bf00      	nop
 80026fe:	bd80      	pop	{r7, pc}
 8002700:	240005f8 	.word	0x240005f8
 8002704:	40011000 	.word	0x40011000

08002708 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b08a      	sub	sp, #40	@ 0x28
 800270c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800270e:	f107 0314 	add.w	r3, r7, #20
 8002712:	2200      	movs	r2, #0
 8002714:	601a      	str	r2, [r3, #0]
 8002716:	605a      	str	r2, [r3, #4]
 8002718:	609a      	str	r2, [r3, #8]
 800271a:	60da      	str	r2, [r3, #12]
 800271c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800271e:	4b26      	ldr	r3, [pc, #152]	@ (80027b8 <_ZL12MX_GPIO_Initv+0xb0>)
 8002720:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002724:	4a24      	ldr	r2, [pc, #144]	@ (80027b8 <_ZL12MX_GPIO_Initv+0xb0>)
 8002726:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800272a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800272e:	4b22      	ldr	r3, [pc, #136]	@ (80027b8 <_ZL12MX_GPIO_Initv+0xb0>)
 8002730:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002734:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002738:	613b      	str	r3, [r7, #16]
 800273a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800273c:	4b1e      	ldr	r3, [pc, #120]	@ (80027b8 <_ZL12MX_GPIO_Initv+0xb0>)
 800273e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002742:	4a1d      	ldr	r2, [pc, #116]	@ (80027b8 <_ZL12MX_GPIO_Initv+0xb0>)
 8002744:	f043 0304 	orr.w	r3, r3, #4
 8002748:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800274c:	4b1a      	ldr	r3, [pc, #104]	@ (80027b8 <_ZL12MX_GPIO_Initv+0xb0>)
 800274e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002752:	f003 0304 	and.w	r3, r3, #4
 8002756:	60fb      	str	r3, [r7, #12]
 8002758:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800275a:	4b17      	ldr	r3, [pc, #92]	@ (80027b8 <_ZL12MX_GPIO_Initv+0xb0>)
 800275c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002760:	4a15      	ldr	r2, [pc, #84]	@ (80027b8 <_ZL12MX_GPIO_Initv+0xb0>)
 8002762:	f043 0301 	orr.w	r3, r3, #1
 8002766:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800276a:	4b13      	ldr	r3, [pc, #76]	@ (80027b8 <_ZL12MX_GPIO_Initv+0xb0>)
 800276c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002770:	f003 0301 	and.w	r3, r3, #1
 8002774:	60bb      	str	r3, [r7, #8]
 8002776:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002778:	4b0f      	ldr	r3, [pc, #60]	@ (80027b8 <_ZL12MX_GPIO_Initv+0xb0>)
 800277a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800277e:	4a0e      	ldr	r2, [pc, #56]	@ (80027b8 <_ZL12MX_GPIO_Initv+0xb0>)
 8002780:	f043 0308 	orr.w	r3, r3, #8
 8002784:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002788:	4b0b      	ldr	r3, [pc, #44]	@ (80027b8 <_ZL12MX_GPIO_Initv+0xb0>)
 800278a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800278e:	f003 0308 	and.w	r3, r3, #8
 8002792:	607b      	str	r3, [r7, #4]
 8002794:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002796:	2310      	movs	r3, #16
 8002798:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800279a:	2300      	movs	r3, #0
 800279c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800279e:	2300      	movs	r3, #0
 80027a0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80027a2:	f107 0314 	add.w	r3, r7, #20
 80027a6:	4619      	mov	r1, r3
 80027a8:	4804      	ldr	r0, [pc, #16]	@ (80027bc <_ZL12MX_GPIO_Initv+0xb4>)
 80027aa:	f006 f8f5 	bl	8008998 <HAL_GPIO_Init>

}
 80027ae:	bf00      	nop
 80027b0:	3728      	adds	r7, #40	@ 0x28
 80027b2:	46bd      	mov	sp, r7
 80027b4:	bd80      	pop	{r7, pc}
 80027b6:	bf00      	nop
 80027b8:	58024400 	.word	0x58024400
 80027bc:	58020800 	.word	0x58020800

080027c0 <_ZL10MPU_Configv>:
/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

void MPU_Config(void)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b084      	sub	sp, #16
 80027c4:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80027c6:	463b      	mov	r3, r7
 80027c8:	2200      	movs	r2, #0
 80027ca:	601a      	str	r2, [r3, #0]
 80027cc:	605a      	str	r2, [r3, #4]
 80027ce:	609a      	str	r2, [r3, #8]
 80027d0:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 80027d2:	f003 fc67 	bl	80060a4 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80027d6:	2301      	movs	r3, #1
 80027d8:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80027da:	2300      	movs	r3, #0
 80027dc:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 80027de:	2300      	movs	r3, #0
 80027e0:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 80027e2:	231f      	movs	r3, #31
 80027e4:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 80027e6:	2387      	movs	r3, #135	@ 0x87
 80027e8:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80027ea:	2300      	movs	r3, #0
 80027ec:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 80027ee:	2300      	movs	r3, #0
 80027f0:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80027f2:	2301      	movs	r3, #1
 80027f4:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 80027f6:	2301      	movs	r3, #1
 80027f8:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 80027fa:	2300      	movs	r3, #0
 80027fc:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80027fe:	2300      	movs	r3, #0
 8002800:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8002802:	463b      	mov	r3, r7
 8002804:	4618      	mov	r0, r3
 8002806:	f003 fc85 	bl	8006114 <HAL_MPU_ConfigRegion>

  /* Configure the MPU attributes as Device not cacheable
     for DMA buffers */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800280a:	2301      	movs	r3, #1
 800280c:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.BaseAddress = 0x30000000;
 800280e:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 8002812:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_256B;
 8002814:	2307      	movs	r3, #7
 8002816:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8002818:	2303      	movs	r3, #3
 800281a:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 800281c:	2301      	movs	r3, #1
 800281e:	73fb      	strb	r3, [r7, #15]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8002820:	2300      	movs	r3, #0
 8002822:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8002824:	2300      	movs	r3, #0
 8002826:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8002828:	2301      	movs	r3, #1
 800282a:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 800282c:	2300      	movs	r3, #0
 800282e:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.SubRegionDisable = 0x00;
 8002830:	2300      	movs	r3, #0
 8002832:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8002834:	2300      	movs	r3, #0
 8002836:	733b      	strb	r3, [r7, #12]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8002838:	463b      	mov	r3, r7
 800283a:	4618      	mov	r0, r3
 800283c:	f003 fc6a 	bl	8006114 <HAL_MPU_ConfigRegion>

  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8002840:	2004      	movs	r0, #4
 8002842:	f003 fc47 	bl	80060d4 <HAL_MPU_Enable>

}
 8002846:	bf00      	nop
 8002848:	3710      	adds	r7, #16
 800284a:	46bd      	mov	sp, r7
 800284c:	bd80      	pop	{r7, pc}
	...

08002850 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

	printf("error\n\r");
 8002854:	4803      	ldr	r0, [pc, #12]	@ (8002864 <Error_Handler+0x14>)
 8002856:	f010 ff05 	bl	8013664 <iprintf>
  __ASM volatile ("cpsid i" : : : "memory");
 800285a:	b672      	cpsid	i
}
 800285c:	bf00      	nop

  __disable_irq();
  while (1)
 800285e:	bf00      	nop
 8002860:	e7fd      	b.n	800285e <Error_Handler+0xe>
 8002862:	bf00      	nop
 8002864:	08014944 	.word	0x08014944

08002868 <_ZNK19ArduinoJson6101_1108not_nullIPKcE3getEv>:
 public:
  explicit not_null(T ptr) : _ptr(ptr) {
    ARDUINOJSON_ASSERT(ptr != NULL);
  }

  T get() const {
 8002868:	b480      	push	{r7}
 800286a:	b083      	sub	sp, #12
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
    ARDUINOJSON_ASSERT(_ptr != NULL);
    return _ptr;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
  }
 8002874:	4618      	mov	r0, r3
 8002876:	370c      	adds	r7, #12
 8002878:	46bd      	mov	sp, r7
 800287a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287e:	4770      	bx	lr

08002880 <_ZN19ArduinoJson6101_11010MemoryPool10allocRightINS_11VariantSlotEEEPT_v>:
  T* allocRight() {
 8002880:	b580      	push	{r7, lr}
 8002882:	b082      	sub	sp, #8
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<T*>(allocRight(sizeof(T)));
 8002888:	2110      	movs	r1, #16
 800288a:	6878      	ldr	r0, [r7, #4]
 800288c:	f7fe fbe1 	bl	8001052 <_ZN19ArduinoJson6101_11010MemoryPool10allocRightEj>
 8002890:	4603      	mov	r3, r0
  }
 8002892:	4618      	mov	r0, r3
 8002894:	3708      	adds	r7, #8
 8002896:	46bd      	mov	sp, r7
 8002898:	bd80      	pop	{r7, pc}

0800289a <_ZN9__gnu_cxx11char_traitsIcE6lengthEPKc>:
    char_traits<_CharT>::
 800289a:	b580      	push	{r7, lr}
 800289c:	b084      	sub	sp, #16
 800289e:	af00      	add	r7, sp, #0
 80028a0:	6078      	str	r0, [r7, #4]
      std::size_t __i = 0;
 80028a2:	2300      	movs	r3, #0
 80028a4:	60fb      	str	r3, [r7, #12]
      while (!eq(__p[__i], char_type()))
 80028a6:	e002      	b.n	80028ae <_ZN9__gnu_cxx11char_traitsIcE6lengthEPKc+0x14>
        ++__i;
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	3301      	adds	r3, #1
 80028ac:	60fb      	str	r3, [r7, #12]
      while (!eq(__p[__i], char_type()))
 80028ae:	687a      	ldr	r2, [r7, #4]
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	4413      	add	r3, r2
 80028b4:	2200      	movs	r2, #0
 80028b6:	72fa      	strb	r2, [r7, #11]
 80028b8:	f107 020b 	add.w	r2, r7, #11
 80028bc:	4611      	mov	r1, r2
 80028be:	4618      	mov	r0, r3
 80028c0:	f000 f8d0 	bl	8002a64 <_ZN9__gnu_cxx11char_traitsIcE2eqERKcS3_>
 80028c4:	4603      	mov	r3, r0
 80028c6:	f083 0301 	eor.w	r3, r3, #1
 80028ca:	b2db      	uxtb	r3, r3
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d1eb      	bne.n	80028a8 <_ZN9__gnu_cxx11char_traitsIcE6lengthEPKc+0xe>
      return __i;
 80028d0:	68fb      	ldr	r3, [r7, #12]
    }
 80028d2:	4618      	mov	r0, r3
 80028d4:	3710      	adds	r7, #16
 80028d6:	46bd      	mov	sp, r7
 80028d8:	bd80      	pop	{r7, pc}

080028da <_ZN19ArduinoJson6101_11013make_not_nullIPKcEENS_8not_nullIT_EES4_>:
 private:
  T _ptr;
};

template <typename T>
not_null<T> make_not_null(T ptr) {
 80028da:	b580      	push	{r7, lr}
 80028dc:	b084      	sub	sp, #16
 80028de:	af00      	add	r7, sp, #0
 80028e0:	6078      	str	r0, [r7, #4]
  ARDUINOJSON_ASSERT(ptr != NULL);
  return not_null<T>(ptr);
 80028e2:	f107 030c 	add.w	r3, r7, #12
 80028e6:	6879      	ldr	r1, [r7, #4]
 80028e8:	4618      	mov	r0, r3
 80028ea:	f000 f936 	bl	8002b5a <_ZN19ArduinoJson6101_1108not_nullIPKcEC1ES2_>
 80028ee:	68fb      	ldr	r3, [r7, #12]
}
 80028f0:	4618      	mov	r0, r3
 80028f2:	3710      	adds	r7, #16
 80028f4:	46bd      	mov	sp, r7
 80028f6:	bd80      	pop	{r7, pc}

080028f8 <_ZN19ArduinoJson6101_11014VariantRefBaseINS_11VariantDataEEC1EPS1_>:
  VariantRefBase(TData *data) : _data(data) {}
 80028f8:	b480      	push	{r7}
 80028fa:	b083      	sub	sp, #12
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
 8002900:	6039      	str	r1, [r7, #0]
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	683a      	ldr	r2, [r7, #0]
 8002906:	601a      	str	r2, [r3, #0]
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	4618      	mov	r0, r3
 800290c:	370c      	adds	r7, #12
 800290e:	46bd      	mov	sp, r7
 8002910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002914:	4770      	bx	lr

08002916 <_ZN19ArduinoJson6101_11012ArrayRefBaseINS_14CollectionDataEEC1EPS1_>:
  ArrayRefBase(TData* data) : _data(data) {}
 8002916:	b480      	push	{r7}
 8002918:	b083      	sub	sp, #12
 800291a:	af00      	add	r7, sp, #0
 800291c:	6078      	str	r0, [r7, #4]
 800291e:	6039      	str	r1, [r7, #0]
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	683a      	ldr	r2, [r7, #0]
 8002924:	601a      	str	r2, [r3, #0]
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	4618      	mov	r0, r3
 800292a:	370c      	adds	r7, #12
 800292c:	46bd      	mov	sp, r7
 800292e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002932:	4770      	bx	lr

08002934 <_ZN19ArduinoJson6101_11013ObjectRefBaseINS_14CollectionDataEEC1EPS1_>:
  ObjectRefBase(TData* data) : _data(data) {}
 8002934:	b480      	push	{r7}
 8002936:	b083      	sub	sp, #12
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
 800293c:	6039      	str	r1, [r7, #0]
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	683a      	ldr	r2, [r7, #0]
 8002942:	601a      	str	r2, [r3, #0]
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	4618      	mov	r0, r3
 8002948:	370c      	adds	r7, #12
 800294a:	46bd      	mov	sp, r7
 800294c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002950:	4770      	bx	lr

08002952 <_ZNK19ArduinoJson6101_11014CollectionData3getINS_21ConstRamStringAdapterEEEPNS_11VariantDataET_>:
  }
  return 0;
}

template <typename TAdaptedString>
inline VariantData* CollectionData::get(TAdaptedString key) const {
 8002952:	b580      	push	{r7, lr}
 8002954:	b084      	sub	sp, #16
 8002956:	af00      	add	r7, sp, #0
 8002958:	6078      	str	r0, [r7, #4]
 800295a:	6039      	str	r1, [r7, #0]
  VariantSlot* slot = getSlot(key);
 800295c:	6839      	ldr	r1, [r7, #0]
 800295e:	6878      	ldr	r0, [r7, #4]
 8002960:	f000 f90a 	bl	8002b78 <_ZNK19ArduinoJson6101_11014CollectionData7getSlotINS_21ConstRamStringAdapterEEEPNS_11VariantSlotET_>
 8002964:	60f8      	str	r0, [r7, #12]
  return slot ? slot->data() : 0;
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	2b00      	cmp	r3, #0
 800296a:	d004      	beq.n	8002976 <_ZNK19ArduinoJson6101_11014CollectionData3getINS_21ConstRamStringAdapterEEEPNS_11VariantDataET_+0x24>
 800296c:	68f8      	ldr	r0, [r7, #12]
 800296e:	f7fe fa59 	bl	8000e24 <_ZN19ArduinoJson6101_11011VariantSlot4dataEv>
 8002972:	4603      	mov	r3, r0
 8002974:	e000      	b.n	8002978 <_ZNK19ArduinoJson6101_11014CollectionData3getINS_21ConstRamStringAdapterEEEPNS_11VariantDataET_+0x26>
 8002976:	2300      	movs	r3, #0
}
 8002978:	4618      	mov	r0, r3
 800297a:	3710      	adds	r7, #16
 800297c:	46bd      	mov	sp, r7
 800297e:	bd80      	pop	{r7, pc}

08002980 <_ZN19ArduinoJson6101_11017BasicJsonDocumentINS_16DefaultAllocatorEEC1EjS1_>:
};

template <typename TAllocator>
class BasicJsonDocument : AllocatorOwner<TAllocator>, public JsonDocument {
 public:
  explicit BasicJsonDocument(size_t capa, TAllocator allocator = TAllocator())
 8002980:	b590      	push	{r4, r7, lr}
 8002982:	b08b      	sub	sp, #44	@ 0x2c
 8002984:	af02      	add	r7, sp, #8
 8002986:	60f8      	str	r0, [r7, #12]
 8002988:	60b9      	str	r1, [r7, #8]
 800298a:	713a      	strb	r2, [r7, #4]
      : AllocatorOwner<TAllocator>(allocator), JsonDocument(allocPool(capa)) {}
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	4621      	mov	r1, r4
 8002990:	4618      	mov	r0, r3
 8002992:	f000 f92d 	bl	8002bf0 <_ZN19ArduinoJson6101_11014AllocatorOwnerINS_16DefaultAllocatorEEC1ES1_>
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	f103 0408 	add.w	r4, r3, #8
 800299c:	f107 0310 	add.w	r3, r7, #16
 80029a0:	68ba      	ldr	r2, [r7, #8]
 80029a2:	68f9      	ldr	r1, [r7, #12]
 80029a4:	4618      	mov	r0, r3
 80029a6:	f000 f90a 	bl	8002bbe <_ZN19ArduinoJson6101_11017BasicJsonDocumentINS_16DefaultAllocatorEE9allocPoolEj>
 80029aa:	69fb      	ldr	r3, [r7, #28]
 80029ac:	9300      	str	r3, [sp, #0]
 80029ae:	f107 0310 	add.w	r3, r7, #16
 80029b2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80029b4:	4620      	mov	r0, r4
 80029b6:	f7fe fd74 	bl	80014a2 <_ZN19ArduinoJson6101_11012JsonDocumentC1ENS_10MemoryPoolE>
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	4618      	mov	r0, r3
 80029be:	3724      	adds	r7, #36	@ 0x24
 80029c0:	46bd      	mov	sp, r7
 80029c2:	bd90      	pop	{r4, r7, pc}

080029c4 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_S5_>:
   *  @return  New string with @a __lhs followed by @a __rhs.
   */
  template<typename _CharT, typename _Traits, typename _Alloc>
    _GLIBCXX20_CONSTEXPR
    inline basic_string<_CharT, _Traits, _Alloc>
    operator+(const basic_string<_CharT, _Traits, _Alloc>& __lhs, _CharT __rhs)
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b084      	sub	sp, #16
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	60f8      	str	r0, [r7, #12]
 80029cc:	60b9      	str	r1, [r7, #8]
 80029ce:	4613      	mov	r3, r2
 80029d0:	71fb      	strb	r3, [r7, #7]
    {
      typedef basic_string<_CharT, _Traits, _Alloc>	__string_type;
      typedef typename __string_type::size_type		__size_type;
      __string_type __str(__lhs);
 80029d2:	68b9      	ldr	r1, [r7, #8]
 80029d4:	68f8      	ldr	r0, [r7, #12]
 80029d6:	f010 fc4c 	bl	8013272 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
      __str.append(__size_type(1), __rhs);
 80029da:	79fb      	ldrb	r3, [r7, #7]
 80029dc:	461a      	mov	r2, r3
 80029de:	2101      	movs	r1, #1
 80029e0:	68f8      	ldr	r0, [r7, #12]
 80029e2:	f010 fc1d 	bl	8013220 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEjc>
      return __str;
 80029e6:	bf00      	nop
    }
 80029e8:	68f8      	ldr	r0, [r7, #12]
 80029ea:	3710      	adds	r7, #16
 80029ec:	46bd      	mov	sp, r7
 80029ee:	bd80      	pop	{r7, pc}

080029f0 <_ZN19ArduinoJson6101_11015deserializeJsonIKcEENS_20DeserializationErrorERNS_12JsonDocumentEPT_NS_12NestingLimitE>:
    NestingLimit nestingLimit = NestingLimit()) {
  return deserialize<JsonDeserializer>(doc, input, nestingLimit);
}

template <typename TInput>
DeserializationError deserializeJson(
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b084      	sub	sp, #16
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	60f8      	str	r0, [r7, #12]
 80029f8:	60b9      	str	r1, [r7, #8]
 80029fa:	713a      	strb	r2, [r7, #4]
    JsonDocument &doc, TInput *input,
    NestingLimit nestingLimit = NestingLimit()) {
  return deserialize<JsonDeserializer>(doc, input, nestingLimit);
 80029fc:	793a      	ldrb	r2, [r7, #4]
 80029fe:	68b9      	ldr	r1, [r7, #8]
 8002a00:	68f8      	ldr	r0, [r7, #12]
 8002a02:	f000 f901 	bl	8002c08 <_ZN19ArduinoJson6101_11011deserializeINS_16JsonDeserializerEKcEENS_20DeserializationErrorERNS_12JsonDocumentEPT0_NS_12NestingLimitE>
 8002a06:	4603      	mov	r3, r0
}
 8002a08:	4618      	mov	r0, r3
 8002a0a:	3710      	adds	r7, #16
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	bd80      	pop	{r7, pc}

08002a10 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>:
      basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
 8002a10:	b5b0      	push	{r4, r5, r7, lr}
 8002a12:	b086      	sub	sp, #24
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	60f8      	str	r0, [r7, #12]
 8002a18:	60b9      	str	r1, [r7, #8]
 8002a1a:	607a      	str	r2, [r7, #4]
      : _M_dataplus(_M_local_data(), __a)
 8002a1c:	68fc      	ldr	r4, [r7, #12]
 8002a1e:	68f8      	ldr	r0, [r7, #12]
 8002a20:	f010 faaa 	bl	8012f78 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_local_dataEv>
 8002a24:	4603      	mov	r3, r0
 8002a26:	687a      	ldr	r2, [r7, #4]
 8002a28:	4619      	mov	r1, r3
 8002a2a:	4620      	mov	r0, r4
 8002a2c:	f010 fc04 	bl	8013238 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderC1EPcRKS3_>
	if (__s == 0)
 8002a30:	68bb      	ldr	r3, [r7, #8]
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d102      	bne.n	8002a3c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_+0x2c>
	  std::__throw_logic_error(__N("basic_string: "
 8002a36:	480a      	ldr	r0, [pc, #40]	@ (8002a60 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_+0x50>)
 8002a38:	f010 fa90 	bl	8012f5c <_ZSt19__throw_logic_errorPKc>
	const _CharT* __end = __s + traits_type::length(__s);
 8002a3c:	68b8      	ldr	r0, [r7, #8]
 8002a3e:	f7fe fb72 	bl	8001126 <_ZNSt11char_traitsIcE6lengthEPKc>
 8002a42:	4602      	mov	r2, r0
 8002a44:	68bb      	ldr	r3, [r7, #8]
 8002a46:	4413      	add	r3, r2
 8002a48:	617b      	str	r3, [r7, #20]
	_M_construct(__s, __end, forward_iterator_tag());
 8002a4a:	462b      	mov	r3, r5
 8002a4c:	697a      	ldr	r2, [r7, #20]
 8002a4e:	68b9      	ldr	r1, [r7, #8]
 8002a50:	68f8      	ldr	r0, [r7, #12]
 8002a52:	f000 f83c 	bl	8002ace <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>
      }
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	4618      	mov	r0, r3
 8002a5a:	3718      	adds	r7, #24
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	bdb0      	pop	{r4, r5, r7, pc}
 8002a60:	0801494c 	.word	0x0801494c

08002a64 <_ZN9__gnu_cxx11char_traitsIcE2eqERKcS3_>:
      eq(const char_type& __c1, const char_type& __c2)
 8002a64:	b480      	push	{r7}
 8002a66:	b083      	sub	sp, #12
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
 8002a6c:	6039      	str	r1, [r7, #0]
      { return __c1 == __c2; }
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	781a      	ldrb	r2, [r3, #0]
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	781b      	ldrb	r3, [r3, #0]
 8002a76:	429a      	cmp	r2, r3
 8002a78:	bf0c      	ite	eq
 8002a7a:	2301      	moveq	r3, #1
 8002a7c:	2300      	movne	r3, #0
 8002a7e:	b2db      	uxtb	r3, r3
 8002a80:	4618      	mov	r0, r3
 8002a82:	370c      	adds	r7, #12
 8002a84:	46bd      	mov	sp, r7
 8002a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8a:	4770      	bx	lr

08002a8c <_ZZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tagEN6_GuardC1EPS4_>:

	// Check for out_of_range and length_error exceptions.
	struct _Guard
	{
	  _GLIBCXX20_CONSTEXPR
	  explicit _Guard(basic_string* __s) : _M_guarded(__s) { }
 8002a8c:	b480      	push	{r7}
 8002a8e:	b083      	sub	sp, #12
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
 8002a94:	6039      	str	r1, [r7, #0]
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	683a      	ldr	r2, [r7, #0]
 8002a9a:	601a      	str	r2, [r3, #0]
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	370c      	adds	r7, #12
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa8:	4770      	bx	lr

08002aaa <_ZZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tagEN6_GuardD1Ev>:

	  _GLIBCXX20_CONSTEXPR
	  ~_Guard() { if (_M_guarded) _M_guarded->_M_dispose(); }
 8002aaa:	b580      	push	{r7, lr}
 8002aac:	b082      	sub	sp, #8
 8002aae:	af00      	add	r7, sp, #0
 8002ab0:	6078      	str	r0, [r7, #4]
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d004      	beq.n	8002ac4 <_ZZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tagEN6_GuardD1Ev+0x1a>
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	4618      	mov	r0, r3
 8002ac0:	f010 fa8c 	bl	8012fdc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	3708      	adds	r7, #8
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bd80      	pop	{r7, pc}

08002ace <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>:
      basic_string<_CharT, _Traits, _Alloc>::
 8002ace:	b580      	push	{r7, lr}
 8002ad0:	b088      	sub	sp, #32
 8002ad2:	af00      	add	r7, sp, #0
 8002ad4:	60f8      	str	r0, [r7, #12]
 8002ad6:	60b9      	str	r1, [r7, #8]
 8002ad8:	607a      	str	r2, [r7, #4]
 8002ada:	703b      	strb	r3, [r7, #0]
	size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));
 8002adc:	6879      	ldr	r1, [r7, #4]
 8002ade:	68b8      	ldr	r0, [r7, #8]
 8002ae0:	f000 f8f0 	bl	8002cc4 <_ZSt8distanceIPKcENSt15iterator_traitsIT_E15difference_typeES3_S3_>
 8002ae4:	4603      	mov	r3, r0
 8002ae6:	61bb      	str	r3, [r7, #24]
	if (__dnew > size_type(_S_local_capacity))
 8002ae8:	69bb      	ldr	r3, [r7, #24]
 8002aea:	2b0f      	cmp	r3, #15
 8002aec:	d911      	bls.n	8002b12 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x44>
	    _M_data(_M_create(__dnew, size_type(0)));
 8002aee:	f107 0318 	add.w	r3, r7, #24
 8002af2:	2200      	movs	r2, #0
 8002af4:	4619      	mov	r1, r3
 8002af6:	68f8      	ldr	r0, [r7, #12]
 8002af8:	f010 fa4e 	bl	8012f98 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8002afc:	4603      	mov	r3, r0
 8002afe:	4619      	mov	r1, r3
 8002b00:	68f8      	ldr	r0, [r7, #12]
 8002b02:	f010 fa35 	bl	8012f70 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEPc>
	    _M_capacity(__dnew);
 8002b06:	69bb      	ldr	r3, [r7, #24]
 8002b08:	4619      	mov	r1, r3
 8002b0a:	68f8      	ldr	r0, [r7, #12]
 8002b0c:	f010 fa36 	bl	8012f7c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_capacityEj>
 8002b10:	e005      	b.n	8002b1e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x50>
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	61fb      	str	r3, [r7, #28]
	return _M_local_data();
 8002b16:	69f8      	ldr	r0, [r7, #28]
 8002b18:	f010 fa2e 	bl	8012f78 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_local_dataEv>
 8002b1c:	bf00      	nop

	  basic_string* _M_guarded;
	} __guard(this);
 8002b1e:	f107 0314 	add.w	r3, r7, #20
 8002b22:	68f9      	ldr	r1, [r7, #12]
 8002b24:	4618      	mov	r0, r3
 8002b26:	f7ff ffb1 	bl	8002a8c <_ZZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tagEN6_GuardC1EPS4_>

	this->_S_copy_chars(_M_data(), __beg, __end);
 8002b2a:	68f8      	ldr	r0, [r7, #12]
 8002b2c:	f010 fa22 	bl	8012f74 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>
 8002b30:	4603      	mov	r3, r0
 8002b32:	687a      	ldr	r2, [r7, #4]
 8002b34:	68b9      	ldr	r1, [r7, #8]
 8002b36:	4618      	mov	r0, r3
 8002b38:	f010 fa95 	bl	8013066 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>

	__guard._M_guarded = 0;
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	617b      	str	r3, [r7, #20]

	_M_set_length(__dnew);
 8002b40:	69bb      	ldr	r3, [r7, #24]
 8002b42:	4619      	mov	r1, r3
 8002b44:	68f8      	ldr	r0, [r7, #12]
 8002b46:	f010 fa1b 	bl	8012f80 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_set_lengthEj>
      }
 8002b4a:	f107 0314 	add.w	r3, r7, #20
 8002b4e:	4618      	mov	r0, r3
 8002b50:	f7ff ffab 	bl	8002aaa <_ZZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tagEN6_GuardD1Ev>
 8002b54:	3720      	adds	r7, #32
 8002b56:	46bd      	mov	sp, r7
 8002b58:	bd80      	pop	{r7, pc}

08002b5a <_ZN19ArduinoJson6101_1108not_nullIPKcEC1ES2_>:
  explicit not_null(T ptr) : _ptr(ptr) {
 8002b5a:	b480      	push	{r7}
 8002b5c:	b083      	sub	sp, #12
 8002b5e:	af00      	add	r7, sp, #0
 8002b60:	6078      	str	r0, [r7, #4]
 8002b62:	6039      	str	r1, [r7, #0]
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	683a      	ldr	r2, [r7, #0]
 8002b68:	601a      	str	r2, [r3, #0]
  }
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	370c      	adds	r7, #12
 8002b70:	46bd      	mov	sp, r7
 8002b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b76:	4770      	bx	lr

08002b78 <_ZNK19ArduinoJson6101_11014CollectionData7getSlotINS_21ConstRamStringAdapterEEEPNS_11VariantSlotET_>:
inline VariantSlot* CollectionData::getSlot(TAdaptedString key) const {
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b084      	sub	sp, #16
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
 8002b80:	6039      	str	r1, [r7, #0]
  VariantSlot* slot = _head;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	60fb      	str	r3, [r7, #12]
  while (slot) {
 8002b88:	e00f      	b.n	8002baa <_ZNK19ArduinoJson6101_11014CollectionData7getSlotINS_21ConstRamStringAdapterEEEPNS_11VariantSlotET_+0x32>
    if (key.equals(slot->key())) break;
 8002b8a:	68f8      	ldr	r0, [r7, #12]
 8002b8c:	f7fe f995 	bl	8000eba <_ZNK19ArduinoJson6101_11011VariantSlot3keyEv>
 8002b90:	4602      	mov	r2, r0
 8002b92:	463b      	mov	r3, r7
 8002b94:	4611      	mov	r1, r2
 8002b96:	4618      	mov	r0, r3
 8002b98:	f7fe fa92 	bl	80010c0 <_ZNK19ArduinoJson6101_11021ConstRamStringAdapter6equalsEPKc>
 8002b9c:	4603      	mov	r3, r0
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d107      	bne.n	8002bb2 <_ZNK19ArduinoJson6101_11014CollectionData7getSlotINS_21ConstRamStringAdapterEEEPNS_11VariantSlotET_+0x3a>
    slot = slot->next();
 8002ba2:	68f8      	ldr	r0, [r7, #12]
 8002ba4:	f7fe f949 	bl	8000e3a <_ZN19ArduinoJson6101_11011VariantSlot4nextEv>
 8002ba8:	60f8      	str	r0, [r7, #12]
  while (slot) {
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d1ec      	bne.n	8002b8a <_ZNK19ArduinoJson6101_11014CollectionData7getSlotINS_21ConstRamStringAdapterEEEPNS_11VariantSlotET_+0x12>
 8002bb0:	e000      	b.n	8002bb4 <_ZNK19ArduinoJson6101_11014CollectionData7getSlotINS_21ConstRamStringAdapterEEEPNS_11VariantSlotET_+0x3c>
    if (key.equals(slot->key())) break;
 8002bb2:	bf00      	nop
  return slot;
 8002bb4:	68fb      	ldr	r3, [r7, #12]
}
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	3710      	adds	r7, #16
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	bd80      	pop	{r7, pc}

08002bbe <_ZN19ArduinoJson6101_11017BasicJsonDocumentINS_16DefaultAllocatorEE9allocPoolEj>:
    set(src);
    return *this;
  }

 private:
  MemoryPool allocPool(size_t requiredSize) {
 8002bbe:	b580      	push	{r7, lr}
 8002bc0:	b086      	sub	sp, #24
 8002bc2:	af00      	add	r7, sp, #0
 8002bc4:	60f8      	str	r0, [r7, #12]
 8002bc6:	60b9      	str	r1, [r7, #8]
 8002bc8:	607a      	str	r2, [r7, #4]
    size_t capa = addPadding(requiredSize);
 8002bca:	6878      	ldr	r0, [r7, #4]
 8002bcc:	f7fe f994 	bl	8000ef8 <_ZN19ArduinoJson6101_11010addPaddingEj>
 8002bd0:	6178      	str	r0, [r7, #20]
    return MemoryPool(reinterpret_cast<char*>(this->allocate(capa)), capa);
 8002bd2:	68bb      	ldr	r3, [r7, #8]
 8002bd4:	6979      	ldr	r1, [r7, #20]
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	f000 f888 	bl	8002cec <_ZN19ArduinoJson6101_11014AllocatorOwnerINS_16DefaultAllocatorEE8allocateEj>
 8002bdc:	4603      	mov	r3, r0
 8002bde:	697a      	ldr	r2, [r7, #20]
 8002be0:	4619      	mov	r1, r3
 8002be2:	68f8      	ldr	r0, [r7, #12]
 8002be4:	f7fe f998 	bl	8000f18 <_ZN19ArduinoJson6101_11010MemoryPoolC1EPcj>
  }
 8002be8:	68f8      	ldr	r0, [r7, #12]
 8002bea:	3718      	adds	r7, #24
 8002bec:	46bd      	mov	sp, r7
 8002bee:	bd80      	pop	{r7, pc}

08002bf0 <_ZN19ArduinoJson6101_11014AllocatorOwnerINS_16DefaultAllocatorEEC1ES1_>:
  AllocatorOwner(TAllocator allocator) : _allocator(allocator) {}
 8002bf0:	b480      	push	{r7}
 8002bf2:	b083      	sub	sp, #12
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
 8002bf8:	7039      	strb	r1, [r7, #0]
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	370c      	adds	r7, #12
 8002c00:	46bd      	mov	sp, r7
 8002c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c06:	4770      	bx	lr

08002c08 <_ZN19ArduinoJson6101_11011deserializeINS_16JsonDeserializerEKcEENS_20DeserializationErrorERNS_12JsonDocumentEPT0_NS_12NestingLimitE>:
//
// deserialize(JsonDocument&, char*);
// deserialize(JsonDocument&, const char*);
// deserialize(JsonDocument&, const __FlashStringHelper*);
template <template <typename, typename> class TDeserializer, typename TChar>
DeserializationError deserialize(JsonDocument &doc, TChar *input,
 8002c08:	b5b0      	push	{r4, r5, r7, lr}
 8002c0a:	b08a      	sub	sp, #40	@ 0x28
 8002c0c:	af02      	add	r7, sp, #8
 8002c0e:	60f8      	str	r0, [r7, #12]
 8002c10:	60b9      	str	r1, [r7, #8]
 8002c12:	713a      	strb	r2, [r7, #4]
                                 NestingLimit nestingLimit) {
  doc.clear();
 8002c14:	68f8      	ldr	r0, [r7, #12]
 8002c16:	f7fe fc1c 	bl	8001452 <_ZN19ArduinoJson6101_11012JsonDocument5clearEv>
  return makeDeserializer<TDeserializer>(
 8002c1a:	68f8      	ldr	r0, [r7, #12]
 8002c1c:	f7fe fc2a 	bl	8001474 <_ZN19ArduinoJson6101_11012JsonDocument10memoryPoolEv>
 8002c20:	4604      	mov	r4, r0
 8002c22:	68b8      	ldr	r0, [r7, #8]
 8002c24:	f000 f871 	bl	8002d0a <_ZN19ArduinoJson6101_11010makeReaderIKcEENS_23UnsafeCharPointerReaderEPT_>
 8002c28:	4605      	mov	r5, r0
 8002c2a:	68f8      	ldr	r0, [r7, #12]
 8002c2c:	f7fe fc22 	bl	8001474 <_ZN19ArduinoJson6101_11012JsonDocument10memoryPoolEv>
 8002c30:	4603      	mov	r3, r0
 8002c32:	68b9      	ldr	r1, [r7, #8]
 8002c34:	4618      	mov	r0, r3
 8002c36:	f000 f877 	bl	8002d28 <_ZN19ArduinoJson6101_11017makeStringStorageIKcEENS_13StringStorageIPT_vE4typeERNS_10MemoryPoolES4_>
 8002c3a:	4602      	mov	r2, r0
 8002c3c:	793b      	ldrb	r3, [r7, #4]
 8002c3e:	f107 0010 	add.w	r0, r7, #16
 8002c42:	9300      	str	r3, [sp, #0]
 8002c44:	4613      	mov	r3, r2
 8002c46:	462a      	mov	r2, r5
 8002c48:	4621      	mov	r1, r4
 8002c4a:	f000 f87c 	bl	8002d46 <_ZN19ArduinoJson6101_11016makeDeserializerINS_16JsonDeserializerENS_23UnsafeCharPointerReaderENS_12StringCopierEEET_IT0_T1_ERNS_10MemoryPoolES5_S6_h>
             doc.memoryPool(), makeReader(input),
             makeStringStorage(doc.memoryPool(), input), nestingLimit.value)
      .parse(doc.data());
 8002c4e:	68f8      	ldr	r0, [r7, #12]
 8002c50:	f7fe fc1b 	bl	800148a <_ZN19ArduinoJson6101_11012JsonDocument4dataEv>
 8002c54:	4602      	mov	r2, r0
 8002c56:	f107 0310 	add.w	r3, r7, #16
 8002c5a:	4611      	mov	r1, r2
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	f000 f885 	bl	8002d6c <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE5parseERNS_11VariantDataE>
 8002c62:	4603      	mov	r3, r0
}
 8002c64:	4618      	mov	r0, r3
 8002c66:	3720      	adds	r7, #32
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	bdb0      	pop	{r4, r5, r7, pc}

08002c6c <_ZNK19ArduinoJson6101_11012VariantCastsINS_11MemberProxyIRNS_12JsonDocumentEPKcEEE4implEv>:
  }

 private:
  const TImpl *impl() const {
 8002c6c:	b480      	push	{r7}
 8002c6e:	b083      	sub	sp, #12
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
    return static_cast<const TImpl *>(this);
 8002c74:	687b      	ldr	r3, [r7, #4]
  }
 8002c76:	4618      	mov	r0, r3
 8002c78:	370c      	adds	r7, #12
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c80:	4770      	bx	lr

08002c82 <_ZNK19ArduinoJson6101_11012VariantCastsINS_10VariantRefEE4implEv>:
  const TImpl *impl() const {
 8002c82:	b480      	push	{r7}
 8002c84:	b083      	sub	sp, #12
 8002c86:	af00      	add	r7, sp, #0
 8002c88:	6078      	str	r0, [r7, #4]
    return static_cast<const TImpl *>(this);
 8002c8a:	687b      	ldr	r3, [r7, #4]
  }
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	370c      	adds	r7, #12
 8002c90:	46bd      	mov	sp, r7
 8002c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c96:	4770      	bx	lr

08002c98 <_ZNK19ArduinoJson6101_11015ObjectShortcutsINS_9ObjectRefEE4implEv>:
  // createNestedObject(const __FlashStringHelper*) const
  template <typename TChar>
  ObjectRef createNestedObject(TChar *key) const;

 private:
  const TObject *impl() const {
 8002c98:	b480      	push	{r7}
 8002c9a:	b083      	sub	sp, #12
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
    return static_cast<const TObject *>(this);
 8002ca0:	687b      	ldr	r3, [r7, #4]
  }
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	370c      	adds	r7, #12
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cac:	4770      	bx	lr

08002cae <_ZNK19ArduinoJson6101_11012VariantCastsINS_11MemberProxyIRKNS_9ObjectRefEPKcEEE4implEv>:
  const TImpl *impl() const {
 8002cae:	b480      	push	{r7}
 8002cb0:	b083      	sub	sp, #12
 8002cb2:	af00      	add	r7, sp, #0
 8002cb4:	6078      	str	r0, [r7, #4]
    return static_cast<const TImpl *>(this);
 8002cb6:	687b      	ldr	r3, [r7, #4]
  }
 8002cb8:	4618      	mov	r0, r3
 8002cba:	370c      	adds	r7, #12
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc2:	4770      	bx	lr

08002cc4 <_ZSt8distanceIPKcENSt15iterator_traitsIT_E15difference_typeES3_S3_>:
  */
  template<typename _InputIterator>
    _GLIBCXX_NODISCARD
    inline _GLIBCXX17_CONSTEXPR
    typename iterator_traits<_InputIterator>::difference_type
    distance(_InputIterator __first, _InputIterator __last)
 8002cc4:	b5b0      	push	{r4, r5, r7, lr}
 8002cc6:	b082      	sub	sp, #8
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
 8002ccc:	6039      	str	r1, [r7, #0]
    {
      // concept requirements -- taken care of in __distance
      return std::__distance(__first, __last,
 8002cce:	687c      	ldr	r4, [r7, #4]
			     std::__iterator_category(__first));
 8002cd0:	1d3b      	adds	r3, r7, #4
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	f000 f895 	bl	8002e02 <_ZSt19__iterator_categoryIPKcENSt15iterator_traitsIT_E17iterator_categoryERKS3_>
      return std::__distance(__first, __last,
 8002cd8:	462a      	mov	r2, r5
 8002cda:	6839      	ldr	r1, [r7, #0]
 8002cdc:	4620      	mov	r0, r4
 8002cde:	f000 f89a 	bl	8002e16 <_ZSt10__distanceIPKcENSt15iterator_traitsIT_E15difference_typeES3_S3_St26random_access_iterator_tag>
 8002ce2:	4603      	mov	r3, r0
    }
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	3708      	adds	r7, #8
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	bdb0      	pop	{r4, r5, r7, pc}

08002cec <_ZN19ArduinoJson6101_11014AllocatorOwnerINS_16DefaultAllocatorEE8allocateEj>:
  void* allocate(size_t n) {
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b082      	sub	sp, #8
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
 8002cf4:	6039      	str	r1, [r7, #0]
    return _allocator.allocate(n);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6839      	ldr	r1, [r7, #0]
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	f7fe fbee 	bl	80014dc <_ZN19ArduinoJson6101_11016DefaultAllocator8allocateEj>
 8002d00:	4603      	mov	r3, r0
  }
 8002d02:	4618      	mov	r0, r3
 8002d04:	3708      	adds	r7, #8
 8002d06:	46bd      	mov	sp, r7
 8002d08:	bd80      	pop	{r7, pc}

08002d0a <_ZN19ArduinoJson6101_11010makeReaderIKcEENS_23UnsafeCharPointerReaderEPT_>:
    return _ptr == _end;
  }
};

template <typename TChar>
inline UnsafeCharPointerReader makeReader(TChar* input) {
 8002d0a:	b580      	push	{r7, lr}
 8002d0c:	b084      	sub	sp, #16
 8002d0e:	af00      	add	r7, sp, #0
 8002d10:	6078      	str	r0, [r7, #4]
  return UnsafeCharPointerReader(reinterpret_cast<const char*>(input));
 8002d12:	f107 030c 	add.w	r3, r7, #12
 8002d16:	6879      	ldr	r1, [r7, #4]
 8002d18:	4618      	mov	r0, r3
 8002d1a:	f7fe fce9 	bl	80016f0 <_ZN19ArduinoJson6101_11023UnsafeCharPointerReaderC1EPKc>
 8002d1e:	68fb      	ldr	r3, [r7, #12]
}
 8002d20:	4618      	mov	r0, r3
 8002d22:	3710      	adds	r7, #16
 8002d24:	46bd      	mov	sp, r7
 8002d26:	bd80      	pop	{r7, pc}

08002d28 <_ZN19ArduinoJson6101_11017makeStringStorageIKcEENS_13StringStorageIPT_vE4typeERNS_10MemoryPoolES4_>:
                                                       TInput& input) {
  return StringStorage<TInput>::create(pool, input);
}

template <typename TChar>
typename StringStorage<TChar*>::type makeStringStorage(MemoryPool& pool,
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b082      	sub	sp, #8
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
 8002d30:	6039      	str	r1, [r7, #0]
                                                       TChar* input) {
  return StringStorage<TChar*>::create(pool, input);
 8002d32:	463b      	mov	r3, r7
 8002d34:	4619      	mov	r1, r3
 8002d36:	6878      	ldr	r0, [r7, #4]
 8002d38:	f000 f87c 	bl	8002e34 <_ZN19ArduinoJson6101_11013StringStorageIPKcvE6createERNS_10MemoryPoolERS2_>
 8002d3c:	4603      	mov	r3, r0
}
 8002d3e:	4618      	mov	r0, r3
 8002d40:	3708      	adds	r7, #8
 8002d42:	46bd      	mov	sp, r7
 8002d44:	bd80      	pop	{r7, pc}

08002d46 <_ZN19ArduinoJson6101_11016makeDeserializerINS_16JsonDeserializerENS_23UnsafeCharPointerReaderENS_12StringCopierEEET_IT0_T1_ERNS_10MemoryPoolES5_S6_h>:
TDeserializer<TReader, TWriter> makeDeserializer(MemoryPool &pool,
 8002d46:	b580      	push	{r7, lr}
 8002d48:	b086      	sub	sp, #24
 8002d4a:	af02      	add	r7, sp, #8
 8002d4c:	60f8      	str	r0, [r7, #12]
 8002d4e:	60b9      	str	r1, [r7, #8]
 8002d50:	607a      	str	r2, [r7, #4]
 8002d52:	603b      	str	r3, [r7, #0]
  return TDeserializer<TReader, TWriter>(pool, reader, writer, nestingLimit);
 8002d54:	7e3b      	ldrb	r3, [r7, #24]
 8002d56:	9300      	str	r3, [sp, #0]
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	687a      	ldr	r2, [r7, #4]
 8002d5c:	68b9      	ldr	r1, [r7, #8]
 8002d5e:	68f8      	ldr	r0, [r7, #12]
 8002d60:	f000 f878 	bl	8002e54 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEEC1ERNS_10MemoryPoolES1_S2_h>
}
 8002d64:	68f8      	ldr	r0, [r7, #12]
 8002d66:	3710      	adds	r7, #16
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	bd80      	pop	{r7, pc}

08002d6c <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE5parseERNS_11VariantDataE>:
  DeserializationError parse(VariantData &variant) {
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b086      	sub	sp, #24
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
 8002d74:	6039      	str	r1, [r7, #0]
    DeserializationError err = skipSpacesAndComments();
 8002d76:	6878      	ldr	r0, [r7, #4]
 8002d78:	f000 f88a 	bl	8002e90 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv>
 8002d7c:	4603      	mov	r3, r0
 8002d7e:	733b      	strb	r3, [r7, #12]
    if (err) return err;
 8002d80:	f107 0310 	add.w	r3, r7, #16
 8002d84:	f107 020c 	add.w	r2, r7, #12
 8002d88:	4611      	mov	r1, r2
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	f7fe fcfc 	bl	8001788 <_ZNK19ArduinoJson6101_11020DeserializationErrorcvMS0_KFvvEEv>
 8002d90:	693b      	ldr	r3, [r7, #16]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d106      	bne.n	8002da4 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE5parseERNS_11VariantDataE+0x38>
 8002d96:	697b      	ldr	r3, [r7, #20]
 8002d98:	f003 0301 	and.w	r3, r3, #1
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d101      	bne.n	8002da4 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE5parseERNS_11VariantDataE+0x38>
 8002da0:	2301      	movs	r3, #1
 8002da2:	e000      	b.n	8002da6 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE5parseERNS_11VariantDataE+0x3a>
 8002da4:	2300      	movs	r3, #0
 8002da6:	f083 0301 	eor.w	r3, r3, #1
 8002daa:	b2db      	uxtb	r3, r3
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d001      	beq.n	8002db4 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE5parseERNS_11VariantDataE+0x48>
 8002db0:	7b3b      	ldrb	r3, [r7, #12]
 8002db2:	e022      	b.n	8002dfa <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE5parseERNS_11VariantDataE+0x8e>
    switch (current()) {
 8002db4:	6878      	ldr	r0, [r7, #4]
 8002db6:	f000 f94b 	bl	8003050 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>
 8002dba:	4603      	mov	r3, r0
 8002dbc:	2b5b      	cmp	r3, #91	@ 0x5b
 8002dbe:	d002      	beq.n	8002dc6 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE5parseERNS_11VariantDataE+0x5a>
 8002dc0:	2b7b      	cmp	r3, #123	@ 0x7b
 8002dc2:	d00a      	beq.n	8002dda <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE5parseERNS_11VariantDataE+0x6e>
 8002dc4:	e013      	b.n	8002dee <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE5parseERNS_11VariantDataE+0x82>
        return parseArray(variant.toArray());
 8002dc6:	6838      	ldr	r0, [r7, #0]
 8002dc8:	f7fe fa7a 	bl	80012c0 <_ZN19ArduinoJson6101_11011VariantData7toArrayEv>
 8002dcc:	4603      	mov	r3, r0
 8002dce:	4619      	mov	r1, r3
 8002dd0:	6878      	ldr	r0, [r7, #4]
 8002dd2:	f000 f966 	bl	80030a2 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE>
 8002dd6:	4603      	mov	r3, r0
 8002dd8:	e00f      	b.n	8002dfa <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE5parseERNS_11VariantDataE+0x8e>
        return parseObject(variant.toObject());
 8002dda:	6838      	ldr	r0, [r7, #0]
 8002ddc:	f7fe fa81 	bl	80012e2 <_ZN19ArduinoJson6101_11011VariantData8toObjectEv>
 8002de0:	4603      	mov	r3, r0
 8002de2:	4619      	mov	r1, r3
 8002de4:	6878      	ldr	r0, [r7, #4]
 8002de6:	f000 fa83 	bl	80032f0 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE>
 8002dea:	4603      	mov	r3, r0
 8002dec:	e005      	b.n	8002dfa <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE5parseERNS_11VariantDataE+0x8e>
        return parseValue(variant);
 8002dee:	6839      	ldr	r1, [r7, #0]
 8002df0:	6878      	ldr	r0, [r7, #4]
 8002df2:	f000 fc40 	bl	8003676 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseValueERNS_11VariantDataE>
 8002df6:	4603      	mov	r3, r0
 8002df8:	bf00      	nop
  }
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	3718      	adds	r7, #24
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	bd80      	pop	{r7, pc}

08002e02 <_ZSt19__iterator_categoryIPKcENSt15iterator_traitsIT_E17iterator_categoryERKS3_>:
   *  sugar for internal library use only.
  */
  template<typename _Iter>
    inline _GLIBCXX_CONSTEXPR
    typename iterator_traits<_Iter>::iterator_category
    __iterator_category(const _Iter&)
 8002e02:	b480      	push	{r7}
 8002e04:	b083      	sub	sp, #12
 8002e06:	af00      	add	r7, sp, #0
 8002e08:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	370c      	adds	r7, #12
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e14:	4770      	bx	lr

08002e16 <_ZSt10__distanceIPKcENSt15iterator_traitsIT_E15difference_typeES3_S3_St26random_access_iterator_tag>:
    __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,
 8002e16:	b480      	push	{r7}
 8002e18:	b085      	sub	sp, #20
 8002e1a:	af00      	add	r7, sp, #0
 8002e1c:	60f8      	str	r0, [r7, #12]
 8002e1e:	60b9      	str	r1, [r7, #8]
 8002e20:	713a      	strb	r2, [r7, #4]
      return __last - __first;
 8002e22:	68ba      	ldr	r2, [r7, #8]
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	1ad3      	subs	r3, r2, r3
    }
 8002e28:	4618      	mov	r0, r3
 8002e2a:	3714      	adds	r7, #20
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e32:	4770      	bx	lr

08002e34 <_ZN19ArduinoJson6101_11013StringStorageIPKcvE6createERNS_10MemoryPoolERS2_>:
  static type create(MemoryPool& pool, TInput&) {
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b084      	sub	sp, #16
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
 8002e3c:	6039      	str	r1, [r7, #0]
    return type(&pool);
 8002e3e:	f107 030c 	add.w	r3, r7, #12
 8002e42:	6879      	ldr	r1, [r7, #4]
 8002e44:	4618      	mov	r0, r3
 8002e46:	f7fe fc35 	bl	80016b4 <_ZN19ArduinoJson6101_11012StringCopierC1EPNS_10MemoryPoolE>
 8002e4a:	68fb      	ldr	r3, [r7, #12]
  }
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	3710      	adds	r7, #16
 8002e50:	46bd      	mov	sp, r7
 8002e52:	bd80      	pop	{r7, pc}

08002e54 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEEC1ERNS_10MemoryPoolES1_S2_h>:
  JsonDeserializer(MemoryPool &pool, TReader reader,
 8002e54:	b480      	push	{r7}
 8002e56:	b085      	sub	sp, #20
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	60f8      	str	r0, [r7, #12]
 8002e5c:	60b9      	str	r1, [r7, #8]
 8002e5e:	607a      	str	r2, [r7, #4]
 8002e60:	603b      	str	r3, [r7, #0]
      : _pool(&pool),
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	68ba      	ldr	r2, [r7, #8]
 8002e66:	601a      	str	r2, [r3, #0]
        _reader(reader),
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	687a      	ldr	r2, [r7, #4]
 8002e6c:	605a      	str	r2, [r3, #4]
        _stringStorage(stringStorage),
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	683a      	ldr	r2, [r7, #0]
 8002e72:	609a      	str	r2, [r3, #8]
        _nestingLimit(nestingLimit),
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	7e3a      	ldrb	r2, [r7, #24]
 8002e78:	731a      	strb	r2, [r3, #12]
        _loaded(false) {}
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	739a      	strb	r2, [r3, #14]
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	4618      	mov	r0, r3
 8002e84:	3714      	adds	r7, #20
 8002e86:	46bd      	mov	sp, r7
 8002e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8c:	4770      	bx	lr
	...

08002e90 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv>:
  DeserializationError skipSpacesAndComments() {
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b088      	sub	sp, #32
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
      switch (current()) {
 8002e98:	6878      	ldr	r0, [r7, #4]
 8002e9a:	f000 f8d9 	bl	8003050 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>
 8002e9e:	4603      	mov	r3, r0
 8002ea0:	2b2f      	cmp	r3, #47	@ 0x2f
 8002ea2:	f200 80c7 	bhi.w	8003034 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv+0x1a4>
 8002ea6:	a201      	add	r2, pc, #4	@ (adr r2, 8002eac <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv+0x1c>)
 8002ea8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002eac:	08002f6d 	.word	0x08002f6d
 8002eb0:	08003035 	.word	0x08003035
 8002eb4:	08003035 	.word	0x08003035
 8002eb8:	08003035 	.word	0x08003035
 8002ebc:	08003035 	.word	0x08003035
 8002ec0:	08003035 	.word	0x08003035
 8002ec4:	08003035 	.word	0x08003035
 8002ec8:	08003035 	.word	0x08003035
 8002ecc:	08003035 	.word	0x08003035
 8002ed0:	08002f7d 	.word	0x08002f7d
 8002ed4:	08002f7d 	.word	0x08002f7d
 8002ed8:	08003035 	.word	0x08003035
 8002edc:	08003035 	.word	0x08003035
 8002ee0:	08002f7d 	.word	0x08002f7d
 8002ee4:	08003035 	.word	0x08003035
 8002ee8:	08003035 	.word	0x08003035
 8002eec:	08003035 	.word	0x08003035
 8002ef0:	08003035 	.word	0x08003035
 8002ef4:	08003035 	.word	0x08003035
 8002ef8:	08003035 	.word	0x08003035
 8002efc:	08003035 	.word	0x08003035
 8002f00:	08003035 	.word	0x08003035
 8002f04:	08003035 	.word	0x08003035
 8002f08:	08003035 	.word	0x08003035
 8002f0c:	08003035 	.word	0x08003035
 8002f10:	08003035 	.word	0x08003035
 8002f14:	08003035 	.word	0x08003035
 8002f18:	08003035 	.word	0x08003035
 8002f1c:	08003035 	.word	0x08003035
 8002f20:	08003035 	.word	0x08003035
 8002f24:	08003035 	.word	0x08003035
 8002f28:	08003035 	.word	0x08003035
 8002f2c:	08002f7d 	.word	0x08002f7d
 8002f30:	08003035 	.word	0x08003035
 8002f34:	08003035 	.word	0x08003035
 8002f38:	08003035 	.word	0x08003035
 8002f3c:	08003035 	.word	0x08003035
 8002f40:	08003035 	.word	0x08003035
 8002f44:	08003035 	.word	0x08003035
 8002f48:	08003035 	.word	0x08003035
 8002f4c:	08003035 	.word	0x08003035
 8002f50:	08003035 	.word	0x08003035
 8002f54:	08003035 	.word	0x08003035
 8002f58:	08003035 	.word	0x08003035
 8002f5c:	08003035 	.word	0x08003035
 8002f60:	08003035 	.word	0x08003035
 8002f64:	08003035 	.word	0x08003035
 8002f68:	08002f85 	.word	0x08002f85
          return DeserializationError::IncompleteInput;
 8002f6c:	f107 030c 	add.w	r3, r7, #12
 8002f70:	2101      	movs	r1, #1
 8002f72:	4618      	mov	r0, r3
 8002f74:	f7fe fbf7 	bl	8001766 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 8002f78:	7b3b      	ldrb	r3, [r7, #12]
 8002f7a:	e064      	b.n	8003046 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv+0x1b6>
          move();
 8002f7c:	6878      	ldr	r0, [r7, #4]
 8002f7e:	f000 fbbb 	bl	80036f8 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE4moveEv>
          continue;
 8002f82:	e05f      	b.n	8003044 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv+0x1b4>
          move();  // skip '/'
 8002f84:	6878      	ldr	r0, [r7, #4]
 8002f86:	f000 fbb7 	bl	80036f8 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE4moveEv>
          switch (current()) {
 8002f8a:	6878      	ldr	r0, [r7, #4]
 8002f8c:	f000 f860 	bl	8003050 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>
 8002f90:	4603      	mov	r3, r0
 8002f92:	2b2a      	cmp	r3, #42	@ 0x2a
 8002f94:	d002      	beq.n	8002f9c <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv+0x10c>
 8002f96:	2b2f      	cmp	r3, #47	@ 0x2f
 8002f98:	d02a      	beq.n	8002ff0 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv+0x160>
 8002f9a:	e042      	b.n	8003022 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv+0x192>
              move();  // skip '*'
 8002f9c:	6878      	ldr	r0, [r7, #4]
 8002f9e:	f000 fbab 	bl	80036f8 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE4moveEv>
              bool wasStar = false;
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	77fb      	strb	r3, [r7, #31]
                char c = current();
 8002fa6:	6878      	ldr	r0, [r7, #4]
 8002fa8:	f000 f852 	bl	8003050 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>
 8002fac:	4603      	mov	r3, r0
 8002fae:	777b      	strb	r3, [r7, #29]
                if (c == '\0') return DeserializationError::IncompleteInput;
 8002fb0:	7f7b      	ldrb	r3, [r7, #29]
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d107      	bne.n	8002fc6 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv+0x136>
 8002fb6:	f107 0310 	add.w	r3, r7, #16
 8002fba:	2101      	movs	r1, #1
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	f7fe fbd2 	bl	8001766 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 8002fc2:	7c3b      	ldrb	r3, [r7, #16]
 8002fc4:	e03f      	b.n	8003046 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv+0x1b6>
                if (c == '/' && wasStar) {
 8002fc6:	7f7b      	ldrb	r3, [r7, #29]
 8002fc8:	2b2f      	cmp	r3, #47	@ 0x2f
 8002fca:	d107      	bne.n	8002fdc <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv+0x14c>
 8002fcc:	7ffb      	ldrb	r3, [r7, #31]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d004      	beq.n	8002fdc <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv+0x14c>
                  move();
 8002fd2:	6878      	ldr	r0, [r7, #4]
 8002fd4:	f000 fb90 	bl	80036f8 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE4moveEv>
                  break;
 8002fd8:	bf00      	nop
              break;
 8002fda:	e02a      	b.n	8003032 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv+0x1a2>
                wasStar = c == '*';
 8002fdc:	7f7b      	ldrb	r3, [r7, #29]
 8002fde:	2b2a      	cmp	r3, #42	@ 0x2a
 8002fe0:	bf0c      	ite	eq
 8002fe2:	2301      	moveq	r3, #1
 8002fe4:	2300      	movne	r3, #0
 8002fe6:	77fb      	strb	r3, [r7, #31]
                move();
 8002fe8:	6878      	ldr	r0, [r7, #4]
 8002fea:	f000 fb85 	bl	80036f8 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE4moveEv>
              for (;;) {
 8002fee:	e7da      	b.n	8002fa6 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv+0x116>
                move();
 8002ff0:	6878      	ldr	r0, [r7, #4]
 8002ff2:	f000 fb81 	bl	80036f8 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE4moveEv>
                char c = current();
 8002ff6:	6878      	ldr	r0, [r7, #4]
 8002ff8:	f000 f82a 	bl	8003050 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>
 8002ffc:	4603      	mov	r3, r0
 8002ffe:	77bb      	strb	r3, [r7, #30]
                if (c == '\0') return DeserializationError::IncompleteInput;
 8003000:	7fbb      	ldrb	r3, [r7, #30]
 8003002:	2b00      	cmp	r3, #0
 8003004:	d107      	bne.n	8003016 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv+0x186>
 8003006:	f107 0314 	add.w	r3, r7, #20
 800300a:	2101      	movs	r1, #1
 800300c:	4618      	mov	r0, r3
 800300e:	f7fe fbaa 	bl	8001766 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 8003012:	7d3b      	ldrb	r3, [r7, #20]
 8003014:	e017      	b.n	8003046 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv+0x1b6>
                if (c == '\n') break;
 8003016:	7fbb      	ldrb	r3, [r7, #30]
 8003018:	2b0a      	cmp	r3, #10
 800301a:	d000      	beq.n	800301e <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv+0x18e>
              for (;;) {
 800301c:	e7e8      	b.n	8002ff0 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv+0x160>
                if (c == '\n') break;
 800301e:	bf00      	nop
              break;
 8003020:	e007      	b.n	8003032 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv+0x1a2>
              return DeserializationError::InvalidInput;
 8003022:	f107 0318 	add.w	r3, r7, #24
 8003026:	2102      	movs	r1, #2
 8003028:	4618      	mov	r0, r3
 800302a:	f7fe fb9c 	bl	8001766 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 800302e:	7e3b      	ldrb	r3, [r7, #24]
 8003030:	e009      	b.n	8003046 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv+0x1b6>
          break;
 8003032:	e007      	b.n	8003044 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv+0x1b4>
          return DeserializationError::Ok;
 8003034:	f107 031c 	add.w	r3, r7, #28
 8003038:	2100      	movs	r1, #0
 800303a:	4618      	mov	r0, r3
 800303c:	f7fe fb93 	bl	8001766 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 8003040:	7f3b      	ldrb	r3, [r7, #28]
 8003042:	e000      	b.n	8003046 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv+0x1b6>
    for (;;) {
 8003044:	e728      	b.n	8002e98 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv+0x8>
  }
 8003046:	4618      	mov	r0, r3
 8003048:	3720      	adds	r7, #32
 800304a:	46bd      	mov	sp, r7
 800304c:	bd80      	pop	{r7, pc}
 800304e:	bf00      	nop

08003050 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>:
  char current() {
 8003050:	b580      	push	{r7, lr}
 8003052:	b082      	sub	sp, #8
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
    if (!_loaded) {
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	7b9b      	ldrb	r3, [r3, #14]
 800305c:	f083 0301 	eor.w	r3, r3, #1
 8003060:	b2db      	uxtb	r3, r3
 8003062:	2b00      	cmp	r3, #0
 8003064:	d017      	beq.n	8003096 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv+0x46>
      if (_reader.ended())
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	3304      	adds	r3, #4
 800306a:	4618      	mov	r0, r3
 800306c:	f7fe fb66 	bl	800173c <_ZNK19ArduinoJson6101_11023UnsafeCharPointerReader5endedEv>
 8003070:	4603      	mov	r3, r0
 8003072:	2b00      	cmp	r3, #0
 8003074:	d003      	beq.n	800307e <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv+0x2e>
        _current = 0;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	2200      	movs	r2, #0
 800307a:	735a      	strb	r2, [r3, #13]
 800307c:	e008      	b.n	8003090 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv+0x40>
        _current = _reader.read();
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	3304      	adds	r3, #4
 8003082:	4618      	mov	r0, r3
 8003084:	f7fe fb4a 	bl	800171c <_ZN19ArduinoJson6101_11023UnsafeCharPointerReader4readEv>
 8003088:	4603      	mov	r3, r0
 800308a:	461a      	mov	r2, r3
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	735a      	strb	r2, [r3, #13]
      _loaded = true;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2201      	movs	r2, #1
 8003094:	739a      	strb	r2, [r3, #14]
    return _current;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	7b5b      	ldrb	r3, [r3, #13]
  }
 800309a:	4618      	mov	r0, r3
 800309c:	3708      	adds	r7, #8
 800309e:	46bd      	mov	sp, r7
 80030a0:	bd80      	pop	{r7, pc}

080030a2 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE>:
  DeserializationError parseArray(CollectionData &array) {
 80030a2:	b580      	push	{r7, lr}
 80030a4:	b098      	sub	sp, #96	@ 0x60
 80030a6:	af00      	add	r7, sp, #0
 80030a8:	6078      	str	r0, [r7, #4]
 80030aa:	6039      	str	r1, [r7, #0]
    if (_nestingLimit == 0) return DeserializationError::TooDeep;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	7b1b      	ldrb	r3, [r3, #12]
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d107      	bne.n	80030c4 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x22>
 80030b4:	f107 0310 	add.w	r3, r7, #16
 80030b8:	2105      	movs	r1, #5
 80030ba:	4618      	mov	r0, r3
 80030bc:	f7fe fb53 	bl	8001766 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 80030c0:	7c3b      	ldrb	r3, [r7, #16]
 80030c2:	e111      	b.n	80032e8 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x246>
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	65bb      	str	r3, [r7, #88]	@ 0x58
 80030c8:	235b      	movs	r3, #91	@ 0x5b
 80030ca:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
    if (current() != charToSkip) return false;
 80030ce:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80030d0:	f7ff ffbe 	bl	8003050 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>
 80030d4:	4603      	mov	r3, r0
 80030d6:	461a      	mov	r2, r3
 80030d8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80030dc:	4293      	cmp	r3, r2
 80030de:	bf14      	ite	ne
 80030e0:	2301      	movne	r3, #1
 80030e2:	2300      	moveq	r3, #0
 80030e4:	b2db      	uxtb	r3, r3
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d001      	beq.n	80030ee <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x4c>
 80030ea:	2300      	movs	r3, #0
 80030ec:	e003      	b.n	80030f6 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x54>
    move();
 80030ee:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80030f0:	f000 fb02 	bl	80036f8 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE4moveEv>
    return true;
 80030f4:	2301      	movs	r3, #1
    if (!eat('[')) return DeserializationError::InvalidInput;
 80030f6:	f083 0301 	eor.w	r3, r3, #1
 80030fa:	b2db      	uxtb	r3, r3
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d007      	beq.n	8003110 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x6e>
 8003100:	f107 0314 	add.w	r3, r7, #20
 8003104:	2102      	movs	r1, #2
 8003106:	4618      	mov	r0, r3
 8003108:	f7fe fb2d 	bl	8001766 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 800310c:	7d3b      	ldrb	r3, [r7, #20]
 800310e:	e0eb      	b.n	80032e8 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x246>
    DeserializationError err = skipSpacesAndComments();
 8003110:	6878      	ldr	r0, [r7, #4]
 8003112:	f7ff febd 	bl	8002e90 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv>
 8003116:	4603      	mov	r3, r0
 8003118:	733b      	strb	r3, [r7, #12]
    if (err) return err;
 800311a:	f107 0318 	add.w	r3, r7, #24
 800311e:	f107 020c 	add.w	r2, r7, #12
 8003122:	4611      	mov	r1, r2
 8003124:	4618      	mov	r0, r3
 8003126:	f7fe fb2f 	bl	8001788 <_ZNK19ArduinoJson6101_11020DeserializationErrorcvMS0_KFvvEEv>
 800312a:	69bb      	ldr	r3, [r7, #24]
 800312c:	2b00      	cmp	r3, #0
 800312e:	d106      	bne.n	800313e <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x9c>
 8003130:	69fb      	ldr	r3, [r7, #28]
 8003132:	f003 0301 	and.w	r3, r3, #1
 8003136:	2b00      	cmp	r3, #0
 8003138:	d101      	bne.n	800313e <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x9c>
 800313a:	2301      	movs	r3, #1
 800313c:	e000      	b.n	8003140 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x9e>
 800313e:	2300      	movs	r3, #0
 8003140:	f083 0301 	eor.w	r3, r3, #1
 8003144:	b2db      	uxtb	r3, r3
 8003146:	2b00      	cmp	r3, #0
 8003148:	d001      	beq.n	800314e <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0xac>
 800314a:	7b3b      	ldrb	r3, [r7, #12]
 800314c:	e0cc      	b.n	80032e8 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x246>
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	653b      	str	r3, [r7, #80]	@ 0x50
 8003152:	235d      	movs	r3, #93	@ 0x5d
 8003154:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    if (current() != charToSkip) return false;
 8003158:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800315a:	f7ff ff79 	bl	8003050 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>
 800315e:	4603      	mov	r3, r0
 8003160:	461a      	mov	r2, r3
 8003162:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8003166:	4293      	cmp	r3, r2
 8003168:	bf14      	ite	ne
 800316a:	2301      	movne	r3, #1
 800316c:	2300      	moveq	r3, #0
 800316e:	b2db      	uxtb	r3, r3
 8003170:	2b00      	cmp	r3, #0
 8003172:	d001      	beq.n	8003178 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0xd6>
 8003174:	2300      	movs	r3, #0
 8003176:	e003      	b.n	8003180 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0xde>
    move();
 8003178:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800317a:	f000 fabd 	bl	80036f8 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE4moveEv>
    return true;
 800317e:	2301      	movs	r3, #1
    if (eat(']')) return DeserializationError::Ok;
 8003180:	2b00      	cmp	r3, #0
 8003182:	d008      	beq.n	8003196 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0xf4>
 8003184:	f107 0320 	add.w	r3, r7, #32
 8003188:	2100      	movs	r1, #0
 800318a:	4618      	mov	r0, r3
 800318c:	f7fe faeb 	bl	8001766 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 8003190:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003194:	e0a8      	b.n	80032e8 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x246>
      VariantData *value = array.add(_pool);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	4619      	mov	r1, r3
 800319c:	6838      	ldr	r0, [r7, #0]
 800319e:	f7fe f9e0 	bl	8001562 <_ZN19ArduinoJson6101_11014CollectionData3addEPNS_10MemoryPoolE>
 80031a2:	65f8      	str	r0, [r7, #92]	@ 0x5c
      if (!value) return DeserializationError::NoMemory;
 80031a4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d108      	bne.n	80031bc <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x11a>
 80031aa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80031ae:	2103      	movs	r1, #3
 80031b0:	4618      	mov	r0, r3
 80031b2:	f7fe fad8 	bl	8001766 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 80031b6:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80031ba:	e095      	b.n	80032e8 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x246>
      _nestingLimit--;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	7b1b      	ldrb	r3, [r3, #12]
 80031c0:	3b01      	subs	r3, #1
 80031c2:	b2da      	uxtb	r2, r3
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	731a      	strb	r2, [r3, #12]
      err = parse(*value);
 80031c8:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 80031ca:	6878      	ldr	r0, [r7, #4]
 80031cc:	f7ff fdce 	bl	8002d6c <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE5parseERNS_11VariantDataE>
 80031d0:	4603      	mov	r3, r0
 80031d2:	733b      	strb	r3, [r7, #12]
      _nestingLimit++;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	7b1b      	ldrb	r3, [r3, #12]
 80031d8:	3301      	adds	r3, #1
 80031da:	b2da      	uxtb	r2, r3
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	731a      	strb	r2, [r3, #12]
      if (err) return err;
 80031e0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80031e4:	f107 020c 	add.w	r2, r7, #12
 80031e8:	4611      	mov	r1, r2
 80031ea:	4618      	mov	r0, r3
 80031ec:	f7fe facc 	bl	8001788 <_ZNK19ArduinoJson6101_11020DeserializationErrorcvMS0_KFvvEEv>
 80031f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d106      	bne.n	8003204 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x162>
 80031f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80031f8:	f003 0301 	and.w	r3, r3, #1
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d101      	bne.n	8003204 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x162>
 8003200:	2301      	movs	r3, #1
 8003202:	e000      	b.n	8003206 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x164>
 8003204:	2300      	movs	r3, #0
 8003206:	f083 0301 	eor.w	r3, r3, #1
 800320a:	b2db      	uxtb	r3, r3
 800320c:	2b00      	cmp	r3, #0
 800320e:	d001      	beq.n	8003214 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x172>
 8003210:	7b3b      	ldrb	r3, [r7, #12]
 8003212:	e069      	b.n	80032e8 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x246>
      err = skipSpacesAndComments();
 8003214:	6878      	ldr	r0, [r7, #4]
 8003216:	f7ff fe3b 	bl	8002e90 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv>
 800321a:	4603      	mov	r3, r0
 800321c:	733b      	strb	r3, [r7, #12]
      if (err) return err;
 800321e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8003222:	f107 020c 	add.w	r2, r7, #12
 8003226:	4611      	mov	r1, r2
 8003228:	4618      	mov	r0, r3
 800322a:	f7fe faad 	bl	8001788 <_ZNK19ArduinoJson6101_11020DeserializationErrorcvMS0_KFvvEEv>
 800322e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003230:	2b00      	cmp	r3, #0
 8003232:	d106      	bne.n	8003242 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x1a0>
 8003234:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003236:	f003 0301 	and.w	r3, r3, #1
 800323a:	2b00      	cmp	r3, #0
 800323c:	d101      	bne.n	8003242 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x1a0>
 800323e:	2301      	movs	r3, #1
 8003240:	e000      	b.n	8003244 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x1a2>
 8003242:	2300      	movs	r3, #0
 8003244:	f083 0301 	eor.w	r3, r3, #1
 8003248:	b2db      	uxtb	r3, r3
 800324a:	2b00      	cmp	r3, #0
 800324c:	d001      	beq.n	8003252 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x1b0>
 800324e:	7b3b      	ldrb	r3, [r7, #12]
 8003250:	e04a      	b.n	80032e8 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x246>
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003256:	235d      	movs	r3, #93	@ 0x5d
 8003258:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if (current() != charToSkip) return false;
 800325c:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 800325e:	f7ff fef7 	bl	8003050 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>
 8003262:	4603      	mov	r3, r0
 8003264:	461a      	mov	r2, r3
 8003266:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800326a:	4293      	cmp	r3, r2
 800326c:	bf14      	ite	ne
 800326e:	2301      	movne	r3, #1
 8003270:	2300      	moveq	r3, #0
 8003272:	b2db      	uxtb	r3, r3
 8003274:	2b00      	cmp	r3, #0
 8003276:	d001      	beq.n	800327c <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x1da>
 8003278:	2300      	movs	r3, #0
 800327a:	e003      	b.n	8003284 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x1e2>
    move();
 800327c:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 800327e:	f000 fa3b 	bl	80036f8 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE4moveEv>
    return true;
 8003282:	2301      	movs	r3, #1
      if (eat(']')) return DeserializationError::Ok;
 8003284:	2b00      	cmp	r3, #0
 8003286:	d008      	beq.n	800329a <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x1f8>
 8003288:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800328c:	2100      	movs	r1, #0
 800328e:	4618      	mov	r0, r3
 8003290:	f7fe fa69 	bl	8001766 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 8003294:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 8003298:	e026      	b.n	80032e8 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x246>
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	643b      	str	r3, [r7, #64]	@ 0x40
 800329e:	232c      	movs	r3, #44	@ 0x2c
 80032a0:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    if (current() != charToSkip) return false;
 80032a4:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 80032a6:	f7ff fed3 	bl	8003050 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>
 80032aa:	4603      	mov	r3, r0
 80032ac:	461a      	mov	r2, r3
 80032ae:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80032b2:	4293      	cmp	r3, r2
 80032b4:	bf14      	ite	ne
 80032b6:	2301      	movne	r3, #1
 80032b8:	2300      	moveq	r3, #0
 80032ba:	b2db      	uxtb	r3, r3
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d001      	beq.n	80032c4 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x222>
 80032c0:	2300      	movs	r3, #0
 80032c2:	e003      	b.n	80032cc <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x22a>
    move();
 80032c4:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 80032c6:	f000 fa17 	bl	80036f8 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE4moveEv>
    return true;
 80032ca:	2301      	movs	r3, #1
      if (!eat(',')) return DeserializationError::InvalidInput;
 80032cc:	f083 0301 	eor.w	r3, r3, #1
 80032d0:	b2db      	uxtb	r3, r3
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	f43f af5f 	beq.w	8003196 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0xf4>
 80032d8:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80032dc:	2102      	movs	r1, #2
 80032de:	4618      	mov	r0, r3
 80032e0:	f7fe fa41 	bl	8001766 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 80032e4:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
  }
 80032e8:	4618      	mov	r0, r3
 80032ea:	3760      	adds	r7, #96	@ 0x60
 80032ec:	46bd      	mov	sp, r7
 80032ee:	bd80      	pop	{r7, pc}

080032f0 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE>:
  DeserializationError parseObject(CollectionData &object) {
 80032f0:	b590      	push	{r4, r7, lr}
 80032f2:	b0a3      	sub	sp, #140	@ 0x8c
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
 80032f8:	6039      	str	r1, [r7, #0]
    if (_nestingLimit == 0) return DeserializationError::TooDeep;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	7b1b      	ldrb	r3, [r3, #12]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d107      	bne.n	8003312 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x22>
 8003302:	f107 0310 	add.w	r3, r7, #16
 8003306:	2105      	movs	r1, #5
 8003308:	4618      	mov	r0, r3
 800330a:	f7fe fa2c 	bl	8001766 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 800330e:	7c3b      	ldrb	r3, [r7, #16]
 8003310:	e1ad      	b.n	800366e <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x37e>
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003318:	237b      	movs	r3, #123	@ 0x7b
 800331a:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    if (current() != charToSkip) return false;
 800331e:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 8003322:	f7ff fe95 	bl	8003050 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>
 8003326:	4603      	mov	r3, r0
 8003328:	461a      	mov	r2, r3
 800332a:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800332e:	4293      	cmp	r3, r2
 8003330:	bf14      	ite	ne
 8003332:	2301      	movne	r3, #1
 8003334:	2300      	moveq	r3, #0
 8003336:	b2db      	uxtb	r3, r3
 8003338:	2b00      	cmp	r3, #0
 800333a:	d001      	beq.n	8003340 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x50>
 800333c:	2300      	movs	r3, #0
 800333e:	e004      	b.n	800334a <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x5a>
    move();
 8003340:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 8003344:	f000 f9d8 	bl	80036f8 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE4moveEv>
    return true;
 8003348:	2301      	movs	r3, #1
    if (!eat('{')) return DeserializationError::InvalidInput;
 800334a:	f083 0301 	eor.w	r3, r3, #1
 800334e:	b2db      	uxtb	r3, r3
 8003350:	2b00      	cmp	r3, #0
 8003352:	d007      	beq.n	8003364 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x74>
 8003354:	f107 0314 	add.w	r3, r7, #20
 8003358:	2102      	movs	r1, #2
 800335a:	4618      	mov	r0, r3
 800335c:	f7fe fa03 	bl	8001766 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 8003360:	7d3b      	ldrb	r3, [r7, #20]
 8003362:	e184      	b.n	800366e <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x37e>
    DeserializationError err = skipSpacesAndComments();
 8003364:	6878      	ldr	r0, [r7, #4]
 8003366:	f7ff fd93 	bl	8002e90 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv>
 800336a:	4603      	mov	r3, r0
 800336c:	733b      	strb	r3, [r7, #12]
    if (err) return err;
 800336e:	f107 0318 	add.w	r3, r7, #24
 8003372:	f107 020c 	add.w	r2, r7, #12
 8003376:	4611      	mov	r1, r2
 8003378:	4618      	mov	r0, r3
 800337a:	f7fe fa05 	bl	8001788 <_ZNK19ArduinoJson6101_11020DeserializationErrorcvMS0_KFvvEEv>
 800337e:	69bb      	ldr	r3, [r7, #24]
 8003380:	2b00      	cmp	r3, #0
 8003382:	d106      	bne.n	8003392 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0xa2>
 8003384:	69fb      	ldr	r3, [r7, #28]
 8003386:	f003 0301 	and.w	r3, r3, #1
 800338a:	2b00      	cmp	r3, #0
 800338c:	d101      	bne.n	8003392 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0xa2>
 800338e:	2301      	movs	r3, #1
 8003390:	e000      	b.n	8003394 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0xa4>
 8003392:	2300      	movs	r3, #0
 8003394:	f083 0301 	eor.w	r3, r3, #1
 8003398:	b2db      	uxtb	r3, r3
 800339a:	2b00      	cmp	r3, #0
 800339c:	d001      	beq.n	80033a2 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0xb2>
 800339e:	7b3b      	ldrb	r3, [r7, #12]
 80033a0:	e165      	b.n	800366e <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x37e>
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80033a6:	237d      	movs	r3, #125	@ 0x7d
 80033a8:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    if (current() != charToSkip) return false;
 80033ac:	6fb8      	ldr	r0, [r7, #120]	@ 0x78
 80033ae:	f7ff fe4f 	bl	8003050 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>
 80033b2:	4603      	mov	r3, r0
 80033b4:	461a      	mov	r2, r3
 80033b6:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 80033ba:	4293      	cmp	r3, r2
 80033bc:	bf14      	ite	ne
 80033be:	2301      	movne	r3, #1
 80033c0:	2300      	moveq	r3, #0
 80033c2:	b2db      	uxtb	r3, r3
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d001      	beq.n	80033cc <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0xdc>
 80033c8:	2300      	movs	r3, #0
 80033ca:	e003      	b.n	80033d4 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0xe4>
    move();
 80033cc:	6fb8      	ldr	r0, [r7, #120]	@ 0x78
 80033ce:	f000 f993 	bl	80036f8 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE4moveEv>
    return true;
 80033d2:	2301      	movs	r3, #1
    if (eat('}')) return DeserializationError::Ok;
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d008      	beq.n	80033ea <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0xfa>
 80033d8:	f107 0320 	add.w	r3, r7, #32
 80033dc:	2100      	movs	r1, #0
 80033de:	4618      	mov	r0, r3
 80033e0:	f7fe f9c1 	bl	8001766 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 80033e4:	f897 3020 	ldrb.w	r3, [r7, #32]
 80033e8:	e141      	b.n	800366e <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x37e>
      VariantSlot *slot = object.addSlot(_pool);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	4619      	mov	r1, r3
 80033f0:	6838      	ldr	r0, [r7, #0]
 80033f2:	f7fe f88c 	bl	800150e <_ZN19ArduinoJson6101_11014CollectionData7addSlotEPNS_10MemoryPoolE>
 80033f6:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
      if (!slot) return DeserializationError::NoMemory;
 80033fa:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d108      	bne.n	8003414 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x124>
 8003402:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003406:	2103      	movs	r1, #3
 8003408:	4618      	mov	r0, r3
 800340a:	f7fe f9ac 	bl	8001766 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 800340e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8003412:	e12c      	b.n	800366e <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x37e>
      err = parseKey(key);
 8003414:	f107 0308 	add.w	r3, r7, #8
 8003418:	4619      	mov	r1, r3
 800341a:	6878      	ldr	r0, [r7, #4]
 800341c:	f000 f979 	bl	8003712 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE8parseKeyERPKc>
 8003420:	4603      	mov	r3, r0
 8003422:	733b      	strb	r3, [r7, #12]
      if (err) return err;
 8003424:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003428:	f107 020c 	add.w	r2, r7, #12
 800342c:	4611      	mov	r1, r2
 800342e:	4618      	mov	r0, r3
 8003430:	f7fe f9aa 	bl	8001788 <_ZNK19ArduinoJson6101_11020DeserializationErrorcvMS0_KFvvEEv>
 8003434:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003436:	2b00      	cmp	r3, #0
 8003438:	d106      	bne.n	8003448 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x158>
 800343a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800343c:	f003 0301 	and.w	r3, r3, #1
 8003440:	2b00      	cmp	r3, #0
 8003442:	d101      	bne.n	8003448 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x158>
 8003444:	2301      	movs	r3, #1
 8003446:	e000      	b.n	800344a <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x15a>
 8003448:	2300      	movs	r3, #0
 800344a:	f083 0301 	eor.w	r3, r3, #1
 800344e:	b2db      	uxtb	r3, r3
 8003450:	2b00      	cmp	r3, #0
 8003452:	d001      	beq.n	8003458 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x168>
 8003454:	7b3b      	ldrb	r3, [r7, #12]
 8003456:	e10a      	b.n	800366e <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x37e>
      slot->setOwnedKey(make_not_null(key));
 8003458:	f8d7 4084 	ldr.w	r4, [r7, #132]	@ 0x84
 800345c:	68bb      	ldr	r3, [r7, #8]
 800345e:	4618      	mov	r0, r3
 8003460:	f7ff fa3b 	bl	80028da <_ZN19ArduinoJson6101_11013make_not_nullIPKcEENS_8not_nullIT_EES4_>
 8003464:	4603      	mov	r3, r0
 8003466:	4619      	mov	r1, r3
 8003468:	4620      	mov	r0, r4
 800346a:	f7fd fd0f 	bl	8000e8c <_ZN19ArduinoJson6101_11011VariantSlot11setOwnedKeyENS_8not_nullIPKcEE>
      err = skipSpacesAndComments();
 800346e:	6878      	ldr	r0, [r7, #4]
 8003470:	f7ff fd0e 	bl	8002e90 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv>
 8003474:	4603      	mov	r3, r0
 8003476:	733b      	strb	r3, [r7, #12]
      if (err) return err;  // Colon
 8003478:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800347c:	f107 020c 	add.w	r2, r7, #12
 8003480:	4611      	mov	r1, r2
 8003482:	4618      	mov	r0, r3
 8003484:	f7fe f980 	bl	8001788 <_ZNK19ArduinoJson6101_11020DeserializationErrorcvMS0_KFvvEEv>
 8003488:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800348a:	2b00      	cmp	r3, #0
 800348c:	d106      	bne.n	800349c <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x1ac>
 800348e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003490:	f003 0301 	and.w	r3, r3, #1
 8003494:	2b00      	cmp	r3, #0
 8003496:	d101      	bne.n	800349c <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x1ac>
 8003498:	2301      	movs	r3, #1
 800349a:	e000      	b.n	800349e <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x1ae>
 800349c:	2300      	movs	r3, #0
 800349e:	f083 0301 	eor.w	r3, r3, #1
 80034a2:	b2db      	uxtb	r3, r3
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d001      	beq.n	80034ac <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x1bc>
 80034a8:	7b3b      	ldrb	r3, [r7, #12]
 80034aa:	e0e0      	b.n	800366e <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x37e>
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	673b      	str	r3, [r7, #112]	@ 0x70
 80034b0:	233a      	movs	r3, #58	@ 0x3a
 80034b2:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
    if (current() != charToSkip) return false;
 80034b6:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 80034b8:	f7ff fdca 	bl	8003050 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>
 80034bc:	4603      	mov	r3, r0
 80034be:	461a      	mov	r2, r3
 80034c0:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 80034c4:	4293      	cmp	r3, r2
 80034c6:	bf14      	ite	ne
 80034c8:	2301      	movne	r3, #1
 80034ca:	2300      	moveq	r3, #0
 80034cc:	b2db      	uxtb	r3, r3
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d001      	beq.n	80034d6 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x1e6>
 80034d2:	2300      	movs	r3, #0
 80034d4:	e003      	b.n	80034de <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x1ee>
    move();
 80034d6:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 80034d8:	f000 f90e 	bl	80036f8 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE4moveEv>
    return true;
 80034dc:	2301      	movs	r3, #1
      if (!eat(':')) return DeserializationError::InvalidInput;
 80034de:	f083 0301 	eor.w	r3, r3, #1
 80034e2:	b2db      	uxtb	r3, r3
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d008      	beq.n	80034fa <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x20a>
 80034e8:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80034ec:	2102      	movs	r1, #2
 80034ee:	4618      	mov	r0, r3
 80034f0:	f7fe f939 	bl	8001766 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 80034f4:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 80034f8:	e0b9      	b.n	800366e <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x37e>
      _nestingLimit--;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	7b1b      	ldrb	r3, [r3, #12]
 80034fe:	3b01      	subs	r3, #1
 8003500:	b2da      	uxtb	r2, r3
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	731a      	strb	r2, [r3, #12]
      err = parse(*slot->data());
 8003506:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 800350a:	f7fd fc8b 	bl	8000e24 <_ZN19ArduinoJson6101_11011VariantSlot4dataEv>
 800350e:	4603      	mov	r3, r0
 8003510:	4619      	mov	r1, r3
 8003512:	6878      	ldr	r0, [r7, #4]
 8003514:	f7ff fc2a 	bl	8002d6c <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE5parseERNS_11VariantDataE>
 8003518:	4603      	mov	r3, r0
 800351a:	733b      	strb	r3, [r7, #12]
      _nestingLimit++;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	7b1b      	ldrb	r3, [r3, #12]
 8003520:	3301      	adds	r3, #1
 8003522:	b2da      	uxtb	r2, r3
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	731a      	strb	r2, [r3, #12]
      if (err) return err;
 8003528:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800352c:	f107 020c 	add.w	r2, r7, #12
 8003530:	4611      	mov	r1, r2
 8003532:	4618      	mov	r0, r3
 8003534:	f7fe f928 	bl	8001788 <_ZNK19ArduinoJson6101_11020DeserializationErrorcvMS0_KFvvEEv>
 8003538:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800353a:	2b00      	cmp	r3, #0
 800353c:	d106      	bne.n	800354c <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x25c>
 800353e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003540:	f003 0301 	and.w	r3, r3, #1
 8003544:	2b00      	cmp	r3, #0
 8003546:	d101      	bne.n	800354c <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x25c>
 8003548:	2301      	movs	r3, #1
 800354a:	e000      	b.n	800354e <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x25e>
 800354c:	2300      	movs	r3, #0
 800354e:	f083 0301 	eor.w	r3, r3, #1
 8003552:	b2db      	uxtb	r3, r3
 8003554:	2b00      	cmp	r3, #0
 8003556:	d001      	beq.n	800355c <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x26c>
 8003558:	7b3b      	ldrb	r3, [r7, #12]
 800355a:	e088      	b.n	800366e <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x37e>
      err = skipSpacesAndComments();
 800355c:	6878      	ldr	r0, [r7, #4]
 800355e:	f7ff fc97 	bl	8002e90 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv>
 8003562:	4603      	mov	r3, r0
 8003564:	733b      	strb	r3, [r7, #12]
      if (err) return err;
 8003566:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 800356a:	f107 020c 	add.w	r2, r7, #12
 800356e:	4611      	mov	r1, r2
 8003570:	4618      	mov	r0, r3
 8003572:	f7fe f909 	bl	8001788 <_ZNK19ArduinoJson6101_11020DeserializationErrorcvMS0_KFvvEEv>
 8003576:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003578:	2b00      	cmp	r3, #0
 800357a:	d106      	bne.n	800358a <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x29a>
 800357c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800357e:	f003 0301 	and.w	r3, r3, #1
 8003582:	2b00      	cmp	r3, #0
 8003584:	d101      	bne.n	800358a <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x29a>
 8003586:	2301      	movs	r3, #1
 8003588:	e000      	b.n	800358c <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x29c>
 800358a:	2300      	movs	r3, #0
 800358c:	f083 0301 	eor.w	r3, r3, #1
 8003590:	b2db      	uxtb	r3, r3
 8003592:	2b00      	cmp	r3, #0
 8003594:	d001      	beq.n	800359a <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x2aa>
 8003596:	7b3b      	ldrb	r3, [r7, #12]
 8003598:	e069      	b.n	800366e <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x37e>
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800359e:	237d      	movs	r3, #125	@ 0x7d
 80035a0:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
    if (current() != charToSkip) return false;
 80035a4:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 80035a6:	f7ff fd53 	bl	8003050 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>
 80035aa:	4603      	mov	r3, r0
 80035ac:	461a      	mov	r2, r3
 80035ae:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80035b2:	4293      	cmp	r3, r2
 80035b4:	bf14      	ite	ne
 80035b6:	2301      	movne	r3, #1
 80035b8:	2300      	moveq	r3, #0
 80035ba:	b2db      	uxtb	r3, r3
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d001      	beq.n	80035c4 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x2d4>
 80035c0:	2300      	movs	r3, #0
 80035c2:	e003      	b.n	80035cc <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x2dc>
    move();
 80035c4:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 80035c6:	f000 f897 	bl	80036f8 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE4moveEv>
    return true;
 80035ca:	2301      	movs	r3, #1
      if (eat('}')) return DeserializationError::Ok;
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d008      	beq.n	80035e2 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x2f2>
 80035d0:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80035d4:	2100      	movs	r1, #0
 80035d6:	4618      	mov	r0, r3
 80035d8:	f7fe f8c5 	bl	8001766 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 80035dc:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 80035e0:	e045      	b.n	800366e <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x37e>
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	663b      	str	r3, [r7, #96]	@ 0x60
 80035e6:	232c      	movs	r3, #44	@ 0x2c
 80035e8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
    if (current() != charToSkip) return false;
 80035ec:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 80035ee:	f7ff fd2f 	bl	8003050 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>
 80035f2:	4603      	mov	r3, r0
 80035f4:	461a      	mov	r2, r3
 80035f6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80035fa:	4293      	cmp	r3, r2
 80035fc:	bf14      	ite	ne
 80035fe:	2301      	movne	r3, #1
 8003600:	2300      	moveq	r3, #0
 8003602:	b2db      	uxtb	r3, r3
 8003604:	2b00      	cmp	r3, #0
 8003606:	d001      	beq.n	800360c <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x31c>
 8003608:	2300      	movs	r3, #0
 800360a:	e003      	b.n	8003614 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x324>
    move();
 800360c:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 800360e:	f000 f873 	bl	80036f8 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE4moveEv>
    return true;
 8003612:	2301      	movs	r3, #1
      if (!eat(',')) return DeserializationError::InvalidInput;
 8003614:	f083 0301 	eor.w	r3, r3, #1
 8003618:	b2db      	uxtb	r3, r3
 800361a:	2b00      	cmp	r3, #0
 800361c:	d008      	beq.n	8003630 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x340>
 800361e:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8003622:	2102      	movs	r1, #2
 8003624:	4618      	mov	r0, r3
 8003626:	f7fe f89e 	bl	8001766 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 800362a:	f897 3050 	ldrb.w	r3, [r7, #80]	@ 0x50
 800362e:	e01e      	b.n	800366e <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x37e>
      err = skipSpacesAndComments();
 8003630:	6878      	ldr	r0, [r7, #4]
 8003632:	f7ff fc2d 	bl	8002e90 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv>
 8003636:	4603      	mov	r3, r0
 8003638:	733b      	strb	r3, [r7, #12]
      if (err) return err;
 800363a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800363e:	f107 020c 	add.w	r2, r7, #12
 8003642:	4611      	mov	r1, r2
 8003644:	4618      	mov	r0, r3
 8003646:	f7fe f89f 	bl	8001788 <_ZNK19ArduinoJson6101_11020DeserializationErrorcvMS0_KFvvEEv>
 800364a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800364c:	2b00      	cmp	r3, #0
 800364e:	d106      	bne.n	800365e <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x36e>
 8003650:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003652:	f003 0301 	and.w	r3, r3, #1
 8003656:	2b00      	cmp	r3, #0
 8003658:	d101      	bne.n	800365e <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x36e>
 800365a:	2301      	movs	r3, #1
 800365c:	e000      	b.n	8003660 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x370>
 800365e:	2300      	movs	r3, #0
 8003660:	f083 0301 	eor.w	r3, r3, #1
 8003664:	b2db      	uxtb	r3, r3
 8003666:	2b00      	cmp	r3, #0
 8003668:	f43f aebf 	beq.w	80033ea <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0xfa>
 800366c:	7b3b      	ldrb	r3, [r7, #12]
  }
 800366e:	4618      	mov	r0, r3
 8003670:	378c      	adds	r7, #140	@ 0x8c
 8003672:	46bd      	mov	sp, r7
 8003674:	bd90      	pop	{r4, r7, pc}

08003676 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseValueERNS_11VariantDataE>:
  DeserializationError parseValue(VariantData &variant) {
 8003676:	b580      	push	{r7, lr}
 8003678:	b082      	sub	sp, #8
 800367a:	af00      	add	r7, sp, #0
 800367c:	6078      	str	r0, [r7, #4]
 800367e:	6039      	str	r1, [r7, #0]
    if (isQuote(current())) {
 8003680:	6878      	ldr	r0, [r7, #4]
 8003682:	f7ff fce5 	bl	8003050 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>
 8003686:	4603      	mov	r3, r0
 8003688:	4618      	mov	r0, r3
 800368a:	f000 f861 	bl	8003750 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7isQuoteEc>
 800368e:	4603      	mov	r3, r0
 8003690:	2b00      	cmp	r3, #0
 8003692:	d005      	beq.n	80036a0 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseValueERNS_11VariantDataE+0x2a>
      return parseStringValue(variant);
 8003694:	6839      	ldr	r1, [r7, #0]
 8003696:	6878      	ldr	r0, [r7, #4]
 8003698:	f000 f86e 	bl	8003778 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE16parseStringValueERNS_11VariantDataE>
 800369c:	4603      	mov	r3, r0
 800369e:	e005      	b.n	80036ac <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseValueERNS_11VariantDataE+0x36>
      return parseNumericValue(variant);
 80036a0:	6839      	ldr	r1, [r7, #0]
 80036a2:	6878      	ldr	r0, [r7, #4]
 80036a4:	f000 f8a3 	bl	80037ee <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseNumericValueERNS_11VariantDataE>
 80036a8:	4603      	mov	r3, r0
 80036aa:	bf00      	nop
  }
 80036ac:	4618      	mov	r0, r3
 80036ae:	3708      	adds	r7, #8
 80036b0:	46bd      	mov	sp, r7
 80036b2:	bd80      	pop	{r7, pc}

080036b4 <_ZN19ArduinoJson6101_1109variantAsIPKcEENS_9enable_ifIXoosrNS_7is_sameIT_S2_EE5valuesrNS4_IS5_PcEE5valueES2_E4typeEPKNS_11VariantDataE>:

template <typename T>
inline typename enable_if<is_same<T, const char*>::value ||
                              is_same<T, char*>::value,
                          const char*>::type
variantAs(const VariantData* _data) {
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b082      	sub	sp, #8
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
  return _data != 0 ? _data->asString() : 0;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d004      	beq.n	80036cc <_ZN19ArduinoJson6101_1109variantAsIPKcEENS_9enable_ifIXoosrNS_7is_sameIT_S2_EE5valuesrNS4_IS5_PcEE5valueES2_E4typeEPKNS_11VariantDataE+0x18>
 80036c2:	6878      	ldr	r0, [r7, #4]
 80036c4:	f7fd ff83 	bl	80015ce <_ZNK19ArduinoJson6101_11011VariantData8asStringEv>
 80036c8:	4603      	mov	r3, r0
 80036ca:	e000      	b.n	80036ce <_ZN19ArduinoJson6101_1109variantAsIPKcEENS_9enable_ifIXoosrNS_7is_sameIT_S2_EE5valuesrNS4_IS5_PcEE5valueES2_E4typeEPKNS_11VariantDataE+0x1a>
 80036cc:	2300      	movs	r3, #0
}
 80036ce:	4618      	mov	r0, r3
 80036d0:	3708      	adds	r7, #8
 80036d2:	46bd      	mov	sp, r7
 80036d4:	bd80      	pop	{r7, pc}

080036d6 <_ZN19ArduinoJson6101_1109variantAsImEENS_9enable_ifIXsrNS_11is_integralIT_EE5valueES3_E4typeEPKNS_11VariantDataE>:
inline typename enable_if<is_integral<T>::value, T>::type variantAs(
 80036d6:	b580      	push	{r7, lr}
 80036d8:	b082      	sub	sp, #8
 80036da:	af00      	add	r7, sp, #0
 80036dc:	6078      	str	r0, [r7, #4]
  return _data != 0 ? _data->asIntegral<T>() : T(0);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d004      	beq.n	80036ee <_ZN19ArduinoJson6101_1109variantAsImEENS_9enable_ifIXsrNS_11is_integralIT_EE5valueES3_E4typeEPKNS_11VariantDataE+0x18>
 80036e4:	6878      	ldr	r0, [r7, #4]
 80036e6:	f000 f96d 	bl	80039c4 <_ZNK19ArduinoJson6101_11011VariantData10asIntegralImEET_v>
 80036ea:	4603      	mov	r3, r0
 80036ec:	e000      	b.n	80036f0 <_ZN19ArduinoJson6101_1109variantAsImEENS_9enable_ifIXsrNS_11is_integralIT_EE5valueES3_E4typeEPKNS_11VariantDataE+0x1a>
 80036ee:	2300      	movs	r3, #0
}
 80036f0:	4618      	mov	r0, r3
 80036f2:	3708      	adds	r7, #8
 80036f4:	46bd      	mov	sp, r7
 80036f6:	bd80      	pop	{r7, pc}

080036f8 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE4moveEv>:
  void move() {
 80036f8:	b480      	push	{r7}
 80036fa:	b083      	sub	sp, #12
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
    _loaded = false;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2200      	movs	r2, #0
 8003704:	739a      	strb	r2, [r3, #14]
  }
 8003706:	bf00      	nop
 8003708:	370c      	adds	r7, #12
 800370a:	46bd      	mov	sp, r7
 800370c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003710:	4770      	bx	lr

08003712 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE8parseKeyERPKc>:
  DeserializationError parseKey(const char *&key) {
 8003712:	b580      	push	{r7, lr}
 8003714:	b082      	sub	sp, #8
 8003716:	af00      	add	r7, sp, #0
 8003718:	6078      	str	r0, [r7, #4]
 800371a:	6039      	str	r1, [r7, #0]
    if (isQuote(current())) {
 800371c:	6878      	ldr	r0, [r7, #4]
 800371e:	f7ff fc97 	bl	8003050 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>
 8003722:	4603      	mov	r3, r0
 8003724:	4618      	mov	r0, r3
 8003726:	f000 f813 	bl	8003750 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7isQuoteEc>
 800372a:	4603      	mov	r3, r0
 800372c:	2b00      	cmp	r3, #0
 800372e:	d005      	beq.n	800373c <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE8parseKeyERPKc+0x2a>
      return parseQuotedString(key);
 8003730:	6839      	ldr	r1, [r7, #0]
 8003732:	6878      	ldr	r0, [r7, #4]
 8003734:	f000 f988 	bl	8003a48 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseQuotedStringERPKc>
 8003738:	4603      	mov	r3, r0
 800373a:	e005      	b.n	8003748 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE8parseKeyERPKc+0x36>
      return parseNonQuotedString(key);
 800373c:	6839      	ldr	r1, [r7, #0]
 800373e:	6878      	ldr	r0, [r7, #4]
 8003740:	f000 fa1a 	bl	8003b78 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE20parseNonQuotedStringERPKc>
 8003744:	4603      	mov	r3, r0
 8003746:	bf00      	nop
  }
 8003748:	4618      	mov	r0, r3
 800374a:	3708      	adds	r7, #8
 800374c:	46bd      	mov	sp, r7
 800374e:	bd80      	pop	{r7, pc}

08003750 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7isQuoteEc>:
  static inline bool isQuote(char c) {
 8003750:	b480      	push	{r7}
 8003752:	b083      	sub	sp, #12
 8003754:	af00      	add	r7, sp, #0
 8003756:	4603      	mov	r3, r0
 8003758:	71fb      	strb	r3, [r7, #7]
    return c == '\'' || c == '\"';
 800375a:	79fb      	ldrb	r3, [r7, #7]
 800375c:	2b27      	cmp	r3, #39	@ 0x27
 800375e:	d002      	beq.n	8003766 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7isQuoteEc+0x16>
 8003760:	79fb      	ldrb	r3, [r7, #7]
 8003762:	2b22      	cmp	r3, #34	@ 0x22
 8003764:	d101      	bne.n	800376a <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7isQuoteEc+0x1a>
 8003766:	2301      	movs	r3, #1
 8003768:	e000      	b.n	800376c <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7isQuoteEc+0x1c>
 800376a:	2300      	movs	r3, #0
  }
 800376c:	4618      	mov	r0, r3
 800376e:	370c      	adds	r7, #12
 8003770:	46bd      	mov	sp, r7
 8003772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003776:	4770      	bx	lr

08003778 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE16parseStringValueERNS_11VariantDataE>:
  DeserializationError parseStringValue(VariantData &variant) {
 8003778:	b580      	push	{r7, lr}
 800377a:	b088      	sub	sp, #32
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
 8003780:	6039      	str	r1, [r7, #0]
    DeserializationError err = parseQuotedString(value);
 8003782:	f107 0310 	add.w	r3, r7, #16
 8003786:	4619      	mov	r1, r3
 8003788:	6878      	ldr	r0, [r7, #4]
 800378a:	f000 f95d 	bl	8003a48 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseQuotedStringERPKc>
 800378e:	4603      	mov	r3, r0
 8003790:	733b      	strb	r3, [r7, #12]
    if (err) return err;
 8003792:	f107 0314 	add.w	r3, r7, #20
 8003796:	f107 020c 	add.w	r2, r7, #12
 800379a:	4611      	mov	r1, r2
 800379c:	4618      	mov	r0, r3
 800379e:	f7fd fff3 	bl	8001788 <_ZNK19ArduinoJson6101_11020DeserializationErrorcvMS0_KFvvEEv>
 80037a2:	697b      	ldr	r3, [r7, #20]
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d106      	bne.n	80037b6 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE16parseStringValueERNS_11VariantDataE+0x3e>
 80037a8:	69bb      	ldr	r3, [r7, #24]
 80037aa:	f003 0301 	and.w	r3, r3, #1
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d101      	bne.n	80037b6 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE16parseStringValueERNS_11VariantDataE+0x3e>
 80037b2:	2301      	movs	r3, #1
 80037b4:	e000      	b.n	80037b8 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE16parseStringValueERNS_11VariantDataE+0x40>
 80037b6:	2300      	movs	r3, #0
 80037b8:	f083 0301 	eor.w	r3, r3, #1
 80037bc:	b2db      	uxtb	r3, r3
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d001      	beq.n	80037c6 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE16parseStringValueERNS_11VariantDataE+0x4e>
 80037c2:	7b3b      	ldrb	r3, [r7, #12]
 80037c4:	e00f      	b.n	80037e6 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE16parseStringValueERNS_11VariantDataE+0x6e>
    variant.setOwnedString(make_not_null(value));
 80037c6:	693b      	ldr	r3, [r7, #16]
 80037c8:	4618      	mov	r0, r3
 80037ca:	f7ff f886 	bl	80028da <_ZN19ArduinoJson6101_11013make_not_nullIPKcEENS_8not_nullIT_EES4_>
 80037ce:	4603      	mov	r3, r0
 80037d0:	4619      	mov	r1, r3
 80037d2:	6838      	ldr	r0, [r7, #0]
 80037d4:	f7fd fd60 	bl	8001298 <_ZN19ArduinoJson6101_11011VariantData14setOwnedStringENS_8not_nullIPKcEE>
    return DeserializationError::Ok;
 80037d8:	f107 031c 	add.w	r3, r7, #28
 80037dc:	2100      	movs	r1, #0
 80037de:	4618      	mov	r0, r3
 80037e0:	f7fd ffc1 	bl	8001766 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 80037e4:	7f3b      	ldrb	r3, [r7, #28]
  }
 80037e6:	4618      	mov	r0, r3
 80037e8:	3720      	adds	r7, #32
 80037ea:	46bd      	mov	sp, r7
 80037ec:	bd80      	pop	{r7, pc}

080037ee <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseNumericValueERNS_11VariantDataE>:
  DeserializationError parseNumericValue(VariantData &result) {
 80037ee:	b580      	push	{r7, lr}
 80037f0:	b0a0      	sub	sp, #128	@ 0x80
 80037f2:	af00      	add	r7, sp, #0
 80037f4:	6078      	str	r0, [r7, #4]
 80037f6:	6039      	str	r1, [r7, #0]
    uint8_t n = 0;
 80037f8:	2300      	movs	r3, #0
 80037fa:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    char c = current();
 80037fe:	6878      	ldr	r0, [r7, #4]
 8003800:	f7ff fc26 	bl	8003050 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>
 8003804:	4603      	mov	r3, r0
 8003806:	f887 307e 	strb.w	r3, [r7, #126]	@ 0x7e
    while (canBeInNonQuotedString(c) && n < 63) {
 800380a:	e013      	b.n	8003834 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseNumericValueERNS_11VariantDataE+0x46>
      move();
 800380c:	6878      	ldr	r0, [r7, #4]
 800380e:	f7ff ff73 	bl	80036f8 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE4moveEv>
      buffer[n++] = c;
 8003812:	f897 207e 	ldrb.w	r2, [r7, #126]	@ 0x7e
 8003816:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800381a:	1c59      	adds	r1, r3, #1
 800381c:	f887 107f 	strb.w	r1, [r7, #127]	@ 0x7f
 8003820:	3380      	adds	r3, #128	@ 0x80
 8003822:	443b      	add	r3, r7
 8003824:	f803 2c5c 	strb.w	r2, [r3, #-92]
      c = current();
 8003828:	6878      	ldr	r0, [r7, #4]
 800382a:	f7ff fc11 	bl	8003050 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>
 800382e:	4603      	mov	r3, r0
 8003830:	f887 307e 	strb.w	r3, [r7, #126]	@ 0x7e
    while (canBeInNonQuotedString(c) && n < 63) {
 8003834:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 8003838:	4618      	mov	r0, r3
 800383a:	f000 fa08 	bl	8003c4e <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE22canBeInNonQuotedStringEc>
 800383e:	4603      	mov	r3, r0
 8003840:	2b00      	cmp	r3, #0
 8003842:	d005      	beq.n	8003850 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseNumericValueERNS_11VariantDataE+0x62>
 8003844:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8003848:	2b3e      	cmp	r3, #62	@ 0x3e
 800384a:	d801      	bhi.n	8003850 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseNumericValueERNS_11VariantDataE+0x62>
 800384c:	2301      	movs	r3, #1
 800384e:	e000      	b.n	8003852 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseNumericValueERNS_11VariantDataE+0x64>
 8003850:	2300      	movs	r3, #0
 8003852:	2b00      	cmp	r3, #0
 8003854:	d1da      	bne.n	800380c <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseNumericValueERNS_11VariantDataE+0x1e>
    buffer[n] = 0;
 8003856:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800385a:	3380      	adds	r3, #128	@ 0x80
 800385c:	443b      	add	r3, r7
 800385e:	2200      	movs	r2, #0
 8003860:	f803 2c5c 	strb.w	r2, [r3, #-92]
    c = buffer[0];
 8003864:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8003868:	f887 307e 	strb.w	r3, [r7, #126]	@ 0x7e
    if (c == 't') {  // true
 800386c:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 8003870:	2b74      	cmp	r3, #116	@ 0x74
 8003872:	d114      	bne.n	800389e <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseNumericValueERNS_11VariantDataE+0xb0>
      result.setBoolean(true);
 8003874:	2101      	movs	r1, #1
 8003876:	6838      	ldr	r0, [r7, #0]
 8003878:	f7fd fcb4 	bl	80011e4 <_ZN19ArduinoJson6101_11011VariantData10setBooleanEb>
      return n == 4 ? DeserializationError::Ok
 800387c:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8003880:	2b04      	cmp	r3, #4
 8003882:	bf14      	ite	ne
 8003884:	2301      	movne	r3, #1
 8003886:	2300      	moveq	r3, #0
 8003888:	b2db      	uxtb	r3, r3
                    : DeserializationError::IncompleteInput;
 800388a:	461a      	mov	r2, r3
 800388c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8003890:	4611      	mov	r1, r2
 8003892:	4618      	mov	r0, r3
 8003894:	f7fd ff67 	bl	8001766 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 8003898:	f897 3064 	ldrb.w	r3, [r7, #100]	@ 0x64
 800389c:	e077      	b.n	800398e <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseNumericValueERNS_11VariantDataE+0x1a0>
    if (c == 'f') {  // false
 800389e:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 80038a2:	2b66      	cmp	r3, #102	@ 0x66
 80038a4:	d114      	bne.n	80038d0 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseNumericValueERNS_11VariantDataE+0xe2>
      result.setBoolean(false);
 80038a6:	2100      	movs	r1, #0
 80038a8:	6838      	ldr	r0, [r7, #0]
 80038aa:	f7fd fc9b 	bl	80011e4 <_ZN19ArduinoJson6101_11011VariantData10setBooleanEb>
      return n == 5 ? DeserializationError::Ok
 80038ae:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 80038b2:	2b05      	cmp	r3, #5
 80038b4:	bf14      	ite	ne
 80038b6:	2301      	movne	r3, #1
 80038b8:	2300      	moveq	r3, #0
 80038ba:	b2db      	uxtb	r3, r3
                    : DeserializationError::IncompleteInput;
 80038bc:	461a      	mov	r2, r3
 80038be:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 80038c2:	4611      	mov	r1, r2
 80038c4:	4618      	mov	r0, r3
 80038c6:	f7fd ff4e 	bl	8001766 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 80038ca:	f897 3068 	ldrb.w	r3, [r7, #104]	@ 0x68
 80038ce:	e05e      	b.n	800398e <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseNumericValueERNS_11VariantDataE+0x1a0>
    if (c == 'n') {  // null
 80038d0:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 80038d4:	2b6e      	cmp	r3, #110	@ 0x6e
 80038d6:	d110      	bne.n	80038fa <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseNumericValueERNS_11VariantDataE+0x10c>
      return n == 4 ? DeserializationError::Ok
 80038d8:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 80038dc:	2b04      	cmp	r3, #4
 80038de:	bf14      	ite	ne
 80038e0:	2301      	movne	r3, #1
 80038e2:	2300      	moveq	r3, #0
 80038e4:	b2db      	uxtb	r3, r3
                    : DeserializationError::IncompleteInput;
 80038e6:	461a      	mov	r2, r3
 80038e8:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80038ec:	4611      	mov	r1, r2
 80038ee:	4618      	mov	r0, r3
 80038f0:	f7fd ff39 	bl	8001766 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 80038f4:	f897 306c 	ldrb.w	r3, [r7, #108]	@ 0x6c
 80038f8:	e049      	b.n	800398e <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseNumericValueERNS_11VariantDataE+0x1a0>
    ParsedNumber<Float, UInt> num = parseNumber<Float, UInt>(buffer);
 80038fa:	f107 0308 	add.w	r3, r7, #8
 80038fe:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8003902:	4611      	mov	r1, r2
 8003904:	4618      	mov	r0, r3
 8003906:	f000 f9d3 	bl	8003cb0 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc>
    switch (num.type()) {
 800390a:	f107 0308 	add.w	r3, r7, #8
 800390e:	4618      	mov	r0, r3
 8003910:	f000 fbd4 	bl	80040bc <_ZNK19ArduinoJson6101_11012ParsedNumberIdyE4typeEv>
 8003914:	4603      	mov	r3, r0
 8003916:	2b08      	cmp	r3, #8
 8003918:	d021      	beq.n	800395e <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseNumericValueERNS_11VariantDataE+0x170>
 800391a:	2b08      	cmp	r3, #8
 800391c:	dc2f      	bgt.n	800397e <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseNumericValueERNS_11VariantDataE+0x190>
 800391e:	2b06      	cmp	r3, #6
 8003920:	d00f      	beq.n	8003942 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseNumericValueERNS_11VariantDataE+0x154>
 8003922:	2b07      	cmp	r3, #7
 8003924:	d12b      	bne.n	800397e <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseNumericValueERNS_11VariantDataE+0x190>
        result.setNegativeInteger(num.uintValue);
 8003926:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800392a:	6838      	ldr	r0, [r7, #0]
 800392c:	f7fd fc95 	bl	800125a <_ZN19ArduinoJson6101_11011VariantData18setNegativeIntegerEy>
        return DeserializationError::Ok;
 8003930:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8003934:	2100      	movs	r1, #0
 8003936:	4618      	mov	r0, r3
 8003938:	f7fd ff15 	bl	8001766 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 800393c:	f897 3070 	ldrb.w	r3, [r7, #112]	@ 0x70
 8003940:	e025      	b.n	800398e <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseNumericValueERNS_11VariantDataE+0x1a0>
        result.setPositiveInteger(num.uintValue);
 8003942:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003946:	6838      	ldr	r0, [r7, #0]
 8003948:	f7fd fc74 	bl	8001234 <_ZN19ArduinoJson6101_11011VariantData18setPositiveIntegerEy>
        return DeserializationError::Ok;
 800394c:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8003950:	2100      	movs	r1, #0
 8003952:	4618      	mov	r0, r3
 8003954:	f7fd ff07 	bl	8001766 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 8003958:	f897 3074 	ldrb.w	r3, [r7, #116]	@ 0x74
 800395c:	e017      	b.n	800398e <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseNumericValueERNS_11VariantDataE+0x1a0>
        result.setFloat(num.floatValue);
 800395e:	ed97 7b04 	vldr	d7, [r7, #16]
 8003962:	eeb0 0b47 	vmov.f64	d0, d7
 8003966:	6838      	ldr	r0, [r7, #0]
 8003968:	f7fd fc51 	bl	800120e <_ZN19ArduinoJson6101_11011VariantData8setFloatEd>
        return DeserializationError::Ok;
 800396c:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8003970:	2100      	movs	r1, #0
 8003972:	4618      	mov	r0, r3
 8003974:	f7fd fef7 	bl	8001766 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 8003978:	f897 3078 	ldrb.w	r3, [r7, #120]	@ 0x78
 800397c:	e007      	b.n	800398e <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseNumericValueERNS_11VariantDataE+0x1a0>
    return DeserializationError::InvalidInput;
 800397e:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8003982:	2102      	movs	r1, #2
 8003984:	4618      	mov	r0, r3
 8003986:	f7fd feee 	bl	8001766 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 800398a:	f897 307c 	ldrb.w	r3, [r7, #124]	@ 0x7c
  }
 800398e:	4618      	mov	r0, r3
 8003990:	3780      	adds	r7, #128	@ 0x80
 8003992:	46bd      	mov	sp, r7
 8003994:	bd80      	pop	{r7, pc}

08003996 <_ZNK19ArduinoJson6101_11011VariantData9getMemberINS_21ConstRamStringAdapterEEEPS0_T_>:
  VariantData *getMember(TAdaptedString key) const {
 8003996:	b580      	push	{r7, lr}
 8003998:	b082      	sub	sp, #8
 800399a:	af00      	add	r7, sp, #0
 800399c:	6078      	str	r0, [r7, #4]
 800399e:	6039      	str	r1, [r7, #0]
    return isObject() ? _content.asCollection.get(key) : 0;
 80039a0:	6878      	ldr	r0, [r7, #4]
 80039a2:	f7fd fc0c 	bl	80011be <_ZNK19ArduinoJson6101_11011VariantData8isObjectEv>
 80039a6:	4603      	mov	r3, r0
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d006      	beq.n	80039ba <_ZNK19ArduinoJson6101_11011VariantData9getMemberINS_21ConstRamStringAdapterEEEPS0_T_+0x24>
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6839      	ldr	r1, [r7, #0]
 80039b0:	4618      	mov	r0, r3
 80039b2:	f7fe ffce 	bl	8002952 <_ZNK19ArduinoJson6101_11014CollectionData3getINS_21ConstRamStringAdapterEEEPNS_11VariantDataET_>
 80039b6:	4603      	mov	r3, r0
 80039b8:	e000      	b.n	80039bc <_ZNK19ArduinoJson6101_11011VariantData9getMemberINS_21ConstRamStringAdapterEEEPS0_T_+0x26>
 80039ba:	2300      	movs	r3, #0
  }
 80039bc:	4618      	mov	r0, r3
 80039be:	3708      	adds	r7, #8
 80039c0:	46bd      	mov	sp, r7
 80039c2:	bd80      	pop	{r7, pc}

080039c4 <_ZNK19ArduinoJson6101_11011VariantData10asIntegralImEET_v>:
inline T VariantData::asIntegral() const {
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b082      	sub	sp, #8
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
  switch (type()) {
 80039cc:	6878      	ldr	r0, [r7, #4]
 80039ce:	f7fd fc99 	bl	8001304 <_ZNK19ArduinoJson6101_11011VariantData4typeEv>
 80039d2:	4603      	mov	r3, r0
 80039d4:	3b03      	subs	r3, #3
 80039d6:	2b05      	cmp	r3, #5
 80039d8:	d830      	bhi.n	8003a3c <_ZNK19ArduinoJson6101_11011VariantData10asIntegralImEET_v+0x78>
 80039da:	a201      	add	r2, pc, #4	@ (adr r2, 80039e0 <_ZNK19ArduinoJson6101_11011VariantData10asIntegralImEET_v+0x1c>)
 80039dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039e0:	08003a1d 	.word	0x08003a1d
 80039e4:	08003a1d 	.word	0x08003a1d
 80039e8:	080039f9 	.word	0x080039f9
 80039ec:	080039f9 	.word	0x080039f9
 80039f0:	08003a0b 	.word	0x08003a0b
 80039f4:	08003a2b 	.word	0x08003a2b
      return convertPositiveInteger<T>(_content.asInteger);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039fe:	4610      	mov	r0, r2
 8003a00:	4619      	mov	r1, r3
 8003a02:	f000 fb7c 	bl	80040fe <_ZN19ArduinoJson6101_11022convertPositiveIntegerImyEET_T0_>
 8003a06:	4603      	mov	r3, r0
 8003a08:	e019      	b.n	8003a3e <_ZNK19ArduinoJson6101_11011VariantData10asIntegralImEET_v+0x7a>
      return convertNegativeInteger<T>(_content.asInteger);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a10:	4610      	mov	r0, r2
 8003a12:	4619      	mov	r1, r3
 8003a14:	f000 fb86 	bl	8004124 <_ZN19ArduinoJson6101_11022convertNegativeIntegerImyEET_T0_>
 8003a18:	4603      	mov	r3, r0
 8003a1a:	e010      	b.n	8003a3e <_ZNK19ArduinoJson6101_11011VariantData10asIntegralImEET_v+0x7a>
      return parseInteger<T>(_content.asString);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	4618      	mov	r0, r3
 8003a22:	f000 fb93 	bl	800414c <_ZN19ArduinoJson6101_11012parseIntegerImEET_PKc>
 8003a26:	4603      	mov	r3, r0
 8003a28:	e009      	b.n	8003a3e <_ZNK19ArduinoJson6101_11011VariantData10asIntegralImEET_v+0x7a>
      return convertFloat<T>(_content.asFloat);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	ed93 7b00 	vldr	d7, [r3]
 8003a30:	eeb0 0b47 	vmov.f64	d0, d7
 8003a34:	f000 fb9e 	bl	8004174 <_ZN19ArduinoJson6101_11012convertFloatImdEENS_9enable_ifIXntsrNS_17is_floating_pointIT_EE5valueES3_E4typeET0_>
 8003a38:	4603      	mov	r3, r0
 8003a3a:	e000      	b.n	8003a3e <_ZNK19ArduinoJson6101_11011VariantData10asIntegralImEET_v+0x7a>
      return 0;
 8003a3c:	2300      	movs	r3, #0
}
 8003a3e:	4618      	mov	r0, r3
 8003a40:	3708      	adds	r7, #8
 8003a42:	46bd      	mov	sp, r7
 8003a44:	bd80      	pop	{r7, pc}
 8003a46:	bf00      	nop

08003a48 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseQuotedStringERPKc>:
  DeserializationError parseQuotedString(const char *&result) {
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b08c      	sub	sp, #48	@ 0x30
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
 8003a50:	6039      	str	r1, [r7, #0]
    StringBuilder builder = _stringStorage.startString();
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	f103 0208 	add.w	r2, r3, #8
 8003a58:	f107 0308 	add.w	r3, r7, #8
 8003a5c:	4611      	mov	r1, r2
 8003a5e:	4618      	mov	r0, r3
 8003a60:	f7fd fe37 	bl	80016d2 <_ZN19ArduinoJson6101_11012StringCopier11startStringEv>
    const char stopChar = current();
 8003a64:	6878      	ldr	r0, [r7, #4]
 8003a66:	f7ff faf3 	bl	8003050 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>
 8003a6a:	4603      	mov	r3, r0
 8003a6c:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
    move();
 8003a70:	6878      	ldr	r0, [r7, #4]
 8003a72:	f7ff fe41 	bl	80036f8 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE4moveEv>
      char c = current();
 8003a76:	6878      	ldr	r0, [r7, #4]
 8003a78:	f7ff faea 	bl	8003050 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>
 8003a7c:	4603      	mov	r3, r0
 8003a7e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      move();
 8003a82:	6878      	ldr	r0, [r7, #4]
 8003a84:	f7ff fe38 	bl	80036f8 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE4moveEv>
      if (c == stopChar) break;
 8003a88:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8003a8c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8003a90:	429a      	cmp	r2, r3
 8003a92:	d04f      	beq.n	8003b34 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseQuotedStringERPKc+0xec>
      if (c == '\0') return DeserializationError::IncompleteInput;
 8003a94:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d107      	bne.n	8003aac <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseQuotedStringERPKc+0x64>
 8003a9c:	f107 0318 	add.w	r3, r7, #24
 8003aa0:	2101      	movs	r1, #1
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	f7fd fe5f 	bl	8001766 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 8003aa8:	7e3b      	ldrb	r3, [r7, #24]
 8003aaa:	e061      	b.n	8003b70 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseQuotedStringERPKc+0x128>
      if (c == '\\') {
 8003aac:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8003ab0:	2b5c      	cmp	r3, #92	@ 0x5c
 8003ab2:	d136      	bne.n	8003b22 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseQuotedStringERPKc+0xda>
        c = current();
 8003ab4:	6878      	ldr	r0, [r7, #4]
 8003ab6:	f7ff facb 	bl	8003050 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>
 8003aba:	4603      	mov	r3, r0
 8003abc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        if (c == '\0') return DeserializationError::IncompleteInput;
 8003ac0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d107      	bne.n	8003ad8 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseQuotedStringERPKc+0x90>
 8003ac8:	f107 031c 	add.w	r3, r7, #28
 8003acc:	2101      	movs	r1, #1
 8003ace:	4618      	mov	r0, r3
 8003ad0:	f7fd fe49 	bl	8001766 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 8003ad4:	7f3b      	ldrb	r3, [r7, #28]
 8003ad6:	e04b      	b.n	8003b70 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseQuotedStringERPKc+0x128>
        if (c == 'u') {
 8003ad8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8003adc:	2b75      	cmp	r3, #117	@ 0x75
 8003ade:	d108      	bne.n	8003af2 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseQuotedStringERPKc+0xaa>
          return DeserializationError::NotSupported;
 8003ae0:	f107 0320 	add.w	r3, r7, #32
 8003ae4:	2104      	movs	r1, #4
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	f7fd fe3d 	bl	8001766 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 8003aec:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003af0:	e03e      	b.n	8003b70 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseQuotedStringERPKc+0x128>
        c = EscapeSequence::unescapeChar(c);
 8003af2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8003af6:	4618      	mov	r0, r3
 8003af8:	f7fd feb8 	bl	800186c <_ZN19ArduinoJson6101_11014EscapeSequence12unescapeCharEc>
 8003afc:	4603      	mov	r3, r0
 8003afe:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        if (c == '\0') return DeserializationError::InvalidInput;
 8003b02:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d108      	bne.n	8003b1c <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseQuotedStringERPKc+0xd4>
 8003b0a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003b0e:	2102      	movs	r1, #2
 8003b10:	4618      	mov	r0, r3
 8003b12:	f7fd fe28 	bl	8001766 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 8003b16:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8003b1a:	e029      	b.n	8003b70 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseQuotedStringERPKc+0x128>
        move();
 8003b1c:	6878      	ldr	r0, [r7, #4]
 8003b1e:	f7ff fdeb 	bl	80036f8 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE4moveEv>
      builder.append(c);
 8003b22:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8003b26:	f107 0308 	add.w	r3, r7, #8
 8003b2a:	4611      	mov	r1, r2
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	f7fd fd80 	bl	8001632 <_ZN19ArduinoJson6101_11013StringBuilder6appendEc>
    for (;;) {
 8003b32:	e7a0      	b.n	8003a76 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseQuotedStringERPKc+0x2e>
      if (c == stopChar) break;
 8003b34:	bf00      	nop
    result = builder.complete();
 8003b36:	f107 0308 	add.w	r3, r7, #8
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	f7fd fd9e 	bl	800167c <_ZN19ArduinoJson6101_11013StringBuilder8completeEv>
 8003b40:	4602      	mov	r2, r0
 8003b42:	683b      	ldr	r3, [r7, #0]
 8003b44:	601a      	str	r2, [r3, #0]
    if (!result) return DeserializationError::NoMemory;
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d108      	bne.n	8003b60 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseQuotedStringERPKc+0x118>
 8003b4e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003b52:	2103      	movs	r1, #3
 8003b54:	4618      	mov	r0, r3
 8003b56:	f7fd fe06 	bl	8001766 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 8003b5a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8003b5e:	e007      	b.n	8003b70 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseQuotedStringERPKc+0x128>
    return DeserializationError::Ok;
 8003b60:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003b64:	2100      	movs	r1, #0
 8003b66:	4618      	mov	r0, r3
 8003b68:	f7fd fdfd 	bl	8001766 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 8003b6c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
  }
 8003b70:	4618      	mov	r0, r3
 8003b72:	3730      	adds	r7, #48	@ 0x30
 8003b74:	46bd      	mov	sp, r7
 8003b76:	bd80      	pop	{r7, pc}

08003b78 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE20parseNonQuotedStringERPKc>:
  DeserializationError parseNonQuotedString(const char *&result) {
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b08a      	sub	sp, #40	@ 0x28
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
 8003b80:	6039      	str	r1, [r7, #0]
    StringBuilder builder = _stringStorage.startString();
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	f103 0208 	add.w	r2, r3, #8
 8003b88:	f107 0308 	add.w	r3, r7, #8
 8003b8c:	4611      	mov	r1, r2
 8003b8e:	4618      	mov	r0, r3
 8003b90:	f7fd fd9f 	bl	80016d2 <_ZN19ArduinoJson6101_11012StringCopier11startStringEv>
    char c = current();
 8003b94:	6878      	ldr	r0, [r7, #4]
 8003b96:	f7ff fa5b 	bl	8003050 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>
 8003b9a:	4603      	mov	r3, r0
 8003b9c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (c == '\0') return DeserializationError::IncompleteInput;
 8003ba0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d107      	bne.n	8003bb8 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE20parseNonQuotedStringERPKc+0x40>
 8003ba8:	f107 0318 	add.w	r3, r7, #24
 8003bac:	2101      	movs	r1, #1
 8003bae:	4618      	mov	r0, r3
 8003bb0:	f7fd fdd9 	bl	8001766 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 8003bb4:	7e3b      	ldrb	r3, [r7, #24]
 8003bb6:	e046      	b.n	8003c46 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE20parseNonQuotedStringERPKc+0xce>
    if (canBeInNonQuotedString(c)) {  // no quotes
 8003bb8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	f000 f846 	bl	8003c4e <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE22canBeInNonQuotedStringEc>
 8003bc2:	4603      	mov	r3, r0
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d019      	beq.n	8003bfc <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE20parseNonQuotedStringERPKc+0x84>
        move();
 8003bc8:	6878      	ldr	r0, [r7, #4]
 8003bca:	f7ff fd95 	bl	80036f8 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE4moveEv>
        builder.append(c);
 8003bce:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8003bd2:	f107 0308 	add.w	r3, r7, #8
 8003bd6:	4611      	mov	r1, r2
 8003bd8:	4618      	mov	r0, r3
 8003bda:	f7fd fd2a 	bl	8001632 <_ZN19ArduinoJson6101_11013StringBuilder6appendEc>
        c = current();
 8003bde:	6878      	ldr	r0, [r7, #4]
 8003be0:	f7ff fa36 	bl	8003050 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>
 8003be4:	4603      	mov	r3, r0
 8003be6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      } while (canBeInNonQuotedString(c));
 8003bea:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003bee:	4618      	mov	r0, r3
 8003bf0:	f000 f82d 	bl	8003c4e <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE22canBeInNonQuotedStringEc>
 8003bf4:	4603      	mov	r3, r0
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d1e6      	bne.n	8003bc8 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE20parseNonQuotedStringERPKc+0x50>
 8003bfa:	e007      	b.n	8003c0c <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE20parseNonQuotedStringERPKc+0x94>
      return DeserializationError::InvalidInput;
 8003bfc:	f107 031c 	add.w	r3, r7, #28
 8003c00:	2102      	movs	r1, #2
 8003c02:	4618      	mov	r0, r3
 8003c04:	f7fd fdaf 	bl	8001766 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 8003c08:	7f3b      	ldrb	r3, [r7, #28]
 8003c0a:	e01c      	b.n	8003c46 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE20parseNonQuotedStringERPKc+0xce>
    result = builder.complete();
 8003c0c:	f107 0308 	add.w	r3, r7, #8
 8003c10:	4618      	mov	r0, r3
 8003c12:	f7fd fd33 	bl	800167c <_ZN19ArduinoJson6101_11013StringBuilder8completeEv>
 8003c16:	4602      	mov	r2, r0
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	601a      	str	r2, [r3, #0]
    if (!result) return DeserializationError::NoMemory;
 8003c1c:	683b      	ldr	r3, [r7, #0]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d108      	bne.n	8003c36 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE20parseNonQuotedStringERPKc+0xbe>
 8003c24:	f107 0320 	add.w	r3, r7, #32
 8003c28:	2103      	movs	r1, #3
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	f7fd fd9b 	bl	8001766 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 8003c30:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003c34:	e007      	b.n	8003c46 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE20parseNonQuotedStringERPKc+0xce>
    return DeserializationError::Ok;
 8003c36:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003c3a:	2100      	movs	r1, #0
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	f7fd fd92 	bl	8001766 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 8003c42:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
  }
 8003c46:	4618      	mov	r0, r3
 8003c48:	3728      	adds	r7, #40	@ 0x28
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	bd80      	pop	{r7, pc}

08003c4e <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE22canBeInNonQuotedStringEc>:
  static inline bool canBeInNonQuotedString(char c) {
 8003c4e:	b580      	push	{r7, lr}
 8003c50:	b082      	sub	sp, #8
 8003c52:	af00      	add	r7, sp, #0
 8003c54:	4603      	mov	r3, r0
 8003c56:	71fb      	strb	r3, [r7, #7]
    return isBetween(c, '0', '9') || isBetween(c, '_', 'z') ||
 8003c58:	79fb      	ldrb	r3, [r7, #7]
 8003c5a:	2239      	movs	r2, #57	@ 0x39
 8003c5c:	2130      	movs	r1, #48	@ 0x30
 8003c5e:	4618      	mov	r0, r3
 8003c60:	f000 fab3 	bl	80041ca <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE9isBetweenEccc>
 8003c64:	4603      	mov	r3, r0
           isBetween(c, 'A', 'Z') || c == '+' || c == '-' || c == '.';
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d11a      	bne.n	8003ca0 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE22canBeInNonQuotedStringEc+0x52>
    return isBetween(c, '0', '9') || isBetween(c, '_', 'z') ||
 8003c6a:	79fb      	ldrb	r3, [r7, #7]
 8003c6c:	227a      	movs	r2, #122	@ 0x7a
 8003c6e:	215f      	movs	r1, #95	@ 0x5f
 8003c70:	4618      	mov	r0, r3
 8003c72:	f000 faaa 	bl	80041ca <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE9isBetweenEccc>
 8003c76:	4603      	mov	r3, r0
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d111      	bne.n	8003ca0 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE22canBeInNonQuotedStringEc+0x52>
           isBetween(c, 'A', 'Z') || c == '+' || c == '-' || c == '.';
 8003c7c:	79fb      	ldrb	r3, [r7, #7]
 8003c7e:	225a      	movs	r2, #90	@ 0x5a
 8003c80:	2141      	movs	r1, #65	@ 0x41
 8003c82:	4618      	mov	r0, r3
 8003c84:	f000 faa1 	bl	80041ca <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE9isBetweenEccc>
 8003c88:	4603      	mov	r3, r0
    return isBetween(c, '0', '9') || isBetween(c, '_', 'z') ||
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d108      	bne.n	8003ca0 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE22canBeInNonQuotedStringEc+0x52>
           isBetween(c, 'A', 'Z') || c == '+' || c == '-' || c == '.';
 8003c8e:	79fb      	ldrb	r3, [r7, #7]
 8003c90:	2b2b      	cmp	r3, #43	@ 0x2b
 8003c92:	d005      	beq.n	8003ca0 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE22canBeInNonQuotedStringEc+0x52>
 8003c94:	79fb      	ldrb	r3, [r7, #7]
 8003c96:	2b2d      	cmp	r3, #45	@ 0x2d
 8003c98:	d002      	beq.n	8003ca0 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE22canBeInNonQuotedStringEc+0x52>
 8003c9a:	79fb      	ldrb	r3, [r7, #7]
 8003c9c:	2b2e      	cmp	r3, #46	@ 0x2e
 8003c9e:	d101      	bne.n	8003ca4 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE22canBeInNonQuotedStringEc+0x56>
 8003ca0:	2301      	movs	r3, #1
 8003ca2:	e000      	b.n	8003ca6 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE22canBeInNonQuotedStringEc+0x58>
 8003ca4:	2300      	movs	r3, #0
  }
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	3708      	adds	r7, #8
 8003caa:	46bd      	mov	sp, r7
 8003cac:	bd80      	pop	{r7, pc}
	...

08003cb0 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc>:

template <typename A, typename B>
struct choose_largest : conditional<(sizeof(A) > sizeof(B)), A, B> {};

template <typename TFloat, typename TUInt>
inline ParsedNumber<TFloat, TUInt> parseNumber(const char *s) {
 8003cb0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003cb4:	b0a2      	sub	sp, #136	@ 0x88
 8003cb6:	af02      	add	r7, sp, #8
 8003cb8:	6478      	str	r0, [r7, #68]	@ 0x44
 8003cba:	6439      	str	r1, [r7, #64]	@ 0x40
  typedef typename traits::exponent_type exponent_t;
  typedef ParsedNumber<TFloat, TUInt> return_type;

  ARDUINOJSON_ASSERT(s != 0);

  bool is_negative = false;
 8003cbc:	2300      	movs	r3, #0
 8003cbe:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  switch (*s) {
 8003cc2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003cc4:	781b      	ldrb	r3, [r3, #0]
 8003cc6:	2b2b      	cmp	r3, #43	@ 0x2b
 8003cc8:	d008      	beq.n	8003cdc <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x2c>
 8003cca:	2b2d      	cmp	r3, #45	@ 0x2d
 8003ccc:	d10a      	bne.n	8003ce4 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x34>
    case '-':
      is_negative = true;
 8003cce:	2301      	movs	r3, #1
 8003cd0:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
      s++;
 8003cd4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003cd6:	3301      	adds	r3, #1
 8003cd8:	643b      	str	r3, [r7, #64]	@ 0x40
      break;
 8003cda:	e003      	b.n	8003ce4 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x34>
    case '+':
      s++;
 8003cdc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003cde:	3301      	adds	r3, #1
 8003ce0:	643b      	str	r3, [r7, #64]	@ 0x40
      break;
 8003ce2:	bf00      	nop
  }

  if (*s == 'n' || *s == 'N') return traits::nan();
 8003ce4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003ce6:	781b      	ldrb	r3, [r3, #0]
 8003ce8:	2b6e      	cmp	r3, #110	@ 0x6e
 8003cea:	d003      	beq.n	8003cf4 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x44>
 8003cec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003cee:	781b      	ldrb	r3, [r3, #0]
 8003cf0:	2b4e      	cmp	r3, #78	@ 0x4e
 8003cf2:	d109      	bne.n	8003d08 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x58>
 8003cf4:	f000 fa84 	bl	8004200 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE3nanEv>
 8003cf8:	eeb0 7b40 	vmov.f64	d7, d0
 8003cfc:	eeb0 0b47 	vmov.f64	d0, d7
 8003d00:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8003d02:	f000 fa8b 	bl	800421c <_ZN19ArduinoJson6101_11012ParsedNumberIdyEC1Ed>
 8003d06:	e1d4      	b.n	80040b2 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x402>
  if (*s == 'i' || *s == 'I')
 8003d08:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003d0a:	781b      	ldrb	r3, [r3, #0]
 8003d0c:	2b69      	cmp	r3, #105	@ 0x69
 8003d0e:	d003      	beq.n	8003d18 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x68>
 8003d10:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003d12:	781b      	ldrb	r3, [r3, #0]
 8003d14:	2b49      	cmp	r3, #73	@ 0x49
 8003d16:	d114      	bne.n	8003d42 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x92>
    return is_negative ? -traits::inf() : traits::inf();
 8003d18:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d006      	beq.n	8003d2e <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x7e>
 8003d20:	f000 fa92 	bl	8004248 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE3infEv>
 8003d24:	eeb0 7b40 	vmov.f64	d7, d0
 8003d28:	eeb1 7b47 	vneg.f64	d7, d7
 8003d2c:	e003      	b.n	8003d36 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x86>
 8003d2e:	f000 fa8b 	bl	8004248 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE3infEv>
 8003d32:	eeb0 7b40 	vmov.f64	d7, d0
 8003d36:	eeb0 0b47 	vmov.f64	d0, d7
 8003d3a:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8003d3c:	f000 fa6e 	bl	800421c <_ZN19ArduinoJson6101_11012ParsedNumberIdyEC1Ed>
 8003d40:	e1b7      	b.n	80040b2 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x402>
  if (!isdigit(*s) && *s != '.') return return_type();
 8003d42:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003d44:	781b      	ldrb	r3, [r3, #0]
 8003d46:	4618      	mov	r0, r3
 8003d48:	f7fd fc2d 	bl	80015a6 <_ZN19ArduinoJson6101_1107isdigitEc>
 8003d4c:	4603      	mov	r3, r0
 8003d4e:	f083 0301 	eor.w	r3, r3, #1
 8003d52:	b2db      	uxtb	r3, r3
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d005      	beq.n	8003d64 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0xb4>
 8003d58:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003d5a:	781b      	ldrb	r3, [r3, #0]
 8003d5c:	2b2e      	cmp	r3, #46	@ 0x2e
 8003d5e:	d001      	beq.n	8003d64 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0xb4>
 8003d60:	2301      	movs	r3, #1
 8003d62:	e000      	b.n	8003d66 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0xb6>
 8003d64:	2300      	movs	r3, #0
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d003      	beq.n	8003d72 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0xc2>
 8003d6a:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8003d6c:	f000 fa7a 	bl	8004264 <_ZN19ArduinoJson6101_11012ParsedNumberIdyEC1Ev>
 8003d70:	e19f      	b.n	80040b2 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x402>

  mantissa_t mantissa = 0;
 8003d72:	f04f 0200 	mov.w	r2, #0
 8003d76:	f04f 0300 	mov.w	r3, #0
 8003d7a:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
  exponent_t exponent_offset = 0;
 8003d7e:	2300      	movs	r3, #0
 8003d80:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  const mantissa_t maxUint = TUInt(-1);
 8003d84:	f04f 32ff 	mov.w	r2, #4294967295
 8003d88:	f04f 33ff 	mov.w	r3, #4294967295
 8003d8c:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58

  while (isdigit(*s)) {
 8003d90:	e054      	b.n	8003e3c <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x18c>
    uint8_t digit = uint8_t(*s - '0');
 8003d92:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003d94:	781b      	ldrb	r3, [r3, #0]
 8003d96:	3b30      	subs	r3, #48	@ 0x30
 8003d98:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
    if (mantissa > maxUint / 10) break;
 8003d9c:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8003da0:	f112 3f66 	cmn.w	r2, #1717986918	@ 0x66666666
 8003da4:	49b2      	ldr	r1, [pc, #712]	@ (8004070 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x3c0>)
 8003da6:	418b      	sbcs	r3, r1
 8003da8:	d251      	bcs.n	8003e4e <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x19e>
    mantissa *= 10;
 8003daa:	e9d7 451c 	ldrd	r4, r5, [r7, #112]	@ 0x70
 8003dae:	4622      	mov	r2, r4
 8003db0:	462b      	mov	r3, r5
 8003db2:	f04f 0000 	mov.w	r0, #0
 8003db6:	f04f 0100 	mov.w	r1, #0
 8003dba:	0099      	lsls	r1, r3, #2
 8003dbc:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8003dc0:	0090      	lsls	r0, r2, #2
 8003dc2:	4602      	mov	r2, r0
 8003dc4:	460b      	mov	r3, r1
 8003dc6:	eb12 0804 	adds.w	r8, r2, r4
 8003dca:	eb43 0905 	adc.w	r9, r3, r5
 8003dce:	eb18 0308 	adds.w	r3, r8, r8
 8003dd2:	61bb      	str	r3, [r7, #24]
 8003dd4:	eb49 0309 	adc.w	r3, r9, r9
 8003dd8:	61fb      	str	r3, [r7, #28]
 8003dda:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8003dde:	e9c7 891c 	strd	r8, r9, [r7, #112]	@ 0x70
    if (mantissa > maxUint - digit) break;
 8003de2:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8003de6:	2200      	movs	r2, #0
 8003de8:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003dea:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003dec:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8003df0:	460b      	mov	r3, r1
 8003df2:	43db      	mvns	r3, r3
 8003df4:	633b      	str	r3, [r7, #48]	@ 0x30
 8003df6:	4613      	mov	r3, r2
 8003df8:	43db      	mvns	r3, r3
 8003dfa:	637b      	str	r3, [r7, #52]	@ 0x34
 8003dfc:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8003e00:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003e04:	4621      	mov	r1, r4
 8003e06:	4291      	cmp	r1, r2
 8003e08:	4629      	mov	r1, r5
 8003e0a:	eb71 0303 	sbcs.w	r3, r1, r3
 8003e0e:	d320      	bcc.n	8003e52 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x1a2>
    mantissa += digit;
 8003e10:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8003e14:	2200      	movs	r2, #0
 8003e16:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003e18:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003e1a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8003e1e:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	@ 0x28
 8003e22:	4621      	mov	r1, r4
 8003e24:	1851      	adds	r1, r2, r1
 8003e26:	6139      	str	r1, [r7, #16]
 8003e28:	4629      	mov	r1, r5
 8003e2a:	414b      	adcs	r3, r1
 8003e2c:	617b      	str	r3, [r7, #20]
 8003e2e:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8003e32:	e9c7 341c 	strd	r3, r4, [r7, #112]	@ 0x70
    s++;
 8003e36:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003e38:	3301      	adds	r3, #1
 8003e3a:	643b      	str	r3, [r7, #64]	@ 0x40
  while (isdigit(*s)) {
 8003e3c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003e3e:	781b      	ldrb	r3, [r3, #0]
 8003e40:	4618      	mov	r0, r3
 8003e42:	f7fd fbb0 	bl	80015a6 <_ZN19ArduinoJson6101_1107isdigitEc>
 8003e46:	4603      	mov	r3, r0
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d1a2      	bne.n	8003d92 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0xe2>
 8003e4c:	e002      	b.n	8003e54 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x1a4>
    if (mantissa > maxUint / 10) break;
 8003e4e:	bf00      	nop
 8003e50:	e000      	b.n	8003e54 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x1a4>
    if (mantissa > maxUint - digit) break;
 8003e52:	bf00      	nop
  }

  if (*s == '\0') return return_type(TUInt(mantissa), is_negative);
 8003e54:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003e56:	781b      	ldrb	r3, [r3, #0]
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d11b      	bne.n	8003e94 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x1e4>
 8003e5c:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8003e60:	9300      	str	r3, [sp, #0]
 8003e62:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8003e66:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8003e68:	f000 fa18 	bl	800429c <_ZN19ArduinoJson6101_11012ParsedNumberIdyEC1Eyb>
 8003e6c:	e121      	b.n	80040b2 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x402>

  // avoid mantissa overflow
  while (mantissa > traits::mantissa_max) {
    mantissa /= 10;
 8003e6e:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8003e72:	f04f 020a 	mov.w	r2, #10
 8003e76:	f04f 0300 	mov.w	r3, #0
 8003e7a:	f7fc fc55 	bl	8000728 <__aeabi_uldivmod>
 8003e7e:	4602      	mov	r2, r0
 8003e80:	460b      	mov	r3, r1
 8003e82:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
    exponent_offset++;
 8003e86:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	@ 0x6e
 8003e8a:	b29b      	uxth	r3, r3
 8003e8c:	3301      	adds	r3, #1
 8003e8e:	b29b      	uxth	r3, r3
 8003e90:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  while (mantissa > traits::mantissa_max) {
 8003e94:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8003e98:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003e9c:	d2e7      	bcs.n	8003e6e <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x1be>
  }

  // remaing digits can't fit in the mantissa
  while (isdigit(*s)) {
 8003e9e:	e009      	b.n	8003eb4 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x204>
    exponent_offset++;
 8003ea0:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	@ 0x6e
 8003ea4:	b29b      	uxth	r3, r3
 8003ea6:	3301      	adds	r3, #1
 8003ea8:	b29b      	uxth	r3, r3
 8003eaa:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
    s++;
 8003eae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003eb0:	3301      	adds	r3, #1
 8003eb2:	643b      	str	r3, [r7, #64]	@ 0x40
  while (isdigit(*s)) {
 8003eb4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003eb6:	781b      	ldrb	r3, [r3, #0]
 8003eb8:	4618      	mov	r0, r3
 8003eba:	f7fd fb74 	bl	80015a6 <_ZN19ArduinoJson6101_1107isdigitEc>
 8003ebe:	4603      	mov	r3, r0
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d1ed      	bne.n	8003ea0 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x1f0>
  }

  if (*s == '.') {
 8003ec4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003ec6:	781b      	ldrb	r3, [r3, #0]
 8003ec8:	2b2e      	cmp	r3, #46	@ 0x2e
 8003eca:	d14c      	bne.n	8003f66 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x2b6>
    s++;
 8003ecc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003ece:	3301      	adds	r3, #1
 8003ed0:	643b      	str	r3, [r7, #64]	@ 0x40
    while (isdigit(*s)) {
 8003ed2:	e040      	b.n	8003f56 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x2a6>
      if (mantissa < traits::mantissa_max / 10) {
 8003ed4:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8003ed8:	f1b2 3f99 	cmp.w	r2, #2576980377	@ 0x99999999
 8003edc:	4965      	ldr	r1, [pc, #404]	@ (8004074 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x3c4>)
 8003ede:	418b      	sbcs	r3, r1
 8003ee0:	d236      	bcs.n	8003f50 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x2a0>
        mantissa = mantissa * 10 + uint8_t(*s - '0');
 8003ee2:	e9d7 451c 	ldrd	r4, r5, [r7, #112]	@ 0x70
 8003ee6:	4622      	mov	r2, r4
 8003ee8:	462b      	mov	r3, r5
 8003eea:	f04f 0000 	mov.w	r0, #0
 8003eee:	f04f 0100 	mov.w	r1, #0
 8003ef2:	0099      	lsls	r1, r3, #2
 8003ef4:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8003ef8:	0090      	lsls	r0, r2, #2
 8003efa:	4602      	mov	r2, r0
 8003efc:	460b      	mov	r3, r1
 8003efe:	eb12 0a04 	adds.w	sl, r2, r4
 8003f02:	eb43 0b05 	adc.w	fp, r3, r5
 8003f06:	eb1a 030a 	adds.w	r3, sl, sl
 8003f0a:	60bb      	str	r3, [r7, #8]
 8003f0c:	eb4b 030b 	adc.w	r3, fp, fp
 8003f10:	60fb      	str	r3, [r7, #12]
 8003f12:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8003f16:	4652      	mov	r2, sl
 8003f18:	465b      	mov	r3, fp
 8003f1a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003f1c:	7809      	ldrb	r1, [r1, #0]
 8003f1e:	3930      	subs	r1, #48	@ 0x30
 8003f20:	b2c9      	uxtb	r1, r1
 8003f22:	b2c9      	uxtb	r1, r1
 8003f24:	2000      	movs	r0, #0
 8003f26:	6239      	str	r1, [r7, #32]
 8003f28:	6278      	str	r0, [r7, #36]	@ 0x24
 8003f2a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8003f2e:	4621      	mov	r1, r4
 8003f30:	1851      	adds	r1, r2, r1
 8003f32:	6039      	str	r1, [r7, #0]
 8003f34:	4629      	mov	r1, r5
 8003f36:	414b      	adcs	r3, r1
 8003f38:	607b      	str	r3, [r7, #4]
 8003f3a:	e9d7 3400 	ldrd	r3, r4, [r7]
 8003f3e:	e9c7 341c 	strd	r3, r4, [r7, #112]	@ 0x70
        exponent_offset--;
 8003f42:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	@ 0x6e
 8003f46:	b29b      	uxth	r3, r3
 8003f48:	3b01      	subs	r3, #1
 8003f4a:	b29b      	uxth	r3, r3
 8003f4c:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
      }
      s++;
 8003f50:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003f52:	3301      	adds	r3, #1
 8003f54:	643b      	str	r3, [r7, #64]	@ 0x40
    while (isdigit(*s)) {
 8003f56:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003f58:	781b      	ldrb	r3, [r3, #0]
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	f7fd fb23 	bl	80015a6 <_ZN19ArduinoJson6101_1107isdigitEc>
 8003f60:	4603      	mov	r3, r0
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d1b6      	bne.n	8003ed4 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x224>
    }
  }

  int exponent = 0;
 8003f66:	2300      	movs	r3, #0
 8003f68:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (*s == 'e' || *s == 'E') {
 8003f6a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003f6c:	781b      	ldrb	r3, [r3, #0]
 8003f6e:	2b65      	cmp	r3, #101	@ 0x65
 8003f70:	d003      	beq.n	8003f7a <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x2ca>
 8003f72:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003f74:	781b      	ldrb	r3, [r3, #0]
 8003f76:	2b45      	cmp	r3, #69	@ 0x45
 8003f78:	d164      	bne.n	8004044 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x394>
    s++;
 8003f7a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003f7c:	3301      	adds	r3, #1
 8003f7e:	643b      	str	r3, [r7, #64]	@ 0x40
    bool negative_exponent = false;
 8003f80:	2300      	movs	r3, #0
 8003f82:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
    if (*s == '-') {
 8003f86:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003f88:	781b      	ldrb	r3, [r3, #0]
 8003f8a:	2b2d      	cmp	r3, #45	@ 0x2d
 8003f8c:	d106      	bne.n	8003f9c <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x2ec>
      negative_exponent = true;
 8003f8e:	2301      	movs	r3, #1
 8003f90:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
      s++;
 8003f94:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003f96:	3301      	adds	r3, #1
 8003f98:	643b      	str	r3, [r7, #64]	@ 0x40
 8003f9a:	e044      	b.n	8004026 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x376>
    } else if (*s == '+') {
 8003f9c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003f9e:	781b      	ldrb	r3, [r3, #0]
 8003fa0:	2b2b      	cmp	r3, #43	@ 0x2b
 8003fa2:	d140      	bne.n	8004026 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x376>
      s++;
 8003fa4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003fa6:	3301      	adds	r3, #1
 8003fa8:	643b      	str	r3, [r7, #64]	@ 0x40
    }

    while (isdigit(*s)) {
 8003faa:	e03c      	b.n	8004026 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x376>
      exponent = exponent * 10 + (*s - '0');
 8003fac:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8003fae:	4613      	mov	r3, r2
 8003fb0:	009b      	lsls	r3, r3, #2
 8003fb2:	4413      	add	r3, r2
 8003fb4:	005b      	lsls	r3, r3, #1
 8003fb6:	461a      	mov	r2, r3
 8003fb8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003fba:	781b      	ldrb	r3, [r3, #0]
 8003fbc:	3b30      	subs	r3, #48	@ 0x30
 8003fbe:	4413      	add	r3, r2
 8003fc0:	66bb      	str	r3, [r7, #104]	@ 0x68
      if (exponent + exponent_offset > traits::exponent_max) {
 8003fc2:	f9b7 206e 	ldrsh.w	r2, [r7, #110]	@ 0x6e
 8003fc6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003fc8:	4413      	add	r3, r2
 8003fca:	f5b3 7f9a 	cmp.w	r3, #308	@ 0x134
 8003fce:	dd27      	ble.n	8004020 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x370>
        if (negative_exponent)
 8003fd0:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d00e      	beq.n	8003ff6 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x346>
          return is_negative ? -0.0f : 0.0f;
 8003fd8:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d002      	beq.n	8003fe6 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x336>
 8003fe0:	ed9f 7b1f 	vldr	d7, [pc, #124]	@ 8004060 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x3b0>
 8003fe4:	e001      	b.n	8003fea <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x33a>
 8003fe6:	ed9f 7b20 	vldr	d7, [pc, #128]	@ 8004068 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x3b8>
 8003fea:	eeb0 0b47 	vmov.f64	d0, d7
 8003fee:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8003ff0:	f000 f914 	bl	800421c <_ZN19ArduinoJson6101_11012ParsedNumberIdyEC1Ed>
 8003ff4:	e05d      	b.n	80040b2 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x402>
        else
          return is_negative ? -traits::inf() : traits::inf();
 8003ff6:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d006      	beq.n	800400c <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x35c>
 8003ffe:	f000 f923 	bl	8004248 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE3infEv>
 8004002:	eeb0 7b40 	vmov.f64	d7, d0
 8004006:	eeb1 7b47 	vneg.f64	d7, d7
 800400a:	e003      	b.n	8004014 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x364>
 800400c:	f000 f91c 	bl	8004248 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE3infEv>
 8004010:	eeb0 7b40 	vmov.f64	d7, d0
 8004014:	eeb0 0b47 	vmov.f64	d0, d7
 8004018:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800401a:	f000 f8ff 	bl	800421c <_ZN19ArduinoJson6101_11012ParsedNumberIdyEC1Ed>
 800401e:	e048      	b.n	80040b2 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x402>
      }
      s++;
 8004020:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004022:	3301      	adds	r3, #1
 8004024:	643b      	str	r3, [r7, #64]	@ 0x40
    while (isdigit(*s)) {
 8004026:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004028:	781b      	ldrb	r3, [r3, #0]
 800402a:	4618      	mov	r0, r3
 800402c:	f7fd fabb 	bl	80015a6 <_ZN19ArduinoJson6101_1107isdigitEc>
 8004030:	4603      	mov	r3, r0
 8004032:	2b00      	cmp	r3, #0
 8004034:	d1ba      	bne.n	8003fac <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x2fc>
    }
    if (negative_exponent) exponent = -exponent;
 8004036:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800403a:	2b00      	cmp	r3, #0
 800403c:	d002      	beq.n	8004044 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x394>
 800403e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004040:	425b      	negs	r3, r3
 8004042:	66bb      	str	r3, [r7, #104]	@ 0x68
  }
  exponent += exponent_offset;
 8004044:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	@ 0x6e
 8004048:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800404a:	4413      	add	r3, r2
 800404c:	66bb      	str	r3, [r7, #104]	@ 0x68

  // we should be at the end of the string, otherwise it's an error
  if (*s != '\0') return return_type();
 800404e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004050:	781b      	ldrb	r3, [r3, #0]
 8004052:	2b00      	cmp	r3, #0
 8004054:	d010      	beq.n	8004078 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x3c8>
 8004056:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8004058:	f000 f904 	bl	8004264 <_ZN19ArduinoJson6101_11012ParsedNumberIdyEC1Ev>
 800405c:	e029      	b.n	80040b2 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x402>
 800405e:	bf00      	nop
 8004060:	00000000 	.word	0x00000000
 8004064:	80000000 	.word	0x80000000
	...
 8004070:	19999999 	.word	0x19999999
 8004074:	00019999 	.word	0x00019999

  TFloat result = traits::make_float(static_cast<TFloat>(mantissa), exponent);
 8004078:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 800407c:	f7fc fb1e 	bl	80006bc <__aeabi_ul2d>
 8004080:	4602      	mov	r2, r0
 8004082:	460b      	mov	r3, r1
 8004084:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 8004086:	ec43 2b10 	vmov	d0, r2, r3
 800408a:	f000 f928 	bl	80042de <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE10make_floatIiEEddT_>
 800408e:	ed87 0b12 	vstr	d0, [r7, #72]	@ 0x48

  return is_negative ? -result : result;
 8004092:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8004096:	2b00      	cmp	r3, #0
 8004098:	d004      	beq.n	80040a4 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x3f4>
 800409a:	ed97 7b12 	vldr	d7, [r7, #72]	@ 0x48
 800409e:	eeb1 7b47 	vneg.f64	d7, d7
 80040a2:	e001      	b.n	80040a8 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x3f8>
 80040a4:	ed97 7b12 	vldr	d7, [r7, #72]	@ 0x48
 80040a8:	eeb0 0b47 	vmov.f64	d0, d7
 80040ac:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 80040ae:	f000 f8b5 	bl	800421c <_ZN19ArduinoJson6101_11012ParsedNumberIdyEC1Ed>
}
 80040b2:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 80040b4:	3780      	adds	r7, #128	@ 0x80
 80040b6:	46bd      	mov	sp, r7
 80040b8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080040bc <_ZNK19ArduinoJson6101_11012ParsedNumberIdyE4typeEv>:
  uint8_t type() const {
 80040bc:	b480      	push	{r7}
 80040be:	b083      	sub	sp, #12
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]
    return _type;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	7c1b      	ldrb	r3, [r3, #16]
  }
 80040c8:	4618      	mov	r0, r3
 80040ca:	370c      	adds	r7, #12
 80040cc:	46bd      	mov	sp, r7
 80040ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d2:	4770      	bx	lr

080040d4 <_ZN19ArduinoJson6101_1109objectGetINS_21ConstRamStringAdapterEEEPNS_11VariantDataEPKNS_14CollectionDataET_>:
  if (!lhs || !rhs) return false;
  return lhs->equalsObject(*rhs);
}

template <typename TAdaptedString>
inline VariantData *objectGet(const CollectionData *obj, TAdaptedString key) {
 80040d4:	b580      	push	{r7, lr}
 80040d6:	b082      	sub	sp, #8
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
 80040dc:	6039      	str	r1, [r7, #0]
  if (!obj) return 0;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d101      	bne.n	80040e8 <_ZN19ArduinoJson6101_1109objectGetINS_21ConstRamStringAdapterEEEPNS_11VariantDataEPKNS_14CollectionDataET_+0x14>
 80040e4:	2300      	movs	r3, #0
 80040e6:	e006      	b.n	80040f6 <_ZN19ArduinoJson6101_1109objectGetINS_21ConstRamStringAdapterEEEPNS_11VariantDataEPKNS_14CollectionDataET_+0x22>
  return obj->get(key);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	6839      	ldr	r1, [r7, #0]
 80040ec:	4618      	mov	r0, r3
 80040ee:	f7fe fc30 	bl	8002952 <_ZNK19ArduinoJson6101_11014CollectionData3getINS_21ConstRamStringAdapterEEEPNS_11VariantDataET_>
 80040f2:	4603      	mov	r3, r0
 80040f4:	bf00      	nop
}
 80040f6:	4618      	mov	r0, r3
 80040f8:	3708      	adds	r7, #8
 80040fa:	46bd      	mov	sp, r7
 80040fc:	bd80      	pop	{r7, pc}

080040fe <_ZN19ArduinoJson6101_11022convertPositiveIntegerImyEET_T0_>:
canStoreNegativeInteger(TIn) {
  return false;
}

template <typename TOut, typename TIn>
TOut convertPositiveInteger(TIn value) {
 80040fe:	b580      	push	{r7, lr}
 8004100:	b082      	sub	sp, #8
 8004102:	af00      	add	r7, sp, #0
 8004104:	e9c7 0100 	strd	r0, r1, [r7]
  return canStorePositiveInteger<TOut>(value) ? TOut(value) : 0;
 8004108:	e9d7 0100 	ldrd	r0, r1, [r7]
 800410c:	f000 f937 	bl	800437e <_ZN19ArduinoJson6101_11023canStorePositiveIntegerImyEENS_9enable_ifIXaasrNS_11is_integralIT_EE5valuelestS3_stT0_EbE4typeES5_>
 8004110:	4603      	mov	r3, r0
 8004112:	2b00      	cmp	r3, #0
 8004114:	d001      	beq.n	800411a <_ZN19ArduinoJson6101_11022convertPositiveIntegerImyEET_T0_+0x1c>
 8004116:	683b      	ldr	r3, [r7, #0]
 8004118:	e000      	b.n	800411c <_ZN19ArduinoJson6101_11022convertPositiveIntegerImyEET_T0_+0x1e>
 800411a:	2300      	movs	r3, #0
}
 800411c:	4618      	mov	r0, r3
 800411e:	3708      	adds	r7, #8
 8004120:	46bd      	mov	sp, r7
 8004122:	bd80      	pop	{r7, pc}

08004124 <_ZN19ArduinoJson6101_11022convertNegativeIntegerImyEET_T0_>:

template <typename TOut, typename TIn>
TOut convertNegativeInteger(TIn value) {
 8004124:	b580      	push	{r7, lr}
 8004126:	b082      	sub	sp, #8
 8004128:	af00      	add	r7, sp, #0
 800412a:	e9c7 0100 	strd	r0, r1, [r7]
  return canStoreNegativeInteger<TOut>(value) ? TOut(~value + 1) : 0;
 800412e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004132:	f000 f93c 	bl	80043ae <_ZN19ArduinoJson6101_11023canStoreNegativeIntegerImyEENS_9enable_ifIXaasrNS_11is_integralIT_EE5valuesrNS_11is_unsignedIS3_EE5valueEbE4typeET0_>
 8004136:	4603      	mov	r3, r0
 8004138:	2b00      	cmp	r3, #0
 800413a:	d002      	beq.n	8004142 <_ZN19ArduinoJson6101_11022convertNegativeIntegerImyEET_T0_+0x1e>
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	425b      	negs	r3, r3
 8004140:	e000      	b.n	8004144 <_ZN19ArduinoJson6101_11022convertNegativeIntegerImyEET_T0_+0x20>
 8004142:	2300      	movs	r3, #0
}
 8004144:	4618      	mov	r0, r3
 8004146:	3708      	adds	r7, #8
 8004148:	46bd      	mov	sp, r7
 800414a:	bd80      	pop	{r7, pc}

0800414c <_ZN19ArduinoJson6101_11012parseIntegerImEET_PKc>:
#include "convertNumber.hpp"
#include "parseNumber.hpp"

namespace ARDUINOJSON_NAMESPACE {
template <typename T>
T parseInteger(const char *s) {
 800414c:	b580      	push	{r7, lr}
 800414e:	b088      	sub	sp, #32
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
  // try to reuse the same parameters as JsonDeserializer
  typedef typename choose_largest<UInt, typename make_unsigned<T>::type>::type
      TUInt;
  return parseNumber<Float, TUInt>(s).template as<T>();
 8004154:	f107 0308 	add.w	r3, r7, #8
 8004158:	6879      	ldr	r1, [r7, #4]
 800415a:	4618      	mov	r0, r3
 800415c:	f7ff fda8 	bl	8003cb0 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc>
 8004160:	f107 0308 	add.w	r3, r7, #8
 8004164:	4618      	mov	r0, r3
 8004166:	f000 f92e 	bl	80043c6 <_ZNK19ArduinoJson6101_11012ParsedNumberIdyE2asImEET_v>
 800416a:	4603      	mov	r3, r0
}
 800416c:	4618      	mov	r0, r3
 800416e:	3720      	adds	r7, #32
 8004170:	46bd      	mov	sp, r7
 8004172:	bd80      	pop	{r7, pc}

08004174 <_ZN19ArduinoJson6101_11012convertFloatImdEENS_9enable_ifIXntsrNS_17is_floating_pointIT_EE5valueES3_E4typeET0_>:
    TIn value) {
  return TOut(value);
}

template <typename TOut, typename TIn>
typename enable_if<!is_floating_point<TOut>::value, TOut>::type convertFloat(
 8004174:	b580      	push	{r7, lr}
 8004176:	b082      	sub	sp, #8
 8004178:	af00      	add	r7, sp, #0
 800417a:	ed87 0b00 	vstr	d0, [r7]
    TIn value) {
  return value >= numeric_limits<TOut>::lowest() &&
 800417e:	f000 f950 	bl	8004422 <_ZN19ArduinoJson6101_11014numeric_limitsImvE6lowestEv>
 8004182:	ee07 0a90 	vmov	s15, r0
 8004186:	eeb8 7b67 	vcvt.f64.u32	d7, s15
                 value <= numeric_limits<TOut>::highest()
             ? TOut(value)
 800418a:	ed97 6b00 	vldr	d6, [r7]
 800418e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8004192:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004196:	db13      	blt.n	80041c0 <_ZN19ArduinoJson6101_11012convertFloatImdEENS_9enable_ifIXntsrNS_17is_floating_pointIT_EE5valueES3_E4typeET0_+0x4c>
                 value <= numeric_limits<TOut>::highest()
 8004198:	f000 f94b 	bl	8004432 <_ZN19ArduinoJson6101_11014numeric_limitsImvE7highestEv>
 800419c:	ee07 0a90 	vmov	s15, r0
 80041a0:	eeb8 7b67 	vcvt.f64.u32	d7, s15
  return value >= numeric_limits<TOut>::lowest() &&
 80041a4:	ed97 6b00 	vldr	d6, [r7]
 80041a8:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80041ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80041b0:	d806      	bhi.n	80041c0 <_ZN19ArduinoJson6101_11012convertFloatImdEENS_9enable_ifIXntsrNS_17is_floating_pointIT_EE5valueES3_E4typeET0_+0x4c>
             ? TOut(value)
 80041b2:	ed97 7b00 	vldr	d7, [r7]
 80041b6:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80041ba:	ee17 3a90 	vmov	r3, s15
 80041be:	e000      	b.n	80041c2 <_ZN19ArduinoJson6101_11012convertFloatImdEENS_9enable_ifIXntsrNS_17is_floating_pointIT_EE5valueES3_E4typeET0_+0x4e>
 80041c0:	2300      	movs	r3, #0
             : 0;
}
 80041c2:	4618      	mov	r0, r3
 80041c4:	3708      	adds	r7, #8
 80041c6:	46bd      	mov	sp, r7
 80041c8:	bd80      	pop	{r7, pc}

080041ca <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE9isBetweenEccc>:
  static inline bool isBetween(char c, char min, char max) {
 80041ca:	b480      	push	{r7}
 80041cc:	b083      	sub	sp, #12
 80041ce:	af00      	add	r7, sp, #0
 80041d0:	4603      	mov	r3, r0
 80041d2:	71fb      	strb	r3, [r7, #7]
 80041d4:	460b      	mov	r3, r1
 80041d6:	71bb      	strb	r3, [r7, #6]
 80041d8:	4613      	mov	r3, r2
 80041da:	717b      	strb	r3, [r7, #5]
    return min <= c && c <= max;
 80041dc:	79ba      	ldrb	r2, [r7, #6]
 80041de:	79fb      	ldrb	r3, [r7, #7]
 80041e0:	429a      	cmp	r2, r3
 80041e2:	d805      	bhi.n	80041f0 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE9isBetweenEccc+0x26>
 80041e4:	79fa      	ldrb	r2, [r7, #7]
 80041e6:	797b      	ldrb	r3, [r7, #5]
 80041e8:	429a      	cmp	r2, r3
 80041ea:	d801      	bhi.n	80041f0 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE9isBetweenEccc+0x26>
 80041ec:	2301      	movs	r3, #1
 80041ee:	e000      	b.n	80041f2 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE9isBetweenEccc+0x28>
 80041f0:	2300      	movs	r3, #0
  }
 80041f2:	4618      	mov	r0, r3
 80041f4:	370c      	adds	r7, #12
 80041f6:	46bd      	mov	sp, r7
 80041f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fc:	4770      	bx	lr
	...

08004200 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE3nanEv>:
        forge(0x0AFE07B2, 0x7DD78B14)   // 1e-255
    };
    return factors[index];
  }

  static T nan() {
 8004200:	b580      	push	{r7, lr}
 8004202:	af00      	add	r7, sp, #0
    return forge(0x7ff80000, 0x00000000);
 8004204:	2100      	movs	r1, #0
 8004206:	4804      	ldr	r0, [pc, #16]	@ (8004218 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE3nanEv+0x18>)
 8004208:	f000 f91c 	bl	8004444 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE5forgeEmm>
 800420c:	eeb0 7b40 	vmov.f64	d7, d0
  }
 8004210:	eeb0 0b47 	vmov.f64	d0, d7
 8004214:	bd80      	pop	{r7, pc}
 8004216:	bf00      	nop
 8004218:	7ff80000 	.word	0x7ff80000

0800421c <_ZN19ArduinoJson6101_11012ParsedNumberIdyEC1Ed>:
  ParsedNumber(TFloat value) : floatValue(value), _type(VALUE_IS_FLOAT) {}
 800421c:	b480      	push	{r7}
 800421e:	b085      	sub	sp, #20
 8004220:	af00      	add	r7, sp, #0
 8004222:	60f8      	str	r0, [r7, #12]
 8004224:	ed87 0b00 	vstr	d0, [r7]
 8004228:	68f9      	ldr	r1, [r7, #12]
 800422a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800422e:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	2208      	movs	r2, #8
 8004236:	741a      	strb	r2, [r3, #16]
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	4618      	mov	r0, r3
 800423c:	3714      	adds	r7, #20
 800423e:	46bd      	mov	sp, r7
 8004240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004244:	4770      	bx	lr
	...

08004248 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE3infEv>:

  static T inf() {
 8004248:	b580      	push	{r7, lr}
 800424a:	af00      	add	r7, sp, #0
    return forge(0x7ff00000, 0x00000000);
 800424c:	2100      	movs	r1, #0
 800424e:	4804      	ldr	r0, [pc, #16]	@ (8004260 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE3infEv+0x18>)
 8004250:	f000 f8f8 	bl	8004444 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE5forgeEmm>
 8004254:	eeb0 7b40 	vmov.f64	d7, d0
  }
 8004258:	eeb0 0b47 	vmov.f64	d0, d7
 800425c:	bd80      	pop	{r7, pc}
 800425e:	bf00      	nop
 8004260:	7ff00000 	.word	0x7ff00000

08004264 <_ZN19ArduinoJson6101_11012ParsedNumberIdyEC1Ev>:
  ParsedNumber() : uintValue(0), floatValue(0), _type(VALUE_IS_NULL) {}
 8004264:	b480      	push	{r7}
 8004266:	b083      	sub	sp, #12
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
 800426c:	6879      	ldr	r1, [r7, #4]
 800426e:	f04f 0200 	mov.w	r2, #0
 8004272:	f04f 0300 	mov.w	r3, #0
 8004276:	e9c1 2300 	strd	r2, r3, [r1]
 800427a:	6879      	ldr	r1, [r7, #4]
 800427c:	f04f 0200 	mov.w	r2, #0
 8004280:	f04f 0300 	mov.w	r3, #0
 8004284:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2200      	movs	r2, #0
 800428c:	741a      	strb	r2, [r3, #16]
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	4618      	mov	r0, r3
 8004292:	370c      	adds	r7, #12
 8004294:	46bd      	mov	sp, r7
 8004296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429a:	4770      	bx	lr

0800429c <_ZN19ArduinoJson6101_11012ParsedNumberIdyEC1Eyb>:
  ParsedNumber(TUInt value, bool is_negative)
 800429c:	b580      	push	{r7, lr}
 800429e:	b084      	sub	sp, #16
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	60f8      	str	r0, [r7, #12]
 80042a4:	e9c7 2300 	strd	r2, r3, [r7]
      : uintValue(value),
 80042a8:	68f9      	ldr	r1, [r7, #12]
 80042aa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80042ae:	e9c1 2300 	strd	r2, r3, [r1]
        floatValue(TFloat(value)),
 80042b2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80042b6:	f7fc fa01 	bl	80006bc <__aeabi_ul2d>
 80042ba:	4602      	mov	r2, r0
 80042bc:	460b      	mov	r3, r1
 80042be:	68f9      	ldr	r1, [r7, #12]
 80042c0:	e9c1 2302 	strd	r2, r3, [r1, #8]
        _type(uint8_t(is_negative ? VALUE_IS_NEGATIVE_INTEGER
 80042c4:	7e3b      	ldrb	r3, [r7, #24]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d001      	beq.n	80042ce <_ZN19ArduinoJson6101_11012ParsedNumberIdyEC1Eyb+0x32>
 80042ca:	2207      	movs	r2, #7
 80042cc:	e000      	b.n	80042d0 <_ZN19ArduinoJson6101_11012ParsedNumberIdyEC1Eyb+0x34>
 80042ce:	2206      	movs	r2, #6
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	741a      	strb	r2, [r3, #16]
                                  : VALUE_IS_POSITIVE_INTEGER)) {}
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	4618      	mov	r0, r3
 80042d8:	3710      	adds	r7, #16
 80042da:	46bd      	mov	sp, r7
 80042dc:	bd80      	pop	{r7, pc}

080042de <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE10make_floatIiEEddT_>:
  static T make_float(T m, TExponent e) {
 80042de:	b580      	push	{r7, lr}
 80042e0:	b086      	sub	sp, #24
 80042e2:	af00      	add	r7, sp, #0
 80042e4:	ed87 0b02 	vstr	d0, [r7, #8]
 80042e8:	6078      	str	r0, [r7, #4]
    if (e > 0) {
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	dd1d      	ble.n	800432c <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE10make_floatIiEEddT_+0x4e>
      for (uint8_t index = 0; e != 0; index++) {
 80042f0:	2300      	movs	r3, #0
 80042f2:	75fb      	strb	r3, [r7, #23]
 80042f4:	e016      	b.n	8004324 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE10make_floatIiEEddT_+0x46>
        if (e & 1) m *= positiveBinaryPowerOfTen(index);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	f003 0301 	and.w	r3, r3, #1
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d00b      	beq.n	8004318 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE10make_floatIiEEddT_+0x3a>
 8004300:	7dfb      	ldrb	r3, [r7, #23]
 8004302:	4618      	mov	r0, r3
 8004304:	f000 f8c2 	bl	800448c <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24positiveBinaryPowerOfTenEi>
 8004308:	eeb0 6b40 	vmov.f64	d6, d0
 800430c:	ed97 7b02 	vldr	d7, [r7, #8]
 8004310:	ee27 7b06 	vmul.f64	d7, d7, d6
 8004314:	ed87 7b02 	vstr	d7, [r7, #8]
        e >>= 1;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	105b      	asrs	r3, r3, #1
 800431c:	607b      	str	r3, [r7, #4]
      for (uint8_t index = 0; e != 0; index++) {
 800431e:	7dfb      	ldrb	r3, [r7, #23]
 8004320:	3301      	adds	r3, #1
 8004322:	75fb      	strb	r3, [r7, #23]
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2b00      	cmp	r3, #0
 8004328:	d1e5      	bne.n	80042f6 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE10make_floatIiEEddT_+0x18>
 800432a:	e01f      	b.n	800436c <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE10make_floatIiEEddT_+0x8e>
      e = TExponent(-e);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	425b      	negs	r3, r3
 8004330:	607b      	str	r3, [r7, #4]
      for (uint8_t index = 0; e != 0; index++) {
 8004332:	2300      	movs	r3, #0
 8004334:	75bb      	strb	r3, [r7, #22]
 8004336:	e016      	b.n	8004366 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE10make_floatIiEEddT_+0x88>
        if (e & 1) m *= negativeBinaryPowerOfTen(index);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	f003 0301 	and.w	r3, r3, #1
 800433e:	2b00      	cmp	r3, #0
 8004340:	d00b      	beq.n	800435a <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE10make_floatIiEEddT_+0x7c>
 8004342:	7dbb      	ldrb	r3, [r7, #22]
 8004344:	4618      	mov	r0, r3
 8004346:	f000 f905 	bl	8004554 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi>
 800434a:	eeb0 6b40 	vmov.f64	d6, d0
 800434e:	ed97 7b02 	vldr	d7, [r7, #8]
 8004352:	ee27 7b06 	vmul.f64	d7, d7, d6
 8004356:	ed87 7b02 	vstr	d7, [r7, #8]
        e >>= 1;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	105b      	asrs	r3, r3, #1
 800435e:	607b      	str	r3, [r7, #4]
      for (uint8_t index = 0; e != 0; index++) {
 8004360:	7dbb      	ldrb	r3, [r7, #22]
 8004362:	3301      	adds	r3, #1
 8004364:	75bb      	strb	r3, [r7, #22]
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	2b00      	cmp	r3, #0
 800436a:	d1e5      	bne.n	8004338 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE10make_floatIiEEddT_+0x5a>
    return m;
 800436c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004370:	ec43 2b17 	vmov	d7, r2, r3
  }
 8004374:	eeb0 0b47 	vmov.f64	d0, d7
 8004378:	3718      	adds	r7, #24
 800437a:	46bd      	mov	sp, r7
 800437c:	bd80      	pop	{r7, pc}

0800437e <_ZN19ArduinoJson6101_11023canStorePositiveIntegerImyEENS_9enable_ifIXaasrNS_11is_integralIT_EE5valuelestS3_stT0_EbE4typeES5_>:
canStorePositiveInteger(TIn value) {
 800437e:	b5b0      	push	{r4, r5, r7, lr}
 8004380:	b082      	sub	sp, #8
 8004382:	af00      	add	r7, sp, #0
 8004384:	e9c7 0100 	strd	r0, r1, [r7]
  return value <= TIn(numeric_limits<TOut>::highest());
 8004388:	f000 f853 	bl	8004432 <_ZN19ArduinoJson6101_11014numeric_limitsImvE7highestEv>
 800438c:	4603      	mov	r3, r0
 800438e:	2200      	movs	r2, #0
 8004390:	461c      	mov	r4, r3
 8004392:	4615      	mov	r5, r2
 8004394:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004398:	4294      	cmp	r4, r2
 800439a:	eb75 0303 	sbcs.w	r3, r5, r3
 800439e:	bf2c      	ite	cs
 80043a0:	2301      	movcs	r3, #1
 80043a2:	2300      	movcc	r3, #0
 80043a4:	b2db      	uxtb	r3, r3
}
 80043a6:	4618      	mov	r0, r3
 80043a8:	3708      	adds	r7, #8
 80043aa:	46bd      	mov	sp, r7
 80043ac:	bdb0      	pop	{r4, r5, r7, pc}

080043ae <_ZN19ArduinoJson6101_11023canStoreNegativeIntegerImyEENS_9enable_ifIXaasrNS_11is_integralIT_EE5valuesrNS_11is_unsignedIS3_EE5valueEbE4typeET0_>:
canStoreNegativeInteger(TIn) {
 80043ae:	b480      	push	{r7}
 80043b0:	b083      	sub	sp, #12
 80043b2:	af00      	add	r7, sp, #0
 80043b4:	e9c7 0100 	strd	r0, r1, [r7]
  return false;
 80043b8:	2300      	movs	r3, #0
}
 80043ba:	4618      	mov	r0, r3
 80043bc:	370c      	adds	r7, #12
 80043be:	46bd      	mov	sp, r7
 80043c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c4:	4770      	bx	lr

080043c6 <_ZNK19ArduinoJson6101_11012ParsedNumberIdyE2asImEET_v>:
  T as() const {
 80043c6:	b580      	push	{r7, lr}
 80043c8:	b082      	sub	sp, #8
 80043ca:	af00      	add	r7, sp, #0
 80043cc:	6078      	str	r0, [r7, #4]
    switch (_type) {
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	7c1b      	ldrb	r3, [r3, #16]
 80043d2:	2b08      	cmp	r3, #8
 80043d4:	d017      	beq.n	8004406 <_ZNK19ArduinoJson6101_11012ParsedNumberIdyE2asImEET_v+0x40>
 80043d6:	2b08      	cmp	r3, #8
 80043d8:	dc1e      	bgt.n	8004418 <_ZNK19ArduinoJson6101_11012ParsedNumberIdyE2asImEET_v+0x52>
 80043da:	2b06      	cmp	r3, #6
 80043dc:	d00a      	beq.n	80043f4 <_ZNK19ArduinoJson6101_11012ParsedNumberIdyE2asImEET_v+0x2e>
 80043de:	2b07      	cmp	r3, #7
 80043e0:	d11a      	bne.n	8004418 <_ZNK19ArduinoJson6101_11012ParsedNumberIdyE2asImEET_v+0x52>
        return convertNegativeInteger<T>(uintValue);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043e8:	4610      	mov	r0, r2
 80043ea:	4619      	mov	r1, r3
 80043ec:	f7ff fe9a 	bl	8004124 <_ZN19ArduinoJson6101_11022convertNegativeIntegerImyEET_T0_>
 80043f0:	4603      	mov	r3, r0
 80043f2:	e012      	b.n	800441a <_ZNK19ArduinoJson6101_11012ParsedNumberIdyE2asImEET_v+0x54>
        return convertPositiveInteger<T>(uintValue);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043fa:	4610      	mov	r0, r2
 80043fc:	4619      	mov	r1, r3
 80043fe:	f7ff fe7e 	bl	80040fe <_ZN19ArduinoJson6101_11022convertPositiveIntegerImyEET_T0_>
 8004402:	4603      	mov	r3, r0
 8004404:	e009      	b.n	800441a <_ZNK19ArduinoJson6101_11012ParsedNumberIdyE2asImEET_v+0x54>
        return convertFloat<T>(floatValue);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	ed93 7b02 	vldr	d7, [r3, #8]
 800440c:	eeb0 0b47 	vmov.f64	d0, d7
 8004410:	f7ff feb0 	bl	8004174 <_ZN19ArduinoJson6101_11012convertFloatImdEENS_9enable_ifIXntsrNS_17is_floating_pointIT_EE5valueES3_E4typeET0_>
 8004414:	4603      	mov	r3, r0
 8004416:	e000      	b.n	800441a <_ZNK19ArduinoJson6101_11012ParsedNumberIdyE2asImEET_v+0x54>
        return 0;
 8004418:	2300      	movs	r3, #0
  }
 800441a:	4618      	mov	r0, r3
 800441c:	3708      	adds	r7, #8
 800441e:	46bd      	mov	sp, r7
 8004420:	bd80      	pop	{r7, pc}

08004422 <_ZN19ArduinoJson6101_11014numeric_limitsImvE6lowestEv>:
template <typename T, typename Enable = void>
struct numeric_limits;

template <typename T>
struct numeric_limits<T, typename enable_if<is_unsigned<T>::value>::type> {
  static T lowest() {
 8004422:	b480      	push	{r7}
 8004424:	af00      	add	r7, sp, #0
    return 0;
 8004426:	2300      	movs	r3, #0
  }
 8004428:	4618      	mov	r0, r3
 800442a:	46bd      	mov	sp, r7
 800442c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004430:	4770      	bx	lr

08004432 <_ZN19ArduinoJson6101_11014numeric_limitsImvE7highestEv>:
  static T highest() {
 8004432:	b480      	push	{r7}
 8004434:	af00      	add	r7, sp, #0
    return T(-1);
 8004436:	f04f 33ff 	mov.w	r3, #4294967295
  }
 800443a:	4618      	mov	r0, r3
 800443c:	46bd      	mov	sp, r7
 800443e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004442:	4770      	bx	lr

08004444 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE5forgeEmm>:
  }

  // constructs a double floating point values from its binary representation
  // we use this function to workaround platforms with single precision literals
  // (for example, when -fsingle-precision-constant is passed to GCC)
  static T forge(uint32_t msb, uint32_t lsb) {
 8004444:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004448:	b082      	sub	sp, #8
 800444a:	af00      	add	r7, sp, #0
 800444c:	6078      	str	r0, [r7, #4]
 800444e:	6039      	str	r1, [r7, #0]
    return alias_cast<T>((uint64_t(msb) << 32) | lsb);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2200      	movs	r2, #0
 8004454:	469a      	mov	sl, r3
 8004456:	4693      	mov	fp, r2
 8004458:	f04f 0200 	mov.w	r2, #0
 800445c:	f04f 0300 	mov.w	r3, #0
 8004460:	4653      	mov	r3, sl
 8004462:	2200      	movs	r2, #0
 8004464:	6839      	ldr	r1, [r7, #0]
 8004466:	2000      	movs	r0, #0
 8004468:	460c      	mov	r4, r1
 800446a:	4605      	mov	r5, r0
 800446c:	ea42 0804 	orr.w	r8, r2, r4
 8004470:	ea43 0905 	orr.w	r9, r3, r5
 8004474:	4640      	mov	r0, r8
 8004476:	4649      	mov	r1, r9
 8004478:	f000 f912 	bl	80046a0 <_ZN19ArduinoJson6101_11010alias_castIdyEET_T0_>
 800447c:	eeb0 7b40 	vmov.f64	d7, d0
  }
 8004480:	eeb0 0b47 	vmov.f64	d0, d7
 8004484:	3708      	adds	r7, #8
 8004486:	46bd      	mov	sp, r7
 8004488:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800448c <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24positiveBinaryPowerOfTenEi>:
  static T positiveBinaryPowerOfTen(int index) {
 800448c:	b580      	push	{r7, lr}
 800448e:	b082      	sub	sp, #8
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
    static T factors[] = {
 8004494:	4b25      	ldr	r3, [pc, #148]	@ (800452c <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24positiveBinaryPowerOfTenEi+0xa0>)
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f3bf 8f5b 	dmb	ish
 800449c:	f003 0301 	and.w	r3, r3, #1
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	bf0c      	ite	eq
 80044a4:	2301      	moveq	r3, #1
 80044a6:	2300      	movne	r3, #0
 80044a8:	b2db      	uxtb	r3, r3
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d031      	beq.n	8004512 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24positiveBinaryPowerOfTenEi+0x86>
 80044ae:	481f      	ldr	r0, [pc, #124]	@ (800452c <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24positiveBinaryPowerOfTenEi+0xa0>)
 80044b0:	f00e fd16 	bl	8012ee0 <__cxa_guard_acquire>
 80044b4:	4603      	mov	r3, r0
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	bf14      	ite	ne
 80044ba:	2301      	movne	r3, #1
 80044bc:	2300      	moveq	r3, #0
 80044be:	b2db      	uxtb	r3, r3
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d026      	beq.n	8004512 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24positiveBinaryPowerOfTenEi+0x86>
        forge(0x4693B8B5, 0xB5056E17),  // 1e32
 80044c4:	491a      	ldr	r1, [pc, #104]	@ (8004530 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24positiveBinaryPowerOfTenEi+0xa4>)
 80044c6:	481b      	ldr	r0, [pc, #108]	@ (8004534 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24positiveBinaryPowerOfTenEi+0xa8>)
 80044c8:	f7ff ffbc 	bl	8004444 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE5forgeEmm>
 80044cc:	eeb0 7b40 	vmov.f64	d7, d0
    static T factors[] = {
 80044d0:	4b19      	ldr	r3, [pc, #100]	@ (8004538 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24positiveBinaryPowerOfTenEi+0xac>)
 80044d2:	ed83 7b0a 	vstr	d7, [r3, #40]	@ 0x28
        forge(0x4D384F03, 0xE93FF9F5),  // 1e64
 80044d6:	4919      	ldr	r1, [pc, #100]	@ (800453c <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24positiveBinaryPowerOfTenEi+0xb0>)
 80044d8:	4819      	ldr	r0, [pc, #100]	@ (8004540 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24positiveBinaryPowerOfTenEi+0xb4>)
 80044da:	f7ff ffb3 	bl	8004444 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE5forgeEmm>
 80044de:	eeb0 7b40 	vmov.f64	d7, d0
    static T factors[] = {
 80044e2:	4b15      	ldr	r3, [pc, #84]	@ (8004538 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24positiveBinaryPowerOfTenEi+0xac>)
 80044e4:	ed83 7b0c 	vstr	d7, [r3, #48]	@ 0x30
        forge(0x5A827748, 0xF9301D32),  // 1e128
 80044e8:	4916      	ldr	r1, [pc, #88]	@ (8004544 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24positiveBinaryPowerOfTenEi+0xb8>)
 80044ea:	4817      	ldr	r0, [pc, #92]	@ (8004548 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24positiveBinaryPowerOfTenEi+0xbc>)
 80044ec:	f7ff ffaa 	bl	8004444 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE5forgeEmm>
 80044f0:	eeb0 7b40 	vmov.f64	d7, d0
    static T factors[] = {
 80044f4:	4b10      	ldr	r3, [pc, #64]	@ (8004538 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24positiveBinaryPowerOfTenEi+0xac>)
 80044f6:	ed83 7b0e 	vstr	d7, [r3, #56]	@ 0x38
        forge(0x75154FDD, 0x7F73BF3C)   // 1e256
 80044fa:	4914      	ldr	r1, [pc, #80]	@ (800454c <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24positiveBinaryPowerOfTenEi+0xc0>)
 80044fc:	4814      	ldr	r0, [pc, #80]	@ (8004550 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24positiveBinaryPowerOfTenEi+0xc4>)
 80044fe:	f7ff ffa1 	bl	8004444 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE5forgeEmm>
 8004502:	eeb0 7b40 	vmov.f64	d7, d0
    static T factors[] = {
 8004506:	4b0c      	ldr	r3, [pc, #48]	@ (8004538 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24positiveBinaryPowerOfTenEi+0xac>)
 8004508:	ed83 7b10 	vstr	d7, [r3, #64]	@ 0x40
 800450c:	4807      	ldr	r0, [pc, #28]	@ (800452c <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24positiveBinaryPowerOfTenEi+0xa0>)
 800450e:	f00e fcf3 	bl	8012ef8 <__cxa_guard_release>
    return factors[index];
 8004512:	4a09      	ldr	r2, [pc, #36]	@ (8004538 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24positiveBinaryPowerOfTenEi+0xac>)
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	00db      	lsls	r3, r3, #3
 8004518:	4413      	add	r3, r2
 800451a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800451e:	ec43 2b17 	vmov	d7, r2, r3
  }
 8004522:	eeb0 0b47 	vmov.f64	d0, d7
 8004526:	3708      	adds	r7, #8
 8004528:	46bd      	mov	sp, r7
 800452a:	bd80      	pop	{r7, pc}
 800452c:	2400068c 	.word	0x2400068c
 8004530:	b5056e17 	.word	0xb5056e17
 8004534:	4693b8b5 	.word	0x4693b8b5
 8004538:	24000010 	.word	0x24000010
 800453c:	e93ff9f5 	.word	0xe93ff9f5
 8004540:	4d384f03 	.word	0x4d384f03
 8004544:	f9301d32 	.word	0xf9301d32
 8004548:	5a827748 	.word	0x5a827748
 800454c:	7f73bf3c 	.word	0x7f73bf3c
 8004550:	75154fdd 	.word	0x75154fdd

08004554 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi>:
  static T negativeBinaryPowerOfTen(int index) {
 8004554:	b580      	push	{r7, lr}
 8004556:	b082      	sub	sp, #8
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]
    static T factors[] = {
 800455c:	4b3c      	ldr	r3, [pc, #240]	@ (8004650 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0xfc>)
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f3bf 8f5b 	dmb	ish
 8004564:	f003 0301 	and.w	r3, r3, #1
 8004568:	2b00      	cmp	r3, #0
 800456a:	bf0c      	ite	eq
 800456c:	2301      	moveq	r3, #1
 800456e:	2300      	movne	r3, #0
 8004570:	b2db      	uxtb	r3, r3
 8004572:	2b00      	cmp	r3, #0
 8004574:	d05e      	beq.n	8004634 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0xe0>
 8004576:	4836      	ldr	r0, [pc, #216]	@ (8004650 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0xfc>)
 8004578:	f00e fcb2 	bl	8012ee0 <__cxa_guard_acquire>
 800457c:	4603      	mov	r3, r0
 800457e:	2b00      	cmp	r3, #0
 8004580:	bf14      	ite	ne
 8004582:	2301      	movne	r3, #1
 8004584:	2300      	moveq	r3, #0
 8004586:	b2db      	uxtb	r3, r3
 8004588:	2b00      	cmp	r3, #0
 800458a:	d053      	beq.n	8004634 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0xe0>
        forge(0x3FB99999, 0x9999999A),  // 1e-1
 800458c:	4931      	ldr	r1, [pc, #196]	@ (8004654 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x100>)
 800458e:	4832      	ldr	r0, [pc, #200]	@ (8004658 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x104>)
 8004590:	f7ff ff58 	bl	8004444 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE5forgeEmm>
 8004594:	eeb0 7b40 	vmov.f64	d7, d0
    static T factors[] = {
 8004598:	4b30      	ldr	r3, [pc, #192]	@ (800465c <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x108>)
 800459a:	ed83 7b00 	vstr	d7, [r3]
        forge(0x3F847AE1, 0x47AE147B),  // 1e-2
 800459e:	4930      	ldr	r1, [pc, #192]	@ (8004660 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x10c>)
 80045a0:	4830      	ldr	r0, [pc, #192]	@ (8004664 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x110>)
 80045a2:	f7ff ff4f 	bl	8004444 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE5forgeEmm>
 80045a6:	eeb0 7b40 	vmov.f64	d7, d0
    static T factors[] = {
 80045aa:	4b2c      	ldr	r3, [pc, #176]	@ (800465c <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x108>)
 80045ac:	ed83 7b02 	vstr	d7, [r3, #8]
        forge(0x3F1A36E2, 0xEB1C432D),  // 1e-4
 80045b0:	492d      	ldr	r1, [pc, #180]	@ (8004668 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x114>)
 80045b2:	482e      	ldr	r0, [pc, #184]	@ (800466c <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x118>)
 80045b4:	f7ff ff46 	bl	8004444 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE5forgeEmm>
 80045b8:	eeb0 7b40 	vmov.f64	d7, d0
    static T factors[] = {
 80045bc:	4b27      	ldr	r3, [pc, #156]	@ (800465c <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x108>)
 80045be:	ed83 7b04 	vstr	d7, [r3, #16]
        forge(0x3E45798E, 0xE2308C3A),  // 1e-8
 80045c2:	492b      	ldr	r1, [pc, #172]	@ (8004670 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x11c>)
 80045c4:	482b      	ldr	r0, [pc, #172]	@ (8004674 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x120>)
 80045c6:	f7ff ff3d 	bl	8004444 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE5forgeEmm>
 80045ca:	eeb0 7b40 	vmov.f64	d7, d0
    static T factors[] = {
 80045ce:	4b23      	ldr	r3, [pc, #140]	@ (800465c <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x108>)
 80045d0:	ed83 7b06 	vstr	d7, [r3, #24]
        forge(0x3C9CD2B2, 0x97D889BC),  // 1e-16
 80045d4:	4928      	ldr	r1, [pc, #160]	@ (8004678 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x124>)
 80045d6:	4829      	ldr	r0, [pc, #164]	@ (800467c <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x128>)
 80045d8:	f7ff ff34 	bl	8004444 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE5forgeEmm>
 80045dc:	eeb0 7b40 	vmov.f64	d7, d0
    static T factors[] = {
 80045e0:	4b1e      	ldr	r3, [pc, #120]	@ (800465c <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x108>)
 80045e2:	ed83 7b08 	vstr	d7, [r3, #32]
        forge(0x3949F623, 0xD5A8A733),  // 1e-32
 80045e6:	4926      	ldr	r1, [pc, #152]	@ (8004680 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x12c>)
 80045e8:	4826      	ldr	r0, [pc, #152]	@ (8004684 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x130>)
 80045ea:	f7ff ff2b 	bl	8004444 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE5forgeEmm>
 80045ee:	eeb0 7b40 	vmov.f64	d7, d0
    static T factors[] = {
 80045f2:	4b1a      	ldr	r3, [pc, #104]	@ (800465c <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x108>)
 80045f4:	ed83 7b0a 	vstr	d7, [r3, #40]	@ 0x28
        forge(0x32A50FFD, 0x44F4A73D),  // 1e-64
 80045f8:	4923      	ldr	r1, [pc, #140]	@ (8004688 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x134>)
 80045fa:	4824      	ldr	r0, [pc, #144]	@ (800468c <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x138>)
 80045fc:	f7ff ff22 	bl	8004444 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE5forgeEmm>
 8004600:	eeb0 7b40 	vmov.f64	d7, d0
    static T factors[] = {
 8004604:	4b15      	ldr	r3, [pc, #84]	@ (800465c <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x108>)
 8004606:	ed83 7b0c 	vstr	d7, [r3, #48]	@ 0x30
        forge(0x255BBA08, 0xCF8C979D),  // 1e-128
 800460a:	4921      	ldr	r1, [pc, #132]	@ (8004690 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x13c>)
 800460c:	4821      	ldr	r0, [pc, #132]	@ (8004694 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x140>)
 800460e:	f7ff ff19 	bl	8004444 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE5forgeEmm>
 8004612:	eeb0 7b40 	vmov.f64	d7, d0
    static T factors[] = {
 8004616:	4b11      	ldr	r3, [pc, #68]	@ (800465c <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x108>)
 8004618:	ed83 7b0e 	vstr	d7, [r3, #56]	@ 0x38
        forge(0x0AC80628, 0x64AC6F43)   // 1e-256
 800461c:	491e      	ldr	r1, [pc, #120]	@ (8004698 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x144>)
 800461e:	481f      	ldr	r0, [pc, #124]	@ (800469c <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x148>)
 8004620:	f7ff ff10 	bl	8004444 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE5forgeEmm>
 8004624:	eeb0 7b40 	vmov.f64	d7, d0
    static T factors[] = {
 8004628:	4b0c      	ldr	r3, [pc, #48]	@ (800465c <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x108>)
 800462a:	ed83 7b10 	vstr	d7, [r3, #64]	@ 0x40
 800462e:	4808      	ldr	r0, [pc, #32]	@ (8004650 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0xfc>)
 8004630:	f00e fc62 	bl	8012ef8 <__cxa_guard_release>
    return factors[index];
 8004634:	4a09      	ldr	r2, [pc, #36]	@ (800465c <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x108>)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	00db      	lsls	r3, r3, #3
 800463a:	4413      	add	r3, r2
 800463c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004640:	ec43 2b17 	vmov	d7, r2, r3
  }
 8004644:	eeb0 0b47 	vmov.f64	d0, d7
 8004648:	3708      	adds	r7, #8
 800464a:	46bd      	mov	sp, r7
 800464c:	bd80      	pop	{r7, pc}
 800464e:	bf00      	nop
 8004650:	240006d8 	.word	0x240006d8
 8004654:	9999999a 	.word	0x9999999a
 8004658:	3fb99999 	.word	0x3fb99999
 800465c:	24000690 	.word	0x24000690
 8004660:	47ae147b 	.word	0x47ae147b
 8004664:	3f847ae1 	.word	0x3f847ae1
 8004668:	eb1c432d 	.word	0xeb1c432d
 800466c:	3f1a36e2 	.word	0x3f1a36e2
 8004670:	e2308c3a 	.word	0xe2308c3a
 8004674:	3e45798e 	.word	0x3e45798e
 8004678:	97d889bc 	.word	0x97d889bc
 800467c:	3c9cd2b2 	.word	0x3c9cd2b2
 8004680:	d5a8a733 	.word	0xd5a8a733
 8004684:	3949f623 	.word	0x3949f623
 8004688:	44f4a73d 	.word	0x44f4a73d
 800468c:	32a50ffd 	.word	0x32a50ffd
 8004690:	cf8c979d 	.word	0xcf8c979d
 8004694:	255bba08 	.word	0x255bba08
 8004698:	64ac6f43 	.word	0x64ac6f43
 800469c:	0ac80628 	.word	0x0ac80628

080046a0 <_ZN19ArduinoJson6101_11010alias_castIdyEET_T0_>:
    T data;
  };
};

template <typename T, typename F>
T alias_cast(F raw_data) {
 80046a0:	b480      	push	{r7}
 80046a2:	b085      	sub	sp, #20
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	e9c7 0100 	strd	r0, r1, [r7]
  alias_cast_t<T, F> ac;
  ac.raw = raw_data;
 80046aa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80046ae:	e9c7 2302 	strd	r2, r3, [r7, #8]
  return ac.data;
 80046b2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80046b6:	ec43 2b17 	vmov	d7, r2, r3
}
 80046ba:	eeb0 0b47 	vmov.f64	d0, d7
 80046be:	3714      	adds	r7, #20
 80046c0:	46bd      	mov	sp, r7
 80046c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c6:	4770      	bx	lr

080046c8 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 80046c8:	b590      	push	{r4, r7, lr}
 80046ca:	b083      	sub	sp, #12
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
 80046d0:	6039      	str	r1, [r7, #0]
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	2b01      	cmp	r3, #1
 80046d6:	d12e      	bne.n	8004736 <_Z41__static_initialization_and_destruction_0ii+0x6e>
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80046de:	4293      	cmp	r3, r2
 80046e0:	d129      	bne.n	8004736 <_Z41__static_initialization_and_destruction_0ii+0x6e>
std::string strJson;
 80046e2:	481e      	ldr	r0, [pc, #120]	@ (800475c <_Z41__static_initialization_and_destruction_0ii+0x94>)
 80046e4:	f00e fcc4 	bl	8013070 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
DynamicJsonDocument doc(JSON_BUFF_SIZE);
 80046e8:	4622      	mov	r2, r4
 80046ea:	f242 7110 	movw	r1, #10000	@ 0x2710
 80046ee:	481c      	ldr	r0, [pc, #112]	@ (8004760 <_Z41__static_initialization_and_destruction_0ii+0x98>)
 80046f0:	f7fe f946 	bl	8002980 <_ZN19ArduinoJson6101_11017BasicJsonDocumentINS_16DefaultAllocatorEEC1EjS1_>
  FORCE_INLINE ObjectRef() : base_type(0), _pool(0) {}
 80046f4:	4b1b      	ldr	r3, [pc, #108]	@ (8004764 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 80046f6:	2100      	movs	r1, #0
 80046f8:	4618      	mov	r0, r3
 80046fa:	f7fe f91b 	bl	8002934 <_ZN19ArduinoJson6101_11013ObjectRefBaseINS_14CollectionDataEEC1EPS1_>
 80046fe:	4b19      	ldr	r3, [pc, #100]	@ (8004764 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 8004700:	2200      	movs	r2, #0
 8004702:	605a      	str	r2, [r3, #4]
 8004704:	4b18      	ldr	r3, [pc, #96]	@ (8004768 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 8004706:	2100      	movs	r1, #0
 8004708:	4618      	mov	r0, r3
 800470a:	f7fe f913 	bl	8002934 <_ZN19ArduinoJson6101_11013ObjectRefBaseINS_14CollectionDataEEC1EPS1_>
 800470e:	4b16      	ldr	r3, [pc, #88]	@ (8004768 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 8004710:	2200      	movs	r2, #0
 8004712:	605a      	str	r2, [r3, #4]
RemoraComms* comms = new RemoraComms(ptrRxData, ptrTxData, SPI1);
 8004714:	2120      	movs	r1, #32
 8004716:	f44f 7008 	mov.w	r0, #544	@ 0x220
 800471a:	f00e fc01 	bl	8012f20 <_ZnwjSt11align_val_t>
 800471e:	4603      	mov	r3, r0
 8004720:	461c      	mov	r4, r3
 8004722:	4b12      	ldr	r3, [pc, #72]	@ (800476c <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 8004724:	6819      	ldr	r1, [r3, #0]
 8004726:	4b12      	ldr	r3, [pc, #72]	@ (8004770 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 8004728:	681a      	ldr	r2, [r3, #0]
 800472a:	4b12      	ldr	r3, [pc, #72]	@ (8004774 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 800472c:	4620      	mov	r0, r4
 800472e:	f000 fc27 	bl	8004f80 <_ZN11RemoraCommsC1EPV8rxData_tPV8txData_tP11SPI_TypeDef>
 8004732:	4b11      	ldr	r3, [pc, #68]	@ (8004778 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 8004734:	601c      	str	r4, [r3, #0]
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	2b00      	cmp	r3, #0
 800473a:	d10a      	bne.n	8004752 <_Z41__static_initialization_and_destruction_0ii+0x8a>
 800473c:	683b      	ldr	r3, [r7, #0]
 800473e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004742:	4293      	cmp	r3, r2
 8004744:	d105      	bne.n	8004752 <_Z41__static_initialization_and_destruction_0ii+0x8a>
DynamicJsonDocument doc(JSON_BUFF_SIZE);
 8004746:	4806      	ldr	r0, [pc, #24]	@ (8004760 <_Z41__static_initialization_and_destruction_0ii+0x98>)
 8004748:	f000 f818 	bl	800477c <_ZN19ArduinoJson6101_11017BasicJsonDocumentINS_16DefaultAllocatorEED1Ev>
std::string strJson;
 800474c:	4803      	ldr	r0, [pc, #12]	@ (800475c <_Z41__static_initialization_and_destruction_0ii+0x94>)
 800474e:	f00e fc96 	bl	801307e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
}
 8004752:	bf00      	nop
 8004754:	370c      	adds	r7, #12
 8004756:	46bd      	mov	sp, r7
 8004758:	bd90      	pop	{r4, r7, pc}
 800475a:	bf00      	nop
 800475c:	24000524 	.word	0x24000524
 8004760:	24000540 	.word	0x24000540
 8004764:	24000568 	.word	0x24000568
 8004768:	24000570 	.word	0x24000570
 800476c:	24000008 	.word	0x24000008
 8004770:	2400000c 	.word	0x2400000c
 8004774:	40013000 	.word	0x40013000
 8004778:	24000578 	.word	0x24000578

0800477c <_ZN19ArduinoJson6101_11017BasicJsonDocumentINS_16DefaultAllocatorEED1Ev>:
  ~BasicJsonDocument() {
 800477c:	b580      	push	{r7, lr}
 800477e:	b082      	sub	sp, #8
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]
    freePool();
 8004784:	6878      	ldr	r0, [r7, #4]
 8004786:	f000 f805 	bl	8004794 <_ZN19ArduinoJson6101_11017BasicJsonDocumentINS_16DefaultAllocatorEE8freePoolEv>
  }
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	4618      	mov	r0, r3
 800478e:	3708      	adds	r7, #8
 8004790:	46bd      	mov	sp, r7
 8004792:	bd80      	pop	{r7, pc}

08004794 <_ZN19ArduinoJson6101_11017BasicJsonDocumentINS_16DefaultAllocatorEE8freePoolEv>:
    if (requiredSize <= capacity()) return;
    freePool();
    replacePool(allocPool(addPadding(requiredSize)));
  }

  void freePool() {
 8004794:	b590      	push	{r4, r7, lr}
 8004796:	b083      	sub	sp, #12
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
    this->deallocate(memoryPool().buffer());
 800479c:	687c      	ldr	r4, [r7, #4]
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	3308      	adds	r3, #8
 80047a2:	4618      	mov	r0, r3
 80047a4:	f7fc fe66 	bl	8001474 <_ZN19ArduinoJson6101_11012JsonDocument10memoryPoolEv>
 80047a8:	4603      	mov	r3, r0
 80047aa:	4618      	mov	r0, r3
 80047ac:	f7fc fbdb 	bl	8000f66 <_ZN19ArduinoJson6101_11010MemoryPool6bufferEv>
 80047b0:	4603      	mov	r3, r0
 80047b2:	4619      	mov	r1, r3
 80047b4:	4620      	mov	r0, r4
 80047b6:	f000 f804 	bl	80047c2 <_ZN19ArduinoJson6101_11014AllocatorOwnerINS_16DefaultAllocatorEE10deallocateEPv>
  }
 80047ba:	bf00      	nop
 80047bc:	370c      	adds	r7, #12
 80047be:	46bd      	mov	sp, r7
 80047c0:	bd90      	pop	{r4, r7, pc}

080047c2 <_ZN19ArduinoJson6101_11014AllocatorOwnerINS_16DefaultAllocatorEE10deallocateEPv>:
  void deallocate(void* p) {
 80047c2:	b580      	push	{r7, lr}
 80047c4:	b082      	sub	sp, #8
 80047c6:	af00      	add	r7, sp, #0
 80047c8:	6078      	str	r0, [r7, #4]
 80047ca:	6039      	str	r1, [r7, #0]
    _allocator.deallocate(p);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	6839      	ldr	r1, [r7, #0]
 80047d0:	4618      	mov	r0, r3
 80047d2:	f7fc fe90 	bl	80014f6 <_ZN19ArduinoJson6101_11016DefaultAllocator10deallocateEPv>
  }
 80047d6:	bf00      	nop
 80047d8:	3708      	adds	r7, #8
 80047da:	46bd      	mov	sp, r7
 80047dc:	bd80      	pop	{r7, pc}

080047de <_GLOBAL__sub_I_EXTI4_IRQHandler>:
 80047de:	b580      	push	{r7, lr}
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80047e6:	2001      	movs	r0, #1
 80047e8:	f7ff ff6e 	bl	80046c8 <_Z41__static_initialization_and_destruction_0ii>
 80047ec:	bd80      	pop	{r7, pc}

080047ee <_GLOBAL__sub_D_EXTI4_IRQHandler>:
 80047ee:	b580      	push	{r7, lr}
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80047f6:	2000      	movs	r0, #0
 80047f8:	f7ff ff66 	bl	80046c8 <_Z41__static_initialization_and_destruction_0ii>
 80047fc:	bd80      	pop	{r7, pc}
	...

08004800 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004800:	b480      	push	{r7}
 8004802:	b083      	sub	sp, #12
 8004804:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004806:	4b0a      	ldr	r3, [pc, #40]	@ (8004830 <HAL_MspInit+0x30>)
 8004808:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800480c:	4a08      	ldr	r2, [pc, #32]	@ (8004830 <HAL_MspInit+0x30>)
 800480e:	f043 0302 	orr.w	r3, r3, #2
 8004812:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8004816:	4b06      	ldr	r3, [pc, #24]	@ (8004830 <HAL_MspInit+0x30>)
 8004818:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800481c:	f003 0302 	and.w	r3, r3, #2
 8004820:	607b      	str	r3, [r7, #4]
 8004822:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004824:	bf00      	nop
 8004826:	370c      	adds	r7, #12
 8004828:	46bd      	mov	sp, r7
 800482a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482e:	4770      	bx	lr
 8004830:	58024400 	.word	0x58024400

08004834 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8004834:	b580      	push	{r7, lr}
 8004836:	b0bc      	sub	sp, #240	@ 0xf0
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800483c:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8004840:	2200      	movs	r2, #0
 8004842:	601a      	str	r2, [r3, #0]
 8004844:	605a      	str	r2, [r3, #4]
 8004846:	609a      	str	r2, [r3, #8]
 8004848:	60da      	str	r2, [r3, #12]
 800484a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800484c:	f107 0318 	add.w	r3, r7, #24
 8004850:	22c0      	movs	r2, #192	@ 0xc0
 8004852:	2100      	movs	r1, #0
 8004854:	4618      	mov	r0, r3
 8004856:	f00f f86f 	bl	8013938 <memset>
  if(hsd->Instance==SDMMC1)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	4a3c      	ldr	r2, [pc, #240]	@ (8004950 <HAL_SD_MspInit+0x11c>)
 8004860:	4293      	cmp	r3, r2
 8004862:	d171      	bne.n	8004948 <HAL_SD_MspInit+0x114>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 8004864:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8004868:	f04f 0300 	mov.w	r3, #0
 800486c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 8004870:	2300      	movs	r3, #0
 8004872:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004874:	f107 0318 	add.w	r3, r7, #24
 8004878:	4618      	mov	r0, r3
 800487a:	f005 fa77 	bl	8009d6c <HAL_RCCEx_PeriphCLKConfig>
 800487e:	4603      	mov	r3, r0
 8004880:	2b00      	cmp	r3, #0
 8004882:	d001      	beq.n	8004888 <HAL_SD_MspInit+0x54>
    {
      Error_Handler();
 8004884:	f7fd ffe4 	bl	8002850 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8004888:	4b32      	ldr	r3, [pc, #200]	@ (8004954 <HAL_SD_MspInit+0x120>)
 800488a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800488e:	4a31      	ldr	r2, [pc, #196]	@ (8004954 <HAL_SD_MspInit+0x120>)
 8004890:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004894:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 8004898:	4b2e      	ldr	r3, [pc, #184]	@ (8004954 <HAL_SD_MspInit+0x120>)
 800489a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800489e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80048a2:	617b      	str	r3, [r7, #20]
 80048a4:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80048a6:	4b2b      	ldr	r3, [pc, #172]	@ (8004954 <HAL_SD_MspInit+0x120>)
 80048a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80048ac:	4a29      	ldr	r2, [pc, #164]	@ (8004954 <HAL_SD_MspInit+0x120>)
 80048ae:	f043 0304 	orr.w	r3, r3, #4
 80048b2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80048b6:	4b27      	ldr	r3, [pc, #156]	@ (8004954 <HAL_SD_MspInit+0x120>)
 80048b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80048bc:	f003 0304 	and.w	r3, r3, #4
 80048c0:	613b      	str	r3, [r7, #16]
 80048c2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80048c4:	4b23      	ldr	r3, [pc, #140]	@ (8004954 <HAL_SD_MspInit+0x120>)
 80048c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80048ca:	4a22      	ldr	r2, [pc, #136]	@ (8004954 <HAL_SD_MspInit+0x120>)
 80048cc:	f043 0308 	orr.w	r3, r3, #8
 80048d0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80048d4:	4b1f      	ldr	r3, [pc, #124]	@ (8004954 <HAL_SD_MspInit+0x120>)
 80048d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80048da:	f003 0308 	and.w	r3, r3, #8
 80048de:	60fb      	str	r3, [r7, #12]
 80048e0:	68fb      	ldr	r3, [r7, #12]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80048e2:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 80048e6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80048ea:	2302      	movs	r3, #2
 80048ec:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048f0:	2300      	movs	r3, #0
 80048f2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80048f6:	2303      	movs	r3, #3
 80048f8:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 80048fc:	230c      	movs	r3, #12
 80048fe:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004902:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8004906:	4619      	mov	r1, r3
 8004908:	4813      	ldr	r0, [pc, #76]	@ (8004958 <HAL_SD_MspInit+0x124>)
 800490a:	f004 f845 	bl	8008998 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800490e:	2304      	movs	r3, #4
 8004910:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004914:	2302      	movs	r3, #2
 8004916:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800491a:	2300      	movs	r3, #0
 800491c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004920:	2303      	movs	r3, #3
 8004922:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8004926:	230c      	movs	r3, #12
 8004928:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800492c:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8004930:	4619      	mov	r1, r3
 8004932:	480a      	ldr	r0, [pc, #40]	@ (800495c <HAL_SD_MspInit+0x128>)
 8004934:	f004 f830 	bl	8008998 <HAL_GPIO_Init>

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 0, 0);
 8004938:	2200      	movs	r2, #0
 800493a:	2100      	movs	r1, #0
 800493c:	2031      	movs	r0, #49	@ 0x31
 800493e:	f001 fb78 	bl	8006032 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 8004942:	2031      	movs	r0, #49	@ 0x31
 8004944:	f001 fb8f 	bl	8006066 <HAL_NVIC_EnableIRQ>

  /* USER CODE END SDMMC1_MspInit 1 */

  }

}
 8004948:	bf00      	nop
 800494a:	37f0      	adds	r7, #240	@ 0xf0
 800494c:	46bd      	mov	sp, r7
 800494e:	bd80      	pop	{r7, pc}
 8004950:	52007000 	.word	0x52007000
 8004954:	58024400 	.word	0x58024400
 8004958:	58020800 	.word	0x58020800
 800495c:	58020c00 	.word	0x58020c00

08004960 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004960:	b580      	push	{r7, lr}
 8004962:	b0ba      	sub	sp, #232	@ 0xe8
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004968:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800496c:	2200      	movs	r2, #0
 800496e:	601a      	str	r2, [r3, #0]
 8004970:	605a      	str	r2, [r3, #4]
 8004972:	609a      	str	r2, [r3, #8]
 8004974:	60da      	str	r2, [r3, #12]
 8004976:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004978:	f107 0310 	add.w	r3, r7, #16
 800497c:	22c0      	movs	r2, #192	@ 0xc0
 800497e:	2100      	movs	r1, #0
 8004980:	4618      	mov	r0, r3
 8004982:	f00e ffd9 	bl	8013938 <memset>
  if(huart->Instance==USART1)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	4a27      	ldr	r2, [pc, #156]	@ (8004a28 <HAL_UART_MspInit+0xc8>)
 800498c:	4293      	cmp	r3, r2
 800498e:	d146      	bne.n	8004a1e <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8004990:	f04f 0201 	mov.w	r2, #1
 8004994:	f04f 0300 	mov.w	r3, #0
 8004998:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 800499c:	2300      	movs	r3, #0
 800499e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80049a2:	f107 0310 	add.w	r3, r7, #16
 80049a6:	4618      	mov	r0, r3
 80049a8:	f005 f9e0 	bl	8009d6c <HAL_RCCEx_PeriphCLKConfig>
 80049ac:	4603      	mov	r3, r0
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d001      	beq.n	80049b6 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80049b2:	f7fd ff4d 	bl	8002850 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80049b6:	4b1d      	ldr	r3, [pc, #116]	@ (8004a2c <HAL_UART_MspInit+0xcc>)
 80049b8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80049bc:	4a1b      	ldr	r2, [pc, #108]	@ (8004a2c <HAL_UART_MspInit+0xcc>)
 80049be:	f043 0310 	orr.w	r3, r3, #16
 80049c2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80049c6:	4b19      	ldr	r3, [pc, #100]	@ (8004a2c <HAL_UART_MspInit+0xcc>)
 80049c8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80049cc:	f003 0310 	and.w	r3, r3, #16
 80049d0:	60fb      	str	r3, [r7, #12]
 80049d2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80049d4:	4b15      	ldr	r3, [pc, #84]	@ (8004a2c <HAL_UART_MspInit+0xcc>)
 80049d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80049da:	4a14      	ldr	r2, [pc, #80]	@ (8004a2c <HAL_UART_MspInit+0xcc>)
 80049dc:	f043 0301 	orr.w	r3, r3, #1
 80049e0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80049e4:	4b11      	ldr	r3, [pc, #68]	@ (8004a2c <HAL_UART_MspInit+0xcc>)
 80049e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80049ea:	f003 0301 	and.w	r3, r3, #1
 80049ee:	60bb      	str	r3, [r7, #8]
 80049f0:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80049f2:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80049f6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80049fa:	2302      	movs	r3, #2
 80049fc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a00:	2300      	movs	r3, #0
 8004a02:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004a06:	2300      	movs	r3, #0
 8004a08:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004a0c:	2307      	movs	r3, #7
 8004a0e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004a12:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8004a16:	4619      	mov	r1, r3
 8004a18:	4805      	ldr	r0, [pc, #20]	@ (8004a30 <HAL_UART_MspInit+0xd0>)
 8004a1a:	f003 ffbd 	bl	8008998 <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8004a1e:	bf00      	nop
 8004a20:	37e8      	adds	r7, #232	@ 0xe8
 8004a22:	46bd      	mov	sp, r7
 8004a24:	bd80      	pop	{r7, pc}
 8004a26:	bf00      	nop
 8004a28:	40011000 	.word	0x40011000
 8004a2c:	58024400 	.word	0x58024400
 8004a30:	58020000 	.word	0x58020000

08004a34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004a34:	b480      	push	{r7}
 8004a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004a38:	bf00      	nop
 8004a3a:	e7fd      	b.n	8004a38 <NMI_Handler+0x4>

08004a3c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004a3c:	b480      	push	{r7}
 8004a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004a40:	bf00      	nop
 8004a42:	e7fd      	b.n	8004a40 <HardFault_Handler+0x4>

08004a44 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004a44:	b480      	push	{r7}
 8004a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004a48:	bf00      	nop
 8004a4a:	e7fd      	b.n	8004a48 <MemManage_Handler+0x4>

08004a4c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004a4c:	b480      	push	{r7}
 8004a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004a50:	bf00      	nop
 8004a52:	e7fd      	b.n	8004a50 <BusFault_Handler+0x4>

08004a54 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004a54:	b480      	push	{r7}
 8004a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004a58:	bf00      	nop
 8004a5a:	e7fd      	b.n	8004a58 <UsageFault_Handler+0x4>

08004a5c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004a5c:	b480      	push	{r7}
 8004a5e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004a60:	bf00      	nop
 8004a62:	46bd      	mov	sp, r7
 8004a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a68:	4770      	bx	lr

08004a6a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004a6a:	b480      	push	{r7}
 8004a6c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004a6e:	bf00      	nop
 8004a70:	46bd      	mov	sp, r7
 8004a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a76:	4770      	bx	lr

08004a78 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004a78:	b480      	push	{r7}
 8004a7a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004a7c:	bf00      	nop
 8004a7e:	46bd      	mov	sp, r7
 8004a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a84:	4770      	bx	lr

08004a86 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004a86:	b580      	push	{r7, lr}
 8004a88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004a8a:	f001 f991 	bl	8005db0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004a8e:	bf00      	nop
 8004a90:	bd80      	pop	{r7, pc}
	...

08004a94 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 8004a94:	b580      	push	{r7, lr}
 8004a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 8004a98:	4802      	ldr	r0, [pc, #8]	@ (8004aa4 <SDMMC1_IRQHandler+0x10>)
 8004a9a:	f008 f8d5 	bl	800cc48 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 8004a9e:	bf00      	nop
 8004aa0:	bd80      	pop	{r7, pc}
 8004aa2:	bf00      	nop
 8004aa4:	2400057c 	.word	0x2400057c

08004aa8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004aa8:	b480      	push	{r7}
 8004aaa:	af00      	add	r7, sp, #0
	return 1;
 8004aac:	2301      	movs	r3, #1
}
 8004aae:	4618      	mov	r0, r3
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab6:	4770      	bx	lr

08004ab8 <_kill>:

int _kill(int pid, int sig)
{
 8004ab8:	b580      	push	{r7, lr}
 8004aba:	b082      	sub	sp, #8
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	6078      	str	r0, [r7, #4]
 8004ac0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8004ac2:	f00e ffdb 	bl	8013a7c <__errno>
 8004ac6:	4603      	mov	r3, r0
 8004ac8:	2216      	movs	r2, #22
 8004aca:	601a      	str	r2, [r3, #0]
	return -1;
 8004acc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004ad0:	4618      	mov	r0, r3
 8004ad2:	3708      	adds	r7, #8
 8004ad4:	46bd      	mov	sp, r7
 8004ad6:	bd80      	pop	{r7, pc}

08004ad8 <_exit>:

void _exit (int status)
{
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	b082      	sub	sp, #8
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8004ae0:	f04f 31ff 	mov.w	r1, #4294967295
 8004ae4:	6878      	ldr	r0, [r7, #4]
 8004ae6:	f7ff ffe7 	bl	8004ab8 <_kill>
	while (1) {}		/* Make sure we hang here */
 8004aea:	bf00      	nop
 8004aec:	e7fd      	b.n	8004aea <_exit+0x12>

08004aee <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004aee:	b580      	push	{r7, lr}
 8004af0:	b086      	sub	sp, #24
 8004af2:	af00      	add	r7, sp, #0
 8004af4:	60f8      	str	r0, [r7, #12]
 8004af6:	60b9      	str	r1, [r7, #8]
 8004af8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004afa:	2300      	movs	r3, #0
 8004afc:	617b      	str	r3, [r7, #20]
 8004afe:	e00a      	b.n	8004b16 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8004b00:	f3af 8000 	nop.w
 8004b04:	4601      	mov	r1, r0
 8004b06:	68bb      	ldr	r3, [r7, #8]
 8004b08:	1c5a      	adds	r2, r3, #1
 8004b0a:	60ba      	str	r2, [r7, #8]
 8004b0c:	b2ca      	uxtb	r2, r1
 8004b0e:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004b10:	697b      	ldr	r3, [r7, #20]
 8004b12:	3301      	adds	r3, #1
 8004b14:	617b      	str	r3, [r7, #20]
 8004b16:	697a      	ldr	r2, [r7, #20]
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	429a      	cmp	r2, r3
 8004b1c:	dbf0      	blt.n	8004b00 <_read+0x12>
	}

return len;
 8004b1e:	687b      	ldr	r3, [r7, #4]
}
 8004b20:	4618      	mov	r0, r3
 8004b22:	3718      	adds	r7, #24
 8004b24:	46bd      	mov	sp, r7
 8004b26:	bd80      	pop	{r7, pc}

08004b28 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004b28:	b580      	push	{r7, lr}
 8004b2a:	b086      	sub	sp, #24
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	60f8      	str	r0, [r7, #12]
 8004b30:	60b9      	str	r1, [r7, #8]
 8004b32:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004b34:	2300      	movs	r3, #0
 8004b36:	617b      	str	r3, [r7, #20]
 8004b38:	e009      	b.n	8004b4e <_write+0x26>
	{
		__io_putchar(*ptr++);
 8004b3a:	68bb      	ldr	r3, [r7, #8]
 8004b3c:	1c5a      	adds	r2, r3, #1
 8004b3e:	60ba      	str	r2, [r7, #8]
 8004b40:	781b      	ldrb	r3, [r3, #0]
 8004b42:	4618      	mov	r0, r3
 8004b44:	f7fc ff84 	bl	8001a50 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004b48:	697b      	ldr	r3, [r7, #20]
 8004b4a:	3301      	adds	r3, #1
 8004b4c:	617b      	str	r3, [r7, #20]
 8004b4e:	697a      	ldr	r2, [r7, #20]
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	429a      	cmp	r2, r3
 8004b54:	dbf1      	blt.n	8004b3a <_write+0x12>
	}
	return len;
 8004b56:	687b      	ldr	r3, [r7, #4]
}
 8004b58:	4618      	mov	r0, r3
 8004b5a:	3718      	adds	r7, #24
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	bd80      	pop	{r7, pc}

08004b60 <_close>:

int _close(int file)
{
 8004b60:	b480      	push	{r7}
 8004b62:	b083      	sub	sp, #12
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	6078      	str	r0, [r7, #4]
	return -1;
 8004b68:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	370c      	adds	r7, #12
 8004b70:	46bd      	mov	sp, r7
 8004b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b76:	4770      	bx	lr

08004b78 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004b78:	b480      	push	{r7}
 8004b7a:	b083      	sub	sp, #12
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	6078      	str	r0, [r7, #4]
 8004b80:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8004b82:	683b      	ldr	r3, [r7, #0]
 8004b84:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004b88:	605a      	str	r2, [r3, #4]
	return 0;
 8004b8a:	2300      	movs	r3, #0
}
 8004b8c:	4618      	mov	r0, r3
 8004b8e:	370c      	adds	r7, #12
 8004b90:	46bd      	mov	sp, r7
 8004b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b96:	4770      	bx	lr

08004b98 <_isatty>:

int _isatty(int file)
{
 8004b98:	b480      	push	{r7}
 8004b9a:	b083      	sub	sp, #12
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	6078      	str	r0, [r7, #4]
	return 1;
 8004ba0:	2301      	movs	r3, #1
}
 8004ba2:	4618      	mov	r0, r3
 8004ba4:	370c      	adds	r7, #12
 8004ba6:	46bd      	mov	sp, r7
 8004ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bac:	4770      	bx	lr

08004bae <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004bae:	b480      	push	{r7}
 8004bb0:	b085      	sub	sp, #20
 8004bb2:	af00      	add	r7, sp, #0
 8004bb4:	60f8      	str	r0, [r7, #12]
 8004bb6:	60b9      	str	r1, [r7, #8]
 8004bb8:	607a      	str	r2, [r7, #4]
	return 0;
 8004bba:	2300      	movs	r3, #0
}
 8004bbc:	4618      	mov	r0, r3
 8004bbe:	3714      	adds	r7, #20
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc6:	4770      	bx	lr

08004bc8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004bc8:	b580      	push	{r7, lr}
 8004bca:	b086      	sub	sp, #24
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004bd0:	4a14      	ldr	r2, [pc, #80]	@ (8004c24 <_sbrk+0x5c>)
 8004bd2:	4b15      	ldr	r3, [pc, #84]	@ (8004c28 <_sbrk+0x60>)
 8004bd4:	1ad3      	subs	r3, r2, r3
 8004bd6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004bd8:	697b      	ldr	r3, [r7, #20]
 8004bda:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004bdc:	4b13      	ldr	r3, [pc, #76]	@ (8004c2c <_sbrk+0x64>)
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d102      	bne.n	8004bea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004be4:	4b11      	ldr	r3, [pc, #68]	@ (8004c2c <_sbrk+0x64>)
 8004be6:	4a12      	ldr	r2, [pc, #72]	@ (8004c30 <_sbrk+0x68>)
 8004be8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004bea:	4b10      	ldr	r3, [pc, #64]	@ (8004c2c <_sbrk+0x64>)
 8004bec:	681a      	ldr	r2, [r3, #0]
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	4413      	add	r3, r2
 8004bf2:	693a      	ldr	r2, [r7, #16]
 8004bf4:	429a      	cmp	r2, r3
 8004bf6:	d207      	bcs.n	8004c08 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004bf8:	f00e ff40 	bl	8013a7c <__errno>
 8004bfc:	4603      	mov	r3, r0
 8004bfe:	220c      	movs	r2, #12
 8004c00:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004c02:	f04f 33ff 	mov.w	r3, #4294967295
 8004c06:	e009      	b.n	8004c1c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004c08:	4b08      	ldr	r3, [pc, #32]	@ (8004c2c <_sbrk+0x64>)
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004c0e:	4b07      	ldr	r3, [pc, #28]	@ (8004c2c <_sbrk+0x64>)
 8004c10:	681a      	ldr	r2, [r3, #0]
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	4413      	add	r3, r2
 8004c16:	4a05      	ldr	r2, [pc, #20]	@ (8004c2c <_sbrk+0x64>)
 8004c18:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004c1a:	68fb      	ldr	r3, [r7, #12]
}
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	3718      	adds	r7, #24
 8004c20:	46bd      	mov	sp, r7
 8004c22:	bd80      	pop	{r7, pc}
 8004c24:	24080000 	.word	0x24080000
 8004c28:	00000400 	.word	0x00000400
 8004c2c:	240006dc 	.word	0x240006dc
 8004c30:	24000ed8 	.word	0x24000ed8

08004c34 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8004c34:	b480      	push	{r7}
 8004c36:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8004c38:	4b37      	ldr	r3, [pc, #220]	@ (8004d18 <SystemInit+0xe4>)
 8004c3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c3e:	4a36      	ldr	r2, [pc, #216]	@ (8004d18 <SystemInit+0xe4>)
 8004c40:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004c44:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8004c48:	4b34      	ldr	r3, [pc, #208]	@ (8004d1c <SystemInit+0xe8>)
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f003 030f 	and.w	r3, r3, #15
 8004c50:	2b06      	cmp	r3, #6
 8004c52:	d807      	bhi.n	8004c64 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8004c54:	4b31      	ldr	r3, [pc, #196]	@ (8004d1c <SystemInit+0xe8>)
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f023 030f 	bic.w	r3, r3, #15
 8004c5c:	4a2f      	ldr	r2, [pc, #188]	@ (8004d1c <SystemInit+0xe8>)
 8004c5e:	f043 0307 	orr.w	r3, r3, #7
 8004c62:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8004c64:	4b2e      	ldr	r3, [pc, #184]	@ (8004d20 <SystemInit+0xec>)
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	4a2d      	ldr	r2, [pc, #180]	@ (8004d20 <SystemInit+0xec>)
 8004c6a:	f043 0301 	orr.w	r3, r3, #1
 8004c6e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8004c70:	4b2b      	ldr	r3, [pc, #172]	@ (8004d20 <SystemInit+0xec>)
 8004c72:	2200      	movs	r2, #0
 8004c74:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8004c76:	4b2a      	ldr	r3, [pc, #168]	@ (8004d20 <SystemInit+0xec>)
 8004c78:	681a      	ldr	r2, [r3, #0]
 8004c7a:	4929      	ldr	r1, [pc, #164]	@ (8004d20 <SystemInit+0xec>)
 8004c7c:	4b29      	ldr	r3, [pc, #164]	@ (8004d24 <SystemInit+0xf0>)
 8004c7e:	4013      	ands	r3, r2
 8004c80:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8004c82:	4b26      	ldr	r3, [pc, #152]	@ (8004d1c <SystemInit+0xe8>)
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f003 0308 	and.w	r3, r3, #8
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d007      	beq.n	8004c9e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8004c8e:	4b23      	ldr	r3, [pc, #140]	@ (8004d1c <SystemInit+0xe8>)
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f023 030f 	bic.w	r3, r3, #15
 8004c96:	4a21      	ldr	r2, [pc, #132]	@ (8004d1c <SystemInit+0xe8>)
 8004c98:	f043 0307 	orr.w	r3, r3, #7
 8004c9c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8004c9e:	4b20      	ldr	r3, [pc, #128]	@ (8004d20 <SystemInit+0xec>)
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8004ca4:	4b1e      	ldr	r3, [pc, #120]	@ (8004d20 <SystemInit+0xec>)
 8004ca6:	2200      	movs	r2, #0
 8004ca8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8004caa:	4b1d      	ldr	r3, [pc, #116]	@ (8004d20 <SystemInit+0xec>)
 8004cac:	2200      	movs	r2, #0
 8004cae:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8004cb0:	4b1b      	ldr	r3, [pc, #108]	@ (8004d20 <SystemInit+0xec>)
 8004cb2:	4a1d      	ldr	r2, [pc, #116]	@ (8004d28 <SystemInit+0xf4>)
 8004cb4:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8004cb6:	4b1a      	ldr	r3, [pc, #104]	@ (8004d20 <SystemInit+0xec>)
 8004cb8:	4a1c      	ldr	r2, [pc, #112]	@ (8004d2c <SystemInit+0xf8>)
 8004cba:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8004cbc:	4b18      	ldr	r3, [pc, #96]	@ (8004d20 <SystemInit+0xec>)
 8004cbe:	4a1c      	ldr	r2, [pc, #112]	@ (8004d30 <SystemInit+0xfc>)
 8004cc0:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8004cc2:	4b17      	ldr	r3, [pc, #92]	@ (8004d20 <SystemInit+0xec>)
 8004cc4:	2200      	movs	r2, #0
 8004cc6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8004cc8:	4b15      	ldr	r3, [pc, #84]	@ (8004d20 <SystemInit+0xec>)
 8004cca:	4a19      	ldr	r2, [pc, #100]	@ (8004d30 <SystemInit+0xfc>)
 8004ccc:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8004cce:	4b14      	ldr	r3, [pc, #80]	@ (8004d20 <SystemInit+0xec>)
 8004cd0:	2200      	movs	r2, #0
 8004cd2:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8004cd4:	4b12      	ldr	r3, [pc, #72]	@ (8004d20 <SystemInit+0xec>)
 8004cd6:	4a16      	ldr	r2, [pc, #88]	@ (8004d30 <SystemInit+0xfc>)
 8004cd8:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8004cda:	4b11      	ldr	r3, [pc, #68]	@ (8004d20 <SystemInit+0xec>)
 8004cdc:	2200      	movs	r2, #0
 8004cde:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8004ce0:	4b0f      	ldr	r3, [pc, #60]	@ (8004d20 <SystemInit+0xec>)
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	4a0e      	ldr	r2, [pc, #56]	@ (8004d20 <SystemInit+0xec>)
 8004ce6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004cea:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8004cec:	4b0c      	ldr	r3, [pc, #48]	@ (8004d20 <SystemInit+0xec>)
 8004cee:	2200      	movs	r2, #0
 8004cf0:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8004cf2:	4b10      	ldr	r3, [pc, #64]	@ (8004d34 <SystemInit+0x100>)
 8004cf4:	681a      	ldr	r2, [r3, #0]
 8004cf6:	4b10      	ldr	r3, [pc, #64]	@ (8004d38 <SystemInit+0x104>)
 8004cf8:	4013      	ands	r3, r2
 8004cfa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004cfe:	d202      	bcs.n	8004d06 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8004d00:	4b0e      	ldr	r3, [pc, #56]	@ (8004d3c <SystemInit+0x108>)
 8004d02:	2201      	movs	r2, #1
 8004d04:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8004d06:	4b0e      	ldr	r3, [pc, #56]	@ (8004d40 <SystemInit+0x10c>)
 8004d08:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8004d0c:	601a      	str	r2, [r3, #0]
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/

}
 8004d0e:	bf00      	nop
 8004d10:	46bd      	mov	sp, r7
 8004d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d16:	4770      	bx	lr
 8004d18:	e000ed00 	.word	0xe000ed00
 8004d1c:	52002000 	.word	0x52002000
 8004d20:	58024400 	.word	0x58024400
 8004d24:	eaf6ed7f 	.word	0xeaf6ed7f
 8004d28:	02020200 	.word	0x02020200
 8004d2c:	01ff0000 	.word	0x01ff0000
 8004d30:	01010280 	.word	0x01010280
 8004d34:	5c001000 	.word	0x5c001000
 8004d38:	ffff0000 	.word	0xffff0000
 8004d3c:	51008108 	.word	0x51008108
 8004d40:	52004000 	.word	0x52004000

08004d44 <_ZN3Pin3setEb>:
        inline bool get()
        {
            return HAL_GPIO_ReadPin(this->GPIOx, this->pin);
        }

        inline void set(bool value)
 8004d44:	b580      	push	{r7, lr}
 8004d46:	b082      	sub	sp, #8
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	6078      	str	r0, [r7, #4]
 8004d4c:	460b      	mov	r3, r1
 8004d4e:	70fb      	strb	r3, [r7, #3]
        {
            if (value)
 8004d50:	78fb      	ldrb	r3, [r7, #3]
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d008      	beq.n	8004d68 <_ZN3Pin3setEb+0x24>
            {
                HAL_GPIO_WritePin(this->GPIOx, this->pin, GPIO_PIN_SET);
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	8bdb      	ldrh	r3, [r3, #30]
 8004d5e:	2201      	movs	r2, #1
 8004d60:	4619      	mov	r1, r3
 8004d62:	f003 ffc9 	bl	8008cf8 <HAL_GPIO_WritePin>
            }
            else
            {
                HAL_GPIO_WritePin(this->GPIOx, this->pin, GPIO_PIN_RESET);
            }
        }
 8004d66:	e007      	b.n	8004d78 <_ZN3Pin3setEb+0x34>
                HAL_GPIO_WritePin(this->GPIOx, this->pin, GPIO_PIN_RESET);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	8bdb      	ldrh	r3, [r3, #30]
 8004d70:	2200      	movs	r2, #0
 8004d72:	4619      	mov	r1, r3
 8004d74:	f003 ffc0 	bl	8008cf8 <HAL_GPIO_WritePin>
        }
 8004d78:	bf00      	nop
 8004d7a:	3708      	adds	r7, #8
 8004d7c:	46bd      	mov	sp, r7
 8004d7e:	bd80      	pop	{r7, pc}

08004d80 <_ZN6ModuleC1Ev>:
#include "module.h"

#include <cstdio>

Module::Module()
 8004d80:	b580      	push	{r7, lr}
 8004d82:	b082      	sub	sp, #8
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	6078      	str	r0, [r7, #4]
 8004d88:	4a08      	ldr	r2, [pc, #32]	@ (8004dac <_ZN6ModuleC1Ev+0x2c>)
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	601a      	str	r2, [r3, #0]
{
	this->counter = 0;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	2200      	movs	r2, #0
 8004d92:	611a      	str	r2, [r3, #16]
	this->updateCount = 1;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	2201      	movs	r2, #1
 8004d98:	60da      	str	r2, [r3, #12]
	printf("\nCreating a std module\n");
 8004d9a:	4805      	ldr	r0, [pc, #20]	@ (8004db0 <_ZN6ModuleC1Ev+0x30>)
 8004d9c:	f00e fcd2 	bl	8013744 <puts>
}
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	4618      	mov	r0, r3
 8004da4:	3708      	adds	r7, #8
 8004da6:	46bd      	mov	sp, r7
 8004da8:	bd80      	pop	{r7, pc}
 8004daa:	bf00      	nop
 8004dac:	08014b50 	.word	0x08014b50
 8004db0:	08014980 	.word	0x08014980

08004db4 <_ZN6ModuleD1Ev>:
	this->counter = 0;
	this->updateCount = this->threadFreq / this->slowUpdateFreq;
	printf("\nCreating a slower module, updating every %ld thread cycles\n",this->updateCount);
}

Module::~Module(){}
 8004db4:	b480      	push	{r7}
 8004db6:	b083      	sub	sp, #12
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	6078      	str	r0, [r7, #4]
 8004dbc:	4a04      	ldr	r2, [pc, #16]	@ (8004dd0 <_ZN6ModuleD1Ev+0x1c>)
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	601a      	str	r2, [r3, #0]
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	4618      	mov	r0, r3
 8004dc6:	370c      	adds	r7, #12
 8004dc8:	46bd      	mov	sp, r7
 8004dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dce:	4770      	bx	lr
 8004dd0:	08014b50 	.word	0x08014b50

08004dd4 <_ZN6ModuleD0Ev>:
 8004dd4:	b580      	push	{r7, lr}
 8004dd6:	b082      	sub	sp, #8
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	6078      	str	r0, [r7, #4]
 8004ddc:	6878      	ldr	r0, [r7, #4]
 8004dde:	f7ff ffe9 	bl	8004db4 <_ZN6ModuleD1Ev>
 8004de2:	2114      	movs	r1, #20
 8004de4:	6878      	ldr	r0, [r7, #4]
 8004de6:	f00e f876 	bl	8012ed6 <_ZdlPvj>
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	4618      	mov	r0, r3
 8004dee:	3708      	adds	r7, #8
 8004df0:	46bd      	mov	sp, r7
 8004df2:	bd80      	pop	{r7, pc}

08004df4 <_ZN6Module9runModuleEv>:


void Module::runModule()
{
 8004df4:	b580      	push	{r7, lr}
 8004df6:	b082      	sub	sp, #8
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
	++this->counter;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	691b      	ldr	r3, [r3, #16]
 8004e00:	1c5a      	adds	r2, r3, #1
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	611a      	str	r2, [r3, #16]

	if (this->counter >= this->updateCount)
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	691a      	ldr	r2, [r3, #16]
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	68db      	ldr	r3, [r3, #12]
 8004e0e:	429a      	cmp	r2, r3
 8004e10:	db08      	blt.n	8004e24 <_ZN6Module9runModuleEv+0x30>
	{
		this->slowUpdate();
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	3310      	adds	r3, #16
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	6878      	ldr	r0, [r7, #4]
 8004e1c:	4798      	blx	r3
		this->counter = 0;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	2200      	movs	r2, #0
 8004e22:	611a      	str	r2, [r3, #16]
	}

	this->update();
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	3308      	adds	r3, #8
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	6878      	ldr	r0, [r7, #4]
 8004e2e:	4798      	blx	r3
}
 8004e30:	bf00      	nop
 8004e32:	3708      	adds	r7, #8
 8004e34:	46bd      	mov	sp, r7
 8004e36:	bd80      	pop	{r7, pc}

08004e38 <_ZN6Module13runModulePostEv>:


void Module::runModulePost()
{
 8004e38:	b580      	push	{r7, lr}
 8004e3a:	b082      	sub	sp, #8
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	6078      	str	r0, [r7, #4]
	this->updatePost();
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	330c      	adds	r3, #12
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	6878      	ldr	r0, [r7, #4]
 8004e4a:	4798      	blx	r3
}
 8004e4c:	bf00      	nop
 8004e4e:	3708      	adds	r7, #8
 8004e50:	46bd      	mov	sp, r7
 8004e52:	bd80      	pop	{r7, pc}

08004e54 <_ZN6Module6updateEv>:

void Module::update(){}
 8004e54:	b480      	push	{r7}
 8004e56:	b083      	sub	sp, #12
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]
 8004e5c:	bf00      	nop
 8004e5e:	370c      	adds	r7, #12
 8004e60:	46bd      	mov	sp, r7
 8004e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e66:	4770      	bx	lr

08004e68 <_ZN6Module10updatePostEv>:
void Module::updatePost(){}
 8004e68:	b480      	push	{r7}
 8004e6a:	b083      	sub	sp, #12
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	6078      	str	r0, [r7, #4]
 8004e70:	bf00      	nop
 8004e72:	370c      	adds	r7, #12
 8004e74:	46bd      	mov	sp, r7
 8004e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7a:	4770      	bx	lr

08004e7c <_ZN6Module10slowUpdateEv>:
void Module::slowUpdate(){}
 8004e7c:	b480      	push	{r7}
 8004e7e:	b083      	sub	sp, #12
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]
 8004e84:	bf00      	nop
 8004e86:	370c      	adds	r7, #12
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8e:	4770      	bx	lr

08004e90 <_ZN6Module9configureEv>:
void Module::configure(){}
 8004e90:	b480      	push	{r7}
 8004e92:	b083      	sub	sp, #12
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	6078      	str	r0, [r7, #4]
 8004e98:	bf00      	nop
 8004e9a:	370c      	adds	r7, #12
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea2:	4770      	bx	lr

08004ea4 <_ZN6Module15handleInterruptEv>:
void Module::handleInterrupt(){}
 8004ea4:	b480      	push	{r7}
 8004ea6:	b083      	sub	sp, #12
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]
 8004eac:	bf00      	nop
 8004eae:	370c      	adds	r7, #12
 8004eb0:	46bd      	mov	sp, r7
 8004eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb6:	4770      	bx	lr

08004eb8 <_ZN15ModuleInterruptC1E9IRQn_TypeP6ModuleMS1_FvvE>:
#include "../interrupt/interrupt.h"
#include "moduleInterrupt.h"
#include "module.h"


ModuleInterrupt::ModuleInterrupt(IRQn_Type interruptNumber, Module* ownerptr, void (Module::*handler)())
 8004eb8:	b082      	sub	sp, #8
 8004eba:	b580      	push	{r7, lr}
 8004ebc:	b084      	sub	sp, #16
 8004ebe:	af00      	add	r7, sp, #0
 8004ec0:	60f8      	str	r0, [r7, #12]
 8004ec2:	607a      	str	r2, [r7, #4]
 8004ec4:	61fb      	str	r3, [r7, #28]
 8004ec6:	460b      	mov	r3, r1
 8004ec8:	817b      	strh	r3, [r7, #10]
    : InterruptOwnerPtr(ownerptr),
	  InterruptHandler(handler)
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	4618      	mov	r0, r3
 8004ece:	f7fb fef1 	bl	8000cb4 <_ZN9InterruptC1Ev>
 8004ed2:	4a0e      	ldr	r2, [pc, #56]	@ (8004f0c <_ZN15ModuleInterruptC1E9IRQn_TypeP6ModuleMS1_FvvE+0x54>)
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	601a      	str	r2, [r3, #0]
    : InterruptOwnerPtr(ownerptr),
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	687a      	ldr	r2, [r7, #4]
 8004edc:	605a      	str	r2, [r3, #4]
	  InterruptHandler(handler)
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	3308      	adds	r3, #8
 8004ee2:	f107 021c 	add.w	r2, r7, #28
 8004ee6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004eea:	e883 0003 	stmia.w	r3, {r0, r1}
	// Allows interrupt to access owner's data
	//InterruptOwnerPtr = owner;

	// When a device interrupt object is instantiated, the Register function must be called to let the
	// Interrupt base class know that there is an appropriate ISR function for the given interrupt.
	Interrupt::Register(interruptNumber, this);
 8004eee:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8004ef2:	68fa      	ldr	r2, [r7, #12]
 8004ef4:	4611      	mov	r1, r2
 8004ef6:	4618      	mov	r0, r3
 8004ef8:	f7fb feec 	bl	8000cd4 <_ZN9Interrupt8RegisterEiPS_>
}
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	4618      	mov	r0, r3
 8004f00:	3710      	adds	r7, #16
 8004f02:	46bd      	mov	sp, r7
 8004f04:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004f08:	b002      	add	sp, #8
 8004f0a:	4770      	bx	lr
 8004f0c:	08014b74 	.word	0x08014b74

08004f10 <_ZN15ModuleInterrupt11ISR_HandlerEv>:


void ModuleInterrupt::ISR_Handler(void)
{
 8004f10:	b580      	push	{r7, lr}
 8004f12:	b082      	sub	sp, #8
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	6078      	str	r0, [r7, #4]
	//this->InterruptOwnerPtr->handleInterrupt();

    if (this->InterruptOwnerPtr && this->InterruptHandler) {
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	685b      	ldr	r3, [r3, #4]
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d02a      	beq.n	8004f76 <_ZN15ModuleInterrupt11ISR_HandlerEv+0x66>
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	689b      	ldr	r3, [r3, #8]
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d107      	bne.n	8004f38 <_ZN15ModuleInterrupt11ISR_HandlerEv+0x28>
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	68db      	ldr	r3, [r3, #12]
 8004f2c:	f003 0301 	and.w	r3, r3, #1
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d101      	bne.n	8004f38 <_ZN15ModuleInterrupt11ISR_HandlerEv+0x28>
 8004f34:	2301      	movs	r3, #1
 8004f36:	e000      	b.n	8004f3a <_ZN15ModuleInterrupt11ISR_HandlerEv+0x2a>
 8004f38:	2300      	movs	r3, #0
 8004f3a:	2b01      	cmp	r3, #1
 8004f3c:	d01b      	beq.n	8004f76 <_ZN15ModuleInterrupt11ISR_HandlerEv+0x66>
        (this->InterruptOwnerPtr->*InterruptHandler)(); // Call the member function of the owner
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	68db      	ldr	r3, [r3, #12]
 8004f42:	f003 0301 	and.w	r3, r3, #1
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d102      	bne.n	8004f50 <_ZN15ModuleInterrupt11ISR_HandlerEv+0x40>
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	689b      	ldr	r3, [r3, #8]
 8004f4e:	e00a      	b.n	8004f66 <_ZN15ModuleInterrupt11ISR_HandlerEv+0x56>
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	685b      	ldr	r3, [r3, #4]
 8004f54:	687a      	ldr	r2, [r7, #4]
 8004f56:	68d2      	ldr	r2, [r2, #12]
 8004f58:	1052      	asrs	r2, r2, #1
 8004f5a:	4413      	add	r3, r2
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	687a      	ldr	r2, [r7, #4]
 8004f60:	6892      	ldr	r2, [r2, #8]
 8004f62:	4413      	add	r3, r2
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	687a      	ldr	r2, [r7, #4]
 8004f68:	6852      	ldr	r2, [r2, #4]
 8004f6a:	6879      	ldr	r1, [r7, #4]
 8004f6c:	68c9      	ldr	r1, [r1, #12]
 8004f6e:	1049      	asrs	r1, r1, #1
 8004f70:	440a      	add	r2, r1
 8004f72:	4610      	mov	r0, r2
 8004f74:	4798      	blx	r3
    }
}
 8004f76:	bf00      	nop
 8004f78:	3708      	adds	r7, #8
 8004f7a:	46bd      	mov	sp, r7
 8004f7c:	bd80      	pop	{r7, pc}
	...

08004f80 <_ZN11RemoraCommsC1EPV8rxData_tPV8txData_tP11SPI_TypeDef>:
#include "../remoraComms/RemoraComms.h"
#include <cstdio>


RemoraComms::RemoraComms(volatile rxData_t* ptrRxData, volatile txData_t* ptrTxData, SPI_TypeDef* spiType) :
 8004f80:	b590      	push	{r4, r7, lr}
 8004f82:	b093      	sub	sp, #76	@ 0x4c
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	60f8      	str	r0, [r7, #12]
 8004f88:	60b9      	str	r1, [r7, #8]
 8004f8a:	607a      	str	r2, [r7, #4]
 8004f8c:	603b      	str	r3, [r7, #0]
    ptrRxData(ptrRxData),
    ptrTxData(ptrTxData),
    spiType(spiType)
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	4618      	mov	r0, r3
 8004f92:	f7ff fef5 	bl	8004d80 <_ZN6ModuleC1Ev>
 8004f96:	4a34      	ldr	r2, [pc, #208]	@ (8005068 <_ZN11RemoraCommsC1EPV8rxData_tPV8txData_tP11SPI_TypeDef+0xe8>)
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	601a      	str	r2, [r3, #0]
    ptrRxData(ptrRxData),
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	68ba      	ldr	r2, [r7, #8]
 8004fa0:	61da      	str	r2, [r3, #28]
    ptrTxData(ptrTxData),
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	687a      	ldr	r2, [r7, #4]
 8004fa6:	621a      	str	r2, [r3, #32]
    spiType(spiType)
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	683a      	ldr	r2, [r7, #0]
 8004fac:	625a      	str	r2, [r3, #36]	@ 0x24
{
    this->spiHandle.Instance = this->spiType;
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	645a      	str	r2, [r3, #68]	@ 0x44

    this->irqNss = EXTI4_IRQn;
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	220a      	movs	r2, #10
 8004fba:	879a      	strh	r2, [r3, #60]	@ 0x3c
    this->irqDMAtx = DMA1_Stream0_IRQn;
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	220b      	movs	r2, #11
 8004fc0:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    this->irqDMArx = DMA1_Stream1_IRQn;
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	220c      	movs	r2, #12
 8004fc8:	87da      	strh	r2, [r3, #62]	@ 0x3e

    // the constructor is called before any DMA and cache setup
    // don't do stuff here

    this->pin1 = new Pin("PE_11", OUTPUT);
 8004fca:	2044      	movs	r0, #68	@ 0x44
 8004fcc:	f00d ff97 	bl	8012efe <_Znwj>
 8004fd0:	4603      	mov	r3, r0
 8004fd2:	461c      	mov	r4, r3
 8004fd4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8004fd8:	4618      	mov	r0, r3
 8004fda:	f00d ffba 	bl	8012f52 <_ZNSaIcEC1Ev>
 8004fde:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8004fe2:	f107 0310 	add.w	r3, r7, #16
 8004fe6:	4921      	ldr	r1, [pc, #132]	@ (800506c <_ZN11RemoraCommsC1EPV8rxData_tPV8txData_tP11SPI_TypeDef+0xec>)
 8004fe8:	4618      	mov	r0, r3
 8004fea:	f7fd fd11 	bl	8002a10 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 8004fee:	f107 0310 	add.w	r3, r7, #16
 8004ff2:	2201      	movs	r2, #1
 8004ff4:	4619      	mov	r1, r3
 8004ff6:	4620      	mov	r0, r4
 8004ff8:	f7fb fd22 	bl	8000a40 <_ZN3PinC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi>
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	615c      	str	r4, [r3, #20]
 8005000:	f107 0310 	add.w	r3, r7, #16
 8005004:	4618      	mov	r0, r3
 8005006:	f00e f83a 	bl	801307e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800500a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800500e:	4618      	mov	r0, r3
 8005010:	f00d ffa0 	bl	8012f54 <_ZNSaIcED1Ev>
    this->pin2 = new Pin("PE_12", OUTPUT);
 8005014:	2044      	movs	r0, #68	@ 0x44
 8005016:	f00d ff72 	bl	8012efe <_Znwj>
 800501a:	4603      	mov	r3, r0
 800501c:	461c      	mov	r4, r3
 800501e:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8005022:	4618      	mov	r0, r3
 8005024:	f00d ff95 	bl	8012f52 <_ZNSaIcEC1Ev>
 8005028:	f107 0244 	add.w	r2, r7, #68	@ 0x44
 800502c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8005030:	490f      	ldr	r1, [pc, #60]	@ (8005070 <_ZN11RemoraCommsC1EPV8rxData_tPV8txData_tP11SPI_TypeDef+0xf0>)
 8005032:	4618      	mov	r0, r3
 8005034:	f7fd fcec 	bl	8002a10 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 8005038:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800503c:	2201      	movs	r2, #1
 800503e:	4619      	mov	r1, r3
 8005040:	4620      	mov	r0, r4
 8005042:	f7fb fcfd 	bl	8000a40 <_ZN3PinC1ENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi>
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	619c      	str	r4, [r3, #24]
 800504a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800504e:	4618      	mov	r0, r3
 8005050:	f00e f815 	bl	801307e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8005054:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8005058:	4618      	mov	r0, r3
 800505a:	f00d ff7b 	bl	8012f54 <_ZNSaIcED1Ev>
}
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	4618      	mov	r0, r3
 8005062:	374c      	adds	r7, #76	@ 0x4c
 8005064:	46bd      	mov	sp, r7
 8005066:	bd90      	pop	{r4, r7, pc}
 8005068:	08014b80 	.word	0x08014b80
 800506c:	080149d8 	.word	0x080149d8
 8005070:	080149e0 	.word	0x080149e0

08005074 <_ZN11RemoraComms4initEv>:


void RemoraComms::init()
{
 8005074:	b580      	push	{r7, lr}
 8005076:	b08a      	sub	sp, #40	@ 0x28
 8005078:	af00      	add	r7, sp, #0
 800507a:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800507c:	f107 0314 	add.w	r3, r7, #20
 8005080:	2200      	movs	r2, #0
 8005082:	601a      	str	r2, [r3, #0]
 8005084:	605a      	str	r2, [r3, #4]
 8005086:	609a      	str	r2, [r3, #8]
 8005088:	60da      	str	r2, [r3, #12]
 800508a:	611a      	str	r2, [r3, #16]

    if(this->spiHandle.Instance == SPI1)
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005090:	4a8d      	ldr	r2, [pc, #564]	@ (80052c8 <_ZN11RemoraComms4initEv+0x254>)
 8005092:	4293      	cmp	r3, r2
 8005094:	f040 8113 	bne.w	80052be <_ZN11RemoraComms4initEv+0x24a>
    {
    	// Interrupt pin is the NSS pin
        // Configure GPIO pin : PA_4

        __HAL_RCC_GPIOC_CLK_ENABLE();
 8005098:	4b8c      	ldr	r3, [pc, #560]	@ (80052cc <_ZN11RemoraComms4initEv+0x258>)
 800509a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800509e:	4a8b      	ldr	r2, [pc, #556]	@ (80052cc <_ZN11RemoraComms4initEv+0x258>)
 80050a0:	f043 0304 	orr.w	r3, r3, #4
 80050a4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80050a8:	4b88      	ldr	r3, [pc, #544]	@ (80052cc <_ZN11RemoraComms4initEv+0x258>)
 80050aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80050ae:	f003 0304 	and.w	r3, r3, #4
 80050b2:	613b      	str	r3, [r7, #16]
 80050b4:	693b      	ldr	r3, [r7, #16]

        GPIO_InitStruct.Pin = GPIO_PIN_4;
 80050b6:	2310      	movs	r3, #16
 80050b8:	617b      	str	r3, [r7, #20]
        GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80050ba:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80050be:	61bb      	str	r3, [r7, #24]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050c0:	2300      	movs	r3, #0
 80050c2:	61fb      	str	r3, [r7, #28]
        HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80050c4:	f107 0314 	add.w	r3, r7, #20
 80050c8:	4619      	mov	r1, r3
 80050ca:	4881      	ldr	r0, [pc, #516]	@ (80052d0 <_ZN11RemoraComms4initEv+0x25c>)
 80050cc:	f003 fc64 	bl	8008998 <HAL_GPIO_Init>
        //HAL_NVIC_EnableIRQ(this->irqNss);


        //printf("	Initialising SPI1 slave\n");

        this->spiHandle.Init.Mode           		= SPI_MODE_SLAVE;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2200      	movs	r2, #0
 80050d4:	649a      	str	r2, [r3, #72]	@ 0x48
        this->spiHandle.Init.Direction      		= SPI_DIRECTION_2LINES;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	2200      	movs	r2, #0
 80050da:	64da      	str	r2, [r3, #76]	@ 0x4c
        this->spiHandle.Init.DataSize       		= SPI_DATASIZE_8BIT;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	2207      	movs	r2, #7
 80050e0:	651a      	str	r2, [r3, #80]	@ 0x50
        this->spiHandle.Init.CLKPolarity    		= SPI_POLARITY_LOW;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	2200      	movs	r2, #0
 80050e6:	655a      	str	r2, [r3, #84]	@ 0x54
        this->spiHandle.Init.CLKPhase       		= SPI_PHASE_1EDGE;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2200      	movs	r2, #0
 80050ec:	659a      	str	r2, [r3, #88]	@ 0x58
        //this->spiHandle.Init.NSS            		= SPI_NSS_HARD_INPUT;
        this->spiHandle.Init.NSS            		= SPI_NSS_SOFT;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80050f4:	65da      	str	r2, [r3, #92]	@ 0x5c
        this->spiHandle.Init.FirstBit       		= SPI_FIRSTBIT_MSB;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	2200      	movs	r2, #0
 80050fa:	665a      	str	r2, [r3, #100]	@ 0x64
        this->spiHandle.Init.TIMode         		= SPI_TIMODE_DISABLE;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	2200      	movs	r2, #0
 8005100:	669a      	str	r2, [r3, #104]	@ 0x68
        this->spiHandle.Init.CRCCalculation 		= SPI_CRCCALCULATION_DISABLE;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	2200      	movs	r2, #0
 8005106:	66da      	str	r2, [r3, #108]	@ 0x6c
        this->spiHandle.Init.CRCPolynomial  		= 0x0;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2200      	movs	r2, #0
 800510c:	671a      	str	r2, [r3, #112]	@ 0x70
        this->spiHandle.Init.NSSPMode 				= SPI_NSS_PULSE_DISABLE;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	2200      	movs	r2, #0
 8005112:	679a      	str	r2, [r3, #120]	@ 0x78
        //this->spiHandle.Init.NSSPMode 				= SPI_NSS_PULSE_ENABLE;
        this->spiHandle.Init.NSSPolarity 			= SPI_NSS_POLARITY_LOW;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2200      	movs	r2, #0
 8005118:	67da      	str	r2, [r3, #124]	@ 0x7c
        this->spiHandle.Init.FifoThreshold 			= SPI_FIFO_THRESHOLD_01DATA;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	2200      	movs	r2, #0
 800511e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        this->spiHandle.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	2200      	movs	r2, #0
 8005126:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        this->spiHandle.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	2200      	movs	r2, #0
 800512e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        this->spiHandle.Init.MasterSSIdleness 		= SPI_MASTER_SS_IDLENESS_00CYCLE;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	2200      	movs	r2, #0
 8005136:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        this->spiHandle.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	2200      	movs	r2, #0
 800513e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        this->spiHandle.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	2200      	movs	r2, #0
 8005146:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        this->spiHandle.Init.MasterKeepIOState 		= SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	2200      	movs	r2, #0
 800514e:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        this->spiHandle.Init.IOSwap 				= SPI_IO_SWAP_DISABLE;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	2200      	movs	r2, #0
 8005156:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        HAL_SPI_Init(&this->spiHandle);
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	3344      	adds	r3, #68	@ 0x44
 800515e:	4618      	mov	r0, r3
 8005160:	f008 ff66 	bl	800e030 <HAL_SPI_Init>

    	// Peripheral clock enable
    	__HAL_RCC_SPI1_CLK_ENABLE();
 8005164:	4b59      	ldr	r3, [pc, #356]	@ (80052cc <_ZN11RemoraComms4initEv+0x258>)
 8005166:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800516a:	4a58      	ldr	r2, [pc, #352]	@ (80052cc <_ZN11RemoraComms4initEv+0x258>)
 800516c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8005170:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8005174:	4b55      	ldr	r3, [pc, #340]	@ (80052cc <_ZN11RemoraComms4initEv+0x258>)
 8005176:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800517a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800517e:	60fb      	str	r3, [r7, #12]
 8005180:	68fb      	ldr	r3, [r7, #12]

		//printf("	Initialising GPIO for SPI\n");

	    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005182:	4b52      	ldr	r3, [pc, #328]	@ (80052cc <_ZN11RemoraComms4initEv+0x258>)
 8005184:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005188:	4a50      	ldr	r2, [pc, #320]	@ (80052cc <_ZN11RemoraComms4initEv+0x258>)
 800518a:	f043 0301 	orr.w	r3, r3, #1
 800518e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8005192:	4b4e      	ldr	r3, [pc, #312]	@ (80052cc <_ZN11RemoraComms4initEv+0x258>)
 8005194:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005198:	f003 0301 	and.w	r3, r3, #1
 800519c:	60bb      	str	r3, [r7, #8]
 800519e:	68bb      	ldr	r3, [r7, #8]
	    PA4     ------> SPI1_NSS
	    PA5     ------> SPI1_SCK
	    PA6     ------> SPI1_MISO
	    PA7     ------> SPI1_MOSI
	    */
    	GPIO_InitStruct = {0};
 80051a0:	f107 0314 	add.w	r3, r7, #20
 80051a4:	2200      	movs	r2, #0
 80051a6:	601a      	str	r2, [r3, #0]
 80051a8:	605a      	str	r2, [r3, #4]
 80051aa:	609a      	str	r2, [r3, #8]
 80051ac:	60da      	str	r2, [r3, #12]
 80051ae:	611a      	str	r2, [r3, #16]
	    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80051b0:	23f0      	movs	r3, #240	@ 0xf0
 80051b2:	617b      	str	r3, [r7, #20]
	    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80051b4:	2302      	movs	r3, #2
 80051b6:	61bb      	str	r3, [r7, #24]
	    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051b8:	2300      	movs	r3, #0
 80051ba:	61fb      	str	r3, [r7, #28]
	    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80051bc:	2300      	movs	r3, #0
 80051be:	623b      	str	r3, [r7, #32]
	    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80051c0:	2305      	movs	r3, #5
 80051c2:	627b      	str	r3, [r7, #36]	@ 0x24
	    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80051c4:	f107 0314 	add.w	r3, r7, #20
 80051c8:	4619      	mov	r1, r3
 80051ca:	4841      	ldr	r0, [pc, #260]	@ (80052d0 <_ZN11RemoraComms4initEv+0x25c>)
 80051cc:	f003 fbe4 	bl	8008998 <HAL_GPIO_Init>

        //printf("	Initialising DMA for SPI\n");

        this->hdma_spi_rx.Instance 					= DMA1_Stream1;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	4a40      	ldr	r2, [pc, #256]	@ (80052d4 <_ZN11RemoraComms4initEv+0x260>)
 80051d4:	f8c3 2144 	str.w	r2, [r3, #324]	@ 0x144
        this->hdma_spi_rx.Init.Request 				= DMA_REQUEST_SPI1_RX;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2225      	movs	r2, #37	@ 0x25
 80051dc:	f8c3 2148 	str.w	r2, [r3, #328]	@ 0x148
        this->hdma_spi_rx.Init.Direction 			= DMA_PERIPH_TO_MEMORY;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2200      	movs	r2, #0
 80051e4:	f8c3 214c 	str.w	r2, [r3, #332]	@ 0x14c
        this->hdma_spi_rx.Init.PeriphInc 			= DMA_PINC_DISABLE;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2200      	movs	r2, #0
 80051ec:	f8c3 2150 	str.w	r2, [r3, #336]	@ 0x150
        this->hdma_spi_rx.Init.MemInc 				= DMA_MINC_ENABLE;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80051f6:	f8c3 2154 	str.w	r2, [r3, #340]	@ 0x154
        this->hdma_spi_rx.Init.PeriphDataAlignment 	= DMA_PDATAALIGN_BYTE;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	2200      	movs	r2, #0
 80051fe:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158
        this->hdma_spi_rx.Init.MemDataAlignment 	= DMA_MDATAALIGN_BYTE;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	2200      	movs	r2, #0
 8005206:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
        this->hdma_spi_rx.Init.Mode 				= DMA_CIRCULAR;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005210:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160
        //this->hdma_spi_rx.Init.Mode 				= DMA_NORMAL;
        this->hdma_spi_rx.Init.Priority 			= DMA_PRIORITY_LOW;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2200      	movs	r2, #0
 8005218:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164
        this->hdma_spi_rx.Init.FIFOMode 			= DMA_FIFOMODE_DISABLE;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2200      	movs	r2, #0
 8005220:	f8c3 2168 	str.w	r2, [r3, #360]	@ 0x168

        HAL_DMA_Init(&this->hdma_spi_rx);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 800522a:	4618      	mov	r0, r3
 800522c:	f000 ffb2 	bl	8006194 <HAL_DMA_Init>
        __HAL_LINKDMA(&this->spiHandle, hdmarx, this->hdma_spi_rx);
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	f503 72a2 	add.w	r2, r3, #324	@ 0x144
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	f103 0244 	add.w	r2, r3, #68	@ 0x44
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	f8c3 217c 	str.w	r2, [r3, #380]	@ 0x17c

        //dmaRxInterrupt = new ModuleInterrupt(this->irqDMArx, this, static_cast<void (Module::*)()>(&RemoraComms::handleRxInterrupt));
    	//HAL_NVIC_SetPriority(this->irqDMArx, 5, 0);
        //HAL_NVIC_EnableIRQ(this->irqDMArx);

        this->hdma_spi_tx.Instance 					= DMA1_Stream0;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	4a23      	ldr	r2, [pc, #140]	@ (80052d8 <_ZN11RemoraComms4initEv+0x264>)
 800524c:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc
        this->hdma_spi_tx.Init.Request 				= DMA_REQUEST_SPI1_TX;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2226      	movs	r2, #38	@ 0x26
 8005254:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
        this->hdma_spi_tx.Init.Direction 			= DMA_MEMORY_TO_PERIPH;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	2240      	movs	r2, #64	@ 0x40
 800525c:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
        this->hdma_spi_tx.Init.PeriphInc 			= DMA_PINC_DISABLE;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2200      	movs	r2, #0
 8005264:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8
        this->hdma_spi_tx.Init.MemInc 				= DMA_MINC_ENABLE;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800526e:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
        this->hdma_spi_tx.Init.PeriphDataAlignment 	= DMA_PDATAALIGN_BYTE;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	2200      	movs	r2, #0
 8005276:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
        this->hdma_spi_tx.Init.MemDataAlignment 	= DMA_MDATAALIGN_BYTE;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	2200      	movs	r2, #0
 800527e:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
        this->hdma_spi_tx.Init.Mode 				= DMA_CIRCULAR;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005288:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8
        //this->hdma_spi_tx.Init.Mode 				= DMA_NORMAL;
        this->hdma_spi_tx.Init.Priority 			= DMA_PRIORITY_LOW;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2200      	movs	r2, #0
 8005290:	f8c3 20ec 	str.w	r2, [r3, #236]	@ 0xec
        this->hdma_spi_tx.Init.FIFOMode 			= DMA_FIFOMODE_DISABLE;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	2200      	movs	r2, #0
 8005298:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0

        HAL_DMA_Init(&this->hdma_spi_tx);
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	33cc      	adds	r3, #204	@ 0xcc
 80052a0:	4618      	mov	r0, r3
 80052a2:	f000 ff77 	bl	8006194 <HAL_DMA_Init>
        __HAL_LINKDMA(&this->spiHandle, hdmatx, this->hdma_spi_tx);
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	f103 02cc 	add.w	r2, r3, #204	@ 0xcc
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	f103 0244 	add.w	r2, r3, #68	@ 0x44
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104

        //dmaTxInterrupt = new ModuleInterrupt(this->irqDMAtx, this, static_cast<void (Module::*)()>(&RemoraComms::handleTxInterrupt));
        //HAL_NVIC_SetPriority(this->irqDMAtx, 4, 0);	// TX needs to be a higher priority than RX
        //HAL_NVIC_EnableIRQ(this->irqDMAtx);
    }
}
 80052be:	bf00      	nop
 80052c0:	3728      	adds	r7, #40	@ 0x28
 80052c2:	46bd      	mov	sp, r7
 80052c4:	bd80      	pop	{r7, pc}
 80052c6:	bf00      	nop
 80052c8:	40013000 	.word	0x40013000
 80052cc:	58024400 	.word	0x58024400
 80052d0:	58020000 	.word	0x58020000
 80052d4:	40020028 	.word	0x40020028
 80052d8:	40020010 	.word	0x40020010

080052dc <_ZN11RemoraComms5startEv>:

void RemoraComms::start()
{
 80052dc:	b590      	push	{r4, r7, lr}
 80052de:	b08b      	sub	sp, #44	@ 0x2c
 80052e0:	af02      	add	r7, sp, #8
 80052e2:	6078      	str	r0, [r7, #4]
    NssInterrupt = new ModuleInterrupt(this->irqNss, this, static_cast<void (Module::*)()>(&RemoraComms::handleNssInterrupt));
 80052e4:	2010      	movs	r0, #16
 80052e6:	f00d fe0a 	bl	8012efe <_Znwj>
 80052ea:	4603      	mov	r3, r0
 80052ec:	461c      	mov	r4, r3
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	f9b3 103c 	ldrsh.w	r1, [r3, #60]	@ 0x3c
 80052f4:	687a      	ldr	r2, [r7, #4]
 80052f6:	4b4d      	ldr	r3, [pc, #308]	@ (800542c <_ZN11RemoraComms5startEv+0x150>)
 80052f8:	60bb      	str	r3, [r7, #8]
 80052fa:	2300      	movs	r3, #0
 80052fc:	60fb      	str	r3, [r7, #12]
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	9300      	str	r3, [sp, #0]
 8005302:	68bb      	ldr	r3, [r7, #8]
 8005304:	4620      	mov	r0, r4
 8005306:	f7ff fdd7 	bl	8004eb8 <_ZN15ModuleInterruptC1E9IRQn_TypeP6ModuleMS1_FvvE>
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	631c      	str	r4, [r3, #48]	@ 0x30
	HAL_NVIC_SetPriority(this->irqNss, 6, 0);
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8005314:	2200      	movs	r2, #0
 8005316:	2106      	movs	r1, #6
 8005318:	4618      	mov	r0, r3
 800531a:	f000 fe8a 	bl	8006032 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(this->irqNss);
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8005324:	4618      	mov	r0, r3
 8005326:	f000 fe9e 	bl	8006066 <HAL_NVIC_EnableIRQ>

    dmaRxInterrupt = new ModuleInterrupt(this->irqDMArx, this, static_cast<void (Module::*)()>(&RemoraComms::handleRxInterrupt));
 800532a:	2010      	movs	r0, #16
 800532c:	f00d fde7 	bl	8012efe <_Znwj>
 8005330:	4603      	mov	r3, r0
 8005332:	461c      	mov	r4, r3
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	f9b3 103e 	ldrsh.w	r1, [r3, #62]	@ 0x3e
 800533a:	687a      	ldr	r2, [r7, #4]
 800533c:	4b3c      	ldr	r3, [pc, #240]	@ (8005430 <_ZN11RemoraComms5startEv+0x154>)
 800533e:	613b      	str	r3, [r7, #16]
 8005340:	2300      	movs	r3, #0
 8005342:	617b      	str	r3, [r7, #20]
 8005344:	697b      	ldr	r3, [r7, #20]
 8005346:	9300      	str	r3, [sp, #0]
 8005348:	693b      	ldr	r3, [r7, #16]
 800534a:	4620      	mov	r0, r4
 800534c:	f7ff fdb4 	bl	8004eb8 <_ZN15ModuleInterruptC1E9IRQn_TypeP6ModuleMS1_FvvE>
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	639c      	str	r4, [r3, #56]	@ 0x38
	HAL_NVIC_SetPriority(this->irqDMArx, 5, 0);
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800535a:	2200      	movs	r2, #0
 800535c:	2105      	movs	r1, #5
 800535e:	4618      	mov	r0, r3
 8005360:	f000 fe67 	bl	8006032 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(this->irqDMArx);
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800536a:	4618      	mov	r0, r3
 800536c:	f000 fe7b 	bl	8006066 <HAL_NVIC_EnableIRQ>

    dmaTxInterrupt = new ModuleInterrupt(this->irqDMAtx, this, static_cast<void (Module::*)()>(&RemoraComms::handleTxInterrupt));
 8005370:	2010      	movs	r0, #16
 8005372:	f00d fdc4 	bl	8012efe <_Znwj>
 8005376:	4603      	mov	r3, r0
 8005378:	461c      	mov	r4, r3
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	f9b3 1040 	ldrsh.w	r1, [r3, #64]	@ 0x40
 8005380:	687a      	ldr	r2, [r7, #4]
 8005382:	4b2c      	ldr	r3, [pc, #176]	@ (8005434 <_ZN11RemoraComms5startEv+0x158>)
 8005384:	61bb      	str	r3, [r7, #24]
 8005386:	2300      	movs	r3, #0
 8005388:	61fb      	str	r3, [r7, #28]
 800538a:	69fb      	ldr	r3, [r7, #28]
 800538c:	9300      	str	r3, [sp, #0]
 800538e:	69bb      	ldr	r3, [r7, #24]
 8005390:	4620      	mov	r0, r4
 8005392:	f7ff fd91 	bl	8004eb8 <_ZN15ModuleInterruptC1E9IRQn_TypeP6ModuleMS1_FvvE>
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	635c      	str	r4, [r3, #52]	@ 0x34
    HAL_NVIC_SetPriority(this->irqDMAtx, 4, 0);	// TX needs to be a higher priority than RX
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 80053a0:	2200      	movs	r2, #0
 80053a2:	2104      	movs	r1, #4
 80053a4:	4618      	mov	r0, r3
 80053a6:	f000 fe44 	bl	8006032 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(this->irqDMAtx);
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 80053b0:	4618      	mov	r0, r3
 80053b2:	f000 fe58 	bl	8006066 <HAL_NVIC_EnableIRQ>

	txPingPongBuffer.txBuffers[0].header =  PRU_DATA;
 80053b6:	4b20      	ldr	r3, [pc, #128]	@ (8005438 <_ZN11RemoraComms5startEv+0x15c>)
 80053b8:	4a20      	ldr	r2, [pc, #128]	@ (800543c <_ZN11RemoraComms5startEv+0x160>)
 80053ba:	601a      	str	r2, [r3, #0]
	txPingPongBuffer.txBuffers[1].header =  PRU_DATA;
 80053bc:	4b1e      	ldr	r3, [pc, #120]	@ (8005438 <_ZN11RemoraComms5startEv+0x15c>)
 80053be:	4a1f      	ldr	r2, [pc, #124]	@ (800543c <_ZN11RemoraComms5startEv+0x160>)
 80053c0:	641a      	str	r2, [r3, #64]	@ 0x40

	txPingPongBuffer.currentTxBuffer = 0;
 80053c2:	4b1d      	ldr	r3, [pc, #116]	@ (8005438 <_ZN11RemoraComms5startEv+0x15c>)
 80053c4:	2200      	movs	r2, #0
 80053c6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
	rxPingPongBuffer.currentRxBuffer = 0;
 80053ca:	4b1d      	ldr	r3, [pc, #116]	@ (8005440 <_ZN11RemoraComms5startEv+0x164>)
 80053cc:	2200      	movs	r2, #0
 80053ce:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    // Alternate buffer: used by DMA comms
    //txBuffer = getAltTxBuffer(&txPingPongBuffer);
    //txBuffer->header = PRU_DATA;
    //SCB_CleanDCache_by_Addr((uint32_t*)(((uint32_t)txBuffer->txBuffer) & ~(uint32_t)0x1F), BUFFER_ALIGNED_SIZE);

	txBuffer = getAltTxBuffer(&txPingPongBuffer);
 80053d2:	4819      	ldr	r0, [pc, #100]	@ (8005438 <_ZN11RemoraComms5startEv+0x15c>)
 80053d4:	f7fc fff8 	bl	80023c8 <_Z14getAltTxBufferP16TxPingPongBuffer>
 80053d8:	4602      	mov	r2, r0
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	62da      	str	r2, [r3, #44]	@ 0x2c
	rxBuffer = getAltRxBuffer(&rxPingPongBuffer);
 80053de:	4818      	ldr	r0, [pc, #96]	@ (8005440 <_ZN11RemoraComms5startEv+0x164>)
 80053e0:	f7fc ffe0 	bl	80023a4 <_Z14getAltRxBufferP16RxPingPongBuffer>
 80053e4:	4602      	mov	r2, r0
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	629a      	str	r2, [r3, #40]	@ 0x28

    //SCB_InvalidateDCache_by_Addr((uint32_t*)(((uint32_t)rxBuffer->rxBuffer) & ~(uint32_t)0x1F), BUFFER_ALIGNED_SIZE);
    this->spiHandle.Lock = HAL_UNLOCKED;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	2200      	movs	r2, #0
 80053ee:	f883 20c4 	strb.w	r2, [r3, #196]	@ 0xc4
    this->dmaStatus = HAL_SPI_TransmitReceive_DMA(&this->spiHandle, (uint8_t *)txBuffer->txBuffer, (uint8_t *)rxBuffer->rxBuffer, SPI_BUFF_SIZE);
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	f103 0044 	add.w	r0, r3, #68	@ 0x44
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053fc:	4619      	mov	r1, r3
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005402:	461a      	mov	r2, r3
 8005404:	2340      	movs	r3, #64	@ 0x40
 8005406:	f008 ff41 	bl	800e28c <HAL_SPI_TransmitReceive_DMA>
 800540a:	4603      	mov	r3, r0
 800540c:	461a      	mov	r2, r3
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	f883 21bd 	strb.w	r2, [r3, #445]	@ 0x1bd

    printf("%d\n", this->dmaStatus);
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	f893 31bd 	ldrb.w	r3, [r3, #445]	@ 0x1bd
 800541a:	4619      	mov	r1, r3
 800541c:	4809      	ldr	r0, [pc, #36]	@ (8005444 <_ZN11RemoraComms5startEv+0x168>)
 800541e:	f00e f921 	bl	8013664 <iprintf>
}
 8005422:	bf00      	nop
 8005424:	3724      	adds	r7, #36	@ 0x24
 8005426:	46bd      	mov	sp, r7
 8005428:	bd90      	pop	{r4, r7, pc}
 800542a:	bf00      	nop
 800542c:	08005489 	.word	0x08005489
 8005430:	08005633 	.word	0x08005633
 8005434:	08005605 	.word	0x08005605
 8005438:	24000400 	.word	0x24000400
 800543c:	64617461 	.word	0x64617461
 8005440:	24000360 	.word	0x24000360
 8005444:	080149e8 	.word	0x080149e8

08005448 <_ZN11RemoraComms11swapBuffersEv>:


void RemoraComms::swapBuffers()
{
 8005448:	b580      	push	{r7, lr}
 800544a:	b082      	sub	sp, #8
 800544c:	af00      	add	r7, sp, #0
 800544e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 8005450:	b672      	cpsid	i
}
 8005452:	bf00      	nop
    __disable_irq();
    swapTxBuffers(&txPingPongBuffer);
 8005454:	480a      	ldr	r0, [pc, #40]	@ (8005480 <_ZN11RemoraComms11swapBuffersEv+0x38>)
 8005456:	f7fc ff83 	bl	8002360 <_Z13swapTxBuffersP16TxPingPongBuffer>
  __ASM volatile ("cpsie i" : : : "memory");
 800545a:	b662      	cpsie	i
}
 800545c:	bf00      	nop
    __enable_irq();
    rxBuffer = getAltRxBuffer(&rxPingPongBuffer);
 800545e:	4809      	ldr	r0, [pc, #36]	@ (8005484 <_ZN11RemoraComms11swapBuffersEv+0x3c>)
 8005460:	f7fc ffa0 	bl	80023a4 <_Z14getAltRxBufferP16RxPingPongBuffer>
 8005464:	4602      	mov	r2, r0
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	629a      	str	r2, [r3, #40]	@ 0x28
    txBuffer = getAltTxBuffer(&txPingPongBuffer);
 800546a:	4805      	ldr	r0, [pc, #20]	@ (8005480 <_ZN11RemoraComms11swapBuffersEv+0x38>)
 800546c:	f7fc ffac 	bl	80023c8 <_Z14getAltTxBufferP16TxPingPongBuffer>
 8005470:	4602      	mov	r2, r0
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	62da      	str	r2, [r3, #44]	@ 0x2c
    //SCB_InvalidateDCache_by_Addr((uint32_t*)(((uint32_t)rxBuffer->rxBuffer) & ~(uint32_t)0x1F), BUFFER_ALIGNED_SIZE);
    //SCB_CleanDCache_by_Addr((uint32_t*)(((uint32_t)txBuffer->txBuffer) & ~(uint32_t)0x1F), BUFFER_ALIGNED_SIZE);
}
 8005476:	bf00      	nop
 8005478:	3708      	adds	r7, #8
 800547a:	46bd      	mov	sp, r7
 800547c:	bd80      	pop	{r7, pc}
 800547e:	bf00      	nop
 8005480:	24000400 	.word	0x24000400
 8005484:	24000360 	.word	0x24000360

08005488 <_ZN11RemoraComms18handleNssInterruptEv>:

void RemoraComms::handleNssInterrupt()
{
 8005488:	b580      	push	{r7, lr}
 800548a:	b084      	sub	sp, #16
 800548c:	af00      	add	r7, sp, #0
 800548e:	6078      	str	r0, [r7, #4]
	this->pin2->set(1);
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	699b      	ldr	r3, [r3, #24]
 8005494:	2101      	movs	r1, #1
 8005496:	4618      	mov	r0, r3
 8005498:	f7ff fc54 	bl	8004d44 <_ZN3Pin3setEb>
    //HAL_DMA_Abort(this->spiHandle.hdmatx);

	//HAL_NVIC_EnableIRQ(this->irqDMAtx);
	//HAL_NVIC_EnableIRQ(this->irqDMArx);

	if (this->dmaRx != true && this->dmaTx != true)
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 80054a2:	2b01      	cmp	r3, #1
 80054a4:	d00c      	beq.n	80054c0 <_ZN11RemoraComms18handleNssInterruptEv+0x38>
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	f893 3202 	ldrb.w	r3, [r3, #514]	@ 0x202
 80054ac:	2b01      	cmp	r3, #1
 80054ae:	d007      	beq.n	80054c0 <_ZN11RemoraComms18handleNssInterruptEv+0x38>
	{
		// DMA should have been handled by now
		this->dmaRx = false;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	2200      	movs	r2, #0
 80054b4:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
		this->dmaTx = false;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	2200      	movs	r2, #0
 80054bc:	f883 2202 	strb.w	r2, [r3, #514]	@ 0x202
		//printf("err\n");
		//return;
	}

	this->dmaRx = false;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	2200      	movs	r2, #0
 80054c4:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
	this->dmaTx = false;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	2200      	movs	r2, #0
 80054cc:	f883 2202 	strb.w	r2, [r3, #514]	@ 0x202
    // Get alternative buffers
    //rxBuffer = getAltRxBuffer(&rxPingPongBuffer);
    //txBuffer = getAltTxBuffer(&txPingPongBuffer);

    // Define aligned buffer addresses for DCache operations
    uint32_t* alignedRxBuffer = (uint32_t*)(((uint32_t)rxBuffer->rxBuffer) & ~(uint32_t)0x1F);
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054d4:	f023 031f 	bic.w	r3, r3, #31
 80054d8:	60fb      	str	r3, [r7, #12]
    uint32_t* alignedTxBuffer = (uint32_t*)(((uint32_t)txBuffer->txBuffer) & ~(uint32_t)0x1F);
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054de:	f023 031f 	bic.w	r3, r3, #31
 80054e2:	60bb      	str	r3, [r7, #8]

    // Invalidate the DCache for the received buffer
    //SCB_InvalidateDCache_by_Addr(alignedRxBuffer, BUFFER_ALIGNED_SIZE);

    // Handle different PRU header values
    switch (rxBuffer->header)
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	4a40      	ldr	r2, [pc, #256]	@ (80055ec <_ZN11RemoraComms18handleNssInterruptEv+0x164>)
 80054ec:	4293      	cmp	r3, r2
 80054ee:	d003      	beq.n	80054f8 <_ZN11RemoraComms18handleNssInterruptEv+0x70>
 80054f0:	4a3f      	ldr	r2, [pc, #252]	@ (80055f0 <_ZN11RemoraComms18handleNssInterruptEv+0x168>)
 80054f2:	4293      	cmp	r3, r2
 80054f4:	d005      	beq.n	8005502 <_ZN11RemoraComms18handleNssInterruptEv+0x7a>
 80054f6:	e052      	b.n	800559e <_ZN11RemoraComms18handleNssInterruptEv+0x116>
    {
        case PRU_READ:
            // Data is good, no buffer swap needed
        	//printf("r\n");
            this->SPIdata = true;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	2201      	movs	r2, #1
 80054fc:	f883 2203 	strb.w	r2, [r3, #515]	@ 0x203
            break;
 8005500:	e062      	b.n	80055c8 <_ZN11RemoraComms18handleNssInterruptEv+0x140>
*/
        case PRU_WRITE:

            // Disable and abort existing SPI and DMA
            //__HAL_SPI_DISABLE(&this->spiHandle);
            HAL_DMA_Abort(&this->hdma_spi_rx);
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 8005508:	4618      	mov	r0, r3
 800550a:	f001 fc09 	bl	8006d20 <HAL_DMA_Abort>
            HAL_DMA_Abort(&this->hdma_spi_tx);
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	33cc      	adds	r3, #204	@ 0xcc
 8005512:	4618      	mov	r0, r3
 8005514:	f001 fc04 	bl	8006d20 <HAL_DMA_Abort>
            // Perform a reset
            //__HAL_RCC_SPI1_FORCE_RESET();
            //__HAL_RCC_SPI1_RELEASE_RESET();

            // Reinitialize SPI and DMA
            if (HAL_SPI_Init(&this->spiHandle) != HAL_OK) {
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	3344      	adds	r3, #68	@ 0x44
 800551c:	4618      	mov	r0, r3
 800551e:	f008 fd87 	bl	800e030 <HAL_SPI_Init>
 8005522:	4603      	mov	r3, r0
 8005524:	2b00      	cmp	r3, #0
 8005526:	bf14      	ite	ne
 8005528:	2301      	movne	r3, #1
 800552a:	2300      	moveq	r3, #0
 800552c:	b2db      	uxtb	r3, r3
 800552e:	2b00      	cmp	r3, #0
 8005530:	d003      	beq.n	800553a <_ZN11RemoraComms18handleNssInterruptEv+0xb2>
                printf("SPI reinitialization failed!\n");
 8005532:	4830      	ldr	r0, [pc, #192]	@ (80055f4 <_ZN11RemoraComms18handleNssInterruptEv+0x16c>)
 8005534:	f00e f906 	bl	8013744 <puts>
                return;
 8005538:	e055      	b.n	80055e6 <_ZN11RemoraComms18handleNssInterruptEv+0x15e>
            }
            HAL_DMA_Init(&this->hdma_spi_rx);
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 8005540:	4618      	mov	r0, r3
 8005542:	f000 fe27 	bl	8006194 <HAL_DMA_Init>
            HAL_DMA_Init(&this->hdma_spi_tx);
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	33cc      	adds	r3, #204	@ 0xcc
 800554a:	4618      	mov	r0, r3
 800554c:	f000 fe22 	bl	8006194 <HAL_DMA_Init>

            // Swap and prepare buffers
            this->swapBuffers();
 8005550:	6878      	ldr	r0, [r7, #4]
 8005552:	f7ff ff79 	bl	8005448 <_ZN11RemoraComms11swapBuffersEv>

            rxBuffer = getAltRxBuffer(&rxPingPongBuffer);
 8005556:	4828      	ldr	r0, [pc, #160]	@ (80055f8 <_ZN11RemoraComms18handleNssInterruptEv+0x170>)
 8005558:	f7fc ff24 	bl	80023a4 <_Z14getAltRxBufferP16RxPingPongBuffer>
 800555c:	4602      	mov	r2, r0
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	629a      	str	r2, [r3, #40]	@ 0x28
            txBuffer = getAltTxBuffer(&txPingPongBuffer);
 8005562:	4826      	ldr	r0, [pc, #152]	@ (80055fc <_ZN11RemoraComms18handleNssInterruptEv+0x174>)
 8005564:	f7fc ff30 	bl	80023c8 <_Z14getAltTxBufferP16TxPingPongBuffer>
 8005568:	4602      	mov	r2, r0
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	62da      	str	r2, [r3, #44]	@ 0x2c

            // Restart SPI DMA communication
            if (HAL_SPI_TransmitReceive_DMA(&this->spiHandle, (uint8_t *)txBuffer->txBuffer, (uint8_t *)rxBuffer->rxBuffer, SPI_BUFF_SIZE) != HAL_OK) {
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	f103 0044 	add.w	r0, r3, #68	@ 0x44
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005578:	4619      	mov	r1, r3
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800557e:	461a      	mov	r2, r3
 8005580:	2340      	movs	r3, #64	@ 0x40
 8005582:	f008 fe83 	bl	800e28c <HAL_SPI_TransmitReceive_DMA>
 8005586:	4603      	mov	r3, r0
 8005588:	2b00      	cmp	r3, #0
 800558a:	bf14      	ite	ne
 800558c:	2301      	movne	r3, #1
 800558e:	2300      	moveq	r3, #0
 8005590:	b2db      	uxtb	r3, r3
 8005592:	2b00      	cmp	r3, #0
 8005594:	d015      	beq.n	80055c2 <_ZN11RemoraComms18handleNssInterruptEv+0x13a>
                printf("SPI DMA restart failed!\n");
 8005596:	481a      	ldr	r0, [pc, #104]	@ (8005600 <_ZN11RemoraComms18handleNssInterruptEv+0x178>)
 8005598:	f00e f8d4 	bl	8013744 <puts>
            }

            break;
 800559c:	e011      	b.n	80055c2 <_ZN11RemoraComms18handleNssInterruptEv+0x13a>


        default:
            // Invalid data, increment reject count
        	//printf("e\n");
            this->rejectCnt++;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 80055a4:	3301      	adds	r3, #1
 80055a6:	b2da      	uxtb	r2, r3
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
            if (this->rejectCnt > 5)
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 80055b4:	2b05      	cmp	r3, #5
 80055b6:	d906      	bls.n	80055c6 <_ZN11RemoraComms18handleNssInterruptEv+0x13e>
            {
                this->SPIdataError = true;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	2201      	movs	r2, #1
 80055bc:	f883 2204 	strb.w	r2, [r3, #516]	@ 0x204
            }
            break;
 80055c0:	e001      	b.n	80055c6 <_ZN11RemoraComms18handleNssInterruptEv+0x13e>
            break;
 80055c2:	bf00      	nop
 80055c4:	e000      	b.n	80055c8 <_ZN11RemoraComms18handleNssInterruptEv+0x140>
            break;
 80055c6:	bf00      	nop
    }

    // If needed, clean the TX buffer's DCache and swap it
    if (rxBuffer->header != PRU_READ)
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	4a07      	ldr	r2, [pc, #28]	@ (80055ec <_ZN11RemoraComms18handleNssInterruptEv+0x164>)
 80055d0:	4293      	cmp	r3, r2
 80055d2:	d002      	beq.n	80055da <_ZN11RemoraComms18handleNssInterruptEv+0x152>
    {
        //SCB_CleanDCache_by_Addr(alignedTxBuffer, BUFFER_ALIGNED_SIZE);
        this->swapBuffers();
 80055d4:	6878      	ldr	r0, [r7, #4]
 80055d6:	f7ff ff37 	bl	8005448 <_ZN11RemoraComms11swapBuffersEv>

    // Start SPI communication (DMA transfer)
    //this->dmaStatus = HAL_SPI_TransmitReceive_DMA(&this->spiHandle, (uint8_t *)txBuffer->txBuffer, (uint8_t *)rxBuffer->rxBuffer, SPI_BUFF_SIZE);

    //printf("%d\n", this->dmaStatus);
    this->pin2->set(0);
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	699b      	ldr	r3, [r3, #24]
 80055de:	2100      	movs	r1, #0
 80055e0:	4618      	mov	r0, r3
 80055e2:	f7ff fbaf 	bl	8004d44 <_ZN3Pin3setEb>
}
 80055e6:	3710      	adds	r7, #16
 80055e8:	46bd      	mov	sp, r7
 80055ea:	bd80      	pop	{r7, pc}
 80055ec:	72656164 	.word	0x72656164
 80055f0:	77726974 	.word	0x77726974
 80055f4:	080149ec 	.word	0x080149ec
 80055f8:	24000360 	.word	0x24000360
 80055fc:	24000400 	.word	0x24000400
 8005600:	08014a0c 	.word	0x08014a0c

08005604 <_ZN11RemoraComms17handleTxInterruptEv>:


void RemoraComms::handleTxInterrupt()
{
 8005604:	b580      	push	{r7, lr}
 8005606:	b082      	sub	sp, #8
 8005608:	af00      	add	r7, sp, #0
 800560a:	6078      	str	r0, [r7, #4]
	// Handle the DMA interrupt
	HAL_DMA_IRQHandler(&this->hdma_spi_tx);
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	33cc      	adds	r3, #204	@ 0xcc
 8005610:	4618      	mov	r0, r3
 8005612:	f001 fea3 	bl	800735c <HAL_DMA_IRQHandler>
	HAL_NVIC_EnableIRQ(this->irqDMAtx);
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 800561c:	4618      	mov	r0, r3
 800561e:	f000 fd22 	bl	8006066 <HAL_NVIC_EnableIRQ>

    this->dmaTx = true;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	2201      	movs	r2, #1
 8005626:	f883 2202 	strb.w	r2, [r3, #514]	@ 0x202
}
 800562a:	bf00      	nop
 800562c:	3708      	adds	r7, #8
 800562e:	46bd      	mov	sp, r7
 8005630:	bd80      	pop	{r7, pc}

08005632 <_ZN11RemoraComms17handleRxInterruptEv>:


void RemoraComms::handleRxInterrupt()
{
 8005632:	b580      	push	{r7, lr}
 8005634:	b082      	sub	sp, #8
 8005636:	af00      	add	r7, sp, #0
 8005638:	6078      	str	r0, [r7, #4]
	this->pin1->set(1);
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	695b      	ldr	r3, [r3, #20]
 800563e:	2101      	movs	r1, #1
 8005640:	4618      	mov	r0, r3
 8005642:	f7ff fb7f 	bl	8004d44 <_ZN3Pin3setEb>
	// Handle the DMA interrupt
	HAL_DMA_IRQHandler(&this->hdma_spi_rx);
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 800564c:	4618      	mov	r0, r3
 800564e:	f001 fe85 	bl	800735c <HAL_DMA_IRQHandler>
    HAL_NVIC_EnableIRQ(this->irqDMArx);
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8005658:	4618      	mov	r0, r3
 800565a:	f000 fd04 	bl	8006066 <HAL_NVIC_EnableIRQ>

    this->dmaRx = true;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	2201      	movs	r2, #1
 8005662:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
    this->pin1->set(0);
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	695b      	ldr	r3, [r3, #20]
 800566a:	2100      	movs	r1, #0
 800566c:	4618      	mov	r0, r3
 800566e:	f7ff fb69 	bl	8004d44 <_ZN3Pin3setEb>
}
 8005672:	bf00      	nop
 8005674:	3708      	adds	r7, #8
 8005676:	46bd      	mov	sp, r7
 8005678:	bd80      	pop	{r7, pc}

0800567a <_ZN11RemoraComms9getStatusEv>:


bool RemoraComms::getStatus(void)
{
 800567a:	b480      	push	{r7}
 800567c:	b083      	sub	sp, #12
 800567e:	af00      	add	r7, sp, #0
 8005680:	6078      	str	r0, [r7, #4]
    return this->SPIdata;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	f893 3203 	ldrb.w	r3, [r3, #515]	@ 0x203
}
 8005688:	4618      	mov	r0, r3
 800568a:	370c      	adds	r7, #12
 800568c:	46bd      	mov	sp, r7
 800568e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005692:	4770      	bx	lr

08005694 <_ZN11RemoraComms9setStatusEb>:

void RemoraComms::setStatus(bool status)
{
 8005694:	b480      	push	{r7}
 8005696:	b083      	sub	sp, #12
 8005698:	af00      	add	r7, sp, #0
 800569a:	6078      	str	r0, [r7, #4]
 800569c:	460b      	mov	r3, r1
 800569e:	70fb      	strb	r3, [r7, #3]
    this->SPIdata = status;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	78fa      	ldrb	r2, [r7, #3]
 80056a4:	f883 2203 	strb.w	r2, [r3, #515]	@ 0x203
}
 80056a8:	bf00      	nop
 80056aa:	370c      	adds	r7, #12
 80056ac:	46bd      	mov	sp, r7
 80056ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b2:	4770      	bx	lr

080056b4 <_ZN11RemoraComms8getErrorEv>:

bool RemoraComms::getError(void)
{
 80056b4:	b480      	push	{r7}
 80056b6:	b083      	sub	sp, #12
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	6078      	str	r0, [r7, #4]
    return this->SPIdataError;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	f893 3204 	ldrb.w	r3, [r3, #516]	@ 0x204
}
 80056c2:	4618      	mov	r0, r3
 80056c4:	370c      	adds	r7, #12
 80056c6:	46bd      	mov	sp, r7
 80056c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056cc:	4770      	bx	lr

080056ce <_ZN11RemoraComms8setErrorEb>:

void RemoraComms::setError(bool error)
{
 80056ce:	b480      	push	{r7}
 80056d0:	b083      	sub	sp, #12
 80056d2:	af00      	add	r7, sp, #0
 80056d4:	6078      	str	r0, [r7, #4]
 80056d6:	460b      	mov	r3, r1
 80056d8:	70fb      	strb	r3, [r7, #3]
    this->SPIdataError = error;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	78fa      	ldrb	r2, [r7, #3]
 80056de:	f883 2204 	strb.w	r2, [r3, #516]	@ 0x204
}
 80056e2:	bf00      	nop
 80056e4:	370c      	adds	r7, #12
 80056e6:	46bd      	mov	sp, r7
 80056e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ec:	4770      	bx	lr

080056ee <_ZN11RemoraComms6updateEv>:

void RemoraComms::update()
{
 80056ee:	b480      	push	{r7}
 80056f0:	b083      	sub	sp, #12
 80056f2:	af00      	add	r7, sp, #0
 80056f4:	6078      	str	r0, [r7, #4]
	// unused for RemoraComms
}
 80056f6:	bf00      	nop
 80056f8:	370c      	adds	r7, #12
 80056fa:	46bd      	mov	sp, r7
 80056fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005700:	4770      	bx	lr
	...

08005704 <_ZN11RemoraCommsD1Ev>:
#include "../../modules/moduleinterrupt.h"


#include "../../drivers/pin/pin.h"

class RemoraComms : public Module
 8005704:	b580      	push	{r7, lr}
 8005706:	b082      	sub	sp, #8
 8005708:	af00      	add	r7, sp, #0
 800570a:	6078      	str	r0, [r7, #4]
 800570c:	4a05      	ldr	r2, [pc, #20]	@ (8005724 <_ZN11RemoraCommsD1Ev+0x20>)
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	601a      	str	r2, [r3, #0]
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	4618      	mov	r0, r3
 8005716:	f7ff fb4d 	bl	8004db4 <_ZN6ModuleD1Ev>
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	4618      	mov	r0, r3
 800571e:	3708      	adds	r7, #8
 8005720:	46bd      	mov	sp, r7
 8005722:	bd80      	pop	{r7, pc}
 8005724:	08014b80 	.word	0x08014b80

08005728 <_ZN11RemoraCommsD0Ev>:
 8005728:	b580      	push	{r7, lr}
 800572a:	b082      	sub	sp, #8
 800572c:	af00      	add	r7, sp, #0
 800572e:	6078      	str	r0, [r7, #4]
 8005730:	6878      	ldr	r0, [r7, #4]
 8005732:	f7ff ffe7 	bl	8005704 <_ZN11RemoraCommsD1Ev>
 8005736:	2220      	movs	r2, #32
 8005738:	f44f 7108 	mov.w	r1, #544	@ 0x220
 800573c:	6878      	ldr	r0, [r7, #4]
 800573e:	f00d fbcc 	bl	8012eda <_ZdlPvjSt11align_val_t>
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	4618      	mov	r0, r3
 8005746:	3708      	adds	r7, #8
 8005748:	46bd      	mov	sp, r7
 800574a:	bd80      	pop	{r7, pc}

0800574c <_ZNSt12_Vector_baseIP6ModuleSaIS1_EEC1Ev>:
      allocator_type
      get_allocator() const _GLIBCXX_NOEXCEPT
      { return allocator_type(_M_get_Tp_allocator()); }

#if __cplusplus >= 201103L
      _Vector_base() = default;
 800574c:	b580      	push	{r7, lr}
 800574e:	b082      	sub	sp, #8
 8005750:	af00      	add	r7, sp, #0
 8005752:	6078      	str	r0, [r7, #4]
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	4618      	mov	r0, r3
 8005758:	f000 f8bc 	bl	80058d4 <_ZNSt12_Vector_baseIP6ModuleSaIS1_EE12_Vector_implC1Ev>
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	4618      	mov	r0, r3
 8005760:	3708      	adds	r7, #8
 8005762:	46bd      	mov	sp, r7
 8005764:	bd80      	pop	{r7, pc}

08005766 <_ZNSt6vectorIP6ModuleSaIS1_EEC1Ev>:

      /**
       *  @brief  Creates a %vector with no elements.
       */
#if __cplusplus >= 201103L
      vector() = default;
 8005766:	b580      	push	{r7, lr}
 8005768:	b082      	sub	sp, #8
 800576a:	af00      	add	r7, sp, #0
 800576c:	6078      	str	r0, [r7, #4]
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	4618      	mov	r0, r3
 8005772:	f7ff ffeb 	bl	800574c <_ZNSt12_Vector_baseIP6ModuleSaIS1_EEC1Ev>
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	4618      	mov	r0, r3
 800577a:	3708      	adds	r7, #8
 800577c:	46bd      	mov	sp, r7
 800577e:	bd80      	pop	{r7, pc}

08005780 <_ZN9pruThreadC1EP11TIM_TypeDef9IRQn_Typem>:


using namespace std;

// Thread constructor
pruThread::pruThread(TIM_TypeDef* timer, IRQn_Type irq, uint32_t frequency) :
 8005780:	b580      	push	{r7, lr}
 8005782:	b084      	sub	sp, #16
 8005784:	af00      	add	r7, sp, #0
 8005786:	60f8      	str	r0, [r7, #12]
 8005788:	60b9      	str	r1, [r7, #8]
 800578a:	603b      	str	r3, [r7, #0]
 800578c:	4613      	mov	r3, r2
 800578e:	80fb      	strh	r3, [r7, #6]
	timer(timer),
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	68ba      	ldr	r2, [r7, #8]
 8005794:	605a      	str	r2, [r3, #4]
	irq(irq),
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	88fa      	ldrh	r2, [r7, #6]
 800579a:	811a      	strh	r2, [r3, #8]
	frequency(frequency)
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	683a      	ldr	r2, [r7, #0]
 80057a0:	60da      	str	r2, [r3, #12]
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	3314      	adds	r3, #20
 80057a6:	4618      	mov	r0, r3
 80057a8:	f7ff ffdd 	bl	8005766 <_ZNSt6vectorIP6ModuleSaIS1_EEC1Ev>
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	3320      	adds	r3, #32
 80057b0:	4618      	mov	r0, r3
 80057b2:	f7ff ffd8 	bl	8005766 <_ZNSt6vectorIP6ModuleSaIS1_EEC1Ev>
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	332c      	adds	r3, #44	@ 0x2c
 80057ba:	4618      	mov	r0, r3
 80057bc:	f000 f89a 	bl	80058f4 <_ZN9__gnu_cxx17__normal_iteratorIPP6ModuleSt6vectorIS2_SaIS2_EEEC1Ev>
{
	printf("	Creating thread %lu\n", this->frequency);
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	68db      	ldr	r3, [r3, #12]
 80057c4:	4619      	mov	r1, r3
 80057c6:	4804      	ldr	r0, [pc, #16]	@ (80057d8 <_ZN9pruThreadC1EP11TIM_TypeDef9IRQn_Typem+0x58>)
 80057c8:	f00d ff4c 	bl	8013664 <iprintf>
}
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	4618      	mov	r0, r3
 80057d0:	3710      	adds	r7, #16
 80057d2:	46bd      	mov	sp, r7
 80057d4:	bd80      	pop	{r7, pc}
 80057d6:	bf00      	nop
 80057d8:	08014a58 	.word	0x08014a58

080057dc <_ZN9pruThread11startThreadEv>:

void pruThread::startThread(void)
{
 80057dc:	b590      	push	{r4, r7, lr}
 80057de:	b085      	sub	sp, #20
 80057e0:	af02      	add	r7, sp, #8
 80057e2:	6078      	str	r0, [r7, #4]
	TimerPtr = new pruTimer(this->timer, this->irq, this->frequency, this);
 80057e4:	2014      	movs	r0, #20
 80057e6:	f00d fb8a 	bl	8012efe <_Znwj>
 80057ea:	4603      	mov	r3, r0
 80057ec:	461c      	mov	r4, r3
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	6859      	ldr	r1, [r3, #4]
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	68d8      	ldr	r0, [r3, #12]
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	9300      	str	r3, [sp, #0]
 8005800:	4603      	mov	r3, r0
 8005802:	4620      	mov	r0, r4
 8005804:	f000 f93e 	bl	8005a84 <_ZN8pruTimerC1EP11TIM_TypeDef9IRQn_TypemP9pruThread>
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	601c      	str	r4, [r3, #0]
}
 800580c:	bf00      	nop
 800580e:	370c      	adds	r7, #12
 8005810:	46bd      	mov	sp, r7
 8005812:	bd90      	pop	{r4, r7, pc}

08005814 <_ZN9pruThread3runEv>:
	this->hasThreadPost = true;
}


void pruThread::run(void)
{
 8005814:	b590      	push	{r4, r7, lr}
 8005816:	b085      	sub	sp, #20
 8005818:	af00      	add	r7, sp, #0
 800581a:	6078      	str	r0, [r7, #4]
	// iterate over the Thread pointer vector to run all instances of Module::runModule()
	for (iter = vThread.begin(); iter != vThread.end(); ++iter) (*iter)->runModule();
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	3314      	adds	r3, #20
 8005820:	687c      	ldr	r4, [r7, #4]
 8005822:	4618      	mov	r0, r3
 8005824:	f000 f874 	bl	8005910 <_ZNSt6vectorIP6ModuleSaIS1_EE5beginEv>
 8005828:	62e0      	str	r0, [r4, #44]	@ 0x2c
 800582a:	e00e      	b.n	800584a <_ZN9pruThread3runEv+0x36>
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	332c      	adds	r3, #44	@ 0x2c
 8005830:	4618      	mov	r0, r3
 8005832:	f000 f8b6 	bl	80059a2 <_ZNK9__gnu_cxx17__normal_iteratorIPP6ModuleSt6vectorIS2_SaIS2_EEEdeEv>
 8005836:	4603      	mov	r3, r0
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	4618      	mov	r0, r3
 800583c:	f7ff fada 	bl	8004df4 <_ZN6Module9runModuleEv>
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	332c      	adds	r3, #44	@ 0x2c
 8005844:	4618      	mov	r0, r3
 8005846:	f000 f89c 	bl	8005982 <_ZN9__gnu_cxx17__normal_iteratorIPP6ModuleSt6vectorIS2_SaIS2_EEEppEv>
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	f103 042c 	add.w	r4, r3, #44	@ 0x2c
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	3314      	adds	r3, #20
 8005854:	4618      	mov	r0, r3
 8005856:	f000 f86b 	bl	8005930 <_ZNSt6vectorIP6ModuleSaIS1_EE3endEv>
 800585a:	4603      	mov	r3, r0
 800585c:	60bb      	str	r3, [r7, #8]
 800585e:	f107 0308 	add.w	r3, r7, #8
 8005862:	4619      	mov	r1, r3
 8005864:	4620      	mov	r0, r4
 8005866:	f000 f874 	bl	8005952 <_ZN9__gnu_cxxneIPP6ModuleSt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>
 800586a:	4603      	mov	r3, r0
 800586c:	2b00      	cmp	r3, #0
 800586e:	d1dd      	bne.n	800582c <_ZN9pruThread3runEv+0x18>

	// iterate over the second vector that contains module pointers to run after (post) the main vector
	if (hasThreadPost)
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	7c1b      	ldrb	r3, [r3, #16]
 8005874:	2b00      	cmp	r3, #0
 8005876:	d029      	beq.n	80058cc <_ZN9pruThread3runEv+0xb8>
	{
		for (iter = vThreadPost.begin(); iter != vThreadPost.end(); ++iter) (*iter)->runModulePost();
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	3320      	adds	r3, #32
 800587c:	687c      	ldr	r4, [r7, #4]
 800587e:	4618      	mov	r0, r3
 8005880:	f000 f846 	bl	8005910 <_ZNSt6vectorIP6ModuleSaIS1_EE5beginEv>
 8005884:	62e0      	str	r0, [r4, #44]	@ 0x2c
 8005886:	e00e      	b.n	80058a6 <_ZN9pruThread3runEv+0x92>
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	332c      	adds	r3, #44	@ 0x2c
 800588c:	4618      	mov	r0, r3
 800588e:	f000 f888 	bl	80059a2 <_ZNK9__gnu_cxx17__normal_iteratorIPP6ModuleSt6vectorIS2_SaIS2_EEEdeEv>
 8005892:	4603      	mov	r3, r0
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	4618      	mov	r0, r3
 8005898:	f7ff face 	bl	8004e38 <_ZN6Module13runModulePostEv>
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	332c      	adds	r3, #44	@ 0x2c
 80058a0:	4618      	mov	r0, r3
 80058a2:	f000 f86e 	bl	8005982 <_ZN9__gnu_cxx17__normal_iteratorIPP6ModuleSt6vectorIS2_SaIS2_EEEppEv>
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	f103 042c 	add.w	r4, r3, #44	@ 0x2c
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	3320      	adds	r3, #32
 80058b0:	4618      	mov	r0, r3
 80058b2:	f000 f83d 	bl	8005930 <_ZNSt6vectorIP6ModuleSaIS1_EE3endEv>
 80058b6:	4603      	mov	r3, r0
 80058b8:	60fb      	str	r3, [r7, #12]
 80058ba:	f107 030c 	add.w	r3, r7, #12
 80058be:	4619      	mov	r1, r3
 80058c0:	4620      	mov	r0, r4
 80058c2:	f000 f846 	bl	8005952 <_ZN9__gnu_cxxneIPP6ModuleSt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>
 80058c6:	4603      	mov	r3, r0
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d1dd      	bne.n	8005888 <_ZN9pruThread3runEv+0x74>
	}
}
 80058cc:	bf00      	nop
 80058ce:	3714      	adds	r7, #20
 80058d0:	46bd      	mov	sp, r7
 80058d2:	bd90      	pop	{r4, r7, pc}

080058d4 <_ZNSt12_Vector_baseIP6ModuleSaIS1_EE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 80058d4:	b580      	push	{r7, lr}
 80058d6:	b082      	sub	sp, #8
 80058d8:	af00      	add	r7, sp, #0
 80058da:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 80058dc:	6878      	ldr	r0, [r7, #4]
 80058de:	f000 f86c 	bl	80059ba <_ZNSaIP6ModuleEC1Ev>
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	4618      	mov	r0, r3
 80058e6:	f000 f874 	bl	80059d2 <_ZNSt12_Vector_baseIP6ModuleSaIS1_EE17_Vector_impl_dataC1Ev>
	{ }
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	4618      	mov	r0, r3
 80058ee:	3708      	adds	r7, #8
 80058f0:	46bd      	mov	sp, r7
 80058f2:	bd80      	pop	{r7, pc}

080058f4 <_ZN9__gnu_cxx17__normal_iteratorIPP6ModuleSt6vectorIS2_SaIS2_EEEC1Ev>:

#if __cplusplus > 201703L && __cpp_lib_concepts
      using iterator_concept = std::__detail::__iter_concept<_Iterator>;
#endif

      _GLIBCXX_CONSTEXPR __normal_iterator() _GLIBCXX_NOEXCEPT
 80058f4:	b480      	push	{r7}
 80058f6:	b083      	sub	sp, #12
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	6078      	str	r0, [r7, #4]
      : _M_current(_Iterator()) { }
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	2200      	movs	r2, #0
 8005900:	601a      	str	r2, [r3, #0]
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	4618      	mov	r0, r3
 8005906:	370c      	adds	r7, #12
 8005908:	46bd      	mov	sp, r7
 800590a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590e:	4770      	bx	lr

08005910 <_ZNSt6vectorIP6ModuleSaIS1_EE5beginEv>:
       *  element in the %vector.  Iteration is done in ordinary
       *  element order.
       */
      _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
      iterator
      begin() _GLIBCXX_NOEXCEPT
 8005910:	b580      	push	{r7, lr}
 8005912:	b084      	sub	sp, #16
 8005914:	af00      	add	r7, sp, #0
 8005916:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 8005918:	687a      	ldr	r2, [r7, #4]
 800591a:	f107 030c 	add.w	r3, r7, #12
 800591e:	4611      	mov	r1, r2
 8005920:	4618      	mov	r0, r3
 8005922:	f000 f86a 	bl	80059fa <_ZN9__gnu_cxx17__normal_iteratorIPP6ModuleSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	4618      	mov	r0, r3
 800592a:	3710      	adds	r7, #16
 800592c:	46bd      	mov	sp, r7
 800592e:	bd80      	pop	{r7, pc}

08005930 <_ZNSt6vectorIP6ModuleSaIS1_EE3endEv>:
       *  element in the %vector.  Iteration is done in ordinary
       *  element order.
       */
      _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
      iterator
      end() _GLIBCXX_NOEXCEPT
 8005930:	b580      	push	{r7, lr}
 8005932:	b084      	sub	sp, #16
 8005934:	af00      	add	r7, sp, #0
 8005936:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	1d1a      	adds	r2, r3, #4
 800593c:	f107 030c 	add.w	r3, r7, #12
 8005940:	4611      	mov	r1, r2
 8005942:	4618      	mov	r0, r3
 8005944:	f000 f859 	bl	80059fa <_ZN9__gnu_cxx17__normal_iteratorIPP6ModuleSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	4618      	mov	r0, r3
 800594c:	3710      	adds	r7, #16
 800594e:	46bd      	mov	sp, r7
 8005950:	bd80      	pop	{r7, pc}

08005952 <_ZN9__gnu_cxxneIPP6ModuleSt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>:
    { return __lhs.base() != __rhs.base(); }

  template<typename _Iterator, typename _Container>
    _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
    inline bool
    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
 8005952:	b590      	push	{r4, r7, lr}
 8005954:	b083      	sub	sp, #12
 8005956:	af00      	add	r7, sp, #0
 8005958:	6078      	str	r0, [r7, #4]
 800595a:	6039      	str	r1, [r7, #0]
	       const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() != __rhs.base(); }
 800595c:	6878      	ldr	r0, [r7, #4]
 800595e:	f000 f85c 	bl	8005a1a <_ZNK9__gnu_cxx17__normal_iteratorIPP6ModuleSt6vectorIS2_SaIS2_EEE4baseEv>
 8005962:	4603      	mov	r3, r0
 8005964:	681c      	ldr	r4, [r3, #0]
 8005966:	6838      	ldr	r0, [r7, #0]
 8005968:	f000 f857 	bl	8005a1a <_ZNK9__gnu_cxx17__normal_iteratorIPP6ModuleSt6vectorIS2_SaIS2_EEE4baseEv>
 800596c:	4603      	mov	r3, r0
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	429c      	cmp	r4, r3
 8005972:	bf14      	ite	ne
 8005974:	2301      	movne	r3, #1
 8005976:	2300      	moveq	r3, #0
 8005978:	b2db      	uxtb	r3, r3
 800597a:	4618      	mov	r0, r3
 800597c:	370c      	adds	r7, #12
 800597e:	46bd      	mov	sp, r7
 8005980:	bd90      	pop	{r4, r7, pc}

08005982 <_ZN9__gnu_cxx17__normal_iteratorIPP6ModuleSt6vectorIS2_SaIS2_EEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 8005982:	b480      	push	{r7}
 8005984:	b083      	sub	sp, #12
 8005986:	af00      	add	r7, sp, #0
 8005988:	6078      	str	r0, [r7, #4]
	++_M_current;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	1d1a      	adds	r2, r3, #4
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	601a      	str	r2, [r3, #0]
	return *this;
 8005994:	687b      	ldr	r3, [r7, #4]
      }
 8005996:	4618      	mov	r0, r3
 8005998:	370c      	adds	r7, #12
 800599a:	46bd      	mov	sp, r7
 800599c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a0:	4770      	bx	lr

080059a2 <_ZNK9__gnu_cxx17__normal_iteratorIPP6ModuleSt6vectorIS2_SaIS2_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 80059a2:	b480      	push	{r7}
 80059a4:	b083      	sub	sp, #12
 80059a6:	af00      	add	r7, sp, #0
 80059a8:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	4618      	mov	r0, r3
 80059b0:	370c      	adds	r7, #12
 80059b2:	46bd      	mov	sp, r7
 80059b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b8:	4770      	bx	lr

080059ba <_ZNSaIP6ModuleEC1Ev>:
#endif

      // _GLIBCXX_RESOLVE_LIB_DEFECTS
      // 3035. std::allocator's constructors should be constexpr
      _GLIBCXX20_CONSTEXPR
      allocator() _GLIBCXX_NOTHROW { }
 80059ba:	b580      	push	{r7, lr}
 80059bc:	b082      	sub	sp, #8
 80059be:	af00      	add	r7, sp, #0
 80059c0:	6078      	str	r0, [r7, #4]
 80059c2:	6878      	ldr	r0, [r7, #4]
 80059c4:	f000 f834 	bl	8005a30 <_ZNSt15__new_allocatorIP6ModuleEC1Ev>
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	4618      	mov	r0, r3
 80059cc:	3708      	adds	r7, #8
 80059ce:	46bd      	mov	sp, r7
 80059d0:	bd80      	pop	{r7, pc}

080059d2 <_ZNSt12_Vector_baseIP6ModuleSaIS1_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 80059d2:	b480      	push	{r7}
 80059d4:	b083      	sub	sp, #12
 80059d6:	af00      	add	r7, sp, #0
 80059d8:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	2200      	movs	r2, #0
 80059de:	601a      	str	r2, [r3, #0]
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	2200      	movs	r2, #0
 80059e4:	605a      	str	r2, [r3, #4]
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	2200      	movs	r2, #0
 80059ea:	609a      	str	r2, [r3, #8]
	{ }
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	4618      	mov	r0, r3
 80059f0:	370c      	adds	r7, #12
 80059f2:	46bd      	mov	sp, r7
 80059f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f8:	4770      	bx	lr

080059fa <_ZN9__gnu_cxx17__normal_iteratorIPP6ModuleSt6vectorIS2_SaIS2_EEEC1ERKS3_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 80059fa:	b480      	push	{r7}
 80059fc:	b083      	sub	sp, #12
 80059fe:	af00      	add	r7, sp, #0
 8005a00:	6078      	str	r0, [r7, #4]
 8005a02:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8005a04:	683b      	ldr	r3, [r7, #0]
 8005a06:	681a      	ldr	r2, [r3, #0]
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	601a      	str	r2, [r3, #0]
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	4618      	mov	r0, r3
 8005a10:	370c      	adds	r7, #12
 8005a12:	46bd      	mov	sp, r7
 8005a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a18:	4770      	bx	lr

08005a1a <_ZNK9__gnu_cxx17__normal_iteratorIPP6ModuleSt6vectorIS2_SaIS2_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 8005a1a:	b480      	push	{r7}
 8005a1c:	b083      	sub	sp, #12
 8005a1e:	af00      	add	r7, sp, #0
 8005a20:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	4618      	mov	r0, r3
 8005a26:	370c      	adds	r7, #12
 8005a28:	46bd      	mov	sp, r7
 8005a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a2e:	4770      	bx	lr

08005a30 <_ZNSt15__new_allocatorIP6ModuleEC1Ev>:
      // 2103. propagate_on_container_move_assignment
      typedef std::true_type propagate_on_container_move_assignment;
#endif

      _GLIBCXX20_CONSTEXPR
      __new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8005a30:	b480      	push	{r7}
 8005a32:	b083      	sub	sp, #12
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	6078      	str	r0, [r7, #4]
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	4618      	mov	r0, r3
 8005a3c:	370c      	adds	r7, #12
 8005a3e:	46bd      	mov	sp, r7
 8005a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a44:	4770      	bx	lr
	...

08005a48 <__NVIC_EnableIRQ>:
{
 8005a48:	b480      	push	{r7}
 8005a4a:	b083      	sub	sp, #12
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	4603      	mov	r3, r0
 8005a50:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005a52:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	db0b      	blt.n	8005a72 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005a5a:	88fb      	ldrh	r3, [r7, #6]
 8005a5c:	f003 021f 	and.w	r2, r3, #31
 8005a60:	4907      	ldr	r1, [pc, #28]	@ (8005a80 <__NVIC_EnableIRQ+0x38>)
 8005a62:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005a66:	095b      	lsrs	r3, r3, #5
 8005a68:	2001      	movs	r0, #1
 8005a6a:	fa00 f202 	lsl.w	r2, r0, r2
 8005a6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8005a72:	bf00      	nop
 8005a74:	370c      	adds	r7, #12
 8005a76:	46bd      	mov	sp, r7
 8005a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7c:	4770      	bx	lr
 8005a7e:	bf00      	nop
 8005a80:	e000e100 	.word	0xe000e100

08005a84 <_ZN8pruTimerC1EP11TIM_TypeDef9IRQn_TypemP9pruThread>:
#include "pruThread.h"



// Timer constructor
pruTimer::pruTimer(TIM_TypeDef* timer, IRQn_Type irq, uint32_t frequency, pruThread* ownerPtr):
 8005a84:	b590      	push	{r4, r7, lr}
 8005a86:	b085      	sub	sp, #20
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	60f8      	str	r0, [r7, #12]
 8005a8c:	60b9      	str	r1, [r7, #8]
 8005a8e:	603b      	str	r3, [r7, #0]
 8005a90:	4613      	mov	r3, r2
 8005a92:	80fb      	strh	r3, [r7, #6]
	timer(timer),
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	68ba      	ldr	r2, [r7, #8]
 8005a98:	605a      	str	r2, [r3, #4]
	irq(irq),
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	88fa      	ldrh	r2, [r7, #6]
 8005a9e:	811a      	strh	r2, [r3, #8]
	frequency(frequency),
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	683a      	ldr	r2, [r7, #0]
 8005aa4:	60da      	str	r2, [r3, #12]
	timerOwnerPtr(ownerPtr)
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	6a3a      	ldr	r2, [r7, #32]
 8005aaa:	611a      	str	r2, [r3, #16]
{
	interruptPtr = new TimerInterrupt(this->irq, this);	// Instantiate a new Timer Interrupt object and pass "this" pointer
 8005aac:	2008      	movs	r0, #8
 8005aae:	f00d fa26 	bl	8012efe <_Znwj>
 8005ab2:	4603      	mov	r3, r0
 8005ab4:	461c      	mov	r4, r3
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8005abc:	68fa      	ldr	r2, [r7, #12]
 8005abe:	4619      	mov	r1, r3
 8005ac0:	4620      	mov	r0, r4
 8005ac2:	f000 f8af 	bl	8005c24 <_ZN14TimerInterruptC1EiP8pruTimer>
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	601c      	str	r4, [r3, #0]

	this->startTimer();
 8005aca:	68f8      	ldr	r0, [r7, #12]
 8005acc:	f000 f812 	bl	8005af4 <_ZN8pruTimer10startTimerEv>
}
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	4618      	mov	r0, r3
 8005ad4:	3714      	adds	r7, #20
 8005ad6:	46bd      	mov	sp, r7
 8005ad8:	bd90      	pop	{r4, r7, pc}

08005ada <_ZN8pruTimer9timerTickEv>:


void pruTimer::timerTick(void)
{
 8005ada:	b580      	push	{r7, lr}
 8005adc:	b082      	sub	sp, #8
 8005ade:	af00      	add	r7, sp, #0
 8005ae0:	6078      	str	r0, [r7, #4]
	//Do something here
	this->timerOwnerPtr->run();
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	691b      	ldr	r3, [r3, #16]
 8005ae6:	4618      	mov	r0, r3
 8005ae8:	f7ff fe94 	bl	8005814 <_ZN9pruThread3runEv>
}
 8005aec:	bf00      	nop
 8005aee:	3708      	adds	r7, #8
 8005af0:	46bd      	mov	sp, r7
 8005af2:	bd80      	pop	{r7, pc}

08005af4 <_ZN8pruTimer10startTimerEv>:



void pruTimer::startTimer(void)
{
 8005af4:	b580      	push	{r7, lr}
 8005af6:	b086      	sub	sp, #24
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	6078      	str	r0, [r7, #4]
    uint32_t TIM_CLK;

    if (this->timer == TIM2)
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	685b      	ldr	r3, [r3, #4]
 8005b00:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005b04:	d116      	bne.n	8005b34 <_ZN8pruTimer10startTimerEv+0x40>
    {
        printf("	power on Timer 2\n\r");
 8005b06:	483f      	ldr	r0, [pc, #252]	@ (8005c04 <_ZN8pruTimer10startTimerEv+0x110>)
 8005b08:	f00d fdac 	bl	8013664 <iprintf>
        __HAL_RCC_TIM2_CLK_ENABLE();
 8005b0c:	4b3e      	ldr	r3, [pc, #248]	@ (8005c08 <_ZN8pruTimer10startTimerEv+0x114>)
 8005b0e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005b12:	4a3d      	ldr	r2, [pc, #244]	@ (8005c08 <_ZN8pruTimer10startTimerEv+0x114>)
 8005b14:	f043 0301 	orr.w	r3, r3, #1
 8005b18:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8005b1c:	4b3a      	ldr	r3, [pc, #232]	@ (8005c08 <_ZN8pruTimer10startTimerEv+0x114>)
 8005b1e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005b22:	f003 0301 	and.w	r3, r3, #1
 8005b26:	613b      	str	r3, [r7, #16]
 8005b28:	693b      	ldr	r3, [r7, #16]
        TIM_CLK = APB1CLK;
 8005b2a:	4b38      	ldr	r3, [pc, #224]	@ (8005c0c <_ZN8pruTimer10startTimerEv+0x118>)
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	085b      	lsrs	r3, r3, #1
 8005b30:	617b      	str	r3, [r7, #20]
 8005b32:	e036      	b.n	8005ba2 <_ZN8pruTimer10startTimerEv+0xae>
    }
    else if (this->timer == TIM3)
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	685b      	ldr	r3, [r3, #4]
 8005b38:	4a35      	ldr	r2, [pc, #212]	@ (8005c10 <_ZN8pruTimer10startTimerEv+0x11c>)
 8005b3a:	4293      	cmp	r3, r2
 8005b3c:	d116      	bne.n	8005b6c <_ZN8pruTimer10startTimerEv+0x78>
    {
        printf("	power on Timer 3\n\r");
 8005b3e:	4835      	ldr	r0, [pc, #212]	@ (8005c14 <_ZN8pruTimer10startTimerEv+0x120>)
 8005b40:	f00d fd90 	bl	8013664 <iprintf>
        __HAL_RCC_TIM3_CLK_ENABLE();
 8005b44:	4b30      	ldr	r3, [pc, #192]	@ (8005c08 <_ZN8pruTimer10startTimerEv+0x114>)
 8005b46:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005b4a:	4a2f      	ldr	r2, [pc, #188]	@ (8005c08 <_ZN8pruTimer10startTimerEv+0x114>)
 8005b4c:	f043 0302 	orr.w	r3, r3, #2
 8005b50:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8005b54:	4b2c      	ldr	r3, [pc, #176]	@ (8005c08 <_ZN8pruTimer10startTimerEv+0x114>)
 8005b56:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005b5a:	f003 0302 	and.w	r3, r3, #2
 8005b5e:	60fb      	str	r3, [r7, #12]
 8005b60:	68fb      	ldr	r3, [r7, #12]
        TIM_CLK = APB1CLK;
 8005b62:	4b2a      	ldr	r3, [pc, #168]	@ (8005c0c <_ZN8pruTimer10startTimerEv+0x118>)
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	085b      	lsrs	r3, r3, #1
 8005b68:	617b      	str	r3, [r7, #20]
 8005b6a:	e01a      	b.n	8005ba2 <_ZN8pruTimer10startTimerEv+0xae>
    }
    else if (this->timer == TIM4)
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	685b      	ldr	r3, [r3, #4]
 8005b70:	4a29      	ldr	r2, [pc, #164]	@ (8005c18 <_ZN8pruTimer10startTimerEv+0x124>)
 8005b72:	4293      	cmp	r3, r2
 8005b74:	d115      	bne.n	8005ba2 <_ZN8pruTimer10startTimerEv+0xae>
    {
        printf("	power on Timer 4\n\r");
 8005b76:	4829      	ldr	r0, [pc, #164]	@ (8005c1c <_ZN8pruTimer10startTimerEv+0x128>)
 8005b78:	f00d fd74 	bl	8013664 <iprintf>
        __HAL_RCC_TIM4_CLK_ENABLE();
 8005b7c:	4b22      	ldr	r3, [pc, #136]	@ (8005c08 <_ZN8pruTimer10startTimerEv+0x114>)
 8005b7e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005b82:	4a21      	ldr	r2, [pc, #132]	@ (8005c08 <_ZN8pruTimer10startTimerEv+0x114>)
 8005b84:	f043 0304 	orr.w	r3, r3, #4
 8005b88:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8005b8c:	4b1e      	ldr	r3, [pc, #120]	@ (8005c08 <_ZN8pruTimer10startTimerEv+0x114>)
 8005b8e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005b92:	f003 0304 	and.w	r3, r3, #4
 8005b96:	60bb      	str	r3, [r7, #8]
 8005b98:	68bb      	ldr	r3, [r7, #8]
        TIM_CLK = APB1CLK;
 8005b9a:	4b1c      	ldr	r3, [pc, #112]	@ (8005c0c <_ZN8pruTimer10startTimerEv+0x118>)
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	085b      	lsrs	r3, r3, #1
 8005ba0:	617b      	str	r3, [r7, #20]
    }

    //timer update frequency = TIM_CLK/(TIM_PSC+1)/(TIM_ARR + 1)

    this->timer->CR2 &= 0;                                            // UG used as trigg output
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	685b      	ldr	r3, [r3, #4]
 8005ba6:	685b      	ldr	r3, [r3, #4]
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	685b      	ldr	r3, [r3, #4]
 8005bac:	2200      	movs	r2, #0
 8005bae:	605a      	str	r2, [r3, #4]
    this->timer->PSC = TIM_PSC-1;                                     // prescaler
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	685b      	ldr	r3, [r3, #4]
 8005bb4:	2200      	movs	r2, #0
 8005bb6:	629a      	str	r2, [r3, #40]	@ 0x28
    this->timer->ARR = ((TIM_CLK / TIM_PSC / this->frequency) - 1);   // period           
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	68db      	ldr	r3, [r3, #12]
 8005bbc:	697a      	ldr	r2, [r7, #20]
 8005bbe:	fbb2 f2f3 	udiv	r2, r2, r3
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	685b      	ldr	r3, [r3, #4]
 8005bc6:	3a01      	subs	r2, #1
 8005bc8:	62da      	str	r2, [r3, #44]	@ 0x2c
    this->timer->EGR = TIM_EGR_UG;                                    // reinit the counter
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	685b      	ldr	r3, [r3, #4]
 8005bce:	2201      	movs	r2, #1
 8005bd0:	615a      	str	r2, [r3, #20]
    this->timer->DIER = TIM_DIER_UIE;                                 // enable update interrupts
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	685b      	ldr	r3, [r3, #4]
 8005bd6:	2201      	movs	r2, #1
 8005bd8:	60da      	str	r2, [r3, #12]

    this->timer->CR1 |= TIM_CR1_CEN;                                  // enable timer
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	685b      	ldr	r3, [r3, #4]
 8005bde:	681a      	ldr	r2, [r3, #0]
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	685b      	ldr	r3, [r3, #4]
 8005be4:	f042 0201 	orr.w	r2, r2, #1
 8005be8:	601a      	str	r2, [r3, #0]

    NVIC_EnableIRQ(this->irq);
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8005bf0:	4618      	mov	r0, r3
 8005bf2:	f7ff ff29 	bl	8005a48 <__NVIC_EnableIRQ>

    printf("	timer started\n");
 8005bf6:	480a      	ldr	r0, [pc, #40]	@ (8005c20 <_ZN8pruTimer10startTimerEv+0x12c>)
 8005bf8:	f00d fda4 	bl	8013744 <puts>
}
 8005bfc:	bf00      	nop
 8005bfe:	3718      	adds	r7, #24
 8005c00:	46bd      	mov	sp, r7
 8005c02:	bd80      	pop	{r7, pc}
 8005c04:	08014a8c 	.word	0x08014a8c
 8005c08:	58024400 	.word	0x58024400
 8005c0c:	24000058 	.word	0x24000058
 8005c10:	40000400 	.word	0x40000400
 8005c14:	08014aa0 	.word	0x08014aa0
 8005c18:	40000800 	.word	0x40000800
 8005c1c:	08014ab4 	.word	0x08014ab4
 8005c20:	08014ac8 	.word	0x08014ac8

08005c24 <_ZN14TimerInterruptC1EiP8pruTimer>:
#include "../interrupt/interrupt.h"
#include "timerInterrupt.h"
#include "timer.h"


TimerInterrupt::TimerInterrupt(int interruptNumber, pruTimer* owner)
 8005c24:	b580      	push	{r7, lr}
 8005c26:	b084      	sub	sp, #16
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	60f8      	str	r0, [r7, #12]
 8005c2c:	60b9      	str	r1, [r7, #8]
 8005c2e:	607a      	str	r2, [r7, #4]
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	4618      	mov	r0, r3
 8005c34:	f7fb f83e 	bl	8000cb4 <_ZN9InterruptC1Ev>
 8005c38:	4a07      	ldr	r2, [pc, #28]	@ (8005c58 <_ZN14TimerInterruptC1EiP8pruTimer+0x34>)
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	601a      	str	r2, [r3, #0]
{
	// Allows interrupt to access owner's data
	InterruptOwnerPtr = owner;
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	687a      	ldr	r2, [r7, #4]
 8005c42:	605a      	str	r2, [r3, #4]

	// When a device interrupt object is instantiated, the Register function must be called to let the
	// Interrupt base class know that there is an appropriate ISR function for the given interrupt.
	Interrupt::Register(interruptNumber, this);
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	4619      	mov	r1, r3
 8005c48:	68b8      	ldr	r0, [r7, #8]
 8005c4a:	f7fb f843 	bl	8000cd4 <_ZN9Interrupt8RegisterEiPS_>
}
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	4618      	mov	r0, r3
 8005c52:	3710      	adds	r7, #16
 8005c54:	46bd      	mov	sp, r7
 8005c56:	bd80      	pop	{r7, pc}
 8005c58:	08014ba4 	.word	0x08014ba4

08005c5c <_ZN14TimerInterrupt11ISR_HandlerEv>:


void TimerInterrupt::ISR_Handler(void)
{
 8005c5c:	b580      	push	{r7, lr}
 8005c5e:	b082      	sub	sp, #8
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	6078      	str	r0, [r7, #4]
	this->InterruptOwnerPtr->timerTick();
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	685b      	ldr	r3, [r3, #4]
 8005c68:	4618      	mov	r0, r3
 8005c6a:	f7ff ff36 	bl	8005ada <_ZN8pruTimer9timerTickEv>
}
 8005c6e:	bf00      	nop
 8005c70:	3708      	adds	r7, #8
 8005c72:	46bd      	mov	sp, r7
 8005c74:	bd80      	pop	{r7, pc}
	...

08005c78 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8005c78:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8005cb0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8005c7c:	f7fe ffda 	bl	8004c34 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005c80:	480c      	ldr	r0, [pc, #48]	@ (8005cb4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8005c82:	490d      	ldr	r1, [pc, #52]	@ (8005cb8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8005c84:	4a0d      	ldr	r2, [pc, #52]	@ (8005cbc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8005c86:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005c88:	e002      	b.n	8005c90 <LoopCopyDataInit>

08005c8a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005c8a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005c8c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005c8e:	3304      	adds	r3, #4

08005c90 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005c90:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005c92:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005c94:	d3f9      	bcc.n	8005c8a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005c96:	4a0a      	ldr	r2, [pc, #40]	@ (8005cc0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8005c98:	4c0a      	ldr	r4, [pc, #40]	@ (8005cc4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8005c9a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005c9c:	e001      	b.n	8005ca2 <LoopFillZerobss>

08005c9e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005c9e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005ca0:	3204      	adds	r2, #4

08005ca2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005ca2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005ca4:	d3fb      	bcc.n	8005c9e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8005ca6:	f00d feef 	bl	8013a88 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005caa:	f7fc f9d7 	bl	800205c <main>
  bx  lr
 8005cae:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8005cb0:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8005cb4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8005cb8:	240000c4 	.word	0x240000c4
  ldr r2, =_sidata
 8005cbc:	08014cec 	.word	0x08014cec
  ldr r2, =_sbss
 8005cc0:	240000e0 	.word	0x240000e0
  ldr r4, =_ebss
 8005cc4:	24000ed8 	.word	0x24000ed8

08005cc8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005cc8:	e7fe      	b.n	8005cc8 <ADC3_IRQHandler>
	...

08005ccc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005ccc:	b580      	push	{r7, lr}
 8005cce:	b082      	sub	sp, #8
 8005cd0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005cd2:	2003      	movs	r0, #3
 8005cd4:	f000 f9a2 	bl	800601c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005cd8:	f003 fe72 	bl	80099c0 <HAL_RCC_GetSysClockFreq>
 8005cdc:	4602      	mov	r2, r0
 8005cde:	4b15      	ldr	r3, [pc, #84]	@ (8005d34 <HAL_Init+0x68>)
 8005ce0:	699b      	ldr	r3, [r3, #24]
 8005ce2:	0a1b      	lsrs	r3, r3, #8
 8005ce4:	f003 030f 	and.w	r3, r3, #15
 8005ce8:	4913      	ldr	r1, [pc, #76]	@ (8005d38 <HAL_Init+0x6c>)
 8005cea:	5ccb      	ldrb	r3, [r1, r3]
 8005cec:	f003 031f 	and.w	r3, r3, #31
 8005cf0:	fa22 f303 	lsr.w	r3, r2, r3
 8005cf4:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005cf6:	4b0f      	ldr	r3, [pc, #60]	@ (8005d34 <HAL_Init+0x68>)
 8005cf8:	699b      	ldr	r3, [r3, #24]
 8005cfa:	f003 030f 	and.w	r3, r3, #15
 8005cfe:	4a0e      	ldr	r2, [pc, #56]	@ (8005d38 <HAL_Init+0x6c>)
 8005d00:	5cd3      	ldrb	r3, [r2, r3]
 8005d02:	f003 031f 	and.w	r3, r3, #31
 8005d06:	687a      	ldr	r2, [r7, #4]
 8005d08:	fa22 f303 	lsr.w	r3, r2, r3
 8005d0c:	4a0b      	ldr	r2, [pc, #44]	@ (8005d3c <HAL_Init+0x70>)
 8005d0e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005d10:	4a0b      	ldr	r2, [pc, #44]	@ (8005d40 <HAL_Init+0x74>)
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8005d16:	200f      	movs	r0, #15
 8005d18:	f000 f814 	bl	8005d44 <HAL_InitTick>
 8005d1c:	4603      	mov	r3, r0
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d001      	beq.n	8005d26 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8005d22:	2301      	movs	r3, #1
 8005d24:	e002      	b.n	8005d2c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8005d26:	f7fe fd6b 	bl	8004800 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005d2a:	2300      	movs	r3, #0
}
 8005d2c:	4618      	mov	r0, r3
 8005d2e:	3708      	adds	r7, #8
 8005d30:	46bd      	mov	sp, r7
 8005d32:	bd80      	pop	{r7, pc}
 8005d34:	58024400 	.word	0x58024400
 8005d38:	08014b38 	.word	0x08014b38
 8005d3c:	2400005c 	.word	0x2400005c
 8005d40:	24000058 	.word	0x24000058

08005d44 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005d44:	b580      	push	{r7, lr}
 8005d46:	b082      	sub	sp, #8
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8005d4c:	4b15      	ldr	r3, [pc, #84]	@ (8005da4 <HAL_InitTick+0x60>)
 8005d4e:	781b      	ldrb	r3, [r3, #0]
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d101      	bne.n	8005d58 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8005d54:	2301      	movs	r3, #1
 8005d56:	e021      	b.n	8005d9c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8005d58:	4b13      	ldr	r3, [pc, #76]	@ (8005da8 <HAL_InitTick+0x64>)
 8005d5a:	681a      	ldr	r2, [r3, #0]
 8005d5c:	4b11      	ldr	r3, [pc, #68]	@ (8005da4 <HAL_InitTick+0x60>)
 8005d5e:	781b      	ldrb	r3, [r3, #0]
 8005d60:	4619      	mov	r1, r3
 8005d62:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8005d66:	fbb3 f3f1 	udiv	r3, r3, r1
 8005d6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d6e:	4618      	mov	r0, r3
 8005d70:	f000 f98b 	bl	800608a <HAL_SYSTICK_Config>
 8005d74:	4603      	mov	r3, r0
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d001      	beq.n	8005d7e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8005d7a:	2301      	movs	r3, #1
 8005d7c:	e00e      	b.n	8005d9c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	2b0f      	cmp	r3, #15
 8005d82:	d80a      	bhi.n	8005d9a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005d84:	2200      	movs	r2, #0
 8005d86:	6879      	ldr	r1, [r7, #4]
 8005d88:	f04f 30ff 	mov.w	r0, #4294967295
 8005d8c:	f000 f951 	bl	8006032 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005d90:	4a06      	ldr	r2, [pc, #24]	@ (8005dac <HAL_InitTick+0x68>)
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005d96:	2300      	movs	r3, #0
 8005d98:	e000      	b.n	8005d9c <HAL_InitTick+0x58>
    return HAL_ERROR;
 8005d9a:	2301      	movs	r3, #1
}
 8005d9c:	4618      	mov	r0, r3
 8005d9e:	3708      	adds	r7, #8
 8005da0:	46bd      	mov	sp, r7
 8005da2:	bd80      	pop	{r7, pc}
 8005da4:	24000064 	.word	0x24000064
 8005da8:	24000058 	.word	0x24000058
 8005dac:	24000060 	.word	0x24000060

08005db0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005db0:	b480      	push	{r7}
 8005db2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8005db4:	4b06      	ldr	r3, [pc, #24]	@ (8005dd0 <HAL_IncTick+0x20>)
 8005db6:	781b      	ldrb	r3, [r3, #0]
 8005db8:	461a      	mov	r2, r3
 8005dba:	4b06      	ldr	r3, [pc, #24]	@ (8005dd4 <HAL_IncTick+0x24>)
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	4413      	add	r3, r2
 8005dc0:	4a04      	ldr	r2, [pc, #16]	@ (8005dd4 <HAL_IncTick+0x24>)
 8005dc2:	6013      	str	r3, [r2, #0]
}
 8005dc4:	bf00      	nop
 8005dc6:	46bd      	mov	sp, r7
 8005dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dcc:	4770      	bx	lr
 8005dce:	bf00      	nop
 8005dd0:	24000064 	.word	0x24000064
 8005dd4:	240006e0 	.word	0x240006e0

08005dd8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005dd8:	b480      	push	{r7}
 8005dda:	af00      	add	r7, sp, #0
  return uwTick;
 8005ddc:	4b03      	ldr	r3, [pc, #12]	@ (8005dec <HAL_GetTick+0x14>)
 8005dde:	681b      	ldr	r3, [r3, #0]
}
 8005de0:	4618      	mov	r0, r3
 8005de2:	46bd      	mov	sp, r7
 8005de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de8:	4770      	bx	lr
 8005dea:	bf00      	nop
 8005dec:	240006e0 	.word	0x240006e0

08005df0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005df0:	b580      	push	{r7, lr}
 8005df2:	b084      	sub	sp, #16
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005df8:	f7ff ffee 	bl	8005dd8 <HAL_GetTick>
 8005dfc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e08:	d005      	beq.n	8005e16 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005e0a:	4b0a      	ldr	r3, [pc, #40]	@ (8005e34 <HAL_Delay+0x44>)
 8005e0c:	781b      	ldrb	r3, [r3, #0]
 8005e0e:	461a      	mov	r2, r3
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	4413      	add	r3, r2
 8005e14:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005e16:	bf00      	nop
 8005e18:	f7ff ffde 	bl	8005dd8 <HAL_GetTick>
 8005e1c:	4602      	mov	r2, r0
 8005e1e:	68bb      	ldr	r3, [r7, #8]
 8005e20:	1ad3      	subs	r3, r2, r3
 8005e22:	68fa      	ldr	r2, [r7, #12]
 8005e24:	429a      	cmp	r2, r3
 8005e26:	d8f7      	bhi.n	8005e18 <HAL_Delay+0x28>
  {
  }
}
 8005e28:	bf00      	nop
 8005e2a:	bf00      	nop
 8005e2c:	3710      	adds	r7, #16
 8005e2e:	46bd      	mov	sp, r7
 8005e30:	bd80      	pop	{r7, pc}
 8005e32:	bf00      	nop
 8005e34:	24000064 	.word	0x24000064

08005e38 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8005e38:	b480      	push	{r7}
 8005e3a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8005e3c:	4b03      	ldr	r3, [pc, #12]	@ (8005e4c <HAL_GetREVID+0x14>)
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	0c1b      	lsrs	r3, r3, #16
}
 8005e42:	4618      	mov	r0, r3
 8005e44:	46bd      	mov	sp, r7
 8005e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4a:	4770      	bx	lr
 8005e4c:	5c001000 	.word	0x5c001000

08005e50 <__NVIC_SetPriorityGrouping>:
{
 8005e50:	b480      	push	{r7}
 8005e52:	b085      	sub	sp, #20
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	f003 0307 	and.w	r3, r3, #7
 8005e5e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005e60:	4b0b      	ldr	r3, [pc, #44]	@ (8005e90 <__NVIC_SetPriorityGrouping+0x40>)
 8005e62:	68db      	ldr	r3, [r3, #12]
 8005e64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005e66:	68ba      	ldr	r2, [r7, #8]
 8005e68:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005e6c:	4013      	ands	r3, r2
 8005e6e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005e74:	68bb      	ldr	r3, [r7, #8]
 8005e76:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8005e78:	4b06      	ldr	r3, [pc, #24]	@ (8005e94 <__NVIC_SetPriorityGrouping+0x44>)
 8005e7a:	4313      	orrs	r3, r2
 8005e7c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005e7e:	4a04      	ldr	r2, [pc, #16]	@ (8005e90 <__NVIC_SetPriorityGrouping+0x40>)
 8005e80:	68bb      	ldr	r3, [r7, #8]
 8005e82:	60d3      	str	r3, [r2, #12]
}
 8005e84:	bf00      	nop
 8005e86:	3714      	adds	r7, #20
 8005e88:	46bd      	mov	sp, r7
 8005e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8e:	4770      	bx	lr
 8005e90:	e000ed00 	.word	0xe000ed00
 8005e94:	05fa0000 	.word	0x05fa0000

08005e98 <__NVIC_GetPriorityGrouping>:
{
 8005e98:	b480      	push	{r7}
 8005e9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005e9c:	4b04      	ldr	r3, [pc, #16]	@ (8005eb0 <__NVIC_GetPriorityGrouping+0x18>)
 8005e9e:	68db      	ldr	r3, [r3, #12]
 8005ea0:	0a1b      	lsrs	r3, r3, #8
 8005ea2:	f003 0307 	and.w	r3, r3, #7
}
 8005ea6:	4618      	mov	r0, r3
 8005ea8:	46bd      	mov	sp, r7
 8005eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eae:	4770      	bx	lr
 8005eb0:	e000ed00 	.word	0xe000ed00

08005eb4 <__NVIC_EnableIRQ>:
{
 8005eb4:	b480      	push	{r7}
 8005eb6:	b083      	sub	sp, #12
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	4603      	mov	r3, r0
 8005ebc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005ebe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	db0b      	blt.n	8005ede <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005ec6:	88fb      	ldrh	r3, [r7, #6]
 8005ec8:	f003 021f 	and.w	r2, r3, #31
 8005ecc:	4907      	ldr	r1, [pc, #28]	@ (8005eec <__NVIC_EnableIRQ+0x38>)
 8005ece:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005ed2:	095b      	lsrs	r3, r3, #5
 8005ed4:	2001      	movs	r0, #1
 8005ed6:	fa00 f202 	lsl.w	r2, r0, r2
 8005eda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8005ede:	bf00      	nop
 8005ee0:	370c      	adds	r7, #12
 8005ee2:	46bd      	mov	sp, r7
 8005ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee8:	4770      	bx	lr
 8005eea:	bf00      	nop
 8005eec:	e000e100 	.word	0xe000e100

08005ef0 <__NVIC_SetPriority>:
{
 8005ef0:	b480      	push	{r7}
 8005ef2:	b083      	sub	sp, #12
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	4603      	mov	r3, r0
 8005ef8:	6039      	str	r1, [r7, #0]
 8005efa:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005efc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	db0a      	blt.n	8005f1a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005f04:	683b      	ldr	r3, [r7, #0]
 8005f06:	b2da      	uxtb	r2, r3
 8005f08:	490c      	ldr	r1, [pc, #48]	@ (8005f3c <__NVIC_SetPriority+0x4c>)
 8005f0a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005f0e:	0112      	lsls	r2, r2, #4
 8005f10:	b2d2      	uxtb	r2, r2
 8005f12:	440b      	add	r3, r1
 8005f14:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8005f18:	e00a      	b.n	8005f30 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005f1a:	683b      	ldr	r3, [r7, #0]
 8005f1c:	b2da      	uxtb	r2, r3
 8005f1e:	4908      	ldr	r1, [pc, #32]	@ (8005f40 <__NVIC_SetPriority+0x50>)
 8005f20:	88fb      	ldrh	r3, [r7, #6]
 8005f22:	f003 030f 	and.w	r3, r3, #15
 8005f26:	3b04      	subs	r3, #4
 8005f28:	0112      	lsls	r2, r2, #4
 8005f2a:	b2d2      	uxtb	r2, r2
 8005f2c:	440b      	add	r3, r1
 8005f2e:	761a      	strb	r2, [r3, #24]
}
 8005f30:	bf00      	nop
 8005f32:	370c      	adds	r7, #12
 8005f34:	46bd      	mov	sp, r7
 8005f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3a:	4770      	bx	lr
 8005f3c:	e000e100 	.word	0xe000e100
 8005f40:	e000ed00 	.word	0xe000ed00

08005f44 <NVIC_EncodePriority>:
{
 8005f44:	b480      	push	{r7}
 8005f46:	b089      	sub	sp, #36	@ 0x24
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	60f8      	str	r0, [r7, #12]
 8005f4c:	60b9      	str	r1, [r7, #8]
 8005f4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	f003 0307 	and.w	r3, r3, #7
 8005f56:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005f58:	69fb      	ldr	r3, [r7, #28]
 8005f5a:	f1c3 0307 	rsb	r3, r3, #7
 8005f5e:	2b04      	cmp	r3, #4
 8005f60:	bf28      	it	cs
 8005f62:	2304      	movcs	r3, #4
 8005f64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005f66:	69fb      	ldr	r3, [r7, #28]
 8005f68:	3304      	adds	r3, #4
 8005f6a:	2b06      	cmp	r3, #6
 8005f6c:	d902      	bls.n	8005f74 <NVIC_EncodePriority+0x30>
 8005f6e:	69fb      	ldr	r3, [r7, #28]
 8005f70:	3b03      	subs	r3, #3
 8005f72:	e000      	b.n	8005f76 <NVIC_EncodePriority+0x32>
 8005f74:	2300      	movs	r3, #0
 8005f76:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005f78:	f04f 32ff 	mov.w	r2, #4294967295
 8005f7c:	69bb      	ldr	r3, [r7, #24]
 8005f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8005f82:	43da      	mvns	r2, r3
 8005f84:	68bb      	ldr	r3, [r7, #8]
 8005f86:	401a      	ands	r2, r3
 8005f88:	697b      	ldr	r3, [r7, #20]
 8005f8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005f8c:	f04f 31ff 	mov.w	r1, #4294967295
 8005f90:	697b      	ldr	r3, [r7, #20]
 8005f92:	fa01 f303 	lsl.w	r3, r1, r3
 8005f96:	43d9      	mvns	r1, r3
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005f9c:	4313      	orrs	r3, r2
}
 8005f9e:	4618      	mov	r0, r3
 8005fa0:	3724      	adds	r7, #36	@ 0x24
 8005fa2:	46bd      	mov	sp, r7
 8005fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa8:	4770      	bx	lr
	...

08005fac <__NVIC_SystemReset>:
{
 8005fac:	b480      	push	{r7}
 8005fae:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8005fb0:	f3bf 8f4f 	dsb	sy
}
 8005fb4:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8005fb6:	4b06      	ldr	r3, [pc, #24]	@ (8005fd0 <__NVIC_SystemReset+0x24>)
 8005fb8:	68db      	ldr	r3, [r3, #12]
 8005fba:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8005fbe:	4904      	ldr	r1, [pc, #16]	@ (8005fd0 <__NVIC_SystemReset+0x24>)
 8005fc0:	4b04      	ldr	r3, [pc, #16]	@ (8005fd4 <__NVIC_SystemReset+0x28>)
 8005fc2:	4313      	orrs	r3, r2
 8005fc4:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8005fc6:	f3bf 8f4f 	dsb	sy
}
 8005fca:	bf00      	nop
    __NOP();
 8005fcc:	bf00      	nop
 8005fce:	e7fd      	b.n	8005fcc <__NVIC_SystemReset+0x20>
 8005fd0:	e000ed00 	.word	0xe000ed00
 8005fd4:	05fa0004 	.word	0x05fa0004

08005fd8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005fd8:	b580      	push	{r7, lr}
 8005fda:	b082      	sub	sp, #8
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	3b01      	subs	r3, #1
 8005fe4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005fe8:	d301      	bcc.n	8005fee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005fea:	2301      	movs	r3, #1
 8005fec:	e00f      	b.n	800600e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005fee:	4a0a      	ldr	r2, [pc, #40]	@ (8006018 <SysTick_Config+0x40>)
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	3b01      	subs	r3, #1
 8005ff4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005ff6:	210f      	movs	r1, #15
 8005ff8:	f04f 30ff 	mov.w	r0, #4294967295
 8005ffc:	f7ff ff78 	bl	8005ef0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006000:	4b05      	ldr	r3, [pc, #20]	@ (8006018 <SysTick_Config+0x40>)
 8006002:	2200      	movs	r2, #0
 8006004:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006006:	4b04      	ldr	r3, [pc, #16]	@ (8006018 <SysTick_Config+0x40>)
 8006008:	2207      	movs	r2, #7
 800600a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800600c:	2300      	movs	r3, #0
}
 800600e:	4618      	mov	r0, r3
 8006010:	3708      	adds	r7, #8
 8006012:	46bd      	mov	sp, r7
 8006014:	bd80      	pop	{r7, pc}
 8006016:	bf00      	nop
 8006018:	e000e010 	.word	0xe000e010

0800601c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800601c:	b580      	push	{r7, lr}
 800601e:	b082      	sub	sp, #8
 8006020:	af00      	add	r7, sp, #0
 8006022:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006024:	6878      	ldr	r0, [r7, #4]
 8006026:	f7ff ff13 	bl	8005e50 <__NVIC_SetPriorityGrouping>
}
 800602a:	bf00      	nop
 800602c:	3708      	adds	r7, #8
 800602e:	46bd      	mov	sp, r7
 8006030:	bd80      	pop	{r7, pc}

08006032 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006032:	b580      	push	{r7, lr}
 8006034:	b086      	sub	sp, #24
 8006036:	af00      	add	r7, sp, #0
 8006038:	4603      	mov	r3, r0
 800603a:	60b9      	str	r1, [r7, #8]
 800603c:	607a      	str	r2, [r7, #4]
 800603e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8006040:	f7ff ff2a 	bl	8005e98 <__NVIC_GetPriorityGrouping>
 8006044:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006046:	687a      	ldr	r2, [r7, #4]
 8006048:	68b9      	ldr	r1, [r7, #8]
 800604a:	6978      	ldr	r0, [r7, #20]
 800604c:	f7ff ff7a 	bl	8005f44 <NVIC_EncodePriority>
 8006050:	4602      	mov	r2, r0
 8006052:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8006056:	4611      	mov	r1, r2
 8006058:	4618      	mov	r0, r3
 800605a:	f7ff ff49 	bl	8005ef0 <__NVIC_SetPriority>
}
 800605e:	bf00      	nop
 8006060:	3718      	adds	r7, #24
 8006062:	46bd      	mov	sp, r7
 8006064:	bd80      	pop	{r7, pc}

08006066 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006066:	b580      	push	{r7, lr}
 8006068:	b082      	sub	sp, #8
 800606a:	af00      	add	r7, sp, #0
 800606c:	4603      	mov	r3, r0
 800606e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006070:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006074:	4618      	mov	r0, r3
 8006076:	f7ff ff1d 	bl	8005eb4 <__NVIC_EnableIRQ>
}
 800607a:	bf00      	nop
 800607c:	3708      	adds	r7, #8
 800607e:	46bd      	mov	sp, r7
 8006080:	bd80      	pop	{r7, pc}

08006082 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8006082:	b580      	push	{r7, lr}
 8006084:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8006086:	f7ff ff91 	bl	8005fac <__NVIC_SystemReset>

0800608a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800608a:	b580      	push	{r7, lr}
 800608c:	b082      	sub	sp, #8
 800608e:	af00      	add	r7, sp, #0
 8006090:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006092:	6878      	ldr	r0, [r7, #4]
 8006094:	f7ff ffa0 	bl	8005fd8 <SysTick_Config>
 8006098:	4603      	mov	r3, r0
}
 800609a:	4618      	mov	r0, r3
 800609c:	3708      	adds	r7, #8
 800609e:	46bd      	mov	sp, r7
 80060a0:	bd80      	pop	{r7, pc}
	...

080060a4 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80060a4:	b480      	push	{r7}
 80060a6:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80060a8:	f3bf 8f5f 	dmb	sy
}
 80060ac:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80060ae:	4b07      	ldr	r3, [pc, #28]	@ (80060cc <HAL_MPU_Disable+0x28>)
 80060b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060b2:	4a06      	ldr	r2, [pc, #24]	@ (80060cc <HAL_MPU_Disable+0x28>)
 80060b4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80060b8:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80060ba:	4b05      	ldr	r3, [pc, #20]	@ (80060d0 <HAL_MPU_Disable+0x2c>)
 80060bc:	2200      	movs	r2, #0
 80060be:	605a      	str	r2, [r3, #4]
}
 80060c0:	bf00      	nop
 80060c2:	46bd      	mov	sp, r7
 80060c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c8:	4770      	bx	lr
 80060ca:	bf00      	nop
 80060cc:	e000ed00 	.word	0xe000ed00
 80060d0:	e000ed90 	.word	0xe000ed90

080060d4 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 80060d4:	b480      	push	{r7}
 80060d6:	b083      	sub	sp, #12
 80060d8:	af00      	add	r7, sp, #0
 80060da:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80060dc:	4a0b      	ldr	r2, [pc, #44]	@ (800610c <HAL_MPU_Enable+0x38>)
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	f043 0301 	orr.w	r3, r3, #1
 80060e4:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80060e6:	4b0a      	ldr	r3, [pc, #40]	@ (8006110 <HAL_MPU_Enable+0x3c>)
 80060e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060ea:	4a09      	ldr	r2, [pc, #36]	@ (8006110 <HAL_MPU_Enable+0x3c>)
 80060ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80060f0:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80060f2:	f3bf 8f4f 	dsb	sy
}
 80060f6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80060f8:	f3bf 8f6f 	isb	sy
}
 80060fc:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80060fe:	bf00      	nop
 8006100:	370c      	adds	r7, #12
 8006102:	46bd      	mov	sp, r7
 8006104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006108:	4770      	bx	lr
 800610a:	bf00      	nop
 800610c:	e000ed90 	.word	0xe000ed90
 8006110:	e000ed00 	.word	0xe000ed00

08006114 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8006114:	b480      	push	{r7}
 8006116:	b083      	sub	sp, #12
 8006118:	af00      	add	r7, sp, #0
 800611a:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	785a      	ldrb	r2, [r3, #1]
 8006120:	4b1b      	ldr	r3, [pc, #108]	@ (8006190 <HAL_MPU_ConfigRegion+0x7c>)
 8006122:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8006124:	4b1a      	ldr	r3, [pc, #104]	@ (8006190 <HAL_MPU_ConfigRegion+0x7c>)
 8006126:	691b      	ldr	r3, [r3, #16]
 8006128:	4a19      	ldr	r2, [pc, #100]	@ (8006190 <HAL_MPU_ConfigRegion+0x7c>)
 800612a:	f023 0301 	bic.w	r3, r3, #1
 800612e:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8006130:	4a17      	ldr	r2, [pc, #92]	@ (8006190 <HAL_MPU_ConfigRegion+0x7c>)
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	685b      	ldr	r3, [r3, #4]
 8006136:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	7b1b      	ldrb	r3, [r3, #12]
 800613c:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	7adb      	ldrb	r3, [r3, #11]
 8006142:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8006144:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	7a9b      	ldrb	r3, [r3, #10]
 800614a:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800614c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	7b5b      	ldrb	r3, [r3, #13]
 8006152:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8006154:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	7b9b      	ldrb	r3, [r3, #14]
 800615a:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800615c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	7bdb      	ldrb	r3, [r3, #15]
 8006162:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8006164:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	7a5b      	ldrb	r3, [r3, #9]
 800616a:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800616c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	7a1b      	ldrb	r3, [r3, #8]
 8006172:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8006174:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8006176:	687a      	ldr	r2, [r7, #4]
 8006178:	7812      	ldrb	r2, [r2, #0]
 800617a:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800617c:	4a04      	ldr	r2, [pc, #16]	@ (8006190 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800617e:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8006180:	6113      	str	r3, [r2, #16]
}
 8006182:	bf00      	nop
 8006184:	370c      	adds	r7, #12
 8006186:	46bd      	mov	sp, r7
 8006188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800618c:	4770      	bx	lr
 800618e:	bf00      	nop
 8006190:	e000ed90 	.word	0xe000ed90

08006194 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006194:	b580      	push	{r7, lr}
 8006196:	b086      	sub	sp, #24
 8006198:	af00      	add	r7, sp, #0
 800619a:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 800619c:	f7ff fe1c 	bl	8005dd8 <HAL_GetTick>
 80061a0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d101      	bne.n	80061ac <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80061a8:	2301      	movs	r3, #1
 80061aa:	e316      	b.n	80067da <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	4a66      	ldr	r2, [pc, #408]	@ (800634c <HAL_DMA_Init+0x1b8>)
 80061b2:	4293      	cmp	r3, r2
 80061b4:	d04a      	beq.n	800624c <HAL_DMA_Init+0xb8>
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	4a65      	ldr	r2, [pc, #404]	@ (8006350 <HAL_DMA_Init+0x1bc>)
 80061bc:	4293      	cmp	r3, r2
 80061be:	d045      	beq.n	800624c <HAL_DMA_Init+0xb8>
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	4a63      	ldr	r2, [pc, #396]	@ (8006354 <HAL_DMA_Init+0x1c0>)
 80061c6:	4293      	cmp	r3, r2
 80061c8:	d040      	beq.n	800624c <HAL_DMA_Init+0xb8>
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	4a62      	ldr	r2, [pc, #392]	@ (8006358 <HAL_DMA_Init+0x1c4>)
 80061d0:	4293      	cmp	r3, r2
 80061d2:	d03b      	beq.n	800624c <HAL_DMA_Init+0xb8>
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	4a60      	ldr	r2, [pc, #384]	@ (800635c <HAL_DMA_Init+0x1c8>)
 80061da:	4293      	cmp	r3, r2
 80061dc:	d036      	beq.n	800624c <HAL_DMA_Init+0xb8>
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	4a5f      	ldr	r2, [pc, #380]	@ (8006360 <HAL_DMA_Init+0x1cc>)
 80061e4:	4293      	cmp	r3, r2
 80061e6:	d031      	beq.n	800624c <HAL_DMA_Init+0xb8>
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	4a5d      	ldr	r2, [pc, #372]	@ (8006364 <HAL_DMA_Init+0x1d0>)
 80061ee:	4293      	cmp	r3, r2
 80061f0:	d02c      	beq.n	800624c <HAL_DMA_Init+0xb8>
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	4a5c      	ldr	r2, [pc, #368]	@ (8006368 <HAL_DMA_Init+0x1d4>)
 80061f8:	4293      	cmp	r3, r2
 80061fa:	d027      	beq.n	800624c <HAL_DMA_Init+0xb8>
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	4a5a      	ldr	r2, [pc, #360]	@ (800636c <HAL_DMA_Init+0x1d8>)
 8006202:	4293      	cmp	r3, r2
 8006204:	d022      	beq.n	800624c <HAL_DMA_Init+0xb8>
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	4a59      	ldr	r2, [pc, #356]	@ (8006370 <HAL_DMA_Init+0x1dc>)
 800620c:	4293      	cmp	r3, r2
 800620e:	d01d      	beq.n	800624c <HAL_DMA_Init+0xb8>
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	4a57      	ldr	r2, [pc, #348]	@ (8006374 <HAL_DMA_Init+0x1e0>)
 8006216:	4293      	cmp	r3, r2
 8006218:	d018      	beq.n	800624c <HAL_DMA_Init+0xb8>
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	4a56      	ldr	r2, [pc, #344]	@ (8006378 <HAL_DMA_Init+0x1e4>)
 8006220:	4293      	cmp	r3, r2
 8006222:	d013      	beq.n	800624c <HAL_DMA_Init+0xb8>
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	4a54      	ldr	r2, [pc, #336]	@ (800637c <HAL_DMA_Init+0x1e8>)
 800622a:	4293      	cmp	r3, r2
 800622c:	d00e      	beq.n	800624c <HAL_DMA_Init+0xb8>
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	4a53      	ldr	r2, [pc, #332]	@ (8006380 <HAL_DMA_Init+0x1ec>)
 8006234:	4293      	cmp	r3, r2
 8006236:	d009      	beq.n	800624c <HAL_DMA_Init+0xb8>
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	4a51      	ldr	r2, [pc, #324]	@ (8006384 <HAL_DMA_Init+0x1f0>)
 800623e:	4293      	cmp	r3, r2
 8006240:	d004      	beq.n	800624c <HAL_DMA_Init+0xb8>
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	4a50      	ldr	r2, [pc, #320]	@ (8006388 <HAL_DMA_Init+0x1f4>)
 8006248:	4293      	cmp	r3, r2
 800624a:	d101      	bne.n	8006250 <HAL_DMA_Init+0xbc>
 800624c:	2301      	movs	r3, #1
 800624e:	e000      	b.n	8006252 <HAL_DMA_Init+0xbe>
 8006250:	2300      	movs	r3, #0
 8006252:	2b00      	cmp	r3, #0
 8006254:	f000 813b 	beq.w	80064ce <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	2202      	movs	r2, #2
 800625c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	2200      	movs	r2, #0
 8006264:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	4a37      	ldr	r2, [pc, #220]	@ (800634c <HAL_DMA_Init+0x1b8>)
 800626e:	4293      	cmp	r3, r2
 8006270:	d04a      	beq.n	8006308 <HAL_DMA_Init+0x174>
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	4a36      	ldr	r2, [pc, #216]	@ (8006350 <HAL_DMA_Init+0x1bc>)
 8006278:	4293      	cmp	r3, r2
 800627a:	d045      	beq.n	8006308 <HAL_DMA_Init+0x174>
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	4a34      	ldr	r2, [pc, #208]	@ (8006354 <HAL_DMA_Init+0x1c0>)
 8006282:	4293      	cmp	r3, r2
 8006284:	d040      	beq.n	8006308 <HAL_DMA_Init+0x174>
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	4a33      	ldr	r2, [pc, #204]	@ (8006358 <HAL_DMA_Init+0x1c4>)
 800628c:	4293      	cmp	r3, r2
 800628e:	d03b      	beq.n	8006308 <HAL_DMA_Init+0x174>
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	4a31      	ldr	r2, [pc, #196]	@ (800635c <HAL_DMA_Init+0x1c8>)
 8006296:	4293      	cmp	r3, r2
 8006298:	d036      	beq.n	8006308 <HAL_DMA_Init+0x174>
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	4a30      	ldr	r2, [pc, #192]	@ (8006360 <HAL_DMA_Init+0x1cc>)
 80062a0:	4293      	cmp	r3, r2
 80062a2:	d031      	beq.n	8006308 <HAL_DMA_Init+0x174>
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	4a2e      	ldr	r2, [pc, #184]	@ (8006364 <HAL_DMA_Init+0x1d0>)
 80062aa:	4293      	cmp	r3, r2
 80062ac:	d02c      	beq.n	8006308 <HAL_DMA_Init+0x174>
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	4a2d      	ldr	r2, [pc, #180]	@ (8006368 <HAL_DMA_Init+0x1d4>)
 80062b4:	4293      	cmp	r3, r2
 80062b6:	d027      	beq.n	8006308 <HAL_DMA_Init+0x174>
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	4a2b      	ldr	r2, [pc, #172]	@ (800636c <HAL_DMA_Init+0x1d8>)
 80062be:	4293      	cmp	r3, r2
 80062c0:	d022      	beq.n	8006308 <HAL_DMA_Init+0x174>
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	4a2a      	ldr	r2, [pc, #168]	@ (8006370 <HAL_DMA_Init+0x1dc>)
 80062c8:	4293      	cmp	r3, r2
 80062ca:	d01d      	beq.n	8006308 <HAL_DMA_Init+0x174>
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	4a28      	ldr	r2, [pc, #160]	@ (8006374 <HAL_DMA_Init+0x1e0>)
 80062d2:	4293      	cmp	r3, r2
 80062d4:	d018      	beq.n	8006308 <HAL_DMA_Init+0x174>
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	4a27      	ldr	r2, [pc, #156]	@ (8006378 <HAL_DMA_Init+0x1e4>)
 80062dc:	4293      	cmp	r3, r2
 80062de:	d013      	beq.n	8006308 <HAL_DMA_Init+0x174>
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	4a25      	ldr	r2, [pc, #148]	@ (800637c <HAL_DMA_Init+0x1e8>)
 80062e6:	4293      	cmp	r3, r2
 80062e8:	d00e      	beq.n	8006308 <HAL_DMA_Init+0x174>
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	4a24      	ldr	r2, [pc, #144]	@ (8006380 <HAL_DMA_Init+0x1ec>)
 80062f0:	4293      	cmp	r3, r2
 80062f2:	d009      	beq.n	8006308 <HAL_DMA_Init+0x174>
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	4a22      	ldr	r2, [pc, #136]	@ (8006384 <HAL_DMA_Init+0x1f0>)
 80062fa:	4293      	cmp	r3, r2
 80062fc:	d004      	beq.n	8006308 <HAL_DMA_Init+0x174>
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	4a21      	ldr	r2, [pc, #132]	@ (8006388 <HAL_DMA_Init+0x1f4>)
 8006304:	4293      	cmp	r3, r2
 8006306:	d108      	bne.n	800631a <HAL_DMA_Init+0x186>
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	681a      	ldr	r2, [r3, #0]
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	f022 0201 	bic.w	r2, r2, #1
 8006316:	601a      	str	r2, [r3, #0]
 8006318:	e007      	b.n	800632a <HAL_DMA_Init+0x196>
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	681a      	ldr	r2, [r3, #0]
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	f022 0201 	bic.w	r2, r2, #1
 8006328:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800632a:	e02f      	b.n	800638c <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800632c:	f7ff fd54 	bl	8005dd8 <HAL_GetTick>
 8006330:	4602      	mov	r2, r0
 8006332:	693b      	ldr	r3, [r7, #16]
 8006334:	1ad3      	subs	r3, r2, r3
 8006336:	2b05      	cmp	r3, #5
 8006338:	d928      	bls.n	800638c <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	2220      	movs	r2, #32
 800633e:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	2203      	movs	r2, #3
 8006344:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8006348:	2301      	movs	r3, #1
 800634a:	e246      	b.n	80067da <HAL_DMA_Init+0x646>
 800634c:	40020010 	.word	0x40020010
 8006350:	40020028 	.word	0x40020028
 8006354:	40020040 	.word	0x40020040
 8006358:	40020058 	.word	0x40020058
 800635c:	40020070 	.word	0x40020070
 8006360:	40020088 	.word	0x40020088
 8006364:	400200a0 	.word	0x400200a0
 8006368:	400200b8 	.word	0x400200b8
 800636c:	40020410 	.word	0x40020410
 8006370:	40020428 	.word	0x40020428
 8006374:	40020440 	.word	0x40020440
 8006378:	40020458 	.word	0x40020458
 800637c:	40020470 	.word	0x40020470
 8006380:	40020488 	.word	0x40020488
 8006384:	400204a0 	.word	0x400204a0
 8006388:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	f003 0301 	and.w	r3, r3, #1
 8006396:	2b00      	cmp	r3, #0
 8006398:	d1c8      	bne.n	800632c <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80063a2:	697a      	ldr	r2, [r7, #20]
 80063a4:	4b83      	ldr	r3, [pc, #524]	@ (80065b4 <HAL_DMA_Init+0x420>)
 80063a6:	4013      	ands	r3, r2
 80063a8:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80063b2:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	691b      	ldr	r3, [r3, #16]
 80063b8:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80063be:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	699b      	ldr	r3, [r3, #24]
 80063c4:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80063ca:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	6a1b      	ldr	r3, [r3, #32]
 80063d0:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80063d2:	697a      	ldr	r2, [r7, #20]
 80063d4:	4313      	orrs	r3, r2
 80063d6:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063dc:	2b04      	cmp	r3, #4
 80063de:	d107      	bne.n	80063f0 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80063e8:	4313      	orrs	r3, r2
 80063ea:	697a      	ldr	r2, [r7, #20]
 80063ec:	4313      	orrs	r3, r2
 80063ee:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 80063f0:	4b71      	ldr	r3, [pc, #452]	@ (80065b8 <HAL_DMA_Init+0x424>)
 80063f2:	681a      	ldr	r2, [r3, #0]
 80063f4:	4b71      	ldr	r3, [pc, #452]	@ (80065bc <HAL_DMA_Init+0x428>)
 80063f6:	4013      	ands	r3, r2
 80063f8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80063fc:	d328      	bcc.n	8006450 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	685b      	ldr	r3, [r3, #4]
 8006402:	2b28      	cmp	r3, #40	@ 0x28
 8006404:	d903      	bls.n	800640e <HAL_DMA_Init+0x27a>
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	685b      	ldr	r3, [r3, #4]
 800640a:	2b2e      	cmp	r3, #46	@ 0x2e
 800640c:	d917      	bls.n	800643e <HAL_DMA_Init+0x2aa>
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	685b      	ldr	r3, [r3, #4]
 8006412:	2b3e      	cmp	r3, #62	@ 0x3e
 8006414:	d903      	bls.n	800641e <HAL_DMA_Init+0x28a>
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	685b      	ldr	r3, [r3, #4]
 800641a:	2b42      	cmp	r3, #66	@ 0x42
 800641c:	d90f      	bls.n	800643e <HAL_DMA_Init+0x2aa>
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	685b      	ldr	r3, [r3, #4]
 8006422:	2b46      	cmp	r3, #70	@ 0x46
 8006424:	d903      	bls.n	800642e <HAL_DMA_Init+0x29a>
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	685b      	ldr	r3, [r3, #4]
 800642a:	2b48      	cmp	r3, #72	@ 0x48
 800642c:	d907      	bls.n	800643e <HAL_DMA_Init+0x2aa>
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	685b      	ldr	r3, [r3, #4]
 8006432:	2b4e      	cmp	r3, #78	@ 0x4e
 8006434:	d905      	bls.n	8006442 <HAL_DMA_Init+0x2ae>
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	685b      	ldr	r3, [r3, #4]
 800643a:	2b52      	cmp	r3, #82	@ 0x52
 800643c:	d801      	bhi.n	8006442 <HAL_DMA_Init+0x2ae>
 800643e:	2301      	movs	r3, #1
 8006440:	e000      	b.n	8006444 <HAL_DMA_Init+0x2b0>
 8006442:	2300      	movs	r3, #0
 8006444:	2b00      	cmp	r3, #0
 8006446:	d003      	beq.n	8006450 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8006448:	697b      	ldr	r3, [r7, #20]
 800644a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800644e:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	697a      	ldr	r2, [r7, #20]
 8006456:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	695b      	ldr	r3, [r3, #20]
 800645e:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8006460:	697b      	ldr	r3, [r7, #20]
 8006462:	f023 0307 	bic.w	r3, r3, #7
 8006466:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800646c:	697a      	ldr	r2, [r7, #20]
 800646e:	4313      	orrs	r3, r2
 8006470:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006476:	2b04      	cmp	r3, #4
 8006478:	d117      	bne.n	80064aa <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800647e:	697a      	ldr	r2, [r7, #20]
 8006480:	4313      	orrs	r3, r2
 8006482:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006488:	2b00      	cmp	r3, #0
 800648a:	d00e      	beq.n	80064aa <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800648c:	6878      	ldr	r0, [r7, #4]
 800648e:	f002 f8f9 	bl	8008684 <DMA_CheckFifoParam>
 8006492:	4603      	mov	r3, r0
 8006494:	2b00      	cmp	r3, #0
 8006496:	d008      	beq.n	80064aa <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	2240      	movs	r2, #64	@ 0x40
 800649c:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	2201      	movs	r2, #1
 80064a2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 80064a6:	2301      	movs	r3, #1
 80064a8:	e197      	b.n	80067da <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	697a      	ldr	r2, [r7, #20]
 80064b0:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80064b2:	6878      	ldr	r0, [r7, #4]
 80064b4:	f002 f834 	bl	8008520 <DMA_CalcBaseAndBitshift>
 80064b8:	4603      	mov	r3, r0
 80064ba:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80064c0:	f003 031f 	and.w	r3, r3, #31
 80064c4:	223f      	movs	r2, #63	@ 0x3f
 80064c6:	409a      	lsls	r2, r3
 80064c8:	68bb      	ldr	r3, [r7, #8]
 80064ca:	609a      	str	r2, [r3, #8]
 80064cc:	e0cd      	b.n	800666a <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	4a3b      	ldr	r2, [pc, #236]	@ (80065c0 <HAL_DMA_Init+0x42c>)
 80064d4:	4293      	cmp	r3, r2
 80064d6:	d022      	beq.n	800651e <HAL_DMA_Init+0x38a>
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	4a39      	ldr	r2, [pc, #228]	@ (80065c4 <HAL_DMA_Init+0x430>)
 80064de:	4293      	cmp	r3, r2
 80064e0:	d01d      	beq.n	800651e <HAL_DMA_Init+0x38a>
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	4a38      	ldr	r2, [pc, #224]	@ (80065c8 <HAL_DMA_Init+0x434>)
 80064e8:	4293      	cmp	r3, r2
 80064ea:	d018      	beq.n	800651e <HAL_DMA_Init+0x38a>
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	4a36      	ldr	r2, [pc, #216]	@ (80065cc <HAL_DMA_Init+0x438>)
 80064f2:	4293      	cmp	r3, r2
 80064f4:	d013      	beq.n	800651e <HAL_DMA_Init+0x38a>
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	4a35      	ldr	r2, [pc, #212]	@ (80065d0 <HAL_DMA_Init+0x43c>)
 80064fc:	4293      	cmp	r3, r2
 80064fe:	d00e      	beq.n	800651e <HAL_DMA_Init+0x38a>
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	4a33      	ldr	r2, [pc, #204]	@ (80065d4 <HAL_DMA_Init+0x440>)
 8006506:	4293      	cmp	r3, r2
 8006508:	d009      	beq.n	800651e <HAL_DMA_Init+0x38a>
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	4a32      	ldr	r2, [pc, #200]	@ (80065d8 <HAL_DMA_Init+0x444>)
 8006510:	4293      	cmp	r3, r2
 8006512:	d004      	beq.n	800651e <HAL_DMA_Init+0x38a>
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	4a30      	ldr	r2, [pc, #192]	@ (80065dc <HAL_DMA_Init+0x448>)
 800651a:	4293      	cmp	r3, r2
 800651c:	d101      	bne.n	8006522 <HAL_DMA_Init+0x38e>
 800651e:	2301      	movs	r3, #1
 8006520:	e000      	b.n	8006524 <HAL_DMA_Init+0x390>
 8006522:	2300      	movs	r3, #0
 8006524:	2b00      	cmp	r3, #0
 8006526:	f000 8097 	beq.w	8006658 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	4a24      	ldr	r2, [pc, #144]	@ (80065c0 <HAL_DMA_Init+0x42c>)
 8006530:	4293      	cmp	r3, r2
 8006532:	d021      	beq.n	8006578 <HAL_DMA_Init+0x3e4>
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	4a22      	ldr	r2, [pc, #136]	@ (80065c4 <HAL_DMA_Init+0x430>)
 800653a:	4293      	cmp	r3, r2
 800653c:	d01c      	beq.n	8006578 <HAL_DMA_Init+0x3e4>
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	4a21      	ldr	r2, [pc, #132]	@ (80065c8 <HAL_DMA_Init+0x434>)
 8006544:	4293      	cmp	r3, r2
 8006546:	d017      	beq.n	8006578 <HAL_DMA_Init+0x3e4>
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	4a1f      	ldr	r2, [pc, #124]	@ (80065cc <HAL_DMA_Init+0x438>)
 800654e:	4293      	cmp	r3, r2
 8006550:	d012      	beq.n	8006578 <HAL_DMA_Init+0x3e4>
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	4a1e      	ldr	r2, [pc, #120]	@ (80065d0 <HAL_DMA_Init+0x43c>)
 8006558:	4293      	cmp	r3, r2
 800655a:	d00d      	beq.n	8006578 <HAL_DMA_Init+0x3e4>
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	4a1c      	ldr	r2, [pc, #112]	@ (80065d4 <HAL_DMA_Init+0x440>)
 8006562:	4293      	cmp	r3, r2
 8006564:	d008      	beq.n	8006578 <HAL_DMA_Init+0x3e4>
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	4a1b      	ldr	r2, [pc, #108]	@ (80065d8 <HAL_DMA_Init+0x444>)
 800656c:	4293      	cmp	r3, r2
 800656e:	d003      	beq.n	8006578 <HAL_DMA_Init+0x3e4>
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	4a19      	ldr	r2, [pc, #100]	@ (80065dc <HAL_DMA_Init+0x448>)
 8006576:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	2202      	movs	r2, #2
 800657c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	2200      	movs	r2, #0
 8006584:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8006590:	697a      	ldr	r2, [r7, #20]
 8006592:	4b13      	ldr	r3, [pc, #76]	@ (80065e0 <HAL_DMA_Init+0x44c>)
 8006594:	4013      	ands	r3, r2
 8006596:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	689b      	ldr	r3, [r3, #8]
 800659c:	2b40      	cmp	r3, #64	@ 0x40
 800659e:	d021      	beq.n	80065e4 <HAL_DMA_Init+0x450>
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	689b      	ldr	r3, [r3, #8]
 80065a4:	2b80      	cmp	r3, #128	@ 0x80
 80065a6:	d102      	bne.n	80065ae <HAL_DMA_Init+0x41a>
 80065a8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80065ac:	e01b      	b.n	80065e6 <HAL_DMA_Init+0x452>
 80065ae:	2300      	movs	r3, #0
 80065b0:	e019      	b.n	80065e6 <HAL_DMA_Init+0x452>
 80065b2:	bf00      	nop
 80065b4:	fe10803f 	.word	0xfe10803f
 80065b8:	5c001000 	.word	0x5c001000
 80065bc:	ffff0000 	.word	0xffff0000
 80065c0:	58025408 	.word	0x58025408
 80065c4:	5802541c 	.word	0x5802541c
 80065c8:	58025430 	.word	0x58025430
 80065cc:	58025444 	.word	0x58025444
 80065d0:	58025458 	.word	0x58025458
 80065d4:	5802546c 	.word	0x5802546c
 80065d8:	58025480 	.word	0x58025480
 80065dc:	58025494 	.word	0x58025494
 80065e0:	fffe000f 	.word	0xfffe000f
 80065e4:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80065e6:	687a      	ldr	r2, [r7, #4]
 80065e8:	68d2      	ldr	r2, [r2, #12]
 80065ea:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80065ec:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	691b      	ldr	r3, [r3, #16]
 80065f2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80065f4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	695b      	ldr	r3, [r3, #20]
 80065fa:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80065fc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	699b      	ldr	r3, [r3, #24]
 8006602:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8006604:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	69db      	ldr	r3, [r3, #28]
 800660a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800660c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	6a1b      	ldr	r3, [r3, #32]
 8006612:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8006614:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8006616:	697a      	ldr	r2, [r7, #20]
 8006618:	4313      	orrs	r3, r2
 800661a:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	697a      	ldr	r2, [r7, #20]
 8006622:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	461a      	mov	r2, r3
 800662a:	4b6e      	ldr	r3, [pc, #440]	@ (80067e4 <HAL_DMA_Init+0x650>)
 800662c:	4413      	add	r3, r2
 800662e:	4a6e      	ldr	r2, [pc, #440]	@ (80067e8 <HAL_DMA_Init+0x654>)
 8006630:	fba2 2303 	umull	r2, r3, r2, r3
 8006634:	091b      	lsrs	r3, r3, #4
 8006636:	009a      	lsls	r2, r3, #2
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800663c:	6878      	ldr	r0, [r7, #4]
 800663e:	f001 ff6f 	bl	8008520 <DMA_CalcBaseAndBitshift>
 8006642:	4603      	mov	r3, r0
 8006644:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800664a:	f003 031f 	and.w	r3, r3, #31
 800664e:	2201      	movs	r2, #1
 8006650:	409a      	lsls	r2, r3
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	605a      	str	r2, [r3, #4]
 8006656:	e008      	b.n	800666a <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	2240      	movs	r2, #64	@ 0x40
 800665c:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	2203      	movs	r2, #3
 8006662:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8006666:	2301      	movs	r3, #1
 8006668:	e0b7      	b.n	80067da <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	4a5f      	ldr	r2, [pc, #380]	@ (80067ec <HAL_DMA_Init+0x658>)
 8006670:	4293      	cmp	r3, r2
 8006672:	d072      	beq.n	800675a <HAL_DMA_Init+0x5c6>
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	4a5d      	ldr	r2, [pc, #372]	@ (80067f0 <HAL_DMA_Init+0x65c>)
 800667a:	4293      	cmp	r3, r2
 800667c:	d06d      	beq.n	800675a <HAL_DMA_Init+0x5c6>
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	4a5c      	ldr	r2, [pc, #368]	@ (80067f4 <HAL_DMA_Init+0x660>)
 8006684:	4293      	cmp	r3, r2
 8006686:	d068      	beq.n	800675a <HAL_DMA_Init+0x5c6>
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	4a5a      	ldr	r2, [pc, #360]	@ (80067f8 <HAL_DMA_Init+0x664>)
 800668e:	4293      	cmp	r3, r2
 8006690:	d063      	beq.n	800675a <HAL_DMA_Init+0x5c6>
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	4a59      	ldr	r2, [pc, #356]	@ (80067fc <HAL_DMA_Init+0x668>)
 8006698:	4293      	cmp	r3, r2
 800669a:	d05e      	beq.n	800675a <HAL_DMA_Init+0x5c6>
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	4a57      	ldr	r2, [pc, #348]	@ (8006800 <HAL_DMA_Init+0x66c>)
 80066a2:	4293      	cmp	r3, r2
 80066a4:	d059      	beq.n	800675a <HAL_DMA_Init+0x5c6>
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	4a56      	ldr	r2, [pc, #344]	@ (8006804 <HAL_DMA_Init+0x670>)
 80066ac:	4293      	cmp	r3, r2
 80066ae:	d054      	beq.n	800675a <HAL_DMA_Init+0x5c6>
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	4a54      	ldr	r2, [pc, #336]	@ (8006808 <HAL_DMA_Init+0x674>)
 80066b6:	4293      	cmp	r3, r2
 80066b8:	d04f      	beq.n	800675a <HAL_DMA_Init+0x5c6>
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	4a53      	ldr	r2, [pc, #332]	@ (800680c <HAL_DMA_Init+0x678>)
 80066c0:	4293      	cmp	r3, r2
 80066c2:	d04a      	beq.n	800675a <HAL_DMA_Init+0x5c6>
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	4a51      	ldr	r2, [pc, #324]	@ (8006810 <HAL_DMA_Init+0x67c>)
 80066ca:	4293      	cmp	r3, r2
 80066cc:	d045      	beq.n	800675a <HAL_DMA_Init+0x5c6>
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	4a50      	ldr	r2, [pc, #320]	@ (8006814 <HAL_DMA_Init+0x680>)
 80066d4:	4293      	cmp	r3, r2
 80066d6:	d040      	beq.n	800675a <HAL_DMA_Init+0x5c6>
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	4a4e      	ldr	r2, [pc, #312]	@ (8006818 <HAL_DMA_Init+0x684>)
 80066de:	4293      	cmp	r3, r2
 80066e0:	d03b      	beq.n	800675a <HAL_DMA_Init+0x5c6>
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	4a4d      	ldr	r2, [pc, #308]	@ (800681c <HAL_DMA_Init+0x688>)
 80066e8:	4293      	cmp	r3, r2
 80066ea:	d036      	beq.n	800675a <HAL_DMA_Init+0x5c6>
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	4a4b      	ldr	r2, [pc, #300]	@ (8006820 <HAL_DMA_Init+0x68c>)
 80066f2:	4293      	cmp	r3, r2
 80066f4:	d031      	beq.n	800675a <HAL_DMA_Init+0x5c6>
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	4a4a      	ldr	r2, [pc, #296]	@ (8006824 <HAL_DMA_Init+0x690>)
 80066fc:	4293      	cmp	r3, r2
 80066fe:	d02c      	beq.n	800675a <HAL_DMA_Init+0x5c6>
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	4a48      	ldr	r2, [pc, #288]	@ (8006828 <HAL_DMA_Init+0x694>)
 8006706:	4293      	cmp	r3, r2
 8006708:	d027      	beq.n	800675a <HAL_DMA_Init+0x5c6>
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	4a47      	ldr	r2, [pc, #284]	@ (800682c <HAL_DMA_Init+0x698>)
 8006710:	4293      	cmp	r3, r2
 8006712:	d022      	beq.n	800675a <HAL_DMA_Init+0x5c6>
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	4a45      	ldr	r2, [pc, #276]	@ (8006830 <HAL_DMA_Init+0x69c>)
 800671a:	4293      	cmp	r3, r2
 800671c:	d01d      	beq.n	800675a <HAL_DMA_Init+0x5c6>
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	4a44      	ldr	r2, [pc, #272]	@ (8006834 <HAL_DMA_Init+0x6a0>)
 8006724:	4293      	cmp	r3, r2
 8006726:	d018      	beq.n	800675a <HAL_DMA_Init+0x5c6>
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	4a42      	ldr	r2, [pc, #264]	@ (8006838 <HAL_DMA_Init+0x6a4>)
 800672e:	4293      	cmp	r3, r2
 8006730:	d013      	beq.n	800675a <HAL_DMA_Init+0x5c6>
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	4a41      	ldr	r2, [pc, #260]	@ (800683c <HAL_DMA_Init+0x6a8>)
 8006738:	4293      	cmp	r3, r2
 800673a:	d00e      	beq.n	800675a <HAL_DMA_Init+0x5c6>
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	4a3f      	ldr	r2, [pc, #252]	@ (8006840 <HAL_DMA_Init+0x6ac>)
 8006742:	4293      	cmp	r3, r2
 8006744:	d009      	beq.n	800675a <HAL_DMA_Init+0x5c6>
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	4a3e      	ldr	r2, [pc, #248]	@ (8006844 <HAL_DMA_Init+0x6b0>)
 800674c:	4293      	cmp	r3, r2
 800674e:	d004      	beq.n	800675a <HAL_DMA_Init+0x5c6>
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	4a3c      	ldr	r2, [pc, #240]	@ (8006848 <HAL_DMA_Init+0x6b4>)
 8006756:	4293      	cmp	r3, r2
 8006758:	d101      	bne.n	800675e <HAL_DMA_Init+0x5ca>
 800675a:	2301      	movs	r3, #1
 800675c:	e000      	b.n	8006760 <HAL_DMA_Init+0x5cc>
 800675e:	2300      	movs	r3, #0
 8006760:	2b00      	cmp	r3, #0
 8006762:	d032      	beq.n	80067ca <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8006764:	6878      	ldr	r0, [r7, #4]
 8006766:	f002 f809 	bl	800877c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	689b      	ldr	r3, [r3, #8]
 800676e:	2b80      	cmp	r3, #128	@ 0x80
 8006770:	d102      	bne.n	8006778 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	2200      	movs	r2, #0
 8006776:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	685a      	ldr	r2, [r3, #4]
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006780:	b2d2      	uxtb	r2, r2
 8006782:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006788:	687a      	ldr	r2, [r7, #4]
 800678a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800678c:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	685b      	ldr	r3, [r3, #4]
 8006792:	2b00      	cmp	r3, #0
 8006794:	d010      	beq.n	80067b8 <HAL_DMA_Init+0x624>
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	685b      	ldr	r3, [r3, #4]
 800679a:	2b08      	cmp	r3, #8
 800679c:	d80c      	bhi.n	80067b8 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800679e:	6878      	ldr	r0, [r7, #4]
 80067a0:	f002 f886 	bl	80088b0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80067a8:	2200      	movs	r2, #0
 80067aa:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80067b0:	687a      	ldr	r2, [r7, #4]
 80067b2:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80067b4:	605a      	str	r2, [r3, #4]
 80067b6:	e008      	b.n	80067ca <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	2200      	movs	r2, #0
 80067bc:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	2200      	movs	r2, #0
 80067c2:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	2200      	movs	r2, #0
 80067c8:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	2200      	movs	r2, #0
 80067ce:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	2201      	movs	r2, #1
 80067d4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80067d8:	2300      	movs	r3, #0
}
 80067da:	4618      	mov	r0, r3
 80067dc:	3718      	adds	r7, #24
 80067de:	46bd      	mov	sp, r7
 80067e0:	bd80      	pop	{r7, pc}
 80067e2:	bf00      	nop
 80067e4:	a7fdabf8 	.word	0xa7fdabf8
 80067e8:	cccccccd 	.word	0xcccccccd
 80067ec:	40020010 	.word	0x40020010
 80067f0:	40020028 	.word	0x40020028
 80067f4:	40020040 	.word	0x40020040
 80067f8:	40020058 	.word	0x40020058
 80067fc:	40020070 	.word	0x40020070
 8006800:	40020088 	.word	0x40020088
 8006804:	400200a0 	.word	0x400200a0
 8006808:	400200b8 	.word	0x400200b8
 800680c:	40020410 	.word	0x40020410
 8006810:	40020428 	.word	0x40020428
 8006814:	40020440 	.word	0x40020440
 8006818:	40020458 	.word	0x40020458
 800681c:	40020470 	.word	0x40020470
 8006820:	40020488 	.word	0x40020488
 8006824:	400204a0 	.word	0x400204a0
 8006828:	400204b8 	.word	0x400204b8
 800682c:	58025408 	.word	0x58025408
 8006830:	5802541c 	.word	0x5802541c
 8006834:	58025430 	.word	0x58025430
 8006838:	58025444 	.word	0x58025444
 800683c:	58025458 	.word	0x58025458
 8006840:	5802546c 	.word	0x5802546c
 8006844:	58025480 	.word	0x58025480
 8006848:	58025494 	.word	0x58025494

0800684c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800684c:	b580      	push	{r7, lr}
 800684e:	b086      	sub	sp, #24
 8006850:	af00      	add	r7, sp, #0
 8006852:	60f8      	str	r0, [r7, #12]
 8006854:	60b9      	str	r1, [r7, #8]
 8006856:	607a      	str	r2, [r7, #4]
 8006858:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800685a:	2300      	movs	r3, #0
 800685c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	2b00      	cmp	r3, #0
 8006862:	d101      	bne.n	8006868 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8006864:	2301      	movs	r3, #1
 8006866:	e226      	b.n	8006cb6 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800686e:	2b01      	cmp	r3, #1
 8006870:	d101      	bne.n	8006876 <HAL_DMA_Start_IT+0x2a>
 8006872:	2302      	movs	r3, #2
 8006874:	e21f      	b.n	8006cb6 <HAL_DMA_Start_IT+0x46a>
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	2201      	movs	r2, #1
 800687a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006884:	b2db      	uxtb	r3, r3
 8006886:	2b01      	cmp	r3, #1
 8006888:	f040 820a 	bne.w	8006ca0 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	2202      	movs	r2, #2
 8006890:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	2200      	movs	r2, #0
 8006898:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	4a68      	ldr	r2, [pc, #416]	@ (8006a40 <HAL_DMA_Start_IT+0x1f4>)
 80068a0:	4293      	cmp	r3, r2
 80068a2:	d04a      	beq.n	800693a <HAL_DMA_Start_IT+0xee>
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	4a66      	ldr	r2, [pc, #408]	@ (8006a44 <HAL_DMA_Start_IT+0x1f8>)
 80068aa:	4293      	cmp	r3, r2
 80068ac:	d045      	beq.n	800693a <HAL_DMA_Start_IT+0xee>
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	4a65      	ldr	r2, [pc, #404]	@ (8006a48 <HAL_DMA_Start_IT+0x1fc>)
 80068b4:	4293      	cmp	r3, r2
 80068b6:	d040      	beq.n	800693a <HAL_DMA_Start_IT+0xee>
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	4a63      	ldr	r2, [pc, #396]	@ (8006a4c <HAL_DMA_Start_IT+0x200>)
 80068be:	4293      	cmp	r3, r2
 80068c0:	d03b      	beq.n	800693a <HAL_DMA_Start_IT+0xee>
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	4a62      	ldr	r2, [pc, #392]	@ (8006a50 <HAL_DMA_Start_IT+0x204>)
 80068c8:	4293      	cmp	r3, r2
 80068ca:	d036      	beq.n	800693a <HAL_DMA_Start_IT+0xee>
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	4a60      	ldr	r2, [pc, #384]	@ (8006a54 <HAL_DMA_Start_IT+0x208>)
 80068d2:	4293      	cmp	r3, r2
 80068d4:	d031      	beq.n	800693a <HAL_DMA_Start_IT+0xee>
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	4a5f      	ldr	r2, [pc, #380]	@ (8006a58 <HAL_DMA_Start_IT+0x20c>)
 80068dc:	4293      	cmp	r3, r2
 80068de:	d02c      	beq.n	800693a <HAL_DMA_Start_IT+0xee>
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	4a5d      	ldr	r2, [pc, #372]	@ (8006a5c <HAL_DMA_Start_IT+0x210>)
 80068e6:	4293      	cmp	r3, r2
 80068e8:	d027      	beq.n	800693a <HAL_DMA_Start_IT+0xee>
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	4a5c      	ldr	r2, [pc, #368]	@ (8006a60 <HAL_DMA_Start_IT+0x214>)
 80068f0:	4293      	cmp	r3, r2
 80068f2:	d022      	beq.n	800693a <HAL_DMA_Start_IT+0xee>
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	4a5a      	ldr	r2, [pc, #360]	@ (8006a64 <HAL_DMA_Start_IT+0x218>)
 80068fa:	4293      	cmp	r3, r2
 80068fc:	d01d      	beq.n	800693a <HAL_DMA_Start_IT+0xee>
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	4a59      	ldr	r2, [pc, #356]	@ (8006a68 <HAL_DMA_Start_IT+0x21c>)
 8006904:	4293      	cmp	r3, r2
 8006906:	d018      	beq.n	800693a <HAL_DMA_Start_IT+0xee>
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	4a57      	ldr	r2, [pc, #348]	@ (8006a6c <HAL_DMA_Start_IT+0x220>)
 800690e:	4293      	cmp	r3, r2
 8006910:	d013      	beq.n	800693a <HAL_DMA_Start_IT+0xee>
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	4a56      	ldr	r2, [pc, #344]	@ (8006a70 <HAL_DMA_Start_IT+0x224>)
 8006918:	4293      	cmp	r3, r2
 800691a:	d00e      	beq.n	800693a <HAL_DMA_Start_IT+0xee>
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	4a54      	ldr	r2, [pc, #336]	@ (8006a74 <HAL_DMA_Start_IT+0x228>)
 8006922:	4293      	cmp	r3, r2
 8006924:	d009      	beq.n	800693a <HAL_DMA_Start_IT+0xee>
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	4a53      	ldr	r2, [pc, #332]	@ (8006a78 <HAL_DMA_Start_IT+0x22c>)
 800692c:	4293      	cmp	r3, r2
 800692e:	d004      	beq.n	800693a <HAL_DMA_Start_IT+0xee>
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	4a51      	ldr	r2, [pc, #324]	@ (8006a7c <HAL_DMA_Start_IT+0x230>)
 8006936:	4293      	cmp	r3, r2
 8006938:	d108      	bne.n	800694c <HAL_DMA_Start_IT+0x100>
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	681a      	ldr	r2, [r3, #0]
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	f022 0201 	bic.w	r2, r2, #1
 8006948:	601a      	str	r2, [r3, #0]
 800694a:	e007      	b.n	800695c <HAL_DMA_Start_IT+0x110>
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	681a      	ldr	r2, [r3, #0]
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	f022 0201 	bic.w	r2, r2, #1
 800695a:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800695c:	683b      	ldr	r3, [r7, #0]
 800695e:	687a      	ldr	r2, [r7, #4]
 8006960:	68b9      	ldr	r1, [r7, #8]
 8006962:	68f8      	ldr	r0, [r7, #12]
 8006964:	f001 fc30 	bl	80081c8 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	4a34      	ldr	r2, [pc, #208]	@ (8006a40 <HAL_DMA_Start_IT+0x1f4>)
 800696e:	4293      	cmp	r3, r2
 8006970:	d04a      	beq.n	8006a08 <HAL_DMA_Start_IT+0x1bc>
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	4a33      	ldr	r2, [pc, #204]	@ (8006a44 <HAL_DMA_Start_IT+0x1f8>)
 8006978:	4293      	cmp	r3, r2
 800697a:	d045      	beq.n	8006a08 <HAL_DMA_Start_IT+0x1bc>
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	4a31      	ldr	r2, [pc, #196]	@ (8006a48 <HAL_DMA_Start_IT+0x1fc>)
 8006982:	4293      	cmp	r3, r2
 8006984:	d040      	beq.n	8006a08 <HAL_DMA_Start_IT+0x1bc>
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	4a30      	ldr	r2, [pc, #192]	@ (8006a4c <HAL_DMA_Start_IT+0x200>)
 800698c:	4293      	cmp	r3, r2
 800698e:	d03b      	beq.n	8006a08 <HAL_DMA_Start_IT+0x1bc>
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	4a2e      	ldr	r2, [pc, #184]	@ (8006a50 <HAL_DMA_Start_IT+0x204>)
 8006996:	4293      	cmp	r3, r2
 8006998:	d036      	beq.n	8006a08 <HAL_DMA_Start_IT+0x1bc>
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	4a2d      	ldr	r2, [pc, #180]	@ (8006a54 <HAL_DMA_Start_IT+0x208>)
 80069a0:	4293      	cmp	r3, r2
 80069a2:	d031      	beq.n	8006a08 <HAL_DMA_Start_IT+0x1bc>
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	4a2b      	ldr	r2, [pc, #172]	@ (8006a58 <HAL_DMA_Start_IT+0x20c>)
 80069aa:	4293      	cmp	r3, r2
 80069ac:	d02c      	beq.n	8006a08 <HAL_DMA_Start_IT+0x1bc>
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	4a2a      	ldr	r2, [pc, #168]	@ (8006a5c <HAL_DMA_Start_IT+0x210>)
 80069b4:	4293      	cmp	r3, r2
 80069b6:	d027      	beq.n	8006a08 <HAL_DMA_Start_IT+0x1bc>
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	4a28      	ldr	r2, [pc, #160]	@ (8006a60 <HAL_DMA_Start_IT+0x214>)
 80069be:	4293      	cmp	r3, r2
 80069c0:	d022      	beq.n	8006a08 <HAL_DMA_Start_IT+0x1bc>
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	4a27      	ldr	r2, [pc, #156]	@ (8006a64 <HAL_DMA_Start_IT+0x218>)
 80069c8:	4293      	cmp	r3, r2
 80069ca:	d01d      	beq.n	8006a08 <HAL_DMA_Start_IT+0x1bc>
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	4a25      	ldr	r2, [pc, #148]	@ (8006a68 <HAL_DMA_Start_IT+0x21c>)
 80069d2:	4293      	cmp	r3, r2
 80069d4:	d018      	beq.n	8006a08 <HAL_DMA_Start_IT+0x1bc>
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	4a24      	ldr	r2, [pc, #144]	@ (8006a6c <HAL_DMA_Start_IT+0x220>)
 80069dc:	4293      	cmp	r3, r2
 80069de:	d013      	beq.n	8006a08 <HAL_DMA_Start_IT+0x1bc>
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	4a22      	ldr	r2, [pc, #136]	@ (8006a70 <HAL_DMA_Start_IT+0x224>)
 80069e6:	4293      	cmp	r3, r2
 80069e8:	d00e      	beq.n	8006a08 <HAL_DMA_Start_IT+0x1bc>
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	4a21      	ldr	r2, [pc, #132]	@ (8006a74 <HAL_DMA_Start_IT+0x228>)
 80069f0:	4293      	cmp	r3, r2
 80069f2:	d009      	beq.n	8006a08 <HAL_DMA_Start_IT+0x1bc>
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	4a1f      	ldr	r2, [pc, #124]	@ (8006a78 <HAL_DMA_Start_IT+0x22c>)
 80069fa:	4293      	cmp	r3, r2
 80069fc:	d004      	beq.n	8006a08 <HAL_DMA_Start_IT+0x1bc>
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	4a1e      	ldr	r2, [pc, #120]	@ (8006a7c <HAL_DMA_Start_IT+0x230>)
 8006a04:	4293      	cmp	r3, r2
 8006a06:	d101      	bne.n	8006a0c <HAL_DMA_Start_IT+0x1c0>
 8006a08:	2301      	movs	r3, #1
 8006a0a:	e000      	b.n	8006a0e <HAL_DMA_Start_IT+0x1c2>
 8006a0c:	2300      	movs	r3, #0
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d036      	beq.n	8006a80 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	f023 021e 	bic.w	r2, r3, #30
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	f042 0216 	orr.w	r2, r2, #22
 8006a24:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d03e      	beq.n	8006aac <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	681a      	ldr	r2, [r3, #0]
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	f042 0208 	orr.w	r2, r2, #8
 8006a3c:	601a      	str	r2, [r3, #0]
 8006a3e:	e035      	b.n	8006aac <HAL_DMA_Start_IT+0x260>
 8006a40:	40020010 	.word	0x40020010
 8006a44:	40020028 	.word	0x40020028
 8006a48:	40020040 	.word	0x40020040
 8006a4c:	40020058 	.word	0x40020058
 8006a50:	40020070 	.word	0x40020070
 8006a54:	40020088 	.word	0x40020088
 8006a58:	400200a0 	.word	0x400200a0
 8006a5c:	400200b8 	.word	0x400200b8
 8006a60:	40020410 	.word	0x40020410
 8006a64:	40020428 	.word	0x40020428
 8006a68:	40020440 	.word	0x40020440
 8006a6c:	40020458 	.word	0x40020458
 8006a70:	40020470 	.word	0x40020470
 8006a74:	40020488 	.word	0x40020488
 8006a78:	400204a0 	.word	0x400204a0
 8006a7c:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	f023 020e 	bic.w	r2, r3, #14
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	f042 020a 	orr.w	r2, r2, #10
 8006a92:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d007      	beq.n	8006aac <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	681a      	ldr	r2, [r3, #0]
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	f042 0204 	orr.w	r2, r2, #4
 8006aaa:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	4a83      	ldr	r2, [pc, #524]	@ (8006cc0 <HAL_DMA_Start_IT+0x474>)
 8006ab2:	4293      	cmp	r3, r2
 8006ab4:	d072      	beq.n	8006b9c <HAL_DMA_Start_IT+0x350>
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	4a82      	ldr	r2, [pc, #520]	@ (8006cc4 <HAL_DMA_Start_IT+0x478>)
 8006abc:	4293      	cmp	r3, r2
 8006abe:	d06d      	beq.n	8006b9c <HAL_DMA_Start_IT+0x350>
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	4a80      	ldr	r2, [pc, #512]	@ (8006cc8 <HAL_DMA_Start_IT+0x47c>)
 8006ac6:	4293      	cmp	r3, r2
 8006ac8:	d068      	beq.n	8006b9c <HAL_DMA_Start_IT+0x350>
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	4a7f      	ldr	r2, [pc, #508]	@ (8006ccc <HAL_DMA_Start_IT+0x480>)
 8006ad0:	4293      	cmp	r3, r2
 8006ad2:	d063      	beq.n	8006b9c <HAL_DMA_Start_IT+0x350>
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	4a7d      	ldr	r2, [pc, #500]	@ (8006cd0 <HAL_DMA_Start_IT+0x484>)
 8006ada:	4293      	cmp	r3, r2
 8006adc:	d05e      	beq.n	8006b9c <HAL_DMA_Start_IT+0x350>
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	4a7c      	ldr	r2, [pc, #496]	@ (8006cd4 <HAL_DMA_Start_IT+0x488>)
 8006ae4:	4293      	cmp	r3, r2
 8006ae6:	d059      	beq.n	8006b9c <HAL_DMA_Start_IT+0x350>
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	4a7a      	ldr	r2, [pc, #488]	@ (8006cd8 <HAL_DMA_Start_IT+0x48c>)
 8006aee:	4293      	cmp	r3, r2
 8006af0:	d054      	beq.n	8006b9c <HAL_DMA_Start_IT+0x350>
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	4a79      	ldr	r2, [pc, #484]	@ (8006cdc <HAL_DMA_Start_IT+0x490>)
 8006af8:	4293      	cmp	r3, r2
 8006afa:	d04f      	beq.n	8006b9c <HAL_DMA_Start_IT+0x350>
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	4a77      	ldr	r2, [pc, #476]	@ (8006ce0 <HAL_DMA_Start_IT+0x494>)
 8006b02:	4293      	cmp	r3, r2
 8006b04:	d04a      	beq.n	8006b9c <HAL_DMA_Start_IT+0x350>
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	4a76      	ldr	r2, [pc, #472]	@ (8006ce4 <HAL_DMA_Start_IT+0x498>)
 8006b0c:	4293      	cmp	r3, r2
 8006b0e:	d045      	beq.n	8006b9c <HAL_DMA_Start_IT+0x350>
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	4a74      	ldr	r2, [pc, #464]	@ (8006ce8 <HAL_DMA_Start_IT+0x49c>)
 8006b16:	4293      	cmp	r3, r2
 8006b18:	d040      	beq.n	8006b9c <HAL_DMA_Start_IT+0x350>
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	4a73      	ldr	r2, [pc, #460]	@ (8006cec <HAL_DMA_Start_IT+0x4a0>)
 8006b20:	4293      	cmp	r3, r2
 8006b22:	d03b      	beq.n	8006b9c <HAL_DMA_Start_IT+0x350>
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	4a71      	ldr	r2, [pc, #452]	@ (8006cf0 <HAL_DMA_Start_IT+0x4a4>)
 8006b2a:	4293      	cmp	r3, r2
 8006b2c:	d036      	beq.n	8006b9c <HAL_DMA_Start_IT+0x350>
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	4a70      	ldr	r2, [pc, #448]	@ (8006cf4 <HAL_DMA_Start_IT+0x4a8>)
 8006b34:	4293      	cmp	r3, r2
 8006b36:	d031      	beq.n	8006b9c <HAL_DMA_Start_IT+0x350>
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	4a6e      	ldr	r2, [pc, #440]	@ (8006cf8 <HAL_DMA_Start_IT+0x4ac>)
 8006b3e:	4293      	cmp	r3, r2
 8006b40:	d02c      	beq.n	8006b9c <HAL_DMA_Start_IT+0x350>
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	4a6d      	ldr	r2, [pc, #436]	@ (8006cfc <HAL_DMA_Start_IT+0x4b0>)
 8006b48:	4293      	cmp	r3, r2
 8006b4a:	d027      	beq.n	8006b9c <HAL_DMA_Start_IT+0x350>
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	4a6b      	ldr	r2, [pc, #428]	@ (8006d00 <HAL_DMA_Start_IT+0x4b4>)
 8006b52:	4293      	cmp	r3, r2
 8006b54:	d022      	beq.n	8006b9c <HAL_DMA_Start_IT+0x350>
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	4a6a      	ldr	r2, [pc, #424]	@ (8006d04 <HAL_DMA_Start_IT+0x4b8>)
 8006b5c:	4293      	cmp	r3, r2
 8006b5e:	d01d      	beq.n	8006b9c <HAL_DMA_Start_IT+0x350>
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	4a68      	ldr	r2, [pc, #416]	@ (8006d08 <HAL_DMA_Start_IT+0x4bc>)
 8006b66:	4293      	cmp	r3, r2
 8006b68:	d018      	beq.n	8006b9c <HAL_DMA_Start_IT+0x350>
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	4a67      	ldr	r2, [pc, #412]	@ (8006d0c <HAL_DMA_Start_IT+0x4c0>)
 8006b70:	4293      	cmp	r3, r2
 8006b72:	d013      	beq.n	8006b9c <HAL_DMA_Start_IT+0x350>
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	4a65      	ldr	r2, [pc, #404]	@ (8006d10 <HAL_DMA_Start_IT+0x4c4>)
 8006b7a:	4293      	cmp	r3, r2
 8006b7c:	d00e      	beq.n	8006b9c <HAL_DMA_Start_IT+0x350>
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	4a64      	ldr	r2, [pc, #400]	@ (8006d14 <HAL_DMA_Start_IT+0x4c8>)
 8006b84:	4293      	cmp	r3, r2
 8006b86:	d009      	beq.n	8006b9c <HAL_DMA_Start_IT+0x350>
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	4a62      	ldr	r2, [pc, #392]	@ (8006d18 <HAL_DMA_Start_IT+0x4cc>)
 8006b8e:	4293      	cmp	r3, r2
 8006b90:	d004      	beq.n	8006b9c <HAL_DMA_Start_IT+0x350>
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	4a61      	ldr	r2, [pc, #388]	@ (8006d1c <HAL_DMA_Start_IT+0x4d0>)
 8006b98:	4293      	cmp	r3, r2
 8006b9a:	d101      	bne.n	8006ba0 <HAL_DMA_Start_IT+0x354>
 8006b9c:	2301      	movs	r3, #1
 8006b9e:	e000      	b.n	8006ba2 <HAL_DMA_Start_IT+0x356>
 8006ba0:	2300      	movs	r3, #0
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d01a      	beq.n	8006bdc <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d007      	beq.n	8006bc4 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006bb8:	681a      	ldr	r2, [r3, #0]
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006bbe:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006bc2:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d007      	beq.n	8006bdc <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006bd0:	681a      	ldr	r2, [r3, #0]
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006bd6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006bda:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	4a37      	ldr	r2, [pc, #220]	@ (8006cc0 <HAL_DMA_Start_IT+0x474>)
 8006be2:	4293      	cmp	r3, r2
 8006be4:	d04a      	beq.n	8006c7c <HAL_DMA_Start_IT+0x430>
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	4a36      	ldr	r2, [pc, #216]	@ (8006cc4 <HAL_DMA_Start_IT+0x478>)
 8006bec:	4293      	cmp	r3, r2
 8006bee:	d045      	beq.n	8006c7c <HAL_DMA_Start_IT+0x430>
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	4a34      	ldr	r2, [pc, #208]	@ (8006cc8 <HAL_DMA_Start_IT+0x47c>)
 8006bf6:	4293      	cmp	r3, r2
 8006bf8:	d040      	beq.n	8006c7c <HAL_DMA_Start_IT+0x430>
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	4a33      	ldr	r2, [pc, #204]	@ (8006ccc <HAL_DMA_Start_IT+0x480>)
 8006c00:	4293      	cmp	r3, r2
 8006c02:	d03b      	beq.n	8006c7c <HAL_DMA_Start_IT+0x430>
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	4a31      	ldr	r2, [pc, #196]	@ (8006cd0 <HAL_DMA_Start_IT+0x484>)
 8006c0a:	4293      	cmp	r3, r2
 8006c0c:	d036      	beq.n	8006c7c <HAL_DMA_Start_IT+0x430>
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	4a30      	ldr	r2, [pc, #192]	@ (8006cd4 <HAL_DMA_Start_IT+0x488>)
 8006c14:	4293      	cmp	r3, r2
 8006c16:	d031      	beq.n	8006c7c <HAL_DMA_Start_IT+0x430>
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	4a2e      	ldr	r2, [pc, #184]	@ (8006cd8 <HAL_DMA_Start_IT+0x48c>)
 8006c1e:	4293      	cmp	r3, r2
 8006c20:	d02c      	beq.n	8006c7c <HAL_DMA_Start_IT+0x430>
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	4a2d      	ldr	r2, [pc, #180]	@ (8006cdc <HAL_DMA_Start_IT+0x490>)
 8006c28:	4293      	cmp	r3, r2
 8006c2a:	d027      	beq.n	8006c7c <HAL_DMA_Start_IT+0x430>
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	4a2b      	ldr	r2, [pc, #172]	@ (8006ce0 <HAL_DMA_Start_IT+0x494>)
 8006c32:	4293      	cmp	r3, r2
 8006c34:	d022      	beq.n	8006c7c <HAL_DMA_Start_IT+0x430>
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	4a2a      	ldr	r2, [pc, #168]	@ (8006ce4 <HAL_DMA_Start_IT+0x498>)
 8006c3c:	4293      	cmp	r3, r2
 8006c3e:	d01d      	beq.n	8006c7c <HAL_DMA_Start_IT+0x430>
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	4a28      	ldr	r2, [pc, #160]	@ (8006ce8 <HAL_DMA_Start_IT+0x49c>)
 8006c46:	4293      	cmp	r3, r2
 8006c48:	d018      	beq.n	8006c7c <HAL_DMA_Start_IT+0x430>
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	4a27      	ldr	r2, [pc, #156]	@ (8006cec <HAL_DMA_Start_IT+0x4a0>)
 8006c50:	4293      	cmp	r3, r2
 8006c52:	d013      	beq.n	8006c7c <HAL_DMA_Start_IT+0x430>
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	4a25      	ldr	r2, [pc, #148]	@ (8006cf0 <HAL_DMA_Start_IT+0x4a4>)
 8006c5a:	4293      	cmp	r3, r2
 8006c5c:	d00e      	beq.n	8006c7c <HAL_DMA_Start_IT+0x430>
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	4a24      	ldr	r2, [pc, #144]	@ (8006cf4 <HAL_DMA_Start_IT+0x4a8>)
 8006c64:	4293      	cmp	r3, r2
 8006c66:	d009      	beq.n	8006c7c <HAL_DMA_Start_IT+0x430>
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	4a22      	ldr	r2, [pc, #136]	@ (8006cf8 <HAL_DMA_Start_IT+0x4ac>)
 8006c6e:	4293      	cmp	r3, r2
 8006c70:	d004      	beq.n	8006c7c <HAL_DMA_Start_IT+0x430>
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	4a21      	ldr	r2, [pc, #132]	@ (8006cfc <HAL_DMA_Start_IT+0x4b0>)
 8006c78:	4293      	cmp	r3, r2
 8006c7a:	d108      	bne.n	8006c8e <HAL_DMA_Start_IT+0x442>
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	681a      	ldr	r2, [r3, #0]
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	f042 0201 	orr.w	r2, r2, #1
 8006c8a:	601a      	str	r2, [r3, #0]
 8006c8c:	e012      	b.n	8006cb4 <HAL_DMA_Start_IT+0x468>
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	681a      	ldr	r2, [r3, #0]
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	f042 0201 	orr.w	r2, r2, #1
 8006c9c:	601a      	str	r2, [r3, #0]
 8006c9e:	e009      	b.n	8006cb4 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006ca6:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	2200      	movs	r2, #0
 8006cac:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8006cb0:	2301      	movs	r3, #1
 8006cb2:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8006cb4:	7dfb      	ldrb	r3, [r7, #23]
}
 8006cb6:	4618      	mov	r0, r3
 8006cb8:	3718      	adds	r7, #24
 8006cba:	46bd      	mov	sp, r7
 8006cbc:	bd80      	pop	{r7, pc}
 8006cbe:	bf00      	nop
 8006cc0:	40020010 	.word	0x40020010
 8006cc4:	40020028 	.word	0x40020028
 8006cc8:	40020040 	.word	0x40020040
 8006ccc:	40020058 	.word	0x40020058
 8006cd0:	40020070 	.word	0x40020070
 8006cd4:	40020088 	.word	0x40020088
 8006cd8:	400200a0 	.word	0x400200a0
 8006cdc:	400200b8 	.word	0x400200b8
 8006ce0:	40020410 	.word	0x40020410
 8006ce4:	40020428 	.word	0x40020428
 8006ce8:	40020440 	.word	0x40020440
 8006cec:	40020458 	.word	0x40020458
 8006cf0:	40020470 	.word	0x40020470
 8006cf4:	40020488 	.word	0x40020488
 8006cf8:	400204a0 	.word	0x400204a0
 8006cfc:	400204b8 	.word	0x400204b8
 8006d00:	58025408 	.word	0x58025408
 8006d04:	5802541c 	.word	0x5802541c
 8006d08:	58025430 	.word	0x58025430
 8006d0c:	58025444 	.word	0x58025444
 8006d10:	58025458 	.word	0x58025458
 8006d14:	5802546c 	.word	0x5802546c
 8006d18:	58025480 	.word	0x58025480
 8006d1c:	58025494 	.word	0x58025494

08006d20 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006d20:	b580      	push	{r7, lr}
 8006d22:	b086      	sub	sp, #24
 8006d24:	af00      	add	r7, sp, #0
 8006d26:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8006d28:	f7ff f856 	bl	8005dd8 <HAL_GetTick>
 8006d2c:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d101      	bne.n	8006d38 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8006d34:	2301      	movs	r3, #1
 8006d36:	e2dc      	b.n	80072f2 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006d3e:	b2db      	uxtb	r3, r3
 8006d40:	2b02      	cmp	r3, #2
 8006d42:	d008      	beq.n	8006d56 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	2280      	movs	r2, #128	@ 0x80
 8006d48:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	2200      	movs	r2, #0
 8006d4e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 8006d52:	2301      	movs	r3, #1
 8006d54:	e2cd      	b.n	80072f2 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	4a76      	ldr	r2, [pc, #472]	@ (8006f34 <HAL_DMA_Abort+0x214>)
 8006d5c:	4293      	cmp	r3, r2
 8006d5e:	d04a      	beq.n	8006df6 <HAL_DMA_Abort+0xd6>
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	4a74      	ldr	r2, [pc, #464]	@ (8006f38 <HAL_DMA_Abort+0x218>)
 8006d66:	4293      	cmp	r3, r2
 8006d68:	d045      	beq.n	8006df6 <HAL_DMA_Abort+0xd6>
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	4a73      	ldr	r2, [pc, #460]	@ (8006f3c <HAL_DMA_Abort+0x21c>)
 8006d70:	4293      	cmp	r3, r2
 8006d72:	d040      	beq.n	8006df6 <HAL_DMA_Abort+0xd6>
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	4a71      	ldr	r2, [pc, #452]	@ (8006f40 <HAL_DMA_Abort+0x220>)
 8006d7a:	4293      	cmp	r3, r2
 8006d7c:	d03b      	beq.n	8006df6 <HAL_DMA_Abort+0xd6>
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	4a70      	ldr	r2, [pc, #448]	@ (8006f44 <HAL_DMA_Abort+0x224>)
 8006d84:	4293      	cmp	r3, r2
 8006d86:	d036      	beq.n	8006df6 <HAL_DMA_Abort+0xd6>
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	4a6e      	ldr	r2, [pc, #440]	@ (8006f48 <HAL_DMA_Abort+0x228>)
 8006d8e:	4293      	cmp	r3, r2
 8006d90:	d031      	beq.n	8006df6 <HAL_DMA_Abort+0xd6>
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	4a6d      	ldr	r2, [pc, #436]	@ (8006f4c <HAL_DMA_Abort+0x22c>)
 8006d98:	4293      	cmp	r3, r2
 8006d9a:	d02c      	beq.n	8006df6 <HAL_DMA_Abort+0xd6>
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	4a6b      	ldr	r2, [pc, #428]	@ (8006f50 <HAL_DMA_Abort+0x230>)
 8006da2:	4293      	cmp	r3, r2
 8006da4:	d027      	beq.n	8006df6 <HAL_DMA_Abort+0xd6>
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	4a6a      	ldr	r2, [pc, #424]	@ (8006f54 <HAL_DMA_Abort+0x234>)
 8006dac:	4293      	cmp	r3, r2
 8006dae:	d022      	beq.n	8006df6 <HAL_DMA_Abort+0xd6>
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	4a68      	ldr	r2, [pc, #416]	@ (8006f58 <HAL_DMA_Abort+0x238>)
 8006db6:	4293      	cmp	r3, r2
 8006db8:	d01d      	beq.n	8006df6 <HAL_DMA_Abort+0xd6>
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	4a67      	ldr	r2, [pc, #412]	@ (8006f5c <HAL_DMA_Abort+0x23c>)
 8006dc0:	4293      	cmp	r3, r2
 8006dc2:	d018      	beq.n	8006df6 <HAL_DMA_Abort+0xd6>
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	4a65      	ldr	r2, [pc, #404]	@ (8006f60 <HAL_DMA_Abort+0x240>)
 8006dca:	4293      	cmp	r3, r2
 8006dcc:	d013      	beq.n	8006df6 <HAL_DMA_Abort+0xd6>
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	4a64      	ldr	r2, [pc, #400]	@ (8006f64 <HAL_DMA_Abort+0x244>)
 8006dd4:	4293      	cmp	r3, r2
 8006dd6:	d00e      	beq.n	8006df6 <HAL_DMA_Abort+0xd6>
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	4a62      	ldr	r2, [pc, #392]	@ (8006f68 <HAL_DMA_Abort+0x248>)
 8006dde:	4293      	cmp	r3, r2
 8006de0:	d009      	beq.n	8006df6 <HAL_DMA_Abort+0xd6>
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	4a61      	ldr	r2, [pc, #388]	@ (8006f6c <HAL_DMA_Abort+0x24c>)
 8006de8:	4293      	cmp	r3, r2
 8006dea:	d004      	beq.n	8006df6 <HAL_DMA_Abort+0xd6>
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	4a5f      	ldr	r2, [pc, #380]	@ (8006f70 <HAL_DMA_Abort+0x250>)
 8006df2:	4293      	cmp	r3, r2
 8006df4:	d101      	bne.n	8006dfa <HAL_DMA_Abort+0xda>
 8006df6:	2301      	movs	r3, #1
 8006df8:	e000      	b.n	8006dfc <HAL_DMA_Abort+0xdc>
 8006dfa:	2300      	movs	r3, #0
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d013      	beq.n	8006e28 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	681a      	ldr	r2, [r3, #0]
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	f022 021e 	bic.w	r2, r2, #30
 8006e0e:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	695a      	ldr	r2, [r3, #20]
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006e1e:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	617b      	str	r3, [r7, #20]
 8006e26:	e00a      	b.n	8006e3e <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	681a      	ldr	r2, [r3, #0]
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	f022 020e 	bic.w	r2, r2, #14
 8006e36:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	4a3c      	ldr	r2, [pc, #240]	@ (8006f34 <HAL_DMA_Abort+0x214>)
 8006e44:	4293      	cmp	r3, r2
 8006e46:	d072      	beq.n	8006f2e <HAL_DMA_Abort+0x20e>
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	4a3a      	ldr	r2, [pc, #232]	@ (8006f38 <HAL_DMA_Abort+0x218>)
 8006e4e:	4293      	cmp	r3, r2
 8006e50:	d06d      	beq.n	8006f2e <HAL_DMA_Abort+0x20e>
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	4a39      	ldr	r2, [pc, #228]	@ (8006f3c <HAL_DMA_Abort+0x21c>)
 8006e58:	4293      	cmp	r3, r2
 8006e5a:	d068      	beq.n	8006f2e <HAL_DMA_Abort+0x20e>
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	4a37      	ldr	r2, [pc, #220]	@ (8006f40 <HAL_DMA_Abort+0x220>)
 8006e62:	4293      	cmp	r3, r2
 8006e64:	d063      	beq.n	8006f2e <HAL_DMA_Abort+0x20e>
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	4a36      	ldr	r2, [pc, #216]	@ (8006f44 <HAL_DMA_Abort+0x224>)
 8006e6c:	4293      	cmp	r3, r2
 8006e6e:	d05e      	beq.n	8006f2e <HAL_DMA_Abort+0x20e>
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	4a34      	ldr	r2, [pc, #208]	@ (8006f48 <HAL_DMA_Abort+0x228>)
 8006e76:	4293      	cmp	r3, r2
 8006e78:	d059      	beq.n	8006f2e <HAL_DMA_Abort+0x20e>
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	4a33      	ldr	r2, [pc, #204]	@ (8006f4c <HAL_DMA_Abort+0x22c>)
 8006e80:	4293      	cmp	r3, r2
 8006e82:	d054      	beq.n	8006f2e <HAL_DMA_Abort+0x20e>
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	4a31      	ldr	r2, [pc, #196]	@ (8006f50 <HAL_DMA_Abort+0x230>)
 8006e8a:	4293      	cmp	r3, r2
 8006e8c:	d04f      	beq.n	8006f2e <HAL_DMA_Abort+0x20e>
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	4a30      	ldr	r2, [pc, #192]	@ (8006f54 <HAL_DMA_Abort+0x234>)
 8006e94:	4293      	cmp	r3, r2
 8006e96:	d04a      	beq.n	8006f2e <HAL_DMA_Abort+0x20e>
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	4a2e      	ldr	r2, [pc, #184]	@ (8006f58 <HAL_DMA_Abort+0x238>)
 8006e9e:	4293      	cmp	r3, r2
 8006ea0:	d045      	beq.n	8006f2e <HAL_DMA_Abort+0x20e>
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	4a2d      	ldr	r2, [pc, #180]	@ (8006f5c <HAL_DMA_Abort+0x23c>)
 8006ea8:	4293      	cmp	r3, r2
 8006eaa:	d040      	beq.n	8006f2e <HAL_DMA_Abort+0x20e>
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	4a2b      	ldr	r2, [pc, #172]	@ (8006f60 <HAL_DMA_Abort+0x240>)
 8006eb2:	4293      	cmp	r3, r2
 8006eb4:	d03b      	beq.n	8006f2e <HAL_DMA_Abort+0x20e>
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	4a2a      	ldr	r2, [pc, #168]	@ (8006f64 <HAL_DMA_Abort+0x244>)
 8006ebc:	4293      	cmp	r3, r2
 8006ebe:	d036      	beq.n	8006f2e <HAL_DMA_Abort+0x20e>
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	4a28      	ldr	r2, [pc, #160]	@ (8006f68 <HAL_DMA_Abort+0x248>)
 8006ec6:	4293      	cmp	r3, r2
 8006ec8:	d031      	beq.n	8006f2e <HAL_DMA_Abort+0x20e>
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	4a27      	ldr	r2, [pc, #156]	@ (8006f6c <HAL_DMA_Abort+0x24c>)
 8006ed0:	4293      	cmp	r3, r2
 8006ed2:	d02c      	beq.n	8006f2e <HAL_DMA_Abort+0x20e>
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	4a25      	ldr	r2, [pc, #148]	@ (8006f70 <HAL_DMA_Abort+0x250>)
 8006eda:	4293      	cmp	r3, r2
 8006edc:	d027      	beq.n	8006f2e <HAL_DMA_Abort+0x20e>
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	4a24      	ldr	r2, [pc, #144]	@ (8006f74 <HAL_DMA_Abort+0x254>)
 8006ee4:	4293      	cmp	r3, r2
 8006ee6:	d022      	beq.n	8006f2e <HAL_DMA_Abort+0x20e>
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	4a22      	ldr	r2, [pc, #136]	@ (8006f78 <HAL_DMA_Abort+0x258>)
 8006eee:	4293      	cmp	r3, r2
 8006ef0:	d01d      	beq.n	8006f2e <HAL_DMA_Abort+0x20e>
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	4a21      	ldr	r2, [pc, #132]	@ (8006f7c <HAL_DMA_Abort+0x25c>)
 8006ef8:	4293      	cmp	r3, r2
 8006efa:	d018      	beq.n	8006f2e <HAL_DMA_Abort+0x20e>
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	4a1f      	ldr	r2, [pc, #124]	@ (8006f80 <HAL_DMA_Abort+0x260>)
 8006f02:	4293      	cmp	r3, r2
 8006f04:	d013      	beq.n	8006f2e <HAL_DMA_Abort+0x20e>
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	4a1e      	ldr	r2, [pc, #120]	@ (8006f84 <HAL_DMA_Abort+0x264>)
 8006f0c:	4293      	cmp	r3, r2
 8006f0e:	d00e      	beq.n	8006f2e <HAL_DMA_Abort+0x20e>
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	4a1c      	ldr	r2, [pc, #112]	@ (8006f88 <HAL_DMA_Abort+0x268>)
 8006f16:	4293      	cmp	r3, r2
 8006f18:	d009      	beq.n	8006f2e <HAL_DMA_Abort+0x20e>
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	4a1b      	ldr	r2, [pc, #108]	@ (8006f8c <HAL_DMA_Abort+0x26c>)
 8006f20:	4293      	cmp	r3, r2
 8006f22:	d004      	beq.n	8006f2e <HAL_DMA_Abort+0x20e>
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	4a19      	ldr	r2, [pc, #100]	@ (8006f90 <HAL_DMA_Abort+0x270>)
 8006f2a:	4293      	cmp	r3, r2
 8006f2c:	d132      	bne.n	8006f94 <HAL_DMA_Abort+0x274>
 8006f2e:	2301      	movs	r3, #1
 8006f30:	e031      	b.n	8006f96 <HAL_DMA_Abort+0x276>
 8006f32:	bf00      	nop
 8006f34:	40020010 	.word	0x40020010
 8006f38:	40020028 	.word	0x40020028
 8006f3c:	40020040 	.word	0x40020040
 8006f40:	40020058 	.word	0x40020058
 8006f44:	40020070 	.word	0x40020070
 8006f48:	40020088 	.word	0x40020088
 8006f4c:	400200a0 	.word	0x400200a0
 8006f50:	400200b8 	.word	0x400200b8
 8006f54:	40020410 	.word	0x40020410
 8006f58:	40020428 	.word	0x40020428
 8006f5c:	40020440 	.word	0x40020440
 8006f60:	40020458 	.word	0x40020458
 8006f64:	40020470 	.word	0x40020470
 8006f68:	40020488 	.word	0x40020488
 8006f6c:	400204a0 	.word	0x400204a0
 8006f70:	400204b8 	.word	0x400204b8
 8006f74:	58025408 	.word	0x58025408
 8006f78:	5802541c 	.word	0x5802541c
 8006f7c:	58025430 	.word	0x58025430
 8006f80:	58025444 	.word	0x58025444
 8006f84:	58025458 	.word	0x58025458
 8006f88:	5802546c 	.word	0x5802546c
 8006f8c:	58025480 	.word	0x58025480
 8006f90:	58025494 	.word	0x58025494
 8006f94:	2300      	movs	r3, #0
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d007      	beq.n	8006faa <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006f9e:	681a      	ldr	r2, [r3, #0]
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006fa4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006fa8:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	4a6d      	ldr	r2, [pc, #436]	@ (8007164 <HAL_DMA_Abort+0x444>)
 8006fb0:	4293      	cmp	r3, r2
 8006fb2:	d04a      	beq.n	800704a <HAL_DMA_Abort+0x32a>
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	4a6b      	ldr	r2, [pc, #428]	@ (8007168 <HAL_DMA_Abort+0x448>)
 8006fba:	4293      	cmp	r3, r2
 8006fbc:	d045      	beq.n	800704a <HAL_DMA_Abort+0x32a>
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	4a6a      	ldr	r2, [pc, #424]	@ (800716c <HAL_DMA_Abort+0x44c>)
 8006fc4:	4293      	cmp	r3, r2
 8006fc6:	d040      	beq.n	800704a <HAL_DMA_Abort+0x32a>
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	4a68      	ldr	r2, [pc, #416]	@ (8007170 <HAL_DMA_Abort+0x450>)
 8006fce:	4293      	cmp	r3, r2
 8006fd0:	d03b      	beq.n	800704a <HAL_DMA_Abort+0x32a>
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	4a67      	ldr	r2, [pc, #412]	@ (8007174 <HAL_DMA_Abort+0x454>)
 8006fd8:	4293      	cmp	r3, r2
 8006fda:	d036      	beq.n	800704a <HAL_DMA_Abort+0x32a>
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	4a65      	ldr	r2, [pc, #404]	@ (8007178 <HAL_DMA_Abort+0x458>)
 8006fe2:	4293      	cmp	r3, r2
 8006fe4:	d031      	beq.n	800704a <HAL_DMA_Abort+0x32a>
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	4a64      	ldr	r2, [pc, #400]	@ (800717c <HAL_DMA_Abort+0x45c>)
 8006fec:	4293      	cmp	r3, r2
 8006fee:	d02c      	beq.n	800704a <HAL_DMA_Abort+0x32a>
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	4a62      	ldr	r2, [pc, #392]	@ (8007180 <HAL_DMA_Abort+0x460>)
 8006ff6:	4293      	cmp	r3, r2
 8006ff8:	d027      	beq.n	800704a <HAL_DMA_Abort+0x32a>
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	4a61      	ldr	r2, [pc, #388]	@ (8007184 <HAL_DMA_Abort+0x464>)
 8007000:	4293      	cmp	r3, r2
 8007002:	d022      	beq.n	800704a <HAL_DMA_Abort+0x32a>
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	4a5f      	ldr	r2, [pc, #380]	@ (8007188 <HAL_DMA_Abort+0x468>)
 800700a:	4293      	cmp	r3, r2
 800700c:	d01d      	beq.n	800704a <HAL_DMA_Abort+0x32a>
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	4a5e      	ldr	r2, [pc, #376]	@ (800718c <HAL_DMA_Abort+0x46c>)
 8007014:	4293      	cmp	r3, r2
 8007016:	d018      	beq.n	800704a <HAL_DMA_Abort+0x32a>
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	4a5c      	ldr	r2, [pc, #368]	@ (8007190 <HAL_DMA_Abort+0x470>)
 800701e:	4293      	cmp	r3, r2
 8007020:	d013      	beq.n	800704a <HAL_DMA_Abort+0x32a>
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	4a5b      	ldr	r2, [pc, #364]	@ (8007194 <HAL_DMA_Abort+0x474>)
 8007028:	4293      	cmp	r3, r2
 800702a:	d00e      	beq.n	800704a <HAL_DMA_Abort+0x32a>
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	4a59      	ldr	r2, [pc, #356]	@ (8007198 <HAL_DMA_Abort+0x478>)
 8007032:	4293      	cmp	r3, r2
 8007034:	d009      	beq.n	800704a <HAL_DMA_Abort+0x32a>
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	4a58      	ldr	r2, [pc, #352]	@ (800719c <HAL_DMA_Abort+0x47c>)
 800703c:	4293      	cmp	r3, r2
 800703e:	d004      	beq.n	800704a <HAL_DMA_Abort+0x32a>
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	4a56      	ldr	r2, [pc, #344]	@ (80071a0 <HAL_DMA_Abort+0x480>)
 8007046:	4293      	cmp	r3, r2
 8007048:	d108      	bne.n	800705c <HAL_DMA_Abort+0x33c>
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	681a      	ldr	r2, [r3, #0]
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	f022 0201 	bic.w	r2, r2, #1
 8007058:	601a      	str	r2, [r3, #0]
 800705a:	e007      	b.n	800706c <HAL_DMA_Abort+0x34c>
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	681a      	ldr	r2, [r3, #0]
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	f022 0201 	bic.w	r2, r2, #1
 800706a:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800706c:	e013      	b.n	8007096 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800706e:	f7fe feb3 	bl	8005dd8 <HAL_GetTick>
 8007072:	4602      	mov	r2, r0
 8007074:	693b      	ldr	r3, [r7, #16]
 8007076:	1ad3      	subs	r3, r2, r3
 8007078:	2b05      	cmp	r3, #5
 800707a:	d90c      	bls.n	8007096 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	2220      	movs	r2, #32
 8007080:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	2203      	movs	r2, #3
 8007086:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	2200      	movs	r2, #0
 800708e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8007092:	2301      	movs	r3, #1
 8007094:	e12d      	b.n	80072f2 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8007096:	697b      	ldr	r3, [r7, #20]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	f003 0301 	and.w	r3, r3, #1
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d1e5      	bne.n	800706e <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	4a2f      	ldr	r2, [pc, #188]	@ (8007164 <HAL_DMA_Abort+0x444>)
 80070a8:	4293      	cmp	r3, r2
 80070aa:	d04a      	beq.n	8007142 <HAL_DMA_Abort+0x422>
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	4a2d      	ldr	r2, [pc, #180]	@ (8007168 <HAL_DMA_Abort+0x448>)
 80070b2:	4293      	cmp	r3, r2
 80070b4:	d045      	beq.n	8007142 <HAL_DMA_Abort+0x422>
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	4a2c      	ldr	r2, [pc, #176]	@ (800716c <HAL_DMA_Abort+0x44c>)
 80070bc:	4293      	cmp	r3, r2
 80070be:	d040      	beq.n	8007142 <HAL_DMA_Abort+0x422>
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	4a2a      	ldr	r2, [pc, #168]	@ (8007170 <HAL_DMA_Abort+0x450>)
 80070c6:	4293      	cmp	r3, r2
 80070c8:	d03b      	beq.n	8007142 <HAL_DMA_Abort+0x422>
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	4a29      	ldr	r2, [pc, #164]	@ (8007174 <HAL_DMA_Abort+0x454>)
 80070d0:	4293      	cmp	r3, r2
 80070d2:	d036      	beq.n	8007142 <HAL_DMA_Abort+0x422>
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	4a27      	ldr	r2, [pc, #156]	@ (8007178 <HAL_DMA_Abort+0x458>)
 80070da:	4293      	cmp	r3, r2
 80070dc:	d031      	beq.n	8007142 <HAL_DMA_Abort+0x422>
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	4a26      	ldr	r2, [pc, #152]	@ (800717c <HAL_DMA_Abort+0x45c>)
 80070e4:	4293      	cmp	r3, r2
 80070e6:	d02c      	beq.n	8007142 <HAL_DMA_Abort+0x422>
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	4a24      	ldr	r2, [pc, #144]	@ (8007180 <HAL_DMA_Abort+0x460>)
 80070ee:	4293      	cmp	r3, r2
 80070f0:	d027      	beq.n	8007142 <HAL_DMA_Abort+0x422>
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	4a23      	ldr	r2, [pc, #140]	@ (8007184 <HAL_DMA_Abort+0x464>)
 80070f8:	4293      	cmp	r3, r2
 80070fa:	d022      	beq.n	8007142 <HAL_DMA_Abort+0x422>
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	4a21      	ldr	r2, [pc, #132]	@ (8007188 <HAL_DMA_Abort+0x468>)
 8007102:	4293      	cmp	r3, r2
 8007104:	d01d      	beq.n	8007142 <HAL_DMA_Abort+0x422>
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	4a20      	ldr	r2, [pc, #128]	@ (800718c <HAL_DMA_Abort+0x46c>)
 800710c:	4293      	cmp	r3, r2
 800710e:	d018      	beq.n	8007142 <HAL_DMA_Abort+0x422>
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	4a1e      	ldr	r2, [pc, #120]	@ (8007190 <HAL_DMA_Abort+0x470>)
 8007116:	4293      	cmp	r3, r2
 8007118:	d013      	beq.n	8007142 <HAL_DMA_Abort+0x422>
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	4a1d      	ldr	r2, [pc, #116]	@ (8007194 <HAL_DMA_Abort+0x474>)
 8007120:	4293      	cmp	r3, r2
 8007122:	d00e      	beq.n	8007142 <HAL_DMA_Abort+0x422>
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	4a1b      	ldr	r2, [pc, #108]	@ (8007198 <HAL_DMA_Abort+0x478>)
 800712a:	4293      	cmp	r3, r2
 800712c:	d009      	beq.n	8007142 <HAL_DMA_Abort+0x422>
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	4a1a      	ldr	r2, [pc, #104]	@ (800719c <HAL_DMA_Abort+0x47c>)
 8007134:	4293      	cmp	r3, r2
 8007136:	d004      	beq.n	8007142 <HAL_DMA_Abort+0x422>
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	4a18      	ldr	r2, [pc, #96]	@ (80071a0 <HAL_DMA_Abort+0x480>)
 800713e:	4293      	cmp	r3, r2
 8007140:	d101      	bne.n	8007146 <HAL_DMA_Abort+0x426>
 8007142:	2301      	movs	r3, #1
 8007144:	e000      	b.n	8007148 <HAL_DMA_Abort+0x428>
 8007146:	2300      	movs	r3, #0
 8007148:	2b00      	cmp	r3, #0
 800714a:	d02b      	beq.n	80071a4 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007150:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007156:	f003 031f 	and.w	r3, r3, #31
 800715a:	223f      	movs	r2, #63	@ 0x3f
 800715c:	409a      	lsls	r2, r3
 800715e:	68bb      	ldr	r3, [r7, #8]
 8007160:	609a      	str	r2, [r3, #8]
 8007162:	e02a      	b.n	80071ba <HAL_DMA_Abort+0x49a>
 8007164:	40020010 	.word	0x40020010
 8007168:	40020028 	.word	0x40020028
 800716c:	40020040 	.word	0x40020040
 8007170:	40020058 	.word	0x40020058
 8007174:	40020070 	.word	0x40020070
 8007178:	40020088 	.word	0x40020088
 800717c:	400200a0 	.word	0x400200a0
 8007180:	400200b8 	.word	0x400200b8
 8007184:	40020410 	.word	0x40020410
 8007188:	40020428 	.word	0x40020428
 800718c:	40020440 	.word	0x40020440
 8007190:	40020458 	.word	0x40020458
 8007194:	40020470 	.word	0x40020470
 8007198:	40020488 	.word	0x40020488
 800719c:	400204a0 	.word	0x400204a0
 80071a0:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80071a8:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80071ae:	f003 031f 	and.w	r3, r3, #31
 80071b2:	2201      	movs	r2, #1
 80071b4:	409a      	lsls	r2, r3
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	4a4f      	ldr	r2, [pc, #316]	@ (80072fc <HAL_DMA_Abort+0x5dc>)
 80071c0:	4293      	cmp	r3, r2
 80071c2:	d072      	beq.n	80072aa <HAL_DMA_Abort+0x58a>
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	4a4d      	ldr	r2, [pc, #308]	@ (8007300 <HAL_DMA_Abort+0x5e0>)
 80071ca:	4293      	cmp	r3, r2
 80071cc:	d06d      	beq.n	80072aa <HAL_DMA_Abort+0x58a>
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	4a4c      	ldr	r2, [pc, #304]	@ (8007304 <HAL_DMA_Abort+0x5e4>)
 80071d4:	4293      	cmp	r3, r2
 80071d6:	d068      	beq.n	80072aa <HAL_DMA_Abort+0x58a>
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	4a4a      	ldr	r2, [pc, #296]	@ (8007308 <HAL_DMA_Abort+0x5e8>)
 80071de:	4293      	cmp	r3, r2
 80071e0:	d063      	beq.n	80072aa <HAL_DMA_Abort+0x58a>
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	4a49      	ldr	r2, [pc, #292]	@ (800730c <HAL_DMA_Abort+0x5ec>)
 80071e8:	4293      	cmp	r3, r2
 80071ea:	d05e      	beq.n	80072aa <HAL_DMA_Abort+0x58a>
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	4a47      	ldr	r2, [pc, #284]	@ (8007310 <HAL_DMA_Abort+0x5f0>)
 80071f2:	4293      	cmp	r3, r2
 80071f4:	d059      	beq.n	80072aa <HAL_DMA_Abort+0x58a>
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	4a46      	ldr	r2, [pc, #280]	@ (8007314 <HAL_DMA_Abort+0x5f4>)
 80071fc:	4293      	cmp	r3, r2
 80071fe:	d054      	beq.n	80072aa <HAL_DMA_Abort+0x58a>
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	4a44      	ldr	r2, [pc, #272]	@ (8007318 <HAL_DMA_Abort+0x5f8>)
 8007206:	4293      	cmp	r3, r2
 8007208:	d04f      	beq.n	80072aa <HAL_DMA_Abort+0x58a>
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	4a43      	ldr	r2, [pc, #268]	@ (800731c <HAL_DMA_Abort+0x5fc>)
 8007210:	4293      	cmp	r3, r2
 8007212:	d04a      	beq.n	80072aa <HAL_DMA_Abort+0x58a>
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	4a41      	ldr	r2, [pc, #260]	@ (8007320 <HAL_DMA_Abort+0x600>)
 800721a:	4293      	cmp	r3, r2
 800721c:	d045      	beq.n	80072aa <HAL_DMA_Abort+0x58a>
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	4a40      	ldr	r2, [pc, #256]	@ (8007324 <HAL_DMA_Abort+0x604>)
 8007224:	4293      	cmp	r3, r2
 8007226:	d040      	beq.n	80072aa <HAL_DMA_Abort+0x58a>
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	4a3e      	ldr	r2, [pc, #248]	@ (8007328 <HAL_DMA_Abort+0x608>)
 800722e:	4293      	cmp	r3, r2
 8007230:	d03b      	beq.n	80072aa <HAL_DMA_Abort+0x58a>
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	4a3d      	ldr	r2, [pc, #244]	@ (800732c <HAL_DMA_Abort+0x60c>)
 8007238:	4293      	cmp	r3, r2
 800723a:	d036      	beq.n	80072aa <HAL_DMA_Abort+0x58a>
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	4a3b      	ldr	r2, [pc, #236]	@ (8007330 <HAL_DMA_Abort+0x610>)
 8007242:	4293      	cmp	r3, r2
 8007244:	d031      	beq.n	80072aa <HAL_DMA_Abort+0x58a>
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	4a3a      	ldr	r2, [pc, #232]	@ (8007334 <HAL_DMA_Abort+0x614>)
 800724c:	4293      	cmp	r3, r2
 800724e:	d02c      	beq.n	80072aa <HAL_DMA_Abort+0x58a>
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	4a38      	ldr	r2, [pc, #224]	@ (8007338 <HAL_DMA_Abort+0x618>)
 8007256:	4293      	cmp	r3, r2
 8007258:	d027      	beq.n	80072aa <HAL_DMA_Abort+0x58a>
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	4a37      	ldr	r2, [pc, #220]	@ (800733c <HAL_DMA_Abort+0x61c>)
 8007260:	4293      	cmp	r3, r2
 8007262:	d022      	beq.n	80072aa <HAL_DMA_Abort+0x58a>
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	4a35      	ldr	r2, [pc, #212]	@ (8007340 <HAL_DMA_Abort+0x620>)
 800726a:	4293      	cmp	r3, r2
 800726c:	d01d      	beq.n	80072aa <HAL_DMA_Abort+0x58a>
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	4a34      	ldr	r2, [pc, #208]	@ (8007344 <HAL_DMA_Abort+0x624>)
 8007274:	4293      	cmp	r3, r2
 8007276:	d018      	beq.n	80072aa <HAL_DMA_Abort+0x58a>
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	4a32      	ldr	r2, [pc, #200]	@ (8007348 <HAL_DMA_Abort+0x628>)
 800727e:	4293      	cmp	r3, r2
 8007280:	d013      	beq.n	80072aa <HAL_DMA_Abort+0x58a>
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	4a31      	ldr	r2, [pc, #196]	@ (800734c <HAL_DMA_Abort+0x62c>)
 8007288:	4293      	cmp	r3, r2
 800728a:	d00e      	beq.n	80072aa <HAL_DMA_Abort+0x58a>
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	4a2f      	ldr	r2, [pc, #188]	@ (8007350 <HAL_DMA_Abort+0x630>)
 8007292:	4293      	cmp	r3, r2
 8007294:	d009      	beq.n	80072aa <HAL_DMA_Abort+0x58a>
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	4a2e      	ldr	r2, [pc, #184]	@ (8007354 <HAL_DMA_Abort+0x634>)
 800729c:	4293      	cmp	r3, r2
 800729e:	d004      	beq.n	80072aa <HAL_DMA_Abort+0x58a>
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	4a2c      	ldr	r2, [pc, #176]	@ (8007358 <HAL_DMA_Abort+0x638>)
 80072a6:	4293      	cmp	r3, r2
 80072a8:	d101      	bne.n	80072ae <HAL_DMA_Abort+0x58e>
 80072aa:	2301      	movs	r3, #1
 80072ac:	e000      	b.n	80072b0 <HAL_DMA_Abort+0x590>
 80072ae:	2300      	movs	r3, #0
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d015      	beq.n	80072e0 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80072b8:	687a      	ldr	r2, [r7, #4]
 80072ba:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80072bc:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d00c      	beq.n	80072e0 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80072ca:	681a      	ldr	r2, [r3, #0]
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80072d0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80072d4:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80072da:	687a      	ldr	r2, [r7, #4]
 80072dc:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80072de:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	2201      	movs	r2, #1
 80072e4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	2200      	movs	r2, #0
 80072ec:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 80072f0:	2300      	movs	r3, #0
}
 80072f2:	4618      	mov	r0, r3
 80072f4:	3718      	adds	r7, #24
 80072f6:	46bd      	mov	sp, r7
 80072f8:	bd80      	pop	{r7, pc}
 80072fa:	bf00      	nop
 80072fc:	40020010 	.word	0x40020010
 8007300:	40020028 	.word	0x40020028
 8007304:	40020040 	.word	0x40020040
 8007308:	40020058 	.word	0x40020058
 800730c:	40020070 	.word	0x40020070
 8007310:	40020088 	.word	0x40020088
 8007314:	400200a0 	.word	0x400200a0
 8007318:	400200b8 	.word	0x400200b8
 800731c:	40020410 	.word	0x40020410
 8007320:	40020428 	.word	0x40020428
 8007324:	40020440 	.word	0x40020440
 8007328:	40020458 	.word	0x40020458
 800732c:	40020470 	.word	0x40020470
 8007330:	40020488 	.word	0x40020488
 8007334:	400204a0 	.word	0x400204a0
 8007338:	400204b8 	.word	0x400204b8
 800733c:	58025408 	.word	0x58025408
 8007340:	5802541c 	.word	0x5802541c
 8007344:	58025430 	.word	0x58025430
 8007348:	58025444 	.word	0x58025444
 800734c:	58025458 	.word	0x58025458
 8007350:	5802546c 	.word	0x5802546c
 8007354:	58025480 	.word	0x58025480
 8007358:	58025494 	.word	0x58025494

0800735c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800735c:	b580      	push	{r7, lr}
 800735e:	b08a      	sub	sp, #40	@ 0x28
 8007360:	af00      	add	r7, sp, #0
 8007362:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8007364:	2300      	movs	r3, #0
 8007366:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8007368:	4b67      	ldr	r3, [pc, #412]	@ (8007508 <HAL_DMA_IRQHandler+0x1ac>)
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	4a67      	ldr	r2, [pc, #412]	@ (800750c <HAL_DMA_IRQHandler+0x1b0>)
 800736e:	fba2 2303 	umull	r2, r3, r2, r3
 8007372:	0a9b      	lsrs	r3, r3, #10
 8007374:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800737a:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007380:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8007382:	6a3b      	ldr	r3, [r7, #32]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8007388:	69fb      	ldr	r3, [r7, #28]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	4a5f      	ldr	r2, [pc, #380]	@ (8007510 <HAL_DMA_IRQHandler+0x1b4>)
 8007394:	4293      	cmp	r3, r2
 8007396:	d04a      	beq.n	800742e <HAL_DMA_IRQHandler+0xd2>
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	4a5d      	ldr	r2, [pc, #372]	@ (8007514 <HAL_DMA_IRQHandler+0x1b8>)
 800739e:	4293      	cmp	r3, r2
 80073a0:	d045      	beq.n	800742e <HAL_DMA_IRQHandler+0xd2>
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	4a5c      	ldr	r2, [pc, #368]	@ (8007518 <HAL_DMA_IRQHandler+0x1bc>)
 80073a8:	4293      	cmp	r3, r2
 80073aa:	d040      	beq.n	800742e <HAL_DMA_IRQHandler+0xd2>
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	4a5a      	ldr	r2, [pc, #360]	@ (800751c <HAL_DMA_IRQHandler+0x1c0>)
 80073b2:	4293      	cmp	r3, r2
 80073b4:	d03b      	beq.n	800742e <HAL_DMA_IRQHandler+0xd2>
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	4a59      	ldr	r2, [pc, #356]	@ (8007520 <HAL_DMA_IRQHandler+0x1c4>)
 80073bc:	4293      	cmp	r3, r2
 80073be:	d036      	beq.n	800742e <HAL_DMA_IRQHandler+0xd2>
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	4a57      	ldr	r2, [pc, #348]	@ (8007524 <HAL_DMA_IRQHandler+0x1c8>)
 80073c6:	4293      	cmp	r3, r2
 80073c8:	d031      	beq.n	800742e <HAL_DMA_IRQHandler+0xd2>
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	4a56      	ldr	r2, [pc, #344]	@ (8007528 <HAL_DMA_IRQHandler+0x1cc>)
 80073d0:	4293      	cmp	r3, r2
 80073d2:	d02c      	beq.n	800742e <HAL_DMA_IRQHandler+0xd2>
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	4a54      	ldr	r2, [pc, #336]	@ (800752c <HAL_DMA_IRQHandler+0x1d0>)
 80073da:	4293      	cmp	r3, r2
 80073dc:	d027      	beq.n	800742e <HAL_DMA_IRQHandler+0xd2>
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	4a53      	ldr	r2, [pc, #332]	@ (8007530 <HAL_DMA_IRQHandler+0x1d4>)
 80073e4:	4293      	cmp	r3, r2
 80073e6:	d022      	beq.n	800742e <HAL_DMA_IRQHandler+0xd2>
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	4a51      	ldr	r2, [pc, #324]	@ (8007534 <HAL_DMA_IRQHandler+0x1d8>)
 80073ee:	4293      	cmp	r3, r2
 80073f0:	d01d      	beq.n	800742e <HAL_DMA_IRQHandler+0xd2>
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	4a50      	ldr	r2, [pc, #320]	@ (8007538 <HAL_DMA_IRQHandler+0x1dc>)
 80073f8:	4293      	cmp	r3, r2
 80073fa:	d018      	beq.n	800742e <HAL_DMA_IRQHandler+0xd2>
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	4a4e      	ldr	r2, [pc, #312]	@ (800753c <HAL_DMA_IRQHandler+0x1e0>)
 8007402:	4293      	cmp	r3, r2
 8007404:	d013      	beq.n	800742e <HAL_DMA_IRQHandler+0xd2>
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	4a4d      	ldr	r2, [pc, #308]	@ (8007540 <HAL_DMA_IRQHandler+0x1e4>)
 800740c:	4293      	cmp	r3, r2
 800740e:	d00e      	beq.n	800742e <HAL_DMA_IRQHandler+0xd2>
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	4a4b      	ldr	r2, [pc, #300]	@ (8007544 <HAL_DMA_IRQHandler+0x1e8>)
 8007416:	4293      	cmp	r3, r2
 8007418:	d009      	beq.n	800742e <HAL_DMA_IRQHandler+0xd2>
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	4a4a      	ldr	r2, [pc, #296]	@ (8007548 <HAL_DMA_IRQHandler+0x1ec>)
 8007420:	4293      	cmp	r3, r2
 8007422:	d004      	beq.n	800742e <HAL_DMA_IRQHandler+0xd2>
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	4a48      	ldr	r2, [pc, #288]	@ (800754c <HAL_DMA_IRQHandler+0x1f0>)
 800742a:	4293      	cmp	r3, r2
 800742c:	d101      	bne.n	8007432 <HAL_DMA_IRQHandler+0xd6>
 800742e:	2301      	movs	r3, #1
 8007430:	e000      	b.n	8007434 <HAL_DMA_IRQHandler+0xd8>
 8007432:	2300      	movs	r3, #0
 8007434:	2b00      	cmp	r3, #0
 8007436:	f000 842b 	beq.w	8007c90 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800743e:	f003 031f 	and.w	r3, r3, #31
 8007442:	2208      	movs	r2, #8
 8007444:	409a      	lsls	r2, r3
 8007446:	69bb      	ldr	r3, [r7, #24]
 8007448:	4013      	ands	r3, r2
 800744a:	2b00      	cmp	r3, #0
 800744c:	f000 80a2 	beq.w	8007594 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	4a2e      	ldr	r2, [pc, #184]	@ (8007510 <HAL_DMA_IRQHandler+0x1b4>)
 8007456:	4293      	cmp	r3, r2
 8007458:	d04a      	beq.n	80074f0 <HAL_DMA_IRQHandler+0x194>
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	4a2d      	ldr	r2, [pc, #180]	@ (8007514 <HAL_DMA_IRQHandler+0x1b8>)
 8007460:	4293      	cmp	r3, r2
 8007462:	d045      	beq.n	80074f0 <HAL_DMA_IRQHandler+0x194>
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	4a2b      	ldr	r2, [pc, #172]	@ (8007518 <HAL_DMA_IRQHandler+0x1bc>)
 800746a:	4293      	cmp	r3, r2
 800746c:	d040      	beq.n	80074f0 <HAL_DMA_IRQHandler+0x194>
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	4a2a      	ldr	r2, [pc, #168]	@ (800751c <HAL_DMA_IRQHandler+0x1c0>)
 8007474:	4293      	cmp	r3, r2
 8007476:	d03b      	beq.n	80074f0 <HAL_DMA_IRQHandler+0x194>
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	4a28      	ldr	r2, [pc, #160]	@ (8007520 <HAL_DMA_IRQHandler+0x1c4>)
 800747e:	4293      	cmp	r3, r2
 8007480:	d036      	beq.n	80074f0 <HAL_DMA_IRQHandler+0x194>
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	4a27      	ldr	r2, [pc, #156]	@ (8007524 <HAL_DMA_IRQHandler+0x1c8>)
 8007488:	4293      	cmp	r3, r2
 800748a:	d031      	beq.n	80074f0 <HAL_DMA_IRQHandler+0x194>
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	4a25      	ldr	r2, [pc, #148]	@ (8007528 <HAL_DMA_IRQHandler+0x1cc>)
 8007492:	4293      	cmp	r3, r2
 8007494:	d02c      	beq.n	80074f0 <HAL_DMA_IRQHandler+0x194>
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	4a24      	ldr	r2, [pc, #144]	@ (800752c <HAL_DMA_IRQHandler+0x1d0>)
 800749c:	4293      	cmp	r3, r2
 800749e:	d027      	beq.n	80074f0 <HAL_DMA_IRQHandler+0x194>
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	4a22      	ldr	r2, [pc, #136]	@ (8007530 <HAL_DMA_IRQHandler+0x1d4>)
 80074a6:	4293      	cmp	r3, r2
 80074a8:	d022      	beq.n	80074f0 <HAL_DMA_IRQHandler+0x194>
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	4a21      	ldr	r2, [pc, #132]	@ (8007534 <HAL_DMA_IRQHandler+0x1d8>)
 80074b0:	4293      	cmp	r3, r2
 80074b2:	d01d      	beq.n	80074f0 <HAL_DMA_IRQHandler+0x194>
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	4a1f      	ldr	r2, [pc, #124]	@ (8007538 <HAL_DMA_IRQHandler+0x1dc>)
 80074ba:	4293      	cmp	r3, r2
 80074bc:	d018      	beq.n	80074f0 <HAL_DMA_IRQHandler+0x194>
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	4a1e      	ldr	r2, [pc, #120]	@ (800753c <HAL_DMA_IRQHandler+0x1e0>)
 80074c4:	4293      	cmp	r3, r2
 80074c6:	d013      	beq.n	80074f0 <HAL_DMA_IRQHandler+0x194>
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	4a1c      	ldr	r2, [pc, #112]	@ (8007540 <HAL_DMA_IRQHandler+0x1e4>)
 80074ce:	4293      	cmp	r3, r2
 80074d0:	d00e      	beq.n	80074f0 <HAL_DMA_IRQHandler+0x194>
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	4a1b      	ldr	r2, [pc, #108]	@ (8007544 <HAL_DMA_IRQHandler+0x1e8>)
 80074d8:	4293      	cmp	r3, r2
 80074da:	d009      	beq.n	80074f0 <HAL_DMA_IRQHandler+0x194>
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	4a19      	ldr	r2, [pc, #100]	@ (8007548 <HAL_DMA_IRQHandler+0x1ec>)
 80074e2:	4293      	cmp	r3, r2
 80074e4:	d004      	beq.n	80074f0 <HAL_DMA_IRQHandler+0x194>
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	4a18      	ldr	r2, [pc, #96]	@ (800754c <HAL_DMA_IRQHandler+0x1f0>)
 80074ec:	4293      	cmp	r3, r2
 80074ee:	d12f      	bne.n	8007550 <HAL_DMA_IRQHandler+0x1f4>
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	f003 0304 	and.w	r3, r3, #4
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	bf14      	ite	ne
 80074fe:	2301      	movne	r3, #1
 8007500:	2300      	moveq	r3, #0
 8007502:	b2db      	uxtb	r3, r3
 8007504:	e02e      	b.n	8007564 <HAL_DMA_IRQHandler+0x208>
 8007506:	bf00      	nop
 8007508:	24000058 	.word	0x24000058
 800750c:	1b4e81b5 	.word	0x1b4e81b5
 8007510:	40020010 	.word	0x40020010
 8007514:	40020028 	.word	0x40020028
 8007518:	40020040 	.word	0x40020040
 800751c:	40020058 	.word	0x40020058
 8007520:	40020070 	.word	0x40020070
 8007524:	40020088 	.word	0x40020088
 8007528:	400200a0 	.word	0x400200a0
 800752c:	400200b8 	.word	0x400200b8
 8007530:	40020410 	.word	0x40020410
 8007534:	40020428 	.word	0x40020428
 8007538:	40020440 	.word	0x40020440
 800753c:	40020458 	.word	0x40020458
 8007540:	40020470 	.word	0x40020470
 8007544:	40020488 	.word	0x40020488
 8007548:	400204a0 	.word	0x400204a0
 800754c:	400204b8 	.word	0x400204b8
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	f003 0308 	and.w	r3, r3, #8
 800755a:	2b00      	cmp	r3, #0
 800755c:	bf14      	ite	ne
 800755e:	2301      	movne	r3, #1
 8007560:	2300      	moveq	r3, #0
 8007562:	b2db      	uxtb	r3, r3
 8007564:	2b00      	cmp	r3, #0
 8007566:	d015      	beq.n	8007594 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	681a      	ldr	r2, [r3, #0]
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	f022 0204 	bic.w	r2, r2, #4
 8007576:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800757c:	f003 031f 	and.w	r3, r3, #31
 8007580:	2208      	movs	r2, #8
 8007582:	409a      	lsls	r2, r3
 8007584:	6a3b      	ldr	r3, [r7, #32]
 8007586:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800758c:	f043 0201 	orr.w	r2, r3, #1
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007598:	f003 031f 	and.w	r3, r3, #31
 800759c:	69ba      	ldr	r2, [r7, #24]
 800759e:	fa22 f303 	lsr.w	r3, r2, r3
 80075a2:	f003 0301 	and.w	r3, r3, #1
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d06e      	beq.n	8007688 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	4a69      	ldr	r2, [pc, #420]	@ (8007754 <HAL_DMA_IRQHandler+0x3f8>)
 80075b0:	4293      	cmp	r3, r2
 80075b2:	d04a      	beq.n	800764a <HAL_DMA_IRQHandler+0x2ee>
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	4a67      	ldr	r2, [pc, #412]	@ (8007758 <HAL_DMA_IRQHandler+0x3fc>)
 80075ba:	4293      	cmp	r3, r2
 80075bc:	d045      	beq.n	800764a <HAL_DMA_IRQHandler+0x2ee>
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	4a66      	ldr	r2, [pc, #408]	@ (800775c <HAL_DMA_IRQHandler+0x400>)
 80075c4:	4293      	cmp	r3, r2
 80075c6:	d040      	beq.n	800764a <HAL_DMA_IRQHandler+0x2ee>
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	4a64      	ldr	r2, [pc, #400]	@ (8007760 <HAL_DMA_IRQHandler+0x404>)
 80075ce:	4293      	cmp	r3, r2
 80075d0:	d03b      	beq.n	800764a <HAL_DMA_IRQHandler+0x2ee>
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	4a63      	ldr	r2, [pc, #396]	@ (8007764 <HAL_DMA_IRQHandler+0x408>)
 80075d8:	4293      	cmp	r3, r2
 80075da:	d036      	beq.n	800764a <HAL_DMA_IRQHandler+0x2ee>
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	4a61      	ldr	r2, [pc, #388]	@ (8007768 <HAL_DMA_IRQHandler+0x40c>)
 80075e2:	4293      	cmp	r3, r2
 80075e4:	d031      	beq.n	800764a <HAL_DMA_IRQHandler+0x2ee>
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	4a60      	ldr	r2, [pc, #384]	@ (800776c <HAL_DMA_IRQHandler+0x410>)
 80075ec:	4293      	cmp	r3, r2
 80075ee:	d02c      	beq.n	800764a <HAL_DMA_IRQHandler+0x2ee>
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	4a5e      	ldr	r2, [pc, #376]	@ (8007770 <HAL_DMA_IRQHandler+0x414>)
 80075f6:	4293      	cmp	r3, r2
 80075f8:	d027      	beq.n	800764a <HAL_DMA_IRQHandler+0x2ee>
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	4a5d      	ldr	r2, [pc, #372]	@ (8007774 <HAL_DMA_IRQHandler+0x418>)
 8007600:	4293      	cmp	r3, r2
 8007602:	d022      	beq.n	800764a <HAL_DMA_IRQHandler+0x2ee>
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	4a5b      	ldr	r2, [pc, #364]	@ (8007778 <HAL_DMA_IRQHandler+0x41c>)
 800760a:	4293      	cmp	r3, r2
 800760c:	d01d      	beq.n	800764a <HAL_DMA_IRQHandler+0x2ee>
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	4a5a      	ldr	r2, [pc, #360]	@ (800777c <HAL_DMA_IRQHandler+0x420>)
 8007614:	4293      	cmp	r3, r2
 8007616:	d018      	beq.n	800764a <HAL_DMA_IRQHandler+0x2ee>
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	4a58      	ldr	r2, [pc, #352]	@ (8007780 <HAL_DMA_IRQHandler+0x424>)
 800761e:	4293      	cmp	r3, r2
 8007620:	d013      	beq.n	800764a <HAL_DMA_IRQHandler+0x2ee>
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	4a57      	ldr	r2, [pc, #348]	@ (8007784 <HAL_DMA_IRQHandler+0x428>)
 8007628:	4293      	cmp	r3, r2
 800762a:	d00e      	beq.n	800764a <HAL_DMA_IRQHandler+0x2ee>
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	4a55      	ldr	r2, [pc, #340]	@ (8007788 <HAL_DMA_IRQHandler+0x42c>)
 8007632:	4293      	cmp	r3, r2
 8007634:	d009      	beq.n	800764a <HAL_DMA_IRQHandler+0x2ee>
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	4a54      	ldr	r2, [pc, #336]	@ (800778c <HAL_DMA_IRQHandler+0x430>)
 800763c:	4293      	cmp	r3, r2
 800763e:	d004      	beq.n	800764a <HAL_DMA_IRQHandler+0x2ee>
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	4a52      	ldr	r2, [pc, #328]	@ (8007790 <HAL_DMA_IRQHandler+0x434>)
 8007646:	4293      	cmp	r3, r2
 8007648:	d10a      	bne.n	8007660 <HAL_DMA_IRQHandler+0x304>
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	695b      	ldr	r3, [r3, #20]
 8007650:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007654:	2b00      	cmp	r3, #0
 8007656:	bf14      	ite	ne
 8007658:	2301      	movne	r3, #1
 800765a:	2300      	moveq	r3, #0
 800765c:	b2db      	uxtb	r3, r3
 800765e:	e003      	b.n	8007668 <HAL_DMA_IRQHandler+0x30c>
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	2300      	movs	r3, #0
 8007668:	2b00      	cmp	r3, #0
 800766a:	d00d      	beq.n	8007688 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007670:	f003 031f 	and.w	r3, r3, #31
 8007674:	2201      	movs	r2, #1
 8007676:	409a      	lsls	r2, r3
 8007678:	6a3b      	ldr	r3, [r7, #32]
 800767a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007680:	f043 0202 	orr.w	r2, r3, #2
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800768c:	f003 031f 	and.w	r3, r3, #31
 8007690:	2204      	movs	r2, #4
 8007692:	409a      	lsls	r2, r3
 8007694:	69bb      	ldr	r3, [r7, #24]
 8007696:	4013      	ands	r3, r2
 8007698:	2b00      	cmp	r3, #0
 800769a:	f000 808f 	beq.w	80077bc <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	4a2c      	ldr	r2, [pc, #176]	@ (8007754 <HAL_DMA_IRQHandler+0x3f8>)
 80076a4:	4293      	cmp	r3, r2
 80076a6:	d04a      	beq.n	800773e <HAL_DMA_IRQHandler+0x3e2>
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	4a2a      	ldr	r2, [pc, #168]	@ (8007758 <HAL_DMA_IRQHandler+0x3fc>)
 80076ae:	4293      	cmp	r3, r2
 80076b0:	d045      	beq.n	800773e <HAL_DMA_IRQHandler+0x3e2>
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	4a29      	ldr	r2, [pc, #164]	@ (800775c <HAL_DMA_IRQHandler+0x400>)
 80076b8:	4293      	cmp	r3, r2
 80076ba:	d040      	beq.n	800773e <HAL_DMA_IRQHandler+0x3e2>
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	4a27      	ldr	r2, [pc, #156]	@ (8007760 <HAL_DMA_IRQHandler+0x404>)
 80076c2:	4293      	cmp	r3, r2
 80076c4:	d03b      	beq.n	800773e <HAL_DMA_IRQHandler+0x3e2>
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	4a26      	ldr	r2, [pc, #152]	@ (8007764 <HAL_DMA_IRQHandler+0x408>)
 80076cc:	4293      	cmp	r3, r2
 80076ce:	d036      	beq.n	800773e <HAL_DMA_IRQHandler+0x3e2>
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	4a24      	ldr	r2, [pc, #144]	@ (8007768 <HAL_DMA_IRQHandler+0x40c>)
 80076d6:	4293      	cmp	r3, r2
 80076d8:	d031      	beq.n	800773e <HAL_DMA_IRQHandler+0x3e2>
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	4a23      	ldr	r2, [pc, #140]	@ (800776c <HAL_DMA_IRQHandler+0x410>)
 80076e0:	4293      	cmp	r3, r2
 80076e2:	d02c      	beq.n	800773e <HAL_DMA_IRQHandler+0x3e2>
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	4a21      	ldr	r2, [pc, #132]	@ (8007770 <HAL_DMA_IRQHandler+0x414>)
 80076ea:	4293      	cmp	r3, r2
 80076ec:	d027      	beq.n	800773e <HAL_DMA_IRQHandler+0x3e2>
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	4a20      	ldr	r2, [pc, #128]	@ (8007774 <HAL_DMA_IRQHandler+0x418>)
 80076f4:	4293      	cmp	r3, r2
 80076f6:	d022      	beq.n	800773e <HAL_DMA_IRQHandler+0x3e2>
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	4a1e      	ldr	r2, [pc, #120]	@ (8007778 <HAL_DMA_IRQHandler+0x41c>)
 80076fe:	4293      	cmp	r3, r2
 8007700:	d01d      	beq.n	800773e <HAL_DMA_IRQHandler+0x3e2>
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	4a1d      	ldr	r2, [pc, #116]	@ (800777c <HAL_DMA_IRQHandler+0x420>)
 8007708:	4293      	cmp	r3, r2
 800770a:	d018      	beq.n	800773e <HAL_DMA_IRQHandler+0x3e2>
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	4a1b      	ldr	r2, [pc, #108]	@ (8007780 <HAL_DMA_IRQHandler+0x424>)
 8007712:	4293      	cmp	r3, r2
 8007714:	d013      	beq.n	800773e <HAL_DMA_IRQHandler+0x3e2>
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	4a1a      	ldr	r2, [pc, #104]	@ (8007784 <HAL_DMA_IRQHandler+0x428>)
 800771c:	4293      	cmp	r3, r2
 800771e:	d00e      	beq.n	800773e <HAL_DMA_IRQHandler+0x3e2>
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	4a18      	ldr	r2, [pc, #96]	@ (8007788 <HAL_DMA_IRQHandler+0x42c>)
 8007726:	4293      	cmp	r3, r2
 8007728:	d009      	beq.n	800773e <HAL_DMA_IRQHandler+0x3e2>
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	4a17      	ldr	r2, [pc, #92]	@ (800778c <HAL_DMA_IRQHandler+0x430>)
 8007730:	4293      	cmp	r3, r2
 8007732:	d004      	beq.n	800773e <HAL_DMA_IRQHandler+0x3e2>
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	4a15      	ldr	r2, [pc, #84]	@ (8007790 <HAL_DMA_IRQHandler+0x434>)
 800773a:	4293      	cmp	r3, r2
 800773c:	d12a      	bne.n	8007794 <HAL_DMA_IRQHandler+0x438>
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	f003 0302 	and.w	r3, r3, #2
 8007748:	2b00      	cmp	r3, #0
 800774a:	bf14      	ite	ne
 800774c:	2301      	movne	r3, #1
 800774e:	2300      	moveq	r3, #0
 8007750:	b2db      	uxtb	r3, r3
 8007752:	e023      	b.n	800779c <HAL_DMA_IRQHandler+0x440>
 8007754:	40020010 	.word	0x40020010
 8007758:	40020028 	.word	0x40020028
 800775c:	40020040 	.word	0x40020040
 8007760:	40020058 	.word	0x40020058
 8007764:	40020070 	.word	0x40020070
 8007768:	40020088 	.word	0x40020088
 800776c:	400200a0 	.word	0x400200a0
 8007770:	400200b8 	.word	0x400200b8
 8007774:	40020410 	.word	0x40020410
 8007778:	40020428 	.word	0x40020428
 800777c:	40020440 	.word	0x40020440
 8007780:	40020458 	.word	0x40020458
 8007784:	40020470 	.word	0x40020470
 8007788:	40020488 	.word	0x40020488
 800778c:	400204a0 	.word	0x400204a0
 8007790:	400204b8 	.word	0x400204b8
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	2300      	movs	r3, #0
 800779c:	2b00      	cmp	r3, #0
 800779e:	d00d      	beq.n	80077bc <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80077a4:	f003 031f 	and.w	r3, r3, #31
 80077a8:	2204      	movs	r2, #4
 80077aa:	409a      	lsls	r2, r3
 80077ac:	6a3b      	ldr	r3, [r7, #32]
 80077ae:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80077b4:	f043 0204 	orr.w	r2, r3, #4
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80077c0:	f003 031f 	and.w	r3, r3, #31
 80077c4:	2210      	movs	r2, #16
 80077c6:	409a      	lsls	r2, r3
 80077c8:	69bb      	ldr	r3, [r7, #24]
 80077ca:	4013      	ands	r3, r2
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	f000 80a6 	beq.w	800791e <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	4a85      	ldr	r2, [pc, #532]	@ (80079ec <HAL_DMA_IRQHandler+0x690>)
 80077d8:	4293      	cmp	r3, r2
 80077da:	d04a      	beq.n	8007872 <HAL_DMA_IRQHandler+0x516>
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	4a83      	ldr	r2, [pc, #524]	@ (80079f0 <HAL_DMA_IRQHandler+0x694>)
 80077e2:	4293      	cmp	r3, r2
 80077e4:	d045      	beq.n	8007872 <HAL_DMA_IRQHandler+0x516>
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	4a82      	ldr	r2, [pc, #520]	@ (80079f4 <HAL_DMA_IRQHandler+0x698>)
 80077ec:	4293      	cmp	r3, r2
 80077ee:	d040      	beq.n	8007872 <HAL_DMA_IRQHandler+0x516>
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	4a80      	ldr	r2, [pc, #512]	@ (80079f8 <HAL_DMA_IRQHandler+0x69c>)
 80077f6:	4293      	cmp	r3, r2
 80077f8:	d03b      	beq.n	8007872 <HAL_DMA_IRQHandler+0x516>
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	4a7f      	ldr	r2, [pc, #508]	@ (80079fc <HAL_DMA_IRQHandler+0x6a0>)
 8007800:	4293      	cmp	r3, r2
 8007802:	d036      	beq.n	8007872 <HAL_DMA_IRQHandler+0x516>
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	4a7d      	ldr	r2, [pc, #500]	@ (8007a00 <HAL_DMA_IRQHandler+0x6a4>)
 800780a:	4293      	cmp	r3, r2
 800780c:	d031      	beq.n	8007872 <HAL_DMA_IRQHandler+0x516>
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	4a7c      	ldr	r2, [pc, #496]	@ (8007a04 <HAL_DMA_IRQHandler+0x6a8>)
 8007814:	4293      	cmp	r3, r2
 8007816:	d02c      	beq.n	8007872 <HAL_DMA_IRQHandler+0x516>
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	4a7a      	ldr	r2, [pc, #488]	@ (8007a08 <HAL_DMA_IRQHandler+0x6ac>)
 800781e:	4293      	cmp	r3, r2
 8007820:	d027      	beq.n	8007872 <HAL_DMA_IRQHandler+0x516>
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	4a79      	ldr	r2, [pc, #484]	@ (8007a0c <HAL_DMA_IRQHandler+0x6b0>)
 8007828:	4293      	cmp	r3, r2
 800782a:	d022      	beq.n	8007872 <HAL_DMA_IRQHandler+0x516>
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	4a77      	ldr	r2, [pc, #476]	@ (8007a10 <HAL_DMA_IRQHandler+0x6b4>)
 8007832:	4293      	cmp	r3, r2
 8007834:	d01d      	beq.n	8007872 <HAL_DMA_IRQHandler+0x516>
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	4a76      	ldr	r2, [pc, #472]	@ (8007a14 <HAL_DMA_IRQHandler+0x6b8>)
 800783c:	4293      	cmp	r3, r2
 800783e:	d018      	beq.n	8007872 <HAL_DMA_IRQHandler+0x516>
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	4a74      	ldr	r2, [pc, #464]	@ (8007a18 <HAL_DMA_IRQHandler+0x6bc>)
 8007846:	4293      	cmp	r3, r2
 8007848:	d013      	beq.n	8007872 <HAL_DMA_IRQHandler+0x516>
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	4a73      	ldr	r2, [pc, #460]	@ (8007a1c <HAL_DMA_IRQHandler+0x6c0>)
 8007850:	4293      	cmp	r3, r2
 8007852:	d00e      	beq.n	8007872 <HAL_DMA_IRQHandler+0x516>
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	4a71      	ldr	r2, [pc, #452]	@ (8007a20 <HAL_DMA_IRQHandler+0x6c4>)
 800785a:	4293      	cmp	r3, r2
 800785c:	d009      	beq.n	8007872 <HAL_DMA_IRQHandler+0x516>
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	4a70      	ldr	r2, [pc, #448]	@ (8007a24 <HAL_DMA_IRQHandler+0x6c8>)
 8007864:	4293      	cmp	r3, r2
 8007866:	d004      	beq.n	8007872 <HAL_DMA_IRQHandler+0x516>
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	4a6e      	ldr	r2, [pc, #440]	@ (8007a28 <HAL_DMA_IRQHandler+0x6cc>)
 800786e:	4293      	cmp	r3, r2
 8007870:	d10a      	bne.n	8007888 <HAL_DMA_IRQHandler+0x52c>
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	f003 0308 	and.w	r3, r3, #8
 800787c:	2b00      	cmp	r3, #0
 800787e:	bf14      	ite	ne
 8007880:	2301      	movne	r3, #1
 8007882:	2300      	moveq	r3, #0
 8007884:	b2db      	uxtb	r3, r3
 8007886:	e009      	b.n	800789c <HAL_DMA_IRQHandler+0x540>
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	f003 0304 	and.w	r3, r3, #4
 8007892:	2b00      	cmp	r3, #0
 8007894:	bf14      	ite	ne
 8007896:	2301      	movne	r3, #1
 8007898:	2300      	moveq	r3, #0
 800789a:	b2db      	uxtb	r3, r3
 800789c:	2b00      	cmp	r3, #0
 800789e:	d03e      	beq.n	800791e <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80078a4:	f003 031f 	and.w	r3, r3, #31
 80078a8:	2210      	movs	r2, #16
 80078aa:	409a      	lsls	r2, r3
 80078ac:	6a3b      	ldr	r3, [r7, #32]
 80078ae:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d018      	beq.n	80078f0 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d108      	bne.n	80078de <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d024      	beq.n	800791e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80078d8:	6878      	ldr	r0, [r7, #4]
 80078da:	4798      	blx	r3
 80078dc:	e01f      	b.n	800791e <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d01b      	beq.n	800791e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80078ea:	6878      	ldr	r0, [r7, #4]
 80078ec:	4798      	blx	r3
 80078ee:	e016      	b.n	800791e <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d107      	bne.n	800790e <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	681a      	ldr	r2, [r3, #0]
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	f022 0208 	bic.w	r2, r2, #8
 800790c:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007912:	2b00      	cmp	r3, #0
 8007914:	d003      	beq.n	800791e <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800791a:	6878      	ldr	r0, [r7, #4]
 800791c:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007922:	f003 031f 	and.w	r3, r3, #31
 8007926:	2220      	movs	r2, #32
 8007928:	409a      	lsls	r2, r3
 800792a:	69bb      	ldr	r3, [r7, #24]
 800792c:	4013      	ands	r3, r2
 800792e:	2b00      	cmp	r3, #0
 8007930:	f000 8110 	beq.w	8007b54 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	4a2c      	ldr	r2, [pc, #176]	@ (80079ec <HAL_DMA_IRQHandler+0x690>)
 800793a:	4293      	cmp	r3, r2
 800793c:	d04a      	beq.n	80079d4 <HAL_DMA_IRQHandler+0x678>
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	4a2b      	ldr	r2, [pc, #172]	@ (80079f0 <HAL_DMA_IRQHandler+0x694>)
 8007944:	4293      	cmp	r3, r2
 8007946:	d045      	beq.n	80079d4 <HAL_DMA_IRQHandler+0x678>
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	4a29      	ldr	r2, [pc, #164]	@ (80079f4 <HAL_DMA_IRQHandler+0x698>)
 800794e:	4293      	cmp	r3, r2
 8007950:	d040      	beq.n	80079d4 <HAL_DMA_IRQHandler+0x678>
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	4a28      	ldr	r2, [pc, #160]	@ (80079f8 <HAL_DMA_IRQHandler+0x69c>)
 8007958:	4293      	cmp	r3, r2
 800795a:	d03b      	beq.n	80079d4 <HAL_DMA_IRQHandler+0x678>
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	4a26      	ldr	r2, [pc, #152]	@ (80079fc <HAL_DMA_IRQHandler+0x6a0>)
 8007962:	4293      	cmp	r3, r2
 8007964:	d036      	beq.n	80079d4 <HAL_DMA_IRQHandler+0x678>
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	4a25      	ldr	r2, [pc, #148]	@ (8007a00 <HAL_DMA_IRQHandler+0x6a4>)
 800796c:	4293      	cmp	r3, r2
 800796e:	d031      	beq.n	80079d4 <HAL_DMA_IRQHandler+0x678>
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	4a23      	ldr	r2, [pc, #140]	@ (8007a04 <HAL_DMA_IRQHandler+0x6a8>)
 8007976:	4293      	cmp	r3, r2
 8007978:	d02c      	beq.n	80079d4 <HAL_DMA_IRQHandler+0x678>
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	4a22      	ldr	r2, [pc, #136]	@ (8007a08 <HAL_DMA_IRQHandler+0x6ac>)
 8007980:	4293      	cmp	r3, r2
 8007982:	d027      	beq.n	80079d4 <HAL_DMA_IRQHandler+0x678>
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	4a20      	ldr	r2, [pc, #128]	@ (8007a0c <HAL_DMA_IRQHandler+0x6b0>)
 800798a:	4293      	cmp	r3, r2
 800798c:	d022      	beq.n	80079d4 <HAL_DMA_IRQHandler+0x678>
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	4a1f      	ldr	r2, [pc, #124]	@ (8007a10 <HAL_DMA_IRQHandler+0x6b4>)
 8007994:	4293      	cmp	r3, r2
 8007996:	d01d      	beq.n	80079d4 <HAL_DMA_IRQHandler+0x678>
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	4a1d      	ldr	r2, [pc, #116]	@ (8007a14 <HAL_DMA_IRQHandler+0x6b8>)
 800799e:	4293      	cmp	r3, r2
 80079a0:	d018      	beq.n	80079d4 <HAL_DMA_IRQHandler+0x678>
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	4a1c      	ldr	r2, [pc, #112]	@ (8007a18 <HAL_DMA_IRQHandler+0x6bc>)
 80079a8:	4293      	cmp	r3, r2
 80079aa:	d013      	beq.n	80079d4 <HAL_DMA_IRQHandler+0x678>
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	4a1a      	ldr	r2, [pc, #104]	@ (8007a1c <HAL_DMA_IRQHandler+0x6c0>)
 80079b2:	4293      	cmp	r3, r2
 80079b4:	d00e      	beq.n	80079d4 <HAL_DMA_IRQHandler+0x678>
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	4a19      	ldr	r2, [pc, #100]	@ (8007a20 <HAL_DMA_IRQHandler+0x6c4>)
 80079bc:	4293      	cmp	r3, r2
 80079be:	d009      	beq.n	80079d4 <HAL_DMA_IRQHandler+0x678>
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	4a17      	ldr	r2, [pc, #92]	@ (8007a24 <HAL_DMA_IRQHandler+0x6c8>)
 80079c6:	4293      	cmp	r3, r2
 80079c8:	d004      	beq.n	80079d4 <HAL_DMA_IRQHandler+0x678>
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	4a16      	ldr	r2, [pc, #88]	@ (8007a28 <HAL_DMA_IRQHandler+0x6cc>)
 80079d0:	4293      	cmp	r3, r2
 80079d2:	d12b      	bne.n	8007a2c <HAL_DMA_IRQHandler+0x6d0>
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	f003 0310 	and.w	r3, r3, #16
 80079de:	2b00      	cmp	r3, #0
 80079e0:	bf14      	ite	ne
 80079e2:	2301      	movne	r3, #1
 80079e4:	2300      	moveq	r3, #0
 80079e6:	b2db      	uxtb	r3, r3
 80079e8:	e02a      	b.n	8007a40 <HAL_DMA_IRQHandler+0x6e4>
 80079ea:	bf00      	nop
 80079ec:	40020010 	.word	0x40020010
 80079f0:	40020028 	.word	0x40020028
 80079f4:	40020040 	.word	0x40020040
 80079f8:	40020058 	.word	0x40020058
 80079fc:	40020070 	.word	0x40020070
 8007a00:	40020088 	.word	0x40020088
 8007a04:	400200a0 	.word	0x400200a0
 8007a08:	400200b8 	.word	0x400200b8
 8007a0c:	40020410 	.word	0x40020410
 8007a10:	40020428 	.word	0x40020428
 8007a14:	40020440 	.word	0x40020440
 8007a18:	40020458 	.word	0x40020458
 8007a1c:	40020470 	.word	0x40020470
 8007a20:	40020488 	.word	0x40020488
 8007a24:	400204a0 	.word	0x400204a0
 8007a28:	400204b8 	.word	0x400204b8
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	f003 0302 	and.w	r3, r3, #2
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	bf14      	ite	ne
 8007a3a:	2301      	movne	r3, #1
 8007a3c:	2300      	moveq	r3, #0
 8007a3e:	b2db      	uxtb	r3, r3
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	f000 8087 	beq.w	8007b54 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007a4a:	f003 031f 	and.w	r3, r3, #31
 8007a4e:	2220      	movs	r2, #32
 8007a50:	409a      	lsls	r2, r3
 8007a52:	6a3b      	ldr	r3, [r7, #32]
 8007a54:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8007a5c:	b2db      	uxtb	r3, r3
 8007a5e:	2b04      	cmp	r3, #4
 8007a60:	d139      	bne.n	8007ad6 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	681a      	ldr	r2, [r3, #0]
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	f022 0216 	bic.w	r2, r2, #22
 8007a70:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	695a      	ldr	r2, [r3, #20]
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007a80:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d103      	bne.n	8007a92 <HAL_DMA_IRQHandler+0x736>
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d007      	beq.n	8007aa2 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	681a      	ldr	r2, [r3, #0]
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	f022 0208 	bic.w	r2, r2, #8
 8007aa0:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007aa6:	f003 031f 	and.w	r3, r3, #31
 8007aaa:	223f      	movs	r2, #63	@ 0x3f
 8007aac:	409a      	lsls	r2, r3
 8007aae:	6a3b      	ldr	r3, [r7, #32]
 8007ab0:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	2201      	movs	r2, #1
 8007ab6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	2200      	movs	r2, #0
 8007abe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	f000 834a 	beq.w	8008160 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007ad0:	6878      	ldr	r0, [r7, #4]
 8007ad2:	4798      	blx	r3
          }
          return;
 8007ad4:	e344      	b.n	8008160 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d018      	beq.n	8007b16 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d108      	bne.n	8007b04 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d02c      	beq.n	8007b54 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007afe:	6878      	ldr	r0, [r7, #4]
 8007b00:	4798      	blx	r3
 8007b02:	e027      	b.n	8007b54 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d023      	beq.n	8007b54 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007b10:	6878      	ldr	r0, [r7, #4]
 8007b12:	4798      	blx	r3
 8007b14:	e01e      	b.n	8007b54 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d10f      	bne.n	8007b44 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	681a      	ldr	r2, [r3, #0]
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	f022 0210 	bic.w	r2, r2, #16
 8007b32:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	2201      	movs	r2, #1
 8007b38:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	2200      	movs	r2, #0
 8007b40:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d003      	beq.n	8007b54 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007b50:	6878      	ldr	r0, [r7, #4]
 8007b52:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	f000 8306 	beq.w	800816a <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007b62:	f003 0301 	and.w	r3, r3, #1
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	f000 8088 	beq.w	8007c7c <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	2204      	movs	r2, #4
 8007b70:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	4a7a      	ldr	r2, [pc, #488]	@ (8007d64 <HAL_DMA_IRQHandler+0xa08>)
 8007b7a:	4293      	cmp	r3, r2
 8007b7c:	d04a      	beq.n	8007c14 <HAL_DMA_IRQHandler+0x8b8>
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	4a79      	ldr	r2, [pc, #484]	@ (8007d68 <HAL_DMA_IRQHandler+0xa0c>)
 8007b84:	4293      	cmp	r3, r2
 8007b86:	d045      	beq.n	8007c14 <HAL_DMA_IRQHandler+0x8b8>
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	4a77      	ldr	r2, [pc, #476]	@ (8007d6c <HAL_DMA_IRQHandler+0xa10>)
 8007b8e:	4293      	cmp	r3, r2
 8007b90:	d040      	beq.n	8007c14 <HAL_DMA_IRQHandler+0x8b8>
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	4a76      	ldr	r2, [pc, #472]	@ (8007d70 <HAL_DMA_IRQHandler+0xa14>)
 8007b98:	4293      	cmp	r3, r2
 8007b9a:	d03b      	beq.n	8007c14 <HAL_DMA_IRQHandler+0x8b8>
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	4a74      	ldr	r2, [pc, #464]	@ (8007d74 <HAL_DMA_IRQHandler+0xa18>)
 8007ba2:	4293      	cmp	r3, r2
 8007ba4:	d036      	beq.n	8007c14 <HAL_DMA_IRQHandler+0x8b8>
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	4a73      	ldr	r2, [pc, #460]	@ (8007d78 <HAL_DMA_IRQHandler+0xa1c>)
 8007bac:	4293      	cmp	r3, r2
 8007bae:	d031      	beq.n	8007c14 <HAL_DMA_IRQHandler+0x8b8>
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	4a71      	ldr	r2, [pc, #452]	@ (8007d7c <HAL_DMA_IRQHandler+0xa20>)
 8007bb6:	4293      	cmp	r3, r2
 8007bb8:	d02c      	beq.n	8007c14 <HAL_DMA_IRQHandler+0x8b8>
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	4a70      	ldr	r2, [pc, #448]	@ (8007d80 <HAL_DMA_IRQHandler+0xa24>)
 8007bc0:	4293      	cmp	r3, r2
 8007bc2:	d027      	beq.n	8007c14 <HAL_DMA_IRQHandler+0x8b8>
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	4a6e      	ldr	r2, [pc, #440]	@ (8007d84 <HAL_DMA_IRQHandler+0xa28>)
 8007bca:	4293      	cmp	r3, r2
 8007bcc:	d022      	beq.n	8007c14 <HAL_DMA_IRQHandler+0x8b8>
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	4a6d      	ldr	r2, [pc, #436]	@ (8007d88 <HAL_DMA_IRQHandler+0xa2c>)
 8007bd4:	4293      	cmp	r3, r2
 8007bd6:	d01d      	beq.n	8007c14 <HAL_DMA_IRQHandler+0x8b8>
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	4a6b      	ldr	r2, [pc, #428]	@ (8007d8c <HAL_DMA_IRQHandler+0xa30>)
 8007bde:	4293      	cmp	r3, r2
 8007be0:	d018      	beq.n	8007c14 <HAL_DMA_IRQHandler+0x8b8>
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	4a6a      	ldr	r2, [pc, #424]	@ (8007d90 <HAL_DMA_IRQHandler+0xa34>)
 8007be8:	4293      	cmp	r3, r2
 8007bea:	d013      	beq.n	8007c14 <HAL_DMA_IRQHandler+0x8b8>
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	4a68      	ldr	r2, [pc, #416]	@ (8007d94 <HAL_DMA_IRQHandler+0xa38>)
 8007bf2:	4293      	cmp	r3, r2
 8007bf4:	d00e      	beq.n	8007c14 <HAL_DMA_IRQHandler+0x8b8>
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	4a67      	ldr	r2, [pc, #412]	@ (8007d98 <HAL_DMA_IRQHandler+0xa3c>)
 8007bfc:	4293      	cmp	r3, r2
 8007bfe:	d009      	beq.n	8007c14 <HAL_DMA_IRQHandler+0x8b8>
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	4a65      	ldr	r2, [pc, #404]	@ (8007d9c <HAL_DMA_IRQHandler+0xa40>)
 8007c06:	4293      	cmp	r3, r2
 8007c08:	d004      	beq.n	8007c14 <HAL_DMA_IRQHandler+0x8b8>
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	4a64      	ldr	r2, [pc, #400]	@ (8007da0 <HAL_DMA_IRQHandler+0xa44>)
 8007c10:	4293      	cmp	r3, r2
 8007c12:	d108      	bne.n	8007c26 <HAL_DMA_IRQHandler+0x8ca>
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	681a      	ldr	r2, [r3, #0]
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	f022 0201 	bic.w	r2, r2, #1
 8007c22:	601a      	str	r2, [r3, #0]
 8007c24:	e007      	b.n	8007c36 <HAL_DMA_IRQHandler+0x8da>
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	681a      	ldr	r2, [r3, #0]
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	f022 0201 	bic.w	r2, r2, #1
 8007c34:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	3301      	adds	r3, #1
 8007c3a:	60fb      	str	r3, [r7, #12]
 8007c3c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007c3e:	429a      	cmp	r2, r3
 8007c40:	d307      	bcc.n	8007c52 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	f003 0301 	and.w	r3, r3, #1
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d1f2      	bne.n	8007c36 <HAL_DMA_IRQHandler+0x8da>
 8007c50:	e000      	b.n	8007c54 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8007c52:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	f003 0301 	and.w	r3, r3, #1
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d004      	beq.n	8007c6c <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	2203      	movs	r2, #3
 8007c66:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8007c6a:	e003      	b.n	8007c74 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	2201      	movs	r2, #1
 8007c70:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	2200      	movs	r2, #0
 8007c78:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	f000 8272 	beq.w	800816a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007c8a:	6878      	ldr	r0, [r7, #4]
 8007c8c:	4798      	blx	r3
 8007c8e:	e26c      	b.n	800816a <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	4a43      	ldr	r2, [pc, #268]	@ (8007da4 <HAL_DMA_IRQHandler+0xa48>)
 8007c96:	4293      	cmp	r3, r2
 8007c98:	d022      	beq.n	8007ce0 <HAL_DMA_IRQHandler+0x984>
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	4a42      	ldr	r2, [pc, #264]	@ (8007da8 <HAL_DMA_IRQHandler+0xa4c>)
 8007ca0:	4293      	cmp	r3, r2
 8007ca2:	d01d      	beq.n	8007ce0 <HAL_DMA_IRQHandler+0x984>
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	4a40      	ldr	r2, [pc, #256]	@ (8007dac <HAL_DMA_IRQHandler+0xa50>)
 8007caa:	4293      	cmp	r3, r2
 8007cac:	d018      	beq.n	8007ce0 <HAL_DMA_IRQHandler+0x984>
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	4a3f      	ldr	r2, [pc, #252]	@ (8007db0 <HAL_DMA_IRQHandler+0xa54>)
 8007cb4:	4293      	cmp	r3, r2
 8007cb6:	d013      	beq.n	8007ce0 <HAL_DMA_IRQHandler+0x984>
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	4a3d      	ldr	r2, [pc, #244]	@ (8007db4 <HAL_DMA_IRQHandler+0xa58>)
 8007cbe:	4293      	cmp	r3, r2
 8007cc0:	d00e      	beq.n	8007ce0 <HAL_DMA_IRQHandler+0x984>
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	4a3c      	ldr	r2, [pc, #240]	@ (8007db8 <HAL_DMA_IRQHandler+0xa5c>)
 8007cc8:	4293      	cmp	r3, r2
 8007cca:	d009      	beq.n	8007ce0 <HAL_DMA_IRQHandler+0x984>
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	4a3a      	ldr	r2, [pc, #232]	@ (8007dbc <HAL_DMA_IRQHandler+0xa60>)
 8007cd2:	4293      	cmp	r3, r2
 8007cd4:	d004      	beq.n	8007ce0 <HAL_DMA_IRQHandler+0x984>
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	4a39      	ldr	r2, [pc, #228]	@ (8007dc0 <HAL_DMA_IRQHandler+0xa64>)
 8007cdc:	4293      	cmp	r3, r2
 8007cde:	d101      	bne.n	8007ce4 <HAL_DMA_IRQHandler+0x988>
 8007ce0:	2301      	movs	r3, #1
 8007ce2:	e000      	b.n	8007ce6 <HAL_DMA_IRQHandler+0x98a>
 8007ce4:	2300      	movs	r3, #0
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	f000 823f 	beq.w	800816a <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007cf8:	f003 031f 	and.w	r3, r3, #31
 8007cfc:	2204      	movs	r2, #4
 8007cfe:	409a      	lsls	r2, r3
 8007d00:	697b      	ldr	r3, [r7, #20]
 8007d02:	4013      	ands	r3, r2
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	f000 80cd 	beq.w	8007ea4 <HAL_DMA_IRQHandler+0xb48>
 8007d0a:	693b      	ldr	r3, [r7, #16]
 8007d0c:	f003 0304 	and.w	r3, r3, #4
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	f000 80c7 	beq.w	8007ea4 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007d1a:	f003 031f 	and.w	r3, r3, #31
 8007d1e:	2204      	movs	r2, #4
 8007d20:	409a      	lsls	r2, r3
 8007d22:	69fb      	ldr	r3, [r7, #28]
 8007d24:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007d26:	693b      	ldr	r3, [r7, #16]
 8007d28:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d049      	beq.n	8007dc4 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8007d30:	693b      	ldr	r3, [r7, #16]
 8007d32:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d109      	bne.n	8007d4e <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	f000 8210 	beq.w	8008164 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007d48:	6878      	ldr	r0, [r7, #4]
 8007d4a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007d4c:	e20a      	b.n	8008164 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	f000 8206 	beq.w	8008164 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d5c:	6878      	ldr	r0, [r7, #4]
 8007d5e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007d60:	e200      	b.n	8008164 <HAL_DMA_IRQHandler+0xe08>
 8007d62:	bf00      	nop
 8007d64:	40020010 	.word	0x40020010
 8007d68:	40020028 	.word	0x40020028
 8007d6c:	40020040 	.word	0x40020040
 8007d70:	40020058 	.word	0x40020058
 8007d74:	40020070 	.word	0x40020070
 8007d78:	40020088 	.word	0x40020088
 8007d7c:	400200a0 	.word	0x400200a0
 8007d80:	400200b8 	.word	0x400200b8
 8007d84:	40020410 	.word	0x40020410
 8007d88:	40020428 	.word	0x40020428
 8007d8c:	40020440 	.word	0x40020440
 8007d90:	40020458 	.word	0x40020458
 8007d94:	40020470 	.word	0x40020470
 8007d98:	40020488 	.word	0x40020488
 8007d9c:	400204a0 	.word	0x400204a0
 8007da0:	400204b8 	.word	0x400204b8
 8007da4:	58025408 	.word	0x58025408
 8007da8:	5802541c 	.word	0x5802541c
 8007dac:	58025430 	.word	0x58025430
 8007db0:	58025444 	.word	0x58025444
 8007db4:	58025458 	.word	0x58025458
 8007db8:	5802546c 	.word	0x5802546c
 8007dbc:	58025480 	.word	0x58025480
 8007dc0:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8007dc4:	693b      	ldr	r3, [r7, #16]
 8007dc6:	f003 0320 	and.w	r3, r3, #32
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d160      	bne.n	8007e90 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	4a7f      	ldr	r2, [pc, #508]	@ (8007fd0 <HAL_DMA_IRQHandler+0xc74>)
 8007dd4:	4293      	cmp	r3, r2
 8007dd6:	d04a      	beq.n	8007e6e <HAL_DMA_IRQHandler+0xb12>
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	4a7d      	ldr	r2, [pc, #500]	@ (8007fd4 <HAL_DMA_IRQHandler+0xc78>)
 8007dde:	4293      	cmp	r3, r2
 8007de0:	d045      	beq.n	8007e6e <HAL_DMA_IRQHandler+0xb12>
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	4a7c      	ldr	r2, [pc, #496]	@ (8007fd8 <HAL_DMA_IRQHandler+0xc7c>)
 8007de8:	4293      	cmp	r3, r2
 8007dea:	d040      	beq.n	8007e6e <HAL_DMA_IRQHandler+0xb12>
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	4a7a      	ldr	r2, [pc, #488]	@ (8007fdc <HAL_DMA_IRQHandler+0xc80>)
 8007df2:	4293      	cmp	r3, r2
 8007df4:	d03b      	beq.n	8007e6e <HAL_DMA_IRQHandler+0xb12>
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	4a79      	ldr	r2, [pc, #484]	@ (8007fe0 <HAL_DMA_IRQHandler+0xc84>)
 8007dfc:	4293      	cmp	r3, r2
 8007dfe:	d036      	beq.n	8007e6e <HAL_DMA_IRQHandler+0xb12>
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	4a77      	ldr	r2, [pc, #476]	@ (8007fe4 <HAL_DMA_IRQHandler+0xc88>)
 8007e06:	4293      	cmp	r3, r2
 8007e08:	d031      	beq.n	8007e6e <HAL_DMA_IRQHandler+0xb12>
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	4a76      	ldr	r2, [pc, #472]	@ (8007fe8 <HAL_DMA_IRQHandler+0xc8c>)
 8007e10:	4293      	cmp	r3, r2
 8007e12:	d02c      	beq.n	8007e6e <HAL_DMA_IRQHandler+0xb12>
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	4a74      	ldr	r2, [pc, #464]	@ (8007fec <HAL_DMA_IRQHandler+0xc90>)
 8007e1a:	4293      	cmp	r3, r2
 8007e1c:	d027      	beq.n	8007e6e <HAL_DMA_IRQHandler+0xb12>
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	4a73      	ldr	r2, [pc, #460]	@ (8007ff0 <HAL_DMA_IRQHandler+0xc94>)
 8007e24:	4293      	cmp	r3, r2
 8007e26:	d022      	beq.n	8007e6e <HAL_DMA_IRQHandler+0xb12>
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	4a71      	ldr	r2, [pc, #452]	@ (8007ff4 <HAL_DMA_IRQHandler+0xc98>)
 8007e2e:	4293      	cmp	r3, r2
 8007e30:	d01d      	beq.n	8007e6e <HAL_DMA_IRQHandler+0xb12>
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	4a70      	ldr	r2, [pc, #448]	@ (8007ff8 <HAL_DMA_IRQHandler+0xc9c>)
 8007e38:	4293      	cmp	r3, r2
 8007e3a:	d018      	beq.n	8007e6e <HAL_DMA_IRQHandler+0xb12>
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	4a6e      	ldr	r2, [pc, #440]	@ (8007ffc <HAL_DMA_IRQHandler+0xca0>)
 8007e42:	4293      	cmp	r3, r2
 8007e44:	d013      	beq.n	8007e6e <HAL_DMA_IRQHandler+0xb12>
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	4a6d      	ldr	r2, [pc, #436]	@ (8008000 <HAL_DMA_IRQHandler+0xca4>)
 8007e4c:	4293      	cmp	r3, r2
 8007e4e:	d00e      	beq.n	8007e6e <HAL_DMA_IRQHandler+0xb12>
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	4a6b      	ldr	r2, [pc, #428]	@ (8008004 <HAL_DMA_IRQHandler+0xca8>)
 8007e56:	4293      	cmp	r3, r2
 8007e58:	d009      	beq.n	8007e6e <HAL_DMA_IRQHandler+0xb12>
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	4a6a      	ldr	r2, [pc, #424]	@ (8008008 <HAL_DMA_IRQHandler+0xcac>)
 8007e60:	4293      	cmp	r3, r2
 8007e62:	d004      	beq.n	8007e6e <HAL_DMA_IRQHandler+0xb12>
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	4a68      	ldr	r2, [pc, #416]	@ (800800c <HAL_DMA_IRQHandler+0xcb0>)
 8007e6a:	4293      	cmp	r3, r2
 8007e6c:	d108      	bne.n	8007e80 <HAL_DMA_IRQHandler+0xb24>
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	681a      	ldr	r2, [r3, #0]
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	f022 0208 	bic.w	r2, r2, #8
 8007e7c:	601a      	str	r2, [r3, #0]
 8007e7e:	e007      	b.n	8007e90 <HAL_DMA_IRQHandler+0xb34>
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	681a      	ldr	r2, [r3, #0]
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	f022 0204 	bic.w	r2, r2, #4
 8007e8e:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	f000 8165 	beq.w	8008164 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e9e:	6878      	ldr	r0, [r7, #4]
 8007ea0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007ea2:	e15f      	b.n	8008164 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007ea8:	f003 031f 	and.w	r3, r3, #31
 8007eac:	2202      	movs	r2, #2
 8007eae:	409a      	lsls	r2, r3
 8007eb0:	697b      	ldr	r3, [r7, #20]
 8007eb2:	4013      	ands	r3, r2
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	f000 80c5 	beq.w	8008044 <HAL_DMA_IRQHandler+0xce8>
 8007eba:	693b      	ldr	r3, [r7, #16]
 8007ebc:	f003 0302 	and.w	r3, r3, #2
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	f000 80bf 	beq.w	8008044 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007eca:	f003 031f 	and.w	r3, r3, #31
 8007ece:	2202      	movs	r2, #2
 8007ed0:	409a      	lsls	r2, r3
 8007ed2:	69fb      	ldr	r3, [r7, #28]
 8007ed4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007ed6:	693b      	ldr	r3, [r7, #16]
 8007ed8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d018      	beq.n	8007f12 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8007ee0:	693b      	ldr	r3, [r7, #16]
 8007ee2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d109      	bne.n	8007efe <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	f000 813a 	beq.w	8008168 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007ef8:	6878      	ldr	r0, [r7, #4]
 8007efa:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007efc:	e134      	b.n	8008168 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	f000 8130 	beq.w	8008168 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007f0c:	6878      	ldr	r0, [r7, #4]
 8007f0e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007f10:	e12a      	b.n	8008168 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8007f12:	693b      	ldr	r3, [r7, #16]
 8007f14:	f003 0320 	and.w	r3, r3, #32
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	f040 8089 	bne.w	8008030 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	4a2b      	ldr	r2, [pc, #172]	@ (8007fd0 <HAL_DMA_IRQHandler+0xc74>)
 8007f24:	4293      	cmp	r3, r2
 8007f26:	d04a      	beq.n	8007fbe <HAL_DMA_IRQHandler+0xc62>
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	4a29      	ldr	r2, [pc, #164]	@ (8007fd4 <HAL_DMA_IRQHandler+0xc78>)
 8007f2e:	4293      	cmp	r3, r2
 8007f30:	d045      	beq.n	8007fbe <HAL_DMA_IRQHandler+0xc62>
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	4a28      	ldr	r2, [pc, #160]	@ (8007fd8 <HAL_DMA_IRQHandler+0xc7c>)
 8007f38:	4293      	cmp	r3, r2
 8007f3a:	d040      	beq.n	8007fbe <HAL_DMA_IRQHandler+0xc62>
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	4a26      	ldr	r2, [pc, #152]	@ (8007fdc <HAL_DMA_IRQHandler+0xc80>)
 8007f42:	4293      	cmp	r3, r2
 8007f44:	d03b      	beq.n	8007fbe <HAL_DMA_IRQHandler+0xc62>
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	4a25      	ldr	r2, [pc, #148]	@ (8007fe0 <HAL_DMA_IRQHandler+0xc84>)
 8007f4c:	4293      	cmp	r3, r2
 8007f4e:	d036      	beq.n	8007fbe <HAL_DMA_IRQHandler+0xc62>
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	4a23      	ldr	r2, [pc, #140]	@ (8007fe4 <HAL_DMA_IRQHandler+0xc88>)
 8007f56:	4293      	cmp	r3, r2
 8007f58:	d031      	beq.n	8007fbe <HAL_DMA_IRQHandler+0xc62>
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	4a22      	ldr	r2, [pc, #136]	@ (8007fe8 <HAL_DMA_IRQHandler+0xc8c>)
 8007f60:	4293      	cmp	r3, r2
 8007f62:	d02c      	beq.n	8007fbe <HAL_DMA_IRQHandler+0xc62>
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	4a20      	ldr	r2, [pc, #128]	@ (8007fec <HAL_DMA_IRQHandler+0xc90>)
 8007f6a:	4293      	cmp	r3, r2
 8007f6c:	d027      	beq.n	8007fbe <HAL_DMA_IRQHandler+0xc62>
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	4a1f      	ldr	r2, [pc, #124]	@ (8007ff0 <HAL_DMA_IRQHandler+0xc94>)
 8007f74:	4293      	cmp	r3, r2
 8007f76:	d022      	beq.n	8007fbe <HAL_DMA_IRQHandler+0xc62>
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	4a1d      	ldr	r2, [pc, #116]	@ (8007ff4 <HAL_DMA_IRQHandler+0xc98>)
 8007f7e:	4293      	cmp	r3, r2
 8007f80:	d01d      	beq.n	8007fbe <HAL_DMA_IRQHandler+0xc62>
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	4a1c      	ldr	r2, [pc, #112]	@ (8007ff8 <HAL_DMA_IRQHandler+0xc9c>)
 8007f88:	4293      	cmp	r3, r2
 8007f8a:	d018      	beq.n	8007fbe <HAL_DMA_IRQHandler+0xc62>
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	4a1a      	ldr	r2, [pc, #104]	@ (8007ffc <HAL_DMA_IRQHandler+0xca0>)
 8007f92:	4293      	cmp	r3, r2
 8007f94:	d013      	beq.n	8007fbe <HAL_DMA_IRQHandler+0xc62>
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	4a19      	ldr	r2, [pc, #100]	@ (8008000 <HAL_DMA_IRQHandler+0xca4>)
 8007f9c:	4293      	cmp	r3, r2
 8007f9e:	d00e      	beq.n	8007fbe <HAL_DMA_IRQHandler+0xc62>
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	4a17      	ldr	r2, [pc, #92]	@ (8008004 <HAL_DMA_IRQHandler+0xca8>)
 8007fa6:	4293      	cmp	r3, r2
 8007fa8:	d009      	beq.n	8007fbe <HAL_DMA_IRQHandler+0xc62>
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	4a16      	ldr	r2, [pc, #88]	@ (8008008 <HAL_DMA_IRQHandler+0xcac>)
 8007fb0:	4293      	cmp	r3, r2
 8007fb2:	d004      	beq.n	8007fbe <HAL_DMA_IRQHandler+0xc62>
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	4a14      	ldr	r2, [pc, #80]	@ (800800c <HAL_DMA_IRQHandler+0xcb0>)
 8007fba:	4293      	cmp	r3, r2
 8007fbc:	d128      	bne.n	8008010 <HAL_DMA_IRQHandler+0xcb4>
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	681a      	ldr	r2, [r3, #0]
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	f022 0214 	bic.w	r2, r2, #20
 8007fcc:	601a      	str	r2, [r3, #0]
 8007fce:	e027      	b.n	8008020 <HAL_DMA_IRQHandler+0xcc4>
 8007fd0:	40020010 	.word	0x40020010
 8007fd4:	40020028 	.word	0x40020028
 8007fd8:	40020040 	.word	0x40020040
 8007fdc:	40020058 	.word	0x40020058
 8007fe0:	40020070 	.word	0x40020070
 8007fe4:	40020088 	.word	0x40020088
 8007fe8:	400200a0 	.word	0x400200a0
 8007fec:	400200b8 	.word	0x400200b8
 8007ff0:	40020410 	.word	0x40020410
 8007ff4:	40020428 	.word	0x40020428
 8007ff8:	40020440 	.word	0x40020440
 8007ffc:	40020458 	.word	0x40020458
 8008000:	40020470 	.word	0x40020470
 8008004:	40020488 	.word	0x40020488
 8008008:	400204a0 	.word	0x400204a0
 800800c:	400204b8 	.word	0x400204b8
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	681a      	ldr	r2, [r3, #0]
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	f022 020a 	bic.w	r2, r2, #10
 800801e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	2201      	movs	r2, #1
 8008024:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	2200      	movs	r2, #0
 800802c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008034:	2b00      	cmp	r3, #0
 8008036:	f000 8097 	beq.w	8008168 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800803e:	6878      	ldr	r0, [r7, #4]
 8008040:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008042:	e091      	b.n	8008168 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008048:	f003 031f 	and.w	r3, r3, #31
 800804c:	2208      	movs	r2, #8
 800804e:	409a      	lsls	r2, r3
 8008050:	697b      	ldr	r3, [r7, #20]
 8008052:	4013      	ands	r3, r2
 8008054:	2b00      	cmp	r3, #0
 8008056:	f000 8088 	beq.w	800816a <HAL_DMA_IRQHandler+0xe0e>
 800805a:	693b      	ldr	r3, [r7, #16]
 800805c:	f003 0308 	and.w	r3, r3, #8
 8008060:	2b00      	cmp	r3, #0
 8008062:	f000 8082 	beq.w	800816a <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	4a41      	ldr	r2, [pc, #260]	@ (8008170 <HAL_DMA_IRQHandler+0xe14>)
 800806c:	4293      	cmp	r3, r2
 800806e:	d04a      	beq.n	8008106 <HAL_DMA_IRQHandler+0xdaa>
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	4a3f      	ldr	r2, [pc, #252]	@ (8008174 <HAL_DMA_IRQHandler+0xe18>)
 8008076:	4293      	cmp	r3, r2
 8008078:	d045      	beq.n	8008106 <HAL_DMA_IRQHandler+0xdaa>
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	4a3e      	ldr	r2, [pc, #248]	@ (8008178 <HAL_DMA_IRQHandler+0xe1c>)
 8008080:	4293      	cmp	r3, r2
 8008082:	d040      	beq.n	8008106 <HAL_DMA_IRQHandler+0xdaa>
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	4a3c      	ldr	r2, [pc, #240]	@ (800817c <HAL_DMA_IRQHandler+0xe20>)
 800808a:	4293      	cmp	r3, r2
 800808c:	d03b      	beq.n	8008106 <HAL_DMA_IRQHandler+0xdaa>
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	4a3b      	ldr	r2, [pc, #236]	@ (8008180 <HAL_DMA_IRQHandler+0xe24>)
 8008094:	4293      	cmp	r3, r2
 8008096:	d036      	beq.n	8008106 <HAL_DMA_IRQHandler+0xdaa>
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	4a39      	ldr	r2, [pc, #228]	@ (8008184 <HAL_DMA_IRQHandler+0xe28>)
 800809e:	4293      	cmp	r3, r2
 80080a0:	d031      	beq.n	8008106 <HAL_DMA_IRQHandler+0xdaa>
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	4a38      	ldr	r2, [pc, #224]	@ (8008188 <HAL_DMA_IRQHandler+0xe2c>)
 80080a8:	4293      	cmp	r3, r2
 80080aa:	d02c      	beq.n	8008106 <HAL_DMA_IRQHandler+0xdaa>
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	4a36      	ldr	r2, [pc, #216]	@ (800818c <HAL_DMA_IRQHandler+0xe30>)
 80080b2:	4293      	cmp	r3, r2
 80080b4:	d027      	beq.n	8008106 <HAL_DMA_IRQHandler+0xdaa>
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	4a35      	ldr	r2, [pc, #212]	@ (8008190 <HAL_DMA_IRQHandler+0xe34>)
 80080bc:	4293      	cmp	r3, r2
 80080be:	d022      	beq.n	8008106 <HAL_DMA_IRQHandler+0xdaa>
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	4a33      	ldr	r2, [pc, #204]	@ (8008194 <HAL_DMA_IRQHandler+0xe38>)
 80080c6:	4293      	cmp	r3, r2
 80080c8:	d01d      	beq.n	8008106 <HAL_DMA_IRQHandler+0xdaa>
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	4a32      	ldr	r2, [pc, #200]	@ (8008198 <HAL_DMA_IRQHandler+0xe3c>)
 80080d0:	4293      	cmp	r3, r2
 80080d2:	d018      	beq.n	8008106 <HAL_DMA_IRQHandler+0xdaa>
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	4a30      	ldr	r2, [pc, #192]	@ (800819c <HAL_DMA_IRQHandler+0xe40>)
 80080da:	4293      	cmp	r3, r2
 80080dc:	d013      	beq.n	8008106 <HAL_DMA_IRQHandler+0xdaa>
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	4a2f      	ldr	r2, [pc, #188]	@ (80081a0 <HAL_DMA_IRQHandler+0xe44>)
 80080e4:	4293      	cmp	r3, r2
 80080e6:	d00e      	beq.n	8008106 <HAL_DMA_IRQHandler+0xdaa>
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	4a2d      	ldr	r2, [pc, #180]	@ (80081a4 <HAL_DMA_IRQHandler+0xe48>)
 80080ee:	4293      	cmp	r3, r2
 80080f0:	d009      	beq.n	8008106 <HAL_DMA_IRQHandler+0xdaa>
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	4a2c      	ldr	r2, [pc, #176]	@ (80081a8 <HAL_DMA_IRQHandler+0xe4c>)
 80080f8:	4293      	cmp	r3, r2
 80080fa:	d004      	beq.n	8008106 <HAL_DMA_IRQHandler+0xdaa>
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	4a2a      	ldr	r2, [pc, #168]	@ (80081ac <HAL_DMA_IRQHandler+0xe50>)
 8008102:	4293      	cmp	r3, r2
 8008104:	d108      	bne.n	8008118 <HAL_DMA_IRQHandler+0xdbc>
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	681a      	ldr	r2, [r3, #0]
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	f022 021c 	bic.w	r2, r2, #28
 8008114:	601a      	str	r2, [r3, #0]
 8008116:	e007      	b.n	8008128 <HAL_DMA_IRQHandler+0xdcc>
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	681a      	ldr	r2, [r3, #0]
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	f022 020e 	bic.w	r2, r2, #14
 8008126:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800812c:	f003 031f 	and.w	r3, r3, #31
 8008130:	2201      	movs	r2, #1
 8008132:	409a      	lsls	r2, r3
 8008134:	69fb      	ldr	r3, [r7, #28]
 8008136:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	2201      	movs	r2, #1
 800813c:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	2201      	movs	r2, #1
 8008142:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	2200      	movs	r2, #0
 800814a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008152:	2b00      	cmp	r3, #0
 8008154:	d009      	beq.n	800816a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800815a:	6878      	ldr	r0, [r7, #4]
 800815c:	4798      	blx	r3
 800815e:	e004      	b.n	800816a <HAL_DMA_IRQHandler+0xe0e>
          return;
 8008160:	bf00      	nop
 8008162:	e002      	b.n	800816a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008164:	bf00      	nop
 8008166:	e000      	b.n	800816a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008168:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800816a:	3728      	adds	r7, #40	@ 0x28
 800816c:	46bd      	mov	sp, r7
 800816e:	bd80      	pop	{r7, pc}
 8008170:	40020010 	.word	0x40020010
 8008174:	40020028 	.word	0x40020028
 8008178:	40020040 	.word	0x40020040
 800817c:	40020058 	.word	0x40020058
 8008180:	40020070 	.word	0x40020070
 8008184:	40020088 	.word	0x40020088
 8008188:	400200a0 	.word	0x400200a0
 800818c:	400200b8 	.word	0x400200b8
 8008190:	40020410 	.word	0x40020410
 8008194:	40020428 	.word	0x40020428
 8008198:	40020440 	.word	0x40020440
 800819c:	40020458 	.word	0x40020458
 80081a0:	40020470 	.word	0x40020470
 80081a4:	40020488 	.word	0x40020488
 80081a8:	400204a0 	.word	0x400204a0
 80081ac:	400204b8 	.word	0x400204b8

080081b0 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80081b0:	b480      	push	{r7}
 80081b2:	b083      	sub	sp, #12
 80081b4:	af00      	add	r7, sp, #0
 80081b6:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 80081bc:	4618      	mov	r0, r3
 80081be:	370c      	adds	r7, #12
 80081c0:	46bd      	mov	sp, r7
 80081c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c6:	4770      	bx	lr

080081c8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80081c8:	b480      	push	{r7}
 80081ca:	b087      	sub	sp, #28
 80081cc:	af00      	add	r7, sp, #0
 80081ce:	60f8      	str	r0, [r7, #12]
 80081d0:	60b9      	str	r1, [r7, #8]
 80081d2:	607a      	str	r2, [r7, #4]
 80081d4:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80081da:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80081e0:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	4a7f      	ldr	r2, [pc, #508]	@ (80083e4 <DMA_SetConfig+0x21c>)
 80081e8:	4293      	cmp	r3, r2
 80081ea:	d072      	beq.n	80082d2 <DMA_SetConfig+0x10a>
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	4a7d      	ldr	r2, [pc, #500]	@ (80083e8 <DMA_SetConfig+0x220>)
 80081f2:	4293      	cmp	r3, r2
 80081f4:	d06d      	beq.n	80082d2 <DMA_SetConfig+0x10a>
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	4a7c      	ldr	r2, [pc, #496]	@ (80083ec <DMA_SetConfig+0x224>)
 80081fc:	4293      	cmp	r3, r2
 80081fe:	d068      	beq.n	80082d2 <DMA_SetConfig+0x10a>
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	4a7a      	ldr	r2, [pc, #488]	@ (80083f0 <DMA_SetConfig+0x228>)
 8008206:	4293      	cmp	r3, r2
 8008208:	d063      	beq.n	80082d2 <DMA_SetConfig+0x10a>
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	4a79      	ldr	r2, [pc, #484]	@ (80083f4 <DMA_SetConfig+0x22c>)
 8008210:	4293      	cmp	r3, r2
 8008212:	d05e      	beq.n	80082d2 <DMA_SetConfig+0x10a>
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	4a77      	ldr	r2, [pc, #476]	@ (80083f8 <DMA_SetConfig+0x230>)
 800821a:	4293      	cmp	r3, r2
 800821c:	d059      	beq.n	80082d2 <DMA_SetConfig+0x10a>
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	4a76      	ldr	r2, [pc, #472]	@ (80083fc <DMA_SetConfig+0x234>)
 8008224:	4293      	cmp	r3, r2
 8008226:	d054      	beq.n	80082d2 <DMA_SetConfig+0x10a>
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	4a74      	ldr	r2, [pc, #464]	@ (8008400 <DMA_SetConfig+0x238>)
 800822e:	4293      	cmp	r3, r2
 8008230:	d04f      	beq.n	80082d2 <DMA_SetConfig+0x10a>
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	4a73      	ldr	r2, [pc, #460]	@ (8008404 <DMA_SetConfig+0x23c>)
 8008238:	4293      	cmp	r3, r2
 800823a:	d04a      	beq.n	80082d2 <DMA_SetConfig+0x10a>
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	4a71      	ldr	r2, [pc, #452]	@ (8008408 <DMA_SetConfig+0x240>)
 8008242:	4293      	cmp	r3, r2
 8008244:	d045      	beq.n	80082d2 <DMA_SetConfig+0x10a>
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	4a70      	ldr	r2, [pc, #448]	@ (800840c <DMA_SetConfig+0x244>)
 800824c:	4293      	cmp	r3, r2
 800824e:	d040      	beq.n	80082d2 <DMA_SetConfig+0x10a>
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	4a6e      	ldr	r2, [pc, #440]	@ (8008410 <DMA_SetConfig+0x248>)
 8008256:	4293      	cmp	r3, r2
 8008258:	d03b      	beq.n	80082d2 <DMA_SetConfig+0x10a>
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	4a6d      	ldr	r2, [pc, #436]	@ (8008414 <DMA_SetConfig+0x24c>)
 8008260:	4293      	cmp	r3, r2
 8008262:	d036      	beq.n	80082d2 <DMA_SetConfig+0x10a>
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	4a6b      	ldr	r2, [pc, #428]	@ (8008418 <DMA_SetConfig+0x250>)
 800826a:	4293      	cmp	r3, r2
 800826c:	d031      	beq.n	80082d2 <DMA_SetConfig+0x10a>
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	4a6a      	ldr	r2, [pc, #424]	@ (800841c <DMA_SetConfig+0x254>)
 8008274:	4293      	cmp	r3, r2
 8008276:	d02c      	beq.n	80082d2 <DMA_SetConfig+0x10a>
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	4a68      	ldr	r2, [pc, #416]	@ (8008420 <DMA_SetConfig+0x258>)
 800827e:	4293      	cmp	r3, r2
 8008280:	d027      	beq.n	80082d2 <DMA_SetConfig+0x10a>
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	4a67      	ldr	r2, [pc, #412]	@ (8008424 <DMA_SetConfig+0x25c>)
 8008288:	4293      	cmp	r3, r2
 800828a:	d022      	beq.n	80082d2 <DMA_SetConfig+0x10a>
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	4a65      	ldr	r2, [pc, #404]	@ (8008428 <DMA_SetConfig+0x260>)
 8008292:	4293      	cmp	r3, r2
 8008294:	d01d      	beq.n	80082d2 <DMA_SetConfig+0x10a>
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	4a64      	ldr	r2, [pc, #400]	@ (800842c <DMA_SetConfig+0x264>)
 800829c:	4293      	cmp	r3, r2
 800829e:	d018      	beq.n	80082d2 <DMA_SetConfig+0x10a>
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	4a62      	ldr	r2, [pc, #392]	@ (8008430 <DMA_SetConfig+0x268>)
 80082a6:	4293      	cmp	r3, r2
 80082a8:	d013      	beq.n	80082d2 <DMA_SetConfig+0x10a>
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	4a61      	ldr	r2, [pc, #388]	@ (8008434 <DMA_SetConfig+0x26c>)
 80082b0:	4293      	cmp	r3, r2
 80082b2:	d00e      	beq.n	80082d2 <DMA_SetConfig+0x10a>
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	4a5f      	ldr	r2, [pc, #380]	@ (8008438 <DMA_SetConfig+0x270>)
 80082ba:	4293      	cmp	r3, r2
 80082bc:	d009      	beq.n	80082d2 <DMA_SetConfig+0x10a>
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	4a5e      	ldr	r2, [pc, #376]	@ (800843c <DMA_SetConfig+0x274>)
 80082c4:	4293      	cmp	r3, r2
 80082c6:	d004      	beq.n	80082d2 <DMA_SetConfig+0x10a>
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	4a5c      	ldr	r2, [pc, #368]	@ (8008440 <DMA_SetConfig+0x278>)
 80082ce:	4293      	cmp	r3, r2
 80082d0:	d101      	bne.n	80082d6 <DMA_SetConfig+0x10e>
 80082d2:	2301      	movs	r3, #1
 80082d4:	e000      	b.n	80082d8 <DMA_SetConfig+0x110>
 80082d6:	2300      	movs	r3, #0
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d00d      	beq.n	80082f8 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80082e0:	68fa      	ldr	r2, [r7, #12]
 80082e2:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80082e4:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d004      	beq.n	80082f8 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80082f2:	68fa      	ldr	r2, [r7, #12]
 80082f4:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80082f6:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	4a39      	ldr	r2, [pc, #228]	@ (80083e4 <DMA_SetConfig+0x21c>)
 80082fe:	4293      	cmp	r3, r2
 8008300:	d04a      	beq.n	8008398 <DMA_SetConfig+0x1d0>
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	4a38      	ldr	r2, [pc, #224]	@ (80083e8 <DMA_SetConfig+0x220>)
 8008308:	4293      	cmp	r3, r2
 800830a:	d045      	beq.n	8008398 <DMA_SetConfig+0x1d0>
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	4a36      	ldr	r2, [pc, #216]	@ (80083ec <DMA_SetConfig+0x224>)
 8008312:	4293      	cmp	r3, r2
 8008314:	d040      	beq.n	8008398 <DMA_SetConfig+0x1d0>
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	4a35      	ldr	r2, [pc, #212]	@ (80083f0 <DMA_SetConfig+0x228>)
 800831c:	4293      	cmp	r3, r2
 800831e:	d03b      	beq.n	8008398 <DMA_SetConfig+0x1d0>
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	4a33      	ldr	r2, [pc, #204]	@ (80083f4 <DMA_SetConfig+0x22c>)
 8008326:	4293      	cmp	r3, r2
 8008328:	d036      	beq.n	8008398 <DMA_SetConfig+0x1d0>
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	4a32      	ldr	r2, [pc, #200]	@ (80083f8 <DMA_SetConfig+0x230>)
 8008330:	4293      	cmp	r3, r2
 8008332:	d031      	beq.n	8008398 <DMA_SetConfig+0x1d0>
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	4a30      	ldr	r2, [pc, #192]	@ (80083fc <DMA_SetConfig+0x234>)
 800833a:	4293      	cmp	r3, r2
 800833c:	d02c      	beq.n	8008398 <DMA_SetConfig+0x1d0>
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	4a2f      	ldr	r2, [pc, #188]	@ (8008400 <DMA_SetConfig+0x238>)
 8008344:	4293      	cmp	r3, r2
 8008346:	d027      	beq.n	8008398 <DMA_SetConfig+0x1d0>
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	4a2d      	ldr	r2, [pc, #180]	@ (8008404 <DMA_SetConfig+0x23c>)
 800834e:	4293      	cmp	r3, r2
 8008350:	d022      	beq.n	8008398 <DMA_SetConfig+0x1d0>
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	4a2c      	ldr	r2, [pc, #176]	@ (8008408 <DMA_SetConfig+0x240>)
 8008358:	4293      	cmp	r3, r2
 800835a:	d01d      	beq.n	8008398 <DMA_SetConfig+0x1d0>
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	4a2a      	ldr	r2, [pc, #168]	@ (800840c <DMA_SetConfig+0x244>)
 8008362:	4293      	cmp	r3, r2
 8008364:	d018      	beq.n	8008398 <DMA_SetConfig+0x1d0>
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	4a29      	ldr	r2, [pc, #164]	@ (8008410 <DMA_SetConfig+0x248>)
 800836c:	4293      	cmp	r3, r2
 800836e:	d013      	beq.n	8008398 <DMA_SetConfig+0x1d0>
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	4a27      	ldr	r2, [pc, #156]	@ (8008414 <DMA_SetConfig+0x24c>)
 8008376:	4293      	cmp	r3, r2
 8008378:	d00e      	beq.n	8008398 <DMA_SetConfig+0x1d0>
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	4a26      	ldr	r2, [pc, #152]	@ (8008418 <DMA_SetConfig+0x250>)
 8008380:	4293      	cmp	r3, r2
 8008382:	d009      	beq.n	8008398 <DMA_SetConfig+0x1d0>
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	4a24      	ldr	r2, [pc, #144]	@ (800841c <DMA_SetConfig+0x254>)
 800838a:	4293      	cmp	r3, r2
 800838c:	d004      	beq.n	8008398 <DMA_SetConfig+0x1d0>
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	4a23      	ldr	r2, [pc, #140]	@ (8008420 <DMA_SetConfig+0x258>)
 8008394:	4293      	cmp	r3, r2
 8008396:	d101      	bne.n	800839c <DMA_SetConfig+0x1d4>
 8008398:	2301      	movs	r3, #1
 800839a:	e000      	b.n	800839e <DMA_SetConfig+0x1d6>
 800839c:	2300      	movs	r3, #0
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d059      	beq.n	8008456 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80083a6:	f003 031f 	and.w	r3, r3, #31
 80083aa:	223f      	movs	r2, #63	@ 0x3f
 80083ac:	409a      	lsls	r2, r3
 80083ae:	697b      	ldr	r3, [r7, #20]
 80083b0:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	681a      	ldr	r2, [r3, #0]
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80083c0:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	683a      	ldr	r2, [r7, #0]
 80083c8:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	689b      	ldr	r3, [r3, #8]
 80083ce:	2b40      	cmp	r3, #64	@ 0x40
 80083d0:	d138      	bne.n	8008444 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	687a      	ldr	r2, [r7, #4]
 80083d8:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	68ba      	ldr	r2, [r7, #8]
 80083e0:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 80083e2:	e086      	b.n	80084f2 <DMA_SetConfig+0x32a>
 80083e4:	40020010 	.word	0x40020010
 80083e8:	40020028 	.word	0x40020028
 80083ec:	40020040 	.word	0x40020040
 80083f0:	40020058 	.word	0x40020058
 80083f4:	40020070 	.word	0x40020070
 80083f8:	40020088 	.word	0x40020088
 80083fc:	400200a0 	.word	0x400200a0
 8008400:	400200b8 	.word	0x400200b8
 8008404:	40020410 	.word	0x40020410
 8008408:	40020428 	.word	0x40020428
 800840c:	40020440 	.word	0x40020440
 8008410:	40020458 	.word	0x40020458
 8008414:	40020470 	.word	0x40020470
 8008418:	40020488 	.word	0x40020488
 800841c:	400204a0 	.word	0x400204a0
 8008420:	400204b8 	.word	0x400204b8
 8008424:	58025408 	.word	0x58025408
 8008428:	5802541c 	.word	0x5802541c
 800842c:	58025430 	.word	0x58025430
 8008430:	58025444 	.word	0x58025444
 8008434:	58025458 	.word	0x58025458
 8008438:	5802546c 	.word	0x5802546c
 800843c:	58025480 	.word	0x58025480
 8008440:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	68ba      	ldr	r2, [r7, #8]
 800844a:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	687a      	ldr	r2, [r7, #4]
 8008452:	60da      	str	r2, [r3, #12]
}
 8008454:	e04d      	b.n	80084f2 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	4a29      	ldr	r2, [pc, #164]	@ (8008500 <DMA_SetConfig+0x338>)
 800845c:	4293      	cmp	r3, r2
 800845e:	d022      	beq.n	80084a6 <DMA_SetConfig+0x2de>
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	4a27      	ldr	r2, [pc, #156]	@ (8008504 <DMA_SetConfig+0x33c>)
 8008466:	4293      	cmp	r3, r2
 8008468:	d01d      	beq.n	80084a6 <DMA_SetConfig+0x2de>
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	4a26      	ldr	r2, [pc, #152]	@ (8008508 <DMA_SetConfig+0x340>)
 8008470:	4293      	cmp	r3, r2
 8008472:	d018      	beq.n	80084a6 <DMA_SetConfig+0x2de>
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	4a24      	ldr	r2, [pc, #144]	@ (800850c <DMA_SetConfig+0x344>)
 800847a:	4293      	cmp	r3, r2
 800847c:	d013      	beq.n	80084a6 <DMA_SetConfig+0x2de>
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	4a23      	ldr	r2, [pc, #140]	@ (8008510 <DMA_SetConfig+0x348>)
 8008484:	4293      	cmp	r3, r2
 8008486:	d00e      	beq.n	80084a6 <DMA_SetConfig+0x2de>
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	4a21      	ldr	r2, [pc, #132]	@ (8008514 <DMA_SetConfig+0x34c>)
 800848e:	4293      	cmp	r3, r2
 8008490:	d009      	beq.n	80084a6 <DMA_SetConfig+0x2de>
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	4a20      	ldr	r2, [pc, #128]	@ (8008518 <DMA_SetConfig+0x350>)
 8008498:	4293      	cmp	r3, r2
 800849a:	d004      	beq.n	80084a6 <DMA_SetConfig+0x2de>
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	4a1e      	ldr	r2, [pc, #120]	@ (800851c <DMA_SetConfig+0x354>)
 80084a2:	4293      	cmp	r3, r2
 80084a4:	d101      	bne.n	80084aa <DMA_SetConfig+0x2e2>
 80084a6:	2301      	movs	r3, #1
 80084a8:	e000      	b.n	80084ac <DMA_SetConfig+0x2e4>
 80084aa:	2300      	movs	r3, #0
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d020      	beq.n	80084f2 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80084b4:	f003 031f 	and.w	r3, r3, #31
 80084b8:	2201      	movs	r2, #1
 80084ba:	409a      	lsls	r2, r3
 80084bc:	693b      	ldr	r3, [r7, #16]
 80084be:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	683a      	ldr	r2, [r7, #0]
 80084c6:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	689b      	ldr	r3, [r3, #8]
 80084cc:	2b40      	cmp	r3, #64	@ 0x40
 80084ce:	d108      	bne.n	80084e2 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	687a      	ldr	r2, [r7, #4]
 80084d6:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	68ba      	ldr	r2, [r7, #8]
 80084de:	60da      	str	r2, [r3, #12]
}
 80084e0:	e007      	b.n	80084f2 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	68ba      	ldr	r2, [r7, #8]
 80084e8:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	687a      	ldr	r2, [r7, #4]
 80084f0:	60da      	str	r2, [r3, #12]
}
 80084f2:	bf00      	nop
 80084f4:	371c      	adds	r7, #28
 80084f6:	46bd      	mov	sp, r7
 80084f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084fc:	4770      	bx	lr
 80084fe:	bf00      	nop
 8008500:	58025408 	.word	0x58025408
 8008504:	5802541c 	.word	0x5802541c
 8008508:	58025430 	.word	0x58025430
 800850c:	58025444 	.word	0x58025444
 8008510:	58025458 	.word	0x58025458
 8008514:	5802546c 	.word	0x5802546c
 8008518:	58025480 	.word	0x58025480
 800851c:	58025494 	.word	0x58025494

08008520 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8008520:	b480      	push	{r7}
 8008522:	b085      	sub	sp, #20
 8008524:	af00      	add	r7, sp, #0
 8008526:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	4a42      	ldr	r2, [pc, #264]	@ (8008638 <DMA_CalcBaseAndBitshift+0x118>)
 800852e:	4293      	cmp	r3, r2
 8008530:	d04a      	beq.n	80085c8 <DMA_CalcBaseAndBitshift+0xa8>
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	4a41      	ldr	r2, [pc, #260]	@ (800863c <DMA_CalcBaseAndBitshift+0x11c>)
 8008538:	4293      	cmp	r3, r2
 800853a:	d045      	beq.n	80085c8 <DMA_CalcBaseAndBitshift+0xa8>
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	4a3f      	ldr	r2, [pc, #252]	@ (8008640 <DMA_CalcBaseAndBitshift+0x120>)
 8008542:	4293      	cmp	r3, r2
 8008544:	d040      	beq.n	80085c8 <DMA_CalcBaseAndBitshift+0xa8>
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	4a3e      	ldr	r2, [pc, #248]	@ (8008644 <DMA_CalcBaseAndBitshift+0x124>)
 800854c:	4293      	cmp	r3, r2
 800854e:	d03b      	beq.n	80085c8 <DMA_CalcBaseAndBitshift+0xa8>
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	4a3c      	ldr	r2, [pc, #240]	@ (8008648 <DMA_CalcBaseAndBitshift+0x128>)
 8008556:	4293      	cmp	r3, r2
 8008558:	d036      	beq.n	80085c8 <DMA_CalcBaseAndBitshift+0xa8>
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	4a3b      	ldr	r2, [pc, #236]	@ (800864c <DMA_CalcBaseAndBitshift+0x12c>)
 8008560:	4293      	cmp	r3, r2
 8008562:	d031      	beq.n	80085c8 <DMA_CalcBaseAndBitshift+0xa8>
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	4a39      	ldr	r2, [pc, #228]	@ (8008650 <DMA_CalcBaseAndBitshift+0x130>)
 800856a:	4293      	cmp	r3, r2
 800856c:	d02c      	beq.n	80085c8 <DMA_CalcBaseAndBitshift+0xa8>
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	4a38      	ldr	r2, [pc, #224]	@ (8008654 <DMA_CalcBaseAndBitshift+0x134>)
 8008574:	4293      	cmp	r3, r2
 8008576:	d027      	beq.n	80085c8 <DMA_CalcBaseAndBitshift+0xa8>
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	4a36      	ldr	r2, [pc, #216]	@ (8008658 <DMA_CalcBaseAndBitshift+0x138>)
 800857e:	4293      	cmp	r3, r2
 8008580:	d022      	beq.n	80085c8 <DMA_CalcBaseAndBitshift+0xa8>
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	4a35      	ldr	r2, [pc, #212]	@ (800865c <DMA_CalcBaseAndBitshift+0x13c>)
 8008588:	4293      	cmp	r3, r2
 800858a:	d01d      	beq.n	80085c8 <DMA_CalcBaseAndBitshift+0xa8>
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	4a33      	ldr	r2, [pc, #204]	@ (8008660 <DMA_CalcBaseAndBitshift+0x140>)
 8008592:	4293      	cmp	r3, r2
 8008594:	d018      	beq.n	80085c8 <DMA_CalcBaseAndBitshift+0xa8>
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	4a32      	ldr	r2, [pc, #200]	@ (8008664 <DMA_CalcBaseAndBitshift+0x144>)
 800859c:	4293      	cmp	r3, r2
 800859e:	d013      	beq.n	80085c8 <DMA_CalcBaseAndBitshift+0xa8>
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	4a30      	ldr	r2, [pc, #192]	@ (8008668 <DMA_CalcBaseAndBitshift+0x148>)
 80085a6:	4293      	cmp	r3, r2
 80085a8:	d00e      	beq.n	80085c8 <DMA_CalcBaseAndBitshift+0xa8>
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	4a2f      	ldr	r2, [pc, #188]	@ (800866c <DMA_CalcBaseAndBitshift+0x14c>)
 80085b0:	4293      	cmp	r3, r2
 80085b2:	d009      	beq.n	80085c8 <DMA_CalcBaseAndBitshift+0xa8>
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	4a2d      	ldr	r2, [pc, #180]	@ (8008670 <DMA_CalcBaseAndBitshift+0x150>)
 80085ba:	4293      	cmp	r3, r2
 80085bc:	d004      	beq.n	80085c8 <DMA_CalcBaseAndBitshift+0xa8>
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	4a2c      	ldr	r2, [pc, #176]	@ (8008674 <DMA_CalcBaseAndBitshift+0x154>)
 80085c4:	4293      	cmp	r3, r2
 80085c6:	d101      	bne.n	80085cc <DMA_CalcBaseAndBitshift+0xac>
 80085c8:	2301      	movs	r3, #1
 80085ca:	e000      	b.n	80085ce <DMA_CalcBaseAndBitshift+0xae>
 80085cc:	2300      	movs	r3, #0
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d024      	beq.n	800861c <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	b2db      	uxtb	r3, r3
 80085d8:	3b10      	subs	r3, #16
 80085da:	4a27      	ldr	r2, [pc, #156]	@ (8008678 <DMA_CalcBaseAndBitshift+0x158>)
 80085dc:	fba2 2303 	umull	r2, r3, r2, r3
 80085e0:	091b      	lsrs	r3, r3, #4
 80085e2:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	f003 0307 	and.w	r3, r3, #7
 80085ea:	4a24      	ldr	r2, [pc, #144]	@ (800867c <DMA_CalcBaseAndBitshift+0x15c>)
 80085ec:	5cd3      	ldrb	r3, [r2, r3]
 80085ee:	461a      	mov	r2, r3
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	2b03      	cmp	r3, #3
 80085f8:	d908      	bls.n	800860c <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	461a      	mov	r2, r3
 8008600:	4b1f      	ldr	r3, [pc, #124]	@ (8008680 <DMA_CalcBaseAndBitshift+0x160>)
 8008602:	4013      	ands	r3, r2
 8008604:	1d1a      	adds	r2, r3, #4
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	659a      	str	r2, [r3, #88]	@ 0x58
 800860a:	e00d      	b.n	8008628 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	461a      	mov	r2, r3
 8008612:	4b1b      	ldr	r3, [pc, #108]	@ (8008680 <DMA_CalcBaseAndBitshift+0x160>)
 8008614:	4013      	ands	r3, r2
 8008616:	687a      	ldr	r2, [r7, #4]
 8008618:	6593      	str	r3, [r2, #88]	@ 0x58
 800861a:	e005      	b.n	8008628 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800862c:	4618      	mov	r0, r3
 800862e:	3714      	adds	r7, #20
 8008630:	46bd      	mov	sp, r7
 8008632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008636:	4770      	bx	lr
 8008638:	40020010 	.word	0x40020010
 800863c:	40020028 	.word	0x40020028
 8008640:	40020040 	.word	0x40020040
 8008644:	40020058 	.word	0x40020058
 8008648:	40020070 	.word	0x40020070
 800864c:	40020088 	.word	0x40020088
 8008650:	400200a0 	.word	0x400200a0
 8008654:	400200b8 	.word	0x400200b8
 8008658:	40020410 	.word	0x40020410
 800865c:	40020428 	.word	0x40020428
 8008660:	40020440 	.word	0x40020440
 8008664:	40020458 	.word	0x40020458
 8008668:	40020470 	.word	0x40020470
 800866c:	40020488 	.word	0x40020488
 8008670:	400204a0 	.word	0x400204a0
 8008674:	400204b8 	.word	0x400204b8
 8008678:	aaaaaaab 	.word	0xaaaaaaab
 800867c:	08014ba8 	.word	0x08014ba8
 8008680:	fffffc00 	.word	0xfffffc00

08008684 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8008684:	b480      	push	{r7}
 8008686:	b085      	sub	sp, #20
 8008688:	af00      	add	r7, sp, #0
 800868a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800868c:	2300      	movs	r3, #0
 800868e:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	699b      	ldr	r3, [r3, #24]
 8008694:	2b00      	cmp	r3, #0
 8008696:	d120      	bne.n	80086da <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800869c:	2b03      	cmp	r3, #3
 800869e:	d858      	bhi.n	8008752 <DMA_CheckFifoParam+0xce>
 80086a0:	a201      	add	r2, pc, #4	@ (adr r2, 80086a8 <DMA_CheckFifoParam+0x24>)
 80086a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086a6:	bf00      	nop
 80086a8:	080086b9 	.word	0x080086b9
 80086ac:	080086cb 	.word	0x080086cb
 80086b0:	080086b9 	.word	0x080086b9
 80086b4:	08008753 	.word	0x08008753
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80086bc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d048      	beq.n	8008756 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80086c4:	2301      	movs	r3, #1
 80086c6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80086c8:	e045      	b.n	8008756 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80086ce:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80086d2:	d142      	bne.n	800875a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80086d4:	2301      	movs	r3, #1
 80086d6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80086d8:	e03f      	b.n	800875a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	699b      	ldr	r3, [r3, #24]
 80086de:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80086e2:	d123      	bne.n	800872c <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80086e8:	2b03      	cmp	r3, #3
 80086ea:	d838      	bhi.n	800875e <DMA_CheckFifoParam+0xda>
 80086ec:	a201      	add	r2, pc, #4	@ (adr r2, 80086f4 <DMA_CheckFifoParam+0x70>)
 80086ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086f2:	bf00      	nop
 80086f4:	08008705 	.word	0x08008705
 80086f8:	0800870b 	.word	0x0800870b
 80086fc:	08008705 	.word	0x08008705
 8008700:	0800871d 	.word	0x0800871d
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8008704:	2301      	movs	r3, #1
 8008706:	73fb      	strb	r3, [r7, #15]
        break;
 8008708:	e030      	b.n	800876c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800870e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008712:	2b00      	cmp	r3, #0
 8008714:	d025      	beq.n	8008762 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8008716:	2301      	movs	r3, #1
 8008718:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800871a:	e022      	b.n	8008762 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008720:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8008724:	d11f      	bne.n	8008766 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8008726:	2301      	movs	r3, #1
 8008728:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800872a:	e01c      	b.n	8008766 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008730:	2b02      	cmp	r3, #2
 8008732:	d902      	bls.n	800873a <DMA_CheckFifoParam+0xb6>
 8008734:	2b03      	cmp	r3, #3
 8008736:	d003      	beq.n	8008740 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8008738:	e018      	b.n	800876c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800873a:	2301      	movs	r3, #1
 800873c:	73fb      	strb	r3, [r7, #15]
        break;
 800873e:	e015      	b.n	800876c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008744:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008748:	2b00      	cmp	r3, #0
 800874a:	d00e      	beq.n	800876a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 800874c:	2301      	movs	r3, #1
 800874e:	73fb      	strb	r3, [r7, #15]
    break;
 8008750:	e00b      	b.n	800876a <DMA_CheckFifoParam+0xe6>
        break;
 8008752:	bf00      	nop
 8008754:	e00a      	b.n	800876c <DMA_CheckFifoParam+0xe8>
        break;
 8008756:	bf00      	nop
 8008758:	e008      	b.n	800876c <DMA_CheckFifoParam+0xe8>
        break;
 800875a:	bf00      	nop
 800875c:	e006      	b.n	800876c <DMA_CheckFifoParam+0xe8>
        break;
 800875e:	bf00      	nop
 8008760:	e004      	b.n	800876c <DMA_CheckFifoParam+0xe8>
        break;
 8008762:	bf00      	nop
 8008764:	e002      	b.n	800876c <DMA_CheckFifoParam+0xe8>
        break;
 8008766:	bf00      	nop
 8008768:	e000      	b.n	800876c <DMA_CheckFifoParam+0xe8>
    break;
 800876a:	bf00      	nop
    }
  }

  return status;
 800876c:	7bfb      	ldrb	r3, [r7, #15]
}
 800876e:	4618      	mov	r0, r3
 8008770:	3714      	adds	r7, #20
 8008772:	46bd      	mov	sp, r7
 8008774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008778:	4770      	bx	lr
 800877a:	bf00      	nop

0800877c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800877c:	b480      	push	{r7}
 800877e:	b085      	sub	sp, #20
 8008780:	af00      	add	r7, sp, #0
 8008782:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	4a38      	ldr	r2, [pc, #224]	@ (8008870 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8008790:	4293      	cmp	r3, r2
 8008792:	d022      	beq.n	80087da <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	4a36      	ldr	r2, [pc, #216]	@ (8008874 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800879a:	4293      	cmp	r3, r2
 800879c:	d01d      	beq.n	80087da <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	4a35      	ldr	r2, [pc, #212]	@ (8008878 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80087a4:	4293      	cmp	r3, r2
 80087a6:	d018      	beq.n	80087da <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	4a33      	ldr	r2, [pc, #204]	@ (800887c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80087ae:	4293      	cmp	r3, r2
 80087b0:	d013      	beq.n	80087da <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	4a32      	ldr	r2, [pc, #200]	@ (8008880 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80087b8:	4293      	cmp	r3, r2
 80087ba:	d00e      	beq.n	80087da <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	4a30      	ldr	r2, [pc, #192]	@ (8008884 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80087c2:	4293      	cmp	r3, r2
 80087c4:	d009      	beq.n	80087da <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	4a2f      	ldr	r2, [pc, #188]	@ (8008888 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80087cc:	4293      	cmp	r3, r2
 80087ce:	d004      	beq.n	80087da <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	4a2d      	ldr	r2, [pc, #180]	@ (800888c <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80087d6:	4293      	cmp	r3, r2
 80087d8:	d101      	bne.n	80087de <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80087da:	2301      	movs	r3, #1
 80087dc:	e000      	b.n	80087e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80087de:	2300      	movs	r3, #0
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d01a      	beq.n	800881a <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	b2db      	uxtb	r3, r3
 80087ea:	3b08      	subs	r3, #8
 80087ec:	4a28      	ldr	r2, [pc, #160]	@ (8008890 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80087ee:	fba2 2303 	umull	r2, r3, r2, r3
 80087f2:	091b      	lsrs	r3, r3, #4
 80087f4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80087f6:	68fa      	ldr	r2, [r7, #12]
 80087f8:	4b26      	ldr	r3, [pc, #152]	@ (8008894 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80087fa:	4413      	add	r3, r2
 80087fc:	009b      	lsls	r3, r3, #2
 80087fe:	461a      	mov	r2, r3
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	4a24      	ldr	r2, [pc, #144]	@ (8008898 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8008808:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	f003 031f 	and.w	r3, r3, #31
 8008810:	2201      	movs	r2, #1
 8008812:	409a      	lsls	r2, r3
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8008818:	e024      	b.n	8008864 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	b2db      	uxtb	r3, r3
 8008820:	3b10      	subs	r3, #16
 8008822:	4a1e      	ldr	r2, [pc, #120]	@ (800889c <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8008824:	fba2 2303 	umull	r2, r3, r2, r3
 8008828:	091b      	lsrs	r3, r3, #4
 800882a:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800882c:	68bb      	ldr	r3, [r7, #8]
 800882e:	4a1c      	ldr	r2, [pc, #112]	@ (80088a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8008830:	4293      	cmp	r3, r2
 8008832:	d806      	bhi.n	8008842 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8008834:	68bb      	ldr	r3, [r7, #8]
 8008836:	4a1b      	ldr	r2, [pc, #108]	@ (80088a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8008838:	4293      	cmp	r3, r2
 800883a:	d902      	bls.n	8008842 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	3308      	adds	r3, #8
 8008840:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8008842:	68fa      	ldr	r2, [r7, #12]
 8008844:	4b18      	ldr	r3, [pc, #96]	@ (80088a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8008846:	4413      	add	r3, r2
 8008848:	009b      	lsls	r3, r3, #2
 800884a:	461a      	mov	r2, r3
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	4a16      	ldr	r2, [pc, #88]	@ (80088ac <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8008854:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	f003 031f 	and.w	r3, r3, #31
 800885c:	2201      	movs	r2, #1
 800885e:	409a      	lsls	r2, r3
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8008864:	bf00      	nop
 8008866:	3714      	adds	r7, #20
 8008868:	46bd      	mov	sp, r7
 800886a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800886e:	4770      	bx	lr
 8008870:	58025408 	.word	0x58025408
 8008874:	5802541c 	.word	0x5802541c
 8008878:	58025430 	.word	0x58025430
 800887c:	58025444 	.word	0x58025444
 8008880:	58025458 	.word	0x58025458
 8008884:	5802546c 	.word	0x5802546c
 8008888:	58025480 	.word	0x58025480
 800888c:	58025494 	.word	0x58025494
 8008890:	cccccccd 	.word	0xcccccccd
 8008894:	16009600 	.word	0x16009600
 8008898:	58025880 	.word	0x58025880
 800889c:	aaaaaaab 	.word	0xaaaaaaab
 80088a0:	400204b8 	.word	0x400204b8
 80088a4:	4002040f 	.word	0x4002040f
 80088a8:	10008200 	.word	0x10008200
 80088ac:	40020880 	.word	0x40020880

080088b0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80088b0:	b480      	push	{r7}
 80088b2:	b085      	sub	sp, #20
 80088b4:	af00      	add	r7, sp, #0
 80088b6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	685b      	ldr	r3, [r3, #4]
 80088bc:	b2db      	uxtb	r3, r3
 80088be:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d04a      	beq.n	800895c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	2b08      	cmp	r3, #8
 80088ca:	d847      	bhi.n	800895c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	4a25      	ldr	r2, [pc, #148]	@ (8008968 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80088d2:	4293      	cmp	r3, r2
 80088d4:	d022      	beq.n	800891c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	4a24      	ldr	r2, [pc, #144]	@ (800896c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80088dc:	4293      	cmp	r3, r2
 80088de:	d01d      	beq.n	800891c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	4a22      	ldr	r2, [pc, #136]	@ (8008970 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80088e6:	4293      	cmp	r3, r2
 80088e8:	d018      	beq.n	800891c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	4a21      	ldr	r2, [pc, #132]	@ (8008974 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80088f0:	4293      	cmp	r3, r2
 80088f2:	d013      	beq.n	800891c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	4a1f      	ldr	r2, [pc, #124]	@ (8008978 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80088fa:	4293      	cmp	r3, r2
 80088fc:	d00e      	beq.n	800891c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	4a1e      	ldr	r2, [pc, #120]	@ (800897c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8008904:	4293      	cmp	r3, r2
 8008906:	d009      	beq.n	800891c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	4a1c      	ldr	r2, [pc, #112]	@ (8008980 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800890e:	4293      	cmp	r3, r2
 8008910:	d004      	beq.n	800891c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	4a1b      	ldr	r2, [pc, #108]	@ (8008984 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8008918:	4293      	cmp	r3, r2
 800891a:	d101      	bne.n	8008920 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 800891c:	2301      	movs	r3, #1
 800891e:	e000      	b.n	8008922 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8008920:	2300      	movs	r3, #0
 8008922:	2b00      	cmp	r3, #0
 8008924:	d00a      	beq.n	800893c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8008926:	68fa      	ldr	r2, [r7, #12]
 8008928:	4b17      	ldr	r3, [pc, #92]	@ (8008988 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800892a:	4413      	add	r3, r2
 800892c:	009b      	lsls	r3, r3, #2
 800892e:	461a      	mov	r2, r3
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	4a15      	ldr	r2, [pc, #84]	@ (800898c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8008938:	671a      	str	r2, [r3, #112]	@ 0x70
 800893a:	e009      	b.n	8008950 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800893c:	68fa      	ldr	r2, [r7, #12]
 800893e:	4b14      	ldr	r3, [pc, #80]	@ (8008990 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8008940:	4413      	add	r3, r2
 8008942:	009b      	lsls	r3, r3, #2
 8008944:	461a      	mov	r2, r3
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	4a11      	ldr	r2, [pc, #68]	@ (8008994 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800894e:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	3b01      	subs	r3, #1
 8008954:	2201      	movs	r2, #1
 8008956:	409a      	lsls	r2, r3
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 800895c:	bf00      	nop
 800895e:	3714      	adds	r7, #20
 8008960:	46bd      	mov	sp, r7
 8008962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008966:	4770      	bx	lr
 8008968:	58025408 	.word	0x58025408
 800896c:	5802541c 	.word	0x5802541c
 8008970:	58025430 	.word	0x58025430
 8008974:	58025444 	.word	0x58025444
 8008978:	58025458 	.word	0x58025458
 800897c:	5802546c 	.word	0x5802546c
 8008980:	58025480 	.word	0x58025480
 8008984:	58025494 	.word	0x58025494
 8008988:	1600963f 	.word	0x1600963f
 800898c:	58025940 	.word	0x58025940
 8008990:	1000823f 	.word	0x1000823f
 8008994:	40020940 	.word	0x40020940

08008998 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008998:	b480      	push	{r7}
 800899a:	b089      	sub	sp, #36	@ 0x24
 800899c:	af00      	add	r7, sp, #0
 800899e:	6078      	str	r0, [r7, #4]
 80089a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80089a2:	2300      	movs	r3, #0
 80089a4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80089a6:	4b89      	ldr	r3, [pc, #548]	@ (8008bcc <HAL_GPIO_Init+0x234>)
 80089a8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80089aa:	e194      	b.n	8008cd6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80089ac:	683b      	ldr	r3, [r7, #0]
 80089ae:	681a      	ldr	r2, [r3, #0]
 80089b0:	2101      	movs	r1, #1
 80089b2:	69fb      	ldr	r3, [r7, #28]
 80089b4:	fa01 f303 	lsl.w	r3, r1, r3
 80089b8:	4013      	ands	r3, r2
 80089ba:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80089bc:	693b      	ldr	r3, [r7, #16]
 80089be:	2b00      	cmp	r3, #0
 80089c0:	f000 8186 	beq.w	8008cd0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80089c4:	683b      	ldr	r3, [r7, #0]
 80089c6:	685b      	ldr	r3, [r3, #4]
 80089c8:	f003 0303 	and.w	r3, r3, #3
 80089cc:	2b01      	cmp	r3, #1
 80089ce:	d005      	beq.n	80089dc <HAL_GPIO_Init+0x44>
 80089d0:	683b      	ldr	r3, [r7, #0]
 80089d2:	685b      	ldr	r3, [r3, #4]
 80089d4:	f003 0303 	and.w	r3, r3, #3
 80089d8:	2b02      	cmp	r3, #2
 80089da:	d130      	bne.n	8008a3e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	689b      	ldr	r3, [r3, #8]
 80089e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80089e2:	69fb      	ldr	r3, [r7, #28]
 80089e4:	005b      	lsls	r3, r3, #1
 80089e6:	2203      	movs	r2, #3
 80089e8:	fa02 f303 	lsl.w	r3, r2, r3
 80089ec:	43db      	mvns	r3, r3
 80089ee:	69ba      	ldr	r2, [r7, #24]
 80089f0:	4013      	ands	r3, r2
 80089f2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80089f4:	683b      	ldr	r3, [r7, #0]
 80089f6:	68da      	ldr	r2, [r3, #12]
 80089f8:	69fb      	ldr	r3, [r7, #28]
 80089fa:	005b      	lsls	r3, r3, #1
 80089fc:	fa02 f303 	lsl.w	r3, r2, r3
 8008a00:	69ba      	ldr	r2, [r7, #24]
 8008a02:	4313      	orrs	r3, r2
 8008a04:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	69ba      	ldr	r2, [r7, #24]
 8008a0a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	685b      	ldr	r3, [r3, #4]
 8008a10:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8008a12:	2201      	movs	r2, #1
 8008a14:	69fb      	ldr	r3, [r7, #28]
 8008a16:	fa02 f303 	lsl.w	r3, r2, r3
 8008a1a:	43db      	mvns	r3, r3
 8008a1c:	69ba      	ldr	r2, [r7, #24]
 8008a1e:	4013      	ands	r3, r2
 8008a20:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008a22:	683b      	ldr	r3, [r7, #0]
 8008a24:	685b      	ldr	r3, [r3, #4]
 8008a26:	091b      	lsrs	r3, r3, #4
 8008a28:	f003 0201 	and.w	r2, r3, #1
 8008a2c:	69fb      	ldr	r3, [r7, #28]
 8008a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8008a32:	69ba      	ldr	r2, [r7, #24]
 8008a34:	4313      	orrs	r3, r2
 8008a36:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	69ba      	ldr	r2, [r7, #24]
 8008a3c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008a3e:	683b      	ldr	r3, [r7, #0]
 8008a40:	685b      	ldr	r3, [r3, #4]
 8008a42:	f003 0303 	and.w	r3, r3, #3
 8008a46:	2b03      	cmp	r3, #3
 8008a48:	d017      	beq.n	8008a7a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	68db      	ldr	r3, [r3, #12]
 8008a4e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8008a50:	69fb      	ldr	r3, [r7, #28]
 8008a52:	005b      	lsls	r3, r3, #1
 8008a54:	2203      	movs	r2, #3
 8008a56:	fa02 f303 	lsl.w	r3, r2, r3
 8008a5a:	43db      	mvns	r3, r3
 8008a5c:	69ba      	ldr	r2, [r7, #24]
 8008a5e:	4013      	ands	r3, r2
 8008a60:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008a62:	683b      	ldr	r3, [r7, #0]
 8008a64:	689a      	ldr	r2, [r3, #8]
 8008a66:	69fb      	ldr	r3, [r7, #28]
 8008a68:	005b      	lsls	r3, r3, #1
 8008a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8008a6e:	69ba      	ldr	r2, [r7, #24]
 8008a70:	4313      	orrs	r3, r2
 8008a72:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	69ba      	ldr	r2, [r7, #24]
 8008a78:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008a7a:	683b      	ldr	r3, [r7, #0]
 8008a7c:	685b      	ldr	r3, [r3, #4]
 8008a7e:	f003 0303 	and.w	r3, r3, #3
 8008a82:	2b02      	cmp	r3, #2
 8008a84:	d123      	bne.n	8008ace <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8008a86:	69fb      	ldr	r3, [r7, #28]
 8008a88:	08da      	lsrs	r2, r3, #3
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	3208      	adds	r2, #8
 8008a8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a92:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8008a94:	69fb      	ldr	r3, [r7, #28]
 8008a96:	f003 0307 	and.w	r3, r3, #7
 8008a9a:	009b      	lsls	r3, r3, #2
 8008a9c:	220f      	movs	r2, #15
 8008a9e:	fa02 f303 	lsl.w	r3, r2, r3
 8008aa2:	43db      	mvns	r3, r3
 8008aa4:	69ba      	ldr	r2, [r7, #24]
 8008aa6:	4013      	ands	r3, r2
 8008aa8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8008aaa:	683b      	ldr	r3, [r7, #0]
 8008aac:	691a      	ldr	r2, [r3, #16]
 8008aae:	69fb      	ldr	r3, [r7, #28]
 8008ab0:	f003 0307 	and.w	r3, r3, #7
 8008ab4:	009b      	lsls	r3, r3, #2
 8008ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8008aba:	69ba      	ldr	r2, [r7, #24]
 8008abc:	4313      	orrs	r3, r2
 8008abe:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8008ac0:	69fb      	ldr	r3, [r7, #28]
 8008ac2:	08da      	lsrs	r2, r3, #3
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	3208      	adds	r2, #8
 8008ac8:	69b9      	ldr	r1, [r7, #24]
 8008aca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8008ad4:	69fb      	ldr	r3, [r7, #28]
 8008ad6:	005b      	lsls	r3, r3, #1
 8008ad8:	2203      	movs	r2, #3
 8008ada:	fa02 f303 	lsl.w	r3, r2, r3
 8008ade:	43db      	mvns	r3, r3
 8008ae0:	69ba      	ldr	r2, [r7, #24]
 8008ae2:	4013      	ands	r3, r2
 8008ae4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008ae6:	683b      	ldr	r3, [r7, #0]
 8008ae8:	685b      	ldr	r3, [r3, #4]
 8008aea:	f003 0203 	and.w	r2, r3, #3
 8008aee:	69fb      	ldr	r3, [r7, #28]
 8008af0:	005b      	lsls	r3, r3, #1
 8008af2:	fa02 f303 	lsl.w	r3, r2, r3
 8008af6:	69ba      	ldr	r2, [r7, #24]
 8008af8:	4313      	orrs	r3, r2
 8008afa:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	69ba      	ldr	r2, [r7, #24]
 8008b00:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8008b02:	683b      	ldr	r3, [r7, #0]
 8008b04:	685b      	ldr	r3, [r3, #4]
 8008b06:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	f000 80e0 	beq.w	8008cd0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008b10:	4b2f      	ldr	r3, [pc, #188]	@ (8008bd0 <HAL_GPIO_Init+0x238>)
 8008b12:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8008b16:	4a2e      	ldr	r2, [pc, #184]	@ (8008bd0 <HAL_GPIO_Init+0x238>)
 8008b18:	f043 0302 	orr.w	r3, r3, #2
 8008b1c:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8008b20:	4b2b      	ldr	r3, [pc, #172]	@ (8008bd0 <HAL_GPIO_Init+0x238>)
 8008b22:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8008b26:	f003 0302 	and.w	r3, r3, #2
 8008b2a:	60fb      	str	r3, [r7, #12]
 8008b2c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8008b2e:	4a29      	ldr	r2, [pc, #164]	@ (8008bd4 <HAL_GPIO_Init+0x23c>)
 8008b30:	69fb      	ldr	r3, [r7, #28]
 8008b32:	089b      	lsrs	r3, r3, #2
 8008b34:	3302      	adds	r3, #2
 8008b36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008b3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8008b3c:	69fb      	ldr	r3, [r7, #28]
 8008b3e:	f003 0303 	and.w	r3, r3, #3
 8008b42:	009b      	lsls	r3, r3, #2
 8008b44:	220f      	movs	r2, #15
 8008b46:	fa02 f303 	lsl.w	r3, r2, r3
 8008b4a:	43db      	mvns	r3, r3
 8008b4c:	69ba      	ldr	r2, [r7, #24]
 8008b4e:	4013      	ands	r3, r2
 8008b50:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	4a20      	ldr	r2, [pc, #128]	@ (8008bd8 <HAL_GPIO_Init+0x240>)
 8008b56:	4293      	cmp	r3, r2
 8008b58:	d052      	beq.n	8008c00 <HAL_GPIO_Init+0x268>
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	4a1f      	ldr	r2, [pc, #124]	@ (8008bdc <HAL_GPIO_Init+0x244>)
 8008b5e:	4293      	cmp	r3, r2
 8008b60:	d031      	beq.n	8008bc6 <HAL_GPIO_Init+0x22e>
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	4a1e      	ldr	r2, [pc, #120]	@ (8008be0 <HAL_GPIO_Init+0x248>)
 8008b66:	4293      	cmp	r3, r2
 8008b68:	d02b      	beq.n	8008bc2 <HAL_GPIO_Init+0x22a>
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	4a1d      	ldr	r2, [pc, #116]	@ (8008be4 <HAL_GPIO_Init+0x24c>)
 8008b6e:	4293      	cmp	r3, r2
 8008b70:	d025      	beq.n	8008bbe <HAL_GPIO_Init+0x226>
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	4a1c      	ldr	r2, [pc, #112]	@ (8008be8 <HAL_GPIO_Init+0x250>)
 8008b76:	4293      	cmp	r3, r2
 8008b78:	d01f      	beq.n	8008bba <HAL_GPIO_Init+0x222>
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	4a1b      	ldr	r2, [pc, #108]	@ (8008bec <HAL_GPIO_Init+0x254>)
 8008b7e:	4293      	cmp	r3, r2
 8008b80:	d019      	beq.n	8008bb6 <HAL_GPIO_Init+0x21e>
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	4a1a      	ldr	r2, [pc, #104]	@ (8008bf0 <HAL_GPIO_Init+0x258>)
 8008b86:	4293      	cmp	r3, r2
 8008b88:	d013      	beq.n	8008bb2 <HAL_GPIO_Init+0x21a>
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	4a19      	ldr	r2, [pc, #100]	@ (8008bf4 <HAL_GPIO_Init+0x25c>)
 8008b8e:	4293      	cmp	r3, r2
 8008b90:	d00d      	beq.n	8008bae <HAL_GPIO_Init+0x216>
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	4a18      	ldr	r2, [pc, #96]	@ (8008bf8 <HAL_GPIO_Init+0x260>)
 8008b96:	4293      	cmp	r3, r2
 8008b98:	d007      	beq.n	8008baa <HAL_GPIO_Init+0x212>
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	4a17      	ldr	r2, [pc, #92]	@ (8008bfc <HAL_GPIO_Init+0x264>)
 8008b9e:	4293      	cmp	r3, r2
 8008ba0:	d101      	bne.n	8008ba6 <HAL_GPIO_Init+0x20e>
 8008ba2:	2309      	movs	r3, #9
 8008ba4:	e02d      	b.n	8008c02 <HAL_GPIO_Init+0x26a>
 8008ba6:	230a      	movs	r3, #10
 8008ba8:	e02b      	b.n	8008c02 <HAL_GPIO_Init+0x26a>
 8008baa:	2308      	movs	r3, #8
 8008bac:	e029      	b.n	8008c02 <HAL_GPIO_Init+0x26a>
 8008bae:	2307      	movs	r3, #7
 8008bb0:	e027      	b.n	8008c02 <HAL_GPIO_Init+0x26a>
 8008bb2:	2306      	movs	r3, #6
 8008bb4:	e025      	b.n	8008c02 <HAL_GPIO_Init+0x26a>
 8008bb6:	2305      	movs	r3, #5
 8008bb8:	e023      	b.n	8008c02 <HAL_GPIO_Init+0x26a>
 8008bba:	2304      	movs	r3, #4
 8008bbc:	e021      	b.n	8008c02 <HAL_GPIO_Init+0x26a>
 8008bbe:	2303      	movs	r3, #3
 8008bc0:	e01f      	b.n	8008c02 <HAL_GPIO_Init+0x26a>
 8008bc2:	2302      	movs	r3, #2
 8008bc4:	e01d      	b.n	8008c02 <HAL_GPIO_Init+0x26a>
 8008bc6:	2301      	movs	r3, #1
 8008bc8:	e01b      	b.n	8008c02 <HAL_GPIO_Init+0x26a>
 8008bca:	bf00      	nop
 8008bcc:	58000080 	.word	0x58000080
 8008bd0:	58024400 	.word	0x58024400
 8008bd4:	58000400 	.word	0x58000400
 8008bd8:	58020000 	.word	0x58020000
 8008bdc:	58020400 	.word	0x58020400
 8008be0:	58020800 	.word	0x58020800
 8008be4:	58020c00 	.word	0x58020c00
 8008be8:	58021000 	.word	0x58021000
 8008bec:	58021400 	.word	0x58021400
 8008bf0:	58021800 	.word	0x58021800
 8008bf4:	58021c00 	.word	0x58021c00
 8008bf8:	58022000 	.word	0x58022000
 8008bfc:	58022400 	.word	0x58022400
 8008c00:	2300      	movs	r3, #0
 8008c02:	69fa      	ldr	r2, [r7, #28]
 8008c04:	f002 0203 	and.w	r2, r2, #3
 8008c08:	0092      	lsls	r2, r2, #2
 8008c0a:	4093      	lsls	r3, r2
 8008c0c:	69ba      	ldr	r2, [r7, #24]
 8008c0e:	4313      	orrs	r3, r2
 8008c10:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8008c12:	4938      	ldr	r1, [pc, #224]	@ (8008cf4 <HAL_GPIO_Init+0x35c>)
 8008c14:	69fb      	ldr	r3, [r7, #28]
 8008c16:	089b      	lsrs	r3, r3, #2
 8008c18:	3302      	adds	r3, #2
 8008c1a:	69ba      	ldr	r2, [r7, #24]
 8008c1c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8008c20:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008c28:	693b      	ldr	r3, [r7, #16]
 8008c2a:	43db      	mvns	r3, r3
 8008c2c:	69ba      	ldr	r2, [r7, #24]
 8008c2e:	4013      	ands	r3, r2
 8008c30:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8008c32:	683b      	ldr	r3, [r7, #0]
 8008c34:	685b      	ldr	r3, [r3, #4]
 8008c36:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d003      	beq.n	8008c46 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8008c3e:	69ba      	ldr	r2, [r7, #24]
 8008c40:	693b      	ldr	r3, [r7, #16]
 8008c42:	4313      	orrs	r3, r2
 8008c44:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8008c46:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8008c4a:	69bb      	ldr	r3, [r7, #24]
 8008c4c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8008c4e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008c52:	685b      	ldr	r3, [r3, #4]
 8008c54:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008c56:	693b      	ldr	r3, [r7, #16]
 8008c58:	43db      	mvns	r3, r3
 8008c5a:	69ba      	ldr	r2, [r7, #24]
 8008c5c:	4013      	ands	r3, r2
 8008c5e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8008c60:	683b      	ldr	r3, [r7, #0]
 8008c62:	685b      	ldr	r3, [r3, #4]
 8008c64:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d003      	beq.n	8008c74 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8008c6c:	69ba      	ldr	r2, [r7, #24]
 8008c6e:	693b      	ldr	r3, [r7, #16]
 8008c70:	4313      	orrs	r3, r2
 8008c72:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8008c74:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8008c78:	69bb      	ldr	r3, [r7, #24]
 8008c7a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8008c7c:	697b      	ldr	r3, [r7, #20]
 8008c7e:	685b      	ldr	r3, [r3, #4]
 8008c80:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008c82:	693b      	ldr	r3, [r7, #16]
 8008c84:	43db      	mvns	r3, r3
 8008c86:	69ba      	ldr	r2, [r7, #24]
 8008c88:	4013      	ands	r3, r2
 8008c8a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8008c8c:	683b      	ldr	r3, [r7, #0]
 8008c8e:	685b      	ldr	r3, [r3, #4]
 8008c90:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d003      	beq.n	8008ca0 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8008c98:	69ba      	ldr	r2, [r7, #24]
 8008c9a:	693b      	ldr	r3, [r7, #16]
 8008c9c:	4313      	orrs	r3, r2
 8008c9e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8008ca0:	697b      	ldr	r3, [r7, #20]
 8008ca2:	69ba      	ldr	r2, [r7, #24]
 8008ca4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8008ca6:	697b      	ldr	r3, [r7, #20]
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008cac:	693b      	ldr	r3, [r7, #16]
 8008cae:	43db      	mvns	r3, r3
 8008cb0:	69ba      	ldr	r2, [r7, #24]
 8008cb2:	4013      	ands	r3, r2
 8008cb4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8008cb6:	683b      	ldr	r3, [r7, #0]
 8008cb8:	685b      	ldr	r3, [r3, #4]
 8008cba:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d003      	beq.n	8008cca <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8008cc2:	69ba      	ldr	r2, [r7, #24]
 8008cc4:	693b      	ldr	r3, [r7, #16]
 8008cc6:	4313      	orrs	r3, r2
 8008cc8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8008cca:	697b      	ldr	r3, [r7, #20]
 8008ccc:	69ba      	ldr	r2, [r7, #24]
 8008cce:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8008cd0:	69fb      	ldr	r3, [r7, #28]
 8008cd2:	3301      	adds	r3, #1
 8008cd4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8008cd6:	683b      	ldr	r3, [r7, #0]
 8008cd8:	681a      	ldr	r2, [r3, #0]
 8008cda:	69fb      	ldr	r3, [r7, #28]
 8008cdc:	fa22 f303 	lsr.w	r3, r2, r3
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	f47f ae63 	bne.w	80089ac <HAL_GPIO_Init+0x14>
  }
}
 8008ce6:	bf00      	nop
 8008ce8:	bf00      	nop
 8008cea:	3724      	adds	r7, #36	@ 0x24
 8008cec:	46bd      	mov	sp, r7
 8008cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cf2:	4770      	bx	lr
 8008cf4:	58000400 	.word	0x58000400

08008cf8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008cf8:	b480      	push	{r7}
 8008cfa:	b083      	sub	sp, #12
 8008cfc:	af00      	add	r7, sp, #0
 8008cfe:	6078      	str	r0, [r7, #4]
 8008d00:	460b      	mov	r3, r1
 8008d02:	807b      	strh	r3, [r7, #2]
 8008d04:	4613      	mov	r3, r2
 8008d06:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008d08:	787b      	ldrb	r3, [r7, #1]
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d003      	beq.n	8008d16 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008d0e:	887a      	ldrh	r2, [r7, #2]
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8008d14:	e003      	b.n	8008d1e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8008d16:	887b      	ldrh	r3, [r7, #2]
 8008d18:	041a      	lsls	r2, r3, #16
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	619a      	str	r2, [r3, #24]
}
 8008d1e:	bf00      	nop
 8008d20:	370c      	adds	r7, #12
 8008d22:	46bd      	mov	sp, r7
 8008d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d28:	4770      	bx	lr
	...

08008d2c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8008d2c:	b580      	push	{r7, lr}
 8008d2e:	b084      	sub	sp, #16
 8008d30:	af00      	add	r7, sp, #0
 8008d32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8008d34:	4b19      	ldr	r3, [pc, #100]	@ (8008d9c <HAL_PWREx_ConfigSupply+0x70>)
 8008d36:	68db      	ldr	r3, [r3, #12]
 8008d38:	f003 0304 	and.w	r3, r3, #4
 8008d3c:	2b04      	cmp	r3, #4
 8008d3e:	d00a      	beq.n	8008d56 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8008d40:	4b16      	ldr	r3, [pc, #88]	@ (8008d9c <HAL_PWREx_ConfigSupply+0x70>)
 8008d42:	68db      	ldr	r3, [r3, #12]
 8008d44:	f003 0307 	and.w	r3, r3, #7
 8008d48:	687a      	ldr	r2, [r7, #4]
 8008d4a:	429a      	cmp	r2, r3
 8008d4c:	d001      	beq.n	8008d52 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8008d4e:	2301      	movs	r3, #1
 8008d50:	e01f      	b.n	8008d92 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8008d52:	2300      	movs	r3, #0
 8008d54:	e01d      	b.n	8008d92 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8008d56:	4b11      	ldr	r3, [pc, #68]	@ (8008d9c <HAL_PWREx_ConfigSupply+0x70>)
 8008d58:	68db      	ldr	r3, [r3, #12]
 8008d5a:	f023 0207 	bic.w	r2, r3, #7
 8008d5e:	490f      	ldr	r1, [pc, #60]	@ (8008d9c <HAL_PWREx_ConfigSupply+0x70>)
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	4313      	orrs	r3, r2
 8008d64:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8008d66:	f7fd f837 	bl	8005dd8 <HAL_GetTick>
 8008d6a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008d6c:	e009      	b.n	8008d82 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8008d6e:	f7fd f833 	bl	8005dd8 <HAL_GetTick>
 8008d72:	4602      	mov	r2, r0
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	1ad3      	subs	r3, r2, r3
 8008d78:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008d7c:	d901      	bls.n	8008d82 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8008d7e:	2301      	movs	r3, #1
 8008d80:	e007      	b.n	8008d92 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008d82:	4b06      	ldr	r3, [pc, #24]	@ (8008d9c <HAL_PWREx_ConfigSupply+0x70>)
 8008d84:	685b      	ldr	r3, [r3, #4]
 8008d86:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008d8a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008d8e:	d1ee      	bne.n	8008d6e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8008d90:	2300      	movs	r3, #0
}
 8008d92:	4618      	mov	r0, r3
 8008d94:	3710      	adds	r7, #16
 8008d96:	46bd      	mov	sp, r7
 8008d98:	bd80      	pop	{r7, pc}
 8008d9a:	bf00      	nop
 8008d9c:	58024800 	.word	0x58024800

08008da0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008da0:	b580      	push	{r7, lr}
 8008da2:	b08c      	sub	sp, #48	@ 0x30
 8008da4:	af00      	add	r7, sp, #0
 8008da6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d102      	bne.n	8008db4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8008dae:	2301      	movs	r3, #1
 8008db0:	f000 bc48 	b.w	8009644 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	f003 0301 	and.w	r3, r3, #1
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	f000 8088 	beq.w	8008ed2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008dc2:	4b99      	ldr	r3, [pc, #612]	@ (8009028 <HAL_RCC_OscConfig+0x288>)
 8008dc4:	691b      	ldr	r3, [r3, #16]
 8008dc6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008dca:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008dcc:	4b96      	ldr	r3, [pc, #600]	@ (8009028 <HAL_RCC_OscConfig+0x288>)
 8008dce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008dd0:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8008dd2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008dd4:	2b10      	cmp	r3, #16
 8008dd6:	d007      	beq.n	8008de8 <HAL_RCC_OscConfig+0x48>
 8008dd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008dda:	2b18      	cmp	r3, #24
 8008ddc:	d111      	bne.n	8008e02 <HAL_RCC_OscConfig+0x62>
 8008dde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008de0:	f003 0303 	and.w	r3, r3, #3
 8008de4:	2b02      	cmp	r3, #2
 8008de6:	d10c      	bne.n	8008e02 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008de8:	4b8f      	ldr	r3, [pc, #572]	@ (8009028 <HAL_RCC_OscConfig+0x288>)
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d06d      	beq.n	8008ed0 <HAL_RCC_OscConfig+0x130>
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	685b      	ldr	r3, [r3, #4]
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d169      	bne.n	8008ed0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8008dfc:	2301      	movs	r3, #1
 8008dfe:	f000 bc21 	b.w	8009644 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	685b      	ldr	r3, [r3, #4]
 8008e06:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008e0a:	d106      	bne.n	8008e1a <HAL_RCC_OscConfig+0x7a>
 8008e0c:	4b86      	ldr	r3, [pc, #536]	@ (8009028 <HAL_RCC_OscConfig+0x288>)
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	4a85      	ldr	r2, [pc, #532]	@ (8009028 <HAL_RCC_OscConfig+0x288>)
 8008e12:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008e16:	6013      	str	r3, [r2, #0]
 8008e18:	e02e      	b.n	8008e78 <HAL_RCC_OscConfig+0xd8>
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	685b      	ldr	r3, [r3, #4]
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d10c      	bne.n	8008e3c <HAL_RCC_OscConfig+0x9c>
 8008e22:	4b81      	ldr	r3, [pc, #516]	@ (8009028 <HAL_RCC_OscConfig+0x288>)
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	4a80      	ldr	r2, [pc, #512]	@ (8009028 <HAL_RCC_OscConfig+0x288>)
 8008e28:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008e2c:	6013      	str	r3, [r2, #0]
 8008e2e:	4b7e      	ldr	r3, [pc, #504]	@ (8009028 <HAL_RCC_OscConfig+0x288>)
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	4a7d      	ldr	r2, [pc, #500]	@ (8009028 <HAL_RCC_OscConfig+0x288>)
 8008e34:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008e38:	6013      	str	r3, [r2, #0]
 8008e3a:	e01d      	b.n	8008e78 <HAL_RCC_OscConfig+0xd8>
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	685b      	ldr	r3, [r3, #4]
 8008e40:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008e44:	d10c      	bne.n	8008e60 <HAL_RCC_OscConfig+0xc0>
 8008e46:	4b78      	ldr	r3, [pc, #480]	@ (8009028 <HAL_RCC_OscConfig+0x288>)
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	4a77      	ldr	r2, [pc, #476]	@ (8009028 <HAL_RCC_OscConfig+0x288>)
 8008e4c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008e50:	6013      	str	r3, [r2, #0]
 8008e52:	4b75      	ldr	r3, [pc, #468]	@ (8009028 <HAL_RCC_OscConfig+0x288>)
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	4a74      	ldr	r2, [pc, #464]	@ (8009028 <HAL_RCC_OscConfig+0x288>)
 8008e58:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008e5c:	6013      	str	r3, [r2, #0]
 8008e5e:	e00b      	b.n	8008e78 <HAL_RCC_OscConfig+0xd8>
 8008e60:	4b71      	ldr	r3, [pc, #452]	@ (8009028 <HAL_RCC_OscConfig+0x288>)
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	4a70      	ldr	r2, [pc, #448]	@ (8009028 <HAL_RCC_OscConfig+0x288>)
 8008e66:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008e6a:	6013      	str	r3, [r2, #0]
 8008e6c:	4b6e      	ldr	r3, [pc, #440]	@ (8009028 <HAL_RCC_OscConfig+0x288>)
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	4a6d      	ldr	r2, [pc, #436]	@ (8009028 <HAL_RCC_OscConfig+0x288>)
 8008e72:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008e76:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	685b      	ldr	r3, [r3, #4]
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d013      	beq.n	8008ea8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008e80:	f7fc ffaa 	bl	8005dd8 <HAL_GetTick>
 8008e84:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008e86:	e008      	b.n	8008e9a <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008e88:	f7fc ffa6 	bl	8005dd8 <HAL_GetTick>
 8008e8c:	4602      	mov	r2, r0
 8008e8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e90:	1ad3      	subs	r3, r2, r3
 8008e92:	2b64      	cmp	r3, #100	@ 0x64
 8008e94:	d901      	bls.n	8008e9a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008e96:	2303      	movs	r3, #3
 8008e98:	e3d4      	b.n	8009644 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008e9a:	4b63      	ldr	r3, [pc, #396]	@ (8009028 <HAL_RCC_OscConfig+0x288>)
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d0f0      	beq.n	8008e88 <HAL_RCC_OscConfig+0xe8>
 8008ea6:	e014      	b.n	8008ed2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008ea8:	f7fc ff96 	bl	8005dd8 <HAL_GetTick>
 8008eac:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008eae:	e008      	b.n	8008ec2 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008eb0:	f7fc ff92 	bl	8005dd8 <HAL_GetTick>
 8008eb4:	4602      	mov	r2, r0
 8008eb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008eb8:	1ad3      	subs	r3, r2, r3
 8008eba:	2b64      	cmp	r3, #100	@ 0x64
 8008ebc:	d901      	bls.n	8008ec2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8008ebe:	2303      	movs	r3, #3
 8008ec0:	e3c0      	b.n	8009644 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008ec2:	4b59      	ldr	r3, [pc, #356]	@ (8009028 <HAL_RCC_OscConfig+0x288>)
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d1f0      	bne.n	8008eb0 <HAL_RCC_OscConfig+0x110>
 8008ece:	e000      	b.n	8008ed2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008ed0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	f003 0302 	and.w	r3, r3, #2
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	f000 80ca 	beq.w	8009074 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008ee0:	4b51      	ldr	r3, [pc, #324]	@ (8009028 <HAL_RCC_OscConfig+0x288>)
 8008ee2:	691b      	ldr	r3, [r3, #16]
 8008ee4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008ee8:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008eea:	4b4f      	ldr	r3, [pc, #316]	@ (8009028 <HAL_RCC_OscConfig+0x288>)
 8008eec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008eee:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8008ef0:	6a3b      	ldr	r3, [r7, #32]
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d007      	beq.n	8008f06 <HAL_RCC_OscConfig+0x166>
 8008ef6:	6a3b      	ldr	r3, [r7, #32]
 8008ef8:	2b18      	cmp	r3, #24
 8008efa:	d156      	bne.n	8008faa <HAL_RCC_OscConfig+0x20a>
 8008efc:	69fb      	ldr	r3, [r7, #28]
 8008efe:	f003 0303 	and.w	r3, r3, #3
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d151      	bne.n	8008faa <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008f06:	4b48      	ldr	r3, [pc, #288]	@ (8009028 <HAL_RCC_OscConfig+0x288>)
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	f003 0304 	and.w	r3, r3, #4
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d005      	beq.n	8008f1e <HAL_RCC_OscConfig+0x17e>
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	68db      	ldr	r3, [r3, #12]
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d101      	bne.n	8008f1e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8008f1a:	2301      	movs	r3, #1
 8008f1c:	e392      	b.n	8009644 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008f1e:	4b42      	ldr	r3, [pc, #264]	@ (8009028 <HAL_RCC_OscConfig+0x288>)
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	f023 0219 	bic.w	r2, r3, #25
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	68db      	ldr	r3, [r3, #12]
 8008f2a:	493f      	ldr	r1, [pc, #252]	@ (8009028 <HAL_RCC_OscConfig+0x288>)
 8008f2c:	4313      	orrs	r3, r2
 8008f2e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008f30:	f7fc ff52 	bl	8005dd8 <HAL_GetTick>
 8008f34:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008f36:	e008      	b.n	8008f4a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008f38:	f7fc ff4e 	bl	8005dd8 <HAL_GetTick>
 8008f3c:	4602      	mov	r2, r0
 8008f3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f40:	1ad3      	subs	r3, r2, r3
 8008f42:	2b02      	cmp	r3, #2
 8008f44:	d901      	bls.n	8008f4a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8008f46:	2303      	movs	r3, #3
 8008f48:	e37c      	b.n	8009644 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008f4a:	4b37      	ldr	r3, [pc, #220]	@ (8009028 <HAL_RCC_OscConfig+0x288>)
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	f003 0304 	and.w	r3, r3, #4
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d0f0      	beq.n	8008f38 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008f56:	f7fc ff6f 	bl	8005e38 <HAL_GetREVID>
 8008f5a:	4603      	mov	r3, r0
 8008f5c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8008f60:	4293      	cmp	r3, r2
 8008f62:	d817      	bhi.n	8008f94 <HAL_RCC_OscConfig+0x1f4>
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	691b      	ldr	r3, [r3, #16]
 8008f68:	2b40      	cmp	r3, #64	@ 0x40
 8008f6a:	d108      	bne.n	8008f7e <HAL_RCC_OscConfig+0x1de>
 8008f6c:	4b2e      	ldr	r3, [pc, #184]	@ (8009028 <HAL_RCC_OscConfig+0x288>)
 8008f6e:	685b      	ldr	r3, [r3, #4]
 8008f70:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8008f74:	4a2c      	ldr	r2, [pc, #176]	@ (8009028 <HAL_RCC_OscConfig+0x288>)
 8008f76:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008f7a:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008f7c:	e07a      	b.n	8009074 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008f7e:	4b2a      	ldr	r3, [pc, #168]	@ (8009028 <HAL_RCC_OscConfig+0x288>)
 8008f80:	685b      	ldr	r3, [r3, #4]
 8008f82:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	691b      	ldr	r3, [r3, #16]
 8008f8a:	031b      	lsls	r3, r3, #12
 8008f8c:	4926      	ldr	r1, [pc, #152]	@ (8009028 <HAL_RCC_OscConfig+0x288>)
 8008f8e:	4313      	orrs	r3, r2
 8008f90:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008f92:	e06f      	b.n	8009074 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008f94:	4b24      	ldr	r3, [pc, #144]	@ (8009028 <HAL_RCC_OscConfig+0x288>)
 8008f96:	685b      	ldr	r3, [r3, #4]
 8008f98:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	691b      	ldr	r3, [r3, #16]
 8008fa0:	061b      	lsls	r3, r3, #24
 8008fa2:	4921      	ldr	r1, [pc, #132]	@ (8009028 <HAL_RCC_OscConfig+0x288>)
 8008fa4:	4313      	orrs	r3, r2
 8008fa6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008fa8:	e064      	b.n	8009074 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	68db      	ldr	r3, [r3, #12]
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d047      	beq.n	8009042 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008fb2:	4b1d      	ldr	r3, [pc, #116]	@ (8009028 <HAL_RCC_OscConfig+0x288>)
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	f023 0219 	bic.w	r2, r3, #25
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	68db      	ldr	r3, [r3, #12]
 8008fbe:	491a      	ldr	r1, [pc, #104]	@ (8009028 <HAL_RCC_OscConfig+0x288>)
 8008fc0:	4313      	orrs	r3, r2
 8008fc2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008fc4:	f7fc ff08 	bl	8005dd8 <HAL_GetTick>
 8008fc8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008fca:	e008      	b.n	8008fde <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008fcc:	f7fc ff04 	bl	8005dd8 <HAL_GetTick>
 8008fd0:	4602      	mov	r2, r0
 8008fd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008fd4:	1ad3      	subs	r3, r2, r3
 8008fd6:	2b02      	cmp	r3, #2
 8008fd8:	d901      	bls.n	8008fde <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8008fda:	2303      	movs	r3, #3
 8008fdc:	e332      	b.n	8009644 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008fde:	4b12      	ldr	r3, [pc, #72]	@ (8009028 <HAL_RCC_OscConfig+0x288>)
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	f003 0304 	and.w	r3, r3, #4
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d0f0      	beq.n	8008fcc <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008fea:	f7fc ff25 	bl	8005e38 <HAL_GetREVID>
 8008fee:	4603      	mov	r3, r0
 8008ff0:	f241 0203 	movw	r2, #4099	@ 0x1003
 8008ff4:	4293      	cmp	r3, r2
 8008ff6:	d819      	bhi.n	800902c <HAL_RCC_OscConfig+0x28c>
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	691b      	ldr	r3, [r3, #16]
 8008ffc:	2b40      	cmp	r3, #64	@ 0x40
 8008ffe:	d108      	bne.n	8009012 <HAL_RCC_OscConfig+0x272>
 8009000:	4b09      	ldr	r3, [pc, #36]	@ (8009028 <HAL_RCC_OscConfig+0x288>)
 8009002:	685b      	ldr	r3, [r3, #4]
 8009004:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8009008:	4a07      	ldr	r2, [pc, #28]	@ (8009028 <HAL_RCC_OscConfig+0x288>)
 800900a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800900e:	6053      	str	r3, [r2, #4]
 8009010:	e030      	b.n	8009074 <HAL_RCC_OscConfig+0x2d4>
 8009012:	4b05      	ldr	r3, [pc, #20]	@ (8009028 <HAL_RCC_OscConfig+0x288>)
 8009014:	685b      	ldr	r3, [r3, #4]
 8009016:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	691b      	ldr	r3, [r3, #16]
 800901e:	031b      	lsls	r3, r3, #12
 8009020:	4901      	ldr	r1, [pc, #4]	@ (8009028 <HAL_RCC_OscConfig+0x288>)
 8009022:	4313      	orrs	r3, r2
 8009024:	604b      	str	r3, [r1, #4]
 8009026:	e025      	b.n	8009074 <HAL_RCC_OscConfig+0x2d4>
 8009028:	58024400 	.word	0x58024400
 800902c:	4b9a      	ldr	r3, [pc, #616]	@ (8009298 <HAL_RCC_OscConfig+0x4f8>)
 800902e:	685b      	ldr	r3, [r3, #4]
 8009030:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	691b      	ldr	r3, [r3, #16]
 8009038:	061b      	lsls	r3, r3, #24
 800903a:	4997      	ldr	r1, [pc, #604]	@ (8009298 <HAL_RCC_OscConfig+0x4f8>)
 800903c:	4313      	orrs	r3, r2
 800903e:	604b      	str	r3, [r1, #4]
 8009040:	e018      	b.n	8009074 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009042:	4b95      	ldr	r3, [pc, #596]	@ (8009298 <HAL_RCC_OscConfig+0x4f8>)
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	4a94      	ldr	r2, [pc, #592]	@ (8009298 <HAL_RCC_OscConfig+0x4f8>)
 8009048:	f023 0301 	bic.w	r3, r3, #1
 800904c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800904e:	f7fc fec3 	bl	8005dd8 <HAL_GetTick>
 8009052:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8009054:	e008      	b.n	8009068 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009056:	f7fc febf 	bl	8005dd8 <HAL_GetTick>
 800905a:	4602      	mov	r2, r0
 800905c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800905e:	1ad3      	subs	r3, r2, r3
 8009060:	2b02      	cmp	r3, #2
 8009062:	d901      	bls.n	8009068 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8009064:	2303      	movs	r3, #3
 8009066:	e2ed      	b.n	8009644 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8009068:	4b8b      	ldr	r3, [pc, #556]	@ (8009298 <HAL_RCC_OscConfig+0x4f8>)
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	f003 0304 	and.w	r3, r3, #4
 8009070:	2b00      	cmp	r3, #0
 8009072:	d1f0      	bne.n	8009056 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	f003 0310 	and.w	r3, r3, #16
 800907c:	2b00      	cmp	r3, #0
 800907e:	f000 80a9 	beq.w	80091d4 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009082:	4b85      	ldr	r3, [pc, #532]	@ (8009298 <HAL_RCC_OscConfig+0x4f8>)
 8009084:	691b      	ldr	r3, [r3, #16]
 8009086:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800908a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800908c:	4b82      	ldr	r3, [pc, #520]	@ (8009298 <HAL_RCC_OscConfig+0x4f8>)
 800908e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009090:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8009092:	69bb      	ldr	r3, [r7, #24]
 8009094:	2b08      	cmp	r3, #8
 8009096:	d007      	beq.n	80090a8 <HAL_RCC_OscConfig+0x308>
 8009098:	69bb      	ldr	r3, [r7, #24]
 800909a:	2b18      	cmp	r3, #24
 800909c:	d13a      	bne.n	8009114 <HAL_RCC_OscConfig+0x374>
 800909e:	697b      	ldr	r3, [r7, #20]
 80090a0:	f003 0303 	and.w	r3, r3, #3
 80090a4:	2b01      	cmp	r3, #1
 80090a6:	d135      	bne.n	8009114 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80090a8:	4b7b      	ldr	r3, [pc, #492]	@ (8009298 <HAL_RCC_OscConfig+0x4f8>)
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d005      	beq.n	80090c0 <HAL_RCC_OscConfig+0x320>
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	69db      	ldr	r3, [r3, #28]
 80090b8:	2b80      	cmp	r3, #128	@ 0x80
 80090ba:	d001      	beq.n	80090c0 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80090bc:	2301      	movs	r3, #1
 80090be:	e2c1      	b.n	8009644 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80090c0:	f7fc feba 	bl	8005e38 <HAL_GetREVID>
 80090c4:	4603      	mov	r3, r0
 80090c6:	f241 0203 	movw	r2, #4099	@ 0x1003
 80090ca:	4293      	cmp	r3, r2
 80090cc:	d817      	bhi.n	80090fe <HAL_RCC_OscConfig+0x35e>
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	6a1b      	ldr	r3, [r3, #32]
 80090d2:	2b20      	cmp	r3, #32
 80090d4:	d108      	bne.n	80090e8 <HAL_RCC_OscConfig+0x348>
 80090d6:	4b70      	ldr	r3, [pc, #448]	@ (8009298 <HAL_RCC_OscConfig+0x4f8>)
 80090d8:	685b      	ldr	r3, [r3, #4]
 80090da:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80090de:	4a6e      	ldr	r2, [pc, #440]	@ (8009298 <HAL_RCC_OscConfig+0x4f8>)
 80090e0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80090e4:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80090e6:	e075      	b.n	80091d4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80090e8:	4b6b      	ldr	r3, [pc, #428]	@ (8009298 <HAL_RCC_OscConfig+0x4f8>)
 80090ea:	685b      	ldr	r3, [r3, #4]
 80090ec:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	6a1b      	ldr	r3, [r3, #32]
 80090f4:	069b      	lsls	r3, r3, #26
 80090f6:	4968      	ldr	r1, [pc, #416]	@ (8009298 <HAL_RCC_OscConfig+0x4f8>)
 80090f8:	4313      	orrs	r3, r2
 80090fa:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80090fc:	e06a      	b.n	80091d4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80090fe:	4b66      	ldr	r3, [pc, #408]	@ (8009298 <HAL_RCC_OscConfig+0x4f8>)
 8009100:	68db      	ldr	r3, [r3, #12]
 8009102:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	6a1b      	ldr	r3, [r3, #32]
 800910a:	061b      	lsls	r3, r3, #24
 800910c:	4962      	ldr	r1, [pc, #392]	@ (8009298 <HAL_RCC_OscConfig+0x4f8>)
 800910e:	4313      	orrs	r3, r2
 8009110:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009112:	e05f      	b.n	80091d4 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	69db      	ldr	r3, [r3, #28]
 8009118:	2b00      	cmp	r3, #0
 800911a:	d042      	beq.n	80091a2 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800911c:	4b5e      	ldr	r3, [pc, #376]	@ (8009298 <HAL_RCC_OscConfig+0x4f8>)
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	4a5d      	ldr	r2, [pc, #372]	@ (8009298 <HAL_RCC_OscConfig+0x4f8>)
 8009122:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009126:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009128:	f7fc fe56 	bl	8005dd8 <HAL_GetTick>
 800912c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800912e:	e008      	b.n	8009142 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8009130:	f7fc fe52 	bl	8005dd8 <HAL_GetTick>
 8009134:	4602      	mov	r2, r0
 8009136:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009138:	1ad3      	subs	r3, r2, r3
 800913a:	2b02      	cmp	r3, #2
 800913c:	d901      	bls.n	8009142 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800913e:	2303      	movs	r3, #3
 8009140:	e280      	b.n	8009644 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009142:	4b55      	ldr	r3, [pc, #340]	@ (8009298 <HAL_RCC_OscConfig+0x4f8>)
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800914a:	2b00      	cmp	r3, #0
 800914c:	d0f0      	beq.n	8009130 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800914e:	f7fc fe73 	bl	8005e38 <HAL_GetREVID>
 8009152:	4603      	mov	r3, r0
 8009154:	f241 0203 	movw	r2, #4099	@ 0x1003
 8009158:	4293      	cmp	r3, r2
 800915a:	d817      	bhi.n	800918c <HAL_RCC_OscConfig+0x3ec>
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	6a1b      	ldr	r3, [r3, #32]
 8009160:	2b20      	cmp	r3, #32
 8009162:	d108      	bne.n	8009176 <HAL_RCC_OscConfig+0x3d6>
 8009164:	4b4c      	ldr	r3, [pc, #304]	@ (8009298 <HAL_RCC_OscConfig+0x4f8>)
 8009166:	685b      	ldr	r3, [r3, #4]
 8009168:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800916c:	4a4a      	ldr	r2, [pc, #296]	@ (8009298 <HAL_RCC_OscConfig+0x4f8>)
 800916e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009172:	6053      	str	r3, [r2, #4]
 8009174:	e02e      	b.n	80091d4 <HAL_RCC_OscConfig+0x434>
 8009176:	4b48      	ldr	r3, [pc, #288]	@ (8009298 <HAL_RCC_OscConfig+0x4f8>)
 8009178:	685b      	ldr	r3, [r3, #4]
 800917a:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	6a1b      	ldr	r3, [r3, #32]
 8009182:	069b      	lsls	r3, r3, #26
 8009184:	4944      	ldr	r1, [pc, #272]	@ (8009298 <HAL_RCC_OscConfig+0x4f8>)
 8009186:	4313      	orrs	r3, r2
 8009188:	604b      	str	r3, [r1, #4]
 800918a:	e023      	b.n	80091d4 <HAL_RCC_OscConfig+0x434>
 800918c:	4b42      	ldr	r3, [pc, #264]	@ (8009298 <HAL_RCC_OscConfig+0x4f8>)
 800918e:	68db      	ldr	r3, [r3, #12]
 8009190:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	6a1b      	ldr	r3, [r3, #32]
 8009198:	061b      	lsls	r3, r3, #24
 800919a:	493f      	ldr	r1, [pc, #252]	@ (8009298 <HAL_RCC_OscConfig+0x4f8>)
 800919c:	4313      	orrs	r3, r2
 800919e:	60cb      	str	r3, [r1, #12]
 80091a0:	e018      	b.n	80091d4 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80091a2:	4b3d      	ldr	r3, [pc, #244]	@ (8009298 <HAL_RCC_OscConfig+0x4f8>)
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	4a3c      	ldr	r2, [pc, #240]	@ (8009298 <HAL_RCC_OscConfig+0x4f8>)
 80091a8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80091ac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80091ae:	f7fc fe13 	bl	8005dd8 <HAL_GetTick>
 80091b2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80091b4:	e008      	b.n	80091c8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80091b6:	f7fc fe0f 	bl	8005dd8 <HAL_GetTick>
 80091ba:	4602      	mov	r2, r0
 80091bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091be:	1ad3      	subs	r3, r2, r3
 80091c0:	2b02      	cmp	r3, #2
 80091c2:	d901      	bls.n	80091c8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80091c4:	2303      	movs	r3, #3
 80091c6:	e23d      	b.n	8009644 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80091c8:	4b33      	ldr	r3, [pc, #204]	@ (8009298 <HAL_RCC_OscConfig+0x4f8>)
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d1f0      	bne.n	80091b6 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	f003 0308 	and.w	r3, r3, #8
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d036      	beq.n	800924e <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	695b      	ldr	r3, [r3, #20]
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d019      	beq.n	800921c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80091e8:	4b2b      	ldr	r3, [pc, #172]	@ (8009298 <HAL_RCC_OscConfig+0x4f8>)
 80091ea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80091ec:	4a2a      	ldr	r2, [pc, #168]	@ (8009298 <HAL_RCC_OscConfig+0x4f8>)
 80091ee:	f043 0301 	orr.w	r3, r3, #1
 80091f2:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80091f4:	f7fc fdf0 	bl	8005dd8 <HAL_GetTick>
 80091f8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80091fa:	e008      	b.n	800920e <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80091fc:	f7fc fdec 	bl	8005dd8 <HAL_GetTick>
 8009200:	4602      	mov	r2, r0
 8009202:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009204:	1ad3      	subs	r3, r2, r3
 8009206:	2b02      	cmp	r3, #2
 8009208:	d901      	bls.n	800920e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800920a:	2303      	movs	r3, #3
 800920c:	e21a      	b.n	8009644 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800920e:	4b22      	ldr	r3, [pc, #136]	@ (8009298 <HAL_RCC_OscConfig+0x4f8>)
 8009210:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009212:	f003 0302 	and.w	r3, r3, #2
 8009216:	2b00      	cmp	r3, #0
 8009218:	d0f0      	beq.n	80091fc <HAL_RCC_OscConfig+0x45c>
 800921a:	e018      	b.n	800924e <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800921c:	4b1e      	ldr	r3, [pc, #120]	@ (8009298 <HAL_RCC_OscConfig+0x4f8>)
 800921e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009220:	4a1d      	ldr	r2, [pc, #116]	@ (8009298 <HAL_RCC_OscConfig+0x4f8>)
 8009222:	f023 0301 	bic.w	r3, r3, #1
 8009226:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009228:	f7fc fdd6 	bl	8005dd8 <HAL_GetTick>
 800922c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800922e:	e008      	b.n	8009242 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009230:	f7fc fdd2 	bl	8005dd8 <HAL_GetTick>
 8009234:	4602      	mov	r2, r0
 8009236:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009238:	1ad3      	subs	r3, r2, r3
 800923a:	2b02      	cmp	r3, #2
 800923c:	d901      	bls.n	8009242 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800923e:	2303      	movs	r3, #3
 8009240:	e200      	b.n	8009644 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8009242:	4b15      	ldr	r3, [pc, #84]	@ (8009298 <HAL_RCC_OscConfig+0x4f8>)
 8009244:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009246:	f003 0302 	and.w	r3, r3, #2
 800924a:	2b00      	cmp	r3, #0
 800924c:	d1f0      	bne.n	8009230 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	f003 0320 	and.w	r3, r3, #32
 8009256:	2b00      	cmp	r3, #0
 8009258:	d039      	beq.n	80092ce <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	699b      	ldr	r3, [r3, #24]
 800925e:	2b00      	cmp	r3, #0
 8009260:	d01c      	beq.n	800929c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8009262:	4b0d      	ldr	r3, [pc, #52]	@ (8009298 <HAL_RCC_OscConfig+0x4f8>)
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	4a0c      	ldr	r2, [pc, #48]	@ (8009298 <HAL_RCC_OscConfig+0x4f8>)
 8009268:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800926c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800926e:	f7fc fdb3 	bl	8005dd8 <HAL_GetTick>
 8009272:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8009274:	e008      	b.n	8009288 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009276:	f7fc fdaf 	bl	8005dd8 <HAL_GetTick>
 800927a:	4602      	mov	r2, r0
 800927c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800927e:	1ad3      	subs	r3, r2, r3
 8009280:	2b02      	cmp	r3, #2
 8009282:	d901      	bls.n	8009288 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8009284:	2303      	movs	r3, #3
 8009286:	e1dd      	b.n	8009644 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8009288:	4b03      	ldr	r3, [pc, #12]	@ (8009298 <HAL_RCC_OscConfig+0x4f8>)
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009290:	2b00      	cmp	r3, #0
 8009292:	d0f0      	beq.n	8009276 <HAL_RCC_OscConfig+0x4d6>
 8009294:	e01b      	b.n	80092ce <HAL_RCC_OscConfig+0x52e>
 8009296:	bf00      	nop
 8009298:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800929c:	4b9b      	ldr	r3, [pc, #620]	@ (800950c <HAL_RCC_OscConfig+0x76c>)
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	4a9a      	ldr	r2, [pc, #616]	@ (800950c <HAL_RCC_OscConfig+0x76c>)
 80092a2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80092a6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80092a8:	f7fc fd96 	bl	8005dd8 <HAL_GetTick>
 80092ac:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80092ae:	e008      	b.n	80092c2 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80092b0:	f7fc fd92 	bl	8005dd8 <HAL_GetTick>
 80092b4:	4602      	mov	r2, r0
 80092b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092b8:	1ad3      	subs	r3, r2, r3
 80092ba:	2b02      	cmp	r3, #2
 80092bc:	d901      	bls.n	80092c2 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80092be:	2303      	movs	r3, #3
 80092c0:	e1c0      	b.n	8009644 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80092c2:	4b92      	ldr	r3, [pc, #584]	@ (800950c <HAL_RCC_OscConfig+0x76c>)
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d1f0      	bne.n	80092b0 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	f003 0304 	and.w	r3, r3, #4
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	f000 8081 	beq.w	80093de <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80092dc:	4b8c      	ldr	r3, [pc, #560]	@ (8009510 <HAL_RCC_OscConfig+0x770>)
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	4a8b      	ldr	r2, [pc, #556]	@ (8009510 <HAL_RCC_OscConfig+0x770>)
 80092e2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80092e6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80092e8:	f7fc fd76 	bl	8005dd8 <HAL_GetTick>
 80092ec:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80092ee:	e008      	b.n	8009302 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80092f0:	f7fc fd72 	bl	8005dd8 <HAL_GetTick>
 80092f4:	4602      	mov	r2, r0
 80092f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092f8:	1ad3      	subs	r3, r2, r3
 80092fa:	2b64      	cmp	r3, #100	@ 0x64
 80092fc:	d901      	bls.n	8009302 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80092fe:	2303      	movs	r3, #3
 8009300:	e1a0      	b.n	8009644 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009302:	4b83      	ldr	r3, [pc, #524]	@ (8009510 <HAL_RCC_OscConfig+0x770>)
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800930a:	2b00      	cmp	r3, #0
 800930c:	d0f0      	beq.n	80092f0 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	689b      	ldr	r3, [r3, #8]
 8009312:	2b01      	cmp	r3, #1
 8009314:	d106      	bne.n	8009324 <HAL_RCC_OscConfig+0x584>
 8009316:	4b7d      	ldr	r3, [pc, #500]	@ (800950c <HAL_RCC_OscConfig+0x76c>)
 8009318:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800931a:	4a7c      	ldr	r2, [pc, #496]	@ (800950c <HAL_RCC_OscConfig+0x76c>)
 800931c:	f043 0301 	orr.w	r3, r3, #1
 8009320:	6713      	str	r3, [r2, #112]	@ 0x70
 8009322:	e02d      	b.n	8009380 <HAL_RCC_OscConfig+0x5e0>
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	689b      	ldr	r3, [r3, #8]
 8009328:	2b00      	cmp	r3, #0
 800932a:	d10c      	bne.n	8009346 <HAL_RCC_OscConfig+0x5a6>
 800932c:	4b77      	ldr	r3, [pc, #476]	@ (800950c <HAL_RCC_OscConfig+0x76c>)
 800932e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009330:	4a76      	ldr	r2, [pc, #472]	@ (800950c <HAL_RCC_OscConfig+0x76c>)
 8009332:	f023 0301 	bic.w	r3, r3, #1
 8009336:	6713      	str	r3, [r2, #112]	@ 0x70
 8009338:	4b74      	ldr	r3, [pc, #464]	@ (800950c <HAL_RCC_OscConfig+0x76c>)
 800933a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800933c:	4a73      	ldr	r2, [pc, #460]	@ (800950c <HAL_RCC_OscConfig+0x76c>)
 800933e:	f023 0304 	bic.w	r3, r3, #4
 8009342:	6713      	str	r3, [r2, #112]	@ 0x70
 8009344:	e01c      	b.n	8009380 <HAL_RCC_OscConfig+0x5e0>
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	689b      	ldr	r3, [r3, #8]
 800934a:	2b05      	cmp	r3, #5
 800934c:	d10c      	bne.n	8009368 <HAL_RCC_OscConfig+0x5c8>
 800934e:	4b6f      	ldr	r3, [pc, #444]	@ (800950c <HAL_RCC_OscConfig+0x76c>)
 8009350:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009352:	4a6e      	ldr	r2, [pc, #440]	@ (800950c <HAL_RCC_OscConfig+0x76c>)
 8009354:	f043 0304 	orr.w	r3, r3, #4
 8009358:	6713      	str	r3, [r2, #112]	@ 0x70
 800935a:	4b6c      	ldr	r3, [pc, #432]	@ (800950c <HAL_RCC_OscConfig+0x76c>)
 800935c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800935e:	4a6b      	ldr	r2, [pc, #428]	@ (800950c <HAL_RCC_OscConfig+0x76c>)
 8009360:	f043 0301 	orr.w	r3, r3, #1
 8009364:	6713      	str	r3, [r2, #112]	@ 0x70
 8009366:	e00b      	b.n	8009380 <HAL_RCC_OscConfig+0x5e0>
 8009368:	4b68      	ldr	r3, [pc, #416]	@ (800950c <HAL_RCC_OscConfig+0x76c>)
 800936a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800936c:	4a67      	ldr	r2, [pc, #412]	@ (800950c <HAL_RCC_OscConfig+0x76c>)
 800936e:	f023 0301 	bic.w	r3, r3, #1
 8009372:	6713      	str	r3, [r2, #112]	@ 0x70
 8009374:	4b65      	ldr	r3, [pc, #404]	@ (800950c <HAL_RCC_OscConfig+0x76c>)
 8009376:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009378:	4a64      	ldr	r2, [pc, #400]	@ (800950c <HAL_RCC_OscConfig+0x76c>)
 800937a:	f023 0304 	bic.w	r3, r3, #4
 800937e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	689b      	ldr	r3, [r3, #8]
 8009384:	2b00      	cmp	r3, #0
 8009386:	d015      	beq.n	80093b4 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009388:	f7fc fd26 	bl	8005dd8 <HAL_GetTick>
 800938c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800938e:	e00a      	b.n	80093a6 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009390:	f7fc fd22 	bl	8005dd8 <HAL_GetTick>
 8009394:	4602      	mov	r2, r0
 8009396:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009398:	1ad3      	subs	r3, r2, r3
 800939a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800939e:	4293      	cmp	r3, r2
 80093a0:	d901      	bls.n	80093a6 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80093a2:	2303      	movs	r3, #3
 80093a4:	e14e      	b.n	8009644 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80093a6:	4b59      	ldr	r3, [pc, #356]	@ (800950c <HAL_RCC_OscConfig+0x76c>)
 80093a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80093aa:	f003 0302 	and.w	r3, r3, #2
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d0ee      	beq.n	8009390 <HAL_RCC_OscConfig+0x5f0>
 80093b2:	e014      	b.n	80093de <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80093b4:	f7fc fd10 	bl	8005dd8 <HAL_GetTick>
 80093b8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80093ba:	e00a      	b.n	80093d2 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80093bc:	f7fc fd0c 	bl	8005dd8 <HAL_GetTick>
 80093c0:	4602      	mov	r2, r0
 80093c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093c4:	1ad3      	subs	r3, r2, r3
 80093c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80093ca:	4293      	cmp	r3, r2
 80093cc:	d901      	bls.n	80093d2 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80093ce:	2303      	movs	r3, #3
 80093d0:	e138      	b.n	8009644 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80093d2:	4b4e      	ldr	r3, [pc, #312]	@ (800950c <HAL_RCC_OscConfig+0x76c>)
 80093d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80093d6:	f003 0302 	and.w	r3, r3, #2
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d1ee      	bne.n	80093bc <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	f000 812d 	beq.w	8009642 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80093e8:	4b48      	ldr	r3, [pc, #288]	@ (800950c <HAL_RCC_OscConfig+0x76c>)
 80093ea:	691b      	ldr	r3, [r3, #16]
 80093ec:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80093f0:	2b18      	cmp	r3, #24
 80093f2:	f000 80bd 	beq.w	8009570 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80093fa:	2b02      	cmp	r3, #2
 80093fc:	f040 809e 	bne.w	800953c <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009400:	4b42      	ldr	r3, [pc, #264]	@ (800950c <HAL_RCC_OscConfig+0x76c>)
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	4a41      	ldr	r2, [pc, #260]	@ (800950c <HAL_RCC_OscConfig+0x76c>)
 8009406:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800940a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800940c:	f7fc fce4 	bl	8005dd8 <HAL_GetTick>
 8009410:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009412:	e008      	b.n	8009426 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009414:	f7fc fce0 	bl	8005dd8 <HAL_GetTick>
 8009418:	4602      	mov	r2, r0
 800941a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800941c:	1ad3      	subs	r3, r2, r3
 800941e:	2b02      	cmp	r3, #2
 8009420:	d901      	bls.n	8009426 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8009422:	2303      	movs	r3, #3
 8009424:	e10e      	b.n	8009644 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009426:	4b39      	ldr	r3, [pc, #228]	@ (800950c <HAL_RCC_OscConfig+0x76c>)
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800942e:	2b00      	cmp	r3, #0
 8009430:	d1f0      	bne.n	8009414 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009432:	4b36      	ldr	r3, [pc, #216]	@ (800950c <HAL_RCC_OscConfig+0x76c>)
 8009434:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009436:	4b37      	ldr	r3, [pc, #220]	@ (8009514 <HAL_RCC_OscConfig+0x774>)
 8009438:	4013      	ands	r3, r2
 800943a:	687a      	ldr	r2, [r7, #4]
 800943c:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800943e:	687a      	ldr	r2, [r7, #4]
 8009440:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8009442:	0112      	lsls	r2, r2, #4
 8009444:	430a      	orrs	r2, r1
 8009446:	4931      	ldr	r1, [pc, #196]	@ (800950c <HAL_RCC_OscConfig+0x76c>)
 8009448:	4313      	orrs	r3, r2
 800944a:	628b      	str	r3, [r1, #40]	@ 0x28
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009450:	3b01      	subs	r3, #1
 8009452:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800945a:	3b01      	subs	r3, #1
 800945c:	025b      	lsls	r3, r3, #9
 800945e:	b29b      	uxth	r3, r3
 8009460:	431a      	orrs	r2, r3
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009466:	3b01      	subs	r3, #1
 8009468:	041b      	lsls	r3, r3, #16
 800946a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800946e:	431a      	orrs	r2, r3
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009474:	3b01      	subs	r3, #1
 8009476:	061b      	lsls	r3, r3, #24
 8009478:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800947c:	4923      	ldr	r1, [pc, #140]	@ (800950c <HAL_RCC_OscConfig+0x76c>)
 800947e:	4313      	orrs	r3, r2
 8009480:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8009482:	4b22      	ldr	r3, [pc, #136]	@ (800950c <HAL_RCC_OscConfig+0x76c>)
 8009484:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009486:	4a21      	ldr	r2, [pc, #132]	@ (800950c <HAL_RCC_OscConfig+0x76c>)
 8009488:	f023 0301 	bic.w	r3, r3, #1
 800948c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800948e:	4b1f      	ldr	r3, [pc, #124]	@ (800950c <HAL_RCC_OscConfig+0x76c>)
 8009490:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009492:	4b21      	ldr	r3, [pc, #132]	@ (8009518 <HAL_RCC_OscConfig+0x778>)
 8009494:	4013      	ands	r3, r2
 8009496:	687a      	ldr	r2, [r7, #4]
 8009498:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800949a:	00d2      	lsls	r2, r2, #3
 800949c:	491b      	ldr	r1, [pc, #108]	@ (800950c <HAL_RCC_OscConfig+0x76c>)
 800949e:	4313      	orrs	r3, r2
 80094a0:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80094a2:	4b1a      	ldr	r3, [pc, #104]	@ (800950c <HAL_RCC_OscConfig+0x76c>)
 80094a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80094a6:	f023 020c 	bic.w	r2, r3, #12
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80094ae:	4917      	ldr	r1, [pc, #92]	@ (800950c <HAL_RCC_OscConfig+0x76c>)
 80094b0:	4313      	orrs	r3, r2
 80094b2:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80094b4:	4b15      	ldr	r3, [pc, #84]	@ (800950c <HAL_RCC_OscConfig+0x76c>)
 80094b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80094b8:	f023 0202 	bic.w	r2, r3, #2
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80094c0:	4912      	ldr	r1, [pc, #72]	@ (800950c <HAL_RCC_OscConfig+0x76c>)
 80094c2:	4313      	orrs	r3, r2
 80094c4:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80094c6:	4b11      	ldr	r3, [pc, #68]	@ (800950c <HAL_RCC_OscConfig+0x76c>)
 80094c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80094ca:	4a10      	ldr	r2, [pc, #64]	@ (800950c <HAL_RCC_OscConfig+0x76c>)
 80094cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80094d0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80094d2:	4b0e      	ldr	r3, [pc, #56]	@ (800950c <HAL_RCC_OscConfig+0x76c>)
 80094d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80094d6:	4a0d      	ldr	r2, [pc, #52]	@ (800950c <HAL_RCC_OscConfig+0x76c>)
 80094d8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80094dc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80094de:	4b0b      	ldr	r3, [pc, #44]	@ (800950c <HAL_RCC_OscConfig+0x76c>)
 80094e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80094e2:	4a0a      	ldr	r2, [pc, #40]	@ (800950c <HAL_RCC_OscConfig+0x76c>)
 80094e4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80094e8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80094ea:	4b08      	ldr	r3, [pc, #32]	@ (800950c <HAL_RCC_OscConfig+0x76c>)
 80094ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80094ee:	4a07      	ldr	r2, [pc, #28]	@ (800950c <HAL_RCC_OscConfig+0x76c>)
 80094f0:	f043 0301 	orr.w	r3, r3, #1
 80094f4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80094f6:	4b05      	ldr	r3, [pc, #20]	@ (800950c <HAL_RCC_OscConfig+0x76c>)
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	4a04      	ldr	r2, [pc, #16]	@ (800950c <HAL_RCC_OscConfig+0x76c>)
 80094fc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8009500:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009502:	f7fc fc69 	bl	8005dd8 <HAL_GetTick>
 8009506:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009508:	e011      	b.n	800952e <HAL_RCC_OscConfig+0x78e>
 800950a:	bf00      	nop
 800950c:	58024400 	.word	0x58024400
 8009510:	58024800 	.word	0x58024800
 8009514:	fffffc0c 	.word	0xfffffc0c
 8009518:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800951c:	f7fc fc5c 	bl	8005dd8 <HAL_GetTick>
 8009520:	4602      	mov	r2, r0
 8009522:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009524:	1ad3      	subs	r3, r2, r3
 8009526:	2b02      	cmp	r3, #2
 8009528:	d901      	bls.n	800952e <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800952a:	2303      	movs	r3, #3
 800952c:	e08a      	b.n	8009644 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800952e:	4b47      	ldr	r3, [pc, #284]	@ (800964c <HAL_RCC_OscConfig+0x8ac>)
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009536:	2b00      	cmp	r3, #0
 8009538:	d0f0      	beq.n	800951c <HAL_RCC_OscConfig+0x77c>
 800953a:	e082      	b.n	8009642 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800953c:	4b43      	ldr	r3, [pc, #268]	@ (800964c <HAL_RCC_OscConfig+0x8ac>)
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	4a42      	ldr	r2, [pc, #264]	@ (800964c <HAL_RCC_OscConfig+0x8ac>)
 8009542:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009546:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009548:	f7fc fc46 	bl	8005dd8 <HAL_GetTick>
 800954c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800954e:	e008      	b.n	8009562 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009550:	f7fc fc42 	bl	8005dd8 <HAL_GetTick>
 8009554:	4602      	mov	r2, r0
 8009556:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009558:	1ad3      	subs	r3, r2, r3
 800955a:	2b02      	cmp	r3, #2
 800955c:	d901      	bls.n	8009562 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800955e:	2303      	movs	r3, #3
 8009560:	e070      	b.n	8009644 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009562:	4b3a      	ldr	r3, [pc, #232]	@ (800964c <HAL_RCC_OscConfig+0x8ac>)
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800956a:	2b00      	cmp	r3, #0
 800956c:	d1f0      	bne.n	8009550 <HAL_RCC_OscConfig+0x7b0>
 800956e:	e068      	b.n	8009642 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8009570:	4b36      	ldr	r3, [pc, #216]	@ (800964c <HAL_RCC_OscConfig+0x8ac>)
 8009572:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009574:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8009576:	4b35      	ldr	r3, [pc, #212]	@ (800964c <HAL_RCC_OscConfig+0x8ac>)
 8009578:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800957a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009580:	2b01      	cmp	r3, #1
 8009582:	d031      	beq.n	80095e8 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009584:	693b      	ldr	r3, [r7, #16]
 8009586:	f003 0203 	and.w	r2, r3, #3
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800958e:	429a      	cmp	r2, r3
 8009590:	d12a      	bne.n	80095e8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8009592:	693b      	ldr	r3, [r7, #16]
 8009594:	091b      	lsrs	r3, r3, #4
 8009596:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800959e:	429a      	cmp	r2, r3
 80095a0:	d122      	bne.n	80095e8 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80095ac:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80095ae:	429a      	cmp	r2, r3
 80095b0:	d11a      	bne.n	80095e8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	0a5b      	lsrs	r3, r3, #9
 80095b6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80095be:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80095c0:	429a      	cmp	r2, r3
 80095c2:	d111      	bne.n	80095e8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	0c1b      	lsrs	r3, r3, #16
 80095c8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80095d0:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80095d2:	429a      	cmp	r2, r3
 80095d4:	d108      	bne.n	80095e8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	0e1b      	lsrs	r3, r3, #24
 80095da:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80095e2:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80095e4:	429a      	cmp	r2, r3
 80095e6:	d001      	beq.n	80095ec <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80095e8:	2301      	movs	r3, #1
 80095ea:	e02b      	b.n	8009644 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80095ec:	4b17      	ldr	r3, [pc, #92]	@ (800964c <HAL_RCC_OscConfig+0x8ac>)
 80095ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80095f0:	08db      	lsrs	r3, r3, #3
 80095f2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80095f6:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80095fc:	693a      	ldr	r2, [r7, #16]
 80095fe:	429a      	cmp	r2, r3
 8009600:	d01f      	beq.n	8009642 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8009602:	4b12      	ldr	r3, [pc, #72]	@ (800964c <HAL_RCC_OscConfig+0x8ac>)
 8009604:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009606:	4a11      	ldr	r2, [pc, #68]	@ (800964c <HAL_RCC_OscConfig+0x8ac>)
 8009608:	f023 0301 	bic.w	r3, r3, #1
 800960c:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800960e:	f7fc fbe3 	bl	8005dd8 <HAL_GetTick>
 8009612:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8009614:	bf00      	nop
 8009616:	f7fc fbdf 	bl	8005dd8 <HAL_GetTick>
 800961a:	4602      	mov	r2, r0
 800961c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800961e:	4293      	cmp	r3, r2
 8009620:	d0f9      	beq.n	8009616 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8009622:	4b0a      	ldr	r3, [pc, #40]	@ (800964c <HAL_RCC_OscConfig+0x8ac>)
 8009624:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009626:	4b0a      	ldr	r3, [pc, #40]	@ (8009650 <HAL_RCC_OscConfig+0x8b0>)
 8009628:	4013      	ands	r3, r2
 800962a:	687a      	ldr	r2, [r7, #4]
 800962c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800962e:	00d2      	lsls	r2, r2, #3
 8009630:	4906      	ldr	r1, [pc, #24]	@ (800964c <HAL_RCC_OscConfig+0x8ac>)
 8009632:	4313      	orrs	r3, r2
 8009634:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8009636:	4b05      	ldr	r3, [pc, #20]	@ (800964c <HAL_RCC_OscConfig+0x8ac>)
 8009638:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800963a:	4a04      	ldr	r2, [pc, #16]	@ (800964c <HAL_RCC_OscConfig+0x8ac>)
 800963c:	f043 0301 	orr.w	r3, r3, #1
 8009640:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8009642:	2300      	movs	r3, #0
}
 8009644:	4618      	mov	r0, r3
 8009646:	3730      	adds	r7, #48	@ 0x30
 8009648:	46bd      	mov	sp, r7
 800964a:	bd80      	pop	{r7, pc}
 800964c:	58024400 	.word	0x58024400
 8009650:	ffff0007 	.word	0xffff0007

08009654 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009654:	b580      	push	{r7, lr}
 8009656:	b086      	sub	sp, #24
 8009658:	af00      	add	r7, sp, #0
 800965a:	6078      	str	r0, [r7, #4]
 800965c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	2b00      	cmp	r3, #0
 8009662:	d101      	bne.n	8009668 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009664:	2301      	movs	r3, #1
 8009666:	e19c      	b.n	80099a2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8009668:	4b8a      	ldr	r3, [pc, #552]	@ (8009894 <HAL_RCC_ClockConfig+0x240>)
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	f003 030f 	and.w	r3, r3, #15
 8009670:	683a      	ldr	r2, [r7, #0]
 8009672:	429a      	cmp	r2, r3
 8009674:	d910      	bls.n	8009698 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009676:	4b87      	ldr	r3, [pc, #540]	@ (8009894 <HAL_RCC_ClockConfig+0x240>)
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	f023 020f 	bic.w	r2, r3, #15
 800967e:	4985      	ldr	r1, [pc, #532]	@ (8009894 <HAL_RCC_ClockConfig+0x240>)
 8009680:	683b      	ldr	r3, [r7, #0]
 8009682:	4313      	orrs	r3, r2
 8009684:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009686:	4b83      	ldr	r3, [pc, #524]	@ (8009894 <HAL_RCC_ClockConfig+0x240>)
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	f003 030f 	and.w	r3, r3, #15
 800968e:	683a      	ldr	r2, [r7, #0]
 8009690:	429a      	cmp	r2, r3
 8009692:	d001      	beq.n	8009698 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8009694:	2301      	movs	r3, #1
 8009696:	e184      	b.n	80099a2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	f003 0304 	and.w	r3, r3, #4
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d010      	beq.n	80096c6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	691a      	ldr	r2, [r3, #16]
 80096a8:	4b7b      	ldr	r3, [pc, #492]	@ (8009898 <HAL_RCC_ClockConfig+0x244>)
 80096aa:	699b      	ldr	r3, [r3, #24]
 80096ac:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80096b0:	429a      	cmp	r2, r3
 80096b2:	d908      	bls.n	80096c6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80096b4:	4b78      	ldr	r3, [pc, #480]	@ (8009898 <HAL_RCC_ClockConfig+0x244>)
 80096b6:	699b      	ldr	r3, [r3, #24]
 80096b8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	691b      	ldr	r3, [r3, #16]
 80096c0:	4975      	ldr	r1, [pc, #468]	@ (8009898 <HAL_RCC_ClockConfig+0x244>)
 80096c2:	4313      	orrs	r3, r2
 80096c4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	f003 0308 	and.w	r3, r3, #8
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	d010      	beq.n	80096f4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	695a      	ldr	r2, [r3, #20]
 80096d6:	4b70      	ldr	r3, [pc, #448]	@ (8009898 <HAL_RCC_ClockConfig+0x244>)
 80096d8:	69db      	ldr	r3, [r3, #28]
 80096da:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80096de:	429a      	cmp	r2, r3
 80096e0:	d908      	bls.n	80096f4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80096e2:	4b6d      	ldr	r3, [pc, #436]	@ (8009898 <HAL_RCC_ClockConfig+0x244>)
 80096e4:	69db      	ldr	r3, [r3, #28]
 80096e6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	695b      	ldr	r3, [r3, #20]
 80096ee:	496a      	ldr	r1, [pc, #424]	@ (8009898 <HAL_RCC_ClockConfig+0x244>)
 80096f0:	4313      	orrs	r3, r2
 80096f2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	f003 0310 	and.w	r3, r3, #16
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d010      	beq.n	8009722 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	699a      	ldr	r2, [r3, #24]
 8009704:	4b64      	ldr	r3, [pc, #400]	@ (8009898 <HAL_RCC_ClockConfig+0x244>)
 8009706:	69db      	ldr	r3, [r3, #28]
 8009708:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800970c:	429a      	cmp	r2, r3
 800970e:	d908      	bls.n	8009722 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8009710:	4b61      	ldr	r3, [pc, #388]	@ (8009898 <HAL_RCC_ClockConfig+0x244>)
 8009712:	69db      	ldr	r3, [r3, #28]
 8009714:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	699b      	ldr	r3, [r3, #24]
 800971c:	495e      	ldr	r1, [pc, #376]	@ (8009898 <HAL_RCC_ClockConfig+0x244>)
 800971e:	4313      	orrs	r3, r2
 8009720:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	f003 0320 	and.w	r3, r3, #32
 800972a:	2b00      	cmp	r3, #0
 800972c:	d010      	beq.n	8009750 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	69da      	ldr	r2, [r3, #28]
 8009732:	4b59      	ldr	r3, [pc, #356]	@ (8009898 <HAL_RCC_ClockConfig+0x244>)
 8009734:	6a1b      	ldr	r3, [r3, #32]
 8009736:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800973a:	429a      	cmp	r2, r3
 800973c:	d908      	bls.n	8009750 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800973e:	4b56      	ldr	r3, [pc, #344]	@ (8009898 <HAL_RCC_ClockConfig+0x244>)
 8009740:	6a1b      	ldr	r3, [r3, #32]
 8009742:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	69db      	ldr	r3, [r3, #28]
 800974a:	4953      	ldr	r1, [pc, #332]	@ (8009898 <HAL_RCC_ClockConfig+0x244>)
 800974c:	4313      	orrs	r3, r2
 800974e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	f003 0302 	and.w	r3, r3, #2
 8009758:	2b00      	cmp	r3, #0
 800975a:	d010      	beq.n	800977e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	68da      	ldr	r2, [r3, #12]
 8009760:	4b4d      	ldr	r3, [pc, #308]	@ (8009898 <HAL_RCC_ClockConfig+0x244>)
 8009762:	699b      	ldr	r3, [r3, #24]
 8009764:	f003 030f 	and.w	r3, r3, #15
 8009768:	429a      	cmp	r2, r3
 800976a:	d908      	bls.n	800977e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800976c:	4b4a      	ldr	r3, [pc, #296]	@ (8009898 <HAL_RCC_ClockConfig+0x244>)
 800976e:	699b      	ldr	r3, [r3, #24]
 8009770:	f023 020f 	bic.w	r2, r3, #15
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	68db      	ldr	r3, [r3, #12]
 8009778:	4947      	ldr	r1, [pc, #284]	@ (8009898 <HAL_RCC_ClockConfig+0x244>)
 800977a:	4313      	orrs	r3, r2
 800977c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	f003 0301 	and.w	r3, r3, #1
 8009786:	2b00      	cmp	r3, #0
 8009788:	d055      	beq.n	8009836 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800978a:	4b43      	ldr	r3, [pc, #268]	@ (8009898 <HAL_RCC_ClockConfig+0x244>)
 800978c:	699b      	ldr	r3, [r3, #24]
 800978e:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	689b      	ldr	r3, [r3, #8]
 8009796:	4940      	ldr	r1, [pc, #256]	@ (8009898 <HAL_RCC_ClockConfig+0x244>)
 8009798:	4313      	orrs	r3, r2
 800979a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	685b      	ldr	r3, [r3, #4]
 80097a0:	2b02      	cmp	r3, #2
 80097a2:	d107      	bne.n	80097b4 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80097a4:	4b3c      	ldr	r3, [pc, #240]	@ (8009898 <HAL_RCC_ClockConfig+0x244>)
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d121      	bne.n	80097f4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80097b0:	2301      	movs	r3, #1
 80097b2:	e0f6      	b.n	80099a2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	685b      	ldr	r3, [r3, #4]
 80097b8:	2b03      	cmp	r3, #3
 80097ba:	d107      	bne.n	80097cc <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80097bc:	4b36      	ldr	r3, [pc, #216]	@ (8009898 <HAL_RCC_ClockConfig+0x244>)
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d115      	bne.n	80097f4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80097c8:	2301      	movs	r3, #1
 80097ca:	e0ea      	b.n	80099a2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	685b      	ldr	r3, [r3, #4]
 80097d0:	2b01      	cmp	r3, #1
 80097d2:	d107      	bne.n	80097e4 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80097d4:	4b30      	ldr	r3, [pc, #192]	@ (8009898 <HAL_RCC_ClockConfig+0x244>)
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80097dc:	2b00      	cmp	r3, #0
 80097de:	d109      	bne.n	80097f4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80097e0:	2301      	movs	r3, #1
 80097e2:	e0de      	b.n	80099a2 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80097e4:	4b2c      	ldr	r3, [pc, #176]	@ (8009898 <HAL_RCC_ClockConfig+0x244>)
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	f003 0304 	and.w	r3, r3, #4
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	d101      	bne.n	80097f4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80097f0:	2301      	movs	r3, #1
 80097f2:	e0d6      	b.n	80099a2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80097f4:	4b28      	ldr	r3, [pc, #160]	@ (8009898 <HAL_RCC_ClockConfig+0x244>)
 80097f6:	691b      	ldr	r3, [r3, #16]
 80097f8:	f023 0207 	bic.w	r2, r3, #7
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	685b      	ldr	r3, [r3, #4]
 8009800:	4925      	ldr	r1, [pc, #148]	@ (8009898 <HAL_RCC_ClockConfig+0x244>)
 8009802:	4313      	orrs	r3, r2
 8009804:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009806:	f7fc fae7 	bl	8005dd8 <HAL_GetTick>
 800980a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800980c:	e00a      	b.n	8009824 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800980e:	f7fc fae3 	bl	8005dd8 <HAL_GetTick>
 8009812:	4602      	mov	r2, r0
 8009814:	697b      	ldr	r3, [r7, #20]
 8009816:	1ad3      	subs	r3, r2, r3
 8009818:	f241 3288 	movw	r2, #5000	@ 0x1388
 800981c:	4293      	cmp	r3, r2
 800981e:	d901      	bls.n	8009824 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8009820:	2303      	movs	r3, #3
 8009822:	e0be      	b.n	80099a2 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009824:	4b1c      	ldr	r3, [pc, #112]	@ (8009898 <HAL_RCC_ClockConfig+0x244>)
 8009826:	691b      	ldr	r3, [r3, #16]
 8009828:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	685b      	ldr	r3, [r3, #4]
 8009830:	00db      	lsls	r3, r3, #3
 8009832:	429a      	cmp	r2, r3
 8009834:	d1eb      	bne.n	800980e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	f003 0302 	and.w	r3, r3, #2
 800983e:	2b00      	cmp	r3, #0
 8009840:	d010      	beq.n	8009864 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	68da      	ldr	r2, [r3, #12]
 8009846:	4b14      	ldr	r3, [pc, #80]	@ (8009898 <HAL_RCC_ClockConfig+0x244>)
 8009848:	699b      	ldr	r3, [r3, #24]
 800984a:	f003 030f 	and.w	r3, r3, #15
 800984e:	429a      	cmp	r2, r3
 8009850:	d208      	bcs.n	8009864 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009852:	4b11      	ldr	r3, [pc, #68]	@ (8009898 <HAL_RCC_ClockConfig+0x244>)
 8009854:	699b      	ldr	r3, [r3, #24]
 8009856:	f023 020f 	bic.w	r2, r3, #15
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	68db      	ldr	r3, [r3, #12]
 800985e:	490e      	ldr	r1, [pc, #56]	@ (8009898 <HAL_RCC_ClockConfig+0x244>)
 8009860:	4313      	orrs	r3, r2
 8009862:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8009864:	4b0b      	ldr	r3, [pc, #44]	@ (8009894 <HAL_RCC_ClockConfig+0x240>)
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	f003 030f 	and.w	r3, r3, #15
 800986c:	683a      	ldr	r2, [r7, #0]
 800986e:	429a      	cmp	r2, r3
 8009870:	d214      	bcs.n	800989c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009872:	4b08      	ldr	r3, [pc, #32]	@ (8009894 <HAL_RCC_ClockConfig+0x240>)
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	f023 020f 	bic.w	r2, r3, #15
 800987a:	4906      	ldr	r1, [pc, #24]	@ (8009894 <HAL_RCC_ClockConfig+0x240>)
 800987c:	683b      	ldr	r3, [r7, #0]
 800987e:	4313      	orrs	r3, r2
 8009880:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009882:	4b04      	ldr	r3, [pc, #16]	@ (8009894 <HAL_RCC_ClockConfig+0x240>)
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	f003 030f 	and.w	r3, r3, #15
 800988a:	683a      	ldr	r2, [r7, #0]
 800988c:	429a      	cmp	r2, r3
 800988e:	d005      	beq.n	800989c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8009890:	2301      	movs	r3, #1
 8009892:	e086      	b.n	80099a2 <HAL_RCC_ClockConfig+0x34e>
 8009894:	52002000 	.word	0x52002000
 8009898:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	f003 0304 	and.w	r3, r3, #4
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d010      	beq.n	80098ca <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	691a      	ldr	r2, [r3, #16]
 80098ac:	4b3f      	ldr	r3, [pc, #252]	@ (80099ac <HAL_RCC_ClockConfig+0x358>)
 80098ae:	699b      	ldr	r3, [r3, #24]
 80098b0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80098b4:	429a      	cmp	r2, r3
 80098b6:	d208      	bcs.n	80098ca <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80098b8:	4b3c      	ldr	r3, [pc, #240]	@ (80099ac <HAL_RCC_ClockConfig+0x358>)
 80098ba:	699b      	ldr	r3, [r3, #24]
 80098bc:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	691b      	ldr	r3, [r3, #16]
 80098c4:	4939      	ldr	r1, [pc, #228]	@ (80099ac <HAL_RCC_ClockConfig+0x358>)
 80098c6:	4313      	orrs	r3, r2
 80098c8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	f003 0308 	and.w	r3, r3, #8
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	d010      	beq.n	80098f8 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	695a      	ldr	r2, [r3, #20]
 80098da:	4b34      	ldr	r3, [pc, #208]	@ (80099ac <HAL_RCC_ClockConfig+0x358>)
 80098dc:	69db      	ldr	r3, [r3, #28]
 80098de:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80098e2:	429a      	cmp	r2, r3
 80098e4:	d208      	bcs.n	80098f8 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80098e6:	4b31      	ldr	r3, [pc, #196]	@ (80099ac <HAL_RCC_ClockConfig+0x358>)
 80098e8:	69db      	ldr	r3, [r3, #28]
 80098ea:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	695b      	ldr	r3, [r3, #20]
 80098f2:	492e      	ldr	r1, [pc, #184]	@ (80099ac <HAL_RCC_ClockConfig+0x358>)
 80098f4:	4313      	orrs	r3, r2
 80098f6:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	f003 0310 	and.w	r3, r3, #16
 8009900:	2b00      	cmp	r3, #0
 8009902:	d010      	beq.n	8009926 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	699a      	ldr	r2, [r3, #24]
 8009908:	4b28      	ldr	r3, [pc, #160]	@ (80099ac <HAL_RCC_ClockConfig+0x358>)
 800990a:	69db      	ldr	r3, [r3, #28]
 800990c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8009910:	429a      	cmp	r2, r3
 8009912:	d208      	bcs.n	8009926 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8009914:	4b25      	ldr	r3, [pc, #148]	@ (80099ac <HAL_RCC_ClockConfig+0x358>)
 8009916:	69db      	ldr	r3, [r3, #28]
 8009918:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	699b      	ldr	r3, [r3, #24]
 8009920:	4922      	ldr	r1, [pc, #136]	@ (80099ac <HAL_RCC_ClockConfig+0x358>)
 8009922:	4313      	orrs	r3, r2
 8009924:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	f003 0320 	and.w	r3, r3, #32
 800992e:	2b00      	cmp	r3, #0
 8009930:	d010      	beq.n	8009954 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	69da      	ldr	r2, [r3, #28]
 8009936:	4b1d      	ldr	r3, [pc, #116]	@ (80099ac <HAL_RCC_ClockConfig+0x358>)
 8009938:	6a1b      	ldr	r3, [r3, #32]
 800993a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800993e:	429a      	cmp	r2, r3
 8009940:	d208      	bcs.n	8009954 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8009942:	4b1a      	ldr	r3, [pc, #104]	@ (80099ac <HAL_RCC_ClockConfig+0x358>)
 8009944:	6a1b      	ldr	r3, [r3, #32]
 8009946:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	69db      	ldr	r3, [r3, #28]
 800994e:	4917      	ldr	r1, [pc, #92]	@ (80099ac <HAL_RCC_ClockConfig+0x358>)
 8009950:	4313      	orrs	r3, r2
 8009952:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8009954:	f000 f834 	bl	80099c0 <HAL_RCC_GetSysClockFreq>
 8009958:	4602      	mov	r2, r0
 800995a:	4b14      	ldr	r3, [pc, #80]	@ (80099ac <HAL_RCC_ClockConfig+0x358>)
 800995c:	699b      	ldr	r3, [r3, #24]
 800995e:	0a1b      	lsrs	r3, r3, #8
 8009960:	f003 030f 	and.w	r3, r3, #15
 8009964:	4912      	ldr	r1, [pc, #72]	@ (80099b0 <HAL_RCC_ClockConfig+0x35c>)
 8009966:	5ccb      	ldrb	r3, [r1, r3]
 8009968:	f003 031f 	and.w	r3, r3, #31
 800996c:	fa22 f303 	lsr.w	r3, r2, r3
 8009970:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009972:	4b0e      	ldr	r3, [pc, #56]	@ (80099ac <HAL_RCC_ClockConfig+0x358>)
 8009974:	699b      	ldr	r3, [r3, #24]
 8009976:	f003 030f 	and.w	r3, r3, #15
 800997a:	4a0d      	ldr	r2, [pc, #52]	@ (80099b0 <HAL_RCC_ClockConfig+0x35c>)
 800997c:	5cd3      	ldrb	r3, [r2, r3]
 800997e:	f003 031f 	and.w	r3, r3, #31
 8009982:	693a      	ldr	r2, [r7, #16]
 8009984:	fa22 f303 	lsr.w	r3, r2, r3
 8009988:	4a0a      	ldr	r2, [pc, #40]	@ (80099b4 <HAL_RCC_ClockConfig+0x360>)
 800998a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800998c:	4a0a      	ldr	r2, [pc, #40]	@ (80099b8 <HAL_RCC_ClockConfig+0x364>)
 800998e:	693b      	ldr	r3, [r7, #16]
 8009990:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8009992:	4b0a      	ldr	r3, [pc, #40]	@ (80099bc <HAL_RCC_ClockConfig+0x368>)
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	4618      	mov	r0, r3
 8009998:	f7fc f9d4 	bl	8005d44 <HAL_InitTick>
 800999c:	4603      	mov	r3, r0
 800999e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80099a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80099a2:	4618      	mov	r0, r3
 80099a4:	3718      	adds	r7, #24
 80099a6:	46bd      	mov	sp, r7
 80099a8:	bd80      	pop	{r7, pc}
 80099aa:	bf00      	nop
 80099ac:	58024400 	.word	0x58024400
 80099b0:	08014b38 	.word	0x08014b38
 80099b4:	2400005c 	.word	0x2400005c
 80099b8:	24000058 	.word	0x24000058
 80099bc:	24000060 	.word	0x24000060

080099c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80099c0:	b480      	push	{r7}
 80099c2:	b089      	sub	sp, #36	@ 0x24
 80099c4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80099c6:	4bb3      	ldr	r3, [pc, #716]	@ (8009c94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80099c8:	691b      	ldr	r3, [r3, #16]
 80099ca:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80099ce:	2b18      	cmp	r3, #24
 80099d0:	f200 8155 	bhi.w	8009c7e <HAL_RCC_GetSysClockFreq+0x2be>
 80099d4:	a201      	add	r2, pc, #4	@ (adr r2, 80099dc <HAL_RCC_GetSysClockFreq+0x1c>)
 80099d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099da:	bf00      	nop
 80099dc:	08009a41 	.word	0x08009a41
 80099e0:	08009c7f 	.word	0x08009c7f
 80099e4:	08009c7f 	.word	0x08009c7f
 80099e8:	08009c7f 	.word	0x08009c7f
 80099ec:	08009c7f 	.word	0x08009c7f
 80099f0:	08009c7f 	.word	0x08009c7f
 80099f4:	08009c7f 	.word	0x08009c7f
 80099f8:	08009c7f 	.word	0x08009c7f
 80099fc:	08009a67 	.word	0x08009a67
 8009a00:	08009c7f 	.word	0x08009c7f
 8009a04:	08009c7f 	.word	0x08009c7f
 8009a08:	08009c7f 	.word	0x08009c7f
 8009a0c:	08009c7f 	.word	0x08009c7f
 8009a10:	08009c7f 	.word	0x08009c7f
 8009a14:	08009c7f 	.word	0x08009c7f
 8009a18:	08009c7f 	.word	0x08009c7f
 8009a1c:	08009a6d 	.word	0x08009a6d
 8009a20:	08009c7f 	.word	0x08009c7f
 8009a24:	08009c7f 	.word	0x08009c7f
 8009a28:	08009c7f 	.word	0x08009c7f
 8009a2c:	08009c7f 	.word	0x08009c7f
 8009a30:	08009c7f 	.word	0x08009c7f
 8009a34:	08009c7f 	.word	0x08009c7f
 8009a38:	08009c7f 	.word	0x08009c7f
 8009a3c:	08009a73 	.word	0x08009a73
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009a40:	4b94      	ldr	r3, [pc, #592]	@ (8009c94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	f003 0320 	and.w	r3, r3, #32
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d009      	beq.n	8009a60 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009a4c:	4b91      	ldr	r3, [pc, #580]	@ (8009c94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	08db      	lsrs	r3, r3, #3
 8009a52:	f003 0303 	and.w	r3, r3, #3
 8009a56:	4a90      	ldr	r2, [pc, #576]	@ (8009c98 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009a58:	fa22 f303 	lsr.w	r3, r2, r3
 8009a5c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8009a5e:	e111      	b.n	8009c84 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8009a60:	4b8d      	ldr	r3, [pc, #564]	@ (8009c98 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009a62:	61bb      	str	r3, [r7, #24]
      break;
 8009a64:	e10e      	b.n	8009c84 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8009a66:	4b8d      	ldr	r3, [pc, #564]	@ (8009c9c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8009a68:	61bb      	str	r3, [r7, #24]
      break;
 8009a6a:	e10b      	b.n	8009c84 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8009a6c:	4b8c      	ldr	r3, [pc, #560]	@ (8009ca0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8009a6e:	61bb      	str	r3, [r7, #24]
      break;
 8009a70:	e108      	b.n	8009c84 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009a72:	4b88      	ldr	r3, [pc, #544]	@ (8009c94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009a74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a76:	f003 0303 	and.w	r3, r3, #3
 8009a7a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8009a7c:	4b85      	ldr	r3, [pc, #532]	@ (8009c94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009a7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a80:	091b      	lsrs	r3, r3, #4
 8009a82:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009a86:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8009a88:	4b82      	ldr	r3, [pc, #520]	@ (8009c94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009a8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a8c:	f003 0301 	and.w	r3, r3, #1
 8009a90:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8009a92:	4b80      	ldr	r3, [pc, #512]	@ (8009c94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009a94:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009a96:	08db      	lsrs	r3, r3, #3
 8009a98:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009a9c:	68fa      	ldr	r2, [r7, #12]
 8009a9e:	fb02 f303 	mul.w	r3, r2, r3
 8009aa2:	ee07 3a90 	vmov	s15, r3
 8009aa6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009aaa:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8009aae:	693b      	ldr	r3, [r7, #16]
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	f000 80e1 	beq.w	8009c78 <HAL_RCC_GetSysClockFreq+0x2b8>
 8009ab6:	697b      	ldr	r3, [r7, #20]
 8009ab8:	2b02      	cmp	r3, #2
 8009aba:	f000 8083 	beq.w	8009bc4 <HAL_RCC_GetSysClockFreq+0x204>
 8009abe:	697b      	ldr	r3, [r7, #20]
 8009ac0:	2b02      	cmp	r3, #2
 8009ac2:	f200 80a1 	bhi.w	8009c08 <HAL_RCC_GetSysClockFreq+0x248>
 8009ac6:	697b      	ldr	r3, [r7, #20]
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	d003      	beq.n	8009ad4 <HAL_RCC_GetSysClockFreq+0x114>
 8009acc:	697b      	ldr	r3, [r7, #20]
 8009ace:	2b01      	cmp	r3, #1
 8009ad0:	d056      	beq.n	8009b80 <HAL_RCC_GetSysClockFreq+0x1c0>
 8009ad2:	e099      	b.n	8009c08 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009ad4:	4b6f      	ldr	r3, [pc, #444]	@ (8009c94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	f003 0320 	and.w	r3, r3, #32
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	d02d      	beq.n	8009b3c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009ae0:	4b6c      	ldr	r3, [pc, #432]	@ (8009c94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	08db      	lsrs	r3, r3, #3
 8009ae6:	f003 0303 	and.w	r3, r3, #3
 8009aea:	4a6b      	ldr	r2, [pc, #428]	@ (8009c98 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009aec:	fa22 f303 	lsr.w	r3, r2, r3
 8009af0:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	ee07 3a90 	vmov	s15, r3
 8009af8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009afc:	693b      	ldr	r3, [r7, #16]
 8009afe:	ee07 3a90 	vmov	s15, r3
 8009b02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009b0a:	4b62      	ldr	r3, [pc, #392]	@ (8009c94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009b0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009b0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b12:	ee07 3a90 	vmov	s15, r3
 8009b16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009b1a:	ed97 6a02 	vldr	s12, [r7, #8]
 8009b1e:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8009ca4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009b22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009b26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009b2a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009b2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009b32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009b36:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8009b3a:	e087      	b.n	8009c4c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009b3c:	693b      	ldr	r3, [r7, #16]
 8009b3e:	ee07 3a90 	vmov	s15, r3
 8009b42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b46:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8009ca8 <HAL_RCC_GetSysClockFreq+0x2e8>
 8009b4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009b4e:	4b51      	ldr	r3, [pc, #324]	@ (8009c94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009b50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009b52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b56:	ee07 3a90 	vmov	s15, r3
 8009b5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009b5e:	ed97 6a02 	vldr	s12, [r7, #8]
 8009b62:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8009ca4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009b66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009b6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009b6e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009b72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009b76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009b7a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8009b7e:	e065      	b.n	8009c4c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009b80:	693b      	ldr	r3, [r7, #16]
 8009b82:	ee07 3a90 	vmov	s15, r3
 8009b86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b8a:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8009cac <HAL_RCC_GetSysClockFreq+0x2ec>
 8009b8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009b92:	4b40      	ldr	r3, [pc, #256]	@ (8009c94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009b94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009b96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b9a:	ee07 3a90 	vmov	s15, r3
 8009b9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009ba2:	ed97 6a02 	vldr	s12, [r7, #8]
 8009ba6:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8009ca4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009baa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009bae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009bb2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009bb6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009bba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009bbe:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8009bc2:	e043      	b.n	8009c4c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009bc4:	693b      	ldr	r3, [r7, #16]
 8009bc6:	ee07 3a90 	vmov	s15, r3
 8009bca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009bce:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8009cb0 <HAL_RCC_GetSysClockFreq+0x2f0>
 8009bd2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009bd6:	4b2f      	ldr	r3, [pc, #188]	@ (8009c94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009bd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009bda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009bde:	ee07 3a90 	vmov	s15, r3
 8009be2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009be6:	ed97 6a02 	vldr	s12, [r7, #8]
 8009bea:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8009ca4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009bee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009bf2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009bf6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009bfa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009bfe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009c02:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8009c06:	e021      	b.n	8009c4c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009c08:	693b      	ldr	r3, [r7, #16]
 8009c0a:	ee07 3a90 	vmov	s15, r3
 8009c0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c12:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8009cac <HAL_RCC_GetSysClockFreq+0x2ec>
 8009c16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009c1a:	4b1e      	ldr	r3, [pc, #120]	@ (8009c94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009c1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009c1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c22:	ee07 3a90 	vmov	s15, r3
 8009c26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009c2a:	ed97 6a02 	vldr	s12, [r7, #8]
 8009c2e:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8009ca4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009c32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009c36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009c3a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009c3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009c42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009c46:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8009c4a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8009c4c:	4b11      	ldr	r3, [pc, #68]	@ (8009c94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009c4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009c50:	0a5b      	lsrs	r3, r3, #9
 8009c52:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009c56:	3301      	adds	r3, #1
 8009c58:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8009c5a:	683b      	ldr	r3, [r7, #0]
 8009c5c:	ee07 3a90 	vmov	s15, r3
 8009c60:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8009c64:	edd7 6a07 	vldr	s13, [r7, #28]
 8009c68:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009c6c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009c70:	ee17 3a90 	vmov	r3, s15
 8009c74:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8009c76:	e005      	b.n	8009c84 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8009c78:	2300      	movs	r3, #0
 8009c7a:	61bb      	str	r3, [r7, #24]
      break;
 8009c7c:	e002      	b.n	8009c84 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8009c7e:	4b07      	ldr	r3, [pc, #28]	@ (8009c9c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8009c80:	61bb      	str	r3, [r7, #24]
      break;
 8009c82:	bf00      	nop
  }

  return sysclockfreq;
 8009c84:	69bb      	ldr	r3, [r7, #24]
}
 8009c86:	4618      	mov	r0, r3
 8009c88:	3724      	adds	r7, #36	@ 0x24
 8009c8a:	46bd      	mov	sp, r7
 8009c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c90:	4770      	bx	lr
 8009c92:	bf00      	nop
 8009c94:	58024400 	.word	0x58024400
 8009c98:	03d09000 	.word	0x03d09000
 8009c9c:	003d0900 	.word	0x003d0900
 8009ca0:	017d7840 	.word	0x017d7840
 8009ca4:	46000000 	.word	0x46000000
 8009ca8:	4c742400 	.word	0x4c742400
 8009cac:	4a742400 	.word	0x4a742400
 8009cb0:	4bbebc20 	.word	0x4bbebc20

08009cb4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009cb4:	b580      	push	{r7, lr}
 8009cb6:	b082      	sub	sp, #8
 8009cb8:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8009cba:	f7ff fe81 	bl	80099c0 <HAL_RCC_GetSysClockFreq>
 8009cbe:	4602      	mov	r2, r0
 8009cc0:	4b10      	ldr	r3, [pc, #64]	@ (8009d04 <HAL_RCC_GetHCLKFreq+0x50>)
 8009cc2:	699b      	ldr	r3, [r3, #24]
 8009cc4:	0a1b      	lsrs	r3, r3, #8
 8009cc6:	f003 030f 	and.w	r3, r3, #15
 8009cca:	490f      	ldr	r1, [pc, #60]	@ (8009d08 <HAL_RCC_GetHCLKFreq+0x54>)
 8009ccc:	5ccb      	ldrb	r3, [r1, r3]
 8009cce:	f003 031f 	and.w	r3, r3, #31
 8009cd2:	fa22 f303 	lsr.w	r3, r2, r3
 8009cd6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009cd8:	4b0a      	ldr	r3, [pc, #40]	@ (8009d04 <HAL_RCC_GetHCLKFreq+0x50>)
 8009cda:	699b      	ldr	r3, [r3, #24]
 8009cdc:	f003 030f 	and.w	r3, r3, #15
 8009ce0:	4a09      	ldr	r2, [pc, #36]	@ (8009d08 <HAL_RCC_GetHCLKFreq+0x54>)
 8009ce2:	5cd3      	ldrb	r3, [r2, r3]
 8009ce4:	f003 031f 	and.w	r3, r3, #31
 8009ce8:	687a      	ldr	r2, [r7, #4]
 8009cea:	fa22 f303 	lsr.w	r3, r2, r3
 8009cee:	4a07      	ldr	r2, [pc, #28]	@ (8009d0c <HAL_RCC_GetHCLKFreq+0x58>)
 8009cf0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8009cf2:	4a07      	ldr	r2, [pc, #28]	@ (8009d10 <HAL_RCC_GetHCLKFreq+0x5c>)
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8009cf8:	4b04      	ldr	r3, [pc, #16]	@ (8009d0c <HAL_RCC_GetHCLKFreq+0x58>)
 8009cfa:	681b      	ldr	r3, [r3, #0]
}
 8009cfc:	4618      	mov	r0, r3
 8009cfe:	3708      	adds	r7, #8
 8009d00:	46bd      	mov	sp, r7
 8009d02:	bd80      	pop	{r7, pc}
 8009d04:	58024400 	.word	0x58024400
 8009d08:	08014b38 	.word	0x08014b38
 8009d0c:	2400005c 	.word	0x2400005c
 8009d10:	24000058 	.word	0x24000058

08009d14 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009d14:	b580      	push	{r7, lr}
 8009d16:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8009d18:	f7ff ffcc 	bl	8009cb4 <HAL_RCC_GetHCLKFreq>
 8009d1c:	4602      	mov	r2, r0
 8009d1e:	4b06      	ldr	r3, [pc, #24]	@ (8009d38 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009d20:	69db      	ldr	r3, [r3, #28]
 8009d22:	091b      	lsrs	r3, r3, #4
 8009d24:	f003 0307 	and.w	r3, r3, #7
 8009d28:	4904      	ldr	r1, [pc, #16]	@ (8009d3c <HAL_RCC_GetPCLK1Freq+0x28>)
 8009d2a:	5ccb      	ldrb	r3, [r1, r3]
 8009d2c:	f003 031f 	and.w	r3, r3, #31
 8009d30:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8009d34:	4618      	mov	r0, r3
 8009d36:	bd80      	pop	{r7, pc}
 8009d38:	58024400 	.word	0x58024400
 8009d3c:	08014b38 	.word	0x08014b38

08009d40 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009d40:	b580      	push	{r7, lr}
 8009d42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8009d44:	f7ff ffb6 	bl	8009cb4 <HAL_RCC_GetHCLKFreq>
 8009d48:	4602      	mov	r2, r0
 8009d4a:	4b06      	ldr	r3, [pc, #24]	@ (8009d64 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009d4c:	69db      	ldr	r3, [r3, #28]
 8009d4e:	0a1b      	lsrs	r3, r3, #8
 8009d50:	f003 0307 	and.w	r3, r3, #7
 8009d54:	4904      	ldr	r1, [pc, #16]	@ (8009d68 <HAL_RCC_GetPCLK2Freq+0x28>)
 8009d56:	5ccb      	ldrb	r3, [r1, r3]
 8009d58:	f003 031f 	and.w	r3, r3, #31
 8009d5c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8009d60:	4618      	mov	r0, r3
 8009d62:	bd80      	pop	{r7, pc}
 8009d64:	58024400 	.word	0x58024400
 8009d68:	08014b38 	.word	0x08014b38

08009d6c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009d6c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009d70:	b0ca      	sub	sp, #296	@ 0x128
 8009d72:	af00      	add	r7, sp, #0
 8009d74:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8009d78:	2300      	movs	r3, #0
 8009d7a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8009d7e:	2300      	movs	r3, #0
 8009d80:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8009d84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009d88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d8c:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8009d90:	2500      	movs	r5, #0
 8009d92:	ea54 0305 	orrs.w	r3, r4, r5
 8009d96:	d049      	beq.n	8009e2c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8009d98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009d9c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009d9e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8009da2:	d02f      	beq.n	8009e04 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8009da4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8009da8:	d828      	bhi.n	8009dfc <HAL_RCCEx_PeriphCLKConfig+0x90>
 8009daa:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009dae:	d01a      	beq.n	8009de6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8009db0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009db4:	d822      	bhi.n	8009dfc <HAL_RCCEx_PeriphCLKConfig+0x90>
 8009db6:	2b00      	cmp	r3, #0
 8009db8:	d003      	beq.n	8009dc2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8009dba:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009dbe:	d007      	beq.n	8009dd0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8009dc0:	e01c      	b.n	8009dfc <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009dc2:	4bb8      	ldr	r3, [pc, #736]	@ (800a0a4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009dc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009dc6:	4ab7      	ldr	r2, [pc, #732]	@ (800a0a4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009dc8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009dcc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8009dce:	e01a      	b.n	8009e06 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009dd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009dd4:	3308      	adds	r3, #8
 8009dd6:	2102      	movs	r1, #2
 8009dd8:	4618      	mov	r0, r3
 8009dda:	f002 fb61 	bl	800c4a0 <RCCEx_PLL2_Config>
 8009dde:	4603      	mov	r3, r0
 8009de0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8009de4:	e00f      	b.n	8009e06 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009de6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009dea:	3328      	adds	r3, #40	@ 0x28
 8009dec:	2102      	movs	r1, #2
 8009dee:	4618      	mov	r0, r3
 8009df0:	f002 fc08 	bl	800c604 <RCCEx_PLL3_Config>
 8009df4:	4603      	mov	r3, r0
 8009df6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8009dfa:	e004      	b.n	8009e06 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009dfc:	2301      	movs	r3, #1
 8009dfe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009e02:	e000      	b.n	8009e06 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8009e04:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009e06:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	d10a      	bne.n	8009e24 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8009e0e:	4ba5      	ldr	r3, [pc, #660]	@ (800a0a4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009e10:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009e12:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8009e16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009e1a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009e1c:	4aa1      	ldr	r2, [pc, #644]	@ (800a0a4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009e1e:	430b      	orrs	r3, r1
 8009e20:	6513      	str	r3, [r2, #80]	@ 0x50
 8009e22:	e003      	b.n	8009e2c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009e24:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009e28:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8009e2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009e30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e34:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8009e38:	f04f 0900 	mov.w	r9, #0
 8009e3c:	ea58 0309 	orrs.w	r3, r8, r9
 8009e40:	d047      	beq.n	8009ed2 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8009e42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009e46:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009e48:	2b04      	cmp	r3, #4
 8009e4a:	d82a      	bhi.n	8009ea2 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8009e4c:	a201      	add	r2, pc, #4	@ (adr r2, 8009e54 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8009e4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e52:	bf00      	nop
 8009e54:	08009e69 	.word	0x08009e69
 8009e58:	08009e77 	.word	0x08009e77
 8009e5c:	08009e8d 	.word	0x08009e8d
 8009e60:	08009eab 	.word	0x08009eab
 8009e64:	08009eab 	.word	0x08009eab
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009e68:	4b8e      	ldr	r3, [pc, #568]	@ (800a0a4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009e6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e6c:	4a8d      	ldr	r2, [pc, #564]	@ (800a0a4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009e6e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009e72:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009e74:	e01a      	b.n	8009eac <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009e76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009e7a:	3308      	adds	r3, #8
 8009e7c:	2100      	movs	r1, #0
 8009e7e:	4618      	mov	r0, r3
 8009e80:	f002 fb0e 	bl	800c4a0 <RCCEx_PLL2_Config>
 8009e84:	4603      	mov	r3, r0
 8009e86:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009e8a:	e00f      	b.n	8009eac <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009e8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009e90:	3328      	adds	r3, #40	@ 0x28
 8009e92:	2100      	movs	r1, #0
 8009e94:	4618      	mov	r0, r3
 8009e96:	f002 fbb5 	bl	800c604 <RCCEx_PLL3_Config>
 8009e9a:	4603      	mov	r3, r0
 8009e9c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009ea0:	e004      	b.n	8009eac <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009ea2:	2301      	movs	r3, #1
 8009ea4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009ea8:	e000      	b.n	8009eac <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8009eaa:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009eac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	d10a      	bne.n	8009eca <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009eb4:	4b7b      	ldr	r3, [pc, #492]	@ (800a0a4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009eb6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009eb8:	f023 0107 	bic.w	r1, r3, #7
 8009ebc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009ec0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009ec2:	4a78      	ldr	r2, [pc, #480]	@ (800a0a4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009ec4:	430b      	orrs	r3, r1
 8009ec6:	6513      	str	r3, [r2, #80]	@ 0x50
 8009ec8:	e003      	b.n	8009ed2 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009eca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009ece:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8009ed2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009ed6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009eda:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8009ede:	f04f 0b00 	mov.w	fp, #0
 8009ee2:	ea5a 030b 	orrs.w	r3, sl, fp
 8009ee6:	d04c      	beq.n	8009f82 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8009ee8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009eec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009eee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009ef2:	d030      	beq.n	8009f56 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8009ef4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009ef8:	d829      	bhi.n	8009f4e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8009efa:	2bc0      	cmp	r3, #192	@ 0xc0
 8009efc:	d02d      	beq.n	8009f5a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8009efe:	2bc0      	cmp	r3, #192	@ 0xc0
 8009f00:	d825      	bhi.n	8009f4e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8009f02:	2b80      	cmp	r3, #128	@ 0x80
 8009f04:	d018      	beq.n	8009f38 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8009f06:	2b80      	cmp	r3, #128	@ 0x80
 8009f08:	d821      	bhi.n	8009f4e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	d002      	beq.n	8009f14 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8009f0e:	2b40      	cmp	r3, #64	@ 0x40
 8009f10:	d007      	beq.n	8009f22 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8009f12:	e01c      	b.n	8009f4e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009f14:	4b63      	ldr	r3, [pc, #396]	@ (800a0a4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009f16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f18:	4a62      	ldr	r2, [pc, #392]	@ (800a0a4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009f1a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009f1e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8009f20:	e01c      	b.n	8009f5c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009f22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009f26:	3308      	adds	r3, #8
 8009f28:	2100      	movs	r1, #0
 8009f2a:	4618      	mov	r0, r3
 8009f2c:	f002 fab8 	bl	800c4a0 <RCCEx_PLL2_Config>
 8009f30:	4603      	mov	r3, r0
 8009f32:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8009f36:	e011      	b.n	8009f5c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009f38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009f3c:	3328      	adds	r3, #40	@ 0x28
 8009f3e:	2100      	movs	r1, #0
 8009f40:	4618      	mov	r0, r3
 8009f42:	f002 fb5f 	bl	800c604 <RCCEx_PLL3_Config>
 8009f46:	4603      	mov	r3, r0
 8009f48:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8009f4c:	e006      	b.n	8009f5c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009f4e:	2301      	movs	r3, #1
 8009f50:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009f54:	e002      	b.n	8009f5c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8009f56:	bf00      	nop
 8009f58:	e000      	b.n	8009f5c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8009f5a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009f5c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	d10a      	bne.n	8009f7a <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8009f64:	4b4f      	ldr	r3, [pc, #316]	@ (800a0a4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009f66:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009f68:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8009f6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009f70:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009f72:	4a4c      	ldr	r2, [pc, #304]	@ (800a0a4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009f74:	430b      	orrs	r3, r1
 8009f76:	6513      	str	r3, [r2, #80]	@ 0x50
 8009f78:	e003      	b.n	8009f82 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009f7a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009f7e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8009f82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009f86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f8a:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8009f8e:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8009f92:	2300      	movs	r3, #0
 8009f94:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8009f98:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8009f9c:	460b      	mov	r3, r1
 8009f9e:	4313      	orrs	r3, r2
 8009fa0:	d053      	beq.n	800a04a <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8009fa2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009fa6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8009faa:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8009fae:	d035      	beq.n	800a01c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8009fb0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8009fb4:	d82e      	bhi.n	800a014 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8009fb6:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8009fba:	d031      	beq.n	800a020 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8009fbc:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8009fc0:	d828      	bhi.n	800a014 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8009fc2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009fc6:	d01a      	beq.n	8009ffe <HAL_RCCEx_PeriphCLKConfig+0x292>
 8009fc8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009fcc:	d822      	bhi.n	800a014 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	d003      	beq.n	8009fda <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8009fd2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009fd6:	d007      	beq.n	8009fe8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8009fd8:	e01c      	b.n	800a014 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009fda:	4b32      	ldr	r3, [pc, #200]	@ (800a0a4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009fdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009fde:	4a31      	ldr	r2, [pc, #196]	@ (800a0a4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009fe0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009fe4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009fe6:	e01c      	b.n	800a022 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009fe8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009fec:	3308      	adds	r3, #8
 8009fee:	2100      	movs	r1, #0
 8009ff0:	4618      	mov	r0, r3
 8009ff2:	f002 fa55 	bl	800c4a0 <RCCEx_PLL2_Config>
 8009ff6:	4603      	mov	r3, r0
 8009ff8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8009ffc:	e011      	b.n	800a022 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009ffe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a002:	3328      	adds	r3, #40	@ 0x28
 800a004:	2100      	movs	r1, #0
 800a006:	4618      	mov	r0, r3
 800a008:	f002 fafc 	bl	800c604 <RCCEx_PLL3_Config>
 800a00c:	4603      	mov	r3, r0
 800a00e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a012:	e006      	b.n	800a022 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800a014:	2301      	movs	r3, #1
 800a016:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a01a:	e002      	b.n	800a022 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800a01c:	bf00      	nop
 800a01e:	e000      	b.n	800a022 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800a020:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a022:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a026:	2b00      	cmp	r3, #0
 800a028:	d10b      	bne.n	800a042 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800a02a:	4b1e      	ldr	r3, [pc, #120]	@ (800a0a4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a02c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a02e:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 800a032:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a036:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800a03a:	4a1a      	ldr	r2, [pc, #104]	@ (800a0a4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a03c:	430b      	orrs	r3, r1
 800a03e:	6593      	str	r3, [r2, #88]	@ 0x58
 800a040:	e003      	b.n	800a04a <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a042:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a046:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800a04a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a04e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a052:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800a056:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800a05a:	2300      	movs	r3, #0
 800a05c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800a060:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 800a064:	460b      	mov	r3, r1
 800a066:	4313      	orrs	r3, r2
 800a068:	d056      	beq.n	800a118 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800a06a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a06e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800a072:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800a076:	d038      	beq.n	800a0ea <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800a078:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800a07c:	d831      	bhi.n	800a0e2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800a07e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800a082:	d034      	beq.n	800a0ee <HAL_RCCEx_PeriphCLKConfig+0x382>
 800a084:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800a088:	d82b      	bhi.n	800a0e2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800a08a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a08e:	d01d      	beq.n	800a0cc <HAL_RCCEx_PeriphCLKConfig+0x360>
 800a090:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a094:	d825      	bhi.n	800a0e2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800a096:	2b00      	cmp	r3, #0
 800a098:	d006      	beq.n	800a0a8 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800a09a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a09e:	d00a      	beq.n	800a0b6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800a0a0:	e01f      	b.n	800a0e2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800a0a2:	bf00      	nop
 800a0a4:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a0a8:	4ba2      	ldr	r3, [pc, #648]	@ (800a334 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a0aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a0ac:	4aa1      	ldr	r2, [pc, #644]	@ (800a334 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a0ae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a0b2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a0b4:	e01c      	b.n	800a0f0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a0b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a0ba:	3308      	adds	r3, #8
 800a0bc:	2100      	movs	r1, #0
 800a0be:	4618      	mov	r0, r3
 800a0c0:	f002 f9ee 	bl	800c4a0 <RCCEx_PLL2_Config>
 800a0c4:	4603      	mov	r3, r0
 800a0c6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800a0ca:	e011      	b.n	800a0f0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a0cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a0d0:	3328      	adds	r3, #40	@ 0x28
 800a0d2:	2100      	movs	r1, #0
 800a0d4:	4618      	mov	r0, r3
 800a0d6:	f002 fa95 	bl	800c604 <RCCEx_PLL3_Config>
 800a0da:	4603      	mov	r3, r0
 800a0dc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a0e0:	e006      	b.n	800a0f0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800a0e2:	2301      	movs	r3, #1
 800a0e4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a0e8:	e002      	b.n	800a0f0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800a0ea:	bf00      	nop
 800a0ec:	e000      	b.n	800a0f0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800a0ee:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a0f0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	d10b      	bne.n	800a110 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800a0f8:	4b8e      	ldr	r3, [pc, #568]	@ (800a334 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a0fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a0fc:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 800a100:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a104:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800a108:	4a8a      	ldr	r2, [pc, #552]	@ (800a334 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a10a:	430b      	orrs	r3, r1
 800a10c:	6593      	str	r3, [r2, #88]	@ 0x58
 800a10e:	e003      	b.n	800a118 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a110:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a114:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800a118:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a11c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a120:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800a124:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800a128:	2300      	movs	r3, #0
 800a12a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800a12e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800a132:	460b      	mov	r3, r1
 800a134:	4313      	orrs	r3, r2
 800a136:	d03a      	beq.n	800a1ae <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 800a138:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a13c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a13e:	2b30      	cmp	r3, #48	@ 0x30
 800a140:	d01f      	beq.n	800a182 <HAL_RCCEx_PeriphCLKConfig+0x416>
 800a142:	2b30      	cmp	r3, #48	@ 0x30
 800a144:	d819      	bhi.n	800a17a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800a146:	2b20      	cmp	r3, #32
 800a148:	d00c      	beq.n	800a164 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800a14a:	2b20      	cmp	r3, #32
 800a14c:	d815      	bhi.n	800a17a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800a14e:	2b00      	cmp	r3, #0
 800a150:	d019      	beq.n	800a186 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800a152:	2b10      	cmp	r3, #16
 800a154:	d111      	bne.n	800a17a <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a156:	4b77      	ldr	r3, [pc, #476]	@ (800a334 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a158:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a15a:	4a76      	ldr	r2, [pc, #472]	@ (800a334 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a15c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a160:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800a162:	e011      	b.n	800a188 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a164:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a168:	3308      	adds	r3, #8
 800a16a:	2102      	movs	r1, #2
 800a16c:	4618      	mov	r0, r3
 800a16e:	f002 f997 	bl	800c4a0 <RCCEx_PLL2_Config>
 800a172:	4603      	mov	r3, r0
 800a174:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800a178:	e006      	b.n	800a188 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800a17a:	2301      	movs	r3, #1
 800a17c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a180:	e002      	b.n	800a188 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800a182:	bf00      	nop
 800a184:	e000      	b.n	800a188 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800a186:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a188:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	d10a      	bne.n	800a1a6 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800a190:	4b68      	ldr	r3, [pc, #416]	@ (800a334 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a192:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a194:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800a198:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a19c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a19e:	4a65      	ldr	r2, [pc, #404]	@ (800a334 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a1a0:	430b      	orrs	r3, r1
 800a1a2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800a1a4:	e003      	b.n	800a1ae <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a1a6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a1aa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800a1ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a1b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1b6:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800a1ba:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800a1be:	2300      	movs	r3, #0
 800a1c0:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800a1c4:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800a1c8:	460b      	mov	r3, r1
 800a1ca:	4313      	orrs	r3, r2
 800a1cc:	d051      	beq.n	800a272 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800a1ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a1d2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a1d4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a1d8:	d035      	beq.n	800a246 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800a1da:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a1de:	d82e      	bhi.n	800a23e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800a1e0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800a1e4:	d031      	beq.n	800a24a <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800a1e6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800a1ea:	d828      	bhi.n	800a23e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800a1ec:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a1f0:	d01a      	beq.n	800a228 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800a1f2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a1f6:	d822      	bhi.n	800a23e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	d003      	beq.n	800a204 <HAL_RCCEx_PeriphCLKConfig+0x498>
 800a1fc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a200:	d007      	beq.n	800a212 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800a202:	e01c      	b.n	800a23e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a204:	4b4b      	ldr	r3, [pc, #300]	@ (800a334 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a206:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a208:	4a4a      	ldr	r2, [pc, #296]	@ (800a334 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a20a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a20e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800a210:	e01c      	b.n	800a24c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a212:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a216:	3308      	adds	r3, #8
 800a218:	2100      	movs	r1, #0
 800a21a:	4618      	mov	r0, r3
 800a21c:	f002 f940 	bl	800c4a0 <RCCEx_PLL2_Config>
 800a220:	4603      	mov	r3, r0
 800a222:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800a226:	e011      	b.n	800a24c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a228:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a22c:	3328      	adds	r3, #40	@ 0x28
 800a22e:	2100      	movs	r1, #0
 800a230:	4618      	mov	r0, r3
 800a232:	f002 f9e7 	bl	800c604 <RCCEx_PLL3_Config>
 800a236:	4603      	mov	r3, r0
 800a238:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800a23c:	e006      	b.n	800a24c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a23e:	2301      	movs	r3, #1
 800a240:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a244:	e002      	b.n	800a24c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800a246:	bf00      	nop
 800a248:	e000      	b.n	800a24c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800a24a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a24c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a250:	2b00      	cmp	r3, #0
 800a252:	d10a      	bne.n	800a26a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800a254:	4b37      	ldr	r3, [pc, #220]	@ (800a334 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a256:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a258:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800a25c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a260:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a262:	4a34      	ldr	r2, [pc, #208]	@ (800a334 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a264:	430b      	orrs	r3, r1
 800a266:	6513      	str	r3, [r2, #80]	@ 0x50
 800a268:	e003      	b.n	800a272 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a26a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a26e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800a272:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a276:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a27a:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800a27e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800a282:	2300      	movs	r3, #0
 800a284:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800a288:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800a28c:	460b      	mov	r3, r1
 800a28e:	4313      	orrs	r3, r2
 800a290:	d056      	beq.n	800a340 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800a292:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a296:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a298:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800a29c:	d033      	beq.n	800a306 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800a29e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800a2a2:	d82c      	bhi.n	800a2fe <HAL_RCCEx_PeriphCLKConfig+0x592>
 800a2a4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a2a8:	d02f      	beq.n	800a30a <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800a2aa:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a2ae:	d826      	bhi.n	800a2fe <HAL_RCCEx_PeriphCLKConfig+0x592>
 800a2b0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800a2b4:	d02b      	beq.n	800a30e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800a2b6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800a2ba:	d820      	bhi.n	800a2fe <HAL_RCCEx_PeriphCLKConfig+0x592>
 800a2bc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a2c0:	d012      	beq.n	800a2e8 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800a2c2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a2c6:	d81a      	bhi.n	800a2fe <HAL_RCCEx_PeriphCLKConfig+0x592>
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	d022      	beq.n	800a312 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800a2cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a2d0:	d115      	bne.n	800a2fe <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a2d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a2d6:	3308      	adds	r3, #8
 800a2d8:	2101      	movs	r1, #1
 800a2da:	4618      	mov	r0, r3
 800a2dc:	f002 f8e0 	bl	800c4a0 <RCCEx_PLL2_Config>
 800a2e0:	4603      	mov	r3, r0
 800a2e2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800a2e6:	e015      	b.n	800a314 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a2e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a2ec:	3328      	adds	r3, #40	@ 0x28
 800a2ee:	2101      	movs	r1, #1
 800a2f0:	4618      	mov	r0, r3
 800a2f2:	f002 f987 	bl	800c604 <RCCEx_PLL3_Config>
 800a2f6:	4603      	mov	r3, r0
 800a2f8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800a2fc:	e00a      	b.n	800a314 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a2fe:	2301      	movs	r3, #1
 800a300:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a304:	e006      	b.n	800a314 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800a306:	bf00      	nop
 800a308:	e004      	b.n	800a314 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800a30a:	bf00      	nop
 800a30c:	e002      	b.n	800a314 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800a30e:	bf00      	nop
 800a310:	e000      	b.n	800a314 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800a312:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a314:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a318:	2b00      	cmp	r3, #0
 800a31a:	d10d      	bne.n	800a338 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800a31c:	4b05      	ldr	r3, [pc, #20]	@ (800a334 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a31e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a320:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800a324:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a328:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a32a:	4a02      	ldr	r2, [pc, #8]	@ (800a334 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a32c:	430b      	orrs	r3, r1
 800a32e:	6513      	str	r3, [r2, #80]	@ 0x50
 800a330:	e006      	b.n	800a340 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800a332:	bf00      	nop
 800a334:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a338:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a33c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800a340:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a344:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a348:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800a34c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800a350:	2300      	movs	r3, #0
 800a352:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800a356:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800a35a:	460b      	mov	r3, r1
 800a35c:	4313      	orrs	r3, r2
 800a35e:	d055      	beq.n	800a40c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800a360:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a364:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800a368:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a36c:	d033      	beq.n	800a3d6 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800a36e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a372:	d82c      	bhi.n	800a3ce <HAL_RCCEx_PeriphCLKConfig+0x662>
 800a374:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a378:	d02f      	beq.n	800a3da <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800a37a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a37e:	d826      	bhi.n	800a3ce <HAL_RCCEx_PeriphCLKConfig+0x662>
 800a380:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800a384:	d02b      	beq.n	800a3de <HAL_RCCEx_PeriphCLKConfig+0x672>
 800a386:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800a38a:	d820      	bhi.n	800a3ce <HAL_RCCEx_PeriphCLKConfig+0x662>
 800a38c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a390:	d012      	beq.n	800a3b8 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800a392:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a396:	d81a      	bhi.n	800a3ce <HAL_RCCEx_PeriphCLKConfig+0x662>
 800a398:	2b00      	cmp	r3, #0
 800a39a:	d022      	beq.n	800a3e2 <HAL_RCCEx_PeriphCLKConfig+0x676>
 800a39c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a3a0:	d115      	bne.n	800a3ce <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a3a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a3a6:	3308      	adds	r3, #8
 800a3a8:	2101      	movs	r1, #1
 800a3aa:	4618      	mov	r0, r3
 800a3ac:	f002 f878 	bl	800c4a0 <RCCEx_PLL2_Config>
 800a3b0:	4603      	mov	r3, r0
 800a3b2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800a3b6:	e015      	b.n	800a3e4 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a3b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a3bc:	3328      	adds	r3, #40	@ 0x28
 800a3be:	2101      	movs	r1, #1
 800a3c0:	4618      	mov	r0, r3
 800a3c2:	f002 f91f 	bl	800c604 <RCCEx_PLL3_Config>
 800a3c6:	4603      	mov	r3, r0
 800a3c8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800a3cc:	e00a      	b.n	800a3e4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800a3ce:	2301      	movs	r3, #1
 800a3d0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a3d4:	e006      	b.n	800a3e4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800a3d6:	bf00      	nop
 800a3d8:	e004      	b.n	800a3e4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800a3da:	bf00      	nop
 800a3dc:	e002      	b.n	800a3e4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800a3de:	bf00      	nop
 800a3e0:	e000      	b.n	800a3e4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800a3e2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a3e4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a3e8:	2b00      	cmp	r3, #0
 800a3ea:	d10b      	bne.n	800a404 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800a3ec:	4ba3      	ldr	r3, [pc, #652]	@ (800a67c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a3ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a3f0:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800a3f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a3f8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800a3fc:	4a9f      	ldr	r2, [pc, #636]	@ (800a67c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a3fe:	430b      	orrs	r3, r1
 800a400:	6593      	str	r3, [r2, #88]	@ 0x58
 800a402:	e003      	b.n	800a40c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a404:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a408:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800a40c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a410:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a414:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800a418:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800a41c:	2300      	movs	r3, #0
 800a41e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800a422:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800a426:	460b      	mov	r3, r1
 800a428:	4313      	orrs	r3, r2
 800a42a:	d037      	beq.n	800a49c <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800a42c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a430:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a432:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a436:	d00e      	beq.n	800a456 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 800a438:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a43c:	d816      	bhi.n	800a46c <HAL_RCCEx_PeriphCLKConfig+0x700>
 800a43e:	2b00      	cmp	r3, #0
 800a440:	d018      	beq.n	800a474 <HAL_RCCEx_PeriphCLKConfig+0x708>
 800a442:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a446:	d111      	bne.n	800a46c <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a448:	4b8c      	ldr	r3, [pc, #560]	@ (800a67c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a44a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a44c:	4a8b      	ldr	r2, [pc, #556]	@ (800a67c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a44e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a452:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800a454:	e00f      	b.n	800a476 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a456:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a45a:	3308      	adds	r3, #8
 800a45c:	2101      	movs	r1, #1
 800a45e:	4618      	mov	r0, r3
 800a460:	f002 f81e 	bl	800c4a0 <RCCEx_PLL2_Config>
 800a464:	4603      	mov	r3, r0
 800a466:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800a46a:	e004      	b.n	800a476 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a46c:	2301      	movs	r3, #1
 800a46e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a472:	e000      	b.n	800a476 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 800a474:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a476:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	d10a      	bne.n	800a494 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800a47e:	4b7f      	ldr	r3, [pc, #508]	@ (800a67c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a480:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a482:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800a486:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a48a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a48c:	4a7b      	ldr	r2, [pc, #492]	@ (800a67c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a48e:	430b      	orrs	r3, r1
 800a490:	6513      	str	r3, [r2, #80]	@ 0x50
 800a492:	e003      	b.n	800a49c <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a494:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a498:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800a49c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a4a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4a4:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800a4a8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800a4ac:	2300      	movs	r3, #0
 800a4ae:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800a4b2:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800a4b6:	460b      	mov	r3, r1
 800a4b8:	4313      	orrs	r3, r2
 800a4ba:	d039      	beq.n	800a530 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800a4bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a4c0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a4c2:	2b03      	cmp	r3, #3
 800a4c4:	d81c      	bhi.n	800a500 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800a4c6:	a201      	add	r2, pc, #4	@ (adr r2, 800a4cc <HAL_RCCEx_PeriphCLKConfig+0x760>)
 800a4c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4cc:	0800a509 	.word	0x0800a509
 800a4d0:	0800a4dd 	.word	0x0800a4dd
 800a4d4:	0800a4eb 	.word	0x0800a4eb
 800a4d8:	0800a509 	.word	0x0800a509
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a4dc:	4b67      	ldr	r3, [pc, #412]	@ (800a67c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a4de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a4e0:	4a66      	ldr	r2, [pc, #408]	@ (800a67c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a4e2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a4e6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800a4e8:	e00f      	b.n	800a50a <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a4ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a4ee:	3308      	adds	r3, #8
 800a4f0:	2102      	movs	r1, #2
 800a4f2:	4618      	mov	r0, r3
 800a4f4:	f001 ffd4 	bl	800c4a0 <RCCEx_PLL2_Config>
 800a4f8:	4603      	mov	r3, r0
 800a4fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800a4fe:	e004      	b.n	800a50a <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800a500:	2301      	movs	r3, #1
 800a502:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a506:	e000      	b.n	800a50a <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 800a508:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a50a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a50e:	2b00      	cmp	r3, #0
 800a510:	d10a      	bne.n	800a528 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800a512:	4b5a      	ldr	r3, [pc, #360]	@ (800a67c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a514:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a516:	f023 0103 	bic.w	r1, r3, #3
 800a51a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a51e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a520:	4a56      	ldr	r2, [pc, #344]	@ (800a67c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a522:	430b      	orrs	r3, r1
 800a524:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800a526:	e003      	b.n	800a530 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a528:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a52c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800a530:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a534:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a538:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800a53c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800a540:	2300      	movs	r3, #0
 800a542:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800a546:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800a54a:	460b      	mov	r3, r1
 800a54c:	4313      	orrs	r3, r2
 800a54e:	f000 809f 	beq.w	800a690 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a552:	4b4b      	ldr	r3, [pc, #300]	@ (800a680 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	4a4a      	ldr	r2, [pc, #296]	@ (800a680 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800a558:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a55c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800a55e:	f7fb fc3b 	bl	8005dd8 <HAL_GetTick>
 800a562:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a566:	e00b      	b.n	800a580 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a568:	f7fb fc36 	bl	8005dd8 <HAL_GetTick>
 800a56c:	4602      	mov	r2, r0
 800a56e:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800a572:	1ad3      	subs	r3, r2, r3
 800a574:	2b64      	cmp	r3, #100	@ 0x64
 800a576:	d903      	bls.n	800a580 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 800a578:	2303      	movs	r3, #3
 800a57a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a57e:	e005      	b.n	800a58c <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a580:	4b3f      	ldr	r3, [pc, #252]	@ (800a680 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a588:	2b00      	cmp	r3, #0
 800a58a:	d0ed      	beq.n	800a568 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 800a58c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a590:	2b00      	cmp	r3, #0
 800a592:	d179      	bne.n	800a688 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800a594:	4b39      	ldr	r3, [pc, #228]	@ (800a67c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a596:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800a598:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a59c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800a5a0:	4053      	eors	r3, r2
 800a5a2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	d015      	beq.n	800a5d6 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800a5aa:	4b34      	ldr	r3, [pc, #208]	@ (800a67c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a5ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a5ae:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a5b2:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800a5b6:	4b31      	ldr	r3, [pc, #196]	@ (800a67c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a5b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a5ba:	4a30      	ldr	r2, [pc, #192]	@ (800a67c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a5bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a5c0:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800a5c2:	4b2e      	ldr	r3, [pc, #184]	@ (800a67c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a5c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a5c6:	4a2d      	ldr	r2, [pc, #180]	@ (800a67c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a5c8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a5cc:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800a5ce:	4a2b      	ldr	r2, [pc, #172]	@ (800a67c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a5d0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800a5d4:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800a5d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a5da:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800a5de:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a5e2:	d118      	bne.n	800a616 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a5e4:	f7fb fbf8 	bl	8005dd8 <HAL_GetTick>
 800a5e8:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a5ec:	e00d      	b.n	800a60a <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a5ee:	f7fb fbf3 	bl	8005dd8 <HAL_GetTick>
 800a5f2:	4602      	mov	r2, r0
 800a5f4:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800a5f8:	1ad2      	subs	r2, r2, r3
 800a5fa:	f241 3388 	movw	r3, #5000	@ 0x1388
 800a5fe:	429a      	cmp	r2, r3
 800a600:	d903      	bls.n	800a60a <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800a602:	2303      	movs	r3, #3
 800a604:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 800a608:	e005      	b.n	800a616 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a60a:	4b1c      	ldr	r3, [pc, #112]	@ (800a67c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a60c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a60e:	f003 0302 	and.w	r3, r3, #2
 800a612:	2b00      	cmp	r3, #0
 800a614:	d0eb      	beq.n	800a5ee <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800a616:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a61a:	2b00      	cmp	r3, #0
 800a61c:	d129      	bne.n	800a672 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a61e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a622:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800a626:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a62a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a62e:	d10e      	bne.n	800a64e <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800a630:	4b12      	ldr	r3, [pc, #72]	@ (800a67c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a632:	691b      	ldr	r3, [r3, #16]
 800a634:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 800a638:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a63c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800a640:	091a      	lsrs	r2, r3, #4
 800a642:	4b10      	ldr	r3, [pc, #64]	@ (800a684 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 800a644:	4013      	ands	r3, r2
 800a646:	4a0d      	ldr	r2, [pc, #52]	@ (800a67c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a648:	430b      	orrs	r3, r1
 800a64a:	6113      	str	r3, [r2, #16]
 800a64c:	e005      	b.n	800a65a <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800a64e:	4b0b      	ldr	r3, [pc, #44]	@ (800a67c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a650:	691b      	ldr	r3, [r3, #16]
 800a652:	4a0a      	ldr	r2, [pc, #40]	@ (800a67c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a654:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800a658:	6113      	str	r3, [r2, #16]
 800a65a:	4b08      	ldr	r3, [pc, #32]	@ (800a67c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a65c:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800a65e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a662:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800a666:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a66a:	4a04      	ldr	r2, [pc, #16]	@ (800a67c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a66c:	430b      	orrs	r3, r1
 800a66e:	6713      	str	r3, [r2, #112]	@ 0x70
 800a670:	e00e      	b.n	800a690 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800a672:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a676:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 800a67a:	e009      	b.n	800a690 <HAL_RCCEx_PeriphCLKConfig+0x924>
 800a67c:	58024400 	.word	0x58024400
 800a680:	58024800 	.word	0x58024800
 800a684:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a688:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a68c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800a690:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a694:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a698:	f002 0301 	and.w	r3, r2, #1
 800a69c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800a6a0:	2300      	movs	r3, #0
 800a6a2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800a6a6:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800a6aa:	460b      	mov	r3, r1
 800a6ac:	4313      	orrs	r3, r2
 800a6ae:	f000 8089 	beq.w	800a7c4 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800a6b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a6b6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a6b8:	2b28      	cmp	r3, #40	@ 0x28
 800a6ba:	d86b      	bhi.n	800a794 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 800a6bc:	a201      	add	r2, pc, #4	@ (adr r2, 800a6c4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800a6be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a6c2:	bf00      	nop
 800a6c4:	0800a79d 	.word	0x0800a79d
 800a6c8:	0800a795 	.word	0x0800a795
 800a6cc:	0800a795 	.word	0x0800a795
 800a6d0:	0800a795 	.word	0x0800a795
 800a6d4:	0800a795 	.word	0x0800a795
 800a6d8:	0800a795 	.word	0x0800a795
 800a6dc:	0800a795 	.word	0x0800a795
 800a6e0:	0800a795 	.word	0x0800a795
 800a6e4:	0800a769 	.word	0x0800a769
 800a6e8:	0800a795 	.word	0x0800a795
 800a6ec:	0800a795 	.word	0x0800a795
 800a6f0:	0800a795 	.word	0x0800a795
 800a6f4:	0800a795 	.word	0x0800a795
 800a6f8:	0800a795 	.word	0x0800a795
 800a6fc:	0800a795 	.word	0x0800a795
 800a700:	0800a795 	.word	0x0800a795
 800a704:	0800a77f 	.word	0x0800a77f
 800a708:	0800a795 	.word	0x0800a795
 800a70c:	0800a795 	.word	0x0800a795
 800a710:	0800a795 	.word	0x0800a795
 800a714:	0800a795 	.word	0x0800a795
 800a718:	0800a795 	.word	0x0800a795
 800a71c:	0800a795 	.word	0x0800a795
 800a720:	0800a795 	.word	0x0800a795
 800a724:	0800a79d 	.word	0x0800a79d
 800a728:	0800a795 	.word	0x0800a795
 800a72c:	0800a795 	.word	0x0800a795
 800a730:	0800a795 	.word	0x0800a795
 800a734:	0800a795 	.word	0x0800a795
 800a738:	0800a795 	.word	0x0800a795
 800a73c:	0800a795 	.word	0x0800a795
 800a740:	0800a795 	.word	0x0800a795
 800a744:	0800a79d 	.word	0x0800a79d
 800a748:	0800a795 	.word	0x0800a795
 800a74c:	0800a795 	.word	0x0800a795
 800a750:	0800a795 	.word	0x0800a795
 800a754:	0800a795 	.word	0x0800a795
 800a758:	0800a795 	.word	0x0800a795
 800a75c:	0800a795 	.word	0x0800a795
 800a760:	0800a795 	.word	0x0800a795
 800a764:	0800a79d 	.word	0x0800a79d
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a768:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a76c:	3308      	adds	r3, #8
 800a76e:	2101      	movs	r1, #1
 800a770:	4618      	mov	r0, r3
 800a772:	f001 fe95 	bl	800c4a0 <RCCEx_PLL2_Config>
 800a776:	4603      	mov	r3, r0
 800a778:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800a77c:	e00f      	b.n	800a79e <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a77e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a782:	3328      	adds	r3, #40	@ 0x28
 800a784:	2101      	movs	r1, #1
 800a786:	4618      	mov	r0, r3
 800a788:	f001 ff3c 	bl	800c604 <RCCEx_PLL3_Config>
 800a78c:	4603      	mov	r3, r0
 800a78e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800a792:	e004      	b.n	800a79e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a794:	2301      	movs	r3, #1
 800a796:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a79a:	e000      	b.n	800a79e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 800a79c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a79e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a7a2:	2b00      	cmp	r3, #0
 800a7a4:	d10a      	bne.n	800a7bc <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800a7a6:	4bbf      	ldr	r3, [pc, #764]	@ (800aaa4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a7a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a7aa:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800a7ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a7b2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a7b4:	4abb      	ldr	r2, [pc, #748]	@ (800aaa4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a7b6:	430b      	orrs	r3, r1
 800a7b8:	6553      	str	r3, [r2, #84]	@ 0x54
 800a7ba:	e003      	b.n	800a7c4 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a7bc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a7c0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800a7c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a7c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7cc:	f002 0302 	and.w	r3, r2, #2
 800a7d0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800a7d4:	2300      	movs	r3, #0
 800a7d6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800a7da:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800a7de:	460b      	mov	r3, r1
 800a7e0:	4313      	orrs	r3, r2
 800a7e2:	d041      	beq.n	800a868 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800a7e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a7e8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a7ea:	2b05      	cmp	r3, #5
 800a7ec:	d824      	bhi.n	800a838 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800a7ee:	a201      	add	r2, pc, #4	@ (adr r2, 800a7f4 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800a7f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a7f4:	0800a841 	.word	0x0800a841
 800a7f8:	0800a80d 	.word	0x0800a80d
 800a7fc:	0800a823 	.word	0x0800a823
 800a800:	0800a841 	.word	0x0800a841
 800a804:	0800a841 	.word	0x0800a841
 800a808:	0800a841 	.word	0x0800a841
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a80c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a810:	3308      	adds	r3, #8
 800a812:	2101      	movs	r1, #1
 800a814:	4618      	mov	r0, r3
 800a816:	f001 fe43 	bl	800c4a0 <RCCEx_PLL2_Config>
 800a81a:	4603      	mov	r3, r0
 800a81c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800a820:	e00f      	b.n	800a842 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a822:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a826:	3328      	adds	r3, #40	@ 0x28
 800a828:	2101      	movs	r1, #1
 800a82a:	4618      	mov	r0, r3
 800a82c:	f001 feea 	bl	800c604 <RCCEx_PLL3_Config>
 800a830:	4603      	mov	r3, r0
 800a832:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800a836:	e004      	b.n	800a842 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a838:	2301      	movs	r3, #1
 800a83a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a83e:	e000      	b.n	800a842 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 800a840:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a842:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a846:	2b00      	cmp	r3, #0
 800a848:	d10a      	bne.n	800a860 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800a84a:	4b96      	ldr	r3, [pc, #600]	@ (800aaa4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a84c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a84e:	f023 0107 	bic.w	r1, r3, #7
 800a852:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a856:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a858:	4a92      	ldr	r2, [pc, #584]	@ (800aaa4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a85a:	430b      	orrs	r3, r1
 800a85c:	6553      	str	r3, [r2, #84]	@ 0x54
 800a85e:	e003      	b.n	800a868 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a860:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a864:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800a868:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a86c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a870:	f002 0304 	and.w	r3, r2, #4
 800a874:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800a878:	2300      	movs	r3, #0
 800a87a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800a87e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800a882:	460b      	mov	r3, r1
 800a884:	4313      	orrs	r3, r2
 800a886:	d044      	beq.n	800a912 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800a888:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a88c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a890:	2b05      	cmp	r3, #5
 800a892:	d825      	bhi.n	800a8e0 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800a894:	a201      	add	r2, pc, #4	@ (adr r2, 800a89c <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800a896:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a89a:	bf00      	nop
 800a89c:	0800a8e9 	.word	0x0800a8e9
 800a8a0:	0800a8b5 	.word	0x0800a8b5
 800a8a4:	0800a8cb 	.word	0x0800a8cb
 800a8a8:	0800a8e9 	.word	0x0800a8e9
 800a8ac:	0800a8e9 	.word	0x0800a8e9
 800a8b0:	0800a8e9 	.word	0x0800a8e9
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a8b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a8b8:	3308      	adds	r3, #8
 800a8ba:	2101      	movs	r1, #1
 800a8bc:	4618      	mov	r0, r3
 800a8be:	f001 fdef 	bl	800c4a0 <RCCEx_PLL2_Config>
 800a8c2:	4603      	mov	r3, r0
 800a8c4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800a8c8:	e00f      	b.n	800a8ea <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a8ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a8ce:	3328      	adds	r3, #40	@ 0x28
 800a8d0:	2101      	movs	r1, #1
 800a8d2:	4618      	mov	r0, r3
 800a8d4:	f001 fe96 	bl	800c604 <RCCEx_PLL3_Config>
 800a8d8:	4603      	mov	r3, r0
 800a8da:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800a8de:	e004      	b.n	800a8ea <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a8e0:	2301      	movs	r3, #1
 800a8e2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a8e6:	e000      	b.n	800a8ea <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 800a8e8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a8ea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	d10b      	bne.n	800a90a <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800a8f2:	4b6c      	ldr	r3, [pc, #432]	@ (800aaa4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a8f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a8f6:	f023 0107 	bic.w	r1, r3, #7
 800a8fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a8fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a902:	4a68      	ldr	r2, [pc, #416]	@ (800aaa4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a904:	430b      	orrs	r3, r1
 800a906:	6593      	str	r3, [r2, #88]	@ 0x58
 800a908:	e003      	b.n	800a912 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a90a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a90e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800a912:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a916:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a91a:	f002 0320 	and.w	r3, r2, #32
 800a91e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800a922:	2300      	movs	r3, #0
 800a924:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800a928:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800a92c:	460b      	mov	r3, r1
 800a92e:	4313      	orrs	r3, r2
 800a930:	d055      	beq.n	800a9de <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800a932:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a936:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a93a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a93e:	d033      	beq.n	800a9a8 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800a940:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a944:	d82c      	bhi.n	800a9a0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800a946:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a94a:	d02f      	beq.n	800a9ac <HAL_RCCEx_PeriphCLKConfig+0xc40>
 800a94c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a950:	d826      	bhi.n	800a9a0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800a952:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800a956:	d02b      	beq.n	800a9b0 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 800a958:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800a95c:	d820      	bhi.n	800a9a0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800a95e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a962:	d012      	beq.n	800a98a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800a964:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a968:	d81a      	bhi.n	800a9a0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	d022      	beq.n	800a9b4 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800a96e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a972:	d115      	bne.n	800a9a0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a974:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a978:	3308      	adds	r3, #8
 800a97a:	2100      	movs	r1, #0
 800a97c:	4618      	mov	r0, r3
 800a97e:	f001 fd8f 	bl	800c4a0 <RCCEx_PLL2_Config>
 800a982:	4603      	mov	r3, r0
 800a984:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800a988:	e015      	b.n	800a9b6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a98a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a98e:	3328      	adds	r3, #40	@ 0x28
 800a990:	2102      	movs	r1, #2
 800a992:	4618      	mov	r0, r3
 800a994:	f001 fe36 	bl	800c604 <RCCEx_PLL3_Config>
 800a998:	4603      	mov	r3, r0
 800a99a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800a99e:	e00a      	b.n	800a9b6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a9a0:	2301      	movs	r3, #1
 800a9a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a9a6:	e006      	b.n	800a9b6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800a9a8:	bf00      	nop
 800a9aa:	e004      	b.n	800a9b6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800a9ac:	bf00      	nop
 800a9ae:	e002      	b.n	800a9b6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800a9b0:	bf00      	nop
 800a9b2:	e000      	b.n	800a9b6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800a9b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a9b6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	d10b      	bne.n	800a9d6 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800a9be:	4b39      	ldr	r3, [pc, #228]	@ (800aaa4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a9c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a9c2:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800a9c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a9ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a9ce:	4a35      	ldr	r2, [pc, #212]	@ (800aaa4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a9d0:	430b      	orrs	r3, r1
 800a9d2:	6553      	str	r3, [r2, #84]	@ 0x54
 800a9d4:	e003      	b.n	800a9de <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a9d6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a9da:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800a9de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a9e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9e6:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800a9ea:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800a9ee:	2300      	movs	r3, #0
 800a9f0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800a9f4:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800a9f8:	460b      	mov	r3, r1
 800a9fa:	4313      	orrs	r3, r2
 800a9fc:	d058      	beq.n	800aab0 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800a9fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800aa02:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800aa06:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800aa0a:	d033      	beq.n	800aa74 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800aa0c:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800aa10:	d82c      	bhi.n	800aa6c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800aa12:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800aa16:	d02f      	beq.n	800aa78 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 800aa18:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800aa1c:	d826      	bhi.n	800aa6c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800aa1e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800aa22:	d02b      	beq.n	800aa7c <HAL_RCCEx_PeriphCLKConfig+0xd10>
 800aa24:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800aa28:	d820      	bhi.n	800aa6c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800aa2a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800aa2e:	d012      	beq.n	800aa56 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800aa30:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800aa34:	d81a      	bhi.n	800aa6c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800aa36:	2b00      	cmp	r3, #0
 800aa38:	d022      	beq.n	800aa80 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800aa3a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800aa3e:	d115      	bne.n	800aa6c <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800aa40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800aa44:	3308      	adds	r3, #8
 800aa46:	2100      	movs	r1, #0
 800aa48:	4618      	mov	r0, r3
 800aa4a:	f001 fd29 	bl	800c4a0 <RCCEx_PLL2_Config>
 800aa4e:	4603      	mov	r3, r0
 800aa50:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800aa54:	e015      	b.n	800aa82 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800aa56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800aa5a:	3328      	adds	r3, #40	@ 0x28
 800aa5c:	2102      	movs	r1, #2
 800aa5e:	4618      	mov	r0, r3
 800aa60:	f001 fdd0 	bl	800c604 <RCCEx_PLL3_Config>
 800aa64:	4603      	mov	r3, r0
 800aa66:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800aa6a:	e00a      	b.n	800aa82 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800aa6c:	2301      	movs	r3, #1
 800aa6e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800aa72:	e006      	b.n	800aa82 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800aa74:	bf00      	nop
 800aa76:	e004      	b.n	800aa82 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800aa78:	bf00      	nop
 800aa7a:	e002      	b.n	800aa82 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800aa7c:	bf00      	nop
 800aa7e:	e000      	b.n	800aa82 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800aa80:	bf00      	nop
    }

    if (ret == HAL_OK)
 800aa82:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800aa86:	2b00      	cmp	r3, #0
 800aa88:	d10e      	bne.n	800aaa8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800aa8a:	4b06      	ldr	r3, [pc, #24]	@ (800aaa4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800aa8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800aa8e:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800aa92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800aa96:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800aa9a:	4a02      	ldr	r2, [pc, #8]	@ (800aaa4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800aa9c:	430b      	orrs	r3, r1
 800aa9e:	6593      	str	r3, [r2, #88]	@ 0x58
 800aaa0:	e006      	b.n	800aab0 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800aaa2:	bf00      	nop
 800aaa4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aaa8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800aaac:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800aab0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800aab4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aab8:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800aabc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800aac0:	2300      	movs	r3, #0
 800aac2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800aac6:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800aaca:	460b      	mov	r3, r1
 800aacc:	4313      	orrs	r3, r2
 800aace:	d055      	beq.n	800ab7c <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800aad0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800aad4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800aad8:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800aadc:	d033      	beq.n	800ab46 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800aade:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800aae2:	d82c      	bhi.n	800ab3e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800aae4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800aae8:	d02f      	beq.n	800ab4a <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800aaea:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800aaee:	d826      	bhi.n	800ab3e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800aaf0:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800aaf4:	d02b      	beq.n	800ab4e <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800aaf6:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800aafa:	d820      	bhi.n	800ab3e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800aafc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800ab00:	d012      	beq.n	800ab28 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800ab02:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800ab06:	d81a      	bhi.n	800ab3e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	d022      	beq.n	800ab52 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800ab0c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ab10:	d115      	bne.n	800ab3e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ab12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ab16:	3308      	adds	r3, #8
 800ab18:	2100      	movs	r1, #0
 800ab1a:	4618      	mov	r0, r3
 800ab1c:	f001 fcc0 	bl	800c4a0 <RCCEx_PLL2_Config>
 800ab20:	4603      	mov	r3, r0
 800ab22:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800ab26:	e015      	b.n	800ab54 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800ab28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ab2c:	3328      	adds	r3, #40	@ 0x28
 800ab2e:	2102      	movs	r1, #2
 800ab30:	4618      	mov	r0, r3
 800ab32:	f001 fd67 	bl	800c604 <RCCEx_PLL3_Config>
 800ab36:	4603      	mov	r3, r0
 800ab38:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800ab3c:	e00a      	b.n	800ab54 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ab3e:	2301      	movs	r3, #1
 800ab40:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800ab44:	e006      	b.n	800ab54 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800ab46:	bf00      	nop
 800ab48:	e004      	b.n	800ab54 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800ab4a:	bf00      	nop
 800ab4c:	e002      	b.n	800ab54 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800ab4e:	bf00      	nop
 800ab50:	e000      	b.n	800ab54 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800ab52:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ab54:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	d10b      	bne.n	800ab74 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800ab5c:	4ba1      	ldr	r3, [pc, #644]	@ (800ade4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ab5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ab60:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 800ab64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ab68:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800ab6c:	4a9d      	ldr	r2, [pc, #628]	@ (800ade4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ab6e:	430b      	orrs	r3, r1
 800ab70:	6593      	str	r3, [r2, #88]	@ 0x58
 800ab72:	e003      	b.n	800ab7c <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ab74:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ab78:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800ab7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ab80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab84:	f002 0308 	and.w	r3, r2, #8
 800ab88:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800ab8c:	2300      	movs	r3, #0
 800ab8e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800ab92:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800ab96:	460b      	mov	r3, r1
 800ab98:	4313      	orrs	r3, r2
 800ab9a:	d01e      	beq.n	800abda <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800ab9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800aba0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800aba4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800aba8:	d10c      	bne.n	800abc4 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800abaa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800abae:	3328      	adds	r3, #40	@ 0x28
 800abb0:	2102      	movs	r1, #2
 800abb2:	4618      	mov	r0, r3
 800abb4:	f001 fd26 	bl	800c604 <RCCEx_PLL3_Config>
 800abb8:	4603      	mov	r3, r0
 800abba:	2b00      	cmp	r3, #0
 800abbc:	d002      	beq.n	800abc4 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800abbe:	2301      	movs	r3, #1
 800abc0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800abc4:	4b87      	ldr	r3, [pc, #540]	@ (800ade4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800abc6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800abc8:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800abcc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800abd0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800abd4:	4a83      	ldr	r2, [pc, #524]	@ (800ade4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800abd6:	430b      	orrs	r3, r1
 800abd8:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800abda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800abde:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abe2:	f002 0310 	and.w	r3, r2, #16
 800abe6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800abea:	2300      	movs	r3, #0
 800abec:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800abf0:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800abf4:	460b      	mov	r3, r1
 800abf6:	4313      	orrs	r3, r2
 800abf8:	d01e      	beq.n	800ac38 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800abfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800abfe:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800ac02:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ac06:	d10c      	bne.n	800ac22 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800ac08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ac0c:	3328      	adds	r3, #40	@ 0x28
 800ac0e:	2102      	movs	r1, #2
 800ac10:	4618      	mov	r0, r3
 800ac12:	f001 fcf7 	bl	800c604 <RCCEx_PLL3_Config>
 800ac16:	4603      	mov	r3, r0
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	d002      	beq.n	800ac22 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 800ac1c:	2301      	movs	r3, #1
 800ac1e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800ac22:	4b70      	ldr	r3, [pc, #448]	@ (800ade4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ac24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ac26:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800ac2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ac2e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800ac32:	4a6c      	ldr	r2, [pc, #432]	@ (800ade4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ac34:	430b      	orrs	r3, r1
 800ac36:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800ac38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ac3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac40:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800ac44:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800ac48:	2300      	movs	r3, #0
 800ac4a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800ac4e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800ac52:	460b      	mov	r3, r1
 800ac54:	4313      	orrs	r3, r2
 800ac56:	d03e      	beq.n	800acd6 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800ac58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ac5c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800ac60:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ac64:	d022      	beq.n	800acac <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800ac66:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ac6a:	d81b      	bhi.n	800aca4 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 800ac6c:	2b00      	cmp	r3, #0
 800ac6e:	d003      	beq.n	800ac78 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800ac70:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ac74:	d00b      	beq.n	800ac8e <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800ac76:	e015      	b.n	800aca4 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ac78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ac7c:	3308      	adds	r3, #8
 800ac7e:	2100      	movs	r1, #0
 800ac80:	4618      	mov	r0, r3
 800ac82:	f001 fc0d 	bl	800c4a0 <RCCEx_PLL2_Config>
 800ac86:	4603      	mov	r3, r0
 800ac88:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800ac8c:	e00f      	b.n	800acae <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800ac8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ac92:	3328      	adds	r3, #40	@ 0x28
 800ac94:	2102      	movs	r1, #2
 800ac96:	4618      	mov	r0, r3
 800ac98:	f001 fcb4 	bl	800c604 <RCCEx_PLL3_Config>
 800ac9c:	4603      	mov	r3, r0
 800ac9e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800aca2:	e004      	b.n	800acae <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800aca4:	2301      	movs	r3, #1
 800aca6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800acaa:	e000      	b.n	800acae <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800acac:	bf00      	nop
    }

    if (ret == HAL_OK)
 800acae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800acb2:	2b00      	cmp	r3, #0
 800acb4:	d10b      	bne.n	800acce <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800acb6:	4b4b      	ldr	r3, [pc, #300]	@ (800ade4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800acb8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800acba:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800acbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800acc2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800acc6:	4a47      	ldr	r2, [pc, #284]	@ (800ade4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800acc8:	430b      	orrs	r3, r1
 800acca:	6593      	str	r3, [r2, #88]	@ 0x58
 800accc:	e003      	b.n	800acd6 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800acce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800acd2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800acd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800acda:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acde:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800ace2:	67bb      	str	r3, [r7, #120]	@ 0x78
 800ace4:	2300      	movs	r3, #0
 800ace6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800ace8:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800acec:	460b      	mov	r3, r1
 800acee:	4313      	orrs	r3, r2
 800acf0:	d03b      	beq.n	800ad6a <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800acf2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800acf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800acfa:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800acfe:	d01f      	beq.n	800ad40 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800ad00:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800ad04:	d818      	bhi.n	800ad38 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800ad06:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ad0a:	d003      	beq.n	800ad14 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800ad0c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800ad10:	d007      	beq.n	800ad22 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800ad12:	e011      	b.n	800ad38 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ad14:	4b33      	ldr	r3, [pc, #204]	@ (800ade4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ad16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ad18:	4a32      	ldr	r2, [pc, #200]	@ (800ade4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ad1a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800ad1e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800ad20:	e00f      	b.n	800ad42 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800ad22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ad26:	3328      	adds	r3, #40	@ 0x28
 800ad28:	2101      	movs	r1, #1
 800ad2a:	4618      	mov	r0, r3
 800ad2c:	f001 fc6a 	bl	800c604 <RCCEx_PLL3_Config>
 800ad30:	4603      	mov	r3, r0
 800ad32:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800ad36:	e004      	b.n	800ad42 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ad38:	2301      	movs	r3, #1
 800ad3a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800ad3e:	e000      	b.n	800ad42 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800ad40:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ad42:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ad46:	2b00      	cmp	r3, #0
 800ad48:	d10b      	bne.n	800ad62 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800ad4a:	4b26      	ldr	r3, [pc, #152]	@ (800ade4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ad4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ad4e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800ad52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ad56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ad5a:	4a22      	ldr	r2, [pc, #136]	@ (800ade4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ad5c:	430b      	orrs	r3, r1
 800ad5e:	6553      	str	r3, [r2, #84]	@ 0x54
 800ad60:	e003      	b.n	800ad6a <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ad62:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ad66:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800ad6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ad6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad72:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800ad76:	673b      	str	r3, [r7, #112]	@ 0x70
 800ad78:	2300      	movs	r3, #0
 800ad7a:	677b      	str	r3, [r7, #116]	@ 0x74
 800ad7c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800ad80:	460b      	mov	r3, r1
 800ad82:	4313      	orrs	r3, r2
 800ad84:	d034      	beq.n	800adf0 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800ad86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ad8a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ad8c:	2b00      	cmp	r3, #0
 800ad8e:	d003      	beq.n	800ad98 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800ad90:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ad94:	d007      	beq.n	800ada6 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800ad96:	e011      	b.n	800adbc <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ad98:	4b12      	ldr	r3, [pc, #72]	@ (800ade4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ad9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ad9c:	4a11      	ldr	r2, [pc, #68]	@ (800ade4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ad9e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800ada2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800ada4:	e00e      	b.n	800adc4 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800ada6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800adaa:	3308      	adds	r3, #8
 800adac:	2102      	movs	r1, #2
 800adae:	4618      	mov	r0, r3
 800adb0:	f001 fb76 	bl	800c4a0 <RCCEx_PLL2_Config>
 800adb4:	4603      	mov	r3, r0
 800adb6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800adba:	e003      	b.n	800adc4 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800adbc:	2301      	movs	r3, #1
 800adbe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800adc2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800adc4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800adc8:	2b00      	cmp	r3, #0
 800adca:	d10d      	bne.n	800ade8 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800adcc:	4b05      	ldr	r3, [pc, #20]	@ (800ade4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800adce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800add0:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800add4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800add8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800adda:	4a02      	ldr	r2, [pc, #8]	@ (800ade4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800addc:	430b      	orrs	r3, r1
 800adde:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800ade0:	e006      	b.n	800adf0 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800ade2:	bf00      	nop
 800ade4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ade8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800adec:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800adf0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800adf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adf8:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800adfc:	66bb      	str	r3, [r7, #104]	@ 0x68
 800adfe:	2300      	movs	r3, #0
 800ae00:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800ae02:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800ae06:	460b      	mov	r3, r1
 800ae08:	4313      	orrs	r3, r2
 800ae0a:	d00c      	beq.n	800ae26 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800ae0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ae10:	3328      	adds	r3, #40	@ 0x28
 800ae12:	2102      	movs	r1, #2
 800ae14:	4618      	mov	r0, r3
 800ae16:	f001 fbf5 	bl	800c604 <RCCEx_PLL3_Config>
 800ae1a:	4603      	mov	r3, r0
 800ae1c:	2b00      	cmp	r3, #0
 800ae1e:	d002      	beq.n	800ae26 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800ae20:	2301      	movs	r3, #1
 800ae22:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800ae26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ae2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae2e:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800ae32:	663b      	str	r3, [r7, #96]	@ 0x60
 800ae34:	2300      	movs	r3, #0
 800ae36:	667b      	str	r3, [r7, #100]	@ 0x64
 800ae38:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800ae3c:	460b      	mov	r3, r1
 800ae3e:	4313      	orrs	r3, r2
 800ae40:	d038      	beq.n	800aeb4 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800ae42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ae46:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ae4a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800ae4e:	d018      	beq.n	800ae82 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800ae50:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800ae54:	d811      	bhi.n	800ae7a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800ae56:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ae5a:	d014      	beq.n	800ae86 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800ae5c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ae60:	d80b      	bhi.n	800ae7a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800ae62:	2b00      	cmp	r3, #0
 800ae64:	d011      	beq.n	800ae8a <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800ae66:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ae6a:	d106      	bne.n	800ae7a <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ae6c:	4bc3      	ldr	r3, [pc, #780]	@ (800b17c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ae6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ae70:	4ac2      	ldr	r2, [pc, #776]	@ (800b17c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ae72:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800ae76:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800ae78:	e008      	b.n	800ae8c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ae7a:	2301      	movs	r3, #1
 800ae7c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800ae80:	e004      	b.n	800ae8c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800ae82:	bf00      	nop
 800ae84:	e002      	b.n	800ae8c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800ae86:	bf00      	nop
 800ae88:	e000      	b.n	800ae8c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800ae8a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ae8c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ae90:	2b00      	cmp	r3, #0
 800ae92:	d10b      	bne.n	800aeac <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800ae94:	4bb9      	ldr	r3, [pc, #740]	@ (800b17c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ae96:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ae98:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800ae9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800aea0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800aea4:	4ab5      	ldr	r2, [pc, #724]	@ (800b17c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800aea6:	430b      	orrs	r3, r1
 800aea8:	6553      	str	r3, [r2, #84]	@ 0x54
 800aeaa:	e003      	b.n	800aeb4 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aeac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800aeb0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800aeb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800aeb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aebc:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800aec0:	65bb      	str	r3, [r7, #88]	@ 0x58
 800aec2:	2300      	movs	r3, #0
 800aec4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800aec6:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800aeca:	460b      	mov	r3, r1
 800aecc:	4313      	orrs	r3, r2
 800aece:	d009      	beq.n	800aee4 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800aed0:	4baa      	ldr	r3, [pc, #680]	@ (800b17c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800aed2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800aed4:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800aed8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800aedc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800aede:	4aa7      	ldr	r2, [pc, #668]	@ (800b17c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800aee0:	430b      	orrs	r3, r1
 800aee2:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800aee4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800aee8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aeec:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 800aef0:	653b      	str	r3, [r7, #80]	@ 0x50
 800aef2:	2300      	movs	r3, #0
 800aef4:	657b      	str	r3, [r7, #84]	@ 0x54
 800aef6:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800aefa:	460b      	mov	r3, r1
 800aefc:	4313      	orrs	r3, r2
 800aefe:	d00a      	beq.n	800af16 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800af00:	4b9e      	ldr	r3, [pc, #632]	@ (800b17c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800af02:	691b      	ldr	r3, [r3, #16]
 800af04:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 800af08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800af0c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800af10:	4a9a      	ldr	r2, [pc, #616]	@ (800b17c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800af12:	430b      	orrs	r3, r1
 800af14:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800af16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800af1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af1e:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800af22:	64bb      	str	r3, [r7, #72]	@ 0x48
 800af24:	2300      	movs	r3, #0
 800af26:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800af28:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800af2c:	460b      	mov	r3, r1
 800af2e:	4313      	orrs	r3, r2
 800af30:	d009      	beq.n	800af46 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800af32:	4b92      	ldr	r3, [pc, #584]	@ (800b17c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800af34:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800af36:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800af3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800af3e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800af40:	4a8e      	ldr	r2, [pc, #568]	@ (800b17c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800af42:	430b      	orrs	r3, r1
 800af44:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800af46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800af4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af4e:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800af52:	643b      	str	r3, [r7, #64]	@ 0x40
 800af54:	2300      	movs	r3, #0
 800af56:	647b      	str	r3, [r7, #68]	@ 0x44
 800af58:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800af5c:	460b      	mov	r3, r1
 800af5e:	4313      	orrs	r3, r2
 800af60:	d00e      	beq.n	800af80 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800af62:	4b86      	ldr	r3, [pc, #536]	@ (800b17c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800af64:	691b      	ldr	r3, [r3, #16]
 800af66:	4a85      	ldr	r2, [pc, #532]	@ (800b17c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800af68:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800af6c:	6113      	str	r3, [r2, #16]
 800af6e:	4b83      	ldr	r3, [pc, #524]	@ (800b17c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800af70:	6919      	ldr	r1, [r3, #16]
 800af72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800af76:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800af7a:	4a80      	ldr	r2, [pc, #512]	@ (800b17c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800af7c:	430b      	orrs	r3, r1
 800af7e:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800af80:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800af84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af88:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800af8c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800af8e:	2300      	movs	r3, #0
 800af90:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800af92:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800af96:	460b      	mov	r3, r1
 800af98:	4313      	orrs	r3, r2
 800af9a:	d009      	beq.n	800afb0 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800af9c:	4b77      	ldr	r3, [pc, #476]	@ (800b17c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800af9e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800afa0:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800afa4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800afa8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800afaa:	4a74      	ldr	r2, [pc, #464]	@ (800b17c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800afac:	430b      	orrs	r3, r1
 800afae:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800afb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800afb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afb8:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800afbc:	633b      	str	r3, [r7, #48]	@ 0x30
 800afbe:	2300      	movs	r3, #0
 800afc0:	637b      	str	r3, [r7, #52]	@ 0x34
 800afc2:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800afc6:	460b      	mov	r3, r1
 800afc8:	4313      	orrs	r3, r2
 800afca:	d00a      	beq.n	800afe2 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800afcc:	4b6b      	ldr	r3, [pc, #428]	@ (800b17c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800afce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800afd0:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800afd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800afd8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800afdc:	4a67      	ldr	r2, [pc, #412]	@ (800b17c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800afde:	430b      	orrs	r3, r1
 800afe0:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800afe2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800afe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afea:	2100      	movs	r1, #0
 800afec:	62b9      	str	r1, [r7, #40]	@ 0x28
 800afee:	f003 0301 	and.w	r3, r3, #1
 800aff2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800aff4:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800aff8:	460b      	mov	r3, r1
 800affa:	4313      	orrs	r3, r2
 800affc:	d011      	beq.n	800b022 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800affe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b002:	3308      	adds	r3, #8
 800b004:	2100      	movs	r1, #0
 800b006:	4618      	mov	r0, r3
 800b008:	f001 fa4a 	bl	800c4a0 <RCCEx_PLL2_Config>
 800b00c:	4603      	mov	r3, r0
 800b00e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800b012:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b016:	2b00      	cmp	r3, #0
 800b018:	d003      	beq.n	800b022 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b01a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b01e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800b022:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b026:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b02a:	2100      	movs	r1, #0
 800b02c:	6239      	str	r1, [r7, #32]
 800b02e:	f003 0302 	and.w	r3, r3, #2
 800b032:	627b      	str	r3, [r7, #36]	@ 0x24
 800b034:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800b038:	460b      	mov	r3, r1
 800b03a:	4313      	orrs	r3, r2
 800b03c:	d011      	beq.n	800b062 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b03e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b042:	3308      	adds	r3, #8
 800b044:	2101      	movs	r1, #1
 800b046:	4618      	mov	r0, r3
 800b048:	f001 fa2a 	bl	800c4a0 <RCCEx_PLL2_Config>
 800b04c:	4603      	mov	r3, r0
 800b04e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800b052:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b056:	2b00      	cmp	r3, #0
 800b058:	d003      	beq.n	800b062 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b05a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b05e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800b062:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b066:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b06a:	2100      	movs	r1, #0
 800b06c:	61b9      	str	r1, [r7, #24]
 800b06e:	f003 0304 	and.w	r3, r3, #4
 800b072:	61fb      	str	r3, [r7, #28]
 800b074:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800b078:	460b      	mov	r3, r1
 800b07a:	4313      	orrs	r3, r2
 800b07c:	d011      	beq.n	800b0a2 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b07e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b082:	3308      	adds	r3, #8
 800b084:	2102      	movs	r1, #2
 800b086:	4618      	mov	r0, r3
 800b088:	f001 fa0a 	bl	800c4a0 <RCCEx_PLL2_Config>
 800b08c:	4603      	mov	r3, r0
 800b08e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800b092:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b096:	2b00      	cmp	r3, #0
 800b098:	d003      	beq.n	800b0a2 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b09a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b09e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800b0a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b0a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0aa:	2100      	movs	r1, #0
 800b0ac:	6139      	str	r1, [r7, #16]
 800b0ae:	f003 0308 	and.w	r3, r3, #8
 800b0b2:	617b      	str	r3, [r7, #20]
 800b0b4:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800b0b8:	460b      	mov	r3, r1
 800b0ba:	4313      	orrs	r3, r2
 800b0bc:	d011      	beq.n	800b0e2 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b0be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b0c2:	3328      	adds	r3, #40	@ 0x28
 800b0c4:	2100      	movs	r1, #0
 800b0c6:	4618      	mov	r0, r3
 800b0c8:	f001 fa9c 	bl	800c604 <RCCEx_PLL3_Config>
 800b0cc:	4603      	mov	r3, r0
 800b0ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 800b0d2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	d003      	beq.n	800b0e2 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b0da:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b0de:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800b0e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b0e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0ea:	2100      	movs	r1, #0
 800b0ec:	60b9      	str	r1, [r7, #8]
 800b0ee:	f003 0310 	and.w	r3, r3, #16
 800b0f2:	60fb      	str	r3, [r7, #12]
 800b0f4:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800b0f8:	460b      	mov	r3, r1
 800b0fa:	4313      	orrs	r3, r2
 800b0fc:	d011      	beq.n	800b122 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b0fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b102:	3328      	adds	r3, #40	@ 0x28
 800b104:	2101      	movs	r1, #1
 800b106:	4618      	mov	r0, r3
 800b108:	f001 fa7c 	bl	800c604 <RCCEx_PLL3_Config>
 800b10c:	4603      	mov	r3, r0
 800b10e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800b112:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b116:	2b00      	cmp	r3, #0
 800b118:	d003      	beq.n	800b122 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b11a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b11e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800b122:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b126:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b12a:	2100      	movs	r1, #0
 800b12c:	6039      	str	r1, [r7, #0]
 800b12e:	f003 0320 	and.w	r3, r3, #32
 800b132:	607b      	str	r3, [r7, #4]
 800b134:	e9d7 1200 	ldrd	r1, r2, [r7]
 800b138:	460b      	mov	r3, r1
 800b13a:	4313      	orrs	r3, r2
 800b13c:	d011      	beq.n	800b162 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b13e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b142:	3328      	adds	r3, #40	@ 0x28
 800b144:	2102      	movs	r1, #2
 800b146:	4618      	mov	r0, r3
 800b148:	f001 fa5c 	bl	800c604 <RCCEx_PLL3_Config>
 800b14c:	4603      	mov	r3, r0
 800b14e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800b152:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b156:	2b00      	cmp	r3, #0
 800b158:	d003      	beq.n	800b162 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b15a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800b15e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 800b162:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 800b166:	2b00      	cmp	r3, #0
 800b168:	d101      	bne.n	800b16e <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800b16a:	2300      	movs	r3, #0
 800b16c:	e000      	b.n	800b170 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800b16e:	2301      	movs	r3, #1
}
 800b170:	4618      	mov	r0, r3
 800b172:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 800b176:	46bd      	mov	sp, r7
 800b178:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b17c:	58024400 	.word	0x58024400

0800b180 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800b180:	b580      	push	{r7, lr}
 800b182:	b090      	sub	sp, #64	@ 0x40
 800b184:	af00      	add	r7, sp, #0
 800b186:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800b18a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b18e:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 800b192:	430b      	orrs	r3, r1
 800b194:	f040 8094 	bne.w	800b2c0 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800b198:	4b9e      	ldr	r3, [pc, #632]	@ (800b414 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b19a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b19c:	f003 0307 	and.w	r3, r3, #7
 800b1a0:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800b1a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b1a4:	2b04      	cmp	r3, #4
 800b1a6:	f200 8087 	bhi.w	800b2b8 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800b1aa:	a201      	add	r2, pc, #4	@ (adr r2, 800b1b0 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800b1ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b1b0:	0800b1c5 	.word	0x0800b1c5
 800b1b4:	0800b1ed 	.word	0x0800b1ed
 800b1b8:	0800b215 	.word	0x0800b215
 800b1bc:	0800b2b1 	.word	0x0800b2b1
 800b1c0:	0800b23d 	.word	0x0800b23d
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b1c4:	4b93      	ldr	r3, [pc, #588]	@ (800b414 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b1c6:	681b      	ldr	r3, [r3, #0]
 800b1c8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b1cc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b1d0:	d108      	bne.n	800b1e4 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b1d2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b1d6:	4618      	mov	r0, r3
 800b1d8:	f001 f810 	bl	800c1fc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b1dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b1de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b1e0:	f000 bd45 	b.w	800bc6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b1e4:	2300      	movs	r3, #0
 800b1e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b1e8:	f000 bd41 	b.w	800bc6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b1ec:	4b89      	ldr	r3, [pc, #548]	@ (800b414 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b1ee:	681b      	ldr	r3, [r3, #0]
 800b1f0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b1f4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b1f8:	d108      	bne.n	800b20c <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b1fa:	f107 0318 	add.w	r3, r7, #24
 800b1fe:	4618      	mov	r0, r3
 800b200:	f000 fd54 	bl	800bcac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b204:	69bb      	ldr	r3, [r7, #24]
 800b206:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b208:	f000 bd31 	b.w	800bc6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b20c:	2300      	movs	r3, #0
 800b20e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b210:	f000 bd2d 	b.w	800bc6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b214:	4b7f      	ldr	r3, [pc, #508]	@ (800b414 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b216:	681b      	ldr	r3, [r3, #0]
 800b218:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b21c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b220:	d108      	bne.n	800b234 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b222:	f107 030c 	add.w	r3, r7, #12
 800b226:	4618      	mov	r0, r3
 800b228:	f000 fe94 	bl	800bf54 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b22c:	68fb      	ldr	r3, [r7, #12]
 800b22e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b230:	f000 bd1d 	b.w	800bc6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b234:	2300      	movs	r3, #0
 800b236:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b238:	f000 bd19 	b.w	800bc6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b23c:	4b75      	ldr	r3, [pc, #468]	@ (800b414 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b23e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b240:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800b244:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b246:	4b73      	ldr	r3, [pc, #460]	@ (800b414 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b248:	681b      	ldr	r3, [r3, #0]
 800b24a:	f003 0304 	and.w	r3, r3, #4
 800b24e:	2b04      	cmp	r3, #4
 800b250:	d10c      	bne.n	800b26c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800b252:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b254:	2b00      	cmp	r3, #0
 800b256:	d109      	bne.n	800b26c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b258:	4b6e      	ldr	r3, [pc, #440]	@ (800b414 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b25a:	681b      	ldr	r3, [r3, #0]
 800b25c:	08db      	lsrs	r3, r3, #3
 800b25e:	f003 0303 	and.w	r3, r3, #3
 800b262:	4a6d      	ldr	r2, [pc, #436]	@ (800b418 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800b264:	fa22 f303 	lsr.w	r3, r2, r3
 800b268:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b26a:	e01f      	b.n	800b2ac <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b26c:	4b69      	ldr	r3, [pc, #420]	@ (800b414 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b26e:	681b      	ldr	r3, [r3, #0]
 800b270:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b274:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b278:	d106      	bne.n	800b288 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800b27a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b27c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b280:	d102      	bne.n	800b288 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b282:	4b66      	ldr	r3, [pc, #408]	@ (800b41c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800b284:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b286:	e011      	b.n	800b2ac <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b288:	4b62      	ldr	r3, [pc, #392]	@ (800b414 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b28a:	681b      	ldr	r3, [r3, #0]
 800b28c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b290:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b294:	d106      	bne.n	800b2a4 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800b296:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b298:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b29c:	d102      	bne.n	800b2a4 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b29e:	4b60      	ldr	r3, [pc, #384]	@ (800b420 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800b2a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b2a2:	e003      	b.n	800b2ac <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b2a4:	2300      	movs	r3, #0
 800b2a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800b2a8:	f000 bce1 	b.w	800bc6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b2ac:	f000 bcdf 	b.w	800bc6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800b2b0:	4b5c      	ldr	r3, [pc, #368]	@ (800b424 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800b2b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b2b4:	f000 bcdb 	b.w	800bc6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800b2b8:	2300      	movs	r3, #0
 800b2ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b2bc:	f000 bcd7 	b.w	800bc6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800b2c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b2c4:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 800b2c8:	430b      	orrs	r3, r1
 800b2ca:	f040 80ad 	bne.w	800b428 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 800b2ce:	4b51      	ldr	r3, [pc, #324]	@ (800b414 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b2d0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b2d2:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 800b2d6:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800b2d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b2da:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b2de:	d056      	beq.n	800b38e <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 800b2e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b2e2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b2e6:	f200 8090 	bhi.w	800b40a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800b2ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b2ec:	2bc0      	cmp	r3, #192	@ 0xc0
 800b2ee:	f000 8088 	beq.w	800b402 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 800b2f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b2f4:	2bc0      	cmp	r3, #192	@ 0xc0
 800b2f6:	f200 8088 	bhi.w	800b40a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800b2fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b2fc:	2b80      	cmp	r3, #128	@ 0x80
 800b2fe:	d032      	beq.n	800b366 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800b300:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b302:	2b80      	cmp	r3, #128	@ 0x80
 800b304:	f200 8081 	bhi.w	800b40a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800b308:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b30a:	2b00      	cmp	r3, #0
 800b30c:	d003      	beq.n	800b316 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 800b30e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b310:	2b40      	cmp	r3, #64	@ 0x40
 800b312:	d014      	beq.n	800b33e <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 800b314:	e079      	b.n	800b40a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b316:	4b3f      	ldr	r3, [pc, #252]	@ (800b414 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b318:	681b      	ldr	r3, [r3, #0]
 800b31a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b31e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b322:	d108      	bne.n	800b336 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b324:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b328:	4618      	mov	r0, r3
 800b32a:	f000 ff67 	bl	800c1fc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b32e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b330:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b332:	f000 bc9c 	b.w	800bc6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b336:	2300      	movs	r3, #0
 800b338:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b33a:	f000 bc98 	b.w	800bc6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b33e:	4b35      	ldr	r3, [pc, #212]	@ (800b414 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b340:	681b      	ldr	r3, [r3, #0]
 800b342:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b346:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b34a:	d108      	bne.n	800b35e <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b34c:	f107 0318 	add.w	r3, r7, #24
 800b350:	4618      	mov	r0, r3
 800b352:	f000 fcab 	bl	800bcac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b356:	69bb      	ldr	r3, [r7, #24]
 800b358:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b35a:	f000 bc88 	b.w	800bc6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b35e:	2300      	movs	r3, #0
 800b360:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b362:	f000 bc84 	b.w	800bc6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b366:	4b2b      	ldr	r3, [pc, #172]	@ (800b414 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b368:	681b      	ldr	r3, [r3, #0]
 800b36a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b36e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b372:	d108      	bne.n	800b386 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b374:	f107 030c 	add.w	r3, r7, #12
 800b378:	4618      	mov	r0, r3
 800b37a:	f000 fdeb 	bl	800bf54 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b37e:	68fb      	ldr	r3, [r7, #12]
 800b380:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b382:	f000 bc74 	b.w	800bc6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b386:	2300      	movs	r3, #0
 800b388:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b38a:	f000 bc70 	b.w	800bc6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b38e:	4b21      	ldr	r3, [pc, #132]	@ (800b414 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b390:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b392:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800b396:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b398:	4b1e      	ldr	r3, [pc, #120]	@ (800b414 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b39a:	681b      	ldr	r3, [r3, #0]
 800b39c:	f003 0304 	and.w	r3, r3, #4
 800b3a0:	2b04      	cmp	r3, #4
 800b3a2:	d10c      	bne.n	800b3be <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 800b3a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b3a6:	2b00      	cmp	r3, #0
 800b3a8:	d109      	bne.n	800b3be <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b3aa:	4b1a      	ldr	r3, [pc, #104]	@ (800b414 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b3ac:	681b      	ldr	r3, [r3, #0]
 800b3ae:	08db      	lsrs	r3, r3, #3
 800b3b0:	f003 0303 	and.w	r3, r3, #3
 800b3b4:	4a18      	ldr	r2, [pc, #96]	@ (800b418 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800b3b6:	fa22 f303 	lsr.w	r3, r2, r3
 800b3ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b3bc:	e01f      	b.n	800b3fe <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b3be:	4b15      	ldr	r3, [pc, #84]	@ (800b414 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b3c0:	681b      	ldr	r3, [r3, #0]
 800b3c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b3c6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b3ca:	d106      	bne.n	800b3da <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 800b3cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b3ce:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b3d2:	d102      	bne.n	800b3da <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b3d4:	4b11      	ldr	r3, [pc, #68]	@ (800b41c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800b3d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b3d8:	e011      	b.n	800b3fe <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b3da:	4b0e      	ldr	r3, [pc, #56]	@ (800b414 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b3dc:	681b      	ldr	r3, [r3, #0]
 800b3de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b3e2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b3e6:	d106      	bne.n	800b3f6 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 800b3e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b3ea:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b3ee:	d102      	bne.n	800b3f6 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b3f0:	4b0b      	ldr	r3, [pc, #44]	@ (800b420 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800b3f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b3f4:	e003      	b.n	800b3fe <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b3f6:	2300      	movs	r3, #0
 800b3f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800b3fa:	f000 bc38 	b.w	800bc6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b3fe:	f000 bc36 	b.w	800bc6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800b402:	4b08      	ldr	r3, [pc, #32]	@ (800b424 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800b404:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b406:	f000 bc32 	b.w	800bc6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800b40a:	2300      	movs	r3, #0
 800b40c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b40e:	f000 bc2e 	b.w	800bc6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b412:	bf00      	nop
 800b414:	58024400 	.word	0x58024400
 800b418:	03d09000 	.word	0x03d09000
 800b41c:	003d0900 	.word	0x003d0900
 800b420:	017d7840 	.word	0x017d7840
 800b424:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800b428:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b42c:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 800b430:	430b      	orrs	r3, r1
 800b432:	f040 809c 	bne.w	800b56e <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800b436:	4b9e      	ldr	r3, [pc, #632]	@ (800b6b0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b438:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b43a:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 800b43e:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800b440:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b442:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800b446:	d054      	beq.n	800b4f2 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 800b448:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b44a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800b44e:	f200 808b 	bhi.w	800b568 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800b452:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b454:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800b458:	f000 8083 	beq.w	800b562 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 800b45c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b45e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800b462:	f200 8081 	bhi.w	800b568 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800b466:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b468:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800b46c:	d02f      	beq.n	800b4ce <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 800b46e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b470:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800b474:	d878      	bhi.n	800b568 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800b476:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b478:	2b00      	cmp	r3, #0
 800b47a:	d004      	beq.n	800b486 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800b47c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b47e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b482:	d012      	beq.n	800b4aa <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800b484:	e070      	b.n	800b568 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b486:	4b8a      	ldr	r3, [pc, #552]	@ (800b6b0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b488:	681b      	ldr	r3, [r3, #0]
 800b48a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b48e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b492:	d107      	bne.n	800b4a4 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b494:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b498:	4618      	mov	r0, r3
 800b49a:	f000 feaf 	bl	800c1fc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b49e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b4a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b4a2:	e3e4      	b.n	800bc6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b4a4:	2300      	movs	r3, #0
 800b4a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b4a8:	e3e1      	b.n	800bc6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b4aa:	4b81      	ldr	r3, [pc, #516]	@ (800b6b0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b4ac:	681b      	ldr	r3, [r3, #0]
 800b4ae:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b4b2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b4b6:	d107      	bne.n	800b4c8 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b4b8:	f107 0318 	add.w	r3, r7, #24
 800b4bc:	4618      	mov	r0, r3
 800b4be:	f000 fbf5 	bl	800bcac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b4c2:	69bb      	ldr	r3, [r7, #24]
 800b4c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b4c6:	e3d2      	b.n	800bc6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b4c8:	2300      	movs	r3, #0
 800b4ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b4cc:	e3cf      	b.n	800bc6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b4ce:	4b78      	ldr	r3, [pc, #480]	@ (800b6b0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b4d0:	681b      	ldr	r3, [r3, #0]
 800b4d2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b4d6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b4da:	d107      	bne.n	800b4ec <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b4dc:	f107 030c 	add.w	r3, r7, #12
 800b4e0:	4618      	mov	r0, r3
 800b4e2:	f000 fd37 	bl	800bf54 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b4e6:	68fb      	ldr	r3, [r7, #12]
 800b4e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b4ea:	e3c0      	b.n	800bc6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b4ec:	2300      	movs	r3, #0
 800b4ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b4f0:	e3bd      	b.n	800bc6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b4f2:	4b6f      	ldr	r3, [pc, #444]	@ (800b6b0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b4f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b4f6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800b4fa:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b4fc:	4b6c      	ldr	r3, [pc, #432]	@ (800b6b0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b4fe:	681b      	ldr	r3, [r3, #0]
 800b500:	f003 0304 	and.w	r3, r3, #4
 800b504:	2b04      	cmp	r3, #4
 800b506:	d10c      	bne.n	800b522 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 800b508:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b50a:	2b00      	cmp	r3, #0
 800b50c:	d109      	bne.n	800b522 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b50e:	4b68      	ldr	r3, [pc, #416]	@ (800b6b0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b510:	681b      	ldr	r3, [r3, #0]
 800b512:	08db      	lsrs	r3, r3, #3
 800b514:	f003 0303 	and.w	r3, r3, #3
 800b518:	4a66      	ldr	r2, [pc, #408]	@ (800b6b4 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800b51a:	fa22 f303 	lsr.w	r3, r2, r3
 800b51e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b520:	e01e      	b.n	800b560 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b522:	4b63      	ldr	r3, [pc, #396]	@ (800b6b0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b524:	681b      	ldr	r3, [r3, #0]
 800b526:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b52a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b52e:	d106      	bne.n	800b53e <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 800b530:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b532:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b536:	d102      	bne.n	800b53e <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b538:	4b5f      	ldr	r3, [pc, #380]	@ (800b6b8 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800b53a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b53c:	e010      	b.n	800b560 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b53e:	4b5c      	ldr	r3, [pc, #368]	@ (800b6b0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b540:	681b      	ldr	r3, [r3, #0]
 800b542:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b546:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b54a:	d106      	bne.n	800b55a <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 800b54c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b54e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b552:	d102      	bne.n	800b55a <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b554:	4b59      	ldr	r3, [pc, #356]	@ (800b6bc <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800b556:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b558:	e002      	b.n	800b560 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b55a:	2300      	movs	r3, #0
 800b55c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800b55e:	e386      	b.n	800bc6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b560:	e385      	b.n	800bc6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800b562:	4b57      	ldr	r3, [pc, #348]	@ (800b6c0 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800b564:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b566:	e382      	b.n	800bc6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800b568:	2300      	movs	r3, #0
 800b56a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b56c:	e37f      	b.n	800bc6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800b56e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b572:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 800b576:	430b      	orrs	r3, r1
 800b578:	f040 80a7 	bne.w	800b6ca <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800b57c:	4b4c      	ldr	r3, [pc, #304]	@ (800b6b0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b57e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b580:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 800b584:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800b586:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b588:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800b58c:	d055      	beq.n	800b63a <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 800b58e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b590:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800b594:	f200 8096 	bhi.w	800b6c4 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800b598:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b59a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800b59e:	f000 8084 	beq.w	800b6aa <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800b5a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b5a4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800b5a8:	f200 808c 	bhi.w	800b6c4 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800b5ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b5ae:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b5b2:	d030      	beq.n	800b616 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 800b5b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b5b6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b5ba:	f200 8083 	bhi.w	800b6c4 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800b5be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b5c0:	2b00      	cmp	r3, #0
 800b5c2:	d004      	beq.n	800b5ce <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 800b5c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b5c6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b5ca:	d012      	beq.n	800b5f2 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 800b5cc:	e07a      	b.n	800b6c4 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b5ce:	4b38      	ldr	r3, [pc, #224]	@ (800b6b0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b5d0:	681b      	ldr	r3, [r3, #0]
 800b5d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b5d6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b5da:	d107      	bne.n	800b5ec <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b5dc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b5e0:	4618      	mov	r0, r3
 800b5e2:	f000 fe0b 	bl	800c1fc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b5e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b5e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b5ea:	e340      	b.n	800bc6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b5ec:	2300      	movs	r3, #0
 800b5ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b5f0:	e33d      	b.n	800bc6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b5f2:	4b2f      	ldr	r3, [pc, #188]	@ (800b6b0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b5f4:	681b      	ldr	r3, [r3, #0]
 800b5f6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b5fa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b5fe:	d107      	bne.n	800b610 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b600:	f107 0318 	add.w	r3, r7, #24
 800b604:	4618      	mov	r0, r3
 800b606:	f000 fb51 	bl	800bcac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b60a:	69bb      	ldr	r3, [r7, #24]
 800b60c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b60e:	e32e      	b.n	800bc6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b610:	2300      	movs	r3, #0
 800b612:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b614:	e32b      	b.n	800bc6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b616:	4b26      	ldr	r3, [pc, #152]	@ (800b6b0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b618:	681b      	ldr	r3, [r3, #0]
 800b61a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b61e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b622:	d107      	bne.n	800b634 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b624:	f107 030c 	add.w	r3, r7, #12
 800b628:	4618      	mov	r0, r3
 800b62a:	f000 fc93 	bl	800bf54 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b62e:	68fb      	ldr	r3, [r7, #12]
 800b630:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b632:	e31c      	b.n	800bc6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b634:	2300      	movs	r3, #0
 800b636:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b638:	e319      	b.n	800bc6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b63a:	4b1d      	ldr	r3, [pc, #116]	@ (800b6b0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b63c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b63e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800b642:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b644:	4b1a      	ldr	r3, [pc, #104]	@ (800b6b0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b646:	681b      	ldr	r3, [r3, #0]
 800b648:	f003 0304 	and.w	r3, r3, #4
 800b64c:	2b04      	cmp	r3, #4
 800b64e:	d10c      	bne.n	800b66a <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 800b650:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b652:	2b00      	cmp	r3, #0
 800b654:	d109      	bne.n	800b66a <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b656:	4b16      	ldr	r3, [pc, #88]	@ (800b6b0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b658:	681b      	ldr	r3, [r3, #0]
 800b65a:	08db      	lsrs	r3, r3, #3
 800b65c:	f003 0303 	and.w	r3, r3, #3
 800b660:	4a14      	ldr	r2, [pc, #80]	@ (800b6b4 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800b662:	fa22 f303 	lsr.w	r3, r2, r3
 800b666:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b668:	e01e      	b.n	800b6a8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b66a:	4b11      	ldr	r3, [pc, #68]	@ (800b6b0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b66c:	681b      	ldr	r3, [r3, #0]
 800b66e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b672:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b676:	d106      	bne.n	800b686 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 800b678:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b67a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b67e:	d102      	bne.n	800b686 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b680:	4b0d      	ldr	r3, [pc, #52]	@ (800b6b8 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800b682:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b684:	e010      	b.n	800b6a8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b686:	4b0a      	ldr	r3, [pc, #40]	@ (800b6b0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b688:	681b      	ldr	r3, [r3, #0]
 800b68a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b68e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b692:	d106      	bne.n	800b6a2 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 800b694:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b696:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b69a:	d102      	bne.n	800b6a2 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b69c:	4b07      	ldr	r3, [pc, #28]	@ (800b6bc <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800b69e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b6a0:	e002      	b.n	800b6a8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b6a2:	2300      	movs	r3, #0
 800b6a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800b6a6:	e2e2      	b.n	800bc6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b6a8:	e2e1      	b.n	800bc6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800b6aa:	4b05      	ldr	r3, [pc, #20]	@ (800b6c0 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800b6ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b6ae:	e2de      	b.n	800bc6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b6b0:	58024400 	.word	0x58024400
 800b6b4:	03d09000 	.word	0x03d09000
 800b6b8:	003d0900 	.word	0x003d0900
 800b6bc:	017d7840 	.word	0x017d7840
 800b6c0:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 800b6c4:	2300      	movs	r3, #0
 800b6c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b6c8:	e2d1      	b.n	800bc6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800b6ca:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b6ce:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 800b6d2:	430b      	orrs	r3, r1
 800b6d4:	f040 809c 	bne.w	800b810 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800b6d8:	4b93      	ldr	r3, [pc, #588]	@ (800b928 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b6da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b6dc:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800b6e0:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800b6e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b6e4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b6e8:	d054      	beq.n	800b794 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800b6ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b6ec:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b6f0:	f200 808b 	bhi.w	800b80a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800b6f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b6f6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800b6fa:	f000 8083 	beq.w	800b804 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 800b6fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b700:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800b704:	f200 8081 	bhi.w	800b80a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800b708:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b70a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b70e:	d02f      	beq.n	800b770 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 800b710:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b712:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b716:	d878      	bhi.n	800b80a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800b718:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b71a:	2b00      	cmp	r3, #0
 800b71c:	d004      	beq.n	800b728 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800b71e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b720:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b724:	d012      	beq.n	800b74c <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 800b726:	e070      	b.n	800b80a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b728:	4b7f      	ldr	r3, [pc, #508]	@ (800b928 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b72a:	681b      	ldr	r3, [r3, #0]
 800b72c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b730:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b734:	d107      	bne.n	800b746 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b736:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b73a:	4618      	mov	r0, r3
 800b73c:	f000 fd5e 	bl	800c1fc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b740:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b742:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b744:	e293      	b.n	800bc6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b746:	2300      	movs	r3, #0
 800b748:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b74a:	e290      	b.n	800bc6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b74c:	4b76      	ldr	r3, [pc, #472]	@ (800b928 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b74e:	681b      	ldr	r3, [r3, #0]
 800b750:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b754:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b758:	d107      	bne.n	800b76a <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b75a:	f107 0318 	add.w	r3, r7, #24
 800b75e:	4618      	mov	r0, r3
 800b760:	f000 faa4 	bl	800bcac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b764:	69bb      	ldr	r3, [r7, #24]
 800b766:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b768:	e281      	b.n	800bc6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b76a:	2300      	movs	r3, #0
 800b76c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b76e:	e27e      	b.n	800bc6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b770:	4b6d      	ldr	r3, [pc, #436]	@ (800b928 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b772:	681b      	ldr	r3, [r3, #0]
 800b774:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b778:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b77c:	d107      	bne.n	800b78e <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b77e:	f107 030c 	add.w	r3, r7, #12
 800b782:	4618      	mov	r0, r3
 800b784:	f000 fbe6 	bl	800bf54 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b788:	68fb      	ldr	r3, [r7, #12]
 800b78a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b78c:	e26f      	b.n	800bc6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b78e:	2300      	movs	r3, #0
 800b790:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b792:	e26c      	b.n	800bc6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b794:	4b64      	ldr	r3, [pc, #400]	@ (800b928 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b796:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b798:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800b79c:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b79e:	4b62      	ldr	r3, [pc, #392]	@ (800b928 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b7a0:	681b      	ldr	r3, [r3, #0]
 800b7a2:	f003 0304 	and.w	r3, r3, #4
 800b7a6:	2b04      	cmp	r3, #4
 800b7a8:	d10c      	bne.n	800b7c4 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 800b7aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b7ac:	2b00      	cmp	r3, #0
 800b7ae:	d109      	bne.n	800b7c4 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b7b0:	4b5d      	ldr	r3, [pc, #372]	@ (800b928 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b7b2:	681b      	ldr	r3, [r3, #0]
 800b7b4:	08db      	lsrs	r3, r3, #3
 800b7b6:	f003 0303 	and.w	r3, r3, #3
 800b7ba:	4a5c      	ldr	r2, [pc, #368]	@ (800b92c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800b7bc:	fa22 f303 	lsr.w	r3, r2, r3
 800b7c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b7c2:	e01e      	b.n	800b802 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b7c4:	4b58      	ldr	r3, [pc, #352]	@ (800b928 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b7c6:	681b      	ldr	r3, [r3, #0]
 800b7c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b7cc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b7d0:	d106      	bne.n	800b7e0 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 800b7d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b7d4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b7d8:	d102      	bne.n	800b7e0 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b7da:	4b55      	ldr	r3, [pc, #340]	@ (800b930 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800b7dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b7de:	e010      	b.n	800b802 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b7e0:	4b51      	ldr	r3, [pc, #324]	@ (800b928 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b7e2:	681b      	ldr	r3, [r3, #0]
 800b7e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b7e8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b7ec:	d106      	bne.n	800b7fc <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800b7ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b7f0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b7f4:	d102      	bne.n	800b7fc <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b7f6:	4b4f      	ldr	r3, [pc, #316]	@ (800b934 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800b7f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b7fa:	e002      	b.n	800b802 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b7fc:	2300      	movs	r3, #0
 800b7fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800b800:	e235      	b.n	800bc6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b802:	e234      	b.n	800bc6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800b804:	4b4c      	ldr	r3, [pc, #304]	@ (800b938 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800b806:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b808:	e231      	b.n	800bc6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800b80a:	2300      	movs	r3, #0
 800b80c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b80e:	e22e      	b.n	800bc6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800b810:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b814:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 800b818:	430b      	orrs	r3, r1
 800b81a:	f040 808f 	bne.w	800b93c <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800b81e:	4b42      	ldr	r3, [pc, #264]	@ (800b928 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b820:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b822:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800b826:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 800b828:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b82a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800b82e:	d06b      	beq.n	800b908 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 800b830:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b832:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800b836:	d874      	bhi.n	800b922 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800b838:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b83a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800b83e:	d056      	beq.n	800b8ee <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 800b840:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b842:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800b846:	d86c      	bhi.n	800b922 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800b848:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b84a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800b84e:	d03b      	beq.n	800b8c8 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 800b850:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b852:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800b856:	d864      	bhi.n	800b922 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800b858:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b85a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b85e:	d021      	beq.n	800b8a4 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800b860:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b862:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b866:	d85c      	bhi.n	800b922 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800b868:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b86a:	2b00      	cmp	r3, #0
 800b86c:	d004      	beq.n	800b878 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 800b86e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b870:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b874:	d004      	beq.n	800b880 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 800b876:	e054      	b.n	800b922 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800b878:	f7fe fa4c 	bl	8009d14 <HAL_RCC_GetPCLK1Freq>
 800b87c:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800b87e:	e1f6      	b.n	800bc6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b880:	4b29      	ldr	r3, [pc, #164]	@ (800b928 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b882:	681b      	ldr	r3, [r3, #0]
 800b884:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b888:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b88c:	d107      	bne.n	800b89e <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b88e:	f107 0318 	add.w	r3, r7, #24
 800b892:	4618      	mov	r0, r3
 800b894:	f000 fa0a 	bl	800bcac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b898:	69fb      	ldr	r3, [r7, #28]
 800b89a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b89c:	e1e7      	b.n	800bc6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b89e:	2300      	movs	r3, #0
 800b8a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b8a2:	e1e4      	b.n	800bc6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b8a4:	4b20      	ldr	r3, [pc, #128]	@ (800b928 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b8a6:	681b      	ldr	r3, [r3, #0]
 800b8a8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b8ac:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b8b0:	d107      	bne.n	800b8c2 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b8b2:	f107 030c 	add.w	r3, r7, #12
 800b8b6:	4618      	mov	r0, r3
 800b8b8:	f000 fb4c 	bl	800bf54 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800b8bc:	693b      	ldr	r3, [r7, #16]
 800b8be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b8c0:	e1d5      	b.n	800bc6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b8c2:	2300      	movs	r3, #0
 800b8c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b8c6:	e1d2      	b.n	800bc6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800b8c8:	4b17      	ldr	r3, [pc, #92]	@ (800b928 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b8ca:	681b      	ldr	r3, [r3, #0]
 800b8cc:	f003 0304 	and.w	r3, r3, #4
 800b8d0:	2b04      	cmp	r3, #4
 800b8d2:	d109      	bne.n	800b8e8 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b8d4:	4b14      	ldr	r3, [pc, #80]	@ (800b928 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b8d6:	681b      	ldr	r3, [r3, #0]
 800b8d8:	08db      	lsrs	r3, r3, #3
 800b8da:	f003 0303 	and.w	r3, r3, #3
 800b8de:	4a13      	ldr	r2, [pc, #76]	@ (800b92c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800b8e0:	fa22 f303 	lsr.w	r3, r2, r3
 800b8e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b8e6:	e1c2      	b.n	800bc6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b8e8:	2300      	movs	r3, #0
 800b8ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b8ec:	e1bf      	b.n	800bc6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800b8ee:	4b0e      	ldr	r3, [pc, #56]	@ (800b928 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b8f0:	681b      	ldr	r3, [r3, #0]
 800b8f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b8f6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b8fa:	d102      	bne.n	800b902 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 800b8fc:	4b0c      	ldr	r3, [pc, #48]	@ (800b930 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800b8fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b900:	e1b5      	b.n	800bc6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b902:	2300      	movs	r3, #0
 800b904:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b906:	e1b2      	b.n	800bc6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800b908:	4b07      	ldr	r3, [pc, #28]	@ (800b928 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b90a:	681b      	ldr	r3, [r3, #0]
 800b90c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b910:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b914:	d102      	bne.n	800b91c <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 800b916:	4b07      	ldr	r3, [pc, #28]	@ (800b934 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800b918:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b91a:	e1a8      	b.n	800bc6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b91c:	2300      	movs	r3, #0
 800b91e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b920:	e1a5      	b.n	800bc6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800b922:	2300      	movs	r3, #0
 800b924:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b926:	e1a2      	b.n	800bc6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b928:	58024400 	.word	0x58024400
 800b92c:	03d09000 	.word	0x03d09000
 800b930:	003d0900 	.word	0x003d0900
 800b934:	017d7840 	.word	0x017d7840
 800b938:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800b93c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b940:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 800b944:	430b      	orrs	r3, r1
 800b946:	d173      	bne.n	800ba30 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800b948:	4b9c      	ldr	r3, [pc, #624]	@ (800bbbc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b94a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b94c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800b950:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800b952:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b954:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b958:	d02f      	beq.n	800b9ba <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800b95a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b95c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b960:	d863      	bhi.n	800ba2a <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 800b962:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b964:	2b00      	cmp	r3, #0
 800b966:	d004      	beq.n	800b972 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 800b968:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b96a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b96e:	d012      	beq.n	800b996 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 800b970:	e05b      	b.n	800ba2a <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b972:	4b92      	ldr	r3, [pc, #584]	@ (800bbbc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b974:	681b      	ldr	r3, [r3, #0]
 800b976:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b97a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b97e:	d107      	bne.n	800b990 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b980:	f107 0318 	add.w	r3, r7, #24
 800b984:	4618      	mov	r0, r3
 800b986:	f000 f991 	bl	800bcac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b98a:	69bb      	ldr	r3, [r7, #24]
 800b98c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b98e:	e16e      	b.n	800bc6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b990:	2300      	movs	r3, #0
 800b992:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b994:	e16b      	b.n	800bc6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b996:	4b89      	ldr	r3, [pc, #548]	@ (800bbbc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b998:	681b      	ldr	r3, [r3, #0]
 800b99a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b99e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b9a2:	d107      	bne.n	800b9b4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b9a4:	f107 030c 	add.w	r3, r7, #12
 800b9a8:	4618      	mov	r0, r3
 800b9aa:	f000 fad3 	bl	800bf54 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800b9ae:	697b      	ldr	r3, [r7, #20]
 800b9b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b9b2:	e15c      	b.n	800bc6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b9b4:	2300      	movs	r3, #0
 800b9b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b9b8:	e159      	b.n	800bc6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b9ba:	4b80      	ldr	r3, [pc, #512]	@ (800bbbc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b9bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b9be:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800b9c2:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b9c4:	4b7d      	ldr	r3, [pc, #500]	@ (800bbbc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b9c6:	681b      	ldr	r3, [r3, #0]
 800b9c8:	f003 0304 	and.w	r3, r3, #4
 800b9cc:	2b04      	cmp	r3, #4
 800b9ce:	d10c      	bne.n	800b9ea <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 800b9d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b9d2:	2b00      	cmp	r3, #0
 800b9d4:	d109      	bne.n	800b9ea <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b9d6:	4b79      	ldr	r3, [pc, #484]	@ (800bbbc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b9d8:	681b      	ldr	r3, [r3, #0]
 800b9da:	08db      	lsrs	r3, r3, #3
 800b9dc:	f003 0303 	and.w	r3, r3, #3
 800b9e0:	4a77      	ldr	r2, [pc, #476]	@ (800bbc0 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800b9e2:	fa22 f303 	lsr.w	r3, r2, r3
 800b9e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b9e8:	e01e      	b.n	800ba28 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b9ea:	4b74      	ldr	r3, [pc, #464]	@ (800bbbc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b9ec:	681b      	ldr	r3, [r3, #0]
 800b9ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b9f2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b9f6:	d106      	bne.n	800ba06 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 800b9f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b9fa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b9fe:	d102      	bne.n	800ba06 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800ba00:	4b70      	ldr	r3, [pc, #448]	@ (800bbc4 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800ba02:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ba04:	e010      	b.n	800ba28 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800ba06:	4b6d      	ldr	r3, [pc, #436]	@ (800bbbc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ba08:	681b      	ldr	r3, [r3, #0]
 800ba0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ba0e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ba12:	d106      	bne.n	800ba22 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 800ba14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ba16:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ba1a:	d102      	bne.n	800ba22 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800ba1c:	4b6a      	ldr	r3, [pc, #424]	@ (800bbc8 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800ba1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ba20:	e002      	b.n	800ba28 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800ba22:	2300      	movs	r3, #0
 800ba24:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800ba26:	e122      	b.n	800bc6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800ba28:	e121      	b.n	800bc6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800ba2a:	2300      	movs	r3, #0
 800ba2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ba2e:	e11e      	b.n	800bc6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800ba30:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ba34:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 800ba38:	430b      	orrs	r3, r1
 800ba3a:	d133      	bne.n	800baa4 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800ba3c:	4b5f      	ldr	r3, [pc, #380]	@ (800bbbc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ba3e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ba40:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800ba44:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800ba46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ba48:	2b00      	cmp	r3, #0
 800ba4a:	d004      	beq.n	800ba56 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 800ba4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ba4e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ba52:	d012      	beq.n	800ba7a <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 800ba54:	e023      	b.n	800ba9e <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ba56:	4b59      	ldr	r3, [pc, #356]	@ (800bbbc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ba58:	681b      	ldr	r3, [r3, #0]
 800ba5a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ba5e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800ba62:	d107      	bne.n	800ba74 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ba64:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ba68:	4618      	mov	r0, r3
 800ba6a:	f000 fbc7 	bl	800c1fc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ba6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ba70:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ba72:	e0fc      	b.n	800bc6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ba74:	2300      	movs	r3, #0
 800ba76:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ba78:	e0f9      	b.n	800bc6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ba7a:	4b50      	ldr	r3, [pc, #320]	@ (800bbbc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ba7c:	681b      	ldr	r3, [r3, #0]
 800ba7e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ba82:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ba86:	d107      	bne.n	800ba98 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ba88:	f107 0318 	add.w	r3, r7, #24
 800ba8c:	4618      	mov	r0, r3
 800ba8e:	f000 f90d 	bl	800bcac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800ba92:	6a3b      	ldr	r3, [r7, #32]
 800ba94:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ba96:	e0ea      	b.n	800bc6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ba98:	2300      	movs	r3, #0
 800ba9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ba9c:	e0e7      	b.n	800bc6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800ba9e:	2300      	movs	r3, #0
 800baa0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800baa2:	e0e4      	b.n	800bc6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800baa4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800baa8:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 800baac:	430b      	orrs	r3, r1
 800baae:	f040 808d 	bne.w	800bbcc <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800bab2:	4b42      	ldr	r3, [pc, #264]	@ (800bbbc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800bab4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bab6:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 800baba:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800babc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800babe:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800bac2:	d06b      	beq.n	800bb9c <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 800bac4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bac6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800baca:	d874      	bhi.n	800bbb6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800bacc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bace:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bad2:	d056      	beq.n	800bb82 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 800bad4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bad6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bada:	d86c      	bhi.n	800bbb6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800badc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bade:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800bae2:	d03b      	beq.n	800bb5c <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 800bae4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bae6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800baea:	d864      	bhi.n	800bbb6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800baec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800baee:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800baf2:	d021      	beq.n	800bb38 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 800baf4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800baf6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800bafa:	d85c      	bhi.n	800bbb6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800bafc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bafe:	2b00      	cmp	r3, #0
 800bb00:	d004      	beq.n	800bb0c <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 800bb02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb04:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800bb08:	d004      	beq.n	800bb14 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 800bb0a:	e054      	b.n	800bbb6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800bb0c:	f000 f8b8 	bl	800bc80 <HAL_RCCEx_GetD3PCLK1Freq>
 800bb10:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800bb12:	e0ac      	b.n	800bc6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800bb14:	4b29      	ldr	r3, [pc, #164]	@ (800bbbc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800bb16:	681b      	ldr	r3, [r3, #0]
 800bb18:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800bb1c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800bb20:	d107      	bne.n	800bb32 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bb22:	f107 0318 	add.w	r3, r7, #24
 800bb26:	4618      	mov	r0, r3
 800bb28:	f000 f8c0 	bl	800bcac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800bb2c:	69fb      	ldr	r3, [r7, #28]
 800bb2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bb30:	e09d      	b.n	800bc6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800bb32:	2300      	movs	r3, #0
 800bb34:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bb36:	e09a      	b.n	800bc6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800bb38:	4b20      	ldr	r3, [pc, #128]	@ (800bbbc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800bb3a:	681b      	ldr	r3, [r3, #0]
 800bb3c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800bb40:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800bb44:	d107      	bne.n	800bb56 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bb46:	f107 030c 	add.w	r3, r7, #12
 800bb4a:	4618      	mov	r0, r3
 800bb4c:	f000 fa02 	bl	800bf54 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800bb50:	693b      	ldr	r3, [r7, #16]
 800bb52:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bb54:	e08b      	b.n	800bc6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800bb56:	2300      	movs	r3, #0
 800bb58:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bb5a:	e088      	b.n	800bc6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800bb5c:	4b17      	ldr	r3, [pc, #92]	@ (800bbbc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800bb5e:	681b      	ldr	r3, [r3, #0]
 800bb60:	f003 0304 	and.w	r3, r3, #4
 800bb64:	2b04      	cmp	r3, #4
 800bb66:	d109      	bne.n	800bb7c <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bb68:	4b14      	ldr	r3, [pc, #80]	@ (800bbbc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800bb6a:	681b      	ldr	r3, [r3, #0]
 800bb6c:	08db      	lsrs	r3, r3, #3
 800bb6e:	f003 0303 	and.w	r3, r3, #3
 800bb72:	4a13      	ldr	r2, [pc, #76]	@ (800bbc0 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800bb74:	fa22 f303 	lsr.w	r3, r2, r3
 800bb78:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bb7a:	e078      	b.n	800bc6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800bb7c:	2300      	movs	r3, #0
 800bb7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bb80:	e075      	b.n	800bc6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800bb82:	4b0e      	ldr	r3, [pc, #56]	@ (800bbbc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800bb84:	681b      	ldr	r3, [r3, #0]
 800bb86:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bb8a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800bb8e:	d102      	bne.n	800bb96 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 800bb90:	4b0c      	ldr	r3, [pc, #48]	@ (800bbc4 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800bb92:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bb94:	e06b      	b.n	800bc6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800bb96:	2300      	movs	r3, #0
 800bb98:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bb9a:	e068      	b.n	800bc6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800bb9c:	4b07      	ldr	r3, [pc, #28]	@ (800bbbc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800bb9e:	681b      	ldr	r3, [r3, #0]
 800bba0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800bba4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800bba8:	d102      	bne.n	800bbb0 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 800bbaa:	4b07      	ldr	r3, [pc, #28]	@ (800bbc8 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800bbac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bbae:	e05e      	b.n	800bc6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800bbb0:	2300      	movs	r3, #0
 800bbb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bbb4:	e05b      	b.n	800bc6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800bbb6:	2300      	movs	r3, #0
 800bbb8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bbba:	e058      	b.n	800bc6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800bbbc:	58024400 	.word	0x58024400
 800bbc0:	03d09000 	.word	0x03d09000
 800bbc4:	003d0900 	.word	0x003d0900
 800bbc8:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800bbcc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bbd0:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 800bbd4:	430b      	orrs	r3, r1
 800bbd6:	d148      	bne.n	800bc6a <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800bbd8:	4b27      	ldr	r3, [pc, #156]	@ (800bc78 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800bbda:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bbdc:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800bbe0:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800bbe2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bbe4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800bbe8:	d02a      	beq.n	800bc40 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 800bbea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bbec:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800bbf0:	d838      	bhi.n	800bc64 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 800bbf2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bbf4:	2b00      	cmp	r3, #0
 800bbf6:	d004      	beq.n	800bc02 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800bbf8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bbfa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800bbfe:	d00d      	beq.n	800bc1c <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 800bc00:	e030      	b.n	800bc64 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800bc02:	4b1d      	ldr	r3, [pc, #116]	@ (800bc78 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800bc04:	681b      	ldr	r3, [r3, #0]
 800bc06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800bc0a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800bc0e:	d102      	bne.n	800bc16 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 800bc10:	4b1a      	ldr	r3, [pc, #104]	@ (800bc7c <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800bc12:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bc14:	e02b      	b.n	800bc6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800bc16:	2300      	movs	r3, #0
 800bc18:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bc1a:	e028      	b.n	800bc6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800bc1c:	4b16      	ldr	r3, [pc, #88]	@ (800bc78 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800bc1e:	681b      	ldr	r3, [r3, #0]
 800bc20:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800bc24:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800bc28:	d107      	bne.n	800bc3a <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800bc2a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800bc2e:	4618      	mov	r0, r3
 800bc30:	f000 fae4 	bl	800c1fc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800bc34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bc36:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bc38:	e019      	b.n	800bc6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800bc3a:	2300      	movs	r3, #0
 800bc3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bc3e:	e016      	b.n	800bc6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800bc40:	4b0d      	ldr	r3, [pc, #52]	@ (800bc78 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800bc42:	681b      	ldr	r3, [r3, #0]
 800bc44:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800bc48:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800bc4c:	d107      	bne.n	800bc5e <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bc4e:	f107 0318 	add.w	r3, r7, #24
 800bc52:	4618      	mov	r0, r3
 800bc54:	f000 f82a 	bl	800bcac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800bc58:	69fb      	ldr	r3, [r7, #28]
 800bc5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bc5c:	e007      	b.n	800bc6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800bc5e:	2300      	movs	r3, #0
 800bc60:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bc62:	e004      	b.n	800bc6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800bc64:	2300      	movs	r3, #0
 800bc66:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bc68:	e001      	b.n	800bc6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 800bc6a:	2300      	movs	r3, #0
 800bc6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 800bc6e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800bc70:	4618      	mov	r0, r3
 800bc72:	3740      	adds	r7, #64	@ 0x40
 800bc74:	46bd      	mov	sp, r7
 800bc76:	bd80      	pop	{r7, pc}
 800bc78:	58024400 	.word	0x58024400
 800bc7c:	017d7840 	.word	0x017d7840

0800bc80 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800bc80:	b580      	push	{r7, lr}
 800bc82:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800bc84:	f7fe f816 	bl	8009cb4 <HAL_RCC_GetHCLKFreq>
 800bc88:	4602      	mov	r2, r0
 800bc8a:	4b06      	ldr	r3, [pc, #24]	@ (800bca4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800bc8c:	6a1b      	ldr	r3, [r3, #32]
 800bc8e:	091b      	lsrs	r3, r3, #4
 800bc90:	f003 0307 	and.w	r3, r3, #7
 800bc94:	4904      	ldr	r1, [pc, #16]	@ (800bca8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800bc96:	5ccb      	ldrb	r3, [r1, r3]
 800bc98:	f003 031f 	and.w	r3, r3, #31
 800bc9c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800bca0:	4618      	mov	r0, r3
 800bca2:	bd80      	pop	{r7, pc}
 800bca4:	58024400 	.word	0x58024400
 800bca8:	08014b38 	.word	0x08014b38

0800bcac <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800bcac:	b480      	push	{r7}
 800bcae:	b089      	sub	sp, #36	@ 0x24
 800bcb0:	af00      	add	r7, sp, #0
 800bcb2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800bcb4:	4ba1      	ldr	r3, [pc, #644]	@ (800bf3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bcb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bcb8:	f003 0303 	and.w	r3, r3, #3
 800bcbc:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800bcbe:	4b9f      	ldr	r3, [pc, #636]	@ (800bf3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bcc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bcc2:	0b1b      	lsrs	r3, r3, #12
 800bcc4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800bcc8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800bcca:	4b9c      	ldr	r3, [pc, #624]	@ (800bf3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bccc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bcce:	091b      	lsrs	r3, r3, #4
 800bcd0:	f003 0301 	and.w	r3, r3, #1
 800bcd4:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800bcd6:	4b99      	ldr	r3, [pc, #612]	@ (800bf3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bcd8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bcda:	08db      	lsrs	r3, r3, #3
 800bcdc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800bce0:	693a      	ldr	r2, [r7, #16]
 800bce2:	fb02 f303 	mul.w	r3, r2, r3
 800bce6:	ee07 3a90 	vmov	s15, r3
 800bcea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bcee:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800bcf2:	697b      	ldr	r3, [r7, #20]
 800bcf4:	2b00      	cmp	r3, #0
 800bcf6:	f000 8111 	beq.w	800bf1c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800bcfa:	69bb      	ldr	r3, [r7, #24]
 800bcfc:	2b02      	cmp	r3, #2
 800bcfe:	f000 8083 	beq.w	800be08 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800bd02:	69bb      	ldr	r3, [r7, #24]
 800bd04:	2b02      	cmp	r3, #2
 800bd06:	f200 80a1 	bhi.w	800be4c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800bd0a:	69bb      	ldr	r3, [r7, #24]
 800bd0c:	2b00      	cmp	r3, #0
 800bd0e:	d003      	beq.n	800bd18 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800bd10:	69bb      	ldr	r3, [r7, #24]
 800bd12:	2b01      	cmp	r3, #1
 800bd14:	d056      	beq.n	800bdc4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800bd16:	e099      	b.n	800be4c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bd18:	4b88      	ldr	r3, [pc, #544]	@ (800bf3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bd1a:	681b      	ldr	r3, [r3, #0]
 800bd1c:	f003 0320 	and.w	r3, r3, #32
 800bd20:	2b00      	cmp	r3, #0
 800bd22:	d02d      	beq.n	800bd80 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bd24:	4b85      	ldr	r3, [pc, #532]	@ (800bf3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bd26:	681b      	ldr	r3, [r3, #0]
 800bd28:	08db      	lsrs	r3, r3, #3
 800bd2a:	f003 0303 	and.w	r3, r3, #3
 800bd2e:	4a84      	ldr	r2, [pc, #528]	@ (800bf40 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800bd30:	fa22 f303 	lsr.w	r3, r2, r3
 800bd34:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800bd36:	68bb      	ldr	r3, [r7, #8]
 800bd38:	ee07 3a90 	vmov	s15, r3
 800bd3c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bd40:	697b      	ldr	r3, [r7, #20]
 800bd42:	ee07 3a90 	vmov	s15, r3
 800bd46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bd4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bd4e:	4b7b      	ldr	r3, [pc, #492]	@ (800bf3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bd50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bd52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bd56:	ee07 3a90 	vmov	s15, r3
 800bd5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bd5e:	ed97 6a03 	vldr	s12, [r7, #12]
 800bd62:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800bf44 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800bd66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bd6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bd6e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bd72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bd76:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bd7a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800bd7e:	e087      	b.n	800be90 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800bd80:	697b      	ldr	r3, [r7, #20]
 800bd82:	ee07 3a90 	vmov	s15, r3
 800bd86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bd8a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800bf48 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800bd8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bd92:	4b6a      	ldr	r3, [pc, #424]	@ (800bf3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bd94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bd96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bd9a:	ee07 3a90 	vmov	s15, r3
 800bd9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bda2:	ed97 6a03 	vldr	s12, [r7, #12]
 800bda6:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800bf44 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800bdaa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bdae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bdb2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bdb6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bdba:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bdbe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bdc2:	e065      	b.n	800be90 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800bdc4:	697b      	ldr	r3, [r7, #20]
 800bdc6:	ee07 3a90 	vmov	s15, r3
 800bdca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bdce:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800bf4c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800bdd2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bdd6:	4b59      	ldr	r3, [pc, #356]	@ (800bf3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bdd8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bdda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bdde:	ee07 3a90 	vmov	s15, r3
 800bde2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bde6:	ed97 6a03 	vldr	s12, [r7, #12]
 800bdea:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800bf44 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800bdee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bdf2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bdf6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bdfa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bdfe:	ee67 7a27 	vmul.f32	s15, s14, s15
 800be02:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800be06:	e043      	b.n	800be90 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800be08:	697b      	ldr	r3, [r7, #20]
 800be0a:	ee07 3a90 	vmov	s15, r3
 800be0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800be12:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800bf50 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800be16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800be1a:	4b48      	ldr	r3, [pc, #288]	@ (800bf3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800be1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800be1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800be22:	ee07 3a90 	vmov	s15, r3
 800be26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800be2a:	ed97 6a03 	vldr	s12, [r7, #12]
 800be2e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800bf44 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800be32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800be36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800be3a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800be3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800be42:	ee67 7a27 	vmul.f32	s15, s14, s15
 800be46:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800be4a:	e021      	b.n	800be90 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800be4c:	697b      	ldr	r3, [r7, #20]
 800be4e:	ee07 3a90 	vmov	s15, r3
 800be52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800be56:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800bf4c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800be5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800be5e:	4b37      	ldr	r3, [pc, #220]	@ (800bf3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800be60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800be62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800be66:	ee07 3a90 	vmov	s15, r3
 800be6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800be6e:	ed97 6a03 	vldr	s12, [r7, #12]
 800be72:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800bf44 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800be76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800be7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800be7e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800be82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800be86:	ee67 7a27 	vmul.f32	s15, s14, s15
 800be8a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800be8e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800be90:	4b2a      	ldr	r3, [pc, #168]	@ (800bf3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800be92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800be94:	0a5b      	lsrs	r3, r3, #9
 800be96:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800be9a:	ee07 3a90 	vmov	s15, r3
 800be9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bea2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800bea6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800beaa:	edd7 6a07 	vldr	s13, [r7, #28]
 800beae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800beb2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800beb6:	ee17 2a90 	vmov	r2, s15
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800bebe:	4b1f      	ldr	r3, [pc, #124]	@ (800bf3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bec0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bec2:	0c1b      	lsrs	r3, r3, #16
 800bec4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bec8:	ee07 3a90 	vmov	s15, r3
 800becc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bed0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800bed4:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bed8:	edd7 6a07 	vldr	s13, [r7, #28]
 800bedc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bee0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bee4:	ee17 2a90 	vmov	r2, s15
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800beec:	4b13      	ldr	r3, [pc, #76]	@ (800bf3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800beee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bef0:	0e1b      	lsrs	r3, r3, #24
 800bef2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bef6:	ee07 3a90 	vmov	s15, r3
 800befa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800befe:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800bf02:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bf06:	edd7 6a07 	vldr	s13, [r7, #28]
 800bf0a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bf0e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bf12:	ee17 2a90 	vmov	r2, s15
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800bf1a:	e008      	b.n	800bf2e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	2200      	movs	r2, #0
 800bf20:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	2200      	movs	r2, #0
 800bf26:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	2200      	movs	r2, #0
 800bf2c:	609a      	str	r2, [r3, #8]
}
 800bf2e:	bf00      	nop
 800bf30:	3724      	adds	r7, #36	@ 0x24
 800bf32:	46bd      	mov	sp, r7
 800bf34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf38:	4770      	bx	lr
 800bf3a:	bf00      	nop
 800bf3c:	58024400 	.word	0x58024400
 800bf40:	03d09000 	.word	0x03d09000
 800bf44:	46000000 	.word	0x46000000
 800bf48:	4c742400 	.word	0x4c742400
 800bf4c:	4a742400 	.word	0x4a742400
 800bf50:	4bbebc20 	.word	0x4bbebc20

0800bf54 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800bf54:	b480      	push	{r7}
 800bf56:	b089      	sub	sp, #36	@ 0x24
 800bf58:	af00      	add	r7, sp, #0
 800bf5a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800bf5c:	4ba1      	ldr	r3, [pc, #644]	@ (800c1e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bf5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bf60:	f003 0303 	and.w	r3, r3, #3
 800bf64:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800bf66:	4b9f      	ldr	r3, [pc, #636]	@ (800c1e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bf68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bf6a:	0d1b      	lsrs	r3, r3, #20
 800bf6c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800bf70:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800bf72:	4b9c      	ldr	r3, [pc, #624]	@ (800c1e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bf74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bf76:	0a1b      	lsrs	r3, r3, #8
 800bf78:	f003 0301 	and.w	r3, r3, #1
 800bf7c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800bf7e:	4b99      	ldr	r3, [pc, #612]	@ (800c1e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bf80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bf82:	08db      	lsrs	r3, r3, #3
 800bf84:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800bf88:	693a      	ldr	r2, [r7, #16]
 800bf8a:	fb02 f303 	mul.w	r3, r2, r3
 800bf8e:	ee07 3a90 	vmov	s15, r3
 800bf92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bf96:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800bf9a:	697b      	ldr	r3, [r7, #20]
 800bf9c:	2b00      	cmp	r3, #0
 800bf9e:	f000 8111 	beq.w	800c1c4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800bfa2:	69bb      	ldr	r3, [r7, #24]
 800bfa4:	2b02      	cmp	r3, #2
 800bfa6:	f000 8083 	beq.w	800c0b0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800bfaa:	69bb      	ldr	r3, [r7, #24]
 800bfac:	2b02      	cmp	r3, #2
 800bfae:	f200 80a1 	bhi.w	800c0f4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800bfb2:	69bb      	ldr	r3, [r7, #24]
 800bfb4:	2b00      	cmp	r3, #0
 800bfb6:	d003      	beq.n	800bfc0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800bfb8:	69bb      	ldr	r3, [r7, #24]
 800bfba:	2b01      	cmp	r3, #1
 800bfbc:	d056      	beq.n	800c06c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800bfbe:	e099      	b.n	800c0f4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bfc0:	4b88      	ldr	r3, [pc, #544]	@ (800c1e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bfc2:	681b      	ldr	r3, [r3, #0]
 800bfc4:	f003 0320 	and.w	r3, r3, #32
 800bfc8:	2b00      	cmp	r3, #0
 800bfca:	d02d      	beq.n	800c028 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bfcc:	4b85      	ldr	r3, [pc, #532]	@ (800c1e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bfce:	681b      	ldr	r3, [r3, #0]
 800bfd0:	08db      	lsrs	r3, r3, #3
 800bfd2:	f003 0303 	and.w	r3, r3, #3
 800bfd6:	4a84      	ldr	r2, [pc, #528]	@ (800c1e8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800bfd8:	fa22 f303 	lsr.w	r3, r2, r3
 800bfdc:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800bfde:	68bb      	ldr	r3, [r7, #8]
 800bfe0:	ee07 3a90 	vmov	s15, r3
 800bfe4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bfe8:	697b      	ldr	r3, [r7, #20]
 800bfea:	ee07 3a90 	vmov	s15, r3
 800bfee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bff2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bff6:	4b7b      	ldr	r3, [pc, #492]	@ (800c1e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bff8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bffa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bffe:	ee07 3a90 	vmov	s15, r3
 800c002:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c006:	ed97 6a03 	vldr	s12, [r7, #12]
 800c00a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800c1ec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c00e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c012:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c016:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c01a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c01e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c022:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800c026:	e087      	b.n	800c138 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c028:	697b      	ldr	r3, [r7, #20]
 800c02a:	ee07 3a90 	vmov	s15, r3
 800c02e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c032:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800c1f0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800c036:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c03a:	4b6a      	ldr	r3, [pc, #424]	@ (800c1e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c03c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c03e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c042:	ee07 3a90 	vmov	s15, r3
 800c046:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c04a:	ed97 6a03 	vldr	s12, [r7, #12]
 800c04e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800c1ec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c052:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c056:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c05a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c05e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c062:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c066:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c06a:	e065      	b.n	800c138 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c06c:	697b      	ldr	r3, [r7, #20]
 800c06e:	ee07 3a90 	vmov	s15, r3
 800c072:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c076:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800c1f4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800c07a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c07e:	4b59      	ldr	r3, [pc, #356]	@ (800c1e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c080:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c082:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c086:	ee07 3a90 	vmov	s15, r3
 800c08a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c08e:	ed97 6a03 	vldr	s12, [r7, #12]
 800c092:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800c1ec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c096:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c09a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c09e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c0a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c0a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c0aa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c0ae:	e043      	b.n	800c138 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c0b0:	697b      	ldr	r3, [r7, #20]
 800c0b2:	ee07 3a90 	vmov	s15, r3
 800c0b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c0ba:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800c1f8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800c0be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c0c2:	4b48      	ldr	r3, [pc, #288]	@ (800c1e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c0c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c0c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c0ca:	ee07 3a90 	vmov	s15, r3
 800c0ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c0d2:	ed97 6a03 	vldr	s12, [r7, #12]
 800c0d6:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800c1ec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c0da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c0de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c0e2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c0e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c0ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c0ee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c0f2:	e021      	b.n	800c138 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c0f4:	697b      	ldr	r3, [r7, #20]
 800c0f6:	ee07 3a90 	vmov	s15, r3
 800c0fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c0fe:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800c1f4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800c102:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c106:	4b37      	ldr	r3, [pc, #220]	@ (800c1e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c108:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c10a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c10e:	ee07 3a90 	vmov	s15, r3
 800c112:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c116:	ed97 6a03 	vldr	s12, [r7, #12]
 800c11a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800c1ec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c11e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c122:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c126:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c12a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c12e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c132:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c136:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800c138:	4b2a      	ldr	r3, [pc, #168]	@ (800c1e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c13a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c13c:	0a5b      	lsrs	r3, r3, #9
 800c13e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c142:	ee07 3a90 	vmov	s15, r3
 800c146:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c14a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c14e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c152:	edd7 6a07 	vldr	s13, [r7, #28]
 800c156:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c15a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c15e:	ee17 2a90 	vmov	r2, s15
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800c166:	4b1f      	ldr	r3, [pc, #124]	@ (800c1e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c168:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c16a:	0c1b      	lsrs	r3, r3, #16
 800c16c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c170:	ee07 3a90 	vmov	s15, r3
 800c174:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c178:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c17c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c180:	edd7 6a07 	vldr	s13, [r7, #28]
 800c184:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c188:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c18c:	ee17 2a90 	vmov	r2, s15
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800c194:	4b13      	ldr	r3, [pc, #76]	@ (800c1e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c196:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c198:	0e1b      	lsrs	r3, r3, #24
 800c19a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c19e:	ee07 3a90 	vmov	s15, r3
 800c1a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c1a6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c1aa:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c1ae:	edd7 6a07 	vldr	s13, [r7, #28]
 800c1b2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c1b6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c1ba:	ee17 2a90 	vmov	r2, s15
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800c1c2:	e008      	b.n	800c1d6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	2200      	movs	r2, #0
 800c1c8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	2200      	movs	r2, #0
 800c1ce:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	2200      	movs	r2, #0
 800c1d4:	609a      	str	r2, [r3, #8]
}
 800c1d6:	bf00      	nop
 800c1d8:	3724      	adds	r7, #36	@ 0x24
 800c1da:	46bd      	mov	sp, r7
 800c1dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1e0:	4770      	bx	lr
 800c1e2:	bf00      	nop
 800c1e4:	58024400 	.word	0x58024400
 800c1e8:	03d09000 	.word	0x03d09000
 800c1ec:	46000000 	.word	0x46000000
 800c1f0:	4c742400 	.word	0x4c742400
 800c1f4:	4a742400 	.word	0x4a742400
 800c1f8:	4bbebc20 	.word	0x4bbebc20

0800c1fc <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800c1fc:	b480      	push	{r7}
 800c1fe:	b089      	sub	sp, #36	@ 0x24
 800c200:	af00      	add	r7, sp, #0
 800c202:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c204:	4ba0      	ldr	r3, [pc, #640]	@ (800c488 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c206:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c208:	f003 0303 	and.w	r3, r3, #3
 800c20c:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800c20e:	4b9e      	ldr	r3, [pc, #632]	@ (800c488 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c210:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c212:	091b      	lsrs	r3, r3, #4
 800c214:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800c218:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800c21a:	4b9b      	ldr	r3, [pc, #620]	@ (800c488 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c21c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c21e:	f003 0301 	and.w	r3, r3, #1
 800c222:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800c224:	4b98      	ldr	r3, [pc, #608]	@ (800c488 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c226:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c228:	08db      	lsrs	r3, r3, #3
 800c22a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c22e:	693a      	ldr	r2, [r7, #16]
 800c230:	fb02 f303 	mul.w	r3, r2, r3
 800c234:	ee07 3a90 	vmov	s15, r3
 800c238:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c23c:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800c240:	697b      	ldr	r3, [r7, #20]
 800c242:	2b00      	cmp	r3, #0
 800c244:	f000 8111 	beq.w	800c46a <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800c248:	69bb      	ldr	r3, [r7, #24]
 800c24a:	2b02      	cmp	r3, #2
 800c24c:	f000 8083 	beq.w	800c356 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800c250:	69bb      	ldr	r3, [r7, #24]
 800c252:	2b02      	cmp	r3, #2
 800c254:	f200 80a1 	bhi.w	800c39a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800c258:	69bb      	ldr	r3, [r7, #24]
 800c25a:	2b00      	cmp	r3, #0
 800c25c:	d003      	beq.n	800c266 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800c25e:	69bb      	ldr	r3, [r7, #24]
 800c260:	2b01      	cmp	r3, #1
 800c262:	d056      	beq.n	800c312 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800c264:	e099      	b.n	800c39a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c266:	4b88      	ldr	r3, [pc, #544]	@ (800c488 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c268:	681b      	ldr	r3, [r3, #0]
 800c26a:	f003 0320 	and.w	r3, r3, #32
 800c26e:	2b00      	cmp	r3, #0
 800c270:	d02d      	beq.n	800c2ce <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c272:	4b85      	ldr	r3, [pc, #532]	@ (800c488 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c274:	681b      	ldr	r3, [r3, #0]
 800c276:	08db      	lsrs	r3, r3, #3
 800c278:	f003 0303 	and.w	r3, r3, #3
 800c27c:	4a83      	ldr	r2, [pc, #524]	@ (800c48c <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800c27e:	fa22 f303 	lsr.w	r3, r2, r3
 800c282:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c284:	68bb      	ldr	r3, [r7, #8]
 800c286:	ee07 3a90 	vmov	s15, r3
 800c28a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c28e:	697b      	ldr	r3, [r7, #20]
 800c290:	ee07 3a90 	vmov	s15, r3
 800c294:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c298:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c29c:	4b7a      	ldr	r3, [pc, #488]	@ (800c488 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c29e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c2a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c2a4:	ee07 3a90 	vmov	s15, r3
 800c2a8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c2ac:	ed97 6a03 	vldr	s12, [r7, #12]
 800c2b0:	eddf 5a77 	vldr	s11, [pc, #476]	@ 800c490 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c2b4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c2b8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c2bc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c2c0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c2c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c2c8:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800c2cc:	e087      	b.n	800c3de <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c2ce:	697b      	ldr	r3, [r7, #20]
 800c2d0:	ee07 3a90 	vmov	s15, r3
 800c2d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c2d8:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 800c494 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800c2dc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c2e0:	4b69      	ldr	r3, [pc, #420]	@ (800c488 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c2e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c2e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c2e8:	ee07 3a90 	vmov	s15, r3
 800c2ec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c2f0:	ed97 6a03 	vldr	s12, [r7, #12]
 800c2f4:	eddf 5a66 	vldr	s11, [pc, #408]	@ 800c490 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c2f8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c2fc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c300:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c304:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c308:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c30c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c310:	e065      	b.n	800c3de <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c312:	697b      	ldr	r3, [r7, #20]
 800c314:	ee07 3a90 	vmov	s15, r3
 800c318:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c31c:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 800c498 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800c320:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c324:	4b58      	ldr	r3, [pc, #352]	@ (800c488 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c326:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c328:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c32c:	ee07 3a90 	vmov	s15, r3
 800c330:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c334:	ed97 6a03 	vldr	s12, [r7, #12]
 800c338:	eddf 5a55 	vldr	s11, [pc, #340]	@ 800c490 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c33c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c340:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c344:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c348:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c34c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c350:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c354:	e043      	b.n	800c3de <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c356:	697b      	ldr	r3, [r7, #20]
 800c358:	ee07 3a90 	vmov	s15, r3
 800c35c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c360:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 800c49c <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800c364:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c368:	4b47      	ldr	r3, [pc, #284]	@ (800c488 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c36a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c36c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c370:	ee07 3a90 	vmov	s15, r3
 800c374:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c378:	ed97 6a03 	vldr	s12, [r7, #12]
 800c37c:	eddf 5a44 	vldr	s11, [pc, #272]	@ 800c490 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c380:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c384:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c388:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c38c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c390:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c394:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c398:	e021      	b.n	800c3de <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c39a:	697b      	ldr	r3, [r7, #20]
 800c39c:	ee07 3a90 	vmov	s15, r3
 800c3a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c3a4:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 800c494 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800c3a8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c3ac:	4b36      	ldr	r3, [pc, #216]	@ (800c488 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c3ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c3b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c3b4:	ee07 3a90 	vmov	s15, r3
 800c3b8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c3bc:	ed97 6a03 	vldr	s12, [r7, #12]
 800c3c0:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800c490 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c3c4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c3c8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c3cc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c3d0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c3d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c3d8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c3dc:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800c3de:	4b2a      	ldr	r3, [pc, #168]	@ (800c488 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c3e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c3e2:	0a5b      	lsrs	r3, r3, #9
 800c3e4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c3e8:	ee07 3a90 	vmov	s15, r3
 800c3ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c3f0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c3f4:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c3f8:	edd7 6a07 	vldr	s13, [r7, #28]
 800c3fc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c400:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c404:	ee17 2a90 	vmov	r2, s15
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800c40c:	4b1e      	ldr	r3, [pc, #120]	@ (800c488 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c40e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c410:	0c1b      	lsrs	r3, r3, #16
 800c412:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c416:	ee07 3a90 	vmov	s15, r3
 800c41a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c41e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c422:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c426:	edd7 6a07 	vldr	s13, [r7, #28]
 800c42a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c42e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c432:	ee17 2a90 	vmov	r2, s15
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800c43a:	4b13      	ldr	r3, [pc, #76]	@ (800c488 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c43c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c43e:	0e1b      	lsrs	r3, r3, #24
 800c440:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c444:	ee07 3a90 	vmov	s15, r3
 800c448:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c44c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c450:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c454:	edd7 6a07 	vldr	s13, [r7, #28]
 800c458:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c45c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c460:	ee17 2a90 	vmov	r2, s15
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800c468:	e008      	b.n	800c47c <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	2200      	movs	r2, #0
 800c46e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	2200      	movs	r2, #0
 800c474:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	2200      	movs	r2, #0
 800c47a:	609a      	str	r2, [r3, #8]
}
 800c47c:	bf00      	nop
 800c47e:	3724      	adds	r7, #36	@ 0x24
 800c480:	46bd      	mov	sp, r7
 800c482:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c486:	4770      	bx	lr
 800c488:	58024400 	.word	0x58024400
 800c48c:	03d09000 	.word	0x03d09000
 800c490:	46000000 	.word	0x46000000
 800c494:	4c742400 	.word	0x4c742400
 800c498:	4a742400 	.word	0x4a742400
 800c49c:	4bbebc20 	.word	0x4bbebc20

0800c4a0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800c4a0:	b580      	push	{r7, lr}
 800c4a2:	b084      	sub	sp, #16
 800c4a4:	af00      	add	r7, sp, #0
 800c4a6:	6078      	str	r0, [r7, #4]
 800c4a8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c4aa:	2300      	movs	r3, #0
 800c4ac:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800c4ae:	4b53      	ldr	r3, [pc, #332]	@ (800c5fc <RCCEx_PLL2_Config+0x15c>)
 800c4b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c4b2:	f003 0303 	and.w	r3, r3, #3
 800c4b6:	2b03      	cmp	r3, #3
 800c4b8:	d101      	bne.n	800c4be <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800c4ba:	2301      	movs	r3, #1
 800c4bc:	e099      	b.n	800c5f2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800c4be:	4b4f      	ldr	r3, [pc, #316]	@ (800c5fc <RCCEx_PLL2_Config+0x15c>)
 800c4c0:	681b      	ldr	r3, [r3, #0]
 800c4c2:	4a4e      	ldr	r2, [pc, #312]	@ (800c5fc <RCCEx_PLL2_Config+0x15c>)
 800c4c4:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800c4c8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c4ca:	f7f9 fc85 	bl	8005dd8 <HAL_GetTick>
 800c4ce:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800c4d0:	e008      	b.n	800c4e4 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800c4d2:	f7f9 fc81 	bl	8005dd8 <HAL_GetTick>
 800c4d6:	4602      	mov	r2, r0
 800c4d8:	68bb      	ldr	r3, [r7, #8]
 800c4da:	1ad3      	subs	r3, r2, r3
 800c4dc:	2b02      	cmp	r3, #2
 800c4de:	d901      	bls.n	800c4e4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800c4e0:	2303      	movs	r3, #3
 800c4e2:	e086      	b.n	800c5f2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800c4e4:	4b45      	ldr	r3, [pc, #276]	@ (800c5fc <RCCEx_PLL2_Config+0x15c>)
 800c4e6:	681b      	ldr	r3, [r3, #0]
 800c4e8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c4ec:	2b00      	cmp	r3, #0
 800c4ee:	d1f0      	bne.n	800c4d2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800c4f0:	4b42      	ldr	r3, [pc, #264]	@ (800c5fc <RCCEx_PLL2_Config+0x15c>)
 800c4f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c4f4:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	681b      	ldr	r3, [r3, #0]
 800c4fc:	031b      	lsls	r3, r3, #12
 800c4fe:	493f      	ldr	r1, [pc, #252]	@ (800c5fc <RCCEx_PLL2_Config+0x15c>)
 800c500:	4313      	orrs	r3, r2
 800c502:	628b      	str	r3, [r1, #40]	@ 0x28
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	685b      	ldr	r3, [r3, #4]
 800c508:	3b01      	subs	r3, #1
 800c50a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	689b      	ldr	r3, [r3, #8]
 800c512:	3b01      	subs	r3, #1
 800c514:	025b      	lsls	r3, r3, #9
 800c516:	b29b      	uxth	r3, r3
 800c518:	431a      	orrs	r2, r3
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	68db      	ldr	r3, [r3, #12]
 800c51e:	3b01      	subs	r3, #1
 800c520:	041b      	lsls	r3, r3, #16
 800c522:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800c526:	431a      	orrs	r2, r3
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	691b      	ldr	r3, [r3, #16]
 800c52c:	3b01      	subs	r3, #1
 800c52e:	061b      	lsls	r3, r3, #24
 800c530:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800c534:	4931      	ldr	r1, [pc, #196]	@ (800c5fc <RCCEx_PLL2_Config+0x15c>)
 800c536:	4313      	orrs	r3, r2
 800c538:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800c53a:	4b30      	ldr	r3, [pc, #192]	@ (800c5fc <RCCEx_PLL2_Config+0x15c>)
 800c53c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c53e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	695b      	ldr	r3, [r3, #20]
 800c546:	492d      	ldr	r1, [pc, #180]	@ (800c5fc <RCCEx_PLL2_Config+0x15c>)
 800c548:	4313      	orrs	r3, r2
 800c54a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800c54c:	4b2b      	ldr	r3, [pc, #172]	@ (800c5fc <RCCEx_PLL2_Config+0x15c>)
 800c54e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c550:	f023 0220 	bic.w	r2, r3, #32
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	699b      	ldr	r3, [r3, #24]
 800c558:	4928      	ldr	r1, [pc, #160]	@ (800c5fc <RCCEx_PLL2_Config+0x15c>)
 800c55a:	4313      	orrs	r3, r2
 800c55c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800c55e:	4b27      	ldr	r3, [pc, #156]	@ (800c5fc <RCCEx_PLL2_Config+0x15c>)
 800c560:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c562:	4a26      	ldr	r2, [pc, #152]	@ (800c5fc <RCCEx_PLL2_Config+0x15c>)
 800c564:	f023 0310 	bic.w	r3, r3, #16
 800c568:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800c56a:	4b24      	ldr	r3, [pc, #144]	@ (800c5fc <RCCEx_PLL2_Config+0x15c>)
 800c56c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800c56e:	4b24      	ldr	r3, [pc, #144]	@ (800c600 <RCCEx_PLL2_Config+0x160>)
 800c570:	4013      	ands	r3, r2
 800c572:	687a      	ldr	r2, [r7, #4]
 800c574:	69d2      	ldr	r2, [r2, #28]
 800c576:	00d2      	lsls	r2, r2, #3
 800c578:	4920      	ldr	r1, [pc, #128]	@ (800c5fc <RCCEx_PLL2_Config+0x15c>)
 800c57a:	4313      	orrs	r3, r2
 800c57c:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800c57e:	4b1f      	ldr	r3, [pc, #124]	@ (800c5fc <RCCEx_PLL2_Config+0x15c>)
 800c580:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c582:	4a1e      	ldr	r2, [pc, #120]	@ (800c5fc <RCCEx_PLL2_Config+0x15c>)
 800c584:	f043 0310 	orr.w	r3, r3, #16
 800c588:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800c58a:	683b      	ldr	r3, [r7, #0]
 800c58c:	2b00      	cmp	r3, #0
 800c58e:	d106      	bne.n	800c59e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800c590:	4b1a      	ldr	r3, [pc, #104]	@ (800c5fc <RCCEx_PLL2_Config+0x15c>)
 800c592:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c594:	4a19      	ldr	r2, [pc, #100]	@ (800c5fc <RCCEx_PLL2_Config+0x15c>)
 800c596:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800c59a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800c59c:	e00f      	b.n	800c5be <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800c59e:	683b      	ldr	r3, [r7, #0]
 800c5a0:	2b01      	cmp	r3, #1
 800c5a2:	d106      	bne.n	800c5b2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800c5a4:	4b15      	ldr	r3, [pc, #84]	@ (800c5fc <RCCEx_PLL2_Config+0x15c>)
 800c5a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c5a8:	4a14      	ldr	r2, [pc, #80]	@ (800c5fc <RCCEx_PLL2_Config+0x15c>)
 800c5aa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800c5ae:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800c5b0:	e005      	b.n	800c5be <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800c5b2:	4b12      	ldr	r3, [pc, #72]	@ (800c5fc <RCCEx_PLL2_Config+0x15c>)
 800c5b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c5b6:	4a11      	ldr	r2, [pc, #68]	@ (800c5fc <RCCEx_PLL2_Config+0x15c>)
 800c5b8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800c5bc:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800c5be:	4b0f      	ldr	r3, [pc, #60]	@ (800c5fc <RCCEx_PLL2_Config+0x15c>)
 800c5c0:	681b      	ldr	r3, [r3, #0]
 800c5c2:	4a0e      	ldr	r2, [pc, #56]	@ (800c5fc <RCCEx_PLL2_Config+0x15c>)
 800c5c4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800c5c8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c5ca:	f7f9 fc05 	bl	8005dd8 <HAL_GetTick>
 800c5ce:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800c5d0:	e008      	b.n	800c5e4 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800c5d2:	f7f9 fc01 	bl	8005dd8 <HAL_GetTick>
 800c5d6:	4602      	mov	r2, r0
 800c5d8:	68bb      	ldr	r3, [r7, #8]
 800c5da:	1ad3      	subs	r3, r2, r3
 800c5dc:	2b02      	cmp	r3, #2
 800c5de:	d901      	bls.n	800c5e4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800c5e0:	2303      	movs	r3, #3
 800c5e2:	e006      	b.n	800c5f2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800c5e4:	4b05      	ldr	r3, [pc, #20]	@ (800c5fc <RCCEx_PLL2_Config+0x15c>)
 800c5e6:	681b      	ldr	r3, [r3, #0]
 800c5e8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c5ec:	2b00      	cmp	r3, #0
 800c5ee:	d0f0      	beq.n	800c5d2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800c5f0:	7bfb      	ldrb	r3, [r7, #15]
}
 800c5f2:	4618      	mov	r0, r3
 800c5f4:	3710      	adds	r7, #16
 800c5f6:	46bd      	mov	sp, r7
 800c5f8:	bd80      	pop	{r7, pc}
 800c5fa:	bf00      	nop
 800c5fc:	58024400 	.word	0x58024400
 800c600:	ffff0007 	.word	0xffff0007

0800c604 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800c604:	b580      	push	{r7, lr}
 800c606:	b084      	sub	sp, #16
 800c608:	af00      	add	r7, sp, #0
 800c60a:	6078      	str	r0, [r7, #4]
 800c60c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c60e:	2300      	movs	r3, #0
 800c610:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800c612:	4b53      	ldr	r3, [pc, #332]	@ (800c760 <RCCEx_PLL3_Config+0x15c>)
 800c614:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c616:	f003 0303 	and.w	r3, r3, #3
 800c61a:	2b03      	cmp	r3, #3
 800c61c:	d101      	bne.n	800c622 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800c61e:	2301      	movs	r3, #1
 800c620:	e099      	b.n	800c756 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800c622:	4b4f      	ldr	r3, [pc, #316]	@ (800c760 <RCCEx_PLL3_Config+0x15c>)
 800c624:	681b      	ldr	r3, [r3, #0]
 800c626:	4a4e      	ldr	r2, [pc, #312]	@ (800c760 <RCCEx_PLL3_Config+0x15c>)
 800c628:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800c62c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c62e:	f7f9 fbd3 	bl	8005dd8 <HAL_GetTick>
 800c632:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800c634:	e008      	b.n	800c648 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800c636:	f7f9 fbcf 	bl	8005dd8 <HAL_GetTick>
 800c63a:	4602      	mov	r2, r0
 800c63c:	68bb      	ldr	r3, [r7, #8]
 800c63e:	1ad3      	subs	r3, r2, r3
 800c640:	2b02      	cmp	r3, #2
 800c642:	d901      	bls.n	800c648 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800c644:	2303      	movs	r3, #3
 800c646:	e086      	b.n	800c756 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800c648:	4b45      	ldr	r3, [pc, #276]	@ (800c760 <RCCEx_PLL3_Config+0x15c>)
 800c64a:	681b      	ldr	r3, [r3, #0]
 800c64c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800c650:	2b00      	cmp	r3, #0
 800c652:	d1f0      	bne.n	800c636 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800c654:	4b42      	ldr	r3, [pc, #264]	@ (800c760 <RCCEx_PLL3_Config+0x15c>)
 800c656:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c658:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	681b      	ldr	r3, [r3, #0]
 800c660:	051b      	lsls	r3, r3, #20
 800c662:	493f      	ldr	r1, [pc, #252]	@ (800c760 <RCCEx_PLL3_Config+0x15c>)
 800c664:	4313      	orrs	r3, r2
 800c666:	628b      	str	r3, [r1, #40]	@ 0x28
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	685b      	ldr	r3, [r3, #4]
 800c66c:	3b01      	subs	r3, #1
 800c66e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	689b      	ldr	r3, [r3, #8]
 800c676:	3b01      	subs	r3, #1
 800c678:	025b      	lsls	r3, r3, #9
 800c67a:	b29b      	uxth	r3, r3
 800c67c:	431a      	orrs	r2, r3
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	68db      	ldr	r3, [r3, #12]
 800c682:	3b01      	subs	r3, #1
 800c684:	041b      	lsls	r3, r3, #16
 800c686:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800c68a:	431a      	orrs	r2, r3
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	691b      	ldr	r3, [r3, #16]
 800c690:	3b01      	subs	r3, #1
 800c692:	061b      	lsls	r3, r3, #24
 800c694:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800c698:	4931      	ldr	r1, [pc, #196]	@ (800c760 <RCCEx_PLL3_Config+0x15c>)
 800c69a:	4313      	orrs	r3, r2
 800c69c:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800c69e:	4b30      	ldr	r3, [pc, #192]	@ (800c760 <RCCEx_PLL3_Config+0x15c>)
 800c6a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c6a2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	695b      	ldr	r3, [r3, #20]
 800c6aa:	492d      	ldr	r1, [pc, #180]	@ (800c760 <RCCEx_PLL3_Config+0x15c>)
 800c6ac:	4313      	orrs	r3, r2
 800c6ae:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800c6b0:	4b2b      	ldr	r3, [pc, #172]	@ (800c760 <RCCEx_PLL3_Config+0x15c>)
 800c6b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c6b4:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	699b      	ldr	r3, [r3, #24]
 800c6bc:	4928      	ldr	r1, [pc, #160]	@ (800c760 <RCCEx_PLL3_Config+0x15c>)
 800c6be:	4313      	orrs	r3, r2
 800c6c0:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800c6c2:	4b27      	ldr	r3, [pc, #156]	@ (800c760 <RCCEx_PLL3_Config+0x15c>)
 800c6c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c6c6:	4a26      	ldr	r2, [pc, #152]	@ (800c760 <RCCEx_PLL3_Config+0x15c>)
 800c6c8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c6cc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800c6ce:	4b24      	ldr	r3, [pc, #144]	@ (800c760 <RCCEx_PLL3_Config+0x15c>)
 800c6d0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800c6d2:	4b24      	ldr	r3, [pc, #144]	@ (800c764 <RCCEx_PLL3_Config+0x160>)
 800c6d4:	4013      	ands	r3, r2
 800c6d6:	687a      	ldr	r2, [r7, #4]
 800c6d8:	69d2      	ldr	r2, [r2, #28]
 800c6da:	00d2      	lsls	r2, r2, #3
 800c6dc:	4920      	ldr	r1, [pc, #128]	@ (800c760 <RCCEx_PLL3_Config+0x15c>)
 800c6de:	4313      	orrs	r3, r2
 800c6e0:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800c6e2:	4b1f      	ldr	r3, [pc, #124]	@ (800c760 <RCCEx_PLL3_Config+0x15c>)
 800c6e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c6e6:	4a1e      	ldr	r2, [pc, #120]	@ (800c760 <RCCEx_PLL3_Config+0x15c>)
 800c6e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800c6ec:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800c6ee:	683b      	ldr	r3, [r7, #0]
 800c6f0:	2b00      	cmp	r3, #0
 800c6f2:	d106      	bne.n	800c702 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800c6f4:	4b1a      	ldr	r3, [pc, #104]	@ (800c760 <RCCEx_PLL3_Config+0x15c>)
 800c6f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c6f8:	4a19      	ldr	r2, [pc, #100]	@ (800c760 <RCCEx_PLL3_Config+0x15c>)
 800c6fa:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800c6fe:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800c700:	e00f      	b.n	800c722 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800c702:	683b      	ldr	r3, [r7, #0]
 800c704:	2b01      	cmp	r3, #1
 800c706:	d106      	bne.n	800c716 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800c708:	4b15      	ldr	r3, [pc, #84]	@ (800c760 <RCCEx_PLL3_Config+0x15c>)
 800c70a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c70c:	4a14      	ldr	r2, [pc, #80]	@ (800c760 <RCCEx_PLL3_Config+0x15c>)
 800c70e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800c712:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800c714:	e005      	b.n	800c722 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800c716:	4b12      	ldr	r3, [pc, #72]	@ (800c760 <RCCEx_PLL3_Config+0x15c>)
 800c718:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c71a:	4a11      	ldr	r2, [pc, #68]	@ (800c760 <RCCEx_PLL3_Config+0x15c>)
 800c71c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800c720:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800c722:	4b0f      	ldr	r3, [pc, #60]	@ (800c760 <RCCEx_PLL3_Config+0x15c>)
 800c724:	681b      	ldr	r3, [r3, #0]
 800c726:	4a0e      	ldr	r2, [pc, #56]	@ (800c760 <RCCEx_PLL3_Config+0x15c>)
 800c728:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800c72c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c72e:	f7f9 fb53 	bl	8005dd8 <HAL_GetTick>
 800c732:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800c734:	e008      	b.n	800c748 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800c736:	f7f9 fb4f 	bl	8005dd8 <HAL_GetTick>
 800c73a:	4602      	mov	r2, r0
 800c73c:	68bb      	ldr	r3, [r7, #8]
 800c73e:	1ad3      	subs	r3, r2, r3
 800c740:	2b02      	cmp	r3, #2
 800c742:	d901      	bls.n	800c748 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800c744:	2303      	movs	r3, #3
 800c746:	e006      	b.n	800c756 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800c748:	4b05      	ldr	r3, [pc, #20]	@ (800c760 <RCCEx_PLL3_Config+0x15c>)
 800c74a:	681b      	ldr	r3, [r3, #0]
 800c74c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800c750:	2b00      	cmp	r3, #0
 800c752:	d0f0      	beq.n	800c736 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800c754:	7bfb      	ldrb	r3, [r7, #15]
}
 800c756:	4618      	mov	r0, r3
 800c758:	3710      	adds	r7, #16
 800c75a:	46bd      	mov	sp, r7
 800c75c:	bd80      	pop	{r7, pc}
 800c75e:	bf00      	nop
 800c760:	58024400 	.word	0x58024400
 800c764:	ffff0007 	.word	0xffff0007

0800c768 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800c768:	b580      	push	{r7, lr}
 800c76a:	b08a      	sub	sp, #40	@ 0x28
 800c76c:	af00      	add	r7, sp, #0
 800c76e:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	2b00      	cmp	r3, #0
 800c774:	d101      	bne.n	800c77a <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800c776:	2301      	movs	r3, #1
 800c778:	e075      	b.n	800c866 <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800c780:	b2db      	uxtb	r3, r3
 800c782:	2b00      	cmp	r3, #0
 800c784:	d105      	bne.n	800c792 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	2200      	movs	r2, #0
 800c78a:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800c78c:	6878      	ldr	r0, [r7, #4]
 800c78e:	f7f8 f851 	bl	8004834 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	2204      	movs	r2, #4
 800c796:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800c79a:	6878      	ldr	r0, [r7, #4]
 800c79c:	f000 f868 	bl	800c870 <HAL_SD_InitCard>
 800c7a0:	4603      	mov	r3, r0
 800c7a2:	2b00      	cmp	r3, #0
 800c7a4:	d001      	beq.n	800c7aa <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800c7a6:	2301      	movs	r3, #1
 800c7a8:	e05d      	b.n	800c866 <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 800c7aa:	f107 0308 	add.w	r3, r7, #8
 800c7ae:	4619      	mov	r1, r3
 800c7b0:	6878      	ldr	r0, [r7, #4]
 800c7b2:	f000 fdaf 	bl	800d314 <HAL_SD_GetCardStatus>
 800c7b6:	4603      	mov	r3, r0
 800c7b8:	2b00      	cmp	r3, #0
 800c7ba:	d001      	beq.n	800c7c0 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 800c7bc:	2301      	movs	r3, #1
 800c7be:	e052      	b.n	800c866 <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 800c7c0:	7e3b      	ldrb	r3, [r7, #24]
 800c7c2:	b2db      	uxtb	r3, r3
 800c7c4:	627b      	str	r3, [r7, #36]	@ 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 800c7c6:	7e7b      	ldrb	r3, [r7, #25]
 800c7c8:	b2db      	uxtb	r3, r3
 800c7ca:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c7d0:	2b01      	cmp	r3, #1
 800c7d2:	d10a      	bne.n	800c7ea <HAL_SD_Init+0x82>
 800c7d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c7d6:	2b00      	cmp	r3, #0
 800c7d8:	d102      	bne.n	800c7e0 <HAL_SD_Init+0x78>
 800c7da:	6a3b      	ldr	r3, [r7, #32]
 800c7dc:	2b00      	cmp	r3, #0
 800c7de:	d004      	beq.n	800c7ea <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c7e6:	659a      	str	r2, [r3, #88]	@ 0x58
 800c7e8:	e00b      	b.n	800c802 <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c7ee:	2b01      	cmp	r3, #1
 800c7f0:	d104      	bne.n	800c7fc <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800c7f8:	659a      	str	r2, [r3, #88]	@ 0x58
 800c7fa:	e002      	b.n	800c802 <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	2200      	movs	r2, #0
 800c800:	659a      	str	r2, [r3, #88]	@ 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 800c802:	687b      	ldr	r3, [r7, #4]
 800c804:	68db      	ldr	r3, [r3, #12]
 800c806:	4619      	mov	r1, r3
 800c808:	6878      	ldr	r0, [r7, #4]
 800c80a:	f000 fe6d 	bl	800d4e8 <HAL_SD_ConfigWideBusOperation>
 800c80e:	4603      	mov	r3, r0
 800c810:	2b00      	cmp	r3, #0
 800c812:	d001      	beq.n	800c818 <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 800c814:	2301      	movs	r3, #1
 800c816:	e026      	b.n	800c866 <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 800c818:	f7f9 fade 	bl	8005dd8 <HAL_GetTick>
 800c81c:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800c81e:	e011      	b.n	800c844 <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800c820:	f7f9 fada 	bl	8005dd8 <HAL_GetTick>
 800c824:	4602      	mov	r2, r0
 800c826:	69fb      	ldr	r3, [r7, #28]
 800c828:	1ad3      	subs	r3, r2, r3
 800c82a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c82e:	d109      	bne.n	800c844 <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800c836:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	2201      	movs	r2, #1
 800c83c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      return HAL_TIMEOUT;
 800c840:	2303      	movs	r3, #3
 800c842:	e010      	b.n	800c866 <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800c844:	6878      	ldr	r0, [r7, #4]
 800c846:	f000 ff61 	bl	800d70c <HAL_SD_GetCardState>
 800c84a:	4603      	mov	r3, r0
 800c84c:	2b04      	cmp	r3, #4
 800c84e:	d1e7      	bne.n	800c820 <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	2200      	movs	r2, #0
 800c854:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	2200      	movs	r2, #0
 800c85a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	2201      	movs	r2, #1
 800c860:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return HAL_OK;
 800c864:	2300      	movs	r3, #0
}
 800c866:	4618      	mov	r0, r3
 800c868:	3728      	adds	r7, #40	@ 0x28
 800c86a:	46bd      	mov	sp, r7
 800c86c:	bd80      	pop	{r7, pc}
	...

0800c870 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800c870:	b590      	push	{r4, r7, lr}
 800c872:	b08d      	sub	sp, #52	@ 0x34
 800c874:	af02      	add	r7, sp, #8
 800c876:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800c878:	2300      	movs	r3, #0
 800c87a:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800c87c:	2300      	movs	r3, #0
 800c87e:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800c880:	2300      	movs	r3, #0
 800c882:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800c884:	2300      	movs	r3, #0
 800c886:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800c888:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 800c88c:	f04f 0100 	mov.w	r1, #0
 800c890:	f7fe fc76 	bl	800b180 <HAL_RCCEx_GetPeriphCLKFreq>
 800c894:	6278      	str	r0, [r7, #36]	@ 0x24
  if (sdmmc_clk == 0U)
 800c896:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c898:	2b00      	cmp	r3, #0
 800c89a:	d109      	bne.n	800c8b0 <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	2201      	movs	r2, #1
 800c8a0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800c8aa:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800c8ac:	2301      	movs	r3, #1
 800c8ae:	e070      	b.n	800c992 <HAL_SD_InitCard+0x122>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 800c8b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c8b2:	0a1b      	lsrs	r3, r3, #8
 800c8b4:	4a39      	ldr	r2, [pc, #228]	@ (800c99c <HAL_SD_InitCard+0x12c>)
 800c8b6:	fba2 2303 	umull	r2, r3, r2, r3
 800c8ba:	091b      	lsrs	r3, r3, #4
 800c8bc:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	681c      	ldr	r4, [r3, #0]
 800c8c2:	466a      	mov	r2, sp
 800c8c4:	f107 0318 	add.w	r3, r7, #24
 800c8c8:	e893 0003 	ldmia.w	r3, {r0, r1}
 800c8cc:	e882 0003 	stmia.w	r2, {r0, r1}
 800c8d0:	f107 030c 	add.w	r3, r7, #12
 800c8d4:	cb0e      	ldmia	r3, {r1, r2, r3}
 800c8d6:	4620      	mov	r0, r4
 800c8d8:	f003 f916 	bl	800fb08 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	681b      	ldr	r3, [r3, #0]
 800c8e0:	4618      	mov	r0, r3
 800c8e2:	f003 f959 	bl	800fb98 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  if (Init.ClockDiv != 0U)
 800c8e6:	69fb      	ldr	r3, [r7, #28]
 800c8e8:	2b00      	cmp	r3, #0
 800c8ea:	d005      	beq.n	800c8f8 <HAL_SD_InitCard+0x88>
  {
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 800c8ec:	69fb      	ldr	r3, [r7, #28]
 800c8ee:	005b      	lsls	r3, r3, #1
 800c8f0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c8f2:	fbb2 f3f3 	udiv	r3, r2, r3
 800c8f6:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  if (sdmmc_clk != 0U)
 800c8f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c8fa:	2b00      	cmp	r3, #0
 800c8fc:	d007      	beq.n	800c90e <HAL_SD_InitCard+0x9e>
  {
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 800c8fe:	4a28      	ldr	r2, [pc, #160]	@ (800c9a0 <HAL_SD_InitCard+0x130>)
 800c900:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c902:	fbb2 f3f3 	udiv	r3, r2, r3
 800c906:	3301      	adds	r3, #1
 800c908:	4618      	mov	r0, r3
 800c90a:	f7f9 fa71 	bl	8005df0 <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800c90e:	6878      	ldr	r0, [r7, #4]
 800c910:	f000 ffea 	bl	800d8e8 <SD_PowerON>
 800c914:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800c916:	6a3b      	ldr	r3, [r7, #32]
 800c918:	2b00      	cmp	r3, #0
 800c91a:	d00b      	beq.n	800c934 <HAL_SD_InitCard+0xc4>
  {
    hsd->State = HAL_SD_STATE_READY;
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	2201      	movs	r2, #1
 800c920:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c928:	6a3b      	ldr	r3, [r7, #32]
 800c92a:	431a      	orrs	r2, r3
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800c930:	2301      	movs	r3, #1
 800c932:	e02e      	b.n	800c992 <HAL_SD_InitCard+0x122>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800c934:	6878      	ldr	r0, [r7, #4]
 800c936:	f000 ff09 	bl	800d74c <SD_InitCard>
 800c93a:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800c93c:	6a3b      	ldr	r3, [r7, #32]
 800c93e:	2b00      	cmp	r3, #0
 800c940:	d00b      	beq.n	800c95a <HAL_SD_InitCard+0xea>
  {
    hsd->State = HAL_SD_STATE_READY;
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	2201      	movs	r2, #1
 800c946:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c94e:	6a3b      	ldr	r3, [r7, #32]
 800c950:	431a      	orrs	r2, r3
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800c956:	2301      	movs	r3, #1
 800c958:	e01b      	b.n	800c992 <HAL_SD_InitCard+0x122>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	681b      	ldr	r3, [r3, #0]
 800c95e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800c962:	4618      	mov	r0, r3
 800c964:	f003 f9ae 	bl	800fcc4 <SDMMC_CmdBlockLength>
 800c968:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800c96a:	6a3b      	ldr	r3, [r7, #32]
 800c96c:	2b00      	cmp	r3, #0
 800c96e:	d00f      	beq.n	800c990 <HAL_SD_InitCard+0x120>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	681b      	ldr	r3, [r3, #0]
 800c974:	4a0b      	ldr	r2, [pc, #44]	@ (800c9a4 <HAL_SD_InitCard+0x134>)
 800c976:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c97c:	6a3b      	ldr	r3, [r7, #32]
 800c97e:	431a      	orrs	r2, r3
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	2201      	movs	r2, #1
 800c988:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 800c98c:	2301      	movs	r3, #1
 800c98e:	e000      	b.n	800c992 <HAL_SD_InitCard+0x122>
  }

  return HAL_OK;
 800c990:	2300      	movs	r3, #0
}
 800c992:	4618      	mov	r0, r3
 800c994:	372c      	adds	r7, #44	@ 0x2c
 800c996:	46bd      	mov	sp, r7
 800c998:	bd90      	pop	{r4, r7, pc}
 800c99a:	bf00      	nop
 800c99c:	014f8b59 	.word	0x014f8b59
 800c9a0:	00012110 	.word	0x00012110
 800c9a4:	1fe00fff 	.word	0x1fe00fff

0800c9a8 <HAL_SD_ReadBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd,
                                        uint32_t NumberOfBlocks)
{
 800c9a8:	b580      	push	{r7, lr}
 800c9aa:	b08c      	sub	sp, #48	@ 0x30
 800c9ac:	af00      	add	r7, sp, #0
 800c9ae:	60f8      	str	r0, [r7, #12]
 800c9b0:	60b9      	str	r1, [r7, #8]
 800c9b2:	607a      	str	r2, [r7, #4]
 800c9b4:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (NULL == pData)
 800c9ba:	68bb      	ldr	r3, [r7, #8]
 800c9bc:	2b00      	cmp	r3, #0
 800c9be:	d107      	bne.n	800c9d0 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800c9c0:	68fb      	ldr	r3, [r7, #12]
 800c9c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c9c4:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800c9c8:	68fb      	ldr	r3, [r7, #12]
 800c9ca:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800c9cc:	2301      	movs	r3, #1
 800c9ce:	e08d      	b.n	800caec <HAL_SD_ReadBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 800c9d0:	68fb      	ldr	r3, [r7, #12]
 800c9d2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800c9d6:	b2db      	uxtb	r3, r3
 800c9d8:	2b01      	cmp	r3, #1
 800c9da:	f040 8086 	bne.w	800caea <HAL_SD_ReadBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800c9de:	68fb      	ldr	r3, [r7, #12]
 800c9e0:	2200      	movs	r2, #0
 800c9e2:	635a      	str	r2, [r3, #52]	@ 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800c9e4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c9e6:	683b      	ldr	r3, [r7, #0]
 800c9e8:	441a      	add	r2, r3
 800c9ea:	68fb      	ldr	r3, [r7, #12]
 800c9ec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c9ee:	429a      	cmp	r2, r3
 800c9f0:	d907      	bls.n	800ca02 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800c9f2:	68fb      	ldr	r3, [r7, #12]
 800c9f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c9f6:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800c9fa:	68fb      	ldr	r3, [r7, #12]
 800c9fc:	635a      	str	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 800c9fe:	2301      	movs	r3, #1
 800ca00:	e074      	b.n	800caec <HAL_SD_ReadBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800ca02:	68fb      	ldr	r3, [r7, #12]
 800ca04:	2203      	movs	r2, #3
 800ca06:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800ca0a:	68fb      	ldr	r3, [r7, #12]
 800ca0c:	681b      	ldr	r3, [r3, #0]
 800ca0e:	2200      	movs	r2, #0
 800ca10:	62da      	str	r2, [r3, #44]	@ 0x2c

    hsd->pRxBuffPtr = pData;
 800ca12:	68fb      	ldr	r3, [r7, #12]
 800ca14:	68ba      	ldr	r2, [r7, #8]
 800ca16:	625a      	str	r2, [r3, #36]	@ 0x24
    hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 800ca18:	683b      	ldr	r3, [r7, #0]
 800ca1a:	025a      	lsls	r2, r3, #9
 800ca1c:	68fb      	ldr	r3, [r7, #12]
 800ca1e:	629a      	str	r2, [r3, #40]	@ 0x28

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800ca20:	68fb      	ldr	r3, [r7, #12]
 800ca22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ca24:	2b01      	cmp	r3, #1
 800ca26:	d002      	beq.n	800ca2e <HAL_SD_ReadBlocks_DMA+0x86>
    {
      add *= 512U;
 800ca28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ca2a:	025b      	lsls	r3, r3, #9
 800ca2c:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800ca2e:	f04f 33ff 	mov.w	r3, #4294967295
 800ca32:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800ca34:	683b      	ldr	r3, [r7, #0]
 800ca36:	025b      	lsls	r3, r3, #9
 800ca38:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800ca3a:	2390      	movs	r3, #144	@ 0x90
 800ca3c:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800ca3e:	2302      	movs	r3, #2
 800ca40:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800ca42:	2300      	movs	r3, #0
 800ca44:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800ca46:	2300      	movs	r3, #0
 800ca48:	627b      	str	r3, [r7, #36]	@ 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800ca4a:	68fb      	ldr	r3, [r7, #12]
 800ca4c:	681b      	ldr	r3, [r3, #0]
 800ca4e:	f107 0210 	add.w	r2, r7, #16
 800ca52:	4611      	mov	r1, r2
 800ca54:	4618      	mov	r0, r3
 800ca56:	f003 f909 	bl	800fc6c <SDMMC_ConfigData>

    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800ca5a:	68fb      	ldr	r3, [r7, #12]
 800ca5c:	681b      	ldr	r3, [r3, #0]
 800ca5e:	68da      	ldr	r2, [r3, #12]
 800ca60:	68fb      	ldr	r3, [r7, #12]
 800ca62:	681b      	ldr	r3, [r3, #0]
 800ca64:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800ca68:	60da      	str	r2, [r3, #12]
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800ca6a:	68fb      	ldr	r3, [r7, #12]
 800ca6c:	681b      	ldr	r3, [r3, #0]
 800ca6e:	68ba      	ldr	r2, [r7, #8]
 800ca70:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800ca72:	68fb      	ldr	r3, [r7, #12]
 800ca74:	681b      	ldr	r3, [r3, #0]
 800ca76:	2201      	movs	r2, #1
 800ca78:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Read Blocks in DMA mode */
    if (NumberOfBlocks > 1U)
 800ca7a:	683b      	ldr	r3, [r7, #0]
 800ca7c:	2b01      	cmp	r3, #1
 800ca7e:	d90a      	bls.n	800ca96 <HAL_SD_ReadBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800ca80:	68fb      	ldr	r3, [r7, #12]
 800ca82:	2282      	movs	r2, #130	@ 0x82
 800ca84:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800ca86:	68fb      	ldr	r3, [r7, #12]
 800ca88:	681b      	ldr	r3, [r3, #0]
 800ca8a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ca8c:	4618      	mov	r0, r3
 800ca8e:	f003 f95f 	bl	800fd50 <SDMMC_CmdReadMultiBlock>
 800ca92:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800ca94:	e009      	b.n	800caaa <HAL_SD_ReadBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800ca96:	68fb      	ldr	r3, [r7, #12]
 800ca98:	2281      	movs	r2, #129	@ 0x81
 800ca9a:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800ca9c:	68fb      	ldr	r3, [r7, #12]
 800ca9e:	681b      	ldr	r3, [r3, #0]
 800caa0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800caa2:	4618      	mov	r0, r3
 800caa4:	f003 f931 	bl	800fd0a <SDMMC_CmdReadSingleBlock>
 800caa8:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 800caaa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800caac:	2b00      	cmp	r3, #0
 800caae:	d012      	beq.n	800cad6 <HAL_SD_ReadBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800cab0:	68fb      	ldr	r3, [r7, #12]
 800cab2:	681b      	ldr	r3, [r3, #0]
 800cab4:	4a0f      	ldr	r2, [pc, #60]	@ (800caf4 <HAL_SD_ReadBlocks_DMA+0x14c>)
 800cab6:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 800cab8:	68fb      	ldr	r3, [r7, #12]
 800caba:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800cabc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cabe:	431a      	orrs	r2, r3
 800cac0:	68fb      	ldr	r3, [r7, #12]
 800cac2:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800cac4:	68fb      	ldr	r3, [r7, #12]
 800cac6:	2201      	movs	r2, #1
 800cac8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800cacc:	68fb      	ldr	r3, [r7, #12]
 800cace:	2200      	movs	r2, #0
 800cad0:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 800cad2:	2301      	movs	r3, #1
 800cad4:	e00a      	b.n	800caec <HAL_SD_ReadBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800cad6:	68fb      	ldr	r3, [r7, #12]
 800cad8:	681b      	ldr	r3, [r3, #0]
 800cada:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800cadc:	68fb      	ldr	r3, [r7, #12]
 800cade:	681b      	ldr	r3, [r3, #0]
 800cae0:	f442 7295 	orr.w	r2, r2, #298	@ 0x12a
 800cae4:	63da      	str	r2, [r3, #60]	@ 0x3c


    return HAL_OK;
 800cae6:	2300      	movs	r3, #0
 800cae8:	e000      	b.n	800caec <HAL_SD_ReadBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 800caea:	2302      	movs	r3, #2
  }
}
 800caec:	4618      	mov	r0, r3
 800caee:	3730      	adds	r7, #48	@ 0x30
 800caf0:	46bd      	mov	sp, r7
 800caf2:	bd80      	pop	{r7, pc}
 800caf4:	1fe00fff 	.word	0x1fe00fff

0800caf8 <HAL_SD_WriteBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, const uint8_t *pData, uint32_t BlockAdd,
                                         uint32_t NumberOfBlocks)
{
 800caf8:	b580      	push	{r7, lr}
 800cafa:	b08c      	sub	sp, #48	@ 0x30
 800cafc:	af00      	add	r7, sp, #0
 800cafe:	60f8      	str	r0, [r7, #12]
 800cb00:	60b9      	str	r1, [r7, #8]
 800cb02:	607a      	str	r2, [r7, #4]
 800cb04:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (NULL == pData)
 800cb0a:	68bb      	ldr	r3, [r7, #8]
 800cb0c:	2b00      	cmp	r3, #0
 800cb0e:	d107      	bne.n	800cb20 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800cb10:	68fb      	ldr	r3, [r7, #12]
 800cb12:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cb14:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800cb18:	68fb      	ldr	r3, [r7, #12]
 800cb1a:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800cb1c:	2301      	movs	r3, #1
 800cb1e:	e08d      	b.n	800cc3c <HAL_SD_WriteBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 800cb20:	68fb      	ldr	r3, [r7, #12]
 800cb22:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800cb26:	b2db      	uxtb	r3, r3
 800cb28:	2b01      	cmp	r3, #1
 800cb2a:	f040 8086 	bne.w	800cc3a <HAL_SD_WriteBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800cb2e:	68fb      	ldr	r3, [r7, #12]
 800cb30:	2200      	movs	r2, #0
 800cb32:	635a      	str	r2, [r3, #52]	@ 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800cb34:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800cb36:	683b      	ldr	r3, [r7, #0]
 800cb38:	441a      	add	r2, r3
 800cb3a:	68fb      	ldr	r3, [r7, #12]
 800cb3c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800cb3e:	429a      	cmp	r2, r3
 800cb40:	d907      	bls.n	800cb52 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800cb42:	68fb      	ldr	r3, [r7, #12]
 800cb44:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cb46:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800cb4a:	68fb      	ldr	r3, [r7, #12]
 800cb4c:	635a      	str	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 800cb4e:	2301      	movs	r3, #1
 800cb50:	e074      	b.n	800cc3c <HAL_SD_WriteBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800cb52:	68fb      	ldr	r3, [r7, #12]
 800cb54:	2203      	movs	r2, #3
 800cb56:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800cb5a:	68fb      	ldr	r3, [r7, #12]
 800cb5c:	681b      	ldr	r3, [r3, #0]
 800cb5e:	2200      	movs	r2, #0
 800cb60:	62da      	str	r2, [r3, #44]	@ 0x2c

    hsd->pTxBuffPtr = pData;
 800cb62:	68fb      	ldr	r3, [r7, #12]
 800cb64:	68ba      	ldr	r2, [r7, #8]
 800cb66:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 800cb68:	683b      	ldr	r3, [r7, #0]
 800cb6a:	025a      	lsls	r2, r3, #9
 800cb6c:	68fb      	ldr	r3, [r7, #12]
 800cb6e:	621a      	str	r2, [r3, #32]

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800cb70:	68fb      	ldr	r3, [r7, #12]
 800cb72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cb74:	2b01      	cmp	r3, #1
 800cb76:	d002      	beq.n	800cb7e <HAL_SD_WriteBlocks_DMA+0x86>
    {
      add *= 512U;
 800cb78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cb7a:	025b      	lsls	r3, r3, #9
 800cb7c:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800cb7e:	f04f 33ff 	mov.w	r3, #4294967295
 800cb82:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800cb84:	683b      	ldr	r3, [r7, #0]
 800cb86:	025b      	lsls	r3, r3, #9
 800cb88:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800cb8a:	2390      	movs	r3, #144	@ 0x90
 800cb8c:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800cb8e:	2300      	movs	r3, #0
 800cb90:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800cb92:	2300      	movs	r3, #0
 800cb94:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800cb96:	2300      	movs	r3, #0
 800cb98:	627b      	str	r3, [r7, #36]	@ 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800cb9a:	68fb      	ldr	r3, [r7, #12]
 800cb9c:	681b      	ldr	r3, [r3, #0]
 800cb9e:	f107 0210 	add.w	r2, r7, #16
 800cba2:	4611      	mov	r1, r2
 800cba4:	4618      	mov	r0, r3
 800cba6:	f003 f861 	bl	800fc6c <SDMMC_ConfigData>


    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800cbaa:	68fb      	ldr	r3, [r7, #12]
 800cbac:	681b      	ldr	r3, [r3, #0]
 800cbae:	68da      	ldr	r2, [r3, #12]
 800cbb0:	68fb      	ldr	r3, [r7, #12]
 800cbb2:	681b      	ldr	r3, [r3, #0]
 800cbb4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800cbb8:	60da      	str	r2, [r3, #12]

    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800cbba:	68fb      	ldr	r3, [r7, #12]
 800cbbc:	681b      	ldr	r3, [r3, #0]
 800cbbe:	68ba      	ldr	r2, [r7, #8]
 800cbc0:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800cbc2:	68fb      	ldr	r3, [r7, #12]
 800cbc4:	681b      	ldr	r3, [r3, #0]
 800cbc6:	2201      	movs	r2, #1
 800cbc8:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 800cbca:	683b      	ldr	r3, [r7, #0]
 800cbcc:	2b01      	cmp	r3, #1
 800cbce:	d90a      	bls.n	800cbe6 <HAL_SD_WriteBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800cbd0:	68fb      	ldr	r3, [r7, #12]
 800cbd2:	22a0      	movs	r2, #160	@ 0xa0
 800cbd4:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800cbd6:	68fb      	ldr	r3, [r7, #12]
 800cbd8:	681b      	ldr	r3, [r3, #0]
 800cbda:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800cbdc:	4618      	mov	r0, r3
 800cbde:	f003 f8fd 	bl	800fddc <SDMMC_CmdWriteMultiBlock>
 800cbe2:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800cbe4:	e009      	b.n	800cbfa <HAL_SD_WriteBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800cbe6:	68fb      	ldr	r3, [r7, #12]
 800cbe8:	2290      	movs	r2, #144	@ 0x90
 800cbea:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800cbec:	68fb      	ldr	r3, [r7, #12]
 800cbee:	681b      	ldr	r3, [r3, #0]
 800cbf0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800cbf2:	4618      	mov	r0, r3
 800cbf4:	f003 f8cf 	bl	800fd96 <SDMMC_CmdWriteSingleBlock>
 800cbf8:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 800cbfa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cbfc:	2b00      	cmp	r3, #0
 800cbfe:	d012      	beq.n	800cc26 <HAL_SD_WriteBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800cc00:	68fb      	ldr	r3, [r7, #12]
 800cc02:	681b      	ldr	r3, [r3, #0]
 800cc04:	4a0f      	ldr	r2, [pc, #60]	@ (800cc44 <HAL_SD_WriteBlocks_DMA+0x14c>)
 800cc06:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 800cc08:	68fb      	ldr	r3, [r7, #12]
 800cc0a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800cc0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cc0e:	431a      	orrs	r2, r3
 800cc10:	68fb      	ldr	r3, [r7, #12]
 800cc12:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800cc14:	68fb      	ldr	r3, [r7, #12]
 800cc16:	2201      	movs	r2, #1
 800cc18:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800cc1c:	68fb      	ldr	r3, [r7, #12]
 800cc1e:	2200      	movs	r2, #0
 800cc20:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 800cc22:	2301      	movs	r3, #1
 800cc24:	e00a      	b.n	800cc3c <HAL_SD_WriteBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 800cc26:	68fb      	ldr	r3, [r7, #12]
 800cc28:	681b      	ldr	r3, [r3, #0]
 800cc2a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800cc2c:	68fb      	ldr	r3, [r7, #12]
 800cc2e:	681b      	ldr	r3, [r3, #0]
 800cc30:	f442 728d 	orr.w	r2, r2, #282	@ 0x11a
 800cc34:	63da      	str	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800cc36:	2300      	movs	r3, #0
 800cc38:	e000      	b.n	800cc3c <HAL_SD_WriteBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 800cc3a:	2302      	movs	r3, #2
  }
}
 800cc3c:	4618      	mov	r0, r3
 800cc3e:	3730      	adds	r7, #48	@ 0x30
 800cc40:	46bd      	mov	sp, r7
 800cc42:	bd80      	pop	{r7, pc}
 800cc44:	1fe00fff 	.word	0x1fe00fff

0800cc48 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800cc48:	b580      	push	{r7, lr}
 800cc4a:	b084      	sub	sp, #16
 800cc4c:	af00      	add	r7, sp, #0
 800cc4e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cc54:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	681b      	ldr	r3, [r3, #0]
 800cc5a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cc5c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800cc60:	2b00      	cmp	r3, #0
 800cc62:	d008      	beq.n	800cc76 <HAL_SD_IRQHandler+0x2e>
 800cc64:	68fb      	ldr	r3, [r7, #12]
 800cc66:	f003 0308 	and.w	r3, r3, #8
 800cc6a:	2b00      	cmp	r3, #0
 800cc6c:	d003      	beq.n	800cc76 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800cc6e:	6878      	ldr	r0, [r7, #4]
 800cc70:	f001 f926 	bl	800dec0 <SD_Read_IT>
 800cc74:	e19a      	b.n	800cfac <HAL_SD_IRQHandler+0x364>
  }

  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 800cc76:	687b      	ldr	r3, [r7, #4]
 800cc78:	681b      	ldr	r3, [r3, #0]
 800cc7a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cc7c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800cc80:	2b00      	cmp	r3, #0
 800cc82:	f000 80ac 	beq.w	800cdde <HAL_SD_IRQHandler+0x196>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 800cc86:	687b      	ldr	r3, [r7, #4]
 800cc88:	681b      	ldr	r3, [r3, #0]
 800cc8a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800cc8e:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	681b      	ldr	r3, [r3, #0]
 800cc94:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	681a      	ldr	r2, [r3, #0]
 800cc9a:	4b59      	ldr	r3, [pc, #356]	@ (800ce00 <HAL_SD_IRQHandler+0x1b8>)
 800cc9c:	400b      	ands	r3, r1
 800cc9e:	63d3      	str	r3, [r2, #60]	@ 0x3c
                        SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE | \
                        SDMMC_IT_RXFIFOHF);

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	681b      	ldr	r3, [r3, #0]
 800cca4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800cca6:	687b      	ldr	r3, [r7, #4]
 800cca8:	681b      	ldr	r3, [r3, #0]
 800ccaa:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 800ccae:	63da      	str	r2, [r3, #60]	@ 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	681b      	ldr	r3, [r3, #0]
 800ccb4:	68da      	ldr	r2, [r3, #12]
 800ccb6:	687b      	ldr	r3, [r7, #4]
 800ccb8:	681b      	ldr	r3, [r3, #0]
 800ccba:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800ccbe:	60da      	str	r2, [r3, #12]

    if ((context & SD_CONTEXT_IT) != 0U)
 800ccc0:	68fb      	ldr	r3, [r7, #12]
 800ccc2:	f003 0308 	and.w	r3, r3, #8
 800ccc6:	2b00      	cmp	r3, #0
 800ccc8:	d038      	beq.n	800cd3c <HAL_SD_IRQHandler+0xf4>
    {
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800ccca:	68fb      	ldr	r3, [r7, #12]
 800cccc:	f003 0302 	and.w	r3, r3, #2
 800ccd0:	2b00      	cmp	r3, #0
 800ccd2:	d104      	bne.n	800ccde <HAL_SD_IRQHandler+0x96>
 800ccd4:	68fb      	ldr	r3, [r7, #12]
 800ccd6:	f003 0320 	and.w	r3, r3, #32
 800ccda:	2b00      	cmp	r3, #0
 800ccdc:	d011      	beq.n	800cd02 <HAL_SD_IRQHandler+0xba>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800ccde:	687b      	ldr	r3, [r7, #4]
 800cce0:	681b      	ldr	r3, [r3, #0]
 800cce2:	4618      	mov	r0, r3
 800cce4:	f003 f89e 	bl	800fe24 <SDMMC_CmdStopTransfer>
 800cce8:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 800ccea:	68bb      	ldr	r3, [r7, #8]
 800ccec:	2b00      	cmp	r3, #0
 800ccee:	d008      	beq.n	800cd02 <HAL_SD_IRQHandler+0xba>
        {
          hsd->ErrorCode |= errorstate;
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ccf4:	68bb      	ldr	r3, [r7, #8]
 800ccf6:	431a      	orrs	r2, r3
 800ccf8:	687b      	ldr	r3, [r7, #4]
 800ccfa:	635a      	str	r2, [r3, #52]	@ 0x34
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800ccfc:	6878      	ldr	r0, [r7, #4]
 800ccfe:	f000 f95b 	bl	800cfb8 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800cd02:	687b      	ldr	r3, [r7, #4]
 800cd04:	681b      	ldr	r3, [r3, #0]
 800cd06:	4a3f      	ldr	r2, [pc, #252]	@ (800ce04 <HAL_SD_IRQHandler+0x1bc>)
 800cd08:	639a      	str	r2, [r3, #56]	@ 0x38

      hsd->State = HAL_SD_STATE_READY;
 800cd0a:	687b      	ldr	r3, [r7, #4]
 800cd0c:	2201      	movs	r2, #1
 800cd0e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800cd12:	687b      	ldr	r3, [r7, #4]
 800cd14:	2200      	movs	r2, #0
 800cd16:	62da      	str	r2, [r3, #44]	@ 0x2c
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800cd18:	68fb      	ldr	r3, [r7, #12]
 800cd1a:	f003 0301 	and.w	r3, r3, #1
 800cd1e:	2b00      	cmp	r3, #0
 800cd20:	d104      	bne.n	800cd2c <HAL_SD_IRQHandler+0xe4>
 800cd22:	68fb      	ldr	r3, [r7, #12]
 800cd24:	f003 0302 	and.w	r3, r3, #2
 800cd28:	2b00      	cmp	r3, #0
 800cd2a:	d003      	beq.n	800cd34 <HAL_SD_IRQHandler+0xec>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800cd2c:	6878      	ldr	r0, [r7, #4]
 800cd2e:	f003 fd2b 	bl	8010788 <HAL_SD_RxCpltCallback>
 800cd32:	e13b      	b.n	800cfac <HAL_SD_IRQHandler+0x364>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800cd34:	6878      	ldr	r0, [r7, #4]
 800cd36:	f003 fd1d 	bl	8010774 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800cd3a:	e137      	b.n	800cfac <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 800cd3c:	68fb      	ldr	r3, [r7, #12]
 800cd3e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800cd42:	2b00      	cmp	r3, #0
 800cd44:	f000 8132 	beq.w	800cfac <HAL_SD_IRQHandler+0x364>
      hsd->Instance->DLEN = 0;
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	681b      	ldr	r3, [r3, #0]
 800cd4c:	2200      	movs	r2, #0
 800cd4e:	629a      	str	r2, [r3, #40]	@ 0x28
      hsd->Instance->DCTRL = 0;
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	681b      	ldr	r3, [r3, #0]
 800cd54:	2200      	movs	r2, #0
 800cd56:	62da      	str	r2, [r3, #44]	@ 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	681b      	ldr	r3, [r3, #0]
 800cd5c:	2200      	movs	r2, #0
 800cd5e:	651a      	str	r2, [r3, #80]	@ 0x50
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800cd60:	68fb      	ldr	r3, [r7, #12]
 800cd62:	f003 0302 	and.w	r3, r3, #2
 800cd66:	2b00      	cmp	r3, #0
 800cd68:	d104      	bne.n	800cd74 <HAL_SD_IRQHandler+0x12c>
 800cd6a:	68fb      	ldr	r3, [r7, #12]
 800cd6c:	f003 0320 	and.w	r3, r3, #32
 800cd70:	2b00      	cmp	r3, #0
 800cd72:	d011      	beq.n	800cd98 <HAL_SD_IRQHandler+0x150>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	681b      	ldr	r3, [r3, #0]
 800cd78:	4618      	mov	r0, r3
 800cd7a:	f003 f853 	bl	800fe24 <SDMMC_CmdStopTransfer>
 800cd7e:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 800cd80:	68bb      	ldr	r3, [r7, #8]
 800cd82:	2b00      	cmp	r3, #0
 800cd84:	d008      	beq.n	800cd98 <HAL_SD_IRQHandler+0x150>
          hsd->ErrorCode |= errorstate;
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800cd8a:	68bb      	ldr	r3, [r7, #8]
 800cd8c:	431a      	orrs	r2, r3
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	635a      	str	r2, [r3, #52]	@ 0x34
          HAL_SD_ErrorCallback(hsd);
 800cd92:	6878      	ldr	r0, [r7, #4]
 800cd94:	f000 f910 	bl	800cfb8 <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	2201      	movs	r2, #1
 800cd9c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	2200      	movs	r2, #0
 800cda4:	62da      	str	r2, [r3, #44]	@ 0x2c
      if (((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800cda6:	68fb      	ldr	r3, [r7, #12]
 800cda8:	f003 0310 	and.w	r3, r3, #16
 800cdac:	2b00      	cmp	r3, #0
 800cdae:	d104      	bne.n	800cdba <HAL_SD_IRQHandler+0x172>
 800cdb0:	68fb      	ldr	r3, [r7, #12]
 800cdb2:	f003 0320 	and.w	r3, r3, #32
 800cdb6:	2b00      	cmp	r3, #0
 800cdb8:	d002      	beq.n	800cdc0 <HAL_SD_IRQHandler+0x178>
        HAL_SD_TxCpltCallback(hsd);
 800cdba:	6878      	ldr	r0, [r7, #4]
 800cdbc:	f003 fcda 	bl	8010774 <HAL_SD_TxCpltCallback>
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800cdc0:	68fb      	ldr	r3, [r7, #12]
 800cdc2:	f003 0301 	and.w	r3, r3, #1
 800cdc6:	2b00      	cmp	r3, #0
 800cdc8:	d105      	bne.n	800cdd6 <HAL_SD_IRQHandler+0x18e>
 800cdca:	68fb      	ldr	r3, [r7, #12]
 800cdcc:	f003 0302 	and.w	r3, r3, #2
 800cdd0:	2b00      	cmp	r3, #0
 800cdd2:	f000 80eb 	beq.w	800cfac <HAL_SD_IRQHandler+0x364>
        HAL_SD_RxCpltCallback(hsd);
 800cdd6:	6878      	ldr	r0, [r7, #4]
 800cdd8:	f003 fcd6 	bl	8010788 <HAL_SD_RxCpltCallback>
}
 800cddc:	e0e6      	b.n	800cfac <HAL_SD_IRQHandler+0x364>
  else if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	681b      	ldr	r3, [r3, #0]
 800cde2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cde4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800cde8:	2b00      	cmp	r3, #0
 800cdea:	d00d      	beq.n	800ce08 <HAL_SD_IRQHandler+0x1c0>
 800cdec:	68fb      	ldr	r3, [r7, #12]
 800cdee:	f003 0308 	and.w	r3, r3, #8
 800cdf2:	2b00      	cmp	r3, #0
 800cdf4:	d008      	beq.n	800ce08 <HAL_SD_IRQHandler+0x1c0>
    SD_Write_IT(hsd);
 800cdf6:	6878      	ldr	r0, [r7, #4]
 800cdf8:	f001 f8a8 	bl	800df4c <SD_Write_IT>
 800cdfc:	e0d6      	b.n	800cfac <HAL_SD_IRQHandler+0x364>
 800cdfe:	bf00      	nop
 800ce00:	ffff3ec5 	.word	0xffff3ec5
 800ce04:	18000f3a 	.word	0x18000f3a
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR |
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	681b      	ldr	r3, [r3, #0]
 800ce0c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ce0e:	f003 033a 	and.w	r3, r3, #58	@ 0x3a
 800ce12:	2b00      	cmp	r3, #0
 800ce14:	f000 809d 	beq.w	800cf52 <HAL_SD_IRQHandler+0x30a>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	681b      	ldr	r3, [r3, #0]
 800ce1c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ce1e:	f003 0302 	and.w	r3, r3, #2
 800ce22:	2b00      	cmp	r3, #0
 800ce24:	d005      	beq.n	800ce32 <HAL_SD_IRQHandler+0x1ea>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ce2a:	f043 0202 	orr.w	r2, r3, #2
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	635a      	str	r2, [r3, #52]	@ 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 800ce32:	687b      	ldr	r3, [r7, #4]
 800ce34:	681b      	ldr	r3, [r3, #0]
 800ce36:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ce38:	f003 0308 	and.w	r3, r3, #8
 800ce3c:	2b00      	cmp	r3, #0
 800ce3e:	d005      	beq.n	800ce4c <HAL_SD_IRQHandler+0x204>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800ce40:	687b      	ldr	r3, [r7, #4]
 800ce42:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ce44:	f043 0208 	orr.w	r2, r3, #8
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	635a      	str	r2, [r3, #52]	@ 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	681b      	ldr	r3, [r3, #0]
 800ce50:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ce52:	f003 0320 	and.w	r3, r3, #32
 800ce56:	2b00      	cmp	r3, #0
 800ce58:	d005      	beq.n	800ce66 <HAL_SD_IRQHandler+0x21e>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ce5e:	f043 0220 	orr.w	r2, r3, #32
 800ce62:	687b      	ldr	r3, [r7, #4]
 800ce64:	635a      	str	r2, [r3, #52]	@ 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	681b      	ldr	r3, [r3, #0]
 800ce6a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ce6c:	f003 0310 	and.w	r3, r3, #16
 800ce70:	2b00      	cmp	r3, #0
 800ce72:	d005      	beq.n	800ce80 <HAL_SD_IRQHandler+0x238>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800ce74:	687b      	ldr	r3, [r7, #4]
 800ce76:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ce78:	f043 0210 	orr.w	r2, r3, #16
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	681b      	ldr	r3, [r3, #0]
 800ce84:	4a4b      	ldr	r2, [pc, #300]	@ (800cfb4 <HAL_SD_IRQHandler+0x36c>)
 800ce86:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	681b      	ldr	r3, [r3, #0]
 800ce8c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	681b      	ldr	r3, [r3, #0]
 800ce92:	f422 729d 	bic.w	r2, r2, #314	@ 0x13a
 800ce96:	63da      	str	r2, [r3, #60]	@ 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	681b      	ldr	r3, [r3, #0]
 800ce9c:	68da      	ldr	r2, [r3, #12]
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	681b      	ldr	r3, [r3, #0]
 800cea2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800cea6:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	681b      	ldr	r3, [r3, #0]
 800ceac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	681b      	ldr	r3, [r3, #0]
 800ceb2:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800ceb6:	62da      	str	r2, [r3, #44]	@ 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	681b      	ldr	r3, [r3, #0]
 800cebc:	68da      	ldr	r2, [r3, #12]
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	681b      	ldr	r3, [r3, #0]
 800cec2:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800cec6:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	681b      	ldr	r3, [r3, #0]
 800cecc:	4618      	mov	r0, r3
 800cece:	f002 ffa9 	bl	800fe24 <SDMMC_CmdStopTransfer>
 800ced2:	4602      	mov	r2, r0
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ced8:	431a      	orrs	r2, r3
 800ceda:	687b      	ldr	r3, [r7, #4]
 800cedc:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	681b      	ldr	r3, [r3, #0]
 800cee2:	68da      	ldr	r2, [r3, #12]
 800cee4:	687b      	ldr	r3, [r7, #4]
 800cee6:	681b      	ldr	r3, [r3, #0]
 800cee8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800ceec:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	681b      	ldr	r3, [r3, #0]
 800cef2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800cef6:	639a      	str	r2, [r3, #56]	@ 0x38
    if ((context & SD_CONTEXT_IT) != 0U)
 800cef8:	68fb      	ldr	r3, [r7, #12]
 800cefa:	f003 0308 	and.w	r3, r3, #8
 800cefe:	2b00      	cmp	r3, #0
 800cf00:	d00a      	beq.n	800cf18 <HAL_SD_IRQHandler+0x2d0>
      hsd->State = HAL_SD_STATE_READY;
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	2201      	movs	r2, #1
 800cf06:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800cf0a:	687b      	ldr	r3, [r7, #4]
 800cf0c:	2200      	movs	r2, #0
 800cf0e:	62da      	str	r2, [r3, #44]	@ 0x2c
      HAL_SD_ErrorCallback(hsd);
 800cf10:	6878      	ldr	r0, [r7, #4]
 800cf12:	f000 f851 	bl	800cfb8 <HAL_SD_ErrorCallback>
}
 800cf16:	e049      	b.n	800cfac <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 800cf18:	68fb      	ldr	r3, [r7, #12]
 800cf1a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800cf1e:	2b00      	cmp	r3, #0
 800cf20:	d044      	beq.n	800cfac <HAL_SD_IRQHandler+0x364>
      if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cf26:	2b00      	cmp	r3, #0
 800cf28:	d040      	beq.n	800cfac <HAL_SD_IRQHandler+0x364>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	681b      	ldr	r3, [r3, #0]
 800cf2e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	681b      	ldr	r3, [r3, #0]
 800cf34:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 800cf38:	63da      	str	r2, [r3, #60]	@ 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	681b      	ldr	r3, [r3, #0]
 800cf3e:	2200      	movs	r2, #0
 800cf40:	651a      	str	r2, [r3, #80]	@ 0x50
        hsd->State = HAL_SD_STATE_READY;
 800cf42:	687b      	ldr	r3, [r7, #4]
 800cf44:	2201      	movs	r2, #1
 800cf46:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
        HAL_SD_ErrorCallback(hsd);
 800cf4a:	6878      	ldr	r0, [r7, #4]
 800cf4c:	f000 f834 	bl	800cfb8 <HAL_SD_ErrorCallback>
}
 800cf50:	e02c      	b.n	800cfac <HAL_SD_IRQHandler+0x364>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 800cf52:	687b      	ldr	r3, [r7, #4]
 800cf54:	681b      	ldr	r3, [r3, #0]
 800cf56:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cf58:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800cf5c:	2b00      	cmp	r3, #0
 800cf5e:	d025      	beq.n	800cfac <HAL_SD_IRQHandler+0x364>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	681b      	ldr	r3, [r3, #0]
 800cf64:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cf68:	639a      	str	r2, [r3, #56]	@ 0x38
    if (READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	681b      	ldr	r3, [r3, #0]
 800cf6e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800cf70:	f003 0304 	and.w	r3, r3, #4
 800cf74:	2b00      	cmp	r3, #0
 800cf76:	d10c      	bne.n	800cf92 <HAL_SD_IRQHandler+0x34a>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800cf78:	68fb      	ldr	r3, [r7, #12]
 800cf7a:	f003 0320 	and.w	r3, r3, #32
 800cf7e:	2b00      	cmp	r3, #0
 800cf80:	d003      	beq.n	800cf8a <HAL_SD_IRQHandler+0x342>
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 800cf82:	6878      	ldr	r0, [r7, #4]
 800cf84:	f001 f84a 	bl	800e01c <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>
}
 800cf88:	e010      	b.n	800cfac <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf1CpltCallback(hsd);
 800cf8a:	6878      	ldr	r0, [r7, #4]
 800cf8c:	f001 f832 	bl	800dff4 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>
}
 800cf90:	e00c      	b.n	800cfac <HAL_SD_IRQHandler+0x364>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800cf92:	68fb      	ldr	r3, [r7, #12]
 800cf94:	f003 0320 	and.w	r3, r3, #32
 800cf98:	2b00      	cmp	r3, #0
 800cf9a:	d003      	beq.n	800cfa4 <HAL_SD_IRQHandler+0x35c>
        HAL_SDEx_Write_DMADoubleBuf0CpltCallback(hsd);
 800cf9c:	6878      	ldr	r0, [r7, #4]
 800cf9e:	f001 f833 	bl	800e008 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>
}
 800cfa2:	e003      	b.n	800cfac <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf0CpltCallback(hsd);
 800cfa4:	6878      	ldr	r0, [r7, #4]
 800cfa6:	f001 f81b 	bl	800dfe0 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>
}
 800cfaa:	e7ff      	b.n	800cfac <HAL_SD_IRQHandler+0x364>
 800cfac:	bf00      	nop
 800cfae:	3710      	adds	r7, #16
 800cfb0:	46bd      	mov	sp, r7
 800cfb2:	bd80      	pop	{r7, pc}
 800cfb4:	18000f3a 	.word	0x18000f3a

0800cfb8 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800cfb8:	b480      	push	{r7}
 800cfba:	b083      	sub	sp, #12
 800cfbc:	af00      	add	r7, sp, #0
 800cfbe:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800cfc0:	bf00      	nop
 800cfc2:	370c      	adds	r7, #12
 800cfc4:	46bd      	mov	sp, r7
 800cfc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfca:	4770      	bx	lr

0800cfcc <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800cfcc:	b480      	push	{r7}
 800cfce:	b083      	sub	sp, #12
 800cfd0:	af00      	add	r7, sp, #0
 800cfd2:	6078      	str	r0, [r7, #4]
 800cfd4:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800cfda:	0f9b      	lsrs	r3, r3, #30
 800cfdc:	b2da      	uxtb	r2, r3
 800cfde:	683b      	ldr	r3, [r7, #0]
 800cfe0:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800cfe2:	687b      	ldr	r3, [r7, #4]
 800cfe4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800cfe6:	0e9b      	lsrs	r3, r3, #26
 800cfe8:	b2db      	uxtb	r3, r3
 800cfea:	f003 030f 	and.w	r3, r3, #15
 800cfee:	b2da      	uxtb	r2, r3
 800cff0:	683b      	ldr	r3, [r7, #0]
 800cff2:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800cff8:	0e1b      	lsrs	r3, r3, #24
 800cffa:	b2db      	uxtb	r3, r3
 800cffc:	f003 0303 	and.w	r3, r3, #3
 800d000:	b2da      	uxtb	r2, r3
 800d002:	683b      	ldr	r3, [r7, #0]
 800d004:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800d006:	687b      	ldr	r3, [r7, #4]
 800d008:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d00a:	0c1b      	lsrs	r3, r3, #16
 800d00c:	b2da      	uxtb	r2, r3
 800d00e:	683b      	ldr	r3, [r7, #0]
 800d010:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800d012:	687b      	ldr	r3, [r7, #4]
 800d014:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d016:	0a1b      	lsrs	r3, r3, #8
 800d018:	b2da      	uxtb	r2, r3
 800d01a:	683b      	ldr	r3, [r7, #0]
 800d01c:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800d01e:	687b      	ldr	r3, [r7, #4]
 800d020:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d022:	b2da      	uxtb	r2, r3
 800d024:	683b      	ldr	r3, [r7, #0]
 800d026:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d02c:	0d1b      	lsrs	r3, r3, #20
 800d02e:	b29a      	uxth	r2, r3
 800d030:	683b      	ldr	r3, [r7, #0]
 800d032:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d038:	0c1b      	lsrs	r3, r3, #16
 800d03a:	b2db      	uxtb	r3, r3
 800d03c:	f003 030f 	and.w	r3, r3, #15
 800d040:	b2da      	uxtb	r2, r3
 800d042:	683b      	ldr	r3, [r7, #0]
 800d044:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800d046:	687b      	ldr	r3, [r7, #4]
 800d048:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d04a:	0bdb      	lsrs	r3, r3, #15
 800d04c:	b2db      	uxtb	r3, r3
 800d04e:	f003 0301 	and.w	r3, r3, #1
 800d052:	b2da      	uxtb	r2, r3
 800d054:	683b      	ldr	r3, [r7, #0]
 800d056:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d05c:	0b9b      	lsrs	r3, r3, #14
 800d05e:	b2db      	uxtb	r3, r3
 800d060:	f003 0301 	and.w	r3, r3, #1
 800d064:	b2da      	uxtb	r2, r3
 800d066:	683b      	ldr	r3, [r7, #0]
 800d068:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800d06a:	687b      	ldr	r3, [r7, #4]
 800d06c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d06e:	0b5b      	lsrs	r3, r3, #13
 800d070:	b2db      	uxtb	r3, r3
 800d072:	f003 0301 	and.w	r3, r3, #1
 800d076:	b2da      	uxtb	r2, r3
 800d078:	683b      	ldr	r3, [r7, #0]
 800d07a:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800d07c:	687b      	ldr	r3, [r7, #4]
 800d07e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d080:	0b1b      	lsrs	r3, r3, #12
 800d082:	b2db      	uxtb	r3, r3
 800d084:	f003 0301 	and.w	r3, r3, #1
 800d088:	b2da      	uxtb	r2, r3
 800d08a:	683b      	ldr	r3, [r7, #0]
 800d08c:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800d08e:	683b      	ldr	r3, [r7, #0]
 800d090:	2200      	movs	r2, #0
 800d092:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d098:	2b00      	cmp	r3, #0
 800d09a:	d163      	bne.n	800d164 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d0a0:	009a      	lsls	r2, r3, #2
 800d0a2:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800d0a6:	4013      	ands	r3, r2
 800d0a8:	687a      	ldr	r2, [r7, #4]
 800d0aa:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 800d0ac:	0f92      	lsrs	r2, r2, #30
 800d0ae:	431a      	orrs	r2, r3
 800d0b0:	683b      	ldr	r3, [r7, #0]
 800d0b2:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800d0b4:	687b      	ldr	r3, [r7, #4]
 800d0b6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d0b8:	0edb      	lsrs	r3, r3, #27
 800d0ba:	b2db      	uxtb	r3, r3
 800d0bc:	f003 0307 	and.w	r3, r3, #7
 800d0c0:	b2da      	uxtb	r2, r3
 800d0c2:	683b      	ldr	r3, [r7, #0]
 800d0c4:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d0ca:	0e1b      	lsrs	r3, r3, #24
 800d0cc:	b2db      	uxtb	r3, r3
 800d0ce:	f003 0307 	and.w	r3, r3, #7
 800d0d2:	b2da      	uxtb	r2, r3
 800d0d4:	683b      	ldr	r3, [r7, #0]
 800d0d6:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d0dc:	0d5b      	lsrs	r3, r3, #21
 800d0de:	b2db      	uxtb	r3, r3
 800d0e0:	f003 0307 	and.w	r3, r3, #7
 800d0e4:	b2da      	uxtb	r2, r3
 800d0e6:	683b      	ldr	r3, [r7, #0]
 800d0e8:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800d0ea:	687b      	ldr	r3, [r7, #4]
 800d0ec:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d0ee:	0c9b      	lsrs	r3, r3, #18
 800d0f0:	b2db      	uxtb	r3, r3
 800d0f2:	f003 0307 	and.w	r3, r3, #7
 800d0f6:	b2da      	uxtb	r2, r3
 800d0f8:	683b      	ldr	r3, [r7, #0]
 800d0fa:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d100:	0bdb      	lsrs	r3, r3, #15
 800d102:	b2db      	uxtb	r3, r3
 800d104:	f003 0307 	and.w	r3, r3, #7
 800d108:	b2da      	uxtb	r2, r3
 800d10a:	683b      	ldr	r3, [r7, #0]
 800d10c:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800d10e:	683b      	ldr	r3, [r7, #0]
 800d110:	691b      	ldr	r3, [r3, #16]
 800d112:	1c5a      	adds	r2, r3, #1
 800d114:	687b      	ldr	r3, [r7, #4]
 800d116:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800d118:	683b      	ldr	r3, [r7, #0]
 800d11a:	7e1b      	ldrb	r3, [r3, #24]
 800d11c:	b2db      	uxtb	r3, r3
 800d11e:	f003 0307 	and.w	r3, r3, #7
 800d122:	3302      	adds	r3, #2
 800d124:	2201      	movs	r2, #1
 800d126:	fa02 f303 	lsl.w	r3, r2, r3
 800d12a:	687a      	ldr	r2, [r7, #4]
 800d12c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800d12e:	fb03 f202 	mul.w	r2, r3, r2
 800d132:	687b      	ldr	r3, [r7, #4]
 800d134:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800d136:	683b      	ldr	r3, [r7, #0]
 800d138:	7a1b      	ldrb	r3, [r3, #8]
 800d13a:	b2db      	uxtb	r3, r3
 800d13c:	f003 030f 	and.w	r3, r3, #15
 800d140:	2201      	movs	r2, #1
 800d142:	409a      	lsls	r2, r3
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	64da      	str	r2, [r3, #76]	@ 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d14c:	687a      	ldr	r2, [r7, #4]
 800d14e:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800d150:	0a52      	lsrs	r2, r2, #9
 800d152:	fb03 f202 	mul.w	r2, r3, r2
 800d156:	687b      	ldr	r3, [r7, #4]
 800d158:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.LogBlockSize = 512U;
 800d15a:	687b      	ldr	r3, [r7, #4]
 800d15c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d160:	655a      	str	r2, [r3, #84]	@ 0x54
 800d162:	e031      	b.n	800d1c8 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d168:	2b01      	cmp	r3, #1
 800d16a:	d11d      	bne.n	800d1a8 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d170:	041b      	lsls	r3, r3, #16
 800d172:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 800d176:	687b      	ldr	r3, [r7, #4]
 800d178:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d17a:	0c1b      	lsrs	r3, r3, #16
 800d17c:	431a      	orrs	r2, r3
 800d17e:	683b      	ldr	r3, [r7, #0]
 800d180:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800d182:	683b      	ldr	r3, [r7, #0]
 800d184:	691b      	ldr	r3, [r3, #16]
 800d186:	3301      	adds	r3, #1
 800d188:	029a      	lsls	r2, r3, #10
 800d18a:	687b      	ldr	r3, [r7, #4]
 800d18c:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800d18e:	687b      	ldr	r3, [r7, #4]
 800d190:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800d192:	687b      	ldr	r3, [r7, #4]
 800d194:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.BlockSize = 512U;
 800d196:	687b      	ldr	r3, [r7, #4]
 800d198:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d19c:	64da      	str	r2, [r3, #76]	@ 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800d19e:	687b      	ldr	r3, [r7, #4]
 800d1a0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800d1a2:	687b      	ldr	r3, [r7, #4]
 800d1a4:	655a      	str	r2, [r3, #84]	@ 0x54
 800d1a6:	e00f      	b.n	800d1c8 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d1a8:	687b      	ldr	r3, [r7, #4]
 800d1aa:	681b      	ldr	r3, [r3, #0]
 800d1ac:	4a58      	ldr	r2, [pc, #352]	@ (800d310 <HAL_SD_GetCardCSD+0x344>)
 800d1ae:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d1b0:	687b      	ldr	r3, [r7, #4]
 800d1b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d1b4:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 800d1bc:	687b      	ldr	r3, [r7, #4]
 800d1be:	2201      	movs	r2, #1
 800d1c0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 800d1c4:	2301      	movs	r3, #1
 800d1c6:	e09d      	b.n	800d304 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800d1c8:	687b      	ldr	r3, [r7, #4]
 800d1ca:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d1cc:	0b9b      	lsrs	r3, r3, #14
 800d1ce:	b2db      	uxtb	r3, r3
 800d1d0:	f003 0301 	and.w	r3, r3, #1
 800d1d4:	b2da      	uxtb	r2, r3
 800d1d6:	683b      	ldr	r3, [r7, #0]
 800d1d8:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800d1da:	687b      	ldr	r3, [r7, #4]
 800d1dc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d1de:	09db      	lsrs	r3, r3, #7
 800d1e0:	b2db      	uxtb	r3, r3
 800d1e2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d1e6:	b2da      	uxtb	r2, r3
 800d1e8:	683b      	ldr	r3, [r7, #0]
 800d1ea:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800d1ec:	687b      	ldr	r3, [r7, #4]
 800d1ee:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d1f0:	b2db      	uxtb	r3, r3
 800d1f2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d1f6:	b2da      	uxtb	r2, r3
 800d1f8:	683b      	ldr	r3, [r7, #0]
 800d1fa:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d200:	0fdb      	lsrs	r3, r3, #31
 800d202:	b2da      	uxtb	r2, r3
 800d204:	683b      	ldr	r3, [r7, #0]
 800d206:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d20c:	0f5b      	lsrs	r3, r3, #29
 800d20e:	b2db      	uxtb	r3, r3
 800d210:	f003 0303 	and.w	r3, r3, #3
 800d214:	b2da      	uxtb	r2, r3
 800d216:	683b      	ldr	r3, [r7, #0]
 800d218:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800d21a:	687b      	ldr	r3, [r7, #4]
 800d21c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d21e:	0e9b      	lsrs	r3, r3, #26
 800d220:	b2db      	uxtb	r3, r3
 800d222:	f003 0307 	and.w	r3, r3, #7
 800d226:	b2da      	uxtb	r2, r3
 800d228:	683b      	ldr	r3, [r7, #0]
 800d22a:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800d22c:	687b      	ldr	r3, [r7, #4]
 800d22e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d230:	0d9b      	lsrs	r3, r3, #22
 800d232:	b2db      	uxtb	r3, r3
 800d234:	f003 030f 	and.w	r3, r3, #15
 800d238:	b2da      	uxtb	r2, r3
 800d23a:	683b      	ldr	r3, [r7, #0]
 800d23c:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800d23e:	687b      	ldr	r3, [r7, #4]
 800d240:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d242:	0d5b      	lsrs	r3, r3, #21
 800d244:	b2db      	uxtb	r3, r3
 800d246:	f003 0301 	and.w	r3, r3, #1
 800d24a:	b2da      	uxtb	r2, r3
 800d24c:	683b      	ldr	r3, [r7, #0]
 800d24e:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800d252:	683b      	ldr	r3, [r7, #0]
 800d254:	2200      	movs	r2, #0
 800d256:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800d25a:	687b      	ldr	r3, [r7, #4]
 800d25c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d25e:	0c1b      	lsrs	r3, r3, #16
 800d260:	b2db      	uxtb	r3, r3
 800d262:	f003 0301 	and.w	r3, r3, #1
 800d266:	b2da      	uxtb	r2, r3
 800d268:	683b      	ldr	r3, [r7, #0]
 800d26a:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d272:	0bdb      	lsrs	r3, r3, #15
 800d274:	b2db      	uxtb	r3, r3
 800d276:	f003 0301 	and.w	r3, r3, #1
 800d27a:	b2da      	uxtb	r2, r3
 800d27c:	683b      	ldr	r3, [r7, #0]
 800d27e:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800d282:	687b      	ldr	r3, [r7, #4]
 800d284:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d286:	0b9b      	lsrs	r3, r3, #14
 800d288:	b2db      	uxtb	r3, r3
 800d28a:	f003 0301 	and.w	r3, r3, #1
 800d28e:	b2da      	uxtb	r2, r3
 800d290:	683b      	ldr	r3, [r7, #0]
 800d292:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d29a:	0b5b      	lsrs	r3, r3, #13
 800d29c:	b2db      	uxtb	r3, r3
 800d29e:	f003 0301 	and.w	r3, r3, #1
 800d2a2:	b2da      	uxtb	r2, r3
 800d2a4:	683b      	ldr	r3, [r7, #0]
 800d2a6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800d2aa:	687b      	ldr	r3, [r7, #4]
 800d2ac:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d2ae:	0b1b      	lsrs	r3, r3, #12
 800d2b0:	b2db      	uxtb	r3, r3
 800d2b2:	f003 0301 	and.w	r3, r3, #1
 800d2b6:	b2da      	uxtb	r2, r3
 800d2b8:	683b      	ldr	r3, [r7, #0]
 800d2ba:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800d2be:	687b      	ldr	r3, [r7, #4]
 800d2c0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d2c2:	0a9b      	lsrs	r3, r3, #10
 800d2c4:	b2db      	uxtb	r3, r3
 800d2c6:	f003 0303 	and.w	r3, r3, #3
 800d2ca:	b2da      	uxtb	r2, r3
 800d2cc:	683b      	ldr	r3, [r7, #0]
 800d2ce:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800d2d2:	687b      	ldr	r3, [r7, #4]
 800d2d4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d2d6:	0a1b      	lsrs	r3, r3, #8
 800d2d8:	b2db      	uxtb	r3, r3
 800d2da:	f003 0303 	and.w	r3, r3, #3
 800d2de:	b2da      	uxtb	r2, r3
 800d2e0:	683b      	ldr	r3, [r7, #0]
 800d2e2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800d2e6:	687b      	ldr	r3, [r7, #4]
 800d2e8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d2ea:	085b      	lsrs	r3, r3, #1
 800d2ec:	b2db      	uxtb	r3, r3
 800d2ee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d2f2:	b2da      	uxtb	r2, r3
 800d2f4:	683b      	ldr	r3, [r7, #0]
 800d2f6:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 800d2fa:	683b      	ldr	r3, [r7, #0]
 800d2fc:	2201      	movs	r2, #1
 800d2fe:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 800d302:	2300      	movs	r3, #0
}
 800d304:	4618      	mov	r0, r3
 800d306:	370c      	adds	r7, #12
 800d308:	46bd      	mov	sp, r7
 800d30a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d30e:	4770      	bx	lr
 800d310:	1fe00fff 	.word	0x1fe00fff

0800d314 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 800d314:	b580      	push	{r7, lr}
 800d316:	b094      	sub	sp, #80	@ 0x50
 800d318:	af00      	add	r7, sp, #0
 800d31a:	6078      	str	r0, [r7, #4]
 800d31c:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800d31e:	2300      	movs	r3, #0
 800d320:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 800d324:	687b      	ldr	r3, [r7, #4]
 800d326:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800d32a:	b2db      	uxtb	r3, r3
 800d32c:	2b03      	cmp	r3, #3
 800d32e:	d101      	bne.n	800d334 <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 800d330:	2301      	movs	r3, #1
 800d332:	e0a7      	b.n	800d484 <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 800d334:	f107 0308 	add.w	r3, r7, #8
 800d338:	4619      	mov	r1, r3
 800d33a:	6878      	ldr	r0, [r7, #4]
 800d33c:	f000 fb62 	bl	800da04 <SD_SendSDStatus>
 800d340:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800d342:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d344:	2b00      	cmp	r3, #0
 800d346:	d011      	beq.n	800d36c <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	681b      	ldr	r3, [r3, #0]
 800d34c:	4a4f      	ldr	r2, [pc, #316]	@ (800d48c <HAL_SD_GetCardStatus+0x178>)
 800d34e:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800d350:	687b      	ldr	r3, [r7, #4]
 800d352:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d354:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d356:	431a      	orrs	r2, r3
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 800d35c:	687b      	ldr	r3, [r7, #4]
 800d35e:	2201      	movs	r2, #1
 800d360:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    status = HAL_ERROR;
 800d364:	2301      	movs	r3, #1
 800d366:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 800d36a:	e070      	b.n	800d44e <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 800d36c:	68bb      	ldr	r3, [r7, #8]
 800d36e:	099b      	lsrs	r3, r3, #6
 800d370:	b2db      	uxtb	r3, r3
 800d372:	f003 0303 	and.w	r3, r3, #3
 800d376:	b2da      	uxtb	r2, r3
 800d378:	683b      	ldr	r3, [r7, #0]
 800d37a:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 800d37c:	68bb      	ldr	r3, [r7, #8]
 800d37e:	095b      	lsrs	r3, r3, #5
 800d380:	b2db      	uxtb	r3, r3
 800d382:	f003 0301 	and.w	r3, r3, #1
 800d386:	b2da      	uxtb	r2, r3
 800d388:	683b      	ldr	r3, [r7, #0]
 800d38a:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 800d38c:	68bb      	ldr	r3, [r7, #8]
 800d38e:	0a1b      	lsrs	r3, r3, #8
 800d390:	b29b      	uxth	r3, r3
 800d392:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800d396:	b29a      	uxth	r2, r3
 800d398:	68bb      	ldr	r3, [r7, #8]
 800d39a:	0e1b      	lsrs	r3, r3, #24
 800d39c:	b29b      	uxth	r3, r3
 800d39e:	4313      	orrs	r3, r2
 800d3a0:	b29a      	uxth	r2, r3
 800d3a2:	683b      	ldr	r3, [r7, #0]
 800d3a4:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800d3a6:	68fb      	ldr	r3, [r7, #12]
 800d3a8:	061a      	lsls	r2, r3, #24
 800d3aa:	68fb      	ldr	r3, [r7, #12]
 800d3ac:	021b      	lsls	r3, r3, #8
 800d3ae:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800d3b2:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800d3b4:	68fb      	ldr	r3, [r7, #12]
 800d3b6:	0a1b      	lsrs	r3, r3, #8
 800d3b8:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800d3bc:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800d3be:	68fb      	ldr	r3, [r7, #12]
 800d3c0:	0e1b      	lsrs	r3, r3, #24
 800d3c2:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800d3c4:	683b      	ldr	r3, [r7, #0]
 800d3c6:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 800d3c8:	693b      	ldr	r3, [r7, #16]
 800d3ca:	b2da      	uxtb	r2, r3
 800d3cc:	683b      	ldr	r3, [r7, #0]
 800d3ce:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 800d3d0:	693b      	ldr	r3, [r7, #16]
 800d3d2:	0a1b      	lsrs	r3, r3, #8
 800d3d4:	b2da      	uxtb	r2, r3
 800d3d6:	683b      	ldr	r3, [r7, #0]
 800d3d8:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800d3da:	693b      	ldr	r3, [r7, #16]
 800d3dc:	0d1b      	lsrs	r3, r3, #20
 800d3de:	b2db      	uxtb	r3, r3
 800d3e0:	f003 030f 	and.w	r3, r3, #15
 800d3e4:	b2da      	uxtb	r2, r3
 800d3e6:	683b      	ldr	r3, [r7, #0]
 800d3e8:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800d3ea:	693b      	ldr	r3, [r7, #16]
 800d3ec:	0c1b      	lsrs	r3, r3, #16
 800d3ee:	b29b      	uxth	r3, r3
 800d3f0:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800d3f4:	b29a      	uxth	r2, r3
 800d3f6:	697b      	ldr	r3, [r7, #20]
 800d3f8:	b29b      	uxth	r3, r3
 800d3fa:	b2db      	uxtb	r3, r3
 800d3fc:	b29b      	uxth	r3, r3
 800d3fe:	4313      	orrs	r3, r2
 800d400:	b29a      	uxth	r2, r3
 800d402:	683b      	ldr	r3, [r7, #0]
 800d404:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 800d406:	697b      	ldr	r3, [r7, #20]
 800d408:	0a9b      	lsrs	r3, r3, #10
 800d40a:	b2db      	uxtb	r3, r3
 800d40c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800d410:	b2da      	uxtb	r2, r3
 800d412:	683b      	ldr	r3, [r7, #0]
 800d414:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 800d416:	697b      	ldr	r3, [r7, #20]
 800d418:	0a1b      	lsrs	r3, r3, #8
 800d41a:	b2db      	uxtb	r3, r3
 800d41c:	f003 0303 	and.w	r3, r3, #3
 800d420:	b2da      	uxtb	r2, r3
 800d422:	683b      	ldr	r3, [r7, #0]
 800d424:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800d426:	697b      	ldr	r3, [r7, #20]
 800d428:	091b      	lsrs	r3, r3, #4
 800d42a:	b2db      	uxtb	r3, r3
 800d42c:	f003 030f 	and.w	r3, r3, #15
 800d430:	b2da      	uxtb	r2, r3
 800d432:	683b      	ldr	r3, [r7, #0]
 800d434:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800d436:	697b      	ldr	r3, [r7, #20]
 800d438:	b2db      	uxtb	r3, r3
 800d43a:	f003 030f 	and.w	r3, r3, #15
 800d43e:	b2da      	uxtb	r2, r3
 800d440:	683b      	ldr	r3, [r7, #0]
 800d442:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 800d444:	69bb      	ldr	r3, [r7, #24]
 800d446:	0e1b      	lsrs	r3, r3, #24
 800d448:	b2da      	uxtb	r2, r3
 800d44a:	683b      	ldr	r3, [r7, #0]
 800d44c:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800d44e:	687b      	ldr	r3, [r7, #4]
 800d450:	681b      	ldr	r3, [r3, #0]
 800d452:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800d456:	4618      	mov	r0, r3
 800d458:	f002 fc34 	bl	800fcc4 <SDMMC_CmdBlockLength>
 800d45c:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800d45e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d460:	2b00      	cmp	r3, #0
 800d462:	d00d      	beq.n	800d480 <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d464:	687b      	ldr	r3, [r7, #4]
 800d466:	681b      	ldr	r3, [r3, #0]
 800d468:	4a08      	ldr	r2, [pc, #32]	@ (800d48c <HAL_SD_GetCardStatus+0x178>)
 800d46a:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode = errorstate;
 800d46c:	687b      	ldr	r3, [r7, #4]
 800d46e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d470:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	2201      	movs	r2, #1
 800d476:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    status = HAL_ERROR;
 800d47a:	2301      	movs	r3, #1
 800d47c:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  }


  return status;
 800d480:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
}
 800d484:	4618      	mov	r0, r3
 800d486:	3750      	adds	r7, #80	@ 0x50
 800d488:	46bd      	mov	sp, r7
 800d48a:	bd80      	pop	{r7, pc}
 800d48c:	1fe00fff 	.word	0x1fe00fff

0800d490 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800d490:	b480      	push	{r7}
 800d492:	b083      	sub	sp, #12
 800d494:	af00      	add	r7, sp, #0
 800d496:	6078      	str	r0, [r7, #4]
 800d498:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800d49a:	687b      	ldr	r3, [r7, #4]
 800d49c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d49e:	683b      	ldr	r3, [r7, #0]
 800d4a0:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800d4a2:	687b      	ldr	r3, [r7, #4]
 800d4a4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800d4a6:	683b      	ldr	r3, [r7, #0]
 800d4a8:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800d4aa:	687b      	ldr	r3, [r7, #4]
 800d4ac:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800d4ae:	683b      	ldr	r3, [r7, #0]
 800d4b0:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800d4b2:	687b      	ldr	r3, [r7, #4]
 800d4b4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800d4b6:	683b      	ldr	r3, [r7, #0]
 800d4b8:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800d4ba:	687b      	ldr	r3, [r7, #4]
 800d4bc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800d4be:	683b      	ldr	r3, [r7, #0]
 800d4c0:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800d4c2:	687b      	ldr	r3, [r7, #4]
 800d4c4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800d4c6:	683b      	ldr	r3, [r7, #0]
 800d4c8:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800d4ca:	687b      	ldr	r3, [r7, #4]
 800d4cc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800d4ce:	683b      	ldr	r3, [r7, #0]
 800d4d0:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800d4d2:	687b      	ldr	r3, [r7, #4]
 800d4d4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800d4d6:	683b      	ldr	r3, [r7, #0]
 800d4d8:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800d4da:	2300      	movs	r3, #0
}
 800d4dc:	4618      	mov	r0, r3
 800d4de:	370c      	adds	r7, #12
 800d4e0:	46bd      	mov	sp, r7
 800d4e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4e6:	4770      	bx	lr

0800d4e8 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800d4e8:	b590      	push	{r4, r7, lr}
 800d4ea:	b08d      	sub	sp, #52	@ 0x34
 800d4ec:	af02      	add	r7, sp, #8
 800d4ee:	6078      	str	r0, [r7, #4]
 800d4f0:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 800d4f2:	2300      	movs	r3, #0
 800d4f4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800d4f8:	687b      	ldr	r3, [r7, #4]
 800d4fa:	2203      	movs	r2, #3
 800d4fc:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 800d500:	687b      	ldr	r3, [r7, #4]
 800d502:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d504:	2b03      	cmp	r3, #3
 800d506:	d02e      	beq.n	800d566 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 800d508:	683b      	ldr	r3, [r7, #0]
 800d50a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800d50e:	d106      	bne.n	800d51e <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d510:	687b      	ldr	r3, [r7, #4]
 800d512:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d514:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800d518:	687b      	ldr	r3, [r7, #4]
 800d51a:	635a      	str	r2, [r3, #52]	@ 0x34
 800d51c:	e029      	b.n	800d572 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 800d51e:	683b      	ldr	r3, [r7, #0]
 800d520:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800d524:	d10a      	bne.n	800d53c <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800d526:	6878      	ldr	r0, [r7, #4]
 800d528:	f000 fb64 	bl	800dbf4 <SD_WideBus_Enable>
 800d52c:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800d52e:	687b      	ldr	r3, [r7, #4]
 800d530:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d532:	6a3b      	ldr	r3, [r7, #32]
 800d534:	431a      	orrs	r2, r3
 800d536:	687b      	ldr	r3, [r7, #4]
 800d538:	635a      	str	r2, [r3, #52]	@ 0x34
 800d53a:	e01a      	b.n	800d572 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 800d53c:	683b      	ldr	r3, [r7, #0]
 800d53e:	2b00      	cmp	r3, #0
 800d540:	d10a      	bne.n	800d558 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800d542:	6878      	ldr	r0, [r7, #4]
 800d544:	f000 fba1 	bl	800dc8a <SD_WideBus_Disable>
 800d548:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800d54a:	687b      	ldr	r3, [r7, #4]
 800d54c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d54e:	6a3b      	ldr	r3, [r7, #32]
 800d550:	431a      	orrs	r2, r3
 800d552:	687b      	ldr	r3, [r7, #4]
 800d554:	635a      	str	r2, [r3, #52]	@ 0x34
 800d556:	e00c      	b.n	800d572 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800d558:	687b      	ldr	r3, [r7, #4]
 800d55a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d55c:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800d560:	687b      	ldr	r3, [r7, #4]
 800d562:	635a      	str	r2, [r3, #52]	@ 0x34
 800d564:	e005      	b.n	800d572 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* SD Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d566:	687b      	ldr	r3, [r7, #4]
 800d568:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d56a:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800d56e:	687b      	ldr	r3, [r7, #4]
 800d570:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800d572:	687b      	ldr	r3, [r7, #4]
 800d574:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d576:	2b00      	cmp	r3, #0
 800d578:	d007      	beq.n	800d58a <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d57a:	687b      	ldr	r3, [r7, #4]
 800d57c:	681b      	ldr	r3, [r3, #0]
 800d57e:	4a5f      	ldr	r2, [pc, #380]	@ (800d6fc <HAL_SD_ConfigWideBusOperation+0x214>)
 800d580:	639a      	str	r2, [r3, #56]	@ 0x38
    status = HAL_ERROR;
 800d582:	2301      	movs	r3, #1
 800d584:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800d588:	e096      	b.n	800d6b8 <HAL_SD_ConfigWideBusOperation+0x1d0>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800d58a:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 800d58e:	f04f 0100 	mov.w	r1, #0
 800d592:	f7fd fdf5 	bl	800b180 <HAL_RCCEx_GetPeriphCLKFreq>
 800d596:	61f8      	str	r0, [r7, #28]
    if (sdmmc_clk != 0U)
 800d598:	69fb      	ldr	r3, [r7, #28]
 800d59a:	2b00      	cmp	r3, #0
 800d59c:	f000 8083 	beq.w	800d6a6 <HAL_SD_ConfigWideBusOperation+0x1be>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 800d5a0:	687b      	ldr	r3, [r7, #4]
 800d5a2:	685b      	ldr	r3, [r3, #4]
 800d5a4:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800d5a6:	687b      	ldr	r3, [r7, #4]
 800d5a8:	689b      	ldr	r3, [r3, #8]
 800d5aa:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 800d5ac:	683b      	ldr	r3, [r7, #0]
 800d5ae:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800d5b0:	687b      	ldr	r3, [r7, #4]
 800d5b2:	691b      	ldr	r3, [r3, #16]
 800d5b4:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 800d5b6:	687b      	ldr	r3, [r7, #4]
 800d5b8:	695a      	ldr	r2, [r3, #20]
 800d5ba:	69fb      	ldr	r3, [r7, #28]
 800d5bc:	4950      	ldr	r1, [pc, #320]	@ (800d700 <HAL_SD_ConfigWideBusOperation+0x218>)
 800d5be:	fba1 1303 	umull	r1, r3, r1, r3
 800d5c2:	0e1b      	lsrs	r3, r3, #24
 800d5c4:	429a      	cmp	r2, r3
 800d5c6:	d303      	bcc.n	800d5d0 <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 800d5c8:	687b      	ldr	r3, [r7, #4]
 800d5ca:	695b      	ldr	r3, [r3, #20]
 800d5cc:	61bb      	str	r3, [r7, #24]
 800d5ce:	e05a      	b.n	800d686 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 800d5d0:	687b      	ldr	r3, [r7, #4]
 800d5d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d5d4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d5d8:	d103      	bne.n	800d5e2 <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	695b      	ldr	r3, [r3, #20]
 800d5de:	61bb      	str	r3, [r7, #24]
 800d5e0:	e051      	b.n	800d686 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 800d5e2:	687b      	ldr	r3, [r7, #4]
 800d5e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d5e6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d5ea:	d126      	bne.n	800d63a <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800d5ec:	687b      	ldr	r3, [r7, #4]
 800d5ee:	695b      	ldr	r3, [r3, #20]
 800d5f0:	2b00      	cmp	r3, #0
 800d5f2:	d10e      	bne.n	800d612 <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 800d5f4:	69fb      	ldr	r3, [r7, #28]
 800d5f6:	4a43      	ldr	r2, [pc, #268]	@ (800d704 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800d5f8:	4293      	cmp	r3, r2
 800d5fa:	d906      	bls.n	800d60a <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800d5fc:	69fb      	ldr	r3, [r7, #28]
 800d5fe:	4a40      	ldr	r2, [pc, #256]	@ (800d700 <HAL_SD_ConfigWideBusOperation+0x218>)
 800d600:	fba2 2303 	umull	r2, r3, r2, r3
 800d604:	0e5b      	lsrs	r3, r3, #25
 800d606:	61bb      	str	r3, [r7, #24]
 800d608:	e03d      	b.n	800d686 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800d60a:	687b      	ldr	r3, [r7, #4]
 800d60c:	695b      	ldr	r3, [r3, #20]
 800d60e:	61bb      	str	r3, [r7, #24]
 800d610:	e039      	b.n	800d686 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 800d612:	687b      	ldr	r3, [r7, #4]
 800d614:	695b      	ldr	r3, [r3, #20]
 800d616:	005b      	lsls	r3, r3, #1
 800d618:	69fa      	ldr	r2, [r7, #28]
 800d61a:	fbb2 f3f3 	udiv	r3, r2, r3
 800d61e:	4a39      	ldr	r2, [pc, #228]	@ (800d704 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800d620:	4293      	cmp	r3, r2
 800d622:	d906      	bls.n	800d632 <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800d624:	69fb      	ldr	r3, [r7, #28]
 800d626:	4a36      	ldr	r2, [pc, #216]	@ (800d700 <HAL_SD_ConfigWideBusOperation+0x218>)
 800d628:	fba2 2303 	umull	r2, r3, r2, r3
 800d62c:	0e5b      	lsrs	r3, r3, #25
 800d62e:	61bb      	str	r3, [r7, #24]
 800d630:	e029      	b.n	800d686 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800d632:	687b      	ldr	r3, [r7, #4]
 800d634:	695b      	ldr	r3, [r3, #20]
 800d636:	61bb      	str	r3, [r7, #24]
 800d638:	e025      	b.n	800d686 <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800d63a:	687b      	ldr	r3, [r7, #4]
 800d63c:	695b      	ldr	r3, [r3, #20]
 800d63e:	2b00      	cmp	r3, #0
 800d640:	d10e      	bne.n	800d660 <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 800d642:	69fb      	ldr	r3, [r7, #28]
 800d644:	4a30      	ldr	r2, [pc, #192]	@ (800d708 <HAL_SD_ConfigWideBusOperation+0x220>)
 800d646:	4293      	cmp	r3, r2
 800d648:	d906      	bls.n	800d658 <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800d64a:	69fb      	ldr	r3, [r7, #28]
 800d64c:	4a2c      	ldr	r2, [pc, #176]	@ (800d700 <HAL_SD_ConfigWideBusOperation+0x218>)
 800d64e:	fba2 2303 	umull	r2, r3, r2, r3
 800d652:	0e1b      	lsrs	r3, r3, #24
 800d654:	61bb      	str	r3, [r7, #24]
 800d656:	e016      	b.n	800d686 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800d658:	687b      	ldr	r3, [r7, #4]
 800d65a:	695b      	ldr	r3, [r3, #20]
 800d65c:	61bb      	str	r3, [r7, #24]
 800d65e:	e012      	b.n	800d686 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 800d660:	687b      	ldr	r3, [r7, #4]
 800d662:	695b      	ldr	r3, [r3, #20]
 800d664:	005b      	lsls	r3, r3, #1
 800d666:	69fa      	ldr	r2, [r7, #28]
 800d668:	fbb2 f3f3 	udiv	r3, r2, r3
 800d66c:	4a26      	ldr	r2, [pc, #152]	@ (800d708 <HAL_SD_ConfigWideBusOperation+0x220>)
 800d66e:	4293      	cmp	r3, r2
 800d670:	d906      	bls.n	800d680 <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800d672:	69fb      	ldr	r3, [r7, #28]
 800d674:	4a22      	ldr	r2, [pc, #136]	@ (800d700 <HAL_SD_ConfigWideBusOperation+0x218>)
 800d676:	fba2 2303 	umull	r2, r3, r2, r3
 800d67a:	0e1b      	lsrs	r3, r3, #24
 800d67c:	61bb      	str	r3, [r7, #24]
 800d67e:	e002      	b.n	800d686 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800d680:	687b      	ldr	r3, [r7, #4]
 800d682:	695b      	ldr	r3, [r3, #20]
 800d684:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 800d686:	687b      	ldr	r3, [r7, #4]
 800d688:	681c      	ldr	r4, [r3, #0]
 800d68a:	466a      	mov	r2, sp
 800d68c:	f107 0314 	add.w	r3, r7, #20
 800d690:	e893 0003 	ldmia.w	r3, {r0, r1}
 800d694:	e882 0003 	stmia.w	r2, {r0, r1}
 800d698:	f107 0308 	add.w	r3, r7, #8
 800d69c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800d69e:	4620      	mov	r0, r4
 800d6a0:	f002 fa32 	bl	800fb08 <SDMMC_Init>
 800d6a4:	e008      	b.n	800d6b8 <HAL_SD_ConfigWideBusOperation+0x1d0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 800d6a6:	687b      	ldr	r3, [r7, #4]
 800d6a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d6aa:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800d6ae:	687b      	ldr	r3, [r7, #4]
 800d6b0:	635a      	str	r2, [r3, #52]	@ 0x34
      status = HAL_ERROR;
 800d6b2:	2301      	movs	r3, #1
 800d6b4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	681b      	ldr	r3, [r3, #0]
 800d6bc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800d6c0:	4618      	mov	r0, r3
 800d6c2:	f002 faff 	bl	800fcc4 <SDMMC_CmdBlockLength>
 800d6c6:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800d6c8:	6a3b      	ldr	r3, [r7, #32]
 800d6ca:	2b00      	cmp	r3, #0
 800d6cc:	d00c      	beq.n	800d6e8 <HAL_SD_ConfigWideBusOperation+0x200>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d6ce:	687b      	ldr	r3, [r7, #4]
 800d6d0:	681b      	ldr	r3, [r3, #0]
 800d6d2:	4a0a      	ldr	r2, [pc, #40]	@ (800d6fc <HAL_SD_ConfigWideBusOperation+0x214>)
 800d6d4:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800d6d6:	687b      	ldr	r3, [r7, #4]
 800d6d8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d6da:	6a3b      	ldr	r3, [r7, #32]
 800d6dc:	431a      	orrs	r2, r3
 800d6de:	687b      	ldr	r3, [r7, #4]
 800d6e0:	635a      	str	r2, [r3, #52]	@ 0x34
    status = HAL_ERROR;
 800d6e2:	2301      	movs	r3, #1
 800d6e4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800d6e8:	687b      	ldr	r3, [r7, #4]
 800d6ea:	2201      	movs	r2, #1
 800d6ec:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return status;
 800d6f0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800d6f4:	4618      	mov	r0, r3
 800d6f6:	372c      	adds	r7, #44	@ 0x2c
 800d6f8:	46bd      	mov	sp, r7
 800d6fa:	bd90      	pop	{r4, r7, pc}
 800d6fc:	1fe00fff 	.word	0x1fe00fff
 800d700:	55e63b89 	.word	0x55e63b89
 800d704:	02faf080 	.word	0x02faf080
 800d708:	017d7840 	.word	0x017d7840

0800d70c <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800d70c:	b580      	push	{r7, lr}
 800d70e:	b086      	sub	sp, #24
 800d710:	af00      	add	r7, sp, #0
 800d712:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800d714:	2300      	movs	r3, #0
 800d716:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800d718:	f107 030c 	add.w	r3, r7, #12
 800d71c:	4619      	mov	r1, r3
 800d71e:	6878      	ldr	r0, [r7, #4]
 800d720:	f000 fa40 	bl	800dba4 <SD_SendStatus>
 800d724:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800d726:	697b      	ldr	r3, [r7, #20]
 800d728:	2b00      	cmp	r3, #0
 800d72a:	d005      	beq.n	800d738 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800d72c:	687b      	ldr	r3, [r7, #4]
 800d72e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d730:	697b      	ldr	r3, [r7, #20]
 800d732:	431a      	orrs	r2, r3
 800d734:	687b      	ldr	r3, [r7, #4]
 800d736:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800d738:	68fb      	ldr	r3, [r7, #12]
 800d73a:	0a5b      	lsrs	r3, r3, #9
 800d73c:	f003 030f 	and.w	r3, r3, #15
 800d740:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800d742:	693b      	ldr	r3, [r7, #16]
}
 800d744:	4618      	mov	r0, r3
 800d746:	3718      	adds	r7, #24
 800d748:	46bd      	mov	sp, r7
 800d74a:	bd80      	pop	{r7, pc}

0800d74c <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800d74c:	b580      	push	{r7, lr}
 800d74e:	b090      	sub	sp, #64	@ 0x40
 800d750:	af00      	add	r7, sp, #0
 800d752:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 800d754:	2300      	movs	r3, #0
 800d756:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 800d758:	f7f8 fb3e 	bl	8005dd8 <HAL_GetTick>
 800d75c:	63f8      	str	r0, [r7, #60]	@ 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 800d75e:	687b      	ldr	r3, [r7, #4]
 800d760:	681b      	ldr	r3, [r3, #0]
 800d762:	4618      	mov	r0, r3
 800d764:	f002 fa29 	bl	800fbba <SDMMC_GetPowerState>
 800d768:	4603      	mov	r3, r0
 800d76a:	2b00      	cmp	r3, #0
 800d76c:	d102      	bne.n	800d774 <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800d76e:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800d772:	e0b5      	b.n	800d8e0 <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800d774:	687b      	ldr	r3, [r7, #4]
 800d776:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d778:	2b03      	cmp	r3, #3
 800d77a:	d02e      	beq.n	800d7da <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800d77c:	687b      	ldr	r3, [r7, #4]
 800d77e:	681b      	ldr	r3, [r3, #0]
 800d780:	4618      	mov	r0, r3
 800d782:	f002 fc74 	bl	801006e <SDMMC_CmdSendCID>
 800d786:	63b8      	str	r0, [r7, #56]	@ 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800d788:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d78a:	2b00      	cmp	r3, #0
 800d78c:	d001      	beq.n	800d792 <SD_InitCard+0x46>
    {
      return errorstate;
 800d78e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d790:	e0a6      	b.n	800d8e0 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800d792:	687b      	ldr	r3, [r7, #4]
 800d794:	681b      	ldr	r3, [r3, #0]
 800d796:	2100      	movs	r1, #0
 800d798:	4618      	mov	r0, r3
 800d79a:	f002 fa54 	bl	800fc46 <SDMMC_GetResponse>
 800d79e:	4602      	mov	r2, r0
 800d7a0:	687b      	ldr	r3, [r7, #4]
 800d7a2:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800d7a4:	687b      	ldr	r3, [r7, #4]
 800d7a6:	681b      	ldr	r3, [r3, #0]
 800d7a8:	2104      	movs	r1, #4
 800d7aa:	4618      	mov	r0, r3
 800d7ac:	f002 fa4b 	bl	800fc46 <SDMMC_GetResponse>
 800d7b0:	4602      	mov	r2, r0
 800d7b2:	687b      	ldr	r3, [r7, #4]
 800d7b4:	671a      	str	r2, [r3, #112]	@ 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800d7b6:	687b      	ldr	r3, [r7, #4]
 800d7b8:	681b      	ldr	r3, [r3, #0]
 800d7ba:	2108      	movs	r1, #8
 800d7bc:	4618      	mov	r0, r3
 800d7be:	f002 fa42 	bl	800fc46 <SDMMC_GetResponse>
 800d7c2:	4602      	mov	r2, r0
 800d7c4:	687b      	ldr	r3, [r7, #4]
 800d7c6:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800d7c8:	687b      	ldr	r3, [r7, #4]
 800d7ca:	681b      	ldr	r3, [r3, #0]
 800d7cc:	210c      	movs	r1, #12
 800d7ce:	4618      	mov	r0, r3
 800d7d0:	f002 fa39 	bl	800fc46 <SDMMC_GetResponse>
 800d7d4:	4602      	mov	r2, r0
 800d7d6:	687b      	ldr	r3, [r7, #4]
 800d7d8:	679a      	str	r2, [r3, #120]	@ 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800d7da:	687b      	ldr	r3, [r7, #4]
 800d7dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d7de:	2b03      	cmp	r3, #3
 800d7e0:	d01d      	beq.n	800d81e <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 800d7e2:	e019      	b.n	800d818 <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800d7e4:	687b      	ldr	r3, [r7, #4]
 800d7e6:	681b      	ldr	r3, [r3, #0]
 800d7e8:	f107 020a 	add.w	r2, r7, #10
 800d7ec:	4611      	mov	r1, r2
 800d7ee:	4618      	mov	r0, r3
 800d7f0:	f002 fc7c 	bl	80100ec <SDMMC_CmdSetRelAdd>
 800d7f4:	63b8      	str	r0, [r7, #56]	@ 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 800d7f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d7f8:	2b00      	cmp	r3, #0
 800d7fa:	d001      	beq.n	800d800 <SD_InitCard+0xb4>
      {
        return errorstate;
 800d7fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d7fe:	e06f      	b.n	800d8e0 <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 800d800:	f7f8 faea 	bl	8005dd8 <HAL_GetTick>
 800d804:	4602      	mov	r2, r0
 800d806:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d808:	1ad3      	subs	r3, r2, r3
 800d80a:	f241 3287 	movw	r2, #4999	@ 0x1387
 800d80e:	4293      	cmp	r3, r2
 800d810:	d902      	bls.n	800d818 <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 800d812:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800d816:	e063      	b.n	800d8e0 <SD_InitCard+0x194>
    while (sd_rca == 0U)
 800d818:	897b      	ldrh	r3, [r7, #10]
 800d81a:	2b00      	cmp	r3, #0
 800d81c:	d0e2      	beq.n	800d7e4 <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 800d81e:	687b      	ldr	r3, [r7, #4]
 800d820:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d822:	2b03      	cmp	r3, #3
 800d824:	d036      	beq.n	800d894 <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800d826:	897b      	ldrh	r3, [r7, #10]
 800d828:	461a      	mov	r2, r3
 800d82a:	687b      	ldr	r3, [r7, #4]
 800d82c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800d82e:	687b      	ldr	r3, [r7, #4]
 800d830:	681a      	ldr	r2, [r3, #0]
 800d832:	687b      	ldr	r3, [r7, #4]
 800d834:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d836:	041b      	lsls	r3, r3, #16
 800d838:	4619      	mov	r1, r3
 800d83a:	4610      	mov	r0, r2
 800d83c:	f002 fc36 	bl	80100ac <SDMMC_CmdSendCSD>
 800d840:	63b8      	str	r0, [r7, #56]	@ 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800d842:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d844:	2b00      	cmp	r3, #0
 800d846:	d001      	beq.n	800d84c <SD_InitCard+0x100>
    {
      return errorstate;
 800d848:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d84a:	e049      	b.n	800d8e0 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800d84c:	687b      	ldr	r3, [r7, #4]
 800d84e:	681b      	ldr	r3, [r3, #0]
 800d850:	2100      	movs	r1, #0
 800d852:	4618      	mov	r0, r3
 800d854:	f002 f9f7 	bl	800fc46 <SDMMC_GetResponse>
 800d858:	4602      	mov	r2, r0
 800d85a:	687b      	ldr	r3, [r7, #4]
 800d85c:	65da      	str	r2, [r3, #92]	@ 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800d85e:	687b      	ldr	r3, [r7, #4]
 800d860:	681b      	ldr	r3, [r3, #0]
 800d862:	2104      	movs	r1, #4
 800d864:	4618      	mov	r0, r3
 800d866:	f002 f9ee 	bl	800fc46 <SDMMC_GetResponse>
 800d86a:	4602      	mov	r2, r0
 800d86c:	687b      	ldr	r3, [r7, #4]
 800d86e:	661a      	str	r2, [r3, #96]	@ 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800d870:	687b      	ldr	r3, [r7, #4]
 800d872:	681b      	ldr	r3, [r3, #0]
 800d874:	2108      	movs	r1, #8
 800d876:	4618      	mov	r0, r3
 800d878:	f002 f9e5 	bl	800fc46 <SDMMC_GetResponse>
 800d87c:	4602      	mov	r2, r0
 800d87e:	687b      	ldr	r3, [r7, #4]
 800d880:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800d882:	687b      	ldr	r3, [r7, #4]
 800d884:	681b      	ldr	r3, [r3, #0]
 800d886:	210c      	movs	r1, #12
 800d888:	4618      	mov	r0, r3
 800d88a:	f002 f9dc 	bl	800fc46 <SDMMC_GetResponse>
 800d88e:	4602      	mov	r2, r0
 800d890:	687b      	ldr	r3, [r7, #4]
 800d892:	669a      	str	r2, [r3, #104]	@ 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800d894:	687b      	ldr	r3, [r7, #4]
 800d896:	681b      	ldr	r3, [r3, #0]
 800d898:	2104      	movs	r1, #4
 800d89a:	4618      	mov	r0, r3
 800d89c:	f002 f9d3 	bl	800fc46 <SDMMC_GetResponse>
 800d8a0:	4603      	mov	r3, r0
 800d8a2:	0d1a      	lsrs	r2, r3, #20
 800d8a4:	687b      	ldr	r3, [r7, #4]
 800d8a6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800d8a8:	f107 030c 	add.w	r3, r7, #12
 800d8ac:	4619      	mov	r1, r3
 800d8ae:	6878      	ldr	r0, [r7, #4]
 800d8b0:	f7ff fb8c 	bl	800cfcc <HAL_SD_GetCardCSD>
 800d8b4:	4603      	mov	r3, r0
 800d8b6:	2b00      	cmp	r3, #0
 800d8b8:	d002      	beq.n	800d8c0 <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d8ba:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800d8be:	e00f      	b.n	800d8e0 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800d8c0:	687b      	ldr	r3, [r7, #4]
 800d8c2:	681a      	ldr	r2, [r3, #0]
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d8c8:	041b      	lsls	r3, r3, #16
 800d8ca:	4619      	mov	r1, r3
 800d8cc:	4610      	mov	r0, r2
 800d8ce:	f002 fae5 	bl	800fe9c <SDMMC_CmdSelDesel>
 800d8d2:	63b8      	str	r0, [r7, #56]	@ 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 800d8d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d8d6:	2b00      	cmp	r3, #0
 800d8d8:	d001      	beq.n	800d8de <SD_InitCard+0x192>
  {
    return errorstate;
 800d8da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d8dc:	e000      	b.n	800d8e0 <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800d8de:	2300      	movs	r3, #0
}
 800d8e0:	4618      	mov	r0, r3
 800d8e2:	3740      	adds	r7, #64	@ 0x40
 800d8e4:	46bd      	mov	sp, r7
 800d8e6:	bd80      	pop	{r7, pc}

0800d8e8 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800d8e8:	b580      	push	{r7, lr}
 800d8ea:	b086      	sub	sp, #24
 800d8ec:	af00      	add	r7, sp, #0
 800d8ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800d8f0:	2300      	movs	r3, #0
 800d8f2:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 800d8f4:	2300      	movs	r3, #0
 800d8f6:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 800d8f8:	2300      	movs	r3, #0
 800d8fa:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800d8fc:	687b      	ldr	r3, [r7, #4]
 800d8fe:	681b      	ldr	r3, [r3, #0]
 800d900:	4618      	mov	r0, r3
 800d902:	f002 faee 	bl	800fee2 <SDMMC_CmdGoIdleState>
 800d906:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800d908:	68fb      	ldr	r3, [r7, #12]
 800d90a:	2b00      	cmp	r3, #0
 800d90c:	d001      	beq.n	800d912 <SD_PowerON+0x2a>
  {
    return errorstate;
 800d90e:	68fb      	ldr	r3, [r7, #12]
 800d910:	e072      	b.n	800d9f8 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800d912:	687b      	ldr	r3, [r7, #4]
 800d914:	681b      	ldr	r3, [r3, #0]
 800d916:	4618      	mov	r0, r3
 800d918:	f002 fb01 	bl	800ff1e <SDMMC_CmdOperCond>
 800d91c:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 800d91e:	68fb      	ldr	r3, [r7, #12]
 800d920:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800d924:	d10d      	bne.n	800d942 <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800d926:	687b      	ldr	r3, [r7, #4]
 800d928:	2200      	movs	r2, #0
 800d92a:	63da      	str	r2, [r3, #60]	@ 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800d92c:	687b      	ldr	r3, [r7, #4]
 800d92e:	681b      	ldr	r3, [r3, #0]
 800d930:	4618      	mov	r0, r3
 800d932:	f002 fad6 	bl	800fee2 <SDMMC_CmdGoIdleState>
 800d936:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800d938:	68fb      	ldr	r3, [r7, #12]
 800d93a:	2b00      	cmp	r3, #0
 800d93c:	d004      	beq.n	800d948 <SD_PowerON+0x60>
    {
      return errorstate;
 800d93e:	68fb      	ldr	r3, [r7, #12]
 800d940:	e05a      	b.n	800d9f8 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800d942:	687b      	ldr	r3, [r7, #4]
 800d944:	2201      	movs	r2, #1
 800d946:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 800d948:	687b      	ldr	r3, [r7, #4]
 800d94a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d94c:	2b01      	cmp	r3, #1
 800d94e:	d137      	bne.n	800d9c0 <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800d950:	687b      	ldr	r3, [r7, #4]
 800d952:	681b      	ldr	r3, [r3, #0]
 800d954:	2100      	movs	r1, #0
 800d956:	4618      	mov	r0, r3
 800d958:	f002 fb01 	bl	800ff5e <SDMMC_CmdAppCommand>
 800d95c:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800d95e:	68fb      	ldr	r3, [r7, #12]
 800d960:	2b00      	cmp	r3, #0
 800d962:	d02d      	beq.n	800d9c0 <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d964:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800d968:	e046      	b.n	800d9f8 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800d96a:	687b      	ldr	r3, [r7, #4]
 800d96c:	681b      	ldr	r3, [r3, #0]
 800d96e:	2100      	movs	r1, #0
 800d970:	4618      	mov	r0, r3
 800d972:	f002 faf4 	bl	800ff5e <SDMMC_CmdAppCommand>
 800d976:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800d978:	68fb      	ldr	r3, [r7, #12]
 800d97a:	2b00      	cmp	r3, #0
 800d97c:	d001      	beq.n	800d982 <SD_PowerON+0x9a>
    {
      return errorstate;
 800d97e:	68fb      	ldr	r3, [r7, #12]
 800d980:	e03a      	b.n	800d9f8 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 800d982:	687b      	ldr	r3, [r7, #4]
 800d984:	681b      	ldr	r3, [r3, #0]
 800d986:	491e      	ldr	r1, [pc, #120]	@ (800da00 <SD_PowerON+0x118>)
 800d988:	4618      	mov	r0, r3
 800d98a:	f002 fb0b 	bl	800ffa4 <SDMMC_CmdAppOperCommand>
 800d98e:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 800d990:	68fb      	ldr	r3, [r7, #12]
 800d992:	2b00      	cmp	r3, #0
 800d994:	d002      	beq.n	800d99c <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d996:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800d99a:	e02d      	b.n	800d9f8 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800d99c:	687b      	ldr	r3, [r7, #4]
 800d99e:	681b      	ldr	r3, [r3, #0]
 800d9a0:	2100      	movs	r1, #0
 800d9a2:	4618      	mov	r0, r3
 800d9a4:	f002 f94f 	bl	800fc46 <SDMMC_GetResponse>
 800d9a8:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800d9aa:	697b      	ldr	r3, [r7, #20]
 800d9ac:	0fdb      	lsrs	r3, r3, #31
 800d9ae:	2b01      	cmp	r3, #1
 800d9b0:	d101      	bne.n	800d9b6 <SD_PowerON+0xce>
 800d9b2:	2301      	movs	r3, #1
 800d9b4:	e000      	b.n	800d9b8 <SD_PowerON+0xd0>
 800d9b6:	2300      	movs	r3, #0
 800d9b8:	613b      	str	r3, [r7, #16]

    count++;
 800d9ba:	68bb      	ldr	r3, [r7, #8]
 800d9bc:	3301      	adds	r3, #1
 800d9be:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800d9c0:	68bb      	ldr	r3, [r7, #8]
 800d9c2:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800d9c6:	4293      	cmp	r3, r2
 800d9c8:	d802      	bhi.n	800d9d0 <SD_PowerON+0xe8>
 800d9ca:	693b      	ldr	r3, [r7, #16]
 800d9cc:	2b00      	cmp	r3, #0
 800d9ce:	d0cc      	beq.n	800d96a <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 800d9d0:	68bb      	ldr	r3, [r7, #8]
 800d9d2:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800d9d6:	4293      	cmp	r3, r2
 800d9d8:	d902      	bls.n	800d9e0 <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800d9da:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800d9de:	e00b      	b.n	800d9f8 <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 800d9e0:	687b      	ldr	r3, [r7, #4]
 800d9e2:	2200      	movs	r2, #0
 800d9e4:	639a      	str	r2, [r3, #56]	@ 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 800d9e6:	697b      	ldr	r3, [r7, #20]
 800d9e8:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800d9ec:	2b00      	cmp	r3, #0
 800d9ee:	d002      	beq.n	800d9f6 <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800d9f0:	687b      	ldr	r3, [r7, #4]
 800d9f2:	2201      	movs	r2, #1
 800d9f4:	639a      	str	r2, [r3, #56]	@ 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 800d9f6:	2300      	movs	r3, #0
}
 800d9f8:	4618      	mov	r0, r3
 800d9fa:	3718      	adds	r7, #24
 800d9fc:	46bd      	mov	sp, r7
 800d9fe:	bd80      	pop	{r7, pc}
 800da00:	c1100000 	.word	0xc1100000

0800da04 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 800da04:	b580      	push	{r7, lr}
 800da06:	b08c      	sub	sp, #48	@ 0x30
 800da08:	af00      	add	r7, sp, #0
 800da0a:	6078      	str	r0, [r7, #4]
 800da0c:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800da0e:	f7f8 f9e3 	bl	8005dd8 <HAL_GetTick>
 800da12:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 800da14:	683b      	ldr	r3, [r7, #0]
 800da16:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800da18:	687b      	ldr	r3, [r7, #4]
 800da1a:	681b      	ldr	r3, [r3, #0]
 800da1c:	2100      	movs	r1, #0
 800da1e:	4618      	mov	r0, r3
 800da20:	f002 f911 	bl	800fc46 <SDMMC_GetResponse>
 800da24:	4603      	mov	r3, r0
 800da26:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800da2a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800da2e:	d102      	bne.n	800da36 <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800da30:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800da34:	e0b0      	b.n	800db98 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 800da36:	687b      	ldr	r3, [r7, #4]
 800da38:	681b      	ldr	r3, [r3, #0]
 800da3a:	2140      	movs	r1, #64	@ 0x40
 800da3c:	4618      	mov	r0, r3
 800da3e:	f002 f941 	bl	800fcc4 <SDMMC_CmdBlockLength>
 800da42:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800da44:	6a3b      	ldr	r3, [r7, #32]
 800da46:	2b00      	cmp	r3, #0
 800da48:	d005      	beq.n	800da56 <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800da4a:	687b      	ldr	r3, [r7, #4]
 800da4c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800da4e:	687b      	ldr	r3, [r7, #4]
 800da50:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 800da52:	6a3b      	ldr	r3, [r7, #32]
 800da54:	e0a0      	b.n	800db98 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800da56:	687b      	ldr	r3, [r7, #4]
 800da58:	681a      	ldr	r2, [r3, #0]
 800da5a:	687b      	ldr	r3, [r7, #4]
 800da5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800da5e:	041b      	lsls	r3, r3, #16
 800da60:	4619      	mov	r1, r3
 800da62:	4610      	mov	r0, r2
 800da64:	f002 fa7b 	bl	800ff5e <SDMMC_CmdAppCommand>
 800da68:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800da6a:	6a3b      	ldr	r3, [r7, #32]
 800da6c:	2b00      	cmp	r3, #0
 800da6e:	d005      	beq.n	800da7c <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800da70:	687b      	ldr	r3, [r7, #4]
 800da72:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800da74:	687b      	ldr	r3, [r7, #4]
 800da76:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 800da78:	6a3b      	ldr	r3, [r7, #32]
 800da7a:	e08d      	b.n	800db98 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800da7c:	f04f 33ff 	mov.w	r3, #4294967295
 800da80:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 800da82:	2340      	movs	r3, #64	@ 0x40
 800da84:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 800da86:	2360      	movs	r3, #96	@ 0x60
 800da88:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800da8a:	2302      	movs	r3, #2
 800da8c:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800da8e:	2300      	movs	r3, #0
 800da90:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800da92:	2301      	movs	r3, #1
 800da94:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800da96:	687b      	ldr	r3, [r7, #4]
 800da98:	681b      	ldr	r3, [r3, #0]
 800da9a:	f107 0208 	add.w	r2, r7, #8
 800da9e:	4611      	mov	r1, r2
 800daa0:	4618      	mov	r0, r3
 800daa2:	f002 f8e3 	bl	800fc6c <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 800daa6:	687b      	ldr	r3, [r7, #4]
 800daa8:	681b      	ldr	r3, [r3, #0]
 800daaa:	4618      	mov	r0, r3
 800daac:	f002 fb63 	bl	8010176 <SDMMC_CmdStatusRegister>
 800dab0:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800dab2:	6a3b      	ldr	r3, [r7, #32]
 800dab4:	2b00      	cmp	r3, #0
 800dab6:	d02b      	beq.n	800db10 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800dab8:	687b      	ldr	r3, [r7, #4]
 800daba:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800dabc:	687b      	ldr	r3, [r7, #4]
 800dabe:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 800dac0:	6a3b      	ldr	r3, [r7, #32]
 800dac2:	e069      	b.n	800db98 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 800dac4:	687b      	ldr	r3, [r7, #4]
 800dac6:	681b      	ldr	r3, [r3, #0]
 800dac8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800daca:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800dace:	2b00      	cmp	r3, #0
 800dad0:	d013      	beq.n	800dafa <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 800dad2:	2300      	movs	r3, #0
 800dad4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800dad6:	e00d      	b.n	800daf4 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 800dad8:	687b      	ldr	r3, [r7, #4]
 800dada:	681b      	ldr	r3, [r3, #0]
 800dadc:	4618      	mov	r0, r3
 800dade:	f002 f83d 	bl	800fb5c <SDMMC_ReadFIFO>
 800dae2:	4602      	mov	r2, r0
 800dae4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dae6:	601a      	str	r2, [r3, #0]
        pData++;
 800dae8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800daea:	3304      	adds	r3, #4
 800daec:	62bb      	str	r3, [r7, #40]	@ 0x28
      for (count = 0U; count < 8U; count++)
 800daee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800daf0:	3301      	adds	r3, #1
 800daf2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800daf4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800daf6:	2b07      	cmp	r3, #7
 800daf8:	d9ee      	bls.n	800dad8 <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800dafa:	f7f8 f96d 	bl	8005dd8 <HAL_GetTick>
 800dafe:	4602      	mov	r2, r0
 800db00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800db02:	1ad3      	subs	r3, r2, r3
 800db04:	f1b3 3fff 	cmp.w	r3, #4294967295
 800db08:	d102      	bne.n	800db10 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800db0a:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800db0e:	e043      	b.n	800db98 <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800db10:	687b      	ldr	r3, [r7, #4]
 800db12:	681b      	ldr	r3, [r3, #0]
 800db14:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800db16:	f403 7395 	and.w	r3, r3, #298	@ 0x12a
 800db1a:	2b00      	cmp	r3, #0
 800db1c:	d0d2      	beq.n	800dac4 <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800db1e:	687b      	ldr	r3, [r7, #4]
 800db20:	681b      	ldr	r3, [r3, #0]
 800db22:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800db24:	f003 0308 	and.w	r3, r3, #8
 800db28:	2b00      	cmp	r3, #0
 800db2a:	d001      	beq.n	800db30 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 800db2c:	2308      	movs	r3, #8
 800db2e:	e033      	b.n	800db98 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800db30:	687b      	ldr	r3, [r7, #4]
 800db32:	681b      	ldr	r3, [r3, #0]
 800db34:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800db36:	f003 0302 	and.w	r3, r3, #2
 800db3a:	2b00      	cmp	r3, #0
 800db3c:	d001      	beq.n	800db42 <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800db3e:	2302      	movs	r3, #2
 800db40:	e02a      	b.n	800db98 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800db42:	687b      	ldr	r3, [r7, #4]
 800db44:	681b      	ldr	r3, [r3, #0]
 800db46:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800db48:	f003 0320 	and.w	r3, r3, #32
 800db4c:	2b00      	cmp	r3, #0
 800db4e:	d017      	beq.n	800db80 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 800db50:	2320      	movs	r3, #32
 800db52:	e021      	b.n	800db98 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 800db54:	687b      	ldr	r3, [r7, #4]
 800db56:	681b      	ldr	r3, [r3, #0]
 800db58:	4618      	mov	r0, r3
 800db5a:	f001 ffff 	bl	800fb5c <SDMMC_ReadFIFO>
 800db5e:	4602      	mov	r2, r0
 800db60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800db62:	601a      	str	r2, [r3, #0]
    pData++;
 800db64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800db66:	3304      	adds	r3, #4
 800db68:	62bb      	str	r3, [r7, #40]	@ 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800db6a:	f7f8 f935 	bl	8005dd8 <HAL_GetTick>
 800db6e:	4602      	mov	r2, r0
 800db70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800db72:	1ad3      	subs	r3, r2, r3
 800db74:	f1b3 3fff 	cmp.w	r3, #4294967295
 800db78:	d102      	bne.n	800db80 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800db7a:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800db7e:	e00b      	b.n	800db98 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	681b      	ldr	r3, [r3, #0]
 800db84:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800db86:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800db8a:	2b00      	cmp	r3, #0
 800db8c:	d1e2      	bne.n	800db54 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800db8e:	687b      	ldr	r3, [r7, #4]
 800db90:	681b      	ldr	r3, [r3, #0]
 800db92:	4a03      	ldr	r2, [pc, #12]	@ (800dba0 <SD_SendSDStatus+0x19c>)
 800db94:	639a      	str	r2, [r3, #56]	@ 0x38

  return HAL_SD_ERROR_NONE;
 800db96:	2300      	movs	r3, #0
}
 800db98:	4618      	mov	r0, r3
 800db9a:	3730      	adds	r7, #48	@ 0x30
 800db9c:	46bd      	mov	sp, r7
 800db9e:	bd80      	pop	{r7, pc}
 800dba0:	18000f3a 	.word	0x18000f3a

0800dba4 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800dba4:	b580      	push	{r7, lr}
 800dba6:	b084      	sub	sp, #16
 800dba8:	af00      	add	r7, sp, #0
 800dbaa:	6078      	str	r0, [r7, #4]
 800dbac:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 800dbae:	683b      	ldr	r3, [r7, #0]
 800dbb0:	2b00      	cmp	r3, #0
 800dbb2:	d102      	bne.n	800dbba <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800dbb4:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800dbb8:	e018      	b.n	800dbec <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800dbba:	687b      	ldr	r3, [r7, #4]
 800dbbc:	681a      	ldr	r2, [r3, #0]
 800dbbe:	687b      	ldr	r3, [r7, #4]
 800dbc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800dbc2:	041b      	lsls	r3, r3, #16
 800dbc4:	4619      	mov	r1, r3
 800dbc6:	4610      	mov	r0, r2
 800dbc8:	f002 fab2 	bl	8010130 <SDMMC_CmdSendStatus>
 800dbcc:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800dbce:	68fb      	ldr	r3, [r7, #12]
 800dbd0:	2b00      	cmp	r3, #0
 800dbd2:	d001      	beq.n	800dbd8 <SD_SendStatus+0x34>
  {
    return errorstate;
 800dbd4:	68fb      	ldr	r3, [r7, #12]
 800dbd6:	e009      	b.n	800dbec <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800dbd8:	687b      	ldr	r3, [r7, #4]
 800dbda:	681b      	ldr	r3, [r3, #0]
 800dbdc:	2100      	movs	r1, #0
 800dbde:	4618      	mov	r0, r3
 800dbe0:	f002 f831 	bl	800fc46 <SDMMC_GetResponse>
 800dbe4:	4602      	mov	r2, r0
 800dbe6:	683b      	ldr	r3, [r7, #0]
 800dbe8:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800dbea:	2300      	movs	r3, #0
}
 800dbec:	4618      	mov	r0, r3
 800dbee:	3710      	adds	r7, #16
 800dbf0:	46bd      	mov	sp, r7
 800dbf2:	bd80      	pop	{r7, pc}

0800dbf4 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800dbf4:	b580      	push	{r7, lr}
 800dbf6:	b086      	sub	sp, #24
 800dbf8:	af00      	add	r7, sp, #0
 800dbfa:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800dbfc:	2300      	movs	r3, #0
 800dbfe:	60fb      	str	r3, [r7, #12]
 800dc00:	2300      	movs	r3, #0
 800dc02:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800dc04:	687b      	ldr	r3, [r7, #4]
 800dc06:	681b      	ldr	r3, [r3, #0]
 800dc08:	2100      	movs	r1, #0
 800dc0a:	4618      	mov	r0, r3
 800dc0c:	f002 f81b 	bl	800fc46 <SDMMC_GetResponse>
 800dc10:	4603      	mov	r3, r0
 800dc12:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800dc16:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800dc1a:	d102      	bne.n	800dc22 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800dc1c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800dc20:	e02f      	b.n	800dc82 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800dc22:	f107 030c 	add.w	r3, r7, #12
 800dc26:	4619      	mov	r1, r3
 800dc28:	6878      	ldr	r0, [r7, #4]
 800dc2a:	f000 f879 	bl	800dd20 <SD_FindSCR>
 800dc2e:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800dc30:	697b      	ldr	r3, [r7, #20]
 800dc32:	2b00      	cmp	r3, #0
 800dc34:	d001      	beq.n	800dc3a <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800dc36:	697b      	ldr	r3, [r7, #20]
 800dc38:	e023      	b.n	800dc82 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800dc3a:	693b      	ldr	r3, [r7, #16]
 800dc3c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800dc40:	2b00      	cmp	r3, #0
 800dc42:	d01c      	beq.n	800dc7e <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800dc44:	687b      	ldr	r3, [r7, #4]
 800dc46:	681a      	ldr	r2, [r3, #0]
 800dc48:	687b      	ldr	r3, [r7, #4]
 800dc4a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800dc4c:	041b      	lsls	r3, r3, #16
 800dc4e:	4619      	mov	r1, r3
 800dc50:	4610      	mov	r0, r2
 800dc52:	f002 f984 	bl	800ff5e <SDMMC_CmdAppCommand>
 800dc56:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800dc58:	697b      	ldr	r3, [r7, #20]
 800dc5a:	2b00      	cmp	r3, #0
 800dc5c:	d001      	beq.n	800dc62 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800dc5e:	697b      	ldr	r3, [r7, #20]
 800dc60:	e00f      	b.n	800dc82 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800dc62:	687b      	ldr	r3, [r7, #4]
 800dc64:	681b      	ldr	r3, [r3, #0]
 800dc66:	2102      	movs	r1, #2
 800dc68:	4618      	mov	r0, r3
 800dc6a:	f002 f9bb 	bl	800ffe4 <SDMMC_CmdBusWidth>
 800dc6e:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800dc70:	697b      	ldr	r3, [r7, #20]
 800dc72:	2b00      	cmp	r3, #0
 800dc74:	d001      	beq.n	800dc7a <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800dc76:	697b      	ldr	r3, [r7, #20]
 800dc78:	e003      	b.n	800dc82 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800dc7a:	2300      	movs	r3, #0
 800dc7c:	e001      	b.n	800dc82 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800dc7e:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 800dc82:	4618      	mov	r0, r3
 800dc84:	3718      	adds	r7, #24
 800dc86:	46bd      	mov	sp, r7
 800dc88:	bd80      	pop	{r7, pc}

0800dc8a <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800dc8a:	b580      	push	{r7, lr}
 800dc8c:	b086      	sub	sp, #24
 800dc8e:	af00      	add	r7, sp, #0
 800dc90:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800dc92:	2300      	movs	r3, #0
 800dc94:	60fb      	str	r3, [r7, #12]
 800dc96:	2300      	movs	r3, #0
 800dc98:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800dc9a:	687b      	ldr	r3, [r7, #4]
 800dc9c:	681b      	ldr	r3, [r3, #0]
 800dc9e:	2100      	movs	r1, #0
 800dca0:	4618      	mov	r0, r3
 800dca2:	f001 ffd0 	bl	800fc46 <SDMMC_GetResponse>
 800dca6:	4603      	mov	r3, r0
 800dca8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800dcac:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800dcb0:	d102      	bne.n	800dcb8 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800dcb2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800dcb6:	e02f      	b.n	800dd18 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800dcb8:	f107 030c 	add.w	r3, r7, #12
 800dcbc:	4619      	mov	r1, r3
 800dcbe:	6878      	ldr	r0, [r7, #4]
 800dcc0:	f000 f82e 	bl	800dd20 <SD_FindSCR>
 800dcc4:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800dcc6:	697b      	ldr	r3, [r7, #20]
 800dcc8:	2b00      	cmp	r3, #0
 800dcca:	d001      	beq.n	800dcd0 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800dccc:	697b      	ldr	r3, [r7, #20]
 800dcce:	e023      	b.n	800dd18 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800dcd0:	693b      	ldr	r3, [r7, #16]
 800dcd2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800dcd6:	2b00      	cmp	r3, #0
 800dcd8:	d01c      	beq.n	800dd14 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800dcda:	687b      	ldr	r3, [r7, #4]
 800dcdc:	681a      	ldr	r2, [r3, #0]
 800dcde:	687b      	ldr	r3, [r7, #4]
 800dce0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800dce2:	041b      	lsls	r3, r3, #16
 800dce4:	4619      	mov	r1, r3
 800dce6:	4610      	mov	r0, r2
 800dce8:	f002 f939 	bl	800ff5e <SDMMC_CmdAppCommand>
 800dcec:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800dcee:	697b      	ldr	r3, [r7, #20]
 800dcf0:	2b00      	cmp	r3, #0
 800dcf2:	d001      	beq.n	800dcf8 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800dcf4:	697b      	ldr	r3, [r7, #20]
 800dcf6:	e00f      	b.n	800dd18 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800dcf8:	687b      	ldr	r3, [r7, #4]
 800dcfa:	681b      	ldr	r3, [r3, #0]
 800dcfc:	2100      	movs	r1, #0
 800dcfe:	4618      	mov	r0, r3
 800dd00:	f002 f970 	bl	800ffe4 <SDMMC_CmdBusWidth>
 800dd04:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800dd06:	697b      	ldr	r3, [r7, #20]
 800dd08:	2b00      	cmp	r3, #0
 800dd0a:	d001      	beq.n	800dd10 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800dd0c:	697b      	ldr	r3, [r7, #20]
 800dd0e:	e003      	b.n	800dd18 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800dd10:	2300      	movs	r3, #0
 800dd12:	e001      	b.n	800dd18 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800dd14:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 800dd18:	4618      	mov	r0, r3
 800dd1a:	3718      	adds	r7, #24
 800dd1c:	46bd      	mov	sp, r7
 800dd1e:	bd80      	pop	{r7, pc}

0800dd20 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800dd20:	b580      	push	{r7, lr}
 800dd22:	b08e      	sub	sp, #56	@ 0x38
 800dd24:	af00      	add	r7, sp, #0
 800dd26:	6078      	str	r0, [r7, #4]
 800dd28:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800dd2a:	f7f8 f855 	bl	8005dd8 <HAL_GetTick>
 800dd2e:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t index = 0U;
 800dd30:	2300      	movs	r3, #0
 800dd32:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 800dd34:	2300      	movs	r3, #0
 800dd36:	60bb      	str	r3, [r7, #8]
 800dd38:	2300      	movs	r3, #0
 800dd3a:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800dd3c:	683b      	ldr	r3, [r7, #0]
 800dd3e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800dd40:	687b      	ldr	r3, [r7, #4]
 800dd42:	681b      	ldr	r3, [r3, #0]
 800dd44:	2108      	movs	r1, #8
 800dd46:	4618      	mov	r0, r3
 800dd48:	f001 ffbc 	bl	800fcc4 <SDMMC_CmdBlockLength>
 800dd4c:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800dd4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dd50:	2b00      	cmp	r3, #0
 800dd52:	d001      	beq.n	800dd58 <SD_FindSCR+0x38>
  {
    return errorstate;
 800dd54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dd56:	e0ad      	b.n	800deb4 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800dd58:	687b      	ldr	r3, [r7, #4]
 800dd5a:	681a      	ldr	r2, [r3, #0]
 800dd5c:	687b      	ldr	r3, [r7, #4]
 800dd5e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800dd60:	041b      	lsls	r3, r3, #16
 800dd62:	4619      	mov	r1, r3
 800dd64:	4610      	mov	r0, r2
 800dd66:	f002 f8fa 	bl	800ff5e <SDMMC_CmdAppCommand>
 800dd6a:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800dd6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dd6e:	2b00      	cmp	r3, #0
 800dd70:	d001      	beq.n	800dd76 <SD_FindSCR+0x56>
  {
    return errorstate;
 800dd72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dd74:	e09e      	b.n	800deb4 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800dd76:	f04f 33ff 	mov.w	r3, #4294967295
 800dd7a:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800dd7c:	2308      	movs	r3, #8
 800dd7e:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800dd80:	2330      	movs	r3, #48	@ 0x30
 800dd82:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800dd84:	2302      	movs	r3, #2
 800dd86:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800dd88:	2300      	movs	r3, #0
 800dd8a:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800dd8c:	2301      	movs	r3, #1
 800dd8e:	627b      	str	r3, [r7, #36]	@ 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800dd90:	687b      	ldr	r3, [r7, #4]
 800dd92:	681b      	ldr	r3, [r3, #0]
 800dd94:	f107 0210 	add.w	r2, r7, #16
 800dd98:	4611      	mov	r1, r2
 800dd9a:	4618      	mov	r0, r3
 800dd9c:	f001 ff66 	bl	800fc6c <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800dda0:	687b      	ldr	r3, [r7, #4]
 800dda2:	681b      	ldr	r3, [r3, #0]
 800dda4:	4618      	mov	r0, r3
 800dda6:	f002 f940 	bl	801002a <SDMMC_CmdSendSCR>
 800ddaa:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800ddac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ddae:	2b00      	cmp	r3, #0
 800ddb0:	d027      	beq.n	800de02 <SD_FindSCR+0xe2>
  {
    return errorstate;
 800ddb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ddb4:	e07e      	b.n	800deb4 <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800ddb6:	687b      	ldr	r3, [r7, #4]
 800ddb8:	681b      	ldr	r3, [r3, #0]
 800ddba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ddbc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800ddc0:	2b00      	cmp	r3, #0
 800ddc2:	d113      	bne.n	800ddec <SD_FindSCR+0xcc>
 800ddc4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ddc6:	2b00      	cmp	r3, #0
 800ddc8:	d110      	bne.n	800ddec <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 800ddca:	687b      	ldr	r3, [r7, #4]
 800ddcc:	681b      	ldr	r3, [r3, #0]
 800ddce:	4618      	mov	r0, r3
 800ddd0:	f001 fec4 	bl	800fb5c <SDMMC_ReadFIFO>
 800ddd4:	4603      	mov	r3, r0
 800ddd6:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 800ddd8:	687b      	ldr	r3, [r7, #4]
 800ddda:	681b      	ldr	r3, [r3, #0]
 800dddc:	4618      	mov	r0, r3
 800ddde:	f001 febd 	bl	800fb5c <SDMMC_ReadFIFO>
 800dde2:	4603      	mov	r3, r0
 800dde4:	60fb      	str	r3, [r7, #12]
      index++;
 800dde6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dde8:	3301      	adds	r3, #1
 800ddea:	637b      	str	r3, [r7, #52]	@ 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800ddec:	f7f7 fff4 	bl	8005dd8 <HAL_GetTick>
 800ddf0:	4602      	mov	r2, r0
 800ddf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ddf4:	1ad3      	subs	r3, r2, r3
 800ddf6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ddfa:	d102      	bne.n	800de02 <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800ddfc:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800de00:	e058      	b.n	800deb4 <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 800de02:	687b      	ldr	r3, [r7, #4]
 800de04:	681b      	ldr	r3, [r3, #0]
 800de06:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800de08:	f240 532a 	movw	r3, #1322	@ 0x52a
 800de0c:	4013      	ands	r3, r2
 800de0e:	2b00      	cmp	r3, #0
 800de10:	d0d1      	beq.n	800ddb6 <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800de12:	687b      	ldr	r3, [r7, #4]
 800de14:	681b      	ldr	r3, [r3, #0]
 800de16:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800de18:	f003 0308 	and.w	r3, r3, #8
 800de1c:	2b00      	cmp	r3, #0
 800de1e:	d005      	beq.n	800de2c <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800de20:	687b      	ldr	r3, [r7, #4]
 800de22:	681b      	ldr	r3, [r3, #0]
 800de24:	2208      	movs	r2, #8
 800de26:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800de28:	2308      	movs	r3, #8
 800de2a:	e043      	b.n	800deb4 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800de2c:	687b      	ldr	r3, [r7, #4]
 800de2e:	681b      	ldr	r3, [r3, #0]
 800de30:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800de32:	f003 0302 	and.w	r3, r3, #2
 800de36:	2b00      	cmp	r3, #0
 800de38:	d005      	beq.n	800de46 <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800de3a:	687b      	ldr	r3, [r7, #4]
 800de3c:	681b      	ldr	r3, [r3, #0]
 800de3e:	2202      	movs	r2, #2
 800de40:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800de42:	2302      	movs	r3, #2
 800de44:	e036      	b.n	800deb4 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800de46:	687b      	ldr	r3, [r7, #4]
 800de48:	681b      	ldr	r3, [r3, #0]
 800de4a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800de4c:	f003 0320 	and.w	r3, r3, #32
 800de50:	2b00      	cmp	r3, #0
 800de52:	d005      	beq.n	800de60 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800de54:	687b      	ldr	r3, [r7, #4]
 800de56:	681b      	ldr	r3, [r3, #0]
 800de58:	2220      	movs	r2, #32
 800de5a:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800de5c:	2320      	movs	r3, #32
 800de5e:	e029      	b.n	800deb4 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800de60:	687b      	ldr	r3, [r7, #4]
 800de62:	681b      	ldr	r3, [r3, #0]
 800de64:	4a15      	ldr	r2, [pc, #84]	@ (800debc <SD_FindSCR+0x19c>)
 800de66:	639a      	str	r2, [r3, #56]	@ 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800de68:	68fb      	ldr	r3, [r7, #12]
 800de6a:	061a      	lsls	r2, r3, #24
 800de6c:	68fb      	ldr	r3, [r7, #12]
 800de6e:	021b      	lsls	r3, r3, #8
 800de70:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800de74:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800de76:	68fb      	ldr	r3, [r7, #12]
 800de78:	0a1b      	lsrs	r3, r3, #8
 800de7a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800de7e:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800de80:	68fb      	ldr	r3, [r7, #12]
 800de82:	0e1b      	lsrs	r3, r3, #24
 800de84:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800de86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800de88:	601a      	str	r2, [r3, #0]
    scr++;
 800de8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800de8c:	3304      	adds	r3, #4
 800de8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800de90:	68bb      	ldr	r3, [r7, #8]
 800de92:	061a      	lsls	r2, r3, #24
 800de94:	68bb      	ldr	r3, [r7, #8]
 800de96:	021b      	lsls	r3, r3, #8
 800de98:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800de9c:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800de9e:	68bb      	ldr	r3, [r7, #8]
 800dea0:	0a1b      	lsrs	r3, r3, #8
 800dea2:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800dea6:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800dea8:	68bb      	ldr	r3, [r7, #8]
 800deaa:	0e1b      	lsrs	r3, r3, #24
 800deac:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800deae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800deb0:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800deb2:	2300      	movs	r3, #0
}
 800deb4:	4618      	mov	r0, r3
 800deb6:	3738      	adds	r7, #56	@ 0x38
 800deb8:	46bd      	mov	sp, r7
 800deba:	bd80      	pop	{r7, pc}
 800debc:	18000f3a 	.word	0x18000f3a

0800dec0 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800dec0:	b580      	push	{r7, lr}
 800dec2:	b086      	sub	sp, #24
 800dec4:	af00      	add	r7, sp, #0
 800dec6:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pRxBuffPtr;
 800dec8:	687b      	ldr	r3, [r7, #4]
 800deca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800decc:	613b      	str	r3, [r7, #16]

  if (hsd->RxXferSize >= 32U)
 800dece:	687b      	ldr	r3, [r7, #4]
 800ded0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ded2:	2b1f      	cmp	r3, #31
 800ded4:	d936      	bls.n	800df44 <SD_Read_IT+0x84>
  {
    /* Read data from SDMMC Rx FIFO */
    for (count = 0U; count < 8U; count++)
 800ded6:	2300      	movs	r3, #0
 800ded8:	617b      	str	r3, [r7, #20]
 800deda:	e027      	b.n	800df2c <SD_Read_IT+0x6c>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 800dedc:	687b      	ldr	r3, [r7, #4]
 800dede:	681b      	ldr	r3, [r3, #0]
 800dee0:	4618      	mov	r0, r3
 800dee2:	f001 fe3b 	bl	800fb5c <SDMMC_ReadFIFO>
 800dee6:	60f8      	str	r0, [r7, #12]
      *tmp = (uint8_t)(data & 0xFFU);
 800dee8:	68fb      	ldr	r3, [r7, #12]
 800deea:	b2da      	uxtb	r2, r3
 800deec:	693b      	ldr	r3, [r7, #16]
 800deee:	701a      	strb	r2, [r3, #0]
      tmp++;
 800def0:	693b      	ldr	r3, [r7, #16]
 800def2:	3301      	adds	r3, #1
 800def4:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800def6:	68fb      	ldr	r3, [r7, #12]
 800def8:	0a1b      	lsrs	r3, r3, #8
 800defa:	b2da      	uxtb	r2, r3
 800defc:	693b      	ldr	r3, [r7, #16]
 800defe:	701a      	strb	r2, [r3, #0]
      tmp++;
 800df00:	693b      	ldr	r3, [r7, #16]
 800df02:	3301      	adds	r3, #1
 800df04:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800df06:	68fb      	ldr	r3, [r7, #12]
 800df08:	0c1b      	lsrs	r3, r3, #16
 800df0a:	b2da      	uxtb	r2, r3
 800df0c:	693b      	ldr	r3, [r7, #16]
 800df0e:	701a      	strb	r2, [r3, #0]
      tmp++;
 800df10:	693b      	ldr	r3, [r7, #16]
 800df12:	3301      	adds	r3, #1
 800df14:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800df16:	68fb      	ldr	r3, [r7, #12]
 800df18:	0e1b      	lsrs	r3, r3, #24
 800df1a:	b2da      	uxtb	r2, r3
 800df1c:	693b      	ldr	r3, [r7, #16]
 800df1e:	701a      	strb	r2, [r3, #0]
      tmp++;
 800df20:	693b      	ldr	r3, [r7, #16]
 800df22:	3301      	adds	r3, #1
 800df24:	613b      	str	r3, [r7, #16]
    for (count = 0U; count < 8U; count++)
 800df26:	697b      	ldr	r3, [r7, #20]
 800df28:	3301      	adds	r3, #1
 800df2a:	617b      	str	r3, [r7, #20]
 800df2c:	697b      	ldr	r3, [r7, #20]
 800df2e:	2b07      	cmp	r3, #7
 800df30:	d9d4      	bls.n	800dedc <SD_Read_IT+0x1c>
    }

    hsd->pRxBuffPtr = tmp;
 800df32:	687b      	ldr	r3, [r7, #4]
 800df34:	693a      	ldr	r2, [r7, #16]
 800df36:	625a      	str	r2, [r3, #36]	@ 0x24
    hsd->RxXferSize -= 32U;
 800df38:	687b      	ldr	r3, [r7, #4]
 800df3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800df3c:	f1a3 0220 	sub.w	r2, r3, #32
 800df40:	687b      	ldr	r3, [r7, #4]
 800df42:	629a      	str	r2, [r3, #40]	@ 0x28
  }
}
 800df44:	bf00      	nop
 800df46:	3718      	adds	r7, #24
 800df48:	46bd      	mov	sp, r7
 800df4a:	bd80      	pop	{r7, pc}

0800df4c <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800df4c:	b580      	push	{r7, lr}
 800df4e:	b086      	sub	sp, #24
 800df50:	af00      	add	r7, sp, #0
 800df52:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  const uint8_t *tmp;

  tmp = hsd->pTxBuffPtr;
 800df54:	687b      	ldr	r3, [r7, #4]
 800df56:	69db      	ldr	r3, [r3, #28]
 800df58:	613b      	str	r3, [r7, #16]

  if (hsd->TxXferSize >= 32U)
 800df5a:	687b      	ldr	r3, [r7, #4]
 800df5c:	6a1b      	ldr	r3, [r3, #32]
 800df5e:	2b1f      	cmp	r3, #31
 800df60:	d93a      	bls.n	800dfd8 <SD_Write_IT+0x8c>
  {
    /* Write data to SDMMC Tx FIFO */
    for (count = 0U; count < 8U; count++)
 800df62:	2300      	movs	r3, #0
 800df64:	617b      	str	r3, [r7, #20]
 800df66:	e02b      	b.n	800dfc0 <SD_Write_IT+0x74>
    {
      data = (uint32_t)(*tmp);
 800df68:	693b      	ldr	r3, [r7, #16]
 800df6a:	781b      	ldrb	r3, [r3, #0]
 800df6c:	60fb      	str	r3, [r7, #12]
      tmp++;
 800df6e:	693b      	ldr	r3, [r7, #16]
 800df70:	3301      	adds	r3, #1
 800df72:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800df74:	693b      	ldr	r3, [r7, #16]
 800df76:	781b      	ldrb	r3, [r3, #0]
 800df78:	021a      	lsls	r2, r3, #8
 800df7a:	68fb      	ldr	r3, [r7, #12]
 800df7c:	4313      	orrs	r3, r2
 800df7e:	60fb      	str	r3, [r7, #12]
      tmp++;
 800df80:	693b      	ldr	r3, [r7, #16]
 800df82:	3301      	adds	r3, #1
 800df84:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800df86:	693b      	ldr	r3, [r7, #16]
 800df88:	781b      	ldrb	r3, [r3, #0]
 800df8a:	041a      	lsls	r2, r3, #16
 800df8c:	68fb      	ldr	r3, [r7, #12]
 800df8e:	4313      	orrs	r3, r2
 800df90:	60fb      	str	r3, [r7, #12]
      tmp++;
 800df92:	693b      	ldr	r3, [r7, #16]
 800df94:	3301      	adds	r3, #1
 800df96:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800df98:	693b      	ldr	r3, [r7, #16]
 800df9a:	781b      	ldrb	r3, [r3, #0]
 800df9c:	061a      	lsls	r2, r3, #24
 800df9e:	68fb      	ldr	r3, [r7, #12]
 800dfa0:	4313      	orrs	r3, r2
 800dfa2:	60fb      	str	r3, [r7, #12]
      tmp++;
 800dfa4:	693b      	ldr	r3, [r7, #16]
 800dfa6:	3301      	adds	r3, #1
 800dfa8:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800dfaa:	687b      	ldr	r3, [r7, #4]
 800dfac:	681b      	ldr	r3, [r3, #0]
 800dfae:	f107 020c 	add.w	r2, r7, #12
 800dfb2:	4611      	mov	r1, r2
 800dfb4:	4618      	mov	r0, r3
 800dfb6:	f001 fdde 	bl	800fb76 <SDMMC_WriteFIFO>
    for (count = 0U; count < 8U; count++)
 800dfba:	697b      	ldr	r3, [r7, #20]
 800dfbc:	3301      	adds	r3, #1
 800dfbe:	617b      	str	r3, [r7, #20]
 800dfc0:	697b      	ldr	r3, [r7, #20]
 800dfc2:	2b07      	cmp	r3, #7
 800dfc4:	d9d0      	bls.n	800df68 <SD_Write_IT+0x1c>
    }

    hsd->pTxBuffPtr = tmp;
 800dfc6:	687b      	ldr	r3, [r7, #4]
 800dfc8:	693a      	ldr	r2, [r7, #16]
 800dfca:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize -= 32U;
 800dfcc:	687b      	ldr	r3, [r7, #4]
 800dfce:	6a1b      	ldr	r3, [r3, #32]
 800dfd0:	f1a3 0220 	sub.w	r2, r3, #32
 800dfd4:	687b      	ldr	r3, [r7, #4]
 800dfd6:	621a      	str	r2, [r3, #32]
  }
}
 800dfd8:	bf00      	nop
 800dfda:	3718      	adds	r7, #24
 800dfdc:	46bd      	mov	sp, r7
 800dfde:	bd80      	pop	{r7, pc}

0800dfe0 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800dfe0:	b480      	push	{r7}
 800dfe2:	b083      	sub	sp, #12
 800dfe4:	af00      	add	r7, sp, #0
 800dfe6:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800dfe8:	bf00      	nop
 800dfea:	370c      	adds	r7, #12
 800dfec:	46bd      	mov	sp, r7
 800dfee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dff2:	4770      	bx	lr

0800dff4 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800dff4:	b480      	push	{r7}
 800dff6:	b083      	sub	sp, #12
 800dff8:	af00      	add	r7, sp, #0
 800dffa:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800dffc:	bf00      	nop
 800dffe:	370c      	adds	r7, #12
 800e000:	46bd      	mov	sp, r7
 800e002:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e006:	4770      	bx	lr

0800e008 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800e008:	b480      	push	{r7}
 800e00a:	b083      	sub	sp, #12
 800e00c:	af00      	add	r7, sp, #0
 800e00e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800e010:	bf00      	nop
 800e012:	370c      	adds	r7, #12
 800e014:	46bd      	mov	sp, r7
 800e016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e01a:	4770      	bx	lr

0800e01c <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800e01c:	b480      	push	{r7}
 800e01e:	b083      	sub	sp, #12
 800e020:	af00      	add	r7, sp, #0
 800e022:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800e024:	bf00      	nop
 800e026:	370c      	adds	r7, #12
 800e028:	46bd      	mov	sp, r7
 800e02a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e02e:	4770      	bx	lr

0800e030 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800e030:	b580      	push	{r7, lr}
 800e032:	b084      	sub	sp, #16
 800e034:	af00      	add	r7, sp, #0
 800e036:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800e038:	687b      	ldr	r3, [r7, #4]
 800e03a:	2b00      	cmp	r3, #0
 800e03c:	d101      	bne.n	800e042 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800e03e:	2301      	movs	r3, #1
 800e040:	e10f      	b.n	800e262 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800e042:	687b      	ldr	r3, [r7, #4]
 800e044:	2200      	movs	r2, #0
 800e046:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800e048:	687b      	ldr	r3, [r7, #4]
 800e04a:	681b      	ldr	r3, [r3, #0]
 800e04c:	4a87      	ldr	r2, [pc, #540]	@ (800e26c <HAL_SPI_Init+0x23c>)
 800e04e:	4293      	cmp	r3, r2
 800e050:	d00f      	beq.n	800e072 <HAL_SPI_Init+0x42>
 800e052:	687b      	ldr	r3, [r7, #4]
 800e054:	681b      	ldr	r3, [r3, #0]
 800e056:	4a86      	ldr	r2, [pc, #536]	@ (800e270 <HAL_SPI_Init+0x240>)
 800e058:	4293      	cmp	r3, r2
 800e05a:	d00a      	beq.n	800e072 <HAL_SPI_Init+0x42>
 800e05c:	687b      	ldr	r3, [r7, #4]
 800e05e:	681b      	ldr	r3, [r3, #0]
 800e060:	4a84      	ldr	r2, [pc, #528]	@ (800e274 <HAL_SPI_Init+0x244>)
 800e062:	4293      	cmp	r3, r2
 800e064:	d005      	beq.n	800e072 <HAL_SPI_Init+0x42>
 800e066:	687b      	ldr	r3, [r7, #4]
 800e068:	68db      	ldr	r3, [r3, #12]
 800e06a:	2b0f      	cmp	r3, #15
 800e06c:	d901      	bls.n	800e072 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800e06e:	2301      	movs	r3, #1
 800e070:	e0f7      	b.n	800e262 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800e072:	6878      	ldr	r0, [r7, #4]
 800e074:	f000 fbc2 	bl	800e7fc <SPI_GetPacketSize>
 800e078:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800e07a:	687b      	ldr	r3, [r7, #4]
 800e07c:	681b      	ldr	r3, [r3, #0]
 800e07e:	4a7b      	ldr	r2, [pc, #492]	@ (800e26c <HAL_SPI_Init+0x23c>)
 800e080:	4293      	cmp	r3, r2
 800e082:	d00c      	beq.n	800e09e <HAL_SPI_Init+0x6e>
 800e084:	687b      	ldr	r3, [r7, #4]
 800e086:	681b      	ldr	r3, [r3, #0]
 800e088:	4a79      	ldr	r2, [pc, #484]	@ (800e270 <HAL_SPI_Init+0x240>)
 800e08a:	4293      	cmp	r3, r2
 800e08c:	d007      	beq.n	800e09e <HAL_SPI_Init+0x6e>
 800e08e:	687b      	ldr	r3, [r7, #4]
 800e090:	681b      	ldr	r3, [r3, #0]
 800e092:	4a78      	ldr	r2, [pc, #480]	@ (800e274 <HAL_SPI_Init+0x244>)
 800e094:	4293      	cmp	r3, r2
 800e096:	d002      	beq.n	800e09e <HAL_SPI_Init+0x6e>
 800e098:	68fb      	ldr	r3, [r7, #12]
 800e09a:	2b08      	cmp	r3, #8
 800e09c:	d811      	bhi.n	800e0c2 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800e09e:	687b      	ldr	r3, [r7, #4]
 800e0a0:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800e0a2:	4a72      	ldr	r2, [pc, #456]	@ (800e26c <HAL_SPI_Init+0x23c>)
 800e0a4:	4293      	cmp	r3, r2
 800e0a6:	d009      	beq.n	800e0bc <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800e0a8:	687b      	ldr	r3, [r7, #4]
 800e0aa:	681b      	ldr	r3, [r3, #0]
 800e0ac:	4a70      	ldr	r2, [pc, #448]	@ (800e270 <HAL_SPI_Init+0x240>)
 800e0ae:	4293      	cmp	r3, r2
 800e0b0:	d004      	beq.n	800e0bc <HAL_SPI_Init+0x8c>
 800e0b2:	687b      	ldr	r3, [r7, #4]
 800e0b4:	681b      	ldr	r3, [r3, #0]
 800e0b6:	4a6f      	ldr	r2, [pc, #444]	@ (800e274 <HAL_SPI_Init+0x244>)
 800e0b8:	4293      	cmp	r3, r2
 800e0ba:	d104      	bne.n	800e0c6 <HAL_SPI_Init+0x96>
 800e0bc:	68fb      	ldr	r3, [r7, #12]
 800e0be:	2b10      	cmp	r3, #16
 800e0c0:	d901      	bls.n	800e0c6 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800e0c2:	2301      	movs	r3, #1
 800e0c4:	e0cd      	b.n	800e262 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800e0c6:	687b      	ldr	r3, [r7, #4]
 800e0c8:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800e0cc:	b2db      	uxtb	r3, r3
 800e0ce:	2b00      	cmp	r3, #0
 800e0d0:	d106      	bne.n	800e0e0 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800e0d2:	687b      	ldr	r3, [r7, #4]
 800e0d4:	2200      	movs	r2, #0
 800e0d6:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800e0da:	6878      	ldr	r0, [r7, #4]
 800e0dc:	f000 f8cc 	bl	800e278 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800e0e0:	687b      	ldr	r3, [r7, #4]
 800e0e2:	2202      	movs	r2, #2
 800e0e4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800e0e8:	687b      	ldr	r3, [r7, #4]
 800e0ea:	681b      	ldr	r3, [r3, #0]
 800e0ec:	681a      	ldr	r2, [r3, #0]
 800e0ee:	687b      	ldr	r3, [r7, #4]
 800e0f0:	681b      	ldr	r3, [r3, #0]
 800e0f2:	f022 0201 	bic.w	r2, r2, #1
 800e0f6:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800e0f8:	687b      	ldr	r3, [r7, #4]
 800e0fa:	681b      	ldr	r3, [r3, #0]
 800e0fc:	689b      	ldr	r3, [r3, #8]
 800e0fe:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800e102:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800e104:	687b      	ldr	r3, [r7, #4]
 800e106:	699b      	ldr	r3, [r3, #24]
 800e108:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800e10c:	d119      	bne.n	800e142 <HAL_SPI_Init+0x112>
 800e10e:	687b      	ldr	r3, [r7, #4]
 800e110:	685b      	ldr	r3, [r3, #4]
 800e112:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800e116:	d103      	bne.n	800e120 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800e118:	687b      	ldr	r3, [r7, #4]
 800e11a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800e11c:	2b00      	cmp	r3, #0
 800e11e:	d008      	beq.n	800e132 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800e120:	687b      	ldr	r3, [r7, #4]
 800e122:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800e124:	2b00      	cmp	r3, #0
 800e126:	d10c      	bne.n	800e142 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800e128:	687b      	ldr	r3, [r7, #4]
 800e12a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800e12c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800e130:	d107      	bne.n	800e142 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800e132:	687b      	ldr	r3, [r7, #4]
 800e134:	681b      	ldr	r3, [r3, #0]
 800e136:	681a      	ldr	r2, [r3, #0]
 800e138:	687b      	ldr	r3, [r7, #4]
 800e13a:	681b      	ldr	r3, [r3, #0]
 800e13c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800e140:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800e142:	687b      	ldr	r3, [r7, #4]
 800e144:	685b      	ldr	r3, [r3, #4]
 800e146:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800e14a:	2b00      	cmp	r3, #0
 800e14c:	d00f      	beq.n	800e16e <HAL_SPI_Init+0x13e>
 800e14e:	687b      	ldr	r3, [r7, #4]
 800e150:	68db      	ldr	r3, [r3, #12]
 800e152:	2b06      	cmp	r3, #6
 800e154:	d90b      	bls.n	800e16e <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800e156:	687b      	ldr	r3, [r7, #4]
 800e158:	681b      	ldr	r3, [r3, #0]
 800e15a:	681b      	ldr	r3, [r3, #0]
 800e15c:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 800e160:	687b      	ldr	r3, [r7, #4]
 800e162:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800e164:	687b      	ldr	r3, [r7, #4]
 800e166:	681b      	ldr	r3, [r3, #0]
 800e168:	430a      	orrs	r2, r1
 800e16a:	601a      	str	r2, [r3, #0]
 800e16c:	e007      	b.n	800e17e <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800e16e:	687b      	ldr	r3, [r7, #4]
 800e170:	681b      	ldr	r3, [r3, #0]
 800e172:	681a      	ldr	r2, [r3, #0]
 800e174:	687b      	ldr	r3, [r7, #4]
 800e176:	681b      	ldr	r3, [r3, #0]
 800e178:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800e17c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800e17e:	687b      	ldr	r3, [r7, #4]
 800e180:	69da      	ldr	r2, [r3, #28]
 800e182:	687b      	ldr	r3, [r7, #4]
 800e184:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e186:	431a      	orrs	r2, r3
 800e188:	68bb      	ldr	r3, [r7, #8]
 800e18a:	431a      	orrs	r2, r3
 800e18c:	687b      	ldr	r3, [r7, #4]
 800e18e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e190:	ea42 0103 	orr.w	r1, r2, r3
 800e194:	687b      	ldr	r3, [r7, #4]
 800e196:	68da      	ldr	r2, [r3, #12]
 800e198:	687b      	ldr	r3, [r7, #4]
 800e19a:	681b      	ldr	r3, [r3, #0]
 800e19c:	430a      	orrs	r2, r1
 800e19e:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800e1a0:	687b      	ldr	r3, [r7, #4]
 800e1a2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800e1a4:	687b      	ldr	r3, [r7, #4]
 800e1a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e1a8:	431a      	orrs	r2, r3
 800e1aa:	687b      	ldr	r3, [r7, #4]
 800e1ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e1ae:	431a      	orrs	r2, r3
 800e1b0:	687b      	ldr	r3, [r7, #4]
 800e1b2:	699b      	ldr	r3, [r3, #24]
 800e1b4:	431a      	orrs	r2, r3
 800e1b6:	687b      	ldr	r3, [r7, #4]
 800e1b8:	691b      	ldr	r3, [r3, #16]
 800e1ba:	431a      	orrs	r2, r3
 800e1bc:	687b      	ldr	r3, [r7, #4]
 800e1be:	695b      	ldr	r3, [r3, #20]
 800e1c0:	431a      	orrs	r2, r3
 800e1c2:	687b      	ldr	r3, [r7, #4]
 800e1c4:	6a1b      	ldr	r3, [r3, #32]
 800e1c6:	431a      	orrs	r2, r3
 800e1c8:	687b      	ldr	r3, [r7, #4]
 800e1ca:	685b      	ldr	r3, [r3, #4]
 800e1cc:	431a      	orrs	r2, r3
 800e1ce:	687b      	ldr	r3, [r7, #4]
 800e1d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e1d2:	431a      	orrs	r2, r3
 800e1d4:	687b      	ldr	r3, [r7, #4]
 800e1d6:	689b      	ldr	r3, [r3, #8]
 800e1d8:	431a      	orrs	r2, r3
 800e1da:	687b      	ldr	r3, [r7, #4]
 800e1dc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800e1de:	ea42 0103 	orr.w	r1, r2, r3
 800e1e2:	687b      	ldr	r3, [r7, #4]
 800e1e4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800e1e6:	687b      	ldr	r3, [r7, #4]
 800e1e8:	681b      	ldr	r3, [r3, #0]
 800e1ea:	430a      	orrs	r2, r1
 800e1ec:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800e1ee:	687b      	ldr	r3, [r7, #4]
 800e1f0:	685b      	ldr	r3, [r3, #4]
 800e1f2:	2b00      	cmp	r3, #0
 800e1f4:	d113      	bne.n	800e21e <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800e1f6:	687b      	ldr	r3, [r7, #4]
 800e1f8:	681b      	ldr	r3, [r3, #0]
 800e1fa:	689b      	ldr	r3, [r3, #8]
 800e1fc:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 800e200:	687b      	ldr	r3, [r7, #4]
 800e202:	681b      	ldr	r3, [r3, #0]
 800e204:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800e208:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800e20a:	687b      	ldr	r3, [r7, #4]
 800e20c:	681b      	ldr	r3, [r3, #0]
 800e20e:	689b      	ldr	r3, [r3, #8]
 800e210:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 800e214:	687b      	ldr	r3, [r7, #4]
 800e216:	681b      	ldr	r3, [r3, #0]
 800e218:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800e21c:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800e21e:	687b      	ldr	r3, [r7, #4]
 800e220:	681b      	ldr	r3, [r3, #0]
 800e222:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800e224:	687b      	ldr	r3, [r7, #4]
 800e226:	681b      	ldr	r3, [r3, #0]
 800e228:	f022 0201 	bic.w	r2, r2, #1
 800e22c:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800e22e:	687b      	ldr	r3, [r7, #4]
 800e230:	685b      	ldr	r3, [r3, #4]
 800e232:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800e236:	2b00      	cmp	r3, #0
 800e238:	d00a      	beq.n	800e250 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800e23a:	687b      	ldr	r3, [r7, #4]
 800e23c:	681b      	ldr	r3, [r3, #0]
 800e23e:	68db      	ldr	r3, [r3, #12]
 800e240:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800e244:	687b      	ldr	r3, [r7, #4]
 800e246:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800e248:	687b      	ldr	r3, [r7, #4]
 800e24a:	681b      	ldr	r3, [r3, #0]
 800e24c:	430a      	orrs	r2, r1
 800e24e:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800e250:	687b      	ldr	r3, [r7, #4]
 800e252:	2200      	movs	r2, #0
 800e254:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800e258:	687b      	ldr	r3, [r7, #4]
 800e25a:	2201      	movs	r2, #1
 800e25c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 800e260:	2300      	movs	r3, #0
}
 800e262:	4618      	mov	r0, r3
 800e264:	3710      	adds	r7, #16
 800e266:	46bd      	mov	sp, r7
 800e268:	bd80      	pop	{r7, pc}
 800e26a:	bf00      	nop
 800e26c:	40013000 	.word	0x40013000
 800e270:	40003800 	.word	0x40003800
 800e274:	40003c00 	.word	0x40003c00

0800e278 <HAL_SPI_MspInit>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 800e278:	b480      	push	{r7}
 800e27a:	b083      	sub	sp, #12
 800e27c:	af00      	add	r7, sp, #0
 800e27e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
   */
}
 800e280:	bf00      	nop
 800e282:	370c      	adds	r7, #12
 800e284:	46bd      	mov	sp, r7
 800e286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e28a:	4770      	bx	lr

0800e28c <HAL_SPI_TransmitReceive_DMA>:
  * @note   When the CRC feature is enabled the pRxData Length must be Size + 1
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 800e28c:	b580      	push	{r7, lr}
 800e28e:	b084      	sub	sp, #16
 800e290:	af00      	add	r7, sp, #0
 800e292:	60f8      	str	r0, [r7, #12]
 800e294:	60b9      	str	r1, [r7, #8]
 800e296:	607a      	str	r2, [r7, #4]
 800e298:	807b      	strh	r3, [r7, #2]
  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  if (hspi->State != HAL_SPI_STATE_READY)
 800e29a:	68fb      	ldr	r3, [r7, #12]
 800e29c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800e2a0:	b2db      	uxtb	r3, r3
 800e2a2:	2b01      	cmp	r3, #1
 800e2a4:	d001      	beq.n	800e2aa <HAL_SPI_TransmitReceive_DMA+0x1e>
  {
    return HAL_BUSY;
 800e2a6:	2302      	movs	r3, #2
 800e2a8:	e18a      	b.n	800e5c0 <HAL_SPI_TransmitReceive_DMA+0x334>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 800e2aa:	68bb      	ldr	r3, [r7, #8]
 800e2ac:	2b00      	cmp	r3, #0
 800e2ae:	d005      	beq.n	800e2bc <HAL_SPI_TransmitReceive_DMA+0x30>
 800e2b0:	687b      	ldr	r3, [r7, #4]
 800e2b2:	2b00      	cmp	r3, #0
 800e2b4:	d002      	beq.n	800e2bc <HAL_SPI_TransmitReceive_DMA+0x30>
 800e2b6:	887b      	ldrh	r3, [r7, #2]
 800e2b8:	2b00      	cmp	r3, #0
 800e2ba:	d101      	bne.n	800e2c0 <HAL_SPI_TransmitReceive_DMA+0x34>
  {
    return HAL_ERROR;
 800e2bc:	2301      	movs	r3, #1
 800e2be:	e17f      	b.n	800e5c0 <HAL_SPI_TransmitReceive_DMA+0x334>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800e2c0:	68fb      	ldr	r3, [r7, #12]
 800e2c2:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800e2c6:	2b01      	cmp	r3, #1
 800e2c8:	d101      	bne.n	800e2ce <HAL_SPI_TransmitReceive_DMA+0x42>
 800e2ca:	2302      	movs	r3, #2
 800e2cc:	e178      	b.n	800e5c0 <HAL_SPI_TransmitReceive_DMA+0x334>
 800e2ce:	68fb      	ldr	r3, [r7, #12]
 800e2d0:	2201      	movs	r2, #1
 800e2d2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 800e2d6:	68fb      	ldr	r3, [r7, #12]
 800e2d8:	2205      	movs	r2, #5
 800e2da:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800e2de:	68fb      	ldr	r3, [r7, #12]
 800e2e0:	2200      	movs	r2, #0
 800e2e2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800e2e6:	68fb      	ldr	r3, [r7, #12]
 800e2e8:	68ba      	ldr	r2, [r7, #8]
 800e2ea:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 800e2ec:	68fb      	ldr	r3, [r7, #12]
 800e2ee:	887a      	ldrh	r2, [r7, #2]
 800e2f0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 800e2f4:	68fb      	ldr	r3, [r7, #12]
 800e2f6:	887a      	ldrh	r2, [r7, #2]
 800e2f8:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800e2fc:	68fb      	ldr	r3, [r7, #12]
 800e2fe:	687a      	ldr	r2, [r7, #4]
 800e300:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = Size;
 800e302:	68fb      	ldr	r3, [r7, #12]
 800e304:	887a      	ldrh	r2, [r7, #2]
 800e306:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = Size;
 800e30a:	68fb      	ldr	r3, [r7, #12]
 800e30c:	887a      	ldrh	r2, [r7, #2]
 800e30e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800e312:	68fb      	ldr	r3, [r7, #12]
 800e314:	2200      	movs	r2, #0
 800e316:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 800e318:	68fb      	ldr	r3, [r7, #12]
 800e31a:	2200      	movs	r2, #0
 800e31c:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Set Full-Duplex mode */
  SPI_2LINES(hspi);
 800e31e:	68fb      	ldr	r3, [r7, #12]
 800e320:	681b      	ldr	r3, [r3, #0]
 800e322:	68da      	ldr	r2, [r3, #12]
 800e324:	68fb      	ldr	r3, [r7, #12]
 800e326:	681b      	ldr	r3, [r3, #0]
 800e328:	f422 22c0 	bic.w	r2, r2, #393216	@ 0x60000
 800e32c:	60da      	str	r2, [r3, #12]

  /* Reset the Tx/Rx DMA bits */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800e32e:	68fb      	ldr	r3, [r7, #12]
 800e330:	681b      	ldr	r3, [r3, #0]
 800e332:	689a      	ldr	r2, [r3, #8]
 800e334:	68fb      	ldr	r3, [r7, #12]
 800e336:	681b      	ldr	r3, [r3, #0]
 800e338:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800e33c:	609a      	str	r2, [r3, #8]

  /* Packing mode management is enabled by the DMA settings */
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 800e33e:	68fb      	ldr	r3, [r7, #12]
 800e340:	68db      	ldr	r3, [r3, #12]
 800e342:	2b0f      	cmp	r3, #15
 800e344:	d905      	bls.n	800e352 <HAL_SPI_TransmitReceive_DMA+0xc6>
 800e346:	68fb      	ldr	r3, [r7, #12]
 800e348:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800e34a:	699b      	ldr	r3, [r3, #24]
 800e34c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800e350:	d10f      	bne.n	800e372 <HAL_SPI_TransmitReceive_DMA+0xe6>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 800e352:	68fb      	ldr	r3, [r7, #12]
 800e354:	68db      	ldr	r3, [r3, #12]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 800e356:	2b07      	cmp	r3, #7
 800e358:	d911      	bls.n	800e37e <HAL_SPI_TransmitReceive_DMA+0xf2>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 800e35a:	68fb      	ldr	r3, [r7, #12]
 800e35c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800e35e:	699b      	ldr	r3, [r3, #24]
 800e360:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800e364:	d00b      	beq.n	800e37e <HAL_SPI_TransmitReceive_DMA+0xf2>
                                                     (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))))
 800e366:	68fb      	ldr	r3, [r7, #12]
 800e368:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800e36a:	699b      	ldr	r3, [r3, #24]
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 800e36c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800e370:	d005      	beq.n	800e37e <HAL_SPI_TransmitReceive_DMA+0xf2>
  {
    /* Restriction the DMA data received is not allowed in this mode */
    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 800e372:	68fb      	ldr	r3, [r7, #12]
 800e374:	2200      	movs	r2, #0
 800e376:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
    return HAL_ERROR;
 800e37a:	2301      	movs	r3, #1
 800e37c:	e120      	b.n	800e5c0 <HAL_SPI_TransmitReceive_DMA+0x334>
  }

  /* Adjust XferCount according to DMA alignment / Data size */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800e37e:	68fb      	ldr	r3, [r7, #12]
 800e380:	68db      	ldr	r3, [r3, #12]
 800e382:	2b07      	cmp	r3, #7
 800e384:	d840      	bhi.n	800e408 <HAL_SPI_TransmitReceive_DMA+0x17c>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800e386:	68fb      	ldr	r3, [r7, #12]
 800e388:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e38a:	699b      	ldr	r3, [r3, #24]
 800e38c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800e390:	d109      	bne.n	800e3a6 <HAL_SPI_TransmitReceive_DMA+0x11a>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 800e392:	68fb      	ldr	r3, [r7, #12]
 800e394:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800e398:	b29b      	uxth	r3, r3
 800e39a:	3301      	adds	r3, #1
 800e39c:	105b      	asrs	r3, r3, #1
 800e39e:	b29a      	uxth	r2, r3
 800e3a0:	68fb      	ldr	r3, [r7, #12]
 800e3a2:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    }
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800e3a6:	68fb      	ldr	r3, [r7, #12]
 800e3a8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e3aa:	699b      	ldr	r3, [r3, #24]
 800e3ac:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800e3b0:	d109      	bne.n	800e3c6 <HAL_SPI_TransmitReceive_DMA+0x13a>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 3UL) >> 2UL;
 800e3b2:	68fb      	ldr	r3, [r7, #12]
 800e3b4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800e3b8:	b29b      	uxth	r3, r3
 800e3ba:	3303      	adds	r3, #3
 800e3bc:	109b      	asrs	r3, r3, #2
 800e3be:	b29a      	uxth	r2, r3
 800e3c0:	68fb      	ldr	r3, [r7, #12]
 800e3c2:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    }
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800e3c6:	68fb      	ldr	r3, [r7, #12]
 800e3c8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800e3ca:	699b      	ldr	r3, [r3, #24]
 800e3cc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800e3d0:	d109      	bne.n	800e3e6 <HAL_SPI_TransmitReceive_DMA+0x15a>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 800e3d2:	68fb      	ldr	r3, [r7, #12]
 800e3d4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800e3d8:	b29b      	uxth	r3, r3
 800e3da:	3301      	adds	r3, #1
 800e3dc:	105b      	asrs	r3, r3, #1
 800e3de:	b29a      	uxth	r2, r3
 800e3e0:	68fb      	ldr	r3, [r7, #12]
 800e3e2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    }
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800e3e6:	68fb      	ldr	r3, [r7, #12]
 800e3e8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800e3ea:	699b      	ldr	r3, [r3, #24]
 800e3ec:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800e3f0:	d12e      	bne.n	800e450 <HAL_SPI_TransmitReceive_DMA+0x1c4>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 3UL) >> 2UL;
 800e3f2:	68fb      	ldr	r3, [r7, #12]
 800e3f4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800e3f8:	b29b      	uxth	r3, r3
 800e3fa:	3303      	adds	r3, #3
 800e3fc:	109b      	asrs	r3, r3, #2
 800e3fe:	b29a      	uxth	r2, r3
 800e400:	68fb      	ldr	r3, [r7, #12]
 800e402:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800e406:	e023      	b.n	800e450 <HAL_SPI_TransmitReceive_DMA+0x1c4>
    }
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 800e408:	68fb      	ldr	r3, [r7, #12]
 800e40a:	68db      	ldr	r3, [r3, #12]
 800e40c:	2b0f      	cmp	r3, #15
 800e40e:	d81f      	bhi.n	800e450 <HAL_SPI_TransmitReceive_DMA+0x1c4>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800e410:	68fb      	ldr	r3, [r7, #12]
 800e412:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e414:	699b      	ldr	r3, [r3, #24]
 800e416:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800e41a:	d109      	bne.n	800e430 <HAL_SPI_TransmitReceive_DMA+0x1a4>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 800e41c:	68fb      	ldr	r3, [r7, #12]
 800e41e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800e422:	b29b      	uxth	r3, r3
 800e424:	3301      	adds	r3, #1
 800e426:	105b      	asrs	r3, r3, #1
 800e428:	b29a      	uxth	r2, r3
 800e42a:	68fb      	ldr	r3, [r7, #12]
 800e42c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    }
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800e430:	68fb      	ldr	r3, [r7, #12]
 800e432:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800e434:	699b      	ldr	r3, [r3, #24]
 800e436:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800e43a:	d109      	bne.n	800e450 <HAL_SPI_TransmitReceive_DMA+0x1c4>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 800e43c:	68fb      	ldr	r3, [r7, #12]
 800e43e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800e442:	b29b      	uxth	r3, r3
 800e444:	3301      	adds	r3, #1
 800e446:	105b      	asrs	r3, r3, #1
 800e448:	b29a      	uxth	r2, r3
 800e44a:	68fb      	ldr	r3, [r7, #12]
 800e44c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  {
    /* Adjustment done */
  }

  /* Set the SPI Tx/Rx DMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 800e450:	68fb      	ldr	r3, [r7, #12]
 800e452:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800e454:	4a5c      	ldr	r2, [pc, #368]	@ (800e5c8 <HAL_SPI_TransmitReceive_DMA+0x33c>)
 800e456:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 800e458:	68fb      	ldr	r3, [r7, #12]
 800e45a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800e45c:	4a5b      	ldr	r2, [pc, #364]	@ (800e5cc <HAL_SPI_TransmitReceive_DMA+0x340>)
 800e45e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800e460:	68fb      	ldr	r3, [r7, #12]
 800e462:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800e464:	4a5a      	ldr	r2, [pc, #360]	@ (800e5d0 <HAL_SPI_TransmitReceive_DMA+0x344>)
 800e466:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 800e468:	68fb      	ldr	r3, [r7, #12]
 800e46a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800e46c:	2200      	movs	r2, #0
 800e46e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 800e470:	68fb      	ldr	r3, [r7, #12]
 800e472:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 800e474:	68fb      	ldr	r3, [r7, #12]
 800e476:	681b      	ldr	r3, [r3, #0]
 800e478:	3330      	adds	r3, #48	@ 0x30
 800e47a:	4619      	mov	r1, r3
 800e47c:	68fb      	ldr	r3, [r7, #12]
 800e47e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e480:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 800e482:	68fb      	ldr	r3, [r7, #12]
 800e484:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800e488:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 800e48a:	f7f8 f9df 	bl	800684c <HAL_DMA_Start_IT>
 800e48e:	4603      	mov	r3, r0
 800e490:	2b00      	cmp	r3, #0
 800e492:	d011      	beq.n	800e4b8 <HAL_SPI_TransmitReceive_DMA+0x22c>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800e494:	68fb      	ldr	r3, [r7, #12]
 800e496:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e49a:	f043 0210 	orr.w	r2, r3, #16
 800e49e:	68fb      	ldr	r3, [r7, #12]
 800e4a0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    hspi->State = HAL_SPI_STATE_READY;
 800e4a4:	68fb      	ldr	r3, [r7, #12]
 800e4a6:	2201      	movs	r2, #1
 800e4a8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 800e4ac:	68fb      	ldr	r3, [r7, #12]
 800e4ae:	2200      	movs	r2, #0
 800e4b0:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    return HAL_ERROR;
 800e4b4:	2301      	movs	r3, #1
 800e4b6:	e083      	b.n	800e5c0 <HAL_SPI_TransmitReceive_DMA+0x334>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 800e4b8:	68fb      	ldr	r3, [r7, #12]
 800e4ba:	681b      	ldr	r3, [r3, #0]
 800e4bc:	689a      	ldr	r2, [r3, #8]
 800e4be:	68fb      	ldr	r3, [r7, #12]
 800e4c0:	681b      	ldr	r3, [r3, #0]
 800e4c2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800e4c6:	609a      	str	r2, [r3, #8]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 800e4c8:	68fb      	ldr	r3, [r7, #12]
 800e4ca:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e4cc:	2200      	movs	r2, #0
 800e4ce:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 800e4d0:	68fb      	ldr	r3, [r7, #12]
 800e4d2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e4d4:	2200      	movs	r2, #0
 800e4d6:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi->hdmatx->XferAbortCallback    = NULL;
 800e4d8:	68fb      	ldr	r3, [r7, #12]
 800e4da:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e4dc:	2200      	movs	r2, #0
 800e4de:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback    = SPI_DMAError;
 800e4e0:	68fb      	ldr	r3, [r7, #12]
 800e4e2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e4e4:	4a3a      	ldr	r2, [pc, #232]	@ (800e5d0 <HAL_SPI_TransmitReceive_DMA+0x344>)
 800e4e6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 800e4e8:	68fb      	ldr	r3, [r7, #12]
 800e4ea:	6f98      	ldr	r0, [r3, #120]	@ 0x78
 800e4ec:	68fb      	ldr	r3, [r7, #12]
 800e4ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800e4f0:	4619      	mov	r1, r3
 800e4f2:	68fb      	ldr	r3, [r7, #12]
 800e4f4:	681b      	ldr	r3, [r3, #0]
 800e4f6:	3320      	adds	r3, #32
 800e4f8:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800e4fa:	68fb      	ldr	r3, [r7, #12]
 800e4fc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800e500:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 800e502:	f7f8 f9a3 	bl	800684c <HAL_DMA_Start_IT>
 800e506:	4603      	mov	r3, r0
 800e508:	2b00      	cmp	r3, #0
 800e50a:	d016      	beq.n	800e53a <HAL_SPI_TransmitReceive_DMA+0x2ae>
  {
    /* Abort Rx DMA Channel already started */
    (void)HAL_DMA_Abort(hspi->hdmarx);
 800e50c:	68fb      	ldr	r3, [r7, #12]
 800e50e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800e510:	4618      	mov	r0, r3
 800e512:	f7f8 fc05 	bl	8006d20 <HAL_DMA_Abort>

    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800e516:	68fb      	ldr	r3, [r7, #12]
 800e518:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e51c:	f043 0210 	orr.w	r2, r3, #16
 800e520:	68fb      	ldr	r3, [r7, #12]
 800e522:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    hspi->State = HAL_SPI_STATE_READY;
 800e526:	68fb      	ldr	r3, [r7, #12]
 800e528:	2201      	movs	r2, #1
 800e52a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 800e52e:	68fb      	ldr	r3, [r7, #12]
 800e530:	2200      	movs	r2, #0
 800e532:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    return HAL_ERROR;
 800e536:	2301      	movs	r3, #1
 800e538:	e042      	b.n	800e5c0 <HAL_SPI_TransmitReceive_DMA+0x334>
  }

  if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 800e53a:	68fb      	ldr	r3, [r7, #12]
 800e53c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e53e:	69db      	ldr	r3, [r3, #28]
 800e540:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e544:	d108      	bne.n	800e558 <HAL_SPI_TransmitReceive_DMA+0x2cc>
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 800e546:	68fb      	ldr	r3, [r7, #12]
 800e548:	681b      	ldr	r3, [r3, #0]
 800e54a:	6859      	ldr	r1, [r3, #4]
 800e54c:	68fb      	ldr	r3, [r7, #12]
 800e54e:	681a      	ldr	r2, [r3, #0]
 800e550:	4b20      	ldr	r3, [pc, #128]	@ (800e5d4 <HAL_SPI_TransmitReceive_DMA+0x348>)
 800e552:	400b      	ands	r3, r1
 800e554:	6053      	str	r3, [r2, #4]
 800e556:	e009      	b.n	800e56c <HAL_SPI_TransmitReceive_DMA+0x2e0>
  }
  else
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800e558:	68fb      	ldr	r3, [r7, #12]
 800e55a:	681b      	ldr	r3, [r3, #0]
 800e55c:	685a      	ldr	r2, [r3, #4]
 800e55e:	4b1d      	ldr	r3, [pc, #116]	@ (800e5d4 <HAL_SPI_TransmitReceive_DMA+0x348>)
 800e560:	4013      	ands	r3, r2
 800e562:	8879      	ldrh	r1, [r7, #2]
 800e564:	68fa      	ldr	r2, [r7, #12]
 800e566:	6812      	ldr	r2, [r2, #0]
 800e568:	430b      	orrs	r3, r1
 800e56a:	6053      	str	r3, [r2, #4]
  }

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 800e56c:	68fb      	ldr	r3, [r7, #12]
 800e56e:	681b      	ldr	r3, [r3, #0]
 800e570:	689a      	ldr	r2, [r3, #8]
 800e572:	68fb      	ldr	r3, [r7, #12]
 800e574:	681b      	ldr	r3, [r3, #0]
 800e576:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800e57a:	609a      	str	r2, [r3, #8]

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_OVR | SPI_IT_UDR | SPI_IT_FRE | SPI_IT_MODF));
 800e57c:	68fb      	ldr	r3, [r7, #12]
 800e57e:	681b      	ldr	r3, [r3, #0]
 800e580:	691a      	ldr	r2, [r3, #16]
 800e582:	68fb      	ldr	r3, [r7, #12]
 800e584:	681b      	ldr	r3, [r3, #0]
 800e586:	f442 7258 	orr.w	r2, r2, #864	@ 0x360
 800e58a:	611a      	str	r2, [r3, #16]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800e58c:	68fb      	ldr	r3, [r7, #12]
 800e58e:	681b      	ldr	r3, [r3, #0]
 800e590:	681a      	ldr	r2, [r3, #0]
 800e592:	68fb      	ldr	r3, [r7, #12]
 800e594:	681b      	ldr	r3, [r3, #0]
 800e596:	f042 0201 	orr.w	r2, r2, #1
 800e59a:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800e59c:	68fb      	ldr	r3, [r7, #12]
 800e59e:	685b      	ldr	r3, [r3, #4]
 800e5a0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800e5a4:	d107      	bne.n	800e5b6 <HAL_SPI_TransmitReceive_DMA+0x32a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800e5a6:	68fb      	ldr	r3, [r7, #12]
 800e5a8:	681b      	ldr	r3, [r3, #0]
 800e5aa:	681a      	ldr	r2, [r3, #0]
 800e5ac:	68fb      	ldr	r3, [r7, #12]
 800e5ae:	681b      	ldr	r3, [r3, #0]
 800e5b0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800e5b4:	601a      	str	r2, [r3, #0]
  }

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800e5b6:	68fb      	ldr	r3, [r7, #12]
 800e5b8:	2200      	movs	r2, #0
 800e5ba:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 800e5be:	2300      	movs	r3, #0
}
 800e5c0:	4618      	mov	r0, r3
 800e5c2:	3710      	adds	r7, #16
 800e5c4:	46bd      	mov	sp, r7
 800e5c6:	bd80      	pop	{r7, pc}
 800e5c8:	0800e65b 	.word	0x0800e65b
 800e5cc:	0800e615 	.word	0x0800e615
 800e5d0:	0800e677 	.word	0x0800e677
 800e5d4:	ffff0000 	.word	0xffff0000

0800e5d8 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800e5d8:	b480      	push	{r7}
 800e5da:	b083      	sub	sp, #12
 800e5dc:	af00      	add	r7, sp, #0
 800e5de:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 800e5e0:	bf00      	nop
 800e5e2:	370c      	adds	r7, #12
 800e5e4:	46bd      	mov	sp, r7
 800e5e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5ea:	4770      	bx	lr

0800e5ec <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800e5ec:	b480      	push	{r7}
 800e5ee:	b083      	sub	sp, #12
 800e5f0:	af00      	add	r7, sp, #0
 800e5f2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 800e5f4:	bf00      	nop
 800e5f6:	370c      	adds	r7, #12
 800e5f8:	46bd      	mov	sp, r7
 800e5fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5fe:	4770      	bx	lr

0800e600 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800e600:	b480      	push	{r7}
 800e602:	b083      	sub	sp, #12
 800e604:	af00      	add	r7, sp, #0
 800e606:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800e608:	bf00      	nop
 800e60a:	370c      	adds	r7, #12
 800e60c:	46bd      	mov	sp, r7
 800e60e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e612:	4770      	bx	lr

0800e614 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800e614:	b580      	push	{r7, lr}
 800e616:	b084      	sub	sp, #16
 800e618:	af00      	add	r7, sp, #0
 800e61a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800e61c:	687b      	ldr	r3, [r7, #4]
 800e61e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e620:	60fb      	str	r3, [r7, #12]

  if (hspi->State != HAL_SPI_STATE_ABORT)
 800e622:	68fb      	ldr	r3, [r7, #12]
 800e624:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800e628:	b2db      	uxtb	r3, r3
 800e62a:	2b07      	cmp	r3, #7
 800e62c:	d011      	beq.n	800e652 <SPI_DMATransmitReceiveCplt+0x3e>
  {
    if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 800e62e:	68fb      	ldr	r3, [r7, #12]
 800e630:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e632:	69db      	ldr	r3, [r3, #28]
 800e634:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e638:	d103      	bne.n	800e642 <SPI_DMATransmitReceiveCplt+0x2e>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->TxRxCpltCallback(hspi);
#else
      HAL_SPI_TxRxCpltCallback(hspi);
 800e63a:	68f8      	ldr	r0, [r7, #12]
 800e63c:	f7ff ffcc 	bl	800e5d8 <HAL_SPI_TxRxCpltCallback>
    {
      /* Enable EOT interrupt */
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
    }
  }
}
 800e640:	e007      	b.n	800e652 <SPI_DMATransmitReceiveCplt+0x3e>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 800e642:	68fb      	ldr	r3, [r7, #12]
 800e644:	681b      	ldr	r3, [r3, #0]
 800e646:	691a      	ldr	r2, [r3, #16]
 800e648:	68fb      	ldr	r3, [r7, #12]
 800e64a:	681b      	ldr	r3, [r3, #0]
 800e64c:	f042 0208 	orr.w	r2, r2, #8
 800e650:	611a      	str	r2, [r3, #16]
}
 800e652:	bf00      	nop
 800e654:	3710      	adds	r7, #16
 800e656:	46bd      	mov	sp, r7
 800e658:	bd80      	pop	{r7, pc}

0800e65a <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma) /* Derogation MISRAC2012-Rule-8.13 */
{
 800e65a:	b580      	push	{r7, lr}
 800e65c:	b084      	sub	sp, #16
 800e65e:	af00      	add	r7, sp, #0
 800e660:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)
 800e662:	687b      	ldr	r3, [r7, #4]
 800e664:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e666:	60fb      	str	r3, [r7, #12]
                            ((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-8.13 */

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 800e668:	68f8      	ldr	r0, [r7, #12]
 800e66a:	f7ff ffbf 	bl	800e5ec <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800e66e:	bf00      	nop
 800e670:	3710      	adds	r7, #16
 800e672:	46bd      	mov	sp, r7
 800e674:	bd80      	pop	{r7, pc}

0800e676 <SPI_DMAError>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800e676:	b580      	push	{r7, lr}
 800e678:	b084      	sub	sp, #16
 800e67a:	af00      	add	r7, sp, #0
 800e67c:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800e67e:	687b      	ldr	r3, [r7, #4]
 800e680:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e682:	60fb      	str	r3, [r7, #12]

  /* if DMA error is FIFO error ignore it */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800e684:	6878      	ldr	r0, [r7, #4]
 800e686:	f7f9 fd93 	bl	80081b0 <HAL_DMA_GetError>
 800e68a:	4603      	mov	r3, r0
 800e68c:	2b02      	cmp	r3, #2
 800e68e:	d011      	beq.n	800e6b4 <SPI_DMAError+0x3e>
  {
    /* Call SPI standard close procedure */
    SPI_CloseTransfer(hspi);
 800e690:	68f8      	ldr	r0, [r7, #12]
 800e692:	f000 f813 	bl	800e6bc <SPI_CloseTransfer>

    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800e696:	68fb      	ldr	r3, [r7, #12]
 800e698:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e69c:	f043 0210 	orr.w	r2, r3, #16
 800e6a0:	68fb      	ldr	r3, [r7, #12]
 800e6a2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    hspi->State = HAL_SPI_STATE_READY;
 800e6a6:	68fb      	ldr	r3, [r7, #12]
 800e6a8:	2201      	movs	r2, #1
 800e6aa:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 800e6ae:	68f8      	ldr	r0, [r7, #12]
 800e6b0:	f7ff ffa6 	bl	800e600 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 800e6b4:	bf00      	nop
 800e6b6:	3710      	adds	r7, #16
 800e6b8:	46bd      	mov	sp, r7
 800e6ba:	bd80      	pop	{r7, pc}

0800e6bc <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800e6bc:	b480      	push	{r7}
 800e6be:	b085      	sub	sp, #20
 800e6c0:	af00      	add	r7, sp, #0
 800e6c2:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800e6c4:	687b      	ldr	r3, [r7, #4]
 800e6c6:	681b      	ldr	r3, [r3, #0]
 800e6c8:	695b      	ldr	r3, [r3, #20]
 800e6ca:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800e6cc:	687b      	ldr	r3, [r7, #4]
 800e6ce:	681b      	ldr	r3, [r3, #0]
 800e6d0:	699a      	ldr	r2, [r3, #24]
 800e6d2:	687b      	ldr	r3, [r7, #4]
 800e6d4:	681b      	ldr	r3, [r3, #0]
 800e6d6:	f042 0208 	orr.w	r2, r2, #8
 800e6da:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800e6dc:	687b      	ldr	r3, [r7, #4]
 800e6de:	681b      	ldr	r3, [r3, #0]
 800e6e0:	699a      	ldr	r2, [r3, #24]
 800e6e2:	687b      	ldr	r3, [r7, #4]
 800e6e4:	681b      	ldr	r3, [r3, #0]
 800e6e6:	f042 0210 	orr.w	r2, r2, #16
 800e6ea:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800e6ec:	687b      	ldr	r3, [r7, #4]
 800e6ee:	681b      	ldr	r3, [r3, #0]
 800e6f0:	681a      	ldr	r2, [r3, #0]
 800e6f2:	687b      	ldr	r3, [r7, #4]
 800e6f4:	681b      	ldr	r3, [r3, #0]
 800e6f6:	f022 0201 	bic.w	r2, r2, #1
 800e6fa:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800e6fc:	687b      	ldr	r3, [r7, #4]
 800e6fe:	681b      	ldr	r3, [r3, #0]
 800e700:	6919      	ldr	r1, [r3, #16]
 800e702:	687b      	ldr	r3, [r7, #4]
 800e704:	681a      	ldr	r2, [r3, #0]
 800e706:	4b3c      	ldr	r3, [pc, #240]	@ (800e7f8 <SPI_CloseTransfer+0x13c>)
 800e708:	400b      	ands	r3, r1
 800e70a:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800e70c:	687b      	ldr	r3, [r7, #4]
 800e70e:	681b      	ldr	r3, [r3, #0]
 800e710:	689a      	ldr	r2, [r3, #8]
 800e712:	687b      	ldr	r3, [r7, #4]
 800e714:	681b      	ldr	r3, [r3, #0]
 800e716:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800e71a:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800e71c:	687b      	ldr	r3, [r7, #4]
 800e71e:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800e722:	b2db      	uxtb	r3, r3
 800e724:	2b04      	cmp	r3, #4
 800e726:	d014      	beq.n	800e752 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800e728:	68fb      	ldr	r3, [r7, #12]
 800e72a:	f003 0320 	and.w	r3, r3, #32
 800e72e:	2b00      	cmp	r3, #0
 800e730:	d00f      	beq.n	800e752 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800e732:	687b      	ldr	r3, [r7, #4]
 800e734:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e738:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800e73c:	687b      	ldr	r3, [r7, #4]
 800e73e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800e742:	687b      	ldr	r3, [r7, #4]
 800e744:	681b      	ldr	r3, [r3, #0]
 800e746:	699a      	ldr	r2, [r3, #24]
 800e748:	687b      	ldr	r3, [r7, #4]
 800e74a:	681b      	ldr	r3, [r3, #0]
 800e74c:	f042 0220 	orr.w	r2, r2, #32
 800e750:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800e752:	687b      	ldr	r3, [r7, #4]
 800e754:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800e758:	b2db      	uxtb	r3, r3
 800e75a:	2b03      	cmp	r3, #3
 800e75c:	d014      	beq.n	800e788 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800e75e:	68fb      	ldr	r3, [r7, #12]
 800e760:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e764:	2b00      	cmp	r3, #0
 800e766:	d00f      	beq.n	800e788 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800e768:	687b      	ldr	r3, [r7, #4]
 800e76a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e76e:	f043 0204 	orr.w	r2, r3, #4
 800e772:	687b      	ldr	r3, [r7, #4]
 800e774:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800e778:	687b      	ldr	r3, [r7, #4]
 800e77a:	681b      	ldr	r3, [r3, #0]
 800e77c:	699a      	ldr	r2, [r3, #24]
 800e77e:	687b      	ldr	r3, [r7, #4]
 800e780:	681b      	ldr	r3, [r3, #0]
 800e782:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800e786:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800e788:	68fb      	ldr	r3, [r7, #12]
 800e78a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800e78e:	2b00      	cmp	r3, #0
 800e790:	d00f      	beq.n	800e7b2 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800e792:	687b      	ldr	r3, [r7, #4]
 800e794:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e798:	f043 0201 	orr.w	r2, r3, #1
 800e79c:	687b      	ldr	r3, [r7, #4]
 800e79e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800e7a2:	687b      	ldr	r3, [r7, #4]
 800e7a4:	681b      	ldr	r3, [r3, #0]
 800e7a6:	699a      	ldr	r2, [r3, #24]
 800e7a8:	687b      	ldr	r3, [r7, #4]
 800e7aa:	681b      	ldr	r3, [r3, #0]
 800e7ac:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800e7b0:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800e7b2:	68fb      	ldr	r3, [r7, #12]
 800e7b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e7b8:	2b00      	cmp	r3, #0
 800e7ba:	d00f      	beq.n	800e7dc <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800e7bc:	687b      	ldr	r3, [r7, #4]
 800e7be:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e7c2:	f043 0208 	orr.w	r2, r3, #8
 800e7c6:	687b      	ldr	r3, [r7, #4]
 800e7c8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800e7cc:	687b      	ldr	r3, [r7, #4]
 800e7ce:	681b      	ldr	r3, [r3, #0]
 800e7d0:	699a      	ldr	r2, [r3, #24]
 800e7d2:	687b      	ldr	r3, [r7, #4]
 800e7d4:	681b      	ldr	r3, [r3, #0]
 800e7d6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800e7da:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800e7dc:	687b      	ldr	r3, [r7, #4]
 800e7de:	2200      	movs	r2, #0
 800e7e0:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800e7e4:	687b      	ldr	r3, [r7, #4]
 800e7e6:	2200      	movs	r2, #0
 800e7e8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 800e7ec:	bf00      	nop
 800e7ee:	3714      	adds	r7, #20
 800e7f0:	46bd      	mov	sp, r7
 800e7f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7f6:	4770      	bx	lr
 800e7f8:	fffffc90 	.word	0xfffffc90

0800e7fc <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800e7fc:	b480      	push	{r7}
 800e7fe:	b085      	sub	sp, #20
 800e800:	af00      	add	r7, sp, #0
 800e802:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800e804:	687b      	ldr	r3, [r7, #4]
 800e806:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e808:	095b      	lsrs	r3, r3, #5
 800e80a:	3301      	adds	r3, #1
 800e80c:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800e80e:	687b      	ldr	r3, [r7, #4]
 800e810:	68db      	ldr	r3, [r3, #12]
 800e812:	3301      	adds	r3, #1
 800e814:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800e816:	68bb      	ldr	r3, [r7, #8]
 800e818:	3307      	adds	r3, #7
 800e81a:	08db      	lsrs	r3, r3, #3
 800e81c:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800e81e:	68bb      	ldr	r3, [r7, #8]
 800e820:	68fa      	ldr	r2, [r7, #12]
 800e822:	fb02 f303 	mul.w	r3, r2, r3
}
 800e826:	4618      	mov	r0, r3
 800e828:	3714      	adds	r7, #20
 800e82a:	46bd      	mov	sp, r7
 800e82c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e830:	4770      	bx	lr

0800e832 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800e832:	b580      	push	{r7, lr}
 800e834:	b082      	sub	sp, #8
 800e836:	af00      	add	r7, sp, #0
 800e838:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800e83a:	687b      	ldr	r3, [r7, #4]
 800e83c:	2b00      	cmp	r3, #0
 800e83e:	d101      	bne.n	800e844 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800e840:	2301      	movs	r3, #1
 800e842:	e042      	b.n	800e8ca <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800e844:	687b      	ldr	r3, [r7, #4]
 800e846:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e84a:	2b00      	cmp	r3, #0
 800e84c:	d106      	bne.n	800e85c <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800e84e:	687b      	ldr	r3, [r7, #4]
 800e850:	2200      	movs	r2, #0
 800e852:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800e856:	6878      	ldr	r0, [r7, #4]
 800e858:	f7f6 f882 	bl	8004960 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800e85c:	687b      	ldr	r3, [r7, #4]
 800e85e:	2224      	movs	r2, #36	@ 0x24
 800e860:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800e864:	687b      	ldr	r3, [r7, #4]
 800e866:	681b      	ldr	r3, [r3, #0]
 800e868:	681a      	ldr	r2, [r3, #0]
 800e86a:	687b      	ldr	r3, [r7, #4]
 800e86c:	681b      	ldr	r3, [r3, #0]
 800e86e:	f022 0201 	bic.w	r2, r2, #1
 800e872:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800e874:	687b      	ldr	r3, [r7, #4]
 800e876:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e878:	2b00      	cmp	r3, #0
 800e87a:	d002      	beq.n	800e882 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800e87c:	6878      	ldr	r0, [r7, #4]
 800e87e:	f000 fe1f 	bl	800f4c0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800e882:	6878      	ldr	r0, [r7, #4]
 800e884:	f000 f8b4 	bl	800e9f0 <UART_SetConfig>
 800e888:	4603      	mov	r3, r0
 800e88a:	2b01      	cmp	r3, #1
 800e88c:	d101      	bne.n	800e892 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800e88e:	2301      	movs	r3, #1
 800e890:	e01b      	b.n	800e8ca <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800e892:	687b      	ldr	r3, [r7, #4]
 800e894:	681b      	ldr	r3, [r3, #0]
 800e896:	685a      	ldr	r2, [r3, #4]
 800e898:	687b      	ldr	r3, [r7, #4]
 800e89a:	681b      	ldr	r3, [r3, #0]
 800e89c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800e8a0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800e8a2:	687b      	ldr	r3, [r7, #4]
 800e8a4:	681b      	ldr	r3, [r3, #0]
 800e8a6:	689a      	ldr	r2, [r3, #8]
 800e8a8:	687b      	ldr	r3, [r7, #4]
 800e8aa:	681b      	ldr	r3, [r3, #0]
 800e8ac:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800e8b0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800e8b2:	687b      	ldr	r3, [r7, #4]
 800e8b4:	681b      	ldr	r3, [r3, #0]
 800e8b6:	681a      	ldr	r2, [r3, #0]
 800e8b8:	687b      	ldr	r3, [r7, #4]
 800e8ba:	681b      	ldr	r3, [r3, #0]
 800e8bc:	f042 0201 	orr.w	r2, r2, #1
 800e8c0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800e8c2:	6878      	ldr	r0, [r7, #4]
 800e8c4:	f000 fe9e 	bl	800f604 <UART_CheckIdleState>
 800e8c8:	4603      	mov	r3, r0
}
 800e8ca:	4618      	mov	r0, r3
 800e8cc:	3708      	adds	r7, #8
 800e8ce:	46bd      	mov	sp, r7
 800e8d0:	bd80      	pop	{r7, pc}

0800e8d2 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e8d2:	b580      	push	{r7, lr}
 800e8d4:	b08a      	sub	sp, #40	@ 0x28
 800e8d6:	af02      	add	r7, sp, #8
 800e8d8:	60f8      	str	r0, [r7, #12]
 800e8da:	60b9      	str	r1, [r7, #8]
 800e8dc:	603b      	str	r3, [r7, #0]
 800e8de:	4613      	mov	r3, r2
 800e8e0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800e8e2:	68fb      	ldr	r3, [r7, #12]
 800e8e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e8e8:	2b20      	cmp	r3, #32
 800e8ea:	d17b      	bne.n	800e9e4 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800e8ec:	68bb      	ldr	r3, [r7, #8]
 800e8ee:	2b00      	cmp	r3, #0
 800e8f0:	d002      	beq.n	800e8f8 <HAL_UART_Transmit+0x26>
 800e8f2:	88fb      	ldrh	r3, [r7, #6]
 800e8f4:	2b00      	cmp	r3, #0
 800e8f6:	d101      	bne.n	800e8fc <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800e8f8:	2301      	movs	r3, #1
 800e8fa:	e074      	b.n	800e9e6 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e8fc:	68fb      	ldr	r3, [r7, #12]
 800e8fe:	2200      	movs	r2, #0
 800e900:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800e904:	68fb      	ldr	r3, [r7, #12]
 800e906:	2221      	movs	r2, #33	@ 0x21
 800e908:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800e90c:	f7f7 fa64 	bl	8005dd8 <HAL_GetTick>
 800e910:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800e912:	68fb      	ldr	r3, [r7, #12]
 800e914:	88fa      	ldrh	r2, [r7, #6]
 800e916:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800e91a:	68fb      	ldr	r3, [r7, #12]
 800e91c:	88fa      	ldrh	r2, [r7, #6]
 800e91e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e922:	68fb      	ldr	r3, [r7, #12]
 800e924:	689b      	ldr	r3, [r3, #8]
 800e926:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e92a:	d108      	bne.n	800e93e <HAL_UART_Transmit+0x6c>
 800e92c:	68fb      	ldr	r3, [r7, #12]
 800e92e:	691b      	ldr	r3, [r3, #16]
 800e930:	2b00      	cmp	r3, #0
 800e932:	d104      	bne.n	800e93e <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800e934:	2300      	movs	r3, #0
 800e936:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800e938:	68bb      	ldr	r3, [r7, #8]
 800e93a:	61bb      	str	r3, [r7, #24]
 800e93c:	e003      	b.n	800e946 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800e93e:	68bb      	ldr	r3, [r7, #8]
 800e940:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800e942:	2300      	movs	r3, #0
 800e944:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800e946:	e030      	b.n	800e9aa <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800e948:	683b      	ldr	r3, [r7, #0]
 800e94a:	9300      	str	r3, [sp, #0]
 800e94c:	697b      	ldr	r3, [r7, #20]
 800e94e:	2200      	movs	r2, #0
 800e950:	2180      	movs	r1, #128	@ 0x80
 800e952:	68f8      	ldr	r0, [r7, #12]
 800e954:	f000 ff00 	bl	800f758 <UART_WaitOnFlagUntilTimeout>
 800e958:	4603      	mov	r3, r0
 800e95a:	2b00      	cmp	r3, #0
 800e95c:	d005      	beq.n	800e96a <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800e95e:	68fb      	ldr	r3, [r7, #12]
 800e960:	2220      	movs	r2, #32
 800e962:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800e966:	2303      	movs	r3, #3
 800e968:	e03d      	b.n	800e9e6 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800e96a:	69fb      	ldr	r3, [r7, #28]
 800e96c:	2b00      	cmp	r3, #0
 800e96e:	d10b      	bne.n	800e988 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800e970:	69bb      	ldr	r3, [r7, #24]
 800e972:	881b      	ldrh	r3, [r3, #0]
 800e974:	461a      	mov	r2, r3
 800e976:	68fb      	ldr	r3, [r7, #12]
 800e978:	681b      	ldr	r3, [r3, #0]
 800e97a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800e97e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800e980:	69bb      	ldr	r3, [r7, #24]
 800e982:	3302      	adds	r3, #2
 800e984:	61bb      	str	r3, [r7, #24]
 800e986:	e007      	b.n	800e998 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800e988:	69fb      	ldr	r3, [r7, #28]
 800e98a:	781a      	ldrb	r2, [r3, #0]
 800e98c:	68fb      	ldr	r3, [r7, #12]
 800e98e:	681b      	ldr	r3, [r3, #0]
 800e990:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800e992:	69fb      	ldr	r3, [r7, #28]
 800e994:	3301      	adds	r3, #1
 800e996:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800e998:	68fb      	ldr	r3, [r7, #12]
 800e99a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800e99e:	b29b      	uxth	r3, r3
 800e9a0:	3b01      	subs	r3, #1
 800e9a2:	b29a      	uxth	r2, r3
 800e9a4:	68fb      	ldr	r3, [r7, #12]
 800e9a6:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800e9aa:	68fb      	ldr	r3, [r7, #12]
 800e9ac:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800e9b0:	b29b      	uxth	r3, r3
 800e9b2:	2b00      	cmp	r3, #0
 800e9b4:	d1c8      	bne.n	800e948 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800e9b6:	683b      	ldr	r3, [r7, #0]
 800e9b8:	9300      	str	r3, [sp, #0]
 800e9ba:	697b      	ldr	r3, [r7, #20]
 800e9bc:	2200      	movs	r2, #0
 800e9be:	2140      	movs	r1, #64	@ 0x40
 800e9c0:	68f8      	ldr	r0, [r7, #12]
 800e9c2:	f000 fec9 	bl	800f758 <UART_WaitOnFlagUntilTimeout>
 800e9c6:	4603      	mov	r3, r0
 800e9c8:	2b00      	cmp	r3, #0
 800e9ca:	d005      	beq.n	800e9d8 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800e9cc:	68fb      	ldr	r3, [r7, #12]
 800e9ce:	2220      	movs	r2, #32
 800e9d0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800e9d4:	2303      	movs	r3, #3
 800e9d6:	e006      	b.n	800e9e6 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800e9d8:	68fb      	ldr	r3, [r7, #12]
 800e9da:	2220      	movs	r2, #32
 800e9dc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800e9e0:	2300      	movs	r3, #0
 800e9e2:	e000      	b.n	800e9e6 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800e9e4:	2302      	movs	r3, #2
  }
}
 800e9e6:	4618      	mov	r0, r3
 800e9e8:	3720      	adds	r7, #32
 800e9ea:	46bd      	mov	sp, r7
 800e9ec:	bd80      	pop	{r7, pc}
	...

0800e9f0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800e9f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800e9f4:	b092      	sub	sp, #72	@ 0x48
 800e9f6:	af00      	add	r7, sp, #0
 800e9f8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800e9fa:	2300      	movs	r3, #0
 800e9fc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800ea00:	697b      	ldr	r3, [r7, #20]
 800ea02:	689a      	ldr	r2, [r3, #8]
 800ea04:	697b      	ldr	r3, [r7, #20]
 800ea06:	691b      	ldr	r3, [r3, #16]
 800ea08:	431a      	orrs	r2, r3
 800ea0a:	697b      	ldr	r3, [r7, #20]
 800ea0c:	695b      	ldr	r3, [r3, #20]
 800ea0e:	431a      	orrs	r2, r3
 800ea10:	697b      	ldr	r3, [r7, #20]
 800ea12:	69db      	ldr	r3, [r3, #28]
 800ea14:	4313      	orrs	r3, r2
 800ea16:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800ea18:	697b      	ldr	r3, [r7, #20]
 800ea1a:	681b      	ldr	r3, [r3, #0]
 800ea1c:	681a      	ldr	r2, [r3, #0]
 800ea1e:	4bbe      	ldr	r3, [pc, #760]	@ (800ed18 <UART_SetConfig+0x328>)
 800ea20:	4013      	ands	r3, r2
 800ea22:	697a      	ldr	r2, [r7, #20]
 800ea24:	6812      	ldr	r2, [r2, #0]
 800ea26:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800ea28:	430b      	orrs	r3, r1
 800ea2a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ea2c:	697b      	ldr	r3, [r7, #20]
 800ea2e:	681b      	ldr	r3, [r3, #0]
 800ea30:	685b      	ldr	r3, [r3, #4]
 800ea32:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800ea36:	697b      	ldr	r3, [r7, #20]
 800ea38:	68da      	ldr	r2, [r3, #12]
 800ea3a:	697b      	ldr	r3, [r7, #20]
 800ea3c:	681b      	ldr	r3, [r3, #0]
 800ea3e:	430a      	orrs	r2, r1
 800ea40:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800ea42:	697b      	ldr	r3, [r7, #20]
 800ea44:	699b      	ldr	r3, [r3, #24]
 800ea46:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800ea48:	697b      	ldr	r3, [r7, #20]
 800ea4a:	681b      	ldr	r3, [r3, #0]
 800ea4c:	4ab3      	ldr	r2, [pc, #716]	@ (800ed1c <UART_SetConfig+0x32c>)
 800ea4e:	4293      	cmp	r3, r2
 800ea50:	d004      	beq.n	800ea5c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800ea52:	697b      	ldr	r3, [r7, #20]
 800ea54:	6a1b      	ldr	r3, [r3, #32]
 800ea56:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ea58:	4313      	orrs	r3, r2
 800ea5a:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800ea5c:	697b      	ldr	r3, [r7, #20]
 800ea5e:	681b      	ldr	r3, [r3, #0]
 800ea60:	689a      	ldr	r2, [r3, #8]
 800ea62:	4baf      	ldr	r3, [pc, #700]	@ (800ed20 <UART_SetConfig+0x330>)
 800ea64:	4013      	ands	r3, r2
 800ea66:	697a      	ldr	r2, [r7, #20]
 800ea68:	6812      	ldr	r2, [r2, #0]
 800ea6a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800ea6c:	430b      	orrs	r3, r1
 800ea6e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800ea70:	697b      	ldr	r3, [r7, #20]
 800ea72:	681b      	ldr	r3, [r3, #0]
 800ea74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ea76:	f023 010f 	bic.w	r1, r3, #15
 800ea7a:	697b      	ldr	r3, [r7, #20]
 800ea7c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ea7e:	697b      	ldr	r3, [r7, #20]
 800ea80:	681b      	ldr	r3, [r3, #0]
 800ea82:	430a      	orrs	r2, r1
 800ea84:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800ea86:	697b      	ldr	r3, [r7, #20]
 800ea88:	681b      	ldr	r3, [r3, #0]
 800ea8a:	4aa6      	ldr	r2, [pc, #664]	@ (800ed24 <UART_SetConfig+0x334>)
 800ea8c:	4293      	cmp	r3, r2
 800ea8e:	d177      	bne.n	800eb80 <UART_SetConfig+0x190>
 800ea90:	4ba5      	ldr	r3, [pc, #660]	@ (800ed28 <UART_SetConfig+0x338>)
 800ea92:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ea94:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800ea98:	2b28      	cmp	r3, #40	@ 0x28
 800ea9a:	d86d      	bhi.n	800eb78 <UART_SetConfig+0x188>
 800ea9c:	a201      	add	r2, pc, #4	@ (adr r2, 800eaa4 <UART_SetConfig+0xb4>)
 800ea9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eaa2:	bf00      	nop
 800eaa4:	0800eb49 	.word	0x0800eb49
 800eaa8:	0800eb79 	.word	0x0800eb79
 800eaac:	0800eb79 	.word	0x0800eb79
 800eab0:	0800eb79 	.word	0x0800eb79
 800eab4:	0800eb79 	.word	0x0800eb79
 800eab8:	0800eb79 	.word	0x0800eb79
 800eabc:	0800eb79 	.word	0x0800eb79
 800eac0:	0800eb79 	.word	0x0800eb79
 800eac4:	0800eb51 	.word	0x0800eb51
 800eac8:	0800eb79 	.word	0x0800eb79
 800eacc:	0800eb79 	.word	0x0800eb79
 800ead0:	0800eb79 	.word	0x0800eb79
 800ead4:	0800eb79 	.word	0x0800eb79
 800ead8:	0800eb79 	.word	0x0800eb79
 800eadc:	0800eb79 	.word	0x0800eb79
 800eae0:	0800eb79 	.word	0x0800eb79
 800eae4:	0800eb59 	.word	0x0800eb59
 800eae8:	0800eb79 	.word	0x0800eb79
 800eaec:	0800eb79 	.word	0x0800eb79
 800eaf0:	0800eb79 	.word	0x0800eb79
 800eaf4:	0800eb79 	.word	0x0800eb79
 800eaf8:	0800eb79 	.word	0x0800eb79
 800eafc:	0800eb79 	.word	0x0800eb79
 800eb00:	0800eb79 	.word	0x0800eb79
 800eb04:	0800eb61 	.word	0x0800eb61
 800eb08:	0800eb79 	.word	0x0800eb79
 800eb0c:	0800eb79 	.word	0x0800eb79
 800eb10:	0800eb79 	.word	0x0800eb79
 800eb14:	0800eb79 	.word	0x0800eb79
 800eb18:	0800eb79 	.word	0x0800eb79
 800eb1c:	0800eb79 	.word	0x0800eb79
 800eb20:	0800eb79 	.word	0x0800eb79
 800eb24:	0800eb69 	.word	0x0800eb69
 800eb28:	0800eb79 	.word	0x0800eb79
 800eb2c:	0800eb79 	.word	0x0800eb79
 800eb30:	0800eb79 	.word	0x0800eb79
 800eb34:	0800eb79 	.word	0x0800eb79
 800eb38:	0800eb79 	.word	0x0800eb79
 800eb3c:	0800eb79 	.word	0x0800eb79
 800eb40:	0800eb79 	.word	0x0800eb79
 800eb44:	0800eb71 	.word	0x0800eb71
 800eb48:	2301      	movs	r3, #1
 800eb4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eb4e:	e222      	b.n	800ef96 <UART_SetConfig+0x5a6>
 800eb50:	2304      	movs	r3, #4
 800eb52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eb56:	e21e      	b.n	800ef96 <UART_SetConfig+0x5a6>
 800eb58:	2308      	movs	r3, #8
 800eb5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eb5e:	e21a      	b.n	800ef96 <UART_SetConfig+0x5a6>
 800eb60:	2310      	movs	r3, #16
 800eb62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eb66:	e216      	b.n	800ef96 <UART_SetConfig+0x5a6>
 800eb68:	2320      	movs	r3, #32
 800eb6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eb6e:	e212      	b.n	800ef96 <UART_SetConfig+0x5a6>
 800eb70:	2340      	movs	r3, #64	@ 0x40
 800eb72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eb76:	e20e      	b.n	800ef96 <UART_SetConfig+0x5a6>
 800eb78:	2380      	movs	r3, #128	@ 0x80
 800eb7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eb7e:	e20a      	b.n	800ef96 <UART_SetConfig+0x5a6>
 800eb80:	697b      	ldr	r3, [r7, #20]
 800eb82:	681b      	ldr	r3, [r3, #0]
 800eb84:	4a69      	ldr	r2, [pc, #420]	@ (800ed2c <UART_SetConfig+0x33c>)
 800eb86:	4293      	cmp	r3, r2
 800eb88:	d130      	bne.n	800ebec <UART_SetConfig+0x1fc>
 800eb8a:	4b67      	ldr	r3, [pc, #412]	@ (800ed28 <UART_SetConfig+0x338>)
 800eb8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800eb8e:	f003 0307 	and.w	r3, r3, #7
 800eb92:	2b05      	cmp	r3, #5
 800eb94:	d826      	bhi.n	800ebe4 <UART_SetConfig+0x1f4>
 800eb96:	a201      	add	r2, pc, #4	@ (adr r2, 800eb9c <UART_SetConfig+0x1ac>)
 800eb98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eb9c:	0800ebb5 	.word	0x0800ebb5
 800eba0:	0800ebbd 	.word	0x0800ebbd
 800eba4:	0800ebc5 	.word	0x0800ebc5
 800eba8:	0800ebcd 	.word	0x0800ebcd
 800ebac:	0800ebd5 	.word	0x0800ebd5
 800ebb0:	0800ebdd 	.word	0x0800ebdd
 800ebb4:	2300      	movs	r3, #0
 800ebb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ebba:	e1ec      	b.n	800ef96 <UART_SetConfig+0x5a6>
 800ebbc:	2304      	movs	r3, #4
 800ebbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ebc2:	e1e8      	b.n	800ef96 <UART_SetConfig+0x5a6>
 800ebc4:	2308      	movs	r3, #8
 800ebc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ebca:	e1e4      	b.n	800ef96 <UART_SetConfig+0x5a6>
 800ebcc:	2310      	movs	r3, #16
 800ebce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ebd2:	e1e0      	b.n	800ef96 <UART_SetConfig+0x5a6>
 800ebd4:	2320      	movs	r3, #32
 800ebd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ebda:	e1dc      	b.n	800ef96 <UART_SetConfig+0x5a6>
 800ebdc:	2340      	movs	r3, #64	@ 0x40
 800ebde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ebe2:	e1d8      	b.n	800ef96 <UART_SetConfig+0x5a6>
 800ebe4:	2380      	movs	r3, #128	@ 0x80
 800ebe6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ebea:	e1d4      	b.n	800ef96 <UART_SetConfig+0x5a6>
 800ebec:	697b      	ldr	r3, [r7, #20]
 800ebee:	681b      	ldr	r3, [r3, #0]
 800ebf0:	4a4f      	ldr	r2, [pc, #316]	@ (800ed30 <UART_SetConfig+0x340>)
 800ebf2:	4293      	cmp	r3, r2
 800ebf4:	d130      	bne.n	800ec58 <UART_SetConfig+0x268>
 800ebf6:	4b4c      	ldr	r3, [pc, #304]	@ (800ed28 <UART_SetConfig+0x338>)
 800ebf8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ebfa:	f003 0307 	and.w	r3, r3, #7
 800ebfe:	2b05      	cmp	r3, #5
 800ec00:	d826      	bhi.n	800ec50 <UART_SetConfig+0x260>
 800ec02:	a201      	add	r2, pc, #4	@ (adr r2, 800ec08 <UART_SetConfig+0x218>)
 800ec04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ec08:	0800ec21 	.word	0x0800ec21
 800ec0c:	0800ec29 	.word	0x0800ec29
 800ec10:	0800ec31 	.word	0x0800ec31
 800ec14:	0800ec39 	.word	0x0800ec39
 800ec18:	0800ec41 	.word	0x0800ec41
 800ec1c:	0800ec49 	.word	0x0800ec49
 800ec20:	2300      	movs	r3, #0
 800ec22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ec26:	e1b6      	b.n	800ef96 <UART_SetConfig+0x5a6>
 800ec28:	2304      	movs	r3, #4
 800ec2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ec2e:	e1b2      	b.n	800ef96 <UART_SetConfig+0x5a6>
 800ec30:	2308      	movs	r3, #8
 800ec32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ec36:	e1ae      	b.n	800ef96 <UART_SetConfig+0x5a6>
 800ec38:	2310      	movs	r3, #16
 800ec3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ec3e:	e1aa      	b.n	800ef96 <UART_SetConfig+0x5a6>
 800ec40:	2320      	movs	r3, #32
 800ec42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ec46:	e1a6      	b.n	800ef96 <UART_SetConfig+0x5a6>
 800ec48:	2340      	movs	r3, #64	@ 0x40
 800ec4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ec4e:	e1a2      	b.n	800ef96 <UART_SetConfig+0x5a6>
 800ec50:	2380      	movs	r3, #128	@ 0x80
 800ec52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ec56:	e19e      	b.n	800ef96 <UART_SetConfig+0x5a6>
 800ec58:	697b      	ldr	r3, [r7, #20]
 800ec5a:	681b      	ldr	r3, [r3, #0]
 800ec5c:	4a35      	ldr	r2, [pc, #212]	@ (800ed34 <UART_SetConfig+0x344>)
 800ec5e:	4293      	cmp	r3, r2
 800ec60:	d130      	bne.n	800ecc4 <UART_SetConfig+0x2d4>
 800ec62:	4b31      	ldr	r3, [pc, #196]	@ (800ed28 <UART_SetConfig+0x338>)
 800ec64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ec66:	f003 0307 	and.w	r3, r3, #7
 800ec6a:	2b05      	cmp	r3, #5
 800ec6c:	d826      	bhi.n	800ecbc <UART_SetConfig+0x2cc>
 800ec6e:	a201      	add	r2, pc, #4	@ (adr r2, 800ec74 <UART_SetConfig+0x284>)
 800ec70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ec74:	0800ec8d 	.word	0x0800ec8d
 800ec78:	0800ec95 	.word	0x0800ec95
 800ec7c:	0800ec9d 	.word	0x0800ec9d
 800ec80:	0800eca5 	.word	0x0800eca5
 800ec84:	0800ecad 	.word	0x0800ecad
 800ec88:	0800ecb5 	.word	0x0800ecb5
 800ec8c:	2300      	movs	r3, #0
 800ec8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ec92:	e180      	b.n	800ef96 <UART_SetConfig+0x5a6>
 800ec94:	2304      	movs	r3, #4
 800ec96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ec9a:	e17c      	b.n	800ef96 <UART_SetConfig+0x5a6>
 800ec9c:	2308      	movs	r3, #8
 800ec9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eca2:	e178      	b.n	800ef96 <UART_SetConfig+0x5a6>
 800eca4:	2310      	movs	r3, #16
 800eca6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ecaa:	e174      	b.n	800ef96 <UART_SetConfig+0x5a6>
 800ecac:	2320      	movs	r3, #32
 800ecae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ecb2:	e170      	b.n	800ef96 <UART_SetConfig+0x5a6>
 800ecb4:	2340      	movs	r3, #64	@ 0x40
 800ecb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ecba:	e16c      	b.n	800ef96 <UART_SetConfig+0x5a6>
 800ecbc:	2380      	movs	r3, #128	@ 0x80
 800ecbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ecc2:	e168      	b.n	800ef96 <UART_SetConfig+0x5a6>
 800ecc4:	697b      	ldr	r3, [r7, #20]
 800ecc6:	681b      	ldr	r3, [r3, #0]
 800ecc8:	4a1b      	ldr	r2, [pc, #108]	@ (800ed38 <UART_SetConfig+0x348>)
 800ecca:	4293      	cmp	r3, r2
 800eccc:	d142      	bne.n	800ed54 <UART_SetConfig+0x364>
 800ecce:	4b16      	ldr	r3, [pc, #88]	@ (800ed28 <UART_SetConfig+0x338>)
 800ecd0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ecd2:	f003 0307 	and.w	r3, r3, #7
 800ecd6:	2b05      	cmp	r3, #5
 800ecd8:	d838      	bhi.n	800ed4c <UART_SetConfig+0x35c>
 800ecda:	a201      	add	r2, pc, #4	@ (adr r2, 800ece0 <UART_SetConfig+0x2f0>)
 800ecdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ece0:	0800ecf9 	.word	0x0800ecf9
 800ece4:	0800ed01 	.word	0x0800ed01
 800ece8:	0800ed09 	.word	0x0800ed09
 800ecec:	0800ed11 	.word	0x0800ed11
 800ecf0:	0800ed3d 	.word	0x0800ed3d
 800ecf4:	0800ed45 	.word	0x0800ed45
 800ecf8:	2300      	movs	r3, #0
 800ecfa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ecfe:	e14a      	b.n	800ef96 <UART_SetConfig+0x5a6>
 800ed00:	2304      	movs	r3, #4
 800ed02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ed06:	e146      	b.n	800ef96 <UART_SetConfig+0x5a6>
 800ed08:	2308      	movs	r3, #8
 800ed0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ed0e:	e142      	b.n	800ef96 <UART_SetConfig+0x5a6>
 800ed10:	2310      	movs	r3, #16
 800ed12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ed16:	e13e      	b.n	800ef96 <UART_SetConfig+0x5a6>
 800ed18:	cfff69f3 	.word	0xcfff69f3
 800ed1c:	58000c00 	.word	0x58000c00
 800ed20:	11fff4ff 	.word	0x11fff4ff
 800ed24:	40011000 	.word	0x40011000
 800ed28:	58024400 	.word	0x58024400
 800ed2c:	40004400 	.word	0x40004400
 800ed30:	40004800 	.word	0x40004800
 800ed34:	40004c00 	.word	0x40004c00
 800ed38:	40005000 	.word	0x40005000
 800ed3c:	2320      	movs	r3, #32
 800ed3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ed42:	e128      	b.n	800ef96 <UART_SetConfig+0x5a6>
 800ed44:	2340      	movs	r3, #64	@ 0x40
 800ed46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ed4a:	e124      	b.n	800ef96 <UART_SetConfig+0x5a6>
 800ed4c:	2380      	movs	r3, #128	@ 0x80
 800ed4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ed52:	e120      	b.n	800ef96 <UART_SetConfig+0x5a6>
 800ed54:	697b      	ldr	r3, [r7, #20]
 800ed56:	681b      	ldr	r3, [r3, #0]
 800ed58:	4acb      	ldr	r2, [pc, #812]	@ (800f088 <UART_SetConfig+0x698>)
 800ed5a:	4293      	cmp	r3, r2
 800ed5c:	d176      	bne.n	800ee4c <UART_SetConfig+0x45c>
 800ed5e:	4bcb      	ldr	r3, [pc, #812]	@ (800f08c <UART_SetConfig+0x69c>)
 800ed60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ed62:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800ed66:	2b28      	cmp	r3, #40	@ 0x28
 800ed68:	d86c      	bhi.n	800ee44 <UART_SetConfig+0x454>
 800ed6a:	a201      	add	r2, pc, #4	@ (adr r2, 800ed70 <UART_SetConfig+0x380>)
 800ed6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ed70:	0800ee15 	.word	0x0800ee15
 800ed74:	0800ee45 	.word	0x0800ee45
 800ed78:	0800ee45 	.word	0x0800ee45
 800ed7c:	0800ee45 	.word	0x0800ee45
 800ed80:	0800ee45 	.word	0x0800ee45
 800ed84:	0800ee45 	.word	0x0800ee45
 800ed88:	0800ee45 	.word	0x0800ee45
 800ed8c:	0800ee45 	.word	0x0800ee45
 800ed90:	0800ee1d 	.word	0x0800ee1d
 800ed94:	0800ee45 	.word	0x0800ee45
 800ed98:	0800ee45 	.word	0x0800ee45
 800ed9c:	0800ee45 	.word	0x0800ee45
 800eda0:	0800ee45 	.word	0x0800ee45
 800eda4:	0800ee45 	.word	0x0800ee45
 800eda8:	0800ee45 	.word	0x0800ee45
 800edac:	0800ee45 	.word	0x0800ee45
 800edb0:	0800ee25 	.word	0x0800ee25
 800edb4:	0800ee45 	.word	0x0800ee45
 800edb8:	0800ee45 	.word	0x0800ee45
 800edbc:	0800ee45 	.word	0x0800ee45
 800edc0:	0800ee45 	.word	0x0800ee45
 800edc4:	0800ee45 	.word	0x0800ee45
 800edc8:	0800ee45 	.word	0x0800ee45
 800edcc:	0800ee45 	.word	0x0800ee45
 800edd0:	0800ee2d 	.word	0x0800ee2d
 800edd4:	0800ee45 	.word	0x0800ee45
 800edd8:	0800ee45 	.word	0x0800ee45
 800eddc:	0800ee45 	.word	0x0800ee45
 800ede0:	0800ee45 	.word	0x0800ee45
 800ede4:	0800ee45 	.word	0x0800ee45
 800ede8:	0800ee45 	.word	0x0800ee45
 800edec:	0800ee45 	.word	0x0800ee45
 800edf0:	0800ee35 	.word	0x0800ee35
 800edf4:	0800ee45 	.word	0x0800ee45
 800edf8:	0800ee45 	.word	0x0800ee45
 800edfc:	0800ee45 	.word	0x0800ee45
 800ee00:	0800ee45 	.word	0x0800ee45
 800ee04:	0800ee45 	.word	0x0800ee45
 800ee08:	0800ee45 	.word	0x0800ee45
 800ee0c:	0800ee45 	.word	0x0800ee45
 800ee10:	0800ee3d 	.word	0x0800ee3d
 800ee14:	2301      	movs	r3, #1
 800ee16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ee1a:	e0bc      	b.n	800ef96 <UART_SetConfig+0x5a6>
 800ee1c:	2304      	movs	r3, #4
 800ee1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ee22:	e0b8      	b.n	800ef96 <UART_SetConfig+0x5a6>
 800ee24:	2308      	movs	r3, #8
 800ee26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ee2a:	e0b4      	b.n	800ef96 <UART_SetConfig+0x5a6>
 800ee2c:	2310      	movs	r3, #16
 800ee2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ee32:	e0b0      	b.n	800ef96 <UART_SetConfig+0x5a6>
 800ee34:	2320      	movs	r3, #32
 800ee36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ee3a:	e0ac      	b.n	800ef96 <UART_SetConfig+0x5a6>
 800ee3c:	2340      	movs	r3, #64	@ 0x40
 800ee3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ee42:	e0a8      	b.n	800ef96 <UART_SetConfig+0x5a6>
 800ee44:	2380      	movs	r3, #128	@ 0x80
 800ee46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ee4a:	e0a4      	b.n	800ef96 <UART_SetConfig+0x5a6>
 800ee4c:	697b      	ldr	r3, [r7, #20]
 800ee4e:	681b      	ldr	r3, [r3, #0]
 800ee50:	4a8f      	ldr	r2, [pc, #572]	@ (800f090 <UART_SetConfig+0x6a0>)
 800ee52:	4293      	cmp	r3, r2
 800ee54:	d130      	bne.n	800eeb8 <UART_SetConfig+0x4c8>
 800ee56:	4b8d      	ldr	r3, [pc, #564]	@ (800f08c <UART_SetConfig+0x69c>)
 800ee58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ee5a:	f003 0307 	and.w	r3, r3, #7
 800ee5e:	2b05      	cmp	r3, #5
 800ee60:	d826      	bhi.n	800eeb0 <UART_SetConfig+0x4c0>
 800ee62:	a201      	add	r2, pc, #4	@ (adr r2, 800ee68 <UART_SetConfig+0x478>)
 800ee64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ee68:	0800ee81 	.word	0x0800ee81
 800ee6c:	0800ee89 	.word	0x0800ee89
 800ee70:	0800ee91 	.word	0x0800ee91
 800ee74:	0800ee99 	.word	0x0800ee99
 800ee78:	0800eea1 	.word	0x0800eea1
 800ee7c:	0800eea9 	.word	0x0800eea9
 800ee80:	2300      	movs	r3, #0
 800ee82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ee86:	e086      	b.n	800ef96 <UART_SetConfig+0x5a6>
 800ee88:	2304      	movs	r3, #4
 800ee8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ee8e:	e082      	b.n	800ef96 <UART_SetConfig+0x5a6>
 800ee90:	2308      	movs	r3, #8
 800ee92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ee96:	e07e      	b.n	800ef96 <UART_SetConfig+0x5a6>
 800ee98:	2310      	movs	r3, #16
 800ee9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ee9e:	e07a      	b.n	800ef96 <UART_SetConfig+0x5a6>
 800eea0:	2320      	movs	r3, #32
 800eea2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eea6:	e076      	b.n	800ef96 <UART_SetConfig+0x5a6>
 800eea8:	2340      	movs	r3, #64	@ 0x40
 800eeaa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eeae:	e072      	b.n	800ef96 <UART_SetConfig+0x5a6>
 800eeb0:	2380      	movs	r3, #128	@ 0x80
 800eeb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eeb6:	e06e      	b.n	800ef96 <UART_SetConfig+0x5a6>
 800eeb8:	697b      	ldr	r3, [r7, #20]
 800eeba:	681b      	ldr	r3, [r3, #0]
 800eebc:	4a75      	ldr	r2, [pc, #468]	@ (800f094 <UART_SetConfig+0x6a4>)
 800eebe:	4293      	cmp	r3, r2
 800eec0:	d130      	bne.n	800ef24 <UART_SetConfig+0x534>
 800eec2:	4b72      	ldr	r3, [pc, #456]	@ (800f08c <UART_SetConfig+0x69c>)
 800eec4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800eec6:	f003 0307 	and.w	r3, r3, #7
 800eeca:	2b05      	cmp	r3, #5
 800eecc:	d826      	bhi.n	800ef1c <UART_SetConfig+0x52c>
 800eece:	a201      	add	r2, pc, #4	@ (adr r2, 800eed4 <UART_SetConfig+0x4e4>)
 800eed0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eed4:	0800eeed 	.word	0x0800eeed
 800eed8:	0800eef5 	.word	0x0800eef5
 800eedc:	0800eefd 	.word	0x0800eefd
 800eee0:	0800ef05 	.word	0x0800ef05
 800eee4:	0800ef0d 	.word	0x0800ef0d
 800eee8:	0800ef15 	.word	0x0800ef15
 800eeec:	2300      	movs	r3, #0
 800eeee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eef2:	e050      	b.n	800ef96 <UART_SetConfig+0x5a6>
 800eef4:	2304      	movs	r3, #4
 800eef6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eefa:	e04c      	b.n	800ef96 <UART_SetConfig+0x5a6>
 800eefc:	2308      	movs	r3, #8
 800eefe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ef02:	e048      	b.n	800ef96 <UART_SetConfig+0x5a6>
 800ef04:	2310      	movs	r3, #16
 800ef06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ef0a:	e044      	b.n	800ef96 <UART_SetConfig+0x5a6>
 800ef0c:	2320      	movs	r3, #32
 800ef0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ef12:	e040      	b.n	800ef96 <UART_SetConfig+0x5a6>
 800ef14:	2340      	movs	r3, #64	@ 0x40
 800ef16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ef1a:	e03c      	b.n	800ef96 <UART_SetConfig+0x5a6>
 800ef1c:	2380      	movs	r3, #128	@ 0x80
 800ef1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ef22:	e038      	b.n	800ef96 <UART_SetConfig+0x5a6>
 800ef24:	697b      	ldr	r3, [r7, #20]
 800ef26:	681b      	ldr	r3, [r3, #0]
 800ef28:	4a5b      	ldr	r2, [pc, #364]	@ (800f098 <UART_SetConfig+0x6a8>)
 800ef2a:	4293      	cmp	r3, r2
 800ef2c:	d130      	bne.n	800ef90 <UART_SetConfig+0x5a0>
 800ef2e:	4b57      	ldr	r3, [pc, #348]	@ (800f08c <UART_SetConfig+0x69c>)
 800ef30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ef32:	f003 0307 	and.w	r3, r3, #7
 800ef36:	2b05      	cmp	r3, #5
 800ef38:	d826      	bhi.n	800ef88 <UART_SetConfig+0x598>
 800ef3a:	a201      	add	r2, pc, #4	@ (adr r2, 800ef40 <UART_SetConfig+0x550>)
 800ef3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ef40:	0800ef59 	.word	0x0800ef59
 800ef44:	0800ef61 	.word	0x0800ef61
 800ef48:	0800ef69 	.word	0x0800ef69
 800ef4c:	0800ef71 	.word	0x0800ef71
 800ef50:	0800ef79 	.word	0x0800ef79
 800ef54:	0800ef81 	.word	0x0800ef81
 800ef58:	2302      	movs	r3, #2
 800ef5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ef5e:	e01a      	b.n	800ef96 <UART_SetConfig+0x5a6>
 800ef60:	2304      	movs	r3, #4
 800ef62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ef66:	e016      	b.n	800ef96 <UART_SetConfig+0x5a6>
 800ef68:	2308      	movs	r3, #8
 800ef6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ef6e:	e012      	b.n	800ef96 <UART_SetConfig+0x5a6>
 800ef70:	2310      	movs	r3, #16
 800ef72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ef76:	e00e      	b.n	800ef96 <UART_SetConfig+0x5a6>
 800ef78:	2320      	movs	r3, #32
 800ef7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ef7e:	e00a      	b.n	800ef96 <UART_SetConfig+0x5a6>
 800ef80:	2340      	movs	r3, #64	@ 0x40
 800ef82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ef86:	e006      	b.n	800ef96 <UART_SetConfig+0x5a6>
 800ef88:	2380      	movs	r3, #128	@ 0x80
 800ef8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ef8e:	e002      	b.n	800ef96 <UART_SetConfig+0x5a6>
 800ef90:	2380      	movs	r3, #128	@ 0x80
 800ef92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800ef96:	697b      	ldr	r3, [r7, #20]
 800ef98:	681b      	ldr	r3, [r3, #0]
 800ef9a:	4a3f      	ldr	r2, [pc, #252]	@ (800f098 <UART_SetConfig+0x6a8>)
 800ef9c:	4293      	cmp	r3, r2
 800ef9e:	f040 80f8 	bne.w	800f192 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800efa2:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800efa6:	2b20      	cmp	r3, #32
 800efa8:	dc46      	bgt.n	800f038 <UART_SetConfig+0x648>
 800efaa:	2b02      	cmp	r3, #2
 800efac:	f2c0 8082 	blt.w	800f0b4 <UART_SetConfig+0x6c4>
 800efb0:	3b02      	subs	r3, #2
 800efb2:	2b1e      	cmp	r3, #30
 800efb4:	d87e      	bhi.n	800f0b4 <UART_SetConfig+0x6c4>
 800efb6:	a201      	add	r2, pc, #4	@ (adr r2, 800efbc <UART_SetConfig+0x5cc>)
 800efb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800efbc:	0800f03f 	.word	0x0800f03f
 800efc0:	0800f0b5 	.word	0x0800f0b5
 800efc4:	0800f047 	.word	0x0800f047
 800efc8:	0800f0b5 	.word	0x0800f0b5
 800efcc:	0800f0b5 	.word	0x0800f0b5
 800efd0:	0800f0b5 	.word	0x0800f0b5
 800efd4:	0800f057 	.word	0x0800f057
 800efd8:	0800f0b5 	.word	0x0800f0b5
 800efdc:	0800f0b5 	.word	0x0800f0b5
 800efe0:	0800f0b5 	.word	0x0800f0b5
 800efe4:	0800f0b5 	.word	0x0800f0b5
 800efe8:	0800f0b5 	.word	0x0800f0b5
 800efec:	0800f0b5 	.word	0x0800f0b5
 800eff0:	0800f0b5 	.word	0x0800f0b5
 800eff4:	0800f067 	.word	0x0800f067
 800eff8:	0800f0b5 	.word	0x0800f0b5
 800effc:	0800f0b5 	.word	0x0800f0b5
 800f000:	0800f0b5 	.word	0x0800f0b5
 800f004:	0800f0b5 	.word	0x0800f0b5
 800f008:	0800f0b5 	.word	0x0800f0b5
 800f00c:	0800f0b5 	.word	0x0800f0b5
 800f010:	0800f0b5 	.word	0x0800f0b5
 800f014:	0800f0b5 	.word	0x0800f0b5
 800f018:	0800f0b5 	.word	0x0800f0b5
 800f01c:	0800f0b5 	.word	0x0800f0b5
 800f020:	0800f0b5 	.word	0x0800f0b5
 800f024:	0800f0b5 	.word	0x0800f0b5
 800f028:	0800f0b5 	.word	0x0800f0b5
 800f02c:	0800f0b5 	.word	0x0800f0b5
 800f030:	0800f0b5 	.word	0x0800f0b5
 800f034:	0800f0a7 	.word	0x0800f0a7
 800f038:	2b40      	cmp	r3, #64	@ 0x40
 800f03a:	d037      	beq.n	800f0ac <UART_SetConfig+0x6bc>
 800f03c:	e03a      	b.n	800f0b4 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800f03e:	f7fc fe1f 	bl	800bc80 <HAL_RCCEx_GetD3PCLK1Freq>
 800f042:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800f044:	e03c      	b.n	800f0c0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f046:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800f04a:	4618      	mov	r0, r3
 800f04c:	f7fc fe2e 	bl	800bcac <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800f050:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f052:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f054:	e034      	b.n	800f0c0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f056:	f107 0318 	add.w	r3, r7, #24
 800f05a:	4618      	mov	r0, r3
 800f05c:	f7fc ff7a 	bl	800bf54 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800f060:	69fb      	ldr	r3, [r7, #28]
 800f062:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f064:	e02c      	b.n	800f0c0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f066:	4b09      	ldr	r3, [pc, #36]	@ (800f08c <UART_SetConfig+0x69c>)
 800f068:	681b      	ldr	r3, [r3, #0]
 800f06a:	f003 0320 	and.w	r3, r3, #32
 800f06e:	2b00      	cmp	r3, #0
 800f070:	d016      	beq.n	800f0a0 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800f072:	4b06      	ldr	r3, [pc, #24]	@ (800f08c <UART_SetConfig+0x69c>)
 800f074:	681b      	ldr	r3, [r3, #0]
 800f076:	08db      	lsrs	r3, r3, #3
 800f078:	f003 0303 	and.w	r3, r3, #3
 800f07c:	4a07      	ldr	r2, [pc, #28]	@ (800f09c <UART_SetConfig+0x6ac>)
 800f07e:	fa22 f303 	lsr.w	r3, r2, r3
 800f082:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800f084:	e01c      	b.n	800f0c0 <UART_SetConfig+0x6d0>
 800f086:	bf00      	nop
 800f088:	40011400 	.word	0x40011400
 800f08c:	58024400 	.word	0x58024400
 800f090:	40007800 	.word	0x40007800
 800f094:	40007c00 	.word	0x40007c00
 800f098:	58000c00 	.word	0x58000c00
 800f09c:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800f0a0:	4b9d      	ldr	r3, [pc, #628]	@ (800f318 <UART_SetConfig+0x928>)
 800f0a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f0a4:	e00c      	b.n	800f0c0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800f0a6:	4b9d      	ldr	r3, [pc, #628]	@ (800f31c <UART_SetConfig+0x92c>)
 800f0a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f0aa:	e009      	b.n	800f0c0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f0ac:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800f0b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f0b2:	e005      	b.n	800f0c0 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800f0b4:	2300      	movs	r3, #0
 800f0b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800f0b8:	2301      	movs	r3, #1
 800f0ba:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800f0be:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800f0c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f0c2:	2b00      	cmp	r3, #0
 800f0c4:	f000 81de 	beq.w	800f484 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800f0c8:	697b      	ldr	r3, [r7, #20]
 800f0ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f0cc:	4a94      	ldr	r2, [pc, #592]	@ (800f320 <UART_SetConfig+0x930>)
 800f0ce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f0d2:	461a      	mov	r2, r3
 800f0d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f0d6:	fbb3 f3f2 	udiv	r3, r3, r2
 800f0da:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800f0dc:	697b      	ldr	r3, [r7, #20]
 800f0de:	685a      	ldr	r2, [r3, #4]
 800f0e0:	4613      	mov	r3, r2
 800f0e2:	005b      	lsls	r3, r3, #1
 800f0e4:	4413      	add	r3, r2
 800f0e6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f0e8:	429a      	cmp	r2, r3
 800f0ea:	d305      	bcc.n	800f0f8 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800f0ec:	697b      	ldr	r3, [r7, #20]
 800f0ee:	685b      	ldr	r3, [r3, #4]
 800f0f0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800f0f2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f0f4:	429a      	cmp	r2, r3
 800f0f6:	d903      	bls.n	800f100 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800f0f8:	2301      	movs	r3, #1
 800f0fa:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800f0fe:	e1c1      	b.n	800f484 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f100:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f102:	2200      	movs	r2, #0
 800f104:	60bb      	str	r3, [r7, #8]
 800f106:	60fa      	str	r2, [r7, #12]
 800f108:	697b      	ldr	r3, [r7, #20]
 800f10a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f10c:	4a84      	ldr	r2, [pc, #528]	@ (800f320 <UART_SetConfig+0x930>)
 800f10e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f112:	b29b      	uxth	r3, r3
 800f114:	2200      	movs	r2, #0
 800f116:	603b      	str	r3, [r7, #0]
 800f118:	607a      	str	r2, [r7, #4]
 800f11a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f11e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800f122:	f7f1 fb01 	bl	8000728 <__aeabi_uldivmod>
 800f126:	4602      	mov	r2, r0
 800f128:	460b      	mov	r3, r1
 800f12a:	4610      	mov	r0, r2
 800f12c:	4619      	mov	r1, r3
 800f12e:	f04f 0200 	mov.w	r2, #0
 800f132:	f04f 0300 	mov.w	r3, #0
 800f136:	020b      	lsls	r3, r1, #8
 800f138:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800f13c:	0202      	lsls	r2, r0, #8
 800f13e:	6979      	ldr	r1, [r7, #20]
 800f140:	6849      	ldr	r1, [r1, #4]
 800f142:	0849      	lsrs	r1, r1, #1
 800f144:	2000      	movs	r0, #0
 800f146:	460c      	mov	r4, r1
 800f148:	4605      	mov	r5, r0
 800f14a:	eb12 0804 	adds.w	r8, r2, r4
 800f14e:	eb43 0905 	adc.w	r9, r3, r5
 800f152:	697b      	ldr	r3, [r7, #20]
 800f154:	685b      	ldr	r3, [r3, #4]
 800f156:	2200      	movs	r2, #0
 800f158:	469a      	mov	sl, r3
 800f15a:	4693      	mov	fp, r2
 800f15c:	4652      	mov	r2, sl
 800f15e:	465b      	mov	r3, fp
 800f160:	4640      	mov	r0, r8
 800f162:	4649      	mov	r1, r9
 800f164:	f7f1 fae0 	bl	8000728 <__aeabi_uldivmod>
 800f168:	4602      	mov	r2, r0
 800f16a:	460b      	mov	r3, r1
 800f16c:	4613      	mov	r3, r2
 800f16e:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800f170:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f172:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800f176:	d308      	bcc.n	800f18a <UART_SetConfig+0x79a>
 800f178:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f17a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800f17e:	d204      	bcs.n	800f18a <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800f180:	697b      	ldr	r3, [r7, #20]
 800f182:	681b      	ldr	r3, [r3, #0]
 800f184:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800f186:	60da      	str	r2, [r3, #12]
 800f188:	e17c      	b.n	800f484 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800f18a:	2301      	movs	r3, #1
 800f18c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800f190:	e178      	b.n	800f484 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800f192:	697b      	ldr	r3, [r7, #20]
 800f194:	69db      	ldr	r3, [r3, #28]
 800f196:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800f19a:	f040 80c5 	bne.w	800f328 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800f19e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800f1a2:	2b20      	cmp	r3, #32
 800f1a4:	dc48      	bgt.n	800f238 <UART_SetConfig+0x848>
 800f1a6:	2b00      	cmp	r3, #0
 800f1a8:	db7b      	blt.n	800f2a2 <UART_SetConfig+0x8b2>
 800f1aa:	2b20      	cmp	r3, #32
 800f1ac:	d879      	bhi.n	800f2a2 <UART_SetConfig+0x8b2>
 800f1ae:	a201      	add	r2, pc, #4	@ (adr r2, 800f1b4 <UART_SetConfig+0x7c4>)
 800f1b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f1b4:	0800f23f 	.word	0x0800f23f
 800f1b8:	0800f247 	.word	0x0800f247
 800f1bc:	0800f2a3 	.word	0x0800f2a3
 800f1c0:	0800f2a3 	.word	0x0800f2a3
 800f1c4:	0800f24f 	.word	0x0800f24f
 800f1c8:	0800f2a3 	.word	0x0800f2a3
 800f1cc:	0800f2a3 	.word	0x0800f2a3
 800f1d0:	0800f2a3 	.word	0x0800f2a3
 800f1d4:	0800f25f 	.word	0x0800f25f
 800f1d8:	0800f2a3 	.word	0x0800f2a3
 800f1dc:	0800f2a3 	.word	0x0800f2a3
 800f1e0:	0800f2a3 	.word	0x0800f2a3
 800f1e4:	0800f2a3 	.word	0x0800f2a3
 800f1e8:	0800f2a3 	.word	0x0800f2a3
 800f1ec:	0800f2a3 	.word	0x0800f2a3
 800f1f0:	0800f2a3 	.word	0x0800f2a3
 800f1f4:	0800f26f 	.word	0x0800f26f
 800f1f8:	0800f2a3 	.word	0x0800f2a3
 800f1fc:	0800f2a3 	.word	0x0800f2a3
 800f200:	0800f2a3 	.word	0x0800f2a3
 800f204:	0800f2a3 	.word	0x0800f2a3
 800f208:	0800f2a3 	.word	0x0800f2a3
 800f20c:	0800f2a3 	.word	0x0800f2a3
 800f210:	0800f2a3 	.word	0x0800f2a3
 800f214:	0800f2a3 	.word	0x0800f2a3
 800f218:	0800f2a3 	.word	0x0800f2a3
 800f21c:	0800f2a3 	.word	0x0800f2a3
 800f220:	0800f2a3 	.word	0x0800f2a3
 800f224:	0800f2a3 	.word	0x0800f2a3
 800f228:	0800f2a3 	.word	0x0800f2a3
 800f22c:	0800f2a3 	.word	0x0800f2a3
 800f230:	0800f2a3 	.word	0x0800f2a3
 800f234:	0800f295 	.word	0x0800f295
 800f238:	2b40      	cmp	r3, #64	@ 0x40
 800f23a:	d02e      	beq.n	800f29a <UART_SetConfig+0x8aa>
 800f23c:	e031      	b.n	800f2a2 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f23e:	f7fa fd69 	bl	8009d14 <HAL_RCC_GetPCLK1Freq>
 800f242:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800f244:	e033      	b.n	800f2ae <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800f246:	f7fa fd7b 	bl	8009d40 <HAL_RCC_GetPCLK2Freq>
 800f24a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800f24c:	e02f      	b.n	800f2ae <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f24e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800f252:	4618      	mov	r0, r3
 800f254:	f7fc fd2a 	bl	800bcac <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800f258:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f25a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f25c:	e027      	b.n	800f2ae <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f25e:	f107 0318 	add.w	r3, r7, #24
 800f262:	4618      	mov	r0, r3
 800f264:	f7fc fe76 	bl	800bf54 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800f268:	69fb      	ldr	r3, [r7, #28]
 800f26a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f26c:	e01f      	b.n	800f2ae <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f26e:	4b2d      	ldr	r3, [pc, #180]	@ (800f324 <UART_SetConfig+0x934>)
 800f270:	681b      	ldr	r3, [r3, #0]
 800f272:	f003 0320 	and.w	r3, r3, #32
 800f276:	2b00      	cmp	r3, #0
 800f278:	d009      	beq.n	800f28e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800f27a:	4b2a      	ldr	r3, [pc, #168]	@ (800f324 <UART_SetConfig+0x934>)
 800f27c:	681b      	ldr	r3, [r3, #0]
 800f27e:	08db      	lsrs	r3, r3, #3
 800f280:	f003 0303 	and.w	r3, r3, #3
 800f284:	4a24      	ldr	r2, [pc, #144]	@ (800f318 <UART_SetConfig+0x928>)
 800f286:	fa22 f303 	lsr.w	r3, r2, r3
 800f28a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800f28c:	e00f      	b.n	800f2ae <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800f28e:	4b22      	ldr	r3, [pc, #136]	@ (800f318 <UART_SetConfig+0x928>)
 800f290:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f292:	e00c      	b.n	800f2ae <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800f294:	4b21      	ldr	r3, [pc, #132]	@ (800f31c <UART_SetConfig+0x92c>)
 800f296:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f298:	e009      	b.n	800f2ae <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f29a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800f29e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f2a0:	e005      	b.n	800f2ae <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800f2a2:	2300      	movs	r3, #0
 800f2a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800f2a6:	2301      	movs	r3, #1
 800f2a8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800f2ac:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800f2ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f2b0:	2b00      	cmp	r3, #0
 800f2b2:	f000 80e7 	beq.w	800f484 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f2b6:	697b      	ldr	r3, [r7, #20]
 800f2b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f2ba:	4a19      	ldr	r2, [pc, #100]	@ (800f320 <UART_SetConfig+0x930>)
 800f2bc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f2c0:	461a      	mov	r2, r3
 800f2c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f2c4:	fbb3 f3f2 	udiv	r3, r3, r2
 800f2c8:	005a      	lsls	r2, r3, #1
 800f2ca:	697b      	ldr	r3, [r7, #20]
 800f2cc:	685b      	ldr	r3, [r3, #4]
 800f2ce:	085b      	lsrs	r3, r3, #1
 800f2d0:	441a      	add	r2, r3
 800f2d2:	697b      	ldr	r3, [r7, #20]
 800f2d4:	685b      	ldr	r3, [r3, #4]
 800f2d6:	fbb2 f3f3 	udiv	r3, r2, r3
 800f2da:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f2dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f2de:	2b0f      	cmp	r3, #15
 800f2e0:	d916      	bls.n	800f310 <UART_SetConfig+0x920>
 800f2e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f2e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f2e8:	d212      	bcs.n	800f310 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800f2ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f2ec:	b29b      	uxth	r3, r3
 800f2ee:	f023 030f 	bic.w	r3, r3, #15
 800f2f2:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800f2f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f2f6:	085b      	lsrs	r3, r3, #1
 800f2f8:	b29b      	uxth	r3, r3
 800f2fa:	f003 0307 	and.w	r3, r3, #7
 800f2fe:	b29a      	uxth	r2, r3
 800f300:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800f302:	4313      	orrs	r3, r2
 800f304:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800f306:	697b      	ldr	r3, [r7, #20]
 800f308:	681b      	ldr	r3, [r3, #0]
 800f30a:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800f30c:	60da      	str	r2, [r3, #12]
 800f30e:	e0b9      	b.n	800f484 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800f310:	2301      	movs	r3, #1
 800f312:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800f316:	e0b5      	b.n	800f484 <UART_SetConfig+0xa94>
 800f318:	03d09000 	.word	0x03d09000
 800f31c:	003d0900 	.word	0x003d0900
 800f320:	08014bb0 	.word	0x08014bb0
 800f324:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800f328:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800f32c:	2b20      	cmp	r3, #32
 800f32e:	dc49      	bgt.n	800f3c4 <UART_SetConfig+0x9d4>
 800f330:	2b00      	cmp	r3, #0
 800f332:	db7c      	blt.n	800f42e <UART_SetConfig+0xa3e>
 800f334:	2b20      	cmp	r3, #32
 800f336:	d87a      	bhi.n	800f42e <UART_SetConfig+0xa3e>
 800f338:	a201      	add	r2, pc, #4	@ (adr r2, 800f340 <UART_SetConfig+0x950>)
 800f33a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f33e:	bf00      	nop
 800f340:	0800f3cb 	.word	0x0800f3cb
 800f344:	0800f3d3 	.word	0x0800f3d3
 800f348:	0800f42f 	.word	0x0800f42f
 800f34c:	0800f42f 	.word	0x0800f42f
 800f350:	0800f3db 	.word	0x0800f3db
 800f354:	0800f42f 	.word	0x0800f42f
 800f358:	0800f42f 	.word	0x0800f42f
 800f35c:	0800f42f 	.word	0x0800f42f
 800f360:	0800f3eb 	.word	0x0800f3eb
 800f364:	0800f42f 	.word	0x0800f42f
 800f368:	0800f42f 	.word	0x0800f42f
 800f36c:	0800f42f 	.word	0x0800f42f
 800f370:	0800f42f 	.word	0x0800f42f
 800f374:	0800f42f 	.word	0x0800f42f
 800f378:	0800f42f 	.word	0x0800f42f
 800f37c:	0800f42f 	.word	0x0800f42f
 800f380:	0800f3fb 	.word	0x0800f3fb
 800f384:	0800f42f 	.word	0x0800f42f
 800f388:	0800f42f 	.word	0x0800f42f
 800f38c:	0800f42f 	.word	0x0800f42f
 800f390:	0800f42f 	.word	0x0800f42f
 800f394:	0800f42f 	.word	0x0800f42f
 800f398:	0800f42f 	.word	0x0800f42f
 800f39c:	0800f42f 	.word	0x0800f42f
 800f3a0:	0800f42f 	.word	0x0800f42f
 800f3a4:	0800f42f 	.word	0x0800f42f
 800f3a8:	0800f42f 	.word	0x0800f42f
 800f3ac:	0800f42f 	.word	0x0800f42f
 800f3b0:	0800f42f 	.word	0x0800f42f
 800f3b4:	0800f42f 	.word	0x0800f42f
 800f3b8:	0800f42f 	.word	0x0800f42f
 800f3bc:	0800f42f 	.word	0x0800f42f
 800f3c0:	0800f421 	.word	0x0800f421
 800f3c4:	2b40      	cmp	r3, #64	@ 0x40
 800f3c6:	d02e      	beq.n	800f426 <UART_SetConfig+0xa36>
 800f3c8:	e031      	b.n	800f42e <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f3ca:	f7fa fca3 	bl	8009d14 <HAL_RCC_GetPCLK1Freq>
 800f3ce:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800f3d0:	e033      	b.n	800f43a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800f3d2:	f7fa fcb5 	bl	8009d40 <HAL_RCC_GetPCLK2Freq>
 800f3d6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800f3d8:	e02f      	b.n	800f43a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f3da:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800f3de:	4618      	mov	r0, r3
 800f3e0:	f7fc fc64 	bl	800bcac <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800f3e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f3e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f3e8:	e027      	b.n	800f43a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f3ea:	f107 0318 	add.w	r3, r7, #24
 800f3ee:	4618      	mov	r0, r3
 800f3f0:	f7fc fdb0 	bl	800bf54 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800f3f4:	69fb      	ldr	r3, [r7, #28]
 800f3f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f3f8:	e01f      	b.n	800f43a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f3fa:	4b2d      	ldr	r3, [pc, #180]	@ (800f4b0 <UART_SetConfig+0xac0>)
 800f3fc:	681b      	ldr	r3, [r3, #0]
 800f3fe:	f003 0320 	and.w	r3, r3, #32
 800f402:	2b00      	cmp	r3, #0
 800f404:	d009      	beq.n	800f41a <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800f406:	4b2a      	ldr	r3, [pc, #168]	@ (800f4b0 <UART_SetConfig+0xac0>)
 800f408:	681b      	ldr	r3, [r3, #0]
 800f40a:	08db      	lsrs	r3, r3, #3
 800f40c:	f003 0303 	and.w	r3, r3, #3
 800f410:	4a28      	ldr	r2, [pc, #160]	@ (800f4b4 <UART_SetConfig+0xac4>)
 800f412:	fa22 f303 	lsr.w	r3, r2, r3
 800f416:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800f418:	e00f      	b.n	800f43a <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800f41a:	4b26      	ldr	r3, [pc, #152]	@ (800f4b4 <UART_SetConfig+0xac4>)
 800f41c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f41e:	e00c      	b.n	800f43a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800f420:	4b25      	ldr	r3, [pc, #148]	@ (800f4b8 <UART_SetConfig+0xac8>)
 800f422:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f424:	e009      	b.n	800f43a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f426:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800f42a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f42c:	e005      	b.n	800f43a <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800f42e:	2300      	movs	r3, #0
 800f430:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800f432:	2301      	movs	r3, #1
 800f434:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800f438:	bf00      	nop
    }

    if (pclk != 0U)
 800f43a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f43c:	2b00      	cmp	r3, #0
 800f43e:	d021      	beq.n	800f484 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f440:	697b      	ldr	r3, [r7, #20]
 800f442:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f444:	4a1d      	ldr	r2, [pc, #116]	@ (800f4bc <UART_SetConfig+0xacc>)
 800f446:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f44a:	461a      	mov	r2, r3
 800f44c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f44e:	fbb3 f2f2 	udiv	r2, r3, r2
 800f452:	697b      	ldr	r3, [r7, #20]
 800f454:	685b      	ldr	r3, [r3, #4]
 800f456:	085b      	lsrs	r3, r3, #1
 800f458:	441a      	add	r2, r3
 800f45a:	697b      	ldr	r3, [r7, #20]
 800f45c:	685b      	ldr	r3, [r3, #4]
 800f45e:	fbb2 f3f3 	udiv	r3, r2, r3
 800f462:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f464:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f466:	2b0f      	cmp	r3, #15
 800f468:	d909      	bls.n	800f47e <UART_SetConfig+0xa8e>
 800f46a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f46c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f470:	d205      	bcs.n	800f47e <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800f472:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f474:	b29a      	uxth	r2, r3
 800f476:	697b      	ldr	r3, [r7, #20]
 800f478:	681b      	ldr	r3, [r3, #0]
 800f47a:	60da      	str	r2, [r3, #12]
 800f47c:	e002      	b.n	800f484 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800f47e:	2301      	movs	r3, #1
 800f480:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800f484:	697b      	ldr	r3, [r7, #20]
 800f486:	2201      	movs	r2, #1
 800f488:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800f48c:	697b      	ldr	r3, [r7, #20]
 800f48e:	2201      	movs	r2, #1
 800f490:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800f494:	697b      	ldr	r3, [r7, #20]
 800f496:	2200      	movs	r2, #0
 800f498:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800f49a:	697b      	ldr	r3, [r7, #20]
 800f49c:	2200      	movs	r2, #0
 800f49e:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800f4a0:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800f4a4:	4618      	mov	r0, r3
 800f4a6:	3748      	adds	r7, #72	@ 0x48
 800f4a8:	46bd      	mov	sp, r7
 800f4aa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800f4ae:	bf00      	nop
 800f4b0:	58024400 	.word	0x58024400
 800f4b4:	03d09000 	.word	0x03d09000
 800f4b8:	003d0900 	.word	0x003d0900
 800f4bc:	08014bb0 	.word	0x08014bb0

0800f4c0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800f4c0:	b480      	push	{r7}
 800f4c2:	b083      	sub	sp, #12
 800f4c4:	af00      	add	r7, sp, #0
 800f4c6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800f4c8:	687b      	ldr	r3, [r7, #4]
 800f4ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f4cc:	f003 0308 	and.w	r3, r3, #8
 800f4d0:	2b00      	cmp	r3, #0
 800f4d2:	d00a      	beq.n	800f4ea <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800f4d4:	687b      	ldr	r3, [r7, #4]
 800f4d6:	681b      	ldr	r3, [r3, #0]
 800f4d8:	685b      	ldr	r3, [r3, #4]
 800f4da:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800f4de:	687b      	ldr	r3, [r7, #4]
 800f4e0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800f4e2:	687b      	ldr	r3, [r7, #4]
 800f4e4:	681b      	ldr	r3, [r3, #0]
 800f4e6:	430a      	orrs	r2, r1
 800f4e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800f4ea:	687b      	ldr	r3, [r7, #4]
 800f4ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f4ee:	f003 0301 	and.w	r3, r3, #1
 800f4f2:	2b00      	cmp	r3, #0
 800f4f4:	d00a      	beq.n	800f50c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800f4f6:	687b      	ldr	r3, [r7, #4]
 800f4f8:	681b      	ldr	r3, [r3, #0]
 800f4fa:	685b      	ldr	r3, [r3, #4]
 800f4fc:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800f500:	687b      	ldr	r3, [r7, #4]
 800f502:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f504:	687b      	ldr	r3, [r7, #4]
 800f506:	681b      	ldr	r3, [r3, #0]
 800f508:	430a      	orrs	r2, r1
 800f50a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800f50c:	687b      	ldr	r3, [r7, #4]
 800f50e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f510:	f003 0302 	and.w	r3, r3, #2
 800f514:	2b00      	cmp	r3, #0
 800f516:	d00a      	beq.n	800f52e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800f518:	687b      	ldr	r3, [r7, #4]
 800f51a:	681b      	ldr	r3, [r3, #0]
 800f51c:	685b      	ldr	r3, [r3, #4]
 800f51e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800f522:	687b      	ldr	r3, [r7, #4]
 800f524:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800f526:	687b      	ldr	r3, [r7, #4]
 800f528:	681b      	ldr	r3, [r3, #0]
 800f52a:	430a      	orrs	r2, r1
 800f52c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800f52e:	687b      	ldr	r3, [r7, #4]
 800f530:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f532:	f003 0304 	and.w	r3, r3, #4
 800f536:	2b00      	cmp	r3, #0
 800f538:	d00a      	beq.n	800f550 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800f53a:	687b      	ldr	r3, [r7, #4]
 800f53c:	681b      	ldr	r3, [r3, #0]
 800f53e:	685b      	ldr	r3, [r3, #4]
 800f540:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800f544:	687b      	ldr	r3, [r7, #4]
 800f546:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800f548:	687b      	ldr	r3, [r7, #4]
 800f54a:	681b      	ldr	r3, [r3, #0]
 800f54c:	430a      	orrs	r2, r1
 800f54e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800f550:	687b      	ldr	r3, [r7, #4]
 800f552:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f554:	f003 0310 	and.w	r3, r3, #16
 800f558:	2b00      	cmp	r3, #0
 800f55a:	d00a      	beq.n	800f572 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800f55c:	687b      	ldr	r3, [r7, #4]
 800f55e:	681b      	ldr	r3, [r3, #0]
 800f560:	689b      	ldr	r3, [r3, #8]
 800f562:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800f566:	687b      	ldr	r3, [r7, #4]
 800f568:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800f56a:	687b      	ldr	r3, [r7, #4]
 800f56c:	681b      	ldr	r3, [r3, #0]
 800f56e:	430a      	orrs	r2, r1
 800f570:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800f572:	687b      	ldr	r3, [r7, #4]
 800f574:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f576:	f003 0320 	and.w	r3, r3, #32
 800f57a:	2b00      	cmp	r3, #0
 800f57c:	d00a      	beq.n	800f594 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800f57e:	687b      	ldr	r3, [r7, #4]
 800f580:	681b      	ldr	r3, [r3, #0]
 800f582:	689b      	ldr	r3, [r3, #8]
 800f584:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800f588:	687b      	ldr	r3, [r7, #4]
 800f58a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800f58c:	687b      	ldr	r3, [r7, #4]
 800f58e:	681b      	ldr	r3, [r3, #0]
 800f590:	430a      	orrs	r2, r1
 800f592:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800f594:	687b      	ldr	r3, [r7, #4]
 800f596:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f598:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f59c:	2b00      	cmp	r3, #0
 800f59e:	d01a      	beq.n	800f5d6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800f5a0:	687b      	ldr	r3, [r7, #4]
 800f5a2:	681b      	ldr	r3, [r3, #0]
 800f5a4:	685b      	ldr	r3, [r3, #4]
 800f5a6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800f5aa:	687b      	ldr	r3, [r7, #4]
 800f5ac:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800f5ae:	687b      	ldr	r3, [r7, #4]
 800f5b0:	681b      	ldr	r3, [r3, #0]
 800f5b2:	430a      	orrs	r2, r1
 800f5b4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800f5b6:	687b      	ldr	r3, [r7, #4]
 800f5b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f5ba:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800f5be:	d10a      	bne.n	800f5d6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800f5c0:	687b      	ldr	r3, [r7, #4]
 800f5c2:	681b      	ldr	r3, [r3, #0]
 800f5c4:	685b      	ldr	r3, [r3, #4]
 800f5c6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800f5ca:	687b      	ldr	r3, [r7, #4]
 800f5cc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800f5ce:	687b      	ldr	r3, [r7, #4]
 800f5d0:	681b      	ldr	r3, [r3, #0]
 800f5d2:	430a      	orrs	r2, r1
 800f5d4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800f5d6:	687b      	ldr	r3, [r7, #4]
 800f5d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f5da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f5de:	2b00      	cmp	r3, #0
 800f5e0:	d00a      	beq.n	800f5f8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800f5e2:	687b      	ldr	r3, [r7, #4]
 800f5e4:	681b      	ldr	r3, [r3, #0]
 800f5e6:	685b      	ldr	r3, [r3, #4]
 800f5e8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800f5ec:	687b      	ldr	r3, [r7, #4]
 800f5ee:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800f5f0:	687b      	ldr	r3, [r7, #4]
 800f5f2:	681b      	ldr	r3, [r3, #0]
 800f5f4:	430a      	orrs	r2, r1
 800f5f6:	605a      	str	r2, [r3, #4]
  }
}
 800f5f8:	bf00      	nop
 800f5fa:	370c      	adds	r7, #12
 800f5fc:	46bd      	mov	sp, r7
 800f5fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f602:	4770      	bx	lr

0800f604 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800f604:	b580      	push	{r7, lr}
 800f606:	b098      	sub	sp, #96	@ 0x60
 800f608:	af02      	add	r7, sp, #8
 800f60a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f60c:	687b      	ldr	r3, [r7, #4]
 800f60e:	2200      	movs	r2, #0
 800f610:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800f614:	f7f6 fbe0 	bl	8005dd8 <HAL_GetTick>
 800f618:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800f61a:	687b      	ldr	r3, [r7, #4]
 800f61c:	681b      	ldr	r3, [r3, #0]
 800f61e:	681b      	ldr	r3, [r3, #0]
 800f620:	f003 0308 	and.w	r3, r3, #8
 800f624:	2b08      	cmp	r3, #8
 800f626:	d12f      	bne.n	800f688 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800f628:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800f62c:	9300      	str	r3, [sp, #0]
 800f62e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f630:	2200      	movs	r2, #0
 800f632:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800f636:	6878      	ldr	r0, [r7, #4]
 800f638:	f000 f88e 	bl	800f758 <UART_WaitOnFlagUntilTimeout>
 800f63c:	4603      	mov	r3, r0
 800f63e:	2b00      	cmp	r3, #0
 800f640:	d022      	beq.n	800f688 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800f642:	687b      	ldr	r3, [r7, #4]
 800f644:	681b      	ldr	r3, [r3, #0]
 800f646:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f648:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f64a:	e853 3f00 	ldrex	r3, [r3]
 800f64e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800f650:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f652:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800f656:	653b      	str	r3, [r7, #80]	@ 0x50
 800f658:	687b      	ldr	r3, [r7, #4]
 800f65a:	681b      	ldr	r3, [r3, #0]
 800f65c:	461a      	mov	r2, r3
 800f65e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f660:	647b      	str	r3, [r7, #68]	@ 0x44
 800f662:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f664:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800f666:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800f668:	e841 2300 	strex	r3, r2, [r1]
 800f66c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800f66e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f670:	2b00      	cmp	r3, #0
 800f672:	d1e6      	bne.n	800f642 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800f674:	687b      	ldr	r3, [r7, #4]
 800f676:	2220      	movs	r2, #32
 800f678:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800f67c:	687b      	ldr	r3, [r7, #4]
 800f67e:	2200      	movs	r2, #0
 800f680:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800f684:	2303      	movs	r3, #3
 800f686:	e063      	b.n	800f750 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800f688:	687b      	ldr	r3, [r7, #4]
 800f68a:	681b      	ldr	r3, [r3, #0]
 800f68c:	681b      	ldr	r3, [r3, #0]
 800f68e:	f003 0304 	and.w	r3, r3, #4
 800f692:	2b04      	cmp	r3, #4
 800f694:	d149      	bne.n	800f72a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800f696:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800f69a:	9300      	str	r3, [sp, #0]
 800f69c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f69e:	2200      	movs	r2, #0
 800f6a0:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800f6a4:	6878      	ldr	r0, [r7, #4]
 800f6a6:	f000 f857 	bl	800f758 <UART_WaitOnFlagUntilTimeout>
 800f6aa:	4603      	mov	r3, r0
 800f6ac:	2b00      	cmp	r3, #0
 800f6ae:	d03c      	beq.n	800f72a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f6b0:	687b      	ldr	r3, [r7, #4]
 800f6b2:	681b      	ldr	r3, [r3, #0]
 800f6b4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f6b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f6b8:	e853 3f00 	ldrex	r3, [r3]
 800f6bc:	623b      	str	r3, [r7, #32]
   return(result);
 800f6be:	6a3b      	ldr	r3, [r7, #32]
 800f6c0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800f6c4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800f6c6:	687b      	ldr	r3, [r7, #4]
 800f6c8:	681b      	ldr	r3, [r3, #0]
 800f6ca:	461a      	mov	r2, r3
 800f6cc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f6ce:	633b      	str	r3, [r7, #48]	@ 0x30
 800f6d0:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f6d2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800f6d4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f6d6:	e841 2300 	strex	r3, r2, [r1]
 800f6da:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800f6dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f6de:	2b00      	cmp	r3, #0
 800f6e0:	d1e6      	bne.n	800f6b0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f6e2:	687b      	ldr	r3, [r7, #4]
 800f6e4:	681b      	ldr	r3, [r3, #0]
 800f6e6:	3308      	adds	r3, #8
 800f6e8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f6ea:	693b      	ldr	r3, [r7, #16]
 800f6ec:	e853 3f00 	ldrex	r3, [r3]
 800f6f0:	60fb      	str	r3, [r7, #12]
   return(result);
 800f6f2:	68fb      	ldr	r3, [r7, #12]
 800f6f4:	f023 0301 	bic.w	r3, r3, #1
 800f6f8:	64bb      	str	r3, [r7, #72]	@ 0x48
 800f6fa:	687b      	ldr	r3, [r7, #4]
 800f6fc:	681b      	ldr	r3, [r3, #0]
 800f6fe:	3308      	adds	r3, #8
 800f700:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800f702:	61fa      	str	r2, [r7, #28]
 800f704:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f706:	69b9      	ldr	r1, [r7, #24]
 800f708:	69fa      	ldr	r2, [r7, #28]
 800f70a:	e841 2300 	strex	r3, r2, [r1]
 800f70e:	617b      	str	r3, [r7, #20]
   return(result);
 800f710:	697b      	ldr	r3, [r7, #20]
 800f712:	2b00      	cmp	r3, #0
 800f714:	d1e5      	bne.n	800f6e2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800f716:	687b      	ldr	r3, [r7, #4]
 800f718:	2220      	movs	r2, #32
 800f71a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800f71e:	687b      	ldr	r3, [r7, #4]
 800f720:	2200      	movs	r2, #0
 800f722:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800f726:	2303      	movs	r3, #3
 800f728:	e012      	b.n	800f750 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800f72a:	687b      	ldr	r3, [r7, #4]
 800f72c:	2220      	movs	r2, #32
 800f72e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800f732:	687b      	ldr	r3, [r7, #4]
 800f734:	2220      	movs	r2, #32
 800f736:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f73a:	687b      	ldr	r3, [r7, #4]
 800f73c:	2200      	movs	r2, #0
 800f73e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800f740:	687b      	ldr	r3, [r7, #4]
 800f742:	2200      	movs	r2, #0
 800f744:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800f746:	687b      	ldr	r3, [r7, #4]
 800f748:	2200      	movs	r2, #0
 800f74a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800f74e:	2300      	movs	r3, #0
}
 800f750:	4618      	mov	r0, r3
 800f752:	3758      	adds	r7, #88	@ 0x58
 800f754:	46bd      	mov	sp, r7
 800f756:	bd80      	pop	{r7, pc}

0800f758 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800f758:	b580      	push	{r7, lr}
 800f75a:	b084      	sub	sp, #16
 800f75c:	af00      	add	r7, sp, #0
 800f75e:	60f8      	str	r0, [r7, #12]
 800f760:	60b9      	str	r1, [r7, #8]
 800f762:	603b      	str	r3, [r7, #0]
 800f764:	4613      	mov	r3, r2
 800f766:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f768:	e04f      	b.n	800f80a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800f76a:	69bb      	ldr	r3, [r7, #24]
 800f76c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f770:	d04b      	beq.n	800f80a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800f772:	f7f6 fb31 	bl	8005dd8 <HAL_GetTick>
 800f776:	4602      	mov	r2, r0
 800f778:	683b      	ldr	r3, [r7, #0]
 800f77a:	1ad3      	subs	r3, r2, r3
 800f77c:	69ba      	ldr	r2, [r7, #24]
 800f77e:	429a      	cmp	r2, r3
 800f780:	d302      	bcc.n	800f788 <UART_WaitOnFlagUntilTimeout+0x30>
 800f782:	69bb      	ldr	r3, [r7, #24]
 800f784:	2b00      	cmp	r3, #0
 800f786:	d101      	bne.n	800f78c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800f788:	2303      	movs	r3, #3
 800f78a:	e04e      	b.n	800f82a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800f78c:	68fb      	ldr	r3, [r7, #12]
 800f78e:	681b      	ldr	r3, [r3, #0]
 800f790:	681b      	ldr	r3, [r3, #0]
 800f792:	f003 0304 	and.w	r3, r3, #4
 800f796:	2b00      	cmp	r3, #0
 800f798:	d037      	beq.n	800f80a <UART_WaitOnFlagUntilTimeout+0xb2>
 800f79a:	68bb      	ldr	r3, [r7, #8]
 800f79c:	2b80      	cmp	r3, #128	@ 0x80
 800f79e:	d034      	beq.n	800f80a <UART_WaitOnFlagUntilTimeout+0xb2>
 800f7a0:	68bb      	ldr	r3, [r7, #8]
 800f7a2:	2b40      	cmp	r3, #64	@ 0x40
 800f7a4:	d031      	beq.n	800f80a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800f7a6:	68fb      	ldr	r3, [r7, #12]
 800f7a8:	681b      	ldr	r3, [r3, #0]
 800f7aa:	69db      	ldr	r3, [r3, #28]
 800f7ac:	f003 0308 	and.w	r3, r3, #8
 800f7b0:	2b08      	cmp	r3, #8
 800f7b2:	d110      	bne.n	800f7d6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800f7b4:	68fb      	ldr	r3, [r7, #12]
 800f7b6:	681b      	ldr	r3, [r3, #0]
 800f7b8:	2208      	movs	r2, #8
 800f7ba:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800f7bc:	68f8      	ldr	r0, [r7, #12]
 800f7be:	f000 f839 	bl	800f834 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800f7c2:	68fb      	ldr	r3, [r7, #12]
 800f7c4:	2208      	movs	r2, #8
 800f7c6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800f7ca:	68fb      	ldr	r3, [r7, #12]
 800f7cc:	2200      	movs	r2, #0
 800f7ce:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800f7d2:	2301      	movs	r3, #1
 800f7d4:	e029      	b.n	800f82a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800f7d6:	68fb      	ldr	r3, [r7, #12]
 800f7d8:	681b      	ldr	r3, [r3, #0]
 800f7da:	69db      	ldr	r3, [r3, #28]
 800f7dc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800f7e0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800f7e4:	d111      	bne.n	800f80a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800f7e6:	68fb      	ldr	r3, [r7, #12]
 800f7e8:	681b      	ldr	r3, [r3, #0]
 800f7ea:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800f7ee:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800f7f0:	68f8      	ldr	r0, [r7, #12]
 800f7f2:	f000 f81f 	bl	800f834 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800f7f6:	68fb      	ldr	r3, [r7, #12]
 800f7f8:	2220      	movs	r2, #32
 800f7fa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800f7fe:	68fb      	ldr	r3, [r7, #12]
 800f800:	2200      	movs	r2, #0
 800f802:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800f806:	2303      	movs	r3, #3
 800f808:	e00f      	b.n	800f82a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f80a:	68fb      	ldr	r3, [r7, #12]
 800f80c:	681b      	ldr	r3, [r3, #0]
 800f80e:	69da      	ldr	r2, [r3, #28]
 800f810:	68bb      	ldr	r3, [r7, #8]
 800f812:	4013      	ands	r3, r2
 800f814:	68ba      	ldr	r2, [r7, #8]
 800f816:	429a      	cmp	r2, r3
 800f818:	bf0c      	ite	eq
 800f81a:	2301      	moveq	r3, #1
 800f81c:	2300      	movne	r3, #0
 800f81e:	b2db      	uxtb	r3, r3
 800f820:	461a      	mov	r2, r3
 800f822:	79fb      	ldrb	r3, [r7, #7]
 800f824:	429a      	cmp	r2, r3
 800f826:	d0a0      	beq.n	800f76a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800f828:	2300      	movs	r3, #0
}
 800f82a:	4618      	mov	r0, r3
 800f82c:	3710      	adds	r7, #16
 800f82e:	46bd      	mov	sp, r7
 800f830:	bd80      	pop	{r7, pc}
	...

0800f834 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800f834:	b480      	push	{r7}
 800f836:	b095      	sub	sp, #84	@ 0x54
 800f838:	af00      	add	r7, sp, #0
 800f83a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f83c:	687b      	ldr	r3, [r7, #4]
 800f83e:	681b      	ldr	r3, [r3, #0]
 800f840:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f842:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f844:	e853 3f00 	ldrex	r3, [r3]
 800f848:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800f84a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f84c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800f850:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800f852:	687b      	ldr	r3, [r7, #4]
 800f854:	681b      	ldr	r3, [r3, #0]
 800f856:	461a      	mov	r2, r3
 800f858:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f85a:	643b      	str	r3, [r7, #64]	@ 0x40
 800f85c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f85e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800f860:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800f862:	e841 2300 	strex	r3, r2, [r1]
 800f866:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800f868:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f86a:	2b00      	cmp	r3, #0
 800f86c:	d1e6      	bne.n	800f83c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800f86e:	687b      	ldr	r3, [r7, #4]
 800f870:	681b      	ldr	r3, [r3, #0]
 800f872:	3308      	adds	r3, #8
 800f874:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f876:	6a3b      	ldr	r3, [r7, #32]
 800f878:	e853 3f00 	ldrex	r3, [r3]
 800f87c:	61fb      	str	r3, [r7, #28]
   return(result);
 800f87e:	69fa      	ldr	r2, [r7, #28]
 800f880:	4b1e      	ldr	r3, [pc, #120]	@ (800f8fc <UART_EndRxTransfer+0xc8>)
 800f882:	4013      	ands	r3, r2
 800f884:	64bb      	str	r3, [r7, #72]	@ 0x48
 800f886:	687b      	ldr	r3, [r7, #4]
 800f888:	681b      	ldr	r3, [r3, #0]
 800f88a:	3308      	adds	r3, #8
 800f88c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800f88e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800f890:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f892:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800f894:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f896:	e841 2300 	strex	r3, r2, [r1]
 800f89a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800f89c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f89e:	2b00      	cmp	r3, #0
 800f8a0:	d1e5      	bne.n	800f86e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f8a2:	687b      	ldr	r3, [r7, #4]
 800f8a4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f8a6:	2b01      	cmp	r3, #1
 800f8a8:	d118      	bne.n	800f8dc <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f8aa:	687b      	ldr	r3, [r7, #4]
 800f8ac:	681b      	ldr	r3, [r3, #0]
 800f8ae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f8b0:	68fb      	ldr	r3, [r7, #12]
 800f8b2:	e853 3f00 	ldrex	r3, [r3]
 800f8b6:	60bb      	str	r3, [r7, #8]
   return(result);
 800f8b8:	68bb      	ldr	r3, [r7, #8]
 800f8ba:	f023 0310 	bic.w	r3, r3, #16
 800f8be:	647b      	str	r3, [r7, #68]	@ 0x44
 800f8c0:	687b      	ldr	r3, [r7, #4]
 800f8c2:	681b      	ldr	r3, [r3, #0]
 800f8c4:	461a      	mov	r2, r3
 800f8c6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f8c8:	61bb      	str	r3, [r7, #24]
 800f8ca:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f8cc:	6979      	ldr	r1, [r7, #20]
 800f8ce:	69ba      	ldr	r2, [r7, #24]
 800f8d0:	e841 2300 	strex	r3, r2, [r1]
 800f8d4:	613b      	str	r3, [r7, #16]
   return(result);
 800f8d6:	693b      	ldr	r3, [r7, #16]
 800f8d8:	2b00      	cmp	r3, #0
 800f8da:	d1e6      	bne.n	800f8aa <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800f8dc:	687b      	ldr	r3, [r7, #4]
 800f8de:	2220      	movs	r2, #32
 800f8e0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f8e4:	687b      	ldr	r3, [r7, #4]
 800f8e6:	2200      	movs	r2, #0
 800f8e8:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800f8ea:	687b      	ldr	r3, [r7, #4]
 800f8ec:	2200      	movs	r2, #0
 800f8ee:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800f8f0:	bf00      	nop
 800f8f2:	3754      	adds	r7, #84	@ 0x54
 800f8f4:	46bd      	mov	sp, r7
 800f8f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8fa:	4770      	bx	lr
 800f8fc:	effffffe 	.word	0xeffffffe

0800f900 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800f900:	b480      	push	{r7}
 800f902:	b085      	sub	sp, #20
 800f904:	af00      	add	r7, sp, #0
 800f906:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f908:	687b      	ldr	r3, [r7, #4]
 800f90a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800f90e:	2b01      	cmp	r3, #1
 800f910:	d101      	bne.n	800f916 <HAL_UARTEx_DisableFifoMode+0x16>
 800f912:	2302      	movs	r3, #2
 800f914:	e027      	b.n	800f966 <HAL_UARTEx_DisableFifoMode+0x66>
 800f916:	687b      	ldr	r3, [r7, #4]
 800f918:	2201      	movs	r2, #1
 800f91a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800f91e:	687b      	ldr	r3, [r7, #4]
 800f920:	2224      	movs	r2, #36	@ 0x24
 800f922:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f926:	687b      	ldr	r3, [r7, #4]
 800f928:	681b      	ldr	r3, [r3, #0]
 800f92a:	681b      	ldr	r3, [r3, #0]
 800f92c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f92e:	687b      	ldr	r3, [r7, #4]
 800f930:	681b      	ldr	r3, [r3, #0]
 800f932:	681a      	ldr	r2, [r3, #0]
 800f934:	687b      	ldr	r3, [r7, #4]
 800f936:	681b      	ldr	r3, [r3, #0]
 800f938:	f022 0201 	bic.w	r2, r2, #1
 800f93c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800f93e:	68fb      	ldr	r3, [r7, #12]
 800f940:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800f944:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800f946:	687b      	ldr	r3, [r7, #4]
 800f948:	2200      	movs	r2, #0
 800f94a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f94c:	687b      	ldr	r3, [r7, #4]
 800f94e:	681b      	ldr	r3, [r3, #0]
 800f950:	68fa      	ldr	r2, [r7, #12]
 800f952:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f954:	687b      	ldr	r3, [r7, #4]
 800f956:	2220      	movs	r2, #32
 800f958:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f95c:	687b      	ldr	r3, [r7, #4]
 800f95e:	2200      	movs	r2, #0
 800f960:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800f964:	2300      	movs	r3, #0
}
 800f966:	4618      	mov	r0, r3
 800f968:	3714      	adds	r7, #20
 800f96a:	46bd      	mov	sp, r7
 800f96c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f970:	4770      	bx	lr

0800f972 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800f972:	b580      	push	{r7, lr}
 800f974:	b084      	sub	sp, #16
 800f976:	af00      	add	r7, sp, #0
 800f978:	6078      	str	r0, [r7, #4]
 800f97a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f97c:	687b      	ldr	r3, [r7, #4]
 800f97e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800f982:	2b01      	cmp	r3, #1
 800f984:	d101      	bne.n	800f98a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800f986:	2302      	movs	r3, #2
 800f988:	e02d      	b.n	800f9e6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800f98a:	687b      	ldr	r3, [r7, #4]
 800f98c:	2201      	movs	r2, #1
 800f98e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800f992:	687b      	ldr	r3, [r7, #4]
 800f994:	2224      	movs	r2, #36	@ 0x24
 800f996:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f99a:	687b      	ldr	r3, [r7, #4]
 800f99c:	681b      	ldr	r3, [r3, #0]
 800f99e:	681b      	ldr	r3, [r3, #0]
 800f9a0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f9a2:	687b      	ldr	r3, [r7, #4]
 800f9a4:	681b      	ldr	r3, [r3, #0]
 800f9a6:	681a      	ldr	r2, [r3, #0]
 800f9a8:	687b      	ldr	r3, [r7, #4]
 800f9aa:	681b      	ldr	r3, [r3, #0]
 800f9ac:	f022 0201 	bic.w	r2, r2, #1
 800f9b0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800f9b2:	687b      	ldr	r3, [r7, #4]
 800f9b4:	681b      	ldr	r3, [r3, #0]
 800f9b6:	689b      	ldr	r3, [r3, #8]
 800f9b8:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800f9bc:	687b      	ldr	r3, [r7, #4]
 800f9be:	681b      	ldr	r3, [r3, #0]
 800f9c0:	683a      	ldr	r2, [r7, #0]
 800f9c2:	430a      	orrs	r2, r1
 800f9c4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800f9c6:	6878      	ldr	r0, [r7, #4]
 800f9c8:	f000 f850 	bl	800fa6c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f9cc:	687b      	ldr	r3, [r7, #4]
 800f9ce:	681b      	ldr	r3, [r3, #0]
 800f9d0:	68fa      	ldr	r2, [r7, #12]
 800f9d2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f9d4:	687b      	ldr	r3, [r7, #4]
 800f9d6:	2220      	movs	r2, #32
 800f9d8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f9dc:	687b      	ldr	r3, [r7, #4]
 800f9de:	2200      	movs	r2, #0
 800f9e0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800f9e4:	2300      	movs	r3, #0
}
 800f9e6:	4618      	mov	r0, r3
 800f9e8:	3710      	adds	r7, #16
 800f9ea:	46bd      	mov	sp, r7
 800f9ec:	bd80      	pop	{r7, pc}

0800f9ee <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800f9ee:	b580      	push	{r7, lr}
 800f9f0:	b084      	sub	sp, #16
 800f9f2:	af00      	add	r7, sp, #0
 800f9f4:	6078      	str	r0, [r7, #4]
 800f9f6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f9f8:	687b      	ldr	r3, [r7, #4]
 800f9fa:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800f9fe:	2b01      	cmp	r3, #1
 800fa00:	d101      	bne.n	800fa06 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800fa02:	2302      	movs	r3, #2
 800fa04:	e02d      	b.n	800fa62 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800fa06:	687b      	ldr	r3, [r7, #4]
 800fa08:	2201      	movs	r2, #1
 800fa0a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800fa0e:	687b      	ldr	r3, [r7, #4]
 800fa10:	2224      	movs	r2, #36	@ 0x24
 800fa12:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800fa16:	687b      	ldr	r3, [r7, #4]
 800fa18:	681b      	ldr	r3, [r3, #0]
 800fa1a:	681b      	ldr	r3, [r3, #0]
 800fa1c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800fa1e:	687b      	ldr	r3, [r7, #4]
 800fa20:	681b      	ldr	r3, [r3, #0]
 800fa22:	681a      	ldr	r2, [r3, #0]
 800fa24:	687b      	ldr	r3, [r7, #4]
 800fa26:	681b      	ldr	r3, [r3, #0]
 800fa28:	f022 0201 	bic.w	r2, r2, #1
 800fa2c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800fa2e:	687b      	ldr	r3, [r7, #4]
 800fa30:	681b      	ldr	r3, [r3, #0]
 800fa32:	689b      	ldr	r3, [r3, #8]
 800fa34:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800fa38:	687b      	ldr	r3, [r7, #4]
 800fa3a:	681b      	ldr	r3, [r3, #0]
 800fa3c:	683a      	ldr	r2, [r7, #0]
 800fa3e:	430a      	orrs	r2, r1
 800fa40:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800fa42:	6878      	ldr	r0, [r7, #4]
 800fa44:	f000 f812 	bl	800fa6c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800fa48:	687b      	ldr	r3, [r7, #4]
 800fa4a:	681b      	ldr	r3, [r3, #0]
 800fa4c:	68fa      	ldr	r2, [r7, #12]
 800fa4e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800fa50:	687b      	ldr	r3, [r7, #4]
 800fa52:	2220      	movs	r2, #32
 800fa54:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800fa58:	687b      	ldr	r3, [r7, #4]
 800fa5a:	2200      	movs	r2, #0
 800fa5c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800fa60:	2300      	movs	r3, #0
}
 800fa62:	4618      	mov	r0, r3
 800fa64:	3710      	adds	r7, #16
 800fa66:	46bd      	mov	sp, r7
 800fa68:	bd80      	pop	{r7, pc}
	...

0800fa6c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800fa6c:	b480      	push	{r7}
 800fa6e:	b085      	sub	sp, #20
 800fa70:	af00      	add	r7, sp, #0
 800fa72:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800fa74:	687b      	ldr	r3, [r7, #4]
 800fa76:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800fa78:	2b00      	cmp	r3, #0
 800fa7a:	d108      	bne.n	800fa8e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800fa7c:	687b      	ldr	r3, [r7, #4]
 800fa7e:	2201      	movs	r2, #1
 800fa80:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800fa84:	687b      	ldr	r3, [r7, #4]
 800fa86:	2201      	movs	r2, #1
 800fa88:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800fa8c:	e031      	b.n	800faf2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800fa8e:	2310      	movs	r3, #16
 800fa90:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800fa92:	2310      	movs	r3, #16
 800fa94:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800fa96:	687b      	ldr	r3, [r7, #4]
 800fa98:	681b      	ldr	r3, [r3, #0]
 800fa9a:	689b      	ldr	r3, [r3, #8]
 800fa9c:	0e5b      	lsrs	r3, r3, #25
 800fa9e:	b2db      	uxtb	r3, r3
 800faa0:	f003 0307 	and.w	r3, r3, #7
 800faa4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800faa6:	687b      	ldr	r3, [r7, #4]
 800faa8:	681b      	ldr	r3, [r3, #0]
 800faaa:	689b      	ldr	r3, [r3, #8]
 800faac:	0f5b      	lsrs	r3, r3, #29
 800faae:	b2db      	uxtb	r3, r3
 800fab0:	f003 0307 	and.w	r3, r3, #7
 800fab4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800fab6:	7bbb      	ldrb	r3, [r7, #14]
 800fab8:	7b3a      	ldrb	r2, [r7, #12]
 800faba:	4911      	ldr	r1, [pc, #68]	@ (800fb00 <UARTEx_SetNbDataToProcess+0x94>)
 800fabc:	5c8a      	ldrb	r2, [r1, r2]
 800fabe:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800fac2:	7b3a      	ldrb	r2, [r7, #12]
 800fac4:	490f      	ldr	r1, [pc, #60]	@ (800fb04 <UARTEx_SetNbDataToProcess+0x98>)
 800fac6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800fac8:	fb93 f3f2 	sdiv	r3, r3, r2
 800facc:	b29a      	uxth	r2, r3
 800face:	687b      	ldr	r3, [r7, #4]
 800fad0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800fad4:	7bfb      	ldrb	r3, [r7, #15]
 800fad6:	7b7a      	ldrb	r2, [r7, #13]
 800fad8:	4909      	ldr	r1, [pc, #36]	@ (800fb00 <UARTEx_SetNbDataToProcess+0x94>)
 800fada:	5c8a      	ldrb	r2, [r1, r2]
 800fadc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800fae0:	7b7a      	ldrb	r2, [r7, #13]
 800fae2:	4908      	ldr	r1, [pc, #32]	@ (800fb04 <UARTEx_SetNbDataToProcess+0x98>)
 800fae4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800fae6:	fb93 f3f2 	sdiv	r3, r3, r2
 800faea:	b29a      	uxth	r2, r3
 800faec:	687b      	ldr	r3, [r7, #4]
 800faee:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800faf2:	bf00      	nop
 800faf4:	3714      	adds	r7, #20
 800faf6:	46bd      	mov	sp, r7
 800faf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fafc:	4770      	bx	lr
 800fafe:	bf00      	nop
 800fb00:	08014bc8 	.word	0x08014bc8
 800fb04:	08014bd0 	.word	0x08014bd0

0800fb08 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800fb08:	b084      	sub	sp, #16
 800fb0a:	b480      	push	{r7}
 800fb0c:	b085      	sub	sp, #20
 800fb0e:	af00      	add	r7, sp, #0
 800fb10:	6078      	str	r0, [r7, #4]
 800fb12:	f107 001c 	add.w	r0, r7, #28
 800fb16:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800fb1a:	2300      	movs	r3, #0
 800fb1c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 800fb1e:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 800fb20:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 800fb22:	431a      	orrs	r2, r3
             Init.BusWide             | \
 800fb24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockPowerSave      | \
 800fb26:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 800fb28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.BusWide             | \
 800fb2a:	431a      	orrs	r2, r3
             Init.ClockDiv
 800fb2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.HardwareFlowControl | \
 800fb2e:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 800fb30:	68fa      	ldr	r2, [r7, #12]
 800fb32:	4313      	orrs	r3, r2
 800fb34:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800fb36:	687b      	ldr	r3, [r7, #4]
 800fb38:	685a      	ldr	r2, [r3, #4]
 800fb3a:	4b07      	ldr	r3, [pc, #28]	@ (800fb58 <SDMMC_Init+0x50>)
 800fb3c:	4013      	ands	r3, r2
 800fb3e:	68fa      	ldr	r2, [r7, #12]
 800fb40:	431a      	orrs	r2, r3
 800fb42:	687b      	ldr	r3, [r7, #4]
 800fb44:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800fb46:	2300      	movs	r3, #0
}
 800fb48:	4618      	mov	r0, r3
 800fb4a:	3714      	adds	r7, #20
 800fb4c:	46bd      	mov	sp, r7
 800fb4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb52:	b004      	add	sp, #16
 800fb54:	4770      	bx	lr
 800fb56:	bf00      	nop
 800fb58:	ffc02c00 	.word	0xffc02c00

0800fb5c <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800fb5c:	b480      	push	{r7}
 800fb5e:	b083      	sub	sp, #12
 800fb60:	af00      	add	r7, sp, #0
 800fb62:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 800fb64:	687b      	ldr	r3, [r7, #4]
 800fb66:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 800fb6a:	4618      	mov	r0, r3
 800fb6c:	370c      	adds	r7, #12
 800fb6e:	46bd      	mov	sp, r7
 800fb70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb74:	4770      	bx	lr

0800fb76 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 800fb76:	b480      	push	{r7}
 800fb78:	b083      	sub	sp, #12
 800fb7a:	af00      	add	r7, sp, #0
 800fb7c:	6078      	str	r0, [r7, #4]
 800fb7e:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 800fb80:	683b      	ldr	r3, [r7, #0]
 800fb82:	681a      	ldr	r2, [r3, #0]
 800fb84:	687b      	ldr	r3, [r7, #4]
 800fb86:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 800fb8a:	2300      	movs	r3, #0
}
 800fb8c:	4618      	mov	r0, r3
 800fb8e:	370c      	adds	r7, #12
 800fb90:	46bd      	mov	sp, r7
 800fb92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb96:	4770      	bx	lr

0800fb98 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 800fb98:	b480      	push	{r7}
 800fb9a:	b083      	sub	sp, #12
 800fb9c:	af00      	add	r7, sp, #0
 800fb9e:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 800fba0:	687b      	ldr	r3, [r7, #4]
 800fba2:	681b      	ldr	r3, [r3, #0]
 800fba4:	f043 0203 	orr.w	r2, r3, #3
 800fba8:	687b      	ldr	r3, [r7, #4]
 800fbaa:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800fbac:	2300      	movs	r3, #0
}
 800fbae:	4618      	mov	r0, r3
 800fbb0:	370c      	adds	r7, #12
 800fbb2:	46bd      	mov	sp, r7
 800fbb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbb8:	4770      	bx	lr

0800fbba <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 800fbba:	b480      	push	{r7}
 800fbbc:	b083      	sub	sp, #12
 800fbbe:	af00      	add	r7, sp, #0
 800fbc0:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800fbc2:	687b      	ldr	r3, [r7, #4]
 800fbc4:	681b      	ldr	r3, [r3, #0]
 800fbc6:	f003 0303 	and.w	r3, r3, #3
}
 800fbca:	4618      	mov	r0, r3
 800fbcc:	370c      	adds	r7, #12
 800fbce:	46bd      	mov	sp, r7
 800fbd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbd4:	4770      	bx	lr
	...

0800fbd8 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800fbd8:	b480      	push	{r7}
 800fbda:	b085      	sub	sp, #20
 800fbdc:	af00      	add	r7, sp, #0
 800fbde:	6078      	str	r0, [r7, #4]
 800fbe0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800fbe2:	2300      	movs	r3, #0
 800fbe4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800fbe6:	683b      	ldr	r3, [r7, #0]
 800fbe8:	681a      	ldr	r2, [r3, #0]
 800fbea:	687b      	ldr	r3, [r7, #4]
 800fbec:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800fbee:	683b      	ldr	r3, [r7, #0]
 800fbf0:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 800fbf2:	683b      	ldr	r3, [r7, #0]
 800fbf4:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800fbf6:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 800fbf8:	683b      	ldr	r3, [r7, #0]
 800fbfa:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 800fbfc:	431a      	orrs	r2, r3
                       Command->CPSM);
 800fbfe:	683b      	ldr	r3, [r7, #0]
 800fc00:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 800fc02:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800fc04:	68fa      	ldr	r2, [r7, #12]
 800fc06:	4313      	orrs	r3, r2
 800fc08:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800fc0a:	687b      	ldr	r3, [r7, #4]
 800fc0c:	68da      	ldr	r2, [r3, #12]
 800fc0e:	4b06      	ldr	r3, [pc, #24]	@ (800fc28 <SDMMC_SendCommand+0x50>)
 800fc10:	4013      	ands	r3, r2
 800fc12:	68fa      	ldr	r2, [r7, #12]
 800fc14:	431a      	orrs	r2, r3
 800fc16:	687b      	ldr	r3, [r7, #4]
 800fc18:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800fc1a:	2300      	movs	r3, #0
}
 800fc1c:	4618      	mov	r0, r3
 800fc1e:	3714      	adds	r7, #20
 800fc20:	46bd      	mov	sp, r7
 800fc22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc26:	4770      	bx	lr
 800fc28:	fffee0c0 	.word	0xfffee0c0

0800fc2c <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800fc2c:	b480      	push	{r7}
 800fc2e:	b083      	sub	sp, #12
 800fc30:	af00      	add	r7, sp, #0
 800fc32:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800fc34:	687b      	ldr	r3, [r7, #4]
 800fc36:	691b      	ldr	r3, [r3, #16]
 800fc38:	b2db      	uxtb	r3, r3
}
 800fc3a:	4618      	mov	r0, r3
 800fc3c:	370c      	adds	r7, #12
 800fc3e:	46bd      	mov	sp, r7
 800fc40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc44:	4770      	bx	lr

0800fc46 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800fc46:	b480      	push	{r7}
 800fc48:	b085      	sub	sp, #20
 800fc4a:	af00      	add	r7, sp, #0
 800fc4c:	6078      	str	r0, [r7, #4]
 800fc4e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800fc50:	687b      	ldr	r3, [r7, #4]
 800fc52:	3314      	adds	r3, #20
 800fc54:	461a      	mov	r2, r3
 800fc56:	683b      	ldr	r3, [r7, #0]
 800fc58:	4413      	add	r3, r2
 800fc5a:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 800fc5c:	68fb      	ldr	r3, [r7, #12]
 800fc5e:	681b      	ldr	r3, [r3, #0]
}
 800fc60:	4618      	mov	r0, r3
 800fc62:	3714      	adds	r7, #20
 800fc64:	46bd      	mov	sp, r7
 800fc66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc6a:	4770      	bx	lr

0800fc6c <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 800fc6c:	b480      	push	{r7}
 800fc6e:	b085      	sub	sp, #20
 800fc70:	af00      	add	r7, sp, #0
 800fc72:	6078      	str	r0, [r7, #4]
 800fc74:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800fc76:	2300      	movs	r3, #0
 800fc78:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800fc7a:	683b      	ldr	r3, [r7, #0]
 800fc7c:	681a      	ldr	r2, [r3, #0]
 800fc7e:	687b      	ldr	r3, [r7, #4]
 800fc80:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800fc82:	683b      	ldr	r3, [r7, #0]
 800fc84:	685a      	ldr	r2, [r3, #4]
 800fc86:	687b      	ldr	r3, [r7, #4]
 800fc88:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800fc8a:	683b      	ldr	r3, [r7, #0]
 800fc8c:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 800fc8e:	683b      	ldr	r3, [r7, #0]
 800fc90:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800fc92:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 800fc94:	683b      	ldr	r3, [r7, #0]
 800fc96:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 800fc98:	431a      	orrs	r2, r3
                       Data->DPSM);
 800fc9a:	683b      	ldr	r3, [r7, #0]
 800fc9c:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 800fc9e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800fca0:	68fa      	ldr	r2, [r7, #12]
 800fca2:	4313      	orrs	r3, r2
 800fca4:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800fca6:	687b      	ldr	r3, [r7, #4]
 800fca8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fcaa:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800fcae:	68fb      	ldr	r3, [r7, #12]
 800fcb0:	431a      	orrs	r2, r3
 800fcb2:	687b      	ldr	r3, [r7, #4]
 800fcb4:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800fcb6:	2300      	movs	r3, #0

}
 800fcb8:	4618      	mov	r0, r3
 800fcba:	3714      	adds	r7, #20
 800fcbc:	46bd      	mov	sp, r7
 800fcbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcc2:	4770      	bx	lr

0800fcc4 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800fcc4:	b580      	push	{r7, lr}
 800fcc6:	b088      	sub	sp, #32
 800fcc8:	af00      	add	r7, sp, #0
 800fcca:	6078      	str	r0, [r7, #4]
 800fccc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800fcce:	683b      	ldr	r3, [r7, #0]
 800fcd0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800fcd2:	2310      	movs	r3, #16
 800fcd4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800fcd6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800fcda:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800fcdc:	2300      	movs	r3, #0
 800fcde:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800fce0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800fce4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800fce6:	f107 0308 	add.w	r3, r7, #8
 800fcea:	4619      	mov	r1, r3
 800fcec:	6878      	ldr	r0, [r7, #4]
 800fcee:	f7ff ff73 	bl	800fbd8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800fcf2:	f241 3288 	movw	r2, #5000	@ 0x1388
 800fcf6:	2110      	movs	r1, #16
 800fcf8:	6878      	ldr	r0, [r7, #4]
 800fcfa:	f000 fa5f 	bl	80101bc <SDMMC_GetCmdResp1>
 800fcfe:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800fd00:	69fb      	ldr	r3, [r7, #28]
}
 800fd02:	4618      	mov	r0, r3
 800fd04:	3720      	adds	r7, #32
 800fd06:	46bd      	mov	sp, r7
 800fd08:	bd80      	pop	{r7, pc}

0800fd0a <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800fd0a:	b580      	push	{r7, lr}
 800fd0c:	b088      	sub	sp, #32
 800fd0e:	af00      	add	r7, sp, #0
 800fd10:	6078      	str	r0, [r7, #4]
 800fd12:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800fd14:	683b      	ldr	r3, [r7, #0]
 800fd16:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800fd18:	2311      	movs	r3, #17
 800fd1a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800fd1c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800fd20:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800fd22:	2300      	movs	r3, #0
 800fd24:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800fd26:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800fd2a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800fd2c:	f107 0308 	add.w	r3, r7, #8
 800fd30:	4619      	mov	r1, r3
 800fd32:	6878      	ldr	r0, [r7, #4]
 800fd34:	f7ff ff50 	bl	800fbd8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800fd38:	f241 3288 	movw	r2, #5000	@ 0x1388
 800fd3c:	2111      	movs	r1, #17
 800fd3e:	6878      	ldr	r0, [r7, #4]
 800fd40:	f000 fa3c 	bl	80101bc <SDMMC_GetCmdResp1>
 800fd44:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800fd46:	69fb      	ldr	r3, [r7, #28]
}
 800fd48:	4618      	mov	r0, r3
 800fd4a:	3720      	adds	r7, #32
 800fd4c:	46bd      	mov	sp, r7
 800fd4e:	bd80      	pop	{r7, pc}

0800fd50 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800fd50:	b580      	push	{r7, lr}
 800fd52:	b088      	sub	sp, #32
 800fd54:	af00      	add	r7, sp, #0
 800fd56:	6078      	str	r0, [r7, #4]
 800fd58:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800fd5a:	683b      	ldr	r3, [r7, #0]
 800fd5c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800fd5e:	2312      	movs	r3, #18
 800fd60:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800fd62:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800fd66:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800fd68:	2300      	movs	r3, #0
 800fd6a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800fd6c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800fd70:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800fd72:	f107 0308 	add.w	r3, r7, #8
 800fd76:	4619      	mov	r1, r3
 800fd78:	6878      	ldr	r0, [r7, #4]
 800fd7a:	f7ff ff2d 	bl	800fbd8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800fd7e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800fd82:	2112      	movs	r1, #18
 800fd84:	6878      	ldr	r0, [r7, #4]
 800fd86:	f000 fa19 	bl	80101bc <SDMMC_GetCmdResp1>
 800fd8a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800fd8c:	69fb      	ldr	r3, [r7, #28]
}
 800fd8e:	4618      	mov	r0, r3
 800fd90:	3720      	adds	r7, #32
 800fd92:	46bd      	mov	sp, r7
 800fd94:	bd80      	pop	{r7, pc}

0800fd96 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800fd96:	b580      	push	{r7, lr}
 800fd98:	b088      	sub	sp, #32
 800fd9a:	af00      	add	r7, sp, #0
 800fd9c:	6078      	str	r0, [r7, #4]
 800fd9e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800fda0:	683b      	ldr	r3, [r7, #0]
 800fda2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800fda4:	2318      	movs	r3, #24
 800fda6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800fda8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800fdac:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800fdae:	2300      	movs	r3, #0
 800fdb0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800fdb2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800fdb6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800fdb8:	f107 0308 	add.w	r3, r7, #8
 800fdbc:	4619      	mov	r1, r3
 800fdbe:	6878      	ldr	r0, [r7, #4]
 800fdc0:	f7ff ff0a 	bl	800fbd8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800fdc4:	f241 3288 	movw	r2, #5000	@ 0x1388
 800fdc8:	2118      	movs	r1, #24
 800fdca:	6878      	ldr	r0, [r7, #4]
 800fdcc:	f000 f9f6 	bl	80101bc <SDMMC_GetCmdResp1>
 800fdd0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800fdd2:	69fb      	ldr	r3, [r7, #28]
}
 800fdd4:	4618      	mov	r0, r3
 800fdd6:	3720      	adds	r7, #32
 800fdd8:	46bd      	mov	sp, r7
 800fdda:	bd80      	pop	{r7, pc}

0800fddc <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800fddc:	b580      	push	{r7, lr}
 800fdde:	b088      	sub	sp, #32
 800fde0:	af00      	add	r7, sp, #0
 800fde2:	6078      	str	r0, [r7, #4]
 800fde4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800fde6:	683b      	ldr	r3, [r7, #0]
 800fde8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800fdea:	2319      	movs	r3, #25
 800fdec:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800fdee:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800fdf2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800fdf4:	2300      	movs	r3, #0
 800fdf6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800fdf8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800fdfc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800fdfe:	f107 0308 	add.w	r3, r7, #8
 800fe02:	4619      	mov	r1, r3
 800fe04:	6878      	ldr	r0, [r7, #4]
 800fe06:	f7ff fee7 	bl	800fbd8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800fe0a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800fe0e:	2119      	movs	r1, #25
 800fe10:	6878      	ldr	r0, [r7, #4]
 800fe12:	f000 f9d3 	bl	80101bc <SDMMC_GetCmdResp1>
 800fe16:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800fe18:	69fb      	ldr	r3, [r7, #28]
}
 800fe1a:	4618      	mov	r0, r3
 800fe1c:	3720      	adds	r7, #32
 800fe1e:	46bd      	mov	sp, r7
 800fe20:	bd80      	pop	{r7, pc}
	...

0800fe24 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800fe24:	b580      	push	{r7, lr}
 800fe26:	b088      	sub	sp, #32
 800fe28:	af00      	add	r7, sp, #0
 800fe2a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800fe2c:	2300      	movs	r3, #0
 800fe2e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800fe30:	230c      	movs	r3, #12
 800fe32:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800fe34:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800fe38:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800fe3a:	2300      	movs	r3, #0
 800fe3c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800fe3e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800fe42:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 800fe44:	687b      	ldr	r3, [r7, #4]
 800fe46:	68db      	ldr	r3, [r3, #12]
 800fe48:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800fe4c:	687b      	ldr	r3, [r7, #4]
 800fe4e:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 800fe50:	687b      	ldr	r3, [r7, #4]
 800fe52:	68db      	ldr	r3, [r3, #12]
 800fe54:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 800fe58:	687b      	ldr	r3, [r7, #4]
 800fe5a:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800fe5c:	f107 0308 	add.w	r3, r7, #8
 800fe60:	4619      	mov	r1, r3
 800fe62:	6878      	ldr	r0, [r7, #4]
 800fe64:	f7ff feb8 	bl	800fbd8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800fe68:	4a0b      	ldr	r2, [pc, #44]	@ (800fe98 <SDMMC_CmdStopTransfer+0x74>)
 800fe6a:	210c      	movs	r1, #12
 800fe6c:	6878      	ldr	r0, [r7, #4]
 800fe6e:	f000 f9a5 	bl	80101bc <SDMMC_GetCmdResp1>
 800fe72:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800fe74:	687b      	ldr	r3, [r7, #4]
 800fe76:	68db      	ldr	r3, [r3, #12]
 800fe78:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800fe7c:	687b      	ldr	r3, [r7, #4]
 800fe7e:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800fe80:	69fb      	ldr	r3, [r7, #28]
 800fe82:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800fe86:	d101      	bne.n	800fe8c <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 800fe88:	2300      	movs	r3, #0
 800fe8a:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 800fe8c:	69fb      	ldr	r3, [r7, #28]
}
 800fe8e:	4618      	mov	r0, r3
 800fe90:	3720      	adds	r7, #32
 800fe92:	46bd      	mov	sp, r7
 800fe94:	bd80      	pop	{r7, pc}
 800fe96:	bf00      	nop
 800fe98:	05f5e100 	.word	0x05f5e100

0800fe9c <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 800fe9c:	b580      	push	{r7, lr}
 800fe9e:	b088      	sub	sp, #32
 800fea0:	af00      	add	r7, sp, #0
 800fea2:	6078      	str	r0, [r7, #4]
 800fea4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800fea6:	683b      	ldr	r3, [r7, #0]
 800fea8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800feaa:	2307      	movs	r3, #7
 800feac:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800feae:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800feb2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800feb4:	2300      	movs	r3, #0
 800feb6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800feb8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800febc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800febe:	f107 0308 	add.w	r3, r7, #8
 800fec2:	4619      	mov	r1, r3
 800fec4:	6878      	ldr	r0, [r7, #4]
 800fec6:	f7ff fe87 	bl	800fbd8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800feca:	f241 3288 	movw	r2, #5000	@ 0x1388
 800fece:	2107      	movs	r1, #7
 800fed0:	6878      	ldr	r0, [r7, #4]
 800fed2:	f000 f973 	bl	80101bc <SDMMC_GetCmdResp1>
 800fed6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800fed8:	69fb      	ldr	r3, [r7, #28]
}
 800feda:	4618      	mov	r0, r3
 800fedc:	3720      	adds	r7, #32
 800fede:	46bd      	mov	sp, r7
 800fee0:	bd80      	pop	{r7, pc}

0800fee2 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800fee2:	b580      	push	{r7, lr}
 800fee4:	b088      	sub	sp, #32
 800fee6:	af00      	add	r7, sp, #0
 800fee8:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800feea:	2300      	movs	r3, #0
 800feec:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800feee:	2300      	movs	r3, #0
 800fef0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800fef2:	2300      	movs	r3, #0
 800fef4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800fef6:	2300      	movs	r3, #0
 800fef8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800fefa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800fefe:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ff00:	f107 0308 	add.w	r3, r7, #8
 800ff04:	4619      	mov	r1, r3
 800ff06:	6878      	ldr	r0, [r7, #4]
 800ff08:	f7ff fe66 	bl	800fbd8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800ff0c:	6878      	ldr	r0, [r7, #4]
 800ff0e:	f000 fb97 	bl	8010640 <SDMMC_GetCmdError>
 800ff12:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ff14:	69fb      	ldr	r3, [r7, #28]
}
 800ff16:	4618      	mov	r0, r3
 800ff18:	3720      	adds	r7, #32
 800ff1a:	46bd      	mov	sp, r7
 800ff1c:	bd80      	pop	{r7, pc}

0800ff1e <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800ff1e:	b580      	push	{r7, lr}
 800ff20:	b088      	sub	sp, #32
 800ff22:	af00      	add	r7, sp, #0
 800ff24:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800ff26:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 800ff2a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800ff2c:	2308      	movs	r3, #8
 800ff2e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ff30:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800ff34:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ff36:	2300      	movs	r3, #0
 800ff38:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ff3a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800ff3e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ff40:	f107 0308 	add.w	r3, r7, #8
 800ff44:	4619      	mov	r1, r3
 800ff46:	6878      	ldr	r0, [r7, #4]
 800ff48:	f7ff fe46 	bl	800fbd8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800ff4c:	6878      	ldr	r0, [r7, #4]
 800ff4e:	f000 fb29 	bl	80105a4 <SDMMC_GetCmdResp7>
 800ff52:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ff54:	69fb      	ldr	r3, [r7, #28]
}
 800ff56:	4618      	mov	r0, r3
 800ff58:	3720      	adds	r7, #32
 800ff5a:	46bd      	mov	sp, r7
 800ff5c:	bd80      	pop	{r7, pc}

0800ff5e <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800ff5e:	b580      	push	{r7, lr}
 800ff60:	b088      	sub	sp, #32
 800ff62:	af00      	add	r7, sp, #0
 800ff64:	6078      	str	r0, [r7, #4]
 800ff66:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800ff68:	683b      	ldr	r3, [r7, #0]
 800ff6a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800ff6c:	2337      	movs	r3, #55	@ 0x37
 800ff6e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ff70:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800ff74:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ff76:	2300      	movs	r3, #0
 800ff78:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ff7a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800ff7e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ff80:	f107 0308 	add.w	r3, r7, #8
 800ff84:	4619      	mov	r1, r3
 800ff86:	6878      	ldr	r0, [r7, #4]
 800ff88:	f7ff fe26 	bl	800fbd8 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800ff8c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ff90:	2137      	movs	r1, #55	@ 0x37
 800ff92:	6878      	ldr	r0, [r7, #4]
 800ff94:	f000 f912 	bl	80101bc <SDMMC_GetCmdResp1>
 800ff98:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ff9a:	69fb      	ldr	r3, [r7, #28]
}
 800ff9c:	4618      	mov	r0, r3
 800ff9e:	3720      	adds	r7, #32
 800ffa0:	46bd      	mov	sp, r7
 800ffa2:	bd80      	pop	{r7, pc}

0800ffa4 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800ffa4:	b580      	push	{r7, lr}
 800ffa6:	b088      	sub	sp, #32
 800ffa8:	af00      	add	r7, sp, #0
 800ffaa:	6078      	str	r0, [r7, #4]
 800ffac:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800ffae:	683b      	ldr	r3, [r7, #0]
 800ffb0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800ffb2:	2329      	movs	r3, #41	@ 0x29
 800ffb4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ffb6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800ffba:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ffbc:	2300      	movs	r3, #0
 800ffbe:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ffc0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800ffc4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ffc6:	f107 0308 	add.w	r3, r7, #8
 800ffca:	4619      	mov	r1, r3
 800ffcc:	6878      	ldr	r0, [r7, #4]
 800ffce:	f7ff fe03 	bl	800fbd8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800ffd2:	6878      	ldr	r0, [r7, #4]
 800ffd4:	f000 fa2e 	bl	8010434 <SDMMC_GetCmdResp3>
 800ffd8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ffda:	69fb      	ldr	r3, [r7, #28]
}
 800ffdc:	4618      	mov	r0, r3
 800ffde:	3720      	adds	r7, #32
 800ffe0:	46bd      	mov	sp, r7
 800ffe2:	bd80      	pop	{r7, pc}

0800ffe4 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800ffe4:	b580      	push	{r7, lr}
 800ffe6:	b088      	sub	sp, #32
 800ffe8:	af00      	add	r7, sp, #0
 800ffea:	6078      	str	r0, [r7, #4]
 800ffec:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800ffee:	683b      	ldr	r3, [r7, #0]
 800fff0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800fff2:	2306      	movs	r3, #6
 800fff4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800fff6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800fffa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800fffc:	2300      	movs	r3, #0
 800fffe:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010000:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8010004:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010006:	f107 0308 	add.w	r3, r7, #8
 801000a:	4619      	mov	r1, r3
 801000c:	6878      	ldr	r0, [r7, #4]
 801000e:	f7ff fde3 	bl	800fbd8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8010012:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010016:	2106      	movs	r1, #6
 8010018:	6878      	ldr	r0, [r7, #4]
 801001a:	f000 f8cf 	bl	80101bc <SDMMC_GetCmdResp1>
 801001e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010020:	69fb      	ldr	r3, [r7, #28]
}
 8010022:	4618      	mov	r0, r3
 8010024:	3720      	adds	r7, #32
 8010026:	46bd      	mov	sp, r7
 8010028:	bd80      	pop	{r7, pc}

0801002a <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 801002a:	b580      	push	{r7, lr}
 801002c:	b088      	sub	sp, #32
 801002e:	af00      	add	r7, sp, #0
 8010030:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8010032:	2300      	movs	r3, #0
 8010034:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8010036:	2333      	movs	r3, #51	@ 0x33
 8010038:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801003a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 801003e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010040:	2300      	movs	r3, #0
 8010042:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010044:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8010048:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801004a:	f107 0308 	add.w	r3, r7, #8
 801004e:	4619      	mov	r1, r3
 8010050:	6878      	ldr	r0, [r7, #4]
 8010052:	f7ff fdc1 	bl	800fbd8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 8010056:	f241 3288 	movw	r2, #5000	@ 0x1388
 801005a:	2133      	movs	r1, #51	@ 0x33
 801005c:	6878      	ldr	r0, [r7, #4]
 801005e:	f000 f8ad 	bl	80101bc <SDMMC_GetCmdResp1>
 8010062:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010064:	69fb      	ldr	r3, [r7, #28]
}
 8010066:	4618      	mov	r0, r3
 8010068:	3720      	adds	r7, #32
 801006a:	46bd      	mov	sp, r7
 801006c:	bd80      	pop	{r7, pc}

0801006e <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 801006e:	b580      	push	{r7, lr}
 8010070:	b088      	sub	sp, #32
 8010072:	af00      	add	r7, sp, #0
 8010074:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8010076:	2300      	movs	r3, #0
 8010078:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 801007a:	2302      	movs	r3, #2
 801007c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 801007e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8010082:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010084:	2300      	movs	r3, #0
 8010086:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010088:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 801008c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801008e:	f107 0308 	add.w	r3, r7, #8
 8010092:	4619      	mov	r1, r3
 8010094:	6878      	ldr	r0, [r7, #4]
 8010096:	f7ff fd9f 	bl	800fbd8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 801009a:	6878      	ldr	r0, [r7, #4]
 801009c:	f000 f980 	bl	80103a0 <SDMMC_GetCmdResp2>
 80100a0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80100a2:	69fb      	ldr	r3, [r7, #28]
}
 80100a4:	4618      	mov	r0, r3
 80100a6:	3720      	adds	r7, #32
 80100a8:	46bd      	mov	sp, r7
 80100aa:	bd80      	pop	{r7, pc}

080100ac <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80100ac:	b580      	push	{r7, lr}
 80100ae:	b088      	sub	sp, #32
 80100b0:	af00      	add	r7, sp, #0
 80100b2:	6078      	str	r0, [r7, #4]
 80100b4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 80100b6:	683b      	ldr	r3, [r7, #0]
 80100b8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 80100ba:	2309      	movs	r3, #9
 80100bc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 80100be:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80100c2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80100c4:	2300      	movs	r3, #0
 80100c6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80100c8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80100cc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80100ce:	f107 0308 	add.w	r3, r7, #8
 80100d2:	4619      	mov	r1, r3
 80100d4:	6878      	ldr	r0, [r7, #4]
 80100d6:	f7ff fd7f 	bl	800fbd8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 80100da:	6878      	ldr	r0, [r7, #4]
 80100dc:	f000 f960 	bl	80103a0 <SDMMC_GetCmdResp2>
 80100e0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80100e2:	69fb      	ldr	r3, [r7, #28]
}
 80100e4:	4618      	mov	r0, r3
 80100e6:	3720      	adds	r7, #32
 80100e8:	46bd      	mov	sp, r7
 80100ea:	bd80      	pop	{r7, pc}

080100ec <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 80100ec:	b580      	push	{r7, lr}
 80100ee:	b088      	sub	sp, #32
 80100f0:	af00      	add	r7, sp, #0
 80100f2:	6078      	str	r0, [r7, #4]
 80100f4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 80100f6:	2300      	movs	r3, #0
 80100f8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 80100fa:	2303      	movs	r3, #3
 80100fc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80100fe:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8010102:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010104:	2300      	movs	r3, #0
 8010106:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010108:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 801010c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801010e:	f107 0308 	add.w	r3, r7, #8
 8010112:	4619      	mov	r1, r3
 8010114:	6878      	ldr	r0, [r7, #4]
 8010116:	f7ff fd5f 	bl	800fbd8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 801011a:	683a      	ldr	r2, [r7, #0]
 801011c:	2103      	movs	r1, #3
 801011e:	6878      	ldr	r0, [r7, #4]
 8010120:	f000 f9c8 	bl	80104b4 <SDMMC_GetCmdResp6>
 8010124:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010126:	69fb      	ldr	r3, [r7, #28]
}
 8010128:	4618      	mov	r0, r3
 801012a:	3720      	adds	r7, #32
 801012c:	46bd      	mov	sp, r7
 801012e:	bd80      	pop	{r7, pc}

08010130 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8010130:	b580      	push	{r7, lr}
 8010132:	b088      	sub	sp, #32
 8010134:	af00      	add	r7, sp, #0
 8010136:	6078      	str	r0, [r7, #4]
 8010138:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 801013a:	683b      	ldr	r3, [r7, #0]
 801013c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 801013e:	230d      	movs	r3, #13
 8010140:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010142:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8010146:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010148:	2300      	movs	r3, #0
 801014a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801014c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8010150:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010152:	f107 0308 	add.w	r3, r7, #8
 8010156:	4619      	mov	r1, r3
 8010158:	6878      	ldr	r0, [r7, #4]
 801015a:	f7ff fd3d 	bl	800fbd8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 801015e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010162:	210d      	movs	r1, #13
 8010164:	6878      	ldr	r0, [r7, #4]
 8010166:	f000 f829 	bl	80101bc <SDMMC_GetCmdResp1>
 801016a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801016c:	69fb      	ldr	r3, [r7, #28]
}
 801016e:	4618      	mov	r0, r3
 8010170:	3720      	adds	r7, #32
 8010172:	46bd      	mov	sp, r7
 8010174:	bd80      	pop	{r7, pc}

08010176 <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 8010176:	b580      	push	{r7, lr}
 8010178:	b088      	sub	sp, #32
 801017a:	af00      	add	r7, sp, #0
 801017c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 801017e:	2300      	movs	r3, #0
 8010180:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 8010182:	230d      	movs	r3, #13
 8010184:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010186:	f44f 7380 	mov.w	r3, #256	@ 0x100
 801018a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801018c:	2300      	movs	r3, #0
 801018e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010190:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8010194:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010196:	f107 0308 	add.w	r3, r7, #8
 801019a:	4619      	mov	r1, r3
 801019c:	6878      	ldr	r0, [r7, #4]
 801019e:	f7ff fd1b 	bl	800fbd8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 80101a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80101a6:	210d      	movs	r1, #13
 80101a8:	6878      	ldr	r0, [r7, #4]
 80101aa:	f000 f807 	bl	80101bc <SDMMC_GetCmdResp1>
 80101ae:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80101b0:	69fb      	ldr	r3, [r7, #28]
}
 80101b2:	4618      	mov	r0, r3
 80101b4:	3720      	adds	r7, #32
 80101b6:	46bd      	mov	sp, r7
 80101b8:	bd80      	pop	{r7, pc}
	...

080101bc <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 80101bc:	b580      	push	{r7, lr}
 80101be:	b088      	sub	sp, #32
 80101c0:	af00      	add	r7, sp, #0
 80101c2:	60f8      	str	r0, [r7, #12]
 80101c4:	460b      	mov	r3, r1
 80101c6:	607a      	str	r2, [r7, #4]
 80101c8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 80101ca:	4b70      	ldr	r3, [pc, #448]	@ (801038c <SDMMC_GetCmdResp1+0x1d0>)
 80101cc:	681b      	ldr	r3, [r3, #0]
 80101ce:	4a70      	ldr	r2, [pc, #448]	@ (8010390 <SDMMC_GetCmdResp1+0x1d4>)
 80101d0:	fba2 2303 	umull	r2, r3, r2, r3
 80101d4:	0a5a      	lsrs	r2, r3, #9
 80101d6:	687b      	ldr	r3, [r7, #4]
 80101d8:	fb02 f303 	mul.w	r3, r2, r3
 80101dc:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 80101de:	69fb      	ldr	r3, [r7, #28]
 80101e0:	1e5a      	subs	r2, r3, #1
 80101e2:	61fa      	str	r2, [r7, #28]
 80101e4:	2b00      	cmp	r3, #0
 80101e6:	d102      	bne.n	80101ee <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 80101e8:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80101ec:	e0c9      	b.n	8010382 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 80101ee:	68fb      	ldr	r3, [r7, #12]
 80101f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80101f2:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 80101f4:	69ba      	ldr	r2, [r7, #24]
 80101f6:	4b67      	ldr	r3, [pc, #412]	@ (8010394 <SDMMC_GetCmdResp1+0x1d8>)
 80101f8:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 80101fa:	2b00      	cmp	r3, #0
 80101fc:	d0ef      	beq.n	80101de <SDMMC_GetCmdResp1+0x22>
 80101fe:	69bb      	ldr	r3, [r7, #24]
 8010200:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8010204:	2b00      	cmp	r3, #0
 8010206:	d1ea      	bne.n	80101de <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8010208:	68fb      	ldr	r3, [r7, #12]
 801020a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801020c:	f003 0304 	and.w	r3, r3, #4
 8010210:	2b00      	cmp	r3, #0
 8010212:	d004      	beq.n	801021e <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8010214:	68fb      	ldr	r3, [r7, #12]
 8010216:	2204      	movs	r2, #4
 8010218:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801021a:	2304      	movs	r3, #4
 801021c:	e0b1      	b.n	8010382 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 801021e:	68fb      	ldr	r3, [r7, #12]
 8010220:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010222:	f003 0301 	and.w	r3, r3, #1
 8010226:	2b00      	cmp	r3, #0
 8010228:	d004      	beq.n	8010234 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 801022a:	68fb      	ldr	r3, [r7, #12]
 801022c:	2201      	movs	r2, #1
 801022e:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010230:	2301      	movs	r3, #1
 8010232:	e0a6      	b.n	8010382 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8010234:	68fb      	ldr	r3, [r7, #12]
 8010236:	4a58      	ldr	r2, [pc, #352]	@ (8010398 <SDMMC_GetCmdResp1+0x1dc>)
 8010238:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 801023a:	68f8      	ldr	r0, [r7, #12]
 801023c:	f7ff fcf6 	bl	800fc2c <SDMMC_GetCommandResponse>
 8010240:	4603      	mov	r3, r0
 8010242:	461a      	mov	r2, r3
 8010244:	7afb      	ldrb	r3, [r7, #11]
 8010246:	4293      	cmp	r3, r2
 8010248:	d001      	beq.n	801024e <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 801024a:	2301      	movs	r3, #1
 801024c:	e099      	b.n	8010382 <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 801024e:	2100      	movs	r1, #0
 8010250:	68f8      	ldr	r0, [r7, #12]
 8010252:	f7ff fcf8 	bl	800fc46 <SDMMC_GetResponse>
 8010256:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8010258:	697a      	ldr	r2, [r7, #20]
 801025a:	4b50      	ldr	r3, [pc, #320]	@ (801039c <SDMMC_GetCmdResp1+0x1e0>)
 801025c:	4013      	ands	r3, r2
 801025e:	2b00      	cmp	r3, #0
 8010260:	d101      	bne.n	8010266 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8010262:	2300      	movs	r3, #0
 8010264:	e08d      	b.n	8010382 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8010266:	697b      	ldr	r3, [r7, #20]
 8010268:	2b00      	cmp	r3, #0
 801026a:	da02      	bge.n	8010272 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 801026c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8010270:	e087      	b.n	8010382 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8010272:	697b      	ldr	r3, [r7, #20]
 8010274:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8010278:	2b00      	cmp	r3, #0
 801027a:	d001      	beq.n	8010280 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 801027c:	2340      	movs	r3, #64	@ 0x40
 801027e:	e080      	b.n	8010382 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8010280:	697b      	ldr	r3, [r7, #20]
 8010282:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8010286:	2b00      	cmp	r3, #0
 8010288:	d001      	beq.n	801028e <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 801028a:	2380      	movs	r3, #128	@ 0x80
 801028c:	e079      	b.n	8010382 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 801028e:	697b      	ldr	r3, [r7, #20]
 8010290:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8010294:	2b00      	cmp	r3, #0
 8010296:	d002      	beq.n	801029e <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8010298:	f44f 7380 	mov.w	r3, #256	@ 0x100
 801029c:	e071      	b.n	8010382 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 801029e:	697b      	ldr	r3, [r7, #20]
 80102a0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80102a4:	2b00      	cmp	r3, #0
 80102a6:	d002      	beq.n	80102ae <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80102a8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80102ac:	e069      	b.n	8010382 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80102ae:	697b      	ldr	r3, [r7, #20]
 80102b0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80102b4:	2b00      	cmp	r3, #0
 80102b6:	d002      	beq.n	80102be <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80102b8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80102bc:	e061      	b.n	8010382 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80102be:	697b      	ldr	r3, [r7, #20]
 80102c0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80102c4:	2b00      	cmp	r3, #0
 80102c6:	d002      	beq.n	80102ce <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80102c8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80102cc:	e059      	b.n	8010382 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80102ce:	697b      	ldr	r3, [r7, #20]
 80102d0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80102d4:	2b00      	cmp	r3, #0
 80102d6:	d002      	beq.n	80102de <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80102d8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80102dc:	e051      	b.n	8010382 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80102de:	697b      	ldr	r3, [r7, #20]
 80102e0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80102e4:	2b00      	cmp	r3, #0
 80102e6:	d002      	beq.n	80102ee <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80102e8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80102ec:	e049      	b.n	8010382 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80102ee:	697b      	ldr	r3, [r7, #20]
 80102f0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80102f4:	2b00      	cmp	r3, #0
 80102f6:	d002      	beq.n	80102fe <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80102f8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80102fc:	e041      	b.n	8010382 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80102fe:	697b      	ldr	r3, [r7, #20]
 8010300:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8010304:	2b00      	cmp	r3, #0
 8010306:	d002      	beq.n	801030e <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8010308:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801030c:	e039      	b.n	8010382 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 801030e:	697b      	ldr	r3, [r7, #20]
 8010310:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8010314:	2b00      	cmp	r3, #0
 8010316:	d002      	beq.n	801031e <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8010318:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 801031c:	e031      	b.n	8010382 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 801031e:	697b      	ldr	r3, [r7, #20]
 8010320:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8010324:	2b00      	cmp	r3, #0
 8010326:	d002      	beq.n	801032e <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8010328:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 801032c:	e029      	b.n	8010382 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 801032e:	697b      	ldr	r3, [r7, #20]
 8010330:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8010334:	2b00      	cmp	r3, #0
 8010336:	d002      	beq.n	801033e <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8010338:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 801033c:	e021      	b.n	8010382 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 801033e:	697b      	ldr	r3, [r7, #20]
 8010340:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8010344:	2b00      	cmp	r3, #0
 8010346:	d002      	beq.n	801034e <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8010348:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 801034c:	e019      	b.n	8010382 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 801034e:	697b      	ldr	r3, [r7, #20]
 8010350:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8010354:	2b00      	cmp	r3, #0
 8010356:	d002      	beq.n	801035e <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8010358:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 801035c:	e011      	b.n	8010382 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 801035e:	697b      	ldr	r3, [r7, #20]
 8010360:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8010364:	2b00      	cmp	r3, #0
 8010366:	d002      	beq.n	801036e <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8010368:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 801036c:	e009      	b.n	8010382 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 801036e:	697b      	ldr	r3, [r7, #20]
 8010370:	f003 0308 	and.w	r3, r3, #8
 8010374:	2b00      	cmp	r3, #0
 8010376:	d002      	beq.n	801037e <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8010378:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 801037c:	e001      	b.n	8010382 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 801037e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 8010382:	4618      	mov	r0, r3
 8010384:	3720      	adds	r7, #32
 8010386:	46bd      	mov	sp, r7
 8010388:	bd80      	pop	{r7, pc}
 801038a:	bf00      	nop
 801038c:	24000058 	.word	0x24000058
 8010390:	10624dd3 	.word	0x10624dd3
 8010394:	00200045 	.word	0x00200045
 8010398:	002000c5 	.word	0x002000c5
 801039c:	fdffe008 	.word	0xfdffe008

080103a0 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 80103a0:	b480      	push	{r7}
 80103a2:	b085      	sub	sp, #20
 80103a4:	af00      	add	r7, sp, #0
 80103a6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80103a8:	4b1f      	ldr	r3, [pc, #124]	@ (8010428 <SDMMC_GetCmdResp2+0x88>)
 80103aa:	681b      	ldr	r3, [r3, #0]
 80103ac:	4a1f      	ldr	r2, [pc, #124]	@ (801042c <SDMMC_GetCmdResp2+0x8c>)
 80103ae:	fba2 2303 	umull	r2, r3, r2, r3
 80103b2:	0a5b      	lsrs	r3, r3, #9
 80103b4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80103b8:	fb02 f303 	mul.w	r3, r2, r3
 80103bc:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 80103be:	68fb      	ldr	r3, [r7, #12]
 80103c0:	1e5a      	subs	r2, r3, #1
 80103c2:	60fa      	str	r2, [r7, #12]
 80103c4:	2b00      	cmp	r3, #0
 80103c6:	d102      	bne.n	80103ce <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80103c8:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80103cc:	e026      	b.n	801041c <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 80103ce:	687b      	ldr	r3, [r7, #4]
 80103d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80103d2:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80103d4:	68bb      	ldr	r3, [r7, #8]
 80103d6:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 80103da:	2b00      	cmp	r3, #0
 80103dc:	d0ef      	beq.n	80103be <SDMMC_GetCmdResp2+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 80103de:	68bb      	ldr	r3, [r7, #8]
 80103e0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80103e4:	2b00      	cmp	r3, #0
 80103e6:	d1ea      	bne.n	80103be <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80103e8:	687b      	ldr	r3, [r7, #4]
 80103ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80103ec:	f003 0304 	and.w	r3, r3, #4
 80103f0:	2b00      	cmp	r3, #0
 80103f2:	d004      	beq.n	80103fe <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80103f4:	687b      	ldr	r3, [r7, #4]
 80103f6:	2204      	movs	r2, #4
 80103f8:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80103fa:	2304      	movs	r3, #4
 80103fc:	e00e      	b.n	801041c <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80103fe:	687b      	ldr	r3, [r7, #4]
 8010400:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010402:	f003 0301 	and.w	r3, r3, #1
 8010406:	2b00      	cmp	r3, #0
 8010408:	d004      	beq.n	8010414 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 801040a:	687b      	ldr	r3, [r7, #4]
 801040c:	2201      	movs	r2, #1
 801040e:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010410:	2301      	movs	r3, #1
 8010412:	e003      	b.n	801041c <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8010414:	687b      	ldr	r3, [r7, #4]
 8010416:	4a06      	ldr	r2, [pc, #24]	@ (8010430 <SDMMC_GetCmdResp2+0x90>)
 8010418:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 801041a:	2300      	movs	r3, #0
}
 801041c:	4618      	mov	r0, r3
 801041e:	3714      	adds	r7, #20
 8010420:	46bd      	mov	sp, r7
 8010422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010426:	4770      	bx	lr
 8010428:	24000058 	.word	0x24000058
 801042c:	10624dd3 	.word	0x10624dd3
 8010430:	002000c5 	.word	0x002000c5

08010434 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8010434:	b480      	push	{r7}
 8010436:	b085      	sub	sp, #20
 8010438:	af00      	add	r7, sp, #0
 801043a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 801043c:	4b1a      	ldr	r3, [pc, #104]	@ (80104a8 <SDMMC_GetCmdResp3+0x74>)
 801043e:	681b      	ldr	r3, [r3, #0]
 8010440:	4a1a      	ldr	r2, [pc, #104]	@ (80104ac <SDMMC_GetCmdResp3+0x78>)
 8010442:	fba2 2303 	umull	r2, r3, r2, r3
 8010446:	0a5b      	lsrs	r3, r3, #9
 8010448:	f241 3288 	movw	r2, #5000	@ 0x1388
 801044c:	fb02 f303 	mul.w	r3, r2, r3
 8010450:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8010452:	68fb      	ldr	r3, [r7, #12]
 8010454:	1e5a      	subs	r2, r3, #1
 8010456:	60fa      	str	r2, [r7, #12]
 8010458:	2b00      	cmp	r3, #0
 801045a:	d102      	bne.n	8010462 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 801045c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8010460:	e01b      	b.n	801049a <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 8010462:	687b      	ldr	r3, [r7, #4]
 8010464:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010466:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8010468:	68bb      	ldr	r3, [r7, #8]
 801046a:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 801046e:	2b00      	cmp	r3, #0
 8010470:	d0ef      	beq.n	8010452 <SDMMC_GetCmdResp3+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8010472:	68bb      	ldr	r3, [r7, #8]
 8010474:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8010478:	2b00      	cmp	r3, #0
 801047a:	d1ea      	bne.n	8010452 <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 801047c:	687b      	ldr	r3, [r7, #4]
 801047e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010480:	f003 0304 	and.w	r3, r3, #4
 8010484:	2b00      	cmp	r3, #0
 8010486:	d004      	beq.n	8010492 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8010488:	687b      	ldr	r3, [r7, #4]
 801048a:	2204      	movs	r2, #4
 801048c:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801048e:	2304      	movs	r3, #4
 8010490:	e003      	b.n	801049a <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8010492:	687b      	ldr	r3, [r7, #4]
 8010494:	4a06      	ldr	r2, [pc, #24]	@ (80104b0 <SDMMC_GetCmdResp3+0x7c>)
 8010496:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 8010498:	2300      	movs	r3, #0
}
 801049a:	4618      	mov	r0, r3
 801049c:	3714      	adds	r7, #20
 801049e:	46bd      	mov	sp, r7
 80104a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104a4:	4770      	bx	lr
 80104a6:	bf00      	nop
 80104a8:	24000058 	.word	0x24000058
 80104ac:	10624dd3 	.word	0x10624dd3
 80104b0:	002000c5 	.word	0x002000c5

080104b4 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 80104b4:	b580      	push	{r7, lr}
 80104b6:	b088      	sub	sp, #32
 80104b8:	af00      	add	r7, sp, #0
 80104ba:	60f8      	str	r0, [r7, #12]
 80104bc:	460b      	mov	r3, r1
 80104be:	607a      	str	r2, [r7, #4]
 80104c0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80104c2:	4b35      	ldr	r3, [pc, #212]	@ (8010598 <SDMMC_GetCmdResp6+0xe4>)
 80104c4:	681b      	ldr	r3, [r3, #0]
 80104c6:	4a35      	ldr	r2, [pc, #212]	@ (801059c <SDMMC_GetCmdResp6+0xe8>)
 80104c8:	fba2 2303 	umull	r2, r3, r2, r3
 80104cc:	0a5b      	lsrs	r3, r3, #9
 80104ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80104d2:	fb02 f303 	mul.w	r3, r2, r3
 80104d6:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 80104d8:	69fb      	ldr	r3, [r7, #28]
 80104da:	1e5a      	subs	r2, r3, #1
 80104dc:	61fa      	str	r2, [r7, #28]
 80104de:	2b00      	cmp	r3, #0
 80104e0:	d102      	bne.n	80104e8 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 80104e2:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80104e6:	e052      	b.n	801058e <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 80104e8:	68fb      	ldr	r3, [r7, #12]
 80104ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80104ec:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80104ee:	69bb      	ldr	r3, [r7, #24]
 80104f0:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 80104f4:	2b00      	cmp	r3, #0
 80104f6:	d0ef      	beq.n	80104d8 <SDMMC_GetCmdResp6+0x24>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 80104f8:	69bb      	ldr	r3, [r7, #24]
 80104fa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80104fe:	2b00      	cmp	r3, #0
 8010500:	d1ea      	bne.n	80104d8 <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8010502:	68fb      	ldr	r3, [r7, #12]
 8010504:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010506:	f003 0304 	and.w	r3, r3, #4
 801050a:	2b00      	cmp	r3, #0
 801050c:	d004      	beq.n	8010518 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 801050e:	68fb      	ldr	r3, [r7, #12]
 8010510:	2204      	movs	r2, #4
 8010512:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010514:	2304      	movs	r3, #4
 8010516:	e03a      	b.n	801058e <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8010518:	68fb      	ldr	r3, [r7, #12]
 801051a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801051c:	f003 0301 	and.w	r3, r3, #1
 8010520:	2b00      	cmp	r3, #0
 8010522:	d004      	beq.n	801052e <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8010524:	68fb      	ldr	r3, [r7, #12]
 8010526:	2201      	movs	r2, #1
 8010528:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 801052a:	2301      	movs	r3, #1
 801052c:	e02f      	b.n	801058e <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 801052e:	68f8      	ldr	r0, [r7, #12]
 8010530:	f7ff fb7c 	bl	800fc2c <SDMMC_GetCommandResponse>
 8010534:	4603      	mov	r3, r0
 8010536:	461a      	mov	r2, r3
 8010538:	7afb      	ldrb	r3, [r7, #11]
 801053a:	4293      	cmp	r3, r2
 801053c:	d001      	beq.n	8010542 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 801053e:	2301      	movs	r3, #1
 8010540:	e025      	b.n	801058e <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8010542:	68fb      	ldr	r3, [r7, #12]
 8010544:	4a16      	ldr	r2, [pc, #88]	@ (80105a0 <SDMMC_GetCmdResp6+0xec>)
 8010546:	639a      	str	r2, [r3, #56]	@ 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8010548:	2100      	movs	r1, #0
 801054a:	68f8      	ldr	r0, [r7, #12]
 801054c:	f7ff fb7b 	bl	800fc46 <SDMMC_GetResponse>
 8010550:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 8010552:	697b      	ldr	r3, [r7, #20]
 8010554:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 8010558:	2b00      	cmp	r3, #0
 801055a:	d106      	bne.n	801056a <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 801055c:	697b      	ldr	r3, [r7, #20]
 801055e:	0c1b      	lsrs	r3, r3, #16
 8010560:	b29a      	uxth	r2, r3
 8010562:	687b      	ldr	r3, [r7, #4]
 8010564:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 8010566:	2300      	movs	r3, #0
 8010568:	e011      	b.n	801058e <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 801056a:	697b      	ldr	r3, [r7, #20]
 801056c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8010570:	2b00      	cmp	r3, #0
 8010572:	d002      	beq.n	801057a <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8010574:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8010578:	e009      	b.n	801058e <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 801057a:	697b      	ldr	r3, [r7, #20]
 801057c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8010580:	2b00      	cmp	r3, #0
 8010582:	d002      	beq.n	801058a <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8010584:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8010588:	e001      	b.n	801058e <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 801058a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 801058e:	4618      	mov	r0, r3
 8010590:	3720      	adds	r7, #32
 8010592:	46bd      	mov	sp, r7
 8010594:	bd80      	pop	{r7, pc}
 8010596:	bf00      	nop
 8010598:	24000058 	.word	0x24000058
 801059c:	10624dd3 	.word	0x10624dd3
 80105a0:	002000c5 	.word	0x002000c5

080105a4 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 80105a4:	b480      	push	{r7}
 80105a6:	b085      	sub	sp, #20
 80105a8:	af00      	add	r7, sp, #0
 80105aa:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80105ac:	4b22      	ldr	r3, [pc, #136]	@ (8010638 <SDMMC_GetCmdResp7+0x94>)
 80105ae:	681b      	ldr	r3, [r3, #0]
 80105b0:	4a22      	ldr	r2, [pc, #136]	@ (801063c <SDMMC_GetCmdResp7+0x98>)
 80105b2:	fba2 2303 	umull	r2, r3, r2, r3
 80105b6:	0a5b      	lsrs	r3, r3, #9
 80105b8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80105bc:	fb02 f303 	mul.w	r3, r2, r3
 80105c0:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 80105c2:	68fb      	ldr	r3, [r7, #12]
 80105c4:	1e5a      	subs	r2, r3, #1
 80105c6:	60fa      	str	r2, [r7, #12]
 80105c8:	2b00      	cmp	r3, #0
 80105ca:	d102      	bne.n	80105d2 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80105cc:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80105d0:	e02c      	b.n	801062c <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 80105d2:	687b      	ldr	r3, [r7, #4]
 80105d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80105d6:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80105d8:	68bb      	ldr	r3, [r7, #8]
 80105da:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 80105de:	2b00      	cmp	r3, #0
 80105e0:	d0ef      	beq.n	80105c2 <SDMMC_GetCmdResp7+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 80105e2:	68bb      	ldr	r3, [r7, #8]
 80105e4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80105e8:	2b00      	cmp	r3, #0
 80105ea:	d1ea      	bne.n	80105c2 <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80105ec:	687b      	ldr	r3, [r7, #4]
 80105ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80105f0:	f003 0304 	and.w	r3, r3, #4
 80105f4:	2b00      	cmp	r3, #0
 80105f6:	d004      	beq.n	8010602 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80105f8:	687b      	ldr	r3, [r7, #4]
 80105fa:	2204      	movs	r2, #4
 80105fc:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80105fe:	2304      	movs	r3, #4
 8010600:	e014      	b.n	801062c <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8010602:	687b      	ldr	r3, [r7, #4]
 8010604:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010606:	f003 0301 	and.w	r3, r3, #1
 801060a:	2b00      	cmp	r3, #0
 801060c:	d004      	beq.n	8010618 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 801060e:	687b      	ldr	r3, [r7, #4]
 8010610:	2201      	movs	r2, #1
 8010612:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010614:	2301      	movs	r3, #1
 8010616:	e009      	b.n	801062c <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8010618:	687b      	ldr	r3, [r7, #4]
 801061a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801061c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010620:	2b00      	cmp	r3, #0
 8010622:	d002      	beq.n	801062a <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8010624:	687b      	ldr	r3, [r7, #4]
 8010626:	2240      	movs	r2, #64	@ 0x40
 8010628:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 801062a:	2300      	movs	r3, #0

}
 801062c:	4618      	mov	r0, r3
 801062e:	3714      	adds	r7, #20
 8010630:	46bd      	mov	sp, r7
 8010632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010636:	4770      	bx	lr
 8010638:	24000058 	.word	0x24000058
 801063c:	10624dd3 	.word	0x10624dd3

08010640 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8010640:	b480      	push	{r7}
 8010642:	b085      	sub	sp, #20
 8010644:	af00      	add	r7, sp, #0
 8010646:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8010648:	4b11      	ldr	r3, [pc, #68]	@ (8010690 <SDMMC_GetCmdError+0x50>)
 801064a:	681b      	ldr	r3, [r3, #0]
 801064c:	4a11      	ldr	r2, [pc, #68]	@ (8010694 <SDMMC_GetCmdError+0x54>)
 801064e:	fba2 2303 	umull	r2, r3, r2, r3
 8010652:	0a5b      	lsrs	r3, r3, #9
 8010654:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010658:	fb02 f303 	mul.w	r3, r2, r3
 801065c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 801065e:	68fb      	ldr	r3, [r7, #12]
 8010660:	1e5a      	subs	r2, r3, #1
 8010662:	60fa      	str	r2, [r7, #12]
 8010664:	2b00      	cmp	r3, #0
 8010666:	d102      	bne.n	801066e <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010668:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 801066c:	e009      	b.n	8010682 <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 801066e:	687b      	ldr	r3, [r7, #4]
 8010670:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010672:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8010676:	2b00      	cmp	r3, #0
 8010678:	d0f1      	beq.n	801065e <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 801067a:	687b      	ldr	r3, [r7, #4]
 801067c:	4a06      	ldr	r2, [pc, #24]	@ (8010698 <SDMMC_GetCmdError+0x58>)
 801067e:	639a      	str	r2, [r3, #56]	@ 0x38

  return SDMMC_ERROR_NONE;
 8010680:	2300      	movs	r3, #0
}
 8010682:	4618      	mov	r0, r3
 8010684:	3714      	adds	r7, #20
 8010686:	46bd      	mov	sp, r7
 8010688:	f85d 7b04 	ldr.w	r7, [sp], #4
 801068c:	4770      	bx	lr
 801068e:	bf00      	nop
 8010690:	24000058 	.word	0x24000058
 8010694:	10624dd3 	.word	0x10624dd3
 8010698:	002000c5 	.word	0x002000c5

0801069c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 801069c:	b580      	push	{r7, lr}
 801069e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 80106a0:	4904      	ldr	r1, [pc, #16]	@ (80106b4 <MX_FATFS_Init+0x18>)
 80106a2:	4805      	ldr	r0, [pc, #20]	@ (80106b8 <MX_FATFS_Init+0x1c>)
 80106a4:	f002 fc08 	bl	8012eb8 <FATFS_LinkDriver>
 80106a8:	4603      	mov	r3, r0
 80106aa:	461a      	mov	r2, r3
 80106ac:	4b03      	ldr	r3, [pc, #12]	@ (80106bc <MX_FATFS_Init+0x20>)
 80106ae:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80106b0:	bf00      	nop
 80106b2:	bd80      	pop	{r7, pc}
 80106b4:	240006e8 	.word	0x240006e8
 80106b8:	08014bd8 	.word	0x08014bd8
 80106bc:	240006e4 	.word	0x240006e4

080106c0 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80106c0:	b480      	push	{r7}
 80106c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80106c4:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 80106c6:	4618      	mov	r0, r3
 80106c8:	46bd      	mov	sp, r7
 80106ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106ce:	4770      	bx	lr

080106d0 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 80106d0:	b580      	push	{r7, lr}
 80106d2:	b086      	sub	sp, #24
 80106d4:	af00      	add	r7, sp, #0
 80106d6:	60f8      	str	r0, [r7, #12]
 80106d8:	60b9      	str	r1, [r7, #8]
 80106da:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 80106dc:	2300      	movs	r3, #0
 80106de:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 80106e0:	687b      	ldr	r3, [r7, #4]
 80106e2:	68ba      	ldr	r2, [r7, #8]
 80106e4:	68f9      	ldr	r1, [r7, #12]
 80106e6:	4806      	ldr	r0, [pc, #24]	@ (8010700 <BSP_SD_ReadBlocks_DMA+0x30>)
 80106e8:	f7fc f95e 	bl	800c9a8 <HAL_SD_ReadBlocks_DMA>
 80106ec:	4603      	mov	r3, r0
 80106ee:	2b00      	cmp	r3, #0
 80106f0:	d001      	beq.n	80106f6 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 80106f2:	2301      	movs	r3, #1
 80106f4:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80106f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80106f8:	4618      	mov	r0, r3
 80106fa:	3718      	adds	r7, #24
 80106fc:	46bd      	mov	sp, r7
 80106fe:	bd80      	pop	{r7, pc}
 8010700:	2400057c 	.word	0x2400057c

08010704 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8010704:	b580      	push	{r7, lr}
 8010706:	b086      	sub	sp, #24
 8010708:	af00      	add	r7, sp, #0
 801070a:	60f8      	str	r0, [r7, #12]
 801070c:	60b9      	str	r1, [r7, #8]
 801070e:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8010710:	2300      	movs	r3, #0
 8010712:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8010714:	687b      	ldr	r3, [r7, #4]
 8010716:	68ba      	ldr	r2, [r7, #8]
 8010718:	68f9      	ldr	r1, [r7, #12]
 801071a:	4806      	ldr	r0, [pc, #24]	@ (8010734 <BSP_SD_WriteBlocks_DMA+0x30>)
 801071c:	f7fc f9ec 	bl	800caf8 <HAL_SD_WriteBlocks_DMA>
 8010720:	4603      	mov	r3, r0
 8010722:	2b00      	cmp	r3, #0
 8010724:	d001      	beq.n	801072a <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8010726:	2301      	movs	r3, #1
 8010728:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 801072a:	7dfb      	ldrb	r3, [r7, #23]
}
 801072c:	4618      	mov	r0, r3
 801072e:	3718      	adds	r7, #24
 8010730:	46bd      	mov	sp, r7
 8010732:	bd80      	pop	{r7, pc}
 8010734:	2400057c 	.word	0x2400057c

08010738 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8010738:	b580      	push	{r7, lr}
 801073a:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 801073c:	4805      	ldr	r0, [pc, #20]	@ (8010754 <BSP_SD_GetCardState+0x1c>)
 801073e:	f7fc ffe5 	bl	800d70c <HAL_SD_GetCardState>
 8010742:	4603      	mov	r3, r0
 8010744:	2b04      	cmp	r3, #4
 8010746:	bf14      	ite	ne
 8010748:	2301      	movne	r3, #1
 801074a:	2300      	moveq	r3, #0
 801074c:	b2db      	uxtb	r3, r3
}
 801074e:	4618      	mov	r0, r3
 8010750:	bd80      	pop	{r7, pc}
 8010752:	bf00      	nop
 8010754:	2400057c 	.word	0x2400057c

08010758 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8010758:	b580      	push	{r7, lr}
 801075a:	b082      	sub	sp, #8
 801075c:	af00      	add	r7, sp, #0
 801075e:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 8010760:	6879      	ldr	r1, [r7, #4]
 8010762:	4803      	ldr	r0, [pc, #12]	@ (8010770 <BSP_SD_GetCardInfo+0x18>)
 8010764:	f7fc fe94 	bl	800d490 <HAL_SD_GetCardInfo>
}
 8010768:	bf00      	nop
 801076a:	3708      	adds	r7, #8
 801076c:	46bd      	mov	sp, r7
 801076e:	bd80      	pop	{r7, pc}
 8010770:	2400057c 	.word	0x2400057c

08010774 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8010774:	b580      	push	{r7, lr}
 8010776:	b082      	sub	sp, #8
 8010778:	af00      	add	r7, sp, #0
 801077a:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 801077c:	f000 fa14 	bl	8010ba8 <BSP_SD_WriteCpltCallback>
}
 8010780:	bf00      	nop
 8010782:	3708      	adds	r7, #8
 8010784:	46bd      	mov	sp, r7
 8010786:	bd80      	pop	{r7, pc}

08010788 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8010788:	b580      	push	{r7, lr}
 801078a:	b082      	sub	sp, #8
 801078c:	af00      	add	r7, sp, #0
 801078e:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8010790:	f000 fa16 	bl	8010bc0 <BSP_SD_ReadCpltCallback>
}
 8010794:	bf00      	nop
 8010796:	3708      	adds	r7, #8
 8010798:	46bd      	mov	sp, r7
 801079a:	bd80      	pop	{r7, pc}

0801079c <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 801079c:	b580      	push	{r7, lr}
 801079e:	b084      	sub	sp, #16
 80107a0:	af00      	add	r7, sp, #0
 80107a2:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 80107a4:	f7f5 fb18 	bl	8005dd8 <HAL_GetTick>
 80107a8:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 80107aa:	e006      	b.n	80107ba <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80107ac:	f7ff ffc4 	bl	8010738 <BSP_SD_GetCardState>
 80107b0:	4603      	mov	r3, r0
 80107b2:	2b00      	cmp	r3, #0
 80107b4:	d101      	bne.n	80107ba <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 80107b6:	2300      	movs	r3, #0
 80107b8:	e009      	b.n	80107ce <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 80107ba:	f7f5 fb0d 	bl	8005dd8 <HAL_GetTick>
 80107be:	4602      	mov	r2, r0
 80107c0:	68fb      	ldr	r3, [r7, #12]
 80107c2:	1ad3      	subs	r3, r2, r3
 80107c4:	687a      	ldr	r2, [r7, #4]
 80107c6:	429a      	cmp	r2, r3
 80107c8:	d8f0      	bhi.n	80107ac <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 80107ca:	f04f 33ff 	mov.w	r3, #4294967295
}
 80107ce:	4618      	mov	r0, r3
 80107d0:	3710      	adds	r7, #16
 80107d2:	46bd      	mov	sp, r7
 80107d4:	bd80      	pop	{r7, pc}
	...

080107d8 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 80107d8:	b580      	push	{r7, lr}
 80107da:	b082      	sub	sp, #8
 80107dc:	af00      	add	r7, sp, #0
 80107de:	4603      	mov	r3, r0
 80107e0:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 80107e2:	4b0b      	ldr	r3, [pc, #44]	@ (8010810 <SD_CheckStatus+0x38>)
 80107e4:	2201      	movs	r2, #1
 80107e6:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 80107e8:	f7ff ffa6 	bl	8010738 <BSP_SD_GetCardState>
 80107ec:	4603      	mov	r3, r0
 80107ee:	2b00      	cmp	r3, #0
 80107f0:	d107      	bne.n	8010802 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 80107f2:	4b07      	ldr	r3, [pc, #28]	@ (8010810 <SD_CheckStatus+0x38>)
 80107f4:	781b      	ldrb	r3, [r3, #0]
 80107f6:	b2db      	uxtb	r3, r3
 80107f8:	f023 0301 	bic.w	r3, r3, #1
 80107fc:	b2da      	uxtb	r2, r3
 80107fe:	4b04      	ldr	r3, [pc, #16]	@ (8010810 <SD_CheckStatus+0x38>)
 8010800:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8010802:	4b03      	ldr	r3, [pc, #12]	@ (8010810 <SD_CheckStatus+0x38>)
 8010804:	781b      	ldrb	r3, [r3, #0]
 8010806:	b2db      	uxtb	r3, r3
}
 8010808:	4618      	mov	r0, r3
 801080a:	3708      	adds	r7, #8
 801080c:	46bd      	mov	sp, r7
 801080e:	bd80      	pop	{r7, pc}
 8010810:	24000065 	.word	0x24000065

08010814 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8010814:	b580      	push	{r7, lr}
 8010816:	b082      	sub	sp, #8
 8010818:	af00      	add	r7, sp, #0
 801081a:	4603      	mov	r3, r0
 801081c:	71fb      	strb	r3, [r7, #7]
  {
    Stat = SD_CheckStatus(lun);
  }

#else
  Stat = SD_CheckStatus(lun);
 801081e:	79fb      	ldrb	r3, [r7, #7]
 8010820:	4618      	mov	r0, r3
 8010822:	f7ff ffd9 	bl	80107d8 <SD_CheckStatus>
 8010826:	4603      	mov	r3, r0
 8010828:	461a      	mov	r2, r3
 801082a:	4b04      	ldr	r3, [pc, #16]	@ (801083c <SD_initialize+0x28>)
 801082c:	701a      	strb	r2, [r3, #0]
#endif

  return Stat;
 801082e:	4b03      	ldr	r3, [pc, #12]	@ (801083c <SD_initialize+0x28>)
 8010830:	781b      	ldrb	r3, [r3, #0]
 8010832:	b2db      	uxtb	r3, r3
}
 8010834:	4618      	mov	r0, r3
 8010836:	3708      	adds	r7, #8
 8010838:	46bd      	mov	sp, r7
 801083a:	bd80      	pop	{r7, pc}
 801083c:	24000065 	.word	0x24000065

08010840 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8010840:	b580      	push	{r7, lr}
 8010842:	b082      	sub	sp, #8
 8010844:	af00      	add	r7, sp, #0
 8010846:	4603      	mov	r3, r0
 8010848:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 801084a:	79fb      	ldrb	r3, [r7, #7]
 801084c:	4618      	mov	r0, r3
 801084e:	f7ff ffc3 	bl	80107d8 <SD_CheckStatus>
 8010852:	4603      	mov	r3, r0
}
 8010854:	4618      	mov	r0, r3
 8010856:	3708      	adds	r7, #8
 8010858:	46bd      	mov	sp, r7
 801085a:	bd80      	pop	{r7, pc}

0801085c <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 801085c:	b580      	push	{r7, lr}
 801085e:	b088      	sub	sp, #32
 8010860:	af00      	add	r7, sp, #0
 8010862:	60b9      	str	r1, [r7, #8]
 8010864:	607a      	str	r2, [r7, #4]
 8010866:	603b      	str	r3, [r7, #0]
 8010868:	4603      	mov	r3, r0
 801086a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 801086c:	2301      	movs	r3, #1
 801086e:	77fb      	strb	r3, [r7, #31]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8010870:	f247 5030 	movw	r0, #30000	@ 0x7530
 8010874:	f7ff ff92 	bl	801079c <SD_CheckStatusWithTimeout>
 8010878:	4603      	mov	r3, r0
 801087a:	2b00      	cmp	r3, #0
 801087c:	da01      	bge.n	8010882 <SD_read+0x26>
  {
    return res;
 801087e:	7ffb      	ldrb	r3, [r7, #31]
 8010880:	e08b      	b.n	801099a <SD_read+0x13e>
  }

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
 8010882:	68bb      	ldr	r3, [r7, #8]
 8010884:	f003 0303 	and.w	r3, r3, #3
 8010888:	2b00      	cmp	r3, #0
 801088a:	d13b      	bne.n	8010904 <SD_read+0xa8>
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 801088c:	683a      	ldr	r2, [r7, #0]
 801088e:	6879      	ldr	r1, [r7, #4]
 8010890:	68b8      	ldr	r0, [r7, #8]
 8010892:	f7ff ff1d 	bl	80106d0 <BSP_SD_ReadBlocks_DMA>
 8010896:	4603      	mov	r3, r0
 8010898:	2b00      	cmp	r3, #0
 801089a:	d17d      	bne.n	8010998 <SD_read+0x13c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 801089c:	4b41      	ldr	r3, [pc, #260]	@ (80109a4 <SD_read+0x148>)
 801089e:	2200      	movs	r2, #0
 80108a0:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 80108a2:	f7f5 fa99 	bl	8005dd8 <HAL_GetTick>
 80108a6:	6178      	str	r0, [r7, #20]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 80108a8:	bf00      	nop
 80108aa:	4b3e      	ldr	r3, [pc, #248]	@ (80109a4 <SD_read+0x148>)
 80108ac:	681b      	ldr	r3, [r3, #0]
 80108ae:	2b00      	cmp	r3, #0
 80108b0:	d108      	bne.n	80108c4 <SD_read+0x68>
 80108b2:	f7f5 fa91 	bl	8005dd8 <HAL_GetTick>
 80108b6:	4602      	mov	r2, r0
 80108b8:	697b      	ldr	r3, [r7, #20]
 80108ba:	1ad3      	subs	r3, r2, r3
 80108bc:	f247 522f 	movw	r2, #29999	@ 0x752f
 80108c0:	4293      	cmp	r3, r2
 80108c2:	d9f2      	bls.n	80108aa <SD_read+0x4e>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 80108c4:	4b37      	ldr	r3, [pc, #220]	@ (80109a4 <SD_read+0x148>)
 80108c6:	681b      	ldr	r3, [r3, #0]
 80108c8:	2b00      	cmp	r3, #0
 80108ca:	d102      	bne.n	80108d2 <SD_read+0x76>
      {
        res = RES_ERROR;
 80108cc:	2301      	movs	r3, #1
 80108ce:	77fb      	strb	r3, [r7, #31]
 80108d0:	e062      	b.n	8010998 <SD_read+0x13c>
      }
      else
      {
        ReadStatus = 0;
 80108d2:	4b34      	ldr	r3, [pc, #208]	@ (80109a4 <SD_read+0x148>)
 80108d4:	2200      	movs	r2, #0
 80108d6:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 80108d8:	f7f5 fa7e 	bl	8005dd8 <HAL_GetTick>
 80108dc:	6178      	str	r0, [r7, #20]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80108de:	e007      	b.n	80108f0 <SD_read+0x94>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80108e0:	f7ff ff2a 	bl	8010738 <BSP_SD_GetCardState>
 80108e4:	4603      	mov	r3, r0
 80108e6:	2b00      	cmp	r3, #0
 80108e8:	d102      	bne.n	80108f0 <SD_read+0x94>
          {
            res = RES_OK;
 80108ea:	2300      	movs	r3, #0
 80108ec:	77fb      	strb	r3, [r7, #31]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 80108ee:	e053      	b.n	8010998 <SD_read+0x13c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80108f0:	f7f5 fa72 	bl	8005dd8 <HAL_GetTick>
 80108f4:	4602      	mov	r2, r0
 80108f6:	697b      	ldr	r3, [r7, #20]
 80108f8:	1ad3      	subs	r3, r2, r3
 80108fa:	f247 522f 	movw	r2, #29999	@ 0x752f
 80108fe:	4293      	cmp	r3, r2
 8010900:	d9ee      	bls.n	80108e0 <SD_read+0x84>
 8010902:	e049      	b.n	8010998 <SD_read+0x13c>
    else
    {
      /* Slow path, fetch each sector a part and memcpy to destination buffer */
      int i;

      for (i = 0; i < count; i++) {
 8010904:	2300      	movs	r3, #0
 8010906:	61bb      	str	r3, [r7, #24]
 8010908:	e037      	b.n	801097a <SD_read+0x11e>
        ret = BSP_SD_ReadBlocks_DMA((uint32_t*)scratch, (uint32_t)sector++, 1);
 801090a:	687b      	ldr	r3, [r7, #4]
 801090c:	1c5a      	adds	r2, r3, #1
 801090e:	607a      	str	r2, [r7, #4]
 8010910:	2201      	movs	r2, #1
 8010912:	4619      	mov	r1, r3
 8010914:	4824      	ldr	r0, [pc, #144]	@ (80109a8 <SD_read+0x14c>)
 8010916:	f7ff fedb 	bl	80106d0 <BSP_SD_ReadBlocks_DMA>
 801091a:	4603      	mov	r3, r0
 801091c:	77bb      	strb	r3, [r7, #30]
        if (ret == MSD_OK) {
 801091e:	7fbb      	ldrb	r3, [r7, #30]
 8010920:	2b00      	cmp	r3, #0
 8010922:	d12f      	bne.n	8010984 <SD_read+0x128>
          /* wait until the read is successful or a timeout occurs */

          timeout = HAL_GetTick();
 8010924:	f7f5 fa58 	bl	8005dd8 <HAL_GetTick>
 8010928:	6178      	str	r0, [r7, #20]
          while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 801092a:	bf00      	nop
 801092c:	4b1d      	ldr	r3, [pc, #116]	@ (80109a4 <SD_read+0x148>)
 801092e:	681b      	ldr	r3, [r3, #0]
 8010930:	2b00      	cmp	r3, #0
 8010932:	d108      	bne.n	8010946 <SD_read+0xea>
 8010934:	f7f5 fa50 	bl	8005dd8 <HAL_GetTick>
 8010938:	4602      	mov	r2, r0
 801093a:	697b      	ldr	r3, [r7, #20]
 801093c:	1ad3      	subs	r3, r2, r3
 801093e:	f247 522f 	movw	r2, #29999	@ 0x752f
 8010942:	4293      	cmp	r3, r2
 8010944:	d9f2      	bls.n	801092c <SD_read+0xd0>
          {
          }
          if (ReadStatus == 0)
 8010946:	4b17      	ldr	r3, [pc, #92]	@ (80109a4 <SD_read+0x148>)
 8010948:	681b      	ldr	r3, [r3, #0]
 801094a:	2b00      	cmp	r3, #0
 801094c:	d102      	bne.n	8010954 <SD_read+0xf8>
          {
            res = RES_ERROR;
 801094e:	2301      	movs	r3, #1
 8010950:	77fb      	strb	r3, [r7, #31]
            break;
 8010952:	e018      	b.n	8010986 <SD_read+0x12a>
          }
          ReadStatus = 0;
 8010954:	4b13      	ldr	r3, [pc, #76]	@ (80109a4 <SD_read+0x148>)
 8010956:	2200      	movs	r2, #0
 8010958:	601a      	str	r2, [r3, #0]
          *
          * invalidate the scratch buffer before the next read to get the actual data instead of the cached one
          */
          SCB_InvalidateDCache_by_Addr((uint32_t*)scratch, BLOCKSIZE);
#endif
          memcpy(buff, scratch, BLOCKSIZE);
 801095a:	68bb      	ldr	r3, [r7, #8]
 801095c:	4a12      	ldr	r2, [pc, #72]	@ (80109a8 <SD_read+0x14c>)
 801095e:	4618      	mov	r0, r3
 8010960:	4611      	mov	r1, r2
 8010962:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8010966:	461a      	mov	r2, r3
 8010968:	f003 f8b5 	bl	8013ad6 <memcpy>
          buff += BLOCKSIZE;
 801096c:	68bb      	ldr	r3, [r7, #8]
 801096e:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8010972:	60bb      	str	r3, [r7, #8]
      for (i = 0; i < count; i++) {
 8010974:	69bb      	ldr	r3, [r7, #24]
 8010976:	3301      	adds	r3, #1
 8010978:	61bb      	str	r3, [r7, #24]
 801097a:	69bb      	ldr	r3, [r7, #24]
 801097c:	683a      	ldr	r2, [r7, #0]
 801097e:	429a      	cmp	r2, r3
 8010980:	d8c3      	bhi.n	801090a <SD_read+0xae>
 8010982:	e000      	b.n	8010986 <SD_read+0x12a>
        }
        else
        {
          break;
 8010984:	bf00      	nop
        }
      }

      if ((i == count) && (ret == MSD_OK))
 8010986:	69bb      	ldr	r3, [r7, #24]
 8010988:	683a      	ldr	r2, [r7, #0]
 801098a:	429a      	cmp	r2, r3
 801098c:	d104      	bne.n	8010998 <SD_read+0x13c>
 801098e:	7fbb      	ldrb	r3, [r7, #30]
 8010990:	2b00      	cmp	r3, #0
 8010992:	d101      	bne.n	8010998 <SD_read+0x13c>
        res = RES_OK;
 8010994:	2300      	movs	r3, #0
 8010996:	77fb      	strb	r3, [r7, #31]
    }
#endif

  return res;
 8010998:	7ffb      	ldrb	r3, [r7, #31]
}
 801099a:	4618      	mov	r0, r3
 801099c:	3720      	adds	r7, #32
 801099e:	46bd      	mov	sp, r7
 80109a0:	bd80      	pop	{r7, pc}
 80109a2:	bf00      	nop
 80109a4:	24000d50 	.word	0x24000d50
 80109a8:	24000b4c 	.word	0x24000b4c

080109ac <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 80109ac:	b580      	push	{r7, lr}
 80109ae:	b088      	sub	sp, #32
 80109b0:	af00      	add	r7, sp, #0
 80109b2:	60b9      	str	r1, [r7, #8]
 80109b4:	607a      	str	r2, [r7, #4]
 80109b6:	603b      	str	r3, [r7, #0]
 80109b8:	4603      	mov	r3, r0
 80109ba:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80109bc:	2301      	movs	r3, #1
 80109be:	77fb      	strb	r3, [r7, #31]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 80109c0:	4b4b      	ldr	r3, [pc, #300]	@ (8010af0 <SD_write+0x144>)
 80109c2:	2200      	movs	r2, #0
 80109c4:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 80109c6:	f247 5030 	movw	r0, #30000	@ 0x7530
 80109ca:	f7ff fee7 	bl	801079c <SD_CheckStatusWithTimeout>
 80109ce:	4603      	mov	r3, r0
 80109d0:	2b00      	cmp	r3, #0
 80109d2:	da01      	bge.n	80109d8 <SD_write+0x2c>
  {
    return res;
 80109d4:	7ffb      	ldrb	r3, [r7, #31]
 80109d6:	e087      	b.n	8010ae8 <SD_write+0x13c>
  }

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
 80109d8:	68bb      	ldr	r3, [r7, #8]
 80109da:	f003 0303 	and.w	r3, r3, #3
 80109de:	2b00      	cmp	r3, #0
 80109e0:	d138      	bne.n	8010a54 <SD_write+0xa8>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 80109e2:	683a      	ldr	r2, [r7, #0]
 80109e4:	6879      	ldr	r1, [r7, #4]
 80109e6:	68b8      	ldr	r0, [r7, #8]
 80109e8:	f7ff fe8c 	bl	8010704 <BSP_SD_WriteBlocks_DMA>
 80109ec:	4603      	mov	r3, r0
 80109ee:	2b00      	cmp	r3, #0
 80109f0:	d179      	bne.n	8010ae6 <SD_write+0x13a>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 80109f2:	f7f5 f9f1 	bl	8005dd8 <HAL_GetTick>
 80109f6:	6178      	str	r0, [r7, #20]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 80109f8:	bf00      	nop
 80109fa:	4b3d      	ldr	r3, [pc, #244]	@ (8010af0 <SD_write+0x144>)
 80109fc:	681b      	ldr	r3, [r3, #0]
 80109fe:	2b00      	cmp	r3, #0
 8010a00:	d108      	bne.n	8010a14 <SD_write+0x68>
 8010a02:	f7f5 f9e9 	bl	8005dd8 <HAL_GetTick>
 8010a06:	4602      	mov	r2, r0
 8010a08:	697b      	ldr	r3, [r7, #20]
 8010a0a:	1ad3      	subs	r3, r2, r3
 8010a0c:	f247 522f 	movw	r2, #29999	@ 0x752f
 8010a10:	4293      	cmp	r3, r2
 8010a12:	d9f2      	bls.n	80109fa <SD_write+0x4e>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 8010a14:	4b36      	ldr	r3, [pc, #216]	@ (8010af0 <SD_write+0x144>)
 8010a16:	681b      	ldr	r3, [r3, #0]
 8010a18:	2b00      	cmp	r3, #0
 8010a1a:	d102      	bne.n	8010a22 <SD_write+0x76>
      {
        res = RES_ERROR;
 8010a1c:	2301      	movs	r3, #1
 8010a1e:	77fb      	strb	r3, [r7, #31]
 8010a20:	e061      	b.n	8010ae6 <SD_write+0x13a>
      }
      else
      {
        WriteStatus = 0;
 8010a22:	4b33      	ldr	r3, [pc, #204]	@ (8010af0 <SD_write+0x144>)
 8010a24:	2200      	movs	r2, #0
 8010a26:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8010a28:	f7f5 f9d6 	bl	8005dd8 <HAL_GetTick>
 8010a2c:	6178      	str	r0, [r7, #20]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8010a2e:	e007      	b.n	8010a40 <SD_write+0x94>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8010a30:	f7ff fe82 	bl	8010738 <BSP_SD_GetCardState>
 8010a34:	4603      	mov	r3, r0
 8010a36:	2b00      	cmp	r3, #0
 8010a38:	d102      	bne.n	8010a40 <SD_write+0x94>
          {
            res = RES_OK;
 8010a3a:	2300      	movs	r3, #0
 8010a3c:	77fb      	strb	r3, [r7, #31]
            break;
 8010a3e:	e052      	b.n	8010ae6 <SD_write+0x13a>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8010a40:	f7f5 f9ca 	bl	8005dd8 <HAL_GetTick>
 8010a44:	4602      	mov	r2, r0
 8010a46:	697b      	ldr	r3, [r7, #20]
 8010a48:	1ad3      	subs	r3, r2, r3
 8010a4a:	f247 522f 	movw	r2, #29999	@ 0x752f
 8010a4e:	4293      	cmp	r3, r2
 8010a50:	d9ee      	bls.n	8010a30 <SD_write+0x84>
 8010a52:	e048      	b.n	8010ae6 <SD_write+0x13a>
      * invalidate the scratch buffer before the next write to get the actual data instead of the cached one
      */
      SCB_InvalidateDCache_by_Addr((uint32_t*)scratch, BLOCKSIZE);
#endif

      for (i = 0; i < count; i++)
 8010a54:	2300      	movs	r3, #0
 8010a56:	61bb      	str	r3, [r7, #24]
 8010a58:	e034      	b.n	8010ac4 <SD_write+0x118>
      {
        WriteStatus = 0;
 8010a5a:	4b25      	ldr	r3, [pc, #148]	@ (8010af0 <SD_write+0x144>)
 8010a5c:	2200      	movs	r2, #0
 8010a5e:	601a      	str	r2, [r3, #0]

        memcpy((void *)scratch, (void *)buff, BLOCKSIZE);
 8010a60:	4a24      	ldr	r2, [pc, #144]	@ (8010af4 <SD_write+0x148>)
 8010a62:	68bb      	ldr	r3, [r7, #8]
 8010a64:	4610      	mov	r0, r2
 8010a66:	4619      	mov	r1, r3
 8010a68:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8010a6c:	461a      	mov	r2, r3
 8010a6e:	f003 f832 	bl	8013ad6 <memcpy>
        buff += BLOCKSIZE;
 8010a72:	68bb      	ldr	r3, [r7, #8]
 8010a74:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8010a78:	60bb      	str	r3, [r7, #8]

        ret = BSP_SD_WriteBlocks_DMA((uint32_t*)scratch, (uint32_t)sector++, 1);
 8010a7a:	687b      	ldr	r3, [r7, #4]
 8010a7c:	1c5a      	adds	r2, r3, #1
 8010a7e:	607a      	str	r2, [r7, #4]
 8010a80:	2201      	movs	r2, #1
 8010a82:	4619      	mov	r1, r3
 8010a84:	481b      	ldr	r0, [pc, #108]	@ (8010af4 <SD_write+0x148>)
 8010a86:	f7ff fe3d 	bl	8010704 <BSP_SD_WriteBlocks_DMA>
 8010a8a:	4603      	mov	r3, r0
 8010a8c:	77bb      	strb	r3, [r7, #30]
        if (ret == MSD_OK) {
 8010a8e:	7fbb      	ldrb	r3, [r7, #30]
 8010a90:	2b00      	cmp	r3, #0
 8010a92:	d11c      	bne.n	8010ace <SD_write+0x122>
          /* wait for a message from the queue or a timeout */
          timeout = HAL_GetTick();
 8010a94:	f7f5 f9a0 	bl	8005dd8 <HAL_GetTick>
 8010a98:	6178      	str	r0, [r7, #20]
          while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8010a9a:	bf00      	nop
 8010a9c:	4b14      	ldr	r3, [pc, #80]	@ (8010af0 <SD_write+0x144>)
 8010a9e:	681b      	ldr	r3, [r3, #0]
 8010aa0:	2b00      	cmp	r3, #0
 8010aa2:	d108      	bne.n	8010ab6 <SD_write+0x10a>
 8010aa4:	f7f5 f998 	bl	8005dd8 <HAL_GetTick>
 8010aa8:	4602      	mov	r2, r0
 8010aaa:	697b      	ldr	r3, [r7, #20]
 8010aac:	1ad3      	subs	r3, r2, r3
 8010aae:	f247 522f 	movw	r2, #29999	@ 0x752f
 8010ab2:	4293      	cmp	r3, r2
 8010ab4:	d9f2      	bls.n	8010a9c <SD_write+0xf0>
          {
          }
          if (WriteStatus == 0)
 8010ab6:	4b0e      	ldr	r3, [pc, #56]	@ (8010af0 <SD_write+0x144>)
 8010ab8:	681b      	ldr	r3, [r3, #0]
 8010aba:	2b00      	cmp	r3, #0
 8010abc:	d009      	beq.n	8010ad2 <SD_write+0x126>
      for (i = 0; i < count; i++)
 8010abe:	69bb      	ldr	r3, [r7, #24]
 8010ac0:	3301      	adds	r3, #1
 8010ac2:	61bb      	str	r3, [r7, #24]
 8010ac4:	69bb      	ldr	r3, [r7, #24]
 8010ac6:	683a      	ldr	r2, [r7, #0]
 8010ac8:	429a      	cmp	r2, r3
 8010aca:	d8c6      	bhi.n	8010a5a <SD_write+0xae>
 8010acc:	e002      	b.n	8010ad4 <SD_write+0x128>
          }

        }
        else
        {
          break;
 8010ace:	bf00      	nop
 8010ad0:	e000      	b.n	8010ad4 <SD_write+0x128>
            break;
 8010ad2:	bf00      	nop
        }
      }
      if ((i == count) && (ret == MSD_OK))
 8010ad4:	69bb      	ldr	r3, [r7, #24]
 8010ad6:	683a      	ldr	r2, [r7, #0]
 8010ad8:	429a      	cmp	r2, r3
 8010ada:	d104      	bne.n	8010ae6 <SD_write+0x13a>
 8010adc:	7fbb      	ldrb	r3, [r7, #30]
 8010ade:	2b00      	cmp	r3, #0
 8010ae0:	d101      	bne.n	8010ae6 <SD_write+0x13a>
        res = RES_OK;
 8010ae2:	2300      	movs	r3, #0
 8010ae4:	77fb      	strb	r3, [r7, #31]
    }
#endif
  return res;
 8010ae6:	7ffb      	ldrb	r3, [r7, #31]
}
 8010ae8:	4618      	mov	r0, r3
 8010aea:	3720      	adds	r7, #32
 8010aec:	46bd      	mov	sp, r7
 8010aee:	bd80      	pop	{r7, pc}
 8010af0:	24000d4c 	.word	0x24000d4c
 8010af4:	24000b4c 	.word	0x24000b4c

08010af8 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8010af8:	b580      	push	{r7, lr}
 8010afa:	b08c      	sub	sp, #48	@ 0x30
 8010afc:	af00      	add	r7, sp, #0
 8010afe:	4603      	mov	r3, r0
 8010b00:	603a      	str	r2, [r7, #0]
 8010b02:	71fb      	strb	r3, [r7, #7]
 8010b04:	460b      	mov	r3, r1
 8010b06:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8010b08:	2301      	movs	r3, #1
 8010b0a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8010b0e:	4b25      	ldr	r3, [pc, #148]	@ (8010ba4 <SD_ioctl+0xac>)
 8010b10:	781b      	ldrb	r3, [r3, #0]
 8010b12:	b2db      	uxtb	r3, r3
 8010b14:	f003 0301 	and.w	r3, r3, #1
 8010b18:	2b00      	cmp	r3, #0
 8010b1a:	d001      	beq.n	8010b20 <SD_ioctl+0x28>
 8010b1c:	2303      	movs	r3, #3
 8010b1e:	e03c      	b.n	8010b9a <SD_ioctl+0xa2>

  switch (cmd)
 8010b20:	79bb      	ldrb	r3, [r7, #6]
 8010b22:	2b03      	cmp	r3, #3
 8010b24:	d834      	bhi.n	8010b90 <SD_ioctl+0x98>
 8010b26:	a201      	add	r2, pc, #4	@ (adr r2, 8010b2c <SD_ioctl+0x34>)
 8010b28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010b2c:	08010b3d 	.word	0x08010b3d
 8010b30:	08010b45 	.word	0x08010b45
 8010b34:	08010b5d 	.word	0x08010b5d
 8010b38:	08010b77 	.word	0x08010b77
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8010b3c:	2300      	movs	r3, #0
 8010b3e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8010b42:	e028      	b.n	8010b96 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8010b44:	f107 0308 	add.w	r3, r7, #8
 8010b48:	4618      	mov	r0, r3
 8010b4a:	f7ff fe05 	bl	8010758 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8010b4e:	6a3a      	ldr	r2, [r7, #32]
 8010b50:	683b      	ldr	r3, [r7, #0]
 8010b52:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8010b54:	2300      	movs	r3, #0
 8010b56:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8010b5a:	e01c      	b.n	8010b96 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8010b5c:	f107 0308 	add.w	r3, r7, #8
 8010b60:	4618      	mov	r0, r3
 8010b62:	f7ff fdf9 	bl	8010758 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8010b66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010b68:	b29a      	uxth	r2, r3
 8010b6a:	683b      	ldr	r3, [r7, #0]
 8010b6c:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8010b6e:	2300      	movs	r3, #0
 8010b70:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8010b74:	e00f      	b.n	8010b96 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8010b76:	f107 0308 	add.w	r3, r7, #8
 8010b7a:	4618      	mov	r0, r3
 8010b7c:	f7ff fdec 	bl	8010758 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8010b80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010b82:	0a5a      	lsrs	r2, r3, #9
 8010b84:	683b      	ldr	r3, [r7, #0]
 8010b86:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8010b88:	2300      	movs	r3, #0
 8010b8a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8010b8e:	e002      	b.n	8010b96 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8010b90:	2304      	movs	r3, #4
 8010b92:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 8010b96:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8010b9a:	4618      	mov	r0, r3
 8010b9c:	3730      	adds	r7, #48	@ 0x30
 8010b9e:	46bd      	mov	sp, r7
 8010ba0:	bd80      	pop	{r7, pc}
 8010ba2:	bf00      	nop
 8010ba4:	24000065 	.word	0x24000065

08010ba8 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 8010ba8:	b480      	push	{r7}
 8010baa:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 8010bac:	4b03      	ldr	r3, [pc, #12]	@ (8010bbc <BSP_SD_WriteCpltCallback+0x14>)
 8010bae:	2201      	movs	r2, #1
 8010bb0:	601a      	str	r2, [r3, #0]
}
 8010bb2:	bf00      	nop
 8010bb4:	46bd      	mov	sp, r7
 8010bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bba:	4770      	bx	lr
 8010bbc:	24000d4c 	.word	0x24000d4c

08010bc0 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8010bc0:	b480      	push	{r7}
 8010bc2:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 8010bc4:	4b03      	ldr	r3, [pc, #12]	@ (8010bd4 <BSP_SD_ReadCpltCallback+0x14>)
 8010bc6:	2201      	movs	r2, #1
 8010bc8:	601a      	str	r2, [r3, #0]
}
 8010bca:	bf00      	nop
 8010bcc:	46bd      	mov	sp, r7
 8010bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bd2:	4770      	bx	lr
 8010bd4:	24000d50 	.word	0x24000d50

08010bd8 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8010bd8:	b580      	push	{r7, lr}
 8010bda:	b084      	sub	sp, #16
 8010bdc:	af00      	add	r7, sp, #0
 8010bde:	4603      	mov	r3, r0
 8010be0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8010be2:	79fb      	ldrb	r3, [r7, #7]
 8010be4:	4a08      	ldr	r2, [pc, #32]	@ (8010c08 <disk_status+0x30>)
 8010be6:	009b      	lsls	r3, r3, #2
 8010be8:	4413      	add	r3, r2
 8010bea:	685b      	ldr	r3, [r3, #4]
 8010bec:	685b      	ldr	r3, [r3, #4]
 8010bee:	79fa      	ldrb	r2, [r7, #7]
 8010bf0:	4905      	ldr	r1, [pc, #20]	@ (8010c08 <disk_status+0x30>)
 8010bf2:	440a      	add	r2, r1
 8010bf4:	7a12      	ldrb	r2, [r2, #8]
 8010bf6:	4610      	mov	r0, r2
 8010bf8:	4798      	blx	r3
 8010bfa:	4603      	mov	r3, r0
 8010bfc:	73fb      	strb	r3, [r7, #15]
  return stat;
 8010bfe:	7bfb      	ldrb	r3, [r7, #15]
}
 8010c00:	4618      	mov	r0, r3
 8010c02:	3710      	adds	r7, #16
 8010c04:	46bd      	mov	sp, r7
 8010c06:	bd80      	pop	{r7, pc}
 8010c08:	24000d7c 	.word	0x24000d7c

08010c0c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8010c0c:	b580      	push	{r7, lr}
 8010c0e:	b084      	sub	sp, #16
 8010c10:	af00      	add	r7, sp, #0
 8010c12:	4603      	mov	r3, r0
 8010c14:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8010c16:	2300      	movs	r3, #0
 8010c18:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8010c1a:	79fb      	ldrb	r3, [r7, #7]
 8010c1c:	4a0e      	ldr	r2, [pc, #56]	@ (8010c58 <disk_initialize+0x4c>)
 8010c1e:	5cd3      	ldrb	r3, [r2, r3]
 8010c20:	2b00      	cmp	r3, #0
 8010c22:	d114      	bne.n	8010c4e <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8010c24:	79fb      	ldrb	r3, [r7, #7]
 8010c26:	4a0c      	ldr	r2, [pc, #48]	@ (8010c58 <disk_initialize+0x4c>)
 8010c28:	009b      	lsls	r3, r3, #2
 8010c2a:	4413      	add	r3, r2
 8010c2c:	685b      	ldr	r3, [r3, #4]
 8010c2e:	681b      	ldr	r3, [r3, #0]
 8010c30:	79fa      	ldrb	r2, [r7, #7]
 8010c32:	4909      	ldr	r1, [pc, #36]	@ (8010c58 <disk_initialize+0x4c>)
 8010c34:	440a      	add	r2, r1
 8010c36:	7a12      	ldrb	r2, [r2, #8]
 8010c38:	4610      	mov	r0, r2
 8010c3a:	4798      	blx	r3
 8010c3c:	4603      	mov	r3, r0
 8010c3e:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 8010c40:	7bfb      	ldrb	r3, [r7, #15]
 8010c42:	2b00      	cmp	r3, #0
 8010c44:	d103      	bne.n	8010c4e <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 8010c46:	79fb      	ldrb	r3, [r7, #7]
 8010c48:	4a03      	ldr	r2, [pc, #12]	@ (8010c58 <disk_initialize+0x4c>)
 8010c4a:	2101      	movs	r1, #1
 8010c4c:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 8010c4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8010c50:	4618      	mov	r0, r3
 8010c52:	3710      	adds	r7, #16
 8010c54:	46bd      	mov	sp, r7
 8010c56:	bd80      	pop	{r7, pc}
 8010c58:	24000d7c 	.word	0x24000d7c

08010c5c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8010c5c:	b590      	push	{r4, r7, lr}
 8010c5e:	b087      	sub	sp, #28
 8010c60:	af00      	add	r7, sp, #0
 8010c62:	60b9      	str	r1, [r7, #8]
 8010c64:	607a      	str	r2, [r7, #4]
 8010c66:	603b      	str	r3, [r7, #0]
 8010c68:	4603      	mov	r3, r0
 8010c6a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8010c6c:	7bfb      	ldrb	r3, [r7, #15]
 8010c6e:	4a0a      	ldr	r2, [pc, #40]	@ (8010c98 <disk_read+0x3c>)
 8010c70:	009b      	lsls	r3, r3, #2
 8010c72:	4413      	add	r3, r2
 8010c74:	685b      	ldr	r3, [r3, #4]
 8010c76:	689c      	ldr	r4, [r3, #8]
 8010c78:	7bfb      	ldrb	r3, [r7, #15]
 8010c7a:	4a07      	ldr	r2, [pc, #28]	@ (8010c98 <disk_read+0x3c>)
 8010c7c:	4413      	add	r3, r2
 8010c7e:	7a18      	ldrb	r0, [r3, #8]
 8010c80:	683b      	ldr	r3, [r7, #0]
 8010c82:	687a      	ldr	r2, [r7, #4]
 8010c84:	68b9      	ldr	r1, [r7, #8]
 8010c86:	47a0      	blx	r4
 8010c88:	4603      	mov	r3, r0
 8010c8a:	75fb      	strb	r3, [r7, #23]
  return res;
 8010c8c:	7dfb      	ldrb	r3, [r7, #23]
}
 8010c8e:	4618      	mov	r0, r3
 8010c90:	371c      	adds	r7, #28
 8010c92:	46bd      	mov	sp, r7
 8010c94:	bd90      	pop	{r4, r7, pc}
 8010c96:	bf00      	nop
 8010c98:	24000d7c 	.word	0x24000d7c

08010c9c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8010c9c:	b590      	push	{r4, r7, lr}
 8010c9e:	b087      	sub	sp, #28
 8010ca0:	af00      	add	r7, sp, #0
 8010ca2:	60b9      	str	r1, [r7, #8]
 8010ca4:	607a      	str	r2, [r7, #4]
 8010ca6:	603b      	str	r3, [r7, #0]
 8010ca8:	4603      	mov	r3, r0
 8010caa:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8010cac:	7bfb      	ldrb	r3, [r7, #15]
 8010cae:	4a0a      	ldr	r2, [pc, #40]	@ (8010cd8 <disk_write+0x3c>)
 8010cb0:	009b      	lsls	r3, r3, #2
 8010cb2:	4413      	add	r3, r2
 8010cb4:	685b      	ldr	r3, [r3, #4]
 8010cb6:	68dc      	ldr	r4, [r3, #12]
 8010cb8:	7bfb      	ldrb	r3, [r7, #15]
 8010cba:	4a07      	ldr	r2, [pc, #28]	@ (8010cd8 <disk_write+0x3c>)
 8010cbc:	4413      	add	r3, r2
 8010cbe:	7a18      	ldrb	r0, [r3, #8]
 8010cc0:	683b      	ldr	r3, [r7, #0]
 8010cc2:	687a      	ldr	r2, [r7, #4]
 8010cc4:	68b9      	ldr	r1, [r7, #8]
 8010cc6:	47a0      	blx	r4
 8010cc8:	4603      	mov	r3, r0
 8010cca:	75fb      	strb	r3, [r7, #23]
  return res;
 8010ccc:	7dfb      	ldrb	r3, [r7, #23]
}
 8010cce:	4618      	mov	r0, r3
 8010cd0:	371c      	adds	r7, #28
 8010cd2:	46bd      	mov	sp, r7
 8010cd4:	bd90      	pop	{r4, r7, pc}
 8010cd6:	bf00      	nop
 8010cd8:	24000d7c 	.word	0x24000d7c

08010cdc <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8010cdc:	b580      	push	{r7, lr}
 8010cde:	b084      	sub	sp, #16
 8010ce0:	af00      	add	r7, sp, #0
 8010ce2:	4603      	mov	r3, r0
 8010ce4:	603a      	str	r2, [r7, #0]
 8010ce6:	71fb      	strb	r3, [r7, #7]
 8010ce8:	460b      	mov	r3, r1
 8010cea:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8010cec:	79fb      	ldrb	r3, [r7, #7]
 8010cee:	4a09      	ldr	r2, [pc, #36]	@ (8010d14 <disk_ioctl+0x38>)
 8010cf0:	009b      	lsls	r3, r3, #2
 8010cf2:	4413      	add	r3, r2
 8010cf4:	685b      	ldr	r3, [r3, #4]
 8010cf6:	691b      	ldr	r3, [r3, #16]
 8010cf8:	79fa      	ldrb	r2, [r7, #7]
 8010cfa:	4906      	ldr	r1, [pc, #24]	@ (8010d14 <disk_ioctl+0x38>)
 8010cfc:	440a      	add	r2, r1
 8010cfe:	7a10      	ldrb	r0, [r2, #8]
 8010d00:	79b9      	ldrb	r1, [r7, #6]
 8010d02:	683a      	ldr	r2, [r7, #0]
 8010d04:	4798      	blx	r3
 8010d06:	4603      	mov	r3, r0
 8010d08:	73fb      	strb	r3, [r7, #15]
  return res;
 8010d0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8010d0c:	4618      	mov	r0, r3
 8010d0e:	3710      	adds	r7, #16
 8010d10:	46bd      	mov	sp, r7
 8010d12:	bd80      	pop	{r7, pc}
 8010d14:	24000d7c 	.word	0x24000d7c

08010d18 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8010d18:	b480      	push	{r7}
 8010d1a:	b085      	sub	sp, #20
 8010d1c:	af00      	add	r7, sp, #0
 8010d1e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8010d20:	687b      	ldr	r3, [r7, #4]
 8010d22:	3301      	adds	r3, #1
 8010d24:	781b      	ldrb	r3, [r3, #0]
 8010d26:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8010d28:	89fb      	ldrh	r3, [r7, #14]
 8010d2a:	021b      	lsls	r3, r3, #8
 8010d2c:	b21a      	sxth	r2, r3
 8010d2e:	687b      	ldr	r3, [r7, #4]
 8010d30:	781b      	ldrb	r3, [r3, #0]
 8010d32:	b21b      	sxth	r3, r3
 8010d34:	4313      	orrs	r3, r2
 8010d36:	b21b      	sxth	r3, r3
 8010d38:	81fb      	strh	r3, [r7, #14]
	return rv;
 8010d3a:	89fb      	ldrh	r3, [r7, #14]
}
 8010d3c:	4618      	mov	r0, r3
 8010d3e:	3714      	adds	r7, #20
 8010d40:	46bd      	mov	sp, r7
 8010d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d46:	4770      	bx	lr

08010d48 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8010d48:	b480      	push	{r7}
 8010d4a:	b085      	sub	sp, #20
 8010d4c:	af00      	add	r7, sp, #0
 8010d4e:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8010d50:	687b      	ldr	r3, [r7, #4]
 8010d52:	3303      	adds	r3, #3
 8010d54:	781b      	ldrb	r3, [r3, #0]
 8010d56:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8010d58:	68fb      	ldr	r3, [r7, #12]
 8010d5a:	021b      	lsls	r3, r3, #8
 8010d5c:	687a      	ldr	r2, [r7, #4]
 8010d5e:	3202      	adds	r2, #2
 8010d60:	7812      	ldrb	r2, [r2, #0]
 8010d62:	4313      	orrs	r3, r2
 8010d64:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8010d66:	68fb      	ldr	r3, [r7, #12]
 8010d68:	021b      	lsls	r3, r3, #8
 8010d6a:	687a      	ldr	r2, [r7, #4]
 8010d6c:	3201      	adds	r2, #1
 8010d6e:	7812      	ldrb	r2, [r2, #0]
 8010d70:	4313      	orrs	r3, r2
 8010d72:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8010d74:	68fb      	ldr	r3, [r7, #12]
 8010d76:	021b      	lsls	r3, r3, #8
 8010d78:	687a      	ldr	r2, [r7, #4]
 8010d7a:	7812      	ldrb	r2, [r2, #0]
 8010d7c:	4313      	orrs	r3, r2
 8010d7e:	60fb      	str	r3, [r7, #12]
	return rv;
 8010d80:	68fb      	ldr	r3, [r7, #12]
}
 8010d82:	4618      	mov	r0, r3
 8010d84:	3714      	adds	r7, #20
 8010d86:	46bd      	mov	sp, r7
 8010d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d8c:	4770      	bx	lr

08010d8e <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8010d8e:	b480      	push	{r7}
 8010d90:	b083      	sub	sp, #12
 8010d92:	af00      	add	r7, sp, #0
 8010d94:	6078      	str	r0, [r7, #4]
 8010d96:	460b      	mov	r3, r1
 8010d98:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8010d9a:	687b      	ldr	r3, [r7, #4]
 8010d9c:	1c5a      	adds	r2, r3, #1
 8010d9e:	607a      	str	r2, [r7, #4]
 8010da0:	887a      	ldrh	r2, [r7, #2]
 8010da2:	b2d2      	uxtb	r2, r2
 8010da4:	701a      	strb	r2, [r3, #0]
 8010da6:	887b      	ldrh	r3, [r7, #2]
 8010da8:	0a1b      	lsrs	r3, r3, #8
 8010daa:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8010dac:	687b      	ldr	r3, [r7, #4]
 8010dae:	1c5a      	adds	r2, r3, #1
 8010db0:	607a      	str	r2, [r7, #4]
 8010db2:	887a      	ldrh	r2, [r7, #2]
 8010db4:	b2d2      	uxtb	r2, r2
 8010db6:	701a      	strb	r2, [r3, #0]
}
 8010db8:	bf00      	nop
 8010dba:	370c      	adds	r7, #12
 8010dbc:	46bd      	mov	sp, r7
 8010dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dc2:	4770      	bx	lr

08010dc4 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8010dc4:	b480      	push	{r7}
 8010dc6:	b083      	sub	sp, #12
 8010dc8:	af00      	add	r7, sp, #0
 8010dca:	6078      	str	r0, [r7, #4]
 8010dcc:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8010dce:	687b      	ldr	r3, [r7, #4]
 8010dd0:	1c5a      	adds	r2, r3, #1
 8010dd2:	607a      	str	r2, [r7, #4]
 8010dd4:	683a      	ldr	r2, [r7, #0]
 8010dd6:	b2d2      	uxtb	r2, r2
 8010dd8:	701a      	strb	r2, [r3, #0]
 8010dda:	683b      	ldr	r3, [r7, #0]
 8010ddc:	0a1b      	lsrs	r3, r3, #8
 8010dde:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8010de0:	687b      	ldr	r3, [r7, #4]
 8010de2:	1c5a      	adds	r2, r3, #1
 8010de4:	607a      	str	r2, [r7, #4]
 8010de6:	683a      	ldr	r2, [r7, #0]
 8010de8:	b2d2      	uxtb	r2, r2
 8010dea:	701a      	strb	r2, [r3, #0]
 8010dec:	683b      	ldr	r3, [r7, #0]
 8010dee:	0a1b      	lsrs	r3, r3, #8
 8010df0:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8010df2:	687b      	ldr	r3, [r7, #4]
 8010df4:	1c5a      	adds	r2, r3, #1
 8010df6:	607a      	str	r2, [r7, #4]
 8010df8:	683a      	ldr	r2, [r7, #0]
 8010dfa:	b2d2      	uxtb	r2, r2
 8010dfc:	701a      	strb	r2, [r3, #0]
 8010dfe:	683b      	ldr	r3, [r7, #0]
 8010e00:	0a1b      	lsrs	r3, r3, #8
 8010e02:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8010e04:	687b      	ldr	r3, [r7, #4]
 8010e06:	1c5a      	adds	r2, r3, #1
 8010e08:	607a      	str	r2, [r7, #4]
 8010e0a:	683a      	ldr	r2, [r7, #0]
 8010e0c:	b2d2      	uxtb	r2, r2
 8010e0e:	701a      	strb	r2, [r3, #0]
}
 8010e10:	bf00      	nop
 8010e12:	370c      	adds	r7, #12
 8010e14:	46bd      	mov	sp, r7
 8010e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e1a:	4770      	bx	lr

08010e1c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8010e1c:	b480      	push	{r7}
 8010e1e:	b087      	sub	sp, #28
 8010e20:	af00      	add	r7, sp, #0
 8010e22:	60f8      	str	r0, [r7, #12]
 8010e24:	60b9      	str	r1, [r7, #8]
 8010e26:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8010e28:	68fb      	ldr	r3, [r7, #12]
 8010e2a:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8010e2c:	68bb      	ldr	r3, [r7, #8]
 8010e2e:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8010e30:	687b      	ldr	r3, [r7, #4]
 8010e32:	2b00      	cmp	r3, #0
 8010e34:	d00d      	beq.n	8010e52 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8010e36:	693a      	ldr	r2, [r7, #16]
 8010e38:	1c53      	adds	r3, r2, #1
 8010e3a:	613b      	str	r3, [r7, #16]
 8010e3c:	697b      	ldr	r3, [r7, #20]
 8010e3e:	1c59      	adds	r1, r3, #1
 8010e40:	6179      	str	r1, [r7, #20]
 8010e42:	7812      	ldrb	r2, [r2, #0]
 8010e44:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8010e46:	687b      	ldr	r3, [r7, #4]
 8010e48:	3b01      	subs	r3, #1
 8010e4a:	607b      	str	r3, [r7, #4]
 8010e4c:	687b      	ldr	r3, [r7, #4]
 8010e4e:	2b00      	cmp	r3, #0
 8010e50:	d1f1      	bne.n	8010e36 <mem_cpy+0x1a>
	}
}
 8010e52:	bf00      	nop
 8010e54:	371c      	adds	r7, #28
 8010e56:	46bd      	mov	sp, r7
 8010e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e5c:	4770      	bx	lr

08010e5e <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8010e5e:	b480      	push	{r7}
 8010e60:	b087      	sub	sp, #28
 8010e62:	af00      	add	r7, sp, #0
 8010e64:	60f8      	str	r0, [r7, #12]
 8010e66:	60b9      	str	r1, [r7, #8]
 8010e68:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8010e6a:	68fb      	ldr	r3, [r7, #12]
 8010e6c:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8010e6e:	697b      	ldr	r3, [r7, #20]
 8010e70:	1c5a      	adds	r2, r3, #1
 8010e72:	617a      	str	r2, [r7, #20]
 8010e74:	68ba      	ldr	r2, [r7, #8]
 8010e76:	b2d2      	uxtb	r2, r2
 8010e78:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8010e7a:	687b      	ldr	r3, [r7, #4]
 8010e7c:	3b01      	subs	r3, #1
 8010e7e:	607b      	str	r3, [r7, #4]
 8010e80:	687b      	ldr	r3, [r7, #4]
 8010e82:	2b00      	cmp	r3, #0
 8010e84:	d1f3      	bne.n	8010e6e <mem_set+0x10>
}
 8010e86:	bf00      	nop
 8010e88:	bf00      	nop
 8010e8a:	371c      	adds	r7, #28
 8010e8c:	46bd      	mov	sp, r7
 8010e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e92:	4770      	bx	lr

08010e94 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8010e94:	b480      	push	{r7}
 8010e96:	b089      	sub	sp, #36	@ 0x24
 8010e98:	af00      	add	r7, sp, #0
 8010e9a:	60f8      	str	r0, [r7, #12]
 8010e9c:	60b9      	str	r1, [r7, #8]
 8010e9e:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8010ea0:	68fb      	ldr	r3, [r7, #12]
 8010ea2:	61fb      	str	r3, [r7, #28]
 8010ea4:	68bb      	ldr	r3, [r7, #8]
 8010ea6:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8010ea8:	2300      	movs	r3, #0
 8010eaa:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8010eac:	69fb      	ldr	r3, [r7, #28]
 8010eae:	1c5a      	adds	r2, r3, #1
 8010eb0:	61fa      	str	r2, [r7, #28]
 8010eb2:	781b      	ldrb	r3, [r3, #0]
 8010eb4:	4619      	mov	r1, r3
 8010eb6:	69bb      	ldr	r3, [r7, #24]
 8010eb8:	1c5a      	adds	r2, r3, #1
 8010eba:	61ba      	str	r2, [r7, #24]
 8010ebc:	781b      	ldrb	r3, [r3, #0]
 8010ebe:	1acb      	subs	r3, r1, r3
 8010ec0:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8010ec2:	687b      	ldr	r3, [r7, #4]
 8010ec4:	3b01      	subs	r3, #1
 8010ec6:	607b      	str	r3, [r7, #4]
 8010ec8:	687b      	ldr	r3, [r7, #4]
 8010eca:	2b00      	cmp	r3, #0
 8010ecc:	d002      	beq.n	8010ed4 <mem_cmp+0x40>
 8010ece:	697b      	ldr	r3, [r7, #20]
 8010ed0:	2b00      	cmp	r3, #0
 8010ed2:	d0eb      	beq.n	8010eac <mem_cmp+0x18>

	return r;
 8010ed4:	697b      	ldr	r3, [r7, #20]
}
 8010ed6:	4618      	mov	r0, r3
 8010ed8:	3724      	adds	r7, #36	@ 0x24
 8010eda:	46bd      	mov	sp, r7
 8010edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ee0:	4770      	bx	lr

08010ee2 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8010ee2:	b480      	push	{r7}
 8010ee4:	b083      	sub	sp, #12
 8010ee6:	af00      	add	r7, sp, #0
 8010ee8:	6078      	str	r0, [r7, #4]
 8010eea:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8010eec:	e002      	b.n	8010ef4 <chk_chr+0x12>
 8010eee:	687b      	ldr	r3, [r7, #4]
 8010ef0:	3301      	adds	r3, #1
 8010ef2:	607b      	str	r3, [r7, #4]
 8010ef4:	687b      	ldr	r3, [r7, #4]
 8010ef6:	781b      	ldrb	r3, [r3, #0]
 8010ef8:	2b00      	cmp	r3, #0
 8010efa:	d005      	beq.n	8010f08 <chk_chr+0x26>
 8010efc:	687b      	ldr	r3, [r7, #4]
 8010efe:	781b      	ldrb	r3, [r3, #0]
 8010f00:	461a      	mov	r2, r3
 8010f02:	683b      	ldr	r3, [r7, #0]
 8010f04:	4293      	cmp	r3, r2
 8010f06:	d1f2      	bne.n	8010eee <chk_chr+0xc>
	return *str;
 8010f08:	687b      	ldr	r3, [r7, #4]
 8010f0a:	781b      	ldrb	r3, [r3, #0]
}
 8010f0c:	4618      	mov	r0, r3
 8010f0e:	370c      	adds	r7, #12
 8010f10:	46bd      	mov	sp, r7
 8010f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f16:	4770      	bx	lr

08010f18 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8010f18:	b480      	push	{r7}
 8010f1a:	b085      	sub	sp, #20
 8010f1c:	af00      	add	r7, sp, #0
 8010f1e:	6078      	str	r0, [r7, #4]
 8010f20:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8010f22:	2300      	movs	r3, #0
 8010f24:	60bb      	str	r3, [r7, #8]
 8010f26:	68bb      	ldr	r3, [r7, #8]
 8010f28:	60fb      	str	r3, [r7, #12]
 8010f2a:	e029      	b.n	8010f80 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8010f2c:	4a27      	ldr	r2, [pc, #156]	@ (8010fcc <chk_lock+0xb4>)
 8010f2e:	68fb      	ldr	r3, [r7, #12]
 8010f30:	011b      	lsls	r3, r3, #4
 8010f32:	4413      	add	r3, r2
 8010f34:	681b      	ldr	r3, [r3, #0]
 8010f36:	2b00      	cmp	r3, #0
 8010f38:	d01d      	beq.n	8010f76 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8010f3a:	4a24      	ldr	r2, [pc, #144]	@ (8010fcc <chk_lock+0xb4>)
 8010f3c:	68fb      	ldr	r3, [r7, #12]
 8010f3e:	011b      	lsls	r3, r3, #4
 8010f40:	4413      	add	r3, r2
 8010f42:	681a      	ldr	r2, [r3, #0]
 8010f44:	687b      	ldr	r3, [r7, #4]
 8010f46:	681b      	ldr	r3, [r3, #0]
 8010f48:	429a      	cmp	r2, r3
 8010f4a:	d116      	bne.n	8010f7a <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8010f4c:	4a1f      	ldr	r2, [pc, #124]	@ (8010fcc <chk_lock+0xb4>)
 8010f4e:	68fb      	ldr	r3, [r7, #12]
 8010f50:	011b      	lsls	r3, r3, #4
 8010f52:	4413      	add	r3, r2
 8010f54:	3304      	adds	r3, #4
 8010f56:	681a      	ldr	r2, [r3, #0]
 8010f58:	687b      	ldr	r3, [r7, #4]
 8010f5a:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8010f5c:	429a      	cmp	r2, r3
 8010f5e:	d10c      	bne.n	8010f7a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8010f60:	4a1a      	ldr	r2, [pc, #104]	@ (8010fcc <chk_lock+0xb4>)
 8010f62:	68fb      	ldr	r3, [r7, #12]
 8010f64:	011b      	lsls	r3, r3, #4
 8010f66:	4413      	add	r3, r2
 8010f68:	3308      	adds	r3, #8
 8010f6a:	681a      	ldr	r2, [r3, #0]
 8010f6c:	687b      	ldr	r3, [r7, #4]
 8010f6e:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8010f70:	429a      	cmp	r2, r3
 8010f72:	d102      	bne.n	8010f7a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8010f74:	e007      	b.n	8010f86 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8010f76:	2301      	movs	r3, #1
 8010f78:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8010f7a:	68fb      	ldr	r3, [r7, #12]
 8010f7c:	3301      	adds	r3, #1
 8010f7e:	60fb      	str	r3, [r7, #12]
 8010f80:	68fb      	ldr	r3, [r7, #12]
 8010f82:	2b01      	cmp	r3, #1
 8010f84:	d9d2      	bls.n	8010f2c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8010f86:	68fb      	ldr	r3, [r7, #12]
 8010f88:	2b02      	cmp	r3, #2
 8010f8a:	d109      	bne.n	8010fa0 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8010f8c:	68bb      	ldr	r3, [r7, #8]
 8010f8e:	2b00      	cmp	r3, #0
 8010f90:	d102      	bne.n	8010f98 <chk_lock+0x80>
 8010f92:	683b      	ldr	r3, [r7, #0]
 8010f94:	2b02      	cmp	r3, #2
 8010f96:	d101      	bne.n	8010f9c <chk_lock+0x84>
 8010f98:	2300      	movs	r3, #0
 8010f9a:	e010      	b.n	8010fbe <chk_lock+0xa6>
 8010f9c:	2312      	movs	r3, #18
 8010f9e:	e00e      	b.n	8010fbe <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8010fa0:	683b      	ldr	r3, [r7, #0]
 8010fa2:	2b00      	cmp	r3, #0
 8010fa4:	d108      	bne.n	8010fb8 <chk_lock+0xa0>
 8010fa6:	4a09      	ldr	r2, [pc, #36]	@ (8010fcc <chk_lock+0xb4>)
 8010fa8:	68fb      	ldr	r3, [r7, #12]
 8010faa:	011b      	lsls	r3, r3, #4
 8010fac:	4413      	add	r3, r2
 8010fae:	330c      	adds	r3, #12
 8010fb0:	881b      	ldrh	r3, [r3, #0]
 8010fb2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8010fb6:	d101      	bne.n	8010fbc <chk_lock+0xa4>
 8010fb8:	2310      	movs	r3, #16
 8010fba:	e000      	b.n	8010fbe <chk_lock+0xa6>
 8010fbc:	2300      	movs	r3, #0
}
 8010fbe:	4618      	mov	r0, r3
 8010fc0:	3714      	adds	r7, #20
 8010fc2:	46bd      	mov	sp, r7
 8010fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fc8:	4770      	bx	lr
 8010fca:	bf00      	nop
 8010fcc:	24000d5c 	.word	0x24000d5c

08010fd0 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8010fd0:	b480      	push	{r7}
 8010fd2:	b083      	sub	sp, #12
 8010fd4:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8010fd6:	2300      	movs	r3, #0
 8010fd8:	607b      	str	r3, [r7, #4]
 8010fda:	e002      	b.n	8010fe2 <enq_lock+0x12>
 8010fdc:	687b      	ldr	r3, [r7, #4]
 8010fde:	3301      	adds	r3, #1
 8010fe0:	607b      	str	r3, [r7, #4]
 8010fe2:	687b      	ldr	r3, [r7, #4]
 8010fe4:	2b01      	cmp	r3, #1
 8010fe6:	d806      	bhi.n	8010ff6 <enq_lock+0x26>
 8010fe8:	4a09      	ldr	r2, [pc, #36]	@ (8011010 <enq_lock+0x40>)
 8010fea:	687b      	ldr	r3, [r7, #4]
 8010fec:	011b      	lsls	r3, r3, #4
 8010fee:	4413      	add	r3, r2
 8010ff0:	681b      	ldr	r3, [r3, #0]
 8010ff2:	2b00      	cmp	r3, #0
 8010ff4:	d1f2      	bne.n	8010fdc <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8010ff6:	687b      	ldr	r3, [r7, #4]
 8010ff8:	2b02      	cmp	r3, #2
 8010ffa:	bf14      	ite	ne
 8010ffc:	2301      	movne	r3, #1
 8010ffe:	2300      	moveq	r3, #0
 8011000:	b2db      	uxtb	r3, r3
}
 8011002:	4618      	mov	r0, r3
 8011004:	370c      	adds	r7, #12
 8011006:	46bd      	mov	sp, r7
 8011008:	f85d 7b04 	ldr.w	r7, [sp], #4
 801100c:	4770      	bx	lr
 801100e:	bf00      	nop
 8011010:	24000d5c 	.word	0x24000d5c

08011014 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8011014:	b480      	push	{r7}
 8011016:	b085      	sub	sp, #20
 8011018:	af00      	add	r7, sp, #0
 801101a:	6078      	str	r0, [r7, #4]
 801101c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 801101e:	2300      	movs	r3, #0
 8011020:	60fb      	str	r3, [r7, #12]
 8011022:	e01f      	b.n	8011064 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8011024:	4a41      	ldr	r2, [pc, #260]	@ (801112c <inc_lock+0x118>)
 8011026:	68fb      	ldr	r3, [r7, #12]
 8011028:	011b      	lsls	r3, r3, #4
 801102a:	4413      	add	r3, r2
 801102c:	681a      	ldr	r2, [r3, #0]
 801102e:	687b      	ldr	r3, [r7, #4]
 8011030:	681b      	ldr	r3, [r3, #0]
 8011032:	429a      	cmp	r2, r3
 8011034:	d113      	bne.n	801105e <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8011036:	4a3d      	ldr	r2, [pc, #244]	@ (801112c <inc_lock+0x118>)
 8011038:	68fb      	ldr	r3, [r7, #12]
 801103a:	011b      	lsls	r3, r3, #4
 801103c:	4413      	add	r3, r2
 801103e:	3304      	adds	r3, #4
 8011040:	681a      	ldr	r2, [r3, #0]
 8011042:	687b      	ldr	r3, [r7, #4]
 8011044:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8011046:	429a      	cmp	r2, r3
 8011048:	d109      	bne.n	801105e <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 801104a:	4a38      	ldr	r2, [pc, #224]	@ (801112c <inc_lock+0x118>)
 801104c:	68fb      	ldr	r3, [r7, #12]
 801104e:	011b      	lsls	r3, r3, #4
 8011050:	4413      	add	r3, r2
 8011052:	3308      	adds	r3, #8
 8011054:	681a      	ldr	r2, [r3, #0]
 8011056:	687b      	ldr	r3, [r7, #4]
 8011058:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 801105a:	429a      	cmp	r2, r3
 801105c:	d006      	beq.n	801106c <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 801105e:	68fb      	ldr	r3, [r7, #12]
 8011060:	3301      	adds	r3, #1
 8011062:	60fb      	str	r3, [r7, #12]
 8011064:	68fb      	ldr	r3, [r7, #12]
 8011066:	2b01      	cmp	r3, #1
 8011068:	d9dc      	bls.n	8011024 <inc_lock+0x10>
 801106a:	e000      	b.n	801106e <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 801106c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 801106e:	68fb      	ldr	r3, [r7, #12]
 8011070:	2b02      	cmp	r3, #2
 8011072:	d132      	bne.n	80110da <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8011074:	2300      	movs	r3, #0
 8011076:	60fb      	str	r3, [r7, #12]
 8011078:	e002      	b.n	8011080 <inc_lock+0x6c>
 801107a:	68fb      	ldr	r3, [r7, #12]
 801107c:	3301      	adds	r3, #1
 801107e:	60fb      	str	r3, [r7, #12]
 8011080:	68fb      	ldr	r3, [r7, #12]
 8011082:	2b01      	cmp	r3, #1
 8011084:	d806      	bhi.n	8011094 <inc_lock+0x80>
 8011086:	4a29      	ldr	r2, [pc, #164]	@ (801112c <inc_lock+0x118>)
 8011088:	68fb      	ldr	r3, [r7, #12]
 801108a:	011b      	lsls	r3, r3, #4
 801108c:	4413      	add	r3, r2
 801108e:	681b      	ldr	r3, [r3, #0]
 8011090:	2b00      	cmp	r3, #0
 8011092:	d1f2      	bne.n	801107a <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8011094:	68fb      	ldr	r3, [r7, #12]
 8011096:	2b02      	cmp	r3, #2
 8011098:	d101      	bne.n	801109e <inc_lock+0x8a>
 801109a:	2300      	movs	r3, #0
 801109c:	e040      	b.n	8011120 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 801109e:	687b      	ldr	r3, [r7, #4]
 80110a0:	681a      	ldr	r2, [r3, #0]
 80110a2:	4922      	ldr	r1, [pc, #136]	@ (801112c <inc_lock+0x118>)
 80110a4:	68fb      	ldr	r3, [r7, #12]
 80110a6:	011b      	lsls	r3, r3, #4
 80110a8:	440b      	add	r3, r1
 80110aa:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 80110ac:	687b      	ldr	r3, [r7, #4]
 80110ae:	689a      	ldr	r2, [r3, #8]
 80110b0:	491e      	ldr	r1, [pc, #120]	@ (801112c <inc_lock+0x118>)
 80110b2:	68fb      	ldr	r3, [r7, #12]
 80110b4:	011b      	lsls	r3, r3, #4
 80110b6:	440b      	add	r3, r1
 80110b8:	3304      	adds	r3, #4
 80110ba:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 80110bc:	687b      	ldr	r3, [r7, #4]
 80110be:	695a      	ldr	r2, [r3, #20]
 80110c0:	491a      	ldr	r1, [pc, #104]	@ (801112c <inc_lock+0x118>)
 80110c2:	68fb      	ldr	r3, [r7, #12]
 80110c4:	011b      	lsls	r3, r3, #4
 80110c6:	440b      	add	r3, r1
 80110c8:	3308      	adds	r3, #8
 80110ca:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 80110cc:	4a17      	ldr	r2, [pc, #92]	@ (801112c <inc_lock+0x118>)
 80110ce:	68fb      	ldr	r3, [r7, #12]
 80110d0:	011b      	lsls	r3, r3, #4
 80110d2:	4413      	add	r3, r2
 80110d4:	330c      	adds	r3, #12
 80110d6:	2200      	movs	r2, #0
 80110d8:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80110da:	683b      	ldr	r3, [r7, #0]
 80110dc:	2b00      	cmp	r3, #0
 80110de:	d009      	beq.n	80110f4 <inc_lock+0xe0>
 80110e0:	4a12      	ldr	r2, [pc, #72]	@ (801112c <inc_lock+0x118>)
 80110e2:	68fb      	ldr	r3, [r7, #12]
 80110e4:	011b      	lsls	r3, r3, #4
 80110e6:	4413      	add	r3, r2
 80110e8:	330c      	adds	r3, #12
 80110ea:	881b      	ldrh	r3, [r3, #0]
 80110ec:	2b00      	cmp	r3, #0
 80110ee:	d001      	beq.n	80110f4 <inc_lock+0xe0>
 80110f0:	2300      	movs	r3, #0
 80110f2:	e015      	b.n	8011120 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80110f4:	683b      	ldr	r3, [r7, #0]
 80110f6:	2b00      	cmp	r3, #0
 80110f8:	d108      	bne.n	801110c <inc_lock+0xf8>
 80110fa:	4a0c      	ldr	r2, [pc, #48]	@ (801112c <inc_lock+0x118>)
 80110fc:	68fb      	ldr	r3, [r7, #12]
 80110fe:	011b      	lsls	r3, r3, #4
 8011100:	4413      	add	r3, r2
 8011102:	330c      	adds	r3, #12
 8011104:	881b      	ldrh	r3, [r3, #0]
 8011106:	3301      	adds	r3, #1
 8011108:	b29a      	uxth	r2, r3
 801110a:	e001      	b.n	8011110 <inc_lock+0xfc>
 801110c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8011110:	4906      	ldr	r1, [pc, #24]	@ (801112c <inc_lock+0x118>)
 8011112:	68fb      	ldr	r3, [r7, #12]
 8011114:	011b      	lsls	r3, r3, #4
 8011116:	440b      	add	r3, r1
 8011118:	330c      	adds	r3, #12
 801111a:	801a      	strh	r2, [r3, #0]

	return i + 1;
 801111c:	68fb      	ldr	r3, [r7, #12]
 801111e:	3301      	adds	r3, #1
}
 8011120:	4618      	mov	r0, r3
 8011122:	3714      	adds	r7, #20
 8011124:	46bd      	mov	sp, r7
 8011126:	f85d 7b04 	ldr.w	r7, [sp], #4
 801112a:	4770      	bx	lr
 801112c:	24000d5c 	.word	0x24000d5c

08011130 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8011130:	b480      	push	{r7}
 8011132:	b085      	sub	sp, #20
 8011134:	af00      	add	r7, sp, #0
 8011136:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8011138:	687b      	ldr	r3, [r7, #4]
 801113a:	3b01      	subs	r3, #1
 801113c:	607b      	str	r3, [r7, #4]
 801113e:	687b      	ldr	r3, [r7, #4]
 8011140:	2b01      	cmp	r3, #1
 8011142:	d825      	bhi.n	8011190 <dec_lock+0x60>
		n = Files[i].ctr;
 8011144:	4a17      	ldr	r2, [pc, #92]	@ (80111a4 <dec_lock+0x74>)
 8011146:	687b      	ldr	r3, [r7, #4]
 8011148:	011b      	lsls	r3, r3, #4
 801114a:	4413      	add	r3, r2
 801114c:	330c      	adds	r3, #12
 801114e:	881b      	ldrh	r3, [r3, #0]
 8011150:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8011152:	89fb      	ldrh	r3, [r7, #14]
 8011154:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8011158:	d101      	bne.n	801115e <dec_lock+0x2e>
 801115a:	2300      	movs	r3, #0
 801115c:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 801115e:	89fb      	ldrh	r3, [r7, #14]
 8011160:	2b00      	cmp	r3, #0
 8011162:	d002      	beq.n	801116a <dec_lock+0x3a>
 8011164:	89fb      	ldrh	r3, [r7, #14]
 8011166:	3b01      	subs	r3, #1
 8011168:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 801116a:	4a0e      	ldr	r2, [pc, #56]	@ (80111a4 <dec_lock+0x74>)
 801116c:	687b      	ldr	r3, [r7, #4]
 801116e:	011b      	lsls	r3, r3, #4
 8011170:	4413      	add	r3, r2
 8011172:	330c      	adds	r3, #12
 8011174:	89fa      	ldrh	r2, [r7, #14]
 8011176:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8011178:	89fb      	ldrh	r3, [r7, #14]
 801117a:	2b00      	cmp	r3, #0
 801117c:	d105      	bne.n	801118a <dec_lock+0x5a>
 801117e:	4a09      	ldr	r2, [pc, #36]	@ (80111a4 <dec_lock+0x74>)
 8011180:	687b      	ldr	r3, [r7, #4]
 8011182:	011b      	lsls	r3, r3, #4
 8011184:	4413      	add	r3, r2
 8011186:	2200      	movs	r2, #0
 8011188:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 801118a:	2300      	movs	r3, #0
 801118c:	737b      	strb	r3, [r7, #13]
 801118e:	e001      	b.n	8011194 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8011190:	2302      	movs	r3, #2
 8011192:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8011194:	7b7b      	ldrb	r3, [r7, #13]
}
 8011196:	4618      	mov	r0, r3
 8011198:	3714      	adds	r7, #20
 801119a:	46bd      	mov	sp, r7
 801119c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111a0:	4770      	bx	lr
 80111a2:	bf00      	nop
 80111a4:	24000d5c 	.word	0x24000d5c

080111a8 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80111a8:	b480      	push	{r7}
 80111aa:	b085      	sub	sp, #20
 80111ac:	af00      	add	r7, sp, #0
 80111ae:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80111b0:	2300      	movs	r3, #0
 80111b2:	60fb      	str	r3, [r7, #12]
 80111b4:	e010      	b.n	80111d8 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80111b6:	4a0d      	ldr	r2, [pc, #52]	@ (80111ec <clear_lock+0x44>)
 80111b8:	68fb      	ldr	r3, [r7, #12]
 80111ba:	011b      	lsls	r3, r3, #4
 80111bc:	4413      	add	r3, r2
 80111be:	681b      	ldr	r3, [r3, #0]
 80111c0:	687a      	ldr	r2, [r7, #4]
 80111c2:	429a      	cmp	r2, r3
 80111c4:	d105      	bne.n	80111d2 <clear_lock+0x2a>
 80111c6:	4a09      	ldr	r2, [pc, #36]	@ (80111ec <clear_lock+0x44>)
 80111c8:	68fb      	ldr	r3, [r7, #12]
 80111ca:	011b      	lsls	r3, r3, #4
 80111cc:	4413      	add	r3, r2
 80111ce:	2200      	movs	r2, #0
 80111d0:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80111d2:	68fb      	ldr	r3, [r7, #12]
 80111d4:	3301      	adds	r3, #1
 80111d6:	60fb      	str	r3, [r7, #12]
 80111d8:	68fb      	ldr	r3, [r7, #12]
 80111da:	2b01      	cmp	r3, #1
 80111dc:	d9eb      	bls.n	80111b6 <clear_lock+0xe>
	}
}
 80111de:	bf00      	nop
 80111e0:	bf00      	nop
 80111e2:	3714      	adds	r7, #20
 80111e4:	46bd      	mov	sp, r7
 80111e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111ea:	4770      	bx	lr
 80111ec:	24000d5c 	.word	0x24000d5c

080111f0 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80111f0:	b580      	push	{r7, lr}
 80111f2:	b086      	sub	sp, #24
 80111f4:	af00      	add	r7, sp, #0
 80111f6:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80111f8:	2300      	movs	r3, #0
 80111fa:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80111fc:	687b      	ldr	r3, [r7, #4]
 80111fe:	78db      	ldrb	r3, [r3, #3]
 8011200:	2b00      	cmp	r3, #0
 8011202:	d034      	beq.n	801126e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8011204:	687b      	ldr	r3, [r7, #4]
 8011206:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011208:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 801120a:	687b      	ldr	r3, [r7, #4]
 801120c:	7858      	ldrb	r0, [r3, #1]
 801120e:	687b      	ldr	r3, [r7, #4]
 8011210:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8011214:	2301      	movs	r3, #1
 8011216:	697a      	ldr	r2, [r7, #20]
 8011218:	f7ff fd40 	bl	8010c9c <disk_write>
 801121c:	4603      	mov	r3, r0
 801121e:	2b00      	cmp	r3, #0
 8011220:	d002      	beq.n	8011228 <sync_window+0x38>
			res = FR_DISK_ERR;
 8011222:	2301      	movs	r3, #1
 8011224:	73fb      	strb	r3, [r7, #15]
 8011226:	e022      	b.n	801126e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8011228:	687b      	ldr	r3, [r7, #4]
 801122a:	2200      	movs	r2, #0
 801122c:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 801122e:	687b      	ldr	r3, [r7, #4]
 8011230:	6a1b      	ldr	r3, [r3, #32]
 8011232:	697a      	ldr	r2, [r7, #20]
 8011234:	1ad2      	subs	r2, r2, r3
 8011236:	687b      	ldr	r3, [r7, #4]
 8011238:	699b      	ldr	r3, [r3, #24]
 801123a:	429a      	cmp	r2, r3
 801123c:	d217      	bcs.n	801126e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801123e:	687b      	ldr	r3, [r7, #4]
 8011240:	789b      	ldrb	r3, [r3, #2]
 8011242:	613b      	str	r3, [r7, #16]
 8011244:	e010      	b.n	8011268 <sync_window+0x78>
					wsect += fs->fsize;
 8011246:	687b      	ldr	r3, [r7, #4]
 8011248:	699b      	ldr	r3, [r3, #24]
 801124a:	697a      	ldr	r2, [r7, #20]
 801124c:	4413      	add	r3, r2
 801124e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8011250:	687b      	ldr	r3, [r7, #4]
 8011252:	7858      	ldrb	r0, [r3, #1]
 8011254:	687b      	ldr	r3, [r7, #4]
 8011256:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801125a:	2301      	movs	r3, #1
 801125c:	697a      	ldr	r2, [r7, #20]
 801125e:	f7ff fd1d 	bl	8010c9c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8011262:	693b      	ldr	r3, [r7, #16]
 8011264:	3b01      	subs	r3, #1
 8011266:	613b      	str	r3, [r7, #16]
 8011268:	693b      	ldr	r3, [r7, #16]
 801126a:	2b01      	cmp	r3, #1
 801126c:	d8eb      	bhi.n	8011246 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 801126e:	7bfb      	ldrb	r3, [r7, #15]
}
 8011270:	4618      	mov	r0, r3
 8011272:	3718      	adds	r7, #24
 8011274:	46bd      	mov	sp, r7
 8011276:	bd80      	pop	{r7, pc}

08011278 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8011278:	b580      	push	{r7, lr}
 801127a:	b084      	sub	sp, #16
 801127c:	af00      	add	r7, sp, #0
 801127e:	6078      	str	r0, [r7, #4]
 8011280:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8011282:	2300      	movs	r3, #0
 8011284:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8011286:	687b      	ldr	r3, [r7, #4]
 8011288:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801128a:	683a      	ldr	r2, [r7, #0]
 801128c:	429a      	cmp	r2, r3
 801128e:	d01b      	beq.n	80112c8 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8011290:	6878      	ldr	r0, [r7, #4]
 8011292:	f7ff ffad 	bl	80111f0 <sync_window>
 8011296:	4603      	mov	r3, r0
 8011298:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 801129a:	7bfb      	ldrb	r3, [r7, #15]
 801129c:	2b00      	cmp	r3, #0
 801129e:	d113      	bne.n	80112c8 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80112a0:	687b      	ldr	r3, [r7, #4]
 80112a2:	7858      	ldrb	r0, [r3, #1]
 80112a4:	687b      	ldr	r3, [r7, #4]
 80112a6:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80112aa:	2301      	movs	r3, #1
 80112ac:	683a      	ldr	r2, [r7, #0]
 80112ae:	f7ff fcd5 	bl	8010c5c <disk_read>
 80112b2:	4603      	mov	r3, r0
 80112b4:	2b00      	cmp	r3, #0
 80112b6:	d004      	beq.n	80112c2 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80112b8:	f04f 33ff 	mov.w	r3, #4294967295
 80112bc:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80112be:	2301      	movs	r3, #1
 80112c0:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80112c2:	687b      	ldr	r3, [r7, #4]
 80112c4:	683a      	ldr	r2, [r7, #0]
 80112c6:	62da      	str	r2, [r3, #44]	@ 0x2c
		}
	}
	return res;
 80112c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80112ca:	4618      	mov	r0, r3
 80112cc:	3710      	adds	r7, #16
 80112ce:	46bd      	mov	sp, r7
 80112d0:	bd80      	pop	{r7, pc}
	...

080112d4 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 80112d4:	b580      	push	{r7, lr}
 80112d6:	b084      	sub	sp, #16
 80112d8:	af00      	add	r7, sp, #0
 80112da:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80112dc:	6878      	ldr	r0, [r7, #4]
 80112de:	f7ff ff87 	bl	80111f0 <sync_window>
 80112e2:	4603      	mov	r3, r0
 80112e4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80112e6:	7bfb      	ldrb	r3, [r7, #15]
 80112e8:	2b00      	cmp	r3, #0
 80112ea:	d158      	bne.n	801139e <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80112ec:	687b      	ldr	r3, [r7, #4]
 80112ee:	781b      	ldrb	r3, [r3, #0]
 80112f0:	2b03      	cmp	r3, #3
 80112f2:	d148      	bne.n	8011386 <sync_fs+0xb2>
 80112f4:	687b      	ldr	r3, [r7, #4]
 80112f6:	791b      	ldrb	r3, [r3, #4]
 80112f8:	2b01      	cmp	r3, #1
 80112fa:	d144      	bne.n	8011386 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 80112fc:	687b      	ldr	r3, [r7, #4]
 80112fe:	3330      	adds	r3, #48	@ 0x30
 8011300:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8011304:	2100      	movs	r1, #0
 8011306:	4618      	mov	r0, r3
 8011308:	f7ff fda9 	bl	8010e5e <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 801130c:	687b      	ldr	r3, [r7, #4]
 801130e:	3330      	adds	r3, #48	@ 0x30
 8011310:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8011314:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 8011318:	4618      	mov	r0, r3
 801131a:	f7ff fd38 	bl	8010d8e <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 801131e:	687b      	ldr	r3, [r7, #4]
 8011320:	3330      	adds	r3, #48	@ 0x30
 8011322:	4921      	ldr	r1, [pc, #132]	@ (80113a8 <sync_fs+0xd4>)
 8011324:	4618      	mov	r0, r3
 8011326:	f7ff fd4d 	bl	8010dc4 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 801132a:	687b      	ldr	r3, [r7, #4]
 801132c:	3330      	adds	r3, #48	@ 0x30
 801132e:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8011332:	491e      	ldr	r1, [pc, #120]	@ (80113ac <sync_fs+0xd8>)
 8011334:	4618      	mov	r0, r3
 8011336:	f7ff fd45 	bl	8010dc4 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 801133a:	687b      	ldr	r3, [r7, #4]
 801133c:	3330      	adds	r3, #48	@ 0x30
 801133e:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 8011342:	687b      	ldr	r3, [r7, #4]
 8011344:	691b      	ldr	r3, [r3, #16]
 8011346:	4619      	mov	r1, r3
 8011348:	4610      	mov	r0, r2
 801134a:	f7ff fd3b 	bl	8010dc4 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 801134e:	687b      	ldr	r3, [r7, #4]
 8011350:	3330      	adds	r3, #48	@ 0x30
 8011352:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 8011356:	687b      	ldr	r3, [r7, #4]
 8011358:	68db      	ldr	r3, [r3, #12]
 801135a:	4619      	mov	r1, r3
 801135c:	4610      	mov	r0, r2
 801135e:	f7ff fd31 	bl	8010dc4 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8011362:	687b      	ldr	r3, [r7, #4]
 8011364:	69db      	ldr	r3, [r3, #28]
 8011366:	1c5a      	adds	r2, r3, #1
 8011368:	687b      	ldr	r3, [r7, #4]
 801136a:	62da      	str	r2, [r3, #44]	@ 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 801136c:	687b      	ldr	r3, [r7, #4]
 801136e:	7858      	ldrb	r0, [r3, #1]
 8011370:	687b      	ldr	r3, [r7, #4]
 8011372:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8011376:	687b      	ldr	r3, [r7, #4]
 8011378:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801137a:	2301      	movs	r3, #1
 801137c:	f7ff fc8e 	bl	8010c9c <disk_write>
			fs->fsi_flag = 0;
 8011380:	687b      	ldr	r3, [r7, #4]
 8011382:	2200      	movs	r2, #0
 8011384:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8011386:	687b      	ldr	r3, [r7, #4]
 8011388:	785b      	ldrb	r3, [r3, #1]
 801138a:	2200      	movs	r2, #0
 801138c:	2100      	movs	r1, #0
 801138e:	4618      	mov	r0, r3
 8011390:	f7ff fca4 	bl	8010cdc <disk_ioctl>
 8011394:	4603      	mov	r3, r0
 8011396:	2b00      	cmp	r3, #0
 8011398:	d001      	beq.n	801139e <sync_fs+0xca>
 801139a:	2301      	movs	r3, #1
 801139c:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 801139e:	7bfb      	ldrb	r3, [r7, #15]
}
 80113a0:	4618      	mov	r0, r3
 80113a2:	3710      	adds	r7, #16
 80113a4:	46bd      	mov	sp, r7
 80113a6:	bd80      	pop	{r7, pc}
 80113a8:	41615252 	.word	0x41615252
 80113ac:	61417272 	.word	0x61417272

080113b0 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80113b0:	b480      	push	{r7}
 80113b2:	b083      	sub	sp, #12
 80113b4:	af00      	add	r7, sp, #0
 80113b6:	6078      	str	r0, [r7, #4]
 80113b8:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80113ba:	683b      	ldr	r3, [r7, #0]
 80113bc:	3b02      	subs	r3, #2
 80113be:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80113c0:	687b      	ldr	r3, [r7, #4]
 80113c2:	695b      	ldr	r3, [r3, #20]
 80113c4:	3b02      	subs	r3, #2
 80113c6:	683a      	ldr	r2, [r7, #0]
 80113c8:	429a      	cmp	r2, r3
 80113ca:	d301      	bcc.n	80113d0 <clust2sect+0x20>
 80113cc:	2300      	movs	r3, #0
 80113ce:	e008      	b.n	80113e2 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 80113d0:	687b      	ldr	r3, [r7, #4]
 80113d2:	895b      	ldrh	r3, [r3, #10]
 80113d4:	461a      	mov	r2, r3
 80113d6:	683b      	ldr	r3, [r7, #0]
 80113d8:	fb03 f202 	mul.w	r2, r3, r2
 80113dc:	687b      	ldr	r3, [r7, #4]
 80113de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80113e0:	4413      	add	r3, r2
}
 80113e2:	4618      	mov	r0, r3
 80113e4:	370c      	adds	r7, #12
 80113e6:	46bd      	mov	sp, r7
 80113e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113ec:	4770      	bx	lr

080113ee <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 80113ee:	b580      	push	{r7, lr}
 80113f0:	b086      	sub	sp, #24
 80113f2:	af00      	add	r7, sp, #0
 80113f4:	6078      	str	r0, [r7, #4]
 80113f6:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 80113f8:	687b      	ldr	r3, [r7, #4]
 80113fa:	681b      	ldr	r3, [r3, #0]
 80113fc:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80113fe:	683b      	ldr	r3, [r7, #0]
 8011400:	2b01      	cmp	r3, #1
 8011402:	d904      	bls.n	801140e <get_fat+0x20>
 8011404:	693b      	ldr	r3, [r7, #16]
 8011406:	695b      	ldr	r3, [r3, #20]
 8011408:	683a      	ldr	r2, [r7, #0]
 801140a:	429a      	cmp	r2, r3
 801140c:	d302      	bcc.n	8011414 <get_fat+0x26>
		val = 1;	/* Internal error */
 801140e:	2301      	movs	r3, #1
 8011410:	617b      	str	r3, [r7, #20]
 8011412:	e08e      	b.n	8011532 <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8011414:	f04f 33ff 	mov.w	r3, #4294967295
 8011418:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 801141a:	693b      	ldr	r3, [r7, #16]
 801141c:	781b      	ldrb	r3, [r3, #0]
 801141e:	2b03      	cmp	r3, #3
 8011420:	d061      	beq.n	80114e6 <get_fat+0xf8>
 8011422:	2b03      	cmp	r3, #3
 8011424:	dc7b      	bgt.n	801151e <get_fat+0x130>
 8011426:	2b01      	cmp	r3, #1
 8011428:	d002      	beq.n	8011430 <get_fat+0x42>
 801142a:	2b02      	cmp	r3, #2
 801142c:	d041      	beq.n	80114b2 <get_fat+0xc4>
 801142e:	e076      	b.n	801151e <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8011430:	683b      	ldr	r3, [r7, #0]
 8011432:	60fb      	str	r3, [r7, #12]
 8011434:	68fb      	ldr	r3, [r7, #12]
 8011436:	085b      	lsrs	r3, r3, #1
 8011438:	68fa      	ldr	r2, [r7, #12]
 801143a:	4413      	add	r3, r2
 801143c:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801143e:	693b      	ldr	r3, [r7, #16]
 8011440:	6a1a      	ldr	r2, [r3, #32]
 8011442:	68fb      	ldr	r3, [r7, #12]
 8011444:	0a5b      	lsrs	r3, r3, #9
 8011446:	4413      	add	r3, r2
 8011448:	4619      	mov	r1, r3
 801144a:	6938      	ldr	r0, [r7, #16]
 801144c:	f7ff ff14 	bl	8011278 <move_window>
 8011450:	4603      	mov	r3, r0
 8011452:	2b00      	cmp	r3, #0
 8011454:	d166      	bne.n	8011524 <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 8011456:	68fb      	ldr	r3, [r7, #12]
 8011458:	1c5a      	adds	r2, r3, #1
 801145a:	60fa      	str	r2, [r7, #12]
 801145c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011460:	693a      	ldr	r2, [r7, #16]
 8011462:	4413      	add	r3, r2
 8011464:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8011468:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801146a:	693b      	ldr	r3, [r7, #16]
 801146c:	6a1a      	ldr	r2, [r3, #32]
 801146e:	68fb      	ldr	r3, [r7, #12]
 8011470:	0a5b      	lsrs	r3, r3, #9
 8011472:	4413      	add	r3, r2
 8011474:	4619      	mov	r1, r3
 8011476:	6938      	ldr	r0, [r7, #16]
 8011478:	f7ff fefe 	bl	8011278 <move_window>
 801147c:	4603      	mov	r3, r0
 801147e:	2b00      	cmp	r3, #0
 8011480:	d152      	bne.n	8011528 <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 8011482:	68fb      	ldr	r3, [r7, #12]
 8011484:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011488:	693a      	ldr	r2, [r7, #16]
 801148a:	4413      	add	r3, r2
 801148c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8011490:	021b      	lsls	r3, r3, #8
 8011492:	68ba      	ldr	r2, [r7, #8]
 8011494:	4313      	orrs	r3, r2
 8011496:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8011498:	683b      	ldr	r3, [r7, #0]
 801149a:	f003 0301 	and.w	r3, r3, #1
 801149e:	2b00      	cmp	r3, #0
 80114a0:	d002      	beq.n	80114a8 <get_fat+0xba>
 80114a2:	68bb      	ldr	r3, [r7, #8]
 80114a4:	091b      	lsrs	r3, r3, #4
 80114a6:	e002      	b.n	80114ae <get_fat+0xc0>
 80114a8:	68bb      	ldr	r3, [r7, #8]
 80114aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80114ae:	617b      	str	r3, [r7, #20]
			break;
 80114b0:	e03f      	b.n	8011532 <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80114b2:	693b      	ldr	r3, [r7, #16]
 80114b4:	6a1a      	ldr	r2, [r3, #32]
 80114b6:	683b      	ldr	r3, [r7, #0]
 80114b8:	0a1b      	lsrs	r3, r3, #8
 80114ba:	4413      	add	r3, r2
 80114bc:	4619      	mov	r1, r3
 80114be:	6938      	ldr	r0, [r7, #16]
 80114c0:	f7ff feda 	bl	8011278 <move_window>
 80114c4:	4603      	mov	r3, r0
 80114c6:	2b00      	cmp	r3, #0
 80114c8:	d130      	bne.n	801152c <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80114ca:	693b      	ldr	r3, [r7, #16]
 80114cc:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80114d0:	683b      	ldr	r3, [r7, #0]
 80114d2:	005b      	lsls	r3, r3, #1
 80114d4:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 80114d8:	4413      	add	r3, r2
 80114da:	4618      	mov	r0, r3
 80114dc:	f7ff fc1c 	bl	8010d18 <ld_word>
 80114e0:	4603      	mov	r3, r0
 80114e2:	617b      	str	r3, [r7, #20]
			break;
 80114e4:	e025      	b.n	8011532 <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80114e6:	693b      	ldr	r3, [r7, #16]
 80114e8:	6a1a      	ldr	r2, [r3, #32]
 80114ea:	683b      	ldr	r3, [r7, #0]
 80114ec:	09db      	lsrs	r3, r3, #7
 80114ee:	4413      	add	r3, r2
 80114f0:	4619      	mov	r1, r3
 80114f2:	6938      	ldr	r0, [r7, #16]
 80114f4:	f7ff fec0 	bl	8011278 <move_window>
 80114f8:	4603      	mov	r3, r0
 80114fa:	2b00      	cmp	r3, #0
 80114fc:	d118      	bne.n	8011530 <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80114fe:	693b      	ldr	r3, [r7, #16]
 8011500:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8011504:	683b      	ldr	r3, [r7, #0]
 8011506:	009b      	lsls	r3, r3, #2
 8011508:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 801150c:	4413      	add	r3, r2
 801150e:	4618      	mov	r0, r3
 8011510:	f7ff fc1a 	bl	8010d48 <ld_dword>
 8011514:	4603      	mov	r3, r0
 8011516:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 801151a:	617b      	str	r3, [r7, #20]
			break;
 801151c:	e009      	b.n	8011532 <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 801151e:	2301      	movs	r3, #1
 8011520:	617b      	str	r3, [r7, #20]
 8011522:	e006      	b.n	8011532 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8011524:	bf00      	nop
 8011526:	e004      	b.n	8011532 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8011528:	bf00      	nop
 801152a:	e002      	b.n	8011532 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 801152c:	bf00      	nop
 801152e:	e000      	b.n	8011532 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8011530:	bf00      	nop
		}
	}

	return val;
 8011532:	697b      	ldr	r3, [r7, #20]
}
 8011534:	4618      	mov	r0, r3
 8011536:	3718      	adds	r7, #24
 8011538:	46bd      	mov	sp, r7
 801153a:	bd80      	pop	{r7, pc}

0801153c <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 801153c:	b590      	push	{r4, r7, lr}
 801153e:	b089      	sub	sp, #36	@ 0x24
 8011540:	af00      	add	r7, sp, #0
 8011542:	60f8      	str	r0, [r7, #12]
 8011544:	60b9      	str	r1, [r7, #8]
 8011546:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8011548:	2302      	movs	r3, #2
 801154a:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 801154c:	68bb      	ldr	r3, [r7, #8]
 801154e:	2b01      	cmp	r3, #1
 8011550:	f240 80d9 	bls.w	8011706 <put_fat+0x1ca>
 8011554:	68fb      	ldr	r3, [r7, #12]
 8011556:	695b      	ldr	r3, [r3, #20]
 8011558:	68ba      	ldr	r2, [r7, #8]
 801155a:	429a      	cmp	r2, r3
 801155c:	f080 80d3 	bcs.w	8011706 <put_fat+0x1ca>
		switch (fs->fs_type) {
 8011560:	68fb      	ldr	r3, [r7, #12]
 8011562:	781b      	ldrb	r3, [r3, #0]
 8011564:	2b03      	cmp	r3, #3
 8011566:	f000 8096 	beq.w	8011696 <put_fat+0x15a>
 801156a:	2b03      	cmp	r3, #3
 801156c:	f300 80cb 	bgt.w	8011706 <put_fat+0x1ca>
 8011570:	2b01      	cmp	r3, #1
 8011572:	d002      	beq.n	801157a <put_fat+0x3e>
 8011574:	2b02      	cmp	r3, #2
 8011576:	d06e      	beq.n	8011656 <put_fat+0x11a>
 8011578:	e0c5      	b.n	8011706 <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 801157a:	68bb      	ldr	r3, [r7, #8]
 801157c:	61bb      	str	r3, [r7, #24]
 801157e:	69bb      	ldr	r3, [r7, #24]
 8011580:	085b      	lsrs	r3, r3, #1
 8011582:	69ba      	ldr	r2, [r7, #24]
 8011584:	4413      	add	r3, r2
 8011586:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8011588:	68fb      	ldr	r3, [r7, #12]
 801158a:	6a1a      	ldr	r2, [r3, #32]
 801158c:	69bb      	ldr	r3, [r7, #24]
 801158e:	0a5b      	lsrs	r3, r3, #9
 8011590:	4413      	add	r3, r2
 8011592:	4619      	mov	r1, r3
 8011594:	68f8      	ldr	r0, [r7, #12]
 8011596:	f7ff fe6f 	bl	8011278 <move_window>
 801159a:	4603      	mov	r3, r0
 801159c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801159e:	7ffb      	ldrb	r3, [r7, #31]
 80115a0:	2b00      	cmp	r3, #0
 80115a2:	f040 80a9 	bne.w	80116f8 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 80115a6:	68fb      	ldr	r3, [r7, #12]
 80115a8:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80115ac:	69bb      	ldr	r3, [r7, #24]
 80115ae:	1c59      	adds	r1, r3, #1
 80115b0:	61b9      	str	r1, [r7, #24]
 80115b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80115b6:	4413      	add	r3, r2
 80115b8:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80115ba:	68bb      	ldr	r3, [r7, #8]
 80115bc:	f003 0301 	and.w	r3, r3, #1
 80115c0:	2b00      	cmp	r3, #0
 80115c2:	d00d      	beq.n	80115e0 <put_fat+0xa4>
 80115c4:	697b      	ldr	r3, [r7, #20]
 80115c6:	781b      	ldrb	r3, [r3, #0]
 80115c8:	b25b      	sxtb	r3, r3
 80115ca:	f003 030f 	and.w	r3, r3, #15
 80115ce:	b25a      	sxtb	r2, r3
 80115d0:	687b      	ldr	r3, [r7, #4]
 80115d2:	b2db      	uxtb	r3, r3
 80115d4:	011b      	lsls	r3, r3, #4
 80115d6:	b25b      	sxtb	r3, r3
 80115d8:	4313      	orrs	r3, r2
 80115da:	b25b      	sxtb	r3, r3
 80115dc:	b2db      	uxtb	r3, r3
 80115de:	e001      	b.n	80115e4 <put_fat+0xa8>
 80115e0:	687b      	ldr	r3, [r7, #4]
 80115e2:	b2db      	uxtb	r3, r3
 80115e4:	697a      	ldr	r2, [r7, #20]
 80115e6:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80115e8:	68fb      	ldr	r3, [r7, #12]
 80115ea:	2201      	movs	r2, #1
 80115ec:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80115ee:	68fb      	ldr	r3, [r7, #12]
 80115f0:	6a1a      	ldr	r2, [r3, #32]
 80115f2:	69bb      	ldr	r3, [r7, #24]
 80115f4:	0a5b      	lsrs	r3, r3, #9
 80115f6:	4413      	add	r3, r2
 80115f8:	4619      	mov	r1, r3
 80115fa:	68f8      	ldr	r0, [r7, #12]
 80115fc:	f7ff fe3c 	bl	8011278 <move_window>
 8011600:	4603      	mov	r3, r0
 8011602:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8011604:	7ffb      	ldrb	r3, [r7, #31]
 8011606:	2b00      	cmp	r3, #0
 8011608:	d178      	bne.n	80116fc <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 801160a:	68fb      	ldr	r3, [r7, #12]
 801160c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8011610:	69bb      	ldr	r3, [r7, #24]
 8011612:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011616:	4413      	add	r3, r2
 8011618:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 801161a:	68bb      	ldr	r3, [r7, #8]
 801161c:	f003 0301 	and.w	r3, r3, #1
 8011620:	2b00      	cmp	r3, #0
 8011622:	d003      	beq.n	801162c <put_fat+0xf0>
 8011624:	687b      	ldr	r3, [r7, #4]
 8011626:	091b      	lsrs	r3, r3, #4
 8011628:	b2db      	uxtb	r3, r3
 801162a:	e00e      	b.n	801164a <put_fat+0x10e>
 801162c:	697b      	ldr	r3, [r7, #20]
 801162e:	781b      	ldrb	r3, [r3, #0]
 8011630:	b25b      	sxtb	r3, r3
 8011632:	f023 030f 	bic.w	r3, r3, #15
 8011636:	b25a      	sxtb	r2, r3
 8011638:	687b      	ldr	r3, [r7, #4]
 801163a:	0a1b      	lsrs	r3, r3, #8
 801163c:	b25b      	sxtb	r3, r3
 801163e:	f003 030f 	and.w	r3, r3, #15
 8011642:	b25b      	sxtb	r3, r3
 8011644:	4313      	orrs	r3, r2
 8011646:	b25b      	sxtb	r3, r3
 8011648:	b2db      	uxtb	r3, r3
 801164a:	697a      	ldr	r2, [r7, #20]
 801164c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 801164e:	68fb      	ldr	r3, [r7, #12]
 8011650:	2201      	movs	r2, #1
 8011652:	70da      	strb	r2, [r3, #3]
			break;
 8011654:	e057      	b.n	8011706 <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8011656:	68fb      	ldr	r3, [r7, #12]
 8011658:	6a1a      	ldr	r2, [r3, #32]
 801165a:	68bb      	ldr	r3, [r7, #8]
 801165c:	0a1b      	lsrs	r3, r3, #8
 801165e:	4413      	add	r3, r2
 8011660:	4619      	mov	r1, r3
 8011662:	68f8      	ldr	r0, [r7, #12]
 8011664:	f7ff fe08 	bl	8011278 <move_window>
 8011668:	4603      	mov	r3, r0
 801166a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801166c:	7ffb      	ldrb	r3, [r7, #31]
 801166e:	2b00      	cmp	r3, #0
 8011670:	d146      	bne.n	8011700 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8011672:	68fb      	ldr	r3, [r7, #12]
 8011674:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8011678:	68bb      	ldr	r3, [r7, #8]
 801167a:	005b      	lsls	r3, r3, #1
 801167c:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8011680:	4413      	add	r3, r2
 8011682:	687a      	ldr	r2, [r7, #4]
 8011684:	b292      	uxth	r2, r2
 8011686:	4611      	mov	r1, r2
 8011688:	4618      	mov	r0, r3
 801168a:	f7ff fb80 	bl	8010d8e <st_word>
			fs->wflag = 1;
 801168e:	68fb      	ldr	r3, [r7, #12]
 8011690:	2201      	movs	r2, #1
 8011692:	70da      	strb	r2, [r3, #3]
			break;
 8011694:	e037      	b.n	8011706 <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8011696:	68fb      	ldr	r3, [r7, #12]
 8011698:	6a1a      	ldr	r2, [r3, #32]
 801169a:	68bb      	ldr	r3, [r7, #8]
 801169c:	09db      	lsrs	r3, r3, #7
 801169e:	4413      	add	r3, r2
 80116a0:	4619      	mov	r1, r3
 80116a2:	68f8      	ldr	r0, [r7, #12]
 80116a4:	f7ff fde8 	bl	8011278 <move_window>
 80116a8:	4603      	mov	r3, r0
 80116aa:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80116ac:	7ffb      	ldrb	r3, [r7, #31]
 80116ae:	2b00      	cmp	r3, #0
 80116b0:	d128      	bne.n	8011704 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80116b2:	687b      	ldr	r3, [r7, #4]
 80116b4:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 80116b8:	68fb      	ldr	r3, [r7, #12]
 80116ba:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80116be:	68bb      	ldr	r3, [r7, #8]
 80116c0:	009b      	lsls	r3, r3, #2
 80116c2:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 80116c6:	4413      	add	r3, r2
 80116c8:	4618      	mov	r0, r3
 80116ca:	f7ff fb3d 	bl	8010d48 <ld_dword>
 80116ce:	4603      	mov	r3, r0
 80116d0:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 80116d4:	4323      	orrs	r3, r4
 80116d6:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80116d8:	68fb      	ldr	r3, [r7, #12]
 80116da:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80116de:	68bb      	ldr	r3, [r7, #8]
 80116e0:	009b      	lsls	r3, r3, #2
 80116e2:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 80116e6:	4413      	add	r3, r2
 80116e8:	6879      	ldr	r1, [r7, #4]
 80116ea:	4618      	mov	r0, r3
 80116ec:	f7ff fb6a 	bl	8010dc4 <st_dword>
			fs->wflag = 1;
 80116f0:	68fb      	ldr	r3, [r7, #12]
 80116f2:	2201      	movs	r2, #1
 80116f4:	70da      	strb	r2, [r3, #3]
			break;
 80116f6:	e006      	b.n	8011706 <put_fat+0x1ca>
			if (res != FR_OK) break;
 80116f8:	bf00      	nop
 80116fa:	e004      	b.n	8011706 <put_fat+0x1ca>
			if (res != FR_OK) break;
 80116fc:	bf00      	nop
 80116fe:	e002      	b.n	8011706 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8011700:	bf00      	nop
 8011702:	e000      	b.n	8011706 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8011704:	bf00      	nop
		}
	}
	return res;
 8011706:	7ffb      	ldrb	r3, [r7, #31]
}
 8011708:	4618      	mov	r0, r3
 801170a:	3724      	adds	r7, #36	@ 0x24
 801170c:	46bd      	mov	sp, r7
 801170e:	bd90      	pop	{r4, r7, pc}

08011710 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8011710:	b580      	push	{r7, lr}
 8011712:	b088      	sub	sp, #32
 8011714:	af00      	add	r7, sp, #0
 8011716:	60f8      	str	r0, [r7, #12]
 8011718:	60b9      	str	r1, [r7, #8]
 801171a:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 801171c:	2300      	movs	r3, #0
 801171e:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8011720:	68fb      	ldr	r3, [r7, #12]
 8011722:	681b      	ldr	r3, [r3, #0]
 8011724:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8011726:	68bb      	ldr	r3, [r7, #8]
 8011728:	2b01      	cmp	r3, #1
 801172a:	d904      	bls.n	8011736 <remove_chain+0x26>
 801172c:	69bb      	ldr	r3, [r7, #24]
 801172e:	695b      	ldr	r3, [r3, #20]
 8011730:	68ba      	ldr	r2, [r7, #8]
 8011732:	429a      	cmp	r2, r3
 8011734:	d301      	bcc.n	801173a <remove_chain+0x2a>
 8011736:	2302      	movs	r3, #2
 8011738:	e04b      	b.n	80117d2 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 801173a:	687b      	ldr	r3, [r7, #4]
 801173c:	2b00      	cmp	r3, #0
 801173e:	d00c      	beq.n	801175a <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8011740:	f04f 32ff 	mov.w	r2, #4294967295
 8011744:	6879      	ldr	r1, [r7, #4]
 8011746:	69b8      	ldr	r0, [r7, #24]
 8011748:	f7ff fef8 	bl	801153c <put_fat>
 801174c:	4603      	mov	r3, r0
 801174e:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8011750:	7ffb      	ldrb	r3, [r7, #31]
 8011752:	2b00      	cmp	r3, #0
 8011754:	d001      	beq.n	801175a <remove_chain+0x4a>
 8011756:	7ffb      	ldrb	r3, [r7, #31]
 8011758:	e03b      	b.n	80117d2 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 801175a:	68b9      	ldr	r1, [r7, #8]
 801175c:	68f8      	ldr	r0, [r7, #12]
 801175e:	f7ff fe46 	bl	80113ee <get_fat>
 8011762:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8011764:	697b      	ldr	r3, [r7, #20]
 8011766:	2b00      	cmp	r3, #0
 8011768:	d031      	beq.n	80117ce <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 801176a:	697b      	ldr	r3, [r7, #20]
 801176c:	2b01      	cmp	r3, #1
 801176e:	d101      	bne.n	8011774 <remove_chain+0x64>
 8011770:	2302      	movs	r3, #2
 8011772:	e02e      	b.n	80117d2 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8011774:	697b      	ldr	r3, [r7, #20]
 8011776:	f1b3 3fff 	cmp.w	r3, #4294967295
 801177a:	d101      	bne.n	8011780 <remove_chain+0x70>
 801177c:	2301      	movs	r3, #1
 801177e:	e028      	b.n	80117d2 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8011780:	2200      	movs	r2, #0
 8011782:	68b9      	ldr	r1, [r7, #8]
 8011784:	69b8      	ldr	r0, [r7, #24]
 8011786:	f7ff fed9 	bl	801153c <put_fat>
 801178a:	4603      	mov	r3, r0
 801178c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 801178e:	7ffb      	ldrb	r3, [r7, #31]
 8011790:	2b00      	cmp	r3, #0
 8011792:	d001      	beq.n	8011798 <remove_chain+0x88>
 8011794:	7ffb      	ldrb	r3, [r7, #31]
 8011796:	e01c      	b.n	80117d2 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8011798:	69bb      	ldr	r3, [r7, #24]
 801179a:	691a      	ldr	r2, [r3, #16]
 801179c:	69bb      	ldr	r3, [r7, #24]
 801179e:	695b      	ldr	r3, [r3, #20]
 80117a0:	3b02      	subs	r3, #2
 80117a2:	429a      	cmp	r2, r3
 80117a4:	d20b      	bcs.n	80117be <remove_chain+0xae>
			fs->free_clst++;
 80117a6:	69bb      	ldr	r3, [r7, #24]
 80117a8:	691b      	ldr	r3, [r3, #16]
 80117aa:	1c5a      	adds	r2, r3, #1
 80117ac:	69bb      	ldr	r3, [r7, #24]
 80117ae:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 80117b0:	69bb      	ldr	r3, [r7, #24]
 80117b2:	791b      	ldrb	r3, [r3, #4]
 80117b4:	f043 0301 	orr.w	r3, r3, #1
 80117b8:	b2da      	uxtb	r2, r3
 80117ba:	69bb      	ldr	r3, [r7, #24]
 80117bc:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 80117be:	697b      	ldr	r3, [r7, #20]
 80117c0:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 80117c2:	69bb      	ldr	r3, [r7, #24]
 80117c4:	695b      	ldr	r3, [r3, #20]
 80117c6:	68ba      	ldr	r2, [r7, #8]
 80117c8:	429a      	cmp	r2, r3
 80117ca:	d3c6      	bcc.n	801175a <remove_chain+0x4a>
 80117cc:	e000      	b.n	80117d0 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 80117ce:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 80117d0:	2300      	movs	r3, #0
}
 80117d2:	4618      	mov	r0, r3
 80117d4:	3720      	adds	r7, #32
 80117d6:	46bd      	mov	sp, r7
 80117d8:	bd80      	pop	{r7, pc}

080117da <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 80117da:	b580      	push	{r7, lr}
 80117dc:	b088      	sub	sp, #32
 80117de:	af00      	add	r7, sp, #0
 80117e0:	6078      	str	r0, [r7, #4]
 80117e2:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 80117e4:	687b      	ldr	r3, [r7, #4]
 80117e6:	681b      	ldr	r3, [r3, #0]
 80117e8:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 80117ea:	683b      	ldr	r3, [r7, #0]
 80117ec:	2b00      	cmp	r3, #0
 80117ee:	d10d      	bne.n	801180c <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 80117f0:	693b      	ldr	r3, [r7, #16]
 80117f2:	68db      	ldr	r3, [r3, #12]
 80117f4:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80117f6:	69bb      	ldr	r3, [r7, #24]
 80117f8:	2b00      	cmp	r3, #0
 80117fa:	d004      	beq.n	8011806 <create_chain+0x2c>
 80117fc:	693b      	ldr	r3, [r7, #16]
 80117fe:	695b      	ldr	r3, [r3, #20]
 8011800:	69ba      	ldr	r2, [r7, #24]
 8011802:	429a      	cmp	r2, r3
 8011804:	d31b      	bcc.n	801183e <create_chain+0x64>
 8011806:	2301      	movs	r3, #1
 8011808:	61bb      	str	r3, [r7, #24]
 801180a:	e018      	b.n	801183e <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 801180c:	6839      	ldr	r1, [r7, #0]
 801180e:	6878      	ldr	r0, [r7, #4]
 8011810:	f7ff fded 	bl	80113ee <get_fat>
 8011814:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8011816:	68fb      	ldr	r3, [r7, #12]
 8011818:	2b01      	cmp	r3, #1
 801181a:	d801      	bhi.n	8011820 <create_chain+0x46>
 801181c:	2301      	movs	r3, #1
 801181e:	e070      	b.n	8011902 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8011820:	68fb      	ldr	r3, [r7, #12]
 8011822:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011826:	d101      	bne.n	801182c <create_chain+0x52>
 8011828:	68fb      	ldr	r3, [r7, #12]
 801182a:	e06a      	b.n	8011902 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 801182c:	693b      	ldr	r3, [r7, #16]
 801182e:	695b      	ldr	r3, [r3, #20]
 8011830:	68fa      	ldr	r2, [r7, #12]
 8011832:	429a      	cmp	r2, r3
 8011834:	d201      	bcs.n	801183a <create_chain+0x60>
 8011836:	68fb      	ldr	r3, [r7, #12]
 8011838:	e063      	b.n	8011902 <create_chain+0x128>
		scl = clst;
 801183a:	683b      	ldr	r3, [r7, #0]
 801183c:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 801183e:	69bb      	ldr	r3, [r7, #24]
 8011840:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8011842:	69fb      	ldr	r3, [r7, #28]
 8011844:	3301      	adds	r3, #1
 8011846:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8011848:	693b      	ldr	r3, [r7, #16]
 801184a:	695b      	ldr	r3, [r3, #20]
 801184c:	69fa      	ldr	r2, [r7, #28]
 801184e:	429a      	cmp	r2, r3
 8011850:	d307      	bcc.n	8011862 <create_chain+0x88>
				ncl = 2;
 8011852:	2302      	movs	r3, #2
 8011854:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8011856:	69fa      	ldr	r2, [r7, #28]
 8011858:	69bb      	ldr	r3, [r7, #24]
 801185a:	429a      	cmp	r2, r3
 801185c:	d901      	bls.n	8011862 <create_chain+0x88>
 801185e:	2300      	movs	r3, #0
 8011860:	e04f      	b.n	8011902 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8011862:	69f9      	ldr	r1, [r7, #28]
 8011864:	6878      	ldr	r0, [r7, #4]
 8011866:	f7ff fdc2 	bl	80113ee <get_fat>
 801186a:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 801186c:	68fb      	ldr	r3, [r7, #12]
 801186e:	2b00      	cmp	r3, #0
 8011870:	d00e      	beq.n	8011890 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8011872:	68fb      	ldr	r3, [r7, #12]
 8011874:	2b01      	cmp	r3, #1
 8011876:	d003      	beq.n	8011880 <create_chain+0xa6>
 8011878:	68fb      	ldr	r3, [r7, #12]
 801187a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801187e:	d101      	bne.n	8011884 <create_chain+0xaa>
 8011880:	68fb      	ldr	r3, [r7, #12]
 8011882:	e03e      	b.n	8011902 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8011884:	69fa      	ldr	r2, [r7, #28]
 8011886:	69bb      	ldr	r3, [r7, #24]
 8011888:	429a      	cmp	r2, r3
 801188a:	d1da      	bne.n	8011842 <create_chain+0x68>
 801188c:	2300      	movs	r3, #0
 801188e:	e038      	b.n	8011902 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8011890:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8011892:	f04f 32ff 	mov.w	r2, #4294967295
 8011896:	69f9      	ldr	r1, [r7, #28]
 8011898:	6938      	ldr	r0, [r7, #16]
 801189a:	f7ff fe4f 	bl	801153c <put_fat>
 801189e:	4603      	mov	r3, r0
 80118a0:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 80118a2:	7dfb      	ldrb	r3, [r7, #23]
 80118a4:	2b00      	cmp	r3, #0
 80118a6:	d109      	bne.n	80118bc <create_chain+0xe2>
 80118a8:	683b      	ldr	r3, [r7, #0]
 80118aa:	2b00      	cmp	r3, #0
 80118ac:	d006      	beq.n	80118bc <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80118ae:	69fa      	ldr	r2, [r7, #28]
 80118b0:	6839      	ldr	r1, [r7, #0]
 80118b2:	6938      	ldr	r0, [r7, #16]
 80118b4:	f7ff fe42 	bl	801153c <put_fat>
 80118b8:	4603      	mov	r3, r0
 80118ba:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80118bc:	7dfb      	ldrb	r3, [r7, #23]
 80118be:	2b00      	cmp	r3, #0
 80118c0:	d116      	bne.n	80118f0 <create_chain+0x116>
		fs->last_clst = ncl;
 80118c2:	693b      	ldr	r3, [r7, #16]
 80118c4:	69fa      	ldr	r2, [r7, #28]
 80118c6:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80118c8:	693b      	ldr	r3, [r7, #16]
 80118ca:	691a      	ldr	r2, [r3, #16]
 80118cc:	693b      	ldr	r3, [r7, #16]
 80118ce:	695b      	ldr	r3, [r3, #20]
 80118d0:	3b02      	subs	r3, #2
 80118d2:	429a      	cmp	r2, r3
 80118d4:	d804      	bhi.n	80118e0 <create_chain+0x106>
 80118d6:	693b      	ldr	r3, [r7, #16]
 80118d8:	691b      	ldr	r3, [r3, #16]
 80118da:	1e5a      	subs	r2, r3, #1
 80118dc:	693b      	ldr	r3, [r7, #16]
 80118de:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 80118e0:	693b      	ldr	r3, [r7, #16]
 80118e2:	791b      	ldrb	r3, [r3, #4]
 80118e4:	f043 0301 	orr.w	r3, r3, #1
 80118e8:	b2da      	uxtb	r2, r3
 80118ea:	693b      	ldr	r3, [r7, #16]
 80118ec:	711a      	strb	r2, [r3, #4]
 80118ee:	e007      	b.n	8011900 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80118f0:	7dfb      	ldrb	r3, [r7, #23]
 80118f2:	2b01      	cmp	r3, #1
 80118f4:	d102      	bne.n	80118fc <create_chain+0x122>
 80118f6:	f04f 33ff 	mov.w	r3, #4294967295
 80118fa:	e000      	b.n	80118fe <create_chain+0x124>
 80118fc:	2301      	movs	r3, #1
 80118fe:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8011900:	69fb      	ldr	r3, [r7, #28]
}
 8011902:	4618      	mov	r0, r3
 8011904:	3720      	adds	r7, #32
 8011906:	46bd      	mov	sp, r7
 8011908:	bd80      	pop	{r7, pc}

0801190a <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 801190a:	b480      	push	{r7}
 801190c:	b087      	sub	sp, #28
 801190e:	af00      	add	r7, sp, #0
 8011910:	6078      	str	r0, [r7, #4]
 8011912:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8011914:	687b      	ldr	r3, [r7, #4]
 8011916:	681b      	ldr	r3, [r3, #0]
 8011918:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 801191a:	687b      	ldr	r3, [r7, #4]
 801191c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801191e:	3304      	adds	r3, #4
 8011920:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8011922:	683b      	ldr	r3, [r7, #0]
 8011924:	0a5b      	lsrs	r3, r3, #9
 8011926:	68fa      	ldr	r2, [r7, #12]
 8011928:	8952      	ldrh	r2, [r2, #10]
 801192a:	fbb3 f3f2 	udiv	r3, r3, r2
 801192e:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8011930:	693b      	ldr	r3, [r7, #16]
 8011932:	1d1a      	adds	r2, r3, #4
 8011934:	613a      	str	r2, [r7, #16]
 8011936:	681b      	ldr	r3, [r3, #0]
 8011938:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 801193a:	68bb      	ldr	r3, [r7, #8]
 801193c:	2b00      	cmp	r3, #0
 801193e:	d101      	bne.n	8011944 <clmt_clust+0x3a>
 8011940:	2300      	movs	r3, #0
 8011942:	e010      	b.n	8011966 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8011944:	697a      	ldr	r2, [r7, #20]
 8011946:	68bb      	ldr	r3, [r7, #8]
 8011948:	429a      	cmp	r2, r3
 801194a:	d307      	bcc.n	801195c <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 801194c:	697a      	ldr	r2, [r7, #20]
 801194e:	68bb      	ldr	r3, [r7, #8]
 8011950:	1ad3      	subs	r3, r2, r3
 8011952:	617b      	str	r3, [r7, #20]
 8011954:	693b      	ldr	r3, [r7, #16]
 8011956:	3304      	adds	r3, #4
 8011958:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 801195a:	e7e9      	b.n	8011930 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 801195c:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 801195e:	693b      	ldr	r3, [r7, #16]
 8011960:	681a      	ldr	r2, [r3, #0]
 8011962:	697b      	ldr	r3, [r7, #20]
 8011964:	4413      	add	r3, r2
}
 8011966:	4618      	mov	r0, r3
 8011968:	371c      	adds	r7, #28
 801196a:	46bd      	mov	sp, r7
 801196c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011970:	4770      	bx	lr

08011972 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8011972:	b580      	push	{r7, lr}
 8011974:	b086      	sub	sp, #24
 8011976:	af00      	add	r7, sp, #0
 8011978:	6078      	str	r0, [r7, #4]
 801197a:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 801197c:	687b      	ldr	r3, [r7, #4]
 801197e:	681b      	ldr	r3, [r3, #0]
 8011980:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8011982:	683b      	ldr	r3, [r7, #0]
 8011984:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8011988:	d204      	bcs.n	8011994 <dir_sdi+0x22>
 801198a:	683b      	ldr	r3, [r7, #0]
 801198c:	f003 031f 	and.w	r3, r3, #31
 8011990:	2b00      	cmp	r3, #0
 8011992:	d001      	beq.n	8011998 <dir_sdi+0x26>
		return FR_INT_ERR;
 8011994:	2302      	movs	r3, #2
 8011996:	e063      	b.n	8011a60 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8011998:	687b      	ldr	r3, [r7, #4]
 801199a:	683a      	ldr	r2, [r7, #0]
 801199c:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 801199e:	687b      	ldr	r3, [r7, #4]
 80119a0:	689b      	ldr	r3, [r3, #8]
 80119a2:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80119a4:	697b      	ldr	r3, [r7, #20]
 80119a6:	2b00      	cmp	r3, #0
 80119a8:	d106      	bne.n	80119b8 <dir_sdi+0x46>
 80119aa:	693b      	ldr	r3, [r7, #16]
 80119ac:	781b      	ldrb	r3, [r3, #0]
 80119ae:	2b02      	cmp	r3, #2
 80119b0:	d902      	bls.n	80119b8 <dir_sdi+0x46>
		clst = fs->dirbase;
 80119b2:	693b      	ldr	r3, [r7, #16]
 80119b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80119b6:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80119b8:	697b      	ldr	r3, [r7, #20]
 80119ba:	2b00      	cmp	r3, #0
 80119bc:	d10c      	bne.n	80119d8 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80119be:	683b      	ldr	r3, [r7, #0]
 80119c0:	095b      	lsrs	r3, r3, #5
 80119c2:	693a      	ldr	r2, [r7, #16]
 80119c4:	8912      	ldrh	r2, [r2, #8]
 80119c6:	4293      	cmp	r3, r2
 80119c8:	d301      	bcc.n	80119ce <dir_sdi+0x5c>
 80119ca:	2302      	movs	r3, #2
 80119cc:	e048      	b.n	8011a60 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 80119ce:	693b      	ldr	r3, [r7, #16]
 80119d0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80119d2:	687b      	ldr	r3, [r7, #4]
 80119d4:	61da      	str	r2, [r3, #28]
 80119d6:	e029      	b.n	8011a2c <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80119d8:	693b      	ldr	r3, [r7, #16]
 80119da:	895b      	ldrh	r3, [r3, #10]
 80119dc:	025b      	lsls	r3, r3, #9
 80119de:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 80119e0:	e019      	b.n	8011a16 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80119e2:	687b      	ldr	r3, [r7, #4]
 80119e4:	6979      	ldr	r1, [r7, #20]
 80119e6:	4618      	mov	r0, r3
 80119e8:	f7ff fd01 	bl	80113ee <get_fat>
 80119ec:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80119ee:	697b      	ldr	r3, [r7, #20]
 80119f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80119f4:	d101      	bne.n	80119fa <dir_sdi+0x88>
 80119f6:	2301      	movs	r3, #1
 80119f8:	e032      	b.n	8011a60 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80119fa:	697b      	ldr	r3, [r7, #20]
 80119fc:	2b01      	cmp	r3, #1
 80119fe:	d904      	bls.n	8011a0a <dir_sdi+0x98>
 8011a00:	693b      	ldr	r3, [r7, #16]
 8011a02:	695b      	ldr	r3, [r3, #20]
 8011a04:	697a      	ldr	r2, [r7, #20]
 8011a06:	429a      	cmp	r2, r3
 8011a08:	d301      	bcc.n	8011a0e <dir_sdi+0x9c>
 8011a0a:	2302      	movs	r3, #2
 8011a0c:	e028      	b.n	8011a60 <dir_sdi+0xee>
			ofs -= csz;
 8011a0e:	683a      	ldr	r2, [r7, #0]
 8011a10:	68fb      	ldr	r3, [r7, #12]
 8011a12:	1ad3      	subs	r3, r2, r3
 8011a14:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8011a16:	683a      	ldr	r2, [r7, #0]
 8011a18:	68fb      	ldr	r3, [r7, #12]
 8011a1a:	429a      	cmp	r2, r3
 8011a1c:	d2e1      	bcs.n	80119e2 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8011a1e:	6979      	ldr	r1, [r7, #20]
 8011a20:	6938      	ldr	r0, [r7, #16]
 8011a22:	f7ff fcc5 	bl	80113b0 <clust2sect>
 8011a26:	4602      	mov	r2, r0
 8011a28:	687b      	ldr	r3, [r7, #4]
 8011a2a:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8011a2c:	687b      	ldr	r3, [r7, #4]
 8011a2e:	697a      	ldr	r2, [r7, #20]
 8011a30:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8011a32:	687b      	ldr	r3, [r7, #4]
 8011a34:	69db      	ldr	r3, [r3, #28]
 8011a36:	2b00      	cmp	r3, #0
 8011a38:	d101      	bne.n	8011a3e <dir_sdi+0xcc>
 8011a3a:	2302      	movs	r3, #2
 8011a3c:	e010      	b.n	8011a60 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8011a3e:	687b      	ldr	r3, [r7, #4]
 8011a40:	69da      	ldr	r2, [r3, #28]
 8011a42:	683b      	ldr	r3, [r7, #0]
 8011a44:	0a5b      	lsrs	r3, r3, #9
 8011a46:	441a      	add	r2, r3
 8011a48:	687b      	ldr	r3, [r7, #4]
 8011a4a:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8011a4c:	693b      	ldr	r3, [r7, #16]
 8011a4e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8011a52:	683b      	ldr	r3, [r7, #0]
 8011a54:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011a58:	441a      	add	r2, r3
 8011a5a:	687b      	ldr	r3, [r7, #4]
 8011a5c:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8011a5e:	2300      	movs	r3, #0
}
 8011a60:	4618      	mov	r0, r3
 8011a62:	3718      	adds	r7, #24
 8011a64:	46bd      	mov	sp, r7
 8011a66:	bd80      	pop	{r7, pc}

08011a68 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8011a68:	b580      	push	{r7, lr}
 8011a6a:	b086      	sub	sp, #24
 8011a6c:	af00      	add	r7, sp, #0
 8011a6e:	6078      	str	r0, [r7, #4]
 8011a70:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8011a72:	687b      	ldr	r3, [r7, #4]
 8011a74:	681b      	ldr	r3, [r3, #0]
 8011a76:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8011a78:	687b      	ldr	r3, [r7, #4]
 8011a7a:	695b      	ldr	r3, [r3, #20]
 8011a7c:	3320      	adds	r3, #32
 8011a7e:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8011a80:	687b      	ldr	r3, [r7, #4]
 8011a82:	69db      	ldr	r3, [r3, #28]
 8011a84:	2b00      	cmp	r3, #0
 8011a86:	d003      	beq.n	8011a90 <dir_next+0x28>
 8011a88:	68bb      	ldr	r3, [r7, #8]
 8011a8a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8011a8e:	d301      	bcc.n	8011a94 <dir_next+0x2c>
 8011a90:	2304      	movs	r3, #4
 8011a92:	e0aa      	b.n	8011bea <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8011a94:	68bb      	ldr	r3, [r7, #8]
 8011a96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011a9a:	2b00      	cmp	r3, #0
 8011a9c:	f040 8098 	bne.w	8011bd0 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8011aa0:	687b      	ldr	r3, [r7, #4]
 8011aa2:	69db      	ldr	r3, [r3, #28]
 8011aa4:	1c5a      	adds	r2, r3, #1
 8011aa6:	687b      	ldr	r3, [r7, #4]
 8011aa8:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8011aaa:	687b      	ldr	r3, [r7, #4]
 8011aac:	699b      	ldr	r3, [r3, #24]
 8011aae:	2b00      	cmp	r3, #0
 8011ab0:	d10b      	bne.n	8011aca <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8011ab2:	68bb      	ldr	r3, [r7, #8]
 8011ab4:	095b      	lsrs	r3, r3, #5
 8011ab6:	68fa      	ldr	r2, [r7, #12]
 8011ab8:	8912      	ldrh	r2, [r2, #8]
 8011aba:	4293      	cmp	r3, r2
 8011abc:	f0c0 8088 	bcc.w	8011bd0 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8011ac0:	687b      	ldr	r3, [r7, #4]
 8011ac2:	2200      	movs	r2, #0
 8011ac4:	61da      	str	r2, [r3, #28]
 8011ac6:	2304      	movs	r3, #4
 8011ac8:	e08f      	b.n	8011bea <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8011aca:	68bb      	ldr	r3, [r7, #8]
 8011acc:	0a5b      	lsrs	r3, r3, #9
 8011ace:	68fa      	ldr	r2, [r7, #12]
 8011ad0:	8952      	ldrh	r2, [r2, #10]
 8011ad2:	3a01      	subs	r2, #1
 8011ad4:	4013      	ands	r3, r2
 8011ad6:	2b00      	cmp	r3, #0
 8011ad8:	d17a      	bne.n	8011bd0 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8011ada:	687a      	ldr	r2, [r7, #4]
 8011adc:	687b      	ldr	r3, [r7, #4]
 8011ade:	699b      	ldr	r3, [r3, #24]
 8011ae0:	4619      	mov	r1, r3
 8011ae2:	4610      	mov	r0, r2
 8011ae4:	f7ff fc83 	bl	80113ee <get_fat>
 8011ae8:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8011aea:	697b      	ldr	r3, [r7, #20]
 8011aec:	2b01      	cmp	r3, #1
 8011aee:	d801      	bhi.n	8011af4 <dir_next+0x8c>
 8011af0:	2302      	movs	r3, #2
 8011af2:	e07a      	b.n	8011bea <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8011af4:	697b      	ldr	r3, [r7, #20]
 8011af6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011afa:	d101      	bne.n	8011b00 <dir_next+0x98>
 8011afc:	2301      	movs	r3, #1
 8011afe:	e074      	b.n	8011bea <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8011b00:	68fb      	ldr	r3, [r7, #12]
 8011b02:	695b      	ldr	r3, [r3, #20]
 8011b04:	697a      	ldr	r2, [r7, #20]
 8011b06:	429a      	cmp	r2, r3
 8011b08:	d358      	bcc.n	8011bbc <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8011b0a:	683b      	ldr	r3, [r7, #0]
 8011b0c:	2b00      	cmp	r3, #0
 8011b0e:	d104      	bne.n	8011b1a <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8011b10:	687b      	ldr	r3, [r7, #4]
 8011b12:	2200      	movs	r2, #0
 8011b14:	61da      	str	r2, [r3, #28]
 8011b16:	2304      	movs	r3, #4
 8011b18:	e067      	b.n	8011bea <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8011b1a:	687a      	ldr	r2, [r7, #4]
 8011b1c:	687b      	ldr	r3, [r7, #4]
 8011b1e:	699b      	ldr	r3, [r3, #24]
 8011b20:	4619      	mov	r1, r3
 8011b22:	4610      	mov	r0, r2
 8011b24:	f7ff fe59 	bl	80117da <create_chain>
 8011b28:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8011b2a:	697b      	ldr	r3, [r7, #20]
 8011b2c:	2b00      	cmp	r3, #0
 8011b2e:	d101      	bne.n	8011b34 <dir_next+0xcc>
 8011b30:	2307      	movs	r3, #7
 8011b32:	e05a      	b.n	8011bea <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8011b34:	697b      	ldr	r3, [r7, #20]
 8011b36:	2b01      	cmp	r3, #1
 8011b38:	d101      	bne.n	8011b3e <dir_next+0xd6>
 8011b3a:	2302      	movs	r3, #2
 8011b3c:	e055      	b.n	8011bea <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8011b3e:	697b      	ldr	r3, [r7, #20]
 8011b40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011b44:	d101      	bne.n	8011b4a <dir_next+0xe2>
 8011b46:	2301      	movs	r3, #1
 8011b48:	e04f      	b.n	8011bea <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8011b4a:	68f8      	ldr	r0, [r7, #12]
 8011b4c:	f7ff fb50 	bl	80111f0 <sync_window>
 8011b50:	4603      	mov	r3, r0
 8011b52:	2b00      	cmp	r3, #0
 8011b54:	d001      	beq.n	8011b5a <dir_next+0xf2>
 8011b56:	2301      	movs	r3, #1
 8011b58:	e047      	b.n	8011bea <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8011b5a:	68fb      	ldr	r3, [r7, #12]
 8011b5c:	3330      	adds	r3, #48	@ 0x30
 8011b5e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8011b62:	2100      	movs	r1, #0
 8011b64:	4618      	mov	r0, r3
 8011b66:	f7ff f97a 	bl	8010e5e <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8011b6a:	2300      	movs	r3, #0
 8011b6c:	613b      	str	r3, [r7, #16]
 8011b6e:	6979      	ldr	r1, [r7, #20]
 8011b70:	68f8      	ldr	r0, [r7, #12]
 8011b72:	f7ff fc1d 	bl	80113b0 <clust2sect>
 8011b76:	4602      	mov	r2, r0
 8011b78:	68fb      	ldr	r3, [r7, #12]
 8011b7a:	62da      	str	r2, [r3, #44]	@ 0x2c
 8011b7c:	e012      	b.n	8011ba4 <dir_next+0x13c>
						fs->wflag = 1;
 8011b7e:	68fb      	ldr	r3, [r7, #12]
 8011b80:	2201      	movs	r2, #1
 8011b82:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8011b84:	68f8      	ldr	r0, [r7, #12]
 8011b86:	f7ff fb33 	bl	80111f0 <sync_window>
 8011b8a:	4603      	mov	r3, r0
 8011b8c:	2b00      	cmp	r3, #0
 8011b8e:	d001      	beq.n	8011b94 <dir_next+0x12c>
 8011b90:	2301      	movs	r3, #1
 8011b92:	e02a      	b.n	8011bea <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8011b94:	693b      	ldr	r3, [r7, #16]
 8011b96:	3301      	adds	r3, #1
 8011b98:	613b      	str	r3, [r7, #16]
 8011b9a:	68fb      	ldr	r3, [r7, #12]
 8011b9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011b9e:	1c5a      	adds	r2, r3, #1
 8011ba0:	68fb      	ldr	r3, [r7, #12]
 8011ba2:	62da      	str	r2, [r3, #44]	@ 0x2c
 8011ba4:	68fb      	ldr	r3, [r7, #12]
 8011ba6:	895b      	ldrh	r3, [r3, #10]
 8011ba8:	461a      	mov	r2, r3
 8011baa:	693b      	ldr	r3, [r7, #16]
 8011bac:	4293      	cmp	r3, r2
 8011bae:	d3e6      	bcc.n	8011b7e <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8011bb0:	68fb      	ldr	r3, [r7, #12]
 8011bb2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011bb4:	693b      	ldr	r3, [r7, #16]
 8011bb6:	1ad2      	subs	r2, r2, r3
 8011bb8:	68fb      	ldr	r3, [r7, #12]
 8011bba:	62da      	str	r2, [r3, #44]	@ 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8011bbc:	687b      	ldr	r3, [r7, #4]
 8011bbe:	697a      	ldr	r2, [r7, #20]
 8011bc0:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8011bc2:	6979      	ldr	r1, [r7, #20]
 8011bc4:	68f8      	ldr	r0, [r7, #12]
 8011bc6:	f7ff fbf3 	bl	80113b0 <clust2sect>
 8011bca:	4602      	mov	r2, r0
 8011bcc:	687b      	ldr	r3, [r7, #4]
 8011bce:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8011bd0:	687b      	ldr	r3, [r7, #4]
 8011bd2:	68ba      	ldr	r2, [r7, #8]
 8011bd4:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8011bd6:	68fb      	ldr	r3, [r7, #12]
 8011bd8:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8011bdc:	68bb      	ldr	r3, [r7, #8]
 8011bde:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011be2:	441a      	add	r2, r3
 8011be4:	687b      	ldr	r3, [r7, #4]
 8011be6:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8011be8:	2300      	movs	r3, #0
}
 8011bea:	4618      	mov	r0, r3
 8011bec:	3718      	adds	r7, #24
 8011bee:	46bd      	mov	sp, r7
 8011bf0:	bd80      	pop	{r7, pc}

08011bf2 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8011bf2:	b580      	push	{r7, lr}
 8011bf4:	b086      	sub	sp, #24
 8011bf6:	af00      	add	r7, sp, #0
 8011bf8:	6078      	str	r0, [r7, #4]
 8011bfa:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8011bfc:	687b      	ldr	r3, [r7, #4]
 8011bfe:	681b      	ldr	r3, [r3, #0]
 8011c00:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8011c02:	2100      	movs	r1, #0
 8011c04:	6878      	ldr	r0, [r7, #4]
 8011c06:	f7ff feb4 	bl	8011972 <dir_sdi>
 8011c0a:	4603      	mov	r3, r0
 8011c0c:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8011c0e:	7dfb      	ldrb	r3, [r7, #23]
 8011c10:	2b00      	cmp	r3, #0
 8011c12:	d12b      	bne.n	8011c6c <dir_alloc+0x7a>
		n = 0;
 8011c14:	2300      	movs	r3, #0
 8011c16:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8011c18:	687b      	ldr	r3, [r7, #4]
 8011c1a:	69db      	ldr	r3, [r3, #28]
 8011c1c:	4619      	mov	r1, r3
 8011c1e:	68f8      	ldr	r0, [r7, #12]
 8011c20:	f7ff fb2a 	bl	8011278 <move_window>
 8011c24:	4603      	mov	r3, r0
 8011c26:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8011c28:	7dfb      	ldrb	r3, [r7, #23]
 8011c2a:	2b00      	cmp	r3, #0
 8011c2c:	d11d      	bne.n	8011c6a <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8011c2e:	687b      	ldr	r3, [r7, #4]
 8011c30:	6a1b      	ldr	r3, [r3, #32]
 8011c32:	781b      	ldrb	r3, [r3, #0]
 8011c34:	2be5      	cmp	r3, #229	@ 0xe5
 8011c36:	d004      	beq.n	8011c42 <dir_alloc+0x50>
 8011c38:	687b      	ldr	r3, [r7, #4]
 8011c3a:	6a1b      	ldr	r3, [r3, #32]
 8011c3c:	781b      	ldrb	r3, [r3, #0]
 8011c3e:	2b00      	cmp	r3, #0
 8011c40:	d107      	bne.n	8011c52 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8011c42:	693b      	ldr	r3, [r7, #16]
 8011c44:	3301      	adds	r3, #1
 8011c46:	613b      	str	r3, [r7, #16]
 8011c48:	693a      	ldr	r2, [r7, #16]
 8011c4a:	683b      	ldr	r3, [r7, #0]
 8011c4c:	429a      	cmp	r2, r3
 8011c4e:	d102      	bne.n	8011c56 <dir_alloc+0x64>
 8011c50:	e00c      	b.n	8011c6c <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8011c52:	2300      	movs	r3, #0
 8011c54:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8011c56:	2101      	movs	r1, #1
 8011c58:	6878      	ldr	r0, [r7, #4]
 8011c5a:	f7ff ff05 	bl	8011a68 <dir_next>
 8011c5e:	4603      	mov	r3, r0
 8011c60:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8011c62:	7dfb      	ldrb	r3, [r7, #23]
 8011c64:	2b00      	cmp	r3, #0
 8011c66:	d0d7      	beq.n	8011c18 <dir_alloc+0x26>
 8011c68:	e000      	b.n	8011c6c <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8011c6a:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8011c6c:	7dfb      	ldrb	r3, [r7, #23]
 8011c6e:	2b04      	cmp	r3, #4
 8011c70:	d101      	bne.n	8011c76 <dir_alloc+0x84>
 8011c72:	2307      	movs	r3, #7
 8011c74:	75fb      	strb	r3, [r7, #23]
	return res;
 8011c76:	7dfb      	ldrb	r3, [r7, #23]
}
 8011c78:	4618      	mov	r0, r3
 8011c7a:	3718      	adds	r7, #24
 8011c7c:	46bd      	mov	sp, r7
 8011c7e:	bd80      	pop	{r7, pc}

08011c80 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8011c80:	b580      	push	{r7, lr}
 8011c82:	b084      	sub	sp, #16
 8011c84:	af00      	add	r7, sp, #0
 8011c86:	6078      	str	r0, [r7, #4]
 8011c88:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8011c8a:	683b      	ldr	r3, [r7, #0]
 8011c8c:	331a      	adds	r3, #26
 8011c8e:	4618      	mov	r0, r3
 8011c90:	f7ff f842 	bl	8010d18 <ld_word>
 8011c94:	4603      	mov	r3, r0
 8011c96:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8011c98:	687b      	ldr	r3, [r7, #4]
 8011c9a:	781b      	ldrb	r3, [r3, #0]
 8011c9c:	2b03      	cmp	r3, #3
 8011c9e:	d109      	bne.n	8011cb4 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8011ca0:	683b      	ldr	r3, [r7, #0]
 8011ca2:	3314      	adds	r3, #20
 8011ca4:	4618      	mov	r0, r3
 8011ca6:	f7ff f837 	bl	8010d18 <ld_word>
 8011caa:	4603      	mov	r3, r0
 8011cac:	041b      	lsls	r3, r3, #16
 8011cae:	68fa      	ldr	r2, [r7, #12]
 8011cb0:	4313      	orrs	r3, r2
 8011cb2:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8011cb4:	68fb      	ldr	r3, [r7, #12]
}
 8011cb6:	4618      	mov	r0, r3
 8011cb8:	3710      	adds	r7, #16
 8011cba:	46bd      	mov	sp, r7
 8011cbc:	bd80      	pop	{r7, pc}

08011cbe <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8011cbe:	b580      	push	{r7, lr}
 8011cc0:	b084      	sub	sp, #16
 8011cc2:	af00      	add	r7, sp, #0
 8011cc4:	60f8      	str	r0, [r7, #12]
 8011cc6:	60b9      	str	r1, [r7, #8]
 8011cc8:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8011cca:	68bb      	ldr	r3, [r7, #8]
 8011ccc:	331a      	adds	r3, #26
 8011cce:	687a      	ldr	r2, [r7, #4]
 8011cd0:	b292      	uxth	r2, r2
 8011cd2:	4611      	mov	r1, r2
 8011cd4:	4618      	mov	r0, r3
 8011cd6:	f7ff f85a 	bl	8010d8e <st_word>
	if (fs->fs_type == FS_FAT32) {
 8011cda:	68fb      	ldr	r3, [r7, #12]
 8011cdc:	781b      	ldrb	r3, [r3, #0]
 8011cde:	2b03      	cmp	r3, #3
 8011ce0:	d109      	bne.n	8011cf6 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8011ce2:	68bb      	ldr	r3, [r7, #8]
 8011ce4:	f103 0214 	add.w	r2, r3, #20
 8011ce8:	687b      	ldr	r3, [r7, #4]
 8011cea:	0c1b      	lsrs	r3, r3, #16
 8011cec:	b29b      	uxth	r3, r3
 8011cee:	4619      	mov	r1, r3
 8011cf0:	4610      	mov	r0, r2
 8011cf2:	f7ff f84c 	bl	8010d8e <st_word>
	}
}
 8011cf6:	bf00      	nop
 8011cf8:	3710      	adds	r7, #16
 8011cfa:	46bd      	mov	sp, r7
 8011cfc:	bd80      	pop	{r7, pc}

08011cfe <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8011cfe:	b580      	push	{r7, lr}
 8011d00:	b086      	sub	sp, #24
 8011d02:	af00      	add	r7, sp, #0
 8011d04:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8011d06:	687b      	ldr	r3, [r7, #4]
 8011d08:	681b      	ldr	r3, [r3, #0]
 8011d0a:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8011d0c:	2100      	movs	r1, #0
 8011d0e:	6878      	ldr	r0, [r7, #4]
 8011d10:	f7ff fe2f 	bl	8011972 <dir_sdi>
 8011d14:	4603      	mov	r3, r0
 8011d16:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8011d18:	7dfb      	ldrb	r3, [r7, #23]
 8011d1a:	2b00      	cmp	r3, #0
 8011d1c:	d001      	beq.n	8011d22 <dir_find+0x24>
 8011d1e:	7dfb      	ldrb	r3, [r7, #23]
 8011d20:	e03e      	b.n	8011da0 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8011d22:	687b      	ldr	r3, [r7, #4]
 8011d24:	69db      	ldr	r3, [r3, #28]
 8011d26:	4619      	mov	r1, r3
 8011d28:	6938      	ldr	r0, [r7, #16]
 8011d2a:	f7ff faa5 	bl	8011278 <move_window>
 8011d2e:	4603      	mov	r3, r0
 8011d30:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8011d32:	7dfb      	ldrb	r3, [r7, #23]
 8011d34:	2b00      	cmp	r3, #0
 8011d36:	d12f      	bne.n	8011d98 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8011d38:	687b      	ldr	r3, [r7, #4]
 8011d3a:	6a1b      	ldr	r3, [r3, #32]
 8011d3c:	781b      	ldrb	r3, [r3, #0]
 8011d3e:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8011d40:	7bfb      	ldrb	r3, [r7, #15]
 8011d42:	2b00      	cmp	r3, #0
 8011d44:	d102      	bne.n	8011d4c <dir_find+0x4e>
 8011d46:	2304      	movs	r3, #4
 8011d48:	75fb      	strb	r3, [r7, #23]
 8011d4a:	e028      	b.n	8011d9e <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8011d4c:	687b      	ldr	r3, [r7, #4]
 8011d4e:	6a1b      	ldr	r3, [r3, #32]
 8011d50:	330b      	adds	r3, #11
 8011d52:	781b      	ldrb	r3, [r3, #0]
 8011d54:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8011d58:	b2da      	uxtb	r2, r3
 8011d5a:	687b      	ldr	r3, [r7, #4]
 8011d5c:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8011d5e:	687b      	ldr	r3, [r7, #4]
 8011d60:	6a1b      	ldr	r3, [r3, #32]
 8011d62:	330b      	adds	r3, #11
 8011d64:	781b      	ldrb	r3, [r3, #0]
 8011d66:	f003 0308 	and.w	r3, r3, #8
 8011d6a:	2b00      	cmp	r3, #0
 8011d6c:	d10a      	bne.n	8011d84 <dir_find+0x86>
 8011d6e:	687b      	ldr	r3, [r7, #4]
 8011d70:	6a18      	ldr	r0, [r3, #32]
 8011d72:	687b      	ldr	r3, [r7, #4]
 8011d74:	3324      	adds	r3, #36	@ 0x24
 8011d76:	220b      	movs	r2, #11
 8011d78:	4619      	mov	r1, r3
 8011d7a:	f7ff f88b 	bl	8010e94 <mem_cmp>
 8011d7e:	4603      	mov	r3, r0
 8011d80:	2b00      	cmp	r3, #0
 8011d82:	d00b      	beq.n	8011d9c <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8011d84:	2100      	movs	r1, #0
 8011d86:	6878      	ldr	r0, [r7, #4]
 8011d88:	f7ff fe6e 	bl	8011a68 <dir_next>
 8011d8c:	4603      	mov	r3, r0
 8011d8e:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8011d90:	7dfb      	ldrb	r3, [r7, #23]
 8011d92:	2b00      	cmp	r3, #0
 8011d94:	d0c5      	beq.n	8011d22 <dir_find+0x24>
 8011d96:	e002      	b.n	8011d9e <dir_find+0xa0>
		if (res != FR_OK) break;
 8011d98:	bf00      	nop
 8011d9a:	e000      	b.n	8011d9e <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8011d9c:	bf00      	nop

	return res;
 8011d9e:	7dfb      	ldrb	r3, [r7, #23]
}
 8011da0:	4618      	mov	r0, r3
 8011da2:	3718      	adds	r7, #24
 8011da4:	46bd      	mov	sp, r7
 8011da6:	bd80      	pop	{r7, pc}

08011da8 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8011da8:	b580      	push	{r7, lr}
 8011daa:	b084      	sub	sp, #16
 8011dac:	af00      	add	r7, sp, #0
 8011dae:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8011db0:	687b      	ldr	r3, [r7, #4]
 8011db2:	681b      	ldr	r3, [r3, #0]
 8011db4:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8011db6:	2101      	movs	r1, #1
 8011db8:	6878      	ldr	r0, [r7, #4]
 8011dba:	f7ff ff1a 	bl	8011bf2 <dir_alloc>
 8011dbe:	4603      	mov	r3, r0
 8011dc0:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8011dc2:	7bfb      	ldrb	r3, [r7, #15]
 8011dc4:	2b00      	cmp	r3, #0
 8011dc6:	d11c      	bne.n	8011e02 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8011dc8:	687b      	ldr	r3, [r7, #4]
 8011dca:	69db      	ldr	r3, [r3, #28]
 8011dcc:	4619      	mov	r1, r3
 8011dce:	68b8      	ldr	r0, [r7, #8]
 8011dd0:	f7ff fa52 	bl	8011278 <move_window>
 8011dd4:	4603      	mov	r3, r0
 8011dd6:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8011dd8:	7bfb      	ldrb	r3, [r7, #15]
 8011dda:	2b00      	cmp	r3, #0
 8011ddc:	d111      	bne.n	8011e02 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8011dde:	687b      	ldr	r3, [r7, #4]
 8011de0:	6a1b      	ldr	r3, [r3, #32]
 8011de2:	2220      	movs	r2, #32
 8011de4:	2100      	movs	r1, #0
 8011de6:	4618      	mov	r0, r3
 8011de8:	f7ff f839 	bl	8010e5e <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8011dec:	687b      	ldr	r3, [r7, #4]
 8011dee:	6a18      	ldr	r0, [r3, #32]
 8011df0:	687b      	ldr	r3, [r7, #4]
 8011df2:	3324      	adds	r3, #36	@ 0x24
 8011df4:	220b      	movs	r2, #11
 8011df6:	4619      	mov	r1, r3
 8011df8:	f7ff f810 	bl	8010e1c <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8011dfc:	68bb      	ldr	r3, [r7, #8]
 8011dfe:	2201      	movs	r2, #1
 8011e00:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8011e02:	7bfb      	ldrb	r3, [r7, #15]
}
 8011e04:	4618      	mov	r0, r3
 8011e06:	3710      	adds	r7, #16
 8011e08:	46bd      	mov	sp, r7
 8011e0a:	bd80      	pop	{r7, pc}

08011e0c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8011e0c:	b580      	push	{r7, lr}
 8011e0e:	b088      	sub	sp, #32
 8011e10:	af00      	add	r7, sp, #0
 8011e12:	6078      	str	r0, [r7, #4]
 8011e14:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8011e16:	683b      	ldr	r3, [r7, #0]
 8011e18:	681b      	ldr	r3, [r3, #0]
 8011e1a:	60fb      	str	r3, [r7, #12]
 8011e1c:	687b      	ldr	r3, [r7, #4]
 8011e1e:	3324      	adds	r3, #36	@ 0x24
 8011e20:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8011e22:	220b      	movs	r2, #11
 8011e24:	2120      	movs	r1, #32
 8011e26:	68b8      	ldr	r0, [r7, #8]
 8011e28:	f7ff f819 	bl	8010e5e <mem_set>
	si = i = 0; ni = 8;
 8011e2c:	2300      	movs	r3, #0
 8011e2e:	613b      	str	r3, [r7, #16]
 8011e30:	693b      	ldr	r3, [r7, #16]
 8011e32:	61fb      	str	r3, [r7, #28]
 8011e34:	2308      	movs	r3, #8
 8011e36:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8011e38:	69fb      	ldr	r3, [r7, #28]
 8011e3a:	1c5a      	adds	r2, r3, #1
 8011e3c:	61fa      	str	r2, [r7, #28]
 8011e3e:	68fa      	ldr	r2, [r7, #12]
 8011e40:	4413      	add	r3, r2
 8011e42:	781b      	ldrb	r3, [r3, #0]
 8011e44:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8011e46:	7efb      	ldrb	r3, [r7, #27]
 8011e48:	2b20      	cmp	r3, #32
 8011e4a:	d94e      	bls.n	8011eea <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8011e4c:	7efb      	ldrb	r3, [r7, #27]
 8011e4e:	2b2f      	cmp	r3, #47	@ 0x2f
 8011e50:	d006      	beq.n	8011e60 <create_name+0x54>
 8011e52:	7efb      	ldrb	r3, [r7, #27]
 8011e54:	2b5c      	cmp	r3, #92	@ 0x5c
 8011e56:	d110      	bne.n	8011e7a <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8011e58:	e002      	b.n	8011e60 <create_name+0x54>
 8011e5a:	69fb      	ldr	r3, [r7, #28]
 8011e5c:	3301      	adds	r3, #1
 8011e5e:	61fb      	str	r3, [r7, #28]
 8011e60:	68fa      	ldr	r2, [r7, #12]
 8011e62:	69fb      	ldr	r3, [r7, #28]
 8011e64:	4413      	add	r3, r2
 8011e66:	781b      	ldrb	r3, [r3, #0]
 8011e68:	2b2f      	cmp	r3, #47	@ 0x2f
 8011e6a:	d0f6      	beq.n	8011e5a <create_name+0x4e>
 8011e6c:	68fa      	ldr	r2, [r7, #12]
 8011e6e:	69fb      	ldr	r3, [r7, #28]
 8011e70:	4413      	add	r3, r2
 8011e72:	781b      	ldrb	r3, [r3, #0]
 8011e74:	2b5c      	cmp	r3, #92	@ 0x5c
 8011e76:	d0f0      	beq.n	8011e5a <create_name+0x4e>
			break;
 8011e78:	e038      	b.n	8011eec <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8011e7a:	7efb      	ldrb	r3, [r7, #27]
 8011e7c:	2b2e      	cmp	r3, #46	@ 0x2e
 8011e7e:	d003      	beq.n	8011e88 <create_name+0x7c>
 8011e80:	693a      	ldr	r2, [r7, #16]
 8011e82:	697b      	ldr	r3, [r7, #20]
 8011e84:	429a      	cmp	r2, r3
 8011e86:	d30c      	bcc.n	8011ea2 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8011e88:	697b      	ldr	r3, [r7, #20]
 8011e8a:	2b0b      	cmp	r3, #11
 8011e8c:	d002      	beq.n	8011e94 <create_name+0x88>
 8011e8e:	7efb      	ldrb	r3, [r7, #27]
 8011e90:	2b2e      	cmp	r3, #46	@ 0x2e
 8011e92:	d001      	beq.n	8011e98 <create_name+0x8c>
 8011e94:	2306      	movs	r3, #6
 8011e96:	e044      	b.n	8011f22 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8011e98:	2308      	movs	r3, #8
 8011e9a:	613b      	str	r3, [r7, #16]
 8011e9c:	230b      	movs	r3, #11
 8011e9e:	617b      	str	r3, [r7, #20]
			continue;
 8011ea0:	e022      	b.n	8011ee8 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8011ea2:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8011ea6:	2b00      	cmp	r3, #0
 8011ea8:	da04      	bge.n	8011eb4 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8011eaa:	7efb      	ldrb	r3, [r7, #27]
 8011eac:	3b80      	subs	r3, #128	@ 0x80
 8011eae:	4a1f      	ldr	r2, [pc, #124]	@ (8011f2c <create_name+0x120>)
 8011eb0:	5cd3      	ldrb	r3, [r2, r3]
 8011eb2:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8011eb4:	7efb      	ldrb	r3, [r7, #27]
 8011eb6:	4619      	mov	r1, r3
 8011eb8:	481d      	ldr	r0, [pc, #116]	@ (8011f30 <create_name+0x124>)
 8011eba:	f7ff f812 	bl	8010ee2 <chk_chr>
 8011ebe:	4603      	mov	r3, r0
 8011ec0:	2b00      	cmp	r3, #0
 8011ec2:	d001      	beq.n	8011ec8 <create_name+0xbc>
 8011ec4:	2306      	movs	r3, #6
 8011ec6:	e02c      	b.n	8011f22 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8011ec8:	7efb      	ldrb	r3, [r7, #27]
 8011eca:	2b60      	cmp	r3, #96	@ 0x60
 8011ecc:	d905      	bls.n	8011eda <create_name+0xce>
 8011ece:	7efb      	ldrb	r3, [r7, #27]
 8011ed0:	2b7a      	cmp	r3, #122	@ 0x7a
 8011ed2:	d802      	bhi.n	8011eda <create_name+0xce>
 8011ed4:	7efb      	ldrb	r3, [r7, #27]
 8011ed6:	3b20      	subs	r3, #32
 8011ed8:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 8011eda:	693b      	ldr	r3, [r7, #16]
 8011edc:	1c5a      	adds	r2, r3, #1
 8011ede:	613a      	str	r2, [r7, #16]
 8011ee0:	68ba      	ldr	r2, [r7, #8]
 8011ee2:	4413      	add	r3, r2
 8011ee4:	7efa      	ldrb	r2, [r7, #27]
 8011ee6:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8011ee8:	e7a6      	b.n	8011e38 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8011eea:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8011eec:	68fa      	ldr	r2, [r7, #12]
 8011eee:	69fb      	ldr	r3, [r7, #28]
 8011ef0:	441a      	add	r2, r3
 8011ef2:	683b      	ldr	r3, [r7, #0]
 8011ef4:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8011ef6:	693b      	ldr	r3, [r7, #16]
 8011ef8:	2b00      	cmp	r3, #0
 8011efa:	d101      	bne.n	8011f00 <create_name+0xf4>
 8011efc:	2306      	movs	r3, #6
 8011efe:	e010      	b.n	8011f22 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8011f00:	68bb      	ldr	r3, [r7, #8]
 8011f02:	781b      	ldrb	r3, [r3, #0]
 8011f04:	2be5      	cmp	r3, #229	@ 0xe5
 8011f06:	d102      	bne.n	8011f0e <create_name+0x102>
 8011f08:	68bb      	ldr	r3, [r7, #8]
 8011f0a:	2205      	movs	r2, #5
 8011f0c:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8011f0e:	7efb      	ldrb	r3, [r7, #27]
 8011f10:	2b20      	cmp	r3, #32
 8011f12:	d801      	bhi.n	8011f18 <create_name+0x10c>
 8011f14:	2204      	movs	r2, #4
 8011f16:	e000      	b.n	8011f1a <create_name+0x10e>
 8011f18:	2200      	movs	r2, #0
 8011f1a:	68bb      	ldr	r3, [r7, #8]
 8011f1c:	330b      	adds	r3, #11
 8011f1e:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8011f20:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8011f22:	4618      	mov	r0, r3
 8011f24:	3720      	adds	r7, #32
 8011f26:	46bd      	mov	sp, r7
 8011f28:	bd80      	pop	{r7, pc}
 8011f2a:	bf00      	nop
 8011f2c:	08014bec 	.word	0x08014bec
 8011f30:	08014ae8 	.word	0x08014ae8

08011f34 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8011f34:	b580      	push	{r7, lr}
 8011f36:	b086      	sub	sp, #24
 8011f38:	af00      	add	r7, sp, #0
 8011f3a:	6078      	str	r0, [r7, #4]
 8011f3c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8011f3e:	687b      	ldr	r3, [r7, #4]
 8011f40:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8011f42:	693b      	ldr	r3, [r7, #16]
 8011f44:	681b      	ldr	r3, [r3, #0]
 8011f46:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8011f48:	e002      	b.n	8011f50 <follow_path+0x1c>
 8011f4a:	683b      	ldr	r3, [r7, #0]
 8011f4c:	3301      	adds	r3, #1
 8011f4e:	603b      	str	r3, [r7, #0]
 8011f50:	683b      	ldr	r3, [r7, #0]
 8011f52:	781b      	ldrb	r3, [r3, #0]
 8011f54:	2b2f      	cmp	r3, #47	@ 0x2f
 8011f56:	d0f8      	beq.n	8011f4a <follow_path+0x16>
 8011f58:	683b      	ldr	r3, [r7, #0]
 8011f5a:	781b      	ldrb	r3, [r3, #0]
 8011f5c:	2b5c      	cmp	r3, #92	@ 0x5c
 8011f5e:	d0f4      	beq.n	8011f4a <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8011f60:	693b      	ldr	r3, [r7, #16]
 8011f62:	2200      	movs	r2, #0
 8011f64:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8011f66:	683b      	ldr	r3, [r7, #0]
 8011f68:	781b      	ldrb	r3, [r3, #0]
 8011f6a:	2b1f      	cmp	r3, #31
 8011f6c:	d80a      	bhi.n	8011f84 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8011f6e:	687b      	ldr	r3, [r7, #4]
 8011f70:	2280      	movs	r2, #128	@ 0x80
 8011f72:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 8011f76:	2100      	movs	r1, #0
 8011f78:	6878      	ldr	r0, [r7, #4]
 8011f7a:	f7ff fcfa 	bl	8011972 <dir_sdi>
 8011f7e:	4603      	mov	r3, r0
 8011f80:	75fb      	strb	r3, [r7, #23]
 8011f82:	e043      	b.n	801200c <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8011f84:	463b      	mov	r3, r7
 8011f86:	4619      	mov	r1, r3
 8011f88:	6878      	ldr	r0, [r7, #4]
 8011f8a:	f7ff ff3f 	bl	8011e0c <create_name>
 8011f8e:	4603      	mov	r3, r0
 8011f90:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8011f92:	7dfb      	ldrb	r3, [r7, #23]
 8011f94:	2b00      	cmp	r3, #0
 8011f96:	d134      	bne.n	8012002 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8011f98:	6878      	ldr	r0, [r7, #4]
 8011f9a:	f7ff feb0 	bl	8011cfe <dir_find>
 8011f9e:	4603      	mov	r3, r0
 8011fa0:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8011fa2:	687b      	ldr	r3, [r7, #4]
 8011fa4:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8011fa8:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8011faa:	7dfb      	ldrb	r3, [r7, #23]
 8011fac:	2b00      	cmp	r3, #0
 8011fae:	d00a      	beq.n	8011fc6 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8011fb0:	7dfb      	ldrb	r3, [r7, #23]
 8011fb2:	2b04      	cmp	r3, #4
 8011fb4:	d127      	bne.n	8012006 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8011fb6:	7afb      	ldrb	r3, [r7, #11]
 8011fb8:	f003 0304 	and.w	r3, r3, #4
 8011fbc:	2b00      	cmp	r3, #0
 8011fbe:	d122      	bne.n	8012006 <follow_path+0xd2>
 8011fc0:	2305      	movs	r3, #5
 8011fc2:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8011fc4:	e01f      	b.n	8012006 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8011fc6:	7afb      	ldrb	r3, [r7, #11]
 8011fc8:	f003 0304 	and.w	r3, r3, #4
 8011fcc:	2b00      	cmp	r3, #0
 8011fce:	d11c      	bne.n	801200a <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8011fd0:	693b      	ldr	r3, [r7, #16]
 8011fd2:	799b      	ldrb	r3, [r3, #6]
 8011fd4:	f003 0310 	and.w	r3, r3, #16
 8011fd8:	2b00      	cmp	r3, #0
 8011fda:	d102      	bne.n	8011fe2 <follow_path+0xae>
				res = FR_NO_PATH; break;
 8011fdc:	2305      	movs	r3, #5
 8011fde:	75fb      	strb	r3, [r7, #23]
 8011fe0:	e014      	b.n	801200c <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8011fe2:	68fb      	ldr	r3, [r7, #12]
 8011fe4:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8011fe8:	687b      	ldr	r3, [r7, #4]
 8011fea:	695b      	ldr	r3, [r3, #20]
 8011fec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011ff0:	4413      	add	r3, r2
 8011ff2:	4619      	mov	r1, r3
 8011ff4:	68f8      	ldr	r0, [r7, #12]
 8011ff6:	f7ff fe43 	bl	8011c80 <ld_clust>
 8011ffa:	4602      	mov	r2, r0
 8011ffc:	693b      	ldr	r3, [r7, #16]
 8011ffe:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8012000:	e7c0      	b.n	8011f84 <follow_path+0x50>
			if (res != FR_OK) break;
 8012002:	bf00      	nop
 8012004:	e002      	b.n	801200c <follow_path+0xd8>
				break;
 8012006:	bf00      	nop
 8012008:	e000      	b.n	801200c <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 801200a:	bf00      	nop
			}
		}
	}

	return res;
 801200c:	7dfb      	ldrb	r3, [r7, #23]
}
 801200e:	4618      	mov	r0, r3
 8012010:	3718      	adds	r7, #24
 8012012:	46bd      	mov	sp, r7
 8012014:	bd80      	pop	{r7, pc}

08012016 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8012016:	b480      	push	{r7}
 8012018:	b087      	sub	sp, #28
 801201a:	af00      	add	r7, sp, #0
 801201c:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 801201e:	f04f 33ff 	mov.w	r3, #4294967295
 8012022:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8012024:	687b      	ldr	r3, [r7, #4]
 8012026:	681b      	ldr	r3, [r3, #0]
 8012028:	2b00      	cmp	r3, #0
 801202a:	d031      	beq.n	8012090 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 801202c:	687b      	ldr	r3, [r7, #4]
 801202e:	681b      	ldr	r3, [r3, #0]
 8012030:	617b      	str	r3, [r7, #20]
 8012032:	e002      	b.n	801203a <get_ldnumber+0x24>
 8012034:	697b      	ldr	r3, [r7, #20]
 8012036:	3301      	adds	r3, #1
 8012038:	617b      	str	r3, [r7, #20]
 801203a:	697b      	ldr	r3, [r7, #20]
 801203c:	781b      	ldrb	r3, [r3, #0]
 801203e:	2b20      	cmp	r3, #32
 8012040:	d903      	bls.n	801204a <get_ldnumber+0x34>
 8012042:	697b      	ldr	r3, [r7, #20]
 8012044:	781b      	ldrb	r3, [r3, #0]
 8012046:	2b3a      	cmp	r3, #58	@ 0x3a
 8012048:	d1f4      	bne.n	8012034 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 801204a:	697b      	ldr	r3, [r7, #20]
 801204c:	781b      	ldrb	r3, [r3, #0]
 801204e:	2b3a      	cmp	r3, #58	@ 0x3a
 8012050:	d11c      	bne.n	801208c <get_ldnumber+0x76>
			tp = *path;
 8012052:	687b      	ldr	r3, [r7, #4]
 8012054:	681b      	ldr	r3, [r3, #0]
 8012056:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8012058:	68fb      	ldr	r3, [r7, #12]
 801205a:	1c5a      	adds	r2, r3, #1
 801205c:	60fa      	str	r2, [r7, #12]
 801205e:	781b      	ldrb	r3, [r3, #0]
 8012060:	3b30      	subs	r3, #48	@ 0x30
 8012062:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8012064:	68bb      	ldr	r3, [r7, #8]
 8012066:	2b09      	cmp	r3, #9
 8012068:	d80e      	bhi.n	8012088 <get_ldnumber+0x72>
 801206a:	68fa      	ldr	r2, [r7, #12]
 801206c:	697b      	ldr	r3, [r7, #20]
 801206e:	429a      	cmp	r2, r3
 8012070:	d10a      	bne.n	8012088 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8012072:	68bb      	ldr	r3, [r7, #8]
 8012074:	2b00      	cmp	r3, #0
 8012076:	d107      	bne.n	8012088 <get_ldnumber+0x72>
					vol = (int)i;
 8012078:	68bb      	ldr	r3, [r7, #8]
 801207a:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 801207c:	697b      	ldr	r3, [r7, #20]
 801207e:	3301      	adds	r3, #1
 8012080:	617b      	str	r3, [r7, #20]
 8012082:	687b      	ldr	r3, [r7, #4]
 8012084:	697a      	ldr	r2, [r7, #20]
 8012086:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8012088:	693b      	ldr	r3, [r7, #16]
 801208a:	e002      	b.n	8012092 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 801208c:	2300      	movs	r3, #0
 801208e:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8012090:	693b      	ldr	r3, [r7, #16]
}
 8012092:	4618      	mov	r0, r3
 8012094:	371c      	adds	r7, #28
 8012096:	46bd      	mov	sp, r7
 8012098:	f85d 7b04 	ldr.w	r7, [sp], #4
 801209c:	4770      	bx	lr
	...

080120a0 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 80120a0:	b580      	push	{r7, lr}
 80120a2:	b082      	sub	sp, #8
 80120a4:	af00      	add	r7, sp, #0
 80120a6:	6078      	str	r0, [r7, #4]
 80120a8:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80120aa:	687b      	ldr	r3, [r7, #4]
 80120ac:	2200      	movs	r2, #0
 80120ae:	70da      	strb	r2, [r3, #3]
 80120b0:	687b      	ldr	r3, [r7, #4]
 80120b2:	f04f 32ff 	mov.w	r2, #4294967295
 80120b6:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80120b8:	6839      	ldr	r1, [r7, #0]
 80120ba:	6878      	ldr	r0, [r7, #4]
 80120bc:	f7ff f8dc 	bl	8011278 <move_window>
 80120c0:	4603      	mov	r3, r0
 80120c2:	2b00      	cmp	r3, #0
 80120c4:	d001      	beq.n	80120ca <check_fs+0x2a>
 80120c6:	2304      	movs	r3, #4
 80120c8:	e038      	b.n	801213c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80120ca:	687b      	ldr	r3, [r7, #4]
 80120cc:	3330      	adds	r3, #48	@ 0x30
 80120ce:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 80120d2:	4618      	mov	r0, r3
 80120d4:	f7fe fe20 	bl	8010d18 <ld_word>
 80120d8:	4603      	mov	r3, r0
 80120da:	461a      	mov	r2, r3
 80120dc:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 80120e0:	429a      	cmp	r2, r3
 80120e2:	d001      	beq.n	80120e8 <check_fs+0x48>
 80120e4:	2303      	movs	r3, #3
 80120e6:	e029      	b.n	801213c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 80120e8:	687b      	ldr	r3, [r7, #4]
 80120ea:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80120ee:	2be9      	cmp	r3, #233	@ 0xe9
 80120f0:	d009      	beq.n	8012106 <check_fs+0x66>
 80120f2:	687b      	ldr	r3, [r7, #4]
 80120f4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80120f8:	2beb      	cmp	r3, #235	@ 0xeb
 80120fa:	d11e      	bne.n	801213a <check_fs+0x9a>
 80120fc:	687b      	ldr	r3, [r7, #4]
 80120fe:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8012102:	2b90      	cmp	r3, #144	@ 0x90
 8012104:	d119      	bne.n	801213a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8012106:	687b      	ldr	r3, [r7, #4]
 8012108:	3330      	adds	r3, #48	@ 0x30
 801210a:	3336      	adds	r3, #54	@ 0x36
 801210c:	4618      	mov	r0, r3
 801210e:	f7fe fe1b 	bl	8010d48 <ld_dword>
 8012112:	4603      	mov	r3, r0
 8012114:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8012118:	4a0a      	ldr	r2, [pc, #40]	@ (8012144 <check_fs+0xa4>)
 801211a:	4293      	cmp	r3, r2
 801211c:	d101      	bne.n	8012122 <check_fs+0x82>
 801211e:	2300      	movs	r3, #0
 8012120:	e00c      	b.n	801213c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8012122:	687b      	ldr	r3, [r7, #4]
 8012124:	3330      	adds	r3, #48	@ 0x30
 8012126:	3352      	adds	r3, #82	@ 0x52
 8012128:	4618      	mov	r0, r3
 801212a:	f7fe fe0d 	bl	8010d48 <ld_dword>
 801212e:	4603      	mov	r3, r0
 8012130:	4a05      	ldr	r2, [pc, #20]	@ (8012148 <check_fs+0xa8>)
 8012132:	4293      	cmp	r3, r2
 8012134:	d101      	bne.n	801213a <check_fs+0x9a>
 8012136:	2300      	movs	r3, #0
 8012138:	e000      	b.n	801213c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 801213a:	2302      	movs	r3, #2
}
 801213c:	4618      	mov	r0, r3
 801213e:	3708      	adds	r7, #8
 8012140:	46bd      	mov	sp, r7
 8012142:	bd80      	pop	{r7, pc}
 8012144:	00544146 	.word	0x00544146
 8012148:	33544146 	.word	0x33544146

0801214c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 801214c:	b580      	push	{r7, lr}
 801214e:	b096      	sub	sp, #88	@ 0x58
 8012150:	af00      	add	r7, sp, #0
 8012152:	60f8      	str	r0, [r7, #12]
 8012154:	60b9      	str	r1, [r7, #8]
 8012156:	4613      	mov	r3, r2
 8012158:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 801215a:	68bb      	ldr	r3, [r7, #8]
 801215c:	2200      	movs	r2, #0
 801215e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8012160:	68f8      	ldr	r0, [r7, #12]
 8012162:	f7ff ff58 	bl	8012016 <get_ldnumber>
 8012166:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8012168:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801216a:	2b00      	cmp	r3, #0
 801216c:	da01      	bge.n	8012172 <find_volume+0x26>
 801216e:	230b      	movs	r3, #11
 8012170:	e22d      	b.n	80125ce <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8012172:	4aa1      	ldr	r2, [pc, #644]	@ (80123f8 <find_volume+0x2ac>)
 8012174:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012176:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801217a:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 801217c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801217e:	2b00      	cmp	r3, #0
 8012180:	d101      	bne.n	8012186 <find_volume+0x3a>
 8012182:	230c      	movs	r3, #12
 8012184:	e223      	b.n	80125ce <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8012186:	68bb      	ldr	r3, [r7, #8]
 8012188:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801218a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 801218c:	79fb      	ldrb	r3, [r7, #7]
 801218e:	f023 0301 	bic.w	r3, r3, #1
 8012192:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8012194:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012196:	781b      	ldrb	r3, [r3, #0]
 8012198:	2b00      	cmp	r3, #0
 801219a:	d01a      	beq.n	80121d2 <find_volume+0x86>
		stat = disk_status(fs->drv);
 801219c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801219e:	785b      	ldrb	r3, [r3, #1]
 80121a0:	4618      	mov	r0, r3
 80121a2:	f7fe fd19 	bl	8010bd8 <disk_status>
 80121a6:	4603      	mov	r3, r0
 80121a8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80121ac:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80121b0:	f003 0301 	and.w	r3, r3, #1
 80121b4:	2b00      	cmp	r3, #0
 80121b6:	d10c      	bne.n	80121d2 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80121b8:	79fb      	ldrb	r3, [r7, #7]
 80121ba:	2b00      	cmp	r3, #0
 80121bc:	d007      	beq.n	80121ce <find_volume+0x82>
 80121be:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80121c2:	f003 0304 	and.w	r3, r3, #4
 80121c6:	2b00      	cmp	r3, #0
 80121c8:	d001      	beq.n	80121ce <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 80121ca:	230a      	movs	r3, #10
 80121cc:	e1ff      	b.n	80125ce <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 80121ce:	2300      	movs	r3, #0
 80121d0:	e1fd      	b.n	80125ce <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80121d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80121d4:	2200      	movs	r2, #0
 80121d6:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80121d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80121da:	b2da      	uxtb	r2, r3
 80121dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80121de:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80121e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80121e2:	785b      	ldrb	r3, [r3, #1]
 80121e4:	4618      	mov	r0, r3
 80121e6:	f7fe fd11 	bl	8010c0c <disk_initialize>
 80121ea:	4603      	mov	r3, r0
 80121ec:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80121f0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80121f4:	f003 0301 	and.w	r3, r3, #1
 80121f8:	2b00      	cmp	r3, #0
 80121fa:	d001      	beq.n	8012200 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80121fc:	2303      	movs	r3, #3
 80121fe:	e1e6      	b.n	80125ce <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8012200:	79fb      	ldrb	r3, [r7, #7]
 8012202:	2b00      	cmp	r3, #0
 8012204:	d007      	beq.n	8012216 <find_volume+0xca>
 8012206:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801220a:	f003 0304 	and.w	r3, r3, #4
 801220e:	2b00      	cmp	r3, #0
 8012210:	d001      	beq.n	8012216 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8012212:	230a      	movs	r3, #10
 8012214:	e1db      	b.n	80125ce <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8012216:	2300      	movs	r3, #0
 8012218:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 801221a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 801221c:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 801221e:	f7ff ff3f 	bl	80120a0 <check_fs>
 8012222:	4603      	mov	r3, r0
 8012224:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8012228:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801222c:	2b02      	cmp	r3, #2
 801222e:	d149      	bne.n	80122c4 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8012230:	2300      	movs	r3, #0
 8012232:	643b      	str	r3, [r7, #64]	@ 0x40
 8012234:	e01e      	b.n	8012274 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8012236:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012238:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 801223c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801223e:	011b      	lsls	r3, r3, #4
 8012240:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 8012244:	4413      	add	r3, r2
 8012246:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8012248:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801224a:	3304      	adds	r3, #4
 801224c:	781b      	ldrb	r3, [r3, #0]
 801224e:	2b00      	cmp	r3, #0
 8012250:	d006      	beq.n	8012260 <find_volume+0x114>
 8012252:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012254:	3308      	adds	r3, #8
 8012256:	4618      	mov	r0, r3
 8012258:	f7fe fd76 	bl	8010d48 <ld_dword>
 801225c:	4602      	mov	r2, r0
 801225e:	e000      	b.n	8012262 <find_volume+0x116>
 8012260:	2200      	movs	r2, #0
 8012262:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8012264:	009b      	lsls	r3, r3, #2
 8012266:	3358      	adds	r3, #88	@ 0x58
 8012268:	443b      	add	r3, r7
 801226a:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 801226e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8012270:	3301      	adds	r3, #1
 8012272:	643b      	str	r3, [r7, #64]	@ 0x40
 8012274:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8012276:	2b03      	cmp	r3, #3
 8012278:	d9dd      	bls.n	8012236 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 801227a:	2300      	movs	r3, #0
 801227c:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 801227e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8012280:	2b00      	cmp	r3, #0
 8012282:	d002      	beq.n	801228a <find_volume+0x13e>
 8012284:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8012286:	3b01      	subs	r3, #1
 8012288:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 801228a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801228c:	009b      	lsls	r3, r3, #2
 801228e:	3358      	adds	r3, #88	@ 0x58
 8012290:	443b      	add	r3, r7
 8012292:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8012296:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8012298:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801229a:	2b00      	cmp	r3, #0
 801229c:	d005      	beq.n	80122aa <find_volume+0x15e>
 801229e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80122a0:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80122a2:	f7ff fefd 	bl	80120a0 <check_fs>
 80122a6:	4603      	mov	r3, r0
 80122a8:	e000      	b.n	80122ac <find_volume+0x160>
 80122aa:	2303      	movs	r3, #3
 80122ac:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80122b0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80122b4:	2b01      	cmp	r3, #1
 80122b6:	d905      	bls.n	80122c4 <find_volume+0x178>
 80122b8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80122ba:	3301      	adds	r3, #1
 80122bc:	643b      	str	r3, [r7, #64]	@ 0x40
 80122be:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80122c0:	2b03      	cmp	r3, #3
 80122c2:	d9e2      	bls.n	801228a <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80122c4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80122c8:	2b04      	cmp	r3, #4
 80122ca:	d101      	bne.n	80122d0 <find_volume+0x184>
 80122cc:	2301      	movs	r3, #1
 80122ce:	e17e      	b.n	80125ce <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80122d0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80122d4:	2b01      	cmp	r3, #1
 80122d6:	d901      	bls.n	80122dc <find_volume+0x190>
 80122d8:	230d      	movs	r3, #13
 80122da:	e178      	b.n	80125ce <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80122dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80122de:	3330      	adds	r3, #48	@ 0x30
 80122e0:	330b      	adds	r3, #11
 80122e2:	4618      	mov	r0, r3
 80122e4:	f7fe fd18 	bl	8010d18 <ld_word>
 80122e8:	4603      	mov	r3, r0
 80122ea:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80122ee:	d001      	beq.n	80122f4 <find_volume+0x1a8>
 80122f0:	230d      	movs	r3, #13
 80122f2:	e16c      	b.n	80125ce <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80122f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80122f6:	3330      	adds	r3, #48	@ 0x30
 80122f8:	3316      	adds	r3, #22
 80122fa:	4618      	mov	r0, r3
 80122fc:	f7fe fd0c 	bl	8010d18 <ld_word>
 8012300:	4603      	mov	r3, r0
 8012302:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8012304:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012306:	2b00      	cmp	r3, #0
 8012308:	d106      	bne.n	8012318 <find_volume+0x1cc>
 801230a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801230c:	3330      	adds	r3, #48	@ 0x30
 801230e:	3324      	adds	r3, #36	@ 0x24
 8012310:	4618      	mov	r0, r3
 8012312:	f7fe fd19 	bl	8010d48 <ld_dword>
 8012316:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 8012318:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801231a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801231c:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 801231e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012320:	f893 2040 	ldrb.w	r2, [r3, #64]	@ 0x40
 8012324:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012326:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8012328:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801232a:	789b      	ldrb	r3, [r3, #2]
 801232c:	2b01      	cmp	r3, #1
 801232e:	d005      	beq.n	801233c <find_volume+0x1f0>
 8012330:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012332:	789b      	ldrb	r3, [r3, #2]
 8012334:	2b02      	cmp	r3, #2
 8012336:	d001      	beq.n	801233c <find_volume+0x1f0>
 8012338:	230d      	movs	r3, #13
 801233a:	e148      	b.n	80125ce <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 801233c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801233e:	789b      	ldrb	r3, [r3, #2]
 8012340:	461a      	mov	r2, r3
 8012342:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012344:	fb02 f303 	mul.w	r3, r2, r3
 8012348:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 801234a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801234c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8012350:	461a      	mov	r2, r3
 8012352:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012354:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8012356:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012358:	895b      	ldrh	r3, [r3, #10]
 801235a:	2b00      	cmp	r3, #0
 801235c:	d008      	beq.n	8012370 <find_volume+0x224>
 801235e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012360:	895b      	ldrh	r3, [r3, #10]
 8012362:	461a      	mov	r2, r3
 8012364:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012366:	895b      	ldrh	r3, [r3, #10]
 8012368:	3b01      	subs	r3, #1
 801236a:	4013      	ands	r3, r2
 801236c:	2b00      	cmp	r3, #0
 801236e:	d001      	beq.n	8012374 <find_volume+0x228>
 8012370:	230d      	movs	r3, #13
 8012372:	e12c      	b.n	80125ce <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8012374:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012376:	3330      	adds	r3, #48	@ 0x30
 8012378:	3311      	adds	r3, #17
 801237a:	4618      	mov	r0, r3
 801237c:	f7fe fccc 	bl	8010d18 <ld_word>
 8012380:	4603      	mov	r3, r0
 8012382:	461a      	mov	r2, r3
 8012384:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012386:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8012388:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801238a:	891b      	ldrh	r3, [r3, #8]
 801238c:	f003 030f 	and.w	r3, r3, #15
 8012390:	b29b      	uxth	r3, r3
 8012392:	2b00      	cmp	r3, #0
 8012394:	d001      	beq.n	801239a <find_volume+0x24e>
 8012396:	230d      	movs	r3, #13
 8012398:	e119      	b.n	80125ce <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 801239a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801239c:	3330      	adds	r3, #48	@ 0x30
 801239e:	3313      	adds	r3, #19
 80123a0:	4618      	mov	r0, r3
 80123a2:	f7fe fcb9 	bl	8010d18 <ld_word>
 80123a6:	4603      	mov	r3, r0
 80123a8:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80123aa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80123ac:	2b00      	cmp	r3, #0
 80123ae:	d106      	bne.n	80123be <find_volume+0x272>
 80123b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80123b2:	3330      	adds	r3, #48	@ 0x30
 80123b4:	3320      	adds	r3, #32
 80123b6:	4618      	mov	r0, r3
 80123b8:	f7fe fcc6 	bl	8010d48 <ld_dword>
 80123bc:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80123be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80123c0:	3330      	adds	r3, #48	@ 0x30
 80123c2:	330e      	adds	r3, #14
 80123c4:	4618      	mov	r0, r3
 80123c6:	f7fe fca7 	bl	8010d18 <ld_word>
 80123ca:	4603      	mov	r3, r0
 80123cc:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80123ce:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80123d0:	2b00      	cmp	r3, #0
 80123d2:	d101      	bne.n	80123d8 <find_volume+0x28c>
 80123d4:	230d      	movs	r3, #13
 80123d6:	e0fa      	b.n	80125ce <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80123d8:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 80123da:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80123dc:	4413      	add	r3, r2
 80123de:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80123e0:	8912      	ldrh	r2, [r2, #8]
 80123e2:	0912      	lsrs	r2, r2, #4
 80123e4:	b292      	uxth	r2, r2
 80123e6:	4413      	add	r3, r2
 80123e8:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80123ea:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80123ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80123ee:	429a      	cmp	r2, r3
 80123f0:	d204      	bcs.n	80123fc <find_volume+0x2b0>
 80123f2:	230d      	movs	r3, #13
 80123f4:	e0eb      	b.n	80125ce <find_volume+0x482>
 80123f6:	bf00      	nop
 80123f8:	24000d54 	.word	0x24000d54
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80123fc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80123fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012400:	1ad3      	subs	r3, r2, r3
 8012402:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8012404:	8952      	ldrh	r2, [r2, #10]
 8012406:	fbb3 f3f2 	udiv	r3, r3, r2
 801240a:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 801240c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801240e:	2b00      	cmp	r3, #0
 8012410:	d101      	bne.n	8012416 <find_volume+0x2ca>
 8012412:	230d      	movs	r3, #13
 8012414:	e0db      	b.n	80125ce <find_volume+0x482>
		fmt = FS_FAT32;
 8012416:	2303      	movs	r3, #3
 8012418:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 801241c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801241e:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8012422:	4293      	cmp	r3, r2
 8012424:	d802      	bhi.n	801242c <find_volume+0x2e0>
 8012426:	2302      	movs	r3, #2
 8012428:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 801242c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801242e:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8012432:	4293      	cmp	r3, r2
 8012434:	d802      	bhi.n	801243c <find_volume+0x2f0>
 8012436:	2301      	movs	r3, #1
 8012438:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 801243c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801243e:	1c9a      	adds	r2, r3, #2
 8012440:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012442:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 8012444:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012446:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8012448:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 801244a:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 801244c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801244e:	441a      	add	r2, r3
 8012450:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012452:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8012454:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8012456:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012458:	441a      	add	r2, r3
 801245a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801245c:	629a      	str	r2, [r3, #40]	@ 0x28
		if (fmt == FS_FAT32) {
 801245e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8012462:	2b03      	cmp	r3, #3
 8012464:	d11e      	bne.n	80124a4 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8012466:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012468:	3330      	adds	r3, #48	@ 0x30
 801246a:	332a      	adds	r3, #42	@ 0x2a
 801246c:	4618      	mov	r0, r3
 801246e:	f7fe fc53 	bl	8010d18 <ld_word>
 8012472:	4603      	mov	r3, r0
 8012474:	2b00      	cmp	r3, #0
 8012476:	d001      	beq.n	801247c <find_volume+0x330>
 8012478:	230d      	movs	r3, #13
 801247a:	e0a8      	b.n	80125ce <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 801247c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801247e:	891b      	ldrh	r3, [r3, #8]
 8012480:	2b00      	cmp	r3, #0
 8012482:	d001      	beq.n	8012488 <find_volume+0x33c>
 8012484:	230d      	movs	r3, #13
 8012486:	e0a2      	b.n	80125ce <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8012488:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801248a:	3330      	adds	r3, #48	@ 0x30
 801248c:	332c      	adds	r3, #44	@ 0x2c
 801248e:	4618      	mov	r0, r3
 8012490:	f7fe fc5a 	bl	8010d48 <ld_dword>
 8012494:	4602      	mov	r2, r0
 8012496:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012498:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 801249a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801249c:	695b      	ldr	r3, [r3, #20]
 801249e:	009b      	lsls	r3, r3, #2
 80124a0:	647b      	str	r3, [r7, #68]	@ 0x44
 80124a2:	e01f      	b.n	80124e4 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80124a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80124a6:	891b      	ldrh	r3, [r3, #8]
 80124a8:	2b00      	cmp	r3, #0
 80124aa:	d101      	bne.n	80124b0 <find_volume+0x364>
 80124ac:	230d      	movs	r3, #13
 80124ae:	e08e      	b.n	80125ce <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80124b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80124b2:	6a1a      	ldr	r2, [r3, #32]
 80124b4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80124b6:	441a      	add	r2, r3
 80124b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80124ba:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80124bc:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80124c0:	2b02      	cmp	r3, #2
 80124c2:	d103      	bne.n	80124cc <find_volume+0x380>
 80124c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80124c6:	695b      	ldr	r3, [r3, #20]
 80124c8:	005b      	lsls	r3, r3, #1
 80124ca:	e00a      	b.n	80124e2 <find_volume+0x396>
 80124cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80124ce:	695a      	ldr	r2, [r3, #20]
 80124d0:	4613      	mov	r3, r2
 80124d2:	005b      	lsls	r3, r3, #1
 80124d4:	4413      	add	r3, r2
 80124d6:	085a      	lsrs	r2, r3, #1
 80124d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80124da:	695b      	ldr	r3, [r3, #20]
 80124dc:	f003 0301 	and.w	r3, r3, #1
 80124e0:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80124e2:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80124e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80124e6:	699a      	ldr	r2, [r3, #24]
 80124e8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80124ea:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 80124ee:	0a5b      	lsrs	r3, r3, #9
 80124f0:	429a      	cmp	r2, r3
 80124f2:	d201      	bcs.n	80124f8 <find_volume+0x3ac>
 80124f4:	230d      	movs	r3, #13
 80124f6:	e06a      	b.n	80125ce <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80124f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80124fa:	f04f 32ff 	mov.w	r2, #4294967295
 80124fe:	611a      	str	r2, [r3, #16]
 8012500:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012502:	691a      	ldr	r2, [r3, #16]
 8012504:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012506:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 8012508:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801250a:	2280      	movs	r2, #128	@ 0x80
 801250c:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 801250e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8012512:	2b03      	cmp	r3, #3
 8012514:	d149      	bne.n	80125aa <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8012516:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012518:	3330      	adds	r3, #48	@ 0x30
 801251a:	3330      	adds	r3, #48	@ 0x30
 801251c:	4618      	mov	r0, r3
 801251e:	f7fe fbfb 	bl	8010d18 <ld_word>
 8012522:	4603      	mov	r3, r0
 8012524:	2b01      	cmp	r3, #1
 8012526:	d140      	bne.n	80125aa <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 8012528:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801252a:	3301      	adds	r3, #1
 801252c:	4619      	mov	r1, r3
 801252e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8012530:	f7fe fea2 	bl	8011278 <move_window>
 8012534:	4603      	mov	r3, r0
 8012536:	2b00      	cmp	r3, #0
 8012538:	d137      	bne.n	80125aa <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 801253a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801253c:	2200      	movs	r2, #0
 801253e:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8012540:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012542:	3330      	adds	r3, #48	@ 0x30
 8012544:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8012548:	4618      	mov	r0, r3
 801254a:	f7fe fbe5 	bl	8010d18 <ld_word>
 801254e:	4603      	mov	r3, r0
 8012550:	461a      	mov	r2, r3
 8012552:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8012556:	429a      	cmp	r2, r3
 8012558:	d127      	bne.n	80125aa <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 801255a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801255c:	3330      	adds	r3, #48	@ 0x30
 801255e:	4618      	mov	r0, r3
 8012560:	f7fe fbf2 	bl	8010d48 <ld_dword>
 8012564:	4603      	mov	r3, r0
 8012566:	4a1c      	ldr	r2, [pc, #112]	@ (80125d8 <find_volume+0x48c>)
 8012568:	4293      	cmp	r3, r2
 801256a:	d11e      	bne.n	80125aa <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 801256c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801256e:	3330      	adds	r3, #48	@ 0x30
 8012570:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8012574:	4618      	mov	r0, r3
 8012576:	f7fe fbe7 	bl	8010d48 <ld_dword>
 801257a:	4603      	mov	r3, r0
 801257c:	4a17      	ldr	r2, [pc, #92]	@ (80125dc <find_volume+0x490>)
 801257e:	4293      	cmp	r3, r2
 8012580:	d113      	bne.n	80125aa <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8012582:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012584:	3330      	adds	r3, #48	@ 0x30
 8012586:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 801258a:	4618      	mov	r0, r3
 801258c:	f7fe fbdc 	bl	8010d48 <ld_dword>
 8012590:	4602      	mov	r2, r0
 8012592:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012594:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8012596:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012598:	3330      	adds	r3, #48	@ 0x30
 801259a:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 801259e:	4618      	mov	r0, r3
 80125a0:	f7fe fbd2 	bl	8010d48 <ld_dword>
 80125a4:	4602      	mov	r2, r0
 80125a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80125a8:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80125aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80125ac:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 80125b0:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80125b2:	4b0b      	ldr	r3, [pc, #44]	@ (80125e0 <find_volume+0x494>)
 80125b4:	881b      	ldrh	r3, [r3, #0]
 80125b6:	3301      	adds	r3, #1
 80125b8:	b29a      	uxth	r2, r3
 80125ba:	4b09      	ldr	r3, [pc, #36]	@ (80125e0 <find_volume+0x494>)
 80125bc:	801a      	strh	r2, [r3, #0]
 80125be:	4b08      	ldr	r3, [pc, #32]	@ (80125e0 <find_volume+0x494>)
 80125c0:	881a      	ldrh	r2, [r3, #0]
 80125c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80125c4:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 80125c6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80125c8:	f7fe fdee 	bl	80111a8 <clear_lock>
#endif
	return FR_OK;
 80125cc:	2300      	movs	r3, #0
}
 80125ce:	4618      	mov	r0, r3
 80125d0:	3758      	adds	r7, #88	@ 0x58
 80125d2:	46bd      	mov	sp, r7
 80125d4:	bd80      	pop	{r7, pc}
 80125d6:	bf00      	nop
 80125d8:	41615252 	.word	0x41615252
 80125dc:	61417272 	.word	0x61417272
 80125e0:	24000d58 	.word	0x24000d58

080125e4 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 80125e4:	b580      	push	{r7, lr}
 80125e6:	b084      	sub	sp, #16
 80125e8:	af00      	add	r7, sp, #0
 80125ea:	6078      	str	r0, [r7, #4]
 80125ec:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 80125ee:	2309      	movs	r3, #9
 80125f0:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80125f2:	687b      	ldr	r3, [r7, #4]
 80125f4:	2b00      	cmp	r3, #0
 80125f6:	d01c      	beq.n	8012632 <validate+0x4e>
 80125f8:	687b      	ldr	r3, [r7, #4]
 80125fa:	681b      	ldr	r3, [r3, #0]
 80125fc:	2b00      	cmp	r3, #0
 80125fe:	d018      	beq.n	8012632 <validate+0x4e>
 8012600:	687b      	ldr	r3, [r7, #4]
 8012602:	681b      	ldr	r3, [r3, #0]
 8012604:	781b      	ldrb	r3, [r3, #0]
 8012606:	2b00      	cmp	r3, #0
 8012608:	d013      	beq.n	8012632 <validate+0x4e>
 801260a:	687b      	ldr	r3, [r7, #4]
 801260c:	889a      	ldrh	r2, [r3, #4]
 801260e:	687b      	ldr	r3, [r7, #4]
 8012610:	681b      	ldr	r3, [r3, #0]
 8012612:	88db      	ldrh	r3, [r3, #6]
 8012614:	429a      	cmp	r2, r3
 8012616:	d10c      	bne.n	8012632 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8012618:	687b      	ldr	r3, [r7, #4]
 801261a:	681b      	ldr	r3, [r3, #0]
 801261c:	785b      	ldrb	r3, [r3, #1]
 801261e:	4618      	mov	r0, r3
 8012620:	f7fe fada 	bl	8010bd8 <disk_status>
 8012624:	4603      	mov	r3, r0
 8012626:	f003 0301 	and.w	r3, r3, #1
 801262a:	2b00      	cmp	r3, #0
 801262c:	d101      	bne.n	8012632 <validate+0x4e>
			res = FR_OK;
 801262e:	2300      	movs	r3, #0
 8012630:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8012632:	7bfb      	ldrb	r3, [r7, #15]
 8012634:	2b00      	cmp	r3, #0
 8012636:	d102      	bne.n	801263e <validate+0x5a>
 8012638:	687b      	ldr	r3, [r7, #4]
 801263a:	681b      	ldr	r3, [r3, #0]
 801263c:	e000      	b.n	8012640 <validate+0x5c>
 801263e:	2300      	movs	r3, #0
 8012640:	683a      	ldr	r2, [r7, #0]
 8012642:	6013      	str	r3, [r2, #0]
	return res;
 8012644:	7bfb      	ldrb	r3, [r7, #15]
}
 8012646:	4618      	mov	r0, r3
 8012648:	3710      	adds	r7, #16
 801264a:	46bd      	mov	sp, r7
 801264c:	bd80      	pop	{r7, pc}
	...

08012650 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8012650:	b580      	push	{r7, lr}
 8012652:	b088      	sub	sp, #32
 8012654:	af00      	add	r7, sp, #0
 8012656:	60f8      	str	r0, [r7, #12]
 8012658:	60b9      	str	r1, [r7, #8]
 801265a:	4613      	mov	r3, r2
 801265c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 801265e:	68bb      	ldr	r3, [r7, #8]
 8012660:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8012662:	f107 0310 	add.w	r3, r7, #16
 8012666:	4618      	mov	r0, r3
 8012668:	f7ff fcd5 	bl	8012016 <get_ldnumber>
 801266c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 801266e:	69fb      	ldr	r3, [r7, #28]
 8012670:	2b00      	cmp	r3, #0
 8012672:	da01      	bge.n	8012678 <f_mount+0x28>
 8012674:	230b      	movs	r3, #11
 8012676:	e02b      	b.n	80126d0 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8012678:	4a17      	ldr	r2, [pc, #92]	@ (80126d8 <f_mount+0x88>)
 801267a:	69fb      	ldr	r3, [r7, #28]
 801267c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012680:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8012682:	69bb      	ldr	r3, [r7, #24]
 8012684:	2b00      	cmp	r3, #0
 8012686:	d005      	beq.n	8012694 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8012688:	69b8      	ldr	r0, [r7, #24]
 801268a:	f7fe fd8d 	bl	80111a8 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 801268e:	69bb      	ldr	r3, [r7, #24]
 8012690:	2200      	movs	r2, #0
 8012692:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8012694:	68fb      	ldr	r3, [r7, #12]
 8012696:	2b00      	cmp	r3, #0
 8012698:	d002      	beq.n	80126a0 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 801269a:	68fb      	ldr	r3, [r7, #12]
 801269c:	2200      	movs	r2, #0
 801269e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80126a0:	68fa      	ldr	r2, [r7, #12]
 80126a2:	490d      	ldr	r1, [pc, #52]	@ (80126d8 <f_mount+0x88>)
 80126a4:	69fb      	ldr	r3, [r7, #28]
 80126a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80126aa:	68fb      	ldr	r3, [r7, #12]
 80126ac:	2b00      	cmp	r3, #0
 80126ae:	d002      	beq.n	80126b6 <f_mount+0x66>
 80126b0:	79fb      	ldrb	r3, [r7, #7]
 80126b2:	2b01      	cmp	r3, #1
 80126b4:	d001      	beq.n	80126ba <f_mount+0x6a>
 80126b6:	2300      	movs	r3, #0
 80126b8:	e00a      	b.n	80126d0 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80126ba:	f107 010c 	add.w	r1, r7, #12
 80126be:	f107 0308 	add.w	r3, r7, #8
 80126c2:	2200      	movs	r2, #0
 80126c4:	4618      	mov	r0, r3
 80126c6:	f7ff fd41 	bl	801214c <find_volume>
 80126ca:	4603      	mov	r3, r0
 80126cc:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80126ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80126d0:	4618      	mov	r0, r3
 80126d2:	3720      	adds	r7, #32
 80126d4:	46bd      	mov	sp, r7
 80126d6:	bd80      	pop	{r7, pc}
 80126d8:	24000d54 	.word	0x24000d54

080126dc <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80126dc:	b580      	push	{r7, lr}
 80126de:	b098      	sub	sp, #96	@ 0x60
 80126e0:	af00      	add	r7, sp, #0
 80126e2:	60f8      	str	r0, [r7, #12]
 80126e4:	60b9      	str	r1, [r7, #8]
 80126e6:	4613      	mov	r3, r2
 80126e8:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80126ea:	68fb      	ldr	r3, [r7, #12]
 80126ec:	2b00      	cmp	r3, #0
 80126ee:	d101      	bne.n	80126f4 <f_open+0x18>
 80126f0:	2309      	movs	r3, #9
 80126f2:	e1a9      	b.n	8012a48 <f_open+0x36c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 80126f4:	79fb      	ldrb	r3, [r7, #7]
 80126f6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80126fa:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 80126fc:	79fa      	ldrb	r2, [r7, #7]
 80126fe:	f107 0110 	add.w	r1, r7, #16
 8012702:	f107 0308 	add.w	r3, r7, #8
 8012706:	4618      	mov	r0, r3
 8012708:	f7ff fd20 	bl	801214c <find_volume>
 801270c:	4603      	mov	r3, r0
 801270e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 8012712:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8012716:	2b00      	cmp	r3, #0
 8012718:	f040 818d 	bne.w	8012a36 <f_open+0x35a>
		dj.obj.fs = fs;
 801271c:	693b      	ldr	r3, [r7, #16]
 801271e:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8012720:	68ba      	ldr	r2, [r7, #8]
 8012722:	f107 0314 	add.w	r3, r7, #20
 8012726:	4611      	mov	r1, r2
 8012728:	4618      	mov	r0, r3
 801272a:	f7ff fc03 	bl	8011f34 <follow_path>
 801272e:	4603      	mov	r3, r0
 8012730:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8012734:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8012738:	2b00      	cmp	r3, #0
 801273a:	d118      	bne.n	801276e <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 801273c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8012740:	b25b      	sxtb	r3, r3
 8012742:	2b00      	cmp	r3, #0
 8012744:	da03      	bge.n	801274e <f_open+0x72>
				res = FR_INVALID_NAME;
 8012746:	2306      	movs	r3, #6
 8012748:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 801274c:	e00f      	b.n	801276e <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 801274e:	79fb      	ldrb	r3, [r7, #7]
 8012750:	2b01      	cmp	r3, #1
 8012752:	bf8c      	ite	hi
 8012754:	2301      	movhi	r3, #1
 8012756:	2300      	movls	r3, #0
 8012758:	b2db      	uxtb	r3, r3
 801275a:	461a      	mov	r2, r3
 801275c:	f107 0314 	add.w	r3, r7, #20
 8012760:	4611      	mov	r1, r2
 8012762:	4618      	mov	r0, r3
 8012764:	f7fe fbd8 	bl	8010f18 <chk_lock>
 8012768:	4603      	mov	r3, r0
 801276a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 801276e:	79fb      	ldrb	r3, [r7, #7]
 8012770:	f003 031c 	and.w	r3, r3, #28
 8012774:	2b00      	cmp	r3, #0
 8012776:	d07f      	beq.n	8012878 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 8012778:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 801277c:	2b00      	cmp	r3, #0
 801277e:	d017      	beq.n	80127b0 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8012780:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8012784:	2b04      	cmp	r3, #4
 8012786:	d10e      	bne.n	80127a6 <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8012788:	f7fe fc22 	bl	8010fd0 <enq_lock>
 801278c:	4603      	mov	r3, r0
 801278e:	2b00      	cmp	r3, #0
 8012790:	d006      	beq.n	80127a0 <f_open+0xc4>
 8012792:	f107 0314 	add.w	r3, r7, #20
 8012796:	4618      	mov	r0, r3
 8012798:	f7ff fb06 	bl	8011da8 <dir_register>
 801279c:	4603      	mov	r3, r0
 801279e:	e000      	b.n	80127a2 <f_open+0xc6>
 80127a0:	2312      	movs	r3, #18
 80127a2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80127a6:	79fb      	ldrb	r3, [r7, #7]
 80127a8:	f043 0308 	orr.w	r3, r3, #8
 80127ac:	71fb      	strb	r3, [r7, #7]
 80127ae:	e010      	b.n	80127d2 <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80127b0:	7ebb      	ldrb	r3, [r7, #26]
 80127b2:	f003 0311 	and.w	r3, r3, #17
 80127b6:	2b00      	cmp	r3, #0
 80127b8:	d003      	beq.n	80127c2 <f_open+0xe6>
					res = FR_DENIED;
 80127ba:	2307      	movs	r3, #7
 80127bc:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 80127c0:	e007      	b.n	80127d2 <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80127c2:	79fb      	ldrb	r3, [r7, #7]
 80127c4:	f003 0304 	and.w	r3, r3, #4
 80127c8:	2b00      	cmp	r3, #0
 80127ca:	d002      	beq.n	80127d2 <f_open+0xf6>
 80127cc:	2308      	movs	r3, #8
 80127ce:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80127d2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80127d6:	2b00      	cmp	r3, #0
 80127d8:	d168      	bne.n	80128ac <f_open+0x1d0>
 80127da:	79fb      	ldrb	r3, [r7, #7]
 80127dc:	f003 0308 	and.w	r3, r3, #8
 80127e0:	2b00      	cmp	r3, #0
 80127e2:	d063      	beq.n	80128ac <f_open+0x1d0>
				dw = GET_FATTIME();
 80127e4:	f7fd ff6c 	bl	80106c0 <get_fattime>
 80127e8:	6538      	str	r0, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 80127ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80127ec:	330e      	adds	r3, #14
 80127ee:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80127f0:	4618      	mov	r0, r3
 80127f2:	f7fe fae7 	bl	8010dc4 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 80127f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80127f8:	3316      	adds	r3, #22
 80127fa:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80127fc:	4618      	mov	r0, r3
 80127fe:	f7fe fae1 	bl	8010dc4 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8012802:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012804:	330b      	adds	r3, #11
 8012806:	2220      	movs	r2, #32
 8012808:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 801280a:	693b      	ldr	r3, [r7, #16]
 801280c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801280e:	4611      	mov	r1, r2
 8012810:	4618      	mov	r0, r3
 8012812:	f7ff fa35 	bl	8011c80 <ld_clust>
 8012816:	64f8      	str	r0, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8012818:	693b      	ldr	r3, [r7, #16]
 801281a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 801281c:	2200      	movs	r2, #0
 801281e:	4618      	mov	r0, r3
 8012820:	f7ff fa4d 	bl	8011cbe <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8012824:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012826:	331c      	adds	r3, #28
 8012828:	2100      	movs	r1, #0
 801282a:	4618      	mov	r0, r3
 801282c:	f7fe faca 	bl	8010dc4 <st_dword>
					fs->wflag = 1;
 8012830:	693b      	ldr	r3, [r7, #16]
 8012832:	2201      	movs	r2, #1
 8012834:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8012836:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012838:	2b00      	cmp	r3, #0
 801283a:	d037      	beq.n	80128ac <f_open+0x1d0>
						dw = fs->winsect;
 801283c:	693b      	ldr	r3, [r7, #16]
 801283e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012840:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8012842:	f107 0314 	add.w	r3, r7, #20
 8012846:	2200      	movs	r2, #0
 8012848:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 801284a:	4618      	mov	r0, r3
 801284c:	f7fe ff60 	bl	8011710 <remove_chain>
 8012850:	4603      	mov	r3, r0
 8012852:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 8012856:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 801285a:	2b00      	cmp	r3, #0
 801285c:	d126      	bne.n	80128ac <f_open+0x1d0>
							res = move_window(fs, dw);
 801285e:	693b      	ldr	r3, [r7, #16]
 8012860:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8012862:	4618      	mov	r0, r3
 8012864:	f7fe fd08 	bl	8011278 <move_window>
 8012868:	4603      	mov	r3, r0
 801286a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 801286e:	693b      	ldr	r3, [r7, #16]
 8012870:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8012872:	3a01      	subs	r2, #1
 8012874:	60da      	str	r2, [r3, #12]
 8012876:	e019      	b.n	80128ac <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8012878:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 801287c:	2b00      	cmp	r3, #0
 801287e:	d115      	bne.n	80128ac <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8012880:	7ebb      	ldrb	r3, [r7, #26]
 8012882:	f003 0310 	and.w	r3, r3, #16
 8012886:	2b00      	cmp	r3, #0
 8012888:	d003      	beq.n	8012892 <f_open+0x1b6>
					res = FR_NO_FILE;
 801288a:	2304      	movs	r3, #4
 801288c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8012890:	e00c      	b.n	80128ac <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8012892:	79fb      	ldrb	r3, [r7, #7]
 8012894:	f003 0302 	and.w	r3, r3, #2
 8012898:	2b00      	cmp	r3, #0
 801289a:	d007      	beq.n	80128ac <f_open+0x1d0>
 801289c:	7ebb      	ldrb	r3, [r7, #26]
 801289e:	f003 0301 	and.w	r3, r3, #1
 80128a2:	2b00      	cmp	r3, #0
 80128a4:	d002      	beq.n	80128ac <f_open+0x1d0>
						res = FR_DENIED;
 80128a6:	2307      	movs	r3, #7
 80128a8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 80128ac:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80128b0:	2b00      	cmp	r3, #0
 80128b2:	d126      	bne.n	8012902 <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80128b4:	79fb      	ldrb	r3, [r7, #7]
 80128b6:	f003 0308 	and.w	r3, r3, #8
 80128ba:	2b00      	cmp	r3, #0
 80128bc:	d003      	beq.n	80128c6 <f_open+0x1ea>
				mode |= FA_MODIFIED;
 80128be:	79fb      	ldrb	r3, [r7, #7]
 80128c0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80128c4:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80128c6:	693b      	ldr	r3, [r7, #16]
 80128c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80128ca:	68fb      	ldr	r3, [r7, #12]
 80128cc:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 80128ce:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80128d0:	68fb      	ldr	r3, [r7, #12]
 80128d2:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80128d4:	79fb      	ldrb	r3, [r7, #7]
 80128d6:	2b01      	cmp	r3, #1
 80128d8:	bf8c      	ite	hi
 80128da:	2301      	movhi	r3, #1
 80128dc:	2300      	movls	r3, #0
 80128de:	b2db      	uxtb	r3, r3
 80128e0:	461a      	mov	r2, r3
 80128e2:	f107 0314 	add.w	r3, r7, #20
 80128e6:	4611      	mov	r1, r2
 80128e8:	4618      	mov	r0, r3
 80128ea:	f7fe fb93 	bl	8011014 <inc_lock>
 80128ee:	4602      	mov	r2, r0
 80128f0:	68fb      	ldr	r3, [r7, #12]
 80128f2:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 80128f4:	68fb      	ldr	r3, [r7, #12]
 80128f6:	691b      	ldr	r3, [r3, #16]
 80128f8:	2b00      	cmp	r3, #0
 80128fa:	d102      	bne.n	8012902 <f_open+0x226>
 80128fc:	2302      	movs	r3, #2
 80128fe:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8012902:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8012906:	2b00      	cmp	r3, #0
 8012908:	f040 8095 	bne.w	8012a36 <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 801290c:	693b      	ldr	r3, [r7, #16]
 801290e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8012910:	4611      	mov	r1, r2
 8012912:	4618      	mov	r0, r3
 8012914:	f7ff f9b4 	bl	8011c80 <ld_clust>
 8012918:	4602      	mov	r2, r0
 801291a:	68fb      	ldr	r3, [r7, #12]
 801291c:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 801291e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012920:	331c      	adds	r3, #28
 8012922:	4618      	mov	r0, r3
 8012924:	f7fe fa10 	bl	8010d48 <ld_dword>
 8012928:	4602      	mov	r2, r0
 801292a:	68fb      	ldr	r3, [r7, #12]
 801292c:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 801292e:	68fb      	ldr	r3, [r7, #12]
 8012930:	2200      	movs	r2, #0
 8012932:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8012934:	693a      	ldr	r2, [r7, #16]
 8012936:	68fb      	ldr	r3, [r7, #12]
 8012938:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 801293a:	693b      	ldr	r3, [r7, #16]
 801293c:	88da      	ldrh	r2, [r3, #6]
 801293e:	68fb      	ldr	r3, [r7, #12]
 8012940:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8012942:	68fb      	ldr	r3, [r7, #12]
 8012944:	79fa      	ldrb	r2, [r7, #7]
 8012946:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8012948:	68fb      	ldr	r3, [r7, #12]
 801294a:	2200      	movs	r2, #0
 801294c:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 801294e:	68fb      	ldr	r3, [r7, #12]
 8012950:	2200      	movs	r2, #0
 8012952:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8012954:	68fb      	ldr	r3, [r7, #12]
 8012956:	2200      	movs	r2, #0
 8012958:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 801295a:	68fb      	ldr	r3, [r7, #12]
 801295c:	3330      	adds	r3, #48	@ 0x30
 801295e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8012962:	2100      	movs	r1, #0
 8012964:	4618      	mov	r0, r3
 8012966:	f7fe fa7a 	bl	8010e5e <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 801296a:	79fb      	ldrb	r3, [r7, #7]
 801296c:	f003 0320 	and.w	r3, r3, #32
 8012970:	2b00      	cmp	r3, #0
 8012972:	d060      	beq.n	8012a36 <f_open+0x35a>
 8012974:	68fb      	ldr	r3, [r7, #12]
 8012976:	68db      	ldr	r3, [r3, #12]
 8012978:	2b00      	cmp	r3, #0
 801297a:	d05c      	beq.n	8012a36 <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 801297c:	68fb      	ldr	r3, [r7, #12]
 801297e:	68da      	ldr	r2, [r3, #12]
 8012980:	68fb      	ldr	r3, [r7, #12]
 8012982:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8012984:	693b      	ldr	r3, [r7, #16]
 8012986:	895b      	ldrh	r3, [r3, #10]
 8012988:	025b      	lsls	r3, r3, #9
 801298a:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 801298c:	68fb      	ldr	r3, [r7, #12]
 801298e:	689b      	ldr	r3, [r3, #8]
 8012990:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8012992:	68fb      	ldr	r3, [r7, #12]
 8012994:	68db      	ldr	r3, [r3, #12]
 8012996:	657b      	str	r3, [r7, #84]	@ 0x54
 8012998:	e016      	b.n	80129c8 <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 801299a:	68fb      	ldr	r3, [r7, #12]
 801299c:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 801299e:	4618      	mov	r0, r3
 80129a0:	f7fe fd25 	bl	80113ee <get_fat>
 80129a4:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 80129a6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80129a8:	2b01      	cmp	r3, #1
 80129aa:	d802      	bhi.n	80129b2 <f_open+0x2d6>
 80129ac:	2302      	movs	r3, #2
 80129ae:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 80129b2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80129b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80129b8:	d102      	bne.n	80129c0 <f_open+0x2e4>
 80129ba:	2301      	movs	r3, #1
 80129bc:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80129c0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80129c2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80129c4:	1ad3      	subs	r3, r2, r3
 80129c6:	657b      	str	r3, [r7, #84]	@ 0x54
 80129c8:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80129cc:	2b00      	cmp	r3, #0
 80129ce:	d103      	bne.n	80129d8 <f_open+0x2fc>
 80129d0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80129d2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80129d4:	429a      	cmp	r2, r3
 80129d6:	d8e0      	bhi.n	801299a <f_open+0x2be>
				}
				fp->clust = clst;
 80129d8:	68fb      	ldr	r3, [r7, #12]
 80129da:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80129dc:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 80129de:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80129e2:	2b00      	cmp	r3, #0
 80129e4:	d127      	bne.n	8012a36 <f_open+0x35a>
 80129e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80129e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80129ec:	2b00      	cmp	r3, #0
 80129ee:	d022      	beq.n	8012a36 <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 80129f0:	693b      	ldr	r3, [r7, #16]
 80129f2:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80129f4:	4618      	mov	r0, r3
 80129f6:	f7fe fcdb 	bl	80113b0 <clust2sect>
 80129fa:	6478      	str	r0, [r7, #68]	@ 0x44
 80129fc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80129fe:	2b00      	cmp	r3, #0
 8012a00:	d103      	bne.n	8012a0a <f_open+0x32e>
						res = FR_INT_ERR;
 8012a02:	2302      	movs	r3, #2
 8012a04:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8012a08:	e015      	b.n	8012a36 <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8012a0a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012a0c:	0a5a      	lsrs	r2, r3, #9
 8012a0e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012a10:	441a      	add	r2, r3
 8012a12:	68fb      	ldr	r3, [r7, #12]
 8012a14:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8012a16:	693b      	ldr	r3, [r7, #16]
 8012a18:	7858      	ldrb	r0, [r3, #1]
 8012a1a:	68fb      	ldr	r3, [r7, #12]
 8012a1c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8012a20:	68fb      	ldr	r3, [r7, #12]
 8012a22:	6a1a      	ldr	r2, [r3, #32]
 8012a24:	2301      	movs	r3, #1
 8012a26:	f7fe f919 	bl	8010c5c <disk_read>
 8012a2a:	4603      	mov	r3, r0
 8012a2c:	2b00      	cmp	r3, #0
 8012a2e:	d002      	beq.n	8012a36 <f_open+0x35a>
 8012a30:	2301      	movs	r3, #1
 8012a32:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8012a36:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8012a3a:	2b00      	cmp	r3, #0
 8012a3c:	d002      	beq.n	8012a44 <f_open+0x368>
 8012a3e:	68fb      	ldr	r3, [r7, #12]
 8012a40:	2200      	movs	r2, #0
 8012a42:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8012a44:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 8012a48:	4618      	mov	r0, r3
 8012a4a:	3760      	adds	r7, #96	@ 0x60
 8012a4c:	46bd      	mov	sp, r7
 8012a4e:	bd80      	pop	{r7, pc}

08012a50 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8012a50:	b580      	push	{r7, lr}
 8012a52:	b08e      	sub	sp, #56	@ 0x38
 8012a54:	af00      	add	r7, sp, #0
 8012a56:	60f8      	str	r0, [r7, #12]
 8012a58:	60b9      	str	r1, [r7, #8]
 8012a5a:	607a      	str	r2, [r7, #4]
 8012a5c:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8012a5e:	68bb      	ldr	r3, [r7, #8]
 8012a60:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 8012a62:	683b      	ldr	r3, [r7, #0]
 8012a64:	2200      	movs	r2, #0
 8012a66:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8012a68:	68fb      	ldr	r3, [r7, #12]
 8012a6a:	f107 0214 	add.w	r2, r7, #20
 8012a6e:	4611      	mov	r1, r2
 8012a70:	4618      	mov	r0, r3
 8012a72:	f7ff fdb7 	bl	80125e4 <validate>
 8012a76:	4603      	mov	r3, r0
 8012a78:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8012a7c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8012a80:	2b00      	cmp	r3, #0
 8012a82:	d107      	bne.n	8012a94 <f_read+0x44>
 8012a84:	68fb      	ldr	r3, [r7, #12]
 8012a86:	7d5b      	ldrb	r3, [r3, #21]
 8012a88:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8012a8c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8012a90:	2b00      	cmp	r3, #0
 8012a92:	d002      	beq.n	8012a9a <f_read+0x4a>
 8012a94:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8012a98:	e115      	b.n	8012cc6 <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8012a9a:	68fb      	ldr	r3, [r7, #12]
 8012a9c:	7d1b      	ldrb	r3, [r3, #20]
 8012a9e:	f003 0301 	and.w	r3, r3, #1
 8012aa2:	2b00      	cmp	r3, #0
 8012aa4:	d101      	bne.n	8012aaa <f_read+0x5a>
 8012aa6:	2307      	movs	r3, #7
 8012aa8:	e10d      	b.n	8012cc6 <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 8012aaa:	68fb      	ldr	r3, [r7, #12]
 8012aac:	68da      	ldr	r2, [r3, #12]
 8012aae:	68fb      	ldr	r3, [r7, #12]
 8012ab0:	699b      	ldr	r3, [r3, #24]
 8012ab2:	1ad3      	subs	r3, r2, r3
 8012ab4:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8012ab6:	687a      	ldr	r2, [r7, #4]
 8012ab8:	6a3b      	ldr	r3, [r7, #32]
 8012aba:	429a      	cmp	r2, r3
 8012abc:	f240 80fe 	bls.w	8012cbc <f_read+0x26c>
 8012ac0:	6a3b      	ldr	r3, [r7, #32]
 8012ac2:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8012ac4:	e0fa      	b.n	8012cbc <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8012ac6:	68fb      	ldr	r3, [r7, #12]
 8012ac8:	699b      	ldr	r3, [r3, #24]
 8012aca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012ace:	2b00      	cmp	r3, #0
 8012ad0:	f040 80c6 	bne.w	8012c60 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8012ad4:	68fb      	ldr	r3, [r7, #12]
 8012ad6:	699b      	ldr	r3, [r3, #24]
 8012ad8:	0a5b      	lsrs	r3, r3, #9
 8012ada:	697a      	ldr	r2, [r7, #20]
 8012adc:	8952      	ldrh	r2, [r2, #10]
 8012ade:	3a01      	subs	r2, #1
 8012ae0:	4013      	ands	r3, r2
 8012ae2:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8012ae4:	69fb      	ldr	r3, [r7, #28]
 8012ae6:	2b00      	cmp	r3, #0
 8012ae8:	d12f      	bne.n	8012b4a <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8012aea:	68fb      	ldr	r3, [r7, #12]
 8012aec:	699b      	ldr	r3, [r3, #24]
 8012aee:	2b00      	cmp	r3, #0
 8012af0:	d103      	bne.n	8012afa <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8012af2:	68fb      	ldr	r3, [r7, #12]
 8012af4:	689b      	ldr	r3, [r3, #8]
 8012af6:	633b      	str	r3, [r7, #48]	@ 0x30
 8012af8:	e013      	b.n	8012b22 <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8012afa:	68fb      	ldr	r3, [r7, #12]
 8012afc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012afe:	2b00      	cmp	r3, #0
 8012b00:	d007      	beq.n	8012b12 <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8012b02:	68fb      	ldr	r3, [r7, #12]
 8012b04:	699b      	ldr	r3, [r3, #24]
 8012b06:	4619      	mov	r1, r3
 8012b08:	68f8      	ldr	r0, [r7, #12]
 8012b0a:	f7fe fefe 	bl	801190a <clmt_clust>
 8012b0e:	6338      	str	r0, [r7, #48]	@ 0x30
 8012b10:	e007      	b.n	8012b22 <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8012b12:	68fa      	ldr	r2, [r7, #12]
 8012b14:	68fb      	ldr	r3, [r7, #12]
 8012b16:	69db      	ldr	r3, [r3, #28]
 8012b18:	4619      	mov	r1, r3
 8012b1a:	4610      	mov	r0, r2
 8012b1c:	f7fe fc67 	bl	80113ee <get_fat>
 8012b20:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8012b22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012b24:	2b01      	cmp	r3, #1
 8012b26:	d804      	bhi.n	8012b32 <f_read+0xe2>
 8012b28:	68fb      	ldr	r3, [r7, #12]
 8012b2a:	2202      	movs	r2, #2
 8012b2c:	755a      	strb	r2, [r3, #21]
 8012b2e:	2302      	movs	r3, #2
 8012b30:	e0c9      	b.n	8012cc6 <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8012b32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012b34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012b38:	d104      	bne.n	8012b44 <f_read+0xf4>
 8012b3a:	68fb      	ldr	r3, [r7, #12]
 8012b3c:	2201      	movs	r2, #1
 8012b3e:	755a      	strb	r2, [r3, #21]
 8012b40:	2301      	movs	r3, #1
 8012b42:	e0c0      	b.n	8012cc6 <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 8012b44:	68fb      	ldr	r3, [r7, #12]
 8012b46:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8012b48:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8012b4a:	697a      	ldr	r2, [r7, #20]
 8012b4c:	68fb      	ldr	r3, [r7, #12]
 8012b4e:	69db      	ldr	r3, [r3, #28]
 8012b50:	4619      	mov	r1, r3
 8012b52:	4610      	mov	r0, r2
 8012b54:	f7fe fc2c 	bl	80113b0 <clust2sect>
 8012b58:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8012b5a:	69bb      	ldr	r3, [r7, #24]
 8012b5c:	2b00      	cmp	r3, #0
 8012b5e:	d104      	bne.n	8012b6a <f_read+0x11a>
 8012b60:	68fb      	ldr	r3, [r7, #12]
 8012b62:	2202      	movs	r2, #2
 8012b64:	755a      	strb	r2, [r3, #21]
 8012b66:	2302      	movs	r3, #2
 8012b68:	e0ad      	b.n	8012cc6 <f_read+0x276>
			sect += csect;
 8012b6a:	69ba      	ldr	r2, [r7, #24]
 8012b6c:	69fb      	ldr	r3, [r7, #28]
 8012b6e:	4413      	add	r3, r2
 8012b70:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8012b72:	687b      	ldr	r3, [r7, #4]
 8012b74:	0a5b      	lsrs	r3, r3, #9
 8012b76:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8012b78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012b7a:	2b00      	cmp	r3, #0
 8012b7c:	d039      	beq.n	8012bf2 <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8012b7e:	69fa      	ldr	r2, [r7, #28]
 8012b80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012b82:	4413      	add	r3, r2
 8012b84:	697a      	ldr	r2, [r7, #20]
 8012b86:	8952      	ldrh	r2, [r2, #10]
 8012b88:	4293      	cmp	r3, r2
 8012b8a:	d905      	bls.n	8012b98 <f_read+0x148>
					cc = fs->csize - csect;
 8012b8c:	697b      	ldr	r3, [r7, #20]
 8012b8e:	895b      	ldrh	r3, [r3, #10]
 8012b90:	461a      	mov	r2, r3
 8012b92:	69fb      	ldr	r3, [r7, #28]
 8012b94:	1ad3      	subs	r3, r2, r3
 8012b96:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8012b98:	697b      	ldr	r3, [r7, #20]
 8012b9a:	7858      	ldrb	r0, [r3, #1]
 8012b9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012b9e:	69ba      	ldr	r2, [r7, #24]
 8012ba0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8012ba2:	f7fe f85b 	bl	8010c5c <disk_read>
 8012ba6:	4603      	mov	r3, r0
 8012ba8:	2b00      	cmp	r3, #0
 8012baa:	d004      	beq.n	8012bb6 <f_read+0x166>
 8012bac:	68fb      	ldr	r3, [r7, #12]
 8012bae:	2201      	movs	r2, #1
 8012bb0:	755a      	strb	r2, [r3, #21]
 8012bb2:	2301      	movs	r3, #1
 8012bb4:	e087      	b.n	8012cc6 <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8012bb6:	68fb      	ldr	r3, [r7, #12]
 8012bb8:	7d1b      	ldrb	r3, [r3, #20]
 8012bba:	b25b      	sxtb	r3, r3
 8012bbc:	2b00      	cmp	r3, #0
 8012bbe:	da14      	bge.n	8012bea <f_read+0x19a>
 8012bc0:	68fb      	ldr	r3, [r7, #12]
 8012bc2:	6a1a      	ldr	r2, [r3, #32]
 8012bc4:	69bb      	ldr	r3, [r7, #24]
 8012bc6:	1ad3      	subs	r3, r2, r3
 8012bc8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8012bca:	429a      	cmp	r2, r3
 8012bcc:	d90d      	bls.n	8012bea <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8012bce:	68fb      	ldr	r3, [r7, #12]
 8012bd0:	6a1a      	ldr	r2, [r3, #32]
 8012bd2:	69bb      	ldr	r3, [r7, #24]
 8012bd4:	1ad3      	subs	r3, r2, r3
 8012bd6:	025b      	lsls	r3, r3, #9
 8012bd8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012bda:	18d0      	adds	r0, r2, r3
 8012bdc:	68fb      	ldr	r3, [r7, #12]
 8012bde:	3330      	adds	r3, #48	@ 0x30
 8012be0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8012be4:	4619      	mov	r1, r3
 8012be6:	f7fe f919 	bl	8010e1c <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8012bea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012bec:	025b      	lsls	r3, r3, #9
 8012bee:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 8012bf0:	e050      	b.n	8012c94 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8012bf2:	68fb      	ldr	r3, [r7, #12]
 8012bf4:	6a1b      	ldr	r3, [r3, #32]
 8012bf6:	69ba      	ldr	r2, [r7, #24]
 8012bf8:	429a      	cmp	r2, r3
 8012bfa:	d02e      	beq.n	8012c5a <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8012bfc:	68fb      	ldr	r3, [r7, #12]
 8012bfe:	7d1b      	ldrb	r3, [r3, #20]
 8012c00:	b25b      	sxtb	r3, r3
 8012c02:	2b00      	cmp	r3, #0
 8012c04:	da18      	bge.n	8012c38 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8012c06:	697b      	ldr	r3, [r7, #20]
 8012c08:	7858      	ldrb	r0, [r3, #1]
 8012c0a:	68fb      	ldr	r3, [r7, #12]
 8012c0c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8012c10:	68fb      	ldr	r3, [r7, #12]
 8012c12:	6a1a      	ldr	r2, [r3, #32]
 8012c14:	2301      	movs	r3, #1
 8012c16:	f7fe f841 	bl	8010c9c <disk_write>
 8012c1a:	4603      	mov	r3, r0
 8012c1c:	2b00      	cmp	r3, #0
 8012c1e:	d004      	beq.n	8012c2a <f_read+0x1da>
 8012c20:	68fb      	ldr	r3, [r7, #12]
 8012c22:	2201      	movs	r2, #1
 8012c24:	755a      	strb	r2, [r3, #21]
 8012c26:	2301      	movs	r3, #1
 8012c28:	e04d      	b.n	8012cc6 <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 8012c2a:	68fb      	ldr	r3, [r7, #12]
 8012c2c:	7d1b      	ldrb	r3, [r3, #20]
 8012c2e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8012c32:	b2da      	uxtb	r2, r3
 8012c34:	68fb      	ldr	r3, [r7, #12]
 8012c36:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8012c38:	697b      	ldr	r3, [r7, #20]
 8012c3a:	7858      	ldrb	r0, [r3, #1]
 8012c3c:	68fb      	ldr	r3, [r7, #12]
 8012c3e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8012c42:	2301      	movs	r3, #1
 8012c44:	69ba      	ldr	r2, [r7, #24]
 8012c46:	f7fe f809 	bl	8010c5c <disk_read>
 8012c4a:	4603      	mov	r3, r0
 8012c4c:	2b00      	cmp	r3, #0
 8012c4e:	d004      	beq.n	8012c5a <f_read+0x20a>
 8012c50:	68fb      	ldr	r3, [r7, #12]
 8012c52:	2201      	movs	r2, #1
 8012c54:	755a      	strb	r2, [r3, #21]
 8012c56:	2301      	movs	r3, #1
 8012c58:	e035      	b.n	8012cc6 <f_read+0x276>
			}
#endif
			fp->sect = sect;
 8012c5a:	68fb      	ldr	r3, [r7, #12]
 8012c5c:	69ba      	ldr	r2, [r7, #24]
 8012c5e:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8012c60:	68fb      	ldr	r3, [r7, #12]
 8012c62:	699b      	ldr	r3, [r3, #24]
 8012c64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012c68:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 8012c6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8012c6e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8012c70:	687b      	ldr	r3, [r7, #4]
 8012c72:	429a      	cmp	r2, r3
 8012c74:	d901      	bls.n	8012c7a <f_read+0x22a>
 8012c76:	687b      	ldr	r3, [r7, #4]
 8012c78:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8012c7a:	68fb      	ldr	r3, [r7, #12]
 8012c7c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8012c80:	68fb      	ldr	r3, [r7, #12]
 8012c82:	699b      	ldr	r3, [r3, #24]
 8012c84:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012c88:	4413      	add	r3, r2
 8012c8a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8012c8c:	4619      	mov	r1, r3
 8012c8e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8012c90:	f7fe f8c4 	bl	8010e1c <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8012c94:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012c96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012c98:	4413      	add	r3, r2
 8012c9a:	627b      	str	r3, [r7, #36]	@ 0x24
 8012c9c:	68fb      	ldr	r3, [r7, #12]
 8012c9e:	699a      	ldr	r2, [r3, #24]
 8012ca0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012ca2:	441a      	add	r2, r3
 8012ca4:	68fb      	ldr	r3, [r7, #12]
 8012ca6:	619a      	str	r2, [r3, #24]
 8012ca8:	683b      	ldr	r3, [r7, #0]
 8012caa:	681a      	ldr	r2, [r3, #0]
 8012cac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012cae:	441a      	add	r2, r3
 8012cb0:	683b      	ldr	r3, [r7, #0]
 8012cb2:	601a      	str	r2, [r3, #0]
 8012cb4:	687a      	ldr	r2, [r7, #4]
 8012cb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012cb8:	1ad3      	subs	r3, r2, r3
 8012cba:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8012cbc:	687b      	ldr	r3, [r7, #4]
 8012cbe:	2b00      	cmp	r3, #0
 8012cc0:	f47f af01 	bne.w	8012ac6 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8012cc4:	2300      	movs	r3, #0
}
 8012cc6:	4618      	mov	r0, r3
 8012cc8:	3738      	adds	r7, #56	@ 0x38
 8012cca:	46bd      	mov	sp, r7
 8012ccc:	bd80      	pop	{r7, pc}

08012cce <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8012cce:	b580      	push	{r7, lr}
 8012cd0:	b086      	sub	sp, #24
 8012cd2:	af00      	add	r7, sp, #0
 8012cd4:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8012cd6:	687b      	ldr	r3, [r7, #4]
 8012cd8:	f107 0208 	add.w	r2, r7, #8
 8012cdc:	4611      	mov	r1, r2
 8012cde:	4618      	mov	r0, r3
 8012ce0:	f7ff fc80 	bl	80125e4 <validate>
 8012ce4:	4603      	mov	r3, r0
 8012ce6:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8012ce8:	7dfb      	ldrb	r3, [r7, #23]
 8012cea:	2b00      	cmp	r3, #0
 8012cec:	d168      	bne.n	8012dc0 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8012cee:	687b      	ldr	r3, [r7, #4]
 8012cf0:	7d1b      	ldrb	r3, [r3, #20]
 8012cf2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8012cf6:	2b00      	cmp	r3, #0
 8012cf8:	d062      	beq.n	8012dc0 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8012cfa:	687b      	ldr	r3, [r7, #4]
 8012cfc:	7d1b      	ldrb	r3, [r3, #20]
 8012cfe:	b25b      	sxtb	r3, r3
 8012d00:	2b00      	cmp	r3, #0
 8012d02:	da15      	bge.n	8012d30 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8012d04:	68bb      	ldr	r3, [r7, #8]
 8012d06:	7858      	ldrb	r0, [r3, #1]
 8012d08:	687b      	ldr	r3, [r7, #4]
 8012d0a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8012d0e:	687b      	ldr	r3, [r7, #4]
 8012d10:	6a1a      	ldr	r2, [r3, #32]
 8012d12:	2301      	movs	r3, #1
 8012d14:	f7fd ffc2 	bl	8010c9c <disk_write>
 8012d18:	4603      	mov	r3, r0
 8012d1a:	2b00      	cmp	r3, #0
 8012d1c:	d001      	beq.n	8012d22 <f_sync+0x54>
 8012d1e:	2301      	movs	r3, #1
 8012d20:	e04f      	b.n	8012dc2 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8012d22:	687b      	ldr	r3, [r7, #4]
 8012d24:	7d1b      	ldrb	r3, [r3, #20]
 8012d26:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8012d2a:	b2da      	uxtb	r2, r3
 8012d2c:	687b      	ldr	r3, [r7, #4]
 8012d2e:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8012d30:	f7fd fcc6 	bl	80106c0 <get_fattime>
 8012d34:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8012d36:	68ba      	ldr	r2, [r7, #8]
 8012d38:	687b      	ldr	r3, [r7, #4]
 8012d3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012d3c:	4619      	mov	r1, r3
 8012d3e:	4610      	mov	r0, r2
 8012d40:	f7fe fa9a 	bl	8011278 <move_window>
 8012d44:	4603      	mov	r3, r0
 8012d46:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8012d48:	7dfb      	ldrb	r3, [r7, #23]
 8012d4a:	2b00      	cmp	r3, #0
 8012d4c:	d138      	bne.n	8012dc0 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8012d4e:	687b      	ldr	r3, [r7, #4]
 8012d50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012d52:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8012d54:	68fb      	ldr	r3, [r7, #12]
 8012d56:	330b      	adds	r3, #11
 8012d58:	781a      	ldrb	r2, [r3, #0]
 8012d5a:	68fb      	ldr	r3, [r7, #12]
 8012d5c:	330b      	adds	r3, #11
 8012d5e:	f042 0220 	orr.w	r2, r2, #32
 8012d62:	b2d2      	uxtb	r2, r2
 8012d64:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8012d66:	687b      	ldr	r3, [r7, #4]
 8012d68:	6818      	ldr	r0, [r3, #0]
 8012d6a:	687b      	ldr	r3, [r7, #4]
 8012d6c:	689b      	ldr	r3, [r3, #8]
 8012d6e:	461a      	mov	r2, r3
 8012d70:	68f9      	ldr	r1, [r7, #12]
 8012d72:	f7fe ffa4 	bl	8011cbe <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8012d76:	68fb      	ldr	r3, [r7, #12]
 8012d78:	f103 021c 	add.w	r2, r3, #28
 8012d7c:	687b      	ldr	r3, [r7, #4]
 8012d7e:	68db      	ldr	r3, [r3, #12]
 8012d80:	4619      	mov	r1, r3
 8012d82:	4610      	mov	r0, r2
 8012d84:	f7fe f81e 	bl	8010dc4 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8012d88:	68fb      	ldr	r3, [r7, #12]
 8012d8a:	3316      	adds	r3, #22
 8012d8c:	6939      	ldr	r1, [r7, #16]
 8012d8e:	4618      	mov	r0, r3
 8012d90:	f7fe f818 	bl	8010dc4 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8012d94:	68fb      	ldr	r3, [r7, #12]
 8012d96:	3312      	adds	r3, #18
 8012d98:	2100      	movs	r1, #0
 8012d9a:	4618      	mov	r0, r3
 8012d9c:	f7fd fff7 	bl	8010d8e <st_word>
					fs->wflag = 1;
 8012da0:	68bb      	ldr	r3, [r7, #8]
 8012da2:	2201      	movs	r2, #1
 8012da4:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8012da6:	68bb      	ldr	r3, [r7, #8]
 8012da8:	4618      	mov	r0, r3
 8012daa:	f7fe fa93 	bl	80112d4 <sync_fs>
 8012dae:	4603      	mov	r3, r0
 8012db0:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8012db2:	687b      	ldr	r3, [r7, #4]
 8012db4:	7d1b      	ldrb	r3, [r3, #20]
 8012db6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8012dba:	b2da      	uxtb	r2, r3
 8012dbc:	687b      	ldr	r3, [r7, #4]
 8012dbe:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8012dc0:	7dfb      	ldrb	r3, [r7, #23]
}
 8012dc2:	4618      	mov	r0, r3
 8012dc4:	3718      	adds	r7, #24
 8012dc6:	46bd      	mov	sp, r7
 8012dc8:	bd80      	pop	{r7, pc}

08012dca <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8012dca:	b580      	push	{r7, lr}
 8012dcc:	b084      	sub	sp, #16
 8012dce:	af00      	add	r7, sp, #0
 8012dd0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8012dd2:	6878      	ldr	r0, [r7, #4]
 8012dd4:	f7ff ff7b 	bl	8012cce <f_sync>
 8012dd8:	4603      	mov	r3, r0
 8012dda:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8012ddc:	7bfb      	ldrb	r3, [r7, #15]
 8012dde:	2b00      	cmp	r3, #0
 8012de0:	d118      	bne.n	8012e14 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8012de2:	687b      	ldr	r3, [r7, #4]
 8012de4:	f107 0208 	add.w	r2, r7, #8
 8012de8:	4611      	mov	r1, r2
 8012dea:	4618      	mov	r0, r3
 8012dec:	f7ff fbfa 	bl	80125e4 <validate>
 8012df0:	4603      	mov	r3, r0
 8012df2:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8012df4:	7bfb      	ldrb	r3, [r7, #15]
 8012df6:	2b00      	cmp	r3, #0
 8012df8:	d10c      	bne.n	8012e14 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8012dfa:	687b      	ldr	r3, [r7, #4]
 8012dfc:	691b      	ldr	r3, [r3, #16]
 8012dfe:	4618      	mov	r0, r3
 8012e00:	f7fe f996 	bl	8011130 <dec_lock>
 8012e04:	4603      	mov	r3, r0
 8012e06:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8012e08:	7bfb      	ldrb	r3, [r7, #15]
 8012e0a:	2b00      	cmp	r3, #0
 8012e0c:	d102      	bne.n	8012e14 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8012e0e:	687b      	ldr	r3, [r7, #4]
 8012e10:	2200      	movs	r2, #0
 8012e12:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8012e14:	7bfb      	ldrb	r3, [r7, #15]
}
 8012e16:	4618      	mov	r0, r3
 8012e18:	3710      	adds	r7, #16
 8012e1a:	46bd      	mov	sp, r7
 8012e1c:	bd80      	pop	{r7, pc}
	...

08012e20 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8012e20:	b480      	push	{r7}
 8012e22:	b087      	sub	sp, #28
 8012e24:	af00      	add	r7, sp, #0
 8012e26:	60f8      	str	r0, [r7, #12]
 8012e28:	60b9      	str	r1, [r7, #8]
 8012e2a:	4613      	mov	r3, r2
 8012e2c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8012e2e:	2301      	movs	r3, #1
 8012e30:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8012e32:	2300      	movs	r3, #0
 8012e34:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8012e36:	4b1f      	ldr	r3, [pc, #124]	@ (8012eb4 <FATFS_LinkDriverEx+0x94>)
 8012e38:	7a5b      	ldrb	r3, [r3, #9]
 8012e3a:	b2db      	uxtb	r3, r3
 8012e3c:	2b00      	cmp	r3, #0
 8012e3e:	d131      	bne.n	8012ea4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8012e40:	4b1c      	ldr	r3, [pc, #112]	@ (8012eb4 <FATFS_LinkDriverEx+0x94>)
 8012e42:	7a5b      	ldrb	r3, [r3, #9]
 8012e44:	b2db      	uxtb	r3, r3
 8012e46:	461a      	mov	r2, r3
 8012e48:	4b1a      	ldr	r3, [pc, #104]	@ (8012eb4 <FATFS_LinkDriverEx+0x94>)
 8012e4a:	2100      	movs	r1, #0
 8012e4c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8012e4e:	4b19      	ldr	r3, [pc, #100]	@ (8012eb4 <FATFS_LinkDriverEx+0x94>)
 8012e50:	7a5b      	ldrb	r3, [r3, #9]
 8012e52:	b2db      	uxtb	r3, r3
 8012e54:	4a17      	ldr	r2, [pc, #92]	@ (8012eb4 <FATFS_LinkDriverEx+0x94>)
 8012e56:	009b      	lsls	r3, r3, #2
 8012e58:	4413      	add	r3, r2
 8012e5a:	68fa      	ldr	r2, [r7, #12]
 8012e5c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8012e5e:	4b15      	ldr	r3, [pc, #84]	@ (8012eb4 <FATFS_LinkDriverEx+0x94>)
 8012e60:	7a5b      	ldrb	r3, [r3, #9]
 8012e62:	b2db      	uxtb	r3, r3
 8012e64:	461a      	mov	r2, r3
 8012e66:	4b13      	ldr	r3, [pc, #76]	@ (8012eb4 <FATFS_LinkDriverEx+0x94>)
 8012e68:	4413      	add	r3, r2
 8012e6a:	79fa      	ldrb	r2, [r7, #7]
 8012e6c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8012e6e:	4b11      	ldr	r3, [pc, #68]	@ (8012eb4 <FATFS_LinkDriverEx+0x94>)
 8012e70:	7a5b      	ldrb	r3, [r3, #9]
 8012e72:	b2db      	uxtb	r3, r3
 8012e74:	1c5a      	adds	r2, r3, #1
 8012e76:	b2d1      	uxtb	r1, r2
 8012e78:	4a0e      	ldr	r2, [pc, #56]	@ (8012eb4 <FATFS_LinkDriverEx+0x94>)
 8012e7a:	7251      	strb	r1, [r2, #9]
 8012e7c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8012e7e:	7dbb      	ldrb	r3, [r7, #22]
 8012e80:	3330      	adds	r3, #48	@ 0x30
 8012e82:	b2da      	uxtb	r2, r3
 8012e84:	68bb      	ldr	r3, [r7, #8]
 8012e86:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8012e88:	68bb      	ldr	r3, [r7, #8]
 8012e8a:	3301      	adds	r3, #1
 8012e8c:	223a      	movs	r2, #58	@ 0x3a
 8012e8e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8012e90:	68bb      	ldr	r3, [r7, #8]
 8012e92:	3302      	adds	r3, #2
 8012e94:	222f      	movs	r2, #47	@ 0x2f
 8012e96:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8012e98:	68bb      	ldr	r3, [r7, #8]
 8012e9a:	3303      	adds	r3, #3
 8012e9c:	2200      	movs	r2, #0
 8012e9e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8012ea0:	2300      	movs	r3, #0
 8012ea2:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8012ea4:	7dfb      	ldrb	r3, [r7, #23]
}
 8012ea6:	4618      	mov	r0, r3
 8012ea8:	371c      	adds	r7, #28
 8012eaa:	46bd      	mov	sp, r7
 8012eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012eb0:	4770      	bx	lr
 8012eb2:	bf00      	nop
 8012eb4:	24000d7c 	.word	0x24000d7c

08012eb8 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8012eb8:	b580      	push	{r7, lr}
 8012eba:	b082      	sub	sp, #8
 8012ebc:	af00      	add	r7, sp, #0
 8012ebe:	6078      	str	r0, [r7, #4]
 8012ec0:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8012ec2:	2200      	movs	r2, #0
 8012ec4:	6839      	ldr	r1, [r7, #0]
 8012ec6:	6878      	ldr	r0, [r7, #4]
 8012ec8:	f7ff ffaa 	bl	8012e20 <FATFS_LinkDriverEx>
 8012ecc:	4603      	mov	r3, r0
}
 8012ece:	4618      	mov	r0, r3
 8012ed0:	3708      	adds	r7, #8
 8012ed2:	46bd      	mov	sp, r7
 8012ed4:	bd80      	pop	{r7, pc}

08012ed6 <_ZdlPvj>:
 8012ed6:	f000 b9da 	b.w	801328e <_ZdlPv>

08012eda <_ZdlPvjSt11align_val_t>:
 8012eda:	4611      	mov	r1, r2
 8012edc:	f000 b9d9 	b.w	8013292 <_ZdlPvSt11align_val_t>

08012ee0 <__cxa_guard_acquire>:
 8012ee0:	6802      	ldr	r2, [r0, #0]
 8012ee2:	07d2      	lsls	r2, r2, #31
 8012ee4:	4603      	mov	r3, r0
 8012ee6:	d405      	bmi.n	8012ef4 <__cxa_guard_acquire+0x14>
 8012ee8:	7842      	ldrb	r2, [r0, #1]
 8012eea:	b102      	cbz	r2, 8012eee <__cxa_guard_acquire+0xe>
 8012eec:	deff      	udf	#255	@ 0xff
 8012eee:	2001      	movs	r0, #1
 8012ef0:	7058      	strb	r0, [r3, #1]
 8012ef2:	4770      	bx	lr
 8012ef4:	2000      	movs	r0, #0
 8012ef6:	4770      	bx	lr

08012ef8 <__cxa_guard_release>:
 8012ef8:	2301      	movs	r3, #1
 8012efa:	6003      	str	r3, [r0, #0]
 8012efc:	4770      	bx	lr

08012efe <_Znwj>:
 8012efe:	2801      	cmp	r0, #1
 8012f00:	bf38      	it	cc
 8012f02:	2001      	movcc	r0, #1
 8012f04:	b510      	push	{r4, lr}
 8012f06:	4604      	mov	r4, r0
 8012f08:	4620      	mov	r0, r4
 8012f0a:	f000 f9d5 	bl	80132b8 <malloc>
 8012f0e:	b100      	cbz	r0, 8012f12 <_Znwj+0x14>
 8012f10:	bd10      	pop	{r4, pc}
 8012f12:	f000 f9c1 	bl	8013298 <_ZSt15get_new_handlerv>
 8012f16:	b908      	cbnz	r0, 8012f1c <_Znwj+0x1e>
 8012f18:	f000 f9c6 	bl	80132a8 <abort>
 8012f1c:	4780      	blx	r0
 8012f1e:	e7f3      	b.n	8012f08 <_Znwj+0xa>

08012f20 <_ZnwjSt11align_val_t>:
 8012f20:	b538      	push	{r3, r4, r5, lr}
 8012f22:	4604      	mov	r4, r0
 8012f24:	4608      	mov	r0, r1
 8012f26:	460d      	mov	r5, r1
 8012f28:	f7ed fc16 	bl	8000758 <__popcountsi2>
 8012f2c:	2801      	cmp	r0, #1
 8012f2e:	d001      	beq.n	8012f34 <_ZnwjSt11align_val_t+0x14>
 8012f30:	f000 f9ba 	bl	80132a8 <abort>
 8012f34:	2c01      	cmp	r4, #1
 8012f36:	bf38      	it	cc
 8012f38:	2401      	movcc	r4, #1
 8012f3a:	4621      	mov	r1, r4
 8012f3c:	4628      	mov	r0, r5
 8012f3e:	f000 fa79 	bl	8013434 <memalign>
 8012f42:	b100      	cbz	r0, 8012f46 <_ZnwjSt11align_val_t+0x26>
 8012f44:	bd38      	pop	{r3, r4, r5, pc}
 8012f46:	f000 f9a7 	bl	8013298 <_ZSt15get_new_handlerv>
 8012f4a:	2800      	cmp	r0, #0
 8012f4c:	d0f0      	beq.n	8012f30 <_ZnwjSt11align_val_t+0x10>
 8012f4e:	4780      	blx	r0
 8012f50:	e7f3      	b.n	8012f3a <_ZnwjSt11align_val_t+0x1a>

08012f52 <_ZNSaIcEC1Ev>:
 8012f52:	4770      	bx	lr

08012f54 <_ZNSaIcED1Ev>:
 8012f54:	4770      	bx	lr

08012f56 <_ZSt17__throw_bad_allocv>:
 8012f56:	b508      	push	{r3, lr}
 8012f58:	f000 f9a6 	bl	80132a8 <abort>

08012f5c <_ZSt19__throw_logic_errorPKc>:
 8012f5c:	b508      	push	{r3, lr}
 8012f5e:	f000 f9a3 	bl	80132a8 <abort>

08012f62 <_ZSt20__throw_length_errorPKc>:
 8012f62:	b508      	push	{r3, lr}
 8012f64:	f000 f9a0 	bl	80132a8 <abort>

08012f68 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>:
 8012f68:	b10a      	cbz	r2, 8012f6e <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0+0x6>
 8012f6a:	f000 bdb4 	b.w	8013ad6 <memcpy>
 8012f6e:	4770      	bx	lr

08012f70 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEPc>:
 8012f70:	6001      	str	r1, [r0, #0]
 8012f72:	4770      	bx	lr

08012f74 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>:
 8012f74:	6800      	ldr	r0, [r0, #0]
 8012f76:	4770      	bx	lr

08012f78 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_local_dataEv>:
 8012f78:	3008      	adds	r0, #8
 8012f7a:	4770      	bx	lr

08012f7c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_capacityEj>:
 8012f7c:	6081      	str	r1, [r0, #8]
 8012f7e:	4770      	bx	lr

08012f80 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_set_lengthEj>:
 8012f80:	6803      	ldr	r3, [r0, #0]
 8012f82:	6041      	str	r1, [r0, #4]
 8012f84:	2200      	movs	r2, #0
 8012f86:	545a      	strb	r2, [r3, r1]
 8012f88:	4770      	bx	lr

08012f8a <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>:
 8012f8a:	f850 3b08 	ldr.w	r3, [r0], #8
 8012f8e:	1a1b      	subs	r3, r3, r0
 8012f90:	4258      	negs	r0, r3
 8012f92:	4158      	adcs	r0, r3
 8012f94:	4770      	bx	lr
	...

08012f98 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
 8012f98:	b508      	push	{r3, lr}
 8012f9a:	680b      	ldr	r3, [r1, #0]
 8012f9c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8012fa0:	d302      	bcc.n	8012fa8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x10>
 8012fa2:	480d      	ldr	r0, [pc, #52]	@ (8012fd8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x40>)
 8012fa4:	f7ff ffdd 	bl	8012f62 <_ZSt20__throw_length_errorPKc>
 8012fa8:	4293      	cmp	r3, r2
 8012faa:	d90b      	bls.n	8012fc4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 8012fac:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
 8012fb0:	ea4f 0042 	mov.w	r0, r2, lsl #1
 8012fb4:	d206      	bcs.n	8012fc4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 8012fb6:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8012fba:	bf2a      	itet	cs
 8012fbc:	f06f 4340 	mvncs.w	r3, #3221225472	@ 0xc0000000
 8012fc0:	6008      	strcc	r0, [r1, #0]
 8012fc2:	600b      	strcs	r3, [r1, #0]
 8012fc4:	6808      	ldr	r0, [r1, #0]
 8012fc6:	3001      	adds	r0, #1
 8012fc8:	d501      	bpl.n	8012fce <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x36>
 8012fca:	f7ff ffc4 	bl	8012f56 <_ZSt17__throw_bad_allocv>
 8012fce:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8012fd2:	f7ff bf94 	b.w	8012efe <_Znwj>
 8012fd6:	bf00      	nop
 8012fd8:	08014c6c 	.word	0x08014c6c

08012fdc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
 8012fdc:	b510      	push	{r4, lr}
 8012fde:	4604      	mov	r4, r0
 8012fe0:	f7ff ffd3 	bl	8012f8a <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>
 8012fe4:	b920      	cbnz	r0, 8012ff0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0x14>
 8012fe6:	6820      	ldr	r0, [r4, #0]
 8012fe8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012fec:	f000 b94f 	b.w	801328e <_ZdlPv>
 8012ff0:	bd10      	pop	{r4, pc}

08012ff2 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>:
 8012ff2:	6840      	ldr	r0, [r0, #4]
 8012ff4:	f101 4180 	add.w	r1, r1, #1073741824	@ 0x40000000
 8012ff8:	3901      	subs	r1, #1
 8012ffa:	1a09      	subs	r1, r1, r0
 8012ffc:	4291      	cmp	r1, r2
 8012ffe:	b508      	push	{r3, lr}
 8013000:	d202      	bcs.n	8013008 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc+0x16>
 8013002:	4618      	mov	r0, r3
 8013004:	f7ff ffad 	bl	8012f62 <_ZSt20__throw_length_errorPKc>
 8013008:	bd08      	pop	{r3, pc}

0801300a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>:
 801300a:	2a01      	cmp	r2, #1
 801300c:	b410      	push	{r4}
 801300e:	d104      	bne.n	801301a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0x10>
 8013010:	780a      	ldrb	r2, [r1, #0]
 8013012:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013016:	7002      	strb	r2, [r0, #0]
 8013018:	4770      	bx	lr
 801301a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801301e:	f7ff bfa3 	b.w	8012f68 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>

08013022 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>:
 8013022:	2a01      	cmp	r2, #1
 8013024:	b430      	push	{r4, r5}
 8013026:	d103      	bne.n	8013030 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj+0xe>
 8013028:	780b      	ldrb	r3, [r1, #0]
 801302a:	7003      	strb	r3, [r0, #0]
 801302c:	bc30      	pop	{r4, r5}
 801302e:	4770      	bx	lr
 8013030:	2a00      	cmp	r2, #0
 8013032:	d0fb      	beq.n	801302c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj+0xa>
 8013034:	bc30      	pop	{r4, r5}
 8013036:	f000 bc65 	b.w	8013904 <memmove>

0801303a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_S_assignEPcjc>:
 801303a:	460b      	mov	r3, r1
 801303c:	2b01      	cmp	r3, #1
 801303e:	b410      	push	{r4}
 8013040:	4611      	mov	r1, r2
 8013042:	4604      	mov	r4, r0
 8013044:	d103      	bne.n	801304e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_S_assignEPcjc+0x14>
 8013046:	7022      	strb	r2, [r4, #0]
 8013048:	f85d 4b04 	ldr.w	r4, [sp], #4
 801304c:	4770      	bx	lr
 801304e:	2b00      	cmp	r3, #0
 8013050:	d0fa      	beq.n	8013048 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_S_assignEPcjc+0xe>
 8013052:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013056:	461a      	mov	r2, r3
 8013058:	f000 bc6e 	b.w	8013938 <memset>

0801305c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>:
 801305c:	b508      	push	{r3, lr}
 801305e:	1a52      	subs	r2, r2, r1
 8013060:	f7ff ffd3 	bl	801300a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8013064:	bd08      	pop	{r3, pc}

08013066 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>:
 8013066:	b508      	push	{r3, lr}
 8013068:	1a52      	subs	r2, r2, r1
 801306a:	f7ff ffce 	bl	801300a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 801306e:	bd08      	pop	{r3, pc}

08013070 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>:
 8013070:	f100 0208 	add.w	r2, r0, #8
 8013074:	6002      	str	r2, [r0, #0]
 8013076:	2200      	movs	r2, #0
 8013078:	6042      	str	r2, [r0, #4]
 801307a:	7202      	strb	r2, [r0, #8]
 801307c:	4770      	bx	lr

0801307e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>:
 801307e:	b510      	push	{r4, lr}
 8013080:	4604      	mov	r4, r0
 8013082:	f7ff ffab 	bl	8012fdc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 8013086:	4620      	mov	r0, r4
 8013088:	bd10      	pop	{r4, pc}

0801308a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>:
 801308a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801308c:	460c      	mov	r4, r1
 801308e:	4605      	mov	r5, r0
 8013090:	f7ff ff7b 	bl	8012f8a <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>
 8013094:	4606      	mov	r6, r0
 8013096:	4620      	mov	r0, r4
 8013098:	f7ff ff77 	bl	8012f8a <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>
 801309c:	b190      	cbz	r0, 80130c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x3a>
 801309e:	42a5      	cmp	r5, r4
 80130a0:	d00a      	beq.n	80130b8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x2e>
 80130a2:	6862      	ldr	r2, [r4, #4]
 80130a4:	b11a      	cbz	r2, 80130ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x24>
 80130a6:	6821      	ldr	r1, [r4, #0]
 80130a8:	6828      	ldr	r0, [r5, #0]
 80130aa:	f7ff ffae 	bl	801300a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 80130ae:	6863      	ldr	r3, [r4, #4]
 80130b0:	682a      	ldr	r2, [r5, #0]
 80130b2:	606b      	str	r3, [r5, #4]
 80130b4:	2100      	movs	r1, #0
 80130b6:	54d1      	strb	r1, [r2, r3]
 80130b8:	6822      	ldr	r2, [r4, #0]
 80130ba:	2300      	movs	r3, #0
 80130bc:	6063      	str	r3, [r4, #4]
 80130be:	7013      	strb	r3, [r2, #0]
 80130c0:	4628      	mov	r0, r5
 80130c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80130c4:	b90e      	cbnz	r6, 80130ca <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x40>
 80130c6:	6828      	ldr	r0, [r5, #0]
 80130c8:	68af      	ldr	r7, [r5, #8]
 80130ca:	6823      	ldr	r3, [r4, #0]
 80130cc:	602b      	str	r3, [r5, #0]
 80130ce:	6863      	ldr	r3, [r4, #4]
 80130d0:	606b      	str	r3, [r5, #4]
 80130d2:	68a3      	ldr	r3, [r4, #8]
 80130d4:	60ab      	str	r3, [r5, #8]
 80130d6:	b110      	cbz	r0, 80130de <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x54>
 80130d8:	6020      	str	r0, [r4, #0]
 80130da:	60a7      	str	r7, [r4, #8]
 80130dc:	e7ec      	b.n	80130b8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x2e>
 80130de:	f104 0308 	add.w	r3, r4, #8
 80130e2:	6023      	str	r3, [r4, #0]
 80130e4:	e7e8      	b.n	80130b8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x2e>

080130e6 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv>:
 80130e6:	b510      	push	{r4, lr}
 80130e8:	4604      	mov	r4, r0
 80130ea:	f7ff ff4e 	bl	8012f8a <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>
 80130ee:	b908      	cbnz	r0, 80130f4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv+0xe>
 80130f0:	68a0      	ldr	r0, [r4, #8]
 80130f2:	bd10      	pop	{r4, pc}
 80130f4:	200f      	movs	r0, #15
 80130f6:	e7fc      	b.n	80130f2 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv+0xc>

080130f8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>:
 80130f8:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 80130fc:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 80130fe:	461f      	mov	r7, r3
 8013100:	6843      	ldr	r3, [r0, #4]
 8013102:	eb01 0802 	add.w	r8, r1, r2
 8013106:	1ab2      	subs	r2, r6, r2
 8013108:	441a      	add	r2, r3
 801310a:	4604      	mov	r4, r0
 801310c:	460d      	mov	r5, r1
 801310e:	eba3 0908 	sub.w	r9, r3, r8
 8013112:	9201      	str	r2, [sp, #4]
 8013114:	f7ff ffe7 	bl	80130e6 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv>
 8013118:	a901      	add	r1, sp, #4
 801311a:	4602      	mov	r2, r0
 801311c:	4620      	mov	r0, r4
 801311e:	f7ff ff3b 	bl	8012f98 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8013122:	4682      	mov	sl, r0
 8013124:	b11d      	cbz	r5, 801312e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x36>
 8013126:	6821      	ldr	r1, [r4, #0]
 8013128:	462a      	mov	r2, r5
 801312a:	f7ff ff6e 	bl	801300a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 801312e:	b137      	cbz	r7, 801313e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x46>
 8013130:	b12e      	cbz	r6, 801313e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x46>
 8013132:	4632      	mov	r2, r6
 8013134:	4639      	mov	r1, r7
 8013136:	eb0a 0005 	add.w	r0, sl, r5
 801313a:	f7ff ff66 	bl	801300a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 801313e:	f1b9 0f00 	cmp.w	r9, #0
 8013142:	d007      	beq.n	8013154 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x5c>
 8013144:	6821      	ldr	r1, [r4, #0]
 8013146:	4435      	add	r5, r6
 8013148:	464a      	mov	r2, r9
 801314a:	4441      	add	r1, r8
 801314c:	eb0a 0005 	add.w	r0, sl, r5
 8013150:	f7ff ff5b 	bl	801300a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8013154:	4620      	mov	r0, r4
 8013156:	f7ff ff41 	bl	8012fdc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 801315a:	9b01      	ldr	r3, [sp, #4]
 801315c:	f8c4 a000 	str.w	sl, [r4]
 8013160:	60a3      	str	r3, [r4, #8]
 8013162:	b002      	add	sp, #8
 8013164:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08013168 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7reserveEj>:
 8013168:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801316a:	4604      	mov	r4, r0
 801316c:	9101      	str	r1, [sp, #4]
 801316e:	f7ff ffba 	bl	80130e6 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv>
 8013172:	9b01      	ldr	r3, [sp, #4]
 8013174:	4283      	cmp	r3, r0
 8013176:	4602      	mov	r2, r0
 8013178:	d90f      	bls.n	801319a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7reserveEj+0x32>
 801317a:	a901      	add	r1, sp, #4
 801317c:	4620      	mov	r0, r4
 801317e:	f7ff ff0b 	bl	8012f98 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8013182:	6862      	ldr	r2, [r4, #4]
 8013184:	6821      	ldr	r1, [r4, #0]
 8013186:	3201      	adds	r2, #1
 8013188:	4605      	mov	r5, r0
 801318a:	f7ff ff3e 	bl	801300a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 801318e:	4620      	mov	r0, r4
 8013190:	f7ff ff24 	bl	8012fdc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 8013194:	9b01      	ldr	r3, [sp, #4]
 8013196:	6025      	str	r5, [r4, #0]
 8013198:	60a3      	str	r3, [r4, #8]
 801319a:	b003      	add	sp, #12
 801319c:	bd30      	pop	{r4, r5, pc}

0801319e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>:
 801319e:	6800      	ldr	r0, [r0, #0]
 80131a0:	4408      	add	r0, r1
 80131a2:	4770      	bx	lr

080131a4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc>:
 80131a4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80131a8:	4616      	mov	r6, r2
 80131aa:	461d      	mov	r5, r3
 80131ac:	4604      	mov	r4, r0
 80131ae:	4b1b      	ldr	r3, [pc, #108]	@ (801321c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc+0x78>)
 80131b0:	462a      	mov	r2, r5
 80131b2:	460f      	mov	r7, r1
 80131b4:	4631      	mov	r1, r6
 80131b6:	f7ff ff1c 	bl	8012ff2 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>
 80131ba:	4620      	mov	r0, r4
 80131bc:	f7ff ff93 	bl	80130e6 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv>
 80131c0:	f8d4 9004 	ldr.w	r9, [r4, #4]
 80131c4:	eba5 0806 	sub.w	r8, r5, r6
 80131c8:	44c8      	add	r8, r9
 80131ca:	4540      	cmp	r0, r8
 80131cc:	d31d      	bcc.n	801320a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc+0x66>
 80131ce:	19f3      	adds	r3, r6, r7
 80131d0:	ebb9 0203 	subs.w	r2, r9, r3
 80131d4:	d007      	beq.n	80131e6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc+0x42>
 80131d6:	42ae      	cmp	r6, r5
 80131d8:	d005      	beq.n	80131e6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc+0x42>
 80131da:	6820      	ldr	r0, [r4, #0]
 80131dc:	4438      	add	r0, r7
 80131de:	1981      	adds	r1, r0, r6
 80131e0:	4428      	add	r0, r5
 80131e2:	f7ff ff1e 	bl	8013022 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 80131e6:	b135      	cbz	r5, 80131f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc+0x52>
 80131e8:	6820      	ldr	r0, [r4, #0]
 80131ea:	f89d 2028 	ldrb.w	r2, [sp, #40]	@ 0x28
 80131ee:	4629      	mov	r1, r5
 80131f0:	4438      	add	r0, r7
 80131f2:	f7ff ff22 	bl	801303a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_S_assignEPcjc>
 80131f6:	6823      	ldr	r3, [r4, #0]
 80131f8:	f8c4 8004 	str.w	r8, [r4, #4]
 80131fc:	2200      	movs	r2, #0
 80131fe:	4620      	mov	r0, r4
 8013200:	f803 2008 	strb.w	r2, [r3, r8]
 8013204:	b003      	add	sp, #12
 8013206:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801320a:	9500      	str	r5, [sp, #0]
 801320c:	2300      	movs	r3, #0
 801320e:	4632      	mov	r2, r6
 8013210:	4639      	mov	r1, r7
 8013212:	4620      	mov	r0, r4
 8013214:	f7ff ff70 	bl	80130f8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>
 8013218:	e7e5      	b.n	80131e6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc+0x42>
 801321a:	bf00      	nop
 801321c:	08014c84 	.word	0x08014c84

08013220 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEjc>:
 8013220:	b507      	push	{r0, r1, r2, lr}
 8013222:	9200      	str	r2, [sp, #0]
 8013224:	460b      	mov	r3, r1
 8013226:	2200      	movs	r2, #0
 8013228:	6841      	ldr	r1, [r0, #4]
 801322a:	f7ff ffbb 	bl	80131a4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc>
 801322e:	b003      	add	sp, #12
 8013230:	f85d fb04 	ldr.w	pc, [sp], #4

08013234 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>:
 8013234:	6800      	ldr	r0, [r0, #0]
 8013236:	4770      	bx	lr

08013238 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderC1EPcRKS3_>:
 8013238:	6001      	str	r1, [r0, #0]
 801323a:	4770      	bx	lr

0801323c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>:
 801323c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801323e:	1a53      	subs	r3, r2, r1
 8013240:	2b0f      	cmp	r3, #15
 8013242:	4604      	mov	r4, r0
 8013244:	460d      	mov	r5, r1
 8013246:	4616      	mov	r6, r2
 8013248:	9301      	str	r3, [sp, #4]
 801324a:	d906      	bls.n	801325a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x1e>
 801324c:	2200      	movs	r2, #0
 801324e:	a901      	add	r1, sp, #4
 8013250:	f7ff fea2 	bl	8012f98 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8013254:	9b01      	ldr	r3, [sp, #4]
 8013256:	6020      	str	r0, [r4, #0]
 8013258:	60a3      	str	r3, [r4, #8]
 801325a:	4632      	mov	r2, r6
 801325c:	4629      	mov	r1, r5
 801325e:	6820      	ldr	r0, [r4, #0]
 8013260:	f7ff fefc 	bl	801305c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>
 8013264:	9b01      	ldr	r3, [sp, #4]
 8013266:	6822      	ldr	r2, [r4, #0]
 8013268:	6063      	str	r3, [r4, #4]
 801326a:	2100      	movs	r1, #0
 801326c:	54d1      	strb	r1, [r2, r3]
 801326e:	b002      	add	sp, #8
 8013270:	bd70      	pop	{r4, r5, r6, pc}

08013272 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>:
 8013272:	f100 0208 	add.w	r2, r0, #8
 8013276:	b510      	push	{r4, lr}
 8013278:	6002      	str	r2, [r0, #0]
 801327a:	e9d1 1200 	ldrd	r1, r2, [r1]
 801327e:	4604      	mov	r4, r0
 8013280:	f04f 0300 	mov.w	r3, #0
 8013284:	440a      	add	r2, r1
 8013286:	f7ff ffd9 	bl	801323c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>
 801328a:	4620      	mov	r0, r4
 801328c:	bd10      	pop	{r4, pc}

0801328e <_ZdlPv>:
 801328e:	f000 b81b 	b.w	80132c8 <free>

08013292 <_ZdlPvSt11align_val_t>:
 8013292:	f000 b819 	b.w	80132c8 <free>
	...

08013298 <_ZSt15get_new_handlerv>:
 8013298:	4b02      	ldr	r3, [pc, #8]	@ (80132a4 <_ZSt15get_new_handlerv+0xc>)
 801329a:	6818      	ldr	r0, [r3, #0]
 801329c:	f3bf 8f5b 	dmb	ish
 80132a0:	4770      	bx	lr
 80132a2:	bf00      	nop
 80132a4:	24000d88 	.word	0x24000d88

080132a8 <abort>:
 80132a8:	b508      	push	{r3, lr}
 80132aa:	2006      	movs	r0, #6
 80132ac:	f000 fb74 	bl	8013998 <raise>
 80132b0:	2001      	movs	r0, #1
 80132b2:	f7f1 fc11 	bl	8004ad8 <_exit>
	...

080132b8 <malloc>:
 80132b8:	4b02      	ldr	r3, [pc, #8]	@ (80132c4 <malloc+0xc>)
 80132ba:	4601      	mov	r1, r0
 80132bc:	6818      	ldr	r0, [r3, #0]
 80132be:	f000 b82d 	b.w	801331c <_malloc_r>
 80132c2:	bf00      	nop
 80132c4:	24000074 	.word	0x24000074

080132c8 <free>:
 80132c8:	4b02      	ldr	r3, [pc, #8]	@ (80132d4 <free+0xc>)
 80132ca:	4601      	mov	r1, r0
 80132cc:	6818      	ldr	r0, [r3, #0]
 80132ce:	f000 bc11 	b.w	8013af4 <_free_r>
 80132d2:	bf00      	nop
 80132d4:	24000074 	.word	0x24000074

080132d8 <sbrk_aligned>:
 80132d8:	b570      	push	{r4, r5, r6, lr}
 80132da:	4e0f      	ldr	r6, [pc, #60]	@ (8013318 <sbrk_aligned+0x40>)
 80132dc:	460c      	mov	r4, r1
 80132de:	6831      	ldr	r1, [r6, #0]
 80132e0:	4605      	mov	r5, r0
 80132e2:	b911      	cbnz	r1, 80132ea <sbrk_aligned+0x12>
 80132e4:	f000 fba8 	bl	8013a38 <_sbrk_r>
 80132e8:	6030      	str	r0, [r6, #0]
 80132ea:	4621      	mov	r1, r4
 80132ec:	4628      	mov	r0, r5
 80132ee:	f000 fba3 	bl	8013a38 <_sbrk_r>
 80132f2:	1c43      	adds	r3, r0, #1
 80132f4:	d103      	bne.n	80132fe <sbrk_aligned+0x26>
 80132f6:	f04f 34ff 	mov.w	r4, #4294967295
 80132fa:	4620      	mov	r0, r4
 80132fc:	bd70      	pop	{r4, r5, r6, pc}
 80132fe:	1cc4      	adds	r4, r0, #3
 8013300:	f024 0403 	bic.w	r4, r4, #3
 8013304:	42a0      	cmp	r0, r4
 8013306:	d0f8      	beq.n	80132fa <sbrk_aligned+0x22>
 8013308:	1a21      	subs	r1, r4, r0
 801330a:	4628      	mov	r0, r5
 801330c:	f000 fb94 	bl	8013a38 <_sbrk_r>
 8013310:	3001      	adds	r0, #1
 8013312:	d1f2      	bne.n	80132fa <sbrk_aligned+0x22>
 8013314:	e7ef      	b.n	80132f6 <sbrk_aligned+0x1e>
 8013316:	bf00      	nop
 8013318:	24000d8c 	.word	0x24000d8c

0801331c <_malloc_r>:
 801331c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013320:	1ccd      	adds	r5, r1, #3
 8013322:	f025 0503 	bic.w	r5, r5, #3
 8013326:	3508      	adds	r5, #8
 8013328:	2d0c      	cmp	r5, #12
 801332a:	bf38      	it	cc
 801332c:	250c      	movcc	r5, #12
 801332e:	2d00      	cmp	r5, #0
 8013330:	4606      	mov	r6, r0
 8013332:	db01      	blt.n	8013338 <_malloc_r+0x1c>
 8013334:	42a9      	cmp	r1, r5
 8013336:	d904      	bls.n	8013342 <_malloc_r+0x26>
 8013338:	230c      	movs	r3, #12
 801333a:	6033      	str	r3, [r6, #0]
 801333c:	2000      	movs	r0, #0
 801333e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013342:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8013418 <_malloc_r+0xfc>
 8013346:	f000 f869 	bl	801341c <__malloc_lock>
 801334a:	f8d8 3000 	ldr.w	r3, [r8]
 801334e:	461c      	mov	r4, r3
 8013350:	bb44      	cbnz	r4, 80133a4 <_malloc_r+0x88>
 8013352:	4629      	mov	r1, r5
 8013354:	4630      	mov	r0, r6
 8013356:	f7ff ffbf 	bl	80132d8 <sbrk_aligned>
 801335a:	1c43      	adds	r3, r0, #1
 801335c:	4604      	mov	r4, r0
 801335e:	d158      	bne.n	8013412 <_malloc_r+0xf6>
 8013360:	f8d8 4000 	ldr.w	r4, [r8]
 8013364:	4627      	mov	r7, r4
 8013366:	2f00      	cmp	r7, #0
 8013368:	d143      	bne.n	80133f2 <_malloc_r+0xd6>
 801336a:	2c00      	cmp	r4, #0
 801336c:	d04b      	beq.n	8013406 <_malloc_r+0xea>
 801336e:	6823      	ldr	r3, [r4, #0]
 8013370:	4639      	mov	r1, r7
 8013372:	4630      	mov	r0, r6
 8013374:	eb04 0903 	add.w	r9, r4, r3
 8013378:	f000 fb5e 	bl	8013a38 <_sbrk_r>
 801337c:	4581      	cmp	r9, r0
 801337e:	d142      	bne.n	8013406 <_malloc_r+0xea>
 8013380:	6821      	ldr	r1, [r4, #0]
 8013382:	1a6d      	subs	r5, r5, r1
 8013384:	4629      	mov	r1, r5
 8013386:	4630      	mov	r0, r6
 8013388:	f7ff ffa6 	bl	80132d8 <sbrk_aligned>
 801338c:	3001      	adds	r0, #1
 801338e:	d03a      	beq.n	8013406 <_malloc_r+0xea>
 8013390:	6823      	ldr	r3, [r4, #0]
 8013392:	442b      	add	r3, r5
 8013394:	6023      	str	r3, [r4, #0]
 8013396:	f8d8 3000 	ldr.w	r3, [r8]
 801339a:	685a      	ldr	r2, [r3, #4]
 801339c:	bb62      	cbnz	r2, 80133f8 <_malloc_r+0xdc>
 801339e:	f8c8 7000 	str.w	r7, [r8]
 80133a2:	e00f      	b.n	80133c4 <_malloc_r+0xa8>
 80133a4:	6822      	ldr	r2, [r4, #0]
 80133a6:	1b52      	subs	r2, r2, r5
 80133a8:	d420      	bmi.n	80133ec <_malloc_r+0xd0>
 80133aa:	2a0b      	cmp	r2, #11
 80133ac:	d917      	bls.n	80133de <_malloc_r+0xc2>
 80133ae:	1961      	adds	r1, r4, r5
 80133b0:	42a3      	cmp	r3, r4
 80133b2:	6025      	str	r5, [r4, #0]
 80133b4:	bf18      	it	ne
 80133b6:	6059      	strne	r1, [r3, #4]
 80133b8:	6863      	ldr	r3, [r4, #4]
 80133ba:	bf08      	it	eq
 80133bc:	f8c8 1000 	streq.w	r1, [r8]
 80133c0:	5162      	str	r2, [r4, r5]
 80133c2:	604b      	str	r3, [r1, #4]
 80133c4:	4630      	mov	r0, r6
 80133c6:	f000 f82f 	bl	8013428 <__malloc_unlock>
 80133ca:	f104 000b 	add.w	r0, r4, #11
 80133ce:	1d23      	adds	r3, r4, #4
 80133d0:	f020 0007 	bic.w	r0, r0, #7
 80133d4:	1ac2      	subs	r2, r0, r3
 80133d6:	bf1c      	itt	ne
 80133d8:	1a1b      	subne	r3, r3, r0
 80133da:	50a3      	strne	r3, [r4, r2]
 80133dc:	e7af      	b.n	801333e <_malloc_r+0x22>
 80133de:	6862      	ldr	r2, [r4, #4]
 80133e0:	42a3      	cmp	r3, r4
 80133e2:	bf0c      	ite	eq
 80133e4:	f8c8 2000 	streq.w	r2, [r8]
 80133e8:	605a      	strne	r2, [r3, #4]
 80133ea:	e7eb      	b.n	80133c4 <_malloc_r+0xa8>
 80133ec:	4623      	mov	r3, r4
 80133ee:	6864      	ldr	r4, [r4, #4]
 80133f0:	e7ae      	b.n	8013350 <_malloc_r+0x34>
 80133f2:	463c      	mov	r4, r7
 80133f4:	687f      	ldr	r7, [r7, #4]
 80133f6:	e7b6      	b.n	8013366 <_malloc_r+0x4a>
 80133f8:	461a      	mov	r2, r3
 80133fa:	685b      	ldr	r3, [r3, #4]
 80133fc:	42a3      	cmp	r3, r4
 80133fe:	d1fb      	bne.n	80133f8 <_malloc_r+0xdc>
 8013400:	2300      	movs	r3, #0
 8013402:	6053      	str	r3, [r2, #4]
 8013404:	e7de      	b.n	80133c4 <_malloc_r+0xa8>
 8013406:	230c      	movs	r3, #12
 8013408:	6033      	str	r3, [r6, #0]
 801340a:	4630      	mov	r0, r6
 801340c:	f000 f80c 	bl	8013428 <__malloc_unlock>
 8013410:	e794      	b.n	801333c <_malloc_r+0x20>
 8013412:	6005      	str	r5, [r0, #0]
 8013414:	e7d6      	b.n	80133c4 <_malloc_r+0xa8>
 8013416:	bf00      	nop
 8013418:	24000d90 	.word	0x24000d90

0801341c <__malloc_lock>:
 801341c:	4801      	ldr	r0, [pc, #4]	@ (8013424 <__malloc_lock+0x8>)
 801341e:	f000 bb58 	b.w	8013ad2 <__retarget_lock_acquire_recursive>
 8013422:	bf00      	nop
 8013424:	24000ed4 	.word	0x24000ed4

08013428 <__malloc_unlock>:
 8013428:	4801      	ldr	r0, [pc, #4]	@ (8013430 <__malloc_unlock+0x8>)
 801342a:	f000 bb53 	b.w	8013ad4 <__retarget_lock_release_recursive>
 801342e:	bf00      	nop
 8013430:	24000ed4 	.word	0x24000ed4

08013434 <memalign>:
 8013434:	4b02      	ldr	r3, [pc, #8]	@ (8013440 <memalign+0xc>)
 8013436:	460a      	mov	r2, r1
 8013438:	4601      	mov	r1, r0
 801343a:	6818      	ldr	r0, [r3, #0]
 801343c:	f000 b802 	b.w	8013444 <_memalign_r>
 8013440:	24000074 	.word	0x24000074

08013444 <_memalign_r>:
 8013444:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013446:	1e4b      	subs	r3, r1, #1
 8013448:	420b      	tst	r3, r1
 801344a:	4606      	mov	r6, r0
 801344c:	460d      	mov	r5, r1
 801344e:	d106      	bne.n	801345e <_memalign_r+0x1a>
 8013450:	2908      	cmp	r1, #8
 8013452:	bf38      	it	cc
 8013454:	2508      	movcc	r5, #8
 8013456:	1d53      	adds	r3, r2, #5
 8013458:	d904      	bls.n	8013464 <_memalign_r+0x20>
 801345a:	230c      	movs	r3, #12
 801345c:	6033      	str	r3, [r6, #0]
 801345e:	2500      	movs	r5, #0
 8013460:	4628      	mov	r0, r5
 8013462:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013464:	2a04      	cmp	r2, #4
 8013466:	bf38      	it	cc
 8013468:	2204      	movcc	r2, #4
 801346a:	1cd4      	adds	r4, r2, #3
 801346c:	f024 0403 	bic.w	r4, r4, #3
 8013470:	f1c5 0307 	rsb	r3, r5, #7
 8013474:	42a3      	cmp	r3, r4
 8013476:	d3f0      	bcc.n	801345a <_memalign_r+0x16>
 8013478:	f1a5 0108 	sub.w	r1, r5, #8
 801347c:	4421      	add	r1, r4
 801347e:	f7ff ff4d 	bl	801331c <_malloc_r>
 8013482:	2800      	cmp	r0, #0
 8013484:	d0eb      	beq.n	801345e <_memalign_r+0x1a>
 8013486:	f850 2c04 	ldr.w	r2, [r0, #-4]
 801348a:	1f03      	subs	r3, r0, #4
 801348c:	2a00      	cmp	r2, #0
 801348e:	bfb8      	it	lt
 8013490:	189b      	addlt	r3, r3, r2
 8013492:	1cea      	adds	r2, r5, #3
 8013494:	441a      	add	r2, r3
 8013496:	426d      	negs	r5, r5
 8013498:	4015      	ands	r5, r2
 801349a:	1d19      	adds	r1, r3, #4
 801349c:	1a6a      	subs	r2, r5, r1
 801349e:	d00b      	beq.n	80134b8 <_memalign_r+0x74>
 80134a0:	2a0b      	cmp	r2, #11
 80134a2:	eb03 0702 	add.w	r7, r3, r2
 80134a6:	d918      	bls.n	80134da <_memalign_r+0x96>
 80134a8:	6818      	ldr	r0, [r3, #0]
 80134aa:	1a80      	subs	r0, r0, r2
 80134ac:	5098      	str	r0, [r3, r2]
 80134ae:	601a      	str	r2, [r3, #0]
 80134b0:	4630      	mov	r0, r6
 80134b2:	f000 fb1f 	bl	8013af4 <_free_r>
 80134b6:	463b      	mov	r3, r7
 80134b8:	681a      	ldr	r2, [r3, #0]
 80134ba:	f104 010c 	add.w	r1, r4, #12
 80134be:	1898      	adds	r0, r3, r2
 80134c0:	4429      	add	r1, r5
 80134c2:	4288      	cmp	r0, r1
 80134c4:	d9cc      	bls.n	8013460 <_memalign_r+0x1c>
 80134c6:	1929      	adds	r1, r5, r4
 80134c8:	1ac8      	subs	r0, r1, r3
 80134ca:	1a12      	subs	r2, r2, r0
 80134cc:	6018      	str	r0, [r3, #0]
 80134ce:	3104      	adds	r1, #4
 80134d0:	512a      	str	r2, [r5, r4]
 80134d2:	4630      	mov	r0, r6
 80134d4:	f000 fb0e 	bl	8013af4 <_free_r>
 80134d8:	e7c2      	b.n	8013460 <_memalign_r+0x1c>
 80134da:	4251      	negs	r1, r2
 80134dc:	5099      	str	r1, [r3, r2]
 80134de:	e7eb      	b.n	80134b8 <_memalign_r+0x74>

080134e0 <std>:
 80134e0:	2300      	movs	r3, #0
 80134e2:	b510      	push	{r4, lr}
 80134e4:	4604      	mov	r4, r0
 80134e6:	e9c0 3300 	strd	r3, r3, [r0]
 80134ea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80134ee:	6083      	str	r3, [r0, #8]
 80134f0:	8181      	strh	r1, [r0, #12]
 80134f2:	6643      	str	r3, [r0, #100]	@ 0x64
 80134f4:	81c2      	strh	r2, [r0, #14]
 80134f6:	6183      	str	r3, [r0, #24]
 80134f8:	4619      	mov	r1, r3
 80134fa:	2208      	movs	r2, #8
 80134fc:	305c      	adds	r0, #92	@ 0x5c
 80134fe:	f000 fa1b 	bl	8013938 <memset>
 8013502:	4b0d      	ldr	r3, [pc, #52]	@ (8013538 <std+0x58>)
 8013504:	6263      	str	r3, [r4, #36]	@ 0x24
 8013506:	4b0d      	ldr	r3, [pc, #52]	@ (801353c <std+0x5c>)
 8013508:	62a3      	str	r3, [r4, #40]	@ 0x28
 801350a:	4b0d      	ldr	r3, [pc, #52]	@ (8013540 <std+0x60>)
 801350c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801350e:	4b0d      	ldr	r3, [pc, #52]	@ (8013544 <std+0x64>)
 8013510:	6323      	str	r3, [r4, #48]	@ 0x30
 8013512:	4b0d      	ldr	r3, [pc, #52]	@ (8013548 <std+0x68>)
 8013514:	6224      	str	r4, [r4, #32]
 8013516:	429c      	cmp	r4, r3
 8013518:	d006      	beq.n	8013528 <std+0x48>
 801351a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801351e:	4294      	cmp	r4, r2
 8013520:	d002      	beq.n	8013528 <std+0x48>
 8013522:	33d0      	adds	r3, #208	@ 0xd0
 8013524:	429c      	cmp	r4, r3
 8013526:	d105      	bne.n	8013534 <std+0x54>
 8013528:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801352c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013530:	f000 bace 	b.w	8013ad0 <__retarget_lock_init_recursive>
 8013534:	bd10      	pop	{r4, pc}
 8013536:	bf00      	nop
 8013538:	08013755 	.word	0x08013755
 801353c:	08013777 	.word	0x08013777
 8013540:	080137af 	.word	0x080137af
 8013544:	080137d3 	.word	0x080137d3
 8013548:	24000d94 	.word	0x24000d94

0801354c <stdio_exit_handler>:
 801354c:	4a02      	ldr	r2, [pc, #8]	@ (8013558 <stdio_exit_handler+0xc>)
 801354e:	4903      	ldr	r1, [pc, #12]	@ (801355c <stdio_exit_handler+0x10>)
 8013550:	4803      	ldr	r0, [pc, #12]	@ (8013560 <stdio_exit_handler+0x14>)
 8013552:	f000 b869 	b.w	8013628 <_fwalk_sglue>
 8013556:	bf00      	nop
 8013558:	24000068 	.word	0x24000068
 801355c:	08014231 	.word	0x08014231
 8013560:	24000078 	.word	0x24000078

08013564 <cleanup_stdio>:
 8013564:	6841      	ldr	r1, [r0, #4]
 8013566:	4b0c      	ldr	r3, [pc, #48]	@ (8013598 <cleanup_stdio+0x34>)
 8013568:	4299      	cmp	r1, r3
 801356a:	b510      	push	{r4, lr}
 801356c:	4604      	mov	r4, r0
 801356e:	d001      	beq.n	8013574 <cleanup_stdio+0x10>
 8013570:	f000 fe5e 	bl	8014230 <_fflush_r>
 8013574:	68a1      	ldr	r1, [r4, #8]
 8013576:	4b09      	ldr	r3, [pc, #36]	@ (801359c <cleanup_stdio+0x38>)
 8013578:	4299      	cmp	r1, r3
 801357a:	d002      	beq.n	8013582 <cleanup_stdio+0x1e>
 801357c:	4620      	mov	r0, r4
 801357e:	f000 fe57 	bl	8014230 <_fflush_r>
 8013582:	68e1      	ldr	r1, [r4, #12]
 8013584:	4b06      	ldr	r3, [pc, #24]	@ (80135a0 <cleanup_stdio+0x3c>)
 8013586:	4299      	cmp	r1, r3
 8013588:	d004      	beq.n	8013594 <cleanup_stdio+0x30>
 801358a:	4620      	mov	r0, r4
 801358c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013590:	f000 be4e 	b.w	8014230 <_fflush_r>
 8013594:	bd10      	pop	{r4, pc}
 8013596:	bf00      	nop
 8013598:	24000d94 	.word	0x24000d94
 801359c:	24000dfc 	.word	0x24000dfc
 80135a0:	24000e64 	.word	0x24000e64

080135a4 <global_stdio_init.part.0>:
 80135a4:	b510      	push	{r4, lr}
 80135a6:	4b0b      	ldr	r3, [pc, #44]	@ (80135d4 <global_stdio_init.part.0+0x30>)
 80135a8:	4c0b      	ldr	r4, [pc, #44]	@ (80135d8 <global_stdio_init.part.0+0x34>)
 80135aa:	4a0c      	ldr	r2, [pc, #48]	@ (80135dc <global_stdio_init.part.0+0x38>)
 80135ac:	601a      	str	r2, [r3, #0]
 80135ae:	4620      	mov	r0, r4
 80135b0:	2200      	movs	r2, #0
 80135b2:	2104      	movs	r1, #4
 80135b4:	f7ff ff94 	bl	80134e0 <std>
 80135b8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80135bc:	2201      	movs	r2, #1
 80135be:	2109      	movs	r1, #9
 80135c0:	f7ff ff8e 	bl	80134e0 <std>
 80135c4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80135c8:	2202      	movs	r2, #2
 80135ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80135ce:	2112      	movs	r1, #18
 80135d0:	f7ff bf86 	b.w	80134e0 <std>
 80135d4:	24000ecc 	.word	0x24000ecc
 80135d8:	24000d94 	.word	0x24000d94
 80135dc:	0801354d 	.word	0x0801354d

080135e0 <__sfp_lock_acquire>:
 80135e0:	4801      	ldr	r0, [pc, #4]	@ (80135e8 <__sfp_lock_acquire+0x8>)
 80135e2:	f000 ba76 	b.w	8013ad2 <__retarget_lock_acquire_recursive>
 80135e6:	bf00      	nop
 80135e8:	24000ed5 	.word	0x24000ed5

080135ec <__sfp_lock_release>:
 80135ec:	4801      	ldr	r0, [pc, #4]	@ (80135f4 <__sfp_lock_release+0x8>)
 80135ee:	f000 ba71 	b.w	8013ad4 <__retarget_lock_release_recursive>
 80135f2:	bf00      	nop
 80135f4:	24000ed5 	.word	0x24000ed5

080135f8 <__sinit>:
 80135f8:	b510      	push	{r4, lr}
 80135fa:	4604      	mov	r4, r0
 80135fc:	f7ff fff0 	bl	80135e0 <__sfp_lock_acquire>
 8013600:	6a23      	ldr	r3, [r4, #32]
 8013602:	b11b      	cbz	r3, 801360c <__sinit+0x14>
 8013604:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013608:	f7ff bff0 	b.w	80135ec <__sfp_lock_release>
 801360c:	4b04      	ldr	r3, [pc, #16]	@ (8013620 <__sinit+0x28>)
 801360e:	6223      	str	r3, [r4, #32]
 8013610:	4b04      	ldr	r3, [pc, #16]	@ (8013624 <__sinit+0x2c>)
 8013612:	681b      	ldr	r3, [r3, #0]
 8013614:	2b00      	cmp	r3, #0
 8013616:	d1f5      	bne.n	8013604 <__sinit+0xc>
 8013618:	f7ff ffc4 	bl	80135a4 <global_stdio_init.part.0>
 801361c:	e7f2      	b.n	8013604 <__sinit+0xc>
 801361e:	bf00      	nop
 8013620:	08013565 	.word	0x08013565
 8013624:	24000ecc 	.word	0x24000ecc

08013628 <_fwalk_sglue>:
 8013628:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801362c:	4607      	mov	r7, r0
 801362e:	4688      	mov	r8, r1
 8013630:	4614      	mov	r4, r2
 8013632:	2600      	movs	r6, #0
 8013634:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8013638:	f1b9 0901 	subs.w	r9, r9, #1
 801363c:	d505      	bpl.n	801364a <_fwalk_sglue+0x22>
 801363e:	6824      	ldr	r4, [r4, #0]
 8013640:	2c00      	cmp	r4, #0
 8013642:	d1f7      	bne.n	8013634 <_fwalk_sglue+0xc>
 8013644:	4630      	mov	r0, r6
 8013646:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801364a:	89ab      	ldrh	r3, [r5, #12]
 801364c:	2b01      	cmp	r3, #1
 801364e:	d907      	bls.n	8013660 <_fwalk_sglue+0x38>
 8013650:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8013654:	3301      	adds	r3, #1
 8013656:	d003      	beq.n	8013660 <_fwalk_sglue+0x38>
 8013658:	4629      	mov	r1, r5
 801365a:	4638      	mov	r0, r7
 801365c:	47c0      	blx	r8
 801365e:	4306      	orrs	r6, r0
 8013660:	3568      	adds	r5, #104	@ 0x68
 8013662:	e7e9      	b.n	8013638 <_fwalk_sglue+0x10>

08013664 <iprintf>:
 8013664:	b40f      	push	{r0, r1, r2, r3}
 8013666:	b507      	push	{r0, r1, r2, lr}
 8013668:	4906      	ldr	r1, [pc, #24]	@ (8013684 <iprintf+0x20>)
 801366a:	ab04      	add	r3, sp, #16
 801366c:	6808      	ldr	r0, [r1, #0]
 801366e:	f853 2b04 	ldr.w	r2, [r3], #4
 8013672:	6881      	ldr	r1, [r0, #8]
 8013674:	9301      	str	r3, [sp, #4]
 8013676:	f000 fab1 	bl	8013bdc <_vfiprintf_r>
 801367a:	b003      	add	sp, #12
 801367c:	f85d eb04 	ldr.w	lr, [sp], #4
 8013680:	b004      	add	sp, #16
 8013682:	4770      	bx	lr
 8013684:	24000074 	.word	0x24000074

08013688 <putchar>:
 8013688:	4b02      	ldr	r3, [pc, #8]	@ (8013694 <putchar+0xc>)
 801368a:	4601      	mov	r1, r0
 801368c:	6818      	ldr	r0, [r3, #0]
 801368e:	6882      	ldr	r2, [r0, #8]
 8013690:	f000 be58 	b.w	8014344 <_putc_r>
 8013694:	24000074 	.word	0x24000074

08013698 <_puts_r>:
 8013698:	6a03      	ldr	r3, [r0, #32]
 801369a:	b570      	push	{r4, r5, r6, lr}
 801369c:	6884      	ldr	r4, [r0, #8]
 801369e:	4605      	mov	r5, r0
 80136a0:	460e      	mov	r6, r1
 80136a2:	b90b      	cbnz	r3, 80136a8 <_puts_r+0x10>
 80136a4:	f7ff ffa8 	bl	80135f8 <__sinit>
 80136a8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80136aa:	07db      	lsls	r3, r3, #31
 80136ac:	d405      	bmi.n	80136ba <_puts_r+0x22>
 80136ae:	89a3      	ldrh	r3, [r4, #12]
 80136b0:	0598      	lsls	r0, r3, #22
 80136b2:	d402      	bmi.n	80136ba <_puts_r+0x22>
 80136b4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80136b6:	f000 fa0c 	bl	8013ad2 <__retarget_lock_acquire_recursive>
 80136ba:	89a3      	ldrh	r3, [r4, #12]
 80136bc:	0719      	lsls	r1, r3, #28
 80136be:	d502      	bpl.n	80136c6 <_puts_r+0x2e>
 80136c0:	6923      	ldr	r3, [r4, #16]
 80136c2:	2b00      	cmp	r3, #0
 80136c4:	d135      	bne.n	8013732 <_puts_r+0x9a>
 80136c6:	4621      	mov	r1, r4
 80136c8:	4628      	mov	r0, r5
 80136ca:	f000 f8c5 	bl	8013858 <__swsetup_r>
 80136ce:	b380      	cbz	r0, 8013732 <_puts_r+0x9a>
 80136d0:	f04f 35ff 	mov.w	r5, #4294967295
 80136d4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80136d6:	07da      	lsls	r2, r3, #31
 80136d8:	d405      	bmi.n	80136e6 <_puts_r+0x4e>
 80136da:	89a3      	ldrh	r3, [r4, #12]
 80136dc:	059b      	lsls	r3, r3, #22
 80136de:	d402      	bmi.n	80136e6 <_puts_r+0x4e>
 80136e0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80136e2:	f000 f9f7 	bl	8013ad4 <__retarget_lock_release_recursive>
 80136e6:	4628      	mov	r0, r5
 80136e8:	bd70      	pop	{r4, r5, r6, pc}
 80136ea:	2b00      	cmp	r3, #0
 80136ec:	da04      	bge.n	80136f8 <_puts_r+0x60>
 80136ee:	69a2      	ldr	r2, [r4, #24]
 80136f0:	429a      	cmp	r2, r3
 80136f2:	dc17      	bgt.n	8013724 <_puts_r+0x8c>
 80136f4:	290a      	cmp	r1, #10
 80136f6:	d015      	beq.n	8013724 <_puts_r+0x8c>
 80136f8:	6823      	ldr	r3, [r4, #0]
 80136fa:	1c5a      	adds	r2, r3, #1
 80136fc:	6022      	str	r2, [r4, #0]
 80136fe:	7019      	strb	r1, [r3, #0]
 8013700:	68a3      	ldr	r3, [r4, #8]
 8013702:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8013706:	3b01      	subs	r3, #1
 8013708:	60a3      	str	r3, [r4, #8]
 801370a:	2900      	cmp	r1, #0
 801370c:	d1ed      	bne.n	80136ea <_puts_r+0x52>
 801370e:	2b00      	cmp	r3, #0
 8013710:	da11      	bge.n	8013736 <_puts_r+0x9e>
 8013712:	4622      	mov	r2, r4
 8013714:	210a      	movs	r1, #10
 8013716:	4628      	mov	r0, r5
 8013718:	f000 f85f 	bl	80137da <__swbuf_r>
 801371c:	3001      	adds	r0, #1
 801371e:	d0d7      	beq.n	80136d0 <_puts_r+0x38>
 8013720:	250a      	movs	r5, #10
 8013722:	e7d7      	b.n	80136d4 <_puts_r+0x3c>
 8013724:	4622      	mov	r2, r4
 8013726:	4628      	mov	r0, r5
 8013728:	f000 f857 	bl	80137da <__swbuf_r>
 801372c:	3001      	adds	r0, #1
 801372e:	d1e7      	bne.n	8013700 <_puts_r+0x68>
 8013730:	e7ce      	b.n	80136d0 <_puts_r+0x38>
 8013732:	3e01      	subs	r6, #1
 8013734:	e7e4      	b.n	8013700 <_puts_r+0x68>
 8013736:	6823      	ldr	r3, [r4, #0]
 8013738:	1c5a      	adds	r2, r3, #1
 801373a:	6022      	str	r2, [r4, #0]
 801373c:	220a      	movs	r2, #10
 801373e:	701a      	strb	r2, [r3, #0]
 8013740:	e7ee      	b.n	8013720 <_puts_r+0x88>
	...

08013744 <puts>:
 8013744:	4b02      	ldr	r3, [pc, #8]	@ (8013750 <puts+0xc>)
 8013746:	4601      	mov	r1, r0
 8013748:	6818      	ldr	r0, [r3, #0]
 801374a:	f7ff bfa5 	b.w	8013698 <_puts_r>
 801374e:	bf00      	nop
 8013750:	24000074 	.word	0x24000074

08013754 <__sread>:
 8013754:	b510      	push	{r4, lr}
 8013756:	460c      	mov	r4, r1
 8013758:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801375c:	f000 f946 	bl	80139ec <_read_r>
 8013760:	2800      	cmp	r0, #0
 8013762:	bfab      	itete	ge
 8013764:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8013766:	89a3      	ldrhlt	r3, [r4, #12]
 8013768:	181b      	addge	r3, r3, r0
 801376a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801376e:	bfac      	ite	ge
 8013770:	6563      	strge	r3, [r4, #84]	@ 0x54
 8013772:	81a3      	strhlt	r3, [r4, #12]
 8013774:	bd10      	pop	{r4, pc}

08013776 <__swrite>:
 8013776:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801377a:	461f      	mov	r7, r3
 801377c:	898b      	ldrh	r3, [r1, #12]
 801377e:	05db      	lsls	r3, r3, #23
 8013780:	4605      	mov	r5, r0
 8013782:	460c      	mov	r4, r1
 8013784:	4616      	mov	r6, r2
 8013786:	d505      	bpl.n	8013794 <__swrite+0x1e>
 8013788:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801378c:	2302      	movs	r3, #2
 801378e:	2200      	movs	r2, #0
 8013790:	f000 f91a 	bl	80139c8 <_lseek_r>
 8013794:	89a3      	ldrh	r3, [r4, #12]
 8013796:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801379a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801379e:	81a3      	strh	r3, [r4, #12]
 80137a0:	4632      	mov	r2, r6
 80137a2:	463b      	mov	r3, r7
 80137a4:	4628      	mov	r0, r5
 80137a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80137aa:	f000 b955 	b.w	8013a58 <_write_r>

080137ae <__sseek>:
 80137ae:	b510      	push	{r4, lr}
 80137b0:	460c      	mov	r4, r1
 80137b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80137b6:	f000 f907 	bl	80139c8 <_lseek_r>
 80137ba:	1c43      	adds	r3, r0, #1
 80137bc:	89a3      	ldrh	r3, [r4, #12]
 80137be:	bf15      	itete	ne
 80137c0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80137c2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80137c6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80137ca:	81a3      	strheq	r3, [r4, #12]
 80137cc:	bf18      	it	ne
 80137ce:	81a3      	strhne	r3, [r4, #12]
 80137d0:	bd10      	pop	{r4, pc}

080137d2 <__sclose>:
 80137d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80137d6:	f000 b8e7 	b.w	80139a8 <_close_r>

080137da <__swbuf_r>:
 80137da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80137dc:	460e      	mov	r6, r1
 80137de:	4614      	mov	r4, r2
 80137e0:	4605      	mov	r5, r0
 80137e2:	b118      	cbz	r0, 80137ec <__swbuf_r+0x12>
 80137e4:	6a03      	ldr	r3, [r0, #32]
 80137e6:	b90b      	cbnz	r3, 80137ec <__swbuf_r+0x12>
 80137e8:	f7ff ff06 	bl	80135f8 <__sinit>
 80137ec:	69a3      	ldr	r3, [r4, #24]
 80137ee:	60a3      	str	r3, [r4, #8]
 80137f0:	89a3      	ldrh	r3, [r4, #12]
 80137f2:	071a      	lsls	r2, r3, #28
 80137f4:	d501      	bpl.n	80137fa <__swbuf_r+0x20>
 80137f6:	6923      	ldr	r3, [r4, #16]
 80137f8:	b943      	cbnz	r3, 801380c <__swbuf_r+0x32>
 80137fa:	4621      	mov	r1, r4
 80137fc:	4628      	mov	r0, r5
 80137fe:	f000 f82b 	bl	8013858 <__swsetup_r>
 8013802:	b118      	cbz	r0, 801380c <__swbuf_r+0x32>
 8013804:	f04f 37ff 	mov.w	r7, #4294967295
 8013808:	4638      	mov	r0, r7
 801380a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801380c:	6823      	ldr	r3, [r4, #0]
 801380e:	6922      	ldr	r2, [r4, #16]
 8013810:	1a98      	subs	r0, r3, r2
 8013812:	6963      	ldr	r3, [r4, #20]
 8013814:	b2f6      	uxtb	r6, r6
 8013816:	4283      	cmp	r3, r0
 8013818:	4637      	mov	r7, r6
 801381a:	dc05      	bgt.n	8013828 <__swbuf_r+0x4e>
 801381c:	4621      	mov	r1, r4
 801381e:	4628      	mov	r0, r5
 8013820:	f000 fd06 	bl	8014230 <_fflush_r>
 8013824:	2800      	cmp	r0, #0
 8013826:	d1ed      	bne.n	8013804 <__swbuf_r+0x2a>
 8013828:	68a3      	ldr	r3, [r4, #8]
 801382a:	3b01      	subs	r3, #1
 801382c:	60a3      	str	r3, [r4, #8]
 801382e:	6823      	ldr	r3, [r4, #0]
 8013830:	1c5a      	adds	r2, r3, #1
 8013832:	6022      	str	r2, [r4, #0]
 8013834:	701e      	strb	r6, [r3, #0]
 8013836:	6962      	ldr	r2, [r4, #20]
 8013838:	1c43      	adds	r3, r0, #1
 801383a:	429a      	cmp	r2, r3
 801383c:	d004      	beq.n	8013848 <__swbuf_r+0x6e>
 801383e:	89a3      	ldrh	r3, [r4, #12]
 8013840:	07db      	lsls	r3, r3, #31
 8013842:	d5e1      	bpl.n	8013808 <__swbuf_r+0x2e>
 8013844:	2e0a      	cmp	r6, #10
 8013846:	d1df      	bne.n	8013808 <__swbuf_r+0x2e>
 8013848:	4621      	mov	r1, r4
 801384a:	4628      	mov	r0, r5
 801384c:	f000 fcf0 	bl	8014230 <_fflush_r>
 8013850:	2800      	cmp	r0, #0
 8013852:	d0d9      	beq.n	8013808 <__swbuf_r+0x2e>
 8013854:	e7d6      	b.n	8013804 <__swbuf_r+0x2a>
	...

08013858 <__swsetup_r>:
 8013858:	b538      	push	{r3, r4, r5, lr}
 801385a:	4b29      	ldr	r3, [pc, #164]	@ (8013900 <__swsetup_r+0xa8>)
 801385c:	4605      	mov	r5, r0
 801385e:	6818      	ldr	r0, [r3, #0]
 8013860:	460c      	mov	r4, r1
 8013862:	b118      	cbz	r0, 801386c <__swsetup_r+0x14>
 8013864:	6a03      	ldr	r3, [r0, #32]
 8013866:	b90b      	cbnz	r3, 801386c <__swsetup_r+0x14>
 8013868:	f7ff fec6 	bl	80135f8 <__sinit>
 801386c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013870:	0719      	lsls	r1, r3, #28
 8013872:	d422      	bmi.n	80138ba <__swsetup_r+0x62>
 8013874:	06da      	lsls	r2, r3, #27
 8013876:	d407      	bmi.n	8013888 <__swsetup_r+0x30>
 8013878:	2209      	movs	r2, #9
 801387a:	602a      	str	r2, [r5, #0]
 801387c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013880:	81a3      	strh	r3, [r4, #12]
 8013882:	f04f 30ff 	mov.w	r0, #4294967295
 8013886:	e033      	b.n	80138f0 <__swsetup_r+0x98>
 8013888:	0758      	lsls	r0, r3, #29
 801388a:	d512      	bpl.n	80138b2 <__swsetup_r+0x5a>
 801388c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801388e:	b141      	cbz	r1, 80138a2 <__swsetup_r+0x4a>
 8013890:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8013894:	4299      	cmp	r1, r3
 8013896:	d002      	beq.n	801389e <__swsetup_r+0x46>
 8013898:	4628      	mov	r0, r5
 801389a:	f000 f92b 	bl	8013af4 <_free_r>
 801389e:	2300      	movs	r3, #0
 80138a0:	6363      	str	r3, [r4, #52]	@ 0x34
 80138a2:	89a3      	ldrh	r3, [r4, #12]
 80138a4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80138a8:	81a3      	strh	r3, [r4, #12]
 80138aa:	2300      	movs	r3, #0
 80138ac:	6063      	str	r3, [r4, #4]
 80138ae:	6923      	ldr	r3, [r4, #16]
 80138b0:	6023      	str	r3, [r4, #0]
 80138b2:	89a3      	ldrh	r3, [r4, #12]
 80138b4:	f043 0308 	orr.w	r3, r3, #8
 80138b8:	81a3      	strh	r3, [r4, #12]
 80138ba:	6923      	ldr	r3, [r4, #16]
 80138bc:	b94b      	cbnz	r3, 80138d2 <__swsetup_r+0x7a>
 80138be:	89a3      	ldrh	r3, [r4, #12]
 80138c0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80138c4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80138c8:	d003      	beq.n	80138d2 <__swsetup_r+0x7a>
 80138ca:	4621      	mov	r1, r4
 80138cc:	4628      	mov	r0, r5
 80138ce:	f000 fcfd 	bl	80142cc <__smakebuf_r>
 80138d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80138d6:	f013 0201 	ands.w	r2, r3, #1
 80138da:	d00a      	beq.n	80138f2 <__swsetup_r+0x9a>
 80138dc:	2200      	movs	r2, #0
 80138de:	60a2      	str	r2, [r4, #8]
 80138e0:	6962      	ldr	r2, [r4, #20]
 80138e2:	4252      	negs	r2, r2
 80138e4:	61a2      	str	r2, [r4, #24]
 80138e6:	6922      	ldr	r2, [r4, #16]
 80138e8:	b942      	cbnz	r2, 80138fc <__swsetup_r+0xa4>
 80138ea:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80138ee:	d1c5      	bne.n	801387c <__swsetup_r+0x24>
 80138f0:	bd38      	pop	{r3, r4, r5, pc}
 80138f2:	0799      	lsls	r1, r3, #30
 80138f4:	bf58      	it	pl
 80138f6:	6962      	ldrpl	r2, [r4, #20]
 80138f8:	60a2      	str	r2, [r4, #8]
 80138fa:	e7f4      	b.n	80138e6 <__swsetup_r+0x8e>
 80138fc:	2000      	movs	r0, #0
 80138fe:	e7f7      	b.n	80138f0 <__swsetup_r+0x98>
 8013900:	24000074 	.word	0x24000074

08013904 <memmove>:
 8013904:	4288      	cmp	r0, r1
 8013906:	b510      	push	{r4, lr}
 8013908:	eb01 0402 	add.w	r4, r1, r2
 801390c:	d902      	bls.n	8013914 <memmove+0x10>
 801390e:	4284      	cmp	r4, r0
 8013910:	4623      	mov	r3, r4
 8013912:	d807      	bhi.n	8013924 <memmove+0x20>
 8013914:	1e43      	subs	r3, r0, #1
 8013916:	42a1      	cmp	r1, r4
 8013918:	d008      	beq.n	801392c <memmove+0x28>
 801391a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801391e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8013922:	e7f8      	b.n	8013916 <memmove+0x12>
 8013924:	4402      	add	r2, r0
 8013926:	4601      	mov	r1, r0
 8013928:	428a      	cmp	r2, r1
 801392a:	d100      	bne.n	801392e <memmove+0x2a>
 801392c:	bd10      	pop	{r4, pc}
 801392e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8013932:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8013936:	e7f7      	b.n	8013928 <memmove+0x24>

08013938 <memset>:
 8013938:	4402      	add	r2, r0
 801393a:	4603      	mov	r3, r0
 801393c:	4293      	cmp	r3, r2
 801393e:	d100      	bne.n	8013942 <memset+0xa>
 8013940:	4770      	bx	lr
 8013942:	f803 1b01 	strb.w	r1, [r3], #1
 8013946:	e7f9      	b.n	801393c <memset+0x4>

08013948 <_raise_r>:
 8013948:	291f      	cmp	r1, #31
 801394a:	b538      	push	{r3, r4, r5, lr}
 801394c:	4605      	mov	r5, r0
 801394e:	460c      	mov	r4, r1
 8013950:	d904      	bls.n	801395c <_raise_r+0x14>
 8013952:	2316      	movs	r3, #22
 8013954:	6003      	str	r3, [r0, #0]
 8013956:	f04f 30ff 	mov.w	r0, #4294967295
 801395a:	bd38      	pop	{r3, r4, r5, pc}
 801395c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801395e:	b112      	cbz	r2, 8013966 <_raise_r+0x1e>
 8013960:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8013964:	b94b      	cbnz	r3, 801397a <_raise_r+0x32>
 8013966:	4628      	mov	r0, r5
 8013968:	f000 f864 	bl	8013a34 <_getpid_r>
 801396c:	4622      	mov	r2, r4
 801396e:	4601      	mov	r1, r0
 8013970:	4628      	mov	r0, r5
 8013972:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013976:	f000 b84b 	b.w	8013a10 <_kill_r>
 801397a:	2b01      	cmp	r3, #1
 801397c:	d00a      	beq.n	8013994 <_raise_r+0x4c>
 801397e:	1c59      	adds	r1, r3, #1
 8013980:	d103      	bne.n	801398a <_raise_r+0x42>
 8013982:	2316      	movs	r3, #22
 8013984:	6003      	str	r3, [r0, #0]
 8013986:	2001      	movs	r0, #1
 8013988:	e7e7      	b.n	801395a <_raise_r+0x12>
 801398a:	2100      	movs	r1, #0
 801398c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8013990:	4620      	mov	r0, r4
 8013992:	4798      	blx	r3
 8013994:	2000      	movs	r0, #0
 8013996:	e7e0      	b.n	801395a <_raise_r+0x12>

08013998 <raise>:
 8013998:	4b02      	ldr	r3, [pc, #8]	@ (80139a4 <raise+0xc>)
 801399a:	4601      	mov	r1, r0
 801399c:	6818      	ldr	r0, [r3, #0]
 801399e:	f7ff bfd3 	b.w	8013948 <_raise_r>
 80139a2:	bf00      	nop
 80139a4:	24000074 	.word	0x24000074

080139a8 <_close_r>:
 80139a8:	b538      	push	{r3, r4, r5, lr}
 80139aa:	4d06      	ldr	r5, [pc, #24]	@ (80139c4 <_close_r+0x1c>)
 80139ac:	2300      	movs	r3, #0
 80139ae:	4604      	mov	r4, r0
 80139b0:	4608      	mov	r0, r1
 80139b2:	602b      	str	r3, [r5, #0]
 80139b4:	f7f1 f8d4 	bl	8004b60 <_close>
 80139b8:	1c43      	adds	r3, r0, #1
 80139ba:	d102      	bne.n	80139c2 <_close_r+0x1a>
 80139bc:	682b      	ldr	r3, [r5, #0]
 80139be:	b103      	cbz	r3, 80139c2 <_close_r+0x1a>
 80139c0:	6023      	str	r3, [r4, #0]
 80139c2:	bd38      	pop	{r3, r4, r5, pc}
 80139c4:	24000ed0 	.word	0x24000ed0

080139c8 <_lseek_r>:
 80139c8:	b538      	push	{r3, r4, r5, lr}
 80139ca:	4d07      	ldr	r5, [pc, #28]	@ (80139e8 <_lseek_r+0x20>)
 80139cc:	4604      	mov	r4, r0
 80139ce:	4608      	mov	r0, r1
 80139d0:	4611      	mov	r1, r2
 80139d2:	2200      	movs	r2, #0
 80139d4:	602a      	str	r2, [r5, #0]
 80139d6:	461a      	mov	r2, r3
 80139d8:	f7f1 f8e9 	bl	8004bae <_lseek>
 80139dc:	1c43      	adds	r3, r0, #1
 80139de:	d102      	bne.n	80139e6 <_lseek_r+0x1e>
 80139e0:	682b      	ldr	r3, [r5, #0]
 80139e2:	b103      	cbz	r3, 80139e6 <_lseek_r+0x1e>
 80139e4:	6023      	str	r3, [r4, #0]
 80139e6:	bd38      	pop	{r3, r4, r5, pc}
 80139e8:	24000ed0 	.word	0x24000ed0

080139ec <_read_r>:
 80139ec:	b538      	push	{r3, r4, r5, lr}
 80139ee:	4d07      	ldr	r5, [pc, #28]	@ (8013a0c <_read_r+0x20>)
 80139f0:	4604      	mov	r4, r0
 80139f2:	4608      	mov	r0, r1
 80139f4:	4611      	mov	r1, r2
 80139f6:	2200      	movs	r2, #0
 80139f8:	602a      	str	r2, [r5, #0]
 80139fa:	461a      	mov	r2, r3
 80139fc:	f7f1 f877 	bl	8004aee <_read>
 8013a00:	1c43      	adds	r3, r0, #1
 8013a02:	d102      	bne.n	8013a0a <_read_r+0x1e>
 8013a04:	682b      	ldr	r3, [r5, #0]
 8013a06:	b103      	cbz	r3, 8013a0a <_read_r+0x1e>
 8013a08:	6023      	str	r3, [r4, #0]
 8013a0a:	bd38      	pop	{r3, r4, r5, pc}
 8013a0c:	24000ed0 	.word	0x24000ed0

08013a10 <_kill_r>:
 8013a10:	b538      	push	{r3, r4, r5, lr}
 8013a12:	4d07      	ldr	r5, [pc, #28]	@ (8013a30 <_kill_r+0x20>)
 8013a14:	2300      	movs	r3, #0
 8013a16:	4604      	mov	r4, r0
 8013a18:	4608      	mov	r0, r1
 8013a1a:	4611      	mov	r1, r2
 8013a1c:	602b      	str	r3, [r5, #0]
 8013a1e:	f7f1 f84b 	bl	8004ab8 <_kill>
 8013a22:	1c43      	adds	r3, r0, #1
 8013a24:	d102      	bne.n	8013a2c <_kill_r+0x1c>
 8013a26:	682b      	ldr	r3, [r5, #0]
 8013a28:	b103      	cbz	r3, 8013a2c <_kill_r+0x1c>
 8013a2a:	6023      	str	r3, [r4, #0]
 8013a2c:	bd38      	pop	{r3, r4, r5, pc}
 8013a2e:	bf00      	nop
 8013a30:	24000ed0 	.word	0x24000ed0

08013a34 <_getpid_r>:
 8013a34:	f7f1 b838 	b.w	8004aa8 <_getpid>

08013a38 <_sbrk_r>:
 8013a38:	b538      	push	{r3, r4, r5, lr}
 8013a3a:	4d06      	ldr	r5, [pc, #24]	@ (8013a54 <_sbrk_r+0x1c>)
 8013a3c:	2300      	movs	r3, #0
 8013a3e:	4604      	mov	r4, r0
 8013a40:	4608      	mov	r0, r1
 8013a42:	602b      	str	r3, [r5, #0]
 8013a44:	f7f1 f8c0 	bl	8004bc8 <_sbrk>
 8013a48:	1c43      	adds	r3, r0, #1
 8013a4a:	d102      	bne.n	8013a52 <_sbrk_r+0x1a>
 8013a4c:	682b      	ldr	r3, [r5, #0]
 8013a4e:	b103      	cbz	r3, 8013a52 <_sbrk_r+0x1a>
 8013a50:	6023      	str	r3, [r4, #0]
 8013a52:	bd38      	pop	{r3, r4, r5, pc}
 8013a54:	24000ed0 	.word	0x24000ed0

08013a58 <_write_r>:
 8013a58:	b538      	push	{r3, r4, r5, lr}
 8013a5a:	4d07      	ldr	r5, [pc, #28]	@ (8013a78 <_write_r+0x20>)
 8013a5c:	4604      	mov	r4, r0
 8013a5e:	4608      	mov	r0, r1
 8013a60:	4611      	mov	r1, r2
 8013a62:	2200      	movs	r2, #0
 8013a64:	602a      	str	r2, [r5, #0]
 8013a66:	461a      	mov	r2, r3
 8013a68:	f7f1 f85e 	bl	8004b28 <_write>
 8013a6c:	1c43      	adds	r3, r0, #1
 8013a6e:	d102      	bne.n	8013a76 <_write_r+0x1e>
 8013a70:	682b      	ldr	r3, [r5, #0]
 8013a72:	b103      	cbz	r3, 8013a76 <_write_r+0x1e>
 8013a74:	6023      	str	r3, [r4, #0]
 8013a76:	bd38      	pop	{r3, r4, r5, pc}
 8013a78:	24000ed0 	.word	0x24000ed0

08013a7c <__errno>:
 8013a7c:	4b01      	ldr	r3, [pc, #4]	@ (8013a84 <__errno+0x8>)
 8013a7e:	6818      	ldr	r0, [r3, #0]
 8013a80:	4770      	bx	lr
 8013a82:	bf00      	nop
 8013a84:	24000074 	.word	0x24000074

08013a88 <__libc_init_array>:
 8013a88:	b570      	push	{r4, r5, r6, lr}
 8013a8a:	4d0d      	ldr	r5, [pc, #52]	@ (8013ac0 <__libc_init_array+0x38>)
 8013a8c:	4c0d      	ldr	r4, [pc, #52]	@ (8013ac4 <__libc_init_array+0x3c>)
 8013a8e:	1b64      	subs	r4, r4, r5
 8013a90:	10a4      	asrs	r4, r4, #2
 8013a92:	2600      	movs	r6, #0
 8013a94:	42a6      	cmp	r6, r4
 8013a96:	d109      	bne.n	8013aac <__libc_init_array+0x24>
 8013a98:	4d0b      	ldr	r5, [pc, #44]	@ (8013ac8 <__libc_init_array+0x40>)
 8013a9a:	4c0c      	ldr	r4, [pc, #48]	@ (8013acc <__libc_init_array+0x44>)
 8013a9c:	f000 fca8 	bl	80143f0 <_init>
 8013aa0:	1b64      	subs	r4, r4, r5
 8013aa2:	10a4      	asrs	r4, r4, #2
 8013aa4:	2600      	movs	r6, #0
 8013aa6:	42a6      	cmp	r6, r4
 8013aa8:	d105      	bne.n	8013ab6 <__libc_init_array+0x2e>
 8013aaa:	bd70      	pop	{r4, r5, r6, pc}
 8013aac:	f855 3b04 	ldr.w	r3, [r5], #4
 8013ab0:	4798      	blx	r3
 8013ab2:	3601      	adds	r6, #1
 8013ab4:	e7ee      	b.n	8013a94 <__libc_init_array+0xc>
 8013ab6:	f855 3b04 	ldr.w	r3, [r5], #4
 8013aba:	4798      	blx	r3
 8013abc:	3601      	adds	r6, #1
 8013abe:	e7f2      	b.n	8013aa6 <__libc_init_array+0x1e>
 8013ac0:	08014cdc 	.word	0x08014cdc
 8013ac4:	08014cdc 	.word	0x08014cdc
 8013ac8:	08014cdc 	.word	0x08014cdc
 8013acc:	08014ce4 	.word	0x08014ce4

08013ad0 <__retarget_lock_init_recursive>:
 8013ad0:	4770      	bx	lr

08013ad2 <__retarget_lock_acquire_recursive>:
 8013ad2:	4770      	bx	lr

08013ad4 <__retarget_lock_release_recursive>:
 8013ad4:	4770      	bx	lr

08013ad6 <memcpy>:
 8013ad6:	440a      	add	r2, r1
 8013ad8:	4291      	cmp	r1, r2
 8013ada:	f100 33ff 	add.w	r3, r0, #4294967295
 8013ade:	d100      	bne.n	8013ae2 <memcpy+0xc>
 8013ae0:	4770      	bx	lr
 8013ae2:	b510      	push	{r4, lr}
 8013ae4:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013ae8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8013aec:	4291      	cmp	r1, r2
 8013aee:	d1f9      	bne.n	8013ae4 <memcpy+0xe>
 8013af0:	bd10      	pop	{r4, pc}
	...

08013af4 <_free_r>:
 8013af4:	b538      	push	{r3, r4, r5, lr}
 8013af6:	4605      	mov	r5, r0
 8013af8:	2900      	cmp	r1, #0
 8013afa:	d041      	beq.n	8013b80 <_free_r+0x8c>
 8013afc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013b00:	1f0c      	subs	r4, r1, #4
 8013b02:	2b00      	cmp	r3, #0
 8013b04:	bfb8      	it	lt
 8013b06:	18e4      	addlt	r4, r4, r3
 8013b08:	f7ff fc88 	bl	801341c <__malloc_lock>
 8013b0c:	4a1d      	ldr	r2, [pc, #116]	@ (8013b84 <_free_r+0x90>)
 8013b0e:	6813      	ldr	r3, [r2, #0]
 8013b10:	b933      	cbnz	r3, 8013b20 <_free_r+0x2c>
 8013b12:	6063      	str	r3, [r4, #4]
 8013b14:	6014      	str	r4, [r2, #0]
 8013b16:	4628      	mov	r0, r5
 8013b18:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013b1c:	f7ff bc84 	b.w	8013428 <__malloc_unlock>
 8013b20:	42a3      	cmp	r3, r4
 8013b22:	d908      	bls.n	8013b36 <_free_r+0x42>
 8013b24:	6820      	ldr	r0, [r4, #0]
 8013b26:	1821      	adds	r1, r4, r0
 8013b28:	428b      	cmp	r3, r1
 8013b2a:	bf01      	itttt	eq
 8013b2c:	6819      	ldreq	r1, [r3, #0]
 8013b2e:	685b      	ldreq	r3, [r3, #4]
 8013b30:	1809      	addeq	r1, r1, r0
 8013b32:	6021      	streq	r1, [r4, #0]
 8013b34:	e7ed      	b.n	8013b12 <_free_r+0x1e>
 8013b36:	461a      	mov	r2, r3
 8013b38:	685b      	ldr	r3, [r3, #4]
 8013b3a:	b10b      	cbz	r3, 8013b40 <_free_r+0x4c>
 8013b3c:	42a3      	cmp	r3, r4
 8013b3e:	d9fa      	bls.n	8013b36 <_free_r+0x42>
 8013b40:	6811      	ldr	r1, [r2, #0]
 8013b42:	1850      	adds	r0, r2, r1
 8013b44:	42a0      	cmp	r0, r4
 8013b46:	d10b      	bne.n	8013b60 <_free_r+0x6c>
 8013b48:	6820      	ldr	r0, [r4, #0]
 8013b4a:	4401      	add	r1, r0
 8013b4c:	1850      	adds	r0, r2, r1
 8013b4e:	4283      	cmp	r3, r0
 8013b50:	6011      	str	r1, [r2, #0]
 8013b52:	d1e0      	bne.n	8013b16 <_free_r+0x22>
 8013b54:	6818      	ldr	r0, [r3, #0]
 8013b56:	685b      	ldr	r3, [r3, #4]
 8013b58:	6053      	str	r3, [r2, #4]
 8013b5a:	4408      	add	r0, r1
 8013b5c:	6010      	str	r0, [r2, #0]
 8013b5e:	e7da      	b.n	8013b16 <_free_r+0x22>
 8013b60:	d902      	bls.n	8013b68 <_free_r+0x74>
 8013b62:	230c      	movs	r3, #12
 8013b64:	602b      	str	r3, [r5, #0]
 8013b66:	e7d6      	b.n	8013b16 <_free_r+0x22>
 8013b68:	6820      	ldr	r0, [r4, #0]
 8013b6a:	1821      	adds	r1, r4, r0
 8013b6c:	428b      	cmp	r3, r1
 8013b6e:	bf04      	itt	eq
 8013b70:	6819      	ldreq	r1, [r3, #0]
 8013b72:	685b      	ldreq	r3, [r3, #4]
 8013b74:	6063      	str	r3, [r4, #4]
 8013b76:	bf04      	itt	eq
 8013b78:	1809      	addeq	r1, r1, r0
 8013b7a:	6021      	streq	r1, [r4, #0]
 8013b7c:	6054      	str	r4, [r2, #4]
 8013b7e:	e7ca      	b.n	8013b16 <_free_r+0x22>
 8013b80:	bd38      	pop	{r3, r4, r5, pc}
 8013b82:	bf00      	nop
 8013b84:	24000d90 	.word	0x24000d90

08013b88 <__sfputc_r>:
 8013b88:	6893      	ldr	r3, [r2, #8]
 8013b8a:	3b01      	subs	r3, #1
 8013b8c:	2b00      	cmp	r3, #0
 8013b8e:	b410      	push	{r4}
 8013b90:	6093      	str	r3, [r2, #8]
 8013b92:	da08      	bge.n	8013ba6 <__sfputc_r+0x1e>
 8013b94:	6994      	ldr	r4, [r2, #24]
 8013b96:	42a3      	cmp	r3, r4
 8013b98:	db01      	blt.n	8013b9e <__sfputc_r+0x16>
 8013b9a:	290a      	cmp	r1, #10
 8013b9c:	d103      	bne.n	8013ba6 <__sfputc_r+0x1e>
 8013b9e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013ba2:	f7ff be1a 	b.w	80137da <__swbuf_r>
 8013ba6:	6813      	ldr	r3, [r2, #0]
 8013ba8:	1c58      	adds	r0, r3, #1
 8013baa:	6010      	str	r0, [r2, #0]
 8013bac:	7019      	strb	r1, [r3, #0]
 8013bae:	4608      	mov	r0, r1
 8013bb0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013bb4:	4770      	bx	lr

08013bb6 <__sfputs_r>:
 8013bb6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013bb8:	4606      	mov	r6, r0
 8013bba:	460f      	mov	r7, r1
 8013bbc:	4614      	mov	r4, r2
 8013bbe:	18d5      	adds	r5, r2, r3
 8013bc0:	42ac      	cmp	r4, r5
 8013bc2:	d101      	bne.n	8013bc8 <__sfputs_r+0x12>
 8013bc4:	2000      	movs	r0, #0
 8013bc6:	e007      	b.n	8013bd8 <__sfputs_r+0x22>
 8013bc8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013bcc:	463a      	mov	r2, r7
 8013bce:	4630      	mov	r0, r6
 8013bd0:	f7ff ffda 	bl	8013b88 <__sfputc_r>
 8013bd4:	1c43      	adds	r3, r0, #1
 8013bd6:	d1f3      	bne.n	8013bc0 <__sfputs_r+0xa>
 8013bd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08013bdc <_vfiprintf_r>:
 8013bdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013be0:	460d      	mov	r5, r1
 8013be2:	b09d      	sub	sp, #116	@ 0x74
 8013be4:	4614      	mov	r4, r2
 8013be6:	4698      	mov	r8, r3
 8013be8:	4606      	mov	r6, r0
 8013bea:	b118      	cbz	r0, 8013bf4 <_vfiprintf_r+0x18>
 8013bec:	6a03      	ldr	r3, [r0, #32]
 8013bee:	b90b      	cbnz	r3, 8013bf4 <_vfiprintf_r+0x18>
 8013bf0:	f7ff fd02 	bl	80135f8 <__sinit>
 8013bf4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8013bf6:	07d9      	lsls	r1, r3, #31
 8013bf8:	d405      	bmi.n	8013c06 <_vfiprintf_r+0x2a>
 8013bfa:	89ab      	ldrh	r3, [r5, #12]
 8013bfc:	059a      	lsls	r2, r3, #22
 8013bfe:	d402      	bmi.n	8013c06 <_vfiprintf_r+0x2a>
 8013c00:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8013c02:	f7ff ff66 	bl	8013ad2 <__retarget_lock_acquire_recursive>
 8013c06:	89ab      	ldrh	r3, [r5, #12]
 8013c08:	071b      	lsls	r3, r3, #28
 8013c0a:	d501      	bpl.n	8013c10 <_vfiprintf_r+0x34>
 8013c0c:	692b      	ldr	r3, [r5, #16]
 8013c0e:	b99b      	cbnz	r3, 8013c38 <_vfiprintf_r+0x5c>
 8013c10:	4629      	mov	r1, r5
 8013c12:	4630      	mov	r0, r6
 8013c14:	f7ff fe20 	bl	8013858 <__swsetup_r>
 8013c18:	b170      	cbz	r0, 8013c38 <_vfiprintf_r+0x5c>
 8013c1a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8013c1c:	07dc      	lsls	r4, r3, #31
 8013c1e:	d504      	bpl.n	8013c2a <_vfiprintf_r+0x4e>
 8013c20:	f04f 30ff 	mov.w	r0, #4294967295
 8013c24:	b01d      	add	sp, #116	@ 0x74
 8013c26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013c2a:	89ab      	ldrh	r3, [r5, #12]
 8013c2c:	0598      	lsls	r0, r3, #22
 8013c2e:	d4f7      	bmi.n	8013c20 <_vfiprintf_r+0x44>
 8013c30:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8013c32:	f7ff ff4f 	bl	8013ad4 <__retarget_lock_release_recursive>
 8013c36:	e7f3      	b.n	8013c20 <_vfiprintf_r+0x44>
 8013c38:	2300      	movs	r3, #0
 8013c3a:	9309      	str	r3, [sp, #36]	@ 0x24
 8013c3c:	2320      	movs	r3, #32
 8013c3e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8013c42:	f8cd 800c 	str.w	r8, [sp, #12]
 8013c46:	2330      	movs	r3, #48	@ 0x30
 8013c48:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8013df8 <_vfiprintf_r+0x21c>
 8013c4c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8013c50:	f04f 0901 	mov.w	r9, #1
 8013c54:	4623      	mov	r3, r4
 8013c56:	469a      	mov	sl, r3
 8013c58:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013c5c:	b10a      	cbz	r2, 8013c62 <_vfiprintf_r+0x86>
 8013c5e:	2a25      	cmp	r2, #37	@ 0x25
 8013c60:	d1f9      	bne.n	8013c56 <_vfiprintf_r+0x7a>
 8013c62:	ebba 0b04 	subs.w	fp, sl, r4
 8013c66:	d00b      	beq.n	8013c80 <_vfiprintf_r+0xa4>
 8013c68:	465b      	mov	r3, fp
 8013c6a:	4622      	mov	r2, r4
 8013c6c:	4629      	mov	r1, r5
 8013c6e:	4630      	mov	r0, r6
 8013c70:	f7ff ffa1 	bl	8013bb6 <__sfputs_r>
 8013c74:	3001      	adds	r0, #1
 8013c76:	f000 80a7 	beq.w	8013dc8 <_vfiprintf_r+0x1ec>
 8013c7a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8013c7c:	445a      	add	r2, fp
 8013c7e:	9209      	str	r2, [sp, #36]	@ 0x24
 8013c80:	f89a 3000 	ldrb.w	r3, [sl]
 8013c84:	2b00      	cmp	r3, #0
 8013c86:	f000 809f 	beq.w	8013dc8 <_vfiprintf_r+0x1ec>
 8013c8a:	2300      	movs	r3, #0
 8013c8c:	f04f 32ff 	mov.w	r2, #4294967295
 8013c90:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013c94:	f10a 0a01 	add.w	sl, sl, #1
 8013c98:	9304      	str	r3, [sp, #16]
 8013c9a:	9307      	str	r3, [sp, #28]
 8013c9c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8013ca0:	931a      	str	r3, [sp, #104]	@ 0x68
 8013ca2:	4654      	mov	r4, sl
 8013ca4:	2205      	movs	r2, #5
 8013ca6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013caa:	4853      	ldr	r0, [pc, #332]	@ (8013df8 <_vfiprintf_r+0x21c>)
 8013cac:	f7ec fb28 	bl	8000300 <memchr>
 8013cb0:	9a04      	ldr	r2, [sp, #16]
 8013cb2:	b9d8      	cbnz	r0, 8013cec <_vfiprintf_r+0x110>
 8013cb4:	06d1      	lsls	r1, r2, #27
 8013cb6:	bf44      	itt	mi
 8013cb8:	2320      	movmi	r3, #32
 8013cba:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8013cbe:	0713      	lsls	r3, r2, #28
 8013cc0:	bf44      	itt	mi
 8013cc2:	232b      	movmi	r3, #43	@ 0x2b
 8013cc4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8013cc8:	f89a 3000 	ldrb.w	r3, [sl]
 8013ccc:	2b2a      	cmp	r3, #42	@ 0x2a
 8013cce:	d015      	beq.n	8013cfc <_vfiprintf_r+0x120>
 8013cd0:	9a07      	ldr	r2, [sp, #28]
 8013cd2:	4654      	mov	r4, sl
 8013cd4:	2000      	movs	r0, #0
 8013cd6:	f04f 0c0a 	mov.w	ip, #10
 8013cda:	4621      	mov	r1, r4
 8013cdc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013ce0:	3b30      	subs	r3, #48	@ 0x30
 8013ce2:	2b09      	cmp	r3, #9
 8013ce4:	d94b      	bls.n	8013d7e <_vfiprintf_r+0x1a2>
 8013ce6:	b1b0      	cbz	r0, 8013d16 <_vfiprintf_r+0x13a>
 8013ce8:	9207      	str	r2, [sp, #28]
 8013cea:	e014      	b.n	8013d16 <_vfiprintf_r+0x13a>
 8013cec:	eba0 0308 	sub.w	r3, r0, r8
 8013cf0:	fa09 f303 	lsl.w	r3, r9, r3
 8013cf4:	4313      	orrs	r3, r2
 8013cf6:	9304      	str	r3, [sp, #16]
 8013cf8:	46a2      	mov	sl, r4
 8013cfa:	e7d2      	b.n	8013ca2 <_vfiprintf_r+0xc6>
 8013cfc:	9b03      	ldr	r3, [sp, #12]
 8013cfe:	1d19      	adds	r1, r3, #4
 8013d00:	681b      	ldr	r3, [r3, #0]
 8013d02:	9103      	str	r1, [sp, #12]
 8013d04:	2b00      	cmp	r3, #0
 8013d06:	bfbb      	ittet	lt
 8013d08:	425b      	neglt	r3, r3
 8013d0a:	f042 0202 	orrlt.w	r2, r2, #2
 8013d0e:	9307      	strge	r3, [sp, #28]
 8013d10:	9307      	strlt	r3, [sp, #28]
 8013d12:	bfb8      	it	lt
 8013d14:	9204      	strlt	r2, [sp, #16]
 8013d16:	7823      	ldrb	r3, [r4, #0]
 8013d18:	2b2e      	cmp	r3, #46	@ 0x2e
 8013d1a:	d10a      	bne.n	8013d32 <_vfiprintf_r+0x156>
 8013d1c:	7863      	ldrb	r3, [r4, #1]
 8013d1e:	2b2a      	cmp	r3, #42	@ 0x2a
 8013d20:	d132      	bne.n	8013d88 <_vfiprintf_r+0x1ac>
 8013d22:	9b03      	ldr	r3, [sp, #12]
 8013d24:	1d1a      	adds	r2, r3, #4
 8013d26:	681b      	ldr	r3, [r3, #0]
 8013d28:	9203      	str	r2, [sp, #12]
 8013d2a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8013d2e:	3402      	adds	r4, #2
 8013d30:	9305      	str	r3, [sp, #20]
 8013d32:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8013e08 <_vfiprintf_r+0x22c>
 8013d36:	7821      	ldrb	r1, [r4, #0]
 8013d38:	2203      	movs	r2, #3
 8013d3a:	4650      	mov	r0, sl
 8013d3c:	f7ec fae0 	bl	8000300 <memchr>
 8013d40:	b138      	cbz	r0, 8013d52 <_vfiprintf_r+0x176>
 8013d42:	9b04      	ldr	r3, [sp, #16]
 8013d44:	eba0 000a 	sub.w	r0, r0, sl
 8013d48:	2240      	movs	r2, #64	@ 0x40
 8013d4a:	4082      	lsls	r2, r0
 8013d4c:	4313      	orrs	r3, r2
 8013d4e:	3401      	adds	r4, #1
 8013d50:	9304      	str	r3, [sp, #16]
 8013d52:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013d56:	4829      	ldr	r0, [pc, #164]	@ (8013dfc <_vfiprintf_r+0x220>)
 8013d58:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8013d5c:	2206      	movs	r2, #6
 8013d5e:	f7ec facf 	bl	8000300 <memchr>
 8013d62:	2800      	cmp	r0, #0
 8013d64:	d03f      	beq.n	8013de6 <_vfiprintf_r+0x20a>
 8013d66:	4b26      	ldr	r3, [pc, #152]	@ (8013e00 <_vfiprintf_r+0x224>)
 8013d68:	bb1b      	cbnz	r3, 8013db2 <_vfiprintf_r+0x1d6>
 8013d6a:	9b03      	ldr	r3, [sp, #12]
 8013d6c:	3307      	adds	r3, #7
 8013d6e:	f023 0307 	bic.w	r3, r3, #7
 8013d72:	3308      	adds	r3, #8
 8013d74:	9303      	str	r3, [sp, #12]
 8013d76:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013d78:	443b      	add	r3, r7
 8013d7a:	9309      	str	r3, [sp, #36]	@ 0x24
 8013d7c:	e76a      	b.n	8013c54 <_vfiprintf_r+0x78>
 8013d7e:	fb0c 3202 	mla	r2, ip, r2, r3
 8013d82:	460c      	mov	r4, r1
 8013d84:	2001      	movs	r0, #1
 8013d86:	e7a8      	b.n	8013cda <_vfiprintf_r+0xfe>
 8013d88:	2300      	movs	r3, #0
 8013d8a:	3401      	adds	r4, #1
 8013d8c:	9305      	str	r3, [sp, #20]
 8013d8e:	4619      	mov	r1, r3
 8013d90:	f04f 0c0a 	mov.w	ip, #10
 8013d94:	4620      	mov	r0, r4
 8013d96:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013d9a:	3a30      	subs	r2, #48	@ 0x30
 8013d9c:	2a09      	cmp	r2, #9
 8013d9e:	d903      	bls.n	8013da8 <_vfiprintf_r+0x1cc>
 8013da0:	2b00      	cmp	r3, #0
 8013da2:	d0c6      	beq.n	8013d32 <_vfiprintf_r+0x156>
 8013da4:	9105      	str	r1, [sp, #20]
 8013da6:	e7c4      	b.n	8013d32 <_vfiprintf_r+0x156>
 8013da8:	fb0c 2101 	mla	r1, ip, r1, r2
 8013dac:	4604      	mov	r4, r0
 8013dae:	2301      	movs	r3, #1
 8013db0:	e7f0      	b.n	8013d94 <_vfiprintf_r+0x1b8>
 8013db2:	ab03      	add	r3, sp, #12
 8013db4:	9300      	str	r3, [sp, #0]
 8013db6:	462a      	mov	r2, r5
 8013db8:	4b12      	ldr	r3, [pc, #72]	@ (8013e04 <_vfiprintf_r+0x228>)
 8013dba:	a904      	add	r1, sp, #16
 8013dbc:	4630      	mov	r0, r6
 8013dbe:	f3af 8000 	nop.w
 8013dc2:	4607      	mov	r7, r0
 8013dc4:	1c78      	adds	r0, r7, #1
 8013dc6:	d1d6      	bne.n	8013d76 <_vfiprintf_r+0x19a>
 8013dc8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8013dca:	07d9      	lsls	r1, r3, #31
 8013dcc:	d405      	bmi.n	8013dda <_vfiprintf_r+0x1fe>
 8013dce:	89ab      	ldrh	r3, [r5, #12]
 8013dd0:	059a      	lsls	r2, r3, #22
 8013dd2:	d402      	bmi.n	8013dda <_vfiprintf_r+0x1fe>
 8013dd4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8013dd6:	f7ff fe7d 	bl	8013ad4 <__retarget_lock_release_recursive>
 8013dda:	89ab      	ldrh	r3, [r5, #12]
 8013ddc:	065b      	lsls	r3, r3, #25
 8013dde:	f53f af1f 	bmi.w	8013c20 <_vfiprintf_r+0x44>
 8013de2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8013de4:	e71e      	b.n	8013c24 <_vfiprintf_r+0x48>
 8013de6:	ab03      	add	r3, sp, #12
 8013de8:	9300      	str	r3, [sp, #0]
 8013dea:	462a      	mov	r2, r5
 8013dec:	4b05      	ldr	r3, [pc, #20]	@ (8013e04 <_vfiprintf_r+0x228>)
 8013dee:	a904      	add	r1, sp, #16
 8013df0:	4630      	mov	r0, r6
 8013df2:	f000 f879 	bl	8013ee8 <_printf_i>
 8013df6:	e7e4      	b.n	8013dc2 <_vfiprintf_r+0x1e6>
 8013df8:	08014ca1 	.word	0x08014ca1
 8013dfc:	08014cab 	.word	0x08014cab
 8013e00:	00000000 	.word	0x00000000
 8013e04:	08013bb7 	.word	0x08013bb7
 8013e08:	08014ca7 	.word	0x08014ca7

08013e0c <_printf_common>:
 8013e0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013e10:	4616      	mov	r6, r2
 8013e12:	4698      	mov	r8, r3
 8013e14:	688a      	ldr	r2, [r1, #8]
 8013e16:	690b      	ldr	r3, [r1, #16]
 8013e18:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8013e1c:	4293      	cmp	r3, r2
 8013e1e:	bfb8      	it	lt
 8013e20:	4613      	movlt	r3, r2
 8013e22:	6033      	str	r3, [r6, #0]
 8013e24:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8013e28:	4607      	mov	r7, r0
 8013e2a:	460c      	mov	r4, r1
 8013e2c:	b10a      	cbz	r2, 8013e32 <_printf_common+0x26>
 8013e2e:	3301      	adds	r3, #1
 8013e30:	6033      	str	r3, [r6, #0]
 8013e32:	6823      	ldr	r3, [r4, #0]
 8013e34:	0699      	lsls	r1, r3, #26
 8013e36:	bf42      	ittt	mi
 8013e38:	6833      	ldrmi	r3, [r6, #0]
 8013e3a:	3302      	addmi	r3, #2
 8013e3c:	6033      	strmi	r3, [r6, #0]
 8013e3e:	6825      	ldr	r5, [r4, #0]
 8013e40:	f015 0506 	ands.w	r5, r5, #6
 8013e44:	d106      	bne.n	8013e54 <_printf_common+0x48>
 8013e46:	f104 0a19 	add.w	sl, r4, #25
 8013e4a:	68e3      	ldr	r3, [r4, #12]
 8013e4c:	6832      	ldr	r2, [r6, #0]
 8013e4e:	1a9b      	subs	r3, r3, r2
 8013e50:	42ab      	cmp	r3, r5
 8013e52:	dc26      	bgt.n	8013ea2 <_printf_common+0x96>
 8013e54:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8013e58:	6822      	ldr	r2, [r4, #0]
 8013e5a:	3b00      	subs	r3, #0
 8013e5c:	bf18      	it	ne
 8013e5e:	2301      	movne	r3, #1
 8013e60:	0692      	lsls	r2, r2, #26
 8013e62:	d42b      	bmi.n	8013ebc <_printf_common+0xb0>
 8013e64:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8013e68:	4641      	mov	r1, r8
 8013e6a:	4638      	mov	r0, r7
 8013e6c:	47c8      	blx	r9
 8013e6e:	3001      	adds	r0, #1
 8013e70:	d01e      	beq.n	8013eb0 <_printf_common+0xa4>
 8013e72:	6823      	ldr	r3, [r4, #0]
 8013e74:	6922      	ldr	r2, [r4, #16]
 8013e76:	f003 0306 	and.w	r3, r3, #6
 8013e7a:	2b04      	cmp	r3, #4
 8013e7c:	bf02      	ittt	eq
 8013e7e:	68e5      	ldreq	r5, [r4, #12]
 8013e80:	6833      	ldreq	r3, [r6, #0]
 8013e82:	1aed      	subeq	r5, r5, r3
 8013e84:	68a3      	ldr	r3, [r4, #8]
 8013e86:	bf0c      	ite	eq
 8013e88:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8013e8c:	2500      	movne	r5, #0
 8013e8e:	4293      	cmp	r3, r2
 8013e90:	bfc4      	itt	gt
 8013e92:	1a9b      	subgt	r3, r3, r2
 8013e94:	18ed      	addgt	r5, r5, r3
 8013e96:	2600      	movs	r6, #0
 8013e98:	341a      	adds	r4, #26
 8013e9a:	42b5      	cmp	r5, r6
 8013e9c:	d11a      	bne.n	8013ed4 <_printf_common+0xc8>
 8013e9e:	2000      	movs	r0, #0
 8013ea0:	e008      	b.n	8013eb4 <_printf_common+0xa8>
 8013ea2:	2301      	movs	r3, #1
 8013ea4:	4652      	mov	r2, sl
 8013ea6:	4641      	mov	r1, r8
 8013ea8:	4638      	mov	r0, r7
 8013eaa:	47c8      	blx	r9
 8013eac:	3001      	adds	r0, #1
 8013eae:	d103      	bne.n	8013eb8 <_printf_common+0xac>
 8013eb0:	f04f 30ff 	mov.w	r0, #4294967295
 8013eb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013eb8:	3501      	adds	r5, #1
 8013eba:	e7c6      	b.n	8013e4a <_printf_common+0x3e>
 8013ebc:	18e1      	adds	r1, r4, r3
 8013ebe:	1c5a      	adds	r2, r3, #1
 8013ec0:	2030      	movs	r0, #48	@ 0x30
 8013ec2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8013ec6:	4422      	add	r2, r4
 8013ec8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8013ecc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8013ed0:	3302      	adds	r3, #2
 8013ed2:	e7c7      	b.n	8013e64 <_printf_common+0x58>
 8013ed4:	2301      	movs	r3, #1
 8013ed6:	4622      	mov	r2, r4
 8013ed8:	4641      	mov	r1, r8
 8013eda:	4638      	mov	r0, r7
 8013edc:	47c8      	blx	r9
 8013ede:	3001      	adds	r0, #1
 8013ee0:	d0e6      	beq.n	8013eb0 <_printf_common+0xa4>
 8013ee2:	3601      	adds	r6, #1
 8013ee4:	e7d9      	b.n	8013e9a <_printf_common+0x8e>
	...

08013ee8 <_printf_i>:
 8013ee8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8013eec:	7e0f      	ldrb	r7, [r1, #24]
 8013eee:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8013ef0:	2f78      	cmp	r7, #120	@ 0x78
 8013ef2:	4691      	mov	r9, r2
 8013ef4:	4680      	mov	r8, r0
 8013ef6:	460c      	mov	r4, r1
 8013ef8:	469a      	mov	sl, r3
 8013efa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8013efe:	d807      	bhi.n	8013f10 <_printf_i+0x28>
 8013f00:	2f62      	cmp	r7, #98	@ 0x62
 8013f02:	d80a      	bhi.n	8013f1a <_printf_i+0x32>
 8013f04:	2f00      	cmp	r7, #0
 8013f06:	f000 80d2 	beq.w	80140ae <_printf_i+0x1c6>
 8013f0a:	2f58      	cmp	r7, #88	@ 0x58
 8013f0c:	f000 80b9 	beq.w	8014082 <_printf_i+0x19a>
 8013f10:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8013f14:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8013f18:	e03a      	b.n	8013f90 <_printf_i+0xa8>
 8013f1a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8013f1e:	2b15      	cmp	r3, #21
 8013f20:	d8f6      	bhi.n	8013f10 <_printf_i+0x28>
 8013f22:	a101      	add	r1, pc, #4	@ (adr r1, 8013f28 <_printf_i+0x40>)
 8013f24:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8013f28:	08013f81 	.word	0x08013f81
 8013f2c:	08013f95 	.word	0x08013f95
 8013f30:	08013f11 	.word	0x08013f11
 8013f34:	08013f11 	.word	0x08013f11
 8013f38:	08013f11 	.word	0x08013f11
 8013f3c:	08013f11 	.word	0x08013f11
 8013f40:	08013f95 	.word	0x08013f95
 8013f44:	08013f11 	.word	0x08013f11
 8013f48:	08013f11 	.word	0x08013f11
 8013f4c:	08013f11 	.word	0x08013f11
 8013f50:	08013f11 	.word	0x08013f11
 8013f54:	08014095 	.word	0x08014095
 8013f58:	08013fbf 	.word	0x08013fbf
 8013f5c:	0801404f 	.word	0x0801404f
 8013f60:	08013f11 	.word	0x08013f11
 8013f64:	08013f11 	.word	0x08013f11
 8013f68:	080140b7 	.word	0x080140b7
 8013f6c:	08013f11 	.word	0x08013f11
 8013f70:	08013fbf 	.word	0x08013fbf
 8013f74:	08013f11 	.word	0x08013f11
 8013f78:	08013f11 	.word	0x08013f11
 8013f7c:	08014057 	.word	0x08014057
 8013f80:	6833      	ldr	r3, [r6, #0]
 8013f82:	1d1a      	adds	r2, r3, #4
 8013f84:	681b      	ldr	r3, [r3, #0]
 8013f86:	6032      	str	r2, [r6, #0]
 8013f88:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8013f8c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8013f90:	2301      	movs	r3, #1
 8013f92:	e09d      	b.n	80140d0 <_printf_i+0x1e8>
 8013f94:	6833      	ldr	r3, [r6, #0]
 8013f96:	6820      	ldr	r0, [r4, #0]
 8013f98:	1d19      	adds	r1, r3, #4
 8013f9a:	6031      	str	r1, [r6, #0]
 8013f9c:	0606      	lsls	r6, r0, #24
 8013f9e:	d501      	bpl.n	8013fa4 <_printf_i+0xbc>
 8013fa0:	681d      	ldr	r5, [r3, #0]
 8013fa2:	e003      	b.n	8013fac <_printf_i+0xc4>
 8013fa4:	0645      	lsls	r5, r0, #25
 8013fa6:	d5fb      	bpl.n	8013fa0 <_printf_i+0xb8>
 8013fa8:	f9b3 5000 	ldrsh.w	r5, [r3]
 8013fac:	2d00      	cmp	r5, #0
 8013fae:	da03      	bge.n	8013fb8 <_printf_i+0xd0>
 8013fb0:	232d      	movs	r3, #45	@ 0x2d
 8013fb2:	426d      	negs	r5, r5
 8013fb4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8013fb8:	4859      	ldr	r0, [pc, #356]	@ (8014120 <_printf_i+0x238>)
 8013fba:	230a      	movs	r3, #10
 8013fbc:	e011      	b.n	8013fe2 <_printf_i+0xfa>
 8013fbe:	6821      	ldr	r1, [r4, #0]
 8013fc0:	6833      	ldr	r3, [r6, #0]
 8013fc2:	0608      	lsls	r0, r1, #24
 8013fc4:	f853 5b04 	ldr.w	r5, [r3], #4
 8013fc8:	d402      	bmi.n	8013fd0 <_printf_i+0xe8>
 8013fca:	0649      	lsls	r1, r1, #25
 8013fcc:	bf48      	it	mi
 8013fce:	b2ad      	uxthmi	r5, r5
 8013fd0:	2f6f      	cmp	r7, #111	@ 0x6f
 8013fd2:	4853      	ldr	r0, [pc, #332]	@ (8014120 <_printf_i+0x238>)
 8013fd4:	6033      	str	r3, [r6, #0]
 8013fd6:	bf14      	ite	ne
 8013fd8:	230a      	movne	r3, #10
 8013fda:	2308      	moveq	r3, #8
 8013fdc:	2100      	movs	r1, #0
 8013fde:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8013fe2:	6866      	ldr	r6, [r4, #4]
 8013fe4:	60a6      	str	r6, [r4, #8]
 8013fe6:	2e00      	cmp	r6, #0
 8013fe8:	bfa2      	ittt	ge
 8013fea:	6821      	ldrge	r1, [r4, #0]
 8013fec:	f021 0104 	bicge.w	r1, r1, #4
 8013ff0:	6021      	strge	r1, [r4, #0]
 8013ff2:	b90d      	cbnz	r5, 8013ff8 <_printf_i+0x110>
 8013ff4:	2e00      	cmp	r6, #0
 8013ff6:	d04b      	beq.n	8014090 <_printf_i+0x1a8>
 8013ff8:	4616      	mov	r6, r2
 8013ffa:	fbb5 f1f3 	udiv	r1, r5, r3
 8013ffe:	fb03 5711 	mls	r7, r3, r1, r5
 8014002:	5dc7      	ldrb	r7, [r0, r7]
 8014004:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8014008:	462f      	mov	r7, r5
 801400a:	42bb      	cmp	r3, r7
 801400c:	460d      	mov	r5, r1
 801400e:	d9f4      	bls.n	8013ffa <_printf_i+0x112>
 8014010:	2b08      	cmp	r3, #8
 8014012:	d10b      	bne.n	801402c <_printf_i+0x144>
 8014014:	6823      	ldr	r3, [r4, #0]
 8014016:	07df      	lsls	r7, r3, #31
 8014018:	d508      	bpl.n	801402c <_printf_i+0x144>
 801401a:	6923      	ldr	r3, [r4, #16]
 801401c:	6861      	ldr	r1, [r4, #4]
 801401e:	4299      	cmp	r1, r3
 8014020:	bfde      	ittt	le
 8014022:	2330      	movle	r3, #48	@ 0x30
 8014024:	f806 3c01 	strble.w	r3, [r6, #-1]
 8014028:	f106 36ff 	addle.w	r6, r6, #4294967295
 801402c:	1b92      	subs	r2, r2, r6
 801402e:	6122      	str	r2, [r4, #16]
 8014030:	f8cd a000 	str.w	sl, [sp]
 8014034:	464b      	mov	r3, r9
 8014036:	aa03      	add	r2, sp, #12
 8014038:	4621      	mov	r1, r4
 801403a:	4640      	mov	r0, r8
 801403c:	f7ff fee6 	bl	8013e0c <_printf_common>
 8014040:	3001      	adds	r0, #1
 8014042:	d14a      	bne.n	80140da <_printf_i+0x1f2>
 8014044:	f04f 30ff 	mov.w	r0, #4294967295
 8014048:	b004      	add	sp, #16
 801404a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801404e:	6823      	ldr	r3, [r4, #0]
 8014050:	f043 0320 	orr.w	r3, r3, #32
 8014054:	6023      	str	r3, [r4, #0]
 8014056:	4833      	ldr	r0, [pc, #204]	@ (8014124 <_printf_i+0x23c>)
 8014058:	2778      	movs	r7, #120	@ 0x78
 801405a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801405e:	6823      	ldr	r3, [r4, #0]
 8014060:	6831      	ldr	r1, [r6, #0]
 8014062:	061f      	lsls	r7, r3, #24
 8014064:	f851 5b04 	ldr.w	r5, [r1], #4
 8014068:	d402      	bmi.n	8014070 <_printf_i+0x188>
 801406a:	065f      	lsls	r7, r3, #25
 801406c:	bf48      	it	mi
 801406e:	b2ad      	uxthmi	r5, r5
 8014070:	6031      	str	r1, [r6, #0]
 8014072:	07d9      	lsls	r1, r3, #31
 8014074:	bf44      	itt	mi
 8014076:	f043 0320 	orrmi.w	r3, r3, #32
 801407a:	6023      	strmi	r3, [r4, #0]
 801407c:	b11d      	cbz	r5, 8014086 <_printf_i+0x19e>
 801407e:	2310      	movs	r3, #16
 8014080:	e7ac      	b.n	8013fdc <_printf_i+0xf4>
 8014082:	4827      	ldr	r0, [pc, #156]	@ (8014120 <_printf_i+0x238>)
 8014084:	e7e9      	b.n	801405a <_printf_i+0x172>
 8014086:	6823      	ldr	r3, [r4, #0]
 8014088:	f023 0320 	bic.w	r3, r3, #32
 801408c:	6023      	str	r3, [r4, #0]
 801408e:	e7f6      	b.n	801407e <_printf_i+0x196>
 8014090:	4616      	mov	r6, r2
 8014092:	e7bd      	b.n	8014010 <_printf_i+0x128>
 8014094:	6833      	ldr	r3, [r6, #0]
 8014096:	6825      	ldr	r5, [r4, #0]
 8014098:	6961      	ldr	r1, [r4, #20]
 801409a:	1d18      	adds	r0, r3, #4
 801409c:	6030      	str	r0, [r6, #0]
 801409e:	062e      	lsls	r6, r5, #24
 80140a0:	681b      	ldr	r3, [r3, #0]
 80140a2:	d501      	bpl.n	80140a8 <_printf_i+0x1c0>
 80140a4:	6019      	str	r1, [r3, #0]
 80140a6:	e002      	b.n	80140ae <_printf_i+0x1c6>
 80140a8:	0668      	lsls	r0, r5, #25
 80140aa:	d5fb      	bpl.n	80140a4 <_printf_i+0x1bc>
 80140ac:	8019      	strh	r1, [r3, #0]
 80140ae:	2300      	movs	r3, #0
 80140b0:	6123      	str	r3, [r4, #16]
 80140b2:	4616      	mov	r6, r2
 80140b4:	e7bc      	b.n	8014030 <_printf_i+0x148>
 80140b6:	6833      	ldr	r3, [r6, #0]
 80140b8:	1d1a      	adds	r2, r3, #4
 80140ba:	6032      	str	r2, [r6, #0]
 80140bc:	681e      	ldr	r6, [r3, #0]
 80140be:	6862      	ldr	r2, [r4, #4]
 80140c0:	2100      	movs	r1, #0
 80140c2:	4630      	mov	r0, r6
 80140c4:	f7ec f91c 	bl	8000300 <memchr>
 80140c8:	b108      	cbz	r0, 80140ce <_printf_i+0x1e6>
 80140ca:	1b80      	subs	r0, r0, r6
 80140cc:	6060      	str	r0, [r4, #4]
 80140ce:	6863      	ldr	r3, [r4, #4]
 80140d0:	6123      	str	r3, [r4, #16]
 80140d2:	2300      	movs	r3, #0
 80140d4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80140d8:	e7aa      	b.n	8014030 <_printf_i+0x148>
 80140da:	6923      	ldr	r3, [r4, #16]
 80140dc:	4632      	mov	r2, r6
 80140de:	4649      	mov	r1, r9
 80140e0:	4640      	mov	r0, r8
 80140e2:	47d0      	blx	sl
 80140e4:	3001      	adds	r0, #1
 80140e6:	d0ad      	beq.n	8014044 <_printf_i+0x15c>
 80140e8:	6823      	ldr	r3, [r4, #0]
 80140ea:	079b      	lsls	r3, r3, #30
 80140ec:	d413      	bmi.n	8014116 <_printf_i+0x22e>
 80140ee:	68e0      	ldr	r0, [r4, #12]
 80140f0:	9b03      	ldr	r3, [sp, #12]
 80140f2:	4298      	cmp	r0, r3
 80140f4:	bfb8      	it	lt
 80140f6:	4618      	movlt	r0, r3
 80140f8:	e7a6      	b.n	8014048 <_printf_i+0x160>
 80140fa:	2301      	movs	r3, #1
 80140fc:	4632      	mov	r2, r6
 80140fe:	4649      	mov	r1, r9
 8014100:	4640      	mov	r0, r8
 8014102:	47d0      	blx	sl
 8014104:	3001      	adds	r0, #1
 8014106:	d09d      	beq.n	8014044 <_printf_i+0x15c>
 8014108:	3501      	adds	r5, #1
 801410a:	68e3      	ldr	r3, [r4, #12]
 801410c:	9903      	ldr	r1, [sp, #12]
 801410e:	1a5b      	subs	r3, r3, r1
 8014110:	42ab      	cmp	r3, r5
 8014112:	dcf2      	bgt.n	80140fa <_printf_i+0x212>
 8014114:	e7eb      	b.n	80140ee <_printf_i+0x206>
 8014116:	2500      	movs	r5, #0
 8014118:	f104 0619 	add.w	r6, r4, #25
 801411c:	e7f5      	b.n	801410a <_printf_i+0x222>
 801411e:	bf00      	nop
 8014120:	08014cb2 	.word	0x08014cb2
 8014124:	08014cc3 	.word	0x08014cc3

08014128 <__sflush_r>:
 8014128:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801412c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014130:	0716      	lsls	r6, r2, #28
 8014132:	4605      	mov	r5, r0
 8014134:	460c      	mov	r4, r1
 8014136:	d454      	bmi.n	80141e2 <__sflush_r+0xba>
 8014138:	684b      	ldr	r3, [r1, #4]
 801413a:	2b00      	cmp	r3, #0
 801413c:	dc02      	bgt.n	8014144 <__sflush_r+0x1c>
 801413e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8014140:	2b00      	cmp	r3, #0
 8014142:	dd48      	ble.n	80141d6 <__sflush_r+0xae>
 8014144:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8014146:	2e00      	cmp	r6, #0
 8014148:	d045      	beq.n	80141d6 <__sflush_r+0xae>
 801414a:	2300      	movs	r3, #0
 801414c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8014150:	682f      	ldr	r7, [r5, #0]
 8014152:	6a21      	ldr	r1, [r4, #32]
 8014154:	602b      	str	r3, [r5, #0]
 8014156:	d030      	beq.n	80141ba <__sflush_r+0x92>
 8014158:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801415a:	89a3      	ldrh	r3, [r4, #12]
 801415c:	0759      	lsls	r1, r3, #29
 801415e:	d505      	bpl.n	801416c <__sflush_r+0x44>
 8014160:	6863      	ldr	r3, [r4, #4]
 8014162:	1ad2      	subs	r2, r2, r3
 8014164:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8014166:	b10b      	cbz	r3, 801416c <__sflush_r+0x44>
 8014168:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801416a:	1ad2      	subs	r2, r2, r3
 801416c:	2300      	movs	r3, #0
 801416e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8014170:	6a21      	ldr	r1, [r4, #32]
 8014172:	4628      	mov	r0, r5
 8014174:	47b0      	blx	r6
 8014176:	1c43      	adds	r3, r0, #1
 8014178:	89a3      	ldrh	r3, [r4, #12]
 801417a:	d106      	bne.n	801418a <__sflush_r+0x62>
 801417c:	6829      	ldr	r1, [r5, #0]
 801417e:	291d      	cmp	r1, #29
 8014180:	d82b      	bhi.n	80141da <__sflush_r+0xb2>
 8014182:	4a2a      	ldr	r2, [pc, #168]	@ (801422c <__sflush_r+0x104>)
 8014184:	410a      	asrs	r2, r1
 8014186:	07d6      	lsls	r6, r2, #31
 8014188:	d427      	bmi.n	80141da <__sflush_r+0xb2>
 801418a:	2200      	movs	r2, #0
 801418c:	6062      	str	r2, [r4, #4]
 801418e:	04d9      	lsls	r1, r3, #19
 8014190:	6922      	ldr	r2, [r4, #16]
 8014192:	6022      	str	r2, [r4, #0]
 8014194:	d504      	bpl.n	80141a0 <__sflush_r+0x78>
 8014196:	1c42      	adds	r2, r0, #1
 8014198:	d101      	bne.n	801419e <__sflush_r+0x76>
 801419a:	682b      	ldr	r3, [r5, #0]
 801419c:	b903      	cbnz	r3, 80141a0 <__sflush_r+0x78>
 801419e:	6560      	str	r0, [r4, #84]	@ 0x54
 80141a0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80141a2:	602f      	str	r7, [r5, #0]
 80141a4:	b1b9      	cbz	r1, 80141d6 <__sflush_r+0xae>
 80141a6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80141aa:	4299      	cmp	r1, r3
 80141ac:	d002      	beq.n	80141b4 <__sflush_r+0x8c>
 80141ae:	4628      	mov	r0, r5
 80141b0:	f7ff fca0 	bl	8013af4 <_free_r>
 80141b4:	2300      	movs	r3, #0
 80141b6:	6363      	str	r3, [r4, #52]	@ 0x34
 80141b8:	e00d      	b.n	80141d6 <__sflush_r+0xae>
 80141ba:	2301      	movs	r3, #1
 80141bc:	4628      	mov	r0, r5
 80141be:	47b0      	blx	r6
 80141c0:	4602      	mov	r2, r0
 80141c2:	1c50      	adds	r0, r2, #1
 80141c4:	d1c9      	bne.n	801415a <__sflush_r+0x32>
 80141c6:	682b      	ldr	r3, [r5, #0]
 80141c8:	2b00      	cmp	r3, #0
 80141ca:	d0c6      	beq.n	801415a <__sflush_r+0x32>
 80141cc:	2b1d      	cmp	r3, #29
 80141ce:	d001      	beq.n	80141d4 <__sflush_r+0xac>
 80141d0:	2b16      	cmp	r3, #22
 80141d2:	d11e      	bne.n	8014212 <__sflush_r+0xea>
 80141d4:	602f      	str	r7, [r5, #0]
 80141d6:	2000      	movs	r0, #0
 80141d8:	e022      	b.n	8014220 <__sflush_r+0xf8>
 80141da:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80141de:	b21b      	sxth	r3, r3
 80141e0:	e01b      	b.n	801421a <__sflush_r+0xf2>
 80141e2:	690f      	ldr	r7, [r1, #16]
 80141e4:	2f00      	cmp	r7, #0
 80141e6:	d0f6      	beq.n	80141d6 <__sflush_r+0xae>
 80141e8:	0793      	lsls	r3, r2, #30
 80141ea:	680e      	ldr	r6, [r1, #0]
 80141ec:	bf08      	it	eq
 80141ee:	694b      	ldreq	r3, [r1, #20]
 80141f0:	600f      	str	r7, [r1, #0]
 80141f2:	bf18      	it	ne
 80141f4:	2300      	movne	r3, #0
 80141f6:	eba6 0807 	sub.w	r8, r6, r7
 80141fa:	608b      	str	r3, [r1, #8]
 80141fc:	f1b8 0f00 	cmp.w	r8, #0
 8014200:	dde9      	ble.n	80141d6 <__sflush_r+0xae>
 8014202:	6a21      	ldr	r1, [r4, #32]
 8014204:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8014206:	4643      	mov	r3, r8
 8014208:	463a      	mov	r2, r7
 801420a:	4628      	mov	r0, r5
 801420c:	47b0      	blx	r6
 801420e:	2800      	cmp	r0, #0
 8014210:	dc08      	bgt.n	8014224 <__sflush_r+0xfc>
 8014212:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014216:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801421a:	81a3      	strh	r3, [r4, #12]
 801421c:	f04f 30ff 	mov.w	r0, #4294967295
 8014220:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014224:	4407      	add	r7, r0
 8014226:	eba8 0800 	sub.w	r8, r8, r0
 801422a:	e7e7      	b.n	80141fc <__sflush_r+0xd4>
 801422c:	dfbffffe 	.word	0xdfbffffe

08014230 <_fflush_r>:
 8014230:	b538      	push	{r3, r4, r5, lr}
 8014232:	690b      	ldr	r3, [r1, #16]
 8014234:	4605      	mov	r5, r0
 8014236:	460c      	mov	r4, r1
 8014238:	b913      	cbnz	r3, 8014240 <_fflush_r+0x10>
 801423a:	2500      	movs	r5, #0
 801423c:	4628      	mov	r0, r5
 801423e:	bd38      	pop	{r3, r4, r5, pc}
 8014240:	b118      	cbz	r0, 801424a <_fflush_r+0x1a>
 8014242:	6a03      	ldr	r3, [r0, #32]
 8014244:	b90b      	cbnz	r3, 801424a <_fflush_r+0x1a>
 8014246:	f7ff f9d7 	bl	80135f8 <__sinit>
 801424a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801424e:	2b00      	cmp	r3, #0
 8014250:	d0f3      	beq.n	801423a <_fflush_r+0xa>
 8014252:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8014254:	07d0      	lsls	r0, r2, #31
 8014256:	d404      	bmi.n	8014262 <_fflush_r+0x32>
 8014258:	0599      	lsls	r1, r3, #22
 801425a:	d402      	bmi.n	8014262 <_fflush_r+0x32>
 801425c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801425e:	f7ff fc38 	bl	8013ad2 <__retarget_lock_acquire_recursive>
 8014262:	4628      	mov	r0, r5
 8014264:	4621      	mov	r1, r4
 8014266:	f7ff ff5f 	bl	8014128 <__sflush_r>
 801426a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801426c:	07da      	lsls	r2, r3, #31
 801426e:	4605      	mov	r5, r0
 8014270:	d4e4      	bmi.n	801423c <_fflush_r+0xc>
 8014272:	89a3      	ldrh	r3, [r4, #12]
 8014274:	059b      	lsls	r3, r3, #22
 8014276:	d4e1      	bmi.n	801423c <_fflush_r+0xc>
 8014278:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801427a:	f7ff fc2b 	bl	8013ad4 <__retarget_lock_release_recursive>
 801427e:	e7dd      	b.n	801423c <_fflush_r+0xc>

08014280 <__swhatbuf_r>:
 8014280:	b570      	push	{r4, r5, r6, lr}
 8014282:	460c      	mov	r4, r1
 8014284:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014288:	2900      	cmp	r1, #0
 801428a:	b096      	sub	sp, #88	@ 0x58
 801428c:	4615      	mov	r5, r2
 801428e:	461e      	mov	r6, r3
 8014290:	da0d      	bge.n	80142ae <__swhatbuf_r+0x2e>
 8014292:	89a3      	ldrh	r3, [r4, #12]
 8014294:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8014298:	f04f 0100 	mov.w	r1, #0
 801429c:	bf14      	ite	ne
 801429e:	2340      	movne	r3, #64	@ 0x40
 80142a0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80142a4:	2000      	movs	r0, #0
 80142a6:	6031      	str	r1, [r6, #0]
 80142a8:	602b      	str	r3, [r5, #0]
 80142aa:	b016      	add	sp, #88	@ 0x58
 80142ac:	bd70      	pop	{r4, r5, r6, pc}
 80142ae:	466a      	mov	r2, sp
 80142b0:	f000 f87c 	bl	80143ac <_fstat_r>
 80142b4:	2800      	cmp	r0, #0
 80142b6:	dbec      	blt.n	8014292 <__swhatbuf_r+0x12>
 80142b8:	9901      	ldr	r1, [sp, #4]
 80142ba:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80142be:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80142c2:	4259      	negs	r1, r3
 80142c4:	4159      	adcs	r1, r3
 80142c6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80142ca:	e7eb      	b.n	80142a4 <__swhatbuf_r+0x24>

080142cc <__smakebuf_r>:
 80142cc:	898b      	ldrh	r3, [r1, #12]
 80142ce:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80142d0:	079d      	lsls	r5, r3, #30
 80142d2:	4606      	mov	r6, r0
 80142d4:	460c      	mov	r4, r1
 80142d6:	d507      	bpl.n	80142e8 <__smakebuf_r+0x1c>
 80142d8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80142dc:	6023      	str	r3, [r4, #0]
 80142de:	6123      	str	r3, [r4, #16]
 80142e0:	2301      	movs	r3, #1
 80142e2:	6163      	str	r3, [r4, #20]
 80142e4:	b003      	add	sp, #12
 80142e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80142e8:	ab01      	add	r3, sp, #4
 80142ea:	466a      	mov	r2, sp
 80142ec:	f7ff ffc8 	bl	8014280 <__swhatbuf_r>
 80142f0:	9f00      	ldr	r7, [sp, #0]
 80142f2:	4605      	mov	r5, r0
 80142f4:	4639      	mov	r1, r7
 80142f6:	4630      	mov	r0, r6
 80142f8:	f7ff f810 	bl	801331c <_malloc_r>
 80142fc:	b948      	cbnz	r0, 8014312 <__smakebuf_r+0x46>
 80142fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014302:	059a      	lsls	r2, r3, #22
 8014304:	d4ee      	bmi.n	80142e4 <__smakebuf_r+0x18>
 8014306:	f023 0303 	bic.w	r3, r3, #3
 801430a:	f043 0302 	orr.w	r3, r3, #2
 801430e:	81a3      	strh	r3, [r4, #12]
 8014310:	e7e2      	b.n	80142d8 <__smakebuf_r+0xc>
 8014312:	89a3      	ldrh	r3, [r4, #12]
 8014314:	6020      	str	r0, [r4, #0]
 8014316:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801431a:	81a3      	strh	r3, [r4, #12]
 801431c:	9b01      	ldr	r3, [sp, #4]
 801431e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8014322:	b15b      	cbz	r3, 801433c <__smakebuf_r+0x70>
 8014324:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014328:	4630      	mov	r0, r6
 801432a:	f000 f851 	bl	80143d0 <_isatty_r>
 801432e:	b128      	cbz	r0, 801433c <__smakebuf_r+0x70>
 8014330:	89a3      	ldrh	r3, [r4, #12]
 8014332:	f023 0303 	bic.w	r3, r3, #3
 8014336:	f043 0301 	orr.w	r3, r3, #1
 801433a:	81a3      	strh	r3, [r4, #12]
 801433c:	89a3      	ldrh	r3, [r4, #12]
 801433e:	431d      	orrs	r5, r3
 8014340:	81a5      	strh	r5, [r4, #12]
 8014342:	e7cf      	b.n	80142e4 <__smakebuf_r+0x18>

08014344 <_putc_r>:
 8014344:	b570      	push	{r4, r5, r6, lr}
 8014346:	460d      	mov	r5, r1
 8014348:	4614      	mov	r4, r2
 801434a:	4606      	mov	r6, r0
 801434c:	b118      	cbz	r0, 8014356 <_putc_r+0x12>
 801434e:	6a03      	ldr	r3, [r0, #32]
 8014350:	b90b      	cbnz	r3, 8014356 <_putc_r+0x12>
 8014352:	f7ff f951 	bl	80135f8 <__sinit>
 8014356:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8014358:	07d8      	lsls	r0, r3, #31
 801435a:	d405      	bmi.n	8014368 <_putc_r+0x24>
 801435c:	89a3      	ldrh	r3, [r4, #12]
 801435e:	0599      	lsls	r1, r3, #22
 8014360:	d402      	bmi.n	8014368 <_putc_r+0x24>
 8014362:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8014364:	f7ff fbb5 	bl	8013ad2 <__retarget_lock_acquire_recursive>
 8014368:	68a3      	ldr	r3, [r4, #8]
 801436a:	3b01      	subs	r3, #1
 801436c:	2b00      	cmp	r3, #0
 801436e:	60a3      	str	r3, [r4, #8]
 8014370:	da05      	bge.n	801437e <_putc_r+0x3a>
 8014372:	69a2      	ldr	r2, [r4, #24]
 8014374:	4293      	cmp	r3, r2
 8014376:	db12      	blt.n	801439e <_putc_r+0x5a>
 8014378:	b2eb      	uxtb	r3, r5
 801437a:	2b0a      	cmp	r3, #10
 801437c:	d00f      	beq.n	801439e <_putc_r+0x5a>
 801437e:	6823      	ldr	r3, [r4, #0]
 8014380:	1c5a      	adds	r2, r3, #1
 8014382:	6022      	str	r2, [r4, #0]
 8014384:	701d      	strb	r5, [r3, #0]
 8014386:	b2ed      	uxtb	r5, r5
 8014388:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801438a:	07da      	lsls	r2, r3, #31
 801438c:	d405      	bmi.n	801439a <_putc_r+0x56>
 801438e:	89a3      	ldrh	r3, [r4, #12]
 8014390:	059b      	lsls	r3, r3, #22
 8014392:	d402      	bmi.n	801439a <_putc_r+0x56>
 8014394:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8014396:	f7ff fb9d 	bl	8013ad4 <__retarget_lock_release_recursive>
 801439a:	4628      	mov	r0, r5
 801439c:	bd70      	pop	{r4, r5, r6, pc}
 801439e:	4629      	mov	r1, r5
 80143a0:	4622      	mov	r2, r4
 80143a2:	4630      	mov	r0, r6
 80143a4:	f7ff fa19 	bl	80137da <__swbuf_r>
 80143a8:	4605      	mov	r5, r0
 80143aa:	e7ed      	b.n	8014388 <_putc_r+0x44>

080143ac <_fstat_r>:
 80143ac:	b538      	push	{r3, r4, r5, lr}
 80143ae:	4d07      	ldr	r5, [pc, #28]	@ (80143cc <_fstat_r+0x20>)
 80143b0:	2300      	movs	r3, #0
 80143b2:	4604      	mov	r4, r0
 80143b4:	4608      	mov	r0, r1
 80143b6:	4611      	mov	r1, r2
 80143b8:	602b      	str	r3, [r5, #0]
 80143ba:	f7f0 fbdd 	bl	8004b78 <_fstat>
 80143be:	1c43      	adds	r3, r0, #1
 80143c0:	d102      	bne.n	80143c8 <_fstat_r+0x1c>
 80143c2:	682b      	ldr	r3, [r5, #0]
 80143c4:	b103      	cbz	r3, 80143c8 <_fstat_r+0x1c>
 80143c6:	6023      	str	r3, [r4, #0]
 80143c8:	bd38      	pop	{r3, r4, r5, pc}
 80143ca:	bf00      	nop
 80143cc:	24000ed0 	.word	0x24000ed0

080143d0 <_isatty_r>:
 80143d0:	b538      	push	{r3, r4, r5, lr}
 80143d2:	4d06      	ldr	r5, [pc, #24]	@ (80143ec <_isatty_r+0x1c>)
 80143d4:	2300      	movs	r3, #0
 80143d6:	4604      	mov	r4, r0
 80143d8:	4608      	mov	r0, r1
 80143da:	602b      	str	r3, [r5, #0]
 80143dc:	f7f0 fbdc 	bl	8004b98 <_isatty>
 80143e0:	1c43      	adds	r3, r0, #1
 80143e2:	d102      	bne.n	80143ea <_isatty_r+0x1a>
 80143e4:	682b      	ldr	r3, [r5, #0]
 80143e6:	b103      	cbz	r3, 80143ea <_isatty_r+0x1a>
 80143e8:	6023      	str	r3, [r4, #0]
 80143ea:	bd38      	pop	{r3, r4, r5, pc}
 80143ec:	24000ed0 	.word	0x24000ed0

080143f0 <_init>:
 80143f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80143f2:	bf00      	nop
 80143f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80143f6:	bc08      	pop	{r3}
 80143f8:	469e      	mov	lr, r3
 80143fa:	4770      	bx	lr

080143fc <_fini>:
 80143fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80143fe:	bf00      	nop
 8014400:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014402:	bc08      	pop	{r3}
 8014404:	469e      	mov	lr, r3
 8014406:	4770      	bx	lr
